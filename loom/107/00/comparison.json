{"files":[{"patch":"@@ -249,2 +249,2 @@\n-  assert (!is_interpreted_frame(), \"interpreted\");\n-  assert (oop_map() != NULL, \"\");\n+  assert(!is_interpreted_frame(), \"interpreted\");\n+  assert(oop_map() != NULL, \"\");\n@@ -255,1 +255,1 @@\n-  assert (cb()->is_compiled(), \"\");\n+  assert(cb()->is_compiled(), \"\");\n@@ -260,1 +260,1 @@\n-  assert (mask != NULL, \"\");\n+  assert(mask != NULL, \"\");\n@@ -436,1 +436,1 @@\n-  assert (l_sender_sp == real_fp(), \"\");\n+  assert(l_sender_sp == real_fp(), \"\");\n@@ -454,3 +454,3 @@\n-      assert (!_cb->caller_must_gc_arguments(map->thread()), \"\");\n-      assert (!map->include_argument_oops(), \"\");\n-      assert (oop_map() == NULL || !oop_map()->has_any(OopMapValue::callee_saved_value), \"callee-saved value in compiled frame\");\n+      assert(!_cb->caller_must_gc_arguments(map->thread()), \"\");\n+      assert(!map->include_argument_oops(), \"\");\n+      assert(oop_map() == NULL || !oop_map()->has_any(OopMapValue::callee_saved_value), \"callee-saved value in compiled frame\");\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -687,1 +687,1 @@\n-  assert (nop->check(), \"\");\n+  assert(nop->check(), \"\");\n@@ -704,1 +704,1 @@\n-    assert (instr != NULL, \"\");\n+    assert(instr != NULL, \"\");\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6588,1 +6588,1 @@\n-    assert (return_barrier || !exception, \"must be\");\n+    assert(return_barrier || !exception, \"must be\");\n@@ -8037,3 +8037,3 @@\n-  assert (ContinuationEntry::size() % VMRegImpl::stack_slot_size == 0, \"\");\n-  assert (in_bytes(ContinuationEntry::cont_offset())  % VMRegImpl::stack_slot_size == 0, \"\");\n-  assert (in_bytes(ContinuationEntry::chunk_offset()) % VMRegImpl::stack_slot_size == 0, \"\");\n+  assert(ContinuationEntry::size() % VMRegImpl::stack_slot_size == 0, \"\");\n+  assert(in_bytes(ContinuationEntry::cont_offset())  % VMRegImpl::stack_slot_size == 0, \"\");\n+  assert(in_bytes(ContinuationEntry::chunk_offset()) % VMRegImpl::stack_slot_size == 0, \"\");\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  assert (FKind::is_instance(f), \"\");\n+  assert(FKind::is_instance(f), \"\");\n@@ -107,1 +107,1 @@\n-  assert (FKind::is_instance(f), \"\");\n+  assert(FKind::is_instance(f), \"\");\n@@ -125,1 +125,1 @@\n-  assert (*(hfp + offset) == *(vfp + offset), \"\");\n+  assert(*(hfp + offset) == *(vfp + offset), \"\");\n@@ -134,2 +134,2 @@\n-  assert (hfp == hf.unextended_sp() + (f.fp() - f.unextended_sp()), \"\");\n-  assert ((f.at(frame::interpreter_frame_last_sp_offset) != 0)\n+  assert(hfp == hf.unextended_sp() + (f.fp() - f.unextended_sp()), \"\");\n+  assert((f.at(frame::interpreter_frame_last_sp_offset) != 0)\n@@ -137,1 +137,1 @@\n-  assert (f.fp() > (intptr_t*)f.at(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert(f.fp() > (intptr_t*)f.at(frame::interpreter_frame_initial_sp_offset), \"\");\n@@ -148,5 +148,5 @@\n-  assert ((hf.fp() - hf.unextended_sp()) == (f.fp() - f.unextended_sp()), \"\");\n-  assert (hf.unextended_sp() == (intptr_t*)hf.at(frame::interpreter_frame_last_sp_offset), \"\");\n-  assert (hf.unextended_sp() <= (intptr_t*)hf.at(frame::interpreter_frame_initial_sp_offset), \"\");\n-  assert (hf.fp()            >  (intptr_t*)hf.at(frame::interpreter_frame_initial_sp_offset), \"\");\n-  assert (hf.fp()            <= (intptr_t*)hf.at(frame::interpreter_frame_locals_offset), \"\");\n+  assert((hf.fp() - hf.unextended_sp()) == (f.fp() - f.unextended_sp()), \"\");\n+  assert(hf.unextended_sp() == (intptr_t*)hf.at(frame::interpreter_frame_last_sp_offset), \"\");\n+  assert(hf.unextended_sp() <= (intptr_t*)hf.at(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert(hf.fp()            >  (intptr_t*)hf.at(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert(hf.fp()            <= (intptr_t*)hf.at(frame::interpreter_frame_locals_offset), \"\");\n@@ -158,2 +158,2 @@\n-  assert (chunk->is_in_chunk(hf.sp() - 1), \"\");\n-  assert (chunk->is_in_chunk(hf.sp() - frame::sender_sp_offset), \"\");\n+  assert(chunk->is_in_chunk(hf.sp() - 1), \"\");\n+  assert(chunk->is_in_chunk(hf.sp() - frame::sender_sp_offset), \"\");\n@@ -171,2 +171,2 @@\n-  assert (FKind::is_instance(f), \"\");\n-  assert (!caller.is_interpreted_frame()\n+  assert(FKind::is_instance(f), \"\");\n+  assert(!caller.is_interpreted_frame()\n@@ -177,1 +177,1 @@\n-    assert ((intptr_t*)f.at(frame::interpreter_frame_last_sp_offset) == nullptr\n+    assert((intptr_t*)f.at(frame::interpreter_frame_last_sp_offset) == nullptr\n@@ -183,1 +183,1 @@\n-    assert (sp <= fp && fp <= caller.unextended_sp(), \"\");\n+    assert(sp <= fp && fp <= caller.unextended_sp(), \"\");\n@@ -186,1 +186,1 @@\n-    assert (_cont.tail()->is_in_chunk(sp), \"\");\n+    assert(_cont.tail()->is_in_chunk(sp), \"\");\n@@ -201,1 +201,1 @@\n-    assert (_cont.tail()->is_in_chunk(sp), \"\");\n+    assert(_cont.tail()->is_in_chunk(sp), \"\");\n@@ -211,1 +211,1 @@\n-    assert (!caller.is_empty(), \"\");\n+    assert(!caller.is_empty(), \"\");\n@@ -248,1 +248,1 @@\n-  assert (FKind::is_instance(hf), \"\");\n+  assert(FKind::is_instance(hf), \"\");\n@@ -257,1 +257,1 @@\n-    assert (vsp == unextended_sp, \"\");\n+    assert(vsp == unextended_sp, \"\");\n@@ -262,1 +262,1 @@\n-    assert ((int)offset == locals + frame::sender_sp_offset - 1, \"\");\n+    assert((int)offset == locals + frame::sender_sp_offset - 1, \"\");\n@@ -274,1 +274,1 @@\n-      assert (caller.sp() == vsp + (fsize-argsize), \"\");\n+      assert(caller.sp() == vsp + (fsize-argsize), \"\");\n@@ -279,1 +279,1 @@\n-    assert (hf.cb() != nullptr && hf.oop_map() != nullptr, \"\");\n+    assert(hf.cb() != nullptr && hf.oop_map() != nullptr, \"\");\n@@ -302,1 +302,1 @@\n-  assert (!bottom || caller.fp() == _cont.entryFP(), \"\");\n+  assert(!bottom || caller.fp() == _cont.entryFP(), \"\");\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-  assert (f.raw_pc() == pc, \"f.ra_pc: \" INTPTR_FORMAT \" actual: \" INTPTR_FORMAT, p2i(f.raw_pc()), p2i(pc));\n-  assert (f.fp() == fp, \"f.fp: \" INTPTR_FORMAT \" actual: \" INTPTR_FORMAT, p2i(f.fp()), p2i(fp));\n+  assert(f.raw_pc() == pc, \"f.ra_pc: \" INTPTR_FORMAT \" actual: \" INTPTR_FORMAT, p2i(f.raw_pc()), p2i(pc));\n+  assert(f.fp() == fp, \"f.fp: \" INTPTR_FORMAT \" actual: \" INTPTR_FORMAT, p2i(f.fp()), p2i(fp));\n@@ -53,1 +53,1 @@\n-  assert (f.is_interpreted_frame(), \"\");\n+  assert(f.is_interpreted_frame(), \"\");\n@@ -77,2 +77,2 @@\n-  assert (res == (intptr_t*)f.interpreter_frame_monitor_end() - expression_stack_sz, \"\");\n-  assert (res >= f.unextended_sp(),\n+  assert(res == (intptr_t*)f.interpreter_frame_monitor_end() - expression_stack_sz, \"\");\n+  assert(res >= f.unextended_sp(),\n@@ -83,1 +83,1 @@\n-  \/\/ assert (res == f.unextended_sp(), \"res: \" INTPTR_FORMAT \" unextended_sp: \" INTPTR_FORMAT, p2i(res), p2i(f.unextended_sp() + 1));\n+  \/\/ assert(res == f.unextended_sp(), \"res: \" INTPTR_FORMAT \" unextended_sp: \" INTPTR_FORMAT, p2i(res), p2i(f.unextended_sp() + 1));\n","filename":"src\/hotspot\/cpu\/x86\/frame_helpers_x86.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-  assert (!is_compiled_frame() || !_cb->as_compiled_method()->is_deopt_entry(_pc), \"must be\");\n+  assert(!is_compiled_frame() || !_cb->as_compiled_method()->is_deopt_entry(_pc), \"must be\");\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -236,2 +236,2 @@\n-  assert (!is_interpreted_frame(), \"interpreted\");\n-  assert (oop_map() != NULL, \"\");\n+  assert(!is_interpreted_frame(), \"interpreted\");\n+  assert(oop_map() != NULL, \"\");\n@@ -242,1 +242,1 @@\n-  assert (cb()->is_compiled(), \"\");\n+  assert(cb()->is_compiled(), \"\");\n@@ -247,1 +247,1 @@\n-  assert (mask != NULL, \"\");\n+  assert(mask != NULL, \"\");\n@@ -415,1 +415,1 @@\n-  assert (sender_sp == real_fp(), \"\");\n+  assert(sender_sp == real_fp(), \"\");\n@@ -435,3 +435,3 @@\n-      assert (!_cb->caller_must_gc_arguments(map->thread()), \"\");\n-      assert (!map->include_argument_oops(), \"\");\n-      assert (oop_map() == NULL || !oop_map()->has_any(OopMapValue::callee_saved_value), \"callee-saved value in compiled frame\");\n+      assert(!_cb->caller_must_gc_arguments(map->thread()), \"\");\n+      assert(!map->include_argument_oops(), \"\");\n+      assert(oop_map() == NULL || !oop_map()->has_any(OopMapValue::callee_saved_value), \"callee-saved value in compiled frame\");\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1972,1 +1972,1 @@\n-  assert (shift_value > 0, \"illegal shift value\");\n+  assert(shift_value > 0, \"illegal shift value\");\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -753,1 +753,1 @@\n-  assert (nop->check(), \"\");\n+  assert(nop->check(), \"\");\n","filename":"src\/hotspot\/cpu\/x86\/nativeInst_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7534,1 +7534,1 @@\n-    assert (return_barrier || !exception, \"must be\");\n+    assert(return_barrier || !exception, \"must be\");\n@@ -8286,3 +8286,3 @@\n-  assert (ContinuationEntry::size() % VMRegImpl::stack_slot_size == 0, \"\");\n-  assert (in_bytes(ContinuationEntry::cont_offset())  % VMRegImpl::stack_slot_size == 0, \"\");\n-  assert (in_bytes(ContinuationEntry::chunk_offset()) % VMRegImpl::stack_slot_size == 0, \"\");\n+  assert(ContinuationEntry::size() % VMRegImpl::stack_slot_size == 0, \"\");\n+  assert(in_bytes(ContinuationEntry::cont_offset())  % VMRegImpl::stack_slot_size == 0, \"\");\n+  assert(in_bytes(ContinuationEntry::chunk_offset()) % VMRegImpl::stack_slot_size == 0, \"\");\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -6332,1 +6332,1 @@\n-        assert (vlen == 8, \"sanity\");\n+        assert(vlen == 8, \"sanity\");\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -637,1 +637,1 @@\n-    assert (pc != NULL, \"\");\n+    assert(pc != NULL, \"\");\n@@ -647,1 +647,1 @@\n-        assert (deopt != NULL, \"\");\n+        assert(deopt != NULL, \"\");\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1156,1 +1156,1 @@\n-      assert (!method->is_synchronized() || nm->has_monitors(), \"\");\n+      assert(!method->is_synchronized() || nm->has_monitors(), \"\");\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2790,1 +2790,1 @@\n-        assert (cont == Continuation::get_continuation_entry_for_entry_frame(thread, fr), \"\");\n+        assert(cont == Continuation::get_continuation_entry_for_entry_frame(thread, fr), \"\");\n@@ -2818,1 +2818,1 @@\n-        assert (nm->method() != NULL, \"must be\");\n+        assert(nm->method() != NULL, \"must be\");\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-  assert (cb != NULL, \"must be\");\n+  assert(cb != NULL, \"must be\");\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    \/\/ assert (cb == CodeCache::find_blob(pc), \"\");\n+    \/\/ assert(cb == CodeCache::find_blob(pc), \"\");\n@@ -53,1 +53,1 @@\n-  assert (cb != NULL, \"must be\");\n+  assert(cb != NULL, \"must be\");\n","filename":"src\/hotspot\/share\/code\/codeCache.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  \/\/ assert (can_be_deoptimized(), \"\"); \/\/ in some places we check before marking, in others not.\n+  \/\/ assert(can_be_deoptimized(), \"\"); \/\/ in some places we check before marking, in others not.\n@@ -375,1 +375,1 @@\n-    \/\/ assert (method()->is_native(), \"\");\n+    \/\/ assert(method()->is_native(), \"\");\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1102,2 +1102,2 @@\n-  assert (method() == NULL || can_be_deoptimized(), \"\");\n-  assert (!is_zombie(), \"\");\n+  assert(method() == NULL || can_be_deoptimized(), \"\");\n+  assert(!is_zombie(), \"\");\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -982,1 +982,1 @@\n-    \/\/ assert (offset >= 0 && offset <= (intptr_t)(base->size() << LogHeapWordSize), \"offset: %ld base->size: %zu relative: %d\", offset, base->size() << LogHeapWordSize, *(intptr_t*)derived_loc <= 0);\n+    \/\/ assert(offset >= 0 && offset <= (intptr_t)(base->size() << LogHeapWordSize), \"offset: %ld base->size: %zu relative: %d\", offset, base->size() << LogHeapWordSize, *(intptr_t*)derived_loc <= 0);\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  assert (fr != NULL, \"\");\n+  assert(fr != NULL, \"\");\n","filename":"src\/hotspot\/share\/compiler\/oopMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-  assert (obj != NULL, \"\");\n+  assert(obj != NULL, \"\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-   assert (layout_helper_is_instance(layout_helper()), \"\");\n-   assert (layout_helper_needs_slow_path(layout_helper()), \"\");\n+   assert(layout_helper_is_instance(layout_helper()), \"\");\n+   assert(layout_helper_needs_slow_path(layout_helper()), \"\");\n@@ -89,1 +89,1 @@\n-  assert (obj->is_stackChunk(), \"\");\n+  assert(obj->is_stackChunk(), \"\");\n@@ -97,1 +97,1 @@\n-  assert (!to_chunk->has_bitmap() || to_chunk->is_gc_mode(), \"\");\n+  assert(!to_chunk->has_bitmap() || to_chunk->is_gc_mode(), \"\");\n@@ -133,1 +133,1 @@\n-      assert (*derived_loc == derived_pointer(0), \"\");\n+      assert(*derived_loc == derived_pointer(0), \"\");\n@@ -136,1 +136,1 @@\n-    assert (!CompressedOops::is_base(base), \"\");\n+    assert(!CompressedOops::is_base(base), \"\");\n@@ -178,2 +178,2 @@\n-      assert (!CompressedOops::is_base(base), \"\");\n-      ZGC_ONLY(assert (ZAddress::is_good(cast_from_oop<uintptr_t>(base)), \"\");)\n+      assert(!CompressedOops::is_base(base), \"\");\n+      ZGC_ONLY(assert(ZAddress::is_good(cast_from_oop<uintptr_t>(base)), \"\");)\n@@ -261,1 +261,1 @@\n-    assert (_closure != nullptr, \"\");\n+    assert(_closure != nullptr, \"\");\n@@ -284,1 +284,1 @@\n-  assert (chunk->is_stackChunk(), \"\");\n+  assert(chunk->is_stackChunk(), \"\");\n@@ -289,2 +289,2 @@\n-  assert (frame_closure._num_frames >= 0, \"\");\n-  assert (frame_closure._num_oops >= 0, \"\");\n+  assert(frame_closure._num_frames >= 0, \"\");\n+  assert(frame_closure._num_oops >= 0, \"\");\n@@ -352,1 +352,1 @@\n-  assert (!f.is_compiled() || f.oopmap()->has_derived_oops() == f.oopmap()->has_any(OopMapValue::derived_oop_value), \"\");\n+  assert(!f.is_compiled() || f.oopmap()->has_derived_oops() == f.oopmap()->has_any(OopMapValue::derived_oop_value), \"\");\n@@ -446,1 +446,1 @@\n-    assert (UseCompressedOops, \"\");\n+    assert(UseCompressedOops, \"\");\n@@ -448,1 +448,1 @@\n-    assert (obj == nullptr || is_good_oop(obj), \"p: \" INTPTR_FORMAT \" obj: \" INTPTR_FORMAT, p2i(p), p2i((oopDesc*)obj));\n+    assert(obj == nullptr || is_good_oop(obj), \"p: \" INTPTR_FORMAT \" obj: \" INTPTR_FORMAT, p2i(p), p2i((oopDesc*)obj));\n@@ -468,1 +468,1 @@\n-    assert (p >= (oop*)_stack_start, \"\");\n+    assert(p >= (oop*)_stack_start, \"\");\n@@ -478,1 +478,1 @@\n-      assert (!_bm.at(index), \"\");\n+      assert(!_bm.at(index), \"\");\n@@ -484,1 +484,1 @@\n-    assert (p >= (narrowOop*)_stack_start, \"\");\n+    assert(p >= (narrowOop*)_stack_start, \"\");\n@@ -486,1 +486,1 @@\n-    assert (!_bm.at(index), \"\");\n+    assert(!_bm.at(index), \"\");\n@@ -516,1 +516,1 @@\n-  assert (!chunk->has_bitmap(), \"\");\n+  assert(!chunk->has_bitmap(), \"\");\n@@ -573,1 +573,1 @@\n-      assert (obj == nullptr || is_good_oop(obj),\n+      assert(obj == nullptr || is_good_oop(obj),\n@@ -599,1 +599,1 @@\n-    assert (obj == nullptr || is_good_oop(obj), \"p: \" INTPTR_FORMAT \" obj: \" INTPTR_FORMAT, p2i(p), p2i((oopDesc*)obj));\n+    assert(obj == nullptr || is_good_oop(obj), \"p: \" INTPTR_FORMAT \" obj: \" INTPTR_FORMAT, p2i(p), p2i((oopDesc*)obj));\n@@ -602,1 +602,1 @@\n-      assert (_chunk->bitmap().at(index), \"Bit not set at index \" SIZE_FORMAT \" corresponding to \" INTPTR_FORMAT, index, p2i(p));\n+      assert(_chunk->bitmap().at(index), \"Bit not set at index \" SIZE_FORMAT \" corresponding to \" INTPTR_FORMAT, index, p2i(p));\n@@ -627,3 +627,3 @@\n-      assert (!CompressedOops::is_base(base), \"\");\n-      assert (oopDesc::is_oop(base), \"\");\n-      ZGC_ONLY(assert (!UseZGC || ZAddress::is_good(cast_from_oop<uintptr_t>(base)), \"\");)\n+      assert(!CompressedOops::is_base(base), \"\");\n+      assert(oopDesc::is_oop(base), \"\");\n+      ZGC_ONLY(assert(!UseZGC || ZAddress::is_good(cast_from_oop<uintptr_t>(base)), \"\");)\n@@ -636,1 +636,1 @@\n-      assert (*derived_loc == derived_pointer(0), \"\");\n+      assert(*derived_loc == derived_pointer(0), \"\");\n@@ -666,1 +666,1 @@\n-    assert (num_oops >= 0, \"\");\n+    assert(num_oops >= 0, \"\");\n@@ -681,1 +681,1 @@\n-    assert (f.pc() != nullptr,\n+    assert(f.pc() != nullptr,\n@@ -686,1 +686,1 @@\n-      assert (f.pc() == _chunk->pc(), \"\");\n+      assert(f.pc() == _chunk->pc(), \"\");\n@@ -696,1 +696,1 @@\n-    assert (oops_closure.count() == num_oops, \"oops: %d oopmap->num_oops(): %d\", oops_closure.count(), num_oops);\n+    assert(oops_closure.count() == num_oops, \"oops: %d oopmap->num_oops(): %d\", oops_closure.count(), num_oops);\n@@ -712,2 +712,2 @@\n-  assert (oopDesc::is_oop(obj), \"\");\n-  assert (obj->is_stackChunk(), \"\");\n+  assert(oopDesc::is_oop(obj), \"\");\n+  assert(obj->is_stackChunk(), \"\");\n@@ -717,4 +717,4 @@\n-  assert (chunk->is_stackChunk(), \"\");\n-  assert (chunk->stack_size() >= 0, \"\");\n-  assert (chunk->argsize() >= 0, \"\");\n-  assert (!chunk->has_bitmap() || chunk->is_gc_mode(), \"\");\n+  assert(chunk->is_stackChunk(), \"\");\n+  assert(chunk->stack_size() >= 0, \"\");\n+  assert(chunk->argsize() >= 0, \"\");\n+  assert(!chunk->has_bitmap() || chunk->is_gc_mode(), \"\");\n@@ -723,2 +723,2 @@\n-    assert (chunk->argsize() == 0, \"\");\n-    assert (chunk->max_size() == 0, \"\");\n+    assert(chunk->argsize() == 0, \"\");\n+    assert(chunk->max_size() == 0, \"\");\n@@ -728,1 +728,1 @@\n-    assert (oopDesc::is_oop_or_null(chunk->parent()), \"\");\n+    assert(oopDesc::is_oop_or_null(chunk->parent()), \"\");\n@@ -746,2 +746,2 @@\n-  assert (size >= 0, \"\");\n-  assert ((size == 0) == chunk->is_empty(), \"\");\n+  assert(size >= 0, \"\");\n+  assert((size == 0) == chunk->is_empty(), \"\");\n@@ -757,1 +757,1 @@\n-  assert (!chunk->is_empty() || closure._cb == nullptr, \"\");\n+  assert(!chunk->is_empty() || closure._cb == nullptr, \"\");\n@@ -759,1 +759,1 @@\n-    assert (chunk->argsize() ==\n+    assert(chunk->argsize() ==\n@@ -765,1 +765,1 @@\n-  assert (closure._num_interpreted_frames == 0 || chunk->has_mixed_frames(), \"\");\n+  assert(closure._num_interpreted_frames == 0 || chunk->has_mixed_frames(), \"\");\n@@ -768,1 +768,1 @@\n-    assert (closure._size <= size + chunk->argsize() + metadata_words(),\n+    assert(closure._size <= size + chunk->argsize() + metadata_words(),\n@@ -771,1 +771,1 @@\n-    assert (chunk->argsize() == closure._argsize,\n+    assert(chunk->argsize() == closure._argsize,\n@@ -776,1 +776,1 @@\n-    assert (chunk->max_size() == max_size,\n+    assert(chunk->max_size() == max_size,\n@@ -785,1 +785,1 @@\n-    assert (out_size == nullptr && out_oops == nullptr && out_frames == nullptr && out_interpreted_frames == nullptr, \"\");\n+    assert(out_size == nullptr && out_oops == nullptr && out_frames == nullptr && out_interpreted_frames == nullptr, \"\");\n@@ -789,1 +789,1 @@\n-    assert (chunk->bitmap().size() == chunk->bit_offset() + (size_t)(chunk->stack_size() << (UseCompressedOops ? 1 : 0)),\n+    assert(chunk->bitmap().size() == chunk->bit_offset() + (size_t)(chunk->stack_size() << (UseCompressedOops ? 1 : 0)),\n@@ -806,1 +806,1 @@\n-    assert (oop_count == closure._num_oops,\n+    assert(oop_count == closure._num_oops,\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":51,"deletions":51,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -302,1 +302,1 @@\n-  inline int to_offset(stackChunkOop chunk) const { assert (!is_done(), \"\"); return _sp - chunk->start_address(); }\n+  inline int to_offset(stackChunkOop chunk) const { assert(!is_done(), \"\"); return _sp - chunk->start_address(); }\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  assert (!is_empty(), \"\");\n+  assert(!is_empty(), \"\");\n@@ -52,1 +52,1 @@\n-  assert (to_offset(f.sp()) == sp(), \"f.offset_sp(): %d sp(): %d async: %d\", f.offset_sp(), sp(), map->is_async());\n+  assert(to_offset(f.sp()) == sp(), \"f.offset_sp(): %d sp(): %d async: %d\", f.offset_sp(), sp(), map->is_async());\n@@ -59,6 +59,6 @@\n-  assert (map->in_cont(), \"\");\n-  assert (!map->include_argument_oops(), \"\");\n-  assert (!f.is_empty(), \"\");\n-  assert (map->stack_chunk() == this, \"\");\n-  assert (this != nullptr, \"\");\n-  assert (!is_empty(), \"\");\n+  assert(map->in_cont(), \"\");\n+  assert(!map->include_argument_oops(), \"\");\n+  assert(!f.is_empty(), \"\");\n+  assert(map->stack_chunk() == this, \"\");\n+  assert(this != nullptr, \"\");\n+  assert(!is_empty(), \"\");\n@@ -72,1 +72,1 @@\n-    assert (is_usable_in_chunk(sender.unextended_sp()), \"\");\n+    assert(is_usable_in_chunk(sender.unextended_sp()), \"\");\n@@ -80,1 +80,1 @@\n-    assert (!parent()->is_empty(), \"\");\n+    assert(!parent()->is_empty(), \"\");\n@@ -92,1 +92,1 @@\n-\/\/   assert (map->is_async(), \"\");\n+\/\/   assert(map->is_async(), \"\");\n@@ -101,1 +101,1 @@\n-\/\/   assert (false, \"\");\n+\/\/   assert(false, \"\");\n@@ -115,2 +115,2 @@\n-  assert (f.is_interpreted()\n-          || (f.cb() != nullptr && f.cb()->is_compiled() && f.cb()->as_compiled_method()->is_java_method()), \"\");\n+  assert(f.is_interpreted()\n+         || (f.cb() != nullptr && f.cb()->is_compiled() && f.cb()->as_compiled_method()->is_java_method()), \"\");\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  assert (is_stackChunk(), \"\");\n+  assert(is_stackChunk(), \"\");\n@@ -88,1 +88,1 @@\n-  assert (is_stackChunk(), \"\");\n+  assert(is_stackChunk(), \"\");\n@@ -95,1 +95,1 @@\n-  assert (is_stackChunk(), \"\");\n+  assert(is_stackChunk(), \"\");\n@@ -129,1 +129,1 @@\n-inline void stackChunkOopDesc::set_has_bitmap(bool value)          { set_flag(FLAG_HAS_BITMAP, value); assert (!value || UseChunkBitmaps, \"\"); }\n+inline void stackChunkOopDesc::set_has_bitmap(bool value)          { set_flag(FLAG_HAS_BITMAP, value); assert(!value || UseChunkBitmaps, \"\"); }\n@@ -141,1 +141,1 @@\n-  assert (start_address() <= p && p <= base, \"\");\n+  assert(start_address() <= p && p <= base, \"\");\n@@ -149,2 +149,2 @@\n-  assert (start_address() <= p && p <= base, \"\");\n-  assert (0 <= offset && offset <= std::numeric_limits<int>::max(), \"\");\n+  assert(start_address() <= p && p <= base, \"\");\n+  assert(0 <= offset && offset <= std::numeric_limits<int>::max(), \"\");\n@@ -170,2 +170,2 @@\n-  assert (fr.is_compiled_frame() || fr.cb()->is_safepoint_stub(), \"\");\n-  assert (is_in_chunk(fr.unextended_sp()), \"\");\n+  assert(fr.is_compiled_frame() || fr.cb()->is_safepoint_stub(), \"\");\n+  assert(is_in_chunk(fr.unextended_sp()), \"\");\n@@ -175,1 +175,1 @@\n-  assert (base > loc, \"\");\n+  assert(base > loc, \"\");\n@@ -180,2 +180,2 @@\n-  assert (fr.is_compiled_frame(), \"\");\n-  assert (map != nullptr && map->stack_chunk() == as_oop(), \"\");\n+  assert(fr.is_compiled_frame(), \"\");\n+  assert(map != nullptr && map->stack_chunk() == as_oop(), \"\");\n@@ -190,1 +190,1 @@\n-  assert (fr.is_compiled_frame(), \"\");\n+  assert(fr.is_compiled_frame(), \"\");\n@@ -222,2 +222,2 @@\n-  assert (to >= start_address(), \"\");\n-  assert (to + size <= end_address(), \"\");\n+  assert(to >= start_address(), \"\");\n+  assert(to + size <= end_address(), \"\");\n@@ -236,2 +236,2 @@\n-  assert (from >= start_address(), \"\");\n-  assert (from + size <= end_address(), \"\");\n+  assert(from >= start_address(), \"\");\n+  assert(from + size <= end_address(), \"\");\n@@ -243,1 +243,1 @@\n-  assert (has_bitmap(), \"\");\n+  assert(has_bitmap(), \"\");\n@@ -247,2 +247,2 @@\n-  assert (bm.size() == size_in_bits, \"bm.size(): %zu size_in_bits: %zu\", bm.size(), size_in_bits);\n-  assert (bm.size_in_words() == (size_t)InstanceStackChunkKlass::bitmap_size(stack_size()), \"\");\n+  assert(bm.size() == size_in_bits, \"bm.size(): %zu size_in_bits: %zu\", bm.size(), size_in_bits);\n+  assert(bm.size_in_words() == (size_t)InstanceStackChunkKlass::bitmap_size(stack_size()), \"\");\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-  assert (num_oops == omap->num_oops(), \"num_oops: %d omap->num_oops(): %d\", num_oops, omap->num_oops());\n+  assert(num_oops == omap->num_oops(), \"num_oops: %d omap->num_oops(): %d\", num_oops, omap->num_oops());\n","filename":"src\/hotspot\/share\/opto\/buildOopMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6202,1 +6202,1 @@\n-  assert (field != NULL, \"undefined field %s %s %s\", fieldTypeString, fromKls->name()->as_utf8(), fieldName);\n+  assert(field != NULL, \"undefined field %s %s %s\", fieldTypeString, fromKls->name()->as_utf8(), fieldName);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3099,1 +3099,1 @@\n-  assert (theThread != (oop)NULL, \"no current thread!\");\n+  assert(theThread != (oop)NULL, \"no current thread!\");\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -625,1 +625,1 @@\n-  assert (Continuation::continuation_scope(cont) == java_lang_VirtualThread::vthread_scope(), \"must be\");\n+  assert(Continuation::continuation_scope(cont) == java_lang_VirtualThread::vthread_scope(), \"must be\");\n@@ -635,1 +635,1 @@\n-  assert (jvf != NULL && jvf->method() != NULL, \"\");\n+  assert(jvf != NULL && jvf->method() != NULL, \"\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1673,1 +1673,1 @@\n-  assert (thread == JavaThread::current(), \"must be\");\n+  assert(thread == JavaThread::current(), \"must be\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    assert (thread != NULL, \"\");\n+    assert(thread != NULL, \"\");\n@@ -92,1 +92,1 @@\n-\/\/   assert (cont_or_scope()->is_a(SystemDictionary::Continuation_klass()), \"must be\");\n+\/\/   assert(cont_or_scope()->is_a(SystemDictionary::Continuation_klass()), \"must be\");\n@@ -124,1 +124,1 @@\n-  assert (_cont_scope.is_null() || cont() != (oop)NULL, \"must be\");\n+  assert(_cont_scope.is_null() || cont() != (oop)NULL, \"must be\");\n@@ -135,1 +135,1 @@\n-  assert (!Continuation::is_scope_bottom(_cont_scope(), _jvf->fr(), _jvf->register_map()), \"\");\n+  assert(!Continuation::is_scope_bottom(_cont_scope(), _jvf->fr(), _jvf->register_map()), \"\");\n@@ -189,1 +189,1 @@\n-    assert (stream.continuation() == NULL || stream.continuation() == stream.reg_map()->cont(), \"\");\n+    assert(stream.continuation() == NULL || stream.continuation() == stream.reg_map()->cont(), \"\");\n@@ -443,1 +443,1 @@\n-    assert (use_frames_array(mode), \"Bad mode for get live frame\");\n+    assert(use_frames_array(mode), \"Bad mode for get live frame\");\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -278,2 +278,2 @@\n-  assert (thread != nullptr, \"\");\n-  assert (thread->threadObj() != nullptr, \"\");\n+  assert(thread != nullptr, \"\");\n+  assert(thread->threadObj() != nullptr, \"\");\n@@ -299,1 +299,1 @@\n-  assert (pc != nullptr, \"\");\n+  assert(pc != nullptr, \"\");\n@@ -306,1 +306,1 @@\n-  assert (thread->has_last_Java_frame(), \"\");\n+  assert(thread->has_last_Java_frame(), \"\");\n@@ -316,1 +316,1 @@\n-  assert (thread->has_last_Java_frame(), \"\");\n+  assert(thread->has_last_Java_frame(), \"\");\n@@ -384,1 +384,1 @@\n-  int argsize()       const { assert (_entry->argsize() >= 0, \"\"); return _entry->argsize(); }\n+  int argsize()       const { assert(_entry->argsize() >= 0, \"\"); return _entry->argsize(); }\n@@ -413,2 +413,2 @@\n-  assert (_cont == _entry->cont_oop(), \"mirror: \" INTPTR_FORMAT \" entry: \" INTPTR_FORMAT \" entry_sp: \"\n-          INTPTR_FORMAT, p2i((oopDesc*)_cont), p2i((oopDesc*)_entry->cont_oop()), p2i(entrySP()));\n+  assert(_cont == _entry->cont_oop(), \"mirror: \" INTPTR_FORMAT \" entry: \" INTPTR_FORMAT \" entry_sp: \"\n+         INTPTR_FORMAT, p2i((oopDesc*)_cont), p2i((oopDesc*)_entry->cont_oop()), p2i(entrySP()));\n@@ -437,1 +437,1 @@\n-  assert (_entry == nullptr || _cont == _entry->cont_oop(),\n+  assert(_entry == nullptr || _cont == _entry->cont_oop(),\n@@ -474,1 +474,1 @@\n-      assert (chunk->is_usable_in_chunk(p), \"\");\n+      assert(chunk->is_usable_in_chunk(p), \"\");\n@@ -504,1 +504,1 @@\n-  assert (_tail->is_stackChunk(), \"\");\n+  assert(_tail->is_stackChunk(), \"\");\n@@ -508,1 +508,1 @@\n-      assert (chunk != _tail, \"\");\n+      assert(chunk != _tail, \"\");\n@@ -535,1 +535,1 @@\n-  assert (sp == current->frame_anchor()->last_Java_sp(), \"\");\n+  assert(sp == current->frame_anchor()->last_Java_sp(), \"\");\n@@ -568,4 +568,4 @@\n-  assert (target->has_last_Java_frame(), \"\");\n-  assert (!Interpreter::contains(target->last_Java_pc()) || !target->cont_fastpath(),\n-          \"fast_path at codelet %s\",\n-          Interpreter::codelet_containing(target->last_Java_pc())->description());\n+  assert(target->has_last_Java_frame(), \"\");\n+  assert(!Interpreter::contains(target->last_Java_pc()) || !target->cont_fastpath(),\n+         \"fast_path at codelet %s\",\n+         Interpreter::codelet_containing(target->last_Java_pc())->description());\n@@ -584,1 +584,1 @@\n-  assert (target->has_last_Java_frame(), \"\");\n+  assert(target->has_last_Java_frame(), \"\");\n@@ -614,2 +614,2 @@\n-  assert (thread == JavaThread::current(), \"\");\n-  assert (thread->is_cont_force_yield(), \"\");\n+  assert(thread == JavaThread::current(), \"\");\n+  assert(thread->is_cont_force_yield(), \"\");\n@@ -675,1 +675,1 @@\n-  assert (is_continuation_enterSpecial(f), \"\");\n+  assert(is_continuation_enterSpecial(f), \"\");\n@@ -684,1 +684,1 @@\n-  assert (thread->is_in_full_stack((address)cont), \"\");\n+  assert(thread->is_in_full_stack((address)cont), \"\");\n@@ -703,1 +703,1 @@\n-  assert (f.is_interpreted_frame() || f.cb() != nullptr, \"\");\n+  assert(f.is_interpreted_frame() || f.cb() != nullptr, \"\");\n@@ -736,1 +736,1 @@\n-  assert (thread != nullptr, \"\");\n+  assert(thread != nullptr, \"\");\n@@ -764,1 +764,1 @@\n-  assert (map != nullptr, \"\");\n+  assert(map != nullptr, \"\");\n@@ -780,1 +780,1 @@\n-  assert (map->in_cont(), \"\");\n+  assert(map->in_cont(), \"\");\n@@ -782,1 +782,1 @@\n-  assert (map->thread() != nullptr || !cont.is_mounted(), \"\");\n+  assert(map->thread() != nullptr || !cont.is_mounted(), \"\");\n@@ -849,2 +849,2 @@\n-  assert (cont != nullptr, \"\");\n-  assert (cont == ContinuationHelper::get_continuation(current), \"\");\n+  assert(cont != nullptr, \"\");\n+  assert(cont == ContinuationHelper::get_continuation(current), \"\");\n@@ -867,2 +867,2 @@\n-  assert (cont != nullptr, \"\");\n-  assert (cont == ContinuationHelper::get_continuation(current), \"\");\n+  assert(cont != nullptr, \"\");\n+  assert(cont == ContinuationHelper::get_continuation(current), \"\");\n@@ -883,1 +883,1 @@\n-    assert (cont != nullptr, \"callee.unextended_sp(): \" INTPTR_FORMAT, p2i(callee.unextended_sp()));\n+    assert(cont != nullptr, \"callee.unextended_sp(): \" INTPTR_FORMAT, p2i(callee.unextended_sp()));\n@@ -908,1 +908,1 @@\n-  assert (thread != nullptr, \"\");\n+  assert(thread != nullptr, \"\");\n@@ -932,1 +932,1 @@\n-  assert (is_sp_in_continuation(cont, sp), \"\");\n+  assert(is_sp_in_continuation(cont, sp), \"\");\n@@ -966,2 +966,2 @@\n-  assert (contOop != (oop)nullptr, \"\");\n-  assert (oopDesc::is_oop(contOop), \"\");\n+  assert(contOop != (oop)nullptr, \"\");\n+  assert(oopDesc::is_oop(contOop), \"\");\n@@ -970,2 +970,2 @@\n-  assert (oopDesc::is_oop_or_null(cont.tail()), \"\");\n-  assert (cont.chunk_invariant(tty), \"\");\n+  assert(oopDesc::is_oop_or_null(cont.tail()), \"\");\n+  assert(cont.chunk_invariant(tty), \"\");\n@@ -990,2 +990,2 @@\n-  assert (!nonempty_chunk || !is_empty, \"\");\n-  assert (is_empty == (!nonempty_chunk && cont.last_frame().is_empty()), \"\");\n+  assert(!nonempty_chunk || !is_empty, \"\");\n+  assert(is_empty == (!nonempty_chunk && cont.last_frame().is_empty()), \"\");\n@@ -1046,1 +1046,1 @@\n-    assert (thread->last_continuation()->entry_sp() == _cont.entrySP(), \"\");\n+    assert(thread->last_continuation()->entry_sp() == _cont.entrySP(), \"\");\n@@ -1052,1 +1052,1 @@\n-    assert (!Interpreter::contains(_cont.entryPC()), \"\");\n+    assert(!Interpreter::contains(_cont.entryPC()), \"\");\n@@ -1063,1 +1063,1 @@\n-    assert (_bottom_address != nullptr && _bottom_address <= _cont.entrySP(), \"\");\n+    assert(_bottom_address != nullptr && _bottom_address <= _cont.entrySP(), \"\");\n@@ -1081,1 +1081,1 @@\n-      assert (_last_write == to + size, \"Missed a spot: _last_write: \" INTPTR_FORMAT \" to+size: \" INTPTR_FORMAT\n+      assert(_last_write == to + size, \"Missed a spot: _last_write: \" INTPTR_FORMAT \" to+size: \" INTPTR_FORMAT\n@@ -1112,1 +1112,1 @@\n-    assert (!_thread->cont_fastpath() || _barriers, \"\");\n+    assert(!_thread->cont_fastpath() || _barriers, \"\");\n@@ -1130,2 +1130,2 @@\n-    \/\/ assert (CodeCache::find_blob(*(address*)(top_sp - SENDER_SP_RET_ADDRESS_OFFSET)) == StubRoutines::cont_doYield_stub(), \"\"); -- fails on Windows\n-    assert (StubRoutines::cont_doYield_stub()->frame_size() == ContinuationHelper::frame_metadata, \"\");\n+    \/\/ assert(CodeCache::find_blob(*(address*)(top_sp - SENDER_SP_RET_ADDRESS_OFFSET)) == StubRoutines::cont_doYield_stub(), \"\"); -- fails on Windows\n+    assert(StubRoutines::cont_doYield_stub()->frame_size() == ContinuationHelper::frame_metadata, \"\");\n@@ -1142,1 +1142,1 @@\n-    assert (size > 0, \"\");\n+    assert(size > 0, \"\");\n@@ -1153,4 +1153,4 @@\n-    assert (_thread != nullptr, \"\");\n-    assert (_cont.chunk_invariant(tty), \"\");\n-    assert (!Interpreter::contains(_cont.entryPC()), \"\");\n-    assert (StubRoutines::cont_doYield_stub()->frame_size() == ContinuationHelper::frame_metadata, \"\");\n+    assert(_thread != nullptr, \"\");\n+    assert(_cont.chunk_invariant(tty), \"\");\n+    assert(!Interpreter::contains(_cont.entryPC()), \"\");\n+    assert(StubRoutines::cont_doYield_stub()->frame_size() == ContinuationHelper::frame_metadata, \"\");\n@@ -1167,1 +1167,1 @@\n-    assert (size > 0, \"\");\n+    assert(size > 0, \"\");\n@@ -1182,1 +1182,1 @@\n-      assert (is_chunk_available0, \"\");\n+      assert(is_chunk_available0, \"\");\n@@ -1188,2 +1188,2 @@\n-        assert (sp_before < (chunk->stack_size() - chunk->argsize()), \"\");\n-        assert (*(address*)(chunk->sp_address() - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n+        assert(sp_before < (chunk->stack_size() - chunk->argsize()), \"\");\n+        assert(*(address*)(chunk->sp_address() - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n@@ -1192,1 +1192,1 @@\n-        assert (sp_before <= chunk->stack_size(), \"\");\n+        assert(sp_before <= chunk->stack_size(), \"\");\n@@ -1197,2 +1197,2 @@\n-        assert (bottom_sp == _bottom_address, \"\");\n-        assert (*(address*)(bottom_sp-frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(), \"\");\n+        assert(bottom_sp == _bottom_address, \"\");\n+        assert(*(address*)(bottom_sp-frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(), \"\");\n@@ -1211,3 +1211,3 @@\n-      assert (_thread->thread_state() == _thread_in_vm, \"\");\n-      assert (!is_chunk_available(top_sp), \"\");\n-      assert (_thread->cont_fastpath(), \"\");\n+      assert(_thread->thread_state() == _thread_in_vm, \"\");\n+      assert(!is_chunk_available(top_sp), \"\");\n+      assert(_thread->cont_fastpath(), \"\");\n@@ -1230,1 +1230,1 @@\n-      assert (sp_before == chunk->stack_size(), \"\");\n+      assert(sp_before == chunk->stack_size(), \"\");\n@@ -1235,7 +1235,7 @@\n-    assert (chunk != nullptr, \"\");\n-    assert (chunk->is_stackChunk(), \"\");\n-    assert (!chunk->has_mixed_frames(), \"\");\n-    assert (!chunk->is_gc_mode(), \"\");\n-    assert (!chunk->has_bitmap(), \"\");\n-    assert (!chunk->requires_barriers(), \"\");\n-    assert (chunk == _cont.tail(), \"\");\n+    assert(chunk != nullptr, \"\");\n+    assert(chunk->is_stackChunk(), \"\");\n+    assert(!chunk->has_mixed_frames(), \"\");\n+    assert(!chunk->is_gc_mode(), \"\");\n+    assert(!chunk->has_bitmap(), \"\");\n+    assert(!chunk->requires_barriers(), \"\");\n+    assert(chunk == _cont.tail(), \"\");\n@@ -1253,2 +1253,2 @@\n-    assert (sp_before <= chunk->stack_size(), \"\");\n-    assert (sp_before >= size, \"\");\n+    assert(sp_before <= chunk->stack_size(), \"\");\n+    assert(sp_before >= size, \"\");\n@@ -1257,1 +1257,1 @@\n-    assert (!is_chunk_available0 || orig_chunk_sp - (chunk->start_address() + sp_after) == is_chunk_available_size, \"\");\n+    assert(!is_chunk_available0 || orig_chunk_sp - (chunk->start_address() + sp_after) == is_chunk_available_size, \"\");\n@@ -1260,1 +1260,1 @@\n-    assert (empty || *(address*)(orig_chunk_sp - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n+    assert(empty || *(address*)(orig_chunk_sp - frame::sender_sp_ret_address_offset()) == chunk->pc(), \"\");\n@@ -1271,1 +1271,1 @@\n-    assert (empty || *(address*)(chunk_bottom_sp-frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(), \"\");\n+    assert(empty || *(address*)(chunk_bottom_sp-frame::sender_sp_ret_address_offset()) == StubRoutines::cont_returnBarrier(), \"\");\n@@ -1277,1 +1277,1 @@\n-    assert (chunk->sp_address() == chunk_top, \"\");\n+    assert(chunk->sp_address() == chunk_top, \"\");\n@@ -1289,2 +1289,2 @@\n-    assert (_cont.chunk_invariant(tty), \"\");\n-    assert (VERIFY_STACK_CHUNK(chunk), \"\");\n+    assert(_cont.chunk_invariant(tty), \"\");\n+    assert(VERIFY_STACK_CHUNK(chunk), \"\");\n@@ -1311,1 +1311,1 @@\n-    assert (_thread->thread_state() == _thread_in_vm || _thread->thread_state() == _thread_blocked, \"\");\n+    assert(_thread->thread_state() == _thread_in_vm || _thread->thread_state() == _thread_blocked, \"\");\n@@ -1340,1 +1340,1 @@\n-      assert (StubRoutines::cont_doYield_stub()->contains(f.pc()), \"\");\n+      assert(StubRoutines::cont_doYield_stub()->contains(f.pc()), \"\");\n@@ -1361,2 +1361,2 @@\n-      assert (Frame::is_stub(f.cb()), \"must be\");\n-      assert (f.oop_map() != nullptr, \"must be\");\n+      assert(Frame::is_stub(f.cb()), \"must be\");\n+      assert(f.oop_map() != nullptr, \"must be\");\n@@ -1372,2 +1372,2 @@\n-    assert (f.unextended_sp() < _bottom_address, \"\"); \/\/ see recurse_freeze_java_frame\n-    assert (f.is_interpreted_frame() || ((top && _preempt) == Frame::is_stub(f.cb())), \"\");\n+    assert(f.unextended_sp() < _bottom_address, \"\"); \/\/ see recurse_freeze_java_frame\n+    assert(f.is_interpreted_frame() || ((top && _preempt) == Frame::is_stub(f.cb())), \"\");\n@@ -1390,1 +1390,1 @@\n-      assert ((_preempt && top) || !f.interpreter_frame_method()->is_native(), \"\");\n+      assert((_preempt && top) || !f.interpreter_frame_method()->is_native(), \"\");\n@@ -1409,1 +1409,1 @@\n-    assert (FKind::is_instance(f), \"\");\n+    assert(FKind::is_instance(f), \"\");\n@@ -1411,1 +1411,1 @@\n-    assert (fsize > 0 && argsize >= 0, \"\");\n+    assert(fsize > 0 && argsize >= 0, \"\");\n@@ -1419,1 +1419,1 @@\n-      assert (FKind::interpreted || senderf.sp() == senderf.unextended_sp(), \"\");\n+      assert(FKind::interpreted || senderf.sp() == senderf.unextended_sp(), \"\");\n@@ -1433,1 +1433,1 @@\n-    assert (caller.is_interpreted_frame() == Interpreter::contains(caller.pc()), \"\");\n+    assert(caller.is_interpreted_frame() == Interpreter::contains(caller.pc()), \"\");\n@@ -1452,1 +1452,1 @@\n-    assert (FKind::interpreted || argsize == _cont.argsize(), \"argsize: %d cont.argsize: %d\", argsize, _cont.argsize());\n+    assert(FKind::interpreted || argsize == _cont.argsize(), \"argsize: %d cont.argsize: %d\", argsize, _cont.argsize());\n@@ -1465,1 +1465,1 @@\n-    assert (chunk == nullptr || (chunk->max_size() == 0) == chunk->is_empty(), \"\");\n+    assert(chunk == nullptr || (chunk->max_size() == 0) == chunk->is_empty(), \"\");\n@@ -1489,1 +1489,1 @@\n-    assert (_size >= 0, \"\");\n+    assert(_size >= 0, \"\");\n@@ -1491,3 +1491,3 @@\n-    assert (chunk == nullptr || chunk->is_empty()\n-            || unextended_sp == chunk->to_offset(StackChunkFrameStream<chunk_frames::MIXED>(chunk).unextended_sp()), \"\");\n-    assert (chunk != nullptr || unextended_sp < _size, \"\");\n+    assert(chunk == nullptr || chunk->is_empty()\n+           || unextended_sp == chunk->to_offset(StackChunkFrameStream<chunk_frames::MIXED>(chunk).unextended_sp()), \"\");\n+    assert(chunk != nullptr || unextended_sp < _size, \"\");\n@@ -1496,1 +1496,1 @@\n-    assert (!_barriers || (unextended_sp >= _size && chunk->is_empty()),\n+    assert(!_barriers || (unextended_sp >= _size && chunk->is_empty()),\n@@ -1524,1 +1524,1 @@\n-      assert (chunk->is_empty(), \"\");\n+      assert(chunk->is_empty(), \"\");\n@@ -1536,1 +1536,1 @@\n-        assert (chunk->max_size() == 0, \"\");\n+        assert(chunk->max_size() == 0, \"\");\n@@ -1541,2 +1541,2 @@\n-    assert (chunk->requires_barriers() == _barriers, \"\");\n-    assert (!_barriers || chunk->is_empty(), \"\");\n+    assert(chunk->requires_barriers() == _barriers, \"\");\n+    assert(!_barriers || chunk->is_empty(), \"\");\n@@ -1544,3 +1544,3 @@\n-    assert (!chunk->has_bitmap(), \"\");\n-    assert (!chunk->is_empty() || StackChunkFrameStream<chunk_frames::MIXED>(chunk).is_done(), \"\");\n-    assert (!chunk->is_empty() || StackChunkFrameStream<chunk_frames::MIXED>(chunk).to_frame().is_empty(), \"\");\n+    assert(!chunk->has_bitmap(), \"\");\n+    assert(!chunk->is_empty() || StackChunkFrameStream<chunk_frames::MIXED>(chunk).is_done(), \"\");\n+    assert(!chunk->is_empty() || StackChunkFrameStream<chunk_frames::MIXED>(chunk).to_frame().is_empty(), \"\");\n@@ -1575,1 +1575,1 @@\n-    assert (!empty || Continuation::is_continuation_entry_frame(callee, nullptr), \"\");\n+    assert(!empty || Continuation::is_continuation_entry_frame(callee, nullptr), \"\");\n@@ -1579,2 +1579,2 @@\n-    assert (Continuation::is_return_barrier_entry(entry.pc()) || Continuation::is_continuation_enterSpecial(entry), \"\");\n-    assert (FKind::interpreted || entry.sp() == entry.unextended_sp(), \"\");\n+    assert(Continuation::is_return_barrier_entry(entry.pc()) || Continuation::is_continuation_enterSpecial(entry), \"\");\n+    assert(FKind::interpreted || entry.sp() == entry.unextended_sp(), \"\");\n@@ -1588,1 +1588,1 @@\n-    assert (FKind::is_instance(f), \"\");\n+    assert(FKind::is_instance(f), \"\");\n@@ -1592,1 +1592,1 @@\n-      assert ((last_pc == nullptr) == _cont.tail()->is_empty(), \"\");\n+      assert((last_pc == nullptr) == _cont.tail()->is_empty(), \"\");\n@@ -1596,1 +1596,1 @@\n-      assert (!caller.is_empty(), \"\");\n+      assert(!caller.is_empty(), \"\");\n@@ -1606,1 +1606,1 @@\n-      assert (hf.get_cb()->is_compiled(), \"\");\n+      assert(hf.get_cb()->is_compiled(), \"\");\n@@ -1609,2 +1609,2 @@\n-        assert (f.cb()->as_compiled_method()->is_deopt_pc(f.raw_pc()), \"\");\n-        assert (f.cb()->as_compiled_method()->is_deopt_pc(Frame::real_pc(f)), \"\");\n+        assert(f.cb()->as_compiled_method()->is_deopt_pc(f.raw_pc()), \"\");\n+        assert(f.cb()->as_compiled_method()->is_deopt_pc(Frame::real_pc(f)), \"\");\n@@ -1619,1 +1619,1 @@\n-      assert ((f.at(frame::interpreter_frame_last_sp_offset) != 0) || (f.unextended_sp() == f.sp()), \"\");\n+      assert((f.at(frame::interpreter_frame_last_sp_offset) != 0) || (f.unextended_sp() == f.sp()), \"\");\n@@ -1630,1 +1630,1 @@\n-    assert (Interpreted::frame_bottom(f) >= f.fp() + ContinuationHelper::frame_metadata + locals, \"\");\/\/ = on x86\n+    assert(Interpreted::frame_bottom(f) >= f.fp() + ContinuationHelper::frame_metadata + locals, \"\");\/\/ = on x86\n@@ -1638,1 +1638,1 @@\n-    assert (vsp <= Interpreted::frame_top(f, &mask), \"vsp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n+    assert(vsp <= Interpreted::frame_top(f, &mask), \"vsp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n@@ -1648,1 +1648,1 @@\n-    assert (!Frame::frame_method(f)->jvmti_mount_transition(), \"\");\n+    assert(!Frame::frame_method(f)->jvmti_mount_transition(), \"\");\n@@ -1662,1 +1662,1 @@\n-    assert (Interpreted::frame_bottom(hf) == hsp + fsize, \"\");\n+    assert(Interpreted::frame_bottom(hf) == hsp + fsize, \"\");\n@@ -1668,1 +1668,1 @@\n-    assert (!bottom || !caller.is_interpreted_frame() || (hsp + fsize) == (caller.unextended_sp() + argsize), \"\");\n+    assert(!bottom || !caller.is_interpreted_frame() || (hsp + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1692,1 +1692,1 @@\n-    assert (!Frame::frame_method(f)->jvmti_mount_transition(), \"\");\n+    assert(!Frame::frame_method(f)->jvmti_mount_transition(), \"\");\n@@ -1708,1 +1708,1 @@\n-    assert (!bottom || !caller.is_compiled_frame() || (hsp + fsize) == (caller.unextended_sp() + argsize), \"\");\n+    assert(!bottom || !caller.is_compiled_frame() || (hsp + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1739,2 +1739,2 @@\n-    assert (senderf.unextended_sp() < _bottom_address - 1, \"\");\n-    assert (senderf.is_compiled_frame(), \"\");\n+    assert(senderf.unextended_sp() < _bottom_address - 1, \"\");\n+    assert(senderf.is_compiled_frame(), \"\");\n@@ -1752,2 +1752,2 @@\n-    assert (result != freeze_ok_bottom, \"\");\n-    assert (!caller.is_interpreted_frame(), \"\");\n+    assert(result != freeze_ok_bottom, \"\");\n+    assert(!caller.is_interpreted_frame(), \"\");\n@@ -1767,1 +1767,1 @@\n-    assert (chunk->to_offset(top.sp()) <= chunk->sp(), \"\");\n+    assert(chunk->to_offset(top.sp()) <= chunk->sp(), \"\");\n@@ -1777,1 +1777,1 @@\n-    assert (top.pc() == Frame::real_pc(top), \"\");\n+    assert(top.pc() == Frame::real_pc(top), \"\");\n@@ -1804,1 +1804,1 @@\n-    assert (t == JavaThread::current(), \"\");\n+    assert(t == JavaThread::current(), \"\");\n@@ -1846,3 +1846,3 @@\n-    assert (chunk->stack_size() == (int)stack_size, \"\");\n-    assert (chunk->size() >= stack_size, \"chunk->size(): %zu size: %zu\", chunk->size(), stack_size);\n-    assert ((intptr_t)chunk->start_address() % 8 == 0, \"\");\n+    assert(chunk->stack_size() == (int)stack_size, \"\");\n+    assert(chunk->size() >= stack_size, \"chunk->size(): %zu size: %zu\", chunk->size(), stack_size);\n+    assert((intptr_t)chunk->start_address() % 8 == 0, \"\");\n@@ -1857,3 +1857,3 @@\n-    assert (chunk->flags() == 0, \"\");\n-    assert (chunk->is_gc_mode() == false, \"\");\n-    assert (chunk->max_size() == 0, \"\");\n+    assert(chunk->flags() == 0, \"\");\n+    assert(chunk->is_gc_mode() == false, \"\");\n+    assert(chunk->max_size() == 0, \"\");\n@@ -1866,1 +1866,1 @@\n-      assert (chunk0 == (oop)nullptr || !chunk0->is_empty(), \"\");\n+      assert(chunk0 == (oop)nullptr || !chunk0->is_empty(), \"\");\n@@ -1871,1 +1871,1 @@\n-    assert (chunk->parent() == (oop)nullptr || chunk->parent()->is_stackChunk(), \"\");\n+    assert(chunk->parent() == (oop)nullptr || chunk->parent()->is_stackChunk(), \"\");\n@@ -1950,2 +1950,2 @@\n-  assert (!thread->cont_fastpath()\n-              || (thread->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(thread)), \"\");\n+  assert(!thread->cont_fastpath()\n+         || (thread->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(thread)), \"\");\n@@ -1955,1 +1955,1 @@\n-  assert (!fast || monitors_on_stack(thread) == (thread->held_monitor_count() > 0), \"\");\n+  assert(!fast || monitors_on_stack(thread) == (thread->held_monitor_count() > 0), \"\");\n@@ -1967,2 +1967,2 @@\n-  assert (VERIFY_CONTINUATION(cont.mirror()), \"\");\n-  assert (!cont.is_empty(), \"\");\n+  assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n+  assert(!cont.is_empty(), \"\");\n@@ -1978,1 +1978,1 @@\n-    assert (VERIFY_CONTINUATION(cont.mirror()), \"\");\n+    assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n@@ -1988,5 +1988,5 @@\n-  assert (!current->cont_yield(), \"\");\n-  assert (!current->has_pending_exception(), \"\"); \/\/ if (current->has_pending_exception()) return early_return(freeze_exception, current, fi);\n-  assert (current->deferred_updates() == nullptr || current->deferred_updates()->count() == 0, \"\");\n-  assert (!preempt || current->thread_state() == _thread_in_vm || current->thread_state() == _thread_blocked,\n-          \"thread_state: %d %s\", current->thread_state(), current->thread_state_name());\n+  assert(!current->cont_yield(), \"\");\n+  assert(!current->has_pending_exception(), \"\"); \/\/ if (current->has_pending_exception()) return early_return(freeze_exception, current, fi);\n+  assert(current->deferred_updates() == nullptr || current->deferred_updates()->count() == 0, \"\");\n+  assert(!preempt || current->thread_state() == _thread_in_vm || current->thread_state() == _thread_blocked,\n+         \"thread_state: %d %s\", current->thread_state(), current->thread_state_name());\n@@ -2010,2 +2010,2 @@\n-  assert (oopCont == current->last_continuation()->cont_oop(), \"\");\n-  assert (ContinuationEntry::assert_entry_frame_laid_out(current), \"\");\n+  assert(oopCont == current->last_continuation()->cont_oop(), \"\");\n+  assert(ContinuationEntry::assert_entry_frame_laid_out(current), \"\");\n@@ -2013,1 +2013,1 @@\n-  assert (VERIFY_CONTINUATION(oopCont), \"\");\n+  assert(VERIFY_CONTINUATION(oopCont), \"\");\n@@ -2017,1 +2017,1 @@\n-  assert (entry->is_virtual_thread() == (entry->scope() == java_lang_VirtualThread::vthread_scope()), \"\");\n+  assert(entry->is_virtual_thread() == (entry->scope() == java_lang_VirtualThread::vthread_scope()), \"\");\n@@ -2021,1 +2021,1 @@\n-    assert (VERIFY_CONTINUATION(cont.mirror()), \"\");\n+    assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n@@ -2026,1 +2026,1 @@\n-  assert (!fast || current->held_monitor_count() == 0, \"\");\n+  assert(!fast || current->held_monitor_count() == 0, \"\");\n@@ -2040,1 +2040,1 @@\n-    assert (res == freeze_ok, \"\");\n+    assert(res == freeze_ok, \"\");\n@@ -2085,2 +2085,2 @@\n-      assert (Frame::is_stub(f.cb()), \"must be\");\n-      assert (f.oop_map() != nullptr, \"must be\");\n+      assert(Frame::is_stub(f.cb()), \"must be\");\n+      assert(f.oop_map() != nullptr, \"must be\");\n@@ -2116,1 +2116,1 @@\n-  assert (thread->has_last_Java_frame(), \"\");\n+  assert(thread->has_last_Java_frame(), \"\");\n@@ -2143,1 +2143,1 @@\n-        assert (codelet->kind() == InterpreterCodelet::codelet_bytecode, \"\");\n+        assert(codelet->kind() == InterpreterCodelet::codelet_bytecode, \"\");\n@@ -2197,1 +2197,1 @@\n-  assert (thread == JavaThread::current(), \"\");\n+  assert(thread == JavaThread::current(), \"\");\n@@ -2200,2 +2200,2 @@\n-  assert (cont == ContinuationHelper::get_continuation(thread), \"\");\n-  assert (VERIFY_CONTINUATION(cont), \"\");\n+  assert(cont == ContinuationHelper::get_continuation(thread), \"\");\n+  assert(VERIFY_CONTINUATION(cont), \"\");\n@@ -2204,1 +2204,1 @@\n-  assert (chunk != nullptr, \"\");\n+  assert(chunk != nullptr, \"\");\n@@ -2209,3 +2209,3 @@\n-  assert (chunk != nullptr, \"\");\n-  assert (!chunk->is_empty(), \"\");\n-  assert (VERIFY_STACK_CHUNK(chunk), \"\");\n+  assert(chunk != nullptr, \"\");\n+  assert(!chunk->is_empty(), \"\");\n+  assert(VERIFY_STACK_CHUNK(chunk), \"\");\n@@ -2278,1 +2278,1 @@\n-    assert (!Interpreter::contains(_cont.entryPC()), \"\");\n+    assert(!Interpreter::contains(_cont.entryPC()), \"\");\n@@ -2280,3 +2280,3 @@\n-    assert (VERIFY_CONTINUATION(_cont.mirror()), \"\");\n-    assert (!jdk_internal_vm_Continuation::done(_cont.mirror()), \"\");\n-    assert (!_cont.is_empty(), \"\");\n+    assert(VERIFY_CONTINUATION(_cont.mirror()), \"\");\n+    assert(!jdk_internal_vm_Continuation::done(_cont.mirror()), \"\");\n+    assert(!_cont.is_empty(), \"\");\n@@ -2285,1 +2285,1 @@\n-    assert (chunk != nullptr && !chunk->is_empty(), \"\"); \/\/ guaranteed by prepare_thaw\n+    assert(chunk != nullptr && !chunk->is_empty(), \"\"); \/\/ guaranteed by prepare_thaw\n@@ -2293,7 +2293,7 @@\n-    assert (chunk != (oop) nullptr, \"\");\n-    assert (chunk == _cont.tail(), \"\");\n-    assert (!chunk->is_empty(), \"\");\n-    assert (!chunk->has_mixed_frames(), \"\");\n-    assert (!chunk->requires_barriers(), \"\");\n-    assert (!chunk->has_bitmap(), \"\");\n-    assert (!_thread->is_interp_only_mode(), \"\");\n+    assert(chunk != (oop) nullptr, \"\");\n+    assert(chunk == _cont.tail(), \"\");\n+    assert(!chunk->is_empty(), \"\");\n+    assert(!chunk->has_mixed_frames(), \"\");\n+    assert(!chunk->requires_barriers(), \"\");\n+    assert(!chunk->has_bitmap(), \"\");\n+    assert(!_thread->is_interp_only_mode(), \"\");\n@@ -2339,1 +2339,1 @@\n-      assert (chunk_sp == f.sp() && chunk_sp == f.unextended_sp(), \"\");\n+      assert(chunk_sp == f.sp() && chunk_sp == f.unextended_sp(), \"\");\n@@ -2344,1 +2344,1 @@\n-      assert (!empty || argsize == chunk->argsize(), \"\");\n+      assert(!empty || argsize == chunk->argsize(), \"\");\n@@ -2358,1 +2358,1 @@\n-      assert (empty == chunk->is_empty(), \"\");\n+      assert(empty == chunk->is_empty(), \"\");\n@@ -2371,1 +2371,1 @@\n-    assert (argsize != 0 || stack_sp == ContinuationHelper::frame_align_pointer(stack_sp), \"\");\n+    assert(argsize != 0 || stack_sp == ContinuationHelper::frame_align_pointer(stack_sp), \"\");\n@@ -2377,1 +2377,1 @@\n-    assert (_cont.entrySP() - 1 <= to + size + ContinuationHelper::frame_metadata\n+    assert(_cont.entrySP() - 1 <= to + size + ContinuationHelper::frame_metadata\n@@ -2379,1 +2379,1 @@\n-    assert (argsize != 0 || to + size + ContinuationHelper::frame_metadata == _cont.entrySP(), \"\");\n+    assert(argsize != 0 || to + size + ContinuationHelper::frame_metadata == _cont.entrySP(), \"\");\n@@ -2381,1 +2381,1 @@\n-    assert (!is_last || argsize == 0, \"\");\n+    assert(!is_last || argsize == 0, \"\");\n@@ -2387,1 +2387,1 @@\n-    assert (is_last ? CodeCache::find_blob(pc)->as_compiled_method()->method()->is_continuation_enter_intrinsic()\n+    assert(is_last ? CodeCache::find_blob(pc)->as_compiled_method()->method()->is_continuation_enter_intrinsic()\n@@ -2389,1 +2389,1 @@\n-    assert (is_last == _cont.is_empty(), \"\");\n+    assert(is_last == _cont.is_empty(), \"\");\n@@ -2420,1 +2420,1 @@\n-    assert (to + size <= _cont.entrySP(), \"\");\n+    assert(to + size <= _cont.entrySP(), \"\");\n@@ -2435,3 +2435,3 @@\n-    assert (!_cont.is_empty(), \"\");\n-    assert (chunk != nullptr, \"\");\n-    assert (!chunk->is_empty(), \"\");\n+    assert(!_cont.is_empty(), \"\");\n+    assert(chunk != nullptr, \"\");\n+    assert(!chunk->is_empty(), \"\");\n@@ -2490,1 +2490,1 @@\n-      assert (f.is_interpreted_frame() || f.is_compiled_frame() || f.is_safepoint_blob_frame(), \"\");\n+      assert(f.is_interpreted_frame() || f.is_compiled_frame() || f.is_safepoint_blob_frame(), \"\");\n@@ -2495,2 +2495,2 @@\n-      assert (f.pc() == *(address*)(sp - frame::sender_sp_ret_address_offset()), \"\");\n-      assert (Interpreter::contains(f.pc()), \"\");\n+      assert(f.pc() == *(address*)(sp - frame::sender_sp_ret_address_offset()), \"\");\n+      assert(Interpreter::contains(f.pc()), \"\");\n@@ -2506,1 +2506,1 @@\n-    assert (num_frames > 0 && !hf.is_empty(), \"\");\n+    assert(num_frames > 0 && !hf.is_empty(), \"\");\n@@ -2509,1 +2509,1 @@\n-      assert (Frame::is_stub(hf.cb()), \"cb: %s\", hf.cb()->name());\n+      assert(Frame::is_stub(hf.cb()), \"cb: %s\", hf.cb()->name());\n@@ -2520,1 +2520,1 @@\n-    assert (num_frames > 0, \"\");\n+    assert(num_frames > 0, \"\");\n@@ -2527,1 +2527,1 @@\n-    assert (_stream.to_frame().is_empty() == _stream.is_done(), \"\");\n+    assert(_stream.to_frame().is_empty() == _stream.is_done(), \"\");\n@@ -2551,1 +2551,1 @@\n-      assert (_stream.sp() >= chunk->sp_address(), \"\");\n+      assert(_stream.sp() >= chunk->sp_address(), \"\");\n@@ -2567,3 +2567,3 @@\n-    assert (entry.sp() == _cont.entrySP(), \"\");\n-    assert (Continuation::is_continuation_enterSpecial(entry), \"\");\n-    assert (_cont.is_entry_frame(entry), \"\");\n+    assert(entry.sp() == _cont.entrySP(), \"\");\n+    assert(Continuation::is_continuation_enterSpecial(entry), \"\");\n+    assert(_cont.is_entry_frame(entry), \"\");\n@@ -2580,1 +2580,1 @@\n-    assert (bottom == _cont.is_entry_frame(caller), \"bottom: %d is_entry_frame: %d\", bottom, _cont.is_entry_frame(hf));\n+    assert(bottom == _cont.is_entry_frame(caller), \"bottom: %d is_entry_frame: %d\", bottom, _cont.is_entry_frame(hf));\n@@ -2604,2 +2604,2 @@\n-    assert (!bottom || !_cont.is_empty() || Continuation::is_continuation_entry_frame(f, nullptr), \"\");\n-    assert (!bottom || (_cont.is_empty() != Continuation::is_cont_barrier_frame(f)), \"\");\n+    assert(!bottom || !_cont.is_empty() || Continuation::is_continuation_entry_frame(f, nullptr), \"\");\n+    assert(!bottom || (_cont.is_empty() != Continuation::is_cont_barrier_frame(f)), \"\");\n@@ -2617,1 +2617,1 @@\n-    assert (hf.is_interpreted_frame(), \"\");\n+    assert(hf.is_interpreted_frame(), \"\");\n@@ -2636,2 +2636,2 @@\n-    assert (!bottom || vsp + fsize >= _cont.entrySP() - 2, \"\");\n-    assert (!bottom || vsp + fsize <= _cont.entrySP(), \"\");\n+    assert(!bottom || vsp + fsize >= _cont.entrySP() - 2, \"\");\n+    assert(!bottom || vsp + fsize <= _cont.entrySP(), \"\");\n@@ -2639,1 +2639,1 @@\n-    assert (Interpreted::frame_bottom(f) == vsp + fsize, \"\");\n+    assert(Interpreted::frame_bottom(f) == vsp + fsize, \"\");\n@@ -2682,1 +2682,1 @@\n-    assert (!hf.is_interpreted_frame(), \"\");\n+    assert(!hf.is_interpreted_frame(), \"\");\n@@ -2693,1 +2693,1 @@\n-    assert (caller.sp() == caller.unextended_sp(), \"\");\n+    assert(caller.sp() == caller.unextended_sp(), \"\");\n@@ -2706,1 +2706,1 @@\n-    assert (fsize <= (int)(caller.unextended_sp() - f.unextended_sp()), \"\");\n+    assert(fsize <= (int)(caller.unextended_sp() - f.unextended_sp()), \"\");\n@@ -2712,2 +2712,2 @@\n-    assert (!bottom || _cont.entrySP() - 1 <= to + sz && to + sz <= _cont.entrySP(), \"\");\n-    assert (!bottom || hf.compiled_frame_stack_argsize() != 0 || to + sz && to + sz == _cont.entrySP(), \"\");\n+    assert(!bottom || _cont.entrySP() - 1 <= to + sz && to + sz <= _cont.entrySP(), \"\");\n+    assert(!bottom || hf.compiled_frame_stack_argsize() != 0 || to + sz && to + sz == _cont.entrySP(), \"\");\n@@ -2735,1 +2735,1 @@\n-      assert (f.is_deoptimized_frame() && Frame::is_deopt_return(f.raw_pc(), f), \"\");\n+      assert(f.is_deoptimized_frame() && Frame::is_deopt_return(f.raw_pc(), f), \"\");\n@@ -2757,1 +2757,1 @@\n-      assert (!_stream.is_done(), \"\");\n+      assert(!_stream.is_done(), \"\");\n@@ -2761,1 +2761,1 @@\n-      assert (!_stream.is_done(), \"\");\n+      assert(!_stream.is_done(), \"\");\n@@ -2769,2 +2769,2 @@\n-    assert (caller.sp() == caller.unextended_sp(), \"\");\n-    assert (!caller.is_interpreted_frame(), \"\");\n+    assert(caller.sp() == caller.unextended_sp(), \"\");\n+    assert(!caller.is_interpreted_frame(), \"\");\n@@ -2803,1 +2803,1 @@\n-      assert (chunk->argsize() == 0, \"\");\n+      assert(chunk->argsize() == 0, \"\");\n@@ -2807,1 +2807,1 @@\n-    assert (chunk->is_empty() == (chunk->max_size() == 0), \"\");\n+    assert(chunk->is_empty() == (chunk->max_size() == 0), \"\");\n@@ -2810,1 +2810,1 @@\n-      assert (f.is_interpreted_frame(), \"\");\n+      assert(f.is_interpreted_frame(), \"\");\n@@ -2816,1 +2816,1 @@\n-    assert (_cont.is_empty() == _cont.last_frame().is_empty(), \"\");\n+    assert(_cont.is_empty() == _cont.last_frame().is_empty(), \"\");\n@@ -2830,2 +2830,2 @@\n-    assert (!f.is_compiled_frame() || f.is_deoptimized_frame() == f.cb()->as_compiled_method()->is_deopt_pc(f.raw_pc()), \"\");\n-    assert (!f.is_compiled_frame() || f.is_deoptimized_frame() == (f.pc() != f.raw_pc()), \"\");\n+    assert(!f.is_compiled_frame() || f.is_deoptimized_frame() == f.cb()->as_compiled_method()->is_deopt_pc(f.raw_pc()), \"\");\n+    assert(!f.is_compiled_frame() || f.is_deoptimized_frame() == (f.pc() != f.raw_pc()), \"\");\n@@ -2872,1 +2872,1 @@\n-  assert (thread == JavaThread::current(), \"\");\n+  assert(thread == JavaThread::current(), \"\");\n@@ -2877,3 +2877,3 @@\n-  assert (!jdk_internal_vm_Continuation::done(oopCont), \"\");\n-  assert (oopCont == ContinuationHelper::get_continuation(thread), \"\");\n-  assert (VERIFY_CONTINUATION(oopCont), \"\");\n+  assert(!jdk_internal_vm_Continuation::done(oopCont), \"\");\n+  assert(oopCont == ContinuationHelper::get_continuation(thread), \"\");\n+  assert(VERIFY_CONTINUATION(oopCont), \"\");\n@@ -2881,1 +2881,1 @@\n-  assert (entry->is_virtual_thread() == (entry->scope() == java_lang_VirtualThread::vthread_scope()), \"\");\n+  assert(entry->is_virtual_thread() == (entry->scope() == java_lang_VirtualThread::vthread_scope()), \"\");\n@@ -2895,1 +2895,1 @@\n-  assert ((intptr_t)sp % 16 == 0, \"\");\n+  assert((intptr_t)sp % 16 == 0, \"\");\n@@ -2899,1 +2899,1 @@\n-  assert (VERIFY_CONTINUATION(cont.mirror()), \"\");\n+  assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n@@ -2914,1 +2914,1 @@\n-  assert (ContinuationEntry::assert_entry_frame_laid_out(thread), \"\");\n+  assert(ContinuationEntry::assert_entry_frame_laid_out(thread), \"\");\n@@ -2925,1 +2925,1 @@\n-  assert (VERIFY_CONTINUATION(cont.mirror()), \"\");\n+  assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n@@ -3027,1 +3027,1 @@\n-  assert (return_pc_offset != 0, \"\");\n+  assert(return_pc_offset != 0, \"\");\n@@ -3033,1 +3033,1 @@\n-  assert (Continuation::is_continuation_enterSpecial(f), \"\");\n+  assert(Continuation::is_continuation_enterSpecial(f), \"\");\n@@ -3045,1 +3045,1 @@\n-  assert (thread->has_last_Java_frame(), \"Wrong place to use this assertion\");\n+  assert(thread->has_last_Java_frame(), \"Wrong place to use this assertion\");\n@@ -3049,1 +3049,1 @@\n-  assert (cont != nullptr, \"\");\n+  assert(cont != nullptr, \"\");\n@@ -3065,1 +3065,1 @@\n-    assert (Continuation::is_continuation_enterSpecial(f), \"\");\n+    assert(Continuation::is_continuation_enterSpecial(f), \"\");\n@@ -3069,1 +3069,1 @@\n-  assert (sp != nullptr && sp <= cont->entry_sp(), \"\");\n+  assert(sp != nullptr && sp <= cont->entry_sp(), \"\");\n@@ -3074,1 +3074,1 @@\n-    assert (cb->as_compiled_method()->method()->is_continuation_enter_intrinsic(), \"\");\n+    assert(cb->as_compiled_method()->method()->is_continuation_enter_intrinsic(), \"\");\n@@ -3089,1 +3089,1 @@\n-  assert (f.get_cb() != nullptr, \"\");\n+  assert(f.get_cb() != nullptr, \"\");\n@@ -3131,1 +3131,1 @@\n-  assert (::thaw_entry != nullptr,  \"\");\n+  assert(::thaw_entry != nullptr,  \"\");\n@@ -3136,1 +3136,1 @@\n-  assert (::freeze_entry != nullptr, \"\");\n+  assert(::freeze_entry != nullptr, \"\");\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":242,"deletions":242,"binary":false,"changes":484,"status":"modified"},{"patch":"@@ -137,3 +137,3 @@\n-  assert (chunk == NULL || _walk_cont, \"\");\n-  assert (chunk == NULL || chunk->is_stackChunk(), \"\");\n-  assert (chunk == NULL || _chunk.not_null(), \"\");\n+  assert(chunk == NULL || _walk_cont, \"\");\n+  assert(chunk == NULL || chunk->is_stackChunk(), \"\");\n+  assert(chunk == NULL || _chunk.not_null(), \"\");\n@@ -490,1 +490,1 @@\n-  assert (stack_size <= (size_t)max_jint, \"stack size too big\");\n+  assert(stack_size <= (size_t)max_jint, \"stack size too big\");\n@@ -1279,1 +1279,1 @@\n-    \/\/ assert (offset >= 0 && offset <= (intptr_t)(base->size() << LogHeapWordSize), \"offset: %ld base->size: %zu relative: %d\", offset, base->size() << LogHeapWordSize, *(intptr_t*)derived_loc <= 0);\n+    \/\/ assert(offset >= 0 && offset <= (intptr_t)(base->size() << LogHeapWordSize), \"offset: %ld base->size: %zu relative: %d\", offset, base->size() << LogHeapWordSize, *(intptr_t*)derived_loc <= 0);\n@@ -1449,1 +1449,1 @@\n-      assert (out_preserve ==  m->num_stack_arg_slots(), \"\");\n+      assert(out_preserve ==  m->num_stack_arg_slots(), \"\");\n@@ -1459,1 +1459,1 @@\n-          assert (((int)fst->reg2stack()) >= 0, \"reg2stack: \" INTPTR_FORMAT, fst->reg2stack());\n+          assert(((int)fst->reg2stack()) >= 0, \"reg2stack: \" INTPTR_FORMAT, fst->reg2stack());\n@@ -1615,1 +1615,1 @@\n-  assert (chunk->is_stackChunk(), \"\");\n+  assert(chunk->is_stackChunk(), \"\");\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -109,2 +109,2 @@\n-\/\/   assert (_cb == cb, \"\");\n-\/\/   assert (_cb->contains(_pc), \"\");\n+\/\/   assert(_cb == cb, \"\");\n+\/\/   assert(_cb->contains(_pc), \"\");\n","filename":"src\/hotspot\/share\/runtime\/frame.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-  assert (size <= f.interpreter_frame_expression_stack_size(), \"size1: %d size2: %d\", size, f.interpreter_frame_expression_stack_size());\n+  assert(size <= f.interpreter_frame_expression_stack_size(), \"size1: %d size2: %d\", size, f.interpreter_frame_expression_stack_size());\n@@ -218,1 +218,1 @@\n-  assert (f.interpreter_frame_monitor_end() <= f.interpreter_frame_monitor_begin(), \"must be\");\n+  assert(f.interpreter_frame_monitor_end() <= f.interpreter_frame_monitor_begin(), \"must be\");\n@@ -260,1 +260,1 @@\n-  assert (!f.is_interpreted_frame() && Self::is_instance(f), \"\");\n+  assert(!f.is_interpreted_frame() && Self::is_instance(f), \"\");\n@@ -271,1 +271,1 @@\n-  assert (!f.is_interpreted_frame() && Self::is_instance(f), \"\");\n+  assert(!f.is_interpreted_frame() && Self::is_instance(f), \"\");\n@@ -277,1 +277,1 @@\n-  assert (!f.is_interpreted_frame() && Compiled::is_instance(f), \"\");\n+  assert(!f.is_interpreted_frame() && Compiled::is_instance(f), \"\");\n@@ -280,1 +280,1 @@\n-  assert (!cm->is_compiled() || !cm->as_compiled_method()->is_native_method(), \"\"); \/\/ See compiledVFrame::compiledVFrame(...) in vframe_hp.cpp\n+  assert(!cm->is_compiled() || !cm->as_compiled_method()->is_native_method(), \"\"); \/\/ See compiledVFrame::compiledVFrame(...) in vframe_hp.cpp\n","filename":"src\/hotspot\/share\/runtime\/frame_helpers.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1170,1 +1170,1 @@\n-    assert (oopDesc::is_oop_or_null(receiver()), \"\"); \/\/ if (receiver() != NULL) oopDesc::verify(receiver()); \/\/\n+    assert(oopDesc::is_oop_or_null(receiver()), \"\"); \/\/ if (receiver() != NULL) oopDesc::verify(receiver()); \/\/\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  assert (_stack_arg_slots == dbg_stack_arg_slots, \"fingerprinter: %d full: %d\", _stack_arg_slots, dbg_stack_arg_slots);\n+  assert(_stack_arg_slots == dbg_stack_arg_slots, \"fingerprinter: %d full: %d\", _stack_arg_slots, dbg_stack_arg_slots);\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-      assert (UseCompressedOops, \"\");\n+      assert(UseCompressedOops, \"\");\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1598,1 +1598,1 @@\n-  assert (is_vthread_mounted(), \"\");\n+  assert(is_vthread_mounted(), \"\");\n@@ -2156,1 +2156,1 @@\n-    assert (vt != NULL, \"\");\n+    assert(vt != NULL, \"\");\n@@ -2183,1 +2183,1 @@\n-      assert (vt != NULL, \"\");\n+      assert(vt != NULL, \"\");\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1200,1 +1200,1 @@\n-  void dec_held_monitor_count() { assert (_held_monitor_count > 0, \"\"); _held_monitor_count--; }\n+  void dec_held_monitor_count() { assert(_held_monitor_count > 0, \"\"); _held_monitor_count--; }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  assert (!_reg_map.in_cont(), \"\");\n+  assert(!_reg_map.in_cont(), \"\");\n@@ -295,1 +295,1 @@\n-  assert (stack_chunk() == NULL, \"\"); \/\/ unsupported for now because seems to be unused\n+  assert(stack_chunk() == NULL, \"\"); \/\/ unsupported for now because seems to be unused\n@@ -300,1 +300,1 @@\n-  assert (stack_chunk() == NULL, \"\"); \/\/ unsupported for now because seems to be unused\n+  assert(stack_chunk() == NULL, \"\"); \/\/ unsupported for now because seems to be unused\n@@ -323,1 +323,1 @@\n-  \/\/ assert ((stack_chunk() != NULL) == register_map()->in_cont(), \"_in_cont: %d register_map()->in_cont(): %d\", stack_chunk() != NULL, register_map()->in_cont());\n+  \/\/ assert((stack_chunk() != NULL) == register_map()->in_cont(), \"_in_cont: %d register_map()->in_cont(): %d\", stack_chunk() != NULL, register_map()->in_cont());\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,3 +69,3 @@\n-      assert (!_reg_map.in_cont(), \"\");\n-      assert (_cont != NULL, \"\");\n-      assert (_cont->cont_oop() != NULL, \"_cont: \" INTPTR_FORMAT, p2i(_cont));\n+      assert(!_reg_map.in_cont(), \"\");\n+      assert(_cont != NULL, \"\");\n+      assert(_cont->cont_oop() != NULL, \"_cont: \" INTPTR_FORMAT, p2i(_cont));\n@@ -80,1 +80,1 @@\n-      assert (_reg_map.cont() != NULL, \"\");\n+      assert(_reg_map.cont() != NULL, \"\");\n@@ -190,1 +190,1 @@\n-    assert (nm()->method() != NULL, \"must be\");\n+    assert(nm()->method() != NULL, \"must be\");\n@@ -258,1 +258,1 @@\n-  assert (!Continuation::is_continuation_enterSpecial(_frame), \"\");\n+  assert(!Continuation::is_continuation_enterSpecial(_frame), \"\");\n","filename":"src\/hotspot\/share\/runtime\/vframe.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -904,1 +904,1 @@\n-    assert (vthread != NULL, \"\");\n+    assert(vthread != NULL, \"\");\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}