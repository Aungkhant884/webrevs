{"files":[{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.tests.mxbeans;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = \"true, true\",  expect = ACCEPTABLE,             desc = \"Delta is >= 0\")\n+@Outcome(                    expect = ACCEPTABLE_INTERESTING, desc = \"At least one thread experiences delta <0\")\n+@State\n+public class ThreadMXBeanAlloc {\n+\n+    static final com.sun.management.ThreadMXBean BEAN =\n+            (com.sun.management.ThreadMXBean) ManagementFactory.getThreadMXBean();\n+\n+    static final AtomicReferenceFieldUpdater<ThreadMXBeanAlloc, Long> UPDATER =\n+            AtomicReferenceFieldUpdater.newUpdater(ThreadMXBeanAlloc.class, Long.class,\"v\");\n+\n+    final long threadId = Thread.currentThread().getId();\n+\n+    \/\/ Deliberately a wrapper to make allocations with boxing\n+    volatile Long v;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        r.r1 = checkDelta();\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        r.r2 = checkDelta();\n+    }\n+\n+    boolean checkDelta() {\n+        long newM = BEAN.getThreadAllocatedBytes(threadId);\n+        Long prevM = UPDATER.getAndSet(this, newM);\n+        if (prevM != null) {\n+            long curM = BEAN.getThreadAllocatedBytes(threadId);\n+            return curM >= prevM;\n+        } else {\n+            return true;\n+        }\n+    }\n+}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/mxbeans\/ThreadMXBeanAlloc.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}