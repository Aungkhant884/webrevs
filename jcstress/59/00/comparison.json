{"files":[{"patch":"@@ -374,0 +374,3 @@\n+                \/\/ additional flags from OS support\n+                command.addAll(OSSupport.getJavaInvokeArguments());\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import java.util.Collections;\n-import java.util.List;\n+import java.io.File;\n+import java.util.*;\n@@ -51,0 +51,14 @@\n+    public static List<String> prepare() {\n+        if (VMSupport.isLinux()) {\n+            return Linux.prepare();\n+        } else {\n+            throw new IllegalStateException(\"Not implemented\");\n+        }\n+    }\n+\n+    public static void tryInit() {\n+        if (VMSupport.isLinux()) {\n+            Linux.tryInit();\n+        }\n+    }\n+\n@@ -55,0 +69,16 @@\n+        \/*                                            q\n+           Unpacks the libraries, and replies additional options for forked VMs.\n+         *\/\n+        public static List<String> prepare() {\n+            System.setProperty(\"jnidispatch.preserve\", \"true\");\n+            Native.load(\"c\", CLibrary.class);\n+\n+            return Arrays.asList(\n+                    \"-Djna.nounpack=true\",    \/\/ Should not unpack itself, but use predefined path\n+                    \"-Djna.nosys=true\",       \/\/ Should load from explicit path\n+                    \"-Djna.noclasspath=true\", \/\/ Should load from explicit path\n+                    \"-Djna.boot.library.path=\" + new File(System.getProperty(\"jnidispatch.path\")).getParent(),\n+                    \"-Djna.platform.library.path=\" + System.getProperty(\"jna.platform.library.path\")\n+            );\n+        }\n+\n@@ -82,7 +112,3 @@\n-                final cpu_set_t new_cpuset = new cpu_set_t();\n-                new_cpuset.set(0);\n-                final cpu_set_t old_cpuset = new cpu_set_t();\n-\n-                get(old_cpuset);\n-                set(new_cpuset);\n-                set(old_cpuset);\n+                cpu_set_t cs = new cpu_set_t();\n+                get(cs);\n+                set(cs);\n@@ -95,5 +121,1 @@\n-            try {\n-                if (INSTANCE.sched_getaffinity(0, cpu_set_t.SIZE_OF, cpuset) != 0) {\n-                    throw new IllegalStateException(\"Failed: \" + Native.getLastError());\n-                }\n-            } catch (LastErrorException e) {\n+            if (INSTANCE.sched_getaffinity(0, cpu_set_t.SIZE_OF, cpuset) != 0) {\n@@ -105,5 +127,1 @@\n-            try {\n-                if (INSTANCE.sched_setaffinity(0, cpu_set_t.SIZE_OF, cpuset) != 0) {\n-                    throw new IllegalStateException(\"Failed: \" + Native.getLastError());\n-                }\n-            } catch (LastErrorException e) {\n+            if (INSTANCE.sched_setaffinity(0, cpu_set_t.SIZE_OF, cpuset) != 0) {\n@@ -115,2 +133,2 @@\n-            int sched_getaffinity(int pid, int size, cpu_set_t cpuset) throws LastErrorException;\n-            int sched_setaffinity(int pid, int size, cpu_set_t cpuset) throws LastErrorException;\n+            int sched_getaffinity(int pid, int size, cpu_set_t cpuset);\n+            int sched_setaffinity(int pid, int size, cpu_set_t cpuset);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/AffinitySupport.java","additions":39,"deletions":21,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -32,3 +32,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n+import java.util.*;\n@@ -40,0 +38,2 @@\n+    private static List<String> AFFINITY_ADDITIONAL_OPTIONS;\n+\n@@ -58,0 +58,1 @@\n+            AFFINITY_ADDITIONAL_OPTIONS = AffinitySupport.prepare();\n@@ -70,0 +71,8 @@\n+    public static Collection<? extends String> getJavaInvokeArguments() {\n+        if (AFFINITY_SUPPORT_AVAILABLE) {\n+            return AFFINITY_ADDITIONAL_OPTIONS;\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/OSSupport.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -15,0 +15,5 @@\n+    @Test\n+    public void prepare() {\n+        AffinitySupport.prepare();\n+    }\n+\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/AffinitySupportTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}