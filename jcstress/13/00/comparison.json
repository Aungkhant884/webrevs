{"files":[{"patch":"@@ -41,1 +41,0 @@\n-import java.util.function.Consumer;\n@@ -86,1 +85,1 @@\n-                result.addAuxData(StringUtils.getStacktrace(e));\n+                result.addMessage(StringUtils.getStacktrace(e));\n@@ -90,1 +89,1 @@\n-                result.addAuxData(StringUtils.getStacktrace(ex));\n+                result.addMessage(StringUtils.getStacktrace(ex));\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/EmbeddedExecutor.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-                sink.add(result);\n+                vmByToken.get(token).recordResult(result);\n@@ -130,9 +130,3 @@\n-            try {\n-                if (!vm.checkTermination()) continue;\n-            } catch (ForkFailedException e) {\n-                TestConfig task = vm.getTask();\n-                TestResult result = new TestResult(task, Status.VM_ERROR);\n-                for (String i : e.getInfo()) {\n-                    result.addAuxData(i);\n-                }\n-                sink.add(result);\n+            if (vm.checkCompleted(sink)) {\n+                vmByToken.remove(vm.token, vm);\n+                cpuLayout.release(vm.claimedCPUs);\n@@ -140,3 +134,0 @@\n-\n-            vmByToken.remove(vm.token, vm);\n-            cpuLayout.release(vm.claimedCPUs);\n@@ -158,0 +149,1 @@\n+        private TestResult result;\n@@ -261,1 +253,14 @@\n-        boolean checkTermination() {\n+        public synchronized TestConfig jobRequest() {\n+            if (processed) {\n+                return null;\n+            }\n+            processed = true;\n+            return getTask();\n+        }\n+\n+        public TestConfig getTask() {\n+            return task;\n+        }\n+\n+        public boolean checkCompleted(TestResultCollector sink) {\n+            \/\/ There is a pending exception that terminated the target VM.\n@@ -263,1 +268,2 @@\n-                throw new ForkFailedException(pendingException.getMessage());\n+                dumpFailure(sink, Collections.singleton(pendingException.getMessage()), Collections.emptyList());\n+                return true;\n@@ -266,0 +272,1 @@\n+            \/\/ Process is still alive, no need to ask about the status.\n@@ -268,2 +275,7 @@\n-            } else {\n-                \/\/ Try to poll the exit code, and fail if it's not zero.\n+            }\n+\n+            \/\/ Try to poll the exit code, and fail if it's not zero.\n+            try {\n+                int ecode = process.waitFor();\n+\n+                List<String> out = new ArrayList<>();\n@@ -271,21 +283,3 @@\n-                    int ecode = process.waitFor();\n-                    if (ecode != 0) {\n-                        List<String> output = new ArrayList<>();\n-                        try {\n-                            output.addAll(Files.readAllLines(stdout.toPath()));\n-                        } catch (IOException e) {\n-                            output.add(\"Failed to read stdout: \" + e.getMessage());\n-                        }\n-                        try {\n-                            output.addAll(Files.readAllLines(stderr.toPath()));\n-                        } catch (IOException e) {\n-                            output.add(\"Failed to read stderr: \" + e.getMessage());\n-                        }\n-                        throw new ForkFailedException(output);\n-                    }\n-                } catch (InterruptedException ex) {\n-                    throw new ForkFailedException(ex.getMessage());\n-                } finally {\n-                    \/\/ The process is definitely dead, remove the temporary files.\n-                    stdout.delete();\n-                    stderr.delete();\n+                    out.addAll(Files.readAllLines(stdout.toPath()));\n+                } catch (IOException e) {\n+                    out.add(\"Failed to read stdout: \" + e.getMessage());\n@@ -293,1 +287,21 @@\n-                return true;\n+\n+                List<String> err = new ArrayList<>();\n+                try {\n+                    err.addAll(Files.readAllLines(stderr.toPath()));\n+                } catch (IOException e) {\n+                    err.add(\"Failed to read stderr: \" + e.getMessage());\n+                }\n+\n+                if (ecode != 0) {\n+                    dumpFailure(sink, out, err);\n+                } else {\n+                    result.addVMOut(out);\n+                    result.addVMErr(err);\n+                    sink.add(result);\n+                }\n+            } catch (InterruptedException ex) {\n+                dumpFailure(sink, Collections.singleton(ex.getMessage()), Collections.emptyList());\n+            } finally {\n+                \/\/ The process is definitely dead, remove the temporary files.\n+                stdout.delete();\n+                stderr.delete();\n@@ -295,0 +309,1 @@\n+            return true;\n@@ -297,3 +312,5 @@\n-        public synchronized TestConfig jobRequest() {\n-            if (processed) {\n-                return null;\n+        private void dumpFailure(TestResultCollector sink, Collection<String> out, Collection<String> err) {\n+            TestConfig task = getTask();\n+            TestResult result = new TestResult(task, Status.VM_ERROR);\n+            for (String i : out) {\n+                result.addMessage(i);\n@@ -301,2 +318,4 @@\n-            processed = true;\n-            return getTask();\n+            for (String i : err) {\n+                result.addMessage(i);\n+            }\n+            sink.add(result);\n@@ -305,2 +324,5 @@\n-        public TestConfig getTask() {\n-            return task;\n+        public void recordResult(TestResult r) {\n+            if (result != null) {\n+                throw new IllegalStateException(\"VM had already published a result.\");\n+            }\n+            result = r;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":68,"deletions":46,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -48,1 +48,3 @@\n-    private final List<String> auxData;\n+    private final List<String> messages;\n+    private final List<String> vmOut;\n+    private final List<String> vmErr;\n@@ -54,1 +56,3 @@\n-        this.auxData = new ArrayList<>();\n+        this.messages = new ArrayList<>();\n+        this.vmOut = new ArrayList<>();\n+        this.vmErr = new ArrayList<>();\n@@ -61,2 +65,18 @@\n-    public void addAuxData(String data) {\n-        auxData.add(data);\n+    public void addMessage(String msg) {\n+        messages.add(msg);\n+    }\n+\n+    public void addVMOut(String msg) {\n+        vmOut.add(msg);\n+    }\n+\n+    public void addVMOut(Collection<String> msg) {\n+        vmOut.addAll(msg);\n+    }\n+\n+    public void addVMErr(String msg) {\n+        vmErr.add(msg);\n+    }\n+\n+    public void addVMErr(Collection<String> msg) {\n+        vmErr.addAll(msg);\n@@ -81,2 +101,10 @@\n-    public List<String> getAuxData() {\n-        return auxData;\n+    public List<String> getMessages() {\n+        return messages;\n+    }\n+\n+    public List<String> getVmOut() {\n+        return vmOut;\n+    }\n+\n+    public List<String> getVmErr() {\n+        return vmErr;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/collectors\/TestResult.java","additions":34,"deletions":6,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-            if (!r.getAuxData().isEmpty()) {\n+            if (!r.getMessages().isEmpty()) {\n@@ -433,1 +433,1 @@\n-                for (String data : r.getAuxData()) {\n+                for (String data : r.getMessages()) {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/HTMLReportPrinter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-            auxData.addAll(r.getAuxData());\n+            auxData.addAll(r.getMessages());\n@@ -106,1 +106,1 @@\n-            root.addAuxData(data);\n+            root.addMessage(data);\n@@ -163,5 +163,6 @@\n-        if (!r.getAuxData().isEmpty()) {\n-            pw.println(\"    Messages: \");\n-            for (String data : r.getAuxData()) {\n-                if (skipMessage(data)) continue;\n-                pw.println(\"        \" + data);\n+        boolean errMsgsPrinted = false;\n+        for (String data : r.getMessages()) {\n+            if (skipMessage(data)) continue;\n+            if (!errMsgsPrinted) {\n+                pw.println(\"    Messages: \");\n+                errMsgsPrinted = true;\n@@ -169,0 +170,29 @@\n+            pw.println(\"        \" + data);\n+        }\n+        if (errMsgsPrinted) {\n+            pw.println();\n+        }\n+\n+        boolean vmOutPrinted = false;\n+        for (String data : r.getVmOut()) {\n+            if (skipMessage(data)) continue;\n+            if (!vmOutPrinted) {\n+                pw.println(\"    VM output stream: \");\n+                vmOutPrinted = true;\n+            }\n+            pw.println(\"        \" + data);\n+        }\n+        if (vmOutPrinted) {\n+            pw.println();\n+        }\n+\n+        boolean vmErrPrinted = false;\n+        for (String data : r.getVmErr()) {\n+            if (skipMessage(data)) continue;\n+            if (!vmErrPrinted) {\n+                pw.println(\"    VM error stream: \");\n+                vmErrPrinted = true;\n+            }\n+            pw.println(\"        \" + data);\n+        }\n+        if (vmErrPrinted) {\n@@ -174,1 +204,1 @@\n-        if (data != null && data.startsWith(\"Warning: 'NoSuchMethodError' on register of sun.hotspot.WhiteBox\"))\n+        if (data == null) {\n@@ -176,0 +206,14 @@\n+        }\n+\n+        if (data.startsWith(\"Warning: 'NoSuchMethodError' on register of sun.hotspot.WhiteBox\")) {\n+            return true;\n+        }\n+\n+        if (data.contains(\"Option MaxRAMFraction was deprecated in version\") ||\n+            data.contains(\"Option MinRAMFraction was deprecated in version\")) {\n+            return true;\n+        }\n+\n+        if (data.contains(\"compiler directives added\")) {\n+            return true;\n+        }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ReportUtils.java","additions":52,"deletions":8,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            result.addAuxData(msg);\n+            result.addMessage(msg);\n@@ -115,1 +115,1 @@\n-        result.addAuxData(StringUtils.getStacktrace(aux));\n+        result.addMessage(StringUtils.getStacktrace(aux));\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/Runner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        String errorMessage = testResult.getAuxData().get(0);\n+        String errorMessage = testResult.getMessages().get(0);\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/EmbeddedExecutorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}