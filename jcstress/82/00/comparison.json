{"files":[{"patch":"@@ -63,3 +63,3 @@\n-                    <forkCount>1C<\/forkCount>\n-                    <reuseForks>false<\/reuseForks>\n-                    <redirectTestOutputToFile>true<\/redirectTestOutputToFile>\n+                    <threadCount>1<\/threadCount>\n+                    <perCoreThreadCount>true<\/perCoreThreadCount>\n+                    <parallel>classes<\/parallel>\n","filename":"jcstress-core\/pom.xml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-        int[] system = new int[scl.numCores()*topology.threadsPerCore()];\n+        int[] system = new int[topology.totalThreads()];\n@@ -224,1 +224,1 @@\n-        int[] system = new int[scl.numActors()*topology.threadsPerCore()];\n+        int[] system = new int[topology.totalThreads()];\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/Scheduler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public class FallbackTopology extends PresetTopology {\n+public class FallbackTopology extends PresetRegularTopology {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/topology\/FallbackTopology.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.os.topology;\n+\n+public class PresetListTopology extends AbstractTopology {\n+\n+    public void add(int packageId, int coreId, int threadId) throws TopologyParseException {\n+        super.add(packageId, coreId, threadId);\n+    }\n+\n+    public void finish() throws TopologyParseException {\n+        super.finish();\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/topology\/PresetListTopology.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.os.topology;\n+\n+public class PresetRegularTopology extends AbstractTopology {\n+\n+    public PresetRegularTopology(int packagesPerSystem, int coresPerPackage, int threadsPerCore) throws TopologyParseException {\n+        for (int t = 0; t < threadsPerCore; t++) {\n+            for (int p = 0; p < packagesPerSystem; p++) {\n+                for (int c = 0; c < coresPerPackage; c++) {\n+                    add(p, c + p*coresPerPackage, t*coresPerPackage*packagesPerSystem + c + p*coresPerPackage);\n+                }\n+            }\n+        }\n+\n+        finish();\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/topology\/PresetRegularTopology.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.os.topology;\n-\n-public class PresetTopology extends AbstractTopology {\n-\n-    public PresetTopology(int packagesPerSystem, int coresPerPackage, int threadsPerCore) throws TopologyParseException {\n-        for (int t = 0; t < threadsPerCore; t++) {\n-            for (int p = 0; p < packagesPerSystem; p++) {\n-                for (int c = 0; c < coresPerPackage; c++) {\n-                    add(p, c + p*coresPerPackage, t*coresPerPackage*packagesPerSystem + c + p*coresPerPackage);\n-                }\n-            }\n-        }\n-\n-        finish();\n-    }\n-\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/topology\/PresetTopology.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.os;\n+\n+import org.junit.Assert;\n+import org.openjdk.jcstress.os.topology.PresetRegularTopology;\n+import org.openjdk.jcstress.os.topology.Topology;\n+import org.openjdk.jcstress.os.topology.TopologyParseException;\n+\n+import java.util.*;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+public class AbstractSchedulerAffinityTest {\n+\n+    public void runGlobal(Scheduler s, int maxThreads) {\n+        Queue<CPUMap> takenMaps = new LinkedBlockingQueue<>();\n+\n+        List<SchedulingClass> cases = new ArrayList<>();\n+        for (int a = 1; a <= 4; a++) {\n+            List<SchedulingClass> skel = s.globalAffinityFor(a, maxThreads);\n+            for (int c = 0; c < 1000; c++) {\n+                cases.addAll(skel);\n+            }\n+        }\n+\n+        Collections.shuffle(cases, new Random(12345));\n+\n+        for (SchedulingClass scl : cases) {\n+            CPUMap cpuMap = s.tryAcquire(scl);\n+            while (cpuMap == null) {\n+                CPUMap old = takenMaps.poll();\n+                Assert.assertNotNull(\"Cannot schedule on empty system\", old);\n+                s.release(old);\n+                cpuMap = s.tryAcquire(scl);\n+            }\n+\n+            takenMaps.offer(cpuMap);\n+\n+            Assert.assertEquals(scl.numActors(), cpuMap.actorMap().length);\n+            for (int c : cpuMap.actorMap()) {\n+                Assert.assertEquals(-1, c);\n+            }\n+            Assert.assertNotEquals(0, cpuMap.systemMap().length);\n+        }\n+    }\n+\n+    public void runLocal(Topology topo, Scheduler s, int maxThreads) {\n+        Queue<CPUMap> takenMaps = new LinkedBlockingQueue<>();\n+\n+        List<SchedulingClass> cases = new ArrayList<>();\n+        for (int a = 1; a <= 4; a++) {\n+            List<SchedulingClass> skel = s.localAffinityFor(a, maxThreads);\n+            for (int c = 0; c < 1000; c++) {\n+                cases.addAll(skel);\n+            }\n+        }\n+\n+        Collections.shuffle(cases, new Random(12345));\n+\n+        for (SchedulingClass scl : cases) {\n+            CPUMap cpuMap = s.tryAcquire(scl);\n+            while (cpuMap == null) {\n+                CPUMap old = takenMaps.poll();\n+                Assert.assertNotNull(\"Cannot schedule on empty system\", old);\n+                s.release(old);\n+                cpuMap = s.tryAcquire(scl);\n+            }\n+\n+            takenMaps.offer(cpuMap);\n+            int[] actorMap = cpuMap.actorMap();\n+\n+            for (int a1 = 0; a1 < scl.numActors(); a1++) {\n+                for (int a2 = 0; a2 < scl.numActors(); a2++) {\n+                    if (scl.packages[a1] == scl.packages[a2]) {\n+                        Assert.assertEquals(\"Should be scheduled at the same package\",\n+                                topo.threadToPackage(actorMap[a1]), topo.threadToPackage(actorMap[a2]));\n+                    } else {\n+                        Assert.assertNotEquals(\"Should be scheduled at the different packages\",\n+                                topo.threadToPackage(actorMap[a1]), topo.threadToPackage(actorMap[a2]));\n+                    }\n+                    if (scl.cores[a1] == scl.cores[a2]) {\n+                        Assert.assertEquals(\"Should be scheduled at the same core: \" + scl,\n+                                topo.threadToCore(actorMap[a1]), topo.threadToCore(actorMap[a2]));\n+                    } else {\n+                        Assert.assertNotEquals(\"Should be scheduled at the different core: \" + scl,\n+                                topo.threadToCore(actorMap[a1]), topo.threadToCore(actorMap[a2]));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void runNone(Topology topo, Scheduler s, int maxThreads) {\n+        Queue<CPUMap> takenMaps = new LinkedBlockingQueue<>();\n+\n+        List<SchedulingClass> cases = new ArrayList<>();\n+        for (int a = 1; a <= 4; a++) {\n+            List<SchedulingClass> skel = s.noneAffinityFor(a, maxThreads);\n+            for (int c = 0; c < 1000; c++) {\n+                cases.addAll(skel);\n+            }\n+        }\n+\n+        Collections.shuffle(cases, new Random(12345));\n+\n+        for (SchedulingClass scl : cases) {\n+            CPUMap cpuMap = s.tryAcquire(scl);\n+            while (cpuMap == null) {\n+                CPUMap old = takenMaps.poll();\n+                Assert.assertNotNull(\"Cannot schedule on empty system: \" + scl, old);\n+                s.release(old);\n+                cpuMap = s.tryAcquire(scl);\n+            }\n+\n+            takenMaps.offer(cpuMap);\n+            Assert.assertEquals(scl.numActors(), cpuMap.actorMap().length);\n+            for (int c : cpuMap.actorMap()) {\n+                Assert.assertEquals(-1, c);\n+            }\n+            Assert.assertNotEquals(0, cpuMap.systemMap().length);\n+        }\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/AbstractSchedulerAffinityTest.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.os;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.openjdk.jcstress.os.topology.PresetListTopology;\n+import org.openjdk.jcstress.os.topology.TopologyParseException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+@RunWith(Parameterized.class)\n+public class SchedulerAffinityIrregularTest extends AbstractSchedulerAffinityTest {\n+\n+    @Parameterized.Parameters(name = \"n={0}\")\n+    public static Iterable<Object[]> data() {\n+        List<Object[]> r = new ArrayList<>();\n+        for (int n = 0; n < 2048; n++) {\n+            r.add(new Object[] { n });\n+        }\n+        return r;\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public int n;\n+\n+    @Test\n+    public void test_Local() throws TopologyParseException {\n+        PresetListTopology topo = generate();\n+\n+        int maxThreads = topo.totalThreads();\n+        Scheduler s = new Scheduler(topo, maxThreads);\n+        s.enableDebug();\n+\n+        runLocal(topo, s, maxThreads);\n+    }\n+\n+    @Test\n+    public void test_Global() throws TopologyParseException {\n+        PresetListTopology topo = generate();\n+\n+        int maxThreads = topo.totalThreads();\n+        Scheduler s = new Scheduler(topo, maxThreads);\n+        s.enableDebug();\n+\n+        runGlobal(s, maxThreads);\n+    }\n+\n+    @Test\n+    public void test_None() throws TopologyParseException {\n+        PresetListTopology topo = generate();\n+\n+        int maxThreads = topo.totalThreads();\n+        Scheduler s = new Scheduler(topo, maxThreads);\n+        s.enableDebug();\n+\n+        runNone(topo, s, maxThreads);\n+    }\n+\n+    private PresetListTopology generate() throws TopologyParseException {\n+        Random r = new Random(n);\n+\n+        PresetListTopology topo = new PresetListTopology();\n+\n+        int pId = 0;\n+        int cId = 0;\n+        int tId = 0;\n+        for (int c = 0; c < 10; c++) {\n+            topo.add(pId, cId, tId);\n+\n+            tId++;\n+            if (r.nextInt(10) > 8) {\n+                cId++;\n+            } else if (r.nextInt(10) > 8) {\n+                pId++;\n+                cId++;\n+            }\n+        }\n+        topo.finish();\n+        return topo;\n+    }\n+}\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/SchedulerAffinityIrregularTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.os;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.openjdk.jcstress.os.topology.PresetRegularTopology;\n+import org.openjdk.jcstress.os.topology.Topology;\n+import org.openjdk.jcstress.os.topology.TopologyParseException;\n+\n+import java.util.*;\n+\n+@RunWith(Parameterized.class)\n+public class SchedulerAffinityRegularTest extends AbstractSchedulerAffinityTest {\n+\n+    @Parameterized.Parameters(name = \"p={0} c={1} t={2} limited={3}\")\n+    public static Iterable<Object[]> data() {\n+        List<Object[]> r = new ArrayList<>();\n+        for (int p = 1; p <= 4; p++) {\n+            for (int c : new int[] { 1, 2, 4, 5, 6, 8 }) {\n+                for (int t : new int[] { 1, 2, 8 }) {\n+                    r.add(new Object[] { p, c, t, false });\n+                    r.add(new Object[] { p, c, t, true });\n+                }\n+            }\n+        }\n+        return r;\n+    }\n+\n+    @Parameterized.Parameter(0)\n+    public int p;\n+\n+    @Parameterized.Parameter(1)\n+    public int c;\n+\n+    @Parameterized.Parameter(2)\n+    public int t;\n+\n+    @Parameterized.Parameter(3)\n+    public boolean limited;\n+\n+    @Test\n+    public void test_Local() throws TopologyParseException {\n+        Topology topo = new PresetRegularTopology(p, c, t);\n+        int maxThreads = limited ? Math.min(4, topo.totalThreads()) : topo.totalThreads();\n+        Scheduler s = new Scheduler(topo, maxThreads);\n+        s.enableDebug();\n+\n+        runLocal(topo, s, maxThreads);\n+    }\n+\n+    @Test\n+    public void test_Global() throws TopologyParseException {\n+        Topology topo = new PresetRegularTopology(p, c, t);\n+        int maxThreads = limited ? Math.min(4, topo.totalThreads()) : topo.totalThreads();\n+        Scheduler s = new Scheduler(topo, maxThreads);\n+        s.enableDebug();\n+\n+        runGlobal(s, maxThreads);\n+    }\n+\n+    @Test\n+    public void test_None() throws TopologyParseException {\n+        Topology topo = new PresetRegularTopology(p, c, t);\n+        int maxThreads = limited ? Math.min(4, topo.totalThreads()) : topo.totalThreads();\n+        Scheduler s = new Scheduler(topo, maxThreads);\n+        s.enableDebug();\n+\n+        runNone(topo, s, maxThreads);\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/SchedulerAffinityRegularTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.os;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.openjdk.jcstress.os.topology.PresetTopology;\n-import org.openjdk.jcstress.os.topology.Topology;\n-import org.openjdk.jcstress.os.topology.TopologyParseException;\n-\n-import java.util.*;\n-import java.util.concurrent.LinkedBlockingQueue;\n-\n-@RunWith(Parameterized.class)\n-public class SchedulerGlobalAffinityTest {\n-\n-    @Parameterized.Parameters(name = \"p={0} c={1} t={2} limited={3}\")\n-    public static Iterable<Object[]> data() {\n-        List<Object[]> r = new ArrayList<>();\n-        for (int p = 1; p <= 4; p++) {\n-            for (int c : new int[] { 1, 2, 4, 5, 6, 8 }) {\n-                for (int t : new int[] { 1, 2, 8 }) {\n-                    r.add(new Object[] { p, c, t, false });\n-                    r.add(new Object[] { p, c, t, true });\n-                }\n-            }\n-        }\n-        return r;\n-    }\n-\n-    @Parameterized.Parameter(0)\n-    public int p;\n-\n-    @Parameterized.Parameter(1)\n-    public int c;\n-\n-    @Parameterized.Parameter(2)\n-    public int t;\n-\n-    @Parameterized.Parameter(3)\n-    public boolean limited;\n-\n-    @Test\n-    public void test() throws TopologyParseException {\n-        Topology topo = new PresetTopology(p, c, t);\n-        int maxThreads = limited ? Math.min(4, topo.totalCores()) : topo.totalCores();\n-        Scheduler s = new Scheduler(topo, maxThreads);\n-        s.enableDebug();\n-\n-        Queue<CPUMap> takenMaps = new LinkedBlockingQueue<>();\n-\n-        List<SchedulingClass> cases = new ArrayList<>();\n-        for (int a = 1; a <= 4; a++) {\n-            List<SchedulingClass> skel = s.globalAffinityFor(a, maxThreads);\n-            for (int c = 0; c < 1000; c++) {\n-                cases.addAll(skel);\n-            }\n-        }\n-\n-        Collections.shuffle(cases, new Random(12345));\n-\n-        for (SchedulingClass scl : cases) {\n-            CPUMap cpuMap = s.tryAcquire(scl);\n-            while (cpuMap == null) {\n-                CPUMap old = takenMaps.poll();\n-                Assert.assertNotNull(\"Cannot schedule on empty system\", old);\n-                s.release(old);\n-                cpuMap = s.tryAcquire(scl);\n-            }\n-\n-            takenMaps.offer(cpuMap);\n-\n-            Assert.assertEquals(scl.numActors(), cpuMap.actorMap().length);\n-            for (int c : cpuMap.actorMap()) {\n-                Assert.assertEquals(-1, c);\n-            }\n-            Assert.assertNotEquals(0, cpuMap.systemMap().length);\n-        }\n-    }\n-\n-\n-}\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/SchedulerGlobalAffinityTest.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -1,119 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.os;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.openjdk.jcstress.os.topology.PresetTopology;\n-import org.openjdk.jcstress.os.topology.Topology;\n-import org.openjdk.jcstress.os.topology.TopologyParseException;\n-\n-import java.util.*;\n-import java.util.concurrent.LinkedBlockingQueue;\n-\n-@RunWith(Parameterized.class)\n-public class SchedulerLocalAffinityTest {\n-\n-    @Parameterized.Parameters(name = \"p={0} c={1} t={2} limited={3}\")\n-    public static Iterable<Object[]> data() {\n-        List<Object[]> r = new ArrayList<>();\n-        for (int p = 1; p <= 4; p++) {\n-            for (int c : new int[] { 1, 2, 4, 5, 6, 8 }) {\n-                for (int t : new int[] { 1, 2, 8 }) {\n-                    r.add(new Object[] { p, c, t, false });\n-                    r.add(new Object[] { p, c, t, true });\n-                }\n-            }\n-        }\n-        return r;\n-    }\n-\n-    @Parameterized.Parameter(0)\n-    public int p;\n-\n-    @Parameterized.Parameter(1)\n-    public int c;\n-\n-    @Parameterized.Parameter(2)\n-    public int t;\n-\n-    @Parameterized.Parameter(3)\n-    public boolean limited;\n-\n-    @Test\n-    public void test() throws TopologyParseException {\n-        Topology topo = new PresetTopology(p, c, t);\n-        int maxThreads = limited ? Math.min(4, topo.totalCores()) : topo.totalCores();\n-        Scheduler s = new Scheduler(topo, maxThreads);\n-        s.enableDebug();\n-\n-        Queue<CPUMap> takenMaps = new LinkedBlockingQueue<>();\n-\n-        List<SchedulingClass> cases = new ArrayList<>();\n-        for (int a = 1; a <= 4; a++) {\n-            List<SchedulingClass> skel = s.localAffinityFor(a, maxThreads);\n-            for (int c = 0; c < 1000; c++) {\n-                cases.addAll(skel);\n-            }\n-        }\n-\n-        Collections.shuffle(cases, new Random(12345));\n-\n-        for (SchedulingClass scl : cases) {\n-            CPUMap cpuMap = s.tryAcquire(scl);\n-            while (cpuMap == null) {\n-                CPUMap old = takenMaps.poll();\n-                Assert.assertNotNull(\"Cannot schedule on empty system\", old);\n-                s.release(old);\n-                cpuMap = s.tryAcquire(scl);\n-            }\n-\n-            takenMaps.offer(cpuMap);\n-            int[] actorMap = cpuMap.actorMap();\n-\n-            for (int a1 = 0; a1 < scl.numActors(); a1++) {\n-                for (int a2 = 0; a2 < scl.numActors(); a2++) {\n-                    if (scl.packages[a1] == scl.packages[a2]) {\n-                        Assert.assertEquals(\"Should be scheduled at the same package\",\n-                                topo.threadToPackage(actorMap[a1]), topo.threadToPackage(actorMap[a2]));\n-                    } else {\n-                        Assert.assertNotEquals(\"Should be scheduled at the different packages\",\n-                                topo.threadToPackage(actorMap[a1]), topo.threadToPackage(actorMap[a2]));\n-                    }\n-                    if (scl.cores[a1] == scl.cores[a2]) {\n-                        Assert.assertEquals(\"Should be scheduled at the same core: \" + scl,\n-                                topo.threadToCore(actorMap[a1]), topo.threadToCore(actorMap[a2]));\n-                    } else {\n-                        Assert.assertNotEquals(\"Should be scheduled at the different core: \" + scl,\n-                                topo.threadToCore(actorMap[a1]), topo.threadToCore(actorMap[a2]));\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-}\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/SchedulerLocalAffinityTest.java","additions":0,"deletions":119,"binary":false,"changes":119,"status":"deleted"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.os;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.openjdk.jcstress.os.topology.PresetTopology;\n-import org.openjdk.jcstress.os.topology.Topology;\n-import org.openjdk.jcstress.os.topology.TopologyParseException;\n-\n-import java.util.*;\n-import java.util.concurrent.LinkedBlockingQueue;\n-\n-@RunWith(Parameterized.class)\n-public class SchedulerNoneAffinityTest {\n-\n-    @Parameterized.Parameters(name = \"p={0} c={1} t={2} limited={3}\")\n-    public static Iterable<Object[]> data() {\n-        List<Object[]> r = new ArrayList<>();\n-        for (int p = 1; p <= 4; p++) {\n-            for (int c : new int[] { 1, 2, 4, 5, 6, 8 }) {\n-                for (int t : new int[] { 1, 2, 8 }) {\n-                    r.add(new Object[] { p, c, t, false });\n-                    r.add(new Object[] { p, c, t, true });\n-                }\n-            }\n-        }\n-        return r;\n-    }\n-\n-    @Parameterized.Parameter(0)\n-    public int p;\n-\n-    @Parameterized.Parameter(1)\n-    public int c;\n-\n-    @Parameterized.Parameter(2)\n-    public int t;\n-\n-    @Parameterized.Parameter(3)\n-    public boolean limited;\n-\n-    @Test\n-    public void test() throws TopologyParseException {\n-        Topology topo = new PresetTopology(p, c, t);\n-        int maxThreads = limited ? Math.min(4, topo.totalCores()) : topo.totalCores();\n-        Scheduler s = new Scheduler(topo, maxThreads);\n-        s.enableDebug();\n-\n-        Queue<CPUMap> takenMaps = new LinkedBlockingQueue<>();\n-\n-        List<SchedulingClass> cases = new ArrayList<>();\n-        for (int a = 1; a <= 4; a++) {\n-            List<SchedulingClass> skel = s.noneAffinityFor(a, maxThreads);\n-            for (int c = 0; c < 1000; c++) {\n-                cases.addAll(skel);\n-            }\n-        }\n-\n-        Collections.shuffle(cases, new Random(12345));\n-\n-        for (SchedulingClass scl : cases) {\n-            CPUMap cpuMap = s.tryAcquire(scl);\n-            while (cpuMap == null) {\n-                CPUMap old = takenMaps.poll();\n-                Assert.assertNotNull(\"Cannot schedule on empty system: \" + scl, old);\n-                s.release(old);\n-                cpuMap = s.tryAcquire(scl);\n-            }\n-\n-            takenMaps.offer(cpuMap);\n-            Assert.assertEquals(scl.numActors(), cpuMap.actorMap().length);\n-            for (int c : cpuMap.actorMap()) {\n-                Assert.assertEquals(-1, c);\n-            }\n-            Assert.assertNotEquals(0, cpuMap.systemMap().length);\n-        }\n-    }\n-\n-}\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/SchedulerNoneAffinityTest.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -35,1 +35,1 @@\n-        Topology t = new PresetTopology(2, 4, 4);\n+        Topology t = new PresetRegularTopology(2, 4, 4);\n@@ -54,1 +54,1 @@\n-        Topology t = new PresetTopology(2, 4, 4);\n+        Topology t = new PresetRegularTopology(2, 4, 4);\n@@ -73,1 +73,1 @@\n-        Topology t = new PresetTopology(2, 4, 4);\n+        Topology t = new PresetRegularTopology(2, 4, 4);\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/SchedulerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import org.openjdk.jcstress.os.topology.PresetTopology;\n+import org.openjdk.jcstress.os.topology.PresetRegularTopology;\n@@ -64,1 +64,1 @@\n-        Topology topo = new PresetTopology(p, c, t);\n+        Topology topo = new PresetRegularTopology(p, c, t);\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/SchedulingClassInvariantsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.io.PrintStream;\n-import java.io.StringWriter;\n@@ -38,1 +36,1 @@\n-public class PresetTopologyTest extends AbstractTopologyTest {\n+public class PresetRegularTopologyTest extends AbstractTopologyTest {\n@@ -64,1 +62,1 @@\n-        Topology topo = new PresetTopology(p, c, t);\n+        Topology topo = new PresetRegularTopology(p, c, t);\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/topology\/PresetRegularTopologyTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/topology\/PresetTopologyTest.java","status":"renamed"}]}