{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jcstress.os.AffinitySupport;\n@@ -50,1 +51,1 @@\n-        int port = Integer.valueOf(args[1]);\n+        int port = Integer.parseInt(args[1]);\n@@ -60,0 +61,2 @@\n+\n+        link.done(token);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/ForkedMain.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-    private static final int SPIN_WAIT_DELAY_MS = 100;\n-\n@@ -68,0 +66,1 @@\n+    private final Object notifyLock;\n@@ -74,0 +73,1 @@\n+        this.notifyLock = new Object();\n@@ -85,0 +85,6 @@\n+\n+            @Override\n+            public void onDone(String token) {\n+                vmByToken.get(token).recordDone();\n+                notifyChanged();\n+            }\n@@ -88,0 +94,17 @@\n+    private void awaitNotification() {\n+        synchronized (notifyLock) {\n+            try {\n+                \/\/ Wait one second and then unblock for extra safety\n+                notifyLock.wait(1000);\n+            } catch (InterruptedException e) {\n+                \/\/ Do nothing\n+            }\n+        }\n+    }\n+\n+    private void notifyChanged() {\n+        synchronized (notifyLock) {\n+            notifyLock.notify();\n+        }\n+    }\n+\n@@ -108,5 +131,1 @@\n-                try {\n-                    Thread.sleep(SPIN_WAIT_DELAY_MS);\n-                } catch (InterruptedException e) {\n-                    \/\/ do nothing\n-                }\n+                awaitNotification();\n@@ -119,5 +138,1 @@\n-                try {\n-                    Thread.sleep(SPIN_WAIT_DELAY_MS);\n-                } catch (InterruptedException e) {\n-                    \/\/ do nothing\n-                }\n+                awaitNotification();\n@@ -155,0 +170,1 @@\n+        private boolean isDone;\n@@ -326,1 +342,1 @@\n-        public TestConfig getTask() {\n+        public synchronized TestConfig getTask() {\n@@ -330,1 +346,1 @@\n-        public boolean checkCompleted(TestResultCollector sink) {\n+        public synchronized boolean checkCompleted(TestResultCollector sink) {\n@@ -340,1 +356,1 @@\n-            if (process.isAlive()) {\n+            if (!isDone && process.isAlive()) {\n@@ -381,1 +397,1 @@\n-        public void recordResult(TestResult r) {\n+        public synchronized void recordResult(TestResult r) {\n@@ -387,0 +403,4 @@\n+\n+        public synchronized void recordDone() {\n+            isDone = true;\n+        }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":36,"deletions":16,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -85,0 +85,8 @@\n+\n+    public void done(String token) {\n+        try {\n+            requestResponse(new DoneFrame(token));\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkClient.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -131,0 +131,4 @@\n+                        } else if (obj instanceof DoneFrame) {\n+                            String tkn = ((DoneFrame) obj).getToken();\n+                            listener.onDone(tkn);\n+                            oos.writeObject(new OkResponseFrame());\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkServer.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.link;\n+\n+import java.io.Serializable;\n+\n+class DoneFrame implements Serializable {\n+    private static final long serialVersionUID = -4528163874292325861L;\n+\n+    private final String token;\n+\n+    public DoneFrame(String token) {\n+        this.token = token;\n+    }\n+\n+    public String getToken() {\n+        return token;\n+    }\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/DoneFrame.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -36,0 +36,2 @@\n+    void onDone(String token);\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/ServerListener.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}