{"files":[{"patch":"@@ -40,3 +40,0 @@\n-\n-    If you run this sample with Java 15+, check the -XX:+UseBiasedLocking flag for monitors\n-    because biased locking is disabled by default which can harm the performance.\n@@ -47,1 +44,1 @@\n- * It solves this problem by monitors, reentrant locks and semaphores.\n+ * It solves this problem by a resource hierarchy.\n@@ -50,20 +47,1 @@\n-public abstract class ClassicProblem_01_DiningPhilosophers {\n-\n-    static abstract class Base {\n-        final protected void eat(int fork1, int fork2) {\n-            try {\n-                pickFork(fork1);\n-                pickFork(fork2);\n-                \/\/ eating\n-                dropFork(fork1);\n-                dropFork(fork2);\n-            } catch (InterruptedException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        protected abstract void pickFork(int fork) throws InterruptedException;\n-\n-        protected abstract void dropFork(int fork);\n-    }\n-\n+public class ClassicProblem_01_DiningPhilosophers {\n@@ -74,65 +52,3 @@\n-    public static class Monitors extends Base {\n-        private final Object lock = new Object();\n-        private final boolean[] forksInUse = new boolean[4];\n-\n-        @Actor\n-        public void p1() {\n-            \/\/ think\n-            eat(0, 1);\n-        }\n-\n-        @Actor\n-        public void p2() {\n-            \/\/ think\n-            eat(1, 2);\n-        }\n-\n-        @Actor\n-        public void p3() {\n-            \/\/ think\n-            eat(2, 3);\n-        }\n-\n-        @Actor\n-        public void p4() {\n-            \/\/ think\n-            eat(0, 3); \/\/ and not eat(3, 0) because we must acquire all locks in the same order to avoid deadlocks\n-        }\n-\n-        @Arbiter\n-        public void fake(Z_Result r) {\n-            r.r1 = true;\n-        }\n-\n-        @Override\n-        protected void pickFork(int fork) {\n-            synchronized (lock) {\n-                while (forksInUse[fork]) {\n-                    try {\n-                        lock.wait();\n-                    } catch (InterruptedException e) {\n-                        throw new IllegalStateException(e);\n-                    }\n-                    forksInUse[fork] = true;\n-                }\n-            }\n-        }\n-\n-        @Override\n-        protected void dropFork(int fork) {\n-            synchronized (lock) {\n-                forksInUse[fork] = false;\n-                lock.notifyAll();\n-            }\n-        }\n-    }\n-\n-\n-    @JCStressTest\n-    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n-    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n-    @State\n-    public static class ReentrantLocks extends Base {\n-        private final ReentrantLock lock = new ReentrantLock();\n-        private final Condition forkReleased = lock.newCondition();\n-        private final boolean[] forksInUse = new boolean[4];\n+    public static class ResourceHierarchy {\n+        private final Semaphore[] semaphores =\n+                new Semaphore[]{new Semaphore(1), new Semaphore(1), new Semaphore(1)};\n@@ -155,7 +71,1 @@\n-            eat(2, 3);\n-        }\n-\n-        @Actor\n-        public void p4() {\n-            \/\/ think\n-            eat(0, 3); \/\/ and not eat(3, 0) because we must acquire all locks in the same order to avoid deadlocks\n+            eat(0, 2); \/\/ and not eat(2, 0) because we must acquire all locks in the same order to avoid deadlocks\n@@ -169,16 +79,1 @@\n-        @Override\n-        protected void pickFork(int fork) throws InterruptedException {\n-            lock.lock();\n-            try {\n-                while(forksInUse[fork]) {\n-                    forkReleased.await();\n-                }\n-                forksInUse[fork] = true;\n-            } finally {\n-                lock.unlock();\n-            }\n-        }\n-\n-        @Override\n-        protected void dropFork(int fork) {\n-            lock.lock();\n+        final protected void eat(int fork1, int fork2) {\n@@ -186,4 +81,7 @@\n-                forksInUse[fork] = false;\n-                forkReleased.signalAll();\n-            } finally {\n-                lock.unlock();\n+                semaphores[fork1].acquire();\n+                semaphores[fork2].acquire();\n+                \/\/ eating\n+                semaphores[fork1].release();\n+                semaphores[fork2].release();\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n@@ -193,49 +91,0 @@\n-\n-    @JCStressTest\n-    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n-    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n-    @State\n-    public static class Semaphores extends Base {\n-        private final Semaphore[] semaphores =\n-                new Semaphore[] {\n-                        new Semaphore(1), new Semaphore(1),\n-                        new Semaphore(1), new Semaphore(1)};\n-        @Actor\n-        public void p1() {\n-            \/\/ think\n-            eat(0, 1);\n-        }\n-\n-        @Actor\n-        public void p2() {\n-            \/\/ think\n-            eat(1, 2);\n-        }\n-\n-        @Actor\n-        public void p3() {\n-            \/\/ think\n-            eat(2, 3);\n-        }\n-\n-        @Actor\n-        public void p4() {\n-            \/\/ think\n-            eat(0, 3); \/\/ and not eat(3, 0) because we must acquire all locks in the same order to avoid deadlocks\n-        }\n-\n-        @Arbiter\n-        public void fake(Z_Result r) {\n-            r.r1 = true;\n-        }\n-\n-        @Override\n-        protected void pickFork(int fork) throws InterruptedException {\n-            semaphores[fork].acquire();\n-        }\n-\n-        @Override\n-        protected void dropFork(int fork) {\n-            semaphores[fork].release();\n-        }\n-    }\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/classic\/ClassicProblem_01_DiningPhilosophers.java","additions":14,"deletions":165,"binary":false,"changes":179,"status":"modified"}]}