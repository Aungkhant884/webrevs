{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -33,2 +32,0 @@\n-import java.util.concurrent.locks.Condition;\n-import java.util.concurrent.locks.ReentrantLock;\n@@ -55,2 +52,1 @@\n-        private final Semaphore[] forks =\n-                new Semaphore[]{new Semaphore(1), new Semaphore(1), new Semaphore(1)};\n+        private final Object[] forks = new Object[] { new Object(), new Object(), new Object() };\n@@ -82,8 +78,4 @@\n-            try {\n-                forks[fork1].acquire();\n-                forks[fork2].acquire();\n-                \/\/ eating\n-                forks[fork2].release();\n-                forks[fork1].release();\n-            } catch (InterruptedException e) {\n-                throw new IllegalStateException(e);\n+            synchronized (forks[fork1]) {\n+                synchronized (forks[fork2]) {\n+                    \/\/ eating\n+                }\n@@ -98,2 +90,2 @@\n-            if (forks.getAndSet(fork1, 1) == 0) {\n-                if (forks.getAndSet(fork2, 1) == 0) {\n+            if (tryPickFork(fork1)) {\n+                if (tryPickFork(fork2)) {\n@@ -102,1 +94,1 @@\n-                    forks.set(fork1, 0);\n+                    dropFork(fork1);\n@@ -108,0 +100,4 @@\n+        protected boolean tryPickFork(int fork) {\n+            return forks.compareAndSet(fork, 0, 1);\n+        }\n+\n@@ -118,1 +114,1 @@\n-        private final Semaphore waiter = new Semaphore(1);\n+        private final Object waiter = new Object();\n@@ -144,4 +140,4 @@\n-            try {\n-                waiter.acquire();\n-                final boolean hasForks = tryPickForks(fork1, fork2);\n-                waiter.release();\n+            final boolean hasForks;\n+            synchronized (waiter) {\n+                hasForks = tryPickForks(fork1, fork2);\n+            }\n@@ -149,7 +145,4 @@\n-                if(hasForks) {\n-                    \/\/ eating\n-                    dropFork(fork1);\n-                    dropFork(fork2);\n-                }\n-            } catch (InterruptedException e) {\n-                throw new IllegalStateException(e);\n+            if (hasForks) {\n+                \/\/ eating\n+                dropFork(fork1);\n+                dropFork(fork2);\n@@ -196,1 +189,1 @@\n-                if(hasForks) {\n+                if (hasForks) {\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/classic\/ClassicProblem_01_DiningPhilosophers.java","additions":23,"deletions":30,"binary":false,"changes":53,"status":"modified"}]}