{"files":[{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurrency.classic;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.Z_Result;\n+\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicIntegerArray;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t ClassicProblem_01_DiningPhilosophers\n+ *\/\n+\n+\/**\n+ * This sample shows you how JCStress can help you to test solutions for the famous Dining philosophers problem.\n+ * It solves this problem by a resource hierarchy, by an arbitrator and by limiting the number of diners.\n+ * See https:\/\/en.wikipedia.org\/wiki\/Dining_philosophers_problem for more information about the problem.\n+ *\/\n+public class ClassicProblem_01_DiningPhilosophers {\n+    @JCStressTest\n+    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n+    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n+    @State\n+    public static class ResourceHierarchy {\n+        private final Object[] forks = new Object[] { new Object(), new Object(), new Object() };\n+\n+        @Actor\n+        public void p1() {\n+            \/\/ think\n+            eat(0, 1);\n+        }\n+\n+        @Actor\n+        public void p2() {\n+            \/\/ think\n+            eat(1, 2);\n+        }\n+\n+        @Actor\n+        public void p3() {\n+            \/\/ think\n+            eat(0, 2); \/\/ and not eat(2, 0) because we must acquire all locks in the same order to avoid deadlocks\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            r.r1 = true;\n+        }\n+\n+        final protected void eat(int fork1, int fork2) {\n+            synchronized (forks[fork1]) {\n+                synchronized (forks[fork2]) {\n+                    \/\/ eating\n+                }\n+            }\n+        }\n+    }\n+\n+    static abstract class Base {\n+        private final AtomicIntegerArray forks = new AtomicIntegerArray(3);\n+\n+        protected boolean tryPickForks(int fork1, int fork2) {\n+            if (tryPickFork(fork1)) {\n+                if (tryPickFork(fork2)) {\n+                    return true;\n+                } else {\n+                    dropFork(fork1);\n+                }\n+            }\n+            return false;\n+        }\n+\n+        protected boolean tryPickFork(int fork) {\n+            return forks.compareAndSet(fork, 0, 1);\n+        }\n+\n+        protected void dropFork(int fork) {\n+            forks.set(fork, 0);\n+        }\n+    }\n+\n+    @JCStressTest\n+    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n+    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n+    @State\n+    public static class Arbitrator extends Base {\n+        private final Object waiter = new Object();\n+\n+        @Actor\n+        public void p1() {\n+            \/\/ think\n+            eat(0, 1);\n+        }\n+\n+        @Actor\n+        public void p2() {\n+            \/\/ think\n+            eat(1, 2);\n+        }\n+\n+        @Actor\n+        public void p3() {\n+            \/\/ think\n+            eat(2, 0);\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            r.r1 = true;\n+        }\n+\n+        final protected void eat(int fork1, int fork2) {\n+            final boolean hasForks;\n+            synchronized (waiter) {\n+                hasForks = tryPickForks(fork1, fork2);\n+            }\n+\n+            if (hasForks) {\n+                \/\/ eating\n+                dropFork(fork1);\n+                dropFork(fork2);\n+            }\n+        }\n+    }\n+\n+    @JCStressTest\n+    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n+    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n+    @State\n+    public static class OneDinerFewer extends Base {\n+        private final Semaphore diners = new Semaphore(2);\n+\n+        @Actor\n+        public void p1() {\n+            \/\/ think\n+            eat(0, 1);\n+        }\n+\n+        @Actor\n+        public void p2() {\n+            \/\/ think\n+            eat(1, 2);\n+        }\n+\n+        @Actor\n+        public void p3() {\n+            \/\/ think\n+            eat(2, 0);\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            r.r1 = true;\n+        }\n+\n+        final protected void eat(int fork1, int fork2) {\n+            try {\n+                diners.acquire();\n+                final boolean hasForks = tryPickForks(fork1, fork2);\n+                diners.release();\n+\n+                if (hasForks) {\n+                    \/\/ eating\n+                    dropFork(fork1);\n+                    dropFork(fork2);\n+                }\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/classic\/ClassicProblem_01_DiningPhilosophers.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"}]}