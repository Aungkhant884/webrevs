{"files":[{"patch":"@@ -46,1 +46,1 @@\n- * It solves this problem by a resource hierarchy.\n+ * It solves this problem by a resource hierarchy, by an arbitrator and by limiting the number of diners.\n@@ -55,1 +55,1 @@\n-        private final Semaphore[] semaphores =\n+        private final Semaphore[] forks =\n@@ -83,2 +83,2 @@\n-                semaphores[fork1].acquire();\n-                semaphores[fork2].acquire();\n+                forks[fork1].acquire();\n+                forks[fork2].acquire();\n@@ -86,2 +86,2 @@\n-                semaphores[fork2].release();\n-                semaphores[fork1].release();\n+                forks[fork2].release();\n+                forks[fork1].release();\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/classic\/ClassicProblem_01_DiningPhilosophers.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}