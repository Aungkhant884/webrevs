{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicIntegerArray;\n@@ -84,1 +86,0 @@\n-                semaphores[fork1].release();\n@@ -86,0 +87,114 @@\n+                semaphores[fork1].release();\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    }\n+\n+    static abstract class Base {\n+        private final AtomicIntegerArray forks = new AtomicIntegerArray(3);\n+\n+        protected boolean tryPickForks(int fork1, int fork2) {\n+            if (forks.getAndSet(fork1, 1) == 0) {\n+                if (forks.getAndSet(fork2, 1) == 0) {\n+                    return true;\n+                } else {\n+                    forks.set(fork1, 0);\n+                }\n+            }\n+            return false;\n+        }\n+\n+        protected void dropFork(int fork) {\n+            forks.set(fork, 0);\n+        }\n+    }\n+\n+    @JCStressTest\n+    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n+    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n+    @State\n+    public static class Arbitrator extends Base {\n+        private final Semaphore waiter = new Semaphore(1);\n+\n+        @Actor\n+        public void p1() {\n+            \/\/ think\n+            eat(0, 1);\n+        }\n+\n+        @Actor\n+        public void p2() {\n+            \/\/ think\n+            eat(1, 2);\n+        }\n+\n+        @Actor\n+        public void p3() {\n+            \/\/ think\n+            eat(2, 0);\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            r.r1 = true;\n+        }\n+\n+        final protected void eat(int fork1, int fork2) {\n+            try {\n+                waiter.acquire();\n+                final boolean hasForks = tryPickForks(fork1, fork2);\n+                waiter.release();\n+\n+                if(hasForks) {\n+                    \/\/ eating\n+                    dropFork(fork1);\n+                    dropFork(fork2);\n+                }\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    }\n+\n+    @JCStressTest\n+    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n+    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n+    @State\n+    public static class OneDinerFewer extends Base {\n+        private final Semaphore diners = new Semaphore(2);\n+\n+        @Actor\n+        public void p1() {\n+            \/\/ think\n+            eat(0, 1);\n+        }\n+\n+        @Actor\n+        public void p2() {\n+            \/\/ think\n+            eat(1, 2);\n+        }\n+\n+        @Actor\n+        public void p3() {\n+            \/\/ think\n+            eat(2, 0);\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            r.r1 = true;\n+        }\n+\n+        final protected void eat(int fork1, int fork2) {\n+            try {\n+                diners.acquire();\n+                final boolean hasForks = tryPickForks(fork1, fork2);\n+                diners.release();\n+\n+                if(hasForks) {\n+                    \/\/ eating\n+                    dropFork(fork1);\n+                    dropFork(fork2);\n+                }\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/classic\/ClassicProblem_01_DiningPhilosophers.java","additions":116,"deletions":1,"binary":false,"changes":117,"status":"modified"}]}