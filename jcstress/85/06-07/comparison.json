{"files":[{"patch":"@@ -47,11 +47,6 @@\n- * All samples for mutex algorithm use a trick:\n- * Instead of telling their results they themselves have entered the critical section,\n- * they witness whether both actors have entered the critical section at the same time.\n- * The actors achieve that by setting their result to the state of the other actor\n- * because their own state is clear at that moment: they are in the critical section.\n- * Therefore, only the state of the other actor is relevant.\n- * And if the other actor's state is true, then the actor has observed both actors have been in the section at the same time.\n- * Otherwise he hasn't observed.\n- * As both actors do that, at least one actor will always witness it because\n- * even if both actors are in the critical section and one actor leaves it too fast\n- * so that the otheractor cannot observe it anymore, the one actor who left it so fast will have observed it.\n+ * All samples for mutex algorithms use the fact that incrementing int v is not an atomic operation.\n+ * It works because if both actors enter the critical section at the same time,\n+ * they will both read 0 for v and increment it to 1 for their results.\n+ * If one actor after another enters the critical section,\n+ * the first actor will read 0 for v and increment v to 1 for its result\n+ * the second actor will read 1 for v and increment v to 2 for its result.\n@@ -63,1 +58,1 @@\n-    private boolean taken1, taken2;\n+    private int v;\n@@ -66,4 +61,4 @@\n-    public void actor1(ZZ_Result r) {\n-        taken1 = true;\n-        r.r1 = taken2;\n-        taken1 = false;\n+    public void actor1(II_Result r) {\n+        { \/\/ critical section (broken)\n+            r.r1 = ++v;\n+        }\n@@ -73,4 +68,4 @@\n-    public void actor2(ZZ_Result r) {\n-        taken2 = true;\n-        r.r2 = taken1;\n-        taken2 = false;\n+    public void actor2(II_Result r) {\n+        { \/\/ critical section (broken)\n+            r.r2 = ++v;\n+        }\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_01_NoAlgorithm.java","additions":15,"deletions":20,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n-@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@Outcome(expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(id = \"1, 1\", expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n@@ -56,1 +56,1 @@\n-    private boolean taken1, taken2;\n+    private int v;\n@@ -59,1 +59,1 @@\n-    public void actor1(ZZ_Result r) {\n+    public void actor1(II_Result r) {\n@@ -63,3 +63,3 @@\n-        taken1 = true;\n-        r.r1 = taken2;\n-        taken1 = false;\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n@@ -70,1 +70,1 @@\n-    public void actor2(ZZ_Result r) {\n+    public void actor2(II_Result r) {\n@@ -74,3 +74,3 @@\n-        taken2 = true;\n-        r.r2 = taken1;\n-        taken2 = false;\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_02_PetersonAlgorithm.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n-@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@Outcome(expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(id = \"1, 1\", expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n@@ -56,1 +56,1 @@\n-    private boolean taken1, taken2;\n+    private int v;\n@@ -59,1 +59,1 @@\n-    public void actor1(ZZ_Result r) {\n+    public void actor1(II_Result r) {\n@@ -68,3 +68,3 @@\n-        taken1 = true;\n-        r.r1 = taken2;\n-        taken1 = false;\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n@@ -76,1 +76,1 @@\n-    public void actor2(ZZ_Result r) {\n+    public void actor2(II_Result r) {\n@@ -85,3 +85,3 @@\n-        taken2 = true;\n-        r.r2 = taken1;\n-        taken2 = false;\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_03_DekkerAlgorithm.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jcstress.infra.results.II_Result;\n@@ -48,2 +49,2 @@\n-@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n-@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@Outcome(expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(id = \"1, 1\", expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n@@ -53,1 +54,1 @@\n-    private boolean taken1, taken2;\n+    private int v;\n@@ -56,1 +57,1 @@\n-    public void actor1(ZZ_Result r) {\n+    public void actor1(II_Result r) {\n@@ -58,3 +59,3 @@\n-        taken1 = true;\n-        r.r1 = taken2;\n-        taken1 = false;\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n@@ -65,1 +66,1 @@\n-    public void actor2(ZZ_Result r) {\n+    public void actor2(II_Result r) {\n@@ -67,3 +68,3 @@\n-        taken2 = true;\n-        r.r2 = taken1;\n-        taken2 = false;\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_04_AtomicBoolean.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jcstress.infra.results.II_Result;\n@@ -48,2 +49,2 @@\n-@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n-@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@Outcome(expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(id = \"1, 1\", expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n@@ -53,1 +54,1 @@\n-    private boolean taken1, taken2;\n+    private int v;\n@@ -56,1 +57,1 @@\n-    public void actor1(ZZ_Result r) {\n+    public void actor1(II_Result r) {\n@@ -58,3 +59,2 @@\n-            taken1 = true;\n-            r.r1 = taken2;\n-            taken1 = false;\n+            \/\/ critical section\n+            r.r1 = ++v;\n@@ -65,1 +65,1 @@\n-    public void actor2(ZZ_Result r) {\n+    public void actor2(II_Result r) {\n@@ -67,3 +67,2 @@\n-            taken2 = true;\n-            r.r2 = taken1;\n-            taken2 = false;\n+            \/\/ critical section\n+            r.r2 = ++v;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_05_Synchronized.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jcstress.infra.results.II_Result;\n@@ -48,2 +49,2 @@\n-@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n-@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@Outcome(expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(id = \"1, 1\", expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n@@ -53,1 +54,1 @@\n-    private boolean taken1, taken2;\n+    private int v;\n@@ -56,1 +57,1 @@\n-    public void actor1(ZZ_Result r) {\n+    public void actor1(II_Result r) {\n@@ -59,3 +60,2 @@\n-            taken1 = true;\n-            r.r1 = taken2;\n-            taken1 = false;\n+            \/\/ critical section\n+            r.r1 = ++v;\n@@ -68,1 +68,1 @@\n-    public void actor2(ZZ_Result r) {\n+    public void actor2(II_Result r) {\n@@ -71,3 +71,2 @@\n-            taken2 = true;\n-            r.r2 = taken1;\n-            taken2 = false;\n+            \/\/ critical section\n+            r.r2 = ++v;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_06_ReentrantLock.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"}]}