{"files":[{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_01_NoAlgorithm\n+*\/\n+\n+\/**\n+ * This sample demonstrates you how you can introduce a critical section to check algorithms\n+ * which ensure only one actor at most can enter the critical section.\n+ *\n+ * All samples for mutex algorithm use a trick:\n+ * Instead of telling their results they themselves have entered the critical section,\n+ * they witness whether both actors have entered the critical section at the same time.\n+ * The actors achieve that by setting their result to the state of the other actor\n+ * because their own state is clear at that moment: they are in the critical section.\n+ * Therefore, only the state of the other actor is relevant.\n+ * And if the other actor's state is true, then the actor has observed both actors have been in the section at the same time.\n+ * Otherwise he hasn't observed.\n+ * As both actors do that, at least one actor will always witness it because\n+ * even if both actors are in the critical section and one actor leaves it too fast\n+ * so that the otheractor cannot observe it anymore, the one actor who left it so fast will have observed it.\n+ *\/\n+@JCStressTest\n+@Outcome(expect = ACCEPTABLE, desc = \"Both actors have entered the critical section whenever they wanted\")\n+@State\n+public class Mutex_01_NoAlgorithm {\n+    private boolean taken1, taken2;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        taken1 = true;\n+        r.r1 = taken2;\n+        taken1 = false;\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        taken2 = true;\n+        r.r2 = taken1;\n+        taken2 = false;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_01_NoAlgorithm.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_02_PetersonAlgorithm\n+ *\/\n+\n+\/**\n+ * Implemented according to https:\/\/en.wikipedia.org\/wiki\/Peterson%27s_algorithm\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@State\n+public class Mutex_02_PetersonAlgorithm {\n+    private volatile boolean flagForActor1;\n+    private volatile boolean flagForActor2;\n+    private volatile int turn;\n+    private boolean taken1, taken2;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        flagForActor1 = true;\n+        turn = 2;\n+        while (flagForActor2 && turn == 2) ;\n+        taken1 = true;\n+        r.r1 = taken2;\n+        taken1 = false;\n+        flagForActor1 = false;\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        flagForActor2 = true;\n+        turn = 1;\n+        while (flagForActor1 && turn == 1) ;\n+        taken2 = true;\n+        r.r2 = taken1;\n+        taken2 = false;\n+        flagForActor2 = false;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_02_PetersonAlgorithm.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_03_DekkerAlgorithm\n+*\/\n+\n+\/**\n+ * Implemented according to https:\/\/en.wikipedia.org\/wiki\/Dekker%27s_algorithm\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@State\n+public class Mutex_03_DekkerAlgorithm {\n+    private volatile boolean actor1wantsToEnter;\n+    private volatile boolean actor2wantsToEnter;\n+    private volatile int turn = 1;\n+    private boolean taken1, taken2;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        actor1wantsToEnter = true;\n+        while (actor2wantsToEnter) {\n+            if (turn != 1) {\n+                actor1wantsToEnter = false;\n+                while (turn != 1) ;\n+                actor1wantsToEnter = true;\n+            }\n+        }\n+        taken1 = true;\n+        r.r1 = taken2;\n+        taken1 = false;\n+        turn = 2;\n+        actor1wantsToEnter = false;\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        actor2wantsToEnter = true;\n+        while (actor1wantsToEnter) {\n+            if (turn != 2) {\n+                actor2wantsToEnter = false;\n+                while (turn != 2) ;\n+                actor2wantsToEnter = true;\n+            }\n+        }\n+        taken2 = true;\n+        r.r2 = taken1;\n+        taken2 = false;\n+        turn = 1;\n+        actor2wantsToEnter = false;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_03_DekkerAlgorithm.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_04_AtomicBoolean\n+*\/\n+\n+\/**\n+ * This sample demonstrates you how you can introduce a critical section to check algorithms\n+ * which ensure only one actor at most can enter the critical section.\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@State\n+public class Mutex_04_AtomicBoolean {\n+    private final AtomicBoolean canEnterCriticalSection = new AtomicBoolean(true);\n+    private boolean taken1, taken2;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        while(!canEnterCriticalSection.compareAndSet(true, false)) ;\n+        taken1 = true;\n+        r.r1 = taken2;\n+        taken1 = false;\n+        canEnterCriticalSection.set(true);\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        while(!canEnterCriticalSection.compareAndSet(true, false)) ;\n+        taken2 = true;\n+        r.r2 = taken1;\n+        taken2 = false;\n+        canEnterCriticalSection.set(true);\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_04_AtomicBoolean.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_05_Synchronized\n+*\/\n+\n+\/**\n+ * This sample demonstrates you how you can introduce a critical section to check algorithms\n+ * which ensure only one actor at most can enter the critical section.\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@State\n+public class Mutex_05_Synchronized {\n+    private final Object lock = new Object();\n+    private boolean taken1, taken2;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        synchronized (lock) {\n+            taken1 = true;\n+            r.r1 = taken2;\n+            taken1 = false;\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        synchronized (lock) {\n+            taken2 = true;\n+            r.r2 = taken1;\n+            taken2 = false;\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_05_Synchronized.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_06_ReentrantLock\n+*\/\n+\n+\/**\n+ * This sample demonstrates you how you can introduce a critical section to check algorithms\n+ * which ensure only one actor at most can enter the critical section.\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@State\n+public class Mutex_06_ReentrantLock {\n+    private final ReentrantLock reentrantLock = new ReentrantLock();\n+    private boolean taken1, taken2;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        reentrantLock.lock();\n+        try {\n+            taken1 = true;\n+            r.r1 = taken2;\n+            taken1 = false;\n+        } finally {\n+            reentrantLock.unlock();\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        reentrantLock.lock();\n+        try {\n+            taken2 = true;\n+            r.r2 = taken1;\n+            taken2 = false;\n+        } finally {\n+            reentrantLock.unlock();\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_06_ReentrantLock.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}