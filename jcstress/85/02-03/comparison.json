{"files":[{"patch":"@@ -53,3 +53,3 @@\n-    private final AtomicBoolean flagForActor1 = new AtomicBoolean();\n-    private final AtomicBoolean flagForActor2 = new AtomicBoolean();\n-    private final AtomicInteger turn = new AtomicInteger();\n+    private volatile boolean flagForActor1;\n+    private volatile boolean flagForActor2;\n+    private volatile int turn;\n@@ -60,3 +60,3 @@\n-        flagForActor1.set(true);\n-        turn.set(2);\n-        while (flagForActor2.get() && turn.get() == 2) ;\n+        flagForActor1 = true;\n+        turn = 2;\n+        while (flagForActor2 && turn == 2) ;\n@@ -66,1 +66,1 @@\n-        flagForActor1.set(false);\n+        flagForActor1 = false;\n@@ -71,3 +71,3 @@\n-        flagForActor2.set(true);\n-        turn.set(1);\n-        while (flagForActor1.get() && turn.get() == 1) ;\n+        flagForActor2 = true;\n+        turn = 1;\n+        while (flagForActor1 && turn == 1) ;\n@@ -77,1 +77,1 @@\n-        flagForActor2.set(false);\n+        flagForActor2 = false;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_02_PetersonAlgorithm.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -53,3 +53,3 @@\n-    private final AtomicBoolean actor1wantsToEnter = new AtomicBoolean();\n-    private final AtomicBoolean actor2wantsToEnter = new AtomicBoolean();\n-    private final AtomicInteger turn = new AtomicInteger(0);\n+    private volatile boolean actor1wantsToEnter;\n+    private volatile boolean actor2wantsToEnter;\n+    private volatile int turn = 1;\n@@ -60,6 +60,6 @@\n-        actor1wantsToEnter.set(true);\n-        while (actor2wantsToEnter.get()) {\n-            if (turn.get() != 0) {\n-                actor1wantsToEnter.set(false);\n-                while (turn.get() != 0) ;\n-                actor1wantsToEnter.set(true);\n+        actor1wantsToEnter = true;\n+        while (actor2wantsToEnter) {\n+            if (turn != 1) {\n+                actor1wantsToEnter = false;\n+                while (turn != 1) ;\n+                actor1wantsToEnter = true;\n@@ -71,2 +71,2 @@\n-        turn.set(1);\n-        actor1wantsToEnter.set(false);\n+        turn = 2;\n+        actor1wantsToEnter = false;\n@@ -77,6 +77,6 @@\n-        actor2wantsToEnter.set(true);\n-        while (actor1wantsToEnter.get()) {\n-            if (turn.get() != 1) {\n-                actor2wantsToEnter.set(false);\n-                while (turn.get() != 1) ;\n-                actor2wantsToEnter.set(true);\n+        actor2wantsToEnter = true;\n+        while (actor1wantsToEnter) {\n+            if (turn != 2) {\n+                actor2wantsToEnter = false;\n+                while (turn != 2) ;\n+                actor2wantsToEnter = true;\n@@ -88,2 +88,2 @@\n-        turn.set(0);\n-        actor2wantsToEnter.set(false);\n+        turn = 1;\n+        actor2wantsToEnter = false;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_03_DekkerAlgorithm.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_04_AtomicBoolean\n+*\/\n+\n+\/**\n+ * This sample demonstrates you how you can introduce a critical section to check algorithms\n+ * which ensure only one actor at most can enter the critical section.\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"false, false\"}, expect = ACCEPTABLE, desc = \"Both actors have entered the critical section one after another\")\n+@Outcome(expect = FORBIDDEN, desc = \"Both actors have entered the critical section at the same time\")\n+@State\n+public class Mutex_04_AtomicBoolean {\n+    private final AtomicBoolean canEnterCriticalSection = new AtomicBoolean(true);\n+    private volatile boolean taken1, taken2;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        while(!canEnterCriticalSection.compareAndSet(true, false)) ;\n+        taken1 = true;\n+        r.r1 = taken2;\n+        taken1 = false;\n+        canEnterCriticalSection.set(true);\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        while(!canEnterCriticalSection.compareAndSet(true, false)) ;\n+        taken2 = true;\n+        r.r2 = taken1;\n+        taken2 = false;\n+        canEnterCriticalSection.set(true);\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_04_AtomicBoolean.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}