{"files":[{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_01_PetersonAlgorithm\n+ *\/\n+\n+\/**\n+ * Implemented according to https:\/\/en.wikipedia.org\/wiki\/Peterson%27s_algorithm\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n+@State\n+public class Mutex_01_PetersonAlgorithm {\n+    private volatile boolean flagForActor1;\n+    private volatile boolean flagForActor2;\n+    private volatile int turn;\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        flagForActor1 = true;\n+        turn = 2;\n+        while (flagForActor2 && turn == 2); \/\/ wait\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n+        flagForActor1 = false;\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        flagForActor2 = true;\n+        turn = 1;\n+        while (flagForActor1 && turn == 1); \/\/ wait\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n+        flagForActor2 = false;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_01_PetersonAlgorithm.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_02_DekkerAlgorithm\n+*\/\n+\n+\/**\n+ * Implemented according to https:\/\/en.wikipedia.org\/wiki\/Dekker%27s_algorithm\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n+@State\n+public class Mutex_02_DekkerAlgorithm {\n+    private volatile boolean actor1wantsToEnter;\n+    private volatile boolean actor2wantsToEnter;\n+    private volatile int turn = 1;\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        actor1wantsToEnter = true;\n+        while (actor2wantsToEnter) {\n+            if (turn != 1) {\n+                actor1wantsToEnter = false;\n+                while (turn != 1); \/\/ wait\n+                actor1wantsToEnter = true;\n+            }\n+        }\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n+        turn = 2;\n+        actor1wantsToEnter = false;\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        actor2wantsToEnter = true;\n+        while (actor1wantsToEnter) {\n+            if (turn != 2) {\n+                actor2wantsToEnter = false;\n+                while (turn != 2); \/\/ wait\n+                actor2wantsToEnter = true;\n+            }\n+        }\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n+        turn = 1;\n+        actor2wantsToEnter = false;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_02_DekkerAlgorithm.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_03_AtomicBoolean\n+*\/\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n+@State\n+public class Mutex_03_AtomicBoolean {\n+    private final AtomicBoolean taken = new AtomicBoolean(false);\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        while(taken.get() || !taken.compareAndSet(false, true)); \/\/ spin\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n+        taken.set(false);\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        while(taken.get() || !taken.compareAndSet(false, true)); \/\/ spin\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n+        taken.set(false);\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_03_AtomicBoolean.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_04_Synchronized\n+*\/\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n+@State\n+public class Mutex_04_Synchronized {\n+    private final Object lock = new Object();\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        synchronized (lock) {\n+            \/\/ critical section\n+            r.r1 = ++v;\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        synchronized (lock) {\n+            \/\/ critical section\n+            r.r2 = ++v;\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_04_Synchronized.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurreny.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_05_ReentrantLock\n+*\/\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n+@State\n+public class Mutex_05_ReentrantLock {\n+    private final ReentrantLock reentrantLock = new ReentrantLock();\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        reentrantLock.lock();\n+        try {\n+            \/\/ critical section\n+            r.r1 = ++v;\n+        } finally {\n+            reentrantLock.unlock();\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        reentrantLock.lock();\n+        try {\n+            \/\/ critical section\n+            r.r2 = ++v;\n+        } finally {\n+            reentrantLock.unlock();\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurreny\/mutex\/Mutex_05_ReentrantLock.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}