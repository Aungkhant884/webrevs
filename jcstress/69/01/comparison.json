{"files":[{"patch":"@@ -50,1 +50,2 @@\n-    private int minStride, maxStride;\n+    private int strideSize;\n+    private int strideCount;\n@@ -88,2 +89,2 @@\n-        OptionSpec<Integer> minStride = parser.accepts(\"minStride\", \"Minimum internal stride size. Larger value decreases \" +\n-                \"the synchronization overhead, but also reduces accuracy.\")\n+        OptionSpec<Integer> strideSize = parser.accepts(\"strideSize\", \"Internal stride size. Larger value decreases \" +\n+                \"the synchronization overhead, but also reduces the number of collisions.\")\n@@ -92,2 +93,2 @@\n-        OptionSpec<Integer> maxStride = parser.accepts(\"maxStride\", \"Maximum internal stride size. Larger value decreases \" +\n-                \"the synchronization overhead, but also reduces accuracy.\")\n+        OptionSpec<Integer> strideCount = parser.accepts(\"strideCount\", \"Internal stride count per epoch. \" +\n+                \"Larger value increases cache footprint.\")\n@@ -198,2 +199,2 @@\n-        this.minStride = 10;\n-        this.maxStride = 10000;\n+        this.strideSize = 256;\n+        this.strideCount = 40;\n@@ -206,2 +207,2 @@\n-            this.minStride = 1;\n-            this.maxStride = 1;\n+            this.strideSize = 1;\n+            this.strideCount = 1;\n@@ -233,2 +234,2 @@\n-        this.minStride = orDefault(set.valueOf(minStride), this.minStride);\n-        this.maxStride = orDefault(set.valueOf(maxStride), this.maxStride);\n+        this.strideSize = orDefault(set.valueOf(strideSize), this.strideSize);\n+        this.strideCount = orDefault(set.valueOf(strideCount), this.strideCount);\n@@ -273,7 +274,11 @@\n-        out.printf(\"  Hardware CPUs in use: %d, %s%n\", getCPUCount(), getSpinStyle());\n-        out.printf(\"  Test preset mode: \\\"%s\\\"%n\", mode);\n-        out.printf(\"  Writing the test results to \\\"%s\\\"%n\", resultFile);\n-        out.printf(\"  Parsing results to \\\"%s\\\"%n\", resultDir);\n-        out.printf(\"  Running each test matching \\\"%s\\\" for %d forks, %d iterations, %d ms each%n\", getTestFilter(), getForks(), getIterations(), getTime());\n-        out.printf(\"  Solo stride size will be autobalanced within [%d, %d] elements, but taking no more than %d Mb.%n\", getMinStride(), getMaxStride(), getMaxFootprintMb());\n-\n+        out.println(\"  Test configuration:\");\n+        out.printf(\"    Test preset mode: \\\"%s\\\"%n\", mode);\n+        out.printf(\"    Hardware CPUs in use: %d%n\", getCPUCount());\n+        out.printf(\"    Spinning style: %s%n\", getSpinStyle());\n+        out.printf(\"    Test selection: \\\"%s\\\"%n\", getTestFilter());\n+        out.printf(\"    Forks per test: %d%n\", getForks());\n+        out.printf(\"    Iterations per fork: %d%n\", getIterations());\n+        out.printf(\"    Time per iteration: %d ms%n\", getTime());\n+        out.printf(\"    Test stride: %d strides x %d tests, but taking no more than %d Mb%n\", getStrideCount(), getStrideSize(), getMaxFootprintMb());\n+        out.printf(\"    Test result blob: \\\"%s\\\"%n\", resultFile);\n+        out.printf(\"    Test results: \\\"%s\\\"%n\", resultDir);\n@@ -283,2 +288,2 @@\n-    public int getMinStride() {\n-        return minStride;\n+    public int getStrideSize() {\n+        return strideSize;\n@@ -287,2 +292,2 @@\n-    public int getMaxStride() {\n-        return maxStride;\n+    public int getStrideCount() {\n+        return strideCount;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-        pw.println(\"        config.adjustStrides(new FootprintEstimator() {\");\n+        pw.println(\"        config.adjustStrideCount(new FootprintEstimator() {\");\n@@ -450,3 +450,4 @@\n-        pw.println(\"        gs = new \" + s + \"[config.minStride];\");\n-        pw.println(\"        gr = new \" + r + \"[config.minStride];\");\n-        pw.println(\"        for (int c = 0; c < config.minStride; c++) {\");\n+        pw.println(\"        int len = config.strideSize * config.strideCount;\");\n+        pw.println(\"        gs = new \" + s + \"[len];\");\n+        pw.println(\"        gr = new \" + r + \"[len];\");\n+        pw.println(\"        for (int c = 0; c < len; c++) {\");\n@@ -499,1 +500,1 @@\n-        pw.println(\"        int len = ls.length;\");\n+        pw.println(\"        int len = config.strideSize * config.strideCount;\");\n@@ -541,22 +542,0 @@\n-        pw.println(\"    private void \" + AUX_PREFIX + \"update(WorkerSync sync) {\");\n-        pw.println(\"        \" + s + \"[] ls = gs;\");\n-        pw.println(\"        \" + r + \"[] lr = gr;\");\n-        pw.println(\"        int len = ls.length;\");\n-        pw.println();\n-        pw.println(\"        int newLen = sync.updateStride ? Math.max(config.minStride, Math.min(len * 2, config.maxStride)) : len;\");\n-        pw.println();\n-        pw.println(\"        if (newLen > len) {\");\n-        pw.println(\"            ls = Arrays.copyOf(ls, newLen);\");\n-        pw.println(\"            lr = Arrays.copyOf(lr, newLen);\");\n-        pw.println(\"            for (int c = len; c < newLen; c++) {\");\n-        pw.println(\"                ls[c] = new \" + s + \"();\");\n-        pw.println(\"                lr[c] = new \" + r + \"();\");\n-        pw.println(\"            }\");\n-        pw.println(\"            gs = ls;\");\n-        pw.println(\"            gr = lr;\");\n-        pw.println(\"         }\");\n-        pw.println();\n-        pw.println(\"        workerSync = new WorkerSync(control.isStopped, \" + actorsCount + \", config.spinLoopStyle);\");\n-        pw.println(\"    }\");\n-        pw.println();\n-\n@@ -571,0 +550,2 @@\n+            pw.println(\"        int len = config.strideSize * config.strideCount;\");\n+            pw.println(\"        int stride = config.strideSize;\");\n@@ -578,3 +559,6 @@\n-            pw.println(\"            sync.preRun();\");\n-            pw.println(\"            \" + RUN_LOOP_PREFIX + a.getSimpleName() + \"(gs, gr);\");\n-            pw.println(\"            sync.postRun();\");\n+            pw.println(\"            int check = 0;\");\n+            pw.println(\"            for (int start = 0; start < len; start += stride) {\");\n+            pw.println(\"                \" + RUN_LOOP_PREFIX + a.getSimpleName() + \"(gs, gr, start, start + stride);\");\n+            pw.println(\"                check += \" + actorsCount + \";\");\n+            pw.println(\"                sync.awaitCheckpoint(check);\");\n+            pw.println(\"            }\");\n@@ -583,1 +567,1 @@\n-            pw.println(\"                \" + AUX_PREFIX + \"update(sync);\");\n+            pw.println(\"                workerSync = new WorkerSync(control.isStopped, \" + actorsCount + \", config.spinLoopStyle);\");\n@@ -589,1 +573,1 @@\n-            pw.println(\"    private void \" + RUN_LOOP_PREFIX + a.getSimpleName() + \"(\" + s + \"[] gs, \" + r + \"[] gr) {\");\n+            pw.println(\"    private void \" + RUN_LOOP_PREFIX + a.getSimpleName() + \"(\" + s + \"[] gs, \" + r + \"[] gr, int start, int end) {\");\n@@ -595,2 +579,1 @@\n-            pw.println(\"        int size = ls.length;\");\n-            pw.println(\"        for (int c = 0; c < size; c++) {\");\n+            pw.println(\"        for (int c = start; c < end; c++) {\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":17,"deletions":34,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-    public int minStride;\n-    public int maxStride;\n+    public final int strideSize;\n+    public int strideCount;\n@@ -51,2 +51,2 @@\n-        minStride = cfg.minStride;\n-        maxStride = cfg.maxStride;\n+        strideSize = cfg.strideSize;\n+        strideCount = cfg.strideCount;\n@@ -65,2 +65,2 @@\n-        minStride = dis.readInt();\n-        maxStride = dis.readInt();\n+        strideSize = dis.readInt();\n+        strideCount = dis.readInt();\n@@ -83,2 +83,2 @@\n-        dos.writeInt(minStride);\n-        dos.writeInt(maxStride);\n+        dos.writeInt(strideSize);\n+        dos.writeInt(strideCount);\n@@ -94,1 +94,1 @@\n-    public void adjustStrides(FootprintEstimator estimator) {\n+    public void adjustStrideCount(FootprintEstimator estimator) {\n@@ -97,5 +97,1 @@\n-        while (true) {\n-            if (!tryWith(estimator, count)) {\n-                break;\n-            }\n-\n+        while (tryWith(estimator, count)) {\n@@ -105,4 +101,3 @@\n-            \/\/ do not go over the maxStride\n-            if (succCount >= maxStride) {\n-                succCount = maxStride;\n-                break;\n+            \/\/ do not go over the max stride count\n+            if (succCount >= strideCount) {\n+                return;\n@@ -114,2 +109,1 @@\n-        maxStride = Math.min(maxStride, succCount);\n-        minStride = Math.min(minStride, succCount);\n+        strideCount = succCount;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/ForkedTestConfig.java","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-    HARD(\"using plain hard busywait.\"),\n-    THREAD_YIELD(\"using Thread.yield().\"),\n-    THREAD_SPIN_WAIT(\"using Thread.onSpinWait()\"),\n-    LOCKSUPPORT_PARK_NANOS(\"using LockSupport.parkNanos().\"),\n+    HARD(\"plain hard busywait\"),\n+    THREAD_YIELD(\"Thread.yield()\"),\n+    THREAD_SPIN_WAIT(\"Thread.onSpinWait()\"),\n+    LOCKSUPPORT_PARK_NANOS(\"LockSupport.parkNanos()\"),\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/SpinLoopStyle.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-    public int minStride;\n-    public int maxStride;\n+    public final int strideSize;\n+    public int strideCount;\n@@ -60,2 +60,2 @@\n-        minStride = opts.getMinStride();\n-        maxStride = opts.getMaxStride();\n+        strideSize = opts.getStrideSize();\n+        strideCount = opts.getStrideCount();\n@@ -90,2 +90,2 @@\n-        if (minStride != that.minStride) return false;\n-        if (maxStride != that.maxStride) return false;\n+        if (strideSize != that.strideSize) return false;\n+        if (strideCount != that.strideCount) return false;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,3 +41,0 @@\n-    public volatile boolean updateStride;\n-    private volatile int notStarted;\n-    private volatile int notFinished;\n@@ -46,0 +43,1 @@\n+    private volatile int checkpoint;\n@@ -47,2 +45,0 @@\n-    static final AtomicIntegerFieldUpdater<WorkerSync> UPDATER_NOT_STARTED = AtomicIntegerFieldUpdater.newUpdater(WorkerSync.class, \"notStarted\");\n-    static final AtomicIntegerFieldUpdater<WorkerSync> UPDATER_NOT_FINISHED = AtomicIntegerFieldUpdater.newUpdater(WorkerSync.class, \"notFinished\");\n@@ -51,0 +47,1 @@\n+    static final AtomicIntegerFieldUpdater<WorkerSync> UPDATER_CHECKPOINT = AtomicIntegerFieldUpdater.newUpdater(WorkerSync.class, \"checkpoint\");\n@@ -55,2 +52,0 @@\n-        this.notStarted = expectedWorkers;\n-        this.notFinished = expectedWorkers;\n@@ -61,17 +56,3 @@\n-    public void preRun() {\n-        \/\/ Do not need to rendezvous the workers: first iteration would\n-        \/\/ probably lack any rendezvous, but all subsequent ones would\n-        \/\/ rendezvous during postUpdate().\n-\n-        \/\/ Notify that we have started\n-        UPDATER_NOT_STARTED.decrementAndGet(this);\n-    }\n-\n-    public void postRun() {\n-        \/\/ If any thread lags behind, then we need to update our stride\n-        if (!updateStride && notStarted > 0) {\n-            updateStride = true;\n-        }\n-\n-        \/\/ Notify that we are finished\n-        UPDATER_NOT_FINISHED.decrementAndGet(this);\n+    public void awaitCheckpoint(int expected) {\n+        \/\/ Notify that we have rolled to the checkpoint\n+        UPDATER_CHECKPOINT.incrementAndGet(this);\n@@ -81,1 +62,1 @@\n-                while (notFinished > 0);\n+                while (checkpoint < expected);\n@@ -84,1 +65,1 @@\n-                while (notFinished > 0) Thread.yield();\n+                while (checkpoint < expected) Thread.yield();\n@@ -87,1 +68,1 @@\n-                while (notFinished > 0) Thread.onSpinWait();\n+                while (checkpoint < expected) Thread.onSpinWait();\n@@ -90,1 +71,1 @@\n-                while (notFinished > 0) LockSupport.parkNanos(1);\n+                while (checkpoint < expected) LockSupport.parkNanos(1);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/WorkerSync.java","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"}]}