{"files":[{"patch":"@@ -50,2 +50,2 @@\n-    private int stride;\n-    private int epoch;\n+    private int strideSize;\n+    private int strideCount;\n@@ -89,1 +89,2 @@\n-        OptionSpec<Integer> epoch = parser.accepts(\"epoch\", \"Internal epoch size. Larger value increases cache footprint.\")\n+        OptionSpec<Integer> strideSize = parser.accepts(\"strideSize\", \"Internal stride size. Larger value decreases \" +\n+                \"the synchronization overhead, but also reduces the number of collisions.\")\n@@ -92,2 +93,2 @@\n-        OptionSpec<Integer> stride = parser.accepts(\"stride\", \"Internal stride size. Larger value decreases \" +\n-                \"the synchronization overhead, but also reduces accuracy.\")\n+        OptionSpec<Integer> strideCount = parser.accepts(\"strideCount\", \"Internal stride count per epoch. \" +\n+                \"Larger value increases cache footprint.\")\n@@ -198,2 +199,2 @@\n-        this.stride = 256;\n-        this.epoch = 10240;\n+        this.strideSize = 256;\n+        this.strideCount = 40;\n@@ -206,2 +207,2 @@\n-            this.stride = 1;\n-            this.epoch = 1;\n+            this.strideSize = 1;\n+            this.strideCount = 1;\n@@ -233,2 +234,2 @@\n-        this.stride = orDefault(set.valueOf(stride), this.stride);\n-        this.epoch = orDefault(set.valueOf(epoch), this.epoch);\n+        this.strideSize = orDefault(set.valueOf(strideSize), this.strideSize);\n+        this.strideCount = orDefault(set.valueOf(strideCount), this.strideCount);\n@@ -281,2 +282,1 @@\n-        out.printf(\"    Epoch size: %d elements, but taking no more than %d Mb%n\", getEpoch(), getMaxFootprintMb());\n-        out.printf(\"    Stride size: %d elements%n\", getStride());\n+        out.printf(\"    Test stride: %d strides x %d tests, but taking no more than %d Mb%n\", getStrideCount(), getStrideSize(), getMaxFootprintMb());\n@@ -288,2 +288,2 @@\n-    public int getStride() {\n-        return stride;\n+    public int getStrideSize() {\n+        return strideSize;\n@@ -292,2 +292,2 @@\n-    public int getEpoch() {\n-        return epoch;\n+    public int getStrideCount() {\n+        return strideCount;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-        pw.println(\"        config.adjustEpoch(new FootprintEstimator() {\");\n+        pw.println(\"        config.adjustStrideCount(new FootprintEstimator() {\");\n@@ -450,3 +450,4 @@\n-        pw.println(\"        gs = new \" + s + \"[config.epoch];\");\n-        pw.println(\"        gr = new \" + r + \"[config.epoch];\");\n-        pw.println(\"        for (int c = 0; c < config.epoch; c++) {\");\n+        pw.println(\"        int len = config.strideSize * config.strideCount;\");\n+        pw.println(\"        gs = new \" + s + \"[len];\");\n+        pw.println(\"        gr = new \" + r + \"[len];\");\n+        pw.println(\"        for (int c = 0; c < len; c++) {\");\n@@ -499,2 +500,3 @@\n-        pw.println(\"        int left = a * config.epoch \/ \" + actorsCount + \";\");\n-        pw.println(\"        int right = (a + 1) * config.epoch \/ \" + actorsCount + \";\");\n+        pw.println(\"        int len = config.strideSize * config.strideCount;\");\n+        pw.println(\"        int left = a * len \/ \" + actorsCount + \";\");\n+        pw.println(\"        int right = (a + 1) * len \/ \" + actorsCount + \";\");\n@@ -548,0 +550,2 @@\n+            pw.println(\"        int len = config.strideSize * config.strideCount;\");\n+            pw.println(\"        int stride = config.strideSize;\");\n@@ -555,2 +559,0 @@\n-            pw.println(\"            int len = config.epoch;\");\n-            pw.println(\"            int stride = config.stride;\");\n@@ -559,2 +561,1 @@\n-            pw.println(\"                int end = Math.min(len, start + stride);\");\n-            pw.println(\"                \" + RUN_LOOP_PREFIX + a.getSimpleName() + \"(gs, gr, start, end);\");\n+            pw.println(\"                \" + RUN_LOOP_PREFIX + a.getSimpleName() + \"(gs, gr, start, start + stride);\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-    public int stride;\n-    public int epoch;\n+    public final int strideSize;\n+    public int strideCount;\n@@ -51,2 +51,2 @@\n-        stride = cfg.stride;\n-        epoch = cfg.epoch;\n+        strideSize = cfg.strideSize;\n+        strideCount = cfg.strideCount;\n@@ -65,2 +65,2 @@\n-        stride = dis.readInt();\n-        epoch = dis.readInt();\n+        strideSize = dis.readInt();\n+        strideCount = dis.readInt();\n@@ -83,2 +83,2 @@\n-        dos.writeInt(stride);\n-        dos.writeInt(epoch);\n+        dos.writeInt(strideSize);\n+        dos.writeInt(strideCount);\n@@ -94,1 +94,1 @@\n-    public void adjustEpoch(FootprintEstimator estimator) {\n+    public void adjustStrideCount(FootprintEstimator estimator) {\n@@ -101,2 +101,2 @@\n-            \/\/ do not go over the stride\n-            if (succCount >= epoch) {\n+            \/\/ do not go over the max stride count\n+            if (succCount >= strideCount) {\n@@ -109,1 +109,1 @@\n-        epoch = succCount;\n+        strideCount = succCount;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/ForkedTestConfig.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-    public int stride;\n-    public int epoch;\n+    public final int strideSize;\n+    public int strideCount;\n@@ -60,2 +60,2 @@\n-        stride = opts.getStride();\n-        epoch = opts.getEpoch();\n+        strideSize = opts.getStrideSize();\n+        strideCount = opts.getStrideCount();\n@@ -90,2 +90,2 @@\n-        if (stride != that.stride) return false;\n-        if (epoch != that.epoch) return false;\n+        if (strideSize != that.strideSize) return false;\n+        if (strideCount != that.strideCount) return false;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import sun.misc.Contended;\n@@ -48,2 +49,1 @@\n-    @sun.misc.Contended\n-    @jdk.internal.vm.annotation.Contended\n+    @Contended\n@@ -52,2 +52,1 @@\n-    @sun.misc.Contended\n-    @jdk.internal.vm.annotation.Contended\n+    @Contended\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/fences\/UnfencedDekkerTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}