{"files":[{"patch":"@@ -106,2 +106,0 @@\n-        out.println(\"RUN COMPLETE.\");\n-        out.println();\n@@ -141,7 +139,1 @@\n-        new HTMLReportPrinter(opts, collector).work();\n-\n-        out.println();\n-        out.println(\"HTML report was generated. Look at \" + opts.getResultDest() + \"index.html for the complete run results.\");\n-        out.println();\n-\n-        out.println(\"Will throw any pending exceptions at this point.\");\n+        new HTMLReportPrinter(opts, collector, out).work();\n@@ -149,2 +141,0 @@\n-\n-        out.println(\"Done.\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.jcstress.vm.VMSupport;\n@@ -34,0 +35,4 @@\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n@@ -58,0 +63,1 @@\n+    private static final int PROGRESS_COMPONENTS = 5;\n@@ -59,1 +65,4 @@\n-    private int progressLen;\n+    private final boolean progressAnsi;\n+    private boolean progressFirstLine;\n+    private final int[] progressLen;\n+    private final DateTimeFormatter fmt;\n@@ -71,1 +80,2 @@\n-        progressLen = 1;\n+        progressLen = new int[PROGRESS_COMPONENTS];\n+        Arrays.fill(progressLen, 1);\n@@ -73,0 +83,1 @@\n+        progressFirstLine = true;\n@@ -74,0 +85,3 @@\n+        progressAnsi = VMSupport.isLinux();\n+        fmt = DateTimeFormatter.ofPattern(\"E, yyyy-MM-dd HH:mm:ss\");\n+\n@@ -150,9 +164,29 @@\n-        String line = String.format(\"(ETA: %10s) (Sample Rate: %s) (JVMs: %d start, %d active, %d finish) (CPUs: %d actor, %d system, %d total) (Results: %d planned; %d passed, %d failed, %d soft errs, %d hard errs)\",\n-                computeETA(),\n-                computeSpeed(),\n-                executor.getJVMsStarting(), executor.getJVMsRunning(), executor.getJVMsFinishing(),\n-                actorCpus, systemCpus, actorCpus + systemCpus,\n-                expectedResults, passed, failed, softErrors, hardErrors\n-        );\n-        progressLen = line.length();\n-        output.print(line);\n+\n+        String l0 = String.format(\"(ETA: %s)\",\n+                computeETA());\n+        String l1 = String.format(\"(Sampling Rate: %s)\",\n+                computeSpeed());\n+        String l2 = String.format(\"(JVMs: %d starting, %d running, %d finishing)\",\n+                executor.getJVMsStarting(), executor.getJVMsRunning(), executor.getJVMsFinishing());\n+        String l3 = String.format(\"(CPUs: %d actor, %d system, %d total)\",\n+                actorCpus, systemCpus, actorCpus + systemCpus);\n+        String l4 = String.format(\"(Results: %d planned; %d passed, %d failed, %d soft errs, %d hard errs)\",\n+                expectedResults, passed, failed, softErrors, hardErrors);\n+\n+        if (!progressInteractive || progressAnsi) {\n+            progressLen[0] = l0.length();\n+            progressLen[1] = l1.length();\n+            progressLen[2] = l2.length();\n+            progressLen[3] = l3.length();\n+            progressLen[4] = l4.length();\n+\n+            output.println(l0);\n+            output.println(l1);\n+            output.println(l2);\n+            output.println(l3);\n+            output.println(l4);\n+        } else {\n+            output.printf(\"%s %s %s %s %s\", l0, l1, l2, l3, l4);\n+            progressLen[0] = l0.length() + l1.length() + l2.length() + l3.length() + l4.length() + 4;\n+        }\n+\n@@ -168,0 +202,4 @@\n+        if (progressFirstLine) {\n+            progressFirstLine = false;\n+            return;\n+        }\n@@ -169,1 +207,7 @@\n-            output.printf(\"\\r%\" + progressLen + \"s\\r\", \"\");\n+            if (progressAnsi) {\n+                for (int i = progressLen.length - 1; i >= 0; i--) {\n+                    output.printf(\"\\033[F%\" + progressLen[i] + \"s\\r\", \"\");\n+                }\n+            } else {\n+                output.printf(\"\\r%\" + progressLen[0] + \"s\\r\", \"\");\n+            }\n@@ -219,1 +263,3 @@\n-            String result = \"\";\n+            LocalDateTime ldt = LocalDateTime.now().plus(nsToGo, ChronoUnit.NANOS);\n+\n+            String result = \"in \";\n@@ -234,0 +280,1 @@\n+            result += \"; at \" + ldt.format(fmt);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":60,"deletions":13,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.io.PrintStream;\n@@ -56,1 +57,1 @@\n-    public HTMLReportPrinter(Options opts, InProcessCollector collector) {\n+    public HTMLReportPrinter(Options opts, InProcessCollector collector, PrintStream out) {\n@@ -59,1 +60,3 @@\n-        new File(resultDir).mkdirs();\n+        File dir = new File(resultDir);\n+        dir.mkdirs();\n+        out.println(\"  HTML report generated at \" + dir.getAbsolutePath() + File.separator + \"index.html\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/HTMLReportPrinter.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -67,2 +67,0 @@\n-        pw.println(\"------------------------------------------------------------------------------------------------------------------------\");\n-        pw.println();\n@@ -71,2 +69,1 @@\n-                \"INTERESTING tests\",\n-                \"Some interesting behaviors observed. This is for the plain curiosity.\",\n+                \"Interesting tests\",\n@@ -74,1 +71,1 @@\n-                true\n+                verbosity.printAllTests()\n@@ -78,2 +75,1 @@\n-                \"FAILED tests\",\n-                \"Strong asserts were violated. Correct implementations should have no assert failures here.\",\n+                \"Failed tests\",\n@@ -81,1 +77,1 @@\n-                true\n+                verbosity.printAllTests()\n@@ -85,2 +81,1 @@\n-                \"ERROR tests\",\n-                \"Tests break for some reason, other than failing the assert. Correct implementations should have none.\",\n+                \"Error tests\",\n@@ -88,1 +83,1 @@\n-                true\n+                verbosity.printAllTests()\n@@ -93,1 +88,0 @@\n-                \"Tests that do not fall into any of the previous categories.\",\n@@ -97,1 +91,1 @@\n-        pw.println(\"------------------------------------------------------------------------------------------------------------------------\");\n+        pw.println();\n@@ -102,1 +96,0 @@\n-                             String subHeader,\n@@ -106,5 +99,2 @@\n-        pw.println(\"*** \" + header);\n-        pw.println(\"  \" + subHeader);\n-        pw.println();\n-        pw.println(\"  \" + list.stream().filter(predicate).count() + \" matching test results. \" + (!emitDetails ? \" Use -v to print them.\" : \"\"));\n-        pw.println();\n+        final long count = list.stream().filter(predicate).count();\n+        pw.println(\"  \" + header + \": \" + (count > 0 ? count + \" matching test results.\" + (!emitDetails ? \" Use -v to print them.\" : \"\") : \"No matches.\"));\n@@ -113,0 +103,1 @@\n+            pw.println();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/TextReportPrinter.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            return \"unified across all actors\";\n+            return \"unified across all actors\" + System.lineSeparator();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/CompileMode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -397,1 +397,1 @@\n-        return System.getProperty(\"os.name\").contains(\"indows\");\n+        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");\n@@ -401,1 +401,1 @@\n-        return System.getProperty(\"os.name\").contains(\"Linux\");\n+        return System.getProperty(\"os.name\").toLowerCase().contains(\"linux\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/VMSupport.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}