{"files":[{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.high.race.condition;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.III_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t RaceCondition_01_ReadModifyWriteSequence\n+ *\/\n+\n+\/**\n+ * This sample demonstrates you how a read-modify-write sequence can lead to surprising results.\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"150, 100, 150\"}, expect = ACCEPTABLE, desc = \"2: v=200, 2: t2=100, 2: v=t2, 1: v=100, 1: t1=150, 1: v=t1\")\n+@Outcome(id = {\"250, 150, 150\"}, expect = ACCEPTABLE, desc = \"1: v=200, 1: t1=250, 1: v=t1, 2: v=250, 2: t2=150, 2: v=t2\")\n+@Outcome(id = {\"250, 100, 250\"}, expect = ACCEPTABLE_INTERESTING, desc = \"1: v=200, 1: t1=250, 2: v=200, 2: t2=100, 2: v=t2, 1: v=t1\")\n+@Outcome(id = {\"250, 100, 100\"}, expect = ACCEPTABLE_INTERESTING, desc = \"1: v=200, 1: t1=250, 2: v=200, 2: t2=100, 1: v=t1, 2: v=t2\")\n+@State\n+public class RaceCondition_01_ReadModifyWriteSequence {\n+    private volatile int v = 200;\n+\n+    @Actor\n+    public void actor1(III_Result r) {\n+        int t1 = v;\n+        t1 += 50;\n+        v = t1;\n+\n+        r.r1 = t1;\n+    }\n+\n+    @Actor\n+    public void actor2(III_Result r) {\n+        int t2 = v;\n+        t2 -= 100;\n+        v = t2;\n+\n+        r.r2 = t2;\n+    }\n+\n+    @Arbiter\n+    public void arbiter(III_Result r) {\n+        r.r3 = v;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/race\/condition\/RaceCondition_01_ReadModifyWriteSequence.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.high.race.condition;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t RaceCondition_02_CheckThenReactSequence\n+ *\/\n+\n+\/**\n+ * This sample demonstrates you how a check-then-react sequence can lead to surprising results.\n+ *\/\n+@JCStressTest\n+@Outcome(id = {\"true, false\", \"false, true\"}, expect = ACCEPTABLE, desc = \"Only one actor got true for the flag in its if-clause\")\n+@Outcome(id = {\"true, true\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Both actors got true for the flag in their if-clauses\")\n+@State\n+public class RaceCondition_02_CheckThenReactSequence {\n+    private volatile boolean flag = true;\n+\n+    @Actor\n+    public void actor1(ZZ_Result r) {\n+        if (flag) {\n+            flag = false;\n+            r.r1 = true;\n+        } else {\n+            r.r1 = false;\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        if (flag) {\n+            flag = false;\n+            r.r2 = true;\n+        } else {\n+            r.r2 = false;\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/race\/condition\/RaceCondition_02_CheckThenReactSequence.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}