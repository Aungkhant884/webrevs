{"files":[{"patch":"@@ -54,4 +54,9 @@\n-                        if (parseAnnotations(origBytes)) {\n-                            System.out.println(\"Processing \" + rootPath.relativize(path));\n-                            final byte[] newBytes = retransform(origBytes);\n-                            Files.write(path, newBytes);\n+                        try {\n+                            if (parseAnnotations(origBytes)) {\n+                                System.out.println(\"Processing \" + rootPath.relativize(path));\n+                                final byte[] newBytes = retransform(origBytes);\n+                                Files.write(path, newBytes);\n+                            }\n+                        } catch (IllegalArgumentException iae) {\n+                            System.err.println(\"Error processing: \" + rootPath.relativize(path) + \": \");\n+                            iae.printStackTrace();\n@@ -93,1 +98,1 @@\n-            super(Opcodes.ASM6);\n+            super(Opcodes.ASM9);\n@@ -97,1 +102,1 @@\n-            super(Opcodes.ASM6, cw);\n+            super(Opcodes.ASM9, cw);\n@@ -188,1 +193,1 @@\n-            super(Opcodes.ASM6, fieldVisitor);\n+            super(Opcodes.ASM9, fieldVisitor);\n","filename":"jcstress-contended-autoinjector\/src\/main\/java\/org\/openjdk\/jcstress\/ContendedAutoInjectorMain.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -47,0 +47,12 @@\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins<\/groupId>\n+                <artifactId>maven-compiler-plugin<\/artifactId>\n+                <configuration>\n+                    <source>11<\/source>\n+                    <target>11<\/target>\n+                <\/configuration>\n+            <\/plugin>\n+        <\/plugins>\n+    <\/build>\n","filename":"jcstress-samples\/pom.xml","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-\/*\n-    This is our first concurrency test. It is deliberately simplistic to show\n-    testing approaches, introduce JCStress APIs, etc.\n-\n-    Suppose we want to see if the field increment is atomic. We can make test\n-    with two actors, both actors incrementing the field and recording what\n-    value they observed into the result object. As JCStress runs, it will\n-    invoke these methods on the objects holding the field once per each actor\n-    and instance, and record what results are coming from there.\n-\n-    Done enough times, we will get the history of observed results, and that\n-    would tell us something about the concurrent behavior. For example, running\n-    this test would yield:\n-\n-          [OK] o.o.j.t.JCStressSample_01_Simple\n-        (JVM args: [-server])\n-      Observed state   Occurrences   Expectation  Interpretation\n-                1, 1    54,734,140    ACCEPTABLE  Both threads came up with the same value: atomicity failure.\n-                1, 2    47,037,891    ACCEPTABLE  actor1 incremented, then actor2.\n-                2, 1    53,204,629    ACCEPTABLE  actor2 incremented, then actor1.\n-\n-     How to run this test:\n-       $ java -jar jcstress-samples\/target\/jcstress.jar -t JCStress_APISample_01_Simple\n- *\/\n-\n-\/\/ Mark the class as JCStress test.\n-@JCStressTest\n-\n-\/\/ These are the test outcomes.\n-@Outcome(id = \"1, 1\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n-@Outcome(id = \"1, 2\", expect = Expect.ACCEPTABLE, desc = \"actor1 incremented, then actor2.\")\n-@Outcome(id = \"2, 1\", expect = Expect.ACCEPTABLE, desc = \"actor2 incremented, then actor1.\")\n-\n-\/\/ This is a state object\n-@State\n-public class APISample_01_Simple {\n-\n-    int v;\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        r.r1 = ++v; \/\/ record result from actor1 to field r1\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        r.r2 = ++v; \/\/ record result from actor2 to field r2\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/APISample_01_Simple.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-\/*\n-    Another flavor of the same test as JCStress_APISample_01_Simple is using\n-    arbiters. Arbiters run after both actors, and therefore can observe the\n-    final result.\n-\n-    This allows to directly observe the atomicity failure:\n-\n-          [OK] org.openjdk.jcstress.samples.JCStress_APISample_02_Arbiters\n-        (JVM args: [-server])\n-      Observed state   Occurrences              Expectation  Interpretation\n-                   1       940,359   ACCEPTABLE_INTERESTING  One update lost: atomicity failure.\n-                   2   168,950,601               ACCEPTABLE  Actors updated independently.\n-\n-    How to run this test:\n-       $ java -jar jcstress-samples\/target\/jcstress.jar -t JCStress_APISample_02_Arbiters\n- *\/\n-\n-@JCStressTest\n-\n-\/\/ These are the test outcomes.\n-@Outcome(id = \"1\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"One update lost: atomicity failure.\")\n-@Outcome(id = \"2\", expect = Expect.ACCEPTABLE, desc = \"Actors updated independently.\")\n-@State\n-public class APISample_02_Arbiters {\n-\n-    int v;\n-\n-    @Actor\n-    public void actor1() {\n-        v++;\n-    }\n-\n-    @Actor\n-    public void actor2() {\n-        v++;\n-    }\n-\n-    @Arbiter\n-    public void arbiter(I_Result r) {\n-        r.r1 = v;\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/APISample_02_Arbiters.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-\n-\/*\n-    Some concurrency tests are not following the \"run continously\" pattern. One\n-    of interesting test groups is that asserts if the code had terminated after\n-    a signal.\n-\n-    Here, we use a single @Actor that busy-waits on a field, and a @Signal that\n-    sets that field. JCStress would start actor, and then deliver the signal.\n-    If it exits in reasonable time, it will record \"TERMINATED\" result, otherwise\n-    record \"STALE\".\n-\n-    How to run this test:\n-       $ java -jar jcstress-samples\/target\/jcstress.jar -t JCStress_APISample_03_Termination\n- *\/\n-\n-@JCStressTest(Mode.Termination)\n-@Outcome(id = \"TERMINATED\", expect = Expect.ACCEPTABLE, desc = \"Gracefully finished.\")\n-@Outcome(id = \"STALE\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Test hung up.\")\n-@State\n-public class APISample_03_Termination {\n-\n-    int v;\n-\n-    @Actor\n-    public void actor1() {\n-        while (v == 0) {\n-            \/\/ spin\n-        }\n-    }\n-\n-    @Signal\n-    public void signal() {\n-        v = 1;\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/APISample_03_Termination.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-\/*\n-    It is sometimes convenient to put the tests in the same source file for\n-    better comparison. JCStress allows to nest tests like this:\n-\n-    How to run this test:\n-       $ java -jar jcstress-samples\/target\/jcstress.jar -t JCStress_APISample_04_Nesting\n- *\/\n-\n-public class APISample_04_Nesting {\n-\n-    @JCStressTest\n-    @Outcome(id = \"1, 1\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n-    @Outcome(id = \"1, 2\", expect = Expect.ACCEPTABLE, desc = \"actor1 incremented, then actor2.\")\n-    @Outcome(id = \"2, 1\", expect = Expect.ACCEPTABLE, desc = \"actor2 incremented, then actor1.\")\n-    @State\n-    public static class PlainTest {\n-        int v;\n-\n-        @Actor\n-        public void actor1(II_Result r) {\n-            r.r1 = ++v;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            r.r2 = ++v;\n-        }\n-    }\n-\n-    @JCStressTest\n-    @Outcome(id = \"1, 1\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n-    @Outcome(id = \"1, 2\", expect = Expect.ACCEPTABLE, desc = \"actor1 incremented, then actor2.\")\n-    @Outcome(id = \"2, 1\", expect = Expect.ACCEPTABLE, desc = \"actor2 incremented, then actor1.\")\n-    @State\n-    public static class VolatileTest {\n-        volatile int v;\n-\n-        @Actor\n-        public void actor1(II_Result r) {\n-            r.r1 = ++v;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            r.r2 = ++v;\n-        }\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/APISample_04_Nesting.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-\/*\n-   In many cases, tests share the outcomes and other metadata. To common them,\n-   there is a special @JCStressMeta annotation that says to look up the metadata\n-   at another class.\n-\n-   How to run this test:\n-      $ java -jar jcstress-samples\/target\/jcstress.jar -t JCStress_APISample_05_SharedMetadata\n- *\/\n-\n-@Outcome(id = \"1, 1\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n-@Outcome(id = \"1, 2\", expect = Expect.ACCEPTABLE, desc = \"actor1 incremented, then actor2.\")\n-@Outcome(id = \"2, 1\", expect = Expect.ACCEPTABLE, desc = \"actor2 incremented, then actor1.\")\n-public class APISample_05_SharedMetadata {\n-\n-    @JCStressTest\n-    @JCStressMeta(APISample_05_SharedMetadata.class)\n-    @State\n-    public static class PlainTest {\n-        int v;\n-\n-        @Actor\n-        public void actor1(II_Result r) {\n-            r.r1 = ++v;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            r.r2 = ++v;\n-        }\n-    }\n-\n-    @JCStressTest\n-    @JCStressMeta(APISample_05_SharedMetadata.class)\n-    @State\n-    public static class VolatileTest {\n-        volatile int v;\n-\n-        @Actor\n-        public void actor1(II_Result r) {\n-            r.r1 = ++v;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            r.r2 = ++v;\n-        }\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/APISample_05_SharedMetadata.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-\/*\n-    JCStress also allows to put the descriptions and references right at the test.\n-    This helps to identify the goal for the test, as well as the discussions about\n-    the behavior in question.\n-\n-   How to run this test:\n-      $ java -jar jcstress-samples\/target\/jcstress.jar -t JCStress_APISample_06_Descriptions\n- *\/\n-\n-@JCStressTest\n-\n-\/\/ Optional test description\n-@Description(\"Sample Hello World test\")\n-\n-\/\/ Optional references. @Ref is repeatable.\n-@Ref(\"http:\/\/openjdk.java.net\/projects\/code-tools\/jcstress\/\")\n-\n-@Outcome(id = \"1, 1\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n-@Outcome(id = \"1, 2\", expect = Expect.ACCEPTABLE, desc = \"actor1 incremented, then actor2.\")\n-@Outcome(id = \"2, 1\", expect = Expect.ACCEPTABLE, desc = \"actor2 incremented, then actor1.\")\n-@State\n-public class APISample_06_Descriptions {\n-\n-    int v;\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        r.r1 = ++v;\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        r.r2 = ++v;\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/APISample_06_Descriptions.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import static org.openjdk.jcstress.annotations.Expect.*;\n-\n-public class ConcurrencySample_01_OperationAtomicity {\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        This test demonstrates the operation atomicity tests. First, the naive\n-        test that tests if plain increment is indivisible or not. It is not, as\n-        jcstress would tell on just about any platform.\n-\n-              [OK] org.openjdk.jcstress.samples.ConcurrencySample_01_OperationAtomicity.PlainIncrement\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                       1     4,090,172   ACCEPTABLE_INTERESTING  One update lost.\n-                       2   200,723,108               ACCEPTABLE  Both updates.\n-    *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"1\", expect = ACCEPTABLE_INTERESTING, desc = \"One update lost.\")\n-    @Outcome(id = \"2\", expect = ACCEPTABLE,  desc = \"Both updates.\")\n-    @State\n-    public static class PlainIncrement {\n-        int v;\n-\n-        @Actor\n-        public void actor1() {\n-            v++;\n-        }\n-\n-        @Actor\n-        public void actor2() {\n-            v++;\n-        }\n-\n-        @Arbiter\n-        public void arbiter(I_Result r) {\n-            r.r1 = v;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-         Volatile increment is not atomic either. The mere modifier cannot resolve\n-         the problem with having distinct read and write operations, that are not\n-         atomic together.\n-\n-              [OK] org.openjdk.jcstress.samples.ConcurrencySample_01_OperationAtomicity.VolatileIncrement\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                       1        25,641   ACCEPTABLE_INTERESTING  One update lost.\n-                       2   116,446,539               ACCEPTABLE  Both updates.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"1\", expect = ACCEPTABLE_INTERESTING, desc = \"One update lost.\")\n-    @Outcome(id = \"2\", expect = ACCEPTABLE, desc = \"Both updates.\")\n-    @State\n-    public static class VolatileIncrement {\n-        volatile int v;\n-\n-        @Actor\n-        public void actor1() {\n-            v++;\n-        }\n-\n-        @Actor\n-        public void actor2() {\n-            v++;\n-        }\n-\n-        @Arbiter\n-        public void arbiter(I_Result r) {\n-            r.r1 = v;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        AtomicInteger.incrementAndGet() is atomic.\n-\n-              [OK] org.openjdk.jcstress.samples.ConcurrencySample_01_OperationAtomicity.AtomicIncrement\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                       1             0     FORBIDDEN  One update lost.\n-                       2   168,640,200    ACCEPTABLE  Both updates.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"1\", expect = FORBIDDEN,  desc = \"One update lost.\")\n-    @Outcome(id = \"2\", expect = ACCEPTABLE, desc = \"Both updates.\")\n-    @State\n-    public static class AtomicIncrement {\n-        AtomicInteger ai = new AtomicInteger();\n-\n-        @Actor\n-        public void actor1() {\n-            ai.incrementAndGet();\n-        }\n-\n-        @Actor\n-        public void actor2() {\n-            ai.incrementAndGet();\n-        }\n-\n-        @Arbiter\n-        public void arbiter(I_Result r) {\n-            r.r1 = ai.get();\n-        }\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/ConcurrencySample_01_OperationAtomicity.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -1,204 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.LL_Result;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-import static org.openjdk.jcstress.annotations.Expect.*;\n-\n-public class ConcurrencySample_02_ConcurrentHashMap {\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        This test demonstrates the operation atomicity tests, taking\n-        ConcurrentHashMap-backed Multimap as the example.\n-    *\/\n-\n-    public static class Multimap {\n-        Map<String, List<String>> map = new ConcurrentHashMap<>();\n-\n-        \/*\n-            Contains a nasty race on putting the list into the map.\n-         *\/\n-        void addBroken(String key, String val) {\n-            List<String> list = map.get(key);\n-            if (list == null) {\n-                list = Collections.synchronizedList(new ArrayList<>());\n-                map.put(key, list);\n-            }\n-            list.add(val);\n-        }\n-\n-        \/*\n-            Solves the race with putIfAbsent.\n-         *\/\n-        void addCorrect(String key, String val) {\n-            List<String> list = map.get(key);\n-            if (list == null) {\n-                list = Collections.synchronizedList(new ArrayList<>());\n-                List<String> exist = map.putIfAbsent(key, list);\n-                if (exist != null) {\n-                    list = exist;\n-                }\n-            }\n-            list.add(val);\n-        }\n-\n-        \/*\n-            Solves the race with computeIfAbsent.\n-         *\/\n-        void addCorrect8(String key, String val) {\n-            List<String> list = map.computeIfAbsent(key,\n-                    k -> Collections.synchronizedList(new ArrayList<>()));\n-            list.add(val);\n-        }\n-\n-        String poll(String key, int idx) {\n-            List<String> list = map.get(key);\n-            return (list.size() > idx) ? list.get(idx) : null;\n-        }\n-    }\n-\n-    \/*\n-       ----------------------------------------------------------------------------------------------------------\n-\n-        Broken Multimap is broken, it contains a race.\n-\n-              [OK] org.openjdk.jcstress.samples.ConcurrencySample_02_ConcurrentHashMap.BrokenMultimap\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                Bar, Baz     5,635,469               ACCEPTABLE  Both updates.\n-               Bar, null     1,691,183   ACCEPTABLE_INTERESTING  One update lost.\n-                Baz, Bar     5,821,971               ACCEPTABLE  Both updates.\n-               Baz, null     1,690,007   ACCEPTABLE_INTERESTING  One update lost.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = { \"Bar, null\", \"Baz, null\" }, expect = ACCEPTABLE_INTERESTING, desc = \"One update lost.\")\n-    @Outcome(id = { \"Bar, Baz\", \"Baz, Bar\"},    expect = ACCEPTABLE, desc = \"Both updates.\")\n-    @State\n-    public static class BrokenMultimap extends Multimap {\n-        @Actor\n-        public void actor1() {\n-            addBroken(\"Foo\", \"Bar\");\n-        }\n-\n-        @Actor\n-        public void actor2() {\n-            addBroken(\"Foo\", \"Baz\");\n-        }\n-\n-        @Arbiter\n-        public void arbiter(LL_Result s) {\n-            s.r1 = poll(\"Foo\", 0);\n-            s.r2 = poll(\"Foo\", 1);\n-        }\n-    }\n-\n-    \/*\n-       ----------------------------------------------------------------------------------------------------------\n-\n-        putIfAbsent-style multimap does atomic updates.\n-\n-              [OK] org.openjdk.jcstress.samples.ConcurrencySample_02_ConcurrentHashMap.CorrectMultimap\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                Bar, Baz     6,948,547    ACCEPTABLE  Both updates.\n-               Bar, null             0     FORBIDDEN  One update lost.\n-                Baz, Bar     7,360,653    ACCEPTABLE  Both updates.\n-               Baz, null             0     FORBIDDEN  One update lost.\n-     *\/\n-\n-\n-    @JCStressTest\n-    @Outcome(id = { \"Bar, null\", \"Baz, null\" }, expect = FORBIDDEN, desc = \"One update lost.\")\n-    @Outcome(id = { \"Bar, Baz\", \"Baz, Bar\"},    expect = ACCEPTABLE, desc = \"Both updates.\")\n-    @State\n-    public static class CorrectMultimap extends Multimap {\n-        @Actor\n-        public void actor1() {\n-            addCorrect(\"Foo\", \"Bar\");\n-        }\n-\n-        @Actor\n-        public void actor2() {\n-            addCorrect(\"Foo\", \"Baz\");\n-        }\n-\n-        @Arbiter\n-        public void arbiter(LL_Result s) {\n-            s.r1 = poll(\"Foo\", 0);\n-            s.r2 = poll(\"Foo\", 1);\n-        }\n-    }\n-\n-\n-\n-\n-    \/*\n-       ----------------------------------------------------------------------------------------------------------\n-\n-        computeIfAbsent-style multimap does atomic updates.\n-\n-              [OK] org.openjdk.jcstress.samples.ConcurrencySample_02_ConcurrentHashMap.CorrectJDK8Multimap\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                Bar, Baz     6,250,933    ACCEPTABLE  Both updates.\n-               Bar, null             0     FORBIDDEN  One update lost.\n-                Baz, Bar     6,412,677    ACCEPTABLE  Both updates.\n-               Baz, null             0     FORBIDDEN  One update lost.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = { \"Bar, null\", \"Baz, null\" }, expect = FORBIDDEN, desc = \"One update lost.\")\n-    @Outcome(id = { \"Bar, Baz\", \"Baz, Bar\"},    expect = ACCEPTABLE, desc = \"Both updates.\")\n-    @State\n-    public static class CorrectJDK8Multimap extends Multimap {\n-        @Actor\n-        public void actor1() {\n-            addCorrect8(\"Foo\", \"Bar\");\n-        }\n-\n-        @Actor\n-        public void actor2() {\n-            addCorrect8(\"Foo\", \"Baz\");\n-        }\n-\n-        @Arbiter\n-        public void arbiter(LL_Result s) {\n-            s.r1 = poll(\"Foo\", 0);\n-            s.r2 = poll(\"Foo\", 1);\n-        }\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/ConcurrencySample_02_ConcurrentHashMap.java","additions":0,"deletions":204,"binary":false,"changes":204,"status":"deleted"},{"patch":"@@ -1,319 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-import org.openjdk.jcstress.infra.results.J_Result;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteBuffer;\n-import java.util.concurrent.ThreadLocalRandom;\n-\n-import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n-\n-public class JMMSample_01_AccessAtomicity {\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        This is our first case: access atomicity. Most basic types come with an\n-        intuitive property: the reads and the writes of these basic types happen\n-        in full, even under races:\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_01_AccessAtomicity.Integers\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                      -1   221,268,498    ACCEPTABLE  Seeing the full value.\n-                       0    17,764,332    ACCEPTABLE  Seeing the default value: writer had not acted yet.\n-\n-    *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0\",  expect = Expect.ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n-    @Outcome(id = \"-1\", expect = Expect.ACCEPTABLE, desc = \"Seeing the full value.\")\n-    @Outcome(expect = Expect.FORBIDDEN, desc = \"Other cases are forbidden.\")\n-    @State\n-    public static class Integers {\n-        int v;\n-\n-        @Actor\n-        public void writer() {\n-            v = 0xFFFFFFFF;\n-        }\n-\n-        @Actor\n-        public void reader(I_Result r) {\n-            r.r1 = v;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        There are a few interesting exceptions codified in Java Language Specification,\n-        under 17.7 \"Non-Atomic Treatment of double and long\". It says that longs and\n-        doubles could be treated non-atomically.\n-\n-        NOTE: This test would yield interesting results on 32-bit VMs.\n-\n-               [OK] org.openjdk.jcstress.samples.JMMSample_01_AccessAtomicity.Longs\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                      -1   181,716,629               ACCEPTABLE  Seeing the full value.\n-             -4294967296        40,481   ACCEPTABLE_INTERESTING  Other cases are violating access atomicity, but allowed u...\n-                       0    10,439,305               ACCEPTABLE  Seeing the default value: writer had not acted yet.\n-              4294967295         2,545   ACCEPTABLE_INTERESTING  Other cases are violating access atomicity, but allowed u...\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0\",  expect = Expect.ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n-    @Outcome(id = \"-1\", expect = Expect.ACCEPTABLE, desc = \"Seeing the full value.\")\n-    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Other cases are violating access atomicity, but allowed under JLS.\")\n-    @Ref(\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/jls-17.html#jls-17.7\")\n-    @State\n-    public static class Longs {\n-        long v;\n-\n-        @Actor\n-        public void writer() {\n-            v = 0xFFFFFFFF_FFFFFFFFL;\n-        }\n-\n-        @Actor\n-        public void reader(J_Result r) {\n-            r.r1 = v;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Recovering the access atomicity is possible with making the field \"volatile\":\n-\n-               [OK] org.openjdk.jcstress.samples.JMMSample_01_AccessAtomicity.VolatileLongs\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                      -1    25,920,268    ACCEPTABLE  Seeing the full value.\n-                       0   101,853,902    ACCEPTABLE  Seeing the default value: writer had not acted yet.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0\",  expect = Expect.ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n-    @Outcome(id = \"-1\", expect = Expect.ACCEPTABLE, desc = \"Seeing the full value.\")\n-    @Outcome(expect = Expect.FORBIDDEN, desc = \"Other cases are forbidden.\")\n-    @State\n-    public static class VolatileLongs {\n-        volatile long v;\n-\n-        @Actor\n-        public void writer() {\n-            v = 0xFFFFFFFF_FFFFFFFFL;\n-        }\n-\n-        @Actor\n-        public void reader(J_Result r) {\n-            r.r1 = v;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Since Java 9, VarHandles in \"opaque\" access mode also require access atomicity.\n-        (The same applies for \"acquire\/release\", and \"volatile\" access modes too!)\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_01_AccessAtomicity.OpaqueLongs\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                      -1   161,358,765    ACCEPTABLE  Seeing the full value.\n-                       0     5,778,795    ACCEPTABLE  Seeing the default value: writer had not acted yet.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0\",  expect = Expect.ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n-    @Outcome(id = \"-1\", expect = Expect.ACCEPTABLE, desc = \"Seeing the full value.\")\n-    @Outcome(expect = Expect.FORBIDDEN, desc = \"Other cases are forbidden.\")\n-    @State\n-    public static class OpaqueLongs {\n-\n-        static final VarHandle VH;\n-\n-        static {\n-            try {\n-                VH = MethodHandles.lookup().findVarHandle(OpaqueLongs.class, \"v\", long.class);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        long v;\n-\n-        @Actor\n-        public void writer() {\n-            VH.setOpaque(this, 0xFFFFFFFF_FFFFFFFFL);\n-        }\n-\n-        @Actor\n-        public void reader(J_Result r) {\n-            r.r1 = (long) VH.getOpaque(this);\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        While the spec requirements for field and array element accesses are\n-        strict, the implementations of concrete classes may have a relaxed\n-        semantics. Take ByteBuffer where we can read the 4-byte integer from\n-        an arbitrary offset.\n-\n-        Older ByteBuffer implementations accessed one byte at a time, and that\n-        required merging\/splitting anything larger than a byte into the individual\n-        operations. Of course, there is no access atomicity there by construction.\n-        In newer ByteBuffer implementations, the _aligned_ accesses are done with\n-        larger instructions that gives back atomicity. Misaligned accesses would\n-        still have to do several narrower accesses on machines that don't support\n-        misalignments.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_01_AccessAtomicity.ByteBuffers\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                      -1    32,580,349               ACCEPTABLE  Seeing the full value.\n-               -16777216         2,791   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                    -256         2,739   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                  -65536         2,848   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                       0     5,961,926               ACCEPTABLE  Seeing the default value: writer had not acted yet.\n-                16777215         1,467   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                     255         1,502   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                   65535         1,498   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-    *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0\",  expect = Expect.ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n-    @Outcome(id = \"-1\", expect = Expect.ACCEPTABLE, desc = \"Seeing the full value.\")\n-    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Other cases are allowed, because reads\/writes are not atomic.\")\n-    @State\n-    public static class ByteBuffers {\n-        public static final int SIZE = 256;\n-\n-        ByteBuffer bb = ByteBuffer.allocate(SIZE);\n-        int idx = ThreadLocalRandom.current().nextInt(SIZE - 4);\n-\n-        @Actor\n-        public void writer() {\n-            bb.putInt(idx, 0xFFFFFFFF);\n-        }\n-\n-        @Actor\n-        public void reader(I_Result r) {\n-            r.r1 = bb.getInt(idx);\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        However, even if the misaligned accesses is supported by hardware, it would never\n-        be guaranteed atomic. For example, reading the value that spans two cache-lines would\n-        not be atomic, even if we manage to issue a single instruction for access.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_01_AccessAtomicity.UnsafeCrossCacheLine\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                      -1    40,495,875               ACCEPTABLE  Seeing the full value.\n-               -16777216           760   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                    -256           726   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                  -65536           789   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                       0     2,136,183               ACCEPTABLE  Seeing the default value: writer had not acted yet.\n-                16777215           539   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                     255           554   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-                   65535           574   ACCEPTABLE_INTERESTING  Other cases are allowed, because reads\/writes are not ato...\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0\",  expect = Expect.ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n-    @Outcome(id = \"-1\", expect = Expect.ACCEPTABLE, desc = \"Seeing the full value.\")\n-    @Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Other cases are allowed, because reads\/writes are not atomic.\")\n-    @State\n-    public static class UnsafeCrossCacheLine {\n-\n-        public static final int SIZE = 256;\n-        public static final long ARRAY_BASE_OFFSET = UNSAFE.arrayBaseOffset(byte[].class);\n-        public static final long ARRAY_BASE_SCALE = UNSAFE.arrayIndexScale(byte[].class);\n-\n-        byte[] ss = new byte[SIZE];\n-        long off = ARRAY_BASE_OFFSET + ARRAY_BASE_SCALE * ThreadLocalRandom.current().nextInt(SIZE - 4);\n-\n-        @Actor\n-        public void writer() {\n-            UNSAFE.putInt(ss, off, 0xFFFFFFFF);\n-        }\n-\n-        @Actor\n-        public void reader(I_Result r) {\n-            r.r1 = UNSAFE.getInt(ss, off);\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Conclusion: for fields and array elements access atomicity is guaranteed, except\n-        for non-volatile longs and doubles. Regaining the atomicity is possible with anything\n-        stronger than a plain read\/write.\n-\n-        Are reads\/writes atomic?\n-\n-                        boolean,    byte,   char,   short,     int,    float,  double,  long,   Object\n-\n-          plain:            yes      yes     yes      yes      yes       yes       NO     NO      yes\n-          volatile:         yes      yes     yes      yes      yes       yes      YES    YES      yes\n-\n-          VH (plain):       yes      yes     yes      yes      yes       yes       NO     NO      yes\n-          VH (opaque):      yes      yes     yes      yes      yes       yes      YES    YES      yes\n-          VH (acq\/rel):     yes      yes     yes      yes      yes       yes      YES    YES      yes\n-          VH (volatile):    yes      yes     yes      yes      yes       yes      YES    YES      yes\n-\n-        Access atomicity for unnatural accesses is not guaranteed. Alignment issues,\n-        implementation quirks, etc. may deconstruct the access atomicity. The case of single\n-        aligned reads\/writes is similar to the usual language guarantees.\n-\n-        Are reads\/writes atomic?\n-\n-                                                   access type:\n-                                    multiple,   single misaligned,  single aligned\n-\n-          plain:                           no                  no,          YES\/NO (yes, except for long\/double)\n-          volatile:                        no                  no,             YES\n-          VH (plain):                      no,                 no,          YES\/NO (yes, except for long\/double)\n-          VH (opaque):                     no,                 no,             YES\n-          VH (acq\/rel):                    no,                 no,             YES\n-          VH (volatile):                   no,                 no,             YES\n-\n-     *\/\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/JMMSample_01_AccessAtomicity.java","additions":0,"deletions":319,"binary":false,"changes":319,"status":"deleted"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.ZZ_Result;\n-\n-import java.util.BitSet;\n-\n-public class JMMSample_02_WordTearing {\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Java Memory Model prohibits word tearing. That is, it mandates treating\n-        every field and array element as distinct, and the operations for one\n-        element should not disturb others.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_02_WordTearing.JavaArrays\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-              true, true   228,447,200    ACCEPTABLE  Seeing both updates intact.\n-    *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"true, true\", expect = Expect.ACCEPTABLE, desc = \"Seeing both updates intact.\")\n-    @Outcome(expect = Expect.FORBIDDEN, desc = \"Other cases are forbidden.\")\n-    @State\n-    public static class JavaArrays {\n-        boolean[] bs = new boolean[2];\n-\n-        @Actor\n-        public void writer1() {\n-            bs[0] = true;\n-        }\n-\n-        @Actor\n-        public void writer2() {\n-            bs[1] = true;\n-        }\n-\n-        @Arbiter\n-        public void arbiter(ZZ_Result r) {\n-            r.r1 = bs[0];\n-            r.r2 = bs[1];\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        However, while that requirement is enforced for fields and array elements, the\n-        implementations may still violate this requirement, if, say, they pack elements\n-        densely, and read\/write adjacent elements routinely.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_02_WordTearing.BitSets\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-             false, true     1,107,454   ACCEPTABLE_INTERESTING  Destroyed one update.\n-             true, false     1,297,199   ACCEPTABLE_INTERESTING  Destroyed one update.\n-              true, true   147,209,607               ACCEPTABLE  Seeing both updates intact.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"true, true\",  expect = Expect.ACCEPTABLE, desc = \"Seeing both updates intact.\")\n-    @Outcome(id = \"false, true\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Destroyed one update.\")\n-    @Outcome(id = \"true, false\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Destroyed one update.\")\n-    @State\n-    public static class BitSets {\n-\n-        BitSet bs = new BitSet();\n-\n-        @Actor\n-        public void writer1() {\n-            bs.set(0);\n-        }\n-\n-        @Actor\n-        public void writer2() {\n-            bs.set(1);\n-        }\n-\n-        @Arbiter\n-        public void arbiter(ZZ_Result r) {\n-            r.r1 = bs.get(0);\n-            r.r2 = bs.get(1);\n-        }\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/JMMSample_02_WordTearing.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -1,223 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n-import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n-\n-public class JMMSample_03_Coherence {\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Yet another subtle and intuitive property comes from the naive understanding\n-        of how programs work. Under Java Memory Model, in absence of synchronization,\n-        the order of independent reads is undefined. That includes reads of the *same*\n-        variable!\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_03_Coherence.SameRead\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                    0, 0     4,593,916               ACCEPTABLE  Doing both reads early.\n-                    0, 1         2,507               ACCEPTABLE  Doing first read early, not surprising.\n-                    1, 0        48,132   ACCEPTABLE_INTERESTING  First read seen racy value early, and the second one did ...\n-                    1, 1    88,146,175               ACCEPTABLE  Doing both reads late.\n-    *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n-    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n-    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Doing first read early, not surprising.\")\n-    @Outcome(id = \"1, 0\", expect = ACCEPTABLE_INTERESTING, desc = \"First read seen racy value early, and the second one did not.\")\n-    @State\n-    public static class SameRead {\n-\n-        private final Holder h1 = new Holder();\n-        private final Holder h2 = h1;\n-\n-        private static class Holder {\n-            int a;\n-            int trap;\n-        }\n-\n-        @Actor\n-        public void actor1() {\n-            h1.a = 1;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            Holder h1 = this.h1;\n-            Holder h2 = this.h2;\n-\n-            \/\/ Spam null-pointer check folding: try to step on NPEs early.\n-            \/\/ Doing this early frees compiler from moving h1.a and h2.a loads\n-            \/\/ around, because it would not have to maintain exception order anymore.\n-            h1.trap = 0;\n-            h2.trap = 0;\n-\n-            \/\/ Spam alias analysis: the code effectively reads the same field twice,\n-            \/\/ but compiler does not know (h1 == h2) (i.e. does not check it, as\n-            \/\/ this is not a profitable opt for real code), so it issues two independent\n-            \/\/ loads.\n-            r.r1 = h1.a;\n-            r.r2 = h2.a;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        The stronger property -- coherence -- mandates that the writes to the same\n-        variable to be observed in a total order (that implies that _observers_ are\n-        also ordered). Java \"volatile\" assumes this property.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_03_Coherence.SameVolatileRead\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                    0, 0    66,401,704    ACCEPTABLE  Doing both reads early.\n-                    0, 1       102,587    ACCEPTABLE  Doing first read early, not surprising.\n-                    1, 0             0     FORBIDDEN  Violates coherence.\n-                    1, 1    15,507,759    ACCEPTABLE  Doing both reads late.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n-    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n-    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Doing first read early, not surprising.\")\n-    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Violates coherence.\")\n-    @State\n-    public static class SameVolatileRead {\n-\n-        private final Holder h1 = new Holder();\n-        private final Holder h2 = h1;\n-\n-        private static class Holder {\n-            volatile int a;\n-            int trap;\n-        }\n-\n-        @Actor\n-        public void actor1() {\n-            h1.a = 1;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            Holder h1 = this.h1;\n-            Holder h2 = this.h2;\n-\n-            h1.trap = 0;\n-            h2.trap = 0;\n-\n-            r.r1 = h1.a;\n-            r.r2 = h2.a;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        VarHandles \"opaque\" mode also provide coherency.\n-\n-               [OK] org.openjdk.jcstress.samples.JMMSample_03_Coherence.SameOpaqueRead\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                    0, 0     5,857,995    ACCEPTABLE  Doing both reads early.\n-                    0, 1        55,082    ACCEPTABLE  Doing first read early, not surprising.\n-                    1, 0             0     FORBIDDEN  Violates coherence.\n-                    1, 1   114,114,673    ACCEPTABLE  Doing both reads late.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n-    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n-    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Doing first read early, not surprising.\")\n-    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Violates coherence.\")\n-    @State\n-    public static class SameOpaqueRead {\n-\n-        static final VarHandle VH;\n-\n-        static {\n-            try {\n-                VH = MethodHandles.lookup().findVarHandle(Holder.class, \"a\", int.class);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        private final Holder h1 = new Holder();\n-        private final Holder h2 = h1;\n-\n-        private static class Holder {\n-            int a;\n-            int trap;\n-        }\n-\n-        @Actor\n-        public void actor1() {\n-            VH.setOpaque(h1, 1);\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            Holder h1 = this.h1;\n-            Holder h2 = this.h2;\n-\n-            h1.trap = 0;\n-            h2.trap = 0;\n-\n-            r.r1 = (int) VH.getOpaque(h1);\n-            r.r2 = (int) VH.getOpaque(h2);\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Conclusion: coherency is something that is assumed intuitively. However, under the\n-        data race (= in the absence of synchronization) the absence of coherence for plain\n-        accesses may lead to surprising results.\n-\n-        Are reads\/writes coherent?\n-\n-          plain:                           no\n-          volatile:                       YES\n-          VH (plain):                      no\n-          VH (opaque):                    YES\n-          VH (acq\/rel):                   YES\n-          VH (volatile):                  YES\n-     *\/\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/JMMSample_03_Coherence.java","additions":0,"deletions":223,"binary":false,"changes":223,"status":"deleted"},{"patch":"@@ -1,234 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-\n-import static org.openjdk.jcstress.annotations.Expect.*;\n-\n-public class JMMSample_04_PartialOrder {\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        The next property comes in relation to inter-thread semantics. In JMM,\n-        happens-before mandates what results are plausible and what are not, when\n-        non-synchronized reads are involved. That order is partial, so there are\n-        pairs of reads\/writes we can tell nothing about order-wise.\n-\n-        For example, in the case of two non-volatile variables, JMM allows observing\n-        \"1, 0\"!\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_04_PartialOrder.PlainReads\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                    0, 0     3,579,845               ACCEPTABLE  Doing both reads early.\n-                    0, 1        31,148               ACCEPTABLE  Caught in the middle: $x is visible, $y is not.\n-                    1, 0        23,841   ACCEPTABLE_INTERESTING  Seeing $y, but not $x!\n-                    1, 1   114,662,576               ACCEPTABLE  Doing both reads late.\n-    *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n-    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n-    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Caught in the middle: $x is visible, $y is not.\")\n-    @Outcome(id = \"1, 0\", expect = ACCEPTABLE_INTERESTING, desc = \"Seeing $y, but not $x!\")\n-    @State\n-    public static class PlainReads {\n-        int x;\n-        int y;\n-\n-        @Actor\n-        public void actor1() {\n-            x = 1;\n-            y = 1;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            r.r1 = y;\n-            r.r2 = x;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        The easiest way to solve this is to turn $v into volatile variable. In JMM,\n-        that would mean that the only execution which can justify (1, 0) is invalid:\n-        it has broken happens-before consistency. E.g. in the execution\n-\n-          write(x, 1) --hb--> write(y, 1) --hb--> read(y):1 --hb--> read(x):1\n-\n-        ...read(x) should have seen \"1\", not \"0\".\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_04_PartialOrder.VolatileGuard\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                    0, 0    99,074,452    ACCEPTABLE  Doing both reads early.\n-                    0, 1     2,309,155    ACCEPTABLE  Caught in the middle: $x is visible, $y is not.\n-                    1, 0             0     FORBIDDEN  Seeing $y, but not $x!\n-                    1, 1    43,441,703    ACCEPTABLE  Doing both reads late.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n-    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n-    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Caught in the middle: $x is visible, $y is not.\")\n-    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Seeing $y, but not $x!\")\n-    @State\n-    public static class VolatileGuard {\n-\n-        int x;\n-        volatile int y;\n-\n-        @Actor\n-        public void actor1() {\n-            x = 1;\n-            y = 1;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            r.r1 = y;\n-            r.r2 = x;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        VarHandles acquire and release modes can be used to achieve the same effect, but\n-        anything weaker is not guaranteed to work.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_04_PartialOrder.AcquireReleaseGuard\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                    0, 0     4,724,357    ACCEPTABLE  Doing both reads early.\n-                    0, 1       292,421    ACCEPTABLE  Caught in the middle: $x is visible, $y is not.\n-                    1, 0             0     FORBIDDEN  Seeing $y, but not $x!\n-                    1, 1   144,332,652    ACCEPTABLE  Doing both reads late.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n-    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n-    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Caught in the middle: $x is visible, $y is not.\")\n-    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Seeing $y, but not $x!\")\n-    @State\n-    public static class AcquireReleaseGuard {\n-        static final VarHandle VH;\n-\n-        static {\n-            try {\n-                VH = MethodHandles.lookup().findVarHandle(AcquireReleaseGuard.class, \"y\", int.class);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        int x;\n-        int y;\n-\n-        @Actor\n-        public void actor1() {\n-            x = 1;\n-            VH.setRelease(this, 1);\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            r.r1 = (int) VH.getAcquire(this);\n-            r.r2 = x;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Of course, the same thing is achievable with locks, except that (0, 1) is forbidden due to atomicity\n-        of the entire locked section.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_04_PartialOrder.LockGuard\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                    0, 0    29,017,795    ACCEPTABLE  Doing both reads early.\n-                    0, 1             0     FORBIDDEN  Caught in the middle: $x is visible, $y is not.\n-                    1, 0             0     FORBIDDEN  Seeing $y, but not $x!\n-                    1, 1    31,223,995    ACCEPTABLE  Doing both reads late.\n-\n-     *\/\n-    @JCStressTest\n-    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n-    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n-    @Outcome(id = \"0, 1\", expect = FORBIDDEN, desc = \"Caught in the middle: $x is visible, $y is not.\")\n-    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Seeing $y, but not $x!\")\n-    @State\n-    public static class LockGuard {\n-\n-        int x;\n-        int y;\n-\n-        @Actor\n-        public void actor1() {\n-            synchronized (this) {\n-                x = 1;\n-                y = 1;\n-            }\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            synchronized (this) {\n-                r.r1 = y;\n-                r.r2 = x;\n-            }\n-        }\n-    }\n-\n-    \/*\n-       ----------------------------------------------------------------------------------------------------------\n-\n-        Conclusion: the minimal inter-thread semantics (happens-before) is guaranteed for acquire\/releases and\n-        volatiles. Anything weaker does not guarantee this effect\n-\n-        Do inter-thread reads\/writes form partial order?\n-\n-          plain:                           no\n-          volatile:                       yes\n-          VH (plain):                      no\n-          VH (opaque):                     no\n-          VH (acq\/rel):                   yes\n-          VH (volatile):                  yes\n-     *\/\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/JMMSample_04_PartialOrder.java","additions":0,"deletions":234,"binary":false,"changes":234,"status":"deleted"},{"patch":"@@ -1,183 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-\n-import static org.openjdk.jcstress.annotations.Expect.*;\n-\n-public class JMMSample_05_TotalOrder {\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Another property comes for the inter-thread semantics deals not with\n-        partial, but total order. In JMM, synchronization order mandates that\n-        special \"synchronization\" actions always form a total order, consistent\n-        with program order.\n-\n-        The most famous example that needs total order of operation is Dekker\n-        idiom, the building block of Dekker lock.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_05_TotalOrder.PlainDekker\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                    0, 0    12,006,499   ACCEPTABLE_INTERESTING  Violates sequential consistency\n-                    0, 1    53,849,842               ACCEPTABLE  Trivial under sequential consistency\n-                    1, 0    39,405,818               ACCEPTABLE  Trivial under sequential consistency\n-                    1, 1            21               ACCEPTABLE  Trivial under sequential consistency\n-    *\/\n-\n-    @JCStressTest\n-    @Outcome(id = {\"0, 1\", \"1, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Trivial under sequential consistency\")\n-    @Outcome(id = \"0, 0\",                   expect = ACCEPTABLE_INTERESTING,  desc = \"Violates sequential consistency\")\n-    @State\n-    public static class PlainDekker {\n-        int x;\n-        int y;\n-\n-        @Actor\n-        public void actor1(II_Result r) {\n-            x = 1;\n-            r.r1 = y;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            y = 1;\n-            r.r2 = x;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Adding volatile to both $x and $y bring them together into synchronization order,\n-        and thus require the results to be consistent with the case when reads\/writes\n-        form a total order.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_05_TotalOrder.VolatileDekker\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                    0, 0             0     FORBIDDEN  Violates sequential consistency\n-                    0, 1    52,228,833    ACCEPTABLE  Trivial under sequential consistency\n-                    1, 0    60,725,076    ACCEPTABLE  Trivial under sequential consistency\n-                    1, 1       313,541    ACCEPTABLE  Trivial under sequential consistency\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = {\"0, 1\", \"1, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Trivial under sequential consistency\")\n-    @Outcome(id = \"0, 0\",                   expect = FORBIDDEN,  desc = \"Violates sequential consistency\")\n-    @State\n-    public static class VolatileDekker {\n-        volatile int x;\n-        volatile int y;\n-\n-        @Actor\n-        public void actor1(II_Result r) {\n-            x = 1;\n-            r.r1 = y;\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            y = 1;\n-            r.r2 = x;\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        VarHandles acquire and release modes are too weak to achieve the required effect.\n-        VarHandles opaque mode is also too weak.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_05_TotalOrder.AcqRelDekker\n-            (JVM args: [-server])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                    0, 0    13,708,261   ACCEPTABLE_INTERESTING  Violates sequential consistency\n-                    0, 1    36,033,448               ACCEPTABLE  Trivial under sequential consistency\n-                    1, 0    27,158,587               ACCEPTABLE  Trivial under sequential consistency\n-                    1, 1        70,204               ACCEPTABLE  Trivial under sequential consistency\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = {\"0, 1\", \"1, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Trivial under sequential consistency\")\n-    @Outcome(id = \"0, 0\",                   expect = ACCEPTABLE_INTERESTING,  desc = \"Violates sequential consistency\")\n-    @State\n-    public static class AcqRelDekker {\n-        static final VarHandle VH_X;\n-        static final VarHandle VH_Y;\n-\n-        static {\n-            try {\n-                VH_X = MethodHandles.lookup().findVarHandle(AcqRelDekker.class, \"x\", int.class);\n-                VH_Y = MethodHandles.lookup().findVarHandle(AcqRelDekker.class, \"y\", int.class);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        int x;\n-        int y;\n-\n-        @Actor\n-        public void actor1(II_Result r) {\n-            VH_X.setRelease(this, 1);\n-            r.r1 = (int) VH_Y.getAcquire(this);\n-        }\n-\n-        @Actor\n-        public void actor2(II_Result r) {\n-            VH_Y.setRelease(this, 1);\n-            r.r2 = (int) VH_X.getAcquire(this);\n-        }\n-    }\n-\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Conclusion: total order is only available for volatiles. Anything else is weaker and does not\n-        give totality.\n-\n-        Do inter-thread reads\/writes form total order consistent with program order?\n-\n-          plain:                           no\n-          volatile:                       yes\n-          VH (plain):                      no\n-          VH (opaque):                     no\n-          VH (acq\/rel):                    no\n-          VH (volatile):                  yes\n-     *\/\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/JMMSample_05_TotalOrder.java","additions":0,"deletions":183,"binary":false,"changes":183,"status":"deleted"},{"patch":"@@ -1,153 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.I_Result;\n-\n-import static org.openjdk.jcstress.annotations.Expect.*;\n-\n-public class JMMSample_06_Finals {\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Finals are another aspect of Java Memory Model. They allow surviving the publication\n-        via the race. In other words, they provide some basic inter-thread semantics, even in\n-        the absence of proper synchronization.\n-\n-              [OK] org.openjdk.jcstress.samples.JMMSample_06_Finals.PlainInit\n-            (JVM args: [-server, -XX:+UnlockDiagnosticVMOptions, -XX:+StressLCM, -XX:+StressGCM])\n-          Observed state   Occurrences              Expectation  Interpretation\n-                      -1    82,909,900               ACCEPTABLE  Object is not seen yet.\n-                       0             0   ACCEPTABLE_INTERESTING  Seeing partially constructed object.\n-                       1             0   ACCEPTABLE_INTERESTING  Seeing partially constructed object.\n-                       2             0   ACCEPTABLE_INTERESTING  Seeing partially constructed object.\n-                       3             0   ACCEPTABLE_INTERESTING  Seeing partially constructed object.\n-                       4             0   ACCEPTABLE_INTERESTING  Seeing partially constructed object.\n-                       5           622   ACCEPTABLE_INTERESTING  Seeing partially constructed object.\n-                       6         1,434   ACCEPTABLE_INTERESTING  Seeing partially constructed object.\n-                       7           420   ACCEPTABLE_INTERESTING  Seeing partially constructed object.\n-                       8    16,973,344               ACCEPTABLE  Seen the complete object.\n-    *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"-1\", expect = ACCEPTABLE, desc = \"Object is not seen yet.\")\n-    @Outcome(id = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Seeing partially constructed object.\")\n-    @Outcome(id = \"8\", expect = ACCEPTABLE,  desc = \"Seen the complete object.\")\n-    @State\n-    public static class PlainInit {\n-        int v = 1;\n-\n-        MyObject o;\n-\n-        @Actor\n-        public void actor1() {\n-            o = new MyObject(v);\n-        }\n-\n-        @Actor\n-        public void actor2(I_Result r) {\n-            MyObject o = this.o;\n-            if (o != null) {\n-                r.r1 = o.x8 + o.x7 + o.x6 + o.x5 + o.x4 + o.x3 + o.x2 + o.x1;\n-            } else {\n-                r.r1 = -1;\n-            }\n-        }\n-\n-        public static class MyObject {\n-            int x1, x2, x3, x4;\n-            int x5, x6, x7, x8;\n-            public MyObject(int v) {\n-                x1 = v;\n-                x2 = v;\n-                x3 = v;\n-                x4 = v;\n-                x5 = v;\n-                x6 = v;\n-                x7 = v;\n-                x8 = v;\n-            }\n-        }\n-    }\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        Putting finals on the fields is enough to get some safety back.\n-\n-               [OK] org.openjdk.jcstress.samples.JMMSample_06_Finals.FinalInit\n-            (JVM args: [-server])\n-          Observed state   Occurrences   Expectation  Interpretation\n-                      -1   112,755,834    ACCEPTABLE  Object is not seen yet.\n-                       8     3,766,026    ACCEPTABLE  Seen the complete object.\n-     *\/\n-\n-    @JCStressTest\n-    @Outcome(id = \"-1\", expect = ACCEPTABLE, desc = \"Object is not seen yet.\")\n-    @Outcome(id = \"8\", expect = ACCEPTABLE,  desc = \"Seen the complete object.\")\n-    @Outcome(expect = FORBIDDEN, desc = \"Seeing partially constructed object.\")\n-    @State\n-    public static class FinalInit {\n-        int v = 1;\n-\n-        MyObject o;\n-\n-        @Actor\n-        public void actor1() {\n-            o = new MyObject(v);\n-        }\n-\n-        @Actor\n-        public void actor2(I_Result r) {\n-            MyObject o = this.o;\n-            if (o != null) {\n-                r.r1 = o.x8 + o.x7 + o.x6 + o.x5 + o.x4 + o.x3 + o.x2 + o.x1;\n-            } else {\n-                r.r1 = -1;\n-            }\n-        }\n-\n-        public static class MyObject {\n-            final int x1, x2, x3, x4;\n-            final int x5, x6, x7, x8;\n-            public MyObject(int v) {\n-                x1 = v;\n-                x2 = v;\n-                x3 = v;\n-                x4 = v;\n-                x5 = v;\n-                x6 = v;\n-                x7 = v;\n-                x8 = v;\n-            }\n-        }\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/JMMSample_06_Finals.java","additions":0,"deletions":153,"binary":false,"changes":153,"status":"deleted"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.api;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\/*\n+    This is our first concurrency test. It is deliberately simplistic to show\n+    testing approaches, introduce JCStress APIs, etc.\n+\n+    Suppose we want to see if the field increment is atomic. We can make test\n+    with two actors, both actors incrementing the field and recording what\n+    value they observed into the result object. As JCStress runs, it will\n+    invoke these methods on the objects holding the field once per each actor\n+    and instance, and record what results are coming from there.\n+\n+    Done enough times, we will get the history of observed results, and that\n+    would tell us something about the concurrent behavior. For example, running\n+    this test would yield:\n+\n+        .......... [OK] org.openjdk.jcstress.samples.api.APISample_01_Simple\n+\n+          Scheduling class:\n+            actor1: package group 0, core group 0\n+            actor2: package group 0, core group 0\n+\n+          CPU allocation:\n+            actor1: CPU #3, package #0, core #3\n+            actor2: CPU #35, package #0, core #3\n+\n+          Compilation: split\n+            actor1: C2\n+            actor2: C2\n+\n+          JVM args: []\n+\n+          RESULT      SAMPLES    FREQ       EXPECT  DESCRIPTION\n+            1, 1   46,946,789   10.1%  Interesting  Both actors came up with the same value: atomicity failure.\n+            1, 2  110,240,149   23.8%   Acceptable  actor1 incremented, then actor2.\n+            2, 1  306,529,420   66.1%   Acceptable  actor2 incremented, then actor1.\n+\n+     How to run this test:\n+       $ java -jar jcstress-samples\/target\/jcstress.jar -t APISample_01\n+ *\/\n+\n+\/\/ Mark the class as JCStress test.\n+@JCStressTest\n+\n+\/\/ These are the test outcomes.\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n+@Outcome(id = \"1, 2\", expect = ACCEPTABLE, desc = \"actor1 incremented, then actor2.\")\n+@Outcome(id = \"2, 1\", expect = ACCEPTABLE, desc = \"actor2 incremented, then actor1.\")\n+\n+\/\/ This is a state object\n+@State\n+public class API_01_Simple {\n+\n+    int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        r.r1 = ++v; \/\/ record result from actor1 to field r1\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r2 = ++v; \/\/ record result from actor2 to field r2\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/api\/API_01_Simple.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.api;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\/*\n+    Another flavor of the same test as APISample_01_Simple is using arbiters.\n+    Arbiters run after both actors, and therefore can observe the final result.\n+\n+    This allows to observe the permanent atomicity failure after both actors\n+    finished.\n+\n+    How to run this test:\n+       $ java -jar jcstress-samples\/target\/jcstress.jar -t APISample_02_Arbiters\n+\n+        ...\n+\n+      RESULT         SAMPLES     FREQ       EXPECT  DESCRIPTION\n+           1     888,569,404    6.37%  Interesting  One update lost: atomicity failure.\n+           2  13,057,720,260   93.63%   Acceptable  Actors updated independently.\n+ *\/\n+\n+@JCStressTest\n+\n+\/\/ These are the test outcomes.\n+@Outcome(id = \"1\", expect = ACCEPTABLE_INTERESTING, desc = \"One update lost: atomicity failure.\")\n+@Outcome(id = \"2\", expect = ACCEPTABLE,             desc = \"Actors updated independently.\")\n+@State\n+public class API_02_Arbiters {\n+\n+    int v;\n+\n+    @Actor\n+    public void actor1() {\n+        v++;\n+    }\n+\n+    @Actor\n+    public void actor2() {\n+        v++;\n+    }\n+\n+    @Arbiter\n+    public void arbiter(I_Result r) {\n+        r.r1 = v;\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/api\/API_02_Arbiters.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.api;\n+\n+import org.openjdk.jcstress.annotations.*;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\/*\n+    Some concurrency tests are not following the \"run continously\" pattern. One\n+    of interesting test groups is that asserts if the code had terminated after\n+    a signal.\n+\n+    Here, we use a single @Actor that busy-waits on a field, and a @Signal that\n+    sets that field. JCStress would start actor, and then deliver the signal.\n+    If it exits in reasonable time, it will record \"TERMINATED\" result, otherwise\n+    record \"STALE\".\n+\n+    How to run this test:\n+       $ java -jar jcstress-samples\/target\/jcstress.jar -t APISample_03\n+\n+        ...\n+\n+          RESULT  SAMPLES     FREQ       EXPECT  DESCRIPTION\n+           STALE        4   30.77%  Interesting  Test hung up.\n+      TERMINATED        9   69.23%   Acceptable  Gracefully finished.\n+\n+      Messages:\n+        Have stale threads, forcing VM to exit for proper cleanup.\n+ *\/\n+\n+@JCStressTest(Mode.Termination)\n+@Outcome(id = \"TERMINATED\", expect = ACCEPTABLE,             desc = \"Gracefully finished.\")\n+@Outcome(id = \"STALE\",      expect = ACCEPTABLE_INTERESTING, desc = \"Test hung up.\")\n+@State\n+public class API_03_Termination {\n+\n+    @Actor\n+    public void actor1() throws InterruptedException {\n+        synchronized (this) {\n+            wait();\n+        }\n+    }\n+\n+    @Signal\n+    public void signal() {\n+        synchronized (this) {\n+            notify();\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/api\/API_03_Termination.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.api;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\/*\n+    It is sometimes convenient to put the tests in the same source file for\n+    better comparison. JCStress allows to nest tests like this:\n+\n+    How to run this test:\n+       $ java -jar jcstress-samples\/target\/jcstress.jar -t APISample_04\n+\n+        ...\n+\n+        .......... [OK] org.openjdk.jcstress.samples.api.APISample_04_Nesting.PlainTest\n+\n+          RESULT      SAMPLES    FREQ       EXPECT  DESCRIPTION\n+            1, 1   21,965,585    4.5%  Interesting  Both actors came up with the same value: atomicity failure.\n+            1, 2  229,978,309   47.5%   Acceptable  actor1 incremented, then actor2.\n+            2, 1  232,647,044   48.0%   Acceptable  actor2 incremented, then actor1.\n+\n+        .......... [OK] org.openjdk.jcstress.samples.api.APISample_04_Nesting.VolatileTest\n+\n+          RESULT      SAMPLES    FREQ       EXPECT  DESCRIPTION\n+            1, 1    4,612,990    1.4%  Interesting  Both actors came up with the same value: atomicity failure.\n+            1, 2   95,520,678   28.4%   Acceptable  actor1 incremented, then actor2.\n+            2, 1  236,498,350   70.3%   Acceptable  actor2 incremented, then actor1.\n+ *\/\n+\n+public class API_04_Nesting {\n+\n+    @JCStressTest\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n+    @Outcome(id = \"1, 2\", expect = ACCEPTABLE,             desc = \"actor1 incremented, then actor2.\")\n+    @Outcome(id = \"2, 1\", expect = ACCEPTABLE,             desc = \"actor2 incremented, then actor1.\")\n+    @State\n+    public static class PlainTest {\n+        int v;\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            r.r1 = ++v;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r2 = ++v;\n+        }\n+    }\n+\n+    @JCStressTest\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n+    @Outcome(id = \"1, 2\", expect = ACCEPTABLE,             desc = \"actor1 incremented, then actor2.\")\n+    @Outcome(id = \"2, 1\", expect = ACCEPTABLE,             desc = \"actor2 incremented, then actor1.\")\n+    @State\n+    public static class VolatileTest {\n+        volatile int v;\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            r.r1 = ++v;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r2 = ++v;\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/api\/API_04_Nesting.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.api;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\/*\n+    In many cases, tests share the outcomes and other metadata. To common them,\n+    there is a special @JCStressMeta annotation that says to look up the metadata\n+    at another class.\n+\n+    How to run this test:\n+       $ java -jar jcstress-samples\/target\/jcstress.jar -t APISample_05\n+\n+        ...\n+\n+        .......... [OK] org.openjdk.jcstress.samples.api.APISample_05_SharedMetadata.PlainTest\n+\n+          RESULT      SAMPLES    FREQ       EXPECT  DESCRIPTION\n+            1, 1    6,549,293    1.4%  Interesting  Both actors came up with the same value: atomicity failure.\n+            1, 2  414,490,076   90.0%   Acceptable  actor1 incremented, then actor2.\n+            2, 1   39,540,969    8.6%   Acceptable  actor2 incremented, then actor1.\n+\n+        .......... [OK] org.openjdk.jcstress.samples.api.APISample_05_SharedMetadata.VolatileTest\n+\n+          RESULT      SAMPLES    FREQ       EXPECT  DESCRIPTION\n+            1, 1   15,718,942    6.1%  Interesting  Both actors came up with the same value: atomicity failure.\n+            1, 2  120,855,601   47.2%   Acceptable  actor1 incremented, then actor2.\n+            2, 1  119,393,635   46.6%   Acceptable  actor2 incremented, then actor1.\n+ *\/\n+\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n+@Outcome(id = \"1, 2\", expect = ACCEPTABLE,             desc = \"actor1 incremented, then actor2.\")\n+@Outcome(id = \"2, 1\", expect = ACCEPTABLE,             desc = \"actor2 incremented, then actor1.\")\n+public class API_05_SharedMetadata {\n+\n+    @JCStressTest\n+    @JCStressMeta(API_05_SharedMetadata.class)\n+    @State\n+    public static class PlainTest {\n+        int v;\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            r.r1 = ++v;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r2 = ++v;\n+        }\n+    }\n+\n+    @JCStressTest\n+    @JCStressMeta(API_05_SharedMetadata.class)\n+    @State\n+    public static class VolatileTest {\n+        volatile int v;\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            r.r1 = ++v;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r2 = ++v;\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/api\/API_05_SharedMetadata.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.api;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\/*\n+    JCStress also allows to put the descriptions and references right at the test.\n+    This helps to identify the goal for the test, as well as the discussions about\n+    the behavior in question.\n+\n+    How to run this test:\n+       $ java -jar jcstress-samples\/target\/jcstress.jar -t APISample_06\n+ *\/\n+\n+@JCStressTest\n+\n+\/\/ Optional test description\n+@Description(\"Sample Hello World test\")\n+\n+\/\/ Optional references. @Ref is repeatable.\n+@Ref(\"http:\/\/openjdk.java.net\/projects\/code-tools\/jcstress\/\")\n+\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: atomicity failure.\")\n+@Outcome(id = \"1, 2\", expect = ACCEPTABLE,             desc = \"actor1 incremented, then actor2.\")\n+@Outcome(id = \"2, 1\", expect = ACCEPTABLE,             desc = \"actor2 incremented, then actor1.\")\n+@State\n+public class API_06_Descriptions {\n+\n+    int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        r.r1 = ++v;\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r2 = ++v;\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/api\/API_06_Descriptions.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.high;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.LL_Result;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class Concurrency_01_CHM {\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This test demonstrates the operation atomicity tests, taking\n+        ConcurrentHashMap-backed Multimap as the example.\n+    *\/\n+\n+    public static class Multimap {\n+        Map<String, List<String>> map = new ConcurrentHashMap<>();\n+\n+        \/*\n+            Contains a nasty race on putting the list into the map.\n+         *\/\n+        void addBroken(String key, String val) {\n+            List<String> list = map.get(key);\n+            if (list == null) {\n+                list = Collections.synchronizedList(new ArrayList<>());\n+                map.put(key, list);\n+            }\n+            list.add(val);\n+        }\n+\n+        \/*\n+            Solves the race with putIfAbsent.\n+         *\/\n+        void addCorrect(String key, String val) {\n+            List<String> list = map.get(key);\n+            if (list == null) {\n+                list = Collections.synchronizedList(new ArrayList<>());\n+                List<String> exist = map.putIfAbsent(key, list);\n+                if (exist != null) {\n+                    list = exist;\n+                }\n+            }\n+            list.add(val);\n+        }\n+\n+        \/*\n+            Solves the race with computeIfAbsent.\n+         *\/\n+        void addCorrect8(String key, String val) {\n+            List<String> list = map.computeIfAbsent(key,\n+                    k -> Collections.synchronizedList(new ArrayList<>()));\n+            list.add(val);\n+        }\n+\n+        String poll(String key, int idx) {\n+            List<String> list = map.get(key);\n+            return (list.size() > idx) ? list.get(idx) : null;\n+        }\n+    }\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        Broken Multimap is broken, it contains a race.\n+\n+             RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+           Bar, Baz  110,869,386   42.56%   Acceptable  Both updates.\n+          Bar, null   20,165,976    7.74%  Interesting  One update lost.\n+           Baz, Bar  109,309,826   41.96%   Acceptable  Both updates.\n+          Baz, null   20,153,756    7.74%  Interesting  One update lost.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = { \"Bar, null\", \"Baz, null\" }, expect = ACCEPTABLE_INTERESTING, desc = \"One update lost.\")\n+    @Outcome(id = { \"Bar, Baz\", \"Baz, Bar\"},    expect = ACCEPTABLE, desc = \"Both updates.\")\n+    @State\n+    public static class BrokenMultimap extends Multimap {\n+        @Actor\n+        public void actor1() {\n+            addBroken(\"Foo\", \"Bar\");\n+        }\n+\n+        @Actor\n+        public void actor2() {\n+            addBroken(\"Foo\", \"Baz\");\n+        }\n+\n+        @Arbiter\n+        public void arbiter(LL_Result s) {\n+            s.r1 = poll(\"Foo\", 0);\n+            s.r2 = poll(\"Foo\", 1);\n+        }\n+    }\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        putIfAbsent-style multimap does atomic updates.\n+\n+             RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+           Bar, Baz  125,206,656   50.51%  Acceptable  Both updates.\n+          Bar, null            0    0.00%   Forbidden  One update lost.\n+           Baz, Bar  122,666,368   49.49%  Acceptable  Both updates.\n+          Baz, null            0    0.00%   Forbidden  One update lost.\n+     *\/\n+\n+\n+    @JCStressTest\n+    @Outcome(id = { \"Bar, null\", \"Baz, null\" }, expect = FORBIDDEN, desc = \"One update lost.\")\n+    @Outcome(id = { \"Bar, Baz\", \"Baz, Bar\"},    expect = ACCEPTABLE, desc = \"Both updates.\")\n+    @State\n+    public static class CorrectMultimap extends Multimap {\n+        @Actor\n+        public void actor1() {\n+            addCorrect(\"Foo\", \"Bar\");\n+        }\n+\n+        @Actor\n+        public void actor2() {\n+            addCorrect(\"Foo\", \"Baz\");\n+        }\n+\n+        @Arbiter\n+        public void arbiter(LL_Result s) {\n+            s.r1 = poll(\"Foo\", 0);\n+            s.r2 = poll(\"Foo\", 1);\n+        }\n+    }\n+\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        computeIfAbsent-style multimap does atomic updates.\n+\n+             RESULT     SAMPLES     FREQ      EXPECT  DESCRIPTION\n+           Bar, Baz  97,992,669   49.72%  Acceptable  Both updates.\n+          Bar, null           0    0.00%   Forbidden  One update lost.\n+           Baz, Bar  99,110,435   50.28%  Acceptable  Both updates.\n+          Baz, null           0    0.00%   Forbidden  One update lost.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = { \"Bar, null\", \"Baz, null\" }, expect = FORBIDDEN, desc = \"One update lost.\")\n+    @Outcome(id = { \"Bar, Baz\", \"Baz, Bar\"},    expect = ACCEPTABLE, desc = \"Both updates.\")\n+    @State\n+    public static class CorrectJDK8Multimap extends Multimap {\n+        @Actor\n+        public void actor1() {\n+            addCorrect8(\"Foo\", \"Bar\");\n+        }\n+\n+        @Actor\n+        public void actor2() {\n+            addCorrect8(\"Foo\", \"Baz\");\n+        }\n+\n+        @Arbiter\n+        public void arbiter(LL_Result s) {\n+            s.r1 = poll(\"Foo\", 0);\n+            s.r2 = poll(\"Foo\", 1);\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/Concurrency_01_CHM.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@State\n+@Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+@Outcome(id = \"0, 1\",           expect = ACCEPTABLE,             desc = \"In order\")\n+@Outcome(id = \"1, 0\",           expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+public class AdvancedJMM_01_SynchronizedBarriers {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_01\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+         This is the first example that shows the advanced things in JMM. Most of these examples show\n+         what JMM is *not*, rather that what JMM *is*.\n+\n+         It is easy to read \"JSR 133 Cookbook for Compiler Writers\" and get a wrong idea that the conservative\n+         implementation that JSR 133 Cookbook provides as the implementation guidance is the memory\n+         model as specified. For example, it is a common mistake to assume that synchronized blocks\n+         have barriers associated with them.\n+\n+         In this example, we do two back-to-back synchronized blocks in one thread, and read the updates\n+         in the other thread with the maximum ordering possible, \"volatile\". If synchronized blocks indeed\n+         provided the barriers, then it would not be possible to write \"x\" and \"y\" out of order, and\n+         therefore, \"1, 0\" outcome would be forbidden.\n+\n+         But in reality, even on x86_64, this test yields:\n+\n+              RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+                0, 0  3,815,999,238   92.96%   Acceptable  Boring\n+                0, 1     10,345,809    0.25%   Acceptable  In order\n+                1, 0        207,479   <0.01%  Interesting  Whoa\n+                1, 1    278,646,578    6.79%   Acceptable  Boring\n+\n+         Technically, this is due to \"lock coarsening\" that merged the synchronized blocks, and then was able\n+         to order the writes to \"x\" and \"y\" differently. JMM as stated allows\n+         this optimization: we are only required to see these stores in order if we are\n+         synchronizing on the same \"this\". Side observers can see the writes in whatever order.\n+    *\/\n+\n+    static final VarHandle VH_X, VH_Y;\n+\n+    static {\n+        try {\n+            VH_X = MethodHandles.lookup().findVarHandle(AdvancedJMM_01_SynchronizedBarriers.class, \"x\", int.class);\n+            VH_Y = MethodHandles.lookup().findVarHandle(AdvancedJMM_01_SynchronizedBarriers.class, \"y\", int.class);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    int x, y;\n+\n+    @Actor\n+    void actor() {\n+        synchronized (this) {\n+            x = 1;\n+        }\n+        synchronized (this) {\n+            y = 1;\n+        }\n+    }\n+\n+    @Actor\n+    void observer(II_Result r) {\n+        r.r1 = (int) VH_Y.getVolatile(this);\n+        r.r2 = (int) VH_X.getVolatile(this);\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_01_SynchronizedBarriers.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,279 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.IIII_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n+\n+public class AdvancedJMM_02_MemorySynchronicity {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_02_MemorySynchronicity[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Another interesting quirk that comes from wrong intuition is the belief that once values hit the\n+        memory\/barriers they would be globally exposed to the rest of the system. That is not necessarily\n+        true, because not all hardware provides the interesting property: multi-copy atomicity.\n+\n+        Multi-copy atomicity is \"either the new value is visible to all processors, or no processor sees it\".\n+        That is, multi-copy atomicity means the update to the single location is \"instantaneously\" visible\n+        to all processors in the system. To test this property, we can perform the \"Independent Reads of\n+        Independent Writes\" test. Doing this test with \"opaque\" accesses targets the underlying hardware,\n+        rather than optimizing compilers.\n+\n+        IRIW detects whether the independent writes to \"x\" and \"y\" are seen in different orders by two\n+        other workers.\n+\n+        On x86_64 -- that is multi-copy atomic architecture -- this test yields:\n+\n+              RESULT         SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          0, 0, 0, 0   1,018,009,462    3.39%   Acceptable  Boring\n+          0, 0, 0, 1     192,218,036    0.64%   Acceptable  Boring\n+          0, 0, 1, 0     188,848,400    0.63%   Acceptable  Boring\n+          0, 0, 1, 1     726,013,966    2.42%   Acceptable  Boring\n+          0, 1, 0, 0     229,095,909    0.76%   Acceptable  Boring\n+          0, 1, 0, 1         610,683   <0.01%   Acceptable  Boring\n+          0, 1, 1, 0   2,968,164,366    9.88%   Acceptable  Boring\n+          0, 1, 1, 1   1,280,404,610    4.26%   Acceptable  Boring\n+          1, 0, 0, 0     164,642,284    0.55%   Acceptable  Boring\n+          1, 0, 0, 1   2,762,782,477    9.19%   Acceptable  Boring\n+          1, 0, 1, 0               0    0.00%  Interesting  Whoa\n+          1, 0, 1, 1   1,080,270,592    3.59%   Acceptable  Boring\n+          1, 1, 0, 0     793,200,776    2.64%   Acceptable  Boring\n+          1, 1, 0, 1   1,282,983,565    4.27%   Acceptable  Boring\n+          1, 1, 1, 0   1,248,633,288    4.15%   Acceptable  Boring\n+          1, 1, 1, 1  16,117,960,946   53.63%   Acceptable  Boring\n+\n+        But on PPC64 -- that is not a multi-copy atomic architecture -- this test yields:\n+\n+              RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          0, 0, 0, 0    8,000,004    0.78%   Acceptable  Boring\n+          0, 0, 0, 1    1,464,110    0.14%   Acceptable  Boring\n+          0, 0, 1, 0    1,179,814    0.12%   Acceptable  Boring\n+          0, 0, 1, 1   41,275,652    4.03%   Acceptable  Boring\n+          0, 1, 0, 0    1,038,437    0.10%   Acceptable  Boring\n+          0, 1, 0, 1       60,198   <0.01%   Acceptable  Boring\n+          0, 1, 1, 0    5,957,811    0.58%   Acceptable  Boring\n+          0, 1, 1, 1   19,326,879    1.88%   Acceptable  Boring\n+          1, 0, 0, 0      999,321    0.10%   Acceptable  Boring\n+          1, 0, 0, 1    6,711,610    0.65%   Acceptable  Boring\n+          1, 0, 1, 0       28,752   <0.01%  Interesting  Whoa\n+          1, 0, 1, 1   19,428,477    1.89%   Acceptable  Boring\n+          1, 1, 0, 0   21,080,890    2.06%   Acceptable  Boring\n+          1, 1, 0, 1   17,442,987    1.70%   Acceptable  Boring\n+          1, 1, 1, 0   15,403,205    1.50%   Acceptable  Boring\n+          1, 1, 1, 1  865,916,157   84.45%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"1, 0, 1, 0\", expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    @Outcome(                   expect = ACCEPTABLE,             desc = \"Boring\")\n+    @State\n+    public static class OpaqueIRIW {\n+\n+        static final VarHandle VH_X, VH_Y;\n+\n+        static {\n+            try {\n+                VH_X = MethodHandles.lookup().findVarHandle(OpaqueIRIW.class, \"x\", int.class);\n+                VH_Y = MethodHandles.lookup().findVarHandle(OpaqueIRIW.class, \"y\", int.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        public int x;\n+        public int y;\n+\n+        @Actor\n+        public void actor1() {\n+            VH_X.setOpaque(this, 1);\n+        }\n+\n+        @Actor\n+        public void actor2() {\n+            VH_Y.setOpaque(this, 1);\n+        }\n+\n+        @Actor\n+        public void actor3(IIII_Result r) {\n+            r.r1 = (int) VH_X.getOpaque(this);\n+            r.r2 = (int) VH_Y.getOpaque(this);\n+        }\n+\n+        @Actor\n+        public void actor4(IIII_Result r) {\n+            r.r3 = (int) VH_Y.getOpaque(this);\n+            r.r4 = (int) VH_X.getOpaque(this);\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        To see why this is not a vanilla memory reordering, we can put fences around the critical accesses.\n+        If we follow the \"usual\" fencing around the seqc\n+\n+\n+PPC64:\n+      RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+  0, 0, 0, 0  116,646,109   22.21%   Acceptable  Boring\n+  0, 0, 0, 1   19,589,207    3.73%   Acceptable  Boring\n+  0, 0, 1, 0   13,989,162    2.66%   Acceptable  Boring\n+  0, 0, 1, 1   22,118,188    4.21%   Acceptable  Boring\n+  0, 1, 0, 0   16,780,917    3.20%   Acceptable  Boring\n+  0, 1, 0, 1       44,960   <0.01%   Acceptable  Boring\n+  0, 1, 1, 0   54,578,089   10.39%   Acceptable  Boring\n+  0, 1, 1, 1    3,448,588    0.66%   Acceptable  Boring\n+  1, 0, 0, 0   15,474,140    2.95%   Acceptable  Boring\n+  1, 0, 0, 1   63,265,053   12.05%   Acceptable  Boring\n+  1, 0, 1, 0        2,151   <0.01%  Interesting  Whoa\n+  1, 0, 1, 1    2,820,992    0.54%   Acceptable  Boring\n+  1, 1, 0, 0   33,421,547    6.36%   Acceptable  Boring\n+  1, 1, 0, 1   10,101,731    1.92%   Acceptable  Boring\n+  1, 1, 1, 0    9,358,080    1.78%   Acceptable  Boring\n+  1, 1, 1, 1  143,471,870   27.32%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"1, 0, 1, 0\", expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    @Outcome(                   expect = ACCEPTABLE,             desc = \"Boring\")\n+    @State\n+    public static class FencedIRIWTest {\n+\n+        public int x;\n+        public int y;\n+\n+        @Actor\n+        public void actor1() {\n+            UNSAFE.fullFence(); \/\/ \"SeqCst\" store\n+            x = 1;\n+        }\n+\n+        @Actor\n+        public void actor2() {\n+            UNSAFE.fullFence(); \/\/ \"SeqCst\" store\n+            y = 1;\n+        }\n+\n+        @Actor\n+        public void actor3(IIII_Result r) {\n+            r.r1 = x;\n+            UNSAFE.loadFence(); \/\/ \"SeqCst\" load x\n+            r.r2 = y;\n+            UNSAFE.loadFence(); \/\/ \"SeqCst\" load y\n+        }\n+\n+        @Actor\n+        public void actor4(IIII_Result r) {\n+            r.r3 = y;\n+            UNSAFE.loadFence(); \/\/ \"SeqCst\" load y\n+            r.r4 = x;\n+            UNSAFE.loadFence(); \/\/ \"SeqCst\" load x\n+        }\n+\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        To see why this is not a vanilla memory reordering, we can put fences around the critical accesses.\n+        If we follow the \"usual\" fencing around the seqc\n+\n+PPC64:\n+      RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+  0, 0, 0, 0    3,162,682    0.63%   Acceptable  Boring\n+  0, 0, 0, 1      420,692    0.08%   Acceptable  Boring\n+  0, 0, 1, 0       49,183   <0.01%   Acceptable  Boring\n+  0, 0, 1, 1   17,923,289    3.55%   Acceptable  Boring\n+  0, 1, 0, 0      344,895    0.07%   Acceptable  Boring\n+  0, 1, 0, 1       58,153    0.01%   Acceptable  Boring\n+  0, 1, 1, 0      703,765    0.14%   Acceptable  Boring\n+  0, 1, 1, 1   17,055,833    3.38%   Acceptable  Boring\n+  1, 0, 0, 0       55,722    0.01%   Acceptable  Boring\n+  1, 0, 0, 1      926,450    0.18%   Acceptable  Boring\n+  1, 0, 1, 0            0    0.00%  Interesting  Whoa\n+  1, 0, 1, 1   15,951,198    3.16%   Acceptable  Boring\n+  1, 1, 0, 0   15,055,385    2.98%   Acceptable  Boring\n+  1, 1, 0, 1   23,580,682    4.67%   Acceptable  Boring\n+  1, 1, 1, 0   20,358,942    4.03%   Acceptable  Boring\n+  1, 1, 1, 1  389,383,273   77.10%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"1, 0, 1, 0\", expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    @Outcome(                   expect = ACCEPTABLE,             desc = \"Boring\")\n+    @State\n+    public static class FullyFencedIRIWTest {\n+\n+        public int x;\n+        public int y;\n+\n+        @Actor\n+        public void actor1() {\n+            UNSAFE.fullFence(); \/\/ \"SeqCst\" store\n+            x = 1;\n+        }\n+\n+        @Actor\n+        public void actor2() {\n+            UNSAFE.fullFence(); \/\/ \"SeqCst\" store\n+            y = 1;\n+        }\n+\n+        @Actor\n+        public void actor3(IIII_Result r) {\n+            UNSAFE.fullFence(); \/\/ \"SeqCst\" load x, part 1\n+            r.r1 = x;\n+            UNSAFE.fullFence(); \/\/ \"SeqCst\" load x, part 2 (subsumed); \"SeqCst\" load y, part 1\n+            r.r2 = y;\n+            UNSAFE.loadFence(); \/\/ \"SeqCst\" load y, part 2\n+        }\n+\n+        @Actor\n+        public void actor4(IIII_Result r) {\n+            UNSAFE.fullFence();\n+            r.r3 = y;\n+            UNSAFE.fullFence(); \/\/ subsumes loadFence\n+            r.r4 = x;\n+            UNSAFE.loadFence();\n+        }\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_02_MemorySynchronicity.java","additions":279,"deletions":0,"binary":false,"changes":279,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@State\n+@Outcome(id = \"10\",                      expect = ACCEPTABLE,             desc = \"Boring\")\n+@Outcome(id = {\"0\", \"1\"},                expect = FORBIDDEN,              desc = \"Boring\")\n+@Outcome(id = {\"9\", \"8\", \"7\", \"6\", \"5\"}, expect = ACCEPTABLE,             desc = \"Okay\")\n+@Outcome(                                expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+public class AdvancedJMM_03_LosingUpdates {\n+\n+     \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_03_LosingUpdates[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This is a simple example, but it nevertheless important to see how dangerous race conditions are.\n+        We have already established that v++ over volatile field is not atomic. But here is a more interesting\n+        question: how many updates we can actually lose? Perhaps naively, many would answer that we could lose\n+        one update per iteration. After all, the actors always see the latest value in the \"v\", so we might see\n+        at most the old-just-before-update value. So, if we do 5 updates in every thread, we could expect that\n+        we would see at least 5 as the final result?\n+\n+        This intuition is contradicted by this simple test:\n+\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              10  4,314,297,607   25.10%   Acceptable  Boring\n+               2     19,121,833    0.11%  Interesting  Whoa\n+               3     65,889,475    0.38%  Interesting  Whoa\n+               4    167,420,625    0.97%  Interesting  Whoa\n+               5  2,682,284,766   15.61%   Acceptable  Okay\n+               6  2,033,772,928   11.83%   Acceptable  Okay\n+               7  2,523,123,422   14.68%   Acceptable  Okay\n+               8  2,847,721,682   16.57%   Acceptable  Okay\n+               9  2,533,299,886   14.74%   Acceptable  Okay\n+\n+        The most interesting result, \"2\" can be explaned by this interleaving:\n+            Thread 1: (0 ------ stalled -------> 1)     (1->2)(2->3)(3->4)(4->5)\n+            Thread 2:   (0->1)(1->2)(2->3)(3->4)    (1 -------- stalled ---------> 2)\n+\n+        This example shows that non-synchronized counter can lose the arbitrary number of\n+        updates, and even revert the history!\n+\n+        Exercise for the reader: prove that both \"0\" and \"1\" are impossible results.\n+     *\/\n+\n+    volatile int x;\n+\n+    @Actor\n+    void actor1() {\n+        for (int i = 0; i < 5; i++) {\n+            x++;\n+        }\n+    }\n+\n+    @Actor\n+    void actor2() {\n+        for (int i = 0; i < 5; i++) {\n+            x++;\n+        }\n+    }\n+\n+    @Arbiter\n+    public void arbiter(I_Result r) {\n+        r.r1 = x;\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_03_LosingUpdates.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+\n+public class AdvancedJMM_04_MisplacedVolatile {\n+\n+     \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_03_LosingUpdates[.SubTestName]\n+     *\/\n+\n+    static class Composite {\n+        int x;\n+        public Composite(int v) {\n+            x = v;\n+        }\n+        public int get() {\n+            return x;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This test shows the common pitfall: the misplaced synchronization points. Here, the \"volatile\" is\n+        placed on the \"h\" field itself. But there are no releasing writes to \"h\" that gives us visibility\n+        of other updates! Note that test checks the value of dependent field, Composite.x -- the field of\n+        the object that we have passed between the threads unsafely.\n+\n+        This outcome is possible on AArch64:\n+          RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  388,488,952   81.30%   Acceptable  Boring\n+               0          553   <0.01%  Interesting  Whoa\n+              42   89,365,471   18.70%   Acceptable  Boring\n+     *\/\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(id = \"0\",          expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class Racy {\n+        volatile Holder<Composite> h = new Holder<>(new Composite(-1));\n+\n+        @Actor\n+        void actor() {\n+            h.set(new Composite(42));\n+        }\n+\n+        @Actor\n+        void observer(I_Result r){\n+            r.r1 = h.get().get();\n+        }\n+\n+        static class Holder<T> {\n+            T value;\n+\n+            public Holder(T v) {\n+                value = v;\n+            }\n+\n+            public void set(T v) {\n+                value = v;\n+            }\n+\n+            public T get() {\n+                return value;\n+            }\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+        Correctly synchronized program has \"volatile\" at the publication point: the write to \"value\" is now\n+        releasing write, and read from \"value\" is now acquiring write. Therefore, seeing zero in the composite\n+        data is illegal now.\n+\n+        AArch64:\n+          RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  309,220,995   72.04%  Acceptable  Boring\n+               0            0    0.00%   Forbidden  Illegal\n+              42  120,004,221   27.96%  Acceptable  Boring\n+     *\/\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE, desc = \"Boring\")\n+    @Outcome(id = \"0\",          expect = FORBIDDEN,  desc = \"Illegal\")\n+    public static class NonRacy {\n+        Holder<Composite> h = new Holder<>(new Composite(-1));\n+\n+        @Actor\n+        void actor() {\n+            h.set(new Composite(42));\n+        }\n+\n+        @Actor\n+        void observer(I_Result r){\n+            r.r1 = h.get().get();\n+        }\n+\n+        static class Holder<T> {\n+            volatile T value; \/\/ volatile is now here\n+\n+            public Holder(T v) {\n+                value = v;\n+            }\n+\n+            public void set(T v) {\n+                value = v;\n+            }\n+\n+            public T get() {\n+                return value;\n+            }\n+        }\n+    }\n+\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_04_MisplacedVolatile.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class AdvancedJMM_05_SemiSynchronized {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_05_SemiSynchronized[.SubTestName]\n+     *\/\n+\n+    static class Composite {\n+        int x;\n+        public Composite(int v) {\n+            x = v;\n+        }\n+        public int get() {\n+            return x;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Somewhat similar to previous example, this test now publishes the Composite with the synchronized\n+        setter. But, the getter is deliberately non-synchronized. Unfortunately, synchronizing only the\n+        setter is not enough: the getter is still racy, and can observe surprising results.\n+\n+        This can be seen on some platforms, for example with PPC64 (modern JDKs require -XX:+UseBiasedLocking):\n+          RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  566,235,858   91.44%   Acceptable  Boring\n+               0          354   <0.01%  Interesting  Whoa\n+              42   53,010,764    8.56%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(id = \"0\",          expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class Racy {\n+        Holder<Composite> h = new Holder<>(new Composite(-1));\n+\n+        @Actor\n+        void actor() {\n+            h.set(new Composite(42));\n+        }\n+\n+        @Actor\n+        void observer(I_Result r) {\n+            r.r1 = h.get().get();\n+        }\n+\n+        static class Holder<T> {\n+            T value;\n+\n+            public Holder(T v) {\n+                value = v;\n+            }\n+\n+            public synchronized void set(T v) {\n+                value = v;\n+            }\n+\n+            public T get() { \/\/ Deliberately not synchronized\n+                return value;\n+            }\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        If we properly synchronize both getter and setter, the previously interesting example is now forbidden.\n+\n+        PPC64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              -1  229,147,333   43.33%  Acceptable  Boring\n+               0            0    0.00%   Forbidden  Now forbidden\n+              42  299,711,163   56.67%  Acceptable  Boring\n+     *\/\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE, desc = \"Boring\")\n+    @Outcome(id = \"0\",          expect = FORBIDDEN,  desc = \"Now forbidden\")\n+    public static class NonRacy {\n+        Holder<Composite> h = new Holder<>(new Composite(-1));\n+\n+        @Actor\n+        void actor() {\n+            h.set(new Composite(42));\n+        }\n+\n+        @Actor\n+        void observer(I_Result r) {\n+            r.r1 = h.get().get();\n+        }\n+\n+        static class Holder<T> {\n+            T value;\n+\n+            public Holder(T v) {\n+                value = v;\n+            }\n+\n+            public synchronized void set(T v) {\n+                value = v;\n+            }\n+\n+            public synchronized T get() {\n+                return value;\n+            }\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_05_SemiSynchronized.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class AdvancedJMM_06_ArrayVolatility {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_06_ArrayVolatility[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        It is easy to misplace volatiles when arrays are used. Notably, declaring the array itself \"volatile\"\n+        does not make the accesses to its elements \"volatile\". This is similar to declaring the field that store\n+        a reference to class \"volatile\": it would not translate to those fields being \"volatile\".\n+\n+        Therefore, this test yields:\n+\n+          RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0  266,067,332   69.40%   Acceptable  Boring\n+            0, 1       31,968   <0.01%   Acceptable  Okay\n+            1, 0       67,654    0.02%  Interesting  Whoa\n+            1, 1  117,191,510   30.57%   Acceptable  Boring\n+\n+        That is, the write to a[1] does not cause updates of a[0] to be visible.\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(id = \"0, 1\",           expect = ACCEPTABLE,             desc = \"Okay\")\n+    @Outcome(id = \"1, 0\",           expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class DeclarationSite {\n+        volatile int[] arr = new int[2];\n+\n+        @Actor\n+        void actor() {\n+            int[] a = arr;\n+            a[0] = 1;\n+            a[1] = 1;\n+        }\n+\n+        @Actor\n+        void observer(II_Result r) {\n+            int[] a = arr;\n+            r.r1 = a[1];\n+            r.r2 = a[0];\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        VarHandles provide the possibility to perform volatile accesses by using the \"volatile\" access mode.\n+        In this example, a[1] element works as volatile guard see in BasicJMM_06_Causality primers.\n+\n+        Indeed, this would be the result on all platforms:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  308,853,172   78.55%  Acceptable  Boring\n+            0, 1       39,632    0.01%  Acceptable  Okay\n+            1, 0            0    0.00%   Forbidden  Whoa\n+            1, 1   84,275,580   21.43%  Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Boring\")\n+    @Outcome(id = \"0, 1\",           expect = ACCEPTABLE, desc = \"Okay\")\n+    @Outcome(id = \"1, 0\",           expect = FORBIDDEN,  desc = \"Whoa\")\n+    public static class UseSite {\n+        static final VarHandle VH = MethodHandles.arrayElementVarHandle(int[].class);\n+\n+        int[] arr = new int[2];\n+\n+        @Actor\n+        void actor() {\n+            int[] a = arr;\n+            VH.set(a, 0, 1);\n+            VH.setVolatile(a, 1, 1);\n+        }\n+\n+        @Actor\n+        void observer(II_Result r) {\n+            int[] a = arr;\n+            r.r1 = (int) VH.getVolatile(a, 1);\n+            r.r2 = (int) VH.get(a, 0);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_06_ArrayVolatility.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@State\n+@Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+@Outcome(id = \"0, 1\",           expect = ACCEPTABLE,             desc = \"Plausible\")\n+@Outcome(id = \"1, 0\",           expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+public class AdvancedJMM_07_WrongReleaseOrder {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_07_WrongReleaseOrder\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Remember, it is critically important that proper release-acquire chains follows the proper structure:\n+           A --before--> release --sees--> acquire --before--> B\n+\n+        Only this way we can guarantee that B sees A. This test is one of the exploratory tests what bad\n+        things happen when that rule is violated. This example differs from BasicJMM_05_Coherence by doing\n+        the release in wrong order.\n+\n+        This test yields:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0  2,285,705,011   53.75%   Acceptable  Boring\n+            0, 1      3,023,487    0.07%   Acceptable  Plausible\n+            1, 0     17,424,594    0.41%  Interesting  Whoa\n+            1, 1  1,946,573,692   45.77%   Acceptable  Boring\n+\n+        The \"1, 0\" outcome is now eminently possible and can be explained by a simple sequential execution.\n+     *\/\n+\n+    int x;\n+    volatile int g;\n+\n+    @Actor\n+    public void actor1() {\n+        g = 1;  \/\/ premature release\n+        x = 1;\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r1 = g;\n+        r.r2 = x;\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_07_WrongReleaseOrder.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@State\n+@Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+@Outcome(id = \"0\",          expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+@Outcome(id = \"-2\",         expect = ACCEPTABLE_INTERESTING, desc = \"Whoa-whoa\")\n+public class AdvancedJMM_08_WrongListReleaseOrder {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_08_WrongListReleaseOrder[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        As the extension of the previous example, in most practical cases, the wrong release order manifests\n+        like the premature publication on the mutating objects, for example a collection. This test initializes\n+        and stores\/releases the initial list before doing the write. Even though the list is \"volatile\", the\n+        addition happens late, and the proper \"publication\" does not help.\n+\n+        This test on x86_64:\n+          RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1            0    0.00%   Acceptable  Boring\n+              -2            1   <0.01%  Interesting  Whoa-whoa\n+               0  256,502,626   56.64%  Interesting  Whoa\n+              42  196,385,437   43.36%   Acceptable  Boring\n+\n+        The \"0\" outcome is very visible for obvious reasons, it is explainable by sequential execution.\n+\n+        There is also a very interesting \"-1\" outcome, which shows that mutating collections under\n+        races is not a good idea. Even though isEmpty() returned \"false\" and we proceeded to \"get\",\n+        the internal checks in \"get\" read the sizes again and discovered the list is not yet initialized\n+        (coherence failure).\n+     *\/\n+\n+    volatile List<Integer> list = new ArrayList<>();\n+\n+    @Actor\n+    public void actor1() {\n+        list = new ArrayList<>(); \/\/ prematurely released\n+        list.add(42);\n+    }\n+\n+    @Actor\n+    public void actor2(I_Result r) {\n+        List<Integer> l = list;\n+        if (l != null) {\n+            if (l.isEmpty()) {\n+                r.r1 = 0;\n+            } else {\n+                try {\n+                    r.r1 = l.get(0);\n+                } catch (ArrayIndexOutOfBoundsException e) {\n+                    r.r1 = -2;\n+                }\n+            }\n+        } else {\n+            r.r1 = -1;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_08_WrongListReleaseOrder.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@State\n+@Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Boring\")\n+@Outcome(id = {\"0, 1\", \"1, 0\"}, expect = ACCEPTABLE, desc = \"Plausible\")\n+public class AdvancedJMM_09_WrongAcquireOrder {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_09_WrongAcquireOrder\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        For completeness, the example that has a wrong acquire order. All these results can be explained by\n+        sequential execution of the code.\n+\n+        x86_64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0  2,560,656,086   55.33%   Acceptable  Boring\n+            0, 1      2,961,349    0.06%   Acceptable  Plausible\n+            1, 0      7,885,064    0.17%   Acceptable  Plausible\n+            1, 1  2,056,684,125   44.44%   Acceptable  Boring\n+     *\/\n+\n+    int x;\n+    volatile int g;\n+\n+    @Actor\n+    public void actor1() {\n+        x = 1;\n+        g = 1;\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r1 = x;\n+        r.r2 = g; \/\/ acquiring too late\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_09_WrongAcquireOrder.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@State\n+@Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+@Outcome(id = \"0, 1\",           expect = ACCEPTABLE,             desc = \"Plausible\")\n+@Outcome(id = \"1, 0\",           expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+public class AdvancedJMM_10_WrongAcquireReleaseOrder {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_10_WrongAcquireReleaseOrder\n+     *\/\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        This example effectively inverts the BasicJMM_06_Causality test: it \"guards\" the volatile \"g\" with\n+        plain \"x\". The interesting outcome (1, 0) cannot be explained by the sequential execution of this code,\n+        nevertheless it is allowed by JMM, because it is a data race.\n+\n+        Note that even if we have seen \"x = 1\", we can still see \"g = 1\". That is, adding \"volatile\" to \"g\"\n+        does not guarantee the _promptness_ of publishing of \"g\".\n+\n+        x86_64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0  2,694,178,631   58.36%   Acceptable  Boring\n+            0, 1     69,859,185    1.51%   Acceptable  Plausible\n+            1, 0        930,435    0.02%  Interesting  Whoa\n+            1, 1  1,851,647,173   40.11%   Acceptable  Boring\n+     *\/\n+\n+    int x;\n+    volatile int g;\n+\n+    @Actor\n+    public void actor1() {\n+        g = 1;\n+        x = 1;\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r1 = x;\n+        r.r2 = g;\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_10_WrongAcquireReleaseOrder.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n+\n+public class AdvancedJMM_11_SynchronizedAreNotFences {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_11_SynchronizedAreNotFences\n+     *\/\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        This example is superficially similar to AdvancedJMM_01_SynchronizedBarriers, but this time it shows\n+        that relying on the \"synchronized\" just for the memory effects is not reliable. Notably, the constructions\n+        that use no-op synchronized blocks are routinely elided by optimizers. This test produces the interesting\n+        result more or less reliably, by using \"new Object()\" as synchronization target. Choosing a different\n+        target may mask the interesting result, but it can reappear in real programs after aggressive optimizations.\n+\n+        On x86_64 this test yields:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0    704,537,467   18.23%   Acceptable  Boring\n+            0, 1     51,261,212    1.33%   Acceptable  Plausible\n+            1, 0      2,583,316    0.07%  Interesting  Whoa\n+            1, 1  3,106,218,069   80.38%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(id = \"0, 1\",           expect = ACCEPTABLE,             desc = \"Plausible\")\n+    @Outcome(id = \"1, 0\",           expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class Synchronized {\n+        int x, y;\n+\n+        @Actor\n+        public void actor1() {\n+            x = 1;\n+            synchronized (new Object()) {}\n+            y = 1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r1 = y;\n+            synchronized (new Object()) {}\n+            r.r2 = x;\n+        }\n+    }\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        If fence-like effects are required in low-level concurrency code, then Unsafe.*Fence should be used instead.\n+\n+        Indeed, this provides the effect we are after, on all platforms:\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0    943,174,523   40.81%  Acceptable  Boring\n+            0, 1     58,099,523    2.51%  Acceptable  Plausible\n+            1, 0              0    0.00%   Forbidden  Now forbidden\n+            1, 1  1,309,989,698   56.68%  Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Boring\")\n+    @Outcome(id = \"0, 1\",           expect = ACCEPTABLE, desc = \"Plausible\")\n+    @Outcome(id = \"1, 0\",           expect = FORBIDDEN,  desc = \"Now forbidden\")\n+    public static class Fenced {\n+        int x, y;\n+\n+        @Actor\n+        public void actor1() {\n+            x = 1;\n+            UNSAFE.fullFence();\n+            y = 1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r1 = y;\n+            UNSAFE.fullFence();\n+            r.r2 = x;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_11_SynchronizedAreNotFences.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.III_Result;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n+\n+public class AdvancedJMM_12_VolatilesAreNotFences {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_12_SynchronizedAreNotFences[.SubTestName]\n+     *\/\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        Similarly to AdvancedJMM_11_SynchronizedAreNotFences example, the volatile accesses cannot be reliably\n+        used for their auxiliary memory effects. In this example, if we do not observe the write of the \"b\", then\n+        we can see the old \"x\", even though volatile accesses _might_ be implemented with barriers.\n+\n+        This reproduces on AArch64:\n+            RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+           0, 0, 0  401,242,129   51.33%   Acceptable  Boring\n+           0, 0, 1   12,608,887    1.61%   Acceptable  Irrelevant\n+           0, 1, 1    6,231,104    0.80%   Acceptable  Irrelevant\n+           1, 0, 0       91,935    0.01%  Interesting  Whoa\n+           1, 0, 1    4,941,677    0.63%   Acceptable  Irrelevant\n+           1, 1, 1  356,621,484   45.62%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"0, 0, 0\", \"1, 1, 1\"},   expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(id = {\"0, .*, 1\", \"1, .*, 1\"}, expect = ACCEPTABLE,             desc = \"Irrelevant\")\n+    @Outcome(id = \"1, 0, 0\",                expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class Volatiles {\n+        int x, y;\n+        volatile int b;\n+\n+        @Actor\n+        void thread1() {\n+            x = 1;\n+            b = 1; \/\/ fake \"release\"\n+            y = 1;\n+        }\n+\n+        @Actor\n+        void thread2(III_Result r) {\n+            r.r1 = y;\n+            r.r2 = b; \/\/ fake \"acquire\"\n+            r.r3 = x;\n+        }\n+    }\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        Once again, using the fences directly helps to get the effect that we want.\n+\n+        Same AArch64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0   97,306,826   10.81%  Acceptable  Boring\n+            0, 1    9,990,750    1.11%  Acceptable  Plausible\n+            1, 0            0    0.00%   Forbidden  Now forbidden\n+            1, 1  793,182,680   88.08%  Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"0, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Boring\")\n+    @Outcome(id = \"0, 1\",           expect = ACCEPTABLE, desc = \"Plausible\")\n+    @Outcome(id = \"1, 0\",           expect = FORBIDDEN,  desc = \"Now forbidden\")\n+    public static class Fences {\n+        int x, y;\n+\n+        @Actor\n+        void thread1() {\n+            x = 1;\n+            UNSAFE.fullFence();\n+            y = 1;\n+        }\n+\n+        @Actor\n+        void thread2(II_Result r) {\n+            r.r1 = y;\n+            UNSAFE.fullFence();\n+            r.r2 = x;\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_12_VolatilesAreNotFences.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class AdvancedJMM_13_VolatileVsFinal {\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_13_VolatileVsFinal[.SubTestName]\n+     *\/\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        Perhaps, one of the most surprising JMM behaviors is that volatile fields do not include\n+        the final field semantics. That is, if we publish the reference to the object racily,\n+        then we can see the default value for the \"volatile\" field! This is mostly because the\n+        volatile itself is in the wrong place. This is similar to AdvancedJMM_10_WrongAcquireReleaseOrder\n+        example.\n+\n+        It can be seen on some platforms with this synthetic test.\n+\n+        For example, AArch64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  1,428,517,070   91.74%   Acceptable  Boring\n+               0          7,105   <0.01%  Interesting  Whoa\n+              42    128,534,641    8.25%   Acceptable  Boring\n+\n+        Notably, some platforms go beyond the formal JMM requirement, and forbid this result.\n+\n+        For example, PPC64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  2,085,381,011   75.77%   Acceptable  Boring\n+               0              0    0.00%  Interesting  Whoa\n+              42    666,849,645   24.23%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(id = \"0\",          expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class Synthetic {\n+        static class Holder {\n+            volatile int x;\n+            Holder() {\n+                x = 42;\n+            }\n+        }\n+\n+        Holder h;\n+\n+        @Actor\n+        void thread1() {\n+            h = new Holder();\n+        }\n+\n+        @Actor\n+        void thread2(I_Result r) {\n+            Holder lh = h;\n+            if (lh != null) {\n+                r.r1 = lh.x;\n+            } else {\n+                r.r1 = -1;\n+            }\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        The real life consequence of this rule is racy publication of otherwise thread-safe classes,\n+        like AtomicInteger.\n+\n+        Again, on AArch64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  1,358,737,999   90.09%   Acceptable  Boring\n+               0          8,322   <0.01%  Interesting  Whoa\n+              42    149,426,735    9.91%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(id = \"0\",          expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class RealLife {\n+        AtomicInteger ai;\n+\n+        @Actor\n+        void thread1() {\n+            ai = new AtomicInteger(42);\n+        }\n+\n+        @Actor\n+        void thread2(I_Result r) {\n+            AtomicInteger lai = ai;\n+            if (lai != null) {\n+                r.r1 = lai.get();\n+            } else {\n+                r.r1 = -1;\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_13_VolatileVsFinal.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,248 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class AdvancedJMM_14_BenignRaces {\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_14_BenignRaces[.SubTestName]\n+     *\/\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        The well established semantics under the racy accesses allows to construct the examples where\n+        object are published without problems via the race. This condition is known as \"benign race\".\n+        It generally follows this form:\n+\n+            T get() {\n+                T t = instance;      \/\/ 1: SINGLE racy read\n+                if (t == null) {\n+                    t = new T(...);  \/\/ 2: SAFE, IDEMPOTENT construction\n+                    instance = t;    \/\/ racy store\n+                }\n+                return t;\n+            }\n+\n+        The mechanics of this benign race is understandable: if we read something, we read it in full,\n+        because final field semantics saves us (see BasicJMM_08_Finals example). If we read null, then\n+        we can recover by creating the instance ourselves and persist it for future callers. Since\n+        there might be a write-write race here, it is important that construction is idempotent, so\n+        regardless how many threads are initializing the object, all of them would store the semantically\n+        identical object.\n+\n+        The additional wrinkle from the JMM is the need for the single read. If we read the instance field\n+        once, figure out it is not null, and then read it again, we might get null on second read!\n+        This is similar to the BasicJMM_05_Coherence example.\n+\n+        In this test, we make such failures even more likely by introducing the \"eraser\" actor that\n+        drops the reference back to null. Correctly coded benign races should stay benign.\n+\n+        Indeed, \"Full\" test that satisfies all this conditions only sees the values we want:\n+\n+        x86_64, AArch64, PPC64:\n+          RESULT         SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          42, 42  37,567,132,672  100.00%  Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"42, 42\", expect = ACCEPTABLE, desc = \"Boring\")\n+    @Outcome(               expect = FORBIDDEN,  desc = \"Cannot happen\")\n+    public static class Full {\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            MyObject m = get();\n+            r.r1 = (m != null) ? m.x : -1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            MyObject m = get();\n+            r.r2 = (m != null) ? m.x : -1;\n+        }\n+\n+        @Actor\n+        public void eraser() {\n+            instance = null;\n+        }\n+\n+        MyObject instance;\n+\n+        MyObject get() {\n+            MyObject t = instance;\n+            if (t == null) {\n+                t = new MyObject(42);\n+                instance = t;\n+            }\n+            return t;\n+        }\n+\n+        static class MyObject {\n+            final int x;\n+            MyObject(int x) {\n+                this.x = x;\n+            }\n+        }\n+    }\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        This changes if we relax either of the benign races requirements. For example, dropping \"final\"\n+        from the constructed object makes its construction unsafe, and thus we expose ourselves ot \"0\" outcomes.\n+        Indeed, that is seen on real hardware:\n+\n+        AArch64:\n+          RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+           0, 42       27,454   <0.01%  Interesting  Whoa\n+           42, 0       43,986   <0.01%  Interesting  Whoa\n+          42, 42  966,405,616   99.99%   Acceptable  Boring\n+\n+        PPC64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+           0, 42        129,204   <0.01%  Interesting  Whoa\n+           42, 0         61,951   <0.01%  Interesting  Whoa\n+          42, 42  2,182,111,821   99.99%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"42, 42\", expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(               expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class NonFinal {\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            MyObject m = get();\n+            r.r1 = (m != null) ? m.x : -1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            MyObject m = get();\n+            r.r2 = (m != null) ? m.x : -1;\n+        }\n+\n+        @Actor\n+        public void eraser() {\n+            instance = null;\n+        }\n+\n+        MyObject instance;\n+\n+        MyObject get() {\n+            MyObject t = instance;\n+            if (t == null) {\n+                t = new MyObject(42);\n+                instance = t;\n+            }\n+            return t;\n+        }\n+\n+        static class MyObject {\n+            int x;\n+            MyObject(int x) {\n+                this.x = x;\n+            }\n+        }\n+    }\n+\n+    \/*\n+       ----------------------------------------------------------------------------------------------------------\n+\n+        Relaxing the double-read requirements exposes us to nulls, as explained above.\n+\n+        x86_64:\n+          RESULT         SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          -1, -1         294,812   <0.01%  Interesting  Whoa\n+          -1, 42       4,644,317    0.01%  Interesting  Whoa\n+          42, -1       4,736,261    0.01%  Interesting  Whoa\n+          42, 42  33,188,817,282   99.97%   Acceptable  Boring\n+\n+        AArch64:\n+          RESULT         SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          -1, -1         147,415   <0.01%  Interesting  Whoa\n+          -1, 42       1,076,573   <0.01%  Interesting  Whoa\n+          42, -1       1,106,320   <0.01%  Interesting  Whoa\n+          42, 42  12,180,344,380   99.98%   Acceptable  Boring\n+\n+        PPC64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+           0, 42        129,204   <0.01%  Interesting  Whoa\n+           42, 0         61,951   <0.01%  Interesting  Whoa\n+          42, 42  2,182,111,821   99.99%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = \"42, 42\", expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(               expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class DoubleRead {\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            MyObject m = get();\n+            r.r1 = (m != null) ? m.x : -1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            MyObject m = get();\n+            r.r2 = (m != null) ? m.x : -1;\n+        }\n+\n+        @Actor\n+        public void eraser() {\n+            instance = null;\n+        }\n+\n+        MyObject instance;\n+\n+        MyObject get() {\n+            if (instance == null) {\n+                instance = new MyObject(42);\n+            }\n+            return instance;\n+        }\n+\n+        static class MyObject {\n+            final int x;\n+            MyObject(int x) {\n+                this.x = x;\n+            }\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_14_BenignRaces.java","additions":248,"deletions":0,"binary":false,"changes":248,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.L_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = \"null\",                   expect = ACCEPTABLE, desc = \"Not seeing the object yet\")\n+@Outcome(id = \"class java.lang.Object\", expect = ACCEPTABLE, desc = \"Seeing the object, valid class\")\n+@Outcome(                               expect = FORBIDDEN,  desc = \"Other cases are illegal\")\n+@State\n+public class BasicJMM_01_DataRaces {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_01_DataRaces\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This is our first case: data race. There is a conflict: writer and reader access\n+        the same location without any synchronization. That is a _data race_, by definition.\n+\n+        This test might look trivial, but it actually highlights a rather strong Java property:\n+        even in the presence of data races, the behavior can be reasonable. Notably, data races\n+        do not break the JVM. Here, we are publishing the object through the race, but even\n+        then the object has all metadata set, so we can ask the classes, call the methods,\n+        access the fields.\n+\n+        On all platforms, this test yields:\n+\n+                      RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+      class java.lang.Object  3,619,439,149   51.74%  Acceptable  Seeing the object, valid class\n+                        null  3,376,358,355   48.26%  Acceptable  Not seeing the object yet\n+\n+    *\/\n+\n+    Object o;\n+\n+    @Actor\n+    public void writer() {\n+        o = new Object();\n+    }\n+\n+    @Actor\n+    public void reader(L_Result r) {\n+        Object lo = o;\n+        if (lo != null) {\n+            try {\n+                r.r1 = lo.getClass();\n+            } catch (NullPointerException npe) {\n+                r.r1 = npe;\n+            }\n+        } else {\n+            r.r1 = null;\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_01_DataRaces.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,444 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+import org.openjdk.jcstress.infra.results.J_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n+\n+public class BasicJMM_02_AccessAtomicity {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_02_AccessAtomicity[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This is our second case: access atomicity. Most basic types come with an\n+        intuitive property: the reads and the writes of these basic types happen\n+        in full, even under races:\n+\n+          RESULT         SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              -1  11,916,557,823   81.45%  Acceptable  Seeing the full value.\n+               0   2,714,388,481   18.55%  Acceptable  Seeing the default value: writer had not acted yet.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0\",  expect = ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"-1\", expect = ACCEPTABLE, desc = \"Seeing the full value.\")\n+    @Outcome(           expect = FORBIDDEN,  desc = \"Other cases are forbidden.\")\n+    @State\n+    public static class Integers {\n+        int v;\n+\n+        @Actor\n+        public void writer() {\n+            v = 0xFFFFFFFF;\n+        }\n+\n+        @Actor\n+        public void reader(I_Result r) {\n+            r.r1 = v;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        There are a few interesting exceptions codified in Java Language Specification,\n+        under 17.7 \"Non-Atomic Treatment of double and long\". It says that longs and\n+        doubles could be treated non-atomically.\n+\n+        This test would yield interesting results on some 32-bit VMs, for example x86_32:\n+\n+               RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+                   -1  8,818,463,884   70.12%   Acceptable  Seeing the full value.\n+          -4294967296      9,586,556    0.08%  Interesting  Other cases are violating access atomicity, but allowed u...\n+                    0  3,747,652,022   29.80%   Acceptable  Seeing the default value: writer had not acted yet.\n+           4294967295         86,082   <0.01%  Interesting  Other cases are violating access atomicity, but allowed u...\n+\n+        Other 32-bit VMs may still choose to use the advanced instructions to regain atomicity,\n+        for example on ARMv7 (32-bit):\n+\n+              RESULT     SAMPLES     FREQ       EXPECT  DESCRIPTION\n+                  -1  96,332,256   79.50%   Acceptable  Seeing the full value.\n+                   0  24,839,456   20.50%   Acceptable  Seeing the default value: writer had not acted yet.\n+\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0\",  expect = ACCEPTABLE,             desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"-1\", expect = ACCEPTABLE,             desc = \"Seeing the full value.\")\n+    @Outcome(           expect = ACCEPTABLE_INTERESTING, desc = \"Other cases are violating access atomicity, but allowed under JLS.\")\n+    @Ref(\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se8\/html\/jls-17.html#jls-17.7\")\n+    @State\n+    public static class Longs {\n+        long v;\n+\n+        @Actor\n+        public void writer() {\n+            v = 0xFFFFFFFF_FFFFFFFFL;\n+        }\n+\n+        @Actor\n+        public void reader(J_Result r) {\n+            r.r1 = v;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Recovering the access atomicity is possible with making the field \"volatile\":\n+\n+        x86_32:\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              -1  1,306,213,861   17.27%  Acceptable  Seeing the full value.\n+               0  6,257,145,883   82.73%  Acceptable  Seeing the default value: writer had not acted yet.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0\",  expect = ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"-1\", expect = ACCEPTABLE, desc = \"Seeing the full value.\")\n+    @Outcome(           expect = FORBIDDEN,  desc = \"Other cases are forbidden.\")\n+    @State\n+    public static class VolatileLongs {\n+        volatile long v;\n+\n+        @Actor\n+        public void writer() {\n+            v = 0xFFFFFFFF_FFFFFFFFL;\n+        }\n+\n+        @Actor\n+        public void reader(J_Result r) {\n+            r.r1 = v;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Since Java 9, VarHandles in \"opaque\" access mode also require access atomicity. The upside for using\n+        opaque instead of volatile is avoiding carrying the additional memory semantics, which makes volatiles\n+        slower.\n+\n+        x86_32:\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              -1  7,306,206,964   64.70%  Acceptable  Seeing the full value.\n+               0  3,985,362,700   35.30%  Acceptable  Seeing the default value: writer had not acted yet.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0\",  expect = ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"-1\", expect = ACCEPTABLE, desc = \"Seeing the full value.\")\n+    @Outcome(           expect = FORBIDDEN,  desc = \"Other cases are forbidden.\")\n+    @State\n+    public static class OpaqueLongs {\n+\n+        static final VarHandle VH;\n+\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(OpaqueLongs.class, \"v\", long.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        long v;\n+\n+        @Actor\n+        public void writer() {\n+            VH.setOpaque(this, 0xFFFFFFFF_FFFFFFFFL);\n+        }\n+\n+        @Actor\n+        public void reader(J_Result r) {\n+            r.r1 = (long) VH.getOpaque(this);\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        While the spec requirements for field and array element accesses are\n+        strict, the implementations of concrete classes may have a relaxed\n+        semantics. Take ByteBuffer where we can read the 4-byte integer from\n+        an arbitrary offset.\n+\n+        Older ByteBuffer implementations accessed one byte at a time, and that\n+        required merging\/splitting anything larger than a byte into the individual\n+        operations. Of course, there is no access atomicity there by construction.\n+        In newer ByteBuffer implementations, the _aligned_ accesses are done with\n+        larger instructions that gives back atomicity. Misaligned accesses would\n+        still have to do several narrower accesses on machines that don't support\n+        misalignments.\n+\n+        x86_64:\n+             RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+                 -1  142,718,041   61.57%   Acceptable  Seeing the full value.\n+          -16711936            4   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+          -16777216      111,579    0.05%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+               -256      110,267    0.05%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+             -65281            3   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+             -65536      111,618    0.05%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+                  0   88,765,143   38.29%   Acceptable  Seeing the default value: writer had not acted yet.\n+           16711680           36   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+           16777215            5   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+                255            1   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+              65535            7   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+    *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0\",  expect = ACCEPTABLE,             desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"-1\", expect = ACCEPTABLE,             desc = \"Seeing the full value.\")\n+    @Outcome(           expect = ACCEPTABLE_INTERESTING, desc = \"Other cases are allowed, because reads\/writes are not atomic.\")\n+    @State\n+    public static class ByteBuffers {\n+        public static final int SIZE = 256;\n+\n+        ByteBuffer bb = ByteBuffer.allocate(SIZE);\n+        int idx = ThreadLocalRandom.current().nextInt(SIZE - 4);\n+\n+        @Actor\n+        public void writer() {\n+            bb.putInt(idx, 0xFFFFFFFF);\n+        }\n+\n+        @Actor\n+        public void reader(I_Result r) {\n+            r.r1 = bb.getInt(idx);\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        However, even if the misaligned accesses is supported by hardware, it would never\n+        be guaranteed atomic. For example, reading the value that spans two cache-lines would\n+        not be atomic, even if we manage to issue a single instruction for access.\n+\n+        x86_64:\n+             RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+                 -1  127,819,822   48.55%   Acceptable  Seeing the full value.\n+          -16777216           17   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+               -256           17   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+             -65536           11   <0.01%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+                  0  134,990,763   51.27%   Acceptable  Seeing the default value: writer had not acted yet.\n+           16777215      154,265    0.06%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+                255      154,643    0.06%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+              65535      154,446    0.06%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0\",  expect = ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"-1\", expect = ACCEPTABLE, desc = \"Seeing the full value.\")\n+    @Outcome(expect = ACCEPTABLE_INTERESTING, desc = \"Other cases are allowed, because reads\/writes are not atomic.\")\n+    @State\n+    public static class UnsafeCrossCacheLine {\n+\n+        public static final int SIZE = 256;\n+        public static final long ARRAY_BASE_OFFSET = UNSAFE.arrayBaseOffset(byte[].class);\n+        public static final long ARRAY_BASE_SCALE = UNSAFE.arrayIndexScale(byte[].class);\n+\n+        byte[] ss = new byte[SIZE];\n+        long off = ARRAY_BASE_OFFSET + ARRAY_BASE_SCALE * ThreadLocalRandom.current().nextInt(SIZE - 4);\n+\n+        @Actor\n+        public void writer() {\n+            UNSAFE.putInt(ss, off, 0xFFFFFFFF);\n+        }\n+\n+        @Actor\n+        public void reader(I_Result r) {\n+            r.r1 = UNSAFE.getInt(ss, off);\n+        }\n+    }\n+\n+\n+    \/\/ ======================================= EARLY VALHALLA EXAMPLES BELOW =======================================\n+    \/\/ These require Valhalla JDK builds.\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        While most modern hardware implementation provide access atomicity for all Java primitive types,\n+        the issue with access atomicity raises it ugly head again with Project Valhalla, which strives\n+        to introduce multi-field classes that behave like primitives. There, reading the entirety of\n+        the \"inlined\" (\"flattened\") primitive type is sometimes not possible, because the effective\n+        data type width is too large. Therefore, we would normally see access atomicity violations.\n+\n+        Indeed, on x86_64 this happens:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0    790,816,955   22.90%   Acceptable  Seeing the default value: writer had not acted yet.\n+            0, 1      2,154,875    0.06%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+            1, 0      2,385,714    0.07%  Interesting  Other cases are allowed, because reads\/writes are not ato...\n+            1, 1  2,658,516,120   76.97%   Acceptable  Seeing the full value.\n+     *\/\n+\n+    \/*\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Seeing the full value.\")\n+    @Outcome(expect = ACCEPTABLE_INTERESTING, desc = \"Other cases are allowed, because reads\/writes are not atomic.\")\n+    @State\n+    public static class Values {\n+        static primitive class Value {\n+            long x;\n+            long y;\n+            public Value(long x, long y) {\n+                this.x = x;\n+                this.y = y;\n+            }\n+        }\n+\n+        Value v = Value.default;\n+\n+        @Actor\n+        public void writer() {\n+            v = new Value(1, 1);\n+        }\n+\n+        @Actor\n+        public void reader(JJ_Result r) {\n+            Value tv = v;\n+            r.r1 = tv.x;\n+            r.r2 = tv.y;\n+        }\n+    }\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        As usual, marking the primitive field \"volatile\" regains the access atomicity. In current implementations,\n+        this happens by forbidding the \"flattening\" of the inline type.\n+\n+        x86_64:\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  2,780,487,683   84.19%  Acceptable  Seeing the default value: writer had not acted yet.\n+            1, 1    522,202,621   15.81%  Acceptable  Seeing the full value.\n+     *\/\n+\n+    \/*\n+\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Seeing the full value.\")\n+    @Outcome(expect = FORBIDDEN, desc = \"Other cases are forbidden.\")\n+    @State\n+    public static class VolatileValues {\n+        static primitive class Value {\n+            long x;\n+            long y;\n+            public Value(long x, long y) {\n+                this.x = x;\n+                this.y = y;\n+            }\n+        }\n+\n+        volatile Value v = Value.default;\n+\n+        @Actor\n+        public void writer() {\n+            v = new Value(1, 1);\n+        }\n+\n+        @Actor\n+        public void reader(JJ_Result r) {\n+            Value tv = v;\n+            r.r1 = tv.x;\n+            r.r2 = tv.y;\n+        }\n+    }\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        The awkward case is when the primitive field is not marked specifically, so field layouter flattens\n+        the type, but then the the primitive field is used as \"opaque\". In this case, the implementation\n+        has to enforce atomicity by e.g. locking.\n+\n+        x86_64:\n+            RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              0, 0    542,416,624   25.36%  Acceptable  Seeing the default value: writer had not acted yet.\n+              1, 1  1,596,364,560   74.64%  Acceptable  Seeing the full value.\n+     *\/\n+\n+    \/*\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Seeing the default value: writer had not acted yet.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Seeing the full value.\")\n+    @Outcome(expect = FORBIDDEN, desc = \"Other cases are forbidden.\")\n+    @State\n+    public static class OpaqueValues {\n+        static primitive class Value {\n+            long x;\n+            long y;\n+            public Value(long x, long y) {\n+                this.x = x;\n+                this.y = y;\n+            }\n+        }\n+\n+        Value v = Value.default;\n+\n+        static final VarHandle VH;\n+\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(OpaqueValues.class, \"v\", Value.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        @Actor\n+        public void writer() {\n+            VH.setOpaque(this, new Value(1, 1));\n+        }\n+\n+        @Actor\n+        public void reader(JJ_Result r) {\n+            Value tv = (Value) VH.getOpaque(this);\n+            r.r1 = tv.x;\n+            r.r2 = tv.y;\n+        }\n+    }\n+    *\/\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_02_AccessAtomicity.java","additions":444,"deletions":0,"binary":false,"changes":444,"status":"added"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.util.BitSet;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class BasicJMM_03_WordTearing {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_03_WordTearing[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Java Memory Model prohibits word tearing. That is, it requires that\n+        every field and array element as distinct, and the operations for one\n+        element should not disturb others.\n+\n+        Note this is a bit different from access atomicity. Access atomicity says\n+        that the accesses to a _wide_ logical field should be atomic, even if it\n+        requires several _narrower_ physical accesses. Prohibited word tearing\n+        means the accesses to a _narrow_ logical field should not disturb the\n+        adjacent fields, even if done with a _wider_ physical access.\n+\n+        Indeed, the test on plain boolean arrays shows this rule holds:\n+\n+              RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          true, true  489,444,864  100.00%  Acceptable  Seeing both updates intact.\n+      *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"true, true\", expect = ACCEPTABLE, desc = \"Seeing both updates intact.\")\n+    @Outcome(                   expect = FORBIDDEN,  desc = \"Other cases are forbidden.\")\n+    @State\n+    public static class JavaArrays {\n+        boolean[] bs = new boolean[2];\n+\n+        @Actor\n+        public void writer1() {\n+            bs[0] = true;\n+        }\n+\n+        @Actor\n+        public void writer2() {\n+            bs[1] = true;\n+        }\n+\n+        @Arbiter\n+        public void arbiter(ZZ_Result r) {\n+            r.r1 = bs[0];\n+            r.r2 = bs[1];\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        However, while that requirement is enforced for fields and array elements, the\n+        Java classes implementations may still violate this requirement, if, say, they\n+        pack elements densely, and read\/write adjacent elements routinely. The usual\n+        example of this is java.util.BitSet.\n+\n+        Indeed, this is simple to reproduce:\n+\n+               RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          false, true   75,809,316   16.27%  Interesting  Destroyed one update.\n+          true, false   84,291,298   18.09%  Interesting  Destroyed one update.\n+           true, true  305,945,850   65.65%   Acceptable  Seeing both updates intact.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"true, true\",  expect = ACCEPTABLE, desc = \"Seeing both updates intact.\")\n+    @Outcome(id = \"false, true\", expect = ACCEPTABLE_INTERESTING, desc = \"Destroyed one update.\")\n+    @Outcome(id = \"true, false\", expect = ACCEPTABLE_INTERESTING, desc = \"Destroyed one update.\")\n+    @State\n+    public static class BitSets {\n+\n+        BitSet bs = new BitSet();\n+\n+        @Actor\n+        public void writer1() {\n+            bs.set(0);\n+        }\n+\n+        @Actor\n+        public void writer2() {\n+            bs.set(1);\n+        }\n+\n+        @Arbiter\n+        public void arbiter(ZZ_Result r) {\n+            r.r1 = bs.get(0);\n+            r.r2 = bs.get(1);\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        When no Java code explicitly accepts the word tearing, the JVM has to work with hardware\n+        to prohibit it. On the majority of hardware platforms, all accesses are possible with\n+        their natural widths: bytes can be accessed with 1-byte accesses, shorts with 2-byte accesses,\n+        etc. The exception from that rule is boolean, which can be technically represented with\n+        a single bit, but most hardware has only 1-byte reads\/writes. Because of this, JVM normally\n+        allocates 1 byte per boolean.\n+\n+        There are peculiarities with atomic instructions. When the sub-word atomic accesses are done\n+        on platforms that do not have direct sub-word accesses, CASes should still work _as if_\n+        the boolean fields are distinct.\n+\n+        For example, this test passes on ARM32 (that does not have byte-wide CASes). The test verifies\n+        that CAS over each of the fields do not conflict, and both are able to succeed.\n+\n+              RESULT     SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          true, true  62,199,552  100.00%  Acceptable  All CASes succeed\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"true, true\", expect = ACCEPTABLE, desc = \"All CASes succeed\")\n+    @Outcome(                   expect = FORBIDDEN,  desc = \"CAS word tearing\")\n+    @State\n+    public static class ByteCAS {\n+        static final VarHandle VH_A, VH_B;\n+\n+        static {\n+            try {\n+                VH_A = MethodHandles.lookup().findVarHandle(ByteCAS.class, \"a\", boolean.class);\n+                VH_B = MethodHandles.lookup().findVarHandle(ByteCAS.class, \"b\", boolean.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        boolean a;\n+        boolean b;\n+\n+        @Actor\n+        public void cas1(ZZ_Result r) {\n+            r.r1 = VH_A.compareAndSet(this, false, true);\n+        }\n+\n+        @Actor\n+        public void cas2(ZZ_Result r) {\n+            r.r2 = VH_B.compareAndSet(this, false, true);\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_03_WordTearing.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.*;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class BasicJMM_04_Progress {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_04_Progress[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        One naively can expect that writes to variables are eventually visible. However, under Java Memory Model,\n+        this does not apply to plain reads and writes. The usual example is the busy loop in plain field.\n+        The optimizing compiler is allowed to check the field once, and if it is \"false\", reduce the rest of\n+        the loop into \"while(true)\", infinite version.\n+\n+        Indeed, running this on just about any platform yields:\n+\n+              RESULT  SAMPLES     FREQ       EXPECT  DESCRIPTION\n+               STALE        4   50.00%  Interesting  Test is stuck\n+          TERMINATED        4   50.00%   Acceptable  Gracefully finished\n+      *\/\n+\n+    @JCStressTest(Mode.Termination)\n+    @Outcome(id = \"TERMINATED\", expect = ACCEPTABLE,             desc = \"Gracefully finished\")\n+    @Outcome(id = \"STALE\",      expect = ACCEPTABLE_INTERESTING, desc = \"Test is stuck\")\n+    @State\n+    public static class PlainSpin {\n+        boolean ready;\n+\n+        @Actor\n+        public void actor1() {\n+            while (!ready); \/\/ spin\n+        }\n+\n+        @Signal\n+        public void signal() {\n+            ready = true;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Making the field \"volatile\" is the surefire way to achieve progress guarantees.\n+        All volatile writes are eventually visible, so the loop eventually terminates.\n+\n+        Indeed, this is guaranteed to happen on all platforms:\n+\n+              RESULT  SAMPLES    FREQ       EXPECT  DESCRIPTION\n+               STALE        0    0.0%  Interesting  Test is stuck\n+          TERMINATED   17,882  100.0%   Acceptable  Gracefully finished\n+     *\/\n+\n+    @JCStressTest(Mode.Termination)\n+    @Outcome(id = \"TERMINATED\", expect = ACCEPTABLE,             desc = \"Gracefully finished\")\n+    @Outcome(id = \"STALE\",      expect = ACCEPTABLE_INTERESTING, desc = \"Test is stuck\")\n+    @State\n+    public static class VolatileSpin {\n+        volatile boolean ready;\n+\n+        @Actor\n+        public void actor1() {\n+            while (!ready); \/\/ spin\n+        }\n+\n+        @Signal\n+        public void signal() {\n+            ready = true;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        In fact, the overwhelming majority of hardware makes writes eventually visible, so what\n+        we minimally want is to make the accesses opaque to the optimizing compilers. Luckily,\n+        that is simple to do with VarHandles.{set|get}Opaque.\n+\n+        Indeed, this is guaranteed to happen on all platforms:\n+\n+              RESULT  SAMPLES     FREQ      EXPECT  DESCRIPTION\n+               STALE        0    0.00%   Forbidden  Test is stuck\n+          TERMINATED   17,902  100.00%  Acceptable  Gracefully finished\n+     *\/\n+\n+    @JCStressTest(Mode.Termination)\n+    @Outcome(id = \"TERMINATED\", expect = ACCEPTABLE, desc = \"Gracefully finished\")\n+    @Outcome(id = \"STALE\",      expect = FORBIDDEN,  desc = \"Test is stuck\")\n+    @State\n+    public static class OpaqueSpin {\n+        static final VarHandle VH;\n+\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(OpaqueSpin.class, \"ready\", boolean.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        boolean ready;\n+\n+        @Actor\n+        public void actor1() {\n+            while (!(boolean)VH.getOpaque(this)); \/\/ spin\n+        }\n+\n+        @Signal\n+        public void signal() {\n+            VH.setOpaque(this, true);\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_04_Progress.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -0,0 +1,205 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class BasicJMM_05_Coherence {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_05_Coherence[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Yet another subtle and intuitive property comes from the naive understanding\n+        of how programs work. Under Java Memory Model, in absence of synchronization,\n+        the order of independent reads is undefined. That includes reads of the *same*\n+        variable!\n+\n+          RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0   14,577,607    6.96%   Acceptable  Doing both reads early.\n+            0, 1       24,942    0.01%   Acceptable  Doing first read early, not surprising.\n+            1, 0        6,376   <0.01%  Interesting  First read seen racy value early, and the second one did ...\n+            1, 1  194,792,419   93.02%   Acceptable  Doing both reads late.\n+    *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n+    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Doing first read early, not surprising.\")\n+    @Outcome(id = \"1, 0\", expect = ACCEPTABLE_INTERESTING, desc = \"First read seen racy value early, and the second one did not.\")\n+    @State\n+    public static class SameRead {\n+\n+        private final Holder h1 = new Holder();\n+        private final Holder h2 = h1;\n+\n+        private static class Holder {\n+            int a;\n+            int trap;\n+        }\n+\n+        @Actor\n+        public void actor1() {\n+            h1.a = 1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            Holder h1 = this.h1;\n+            Holder h2 = this.h2;\n+\n+            \/\/ Spam null-pointer check folding: try to step on NPEs early.\n+            \/\/ Doing this early frees compiler from moving h1.a and h2.a loads\n+            \/\/ around, because it would not have to maintain exception order anymore.\n+            h1.trap = 0;\n+            h2.trap = 0;\n+\n+            \/\/ Spam alias analysis: the code effectively reads the same field twice,\n+            \/\/ but compiler does not know (h1 == h2) (i.e. does not check it, as\n+            \/\/ this is not a profitable opt for real code), so it issues two independent\n+            \/\/ loads.\n+            r.r1 = h1.a;\n+            r.r2 = h2.a;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        The stronger property -- coherence -- mandates that the writes to the same\n+        variable to be observed in a total order (that implies that _observers_ are\n+        also ordered). Java \"volatile\" assumes this property.\n+\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  114,696,597   30.95%  Acceptable  Doing both reads early.\n+            0, 1    2,126,717    0.57%  Acceptable  Doing first read early, not surprising.\n+            1, 0            0    0.00%   Forbidden  Violates coherence.\n+            1, 1  253,704,430   68.47%  Acceptable  Doing both reads late.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n+    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Doing first read early, not surprising.\")\n+    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Violates coherence.\")\n+    @State\n+    public static class SameVolatileRead {\n+\n+        private final Holder h1 = new Holder();\n+        private final Holder h2 = h1;\n+\n+        private static class Holder {\n+            volatile int a;\n+            int trap;\n+        }\n+\n+        @Actor\n+        public void actor1() {\n+            h1.a = 1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            Holder h1 = this.h1;\n+            Holder h2 = this.h2;\n+\n+            h1.trap = 0;\n+            h2.trap = 0;\n+\n+            r.r1 = h1.a;\n+            r.r2 = h2.a;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        VarHandles \"opaque\" mode also provide coherency.\n+\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0   22,265,880    6.07%  Acceptable  Doing both reads early.\n+            0, 1      147,500    0.04%  Acceptable  Doing first read early, not surprising.\n+            1, 0            0    0.00%   Forbidden  Violates coherence.\n+            1, 1  344,427,964   93.89%  Acceptable  Doing both reads late.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n+    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Doing first read early, not surprising.\")\n+    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Violates coherence.\")\n+    @State\n+    public static class SameOpaqueRead {\n+\n+        static final VarHandle VH;\n+\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(Holder.class, \"a\", int.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        private final Holder h1 = new Holder();\n+        private final Holder h2 = h1;\n+\n+        private static class Holder {\n+            int a;\n+            int trap;\n+        }\n+\n+        @Actor\n+        public void actor1() {\n+            VH.setOpaque(h1, 1);\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            Holder h1 = this.h1;\n+            Holder h2 = this.h2;\n+\n+            h1.trap = 0;\n+            h2.trap = 0;\n+\n+            r.r1 = (int) VH.getOpaque(h1);\n+            r.r2 = (int) VH.getOpaque(h2);\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_05_Coherence.java","additions":205,"deletions":0,"binary":false,"changes":205,"status":"added"},{"patch":"@@ -0,0 +1,275 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class BasicJMM_06_Causality {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_06_Causality[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        The next property helps some inter-thread semantics. In JMM, happens-before mandates\n+        what results are plausible and what are not, when non-synchronized reads are involved.\n+        That order is partial, so there are pairs of reads\/writes we can tell nothing about\n+        order-wise.\n+\n+        For example, in the case of two non-volatile variables, JMM allows observing\n+        \"1, 0\".\n+\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0    593,615,020    9.50%   Acceptable  Doing both reads early.\n+            0, 1     66,963,791    1.07%   Acceptable  Caught in the middle: $x is visible, $y is not.\n+            1, 0      5,559,858    0.09%  Interesting  Seeing $y, but not $x!\n+            1, 1  5,580,479,955   89.34%   Acceptable  Doing both reads late.\n+    *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n+    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Caught in the middle: $x is visible, $y is not.\")\n+    @Outcome(id = \"1, 0\", expect = ACCEPTABLE_INTERESTING, desc = \"Seeing $y, but not $x!\")\n+    @State\n+    public static class PlainReads {\n+        int x;\n+        int y;\n+\n+        @Actor\n+        public void actor1() {\n+            x = 1;\n+            y = 1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r1 = y;\n+            r.r2 = x;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+      We can bisect the result above a little by rewriting the test in \"opaque\" accesses. This way,\n+      we instruct optimizing compilers to keep the accesses in order, and let the hardware decide what\n+      semantics those accesses have.\n+\n+      On x86_64, which has the Total Store Order guarantee, we would not see the interesting case anymore:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0  1,136,906,006   19.41%   Acceptable  Doing both reads early.\n+            0, 1     78,452,276    1.34%   Acceptable  Caught in the middle: $x is visible, $y is not.\n+            1, 0              0    0.00%  Interesting  Seeing $y, but not $x!\n+            1, 1  4,642,078,902   79.25%   Acceptable  Doing both reads late.\n+\n+      On AArch64, which is weaker, we would see the interesting case:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0    494,407,410   24.00%   Acceptable  Doing both reads early.\n+            0, 1     26,332,570    1.28%   Acceptable  Caught in the middle: $x is visible, $y is not.\n+            1, 0     14,042,443    0.68%  Interesting  Seeing $y, but not $x!\n+            1, 1  1,525,203,753   74.04%   Acceptable  Doing both reads late.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n+    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Caught in the middle: $x is visible, $y is not.\")\n+    @Outcome(id = \"1, 0\", expect = ACCEPTABLE_INTERESTING, desc = \"Seeing $y, but not $x!\")\n+    @State\n+    public static class OpaqueReads {\n+        static final VarHandle VH_X;\n+        static final VarHandle VH_Y;\n+\n+        static {\n+            try {\n+                VH_X = MethodHandles.lookup().findVarHandle(OpaqueReads.class, \"x\", int.class);\n+                VH_Y = MethodHandles.lookup().findVarHandle(OpaqueReads.class, \"y\", int.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        int x;\n+        int y;\n+\n+        @Actor\n+        public void actor1() {\n+            VH_X.setOpaque(this, 1);\n+            VH_Y.setOpaque(this, 1);\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r1 = (int) VH_Y.getOpaque(this);\n+            r.r2 = (int) VH_X.getOpaque(this);\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+         The easiest way to solve this is to mark $y as \"volatile\". In this case, JMM would\n+         disallow seeing (1, 0). Volatile write would now be \"release\"-ing write and volatile\n+         read would now be \"acquiring\" read. That means all writes that precede releasing store\n+         would be visible to readers of acquiring read. Note this effect is only guaranteed\n+         if the acquiring read sees the value written by releasing write.\n+\n+         Indeed, in all configurations, we shall see zero samples for the now forbidden\n+         test case.\n+\n+         AArch64:\n+            RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              0, 0  615,329,595   53.92%  Acceptable  Doing both reads early.\n+              0, 1   38,517,623    3.37%  Acceptable  Caught in the middle: $x is visible, $y is not.\n+              1, 0            0    0.00%   Forbidden  Seeing $y, but not $x!\n+              1, 1  487,416,398   42.71%  Acceptable  Doing both reads late.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n+    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Caught in the middle: $x is visible, $y is not.\")\n+    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Seeing $y, but not $x!\")\n+    @State\n+    public static class VolatileGuard {\n+\n+        int x;\n+        volatile int y;\n+\n+        @Actor\n+        public void actor1() {\n+            x = 1;\n+            y = 1;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r1 = y;\n+            r.r2 = x;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        VarHandles acquire and release modes can be used to achieve the same effect, but\n+        anything weaker is not guaranteed to work.\n+\n+        AArch64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  782,933,737   60.67%  Acceptable  Doing both reads early.\n+            0, 1   12,754,346    0.99%  Acceptable  Caught in the middle: $x is visible, $y is not.\n+            1, 0            0    0.00%   Forbidden  Seeing $y, but not $x!\n+            1, 1  494,741,613   38.34%  Acceptable  Doing both reads late.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n+    @Outcome(id = \"0, 1\", expect = ACCEPTABLE, desc = \"Caught in the middle: $x is visible, $y is not.\")\n+    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Seeing $y, but not $x!\")\n+    @State\n+    public static class AcquireReleaseGuard {\n+        static final VarHandle VH;\n+\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(AcquireReleaseGuard.class, \"y\", int.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        int x;\n+        int y;\n+\n+        @Actor\n+        public void actor1() {\n+            x = 1;\n+            VH.setRelease(this, 1);\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            r.r1 = (int) VH.getAcquire(this);\n+            r.r2 = x;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Of course, the same thing is achievable with locks, except that (0, 1) is forbidden due to\n+        mutual exclusion of the entire locked section.\n+\n+        AArch64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  341,919,270   46.04%  Acceptable  Doing both reads early.\n+            0, 1            0    0.00%   Forbidden  Caught in the middle: $x is visible, $y is not.\n+            1, 0            0    0.00%   Forbidden  Seeing $y, but not $x!\n+            1, 1  400,772,826   53.96%  Acceptable  Doing both reads late.\n+     *\/\n+    @JCStressTest\n+    @Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"Doing both reads early.\")\n+    @Outcome(id = \"1, 1\", expect = ACCEPTABLE, desc = \"Doing both reads late.\")\n+    @Outcome(id = \"0, 1\", expect = FORBIDDEN, desc = \"Caught in the middle: $x is visible, $y is not.\")\n+    @Outcome(id = \"1, 0\", expect = FORBIDDEN, desc = \"Seeing $y, but not $x!\")\n+    @State\n+    public static class LockGuard {\n+\n+        int x;\n+        int y;\n+\n+        @Actor\n+        public void actor1() {\n+            synchronized (this) {\n+                x = 1;\n+                y = 1;\n+            }\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            synchronized (this) {\n+                r.r1 = y;\n+                r.r2 = x;\n+            }\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_06_Causality.java","additions":275,"deletions":0,"binary":false,"changes":275,"status":"added"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class BasicJMM_07_Consensus {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_07_Consensus[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Another property comes for the inter-thread semantics deals not with\n+        partial, but total order. In JMM, synchronization order mandates that\n+        special \"synchronization\" actions always form a total order, consistent\n+        with program order.\n+\n+        The most famous example that needs total order of operation is Dekker\n+        idiom, the building block of Dekker lock.\n+\n+        x86_64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0    349,652,433    6.29%  Interesting  Violates sequential consistency\n+            0, 1  2,566,329,748   46.14%   Acceptable  Trivial under sequential consistency\n+            1, 0  2,640,017,118   47.47%   Acceptable  Trivial under sequential consistency\n+            1, 1      5,522,365    0.10%   Acceptable  Trivial under sequential consistency\n+    *\/\n+\n+    @JCStressTest\n+    @Outcome(id = {\"0, 1\", \"1, 0\", \"1, 1\"}, expect = ACCEPTABLE,             desc = \"Trivial under sequential consistency\")\n+    @Outcome(id = \"0, 0\",                   expect = ACCEPTABLE_INTERESTING, desc = \"Violates sequential consistency\")\n+    @State\n+    public static class PlainDekker {\n+        int x;\n+        int y;\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            x = 1;\n+            r.r1 = y;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            y = 1;\n+            r.r2 = x;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Adding volatile to both $x and $y bring them together into synchronization order,\n+        and thus require the results to be consistent with the case when reads\/writes\n+        form a total order.\n+\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0              0    0.00%   Forbidden  Violates sequential consistency\n+            0, 1  1,016,018,128   44.40%  Acceptable  Trivial under sequential consistency\n+            1, 0  1,068,127,239   46.68%  Acceptable  Trivial under sequential consistency\n+            1, 1    204,027,177    8.92%  Acceptable  Trivial under sequential consistency\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = {\"0, 1\", \"1, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Trivial under sequential consistency\")\n+    @Outcome(id = \"0, 0\",                   expect = FORBIDDEN,  desc = \"Violates sequential consistency\")\n+    @State\n+    public static class VolatileDekker {\n+        volatile int x;\n+        volatile int y;\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            x = 1;\n+            r.r1 = y;\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            y = 1;\n+            r.r2 = x;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        VarHandles acquire and release modes are too weak to achieve the required effect.\n+        VarHandles opaque mode is also too weak.\n+\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+            0, 0    256,068,354    6.18%  Interesting  Violates sequential consistency\n+            0, 1  1,907,567,721   46.01%   Acceptable  Trivial under sequential consistency\n+            1, 0  1,975,159,576   47.64%   Acceptable  Trivial under sequential consistency\n+            1, 1      7,025,533    0.17%   Acceptable  Trivial under sequential consistency\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = {\"0, 1\", \"1, 0\", \"1, 1\"}, expect = ACCEPTABLE, desc = \"Trivial under sequential consistency\")\n+    @Outcome(id = \"0, 0\",                   expect = ACCEPTABLE_INTERESTING,  desc = \"Violates sequential consistency\")\n+    @State\n+    public static class AcqRelDekker {\n+        static final VarHandle VH_X;\n+        static final VarHandle VH_Y;\n+\n+        static {\n+            try {\n+                VH_X = MethodHandles.lookup().findVarHandle(AcqRelDekker.class, \"x\", int.class);\n+                VH_Y = MethodHandles.lookup().findVarHandle(AcqRelDekker.class, \"y\", int.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        int x;\n+        int y;\n+\n+        @Actor\n+        public void actor1(II_Result r) {\n+            VH_X.setRelease(this, 1);\n+            r.r1 = (int) VH_Y.getAcquire(this);\n+        }\n+\n+        @Actor\n+        public void actor2(II_Result r) {\n+            VH_Y.setRelease(this, 1);\n+            r.r2 = (int) VH_X.getAcquire(this);\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_07_Consensus.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"},{"patch":"@@ -0,0 +1,264 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.IIII_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class BasicJMM_08_Finals {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_08_Finals[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Finals are another aspect of Java Memory Model. They allow surviving the publication\n+        via the race. In other words, they provide some basic inter-thread semantics, even in\n+        the absence of proper synchronization.\n+\n+        x86_64:\n+                  RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          -1, -1, -1, -1  115,042,024   52.43%   Acceptable  Object is not seen yet.\n+              1, 0, 3, 0        3,892   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 3, 4       14,291   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 3, 0          123   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 3, 4  104,365,974   47.56%   Acceptable  Seen the complete object.\n+\n+        AArch64:\n+                  RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          -1, -1, -1, -1  508,775,120   84.84%   Acceptable  Object is not seen yet.\n+              0, 0, 0, 0        1,725   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 0, 0, 4          763   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 0, 3, 0            9   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 0, 3, 4           57   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 2, 0, 0           21   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 2, 0, 4        6,177   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 2, 3, 0           17   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 2, 3, 4        1,103   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 0, 0          101   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 0, 4           16   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 3, 0            1   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 3, 4          132   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 0, 0            7   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 0, 4          125   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 3, 0           91   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 3, 4   90,884,551   15.16%   Acceptable  Seen the complete object.\n+    *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"-1, -1, -1, -1\", expect = ACCEPTABLE,             desc = \"Object is not seen yet.\")\n+    @Outcome(id = \"1, 2, 3, 4\",     expect = ACCEPTABLE,             desc = \"Seen the complete object.\")\n+    @Outcome(                       expect = ACCEPTABLE_INTERESTING, desc = \"Seeing partially constructed object.\")\n+    @State\n+    public static class PlainInit {\n+        int v = 1;\n+\n+        MyObject o;\n+\n+        @Actor\n+        public void actor1() {\n+            o = new MyObject(v);\n+        }\n+\n+        @Actor\n+        public void actor2(IIII_Result r) {\n+            MyObject o = this.o;\n+            if (o != null) {\n+                r.r1 = o.x1;\n+                r.r2 = o.x2;\n+                r.r3 = o.x3;\n+                r.r4 = o.x4;\n+            } else {\n+                r.r1 = -1;\n+                r.r2 = -1;\n+                r.r3 = -1;\n+                r.r4 = -1;\n+            }\n+        }\n+\n+        public static class MyObject {\n+            int x1, x2, x3, x4;\n+            public MyObject(int v) {\n+                x1 = v;\n+                x2 = x1 + v;\n+                x3 = x2 + v;\n+                x4 = x3 + v;\n+            }\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        One might think this is caused by compilers publishing the object reference before all field stores\n+        complete. This can be checked by switching the publication\/acquisition accesses into \"opaque\" accesses.\n+\n+        Indeed, the observed partial construction goes away for x86_64:\n+\n+                  RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          -1, -1, -1, -1  208,243,420   65.50%   Acceptable  Object is not seen yet.\n+              1, 2, 3, 4  109,671,204   34.50%   Acceptable  Seen the complete object.\n+\n+        ...but not for AArch64, since the memory ordering is still not there:\n+\n+                  RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          -1, -1, -1, -1  554,933,051   85.40%   Acceptable  Object is not seen yet.\n+              0, 0, 0, 0        1,701   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 0, 0, 4          680   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 0, 3, 0           26   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 0, 3, 4           76   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 2, 0, 0           12   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 2, 0, 4           19   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 2, 3, 0           17   <0.01%  Interesting  Seeing partially constructed object.\n+              0, 2, 3, 4          850   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 0, 0          124   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 0, 4            1   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 3, 0            6   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 0, 3, 4            7   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 0, 0           17   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 0, 4           16   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 3, 0          106   <0.01%  Interesting  Seeing partially constructed object.\n+              1, 2, 3, 4   94,858,107   14.60%   Acceptable  Seen the complete object.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"-1, -1, -1, -1\", expect = ACCEPTABLE,             desc = \"Object is not seen yet.\")\n+    @Outcome(id = \"1, 2, 3, 4\",     expect = ACCEPTABLE,             desc = \"Seen the complete object.\")\n+    @Outcome(                       expect = ACCEPTABLE_INTERESTING, desc = \"Seeing partially constructed object.\")\n+    @State\n+    public static class OpaqueInit {\n+        static final VarHandle VH;\n+\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(OpaqueInit.class, \"o\", MyObject.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        int v = 1;\n+\n+        MyObject o;\n+\n+        @Actor\n+        public void actor1() {\n+            VH.setOpaque(this, new MyObject(v));\n+        }\n+\n+        @Actor\n+        public void actor2(IIII_Result r) {\n+            MyObject o = (MyObject) VH.getOpaque(this);\n+            if (o != null) {\n+                r.r1 = o.x1;\n+                r.r2 = o.x2;\n+                r.r3 = o.x3;\n+                r.r4 = o.x4;\n+            } else {\n+                r.r1 = -1;\n+                r.r2 = -1;\n+                r.r3 = -1;\n+                r.r4 = -1;\n+            }\n+        }\n+\n+        public static class MyObject {\n+            int x1, x2, x3, x4;\n+            public MyObject(int v) {\n+                x1 = v;\n+                x2 = x1 + v;\n+                x3 = x2 + v;\n+                x4 = x3 + v;\n+            }\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        The reliable way to see fully constructed object is synchronization. But there is another safety\n+        mechanism to survive the absense of proper synchronization: finals. If we put them on all critical\n+        fields, then the only observed state is full object.\n+\n+        x86_64, AArch64\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              -1  238,418,437   80.75%  Acceptable  Object is not seen yet.\n+               8   56,845,307   19.25%  Acceptable  Seen the complete object.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"-1, -1, -1, -1\", expect = ACCEPTABLE, desc = \"Object is not seen yet.\")\n+    @Outcome(id = \"1, 2, 3, 4\",     expect = ACCEPTABLE, desc = \"Seen the complete object.\")\n+    @Outcome(                       expect = FORBIDDEN,  desc = \"Everything else is forbidden.\")\n+    @State\n+    public static class FinalInit {\n+        int v = 1;\n+\n+        MyObject o;\n+\n+        @Actor\n+        public void actor1() {\n+            o = new MyObject(v);\n+        }\n+\n+        @Actor\n+        public void actor2(IIII_Result r) {\n+            MyObject o = this.o;\n+            if (o != null) {\n+                r.r1 = o.x1;\n+                r.r2 = o.x2;\n+                r.r3 = o.x3;\n+                r.r4 = o.x4;\n+            } else {\n+                r.r1 = -1;\n+                r.r2 = -1;\n+                r.r3 = -1;\n+                r.r4 = -1;\n+            }\n+        }\n+\n+        public static class MyObject {\n+            final int x1, x2, x3, x4;\n+            public MyObject(int v) {\n+                x1 = v;\n+                x2 = x1 + v;\n+                x3 = x2 + v;\n+                x4 = x3 + v;\n+            }\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_08_Finals.java","additions":264,"deletions":0,"binary":false,"changes":264,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.basic;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = \"0, 0\", expect = ACCEPTABLE, desc = \"The only valid result\")\n+@Outcome(             expect = FORBIDDEN,  desc = \"Every other result is forbidden\")\n+@State\n+public class BasicJMM_09_OOTA {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t BasicJMM_09_OOTA\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        One of the most complicated topics is Out-Of-Thin-Air (OOTA) values. It has to do with behavior\n+        under the normally non-existent races in some corner cases. For example, the program below should\n+        only have (0, 0) as the result. The optimizers are not allowed to perform the speculative write\n+        of either (x = 1) or (y = 1) until the read of \"x\" are \"y\" are satisfied. Otherwise, that speculation\n+        can turn into the self-justifying prophecy, which would yield (1, 1).\n+\n+        I.e. this transformation is illegal:\n+\n+          if (x == 1) {            y = 1; \/\/ speculate\n+            y = 1;        ---->    if (x != 1) {\n+          }                          y = 0; \/\/ restore\n+                                   }\n+\n+        If the transformation above happens, then there is a straighforward way to (1, 1):\n+\n+                                      y = 1\n+          if (y == 1) { \/\/ reads 1\n+              x = 1;    \/\/ stores 1\n+          }\n+                                      if (x != 1) {\n+                                         y = 0; \/\/ does not happen\n+                                      }\n+\n+        x86_64:\n+            RESULT         SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              0, 0  12,126,918,144  100.00%  Acceptable  The only valid result\n+    *\/\n+\n+    int x, y;\n+\n+    @Actor\n+    public void thread1() {\n+        if (x == 1) {\n+            y = 1;\n+        }\n+    }\n+\n+    @Actor\n+    public void thread2() {\n+        if (y == 1) {\n+            x = 1;\n+        }\n+    }\n+\n+    @Arbiter\n+    public void check(II_Result r) {\n+        r.r1 = x;\n+        r.r2 = y;\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_09_OOTA.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -75,0 +75,3 @@\n+                <configuration>\n+                    <skip>true<\/skip>\n+                <\/configuration>\n@@ -83,0 +86,3 @@\n+                <configuration>\n+                    <skip>true<\/skip>\n+                <\/configuration>\n","filename":"jcstress-test-base\/pom.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.tests.oota;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+@JCStressTest\n+@Outcome(id = {\"0, 0\", \"1, 1\", \"2, 2\"}, expect = Expect.ACCEPTABLE, desc = \"Nothing to see here\")\n+@Outcome(id = {\"2, 1\", \"1, 2\"},         expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Hm?\")\n+@Outcome(                               expect = Expect.FORBIDDEN,  desc = \"Other cases are illegal\")\n+@State\n+public class Sevcik_01_Redundant_WAR_Elimination {\n+\n+    int x;\n+    int y;\n+\n+    private final Object m1 = new Object();\n+    private final Object m2 = new Object();\n+\n+    @Actor\n+    public void thread1() {\n+        synchronized (m1) {\n+            x = 2;\n+        }\n+    }\n+\n+    @Actor\n+    public void thread2() {\n+        synchronized (m2) {\n+            x = 1;\n+        }\n+    }\n+\n+    @Actor\n+    public void thread3(II_Result r) {\n+        synchronized (m1) {\n+            synchronized (m2) {\n+                int t = x;\n+                x = t;\n+                r.r1 = t;\n+                r.r2 = x;\n+            }\n+        }\n+    }\n+\n+}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/oota\/Sevcik_01_Redundant_WAR_Elimination.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.tests.oota;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+@JCStressTest\n+@Outcome(id = \"0\", expect = Expect.ACCEPTABLE, desc = \"Nothing to see here\")\n+@Outcome(id = \"1\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Out of thin air!\")\n+@Outcome(          expect = Expect.FORBIDDEN,  desc = \"Other cases are illegal\")\n+@State\n+public class Sevcik_02_Redundant_RAR_Elimination {\n+\n+    int x;\n+    int y;\n+\n+    @Actor\n+    public void thread1() {\n+        int t1 = x;\n+        y = t1;\n+    }\n+\n+    @Actor\n+    public void thread2(I_Result r) {\n+        int t2 = y;\n+        if (t2 == 1) {\n+            int t3 = y;\n+            x = t3;\n+        } else {\n+            x = 1;\n+        }\n+        r.r1 = t2;\n+    }\n+\n+}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/oota\/Sevcik_02_Redundant_RAR_Elimination.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.tests.oota;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.III_Result;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+@JCStressTest\n+@Outcome(id = \".*, 0, 0\", expect = Expect.ACCEPTABLE, desc = \"Nothing to see here\")\n+@Outcome(id = \".*, 0, 1\", expect = Expect.ACCEPTABLE, desc = \"Nothing to see here\")\n+@Outcome(id = \"1, 1, 1\",  expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Out of thin air\")\n+@Outcome(                 expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Interesting?\")\n+@State\n+public class Sevcik_03_RoachMotel {\n+\n+    int x;\n+    int y;\n+    int z;\n+\n+    private final Object m = new Object();\n+\n+    @Actor\n+    public void thread1() {\n+        synchronized (m) {\n+            x = 2;\n+        }\n+    }\n+\n+    @Actor\n+    public void thread2() {\n+        synchronized (m) {\n+            x = 1;\n+        }\n+    }\n+\n+    @Actor\n+    public void thread3(III_Result r) {\n+        int t1 = x;\n+        synchronized (m) {\n+            int t2 = z;\n+            if (t1 == 2) {\n+                y = 1;\n+            } else {\n+                y = t2;\n+            }\n+            r.r2 = t2;\n+        }\n+        r.r1 = t1;\n+    }\n+\n+    @Actor\n+    public void thread4(III_Result r) {\n+        int t3 = y;\n+        z = t3;\n+        r.r3 = t3;\n+    }\n+\n+}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/oota\/Sevcik_03_RoachMotel.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.tests.oota;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.III_Result;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+@JCStressTest\n+@Outcome(id = {\"0, 0\", \"0, 1\"}, expect = Expect.ACCEPTABLE, desc = \"Nothing to see here\")\n+@Outcome(id = \"1, 1\",           expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Out of thin air!\")\n+@Outcome(                       expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Interesting?\")\n+@State\n+public class Sevcik_04_IrrelevantRead {\n+\n+    int x;\n+    int y;\n+    int z;\n+\n+    @Actor\n+    public void thread1(II_Result r) {\n+        int t1 = z;\n+        if (t1 == 0) {\n+            int t3 = x;\n+            if (t3 == 1) {\n+                y = 1;\n+            }\n+        } else {\n+            int t4 = x;\n+            t4 = 1;\n+            y = t1;\n+        }\n+        r.r1 = t1;\n+    }\n+\n+    @Actor\n+    public void thread2(II_Result r) {\n+        x = 1;\n+        int t2 = y;\n+        z = t2;\n+        r.r2 = t2;\n+    }\n+\n+}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/oota\/Sevcik_04_IrrelevantRead.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.tests.oota;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+@JCStressTest\n+@Outcome(id = \"0\", expect = Expect.ACCEPTABLE, desc = \"Nothing to see here\")\n+@Outcome(id = \"1\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Out of thin air!\")\n+@Outcome(          expect = Expect.FORBIDDEN,  desc = \"Other cases are illegal\")\n+@State\n+public class Sevcik_05_IllegalTransform {\n+\n+    int x;\n+    int y;\n+\n+    @Actor\n+    public void thread1() {\n+        int t = x;\n+        y = t;\n+    }\n+\n+    @Actor\n+    public void thread2(I_Result r) {\n+        int t = y;\n+        x = (t == 1) ? y : 1;\n+        r.r1 = t;\n+    }\n+\n+}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/oota\/Sevcik_05_IllegalTransform.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.tests.strings;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.L_Result;\n+\n+@JCStressTest\n+@Outcome(id = \"b{0,4}\", expect = Expect.ACCEPTABLE, desc = \"All appends are visible\")\n+@State\n+public class StringBufferAppendTest {\n+\n+    StringBuffer mutatingSB = new StringBuffer(0);  \/\/ Set them up for resizes\n+    StringBuffer appendingSB = new StringBuffer(0); \/\/ Set them up for resizes\n+\n+    @Actor\n+    public void actor1() {\n+        for (int i = 0; i < 4; ++i) {\n+            mutatingSB.append('b');\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2() {\n+        synchronized (mutatingSB) { \/\/ <---- YOLO\n+            appendingSB.append(mutatingSB);\n+        }\n+    }\n+\n+    @Arbiter\n+    public void tester(L_Result r) {\n+        r.r1 = appendingSB.toString();\n+    }\n+\n+}\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/strings\/StringBufferAppendTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}