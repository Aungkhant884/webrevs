{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.jcstress.os.AffinitySupport;\n@@ -52,0 +53,8 @@\n+        ExecutorService pool = Executors.newCachedThreadPool(new MyThreadFactory());\n+\n+        \/\/ Pre-initialize the affinity support and threads, so that workers\n+        \/\/ do not have to do this on critical paths during the execution.\n+        \/\/ This also runs when the rest of the infrastructure starts up.\n+        pool.submit(new WarmupAffinityTask());\n+        pool.submit(new EmptyTask());\n+\n@@ -58,12 +67,0 @@\n-        ExecutorService pool = Executors.newCachedThreadPool(new ThreadFactory() {\n-            private final AtomicInteger id = new AtomicInteger();\n-\n-            @Override\n-            public Thread newThread(Runnable r) {\n-                Thread t = new Thread(r);\n-                t.setName(\"jcstress-worker-\" + id.incrementAndGet());\n-                t.setDaemon(true);\n-                return t;\n-            }\n-        });\n-\n@@ -100,0 +97,29 @@\n+    private static class MyThreadFactory implements ThreadFactory {\n+        private final AtomicInteger id = new AtomicInteger();\n+\n+        @Override\n+        public Thread newThread(Runnable r) {\n+            Thread t = new Thread(r);\n+            t.setName(\"jcstress-worker-\" + id.incrementAndGet());\n+            t.setDaemon(true);\n+            return t;\n+        }\n+    }\n+\n+    private static class WarmupAffinityTask implements Runnable {\n+        @Override\n+        public void run() {\n+            try {\n+                AffinitySupport.tryBind();\n+            } catch (Exception e) {\n+                \/\/ Do not care\n+            }\n+        }\n+    }\n+\n+    private static class EmptyTask implements Runnable {\n+        @Override\n+        public void run() {\n+            \/\/ Do nothing\n+        }\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/ForkedMain.java","additions":38,"deletions":12,"binary":false,"changes":50,"status":"modified"}]}