{"files":[{"patch":"@@ -273,1 +273,1 @@\n-            pw.println(\"    inline: \\\"+\" + task.generatedRunnerName + \"::\" + JCStressTestProcessor.AUX_PREFIX + \"*\\\",\");\n+            pw.println(\"    inline: \\\"+\" + task.generatedRunnerName + \"::\" + JCStressTestProcessor.CONSUME_PREFIX + \"*\\\",\");\n@@ -277,0 +277,3 @@\n+            \/\/ Omit inlining of non-essential methods\n+            pw.println(\"    inline: \\\"-\" + task.generatedRunnerName + \"::\" + JCStressTestProcessor.CONSUME_NI_PREFIX + \"*\\\",\");\n+\n@@ -302,1 +305,2 @@\n-                pw.println(\"    inline: \\\"+\" + task.generatedRunnerName + \"::\" + JCStressTestProcessor.AUX_PREFIX + \"*\\\",\");\n+                pw.println(\"    inline: \\\"+\" + task.generatedRunnerName + \"::\" + JCStressTestProcessor.CONSUME_PREFIX + \"*\\\",\");\n+                pw.println(\"    inline: \\\"-\" + task.generatedRunnerName + \"::\" + JCStressTestProcessor.CONSUME_NI_PREFIX + \"*\\\",\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,3 +55,4 @@\n-    public static final String TASK_LOOP_PREFIX = \"task_\";\n-    public static final String RUN_LOOP_PREFIX = \"run_\";\n-    public static final String AUX_PREFIX = \"jcstress_\";\n+    public static final String TASK_LOOP_PREFIX = \"jcstress_task_\";\n+    public static final String RUN_LOOP_PREFIX = \"jcstress_run_\";\n+    public static final String CONSUME_PREFIX = \"jcstress_consume_\";\n+    public static final String CONSUME_NI_PREFIX = \"jcstress_ni_consume_\";\n@@ -481,1 +482,1 @@\n-        pw.println(\"        control.isStopped = false;\");\n+        pw.println(\"        control.stopping = false;\");\n@@ -513,1 +514,1 @@\n-        pw.println(\"        control.isStopped = true;\");\n+        pw.println(\"        control.stopping = true;\");\n@@ -519,9 +520,19 @@\n-        pw.println(\"    private void \" + AUX_PREFIX + \"consume(Counter<\" + r + \"> cnt, int a) {\");\n-        pw.println(\"        \" + s + \"[] ls = gs;\");\n-        pw.println(\"        \" + r + \"[] lr = gr;\");\n-        pw.println(\"        int len = config.strideSize * config.strideCount;\");\n-        pw.println(\"        int left = a * len \/ \" + actorsCount + \";\");\n-        pw.println(\"        int right = (a + 1) * len \/ \" + actorsCount + \";\");\n-        pw.println(\"        for (int c = left; c < right; c++) {\");\n-        pw.println(\"            \" + r + \" r = lr[c];\");\n-        pw.println(\"            \" + s + \" s = ls[c];\");\n+        for (boolean reinit : new boolean[] { false, true }) {\n+            String name = reinit ? (CONSUME_PREFIX + \"reinit\") : (CONSUME_NI_PREFIX + \"final\");\n+            pw.println(\"    private void \" + name + \"(Counter<\" + r + \"> cnt, int a) {\");\n+            pw.println(\"        \" + s + \"[] ls = gs;\");\n+            pw.println(\"        \" + r + \"[] lr = gr;\");\n+            pw.println(\"        int len = config.strideSize * config.strideCount;\");\n+            pw.println(\"        int left = a * len \/ \" + actorsCount + \";\");\n+            pw.println(\"        int right = (a + 1) * len \/ \" + actorsCount + \";\");\n+            pw.println(\"        for (int c = left; c < right; c++) {\");\n+            pw.println(\"            \" + r + \" r = lr[c];\");\n+            pw.println(\"            \" + s + \" s = ls[c];\");\n+\n+            if (info.getArbiter() != null) {\n+                if (isStateItself) {\n+                    emitMethod(pw, info.getArbiter(), \"            s.\" + info.getArbiter().getSimpleName(), \"s\", \"r\", true);\n+                } else {\n+                    emitMethod(pw, info.getArbiter(), \"            test.\" + info.getArbiter().getSimpleName(), \"s\", \"r\", true);\n+                }\n+            }\n@@ -529,5 +540,15 @@\n-        if (info.getArbiter() != null) {\n-            if (isStateItself) {\n-                emitMethod(pw, info.getArbiter(), \"            s.\" + info.getArbiter().getSimpleName(), \"s\", \"r\", true);\n-            } else {\n-                emitMethod(pw, info.getArbiter(), \"            test.\" + info.getArbiter().getSimpleName(), \"s\", \"r\", true);\n+            if (reinit) {\n+                \/\/ If state is trivial, we can reset its fields directly, without\n+                \/\/ reallocating the object.\n+\n+                if (allFieldsAreDefault(info.getState())) {\n+                    for (VariableElement var : ElementFilter.fieldsIn(info.getState().getEnclosedElements())) {\n+                        if (var.getModifiers().contains(Modifier.STATIC))\n+                            continue;\n+                        pw.print(\"            s.\" + var.getSimpleName().toString() + \" = \");\n+                        pw.print(getDefaultVal(var));\n+                        pw.println(\";\");\n+                    }\n+                } else {\n+                    pw.println(\"            ls[c] = new \" + s + \"();\");\n+                }\n@@ -535,1 +556,0 @@\n-        }\n@@ -537,2 +557,1 @@\n-        \/\/ If state is trivial, we can reset its fields directly, without\n-        \/\/ reallocating the object.\n+            pw.println(\"            cnt.record(r, 1);\");\n@@ -540,6 +559,8 @@\n-        if (allFieldsAreDefault(info.getState())) {\n-            for (VariableElement var : ElementFilter.fieldsIn(info.getState().getEnclosedElements())) {\n-                if (var.getModifiers().contains(Modifier.STATIC)) continue;\n-                pw.print(\"            s.\" + var.getSimpleName().toString() + \" = \");\n-                pw.print(getDefaultVal(var));\n-                pw.println(\";\");\n+            if (reinit) {\n+                for (VariableElement var : ElementFilter.fieldsIn(info.getResult().getEnclosedElements())) {\n+                    if (var.getSimpleName().toString().equals(\"jcstress_trap\"))\n+                        continue;\n+                    pw.print(\"            r.\" + var.getSimpleName().toString() + \" = \");\n+                    pw.print(getDefaultVal(var));\n+                    pw.println(\";\");\n+                }\n@@ -547,3 +568,0 @@\n-        } else {\n-            pw.println(\"            ls[c] = new \" + s + \"();\");\n-        }\n@@ -551,7 +569,3 @@\n-        pw.println(\"            cnt.record(r, 1);\");\n-\n-        for (VariableElement var : ElementFilter.fieldsIn(info.getResult().getEnclosedElements())) {\n-            if (var.getSimpleName().toString().equals(\"jcstress_trap\")) continue;\n-            pw.print(\"            r.\" + var.getSimpleName().toString() + \" = \");\n-            pw.print(getDefaultVal(var));\n-            pw.println(\";\");\n+            pw.println(\"        }\");\n+            pw.println(\"    }\");\n+            pw.println();\n@@ -560,4 +574,0 @@\n-        pw.println(\"        }\");\n-        pw.println(\"    }\");\n-        pw.println();\n-\n@@ -574,3 +584,0 @@\n-            pw.println(\"            if (sync.stopped) {\");\n-            pw.println(\"                return counter;\");\n-            pw.println(\"            }\");\n@@ -583,1 +590,6 @@\n-            pw.println(\"            \" + AUX_PREFIX + \"consume(counter, \" + n + \");\");\n+            pw.println(\"            if (sync.stopping) {\");\n+            pw.println(\"                \" + CONSUME_NI_PREFIX + \"final(counter, \" + n + \");\");\n+            pw.println(\"                return counter;\");\n+            pw.println(\"            } else {\");\n+            pw.println(\"                \" + CONSUME_PREFIX + \"reinit(counter, \" + n + \");\");\n+            pw.println(\"            }\");\n@@ -585,1 +597,1 @@\n-            pw.println(\"                workerSync = new WorkerSync(control.isStopped, \" + actorsCount + \", config.spinLoopStyle);\");\n+            pw.println(\"                workerSync = new WorkerSync(control.stopping, \" + actorsCount + \", config.spinLoopStyle);\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":59,"deletions":47,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    public volatile boolean isStopped;\n+    public volatile boolean stopping;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/Control.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    public final boolean stopped;\n+    public final boolean stopping;\n@@ -49,2 +49,2 @@\n-    public WorkerSync(boolean stopped, int expectedWorkers, SpinLoopStyle spinStyle) {\n-        this.stopped = stopped;\n+    public WorkerSync(boolean stopping, int expectedWorkers, SpinLoopStyle spinStyle) {\n+        this.stopping = stopping;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/WorkerSync.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}