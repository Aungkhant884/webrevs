{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jcstress.infra.runners.ForkedTestConfig;\n@@ -30,1 +31,0 @@\n-import org.openjdk.jcstress.infra.runners.TestConfig;\n@@ -70,1 +70,1 @@\n-        TestConfig config = link.nextJob(token);\n+        ForkedTestConfig config = link.nextJob(token);\n@@ -76,1 +76,1 @@\n-            Constructor<?> cnstr = aClass.getConstructor(TestConfig.class, ExecutorService.class);\n+            Constructor<?> cnstr = aClass.getConstructor(ForkedTestConfig.class, ExecutorService.class);\n@@ -80,1 +80,1 @@\n-            result = new TestResult(config, Status.API_MISMATCH);\n+            result = new TestResult(Status.API_MISMATCH);\n@@ -83,1 +83,1 @@\n-            result = new TestResult(config, Status.TEST_ERROR);\n+            result = new TestResult(Status.TEST_ERROR);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/ForkedMain.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jcstress.infra.runners.ForkedTestConfig;\n@@ -74,1 +75,1 @@\n-            public TestConfig onJobRequest(String token) {\n+            public ForkedTestConfig onJobRequest(String token) {\n@@ -351,1 +352,1 @@\n-        public synchronized TestConfig jobRequest() {\n+        public synchronized ForkedTestConfig jobRequest() {\n@@ -356,5 +357,1 @@\n-            return getTask();\n-        }\n-\n-        public synchronized TestConfig getTask() {\n-            return task;\n+            return new ForkedTestConfig(task);\n@@ -366,1 +363,1 @@\n-                result = new TestResult(task, Status.VM_ERROR);\n+                result = new TestResult(Status.VM_ERROR);\n@@ -368,0 +365,1 @@\n+                result.setConfig(task);\n@@ -385,1 +383,1 @@\n-                    result = new TestResult(task, Status.VM_ERROR);\n+                    result = new TestResult(Status.VM_ERROR);\n@@ -389,1 +387,1 @@\n-                    result = new TestResult(task, Status.VM_ERROR);\n+                    result = new TestResult(Status.VM_ERROR);\n@@ -394,0 +392,1 @@\n+                result.setConfig(task);\n@@ -396,1 +395,1 @@\n-                result = new TestResult(task, Status.VM_ERROR);\n+                result = new TestResult(Status.VM_ERROR);\n@@ -398,0 +397,1 @@\n+                result.setConfig(task);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private final TestConfig config;\n+    private TestConfig config;\n@@ -53,2 +53,1 @@\n-    public TestResult(TestConfig config, Status status) {\n-        this.config = config;\n+    public TestResult(Status status) {\n@@ -62,0 +61,4 @@\n+    public void setConfig(TestConfig config) {\n+        this.config = config;\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/collectors\/TestResult.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -105,1 +105,2 @@\n-        TestResult root = new TestResult(config, status);\n+        TestResult root = new TestResult(status);\n+        root.setConfig(config);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ReportUtils.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-        pw.println(\"    public \" + className + \"(TestConfig config, ExecutorService pool) {\");\n+        pw.println(\"    public \" + className + \"(ForkedTestConfig config, ExecutorService pool) {\");\n@@ -570,1 +570,1 @@\n-            pw.println(\"        AffinitySupport.bind(config.cpuMap.actorMap()[\" + n + \"]);\");\n+            pw.println(\"        AffinitySupport.bind(config.actorMap[\" + n + \"]);\");\n@@ -777,1 +777,1 @@\n-        pw.println(\"    public \" + generatedName + \"(TestConfig config, ExecutorService pool) {\");\n+        pw.println(\"    public \" + generatedName + \"(ForkedTestConfig config, ExecutorService pool) {\");\n@@ -956,1 +956,1 @@\n-                TestConfig.class, TestResult.class,\n+                ForkedTestConfig.class, TestResult.class,\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.infra.runners;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+\n+public class ForkedTestConfig implements Serializable {\n+    public final SpinLoopStyle spinLoopStyle;\n+    public final int time;\n+    public final int iters;\n+    public final String generatedRunnerName;\n+    public final int maxFootprintMB;\n+    public int minStride;\n+    public int maxStride;\n+    public int[] actorMap;\n+\n+    public ForkedTestConfig(TestConfig cfg) {\n+        spinLoopStyle = cfg.spinLoopStyle;\n+        time = cfg.time;\n+        iters = cfg.iters;\n+        generatedRunnerName = cfg.generatedRunnerName;\n+        maxFootprintMB = cfg.maxFootprintMB;\n+        minStride = cfg.minStride;\n+        maxStride = cfg.maxStride;\n+        actorMap = cfg.cpuMap.actorMap();\n+    }\n+\n+    public void adjustStrides(FootprintEstimator estimator) {\n+        int count = 1;\n+        int succCount = count;\n+        while (true) {\n+            if (!tryWith(estimator, count)) {\n+                break;\n+            }\n+\n+            \/\/ success!\n+            succCount = count;\n+\n+            \/\/ do not go over the maxStride\n+            if (succCount >= maxStride) {\n+                succCount = maxStride;\n+                break;\n+            }\n+\n+            count *= 2;\n+        }\n+\n+        maxStride = Math.min(maxStride, succCount);\n+        minStride = Math.min(minStride, succCount);\n+    }\n+\n+    public interface FootprintEstimator {\n+        void runWith(int size, long[] counters);\n+    }\n+\n+    private boolean tryWith(FootprintEstimator estimator, int count) {\n+        try {\n+            long[] cnts = new long[2];\n+            estimator.runWith(count, cnts);\n+            long footprint = cnts[0];\n+            long usedTime = cnts[1];\n+\n+            if (footprint > maxFootprintMB * 1024 * 1024) {\n+                \/\/ blown the footprint estimate\n+                return false;\n+            }\n+\n+            if (TimeUnit.NANOSECONDS.toMillis(usedTime) > time) {\n+                \/\/ blown the time estimate\n+                return false;\n+            }\n+\n+        } catch (OutOfMemoryError err) {\n+            \/\/ blown the heap size\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/ForkedTestConfig.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -29,1 +29,0 @@\n-import org.openjdk.jcstress.infra.collectors.TestResultCollector;\n@@ -53,1 +52,1 @@\n-    protected final TestConfig config;\n+    protected final ForkedTestConfig config;\n@@ -56,1 +55,1 @@\n-    public Runner(TestConfig config, ExecutorService pool, String testName) {\n+    public Runner(ForkedTestConfig config, ExecutorService pool, String testName) {\n@@ -116,1 +115,1 @@\n-        TestResult result = new TestResult(config, status);\n+        TestResult result = new TestResult(status);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/Runner.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -51,1 +50,0 @@\n-    public StrideCap strideCap;\n@@ -58,6 +56,0 @@\n-    public enum StrideCap {\n-        NONE,\n-        FOOTPRINT,\n-        TIME,\n-    }\n-\n@@ -79,55 +71,0 @@\n-        strideCap = StrideCap.NONE;\n-    }\n-\n-    public void adjustStrides(FootprintEstimator estimator) {\n-        int count = 1;\n-        int succCount = count;\n-        while (true) {\n-            StrideCap cap = tryWith(estimator, count);\n-            if (cap != StrideCap.NONE) {\n-                strideCap = cap;\n-                break;\n-            }\n-\n-            \/\/ success!\n-            succCount = count;\n-\n-            \/\/ do not go over the maxStride\n-            if (succCount >= maxStride) {\n-                succCount = maxStride;\n-                break;\n-            }\n-\n-            count *= 2;\n-        }\n-\n-        maxStride = Math.min(maxStride, succCount);\n-        minStride = Math.min(minStride, succCount);\n-    }\n-\n-    public interface FootprintEstimator {\n-        void runWith(int size, long[] counters);\n-    }\n-\n-    private StrideCap tryWith(FootprintEstimator estimator, int count) {\n-        try {\n-            long[] cnts = new long[2];\n-            estimator.runWith(count, cnts);\n-            long footprint = cnts[0];\n-            long usedTime = cnts[1];\n-\n-            if (footprint > maxFootprintMB * 1024 * 1024) {\n-                \/\/ blown the footprint estimate\n-                return StrideCap.FOOTPRINT;\n-            }\n-\n-            if (TimeUnit.NANOSECONDS.toMillis(usedTime) > time) {\n-                \/\/ blown the time estimate\n-                return StrideCap.TIME;\n-            }\n-\n-        } catch (OutOfMemoryError err) {\n-            \/\/ blown the heap size\n-            return StrideCap.FOOTPRINT;\n-        }\n-        return StrideCap.NONE;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jcstress.infra.runners.TestConfig;\n+import org.openjdk.jcstress.infra.runners.ForkedTestConfig;\n@@ -69,1 +69,1 @@\n-    public TestConfig nextJob(String token) throws IOException {\n+    public ForkedTestConfig nextJob(String token) throws IOException {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkClient.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.jcstress.infra.runners.TestConfig;\n+import org.openjdk.jcstress.infra.runners.ForkedTestConfig;\n@@ -125,1 +125,1 @@\n-                            TestConfig cfg = listener.onJobRequest(tkn);\n+                            ForkedTestConfig cfg = listener.onJobRequest(tkn);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkServer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.jcstress.infra.runners.TestConfig;\n+import org.openjdk.jcstress.infra.runners.ForkedTestConfig;\n@@ -34,1 +34,1 @@\n-    private final TestConfig config;\n+    private final ForkedTestConfig config;\n@@ -36,1 +36,1 @@\n-    public JobResponseFrame(TestConfig config) {\n+    public JobResponseFrame(ForkedTestConfig config) {\n@@ -40,1 +40,1 @@\n-    public TestConfig getConfig() {\n+    public ForkedTestConfig getConfig() {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/JobResponseFrame.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jcstress.infra.runners.TestConfig;\n+import org.openjdk.jcstress.infra.runners.ForkedTestConfig;\n@@ -32,1 +32,1 @@\n-    TestConfig onJobRequest(String token);\n+    ForkedTestConfig onJobRequest(String token);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/ServerListener.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}