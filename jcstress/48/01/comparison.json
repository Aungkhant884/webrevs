{"files":[{"patch":"@@ -54,1 +54,1 @@\n-        String token = args[2];\n+        int token = Integer.parseInt(args[2]);\n@@ -70,1 +70,1 @@\n-        ForkedTestConfig config = link.nextJob(token);\n+        ForkedTestConfig config = link.jobRequest(token);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/ForkedMain.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    private final Map<String, VM> vmByToken;\n+    private final Map<Integer, VM> vmByToken;\n@@ -75,1 +75,1 @@\n-            public ForkedTestConfig onJobRequest(String token) {\n+            public ForkedTestConfig onJobRequest(int token) {\n@@ -80,1 +80,1 @@\n-            public void onResult(String token, TestResult result) {\n+            public void onResult(int token, TestResult result) {\n@@ -137,1 +137,1 @@\n-                    String token = \"fork-token-\" + ID.incrementAndGet();\n+                    int token = ID.incrementAndGet();\n@@ -175,1 +175,1 @@\n-        private final String token;\n+        private final int token;\n@@ -186,1 +186,1 @@\n-        public VM(String host, int port, String token, TestConfig task, CPUMap cpuMap) {\n+        public VM(String host, int port, int token, TestConfig task, CPUMap cpuMap) {\n@@ -333,1 +333,1 @@\n-                command.add(token);\n+                command.add(String.valueOf(token));\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n@@ -60,0 +63,43 @@\n+    public TestResult(DataInputStream dis) throws IOException {\n+        status = Status.values()[dis.readInt()];\n+        states = new Counter<>(dis);\n+        messages = new ArrayList<>();\n+        {\n+            int len = dis.readInt();\n+            for (int c = 0; c < len; c++) {\n+                messages.add(dis.readUTF());\n+            }\n+        }\n+        vmOut = new ArrayList<>();\n+        {\n+            int len = dis.readInt();\n+            for (int c = 0; c < len; c++) {\n+                vmOut.add(dis.readUTF());\n+            }\n+        }\n+        vmErr = new ArrayList<>();\n+        {\n+            int len = dis.readInt();\n+            for (int c = 0; c < len; c++) {\n+                vmErr.add(dis.readUTF());\n+            }\n+        }\n+    }\n+\n+    public void write(DataOutputStream dos) throws IOException {\n+        dos.writeInt(status.ordinal());\n+        states.write(dos);\n+        dos.writeInt(messages.size());\n+        for (String s : messages) {\n+            dos.writeUTF(s);\n+        }\n+        dos.writeInt(vmOut.size());\n+        for (String s : vmOut) {\n+            dos.writeUTF(s);\n+        }\n+        dos.writeInt(vmErr.size());\n+        for (String s : vmErr) {\n+            dos.writeUTF(s);\n+        }\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/collectors\/TestResult.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n@@ -30,1 +33,1 @@\n-public class ForkedTestConfig implements Serializable {\n+public class ForkedTestConfig {\n@@ -51,0 +54,29 @@\n+    public ForkedTestConfig(DataInputStream dis) throws IOException {\n+        spinLoopStyle = SpinLoopStyle.values()[dis.readInt()];\n+        time = dis.readInt();\n+        iters = dis.readInt();\n+        generatedRunnerName = dis.readUTF();\n+        maxFootprintMB = dis.readInt();\n+        minStride = dis.readInt();\n+        maxStride = dis.readInt();\n+        int len = dis.readInt();\n+        actorMap = new int[len];\n+        for (int c = 0; c < len; c++) {\n+            actorMap[c] = dis.readInt();\n+        }\n+    }\n+\n+    public void write(DataOutputStream dos) throws IOException {\n+        dos.writeInt(spinLoopStyle.ordinal());\n+        dos.writeInt(time);\n+        dos.writeInt(iters);\n+        dos.writeUTF(generatedRunnerName);\n+        dos.writeInt(maxFootprintMB);\n+        dos.writeInt(minStride);\n+        dos.writeInt(maxStride);\n+        dos.writeInt(actorMap.length);\n+        for (int am : actorMap) {\n+            dos.writeInt(am);\n+        }\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/ForkedTestConfig.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-    private final Object lock;\n@@ -44,1 +43,0 @@\n-        this.lock = new Object();\n@@ -47,5 +45,8 @@\n-    private Object requestResponse(Object frame) throws IOException {\n-        synchronized (lock) {\n-            try (Socket socket = new Socket(hostName, hostPort)) {\n-                socket.setKeepAlive(true);\n-                socket.setSoTimeout(LINK_TIMEOUT_MS);\n+    public ForkedTestConfig jobRequest(int token) throws IOException {\n+        try (Socket socket = new Socket(hostName, hostPort)) {\n+            socket.setSoTimeout(LINK_TIMEOUT_MS);\n+            try (OutputStream os = socket.getOutputStream();\n+                 DataOutputStream dos = new DataOutputStream(os)) {\n+                Protocol.writeTag(dos, Protocol.TAG_JOBREQUEST);\n+                Protocol.writeToken(dos, token);\n+                dos.flush();\n@@ -53,10 +54,5 @@\n-                try (BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\n-                     ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n-                    oos.writeObject(frame);\n-                    oos.flush();\n-\n-                    try (BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());\n-                         ObjectInputStream ois = new ObjectInputStream(bis)) {\n-                        return ois.readObject();\n-                    } catch (ClassNotFoundException e) {\n-                        throw new IOException(e);\n+                try (BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());\n+                     DataInputStream dis = new DataInputStream(bis)) {\n+                    int tag = Protocol.readTag(dis);\n+                    if (tag != Protocol.TAG_TESTCONFIG) {\n+                        throw new IllegalStateException(\"Unexpected tag\");\n@@ -64,0 +60,1 @@\n+                    return new ForkedTestConfig(dis);\n@@ -69,8 +66,9 @@\n-    public ForkedTestConfig nextJob(String token) throws IOException {\n-        Object reply = requestResponse(new JobRequestFrame(token));\n-        if (reply instanceof JobResponseFrame) {\n-            return ((JobResponseFrame) reply).getConfig();\n-        } else {\n-            throw new IllegalStateException(\"Got the erroneous reply: \" + reply);\n-        }\n-    }\n+    public void doneResult(int token, TestResult result) throws IOException {\n+        try (Socket socket = new Socket(hostName, hostPort)) {\n+            socket.setSoTimeout(LINK_TIMEOUT_MS);\n+            try (OutputStream os = socket.getOutputStream();\n+                 DataOutputStream dos = new DataOutputStream(os)) {\n+                Protocol.writeTag(dos, Protocol.TAG_RESULTS);\n+                Protocol.writeToken(dos, token);\n+                result.write(dos);\n+                dos.flush();\n@@ -78,5 +76,8 @@\n-    public void doneResult(String token, TestResult result) {\n-        try {\n-            requestResponse(new ResultsFrame(token, result));\n-        } catch (IOException e) {\n-            throw new IllegalStateException(e);\n+                try (BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());\n+                     DataInputStream dis = new DataInputStream(bis)) {\n+                    int tag = Protocol.readTag(dis);\n+                    if (tag != Protocol.TAG_OK) {\n+                        throw new IllegalStateException(\"Unexpected tag\");\n+                    }\n+                }\n+            }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkClient.java","additions":31,"deletions":30,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.jcstress.infra.collectors.TestResult;\n@@ -90,1 +91,0 @@\n-\n@@ -117,17 +117,23 @@\n-            try (Socket socket = server.accept()) {\n-                try (BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());\n-                     ObjectInputStream ois = new ObjectInputStream(bis)) {\n-                    Object obj = ois.readObject();\n-                    try (BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\n-                         ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n-                        if (obj instanceof JobRequestFrame) {\n-                            String tkn = ((JobRequestFrame) obj).getToken();\n-                            ForkedTestConfig cfg = listener.onJobRequest(tkn);\n-                            oos.writeObject(new JobResponseFrame(cfg));\n-                        } else if (obj instanceof ResultsFrame) {\n-                            ResultsFrame rf = (ResultsFrame) obj;\n-                            listener.onResult(rf.getToken(), rf.getRes());\n-                            oos.writeObject(new OkResponseFrame());\n-                        } else {\n-                            \/\/ should always reply something\n-                            oos.writeObject(new WTFWasThatFrame());\n+            try (Socket socket = server.accept();\n+                 BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());\n+                 DataInputStream dis = new DataInputStream(bis)) {\n+                int tag = Protocol.readTag(dis);\n+                int token = Protocol.readToken(dis);\n+                try (BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\n+                     DataOutputStream dos = new DataOutputStream(bos)) {\n+                    switch (tag) {\n+                        case Protocol.TAG_JOBREQUEST: {\n+                            ForkedTestConfig ftc = listener.onJobRequest(token);\n+                            Protocol.writeTag(dos, Protocol.TAG_TESTCONFIG);\n+                            ftc.write(dos);\n+                            break;\n+                        }\n+                        case Protocol.TAG_RESULTS: {\n+                            TestResult tr = new TestResult(dis);\n+                            listener.onResult(token, tr);\n+                            Protocol.writeTag(dos, Protocol.TAG_OK);\n+                            break;\n+                        }\n+                        default: {\n+                            Protocol.writeTag(dos, Protocol.TAG_FAILED);\n+                            break;\n@@ -136,0 +142,1 @@\n+                    dos.flush();\n@@ -137,3 +144,1 @@\n-            } catch (EOFException e) {\n-                \/\/ ignore\n-            } catch (Exception e) {\n+            } catch (IOException e) {\n@@ -143,1 +148,0 @@\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/BinaryLinkServer.java","additions":26,"deletions":22,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.link;\n-\n-import java.io.Serializable;\n-\n-class FinishingFrame implements Serializable {\n-    private static final long serialVersionUID = 2309975914801631608L;\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/FinishingFrame.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.link;\n-\n-import java.io.Serializable;\n-\n-class JobRequestFrame implements Serializable {\n-    private static final long serialVersionUID = 2082214387637725282L;\n-    private String token;\n-\n-    public JobRequestFrame(String token) {\n-        this.token = token;\n-    }\n-\n-    public String getToken() {\n-        return token;\n-    }\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/JobRequestFrame.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.link;\n-\n-import org.openjdk.jcstress.infra.runners.ForkedTestConfig;\n-\n-import java.io.Serializable;\n-\n-class JobResponseFrame implements Serializable {\n-    private static final long serialVersionUID = 2082214387637725282L;\n-\n-    private final ForkedTestConfig config;\n-\n-    public JobResponseFrame(ForkedTestConfig config) {\n-        this.config = config;\n-    }\n-\n-    public ForkedTestConfig getConfig() {\n-        return config;\n-    }\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/JobResponseFrame.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.link;\n-\n-import java.io.Serializable;\n-\n-public class OkResponseFrame implements Serializable {\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/OkResponseFrame.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.link;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+class Protocol {\n+\n+    static final byte TAG_JOBREQUEST = 1;\n+    static final byte TAG_TESTCONFIG = 2;\n+    static final byte TAG_RESULTS = 3;\n+    static final byte TAG_OK = 4;\n+    static final byte TAG_FAILED = 5;\n+\n+    static int readTag(DataInputStream dis) throws IOException {\n+        return dis.read();\n+    }\n+\n+    static void writeTag(DataOutputStream dos, byte tag) throws IOException {\n+        dos.write(tag);\n+    }\n+\n+    static int readToken(DataInputStream dis) throws IOException {\n+        return dis.readInt();\n+    }\n+\n+    static void writeToken(DataOutputStream dos, int token) throws IOException {\n+        dos.writeInt(token);\n+    }\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/Protocol.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.link;\n-\n-import org.openjdk.jcstress.infra.collectors.TestResult;\n-\n-import java.io.Serializable;\n-\n-class ResultsFrame implements Serializable {\n-    private static final long serialVersionUID = -5627086531281515824L;\n-\n-    private final String token;\n-    private final TestResult res;\n-\n-    public ResultsFrame(String token, TestResult res) {\n-        this.token = token;\n-        this.res = res;\n-    }\n-\n-    public String getToken() { return token; }\n-    public TestResult getRes() {\n-        return res;\n-    }\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/ResultsFrame.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -32,1 +32,1 @@\n-    ForkedTestConfig onJobRequest(String token);\n+    ForkedTestConfig onJobRequest(int token);\n@@ -34,1 +34,1 @@\n-    void onResult(String token, TestResult result);\n+    void onResult(int token, TestResult result);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/ServerListener.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.link;\n-\n-import java.io.Serializable;\n-\n-public class WTFWasThatFrame implements Serializable {\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/link\/WTFWasThatFrame.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -74,0 +74,21 @@\n+    public Counter(DataInputStream dis) throws IOException {\n+        init();\n+        int len = dis.readInt();\n+        for (int c = 0; c < len; c++) {\n+            @SuppressWarnings(\"unchecked\")\n+            R key = (R) dis.readUTF();\n+            long count = dis.readLong();\n+            record(key, count);\n+        }\n+    }\n+\n+    public void write(DataOutputStream dos) throws IOException {\n+        dos.writeInt(keyCount);\n+        for (int c = 0; c < keys.length; c++) {\n+            if (keys[c] != null) {\n+                dos.writeUTF(keys[c].toString());\n+                dos.writeLong(counts[c]);\n+            }\n+        }\n+    }\n+\n@@ -226,25 +247,0 @@\n-    private void readObject(ObjectInputStream is) throws IOException, ClassNotFoundException {\n-        init();\n-        int len = is.readInt();\n-        for (int c = 0; c < len; c++) {\n-            @SuppressWarnings(\"unchecked\")\n-            R key = (R) is.readObject();\n-            long count = is.readLong();\n-            record(key, count);\n-        }\n-    }\n-\n-    private void readObjectNoData() throws ObjectStreamException {\n-        init();\n-    }\n-\n-    private void writeObject(ObjectOutputStream os) throws IOException {\n-        os.writeInt(keyCount);\n-        for (int c = 0; c < keys.length; c++) {\n-            if (keys[c] != null) {\n-                os.writeObject(keys[c]);\n-                os.writeLong(counts[c]);\n-            }\n-        }\n-    }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/Counter.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"}]}