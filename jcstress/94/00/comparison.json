{"files":[{"patch":"@@ -83,1 +83,1 @@\n-            result.addMessage(StringUtils.getStacktrace(e));\n+            result.addMessages(e);\n@@ -86,1 +86,1 @@\n-            result.addMessage(StringUtils.getStacktrace(ex));\n+            result.addMessages(ex);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/ForkedMain.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-                result.addMessage(pendingException.getMessage());\n+                result.addMessages(pendingException);\n@@ -504,1 +504,1 @@\n-                result.addMessage(ex.getMessage());\n+                result.addMessages(ex);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import org.openjdk.jcstress.util.StringUtils;\n@@ -120,0 +121,4 @@\n+    public void addMessages(Throwable throwable) {\n+        addMessages(StringUtils.getStacktrace(throwable));\n+    }\n+\n@@ -126,5 +131,0 @@\n-    public void addVMOut(String msg) {\n-        if (ReportUtils.skipMessage(msg)) return;\n-        vmOut.add(msg);\n-    }\n-\n@@ -133,1 +133,2 @@\n-            addVMOut(m);\n+            if (ReportUtils.skipMessage(m)) continue;\n+            vmOut.add(m);\n@@ -137,5 +138,0 @@\n-    public void addVMErr(String msg) {\n-        if (ReportUtils.skipMessage(msg)) return;\n-        vmErr.add(msg);\n-    }\n-\n@@ -144,1 +140,2 @@\n-            addVMErr(m);\n+            if (ReportUtils.skipMessage(m)) continue;\n+            vmErr.add(m);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/collectors\/TestResult.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        r.addMessage(StringUtils.getStacktrace(aux));\n+        r.addMessages(aux);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/Runner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Arrays;\n@@ -120,1 +121,1 @@\n-    public static String getStacktrace(Throwable throwable) {\n+    public static List<String> getStacktrace(Throwable throwable) {\n@@ -125,9 +126,1 @@\n-        return sw.toString();\n-    }\n-\n-    public static String getFirstLine(String src) {\n-        int endLine = src.indexOf(\"\\n\");\n-        if (endLine > 0) {\n-            return src.substring(0, endLine).trim();\n-        }\n-        return src;\n+        return Arrays.asList(sw.toString().split(System.lineSeparator()));\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/StringUtils.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.List;\n@@ -46,2 +47,2 @@\n-        String actual = StringUtils.getStacktrace(new NullPointerException(\"my message\"));\n-        String firstLine = StringUtils.getFirstLine(actual);\n+        List<String> actual = StringUtils.getStacktrace(new NullPointerException(\"my message\"));\n+        String firstLine = actual.get(0);\n@@ -49,7 +50,1 @@\n-        Assert.assertEquals(\"java.lang.NullPointerException: my message\", firstLine);\n-    }\n-\n-    @Test\n-    public void testGetFirstLine() {\n-        Assert.assertEquals(\"First line\", StringUtils.getFirstLine(\"First line\"));\n-        Assert.assertEquals(\"First line\", StringUtils.getFirstLine(\"First line\\nsecond line\"));\n+        Assert.assertTrue(firstLine, firstLine.startsWith(\"java.lang.NullPointerException: my message\"));\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/util\/StringUtilsTest.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"}]}