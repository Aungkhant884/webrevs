{"files":[{"patch":"@@ -95,0 +95,2 @@\n+        printer.setExecutor(executor);\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,0 +66,2 @@\n+    private final AtomicInteger cntRunning;\n+\n@@ -85,0 +87,6 @@\n+\n+        this.cntRunning = new AtomicInteger();\n+    }\n+\n+    public int getJVMsRunning() {\n+        return cntRunning.get();\n@@ -172,0 +180,8 @@\n+    public int getActorCpus() {\n+        return scheduler.getActorCpus();\n+    }\n+\n+    public int getSystemCpus() {\n+        return scheduler.getSystemCpus();\n+    }\n+\n@@ -338,0 +354,2 @@\n+                cntRunning.incrementAndGet();\n+\n@@ -379,0 +397,2 @@\n+                cntRunning.decrementAndGet();\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    ACCEPTABLE,\n+    ACCEPTABLE(\"Acceptable\"),\n@@ -40,1 +40,1 @@\n-    ACCEPTABLE_INTERESTING,\n+    ACCEPTABLE_INTERESTING(\"Interesting\"),\n@@ -45,1 +45,1 @@\n-    FORBIDDEN,\n+    FORBIDDEN(\"Forbidden\"),\n@@ -50,1 +50,13 @@\n-    UNKNOWN,\n+    UNKNOWN(\"Unknown\"),\n+    ;\n+\n+    private final String desc;\n+\n+    Expect(String desc) {\n+        this.desc = desc;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return desc;\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/annotations\/Expect.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.jcstress.TestExecutor;\n@@ -64,0 +65,1 @@\n+    private TestExecutor executor;\n@@ -146,1 +148,3 @@\n-        String line = String.format(\"(ETA: %10s) (Sample Rate: %s) (Results: %d planned; %d passed, %d failed, %d soft errs, %d hard errs) \",\n+        final int actorCpus = executor.getActorCpus();\n+        final int systemCpus = executor.getSystemCpus();\n+        String line = String.format(\"(ETA: %10s) (Sample Rate: %s) (JVMs: %d running) (CPUs: %d actor, %d system, %d total) (Results: %d planned; %d passed, %d failed, %d soft errs, %d hard errs)\",\n@@ -149,0 +153,2 @@\n+                executor.getJVMsRunning(),\n+                actorCpus, systemCpus, actorCpus + systemCpus,\n@@ -185,1 +191,1 @@\n-        if (v > 10*T) {\n+        if (v > T) {\n@@ -189,1 +195,1 @@\n-        if (v > 10*G) {\n+        if (v > G) {\n@@ -193,1 +199,1 @@\n-        if (v > 10*M) {\n+        if (v > M) {\n@@ -197,1 +203,1 @@\n-        if (v > 10*K) {\n+        if (v > K) {\n@@ -234,0 +240,3 @@\n+    public void setExecutor(TestExecutor executor) {\n+        this.executor = executor;\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -132,3 +132,10 @@\n-            int idLen = \"Observed state\".length();\n-            int occLen = \"Occurrences\".length();\n-            int expectLen = \"Expectation\".length();\n+            final String headResult = \"RESULT\";\n+            final String headSamples = \"SAMPLES\";\n+            final String headFreq = \"FREQ\";\n+            final String headExpect = \"EXPECT\";\n+            final String headDesc = \"DESCRIPTION\";\n+\n+            int idLen = headResult.length();\n+            int samplesLen = headSamples.length();\n+            int freqLen = Math.max(6, headFreq.length());\n+            int expectLen = headExpect.length();\n@@ -139,1 +146,1 @@\n-                occLen = Math.max(occLen, String.format(\"%,d\", r.getCount(s)).length());\n+                samplesLen = Math.max(samplesLen, String.format(\"%,d\", r.getCount(s)).length());\n@@ -151,1 +158,2 @@\n-            occLen += 2;\n+            samplesLen += 2;\n+            freqLen += 2;\n@@ -154,1 +162,2 @@\n-            pw.printf(\"%\" + idLen + \"s %\" + occLen + \"s %\" + expectLen + \"s  %-\" + descLen + \"s%n\", \"Observed state\", \"Occurrences\", \"Expectation\", \"Interpretation\");\n+            pw.printf(\"%\" + idLen + \"s%\" + samplesLen + \"s%\" + freqLen + \"s%\" + expectLen + \"s  %-\" + descLen + \"s%n\",\n+                    headResult, headSamples, headFreq, headExpect, headDesc);\n@@ -156,2 +165,12 @@\n-            for (GradingResult gradeRes : r.grading().gradingResults) {\n-                pw.printf(\"%\" + idLen + \"s %,\" + occLen + \"d %\" + expectLen + \"s  %-\" + descLen + \"s%n\",\n+            TestGrading grade = r.grading();\n+            long totalSamples = 0;\n+            for (GradingResult gradeRes : grade.gradingResults) {\n+                totalSamples += gradeRes.count;\n+            }\n+\n+            if (totalSamples == 0) {\n+                totalSamples = 1;\n+            }\n+\n+            for (GradingResult gradeRes : grade.gradingResults) {\n+                pw.printf(\"%\" + idLen + \"s%,\" + samplesLen + \"d%\" + freqLen + \"s%\" + expectLen + \"s  %-\" + descLen + \"s%n\",\n@@ -160,0 +179,1 @@\n+                        StringUtils.percent(gradeRes.count, totalSamples, 1),\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ReportUtils.java","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-                    wl.put(test.getTest().getQualifiedName());\n+                    wl.put(test.getTest().getQualifiedName().toString());\n@@ -109,1 +109,1 @@\n-                        wl.put(actor.getSimpleName());\n+                        wl.put(actor.getSimpleName().toString());\n@@ -116,1 +116,1 @@\n-                        wl.put(c.expect());\n+                        wl.put(c.expect().ordinal());\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+            Expect[] expectValues = Expect.values();\n@@ -48,4 +49,4 @@\n-            InputStream stream = null;\n-            try {\n-                stream = TestList.class.getResourceAsStream(LIST);\n-                BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n+\n+            try (InputStream stream = TestList.class.getResourceAsStream(LIST);\n+                 InputStreamReader isr = new InputStreamReader(stream);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n@@ -75,2 +76,2 @@\n-                            Expect expect  = Expect.valueOf(read.nextString());\n-                            String desc    = read.nextString();\n+                            Expect expect = expectValues[read.nextInt()];\n+                            String desc = read.nextString();\n@@ -93,8 +94,0 @@\n-            } finally {\n-                if (stream != null) {\n-                    try {\n-                        stream.close();\n-                    } catch (IOException e) {\n-                        \/\/ swallow\n-                    }\n-                }\n@@ -102,0 +95,1 @@\n+            \/\/ swallow\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestList.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -39,1 +39,2 @@\n-    private int currentUse;\n+    private int currentActorUse;\n+    private int currentSystemUse;\n@@ -57,1 +58,1 @@\n-        if (currentUse + scl.numActors() > maxUse) {\n+        if (currentActorUse + scl.numActors() > maxUse) {\n@@ -156,1 +157,1 @@\n-                    currentUse++;\n+                    currentActorUse++;\n@@ -170,1 +171,1 @@\n-                    currentUse++;\n+                    currentSystemUse++;\n@@ -233,1 +234,1 @@\n-                currentUse++;\n+                currentSystemUse++;\n@@ -282,2 +283,2 @@\n-        if (use != currentUse) {\n-            throw new IllegalStateException(when + \": CPU use counts are inconsistent, counter = \" + currentUse + \", actually taken = \" + use);\n+        if (use != currentActorUse) {\n+            throw new IllegalStateException(when + \": CPU use counts are inconsistent, counter = \" + currentActorUse + \", actually taken = \" + use);\n@@ -308,1 +309,1 @@\n-                currentUse--;\n+                currentActorUse--;\n@@ -314,1 +315,1 @@\n-            currentUse--;\n+            currentSystemUse--;\n@@ -337,0 +338,8 @@\n+    public int getActorCpus() {\n+        return currentActorUse;\n+    }\n+\n+    public int getSystemCpus() {\n+        return currentSystemUse;\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/Scheduler.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -170,0 +170,18 @@\n+\n+    public static String repeat(String s, int count) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int c = 0; c < count; c++) {\n+            sb.append(s);\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String percent(long v, long total, int prec) {\n+        double p = v * 100.0 \/ total;\n+        double limit = Math.pow(0.1, prec);\n+        if (p < limit) {\n+            return String.format(\"<%.\" + prec + \"f%%\", limit);\n+        } else {\n+            return String.format(\"%.\" + prec + \"f%%\", p);\n+        }\n+    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/StringUtils.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    public void put(Object value) {\n+    public void put(String value) {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/TestLineWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}