{"files":[{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.concurrency.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.util.concurrent.Semaphore;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+\/*\n+    How to run this test:\n+        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_06_Semaphore\n+*\/\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n+@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n+@State\n+public class Mutex_06_Semaphore {\n+    private final Semaphore semaphore = new Semaphore(1);\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        try {\n+            semaphore.acquire();\n+            \/\/ critical section\n+            r.r1 = ++v;\n+            semaphore.release();\n+        } catch (InterruptedException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        try {\n+            semaphore.acquire();\n+            \/\/ critical section\n+            r.r2 = ++v;\n+            semaphore.release();\n+        } catch (InterruptedException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/mutex\/Mutex_06_Semaphore.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}