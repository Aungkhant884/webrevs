{"files":[{"patch":"@@ -39,4 +39,11 @@\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t ClassicProblem_02_ProducerConsumerProblem\n- *\/\n+public class ClassicProblem_02_ProducerConsumerProblem {\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t ClassicProblem_02_ProducerConsumerProblem\n+    *\/\n+\n+    \/*\n+        This sample shows you how JCStress can help you to test solutions for the famous producer-consumer problem.\n+        See https:\/\/en.wikipedia.org\/wiki\/Producer%E2%80%93consumer_problem for more information\n+        about the problem and solutions.\n+     *\/\n@@ -44,5 +51,0 @@\n-\/**\n- * This sample shows you how JCStress can help you to test solutions for the famous producer-consumer problem.\n- * See https:\/\/en.wikipedia.org\/wiki\/Producer%E2%80%93consumer_problem for more information about the problem and solutions.\n- *\/\n-public abstract class ClassicProblem_02_ProducerConsumerProblem {\n@@ -100,1 +102,1 @@\n-    @Outcome(id = {\"true\"}, expect = ACCEPTABLE)\n+    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"One producer produced 2 items which were consumed.\")\n@@ -104,1 +106,2 @@\n-        void p() {\n+        void producer() {\n+            produce();\n@@ -109,1 +112,2 @@\n-        void c() {\n+        void consumer() {\n+            consume();\n@@ -119,16 +123,16 @@\n-    \/**\n-     * This solution with semaphores only works with one producer and one consumer.\n-     * If two producers are used, then this leads to a race condition:\n-     * Both producers might use the same index at the same time\n-     * to put their elements into the buffer so that they overwrite each other's item.\n-     *\n-     *   RESULT     SAMPLES     FREQ       EXPECT  DESCRIPTION\n-     *   0, 0, 0      61.158    0,37%   Acceptable\n-     *   0, 0, 1  15.066.987   91,84%   Acceptable\n-     *   0, 0, 2       9.078    0,06%  Interesting  Producers used the same index at the same time.\n-     *   0, 1, 0      23.658    0,14%   Acceptable\n-     *   0, 1, 1      80.552    0,49%   Acceptable\n-     *   0, 1, 2     799.311    4,87%   Acceptable\n-     *   1, 0, 0      48.668    0,30%   Acceptable\n-     *   1, 0, 1      66.056    0,40%   Acceptable\n-     *   1, 0, 2     251.060    1,53%   Acceptable\n+    \/*\n+        This solution with semaphores only works with one producer and one consumer.\n+        If two producers are used, then this leads to a race condition:\n+        Both producers might use the same index at the same time\n+        to put their elements into the buffer so that they overwrite each other's item.\n+\n+          RESULT     SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          0, 0, 0      61.158    0,37%   Acceptable\n+          0, 0, 1  15.066.987   91,84%   Acceptable\n+          0, 0, 2       9.078    0,06%  Interesting  Producers used the same index at the same time.\n+          0, 1, 0      23.658    0,14%   Acceptable\n+          0, 1, 1      80.552    0,49%   Acceptable\n+          0, 1, 2     799.311    4,87%   Acceptable\n+          1, 0, 0      48.668    0,30%   Acceptable\n+          1, 0, 1      66.056    0,40%   Acceptable\n+          1, 0, 2     251.060    1,53%   Acceptable\n@@ -137,2 +141,2 @@\n-    @Outcome(expect = ACCEPTABLE)\n-    @Outcome(id = {\"0, 0, 2\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Producers used the same index at the same time.\")\n+    @Outcome(expect = ACCEPTABLE, desc = \"Producers didn't overwrite each other's item.\")\n+    @Outcome(id = {\"0, 0, 2\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Producers overwrote each other's item.\")\n@@ -142,1 +146,1 @@\n-        void p1(III_Result r) {\n+        void producer1(III_Result r) {\n@@ -147,1 +151,1 @@\n-        void p2(III_Result r) {\n+        void producer2(III_Result r) {\n@@ -152,1 +156,1 @@\n-        void c(III_Result r) {\n+        void consumer(III_Result r) {\n@@ -157,2 +161,2 @@\n-    \/**\n-     * The solution with semaphores can be extended so that more than one producer and consumer are supported.\n+    \/*\n+        The solution with semaphores can be extended so that more than one producer and consumer are supported.\n@@ -161,2 +165,2 @@\n-    @Outcome(expect = ACCEPTABLE)\n-    @Outcome(id = {\"0, 0, 2\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Producers used the same index at the same time.\")\n+    @Outcome(expect = ACCEPTABLE, desc = \"Producers didn't overwrite each other's item.\")\n+    @Outcome(id = {\"0, 0, 2\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Producers overwrote each other's item.\")\n@@ -169,1 +173,1 @@\n-        void p1(III_Result r) {\n+        void producer1(III_Result r) {\n@@ -174,1 +178,1 @@\n-        void p2(III_Result r) {\n+        void producer2(III_Result r) {\n@@ -179,1 +183,1 @@\n-        void c(III_Result r) {\n+        void consume(III_Result r) {\n@@ -198,2 +202,2 @@\n-    \/**\n-     * This solution with a ReentrantLock and two conditions works with many producers and many consumers.\n+    \/*\n+        This solution with a ReentrantLock and two conditions works with many producers and many consumers.\n@@ -202,2 +206,2 @@\n-    @Outcome(expect = ACCEPTABLE)\n-    @Outcome(id = {\"0, 0, 2\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Producers used the same index at the same time.\")\n+    @Outcome(expect = ACCEPTABLE, desc = \"Producers didn't overwrite each other's item.\")\n+    @Outcome(id = {\"0, 0, 2\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Producers overwrote each other's item.\")\n@@ -212,1 +216,1 @@\n-        void p1(III_Result r) {\n+        void producer1(III_Result r) {\n@@ -217,1 +221,1 @@\n-        void p2(III_Result r) {\n+        void producer2(III_Result r) {\n@@ -222,1 +226,1 @@\n-        void c(III_Result r) {\n+        void consumer(III_Result r) {\n@@ -269,3 +273,3 @@\n-    \/**\n-     * This solution with AtomicIntegers only works with one producer and one consumer.\n-     * It fails if an int overflow happens.\n+    \/*\n+        This solution with AtomicIntegers only works with one producer and one consumer.\n+        It fails if an int overflow happens.\n@@ -275,1 +279,1 @@\n-    @Outcome(id = {\"true\"}, expect = ACCEPTABLE)\n+    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"One producer produced 2 items which were consumed.\")\n@@ -282,1 +286,1 @@\n-        void p() {\n+        void producer() {\n@@ -288,1 +292,1 @@\n-        void c() {\n+        void consumer() {\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/classic\/ClassicProblem_02_ProducerConsumerProblem.java","additions":57,"deletions":53,"binary":false,"changes":110,"status":"modified"}]}