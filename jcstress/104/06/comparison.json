{"files":[{"patch":"@@ -0,0 +1,333 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.problems.classic;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.III_Result;\n+import org.openjdk.jcstress.infra.results.Z_Result;\n+\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n+\n+public class Classic_02_ProducerConsumerProblem {\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Classic_02_ProducerConsumerProblem\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This sample shows you how JCStress can help you to test solutions for the famous producer-consumer problem.\n+        See https:\/\/en.wikipedia.org\/wiki\/Producer%E2%80%93consumer_problem for more information\n+        about the problem and solutions.\n+\n+        The producer-consumer problem is about transferring items from the producer(s) to the consumer(s)\n+        in a thread-safe way. Some solutions support only one producer and one consumer while other solutions\n+        don't mind many producers and many consumers.\n+     *\/\n+\n+    private final static int BUFFER_SIZE = 2;\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        One solution uses semaphores to solve the producer-consumer problem.\n+     *\/\n+    static class SemaphoresBase {\n+        protected final Semaphore fillCount = new Semaphore(BUFFER_SIZE);\n+        protected final Semaphore emptyCount = new Semaphore(BUFFER_SIZE);\n+\n+        public SemaphoresBase() {\n+            try {\n+                fillCount.acquire(BUFFER_SIZE);\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        public int produce() {\n+            try {\n+                emptyCount.acquire();\n+                int index = putItemIntoBuffer();\n+                fillCount.release();\n+                return index;\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        public int consume() {\n+            try {\n+                int count = count();\n+                fillCount.acquire();\n+                takeItemFromBuffer();\n+                emptyCount.release();\n+                return count;\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        protected int putItemIntoBuffer() {\n+            return count();\n+        }\n+\n+        protected void takeItemFromBuffer() { }\n+\n+        protected int count() {\n+            return fillCount.availablePermits();\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This solution shows how semaphores can be used to solve the producer-consumer problem\n+        for only one producer and only one consumer.\n+     *\/\n+    @JCStressTest\n+    @Outcome(id = \"true\", expect = ACCEPTABLE, desc = \"Trivial\")\n+    @State\n+    public static class OneProducerOneConsumer extends SemaphoresBase {\n+        @Actor\n+        void producer() {\n+            produce();\n+            produce();\n+        }\n+\n+        @Actor\n+        void consumer() {\n+            consume();\n+            consume();\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            r.r1 = true;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This solution with semaphores only works with one producer and one consumer.\n+        If two producers are used, then this leads to a race condition:\n+        Both producers might use the same index at the same time\n+        to put their elements into the buffer so that they overwrite each other's item.\n+\n+          RESULT     SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          0, 0, 0      61.158    0,37%   Acceptable  Producers didn't overwrite each other's item.\n+          0, 0, 1  15.066.987   91,84%   Acceptable  Producers didn't overwrite each other's item.\n+          0, 0, 2       9.078    0,06%  Interesting  Producers overwrote each other's item.\n+          0, 1, 0      23.658    0,14%   Acceptable  Producers didn't overwrite each other's item.\n+          0, 1, 1      80.552    0,49%   Acceptable  Producers didn't overwrite each other's item.\n+          0, 1, 2     799.311    4,87%   Acceptable  Producers didn't overwrite each other's item.\n+          1, 0, 0      48.668    0,30%   Acceptable  Producers didn't overwrite each other's item.\n+          1, 0, 1      66.056    0,40%   Acceptable  Producers didn't overwrite each other's item.\n+          1, 0, 2     251.060    1,53%   Acceptable  Producers didn't overwrite each other's item.\n+     *\/\n+    @JCStressTest\n+    @Outcome(id = \"0, 0, 2\", expect = ACCEPTABLE_INTERESTING, desc = \"Producers overwrote each other's item.\")\n+    @Outcome(expect = ACCEPTABLE, desc = \"Producers didn't overwrite each other's item.\")\n+    @State\n+    public static class FlawedTwoProducersOneConsumer extends SemaphoresBase {\n+        @Actor\n+        void producer1(III_Result r) {\n+            r.r1 = produce();\n+        }\n+\n+        @Actor\n+        void producer2(III_Result r) {\n+            r.r2 = produce();\n+        }\n+\n+        @Actor\n+        void consumer(III_Result r) {\n+            r.r3 = consume();\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        The solution with semaphores can be extended so that more than one producer and consumer are supported.\n+        It uses a separate lock to synchronize the access to index counter.\n+        This makes it impossible for producers to accidentally use the same index.\n+     *\/\n+    @JCStressTest\n+    @Outcome(id = \"0, 0, 2\", expect = ACCEPTABLE_INTERESTING, desc = \"Producers overwrote each other's item.\")\n+    @Outcome(expect = ACCEPTABLE, desc = \"Producers didn't overwrite each other's item.\")\n+    @State\n+    public static class FixedTwoProducersOneConsumer extends SemaphoresBase {\n+        private final Object indexLock = new Object();\n+        private int index = 0;\n+\n+        @Actor\n+        void producer1(III_Result r) {\n+            r.r1 = produce();\n+        }\n+\n+        @Actor\n+        void producer2(III_Result r) {\n+            r.r2 = produce();\n+        }\n+\n+        @Actor\n+        void consume(III_Result r) {\n+            r.r3 = consume();\n+        }\n+\n+        @Override\n+        protected int putItemIntoBuffer() {\n+            synchronized (indexLock) {\n+                return index++;\n+            }\n+        }\n+\n+        @Override\n+        protected void takeItemFromBuffer() {\n+            synchronized (indexLock) {\n+                index--;\n+            }\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This solution with a ReentrantLock and two conditions works with many producers and many consumers.\n+        While the condition full wakes up producers when\n+     *\/\n+    @JCStressTest\n+    @Outcome(id = \"0, 0, 2\", expect = ACCEPTABLE_INTERESTING, desc = \"Producers overwrote each other's item.\")\n+    @Outcome(expect = ACCEPTABLE, desc = \"Producers didn't overwrite each other's item.\")\n+    @State\n+    public static class Lock {\n+        private final ReentrantLock lock = new ReentrantLock();\n+        private final Condition full = lock.newCondition();\n+        private final Condition empty = lock.newCondition();\n+        private int count = 0;\n+\n+        @Actor\n+        void producer1(III_Result r) {\n+            r.r1 = produce();\n+        }\n+\n+        @Actor\n+        void producer2(III_Result r) {\n+            r.r2 = produce();\n+        }\n+\n+        @Actor\n+        void consumer(III_Result r) {\n+            r.r3 = consume();\n+        }\n+\n+        public int produce() {\n+            lock.lock();\n+            try {\n+                while (count == BUFFER_SIZE) {\n+                    full.await();\n+                }\n+                int index = count++;\n+                if (count == 1) {\n+                    empty.signalAll();\n+                }\n+                return index;\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n+            } finally {\n+                lock.unlock();\n+            }\n+        }\n+\n+        public int consume() {\n+            int result;\n+            lock.lock();\n+            try {\n+                while (count == 0) {\n+                    empty.await();\n+                }\n+                result = count;\n+                count--;\n+                if (count == BUFFER_SIZE - 1) {\n+                    full.signalAll();\n+                }\n+            } catch (InterruptedException e) {\n+                throw new IllegalStateException(e);\n+            } finally {\n+                lock.unlock();\n+            }\n+            return result;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This solution with AtomicIntegers only works with one producer and one consumer.\n+        It fails if an int overflow happens.\n+     *\/\n+    @JCStressTest\n+    @Outcome(id = \"true\", expect = ACCEPTABLE, desc = \"One producer produced 2 items which were consumed.\")\n+    @State\n+    public static class AtomicIntegers {\n+        private final AtomicInteger produced = new AtomicInteger();\n+        private final AtomicInteger consumed = new AtomicInteger();\n+\n+        @Actor\n+        void producer() {\n+            produce();\n+            produce();\n+        }\n+\n+        @Actor\n+        void consumer() {\n+            consume();\n+            consume();\n+        }\n+\n+        public void produce() {\n+            while (produced.get() - consumed.get() == BUFFER_SIZE); \/\/ spin\n+            produced.getAndIncrement();\n+        }\n+\n+        public void consume() {\n+            while (produced.get() - consumed.get() == 0); \/\/ spin\n+            consumed.getAndIncrement();\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            r.r1 = true;\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/problems\/classic\/Classic_02_ProducerConsumerProblem.java","additions":333,"deletions":0,"binary":false,"changes":333,"status":"added"}]}