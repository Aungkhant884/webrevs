{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import org.openjdk.jcstress.infra.collectors.TestResultCollector;\n@@ -35,0 +34,1 @@\n+import org.openjdk.jcstress.vm.AllocProfileSupport;\n@@ -378,1 +378,0 @@\n-\n@@ -385,1 +384,3 @@\n-        pw.println(\"        config.adjustStrides(size -> {\");\n+        pw.println(\"        config.adjustStrides((size, cnts) -> {\");\n+        pw.println(\"            long time1 = System.nanoTime();\");\n+        pw.println(\"            long alloc1 = AllocProfileSupport.getAllocatedBytes();\");\n@@ -388,1 +389,0 @@\n-        pw.println(\"            workerSync = new WorkerSync(false, \" + actorsCount + \", config.spinLoopStyle);\");\n@@ -399,0 +399,3 @@\n+        pw.println(\"            }\");\n+\n+        pw.println(\"            Collection<Future<Long>> res = new ArrayList<>();\");\n@@ -400,6 +403,5 @@\n-            pw.print(\"                \");\n-            if (isStateItself) {\n-                emitMethod(pw, el, \"s.\" + el.getSimpleName(), \"s\", \"r\", false);\n-            } else {\n-                emitMethod(pw, el, \"t.\" + el.getSimpleName(), \"s\", \"r\", false);\n-            }\n+            pw.println(\"            res.add(pool.submit(() -> {\");\n+            pw.println(\"                long a1 = AllocProfileSupport.getAllocatedBytes();\");\n+            pw.println(\"                for (int c = 0; c < size; c++) {\");\n+            pw.print(\"                    \");\n+            emitMethod(pw, el, (isStateItself ? \"ls[c].\" : \"t.\") + el.getSimpleName(), \"ls[c]\", \"lr[c]\", false);\n@@ -407,0 +409,4 @@\n+            pw.println(\"                }\");\n+            pw.println(\"                long a2 = AllocProfileSupport.getAllocatedBytes();\");\n+            pw.println(\"                return a2 - a1;\");\n+            pw.println(\"            }));\");\n@@ -408,0 +414,10 @@\n+\n+        pw.println(\"            for (Future<Long> f : res) {\");\n+        pw.println(\"                try {\");\n+        pw.println(\"                    long a = f.get();\");\n+        pw.println(\"                    cnts[0] += a;\");\n+        pw.println(\"                } catch (Throwable e) {\");\n+        pw.println(\"                    \/\/ Should not happen, checked in API check\");\n+        pw.println(\"                }\");\n+        pw.println(\"            }\");\n+\n@@ -409,2 +425,15 @@\n-            pw.print(\"                \");\n-            emitMethod(pw, info.getArbiter(), (isStateItself ? \"s.\" : \"t.\") + info.getArbiter().getSimpleName(), \"s\", \"r\", true);\n+            pw.println(\"            try {\");\n+            pw.println(\"                long a = pool.submit(() -> {\");\n+            pw.println(\"                    long a1 = AllocProfileSupport.getAllocatedBytes();\");\n+            pw.println(\"                    for (int c = 0; c < size; c++) {\");\n+            pw.print(\"                        \");\n+            emitMethod(pw, info.getArbiter(), (isStateItself ? \"ls[c].\" : \"t.\") + info.getArbiter().getSimpleName(), \"ls[c]\", \"lr[c]\", false);\n+            pw.println(\";\");\n+            pw.println(\"                    }\");\n+            pw.println(\"                    long a2 = AllocProfileSupport.getAllocatedBytes();\");\n+            pw.println(\"                    return a2 - a1;\");\n+            pw.println(\"                }).get();\");\n+            pw.println(\"                cnts[0] += a;\");\n+            pw.println(\"            } catch (Throwable e) {\");\n+            pw.println(\"                \/\/ Should not happen, checked in API check\");\n+            pw.println(\"            }\");\n@@ -412,1 +441,3 @@\n-        pw.println(\"                counter.record(r);\");\n+\n+        pw.println(\"            for (int c = 0; c < size; c++) {\");\n+        pw.println(\"                counter.record(lr[c]);\");\n@@ -414,0 +445,4 @@\n+        pw.println(\"            long time2 = System.nanoTime();\");\n+        pw.println(\"            long alloc2 = AllocProfileSupport.getAllocatedBytes();\");\n+        pw.println(\"            cnts[0] += alloc2 - alloc1;\");\n+        pw.println(\"            cnts[1] += time2 - time1;\");\n@@ -932,1 +967,1 @@\n-                AffinitySupport.class\n+                AffinitySupport.class, AllocProfileSupport.class\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":49,"deletions":14,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.concurrent.atomic.AtomicLong;\n@@ -87,1 +88,1 @@\n-    public void adjustStrides(Consumer<Integer> tryAllocate) {\n+    public void adjustStrides(FootprintEstimator estimator) {\n@@ -91,1 +92,1 @@\n-            StrideCap cap = tryWith(tryAllocate, count);\n+            StrideCap cap = tryWith(estimator, count);\n@@ -101,1 +102,1 @@\n-            if (succCount > maxStride) {\n+            if (succCount >= maxStride) {\n@@ -113,22 +114,13 @@\n-    private StrideCap tryWith(Consumer<Integer> tryAllocate, int count) {\n-        final int TRIES = 10;\n-        for (int tries = 0; tries < TRIES; tries++) {\n-            long startFoot = AllocProfileSupport.getAllocatedBytes();\n-            long startTime = System.nanoTime();\n-            try {\n-                tryAllocate.accept(count);\n-                long usedTime = System.nanoTime() - startTime;\n-                long footprint = AllocProfileSupport.getAllocatedBytes() - startFoot;\n-\n-                if (footprint > maxFootprintMB * 1024 * 1024) {\n-                    \/\/ blown the footprint estimate\n-                    return StrideCap.FOOTPRINT;\n-                }\n-\n-                if (TimeUnit.NANOSECONDS.toMillis(usedTime) > time) {\n-                    \/\/ blown the time estimate\n-                    return StrideCap.TIME;\n-                }\n-\n-            } catch (OutOfMemoryError err) {\n-                \/\/ blown the heap size\n+    public interface FootprintEstimator {\n+        void runWith(int size, long[] counters);\n+    }\n+\n+    private StrideCap tryWith(FootprintEstimator estimator, int count) {\n+        try {\n+            long[] cnts = new long[2];\n+            estimator.runWith(count, cnts);\n+            long footprint = cnts[0];\n+            long usedTime = cnts[1];\n+\n+            if (footprint > maxFootprintMB * 1024 * 1024) {\n+                \/\/ blown the footprint estimate\n@@ -137,0 +129,9 @@\n+\n+            if (TimeUnit.NANOSECONDS.toMillis(usedTime) > time) {\n+                \/\/ blown the time estimate\n+                return StrideCap.TIME;\n+            }\n+\n+        } catch (OutOfMemoryError err) {\n+            \/\/ blown the heap size\n+            return StrideCap.FOOTPRINT;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":26,"deletions":25,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -61,2 +61,11 @@\n-            ALLOC_MX_BEAN_GETTER = internalIntf.getMethod(\"getThreadAllocatedBytes\", long[].class);\n-            getAllocatedBytes(bean.getAllThreadIds());\n+            ALLOC_MX_BEAN_GETTER = internalIntf.getMethod(\"getThreadAllocatedBytes\", long.class);\n+\n+            \/\/ Warm up until the difference drops to zero\n+            long last = -1;\n+            for (int t = 0; t < 10; t++) {\n+                if (last == -1) {\n+                    last = getAllocatedBytes();\n+                }\n+                long cur = getAllocatedBytes();\n+                if ((cur - last) == 0) break;\n+            }\n@@ -72,5 +81,0 @@\n-        long[] threadIds = {Thread.currentThread().getId()};\n-        return getAllocatedBytes(threadIds)[0];\n-    }\n-\n-    private static long[] getAllocatedBytes(long[] threadIds) {\n@@ -79,1 +83,1 @@\n-                return (long[]) ALLOC_MX_BEAN_GETTER.invoke(ALLOC_MX_BEAN, (Object) threadIds);\n+                return (long) ALLOC_MX_BEAN_GETTER.invoke(ALLOC_MX_BEAN, Thread.currentThread().getId());\n@@ -84,1 +88,1 @@\n-            return new long[threadIds.length];\n+            return 0;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/AllocProfileSupport.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"}]}