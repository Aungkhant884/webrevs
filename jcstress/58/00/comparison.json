{"files":[{"patch":"@@ -66,0 +66,1 @@\n+    private final AtomicInteger jvmsStarting;\n@@ -67,0 +68,3 @@\n+    private final AtomicInteger jvmsFinishing;\n+\n+    private final ExecutorService supportTasks;\n@@ -88,0 +92,1 @@\n+        this.jvmsStarting = new AtomicInteger();\n@@ -89,0 +94,13 @@\n+        this.jvmsFinishing = new AtomicInteger();\n+\n+        this.supportTasks = Executors.newCachedThreadPool(new ThreadFactory() {\n+            private final AtomicInteger id = new AtomicInteger();\n+\n+            @Override\n+            public Thread newThread(Runnable r) {\n+                Thread t = new Thread(r);\n+                t.setName(\"jcstress-vm-support-\" + id.incrementAndGet());\n+                t.setDaemon(true);\n+                return t;\n+            }\n+        });\n@@ -144,1 +162,1 @@\n-                    vm.start();\n+                    supportTasks.submit(vm::start);\n@@ -161,0 +179,7 @@\n+        supportTasks.shutdown();\n+        try {\n+            supportTasks.awaitTermination(1, TimeUnit.HOURS);\n+        } catch (InterruptedException e) {\n+            \/\/ Do nothing\n+        }\n+\n@@ -167,1 +192,2 @@\n-            if (vm.checkCompleted(sink)) {\n+            if (vm.checkCompleted()) {\n+                supportTasks.submit(() -> vm.finish(sink));\n@@ -184,0 +210,4 @@\n+    public int getJVMsStarting() {\n+        return jvmsStarting.get();\n+    }\n+\n@@ -188,0 +218,4 @@\n+    public int getJVMsFinishing() {\n+        return jvmsFinishing.get();\n+    }\n+\n@@ -199,2 +233,3 @@\n-        private InputStreamCollector errCollector;\n-        private InputStreamCollector outCollector;\n+        private Future<List<String>> errs;\n+        private Future<List<String>> outs;\n+        private boolean isStarted;\n@@ -208,7 +243,0 @@\n-            if (VMSupport.compilerDirectivesAvailable()) {\n-                try {\n-                    generateDirectives();\n-                } catch (IOException e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            }\n@@ -323,1 +351,11 @@\n-        void start() {\n+        synchronized void start() {\n+            jvmsStarting.incrementAndGet();\n+\n+            if (VMSupport.compilerDirectivesAvailable()) {\n+                try {\n+                    generateDirectives();\n+                } catch (IOException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            }\n+\n@@ -357,2 +395,0 @@\n-                jvmsRunning.incrementAndGet();\n-\n@@ -362,5 +398,2 @@\n-                errCollector = new InputStreamCollector(process.getErrorStream());\n-                outCollector = new InputStreamCollector(process.getInputStream());\n-\n-                errCollector.start();\n-                outCollector.start();\n+                errs = supportTasks.submit(new InputStreamCollector(process.getErrorStream()));\n+                outs = supportTasks.submit(new InputStreamCollector(process.getInputStream()));\n@@ -371,0 +404,3 @@\n+            isStarted = true;\n+            jvmsStarting.decrementAndGet();\n+            jvmsRunning.incrementAndGet();\n@@ -381,1 +417,6 @@\n-        public synchronized boolean checkCompleted(TestResultCollector sink) {\n+        public synchronized boolean checkCompleted() {\n+            \/\/ Not yet started\n+            if (!isStarted) {\n+                return false;\n+            }\n+\n@@ -384,4 +425,0 @@\n-                result = new TestResult(Status.VM_ERROR);\n-                result.addMessage(pendingException.getMessage());\n-                result.setConfig(task);\n-                sink.add(result);\n@@ -396,0 +433,20 @@\n+            return true;\n+        }\n+\n+        public synchronized void finish(TestResultCollector sink) {\n+            jvmsRunning.decrementAndGet();\n+            jvmsFinishing.incrementAndGet();\n+\n+            if (!checkCompleted()) {\n+                throw new IllegalStateException(\"Should be completed\");\n+            }\n+\n+            \/\/ There is a pending exception that terminated the target VM.\n+            if (pendingException != null) {\n+                result = new TestResult(Status.VM_ERROR);\n+                result.addMessage(pendingException.getMessage());\n+                result.setConfig(task);\n+                sink.add(result);\n+                return;\n+            }\n+\n@@ -400,5 +457,0 @@\n-                jvmsRunning.decrementAndGet();\n-\n-                outCollector.join();\n-                errCollector.join();\n-\n@@ -413,2 +465,2 @@\n-                result.addVMOuts(outCollector.getOutput());\n-                result.addVMErrs(errCollector.getOutput());\n+                result.addVMOuts(outs.get());\n+                result.addVMErrs(errs.get());\n@@ -417,1 +469,1 @@\n-            } catch (InterruptedException ex) {\n+            } catch (InterruptedException | ExecutionException ex) {\n@@ -428,1 +480,2 @@\n-            return true;\n+\n+            jvmsFinishing.decrementAndGet();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":86,"deletions":33,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-        String line = String.format(\"(ETA: %10s) (Sample Rate: %s) (JVMs: %d running) (CPUs: %d actor, %d system, %d total) (Results: %d planned; %d passed, %d failed, %d soft errs, %d hard errs)\",\n+        String line = String.format(\"(ETA: %10s) (Sample Rate: %s) (JVMs: %d start, %d run, %d finish) (CPUs: %d actor, %d system, %d total) (Results: %d planned; %d passed, %d failed, %d soft errs, %d hard errs)\",\n@@ -153,1 +153,1 @@\n-                executor.getJVMsRunning(),\n+                executor.getJVMsStarting(), executor.getJVMsRunning(), executor.getJVMsFinishing(),\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.nio.Buffer;\n@@ -31,2 +30,1 @@\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n+import java.util.concurrent.Callable;\n@@ -34,1 +32,1 @@\n-public class InputStreamCollector extends Thread {\n+public class InputStreamCollector implements Callable<List<String>> {\n@@ -44,1 +42,1 @@\n-    public void run() {\n+    public List<String> call() {\n@@ -54,3 +52,0 @@\n-    }\n-\n-    public List<String> getOutput() {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/InputStreamCollector.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}