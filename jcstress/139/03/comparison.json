{"files":[{"patch":"@@ -43,1 +43,1 @@\n-      run: java -jar tests-custom\/target\/jcstress.jar -t UnfencedDekker\n+      run: java -jar tests-custom\/target\/jcstress.jar -t UnfencedDekker -tb 1m\n","filename":".github\/workflows\/pre-integration.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,4 +61,1 @@\n-            Options opts = new Options(new String[] {\n-                    \"-v\",\n-                    \"-iters\", \"1\",\n-                    \"-time\", \"10000\"});\n+            Options opts = new Options(new String[] {\"-v\"});\n@@ -93,1 +90,1 @@\n-        o = (Runner<?>) CNSTR.newInstance(new ForkedTestConfig(CFGS[0]));\n+        o = (Runner<?>) CNSTR.newInstance(new ForkedTestConfig(CFGS[0], 10_000));\n","filename":"jcstress-benchmarks\/src\/main\/java\/org\/openjdk\/jcstress\/SampleTestBench.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -89,1 +89,4 @@\n-        ConsoleReportPrinter printer = new ConsoleReportPrinter(opts, new PrintWriter(out, true), configs.size());\n+        TimeBudget timeBudget = new TimeBudget(configs.size(), opts.timeBudget());\n+        timeBudget.printOn(out);\n+\n+        ConsoleReportPrinter printer = new ConsoleReportPrinter(opts, new PrintWriter(out, true), configs.size(), timeBudget);\n@@ -94,1 +97,1 @@\n-        TestExecutor executor = new TestExecutor(opts.verbosity(), sink, scheduler);\n+        TestExecutor executor = new TestExecutor(opts.verbosity(), sink, scheduler, timeBudget);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/JCStress.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import org.openjdk.jcstress.util.TimeValue;\n@@ -41,0 +42,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -52,2 +54,0 @@\n-    private int time;\n-    private int iters;\n@@ -62,1 +62,0 @@\n-    private String mode;\n@@ -70,0 +69,1 @@\n+    private TimeValue timeBudget;\n@@ -99,2 +99,1 @@\n-        OptionSpec<Integer> time = parser.accepts(\"time\", \"Time to spend in single test iteration. Larger value improves \" +\n-                \"test reliability, since schedulers do better job in the long run.\")\n+        OptionSpec<Integer> optTime = parser.accepts(\"time\", \"(Deprecated, to be removed in next releases.)\")\n@@ -103,1 +102,1 @@\n-        OptionSpec<Integer> iters = parser.accepts(\"iters\", \"Iterations per test.\")\n+        OptionSpec<Integer> optIters = parser.accepts(\"iters\", \"(Deprecated, to be removed in next releases.)\")\n@@ -126,1 +125,1 @@\n-        OptionSpec<String> modeStr = parser.accepts(\"m\", \"Test mode preset: sanity, quick, default, tough, stress.\")\n+        OptionSpec<String> optModeStr = parser.accepts(\"m\", \"(Deprecated, to be removed in next releases).\")\n@@ -148,0 +147,3 @@\n+        OptionSpec<TimeValue> optTimeBudget = parser.accepts(\"tb\", \"Time budget to run the tests. Common time suffixes are accepted.\")\n+                .withRequiredArg().ofType(TimeValue.class).describedAs(\"time\").defaultsTo(new TimeValue(1, TimeUnit.HOURS));\n+\n@@ -205,12 +207,4 @@\n-        this.time = 1000;\n-        this.iters = 5;\n-        this.forks = 1;\n-        this.forksStressMultiplier = 5;\n-        this.strideSize = 256;\n-        this.strideCount = 40;\n-        this.pretouchHeap = true;\n-\n-        mode = orDefault(modeStr.value(set), \"default\");\n-        if (this.mode.equalsIgnoreCase(\"sanity\")) {\n-            this.time = 0;\n-            this.iters = 1;\n+        this.timeBudget = optTimeBudget.value(set);\n+\n+        if (timeBudget.isZero()) {\n+            \/\/ Special, extra-fast mode, good only for sanity testing\n@@ -222,12 +216,0 @@\n-        } else if (this.mode.equalsIgnoreCase(\"quick\")) {\n-            this.time = 200;\n-            this.forksStressMultiplier = 1;\n-        } else if (this.mode.equalsIgnoreCase(\"default\")) {\n-            \/\/ Nothing changed.\n-        } else if (this.mode.equalsIgnoreCase(\"tough\")) {\n-            this.iters = 10;\n-            this.forks = 10;\n-        } else if (this.mode.equalsIgnoreCase(\"stress\")) {\n-            this.iters = 50;\n-            this.forks = 10;\n-            this.forksStressMultiplier = 10;\n@@ -235,1 +217,23 @@\n-            System.err.println(\"Unknown test mode: \" + this.mode);\n+            this.forks = 1;\n+            this.forksStressMultiplier = 5;\n+            this.strideSize = 256;\n+            this.strideCount = 40;\n+            this.pretouchHeap = true;\n+        }\n+\n+        if (optModeStr.value(set) != null) {\n+            System.err.println(\"-m option is not supported anymore, please use -tb.\");\n+            System.err.println();\n+            parser.printHelpOn(System.err);\n+            return false;\n+        }\n+\n+        if (optTime.value(set) != null) {\n+            System.err.println(\"-time option is not supported anymore, please use -tb.\");\n+            System.err.println();\n+            parser.printHelpOn(System.err);\n+            return false;\n+        }\n+\n+        if (optIters.value(set) != null) {\n+            System.err.println(\"-iters option is not supported anymore, please use -tb.\");\n@@ -242,2 +246,0 @@\n-        this.time = orDefault(set.valueOf(time), this.time);\n-        this.iters = orDefault(set.valueOf(iters), this.iters);\n@@ -292,1 +294,0 @@\n-        out.printf(\"    Test preset mode: \\\"%s\\\"%n\", mode);\n@@ -297,2 +298,0 @@\n-        out.printf(\"    Iterations per fork: %d%n\", getIterations());\n-        out.printf(\"    Time per iteration: %d ms%n\", getTime());\n@@ -317,4 +316,0 @@\n-    public int getTime() {\n-        return time;\n-    }\n-\n@@ -350,4 +345,0 @@\n-    public int getIterations() {\n-        return iters;\n-    }\n-\n@@ -401,0 +392,2 @@\n+    public TimeValue timeBudget() { return timeBudget; }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":38,"deletions":45,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.jcstress.infra.processors.JCStressTestProcessor;\n@@ -36,1 +35,0 @@\n-import org.openjdk.jcstress.vm.CompileMode;\n@@ -70,1 +68,3 @@\n-    public TestExecutor(Verbosity verbosity, TestResultCollector sink, Scheduler scheduler) throws IOException {\n+    private final TimeBudget timeBudget;\n+\n+    public TestExecutor(Verbosity verbosity, TestResultCollector sink, Scheduler scheduler, TimeBudget tb) throws IOException {\n@@ -105,0 +105,2 @@\n+\n+        this.timeBudget = tb;\n@@ -319,1 +321,2 @@\n-            return new ForkedTestConfig(task);\n+            timeBudget.startTest();\n+            return new ForkedTestConfig(task, timeBudget.targetTestTimeMs());\n@@ -387,0 +390,1 @@\n+            timeBudget.finishTest();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress;\n+\n+import org.openjdk.jcstress.infra.grading.ReportUtils;\n+import org.openjdk.jcstress.util.TimeValue;\n+\n+import java.io.PrintStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class TimeBudget {\n+\n+    final long endTime;\n+    final boolean zeroBudget;\n+    final int expectedTests;\n+\n+    final AtomicInteger inflightTests;\n+    final AtomicInteger leftoverTests;\n+\n+    public TimeBudget(int expectedTests, TimeValue timeBudget) {\n+        this.expectedTests = expectedTests;\n+        this.endTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime()) + timeBudget.milliseconds();\n+        this.zeroBudget = timeBudget.isZero();\n+        this.inflightTests = new AtomicInteger();\n+        this.leftoverTests = new AtomicInteger(expectedTests);\n+    }\n+\n+    public void finishTest() {\n+        inflightTests.decrementAndGet();\n+        leftoverTests.decrementAndGet();\n+    }\n+\n+    public void startTest() {\n+        inflightTests.incrementAndGet();\n+    }\n+\n+    public int targetTestTimeMs() {\n+        if (isZero()) {\n+            return 0;\n+        }\n+\n+        int testsInflight = inflightTests();\n+        if (testsInflight <= 0) {\n+            testsInflight = 1;\n+        }\n+        int testsLeft = leftoverTests.get();\n+        long timeLeft = timeLeftMs();\n+\n+        int msPerIter = (timeLeft > 0 && testsLeft > 0) ?\n+                (int) (timeLeft * testsInflight \/ testsLeft) :\n+                0;\n+\n+        \/\/ Never drop below 1ms\n+        msPerIter = Math.max(1, msPerIter);\n+        return msPerIter;\n+    }\n+\n+    public long timeLeftMs() {\n+        return endTime - TimeUnit.NANOSECONDS.toMillis(System.nanoTime());\n+    }\n+\n+    public int inflightTests() {\n+        return inflightTests.get();\n+    }\n+\n+    public void printOn(PrintStream out) {\n+        out.println(\"  Time budget:\");\n+        if (isZero()) {\n+            out.println(\"    Zero budget, sanity test mode\");\n+        } else {\n+            out.println(\"    Target completion: in \" + ReportUtils.msToDate(timeLeftMs(), true));\n+            out.println(\"    Initial test time: \" + targetTestTimeMs() + \" ms\");\n+        }\n+        out.println();\n+    }\n+\n+    public boolean isZero() {\n+        return zeroBudget;\n+    }\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TimeBudget.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jcstress.TimeBudget;\n@@ -35,3 +36,0 @@\n-import java.time.LocalDateTime;\n-import java.time.format.DateTimeFormatter;\n-import java.time.temporal.ChronoUnit;\n@@ -53,0 +51,1 @@\n+    private final long startTime;\n@@ -56,3 +55,0 @@\n-    private long sampleResults;\n-\n-    private long startTime;\n@@ -68,1 +64,0 @@\n-    private final DateTimeFormatter fmt;\n@@ -77,1 +72,3 @@\n-    public ConsoleReportPrinter(Options opts, PrintWriter pw, long expectedForks) {\n+    private final TimeBudget timeBudget;\n+\n+    public ConsoleReportPrinter(Options opts, PrintWriter pw, long expectedForks, TimeBudget tb) {\n@@ -88,2 +85,0 @@\n-        fmt = DateTimeFormatter.ofPattern(\"E, yyyy-MM-dd HH:mm:ss\");\n-\n@@ -100,0 +95,2 @@\n+\n+        timeBudget = tb;\n@@ -105,2 +102,0 @@\n-        sampleResults++;\n-\n@@ -166,2 +161,5 @@\n-        String l0 = String.format(\"(ETA: %s)\",\n-                computeETA());\n+        String l0 = timeBudget.isZero() ? \"(Sanity test mode)\" :\n+                String.format(\"(Time: %s, %d tests in flight, %d ms per test)\",\n+                        ReportUtils.msToDate(timeBudget.timeLeftMs(), false),\n+                        timeBudget.inflightTests() + 1,\n+                        timeBudget.targetTestTimeMs());\n@@ -255,33 +253,0 @@\n-    private String computeETA() {\n-        long timeSpent = System.nanoTime() - startTime;\n-        long resultsGot = sampleResults;\n-        if (resultsGot == 0) {\n-            return \"N\/A\";\n-        }\n-\n-        long nsToGo = (long)(timeSpent * (1.0 * (expectedResults - 1) \/ resultsGot - 1));\n-        if (nsToGo > 0) {\n-            LocalDateTime ldt = LocalDateTime.now().plus(nsToGo, ChronoUnit.NANOS);\n-\n-            String result = \"in \";\n-            long days = TimeUnit.NANOSECONDS.toDays(nsToGo);\n-            if (days > 0) {\n-                result += days + \"d+\";\n-                nsToGo -= TimeUnit.DAYS.toNanos(days);\n-            }\n-            long hours = TimeUnit.NANOSECONDS.toHours(nsToGo);\n-            nsToGo -= TimeUnit.HOURS.toNanos(hours);\n-\n-            long minutes = TimeUnit.NANOSECONDS.toMinutes(nsToGo);\n-            nsToGo -= TimeUnit.MINUTES.toNanos(minutes);\n-\n-            long seconds = TimeUnit.NANOSECONDS.toSeconds(nsToGo);\n-\n-            result += String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n-            result += \"; at \" + ldt.format(fmt);\n-            return result;\n-        } else {\n-            return \"now\";\n-        }\n-    }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":12,"deletions":47,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -40,0 +40,3 @@\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n@@ -41,0 +44,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -284,0 +288,39 @@\n+\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"E, yyyy-MM-dd HH:mm:ss\");\n+\n+    public static String msToDate(long ms, boolean finalDate) {\n+        LocalDateTime ldt = LocalDateTime.now().plus(ms, ChronoUnit.MILLIS);\n+\n+        String result = \"\";\n+\n+        boolean overtime = ms < 0;\n+        if (overtime) {\n+            ms = -ms;\n+        }\n+\n+        long days = TimeUnit.MILLISECONDS.toDays(ms);\n+        if (days > 0) {\n+            result += days + \"d+\";\n+            ms -= TimeUnit.DAYS.toMillis(days);\n+        }\n+        long hours = TimeUnit.MILLISECONDS.toHours(ms);\n+        ms -= TimeUnit.HOURS.toMillis(hours);\n+\n+        long minutes = TimeUnit.MILLISECONDS.toMinutes(ms);\n+        ms -= TimeUnit.MINUTES.toMillis(minutes);\n+\n+        long seconds = TimeUnit.MILLISECONDS.toSeconds(ms);\n+\n+        if (overtime) {\n+            result += \"overtime \";\n+        }\n+        result += String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+        if (!overtime) {\n+            result += \" left\";\n+        }\n+        if (finalDate) {\n+            result += \"; at \" + ldt.format(DATE_TIME_FORMATTER);\n+        }\n+        return result;\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ReportUtils.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -889,2 +889,1 @@\n-        pw.println(\"        for (int c = 0; c < config.iters; c++) {\");\n-        pw.println(\"            run(results);\");\n+        pw.println(\"        run(results);\");\n@@ -892,4 +891,2 @@\n-        pw.println(\"            if (results.count(Outcome.STALE) > 0) {\");\n-        pw.println(\"                forceExit = true;\");\n-        pw.println(\"                break;\");\n-        pw.println(\"            }\");\n+        pw.println(\"        if (results.count(Outcome.STALE) > 0) {\");\n+        pw.println(\"            forceExit = true;\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-    public final int iters;\n@@ -45,1 +44,1 @@\n-    public ForkedTestConfig(TestConfig cfg) {\n+    public ForkedTestConfig(TestConfig cfg, int testTime) {\n@@ -47,2 +46,1 @@\n-        time = cfg.time;\n-        iters = cfg.iters;\n+        time = testTime;\n@@ -62,1 +60,0 @@\n-        iters = dis.readInt();\n@@ -80,1 +77,0 @@\n-        dos.writeInt(iters);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/ForkedTestConfig.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,21 +71,17 @@\n-        for (int c = 0; c < config.iters; c++) {\n-            ArrayList<CounterThread<R>> workers = internalRun();\n-\n-            long startTime = System.nanoTime();\n-            do {\n-                ArrayList<CounterThread<R>> leftovers = new ArrayList<>();\n-                for (CounterThread<R> t : workers) {\n-                    try {\n-                        t.join(1000);\n-\n-                        if (t.throwable() != null) {\n-                            return dumpFailure(Status.TEST_ERROR, \"Unrecoverable error while running\", t.throwable());\n-                        }\n-                        Counter<R> res = t.result();\n-                        if (res != null) {\n-                            result.merge(res);\n-                        } else {\n-                            leftovers.add(t);\n-                        }\n-                    } catch (InterruptedException e) {\n-                        return dumpFailure(Status.TEST_ERROR, \"Unrecoverable error while running\", e.getCause());\n+        ArrayList<CounterThread<R>> workers = internalRun();\n+\n+        long startTime = System.nanoTime();\n+        do {\n+            ArrayList<CounterThread<R>> leftovers = new ArrayList<>();\n+            for (CounterThread<R> t : workers) {\n+                try {\n+                    t.join(1000);\n+\n+                    if (t.throwable() != null) {\n+                        return dumpFailure(Status.TEST_ERROR, \"Unrecoverable error while running\", t.throwable());\n+                    }\n+                    Counter<R> res = t.result();\n+                    if (res != null) {\n+                        result.merge(res);\n+                    } else {\n+                        leftovers.add(t);\n@@ -93,0 +89,2 @@\n+                } catch (InterruptedException e) {\n+                    return dumpFailure(Status.TEST_ERROR, \"Unrecoverable error while running\", e.getCause());\n@@ -94,0 +92,1 @@\n+            }\n@@ -95,5 +94,5 @@\n-                long timeSpent = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);\n-                if (timeSpent > Math.max(10*config.time, MIN_TIMEOUT_MS)) {\n-                    forceExit = true;\n-                    return dumpFailure(Status.TIMEOUT_ERROR, \"Timeout waiting for tasks to complete: \" + timeSpent + \" ms\");\n-                }\n+            long timeSpent = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);\n+            if (timeSpent > Math.max(10 * config.time, MIN_TIMEOUT_MS)) {\n+                forceExit = true;\n+                return dumpFailure(Status.TIMEOUT_ERROR, \"Timeout waiting for tasks to complete: \" + timeSpent + \" ms\");\n+            }\n@@ -101,3 +100,2 @@\n-                workers = leftovers;\n-            } while (!workers.isEmpty());\n-        }\n+            workers = leftovers;\n+        } while (!workers.isEmpty());\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/Runner.java","additions":27,"deletions":29,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-    public final int time;\n-    public final int iters;\n@@ -65,1 +63,0 @@\n-        time = opts.getTime();\n@@ -68,1 +65,0 @@\n-        iters = opts.getIterations();\n@@ -99,2 +95,0 @@\n-        if (time != that.time) return false;\n-        if (iters != that.iters) return false;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.util;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+\n+public class TimeValue implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    private final long time;\n+    private final TimeUnit tu;\n+\n+    public TimeValue(long time, TimeUnit tu) {\n+        if (time < 0) {\n+            throw new IllegalArgumentException(\"Time should not be negative: \" + time);\n+        }\n+        this.time = time;\n+        this.tu = tu;\n+    }\n+\n+    \/\/ Called by command line parser\n+    public static TimeValue valueOf(String str) {\n+        if (str == null) {\n+            throw new IllegalArgumentException(\"Option should not be null\");\n+        }\n+        if (str.contains(\"s\")) {\n+            return new TimeValue(Integer.parseInt(str.substring(0, str.indexOf(\"s\"))), TimeUnit.SECONDS);\n+        } else if (str.contains(\"m\")) {\n+            return new TimeValue(Integer.parseInt(str.substring(0, str.indexOf(\"m\"))), TimeUnit.MINUTES);\n+        } else if (str.contains(\"h\")) {\n+            return new TimeValue(Integer.parseInt(str.substring(0, str.indexOf(\"h\"))), TimeUnit.HOURS);\n+        } else if (str.contains(\"d\")) {\n+            return new TimeValue(Integer.parseInt(str.substring(0, str.indexOf(\"d\"))), TimeUnit.DAYS);\n+        } else {\n+            throw new IllegalArgumentException(\"Should specify the time suffix: s, m, h, d\");\n+        }\n+    }\n+\n+    public long milliseconds() {\n+        return TimeUnit.MILLISECONDS.convert(time, tu);\n+    }\n+\n+    public boolean isZero() {\n+        return (time == 0);\n+    }\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/TimeValue.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}