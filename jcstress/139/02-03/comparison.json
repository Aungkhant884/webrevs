{"files":[{"patch":"@@ -61,3 +61,1 @@\n-            Options opts = new Options(new String[] {\n-                    \"-v\",\n-                    \"-iters\", \"1\"});\n+            Options opts = new Options(new String[] {\"-v\"});\n","filename":"jcstress-benchmarks\/src\/main\/java\/org\/openjdk\/jcstress\/SampleTestBench.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-    private int iters;\n@@ -100,1 +99,1 @@\n-        OptionSpec<Integer> optTime = parser.accepts(\"time\", \"(Deprecated, to be removed in next releases.\")\n+        OptionSpec<Integer> optTime = parser.accepts(\"time\", \"(Deprecated, to be removed in next releases.)\")\n@@ -103,1 +102,1 @@\n-        OptionSpec<Integer> iters = parser.accepts(\"iters\", \"Iterations per test.\")\n+        OptionSpec<Integer> optIters = parser.accepts(\"iters\", \"(Deprecated, to be removed in next releases.)\")\n@@ -212,1 +211,0 @@\n-            this.iters = 1;\n@@ -219,1 +217,0 @@\n-            this.iters = 5;\n@@ -241,0 +238,7 @@\n+        if (optIters.value(set) != null) {\n+            System.err.println(\"-iters option is not supported anymore, please use -tb.\");\n+            System.err.println();\n+            parser.printHelpOn(System.err);\n+            return false;\n+        }\n+\n@@ -242,1 +246,0 @@\n-        this.iters = orDefault(set.valueOf(iters), this.iters);\n@@ -295,1 +298,0 @@\n-        out.printf(\"    Iterations per fork: %d%n\", getIterations());\n@@ -343,4 +345,0 @@\n-    public int getIterations() {\n-        return iters;\n-    }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -321,1 +321,2 @@\n-            return new ForkedTestConfig(task, timeBudget.targetIterTimeMs());\n+            timeBudget.startTest();\n+            return new ForkedTestConfig(task, timeBudget.targetTestTimeMs());\n@@ -389,0 +390,1 @@\n+            timeBudget.finishTest();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -37,1 +38,1 @@\n-    final int expectedIterations;\n+    final int expectedTests;\n@@ -39,1 +40,2 @@\n-    int completedIterations;\n+    final AtomicInteger inflightTests;\n+    final AtomicInteger leftoverTests;\n@@ -41,2 +43,2 @@\n-    public TimeBudget(int expectedIterations, TimeValue timeBudget) {\n-        this.expectedIterations = expectedIterations;\n+    public TimeBudget(int expectedTests, TimeValue timeBudget) {\n+        this.expectedTests = expectedTests;\n@@ -45,0 +47,2 @@\n+        this.inflightTests = new AtomicInteger();\n+        this.leftoverTests = new AtomicInteger(expectedTests);\n@@ -47,2 +51,3 @@\n-    public void reportIteration() {\n-        completedIterations++;\n+    public void finishTest() {\n+        inflightTests.decrementAndGet();\n+        leftoverTests.decrementAndGet();\n@@ -51,1 +56,5 @@\n-    public int targetIterTimeMs() {\n+    public void startTest() {\n+        inflightTests.incrementAndGet();\n+    }\n+\n+    public int targetTestTimeMs() {\n@@ -56,1 +65,5 @@\n-        int leftoverIterations = expectedIterations - completedIterations;\n+        int testsInflight = inflightTests();\n+        if (testsInflight <= 0) {\n+            testsInflight = 1;\n+        }\n+        int testsLeft = leftoverTests.get();\n@@ -59,2 +72,2 @@\n-        int msPerIter = (timeLeft > 0 && leftoverIterations > 0) ?\n-                (int) (timeLeft \/ leftoverIterations) :\n+        int msPerIter = (timeLeft > 0 && testsLeft > 0) ?\n+                (int) (timeLeft * testsInflight \/ testsLeft) :\n@@ -63,2 +76,2 @@\n-        \/\/ Reserve a bit of iteration time for infrastructure, but never drop below 1ms\n-        msPerIter = Math.max(1, msPerIter - 30);\n+        \/\/ Never drop below 1ms\n+        msPerIter = Math.max(1, msPerIter);\n@@ -72,0 +85,4 @@\n+    public int inflightTests() {\n+        return inflightTests.get();\n+    }\n+\n@@ -78,1 +95,1 @@\n-            out.println(\"    Initial iteration time: \" + targetIterTimeMs() + \" ms\");\n+            out.println(\"    Initial test time: \" + targetTestTimeMs() + \" ms\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TimeBudget.java","additions":30,"deletions":13,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -102,2 +102,0 @@\n-\n-        timeBudget.reportIteration();\n@@ -164,2 +162,4 @@\n-                String.format(\"(Time budget: %s, %d ms iterations)\",\n-                ReportUtils.msToDate(timeBudget.timeLeftMs(), false), timeBudget.targetIterTimeMs());\n+                String.format(\"(Time: %s, %d tests in flight, %d ms per test)\",\n+                        ReportUtils.msToDate(timeBudget.timeLeftMs(), false),\n+                        timeBudget.inflightTests() + 1,\n+                        timeBudget.targetTestTimeMs());\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -296,2 +296,2 @@\n-        if (ms < 0) {\n-            result += \"overtime \";\n+        boolean overtime = ms < 0;\n+        if (overtime) {\n@@ -314,0 +314,3 @@\n+        if (overtime) {\n+            result += \"overtime \";\n+        }\n@@ -315,0 +318,3 @@\n+        if (!overtime) {\n+            result += \" left\";\n+        }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ReportUtils.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -889,2 +889,1 @@\n-        pw.println(\"        for (int c = 0; c < config.iters; c++) {\");\n-        pw.println(\"            run(results);\");\n+        pw.println(\"        run(results);\");\n@@ -892,4 +891,2 @@\n-        pw.println(\"            if (results.count(Outcome.STALE) > 0) {\");\n-        pw.println(\"                forceExit = true;\");\n-        pw.println(\"                break;\");\n-        pw.println(\"            }\");\n+        pw.println(\"        if (results.count(Outcome.STALE) > 0) {\");\n+        pw.println(\"            forceExit = true;\");\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-    public final int iters;\n@@ -45,1 +44,1 @@\n-    public ForkedTestConfig(TestConfig cfg, int iterationTime) {\n+    public ForkedTestConfig(TestConfig cfg, int testTime) {\n@@ -47,2 +46,1 @@\n-        time = iterationTime;\n-        iters = cfg.iters;\n+        time = testTime;\n@@ -62,1 +60,0 @@\n-        iters = dis.readInt();\n@@ -80,1 +77,0 @@\n-        dos.writeInt(iters);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/ForkedTestConfig.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,21 +71,17 @@\n-        for (int c = 0; c < config.iters; c++) {\n-            ArrayList<CounterThread<R>> workers = internalRun();\n-\n-            long startTime = System.nanoTime();\n-            do {\n-                ArrayList<CounterThread<R>> leftovers = new ArrayList<>();\n-                for (CounterThread<R> t : workers) {\n-                    try {\n-                        t.join(1000);\n-\n-                        if (t.throwable() != null) {\n-                            return dumpFailure(Status.TEST_ERROR, \"Unrecoverable error while running\", t.throwable());\n-                        }\n-                        Counter<R> res = t.result();\n-                        if (res != null) {\n-                            result.merge(res);\n-                        } else {\n-                            leftovers.add(t);\n-                        }\n-                    } catch (InterruptedException e) {\n-                        return dumpFailure(Status.TEST_ERROR, \"Unrecoverable error while running\", e.getCause());\n+        ArrayList<CounterThread<R>> workers = internalRun();\n+\n+        long startTime = System.nanoTime();\n+        do {\n+            ArrayList<CounterThread<R>> leftovers = new ArrayList<>();\n+            for (CounterThread<R> t : workers) {\n+                try {\n+                    t.join(1000);\n+\n+                    if (t.throwable() != null) {\n+                        return dumpFailure(Status.TEST_ERROR, \"Unrecoverable error while running\", t.throwable());\n+                    }\n+                    Counter<R> res = t.result();\n+                    if (res != null) {\n+                        result.merge(res);\n+                    } else {\n+                        leftovers.add(t);\n@@ -93,0 +89,2 @@\n+                } catch (InterruptedException e) {\n+                    return dumpFailure(Status.TEST_ERROR, \"Unrecoverable error while running\", e.getCause());\n@@ -94,0 +92,1 @@\n+            }\n@@ -95,5 +94,5 @@\n-                long timeSpent = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);\n-                if (timeSpent > Math.max(10*config.time, MIN_TIMEOUT_MS)) {\n-                    forceExit = true;\n-                    return dumpFailure(Status.TIMEOUT_ERROR, \"Timeout waiting for tasks to complete: \" + timeSpent + \" ms\");\n-                }\n+            long timeSpent = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);\n+            if (timeSpent > Math.max(10 * config.time, MIN_TIMEOUT_MS)) {\n+                forceExit = true;\n+                return dumpFailure(Status.TIMEOUT_ERROR, \"Timeout waiting for tasks to complete: \" + timeSpent + \" ms\");\n+            }\n@@ -101,3 +100,2 @@\n-                workers = leftovers;\n-            } while (!workers.isEmpty());\n-        }\n+            workers = leftovers;\n+        } while (!workers.isEmpty());\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/Runner.java","additions":27,"deletions":29,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-    public final int iters;\n@@ -66,1 +65,0 @@\n-        iters = opts.getIterations();\n@@ -97,1 +95,0 @@\n-        if (iters != that.iters) return false;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}