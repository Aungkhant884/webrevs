{"files":[{"patch":"@@ -147,2 +147,5 @@\n-        OptionSpec<TimeValue> optTimeBudget = parser.accepts(\"tb\", \"Time budget to run the tests. Common time suffixes are accepted.\")\n-                .withRequiredArg().ofType(TimeValue.class).describedAs(\"time\").defaultsTo(new TimeValue(1, TimeUnit.HOURS));\n+        OptionSpec<TimeValue> optTimeBudget = parser.accepts(\"tb\", \"Time budget to run the tests. Harness code would try to fit the entire \" +\n+                \"run in the desired timeframe. This value is expected to be reasonable, as it is not guaranteed that tests would succeed \" +\n+                \"in arbitrarily low time budget. If not set, harness would try to decide a reasonable time, given the number of tests to run. \" +\n+                \"Common time suffixes (s\/m\/h\/d) are accepted.\")\n+                .withRequiredArg().ofType(TimeValue.class).describedAs(\"time\");\n@@ -209,1 +212,1 @@\n-        if (timeBudget.isZero()) {\n+        if (timeBudget != null && timeBudget.isZero()) {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,0 +36,4 @@\n+    static final int DEFAULT_PER_TEST_MS = Integer.getInteger(\"jcstress.timeBudget.defaultPerTestMs\", 1000);\n+    static final int MIN_TIME_MS = Integer.getInteger(\"jcstress.timeBudget.minTimeMs\", 10);\n+    static final int MAX_TIME_MS = Integer.getInteger(\"jcstress.timeBudget.maxTimeMs\", 60_000);\n+\n@@ -37,1 +41,0 @@\n-    final boolean zeroBudget;\n@@ -43,0 +46,1 @@\n+    final TimeValue budget;\n@@ -45,0 +49,1 @@\n+        this.budget = estimateDefault(expectedTests, timeBudget);\n@@ -46,2 +51,1 @@\n-        this.endTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime()) + timeBudget.milliseconds();\n-        this.zeroBudget = timeBudget.isZero();\n+        this.endTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime()) + budget.milliseconds();\n@@ -53,0 +57,8 @@\n+    public static TimeValue estimateDefault(int expectedTests, TimeValue timeBudget) {\n+        if (timeBudget != null) {\n+            return timeBudget;\n+        }\n+\n+        return new TimeValue((long) expectedTests * DEFAULT_PER_TEST_MS, TimeUnit.MILLISECONDS);\n+    }\n+\n@@ -94,3 +106,1 @@\n-        final int MIN_TIME_MS = 30;\n-        final int MAX_TIME_MS = 60_000;\n-        if (msPerTest > MIN_TIME_MS * 2) {\n+        if (msPerTest > MIN_TIME_MS * 2L) {\n@@ -118,1 +128,1 @@\n-            out.println(\"    Target completion: in \" + ReportUtils.msToDate(timeLeftMs(), true));\n+            out.println(\"    Initial completion estimate: \" + ReportUtils.msToDate(timeLeftMs(), true));\n@@ -125,1 +135,1 @@\n-        return zeroBudget;\n+        return budget.isZero();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TimeBudget.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"}]}