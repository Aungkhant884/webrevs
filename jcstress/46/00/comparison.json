{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jcstress.util.Counter;\n@@ -32,2 +33,0 @@\n-import org.openjdk.jcstress.util.HashMultiset;\n-import org.openjdk.jcstress.util.Multiset;\n@@ -47,1 +46,1 @@\n-    private final Multiset<String> states;\n+    private final Counter<String> states;\n@@ -55,1 +54,1 @@\n-        this.states = new HashMultiset<>();\n+        this.states = new Counter<>();\n@@ -66,1 +65,1 @@\n-        states.add(result, count);\n+        states.record(result, count);\n@@ -131,1 +130,1 @@\n-        return states.size();\n+        return states.totalCount();\n@@ -139,1 +138,1 @@\n-        return states.keys();\n+        return states.elementSet();\n@@ -150,2 +149,10 @@\n-    public boolean hasSamples() {\n-        return !states.isEmpty();\n+    public boolean isEmpty() {\n+        return states.isEmpty();\n+    }\n+\n+    public Counter<String> getCounter() {\n+        return states;\n+    }\n+\n+    public void addState(Counter<String> other) {\n+        states.merge(other);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/collectors\/TestResult.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        Multiset<String> stateCounts = new HashMultiset<>();\n+        Counter<String> counter = new Counter<>();\n@@ -88,1 +88,0 @@\n-\n@@ -95,4 +94,0 @@\n-            status = status.combine(r.status());\n-            for (String s : r.getStateKeys()) {\n-                stateCounts.add(s, r.getCount(s));\n-            }\n@@ -100,0 +95,2 @@\n+            status = status.combine(r.status());\n+            counter.merge(r.getCounter());\n@@ -107,5 +104,0 @@\n-\n-        for (String s : stateCounts.keys()) {\n-            root.addState(s, stateCounts.count(s));\n-        }\n-\n@@ -113,5 +105,2 @@\n-\n-        for (String data : messages) {\n-            root.addMessage(data);\n-        }\n-\n+        root.addState(counter);\n+        root.addMessages(messages);\n@@ -142,1 +131,1 @@\n-        if (r.hasSamples()) {\n+        if (!r.isEmpty()) {\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ReportUtils.java","additions":6,"deletions":17,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,6 +27,1 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n+import java.io.*;\n@@ -66,1 +61,1 @@\n-        this(INITIAL_CAPACITY);\n+        init();\n@@ -69,2 +64,2 @@\n-    public Counter(int len) {\n-        length = len;\n+    private void init() {\n+        length = INITIAL_CAPACITY;\n@@ -73,1 +68,1 @@\n-        R[] table = (R[]) new Object[len];\n+        R[] table = (R[]) new Object[length];\n@@ -75,1 +70,2 @@\n-        this.counts = new long[len];\n+        this.counts = new long[length];\n+        this.keyCount = 0;\n@@ -215,0 +211,40 @@\n+    public long totalCount() {\n+        long s = 0;\n+        for (long c : counts) {\n+            s += c;\n+        }\n+        return s;\n+    }\n+\n+    public boolean isEmpty() {\n+        for (long c : counts) {\n+            if (c > 0) return false;\n+        }\n+        return true;\n+    }\n+\n+    private void readObject(ObjectInputStream is) throws IOException, ClassNotFoundException {\n+        init();\n+        int len = is.readInt();\n+        for (int c = 0; c < len; c++) {\n+            @SuppressWarnings(\"unchecked\")\n+            R key = (R) is.readObject();\n+            long count = is.readLong();\n+            record(key, count);\n+        }\n+    }\n+\n+    private void readObjectNoData() throws ObjectStreamException {\n+        init();\n+    }\n+\n+    private void writeObject(ObjectOutputStream os) throws IOException {\n+        os.writeInt(keyCount);\n+        for (int c = 0; c < keys.length; c++) {\n+            if (keys[c] != null) {\n+                os.writeObject(keys[c]);\n+                os.writeLong(counts[c]);\n+            }\n+        }\n+    }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/Counter.java","additions":47,"deletions":11,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -6,0 +6,2 @@\n+import java.io.*;\n+\n@@ -53,0 +55,25 @@\n+    @Test\n+    public void testSerial_1() throws IOException, ClassNotFoundException {\n+        Counter<String> cnt = new Counter<>();\n+        for (int c = 0; c < 1000; c++) {\n+            cnt.record(\"Foo\" + c, c);\n+        }\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n+            oos.writeObject(cnt);\n+        }\n+\n+        try (ByteArrayInputStream bis = new ByteArrayInputStream(baos.toByteArray());\n+             ObjectInputStream ois = new ObjectInputStream(bis)) {\n+            @SuppressWarnings(\"unchecked\")\n+            Counter<String> desCnt = (Counter<String>) ois.readObject();\n+\n+            for (int c = 0; c < 1000; c++) {\n+                Assert.assertEquals(c, desCnt.count(\"Foo\" + c));\n+            }\n+\n+            Assert.assertEquals(1000, desCnt.elementSet().size());\n+        }\n+    }\n+\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/util\/CounterTest.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}