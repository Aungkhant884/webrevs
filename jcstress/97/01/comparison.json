{"files":[{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.high.rmw;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"true, false\", \"false, true\"}, expect = ACCEPTABLE, desc = \"Trivial\")\n+@Outcome(id = \"false, false\",                 expect = ACCEPTABLE, desc = \"Not even once\")\n+@Outcome(id = \"true, true\",                   expect = FORBIDDEN,  desc = \"More than once\")\n+@State\n+public class RMW_04_ConflictCoherence {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_04_ConflictCoherence[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Another example elaborates on conflict behavior.\n+\n+        This example shows that even with the weakest form of RMW (CAS), without any memory ordering\n+        whatsoever, we are still covered by coherence (see BasicJMM_05_Coherence example). That is,\n+        a conflicting RMW operation cannot see the \"stale\" value and succeed to update the location\n+        the second time.\n+\n+        In this example, even though the store of \"1\" happens concurrently with both CASes,\n+        only one CAS is allowed to succeed. This test specifically uses the weakest non-barrier\n+        form of CAS to point that it is the property of the accesses themselves, not their\n+        implied memory ordering.\n+\n+        Indeed, on all platforms (x86_64, AArch64, PPC64), this would happen:\n+                RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          false, false    672,734,373   15.43%  Acceptable  Not even once\n+           false, true  1,757,321,910   40.31%  Acceptable  Trivial\n+           true, false  1,929,492,645   44.26%  Acceptable  Trivial\n+            true, true              0    0.00%   Forbidden  More than once\n+\n+        Both CASes can fail (they are weak, and the store to \"1\" might not happen yet), but\n+        they never succeed at the same time.\n+     *\/\n+\n+    private int v;\n+    public static final VarHandle VH;\n+\n+    static {\n+        try {\n+            VH = MethodHandles.lookup().findVarHandle(RMW_04_ConflictCoherence.class, \"v\", int.class);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    @Actor\n+    public void actor1() {\n+        VH.set(this, 1);\n+    }\n+\n+    @Actor\n+    public void actor2(ZZ_Result r) {\n+        r.r1 = VH.weakCompareAndSetPlain(this, 1, 2);\n+    }\n+\n+    @Actor\n+    public void actor3(ZZ_Result r) {\n+        r.r2 = VH.weakCompareAndSetPlain(this, 1, 3);\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_04_ConflictCoherence.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -42,1 +42,1 @@\n-public class RMW_04_AcquireOnSuccess {\n+public class RMW_05_AcquireOnSuccess {\n@@ -46,1 +46,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_04_AcquireOnSuccess[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_05_AcquireOnSuccess[.SubTestName]\n@@ -70,1 +70,1 @@\n-            VH = MethodHandles.lookup().findVarHandle(RMW_04_AcquireOnSuccess.class, \"g\", int.class);\n+            VH = MethodHandles.lookup().findVarHandle(RMW_05_AcquireOnSuccess.class, \"g\", int.class);\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_05_AcquireOnSuccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_04_AcquireOnSuccess.java","status":"renamed"},{"patch":"@@ -43,1 +43,1 @@\n-public class RMW_05_ReleaseOnSuccess {\n+public class RMW_06_ReleaseOnSuccess {\n@@ -47,1 +47,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_05_ReleaseOnSuccess[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_06_ReleaseOnSuccess[.SubTestName]\n@@ -72,1 +72,1 @@\n-            VH = MethodHandles.lookup().findVarHandle(RMW_05_ReleaseOnSuccess.class, \"g\", int.class);\n+            VH = MethodHandles.lookup().findVarHandle(RMW_06_ReleaseOnSuccess.class, \"g\", int.class);\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_06_ReleaseOnSuccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_05_ReleaseOnSuccess.java","status":"renamed"},{"patch":"@@ -42,1 +42,1 @@\n-public class RMW_06_AcquireOnFailure {\n+public class RMW_07_AcquireOnFailure {\n@@ -46,1 +46,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_06_AcquireOnFailure[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_07_AcquireOnFailure[.SubTestName]\n@@ -68,1 +68,1 @@\n-            VH = MethodHandles.lookup().findVarHandle(RMW_06_AcquireOnFailure.class, \"g\", int.class);\n+            VH = MethodHandles.lookup().findVarHandle(RMW_07_AcquireOnFailure.class, \"g\", int.class);\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_07_AcquireOnFailure.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_06_AcquireOnFailure.java","status":"renamed"},{"patch":"@@ -43,1 +43,1 @@\n-public class RMW_07_ReleaseOnFailure {\n+public class RMW_08_ReleaseOnFailure {\n@@ -47,1 +47,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_07_ReleaseOnFailure[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_08_ReleaseOnFailure[.SubTestName]\n@@ -70,1 +70,1 @@\n-            VH = MethodHandles.lookup().findVarHandle(RMW_07_ReleaseOnFailure.class, \"g\", int.class);\n+            VH = MethodHandles.lookup().findVarHandle(RMW_08_ReleaseOnFailure.class, \"g\", int.class);\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_08_ReleaseOnFailure.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_07_ReleaseOnFailure.java","status":"renamed"},{"patch":"@@ -42,1 +42,1 @@\n-public class RMW_08_GAS_Effects {\n+public class RMW_09_GAS_Effects {\n@@ -46,1 +46,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_08_AtomicityEffects[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_09_GAS_Effects[.SubTestName]\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_09_GAS_Effects.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_08_GAS_Effects.java","status":"renamed"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.IIII_Result;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2, 2, 1\", \"2, 1, 1, 2\"}, expect = FORBIDDEN,  desc = \"Violates coherence.\")\n+@Outcome(                                   expect = ACCEPTABLE, desc = \"Every other result is ignored.\")\n+@State\n+public class AdvancedJMM_03_NonMCA_Coherence {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_03_NonMCA_Coherence[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+         The AdvancedJMM_02_MultiCopyAtomic example shows that writes that from several processors\n+         can be seen by different processors in different orders, on the machines that exhibit no multi-copy\n+         atomicity (non-MCA platforms). However, this only manifests on *different* memory locations.\n+\n+         With a single memory location, coherence (see BasicJMM_05_Coherence) still holds: there is\n+         a total order of writes to a single location. To demonstrate this, we can rewrite AdvancedJMM_02_MultiCopyAtomic\n+         for a single variable, and then even the non-MCA platforms would not show incoherent results.\n+\n+         PPC64 (some less likely Acceptable results pruned):\n+              RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          0, 0, 0, 0  144,731,042    8.70%  Acceptable  Every other result is ignored.\n+          0, 0, 1, 1  110,292,857    6.63%  Acceptable  Every other result is ignored.\n+          0, 0, 2, 2  109,134,556    6.56%  Acceptable  Every other result is ignored.\n+          1, 1, 0, 0  107,110,080    6.44%  Acceptable  Every other result is ignored.\n+          1, 1, 1, 1  360,030,567   21.65%  Acceptable  Every other result is ignored.\n+          1, 1, 2, 2  171,924,770   10.34%  Acceptable  Every other result is ignored.\n+          1, 2, 2, 1            0    0.00%   Forbidden  Violates coherence.\n+          2, 1, 1, 2            0    0.00%   Forbidden  Violates coherence.\n+          2, 2, 0, 0  107,366,602    6.46%  Acceptable  Every other result is ignored.\n+          2, 2, 1, 1  172,793,130   10.39%  Acceptable  Every other result is ignored.\n+          2, 2, 2, 2  370,602,534   22.29%  Acceptable  Every other result is ignored.\n+     *\/\n+\n+    static final VarHandle VH;\n+\n+    static {\n+        try {\n+            VH = MethodHandles.lookup().findVarHandle(AdvancedJMM_03_NonMCA_Coherence.class, \"x\", int.class);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    int x;\n+\n+    @Actor\n+    public void actor1() {\n+        VH.setOpaque(this, 1);\n+    }\n+\n+    @Actor\n+    public void actor2() {\n+        VH.setOpaque(this, 2);\n+    }\n+\n+    @Actor\n+    public void actor3(IIII_Result r) {\n+        r.r1 = (int) VH.getOpaque(this);\n+        r.r2 = (int) VH.getOpaque(this);\n+    }\n+\n+    @Actor\n+    public void actor4(IIII_Result r) {\n+        r.r3 = (int) VH.getOpaque(this);\n+        r.r4 = (int) VH.getOpaque(this);\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_03_NonMCA_Coherence.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n-public class AdvancedJMM_03_LosingUpdates {\n+public class AdvancedJMM_04_LosingUpdates {\n@@ -38,1 +38,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_03_LosingUpdates[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_04_LosingUpdates[.SubTestName]\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_04_LosingUpdates.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_03_LosingUpdates.java","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n-public class AdvancedJMM_04_MisplacedVolatile {\n+public class AdvancedJMM_05_MisplacedVolatile {\n@@ -40,1 +40,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_04_MisplacedVolatile[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_05_MisplacedVolatile[.SubTestName]\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_05_MisplacedVolatile.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_04_MisplacedVolatile.java","status":"renamed"},{"patch":"@@ -35,1 +35,1 @@\n-public class AdvancedJMM_05_SemiSynchronized {\n+public class AdvancedJMM_06_SemiSynchronized {\n@@ -39,1 +39,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_05_SemiSynchronized[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_06_SemiSynchronized[.SubTestName]\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_06_SemiSynchronized.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_05_SemiSynchronized.java","status":"renamed"},{"patch":"@@ -38,1 +38,1 @@\n-public class AdvancedJMM_06_ArrayVolatility {\n+public class AdvancedJMM_07_ArrayVolatility {\n@@ -42,1 +42,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_06_ArrayVolatility[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_07_ArrayVolatility[.SubTestName]\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_07_ArrayVolatility.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_06_ArrayVolatility.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-public class AdvancedJMM_07_WrongReleaseOrder {\n+public class AdvancedJMM_08_WrongReleaseOrder {\n@@ -44,1 +44,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_07_WrongReleaseOrder\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_08_WrongReleaseOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_08_WrongReleaseOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_07_WrongReleaseOrder.java","status":"renamed"},{"patch":"@@ -42,1 +42,1 @@\n-public class AdvancedJMM_08_WrongListReleaseOrder {\n+public class AdvancedJMM_09_WrongListReleaseOrder {\n@@ -46,1 +46,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_08_WrongListReleaseOrder\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_09_WrongListReleaseOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_09_WrongListReleaseOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_08_WrongListReleaseOrder.java","status":"renamed"},{"patch":"@@ -39,1 +39,1 @@\n-public class AdvancedJMM_09_WrongAcquireOrder {\n+public class AdvancedJMM_10_WrongAcquireOrder {\n@@ -43,1 +43,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_09_WrongAcquireOrder\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_10_WrongAcquireOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_10_WrongAcquireOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_09_WrongAcquireOrder.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-public class AdvancedJMM_10_WrongAcquireReleaseOrder {\n+public class AdvancedJMM_11_WrongAcquireReleaseOrder {\n@@ -44,1 +44,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_10_WrongAcquireReleaseOrder\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_11_WrongAcquireReleaseOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_11_WrongAcquireReleaseOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_10_WrongAcquireReleaseOrder.java","status":"renamed"},{"patch":"@@ -37,1 +37,1 @@\n-public class AdvancedJMM_11_VolatileVsFinal {\n+public class AdvancedJMM_12_VolatileVsFinal {\n@@ -40,1 +40,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_11_VolatileVsFinal[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_12_VolatileVsFinal[.SubTestName]\n@@ -49,1 +49,1 @@\n-        volatile itself is in the wrong place. This is similar to previous AdvancedJMM_10_WrongAcquireReleaseOrder\n+        volatile itself is in the wrong place. This is similar to previous AdvancedJMM_11_WrongAcquireReleaseOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_12_VolatileVsFinal.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_11_VolatileVsFinal.java","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n-public class AdvancedJMM_12_SynchronizedAreNotFences {\n+public class AdvancedJMM_13_SynchronizedAreNotFences {\n@@ -40,1 +40,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_12_SynchronizedAreNotFences\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_13_SynchronizedAreNotFences\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_13_SynchronizedAreNotFences.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_12_SynchronizedAreNotFences.java","status":"renamed"},{"patch":"@@ -37,1 +37,1 @@\n-public class AdvancedJMM_13_VolatilesAreNotFences {\n+public class AdvancedJMM_14_VolatilesAreNotFences {\n@@ -41,1 +41,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_13_VolatilesAreNotFences[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_14_VolatilesAreNotFences[.SubTestName]\n@@ -47,1 +47,1 @@\n-        Similarly to AdvancedJMM_12_SynchronizedAreNotFences example, the volatile accesses cannot be reliably\n+        Similarly to AdvancedJMM_13_SynchronizedAreNotFences example, the volatile accesses cannot be reliably\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_14_VolatilesAreNotFences.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_13_VolatilesAreNotFences.java","status":"renamed"}]}