{"files":[{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.infra;\n+\n+\/**\n+ * Marks the class as directly copyable.\n+ *\/\n+public interface Copyable {\n+\n+    \/**\n+     * Produce the distinct copy of the object and all of its references.\n+     * @return object copy\n+     *\/\n+    Object copy();\n+\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/Copyable.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jcstress.infra.Copyable;\n+\n@@ -139,1 +141,1 @@\n-        keys[idx] = decouple(result);\n+        keys[idx] = copyOf(result);\n@@ -197,1 +199,15 @@\n-    private static <T> T decouple(T result) {\n+    private static <T> T copyOf(T result) {\n+        \/\/ Known immutable\n+        if (result instanceof String) {\n+            return result;\n+        }\n+\n+        \/\/ Special class that knows how to copy itself\n+        if (result instanceof Copyable) {\n+            Object copy = ((Copyable) result).copy();\n+            @SuppressWarnings(\"unchecked\")\n+            final T tCopy = (T) copy;\n+            return tCopy;\n+        }\n+\n+        \/\/ Generic copying...\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/Counter.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+        boolean allPrimitive = true;\n@@ -57,0 +58,1 @@\n+                allPrimitive = false;\n@@ -77,1 +79,5 @@\n-        pw.println(\"import java.io.Serializable;\");\n+        if (allPrimitive) {\n+            pw.println(\"import org.openjdk.jcstress.infra.Copyable;\");\n+        } else {\n+            pw.println(\"import java.io.Serializable;\");\n+        }\n@@ -81,1 +87,1 @@\n-        pw.println(\"public final class \" + name + \" implements Serializable {\");\n+        pw.println(\"public final class \" + name + \" implements \" + (allPrimitive ? \"Copyable\" : \"Serializable\" ) + \" {\");\n@@ -161,0 +167,1 @@\n+        pw.println();\n@@ -164,1 +171,0 @@\n-\n@@ -175,1 +181,0 @@\n-\n@@ -177,0 +182,11 @@\n+        pw.println();\n+\n+        if (allPrimitive) {\n+            pw.println(\"    public Object copy() {\");\n+            pw.println(\"        \" + name + \" copy = new \" + name + \"();\");\n+            for (int n = 1; n <= args.length; n++) {\n+                pw.println(\"        copy.r\" + n + \" = r\" + n + \";\");\n+            }\n+            pw.println(\"        return copy;\");\n+            pw.println(\"    }\");\n+        }\n","filename":"jcstress-result-gen\/src\/main\/java\/org\/openjdk\/jcstress\/ResultGenerator.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"}]}