{"files":[{"patch":"@@ -334,1 +334,1 @@\n-        pw.println(\"        super(config, pool, \\\"\" + getQualifiedName(info.getTest()) + \"\\\");\");\n+        pw.println(\"        super(config, pool);\");\n@@ -339,2 +339,1 @@\n-        pw.println(\"    public Counter<\" + r + \"> sanityCheck() throws Throwable {\");\n-        pw.println(\"        Counter<\" + r + \"> counter = new Counter<>();\");\n+        pw.println(\"    public void sanityCheck(Counter<\" + r + \"> counter) throws Throwable {\");\n@@ -343,1 +342,0 @@\n-        pw.println(\"        return counter;\");\n@@ -354,3 +352,4 @@\n-        pw.println(\"        Collection<Future<?>> res = new ArrayList<>();\");\n-        for (ExecutableElement el : info.getActors()) {\n-            pw.print(\"        res.add(pool.submit(() -> \");\n+        for (int a = 0; a < actorsCount; a++) {\n+            ExecutableElement el = info.getActors().get(a);\n+            pw.println(\"        Future<?> a\" + a + \" = pool.submit(new Callable<Object>() { public Object call() {\");\n+            pw.print(\"            \");\n@@ -358,1 +357,3 @@\n-            pw.println(\"));\");\n+            pw.println(\";\");\n+            pw.println(\"            return null;\");\n+            pw.println(\"        }});\");\n@@ -361,7 +362,7 @@\n-        pw.println(\"        for (Future<?> f : res) {\");\n-        pw.println(\"            try {\");\n-        pw.println(\"                f.get();\");\n-        pw.println(\"            } catch (ExecutionException e) {\");\n-        pw.println(\"                throw e.getCause();\");\n-        pw.println(\"            }\");\n-        pw.println(\"        }\");\n+        for (int a = 0; a < actorsCount; a++) {\n+            pw.println(\"        try {\");\n+            pw.println(\"            a\" + a + \".get();\");\n+            pw.println(\"        } catch (ExecutionException e) {\");\n+            pw.println(\"            throw e.getCause();\");\n+            pw.println(\"        }\");\n+        }\n@@ -371,1 +372,2 @@\n-            pw.print(\"            pool.submit(() ->\");\n+            pw.println(\"            pool.submit(new Callable<Object>() { public Object call() {\");\n+            pw.print(\"                \");\n@@ -373,1 +375,3 @@\n-            pw.println(\").get();\");\n+            pw.println(\";\");\n+            pw.println(\"                return null;\");\n+            pw.println(\"            }}).get();\");\n@@ -383,1 +387,2 @@\n-        pw.println(\"        config.adjustStrides((size, cnts) -> {\");\n+        pw.println(\"        config.adjustStrides(new FootprintEstimator() {\");\n+        pw.println(\"          public void runWith(int size, long[] cnts) {\");\n@@ -400,3 +405,3 @@\n-        pw.println(\"            Collection<Future<Long>> res = new ArrayList<>();\");\n-        for (ExecutableElement el : info.getActors()) {\n-            pw.println(\"            res.add(pool.submit(() -> {\");\n+        for (int a = 0; a < actorsCount; a++) {\n+            ExecutableElement el = info.getActors().get(a);\n+            pw.println(\"            Future<Long> a\" + a + \" = pool.submit(new Callable<Long>() { public Long call() {\");\n@@ -411,1 +416,1 @@\n-            pw.println(\"            }));\");\n+            pw.println(\"            }});\");\n@@ -414,8 +419,7 @@\n-        pw.println(\"            for (Future<Long> f : res) {\");\n-        pw.println(\"                try {\");\n-        pw.println(\"                    long a = f.get();\");\n-        pw.println(\"                    cnts[0] += a;\");\n-        pw.println(\"                } catch (Throwable e) {\");\n-        pw.println(\"                    \/\/ Should not happen, checked in API check\");\n-        pw.println(\"                }\");\n-        pw.println(\"            }\");\n+        for (int a = 0; a < actorsCount; a++) {\n+            pw.println(\"            try {\");\n+            pw.println(\"                cnts[0] += a\" + a + \".get();\");\n+            pw.println(\"            } catch (Throwable e) {\");\n+            pw.println(\"                \/\/ Should not happen, checked in API check\");\n+            pw.println(\"            }\");\n+        }\n@@ -425,1 +429,1 @@\n-            pw.println(\"                long a = pool.submit(() -> {\");\n+            pw.println(\"                long a = pool.submit(new Callable<Long>() { public Long call() {\");\n@@ -434,1 +438,1 @@\n-            pw.println(\"                }).get();\");\n+            pw.println(\"                }}).get();\");\n@@ -448,1 +452,1 @@\n-        pw.println(\"        });\");\n+        pw.println(\"        }});\");\n@@ -453,1 +457,1 @@\n-        pw.println(\"    public Collection<Future<Counter<\" + r + \">>> internalRun() {\");\n+        pw.println(\"    public ArrayList<Future<Counter<\" + r + \">>> internalRun() {\");\n@@ -463,1 +467,0 @@\n-\n@@ -465,1 +468,0 @@\n-\n@@ -469,2 +471,1 @@\n-        pw.println(\"        List<Callable<Counter<\" + r + \">>> tasks = new ArrayList<>();\");\n-\n+        pw.println(\"        ArrayList<Future<Counter<\" + r + \">>> results = new ArrayList<>(\" + actorsCount + \");\");\n@@ -472,1 +473,3 @@\n-            pw.println(\"        tasks.add(this::\" + TASK_LOOP_PREFIX + a.getSimpleName() + \");\");\n+            pw.println(\"        results.add(pool.submit(new Callable<Counter<\" + r + \">>() { public Counter<\" + r + \"> call() {\");\n+            pw.println(\"            return \" + TASK_LOOP_PREFIX + a.getSimpleName() + \"();\");\n+            pw.println(\"        }}));\");\n@@ -474,6 +477,0 @@\n-        pw.println(\"        Collections.shuffle(tasks);\");\n-        pw.println();\n-        pw.println(\"        Collection<Future<Counter<\" + r + \">>> results = new ArrayList<>();\");\n-        pw.println(\"        for (Callable<Counter<\" + r + \">> task : tasks) {\");\n-        pw.println(\"            results.add(pool.submit(task));\");\n-        pw.println(\"        }\");\n@@ -558,2 +555,2 @@\n-        pw.println(\"   }\");\n-\n+        pw.println(\"    }\");\n+        pw.println();\n@@ -778,1 +775,1 @@\n-        pw.println(\"        super(config, pool, \\\"\" + getQualifiedName(info.getTest()) + \"\\\");\");\n+        pw.println(\"        super(config, pool);\");\n@@ -799,1 +796,1 @@\n-        pw.println(\"    public Counter<Outcome> sanityCheck() throws Throwable {\");\n+        pw.println(\"    public void sanityCheck(Counter<Outcome> counter) throws Throwable {\");\n@@ -804,1 +801,1 @@\n-        pw.println(\"    public Collection<Future<Counter<Outcome>>> internalRun() {\");\n+        pw.println(\"    public ArrayList<Future<Counter<Outcome>>> internalRun() {\");\n@@ -954,1 +951,1 @@\n-                ArrayList.class, Arrays.class, Collection.class,\n+                ArrayList.class, Arrays.class,\n@@ -959,2 +956,3 @@\n-                Callable.class, Collections.class, List.class,\n-                AffinitySupport.class, AllocProfileSupport.class\n+                Callable.class,\n+                AffinitySupport.class, AllocProfileSupport.class,\n+                FootprintEstimator.class,\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":51,"deletions":53,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.infra.runners;\n+\n+public interface FootprintEstimator {\n+    void runWith(int size, long[] counters);\n+}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/FootprintEstimator.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -30,1 +30,0 @@\n-import java.io.Serializable;\n@@ -107,4 +106,0 @@\n-    public interface FootprintEstimator {\n-        void runWith(int size, long[] counters);\n-    }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/ForkedTestConfig.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.util.Collection;\n-import java.util.List;\n@@ -51,1 +49,0 @@\n-    protected final String testName;\n@@ -53,1 +50,0 @@\n-    protected final List<String> messages;\n@@ -56,1 +52,1 @@\n-    public Runner(ForkedTestConfig config, ExecutorService pool, String testName) {\n+    public Runner(ForkedTestConfig config, ExecutorService pool) {\n@@ -58,1 +54,0 @@\n-        this.testName = testName;\n@@ -61,1 +56,0 @@\n-        this.messages = new ArrayList<>();\n@@ -72,2 +66,1 @@\n-            Counter<R> cnt = sanityCheck();\n-            result.merge(cnt);\n+            sanityCheck(result);\n@@ -81,1 +74,1 @@\n-            Collection<Future<Counter<R>>> futures = internalRun();\n+            ArrayList<Future<Counter<R>>> futures = internalRun();\n@@ -84,3 +77,2 @@\n-            boolean allStopped = false;\n-            while (!allStopped) {\n-                allStopped = true;\n+            do {\n+                ArrayList<Future<Counter<R>>> leftovers = new ArrayList<>();\n@@ -89,1 +81,1 @@\n-                        t.get(1, TimeUnit.SECONDS);\n+                        result.merge(t.get(1, TimeUnit.SECONDS));\n@@ -91,1 +83,1 @@\n-                        allStopped = false;\n+                        leftovers.add(t);\n@@ -99,0 +91,1 @@\n+                    forceExit = true;\n@@ -101,1 +94,0 @@\n-            }\n@@ -103,7 +95,2 @@\n-            for (Future<Counter<R>> t : futures) {\n-                try {\n-                    result.merge(t.get());\n-                } catch (InterruptedException | ExecutionException e) {\n-                    \/\/ Cannot happen anymore.\n-                }\n-            }\n+                futures = leftovers;\n+            } while (!futures.isEmpty());\n@@ -115,9 +102,0 @@\n-    private TestResult prepareResult(Status status) {\n-        TestResult result = new TestResult(status);\n-        for (String msg : messages) {\n-            result.addMessage(msg);\n-        }\n-        messages.clear();\n-        return result;\n-    }\n-\n@@ -125,2 +103,3 @@\n-        messages.add(message);\n-        return prepareResult(status);\n+        TestResult r = new TestResult(status);\n+        r.addMessage(message);\n+        return r;\n@@ -130,4 +109,4 @@\n-        messages.add(message);\n-        TestResult result = prepareResult(status);\n-        result.addMessage(StringUtils.getStacktrace(aux));\n-        return result;\n+        TestResult r = new TestResult(status);\n+        r.addMessage(message);\n+        r.addMessage(StringUtils.getStacktrace(aux));\n+        return r;\n@@ -137,1 +116,1 @@\n-        TestResult result = prepareResult(Status.NORMAL);\n+        TestResult r = new TestResult(Status.NORMAL);\n@@ -139,1 +118,1 @@\n-             result.addState(String.valueOf(e), cnt.count(e));\n+             r.addState(String.valueOf(e), cnt.count(e));\n@@ -141,1 +120,1 @@\n-        return result;\n+        return r;\n@@ -148,1 +127,1 @@\n-    public abstract Counter<R> sanityCheck() throws Throwable;\n+    public abstract void sanityCheck(Counter<R> counter) throws Throwable;\n@@ -150,1 +129,1 @@\n-    public abstract Collection<Future<Counter<R>>> internalRun();\n+    public abstract ArrayList<Future<Counter<R>>> internalRun();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/Runner.java","additions":22,"deletions":43,"binary":false,"changes":65,"status":"modified"}]}