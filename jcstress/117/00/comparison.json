{"files":[{"patch":"@@ -147,0 +147,39 @@\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        For completeness, writing and reading the variable under explicit synchronization\n+        also provides the progress guarantees. The writes under one thread releasing the lock\n+        are visible to the thread subsequently acquiring the lock. Therefore, the loop eventually\n+        terminates.\n+\n+        Indeed, this is guaranteed to happen on all platforms:\n+\n+              RESULT  SAMPLES     FREQ       EXPECT  DESCRIPTION\n+               STALE        0    0.00%  Interesting  Test is stuck\n+          TERMINATED   35,750  100.00%   Acceptable  Gracefully finished\n+     *\/\n+\n+    @JCStressTest(Mode.Termination)\n+    @Outcome(id = \"TERMINATED\", expect = ACCEPTABLE,             desc = \"Gracefully finished\")\n+    @Outcome(id = \"STALE\",      expect = ACCEPTABLE_INTERESTING, desc = \"Test is stuck\")\n+    @State\n+    public static class SyncSpin {\n+        boolean ready;\n+\n+        @Actor\n+        public void actor1() {\n+            while (true) { \/\/ spin\n+               synchronized (this) {\n+                   if (ready) break;\n+               }\n+            }\n+        }\n+\n+        @Signal\n+        public void signal() {\n+            synchronized (this) {\n+                ready = true;\n+            }\n+        }\n+    }\n+\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/basic\/BasicJMM_04_Progress.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -108,0 +108,4 @@\n+        Note that we also synchronize the fork releases to guarantee progress. Making the fork\n+        accesses \"opaque\" would also suffice, but using the same lock on reader and writer side\n+        is cleaner here. See also BasicJMM_04_Progress sample.\n+\n@@ -155,2 +159,4 @@\n-            forks[f1] = false;\n-            forks[f2] = false;\n+            synchronized (waiter) {\n+                forks[f1] = false;\n+                forks[f2] = false;\n+            }\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/problems\/classic\/Classic_01_DiningPhilosophers.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}