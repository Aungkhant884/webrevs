{"files":[{"patch":"@@ -68,1 +68,1 @@\n-        cfg.setCPUMap(new CPUMap(map, map, map, map));\n+        cfg.setCPUMap(new CPUMap(map, map, map, map, map));\n","filename":"jcstress-benchmarks\/src\/main\/java\/org\/openjdk\/jcstress\/SampleTestBench.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -200,6 +200,2 @@\n-    public int getActorCpus() {\n-        return scheduler.getActorCpus();\n-    }\n-\n-    public int getSystemCpus() {\n-        return scheduler.getSystemCpus();\n+    public int getCpus() {\n+        return scheduler.getCpus();\n@@ -395,4 +391,7 @@\n-                if (OSSupport.taskSetAvailable() && (task.shClass.mode() != AffinityMode.NONE)) {\n-                    command.add(\"taskset\");\n-                    command.add(\"-c\");\n-                    command.add(cpuMap.globalAffinityMap());\n+                if (OSSupport.taskSetAvailable()) {\n+                    String map = cpuMap.globalAffinityMap();\n+                    if (!map.isEmpty()) {\n+                        command.add(\"taskset\");\n+                        command.add(\"-c\");\n+                        command.add(map);\n+                    }\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/TestExecutor.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+    private final int totalCpuCount;\n@@ -79,0 +80,1 @@\n+        totalCpuCount = opts.getCPUCount();\n@@ -162,2 +164,1 @@\n-        final int actorCpus = executor.getActorCpus();\n-        final int systemCpus = executor.getSystemCpus();\n+        final int cpus = executor.getCpus();\n@@ -171,2 +172,2 @@\n-        String l3 = String.format(\"(CPUs: %d actor, %d system, %d total)\",\n-                actorCpus, systemCpus, actorCpus + systemCpus);\n+        String l3 = String.format(\"(CPUs: %d configured, %d allocated)\",\n+                totalCpuCount, cpus);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ConsoleReportPrinter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -125,2 +125,1 @@\n-            pw.format(\"  CPU allocation:%n\");\n-            pw.println(CPUMap.description(config.cpuMap, config.actorNames));\n+            pw.format(\"  CPU allocation: %s%n\", CPUMap.description(config.cpuMap, config.actorNames));\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/grading\/ReportUtils.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-    public static final CPUMap UNSET = new CPUMap(new int[] {}, new int[] {}, new int[] {}, new int[] {});\n-\n@@ -37,0 +35,1 @@\n+    private final int[] allocatedMap;\n@@ -38,1 +37,2 @@\n-    public CPUMap(int[] actorMap, int[] systemMap, int[] packageMap, int[] coreMap) {\n+    public CPUMap(int[] allocatedMap, int[] actorMap, int[] systemMap, int[] packageMap, int[] coreMap) {\n+        this.allocatedMap = allocatedMap;\n@@ -45,0 +45,4 @@\n+    public int[] allocatedMap() {\n+        return allocatedMap;\n+    }\n+\n@@ -59,0 +63,2 @@\n+        boolean hasOne = false;\n+\n@@ -62,0 +68,4 @@\n+                if (!hasOne) {\n+                    sb.append(\"\\n\");\n+                    hasOne = true;\n+                }\n@@ -76,0 +86,4 @@\n+                if (!hasOne) {\n+                    sb.append(\"\\n\");\n+                    hasOne = true;\n+                }\n@@ -86,0 +100,5 @@\n+        if (!hasOne) {\n+            sb.append(\"unspecified\");\n+            sb.append(System.lineSeparator());\n+        }\n+\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/CPUMap.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -39,2 +39,1 @@\n-    private int currentActorUse;\n-    private int currentSystemUse;\n+    private int currentUse;\n@@ -58,1 +57,1 @@\n-        if (currentActorUse + scl.numActors() > maxUse) {\n+        if (currentUse + scl.numActors() > maxUse) {\n@@ -69,1 +68,2 @@\n-                cpuMap = scheduleNone(scl);\n+                \/\/ Pretty much the same, but do not publish system map\n+                cpuMap = scheduleGlobalOrNone(scl, true);\n@@ -72,1 +72,1 @@\n-                cpuMap = scheduleGlobal(scl);\n+                cpuMap = scheduleGlobalOrNone(scl, false);\n@@ -157,1 +157,1 @@\n-                    currentActorUse++;\n+                    currentUse++;\n@@ -171,1 +171,1 @@\n-                    currentSystemUse++;\n+                    currentUse++;\n@@ -196,1 +196,5 @@\n-        return new CPUMap(actorMap, systemMap, packageMap, coreMap);\n+        int[] allocatedMap = new int[actorMap.length + systemMap.length];\n+        System.arraycopy(actorMap, 0, allocatedMap, 0, actorMap.length);\n+        System.arraycopy(systemMap, 0, allocatedMap, actorMap.length, systemMap.length);\n+\n+        return new CPUMap(allocatedMap, actorMap, systemMap, packageMap, coreMap);\n@@ -199,1 +203,1 @@\n-    private CPUMap scheduleGlobal(SchedulingClass scl) {\n+    private CPUMap scheduleGlobalOrNone(SchedulingClass scl, boolean none) {\n@@ -223,3 +227,3 @@\n-        \/\/ Take all affected cores as system assignment\n-        int[] system = new int[topology.totalThreads()];\n-        int systemCnt = 0;\n+        \/\/ Take all affected cores as assignment\n+        int[] allocatedMap = new int[topology.totalThreads()];\n+        int cnt = 0;\n@@ -233,2 +237,2 @@\n-                system[systemCnt++] = thread;\n-                currentSystemUse++;\n+                allocatedMap[cnt++] = thread;\n+                currentUse++;\n@@ -241,1 +245,9 @@\n-        int[] systemMap = Arrays.copyOf(system, systemCnt);\n+        allocatedMap = Arrays.copyOf(allocatedMap, cnt);\n+        int[] systemMap;\n+        if (none) {\n+            \/\/ No assignments for system\n+            systemMap = new int[0];\n+        } else {\n+            \/\/ All assignments go to system\n+            systemMap = Arrays.copyOf(allocatedMap, cnt);\n+        }\n@@ -247,1 +259,1 @@\n-        for (int thread : systemMap) {\n+        for (int thread : allocatedMap) {\n@@ -252,6 +264,1 @@\n-        return new CPUMap(actorMap, systemMap, packageMap, coreMap);\n-    }\n-\n-    private CPUMap scheduleNone(SchedulingClass scl) {\n-        \/\/ TODO: Does this mean \"none\" is actually fake?\n-        return scheduleGlobal(scl);\n+        return new CPUMap(allocatedMap, actorMap, systemMap, packageMap, coreMap);\n@@ -283,1 +290,1 @@\n-        final int expected = currentActorUse + currentSystemUse;\n+        final int expected = currentUse;\n@@ -306,8 +313,1 @@\n-        for (int c : cpuMap.actorMap()) {\n-            if (c != -1) {\n-                availableCPUs.set(c, true);\n-                availableCores.set(topology.threadToCore(c), true);\n-                currentActorUse--;\n-            }\n-        }\n-        for (int c : cpuMap.systemMap()) {\n+        for (int c : cpuMap.allocatedMap()) {\n@@ -316,1 +316,1 @@\n-            currentSystemUse--;\n+            currentUse--;\n@@ -339,6 +339,2 @@\n-    public int getActorCpus() {\n-        return currentActorUse;\n-    }\n-\n-    public int getSystemCpus() {\n-        return currentSystemUse;\n+    public int getCpus() {\n+        return currentUse;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/os\/Scheduler.java","additions":34,"deletions":38,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.jcstress.os.topology.PresetRegularTopology;\n@@ -30,1 +29,0 @@\n-import org.openjdk.jcstress.os.topology.TopologyParseException;\n@@ -66,0 +64,2 @@\n+            Assert.assertNotEquals(\"\", cpuMap.globalAffinityMap());\n+            Assert.assertNotEquals(0, cpuMap.allocatedMap().length);\n@@ -112,0 +112,2 @@\n+\n+            Assert.assertNotEquals(\"\", cpuMap.globalAffinityMap());\n@@ -142,1 +144,3 @@\n-            Assert.assertNotEquals(0, cpuMap.systemMap().length);\n+            Assert.assertEquals(0, cpuMap.systemMap().length);\n+            Assert.assertEquals(\"\", cpuMap.globalAffinityMap());\n+            Assert.assertNotEquals(0, cpuMap.allocatedMap().length);\n","filename":"jcstress-core\/src\/test\/java\/org\/openjdk\/jcstress\/os\/AbstractSchedulerAffinityTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}