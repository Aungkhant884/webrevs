{"files":[{"patch":"@@ -117,22 +117,0 @@\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-assembly-plugin<\/artifactId>\n-                <executions>\n-                    <execution>\n-                        <id>whitebox<\/id>\n-                        <phase>prepare-package<\/phase>\n-                        <goals>\n-                            <goal>single<\/goal>\n-                        <\/goals>\n-                        <configuration>\n-                            <outputDirectory>${project.build.outputDirectory}<\/outputDirectory>\n-                            <finalName>whitebox-api<\/finalName>\n-                            <attach>false<\/attach>\n-                            <appendAssemblyId>false<\/appendAssemblyId>\n-                            <descriptors>\n-                                <descriptor>src\/assembly\/whitebox.xml<\/descriptor>\n-                            <\/descriptors>\n-                        <\/configuration>\n-                    <\/execution>\n-                <\/executions>\n-            <\/plugin>\n","filename":"jcstress-core\/pom.xml","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1,15 +0,0 @@\n-<assembly xmlns=\"http:\/\/maven.apache.org\/ASSEMBLY\/2.0.0\"\n-          xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n-          xsi:schemaLocation=\"http:\/\/maven.apache.org\/ASSEMBLY\/2.0.0 http:\/\/maven.apache.org\/xsd\/assembly-2.0.0.xsd\">\n-    <id>whitebox<\/id>\n-    <formats>\n-        <format>jar<\/format>\n-    <\/formats>\n-    <includeBaseDirectory>false<\/includeBaseDirectory>\n-    <files>\n-        <file>\n-            <source>${project.build.outputDirectory}\/sun\/hotspot\/WhiteBox.class<\/source>\n-            <outputDirectory>\/sun\/hotspot\/<\/outputDirectory>\n-        <\/file>\n-    <\/files>\n-<\/assembly>\n\\ No newline at end of file\n","filename":"jcstress-core\/src\/assembly\/whitebox.xml","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -33,1 +33,0 @@\n-import org.openjdk.jcstress.vm.WhiteBoxSupport;\n@@ -49,6 +48,0 @@\n-        try {\n-            WhiteBoxSupport.initSafely();\n-        } catch (NoClassDefFoundError e) {\n-            \/\/ expected on JDK 7 and lower, parent should have printed the message for user\n-        }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/ForkedMain.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import org.openjdk.jcstress.vm.DeoptMode;\n@@ -64,1 +63,0 @@\n-    private DeoptMode deoptMode;\n@@ -124,4 +122,0 @@\n-        OptionSpec<DeoptMode> deoptMode = parser.accepts(\"deoptMode\", \"De-optimization mode, happens before each test. \" +\n-                \"NONE = No deoptimization. METHOD = Deoptimize org.openjdk.jcstress.*. ALL = Deoptimize everything.\")\n-                .withRequiredArg().ofType(DeoptMode.class).describedAs(\"mode\");\n-\n@@ -206,1 +200,0 @@\n-        this.deoptMode = DeoptMode.ALL;\n@@ -215,1 +208,0 @@\n-            this.deoptMode = DeoptMode.NONE;\n@@ -241,1 +233,0 @@\n-        this.deoptMode = orDefault(set.valueOf(deoptMode), this.deoptMode);\n@@ -292,4 +283,0 @@\n-    public DeoptMode deoptMode() {\n-        return deoptMode;\n-    }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/Options.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import org.openjdk.jcstress.vm.WhiteBoxSupport;\n@@ -787,6 +786,0 @@\n-        pw.println(\"        try {\");\n-        pw.println(\"            WhiteBoxSupport.tryDeopt(config.deoptMode);\");\n-        pw.println(\"        } catch (NoClassDefFoundError err) {\");\n-        pw.println(\"            \/\/ gracefully \\\"handle\\\"\");\n-        pw.println(\"        }\");\n-        pw.println();\n@@ -965,1 +958,1 @@\n-                WhiteBoxSupport.class, ExecutionException.class,\n+                ExecutionException.class,\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/processors\/JCStressTestProcessor.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import org.openjdk.jcstress.vm.WhiteBoxSupport;\n@@ -81,6 +80,0 @@\n-        try {\n-            WhiteBoxSupport.tryDeopt(config.deoptMode);\n-        } catch (NoClassDefFoundError err) {\n-            \/\/ gracefully \"handle\"\n-        }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/Runner.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import org.openjdk.jcstress.vm.AllocProfileSupport;\n-import org.openjdk.jcstress.vm.DeoptMode;\n@@ -37,2 +35,0 @@\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.function.Consumer;\n@@ -44,1 +40,0 @@\n-    public final DeoptMode deoptMode;\n@@ -77,1 +72,0 @@\n-        deoptMode = opts.deoptMode();\n@@ -163,1 +157,0 @@\n-        if (deoptMode != that.deoptMode) return false;\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/infra\/runners\/TestConfig.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.vm;\n-\n-public class DeoptAllTestMain {\n-\n-    public static void main(String... args) throws Throwable {\n-        WhiteBoxSupport.init();\n-        Throwable t = WhiteBoxSupport.errorAll();\n-        if (t != null) {\n-            throw t;\n-        }\n-    }\n-\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/DeoptAllTestMain.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.vm;\n-\n-public class DeoptMethodTestMain {\n-\n-    public static void main(String... args) throws Throwable {\n-        WhiteBoxSupport.init();\n-        Throwable t = WhiteBoxSupport.errorMethod();\n-        if (t != null) {\n-            throw t;\n-        }\n-    }\n-\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/DeoptMethodTestMain.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.vm;\n-\n-public enum DeoptMode {\n-    NONE,\n-    METHOD,\n-    ALL,\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/DeoptMode.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -158,16 +158,0 @@\n-        try {\n-            String whiteBoxJarName = FileUtils.copyFileToTemp(\"\/whitebox-api.jar\", \"whitebox\", \".jar\");\n-            detect(\"Unlocking Whitebox API for online de-optimization: all methods\",\n-                    DeoptAllTestMain.class,\n-                    GLOBAL_JVM_FLAGS,\n-                    \"-XX:+WhiteBoxAPI\", \"-Xbootclasspath\/a:\" + whiteBoxJarName\n-            );\n-            detect(\"Unlocking Whitebox API for online de-optimization: selected methods\",\n-                    DeoptMethodTestMain.class,\n-                    GLOBAL_JVM_FLAGS,\n-                    \"-XX:+WhiteBoxAPI\", \"-Xbootclasspath\/a:\" + whiteBoxJarName\n-            );\n-        } catch (IOException e) {\n-            throw new IllegalStateException(\"Fatal error: WhiteBoxAPI JAR problems.\", e);\n-        }\n-\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/VMSupport.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,149 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.vm;\n-\n-import org.openjdk.jcstress.util.Reflections;\n-import sun.hotspot.WhiteBox;\n-\n-import java.io.IOException;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-\n-public class WhiteBoxSupport {\n-\n-    private static WhiteBox whiteBox;\n-    private static volatile boolean tried;\n-    private static volatile Collection<String> methods;\n-\n-    private static volatile boolean AVAILABLE_ALL;\n-    private static volatile boolean AVAILABLE_METHOD;\n-\n-    private static volatile Throwable EXCEPTION_ALL;\n-    private static volatile Throwable EXCEPTION_METHOD;\n-\n-    public static Throwable errorAll() {\n-        return EXCEPTION_ALL;\n-    }\n-\n-    public static Throwable errorMethod() {\n-        return EXCEPTION_METHOD;\n-    }\n-\n-    public static void init() {\n-        if (tried) return;\n-        try {\n-            initAndTest();\n-        } finally {\n-            tried = true;\n-        }\n-    }\n-\n-    private static void initAndTest() {\n-        WhiteBox.registerNatives();\n-        WhiteBox w = new WhiteBox();\n-\n-        try {\n-            w.deoptimizeMethod(WhiteBoxSupport.class.getMethod(\"initSafely\"));\n-            w.isClassAlive(WhiteBoxSupport.class.getName());\n-            AVAILABLE_METHOD = true;\n-        } catch (Throwable ex) {\n-            EXCEPTION_METHOD = ex;\n-            AVAILABLE_METHOD = false;\n-        }\n-\n-        try {\n-            w.deoptimizeAll();\n-            AVAILABLE_ALL = true;\n-        } catch (Throwable ex) {\n-            EXCEPTION_ALL = ex;\n-            AVAILABLE_ALL = false;\n-        }\n-\n-        whiteBox = w;\n-    }\n-\n-    public static void initSafely() {\n-        if (tried) return;\n-        try {\n-            initAndTest();\n-        } catch (Throwable e) {\n-            \/\/ expected\n-        } finally {\n-            tried = true;\n-        }\n-    }\n-\n-    public static void tryDeopt(DeoptMode mode) {\n-        WhiteBox w = whiteBox;\n-        if (w != null) {\n-            switch (mode) {\n-                case ALL:\n-                    if (AVAILABLE_ALL) {\n-                        w.deoptimizeAll();\n-                    }\n-                    break;\n-                case METHOD:\n-                    if (AVAILABLE_METHOD) {\n-                        try {\n-                            for (Method m : getJCStressMethods()) {\n-                                w.deoptimizeMethod(m);\n-                            }\n-                        } catch (IOException e) {\n-                            throw new IllegalStateException();\n-                        }\n-                    }\n-                    break;\n-                case NONE:\n-                    break;\n-                default:\n-                    throw new IllegalStateException(\"Unknown deopt mode: \" + mode);\n-            }\n-        }\n-    }\n-\n-    private static Collection<Method> getJCStressMethods() throws IOException {\n-        Collection<String> ms = methods;\n-        if (ms == null) {\n-            ms = Reflections.getClassNames(\"org.openjdk.jcstress\");\n-            methods = ms;\n-        }\n-\n-        List<Method> im = new ArrayList<>();\n-        for (String name : ms) {\n-            \/\/ Avoid loading classes for tests that were not yet executed.\n-            if (!whiteBox.isClassAlive(name)) continue;\n-            try {\n-                Collections.addAll(im, Class.forName(name).getDeclaredMethods());\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException();\n-            }\n-        }\n-        return im;\n-    }\n-\n-}\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/WhiteBoxSupport.java","additions":0,"deletions":149,"binary":false,"changes":149,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.hotspot;\n-\n-import java.lang.reflect.Executable;\n-\n-public class WhiteBox {\n-\n-    public WhiteBox() {\n-    }\n-\n-    public static native void registerNatives();\n-\n-    public native void deoptimizeAll();\n-\n-    private static boolean AVAILABLE_deoptimizeMethod0 = true;\n-\n-    public int deoptimizeMethod(Executable method) {\n-        if (AVAILABLE_deoptimizeMethod0) {\n-            try {\n-                return deoptimizeMethod0(method, false);\n-            } catch (Error e) {\n-                AVAILABLE_deoptimizeMethod0 = false;\n-            }\n-        }\n-        return deoptimizeMethod(method, false);\n-    }\n-\n-    private native int deoptimizeMethod(Executable method, boolean isOsr);\n-    private native int deoptimizeMethod0(Executable method, boolean isOsr);\n-\n-    private static boolean AVAILABLE_isClassAlive0 = true;\n-\n-    public boolean isClassAlive(String name) {\n-        String className = name.replace('.', '\/');\n-        if (AVAILABLE_isClassAlive0) {\n-            try {\n-                return isClassAlive0(className);\n-            } catch (Error e) {\n-                AVAILABLE_isClassAlive0 = false;\n-            }\n-        }\n-        return countAliveClasses0(className) > 0;\n-    }\n-\n-    private native boolean isClassAlive0(String name);\n-    private native int countAliveClasses0(String name);\n-\n-}\n\\ No newline at end of file\n","filename":"jcstress-core\/src\/main\/java\/sun\/hotspot\/WhiteBox.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"}]}