{"files":[{"patch":"@@ -1,199 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.concurrency.classic;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.Z_Result;\n-\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.atomic.AtomicIntegerArray;\n-\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n-import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t ClassicProblem_01_DiningPhilosophers\n- *\/\n-\n-\/**\n- * This sample shows you how JCStress can help you to test solutions for the famous Dining philosophers problem.\n- * It solves this problem by a resource hierarchy, by an arbitrator and by limiting the number of diners.\n- * See https:\/\/en.wikipedia.org\/wiki\/Dining_philosophers_problem for more information about the problem.\n- *\/\n-public class ClassicProblem_01_DiningPhilosophers {\n-    @JCStressTest\n-    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n-    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n-    @State\n-    public static class ResourceHierarchy {\n-        private final Object[] forks = new Object[] { new Object(), new Object(), new Object() };\n-\n-        @Actor\n-        public void p1() {\n-            \/\/ think\n-            eat(0, 1);\n-        }\n-\n-        @Actor\n-        public void p2() {\n-            \/\/ think\n-            eat(1, 2);\n-        }\n-\n-        @Actor\n-        public void p3() {\n-            \/\/ think\n-            eat(0, 2); \/\/ and not eat(2, 0) because we must acquire all locks in the same order to avoid deadlocks\n-        }\n-\n-        @Arbiter\n-        public void fake(Z_Result r) {\n-            r.r1 = true;\n-        }\n-\n-        final protected void eat(int fork1, int fork2) {\n-            synchronized (forks[fork1]) {\n-                synchronized (forks[fork2]) {\n-                    \/\/ eating\n-                }\n-            }\n-        }\n-    }\n-\n-    static abstract class Base {\n-        private final AtomicIntegerArray forks = new AtomicIntegerArray(3);\n-\n-        protected boolean tryPickForks(int fork1, int fork2) {\n-            if (tryPickFork(fork1)) {\n-                if (tryPickFork(fork2)) {\n-                    return true;\n-                } else {\n-                    dropFork(fork1);\n-                }\n-            }\n-            return false;\n-        }\n-\n-        protected boolean tryPickFork(int fork) {\n-            return forks.compareAndSet(fork, 0, 1);\n-        }\n-\n-        protected void dropFork(int fork) {\n-            forks.set(fork, 0);\n-        }\n-    }\n-\n-    @JCStressTest\n-    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n-    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n-    @State\n-    public static class Arbitrator extends Base {\n-        private final Object waiter = new Object();\n-\n-        @Actor\n-        public void p1() {\n-            \/\/ think\n-            eat(0, 1);\n-        }\n-\n-        @Actor\n-        public void p2() {\n-            \/\/ think\n-            eat(1, 2);\n-        }\n-\n-        @Actor\n-        public void p3() {\n-            \/\/ think\n-            eat(2, 0);\n-        }\n-\n-        @Arbiter\n-        public void fake(Z_Result r) {\n-            r.r1 = true;\n-        }\n-\n-        final protected void eat(int fork1, int fork2) {\n-            final boolean hasForks;\n-            synchronized (waiter) {\n-                hasForks = tryPickForks(fork1, fork2);\n-            }\n-\n-            if (hasForks) {\n-                \/\/ eating\n-                dropFork(fork1);\n-                dropFork(fork2);\n-            }\n-        }\n-    }\n-\n-    @JCStressTest\n-    @Outcome(id = {\"true\"}, expect = ACCEPTABLE, desc = \"All philosophers could eat with their 2 neighboured forks.\")\n-    @Outcome(expect = FORBIDDEN, desc = \"At least one philosopher couldn't eat.\")\n-    @State\n-    public static class OneDinerFewer extends Base {\n-        private final Semaphore diners = new Semaphore(2);\n-\n-        @Actor\n-        public void p1() {\n-            \/\/ think\n-            eat(0, 1);\n-        }\n-\n-        @Actor\n-        public void p2() {\n-            \/\/ think\n-            eat(1, 2);\n-        }\n-\n-        @Actor\n-        public void p3() {\n-            \/\/ think\n-            eat(2, 0);\n-        }\n-\n-        @Arbiter\n-        public void fake(Z_Result r) {\n-            r.r1 = true;\n-        }\n-\n-        final protected void eat(int fork1, int fork2) {\n-            try {\n-                diners.acquire();\n-                final boolean hasForks = tryPickForks(fork1, fork2);\n-                diners.release();\n-\n-                if (hasForks) {\n-                    \/\/ eating\n-                    dropFork(fork1);\n-                    dropFork(fork2);\n-                }\n-            } catch (InterruptedException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/classic\/ClassicProblem_01_DiningPhilosophers.java","additions":0,"deletions":199,"binary":false,"changes":199,"status":"deleted"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.concurrency.mutex;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_01_PetersonAlgorithm\n- *\/\n-\n-\/**\n- * Implemented according to https:\/\/en.wikipedia.org\/wiki\/Peterson%27s_algorithm\n- *\/\n-@JCStressTest\n-@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n-@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n-@State\n-public class Mutex_01_PetersonAlgorithm {\n-    private volatile boolean flagForActor1;\n-    private volatile boolean flagForActor2;\n-    private volatile int turn;\n-    private int v;\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        flagForActor1 = true;\n-        turn = 2;\n-        while (flagForActor2 && turn == 2); \/\/ wait\n-        { \/\/ critical section\n-            r.r1 = ++v;\n-        }\n-        flagForActor1 = false;\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        flagForActor2 = true;\n-        turn = 1;\n-        while (flagForActor1 && turn == 1); \/\/ wait\n-        { \/\/ critical section\n-            r.r2 = ++v;\n-        }\n-        flagForActor2 = false;\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/mutex\/Mutex_01_PetersonAlgorithm.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.concurrency.mutex;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_02_DekkerAlgorithm\n-*\/\n-\n-\/**\n- * Implemented according to https:\/\/en.wikipedia.org\/wiki\/Dekker%27s_algorithm\n- *\/\n-@JCStressTest\n-@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n-@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n-@State\n-public class Mutex_02_DekkerAlgorithm {\n-    private volatile boolean actor1wantsToEnter;\n-    private volatile boolean actor2wantsToEnter;\n-    private volatile int turn = 1;\n-    private int v;\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        actor1wantsToEnter = true;\n-        while (actor2wantsToEnter) {\n-            if (turn != 1) {\n-                actor1wantsToEnter = false;\n-                while (turn != 1); \/\/ wait\n-                actor1wantsToEnter = true;\n-            }\n-        }\n-        { \/\/ critical section\n-            r.r1 = ++v;\n-        }\n-        turn = 2;\n-        actor1wantsToEnter = false;\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        actor2wantsToEnter = true;\n-        while (actor1wantsToEnter) {\n-            if (turn != 2) {\n-                actor2wantsToEnter = false;\n-                while (turn != 2); \/\/ wait\n-                actor2wantsToEnter = true;\n-            }\n-        }\n-        { \/\/ critical section\n-            r.r2 = ++v;\n-        }\n-        turn = 1;\n-        actor2wantsToEnter = false;\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/mutex\/Mutex_02_DekkerAlgorithm.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.concurrency.mutex;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_03_AtomicBoolean\n-*\/\n-\n-@JCStressTest\n-@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n-@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n-@State\n-public class Mutex_03_AtomicBoolean {\n-    private final AtomicBoolean taken = new AtomicBoolean(false);\n-    private int v;\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        while(taken.get() || !taken.compareAndSet(false, true)); \/\/ spin\n-        { \/\/ critical section\n-            r.r1 = ++v;\n-        }\n-        taken.set(false);\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        while(taken.get() || !taken.compareAndSet(false, true)); \/\/ spin\n-        { \/\/ critical section\n-            r.r2 = ++v;\n-        }\n-        taken.set(false);\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/mutex\/Mutex_03_AtomicBoolean.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.concurrency.mutex;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_04_Synchronized\n-*\/\n-\n-@JCStressTest\n-@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n-@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n-@State\n-public class Mutex_04_Synchronized {\n-    private final Object lock = new Object();\n-    private int v;\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        synchronized (lock) {\n-            \/\/ critical section\n-            r.r1 = ++v;\n-        }\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        synchronized (lock) {\n-            \/\/ critical section\n-            r.r2 = ++v;\n-        }\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/mutex\/Mutex_04_Synchronized.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.concurrency.mutex;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_05_ReentrantLock\n-*\/\n-\n-@JCStressTest\n-@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n-@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n-@State\n-public class Mutex_05_ReentrantLock {\n-    private final ReentrantLock reentrantLock = new ReentrantLock();\n-    private int v;\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        reentrantLock.lock();\n-        try {\n-            \/\/ critical section\n-            r.r1 = ++v;\n-        } finally {\n-            reentrantLock.unlock();\n-        }\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        reentrantLock.lock();\n-        try {\n-            \/\/ critical section\n-            r.r2 = ++v;\n-        } finally {\n-            reentrantLock.unlock();\n-        }\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/mutex\/Mutex_05_ReentrantLock.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.concurrency.mutex;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import java.util.concurrent.Semaphore;\n-\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n-import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE_INTERESTING;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_06_Semaphore\n-*\/\n-\n-@JCStressTest\n-@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Sequential execution.\")\n-@Outcome(id = \"1, 1\", expect = ACCEPTABLE_INTERESTING, desc = \"Both actors came up with the same value: lock failure.\")\n-@State\n-public class Mutex_06_Semaphore {\n-    private final Semaphore semaphore = new Semaphore(1);\n-    private int v;\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        try {\n-            semaphore.acquire();\n-            \/\/ critical section\n-            r.r1 = ++v;\n-            semaphore.release();\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        }\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        try {\n-            semaphore.acquire();\n-            \/\/ critical section\n-            r.r2 = ++v;\n-            semaphore.release();\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        }\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/concurrency\/mutex\/Mutex_06_Semaphore.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.high.race.condition;\n-\n-import org.openjdk.jcstress.annotations.*;\n-import org.openjdk.jcstress.infra.results.III_Result;\n-\n-import static org.openjdk.jcstress.annotations.Expect.*;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t RaceCondition_01_ReadModifyWriteSequence\n- *\/\n-\n-\/**\n- * This sample demonstrates you how a read-modify-write sequence can lead to surprising results.\n- *\/\n-@JCStressTest\n-@Outcome(id = {\"150, 100, 150\"}, expect = ACCEPTABLE, desc = \"actor2 completed first, then actor1 completed\")\n-@Outcome(id = {\"250, 150, 150\"}, expect = ACCEPTABLE, desc = \"actor1 completed first, then actor2 completed\")\n-@Outcome(id = {\"250, 100, 250\"}, expect = ACCEPTABLE_INTERESTING, desc = \"actors conflicted, actor1 won the race\")\n-@Outcome(id = {\"250, 100, 100\"}, expect = ACCEPTABLE_INTERESTING, desc = \"actors conflicted, actor2 won the race\")\n-@State\n-public class RaceCondition_01_ReadModifyWriteSequence {\n-    private volatile int v = 200;\n-\n-    @Actor\n-    public void actor1(III_Result r) {\n-        int t1 = v;\n-        t1 += 50;\n-        v = t1;\n-\n-        r.r1 = t1;\n-    }\n-\n-    @Actor\n-    public void actor2(III_Result r) {\n-        int t2 = v;\n-        t2 -= 100;\n-        v = t2;\n-\n-        r.r2 = t2;\n-    }\n-\n-    @Arbiter\n-    public void arbiter(III_Result r) {\n-        r.r3 = v;\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/race\/condition\/RaceCondition_01_ReadModifyWriteSequence.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.high.race.condition;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-import org.openjdk.jcstress.infra.results.ZZ_Result;\n-\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-import static org.openjdk.jcstress.annotations.Expect.*;\n-\n-\/*\n-    How to run this test:\n-        $ java -jar jcstress-samples\/target\/jcstress.jar -t RaceCondition_02_CheckThenReactSequence\n- *\/\n-\n-\/**\n- * This sample demonstrates you how a check-then-react sequence can lead to surprising results.\n- *\/\n-@JCStressTest\n-@Outcome(id = {\"true, false\", \"false, true\"}, expect = ACCEPTABLE, desc = \"Only one actor got true for the flag in its if-clause\")\n-@Outcome(id = {\"true, true\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Both actors got true for the flag in their if-clauses\")\n-@State\n-public class RaceCondition_02_CheckThenReactSequence {\n-    private volatile boolean flag = true;\n-\n-    @Actor\n-    public void actor1(ZZ_Result r) {\n-        if (flag) {\n-            flag = false;\n-            r.r1 = true;\n-        } else {\n-            r.r1 = false;\n-        }\n-    }\n-\n-    @Actor\n-    public void actor2(ZZ_Result r) {\n-        if (flag) {\n-            flag = false;\n-            r.r2 = true;\n-        } else {\n-            r.r2 = false;\n-        }\n-    }\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/race\/condition\/RaceCondition_02_CheckThenReactSequence.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high;\n+package org.openjdk.jcstress.samples.primitives.library;\n@@ -38,1 +38,1 @@\n-public class Concurrency_01_CHM {\n+public class Library_01_CHM {\n@@ -41,4 +41,2 @@\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        This test demonstrates the operation atomicity tests, taking\n-        ConcurrentHashMap-backed Multimap as the example.\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Library_01_CHM\n@@ -47,0 +45,6 @@\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+        This test demonstrates the operation atomicity tests, taking ConcurrentHashMap-backed\n+        Multimap as the example.\n+     *\/\n+\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/library\/Library_01_CHM.java","additions":10,"deletions":6,"binary":false,"changes":16,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/Concurrency_01_CHM.java","status":"renamed"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Mutex works\")\n+@Outcome(id = \"1, 1\",           expect = FORBIDDEN,  desc = \"Mutex failure\")\n+@State\n+public class Mutex_01_PetersonAlgorithm {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_01_PetersonAlgorithm\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+        This example demonstrates the Peterson's algorithm for mutual exclusion.\n+            See: https:\/\/en.wikipedia.org\/wiki\/Peterson%27s_algorithm\n+\n+        The core of this algorithm is to use the sequential consistency over flags and turn.\n+        \"Flags\" allows thread to proceed when other thread is known not to contend.\n+        \"Turn\" allows threads to coordinate their turns when they are contending.\n+\n+        On x86_64, AArch64, PPC64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            1, 1            0    0.00%   Forbidden  Mutex failure\n+            1, 2  304,248,771   50.26%  Acceptable  Mutex works\n+            2, 1  301,144,125   49.74%  Acceptable  Mutex works\n+     *\/\n+\n+    private volatile boolean flag1, flag2;\n+    private volatile int turn;\n+\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        flag1 = true;\n+        turn = 2;\n+        while (flag2 && turn == 2); \/\/ wait\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n+        flag1 = false;\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        flag2 = true;\n+        turn = 1;\n+        while (flag1 && turn == 1); \/\/ wait\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n+        flag2 = false;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/mutex\/Mutex_01_PetersonAlgorithm.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Mutex works\")\n+@Outcome(id = \"1, 1\",           expect = FORBIDDEN,  desc = \"Mutex failure\")\n+@State\n+public class Mutex_02_DekkerAlgorithm {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_02_DekkerAlgorithm\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+        This example demonstrates the Dekker's algorithm for mutual exclusion.\n+            See: https:\/\/en.wikipedia.org\/wiki\/Dekker%27s_algorithm\n+\n+        The core of this algorithm is to use the sequential consistency over flags and turn.\n+        \"Flags\" allows thread to proceed when other thread is known not to contend.\n+        \"Turn\" allows threads to coordinate their turns when they are contending.\n+\n+        On x86_64, AArch64, PPC64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            1, 1            0    0.00%   Forbidden  Mutex failure\n+            1, 2  213,556,068   58.13%  Acceptable  Mutex works\n+            2, 1  153,830,556   41.87%  Acceptable  Mutex works\n+     *\/\n+\n+    private volatile boolean want1, want2;\n+    private volatile int turn = 1;\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        want1 = true;\n+        while (want2) {\n+            if (turn != 1) {\n+                want1 = false;\n+                while (turn != 1); \/\/ wait\n+                want1 = true;\n+            }\n+        }\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n+        turn = 2;\n+        want1 = false;\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        want2 = true;\n+        while (want1) {\n+            if (turn != 2) {\n+                want2 = false;\n+                while (turn != 2); \/\/ wait\n+                want2 = true;\n+            }\n+        }\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n+        turn = 1;\n+        want2 = false;\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/mutex\/Mutex_02_DekkerAlgorithm.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Mutex works\")\n+@Outcome(id = \"1, 1\",           expect = FORBIDDEN,  desc = \"Mutex failure\")\n+@State\n+public class Mutex_03_SpinLock {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_03_SpinLock\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        A mutex can be implemented with a single atomic variable, which would coordinate threads\n+        entering the critical section. This construction is usually known as \"spinlock\".\n+\n+        On x86_64, AArch64, PPC64:\n+            RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              1, 1            0    0.00%   Forbidden  Mutex failure\n+              1, 2  299,137,894   51.69%  Acceptable  Mutex works\n+              2, 1  279,551,130   48.31%  Acceptable  Mutex works\n+     *\/\n+\n+    private final AtomicBoolean taken = new AtomicBoolean(false);\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        while(taken.get() || !taken.compareAndSet(false, true)); \/\/ wait\n+        { \/\/ critical section\n+            r.r1 = ++v;\n+        }\n+        taken.set(false);\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        while(taken.get() || !taken.compareAndSet(false, true)); \/\/ wait\n+        { \/\/ critical section\n+            r.r2 = ++v;\n+        }\n+        taken.set(false);\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/mutex\/Mutex_03_SpinLock.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Mutex works\")\n+@Outcome(id = \"1, 1\",           expect = FORBIDDEN,  desc = \"Mutex failure\")\n+@State\n+public class Mutex_04_Synchronized {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_04_Synchronized\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        In Java, every object can potentially be used as monitor\/mutex, with the help\n+        of \"synchronized\" keyword.\n+\n+        On x86_64, AArch64, PPC64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            1, 1            0    0.00%   Forbidden  Mutex failure\n+            1, 2  300,151,647   50.40%  Acceptable  Mutex works\n+            2, 1  295,423,137   49.60%  Acceptable  Mutex works\n+     *\/\n+\n+    private final Object lock = new Object();\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        synchronized (lock) {\n+            \/\/ critical section\n+            r.r1 = ++v;\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        synchronized (lock) {\n+            \/\/ critical section\n+            r.r2 = ++v;\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/mutex\/Mutex_04_Synchronized.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Mutex works\")\n+@Outcome(id = \"1, 1\",           expect = FORBIDDEN,  desc = \"Mutex failure\")\n+@State\n+public class Mutex_05_ReentrantLock {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_05_ReentrantLock\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        For a higher-level primitive, ReentrantLock might be used as mutex too.\n+\n+        On x86_64, AArch64, PPC64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            1, 1            0    0.00%   Forbidden  Mutex failure\n+            1, 2  292,534,041   50.46%  Acceptable  Mutex works\n+            2, 1  287,199,463   49.54%  Acceptable  Mutex works\n+     *\/\n+\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        lock.lock();\n+        try {\n+            \/\/ critical section\n+            r.r1 = ++v;\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        lock.lock();\n+        try {\n+            \/\/ critical section\n+            r.r2 = ++v;\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/mutex\/Mutex_05_ReentrantLock.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.primitives.mutex;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.util.concurrent.Semaphore;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"1, 2\", \"2, 1\"}, expect = ACCEPTABLE, desc = \"Mutex works\")\n+@Outcome(id = \"1, 1\",           expect = FORBIDDEN,  desc = \"Mutex failure\")\n+@State\n+public class Mutex_06_Semaphore {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Mutex_06_Semaphore\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Single-permit Semaphore can be used as a crude mutex too. Of course, this primitive\n+        is much more flexible, it can admit a few threads at once with more permits.\n+\n+        On x86_64, AArch64, PPC64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            1, 1            0    0.00%   Forbidden  Mutex failure\n+            1, 2  254,394,919   50.23%  Acceptable  Mutex works\n+            2, 1  252,081,625   49.77%  Acceptable  Mutex works\n+     *\/\n+\n+    private final Semaphore semaphore = new Semaphore(1);\n+    private int v;\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        try {\n+            semaphore.acquire();\n+            \/\/ critical section\n+            r.r1 = ++v;\n+            semaphore.release();\n+        } catch (InterruptedException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        try {\n+            semaphore.acquire();\n+            \/\/ critical section\n+            r.r2 = ++v;\n+            semaphore.release();\n+        } catch (InterruptedException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/mutex\/Mutex_06_Semaphore.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_01_UncontendedSuccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_01_UncontendedSuccess.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n@@ -32,1 +32,0 @@\n-import org.openjdk.jcstress.infra.results.Z_Result;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_02_ContendedSuccess.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_02_ContendedSuccess.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_03_ConflictSameValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_03_ConflictSameValue.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_04_ConflictCoherence.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_04_ConflictCoherence.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_05_AcquireOnSuccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_05_AcquireOnSuccess.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_06_ReleaseOnSuccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_06_ReleaseOnSuccess.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_07_AcquireOnFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_07_AcquireOnFailure.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_08_ReleaseOnFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_08_ReleaseOnFailure.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n@@ -31,1 +31,0 @@\n-import org.openjdk.jcstress.infra.results.III_Result;\n@@ -33,2 +32,0 @@\n-import org.openjdk.jcstress.infra.results.ZZ_Result;\n-import org.openjdk.jcstress.util.UnsafeHolder;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_09_GAS_Effects.java","additions":1,"deletions":4,"binary":false,"changes":5,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_09_GAS_Effects.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_10_FailureWitness.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_10_FailureWitness.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_11_FailureWitnessRWL.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_11_FailureWitnessRWL.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package org.openjdk.jcstress.samples.high.rmw;\n+package org.openjdk.jcstress.samples.primitives.rmw;\n@@ -29,1 +29,0 @@\n-import org.openjdk.jcstress.infra.results.ZZI_Result;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/primitives\/rmw\/RMW_12_FailureWitnessLoops.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_12_FailureWitnessLoops.java","status":"renamed"},{"patch":"@@ -0,0 +1,225 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.problems.classic;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.Z_Result;\n+\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicIntegerArray;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+\n+public class Classic_01_DiningPhilosophers {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t Classic_01_DiningPhilosophers[.SubTestName]\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This sample shows the solutions for the classic Dining philosophers problem.\n+            See: https:\/\/en.wikipedia.org\/wiki\/Dining_philosophers_problem\n+\n+        There is a round table where philosophers sit. Every philosopher has two modes:\n+        thinking and eating. A philosopher needs two adjacent forks to eat. The problem\n+        is to write the algorithm that lets philosophers eat without deadlocks, starvation,\n+        and with fairness. For the purposes of this example, we don't model thinking.\n+\n+        The trivial deadlock in this problem is when every philosopher holds one fork,\n+        and waits for other fork to drop. If all philosophers take the fork on one side,\n+        no philosophers would be able to complete. \/\/ TODO: Demo with multi-actor termination tests.\n+\n+        The first solution is \"Resource Hierarchy\": it avoids the deadlock by asking the\n+        last philosopher to take the forks in the _different_ order.\n+\n+        Indeed, no deadlock occurs:\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            true  6,325,295,104  100.00%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @State\n+    public static class ResourceHierarchy {\n+        private final Object[] forks = new Object[] { new Object(), new Object(), new Object() };\n+\n+        @Actor\n+        public void p1() {\n+            eat(0, 1);\n+        }\n+\n+        @Actor\n+        public void p2() {\n+            eat(1, 2);\n+        }\n+\n+        @Actor\n+        public void p3() {\n+            eat(0, 2); \/\/ in different order\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            \/\/ Fake the result. The actual failure is deadlock.\n+            r.r1 = true;\n+        }\n+\n+        final protected void eat(int fork1, int fork2) {\n+            synchronized (forks[fork1]) {\n+                synchronized (forks[fork2]) {\n+                    \/\/ Forks acquired. Do nothing. Release forks on exit.\n+                }\n+            }\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Another solution is to introduce Arbitrator. Indeed, having a waiter to serve the forks\n+        solves the deadlock by not letting circular resource waits. For the purposes of this test,\n+        philosopher busy-wait (sic!) on a waiter.\n+\n+        Indeed, no deadlock occurs:\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            true  6,270,081,024  100.00%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"true\", expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @State\n+    public static class Arbitrator  {\n+        private final boolean[] forks = new boolean[3];\n+        private final Object waiter = new Object();\n+\n+        @Actor\n+        public void p1() {\n+            eat(0, 1);\n+        }\n+\n+        @Actor\n+        public void p2() {\n+            eat(1, 2);\n+        }\n+\n+        @Actor\n+        public void p3() {\n+            eat(2, 0);\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            \/\/ Fake the result. The actual failure is deadlock.\n+            r.r1 = true;\n+        }\n+\n+        void eat(int f1, int f2) {\n+            \/\/ Acquire forks\n+            while (true) {\n+                synchronized (waiter) {\n+                    if (!forks[f1] && !forks[f1]) {\n+                        \/\/ Success!\n+                        forks[f1] = true;\n+                        forks[f2] = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            \/\/ Release forks\n+            forks[f1] = false;\n+            forks[f2] = false;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Yet another solution is to make sure that no more than N-1 philosopher eat at a time.\n+        By construction, this guarantees that last philosopher would wait for adjacent eater\n+        to complete before trying to acquire forks.\n+\n+        Indeed, no deadlock occurs:\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            true  5,377,787,904  100.00%  Acceptable  Trivial.\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = \"true\", expect = ACCEPTABLE, desc = \"Trivial.\")\n+    @State\n+    public static class OneDinerFewer {\n+        private final AtomicIntegerArray forks = new AtomicIntegerArray(3);\n+        private final Semaphore diners = new Semaphore(2);\n+\n+        @Actor\n+        public void p1() {\n+            eat(0, 1);\n+        }\n+\n+        @Actor\n+        public void p2() {\n+            eat(1, 2);\n+        }\n+\n+        @Actor\n+        public void p3() {\n+            eat(2, 0);\n+        }\n+\n+        @Arbiter\n+        public void fake(Z_Result r) {\n+            \/\/ Fake the result. The actual failure is deadlock.\n+            r.r1 = true;\n+        }\n+\n+        void eat(int f1, int f2) {\n+            \/\/ Acquire forks\n+            while (true) {\n+                try {\n+                    diners.acquire();\n+                    if (forks.compareAndSet(f1, 0, 1)) {\n+                        if (forks.compareAndSet(f2, 0, 1)) {\n+                            \/\/ Success!\n+                            break;\n+                        } else {\n+                            forks.set(f1, 0);\n+                        }\n+                    }\n+                } catch (InterruptedException e) {\n+                    throw new IllegalStateException(e);\n+                } finally {\n+                    diners.release();\n+                }\n+            }\n+\n+            \/\/ Release forks\n+            forks.set(f1, 0);\n+            forks.set(f2, 0);\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/problems\/classic\/Classic_01_DiningPhilosophers.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.problems.racecondition;\n+\n+import org.openjdk.jcstress.annotations.*;\n+import org.openjdk.jcstress.infra.results.III_Result;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class RaceCondition_01_RMW {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RaceCondition_01_RMW[.SubTestName]\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+         This sample demonstrates how a read-modify-write sequence can lead to surprising results.\n+         While operations are over \"volatile\" field, they still are not atomic, and can conflict\n+         with each other, producing the permanently broken result.\n+\n+         On x86_64:\n+                 RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          150, 100, 150  494,050,015   45.48%   Acceptable  actor2 completed first, then actor1 completed\n+          250, 100, 100   61,924,095    5.70%  Interesting  actors conflicted, actor2 won the race\n+          250, 100, 250   59,970,298    5.52%  Interesting  actors conflicted, actor1 won the race\n+          250, 150, 150  470,474,536   43.31%   Acceptable  actor1 completed first, then actor2 completed\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = {\"150, 100, 150\"}, expect = ACCEPTABLE, desc = \"actor2 completed first, then actor1 completed\")\n+    @Outcome(id = {\"250, 150, 150\"}, expect = ACCEPTABLE, desc = \"actor1 completed first, then actor2 completed\")\n+    @Outcome(id = {\"250, 100, 250\"}, expect = ACCEPTABLE_INTERESTING, desc = \"actors conflicted, actor1 won the race\")\n+    @Outcome(id = {\"250, 100, 100\"}, expect = ACCEPTABLE_INTERESTING, desc = \"actors conflicted, actor2 won the race\")\n+    @State\n+    public static class Racy {\n+        private volatile int v = 200;\n+\n+        @Actor\n+        public void actor1(III_Result r) {\n+            int t1 = v;\n+            t1 += 50;\n+            v = t1;\n+\n+            r.r1 = t1;\n+        }\n+\n+        @Actor\n+        public void actor2(III_Result r) {\n+            int t2 = v;\n+            t2 -= 100;\n+            v = t2;\n+\n+            r.r2 = t2;\n+        }\n+\n+        @Arbiter\n+        public void arbiter(III_Result r) {\n+            r.r3 = v;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+         One way out of this race condition is synchronization. Indeed, wrapping critical segments\n+         in synchronized(this) precludes their concurrent execution, and the previously interesting\n+         results are now forbidden.\n+\n+         Note that with a synchronization like that, we don't need \"volatile\".\n+\n+         On x86_64:\n+                 RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          150, 100, 150  361,728,228   47.45%  Acceptable  actor2 completed first, then actor1 completed\n+          250, 100, 100            0    0.00%   Forbidden  Cannot happen\n+          250, 100, 250            0    0.00%   Forbidden  Cannot happen\n+          250, 150, 150  400,656,156   52.55%  Acceptable  actor1 completed first, then actor2 completed\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = {\"150, 100, 150\"}, expect = ACCEPTABLE, desc = \"actor2 completed first, then actor1 completed\")\n+    @Outcome(id = {\"250, 150, 150\"}, expect = ACCEPTABLE, desc = \"actor1 completed first, then actor2 completed\")\n+    @Outcome(id = {\"250, 100, 250\"}, expect = FORBIDDEN, desc = \"Cannot happen\")\n+    @Outcome(id = {\"250, 100, 100\"}, expect = FORBIDDEN, desc = \"Cannot happen\")\n+    @State\n+    public static class Sync {\n+        private int v = 200;\n+\n+        @Actor\n+        public void actor1(III_Result r) {\n+            int t1;\n+            synchronized (this) {\n+                t1 = v;\n+                t1 += 50;\n+                v = t1;\n+            }\n+\n+            r.r1 = t1;\n+        }\n+\n+        @Actor\n+        public void actor2(III_Result r) {\n+            int t2;\n+            synchronized (this) {\n+                t2 = v;\n+                t2 -= 100;\n+                v = t2;\n+            }\n+            r.r2 = t2;\n+        }\n+\n+        @Arbiter\n+        public void arbiter(III_Result r) {\n+            r.r3 = v;\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/problems\/racecondition\/RaceCondition_01_RMW.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.problems.racecondition;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+import org.openjdk.jcstress.infra.results.ZZ_Result;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class RaceCondition_02_CheckThenReact {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RaceCondition_02_CheckThenReact[.SubTestName]\n+    *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+         This sample demonstrates how a check-the-react code is broken under concurrent updates.\n+         Indeed, both threads can enter the branch. Either would try to set the flag too late.\n+\n+         On x86_64:\n+                        RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n+          false, true  431,678,316   43.12%   Acceptable  Only one actors entered the section\n+          true, false  445,639,900   44.52%   Acceptable  Only one actors entered the section\n+           true, true  123,760,568   12.36%  Interesting  Conflict: both actors entered the section\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = {\"true, false\", \"false, true\"}, expect = ACCEPTABLE, desc = \"Only one actors entered the section\")\n+    @Outcome(id = {\"true, true\"}, expect = ACCEPTABLE_INTERESTING, desc = \"Conflict: both actors entered the section\")\n+    @State\n+    public static class Racy {\n+        private volatile boolean flag = true;\n+\n+        boolean checkThenReact() {\n+            if (flag) {\n+                flag = false;\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+\n+        @Actor\n+        public void actor1(ZZ_Result r) {\n+            r.r1 = checkThenReact();\n+        }\n+\n+        @Actor\n+        public void actor2(ZZ_Result r) {\n+            r.r2 = checkThenReact();\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+         The simple way out of this race condition is synchronization. Indeed, wrapping the\n+         code in \"synchronized (this)\" precludes the race, and only one actor can enter at once.\n+\n+         Note that with a synchronization like that, we don't need \"volatile\".\n+\n+         On x86_64:\n+                        RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          false, true  385,791,982   48.86%  Acceptable  Only one actors entered the section\n+          true, false  403,738,642   51.14%  Acceptable  Only one actors entered the section\n+           true, true            0    0.00%   Forbidden  Conflict: both actors entered the section\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = {\"true, false\", \"false, true\"}, expect = ACCEPTABLE, desc = \"Only one actors entered the section\")\n+    @Outcome(id = {\"true, true\"},                 expect = FORBIDDEN, desc = \"Conflict: both actors entered the section\")\n+    @State\n+    public static class Sync {\n+        private boolean flag = true;\n+\n+        boolean checkThenReact() {\n+            synchronized (this) {\n+                if (flag) {\n+                    flag = false;\n+                    return true;\n+                } else {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        @Actor\n+        public void actor1(ZZ_Result r) {\n+            r.r1 = checkThenReact();\n+        }\n+\n+        @Actor\n+        public void actor2(ZZ_Result r) {\n+            r.r2 = checkThenReact();\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+         Similarly, we can replace check-and-set sequence with a single _atomic_ operation.\n+         This would resolve the race condition as well.\n+\n+         On x86_64:\n+               RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+          false, true  420,625,392   49.72%  Acceptable  Only one actors entered the section\n+          true, false  425,378,832   50.28%  Acceptable  Only one actors entered the section\n+           true, true            0    0.00%   Forbidden  Conflict: both actors entered the section\n+     *\/\n+\n+    @JCStressTest\n+    @Outcome(id = {\"true, false\", \"false, true\"}, expect = ACCEPTABLE, desc = \"Only one actors entered the section\")\n+    @Outcome(id = {\"true, true\"},                 expect = FORBIDDEN, desc = \"Conflict: both actors entered the section\")\n+    @State\n+    public static class Atomic {\n+        private final AtomicBoolean flag = new AtomicBoolean(true);\n+\n+        boolean checkThenReact() {\n+            if (flag.compareAndSet(true, false)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+\n+        @Actor\n+        public void actor1(ZZ_Result r) {\n+            r.r1 = checkThenReact();\n+        }\n+\n+        @Actor\n+        public void actor2(ZZ_Result r) {\n+            r.r2 = checkThenReact();\n+        }\n+    }\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/problems\/racecondition\/RaceCondition_02_CheckThenReact.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"}]}