{"files":[{"patch":"@@ -205,0 +205,3 @@\n+                if (!alwaysAtomic(modifier, type, label)) continue;\n+                if (!coherent(modifier, type, label)) continue;\n+\n@@ -235,6 +238,0 @@\n-        if (alwaysAtomic(modifier, type, label)) {\n-            set.add(\"alwaysAtomic\");\n-        }\n-        if (coherent(modifier, type, label)) {\n-            set.add(\"coherent\");\n-        }\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/chapters\/Chapter0aTestGenerator.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -109,1 +109,0 @@\n-        NAKED(\"plain\"),\n@@ -172,5 +171,0 @@\n-            case NAKED: {\n-                map.put(\"setOp\", \"set\");\n-                map.put(\"getOp\", \"get\");\n-                break;\n-            }\n@@ -201,6 +195,0 @@\n-        if (alwaysAtomic(type, mode)) {\n-            set.add(\"alwaysAtomic\");\n-        }\n-        if (coherent(type, mode)) {\n-            set.add(\"coherent\");\n-        }\n@@ -210,26 +198,0 @@\n-    private static boolean alwaysAtomic(String type, VarHandleMode mode) {\n-        switch (mode) {\n-            case NAKED:\n-                return !(type.equals(\"double\") || type.equals(\"long\"));\n-            case ACQ_REL:\n-            case OPAQUE:\n-            case VOLATILE:\n-                return true;\n-            default:\n-                throw new IllegalStateException(mode.toString());\n-        }\n-    }\n-\n-    private static boolean coherent(String type, VarHandleMode mode) {\n-        switch (mode) {\n-            case NAKED:\n-                return false;\n-            case OPAQUE:\n-            case ACQ_REL:\n-            case VOLATILE:\n-                return true;\n-            default:\n-                throw new IllegalStateException(mode.toString());\n-        }\n-    }\n-\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/chapters\/Chapter1aTestGenerator.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -135,0 +135,2 @@\n+            if (!type.alwaysAtomic) continue;\n+\n@@ -168,4 +170,1 @@\n-        if (type.alwaysAtomic)\n-            return of(\"alwaysAtomic\");\n-        else\n-            return of();\n+        return of();\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/chapters\/Chapter1bTestGenerator.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+            if (!alwaysAtomic(type)) continue;\n+\n@@ -81,4 +83,1 @@\n-        if (alwaysAtomic(type))\n-            return of(\"alwaysAtomic\");\n-        else\n-            return of();\n+        return of();\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/chapters\/Chapter1cTestGenerator.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -87,2 +87,0 @@\n-        NAKED(\"plain\"),\n-        OPAQUE(\"opaque\"),\n@@ -106,2 +104,2 @@\n-        \/\/ Only care about the access-atomic guards\n-        for (VarHandleMode gs : new VarHandleMode[] { VarHandleMode.OPAQUE, VarHandleMode.ACQ_REL, VarHandleMode.VOLATILE } ) {\n+        \/\/ Only care about modes where acq\/rel is expected\n+        for (VarHandleMode gs : new VarHandleMode[] { VarHandleMode.ACQ_REL, VarHandleMode.VOLATILE } ) {\n@@ -123,2 +121,2 @@\n-        \/\/ Only care about the access-atomic guards\n-        for (VarHandleMode gs : new VarHandleMode[] { VarHandleMode.OPAQUE, VarHandleMode.ACQ_REL, VarHandleMode.VOLATILE } ) {\n+        \/\/ Only care about modes where acq\/rel is expected\n+        for (VarHandleMode gs : new VarHandleMode[] { VarHandleMode.ACQ_REL, VarHandleMode.VOLATILE } ) {\n@@ -166,10 +164,0 @@\n-            case NAKED: {\n-                map.put(\"setOp\", \"set\");\n-                map.put(\"getOp\", \"get\");\n-                break;\n-            }\n-            case OPAQUE: {\n-                map.put(\"setOp\", \"setOpaque\");\n-                map.put(\"getOp\", \"getOpaque\");\n-                break;\n-            }\n@@ -195,3 +183,0 @@\n-        if (racy(mode)) {\n-            set.add(\"racy\");\n-        }\n@@ -202,14 +187,0 @@\n-    private static boolean racy(VarHandleMode mode) {\n-        switch (mode) {\n-            case NAKED:\n-            case OPAQUE:\n-                return true;\n-            case ACQ_REL:\n-            case VOLATILE:\n-                return false;\n-            default:\n-                throw new IllegalStateException(mode.toString());\n-        }\n-    }\n-\n-\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/chapters\/Chapter1dTestGenerator.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -123,0 +123,1 @@\n+                if (!alwaysAtomic(modifier, type, label)) continue;\n@@ -152,3 +153,0 @@\n-        if (alwaysAtomic(modifier, type, label)) {\n-            set.add(\"alwaysAtomic\");\n-        }\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/chapters\/Chapter2aTestGenerator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,6 +29,1 @@\n-    CAS,\n-    incrementAndGet,\n-    getAndIncrement,\n-    decrementAndGet,\n-    getAndDecrement,\n-    addAndGet,\n+    compareAndSet,\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/generator\/AcqType.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            case CAS:\n+            case compareAndSet:\n@@ -69,10 +69,0 @@\n-            case incrementAndGet:\n-                return \"r.r1 = g.incrementAndGet(this) == (\" + defaultValue + \" + \" + unitValue + \") ? \" + defaultValue + \" : \" + setValue + \"; \\n\" + region;\n-            case getAndIncrement:\n-                return \"r.r1 = g.getAndIncrement(this) == \" + defaultValue + \"? \" + defaultValue + \" : \" + setValue + \" ; \\n\" + region;\n-            case decrementAndGet:\n-                return \"r.r1 = g.decrementAndGet(this) == (\" + defaultValue + \" - \" + unitValue + \") ? \" + defaultValue + \" : \" + setValue + \"; \\n\" + region;\n-            case getAndDecrement:\n-                return \"r.r1 = g.getAndDecrement(this) == \" + defaultValue + \"? \" + defaultValue + \" : \" + setValue + \" ; \\n\" + region;\n-            case addAndGet:\n-                return \"r.r1 = g.addAndGet(this, \" + rValue + \") == (\" + defaultValue + \" + \" + rValue + \") ? \" + defaultValue + \" : \" + setValue + \"; \\n\" + region;\n@@ -93,1 +83,1 @@\n-            case CAS:\n+            case compareAndSet:\n@@ -95,10 +85,0 @@\n-            case incrementAndGet:\n-                return region + \"g.incrementAndGet(this);\";\n-            case getAndIncrement:\n-                return region + \"g.getAndIncrement(this);\";\n-            case decrementAndGet:\n-                return region + \"g.decrementAndGet(this);\";\n-            case getAndDecrement:\n-                return region + \"g.getAndDecrement(this);\";\n-            case addAndGet:\n-                return region + \"g.addAndGet(this, \" + rValue + \");\";\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/generator\/Atomic_Updater_X.java","additions":2,"deletions":22,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-            if (!EnumSet.of(AcqType.get, AcqType.CAS).contains(acqType) ||\n-                !EnumSet.of(RelType.set, RelType.CAS).contains(relType)) {\n+            if (!EnumSet.of(AcqType.get, AcqType.compareAndSet).contains(acqType) ||\n+                !EnumSet.of(RelType.set, RelType.compareAndSet).contains(relType)) {\n@@ -69,1 +69,1 @@\n-            case CAS:\n+            case compareAndSet:\n@@ -78,10 +78,0 @@\n-            case incrementAndGet:\n-                return \"r.r1 = g.incrementAndGet() == (\" + defaultValue + \" + \" + unitValue + \") ? \" + defaultValue + \" : \" + setValue + \"; \\n\" + region;\n-            case getAndIncrement:\n-                return \"r.r1 = g.getAndIncrement() == \" + defaultValue + \"? \" + defaultValue + \" : \" + setValue + \" ; \\n\" + region;\n-            case decrementAndGet:\n-                return \"r.r1 = g.decrementAndGet() == (\" + defaultValue + \" - \" + unitValue + \") ? \" + defaultValue + \" : \" + setValue + \"; \\n\" + region;\n-            case getAndDecrement:\n-                return \"r.r1 = g.getAndDecrement() == \" + defaultValue + \"? \" + defaultValue + \" : \" + setValue + \" ; \\n\" + region;\n-            case addAndGet:\n-                return \"r.r1 = g.addAndGet(\" + rValue + \") == (\" + defaultValue + \" + \" + rValue + \") ? \" + defaultValue + \" : \" + setValue + \"; \\n\" + region;\n@@ -102,1 +92,1 @@\n-            case CAS:\n+            case compareAndSet:\n@@ -104,10 +94,0 @@\n-            case incrementAndGet:\n-                return region + \"g.incrementAndGet();\";\n-            case getAndIncrement:\n-                return region + \"g.getAndIncrement();\";\n-            case decrementAndGet:\n-                return region + \"g.decrementAndGet();\";\n-            case getAndDecrement:\n-                return region + \"g.getAndDecrement();\";\n-            case addAndGet:\n-                return region + \"g.addAndGet(\" + rValue + \");\";\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/generator\/Atomic_X.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,6 +29,1 @@\n-    CAS,\n-    incrementAndGet,\n-    getAndIncrement,\n-    decrementAndGet,\n-    getAndDecrement,\n-    addAndGet,\n+    compareAndSet,\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/generator\/RelType.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-        for (Class<?> varType : Types.SUPPORTED_PRIMITIVES) {\n-            for (Class<?> guardType : Types.SUPPORTED_PRIMITIVES) {\n+        for (Class<?> varType : Types.VAR_PRIMITIVE_TYPES) {\n+            for (Class<?> guardType : Types.GUARD_PRIMITIVE_TYPES) {\n@@ -206,1 +206,1 @@\n-        public static final Class<?>[] SUPPORTED_PRIMITIVES =\n+        public static final Class<?>[] GUARD_PRIMITIVE_TYPES =\n@@ -208,1 +208,5 @@\n-                                 int.class, long.class, float.class, double.class};\n+                                 int.class, long.class, float.class, double.class };\n+\n+        \/\/ At least one per data width, plus both shapes of floating point\n+        public static final Class<?>[] VAR_PRIMITIVE_TYPES =\n+                new Class<?>[] { byte.class, short.class, int.class, long.class, float.class, double.class };\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/generator\/TestGenerator.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -59,3 +59,3 @@\n-        final int COUNT_THRESH = 6;\n-        final int VAR_THRESH = 3;\n-        final int THREAD_THRESH = 4;\n+        \/\/ (ops, variables, threads)\n+        int[][] triplets = {\n+                {2, 1, 2},\n@@ -63,10 +63,21 @@\n-        for (int c = 1; c <= COUNT_THRESH; c++) {\n-            int minVars = 1;\n-            int maxVars = c;\n-            for (int v = minVars; v <= Math.min(maxVars, VAR_THRESH); v++) {\n-                int minThreads = Math.max(2, c \/ 2);\n-                int maxThreads = c;\n-                for (int t = minThreads; t <= Math.min(maxThreads, THREAD_THRESH); t++) {\n-                    multiThreads.addAll(new Phase(c, v, t).run());\n-                }\n-            }\n+                {3, 1, 2},\n+\n+                {4, 1, 2},\n+                {4, 2, 2},\n+                {4, 2, 3},\n+                {4, 2, 4},\n+\n+                {5, 1, 3},\n+                {5, 1, 4},\n+                {5, 2, 3},\n+                {5, 2, 4},\n+\n+                {6, 1, 4},\n+                {6, 2, 4},\n+                {6, 3, 3},\n+                {6, 3, 4},\n+        };\n+\n+        for (int[] tri : triplets) {\n+            List<MultiThread> p = new Phase(tri[0], tri[1], tri[2]).run();\n+            multiThreads.addAll(p);\n","filename":"jcstress-test-gen\/src\/main\/java\/org\/openjdk\/jcstress\/generator\/seqcst\/SeqCstTraceGenerator.java","additions":24,"deletions":13,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#if[alwaysAtomic]\n@@ -40,4 +39,0 @@\n-#else[alwaysAtomic]\n-@Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/accessAtomic\/X-ArrayAtomicityTest.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#if[alwaysAtomic]\n@@ -40,4 +39,0 @@\n-#else[alwaysAtomic]\n-@Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/accessAtomic\/X-FieldAtomicityTest.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#if[alwaysAtomic]\n@@ -40,4 +39,0 @@\n-#else[alwaysAtomic]\n-@Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Conflicting stores, persisting non-atomic result.\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/accessAtomic\/X-FieldConflictAtomicityTest.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#if[alwaysAtomic]\n@@ -43,1 +42,0 @@\n-#else[alwaysAtomic]\n@@ -45,2 +43,0 @@\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/accessAtomic\/X-VarHandleArrayAtomicityTest.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#if[alwaysAtomic]\n@@ -45,4 +44,0 @@\n-#else[alwaysAtomic]\n-@Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/accessAtomic\/X-VarHandleByteArrayViewAtomicityTest.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#if[alwaysAtomic]\n@@ -45,4 +44,0 @@\n-#else[alwaysAtomic]\n-@Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/accessAtomic\/X-VarHandleDirectByteBufferViewAtomicityTest.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#if[alwaysAtomic]\n@@ -43,4 +42,0 @@\n-#else[alwaysAtomic]\n-@Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/accessAtomic\/X-VarHandleFieldAtomicityTest.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#if[alwaysAtomic]\n@@ -45,4 +44,0 @@\n-#else[alwaysAtomic]\n-@Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/accessAtomic\/X-VarHandleHeapByteBufferViewAtomicityTest.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,6 +49,0 @@\n-#if[racy]\n-@Outcome(id = {\n-        \"$defaultV$, $defaultV$, $setG$\",\n-        \"$setV$, $defaultV$, $setG$\",\n-    }, expect = Expect.ACCEPTABLE, desc = \"Seeing previous writes, allowed with racy guard.\")\n-#else[racy]\n@@ -59,1 +53,0 @@\n-#end[racy]\n","filename":"jcstress-test-gen\/src\/main\/resources\/acqrel\/X-VarHandleArrayAcqRelTest.java.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,6 +51,0 @@\n-#if[racy]\n-@Outcome(id = {\n-        \"$defaultV$, $defaultV$, $setG$\",\n-        \"$setV$, $defaultV$, $setG$\",\n-    }, expect = Expect.ACCEPTABLE, desc = \"Seeing previous writes, allowed with racy guard.\")\n-#else[racy]\n@@ -61,1 +55,0 @@\n-#end[racy]\n","filename":"jcstress-test-gen\/src\/main\/resources\/acqrel\/X-VarHandleByteArrayViewAcqRelTest.java.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,6 +51,0 @@\n-#if[racy]\n-@Outcome(id = {\n-        \"$defaultV$, $defaultV$, $setG$\",\n-        \"$setV$, $defaultV$, $setG$\",\n-    }, expect = Expect.ACCEPTABLE, desc = \"Seeing previous writes, allowed with racy guard.\")\n-#else[racy]\n@@ -61,1 +55,0 @@\n-#end[racy]\n","filename":"jcstress-test-gen\/src\/main\/resources\/acqrel\/X-VarHandleDirectByteBufferViewAcqRelTest.java.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,6 +49,0 @@\n-#if[racy]\n-@Outcome(id = {\n-        \"$defaultV$, $defaultV$, $setG$\",\n-        \"$setV$, $defaultV$, $setG$\",\n-    }, expect = Expect.ACCEPTABLE, desc = \"Seeing previous writes, allowed with racy guard.\")\n-#else[racy]\n@@ -59,1 +53,0 @@\n-#end[racy]\n","filename":"jcstress-test-gen\/src\/main\/resources\/acqrel\/X-VarHandleFieldAcqRelTest.java.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,6 +51,0 @@\n-#if[racy]\n-@Outcome(id = {\n-        \"$defaultV$, $defaultV$, $setG$\",\n-        \"$setV$, $defaultV$, $setG$\",\n-    }, expect = Expect.ACCEPTABLE, desc = \"Seeing previous writes, allowed with racy guard.\")\n-#else[racy]\n@@ -61,1 +55,0 @@\n-#end[racy]\n","filename":"jcstress-test-gen\/src\/main\/resources\/acqrel\/X-VarHandleHeapByteBufferViewAcqRelTest.java.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-#if[alwaysAtomic]\n-#if[coherent]\n@@ -42,6 +40,0 @@\n-#else[coherent]\n-@Outcome(id = \"$set$, $default$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Seeing first read, but not second: non-coherent.\")\n-#end[coherent]\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic accesses are allowed.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/coherence\/X-ArrayCoherenceTest.java.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-#if[alwaysAtomic]\n-#if[coherent]\n@@ -42,6 +40,0 @@\n-#else[coherent]\n-@Outcome(id = \"$set$, $default$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Seeing first read, but not second: non-coherent.\")\n-#end[coherent]\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic accesses are allowed.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/coherence\/X-FieldCoherenceTest.java.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-#if[alwaysAtomic]\n-#if[coherent]\n@@ -45,6 +43,0 @@\n-#else[coherent]\n-@Outcome(id = \"$set$, $default$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Seeing first read, but not second: non-coherent.\")\n-#end[coherent]\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic accesses are allowed.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/coherence\/X-VarHandleArrayCoherenceTest.java.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-#if[alwaysAtomic]\n-#if[coherent]\n@@ -47,6 +45,0 @@\n-#else[coherent]\n-@Outcome(id = \"$set$, $default$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Seeing first read, but not second: non-coherent.\")\n-#end[coherent]\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic accesses are allowed.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/coherence\/X-VarHandleByteArrayViewCoherenceTest.java.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-#if[alwaysAtomic]\n-#if[coherent]\n@@ -47,6 +45,0 @@\n-#else[coherent]\n-@Outcome(id = \"$set$, $default$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Seeing first read, but not second: non-coherent.\")\n-#end[coherent]\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic accesses are allowed.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/coherence\/X-VarHandleDirectByteBufferViewCoherenceTest.java.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-#if[alwaysAtomic]\n-#if[coherent]\n@@ -45,6 +43,0 @@\n-#else[coherent]\n-@Outcome(id = \"$set$, $default$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Seeing first read, but not second: non-coherent.\")\n-#end[coherent]\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic accesses are allowed.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/coherence\/X-VarHandleFieldCoherenceTest.java.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-#if[alwaysAtomic]\n-#if[coherent]\n@@ -47,6 +45,0 @@\n-#else[coherent]\n-@Outcome(id = \"$set$, $default$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Seeing first read, but not second: non-coherent.\")\n-#end[coherent]\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic accesses are allowed.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/coherence\/X-VarHandleHeapByteBufferViewCoherenceTest.java.template","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#if[alwaysAtomic]\n@@ -44,3 +43,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"true, 1, .*\", expect = Expect.ACCEPTABLE, desc = \"Observing non-atomic write\/read.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/arrays\/X-Arraycopy.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#if[alwaysAtomic]\n@@ -44,3 +43,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"true, 1, .*\", expect = Expect.ACCEPTABLE, desc = \"Observing non-atomic write\/read.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/arrays\/X-ArraysCopyOf.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#if[alwaysAtomic]\n@@ -44,3 +43,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"true, 1, .*\", expect = Expect.ACCEPTABLE, desc = \"Observing non-atomic write\/read.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/arrays\/X-Clone.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-#if[alwaysAtomic]\n@@ -47,3 +46,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"true, 2097152, 3\", expect = Expect.ACCEPTABLE,  desc = \"Seeing array, but some contents are default\/weird\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/arrays\/X-LargeArraycopy.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-#if[alwaysAtomic]\n@@ -47,3 +46,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"true, 2097152, 3\", expect = Expect.ACCEPTABLE,  desc = \"Seeing array, but some contents are default\/weird\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/arrays\/X-LargeArraysCopyOf.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-#if[alwaysAtomic]\n@@ -47,3 +46,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"true, 2097152, 3\", expect = Expect.ACCEPTABLE,  desc = \"Seeing array, but some contents are default\/weird\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/arrays\/X-LargeClone.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-#if[alwaysAtomic]\n@@ -47,3 +46,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"true, 2097152, 3\", expect = Expect.ACCEPTABLE,  desc = \"Seeing array, but some contents are default\/weird\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/arrays\/X-LargeManual.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#if[alwaysAtomic]\n@@ -44,3 +43,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"true, 1, .*\", expect = Expect.ACCEPTABLE, desc = \"Observing non-atomic write\/read.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/arrays\/X-Manual.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#if[alwaysAtomic]\n@@ -44,3 +43,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \".*\", expect = Expect.ACCEPTABLE, desc = \"Observing non-atomic write\/read.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/objects\/X-Clone.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#if[alwaysAtomic]\n@@ -44,3 +43,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \".*\", expect = Expect.ACCEPTABLE, desc = \"Observing non-atomic write\/read.\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/copy\/objects\/X-Manual.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#if[alwaysAtomic]\n@@ -40,5 +39,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"$value0$, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec, when load x in actor2 before fullFence in actor1\")\n-@Outcome(id = \".*, $value1$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec, if r1 is half-value, load x must get a full-value\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/fences\/X-LoadLoadFenceTest.java.template","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#if[alwaysAtomic]\n@@ -40,4 +39,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, $value0$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec, r2 only can be assigned to 0.\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/fences\/X-LoadStoreFenceTest1.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#if[alwaysAtomic]\n@@ -40,4 +39,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \".*, $value0$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec, r2 only can be assigned to 0.\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/fences\/X-LoadStoreFenceTest2.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#if[alwaysAtomic]\n@@ -41,6 +40,0 @@\n-#else[alwaysAtomic]\n-\/\/if r1 is half-value or value0, store var is submitted before fullFence in actor2, r2 must be full-value, vice versa.\n-@Outcome(id = \"$value1$, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec.\")\n-@Outcome(id = \".*, $value1$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/fences\/X-StoreLoadFenceTest.java.template","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#if[alwaysAtomic]\n@@ -41,5 +40,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"$value0$, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec, when load x in actor2 before storestore Fence in actor1\")\n-@Outcome(id = \".*, $value1$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec, if r1 is half-value, load x must get a full-value\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/fences\/X-StoreStoreFenceTest1.java.template","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#if[alwaysAtomic]\n@@ -41,5 +40,0 @@\n-#else[alwaysAtomic]\n-@Outcome(id = \"$value0$, .*\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec, when load var in actor2 before storestore Fence in actor1\")\n-@Outcome(id = \".*, $value1$\", expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec, if r1 is half-value, load var must get a full-value\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/fences\/X-StoreStoreFenceTest2.java.template","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-#if[alwaysAtomic]\n@@ -42,4 +41,0 @@\n-#else[alwaysAtomic]\n-@Outcome(expect = Expect.ACCEPTABLE_INTERESTING, desc = \"Non-atomic access detected, allowed by spec.\")\n-@Ref(\"http:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.7\")\n-#end[alwaysAtomic]\n","filename":"jcstress-test-gen\/src\/main\/resources\/init\/X-FieldInitTest.java.template","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}