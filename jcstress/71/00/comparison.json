{"files":[{"patch":"@@ -30,1 +30,1 @@\n-    public static final sun.misc.Unsafe U;\n+    public static final sun.misc.Unsafe UNSAFE;\n@@ -34,1 +34,1 @@\n-            U = getUnsafe();\n+            UNSAFE = getUnsafe();\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/util\/UnsafeHolder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n@@ -36,0 +35,2 @@\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n+\n@@ -89,1 +90,1 @@\n-            offset = UnsafeHolder.U.objectFieldOffset(f);\n+            offset = UNSAFE.objectFieldOffset(f);\n","filename":"jcstress-core\/src\/main\/java\/org\/openjdk\/jcstress\/vm\/ContendedTestMain.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n@@ -37,0 +36,2 @@\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n+\n@@ -264,2 +265,2 @@\n-        public static final long ARRAY_BASE_OFFSET = UnsafeHolder.U.arrayBaseOffset(byte[].class);\n-        public static final long ARRAY_BASE_SCALE = UnsafeHolder.U.arrayIndexScale(byte[].class);\n+        public static final long ARRAY_BASE_OFFSET = UNSAFE.arrayBaseOffset(byte[].class);\n+        public static final long ARRAY_BASE_SCALE = UNSAFE.arrayIndexScale(byte[].class);\n@@ -272,1 +273,1 @@\n-            UnsafeHolder.U.putInt(ss, off, 0xFFFFFFFF);\n+            UNSAFE.putInt(ss, off, 0xFFFFFFFF);\n@@ -277,1 +278,1 @@\n-            r.r1 = UnsafeHolder.U.getInt(ss, off);\n+            r.r1 = UNSAFE.getInt(ss, off);\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/JMMSample_01_AccessAtomicity.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n@@ -38,0 +37,2 @@\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n+\n@@ -54,2 +55,2 @@\n-    public static final long ARRAY_BASE_OFFSET = UnsafeHolder.U.arrayBaseOffset(byte[].class);\n-    public static final long ARRAY_BASE_SCALE = UnsafeHolder.U.arrayIndexScale(byte[].class);\n+    public static final long ARRAY_BASE_OFFSET = UNSAFE.arrayBaseOffset(byte[].class);\n+    public static final long ARRAY_BASE_SCALE = UNSAFE.arrayIndexScale(byte[].class);\n@@ -72,1 +73,1 @@\n-        UnsafeHolder.U.putInt(bytes, offset, 0xFFFFFFFF);\n+        UNSAFE.putInt(bytes, offset, 0xFFFFFFFF);\n@@ -77,1 +78,1 @@\n-        int t = UnsafeHolder.U.getInt(bytes, offset);\n+        int t = UNSAFE.getInt(bytes, offset);\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/atomicity\/crosscache\/UnsafeIntAtomicityTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -59,1 +60,1 @@\n-        UnsafeHolder.U.storeFence();\n+        UNSAFE.storeFence();\n@@ -67,1 +68,1 @@\n-        UnsafeHolder.U.loadFence();\n+        UNSAFE.loadFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/fences\/FencedAcquireReleaseTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -54,1 +55,1 @@\n-        UnsafeHolder.U.fullFence();\n+        UNSAFE.fullFence();\n@@ -61,1 +62,1 @@\n-        UnsafeHolder.U.fullFence();\n+        UNSAFE.fullFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/fences\/FencedDekkerTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -58,1 +59,1 @@\n-        UnsafeHolder.U.storeFence();\n+        UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/fences\/FencedPublicationTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -58,1 +59,1 @@\n-        UnsafeHolder.U.storeFence();\n+        UNSAFE.storeFence();\n@@ -66,1 +67,1 @@\n-        UnsafeHolder.U.loadFence();\n+        UNSAFE.loadFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/fences\/FencedReadTwiceTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            UnsafeHolder.U.storeFence();\n+            UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/init\/primitives\/fenced\/BooleanFencedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            UnsafeHolder.U.storeFence();\n+            UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/init\/primitives\/fenced\/ByteFencedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            UnsafeHolder.U.storeFence();\n+            UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/init\/primitives\/fenced\/CharFencedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            UnsafeHolder.U.storeFence();\n+            UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/init\/primitives\/fenced\/DoubleFencedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            UnsafeHolder.U.storeFence();\n+            UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/init\/primitives\/fenced\/FloatFencedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            UnsafeHolder.U.storeFence();\n+            UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/init\/primitives\/fenced\/IntFencedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            UnsafeHolder.U.storeFence();\n+            UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/init\/primitives\/fenced\/LongFencedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            UnsafeHolder.U.storeFence();\n+            UNSAFE.storeFence();\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/init\/primitives\/fenced\/ShortFencedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -47,1 +48,1 @@\n-            offset = UnsafeHolder.U.objectFieldOffset(UnsafeBusyLoopTest.class.getDeclaredField(\"isStopped\"));\n+            offset = UNSAFE.objectFieldOffset(UnsafeBusyLoopTest.class.getDeclaredField(\"isStopped\"));\n@@ -55,1 +56,1 @@\n-        while (!UnsafeHolder.U.getBoolean(this, offset)) {\n+        while (!UNSAFE.getBoolean(this, offset)) {\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/interrupt\/UnsafeBusyLoopTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -46,2 +47,2 @@\n-    public static final int ARRAY_BASE_OFFSET = UnsafeHolder.U.arrayBaseOffset(byte[].class);\n-    public static final int ARRAY_BASE_SCALE = UnsafeHolder.U.arrayIndexScale(byte[].class);\n+    public static final int ARRAY_BASE_OFFSET = UNSAFE.arrayBaseOffset(byte[].class);\n+    public static final int ARRAY_BASE_SCALE = UNSAFE.arrayIndexScale(byte[].class);\n@@ -54,1 +55,1 @@\n-            UnsafeHolder.U.putByte(ss, (long)(ARRAY_BASE_OFFSET + ARRAY_BASE_SCALE*i), (byte)1);\n+            UNSAFE.putByte(ss, (long)(ARRAY_BASE_OFFSET + ARRAY_BASE_SCALE*i), (byte)1);\n@@ -61,1 +62,1 @@\n-            UnsafeHolder.U.putByte(ss, (long)(ARRAY_BASE_OFFSET + ARRAY_BASE_SCALE*i), (byte)2);\n+            UNSAFE.putByte(ss, (long)(ARRAY_BASE_OFFSET + ARRAY_BASE_SCALE*i), (byte)2);\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/tearing\/UnsafeArrayInterleaveTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n@@ -39,0 +38,2 @@\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n+\n@@ -54,2 +55,2 @@\n-    public static final long ARRAY_BASE_OFFSET = UnsafeHolder.U.arrayBaseOffset(byte[].class);\n-    public static final long ARRAY_BASE_SCALE = UnsafeHolder.U.arrayIndexScale(byte[].class);\n+    public static final long ARRAY_BASE_OFFSET = UNSAFE.arrayBaseOffset(byte[].class);\n+    public static final long ARRAY_BASE_SCALE = UNSAFE.arrayIndexScale(byte[].class);\n@@ -74,1 +75,1 @@\n-        UnsafeHolder.U.putInt(bytes, offset1, 0xAAAAAAAA);\n+        UNSAFE.putInt(bytes, offset1, 0xAAAAAAAA);\n@@ -79,1 +80,1 @@\n-        UnsafeHolder.U.putInt(bytes, offset2, 0x55555555);\n+        UNSAFE.putInt(bytes, offset2, 0x55555555);\n@@ -84,2 +85,2 @@\n-        r.r1 = UnsafeHolder.U.getInt(bytes, offset1);\n-        r.r2 = UnsafeHolder.U.getInt(bytes, offset2);\n+        r.r1 = UNSAFE.getInt(bytes, offset1);\n+        r.r2 = UNSAFE.getInt(bytes, offset2);\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/tearing\/UnsafeIntTearingTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -44,1 +45,1 @@\n-    public static long OFFSET;\n+    public static final long OFFSET;\n@@ -48,1 +49,1 @@\n-            OFFSET = UnsafeHolder.U.objectFieldOffset(UnsafeAddLong1.class.getDeclaredField(\"x\"));\n+            OFFSET = UNSAFE.objectFieldOffset(UnsafeAddLong1.class.getDeclaredField(\"x\"));\n@@ -59,1 +60,1 @@\n-        UnsafeHolder.U.getAndAddLong(this, OFFSET, 1L << 1);\n+        UNSAFE.getAndAddLong(this, OFFSET, 1L << 1);\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/unsafe\/UnsafeAddLong1.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -44,1 +45,1 @@\n-    public static long OFFSET;\n+    public static final long OFFSET;\n@@ -48,1 +49,1 @@\n-            OFFSET = UnsafeHolder.U.objectFieldOffset(UnsafeAddLong42.class.getDeclaredField(\"x\"));\n+            OFFSET = UNSAFE.objectFieldOffset(UnsafeAddLong42.class.getDeclaredField(\"x\"));\n@@ -59,1 +60,1 @@\n-        UnsafeHolder.U.getAndAddLong(this, OFFSET, 1L << 42);\n+        UNSAFE.getAndAddLong(this, OFFSET, 1L << 42);\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/unsafe\/UnsafeAddLong42.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -43,2 +44,2 @@\n-            OFFSET_LOCK = UnsafeHolder.U.objectFieldOffset(UnsafePutOrderedTwice.class.getDeclaredField(\"lock\"));\n-            OFFSET_TOP = UnsafeHolder.U.objectFieldOffset(UnsafePutOrderedTwice.class.getDeclaredField(\"top\"));\n+            OFFSET_LOCK = UNSAFE.objectFieldOffset(UnsafePutOrderedTwice.class.getDeclaredField(\"lock\"));\n+            OFFSET_TOP = UNSAFE.objectFieldOffset(UnsafePutOrderedTwice.class.getDeclaredField(\"top\"));\n@@ -55,2 +56,2 @@\n-        UnsafeHolder.U.putOrderedInt(this, OFFSET_TOP, 1);\n-        UnsafeHolder.U.putOrderedInt(this, OFFSET_LOCK, 1);\n+        UNSAFE.putOrderedInt(this, OFFSET_TOP, 1);\n+        UNSAFE.putOrderedInt(this, OFFSET_LOCK, 1);\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/unsafe\/UnsafePutOrderedTwice.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import org.openjdk.jcstress.util.UnsafeHolder;\n+\n+import static org.openjdk.jcstress.util.UnsafeHolder.UNSAFE;\n@@ -49,1 +50,1 @@\n-    public static long OFFSET;\n+    public static final long OFFSET;\n@@ -53,1 +54,1 @@\n-            OFFSET = UnsafeHolder.U.objectFieldOffset(UnsafeReadTwiceOverVolatileReadTest.class.getDeclaredField(\"y\"));\n+            OFFSET = UNSAFE.objectFieldOffset(UnsafeReadTwiceOverVolatileReadTest.class.getDeclaredField(\"y\"));\n@@ -65,1 +66,1 @@\n-        UnsafeHolder.U.putIntVolatile(this, OFFSET, 1);\n+        UNSAFE.putIntVolatile(this, OFFSET, 1);\n@@ -71,1 +72,1 @@\n-        r.r2 = UnsafeHolder.U.getIntVolatile(this, OFFSET);\n+        r.r2 = UNSAFE.getIntVolatile(this, OFFSET);\n","filename":"tests-custom\/src\/main\/java\/org\/openjdk\/jcstress\/tests\/unsafe\/UnsafeReadTwiceOverVolatileReadTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}