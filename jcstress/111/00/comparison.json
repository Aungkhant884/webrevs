{"files":[{"patch":"@@ -43,1 +43,1 @@\n-        int x;\n+        int x1, x2, x3, x4;\n@@ -45,1 +45,1 @@\n-            x = v;\n+            x1 = v; x2 = v; x3 = v; x4 = v;\n@@ -48,1 +48,1 @@\n-            return x;\n+            return x4 + x3 + x2 + x1;\n@@ -55,9 +55,15 @@\n-        Somewhat similar to previous example, this test now publishes the Composite with the synchronized\n-        setter. But, the getter is deliberately non-synchronized. Unfortunately, synchronizing only the\n-        setter is not enough: the getter is still racy, and can observe surprising results.\n-\n-        This can be seen on some platforms, for example with PPC64 (modern JDKs require -XX:+UseBiasedLocking):\n-          RESULT      SAMPLES     FREQ       EXPECT  DESCRIPTION\n-              -1  566,235,858   91.44%   Acceptable  Boring\n-               0          354   <0.01%  Interesting  Whoa\n-              42   53,010,764    8.56%   Acceptable  Boring\n+        Somewhat similar to previous example, this test now exchanges the Composite directly between the\n+        threads. In this example, we synchronize the reader. But the writer is deliberately non-synchronized.\n+        Unfortunately, synchronizing only the reader part is not enough: the writer is still racy, and can\n+        perform the writes in whatever order, thus revealing the surprising results to the casual observer.\n+\n+        This can be seen on some platforms, for example AArch64, PPC64, and it becomes even more visible\n+        with -XX:+UseBiasedLocking:\n+\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  2,777,131,721   83.31%   Acceptable  Boring\n+               0          1,536   <0.01%  Interesting  Whoa\n+               1             52   <0.01%  Interesting  Whoa\n+               2             23   <0.01%  Interesting  Whoa\n+               3             67   <0.01%  Interesting  Whoa\n+               4    556,205,737   16.69%   Acceptable  Boring\n@@ -68,4 +74,4 @@\n-    @Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n-    @Outcome(id = \"0\",          expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n-    public static class Racy {\n-        Holder<Composite> h = new Holder<>(new Composite(-1));\n+    @Outcome(id = {\"-1\", \"4\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(                  expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class RacyWrite {\n+        Composite c;\n@@ -74,2 +80,2 @@\n-        void actor() {\n-            h.set(new Composite(42));\n+        void writer() {\n+            c = new Composite(1);\n@@ -79,2 +85,5 @@\n-        void observer(I_Result r) {\n-            r.r1 = h.get().get();\n+        void reader(I_Result r) {\n+            synchronized (this) {\n+                Composite lc = c;\n+                r.r1 = (lc != null) ? lc.get() : -1;\n+            }\n@@ -82,0 +91,1 @@\n+    }\n@@ -83,2 +93,2 @@\n-        static class Holder<T> {\n-            T value;\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n@@ -86,3 +96,13 @@\n-            public Holder(T v) {\n-                value = v;\n-            }\n+        Nothing really changes if we synchronize writer instead of reader. What happens within the synchronized\n+        block can be the same as in the example above, and reader would observe it, regardless the synchronization\n+        block, since it does not synchronize with the writer.\n+\n+        Again, on AArch64 and PPC64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  2,986,368,606   89.69%   Acceptable  Boring\n+               0          2,118   <0.01%  Interesting  Whoa\n+               1            121   <0.01%  Interesting  Whoa\n+               2             51   <0.01%  Interesting  Whoa\n+               3            161   <0.01%  Interesting  Whoa\n+               4    343,332,879   10.31%   Acceptable  Boring\n+     *\/\n@@ -90,3 +110,6 @@\n-            public synchronized void set(T v) {\n-                value = v;\n-            }\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"4\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(                  expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class RacyRead {\n+        Composite c;\n@@ -94,2 +117,4 @@\n-            public T get() { \/\/ Deliberately not synchronized\n-                return value;\n+        @Actor\n+        void writer() {\n+            synchronized (this) {\n+                c = new Composite(1);\n@@ -98,0 +123,6 @@\n+\n+        @Actor\n+        void reader(I_Result r) {\n+            Composite lc = c;\n+            r.r1 = (lc != null) ? lc.get() : -1;\n+        }\n@@ -103,1 +134,2 @@\n-        If we properly synchronize both getter and setter, the previously interesting example is now forbidden.\n+        If we properly synchronize both reader and writer parts, the previously interesting\n+        outcomes are now forbidden.\n@@ -105,1 +137,1 @@\n-        PPC64:\n+        AArch64, PPC64:\n@@ -107,3 +139,2 @@\n-              -1  229,147,333   43.33%  Acceptable  Boring\n-               0            0    0.00%   Forbidden  Now forbidden\n-              42  299,711,163   56.67%  Acceptable  Boring\n+              -1  927,516,147   50.71%  Acceptable  Boring\n+               4  901,720,589   49.29%  Acceptable  Boring\n@@ -113,2 +144,2 @@\n-    @Outcome(id = {\"-1\", \"42\"}, expect = ACCEPTABLE, desc = \"Boring\")\n-    @Outcome(id = \"0\",          expect = FORBIDDEN,  desc = \"Now forbidden\")\n+    @Outcome(id = {\"-1\", \"4\"}, expect = ACCEPTABLE, desc = \"Boring\")\n+    @Outcome(                  expect = FORBIDDEN,  desc = \"Now forbidden\")\n@@ -116,1 +147,1 @@\n-        Holder<Composite> h = new Holder<>(new Composite(-1));\n+        Composite c;\n@@ -120,1 +151,3 @@\n-            h.set(new Composite(42));\n+            synchronized (this) {\n+                c = new Composite(1);\n+            }\n@@ -125,16 +158,3 @@\n-            r.r1 = h.get().get();\n-        }\n-\n-        static class Holder<T> {\n-            T value;\n-\n-            public Holder(T v) {\n-                value = v;\n-            }\n-\n-            public synchronized void set(T v) {\n-                value = v;\n-            }\n-\n-            public synchronized T get() {\n-                return value;\n+            synchronized (this) {\n+                Composite lc = c;\n+                r.r1 = (lc != null) ? lc.get() : -1;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_06_SemiSynchronized.java","additions":75,"deletions":55,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.jmm.advanced;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.I_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+public class AdvancedJMM_07_SemiVolatile {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_07_SemiVolatile[.SubTestName]\n+     *\/\n+\n+    static class Composite {\n+        int x1, x2, x3, x4;\n+        public Composite(int v) {\n+            x1 = v; x2 = v; x3 = v; x4 = v;\n+        }\n+        public int get() {\n+            return x4 + x3 + x2 + x1;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Recasting the AdvancedJMM_06_SemiSynchronized example to volatiles, this test now exchanges the\n+        Composite directly between the threads. In this example, we provide strong memory semantics at the reader\n+        side. But the writer is left with weaker plain semantics. Like in AdvancedJMM_06_SemiSynchronized, doing\n+        the stronger semantics only on reader side does not solve the race. The writer can perform the writes in\n+        whatever order, thus revealing the surprising results even to the strong observer.\n+\n+        Implementation note: this test uses VarHandles to get access to the mismatched volatile\/plain ops.\n+\n+        This can be seen on some platforms, for example AArch64, PPC64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -4  1,312,356,301   69.12%   Acceptable  Boring\n+               0            497   <0.01%  Interesting  Whoa\n+               1             41   <0.01%  Interesting  Whoa\n+               2             22   <0.01%  Interesting  Whoa\n+               3            128   <0.01%  Interesting  Whoa\n+               4    586,358,147   30.88%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"4\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(                  expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class RacyWrite {\n+        static final VarHandle VH;\n+\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(RacyWrite.class, \"c\", Composite.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        Composite c;\n+\n+        @Actor\n+        void actor() {\n+            Composite lc = new Composite(1);\n+            VH.set(this, lc);\n+        }\n+\n+        @Actor\n+        void observer(I_Result r) {\n+            Composite lc = (Composite) VH.getVolatile(this);\n+            r.r1 = (lc != null) ? lc.get() : -1;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        Flipping the memory semantics, doing strong write and weak read does not fix the theoretical race,\n+        but most modern hardware would honor the data dependent ordering of reads. Here, reading the\n+        non-null Composite on most hardware would show the correct contents, provided it was published\n+        properly with a strong memory semantics.\n+\n+        This is a corner-stone of final field semantics in Java and \"Release-Consume Ordering\" in C\/C++.\n+        This does not extend to independent memory locations, as BasicJMM_06_Causality shows.\n+\n+        If anyone has a DEC Alpha machine, try running this test there, as Alpha is one of a few\n+        known architectures that do not honor data-dependent loads, and might show Interesting outcomes\n+        here.\n+\n+        Implementation note: this test uses VarHandles to get access to the mismatched volatile\/plain ops.\n+\n+        On x86, AArch64, PPC64:\n+          RESULT        SAMPLES     FREQ       EXPECT  DESCRIPTION\n+              -1  2,461,528,799   81.86%   Acceptable  Boring\n+               4    545,287,457   18.14%   Acceptable  Boring\n+     *\/\n+\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"4\"}, expect = ACCEPTABLE,             desc = \"Boring\")\n+    @Outcome(                  expect = ACCEPTABLE_INTERESTING, desc = \"Whoa\")\n+    public static class RacyRead {\n+        static final VarHandle VH;\n+\n+        static {\n+            try {\n+                VH = MethodHandles.lookup().findVarHandle(RacyRead.class, \"c\", Composite.class);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        Composite c;\n+\n+        @Actor\n+        void actor() {\n+            Composite lc = new Composite(1);\n+            VH.setVolatile(this, lc);\n+        }\n+\n+        @Actor\n+        void observer(I_Result r) {\n+            Composite lc = (Composite) VH.get(this);\n+            r.r1 = (lc != null) ? lc.get() : -1;\n+        }\n+    }\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        If we use proper memory semantics at both reader and writer sides, the previously interesting examples\n+        are now forbidden.\n+\n+        On x86, AArch64, PPC64:\n+          RESULT        SAMPLES     FREQ      EXPECT  DESCRIPTION\n+              -1  2,188,687,637   75.73%  Acceptable  Boring\n+               4    701,382,379   24.27%  Acceptable  Boring\n+     *\/\n+    @JCStressTest\n+    @State\n+    @Outcome(id = {\"-1\", \"4\"}, expect = ACCEPTABLE, desc = \"Boring\")\n+    @Outcome(                  expect = FORBIDDEN,  desc = \"Now forbidden\")\n+    public static class NonRacy {\n+        volatile Composite c;\n+\n+        @Actor\n+        void actor() {\n+            c = new Composite(1);\n+        }\n+\n+        @Actor\n+        void observer(I_Result r) {\n+            Composite lc = c;\n+            r.r1 = (lc != null) ? lc.get() : -1;\n+        }\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_07_SemiVolatile.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"},{"patch":"@@ -38,1 +38,1 @@\n-public class AdvancedJMM_07_ArrayVolatility {\n+public class AdvancedJMM_08_ArrayVolatility {\n@@ -42,1 +42,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_07_ArrayVolatility[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_08_ArrayVolatility[.SubTestName]\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_08_ArrayVolatility.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_07_ArrayVolatility.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-public class AdvancedJMM_08_WrongReleaseOrder {\n+public class AdvancedJMM_09_WrongReleaseOrder {\n@@ -44,1 +44,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_08_WrongReleaseOrder\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_09_WrongReleaseOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_09_WrongReleaseOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_08_WrongReleaseOrder.java","status":"renamed"},{"patch":"@@ -42,1 +42,1 @@\n-public class AdvancedJMM_09_WrongListReleaseOrder {\n+public class AdvancedJMM_10_WrongListReleaseOrder {\n@@ -46,1 +46,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_09_WrongListReleaseOrder\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_10_WrongListReleaseOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_10_WrongListReleaseOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_09_WrongListReleaseOrder.java","status":"renamed"},{"patch":"@@ -39,1 +39,1 @@\n-public class AdvancedJMM_10_WrongAcquireOrder {\n+public class AdvancedJMM_11_WrongAcquireOrder {\n@@ -43,1 +43,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_10_WrongAcquireOrder\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_11_WrongAcquireOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_11_WrongAcquireOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_10_WrongAcquireOrder.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-public class AdvancedJMM_11_WrongAcquireReleaseOrder {\n+public class AdvancedJMM_12_WrongAcquireReleaseOrder {\n@@ -44,1 +44,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_11_WrongAcquireReleaseOrder\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_12_WrongAcquireReleaseOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_12_WrongAcquireReleaseOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_11_WrongAcquireReleaseOrder.java","status":"renamed"},{"patch":"@@ -37,1 +37,1 @@\n-public class AdvancedJMM_12_VolatileVsFinal {\n+public class AdvancedJMM_13_VolatileVsFinal {\n@@ -40,1 +40,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_12_VolatileVsFinal[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_13_VolatileVsFinal[.SubTestName]\n@@ -49,1 +49,1 @@\n-        volatile itself is in the wrong place. This is similar to previous AdvancedJMM_11_WrongAcquireReleaseOrder\n+        volatile itself is in the wrong place. This is similar to previous AdvancedJMM_12_WrongAcquireReleaseOrder\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_13_VolatileVsFinal.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_12_VolatileVsFinal.java","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n-public class AdvancedJMM_13_SynchronizedAreNotFences {\n+public class AdvancedJMM_14_SynchronizedAreNotFences {\n@@ -40,1 +40,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_13_SynchronizedAreNotFences\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_14_SynchronizedAreNotFences\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_14_SynchronizedAreNotFences.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_13_SynchronizedAreNotFences.java","status":"renamed"},{"patch":"@@ -37,1 +37,1 @@\n-public class AdvancedJMM_14_VolatilesAreNotFences {\n+public class AdvancedJMM_15_VolatilesAreNotFences {\n@@ -41,1 +41,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_14_VolatilesAreNotFences[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t AdvancedJMM_15_VolatilesAreNotFences[.SubTestName]\n@@ -47,1 +47,1 @@\n-        Similarly to AdvancedJMM_13_SynchronizedAreNotFences example, the volatile accesses cannot be reliably\n+        Similarly to AdvancedJMM_14_SynchronizedAreNotFences example, the volatile accesses cannot be reliably\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_15_VolatilesAreNotFences.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/jmm\/advanced\/AdvancedJMM_14_VolatilesAreNotFences.java","status":"renamed"}]}