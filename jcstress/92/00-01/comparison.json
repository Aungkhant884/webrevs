{"files":[{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.high.rmw;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.*;\n+\n+@JCStressTest\n+@Outcome(id = {\"0, 0\", \"1, 1\", \"0, 1\"}, expect = ACCEPTABLE, desc = \"Trivial\")\n+@Outcome(id = \"1, 0\",                   expect = FORBIDDEN,  desc = \"Cannot happen\")\n+@State\n+public class RMW_04_AcquireOnSuccess {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_04_AcquireOnSuccess[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This test explores the behaviors of atomic RMW instructions.\n+\n+        This shows that CAS provides \"acquire\" semantics on success.\n+\n+        x86_64, AArch64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  138,542,022   42.99%  Acceptable  Trivial\n+            0, 1    3,232,097    1.00%  Acceptable  Trivial\n+            1, 0            0    0.00%   Forbidden  Cannot happen\n+            1, 1  180,464,345   56.00%  Acceptable  Trivial\n+     *\/\n+\n+    private int x, g;\n+    public static final VarHandle VH;\n+\n+    static {\n+        try {\n+            VH = MethodHandles.lookup().findVarHandle(RMW_04_AcquireOnSuccess.class, \"g\", int.class);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        x = 1;\n+        VH.setVolatile(this, 1);\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r1 = VH.compareAndSet(this, 1, 0) ? 1 : 0; \/\/ succeeds if (g == 1)\n+        r.r2 = x;\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_04_AcquireOnSuccess.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jcstress.samples.high.rmw;\n-\n-import org.openjdk.jcstress.annotations.Actor;\n-import org.openjdk.jcstress.annotations.JCStressTest;\n-import org.openjdk.jcstress.annotations.Outcome;\n-import org.openjdk.jcstress.annotations.State;\n-import org.openjdk.jcstress.infra.results.II_Result;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.VarHandle;\n-\n-import static org.openjdk.jcstress.annotations.Expect.*;\n-\n-@JCStressTest\n-@Outcome(id = {\"0, 0\", \"1, 1\", \"0, 1\"}, expect = ACCEPTABLE, desc = \"Trivial\")\n-@Outcome(id = \"1, 0\",                   expect = FORBIDDEN,  desc = \"Cannot happen\")\n-@State\n-public class RMW_04_SuccessMemoryEffects {\n-\n-    \/*\n-        How to run this test:\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_04_SuccessMemoryEffects[.SubTestName]\n-     *\/\n-\n-    \/*\n-      ----------------------------------------------------------------------------------------------------------\n-\n-        This test explores the behaviors of atomic RMW instructions.\n-\n-        This shows the important caveat about the notion of conflict. Even if there is an intervening\n-        write to the same variable _that keeps the value the same_, the CAS is still guaranteed\n-        to succeed.\n-\n-        x86_64, AArch64:\n-          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n-            0, 0  228,564,338   57.90%  Acceptable  Trivial\n-            0, 1    9,793,943    2.48%  Acceptable  Trivial\n-            1, 0            0    0.00%   Forbidden  Cannot happen\n-            1, 1  156,369,143   39.61%  Acceptable  Trivial\n-     *\/\n-\n-    private int x, g;\n-    public static final VarHandle VH;\n-\n-    static {\n-        try {\n-            VH = MethodHandles.lookup().findVarHandle(RMW_04_SuccessMemoryEffects.class, \"g\", int.class);\n-        } catch (NoSuchFieldException | IllegalAccessException e) {\n-            throw new IllegalStateException(e);\n-        }\n-    }\n-\n-    @Actor\n-    public void actor1(II_Result r) {\n-        x = 1;\n-        VH.compareAndSet(this, 0, 1); \/\/ always succeeds\n-    }\n-\n-    @Actor\n-    public void actor2(II_Result r) {\n-        r.r1 = (int) VH.getVolatile(this);\n-        r.r2 = x;\n-    }\n-\n-}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_04_SuccessMemoryEffects.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.high.rmw;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+@JCStressTest\n+@Outcome(id = {\"0, 0\", \"1, 1\", \"0, 1\"}, expect = ACCEPTABLE, desc = \"Trivial\")\n+@Outcome(id = \"1, 0\",                   expect = FORBIDDEN,  desc = \"Cannot happen\")\n+@State\n+public class RMW_05_ReleaseOnSuccess {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_05_ReleaseOnSuccess[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This test explores the behaviors of atomic RMW instructions.\n+\n+        This shows the important caveat about the notion of conflict. Even if there is an intervening\n+        write to the same variable _that keeps the value the same_, the CAS is still guaranteed\n+        to succeed.\n+\n+        x86_64, AArch64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  138,542,022   42.99%  Acceptable  Trivial\n+            0, 1    3,232,097    1.00%  Acceptable  Trivial\n+            1, 0            0    0.00%   Forbidden  Cannot happen\n+            1, 1  180,464,345   56.00%  Acceptable  Trivial\n+     *\/\n+\n+    private int x, g;\n+    public static final VarHandle VH;\n+\n+    static {\n+        try {\n+            VH = MethodHandles.lookup().findVarHandle(RMW_05_ReleaseOnSuccess.class, \"g\", int.class);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        x = 1;\n+        VH.compareAndSet(this, 0, 1); \/\/ always succeeds\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r1 = (int)VH.getVolatile(this);\n+        r.r2 = x;\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_05_ReleaseOnSuccess.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.high.rmw;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+@JCStressTest\n+@Outcome(id = {\"0, 0\", \"1, 1\", \"0, 1\"}, expect = ACCEPTABLE, desc = \"Trivial\")\n+@Outcome(id = \"1, 0\",                   expect = FORBIDDEN,  desc = \"Cannot happen\")\n+@State\n+public class RMW_06_AcquireOnFailure {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_06_AcquireOnFailure[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This test explores the behaviors of atomic RMW instructions.\n+\n+        x86_64, AArch64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  146,825,939   44.46%  Acceptable  Trivial\n+            0, 1    4,112,904    1.25%  Acceptable  Trivial\n+            1, 0            0    0.00%   Forbidden  Cannot happen\n+            1, 1  179,276,581   54.29%  Acceptable  Trivial\n+     *\/\n+\n+    private int x, g;\n+    public static final VarHandle VH;\n+\n+    static {\n+        try {\n+            VH = MethodHandles.lookup().findVarHandle(RMW_06_AcquireOnFailure.class, \"g\", int.class);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        x = 1;\n+        VH.setVolatile(this, 1);\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r1 = VH.compareAndSet(this, 0, 1) ? 0 : 1; \/\/ fails if (g == 1)\n+        r.r2 = x;\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_06_AcquireOnFailure.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jcstress.samples.high.rmw;\n+\n+import org.openjdk.jcstress.annotations.Actor;\n+import org.openjdk.jcstress.annotations.JCStressTest;\n+import org.openjdk.jcstress.annotations.Outcome;\n+import org.openjdk.jcstress.annotations.State;\n+import org.openjdk.jcstress.infra.results.II_Result;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+\n+import static org.openjdk.jcstress.annotations.Expect.ACCEPTABLE;\n+import static org.openjdk.jcstress.annotations.Expect.FORBIDDEN;\n+\n+@JCStressTest\n+@Outcome(id = {\"0, 0\", \"1, 1\", \"0, 1\"}, expect = ACCEPTABLE, desc = \"Trivial\")\n+@Outcome(id = {\"1, 0\", \"1, 1\"},         expect = FORBIDDEN,  desc = \"Cannot happen by construction\")\n+@State\n+public class RMW_07_ReleaseOnFailure {\n+\n+    \/*\n+        How to run this test:\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_07_ReleaseOnFailure[.SubTestName]\n+     *\/\n+\n+    \/*\n+      ----------------------------------------------------------------------------------------------------------\n+\n+        This test explores the behaviors of atomic RMW instructions.\n+\n+        x86_64, AArch64:\n+          RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION\n+            0, 0  161,650,705   52.25%  Acceptable  Trivial\n+            0, 1  147,757,039   47.75%  Acceptable  Trivial\n+            1, 0            0    0.00%   Forbidden  Cannot happen by construction\n+            1, 1            0    0.00%   Forbidden  Cannot happen by construction\n+     *\/\n+\n+    private int x, g;\n+    public static final VarHandle VH;\n+\n+    static {\n+        try {\n+            VH = MethodHandles.lookup().findVarHandle(RMW_07_ReleaseOnFailure.class, \"g\", int.class);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    @Actor\n+    public void actor1(II_Result r) {\n+        x = 1;\n+        VH.compareAndSet(this, 1, 0); \/\/ always fails\n+    }\n+\n+    @Actor\n+    public void actor2(II_Result r) {\n+        r.r1 = (int)VH.getVolatile(this);\n+        r.r2 = x;\n+    }\n+\n+}\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_07_ReleaseOnFailure.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -42,1 +42,1 @@\n-public class RMW_05_FailureMemoryEffects {\n+public class RMW_08_AtomicityEffects {\n@@ -46,1 +46,1 @@\n-            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_05_FailureMemoryEffects[.SubTestName]\n+            $ java -jar jcstress-samples\/target\/jcstress.jar -t RMW_08_AtomicBound[.SubTestName]\n@@ -52,1 +52,5 @@\n-        This test produces (0, 0), and the justifying execution is:\n+        This test explores the behaviors of atomic RMW instructions. Since failing RMW operations do not\n+        produce observable writes, the tests are complicated, and have to test the memory semantics\n+        in a round-about way, gradually building up the test case.\n+\n+        First, a very basic test. This test produces (0, 0), and the justifying execution is:\n@@ -62,1 +66,1 @@\n-        AArch64:\n+        Indeed, this is clearly visible on AArch64:\n@@ -101,1 +105,2 @@\n-        This test produces (0, 0), and the justifying execution is:\n+        Replacing both non-atomic checks with CAS yields the example that still produces\n+        (0, 0). The justifying execution for that outcome is:\n@@ -111,1 +116,1 @@\n-        It is similar as before, and the fact these are CASes changes nothing (yet).\n+        The fact these are atomic CASes changes nothing (yet).\n@@ -155,0 +160,2 @@\n+\n+\n@@ -159,1 +166,1 @@\n-                            |                 |\n+                            | so              | so\n@@ -228,1 +235,1 @@\n-                              |         |\n+                              | so      | so\n@@ -258,3 +265,3 @@\n-          - GAS and CAS being atomic;\n-          - GAS and CAS being sequentially consistent;\n-          - GAS performing the unconditional store;\n+          - GAS being atomic;\n+          - GAS carrying \"volatile\" semantics;\n+          - GAS performing the unconditional store that links the sw;\n","filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_08_AtomicityEffects.java","additions":18,"deletions":11,"binary":false,"changes":29,"previous_filename":"jcstress-samples\/src\/main\/java\/org\/openjdk\/jcstress\/samples\/high\/rmw\/RMW_05_FailureMemoryEffects.java","status":"renamed"}]}