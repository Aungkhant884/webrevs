{"files":[{"patch":"@@ -201,5 +201,0 @@\n-    if (UseCompactObjectHeaders) {\n-      \/\/ With compact headers, arrays have a 32bit alignment gap after the length.\n-      assert(arrayOopDesc::length_offset_in_bytes() == 8, \"check length offset\");\n-      strw(zr, Address(obj, arrayOopDesc::length_offset_in_bytes() + sizeof(jint)));\n-    }\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -185,8 +185,0 @@\n-#ifdef _LP64\n-    if (!is_aligned(arrayOopDesc::header_size_in_bytes(), BytesPerWord)) {\n-      assert(is_aligned(arrayOopDesc::header_size_in_bytes(), BytesPerInt), \"must be 4-byte aligned\");\n-      movl(Address(obj, arrayOopDesc::header_size_in_bytes()), 0);\n-    }\n-#else\n-    assert(is_aligned(arrayOopDesc::header_size_in_bytes(), BytesPerInt), \"must be 4-byte aligned\");\n-#endif\n@@ -299,0 +291,13 @@\n+  \/\/ Clear leading 4 bytes, if necessary.\n+  \/\/ TODO: This could perhaps go into initialize_body() and also clear the leading 4 bytes\n+  \/\/ for non-array objects, thereby replacing the klass-gap clearing code in initialize_header().\n+  int base_offset = base_offset_in_bytes;\n+#ifdef _LP64\n+  if (!is_aligned(base_offset, BytesPerWord)) {\n+    assert(is_aligned(base_offset, BytesPerInt), \"must be 4-byte aligned\");\n+    movl(Address(obj, base_offset), 0);\n+    base_offset += BytesPerInt;\n+  }\n+#endif\n+  assert(is_aligned(base_offset, BytesPerWord), \"must be word aligned\");\n+\n@@ -301,4 +306,1 @@\n-  \/\/ We align-up the header size to word-size, because we clear the\n-  \/\/ possible alignment gap in initialize_header().\n-  int hdr_size = align_up(base_offset_in_bytes, BytesPerWord);\n-  initialize_body(obj, arr_size, hdr_size, len_zero);\n+  initialize_body(obj, arr_size, base_offset, len_zero);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,0 +29,12 @@\n+\n+\n+compiler\/ciReplay\/TestInlining.java 8316441 generic-all\n+compiler\/ciReplay\/TestInliningProtectionDomain.java 8316441 generic-all\n+compiler\/ciReplay\/TestServerVM.java 8316441 generic-all\n+compiler\/ciReplay\/TestUnresolvedClasses.java 8316441 generic-all\n+compiler\/ciReplay\/TestLambdas.java 8316441 generic-all\n+compiler\/ciReplay\/TestDumpReplay.java 8316441 generic-all\n+compiler\/ciReplay\/TestDumpReplayCommandLine.java 8316441 generic-all\n+compiler\/ciReplay\/TestIncrementalInlining.java 8316441 generic-all\n+compiler\/ciReplay\/TestInvalidReplayFile.java 8316441 generic-all\n+compiler\/ciReplay\/TestNoClassFile.java 8316441 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-lilliput.txt","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}