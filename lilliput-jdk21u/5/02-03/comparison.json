{"files":[{"patch":"@@ -691,1 +691,2 @@\n-      narrowKlass nk = get_requested_narrow_klass(k);\n+      Klass* requested_k = to_requested(k);\n+      narrowKlass nk = CompressedKlassPointers::encode_not_null(requested_k, _requested_static_archive_bottom);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test id=with-coops-no-ccp\n- * @library \/test\/lib\n- * @requires vm.bits == \"64\"\n- * @modules java.base\/jdk.internal.misc\n- * @run main\/othervm -XX:+UseCompressedOops -XX:-UseCompressedClassPointers ArrayBaseOffsets\n- *\/\n-\/*\n- * @test id=with-coops-with-ccp\n- * @library \/test\/lib\n- * @requires vm.bits == \"64\"\n- * @requires vm.opt.UseCompressedClassPointers != false\n- * @modules java.base\/jdk.internal.misc\n- * @run main\/othervm -XX:+UseCompressedOops -XX:+UseCompressedClassPointers ArrayBaseOffsets\n- *\/\n-\/*\n- * @test id=no-coops-no-ccp\n- * @library \/test\/lib\n- * @requires vm.bits == \"64\"\n- * @modules java.base\/jdk.internal.misc\n- * @run main\/othervm -XX:-UseCompressedOops -XX:-UseCompressedClassPointers ArrayBaseOffsets\n- *\/\n-\/*\n- * @test id=no-coops-with-ccp\n- * @library \/test\/lib\n- * @requires vm.bits == \"64\"\n- * @requires vm.opt.UseCompressedClassPointers != false\n- * @modules java.base\/jdk.internal.misc\n- * @run main\/othervm -XX:-UseCompressedOops -XX:+UseCompressedClassPointers ArrayBaseOffsets\n- *\/\n-\/*\n- * @test id=32bit\n- * @library \/test\/lib\n- * @requires vm.bits == \"32\"\n- * @modules java.base\/jdk.internal.misc\n- * @run main\/othervm ArrayBaseOffsets\n- *\/\n-\n-import jdk.internal.misc.Unsafe;\n-\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.RuntimeMXBean;\n-import java.util.List;\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.Platform;\n-\n-public class ArrayBaseOffsets {\n-\n-    private static final boolean COOP;\n-    private static final boolean CCP;\n-\n-    static {\n-        if (Platform.is64bit()) {\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            List<String> vmargs = runtime.getInputArguments();\n-            CCP = !vmargs.contains(\"-XX:-UseCompressedClassPointers\");\n-            COOP = System.getProperty(\"java.vm.compressedOopsMode\") != null;\n-        } else {\n-            COOP = CCP = false;\n-        }\n-    }\n-\n-    static public void main(String[] args) {\n-        Unsafe unsafe = Unsafe.getUnsafe();\n-        int intOffset, longOffset;\n-        if (Platform.is64bit()) {\n-            if (CCP) {\n-                intOffset = 16;\n-                longOffset = 16;\n-            } else {\n-                intOffset = 20;\n-                longOffset = 24;\n-            }\n-        } else {\n-            intOffset = 12;\n-            longOffset = 16;\n-        }\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(boolean[].class), intOffset,  \"Misplaced boolean array base\");\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(byte[].class),    intOffset,  \"Misplaced byte    array base\");\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(char[].class),    intOffset,  \"Misplaced char    array base\");\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(short[].class),   intOffset,  \"Misplaced short   array base\");\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(int[].class),     intOffset,  \"Misplaced int     array base\");\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(long[].class),    longOffset, \"Misplaced long    array base\");\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(float[].class),   intOffset,  \"Misplaced float   array base\");\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(double[].class),  longOffset, \"Misplaced double  array base\");\n-        int expectedObjArrayOffset = (COOP || !Platform.is64bit()) ? intOffset : longOffset;\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(Object[].class),  expectedObjArrayOffset, \"Misplaced object  array base\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/ArrayBaseOffsets.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -91,1 +91,1 @@\n-            INT_ARRAY_OFFSET = 16; \/\/ Should be 12 once JDK-8139457 lands.\n+            INT_ARRAY_OFFSET = 12;\n@@ -99,1 +99,1 @@\n-            INT_ARRAY_OFFSET = 24; \/\/ Should be 20 once JDK-8139457 lands.\n+            INT_ARRAY_OFFSET = 20;\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/BaseOffsets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}