{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.util.function.IntPredicate;\n@@ -159,1 +160,1 @@\n-    public static <S> void updateSelectedIndices(MultipleSelectionModelBase<S> sm, ListChangeListener.Change<? extends TablePositionBase<?>> c) {\n+    public static <S> void updateSelectedIndices(MultipleSelectionModelBase<S> sm, ListChangeListener.Change<? extends TablePositionBase<?>> c, IntPredicate removeRowFilter) {\n@@ -169,1 +170,1 @@\n-                    .map(TablePositionBase::getRow)\n+                    .mapToInt(TablePositionBase::getRow)\n@@ -171,0 +172,2 @@\n+                    .filter(removeRowFilter)\n+                    .boxed()\n@@ -175,1 +178,1 @@\n-                    .map(TablePositionBase::getRow)\n+                    .mapToInt(TablePositionBase::getRow)\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.function.IntPredicate;\n@@ -3026,1 +3027,5 @@\n-            ControlUtils.updateSelectedIndices(this, c);\n+            \/\/ Allow removing the row index if cell selection is not enabled or\n+            \/\/ if such row doesn't have any selected cells\n+            IntPredicate removeRowFilter = row -> !isCellSelectionEnabled() ||\n+                    getSelectedCells().stream().noneMatch(tp -> tp.getRow() == row);\n+            ControlUtils.updateSelectedIndices(this, c, removeRowFilter);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+import java.util.function.IntPredicate;\n@@ -3368,1 +3369,5 @@\n-            ControlUtils.updateSelectedIndices(this, c);\n+            \/\/ Allow removing the row index if cell selection is not enabled or\n+            \/\/ if such row doesn't have any selected cells\n+            IntPredicate removeRowFilter = row -> !isCellSelectionEnabled() ||\n+                    getSelectedCells().stream().noneMatch(tp -> tp.getRow() == row);\n+            ControlUtils.updateSelectedIndices(this, c, removeRowFilter);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5589,0 +5589,49 @@\n+\n+    @Test\n+    public void test_clearAndSelectChangeMultipleSelectionCellMode() {\n+        TableColumn<Person, String> firstNameCol = new TableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new PropertyValueFactory<>(\"firstName\"));\n+\n+        TableColumn<Person, String> lastNameCol = new TableColumn<>(\"Last Name\");\n+        lastNameCol.setCellValueFactory(new PropertyValueFactory<>(\"lastName\"));\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(personTestData);\n+        table.getColumns().addAll(firstNameCol, lastNameCol);\n+\n+        sm = table.getSelectionModel();\n+        sm.setCellSelectionEnabled(true);\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+\n+        StageLoader sl = new StageLoader(table);\n+        KeyEventFirer keyboard = new KeyEventFirer(table);\n+\n+        assertEquals(0, sm.getSelectedItems().size());\n+\n+        sm.select(0, firstNameCol);\n+        assertEquals(1, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);\n+        assertEquals(2, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        keyboard.doKeyPress(KeyCode.LEFT);\n+        assertTrue(VirtualFlowTestUtils.getCell(table, 0, 0).isSelected());\n+        assertFalse(VirtualFlowTestUtils.getCell(table, 0, 1).isSelected());\n+        assertEquals(1, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        sm.clearSelection();\n+\n+        sm.selectRange(0, firstNameCol, 1, lastNameCol);\n+        assertEquals(4, sm.getSelectedCells().size());\n+        assertEquals(2, sm.getSelectedItems().size());\n+\n+        sm.clearAndSelect(0, firstNameCol);\n+        assertEquals(1, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        sl.dispose();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -6669,0 +6669,49 @@\n+\n+    @Test\n+    public void test_clearAndSelectChangeMultipleSelectionCellMode() {\n+        TreeItem<Person> root = new TreeItem<>(new Person(\"root\", \"\",\"\"));\n+        root.getChildren().setAll(\n+                new TreeItem<>(new Person(\"Jacob\", \"Smith\", \"jacob.smith@example.com\")),\n+                new TreeItem<>(new Person(\"Isabella\", \"Johnson\", \"isabella.johnson@example.com\")),\n+                new TreeItem<>(new Person(\"Ethan\", \"Williams\", \"ethan.williams@example.com\")),\n+                new TreeItem<>(new Person(\"Emma\", \"Jones\", \"emma.jones@example.com\")),\n+                new TreeItem<>(new Person(\"Michael\", \"Brown\", \"michael.brown@example.com\")));\n+        root.setExpanded(true);\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"firstName\"));\n+\n+        TreeTableColumn<Person, String> lastNameCol = new TreeTableColumn<>(\"Last Name\");\n+        lastNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"lastName\"));\n+\n+        TreeTableColumn<Person, String> emailCol = new TreeTableColumn<>(\"Email\");\n+        emailCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"email\"));\n+\n+        TreeTableView<Person> table = new TreeTableView<>(root);\n+        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);\n+        sm = table.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+\n+        assertEquals(0, sm.getSelectedItems().size());\n+\n+        sm.select(1, firstNameCol);\n+        assertTrue(sm.isSelected(1, firstNameCol));\n+        assertEquals(1, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        TreeTableCell<Person, String> cell_1_1 = (TreeTableCell<Person, String>) VirtualFlowTestUtils.getCell(table, 1, 1);\n+        new MouseEventFirer(cell_1_1).fireMousePressAndRelease(KeyModifier.getShortcutKey());\n+        assertTrue(sm.isSelected(1, firstNameCol));\n+        assertTrue(sm.isSelected(1, lastNameCol));\n+        assertEquals(2, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        TreeTableCell<Person, String> cell_1_0 = (TreeTableCell<Person, String>) VirtualFlowTestUtils.getCell(table, 1, 0);\n+        new MouseEventFirer(cell_1_0).fireMousePressAndRelease();\n+        assertTrue(sm.isSelected(1, firstNameCol));\n+        assertFalse(sm.isSelected(1, lastNameCol));\n+        assertEquals(1, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"}]}