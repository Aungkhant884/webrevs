{"files":[{"patch":"@@ -462,0 +462,1 @@\n+ext.IS_RELEASE = !ext.IS_DEBUG_JAVA\n@@ -4964,0 +4965,3 @@\n+        def doStrip = targetProperties.containsKey('strip') && IS_RELEASE\n+        def strip = doStrip ? targetProperties.strip : null\n+        def stripArgs = doStrip ? targetProperties.stripArgs : null\n@@ -5012,1 +5016,2 @@\n-            into \"${graphicsProject.buildDir}\/${moduleNativeDirName}\"\n+            def destDirName = \"${graphicsProject.buildDir}\/${moduleNativeDirName}\"\n+            into destDirName\n@@ -5038,0 +5043,18 @@\n+\n+            if (doStrip) {\n+                doLast {\n+                    def inputFiles = fileTree(dir: destDirName)\n+                    inputFiles.include(\"*.dll\")\n+                    inputFiles.include(\"*.dylib\")\n+                    inputFiles.include(\"*.so\")\n+                    \/\/ FIXME: if we ever need to strip on Windows platforms, we must\n+                    \/\/ exclude the Microsoft DLLs (VS2017DLLNames and WinSDKDLLNames)\n+\n+                    inputFiles.each { file ->\n+                        exec {\n+                            def cmd = [ strip, stripArgs, file ].flatten()\n+                            commandLine(cmd)\n+                        }\n+                    }\n+                }\n+            }\n@@ -5044,1 +5067,2 @@\n-            into \"${mediaProject.buildDir}\/${moduleNativeDirName}\"\n+            def destDirName = \"${mediaProject.buildDir}\/${moduleNativeDirName}\"\n+            into destDirName\n@@ -5075,0 +5099,16 @@\n+\n+            if (doStrip && IS_COMPILE_MEDIA) {\n+                doLast {\n+                    def inputFiles = fileTree(dir: destDirName)\n+                    inputFiles.include(\"*.dll\")\n+                    inputFiles.include(\"*.dylib\")\n+                    inputFiles.include(\"*.so\")\n+\n+                    inputFiles.each { file ->\n+                        exec {\n+                            def cmd = [ strip, stripArgs, file ].flatten()\n+                            commandLine(cmd)\n+                        }\n+                    }\n+                }\n+            }\n@@ -5081,1 +5121,2 @@\n-            into \"${webProject.buildDir}\/${moduleNativeDirName}\"\n+            def destDirName = \"${webProject.buildDir}\/${moduleNativeDirName}\"\n+            into destDirName\n@@ -5090,0 +5131,16 @@\n+\n+            if (doStrip && IS_COMPILE_WEBKIT) {\n+                doLast {\n+                    def inputFiles = fileTree(dir: destDirName)\n+                    inputFiles.include(\"*.dll\")\n+                    inputFiles.include(\"*.dylib\")\n+                    inputFiles.include(\"*.so\")\n+\n+                    inputFiles.each { file ->\n+                        exec {\n+                            def cmd = [ strip, stripArgs, file ].flatten()\n+                            commandLine(cmd)\n+                        }\n+                    }\n+                }\n+            }\n","filename":"build.gradle","additions":60,"deletions":3,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -214,0 +214,4 @@\n+\/\/ Strip native .so shared libraries as a postprocess step when copying them\n+LINUX.strip = \"${toolchainDir}strip\"\n+LINUX.stripArgs = [ \"-x\" ]\n+\n","filename":"buildSrc\/linux.gradle","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,0 +174,4 @@\n+\/\/ Strip native .dylib shared libraries as a postprocess step when copying them\n+MAC.strip = \"${toolchainDir}strip\"\n+MAC.stripArgs = [ \"-x\" ]\n+\n","filename":"buildSrc\/mac.gradle","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}