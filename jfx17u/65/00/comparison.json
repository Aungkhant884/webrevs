{"files":[{"patch":"@@ -470,2 +470,2 @@\n-                } else if ((sortX && prevDataPoint.getX() < x) ||\n-                           (sortY && prevDataPoint.getY() < y))\n+                } else if ((sortX && prevDataPoint.getX() <= x) ||\n+                           (sortY && prevDataPoint.getY() <= y))\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/AreaChart.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -173,1 +173,21 @@\n-    @Test public void testPathOutsideXBoundsWithDuplicateXAndHigherY() {\n+    @Test public void testPathOutsideXLowerBoundsWithDuplicateXAndHigherY() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-10d, 20d)); \/\/ lower bound is 0\n+        series1.getData().add(new XYChart.Data<>(-10d, 50d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(-10d, 50d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXUpperBoundsWithDuplicateXAndHigherY() {\n@@ -193,1 +213,21 @@\n-    @Test public void testPathOutsideXBoundsWithDuplicateXAndLowerY() {\n+    @Test public void testPathOutsideXLowerBoundsWithDuplicateXAndLowerY() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-10d, 20d)); \/\/ lower bound is 0\n+        series1.getData().add(new XYChart.Data<>(-10d, 15d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(-10d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXUpperBoundsWithDuplicateXAndLowerY() {\n@@ -213,1 +253,23 @@\n-    @Test public void testPathOutsideYBoundsWithDuplicateYAndLowerX() {\n+    @Test public void testPathOutsideYLowerBoundsWithDuplicateYAndLowerX() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(85d, -10d)); \/\/ y-axis lower bound is 0\n+        series1.getData().add(new XYChart.Data<>(70d, -10d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                \/\/ Sorting policy in AreaChart is defaulted to X_AXIS. See AreaChart#makePaths\n+                new XYChart.Data<>(70d, -10d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(85d, -10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideYUpperBoundsWithDuplicateYAndLowerX() {\n@@ -215,1 +277,1 @@\n-        series1.getData().add(new XYChart.Data<>(85d, 40d));\n+        series1.getData().add(new XYChart.Data<>(85d, 40d));  \/\/ y-axis upper bound is 30\n@@ -235,1 +297,22 @@\n-    @Test public void testPathOutsideYBoundsWithDuplicateYAndHigherX() {\n+    @Test public void testPathOutsideYLowerBoundsWithDuplicateYAndHigherX() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(70d, -10d)); \/\/ lower bound is 30\n+        series1.getData().add(new XYChart.Data<>(85d, -10d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(70d, -10d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(85d, -10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideYUpperBoundsWithDuplicateYAndHigherX() {\n@@ -256,1 +339,21 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndHigherY() {\n+    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndHigherY() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-10d, -40d)); \/\/ lower bound is 0,0\n+        series1.getData().add(new XYChart.Data<>(-10d, -30d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(-10d, -30d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndHigherY() {\n@@ -276,1 +379,21 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndLowerY() {\n+    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndLowerY() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-10d, -30d)); \/\/ lower bound is 0,0\n+        series1.getData().add(new XYChart.Data<>(-10d, -40d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(-10d, -40d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndLowerY() {\n@@ -296,1 +419,21 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndHigherX() {\n+    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndHigherX() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-20d, -30d)); \/\/ lower bound is 0,0\n+        series1.getData().add(new XYChart.Data<>(-10d, -30d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(-10d, -30d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndHigherX() {\n@@ -316,1 +459,21 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndLowerX() {\n+    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndLowerX() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-10d, -30d)); \/\/ lower bound is 0,0\n+        series1.getData().add(new XYChart.Data<>(-20d, -30d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(-10d, -30d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndLowerX() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/AreaChartTest.java","additions":172,"deletions":9,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -342,1 +342,23 @@\n-    @Test public void testPathOutsideXBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+    @Test public void testPathOutsideXLowerBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data(-10d, 20d)); \/\/ lower bound is 0\n+        series1.getData().add(new XYChart.Data(-10d, 50d));\n+        lineChart.getData().addAll(series1);\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(-10d, 50d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(-10d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(80d, 10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXUpperBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n@@ -364,1 +386,23 @@\n-    @Test public void testPathOutsideXBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+    @Test public void testPathOutsideXLowerBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data(-10d, 20d)); \/\/ lower bound is 0\n+        series1.getData().add(new XYChart.Data(-10d, 15d));\n+        lineChart.getData().addAll(series1);\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(-10d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(-10d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(80d, 10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXUpperBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n@@ -386,1 +430,22 @@\n-    @Test public void testPathOutsideYBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+    @Test public void testPathOutsideYLowerBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data(80d, -10d)); \/\/ lower bound is 0\n+        series1.getData().add(new XYChart.Data(90d, -10d));\n+        lineChart.getData().addAll(series1);\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(80d, -10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\n+    }\n+\n+    @Test public void testPathOutsideYUpperBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n@@ -396,1 +461,1 @@\n-                new XYChart.Data<>(80d, 32d),\n+                new XYChart.Data<>(90d, 32d),\n@@ -407,1 +472,21 @@\n-    @Test public void testPathOutsideYBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+    @Test public void testPathOutsideYLowerBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data(80d, -10d)); \/\/ lower bound is 0\n+        series1.getData().add(new XYChart.Data(70d, -10d));\n+        lineChart.getData().addAll(series1);\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(80d, -10d)\n+        );\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\n+    }\n+\n+    @Test public void testPathOutsideYUpperBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n@@ -417,1 +502,1 @@\n-                new XYChart.Data<>(80d, 40d),\n+                new XYChart.Data<>(70d, 40d),\n@@ -428,1 +513,23 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(95d, -10d)); \/\/ lower bound is 0,0\n+        series1.getData().add(new XYChart.Data<>(95d, -5d));\n+        lineChart.getData().addAll(series1);\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(95d, -5d)\/*,\n+                new XYChart.Data<>(95d, -10d)*\/\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndHigherYWithSortYAxis() {\n@@ -449,1 +556,22 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-10d, -10d)); \/\/ lower bound is 0,0\n+        series1.getData().add(new XYChart.Data<>(-10d, -20d));\n+        lineChart.getData().addAll(series1);\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(-10d, -10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateXAndLowerYWithSortYAxis() {\n@@ -470,1 +598,22 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-15d, -10d)); \/\/ lower bound is 0,0\n+        series1.getData().add(new XYChart.Data<>(-10d, -10d));\n+        lineChart.getData().addAll(series1);\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(-15d, -10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndHigherXWithSortYAxis() {\n@@ -480,1 +629,1 @@\n-                new XYChart.Data<>(95d, 32d),\n+                new XYChart.Data<>(100d, 32d),\n@@ -491,1 +640,22 @@\n-    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+    @Test public void testPathOutsideXAndYLowerBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(-10d, -10d)); \/\/ lower bound is 0,0\n+        series1.getData().add(new XYChart.Data<>(-15d, -10d));\n+        lineChart.getData().addAll(series1);\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(-10d, -10d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYUpperBoundsWithDuplicateYAndLowerXWithSortYAxis() {\n@@ -501,1 +671,1 @@\n-                new XYChart.Data<>(100d, 40d),\n+                new XYChart.Data<>(95d, 40d),\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/LineChartTest.java","additions":182,"deletions":12,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javafx.application.Application;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.HPos;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Point2D;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.chart.LineChart;\n+import javafx.scene.chart.NumberAxis;\n+import javafx.scene.chart.XYChart;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Stage;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class LineGraphBoundsSample extends Application {\n+\n+    @Override\n+    public void start(Stage primaryStage) {\n+        NumberAxis yAxis = new NumberAxis();\n+        NumberAxis xAxis = new NumberAxis();\n+        LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);\n+\n+        DoubleProperty lowerBound = new SimpleDoubleProperty(0);\n+        DoubleProperty upperBound = new SimpleDoubleProperty(2);\n+\n+        final ComboBox<String> axisSelection = new ComboBox<>(FXCollections.observableArrayList(\"X-Axis\", \"Y-Axis\"));\n+        axisSelection.getSelectionModel().selectedIndexProperty().addListener((o, ov, nv) -> {\n+            switch (nv.intValue()) {\n+                case 0:\n+                    lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.X_AXIS);\n+                    lineChart.setData(createData(LineChart.SortingPolicy.X_AXIS));\n+                    lineChart.getXAxis().setAutoRanging(false);\n+                    lineChart.getYAxis().setAutoRanging(true);\n+                    ((NumberAxis) lineChart.getXAxis()).lowerBoundProperty().bind(lowerBound);\n+                    ((NumberAxis) lineChart.getXAxis()).upperBoundProperty().bind(upperBound);\n+                    ((NumberAxis) lineChart.getYAxis()).lowerBoundProperty().unbind();\n+                    ((NumberAxis) lineChart.getYAxis()).upperBoundProperty().unbind();\n+                    break;\n+                case 1:\n+                    lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\n+                    lineChart.setData(createData(LineChart.SortingPolicy.Y_AXIS));\n+                    lineChart.getXAxis().setAutoRanging(true);\n+                    lineChart.getYAxis().setAutoRanging(false);\n+                    ((NumberAxis) lineChart.getXAxis()).lowerBoundProperty().unbind();\n+                    ((NumberAxis) lineChart.getXAxis()).upperBoundProperty().unbind();\n+                    ((NumberAxis) lineChart.getYAxis()).lowerBoundProperty().bind(lowerBound);\n+                    ((NumberAxis) lineChart.getYAxis()).upperBoundProperty().bind(upperBound);\n+                    break;\n+            }\n+            lowerBound.set(0);\n+            upperBound.set(2);\n+        });\n+\n+        Button decrement = new Button(\"Decrease Bound\");\n+        decrement.setOnAction(e -> {\n+            final double CHANGE_VALUE = -0.1;\n+            lowerBound.set(lowerBound.get() + CHANGE_VALUE);\n+            upperBound.set(upperBound.get() + CHANGE_VALUE);\n+        });\n+\n+        Button increment = new Button(\"Increase Bound\");\n+        increment.setOnAction(e -> {\n+            final double CHANGE_VALUE = 0.1;\n+            lowerBound.set(lowerBound.get() + CHANGE_VALUE);\n+            upperBound.set(upperBound.get() + CHANGE_VALUE);\n+        });\n+\n+        final TextField lowerBoundTextField = new TextField();\n+        lowerBoundTextField.setEditable(false);\n+        lowerBoundTextField.textProperty().bind(lowerBound.asString(\"%.2f\"));\n+\n+        final TextField upperBoundTextField = new TextField();\n+        upperBoundTextField.setEditable(false);\n+        upperBoundTextField.textProperty().bind(upperBound.asString(\"%.2f\"));\n+\n+        final BorderPane root = new BorderPane();\n+        final GridPane gridPane = new GridPane();\n+        gridPane.setVgap(5);\n+        gridPane.setHgap(5);\n+        gridPane.setPadding(new Insets(10));\n+        gridPane.add(new Label(\"Sorting Policy: \"), 0, 0);\n+        gridPane.add(axisSelection, 1, 0);\n+        gridPane.add(new Label(\"Lower Bound: \"), 2, 0);\n+        gridPane.add(new Label(\"Upper Bound: \"), 2, 1);\n+        gridPane.add(lowerBoundTextField, 3, 0);\n+        gridPane.add(upperBoundTextField, 3, 1);\n+        final HBox buttons = new HBox(10, decrement, increment);\n+        buttons.setAlignment(Pos.CENTER);\n+        GridPane.setHalignment(buttons, HPos.CENTER);\n+        gridPane.add(buttons, 0, 2, 4,1);\n+        root.setTop(gridPane);\n+        root.setCenter(lineChart);\n+\n+        Scene scene = new Scene(root);\n+        primaryStage.setScene(scene);\n+        primaryStage.show();\n+\n+        axisSelection.getSelectionModel().select(0);\n+    }\n+\n+    private ObservableList<XYChart.Series<Number,Number>> createData(LineChart.SortingPolicy sortingPolicy) {\n+        XYChart.Series<Number, Number> series = new XYChart.Series<>();\n+        List<Point2D> points = new ArrayList<>();\n+        switch (sortingPolicy) {\n+            case X_AXIS:\n+                points.addAll(List.of(\n+                        new Point2D(0.4, 0.5),\n+                        new Point2D(0.8, 0.5),\n+                        new Point2D(0.8, 1.0),\n+                        new Point2D(1.0, 1.0),\n+                        new Point2D(1.0, 0.8),\n+                        new Point2D(1.5, 0.8)\n+                ));\n+                break;\n+            case Y_AXIS:\n+                points.addAll(List.of(\n+                        new Point2D(0.5, 1.3),\n+                        new Point2D(0.5, 0.9),\n+                        new Point2D(1.0, 0.9),\n+                        new Point2D(1.0, 0.7),\n+                        new Point2D(0.8, 0.7),\n+                        new Point2D(0.8, 0.5)\n+                ));\n+                break;\n+        }\n+        points.forEach(point -> {\n+            series.getData().add(new XYChart.Data<>(point.getX(), point.getY()));\n+        });\n+        return FXCollections.observableArrayList(series);\n+    }\n+}\n","filename":"tests\/manual\/controls\/LineGraphBoundsSample.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"}]}