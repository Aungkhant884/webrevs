{"files":[{"patch":"@@ -160,1 +160,1 @@\n-    public static <S> void updateSelectedIndices(MultipleSelectionModelBase<S> sm, ListChangeListener.Change<? extends TablePositionBase<?>> c, IntPredicate removeRowFilter) {\n+    public static <S> void updateSelectedIndices(MultipleSelectionModelBase<S> sm, boolean isCellSelectionEnabled, ListChangeListener.Change<? extends TablePositionBase<?>> c, IntPredicate removeRowFilter) {\n@@ -184,1 +184,8 @@\n-            final int to = c.getFrom() + addedSize;\n+            int from = c.getFrom();\n+            if (isCellSelectionEnabled && 0 < from && from < c.getList().size()) {\n+                \/\/ convert origin of change of list of tablePositions\n+                \/\/ into origin of change of list of rows\n+                int tpRow = c.getList().get(from).getRow();\n+                from = sm.selectedIndices.indexOf(tpRow);\n+            }\n+            final int to = from + addedSize;\n@@ -187,1 +194,1 @@\n-                sm.selectedIndices._nextReplace(c.getFrom(), to, removed);\n+                sm.selectedIndices._nextReplace(from, to, removed);\n@@ -189,1 +196,1 @@\n-                sm.selectedIndices._nextRemove(c.getFrom(), removed);\n+                sm.selectedIndices._nextRemove(from, removed);\n@@ -191,1 +198,1 @@\n-                sm.selectedIndices._nextAdd(c.getFrom(), to);\n+                sm.selectedIndices._nextAdd(from, to);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3031,1 +3031,1 @@\n-            ControlUtils.updateSelectedIndices(this, c, removeRowFilter);\n+            ControlUtils.updateSelectedIndices(this, this.isCellSelectionEnabled(), c, removeRowFilter);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3373,1 +3373,1 @@\n-            ControlUtils.updateSelectedIndices(this, c, removeRowFilter);\n+            ControlUtils.updateSelectedIndices(this, this.isCellSelectionEnabled(), c, removeRowFilter);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5638,0 +5638,83 @@\n+    @Test\n+    public void test_ChangeToStringKeyboardMultipleSelectionCellMode() {\n+        final Thread.UncaughtExceptionHandler exceptionHandler = Thread.currentThread().getUncaughtExceptionHandler();\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+\n+        TableColumn<Person, String> firstNameCol = new TableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new PropertyValueFactory<>(\"firstName\"));\n+\n+        TableColumn<Person, String> lastNameCol = new TableColumn<>(\"Last Name\");\n+        lastNameCol.setCellValueFactory(new PropertyValueFactory<>(\"lastName\"));\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(personTestData);\n+        table.getColumns().addAll(firstNameCol, lastNameCol);\n+\n+        sm = table.getSelectionModel();\n+        sm.setCellSelectionEnabled(true);\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+\n+        \/\/ Call change::toString\n+        table.getSelectionModel().getSelectedItems().addListener((ListChangeListener<Person>) Object::toString);\n+\n+        StageLoader sl = new StageLoader(table);\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(table);\n+\n+        assertEquals(0, sm.getSelectedItems().size());\n+\n+        sm.select(0, firstNameCol);\n+        assertEquals(1, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);\n+        assertEquals(2, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        sm.clearSelection();\n+\n+        sl.dispose();\n+\n+        \/\/ reset the exception handler\n+        Thread.currentThread().setUncaughtExceptionHandler(exceptionHandler);\n+    }\n+\n+    @Test\n+    public void test_ChangeToStringMouseMultipleSelectionCellMode() {\n+        final Thread.UncaughtExceptionHandler exceptionHandler = Thread.currentThread().getUncaughtExceptionHandler();\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+\n+        TableColumn<Person, String> firstNameCol = new TableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new PropertyValueFactory<>(\"firstName\"));\n+\n+        TableColumn<Person, String> lastNameCol = new TableColumn<>(\"Last Name\");\n+        lastNameCol.setCellValueFactory(new PropertyValueFactory<>(\"lastName\"));\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(personTestData);\n+        table.getColumns().addAll(firstNameCol, lastNameCol);\n+\n+        sm = table.getSelectionModel();\n+        sm.setCellSelectionEnabled(true);\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+\n+        \/\/ Call change::toString\n+        table.getSelectionModel().getSelectedItems().addListener((ListChangeListener<Person>) Object::toString);\n+\n+        assertEquals(0, sm.getSelectedItems().size());\n+\n+        sm.select(0, firstNameCol);\n+        assertTrue(sm.isSelected(0, firstNameCol));\n+        assertEquals(1, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        TableCell<Person, String> cell = (TableCell<Person, String>) VirtualFlowTestUtils.getCell(table, 0, 1);\n+        new MouseEventFirer(cell).fireMousePressAndRelease(KeyModifier.getShortcutKey());\n+        assertTrue(sm.isSelected(0, firstNameCol));\n+        assertTrue(sm.isSelected(0, lastNameCol));\n+        assertEquals(2, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        \/\/ reset the exception handler\n+        Thread.currentThread().setUncaughtExceptionHandler(exceptionHandler);\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -6718,0 +6718,51 @@\n+    @Test\n+    public void test_ChangeToStringMouseMultipleSelectionCellMode() {\n+        final Thread.UncaughtExceptionHandler exceptionHandler = Thread.currentThread().getUncaughtExceptionHandler();\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+\n+        TreeItem<Person> root = new TreeItem<>(new Person(\"root\", \"\",\"\"));\n+        root.getChildren().setAll(\n+                new TreeItem<>(new Person(\"Jacob\", \"Smith\", \"jacob.smith@example.com\")),\n+                new TreeItem<>(new Person(\"Isabella\", \"Johnson\", \"isabella.johnson@example.com\")),\n+                new TreeItem<>(new Person(\"Ethan\", \"Williams\", \"ethan.williams@example.com\")),\n+                new TreeItem<>(new Person(\"Emma\", \"Jones\", \"emma.jones@example.com\")),\n+                new TreeItem<>(new Person(\"Michael\", \"Brown\", \"michael.brown@example.com\")));\n+        root.setExpanded(true);\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"firstName\"));\n+\n+        TreeTableColumn<Person, String> lastNameCol = new TreeTableColumn<>(\"Last Name\");\n+        lastNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"lastName\"));\n+\n+        TreeTableColumn<Person, String> emailCol = new TreeTableColumn<>(\"Email\");\n+        emailCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"email\"));\n+\n+        TreeTableView<Person> table = new TreeTableView<>(root);\n+        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);\n+        sm = table.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+\n+        \/\/ Call change::toString\n+        table.getSelectionModel().getSelectedItems().addListener((ListChangeListener<TreeItem<Person>>) Object::toString);\n+\n+        assertEquals(0, sm.getSelectedItems().size());\n+\n+        sm.select(1, firstNameCol);\n+        assertTrue(sm.isSelected(1, firstNameCol));\n+        assertEquals(1, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        TreeTableCell<Person, String> cell = (TreeTableCell<Person, String>) VirtualFlowTestUtils.getCell(table, 1, 1);\n+        MouseEventFirer mouse = new MouseEventFirer(cell);\n+        mouse.fireMousePressAndRelease(KeyModifier.getShortcutKey());\n+        assertTrue(sm.isSelected(1, firstNameCol));\n+        assertTrue(sm.isSelected(1, lastNameCol));\n+        assertEquals(2, sm.getSelectedCells().size());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        \/\/ reset the exception handler\n+        Thread.currentThread().setUncaughtExceptionHandler(exceptionHandler);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"}]}