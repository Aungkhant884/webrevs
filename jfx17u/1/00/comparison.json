{"files":[{"patch":"@@ -1,2 +1,2 @@\n-Contributing to OpenJFX\n-=======================\n+Contributing to OpenJFX 17 Updates\n+==================================\n@@ -4,1 +4,1 @@\n-OpenJFX is an open source project and we love to receive contributions from our community &mdash; you! There are many ways to contribute, from improving the documentation, submitting bug reports and feature requests or writing code which can be incorporated into OpenJFX itself.\n+The OpenJFX 17 Updates repository is _not_ accepting new contributions. If you are looking to contribute to OpenJFX, please visit [openjdk\/jfx](https:\/\/github.com\/openjdk\/jfx) instead.\n@@ -6,2 +6,1 @@\n-Bug reports\n------------\n+Important bug fixes that have already been fixed in the mainline can be backported with approval. New fixes should first go into the mainline, and then can be considered for backporting. Approval from one of the project leads is required prior to integrating the fix.\n@@ -9,1 +8,1 @@\n-If you think you have found a bug in OpenJFX, first make sure that you are testing against the latest version - your issue may already have been fixed. If not, search our [issues list](https:\/\/bugs.openjdk.java.net) in the Java Bug System (JBS) in case a similar issue has already been opened. More information on where and how to report a bug can be found at [bugreport.java.com](https:\/\/bugreport.java.com\/).\n+To backport a fix, import the patch from the jfx mainline into a branch of your personal fork of this repo. Then, create a [Backport Pull Request](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Backports#Backports-BackportPullRequests), by creating the PR with the title:\n@@ -11,207 +10,0 @@\n-It is very helpful if you can prepare a reproduction of the bug. In other words, provide a small test case which we can run to confirm your bug. It makes it easier to find the problem and to fix it.\n-\n-Provide as much information as you can. The easier it is for us to recreate your problem, the faster it is likely to be fixed.\n-\n-Feature requests\n-----------------\n-\n-If you find yourself wishing for a feature that doesn't exist in OpenJFX, you are probably not alone. There are bound to be others out there with similar needs. Many of the features that OpenJFX has today have been added because our users saw the need.\n-Open an issue on our [issues list](https:\/\/bugs.openjdk.java.net) on JBS which describes the feature you would like to see, why you need it, and how it should work.\n-\n-Contributing code and documentation changes\n--------------------------------------------\n-\n-If you have a bug fix or new feature that you would like to contribute to OpenJFX, please find or open an issue about it first. Talk about what you would like to do. It may be that somebody is already working on it, or that there are particular issues that you should know about before implementing the change. Feature requests, in particular, should be discussed ahead of time and will require significant effort on your part.\n-\n-We enjoy working with contributors to get their code accepted. There are many approaches to fixing a problem and it is important to find the best approach before writing too much code.\n-\n-Note that it is unlikely the project will merge refactors for the sake of refactoring. These\n-types of pull requests have a high cost to maintainers in reviewing and testing with little\n-to no tangible benefit. This especially includes changes generated by tools. For example,\n-converting all generic interface instances to use the diamond operator.\n-\n-### Fork and clone the repository\n-\n-Once you have created a bug report or confirmed its existence on JBS, you will need to fork the [repository](https:\/\/github.com\/openjdk\/jfx) and clone it to your local machine. See\n-the [GitHub help page](https:\/\/help.github.com\/articles\/fork-a-repo) for help.\n-\n-### Before submitting a pull request\n-\n-If you are a first time contributor to OpenJFX, welcome! Please do the following before you submit your first pull request:\n-\n-* Sign the Contributor Agreement\n-\n-    In order for us to evaluate your contribution, you need to sign the [Oracle Contributor Agreement](https:\/\/www.oracle.com\/technetwork\/community\/oca-486395.html) (OCA). We are not asking you to give up your copyright, but to give us the right to distribute your code without restriction. By doing this you assert that the code you contribute is *yours* to contribute, and not third-party code that you do not own. We ask this of all contributors in order to assure our users of the origin and continuing existence of the code. You only need to sign the OCA once.\n-\n-* Read the code review policies\n-\n-    Please read the entire section below on how to submit a pull request, as well as the [OpenJFX Code Review Policies](https:\/\/wiki.openjdk.java.net\/display\/OpenJFX\/Code+Reviews). If this is a feature request, please note the additional requirements and expectations in the [New features \/ API additions](https:\/\/wiki.openjdk.java.net\/display\/OpenJFX\/Code+Reviews#CodeReviews-NewFeaturesC.Newfeatures\/APIadditions.) section of the Code Review Policies doc.\n-\n-* File a bug in JBS for every pull request\n-\n-    A [JBS](https:\/\/bugs.openjdk.java.net) bug ID is needed for every\n-    pull request. If there isn't already a bug filed in JBS, then please\n-    file one at [bugreport.java.com](https:\/\/bugreport.java.com\/).\n-    A developer with an active OpenJDK ID can file a bug directly in JBS.\n-\n-TIP: A GitHub pull request (PR) should not be the first time we hear about your proposed change to OpenJFX. Unless clearly identified as experimental or work-in-progress (WIP), we will usually close a pull request that isn't associated with an existing bug report. Reading the policies below will help you in getting your change approved.\n-\n-### Submitting your changes via a pull request\n-\n-Once your changes and tests are ready to submit for review:\n-\n-1. Test your changes\n-\n-    Run the test suite to make sure that nothing is broken.\n-\n-2. Rebase your changes\n-\n-    Update your local repository with the most recent code from the main [repository]((https:\/\/github.com\/openjdk\/jfx)), and rebase your branch on top of the latest `master` branch. We prefer your initial changes to be squashed into a single commit. See the [GitHub help page](https:\/\/help.github.com\/articles\/about-git-rebase\/) for help. Later, if we ask you to make changes, add them as separate commits. This makes them easier to review.\n-\n-3. Submit a pull request\n-\n-    Push your local changes to your forked copy of the repository and\n-    [submit a pull request](https:\/\/help.github.com\/articles\/using-pull-requests).\n-    The title of the pull request must start with the 7-digit JBS bug id\n-    (without the `JDK-` prefix), followed by a colon (`:`), then a space,\n-    and finally the bug title as taken from JBS. You should include\n-    additional details about your change in the Description of the pull\n-    request. For example, the following is a valid pull request title:\n-\n-    ```\n-    8231326: Update README and CONTRIBUTING docs for Skara\n-    ```\n-\n-    The Skara bot will then run `jcheck` on the server to verify the format\n-    of the PR title and check for whitespace errors. Once that passes,\n-    it will automatically send a Request For Review (RFR) email to the\n-    [openjfx-dev](mailto:openjfx-dev@openjdk.java.net) mailing list.\n-    See the\n-    [Skara project page](https:\/\/github.com\/openjdk\/skara#openjdk-project-skara)\n-    for information on `jcheck` and other Skara tools.\n-\n-    TIP: prefix the pull request title with `WIP:` if you aren't yet\n-    ready for it to be reviewed. The Skara bot will not send an RFR\n-    email unless the title starts with a 7-digit bug ID.\n-\n-    Please cross-link the JBS Issue and the pull request. A link to the\n-    JBS issue can be added as part of the pull request's Description. A\n-    link to the PR, can be added as an issue link in the JBS bug. If\n-    you don't have direct JBS access, one of the Project Committers or\n-    Authors will do this for you.\n-\n-    Please adhere to the general guideline that you should never force push\n-    to a publicly shared branch. Once you have opened your pull request, you\n-    should consider your branch publicly shared. Instead of force pushing\n-    you can just add incremental commits; this is generally easier on your\n-    reviewers. If you need to pick up changes from `master`, you can merge\n-    `master` into your branch. A reviewer might ask you to rebase a\n-    long-running pull request in which case force pushing is okay for that\n-    request. Note that squashing at the end of the review process should\n-    also not be done. The Skara bot will squash your commits into a\n-    single commit, and rebase it onto the target branch when the pull\n-    request is integrated.\n-\n-4. Code review\n-\n-    All pull requests _must_ be reviewed according to the\n-    [OpenJFX Code Review Policies](https:\/\/wiki.openjdk.java.net\/display\/OpenJFX\/Code+Reviews).\n-    It is the responsibility of the Reviewer(s) and the Committer who\n-    will integrate the change to ensure that the code review policies\n-    are followed, and that all concerns have been addressed.\n-\n-    Discussion and review of the pull request can happen either by adding\n-    a comment to the PR itself, or by replying to the mailing list \"RFR\"\n-    thread. The Skara bot will cross-forward between them.\n-    To approve a pull request, a reviewer must do that in the PR itself.\n-    See the following\n-    [GitHub help page](https:\/\/help.github.com\/en\/articles\/reviewing-proposed-changes-in-a-pull-request)\n-    for help on reviewing a pull request.\n-\n-    If any changes\n-    are needed, you would push additional commits to the branch\n-    from which you made the pull request.\n-\n-    The code review continues until there are no unaddressed concerns, and\n-    at least the minimum number of reviewers have approved the PR -- which\n-    is one for low-impact bug fixes and two for enhancements or high-impact\n-    bug fixes.\n-\n-    NOTE: while the Skara tooling will indicate that the PR is\n-    ready to integrate once the first reviewer with a \"Reviewer\" role\n-    in the project has approved it, this may or may not be sufficient\n-    depending on the type of fix. For example, you must wait for a second\n-    approval for enhancements or high-impact bug fixes.\n-\n-5. Integrate the pull request\n-\n-    Once the review has completed as described above, you can integrate\n-    the PR.\n-\n-    A. Verify the commit message. The Skara tooling adds a comment with\n-    the commit message that will be used. You can add a summary to the\n-    commit message with the `\/summary` command. You can add additional\n-    contributors with the `\/contributor` command. Commands are issued\n-    by adding a comment to the PR that starts with a slash `\/` character.\n-\n-    B. Issue the `\/integrate` command. If you have the \"Committer\" role\n-    (or higher) in the Project, then the Skara bot will merge the change\n-    with no further action on your part. If you are not a Committer,\n-    then you must get a Committer to sponsor your change. This is often\n-    one of the reviewers who reviewed your PR, but it need not be. The\n-    sponsor will issue the `\/sponsor` command after you issue `\/integrate`\n-    once they are satisfied that the review criteria have been met.\n-\n-6. Resolve the JBS bug as \"Fixed\"\n-\n-    There is currently no automation for resolving JBS bugs, although\n-    a future Skara improvement will automate this. Until then,\n-    the Committer who integrated or sponsored the fix is responsible for\n-    resolving the JBS issue. You do this with the \"Resolve\" action in JBS,\n-    selecting \"Fixed\" as the resolution. You also need to add the commit\n-    notification message (minus the list of modified files) as a comment.\n-    This includes the URL of the commit. For example:\n-\n-    ```\n-    Changeset: 1de25a49\n-    Author:    Kevin Rushforth <kcr@openjdk.org>\n-    Date:      2019-09-23 08:15:36 +7000\n-    URL:       https:\/\/git.openjdk.java.net\/jfx\/commit\/1de25a49\n-\n-    8231126: libxslt.md has incorrect version string\n-\n-    Reviewed-by: ghb\n-    ```\n-\n-\n-Contributing to the OpenJFX codebase\n-------------------------------------------\n-\n-JDK 11 (at a minimum) is required to build OpenJFX. You must have a JDK 11 installation\n-with the environment variable `JAVA_HOME` referencing the path to Java home for\n-your JDK 11 installation. By default, tests use the same runtime as `JAVA_HOME`.\n-Currently OpenJFX builds are running on JDK 11 (recommended) and JDK 12.\n-\n-It is possible to develop in any major Java IDE (Eclipse, IntelliJ, NetBeans). IDEs can automatically configure projects based on Gradle setup.\n-\n-The following formatting rules are enforced for source code files by\n-`git jcheck`, which is run by the Skara bot:\n-\n-* Use Unix-style (LF) line endings not DOS-style (CRLF)\n-* Do not use TAB characters (exception: Makefiles can have TABS)\n-* No trailing spaces\n-* No files with execute permission\n-\n-Please also follow these formatting guidelines:\n-\n-* Java indent is 4 spaces\n-* Line width is no more than 120 characters\n-* The rest is left to Java coding standards\n-* Disable &ldquo;auto-format on save&rdquo; to prevent unnecessary format changes. This makes reviews much harder as it generates unnecessary formatting changes. If your IDE supports formatting only modified chunks that is fine to do.\n-* Wildcard imports (`import foo.bar.baz.*`) are forbidden and may cause the build to fail. Please attempt to tame your IDE so it doesn't make them and please send a PR against this document with instructions for your IDE if it doesn't contain them.\n-* Don't worry too much about import order. Try not to change it but don't worry about fighting your IDE to stop it from doing so.\n-\n-OpenJFX uses Gradle for its build. Before submitting your changes, run the test suite to make sure that nothing is broken, with:\n-\n-```sh\n-bash .\/gradlew all test\n@@ -219,5 +11,1 @@\n-\n-If you are changing anything that might possibly affect rendering, you should run a full test with robot enabled:\n-\n-```sh\n-bash .\/gradlew -PFULL_TEST=true -PUSE_ROBOT=true all test\n+Backport LONG-COMMIT-HASH\n@@ -226,2 +14,1 @@\n-Even more documentation on OpenJFX projects and its build system can be found on the\n-[OpenJFX Wiki](https:\/\/wiki.openjdk.java.net\/display\/OpenJFX\/).\n+where `LONG-COMMIT-HASH` is the long (40 char) commit hash of the fix as found in the main jfx repo. The Skara tooling will then note that it is a backport, and replace the title with the correct issue title.\n","filename":"CONTRIBUTING.md","additions":7,"deletions":220,"binary":false,"changes":227,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# OpenJFX\n+# OpenJFX 17 Updates\n@@ -3,15 +3,1 @@\n-OpenJFX is an open source, next generation client application platform for desktop, mobile and embedded systems based on JavaSE. It is a collaborative effort by many individuals and companies with the goal of producing a modern, efficient, and fully featured toolkit for developing rich client applications. This is the open source project where we develop JavaFX.\n-\n-OpenJFX is free software, licensed under [GPL v2 with the Classpath exception](LICENSE), just like the JDK. Anybody is welcome to contribute to this project, port it to other platforms or devices, or do anything else that a free software license allows you to do!\n-\n-OpenJFX is a project under the charter of the OpenJDK. The [OpenJDK Bylaws](https:\/\/openjdk.java.net\/bylaws) and [License](LICENSE) govern our work. The OpenJFX project membership can be found on the [OpenJDK Census](https:\/\/openjdk.java.net\/census#openjfx). We welcome patches and involvement from individual contributors or companies. If this is your first time contributing to an OpenJDK project, you will need to review the rules on [becoming a Contributor](https:\/\/openjdk.java.net\/bylaws#contributor), and sign the [Oracle Contributor Agreement](https:\/\/www.oracle.com\/technetwork\/community\/oca-486395.html) (OCA).\n-\n-## Issue tracking\n-\n-If you think you have found a bug in OpenJFX, first make sure that you are testing against the latest version - your issue may already have been fixed. If not, search our [issues list](https:\/\/bugs.openjdk.java.net) in the Java Bug System (JBS) in case a similar issue has already been opened. More information on where and how to report a bug can be found at [bugreport.java.com](https:\/\/bugreport.java.com\/).\n-\n-## Getting Started\n-\n-For instructions on building JavaFX, see the [Building OpenJFX](https:\/\/wiki.openjdk.java.net\/display\/OpenJFX\/Building+OpenJFX) Wiki page.\n-\n-For information about downloading and using JavaFX, see the [JavaFX community site](https:\/\/openjfx.io\/).\n+This repository has the source code for OpenJFX 17 Update Releases. The main repository for OpenJFX development is [https:\/\/github.com\/openjdk\/jfx](https:\/\/github.com\/openjdk\/jfx).\n@@ -22,1 +8,1 @@\n-Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.\n+Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on submitting backport pull requests to OpenJFX 17. If you are looking to contribute to OpenJFX, please visit [openjdk\/jfx](https:\/\/github.com\/openjdk\/jfx) instead.\n","filename":"README.md","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"}]}