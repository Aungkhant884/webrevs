{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-    private Map<TableColumnBase, CheckMenuItem> columnMenuItems = new HashMap<TableColumnBase, CheckMenuItem>();\n+    private Map<TableColumnBase, CheckMenuItem> columnMenuItems;\n@@ -213,6 +213,0 @@\n-        \/\/ popup menu for hiding\/showing columns\n-        columnPopupMenu = new ContextMenu();\n-        updateTableColumnListeners(TableSkinUtils.getColumns(tableSkin), Collections.<TableColumnBase<?,?>>emptyList());\n-        TableSkinUtils.getVisibleLeafColumns(skin).addListener(weakTableColumnsListener);\n-        TableSkinUtils.getColumns(tableSkin).addListener(weakTableColumnsListener);\n-\n@@ -267,0 +261,8 @@\n+            if (columnPopupMenu == null) {\n+                columnPopupMenu = new ContextMenu();\n+                columnMenuItems = new HashMap<>();\n+\n+                TableSkinUtils.getVisibleLeafColumns(skin).addListener(weakTableColumnsListener);\n+                TableSkinUtils.getColumns(tableSkin).addListener(weakTableColumnsListener);\n+                updateTableColumnListeners(TableSkinUtils.getColumns(tableSkin), List.of());\n+            }\n@@ -699,0 +701,8 @@\n+    \/\/ testing only\n+    Pane getCornerRegion() {\n+        return cornerRegion;\n+    }\n+\n+    ContextMenu getColumnPopupMenu() {\n+        return columnPopupMenu;\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableHeaderRow.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023 Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.layout.Pane;\n@@ -35,0 +37,7 @@\n+    public static ContextMenu getColumnPopupMenu(TableHeaderRow tableHeaderRow) {\n+        return tableHeaderRow.getColumnPopupMenu();\n+    }\n+\n+    public static Pane getCornerRegion(TableHeaderRow tableHeaderRow) {\n+        return tableHeaderRow.getCornerRegion();\n+    }\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/skin\/TableHeaderRowShim.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,207 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.scene.control.CheckMenuItem;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.skin.TableHeaderRow;\n+import javafx.scene.control.skin.TableHeaderRowShim;\n+import javafx.scene.layout.Pane;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/**\n+ * Tests for the {@link TableHeaderRow} of a {@link TableView}.\n+ *\/\n+public class TableViewTableHeaderRowTest {\n+\n+    private TableView<String> tableView;\n+    private TableHeaderRow tableHeaderRow;\n+    private Pane cornerRegion;\n+\n+    private StageLoader stageLoader;\n+\n+    @BeforeEach\n+    void setup() {\n+        tableView = new TableView<>();\n+        tableView.setTableMenuButtonVisible(true);\n+\n+        for (int index = 0; index < 10; index++) {\n+            tableView.getColumns().addAll(new TableColumn<String, String>(\"Column\" + index));\n+        }\n+\n+        stageLoader = new StageLoader(tableView);\n+\n+        tableHeaderRow = VirtualFlowTestUtils.getTableHeaderRow(tableView);\n+        cornerRegion = TableHeaderRowShim.getCornerRegion(tableHeaderRow);\n+    }\n+\n+    @AfterEach\n+    void cleanup() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n+    @Test\n+    void testTableMenuButtonVisibility() {\n+        assertTrue(cornerRegion.isVisible());\n+\n+        tableView.setTableMenuButtonVisible(false);\n+\n+        assertFalse(cornerRegion.isVisible());\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuInitializing() {\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+        assertNull(columnPopupMenu);\n+\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+        assertNotNull(columnPopupMenu);\n+\n+        assertEquals(tableView.getColumns().size(), columnPopupMenu.getItems().size());\n+\n+        for (int index = 0; index < 10; index++) {\n+            String columnText = tableView.getColumns().get(index).getText();\n+            String columnPopupItemText = columnPopupMenu.getItems().get(index).getText();\n+            assertEquals(columnText, columnPopupItemText);\n+        }\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnTextChanged() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        TableColumn<String, ?> firstColumn = tableView.getColumns().get(0);\n+        MenuItem firstMenuItem = columnPopupMenu.getItems().get(0);\n+        assertEquals(firstColumn.getText(), firstMenuItem.getText());\n+\n+        String newColumnText = \"MyNewColumnText\";\n+        assertNotEquals(newColumnText, firstMenuItem.getText());\n+\n+        firstColumn.setText(newColumnText);\n+        assertEquals(newColumnText, firstMenuItem.getText());\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnVisibility() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        TableColumn<String, ?> firstColumn = tableView.getColumns().get(0);\n+        CheckMenuItem firstMenuItem = (CheckMenuItem) columnPopupMenu.getItems().get(0);\n+        assertEquals(firstColumn.isVisible(), firstMenuItem.isSelected());\n+        assertTrue(firstMenuItem.isSelected());\n+\n+        firstColumn.setVisible(false);\n+\n+        assertEquals(firstColumn.isVisible(), firstMenuItem.isSelected());\n+        assertFalse(firstMenuItem.isSelected());\n+\n+        firstMenuItem.setSelected(true);\n+\n+        assertEquals(firstColumn.isVisible(), firstMenuItem.isSelected());\n+        assertTrue(firstColumn.isVisible());\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnVisibilityBound() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        TableColumn<String, ?> firstColumn = tableView.getColumns().get(0);\n+        MenuItem firstMenuItem = columnPopupMenu.getItems().get(0);\n+        assertFalse(firstMenuItem.isDisable());\n+\n+        SimpleBooleanProperty visibilityBinding = new SimpleBooleanProperty(false);\n+        firstColumn.visibleProperty().bind(visibilityBinding);\n+\n+        \/\/ Add a column to trigger the column popup menu rebuild.\n+        tableView.getColumns().add(new TableColumn<>(\"new\"));\n+\n+        firstMenuItem = columnPopupMenu.getItems().get(0);\n+        assertTrue(firstMenuItem.isDisable());\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnsAdded() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        int itemSize = columnPopupMenu.getItems().size();\n+        assertEquals(tableView.getColumns().size(), columnPopupMenu.getItems().size());\n+\n+        tableView.getColumns().addAll(new TableColumn<>(\"new1\"), new TableColumn<>(\"new2\"), new TableColumn<>(\"new3\"));\n+\n+        assertEquals(tableView.getColumns().size(), columnPopupMenu.getItems().size());\n+        assertTrue(columnPopupMenu.getItems().size() > itemSize);\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnsRemoved() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        int itemSize = columnPopupMenu.getItems().size();\n+        assertEquals(tableView.getColumns().size(), columnPopupMenu.getItems().size());\n+\n+        tableView.getColumns().remove(tableView.getColumns().size() - 3, tableView.getColumns().size());\n+\n+        assertEquals(tableView.getColumns().size(), columnPopupMenu.getItems().size());\n+        assertTrue(columnPopupMenu.getItems().size() < itemSize);\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableViewTableHeaderRowTest.java","additions":207,"deletions":0,"binary":false,"changes":207,"status":"added"},{"patch":"@@ -0,0 +1,208 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.scene.control.CheckMenuItem;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.skin.TableHeaderRow;\n+import javafx.scene.control.skin.TableHeaderRowShim;\n+import javafx.scene.layout.Pane;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/**\n+ * Tests for the {@link TableHeaderRow} of a {@link TreeTableView}.\n+ *\/\n+public class TreeTableViewTableHeaderRowTest {\n+\n+    private TreeTableView<String> treeTableView;\n+    private TableHeaderRow tableHeaderRow;\n+    private Pane cornerRegion;\n+\n+    private StageLoader stageLoader;\n+\n+    @BeforeEach\n+    void setup() {\n+        treeTableView = new TreeTableView<>();\n+        treeTableView.setTableMenuButtonVisible(true);\n+\n+        for (int index = 0; index < 10; index++) {\n+            treeTableView.getColumns().addAll(new TreeTableColumn<String, String>(\"Column\" + index));\n+        }\n+\n+        stageLoader = new StageLoader(treeTableView);\n+\n+        tableHeaderRow = VirtualFlowTestUtils.getTableHeaderRow(treeTableView);\n+        cornerRegion = TableHeaderRowShim.getCornerRegion(tableHeaderRow);\n+    }\n+\n+    @AfterEach\n+    void cleanup() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n+    @Test\n+    void testTableMenuButtonVisibility() {\n+        assertTrue(cornerRegion.isVisible());\n+\n+        treeTableView.setTableMenuButtonVisible(false);\n+\n+        assertFalse(cornerRegion.isVisible());\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuInitializing() {\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+        assertNull(columnPopupMenu);\n+\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+        assertNotNull(columnPopupMenu);\n+\n+        assertEquals(treeTableView.getColumns().size(), columnPopupMenu.getItems().size());\n+\n+        for (int index = 0; index < 10; index++) {\n+            String columnText = treeTableView.getColumns().get(index).getText();\n+            String columnPopupItemText = columnPopupMenu.getItems().get(index).getText();\n+            assertEquals(columnText, columnPopupItemText);\n+        }\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnTextChanged() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        TreeTableColumn<String, ?> firstColumn = treeTableView.getColumns().get(0);\n+        MenuItem firstMenuItem = columnPopupMenu.getItems().get(0);\n+        assertEquals(firstColumn.getText(), firstMenuItem.getText());\n+\n+        String newColumnText = \"MyNewColumnText\";\n+        assertNotEquals(newColumnText, firstMenuItem.getText());\n+\n+        firstColumn.setText(newColumnText);\n+        assertEquals(newColumnText, firstMenuItem.getText());\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnVisibility() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        TreeTableColumn<String, ?> firstColumn = treeTableView.getColumns().get(0);\n+        CheckMenuItem firstMenuItem = (CheckMenuItem) columnPopupMenu.getItems().get(0);\n+        assertEquals(firstColumn.isVisible(), firstMenuItem.isSelected());\n+        assertTrue(firstMenuItem.isSelected());\n+\n+        firstColumn.setVisible(false);\n+\n+        assertEquals(firstColumn.isVisible(), firstMenuItem.isSelected());\n+        assertFalse(firstMenuItem.isSelected());\n+\n+        firstMenuItem.setSelected(true);\n+\n+        assertEquals(firstColumn.isVisible(), firstMenuItem.isSelected());\n+        assertTrue(firstColumn.isVisible());\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnVisibilityBound() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        TreeTableColumn<String, ?> firstColumn = treeTableView.getColumns().get(0);\n+        MenuItem firstMenuItem = columnPopupMenu.getItems().get(0);\n+        assertFalse(firstMenuItem.isDisable());\n+\n+        SimpleBooleanProperty visibilityBinding = new SimpleBooleanProperty(false);\n+        firstColumn.visibleProperty().bind(visibilityBinding);\n+\n+        \/\/ Add a column to trigger the column popup menu rebuild.\n+        treeTableView.getColumns().add(new TreeTableColumn<>(\"new\"));\n+\n+        firstMenuItem = columnPopupMenu.getItems().get(0);\n+        assertTrue(firstMenuItem.isDisable());\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnsAdded() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        int itemSize = columnPopupMenu.getItems().size();\n+        assertEquals(treeTableView.getColumns().size(), columnPopupMenu.getItems().size());\n+\n+        treeTableView.getColumns().addAll(new TreeTableColumn<>(\"new1\"), new TreeTableColumn<>(\"new2\"),\n+                new TreeTableColumn<>(\"new3\"));\n+\n+        assertEquals(treeTableView.getColumns().size(), columnPopupMenu.getItems().size());\n+        assertTrue(columnPopupMenu.getItems().size() > itemSize);\n+    }\n+\n+    @Test\n+    void testColumnPopupMenuColumnsRemoved() {\n+        MouseEventFirer mouseEventFirer = new MouseEventFirer(cornerRegion);\n+        mouseEventFirer.fireMousePressed();\n+\n+        ContextMenu columnPopupMenu = TableHeaderRowShim.getColumnPopupMenu(tableHeaderRow);\n+\n+        int itemSize = columnPopupMenu.getItems().size();\n+        assertEquals(treeTableView.getColumns().size(), columnPopupMenu.getItems().size());\n+\n+        treeTableView.getColumns().remove(treeTableView.getColumns().size() - 3, treeTableView.getColumns().size());\n+\n+        assertEquals(treeTableView.getColumns().size(), columnPopupMenu.getItems().size());\n+        assertTrue(columnPopupMenu.getItems().size() < itemSize);\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableViewTableHeaderRowTest.java","additions":208,"deletions":0,"binary":false,"changes":208,"status":"added"}]}