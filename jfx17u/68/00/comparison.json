{"files":[{"patch":"@@ -220,0 +220,15 @@\n+\n+    public static <S> int getIndexOfChildWithDescendant(TreeItem<S> parent, TreeItem<S> item) {\n+        if (item == null || parent == null) {\n+            return -1;\n+        }\n+        TreeItem<S> child = item, ancestor = item.getParent();\n+        while (ancestor != null) {\n+            if (ancestor == parent) {\n+                return parent.getChildren().indexOf(child);\n+            }\n+            child = ancestor;\n+            ancestor = child.getParent();\n+        }\n+        return -1;\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2632,3 +2632,0 @@\n-                        \/\/ shuffle selection by the number of removed items\n-                        shift += treeItem.isExpanded() ? -removedSize : 0;\n-\n@@ -2650,0 +2647,13 @@\n+                        \/\/ shuffle selection by the number of removed items\n+                        \/\/ only if removed items are before the current selection.\n+                        if (treeItem.isExpanded()) {\n+                            int lastSelectedSiblingIndex = selectedItems.stream()\n+                                    .map(item -> ControlUtils.getIndexOfChildWithDescendant(treeItem, item))\n+                                    .max(Comparator.naturalOrder())\n+                                    .orElse(-1);\n+                            \/\/ shift only if the last selected sibling index is after the first removed child\n+                            if (e.getFrom() <= lastSelectedSiblingIndex || lastSelectedSiblingIndex == -1) {\n+                                shift -= removedSize;\n+                            }\n+                        }\n+\n@@ -3505,3 +3515,6 @@\n-                        if (row <= getFocusedIndex()) {\n-                            \/\/ shuffle selection by the number of removed items\n-                            shift += e.getTreeItem().isExpanded() ? -e.getRemovedSize() : 0;\n+                        if (e.getTreeItem().isExpanded()) {\n+                            int focusedSiblingRow = ControlUtils.getIndexOfChildWithDescendant(e.getTreeItem(), getFocusedItem());\n+                            if (e.getFrom() <= focusedSiblingRow) {\n+                                \/\/ shuffle selection by the number of removed items\n+                                shift -= e.getRemovedSize();\n+                            }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+import java.util.Comparator;\n@@ -1410,3 +1411,0 @@\n-                    \/\/ shuffle selection by the number of removed items\n-                    shift += treeItem.isExpanded() ? -removedSize : 0;\n-\n@@ -1429,0 +1427,13 @@\n+                    \/\/ shuffle selection by the number of removed items\n+                    \/\/ only if removed items are before the current selection.\n+                    if (treeItem.isExpanded()) {\n+                        int lastSelectedSiblingIndex = selectedItems.stream()\n+                                .map(item -> ControlUtils.getIndexOfChildWithDescendant(treeItem, item))\n+                                .max(Comparator.naturalOrder())\n+                                .orElse(-1);\n+                        \/\/ shift only if the last selected sibling index is after the first removed child\n+                        if (e.getFrom() <= lastSelectedSiblingIndex || lastSelectedSiblingIndex == -1) {\n+                            shift -= removedSize;\n+                        }\n+                    }\n+\n@@ -1689,3 +1700,6 @@\n-                        if (row <= getFocusedIndex()) {\n-                            \/\/ shuffle selection by the number of removed items\n-                            shift += e.getTreeItem().isExpanded() ? -e.getRemovedSize() : 0;\n+                        if (e.getTreeItem().isExpanded()) {\n+                            int focusedSiblingRow = ControlUtils.getIndexOfChildWithDescendant(e.getTreeItem(), getFocusedItem());\n+                            if (e.getFrom() <= focusedSiblingRow) {\n+                                \/\/ shuffle selection by the number of removed items\n+                                shift -= e.getRemovedSize();\n+                            }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeView.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import javafx.scene.control.SelectionModel;\n@@ -1571,1 +1572,0 @@\n-    @Ignore(\"Bug hasn't been fixed yet\")\n@@ -1587,2 +1587,0 @@\n-        assertTrue(itSupport.isLeaf());\n-        assertTrue(!itSupport.isExpanded());\n@@ -6718,0 +6716,68 @@\n+    \/\/ JDK-8187596\n+    @Test\n+    public void testRemoveTreeItemShiftSelection() {\n+        TreeItem<String> a, b, a1, a2, a3;\n+        TreeItem<String> root = new TreeItem<>(\"root\");\n+        root.getChildren().addAll(\n+                a = new TreeItem<>(\"a\"),\n+                b = new TreeItem<>(\"b\")\n+        );\n+        root.setExpanded(true);\n+\n+        a.getChildren().addAll(\n+                a1 = new TreeItem<>(\"a1\"),\n+                a2 = new TreeItem<>(\"a2\"),\n+                a3 = new TreeItem<>(\"a3\")\n+        );\n+        a.setExpanded(true);\n+\n+        TreeTableView<String> stringTreeTableView = new TreeTableView<>(root);\n+        TreeTableColumn<String, String> column = new TreeTableColumn<>(\"Nodes\");\n+        column.setCellValueFactory(p -> new ReadOnlyStringWrapper(p.getValue().getValue()));\n+        column.setPrefWidth(200);\n+        stringTreeTableView.getColumns().add(column);\n+\n+        stringTreeTableView.setShowRoot(false);\n+        SelectionModel sm = stringTreeTableView.getSelectionModel();\n+\n+        sm.clearAndSelect(3); \/\/select a3\n+        assertEquals(a3, sm.getSelectedItem()); \/\/verify\n+        root.getChildren().remove(b); \/\/remove b\n+        \/\/a3 should remain selected\n+        assertEquals(3, sm.getSelectedIndex());\n+        assertEquals(a3, sm.getSelectedItem());\n+    }\n+\n+    \/\/ JDK-8193442\n+    @Test\n+    public void testRemoveTreeItemChangesSelectedItem() {\n+        TreeItem<String> rootNode = new TreeItem<>(\"Root\");\n+        rootNode.setExpanded(true);\n+        for (int i = 0; i < 3; i++) {\n+            rootNode.getChildren().add(new TreeItem<>(\"Node \" + i));\n+        }\n+        for (int i = 0; i < 2; i++) {\n+            TreeItem<String> node = rootNode.getChildren().get(i);\n+            node.setExpanded(true);\n+            for (int j = 0; j < 2; j++) {\n+                node.getChildren().add(new TreeItem<>(\"Sub Node \" + i + \"-\" + j));\n+            }\n+        }\n+\n+        TreeTableColumn<String, String> column = new TreeTableColumn<>(\"Nodes\");\n+        column.setCellValueFactory(p -> new ReadOnlyStringWrapper(p.getValue().getValue()));\n+        column.setPrefWidth(200);\n+\n+        TreeTableView<String> table = new TreeTableView<>(rootNode);\n+        table.getColumns().add(column);\n+\n+        int selectIndex = 4; \/\/ select \"Node 1\"\n+        int removeIndex = 2; \/\/ remove \"Node 2\"\n+        table.getSelectionModel().select(selectIndex);\n+        assertEquals(4, table.getSelectionModel().getSelectedIndex());\n+        assertEquals(\"Node 1\", table.getSelectionModel().getSelectedItem().getValue());\n+        table.getRoot().getChildren().remove(removeIndex);\n+        assertEquals(4, table.getSelectionModel().getSelectedIndex());\n+        assertEquals(\"Node 1\", table.getSelectionModel().getSelectedItem().getValue());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":69,"deletions":3,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -633,1 +633,0 @@\n-    @Ignore(\"Bug hasn't been fixed yet\")\n@@ -649,2 +648,0 @@\n-        assertTrue(itSupport.isLeaf());\n-        assertTrue(!itSupport.isExpanded());\n@@ -3780,0 +3777,58 @@\n+    \/\/ JDK-8187596\n+    @Test\n+    public void testRemoveTreeItemShiftSelection() {\n+        TreeItem<String> a, b, a1, a2, a3;\n+        TreeItem<String> root = new TreeItem<>(\"root\");\n+        root.getChildren().addAll(\n+                a = new TreeItem<>(\"a\"),\n+                b = new TreeItem<>(\"b\")\n+        );\n+        root.setExpanded(true);\n+\n+        a.getChildren().addAll(\n+                a1 = new TreeItem<>(\"a1\"),\n+                a2 = new TreeItem<>(\"a2\"),\n+                a3 = new TreeItem<>(\"a3\")\n+        );\n+        a.setExpanded(true);\n+\n+        TreeView<String> stringTreeView = new TreeView<>(root);\n+        stringTreeView.setShowRoot(false);\n+        SelectionModel sm = stringTreeView.getSelectionModel();\n+\n+        sm.clearAndSelect(3); \/\/select a3\n+        assertEquals(a3, sm.getSelectedItem()); \/\/verify\n+        root.getChildren().remove(b); \/\/remove b\n+        \/\/a3 should remain selected\n+        assertEquals(3, sm.getSelectedIndex());\n+        assertEquals(a3, sm.getSelectedItem());\n+    }\n+\n+    \/\/ JDK-8193442\n+    @Test\n+    public void testRemoveTreeItemChangesSelectedItem() {\n+        TreeItem<String> rootNode = new TreeItem<>(\"Root\");\n+        rootNode.setExpanded(true);\n+        for (int i = 0; i < 3; i++) {\n+            rootNode.getChildren().add(new TreeItem<>(\"Node \" + i));\n+        }\n+        for (int i = 0; i < 2; i++) {\n+            TreeItem<String> node = rootNode.getChildren().get(i);\n+            node.setExpanded(true);\n+            for (int j = 0; j < 2; j++) {\n+                node.getChildren().add(new TreeItem<>(\"Sub Node \" + i + \"-\" + j));\n+            }\n+        }\n+\n+        TreeView<String> table = new TreeView<>(rootNode);\n+\n+        int selectIndex = 4; \/\/ select \"Node 1\"\n+        int removeIndex = 2; \/\/ remove \"Node 2\"\n+        table.getSelectionModel().select(selectIndex);\n+        assertEquals(4, table.getSelectionModel().getSelectedIndex());\n+        assertEquals(\"Node 1\", table.getSelectionModel().getSelectedItem().getValue());\n+        table.getRoot().getChildren().remove(removeIndex);\n+        assertEquals(4, table.getSelectionModel().getSelectedIndex());\n+        assertEquals(\"Node 1\", table.getSelectionModel().getSelectedItem().getValue());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewTest.java","additions":58,"deletions":3,"binary":false,"changes":61,"status":"modified"}]}