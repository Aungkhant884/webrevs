{"files":[{"patch":"@@ -121,0 +121,1 @@\n+    legalizeMemoryOffsets(procedure);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3Generate.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2015-2020 Apple Inc. All rights reserved.\n+ * Copyright (C) 2015-2022 Apple Inc. All rights reserved.\n@@ -391,0 +391,55 @@\n+    template<typename T>\n+    IntRange sExt()\n+    {\n+        ASSERT(m_min >= INT32_MIN);\n+        ASSERT(m_max <= INT32_MAX);\n+        int64_t typeMin = std::numeric_limits<T>::min();\n+        int64_t typeMax = std::numeric_limits<T>::max();\n+        auto min = m_min;\n+        auto max = m_max;\n+\n+        if (typeMin <= min && min <= typeMax\n+            && typeMin <= max && max <= typeMax)\n+            return IntRange(min, max);\n+\n+        \/\/ Given type T with N bits, signed extension will turn bit N-1 as\n+        \/\/ a sign bit. If bits N-1 upwards are identical for both min and max,\n+        \/\/ then we're guaranteed that even after the sign extension, min and\n+        \/\/ max will still be in increasing order.\n+        \/\/\n+        \/\/ For example, when T is int8_t, the space of numbers from highest to\n+        \/\/ lowest are as follows (in binary bits):\n+        \/\/\n+        \/\/      highest     0 111 1111  ^\n+        \/\/                    ...       |\n+        \/\/            1     0 000 0001  |   top segment\n+        \/\/            0     0 000 0000  v\n+        \/\/\n+        \/\/           -1     1 111 1111  ^\n+        \/\/           -2     1 111 1110  |   bottom segment\n+        \/\/                    ...       |\n+        \/\/       lowest     1 000 0000  v\n+        \/\/\n+        \/\/ Note that if we exclude the sign bit, the range is made up of 2 segments\n+        \/\/ of contiguous increasing numbers. If min and max are both in the same\n+        \/\/ segment before the sign extension, then min and max will continue to be\n+        \/\/ in a contiguous segment after the sign extension. Only when min and max\n+        \/\/ spans across more than 1 of these segments, will min and max no longer\n+        \/\/ be guaranteed to be in a contiguous range after the sign extension.\n+        \/\/\n+        \/\/ Hence, we can check if bits N-1 and up are identical for the range min\n+        \/\/ and max. If so, then the new min and max can be be computed by simply\n+        \/\/ applying sign extension to their original values.\n+\n+        constexpr unsigned numberOfBits = countOfBits<T>;\n+        constexpr int64_t segmentMask = (1ll << (numberOfBits - 1)) - 1;\n+        constexpr int64_t topBitsMask = ~segmentMask;\n+        int64_t minTopBits = topBitsMask & min;\n+        int64_t maxTopBits = topBitsMask & max;\n+\n+        if (minTopBits == maxTopBits)\n+            return IntRange(static_cast<int64_t>(static_cast<T>(min)), static_cast<int64_t>(static_cast<T>(max)));\n+\n+        return top<T>();\n+    }\n+\n@@ -2768,0 +2823,1 @@\n+            return rangeFor(value->child(0), timeToLive - 1).sExt<int8_t>();\n@@ -2769,0 +2825,1 @@\n+            return rangeFor(value->child(0), timeToLive - 1).sExt<int16_t>();\n@@ -2770,1 +2827,1 @@\n-            return rangeFor(value->child(0), timeToLive - 1);\n+            return rangeFor(value->child(0), timeToLive - 1).sExt<int32_t>();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3ReduceStrength.cpp","additions":59,"deletions":2,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -558,0 +558,1 @@\n+void testMoveConstantsWithLargeOffsets();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/testb3.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -763,0 +763,1 @@\n+    RUN(testMoveConstantsWithLargeOffsets());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/testb3_1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2842,0 +2842,26 @@\n+extern \"C\" {\n+static JSC_DECLARE_JIT_OPERATION_WITHOUT_WTF_INTERNAL(testMoveConstantsWithLargeOffsetsFunc, double, (double));\n+}\n+JSC_DEFINE_JIT_OPERATION(testMoveConstantsWithLargeOffsetsFunc, double, (double a))\n+{\n+    return a;\n+}\n+\n+void testMoveConstantsWithLargeOffsets()\n+{\n+    Procedure proc;\n+    BasicBlock* root = proc.addBlock();\n+    Value* result = root->appendNew<ConstDoubleValue>(proc, Origin(), 0);\n+    double rhs = 0;\n+    for (size_t i = 0; i < 4100; i++) {\n+        rhs += i;\n+        Value* callResult = root->appendNew<CCallValue>(proc, Double, Origin(),\n+            root->appendNew<ConstPtrValue>(proc, Origin(), tagCFunction<OperationPtrTag>(testMoveConstantsWithLargeOffsetsFunc)),\n+            root->appendNew<ConstDoubleValue>(proc, Origin(), i));\n+        result = root->appendNew<Value>(proc, Add, Origin(), result, callResult);\n+    }\n+    root->appendNewControlValue(proc, Return, Origin(), result);\n+\n+    CHECK_EQ(compileAndRun<double>(proc), rhs);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/testb3_6.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -4697,0 +4697,4 @@\n+\n+        if (generator.shouldBeConcernedWithCompletionValue())\n+            generator.emitLoad(tryCatchDst.get(), jsUndefined());\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecompiler\/NodesCodegen.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4977,1 +4977,2 @@\n-        m_jit.load32(MacroAssembler::Address(mapGPR, HashMapImpl<HashMapBucket<HashMapBucketDataKey>>::offsetOfCapacity()), maskGPR);\n+        CCallHelpers::JumpList notPresentInTable;\n+\n@@ -4979,0 +4980,2 @@\n+        notPresentInTable.append(m_jit.branchTestPtr(CCallHelpers::Zero, bufferGPR));\n+        m_jit.load32(MacroAssembler::Address(mapGPR, HashMapImpl<HashMapBucket<HashMapBucketDataKey>>::offsetOfCapacity()), maskGPR);\n@@ -4990,2 +4993,2 @@\n-        auto notPresentInTable = m_jit.branchPtr(MacroAssembler::Equal,\n-            bucketGPR, TrustedImmPtr(bitwise_cast<size_t>(HashMapImpl<HashMapBucket<HashMapBucketDataKey>>::emptyValue())));\n+        notPresentInTable.append(m_jit.branchPtr(MacroAssembler::Equal,\n+            bucketGPR, TrustedImmPtr(bitwise_cast<size_t>(HashMapImpl<HashMapBucket<HashMapBucketDataKey>>::emptyValue()))));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGSpeculativeJIT64.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -12325,0 +12325,1 @@\n+        LBasicBlock indexSetUp = m_out.newBlock();\n@@ -12333,2 +12334,0 @@\n-        LBasicBlock lastNext = m_out.insertNewBlocksBefore(loopStart);\n-\n@@ -12350,1 +12349,0 @@\n-        LValue mask = m_out.sub(m_out.load32(map, m_heaps.HashMapImpl_capacity), m_out.int32One);\n@@ -12352,0 +12350,4 @@\n+        m_out.branch(m_out.isNull(buffer), unsure(notPresentInTable), unsure(indexSetUp));\n+\n+        LBasicBlock lastNext = m_out.appendTo(indexSetUp, loopStart);\n+        LValue mask = m_out.sub(m_out.load32(map, m_heaps.HashMapImpl_capacity), m_out.int32One);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/ftl\/FTLLowerDFGToB3.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+                std::optional<String> autoconfigURL;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/inspector\/remote\/RemoteInspector.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -54,3 +54,0 @@\n-    DeferTerminationForAWhile deferScope(vm);\n-    auto scope = DECLARE_CATCH_SCOPE(vm);\n-\n@@ -65,2 +62,1 @@\n-    JSMap* map = JSMap::create(globalObject, vm, globalObject->mapStructure());\n-    scope.releaseAssertNoException();\n+    JSMap* map = JSMap::create(vm, globalObject->mapStructure());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/AbstractModuleRecord.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-    static HashMapBuffer* create(JSGlobalObject* globalObject, VM& vm, JSCell*, uint32_t capacity)\n+    static HashMapBuffer* tryCreate(JSGlobalObject* globalObject, VM& vm, uint32_t capacity)\n@@ -242,1 +242,1 @@\n-ALWAYS_INLINE uint32_t shouldRehashAfterAdd(uint32_t capacity, uint32_t keyCount, uint32_t deleteCount);\n+ALWAYS_INLINE uint32_t shouldRehash(uint32_t capacity, uint32_t keyCount, uint32_t deleteCount);\n@@ -259,3 +259,0 @@\n-        , m_keyCount(0)\n-        , m_deleteCount(0)\n-        , m_capacity(4)\n@@ -265,10 +262,0 @@\n-    HashMapImpl(VM& vm, Structure* structure, uint32_t sizeHint)\n-        : Base(vm, structure)\n-        , m_keyCount(0)\n-        , m_deleteCount(0)\n-    {\n-        uint32_t capacity = (Checked<uint32_t>(sizeHint) * 2) + 1;\n-        capacity = std::max<uint32_t>(WTF::roundUpToPowerOfTwo(capacity), 4U);\n-        m_capacity = capacity;\n-    }\n-\n@@ -280,1 +267,1 @@\n-    void finishCreation(JSGlobalObject*, VM&);\n+    void finishCreation(VM&);\n@@ -323,1 +310,1 @@\n-    ALWAYS_INLINE void clear(JSGlobalObject*);\n+    ALWAYS_INLINE void clear(VM&);\n@@ -358,5 +345,0 @@\n-    ALWAYS_INLINE uint32_t shouldRehashAfterAdd() const\n-    {\n-        return JSC::shouldRehashAfterAdd(m_capacity, m_keyCount, m_deleteCount);\n-    }\n-\n@@ -368,1 +350,1 @@\n-    ALWAYS_INLINE void setUpHeadAndTail(JSGlobalObject*, VM&);\n+    ALWAYS_INLINE void setUpHeadAndTail(VM&);\n@@ -371,0 +353,1 @@\n+    ALWAYS_INLINE HashMapBucketType* addNormalizedNonExistingForCloningInternal(JSGlobalObject*, JSValue key, JSValue, uint32_t hash);\n@@ -376,1 +359,1 @@\n-    ALWAYS_INLINE HashMapBucketType* addNormalizedInternal(VM&, JSValue key, JSValue, uint32_t hash, const CanUseBucket&);\n+    ALWAYS_INLINE HashMapBucketType* addNormalizedInternal(JSGlobalObject*, JSValue key, JSValue, uint32_t hash, const CanUseBucket&);\n@@ -380,1 +363,2 @@\n-    void rehash(JSGlobalObject*);\n+    enum class RehashMode { BeforeAddition, AfterRemoval };\n+    void rehash(JSGlobalObject*, RehashMode);\n@@ -384,1 +368,1 @@\n-    void makeAndSetNewBuffer(JSGlobalObject*, VM&);\n+    void makeAndSetNewBuffer(JSGlobalObject*, uint32_t newCapacity, VM&);\n@@ -386,1 +370,1 @@\n-    ALWAYS_INLINE void assertBufferIsEmpty() const;\n+    ALWAYS_INLINE static void assertBufferIsEmpty(HashMapBucketType**, uint32_t capacity);\n@@ -391,3 +375,3 @@\n-    uint32_t m_keyCount;\n-    uint32_t m_deleteCount;\n-    uint32_t m_capacity;\n+    uint32_t m_keyCount { 0 };\n+    uint32_t m_deleteCount { 0 };\n+    uint32_t m_capacity { 0 };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/HashMapImpl.h","additions":14,"deletions":30,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -140,0 +140,2 @@\n+static constexpr uint32_t hashMapInitialCapacity = 4;\n+\n@@ -142,1 +144,1 @@\n-    return 8 * keyCount <= capacity && capacity > 4;\n+    return 8 * keyCount <= capacity && capacity > hashMapInitialCapacity;\n@@ -145,1 +147,1 @@\n-ALWAYS_INLINE uint32_t shouldRehashAfterAdd(uint32_t capacity, uint32_t keyCount, uint32_t deleteCount)\n+ALWAYS_INLINE uint32_t shouldRehash(uint32_t capacity, uint32_t keyCount, uint32_t deleteCount)\n@@ -152,0 +154,3 @@\n+    if (!capacity)\n+        return hashMapInitialCapacity;\n+\n@@ -153,1 +158,1 @@\n-        ASSERT((capacity \/ 2) >= 4);\n+        ASSERT((capacity \/ 2) >= hashMapInitialCapacity);\n@@ -176,1 +181,1 @@\n-void HashMapImpl<HashMapBucketType>::finishCreation(JSGlobalObject* globalObject, VM& vm)\n+void HashMapImpl<HashMapBucketType>::finishCreation(VM& vm)\n@@ -179,2 +184,0 @@\n-\n-    auto scope = DECLARE_THROW_SCOPE(vm);\n@@ -182,5 +185,1 @@\n-\n-    makeAndSetNewBuffer(globalObject, vm);\n-    RETURN_IF_EXCEPTION(scope, void());\n-\n-    setUpHeadAndTail(globalObject, vm);\n+    setUpHeadAndTail(vm);\n@@ -198,3 +197,2 @@\n-    capacity = std::max<uint32_t>(WTF::roundUpToPowerOfTwo(capacity), 4U);\n-    m_capacity = capacity;\n-    makeAndSetNewBuffer(globalObject, vm);\n+    capacity = std::max<uint32_t>(WTF::roundUpToPowerOfTwo(capacity), hashMapInitialCapacity);\n+    makeAndSetNewBuffer(globalObject, capacity, vm);\n@@ -203,1 +201,1 @@\n-    setUpHeadAndTail(globalObject, vm);\n+    setUpHeadAndTail(vm);\n@@ -252,3 +250,0 @@\n-    VM& vm = getVM(globalObject);\n-    auto scope = DECLARE_THROW_SCOPE(vm);\n-\n@@ -259,4 +254,0 @@\n-    RETURN_IF_EXCEPTION(scope, void());\n-    scope.release();\n-    if (shouldRehashAfterAdd())\n-        rehash(globalObject);\n@@ -272,1 +263,1 @@\n-    auto* bucket = addNormalizedInternal(vm, key, value, hash, [&] (HashMapBucketType* bucket) {\n+    return addNormalizedInternal(globalObject, key, value, hash, [&] (HashMapBucketType* bucket) {\n@@ -275,3 +266,0 @@\n-    if (shouldRehashAfterAdd())\n-        rehash(globalObject);\n-    return bucket;\n@@ -300,1 +288,1 @@\n-        rehash(globalObject);\n+        rehash(globalObject, RehashMode::AfterRemoval);\n@@ -306,1 +294,1 @@\n-ALWAYS_INLINE void HashMapImpl<HashMapBucketType>::clear(JSGlobalObject* globalObject)\n+ALWAYS_INLINE void HashMapImpl<HashMapBucketType>::clear(VM& vm)\n@@ -308,1 +296,0 @@\n-    VM& vm = getVM(globalObject);\n@@ -323,2 +310,2 @@\n-    m_capacity = 4;\n-    makeAndSetNewBuffer(globalObject, vm);\n+    m_buffer.clear();\n+    m_capacity = 0;\n@@ -329,1 +316,1 @@\n-ALWAYS_INLINE void HashMapImpl<HashMapBucketType>::setUpHeadAndTail(JSGlobalObject*, VM& vm)\n+ALWAYS_INLINE void HashMapImpl<HashMapBucketType>::setUpHeadAndTail(VM& vm)\n@@ -343,1 +330,14 @@\n-    addNormalizedInternal(globalObject, key, value, [&] (HashMapBucketType*) {\n+    VM& vm = getVM(globalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+\n+    uint32_t hash = jsMapHash(globalObject, vm, key);\n+    RETURN_IF_EXCEPTION(scope, void());\n+    scope.release();\n+\n+    addNormalizedNonExistingForCloningInternal(globalObject, key, value, hash);\n+}\n+\n+template <typename HashMapBucketType>\n+ALWAYS_INLINE HashMapBucketType* HashMapImpl<HashMapBucketType>::addNormalizedNonExistingForCloningInternal(JSGlobalObject* globalObject, JSValue key, JSValue value, uint32_t hash)\n+{\n+    return addNormalizedInternal(globalObject, key, value, hash, [&](HashMapBucketType*) {\n@@ -358,1 +358,1 @@\n-    addNormalizedInternal(vm, key, value, hash, canUseBucket);\n+    addNormalizedInternal(globalObject, key, value, hash, canUseBucket);\n@@ -363,1 +363,1 @@\n-ALWAYS_INLINE HashMapBucketType* HashMapImpl<HashMapBucketType>::addNormalizedInternal(VM& vm, JSValue key, JSValue value, uint32_t hash, const CanUseBucket& canUseBucket)\n+ALWAYS_INLINE HashMapBucketType* HashMapImpl<HashMapBucketType>::addNormalizedInternal(JSGlobalObject* globalObject, JSValue key, JSValue value, uint32_t hash, const CanUseBucket& canUseBucket)\n@@ -365,0 +365,2 @@\n+    VM& vm = getVM(globalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n@@ -367,0 +369,5 @@\n+    if (!m_capacity) {\n+        makeAndSetNewBuffer(globalObject, hashMapInitialCapacity, vm);\n+        RETURN_IF_EXCEPTION(scope, { });\n+    }\n+\n@@ -370,5 +377,9 @@\n-    HashMapBucketType* bucket = buffer[index];\n-    while (!isEmpty(bucket)) {\n-        if (canUseBucket(bucket)) {\n-            bucket->setValue(vm, value);\n-            return bucket;\n+    {\n+        HashMapBucketType* bucket = buffer[index];\n+        while (!isEmpty(bucket)) {\n+            if (canUseBucket(bucket)) {\n+                bucket->setValue(vm, value);\n+                return bucket;\n+            }\n+            index = (index + 1) & mask;\n+            bucket = buffer[index];\n@@ -376,2 +387,14 @@\n-        index = (index + 1) & mask;\n-        bucket = buffer[index];\n+    }\n+\n+    if (JSC::shouldRehash(m_capacity, m_keyCount + 1, m_deleteCount)) {\n+        rehash(globalObject, RehashMode::BeforeAddition);\n+        RETURN_IF_EXCEPTION(scope, { });\n+        \/\/ We ensure that (1) this map does not have deleted keys because of rehashing and (2) this map does not have the same key as |key| input.\n+        \/\/ Thus, we can just search for empty bucket.\n+        ASSERT(m_capacity);\n+        ASSERT(isPowerOfTwo(m_capacity));\n+        const uint32_t mask = m_capacity - 1;\n+        index = hash & mask;\n+        buffer = this->buffer();\n+        while (!isEmpty(buffer[index]))\n+            index = (index + 1) & mask;\n@@ -398,0 +421,3 @@\n+    if (!m_capacity)\n+        return nullptr;\n+\n@@ -413,1 +439,1 @@\n-void HashMapImpl<HashMapBucketType>::rehash(JSGlobalObject* globalObject)\n+void HashMapImpl<HashMapBucketType>::rehash(JSGlobalObject* globalObject, RehashMode mode)\n@@ -419,1 +445,2 @@\n-    m_capacity = nextCapacity(m_capacity, m_keyCount);\n+    uint32_t newCapacity = nextCapacity(m_capacity, m_keyCount + (mode == RehashMode::BeforeAddition ? 1 : 0));\n+    ASSERT(newCapacity);\n@@ -421,2 +448,2 @@\n-    if (m_capacity != oldCapacity) {\n-        makeAndSetNewBuffer(globalObject, vm);\n+    if (newCapacity != oldCapacity) {\n+        makeAndSetNewBuffer(globalObject, newCapacity, vm);\n@@ -425,2 +452,6 @@\n-        m_buffer->reset(m_capacity);\n-        assertBufferIsEmpty();\n+        ASSERT(newCapacity);\n+        ASSERT(oldCapacity);\n+        ASSERT(m_capacity == newCapacity);\n+        ASSERT(m_buffer);\n+        m_buffer->reset(newCapacity);\n+        assertBufferIsEmpty(buffer(), newCapacity);\n@@ -469,1 +500,1 @@\n-void HashMapImpl<HashMapBucketType>::makeAndSetNewBuffer(JSGlobalObject* globalObject, VM& vm)\n+void HashMapImpl<HashMapBucketType>::makeAndSetNewBuffer(JSGlobalObject* globalObject, uint32_t newCapacity, VM& vm)\n@@ -471,1 +502,1 @@\n-    ASSERT(!(m_capacity & (m_capacity - 1)));\n+    ASSERT(!(newCapacity & (newCapacity - 1)));\n@@ -473,1 +504,1 @@\n-    HashMapBufferType* buffer = HashMapBufferType::create(globalObject, vm, this, m_capacity);\n+    HashMapBufferType* buffer = HashMapBufferType::tryCreate(globalObject, vm, newCapacity);\n@@ -478,1 +509,2 @@\n-    assertBufferIsEmpty();\n+    m_capacity = newCapacity;\n+    assertBufferIsEmpty(this->buffer(), newCapacity);\n@@ -482,1 +514,1 @@\n-ALWAYS_INLINE void HashMapImpl<HashMapBucketType>::assertBufferIsEmpty() const\n+ALWAYS_INLINE void HashMapImpl<HashMapBucketType>::assertBufferIsEmpty(HashMapBucketType** buffer, uint32_t capacity)\n@@ -484,4 +516,6 @@\n-    if (ASSERT_ENABLED) {\n-        for (unsigned i = 0; i < m_capacity; i++)\n-            ASSERT(isEmpty(buffer()[i]));\n-    }\n+    UNUSED_PARAM(buffer);\n+    UNUSED_PARAM(capacity);\n+#if ASSERT_ENABLED\n+    for (unsigned i = 0; i < capacity; i++)\n+        ASSERT(isEmpty(buffer[i]));\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/HashMapImplInlines.h","additions":91,"deletions":57,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    static JSMap* create(JSGlobalObject* globalObject, VM& vm, Structure* structure)\n+    static JSMap* create(VM& vm, Structure* structure)\n@@ -53,1 +53,1 @@\n-        instance->finishCreation(globalObject, vm);\n+        instance->finishCreation(vm);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSMap.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -102,3 +102,0 @@\n-    DeferTerminationForAWhile deferScope(vm);\n-    auto scope = DECLARE_CATCH_SCOPE(vm);\n-\n@@ -107,2 +104,1 @@\n-    JSMap* map = JSMap::create(globalObject, vm, globalObject->mapStructure());\n-    scope.releaseAssertNoException();\n+    JSMap* map = JSMap::create(vm, globalObject->mapStructure());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSModuleLoader.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    static JSSet* create(JSGlobalObject* globalObject, VM& vm, Structure* structure)\n+    static JSSet* create(VM& vm, Structure* structure)\n@@ -52,7 +52,2 @@\n-        return create(globalObject, vm, structure, 0);\n-    }\n-\n-    static JSSet* create(JSGlobalObject* globalObject, VM& vm, Structure* structure, uint32_t size)\n-    {\n-        JSSet* instance = new (NotNull, allocateCell<JSSet>(vm)) JSSet(vm, structure, size);\n-        instance->finishCreation(globalObject, vm);\n+        JSSet* instance = new (NotNull, allocateCell<JSSet>(vm)) JSSet(vm, structure);\n+        instance->finishCreation(vm);\n@@ -71,5 +66,0 @@\n-\n-    JSSet(VM& vm, Structure* structure, uint32_t sizeHint)\n-        : Base(vm, structure, sizeHint)\n-    {\n-    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSSet.h","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        RELEASE_AND_RETURN(scope, JSValue::encode(JSMap::create(globalObject, vm, mapStructure)));\n+        return JSValue::encode(JSMap::create(vm, mapStructure));\n@@ -79,2 +79,1 @@\n-    JSMap* map = JSMap::create(globalObject, vm, mapStructure);\n-    RETURN_IF_EXCEPTION(scope, encodedJSValue());\n+    JSMap* map = JSMap::create(vm, mapStructure);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/MapConstructor.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-    map->clear(globalObject);\n+    map->clear(globalObject->vm());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/MapPrototype.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        RELEASE_AND_RETURN(scope, JSValue::encode(JSSet::create(globalObject, vm, setStructure)));\n+        return JSValue::encode(JSSet::create(vm, setStructure));\n@@ -79,2 +79,1 @@\n-    JSSet* set = JSSet::create(globalObject, vm, setStructure);\n-    RETURN_IF_EXCEPTION(scope, encodedJSValue());\n+    JSSet* set = JSSet::create(vm, setStructure);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/SetConstructor.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    set->clear(globalObject);\n+    set->clear(globalObject->vm());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/SetPrototype.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-    return JSC::shouldRehashAfterAdd(m_capacity, m_keyCount, m_deleteCount);\n+    return JSC::shouldRehash(m_capacity, m_keyCount, m_deleteCount);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/WeakMapImplInlines.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,0 +66,2 @@\n+        if (UNLIKELY(values.hasOverflowed()))\n+            throwOutOfMemoryError(globalObject, scope);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/js\/WebAssemblyExceptionConstructor.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -643,0 +643,12 @@\n+MuteCameraOnMicrophoneInterruptionEnabled:\n+  type: bool\n+  condition: ENABLE(MEDIA_STREAM)\n+  defaultValue:\n+    WebKitLegacy:\n+      default: false\n+    WebKit:\n+      \"PLATFORM(IOS_FAMILY)\": true\n+      default: false\n+    WebCore:\n+      default: false\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/Scripts\/Preferences\/WebPreferencesInternal.yaml","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-class CallbackAggregator : public ThreadSafeRefCounted<CallbackAggregator> {\n+template <DestructionThread destructionThread>\n+class CallbackAggregatorOnThread : public ThreadSafeRefCounted<CallbackAggregatorOnThread<destructionThread>, destructionThread> {\n@@ -37,1 +38,1 @@\n-    static Ref<CallbackAggregator> create(CompletionHandler<void()>&& callback) { return adoptRef(*new CallbackAggregator(WTFMove(callback))); }\n+    static auto create(CompletionHandler<void()>&& callback) { return adoptRef(*new CallbackAggregatorOnThread(WTFMove(callback))); }\n@@ -39,1 +40,1 @@\n-    ~CallbackAggregator()\n+    ~CallbackAggregatorOnThread()\n@@ -47,1 +48,1 @@\n-    explicit CallbackAggregator(CompletionHandler<void()>&& callback)\n+    explicit CallbackAggregatorOnThread(CompletionHandler<void()>&& callback)\n@@ -61,0 +62,3 @@\n+using CallbackAggregator = CallbackAggregatorOnThread<DestructionThread::Any>;\n+using MainRunLoopCallbackAggregator = CallbackAggregatorOnThread<DestructionThread::MainRunLoop>;\n+\n@@ -64,0 +68,1 @@\n+using WTF::MainRunLoopCallbackAggregator;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/CallbackAggregator.h","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -95,0 +95,24 @@\n+template<> bool isLookalikeCharacterOfScriptType<USCRIPT_CANADIAN_ABORIGINAL>(UChar32 codePoint)\n+{\n+    switch (codePoint) {\n+    case 0x146D: \/* CANADIAN SYLLABICS KI *\/\n+    case 0x146F: \/* CANADIAN SYLLABICS KO *\/\n+    case 0x1472: \/* CANADIAN SYLLABICS KA *\/\n+    case 0x14AA: \/* CANADIAN SYLLABICS MA *\/\n+    case 0x157C: \/* CANADIAN SYLLABICS NUNAVUT H *\/\n+    case 0x1587: \/* CANADIAN SYLLABICS TLHI *\/\n+    case 0x15AF: \/* CANADIAN SYLLABICS AIVILIK B *\/\n+    case 0x15B4: \/* CANADIAN SYLLABICS BLACKFOOT WE *\/\n+    case 0x15C5: \/* CANADIAN SYLLABICS CARRIER GHO *\/\n+    case 0x15DE: \/* CANADIAN SYLLABICS CARRIER THE *\/\n+    case 0x15E9: \/* CANADIAN SYLLABICS CARRIER PO *\/\n+    case 0x15F1: \/* CANADIAN SYLLABICS CARRIER GE *\/\n+    case 0x15F4: \/* CANADIAN SYLLABICS CARRIER GA *\/\n+    case 0x166D: \/* CANADIAN SYLLABICS CHI SIGN *\/\n+    case 0x166E: \/* CANADIAN SYLLABICS FULL STOP *\/\n+        return true;\n+    default:\n+        return false;\n+    }\n+}\n+\n@@ -290,1 +314,2 @@\n-            || isLookalikeSequence<USCRIPT_TAMIL>(previousCodePoint, codePoint);\n+            || isLookalikeSequence<USCRIPT_TAMIL>(previousCodePoint, codePoint)\n+            || isLookalikeSequence<USCRIPT_CANADIAN_ABORIGINAL>(previousCodePoint, codePoint);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/URLHelpers.cpp","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include <JavaScriptCore\/BuiltinNames.h>\n@@ -112,1 +113,1 @@\n-        auto keysArrayValue = asObject(keysDataValue)->get(&lexicalGlobalObject, Identifier::fromString(vm, \"keys\"));\n+        auto keysArrayValue = asObject(keysDataValue)->get(&lexicalGlobalObject, vm.propertyNames->builtinNames().keysPublicName());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/encryptedmedia\/legacy\/LegacyCDMSessionClearKey.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -200,0 +200,3 @@\n+    if (requestURL.protocolIsBlob())\n+        m_requestBlobURLLifetimeExtender = requestURL;\n+\n@@ -238,0 +241,3 @@\n+    if (m_request.url().protocolIsBlob())\n+        m_requestBlobURLLifetimeExtender = m_request.url();\n+\n@@ -342,0 +348,6 @@\n+void FetchRequest::stop()\n+{\n+    m_requestBlobURLLifetimeExtender.clear();\n+    FetchBodyOwner::stop();\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchRequest.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"BlobURL.h\"\n@@ -96,0 +97,1 @@\n+    void stop() final;\n@@ -102,0 +104,1 @@\n+    BlobURLHandle m_requestBlobURLLifetimeExtender;\n@@ -114,0 +117,2 @@\n+    if (m_request.url().protocolIsBlob())\n+        m_requestBlobURLLifetimeExtender = m_request.url();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchRequest.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2293,0 +2293,3 @@\n+    if (!objectStoreInfo)\n+        return IDBError { UnknownError, \"Failed to look up IDBObjectStoreInfo from identifier\"_s };\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/SQLiteIDBBackingStore.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+    m_isInterrupted = m_private->source().interrupted();\n@@ -512,0 +513,12 @@\n+static void updateVideoCaptureAccordingMicrophoneInterruption(Document& document, bool isMicrophoneInterrupted)\n+{\n+    auto* page = document.page();\n+    for (auto* captureTrack : allCaptureTracks()) {\n+        if (!captureTrack->document() || captureTrack->document()->page() != page)\n+            continue;\n+        auto& source = captureTrack->source();\n+        if (!source.isEnded() && source.type() == RealtimeMediaSource::Type::Video)\n+            source.setMuted(isMicrophoneInterrupted);\n+    }\n+}\n+\n@@ -615,1 +628,2 @@\n-    if (scriptExecutionContext()->activeDOMObjectsAreStopped() || m_ended)\n+    auto* document = this->document();\n+    if (document->activeDOMObjectsAreStopped() || m_ended)\n@@ -625,0 +639,5 @@\n+\n+    bool wasInterrupted = m_isInterrupted;\n+    m_isInterrupted = m_private->source().interrupted();\n+    if (wasInterrupted != m_isInterrupted && m_private->source().type() == RealtimeMediaSource::Type::Audio && document->settings().muteCameraOnMicrophoneInterruptionEnabled())\n+        updateVideoCaptureAccordingMicrophoneInterruption(*document, m_isInterrupted);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/MediaStreamTrack.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -211,0 +211,1 @@\n+    bool m_isInterrupted { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/MediaStreamTrack.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+    using WeakValueType = HTMLElement::WeakValueType;\n+    using HTMLElement::weakPtrFactory;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/model-element\/HTMLModelElement.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-    auto data = WebAudioBufferList { audioDescription, static_cast<uint32_t>(sampleCount) };\n+    auto data = WebAudioBufferList { audioDescription, sampleCount };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/speech\/SpeechRecognitionCaptureSourceImpl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        m_audioBuffer = makeUnique<WebAudioBufferList>(description, safeCast<uint32_t>(numberOfFrames));\n+        m_audioBuffer = makeUnique<WebAudioBufferList>(description, numberOfFrames);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/MediaStreamAudioSourceCocoa.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+accessibility\/atspi\/AccessibilityObjectCollectionAtspi.cpp\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/SourcesGTK.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+accessibility\/atspi\/AccessibilityObjectCollectionAtspi.cpp\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/SourcesWPE.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -955,0 +955,1 @@\n+    Ref<AccessibilityObject> protectedObject(*object);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/AXObjectCache.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -279,0 +279,18 @@\n+enum CollectionMatchType {\n+    MatchInvalid,\n+    MatchAll,\n+    MatchAny,\n+    MatchNone,\n+    MatchEmpty\n+};\n+\n+enum CollectionSortOrder {\n+    SortOrderInvalid,\n+    SortOrderCanonical,\n+    SortOrderFlow,\n+    SortOrderTab,\n+    SortOrderReverseCanonical,\n+    SortOrderReverseFlow,\n+    SortOrderReverseTab\n+};\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/atspi\/AccessibilityAtspiEnums.h","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    OptionSet<Interface> interfaces = { Interface::Accessible, Interface::Component, Interface::Action };\n+    OptionSet<Interface> interfaces = { Interface::Accessible, Interface::Component, Interface::Action, Interface::Collection };\n@@ -509,0 +509,2 @@\n+    if (m_interfaces.contains(Interface::Collection))\n+        interfaces.append({ const_cast<GDBusInterfaceInfo*>(&webkit_collection_interface), &s_collectionFunctions });\n@@ -1165,0 +1167,2 @@\n+    if (m_interfaces.contains(Interface::Collection))\n+        g_variant_builder_add(builder, \"s\", webkit_collection_interface.name);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/atspi\/AccessibilityObjectAtspi.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,2 @@\n-        TableCell = 1 << 11\n+        TableCell = 1 << 11,\n+        Collection =  1 << 12\n@@ -226,0 +227,32 @@\n+    struct CollectionMatchRule {\n+        CollectionMatchRule(GVariant*);\n+\n+        bool match(AccessibilityObjectAtspi&);\n+        bool matchInterfaces(AccessibilityObjectAtspi&);\n+        bool matchStates(AccessibilityObjectAtspi&);\n+        bool matchRoles(AccessibilityObjectAtspi&);\n+        bool matchAttributes(AccessibilityObjectAtspi&);\n+\n+        struct {\n+            uint64_t value { 0 };\n+            uint16_t type { 0 };\n+        } states;\n+\n+        struct {\n+            HashMap<String, Vector<String>> value;\n+            uint16_t type { 0 };\n+        } attributes;\n+\n+        struct {\n+            Vector<unsigned> value;\n+            uint16_t type { 0 };\n+        } roles;\n+\n+        struct {\n+            Vector<String> value;\n+            uint16_t type { 0 };\n+        } interfaces;\n+    };\n+    Vector<RefPtr<AccessibilityObjectAtspi>> matches(CollectionMatchRule&, uint32_t sortOrder, uint32_t maxResultCount, bool traverse);\n+    void addMatchesInCanonicalOrder(Vector<RefPtr<AccessibilityObjectAtspi>>&, CollectionMatchRule&, uint32_t maxResultCount, bool traverse);\n+\n@@ -240,0 +273,1 @@\n+    static GDBusInterfaceVTable s_collectionFunctions;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/atspi\/AccessibilityObjectAtspi.h","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,380 @@\n+\/*\n+ * Copyright (C) 2022 Igalia S.L.\n+ *\n+ * This library is free software; you can redistribute it and\/or\n+ * modify it under the terms of the GNU Library General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Library General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Library General Public License\n+ * along with this library; see the file COPYING.LIB.  If not, write to\n+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02110-1301, USA.\n+ *\/\n+\n+#include \"config.h\"\n+#include \"AccessibilityObjectAtspi.h\"\n+\n+#if USE(ATSPI)\n+#include \"AccessibilityAtspi.h\"\n+#include \"AccessibilityAtspiEnums.h\"\n+\n+namespace WebCore {\n+\n+GDBusInterfaceVTable AccessibilityObjectAtspi::s_collectionFunctions = {\n+    \/\/ method_call\n+    [](GDBusConnection*, const gchar*, const gchar*, const gchar*, const gchar* methodName, GVariant* parameters, GDBusMethodInvocation* invocation, gpointer userData) {\n+        auto atspiObject = Ref { *static_cast<AccessibilityObjectAtspi*>(userData) };\n+        atspiObject->updateBackingStore();\n+\n+        if (!g_strcmp0(methodName, \"GetMatches\")) {\n+            GRefPtr<GVariant> rule;\n+            uint32_t sortyBy;\n+            int count;\n+            gboolean traverse;\n+            g_variant_get(parameters, \"(@(aiia{ss}iaiiasib)uib)\", &rule.outPtr(), &sortyBy, &count, &traverse);\n+            if (sortyBy > Atspi::CollectionSortOrder::SortOrderReverseTab) {\n+                g_dbus_method_invocation_return_error(invocation, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, \"Not a valid sort order: %u\", sortyBy);\n+                return;\n+            }\n+            CollectionMatchRule matchRule(rule.get());\n+            GVariantBuilder builder = G_VARIANT_BUILDER_INIT(G_VARIANT_TYPE(\"a(so)\"));\n+            for (const auto& wrapper : atspiObject->matches(matchRule, sortyBy, std::max<int>(0, count), traverse))\n+                g_variant_builder_add(&builder, \"@(so)\", wrapper->reference());\n+            g_dbus_method_invocation_return_value(invocation, g_variant_new(\"(a(so))\", &builder));\n+        } else if (!g_strcmp0(methodName, \"GetMatchesTo\") || !g_strcmp0(methodName, \"GetMatchesFrom\") || !g_strcmp0(methodName, \"GetActiveDescendant\"))\n+            g_dbus_method_invocation_return_error_literal(invocation, G_DBUS_ERROR, G_DBUS_ERROR_NOT_SUPPORTED, \"\");\n+    },\n+    \/\/ get_property\n+    nullptr,\n+    \/\/ set_property,\n+    nullptr,\n+    \/\/ padding\n+    { nullptr }\n+};\n+\n+AccessibilityObjectAtspi::CollectionMatchRule::CollectionMatchRule(GVariant* rule)\n+{\n+    GUniqueOutPtr<GVariantIter> statesIter;\n+    int statesMatchType;\n+    GUniqueOutPtr<GVariantIter> attributesIter;\n+    int attributesMatchType;\n+    GUniqueOutPtr<GVariantIter> rolesIter;\n+    int rolesMatchType;\n+    GUniqueOutPtr<GVariantIter> interfacesIter;\n+    int interfacesMatchType;\n+    gboolean inverted;\n+    g_variant_get(rule, \"(aiia{ss}iaiiasib)\", &statesIter.outPtr(), &statesMatchType, &attributesIter.outPtr(), &attributesMatchType, &rolesIter.outPtr(), &rolesMatchType, &interfacesIter.outPtr(), &interfacesMatchType, &inverted);\n+\n+    int state;\n+    int i = 0;\n+    while (g_variant_iter_next(statesIter.get(), \"i\", &state)) {\n+        for (int j = 0; j < 32; ++j) {\n+            if (state & (1 << j))\n+                states.value |= G_GUINT64_CONSTANT(1) << (i * 32 + j);\n+        }\n+        i++;\n+    }\n+    states.type = statesMatchType;\n+\n+    const char* attributeName;\n+    const char* attributeValue;\n+    while (g_variant_iter_next(attributesIter.get(), \"{&s&s}\", &attributeName, &attributeValue)) {\n+        auto addResult = attributes.value.add(String::fromUTF8(attributeName), Vector<String> { });\n+        String value = String::fromUTF8(attributeValue);\n+        unsigned currentPos = 0;\n+        unsigned startPos = 0;\n+        size_t endPos;\n+        while ((endPos = value.find(':', currentPos)) != notFound) {\n+            if (currentPos != endPos) {\n+                if (startPos != endPos && ((endPos && value[endPos - 1] != '\\\\') || (endPos > 1 && value[endPos - 2] == '\\\\'))) {\n+                    auto unescapedValue = value.substring(startPos, endPos - startPos).replace(\"\\\\:\"_s, \":\"_s);\n+                    addResult.iterator->value.append(unescapedValue.replace(\"\\\\\\\\\"_s, \"\\\\\"_s));\n+                    startPos = endPos + 1;\n+                }\n+            }\n+            currentPos = endPos + 1;\n+            if (startPos == endPos)\n+                startPos++;\n+        }\n+        if (startPos != value.length()) {\n+            auto unescapedValue = value.substring(startPos).replace(\"\\\\:\"_s, \":\"_s);\n+            addResult.iterator->value.append(unescapedValue.replace(\"\\\\\\\\\"_s, \"\\\\\"_s));\n+        }\n+    }\n+    attributes.type = attributesMatchType;\n+\n+    int role;\n+    i = 0;\n+    while (g_variant_iter_next(rolesIter.get(), \"i\", &role)) {\n+        for (int j = 0; j < 32; ++j) {\n+            if (role & (1 << j))\n+                roles.value.append(i * 32 + j);\n+        }\n+        i++;\n+    }\n+    roles.type = rolesMatchType;\n+\n+    const char* interface;\n+    while (g_variant_iter_next(interfacesIter.get(), \"&s\", &interface))\n+        interfaces.value.append(String::fromUTF8(interface));\n+    interfaces.type = interfacesMatchType;\n+}\n+\n+bool AccessibilityObjectAtspi::CollectionMatchRule::matchInterfaces(AccessibilityObjectAtspi& axObject)\n+{\n+    if (interfaces.value.isEmpty())\n+        return true;\n+\n+    auto matchInterface = [&](const String& interface) {\n+        if (interface == \"accessible\"_s)\n+            return axObject.interfaces().contains(Interface::Accessible);\n+        if (interface == \"action\"_s)\n+            return axObject.interfaces().contains(Interface::Action);\n+        if (interface == \"component\"_s)\n+            return axObject.interfaces().contains(Interface::Component);\n+        if (interface == \"text\"_s)\n+            return axObject.interfaces().contains(Interface::Text);\n+        if (interface == \"hypertext\"_s)\n+            return axObject.interfaces().contains(Interface::Hypertext);\n+        if (interface == \"hyperlink\"_s)\n+            return axObject.interfaces().contains(Interface::Hyperlink);\n+        if (interface == \"image\"_s)\n+            return axObject.interfaces().contains(Interface::Image);\n+        if (interface == \"selection\"_s)\n+            return axObject.interfaces().contains(Interface::Selection);\n+        if (interface == \"table\"_s)\n+            return axObject.interfaces().contains(Interface::Table);\n+        if (interface == \"tablecell\"_s)\n+            return axObject.interfaces().contains(Interface::TableCell);\n+        if (interface == \"value\"_s)\n+            return axObject.interfaces().contains(Interface::Value);\n+        if (interface == \"document\"_s)\n+            return axObject.interfaces().contains(Interface::Document);\n+        if (interface == \"collection\"_s)\n+            return axObject.interfaces().contains(Interface::Collection);\n+        return false;\n+    };\n+\n+    switch (interfaces.type) {\n+    case Atspi::CollectionMatchType::MatchInvalid:\n+    case Atspi::CollectionMatchType::MatchEmpty:\n+        return false;\n+    case Atspi::CollectionMatchType::MatchAll:\n+        for (const auto& interface : interfaces.value) {\n+            if (!matchInterface(interface))\n+                return false;\n+        }\n+\n+        return true;\n+    case Atspi::CollectionMatchType::MatchAny:\n+        for (const auto& interface : interfaces.value) {\n+            if (matchInterface(interface))\n+                return true;\n+        }\n+\n+        return false;\n+    case Atspi::CollectionMatchType::MatchNone:\n+        for (const auto& interface : interfaces.value) {\n+            if (matchInterface(interface))\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+bool AccessibilityObjectAtspi::CollectionMatchRule::matchStates(AccessibilityObjectAtspi& axObject)\n+{\n+    if (!states.value)\n+        return true;\n+\n+    switch (states.type) {\n+    case Atspi::CollectionMatchType::MatchInvalid:\n+    case Atspi::CollectionMatchType::MatchEmpty:\n+        return false;\n+    case Atspi::CollectionMatchType::MatchAll:\n+        return (axObject.state() & states.value) == states.value;\n+    case Atspi::CollectionMatchType::MatchAny:\n+        return !!(axObject.state() & states.value);\n+    case Atspi::CollectionMatchType::MatchNone:\n+        return !(axObject.state() & states.value);\n+    }\n+\n+    return false;\n+}\n+\n+bool AccessibilityObjectAtspi::CollectionMatchRule::matchRoles(AccessibilityObjectAtspi& axObject)\n+{\n+    if (roles.value.isEmpty())\n+        return true;\n+\n+    switch (roles.type) {\n+    case Atspi::CollectionMatchType::MatchInvalid:\n+    case Atspi::CollectionMatchType::MatchEmpty:\n+        return false;\n+    case Atspi::CollectionMatchType::MatchAll:\n+        if (roles.value.size() != 1)\n+            return false;\n+\n+        return roles.value[0] == axObject.role();\n+    case Atspi::CollectionMatchType::MatchAny:\n+        for (auto role : roles.value) {\n+            if (role == axObject.role())\n+                return true;\n+        }\n+\n+        return false;\n+    case Atspi::CollectionMatchType::MatchNone:\n+        for (auto role : roles.value) {\n+            if (role == axObject.role())\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+bool AccessibilityObjectAtspi::CollectionMatchRule::matchAttributes(AccessibilityObjectAtspi& axObject)\n+{\n+    if (attributes.value.isEmpty())\n+        return true;\n+\n+    switch (attributes.type) {\n+    case Atspi::CollectionMatchType::MatchInvalid:\n+    case Atspi::CollectionMatchType::MatchEmpty:\n+        return false;\n+    case Atspi::CollectionMatchType::MatchAll: {\n+        auto axAttributes = axObject.attributes();\n+        for (const auto& it : attributes.value) {\n+            auto value = axAttributes.get(it.key);\n+            if (value.isNull())\n+                return false;\n+\n+            if (it.value.isEmpty() || it.value.size() > 1)\n+                return false;\n+\n+            if (!equalIgnoringASCIICase(it.value[0], value))\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+    case Atspi::CollectionMatchType::MatchAny: {\n+        auto axAttributes = axObject.attributes();\n+        for (const auto& it : attributes.value) {\n+            auto value = axAttributes.get(it.key);\n+            if (value.isNull())\n+                continue;\n+\n+            bool found = it.value.findIf([&value](auto& item) {\n+                return equalIgnoringASCIICase(item, value);\n+            }) != notFound;\n+            if (found)\n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    case Atspi::CollectionMatchType::MatchNone: {\n+        auto axAttributes = axObject.attributes();\n+        for (const auto& it : attributes.value) {\n+            auto value = axAttributes.get(it.key);\n+            if (value.isNull())\n+                continue;\n+\n+            bool found = it.value.findIf([&value](auto& item) {\n+                return equalIgnoringASCIICase(item, value);\n+            }) != notFound;\n+            if (found)\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+    }\n+\n+    return false;\n+}\n+\n+bool AccessibilityObjectAtspi::CollectionMatchRule::match(AccessibilityObjectAtspi& axObject)\n+{\n+    if (!matchInterfaces(axObject))\n+        return false;\n+\n+    if (!matchStates(axObject))\n+        return false;\n+\n+    if (!matchRoles(axObject))\n+        return false;\n+\n+    if (!matchAttributes(axObject))\n+        return false;\n+\n+    return true;\n+}\n+\n+void AccessibilityObjectAtspi::addMatchesInCanonicalOrder(Vector<RefPtr<AccessibilityObjectAtspi>>& matchList, CollectionMatchRule& rule, uint32_t maxResultCount, bool traverse)\n+{\n+    const auto& children = m_coreObject->children();\n+    for (auto& child : children) {\n+        auto* wrapper = child->wrapper();\n+        if (!wrapper)\n+            continue;\n+\n+        if (rule.match(*wrapper)) {\n+            matchList.append(wrapper);\n+            if (maxResultCount && matchList.size() >= maxResultCount)\n+                return;\n+        }\n+\n+        if (traverse) {\n+            wrapper->addMatchesInCanonicalOrder(matchList, rule, maxResultCount, traverse);\n+            if (maxResultCount && matchList.size() >= maxResultCount)\n+                return;\n+        }\n+    }\n+}\n+\n+Vector<RefPtr<AccessibilityObjectAtspi>> AccessibilityObjectAtspi::matches(CollectionMatchRule& rule, uint32_t sortOrder, uint32_t maxResultCount, bool traverse)\n+{\n+    if (!m_coreObject)\n+        return { };\n+\n+    Vector<RefPtr<AccessibilityObjectAtspi>> matchList;\n+\n+    switch (sortOrder) {\n+    case Atspi::CollectionSortOrder::SortOrderInvalid:\n+        break;\n+    case Atspi::CollectionSortOrder::SortOrderCanonical:\n+        addMatchesInCanonicalOrder(matchList, rule, maxResultCount, traverse);\n+        break;\n+    case Atspi::CollectionSortOrder::SortOrderReverseCanonical:\n+        addMatchesInCanonicalOrder(matchList, rule, maxResultCount, traverse);\n+        matchList.reverse();\n+        break;\n+    case Atspi::CollectionSortOrder::SortOrderFlow:\n+    case Atspi::CollectionSortOrder::SortOrderTab:\n+    case Atspi::CollectionSortOrder::SortOrderReverseFlow:\n+    case Atspi::CollectionSortOrder::SortOrderReverseTab:\n+        g_warning(\"Atspi collection sort method %u not implemented yet\", sortOrder);\n+        break;\n+\n+    }\n+\n+    return matchList;\n+}\n+\n+} \/\/ namespace WebCore\n+\n+#endif \/\/ USE(ATSPI)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/atspi\/AccessibilityObjectCollectionAtspi.cpp","additions":380,"deletions":0,"binary":false,"changes":380,"status":"added"},{"patch":"@@ -6,1 +6,1 @@\n-    <arg direction=\"in\" name=\"rule\" type=\"(auuasuauusub)\"\/>\n+    <arg direction=\"in\" name=\"rule\" type=\"(aiia{ss}iaiiasib)\"\/>\n@@ -18,1 +18,1 @@\n-    <arg direction=\"in\" name=\"rule\" type=\"(auuasuauusub)\"\/>\n+    <arg direction=\"in\" name=\"rule\" type=\"(aiia{ss}iaiiasib)\"\/>\n@@ -32,1 +32,1 @@\n-    <arg direction=\"in\" name=\"rule\" type=\"(auuasuauusub)\"\/>\n+    <arg direction=\"in\" name=\"rule\" type=\"(aiia{ss}iaiiasib)\"\/>\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/atspi\/xml\/Collection.xml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-    JSVMClientData& clientData = *static_cast<JSVMClientData*>(vm.clientData);\n+    auto& builtinNames = WebCore::builtinNames(vm);\n@@ -219,1 +219,1 @@\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().makeThisTypeErrorPrivateName(),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.makeThisTypeErrorPrivateName(),\n@@ -221,1 +221,1 @@\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().makeGetterTypeErrorPrivateName(),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.makeGetterTypeErrorPrivateName(),\n@@ -223,1 +223,1 @@\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().makeDOMExceptionPrivateName(),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.makeDOMExceptionPrivateName(),\n@@ -225,1 +225,1 @@\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().whenSignalAbortedPrivateName(),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.whenSignalAbortedPrivateName(),\n@@ -227,1 +227,1 @@\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().cloneArrayBufferPrivateName(),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.cloneArrayBufferPrivateName(),\n@@ -229,1 +229,1 @@\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().structuredCloneForStreamPrivateName(),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.structuredCloneForStreamPrivateName(),\n@@ -232,10 +232,10 @@\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().streamClosedPrivateName(), jsNumber(1), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().streamClosingPrivateName(), jsNumber(2), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().streamErroredPrivateName(), jsNumber(3), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().streamReadablePrivateName(), jsNumber(4), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().streamWaitingPrivateName(), jsNumber(5), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().streamWritablePrivateName(), jsNumber(6), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().readableByteStreamAPIEnabledPrivateName(), JSFunction::create(vm, this, 0, String(), isReadableByteStreamAPIEnabled), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().isAbortSignalPrivateName(), JSFunction::create(vm, this, 1, String(), isAbortSignal), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().getInternalWritableStreamPrivateName(), JSFunction::create(vm, this, 1, String(), getInternalWritableStream), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n-        JSDOMGlobalObject::GlobalPropertyInfo(clientData.builtinNames().createWritableStreamFromInternalPrivateName(), JSFunction::create(vm, this, 1, String(), createWritableStreamFromInternal), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.streamClosedPrivateName(), jsNumber(1), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.streamClosingPrivateName(), jsNumber(2), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.streamErroredPrivateName(), jsNumber(3), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.streamReadablePrivateName(), jsNumber(4), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.streamWaitingPrivateName(), jsNumber(5), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.streamWritablePrivateName(), jsNumber(6), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.readableByteStreamAPIEnabledPrivateName(), JSFunction::create(vm, this, 0, String(), isReadableByteStreamAPIEnabled), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.isAbortSignalPrivateName(), JSFunction::create(vm, this, 1, String(), isAbortSignal), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.getInternalWritableStreamPrivateName(), JSFunction::create(vm, this, 1, String(), getInternalWritableStream), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n+        JSDOMGlobalObject::GlobalPropertyInfo(builtinNames.createWritableStreamFromInternalPrivateName(), JSFunction::create(vm, this, 1, String(), createWritableStreamFromInternal), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSDOMGlobalObject.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-    globalObject.vm().writeBarrier(&globalObject, &guarded);\n@@ -42,3 +41,3 @@\n-        return;\n-    }\n-    globalObject.guardedObjects(NoLockingNecessary).add(this);\n+    } else\n+        globalObject.guardedObjects(NoLockingNecessary).add(this);\n+    globalObject.vm().writeBarrier(&globalObject, &guarded);\n@@ -57,1 +56,0 @@\n-    m_globalObject.clear();\n@@ -62,1 +60,1 @@\n-    if (!m_guarded || !m_globalObject)\n+    if (!m_globalObject)\n@@ -70,0 +68,2 @@\n+\n+    m_globalObject.clear();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSDOMGuardedObject.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include <JavaScriptCore\/HashMapImplInlines.h>\n@@ -39,1 +40,1 @@\n-    auto backingMap = mapLike.get(&lexicalGlobalObject, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().backingMapPrivateName());\n+    auto backingMap = mapLike.get(&lexicalGlobalObject, builtinNames(vm).backingMapPrivateName());\n@@ -43,7 +44,2 @@\n-    JSC::DeferTerminationForAWhile deferScope(vm);\n-    auto scope = DECLARE_CATCH_SCOPE(vm);\n-\n-    backingMap = JSC::JSMap::create(&lexicalGlobalObject, vm, lexicalGlobalObject.mapStructure());\n-    scope.releaseAssertNoException();\n-\n-    mapLike.putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().backingMapPrivateName(), backingMap, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum));\n+    backingMap = JSC::JSMap::create(vm, lexicalGlobalObject.mapStructure());\n+    mapLike.putDirect(vm, builtinNames(vm).backingMapPrivateName(), backingMap, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSDOMMapLike.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    auto backingSet = setLike.get(&lexicalGlobalObject, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().backingSetPrivateName());\n+    auto backingSet = setLike.get(&lexicalGlobalObject, builtinNames(vm).backingSetPrivateName());\n@@ -48,7 +48,2 @@\n-        JSC::DeferTermination deferScope(vm);\n-        auto scope = DECLARE_CATCH_SCOPE(vm);\n-\n-        backingSet = JSC::JSSet::create(&lexicalGlobalObject, vm, lexicalGlobalObject.setStructure());\n-        scope.releaseAssertNoException();\n-\n-        setLike.putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().backingSetPrivateName(), backingSet, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum));\n+        backingSet = JSC::JSSet::create(vm, lexicalGlobalObject.setStructure());\n+        setLike.putDirect(vm, builtinNames(vm).backingSetPrivateName(), backingSet, static_cast<unsigned>(JSC::PropertyAttribute::DontEnum));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSDOMSetLike.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    auto& builtinNames = static_cast<JSVMClientData*>(vm.clientData)->builtinNames();\n+    auto& builtinNames = WebCore::builtinNames(vm);\n@@ -131,1 +131,1 @@\n-    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().showModalDialogPublicName(), CustomGetterSetter::create(vm, showModalDialogGetter, nullptr), static_cast<unsigned>(PropertyAttribute::CustomValue));\n+    putDirectCustomAccessor(vm, builtinNames(vm).showModalDialogPublicName(), CustomGetterSetter::create(vm, showModalDialogGetter, nullptr), static_cast<unsigned>(PropertyAttribute::CustomValue));\n@@ -152,1 +152,1 @@\n-    symbolTablePutTouchWatchpointSet(this, lexicalGlobalObject, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().documentPublicName(), toJS(lexicalGlobalObject, this, m_wrapped->document()), shouldThrowReadOnlyError, ignoreReadOnlyErrors, putResult);\n+    symbolTablePutTouchWatchpointSet(this, lexicalGlobalObject, builtinNames(vm).documentPublicName(), toJS(lexicalGlobalObject, this, m_wrapped->document()), shouldThrowReadOnlyError, ignoreReadOnlyErrors, putResult);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSDOMWindowBase.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-    auto& builtinNames = static_cast<JSVMClientData*>(vm.clientData)->builtinNames();\n+    auto& builtinNames = WebCore::builtinNames(vm);\n@@ -217,1 +217,1 @@\n-    if (propertyName == static_cast<JSVMClientData*>(lexicalGlobalObject->vm().clientData)->builtinNames().webkitPublicName() && thisObject->wrapped().shouldHaveWebKitNamespaceForWorld(thisObject->world())) {\n+    if (propertyName == builtinNames(lexicalGlobalObject->vm()).webkitPublicName() && thisObject->wrapped().shouldHaveWebKitNamespaceForWorld(thisObject->world())) {\n@@ -258,1 +258,1 @@\n-        if (propertyName == static_cast<JSVMClientData*>(vm.clientData)->builtinNames().locationPublicName()) {\n+        if (propertyName == builtinNames(vm).locationPublicName()) {\n@@ -330,1 +330,1 @@\n-    auto& builtinNames = static_cast<JSVMClientData*>(vm.clientData)->builtinNames();\n+    auto& builtinNames = WebCore::builtinNames(vm);\n@@ -416,1 +416,1 @@\n-    auto& builtinNames = static_cast<JSVMClientData*>(vm.clientData)->builtinNames();\n+    auto& builtinNames = WebCore::builtinNames(vm);\n@@ -589,1 +589,1 @@\n-    createDataProperty(&lexicalGlobalObject, Identifier::fromString(lexicalGlobalObject.vm(), \"opener\"), value, shouldThrow);\n+    createDataProperty(&lexicalGlobalObject, builtinNames(lexicalGlobalObject.vm()).openerPublicName(), value, shouldThrow);\n@@ -649,1 +649,1 @@\n-    StringImpl* name = PropertyName(static_cast<JSVMClientData*>(vm.clientData)->builtinNames().openDatabasePublicName()).publicName();\n+    StringImpl* name = PropertyName(builtinNames(vm).openDatabasePublicName()).publicName();\n@@ -662,1 +662,1 @@\n-    createDataProperty(&lexicalGlobalObject, Identifier::fromString(lexicalGlobalObject.vm(), \"openDatabase\"), value, shouldThrow);\n+    createDataProperty(&lexicalGlobalObject, builtinNames(lexicalGlobalObject.vm()).openDatabasePublicName(), value, shouldThrow);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSDOMWindowCustom.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"WebCoreJSClientData.h\"\n@@ -194,1 +195,1 @@\n-        handleEventFunction = jsFunction->get(lexicalGlobalObject, Identifier::fromString(vm, \"handleEvent\"));\n+        handleEventFunction = jsFunction->get(lexicalGlobalObject, builtinNames(vm).handleEventPublicName());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSEventListener.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    if (slot.internalMethodType() == PropertySlot::InternalMethodType::GetOwnProperty && propertyName == static_cast<JSVMClientData*>(vm.clientData)->builtinNames().hrefPublicName()) {\n+    if (slot.internalMethodType() == PropertySlot::InternalMethodType::GetOwnProperty && propertyName == builtinNames(vm).hrefPublicName()) {\n@@ -123,1 +123,1 @@\n-        if (propertyName == static_cast<JSVMClientData*>(vm.clientData)->builtinNames().hrefPublicName()) {\n+        if (propertyName == builtinNames(vm).hrefPublicName()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSLocationCustom.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    if (propertyName == static_cast<JSVMClientData*>(vm.clientData)->builtinNames().locationPublicName()) {\n+    if (propertyName == builtinNames(vm).locationPublicName()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSRemoteDOMWindowCustom.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    auto& clientData = *static_cast<JSVMClientData*>(lexicalGlobalObject.vm().clientData);\n+    auto& builtinNames = WebCore::builtinNames(lexicalGlobalObject.vm());\n@@ -71,1 +71,1 @@\n-    auto objectOrException = invokeConstructor(lexicalGlobalObject, clientData.builtinNames().ReadableStreamPrivateName(), [&source](auto& args, auto& lexicalGlobalObject, auto& globalObject) {\n+    auto objectOrException = invokeConstructor(lexicalGlobalObject, builtinNames.ReadableStreamPrivateName(), [&source](auto& args, auto& lexicalGlobalObject, auto& globalObject) {\n@@ -133,2 +133,2 @@\n-    auto& clientData = *static_cast<JSVMClientData*>(m_globalObject->vm().clientData);\n-    invokeConstructor(*m_globalObject, clientData.builtinNames().ReadableStreamDefaultReaderPrivateName(), [this](auto& args, auto&, auto&) {\n+    auto& builtinNames = WebCore::builtinNames(m_globalObject->vm());\n+    invokeConstructor(*m_globalObject, builtinNames.ReadableStreamDefaultReaderPrivateName(), [this](auto& args, auto&, auto&) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/ReadableStream.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-            if (JSValue failureKindValue = object->getDirect(vm, static_cast<JSVMClientData&>(*vm.clientData).builtinNames().failureKindPrivateName())) {\n+            if (JSValue failureKindValue = object->getDirect(vm, builtinNames(vm).failureKindPrivateName())) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/ScriptController.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-        error->putDirect(vm, static_cast<JSVMClientData&>(*vm.clientData).builtinNames().failureKindPrivateName(), JSC::jsNumber(static_cast<int32_t>(failureKind)));\n+        error->putDirect(vm, builtinNames(vm).failureKindPrivateName(), JSC::jsNumber(static_cast<int32_t>(failureKind)));\n@@ -164,1 +164,1 @@\n-        error->putDirect(vm, static_cast<JSVMClientData&>(*vm.clientData).builtinNames().failureKindPrivateName(), JSC::jsNumber(static_cast<int32_t>(ModuleFetchFailureKind::WasFetchError)));\n+        error->putDirect(vm, builtinNames(vm).failureKindPrivateName(), JSC::jsNumber(static_cast<int32_t>(ModuleFetchFailureKind::WasFetchError)));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/ScriptModuleLoader.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4022,3 +4022,1 @@\n-            JSMap* map = JSMap::create(m_lexicalGlobalObject, m_lexicalGlobalObject->vm(), m_globalObject->mapStructure());\n-            if (UNLIKELY(scope.exception()))\n-                goto error;\n+            JSMap* map = JSMap::create(m_lexicalGlobalObject->vm(), m_globalObject->mapStructure());\n@@ -4053,3 +4051,1 @@\n-            JSSet* set = JSSet::create(m_lexicalGlobalObject, m_lexicalGlobalObject->vm(), m_globalObject->setStructure());\n-            if (UNLIKELY(scope.exception()))\n-                goto error;\n+            JSSet* set = JSSet::create(m_lexicalGlobalObject->vm(), m_globalObject->setStructure());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/SerializedScriptValue.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -467,0 +467,1 @@\n+    macro(handleEvent) \\\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/WebCoreBuiltinNames.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -211,0 +211,5 @@\n+ALWAYS_INLINE WebCoreBuiltinNames& builtinNames(JSC::VM& vm)\n+{\n+    return static_cast<JSVMClientData*>(vm.clientData)->builtinNames();\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/WebCoreJSClientData.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4587,1 +4587,1 @@\n-                    push(@implContent, \"        putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().\" . $attributeName . \"PublicName(), JSC::DOMAttributeGetterSetter::create(vm, $getter, $setter, JSC::DOMAttributeAnnotation { $classForThis, nullptr }), attributesForStructure($jscAttributes));\\n\");\n+                    push(@implContent, \"        putDirectCustomAccessor(vm, builtinNames(vm).\" . $attributeName . \"PublicName(), JSC::DOMAttributeGetterSetter::create(vm, $getter, $setter, JSC::DOMAttributeAnnotation { $classForThis, nullptr }), attributesForStructure($jscAttributes));\\n\");\n@@ -4590,1 +4590,1 @@\n-                push(@implContent, \"        putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().\" . $attributeName . \"PublicName(), CustomGetterSetter::create(vm, $getter, $setter), attributesForStructure($jscAttributes));\\n\");\n+                    push(@implContent, \"        putDirectCustomAccessor(vm, builtinNames(vm).\" . $attributeName . \"PublicName(), CustomGetterSetter::create(vm, $getter, $setter), attributesForStructure($jscAttributes));\\n\");\n@@ -4606,1 +4606,1 @@\n-            push(@implContent, \"    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().\" . $operation->name . \"PrivateName(), JSFunction::create(vm, globalObject(), 0, String(), \" . GetFunctionName($interface, $className, $operation) . \"), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);\\n\");\n+            push(@implContent, \"    putDirect(vm, builtinNames(vm).\" . $operation->name . \"PrivateName(), JSFunction::create(vm, globalObject(), 0, String(), \" . GetFunctionName($interface, $className, $operation) . \"), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);\\n\");\n@@ -4725,1 +4725,1 @@\n-            push(@implContent, \"        putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().\" . $attributeName . \"PublicName(), CustomGetterSetter::create(vm, $getter, $setter), attributesForStructure($jscAttributes));\\n\");\n+            push(@implContent, \"        putDirectCustomAccessor(vm, builtinNames(vm).\" . $attributeName . \"PublicName(), CustomGetterSetter::create(vm, $getter, $setter), attributesForStructure($jscAttributes));\\n\");\n@@ -4728,1 +4728,1 @@\n-            push(@implContent, \"        putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().\" . $attributeName . \"PrivateName(), CustomGetterSetter::create(vm, $getter, $setter), attributesForStructure($jscAttributes));\\n\");\n+            push(@implContent, \"        putDirectCustomAccessor(vm, builtinNames(vm).\" . $attributeName . \"PrivateName(), CustomGetterSetter::create(vm, $getter, $setter), attributesForStructure($jscAttributes));\\n\");\n@@ -4748,1 +4748,1 @@\n-        push(@implContent, \"    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().\" . $attributeName . \"PrivateName(), CustomGetterSetter::create(vm, $getter, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));\\n\");\n+        push(@implContent, \"    putDirectCustomAccessor(vm, builtinNames(vm).\" . $attributeName . \"PrivateName(), CustomGetterSetter::create(vm, $getter, nullptr), attributesForStructure(JSC::PropertyAttribute::DontDelete | JSC::PropertyAttribute::ReadOnly));\\n\");\n@@ -4768,1 +4768,1 @@\n-        my $propertyName = \"static_cast<JSVMClientData*>(vm.clientData)->builtinNames().\" . $functionName . ($operation->extendedAttributes->{PrivateIdentifier} ? \"PrivateName()\" : \"PublicName()\");\n+        my $propertyName = \"builtinNames(vm).\" . $functionName . ($operation->extendedAttributes->{PrivateIdentifier} ? \"PrivateName()\" : \"PublicName()\");\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/scripts\/CodeGeneratorJS.pm","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1123,1 +1123,1 @@\n-            if (auto promise = weakThis->m_pendingPromises.get(index)) {\n+            if (RefPtr promise = weakThis->m_pendingPromises.get(index)) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/crypto\/SubtleCrypto.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-class CSSImportRule final : public CSSRule {\n+class CSSImportRule final : public CSSRule, public CanMakeWeakPtr<CSSImportRule> {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSImportRule.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    , m_ownerNode(&ownerNode)\n+    , m_ownerNode(ownerNode)\n@@ -124,0 +124,5 @@\n+Node* CSSStyleSheet::ownerNode() const\n+{\n+    return m_ownerNode.get();\n+}\n+\n@@ -196,0 +201,5 @@\n+CSSImportRule* CSSStyleSheet::ownerRule() const\n+{\n+    return m_ownerRule.get();\n+}\n+\n@@ -358,1 +368,2 @@\n-    return m_ownerRule ? m_ownerRule->parentStyleSheet() : nullptr;\n+    RefPtr ownerRule = m_ownerRule.get();\n+    return ownerRule ? ownerRule->parentStyleSheet() : nullptr;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSStyleSheet.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    Node* ownerNode() const final { return m_ownerNode; }\n+    Node* ownerNode() const final;\n@@ -80,1 +80,1 @@\n-    CSSImportRule* ownerRule() const final { return m_ownerRule; }\n+    WEBCORE_EXPORT CSSImportRule* ownerRule() const final;\n@@ -84,1 +84,1 @@\n-    void clearOwnerRule() { m_ownerRule = 0; }\n+    void clearOwnerRule() { m_ownerRule = nullptr; }\n@@ -129,1 +129,1 @@\n-    void detachFromDocument() { m_ownerNode = nullptr; }\n+    void detachFromDocument() { clearOwnerNode(); }\n@@ -151,2 +151,2 @@\n-    Node* m_ownerNode { nullptr };\n-    CSSImportRule* m_ownerRule { nullptr };\n+    WeakPtr<Node> m_ownerNode;\n+    WeakPtr<CSSImportRule> m_ownerRule;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSStyleSheet.h","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -333,1 +333,0 @@\n-    \/\/ FIXME: assert that we don't dispatch events here since this container node is still disconnected.\n@@ -335,1 +334,2 @@\n-        RELEASE_ASSERT(!child->parentNode() && &child->treeScope() == &treeScope());\n+        if (child->parentNode()) \/\/ Previous parserAppendChild may have mutated DOM.\n+            continue;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/ContainerNode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4788,0 +4788,2 @@\n+        if (m_focusedElement->isRootEditableElement() && m_focusedElement->contains(m_focusNavigationStartingNode.get()))\n+            return m_focusedElement.get();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,6 @@\n-Vector<EventTarget*> Event::composedPath() const\n+void Event::setEventPath(const EventPath& path)\n+{\n+    m_eventPath = &path;\n+}\n+\n+Vector<Ref<EventTarget>> Event::composedPath() const\n@@ -144,1 +149,1 @@\n-        return Vector<EventTarget*>();\n+        return Vector<Ref<EventTarget>>();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Event.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include <wtf\/CheckedPtr.h>\n@@ -91,2 +92,2 @@\n-    void setEventPath(const EventPath& path) { m_eventPath = &path; }\n-    Vector<EventTarget*> composedPath() const;\n+    void setEventPath(const EventPath&);\n+    Vector<Ref<EventTarget>> composedPath() const;\n@@ -189,1 +190,1 @@\n-    const EventPath* m_eventPath { nullptr };\n+    CheckedPtr<const EventPath> m_eventPath;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Event.h","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-    Node& m_relatedNode;\n-    Node* m_retargetedRelatedNode;\n+    Ref<Node> m_relatedNode;\n+    RefPtr<Node> m_retargetedRelatedNode;\n@@ -107,2 +107,2 @@\n-    Node* node = nodeOrHostIfPseudoElement(&originalTarget);\n-    Node* target = node ? eventTargetRespectingTargetRules(*node) : nullptr;\n+    RefPtr node = nodeOrHostIfPseudoElement(&originalTarget);\n+    RefPtr target = node ? eventTargetRespectingTargetRules(*node) : nullptr;\n@@ -114,1 +114,1 @@\n-            m_path.append(EventContext { contextType, *node, eventTargetRespectingTargetRules(*node), target, closedShadowDepth });\n+            m_path.append(EventContext { contextType, *node, eventTargetRespectingTargetRules(*node), target.get(), closedShadowDepth });\n@@ -126,1 +126,1 @@\n-                            m_path.append(EventContext { EventContext::Type::Window, node, window, target, closedShadowDepth });\n+                            m_path.append(EventContext { EventContext::Type::Window, node.get(), window, target.get(), closedShadowDepth });\n@@ -132,1 +132,1 @@\n-            if (auto* shadowRootOfParent = parent->shadowRoot(); UNLIKELY(shadowRootOfParent)) {\n+            if (RefPtr shadowRootOfParent = parent->shadowRoot(); UNLIKELY(shadowRootOfParent)) {\n@@ -237,1 +237,1 @@\n-Vector<EventTarget*> EventPath::computePathUnclosedToTarget(const EventTarget& target) const\n+Vector<Ref<EventTarget>> EventPath::computePathUnclosedToTarget(const EventTarget& target) const\n@@ -239,1 +239,1 @@\n-    Vector<EventTarget*> path;\n+    Vector<Ref<EventTarget>> path;\n@@ -258,1 +258,1 @@\n-        path.uncheckedAppend(currentContext.currentTarget());\n+        path.uncheckedAppend(*currentContext.currentTarget());\n@@ -297,2 +297,2 @@\n-    TreeScope* currentTreeScope = &m_relatedNode.treeScope();\n-    if (LIKELY(currentTreeScope == &targetTreeScope && target.isConnected() && m_relatedNode.isConnected()))\n+    TreeScope* currentTreeScope = &m_relatedNode->treeScope();\n+    if (LIKELY(currentTreeScope == &targetTreeScope && target.isConnected() && m_relatedNode->isConnected()))\n@@ -348,1 +348,1 @@\n-    return m_retargetedRelatedNode;\n+    return m_retargetedRelatedNode.get();\n@@ -375,1 +375,1 @@\n-            ASSERT(m_retargetedRelatedNode == &m_relatedNode);\n+            ASSERT(m_retargetedRelatedNode == m_relatedNode.ptr());\n@@ -388,1 +388,1 @@\n-        return &m_relatedNode;\n+        return m_relatedNode.ptr();\n@@ -396,1 +396,1 @@\n-    for (TreeScope* currentTreeScope = &m_relatedNode.treeScope(); currentTreeScope; currentTreeScope = currentTreeScope->parentTreeScope())\n+    for (TreeScope* currentTreeScope = &m_relatedNode->treeScope(); currentTreeScope; currentTreeScope = currentTreeScope->parentTreeScope())\n@@ -414,1 +414,1 @@\n-    ASSERT(m_retargetedRelatedNode == currentTarget.treeScope().retargetToScope(m_relatedNode).ptr());\n+    ASSERT(m_retargetedRelatedNode == currentTarget.treeScope().retargetToScope(m_relatedNode.get()).ptr());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/EventPath.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include <wtf\/CheckedPtr.h>\n@@ -34,1 +35,1 @@\n-class EventPath {\n+class EventPath : public CanMakeCheckedPtr {\n@@ -44,1 +45,1 @@\n-    Vector<EventTarget*> computePathUnclosedToTarget(const EventTarget&) const;\n+    Vector<Ref<EventTarget>> computePathUnclosedToTarget(const EventTarget&) const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/EventPath.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-    Deque<RefPtr<Node>> changeQueue;\n+    Deque<GCReachableRef<Node>> changeQueue;\n@@ -570,1 +570,1 @@\n-    Deque<RefPtr<Node>> errorQueue;\n+    Deque<GCReachableRef<Node>> errorQueue;\n@@ -576,1 +576,1 @@\n-void FullscreenManager::dispatchFullscreenChangeOrErrorEvent(Deque<RefPtr<Node>>& queue, const AtomString& eventName, bool shouldNotifyMediaElement)\n+void FullscreenManager::dispatchFullscreenChangeOrErrorEvent(Deque<GCReachableRef<Node>>& queue, const AtomString& eventName, bool shouldNotifyMediaElement)\n@@ -580,6 +580,1 @@\n-        RefPtr<Node> node = queue.takeFirst();\n-        if (!node)\n-            node = documentElement();\n-        \/\/ The dispatchEvent below may have blown away our documentElement.\n-        if (!node)\n-            continue;\n+        auto node = queue.takeFirst();\n@@ -589,2 +584,4 @@\n-        if (!node->isConnected())\n-            queue.append(documentElement());\n+        if (!node->isConnected()) {\n+            if (auto* element = documentElement())\n+                queue.append(*element);\n+        }\n@@ -593,2 +590,2 @@\n-        if (shouldNotifyMediaElement && is<HTMLMediaElement>(*node))\n-            downcast<HTMLMediaElement>(*node).enteredOrExitedFullscreen();\n+        if (shouldNotifyMediaElement && is<HTMLMediaElement>(node.get()))\n+            downcast<HTMLMediaElement>(node.get()).enteredOrExitedFullscreen();\n@@ -693,1 +690,1 @@\n-    m_fullscreenChangeEventTargetQueue.append(target);\n+    m_fullscreenChangeEventTargetQueue.append(GCReachableRef(*target));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/FullscreenManager.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"GCReachableRef.h\"\n@@ -99,1 +100,1 @@\n-    void dispatchFullscreenChangeOrErrorEvent(Deque<RefPtr<Node>>&, const AtomString& eventName, bool shouldNotifyMediaElement);\n+    void dispatchFullscreenChangeOrErrorEvent(Deque<GCReachableRef<Node>>&, const AtomString& eventName, bool shouldNotifyMediaElement);\n@@ -122,2 +123,2 @@\n-    Deque<RefPtr<Node>> m_fullscreenChangeEventTargetQueue;\n-    Deque<RefPtr<Node>> m_fullscreenErrorEventTargetQueue;\n+    Deque<GCReachableRef<Node>> m_fullscreenChangeEventTargetQueue;\n+    Deque<GCReachableRef<Node>> m_fullscreenErrorEventTargetQueue;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/FullscreenManager.h","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-                m_sheet = XSLStyleSheet::createEmbedded(this, finalURL);\n+                m_sheet = XSLStyleSheet::createEmbedded(*this, finalURL);\n@@ -230,1 +230,1 @@\n-    m_sheet = XSLStyleSheet::create(this, href, baseURL);\n+    m_sheet = XSLStyleSheet::create(*this, href, baseURL);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/ProcessingInstruction.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"Element.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/TemplateContentDocumentFragment.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static Ref<TemplateContentDocumentFragment> create(Document& document, const Element* host)\n+    static Ref<TemplateContentDocumentFragment> create(Document& document, const Element& host)\n@@ -42,1 +42,1 @@\n-    const Element* host() const { return m_host; }\n+    const Element* host() const { return m_host.get(); }\n@@ -46,1 +46,1 @@\n-    TemplateContentDocumentFragment(Document& document, const Element* host)\n+    TemplateContentDocumentFragment(Document& document, const Element& host)\n@@ -54,1 +54,1 @@\n-    const Element* m_host;\n+    WeakPtr<const Element> m_host;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/TemplateContentDocumentFragment.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"Logging.h\"\n@@ -846,0 +847,5 @@\n+    if (!lastChildOfCommonAncestorInRange) {\n+        RELEASE_LOG_ERROR(TextManipulation, \"%p - TextManipulationController::replace lastChildOfCommonAncestorInRange is null\", this);\n+        return ManipulationFailureType::ContentChanged;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/TextManipulationController.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-    m_summarySlot = summarySlot.ptr();\n+    m_summarySlot = summarySlot.get();\n@@ -110,1 +110,1 @@\n-    m_defaultSummary = defaultSummary.ptr();\n+    m_defaultSummary = defaultSummary.get();\n@@ -130,1 +130,1 @@\n-    return slot == m_summarySlot;\n+    return slot == m_summarySlot.get();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLDetailsElement.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-    HTMLSlotElement* m_summarySlot { nullptr };\n-    HTMLSummaryElement* m_defaultSummary { nullptr };\n+    WeakPtr<HTMLSlotElement> m_summarySlot;\n+    WeakPtr<HTMLSummaryElement> m_defaultSummary;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLDetailsElement.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1608,0 +1608,1 @@\n+    HTMLTextFormControlElement::removedFromAncestor(removalType, oldParentOfRemovedTree);\n@@ -1612,1 +1613,4 @@\n-    HTMLTextFormControlElement::removedFromAncestor(removalType, oldParentOfRemovedTree);\n+    if (removalType.disconnectedFromDocument && m_hasPendingUserAgentShadowTreeUpdate) {\n+        document().removeElementWithPendingUserAgentShadowTreeUpdate(*this);\n+        m_hasPendingUserAgentShadowTreeUpdate = false;\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLInputElement.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -121,0 +121,1 @@\n+#include \"WebCoreJSClientData.h\"\n@@ -1488,0 +1489,5 @@\n+#elif USE(GSTREAMER)\n+    if (!url.isEmpty() && !frame->loader().willLoadMediaElementURL(url, *this)) {\n+        mediaLoadingFailed(MediaPlayer::NetworkState::FormatError);\n+        return;\n+    }\n@@ -4575,1 +4581,1 @@\n-    JSC::Identifier controllerID = JSC::Identifier::fromString(vm, \"controller\");\n+    JSC::Identifier controllerID = builtinNames(vm).controllerPublicName();\n@@ -7705,1 +7711,1 @@\n-        auto controller = JSC::Identifier::fromString(vm, \"controller\");\n+        auto controller = builtinNames(vm).controllerPublicName();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLMediaElement.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -70,2 +70,1 @@\n-        m_content = TemplateContentDocumentFragment::create(document().ensureTemplateDocument(), this);\n-\n+        m_content = TemplateContentDocumentFragment::create(document().ensureTemplateDocument(), *this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLTemplateElement.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    return m_imageElement;\n+    return m_imageElement.get();\n@@ -131,1 +131,2 @@\n-    ASSERT(m_imageElement);\n+    RefPtr imageElement = m_imageElement.get();\n+    ASSERT(imageElement);\n@@ -133,1 +134,1 @@\n-    return m_imageElement->cachedImage()->imageSizeForRenderer(m_imageElement->renderer(), frame() ? frame()->pageZoomFactor() : 1);\n+    return imageElement->cachedImage()->imageSizeForRenderer(imageElement->renderer(), frame() ? frame()->pageZoomFactor() : 1);\n@@ -259,1 +260,1 @@\n-    m_imageElement = imageElement.ptr();\n+    m_imageElement = imageElement.get();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/ImageDocument.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    ImageDocumentElement* m_imageElement;\n+    WeakPtr<ImageDocumentElement> m_imageElement;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/ImageDocument.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    HTMLMediaElement* m_mediaElement { nullptr };\n+    WeakPtr<HTMLMediaElement> m_mediaElement;\n@@ -111,1 +111,1 @@\n-    m_mediaElement = videoElement.ptr();\n+    m_mediaElement = videoElement.get();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/MediaDocument.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    HTMLModelElement* m_modelElement { nullptr };\n+    WeakPtr<HTMLModelElement> m_modelElement;\n@@ -108,1 +108,1 @@\n-    m_modelElement = modelElement.ptr();\n+    m_modelElement = modelElement.get();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/ModelDocument.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    HTMLEmbedElement* m_embedElement { nullptr };\n+    WeakPtr<HTMLEmbedElement> m_embedElement;\n@@ -96,3 +96,3 @@\n-    m_embedElement = embedElement.ptr();\n-    embedElement->setAttributeWithoutSynchronization(widthAttr, AtomString(\"100%\", AtomString::ConstructFromLiteral));\n-    embedElement->setAttributeWithoutSynchronization(heightAttr, AtomString(\"100%\", AtomString::ConstructFromLiteral));\n+    m_embedElement = embedElement.get();\n+    embedElement->setAttributeWithoutSynchronization(widthAttr, \"100%\");\n+    embedElement->setAttributeWithoutSynchronization(heightAttr, \"100%\");\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/PluginDocument.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -124,3 +124,3 @@\n-    auto contentSecurityPolicyCopy = makeUnique<ContentSecurityPolicy>(globalScope.url().isolatedCopy());\n-    contentSecurityPolicyCopy->copyStateFrom(contentSecurityPolicy);\n-    contentSecurityPolicyCopy->copyUpgradeInsecureRequestStateFrom(*contentSecurityPolicy);\n+    auto contentSecurityPolicyIsolatedCopy = makeUnique<ContentSecurityPolicy>(globalScope.url().isolatedCopy());\n+    contentSecurityPolicyIsolatedCopy->copyStateFrom(contentSecurityPolicy, ContentSecurityPolicy::ShouldMakeIsolatedCopy::Yes);\n+    contentSecurityPolicyIsolatedCopy->copyUpgradeInsecureRequestStateFrom(*contentSecurityPolicy, ContentSecurityPolicy::ShouldMakeIsolatedCopy::Yes);\n@@ -145,1 +145,1 @@\n-    m_loaderProxy.postTaskToLoader([this, request = request.isolatedCopy(), options = WTFMove(optionsCopy), contentSecurityPolicyCopy = WTFMove(contentSecurityPolicyCopy), crossOriginEmbedderPolicyCopy = WTFMove(crossOriginEmbedderPolicyCopy)](ScriptExecutionContext& context) mutable {\n+    m_loaderProxy.postTaskToLoader([this, request = WTFMove(request).isolatedCopy(), options = WTFMove(optionsCopy), contentSecurityPolicyIsolatedCopy = WTFMove(contentSecurityPolicyIsolatedCopy), crossOriginEmbedderPolicyCopy = WTFMove(crossOriginEmbedderPolicyCopy)](ScriptExecutionContext& context) mutable {\n@@ -151,1 +151,1 @@\n-        m_mainThreadLoader = DocumentThreadableLoader::create(document, *this, WTFMove(request), options->options, WTFMove(options->origin), WTFMove(contentSecurityPolicyCopy), WTFMove(crossOriginEmbedderPolicyCopy), WTFMove(options->referrer), DocumentThreadableLoader::ShouldLogError::No);\n+        m_mainThreadLoader = DocumentThreadableLoader::create(document, *this, WTFMove(request), options->options, WTFMove(options->origin), WTFMove(contentSecurityPolicyIsolatedCopy), WTFMove(crossOriginEmbedderPolicyCopy), WTFMove(options->referrer), DocumentThreadableLoader::ShouldLogError::No);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/WorkerThreadableLoader.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"Logging.h\"\n@@ -255,0 +256,3 @@\n+    ASSERT(m_page);\n+    if (!m_page)\n+        RELEASE_LOG_FAULT(Animations, \"PageOverlay::startFadeAnimation() was called on a PageOverlay without a page\");\n@@ -261,0 +265,3 @@\n+    auto controller = this->controller();\n+    ASSERT(controller);\n+\n@@ -270,1 +277,3 @@\n-    controller()->setPageOverlayOpacity(*this, m_fractionFadedIn);\n+\n+    if (controller)\n+        controller->setPageOverlayOpacity(*this, m_fractionFadedIn);\n@@ -279,2 +288,2 @@\n-        if (wasFadingOut)\n-            controller()->uninstallPageOverlay(*this, PageOverlay::FadeMode::DoNotFade);\n+        if (wasFadingOut && controller)\n+            controller->uninstallPageOverlay(*this, PageOverlay::FadeMode::DoNotFade);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/PageOverlay.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-void ContentSecurityPolicy::copyStateFrom(const ContentSecurityPolicy* other)\n+void ContentSecurityPolicy::copyStateFrom(const ContentSecurityPolicy* other, ShouldMakeIsolatedCopy shouldMakeIsolatedCopy)\n@@ -109,1 +109,1 @@\n-    m_referrer = other->m_referrer;\n+    m_referrer = shouldMakeIsolatedCopy == ShouldMakeIsolatedCopy::Yes ? other->m_referrer.isolatedCopy() : other->m_referrer;\n@@ -124,1 +124,1 @@\n-void ContentSecurityPolicy::copyUpgradeInsecureRequestStateFrom(const ContentSecurityPolicy& other)\n+void ContentSecurityPolicy::copyUpgradeInsecureRequestStateFrom(const ContentSecurityPolicy& other, ShouldMakeIsolatedCopy shouldMakeIsolatedCopy)\n@@ -127,1 +127,1 @@\n-    m_insecureNavigationRequestsToUpgrade.add(other.m_insecureNavigationRequestsToUpgrade.begin(), other.m_insecureNavigationRequestsToUpgrade.end());\n+    m_insecureNavigationRequestsToUpgrade = shouldMakeIsolatedCopy == ShouldMakeIsolatedCopy::Yes ? crossThreadCopy(other.m_insecureNavigationRequestsToUpgrade) : other.m_insecureNavigationRequestsToUpgrade;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/csp\/ContentSecurityPolicy.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -79,2 +79,3 @@\n-    void copyStateFrom(const ContentSecurityPolicy*);\n-    void copyUpgradeInsecureRequestStateFrom(const ContentSecurityPolicy&);\n+    enum class ShouldMakeIsolatedCopy : bool { No, Yes };\n+    void copyStateFrom(const ContentSecurityPolicy*, ShouldMakeIsolatedCopy = ShouldMakeIsolatedCopy::No);\n+    void copyUpgradeInsecureRequestStateFrom(const ContentSecurityPolicy&, ShouldMakeIsolatedCopy = ShouldMakeIsolatedCopy::No);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/csp\/ContentSecurityPolicy.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -123,0 +123,1 @@\n+    M(TextManipulation) \\\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/Logging.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+platform\/network\/soup\/WebKitAutoconfigProxyResolver.cpp @no-unify\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/SourcesSoup.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include <cinttypes>\n@@ -39,1 +40,1 @@\n-#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))\n+#if COMPILER(GCC_COMPATIBLE) && defined(__SSE__)\n@@ -59,1 +60,1 @@\n-        setCSR(m_savedCSR | 0x8040);\n+        setCSR(m_savedCSR | (isDAZSupported() ? 0x8040 : 0x8000));\n@@ -86,1 +87,26 @@\n-#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))\n+#if COMPILER(GCC_COMPATIBLE) && defined(__SSE__)\n+    static inline bool isDAZSupported()\n+    {\n+#if CPU(X86_64)\n+        return true;\n+#else\n+        static bool s_isInited = false;\n+        static bool s_isSupported = false;\n+        if (s_isInited)\n+            return s_isSupported;\n+\n+        struct fxsaveResult {\n+            uint8_t before[28];\n+            uint32_t CSRMask;\n+            uint8_t after[480];\n+        } __attribute__ ((aligned (16)));\n+\n+        fxsaveResult registerData;\n+        memset(&registerData, 0, sizeof(fxsaveResult));\n+        asm volatile(\"fxsave %0\" : \"=m\" (registerData));\n+        s_isSupported = registerData.CSRMask & 0x0040;\n+        s_isInited = true;\n+        return s_isSupported;\n+#endif\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/DenormalDisabler.h","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    uint32_t m_numberOfFramesToProcess { 384 };\n+    size_t m_numberOfFramesToProcess { 384 };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mock\/MockAudioDestinationCocoa.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,8 @@\n+#if PLATFORM(COCOA)\n+#include \"MockAudioSharedUnit.h\"\n+#endif\n+\n+#if USE(GSTREAMER)\n+#include \"MockRealtimeAudioSourceGStreamer.h\"\n+#endif\n+\n@@ -183,0 +191,14 @@\n+void MockRealtimeAudioSource::setIsInterrupted(bool isInterrupted)\n+{\n+    UNUSED_PARAM(isInterrupted);\n+#if PLATFORM(COCOA)\n+    if (isInterrupted)\n+        MockAudioSharedUnit::singleton().suspend();\n+    else\n+        MockAudioSharedUnit::singleton().resume();\n+#elif USE(GSTREAMER)\n+    for (auto* source : MockRealtimeAudioSourceGStreamer::allMockRealtimeAudioSources())\n+        source->setInterruptedForTesting(isInterrupted);\n+#endif\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mock\/MockRealtimeAudioSource.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+    static void setIsInterrupted(bool);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mock\/MockRealtimeAudioSource.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-void MockRealtimeMediaSourceCenter::setMockCameraIsInterrupted(bool isInterrupted)\n+void MockRealtimeMediaSourceCenter::setMockCaptureDevicesInterrupted(bool isCameraInterrupted, bool isMicrophoneInterrupted)\n@@ -322,1 +322,2 @@\n-    MockRealtimeVideoSource::setIsInterrupted(isInterrupted);\n+    MockRealtimeVideoSource::setIsInterrupted(isCameraInterrupted);\n+    MockRealtimeAudioSource::setIsInterrupted(isMicrophoneInterrupted);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mock\/MockRealtimeMediaSourceCenter.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    WEBCORE_EXPORT static void setMockCameraIsInterrupted(bool);\n+    WEBCORE_EXPORT static void setMockCaptureDevicesInterrupted(bool isCameraInterrupted, bool isMicrophoneInterrupted);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mock\/MockRealtimeMediaSourceCenter.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    static NeverDestroyed<HashSet<MockRealtimeVideoSource*>> videoSources;\n+    static MainThreadNeverDestroyed<HashSet<MockRealtimeVideoSource*>> videoSources;\n@@ -80,1 +80,0 @@\n-    ASSERT(isMainThread());\n@@ -107,1 +106,0 @@\n-    ASSERT(isMainThread());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mock\/MockRealtimeVideoSource.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -600,1 +600,1 @@\n-        if (!document().view()->hasFlippedBlockRenderers())\n+        if (!document().view() || !document().view()->hasFlippedBlockRenderers())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderBox.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2859,0 +2859,5 @@\n+    if (auto styleable = Styleable::fromRenderer(renderer())) {\n+        if (!styleable->mayHaveNonZeroOpacity())\n+            return false;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerBacking.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1739,0 +1739,4 @@\n+            \/\/ If we're changing to\/from 0 opacity, then we need to reconfigure the layer since we try to\n+            \/\/ skip backing store allocation for opacity:0.\n+            if (oldStyle && oldStyle->opacity() != newStyle.opacity() && (!oldStyle->opacity() || !newStyle.opacity()))\n+                layer.setNeedsCompositingConfigurationUpdate();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerCompositor.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -152,0 +152,24 @@\n+bool Styleable::mayHaveNonZeroOpacity() const\n+{\n+    auto* renderer = this->renderer();\n+    if (!renderer)\n+        return false;\n+\n+    if (renderer->style().opacity() != 0.0f)\n+        return true;\n+\n+    if (renderer->style().willChange() && renderer->style().willChange()->containsProperty(CSSPropertyOpacity))\n+        return true;\n+\n+    auto* effectStack = keyframeEffectStack();\n+    if (!effectStack || !effectStack->hasEffects())\n+        return false;\n+\n+    for (const auto& effect : effectStack->sortedEffects()) {\n+        if (effect->animatesProperty(CSSPropertyOpacity))\n+            return true;\n+    }\n+\n+    return false;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/Styleable.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -80,0 +80,2 @@\n+    bool mayHaveNonZeroOpacity() const;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/Styleable.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -361,0 +361,4 @@\n+#if ENABLE(MEDIA_SESSION) && USE(GLIB)\n+#include \"MediaSessionManagerGLib.h\"\n+#endif\n+\n@@ -625,0 +629,5 @@\n+\n+#if ENABLE(MEDIA_SESSION) && USE(GLIB)\n+    auto& sessionManager = reinterpret_cast<MediaSessionManagerGLib&>(PlatformMediaSessionManager::sharedManager());\n+    sessionManager.setDBusNotificationsEnabled(false);\n+#endif\n@@ -5024,3 +5033,2 @@\n-    JSC::VM& vm = lexicalGlobalObject.vm();\n-    JSVMClientData* clientData = static_cast<JSVMClientData*>(vm.clientData);\n-    const Identifier& privateName = clientData->builtinNames().cloneArrayBufferPrivateName();\n+    auto& vm = lexicalGlobalObject.vm();\n+    const Identifier& privateName = builtinNames(vm).cloneArrayBufferPrivateName();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/testing\/Internals.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-                if (JSValue failureKindValue = object->getDirect(vm, static_cast<JSVMClientData&>(*vm.clientData).builtinNames().failureKindPrivateName())) {\n+                if (JSValue failureKindValue = object->getDirect(vm, builtinNames(vm).failureKindPrivateName())) {\n@@ -479,1 +479,1 @@\n-                if (JSValue failureKindValue = object->getDirect(vm, static_cast<JSVMClientData&>(*vm.clientData).builtinNames().failureKindPrivateName())) {\n+                if (JSValue failureKindValue = object->getDirect(vm, builtinNames(vm).failureKindPrivateName())) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerOrWorkletScriptController.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,0 +94,3 @@\n+    \/\/ Make sure we delete the file before writing as there may be code using a mmap'd version of this file.\n+    FileSystem::deleteFile(scriptPath);\n+\n@@ -108,2 +111,0 @@\n-    \/\/ Make sure we delete the file before writing as there may be code using a mmap'd version of this file.\n-    FileSystem::deleteFile(scriptPath);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/SWScriptStorage.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-XSLImportRule::XSLImportRule(XSLStyleSheet* parent, const String& href)\n+XSLImportRule::XSLImportRule(XSLStyleSheet& parent, const String& href)\n@@ -37,2 +37,0 @@\n-    , m_cachedSheet(nullptr)\n-    , m_loading(false)\n@@ -56,5 +54,3 @@\n-    m_styleSheet = XSLStyleSheet::create(this, href, baseURL);\n-\n-    XSLStyleSheet* parent = parentStyleSheet();\n-    if (parent)\n-        m_styleSheet->setParentStyleSheet(parent);\n+    \/\/ FIXME: parentStyleSheet() should never be null here.\n+    RefPtr parent = parentStyleSheet();\n+    m_styleSheet = XSLStyleSheet::create(parent.get(), href, baseURL);\n@@ -76,8 +72,3 @@\n-    CachedResourceLoader* cachedResourceLoader = nullptr;\n-\n-    XSLStyleSheet* rootSheet = parentStyleSheet();\n-\n-    if (rootSheet) {\n-        while (XSLStyleSheet* parentSheet = rootSheet->parentStyleSheet())\n-            rootSheet = parentSheet;\n-    }\n+    RefPtr rootSheet = parentStyleSheet();\n+    while (auto* parentSheet = rootSheet->parentStyleSheet())\n+        rootSheet = parentSheet;\n@@ -85,2 +76,1 @@\n-    if (rootSheet)\n-        cachedResourceLoader = rootSheet->cachedResourceLoader();\n+    RefPtr cachedResourceLoader = rootSheet->cachedResourceLoader();\n@@ -89,1 +79,1 @@\n-    XSLStyleSheet* parentSheet = parentStyleSheet();\n+    RefPtr parentSheet = parentStyleSheet();\n@@ -96,1 +86,1 @@\n-    for (XSLStyleSheet* parentSheet = parentStyleSheet(); parentSheet; parentSheet = parentSheet->parentStyleSheet()) {\n+    for (RefPtr parentSheet = parentStyleSheet(); parentSheet; parentSheet = parentSheet->parentStyleSheet()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XSLImportRule.cpp","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    XSLImportRule(XSLStyleSheet* parentSheet, const String& href);\n+    XSLImportRule(XSLStyleSheet& parentSheet, const String& href);\n@@ -44,1 +44,1 @@\n-    XSLStyleSheet* parentStyleSheet() const { return m_parentStyleSheet; }\n+    XSLStyleSheet* parentStyleSheet() const { return m_parentStyleSheet.get(); }\n@@ -53,1 +53,1 @@\n-    XSLStyleSheet* m_parentStyleSheet;\n+    WeakPtr<XSLStyleSheet> m_parentStyleSheet;\n@@ -57,1 +57,1 @@\n-    bool m_loading;\n+    bool m_loading { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XSLImportRule.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-class XSLStyleSheet final : public StyleSheet {\n+class XSLStyleSheet final : public StyleSheet, public CanMakeWeakPtr<XSLStyleSheet> {\n@@ -41,1 +41,1 @@\n-    static Ref<XSLStyleSheet> create(XSLImportRule* parentImport, const String& originalURL, const URL& finalURL)\n+    static Ref<XSLStyleSheet> create(XSLStyleSheet* parentSheet, const String& originalURL, const URL& finalURL)\n@@ -43,1 +43,1 @@\n-        return adoptRef(*new XSLStyleSheet(parentImport, originalURL, finalURL));\n+        return adoptRef(*new XSLStyleSheet(parentSheet, originalURL, finalURL));\n@@ -45,1 +45,2 @@\n-    static Ref<XSLStyleSheet> create(ProcessingInstruction* parentNode, const String& originalURL, const URL& finalURL)\n+\n+    static Ref<XSLStyleSheet> create(ProcessingInstruction& parentNode, const String& originalURL, const URL& finalURL)\n@@ -47,1 +48,1 @@\n-        return adoptRef(*new XSLStyleSheet(parentNode, originalURL, finalURL, false));\n+        return adoptRef(*new XSLStyleSheet(&parentNode, originalURL, finalURL, false));\n@@ -49,1 +50,2 @@\n-    static Ref<XSLStyleSheet> createEmbedded(ProcessingInstruction* parentNode, const URL& finalURL)\n+\n+    static Ref<XSLStyleSheet> createEmbedded(ProcessingInstruction& parentNode, const URL& finalURL)\n@@ -51,1 +53,1 @@\n-        return adoptRef(*new XSLStyleSheet(parentNode, finalURL.string(), finalURL, true));\n+        return adoptRef(*new XSLStyleSheet(&parentNode, finalURL.string(), finalURL, true));\n@@ -75,1 +77,1 @@\n-    XSLStyleSheet* parentStyleSheet() const override { return m_parentStyleSheet; }\n+    XSLStyleSheet* parentStyleSheet() const override { return m_parentStyleSheet.get(); }\n@@ -90,1 +92,1 @@\n-    Node* ownerNode() const override { return m_ownerNode; }\n+    Node* ownerNode() const override { return m_ownerNode.get(); }\n@@ -100,1 +102,1 @@\n-    XSLStyleSheet(XSLImportRule* parentImport, const String& originalURL, const URL& finalURL);\n+    XSLStyleSheet(XSLStyleSheet* parentSheet, const String& originalURL, const URL& finalURL);\n@@ -107,1 +109,1 @@\n-    Node* m_ownerNode;\n+    WeakPtr<Node> m_ownerNode;\n@@ -121,1 +123,1 @@\n-    XSLStyleSheet* m_parentStyleSheet { nullptr };\n+    WeakPtr<XSLStyleSheet> m_parentStyleSheet;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XSLStyleSheet.h","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-XSLStyleSheet::XSLStyleSheet(XSLImportRule* parentRule, const String& originalURL, const URL& finalURL)\n+XSLStyleSheet::XSLStyleSheet(XSLStyleSheet* parentSheet, const String& originalURL, const URL& finalURL)\n@@ -54,0 +54,1 @@\n+    , m_parentStyleSheet(parentSheet)\n@@ -55,2 +56,0 @@\n-    if (parentRule)\n-        m_parentStyleSheet = parentRule->parentStyleSheet();\n@@ -91,1 +90,1 @@\n-    if (XSLStyleSheet* styleSheet = parentStyleSheet())\n+    if (RefPtr styleSheet = parentStyleSheet())\n@@ -235,1 +234,1 @@\n-    auto childRule = makeUnique<XSLImportRule>(this, href);\n+    auto childRule = makeUnique<XSLImportRule>(*this, href);\n@@ -270,3 +269,2 @@\n-    for (XSLStyleSheet* styleSheet = this; styleSheet; styleSheet = styleSheet->parentStyleSheet()) {\n-        Node* node = styleSheet->ownerNode();\n-        if (node)\n+    for (RefPtr styleSheet = this; styleSheet; styleSheet = styleSheet->parentStyleSheet()) {\n+        if (auto* node = styleSheet->ownerNode())\n@@ -275,1 +273,1 @@\n-    return 0;\n+    return nullptr;\n@@ -282,1 +280,1 @@\n-        XSLStyleSheet* child = import->styleSheet();\n+        RefPtr child = import->styleSheet();\n@@ -305,1 +303,1 @@\n-        xmlDocPtr result = import->styleSheet()->locateStylesheetSubResource(parentDoc, uri);\n+        xmlDocPtr result = child->locateStylesheetSubResource(parentDoc, uri);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XSLStyleSheetLibxslt.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1329,0 +1329,3 @@\n+    if (isDetached())\n+        return;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/parser\/XMLDocumentParserLibxml2.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_RESOLUTION_MEDIA_QUERY PRIVATE ON)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/OptionsJava.cmake","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -205,1 +205,0 @@\n-    WEBKIT_OPTION_DEFINE(ENABLE_RESOLUTION_MEDIA_QUERY \"Toggle resolution media query support\" PRIVATE OFF)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/WebKitFeatures.cmake","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}