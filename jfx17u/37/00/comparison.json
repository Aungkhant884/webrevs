{"files":[{"patch":"@@ -5318,7 +5318,0 @@\n-        def excludeNativeLibs = []\n-        if (IS_WINDOWS) {\n-            \/\/ List of duplicate Microsoft DLLs to exclude\n-            excludeNativeLibs += targetProperties.VS2017DLLNames\n-            excludeNativeLibs += targetProperties.WinSDKDLLNames\n-        }\n-\n@@ -5333,0 +5326,5 @@\n+            def jmodLibDir = srcLibDir\n+            if (IS_WINDOWS) {\n+                jmodLibDir = \"${srcLibDir}-jmod\"\n+            }\n+\n@@ -5335,1 +5333,23 @@\n-            def jmodTask = project.task(\"jmod$t.capital\", group: \"Build\", dependsOn: sdk) {\n+\n+            \/\/ On Windows, copy the native libraries in the jmod image\n+            \/\/ to a \"javafx\" subdir to avoid conflicting with the Microsoft\n+            \/\/ DLLs that are shipped with the JDK\n+            def jmodCopyLibTask = project.task(\"jmodCopyLib$t.capital\", type: Copy, dependsOn: sdk) {\n+                enabled = IS_WINDOWS\n+\n+                group = \"Basic\"\n+                description = \"copied Windows DLLs into javafx subdir for jmods\"\n+\n+                into jmodLibDir\n+\n+                from (srcLibDir) {\n+                    exclude(\"*.dll\")\n+                }\n+\n+                from (srcLibDir) {\n+                    include(\"*.dll\")\n+                    into(\"javafx\")\n+                }\n+            }\n+\n+            def jmodTask = project.task(\"jmod$t.capital\", group: \"Build\", dependsOn: [sdk, jmodCopyLibTask]) {\n@@ -5345,1 +5365,1 @@\n-                        if (file(srcLibDir).isDirectory()) {\n+                        if (file(jmodLibDir).isDirectory()) {\n@@ -5347,8 +5367,1 @@\n-                            args(srcLibDir)\n-                        }\n-                        \/\/ Exclude duplicate native libs from javafx.graphics.jmod\n-                        if (moduleName == \"javafx.graphics\") {\n-                            excludeNativeLibs.each { name ->\n-                                args(\"--exclude\")\n-                                args(name)\n-                            }\n+                            args(jmodLibDir)\n","filename":"build.gradle","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-    private static boolean usingModules = false;\n@@ -119,2 +118,3 @@\n-        \/\/ - try to load the native library from the same folder as this jar\n-        \/\/   (only on non-modular builds)\n+        \/\/ - try to load the native library from either ${java.home}\n+        \/\/   (for jlinked javafx modules) or from the same folder as\n+        \/\/   this jar (if using modular jars)\n@@ -133,1 +133,1 @@\n-            if (verbose && !usingModules) {\n+            if (verbose) {\n@@ -329,0 +329,45 @@\n+    private static File libDirForJRT() {\n+        String javaHome = System.getProperty(\"java.home\");\n+\n+        if (javaHome == null || javaHome.isEmpty()) {\n+            throw new UnsatisfiedLinkError(\"Cannot find java.home\");\n+        }\n+\n+        \/\/ Set the native directory based on the OS\n+        String osName = System.getProperty(\"os.name\");\n+        String relativeDir = null;\n+        if (osName.startsWith(\"Windows\")) {\n+            relativeDir = \"bin\/javafx\";\n+        } else if (osName.startsWith(\"Mac\")) {\n+            relativeDir = \"lib\";\n+        } else if (osName.startsWith(\"Linux\")) {\n+            relativeDir = \"lib\";\n+        }\n+\n+        \/\/ Location of native libraries relative to java.home\n+        return new File(javaHome + \"\/\" + relativeDir);\n+    }\n+\n+    private static File libDirForJarFile(String classUrlString) throws Exception {\n+        \/\/ Strip out the \"jar:\" and everything after and including the \"!\"\n+        String tmpStr = classUrlString.substring(4, classUrlString.lastIndexOf('!'));\n+        \/\/ Strip everything after the last \"\/\" or \"\\\" to get rid of the jar filename\n+        int lastIndexOfSlash = Math.max(tmpStr.lastIndexOf('\/'), tmpStr.lastIndexOf('\\\\'));\n+\n+        \/\/ Set the native directory based on the OS\n+        String osName = System.getProperty(\"os.name\");\n+        String relativeDir = null;\n+        if (osName.startsWith(\"Windows\")) {\n+            relativeDir = \"..\/bin\";\n+        } else if (osName.startsWith(\"Mac\")) {\n+            relativeDir = \".\";\n+        } else if (osName.startsWith(\"Linux\")) {\n+            relativeDir = \".\";\n+        }\n+\n+        \/\/ Location of native libraries relative to jar file\n+        String libDirUrlString = tmpStr.substring(0, lastIndexOfSlash)\n+                + \"\/\" + relativeDir;\n+        return new File(new URI(libDirUrlString).getPath());\n+    }\n+\n@@ -330,2 +375,2 @@\n-     * Load the native library from the same directory as the jar file\n-     * containing this class.\n+     * Load the native library either from the same directory as the jar file\n+     * containing this class, or from the Java runtime.\n@@ -335,3 +380,0 @@\n-            if (usingModules) {\n-                throw new UnsatisfiedLinkError(\"ignored\");\n-            }\n@@ -345,5 +387,4 @@\n-                    \/\/ Suppress warning messages\n-                    usingModules = true;\n-                    throw new UnsatisfiedLinkError(\"ignored\");\n-                }\n-                if (!classUrlString.startsWith(\"jar:file:\") || classUrlString.indexOf('!') == -1) {\n+                    libDir = libDirForJRT();\n+                } else if (classUrlString.startsWith(\"jar:file:\") && classUrlString.indexOf('!') > 0) {\n+                    libDir = libDirForJarFile(classUrlString);\n+                } else {\n@@ -352,20 +393,0 @@\n-                \/\/ Strip out the \"jar:\" and everything after and including the \"!\"\n-                String tmpStr = classUrlString.substring(4, classUrlString.lastIndexOf('!'));\n-                \/\/ Strip everything after the last \"\/\" or \"\\\" to get rid of the jar filename\n-                int lastIndexOfSlash = Math.max(tmpStr.lastIndexOf('\/'), tmpStr.lastIndexOf('\\\\'));\n-\n-                \/\/ Set the native directory based on the OS\n-                String osName = System.getProperty(\"os.name\");\n-                String relativeDir = null;\n-                if (osName.startsWith(\"Windows\")) {\n-                    relativeDir = \"..\/bin\";\n-                } else if (osName.startsWith(\"Mac\")) {\n-                    relativeDir = \".\";\n-                } else if (osName.startsWith(\"Linux\")) {\n-                    relativeDir = \".\";\n-                }\n-\n-                \/\/ Location of native libraries relative to jar file\n-                String libDirUrlString = tmpStr.substring(0, lastIndexOfSlash)\n-                        + \"\/\" + relativeDir;\n-                libDir = new File(new URI(libDirUrlString).getPath());\n@@ -374,0 +395,1 @@\n+                String osName = System.getProperty(\"os.name\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/utils\/NativeLibLoader.java","additions":56,"deletions":34,"binary":false,"changes":90,"status":"modified"}]}