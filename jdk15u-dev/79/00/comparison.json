{"files":[{"patch":"@@ -9952,1 +9952,1 @@\n-    void JNICALL myHandler(jvmtiEnv* jvmti_env, jint myInt, ...)\n+    void JNICALL myHandler(jvmtiEnv* jvmti_env, ...)\n@@ -9955,0 +9955,2 @@\n+          The <code>jint<\/code> argument inside <code>myHandler<\/code> needs to be extracted using\n+          the <code>va_*<\/code> syntax of the C programming language.\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,8 @@\n-static jvmtiError JNICALL IsClassUnloadingEnabled(const jvmtiEnv* env, jboolean* enabled, ...) {\n+static jvmtiError JNICALL IsClassUnloadingEnabled(const jvmtiEnv* env, ...) {\n+  jboolean* enabled = NULL;\n+  va_list ap;\n+\n+  va_start(ap, env);\n+  enabled = va_arg(ap, jboolean *);\n+  va_end(ap);\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiExtensions.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,1 +44,9 @@\n-ClassUnload(jvmtiEnv* jvmti_env, JNIEnv* jni_env, const char* name, ...) {\n+ClassUnload(jvmtiEnv* jvmti_env, ...) {\n+    JNIEnv *jni_env = NULL;\n+    va_list ap;\n+\n+    va_start(ap, jvmti_env);\n+    jni_env = va_arg(ap, JNIEnv *);\n+    const char * name = va_arg(ap, const char *);\n+    va_end(ap);\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/extension\/EX03\/ex03t001\/ex03t001.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}