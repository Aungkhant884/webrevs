{"files":[{"patch":"@@ -298,1 +298,0 @@\n-        lvarOffset = new int[]{to};\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotationPosition.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.TreeScanner;\n+import com.sun.source.util.Trees;\n+import com.sun.tools.javac.tree.JCTree;\n+import com.sun.tools.javac.tree.JCTree.*;\n+\n+import javax.annotation.processing.*;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.util.ElementFilter;\n+import java.util.Set;\n+\n+@SupportedAnnotationTypes(\"*\")\n+public class TypeAnnotationPositionProcessor extends AbstractProcessor {\n+    private Trees trees;\n+    private boolean processed = false;\n+\n+    @Override\n+    public void init(ProcessingEnvironment pe) {\n+        super.init(pe);\n+        trees = Trees.instance(pe);\n+    }\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (processed) {\n+            return false;\n+        } else {\n+            processed = true;\n+        }\n+        Set<? extends Element> elements = roundEnv.getRootElements();\n+        TypeElement typeElement = null;\n+        for (TypeElement te : ElementFilter.typesIn(elements)) {\n+            if (\"TypeAnnotationPositionTest\".equals(te.getSimpleName().toString())) {\n+                typeElement = te;\n+                break;\n+            }\n+        }\n+        for (ExecutableElement m : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n+            if (\"test\".equals(m.getSimpleName().toString())) {\n+                MethodTree methodTree = trees.getTree(m);\n+                new PositionVisitor().scan(methodTree, ((JCMethodDecl) methodTree).pos);\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static class PositionVisitor extends TreeScanner<Void, Integer> {\n+        @Override\n+        public Void scan(Tree tree, Integer p) {\n+            if (tree != null) ((JCTree) tree).pos = p;\n+            return super.scan(tree, p);\n+        }\n+    }\n+\n+    @Override\n+    public SourceVersion getSupportedSourceVersion() {\n+        return SourceVersion.latest();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/position\/TypeAnnotationPositionProcessor.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8268894\n+ * @summary Updating the type annotation position offset causes ArrayIndexOutOfBoundsException in ClassWriter\n+ * @modules jdk.compiler\/com.sun.tools.javac.tree\n+ * @compile TypeAnnotationPositionProcessor.java\n+ * @compile -processor TypeAnnotationPositionProcessor TypeAnnotationPositionTest.java\n+ *\/\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+public class TypeAnnotationPositionTest {\n+    TypeAnnotationPositionTest(char @MyTest [] bar) { }\n+\n+    @Target({ElementType.TYPE_USE})\n+    @interface MyTest {\n+    }\n+\n+    TypeAnnotationPositionTest test() {\n+        char @MyTest [] val = new char[]{'1'};\n+        return new TypeAnnotationPositionTest(val);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/position\/TypeAnnotationPositionTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}