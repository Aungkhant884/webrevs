{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+const julong MAX_GLOBAL_BUFFER_SIZE = 2 * G;\n@@ -40,0 +41,1 @@\n+const julong MAX_THREAD_BUFFER_SIZE = 2 * G;\n@@ -308,0 +310,5 @@\n+    if (options->memory_size_configured) {\n+      options->buffer_count = div_total_by_per_unit(options->memory_size, options->global_buffer_size);\n+    } else {\n+      options->memory_size = multiply(options->global_buffer_size, options->buffer_count);\n+    }\n@@ -327,1 +334,2 @@\n-  assert(options->buffer_count > 0, \"invariant\");\n+  assert(options->buffer_count >= MIN_BUFFER_COUNT, \"invariant\");\n+  assert(options->global_buffer_size >= options->thread_buffer_size, \"invariant\");\n@@ -432,0 +440,4 @@\n+  if (options->buffer_count < MIN_BUFFER_COUNT ||\n+      options->global_buffer_size < options->thread_buffer_size) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrMemorySizer.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+extern const julong MAX_GLOBAL_BUFFER_SIZE;\n+extern const julong MAX_THREAD_BUFFER_SIZE;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrMemorySizer.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -395,2 +395,4 @@\n-template <typename Argument>\n-static void log_lower_than_min_value(Argument& memory_argument, julong min_value) {\n+static const char higher_than_msg[] = \"This value is higher than the maximum size limited \";\n+static const char lower_than_msg[] = \"This value is lower than the minimum size required \";\n+template <typename Argument, char const *msg>\n+static void log_out_of_range_value(Argument& memory_argument, julong min_value) {\n@@ -400,1 +402,1 @@\n-      \"This value is lower than the minimum size required \" JULONG_FORMAT \"%c\",\n+      \"%s\" JULONG_FORMAT \"%c\", msg,\n@@ -406,1 +408,1 @@\n-    \"This value is lower than the minimum size required \" JULONG_FORMAT,\n+    \"%s\" JULONG_FORMAT, msg,\n@@ -410,0 +412,2 @@\n+static const char default_val_msg[] = \"Value default for option \";\n+static const char specified_val_msg[] = \"Value specified for option \";\n@@ -415,1 +419,2 @@\n-      \"Value specified for option \\\"%s\\\" is \" JULONG_FORMAT \"%c\",\n+      \"%s\\\"%s\\\" is \" JULONG_FORMAT \"%c\",\n+      memory_argument.is_set() ? specified_val_msg: default_val_msg,\n@@ -422,1 +427,2 @@\n-    \"Value specified for option \\\"%s\\\" is \" JULONG_FORMAT,\n+    \"%s\\\"%s\\\" is \" JULONG_FORMAT,\n+    memory_argument.is_set() ? specified_val_msg: default_val_msg,\n@@ -543,0 +549,4 @@\n+  } else if (options.thread_buffer_size_configured && options.memory_size_configured) {\n+    if (!ensure_first_gteq_second(_dcmd_memorysize, _dcmd_threadbuffersize)) {\n+      return false;\n+    }\n@@ -611,1 +621,1 @@\n-    log_lower_than_min_value(memory_argument, value);\n+    log_out_of_range_value<Argument, lower_than_msg>(memory_argument, value);\n@@ -642,0 +652,24 @@\n+template <typename Argument>\n+static bool ensure_lteq(Argument& memory_argument, const jlong value) {\n+  if ((jlong)memory_argument.value()._size > value) {\n+    log_set_value(memory_argument);\n+    log_out_of_range_value<Argument, higher_than_msg>(memory_argument, value);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+static bool ensure_valid_maximum_sizes() {\n+  if (_dcmd_globalbuffersize.is_set()) {\n+    if (!ensure_lteq(_dcmd_globalbuffersize, MAX_GLOBAL_BUFFER_SIZE)) {\n+      return false;\n+    }\n+  }\n+  if (_dcmd_threadbuffersize.is_set()) {\n+    if (!ensure_lteq(_dcmd_threadbuffersize, MAX_THREAD_BUFFER_SIZE)) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -649,1 +683,1 @@\n-  if (!ensure_valid_minimum_sizes()) {\n+  if (!ensure_valid_minimum_sizes() || !ensure_valid_maximum_sizes()) {\n@@ -658,0 +692,18 @@\n+    if (options.buffer_count < MIN_BUFFER_COUNT || options.global_buffer_size < options.thread_buffer_size) {\n+      log_set_value(_dcmd_memorysize);\n+      log_set_value(_dcmd_globalbuffersize);\n+      log_error(arguments) (\"%s \\\"%s\\\" is \" JLONG_FORMAT,\n+        _dcmd_numglobalbuffers.is_set() ? specified_val_msg: default_val_msg,\n+        _dcmd_numglobalbuffers.name(), _dcmd_numglobalbuffers.value());\n+      log_set_value(_dcmd_threadbuffersize);\n+      if (options.buffer_count < MIN_BUFFER_COUNT) {\n+        log_error(arguments) (\"numglobalbuffers \" JULONG_FORMAT \" is less than minimal value \" JULONG_FORMAT,\n+          options.buffer_count, MIN_BUFFER_COUNT);\n+        log_error(arguments) (\"Decrease globalbuffersize\/threadbuffersize or increase memorysize\");\n+      } else {\n+        log_error(arguments) (\"globalbuffersize \" JULONG_FORMAT \" is less than threadbuffersize\" JULONG_FORMAT,\n+          options.global_buffer_size, options.thread_buffer_size);\n+        log_error(arguments) (\"Decrease globalbuffersize or increase memorysize or adjust global\/threadbuffersize\");\n+      }\n+      return false;\n+    }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":61,"deletions":9,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import sun.hotspot.WhiteBox;\n@@ -42,1 +43,4 @@\n- * @run main jdk.jfr.startupargs.TestBadOptionValues\n+ * @build ClassFileInstaller\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI jdk.jfr.startupargs.TestBadOptionValues\n@@ -124,0 +128,25 @@\n+        \/\/ globalbuffersize exceeds limit\n+        test(FLIGHT_RECORDER_OPTIONS, \"This value is higher than the maximum size limit\",\n+            \"globalbuffersize=4G\");\n+\n+        \/\/ threadbuffersize exceeds limit\n+        test(FLIGHT_RECORDER_OPTIONS, \"This value is higher than the maximum size limit\",\n+            \"threadbuffersize=4G\");\n+\n+        \/\/ computed numglobalbuffers smaller than MIN_BUFFER_COUNT\n+        test(FLIGHT_RECORDER_OPTIONS, \"Decrease globalbuffersize\/threadbuffersize or increase memorysize\",\n+            \"memorysize=1m,globalbuffersize=1m\");\n+\n+        \/\/ memorysize smaller than threadbuffersize\n+        test(FLIGHT_RECORDER_OPTIONS, \"The value for option \\\"threadbuffersize\\\" should not be larger than the value specified for option \\\"memorysize\\\"\",\n+            \"memorysize=1m,threadbuffersize=2m\");\n+\n+        \/\/ computed globalbuffersize smaller than threadbuffersize\n+        \/\/ test is on when vm page isn't larger than 4K, avoiding both buffer sizes align to vm page size\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        long smallPageSize = wb.getVMPageSize();\n+        if (smallPageSize <= 4096) {\n+            test(FLIGHT_RECORDER_OPTIONS, \"Decrease globalbuffersize or increase memorysize or adjust global\/threadbuffersize\",\n+                \"memorysize=1m,numglobalbuffers=256\");\n+        }\n+\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestBadOptionValues.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -643,0 +643,5 @@\n+\n+        \/\/ threadbuffersize exceeds default memorysize\n+        tc = new TestCase(\"ThreadBufferSizeExceedMemorySize\", false);\n+        tc.setThreadBufferSizeTestParam(30, 'm');\n+        testCases.add(tc);\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestMemoryOptions.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}