{"files":[{"patch":"@@ -3169,6 +3169,6 @@\n-            \/\/ For right shifts of small integer types (bool, byte, char, short)\n-            \/\/ we need precise information about sign-ness. Only Load nodes have\n-            \/\/ this information because Store nodes are the same for signed and\n-            \/\/ unsigned values. And any arithmetic operation after a load may\n-            \/\/ expand a value to signed Int so such right shifts can't be used\n-            \/\/ because vector elements do not have upper bits of Int.\n+            \/\/ In any Java arithmetic operation, operands of small integer types\n+            \/\/ (boolean, byte, char & short) should be promoted to int first. As\n+            \/\/ vector elements of small types don't have upper bits of int, for\n+            \/\/ RShiftI or AbsI operations, the compiler has to know the precise\n+            \/\/ signedness info of the 1st operand. These operations shouldn't be\n+            \/\/ vectorized if the signedness info is imprecise.\n@@ -3176,1 +3176,2 @@\n-            if (VectorNode::is_shift(in)) {\n+            int op = in->Opcode();\n+            if (VectorNode::is_shift(in) || op == Op_AbsI) {\n@@ -3179,0 +3180,2 @@\n+                \/\/ Only Load nodes distinguish signed (LoadS\/LoadB) and unsigned\n+                \/\/ (LoadUS\/LoadUB) values. Store nodes only have one version.\n@@ -3180,4 +3183,3 @@\n-              } else if (in->Opcode() != Op_LShiftI) {\n-                \/\/ Widen type to Int to avoid creation of right shift vector\n-                \/\/ (align + data_size(s1) check in stmts_can_pack() will fail).\n-                \/\/ Note, left shifts work regardless type.\n+              } else if (op != Op_LShiftI) {\n+                \/\/ Widen type to int to avoid the creation of vector nodes. Note\n+                \/\/ that left shifts work regardless of the signedness.\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8261022\n+ * @summary Test vectorization of Math.abs() with unsigned type\n+ * @run main\/othervm compiler.vectorization.TestAbsCharVector\n+ *\/\n+\n+package compiler.vectorization;\n+\n+public class TestAbsCharVector {\n+\n+    private static int SIZE = 60000;\n+\n+    public static void main(String args[]) {\n+        char[] a = new char[SIZE];\n+        char[] b = new char[SIZE];\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            a[i] = b[i] = (char) i;\n+        }\n+\n+        for (int i = 0; i < 20000; i++) {\n+            arrayAbs(a);\n+        }\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            if (a[i] != b[i]) {\n+                throw new RuntimeException(\"Broken!\");\n+            }\n+        }\n+    }\n+\n+    private static void arrayAbs(char[] arr) {\n+        for (int i = 0; i < SIZE; i++) {\n+            arr[i] = (char) Math.abs(arr[i]);\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestAbsCharVector.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}