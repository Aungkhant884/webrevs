{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,11 +24,12 @@\n-\/*\n-  @test\n-  @key headful\n-  @bug 6533330\n-  @summary ANCESTOR_RESIZED is not sent while resizing a frame. Regression caused by 6500477.\n-  @author anthony.petrov: area=awt.toplevel\n-  @library ..\/..\/..\/regtesthelpers\n-  @build Util\n-  @run main AncestorResized\n-*\/\n-\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Insets;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.HierarchyBoundsListener;\n+import java.awt.event.HierarchyEvent;\n+import java.awt.event.InputEvent;\n@@ -37,6 +38,5 @@\n- * AncestorResized.java\n- *\n- * summary:  After fixing the 6500477, the ANCESTOR_RESIZED event stoped\n- *           firing while resizing a frame. This was a regression.\n- *           The test checks whether the event starts dispatching as it\n- *           was before fixing the 6500477.\n+ * @test\n+ * @key headful\n+ * @bug 6533330\n+ * @summary ANCESTOR_RESIZED is not sent while resizing a frame. Regression\n+ *          caused by 6500477.\n@@ -44,0 +44,1 @@\n+public class AncestorResized {\n@@ -45,7 +46,0 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import test.java.awt.regtesthelpers.Util;\n-\n-\n-public class AncestorResized\n-{\n@@ -54,1 +48,0 @@\n-\n@@ -64,2 +57,1 @@\n-    private static void init()\n-    {\n+    public static void main(String[] args) throws Exception {\n@@ -86,2 +78,2 @@\n-        Robot robot = Util.createRobot();\n-        robot.setAutoDelay(20);\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(50);\n@@ -90,1 +82,1 @@\n-        Util.waitForIdle(robot);\n+        robot.waitForIdle();\n@@ -94,0 +86,1 @@\n+            frame.dispose();\n@@ -96,1 +89,0 @@\n-            pass();\n@@ -115,1 +107,3 @@\n-        Util.waitForIdle(robot);\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.waitForIdle();\n+        frame.dispose();\n@@ -118,48 +112,1 @@\n-            robot.mouseRelease( InputEvent.BUTTON1_MASK );\n-            AncestorResized.fail(\"No ANCESTOR_RESIZED events received.\");\n-            return;\n-        }\n-\n-        robot.mouseRelease( InputEvent.BUTTON1_MASK );\n-\n-        AncestorResized.pass();\n-    }\/\/End  init()\n-\n-\n-\n-    \/*****************************************************\n-     * Standard Test Machinery Section\n-     * DO NOT modify anything in this section -- it's a\n-     * standard chunk of code which has all of the\n-     * synchronisation necessary for the test harness.\n-     * By keeping it the same in all tests, it is easier\n-     * to read and understand someone else's test, as\n-     * well as insuring that all tests behave correctly\n-     * with the test harness.\n-     * There is a section following this for test-\n-     * classes\n-     ******************************************************\/\n-    private static boolean theTestPassed = false;\n-    private static boolean testGeneratedInterrupt = false;\n-    private static String failureMessage = \"\";\n-\n-    private static Thread mainThread = null;\n-\n-    private static int sleepTime = 300000;\n-\n-    \/\/ Not sure about what happens if multiple of this test are\n-    \/\/  instantiated in the same VM.  Being static (and using\n-    \/\/  static vars), it aint gonna work.  Not worrying about\n-    \/\/  it for now.\n-    public static void main( String args[] ) throws InterruptedException\n-    {\n-        mainThread = Thread.currentThread();\n-        try\n-        {\n-            init();\n-        }\n-        catch( TestPassedException e )\n-        {\n-            \/\/The test passed, so just return from main and harness will\n-            \/\/ interepret this return as a pass\n-            return;\n+            throw new RuntimeException(\"No ANCESTOR_RESIZED events received.\");\n@@ -167,56 +114,0 @@\n-        \/\/At this point, neither test pass nor test fail has been\n-        \/\/ called -- either would have thrown an exception and ended the\n-        \/\/ test, so we know we have multiple threads.\n-\n-        \/\/Test involves other threads, so sleep and wait for them to\n-        \/\/ called pass() or fail()\n-        try\n-        {\n-            Thread.sleep( sleepTime );\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException( \"Timed out after \" + sleepTime\/1000 + \" seconds\" );\n-        }\n-        catch (InterruptedException e)\n-        {\n-            \/\/The test harness may have interrupted the test.  If so, rethrow the exception\n-            \/\/ so that the harness gets it and deals with it.\n-            if( ! testGeneratedInterrupt ) throw e;\n-\n-            \/\/reset flag in case hit this code more than once for some reason (just safety)\n-            testGeneratedInterrupt = false;\n-\n-            if ( theTestPassed == false )\n-            {\n-                throw new RuntimeException( failureMessage );\n-            }\n-        }\n-\n-    }\/\/main\n-\n-    public static synchronized void setTimeoutTo( int seconds )\n-    {\n-        sleepTime = seconds * 1000;\n-    }\n-\n-    public static synchronized void pass()\n-    {\n-        System.out.println( \"The test passed.\" );\n-        System.out.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-        \/\/first check if this is executing in main thread\n-        if ( mainThread == Thread.currentThread() )\n-        {\n-            \/\/Still in the main thread, so set the flag just for kicks,\n-            \/\/ and throw a test passed exception which will be caught\n-            \/\/ and end the test.\n-            theTestPassed = true;\n-            throw new TestPassedException();\n-        }\n-        theTestPassed = true;\n-        testGeneratedInterrupt = true;\n-        mainThread.interrupt();\n-    }\/\/pass()\n-\n-    public static synchronized void fail()\n-    {\n-        \/\/test writer didn't specify why test failed, so give generic\n-        fail( \"it just plain failed! :-)\" );\n@@ -224,24 +115,0 @@\n-\n-    public static synchronized void fail( String whyFailed )\n-    {\n-        System.out.println( \"The test failed: \" + whyFailed );\n-        System.out.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-        \/\/check if this called from main thread\n-        if ( mainThread == Thread.currentThread() )\n-        {\n-            \/\/If main thread, fail now 'cause not sleeping\n-            throw new RuntimeException( whyFailed );\n-        }\n-        theTestPassed = false;\n-        testGeneratedInterrupt = true;\n-        failureMessage = whyFailed;\n-        mainThread.interrupt();\n-    }\/\/fail()\n-\n-}\/\/ class AncestorResized\n-\n-\/\/This exception is used to exit from any level of call nesting\n-\/\/ when it's determined that the test has passed, and immediately\n-\/\/ end the test.\n-class TestPassedException extends RuntimeException\n-{\n@@ -249,40 +116,0 @@\n-\n-\/\/*********** End Standard Test Machinery Section **********\n-\n-\n-\/\/************ Begin classes defined for the test ****************\n-\n-\/\/ if want to make listeners, here is the recommended place for them, then instantiate\n-\/\/  them in init()\n-\n-\/* Example of a class which may be written as part of a test\n-class NewClass implements anInterface\n- {\n-   static int newVar = 0;\n-\n-   public void eventDispatched(AWTEvent e)\n-    {\n-      \/\/Counting events to see if we get enough\n-      eventCount++;\n-\n-      if( eventCount == 20 )\n-       {\n-         \/\/got enough events, so pass\n-\n-         AncestorResized.pass();\n-       }\n-      else if( tries == 20 )\n-       {\n-         \/\/tried too many times without getting enough events so fail\n-\n-         AncestorResized.fail();\n-       }\n-\n-    }\/\/ eventDispatched()\n-\n- }\/\/ NewClass class\n-\n-*\/\n-\n-\n-\/\/************** End classes defined for the test *******************\n","filename":"test\/jdk\/java\/awt\/event\/HierarchyEvent\/AncestorResized\/AncestorResized.java","additions":28,"deletions":201,"binary":false,"changes":229,"status":"modified"}]}