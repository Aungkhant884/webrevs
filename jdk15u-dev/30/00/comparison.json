{"files":[{"patch":"@@ -627,1 +627,1 @@\n-  writer.bytes(code, code_len);\n+  writer.write_bytes(code, code_len);\n@@ -770,2 +770,2 @@\n-      writer.bytes(stream->buffer() + orig_method_len_offset,\n-                   method_offset - orig_method_len_offset);\n+      writer.write_bytes(stream->buffer() + orig_method_len_offset,\n+                         method_offset - orig_method_len_offset);\n@@ -1093,1 +1093,1 @@\n-    writer.bytes(orig_bytecodes, orig_bytecodes_length);\n+    writer.write_bytes(orig_bytecodes, orig_bytecodes_length);\n@@ -1292,1 +1292,1 @@\n-  writer.bytes(orig_stream->buffer(), orig_access_flag_offset);\n+  writer.write_bytes(orig_stream->buffer(), orig_access_flag_offset);\n@@ -1326,2 +1326,2 @@\n-  writer.bytes(orig_stream->buffer() + orig_access_flag_offset,\n-               orig_fields_len_offset - orig_access_flag_offset);\n+  writer.write_bytes(orig_stream->buffer() + orig_access_flag_offset,\n+                     orig_fields_len_offset - orig_access_flag_offset);\n@@ -1333,1 +1333,1 @@\n-  writer.bytes(orig_stream->buffer() + orig_fields_len_offset, orig_method_len_offset - orig_fields_len_offset);\n+  writer.write_bytes(orig_stream->buffer() + orig_fields_len_offset, orig_method_len_offset - orig_fields_len_offset);\n@@ -1352,1 +1352,1 @@\n-  writer.bytes(orig_stream->buffer() + orig_method_len_offset, orig_attributes_count_offset - orig_method_len_offset);\n+  writer.write_bytes(orig_stream->buffer() + orig_method_len_offset, orig_attributes_count_offset - orig_method_len_offset);\n@@ -1374,1 +1374,1 @@\n-  writer.bytes(orig_stream->buffer() + orig_attributes_count_offset, orig_stream_size - orig_attributes_count_offset);\n+  writer.write_bytes(orig_stream->buffer() + orig_attributes_count_offset, orig_stream_size - orig_attributes_count_offset);\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    _writer->bytes(_chunk->magic(), MAGIC_LEN);\n+    _writer->write_bytes(_chunk->magic(), MAGIC_LEN);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-  _writer.write_unbuffered(data, size);\n+  assert((intptr_t)size >= 0, \"invariant\");\n+  _writer.write_unbuffered(data, (intptr_t)size);\n@@ -59,0 +60,1 @@\n+  assert((intptr_t)unflushed_size >= 0, \"invariant\");\n@@ -81,0 +83,1 @@\n+  assert((intptr_t)unflushed_size >= 0, \"invariant\");\n@@ -116,0 +119,1 @@\n+  assert((intptr_t)unflushed_size >= 0, \"invariant\");\n@@ -144,0 +148,1 @@\n+  assert((intptr_t)unflushed_size >= 0, \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    writer.bytes(_data, _size);\n+    writer.write_bytes(_data, _size);\n@@ -63,1 +63,1 @@\n-    writer.bytes(_data, _size);\n+    writer.write_bytes(_data, _size);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrBlob.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  void bytes(void* dest, const void* buf, size_t len);\n+  void write_bytes(void* dest, const void* buf, intptr_t len);\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrMemoryWriterHost.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-inline void MemoryWriterHost<Adapter, AP, AccessAssert>::bytes(void* dest, const void* buf, size_t len) {\n+inline void MemoryWriterHost<Adapter, AP, AccessAssert>::write_bytes(void* dest, const void* buf, intptr_t len) {\n@@ -33,1 +33,2 @@\n-  memcpy(dest, buf, len); \/\/ no encoding\n+  assert(len >= 0, \"invariant\");\n+  memcpy(dest, buf, (size_t)len); \/\/ no encoding\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrMemoryWriterHost.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+  void write_bytes(const u1* buf, intptr_t len);\n+\n@@ -45,1 +47,1 @@\n-  void bytes(void* dest, const void* src, size_t len);\n+  void write_bytes(void* dest, const void* src, intptr_t len);\n@@ -53,1 +55,1 @@\n-  void write_unbuffered(const void* src, size_t len);\n+  void write_unbuffered(const void* src, intptr_t len);\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrStreamWriterHost.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,2 +64,3 @@\n-inline void StreamWriterHost<Adapter, AP>::bytes(void* dest, const void* buf, size_t len) {\n-  if (len > this->available_size()) {\n+inline void StreamWriterHost<Adapter, AP>::write_bytes(void* dest, const void* buf, intptr_t len) {\n+  assert(len >= 0, \"invariant\");\n+  if (len > (intptr_t)this->available_size()) {\n@@ -69,1 +70,14 @@\n-  MemoryWriterHost<Adapter, AP>::bytes(dest, buf, len);\n+  MemoryWriterHost<Adapter, AP>::write_bytes(dest, buf, len);\n+}\n+\n+template <typename Adapter, typename AP>\n+inline void StreamWriterHost<Adapter, AP>::write_bytes(const u1* buf, intptr_t len) {\n+  assert(len >= 0, \"invariant\");\n+  while (len > 0) {\n+    const unsigned int nBytes = len > INT_MAX ? INT_MAX : (unsigned int)len;\n+    const ssize_t num_written = (ssize_t)os::write(_fd, buf, nBytes);\n+    guarantee(num_written > 0, \"Nothing got written, or os::write() failed\");\n+    _stream_pos += num_written;\n+    len -= num_written;\n+    buf += num_written;\n+  }\n@@ -76,1 +90,1 @@\n-  _stream_pos += os::write(_fd, this->start_pos(), (unsigned int)size);\n+  this->write_bytes(this->start_pos(), (intptr_t)size);\n@@ -109,1 +123,1 @@\n-void StreamWriterHost<Adapter, AP>::write_unbuffered(const void* buf, size_t len) {\n+void StreamWriterHost<Adapter, AP>::write_unbuffered(const void* buf, intptr_t len) {\n@@ -112,5 +126,1 @@\n-  while (len > 0) {\n-    const unsigned int n = MIN2((unsigned int)len, (unsigned int)INT_MAX);\n-    _stream_pos += os::write(_fd, buf, n);\n-    len -= n;\n-  }\n+  this->write_bytes((const u1*)buf, len);\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrStreamWriterHost.inline.hpp","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-  void bytes(const void* buf, size_t len);\n+  void write_bytes(const void* buf, intptr_t len);\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrWriterHost.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -294,2 +294,3 @@\n-void WriterHost<BE, IE, WriterPolicyImpl>::bytes(const void* buf, size_t len) {\n-  u1* const pos = this->ensure_size(len);\n+void WriterHost<BE, IE, WriterPolicyImpl>::write_bytes(const void* buf, intptr_t len) {\n+  assert(len >= 0, \"invariant\");\n+  u1* const pos = this->ensure_size((size_t)len);\n@@ -297,1 +298,1 @@\n-    WriterPolicyImpl::bytes(pos, buf, len); \/\/ WriterPolicyImpl responsible for position update\n+    WriterPolicyImpl::write_bytes(pos, buf, len); \/\/ WriterPolicyImpl responsible for position update\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrWriterHost.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}