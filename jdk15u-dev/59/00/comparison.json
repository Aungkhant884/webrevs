{"files":[{"patch":"@@ -1344,0 +1344,1 @@\n+                        Kinds.Kind symKind = cs.kind;\n@@ -1345,1 +1346,1 @@\n-                        if (cs.kind == ERR) {\n+                        if (symKind == ERR) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8256809\n+ * @summary Verify that erroneous symbols have their type fixed between rounds\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask toolbox.JarTask toolbox.TestRunner\n+ *      JavacTestingAbstractProcessor\n+ * @run main ErrClassSymbolTypeFixed\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.util.ElementFilter;\n+import javax.tools.Diagnostic;\n+import javax.tools.JavaFileObject;\n+\n+import toolbox.JavacTask;\n+import toolbox.JarTask;\n+import toolbox.Task;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class ErrClassSymbolTypeFixed extends TestRunner {\n+\n+    private static final String A_JAVA = \"package t1; public @interface A {}\";\n+    private static final String B_JAVA = \"package t2; public class B {}\";\n+    private static final String C_JAVA = \"package t3; import t2.B; public class C extends B {}\";\n+    private static final String D_JAVA = \"import t1.A; import t3.C; import t2.B; @A public class D {}\";\n+\n+    private ToolBox tb;\n+\n+    public ErrClassSymbolTypeFixed() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new ErrClassSymbolTypeFixed().runTests();\n+    }\n+\n+    @Test\n+    public void testErrorFixed() throws Exception {\n+        Path base = Paths.get(\".\");\n+        Path src1 = base.resolve(\"src1\");\n+        Path src2 = base.resolve(\"src2\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        \/*\n+         *  Create and compile the following:\n+         *  A: annotation type\n+         *  B: basic class\n+         *  C: subclass of B\n+         *\/\n+        tb.writeJavaFiles(src1, A_JAVA, B_JAVA, C_JAVA);\n+\n+        new JavacTask(tb)\n+        .outdir(classes)\n+        .files(tb.findJavaFiles(src1))\n+        .run()\n+        .writeAll()\n+        .getOutput(Task.OutputKind.DIRECT);\n+\n+        \/\/ Create a Jar containing only C to include later in the classpath\n+        Path jarPath = base.resolve(\"test.jar\");\n+        new JarTask(tb, jarPath)\n+        .baseDir(classes)\n+        .files(\"t3\")\n+        .run()\n+        .writeAll()\n+        .getOutput(Task.OutputKind.DIRECT);\n+\n+        \/\/ Delete B from the classpath\n+        Files.delete(classes.resolve(\"t2\").resolve(\"B.class\"));\n+\n+        \/*\n+         *  Write and compile D, which has the following properties:\n+         *  - is annotated with A, causing our processor to regenerate B\n+         *  - imports C before B\n+         *\/\n+        tb.writeJavaFiles(src2, D_JAVA);\n+\n+        \/\/ If the erroneous ClassSymbol is not reset between rounds,\n+        \/\/ a NullPointerException will occur later during flow analysis.\n+        new JavacTask(tb)\n+        .classpath(classes, jarPath)\n+        .options(\"-processor\", ErrClassSymbolProcessor.class.getName(),\n+                \"--processor-path\", System.getProperty(\"test.class.path\"))\n+        .outdir(classes)\n+        .files(tb.findJavaFiles(src2))\n+        .run()\n+        .writeAll()\n+        .getOutput(Task.OutputKind.DIRECT);\n+    }\n+\n+    @SupportedAnnotationTypes(\"t1.A\")\n+    public static class ErrClassSymbolProcessor extends JavacTestingAbstractProcessor {\n+\n+        @Override\n+        public final boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            for (TypeElement te : ElementFilter.typesIn(roundEnv.getRootElements())) {\n+                createFile(te);\n+            }\n+            return true;\n+        }\n+\n+        private void createFile(TypeElement te) {\n+            \/\/ Generate B.java when the processor reads the @A annotation on D\n+            if (\"D\".equals(te.getSimpleName().toString())) {\n+                try {\n+                    JavaFileObject fo = processingEnv.getFiler().createSourceFile(\"B\");\n+                    try (Writer out = fo.openWriter()) {\n+                        out.write(B_JAVA);\n+                    }\n+                } catch (IOException e) {\n+                    messager.printMessage(Diagnostic.Kind.ERROR, \"problem writing file: \" + e);\n+                }\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/ErrClassSymbolTypeFixed.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}