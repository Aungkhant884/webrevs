{"files":[{"patch":"@@ -1569,0 +1569,4 @@\n+            if (hasDotOrDotDot(inode.name)) {\n+                throw new ZipException(\"ZIP file can't be opened as a file system \" +\n+                        \"because an entry has a '.' or '..' element in its name\");\n+            }\n@@ -1585,0 +1589,38 @@\n+    \/**\n+     * Check Inode.name to see if it includes a \".\" or \"..\" in the name array\n+     * @param path  the path as stored in Inode.name to verify\n+     * @return true if the path contains a \".\" or \"..\" entry; false otherwise\n+     *\/\n+    private boolean hasDotOrDotDot(byte[] path) {\n+        \/\/ Inode.name always includes \"\/\" in path[0]\n+        assert path[0] == '\/';\n+        if (path.length == 1) {\n+            return false;\n+        }\n+        int index = 1;\n+        while (index < path.length) {\n+            int starting = index;\n+            while (index < path.length && path[index] != '\/') {\n+                index++;\n+            }\n+            \/\/ Check the path snippet for a \".\" or \"..\"\n+            if (isDotOrDotDotPath(path, starting, index)) {\n+                return true;\n+            }\n+            index++;\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Check the path to see if it includes a \".\" or \"..\"\n+     * @param path  the path to check\n+     * @return true if the path contains a \".\" or \"..\" entry; false otherwise\n+     *\/\n+    private boolean isDotOrDotDotPath(byte[] path, int start, int index) {\n+        int pathLen = index - start;\n+        if ((pathLen == 1 && path[start] == '.'))\n+            return true;\n+        return (pathLen == 2 && path[start] == '.') && path[start + 1] == '.';\n+    }\n+\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,3 @@\n+ * The Zip file system provider does not support opening an existing Zip file\n+ * that contains entries with \".\" or \"..\" in its name elements.\n+ *\n","filename":"src\/jdk.zipfs\/share\/classes\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import java.util.zip.CRC32;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\/**\n+ * @test\n+ * @bug 8251329\n+ * @summary Excercise Zip FS with \".\" or \"..\" in a Zip Entry name\n+ * @modules jdk.zipfs\n+ * @run testng\/othervm HasDotDotTest\n+ *\/\n+public class HasDotDotTest {\n+    \/\/ Zip file to be created\n+    private static final Path ZIPFILE = Path.of(\"zipfsDotDotTest.zip\");\n+    \/\/ Data for Zip entries\n+    private static final byte[] ENTRY_DATA =\n+            \"Tennis Anyone\".getBytes(StandardCharsets.UTF_8);\n+    \/\/ Display output\n+    private static final boolean DEBUG = false;\n+\n+    \/**\n+     * DataProvider containing Zip entry names which should result in an IOException\n+     * @return Array of Zip entry names\n+     *\/\n+    @DataProvider\n+    private Object[][] checkForDotOrDotDotPaths() {\n+        return new Object[][]{\n+                {\"\/.\/foo\"},\n+                {\"\/..\/foo\"},\n+                {\"\/..\/foo\/..\"},\n+                {\"\/foo\/..\"},\n+                {\"\/foo\/.\"},\n+                {\"\/..\"},\n+                {\"\/.\"},\n+                {\"\/.foo\/.\/\"},\n+                {\"\/..\/.\/\"},\n+        };\n+    }\n+\n+    \/\/ Zip entry names to create a Zip file with for validating they are not\n+    \/\/ interpreted as a \".\" or \"..\" entry\n+    private final String[] VALID_PATHS =\n+            {\"\/foo.txt\", \"\/..foo.txt\", \"\/.foo.txt\", \"\/.foo\/bar.txt\", \"\/foo\/bar.txt\"};\n+    \/\/ Paths to be returned from Files::walk via Zip FS\n+    private final String[] EXPECTED_PATHS =\n+            {\"\/\", \"\/..foo.txt\", \"\/foo.txt\", \"\/.foo.txt\", \"\/.foo\",\n+                    \"\/.foo\/bar.txt\", \"\/foo\/bar.txt\", \"\/foo\"};\n+\n+    \/**\n+     * Creates a Zip file\n+     * @param zip path for Zip to be created\n+     * @param entries  the entries to add to the Zip file\n+     * @throws IOException  if an error occurs\n+     *\/\n+    private static void createZip(Path zip, String... entries) throws IOException {\n+        try (var os = Files.newOutputStream(zip);\n+             ZipOutputStream zos = new ZipOutputStream(os)) {\n+            for (var e : entries) {\n+                var ze = new ZipEntry(e);\n+                var crc = new CRC32();\n+                ze.setMethod(ZipEntry.STORED);\n+                crc.update(ENTRY_DATA);\n+                ze.setCrc(crc.getValue());\n+                ze.setSize(ENTRY_DATA.length);\n+                zos.putNextEntry(ze);\n+                zos.write(ENTRY_DATA);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Test to validate an IOException is thrown when opening a Zip file using\n+     * Zip FS and the path contains a \".\" or \"..\"\n+     * @param path\n+     * @throws IOException\n+     *\/\n+    @Test(dataProvider = \"checkForDotOrDotDotPaths\")\n+    public void hasDotOrDotDotTest(String path) throws IOException {\n+        if (DEBUG) {\n+            System.out.printf(\"Validating entry: %s%n\", path);\n+        }\n+        Files.deleteIfExists(ZIPFILE);\n+        createZip(ZIPFILE, path);\n+        assertThrows(IOException.class, () ->\n+                FileSystems.newFileSystem(ZIPFILE, Map.of()));\n+        Files.deleteIfExists(ZIPFILE);\n+    }\n+\n+    \/**\n+     * Validate that an entry with a name containing a \".\" or \"..\" can be\n+     * accessed via Files::walk\n+     * @throws IOException if an error occurs\n+     *\/\n+    @Test\n+    public void validPaths() throws IOException {\n+        Files.deleteIfExists(ZIPFILE);\n+        createZip(ZIPFILE, VALID_PATHS);\n+        \/*\n+          Walk through the Zip file and collect the Zip FS entries\n+         *\/\n+        try (FileSystem zipfs = FileSystems.newFileSystem(ZIPFILE)) {\n+            Path zipRoot = zipfs.getPath(\"\/\");\n+            try (Stream<Path> files = Files.walk(zipRoot, Integer.MAX_VALUE)) {\n+                var entries = files.map(Path::toString)\n+                        .sorted()\n+                        .toArray(String[]::new);\n+                if (DEBUG) {\n+                    for (String zipEntry : entries) {\n+                        System.out.println(zipEntry);\n+                    }\n+                }\n+                Arrays.sort(EXPECTED_PATHS);\n+                assertTrue(Arrays.equals(entries, EXPECTED_PATHS));\n+            }\n+        }\n+        Files.deleteIfExists(ZIPFILE);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/HasDotDotTest.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"}]}