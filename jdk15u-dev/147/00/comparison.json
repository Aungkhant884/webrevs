{"files":[{"patch":"@@ -443,1 +443,2 @@\n-   HARFBUZZ_CFLAGS := -DHAVE_OT -DHAVE_FALLBACK -DHAVE_UCDN -DHAVE_ROUND\n+   # Modern HarfBuzz requires c++11.\n+   HARFBUZZ_CXXFLAGS := -std=c++11\n@@ -468,1 +469,1 @@\n-        undef missing-field-initializers\n+        undef missing-field-initializers range-loop-analysis\n@@ -523,1 +524,1 @@\n-    CXXFLAGS := $(CXXFLAGS_JDKLIB) $(LIBFONTMANAGER_CFLAGS), \\\n+    CXXFLAGS := $(CXXFLAGS_JDKLIB) $(LIBFONTMANAGER_CFLAGS) $(HARFBUZZ_CXXFLAGS), \\\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## Harfbuzz v2.3.1\n+## Harfbuzz v2.7.2\n@@ -5,1 +5,1 @@\n-http:\/\/cgit.freedesktop.org\/harfbuzz\/tree\/COPYING\n+https:\/\/github.com\/harfbuzz\/harfbuzz\/blob\/master\/COPYING\n@@ -9,1 +9,1 @@\n-HarfBuzz is licensed under the so-called \"Old MIT\" license. Details follow.\n+HarfBuzz is licensed under the so-called \"Old MIT\" license.  Details follow.\n@@ -13,1 +13,3 @@\n-Copyright © 2010,2011,2012  Google, Inc.\n+Copyright © 2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020  Google, Inc.\n+Copyright © 2018,2019,2020  Ebrahim Byagowi\n+Copyright © 2019,2020  Facebook, Inc. \n","filename":"src\/java.desktop\/share\/legal\/harfbuzz.md","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,126 +0,0 @@\n-\/*\n- * Copyright © 2018  Ebrahim Byagowi\n- *\n- *  This is part of HarfBuzz, a text shaping library.\n- *\n- * Permission is hereby granted, without written agreement and without\n- * license or royalty fees, to use, copy, modify, and distribute this\n- * software and its documentation for any purpose, provided that the\n- * above copyright notice and the following two paragraphs appear in\n- * all copies of this software.\n- *\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n- * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n- * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n- * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n- * DAMAGE.\n- *\n- * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n- * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n- * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n- * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n- *\/\n-\n-#ifndef HB_AAT_FDSC_TABLE_HH\n-#define HB_AAT_FDSC_TABLE_HH\n-\n-#include \"hb-aat-layout-common.hh\"\n-#include \"hb-open-type.hh\"\n-\n-\/*\n- * fdsc -- Font descriptors\n- * https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM06\/Chap6fdsc.html\n- *\/\n-#define HB_AAT_TAG_fdsc HB_TAG('f','d','s','c')\n-\n-\n-namespace AAT {\n-\n-\n-struct FontDescriptor\n-{\n-  bool has_data () const { return tag; }\n-\n-  int cmp (hb_tag_t a) const { return tag.cmp (a); }\n-\n-  float get_value () const { return u.value.to_float (); }\n-\n-  enum non_alphabetic_value_t {\n-    Alphabetic          = 0,\n-    Dingbats            = 1,\n-    PiCharacters        = 2,\n-    Fleurons            = 3,\n-    DecorativeBorders   = 4,\n-    InternationalSymbols= 5,\n-    MathSymbols         = 6\n-  };\n-\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (c->check_struct (this));\n-  }\n-\n-  protected:\n-  Tag           tag;            \/* The 4-byte table tag name. *\/\n-  union {\n-  Fixed         value;          \/* The value for the descriptor tag. *\/\n-  HBUINT32      nalfType;       \/* If the tag is `nalf`, see non_alphabetic_value_t *\/\n-  } u;\n-  public:\n-  DEFINE_SIZE_STATIC (8);\n-};\n-\n-struct fdsc\n-{\n-  static constexpr hb_tag_t tableTag = HB_AAT_TAG_fdsc;\n-\n-  enum {\n-    Weight       = HB_TAG ('w','g','h','t'),\n-                                \/* Percent weight relative to regular weight.\n-                                 * (defaul value: 1.0) *\/\n-    Width        = HB_TAG ('w','d','t','h'),\n-                                \/* Percent width relative to regular width.\n-                                 * (default value: 1.0) *\/\n-    Slant        = HB_TAG ('s','l','n','t'),\n-                                \/* Angle of slant in degrees, where positive\n-                                 * is clockwise from straight up.\n-                                 * (default value: 0.0) *\/\n-    OpticalSize  = HB_TAG ('o','p','s','z'),\n-                                \/* Point size the font was designed for.\n-                                 * (default value: 12.0) *\/\n-    NonAlphabetic= HB_TAG ('n','a','l','f')\n-                                \/* These values are treated as integers,\n-                                 * not fixed32s. 0 means alphabetic, and greater\n-                                 * integers mean the font is non-alphabetic (e.g. symbols).\n-                                 * (default value: 0) *\/\n-  };\n-\n-  const FontDescriptor &get_descriptor (hb_tag_t style) const\n-  { return descriptors.lsearch (style); }\n-\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (c->check_struct (this) &&\n-                  descriptors.sanitize (c));\n-  }\n-\n-  protected:\n-  Fixed         version;        \/* Version number of the font descriptors\n-                                 * table (0x00010000 for the current version). *\/\n-  LArrayOf<FontDescriptor>\n-                descriptors;    \/* List of tagged-coordinate pairs style descriptors\n-                                 * that will be included to characterize this font.\n-                                 * Each descriptor consists of a <tag, value> pair.\n-                                 * These pairs are located in the gxFontDescriptor\n-                                 * array that follows. *\/\n-  public:\n-  DEFINE_SIZE_ARRAY (8, descriptors);\n-};\n-\n-} \/* namespace AAT *\/\n-\n-\n-#endif \/* HB_AAT_FDSC_TABLE_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-fdsc-table.hh","additions":0,"deletions":126,"binary":false,"changes":126,"status":"deleted"},{"patch":"@@ -69,1 +69,1 @@\n-      return Null(Anchor);\n+      return Null (Anchor);\n@@ -79,0 +79,1 @@\n+                          c->check_range (this, anchorData) &&\n@@ -85,1 +86,1 @@\n-  LOffsetTo<Lookup<NNOffsetTo<GlyphAnchors> > >\n+  LOffsetTo<Lookup<NNOffsetTo<GlyphAnchors>>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-ankr-table.hh","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  GlyphID       stdGlyph;       \/* The specific glyph index number in this\n+  HBGlyphID     stdGlyph;       \/* The specific glyph index number in this\n@@ -104,1 +104,1 @@\n-    return_trace (c->check_struct (this) && lookupTable.sanitize (c));\n+    return_trace (likely (c->check_struct (this) && lookupTable.sanitize (c)));\n@@ -108,1 +108,1 @@\n-  GlyphID       stdGlyph;       \/* ditto *\/\n+  HBGlyphID     stdGlyph;       \/* ditto *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-bsln-table.hh","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,2 +96,2 @@\n-  GlyphID       last;           \/* Last GlyphID in this segment *\/\n-  GlyphID       first;          \/* First GlyphID in this segment *\/\n+  HBGlyphID     last;           \/* Last GlyphID in this segment *\/\n+  HBGlyphID     first;          \/* First GlyphID in this segment *\/\n@@ -128,1 +128,1 @@\n-  VarSizedBinSearchArrayOf<LookupSegmentSingle<T> >\n+  VarSizedBinSearchArrayOf<LookupSegmentSingle<T>>\n@@ -156,2 +156,2 @@\n-  template <typename T2>\n-  bool sanitize (hb_sanitize_context_t *c, const void *base, T2 user_data) const\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, const void *base, Ts&&... ds) const\n@@ -162,1 +162,1 @@\n-                  valuesZ.sanitize (c, base, last - first + 1, user_data));\n+                  valuesZ.sanitize (c, base, last - first + 1, hb_forward<Ts> (ds)...));\n@@ -165,3 +165,3 @@\n-  GlyphID       last;           \/* Last GlyphID in this segment *\/\n-  GlyphID       first;          \/* First GlyphID in this segment *\/\n-  NNOffsetTo<UnsizedArrayOf<T> >\n+  HBGlyphID     last;           \/* Last GlyphID in this segment *\/\n+  HBGlyphID     first;          \/* First GlyphID in this segment *\/\n+  NNOffsetTo<UnsizedArrayOf<T>>\n@@ -199,1 +199,1 @@\n-  VarSizedBinSearchArrayOf<LookupSegmentArray<T> >\n+  VarSizedBinSearchArrayOf<LookupSegmentArray<T>>\n@@ -225,1 +225,1 @@\n-  GlyphID       glyph;          \/* Last GlyphID *\/\n+  HBGlyphID     glyph;          \/* Last GlyphID *\/\n@@ -256,1 +256,1 @@\n-  VarSizedBinSearchArrayOf<LookupSingle<T> >\n+  VarSizedBinSearchArrayOf<LookupSingle<T>>\n@@ -287,1 +287,1 @@\n-  GlyphID       firstGlyph;     \/* First glyph index included in the trimmed array. *\/\n+  HBGlyphID     firstGlyph;     \/* First glyph index included in the trimmed array. *\/\n@@ -306,1 +306,1 @@\n-      return Null(T);\n+      return Null (T);\n@@ -329,1 +329,1 @@\n-  GlyphID       firstGlyph;     \/* First glyph index included in the trimmed array. *\/\n+  HBGlyphID     firstGlyph;     \/* First glyph index included in the trimmed array. *\/\n@@ -361,1 +361,1 @@\n-      return v ? *v : Null(T);\n+      return v ? *v : Null (T);\n@@ -421,9 +421,5 @@\n-template <>\n-\/*static*\/ inline const AAT::Lookup<OT::HBUINT16>& Null<AAT::Lookup<OT::HBUINT16> > ()\n-{ return *reinterpret_cast<const AAT::Lookup<OT::HBUINT16> *> (_hb_Null_AAT_Lookup); }\n-template <>\n-\/*static*\/ inline const AAT::Lookup<OT::HBUINT32>& Null<AAT::Lookup<OT::HBUINT32> > ()\n-{ return *reinterpret_cast<const AAT::Lookup<OT::HBUINT32> *> (_hb_Null_AAT_Lookup); }\n-template <>\n-\/*static*\/ inline const AAT::Lookup<OT::Offset<OT::HBUINT16, false> >& Null<AAT::Lookup<OT::Offset<OT::HBUINT16, false> > > ()\n-{ return *reinterpret_cast<const AAT::Lookup<OT::Offset<OT::HBUINT16, false> > *> (_hb_Null_AAT_Lookup); }\n+template <typename T>\n+struct Null<AAT::Lookup<T>> {\n+  static AAT::Lookup<T> const & get_null ()\n+  { return *reinterpret_cast<const AAT::Lookup<T> *> (_hb_Null_AAT_Lookup); }\n+};\n@@ -517,1 +513,1 @@\n-      klass = StateTable<Types, Entry<Extra> >::CLASS_OUT_OF_BOUNDS;\n+      klass = StateTable<Types, Entry<Extra>>::CLASS_OUT_OF_BOUNDS;\n@@ -583,1 +579,1 @@\n-            num_entries = MAX<unsigned int> (num_entries, *(p - 1) + 1);\n+            num_entries = hb_max (num_entries, *(p - 1) + 1);\n@@ -604,1 +600,1 @@\n-            num_entries = MAX<unsigned int> (num_entries, *p + 1);\n+            num_entries = hb_max (num_entries, *p + 1);\n@@ -618,2 +614,2 @@\n-          min_state = MIN (min_state, newState);\n-          max_state = MAX (max_state, newState);\n+          min_state = hb_min (min_state, newState);\n+          max_state = hb_max (max_state, newState);\n@@ -638,1 +634,1 @@\n-  NNOffsetTo<UnsizedArrayOf<Entry<Extra> >, HBUINT>\n+  NNOffsetTo<UnsizedArrayOf<Entry<Extra>>, HBUINT>\n@@ -665,1 +661,1 @@\n-  GlyphID               firstGlyph;     \/* First glyph index included in the trimmed array. *\/\n+  HBGlyphID             firstGlyph;     \/* First glyph index included in the trimmed array. *\/\n@@ -685,1 +681,1 @@\n-    return (offset - ((const char *) array - (const char *) base)) \/ sizeof (T);\n+    return (offset - ((const char *) array - (const char *) base)) \/ T::static_size;\n@@ -827,1 +823,0 @@\n-  unsigned int debug_depth;\n@@ -832,1 +827,1 @@\n-                                      hb_blob_t *blob = const_cast<hb_blob_t *> (&Null(hb_blob_t)));\n+                                      hb_blob_t *blob = const_cast<hb_blob_t *> (&Null (hb_blob_t)));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-common.hh","additions":30,"deletions":35,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -50,2 +50,1 @@\n-  void get_info (hb_aat_layout_feature_selector_info_t *s,\n-                        hb_aat_layout_feature_selector_t default_selector) const\n+  hb_aat_layout_feature_selector_info_t get_info (hb_aat_layout_feature_selector_t default_selector) const\n@@ -53,8 +52,8 @@\n-    s->name_id = nameIndex;\n-\n-    s->enable = (hb_aat_layout_feature_selector_t) (unsigned int) setting;\n-    s->disable = default_selector == HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID ?\n-                 (hb_aat_layout_feature_selector_t) (s->enable + 1) :\n-                 default_selector;\n-\n-    s->reserved = 0;\n+    return {\n+      nameIndex,\n+      (hb_aat_layout_feature_selector_t) (unsigned int) setting,\n+      default_selector == HB_AAT_LAYOUT_FEATURE_SELECTOR_INVALID\n+        ? (hb_aat_layout_feature_selector_t) (setting + 1)\n+        : default_selector,\n+      0\n+    };\n@@ -120,3 +119,4 @@\n-      hb_array_t<const SettingName> arr = settings_table.sub_array (start_offset, selectors_count);\n-      for (unsigned int i = 0; i < arr.length; i++)\n-        settings_table[start_offset + i].get_info (&selectors[i], default_selector);\n+      + settings_table.sub_array (start_offset, selectors_count)\n+      | hb_map ([=] (const SettingName& setting) { return setting.get_info (default_selector); })\n+      | hb_sink (hb_array (selectors, *selectors_count))\n+      ;\n@@ -132,0 +132,5 @@\n+  bool is_exclusive () const { return featureFlags & Exclusive; }\n+\n+  \/* A FeatureName with no settings is meaningless *\/\n+  bool has_data () const { return nSettings; }\n+\n@@ -142,1 +147,1 @@\n-  LOffsetTo<UnsizedArrayOf<SettingName>, false>\n+  LNNOffsetTo<UnsizedArrayOf<SettingName>>\n@@ -165,2 +170,1 @@\n-    unsigned int feature_count = featureNameCount;\n-    if (count && *count)\n+    if (count)\n@@ -168,4 +172,4 @@\n-      unsigned int len = MIN (feature_count - start_offset, *count);\n-      for (unsigned int i = 0; i < len; i++)\n-        features[i] = namesZ[i + start_offset].get_feature_type ();\n-      *count = len;\n+      + namesZ.as_array (featureNameCount).sub_array (start_offset, count)\n+      | hb_map (&FeatureName::get_feature_type)\n+      | hb_sink (hb_array (features, *count))\n+      ;\n@@ -176,0 +180,3 @@\n+  bool exposes_feature (hb_aat_layout_feature_type_t feature_type) const\n+  { return get_feature (feature_type).has_data (); }\n+\n@@ -177,3 +184,1 @@\n-  {\n-    return namesZ.bsearch (featureNameCount, feature_type);\n-  }\n+  { return namesZ.bsearch (featureNameCount, feature_type); }\n@@ -212,1 +217,1 @@\n-  DEFINE_SIZE_STATIC (24);\n+  DEFINE_SIZE_ARRAY (12, namesZ);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-feat-table.hh","additions":29,"deletions":24,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  Fixed         lowerLimit;     \/* If the distance factor is less than this value,\n+  HBFixed       lowerLimit;     \/* If the distance factor is less than this value,\n@@ -75,1 +75,1 @@\n-  Fixed         upperLimit;     \/* If the distance factor is greater than this value,\n+  HBFixed       upperLimit;     \/* If the distance factor is greater than this value,\n@@ -103,1 +103,1 @@\n-  GlyphID       addGlyph;       \/* Glyph that should be added if the distance factor\n+  HBGlyphID     addGlyph;       \/* Glyph that should be added if the distance factor\n@@ -121,1 +121,1 @@\n-  Fixed         substThreshold; \/* Distance growth factor (in ems) at which\n+  HBFixed       substThreshold; \/* Distance growth factor (in ems) at which\n@@ -124,1 +124,1 @@\n-  GlyphID       addGlyph;       \/* Glyph to be added as kashida. If this value is\n+  HBGlyphID     addGlyph;       \/* Glyph to be added as kashida. If this value is\n@@ -128,1 +128,1 @@\n-  GlyphID       substGlyph;     \/* Glyph to be substituted for this glyph if the\n+  HBGlyphID     substGlyph;     \/* Glyph to be substituted for this glyph if the\n@@ -149,1 +149,1 @@\n-  Fixed         minimumLimit;   \/* The lowest value for the ductility axis tha\n+  HBFixed       minimumLimit;   \/* The lowest value for the ductility axis tha\n@@ -152,1 +152,1 @@\n-  Fixed         noStretchValue; \/* This is the default value that corresponds to\n+  HBFixed       noStretchValue; \/* This is the default value that corresponds to\n@@ -155,1 +155,1 @@\n-  Fixed         maximumLimit;   \/* The highest value for the ductility axis that\n+  HBFixed       maximumLimit;   \/* The highest value for the ductility axis that\n@@ -173,1 +173,1 @@\n-  GlyphID       glyph;          \/* Glyph that should be added if the distance factor\n+  HBGlyphID     glyph;          \/* Glyph that should be added if the distance factor\n@@ -274,1 +274,1 @@\n-  Fixed         beforeGrowLimit;\/* The ratio by which the advance width of the\n+  HBFixed       beforeGrowLimit;\/* The ratio by which the advance width of the\n@@ -276,1 +276,1 @@\n-  Fixed         beforeShrinkLimit;\n+  HBFixed       beforeShrinkLimit;\n@@ -279,1 +279,1 @@\n-  Fixed         afterGrowLimit; \/* The ratio by which the advance width of the glyph\n+  HBFixed       afterGrowLimit; \/* The ratio by which the advance width of the glyph\n@@ -281,1 +281,1 @@\n-  Fixed         afterShrinkLimit;\n+  HBFixed       afterShrinkLimit;\n@@ -374,1 +374,1 @@\n-  Lookup<OffsetTo<WidthDeltaCluster> >\n+  Lookup<OffsetTo<WidthDeltaCluster>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-just-table.hh","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -85,2 +85,2 @@\n-  GlyphID       left;\n-  GlyphID       right;\n+  HBGlyphID     left;\n+  HBGlyphID     right;\n@@ -232,3 +232,1 @@\n-    {\n-      return Format1EntryT::performAction (entry);\n-    }\n+    { return Format1EntryT::performAction (entry); }\n@@ -254,1 +252,1 @@\n-        unsigned int tuple_count = MAX (1u, table->header.tuple_count ());\n+        unsigned int tuple_count = hb_max (1u, table->header.tuple_count ());\n@@ -284,13 +282,1 @@\n-          \/* Testing shows that CoreText only applies kern (cross-stream or not)\n-           * if none has been applied by previous subtables.  That is, it does\n-           * NOT seem to accumulate as otherwise implied by specs. *\/\n-\n-          \/* The following flag is undocumented in the spec, but described\n-           * in the 'kern' table example. *\/\n-          if (v == -0x8000)\n-          {\n-            o.attach_type() = ATTACH_TYPE_NONE;\n-            o.attach_chain() = 0;\n-            o.x_offset = o.y_offset = 0;\n-          }\n-          else if (HB_DIRECTION_IS_HORIZONTAL (buffer->props.direction))\n+          if (HB_DIRECTION_IS_HORIZONTAL (buffer->props.direction))\n@@ -300,1 +286,3 @@\n-              if (buffer->pos[idx].attach_type() && !buffer->pos[idx].y_offset)\n+              \/* The following flag is undocumented in the spec, but described\n+               * in the 'kern' table example. *\/\n+              if (v == -0x8000)\n@@ -302,1 +290,7 @@\n-                o.y_offset = c->font->em_scale_y (v);\n+                o.attach_type() = ATTACH_TYPE_NONE;\n+                o.attach_chain() = 0;\n+                o.y_offset = 0;\n+              }\n+              else if (o.attach_type())\n+              {\n+                o.y_offset += c->font->em_scale_y (v);\n@@ -308,5 +302,2 @@\n-              if (!buffer->pos[idx].x_offset)\n-              {\n-                buffer->pos[idx].x_advance += c->font->em_scale_x (v);\n-                buffer->pos[idx].x_offset += c->font->em_scale_x (v);\n-              }\n+              o.x_advance += c->font->em_scale_x (v);\n+              o.x_offset += c->font->em_scale_x (v);\n@@ -320,1 +311,1 @@\n-              if (buffer->pos[idx].attach_type() && !buffer->pos[idx].x_offset)\n+              if (v == -0x8000)\n@@ -322,1 +313,7 @@\n-                o.x_offset = c->font->em_scale_x (v);\n+                o.attach_type() = ATTACH_TYPE_NONE;\n+                o.attach_chain() = 0;\n+                o.x_offset = 0;\n+              }\n+              else if (o.attach_type())\n+              {\n+                o.x_offset += c->font->em_scale_x (v);\n@@ -328,5 +325,2 @@\n-              if (!buffer->pos[idx].y_offset)\n-              {\n-                buffer->pos[idx].y_advance += c->font->em_scale_y (v);\n-                buffer->pos[idx].y_offset += c->font->em_scale_y (v);\n-              }\n+              o.y_advance += c->font->em_scale_y (v);\n+              o.y_offset += c->font->em_scale_y (v);\n@@ -395,1 +389,1 @@\n-    kern_idx = Types::offsetToIndex (kern_idx, this, &arrayZ);\n+    kern_idx = Types::offsetToIndex (kern_idx, this, arrayZ.arrayZ);\n@@ -491,1 +485,1 @@\n-                             hb_aat_apply_context_t *c_) :\n+                      hb_aat_apply_context_t *c_) :\n@@ -500,3 +494,1 @@\n-    {\n-      return entry.data.ankrActionIndex != 0xFFFF;\n-    }\n+    { return entry.data.ankrActionIndex != 0xFFFF; }\n@@ -515,2 +507,4 @@\n-            \/* indexed into glyph outline. *\/\n-            const HBUINT16 *data = &ankrData[entry.data.ankrActionIndex];\n+            \/* Indexed into glyph outline. *\/\n+            \/* Each action (record in ankrData) contains two 16-bit fields, so we must\n+               double the ankrActionIndex to get the correct offset here. *\/\n+            const HBUINT16 *data = &ankrData[entry.data.ankrActionIndex * 2];\n@@ -518,2 +512,2 @@\n-            HB_UNUSED unsigned int markControlPoint = *data++;\n-            HB_UNUSED unsigned int currControlPoint = *data++;\n+            unsigned int markControlPoint = *data++;\n+            unsigned int currControlPoint = *data++;\n@@ -541,2 +535,4 @@\n-           \/* Indexed into 'ankr' table. *\/\n-            const HBUINT16 *data = &ankrData[entry.data.ankrActionIndex];\n+            \/* Indexed into 'ankr' table. *\/\n+            \/* Each action (record in ankrData) contains two 16-bit fields, so we must\n+               double the ankrActionIndex to get the correct offset here. *\/\n+            const HBUINT16 *data = &ankrData[entry.data.ankrActionIndex * 2];\n@@ -560,1 +556,3 @@\n-            const FWORD *data = (const FWORD *) &ankrData[entry.data.ankrActionIndex];\n+            \/* Each action contains four 16-bit fields, so we multiply the ankrActionIndex\n+               by 4 to get the correct offset for the given action. *\/\n+            const FWORD *data = (const FWORD *) &ankrData[entry.data.ankrActionIndex * 4];\n@@ -631,1 +629,1 @@\n-                          hb_aat_apply_context_t *c) const\n+                   hb_aat_apply_context_t *c) const\n@@ -715,3 +713,3 @@\n-      LNNOffsetTo<Lookup<HBUINT32> >            rowIndexTable;\n-      LNNOffsetTo<Lookup<HBUINT32> >            columnIndexTable;\n-      LNNOffsetTo<UnsizedArrayOf<FWORD32> >     array;\n+      LNNOffsetTo<Lookup<HBUINT32>>             rowIndexTable;\n+      LNNOffsetTo<Lookup<HBUINT32>>             columnIndexTable;\n+      LNNOffsetTo<UnsizedArrayOf<FWORD32>>      array;\n@@ -721,3 +719,3 @@\n-      LNNOffsetTo<Lookup<HBUINT16> >            rowIndexTable;\n-      LNNOffsetTo<Lookup<HBUINT16> >            columnIndexTable;\n-      LNNOffsetTo<UnsizedArrayOf<FWORD> >       array;\n+      LNNOffsetTo<Lookup<HBUINT16>>             rowIndexTable;\n+      LNNOffsetTo<Lookup<HBUINT16>>             columnIndexTable;\n+      LNNOffsetTo<UnsizedArrayOf<FWORD>>        array;\n@@ -726,1 +724,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<FWORD> >   vector;\n+  LNNOffsetTo<UnsizedArrayOf<FWORD>>    vector;\n@@ -736,2 +734,2 @@\n-  unsigned int tuple_count () const { return tupleCount; }\n-  bool is_horizontal () const       { return !(coverage & Vertical); }\n+  unsigned   tuple_count () const { return tupleCount; }\n+  bool     is_horizontal () const { return !(coverage & Vertical); }\n@@ -774,2 +772,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -780,5 +778,5 @@\n-    case 0:     return_trace (c->dispatch (u.format0));\n-    case 1:     return_trace (c->dispatch (u.format1));\n-    case 2:     return_trace (c->dispatch (u.format2));\n-    case 4:     return_trace (c->dispatch (u.format4));\n-    case 6:     return_trace (c->dispatch (u.format6));\n+    case 0:     return_trace (c->dispatch (u.format0, hb_forward<Ts> (ds)...));\n+    case 1:     return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n+    case 2:     return_trace (c->dispatch (u.format2, hb_forward<Ts> (ds)...));\n+    case 4:     return_trace (c->dispatch (u.format4, hb_forward<Ts> (ds)...));\n+    case 6:     return_trace (c->dispatch (u.format6, hb_forward<Ts> (ds)...));\n@@ -894,1 +892,1 @@\n-      if (!c->buffer->message (c->font, \"start %c%c%c%c subtable %d\", HB_UNTAG (thiz()->tableTag), c->lookup_index))\n+      if (!c->buffer->message (c->font, \"start subtable %d\", c->lookup_index))\n@@ -926,1 +924,1 @@\n-      (void) c->buffer->message (c->font, \"end %c%c%c%c subtable %d\", HB_UNTAG (thiz()->tableTag), c->lookup_index);\n+      (void) c->buffer->message (c->font, \"end subtable %d\", c->lookup_index);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-kerx-table.hh","additions":62,"deletions":64,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright © 2018  Ebrahim Byagowi\n- *\n- *  This is part of HarfBuzz, a text shaping library.\n- *\n- * Permission is hereby granted, without written agreement and without\n- * license or royalty fees, to use, copy, modify, and distribute this\n- * software and its documentation for any purpose, provided that the\n- * above copyright notice and the following two paragraphs appear in\n- * all copies of this software.\n- *\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n- * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n- * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n- * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n- * DAMAGE.\n- *\n- * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n- * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n- * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n- * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n- *\/\n-#ifndef HB_AAT_LAYOUT_LCAR_TABLE_HH\n-#define HB_AAT_LAYOUT_LCAR_TABLE_HH\n-\n-#include \"hb-open-type.hh\"\n-#include \"hb-aat-layout-common.hh\"\n-\n-\/*\n- * lcar -- Ligature caret\n- * https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM06\/Chap6lcar.html\n- *\/\n-#define HB_AAT_TAG_lcar HB_TAG('l','c','a','r')\n-\n-\n-namespace AAT {\n-\n-typedef ArrayOf<HBINT16> LigCaretClassEntry;\n-\n-struct lcar\n-{\n-  static constexpr hb_tag_t tableTag = HB_AAT_TAG_lcar;\n-\n-  unsigned int get_lig_carets (hb_font_t      *font,\n-                               hb_direction_t  direction,\n-                               hb_codepoint_t  glyph,\n-                               unsigned int    start_offset,\n-                               unsigned int   *caret_count \/* IN\/OUT *\/,\n-                               hb_position_t  *caret_array \/* OUT *\/) const\n-  {\n-    const OffsetTo<LigCaretClassEntry>* entry_offset = lookup.get_value (glyph,\n-                                                                         font->face->get_num_glyphs ());\n-    const LigCaretClassEntry& array = entry_offset ? this+*entry_offset : Null (LigCaretClassEntry);\n-    if (caret_count)\n-    {\n-      hb_array_t<const HBINT16> arr = array.sub_array (start_offset, caret_count);\n-      unsigned int count = arr.length;\n-      for (unsigned int i = 0; i < count; ++i)\n-        switch (format)\n-        {\n-        case 0: caret_array[i] = font->em_scale_dir (arr[i], direction); break;\n-        case 1:\n-          hb_position_t x, y;\n-          font->get_glyph_contour_point_for_origin (glyph, arr[i], direction, &x, &y);\n-          caret_array[i] = HB_DIRECTION_IS_HORIZONTAL (direction) ? x : y;\n-          break;\n-        }\n-    }\n-    return array.len;\n-  }\n-\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (likely (c->check_struct (this) &&\n-                          version.major == 1 &&\n-                          lookup.sanitize (c, this)));\n-  }\n-\n-  protected:\n-  FixedVersion<>version;        \/* Version number of the ligature caret table *\/\n-  HBUINT16      format;         \/* Format of the ligature caret table. *\/\n-  Lookup<OffsetTo<LigCaretClassEntry> >\n-                lookup;         \/* data Lookup table associating glyphs *\/\n-\n-  public:\n-  DEFINE_SIZE_MIN (8);\n-};\n-\n-} \/* namespace AAT *\/\n-\n-#endif \/* HB_AAT_LAYOUT_LCAR_TABLE_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-lcar-table.hh","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -91,1 +91,1 @@\n-        end = MIN (buffer->idx + 1, buffer->len);\n+        end = hb_min (buffer->idx + 1, buffer->len);\n@@ -120,2 +120,2 @@\n-        unsigned int l = MIN<unsigned int> (2, m >> 4);\n-        unsigned int r = MIN<unsigned int> (2, m & 0x0F);\n+        unsigned int l = hb_min (2u, m >> 4);\n+        unsigned int r = hb_min (2u, m & 0x0F);\n@@ -127,1 +127,1 @@\n-          buffer->merge_clusters (start, MIN (buffer->idx + 1, buffer->len));\n+          buffer->merge_clusters (start, hb_min (buffer->idx + 1, buffer->len));\n@@ -243,1 +243,1 @@\n-      const GlyphID *replacement;\n+      const HBGlyphID *replacement;\n@@ -250,1 +250,1 @@\n-          const Lookup<GlyphID> &lookup = subs[entry.data.markIndex];\n+          const Lookup<HBGlyphID> &lookup = subs[entry.data.markIndex];\n@@ -257,1 +257,1 @@\n-        const UnsizedArrayOf<GlyphID> &subs_old = (const UnsizedArrayOf<GlyphID> &) subs;\n+        const UnsizedArrayOf<HBGlyphID> &subs_old = (const UnsizedArrayOf<HBGlyphID> &) subs;\n@@ -264,1 +264,1 @@\n-        buffer->unsafe_to_break (mark, MIN (buffer->idx + 1, buffer->len));\n+        buffer->unsafe_to_break (mark, hb_min (buffer->idx + 1, buffer->len));\n@@ -270,1 +270,1 @@\n-      unsigned int idx = MIN (buffer->idx, buffer->len - 1);\n+      unsigned int idx = hb_min (buffer->idx, buffer->len - 1);\n@@ -275,1 +275,1 @@\n-          const Lookup<GlyphID> &lookup = subs[entry.data.currentIndex];\n+          const Lookup<HBGlyphID> &lookup = subs[entry.data.currentIndex];\n@@ -282,1 +282,1 @@\n-        const UnsizedArrayOf<GlyphID> &subs_old = (const UnsizedArrayOf<GlyphID> &) subs;\n+        const UnsizedArrayOf<HBGlyphID> &subs_old = (const UnsizedArrayOf<HBGlyphID> &) subs;\n@@ -307,1 +307,1 @@\n-    const UnsizedOffsetListOf<Lookup<GlyphID>, HBUINT, false> &subs;\n+    const UnsizedOffsetListOf<Lookup<HBGlyphID>, HBUINT, false> &subs;\n@@ -340,1 +340,1 @@\n-        num_lookups = MAX<unsigned int> (num_lookups, 1 + data.markIndex);\n+        num_lookups = hb_max (num_lookups, 1 + data.markIndex);\n@@ -342,1 +342,1 @@\n-        num_lookups = MAX<unsigned int> (num_lookups, 1 + data.currentIndex);\n+        num_lookups = hb_max (num_lookups, 1 + data.currentIndex);\n@@ -351,1 +351,1 @@\n-  NNOffsetTo<UnsizedOffsetListOf<Lookup<GlyphID>, HBUINT, false>, HBUINT>\n+  NNOffsetTo<UnsizedOffsetListOf<Lookup<HBGlyphID>, HBUINT, false>, HBUINT>\n@@ -523,1 +523,1 @@\n-            const GlyphID &ligatureData = ligature[ligature_idx];\n+            const HBGlyphID &ligatureData = ligature[ligature_idx];\n@@ -557,1 +557,1 @@\n-    const UnsizedArrayOf<GlyphID> &ligature;\n+    const UnsizedArrayOf<HBGlyphID> &ligature;\n@@ -589,1 +589,1 @@\n-  NNOffsetTo<UnsizedArrayOf<GlyphID>, HBUINT>\n+  NNOffsetTo<UnsizedArrayOf<HBGlyphID>, HBUINT>\n@@ -609,1 +609,1 @@\n-      const GlyphID *replacement = substitute.get_value (info[i].codepoint, num_glyphs);\n+      const HBGlyphID *replacement = substitute.get_value (info[i].codepoint, num_glyphs);\n@@ -627,1 +627,1 @@\n-  Lookup<GlyphID>       substitute;\n+  Lookup<HBGlyphID>     substitute;\n@@ -728,0 +728,1 @@\n+        if (unlikely ((buffer->max_ops -= count) <= 0)) return;\n@@ -729,1 +730,1 @@\n-        const GlyphID *glyphs = &insertionAction[start];\n+        const HBGlyphID *glyphs = &insertionAction[start];\n@@ -747,1 +748,1 @@\n-        buffer->unsafe_to_break_from_outbuffer (mark, MIN (buffer->idx + 1, buffer->len));\n+        buffer->unsafe_to_break_from_outbuffer (mark, hb_min (buffer->idx + 1, buffer->len));\n@@ -756,0 +757,1 @@\n+        if (unlikely ((buffer->max_ops -= count) <= 0)) return;\n@@ -757,1 +759,1 @@\n-        const GlyphID *glyphs = &insertionAction[start];\n+        const HBGlyphID *glyphs = &insertionAction[start];\n@@ -796,1 +798,1 @@\n-    const UnsizedArrayOf<GlyphID> &insertionAction;\n+    const UnsizedArrayOf<HBGlyphID> &insertionAction;\n@@ -822,1 +824,1 @@\n-  NNOffsetTo<UnsizedArrayOf<GlyphID>, HBUINT>\n+  NNOffsetTo<UnsizedArrayOf<HBGlyphID>, HBUINT>\n@@ -886,2 +888,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -892,5 +894,5 @@\n-    case Rearrangement:         return_trace (c->dispatch (u.rearrangement));\n-    case Contextual:            return_trace (c->dispatch (u.contextual));\n-    case Ligature:              return_trace (c->dispatch (u.ligature));\n-    case Noncontextual:         return_trace (c->dispatch (u.noncontextual));\n-    case Insertion:             return_trace (c->dispatch (u.insertion));\n+    case Rearrangement:         return_trace (c->dispatch (u.rearrangement, hb_forward<Ts> (ds)...));\n+    case Contextual:            return_trace (c->dispatch (u.contextual, hb_forward<Ts> (ds)...));\n+    case Ligature:              return_trace (c->dispatch (u.ligature, hb_forward<Ts> (ds)...));\n+    case Noncontextual:         return_trace (c->dispatch (u.noncontextual, hb_forward<Ts> (ds)...));\n+    case Insertion:             return_trace (c->dispatch (u.insertion, hb_forward<Ts> (ds)...));\n@@ -951,2 +953,4 @@\n-        const hb_aat_map_builder_t::feature_info_t *info = map->features.bsearch (type);\n-        if (info && info->setting == setting)\n+        \/\/ Check whether this type\/setting pair was requested in the map, and if so, apply its flags.\n+        \/\/ (The search here only looks at the type and setting fields of feature_info_t.)\n+        hb_aat_map_builder_t::feature_info_t info = { type, setting, false, 0 };\n+        if (map->features.bsearch (info))\n@@ -970,1 +974,1 @@\n-                     hb_mask_t flags) const\n+              hb_mask_t flags) const\n@@ -972,1 +976,1 @@\n-    const ChainSubtable<Types> *subtable = &StructAfter<ChainSubtable<Types> > (featureZ.as_array (featureCount));\n+    const ChainSubtable<Types> *subtable = &StructAfter<ChainSubtable<Types>> (featureZ.as_array (featureCount));\n@@ -1018,1 +1022,1 @@\n-      if (!c->buffer->message (c->font, \"start chain subtable %d\", c->lookup_index))\n+      if (!c->buffer->message (c->font, \"start chainsubtable %d\", c->lookup_index))\n@@ -1029,1 +1033,1 @@\n-      (void) c->buffer->message (c->font, \"end chain subtable %d\", c->lookup_index);\n+      (void) c->buffer->message (c->font, \"end chainsubtable %d\", c->lookup_index);\n@@ -1034,1 +1038,1 @@\n-      subtable = &StructAfter<ChainSubtable<Types> > (*subtable);\n+      subtable = &StructAfter<ChainSubtable<Types>> (*subtable);\n@@ -1052,1 +1056,1 @@\n-    const ChainSubtable<Types> *subtable = &StructAfter<ChainSubtable<Types> > (featureZ.as_array (featureCount));\n+    const ChainSubtable<Types> *subtable = &StructAfter<ChainSubtable<Types>> (featureZ.as_array (featureCount));\n@@ -1058,1 +1062,1 @@\n-      subtable = &StructAfter<ChainSubtable<Types> > (*subtable);\n+      subtable = &StructAfter<ChainSubtable<Types>> (*subtable);\n@@ -1083,1 +1087,1 @@\n-template <typename Types>\n+template <typename Types, hb_tag_t TAG>\n@@ -1086,1 +1090,1 @@\n-  static constexpr hb_tag_t tableTag = HB_AAT_TAG_morx;\n+  static constexpr hb_tag_t tableTag = TAG;\n@@ -1098,1 +1102,1 @@\n-      chain = &StructAfter<Chain<Types> > (*chain);\n+      chain = &StructAfter<Chain<Types>> (*chain);\n@@ -1112,1 +1116,1 @@\n-      chain = &StructAfter<Chain<Types> > (*chain);\n+      chain = &StructAfter<Chain<Types>> (*chain);\n@@ -1128,1 +1132,1 @@\n-      chain = &StructAfter<Chain<Types> > (*chain);\n+      chain = &StructAfter<Chain<Types>> (*chain);\n@@ -1146,8 +1150,2 @@\n-struct morx : mortmorx<ExtendedTypes>\n-{\n-  static constexpr hb_tag_t tableTag = HB_AAT_TAG_morx;\n-};\n-struct mort : mortmorx<ObsoleteTypes>\n-{\n-  static constexpr hb_tag_t tableTag = HB_AAT_TAG_mort;\n-};\n+struct morx : mortmorx<ExtendedTypes, HB_AAT_TAG_morx> {};\n+struct mort : mortmorx<ObsoleteTypes, HB_AAT_TAG_mort> {};\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-morx-table.hh","additions":52,"deletions":54,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_AAT_LAYOUT_OPBD_TABLE_HH\n+#define HB_AAT_LAYOUT_OPBD_TABLE_HH\n+\n+#include \"hb-aat-layout-common.hh\"\n+#include \"hb-open-type.hh\"\n+\n+\/*\n+ * opbd -- Optical Bounds\n+ * https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM06\/Chap6opbd.html\n+ *\/\n+#define HB_AAT_TAG_opbd HB_TAG('o','p','b','d')\n+\n+\n+namespace AAT {\n+\n+struct OpticalBounds\n+{\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (likely (c->check_struct (this)));\n+  }\n+\n+  FWORD         leftSide;\n+  FWORD         topSide;\n+  FWORD         rightSide;\n+  FWORD         bottomSide;\n+  public:\n+  DEFINE_SIZE_STATIC (8);\n+};\n+\n+struct opbdFormat0\n+{\n+  bool get_bounds (hb_font_t *font, hb_codepoint_t glyph_id,\n+                   hb_glyph_extents_t *extents, const void *base) const\n+  {\n+    const OffsetTo<OpticalBounds> *bounds_offset = lookupTable.get_value (glyph_id, font->face->get_num_glyphs ());\n+    if (!bounds_offset) return false;\n+    const OpticalBounds &bounds = base+*bounds_offset;\n+\n+    if (extents)\n+      *extents = {\n+        font->em_scale_x (bounds.leftSide),\n+        font->em_scale_y (bounds.topSide),\n+        font->em_scale_x (bounds.rightSide),\n+        font->em_scale_y (bounds.bottomSide)\n+      };\n+    return true;\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c, const void *base) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (likely (c->check_struct (this) && lookupTable.sanitize (c, base)));\n+  }\n+\n+  protected:\n+  Lookup<OffsetTo<OpticalBounds>>\n+                lookupTable;    \/* Lookup table associating glyphs with the four\n+                                 * int16 values for the left-side, top-side,\n+                                 * right-side, and bottom-side optical bounds. *\/\n+  public:\n+  DEFINE_SIZE_MIN (2);\n+};\n+\n+struct opbdFormat1\n+{\n+  bool get_bounds (hb_font_t *font, hb_codepoint_t glyph_id,\n+                   hb_glyph_extents_t *extents, const void *base) const\n+  {\n+    const OffsetTo<OpticalBounds> *bounds_offset = lookupTable.get_value (glyph_id, font->face->get_num_glyphs ());\n+    if (!bounds_offset) return false;\n+    const OpticalBounds &bounds = base+*bounds_offset;\n+\n+    hb_position_t left = 0, top = 0, right = 0, bottom = 0, ignore;\n+    if (font->get_glyph_contour_point (glyph_id, bounds.leftSide, &left, &ignore) ||\n+        font->get_glyph_contour_point (glyph_id, bounds.topSide, &ignore, &top) ||\n+        font->get_glyph_contour_point (glyph_id, bounds.rightSide, &right, &ignore) ||\n+        font->get_glyph_contour_point (glyph_id, bounds.bottomSide, &ignore, &bottom))\n+    {\n+      if (extents)\n+        *extents = {left, top, right, bottom};\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c, const void *base) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (likely (c->check_struct (this) && lookupTable.sanitize (c, base)));\n+  }\n+\n+  protected:\n+  Lookup<OffsetTo<OpticalBounds>>\n+                lookupTable;    \/* Lookup table associating glyphs with the four\n+                                 * int16 values for the left-side, top-side,\n+                                 * right-side, and bottom-side optical bounds. *\/\n+  public:\n+  DEFINE_SIZE_MIN (2);\n+};\n+\n+struct opbd\n+{\n+  static constexpr hb_tag_t tableTag = HB_AAT_TAG_opbd;\n+\n+  bool get_bounds (hb_font_t *font, hb_codepoint_t glyph_id,\n+                   hb_glyph_extents_t *extents) const\n+  {\n+    switch (format)\n+    {\n+    case 0: return u.format0.get_bounds (font, glyph_id, extents, this);\n+    case 1: return u.format1.get_bounds (font, glyph_id, extents, this);\n+    default:return false;\n+    }\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    if (unlikely (!c->check_struct (this) || version.major != 1))\n+      return_trace (false);\n+\n+    switch (format)\n+    {\n+    case 0: return_trace (u.format0.sanitize (c, this));\n+    case 1: return_trace (u.format1.sanitize (c, this));\n+    default:return_trace (true);\n+    }\n+  }\n+\n+  protected:\n+  FixedVersion<>version;        \/* Version number of the optical bounds\n+                                 * table (0x00010000 for the current version). *\/\n+  HBUINT16      format;         \/* Format of the optical bounds table.\n+                                 * Format 0 indicates distance and Format 1 indicates\n+                                 * control point. *\/\n+  union {\n+  opbdFormat0   format0;\n+  opbdFormat1   format1;\n+  } u;\n+  public:\n+  DEFINE_SIZE_MIN (8);\n+};\n+\n+} \/* namespace AAT *\/\n+\n+\n+#endif \/* HB_AAT_LAYOUT_OPBD_TABLE_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-opbd-table.hh","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -65,1 +65,1 @@\n-  Fixed         track;          \/* Track value for this record. *\/\n+  HBFixed       track;          \/* Track value for this record. *\/\n@@ -69,1 +69,1 @@\n-  NNOffsetTo<UnsizedArrayOf<FWORD> >\n+  NNOffsetTo<UnsizedArrayOf<FWORD>>\n@@ -85,1 +85,1 @@\n-    hb_array_t<const Fixed> size_table ((base+sizeTable).arrayZ, sizes);\n+    hb_array_t<const HBFixed> size_table ((base+sizeTable).arrayZ, sizes);\n@@ -96,7 +96,0 @@\n-    \/* CoreText points are CSS pixels (96 per inch),\n-     * NOT typographic points (72 per inch).\n-     *\n-     * https:\/\/developer.apple.com\/library\/content\/documentation\/GraphicsAnimation\/Conceptual\/HighResolutionOSX\/Explained\/Explained.html\n-     *\/\n-    float csspx = ptem * 96.f \/ 72.f;\n-\n@@ -130,1 +123,1 @@\n-    hb_array_t<const Fixed> size_table ((base+sizeTable).arrayZ, sizes);\n+    hb_array_t<const HBFixed> size_table ((base+sizeTable).arrayZ, sizes);\n@@ -133,1 +126,1 @@\n-      if (size_table[size_index].to_float () >= csspx)\n+      if (size_table[size_index].to_float () >= ptem)\n@@ -136,2 +129,2 @@\n-    return round (interpolate_at (size_index ? size_index - 1 : 0, csspx,\n-                                  *trackTableEntry, base));\n+    return roundf (interpolate_at (size_index ? size_index - 1 : 0, ptem,\n+                                   *trackTableEntry, base));\n@@ -151,1 +144,1 @@\n-  LOffsetTo<UnsizedArrayOf<Fixed>, false>\n+  LNNOffsetTo<UnsizedArrayOf<HBFixed>>\n@@ -220,1 +213,1 @@\n-                                         * (0x00010000u for version 1.0). *\/\n+                                 * (0x00010000u for version 1.0). *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout-trak-table.hh","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"hb-open-type.hh\"\n+#include \"hb.hh\"\n@@ -30,1 +30,0 @@\n-#include \"hb-ot-face.hh\"\n@@ -32,1 +31,0 @@\n-#include \"hb-aat-fdsc-table.hh\" \/\/ Just so we compile it; unused otherwise.\n@@ -43,0 +41,35 @@\n+\/*\n+ * hb_aat_apply_context_t\n+ *\/\n+\n+\/* Note: This context is used for kerning, even without AAT, hence the condition. *\/\n+#if !defined(HB_NO_AAT) || !defined(HB_NO_OT_KERN)\n+\n+AAT::hb_aat_apply_context_t::hb_aat_apply_context_t (const hb_ot_shape_plan_t *plan_,\n+                                                     hb_font_t *font_,\n+                                                     hb_buffer_t *buffer_,\n+                                                     hb_blob_t *blob) :\n+                                                       plan (plan_),\n+                                                       font (font_),\n+                                                       face (font->face),\n+                                                       buffer (buffer_),\n+                                                       sanitizer (),\n+                                                       ankr_table (&Null (AAT::ankr)),\n+                                                       lookup_index (0)\n+{\n+  sanitizer.init (blob);\n+  sanitizer.set_num_glyphs (face->get_num_glyphs ());\n+  sanitizer.start_processing ();\n+  sanitizer.set_max_ops (HB_SANITIZE_MAX_OPS_MAX);\n+}\n+\n+AAT::hb_aat_apply_context_t::~hb_aat_apply_context_t ()\n+{ sanitizer.end_processing (); }\n+\n+void\n+AAT::hb_aat_apply_context_t::set_ankr_table (const AAT::ankr *ankr_table_)\n+{ ankr_table = ankr_table_; }\n+\n+#endif\n+\n+\n@@ -53,0 +86,2 @@\n+#if !defined(HB_NO_AAT) || defined(HAVE_CORETEXT)\n+\n@@ -138,29 +173,1 @@\n-  return (const hb_aat_feature_mapping_t *) bsearch (&tag,\n-                                                     feature_mappings,\n-                                                     ARRAY_LENGTH (feature_mappings),\n-                                                     sizeof (feature_mappings[0]),\n-                                                     hb_aat_feature_mapping_t::cmp);\n-}\n-\n-\n-\/*\n- * hb_aat_apply_context_t\n- *\/\n-\n-AAT::hb_aat_apply_context_t::hb_aat_apply_context_t (const hb_ot_shape_plan_t *plan_,\n-                                                     hb_font_t *font_,\n-                                                     hb_buffer_t *buffer_,\n-                                                     hb_blob_t *blob) :\n-                                                       plan (plan_),\n-                                                       font (font_),\n-                                                       face (font->face),\n-                                                       buffer (buffer_),\n-                                                       sanitizer (),\n-                                                       ankr_table (&Null(AAT::ankr)),\n-                                                       lookup_index (0),\n-                                                       debug_depth (0)\n-{\n-  sanitizer.init (blob);\n-  sanitizer.set_num_glyphs (face->get_num_glyphs ());\n-  sanitizer.start_processing ();\n-  sanitizer.set_max_ops (HB_SANITIZE_MAX_OPS_MAX);\n+  return hb_sorted_array (feature_mappings).bsearch (tag);\n@@ -168,0 +175,1 @@\n+#endif\n@@ -169,6 +177,0 @@\n-AAT::hb_aat_apply_context_t::~hb_aat_apply_context_t ()\n-{ sanitizer.end_processing (); }\n-\n-void\n-AAT::hb_aat_apply_context_t::set_ankr_table (const AAT::ankr *ankr_table_)\n-{ ankr_table = ankr_table_; }\n@@ -176,0 +178,1 @@\n+#ifndef HB_NO_AAT\n@@ -314,8 +317,0 @@\n-\n-hb_language_t\n-_hb_aat_language_get (hb_face_t *face,\n-                      unsigned int i)\n-{\n-  return face->table.ltag->get_language (i);\n-}\n-\n@@ -385,0 +380,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout.cc","additions":44,"deletions":46,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  _HB_AAT_LAYOUT_FEATURE_TYPE_MAX_VALUE= 0x7FFFFFFFu, \/*< skip >*\/\n+  _HB_AAT_LAYOUT_FEATURE_TYPE_MAX_VALUE = HB_TAG_MAX_SIGNED \/*< skip >*\/\n@@ -427,1 +427,1 @@\n-  _HB_AAT_LAYOUT_FEATURE_SELECTOR_MAX_VALUE= 0x7FFFFFFFu, \/*< skip >*\/\n+  _HB_AAT_LAYOUT_FEATURE_SELECTOR_MAX_VALUE = HB_TAG_MAX_SIGNED \/*< skip >*\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-\n+#include \"hb-aat-ltag-table.hh\"\n@@ -42,8 +42,2 @@\n-  static int cmp (const void *key_, const void *entry_)\n-  {\n-    hb_tag_t key = * (unsigned int *) key_;\n-    const hb_aat_feature_mapping_t * entry = (const hb_aat_feature_mapping_t *) entry_;\n-    return key < entry->otFeatureTag ? -1 :\n-           key > entry->otFeatureTag ? 1 :\n-           0;\n-  }\n+  int cmp (hb_tag_t key) const\n+  { return key < otFeatureTag ? -1 : key > otFeatureTag ? 1 : 0; }\n@@ -80,4 +74,0 @@\n-HB_INTERNAL hb_language_t\n-_hb_aat_language_get (hb_face_t *face,\n-                      unsigned int i);\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-layout.hh","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  NNOffsetTo<UnsizedArrayOf<HBUINT8> >\n+  NNOffsetTo<UnsizedArrayOf<HBUINT8>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-ltag-table.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_AAT_SHAPE\n+\n@@ -32,0 +36,1 @@\n+#include \"hb-aat-layout-feat-table.hh\"\n@@ -34,2 +39,1 @@\n-void hb_aat_map_builder_t::add_feature (hb_tag_t tag,\n-                                        unsigned int value)\n+void hb_aat_map_builder_t::add_feature (hb_tag_t tag, unsigned value)\n@@ -37,0 +41,2 @@\n+  if (!face->table.feat->has_data ()) return;\n+\n@@ -39,0 +45,2 @@\n+    if (!face->table.feat->exposes_feature (HB_AAT_LAYOUT_FEATURE_TYPE_CHARACTER_ALTERNATIVES))\n+      return;\n@@ -42,0 +50,2 @@\n+    info->seq = features.length;\n+    info->is_exclusive = true;\n@@ -48,0 +58,15 @@\n+  const AAT::FeatureName* feature = &face->table.feat->get_feature (mapping->aatFeatureType);\n+  if (!feature->has_data ())\n+  {\n+    \/* Special case: Chain::compile_flags will fall back to the deprecated version of\n+     * small-caps if necessary, so we need to check for that possibility.\n+     * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/2307 *\/\n+    if (mapping->aatFeatureType == HB_AAT_LAYOUT_FEATURE_TYPE_LOWER_CASE &&\n+        mapping->selectorToEnable == HB_AAT_LAYOUT_FEATURE_SELECTOR_LOWER_CASE_SMALL_CAPS)\n+    {\n+      feature = &face->table.feat->get_feature (HB_AAT_LAYOUT_FEATURE_TYPE_LETTER_CASE);\n+      if (!feature->has_data ()) return;\n+    }\n+    else return;\n+  }\n+\n@@ -51,0 +76,2 @@\n+  info->seq = features.length;\n+  info->is_exclusive = feature->is_exclusive ();\n@@ -62,1 +89,5 @@\n-      if (features[i].type != features[j].type)\n+      if (features[i].type != features[j].type ||\n+          \/* Nonexclusive feature selectors come in even\/odd pairs to turn a setting on\/off\n+           * respectively, so we mask out the low-order bit when checking for \"duplicates\"\n+           * (selectors referring to the same feature setting) here. *\/\n+          (!features[i].is_exclusive && ((features[i].setting & ~1) != (features[j].setting & ~1))))\n@@ -69,0 +100,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-map.cc","additions":37,"deletions":3,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    bool is_exclusive;\n@@ -69,1 +70,1 @@\n-    static int cmp (const void *pa, const void *pb)\n+    HB_INTERNAL static int cmp (const void *pa, const void *pb)\n@@ -73,2 +74,4 @@\n-      return (a->type != b->type) ? (a->type < b->type ? -1 : 1) :\n-             (a->seq < b->seq ? -1 : a->seq > b->seq ? 1 : 0);\n+      if (a->type != b->type) return (a->type < b->type ? -1 : 1);\n+      if (!a->is_exclusive &&\n+          (a->setting & ~1) != (b->setting & ~1)) return (a->setting < b->setting ? -1 : 1);\n+            return (a->seq < b->seq ? -1 : a->seq > b->seq ? 1 : 0);\n@@ -77,1 +80,2 @@\n-    int cmp (hb_aat_layout_feature_type_t ty) const\n+    \/* compares type & setting only, not is_exclusive flag or seq number *\/\n+    int cmp (const feature_info_t& f) const\n@@ -79,1 +83,2 @@\n-      return (type != ty) ? (type < ty ? -1 : 1) : 0;\n+      return (f.type != type) ? (f.type < type ? -1 : 1) :\n+             (f.setting != setting) ? (f.setting < setting ? -1 : 1) : 0;\n@@ -87,1 +92,1 @@\n-  hb_vector_t<feature_info_t> features;\n+  hb_sorted_vector_t<feature_info_t> features;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-aat-map.hh","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,1127 @@\n+\/*\n+ * Copyright © 2017  Google, Inc.\n+ * Copyright © 2019  Facebook, Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Google Author(s): Behdad Esfahbod\n+ * Facebook Author(s): Behdad Esfahbod\n+ *\/\n+\n+#ifndef HB_ALGS_HH\n+#define HB_ALGS_HH\n+\n+#include \"hb.hh\"\n+#include \"hb-meta.hh\"\n+#include \"hb-null.hh\"\n+#include \"hb-number.hh\"\n+\n+\n+\/* Encodes three unsigned integers in one 64-bit number.  If the inputs have more than 21 bits,\n+ * values will be truncated \/ overlap, and might not decode exactly. *\/\n+#define HB_CODEPOINT_ENCODE3(x,y,z) (((uint64_t) (x) << 42) | ((uint64_t) (y) << 21) | (uint64_t) (z))\n+#define HB_CODEPOINT_DECODE3_1(v) ((hb_codepoint_t) ((v) >> 42))\n+#define HB_CODEPOINT_DECODE3_2(v) ((hb_codepoint_t) ((v) >> 21) & 0x1FFFFFu)\n+#define HB_CODEPOINT_DECODE3_3(v) ((hb_codepoint_t) (v) & 0x1FFFFFu)\n+\n+\/* Custom encoding used by hb-ucd. *\/\n+#define HB_CODEPOINT_ENCODE3_11_7_14(x,y,z) (((uint32_t) ((x) & 0x07FFu) << 21) | (((uint32_t) (y) & 0x007Fu) << 14) | (uint32_t) ((z) & 0x3FFFu))\n+#define HB_CODEPOINT_DECODE3_11_7_14_1(v) ((hb_codepoint_t) ((v) >> 21))\n+#define HB_CODEPOINT_DECODE3_11_7_14_2(v) ((hb_codepoint_t) (((v) >> 14) & 0x007Fu) | 0x0300)\n+#define HB_CODEPOINT_DECODE3_11_7_14_3(v) ((hb_codepoint_t) (v) & 0x3FFFu)\n+\n+struct\n+{\n+  \/* Note.  This is dangerous in that if it's passed an rvalue, it returns rvalue-reference. *\/\n+  template <typename T> constexpr auto\n+  operator () (T&& v) const HB_AUTO_RETURN ( hb_forward<T> (v) )\n+}\n+HB_FUNCOBJ (hb_identity);\n+struct\n+{\n+  \/* Like identity(), but only retains lvalue-references.  Rvalues are returned as rvalues. *\/\n+  template <typename T> constexpr T&\n+  operator () (T& v) const { return v; }\n+\n+  template <typename T> constexpr hb_remove_reference<T>\n+  operator () (T&& v) const { return v; }\n+}\n+HB_FUNCOBJ (hb_lidentity);\n+struct\n+{\n+  \/* Like identity(), but always returns rvalue. *\/\n+  template <typename T> constexpr hb_remove_reference<T>\n+  operator () (T&& v) const { return v; }\n+}\n+HB_FUNCOBJ (hb_ridentity);\n+\n+struct\n+{\n+  template <typename T> constexpr bool\n+  operator () (T&& v) const { return bool (hb_forward<T> (v)); }\n+}\n+HB_FUNCOBJ (hb_bool);\n+\n+struct\n+{\n+  private:\n+\n+  template <typename T> constexpr auto\n+  impl (const T& v, hb_priority<1>) const HB_RETURN (uint32_t, hb_deref (v).hash ())\n+\n+  template <typename T,\n+            hb_enable_if (hb_is_integral (T))> constexpr auto\n+  impl (const T& v, hb_priority<0>) const HB_AUTO_RETURN\n+  (\n+    \/* Knuth's multiplicative method: *\/\n+    (uint32_t) v * 2654435761u\n+  )\n+\n+  public:\n+\n+  template <typename T> constexpr auto\n+  operator () (const T& v) const HB_RETURN (uint32_t, impl (v, hb_prioritize))\n+}\n+HB_FUNCOBJ (hb_hash);\n+\n+\n+struct\n+{\n+  private:\n+\n+  \/* Pointer-to-member-function. *\/\n+  template <typename Appl, typename T, typename ...Ts> auto\n+  impl (Appl&& a, hb_priority<2>, T &&v, Ts&&... ds) const HB_AUTO_RETURN\n+  ((hb_deref (hb_forward<T> (v)).*hb_forward<Appl> (a)) (hb_forward<Ts> (ds)...))\n+\n+  \/* Pointer-to-member. *\/\n+  template <typename Appl, typename T> auto\n+  impl (Appl&& a, hb_priority<1>, T &&v) const HB_AUTO_RETURN\n+  ((hb_deref (hb_forward<T> (v))).*hb_forward<Appl> (a))\n+\n+  \/* Operator(). *\/\n+  template <typename Appl, typename ...Ts> auto\n+  impl (Appl&& a, hb_priority<0>, Ts&&... ds) const HB_AUTO_RETURN\n+  (hb_deref (hb_forward<Appl> (a)) (hb_forward<Ts> (ds)...))\n+\n+  public:\n+\n+  template <typename Appl, typename ...Ts> auto\n+  operator () (Appl&& a, Ts&&... ds) const HB_AUTO_RETURN\n+  (\n+    impl (hb_forward<Appl> (a),\n+          hb_prioritize,\n+          hb_forward<Ts> (ds)...)\n+  )\n+}\n+HB_FUNCOBJ (hb_invoke);\n+\n+template <unsigned Pos, typename Appl, typename V>\n+struct hb_partial_t\n+{\n+  hb_partial_t (Appl a, V v) : a (a), v (v) {}\n+\n+  static_assert (Pos > 0, \"\");\n+\n+  template <typename ...Ts,\n+            unsigned P = Pos,\n+            hb_enable_if (P == 1)> auto\n+  operator () (Ts&& ...ds) -> decltype (hb_invoke (hb_declval (Appl),\n+                                                   hb_declval (V),\n+                                                   hb_declval (Ts)...))\n+  {\n+    return hb_invoke (hb_forward<Appl> (a),\n+                      hb_forward<V> (v),\n+                      hb_forward<Ts> (ds)...);\n+  }\n+  template <typename T0, typename ...Ts,\n+            unsigned P = Pos,\n+            hb_enable_if (P == 2)> auto\n+  operator () (T0&& d0, Ts&& ...ds) -> decltype (hb_invoke (hb_declval (Appl),\n+                                                            hb_declval (T0),\n+                                                            hb_declval (V),\n+                                                            hb_declval (Ts)...))\n+  {\n+    return hb_invoke (hb_forward<Appl> (a),\n+                      hb_forward<T0> (d0),\n+                      hb_forward<V> (v),\n+                      hb_forward<Ts> (ds)...);\n+  }\n+\n+  private:\n+  hb_reference_wrapper<Appl> a;\n+  V v;\n+};\n+template <unsigned Pos=1, typename Appl, typename V>\n+auto hb_partial (Appl&& a, V&& v) HB_AUTO_RETURN\n+(( hb_partial_t<Pos, Appl, V> (a, v) ))\n+\n+\/* The following, HB_PARTIALIZE, macro uses a particular corner-case\n+ * of C++11 that is not particularly well-supported by all compilers.\n+ * What's happening is that it's using \"this\" in a trailing return-type\n+ * via decltype().  Broken compilers deduce the type of \"this\" pointer\n+ * in that context differently from what it resolves to in the body\n+ * of the function.\n+ *\n+ * One probable cause of this is that at the time of trailing return\n+ * type declaration, \"this\" points to an incomplete type, whereas in\n+ * the function body the type is complete.  That doesn't justify the\n+ * error in any way, but is probably what's happening.\n+ *\n+ * In the case of MSVC, we get around this by using C++14 \"decltype(auto)\"\n+ * which deduces the type from the actual return statement.  For gcc 4.8\n+ * we use \"+this\" instead of \"this\" which produces an rvalue that seems\n+ * to be deduced as the same type with this particular compiler, and seem\n+ * to be fine as default code path as well.\n+ *\/\n+#ifdef _MSC_VER\n+\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1730 *\/ \\\n+#define HB_PARTIALIZE(Pos) \\\n+  template <typename _T> \\\n+  decltype(auto) operator () (_T&& _v) const \\\n+  { return hb_partial<Pos> (this, hb_forward<_T> (_v)); } \\\n+  static_assert (true, \"\")\n+#else\n+\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1724 *\/\n+#define HB_PARTIALIZE(Pos) \\\n+  template <typename _T> \\\n+  auto operator () (_T&& _v) const HB_AUTO_RETURN \\\n+  (hb_partial<Pos> (+this, hb_forward<_T> (_v))) \\\n+  static_assert (true, \"\")\n+#endif\n+\n+\n+struct\n+{\n+  private:\n+\n+  template <typename Pred, typename Val> auto\n+  impl (Pred&& p, Val &&v, hb_priority<1>) const HB_AUTO_RETURN\n+  (hb_deref (hb_forward<Pred> (p)).has (hb_forward<Val> (v)))\n+\n+  template <typename Pred, typename Val> auto\n+  impl (Pred&& p, Val &&v, hb_priority<0>) const HB_AUTO_RETURN\n+  (\n+    hb_invoke (hb_forward<Pred> (p),\n+               hb_forward<Val> (v))\n+  )\n+\n+  public:\n+\n+  template <typename Pred, typename Val> auto\n+  operator () (Pred&& p, Val &&v) const HB_RETURN (bool,\n+    impl (hb_forward<Pred> (p),\n+          hb_forward<Val> (v),\n+          hb_prioritize)\n+  )\n+}\n+HB_FUNCOBJ (hb_has);\n+\n+struct\n+{\n+  private:\n+\n+  template <typename Pred, typename Val> auto\n+  impl (Pred&& p, Val &&v, hb_priority<1>) const HB_AUTO_RETURN\n+  (\n+    hb_has (hb_forward<Pred> (p),\n+            hb_forward<Val> (v))\n+  )\n+\n+  template <typename Pred, typename Val> auto\n+  impl (Pred&& p, Val &&v, hb_priority<0>) const HB_AUTO_RETURN\n+  (\n+    hb_forward<Pred> (p) == hb_forward<Val> (v)\n+  )\n+\n+  public:\n+\n+  template <typename Pred, typename Val> auto\n+  operator () (Pred&& p, Val &&v) const HB_RETURN (bool,\n+    impl (hb_forward<Pred> (p),\n+          hb_forward<Val> (v),\n+          hb_prioritize)\n+  )\n+}\n+HB_FUNCOBJ (hb_match);\n+\n+struct\n+{\n+  private:\n+\n+  template <typename Proj, typename Val> auto\n+  impl (Proj&& f, Val &&v, hb_priority<2>) const HB_AUTO_RETURN\n+  (hb_deref (hb_forward<Proj> (f)).get (hb_forward<Val> (v)))\n+\n+  template <typename Proj, typename Val> auto\n+  impl (Proj&& f, Val &&v, hb_priority<1>) const HB_AUTO_RETURN\n+  (\n+    hb_invoke (hb_forward<Proj> (f),\n+               hb_forward<Val> (v))\n+  )\n+\n+  template <typename Proj, typename Val> auto\n+  impl (Proj&& f, Val &&v, hb_priority<0>) const HB_AUTO_RETURN\n+  (\n+    hb_forward<Proj> (f)[hb_forward<Val> (v)]\n+  )\n+\n+  public:\n+\n+  template <typename Proj, typename Val> auto\n+  operator () (Proj&& f, Val &&v) const HB_AUTO_RETURN\n+  (\n+    impl (hb_forward<Proj> (f),\n+          hb_forward<Val> (v),\n+          hb_prioritize)\n+  )\n+}\n+HB_FUNCOBJ (hb_get);\n+\n+\n+template <typename T1, typename T2>\n+struct hb_pair_t\n+{\n+  typedef T1 first_t;\n+  typedef T2 second_t;\n+  typedef hb_pair_t<T1, T2> pair_t;\n+\n+  hb_pair_t (T1 a, T2 b) : first (a), second (b) {}\n+\n+  template <typename Q1, typename Q2,\n+            hb_enable_if (hb_is_convertible (T1, Q1) &&\n+                          hb_is_convertible (T2, T2))>\n+  operator hb_pair_t<Q1, Q2> () { return hb_pair_t<Q1, Q2> (first, second); }\n+\n+  hb_pair_t<T1, T2> reverse () const\n+  { return hb_pair_t<T1, T2> (second, first); }\n+\n+  bool operator == (const pair_t& o) const { return first == o.first && second == o.second; }\n+  bool operator != (const pair_t& o) const { return !(*this == o); }\n+  bool operator < (const pair_t& o) const { return first < o.first || (first == o.first && second < o.second); }\n+  bool operator >= (const pair_t& o) const { return !(*this < o); }\n+  bool operator > (const pair_t& o) const { return first > o.first || (first == o.first && second > o.second); }\n+  bool operator <= (const pair_t& o) const { return !(*this > o); }\n+\n+  T1 first;\n+  T2 second;\n+};\n+#define hb_pair_t(T1,T2) hb_pair_t<T1, T2>\n+template <typename T1, typename T2> static inline hb_pair_t<T1, T2>\n+hb_pair (T1&& a, T2&& b) { return hb_pair_t<T1, T2> (a, b); }\n+\n+struct\n+{\n+  template <typename Pair> constexpr typename Pair::first_t\n+  operator () (const Pair& pair) const { return pair.first; }\n+}\n+HB_FUNCOBJ (hb_first);\n+\n+struct\n+{\n+  template <typename Pair> constexpr typename Pair::second_t\n+  operator () (const Pair& pair) const { return pair.second; }\n+}\n+HB_FUNCOBJ (hb_second);\n+\n+\/* Note.  In min\/max impl, we can use hb_type_identity<T> for second argument.\n+ * However, that would silently convert between different-signedness integers.\n+ * Instead we accept two different types, such that compiler can err if\n+ * comparing integers of different signedness. *\/\n+struct\n+{\n+  template <typename T, typename T2> constexpr auto\n+  operator () (T&& a, T2&& b) const HB_AUTO_RETURN\n+  (hb_forward<T> (a) <= hb_forward<T2> (b) ? hb_forward<T> (a) : hb_forward<T2> (b))\n+}\n+HB_FUNCOBJ (hb_min);\n+struct\n+{\n+  template <typename T, typename T2> constexpr auto\n+  operator () (T&& a, T2&& b) const HB_AUTO_RETURN\n+  (hb_forward<T> (a) >= hb_forward<T2> (b) ? hb_forward<T> (a) : hb_forward<T2> (b))\n+}\n+HB_FUNCOBJ (hb_max);\n+struct\n+{\n+  template <typename T, typename T2, typename T3> constexpr auto\n+  operator () (T&& x, T2&& min, T3&& max) const HB_AUTO_RETURN\n+  (hb_min (hb_max (hb_forward<T> (x), hb_forward<T2> (min)), hb_forward<T3> (max)))\n+}\n+HB_FUNCOBJ (hb_clamp);\n+\n+\n+\/*\n+ * Bithacks.\n+ *\/\n+\n+\/* Return the number of 1 bits in v. *\/\n+template <typename T>\n+static inline HB_CONST_FUNC unsigned int\n+hb_popcount (T v)\n+{\n+#if (defined(__GNUC__) && (__GNUC__ >= 4)) || defined(__clang__)\n+  if (sizeof (T) <= sizeof (unsigned int))\n+    return __builtin_popcount (v);\n+\n+  if (sizeof (T) <= sizeof (unsigned long))\n+    return __builtin_popcountl (v);\n+\n+  if (sizeof (T) <= sizeof (unsigned long long))\n+    return __builtin_popcountll (v);\n+#endif\n+\n+  if (sizeof (T) <= 4)\n+  {\n+    \/* \"HACKMEM 169\" *\/\n+    uint32_t y;\n+    y = (v >> 1) &033333333333;\n+    y = v - y - ((y >>1) & 033333333333);\n+    return (((y + (y >> 3)) & 030707070707) % 077);\n+  }\n+\n+  if (sizeof (T) == 8)\n+  {\n+    unsigned int shift = 32;\n+    return hb_popcount<uint32_t> ((uint32_t) v) + hb_popcount ((uint32_t) (v >> shift));\n+  }\n+\n+  if (sizeof (T) == 16)\n+  {\n+    unsigned int shift = 64;\n+    return hb_popcount<uint64_t> ((uint64_t) v) + hb_popcount ((uint64_t) (v >> shift));\n+  }\n+\n+  assert (0);\n+  return 0; \/* Shut up stupid compiler. *\/\n+}\n+\n+\/* Returns the number of bits needed to store number *\/\n+template <typename T>\n+static inline HB_CONST_FUNC unsigned int\n+hb_bit_storage (T v)\n+{\n+  if (unlikely (!v)) return 0;\n+\n+#if (defined(__GNUC__) && (__GNUC__ >= 4)) || defined(__clang__)\n+  if (sizeof (T) <= sizeof (unsigned int))\n+    return sizeof (unsigned int) * 8 - __builtin_clz (v);\n+\n+  if (sizeof (T) <= sizeof (unsigned long))\n+    return sizeof (unsigned long) * 8 - __builtin_clzl (v);\n+\n+  if (sizeof (T) <= sizeof (unsigned long long))\n+    return sizeof (unsigned long long) * 8 - __builtin_clzll (v);\n+#endif\n+\n+#if (defined(_MSC_VER) && _MSC_VER >= 1500) || (defined(__MINGW32__) && (__GNUC__ < 4))\n+  if (sizeof (T) <= sizeof (unsigned int))\n+  {\n+    unsigned long where;\n+    _BitScanReverse (&where, v);\n+    return 1 + where;\n+  }\n+# if defined(_WIN64)\n+  if (sizeof (T) <= 8)\n+  {\n+    unsigned long where;\n+    _BitScanReverse64 (&where, v);\n+    return 1 + where;\n+  }\n+# endif\n+#endif\n+\n+  if (sizeof (T) <= 4)\n+  {\n+    \/* \"bithacks\" *\/\n+    const unsigned int b[] = {0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000};\n+    const unsigned int S[] = {1, 2, 4, 8, 16};\n+    unsigned int r = 0;\n+    for (int i = 4; i >= 0; i--)\n+      if (v & b[i])\n+      {\n+        v >>= S[i];\n+        r |= S[i];\n+      }\n+    return r + 1;\n+  }\n+  if (sizeof (T) <= 8)\n+  {\n+    \/* \"bithacks\" *\/\n+    const uint64_t b[] = {0x2ULL, 0xCULL, 0xF0ULL, 0xFF00ULL, 0xFFFF0000ULL, 0xFFFFFFFF00000000ULL};\n+    const unsigned int S[] = {1, 2, 4, 8, 16, 32};\n+    unsigned int r = 0;\n+    for (int i = 5; i >= 0; i--)\n+      if (v & b[i])\n+      {\n+        v >>= S[i];\n+        r |= S[i];\n+      }\n+    return r + 1;\n+  }\n+  if (sizeof (T) == 16)\n+  {\n+    unsigned int shift = 64;\n+    return (v >> shift) ? hb_bit_storage<uint64_t> ((uint64_t) (v >> shift)) + shift :\n+                          hb_bit_storage<uint64_t> ((uint64_t) v);\n+  }\n+\n+  assert (0);\n+  return 0; \/* Shut up stupid compiler. *\/\n+}\n+\n+\/* Returns the number of zero bits in the least significant side of v *\/\n+template <typename T>\n+static inline HB_CONST_FUNC unsigned int\n+hb_ctz (T v)\n+{\n+  if (unlikely (!v)) return 8 * sizeof (T);\n+\n+#if (defined(__GNUC__) && (__GNUC__ >= 4)) || defined(__clang__)\n+  if (sizeof (T) <= sizeof (unsigned int))\n+    return __builtin_ctz (v);\n+\n+  if (sizeof (T) <= sizeof (unsigned long))\n+    return __builtin_ctzl (v);\n+\n+  if (sizeof (T) <= sizeof (unsigned long long))\n+    return __builtin_ctzll (v);\n+#endif\n+\n+#if (defined(_MSC_VER) && _MSC_VER >= 1500) || (defined(__MINGW32__) && (__GNUC__ < 4))\n+  if (sizeof (T) <= sizeof (unsigned int))\n+  {\n+    unsigned long where;\n+    _BitScanForward (&where, v);\n+    return where;\n+  }\n+# if defined(_WIN64)\n+  if (sizeof (T) <= 8)\n+  {\n+    unsigned long where;\n+    _BitScanForward64 (&where, v);\n+    return where;\n+  }\n+# endif\n+#endif\n+\n+  if (sizeof (T) <= 4)\n+  {\n+    \/* \"bithacks\" *\/\n+    unsigned int c = 32;\n+    v &= - (int32_t) v;\n+    if (v) c--;\n+    if (v & 0x0000FFFF) c -= 16;\n+    if (v & 0x00FF00FF) c -= 8;\n+    if (v & 0x0F0F0F0F) c -= 4;\n+    if (v & 0x33333333) c -= 2;\n+    if (v & 0x55555555) c -= 1;\n+    return c;\n+  }\n+  if (sizeof (T) <= 8)\n+  {\n+    \/* \"bithacks\" *\/\n+    unsigned int c = 64;\n+    v &= - (int64_t) (v);\n+    if (v) c--;\n+    if (v & 0x00000000FFFFFFFFULL) c -= 32;\n+    if (v & 0x0000FFFF0000FFFFULL) c -= 16;\n+    if (v & 0x00FF00FF00FF00FFULL) c -= 8;\n+    if (v & 0x0F0F0F0F0F0F0F0FULL) c -= 4;\n+    if (v & 0x3333333333333333ULL) c -= 2;\n+    if (v & 0x5555555555555555ULL) c -= 1;\n+    return c;\n+  }\n+  if (sizeof (T) == 16)\n+  {\n+    unsigned int shift = 64;\n+    return (uint64_t) v ? hb_bit_storage<uint64_t> ((uint64_t) v) :\n+                          hb_bit_storage<uint64_t> ((uint64_t) (v >> shift)) + shift;\n+  }\n+\n+  assert (0);\n+  return 0; \/* Shut up stupid compiler. *\/\n+}\n+\n+\n+\/*\n+ * Tiny stuff.\n+ *\/\n+\n+\/* ASCII tag\/character handling *\/\n+static inline bool ISALPHA (unsigned char c)\n+{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'); }\n+static inline bool ISALNUM (unsigned char c)\n+{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'); }\n+static inline bool ISSPACE (unsigned char c)\n+{ return c == ' ' || c =='\\f'|| c =='\\n'|| c =='\\r'|| c =='\\t'|| c =='\\v'; }\n+static inline unsigned char TOUPPER (unsigned char c)\n+{ return (c >= 'a' && c <= 'z') ? c - 'a' + 'A' : c; }\n+static inline unsigned char TOLOWER (unsigned char c)\n+{ return (c >= 'A' && c <= 'Z') ? c - 'A' + 'a' : c; }\n+static inline bool ISHEX (unsigned char c)\n+{ return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'); }\n+static inline unsigned char TOHEX (uint8_t c)\n+{ return (c & 0xF) <= 9 ? (c & 0xF) + '0' : (c & 0xF) + 'a' - 10; }\n+static inline uint8_t FROMHEX (unsigned char c)\n+{ return (c >= '0' && c <= '9') ? c - '0' : TOLOWER (c) - 'a' + 10; }\n+\n+static inline unsigned int DIV_CEIL (const unsigned int a, unsigned int b)\n+{ return (a + (b - 1)) \/ b; }\n+\n+\n+#undef  ARRAY_LENGTH\n+template <typename Type, unsigned int n>\n+static inline unsigned int ARRAY_LENGTH (const Type (&)[n]) { return n; }\n+\/* A const version, but does not detect erratically being called on pointers. *\/\n+#define ARRAY_LENGTH_CONST(__array) ((signed int) (sizeof (__array) \/ sizeof (__array[0])))\n+\n+\n+static inline int\n+hb_memcmp (const void *a, const void *b, unsigned int len)\n+{\n+  \/* It's illegal to pass NULL to memcmp(), even if len is zero.\n+   * So, wrap it.\n+   * https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=23878 *\/\n+  if (unlikely (!len)) return 0;\n+  return memcmp (a, b, len);\n+}\n+\n+static inline void *\n+hb_memset (void *s, int c, unsigned int n)\n+{\n+  \/* It's illegal to pass NULL to memset(), even if n is zero. *\/\n+  if (unlikely (!n)) return 0;\n+  return memset (s, c, n);\n+}\n+\n+static inline unsigned int\n+hb_ceil_to_4 (unsigned int v)\n+{\n+  return ((v - 1) | 3) + 1;\n+}\n+\n+template <typename T> static inline bool\n+hb_in_range (T u, T lo, T hi)\n+{\n+  static_assert (!hb_is_signed<T>::value, \"\");\n+\n+  \/* The casts below are important as if T is smaller than int,\n+   * the subtract results will become a signed int! *\/\n+  return (T)(u - lo) <= (T)(hi - lo);\n+}\n+template <typename T> static inline bool\n+hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2)\n+{\n+  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2);\n+}\n+template <typename T> static inline bool\n+hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2, T lo3, T hi3)\n+{\n+  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2) || hb_in_range (u, lo3, hi3);\n+}\n+\n+\n+\/*\n+ * Overflow checking.\n+ *\/\n+\n+\/* Consider __builtin_mul_overflow use here also *\/\n+static inline bool\n+hb_unsigned_mul_overflows (unsigned int count, unsigned int size)\n+{\n+  return (size > 0) && (count >= ((unsigned int) -1) \/ size);\n+}\n+\n+\n+\/*\n+ * Sort and search.\n+ *\/\n+\n+template <typename K, typename V, typename ...Ts>\n+static int\n+_hb_cmp_method (const void *pkey, const void *pval, Ts... ds)\n+{\n+  const K& key = * (const K*) pkey;\n+  const V& val = * (const V*) pval;\n+\n+  return val.cmp (key, ds...);\n+}\n+\n+template <typename V, typename K, typename ...Ts>\n+static inline bool\n+hb_bsearch_impl (unsigned *pos, \/* Out *\/\n+                 const K& key,\n+                 V* base, size_t nmemb, size_t stride,\n+                 int (*compar)(const void *_key, const void *_item, Ts... _ds),\n+                 Ts... ds)\n+{\n+  \/* This is our *only* bsearch implementation. *\/\n+\n+  int min = 0, max = (int) nmemb - 1;\n+  while (min <= max)\n+  {\n+    int mid = ((unsigned int) min + (unsigned int) max) \/ 2;\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wcast-align\"\n+    V* p = (V*) (((const char *) base) + (mid * stride));\n+#pragma GCC diagnostic pop\n+    int c = compar ((const void *) hb_addressof (key), (const void *) p, ds...);\n+    if (c < 0)\n+      max = mid - 1;\n+    else if (c > 0)\n+      min = mid + 1;\n+    else\n+    {\n+      *pos = mid;\n+      return true;\n+    }\n+  }\n+  *pos = min;\n+  return false;\n+}\n+\n+template <typename V, typename K>\n+static inline V*\n+hb_bsearch (const K& key, V* base,\n+            size_t nmemb, size_t stride = sizeof (V),\n+            int (*compar)(const void *_key, const void *_item) = _hb_cmp_method<K, V>)\n+{\n+  unsigned pos;\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wcast-align\"\n+  return hb_bsearch_impl (&pos, key, base, nmemb, stride, compar) ?\n+         (V*) (((const char *) base) + (pos * stride)) : nullptr;\n+#pragma GCC diagnostic pop\n+}\n+template <typename V, typename K, typename ...Ts>\n+static inline V*\n+hb_bsearch (const K& key, V* base,\n+            size_t nmemb, size_t stride,\n+            int (*compar)(const void *_key, const void *_item, Ts... _ds),\n+            Ts... ds)\n+{\n+  unsigned pos;\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wcast-align\"\n+  return hb_bsearch_impl (&pos, key, base, nmemb, stride, compar, ds...) ?\n+         (V*) (((const char *) base) + (pos * stride)) : nullptr;\n+#pragma GCC diagnostic pop\n+}\n+\n+\n+\/* From https:\/\/github.com\/noporpoise\/sort_r\n+   Feb 5, 2019 (c8c65c1e)\n+   Modified to support optional argument using templates *\/\n+\n+\/* Isaac Turner 29 April 2014 Public Domain *\/\n+\n+\/*\n+hb_qsort function to be exported.\n+Parameters:\n+  base is the array to be sorted\n+  nel is the number of elements in the array\n+  width is the size in bytes of each element of the array\n+  compar is the comparison function\n+  arg (optional) is a pointer to be passed to the comparison function\n+\n+void hb_qsort(void *base, size_t nel, size_t width,\n+              int (*compar)(const void *_a, const void *_b, [void *_arg]),\n+              [void *arg]);\n+*\/\n+\n+#define SORT_R_SWAP(a,b,tmp) ((tmp) = (a), (a) = (b), (b) = (tmp))\n+\n+\/* swap a and b *\/\n+\/* a and b must not be equal! *\/\n+static inline void sort_r_swap(char *__restrict a, char *__restrict b,\n+                               size_t w)\n+{\n+  char tmp, *end = a+w;\n+  for(; a < end; a++, b++) { SORT_R_SWAP(*a, *b, tmp); }\n+}\n+\n+\/* swap a, b iff a>b *\/\n+\/* a and b must not be equal! *\/\n+\/* __restrict is same as restrict but better support on old machines *\/\n+template <typename ...Ts>\n+static inline int sort_r_cmpswap(char *__restrict a,\n+                                 char *__restrict b, size_t w,\n+                                 int (*compar)(const void *_a,\n+                                               const void *_b,\n+                                               Ts... _ds),\n+                                 Ts... ds)\n+{\n+  if(compar(a, b, ds...) > 0) {\n+    sort_r_swap(a, b, w);\n+    return 1;\n+  }\n+  return 0;\n+}\n+\n+\/*\n+Swap consecutive blocks of bytes of size na and nb starting at memory addr ptr,\n+with the smallest swap so that the blocks are in the opposite order. Blocks may\n+be internally re-ordered e.g.\n+  12345ab  ->   ab34512\n+  123abc   ->   abc123\n+  12abcde  ->   deabc12\n+*\/\n+static inline void sort_r_swap_blocks(char *ptr, size_t na, size_t nb)\n+{\n+  if(na > 0 && nb > 0) {\n+    if(na > nb) { sort_r_swap(ptr, ptr+na, nb); }\n+    else { sort_r_swap(ptr, ptr+nb, na); }\n+  }\n+}\n+\n+\/* Implement recursive quicksort ourselves *\/\n+\/* Note: quicksort is not stable, equivalent values may be swapped *\/\n+template <typename ...Ts>\n+static inline void sort_r_simple(void *base, size_t nel, size_t w,\n+                                 int (*compar)(const void *_a,\n+                                               const void *_b,\n+                                               Ts... _ds),\n+                                 Ts... ds)\n+{\n+  char *b = (char *)base, *end = b + nel*w;\n+\n+  \/* for(size_t i=0; i<nel; i++) {printf(\"%4i\", *(int*)(b + i*sizeof(int)));}\n+  printf(\"\\n\"); *\/\n+\n+  if(nel < 10) {\n+    \/* Insertion sort for arbitrarily small inputs *\/\n+    char *pi, *pj;\n+    for(pi = b+w; pi < end; pi += w) {\n+      for(pj = pi; pj > b && sort_r_cmpswap(pj-w,pj,w,compar,ds...); pj -= w) {}\n+    }\n+  }\n+  else\n+  {\n+    \/* nel > 9; Quicksort *\/\n+\n+    int cmp;\n+    char *pl, *ple, *pr, *pre, *pivot;\n+    char *last = b+w*(nel-1), *tmp;\n+\n+    \/*\n+    Use median of second, middle and second-last items as pivot.\n+    First and last may have been swapped with pivot and therefore be extreme\n+    *\/\n+    char *l[3];\n+    l[0] = b + w;\n+    l[1] = b+w*(nel\/2);\n+    l[2] = last - w;\n+\n+    \/* printf(\"pivots: %i, %i, %i\\n\", *(int*)l[0], *(int*)l[1], *(int*)l[2]); *\/\n+\n+    if(compar(l[0],l[1],ds...) > 0) { SORT_R_SWAP(l[0], l[1], tmp); }\n+    if(compar(l[1],l[2],ds...) > 0) {\n+      SORT_R_SWAP(l[1], l[2], tmp);\n+      if(compar(l[0],l[1],ds...) > 0) { SORT_R_SWAP(l[0], l[1], tmp); }\n+    }\n+\n+    \/* swap mid value (l[1]), and last element to put pivot as last element *\/\n+    if(l[1] != last) { sort_r_swap(l[1], last, w); }\n+\n+    \/*\n+    pl is the next item on the left to be compared to the pivot\n+    pr is the last item on the right that was compared to the pivot\n+    ple is the left position to put the next item that equals the pivot\n+    ple is the last right position where we put an item that equals the pivot\n+                                           v- end (beyond the array)\n+      EEEEEELLLLLLLLuuuuuuuuGGGGGGGEEEEEEEE.\n+      ^- b  ^- ple  ^- pl   ^- pr  ^- pre ^- last (where the pivot is)\n+    Pivot comparison key:\n+      E = equal, L = less than, u = unknown, G = greater than, E = equal\n+    *\/\n+    pivot = last;\n+    ple = pl = b;\n+    pre = pr = last;\n+\n+    \/*\n+    Strategy:\n+    Loop into the list from the left and right at the same time to find:\n+    - an item on the left that is greater than the pivot\n+    - an item on the right that is less than the pivot\n+    Once found, they are swapped and the loop continues.\n+    Meanwhile items that are equal to the pivot are moved to the edges of the\n+    array.\n+    *\/\n+    while(pl < pr) {\n+      \/* Move left hand items which are equal to the pivot to the far left.\n+         break when we find an item that is greater than the pivot *\/\n+      for(; pl < pr; pl += w) {\n+        cmp = compar(pl, pivot, ds...);\n+        if(cmp > 0) { break; }\n+        else if(cmp == 0) {\n+          if(ple < pl) { sort_r_swap(ple, pl, w); }\n+          ple += w;\n+        }\n+      }\n+      \/* break if last batch of left hand items were equal to pivot *\/\n+      if(pl >= pr) { break; }\n+      \/* Move right hand items which are equal to the pivot to the far right.\n+         break when we find an item that is less than the pivot *\/\n+      for(; pl < pr; ) {\n+        pr -= w; \/* Move right pointer onto an unprocessed item *\/\n+        cmp = compar(pr, pivot, ds...);\n+        if(cmp == 0) {\n+          pre -= w;\n+          if(pr < pre) { sort_r_swap(pr, pre, w); }\n+        }\n+        else if(cmp < 0) {\n+          if(pl < pr) { sort_r_swap(pl, pr, w); }\n+          pl += w;\n+          break;\n+        }\n+      }\n+    }\n+\n+    pl = pr; \/* pr may have gone below pl *\/\n+\n+    \/*\n+    Now we need to go from: EEELLLGGGGEEEE\n+                        to: LLLEEEEEEEGGGG\n+    Pivot comparison key:\n+      E = equal, L = less than, u = unknown, G = greater than, E = equal\n+    *\/\n+    sort_r_swap_blocks(b, ple-b, pl-ple);\n+    sort_r_swap_blocks(pr, pre-pr, end-pre);\n+\n+    \/*for(size_t i=0; i<nel; i++) {printf(\"%4i\", *(int*)(b + i*sizeof(int)));}\n+    printf(\"\\n\");*\/\n+\n+    sort_r_simple(b, (pl-ple)\/w, w, compar, ds...);\n+    sort_r_simple(end-(pre-pr), (pre-pr)\/w, w, compar, ds...);\n+  }\n+}\n+\n+static inline void\n+hb_qsort (void *base, size_t nel, size_t width,\n+          int (*compar)(const void *_a, const void *_b))\n+{\n+#if defined(__OPTIMIZE_SIZE__) && !defined(HB_USE_INTERNAL_QSORT)\n+  qsort (base, nel, width, compar);\n+#else\n+  sort_r_simple (base, nel, width, compar);\n+#endif\n+}\n+\n+static inline void\n+hb_qsort (void *base, size_t nel, size_t width,\n+          int (*compar)(const void *_a, const void *_b, void *_arg),\n+          void *arg)\n+{\n+#ifdef HAVE_GNU_QSORT_R\n+  qsort_r (base, nel, width, compar, arg);\n+#else\n+  sort_r_simple (base, nel, width, compar, arg);\n+#endif\n+}\n+\n+\n+template <typename T, typename T2, typename T3> static inline void\n+hb_stable_sort (T *array, unsigned int len, int(*compar)(const T2 *, const T2 *), T3 *array2)\n+{\n+  for (unsigned int i = 1; i < len; i++)\n+  {\n+    unsigned int j = i;\n+    while (j && compar (&array[j - 1], &array[i]) > 0)\n+      j--;\n+    if (i == j)\n+      continue;\n+    \/* Move item i to occupy place for item j, shift what's in between. *\/\n+    {\n+      T t = array[i];\n+      memmove (&array[j + 1], &array[j], (i - j) * sizeof (T));\n+      array[j] = t;\n+    }\n+    if (array2)\n+    {\n+      T3 t = array2[i];\n+      memmove (&array2[j + 1], &array2[j], (i - j) * sizeof (T3));\n+      array2[j] = t;\n+    }\n+  }\n+}\n+\n+template <typename T> static inline void\n+hb_stable_sort (T *array, unsigned int len, int(*compar)(const T *, const T *))\n+{\n+  hb_stable_sort (array, len, compar, (int *) nullptr);\n+}\n+\n+static inline hb_bool_t\n+hb_codepoint_parse (const char *s, unsigned int len, int base, hb_codepoint_t *out)\n+{\n+  unsigned int v;\n+  const char *p = s;\n+  const char *end = p + len;\n+  if (unlikely (!hb_parse_uint (&p, end, &v, true\/* whole buffer *\/, base)))\n+    return false;\n+\n+  *out = v;\n+  return true;\n+}\n+\n+\n+\/* Operators. *\/\n+\n+struct hb_bitwise_and\n+{ HB_PARTIALIZE(2);\n+  static constexpr bool passthru_left = false;\n+  static constexpr bool passthru_right = false;\n+  template <typename T> constexpr auto\n+  operator () (const T &a, const T &b) const HB_AUTO_RETURN (a & b)\n+}\n+HB_FUNCOBJ (hb_bitwise_and);\n+struct hb_bitwise_or\n+{ HB_PARTIALIZE(2);\n+  static constexpr bool passthru_left = true;\n+  static constexpr bool passthru_right = true;\n+  template <typename T> constexpr auto\n+  operator () (const T &a, const T &b) const HB_AUTO_RETURN (a | b)\n+}\n+HB_FUNCOBJ (hb_bitwise_or);\n+struct hb_bitwise_xor\n+{ HB_PARTIALIZE(2);\n+  static constexpr bool passthru_left = true;\n+  static constexpr bool passthru_right = true;\n+  template <typename T> constexpr auto\n+  operator () (const T &a, const T &b) const HB_AUTO_RETURN (a ^ b)\n+}\n+HB_FUNCOBJ (hb_bitwise_xor);\n+struct hb_bitwise_sub\n+{ HB_PARTIALIZE(2);\n+  static constexpr bool passthru_left = true;\n+  static constexpr bool passthru_right = false;\n+  template <typename T> constexpr auto\n+  operator () (const T &a, const T &b) const HB_AUTO_RETURN (a & ~b)\n+}\n+HB_FUNCOBJ (hb_bitwise_sub);\n+struct\n+{\n+  template <typename T> constexpr auto\n+  operator () (const T &a) const HB_AUTO_RETURN (~a)\n+}\n+HB_FUNCOBJ (hb_bitwise_neg);\n+\n+struct\n+{ HB_PARTIALIZE(2);\n+  template <typename T, typename T2> constexpr auto\n+  operator () (const T &a, const T2 &b) const HB_AUTO_RETURN (a + b)\n+}\n+HB_FUNCOBJ (hb_add);\n+struct\n+{ HB_PARTIALIZE(2);\n+  template <typename T, typename T2> constexpr auto\n+  operator () (const T &a, const T2 &b) const HB_AUTO_RETURN (a - b)\n+}\n+HB_FUNCOBJ (hb_sub);\n+struct\n+{ HB_PARTIALIZE(2);\n+  template <typename T, typename T2> constexpr auto\n+  operator () (const T &a, const T2 &b) const HB_AUTO_RETURN (a * b)\n+}\n+HB_FUNCOBJ (hb_mul);\n+struct\n+{ HB_PARTIALIZE(2);\n+  template <typename T, typename T2> constexpr auto\n+  operator () (const T &a, const T2 &b) const HB_AUTO_RETURN (a \/ b)\n+}\n+HB_FUNCOBJ (hb_div);\n+struct\n+{ HB_PARTIALIZE(2);\n+  template <typename T, typename T2> constexpr auto\n+  operator () (const T &a, const T2 &b) const HB_AUTO_RETURN (a % b)\n+}\n+HB_FUNCOBJ (hb_mod);\n+struct\n+{\n+  template <typename T> constexpr auto\n+  operator () (const T &a) const HB_AUTO_RETURN (+a)\n+}\n+HB_FUNCOBJ (hb_pos);\n+struct\n+{\n+  template <typename T> constexpr auto\n+  operator () (const T &a) const HB_AUTO_RETURN (-a)\n+}\n+HB_FUNCOBJ (hb_neg);\n+struct\n+{\n+  template <typename T> constexpr auto\n+  operator () (T &a) const HB_AUTO_RETURN (++a)\n+}\n+HB_FUNCOBJ (hb_inc);\n+struct\n+{\n+  template <typename T> constexpr auto\n+  operator () (T &a) const HB_AUTO_RETURN (--a)\n+}\n+HB_FUNCOBJ (hb_dec);\n+\n+\n+\/* Compiler-assisted vectorization. *\/\n+\n+\/* Type behaving similar to vectorized vars defined using __attribute__((vector_size(...))),\n+ * basically a fixed-size bitset. *\/\n+template <typename elt_t, unsigned int byte_size>\n+struct hb_vector_size_t\n+{\n+  elt_t& operator [] (unsigned int i) { return v[i]; }\n+  const elt_t& operator [] (unsigned int i) const { return v[i]; }\n+\n+  void clear (unsigned char v = 0) { memset (this, v, sizeof (*this)); }\n+\n+  template <typename Op>\n+  hb_vector_size_t process (const Op& op) const\n+  {\n+    hb_vector_size_t r;\n+    for (unsigned int i = 0; i < ARRAY_LENGTH (v); i++)\n+      r.v[i] = op (v[i]);\n+    return r;\n+  }\n+  template <typename Op>\n+  hb_vector_size_t process (const Op& op, const hb_vector_size_t &o) const\n+  {\n+    hb_vector_size_t r;\n+    for (unsigned int i = 0; i < ARRAY_LENGTH (v); i++)\n+      r.v[i] = op (v[i], o.v[i]);\n+    return r;\n+  }\n+  hb_vector_size_t operator | (const hb_vector_size_t &o) const\n+  { return process (hb_bitwise_or, o); }\n+  hb_vector_size_t operator & (const hb_vector_size_t &o) const\n+  { return process (hb_bitwise_and, o); }\n+  hb_vector_size_t operator ^ (const hb_vector_size_t &o) const\n+  { return process (hb_bitwise_xor, o); }\n+  hb_vector_size_t operator ~ () const\n+  { return process (hb_bitwise_neg); }\n+\n+  private:\n+  static_assert (0 == byte_size % sizeof (elt_t), \"\");\n+  elt_t v[byte_size \/ sizeof (elt_t)];\n+};\n+\n+\n+#endif \/* HB_ALGS_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-algs.hh","additions":1127,"deletions":0,"binary":false,"changes":1127,"status":"added"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"hb-dsalgs.hh\"\n+#include \"hb-algs.hh\"\n@@ -40,3 +40,1 @@\n-struct hb_array_t :\n-        hb_iter_t<hb_array_t<Type>, Type>,\n-        hb_iter_mixin_t<hb_array_t<Type>, Type>\n+struct hb_array_t : hb_iter_with_fallback_t<hb_array_t<Type>, Type&>\n@@ -47,3 +45,4 @@\n-  hb_array_t () : arrayZ (nullptr), length (0) {}\n-  hb_array_t (Type *array_, unsigned int length_) : arrayZ (array_), length (length_) {}\n-  template <unsigned int length_> hb_array_t (Type (&array_)[length_]) : arrayZ (array_), length (length_) {}\n+  hb_array_t () : arrayZ (nullptr), length (0), backwards_length (0) {}\n+  hb_array_t (Type *array_, unsigned int length_) : arrayZ (array_), length (length_), backwards_length (0) {}\n+  template <unsigned int length_>\n+  hb_array_t (Type (&array_)[length_]) : arrayZ (array_), length (length_), backwards_length (0) {}\n@@ -51,0 +50,9 @@\n+  template <typename U,\n+            hb_enable_if (hb_is_cr_convertible(U, Type))>\n+  hb_array_t (const hb_array_t<U> &o) :\n+    hb_iter_with_fallback_t<hb_array_t, Type&> (),\n+    arrayZ (o.arrayZ), length (o.length), backwards_length (o.backwards_length) {}\n+  template <typename U,\n+            hb_enable_if (hb_is_cr_convertible(U, Type))>\n+  hb_array_t& operator = (const hb_array_t<U> &o)\n+  { arrayZ = o.arrayZ; length = o.length; backwards_length = o.backwards_length; return *this; }\n@@ -55,1 +63,2 @@\n-  typedef Type __item_type__;\n+  typedef Type& __item_t__;\n+  static constexpr bool is_random_access_iterator = true;\n@@ -66,0 +75,1 @@\n+    backwards_length += n;\n@@ -70,3 +80,5 @@\n-    if (unlikely (n > length))\n-      n = length;\n-    length -= n;\n+    if (unlikely (n > backwards_length))\n+      n = backwards_length;\n+    length += n;\n+    backwards_length -= n;\n+    arrayZ -= n;\n@@ -75,1 +87,7 @@\n-  bool __random_access__ () const { return true; }\n+  \/* Ouch. The operator== compares the contents of the array.  For range-based for loops,\n+   * it's best if we can just compare arrayZ, though comparing contents is still fast,\n+   * but also would require that Type has operator==.  As such, we optimize this operator\n+   * for range-based for loop and just compare arrayZ.  No need to compare length, as we\n+   * assume we're only compared to .end(). *\/\n+  bool operator != (const hb_array_t& o) const\n+  { return arrayZ != o.arrayZ; }\n@@ -83,0 +101,10 @@\n+  HB_INTERNAL bool operator == (const hb_array_t &o) const;\n+\n+  uint32_t hash () const {\n+    uint32_t current = 0;\n+    for (unsigned int i = 0; i < this->length; i++) {\n+      current = current * 31 + hb_hash (this->arrayZ[i]);\n+    }\n+    return current;\n+  }\n+\n@@ -88,1 +116,1 @@\n-  int cmp (const hb_array_t<Type> &a) const\n+  int cmp (const hb_array_t &a) const\n@@ -94,1 +122,1 @@\n-  static int cmp (const void *pa, const void *pb)\n+  HB_INTERNAL static int cmp (const void *pa, const void *pb)\n@@ -96,2 +124,2 @@\n-    hb_array_t<Type> *a = (hb_array_t<Type> *) pa;\n-    hb_array_t<Type> *b = (hb_array_t<Type> *) pb;\n+    hb_array_t *a = (hb_array_t *) pa;\n+    hb_array_t *b = (hb_array_t *) pb;\n@@ -104,5 +132,2 @@\n-    unsigned int count = length;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (!this->arrayZ[i].cmp (x))\n-        return &this->arrayZ[i];\n-    return not_found;\n+    unsigned i;\n+    return lfind (x, &i) ? &this->arrayZ[i] : not_found;\n@@ -113,2 +138,7 @@\n-    unsigned int count = length;\n-    for (unsigned int i = 0; i < count; i++)\n+    unsigned i;\n+    return lfind (x, &i) ? &this->arrayZ[i] : not_found;\n+  }\n+  template <typename T>\n+  bool lfind (const T &x, unsigned *pos = nullptr) const\n+  {\n+    for (unsigned i = 0; i < length; ++i)\n@@ -116,2 +146,7 @@\n-        return &this->arrayZ[i];\n-    return not_found;\n+      {\n+        if (pos)\n+          *pos = i;\n+        return true;\n+      }\n+\n+    return false;\n@@ -123,1 +158,1 @@\n-      ::qsort (arrayZ, length, this->item_size, cmp_);\n+      hb_qsort (arrayZ, length, this->get_item_size (), cmp_);\n@@ -129,1 +164,1 @@\n-      ::qsort (arrayZ, length, this->item_size, Type::cmp);\n+      hb_qsort (arrayZ, length, this->get_item_size (), Type::cmp);\n@@ -134,1 +169,1 @@\n-    end = MIN (end, length);\n+    end = hb_min (end, length);\n@@ -137,1 +172,1 @@\n-      ::qsort (arrayZ + start, end - start, this->item_size, Type::cmp);\n+      hb_qsort (arrayZ + start, end - start, this->get_item_size (), Type::cmp);\n@@ -144,1 +179,1 @@\n-  unsigned int get_size () const { return length * this->item_size; }\n+  unsigned int get_size () const { return length * this->get_item_size (); }\n@@ -146,1 +181,19 @@\n-  hb_array_t<Type> sub_array (unsigned int start_offset = 0, unsigned int *seg_count = nullptr \/* IN\/OUT *\/) const\n+  \/*\n+   * Reverse the order of items in this array in the range [start, end).\n+   *\/\n+  void reverse (unsigned start = 0, unsigned end = -1)\n+  {\n+    start = hb_min (start, length);\n+    end = hb_min (end, length);\n+\n+    if (end < start + 2)\n+      return;\n+\n+    for (unsigned lhs = start, rhs = end - 1; lhs < rhs; lhs++, rhs--) {\n+      Type temp = arrayZ[rhs];\n+      arrayZ[rhs] = arrayZ[lhs];\n+      arrayZ[lhs] = temp;\n+    }\n+  }\n+\n+  hb_array_t sub_array (unsigned int start_offset = 0, unsigned int *seg_count = nullptr \/* IN\/OUT *\/) const\n@@ -157,2 +210,2 @@\n-      count = *seg_count = MIN (count, *seg_count);\n-    return hb_array_t<Type> (arrayZ + start_offset, count);\n+      count = *seg_count = hb_min (count, *seg_count);\n+    return hb_array_t (arrayZ + start_offset, count);\n@@ -160,1 +213,1 @@\n-  hb_array_t<Type> sub_array (unsigned int start_offset, unsigned int seg_count) const\n+  hb_array_t sub_array (unsigned int start_offset, unsigned int seg_count) const\n@@ -163,0 +216,18 @@\n+  hb_array_t truncate (unsigned length) const { return sub_array (0, length); }\n+\n+  template <typename T,\n+            unsigned P = sizeof (Type),\n+            hb_enable_if (P == 1)>\n+  const T *as () const\n+  { return length < hb_null_size (T) ? &Null (T) : reinterpret_cast<const T *> (arrayZ); }\n+\n+  template <typename T,\n+            unsigned P = sizeof (Type),\n+            hb_enable_if (P == 1)>\n+  bool check_range (const T *p, unsigned int size = T::static_size) const\n+  {\n+    return arrayZ <= ((const char *) p)\n+        && ((const char *) p) <= arrayZ + length\n+        && (unsigned int) (arrayZ + length - (const char *) p) >= size;\n+  }\n+\n@@ -167,0 +238,11 @@\n+  template <typename hb_serialize_context_t>\n+  hb_array_t copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto* out = c->start_embed (arrayZ);\n+    if (unlikely (!c->extend_size (out, get_size ()))) return_trace (hb_array_t ());\n+    for (unsigned i = 0; i < length; i++)\n+      out[i] = arrayZ[i]; \/* TODO: add version that calls c->copy() *\/\n+    return_trace (hb_array_t (out, length));\n+  }\n+\n@@ -178,0 +260,1 @@\n+  unsigned int backwards_length;\n@@ -186,1 +269,0 @@\n-\n@@ -196,3 +278,2 @@\n-        hb_sorted_iter_t<hb_sorted_array_t<Type>, Type>,\n-        hb_array_t<Type>,\n-        hb_iter_mixin_t<hb_sorted_array_t<Type>, Type>\n+        hb_iter_t<hb_sorted_array_t<Type>, Type&>,\n+        hb_array_t<Type>\n@@ -200,0 +281,5 @@\n+  typedef hb_iter_t<hb_sorted_array_t, Type&> iter_base_t;\n+  HB_ITER_USING (iter_base_t);\n+  static constexpr bool is_random_access_iterator = true;\n+  static constexpr bool is_sorted_iterator = true;\n+\n@@ -201,1 +287,0 @@\n-  hb_sorted_array_t (const hb_array_t<Type> &o) : hb_array_t<Type> (o) {}\n@@ -203,1 +288,16 @@\n-  template <unsigned int length_> hb_sorted_array_t (Type (&array_)[length_]) : hb_array_t<Type> (array_) {}\n+  template <unsigned int length_>\n+  hb_sorted_array_t (Type (&array_)[length_]) : hb_array_t<Type> (array_) {}\n+\n+  template <typename U,\n+            hb_enable_if (hb_is_cr_convertible(U, Type))>\n+  hb_sorted_array_t (const hb_array_t<U> &o) :\n+    hb_iter_t<hb_sorted_array_t, Type&> (),\n+    hb_array_t<Type> (o) {}\n+  template <typename U,\n+            hb_enable_if (hb_is_cr_convertible(U, Type))>\n+  hb_sorted_array_t& operator = (const hb_array_t<U> &o)\n+  { hb_array_t<Type> (*this) = o; return *this; }\n+\n+  \/* Iterator implementation. *\/\n+  bool operator != (const hb_sorted_array_t& o) const\n+  { return this->arrayZ != o.arrayZ || this->length != o.length; }\n@@ -205,3 +305,3 @@\n-  hb_sorted_array_t<Type> sub_array (unsigned int start_offset, unsigned int *seg_count \/* IN\/OUT *\/) const\n-  { return hb_sorted_array_t<Type> (((const hb_array_t<Type> *) (this))->sub_array (start_offset, seg_count)); }\n-  hb_sorted_array_t<Type> sub_array (unsigned int start_offset, unsigned int seg_count) const\n+  hb_sorted_array_t sub_array (unsigned int start_offset, unsigned int *seg_count \/* IN\/OUT *\/) const\n+  { return hb_sorted_array_t (((const hb_array_t<Type> *) (this))->sub_array (start_offset, seg_count)); }\n+  hb_sorted_array_t sub_array (unsigned int start_offset, unsigned int seg_count) const\n@@ -210,0 +310,2 @@\n+  hb_sorted_array_t truncate (unsigned length) const { return sub_array (0, length); }\n+\n@@ -224,2 +326,2 @@\n-                     hb_bfind_not_found_t not_found = HB_BFIND_NOT_FOUND_DONT_STORE,\n-                     unsigned int to_store = (unsigned int) -1) const\n+              hb_bfind_not_found_t not_found = HB_BFIND_NOT_FOUND_DONT_STORE,\n+              unsigned int to_store = (unsigned int) -1) const\n@@ -227,3 +329,3 @@\n-    int min = 0, max = (int) this->length - 1;\n-    const Type *array = this->arrayZ;\n-    while (min <= max)\n+    unsigned pos;\n+\n+    if (bsearch_impl (x, &pos))\n@@ -231,12 +333,3 @@\n-      int mid = ((unsigned int) min + (unsigned int) max) \/ 2;\n-      int c = array[mid].cmp (x);\n-      if (c < 0)\n-        max = mid - 1;\n-      else if (c > 0)\n-        min = mid + 1;\n-      else\n-      {\n-        if (i)\n-          *i = mid;\n-        return true;\n-      }\n+      if (i)\n+        *i = pos;\n+      return true;\n@@ -244,0 +337,1 @@\n+\n@@ -256,3 +350,1 @@\n-          if (max < 0 || (max < (int) this->length && array[max].cmp (x) > 0))\n-            max++;\n-          *i = max;\n+          *i = pos;\n@@ -264,0 +356,10 @@\n+  template <typename T>\n+  bool bsearch_impl (const T &x, unsigned *pos) const\n+  {\n+    return hb_bsearch_impl (pos,\n+                            x,\n+                            this->arrayZ,\n+                            this->length,\n+                            sizeof (Type),\n+                            _hb_cmp_method<T, Type>);\n+  }\n@@ -272,0 +374,28 @@\n+template <typename T>\n+bool hb_array_t<T>::operator == (const hb_array_t<T> &o) const\n+{\n+  if (o.length != this->length) return false;\n+  for (unsigned int i = 0; i < this->length; i++) {\n+    if (this->arrayZ[i] != o.arrayZ[i]) return false;\n+  }\n+  return true;\n+}\n+\n+\/* TODO Specialize opeator== for hb_bytes_t and hb_ubytes_t. *\/\n+\n+template <>\n+inline uint32_t hb_array_t<const char>::hash () const {\n+  uint32_t current = 0;\n+  for (unsigned int i = 0; i < this->length; i++)\n+    current = current * 31 + (uint32_t) (this->arrayZ[i] * 2654435761u);\n+  return current;\n+}\n+\n+template <>\n+inline uint32_t hb_array_t<const unsigned char>::hash () const {\n+  uint32_t current = 0;\n+  for (unsigned int i = 0; i < this->length; i++)\n+    current = current * 31 + (uint32_t) (this->arrayZ[i] * 2654435761u);\n+  return current;\n+}\n+\n@@ -277,0 +407,1 @@\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-array.hh","additions":194,"deletions":63,"binary":false,"changes":257,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"hb-meta.hh\"\n@@ -88,2 +89,2 @@\n-#define hb_atomic_int_impl_get_relaxed(AI)      (reinterpret_cast<std::atomic<int> *> (AI)->load (std::memory_order_relaxed))\n-#define hb_atomic_int_impl_get(AI)              (reinterpret_cast<std::atomic<int> *> (AI)->load (std::memory_order_acquire))\n+#define hb_atomic_int_impl_get_relaxed(AI)      (reinterpret_cast<std::atomic<int> const *> (AI)->load (std::memory_order_relaxed))\n+#define hb_atomic_int_impl_get(AI)              (reinterpret_cast<std::atomic<int> const *> (AI)->load (std::memory_order_acquire))\n@@ -92,1 +93,1 @@\n-#define hb_atomic_ptr_impl_get_relaxed(P)       (reinterpret_cast<std::atomic<void*> *> (P)->load (std::memory_order_relaxed))\n+#define hb_atomic_ptr_impl_get_relaxed(P)       (reinterpret_cast<std::atomic<void*> const *> (P)->load (std::memory_order_relaxed))\n@@ -109,1 +110,1 @@\n-#if !defined(MemoryBarrier)\n+#if !defined(MemoryBarrier) && !defined(__MINGW32_VERSION)\n@@ -214,5 +215,1 @@\n-#elif !defined(HB_NO_MT)\n-\n-#define HB_ATOMIC_INT_NIL 1 \/* Warn that fallback implementation is in use. *\/\n-\n-#define _hb_memory_barrier()\n+#elif defined(HB_NO_MT)\n@@ -222,4 +219,1 @@\n-#define hb_atomic_ptr_impl_cmpexch(P,O,N)       (* (void **) (P) == (void *) (O) ? (* (void **) (P) = (void *) (N), true) : false)\n-\n-\n-#else \/* HB_NO_MT *\/\n+#define _hb_memory_barrier()                    do {} while (0)\n@@ -227,1 +221,1 @@\n-#define hb_atomic_int_impl_add(AI, V)           ((*(AI) += (V)) - (V))\n+#define hb_atomic_ptr_impl_cmpexch(P,O,N)       (* (void **) (P) == (void *) (O) ? (* (void **) (P) = (void *) (N), true) : false)\n@@ -229,1 +223,0 @@\n-#define _hb_memory_barrier()\n@@ -231,1 +224,1 @@\n-#define hb_atomic_ptr_impl_cmpexch(P,O,N)       (* (void **) (P) == (void *) (O) ? (* (void **) (P) = (void *) (N), true) : false)\n+#else\n@@ -233,0 +226,2 @@\n+#error \"Could not find any system to define atomic_int macros.\"\n+#error \"Check hb-atomic.hh for possible resolutions.\"\n@@ -285,1 +280,1 @@\n-  typedef typename hb_remove_pointer (P) T;\n+  typedef hb_remove_pointer<P> T;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-atomic.hh","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright © 2019 Adobe Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Adobe Author(s): Michiharu Ariza\n+ *\/\n+\n+#ifndef HB_BIMAP_HH\n+#define HB_BIMAP_HH\n+\n+#include \"hb.hh\"\n+#include \"hb-map.hh\"\n+\n+\/* Bi-directional map *\/\n+struct hb_bimap_t\n+{\n+  hb_bimap_t () { init (); }\n+  ~hb_bimap_t () { fini (); }\n+\n+  void init ()\n+  {\n+    forw_map.init ();\n+    back_map.init ();\n+  }\n+\n+  void fini ()\n+  {\n+    forw_map.fini ();\n+    back_map.fini ();\n+  }\n+\n+  void reset ()\n+  {\n+    forw_map.reset ();\n+    back_map.reset ();\n+  }\n+\n+  bool in_error () const { return forw_map.in_error () || back_map.in_error (); }\n+\n+  void set (hb_codepoint_t lhs, hb_codepoint_t rhs)\n+  {\n+    if (unlikely (lhs == HB_MAP_VALUE_INVALID)) return;\n+    if (unlikely (rhs == HB_MAP_VALUE_INVALID)) { del (lhs); return; }\n+    forw_map.set (lhs, rhs);\n+    back_map.set (rhs, lhs);\n+  }\n+\n+  hb_codepoint_t get (hb_codepoint_t lhs) const { return forw_map.get (lhs); }\n+  hb_codepoint_t backward (hb_codepoint_t rhs) const { return back_map.get (rhs); }\n+\n+  hb_codepoint_t operator [] (hb_codepoint_t lhs) const { return get (lhs); }\n+  bool has (hb_codepoint_t lhs, hb_codepoint_t *vp = nullptr) const { return forw_map.has (lhs, vp); }\n+\n+  void del (hb_codepoint_t lhs)\n+  {\n+    back_map.del (get (lhs));\n+    forw_map.del (lhs);\n+  }\n+\n+  void clear ()\n+  {\n+    forw_map.clear ();\n+    back_map.clear ();\n+  }\n+\n+  bool is_empty () const { return get_population () == 0; }\n+\n+  unsigned int get_population () const { return forw_map.get_population (); }\n+\n+  protected:\n+  hb_map_t  forw_map;\n+  hb_map_t  back_map;\n+};\n+\n+\/* Inremental bimap: only lhs is given, rhs is incrementally assigned *\/\n+struct hb_inc_bimap_t : hb_bimap_t\n+{\n+  hb_inc_bimap_t () { init (); }\n+\n+  void init ()\n+  {\n+    hb_bimap_t::init ();\n+    next_value = 0;\n+  }\n+\n+  \/* Add a mapping from lhs to rhs with a unique value if lhs is unknown.\n+   * Return the rhs value as the result.\n+   *\/\n+  hb_codepoint_t add (hb_codepoint_t lhs)\n+  {\n+    hb_codepoint_t  rhs = forw_map[lhs];\n+    if (rhs == HB_MAP_VALUE_INVALID)\n+    {\n+      rhs = next_value++;\n+      set (lhs, rhs);\n+    }\n+    return rhs;\n+  }\n+\n+  hb_codepoint_t skip ()\n+  { return next_value++; }\n+\n+  hb_codepoint_t get_next_value () const\n+  { return next_value; }\n+\n+  void add_set (const hb_set_t *set)\n+  {\n+    hb_codepoint_t i = HB_SET_VALUE_INVALID;\n+    while (hb_set_next (set, &i)) add (i);\n+  }\n+\n+  \/* Create an identity map. *\/\n+  bool identity (unsigned int size)\n+  {\n+    clear ();\n+    for (hb_codepoint_t i = 0; i < size; i++) set (i, i);\n+    return !in_error ();\n+  }\n+\n+  protected:\n+  static int cmp_id (const void* a, const void* b)\n+  { return (int)*(const hb_codepoint_t *)a - (int)*(const hb_codepoint_t *)b; }\n+\n+  public:\n+  \/* Optional: after finished adding all mappings in a random order,\n+   * reassign rhs to lhs so that they are in the same order. *\/\n+  void sort ()\n+  {\n+    hb_codepoint_t  count = get_population ();\n+    hb_vector_t <hb_codepoint_t> work;\n+    work.resize (count);\n+\n+    for (hb_codepoint_t rhs = 0; rhs < count; rhs++)\n+      work[rhs] = back_map[rhs];\n+\n+    work.qsort (cmp_id);\n+\n+    clear ();\n+    for (hb_codepoint_t rhs = 0; rhs < count; rhs++)\n+      set (work[rhs], rhs);\n+  }\n+\n+  protected:\n+  unsigned int  next_value;\n+};\n+\n+#endif \/* HB_BIMAP_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-bimap.hh","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"},{"patch":"@@ -28,12 +28,0 @@\n-\n-\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1308\n- * http:\/\/www.gnu.org\/software\/libc\/manual\/html_node\/Feature-Test-Macros.html\n- * https:\/\/www.oracle.com\/technetwork\/articles\/servers-storage-dev\/standardheaderfiles-453865.html\n- *\/\n-#ifndef _POSIX_C_SOURCE\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wunused-macros\"\n-#define _POSIX_C_SOURCE 200809L\n-#pragma GCC diagnostic pop\n-#endif\n-\n@@ -51,1 +39,0 @@\n-#include <errno.h>\n@@ -158,1 +145,1 @@\n-                         MIN (length, parent->length - offset),\n+                         hb_min (length, parent->length - offset),\n@@ -205,1 +192,1 @@\n-  return const_cast<hb_blob_t *> (&Null(hb_blob_t));\n+  return const_cast<hb_blob_t *> (&Null (hb_blob_t));\n@@ -490,0 +477,1 @@\n+#ifndef HB_NO_OPEN\n@@ -491,0 +479,3 @@\n+# if !defined(HB_NO_RESOURCE_FORK) && defined(__APPLE__)\n+#  include <sys\/paths.h>\n+# endif\n@@ -535,0 +526,33 @@\n+#ifdef _PATH_RSRCFORKSPEC\n+static int\n+_open_resource_fork (const char *file_name, hb_mapped_file_t *file)\n+{\n+  size_t name_len = strlen (file_name);\n+  size_t len = name_len + sizeof (_PATH_RSRCFORKSPEC);\n+\n+  char *rsrc_name = (char *) malloc (len);\n+  if (unlikely (!rsrc_name)) return -1;\n+\n+  strncpy (rsrc_name, file_name, name_len);\n+  strncpy (rsrc_name + name_len, _PATH_RSRCFORKSPEC,\n+           sizeof (_PATH_RSRCFORKSPEC) - 1);\n+\n+  int fd = open (rsrc_name, O_RDONLY | O_BINARY, 0);\n+  free (rsrc_name);\n+\n+  if (fd != -1)\n+  {\n+    struct stat st;\n+    if (fstat (fd, &st) != -1)\n+      file->length = (unsigned long) st.st_size;\n+    else\n+    {\n+      close (fd);\n+      fd = -1;\n+    }\n+  }\n+\n+  return fd;\n+}\n+#endif\n+\n@@ -559,0 +583,13 @@\n+\n+#ifdef _PATH_RSRCFORKSPEC\n+  if (unlikely (file->length == 0))\n+  {\n+    int rfd = _open_resource_fork (file_name, file);\n+    if (rfd != -1)\n+    {\n+      close (fd);\n+      fd = rfd;\n+    }\n+  }\n+#endif\n+\n@@ -582,1 +619,1 @@\n-  if (unlikely (wchar_file_name == nullptr)) goto fail_without_close;\n+  if (unlikely (!wchar_file_name)) goto fail_without_close;\n@@ -584,1 +621,1 @@\n-#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)\n+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)\n@@ -605,1 +642,1 @@\n-#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)\n+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)\n@@ -616,1 +653,1 @@\n-  if (unlikely (file->mapping == nullptr)) goto fail;\n+  if (unlikely (!file->mapping)) goto fail;\n@@ -618,1 +655,1 @@\n-#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)\n+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)\n@@ -623,1 +660,1 @@\n-  if (unlikely (file->contents == nullptr)) goto fail;\n+  if (unlikely (!file->contents)) goto fail;\n@@ -641,1 +678,1 @@\n-  if (unlikely (data == nullptr)) return hb_blob_get_empty ();\n+  if (unlikely (!data)) return hb_blob_get_empty ();\n@@ -644,1 +681,1 @@\n-  if (unlikely (fp == nullptr)) goto fread_fail_without_close;\n+  if (unlikely (!fp)) goto fread_fail_without_close;\n@@ -655,1 +692,1 @@\n-      if (unlikely (new_data == nullptr)) goto fread_fail;\n+      if (unlikely (!new_data)) goto fread_fail;\n@@ -669,0 +706,1 @@\n+        fclose (fp);\n@@ -679,0 +717,1 @@\n+#endif \/* !HB_NO_OPEN *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-blob.cc","additions":63,"deletions":24,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+HB_EXTERN hb_blob_t *\n+hb_blob_create_from_file (const char *file_name);\n+\n@@ -126,3 +129,0 @@\n-HB_EXTERN hb_blob_t *\n-hb_blob_create_from_file (const char *file_name);\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-blob.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+  hb_bytes_t as_bytes () const { return hb_bytes_t (data, length); }\n@@ -58,6 +59,1 @@\n-  const Type* as () const\n-  {\n-    return length < hb_null_size (Type) ? &Null(Type) : reinterpret_cast<const Type *> (data);\n-  }\n-  hb_bytes_t as_bytes () const\n-  { return hb_bytes_t (data, length); }\n+  const Type* as () const { return as_bytes ().as<Type> (); }\n@@ -84,1 +80,1 @@\n-  typedef typename hb_remove_pointer (P) T;\n+  typedef hb_remove_pointer<P> T;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-blob.hh","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_BUFFER_SERIALIZE\n+\n@@ -88,1 +92,1 @@\n-  switch (format)\n+  switch ((unsigned) format)\n@@ -141,1 +145,1 @@\n-      p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"%u\", info[i].codepoint));\n+      p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"%u\", info[i].codepoint));\n@@ -144,1 +148,1 @@\n-      p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"cl\\\":%u\", info[i].cluster));\n+      p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"cl\\\":%u\", info[i].cluster));\n@@ -149,1 +153,1 @@\n-      p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"dx\\\":%d,\\\"dy\\\":%d\",\n+      p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"dx\\\":%d,\\\"dy\\\":%d\",\n@@ -152,1 +156,1 @@\n-        p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"ax\\\":%d,\\\"ay\\\":%d\",\n+        p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"ax\\\":%d,\\\"ay\\\":%d\",\n@@ -159,1 +163,1 @@\n-        p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"fl\\\":%u\", info[i].mask & HB_GLYPH_FLAG_DEFINED));\n+        p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"fl\\\":%u\", info[i].mask & HB_GLYPH_FLAG_DEFINED));\n@@ -166,1 +170,1 @@\n-      p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"xb\\\":%d,\\\"yb\\\":%d\",\n+      p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"xb\\\":%d,\\\"yb\\\":%d\",\n@@ -168,1 +172,1 @@\n-      p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"w\\\":%d,\\\"h\\\":%d\",\n+      p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",\\\"w\\\":%d,\\\"h\\\":%d\",\n@@ -227,1 +231,1 @@\n-      p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"%u\", info[i].codepoint));\n+      p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"%u\", info[i].codepoint));\n@@ -230,1 +234,1 @@\n-      p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"=%u\", info[i].cluster));\n+      p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"=%u\", info[i].cluster));\n@@ -236,1 +240,1 @@\n-        p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"@%d,%d\", x+pos[i].x_offset, y+pos[i].y_offset));\n+        p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"@%d,%d\", x+pos[i].x_offset, y+pos[i].y_offset));\n@@ -241,1 +245,1 @@\n-        p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"%d\", pos[i].x_advance));\n+        p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"%d\", pos[i].x_advance));\n@@ -243,1 +247,1 @@\n-          p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",%d\", pos[i].y_advance));\n+          p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \",%d\", pos[i].y_advance));\n@@ -250,1 +254,1 @@\n-        p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"#%X\", info[i].mask &HB_GLYPH_FLAG_DEFINED));\n+        p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"#%X\", info[i].mask &HB_GLYPH_FLAG_DEFINED));\n@@ -257,1 +261,1 @@\n-      p += MAX (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"<%d,%d,%d,%d>\", extents.x_bearing, extents.y_bearing, extents.width, extents.height));\n+      p += hb_max (0, snprintf (p, ARRAY_LENGTH (b) - (p - b), \"<%d,%d,%d,%d>\", extents.x_bearing, extents.y_bearing, extents.width, extents.height));\n@@ -347,2 +351,2 @@\n-  assert ((!buffer->len && buffer->content_type == HB_BUFFER_CONTENT_TYPE_INVALID) ||\n-          buffer->content_type == HB_BUFFER_CONTENT_TYPE_GLYPHS);\n+  assert ((!buffer->len && (buffer->content_type == HB_BUFFER_CONTENT_TYPE_INVALID)) ||\n+          (buffer->content_type == HB_BUFFER_CONTENT_TYPE_GLYPHS));\n@@ -378,3 +382,2 @@\n-\n-static hb_bool_t\n-parse_uint (const char *pp, const char *end, uint32_t *pv)\n+static bool\n+parse_int (const char *pp, const char *end, int32_t *pv)\n@@ -382,12 +385,3 @@\n-  char buf[32];\n-  unsigned int len = MIN (ARRAY_LENGTH (buf) - 1, (unsigned int) (end - pp));\n-  strncpy (buf, pp, len);\n-  buf[len] = '\\0';\n-\n-  char *p = buf;\n-  char *pend = p;\n-  uint32_t v;\n-\n-  errno = 0;\n-  v = strtol (p, &pend, 10);\n-  if (errno || p == pend || pend - p != end - pp)\n+  int v;\n+  const char *p = pp;\n+  if (unlikely (!hb_parse_int (&p, end, &v, true\/* whole buffer *\/)))\n@@ -400,2 +394,2 @@\n-static hb_bool_t\n-parse_int (const char *pp, const char *end, int32_t *pv)\n+static bool\n+parse_uint (const char *pp, const char *end, uint32_t *pv)\n@@ -403,12 +397,3 @@\n-  char buf[32];\n-  unsigned int len = MIN (ARRAY_LENGTH (buf) - 1, (unsigned int) (end - pp));\n-  strncpy (buf, pp, len);\n-  buf[len] = '\\0';\n-\n-  char *p = buf;\n-  char *pend = p;\n-  int32_t v;\n-\n-  errno = 0;\n-  v = strtol (p, &pend, 10);\n-  if (errno || p == pend || pend - p != end - pp)\n+  unsigned int v;\n+  const char *p = pp;\n+  if (unlikely (!hb_parse_uint (&p, end, &v, true\/* whole buffer *\/)))\n@@ -452,2 +437,2 @@\n-  assert ((!buffer->len && buffer->content_type == HB_BUFFER_CONTENT_TYPE_INVALID) ||\n-          buffer->content_type == HB_BUFFER_CONTENT_TYPE_GLYPHS);\n+  assert ((!buffer->len && (buffer->content_type == HB_BUFFER_CONTENT_TYPE_INVALID)) ||\n+          (buffer->content_type == HB_BUFFER_CONTENT_TYPE_GLYPHS));\n@@ -487,0 +472,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer-serialize.cc","additions":36,"deletions":48,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -327,1 +327,1 @@\n-  memset (pos, 0, sizeof (pos[0]) * len);\n+  hb_memset (pos, 0, sizeof (pos[0]) * len);\n@@ -441,7 +441,0 @@\n-  if (cluster_start == 0 && cluster_end == (unsigned int)-1) {\n-    unsigned int count = len;\n-    for (unsigned int i = 0; i < count; i++)\n-      info[i].mask = (info[i].mask & not_mask) | value;\n-    return;\n-  }\n-\n@@ -458,2 +451,0 @@\n-  unsigned int i, j;\n-\n@@ -463,7 +454,1 @@\n-  for (i = start, j = end - 1; i < j; i++, j--) {\n-    hb_glyph_info_t t;\n-\n-    t = info[i];\n-    info[i] = info[j];\n-    info[j] = t;\n-  }\n+  hb_array_t<hb_glyph_info_t> (info, len).reverse (start, end);\n@@ -472,7 +457,1 @@\n-    for (i = start, j = end - 1; i < j; i++, j--) {\n-      hb_glyph_position_t t;\n-\n-      t = pos[i];\n-      pos[i] = pos[j];\n-      pos[j] = t;\n-    }\n+    hb_array_t<hb_glyph_position_t> (pos, len).reverse (start, end);\n@@ -527,1 +506,1 @@\n-    cluster = MIN<unsigned int> (cluster, info[i].cluster);\n+    cluster = hb_min (cluster, info[i].cluster);\n@@ -558,1 +537,1 @@\n-    cluster = MIN<unsigned int> (cluster, out_info[i].cluster);\n+    cluster = hb_min (cluster, out_info[i].cluster);\n@@ -615,1 +594,1 @@\n-  unsigned int cluster = (unsigned int) -1;\n+  unsigned int cluster = UINT_MAX;\n@@ -631,1 +610,1 @@\n-  unsigned int cluster = (unsigned int) -1;\n+  unsigned int cluster = UINT_MAX;\n@@ -641,2 +620,2 @@\n-  assert (content_type == HB_BUFFER_CONTENT_TYPE_UNICODE ||\n-          (!len && content_type == HB_BUFFER_CONTENT_TYPE_INVALID));\n+  assert ((content_type == HB_BUFFER_CONTENT_TYPE_UNICODE) ||\n+          (!len && (content_type == HB_BUFFER_CONTENT_TYPE_INVALID)));\n@@ -739,1 +718,1 @@\n-  return const_cast<hb_buffer_t *> (&Null(hb_buffer_t));\n+  return const_cast<hb_buffer_t *> (&Null (hb_buffer_t));\n@@ -779,0 +758,1 @@\n+#ifndef HB_NO_BUFFER_MESSAGE\n@@ -781,0 +761,1 @@\n+#endif\n@@ -959,1 +940,1 @@\n- * corresponding script from an ISO 15924 script tag.\n+ * corresponding script from an ISO 15924 script tag.\n@@ -1002,1 +983,1 @@\n- * Use hb_language_from_string() to convert from BCP 47 language tags to\n+ * Use hb_language_from_string() to convert from BCP 47 language tags to\n@@ -1118,2 +1099,2 @@\n-hb_buffer_set_cluster_level (hb_buffer_t       *buffer,\n-                     hb_buffer_cluster_level_t  cluster_level)\n+hb_buffer_set_cluster_level (hb_buffer_t               *buffer,\n+                             hb_buffer_cluster_level_t  cluster_level)\n@@ -1535,2 +1516,2 @@\n-  assert (buffer->content_type == HB_BUFFER_CONTENT_TYPE_UNICODE ||\n-          (!buffer->len && buffer->content_type == HB_BUFFER_CONTENT_TYPE_INVALID));\n+  assert ((buffer->content_type == HB_BUFFER_CONTENT_TYPE_UNICODE) ||\n+          (!buffer->len && (buffer->content_type == HB_BUFFER_CONTENT_TYPE_INVALID)));\n@@ -1739,1 +1720,1 @@\n- * @end: end index into source buffer to copy.  Use (unsigned int) -1 to copy to end of buffer.\n+ * @end: end index into source buffer to copy.  Use @HB_FEATURE_GLOBAL_END to copy to end of buffer.\n@@ -1856,2 +1837,2 @@\n-  assert (buffer->content_type == HB_BUFFER_CONTENT_TYPE_GLYPHS ||\n-          (!buffer->len && buffer->content_type == HB_BUFFER_CONTENT_TYPE_INVALID));\n+  assert ((buffer->content_type == HB_BUFFER_CONTENT_TYPE_GLYPHS) ||\n+          (!buffer->len && (buffer->content_type == HB_BUFFER_CONTENT_TYPE_INVALID)));\n@@ -1861,12 +1842,2 @@\n-  unsigned int count = buffer->len;\n-  if (unlikely (!count)) return;\n-  hb_glyph_info_t *info = buffer->info;\n-\n-  unsigned int start = 0;\n-  unsigned int end;\n-  for (end = start + 1; end < count; end++)\n-    if (info[start].cluster != info[end].cluster) {\n-      normalize_glyphs_cluster (buffer, start, end, backward);\n-      start = end;\n-    }\n-  normalize_glyphs_cluster (buffer, start, end, backward);\n+  foreach_cluster (buffer, start, end)\n+    normalize_glyphs_cluster (buffer, start, end, backward);\n@@ -1996,0 +1967,1 @@\n+#ifndef HB_NO_BUFFER_MESSAGE\n@@ -2025,1 +1997,0 @@\n-\n@@ -2030,1 +2001,1 @@\n-  vsnprintf (buf, sizeof (buf),  fmt, ap);\n+  vsnprintf (buf, sizeof (buf), fmt, ap);\n@@ -2033,0 +2004,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.cc","additions":26,"deletions":54,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -287,0 +287,4 @@\n+ * @HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE:\n+ *                      flag indicating that a dotted circle should\n+ *                      not be inserted in the rendering of incorrect\n+ *                      character sequences (such at <0905 093E>). Since: 2.4\n@@ -295,1 +299,2 @@\n-  HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES      = 0x00000008u\n+  HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES      = 0x00000008u,\n+  HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE    = 0x00000010u\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.h","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -127,0 +127,1 @@\n+#ifndef HB_NO_BUFFER_MESSAGE\n@@ -130,0 +131,1 @@\n+#endif\n@@ -229,1 +231,1 @@\n-    if (unlikely (!make_room_for (0, 1))) return Crap(hb_glyph_info_t);\n+    if (unlikely (!make_room_for (0, 1))) return Crap (hb_glyph_info_t);\n@@ -232,1 +234,1 @@\n-      return Crap(hb_glyph_info_t);\n+      return Crap (hb_glyph_info_t);\n@@ -319,1 +321,1 @@\n-                               unsigned int end)\n+                        unsigned int end)\n@@ -350,1 +352,8 @@\n-  bool messaging () { return unlikely (message_func); }\n+  bool messaging ()\n+  {\n+#ifdef HB_NO_BUFFER_MESSAGE\n+    return false;\n+#else\n+    return unlikely (message_func);\n+#endif\n+  }\n@@ -353,0 +362,3 @@\n+#ifdef HB_NO_BUFFER_MESSAGE\n+   return true;\n+#else\n@@ -360,0 +372,1 @@\n+#endif\n@@ -376,1 +389,1 @@\n-  int\n+  unsigned int\n@@ -382,1 +395,1 @@\n-      cluster = MIN<unsigned int> (cluster, infos[i].cluster);\n+      cluster = hb_min (cluster, infos[i].cluster);\n@@ -398,2 +411,1 @@\n-  void unsafe_to_break_all ()\n-  { unsafe_to_break_impl (0, len); }\n+  void unsafe_to_break_all () { unsafe_to_break_impl (0, len); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-buffer.hh","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -223,2 +223,2 @@\n-  void set_int (int v)       { value = (double) v; }\n-  int to_int () const        { return (int) value; }\n+  void set_int (int v)       { value = v; }\n+  int to_int () const        { return value; }\n@@ -227,1 +227,1 @@\n-  int32_t to_fixed () const  { return (int32_t) (value * 65536.0); }\n+  int32_t to_fixed () const  { return value * 65536.0; }\n@@ -229,1 +229,1 @@\n-  void set_real (double v)       { value = v; }\n+  void set_real (double v)   { value = v; }\n@@ -232,3 +232,0 @@\n-  int ceil () const          { return (int) ::ceil (value); }\n-  int floor () const         { return (int) ::floor (value); }\n-\n@@ -238,11 +235,4 @@\n-  bool operator > (const number_t &n) const\n-  { return value > n.to_real (); }\n-\n-  bool operator < (const number_t &n) const\n-  { return n > *this; }\n-\n-  bool operator >= (const number_t &n) const\n-  { return !(*this < n); }\n-\n-  bool operator <= (const number_t &n) const\n-  { return !(*this > n); }\n+  bool operator >  (const number_t &n) const { return value > n.to_real (); }\n+  bool operator <  (const number_t &n) const { return n > *this; }\n+  bool operator >= (const number_t &n) const { return !(*this < n); }\n+  bool operator <= (const number_t &n) const { return !(*this > n); }\n@@ -258,1 +248,1 @@\n-  double  value;\n+  double value;\n@@ -265,2 +255,2 @@\n-  template <typename INTTYPE, int minVal, int maxVal>\n-  static bool serialize_int (hb_serialize_context_t *c, op_code_t intOp, int value)\n+  template <typename T, typename V>\n+  static bool serialize_int (hb_serialize_context_t *c, op_code_t intOp, V value)\n@@ -270,3 +260,0 @@\n-    if (unlikely ((value < minVal || value > maxVal)))\n-      return_trace (false);\n-\n@@ -274,6 +261,2 @@\n-    if (unlikely (p == nullptr)) return_trace (false);\n-    p->set (intOp);\n-\n-    INTTYPE *ip = c->allocate_size<INTTYPE> (INTTYPE::static_size);\n-    if (unlikely (ip == nullptr)) return_trace (false);\n-    ip->set ((unsigned int)value);\n+    if (unlikely (!p)) return_trace (false);\n+    *p = intOp;\n@@ -281,1 +264,3 @@\n-    return_trace (true);\n+    T *ip = c->allocate_size<T> (T::static_size);\n+    if (unlikely (!ip)) return_trace (false);\n+    return_trace (c->check_assign (*ip, value));\n@@ -284,2 +269,3 @@\n-  static bool serialize_int4 (hb_serialize_context_t *c, int value)\n-  { return serialize_int<HBUINT32, 0, 0x7FFFFFFF> (c, OpCode_longintdict, value); }\n+  template <typename V>\n+  static bool serialize_int4 (hb_serialize_context_t *c, V value)\n+  { return serialize_int<HBINT32> (c, OpCode_longintdict, value); }\n@@ -287,2 +273,3 @@\n-  static bool serialize_int2 (hb_serialize_context_t *c, int value)\n-  { return serialize_int<HBUINT16, 0, 0x7FFF> (c, OpCode_shortint, value); }\n+  template <typename V>\n+  static bool serialize_int2 (hb_serialize_context_t *c, V value)\n+  { return serialize_int<HBINT16> (c, OpCode_shortint, value); }\n@@ -323,2 +310,1 @@\n-  byte_str_ref_t ()\n-  { init (); }\n+  byte_str_ref_t () { init (); }\n@@ -346,1 +332,1 @@\n-    if (unlikely ((unsigned int)(offset + i) >= str.length))\n+    if (unlikely ((unsigned int) (offset + i) >= str.length))\n@@ -349,1 +335,1 @@\n-      return Null(unsigned char);\n+      return Null (unsigned char);\n@@ -351,2 +337,1 @@\n-    else\n-      return str[offset + i];\n+    return str[offset + i];\n@@ -362,3 +347,1 @@\n-  {\n-    return (!in_error () && str.check_limit (offset, count));\n-  }\n+  { return (!in_error () && str.check_limit (offset, count)); }\n@@ -392,1 +375,1 @@\n-struct stack_t\n+struct cff_stack_t\n@@ -403,5 +386,1 @@\n-\n-  void fini ()\n-  {\n-    elements.fini_deep ();\n-  }\n+  void fini () { elements.fini_deep (); }\n@@ -422,1 +401,0 @@\n-\n@@ -430,1 +408,1 @@\n-      return Crap(ELEM);\n+      return Crap (ELEM);\n@@ -441,1 +419,1 @@\n-      return Crap(ELEM);\n+      return Crap (ELEM);\n@@ -444,1 +422,0 @@\n-\n@@ -455,3 +432,1 @@\n-    if (likely (count > 0))\n-      return elements[count-1];\n-    else\n+    if (unlikely (count < 0))\n@@ -460,1 +435,1 @@\n-      return Null(ELEM);\n+      return Null (ELEM);\n@@ -462,0 +437,1 @@\n+    return elements[count - 1];\n@@ -478,1 +454,1 @@\n-  bool is_empty () const { return count == 0; }\n+  bool is_empty () const          { return !count; }\n@@ -490,1 +466,1 @@\n-struct arg_stack_t : stack_t<ARG, 513>\n+struct arg_stack_t : cff_stack_t<ARG, 513>\n@@ -522,1 +498,1 @@\n-    return (unsigned)i;\n+    return (unsigned) i;\n@@ -541,3 +517,1 @@\n-  {\n-    return S::elements.sub_array (start);\n-  }\n+  { return S::elements.sub_array (start); }\n@@ -546,1 +520,1 @@\n-  typedef stack_t<ARG, 513> S;\n+  typedef cff_stack_t<ARG, 513> S;\n@@ -568,1 +542,1 @@\n-    if (unlikely (d == nullptr)) return_trace (false);\n+    if (unlikely (!d)) return_trace (false);\n@@ -608,1 +582,1 @@\n-  const VAL &get_value (unsigned int i) const { return values[i]; }\n+  const VAL &get_value (unsigned int i)   const { return values[i]; }\n@@ -647,4 +621,1 @@\n-  const ARG& eval_arg (unsigned int i)\n-  {\n-    return argStack[i];\n-  }\n+  const ARG& eval_arg (unsigned int i) { return argStack[i]; }\n@@ -652,4 +623,2 @@\n-  ARG& pop_arg ()\n-  {\n-    return argStack.pop ();\n-  }\n+  ARG& pop_arg () { return argStack.pop (); }\n+  void pop_n_args (unsigned int n) { argStack.pop (n); }\n@@ -657,9 +626,1 @@\n-  void pop_n_args (unsigned int n)\n-  {\n-    argStack.pop (n);\n-  }\n-\n-  void clear_args ()\n-  {\n-    pop_n_args (argStack.get_count ());\n-  }\n+  void clear_args () { pop_n_args (argStack.get_count ()); }\n@@ -667,2 +628,4 @@\n-  byte_str_ref_t    str_ref;\n-  arg_stack_t<ARG> argStack;\n+  byte_str_ref_t\n+                str_ref;\n+  arg_stack_t<ARG>\n+                argStack;\n@@ -670,1 +633,1 @@\n-  bool    error;\n+  bool          error;\n@@ -694,1 +657,1 @@\n-        env.argStack.push_int ((int16_t)(-(op - OpCode_TwoByteNegInt0) * 256 - env.str_ref[0] - 108));\n+        env.argStack.push_int ((-(int16_t)(op - OpCode_TwoByteNegInt0) * 256 - env.str_ref[0] - 108));\n@@ -714,2 +677,2 @@\n-struct interpreter_t {\n-\n+struct interpreter_t\n+{\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff-interp-common.hh","additions":53,"deletions":90,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-struct call_stack_t : stack_t<call_context_t, kMaxCallLimit> {};\n+struct call_stack_t : cff_stack_t<call_context_t, kMaxCallLimit> {};\n@@ -65,1 +65,1 @@\n-  void init (const SUBRS &subrs_)\n+  void init (const SUBRS *subrs_)\n@@ -67,1 +67,1 @@\n-    subrs = &subrs_;\n+    subrs = subrs_;\n@@ -79,2 +79,2 @@\n-  unsigned int get_count () const { return (subrs == nullptr)? 0: subrs->count; }\n-  unsigned int get_bias () const { return bias; }\n+  unsigned int get_count () const { return subrs ? subrs->count : 0; }\n+  unsigned int get_bias () const  { return bias; }\n@@ -84,2 +84,2 @@\n-    if (unlikely ((subrs == nullptr) || index >= subrs->count))\n-      return Null(byte_str_t);\n+    if (unlikely (!subrs || index >= subrs->count))\n+      return Null (byte_str_t);\n@@ -121,1 +121,1 @@\n-  void init (const byte_str_t &str, const SUBRS &globalSubrs_, const SUBRS &localSubrs_)\n+  void init (const byte_str_t &str, const SUBRS *globalSubrs_, const SUBRS *localSubrs_)\n@@ -150,1 +150,1 @@\n-  bool popSubrNum (const biased_subrs_t<SUBRS>& biasedSubrs, unsigned int &subr_num)\n+  bool pop_subr_num (const biased_subrs_t<SUBRS>& biasedSubrs, unsigned int &subr_num)\n@@ -152,0 +152,1 @@\n+    subr_num = 0;\n@@ -161,1 +162,1 @@\n-  void callSubr (const biased_subrs_t<SUBRS>& biasedSubrs, cs_type_t type)\n+  void call_subr (const biased_subrs_t<SUBRS>& biasedSubrs, cs_type_t type)\n@@ -163,1 +164,1 @@\n-    unsigned int subr_num;\n+    unsigned int subr_num = 0;\n@@ -165,1 +166,1 @@\n-    if (unlikely (!popSubrNum (biasedSubrs, subr_num)\n+    if (unlikely (!pop_subr_num (biasedSubrs, subr_num)\n@@ -178,1 +179,1 @@\n-  void returnFromSubr ()\n+  void return_from_subr ()\n@@ -249,1 +250,1 @@\n-template <typename ARG, typename OPSET, typename ENV, typename PARAM, typename PATH=path_procs_null_t<ENV, PARAM> >\n+template <typename ARG, typename OPSET, typename ENV, typename PARAM, typename PATH=path_procs_null_t<ENV, PARAM>>\n@@ -257,1 +258,1 @@\n-        env.returnFromSubr ();\n+        env.return_from_subr ();\n@@ -270,1 +271,1 @@\n-        env.callSubr (env.localSubrs, CSType_LocalSubr);\n+        env.call_subr (env.localSubrs, CSType_LocalSubr);\n@@ -274,1 +275,1 @@\n-        env.callSubr (env.globalSubrs, CSType_GlobalSubr);\n+        env.call_subr (env.globalSubrs, CSType_GlobalSubr);\n@@ -553,0 +554,4 @@\n+    unsigned int arg_count = env.argStack.get_count ();\n+    if (unlikely (arg_count < 8))\n+      return;\n+\n@@ -554,1 +559,2 @@\n-    for (; i + 6 <= env.argStack.get_count (); i += 6)\n+    unsigned int curve_limit = arg_count - 2;\n+    for (; i + 6 <= curve_limit; i += 6)\n@@ -564,6 +570,4 @@\n-    for (; i + 2 <= env.argStack.get_count (); i += 2)\n-    {\n-      point_t pt1 = env.get_pt ();\n-      pt1.move (env.eval_arg (i), env.eval_arg (i+1));\n-      PATH::line (env, param, pt1);\n-    }\n+\n+    point_t pt1 = env.get_pt ();\n+    pt1.move (env.eval_arg (i), env.eval_arg (i+1));\n+    PATH::line (env, param, pt1);\n@@ -574,0 +578,4 @@\n+    unsigned int arg_count = env.argStack.get_count ();\n+    if (unlikely (arg_count < 8))\n+      return;\n+\n@@ -575,1 +583,1 @@\n-    unsigned int line_limit = (env.argStack.get_count () % 6);\n+    unsigned int line_limit = arg_count - 6;\n@@ -582,10 +590,8 @@\n-    for (; i + 6 <= env.argStack.get_count (); i += 6)\n-    {\n-      point_t pt1 = env.get_pt ();\n-      pt1.move (env.eval_arg (i), env.eval_arg (i+1));\n-      point_t pt2 = pt1;\n-      pt2.move (env.eval_arg (i+2), env.eval_arg (i+3));\n-      point_t pt3 = pt2;\n-      pt3.move (env.eval_arg (i+4), env.eval_arg (i+5));\n-      PATH::curve (env, param, pt1, pt2, pt3);\n-    }\n+\n+    point_t pt1 = env.get_pt ();\n+    pt1.move (env.eval_arg (i), env.eval_arg (i+1));\n+    point_t pt2 = pt1;\n+    pt2.move (env.eval_arg (i+2), env.eval_arg (i+3));\n+    point_t pt3 = pt2;\n+    pt3.move (env.eval_arg (i+4), env.eval_arg (i+5));\n+    PATH::curve (env, param, pt1, pt2, pt3);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff-interp-cs-common.hh","additions":41,"deletions":35,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include <math.h>\n-#include <float.h>\n@@ -61,13 +59,0 @@\n-  unsigned int calculate_serialized_op_size (const OPSTR& opstr) const\n-  {\n-    switch (opstr.op)\n-    {\n-      case OpCode_CharStrings:\n-      case OpCode_FDArray:\n-        return OpCode_Size (OpCode_longintdict) + 4 + OpCode_Size (opstr.op);\n-\n-      default:\n-        return opstr.str.length;\n-    }\n-  }\n-\n@@ -97,0 +82,1 @@\n+  \/* Turns CFF's BCD format into strtod understandable string *\/\n@@ -99,8 +85,2 @@\n-    bool    neg = false;\n-    double  int_part = 0;\n-    uint64_t frac_part = 0;\n-    uint32_t  frac_count = 0;\n-    bool    exp_neg = false;\n-    uint32_t  exp_part = 0;\n-    bool    exp_overflow = false;\n-    enum Part { INT_PART=0, FRAC_PART, EXP_PART } part = INT_PART;\n+    if (unlikely (str_ref.in_error ())) return .0;\n+\n@@ -108,2 +88,0 @@\n-    const uint64_t MAX_FRACT = 0xFFFFFFFFFFFFFull; \/* 1^52-1 *\/\n-    const uint32_t MAX_EXP = 0x7FFu; \/* 1^11-1 *\/\n@@ -111,1 +89,1 @@\n-    double  value = 0.0;\n+    char buf[32];\n@@ -113,1 +91,1 @@\n-    for (uint32_t i = 0;; i++)\n+    for (unsigned i = 0, count = 0; count < ARRAY_LENGTH (buf); ++i, ++count)\n@@ -115,2 +93,2 @@\n-      char d;\n-      if ((i & 1) == 0)\n+      unsigned nibble;\n+      if (!(i & 1))\n@@ -118,5 +96,2 @@\n-        if (!str_ref.avail ())\n-        {\n-          str_ref.set_error ();\n-          return 0.0;\n-        }\n+        if (unlikely (!str_ref.avail ())) break;\n+\n@@ -125,1 +100,1 @@\n-        d = byte >> 4;\n+        nibble = byte >> 4;\n@@ -128,1 +103,1 @@\n-        d = byte & 0x0F;\n+        nibble = byte & 0x0F;\n@@ -130,1 +105,2 @@\n-      switch (d)\n+      if (unlikely (nibble == RESERVED)) break;\n+      else if (nibble == END)\n@@ -132,37 +108,3 @@\n-        case RESERVED:\n-          str_ref.set_error ();\n-          return value;\n-\n-        case END:\n-          value = (double)(neg? -int_part: int_part);\n-          if (frac_count > 0)\n-          {\n-            double frac = (frac_part \/ pow (10.0, (double)frac_count));\n-            if (neg) frac = -frac;\n-            value += frac;\n-          }\n-          if (unlikely (exp_overflow))\n-          {\n-            if (value == 0.0)\n-              return value;\n-            if (exp_neg)\n-              return neg? -DBL_MIN: DBL_MIN;\n-            else\n-              return neg? -DBL_MAX: DBL_MAX;\n-          }\n-          if (exp_part != 0)\n-          {\n-            if (exp_neg)\n-              value \/= pow (10.0, (double)exp_part);\n-            else\n-              value *= pow (10.0, (double)exp_part);\n-          }\n-          return value;\n-\n-        case NEG:\n-          if (i != 0)\n-          {\n-            str_ref.set_error ();\n-            return 0.0;\n-          }\n-          neg = true;\n+        const char *p = buf;\n+        double pv;\n+        if (unlikely (!hb_parse_double (&p, p + count, &pv, true\/* whole buffer *\/)))\n@@ -170,47 +112,11 @@\n-\n-        case DECIMAL:\n-          if (part != INT_PART)\n-          {\n-            str_ref.set_error ();\n-            return value;\n-          }\n-          part = FRAC_PART;\n-          break;\n-\n-        case EXP_NEG:\n-          exp_neg = true;\n-          HB_FALLTHROUGH;\n-\n-        case EXP_POS:\n-          if (part == EXP_PART)\n-          {\n-            str_ref.set_error ();\n-            return value;\n-          }\n-          part = EXP_PART;\n-          break;\n-\n-        default:\n-          switch (part) {\n-            default:\n-            case INT_PART:\n-              int_part = (int_part * 10) + d;\n-              break;\n-\n-            case FRAC_PART:\n-              if (likely (frac_part <= MAX_FRACT \/ 10))\n-              {\n-                frac_part = (frac_part * 10) + (unsigned)d;\n-                frac_count++;\n-              }\n-              break;\n-\n-            case EXP_PART:\n-              if (likely (exp_part * 10 + d <= MAX_EXP))\n-              {\n-                exp_part = (exp_part * 10) + d;\n-              }\n-              else\n-                exp_overflow = true;\n-              break;\n-          }\n+        return pv;\n+      }\n+      else\n+      {\n+        buf[count] = \"0123456789.EE?-?\"[nibble];\n+        if (nibble == EXP_NEG)\n+        {\n+          ++count;\n+          if (unlikely (count == ARRAY_LENGTH (buf))) break;\n+          buf[count] = '-';\n+        }\n@@ -220,1 +126,2 @@\n-    return value;\n+    str_ref.set_error ();\n+    return .0;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff-interp-dict-common.hh","additions":29,"deletions":122,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    SUPER::init (str, *acc.globalSubrs, *acc.privateDicts[fd].localSubrs);\n+    SUPER::init (str, acc.globalSubrs, acc.privateDicts[fd].localSubrs);\n@@ -84,1 +84,1 @@\n-template <typename OPSET, typename PARAM, typename PATH=path_procs_null_t<cff1_cs_interp_env_t, PARAM> >\n+template <typename OPSET, typename PARAM, typename PATH=path_procs_null_t<cff1_cs_interp_env_t, PARAM>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff1-interp-cs.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                          unsigned int numBlends, hb_array_t<const blend_arg_t> blends_)\n+                   unsigned int numBlends, hb_array_t<const blend_arg_t> blends_)\n@@ -83,1 +83,1 @@\n-                    const int *coords_=nullptr, unsigned int num_coords_=0)\n+             const int *coords_=nullptr, unsigned int num_coords_=0)\n@@ -85,1 +85,1 @@\n-    SUPER::init (str, *acc.globalSubrs, *acc.privateDicts[fd].localSubrs);\n+    SUPER::init (str, acc.globalSubrs, acc.privateDicts[fd].localSubrs);\n@@ -93,1 +93,1 @@\n-    do_blend = (coords != nullptr) && num_coords && (varStore != &Null(CFF2VariationStore));\n+    do_blend = num_coords && coords && varStore->size;\n@@ -136,4 +136,5 @@\n-        scalars.resize (region_count);\n-        varStore->varStore.get_scalars (get_ivs (),\n-                                        (int *)coords, num_coords,\n-                                        &scalars[0], region_count);\n+        if (unlikely (!scalars.resize (region_count)))\n+          set_error ();\n+        else\n+          varStore->varStore.get_scalars (get_ivs (), coords, num_coords,\n+                                          &scalars[0], region_count);\n@@ -196,1 +197,1 @@\n-template <typename OPSET, typename PARAM, typename PATH=path_procs_null_t<cff2_cs_interp_env_t, PARAM> >\n+template <typename OPSET, typename PARAM, typename PATH=path_procs_null_t<cff2_cs_interp_env_t, PARAM>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-cff2-interp-cs.hh","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n@@ -34,3 +33,0 @@\n-#ifdef HAVE_XLOCALE_H\n-#include <xlocale.h>\n-#endif\n@@ -38,0 +34,3 @@\n+#ifdef HB_NO_SETLOCALE\n+#define setlocale(Category, Locale) \"C\"\n+#endif\n@@ -70,1 +69,1 @@\n-        if (0 == strncmp (c, name, p - c) && strlen (name) == p - c) u.opts.symbol = true;\n+        if (0 == strncmp (c, name, p - c) && strlen (name) == static_cast<size_t>(p - c)) do { u.opts.symbol = true; } while (0)\n@@ -73,1 +72,0 @@\n-      OPTION (\"aat\", aat);\n@@ -337,1 +335,1 @@\n- *       a BCP 47 language tag\n+ *       a BCP 47 language tag\n@@ -340,1 +338,1 @@\n- * Converts @str representing a BCP 47 language tag to the corresponding\n+ * Converts @str representing a BCP 47 language tag to the corresponding\n@@ -344,1 +342,1 @@\n- * The #hb_language_t corresponding to the BCP 47 language tag.\n+ * The #hb_language_t corresponding to the BCP 47 language tag.\n@@ -359,1 +357,1 @@\n-    len = MIN (len, (int) sizeof (strbuf) - 1);\n+    len = hb_min (len, (int) sizeof (strbuf) - 1);\n@@ -385,1 +383,2 @@\n-  \/* This is actually nullptr-safe! *\/\n+  if (unlikely (!language)) return nullptr;\n+\n@@ -425,1 +424,1 @@\n- * @tag: an #hb_tag_t representing an ISO 15924 tag.\n+ * @tag: an #hb_tag_t representing an ISO 15924 tag.\n@@ -427,1 +426,1 @@\n- * Converts an ISO 15924 script tag to a corresponding #hb_script_t.\n+ * Converts an ISO 15924 script tag to a corresponding #hb_script_t.\n@@ -430,1 +429,1 @@\n- * An #hb_script_t corresponding to the ISO 15924 tag.\n+ * An #hb_script_t corresponding to the ISO 15924 tag.\n@@ -471,1 +470,1 @@\n- *       ISO 15924 tag.\n+ *       ISO 15924 tag.\n@@ -474,1 +473,1 @@\n- * Converts a string @str representing an ISO 15924 script tag to a\n+ * Converts a string @str representing an ISO 15924 script tag to a\n@@ -479,1 +478,1 @@\n- * An #hb_script_t corresponding to the ISO 15924 tag.\n+ * An #hb_script_t corresponding to the ISO 15924 tag.\n@@ -491,1 +490,1 @@\n- * @script: an #hb_script_ to convert.\n+ * @script: an #hb_script_t to convert.\n@@ -496,1 +495,1 @@\n- * An #hb_tag_t representing an ISO 15924 script tag.\n+ * An #hb_tag_t representing an ISO 15924 script tag.\n@@ -578,0 +577,7 @@\n+    \/* Unicode-12.0 additions *\/\n+    case HB_SCRIPT_ELYMAIC:\n+\n+    \/* Unicode-13.0 additions *\/\n+    case HB_SCRIPT_CHORASMIAN:\n+    case HB_SCRIPT_YEZIDI:\n+\n@@ -593,32 +599,0 @@\n-\/* hb_user_data_array_t *\/\n-\n-bool\n-hb_user_data_array_t::set (hb_user_data_key_t *key,\n-                           void *              data,\n-                           hb_destroy_func_t   destroy,\n-                           hb_bool_t           replace)\n-{\n-  if (!key)\n-    return false;\n-\n-  if (replace) {\n-    if (!data && !destroy) {\n-      items.remove (key, lock);\n-      return true;\n-    }\n-  }\n-  hb_user_data_item_t item = {key, data, destroy};\n-  bool ret = !!items.replace_or_insert (item, lock, (bool) replace);\n-\n-  return ret;\n-}\n-\n-void *\n-hb_user_data_array_t::get (hb_user_data_key_t *key)\n-{\n-  hb_user_data_item_t item = {nullptr, nullptr, nullptr};\n-\n-  return items.find (key, &item, lock) ? item.data : nullptr;\n-}\n-\n-\n@@ -722,15 +696,4 @@\n-  char buf[32];\n-  unsigned int len = MIN (ARRAY_LENGTH (buf) - 1, (unsigned int) (end - *pp));\n-  strncpy (buf, *pp, len);\n-  buf[len] = '\\0';\n-\n-  char *p = buf;\n-  char *pend = p;\n-  unsigned int v;\n-\n-  \/* Intentionally use strtol instead of strtoul, such that\n-   * -1 turns into \"big number\"... *\/\n-  errno = 0;\n-  v = strtol (p, &pend, 0);\n-  if (errno || p == pend)\n-    return false;\n+  \/* Intentionally use hb_parse_int inside instead of hb_parse_uint,\n+   * such that -1 turns into \"big number\"... *\/\n+  int v;\n+  if (unlikely (!hb_parse_int (pp, end, &v))) return false;\n@@ -739,1 +702,0 @@\n-  *pp += pend - p;\n@@ -746,15 +708,4 @@\n-  char buf[32];\n-  unsigned int len = MIN (ARRAY_LENGTH (buf) - 1, (unsigned int) (end - *pp));\n-  strncpy (buf, *pp, len);\n-  buf[len] = '\\0';\n-\n-  char *p = buf;\n-  char *pend = p;\n-  unsigned int v;\n-\n-  \/* Intentionally use strtol instead of strtoul, such that\n-   * -1 turns into \"big number\"... *\/\n-  errno = 0;\n-  v = strtol (p, &pend, 0);\n-  if (errno || p == pend)\n-    return false;\n+  \/* Intentionally use hb_parse_int inside instead of hb_parse_uint,\n+   * such that -1 turns into \"big number\"... *\/\n+  int v;\n+  if (unlikely (!hb_parse_int (pp, end, &v))) return false;\n@@ -763,84 +714,0 @@\n-  *pp += pend - p;\n-  return true;\n-}\n-\n-#if defined (HAVE_NEWLOCALE) && defined (HAVE_STRTOD_L)\n-#define USE_XLOCALE 1\n-#define HB_LOCALE_T locale_t\n-#define HB_CREATE_LOCALE(locName) newlocale (LC_ALL_MASK, locName, nullptr)\n-#define HB_FREE_LOCALE(loc) freelocale (loc)\n-#elif defined(_MSC_VER)\n-#define USE_XLOCALE 1\n-#define HB_LOCALE_T _locale_t\n-#define HB_CREATE_LOCALE(locName) _create_locale (LC_ALL, locName)\n-#define HB_FREE_LOCALE(loc) _free_locale (loc)\n-#define strtod_l(a, b, c) _strtod_l ((a), (b), (c))\n-#endif\n-\n-#ifdef USE_XLOCALE\n-\n-#if HB_USE_ATEXIT\n-static void free_static_C_locale ();\n-#endif\n-\n-static struct hb_C_locale_lazy_loader_t : hb_lazy_loader_t<hb_remove_pointer (HB_LOCALE_T),\n-                                                          hb_C_locale_lazy_loader_t>\n-{\n-  static HB_LOCALE_T create ()\n-  {\n-    HB_LOCALE_T C_locale = HB_CREATE_LOCALE (\"C\");\n-\n-#if HB_USE_ATEXIT\n-    atexit (free_static_C_locale);\n-#endif\n-\n-    return C_locale;\n-  }\n-  static void destroy (HB_LOCALE_T p)\n-  {\n-    HB_FREE_LOCALE (p);\n-  }\n-  static HB_LOCALE_T get_null ()\n-  {\n-    return nullptr;\n-  }\n-} static_C_locale;\n-\n-#if HB_USE_ATEXIT\n-static\n-void free_static_C_locale ()\n-{\n-  static_C_locale.free_instance ();\n-}\n-#endif\n-\n-static HB_LOCALE_T\n-get_C_locale ()\n-{\n-  return static_C_locale.get_unconst ();\n-}\n-#endif \/* USE_XLOCALE *\/\n-\n-static bool\n-parse_float (const char **pp, const char *end, float *pv)\n-{\n-  char buf[32];\n-  unsigned int len = MIN (ARRAY_LENGTH (buf) - 1, (unsigned int) (end - *pp));\n-  strncpy (buf, *pp, len);\n-  buf[len] = '\\0';\n-\n-  char *p = buf;\n-  char *pend = p;\n-  float v;\n-\n-  errno = 0;\n-#ifdef USE_XLOCALE\n-  v = strtod_l (p, &pend, get_C_locale ());\n-#else\n-  v = strtod (p, &pend);\n-#endif\n-  if (errno || p == pend)\n-    return false;\n-\n-  *pv = v;\n-  *pp += pend - p;\n@@ -860,1 +727,3 @@\n-  if (*pp - p == 2 && 0 == strncmp (p, \"on\", 2))\n+  if (*pp - p == 2\n+      && TOLOWER (p[0]) == 'o'\n+      && TOLOWER (p[1]) == 'n')\n@@ -862,1 +731,4 @@\n-  else if (*pp - p == 3 && 0 == strncmp (p, \"off\", 3))\n+  else if (*pp - p == 3\n+           && TOLOWER (p[0]) == 'o'\n+           && TOLOWER (p[1]) == 'f'\n+           && TOLOWER (p[2]) == 'f')\n@@ -977,1 +849,35 @@\n- * TODO: document the syntax here.\n+ * The format for specifying feature strings follows. All valid CSS\n+ * font-feature-settings values other than 'normal' and the global values are\n+ * also accepted, though not documented below. CSS string escapes are not\n+ * supported.\n+ *\n+ * The range indices refer to the positions between Unicode characters. The\n+ * position before the first character is always 0.\n+ *\n+ * The format is Python-esque.  Here is how it all works:\n+ *\n+ * <informaltable pgwide='1' align='left' frame='none'>\n+ * <tgroup cols='5'>\n+ * <thead>\n+ * <row><entry>Syntax<\/entry>    <entry>Value<\/entry> <entry>Start<\/entry> <entry>End<\/entry><\/row>\n+ * <\/thead>\n+ * <tbody>\n+ * <row><entry>Setting value:<\/entry><\/row>\n+ * <row><entry>kern<\/entry>      <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>\n+ * <row><entry>+kern<\/entry>     <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>\n+ * <row><entry>-kern<\/entry>     <entry>0<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature off<\/entry><\/row>\n+ * <row><entry>kern=0<\/entry>    <entry>0<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature off<\/entry><\/row>\n+ * <row><entry>kern=1<\/entry>    <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>\n+ * <row><entry>aalt=2<\/entry>    <entry>2<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Choose 2nd alternate<\/entry><\/row>\n+ * <row><entry>Setting index:<\/entry><\/row>\n+ * <row><entry>kern[]<\/entry>    <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>\n+ * <row><entry>kern[:]<\/entry>   <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>\n+ * <row><entry>kern[5:]<\/entry>  <entry>1<\/entry>     <entry>5<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on, partial<\/entry><\/row>\n+ * <row><entry>kern[:5]<\/entry>  <entry>1<\/entry>     <entry>0<\/entry>      <entry>5<\/entry>   <entry>Turn feature on, partial<\/entry><\/row>\n+ * <row><entry>kern[3:5]<\/entry> <entry>1<\/entry>     <entry>3<\/entry>      <entry>5<\/entry>   <entry>Turn feature on, range<\/entry><\/row>\n+ * <row><entry>kern[3]<\/entry>   <entry>1<\/entry>     <entry>3<\/entry>      <entry>3+1<\/entry> <entry>Turn feature on, single char<\/entry><\/row>\n+ * <row><entry>Mixing it all:<\/entry><\/row>\n+ * <row><entry>aalt[3:5]=2<\/entry> <entry>2<\/entry>   <entry>3<\/entry>      <entry>5<\/entry>   <entry>Turn 2nd alternate on for range<\/entry><\/row>\n+ * <\/tbody>\n+ * <\/tgroup>\n+ * <\/informaltable>\n@@ -1031,1 +937,1 @@\n-  if (feature->start != 0 || feature->end != (unsigned int) -1)\n+  if (feature->start != HB_FEATURE_GLOBAL_START || feature->end != HB_FEATURE_GLOBAL_END)\n@@ -1035,1 +941,1 @@\n-      len += MAX (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%u\", feature->start));\n+      len += hb_max (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%u\", feature->start));\n@@ -1038,2 +944,2 @@\n-      if (feature->end != (unsigned int) -1)\n-        len += MAX (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%u\", feature->end));\n+      if (feature->end != HB_FEATURE_GLOBAL_END)\n+        len += hb_max (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%u\", feature->end));\n@@ -1046,1 +952,1 @@\n-    len += MAX (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%u\", feature->value));\n+    len += hb_max (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%u\", feature->value));\n@@ -1049,1 +955,1 @@\n-  len = MIN (len, size - 1);\n+  len = hb_min (len, size - 1);\n@@ -1060,1 +966,5 @@\n-  return parse_float (pp, end, &variation->value);\n+  double v;\n+  if (unlikely (!hb_parse_double (pp, end, &v))) return false;\n+\n+  variation->value = v;\n+  return true;\n@@ -1116,1 +1026,1 @@\n-  len += MAX (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%g\", (double) variation->value));\n+  len += hb_max (0, snprintf (s + len, ARRAY_LENGTH (s) - len, \"%g\", (double) variation->value));\n@@ -1119,1 +1029,1 @@\n-  len = MIN (len, size - 1);\n+  len = hb_min (len, size - 1);\n@@ -1124,0 +1034,57 @@\n+\/**\n+ * hb_color_get_alpha:\n+ * color: a #hb_color_t we are interested in its channels.\n+ *\n+ * Return value: Alpha channel value of the given color\n+ *\n+ * Since: 2.1.0\n+ *\/\n+uint8_t\n+(hb_color_get_alpha) (hb_color_t color)\n+{\n+  return hb_color_get_alpha (color);\n+}\n+\n+\/**\n+ * hb_color_get_red:\n+ * color: a #hb_color_t we are interested in its channels.\n+ *\n+ * Return value: Red channel value of the given color\n+ *\n+ * Since: 2.1.0\n+ *\/\n+uint8_t\n+(hb_color_get_red) (hb_color_t color)\n+{\n+  return hb_color_get_red (color);\n+}\n+\n+\/**\n+ * hb_color_get_green:\n+ * color: a #hb_color_t we are interested in its channels.\n+ *\n+ * Return value: Green channel value of the given color\n+ *\n+ * Since: 2.1.0\n+ *\/\n+uint8_t\n+(hb_color_get_green) (hb_color_t color)\n+{\n+  return hb_color_get_green (color);\n+}\n+\n+\/**\n+ * hb_color_get_blue:\n+ * color: a #hb_color_t we are interested in its channels.\n+ *\n+ * Return value: Blue channel value of the given color\n+ *\n+ * Since: 2.1.0\n+ *\/\n+uint8_t\n+(hb_color_get_blue) (hb_color_t color)\n+{\n+  return hb_color_get_blue (color);\n+}\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-common.cc","additions":145,"deletions":178,"binary":false,"changes":323,"status":"modified"},{"patch":"@@ -66,0 +66,2 @@\n+#elif defined (__KERNEL__)\n+#  include <linux\/types.h>\n@@ -360,0 +362,16 @@\n+  \/*\n+   * Since 2.4.0\n+   *\/\n+  \/*12.0*\/HB_SCRIPT_ELYMAIC                     = HB_TAG ('E','l','y','m'),\n+  \/*12.0*\/HB_SCRIPT_NANDINAGARI                 = HB_TAG ('N','a','n','d'),\n+  \/*12.0*\/HB_SCRIPT_NYIAKENG_PUACHUE_HMONG      = HB_TAG ('H','m','n','p'),\n+  \/*12.0*\/HB_SCRIPT_WANCHO                      = HB_TAG ('W','c','h','o'),\n+\n+  \/*\n+   * Since 2.6.7\n+   *\/\n+  \/*13.0*\/HB_SCRIPT_CHORASMIAN                  = HB_TAG ('C','h','r','s'),\n+  \/*13.0*\/HB_SCRIPT_DIVES_AKURU                 = HB_TAG ('D','i','a','k'),\n+  \/*13.0*\/HB_SCRIPT_KHITAN_SMALL_SCRIPT         = HB_TAG ('K','i','t','s'),\n+  \/*13.0*\/HB_SCRIPT_YEZIDI                      = HB_TAG ('Y','e','z','i'),\n+\n@@ -418,0 +436,15 @@\n+\/**\n+ * hb_feature_t:\n+ * @tag: a feature tag\n+ * @value: 0 disables the feature, non-zero (usually 1) enables the feature.\n+ * For features implemented as lookup type 3 (like 'salt') the @value is a one\n+ * based index into the alternates.\n+ * @start: the cluster to start applying this feature setting (inclusive).\n+ * @end: the cluster to end applying this feature setting (exclusive).\n+ *\n+ * The #hb_feature_t is the structure that holds information about requested\n+ * feature application. The feature will be applied with the given value to all\n+ * glyphs which are in clusters between @start (inclusive) and @end (exclusive).\n+ * Setting start to @HB_FEATURE_GLOBAL_START and end to @HB_FEATURE_GLOBAL_END\n+ * specifies that the feature always applies to the entire buffer.\n+ *\/\n@@ -462,7 +495,2 @@\n-\/**\n- * hb_color_get_alpha:\n- *\n- *\n- *\n- * Since: 2.1.0\n- *\/\n+HB_EXTERN uint8_t\n+hb_color_get_alpha (hb_color_t color);\n@@ -470,7 +498,3 @@\n-\/**\n- * hb_color_get_red:\n- *\n- *\n- *\n- * Since: 2.1.0\n- *\/\n+\n+HB_EXTERN uint8_t\n+hb_color_get_red (hb_color_t color);\n@@ -478,7 +502,3 @@\n-\/**\n- * hb_color_get_green:\n- *\n- *\n- *\n- * Since: 2.1.0\n- *\/\n+\n+HB_EXTERN uint8_t\n+hb_color_get_green (hb_color_t color);\n@@ -486,8 +506,0 @@\n-\/**\n- * hb_color_get_blue:\n- *\n- *\n- *\n- * Since: 2.1.0\n- *\/\n-#define hb_color_get_blue(color)        (((color) >> 24) & 0xFF)\n@@ -495,0 +507,3 @@\n+HB_EXTERN uint8_t\n+hb_color_get_blue (hb_color_t color);\n+#define hb_color_get_blue(color)        (((color) >> 24) & 0xFF)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-common.h","additions":44,"deletions":29,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright © 2019  Facebook, Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Facebook Author(s): Behdad Esfahbod\n+ *\/\n+\n+#ifndef HB_CONFIG_HH\n+#define HB_CONFIG_HH\n+\n+#if 0 \/* Make test happy. *\/\n+#include \"hb.hh\"\n+#endif\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+\n+\n+#ifdef HB_TINY\n+#define HB_LEAN\n+#define HB_MINI\n+#define HB_NO_MT\n+#define HB_NO_UCD_UNASSIGNED\n+#ifndef NDEBUG\n+#define NDEBUG\n+#endif\n+#ifndef __OPTIMIZE_SIZE__\n+#define __OPTIMIZE_SIZE__\n+#endif\n+#endif\n+\n+#ifdef HB_LEAN\n+#define HB_DISABLE_DEPRECATED\n+#define HB_NDEBUG\n+#define HB_NO_ATEXIT\n+#define HB_NO_BUFFER_MESSAGE\n+#define HB_NO_BUFFER_SERIALIZE\n+#define HB_NO_BITMAP\n+#define HB_NO_CFF\n+#define HB_NO_COLOR\n+#define HB_NO_DRAW\n+#define HB_NO_ERRNO\n+#define HB_NO_FACE_COLLECT_UNICODES\n+#define HB_NO_GETENV\n+#define HB_NO_HINTING\n+#define HB_NO_LANGUAGE_PRIVATE_SUBTAG\n+#define HB_NO_LAYOUT_FEATURE_PARAMS\n+#define HB_NO_LAYOUT_COLLECT_GLYPHS\n+#define HB_NO_LAYOUT_UNUSED\n+#define HB_NO_MATH\n+#define HB_NO_META\n+#define HB_NO_METRICS\n+#define HB_NO_MMAP\n+#define HB_NO_NAME\n+#define HB_NO_OPEN\n+#define HB_NO_SETLOCALE\n+#define HB_NO_OT_FONT_GLYPH_NAMES\n+#define HB_NO_OT_SHAPE_FRACTIONS\n+#define HB_NO_STYLE\n+#define HB_NO_SUBSET_LAYOUT\n+#define HB_NO_VAR\n+#endif\n+\n+#ifdef HB_MINI\n+#define HB_NO_AAT\n+#define HB_NO_LEGACY\n+#endif\n+\n+\n+\/* Closure of options. *\/\n+\n+#ifdef HB_DISABLE_DEPRECATED\n+#define HB_IF_NOT_DEPRECATED(x)\n+#else\n+#define HB_IF_NOT_DEPRECATED(x) x\n+#endif\n+\n+#ifdef HB_NO_AAT\n+#define HB_NO_OT_NAME_LANGUAGE_AAT\n+#define HB_NO_AAT_SHAPE\n+#endif\n+\n+#ifdef HB_NO_BITMAP\n+#define HB_NO_OT_FONT_BITMAP\n+#endif\n+\n+#ifdef HB_NO_CFF\n+#define HB_NO_OT_FONT_CFF\n+#define HB_NO_SUBSET_CFF\n+#endif\n+\n+#ifdef HB_NO_GETENV\n+#define HB_NO_UNISCRIBE_BUG_COMPATIBLE\n+#endif\n+\n+#ifdef HB_NO_LEGACY\n+#define HB_NO_CMAP_LEGACY_SUBTABLES\n+#define HB_NO_FALLBACK_SHAPE\n+#define HB_NO_OT_KERN\n+#define HB_NO_OT_LAYOUT_BLACKLIST\n+#define HB_NO_OT_SHAPE_FALLBACK\n+#endif\n+\n+#ifdef HB_NO_NAME\n+#define HB_NO_OT_NAME_LANGUAGE\n+#endif\n+\n+#ifdef HB_NO_OT\n+#define HB_NO_OT_FONT\n+#define HB_NO_OT_LAYOUT\n+#define HB_NO_OT_TAG\n+#define HB_NO_OT_SHAPE\n+#endif\n+\n+#ifdef HB_NO_OT_SHAPE\n+#define HB_NO_AAT_SHAPE\n+#endif\n+\n+#ifdef HB_NO_OT_SHAPE_FALLBACK\n+#define HB_NO_OT_SHAPE_COMPLEX_ARABIC_FALLBACK\n+#define HB_NO_OT_SHAPE_COMPLEX_HEBREW_FALLBACK\n+#define HB_NO_OT_SHAPE_COMPLEX_THAI_FALLBACK\n+#define HB_NO_OT_SHAPE_COMPLEX_VOWEL_CONSTRAINTS\n+#endif\n+\n+#ifdef NDEBUG\n+#ifndef HB_NDEBUG\n+#define HB_NDEBUG\n+#endif\n+#endif\n+\n+#ifdef __OPTIMIZE_SIZE__\n+#ifndef HB_OPTIMIZE_SIZE\n+#define HB_OPTIMIZE_SIZE\n+#endif\n+#endif\n+\n+#ifdef HAVE_CONFIG_OVERRIDE_H\n+#include \"config-override.h\"\n+#endif\n+\n+\n+#endif \/* HB_CONFIG_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-config.hh","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -30,0 +30,3 @@\n+\n+#ifdef HAVE_CORETEXT\n+\n@@ -49,18 +52,0 @@\n-static CGFloat\n-coretext_font_size_from_ptem (float ptem)\n-{\n-  \/* CoreText points are CSS pixels (96 per inch),\n-   * NOT typographic points (72 per inch).\n-   *\n-   * https:\/\/developer.apple.com\/library\/content\/documentation\/GraphicsAnimation\/Conceptual\/HighResolutionOSX\/Explained\/Explained.html\n-   *\/\n-  ptem *= 96.f \/ 72.f;\n-  return ptem <= 0.f ? HB_CORETEXT_DEFAULT_FONT_SIZE : ptem;\n-}\n-static float\n-coretext_font_size_to_ptem (CGFloat size)\n-{\n-  size *= 72.f \/ 96.f;\n-  return size <= 0.f ? 0 : size;\n-}\n-\n@@ -75,1 +60,1 @@\n-reference_table  (hb_face_t *face HB_UNUSED, hb_tag_t tag, void *user_data)\n+_hb_cg_reference_table (hb_face_t *face HB_UNUSED, hb_tag_t tag, void *user_data)\n@@ -174,1 +159,1 @@\n-#if MAC_OS_X_VERSION_MIN_REQUIRED < 1080\n+#if !(defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE) && MAC_OS_X_VERSION_MIN_REQUIRED < 1080\n@@ -217,1 +202,1 @@\n-#if TARGET_OS_OSX && MAC_OS_X_VERSION_MIN_REQUIRED < 1060\n+#if !(defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE) && MAC_OS_X_VERSION_MIN_REQUIRED < 1060\n@@ -247,1 +232,1 @@\n-#if TARGET_OS_OSX && MAC_OS_X_VERSION_MIN_REQUIRED < 1060\n+#if !(defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE) && MAC_OS_X_VERSION_MIN_REQUIRED < 1060\n@@ -296,0 +281,11 @@\n+\/**\n+ * hb_coretext_face_create:\n+ * @cg_font: The CGFontRef to work upon\n+ *\n+ * Creates an #hb_face_t face object from the specified\n+ * CGFontRef.\n+ *\n+ * Return value: the new #hb_face_t face object\n+ *\n+ * Since: 0.9.10\n+ *\/\n@@ -299,1 +295,1 @@\n-  return hb_face_create_for_tables (reference_table, CGFontRetain (cg_font), _hb_cg_font_release);\n+  return hb_face_create_for_tables (_hb_cg_reference_table, CGFontRetain (cg_font), _hb_cg_font_release);\n@@ -302,1 +298,9 @@\n-\/*\n+\/**\n+ * hb_coretext_face_get_cg_font:\n+ * @face: The #hb_face_t to work upon\n+ *\n+ * Fetches the CGFontRef associated with an #hb_face_t\n+ * face object\n+ *\n+ * Return value: the CGFontRef found\n+ *\n@@ -320,1 +324,2 @@\n-  CTFontRef ct_font = create_ct_font (cg_font, coretext_font_size_from_ptem (font->ptem));\n+  CGFloat font_size = (CGFloat) (font->ptem <= 0.f ? HB_CORETEXT_DEFAULT_FONT_SIZE : font->ptem);\n+  CTFontRef ct_font = create_ct_font (cg_font, font_size);\n@@ -344,1 +349,1 @@\n-  if (fabs (CTFontGetSize((CTFontRef) data) - coretext_font_size_from_ptem (font->ptem)) > .5)\n+  if (fabs (CTFontGetSize ((CTFontRef) data) - (CGFloat) font->ptem) > .5)\n@@ -368,2 +373,9 @@\n-\n-\/*\n+\/**\n+ * hb_coretext_font_create:\n+ * @ct_font: The CTFontRef to work upon\n+ *\n+ * Creates an #hb_font_t font object from the specified\n+ * CTFontRef.\n+ *\n+ * Return value: the new #hb_font_t font object\n+ *\n@@ -371,1 +383,1 @@\n- *\/\n+ **\/\n@@ -384,1 +396,1 @@\n-  hb_font_set_ptem (font, coretext_font_size_to_ptem (CTFontGetSize(ct_font)));\n+  hb_font_set_ptem (font, CTFontGetSize (ct_font));\n@@ -392,0 +404,11 @@\n+\/**\n+ * hb_coretext_face_get_ct_font:\n+ * @font: #hb_font_t to work upon\n+ *\n+ * Fetches the CTFontRef associated with the specified\n+ * #hb_font_t font object.\n+ *\n+ * Return value: the CTFontRef found\n+ *\n+ * Since: 0.9.10\n+ *\/\n@@ -413,1 +436,1 @@\n-  static int cmp (const void *pa, const void *pb) {\n+  HB_INTERNAL static int cmp (const void *pa, const void *pb) {\n@@ -431,1 +454,1 @@\n-  static int cmp (const void *pa, const void *pb) {\n+  HB_INTERNAL static int cmp (const void *pa, const void *pb) {\n@@ -492,0 +515,3 @@\n+      active_feature_t feature;\n+\n+#if MAC_OS_X_VERSION_MIN_REQUIRED < 101000\n@@ -496,1 +522,0 @@\n-      active_feature_t feature;\n@@ -499,0 +524,4 @@\n+#else\n+      feature.rec.feature = features[i].tag;\n+      feature.rec.setting = features[i].value;\n+#endif\n@@ -547,0 +576,1 @@\n+#if MAC_OS_X_VERSION_MIN_REQUIRED < 101000\n@@ -555,0 +585,11 @@\n+#else\n+            char tag[5] = {HB_UNTAG (active_features[j].rec.feature)};\n+            CFTypeRef keys[] = {\n+              kCTFontOpenTypeFeatureTag,\n+              kCTFontOpenTypeFeatureValue\n+            };\n+            CFTypeRef values[] = {\n+              CFStringCreateWithCString (kCFAllocatorDefault, tag, kCFStringEncodingASCII),\n+              CFNumberCreate (kCFAllocatorDefault, kCFNumberIntType, &active_features[j].rec.setting)\n+            };\n+#endif\n@@ -601,1 +642,1 @@\n-          active_features.remove (feature - active_features.arrayZ ());\n+          active_features.remove (feature - active_features.arrayZ);\n@@ -611,1 +652,1 @@\n-  { \\\n+  do { \\\n@@ -620,1 +661,1 @@\n-  }\n+  } while (0)\n@@ -622,1 +663,1 @@\n-  ALLOCATE_ARRAY (UniChar, pchars, buffer->len * 2, \/*nothing*\/);\n+  ALLOCATE_ARRAY (UniChar, pchars, buffer->len * 2, ((void)nullptr) \/*nothing*\/);\n@@ -636,1 +677,1 @@\n-  ALLOCATE_ARRAY (unsigned int, log_clusters, chars_len, \/*nothing*\/);\n+  ALLOCATE_ARRAY (unsigned int, log_clusters, chars_len, ((void)nullptr) \/*nothing*\/);\n@@ -652,1 +693,1 @@\n-  } HB_STMT_END;\n+  } HB_STMT_END\n@@ -714,1 +755,1 @@\n-#if MAC_OS_X_VERSION_MIN_REQUIRED < 1090\n+#if !(defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE) && MAC_OS_X_VERSION_MIN_REQUIRED < 1090\n@@ -774,1 +815,1 @@\n-                                                 MIN (feature.end, chars_len) - feature.start);\n+                                                 hb_min (feature.end, chars_len) - feature.start);\n@@ -786,1 +827,1 @@\n-#if MAC_OS_X_VERSION_MIN_REQUIRED < 1060\n+#if !(defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE) && MAC_OS_X_VERSION_MIN_REQUIRED < 1060\n@@ -980,1 +1021,1 @@\n-  scratch = scratch_saved;\n+  scratch = scratch_saved\n@@ -1072,1 +1113,1 @@\n-      bool backward = HB_DIRECTION_IS_BACKWARD (buffer->props.direction);\n+      HB_UNUSED bool backward = HB_DIRECTION_IS_BACKWARD (buffer->props.direction);\n@@ -1119,1 +1160,1 @@\n-          cluster = MIN (cluster, info[i - 1].cluster);\n+          cluster = hb_min (cluster, info[i - 1].cluster);\n@@ -1128,1 +1169,1 @@\n-          cluster = MIN (cluster, info[i].cluster);\n+          cluster = hb_min (cluster, info[i].cluster);\n@@ -1153,54 +1194,1 @@\n-\/*\n- * AAT shaper\n- *\/\n-\n-\/*\n- * shaper face data\n- *\/\n-\n-struct hb_coretext_aat_face_data_t {};\n-\n-hb_coretext_aat_face_data_t *\n-_hb_coretext_aat_shaper_face_data_create (hb_face_t *face)\n-{\n-  return hb_aat_layout_has_substitution (face) || hb_aat_layout_has_positioning (face) ?\n-         (hb_coretext_aat_face_data_t *) HB_SHAPER_DATA_SUCCEEDED : nullptr;\n-}\n-\n-void\n-_hb_coretext_aat_shaper_face_data_destroy (hb_coretext_aat_face_data_t *data HB_UNUSED)\n-{\n-}\n-\n-\n-\/*\n- * shaper font data\n- *\/\n-\n-struct hb_coretext_aat_font_data_t {};\n-\n-hb_coretext_aat_font_data_t *\n-_hb_coretext_aat_shaper_font_data_create (hb_font_t *font)\n-{\n-  return font->data.coretext ? (hb_coretext_aat_font_data_t *) HB_SHAPER_DATA_SUCCEEDED : nullptr;\n-}\n-\n-void\n-_hb_coretext_aat_shaper_font_data_destroy (hb_coretext_aat_font_data_t *data HB_UNUSED)\n-{\n-}\n-\n-\n-\/*\n- * shaper\n- *\/\n-\n-hb_bool_t\n-_hb_coretext_aat_shape (hb_shape_plan_t    *shape_plan,\n-                        hb_font_t          *font,\n-                        hb_buffer_t        *buffer,\n-                        const hb_feature_t *features,\n-                        unsigned int        num_features)\n-{\n-  return _hb_coretext_shape (shape_plan, font, buffer, features, num_features);\n-}\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-coretext.cc","additions":88,"deletions":100,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -43,0 +43,10 @@\n+\/**\n+ * HB_CORETEXT_TAG_MORT:\n+ *\n+ * The #hb_tag_t tag for the `mort` (glyph metamorphosis) table,\n+ * which holds AAT features.\n+ *\n+ * For more information, see\n+ * https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM06\/Chap6mort.html\n+ *\n+ **\/\n@@ -44,0 +54,11 @@\n+\n+\/**\n+ * HB_CORETEXT_TAG_MORX:\n+ *\n+ * The #hb_tag_t tag for the `morx` (extended glyph metamorphosis)\n+ * table, which holds AAT features.\n+ *\n+ * For more information, see\n+ * https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM06\/Chap6morx.html\n+ *\n+ **\/\n@@ -45,0 +66,11 @@\n+\n+\/**\n+ * HB_CORETEXT_TAG_KERX:\n+ *\n+ * The #hb_tag_t tag for the `kerx` (extended kerning) table, which\n+ * holds AAT kerning information.\n+ *\n+ * For more information, see\n+ * https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM06\/Chap6kerx.html\n+ *\n+ **\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-coretext.h","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"hb-dsalgs.hh\"\n+#include \"hb-algs.hh\"\n@@ -49,1 +49,0 @@\n-  bool aat : 1;\n@@ -66,0 +65,3 @@\n+#ifdef HB_NO_GETENV\n+  return hb_options_t ();\n+#endif\n@@ -161,1 +163,1 @@\n-             bars + sizeof (bars) - 1 - MIN ((unsigned int) sizeof (bars) - 1, (unsigned int) (sizeof (VBAR) - 1) * level),\n+             bars + sizeof (bars) - 1 - hb_min ((unsigned int) sizeof (bars) - 1, (unsigned int) (sizeof (VBAR) - 1) * level),\n@@ -249,2 +251,2 @@\n-struct hb_printer_t<hb_void_t> {\n-  const char *print (hb_void_t) { return \"\"; }\n+struct hb_printer_t<hb_empty_t> {\n+  const char *print (hb_empty_t) { return \"\"; }\n@@ -266,1 +268,1 @@\n-\/*static*\/ inline void _hb_warn_no_return<hb_void_t> (bool returned HB_UNUSED)\n+\/*static*\/ inline void _hb_warn_no_return<hb_empty_t> (bool returned HB_UNUSED)\n@@ -296,3 +298,4 @@\n-  ret_t ret (ret_t v,\n-             const char *func = \"\",\n-             unsigned int line = 0)\n+  template <typename T>\n+  T ret (T&& v,\n+         const char *func = \"\",\n+         unsigned int line = 0)\n@@ -302,1 +305,1 @@\n-      return v;\n+      return hb_forward<T> (v);\n@@ -307,1 +310,1 @@\n-                              hb_printer_t<ret_t>().print (v), line);\n+                              hb_printer_t<decltype (v)>().print (v), line);\n@@ -311,1 +314,1 @@\n-    return v;\n+    return hb_forward<T> (v);\n@@ -330,3 +333,4 @@\n-  ret_t ret (ret_t v,\n-             const char *func HB_UNUSED = nullptr,\n-             unsigned int line HB_UNUSED = 0) { return v; }\n+  template <typename T>\n+  T ret (T&& v,\n+         const char *func HB_UNUSED = nullptr,\n+         unsigned int line HB_UNUSED = 0) { return hb_forward<T> (v); }\n@@ -339,3 +343,4 @@\n-  ret_t ret (ret_t v,\n-             const char *func HB_UNUSED = \"\",\n-             unsigned int line HB_UNUSED = 0) { return v; }\n+  template <typename T>\n+  T ret (T&& v,\n+         const char *func HB_UNUSED = nullptr,\n+         unsigned int line HB_UNUSED = 0) { return hb_forward<T> (v); }\n@@ -371,4 +376,0 @@\n-#ifndef HB_DEBUG_GET_COVERAGE\n-#define HB_DEBUG_GET_COVERAGE (HB_DEBUG+0)\n-#endif\n-\n@@ -411,1 +412,1 @@\n-         \" \");\n+         \" \")\n@@ -423,1 +424,1 @@\n-         \" \");\n+         \" \")\n@@ -435,1 +436,1 @@\n-   \" \");\n+   \" \")\n@@ -440,12 +441,0 @@\n-#ifndef HB_DEBUG_WOULD_APPLY\n-#define HB_DEBUG_WOULD_APPLY (HB_DEBUG+0)\n-#endif\n-#if HB_DEBUG_WOULD_APPLY\n-#define TRACE_WOULD_APPLY(this) \\\n-        hb_auto_trace_t<HB_DEBUG_WOULD_APPLY, bool> trace \\\n-        (&c->debug_depth, c->get_name (), this, HB_FUNC, \\\n-         \"%d glyphs\", c->len);\n-#else\n-#define TRACE_WOULD_APPLY(this) hb_no_trace_t<bool> trace\n-#endif\n-\n@@ -457,2 +446,1 @@\n-  HB_DEBUG_SUBSET + \\\n-        HB_DEBUG_WOULD_APPLY + \\\n+        HB_DEBUG_SUBSET + \\\n@@ -465,1 +453,1 @@\n-         \"format %d\", (int) format);\n+         \"format %d\", (int) format)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-debug.hh","additions":28,"deletions":40,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-HB_EXTERN HB_DEPRECATED_FOR(hb_font_funcs_set_nominal_glyph_func or hb_font_funcs_set_variation_glyph_func) void\n+HB_EXTERN HB_DEPRECATED_FOR(hb_font_funcs_set_nominal_glyph_func and hb_font_funcs_set_variation_glyph_func) void\n@@ -168,4 +168,0 @@\n-typedef hb_position_t (*hb_font_get_glyph_kerning_func_t) (hb_font_t *font, void *font_data,\n-                                                           hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,\n-                                                           void *user_data);\n-typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t;\n@@ -174,17 +170,0 @@\n-\/**\n- * hb_font_funcs_set_glyph_h_kerning_func:\n- * @ffuncs: font functions.\n- * @func: (closure user_data) (destroy destroy) (scope notified):\n- * @user_data:\n- * @destroy:\n- *\n- *\n- *\n- * Since: 0.9.2\n- * Deprecated: 2.0.0\n- **\/\n-HB_EXTERN void\n-hb_font_funcs_set_glyph_h_kerning_func (hb_font_funcs_t *ffuncs,\n-                                        hb_font_get_glyph_h_kerning_func_t func,\n-                                        void *user_data, hb_destroy_func_t destroy);\n-\n@@ -209,3 +188,0 @@\n-hb_font_get_glyph_h_kerning (hb_font_t *font,\n-                             hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);\n-HB_EXTERN hb_position_t\n@@ -215,7 +191,0 @@\n-HB_EXTERN void\n-hb_font_get_glyph_kerning_for_direction (hb_font_t *font,\n-                                         hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,\n-                                         hb_direction_t direction,\n-                                         hb_position_t *x, hb_position_t *y);\n-\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-deprecated.h","additions":1,"deletions":32,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright © 2007,2008,2009,2010  Red Hat, Inc.\n+ * Copyright © 2012,2018  Google, Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Red Hat Author(s): Behdad Esfahbod\n+ * Google Author(s): Behdad Esfahbod\n+ *\/\n+\n+#ifndef HB_DISPATCH_HH\n+#define HB_DISPATCH_HH\n+\n+#include \"hb.hh\"\n+\n+\/*\n+ * Dispatch\n+ *\/\n+\n+template <typename Context, typename Return=hb_empty_t, unsigned int MaxDebugDepth=0>\n+struct hb_dispatch_context_t\n+{\n+  hb_dispatch_context_t () : debug_depth (0) {}\n+  private:\n+  \/* https:\/\/en.wikipedia.org\/wiki\/Curiously_recurring_template_pattern *\/\n+  const Context* thiz () const { return static_cast<const Context *> (this); }\n+        Context* thiz ()       { return static_cast<      Context *> (this); }\n+  public:\n+  const char *get_name () { return \"UNKNOWN\"; }\n+  static constexpr unsigned max_debug_depth = MaxDebugDepth;\n+  typedef Return return_t;\n+  template <typename T, typename F>\n+  bool may_dispatch (const T *obj HB_UNUSED, const F *format HB_UNUSED) { return true; }\n+  template <typename T, typename ...Ts>\n+  return_t dispatch (const T &obj, Ts&&... ds)\n+  { return obj.dispatch (thiz (), hb_forward<Ts> (ds)...); }\n+  static return_t no_dispatch_return_value () { return Context::default_return_value (); }\n+  static bool stop_sublookup_iteration (const return_t r HB_UNUSED) { return false; }\n+  unsigned debug_depth;\n+};\n+\n+\n+#endif \/* HB_DISPATCH_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-dispatch.hh","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,261 @@\n+\/*\n+ * Copyright © 2019-2020  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_DRAW\n+#ifdef HB_EXPERIMENTAL_API\n+\n+#include \"hb-draw.hh\"\n+#include \"hb-ot.h\"\n+#include \"hb-ot-glyf-table.hh\"\n+#include \"hb-ot-cff1-table.hh\"\n+#include \"hb-ot-cff2-table.hh\"\n+\n+\/**\n+ * hb_draw_funcs_set_move_to_func:\n+ * @funcs: draw functions object\n+ * @move_to: move-to callback\n+ *\n+ * Sets move-to callback to the draw functions object.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+void\n+hb_draw_funcs_set_move_to_func (hb_draw_funcs_t        *funcs,\n+                                hb_draw_move_to_func_t  move_to)\n+{\n+  if (unlikely (hb_object_is_immutable (funcs))) return;\n+  funcs->move_to = move_to;\n+}\n+\n+\/**\n+ * hb_draw_funcs_set_line_to_func:\n+ * @funcs: draw functions object\n+ * @line_to: line-to callback\n+ *\n+ * Sets line-to callback to the draw functions object.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+void\n+hb_draw_funcs_set_line_to_func (hb_draw_funcs_t        *funcs,\n+                                hb_draw_line_to_func_t  line_to)\n+{\n+  if (unlikely (hb_object_is_immutable (funcs))) return;\n+  funcs->line_to = line_to;\n+}\n+\n+\/**\n+ * hb_draw_funcs_set_quadratic_to_func:\n+ * @funcs: draw functions object\n+ * @move_to: quadratic-to callback\n+ *\n+ * Sets quadratic-to callback to the draw functions object.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+void\n+hb_draw_funcs_set_quadratic_to_func (hb_draw_funcs_t             *funcs,\n+                                     hb_draw_quadratic_to_func_t  quadratic_to)\n+{\n+  if (unlikely (hb_object_is_immutable (funcs))) return;\n+  funcs->quadratic_to = quadratic_to;\n+  funcs->is_quadratic_to_set = true;\n+}\n+\n+\/**\n+ * hb_draw_funcs_set_cubic_to_func:\n+ * @funcs: draw functions\n+ * @cubic_to: cubic-to callback\n+ *\n+ * Sets cubic-to callback to the draw functions object.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+void\n+hb_draw_funcs_set_cubic_to_func (hb_draw_funcs_t         *funcs,\n+                                 hb_draw_cubic_to_func_t  cubic_to)\n+{\n+  if (unlikely (hb_object_is_immutable (funcs))) return;\n+  funcs->cubic_to = cubic_to;\n+}\n+\n+\/**\n+ * hb_draw_funcs_set_close_path_func:\n+ * @funcs: draw functions object\n+ * @close_path: close-path callback\n+ *\n+ * Sets close-path callback to the draw functions object.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+void\n+hb_draw_funcs_set_close_path_func (hb_draw_funcs_t           *funcs,\n+                                   hb_draw_close_path_func_t  close_path)\n+{\n+  if (unlikely (hb_object_is_immutable (funcs))) return;\n+  funcs->close_path = close_path;\n+}\n+\n+static void\n+_move_to_nil (hb_position_t to_x HB_UNUSED, hb_position_t to_y HB_UNUSED, void *user_data HB_UNUSED) {}\n+\n+static void\n+_line_to_nil (hb_position_t to_x HB_UNUSED, hb_position_t to_y HB_UNUSED, void *user_data HB_UNUSED) {}\n+\n+static void\n+_quadratic_to_nil (hb_position_t control_x HB_UNUSED, hb_position_t control_y HB_UNUSED,\n+                   hb_position_t to_x HB_UNUSED, hb_position_t to_y HB_UNUSED,\n+                   void *user_data HB_UNUSED) {}\n+\n+static void\n+_cubic_to_nil (hb_position_t control1_x HB_UNUSED, hb_position_t control1_y HB_UNUSED,\n+               hb_position_t control2_x HB_UNUSED, hb_position_t control2_y HB_UNUSED,\n+               hb_position_t to_x HB_UNUSED, hb_position_t to_y HB_UNUSED,\n+               void *user_data HB_UNUSED) {}\n+\n+static void\n+_close_path_nil (void *user_data HB_UNUSED) {}\n+\n+\/**\n+ * hb_draw_funcs_create:\n+ *\n+ * Creates a new draw callbacks object.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+hb_draw_funcs_t *\n+hb_draw_funcs_create ()\n+{\n+  hb_draw_funcs_t *funcs;\n+  if (unlikely (!(funcs = hb_object_create<hb_draw_funcs_t> ())))\n+    return const_cast<hb_draw_funcs_t *> (&Null (hb_draw_funcs_t));\n+\n+  funcs->move_to = (hb_draw_move_to_func_t) _move_to_nil;\n+  funcs->line_to = (hb_draw_line_to_func_t) _line_to_nil;\n+  funcs->quadratic_to = (hb_draw_quadratic_to_func_t) _quadratic_to_nil;\n+  funcs->is_quadratic_to_set = false;\n+  funcs->cubic_to = (hb_draw_cubic_to_func_t) _cubic_to_nil;\n+  funcs->close_path = (hb_draw_close_path_func_t) _close_path_nil;\n+  return funcs;\n+}\n+\n+\/**\n+ * hb_draw_funcs_reference:\n+ * @funcs: draw functions\n+ *\n+ * Add to callbacks object refcount.\n+ *\n+ * Returns: The same object.\n+ * Since: EXPERIMENTAL\n+ **\/\n+hb_draw_funcs_t *\n+hb_draw_funcs_reference (hb_draw_funcs_t *funcs)\n+{\n+  return hb_object_reference (funcs);\n+}\n+\n+\/**\n+ * hb_draw_funcs_destroy:\n+ * @funcs: draw functions\n+ *\n+ * Decreases refcount of callbacks object and deletes the object if it reaches\n+ * to zero.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+void\n+hb_draw_funcs_destroy (hb_draw_funcs_t *funcs)\n+{\n+  if (!hb_object_destroy (funcs)) return;\n+\n+  free (funcs);\n+}\n+\n+\/**\n+ * hb_draw_funcs_make_immutable:\n+ * @funcs: draw functions\n+ *\n+ * Makes funcs object immutable.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+void\n+hb_draw_funcs_make_immutable (hb_draw_funcs_t *funcs)\n+{\n+  if (hb_object_is_immutable (funcs))\n+    return;\n+\n+  hb_object_make_immutable (funcs);\n+}\n+\n+\/**\n+ * hb_draw_funcs_is_immutable:\n+ * @funcs: draw functions\n+ *\n+ * Checks whether funcs is immutable.\n+ *\n+ * Returns: If is immutable.\n+ * Since: EXPERIMENTAL\n+ **\/\n+hb_bool_t\n+hb_draw_funcs_is_immutable (hb_draw_funcs_t *funcs)\n+{\n+  return hb_object_is_immutable (funcs);\n+}\n+\n+\/**\n+ * hb_font_draw_glyph:\n+ * @font: a font object\n+ * @glyph: a glyph id\n+ * @funcs: draw callbacks object\n+ * @user_data: parameter you like be passed to the callbacks when are called\n+ *\n+ * Draw a glyph.\n+ *\n+ * Returns: Whether the font had the glyph and the operation completed successfully.\n+ * Since: EXPERIMENTAL\n+ **\/\n+hb_bool_t\n+hb_font_draw_glyph (hb_font_t *font, hb_codepoint_t glyph,\n+                    const hb_draw_funcs_t *funcs,\n+                    void *user_data)\n+{\n+  if (unlikely (funcs == &Null (hb_draw_funcs_t) ||\n+                glyph >= font->face->get_num_glyphs ()))\n+    return false;\n+\n+  draw_helper_t draw_helper (funcs, user_data);\n+  if (font->face->table.glyf->get_path (font, glyph, draw_helper)) return true;\n+#ifndef HB_NO_CFF\n+  if (font->face->table.cff1->get_path (font, glyph, draw_helper)) return true;\n+  if (font->face->table.cff2->get_path (font, glyph, draw_helper)) return true;\n+#endif\n+\n+  return false;\n+}\n+\n+#endif\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-draw.cc","additions":261,"deletions":0,"binary":false,"changes":261,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright © 2019-2020  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_H_IN\n+#error \"Include <hb.h> instead.\"\n+#endif\n+\n+#ifndef HB_DRAW_H\n+#define HB_DRAW_H\n+\n+#include \"hb.h\"\n+\n+HB_BEGIN_DECLS\n+\n+#ifdef HB_EXPERIMENTAL_API\n+typedef void (*hb_draw_move_to_func_t) (hb_position_t to_x, hb_position_t to_y, void *user_data);\n+typedef void (*hb_draw_line_to_func_t) (hb_position_t to_x, hb_position_t to_y, void *user_data);\n+typedef void (*hb_draw_quadratic_to_func_t) (hb_position_t control_x, hb_position_t control_y,\n+                                             hb_position_t to_x, hb_position_t to_y,\n+                                             void *user_data);\n+typedef void (*hb_draw_cubic_to_func_t) (hb_position_t control1_x, hb_position_t control1_y,\n+                                         hb_position_t control2_x, hb_position_t control2_y,\n+                                         hb_position_t to_x, hb_position_t to_y,\n+                                         void *user_data);\n+typedef void (*hb_draw_close_path_func_t) (void *user_data);\n+\n+\/**\n+ * hb_draw_funcs_t:\n+ *\n+ * Glyph draw callbacks.\n+ *\n+ * _move_to, _line_to and _cubic_to calls are nessecary to be defined but we\n+ * translate _quadratic_to calls to _cubic_to if the callback isn't defined.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+typedef struct hb_draw_funcs_t hb_draw_funcs_t;\n+\n+HB_EXTERN void\n+hb_draw_funcs_set_move_to_func (hb_draw_funcs_t        *funcs,\n+                                hb_draw_move_to_func_t  move_to);\n+\n+HB_EXTERN void\n+hb_draw_funcs_set_line_to_func (hb_draw_funcs_t        *funcs,\n+                                hb_draw_line_to_func_t  line_to);\n+\n+HB_EXTERN void\n+hb_draw_funcs_set_quadratic_to_func (hb_draw_funcs_t             *funcs,\n+                                     hb_draw_quadratic_to_func_t  quadratic_to);\n+\n+HB_EXTERN void\n+hb_draw_funcs_set_cubic_to_func (hb_draw_funcs_t         *funcs,\n+                                 hb_draw_cubic_to_func_t  cubic_to);\n+\n+HB_EXTERN void\n+hb_draw_funcs_set_close_path_func (hb_draw_funcs_t           *funcs,\n+                                   hb_draw_close_path_func_t  close_path);\n+\n+HB_EXTERN hb_draw_funcs_t *\n+hb_draw_funcs_create (void);\n+\n+HB_EXTERN hb_draw_funcs_t *\n+hb_draw_funcs_reference (hb_draw_funcs_t *funcs);\n+\n+HB_EXTERN void\n+hb_draw_funcs_destroy (hb_draw_funcs_t *funcs);\n+\n+HB_EXTERN void\n+hb_draw_funcs_make_immutable (hb_draw_funcs_t *funcs);\n+\n+HB_EXTERN hb_bool_t\n+hb_draw_funcs_is_immutable (hb_draw_funcs_t *funcs);\n+#endif\n+\n+HB_END_DECLS\n+\n+#endif \/* HB_DRAW_H *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-draw.h","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright © 2020  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_DRAW_HH\n+#define HB_DRAW_HH\n+\n+#include \"hb.hh\"\n+\n+#ifdef HB_EXPERIMENTAL_API\n+struct hb_draw_funcs_t\n+{\n+  hb_object_header_t header;\n+\n+  hb_draw_move_to_func_t move_to;\n+  hb_draw_line_to_func_t line_to;\n+  hb_draw_quadratic_to_func_t quadratic_to;\n+  bool is_quadratic_to_set;\n+  hb_draw_cubic_to_func_t cubic_to;\n+  hb_draw_close_path_func_t close_path;\n+};\n+\n+struct draw_helper_t\n+{\n+  draw_helper_t (const hb_draw_funcs_t *funcs_, void *user_data_)\n+  {\n+    funcs = funcs_;\n+    user_data = user_data_;\n+    path_open = false;\n+    path_start_x = current_x = path_start_y = current_y = 0;\n+  }\n+  ~draw_helper_t () { end_path (); }\n+\n+  void move_to (hb_position_t x, hb_position_t y)\n+  {\n+    if (path_open) end_path ();\n+    current_x = path_start_x = x;\n+    current_y = path_start_y = y;\n+  }\n+\n+  void line_to (hb_position_t x, hb_position_t y)\n+  {\n+    if (equal_to_current (x, y)) return;\n+    if (!path_open) start_path ();\n+    funcs->line_to (x, y, user_data);\n+    current_x = x;\n+    current_y = y;\n+  }\n+\n+  void\n+  quadratic_to (hb_position_t control_x, hb_position_t control_y,\n+                hb_position_t to_x, hb_position_t to_y)\n+  {\n+    if (equal_to_current (control_x, control_y) && equal_to_current (to_x, to_y))\n+      return;\n+    if (!path_open) start_path ();\n+    if (funcs->is_quadratic_to_set)\n+      funcs->quadratic_to (control_x, control_y, to_x, to_y, user_data);\n+    else\n+      funcs->cubic_to (roundf ((current_x + 2.f * control_x) \/ 3.f),\n+                       roundf ((current_y + 2.f * control_y) \/ 3.f),\n+                       roundf ((to_x + 2.f * control_x) \/ 3.f),\n+                       roundf ((to_y + 2.f * control_y) \/ 3.f),\n+                       to_x, to_y, user_data);\n+    current_x = to_x;\n+    current_y = to_y;\n+  }\n+\n+  void\n+  cubic_to (hb_position_t control1_x, hb_position_t control1_y,\n+            hb_position_t control2_x, hb_position_t control2_y,\n+            hb_position_t to_x, hb_position_t to_y)\n+  {\n+    if (equal_to_current (control1_x, control1_y) &&\n+        equal_to_current (control2_x, control2_y) &&\n+        equal_to_current (to_x, to_y))\n+      return;\n+    if (!path_open) start_path ();\n+    funcs->cubic_to (control1_x, control1_y, control2_x, control2_y, to_x, to_y, user_data);\n+    current_x = to_x;\n+    current_y = to_y;\n+  }\n+\n+  void end_path ()\n+  {\n+    if (path_open)\n+    {\n+      if ((path_start_x != current_x) || (path_start_y != current_y))\n+        funcs->line_to (path_start_x, path_start_y, user_data);\n+      funcs->close_path (user_data);\n+    }\n+    path_open = false;\n+    path_start_x = current_x = path_start_y = current_y = 0;\n+  }\n+\n+  protected:\n+  bool equal_to_current (hb_position_t x, hb_position_t y)\n+  { return current_x == x && current_y == y; }\n+\n+  void start_path ()\n+  {\n+    if (path_open) end_path ();\n+    path_open = true;\n+    funcs->move_to (path_start_x, path_start_y, user_data);\n+  }\n+\n+  hb_position_t path_start_x;\n+  hb_position_t path_start_y;\n+\n+  hb_position_t current_x;\n+  hb_position_t current_y;\n+\n+  bool path_open;\n+  const hb_draw_funcs_t *funcs;\n+  void *user_data;\n+};\n+#endif\n+\n+#endif \/* HB_DRAW_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-draw.hh","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -1,632 +0,0 @@\n-\/*\n- * Copyright © 2017  Google, Inc.\n- *\n- *  This is part of HarfBuzz, a text shaping library.\n- *\n- * Permission is hereby granted, without written agreement and without\n- * license or royalty fees, to use, copy, modify, and distribute this\n- * software and its documentation for any purpose, provided that the\n- * above copyright notice and the following two paragraphs appear in\n- * all copies of this software.\n- *\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n- * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n- * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n- * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n- * DAMAGE.\n- *\n- * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n- * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n- * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n- * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n- *\n- * Google Author(s): Behdad Esfahbod\n- *\/\n-\n-#ifndef HB_DSALGS_HH\n-#define HB_DSALGS_HH\n-\n-#include \"hb.hh\"\n-#include \"hb-null.hh\"\n-\n-\n-\/* Void! For when we need a expression-type of void. *\/\n-typedef const struct _hb_void_t *hb_void_t;\n-#define HB_VOID ((const _hb_void_t *) nullptr)\n-\n-\n-\/*\n- * Bithacks.\n- *\/\n-\n-\/* Return the number of 1 bits in v. *\/\n-template <typename T>\n-static inline HB_CONST_FUNC unsigned int\n-hb_popcount (T v)\n-{\n-#if (defined(__GNUC__) && (__GNUC__ >= 4)) || defined(__clang__)\n-  if (sizeof (T) <= sizeof (unsigned int))\n-    return __builtin_popcount (v);\n-\n-  if (sizeof (T) <= sizeof (unsigned long))\n-    return __builtin_popcountl (v);\n-\n-  if (sizeof (T) <= sizeof (unsigned long long))\n-    return __builtin_popcountll (v);\n-#endif\n-\n-  if (sizeof (T) <= 4)\n-  {\n-    \/* \"HACKMEM 169\" *\/\n-    uint32_t y;\n-    y = (v >> 1) &033333333333;\n-    y = v - y - ((y >>1) & 033333333333);\n-    return (((y + (y >> 3)) & 030707070707) % 077);\n-  }\n-\n-  if (sizeof (T) == 8)\n-  {\n-    unsigned int shift = 32;\n-    return hb_popcount<uint32_t> ((uint32_t) v) + hb_popcount ((uint32_t) (v >> shift));\n-  }\n-\n-  if (sizeof (T) == 16)\n-  {\n-    unsigned int shift = 64;\n-    return hb_popcount<uint64_t> ((uint64_t) v) + hb_popcount ((uint64_t) (v >> shift));\n-  }\n-\n-  assert (0);\n-  return 0; \/* Shut up stupid compiler. *\/\n-}\n-\n-\/* Returns the number of bits needed to store number *\/\n-template <typename T>\n-static inline HB_CONST_FUNC unsigned int\n-hb_bit_storage (T v)\n-{\n-  if (unlikely (!v)) return 0;\n-\n-#if (defined(__GNUC__) && (__GNUC__ >= 4)) || defined(__clang__)\n-  if (sizeof (T) <= sizeof (unsigned int))\n-    return sizeof (unsigned int) * 8 - __builtin_clz (v);\n-\n-  if (sizeof (T) <= sizeof (unsigned long))\n-    return sizeof (unsigned long) * 8 - __builtin_clzl (v);\n-\n-  if (sizeof (T) <= sizeof (unsigned long long))\n-    return sizeof (unsigned long long) * 8 - __builtin_clzll (v);\n-#endif\n-\n-#if (defined(_MSC_VER) && _MSC_VER >= 1500) || defined(__MINGW32__)\n-  if (sizeof (T) <= sizeof (unsigned int))\n-  {\n-    unsigned long where;\n-    _BitScanReverse (&where, v);\n-    return 1 + where;\n-  }\n-# if defined(_WIN64)\n-  if (sizeof (T) <= 8)\n-  {\n-    unsigned long where;\n-    _BitScanReverse64 (&where, v);\n-    return 1 + where;\n-  }\n-# endif\n-#endif\n-\n-  if (sizeof (T) <= 4)\n-  {\n-    \/* \"bithacks\" *\/\n-    const unsigned int b[] = {0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000};\n-    const unsigned int S[] = {1, 2, 4, 8, 16};\n-    unsigned int r = 0;\n-    for (int i = 4; i >= 0; i--)\n-      if (v & b[i])\n-      {\n-        v >>= S[i];\n-        r |= S[i];\n-      }\n-    return r + 1;\n-  }\n-  if (sizeof (T) <= 8)\n-  {\n-    \/* \"bithacks\" *\/\n-    const uint64_t b[] = {0x2ULL, 0xCULL, 0xF0ULL, 0xFF00ULL, 0xFFFF0000ULL, 0xFFFFFFFF00000000ULL};\n-    const unsigned int S[] = {1, 2, 4, 8, 16, 32};\n-    unsigned int r = 0;\n-    for (int i = 5; i >= 0; i--)\n-      if (v & b[i])\n-      {\n-        v >>= S[i];\n-        r |= S[i];\n-      }\n-    return r + 1;\n-  }\n-  if (sizeof (T) == 16)\n-  {\n-    unsigned int shift = 64;\n-    return (v >> shift) ? hb_bit_storage<uint64_t> ((uint64_t) (v >> shift)) + shift :\n-                          hb_bit_storage<uint64_t> ((uint64_t) v);\n-  }\n-\n-  assert (0);\n-  return 0; \/* Shut up stupid compiler. *\/\n-}\n-\n-\/* Returns the number of zero bits in the least significant side of v *\/\n-template <typename T>\n-static inline HB_CONST_FUNC unsigned int\n-hb_ctz (T v)\n-{\n-  if (unlikely (!v)) return 0;\n-\n-#if (defined(__GNUC__) && (__GNUC__ >= 4)) || defined(__clang__)\n-  if (sizeof (T) <= sizeof (unsigned int))\n-    return __builtin_ctz (v);\n-\n-  if (sizeof (T) <= sizeof (unsigned long))\n-    return __builtin_ctzl (v);\n-\n-  if (sizeof (T) <= sizeof (unsigned long long))\n-    return __builtin_ctzll (v);\n-#endif\n-\n-#if (defined(_MSC_VER) && _MSC_VER >= 1500) || defined(__MINGW32__)\n-  if (sizeof (T) <= sizeof (unsigned int))\n-  {\n-    unsigned long where;\n-    _BitScanForward (&where, v);\n-    return where;\n-  }\n-# if defined(_WIN64)\n-  if (sizeof (T) <= 8)\n-  {\n-    unsigned long where;\n-    _BitScanForward64 (&where, v);\n-    return where;\n-  }\n-# endif\n-#endif\n-\n-  if (sizeof (T) <= 4)\n-  {\n-    \/* \"bithacks\" *\/\n-    unsigned int c = 32;\n-    v &= - (int32_t) v;\n-    if (v) c--;\n-    if (v & 0x0000FFFF) c -= 16;\n-    if (v & 0x00FF00FF) c -= 8;\n-    if (v & 0x0F0F0F0F) c -= 4;\n-    if (v & 0x33333333) c -= 2;\n-    if (v & 0x55555555) c -= 1;\n-    return c;\n-  }\n-  if (sizeof (T) <= 8)\n-  {\n-    \/* \"bithacks\" *\/\n-    unsigned int c = 64;\n-    v &= - (int64_t) (v);\n-    if (v) c--;\n-    if (v & 0x00000000FFFFFFFFULL) c -= 32;\n-    if (v & 0x0000FFFF0000FFFFULL) c -= 16;\n-    if (v & 0x00FF00FF00FF00FFULL) c -= 8;\n-    if (v & 0x0F0F0F0F0F0F0F0FULL) c -= 4;\n-    if (v & 0x3333333333333333ULL) c -= 2;\n-    if (v & 0x5555555555555555ULL) c -= 1;\n-    return c;\n-  }\n-  if (sizeof (T) == 16)\n-  {\n-    unsigned int shift = 64;\n-    return (uint64_t) v ? hb_bit_storage<uint64_t> ((uint64_t) v) :\n-                          hb_bit_storage<uint64_t> ((uint64_t) (v >> shift)) + shift;\n-  }\n-\n-  assert (0);\n-  return 0; \/* Shut up stupid compiler. *\/\n-}\n-\n-\n-\/*\n- * Tiny stuff.\n- *\/\n-\n-template <typename T>\n-static inline T* hb_addressof (T& arg)\n-{\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wcast-align\"\n-  \/* https:\/\/en.cppreference.com\/w\/cpp\/memory\/addressof *\/\n-  return reinterpret_cast<T*>(\n-           &const_cast<char&>(\n-              reinterpret_cast<const volatile char&>(arg)));\n-#pragma GCC diagnostic pop\n-}\n-\n-\/* ASCII tag\/character handling *\/\n-static inline bool ISALPHA (unsigned char c)\n-{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'); }\n-static inline bool ISALNUM (unsigned char c)\n-{ return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'); }\n-static inline bool ISSPACE (unsigned char c)\n-{ return c == ' ' || c =='\\f'|| c =='\\n'|| c =='\\r'|| c =='\\t'|| c =='\\v'; }\n-static inline unsigned char TOUPPER (unsigned char c)\n-{ return (c >= 'a' && c <= 'z') ? c - 'a' + 'A' : c; }\n-static inline unsigned char TOLOWER (unsigned char c)\n-{ return (c >= 'A' && c <= 'Z') ? c - 'A' + 'a' : c; }\n-\n-#undef MIN\n-template <typename Type>\n-static inline Type MIN (const Type &a, const Type &b) { return a < b ? a : b; }\n-\n-#undef MAX\n-template <typename Type>\n-static inline Type MAX (const Type &a, const Type &b) { return a > b ? a : b; }\n-\n-static inline unsigned int DIV_CEIL (const unsigned int a, unsigned int b)\n-{ return (a + (b - 1)) \/ b; }\n-\n-\n-#undef  ARRAY_LENGTH\n-template <typename Type, unsigned int n>\n-static inline unsigned int ARRAY_LENGTH (const Type (&)[n]) { return n; }\n-\/* A const version, but does not detect erratically being called on pointers. *\/\n-#define ARRAY_LENGTH_CONST(__array) ((signed int) (sizeof (__array) \/ sizeof (__array[0])))\n-\n-\n-static inline int\n-hb_memcmp (const void *a, const void *b, unsigned int len)\n-{\n-  \/* It's illegal to pass NULL to memcmp(), even if len is zero.\n-   * So, wrap it.\n-   * https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=23878 *\/\n-  if (!len) return 0;\n-  return memcmp (a, b, len);\n-}\n-\n-static inline bool\n-hb_unsigned_mul_overflows (unsigned int count, unsigned int size)\n-{\n-  return (size > 0) && (count >= ((unsigned int) -1) \/ size);\n-}\n-\n-static inline unsigned int\n-hb_ceil_to_4 (unsigned int v)\n-{\n-  return ((v - 1) | 3) + 1;\n-}\n-\n-template <typename T> struct hb_is_signed;\n-\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1535 *\/\n-template <> struct hb_is_signed<int8_t> { enum { value = true }; };\n-template <> struct hb_is_signed<int16_t> { enum { value = true }; };\n-template <> struct hb_is_signed<int32_t> { enum { value = true }; };\n-template <> struct hb_is_signed<int64_t> { enum { value = true }; };\n-template <> struct hb_is_signed<uint8_t> { enum { value = false }; };\n-template <> struct hb_is_signed<uint16_t> { enum { value = false }; };\n-template <> struct hb_is_signed<uint32_t> { enum { value = false }; };\n-template <> struct hb_is_signed<uint64_t> { enum { value = false }; };\n-\n-template <typename T> static inline bool\n-hb_in_range (T u, T lo, T hi)\n-{\n-  \/* The sizeof() is here to force template instantiation.\n-   * I'm sure there are better ways to do this but can't think of\n-   * one right now.  Declaring a variable won't work as HB_UNUSED\n-   * is unusable on some platforms and unused types are less likely\n-   * to generate a warning than unused variables. *\/\n-  static_assert (!hb_is_signed<T>::value, \"\");\n-\n-  \/* The casts below are important as if T is smaller than int,\n-   * the subtract results will become a signed int! *\/\n-  return (T)(u - lo) <= (T)(hi - lo);\n-}\n-template <typename T> static inline bool\n-hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2)\n-{\n-  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2);\n-}\n-template <typename T> static inline bool\n-hb_in_ranges (T u, T lo1, T hi1, T lo2, T hi2, T lo3, T hi3)\n-{\n-  return hb_in_range (u, lo1, hi1) || hb_in_range (u, lo2, hi2) || hb_in_range (u, lo3, hi3);\n-}\n-\n-\n-\/*\n- * Sort and search.\n- *\/\n-\n-static inline void *\n-hb_bsearch (const void *key, const void *base,\n-            size_t nmemb, size_t size,\n-            int (*compar)(const void *_key, const void *_item))\n-{\n-  int min = 0, max = (int) nmemb - 1;\n-  while (min <= max)\n-  {\n-    int mid = (min + max) \/ 2;\n-    const void *p = (const void *) (((const char *) base) + (mid * size));\n-    int c = compar (key, p);\n-    if (c < 0)\n-      max = mid - 1;\n-    else if (c > 0)\n-      min = mid + 1;\n-    else\n-      return (void *) p;\n-  }\n-  return nullptr;\n-}\n-\n-static inline void *\n-hb_bsearch_r (const void *key, const void *base,\n-              size_t nmemb, size_t size,\n-              int (*compar)(const void *_key, const void *_item, void *_arg),\n-              void *arg)\n-{\n-  int min = 0, max = (int) nmemb - 1;\n-  while (min <= max)\n-  {\n-    int mid = ((unsigned int) min + (unsigned int) max) \/ 2;\n-    const void *p = (const void *) (((const char *) base) + (mid * size));\n-    int c = compar (key, p, arg);\n-    if (c < 0)\n-      max = mid - 1;\n-    else if (c > 0)\n-      min = mid + 1;\n-    else\n-      return (void *) p;\n-  }\n-  return nullptr;\n-}\n-\n-\n-\/* From https:\/\/github.com\/noporpoise\/sort_r\n- * With following modifications:\n- *\n- * 10 November 2018:\n- * https:\/\/github.com\/noporpoise\/sort_r\/issues\/7\n- *\/\n-\n-\/* Isaac Turner 29 April 2014 Public Domain *\/\n-\n-\/*\n-\n-hb_sort_r function to be exported.\n-\n-Parameters:\n-  base is the array to be sorted\n-  nel is the number of elements in the array\n-  width is the size in bytes of each element of the array\n-  compar is the comparison function\n-  arg is a pointer to be passed to the comparison function\n-\n-void hb_sort_r(void *base, size_t nel, size_t width,\n-               int (*compar)(const void *_a, const void *_b, void *_arg),\n-               void *arg);\n-*\/\n-\n-\n-\/* swap a, b iff a>b *\/\n-\/* __restrict is same as restrict but better support on old machines *\/\n-static int sort_r_cmpswap(char *__restrict a, char *__restrict b, size_t w,\n-                          int (*compar)(const void *_a, const void *_b,\n-                                        void *_arg),\n-                          void *arg)\n-{\n-  char tmp, *end = a+w;\n-  if(compar(a, b, arg) > 0) {\n-    for(; a < end; a++, b++) { tmp = *a; *a = *b; *b = tmp; }\n-    return 1;\n-  }\n-  return 0;\n-}\n-\n-\/* Note: quicksort is not stable, equivalent values may be swapped *\/\n-static inline void sort_r_simple(void *base, size_t nel, size_t w,\n-                                 int (*compar)(const void *_a, const void *_b,\n-                                               void *_arg),\n-                                 void *arg)\n-{\n-  char *b = (char *)base, *end = b + nel*w;\n-  if(nel < 7) {\n-    \/* Insertion sort for arbitrarily small inputs *\/\n-    char *pi, *pj;\n-    for(pi = b+w; pi < end; pi += w) {\n-      for(pj = pi; pj > b && sort_r_cmpswap(pj-w,pj,w,compar,arg); pj -= w) {}\n-    }\n-  }\n-  else\n-  {\n-    \/* nel > 6; Quicksort *\/\n-\n-    \/* Use median of first, middle and last items as pivot *\/\n-    char *x, *y, *xend, ch;\n-    char *pl, *pm, *pr;\n-    char *last = b+w*(nel-1), *tmp;\n-    char *l[3];\n-    l[0] = b;\n-    l[1] = b+w*(nel\/2);\n-    l[2] = last;\n-\n-    if(compar(l[0],l[1],arg) > 0) { tmp=l[0]; l[0]=l[1]; l[1]=tmp; }\n-    if(compar(l[1],l[2],arg) > 0) {\n-      tmp=l[1]; l[1]=l[2]; l[2]=tmp; \/* swap(l[1],l[2]) *\/\n-      if(compar(l[0],l[1],arg) > 0) { tmp=l[0]; l[0]=l[1]; l[1]=tmp; }\n-    }\n-\n-    \/* swap l[id], l[2] to put pivot as last element *\/\n-    for(x = l[1], y = last, xend = x+w; x<xend; x++, y++) {\n-      ch = *x; *x = *y; *y = ch;\n-    }\n-\n-    pl = b;\n-    pr = last;\n-\n-    while(pl < pr) {\n-      pm = pl+((pr-pl+1)>>1);\n-      for(; pl < pm; pl += w) {\n-        if(sort_r_cmpswap(pl, pr, w, compar, arg)) {\n-          pr -= w; \/* pivot now at pl *\/\n-          break;\n-        }\n-      }\n-      pm = pl+((pr-pl)>>1);\n-      for(; pm < pr; pr -= w) {\n-        if(sort_r_cmpswap(pl, pr, w, compar, arg)) {\n-          pl += w; \/* pivot now at pr *\/\n-          break;\n-        }\n-      }\n-    }\n-\n-    sort_r_simple(b, (pl-b)\/w, w, compar, arg);\n-    sort_r_simple(pl+w, (end-(pl+w))\/w, w, compar, arg);\n-  }\n-}\n-\n-static inline void hb_sort_r(void *base, size_t nel, size_t width,\n-                             int (*compar)(const void *_a, const void *_b, void *_arg),\n-                             void *arg)\n-{\n-    sort_r_simple(base, nel, width, compar, arg);\n-}\n-\n-\n-template <typename T, typename T2> static inline void\n-hb_stable_sort (T *array, unsigned int len, int(*compar)(const T *, const T *), T2 *array2)\n-{\n-  for (unsigned int i = 1; i < len; i++)\n-  {\n-    unsigned int j = i;\n-    while (j && compar (&array[j - 1], &array[i]) > 0)\n-      j--;\n-    if (i == j)\n-      continue;\n-    \/* Move item i to occupy place for item j, shift what's in between. *\/\n-    {\n-      T t = array[i];\n-      memmove (&array[j + 1], &array[j], (i - j) * sizeof (T));\n-      array[j] = t;\n-    }\n-    if (array2)\n-    {\n-      T2 t = array2[i];\n-      memmove (&array2[j + 1], &array2[j], (i - j) * sizeof (T2));\n-      array2[j] = t;\n-    }\n-  }\n-}\n-\n-template <typename T> static inline void\n-hb_stable_sort (T *array, unsigned int len, int(*compar)(const T *, const T *))\n-{\n-  hb_stable_sort (array, len, compar, (int *) nullptr);\n-}\n-\n-static inline hb_bool_t\n-hb_codepoint_parse (const char *s, unsigned int len, int base, hb_codepoint_t *out)\n-{\n-  \/* Pain because we don't know whether s is nul-terminated. *\/\n-  char buf[64];\n-  len = MIN (ARRAY_LENGTH (buf) - 1, len);\n-  strncpy (buf, s, len);\n-  buf[len] = '\\0';\n-\n-  char *end;\n-  errno = 0;\n-  unsigned long v = strtoul (buf, &end, base);\n-  if (errno) return false;\n-  if (*end) return false;\n-  *out = v;\n-  return true;\n-}\n-\n-\n-struct HbOpOr\n-{\n-  static constexpr bool passthru_left = true;\n-  static constexpr bool passthru_right = true;\n-  template <typename T> static void process (T &o, const T &a, const T &b) { o = a | b; }\n-};\n-struct HbOpAnd\n-{\n-  static constexpr bool passthru_left = false;\n-  static constexpr bool passthru_right = false;\n-  template <typename T> static void process (T &o, const T &a, const T &b) { o = a & b; }\n-};\n-struct HbOpMinus\n-{\n-  static constexpr bool passthru_left = true;\n-  static constexpr bool passthru_right = false;\n-  template <typename T> static void process (T &o, const T &a, const T &b) { o = a & ~b; }\n-};\n-struct HbOpXor\n-{\n-  static constexpr bool passthru_left = true;\n-  static constexpr bool passthru_right = true;\n-  template <typename T> static void process (T &o, const T &a, const T &b) { o = a ^ b; }\n-};\n-\n-\n-\/* Compiler-assisted vectorization. *\/\n-\n-\/* Type behaving similar to vectorized vars defined using __attribute__((vector_size(...))),\n- * using vectorized operations if HB_VECTOR_SIZE is set to **bit** numbers (eg 128).\n- * Define that to 0 to disable. *\/\n-template <typename elt_t, unsigned int byte_size>\n-struct hb_vector_size_t\n-{\n-  elt_t& operator [] (unsigned int i) { return u.v[i]; }\n-  const elt_t& operator [] (unsigned int i) const { return u.v[i]; }\n-\n-  void clear (unsigned char v = 0) { memset (this, v, sizeof (*this)); }\n-\n-  template <class Op>\n-  hb_vector_size_t process (const hb_vector_size_t &o) const\n-  {\n-    hb_vector_size_t r;\n-#if HB_VECTOR_SIZE\n-    if (HB_VECTOR_SIZE && 0 == (byte_size * 8) % HB_VECTOR_SIZE)\n-      for (unsigned int i = 0; i < ARRAY_LENGTH (u.vec); i++)\n-        Op::process (r.u.vec[i], u.vec[i], o.u.vec[i]);\n-    else\n-#endif\n-      for (unsigned int i = 0; i < ARRAY_LENGTH (u.v); i++)\n-        Op::process (r.u.v[i], u.v[i], o.u.v[i]);\n-    return r;\n-  }\n-  hb_vector_size_t operator | (const hb_vector_size_t &o) const\n-  { return process<HbOpOr> (o); }\n-  hb_vector_size_t operator & (const hb_vector_size_t &o) const\n-  { return process<HbOpAnd> (o); }\n-  hb_vector_size_t operator ^ (const hb_vector_size_t &o) const\n-  { return process<HbOpXor> (o); }\n-  hb_vector_size_t operator ~ () const\n-  {\n-    hb_vector_size_t r;\n-#if HB_VECTOR_SIZE && 0\n-    if (HB_VECTOR_SIZE && 0 == (byte_size * 8) % HB_VECTOR_SIZE)\n-      for (unsigned int i = 0; i < ARRAY_LENGTH (u.vec); i++)\n-        r.u.vec[i] = ~u.vec[i];\n-    else\n-#endif\n-    for (unsigned int i = 0; i < ARRAY_LENGTH (u.v); i++)\n-      r.u.v[i] = ~u.v[i];\n-    return r;\n-  }\n-\n-  private:\n-  static_assert (byte_size \/ sizeof (elt_t) * sizeof (elt_t) == byte_size, \"\");\n-  union {\n-    elt_t v[byte_size \/ sizeof (elt_t)];\n-#if HB_VECTOR_SIZE\n-    hb_vector_size_impl_t vec[byte_size \/ sizeof (hb_vector_size_impl_t)];\n-#endif\n-  } u;\n-};\n-\n-\n-#endif \/* HB_DSALGS_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-dsalgs.hh","additions":0,"deletions":632,"binary":false,"changes":632,"status":"deleted"},{"patch":"@@ -203,1 +203,3 @@\n-  hb_face_for_data_closure_t *closure = _hb_face_for_data_closure_create (hb_sanitize_context_t ().sanitize_blob<OT::OpenTypeFontFile> (hb_blob_reference (blob)), index);\n+  blob = hb_sanitize_context_t ().sanitize_blob<OT::OpenTypeFontFile> (hb_blob_reference (blob));\n+\n+  hb_face_for_data_closure_t *closure = _hb_face_for_data_closure_create (blob, index);\n@@ -206,0 +208,2 @@\n+  {\n+    hb_blob_destroy (blob);\n@@ -207,0 +211,1 @@\n+  }\n@@ -229,1 +234,1 @@\n-  return const_cast<hb_face_t *> (&Null(hb_face_t));\n+  return const_cast<hb_face_t *> (&Null (hb_face_t));\n@@ -370,0 +375,3 @@\n+  if (unlikely (tag == HB_TAG_NONE))\n+    return hb_blob_get_empty ();\n+\n@@ -534,0 +542,1 @@\n+#ifndef HB_NO_FACE_COLLECT_UNICODES\n@@ -545,1 +554,1 @@\n-  face->table.cmap->collect_unicodes (out);\n+  face->table.cmap->collect_unicodes (out, face->get_num_glyphs ());\n@@ -547,1 +556,0 @@\n-\n@@ -563,1 +571,0 @@\n-\n@@ -580,1 +587,1 @@\n-\n+#endif\n@@ -717,0 +724,1 @@\n+\n@@ -718,0 +726,2 @@\n+  if (data->tables.in_error())\n+    return false;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-face.cc","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    if (unlikely (ret == (unsigned int) -1))\n+    if (unlikely (ret == UINT_MAX))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-face.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#ifndef HB_NO_FALLBACK_SHAPE\n@@ -123,0 +124,2 @@\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-fallback-shape.cc","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+#include \"hb-ot-var-avar-table.hh\"\n+#include \"hb-ot-var-fvar-table.hh\"\n+\n@@ -358,0 +361,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -376,0 +380,1 @@\n+#endif\n@@ -675,1 +680,2 @@\n-  if (hb_object_is_immutable (ffuncs)) {                                 \\\n+  if (hb_object_is_immutable (ffuncs))                                   \\\n+  {                                                                      \\\n@@ -792,0 +798,23 @@\n+\/**\n+ * hb_font_get_nominal_glyphs:\n+ * @font: a font.\n+ *\n+ *\n+ *\n+ * Return value:\n+ *\n+ * Since: 2.6.3\n+ **\/\n+unsigned int\n+hb_font_get_nominal_glyphs (hb_font_t *font,\n+                            unsigned int count,\n+                            const hb_codepoint_t *first_unicode,\n+                            unsigned int unicode_stride,\n+                            hb_codepoint_t *first_glyph,\n+                            unsigned int glyph_stride)\n+{\n+  return font->get_nominal_glyphs (count,\n+                                   first_unicode, unicode_stride,\n+                                   first_glyph, glyph_stride);\n+}\n+\n@@ -939,1 +968,0 @@\n- * Deprecated: 2.0.0\n@@ -948,0 +976,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -967,0 +996,1 @@\n+#endif\n@@ -1188,1 +1218,0 @@\n- * Deprecated: 2.0.0\n@@ -1301,0 +1330,2 @@\n+  1<<16, \/* x_mult *\/\n+  1<<16, \/* y_mult *\/\n@@ -1308,0 +1339,1 @@\n+  nullptr, \/* design_coords *\/\n@@ -1331,0 +1363,1 @@\n+  font->x_mult = font->y_mult = 1 << 16;\n@@ -1350,0 +1383,1 @@\n+#ifndef HB_NO_OT_FONT\n@@ -1352,0 +1386,1 @@\n+#endif\n@@ -1356,0 +1391,14 @@\n+static void\n+_hb_font_adopt_var_coords (hb_font_t *font,\n+                           int *coords, \/* 2.14 normalized *\/\n+                           float *design_coords,\n+                           unsigned int coords_length)\n+{\n+  free (font->coords);\n+  free (font->design_coords);\n+\n+  font->coords = coords;\n+  font->design_coords = design_coords;\n+  font->num_coords = coords_length;\n+}\n+\n@@ -1381,0 +1430,1 @@\n+  font->mults_changed ();\n@@ -1385,4 +1435,2 @@\n-  font->num_coords = parent->num_coords;\n-  if (!font->num_coords)\n-    font->coords = nullptr;\n-  else\n+  unsigned int num_coords = parent->num_coords;\n+  if (num_coords)\n@@ -1390,4 +1438,8 @@\n-    unsigned int size = parent->num_coords * sizeof (parent->coords[0]);\n-    font->coords = (int *) malloc (size);\n-    if (unlikely (!font->coords))\n-      font->num_coords = 0;\n+    int *coords = (int *) calloc (num_coords, sizeof (parent->coords[0]));\n+    float *design_coords = (float *) calloc (num_coords, sizeof (parent->design_coords[0]));\n+    if (likely (coords && design_coords))\n+    {\n+      memcpy (coords, parent->coords, num_coords * sizeof (parent->coords[0]));\n+      memcpy (design_coords, parent->design_coords, num_coords * sizeof (parent->design_coords[0]));\n+      _hb_font_adopt_var_coords (font, coords, design_coords, num_coords);\n+    }\n@@ -1395,1 +1447,4 @@\n-      memcpy (font->coords, parent->coords, size);\n+    {\n+      free (coords);\n+      free (design_coords);\n+    }\n@@ -1413,1 +1468,1 @@\n-  return const_cast<hb_font_t *> (&Null(hb_font_t));\n+  return const_cast<hb_font_t *> (&Null (hb_font_t));\n@@ -1455,0 +1510,1 @@\n+  free (font->design_coords);\n@@ -1600,0 +1656,1 @@\n+  hb_face_make_immutable (face);\n@@ -1601,0 +1658,1 @@\n+  font->mults_changed ();\n@@ -1710,0 +1768,1 @@\n+  font->mults_changed ();\n@@ -1808,0 +1867,1 @@\n+#ifndef HB_NO_VAR\n@@ -1812,11 +1872,0 @@\n-static void\n-_hb_font_adopt_var_coords_normalized (hb_font_t *font,\n-                                      int *coords, \/* 2.14 normalized *\/\n-                                      unsigned int coords_length)\n-{\n-  free (font->coords);\n-\n-  font->coords = coords;\n-  font->num_coords = coords_length;\n-}\n-\n@@ -1845,1 +1894,6 @@\n-  if (unlikely (coords_length && !normalized))\n+  float *design_coords = coords_length ? (float *) calloc (coords_length, sizeof (float)) : nullptr;\n+\n+  if (unlikely (coords_length && !(normalized && design_coords)))\n+  {\n+    free (normalized);\n+    free (design_coords);\n@@ -1847,0 +1901,1 @@\n+  }\n@@ -1848,4 +1903,15 @@\n-  hb_ot_var_normalize_variations (font->face,\n-                                  variations, variations_length,\n-                                  normalized, coords_length);\n-  _hb_font_adopt_var_coords_normalized (font, normalized, coords_length);\n+  const OT::fvar &fvar = *font->face->table.fvar;\n+  for (unsigned int i = 0; i < variations_length; i++)\n+  {\n+    hb_ot_var_axis_info_t info;\n+    if (hb_ot_var_find_axis_info (font->face, variations[i].tag, &info) &&\n+        info.axis_index < coords_length)\n+    {\n+      float v = variations[i].value;\n+      design_coords[info.axis_index] = v;\n+      normalized[info.axis_index] = fvar.normalize_axis_value (info.axis_index, v);\n+    }\n+  }\n+  font->face->table.avar->map_coords (normalized, coords_length);\n+\n+  _hb_font_adopt_var_coords (font, normalized, design_coords, coords_length);\n@@ -1868,1 +1934,6 @@\n-  if (unlikely (coords_length && !normalized))\n+  float *design_coords = coords_length ? (float *) calloc (coords_length, sizeof (float)) : nullptr;\n+\n+  if (unlikely (coords_length && !(normalized && design_coords)))\n+  {\n+    free (normalized);\n+    free (design_coords);\n@@ -1870,0 +1941,4 @@\n+  }\n+\n+  if (coords_length)\n+    memcpy (design_coords, coords, coords_length * sizeof (font->design_coords[0]));\n@@ -1872,1 +1947,28 @@\n-  _hb_font_adopt_var_coords_normalized (font, normalized, coords_length);\n+  _hb_font_adopt_var_coords (font, normalized, design_coords, coords_length);\n+}\n+\n+\/**\n+ * hb_font_set_var_named_instance:\n+ * @font: a font.\n+ * @instance_index: named instance index.\n+ *\n+ * Sets design coords of a font from a named instance index.\n+ *\n+ * Since: 2.6.0\n+ *\/\n+void\n+hb_font_set_var_named_instance (hb_font_t *font,\n+                                unsigned instance_index)\n+{\n+  if (hb_object_is_immutable (font))\n+    return;\n+\n+  unsigned int coords_length = hb_ot_var_named_instance_get_design_coords (font->face, instance_index, nullptr, nullptr);\n+\n+  float *coords = coords_length ? (float *) calloc (coords_length, sizeof (float)) : nullptr;\n+  if (unlikely (coords_length && !coords))\n+    return;\n+\n+  hb_ot_var_named_instance_get_design_coords (font->face, instance_index, &coords_length, coords);\n+  hb_font_set_var_coords_design (font, coords, coords_length);\n+  free (coords);\n@@ -1889,1 +1991,8 @@\n-  if (unlikely (coords_length && !copy))\n+  int *unmapped = coords_length ? (int *) calloc (coords_length, sizeof (coords[0])) : nullptr;\n+  float *design_coords = coords_length ? (float *) calloc (coords_length, sizeof (design_coords[0])) : nullptr;\n+\n+  if (unlikely (coords_length && !(copy && unmapped && design_coords)))\n+  {\n+    free (copy);\n+    free (unmapped);\n+    free (design_coords);\n@@ -1891,0 +2000,1 @@\n+  }\n@@ -1893,0 +2003,1 @@\n+  {\n@@ -1894,0 +2005,8 @@\n+    memcpy (unmapped, coords, coords_length * sizeof (coords[0]));\n+  }\n+\n+  \/* Best effort design coords simulation *\/\n+  font->face->table.avar->unmap_coords (unmapped, coords_length);\n+  for (unsigned int i = 0; i < coords_length; ++i)\n+    design_coords[i] = font->face->table.fvar->unnormalize_axis_value (i, unmapped[i]);\n+  free (unmapped);\n@@ -1895,1 +2014,1 @@\n-  _hb_font_adopt_var_coords_normalized (font, copy, coords_length);\n+  _hb_font_adopt_var_coords (font, copy, design_coords, coords_length);\n@@ -1916,0 +2035,20 @@\n+#ifdef HB_EXPERIMENTAL_API\n+\/**\n+ * hb_font_get_var_coords_design:\n+ *\n+ * Return value is valid as long as variation coordinates of the font\n+ * are not modified.\n+ *\n+ * Since: EXPERIMENTAL\n+ *\/\n+const float *\n+hb_font_get_var_coords_design (hb_font_t *font,\n+                               unsigned int *length)\n+{\n+  if (length)\n+    *length = font->num_coords;\n+\n+  return font->design_coords;\n+}\n+#endif\n+#endif\n@@ -1917,0 +2056,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -2018,0 +2158,7 @@\n+  if (hb_object_is_immutable (ffuncs))\n+  {\n+    if (destroy)\n+      destroy (user_data);\n+    return;\n+  }\n+\n@@ -2039,0 +2186,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-font.cc","additions":181,"deletions":33,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"hb-draw.h\"\n@@ -160,0 +161,5 @@\n+typedef hb_position_t (*hb_font_get_glyph_kerning_func_t) (hb_font_t *font, void *font_data,\n+                                                           hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,\n+                                                           void *user_data);\n+typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t;\n+\n@@ -359,0 +365,16 @@\n+\/**\n+ * hb_font_funcs_set_glyph_h_kerning_func:\n+ * @ffuncs: font functions.\n+ * @func: (closure user_data) (destroy destroy) (scope notified):\n+ * @user_data:\n+ * @destroy:\n+ *\n+ *\n+ *\n+ * Since: 0.9.2\n+ **\/\n+HB_EXTERN void\n+hb_font_funcs_set_glyph_h_kerning_func (hb_font_funcs_t *ffuncs,\n+                                        hb_font_get_glyph_h_kerning_func_t func,\n+                                        void *user_data, hb_destroy_func_t destroy);\n+\n@@ -441,0 +463,8 @@\n+HB_EXTERN unsigned int\n+hb_font_get_nominal_glyphs (hb_font_t *font,\n+                            unsigned int count,\n+                            const hb_codepoint_t *first_unicode,\n+                            unsigned int unicode_stride,\n+                            hb_codepoint_t *first_glyph,\n+                            unsigned int glyph_stride);\n+\n@@ -472,0 +502,4 @@\n+HB_EXTERN hb_position_t\n+hb_font_get_glyph_h_kerning (hb_font_t *font,\n+                             hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);\n+\n@@ -534,0 +568,6 @@\n+HB_EXTERN void\n+hb_font_get_glyph_kerning_for_direction (hb_font_t *font,\n+                                         hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,\n+                                         hb_direction_t direction,\n+                                         hb_position_t *x, hb_position_t *y);\n+\n@@ -668,0 +708,6 @@\n+#ifdef HB_EXPERIMENTAL_API\n+HB_EXTERN const float *\n+hb_font_get_var_coords_design (hb_font_t *font,\n+                               unsigned int *length);\n+#endif\n+\n@@ -677,0 +723,10 @@\n+HB_EXTERN void\n+hb_font_set_var_named_instance (hb_font_t *font,\n+                                unsigned instance_index);\n+\n+#ifdef HB_EXPERIMENTAL_API\n+HB_EXTERN hb_bool_t\n+hb_font_draw_glyph (hb_font_t *font, hb_codepoint_t glyph,\n+                    const hb_draw_funcs_t *funcs, void *user_data);\n+#endif\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-font.h","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  HB_FONT_FUNC_IMPLEMENT (glyph_v_kerning) \\\n+  HB_IF_NOT_DEPRECATED (HB_FONT_FUNC_IMPLEMENT (glyph_v_kerning)) \\\n@@ -110,2 +110,4 @@\n-  int x_scale;\n-  int y_scale;\n+  int32_t x_scale;\n+  int32_t y_scale;\n+  int64_t x_mult;\n+  int64_t y_mult;\n@@ -121,0 +123,1 @@\n+  float *design_coords;\n@@ -130,6 +133,6 @@\n-  int dir_scale (hb_direction_t direction)\n-  { return HB_DIRECTION_IS_VERTICAL(direction) ? y_scale : x_scale; }\n-  hb_position_t em_scale_x (int16_t v) { return em_scale (v, x_scale); }\n-  hb_position_t em_scale_y (int16_t v) { return em_scale (v, y_scale); }\n-  hb_position_t em_scalef_x (float v) { return em_scalef (v, this->x_scale); }\n-  hb_position_t em_scalef_y (float v) { return em_scalef (v, this->y_scale); }\n+  int64_t dir_mult (hb_direction_t direction)\n+  { return HB_DIRECTION_IS_VERTICAL(direction) ? y_mult : x_mult; }\n+  hb_position_t em_scale_x (int16_t v) { return em_mult (v, x_mult); }\n+  hb_position_t em_scale_y (int16_t v) { return em_mult (v, y_mult); }\n+  hb_position_t em_scalef_x (float v) { return em_scalef (v, x_scale); }\n+  hb_position_t em_scalef_y (float v) { return em_scalef (v, y_scale); }\n@@ -139,1 +142,1 @@\n-  { return em_scale (v, dir_scale (direction)); }\n+  { return em_mult (v, dir_mult (direction)); }\n@@ -217,1 +220,1 @@\n-                                      hb_codepoint_t *glyph)\n+                               hb_codepoint_t *glyph)\n@@ -287,1 +290,1 @@\n-                                       hb_position_t *x, hb_position_t *y)\n+                                hb_position_t *x, hb_position_t *y)\n@@ -307,0 +310,3 @@\n+#ifdef HB_DISABLE_DEPRECATED\n+    return 0;\n+#else\n@@ -310,0 +316,1 @@\n+#endif\n@@ -315,0 +322,3 @@\n+#ifdef HB_DISABLE_DEPRECATED\n+    return 0;\n+#else\n@@ -318,0 +328,1 @@\n+#endif\n@@ -321,1 +332,1 @@\n-                                      hb_glyph_extents_t *extents)\n+                               hb_glyph_extents_t *extents)\n@@ -331,1 +342,1 @@\n-                                            hb_position_t *x, hb_position_t *y)\n+                                     hb_position_t *x, hb_position_t *y)\n@@ -602,1 +613,8 @@\n-  hb_position_t em_scale (int16_t v, int scale)\n+  void mults_changed ()\n+  {\n+    signed upem = face->get_upem ();\n+    x_mult = ((int64_t) x_scale << 16) \/ upem;\n+    y_mult = ((int64_t) y_scale << 16) \/ upem;\n+  }\n+\n+  hb_position_t em_mult (int16_t v, int64_t mult)\n@@ -604,4 +622,1 @@\n-    int upem = face->get_upem ();\n-    int64_t scaled = v * (int64_t) scale;\n-    scaled += scaled >= 0 ? upem\/2 : -upem\/2; \/* Round. *\/\n-    return (hb_position_t) (scaled \/ upem);\n+    return (hb_position_t) ((v * mult) >> 16);\n@@ -610,1 +625,1 @@\n-  { return (hb_position_t) round (v * scale \/ face->get_upem ()); }\n+  { return (hb_position_t) roundf (v * scale \/ face->get_upem ()); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-font.hh","additions":35,"deletions":20,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+#ifdef HAVE_FREETYPE\n+\n@@ -49,1 +51,3 @@\n- * Functions for using HarfBuzz with the FreeType library to provide face and\n+ * Functions for using HarfBuzz with the FreeType library.\n+ *\n+ * HarfBuzz supports using FreeType to provide face and\n@@ -51,0 +55,3 @@\n+ *\n+ * <note>Note that FreeType is not thread-safe, therefore these\n+ * functions are not thread-safe either.<\/note>\n@@ -88,3 +95,1 @@\n-\n-  if (unlikely (!ft_font))\n-    return nullptr;\n+  if (unlikely (!ft_font)) return nullptr;\n@@ -99,1 +104,1 @@\n-  ft_font->cached_x_scale.set (0);\n+  ft_font->cached_x_scale.set_relaxed (0);\n@@ -128,2 +133,2 @@\n- * @font:\n- * @load_flags:\n+ * @font: #hb_font_t to work upon\n+ * @load_flags: The FreeType load flags to set\n@@ -131,0 +136,1 @@\n+ * Sets the FT_Load_Glyph load flags for the specified #hb_font_t.\n@@ -132,0 +138,2 @@\n+ * For more information, see\n+ * https:\/\/www.freetype.org\/freetype2\/docs\/reference\/ft2-base_interface.html#ft_load_xxx\n@@ -141,1 +149,1 @@\n-  if (font->destroy != (hb_destroy_func_t) _hb_ft_font_destroy)\n+  if (unlikely (font->destroy != (hb_destroy_func_t) _hb_ft_font_destroy))\n@@ -151,1 +159,1 @@\n- * @font:\n+ * @font: #hb_font_t to work upon\n@@ -153,0 +161,1 @@\n+ * Fetches the FT_Load_Glyph load flags of the specified #hb_font_t.\n@@ -154,0 +163,4 @@\n+ * For more information, see\n+ * https:\/\/www.freetype.org\/freetype2\/docs\/reference\/ft2-base_interface.html#ft_load_xxx\n+ *\n+ * Return value: FT_Load_Glyph flags found\n@@ -155,1 +168,0 @@\n- * Return value:\n@@ -161,1 +173,1 @@\n-  if (font->destroy != (hb_destroy_func_t) _hb_ft_font_destroy)\n+  if (unlikely (font->destroy != (hb_destroy_func_t) _hb_ft_font_destroy))\n@@ -169,0 +181,11 @@\n+\/**\n+ * hb_ft_get_face:\n+ * @font: #hb_font_t to work upon\n+ *\n+ * Fetches the FT_Face associated with the specified #hb_font_t\n+ * font object.\n+ *\n+ * Return value: the FT_Face found\n+ *\n+ * Since: 0.9.2\n+ **\/\n@@ -172,1 +195,21 @@\n-  if (font->destroy != (hb_destroy_func_t) _hb_ft_font_destroy)\n+  if (unlikely (font->destroy != (hb_destroy_func_t) _hb_ft_font_destroy))\n+    return nullptr;\n+\n+  const hb_ft_font_t *ft_font = (const hb_ft_font_t *) font->user_data;\n+\n+  return ft_font->ft_face;\n+}\n+\n+\/**\n+ * hb_ft_font_lock_face:\n+ * @font:\n+ *\n+ *\n+ *\n+ * Return value:\n+ * Since: 2.6.5\n+ **\/\n+FT_Face\n+hb_ft_font_lock_face (hb_font_t *font)\n+{\n+  if (unlikely (font->destroy != (hb_destroy_func_t) _hb_ft_font_destroy))\n@@ -177,0 +220,2 @@\n+  ft_font->lock.lock ();\n+\n@@ -180,0 +225,19 @@\n+\/**\n+ * hb_ft_font_unlock_face:\n+ * @font:\n+ *\n+ *\n+ *\n+ * Return value:\n+ * Since: 2.6.5\n+ **\/\n+void\n+hb_ft_font_unlock_face (hb_font_t *font)\n+{\n+  if (unlikely (font->destroy != (hb_destroy_func_t) _hb_ft_font_destroy))\n+    return;\n+\n+  const hb_ft_font_t *ft_font = (const hb_ft_font_t *) font->user_data;\n+\n+  ft_font->lock.unlock ();\n+}\n@@ -349,0 +413,19 @@\n+#ifndef HB_NO_OT_SHAPE_FALLBACK\n+static hb_position_t\n+hb_ft_get_glyph_h_kerning (hb_font_t *font,\n+                           void *font_data,\n+                           hb_codepoint_t left_glyph,\n+                           hb_codepoint_t right_glyph,\n+                           void *user_data HB_UNUSED)\n+{\n+  const hb_ft_font_t *ft_font = (const hb_ft_font_t *) font_data;\n+  FT_Vector kerningv;\n+\n+  FT_Kerning_Mode mode = font->x_ppem ? FT_KERNING_DEFAULT : FT_KERNING_UNFITTED;\n+  if (FT_Get_Kerning (ft_font->ft_face, left_glyph, right_glyph, mode, &kerningv))\n+    return 0;\n+\n+  return kerningv.x;\n+}\n+#endif\n+\n@@ -442,1 +525,1 @@\n-    len = MIN (len, (int) sizeof (buf) - 1);\n+    len = hb_min (len, (int) sizeof (buf) - 1);\n@@ -500,0 +583,4 @@\n+#ifndef HB_NO_OT_SHAPE_FALLBACK\n+    hb_font_funcs_set_glyph_h_kerning_func (funcs, hb_ft_get_glyph_h_kerning, nullptr, nullptr);\n+#endif\n+    \/\/hb_font_funcs_set_glyph_v_kerning_func (funcs, hb_ft_get_glyph_v_kerning, nullptr, nullptr);\n@@ -534,0 +621,3 @@\n+  hb_ft_font_t *ft_font = _hb_ft_font_create (ft_face, symbol, unref);\n+  if (unlikely (!ft_font)) return;\n+\n@@ -536,1 +626,1 @@\n-                     _hb_ft_font_create (ft_face, symbol, unref),\n+                     ft_font,\n@@ -542,1 +632,1 @@\n-reference_table  (hb_face_t *face HB_UNUSED, hb_tag_t tag, void *user_data)\n+_hb_ft_reference_table (hb_face_t *face HB_UNUSED, hb_tag_t tag, void *user_data)\n@@ -573,2 +663,4 @@\n- * @ft_face: (destroy destroy) (scope notified):\n- * @destroy:\n+ * @ft_face: (destroy destroy) (scope notified): FT_Face to work upon\n+ * @destroy: A callback to call when the face object is not needed anymore\n+ *\n+ * Creates an #hb_face_t face object from the specified FT_Face.\n@@ -576,0 +668,1 @@\n+ * This variant of the function does not provide any life-cycle management.\n@@ -577,0 +670,8 @@\n+ * Most client programs should use hb_ft_face_create_referenced()\n+ * (or, perhaps, hb_ft_face_create_cached()) instead.\n+ *\n+ * If you know you have valid reasons not to use hb_ft_face_create_referenced(),\n+ * then it is the client program's responsibility to destroy @ft_face\n+ * after the #hb_face_t face object has been destroyed.\n+ *\n+ * Return value: (transfer full): the new #hb_face_t face object\n@@ -578,1 +679,0 @@\n- * Return value: (transfer full):\n@@ -597,1 +697,1 @@\n-    face = hb_face_create_for_tables (reference_table, ft_face, destroy);\n+    face = hb_face_create_for_tables (_hb_ft_reference_table, ft_face, destroy);\n@@ -608,1 +708,3 @@\n- * @ft_face:\n+ * @ft_face: FT_Face to work upon\n+ *\n+ * Creates an #hb_face_t face object from the specified FT_Face.\n@@ -610,0 +712,5 @@\n+ * This is the preferred variant of the hb_ft_face_create*\n+ * function family, because it calls FT_Reference_Face() on @ft_face,\n+ * ensuring that @ft_face remains alive as long as the resulting\n+ * #hb_face_t face object remains alive. Also calls FT_Done_Face()\n+ * when the #hb_face_t face object is destroyed.\n@@ -611,0 +718,3 @@\n+ * Use this version unless you know you have good reasons not to.\n+ *\n+ * Return value: (transfer full): the new #hb_face_t face object\n@@ -612,1 +722,0 @@\n- * Return value: (transfer full):\n@@ -630,1 +739,9 @@\n- * @ft_face:\n+ * @ft_face: FT_Face to work upon\n+ *\n+ * Creates an #hb_face_t face object from the specified FT_Face.\n+ *\n+ * This variant of the function caches the newly created #hb_face_t\n+ * face object, using the @generic pointer of @ft_face. Subsequent function\n+ * calls that are passed the same @ft_face parameter will have the same\n+ * #hb_face_t returned to them, and that #hb_face_t will be correctly\n+ * reference counted.\n@@ -632,0 +749,2 @@\n+ * However, client programs are still responsible for destroying\n+ * @ft_face after the last #hb_face_t face object has been destroyed.\n@@ -633,0 +752,1 @@\n+ * Return value: (transfer full): the new #hb_face_t face object\n@@ -634,1 +754,0 @@\n- * Return value: (transfer full):\n@@ -652,1 +771,0 @@\n-\n@@ -655,2 +773,8 @@\n- * @ft_face: (destroy destroy) (scope notified):\n- * @destroy:\n+ * @ft_face: (destroy destroy) (scope notified): FT_Face to work upon\n+ * @destroy: (optional): A callback to call when the font object is not needed anymore\n+ *\n+ * Creates an #hb_font_t font object from the specified FT_Face.\n+ *\n+ * <note>Note: You must set the face size on @ft_face before calling\n+ * hb_ft_font_create() on it. Otherwise, HarfBuzz will not pick up\n+ * the face size.<\/note>\n@@ -658,0 +782,1 @@\n+ * This variant of the function does not provide any life-cycle management.\n@@ -659,0 +784,14 @@\n+ * Most client programs should use hb_ft_font_create_referenced()\n+ * instead.\n+ *\n+ * If you know you have valid reasons not to use hb_ft_font_create_referenced(),\n+ * then it is the client program's responsibility to destroy @ft_face\n+ * after the #hb_font_t font object has been destroyed.\n+ *\n+ * HarfBuzz will use the @destroy callback on the #hb_font_t font object\n+ * if it is supplied when you use this function. However, even if @destroy\n+ * is provided, it is the client program's responsibility to destroy @ft_face,\n+ * and it is the client program's responsibility to ensure that @ft_face is\n+ * destroyed only after the #hb_font_t font object has been destroyed.\n+ *\n+ * Return value: (transfer full): the new #hb_font_t font object\n@@ -660,1 +799,0 @@\n- * Return value: (transfer full):\n@@ -678,0 +816,10 @@\n+\/**\n+ * hb_ft_font_has_changed:\n+ * @font: #hb_font_t to work upon\n+ *\n+ * Refreshes the state of @font when the underlying FT_Face has changed.\n+ * This function should be called after changing the size or\n+ * variation-axis settings on the FT_Face.\n+ *\n+ * Since: 1.0.5\n+ **\/\n@@ -685,0 +833,1 @@\n+\n@@ -696,1 +845,1 @@\n-#ifdef HAVE_FT_GET_VAR_BLEND_COORDINATES\n+#if defined(HAVE_FT_GET_VAR_BLEND_COORDINATES) && !defined(HB_NO_VAR)\n@@ -733,1 +882,12 @@\n- * @ft_face:\n+ * @ft_face: FT_Face to work upon\n+ *\n+ * Creates an #hb_font_t font object from the specified FT_Face.\n+ *\n+ * <note>Note: You must set the face size on @ft_face before calling\n+ * hb_ft_font_create_references() on it. Otherwise, HarfBuzz will not pick up\n+ * the face size.<\/note>\n+ *\n+ * This is the preferred variant of the hb_ft_font_create*\n+ * function family, because it calls FT_Reference_Face() on @ft_face,\n+ * ensuring that @ft_face remains alive as long as the resulting\n+ * #hb_font_t font object remains alive.\n@@ -735,0 +895,1 @@\n+ * Use this version unless you know you have good reasons not to.\n@@ -736,0 +897,1 @@\n+ * Return value: (transfer full): the new #hb_font_t font object\n@@ -737,1 +899,0 @@\n- * Return value: (transfer full):\n@@ -751,1 +912,1 @@\n-static struct hb_ft_library_lazy_loader_t : hb_lazy_loader_t<hb_remove_pointer (FT_Library),\n+static struct hb_ft_library_lazy_loader_t : hb_lazy_loader_t<hb_remove_pointer<FT_Library>,\n@@ -796,0 +957,22 @@\n+\/**\n+ * hb_ft_font_set_funcs:\n+ * @font: #hb_font_t to work upon\n+ *\n+ * Configures the font-functions structure of the specified\n+ * #hb_font_t font object to use FreeType font functions.\n+ *\n+ * In particular, you can use this function to configure an\n+ * existing #hb_face_t face object for use with FreeType font\n+ * functions even if that #hb_face_t face object was initially\n+ * created with hb_face_create(), and therefore was not\n+ * initially configured to use FreeType font functions.\n+ *\n+ * An #hb_face_t face object created with hb_ft_face_create()\n+ * is preconfigured for FreeType font functions and does not\n+ * require this function to be used.\n+ *\n+ * <note>Note: Internally, this function creates an FT_Face.\n+* <\/note>\n+ *\n+ * Since: 1.0.5\n+ **\/\n@@ -818,2 +1001,2 @@\n-  if (FT_Select_Charmap (ft_face, FT_ENCODING_UNICODE))\n-    FT_Select_Charmap (ft_face, FT_ENCODING_MS_SYMBOL);\n+  if (FT_Select_Charmap (ft_face, FT_ENCODING_MS_SYMBOL))\n+    FT_Select_Charmap (ft_face, FT_ENCODING_UNICODE);\n@@ -835,1 +1018,1 @@\n-#ifdef HAVE_FT_SET_VAR_BLEND_COORDINATES\n+#if defined(HAVE_FT_GET_VAR_BLEND_COORDINATES) && !defined(HB_NO_VAR)\n@@ -844,1 +1027,1 @@\n-        ft_coords[i] = coords[i] << 2;\n+        ft_coords[i] = coords[i] * 4;\n@@ -857,0 +1040,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ft.cc","additions":221,"deletions":35,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -113,0 +113,6 @@\n+HB_EXTERN FT_Face\n+hb_ft_font_lock_face (hb_font_t *font);\n+\n+HB_EXTERN void\n+hb_ft_font_unlock_face (hb_font_t *font);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ft.h","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright © 2019  Facebook, Inc.\n@@ -25,0 +26,1 @@\n+ * Facebook Author(s): Behdad Esfahbod\n@@ -31,1 +33,2 @@\n-#include \"hb-null.hh\"\n+#include \"hb-algs.hh\"\n+#include \"hb-meta.hh\"\n@@ -42,0 +45,15 @@\n+ *\n+ * TODO Document more.\n+ *\n+ * If iterator implementation implements operator!=, then can be\n+ * used in range-based for loop.  That comes free if the iterator\n+ * is random-access.  Otherwise, the range-based for loop incurs\n+ * one traversal to find end(), which can be avoided if written\n+ * as a while-style for loop, or if iterator implements a faster\n+ * __end__() method.\n+ * TODO When opting in for C++17, address this by changing return\n+ * type of .end()?\n+ *\/\n+\n+\/*\n+ * Base classes for iterators.\n@@ -45,1 +63,1 @@\n-template <typename Iter, typename Item = typename Iter::__item_type__>\n+template <typename iter_t, typename Item = typename iter_t::__item_t__>\n@@ -48,2 +66,0 @@\n-  typedef Iter iter_t;\n-  typedef iter_t const_iter_t;\n@@ -51,1 +67,4 @@\n-  static constexpr unsigned item_size = hb_static_size (Item);\n+  constexpr unsigned get_item_size () const { return hb_static_size (Item); }\n+  static constexpr bool is_iterator = true;\n+  static constexpr bool is_random_access_iterator = false;\n+  static constexpr bool is_sorted_iterator = false;\n@@ -59,13 +78,3 @@\n-  \/* Operators. *\/\n-  operator iter_t () { return iter(); }\n-  explicit_operator bool () const { return more (); }\n-  item_t& operator * () const { return item (); }\n-  item_t& operator [] (signed i) const { return item_at ((unsigned) i); }\n-  iter_t& operator += (unsigned count) { forward (count); return *thiz(); }\n-  iter_t& operator ++ () { next (); return *thiz(); }\n-  iter_t& operator -= (unsigned count) { rewind (count); return *thiz(); }\n-  iter_t& operator -- () { prev (); return *thiz(); }\n-  iter_t operator + (unsigned count) { iter_t c (*thiz()); c += count; return c; }\n-  iter_t operator ++ (int) { iter_t c (*thiz()); ++*thiz(); return c; }\n-  iter_t operator - (unsigned count) { iter_t c (*thiz()); c -= count; return c; }\n-  iter_t operator -- (int) { iter_t c (*thiz()); --*thiz(); return c; }\n+  \/* TODO:\n+   * Port operators below to use hb_enable_if to sniff which method implements\n+   * an operator and use it, and remove hb_iter_fallback_mixin_t completely. *\/\n@@ -73,1 +82,1 @@\n-  \/* Methods. *\/\n+  \/* Operators. *\/\n@@ -75,4 +84,4 @@\n-  const_iter_t const_iter () const { return iter (); }\n-  item_t& item () const { return thiz()->__item__ (); }\n-  item_t& item_at (unsigned i) const { return thiz()->__item_at__ (i); }\n-  bool more () const { return thiz()->__more__ (); }\n+  iter_t operator + () const { return *thiz(); }\n+  iter_t begin () const { return *thiz(); }\n+  iter_t end () const { return thiz()->__end__ (); }\n+  explicit operator bool () const { return thiz()->__more__ (); }\n@@ -80,5 +89,31 @@\n-  void next () { thiz()->__next__ (); }\n-  void forward (unsigned n) { thiz()->__forward__ (n); }\n-  void prev () { thiz()->__prev__ (); }\n-  void rewind (unsigned n) { thiz()->__rewind__ (n); }\n-  bool random_access () const { return thiz()->__random_access__ (); }\n+  \/* The following can only be enabled if item_t is reference type.  Otherwise\n+   * it will be returning pointer to temporary rvalue.\n+   * TODO Use a wrapper return type to fix for non-reference type. *\/\n+  template <typename T = item_t,\n+            hb_enable_if (hb_is_reference (T))>\n+  hb_remove_reference<item_t>* operator -> () const { return hb_addressof (**thiz()); }\n+  item_t operator * () const { return thiz()->__item__ (); }\n+  item_t operator * () { return thiz()->__item__ (); }\n+  item_t operator [] (unsigned i) const { return thiz()->__item_at__ (i); }\n+  item_t operator [] (unsigned i) { return thiz()->__item_at__ (i); }\n+  iter_t& operator += (unsigned count) &  { thiz()->__forward__ (count); return *thiz(); }\n+  iter_t  operator += (unsigned count) && { thiz()->__forward__ (count); return *thiz(); }\n+  iter_t& operator ++ () &  { thiz()->__next__ (); return *thiz(); }\n+  iter_t  operator ++ () && { thiz()->__next__ (); return *thiz(); }\n+  iter_t& operator -= (unsigned count) &  { thiz()->__rewind__ (count); return *thiz(); }\n+  iter_t  operator -= (unsigned count) && { thiz()->__rewind__ (count); return *thiz(); }\n+  iter_t& operator -- () &  { thiz()->__prev__ (); return *thiz(); }\n+  iter_t  operator -- () && { thiz()->__prev__ (); return *thiz(); }\n+  iter_t operator + (unsigned count) const { auto c = thiz()->iter (); c += count; return c; }\n+  friend iter_t operator + (unsigned count, const iter_t &it) { return it + count; }\n+  iter_t operator ++ (int) { iter_t c (*thiz()); ++*thiz(); return c; }\n+  iter_t operator - (unsigned count) const { auto c = thiz()->iter (); c -= count; return c; }\n+  iter_t operator -- (int) { iter_t c (*thiz()); --*thiz(); return c; }\n+  template <typename T>\n+  iter_t& operator >> (T &v) &  { v = **thiz(); ++*thiz(); return *thiz(); }\n+  template <typename T>\n+  iter_t  operator >> (T &v) && { v = **thiz(); ++*thiz(); return *thiz(); }\n+  template <typename T>\n+  iter_t& operator << (const T v) &  { **thiz() = v; ++*thiz(); return *thiz(); }\n+  template <typename T>\n+  iter_t  operator << (const T v) && { **thiz() = v; ++*thiz(); return *thiz(); }\n@@ -87,3 +122,5 @@\n-  hb_iter_t () {}\n-  hb_iter_t (const hb_iter_t &o HB_UNUSED) {}\n-  void operator = (const hb_iter_t &o HB_UNUSED) {}\n+  hb_iter_t () = default;\n+  hb_iter_t (const hb_iter_t &o HB_UNUSED) = default;\n+  hb_iter_t (hb_iter_t &&o HB_UNUSED) = default;\n+  hb_iter_t& operator = (const hb_iter_t &o HB_UNUSED) = default;\n+  hb_iter_t& operator = (hb_iter_t &&o HB_UNUSED) = default;\n@@ -92,4 +129,33 @@\n-\/* Base class for sorted iterators.  Does not enforce anything.\n- * Just for class taxonomy and requirements. *\/\n-template <typename Iter, typename Item = typename Iter::__item_type__>\n-struct hb_sorted_iter_t : hb_iter_t<Iter, Item>\n+#define HB_ITER_USING(Name) \\\n+  using item_t = typename Name::item_t; \\\n+  using Name::begin; \\\n+  using Name::end; \\\n+  using Name::get_item_size; \\\n+  using Name::is_iterator; \\\n+  using Name::iter; \\\n+  using Name::operator bool; \\\n+  using Name::len; \\\n+  using Name::operator ->; \\\n+  using Name::operator *; \\\n+  using Name::operator []; \\\n+  using Name::operator +=; \\\n+  using Name::operator ++; \\\n+  using Name::operator -=; \\\n+  using Name::operator --; \\\n+  using Name::operator +; \\\n+  using Name::operator -; \\\n+  using Name::operator >>; \\\n+  using Name::operator <<; \\\n+  static_assert (true, \"\")\n+\n+\/* Returns iterator \/ item type of a type. *\/\n+template <typename Iterable>\n+using hb_iter_type = decltype (hb_deref (hb_declval (Iterable)).iter ());\n+template <typename Iterable>\n+using hb_item_type = decltype (*hb_deref (hb_declval (Iterable)).iter ());\n+\n+\n+template <typename> struct hb_array_t;\n+template <typename> struct hb_sorted_array_t;\n+\n+struct\n@@ -97,5 +163,24 @@\n-  protected:\n-  hb_sorted_iter_t () {}\n-  hb_sorted_iter_t (const hb_sorted_iter_t &o) : hb_iter_t<Iter, Item> (o) {}\n-  void operator = (const hb_sorted_iter_t &o HB_UNUSED) {}\n-};\n+  template <typename T> hb_iter_type<T>\n+  operator () (T&& c) const\n+  { return hb_deref (hb_forward<T> (c)).iter (); }\n+\n+  \/* Specialization for C arrays. *\/\n+\n+  template <typename Type> inline hb_array_t<Type>\n+  operator () (Type *array, unsigned int length) const\n+  { return hb_array_t<Type> (array, length); }\n+\n+  template <typename Type, unsigned int length> hb_array_t<Type>\n+  operator () (Type (&array)[length]) const\n+  { return hb_array_t<Type> (array, length); }\n+\n+}\n+HB_FUNCOBJ (hb_iter);\n+struct\n+{\n+  template <typename T> unsigned\n+  operator () (T&& c) const\n+  { return c.len (); }\n+\n+}\n+HB_FUNCOBJ (hb_len);\n@@ -104,2 +189,2 @@\n-template <typename iter_t, typename item_t = typename iter_t::__item_type__>\n-struct hb_iter_mixin_t\n+template <typename iter_t, typename item_t = typename iter_t::__item_t__>\n+struct hb_iter_fallback_mixin_t\n@@ -114,2 +199,2 @@\n-  item_t& __item__ () const { return thiz()->item_at (0); }\n-  item_t& __item_at__ (unsigned i) const { return *(thiz() + i); }\n+  item_t __item__ () const { return (*thiz())[0]; }\n+  item_t __item_at__ (unsigned i) const { return *(*thiz() + i); }\n@@ -118,1 +203,1 @@\n-  bool __more__ () const { return thiz()->__len__ (); }\n+  bool __more__ () const { return bool (thiz()->len ()); }\n@@ -120,1 +205,1 @@\n-  { iter_t c (*thiz()); unsigned l = 0; while (c) { c++; l++; }; return l; }\n+  { iter_t c (*thiz()); unsigned l = 0; while (c) { c++; l++; } return l; }\n@@ -123,2 +208,2 @@\n-  void __next__ () { thiz()->forward (1); }\n-  void __forward__ (unsigned n) { while (n--) thiz()->next (); }\n+  void __next__ () { *thiz() += 1; }\n+  void __forward__ (unsigned n) { while (*thiz() && n--) ++*thiz(); }\n@@ -127,2 +212,305 @@\n-  void __prev__ () { thiz()->rewind (1); }\n-  void __rewind__ (unsigned n) { while (n--) thiz()->prev (); }\n+  void __prev__ () { *thiz() -= 1; }\n+  void __rewind__ (unsigned n) { while (*thiz() && n--) --*thiz(); }\n+\n+  \/* Range-based for: Implement __end__() if can be done faster,\n+   * and operator!=. *\/\n+  iter_t __end__ () const\n+  {\n+    if (thiz()->is_random_access_iterator)\n+      return *thiz() + thiz()->len ();\n+    \/* Above expression loops twice. Following loops once. *\/\n+    auto it = *thiz();\n+    while (it) ++it;\n+    return it;\n+  }\n+\n+  protected:\n+  hb_iter_fallback_mixin_t () = default;\n+  hb_iter_fallback_mixin_t (const hb_iter_fallback_mixin_t &o HB_UNUSED) = default;\n+  hb_iter_fallback_mixin_t (hb_iter_fallback_mixin_t &&o HB_UNUSED) = default;\n+  hb_iter_fallback_mixin_t& operator = (const hb_iter_fallback_mixin_t &o HB_UNUSED) = default;\n+  hb_iter_fallback_mixin_t& operator = (hb_iter_fallback_mixin_t &&o HB_UNUSED) = default;\n+};\n+\n+template <typename iter_t, typename item_t = typename iter_t::__item_t__>\n+struct hb_iter_with_fallback_t :\n+  hb_iter_t<iter_t, item_t>,\n+  hb_iter_fallback_mixin_t<iter_t, item_t>\n+{\n+  protected:\n+  hb_iter_with_fallback_t () = default;\n+  hb_iter_with_fallback_t (const hb_iter_with_fallback_t &o HB_UNUSED) = default;\n+  hb_iter_with_fallback_t (hb_iter_with_fallback_t &&o HB_UNUSED) = default;\n+  hb_iter_with_fallback_t& operator = (const hb_iter_with_fallback_t &o HB_UNUSED) = default;\n+  hb_iter_with_fallback_t& operator = (hb_iter_with_fallback_t &&o HB_UNUSED) = default;\n+};\n+\n+\/*\n+ * Meta-programming predicates.\n+ *\/\n+\n+\/* hb_is_iterator() \/ hb_is_iterator_of() *\/\n+\n+template<typename Iter, typename Item>\n+struct hb_is_iterator_of\n+{\n+  template <typename Item2 = Item>\n+  static hb_true_type impl (hb_priority<2>, hb_iter_t<Iter, hb_type_identity<Item2>> *);\n+  static hb_false_type impl (hb_priority<0>, const void *);\n+\n+  public:\n+  static constexpr bool value = decltype (impl (hb_prioritize, hb_declval (Iter*)))::value;\n+};\n+#define hb_is_iterator_of(Iter, Item) hb_is_iterator_of<Iter, Item>::value\n+#define hb_is_iterator(Iter) hb_is_iterator_of (Iter, typename Iter::item_t)\n+\n+\/* hb_is_iterable() *\/\n+\n+template <typename T>\n+struct hb_is_iterable\n+{\n+  private:\n+\n+  template <typename U>\n+  static auto impl (hb_priority<1>) -> decltype (hb_declval (U).iter (), hb_true_type ());\n+\n+  template <typename>\n+  static hb_false_type impl (hb_priority<0>);\n+\n+  public:\n+  static constexpr bool value = decltype (impl<T> (hb_prioritize))::value;\n+};\n+#define hb_is_iterable(Iterable) hb_is_iterable<Iterable>::value\n+\n+\/* hb_is_source_of() \/ hb_is_sink_of() *\/\n+\n+template<typename Iter, typename Item>\n+struct hb_is_source_of\n+{\n+  private:\n+  template <typename Iter2 = Iter,\n+            hb_enable_if (hb_is_convertible (typename Iter2::item_t, hb_add_lvalue_reference<hb_add_const<Item>>))>\n+  static hb_true_type impl (hb_priority<2>);\n+  template <typename Iter2 = Iter>\n+  static auto impl (hb_priority<1>) -> decltype (hb_declval (Iter2) >> hb_declval (Item &), hb_true_type ());\n+  static hb_false_type impl (hb_priority<0>);\n+\n+  public:\n+  static constexpr bool value = decltype (impl (hb_prioritize))::value;\n+};\n+#define hb_is_source_of(Iter, Item) hb_is_source_of<Iter, Item>::value\n+\n+template<typename Iter, typename Item>\n+struct hb_is_sink_of\n+{\n+  private:\n+  template <typename Iter2 = Iter,\n+            hb_enable_if (hb_is_convertible (typename Iter2::item_t, hb_add_lvalue_reference<Item>))>\n+  static hb_true_type impl (hb_priority<2>);\n+  template <typename Iter2 = Iter>\n+  static auto impl (hb_priority<1>) -> decltype (hb_declval (Iter2) << hb_declval (Item), hb_true_type ());\n+  static hb_false_type impl (hb_priority<0>);\n+\n+  public:\n+  static constexpr bool value = decltype (impl (hb_prioritize))::value;\n+};\n+#define hb_is_sink_of(Iter, Item) hb_is_sink_of<Iter, Item>::value\n+\n+\/* This is commonly used, so define: *\/\n+#define hb_is_sorted_source_of(Iter, Item) \\\n+        (hb_is_source_of(Iter, Item) && Iter::is_sorted_iterator)\n+\n+\n+\/* Range-based 'for' for iterables. *\/\n+\n+template <typename Iterable,\n+          hb_requires (hb_is_iterable (Iterable))>\n+static inline auto begin (Iterable&& iterable) HB_AUTO_RETURN (hb_iter (iterable).begin ())\n+\n+template <typename Iterable,\n+          hb_requires (hb_is_iterable (Iterable))>\n+static inline auto end (Iterable&& iterable) HB_AUTO_RETURN (hb_iter (iterable).end ())\n+\n+\/* begin()\/end() are NOT looked up non-ADL.  So each namespace must declare them.\n+ * Do it for namespace OT. *\/\n+namespace OT {\n+\n+template <typename Iterable,\n+          hb_requires (hb_is_iterable (Iterable))>\n+static inline auto begin (Iterable&& iterable) HB_AUTO_RETURN (hb_iter (iterable).begin ())\n+\n+template <typename Iterable,\n+          hb_requires (hb_is_iterable (Iterable))>\n+static inline auto end (Iterable&& iterable) HB_AUTO_RETURN (hb_iter (iterable).end ())\n+\n+}\n+\n+\n+\/*\n+ * Adaptors, combiners, etc.\n+ *\/\n+\n+template <typename Lhs, typename Rhs,\n+          hb_requires (hb_is_iterator (Lhs))>\n+static inline auto\n+operator | (Lhs&& lhs, Rhs&& rhs) HB_AUTO_RETURN (hb_forward<Rhs> (rhs) (hb_forward<Lhs> (lhs)))\n+\n+\/* hb_map(), hb_filter(), hb_reduce() *\/\n+\n+enum  class hb_function_sortedness_t {\n+  NOT_SORTED,\n+  RETAINS_SORTING,\n+  SORTED,\n+};\n+\n+template <typename Iter, typename Proj, hb_function_sortedness_t Sorted,\n+         hb_requires (hb_is_iterator (Iter))>\n+struct hb_map_iter_t :\n+  hb_iter_t<hb_map_iter_t<Iter, Proj, Sorted>,\n+            decltype (hb_get (hb_declval (Proj), *hb_declval (Iter)))>\n+{\n+  hb_map_iter_t (const Iter& it, Proj f_) : it (it), f (f_) {}\n+\n+  typedef decltype (hb_get (hb_declval (Proj), *hb_declval (Iter))) __item_t__;\n+  static constexpr bool is_random_access_iterator = Iter::is_random_access_iterator;\n+  static constexpr bool is_sorted_iterator =\n+    Sorted == hb_function_sortedness_t::SORTED ? true :\n+    Sorted == hb_function_sortedness_t::RETAINS_SORTING ? Iter::is_sorted_iterator :\n+    false;\n+  __item_t__ __item__ () const { return hb_get (f.get (), *it); }\n+  __item_t__ __item_at__ (unsigned i) const { return hb_get (f.get (), it[i]); }\n+  bool __more__ () const { return bool (it); }\n+  unsigned __len__ () const { return it.len (); }\n+  void __next__ () { ++it; }\n+  void __forward__ (unsigned n) { it += n; }\n+  void __prev__ () { --it; }\n+  void __rewind__ (unsigned n) { it -= n; }\n+  hb_map_iter_t __end__ () const { return hb_map_iter_t (it.end (), f); }\n+  bool operator != (const hb_map_iter_t& o) const\n+  { return it != o.it; }\n+\n+  private:\n+  Iter it;\n+  hb_reference_wrapper<Proj> f;\n+};\n+\n+template <typename Proj, hb_function_sortedness_t Sorted>\n+struct hb_map_iter_factory_t\n+{\n+  hb_map_iter_factory_t (Proj f) : f (f) {}\n+\n+  template <typename Iter,\n+            hb_requires (hb_is_iterator (Iter))>\n+  hb_map_iter_t<Iter, Proj, Sorted>\n+  operator () (Iter it)\n+  { return hb_map_iter_t<Iter, Proj, Sorted> (it, f); }\n+\n+  private:\n+  Proj f;\n+};\n+struct\n+{\n+  template <typename Proj>\n+  hb_map_iter_factory_t<Proj, hb_function_sortedness_t::NOT_SORTED>\n+  operator () (Proj&& f) const\n+  { return hb_map_iter_factory_t<Proj, hb_function_sortedness_t::NOT_SORTED> (f); }\n+}\n+HB_FUNCOBJ (hb_map);\n+struct\n+{\n+  template <typename Proj>\n+  hb_map_iter_factory_t<Proj, hb_function_sortedness_t::RETAINS_SORTING>\n+  operator () (Proj&& f) const\n+  { return hb_map_iter_factory_t<Proj, hb_function_sortedness_t::RETAINS_SORTING> (f); }\n+}\n+HB_FUNCOBJ (hb_map_retains_sorting);\n+struct\n+{\n+  template <typename Proj>\n+  hb_map_iter_factory_t<Proj, hb_function_sortedness_t::SORTED>\n+  operator () (Proj&& f) const\n+  { return hb_map_iter_factory_t<Proj, hb_function_sortedness_t::SORTED> (f); }\n+}\n+HB_FUNCOBJ (hb_map_sorted);\n+\n+template <typename Iter, typename Pred, typename Proj,\n+         hb_requires (hb_is_iterator (Iter))>\n+struct hb_filter_iter_t :\n+  hb_iter_with_fallback_t<hb_filter_iter_t<Iter, Pred, Proj>,\n+                          typename Iter::item_t>\n+{\n+  hb_filter_iter_t (const Iter& it_, Pred p_, Proj f_) : it (it_), p (p_), f (f_)\n+  { while (it && !hb_has (p.get (), hb_get (f.get (), *it))) ++it; }\n+\n+  typedef typename Iter::item_t __item_t__;\n+  static constexpr bool is_sorted_iterator = Iter::is_sorted_iterator;\n+  __item_t__ __item__ () const { return *it; }\n+  bool __more__ () const { return bool (it); }\n+  void __next__ () { do ++it; while (it && !hb_has (p.get (), hb_get (f.get (), *it))); }\n+  void __prev__ () { do --it; while (it && !hb_has (p.get (), hb_get (f.get (), *it))); }\n+  hb_filter_iter_t __end__ () const { return hb_filter_iter_t (it.end (), p, f); }\n+  bool operator != (const hb_filter_iter_t& o) const\n+  { return it != o.it; }\n+\n+  private:\n+  Iter it;\n+  hb_reference_wrapper<Pred> p;\n+  hb_reference_wrapper<Proj> f;\n+};\n+template <typename Pred, typename Proj>\n+struct hb_filter_iter_factory_t\n+{\n+  hb_filter_iter_factory_t (Pred p, Proj f) : p (p), f (f) {}\n+\n+  template <typename Iter,\n+            hb_requires (hb_is_iterator (Iter))>\n+  hb_filter_iter_t<Iter, Pred, Proj>\n+  operator () (Iter it)\n+  { return hb_filter_iter_t<Iter, Pred, Proj> (it, p, f); }\n+\n+  private:\n+  Pred p;\n+  Proj f;\n+};\n+struct\n+{\n+  template <typename Pred = decltype ((hb_identity)),\n+            typename Proj = decltype ((hb_identity))>\n+  hb_filter_iter_factory_t<Pred, Proj>\n+  operator () (Pred&& p = hb_identity, Proj&& f = hb_identity) const\n+  { return hb_filter_iter_factory_t<Pred, Proj> (p, f); }\n+}\n+HB_FUNCOBJ (hb_filter);\n+\n+template <typename Redu, typename InitT>\n+struct hb_reduce_t\n+{\n+  hb_reduce_t (Redu r, InitT init_value) : r (r), init_value (init_value) {}\n+\n+  template <typename Iter,\n+            hb_requires (hb_is_iterator (Iter)),\n+            typename AccuT = hb_decay<decltype (hb_declval (Redu) (hb_declval (InitT), hb_declval (typename Iter::item_t)))>>\n+  AccuT\n+  operator () (Iter it)\n+  {\n+    AccuT value = init_value;\n+    for (; it; ++it)\n+      value = r (value, *it);\n+    return value;\n+  }\n+\n+  private:\n+  Redu r;\n+  InitT init_value;\n+};\n+struct\n+{\n+  template <typename Redu, typename InitT>\n+  hb_reduce_t<Redu, InitT>\n+  operator () (Redu&& r, InitT init_value) const\n+  { return hb_reduce_t<Redu, InitT> (r, init_value); }\n+}\n+HB_FUNCOBJ (hb_reduce);\n+\n+\n+\/* hb_zip() *\/\n@@ -130,2 +518,83 @@\n-  \/* Random access: Return true if item_at(), len(), forward() are fast. *\/\n-  bool __random_access__ () const { return false; }\n+template <typename A, typename B>\n+struct hb_zip_iter_t :\n+  hb_iter_t<hb_zip_iter_t<A, B>,\n+            hb_pair_t<typename A::item_t, typename B::item_t>>\n+{\n+  hb_zip_iter_t () {}\n+  hb_zip_iter_t (const A& a, const B& b) : a (a), b (b) {}\n+\n+  typedef hb_pair_t<typename A::item_t, typename B::item_t> __item_t__;\n+  static constexpr bool is_random_access_iterator =\n+    A::is_random_access_iterator &&\n+    B::is_random_access_iterator;\n+  \/* Note.  The following categorization is only valid if A is strictly sorted,\n+   * ie. does NOT have duplicates.  Previously I tried to categorize sortedness\n+   * more granularly, see commits:\n+   *\n+   *   513762849a683914fc266a17ddf38f133cccf072\n+   *   4d3cf2adb669c345cc43832d11689271995e160a\n+   *\n+   * However, that was not enough, since hb_sorted_array_t, hb_sorted_vector_t,\n+   * SortedArrayOf, etc all needed to be updated to add more variants.  At that\n+   * point I saw it not worth the effort, and instead we now deem all sorted\n+   * collections as essentially strictly-sorted for the purposes of zip.\n+   *\n+   * The above assumption is not as bad as it sounds.  Our \"sorted\" comes with\n+   * no guarantees.  It's just a contract, put in place to help you remember,\n+   * and think about, whether an iterator you receive is expected to be\n+   * sorted or not.  As such, it's not perfect by definition, and should not\n+   * be treated so.  The inaccuracy here just errs in the direction of being\n+   * more permissive, so your code compiles instead of erring on the side of\n+   * marking your zipped iterator unsorted in which case your code won't\n+   * compile.\n+   *\n+   * This semantical limitation does NOT affect logic in any other place I\n+   * know of as of this writing.\n+   *\/\n+  static constexpr bool is_sorted_iterator = A::is_sorted_iterator;\n+\n+  __item_t__ __item__ () const { return __item_t__ (*a, *b); }\n+  __item_t__ __item_at__ (unsigned i) const { return __item_t__ (a[i], b[i]); }\n+  bool __more__ () const { return bool (a) && bool (b); }\n+  unsigned __len__ () const { return hb_min (a.len (), b.len ()); }\n+  void __next__ () { ++a; ++b; }\n+  void __forward__ (unsigned n) { a += n; b += n; }\n+  void __prev__ () { --a; --b; }\n+  void __rewind__ (unsigned n) { a -= n; b -= n; }\n+  hb_zip_iter_t __end__ () const { return hb_zip_iter_t (a.end (), b.end ()); }\n+  \/* Note, we should stop if ANY of the iters reaches end.  As such two compare\n+   * unequal if both items are unequal, NOT if either is unequal. *\/\n+  bool operator != (const hb_zip_iter_t& o) const\n+  { return a != o.a && b != o.b; }\n+\n+  private:\n+  A a;\n+  B b;\n+};\n+struct\n+{ HB_PARTIALIZE(2);\n+  template <typename A, typename B,\n+            hb_requires (hb_is_iterable (A) && hb_is_iterable (B))>\n+  hb_zip_iter_t<hb_iter_type<A>, hb_iter_type<B>>\n+  operator () (A&& a, B&& b) const\n+  { return hb_zip_iter_t<hb_iter_type<A>, hb_iter_type<B>> (hb_iter (a), hb_iter (b)); }\n+}\n+HB_FUNCOBJ (hb_zip);\n+\n+\/* hb_apply() *\/\n+\n+template <typename Appl>\n+struct hb_apply_t\n+{\n+  hb_apply_t (Appl a) : a (a) {}\n+\n+  template <typename Iter,\n+            hb_requires (hb_is_iterator (Iter))>\n+  void operator () (Iter it)\n+  {\n+    for (; it; ++it)\n+      (void) hb_invoke (a, *it);\n+  }\n+\n+  private:\n+  Appl a;\n@@ -133,0 +602,5 @@\n+struct\n+{\n+  template <typename Appl> hb_apply_t<Appl>\n+  operator () (Appl&& a) const\n+  { return hb_apply_t<Appl> (a); }\n@@ -134,0 +608,100 @@\n+  template <typename Appl> hb_apply_t<Appl&>\n+  operator () (Appl *a) const\n+  { return hb_apply_t<Appl&> (*a); }\n+}\n+HB_FUNCOBJ (hb_apply);\n+\n+\/* hb_range()\/hb_iota()\/hb_repeat() *\/\n+\n+template <typename T, typename S>\n+struct hb_range_iter_t :\n+  hb_iter_t<hb_range_iter_t<T, S>, T>\n+{\n+  hb_range_iter_t (T start, T end_, S step) : v (start), end_ (end_for (start, end_, step)), step (step) {}\n+\n+  typedef T __item_t__;\n+  static constexpr bool is_random_access_iterator = true;\n+  static constexpr bool is_sorted_iterator = true;\n+  __item_t__ __item__ () const { return hb_ridentity (v); }\n+  __item_t__ __item_at__ (unsigned j) const { return v + j * step; }\n+  bool __more__ () const { return v != end_; }\n+  unsigned __len__ () const { return !step ? UINT_MAX : (end_ - v) \/ step; }\n+  void __next__ () { v += step; }\n+  void __forward__ (unsigned n) { v += n * step; }\n+  void __prev__ () { v -= step; }\n+  void __rewind__ (unsigned n) { v -= n * step; }\n+  hb_range_iter_t __end__ () const { return hb_range_iter_t (end_, end_, step); }\n+  bool operator != (const hb_range_iter_t& o) const\n+  { return v != o.v; }\n+\n+  private:\n+  static inline T end_for (T start, T end_, S step)\n+  {\n+    if (!step)\n+      return end_;\n+    auto res = (end_ - start) % step;\n+    if (!res)\n+      return end_;\n+    end_ += step - res;\n+    return end_;\n+  }\n+\n+  private:\n+  T v;\n+  T end_;\n+  S step;\n+};\n+struct\n+{\n+  template <typename T = unsigned> hb_range_iter_t<T, unsigned>\n+  operator () (T end = (unsigned) -1) const\n+  { return hb_range_iter_t<T, unsigned> (0, end, 1u); }\n+\n+  template <typename T, typename S = unsigned> hb_range_iter_t<T, S>\n+  operator () (T start, T end, S step = 1u) const\n+  { return hb_range_iter_t<T, S> (start, end, step); }\n+}\n+HB_FUNCOBJ (hb_range);\n+\n+template <typename T, typename S>\n+struct hb_iota_iter_t :\n+  hb_iter_with_fallback_t<hb_iota_iter_t<T, S>, T>\n+{\n+  hb_iota_iter_t (T start, S step) : v (start), step (step) {}\n+\n+  private:\n+\n+  template <typename S2 = S>\n+  auto\n+  inc (hb_type_identity<S2> s, hb_priority<1>)\n+    -> hb_void_t<decltype (hb_invoke (hb_forward<S2> (s), hb_declval<T&> ()))>\n+  { v = hb_invoke (hb_forward<S2> (s), v); }\n+\n+  void\n+  inc (S s, hb_priority<0>)\n+  { v += s; }\n+\n+  public:\n+\n+  typedef T __item_t__;\n+  static constexpr bool is_random_access_iterator = true;\n+  static constexpr bool is_sorted_iterator = true;\n+  __item_t__ __item__ () const { return hb_ridentity (v); }\n+  bool __more__ () const { return true; }\n+  unsigned __len__ () const { return UINT_MAX; }\n+  void __next__ () { inc (step, hb_prioritize); }\n+  void __prev__ () { v -= step; }\n+  hb_iota_iter_t __end__ () const { return *this; }\n+  bool operator != (const hb_iota_iter_t& o) const { return true; }\n+\n+  private:\n+  T v;\n+  S step;\n+};\n+struct\n+{\n+  template <typename T = unsigned, typename S = unsigned> hb_iota_iter_t<T, S>\n+  operator () (T start = 0u, S step = 1u) const\n+  { return hb_iota_iter_t<T, S> (start, step); }\n+}\n+HB_FUNCOBJ (hb_iota);\n@@ -135,1 +709,212 @@\n-\/* Functions operating on iterators or iteratables. *\/\n+template <typename T>\n+struct hb_repeat_iter_t :\n+  hb_iter_t<hb_repeat_iter_t<T>, T>\n+{\n+  hb_repeat_iter_t (T value) : v (value) {}\n+\n+  typedef T __item_t__;\n+  static constexpr bool is_random_access_iterator = true;\n+  static constexpr bool is_sorted_iterator = true;\n+  __item_t__ __item__ () const { return v; }\n+  __item_t__ __item_at__ (unsigned j) const { return v; }\n+  bool __more__ () const { return true; }\n+  unsigned __len__ () const { return UINT_MAX; }\n+  void __next__ () {}\n+  void __forward__ (unsigned) {}\n+  void __prev__ () {}\n+  void __rewind__ (unsigned) {}\n+  hb_repeat_iter_t __end__ () const { return *this; }\n+  bool operator != (const hb_repeat_iter_t& o) const { return true; }\n+\n+  private:\n+  T v;\n+};\n+struct\n+{\n+  template <typename T> hb_repeat_iter_t<T>\n+  operator () (T value) const\n+  { return hb_repeat_iter_t<T> (value); }\n+}\n+HB_FUNCOBJ (hb_repeat);\n+\n+\/* hb_enumerate()\/hb_take() *\/\n+\n+struct\n+{\n+  template <typename Iterable,\n+            typename Index = unsigned,\n+            hb_requires (hb_is_iterable (Iterable))>\n+  auto operator () (Iterable&& it, Index start = 0u) const HB_AUTO_RETURN\n+  ( hb_zip (hb_iota (start), it) )\n+}\n+HB_FUNCOBJ (hb_enumerate);\n+\n+struct\n+{ HB_PARTIALIZE(2);\n+  template <typename Iterable,\n+            hb_requires (hb_is_iterable (Iterable))>\n+  auto operator () (Iterable&& it, unsigned count) const HB_AUTO_RETURN\n+  ( hb_zip (hb_range (count), it) | hb_map (hb_second) )\n+\n+  \/* Specialization arrays. *\/\n+\n+  template <typename Type> inline hb_array_t<Type>\n+  operator () (hb_array_t<Type> array, unsigned count) const\n+  { return array.sub_array (0, count); }\n+\n+  template <typename Type> inline hb_sorted_array_t<Type>\n+  operator () (hb_sorted_array_t<Type> array, unsigned count) const\n+  { return array.sub_array (0, count); }\n+}\n+HB_FUNCOBJ (hb_take);\n+\n+struct\n+{ HB_PARTIALIZE(2);\n+  template <typename Iter,\n+            hb_requires (hb_is_iterator (Iter))>\n+  auto operator () (Iter it, unsigned count) const HB_AUTO_RETURN\n+  (\n+    + hb_iota (it, hb_add (count))\n+    | hb_map (hb_take (count))\n+    | hb_take ((hb_len (it) + count - 1) \/ count)\n+  )\n+}\n+HB_FUNCOBJ (hb_chop);\n+\n+\/* hb_sink() *\/\n+\n+template <typename Sink>\n+struct hb_sink_t\n+{\n+  hb_sink_t (Sink s) : s (s) {}\n+\n+  template <typename Iter,\n+            hb_requires (hb_is_iterator (Iter))>\n+  void operator () (Iter it)\n+  {\n+    for (; it; ++it)\n+      s << *it;\n+  }\n+\n+  private:\n+  Sink s;\n+};\n+struct\n+{\n+  template <typename Sink> hb_sink_t<Sink>\n+  operator () (Sink&& s) const\n+  { return hb_sink_t<Sink> (s); }\n+\n+  template <typename Sink> hb_sink_t<Sink&>\n+  operator () (Sink *s) const\n+  { return hb_sink_t<Sink&> (*s); }\n+}\n+HB_FUNCOBJ (hb_sink);\n+\n+\/* hb-drain: hb_sink to void \/ blackhole \/ \/dev\/null. *\/\n+\n+struct\n+{\n+  template <typename Iter,\n+            hb_requires (hb_is_iterator (Iter))>\n+  void operator () (Iter it) const\n+  {\n+    for (; it; ++it)\n+      (void) *it;\n+  }\n+}\n+HB_FUNCOBJ (hb_drain);\n+\n+\/* hb_unzip(): unzip and sink to two sinks. *\/\n+\n+template <typename Sink1, typename Sink2>\n+struct hb_unzip_t\n+{\n+  hb_unzip_t (Sink1 s1, Sink2 s2) : s1 (s1), s2 (s2) {}\n+\n+  template <typename Iter,\n+            hb_requires (hb_is_iterator (Iter))>\n+  void operator () (Iter it)\n+  {\n+    for (; it; ++it)\n+    {\n+      const auto &v = *it;\n+      s1 << v.first;\n+      s2 << v.second;\n+    }\n+  }\n+\n+  private:\n+  Sink1 s1;\n+  Sink2 s2;\n+};\n+struct\n+{\n+  template <typename Sink1, typename Sink2> hb_unzip_t<Sink1, Sink2>\n+  operator () (Sink1&& s1, Sink2&& s2) const\n+  { return hb_unzip_t<Sink1, Sink2> (s1, s2); }\n+\n+  template <typename Sink1, typename Sink2> hb_unzip_t<Sink1&, Sink2&>\n+  operator () (Sink1 *s1, Sink2 *s2) const\n+  { return hb_unzip_t<Sink1&, Sink2&> (*s1, *s2); }\n+}\n+HB_FUNCOBJ (hb_unzip);\n+\n+\n+\/* hb-all, hb-any, hb-none. *\/\n+\n+struct\n+{\n+  template <typename Iterable,\n+            typename Pred = decltype ((hb_identity)),\n+            typename Proj = decltype ((hb_identity)),\n+            hb_requires (hb_is_iterable (Iterable))>\n+  bool operator () (Iterable&& c,\n+                    Pred&& p = hb_identity,\n+                    Proj&& f = hb_identity) const\n+  {\n+    for (auto it = hb_iter (c); it; ++it)\n+      if (!hb_match (hb_forward<Pred> (p), hb_get (hb_forward<Proj> (f), *it)))\n+        return false;\n+    return true;\n+  }\n+}\n+HB_FUNCOBJ (hb_all);\n+struct\n+{\n+  template <typename Iterable,\n+            typename Pred = decltype ((hb_identity)),\n+            typename Proj = decltype ((hb_identity)),\n+            hb_requires (hb_is_iterable (Iterable))>\n+  bool operator () (Iterable&& c,\n+                    Pred&& p = hb_identity,\n+                    Proj&& f = hb_identity) const\n+  {\n+    for (auto it = hb_iter (c); it; ++it)\n+      if (hb_match (hb_forward<Pred> (p), hb_get (hb_forward<Proj> (f), *it)))\n+        return true;\n+    return false;\n+  }\n+}\n+HB_FUNCOBJ (hb_any);\n+struct\n+{\n+  template <typename Iterable,\n+            typename Pred = decltype ((hb_identity)),\n+            typename Proj = decltype ((hb_identity)),\n+            hb_requires (hb_is_iterable (Iterable))>\n+  bool operator () (Iterable&& c,\n+                    Pred&& p = hb_identity,\n+                    Proj&& f = hb_identity) const\n+  {\n+    for (auto it = hb_iter (c); it; ++it)\n+      if (hb_match (hb_forward<Pred> (p), hb_get (hb_forward<Proj> (f), *it)))\n+        return false;\n+    return true;\n+  }\n+}\n+HB_FUNCOBJ (hb_none);\n+\n+\/*\n+ * Algorithms operating on iterators.\n+ *\/\n@@ -137,2 +922,4 @@\n-template <typename C, typename V> inline void\n-hb_fill (const C& c, const V &v)\n+template <typename C, typename V,\n+          hb_requires (hb_is_iterable (C))>\n+inline void\n+hb_fill (C& c, const V &v)\n@@ -140,2 +927,2 @@\n-  for (typename C::iter_t i (c); i; i++)\n-    hb_assign (*i, v);\n+  for (auto i = hb_iter (c); i; i++)\n+    *i = v;\n@@ -144,2 +931,3 @@\n-template <typename S, typename D> inline bool\n-hb_copy (hb_iter_t<D> &id, hb_iter_t<S> &is)\n+template <typename S, typename D>\n+inline void\n+hb_copy (S&& is, D&& id)\n@@ -147,3 +935,1 @@\n-  for (; id && is; ++id, ++is)\n-    *id = *is;\n-  return !is;\n+  hb_iter (is) | hb_sink (id);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-iter.hh","additions":848,"deletions":62,"binary":false,"changes":910,"status":"modified"},{"patch":"@@ -55,2 +55,1 @@\n-    OT::hb_ot_apply_context_t::skipping_iterator_t &skippy_iter = c.iter_input;\n-    skippy_iter.init (&c);\n+    auto &skippy_iter = c.iter_input;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-kern.hh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,2 +35,3 @@\n-#include \"hb-array.hh\"\n-#include \"hb-vector.hh\"\n+#include \"hb-dispatch.hh\"\n+#include \"hb-sanitize.hh\"\n+#include \"hb-serialize.hh\"\n@@ -43,16 +44,0 @@\n-\/* Cast to struct T, reference to reference *\/\n-template<typename Type, typename TObject>\n-static inline const Type& CastR(const TObject &X)\n-{ return reinterpret_cast<const Type&> (X); }\n-template<typename Type, typename TObject>\n-static inline Type& CastR(TObject &X)\n-{ return reinterpret_cast<Type&> (X); }\n-\n-\/* Cast to struct T, pointer to pointer *\/\n-template<typename Type, typename TObject>\n-static inline const Type* CastP(const TObject *X)\n-{ return reinterpret_cast<const Type*> (X); }\n-template<typename Type, typename TObject>\n-static inline Type* CastP(TObject *X)\n-{ return reinterpret_cast<Type*> (X); }\n-\n@@ -72,1 +57,1 @@\n-  return * reinterpret_cast<Type*> ((char *) P + offset);\n+  return * reinterpret_cast<const Type*> ((const char *) P + offset);\n@@ -137,1 +122,1 @@\n-  DEFINE_INSTANCE_ASSERTION (sizeof (*this) == (size) + VAR * sizeof ((array)[0])) \\\n+  DEFINE_INSTANCE_ASSERTION (sizeof (*this) == (size) + (HB_VAR_ARRAY+0) * sizeof ((array)[0])) \\\n@@ -146,609 +131,0 @@\n-\/*\n- * Dispatch\n- *\/\n-\n-template <typename Context, typename Return, unsigned int MaxDebugDepth>\n-struct hb_dispatch_context_t\n-{\n-  static constexpr unsigned max_debug_depth = MaxDebugDepth;\n-  typedef Return return_t;\n-  template <typename T, typename F>\n-  bool may_dispatch (const T *obj HB_UNUSED, const F *format HB_UNUSED) { return true; }\n-  static return_t no_dispatch_return_value () { return Context::default_return_value (); }\n-  static bool stop_sublookup_iteration (const return_t r HB_UNUSED) { return false; }\n-};\n-\n-\n-\/*\n- * Sanitize\n- *\n- *\n- * === Introduction ===\n- *\n- * The sanitize machinery is at the core of our zero-cost font loading.  We\n- * mmap() font file into memory and create a blob out of it.  Font subtables\n- * are returned as a readonly sub-blob of the main font blob.  These table\n- * blobs are then sanitized before use, to ensure invalid memory access does\n- * not happen.  The toplevel sanitize API use is like, eg. to load the 'head'\n- * table:\n- *\n- *   hb_blob_t *head_blob = hb_sanitize_context_t ().reference_table<OT::head> (face);\n- *\n- * The blob then can be converted to a head table struct with:\n- *\n- *   const head *head_table = head_blob->as<head> ();\n- *\n- * What the reference_table does is, to call hb_face_reference_table() to load\n- * the table blob, sanitize it and return either the sanitized blob, or empty\n- * blob if sanitization failed.  The blob->as() function returns the null\n- * object of its template type argument if the blob is empty.  Otherwise, it\n- * just casts the blob contents to the desired type.\n- *\n- * Sanitizing a blob of data with a type T works as follows (with minor\n- * simplification):\n- *\n- *   - Cast blob content to T*, call sanitize() method of it,\n- *   - If sanitize succeeded, return blob.\n- *   - Otherwise, if blob is not writable, try making it writable,\n- *     or copy if cannot be made writable in-place,\n- *   - Call sanitize() again.  Return blob if sanitize succeeded.\n- *   - Return empty blob otherwise.\n- *\n- *\n- * === The sanitize() contract ===\n- *\n- * The sanitize() method of each object type shall return true if it's safe to\n- * call other methods of the object, and false otherwise.\n- *\n- * Note that what sanitize() checks for might align with what the specification\n- * describes as valid table data, but does not have to be.  In particular, we\n- * do NOT want to be pedantic and concern ourselves with validity checks that\n- * are irrelevant to our use of the table.  On the contrary, we want to be\n- * lenient with error handling and accept invalid data to the extent that it\n- * does not impose extra burden on us.\n- *\n- * Based on the sanitize contract, one can see that what we check for depends\n- * on how we use the data in other table methods.  Ie. if other table methods\n- * assume that offsets do NOT point out of the table data block, then that's\n- * something sanitize() must check for (GSUB\/GPOS\/GDEF\/etc work this way).  On\n- * the other hand, if other methods do such checks themselves, then sanitize()\n- * does not have to bother with them (glyf\/local work this way).  The choice\n- * depends on the table structure and sanitize() performance.  For example, to\n- * check glyf\/loca offsets in sanitize() would cost O(num-glyphs).  We try hard\n- * to avoid such costs during font loading.  By postponing such checks to the\n- * actual glyph loading, we reduce the sanitize cost to O(1) and total runtime\n- * cost to O(used-glyphs).  As such, this is preferred.\n- *\n- * The same argument can be made re GSUB\/GPOS\/GDEF, but there, the table\n- * structure is so complicated that by checking all offsets at sanitize() time,\n- * we make the code much simpler in other methods, as offsets and referenced\n- * objects do not need to be validated at each use site.\n- *\/\n-\n-\/* This limits sanitizing time on really broken fonts. *\/\n-#ifndef HB_SANITIZE_MAX_EDITS\n-#define HB_SANITIZE_MAX_EDITS 32\n-#endif\n-#ifndef HB_SANITIZE_MAX_OPS_FACTOR\n-#define HB_SANITIZE_MAX_OPS_FACTOR 8\n-#endif\n-#ifndef HB_SANITIZE_MAX_OPS_MIN\n-#define HB_SANITIZE_MAX_OPS_MIN 16384\n-#endif\n-#ifndef HB_SANITIZE_MAX_OPS_MAX\n-#define HB_SANITIZE_MAX_OPS_MAX 0x3FFFFFFF\n-#endif\n-\n-struct hb_sanitize_context_t :\n-       hb_dispatch_context_t<hb_sanitize_context_t, bool, HB_DEBUG_SANITIZE>\n-{\n-  hb_sanitize_context_t () :\n-        debug_depth (0),\n-        start (nullptr), end (nullptr),\n-        max_ops (0),\n-        writable (false), edit_count (0),\n-        blob (nullptr),\n-        num_glyphs (65536),\n-        num_glyphs_set (false) {}\n-\n-  const char *get_name () { return \"SANITIZE\"; }\n-  template <typename T, typename F>\n-  bool may_dispatch (const T *obj HB_UNUSED, const F *format)\n-  { return format->sanitize (this); }\n-  template <typename T>\n-  return_t dispatch (const T &obj) { return obj.sanitize (this); }\n-  static return_t default_return_value () { return true; }\n-  static return_t no_dispatch_return_value () { return false; }\n-  bool stop_sublookup_iteration (const return_t r) const { return !r; }\n-\n-  void init (hb_blob_t *b)\n-  {\n-    this->blob = hb_blob_reference (b);\n-    this->writable = false;\n-  }\n-\n-  void set_num_glyphs (unsigned int num_glyphs_)\n-  {\n-    num_glyphs = num_glyphs_;\n-    num_glyphs_set = true;\n-  }\n-  unsigned int get_num_glyphs () { return num_glyphs; }\n-\n-  void set_max_ops (int max_ops_) { max_ops = max_ops_; }\n-\n-  template <typename T>\n-  void set_object (const T *obj)\n-  {\n-    reset_object ();\n-\n-    if (!obj) return;\n-\n-    const char *obj_start = (const char *) obj;\n-    if (unlikely (obj_start < this->start || this->end <= obj_start))\n-      this->start = this->end = nullptr;\n-    else\n-    {\n-      this->start = obj_start;\n-      this->end   = obj_start + MIN<uintptr_t> (this->end - obj_start, obj->get_size ());\n-    }\n-  }\n-\n-  void reset_object ()\n-  {\n-    this->start = this->blob->data;\n-    this->end = this->start + this->blob->length;\n-    assert (this->start <= this->end); \/* Must not overflow. *\/\n-  }\n-\n-  void start_processing ()\n-  {\n-    reset_object ();\n-    this->max_ops = MAX ((unsigned int) (this->end - this->start) * HB_SANITIZE_MAX_OPS_FACTOR,\n-                         (unsigned) HB_SANITIZE_MAX_OPS_MIN);\n-    this->edit_count = 0;\n-    this->debug_depth = 0;\n-\n-    DEBUG_MSG_LEVEL (SANITIZE, start, 0, +1,\n-                     \"start [%p..%p] (%lu bytes)\",\n-                     this->start, this->end,\n-                     (unsigned long) (this->end - this->start));\n-  }\n-\n-  void end_processing ()\n-  {\n-    DEBUG_MSG_LEVEL (SANITIZE, this->start, 0, -1,\n-                     \"end [%p..%p] %u edit requests\",\n-                     this->start, this->end, this->edit_count);\n-\n-    hb_blob_destroy (this->blob);\n-    this->blob = nullptr;\n-    this->start = this->end = nullptr;\n-  }\n-\n-  bool check_range (const void *base,\n-                           unsigned int len) const\n-  {\n-    const char *p = (const char *) base;\n-    bool ok = this->start <= p &&\n-              p <= this->end &&\n-              (unsigned int) (this->end - p) >= len &&\n-              this->max_ops-- > 0;\n-\n-    DEBUG_MSG_LEVEL (SANITIZE, p, this->debug_depth+1, 0,\n-       \"check_range [%p..%p] (%d bytes) in [%p..%p] -> %s\",\n-       p, p + len, len,\n-       this->start, this->end,\n-       ok ? \"OK\" : \"OUT-OF-RANGE\");\n-\n-    return likely (ok);\n-  }\n-\n-  template <typename T>\n-  bool check_range (const T *base,\n-                           unsigned int a,\n-                           unsigned int b) const\n-  {\n-    return !hb_unsigned_mul_overflows (a, b) &&\n-           this->check_range (base, a * b);\n-  }\n-\n-  template <typename T>\n-  bool check_range (const T *base,\n-                           unsigned int a,\n-                           unsigned int b,\n-                           unsigned int c) const\n-  {\n-    return !hb_unsigned_mul_overflows (a, b) &&\n-           this->check_range (base, a * b, c);\n-  }\n-\n-  template <typename T>\n-  bool check_array (const T *base, unsigned int len) const\n-  {\n-    return this->check_range (base, len, hb_static_size (T));\n-  }\n-\n-  template <typename T>\n-  bool check_array (const T *base,\n-                    unsigned int a,\n-                    unsigned int b) const\n-  {\n-    return this->check_range (base, a, b, hb_static_size (T));\n-  }\n-\n-  template <typename Type>\n-  bool check_struct (const Type *obj) const\n-  { return likely (this->check_range (obj, obj->min_size)); }\n-\n-  bool may_edit (const void *base, unsigned int len)\n-  {\n-    if (this->edit_count >= HB_SANITIZE_MAX_EDITS)\n-      return false;\n-\n-    const char *p = (const char *) base;\n-    this->edit_count++;\n-\n-    DEBUG_MSG_LEVEL (SANITIZE, p, this->debug_depth+1, 0,\n-       \"may_edit(%u) [%p..%p] (%d bytes) in [%p..%p] -> %s\",\n-       this->edit_count,\n-       p, p + len, len,\n-       this->start, this->end,\n-       this->writable ? \"GRANTED\" : \"DENIED\");\n-\n-    return this->writable;\n-  }\n-\n-  template <typename Type, typename ValueType>\n-  bool try_set (const Type *obj, const ValueType &v)\n-  {\n-    if (this->may_edit (obj, hb_static_size (Type)))\n-    {\n-      hb_assign (* const_cast<Type *> (obj), v);\n-      return true;\n-    }\n-    return false;\n-  }\n-\n-  template <typename Type>\n-  hb_blob_t *sanitize_blob (hb_blob_t *blob)\n-  {\n-    bool sane;\n-\n-    init (blob);\n-\n-  retry:\n-    DEBUG_MSG_FUNC (SANITIZE, start, \"start\");\n-\n-    start_processing ();\n-\n-    if (unlikely (!start))\n-    {\n-      end_processing ();\n-      return blob;\n-    }\n-\n-    Type *t = CastP<Type> (const_cast<char *> (start));\n-\n-    sane = t->sanitize (this);\n-    if (sane)\n-    {\n-      if (edit_count)\n-      {\n-        DEBUG_MSG_FUNC (SANITIZE, start, \"passed first round with %d edits; going for second round\", edit_count);\n-\n-        \/* sanitize again to ensure no toe-stepping *\/\n-        edit_count = 0;\n-        sane = t->sanitize (this);\n-        if (edit_count) {\n-          DEBUG_MSG_FUNC (SANITIZE, start, \"requested %d edits in second round; FAILLING\", edit_count);\n-          sane = false;\n-        }\n-      }\n-    }\n-    else\n-    {\n-      if (edit_count && !writable) {\n-        start = hb_blob_get_data_writable (blob, nullptr);\n-        end = start + blob->length;\n-\n-        if (start)\n-        {\n-          writable = true;\n-          \/* ok, we made it writable by relocating.  try again *\/\n-          DEBUG_MSG_FUNC (SANITIZE, start, \"retry\");\n-          goto retry;\n-        }\n-      }\n-    }\n-\n-    end_processing ();\n-\n-    DEBUG_MSG_FUNC (SANITIZE, start, sane ? \"PASSED\" : \"FAILED\");\n-    if (sane)\n-    {\n-      hb_blob_make_immutable (blob);\n-      return blob;\n-    }\n-    else\n-    {\n-      hb_blob_destroy (blob);\n-      return hb_blob_get_empty ();\n-    }\n-  }\n-\n-  template <typename Type>\n-  hb_blob_t *reference_table (const hb_face_t *face, hb_tag_t tableTag = Type::tableTag)\n-  {\n-    if (!num_glyphs_set)\n-      set_num_glyphs (hb_face_get_glyph_count (face));\n-    return sanitize_blob<Type> (hb_face_reference_table (face, tableTag));\n-  }\n-\n-  mutable unsigned int debug_depth;\n-  const char *start, *end;\n-  mutable int max_ops;\n-  private:\n-  bool writable;\n-  unsigned int edit_count;\n-  hb_blob_t *blob;\n-  unsigned int num_glyphs;\n-  bool  num_glyphs_set;\n-};\n-\n-struct hb_sanitize_with_object_t\n-{\n-  template <typename T>\n-  hb_sanitize_with_object_t (hb_sanitize_context_t *c,\n-                                    const T& obj) : c (c)\n-  { c->set_object (obj); }\n-  ~hb_sanitize_with_object_t ()\n-  { c->reset_object (); }\n-\n-  private:\n-  hb_sanitize_context_t *c;\n-};\n-\n-\n-\/*\n- * Serialize\n- *\/\n-\n-struct hb_serialize_context_t\n-{\n-  hb_serialize_context_t (void *start_, unsigned int size)\n-  {\n-    this->start = (char *) start_;\n-    this->end = this->start + size;\n-    reset ();\n-  }\n-\n-  bool in_error () const { return !this->successful; }\n-\n-  void reset ()\n-  {\n-    this->successful = true;\n-    this->head = this->start;\n-    this->debug_depth = 0;\n-  }\n-\n-  bool propagate_error (bool e)\n-  { return this->successful = this->successful && e; }\n-  template <typename T> bool propagate_error (const T &obj)\n-  { return this->successful = this->successful && !obj.in_error (); }\n-  template <typename T> bool propagate_error (const T *obj)\n-  { return this->successful = this->successful && !obj->in_error (); }\n-  template <typename T1, typename T2> bool propagate_error (T1 &o1, T2 &o2)\n-  { return propagate_error (o1) && propagate_error (o2); }\n-  template <typename T1, typename T2> bool propagate_error (T1 *o1, T2 *o2)\n-  { return propagate_error (o1) && propagate_error (o2); }\n-  template <typename T1, typename T2, typename T3>\n-  bool propagate_error (T1 &o1, T2 &o2, T3 &o3)\n-  { return propagate_error (o1) && propagate_error (o2, o3); }\n-  template <typename T1, typename T2, typename T3>\n-  bool propagate_error (T1 *o1, T2 *o2, T3 *o3)\n-  { return propagate_error (o1) && propagate_error (o2, o3); }\n-\n-  \/* To be called around main operation. *\/\n-  template <typename Type>\n-  Type *start_serialize ()\n-  {\n-    DEBUG_MSG_LEVEL (SERIALIZE, this->start, 0, +1,\n-                     \"start [%p..%p] (%lu bytes)\",\n-                     this->start, this->end,\n-                     (unsigned long) (this->end - this->start));\n-\n-    return start_embed<Type> ();\n-  }\n-  void end_serialize ()\n-  {\n-    DEBUG_MSG_LEVEL (SERIALIZE, this->start, 0, -1,\n-                     \"end [%p..%p] serialized %d bytes; %s\",\n-                     this->start, this->end,\n-                     (int) (this->head - this->start),\n-                     this->successful ? \"successful\" : \"UNSUCCESSFUL\");\n-  }\n-\n-  unsigned int length () const { return this->head - this->start; }\n-\n-  void align (unsigned int alignment)\n-  {\n-    unsigned int l = length () % alignment;\n-    if (l)\n-      allocate_size<void> (alignment - l);\n-  }\n-\n-  template <typename Type>\n-  Type *start_embed (const Type *_ HB_UNUSED = nullptr) const\n-  {\n-    Type *ret = reinterpret_cast<Type *> (this->head);\n-    return ret;\n-  }\n-\n-  template <typename Type>\n-  Type *allocate_size (unsigned int size)\n-  {\n-    if (unlikely (!this->successful || this->end - this->head < ptrdiff_t (size))) {\n-      this->successful = false;\n-      return nullptr;\n-    }\n-    memset (this->head, 0, size);\n-    char *ret = this->head;\n-    this->head += size;\n-    return reinterpret_cast<Type *> (ret);\n-  }\n-\n-  template <typename Type>\n-  Type *allocate_min ()\n-  {\n-    return this->allocate_size<Type> (Type::min_size);\n-  }\n-\n-  template <typename Type>\n-  Type *embed (const Type &obj)\n-  {\n-    unsigned int size = obj.get_size ();\n-    Type *ret = this->allocate_size<Type> (size);\n-    if (unlikely (!ret)) return nullptr;\n-    memcpy (ret, &obj, size);\n-    return ret;\n-  }\n-  template <typename Type>\n-  hb_serialize_context_t &operator << (const Type &obj) { embed (obj); return *this; }\n-\n-  template <typename Type>\n-  Type *extend_size (Type &obj, unsigned int size)\n-  {\n-    assert (this->start <= (char *) &obj);\n-    assert ((char *) &obj <= this->head);\n-    assert ((char *) &obj + size >= this->head);\n-    if (unlikely (!this->allocate_size<Type> (((char *) &obj) + size - this->head))) return nullptr;\n-    return reinterpret_cast<Type *> (&obj);\n-  }\n-\n-  template <typename Type>\n-  Type *extend_min (Type &obj) { return extend_size (obj, obj.min_size); }\n-\n-  template <typename Type>\n-  Type *extend (Type &obj) { return extend_size (obj, obj.get_size ()); }\n-\n-  \/* Output routines. *\/\n-  template <typename Type>\n-  Type *copy () const\n-  {\n-    assert (this->successful);\n-    unsigned int len = this->head - this->start;\n-    void *p = malloc (len);\n-    if (p)\n-      memcpy (p, this->start, len);\n-    return reinterpret_cast<Type *> (p);\n-  }\n-  hb_bytes_t copy_bytes () const\n-  {\n-    assert (this->successful);\n-    unsigned int len = this->head - this->start;\n-    void *p = malloc (len);\n-    if (p)\n-      memcpy (p, this->start, len);\n-    else\n-      return hb_bytes_t ();\n-    return hb_bytes_t ((char *) p, len);\n-  }\n-  hb_blob_t *copy_blob () const\n-  {\n-    assert (this->successful);\n-    return hb_blob_create (this->start,\n-                           this->head - this->start,\n-                           HB_MEMORY_MODE_DUPLICATE,\n-                           nullptr, nullptr);\n-  }\n-\n-  public:\n-  unsigned int debug_depth;\n-  char *start, *end, *head;\n-  bool successful;\n-};\n-\n-\n-\n-\/*\n- * Big-endian integers.\n- *\/\n-\n-template <typename Type, int Bytes> struct BEInt;\n-\n-template <typename Type>\n-struct BEInt<Type, 1>\n-{\n-  public:\n-  void set (Type V)      { v = V; }\n-  operator Type () const { return v; }\n-  private: uint8_t v;\n-};\n-template <typename Type>\n-struct BEInt<Type, 2>\n-{\n-  public:\n-  void set (Type V)\n-  {\n-    v[0] = (V >>  8) & 0xFF;\n-    v[1] = (V      ) & 0xFF;\n-  }\n-  operator Type () const\n-  {\n-#if ((defined(__GNUC__) && __GNUC__ >= 5) || defined(__clang__)) && \\\n-    defined(__BYTE_ORDER) && \\\n-    (__BYTE_ORDER == __LITTLE_ENDIAN || __BYTE_ORDER == __BIG_ENDIAN)\n-    \/* Spoon-feed the compiler a big-endian integer with alignment 1.\n-     * https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/1398 *\/\n-    struct __attribute__((packed)) packed_uint16_t { uint16_t v; };\n-#if __BYTE_ORDER == __LITTLE_ENDIAN\n-    return __builtin_bswap16 (((packed_uint16_t *) this)->v);\n-#else \/* __BYTE_ORDER == __BIG_ENDIAN *\/\n-    return ((packed_uint16_t *) this)->v;\n-#endif\n-#endif\n-    return (v[0] <<  8)\n-         + (v[1]      );\n-  }\n-  private: uint8_t v[2];\n-};\n-template <typename Type>\n-struct BEInt<Type, 3>\n-{\n-  public:\n-  void set (Type V)\n-  {\n-    v[0] = (V >> 16) & 0xFF;\n-    v[1] = (V >>  8) & 0xFF;\n-    v[2] = (V      ) & 0xFF;\n-  }\n-  operator Type () const\n-  {\n-    return (v[0] << 16)\n-         + (v[1] <<  8)\n-         + (v[2]      );\n-  }\n-  private: uint8_t v[3];\n-};\n-template <typename Type>\n-struct BEInt<Type, 4>\n-{\n-  public:\n-  typedef Type type;\n-  void set (Type V)\n-  {\n-    v[0] = (V >> 24) & 0xFF;\n-    v[1] = (V >> 16) & 0xFF;\n-    v[2] = (V >>  8) & 0xFF;\n-    v[3] = (V      ) & 0xFF;\n-  }\n-  operator Type () const\n-  {\n-    return (v[0] << 24)\n-         + (v[1] << 16)\n-         + (v[2] <<  8)\n-         + (v[3]      );\n-  }\n-  private: uint8_t v[4];\n-};\n-\n@@ -817,1 +193,1 @@\n-  explicit_operator bool () const\n+  explicit operator bool () const\n@@ -861,1 +237,1 @@\n-  static const Stored* get_null () { return &Null(Stored); }\n+  static const Stored* get_null () { return &Null (Stored); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-machinery.hh","additions":7,"deletions":631,"binary":false,"changes":638,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  return const_cast<hb_map_t *> (&Null(hb_map_t));\n+  return const_cast<hb_map_t *> (&Null (hb_map_t));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-map.cc","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,8 +33,0 @@\n-template <typename T>\n-inline uint32_t Hash (const T &v)\n-{\n-  \/* Knuth's multiplicative method: *\/\n-  return (uint32_t) v * 2654435761u;\n-}\n-\n-\n@@ -42,1 +34,1 @@\n- * hb_map_t\n+ * hb_hashmap_t\n@@ -45,1 +37,4 @@\n-struct hb_map_t\n+template <typename K, typename V,\n+          K kINVALID = hb_is_pointer (K) ? 0 : hb_is_signed (K) ? hb_int_min (K) : (K) -1,\n+          V vINVALID = hb_is_pointer (V) ? 0 : hb_is_signed (V) ? hb_int_min (V) : (V) -1>\n+struct hb_hashmap_t\n@@ -47,3 +42,6 @@\n-  HB_NO_COPY_ASSIGN (hb_map_t);\n-  hb_map_t ()  { init (); }\n-  ~hb_map_t () { fini (); }\n+  HB_DELETE_COPY_ASSIGN (hb_hashmap_t);\n+  hb_hashmap_t ()  { init (); }\n+  ~hb_hashmap_t () { fini (); }\n+\n+  static_assert (hb_is_integral (K) || hb_is_pointer (K), \"\");\n+  static_assert (hb_is_integral (V) || hb_is_pointer (V), \"\");\n@@ -53,5 +51,12 @@\n-    hb_codepoint_t key;\n-    hb_codepoint_t value;\n-\n-    bool is_unused () const    { return key == INVALID; }\n-    bool is_tombstone () const { return key != INVALID && value == INVALID; }\n+    K key;\n+    V value;\n+    uint32_t hash;\n+\n+    void clear () { key = kINVALID; value = vINVALID; hash = 0; }\n+\n+    bool operator == (const K &o) { return hb_deref (key) == hb_deref (o); }\n+    bool operator == (const item_t &o) { return *this == o.key; }\n+    bool is_unused () const    { return key == kINVALID; }\n+    bool is_tombstone () const { return key != kINVALID && value == vINVALID; }\n+    bool is_real () const { return key != kINVALID && value != vINVALID; }\n+    hb_pair_t<K, V> get_pair() const { return hb_pair_t<K, V> (key, value); }\n@@ -85,0 +90,1 @@\n+    population = occupancy = 0;\n@@ -88,1 +94,0 @@\n-    population = occupancy = 0;\n@@ -93,0 +98,8 @@\n+  void reset ()\n+  {\n+    if (unlikely (hb_object_is_immutable (this)))\n+      return;\n+    successful = true;\n+    clear ();\n+  }\n+\n@@ -107,1 +120,2 @@\n-    memset (new_items, 0xFF, (size_t) new_size * sizeof (item_t));\n+    for (auto &_ : hb_iter (new_items, new_size))\n+      _.clear ();\n@@ -121,2 +135,4 @@\n-        if (old_items[i].key != INVALID && old_items[i].value != INVALID)\n-          set (old_items[i].key, old_items[i].value);\n+        if (old_items[i].is_real ())\n+          set_with_hash (old_items[i].key,\n+                         old_items[i].hash,\n+                         old_items[i].value);\n@@ -129,1 +145,73 @@\n-  void set (hb_codepoint_t key, hb_codepoint_t value)\n+  void set (K key, V value)\n+  {\n+    set_with_hash (key, hb_hash (key), value);\n+  }\n+\n+  V get (K key) const\n+  {\n+    if (unlikely (!items)) return vINVALID;\n+    unsigned int i = bucket_for (key);\n+    return items[i].is_real () && items[i] == key ? items[i].value : vINVALID;\n+  }\n+\n+  void del (K key) { set (key, vINVALID); }\n+\n+  \/* Has interface. *\/\n+  static constexpr V SENTINEL = vINVALID;\n+  typedef V value_t;\n+  value_t operator [] (K k) const { return get (k); }\n+  bool has (K k, V *vp = nullptr) const\n+  {\n+    V v = (*this)[k];\n+    if (vp) *vp = v;\n+    return v != SENTINEL;\n+  }\n+  \/* Projection. *\/\n+  V operator () (K k) const { return get (k); }\n+\n+  void clear ()\n+  {\n+    if (unlikely (hb_object_is_immutable (this)))\n+      return;\n+    if (items)\n+      for (auto &_ : hb_iter (items, mask + 1))\n+        _.clear ();\n+\n+    population = occupancy = 0;\n+  }\n+\n+  bool is_empty () const { return population == 0; }\n+\n+  unsigned int get_population () const { return population; }\n+\n+  \/*\n+   * Iterator\n+   *\/\n+  auto iter () const HB_AUTO_RETURN\n+  (\n+    + hb_array (items, mask ? mask + 1 : 0)\n+    | hb_filter (&item_t::is_real)\n+    | hb_map (&item_t::get_pair)\n+  )\n+  auto keys () const HB_AUTO_RETURN\n+  (\n+    + hb_array (items, mask ? mask + 1 : 0)\n+    | hb_filter (&item_t::is_real)\n+    | hb_map (&item_t::key)\n+    | hb_map (hb_ridentity)\n+  )\n+  auto values () const HB_AUTO_RETURN\n+  (\n+    + hb_array (items, mask ? mask + 1 : 0)\n+    | hb_filter (&item_t::is_real)\n+    | hb_map (&item_t::value)\n+    | hb_map (hb_ridentity)\n+  )\n+\n+  \/* Sink interface. *\/\n+  hb_hashmap_t& operator << (const hb_pair_t<K, V>& v)\n+  { set (v.first, v.second); return *this; }\n+\n+  protected:\n+\n+  void set_with_hash (K key, uint32_t hash, V value)\n@@ -132,1 +220,1 @@\n-    if (unlikely (key == INVALID)) return;\n+    if (unlikely (key == kINVALID)) return;\n@@ -134,1 +222,1 @@\n-    unsigned int i = bucket_for (key);\n+    unsigned int i = bucket_for_hash (key, hash);\n@@ -136,1 +224,1 @@\n-    if (value == INVALID && items[i].key != key)\n+    if (value == vINVALID && items[i].key != key)\n@@ -148,0 +236,1 @@\n+    items[i].hash = hash;\n@@ -152,7 +241,0 @@\n-\n-  }\n-  hb_codepoint_t get (hb_codepoint_t key) const\n-  {\n-    if (unlikely (!items)) return INVALID;\n-    unsigned int i = bucket_for (key);\n-    return items[i].key == key ? items[i].value : INVALID;\n@@ -161,11 +243,1 @@\n-  void del (hb_codepoint_t key) { set (key, INVALID); }\n-\n-  bool has (hb_codepoint_t key) const\n-  { return get (key) != INVALID; }\n-\n-  hb_codepoint_t operator [] (unsigned int key) const\n-  { return get (key); }\n-\n-  static constexpr hb_codepoint_t INVALID = HB_MAP_VALUE_INVALID;\n-\n-  void clear ()\n+  unsigned int bucket_for (K key) const\n@@ -173,2 +245,1 @@\n-    memset (items, 0xFF, ((size_t) mask + 1) * sizeof (item_t));\n-    population = occupancy = 0;\n+    return bucket_for_hash (key, hb_hash (key));\n@@ -177,7 +248,1 @@\n-  bool is_empty () const { return population == 0; }\n-\n-  unsigned int get_population () const { return population; }\n-\n-  protected:\n-\n-  unsigned int bucket_for (hb_codepoint_t key) const\n+  unsigned int bucket_for_hash (K key, uint32_t hash) const\n@@ -185,1 +250,1 @@\n-    unsigned int i = Hash (key) % prime;\n+    unsigned int i = hash % prime;\n@@ -187,1 +252,1 @@\n-    unsigned int tombstone = INVALID;\n+    unsigned int tombstone = (unsigned) -1;\n@@ -190,1 +255,1 @@\n-      if (items[i].key == key)\n+      if (items[i].hash == hash && items[i] == key)\n@@ -192,1 +257,1 @@\n-      if (tombstone == INVALID && items[i].is_tombstone ())\n+      if (tombstone == (unsigned) -1 && items[i].is_tombstone ())\n@@ -196,1 +261,1 @@\n-    return tombstone == INVALID ? i : tombstone;\n+    return tombstone == (unsigned) -1 ? i : tombstone;\n@@ -251,0 +316,9 @@\n+\/*\n+ * hb_map_t\n+ *\/\n+\n+struct hb_map_t : hb_hashmap_t<hb_codepoint_t,\n+                               hb_codepoint_t,\n+                               HB_MAP_VALUE_INVALID,\n+                               HB_MAP_VALUE_INVALID> {};\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-map.hh","additions":132,"deletions":58,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -0,0 +1,410 @@\n+\/*\n+ * Copyright © 2018  Google, Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Google Author(s): Behdad Esfahbod\n+ *\/\n+\n+#ifndef HB_META_HH\n+#define HB_META_HH\n+\n+#include \"hb.hh\"\n+\n+\n+\/*\n+ * C++ template meta-programming & fundamentals used with them.\n+ *\/\n+\n+\/* Void!  For when we need a expression-type of void. *\/\n+struct hb_empty_t {};\n+\n+\/* https:\/\/en.cppreference.com\/w\/cpp\/types\/void_t *\/\n+template<typename... Ts> struct _hb_void_t { typedef void type; };\n+template<typename... Ts> using hb_void_t = typename _hb_void_t<Ts...>::type;\n+\n+template<typename Head, typename... Ts> struct _hb_head_t { typedef Head type; };\n+template<typename... Ts> using hb_head_t = typename _hb_head_t<Ts...>::type;\n+\n+template <typename T, T v> struct hb_integral_constant { static constexpr T value = v; };\n+template <bool b> using hb_bool_constant = hb_integral_constant<bool, b>;\n+using hb_true_type = hb_bool_constant<true>;\n+using hb_false_type = hb_bool_constant<false>;\n+\n+\n+\/* Basic type SFINAE. *\/\n+\n+template <bool B, typename T = void> struct hb_enable_if {};\n+template <typename T>                struct hb_enable_if<true, T> { typedef T type; };\n+#define hb_enable_if(Cond) typename hb_enable_if<(Cond)>::type* = nullptr\n+\/* Concepts\/Requires alias: *\/\n+#define hb_requires(Cond) hb_enable_if((Cond))\n+\n+template <typename T, typename T2> struct hb_is_same : hb_false_type {};\n+template <typename T>              struct hb_is_same<T, T> : hb_true_type {};\n+#define hb_is_same(T, T2) hb_is_same<T, T2>::value\n+\n+\/* Function overloading SFINAE and priority. *\/\n+\n+#define HB_RETURN(Ret, E) -> hb_head_t<Ret, decltype ((E))> { return (E); }\n+#define HB_AUTO_RETURN(E) -> decltype ((E)) { return (E); }\n+#define HB_VOID_RETURN(E) -> hb_void_t<decltype ((E))> { (E); }\n+\n+template <unsigned Pri> struct hb_priority : hb_priority<Pri - 1> {};\n+template <>             struct hb_priority<0> {};\n+#define hb_prioritize hb_priority<16> ()\n+\n+#define HB_FUNCOBJ(x) static_const x HB_UNUSED\n+\n+\n+template <typename T> struct hb_type_identity_t { typedef T type; };\n+template <typename T> using hb_type_identity = typename hb_type_identity_t<T>::type;\n+\n+struct\n+{\n+  template <typename T> constexpr T*\n+  operator () (T& arg) const\n+  {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wcast-align\"\n+    \/* https:\/\/en.cppreference.com\/w\/cpp\/memory\/addressof *\/\n+    return reinterpret_cast<T*> (\n+             &const_cast<char&> (\n+                reinterpret_cast<const volatile char&> (arg)));\n+#pragma GCC diagnostic pop\n+  }\n+}\n+HB_FUNCOBJ (hb_addressof);\n+\n+template <typename T> static inline T hb_declval ();\n+#define hb_declval(T) (hb_declval<T> ())\n+\n+template <typename T> struct hb_match_const             : hb_type_identity_t<T>, hb_bool_constant<false>{};\n+template <typename T> struct hb_match_const<const T>    : hb_type_identity_t<T>, hb_bool_constant<true> {};\n+template <typename T> using hb_remove_const = typename hb_match_const<T>::type;\n+template <typename T> using hb_add_const = const T;\n+#define hb_is_const(T) hb_match_const<T>::value\n+template <typename T> struct hb_match_reference         : hb_type_identity_t<T>, hb_bool_constant<false>{};\n+template <typename T> struct hb_match_reference<T &>    : hb_type_identity_t<T>, hb_bool_constant<true> {};\n+template <typename T> struct hb_match_reference<T &&>   : hb_type_identity_t<T>, hb_bool_constant<true> {};\n+template <typename T> using hb_remove_reference = typename hb_match_reference<T>::type;\n+template <typename T> auto _hb_try_add_lvalue_reference (hb_priority<1>) -> hb_type_identity<T&>;\n+template <typename T> auto _hb_try_add_lvalue_reference (hb_priority<0>) -> hb_type_identity<T>;\n+template <typename T> using hb_add_lvalue_reference = decltype (_hb_try_add_lvalue_reference<T> (hb_prioritize));\n+template <typename T> auto _hb_try_add_rvalue_reference (hb_priority<1>) -> hb_type_identity<T&&>;\n+template <typename T> auto _hb_try_add_rvalue_reference (hb_priority<0>) -> hb_type_identity<T>;\n+template <typename T> using hb_add_rvalue_reference = decltype (_hb_try_add_rvalue_reference<T> (hb_prioritize));\n+#define hb_is_reference(T) hb_match_reference<T>::value\n+template <typename T> struct hb_match_pointer           : hb_type_identity_t<T>, hb_bool_constant<false>{};\n+template <typename T> struct hb_match_pointer<T *>      : hb_type_identity_t<T>, hb_bool_constant<true> {};\n+template <typename T> using hb_remove_pointer = typename hb_match_pointer<T>::type;\n+template <typename T> auto _hb_try_add_pointer (hb_priority<1>) -> hb_type_identity<hb_remove_reference<T>*>;\n+template <typename T> auto _hb_try_add_pointer (hb_priority<1>) -> hb_type_identity<T>;\n+template <typename T> using hb_add_pointer = decltype (_hb_try_add_pointer<T> (hb_prioritize));\n+#define hb_is_pointer(T) hb_match_pointer<T>::value\n+\n+\n+\/* TODO Add feature-parity to std::decay. *\/\n+template <typename T> using hb_decay = hb_remove_const<hb_remove_reference<T>>;\n+\n+\n+template<bool B, class T, class F>\n+struct _hb_conditional { typedef T type; };\n+template<class T, class F>\n+struct _hb_conditional<false, T, F> { typedef F type; };\n+template<bool B, class T, class F>\n+using hb_conditional = typename _hb_conditional<B, T, F>::type;\n+\n+\n+template <typename From, typename To>\n+struct hb_is_convertible\n+{\n+  private:\n+  static constexpr bool   from_void = hb_is_same (void, hb_decay<From>);\n+  static constexpr bool     to_void = hb_is_same (void, hb_decay<To>  );\n+  static constexpr bool either_void = from_void || to_void;\n+  static constexpr bool   both_void = from_void && to_void;\n+\n+  static hb_true_type impl2 (hb_conditional<to_void, int, To>);\n+\n+  template <typename T>\n+  static auto impl (hb_priority<1>) -> decltype (impl2 (hb_declval (T)));\n+  template <typename T>\n+  static hb_false_type impl (hb_priority<0>);\n+  public:\n+  static constexpr bool value = both_void ||\n+                       (!either_void &&\n+                        decltype (impl<hb_conditional<from_void, int, From>> (hb_prioritize))::value);\n+};\n+#define hb_is_convertible(From,To) hb_is_convertible<From, To>::value\n+\n+template <typename Base, typename Derived>\n+using hb_is_base_of = hb_is_convertible<hb_decay<Derived> *, hb_decay<Base> *>;\n+#define hb_is_base_of(Base,Derived) hb_is_base_of<Base, Derived>::value\n+\n+template <typename From, typename To>\n+using hb_is_cr_convertible = hb_bool_constant<\n+  hb_is_same (hb_decay<From>, hb_decay<To>) &&\n+  (!hb_is_const (From) || hb_is_const (To)) &&\n+  (!hb_is_reference (To) || hb_is_const (To) || hb_is_reference (To))\n+>;\n+#define hb_is_cr_convertible(From,To) hb_is_cr_convertible<From, To>::value\n+\n+\/* std::move and std::forward *\/\n+\n+template <typename T>\n+static constexpr hb_remove_reference<T>&& hb_move (T&& t) { return (hb_remove_reference<T>&&) (t); }\n+\n+template <typename T>\n+static constexpr T&& hb_forward (hb_remove_reference<T>& t) { return (T&&) t; }\n+template <typename T>\n+static constexpr T&& hb_forward (hb_remove_reference<T>&& t) { return (T&&) t; }\n+\n+struct\n+{\n+  template <typename T> constexpr auto\n+  operator () (T&& v) const HB_AUTO_RETURN (hb_forward<T> (v))\n+\n+  template <typename T> constexpr auto\n+  operator () (T *v) const HB_AUTO_RETURN (*v)\n+}\n+HB_FUNCOBJ (hb_deref);\n+\n+struct\n+{\n+  template <typename T> constexpr auto\n+  operator () (T&& v) const HB_AUTO_RETURN (hb_forward<T> (v))\n+\n+  template <typename T> constexpr auto\n+  operator () (T& v) const HB_AUTO_RETURN (hb_addressof (v))\n+}\n+HB_FUNCOBJ (hb_ref);\n+\n+template <typename T>\n+struct hb_reference_wrapper\n+{\n+  hb_reference_wrapper (T v) : v (v) {}\n+  bool operator == (const hb_reference_wrapper& o) const { return v == o.v; }\n+  bool operator != (const hb_reference_wrapper& o) const { return v != o.v; }\n+  operator T () const { return v; }\n+  T get () const { return v; }\n+  T v;\n+};\n+template <typename T>\n+struct hb_reference_wrapper<T&>\n+{\n+  hb_reference_wrapper (T& v) : v (hb_addressof (v)) {}\n+  bool operator == (const hb_reference_wrapper& o) const { return v == o.v; }\n+  bool operator != (const hb_reference_wrapper& o) const { return v != o.v; }\n+  operator T& () const { return *v; }\n+  T& get () const { return *v; }\n+  T* v;\n+};\n+\n+\n+template <typename T>\n+using hb_is_integral = hb_bool_constant<\n+  hb_is_same (hb_decay<T>, char) ||\n+  hb_is_same (hb_decay<T>, signed char) ||\n+  hb_is_same (hb_decay<T>, unsigned char) ||\n+  hb_is_same (hb_decay<T>, signed int) ||\n+  hb_is_same (hb_decay<T>, unsigned int) ||\n+  hb_is_same (hb_decay<T>, signed short) ||\n+  hb_is_same (hb_decay<T>, unsigned short) ||\n+  hb_is_same (hb_decay<T>, signed long) ||\n+  hb_is_same (hb_decay<T>, unsigned long) ||\n+  hb_is_same (hb_decay<T>, signed long long) ||\n+  hb_is_same (hb_decay<T>, unsigned long long) ||\n+  false\n+>;\n+#define hb_is_integral(T) hb_is_integral<T>::value\n+template <typename T>\n+using hb_is_floating_point = hb_bool_constant<\n+  hb_is_same (hb_decay<T>, float) ||\n+  hb_is_same (hb_decay<T>, double) ||\n+  hb_is_same (hb_decay<T>, long double) ||\n+  false\n+>;\n+#define hb_is_floating_point(T) hb_is_floating_point<T>::value\n+template <typename T>\n+using hb_is_arithmetic = hb_bool_constant<\n+  hb_is_integral (T) ||\n+  hb_is_floating_point (T) ||\n+  false\n+>;\n+#define hb_is_arithmetic(T) hb_is_arithmetic<T>::value\n+\n+\n+template <typename T>\n+using hb_is_signed = hb_conditional<hb_is_arithmetic (T),\n+                                    hb_bool_constant<(T) -1 < (T) 0>,\n+                                    hb_false_type>;\n+#define hb_is_signed(T) hb_is_signed<T>::value\n+template <typename T>\n+using hb_is_unsigned = hb_conditional<hb_is_arithmetic (T),\n+                                      hb_bool_constant<(T) 0 < (T) -1>,\n+                                      hb_false_type>;\n+#define hb_is_unsigned(T) hb_is_unsigned<T>::value\n+\n+template <typename T> struct hb_int_min;\n+template <> struct hb_int_min<char>                     : hb_integral_constant<char,                    CHAR_MIN>       {};\n+template <> struct hb_int_min<signed char>              : hb_integral_constant<signed char,             SCHAR_MIN>      {};\n+template <> struct hb_int_min<unsigned char>            : hb_integral_constant<unsigned char,           0>              {};\n+template <> struct hb_int_min<signed short>             : hb_integral_constant<signed short,            SHRT_MIN>       {};\n+template <> struct hb_int_min<unsigned short>           : hb_integral_constant<unsigned short,          0>              {};\n+template <> struct hb_int_min<signed int>               : hb_integral_constant<signed int,              INT_MIN>        {};\n+template <> struct hb_int_min<unsigned int>             : hb_integral_constant<unsigned int,            0>              {};\n+template <> struct hb_int_min<signed long>              : hb_integral_constant<signed long,             LONG_MIN>       {};\n+template <> struct hb_int_min<unsigned long>            : hb_integral_constant<unsigned long,           0>              {};\n+template <> struct hb_int_min<signed long long>         : hb_integral_constant<signed long long,        LLONG_MIN>      {};\n+template <> struct hb_int_min<unsigned long long>       : hb_integral_constant<unsigned long long,      0>              {};\n+#define hb_int_min(T) hb_int_min<T>::value\n+template <typename T> struct hb_int_max;\n+template <> struct hb_int_max<char>                     : hb_integral_constant<char,                    CHAR_MAX>       {};\n+template <> struct hb_int_max<signed char>              : hb_integral_constant<signed char,             SCHAR_MAX>      {};\n+template <> struct hb_int_max<unsigned char>            : hb_integral_constant<unsigned char,           UCHAR_MAX>      {};\n+template <> struct hb_int_max<signed short>             : hb_integral_constant<signed short,            SHRT_MAX>       {};\n+template <> struct hb_int_max<unsigned short>           : hb_integral_constant<unsigned short,          USHRT_MAX>      {};\n+template <> struct hb_int_max<signed int>               : hb_integral_constant<signed int,              INT_MAX>        {};\n+template <> struct hb_int_max<unsigned int>             : hb_integral_constant<unsigned int,            UINT_MAX>       {};\n+template <> struct hb_int_max<signed long>              : hb_integral_constant<signed long,             LONG_MAX>       {};\n+template <> struct hb_int_max<unsigned long>            : hb_integral_constant<unsigned long,           ULONG_MAX>      {};\n+template <> struct hb_int_max<signed long long>         : hb_integral_constant<signed long long,        LLONG_MAX>      {};\n+template <> struct hb_int_max<unsigned long long>       : hb_integral_constant<unsigned long long,      ULLONG_MAX>     {};\n+#define hb_int_max(T) hb_int_max<T>::value\n+\n+\n+\n+template <typename T, typename>\n+struct _hb_is_destructible : hb_false_type {};\n+template <typename T>\n+struct _hb_is_destructible<T, hb_void_t<decltype (hb_declval (T).~T ())>> : hb_true_type {};\n+template <typename T>\n+using hb_is_destructible = _hb_is_destructible<T, void>;\n+#define hb_is_destructible(T) hb_is_destructible<T>::value\n+\n+template <typename T, typename, typename ...Ts>\n+struct _hb_is_constructible : hb_false_type {};\n+template <typename T, typename ...Ts>\n+struct _hb_is_constructible<T, hb_void_t<decltype (T (hb_declval (Ts)...))>, Ts...> : hb_true_type {};\n+template <typename T, typename ...Ts>\n+using hb_is_constructible = _hb_is_constructible<T, void, Ts...>;\n+#define hb_is_constructible(...) hb_is_constructible<__VA_ARGS__>::value\n+\n+template <typename T>\n+using hb_is_default_constructible = hb_is_constructible<T>;\n+#define hb_is_default_constructible(T) hb_is_default_constructible<T>::value\n+\n+template <typename T>\n+using hb_is_copy_constructible = hb_is_constructible<T, hb_add_lvalue_reference<hb_add_const<T>>>;\n+#define hb_is_copy_constructible(T) hb_is_copy_constructible<T>::value\n+\n+template <typename T>\n+using hb_is_move_constructible = hb_is_constructible<T, hb_add_rvalue_reference<hb_add_const<T>>>;\n+#define hb_is_move_constructible(T) hb_is_move_constructible<T>::value\n+\n+template <typename T, typename U, typename>\n+struct _hb_is_assignable : hb_false_type {};\n+template <typename T, typename U>\n+struct _hb_is_assignable<T, U, hb_void_t<decltype (hb_declval (T) = hb_declval (U))>> : hb_true_type {};\n+template <typename T, typename U>\n+using hb_is_assignable = _hb_is_assignable<T, U, void>;\n+#define hb_is_assignable(T,U) hb_is_assignable<T, U>::value\n+\n+template <typename T>\n+using hb_is_copy_assignable = hb_is_assignable<hb_add_lvalue_reference<T>,\n+                                               hb_add_lvalue_reference<hb_add_const<T>>>;\n+#define hb_is_copy_assignable(T) hb_is_copy_assignable<T>::value\n+\n+template <typename T>\n+using hb_is_move_assignable = hb_is_assignable<hb_add_lvalue_reference<T>,\n+                                               hb_add_rvalue_reference<T>>;\n+#define hb_is_move_assignable(T) hb_is_move_assignable<T>::value\n+\n+\/* Trivial versions. *\/\n+\n+template <typename T> union hb_trivial { T value; };\n+\n+template <typename T>\n+using hb_is_trivially_destructible= hb_is_destructible<hb_trivial<T>>;\n+#define hb_is_trivially_destructible(T) hb_is_trivially_destructible<T>::value\n+\n+\/* Don't know how to do the following. *\/\n+\/\/template <typename T, typename ...Ts>\n+\/\/using hb_is_trivially_constructible= hb_is_constructible<hb_trivial<T>, hb_trivial<Ts>...>;\n+\/\/#define hb_is_trivially_constructible(...) hb_is_trivially_constructible<__VA_ARGS__>::value\n+\n+template <typename T>\n+using hb_is_trivially_default_constructible= hb_is_default_constructible<hb_trivial<T>>;\n+#define hb_is_trivially_default_constructible(T) hb_is_trivially_default_constructible<T>::value\n+\n+template <typename T>\n+using hb_is_trivially_copy_constructible= hb_is_copy_constructible<hb_trivial<T>>;\n+#define hb_is_trivially_copy_constructible(T) hb_is_trivially_copy_constructible<T>::value\n+\n+template <typename T>\n+using hb_is_trivially_move_constructible= hb_is_move_constructible<hb_trivial<T>>;\n+#define hb_is_trivially_move_constructible(T) hb_is_trivially_move_constructible<T>::value\n+\n+\/* Don't know how to do the following. *\/\n+\/\/template <typename T, typename U>\n+\/\/using hb_is_trivially_assignable= hb_is_assignable<hb_trivial<T>, hb_trivial<U>>;\n+\/\/#define hb_is_trivially_assignable(T,U) hb_is_trivially_assignable<T, U>::value\n+\n+template <typename T>\n+using hb_is_trivially_copy_assignable= hb_is_copy_assignable<hb_trivial<T>>;\n+#define hb_is_trivially_copy_assignable(T) hb_is_trivially_copy_assignable<T>::value\n+\n+template <typename T>\n+using hb_is_trivially_move_assignable= hb_is_move_assignable<hb_trivial<T>>;\n+#define hb_is_trivially_move_assignable(T) hb_is_trivially_move_assignable<T>::value\n+\n+template <typename T>\n+using hb_is_trivially_copyable= hb_bool_constant<\n+  hb_is_trivially_destructible (T) &&\n+  (!hb_is_move_assignable (T) || hb_is_trivially_move_assignable (T)) &&\n+  (!hb_is_move_constructible (T) || hb_is_trivially_move_constructible (T)) &&\n+  (!hb_is_copy_assignable (T) || hb_is_trivially_copy_assignable (T)) &&\n+  (!hb_is_copy_constructible (T) || hb_is_trivially_copy_constructible (T)) &&\n+  true\n+>;\n+#define hb_is_trivially_copyable(T) hb_is_trivially_copyable<T>::value\n+\n+template <typename T>\n+using hb_is_trivial= hb_bool_constant<\n+  hb_is_trivially_copyable (T) &&\n+  hb_is_trivially_default_constructible (T)\n+>;\n+#define hb_is_trivial(T) hb_is_trivial<T>::value\n+\n+\/* hb_unwrap_type (T)\n+ * If T has no T::type, returns T. Otherwise calls itself on T::type recursively.\n+ *\/\n+\n+template <typename T, typename>\n+struct _hb_unwrap_type : hb_type_identity_t<T> {};\n+template <typename T>\n+struct _hb_unwrap_type<T, hb_void_t<typename T::type>> : _hb_unwrap_type<typename T::type, void> {};\n+template <typename T>\n+using hb_unwrap_type = _hb_unwrap_type<T, void>;\n+#define hb_unwrap_type(T) typename hb_unwrap_type<T>::type\n+\n+#endif \/* HB_META_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-meta.hh","additions":410,"deletions":0,"binary":false,"changes":410,"status":"added"},{"patch":"@@ -51,0 +51,11 @@\n+#elif !defined(HB_NO_MT) && (defined(HAVE_PTHREAD) || defined(__APPLE__))\n+\n+#include <pthread.h>\n+typedef pthread_mutex_t hb_mutex_impl_t;\n+#define HB_MUTEX_IMPL_INIT      PTHREAD_MUTEX_INITIALIZER\n+#define hb_mutex_impl_init(M)   pthread_mutex_init (M, nullptr)\n+#define hb_mutex_impl_lock(M)   pthread_mutex_lock (M)\n+#define hb_mutex_impl_unlock(M) pthread_mutex_unlock (M)\n+#define hb_mutex_impl_finish(M) pthread_mutex_destroy (M)\n+\n+\n@@ -53,1 +64,0 @@\n-#include <windows.h>\n@@ -56,1 +66,1 @@\n-#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)\n+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)\n@@ -66,11 +76,0 @@\n-#elif !defined(HB_NO_MT) && (defined(HAVE_PTHREAD) || defined(__APPLE__))\n-\n-#include <pthread.h>\n-typedef pthread_mutex_t hb_mutex_impl_t;\n-#define HB_MUTEX_IMPL_INIT      PTHREAD_MUTEX_INITIALIZER\n-#define hb_mutex_impl_init(M)   pthread_mutex_init (M, nullptr)\n-#define hb_mutex_impl_lock(M)   pthread_mutex_lock (M)\n-#define hb_mutex_impl_unlock(M) pthread_mutex_unlock (M)\n-#define hb_mutex_impl_finish(M) pthread_mutex_destroy (M)\n-\n-\n@@ -95,19 +94,1 @@\n-#elif !defined(HB_NO_MT)\n-\n-#if defined(HAVE_SCHED_H) && defined(HAVE_SCHED_YIELD)\n-# include <sched.h>\n-# define HB_SCHED_YIELD() sched_yield ()\n-#else\n-# define HB_SCHED_YIELD() HB_STMT_START {} HB_STMT_END\n-#endif\n-\n-#define HB_MUTEX_INT_NIL 1 \/* Warn that fallback implementation is in use. *\/\n-typedef volatile int hb_mutex_impl_t;\n-#define HB_MUTEX_IMPL_INIT      0\n-#define hb_mutex_impl_init(M)   *(M) = 0\n-#define hb_mutex_impl_lock(M)   HB_STMT_START { while (*(M)) HB_SCHED_YIELD (); (*(M))++; } HB_STMT_END\n-#define hb_mutex_impl_unlock(M) (*(M))--;\n-#define hb_mutex_impl_finish(M) HB_STMT_START {} HB_STMT_END\n-\n-\n-#else \/* HB_NO_MT *\/\n+#elif defined(HB_NO_MT)\n@@ -123,0 +104,5 @@\n+#else\n+\n+#error \"Could not find any system to define mutex macros.\"\n+#error \"Check hb-mutex.hh for possible resolutions.\"\n+\n@@ -130,2 +116,0 @@\n-  \/* TODO Add tracing. *\/\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-mutex.hh","additions":18,"deletions":34,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"hb-meta.hh\"\n@@ -39,1 +40,1 @@\n-#define HB_NULL_POOL_SIZE 9880\n+#define HB_NULL_POOL_SIZE 384\n@@ -48,5 +49,2 @@\n-template<bool> struct _hb_bool_type {};\n-\n-template <typename T, typename B>\n-struct _hb_null_size\n-{ enum { value = sizeof (T) }; };\n+template <typename T, typename>\n+struct _hb_null_size : hb_integral_constant<unsigned, sizeof (T)> {};\n@@ -54,2 +52,1 @@\n-struct _hb_null_size<T, _hb_bool_type<(bool) (1 + (unsigned int) T::min_size)> >\n-{ enum { value = T::null_size }; };\n+struct _hb_null_size<T, hb_void_t<decltype (T::min_size)>> : hb_integral_constant<unsigned, T::null_size> {};\n@@ -58,2 +55,1 @@\n-struct hb_null_size\n-{ enum { value = _hb_null_size<T, _hb_bool_type<true> >::value }; };\n+using hb_null_size = _hb_null_size<T, void>;\n@@ -67,3 +63,2 @@\n-template <typename T, typename B>\n-struct _hb_static_size\n-{ enum { value = sizeof (T) }; };\n+template <typename T, typename>\n+struct _hb_static_size : hb_integral_constant<unsigned, sizeof (T)> {};\n@@ -71,3 +66,1 @@\n-struct _hb_static_size<T, _hb_bool_type<(bool) (1 + (unsigned int) T::min_size)> >\n-{ enum { value = T::static_size }; };\n-\n+struct _hb_static_size<T, hb_void_t<decltype (T::min_size)>> : hb_integral_constant<unsigned, T::static_size> {};\n@@ -75,2 +68,1 @@\n-struct hb_static_size\n-{ enum { value = _hb_static_size<T, _hb_bool_type<true> >::value }; };\n+using hb_static_size = _hb_static_size<T, void>;\n@@ -80,19 +72,0 @@\n-\/* hb_assign (obj, value)\n- * Calls obj.set (value) if obj.min_size is defined and value has different type\n- * from obj, or obj = v otherwise. *\/\n-\n-template <typename T, typename V, typename B>\n-struct _hb_assign\n-{ static inline void value (T &o, const V v) { o = v; } };\n-template <typename T, typename V>\n-struct _hb_assign<T, V, _hb_bool_type<(bool) (1 + (unsigned int) T::min_size)> >\n-{ static inline void value (T &o, const V v) { o.set (v); } };\n-template <typename T>\n-struct _hb_assign<T, T, _hb_bool_type<(bool) (1 + (unsigned int) T::min_size)> >\n-{ static inline void value (T &o, const T v) { o = v; } };\n-\n-template <typename T, typename V>\n-static inline void hb_assign (T &o, const V v)\n-{ _hb_assign<T, V, _hb_bool_type<true> >::value (o, v); }\n-\n-\n@@ -104,1 +77,1 @@\n-hb_vector_size_impl_t const _hb_NullPool[(HB_NULL_POOL_SIZE + sizeof (hb_vector_size_impl_t) - 1) \/ sizeof (hb_vector_size_impl_t)];\n+uint64_t const _hb_NullPool[(HB_NULL_POOL_SIZE + sizeof (uint64_t) - 1) \/ sizeof (uint64_t)];\n@@ -108,4 +81,7 @@\n-static inline Type const & Null () {\n-  static_assert (hb_null_size (Type) <= HB_NULL_POOL_SIZE, \"Increase HB_NULL_POOL_SIZE.\");\n-  return *reinterpret_cast<Type const *> (_hb_NullPool);\n-}\n+struct Null {\n+  static Type const & get_null ()\n+  {\n+    static_assert (hb_null_size (Type) <= HB_NULL_POOL_SIZE, \"Increase HB_NULL_POOL_SIZE.\");\n+    return *reinterpret_cast<Type const *> (_hb_NullPool);\n+  }\n+};\n@@ -115,2 +91,2 @@\n-  typedef typename hb_remove_const (typename hb_remove_reference (QType)) Type;\n-  static const Type & get_null () { return Null<Type> (); }\n+  typedef hb_remove_const<hb_remove_reference<QType>> Type;\n+  static const Type & get_null () { return Null<Type>::get_null (); }\n@@ -125,3 +101,5 @@\n-        \/*static*\/ inline const Namespace::Type& Null<Namespace::Type> () { \\\n-          return *reinterpret_cast<const Namespace::Type *> (_hb_Null_##Namespace##_##Type); \\\n-        } \\\n+        struct Null<Namespace::Type> { \\\n+          static Namespace::Type const & get_null () { \\\n+            return *reinterpret_cast<const Namespace::Type *> (_hb_Null_##Namespace##_##Type); \\\n+          } \\\n+        }; \\\n@@ -129,1 +107,1 @@\n-        static_assert (true, \"Just so we take semicolon after.\")\n+        static_assert (true, \"\") \/* Require semicolon after. *\/\n@@ -137,4 +115,6 @@\n-        \/*static*\/ inline const Type& Null<Type> () { \\\n-          return _hb_Null_##Type; \\\n-        } \\\n-static_assert (true, \"Just so we take semicolon after.\")\n+        struct Null<Type> { \\\n+          static Type const & get_null () { \\\n+            return _hb_Null_##Type; \\\n+          } \\\n+        }; \\\n+        static_assert (true, \"\") \/* Require semicolon after. *\/\n@@ -151,1 +131,1 @@\n-\/*thread_local*\/ hb_vector_size_impl_t _hb_CrapPool[(HB_NULL_POOL_SIZE + sizeof (hb_vector_size_impl_t) - 1) \/ sizeof (hb_vector_size_impl_t)];\n+\/*thread_local*\/ uint64_t _hb_CrapPool[(HB_NULL_POOL_SIZE + sizeof (uint64_t) - 1) \/ sizeof (uint64_t)];\n@@ -158,1 +138,1 @@\n-  memcpy (obj, &Null(Type), sizeof (*obj));\n+  memcpy (obj, &Null (Type), sizeof (*obj));\n@@ -164,1 +144,1 @@\n-  typedef typename hb_remove_const (typename hb_remove_reference (QType)) Type;\n+  typedef hb_remove_const<hb_remove_reference<QType>> Type;\n@@ -171,1 +151,1 @@\n-  static Type & get () { return Crap(Type); }\n+  static Type & get () { return Crap (Type); }\n@@ -175,1 +155,1 @@\n-  static const Type & get () { return Null(Type); }\n+  static const Type & get () { return Null (Type); }\n@@ -187,1 +167,1 @@\n-  typedef typename hb_remove_pointer (P) T;\n+  typedef hb_remove_pointer<P> T;\n@@ -197,1 +177,1 @@\n-  T * get () const { return v ? v : const_cast<T *> (&Null(T)); }\n+  T * get () const { return v ? v : const_cast<T *> (&Null (T)); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-null.hh","additions":39,"deletions":59,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -0,0 +1,237 @@\n+\n+#line 1 \"hb-number-parser.rl\"\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ *\/\n+\n+#ifndef HB_NUMBER_PARSER_HH\n+#define HB_NUMBER_PARSER_HH\n+\n+#include \"hb.hh\"\n+\n+\n+#line 35 \"hb-number-parser.hh\"\n+static const unsigned char _double_parser_trans_keys[] = {\n+        0u, 0u, 43u, 57u, 46u, 57u, 48u, 57u, 43u, 57u, 48u, 57u, 48u, 101u, 48u, 57u,\n+        46u, 101u, 0\n+};\n+\n+static const char _double_parser_key_spans[] = {\n+        0, 15, 12, 10, 15, 10, 54, 10,\n+        56\n+};\n+\n+static const unsigned char _double_parser_index_offsets[] = {\n+        0, 0, 16, 29, 40, 56, 67, 122,\n+        133\n+};\n+\n+static const char _double_parser_indicies[] = {\n+        0, 1, 2, 3, 1, 4, 4,\n+        4, 4, 4, 4, 4, 4, 4, 4,\n+        1, 3, 1, 4, 4, 4, 4, 4,\n+        4, 4, 4, 4, 4, 1, 5, 5,\n+        5, 5, 5, 5, 5, 5, 5, 5,\n+        1, 6, 1, 7, 1, 1, 8, 8,\n+        8, 8, 8, 8, 8, 8, 8, 8,\n+        1, 8, 8, 8, 8, 8, 8, 8,\n+        8, 8, 8, 1, 5, 5, 5, 5,\n+        5, 5, 5, 5, 5, 5, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 9, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 9, 1, 8, 8, 8, 8, 8,\n+        8, 8, 8, 8, 8, 1, 3, 1,\n+        4, 4, 4, 4, 4, 4, 4, 4,\n+        4, 4, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 9, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 1, 1, 1,\n+        1, 1, 1, 1, 1, 9, 1, 0\n+};\n+\n+static const char _double_parser_trans_targs[] = {\n+        2, 0, 2, 3, 8, 6, 5, 5,\n+        7, 4\n+};\n+\n+static const char _double_parser_trans_actions[] = {\n+        0, 0, 1, 0, 2, 3, 0, 4,\n+        5, 0\n+};\n+\n+static const int double_parser_start = 1;\n+static const int double_parser_first_final = 6;\n+static const int double_parser_error = 0;\n+\n+static const int double_parser_en_main = 1;\n+\n+\n+#line 68 \"hb-number-parser.rl\"\n+\n+\n+\/* Works only for n < 512 *\/\n+static inline double\n+_pow10 (unsigned exponent)\n+{\n+  static const double _powers_of_10[] =\n+  {\n+    1.0e+256,\n+    1.0e+128,\n+    1.0e+64,\n+    1.0e+32,\n+    1.0e+16,\n+    1.0e+8,\n+    10000.,\n+    100.,\n+    10.\n+  };\n+  unsigned mask = 1 << (ARRAY_LENGTH (_powers_of_10) - 1);\n+  double result = 1;\n+  for (const double *power = _powers_of_10; mask; ++power, mask >>= 1)\n+    if (exponent & mask) result *= *power;\n+  return result;\n+}\n+\n+\/* a variant of strtod that also gets end of buffer in its second argument *\/\n+static inline double\n+strtod_rl (const char *p, const char **end_ptr \/* IN\/OUT *\/)\n+{\n+  double value = 0;\n+  double frac = 0;\n+  double frac_count = 0;\n+  unsigned exp = 0;\n+  bool neg = false, exp_neg = false, exp_overflow = false;\n+  const unsigned long long MAX_FRACT = 0xFFFFFFFFFFFFFull; \/* 2^52-1 *\/\n+  const unsigned MAX_EXP = 0x7FFu; \/* 2^11-1 *\/\n+\n+  const char *pe = *end_ptr;\n+  while (p < pe && ISSPACE (*p))\n+    p++;\n+\n+  int cs;\n+\n+#line 139 \"hb-number-parser.hh\"\n+        {\n+        cs = double_parser_start;\n+        }\n+\n+#line 144 \"hb-number-parser.hh\"\n+        {\n+        int _slen;\n+        int _trans;\n+        const unsigned char *_keys;\n+        const char *_inds;\n+        if ( p == pe )\n+                goto _test_eof;\n+        if ( cs == 0 )\n+                goto _out;\n+_resume:\n+        _keys = _double_parser_trans_keys + (cs<<1);\n+        _inds = _double_parser_indicies + _double_parser_index_offsets[cs];\n+\n+        _slen = _double_parser_key_spans[cs];\n+        _trans = _inds[ _slen > 0 && _keys[0] <=(*p) &&\n+                (*p) <= _keys[1] ?\n+                (*p) - _keys[0] : _slen ];\n+\n+        cs = _double_parser_trans_targs[_trans];\n+\n+        if ( _double_parser_trans_actions[_trans] == 0 )\n+                goto _again;\n+\n+        switch ( _double_parser_trans_actions[_trans] ) {\n+        case 1:\n+#line 37 \"hb-number-parser.rl\"\n+        { neg = true; }\n+        break;\n+        case 4:\n+#line 38 \"hb-number-parser.rl\"\n+        { exp_neg = true; }\n+        break;\n+        case 2:\n+#line 40 \"hb-number-parser.rl\"\n+        {\n+        value = value * 10. + ((*p) - '0');\n+}\n+        break;\n+        case 3:\n+#line 43 \"hb-number-parser.rl\"\n+        {\n+        if (likely (frac <= MAX_FRACT \/ 10))\n+        {\n+          frac = frac * 10. + ((*p) - '0');\n+          ++frac_count;\n+        }\n+}\n+        break;\n+        case 5:\n+#line 50 \"hb-number-parser.rl\"\n+        {\n+        if (likely (exp * 10 + ((*p) - '0') <= MAX_EXP))\n+          exp = exp * 10 + ((*p) - '0');\n+        else\n+          exp_overflow = true;\n+}\n+        break;\n+#line 202 \"hb-number-parser.hh\"\n+        }\n+\n+_again:\n+        if ( cs == 0 )\n+                goto _out;\n+        if ( ++p != pe )\n+                goto _resume;\n+        _test_eof: {}\n+        _out: {}\n+        }\n+\n+#line 113 \"hb-number-parser.rl\"\n+\n+\n+  *end_ptr = p;\n+\n+  if (frac_count) value += frac \/ _pow10 (frac_count);\n+  if (neg) value *= -1.;\n+\n+  if (unlikely (exp_overflow))\n+  {\n+    if (value == 0) return value;\n+    if (exp_neg)    return neg ? -DBL_MIN : DBL_MIN;\n+    else            return neg ? -DBL_MAX : DBL_MAX;\n+  }\n+\n+  if (exp)\n+  {\n+    if (exp_neg) value \/= _pow10 (exp);\n+    else         value *= _pow10 (exp);\n+  }\n+\n+  return value;\n+}\n+\n+#endif \/* HB_NUMBER_PARSER_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-number-parser.hh","additions":237,"deletions":0,"binary":false,"changes":237,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ *\/\n+\n+#include \"hb.hh\"\n+#include \"hb-machinery.hh\"\n+#include \"hb-number.hh\"\n+#include \"hb-number-parser.hh\"\n+\n+template<typename T, typename Func>\n+static bool\n+_parse_number (const char **pp, const char *end, T *pv,\n+               bool whole_buffer, Func f)\n+{\n+  char buf[32];\n+  unsigned len = hb_min (ARRAY_LENGTH (buf) - 1, (unsigned) (end - *pp));\n+  strncpy (buf, *pp, len);\n+  buf[len] = '\\0';\n+\n+  char *p = buf;\n+  char *pend = p;\n+\n+  errno = 0;\n+  *pv = f (p, &pend);\n+  if (unlikely (errno || p == pend ||\n+                \/* Check if consumed whole buffer if is requested *\/\n+                (whole_buffer && pend - p != end - *pp)))\n+    return false;\n+\n+  *pp += pend - p;\n+  return true;\n+}\n+\n+bool\n+hb_parse_int (const char **pp, const char *end, int *pv, bool whole_buffer)\n+{\n+  return _parse_number<int> (pp, end, pv, whole_buffer,\n+                             [] (const char *p, char **end)\n+                             { return strtol (p, end, 10); });\n+}\n+\n+bool\n+hb_parse_uint (const char **pp, const char *end, unsigned *pv,\n+               bool whole_buffer, int base)\n+{\n+  return _parse_number<unsigned> (pp, end, pv, whole_buffer,\n+                                  [base] (const char *p, char **end)\n+                                  { return strtoul (p, end, base); });\n+}\n+\n+bool\n+hb_parse_double (const char **pp, const char *end, double *pv, bool whole_buffer)\n+{\n+  const char *pend = end;\n+  *pv = strtod_rl (*pp, &pend);\n+  if (unlikely (*pp == pend)) return false;\n+  *pp = pend;\n+  return !whole_buffer || end == pend;\n+}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-number.cc","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ *\/\n+\n+#ifndef HB_NUMBER_HH\n+#define HB_NUMBER_HH\n+\n+HB_INTERNAL bool\n+hb_parse_int (const char **pp, const char *end, int *pv,\n+              bool whole_buffer = false);\n+\n+HB_INTERNAL bool\n+hb_parse_uint (const char **pp, const char *end, unsigned int *pv,\n+               bool whole_buffer = false, int base = 10);\n+\n+HB_INTERNAL bool\n+hb_parse_double (const char **pp, const char *end, double *pv,\n+                 bool whole_buffer = false);\n+\n+#endif \/* HB_NUMBER_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-number.hh","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -171,2 +171,2 @@\n-    bool operator == (hb_user_data_key_t *other_key) const { return key == other_key; }\n-    bool operator == (hb_user_data_item_t &other) const { return key == other.key; }\n+    bool operator == (const hb_user_data_key_t *other_key) const { return key == other_key; }\n+    bool operator == (const hb_user_data_item_t &other) const { return key == other.key; }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-object.hh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  static int cmp (const void *pa, const void *pb)\n+  HB_INTERNAL static int cmp (const void *pa, const void *pb)\n@@ -89,2 +89,2 @@\n-                                      unsigned int *table_count, \/* IN\/OUT *\/\n-                                      hb_tag_t     *table_tags \/* OUT *\/) const\n+                               unsigned int *table_count, \/* IN\/OUT *\/\n+                               hb_tag_t     *table_tags \/* OUT *\/) const\n@@ -94,9 +94,4 @@\n-      if (start_offset >= tables.len)\n-        *table_count = 0;\n-      else\n-        *table_count = MIN<unsigned int> (*table_count, tables.len - start_offset);\n-\n-      const TableRecord *sub_tables = tables.arrayZ + start_offset;\n-      unsigned int count = *table_count;\n-      for (unsigned int i = 0; i < count; i++)\n-        table_tags[i] = sub_tables[i].tag;\n+      + tables.sub_array (start_offset, table_count)\n+      | hb_map (&TableRecord::tag)\n+      | hb_sink (hb_array (table_tags, *table_count))\n+      ;\n@@ -109,1 +104,1 @@\n-    t.set (tag);\n+    t = tag;\n@@ -130,1 +125,1 @@\n-    sfnt_version.set (sfnt_tag);\n+    sfnt_version = sfnt_tag;\n@@ -143,2 +138,2 @@\n-      rec.tag.set (items[i].tag);\n-      rec.length.set (hb_blob_get_length (blob));\n+      rec.tag = items[i].tag;\n+      rec.length = blob->length;\n@@ -149,1 +144,1 @@\n-      if (unlikely (!start)) {return false;}\n+      if (unlikely (!start)) return false;\n@@ -151,1 +146,2 @@\n-      memcpy (start, hb_blob_get_data (blob, nullptr), rec.length);\n+      if (likely (rec.length))\n+        memcpy (start, blob->data, rec.length);\n@@ -162,1 +158,1 @@\n-        checksum_adjustment->set (0);\n+        *checksum_adjustment = 0;\n@@ -180,1 +176,1 @@\n-        checksum.set (checksum + rec.checkSum);\n+        checksum = checksum + rec.checkSum;\n@@ -183,1 +179,1 @@\n-      checksum_adjustment->set (0xB1B0AFBAu - checksum);\n+      *checksum_adjustment = 0xB1B0AFBAu - checksum;\n@@ -225,1 +221,1 @@\n-  LArrayOf<LOffsetTo<OffsetTable> >\n+  LArrayOf<LOffsetTo<OffsetTable>>\n@@ -251,1 +247,1 @@\n-    default:return Null(OpenTypeFontFace);\n+    default:return Null (OpenTypeFontFace);\n@@ -286,1 +282,1 @@\n-  { return CastR<OpenTypeFontFace> ((data_base+offset).arrayZ); }\n+  { return * reinterpret_cast<const OpenTypeFontFace *> ((data_base+offset).arrayZ); }\n@@ -289,1 +285,1 @@\n-                        const void *data_base) const\n+                 const void *data_base) const\n@@ -337,1 +333,1 @@\n-  NNOffsetTo<UnsizedArrayOf<ResourceRecord> >\n+  NNOffsetTo<UnsizedArrayOf<ResourceRecord>>\n@@ -393,1 +389,1 @@\n-  NNOffsetTo<ArrayOfM1<ResourceTypeRecord> >\n+  NNOffsetTo<ArrayOfM1<ResourceTypeRecord>>\n@@ -425,1 +421,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<HBUINT8> >\n+  LNNOffsetTo<UnsizedArrayOf<HBUINT8>>\n@@ -480,1 +476,1 @@\n-    default:            return Null(OpenTypeFontFace);\n+    default:            return Null (OpenTypeFontFace);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-open-file.hh","additions":25,"deletions":29,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -55,4 +55,0 @@\n-template <bool is_signed> struct hb_signedness_int;\n-template <> struct hb_signedness_int<false> { typedef unsigned int value; };\n-template <> struct hb_signedness_int<true>  { typedef   signed int value; };\n-\n@@ -64,1 +60,1 @@\n-  typedef typename hb_signedness_int<hb_is_signed<Type>::value>::value wide_type;\n+  typedef hb_conditional<hb_is_signed (Type), signed, unsigned> wide_type;\n@@ -66,1 +62,1 @@\n-  void set (wide_type i) { v.set (i); }\n+  IntType& operator = (wide_type i) { v = i; return *this; }\n@@ -68,3 +64,19 @@\n-  bool operator == (const IntType<Type,Size> &o) const { return (Type) v == (Type) o.v; }\n-  bool operator != (const IntType<Type,Size> &o) const { return !(*this == o); }\n-  static int cmp (const IntType<Type,Size> *a, const IntType<Type,Size> *b) { return b->cmp (*a); }\n+  bool operator == (const IntType &o) const { return (Type) v == (Type) o.v; }\n+  bool operator != (const IntType &o) const { return !(*this == o); }\n+\n+  IntType& operator += (unsigned count) { *this = *this + count; return *this; }\n+  IntType& operator -= (unsigned count) { *this = *this - count; return *this; }\n+  IntType& operator ++ () { *this += 1; return *this; }\n+  IntType& operator -- () { *this -= 1; return *this; }\n+  IntType operator ++ (int) { IntType c (*this); ++*this; return c; }\n+  IntType operator -- (int) { IntType c (*this); --*this; return c; }\n+\n+  HB_INTERNAL static int cmp (const IntType *a, const IntType *b)\n+  { return b->cmp (*a); }\n+  HB_INTERNAL static int cmp (const void *a, const void *b)\n+  {\n+    IntType *pa = (IntType *) a;\n+    IntType *pb = (IntType *) b;\n+\n+    return pb->cmp (*pa);\n+  }\n@@ -113,0 +125,1 @@\n+  F2DOT14& operator = (uint16_t i ) { HBINT16::operator= (i); return *this; }\n@@ -115,1 +128,1 @@\n-  void set_float (float f) { v.set (round (f * 16384.f)); }\n+  void set_float (float f) { v = roundf (f * 16384.f); }\n@@ -121,1 +134,1 @@\n-struct Fixed : HBINT32\n+struct HBFixed : HBINT32\n@@ -123,0 +136,1 @@\n+  HBFixed& operator = (uint32_t i) { HBINT32::operator= (i); return *this; }\n@@ -125,1 +139,1 @@\n-  void set_float (float f) { v.set (round (f * 65536.f)); }\n+  void set_float (float f) { v = roundf (f * 65536.f); }\n@@ -150,0 +164,1 @@\n+  Tag& operator = (hb_tag_t i) { HBUINT32::operator= (i); return *this; }\n@@ -158,1 +173,4 @@\n-typedef HBUINT16 GlyphID;\n+struct HBGlyphID : HBUINT16\n+{\n+  HBGlyphID& operator = (uint16_t i) { HBUINT16::operator= (i); return *this; }\n+};\n@@ -163,0 +181,1 @@\n+  Index& operator = (uint16_t i) { HBUINT16::operator= (i); return *this; }\n@@ -172,0 +191,2 @@\n+  Offset& operator = (typename Type::type i) { Type::operator= (i); return *this; }\n+\n@@ -179,1 +200,1 @@\n-    this->set ((char *) t - (char *) base); \/* TODO(serialize) Overflow? *\/\n+    c->check_assign (*this, (unsigned) ((char *) t - (char *) base));\n@@ -194,0 +215,2 @@\n+  CheckSum& operator = (uint32_t i) { HBUINT32::operator= (i); return *this; }\n+\n@@ -208,1 +231,1 @@\n-  { set (CalcTableChecksum ((const HBUINT32 *) data, length)); }\n+  { *this = CalcTableChecksum ((const HBUINT32 *) data, length); }\n@@ -251,2 +274,2 @@\n-  static const Type *get_null () { return &Null(Type); }\n-  static Type *get_crap ()       { return &Crap(Type); }\n+  static const Type *get_null () { return &Null (Type); }\n+  static       Type *get_crap () { return &Crap (Type); }\n@@ -258,0 +281,5 @@\n+  HB_DELETE_COPY_ASSIGN (OffsetTo);\n+  OffsetTo () = default;\n+\n+  OffsetTo& operator = (typename OffsetType::type i) { OffsetType::operator= (i); return *this; }\n+\n@@ -269,0 +297,13 @@\n+  template <typename Base,\n+            hb_enable_if (hb_is_convertible (const Base, const void *))>\n+  friend const Type& operator + (const Base &base, const OffsetTo &offset) { return offset ((const void *) base); }\n+  template <typename Base,\n+            hb_enable_if (hb_is_convertible (const Base, const void *))>\n+  friend const Type& operator + (const OffsetTo &offset, const Base &base) { return offset ((const void *) base); }\n+  template <typename Base,\n+            hb_enable_if (hb_is_convertible (Base, void *))>\n+  friend Type& operator + (Base &&base, OffsetTo &offset) { return offset ((void *) base); }\n+  template <typename Base,\n+            hb_enable_if (hb_is_convertible (Base, void *))>\n+  friend Type& operator + (OffsetTo &offset, Base &&base) { return offset ((void *) base); }\n+\n@@ -274,2 +315,3 @@\n-  template <typename T>\n-  void serialize_subset (hb_subset_context_t *c, const T &src, const void *base)\n+  template <typename ...Ts>\n+  bool serialize_subset (hb_subset_context_t *c, const OffsetTo& src,\n+                         const void *src_base, Ts&&... ds)\n@@ -277,8 +319,39 @@\n-    if (&src == &Null (T))\n-    {\n-      this->set (0);\n-      return;\n-    }\n-    serialize (c->serializer, base);\n-    if (!src.subset (c))\n-      this->set (0);\n+    *this = 0;\n+    if (src.is_null ())\n+      return false;\n+\n+    auto *s = c->serializer;\n+\n+    s->push ();\n+\n+    bool ret = c->dispatch (src_base+src, hb_forward<Ts> (ds)...);\n+\n+    if (ret || !has_null)\n+      s->add_link (*this, s->pop_pack ());\n+    else\n+      s->pop_discard ();\n+\n+    return ret;\n+  }\n+\n+  \/* TODO: Somehow merge this with previous function into a serialize_dispatch(). *\/\n+  \/* Workaround clang bug: https:\/\/bugs.llvm.org\/show_bug.cgi?id=23029\n+   * Can't compile: whence = hb_serialize_context_t::Head followed by Ts&&...\n+   *\/\n+  template <typename ...Ts>\n+  bool serialize_copy (hb_serialize_context_t *c, const OffsetTo& src,\n+                       const void *src_base, unsigned dst_bias,\n+                       hb_serialize_context_t::whence_t whence,\n+                       Ts&&... ds)\n+  {\n+    *this = 0;\n+    if (src.is_null ())\n+      return false;\n+\n+    c->push ();\n+\n+    bool ret = c->copy (src_base+src, hb_forward<Ts> (ds)...);\n+\n+    c->add_link (*this, c->pop_pack (), whence, dst_bias);\n+\n+    return ret;\n@@ -287,0 +360,4 @@\n+  bool serialize_copy (hb_serialize_context_t *c, const OffsetTo& src,\n+                       const void *src_base, unsigned dst_bias = 0)\n+  { return serialize_copy (c, src, src_base, dst_bias, hb_serialize_context_t::Head); }\n+\n@@ -296,28 +373,2 @@\n-  bool sanitize (hb_sanitize_context_t *c, const void *base) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (sanitize_shallow (c, base) &&\n-                  (this->is_null () ||\n-                   StructAtOffset<Type> (base, *this).sanitize (c) ||\n-                   neuter (c)));\n-  }\n-  template <typename T1>\n-  bool sanitize (hb_sanitize_context_t *c, const void *base, T1 d1) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (sanitize_shallow (c, base) &&\n-                  (this->is_null () ||\n-                   StructAtOffset<Type> (base, *this).sanitize (c, d1) ||\n-                   neuter (c)));\n-  }\n-  template <typename T1, typename T2>\n-  bool sanitize (hb_sanitize_context_t *c, const void *base, T1 d1, T2 d2) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (sanitize_shallow (c, base) &&\n-                  (this->is_null () ||\n-                   StructAtOffset<Type> (base, *this).sanitize (c, d1, d2) ||\n-                   neuter (c)));\n-  }\n-  template <typename T1, typename T2, typename T3>\n-  bool sanitize (hb_sanitize_context_t *c, const void *base, T1 d1, T2 d2, T3 d3) const\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, const void *base, Ts&&... ds) const\n@@ -328,1 +379,1 @@\n-                   StructAtOffset<Type> (base, *this).sanitize (c, d1, d2, d3) ||\n+                   c->dispatch (StructAtOffset<Type> (base, *this), hb_forward<Ts> (ds)...) ||\n@@ -341,8 +392,6 @@\n-template <typename Type,                               bool has_null=true> struct   LOffsetTo : OffsetTo<Type, HBUINT32,   has_null> {};\n-template <typename Type, typename OffsetType=HBUINT16                    > struct  NNOffsetTo : OffsetTo<Type, OffsetType, false> {};\n-template <typename Type                                                  > struct LNNOffsetTo : OffsetTo<Type, HBUINT32,   false> {};\n-\n-template <typename Base, typename OffsetType, bool has_null, typename Type>\n-static inline const Type& operator + (const Base &base, const OffsetTo<Type, OffsetType, has_null> &offset) { return offset (base); }\n-template <typename Base, typename OffsetType, bool has_null, typename Type>\n-static inline Type& operator + (Base &base, OffsetTo<Type, OffsetType, has_null> &offset) { return offset (base); }\n+template <typename Type, bool has_null=true>\n+using LOffsetTo = OffsetTo<Type, HBUINT32, has_null>;\n+template <typename Type, typename OffsetType=HBUINT16>\n+using NNOffsetTo = OffsetTo<Type, OffsetType, false>;\n+template <typename Type>\n+using LNNOffsetTo = LOffsetTo<Type, false>;\n@@ -361,1 +410,1 @@\n-  HB_NO_CREATE_COPY_ASSIGN_TEMPLATE (UnsizedArrayOf, Type);\n+  HB_DELETE_CREATE_COPY_ASSIGN (UnsizedArrayOf);\n@@ -387,1 +436,1 @@\n-  operator hb_array_t<Type> ()             { return as_array (); }\n+  operator hb_array_t<      Type> ()       { return as_array (); }\n@@ -396,0 +445,3 @@\n+  template <typename T>\n+  bool lfind (unsigned int len, const T &x, unsigned *pos = nullptr) const\n+  { return as_array (len).lfind (x, pos); }\n@@ -400,1 +452,1 @@\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int count) const\n+  bool serialize (hb_serialize_context_t *c, unsigned int items_len)\n@@ -402,12 +454,2 @@\n-    TRACE_SANITIZE (this);\n-    if (unlikely (!sanitize_shallow (c, count))) return_trace (false);\n-\n-    \/* Note: for structs that do not reference other structs,\n-     * we do not need to call their sanitize() as we already did\n-     * a bound check on the aggregate array size.  We just include\n-     * a small unreachable expression to make sure the structs\n-     * pointed to do have a simple sanitize(), ie. they do not\n-     * reference other structs via offsets.\n-     *\/\n-    (void) (false && arrayZ[0].sanitize (c));\n-\n+    TRACE_SERIALIZE (this);\n+    if (unlikely (!c->extend (*this, items_len))) return_trace (false);\n@@ -416,1 +458,3 @@\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int count, const void *base) const\n+  template <typename Iterator,\n+            hb_requires (hb_is_source_of (Iterator, Type))>\n+  bool serialize (hb_serialize_context_t *c, Iterator items)\n@@ -418,5 +462,7 @@\n-    TRACE_SANITIZE (this);\n-    if (unlikely (!sanitize_shallow (c, count))) return_trace (false);\n-    for (unsigned int i = 0; i < count; i++)\n-      if (unlikely (!arrayZ[i].sanitize (c, base)))\n-        return_trace (false);\n+    TRACE_SERIALIZE (this);\n+    unsigned count = items.len ();\n+    if (unlikely (!serialize (c, count))) return_trace (false);\n+    \/* TODO Umm. Just exhaust the iterator instead?  Being extra\n+     * cautious right now.. *\/\n+    for (unsigned i = 0; i < count; i++, ++items)\n+      arrayZ[i] = *items;\n@@ -425,2 +471,11 @@\n-  template <typename T>\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int count, const void *base, T user_data) const\n+\n+  UnsizedArrayOf* copy (hb_serialize_context_t *c, unsigned count) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->start_embed (this);\n+    if (unlikely (!as_array (count).copy (c))) return_trace (nullptr);\n+    return_trace (out);\n+  }\n+\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, unsigned int count, Ts&&... ds) const\n@@ -430,0 +485,1 @@\n+    if (!sizeof... (Ts) && hb_is_trivially_copyable (Type)) return_trace (true);\n@@ -431,1 +487,1 @@\n-      if (unlikely (!arrayZ[i].sanitize (c, base, user_data)))\n+      if (unlikely (!c->dispatch (arrayZ[i], hb_forward<Ts> (ds)...)))\n@@ -443,1 +499,1 @@\n-  Type          arrayZ[VAR];\n+  Type          arrayZ[HB_VAR_ARRAY];\n@@ -450,1 +506,1 @@\n-struct UnsizedOffsetArrayOf : UnsizedArrayOf<OffsetTo<Type, OffsetType, has_null> > {};\n+using UnsizedOffsetArrayOf = UnsizedArrayOf<OffsetTo<Type, OffsetType, has_null>>;\n@@ -471,8 +527,2 @@\n-\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int count) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace ((UnsizedOffsetArrayOf<Type, OffsetType, has_null>::sanitize (c, count, this)));\n-  }\n-  template <typename T>\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int count, T user_data) const\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, unsigned int count, Ts&&... ds) const\n@@ -481,1 +531,2 @@\n-    return_trace ((UnsizedOffsetArrayOf<Type, OffsetType, has_null>::sanitize (c, count, this, user_data)));\n+    return_trace ((UnsizedOffsetArrayOf<Type, OffsetType, has_null>\n+                   ::sanitize (c, count, this, hb_forward<Ts> (ds)...)));\n@@ -504,2 +555,2 @@\n-                     hb_bfind_not_found_t not_found = HB_BFIND_NOT_FOUND_DONT_STORE,\n-                     unsigned int to_store = (unsigned int) -1) const\n+              hb_bfind_not_found_t not_found = HB_BFIND_NOT_FOUND_DONT_STORE,\n+              unsigned int to_store = (unsigned int) -1) const\n@@ -517,1 +568,1 @@\n-  HB_NO_CREATE_COPY_ASSIGN_TEMPLATE2 (ArrayOf, Type, LenType);\n+  HB_DELETE_CREATE_COPY_ASSIGN (ArrayOf);\n@@ -535,6 +586,14 @@\n-  hb_array_t<Type> as_array ()\n-  { return hb_array (arrayZ, len); }\n-  hb_array_t<const Type> as_array () const\n-  { return hb_array (arrayZ, len); }\n-  operator hb_array_t<Type> (void)             { return as_array (); }\n-  operator hb_array_t<const Type> (void) const { return as_array (); }\n+  explicit operator bool () const { return len; }\n+\n+  void pop () { len--; }\n+\n+  hb_array_t<      Type> as_array ()       { return hb_array (arrayZ, len); }\n+  hb_array_t<const Type> as_array () const { return hb_array (arrayZ, len); }\n+\n+  \/* Iterator. *\/\n+  typedef hb_array_t<const Type>   iter_t;\n+  typedef hb_array_t<      Type> writer_t;\n+    iter_t   iter () const { return as_array (); }\n+  writer_t writer ()       { return as_array (); }\n+  operator   iter_t () const { return   iter (); }\n+  operator writer_t ()       { return writer (); }\n@@ -543,1 +602,1 @@\n-  { return as_array ().sub_array (start_offset, count);}\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -545,1 +604,1 @@\n-  { return as_array ().sub_array (start_offset, count);}\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -547,1 +606,1 @@\n-  { return as_array ().sub_array (start_offset, count);}\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -549,1 +608,1 @@\n-  { return as_array ().sub_array (start_offset, count);}\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -551,1 +610,1 @@\n-  bool serialize (hb_serialize_context_t *c, unsigned int items_len)\n+  hb_success_t serialize (hb_serialize_context_t *c, unsigned items_len)\n@@ -555,1 +614,1 @@\n-    len.set (items_len); \/* TODO(serialize) Overflow? *\/\n+    c->check_assign (len, items_len);\n@@ -559,2 +618,3 @@\n-  template <typename T>\n-  bool serialize (hb_serialize_context_t *c, hb_array_t<const T> items)\n+  template <typename Iterator,\n+            hb_requires (hb_is_source_of (Iterator, Type))>\n+  hb_success_t serialize (hb_serialize_context_t *c, Iterator items)\n@@ -563,3 +623,6 @@\n-    if (unlikely (!serialize (c, items.length))) return_trace (false);\n-    for (unsigned int i = 0; i < items.length; i++)\n-      hb_assign (arrayZ[i], items[i]);\n+    unsigned count = items.len ();\n+    if (unlikely (!serialize (c, count))) return_trace (false);\n+    \/* TODO Umm. Just exhaust the iterator instead?  Being extra\n+     * cautious right now.. *\/\n+    for (unsigned i = 0; i < count; i++, ++items)\n+      arrayZ[i] = *items;\n@@ -569,1 +632,1 @@\n-  bool sanitize (hb_sanitize_context_t *c) const\n+  Type* serialize_append (hb_serialize_context_t *c)\n@@ -571,13 +634,8 @@\n-    TRACE_SANITIZE (this);\n-    if (unlikely (!sanitize_shallow (c))) return_trace (false);\n-\n-    \/* Note: for structs that do not reference other structs,\n-     * we do not need to call their sanitize() as we already did\n-     * a bound check on the aggregate array size.  We just include\n-     * a small unreachable expression to make sure the structs\n-     * pointed to do have a simple sanitize(), ie. they do not\n-     * reference other structs via offsets.\n-     *\/\n-    (void) (false && arrayZ[0].sanitize (c));\n-\n-    return_trace (true);\n+    TRACE_SERIALIZE (this);\n+    len++;\n+    if (unlikely (!len || !c->extend (*this)))\n+    {\n+      len--;\n+      return_trace (nullptr);\n+    }\n+    return_trace (&arrayZ[len - 1]);\n@@ -585,1 +643,2 @@\n-  bool sanitize (hb_sanitize_context_t *c, const void *base) const\n+\n+  ArrayOf* copy (hb_serialize_context_t *c) const\n@@ -587,7 +646,6 @@\n-    TRACE_SANITIZE (this);\n-    if (unlikely (!sanitize_shallow (c))) return_trace (false);\n-    unsigned int count = len;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (unlikely (!arrayZ[i].sanitize (c, base)))\n-        return_trace (false);\n-    return_trace (true);\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->start_embed (this);\n+    if (unlikely (!c->extend_min (out))) return_trace (nullptr);\n+    c->check_assign (out->len, len);\n+    if (unlikely (!as_array ().copy (c))) return_trace (nullptr);\n+    return_trace (out);\n@@ -595,2 +653,3 @@\n-  template <typename T>\n-  bool sanitize (hb_sanitize_context_t *c, const void *base, T user_data) const\n+\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, Ts&&... ds) const\n@@ -600,0 +659,1 @@\n+    if (!sizeof... (Ts) && hb_is_trivially_copyable (Type)) return_trace (true);\n@@ -602,1 +662,1 @@\n-      if (unlikely (!arrayZ[i].sanitize (c, base, user_data)))\n+      if (unlikely (!c->dispatch (arrayZ[i], hb_forward<Ts> (ds)...)))\n@@ -613,0 +673,3 @@\n+  template <typename T>\n+  bool lfind (const T &x, unsigned *pos = nullptr) const\n+  { return as_array ().lfind (x, pos); }\n@@ -625,1 +688,1 @@\n-  Type          arrayZ[VAR];\n+  Type          arrayZ[HB_VAR_ARRAY];\n@@ -629,2 +692,3 @@\n-template <typename Type> struct LArrayOf : ArrayOf<Type, HBUINT32> {};\n-typedef ArrayOf<HBUINT8, HBUINT8> PString;\n+template <typename Type>\n+using LArrayOf = ArrayOf<Type, HBUINT32>;\n+using PString = ArrayOf<HBUINT8, HBUINT8>;\n@@ -634,1 +698,1 @@\n-struct OffsetArrayOf : ArrayOf<OffsetTo<Type, HBUINT16> > {};\n+using OffsetArrayOf = ArrayOf<OffsetTo<Type, HBUINT16>>;\n@@ -636,1 +700,1 @@\n-struct LOffsetArrayOf : ArrayOf<OffsetTo<Type, HBUINT32> > {};\n+using LOffsetArrayOf = ArrayOf<OffsetTo<Type, HBUINT32>>;\n@@ -638,1 +702,1 @@\n-struct LOffsetLArrayOf : ArrayOf<OffsetTo<Type, HBUINT32>, HBUINT32> {};\n+using LOffsetLArrayOf = ArrayOf<OffsetTo<Type, HBUINT32>, HBUINT32>;\n@@ -664,1 +728,1 @@\n-      out->arrayZ[i].serialize_subset (c, (*this)[i], out);\n+      out->arrayZ[i].serialize_subset (c, this->arrayZ[i], this, out);\n@@ -668,7 +732,2 @@\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (OffsetArrayOf<Type>::sanitize (c, this));\n-  }\n-  template <typename T>\n-  bool sanitize (hb_sanitize_context_t *c, T user_data) const\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, Ts&&... ds) const\n@@ -677,1 +736,1 @@\n-    return_trace (OffsetArrayOf<Type>::sanitize (c, this, user_data));\n+    return_trace (OffsetArrayOf<Type>::sanitize (c, this, hb_forward<Ts> (ds)...));\n@@ -687,1 +746,1 @@\n-  HB_NO_CREATE_COPY_ASSIGN_TEMPLATE2 (HeadlessArrayOf, Type, LenType);\n+  HB_DELETE_CREATE_COPY_ASSIGN (HeadlessArrayOf);\n@@ -702,1 +761,1 @@\n-  { return lenP1.static_size + (lenP1 ? lenP1 - 1 : 0) * Type::static_size; }\n+  { return lenP1.static_size + get_length () * Type::static_size; }\n@@ -704,2 +763,14 @@\n-  bool serialize (hb_serialize_context_t *c,\n-                  hb_array_t<const Type> items)\n+  unsigned get_length () const { return lenP1 ? lenP1 - 1 : 0; }\n+\n+  hb_array_t<      Type> as_array ()       { return hb_array (arrayZ, get_length ()); }\n+  hb_array_t<const Type> as_array () const { return hb_array (arrayZ, get_length ()); }\n+\n+  \/* Iterator. *\/\n+  typedef hb_array_t<const Type>   iter_t;\n+  typedef hb_array_t<      Type> writer_t;\n+    iter_t   iter () const { return as_array (); }\n+  writer_t writer ()       { return as_array (); }\n+  operator   iter_t () const { return   iter (); }\n+  operator writer_t ()       { return writer (); }\n+\n+  bool serialize (hb_serialize_context_t *c, unsigned int items_len)\n@@ -709,1 +780,1 @@\n-    lenP1.set (items.length + 1); \/* TODO(serialize) Overflow? *\/\n+    c->check_assign (lenP1, items_len + 1);\n@@ -711,2 +782,13 @@\n-    for (unsigned int i = 0; i < items.length; i++)\n-      arrayZ[i] = items[i];\n+    return_trace (true);\n+  }\n+  template <typename Iterator,\n+            hb_requires (hb_is_source_of (Iterator, Type))>\n+  bool serialize (hb_serialize_context_t *c, Iterator items)\n+  {\n+    TRACE_SERIALIZE (this);\n+    unsigned count = items.len ();\n+    if (unlikely (!serialize (c, count))) return_trace (false);\n+    \/* TODO Umm. Just exhaust the iterator instead?  Being extra\n+     * cautious right now.. *\/\n+    for (unsigned i = 0; i < count; i++, ++items)\n+      arrayZ[i] = *items;\n@@ -716,1 +798,2 @@\n-  bool sanitize (hb_sanitize_context_t *c) const\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, Ts&&... ds) const\n@@ -720,10 +803,5 @@\n-\n-    \/* Note: for structs that do not reference other structs,\n-     * we do not need to call their sanitize() as we already did\n-     * a bound check on the aggregate array size.  We just include\n-     * a small unreachable expression to make sure the structs\n-     * pointed to do have a simple sanitize(), ie. they do not\n-     * reference other structs via offsets.\n-     *\/\n-    (void) (false && arrayZ[0].sanitize (c));\n-\n+    if (!sizeof... (Ts) && hb_is_trivially_copyable (Type)) return_trace (true);\n+    unsigned int count = get_length ();\n+    for (unsigned int i = 0; i < count; i++)\n+      if (unlikely (!c->dispatch (arrayZ[i], hb_forward<Ts> (ds)...)))\n+        return_trace (false);\n@@ -743,1 +821,1 @@\n-  Type          arrayZ[VAR];\n+  Type          arrayZ[HB_VAR_ARRAY];\n@@ -752,1 +830,1 @@\n-  HB_NO_CREATE_COPY_ASSIGN_TEMPLATE2 (ArrayOfM1, Type, LenType);\n+  HB_DELETE_CREATE_COPY_ASSIGN (ArrayOfM1);\n@@ -769,2 +847,2 @@\n-  template <typename T>\n-  bool sanitize (hb_sanitize_context_t *c, const void *base, T user_data) const\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, Ts&&... ds) const\n@@ -776,1 +854,1 @@\n-      if (unlikely (!arrayZ[i].sanitize (c, base, user_data)))\n+      if (unlikely (!c->dispatch (arrayZ[i], hb_forward<Ts> (ds)...)))\n@@ -791,1 +869,1 @@\n-  Type          arrayZ[VAR];\n+  Type          arrayZ[HB_VAR_ARRAY];\n@@ -800,6 +878,19 @@\n-  hb_sorted_array_t<Type> as_array ()\n-  { return hb_sorted_array (this->arrayZ, this->len); }\n-  hb_sorted_array_t<const Type> as_array () const\n-  { return hb_sorted_array (this->arrayZ, this->len); }\n-  operator hb_sorted_array_t<Type> ()             { return as_array (); }\n-  operator hb_sorted_array_t<const Type> () const { return as_array (); }\n+  hb_sorted_array_t<      Type> as_array ()       { return hb_sorted_array (this->arrayZ, this->len); }\n+  hb_sorted_array_t<const Type> as_array () const { return hb_sorted_array (this->arrayZ, this->len); }\n+\n+  \/* Iterator. *\/\n+  typedef hb_sorted_array_t<const Type>   iter_t;\n+  typedef hb_sorted_array_t<      Type> writer_t;\n+    iter_t   iter () const { return as_array (); }\n+  writer_t writer ()       { return as_array (); }\n+  operator   iter_t () const { return   iter (); }\n+  operator writer_t ()       { return writer (); }\n+\n+  hb_sorted_array_t<const Type> sub_array (unsigned int start_offset, unsigned int count) const\n+  { return as_array ().sub_array (start_offset, count); }\n+  hb_sorted_array_t<const Type> sub_array (unsigned int start_offset, unsigned int *count = nullptr \/* IN\/OUT *\/) const\n+  { return as_array ().sub_array (start_offset, count); }\n+  hb_sorted_array_t<Type> sub_array (unsigned int start_offset, unsigned int count)\n+  { return as_array ().sub_array (start_offset, count); }\n+  hb_sorted_array_t<Type> sub_array (unsigned int start_offset, unsigned int *count = nullptr \/* IN\/OUT *\/)\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -807,8 +898,14 @@\n-  hb_array_t<const Type> sub_array (unsigned int start_offset, unsigned int count) const\n-  { return as_array ().sub_array (start_offset, count);}\n-  hb_array_t<const Type> sub_array (unsigned int start_offset, unsigned int *count = nullptr \/* IN\/OUT *\/) const\n-  { return as_array ().sub_array (start_offset, count);}\n-  hb_array_t<Type> sub_array (unsigned int start_offset, unsigned int count)\n-  { return as_array ().sub_array (start_offset, count);}\n-  hb_array_t<Type> sub_array (unsigned int start_offset, unsigned int *count = nullptr \/* IN\/OUT *\/)\n-  { return as_array ().sub_array (start_offset, count);}\n+  bool serialize (hb_serialize_context_t *c, unsigned int items_len)\n+  {\n+    TRACE_SERIALIZE (this);\n+    bool ret = ArrayOf<Type, LenType>::serialize (c, items_len);\n+    return_trace (ret);\n+  }\n+  template <typename Iterator,\n+            hb_requires (hb_is_sorted_source_of (Iterator, Type))>\n+  bool serialize (hb_serialize_context_t *c, Iterator items)\n+  {\n+    TRACE_SERIALIZE (this);\n+    bool ret = ArrayOf<Type, LenType>::serialize (c, items);\n+    return_trace (ret);\n+  }\n@@ -824,2 +921,2 @@\n-                     hb_bfind_not_found_t not_found = HB_BFIND_NOT_FOUND_DONT_STORE,\n-                     unsigned int to_store = (unsigned int) -1) const\n+              hb_bfind_not_found_t not_found = HB_BFIND_NOT_FOUND_DONT_STORE,\n+              unsigned int to_store = (unsigned int) -1) const\n@@ -844,1 +941,1 @@\n-  void set (unsigned int v)\n+  BinSearchHeader& operator = (unsigned int v)\n@@ -846,1 +943,1 @@\n-    len.set (v);\n+    len = v;\n@@ -848,5 +945,6 @@\n-    entrySelector.set (MAX (1u, hb_bit_storage (v)) - 1);\n-    searchRange.set (16 * (1u << entrySelector));\n-    rangeShift.set (v * 16 > searchRange\n-                    ? 16 * v - searchRange\n-                    : 0);\n+    entrySelector = hb_max (1u, hb_bit_storage (v)) - 1;\n+    searchRange = 16 * (1u << entrySelector);\n+    rangeShift = v * 16 > searchRange\n+                 ? 16 * v - searchRange\n+                 : 0;\n+    return *this;\n@@ -866,1 +964,1 @@\n-struct BinSearchArrayOf : SortedArrayOf<Type, BinSearchHeader<LenType> > {};\n+using BinSearchArrayOf = SortedArrayOf<Type, BinSearchHeader<LenType>>;\n@@ -896,1 +994,1 @@\n-  HB_NO_CREATE_COPY_ASSIGN_TEMPLATE (VarSizedBinSearchArrayOf, Type);\n+  HB_DELETE_CREATE_COPY_ASSIGN (VarSizedBinSearchArrayOf);\n@@ -931,17 +1029,2 @@\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    if (unlikely (!sanitize_shallow (c))) return_trace (false);\n-\n-    \/* Note: for structs that do not reference other structs,\n-     * we do not need to call their sanitize() as we already did\n-     * a bound check on the aggregate array size.  We just include\n-     * a small unreachable expression to make sure the structs\n-     * pointed to do have a simple sanitize(), ie. they do not\n-     * reference other structs via offsets.\n-     *\/\n-    (void) (false && StructAtOffset<Type> (&bytesZ, 0).sanitize (c));\n-\n-    return_trace (true);\n-  }\n-  bool sanitize (hb_sanitize_context_t *c, const void *base) const\n+  template <typename ...Ts>\n+  bool sanitize (hb_sanitize_context_t *c, Ts&&... ds) const\n@@ -951,0 +1034,1 @@\n+    if (!sizeof... (Ts) && hb_is_trivially_copyable (Type)) return_trace (true);\n@@ -953,12 +1037,1 @@\n-      if (unlikely (!(*this)[i].sanitize (c, base)))\n-        return_trace (false);\n-    return_trace (true);\n-  }\n-  template <typename T>\n-  bool sanitize (hb_sanitize_context_t *c, const void *base, T user_data) const\n-  {\n-    TRACE_SANITIZE (this);\n-    if (unlikely (!sanitize_shallow (c))) return_trace (false);\n-    unsigned int count = get_length ();\n-    for (unsigned int i = 0; i < count; i++)\n-      if (unlikely (!(*this)[i].sanitize (c, base, user_data)))\n+      if (unlikely (!(*this)[i].sanitize (c, hb_forward<Ts> (ds)...)))\n@@ -972,12 +1045,9 @@\n-    unsigned int size = header.unitSize;\n-    int min = 0, max = (int) get_length () - 1;\n-    while (min <= max)\n-    {\n-      int mid = ((unsigned int) min + (unsigned int) max) \/ 2;\n-      const Type *p = (const Type *) (((const char *) &bytesZ) + (mid * size));\n-      int c = p->cmp (key);\n-      if (c < 0) max = mid - 1;\n-      else if (c > 0) min = mid + 1;\n-      else return p;\n-    }\n-    return nullptr;\n+    unsigned pos;\n+    return hb_bsearch_impl (&pos,\n+                            key,\n+                            (const void *) bytesZ,\n+                            get_length (),\n+                            header.unitSize,\n+                            _hb_cmp_method<T, Type>)\n+           ? (const Type *) (((const char *) &bytesZ) + (pos * header.unitSize))\n+           : nullptr;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-open-type.hh","additions":319,"deletions":249,"binary":false,"changes":568,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"hb-bimap.hh\"\n@@ -40,0 +41,3 @@\n+using objidx_t = hb_serialize_context_t::objidx_t;\n+using whence_t = hb_serialize_context_t::whence_t;\n+\n@@ -42,2 +46,2 @@\n-static inline const Type& StructAtOffsetOrNull(const void *P, unsigned int offset)\n-{ return offset? (* reinterpret_cast<const Type*> ((const char *) P + offset)): Null(Type); }\n+static inline const Type& StructAtOffsetOrNull (const void *P, unsigned int offset)\n+{ return offset ? StructAtOffset<Type> (P, offset) : Null (Type); }\n@@ -45,1 +49,1 @@\n-inline unsigned int calcOffSize(unsigned int dataSize)\n+inline unsigned int calcOffSize (unsigned int dataSize)\n@@ -49,1 +53,1 @@\n-  while ((offset & ~0xFF) != 0)\n+  while (offset & ~0xFF)\n@@ -60,2 +64,2 @@\n-  hb_codepoint_t  code;\n-  hb_codepoint_t  glyph;\n+  hb_codepoint_t code;\n+  hb_codepoint_t glyph;\n@@ -85,9 +89,0 @@\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-    return_trace (likely ((count.sanitize (c) && count == 0) || \/* empty INDEX *\/\n-                          (c->check_struct (this) && offSize >= 1 && offSize <= 4 &&\n-                           c->check_array (offsets, offSize, count + 1) &&\n-                           c->check_array ((const HBUINT8*)data_base (), 1, max_offset () - 1))));\n-  }\n-\n@@ -100,1 +95,1 @@\n-  static unsigned int calculate_serialized_size (unsigned int offSize, unsigned int count, unsigned int dataSize)\n+  CFFIndex *copy (hb_serialize_context_t *c) const\n@@ -102,4 +97,6 @@\n-    if (count == 0)\n-      return COUNT::static_size;\n-    else\n-      return min_size + calculate_offset_array_size (offSize, count) + dataSize;\n+    TRACE_SERIALIZE (this);\n+    unsigned int size = get_size ();\n+    CFFIndex *out = c->allocate_size<CFFIndex> (size);\n+    if (likely (out))\n+      memcpy (out, this, size);\n+    return_trace (out);\n@@ -113,1 +110,1 @@\n-    if (unlikely (dest == nullptr)) return_trace (false);\n+    if (unlikely (!dest)) return_trace (false);\n@@ -126,2 +123,2 @@\n-      if (unlikely (dest == nullptr)) return_trace (false);\n-      dest->set (0);\n+      if (unlikely (!dest)) return_trace (false);\n+      *dest = 0;\n@@ -133,3 +130,3 @@\n-      this->count.set (byteArray.length);\n-      this->offSize.set (offSize_);\n-      if (!unlikely (c->allocate_size<HBUINT8> (offSize_ * (byteArray.length + 1))))\n+      this->count = byteArray.length;\n+      this->offSize = offSize_;\n+      if (unlikely (!c->allocate_size<HBUINT8> (offSize_ * (byteArray.length + 1))))\n@@ -152,3 +149,2 @@\n-        unsigned char  *dest = c->allocate_size<unsigned char> (bs.length);\n-        if (unlikely (dest == nullptr))\n-          return_trace (false);\n+        unsigned char *dest = c->allocate_size<unsigned char> (bs.length);\n+        if (unlikely (!dest)) return_trace (false);\n@@ -169,3 +165,1 @@\n-    {\n-      byteArray[i] = byte_str_t (buffArray[i].arrayZ (), buffArray[i].length);\n-    }\n+      byteArray[i] = byte_str_t (buffArray[i].arrayZ, buffArray[i].length);\n@@ -177,0 +171,65 @@\n+  template <typename Iterator,\n+            hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize (hb_serialize_context_t *c,\n+                  Iterator it)\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (it.len () == 0)\n+    {\n+      COUNT *dest = c->allocate_min<COUNT> ();\n+      if (unlikely (!dest)) return_trace (false);\n+      *dest = 0;\n+    }\n+    else\n+    {\n+      serialize_header(c, + it | hb_map ([] (const byte_str_t &_) { return _.length; }));\n+      for (const byte_str_t &_ : +it)\n+        _.copy (c);\n+    }\n+    return_trace (true);\n+  }\n+\n+  bool serialize (hb_serialize_context_t *c,\n+                  const byte_str_array_t &byteArray)\n+  { return serialize (c, + hb_iter (byteArray)); }\n+\n+  bool serialize (hb_serialize_context_t *c,\n+                  const str_buff_vec_t &buffArray)\n+  {\n+    auto it =\n+    + hb_iter (buffArray)\n+    | hb_map ([] (const str_buff_t &_) { return byte_str_t (_.arrayZ, _.length); })\n+    ;\n+    return serialize (c, it);\n+  }\n+\n+  template <typename Iterator,\n+            hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize_header (hb_serialize_context_t *c,\n+                        Iterator it)\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    unsigned total = + it | hb_reduce (hb_add, 0);\n+    unsigned off_size = calcOffSize (total);\n+\n+    \/* serialize CFFIndex header *\/\n+    if (unlikely (!c->extend_min (*this))) return_trace (false);\n+    this->count = it.len ();\n+    this->offSize = off_size;\n+    if (unlikely (!c->allocate_size<HBUINT8> (off_size * (it.len () + 1))))\n+      return_trace (false);\n+\n+    \/* serialize indices *\/\n+    unsigned int offset = 1;\n+    unsigned int i = 0;\n+    for (unsigned _ : +it)\n+    {\n+      CFFIndex<COUNT>::set_offset_at (i++, offset);\n+      offset += _;\n+    }\n+    CFFIndex<COUNT>::set_offset_at (i, offset);\n+\n+    return_trace (true);\n+  }\n+\n@@ -184,1 +243,1 @@\n-      p->set (offset & 0xFF);\n+      *p = offset & 0xFF;\n@@ -202,5 +261,4 @@\n-        if (likely ((offset_at (index + 1) >= offset_at (index)) &&\n-                    (offset_at (index + 1) <= offset_at (count))))\n-          return offset_at (index + 1) - offset_at (index);\n-        else\n-          return 0;\n+    if (unlikely ((offset_at (index + 1) < offset_at (index)) ||\n+                  (offset_at (index + 1) > offset_at (count))))\n+      return 0;\n+    return offset_at (index + 1) - offset_at (index);\n@@ -210,1 +268,1 @@\n-  { return (const unsigned char *)this + min_size + offset_array_size (); }\n+  { return (const unsigned char *) this + min_size + offset_array_size (); }\n@@ -216,4 +274,2 @@\n-    if (likely (index < count))\n-      return byte_str_t (data_base () + offset_at (index) - 1, length_at (index));\n-    else\n-      return Null(byte_str_t);\n+    if (unlikely (index >= count)) return Null (byte_str_t);\n+    return byte_str_t (data_base () + offset_at (index) - 1, length_at (index));\n@@ -224,9 +280,13 @@\n-    if (this != &Null(CFFIndex))\n-    {\n-      if (count > 0)\n-        return min_size + offset_array_size () + (offset_at (count) - 1);\n-      else\n-        return count.static_size;  \/* empty CFFIndex contains count only *\/\n-    }\n-    else\n-      return 0;\n+    if (this == &Null (CFFIndex)) return 0;\n+    if (count > 0)\n+      return min_size + offset_array_size () + (offset_at (count) - 1);\n+    return count.static_size;  \/* empty CFFIndex contains count only *\/\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (likely ((c->check_struct (this) && count == 0) || \/* empty INDEX *\/\n+                          (c->check_struct (this) && offSize >= 1 && offSize <= 4 &&\n+                           c->check_array (offsets, offSize, count + 1) &&\n+                           c->check_array ((const HBUINT8*) data_base (), 1, max_offset () - 1))));\n@@ -248,4 +308,5 @@\n-  COUNT     count;      \/* Number of object data. Note there are (count+1) offsets *\/\n-  HBUINT8   offSize;      \/* The byte size of each offset in the offsets array. *\/\n-  HBUINT8   offsets[VAR]; \/* The array of (count + 1) offsets into objects array (1-base). *\/\n-  \/* HBUINT8 data[VAR];      Object data *\/\n+  COUNT         count;          \/* Number of object data. Note there are (count+1) offsets *\/\n+  HBUINT8       offSize;        \/* The byte size of each offset in the offsets array. *\/\n+  HBUINT8       offsets[HB_VAR_ARRAY];\n+                                \/* The array of (count + 1) offsets into objects array (1-base). *\/\n+  \/* HBUINT8 data[HB_VAR_ARRAY];        Object data *\/\n@@ -263,1 +324,1 @@\n-    return Null(byte_str_t);\n+    return Null (byte_str_t);\n@@ -278,3 +339,3 @@\n-    this->count.set (dataArrayLen);\n-    this->offSize.set (offSize_);\n-    if (!unlikely (c->allocate_size<HBUINT8> (offSize_ * (dataArrayLen + 1))))\n+    this->count = dataArrayLen;\n+    this->offSize = offSize_;\n+    if (unlikely (!c->allocate_size<HBUINT8> (offSize_ * (dataArrayLen + 1))))\n@@ -296,3 +357,2 @@\n-      TYPE  *dest = c->start_embed<TYPE> ();\n-      if (unlikely (dest == nullptr ||\n-                    !dest->serialize (c, dataArray[i], param1, param2)))\n+      TYPE *dest = c->start_embed<TYPE> ();\n+      if (unlikely (!dest || !dest->serialize (c, dataArray[i], param1, param2)))\n@@ -303,21 +363,0 @@\n-\n-  \/* in parallel to above *\/\n-  template <typename DATA, typename PARAM>\n-  static unsigned int calculate_serialized_size (unsigned int &offSize_ \/* OUT *\/,\n-                                                 const DATA *dataArray,\n-                                                 unsigned int dataArrayLen,\n-                                                 hb_vector_t<unsigned int> &dataSizeArray, \/* OUT *\/\n-                                                 const PARAM &param)\n-  {\n-    \/* determine offset size *\/\n-    unsigned int  totalDataSize = 0;\n-    for (unsigned int i = 0; i < dataArrayLen; i++)\n-    {\n-      unsigned int dataSize = TYPE::calculate_serialized_size (dataArray[i], param);\n-      dataSizeArray[i] = dataSize;\n-      totalDataSize += dataSize;\n-    }\n-    offSize_ = calcOffSize (totalDataSize);\n-\n-    return CFFIndex<COUNT>::calculate_serialized_size (offSize_, dataArrayLen, totalDataSize);\n-  }\n@@ -329,1 +368,1 @@\n-  template <typename DICTVAL, typename OP_SERIALIZER, typename PARAM>\n+  template <typename DICTVAL, typename OP_SERIALIZER, typename ...Ts>\n@@ -333,1 +372,1 @@\n-                  PARAM& param)\n+                  Ts&&... ds)\n@@ -337,2 +376,1 @@\n-    {\n-      if (unlikely (!opszr.serialize (c, dictval[i], param)))\n+      if (unlikely (!opszr.serialize (c, dictval[i], hb_forward<Ts> (ds)...)))\n@@ -340,3 +378,0 @@\n-    }\n-    return_trace (true);\n-  }\n@@ -344,20 +379,1 @@\n-  \/* in parallel to above *\/\n-  template <typename DICTVAL, typename OP_SERIALIZER, typename PARAM>\n-  static unsigned int calculate_serialized_size (const DICTVAL &dictval,\n-                                                 OP_SERIALIZER& opszr,\n-                                                 PARAM& param)\n-  {\n-    unsigned int size = 0;\n-    for (unsigned int i = 0; i < dictval.get_count (); i++)\n-      size += opszr.calculate_serialized_size (dictval[i], param);\n-    return size;\n-  }\n-\n-  template <typename DICTVAL, typename OP_SERIALIZER>\n-  static unsigned int calculate_serialized_size (const DICTVAL &dictval,\n-                                                 OP_SERIALIZER& opszr)\n-  {\n-    unsigned int size = 0;\n-    for (unsigned int i = 0; i < dictval.get_count (); i++)\n-      size += opszr.calculate_serialized_size (dictval[i]);\n-    return size;\n+    return_trace (true);\n@@ -366,2 +382,2 @@\n-  template <typename INTTYPE, int minVal, int maxVal>\n-  static bool serialize_int_op (hb_serialize_context_t *c, op_code_t op, int value, op_code_t intOp)\n+  template <typename T, typename V>\n+  static bool serialize_int_op (hb_serialize_context_t *c, op_code_t op, V value, op_code_t intOp)\n@@ -370,1 +386,1 @@\n-    if (\/*unlikely*\/ (!serialize_int<INTTYPE, minVal, maxVal> (c, intOp, value)))\n+    if (\/*unlikely*\/ (!serialize_int<T, V> (c, intOp, value)))\n@@ -376,1 +392,1 @@\n-    if (unlikely (p == nullptr)) return_trace (false);\n+    if (unlikely (!p)) return_trace (false);\n@@ -379,1 +395,1 @@\n-      p->set (OpCode_escape);\n+      *p = OpCode_escape;\n@@ -383,1 +399,1 @@\n-    p->set (op);\n+    *p = op;\n@@ -387,2 +403,3 @@\n-  static bool serialize_uint4_op (hb_serialize_context_t *c, op_code_t op, int value)\n-  { return serialize_int_op<HBUINT32, 0, 0x7FFFFFFF> (c, op, value, OpCode_longintdict); }\n+  template <typename V>\n+  static bool serialize_int4_op (hb_serialize_context_t *c, op_code_t op, V value)\n+  { return serialize_int_op<HBINT32> (c, op, value, OpCode_longintdict); }\n@@ -390,2 +407,3 @@\n-  static bool serialize_uint2_op (hb_serialize_context_t *c, op_code_t op, int value)\n-  { return serialize_int_op<HBUINT16, 0, 0x7FFF> (c, op, value, OpCode_shortint); }\n+  template <typename V>\n+  static bool serialize_int2_op (hb_serialize_context_t *c, op_code_t op, V value)\n+  { return serialize_int_op<HBINT16> (c, op, value, OpCode_shortint); }\n@@ -393,1 +411,2 @@\n-  static bool serialize_offset4_op (hb_serialize_context_t *c, op_code_t op, int value)\n+  template <typename T, int int_op>\n+  static bool serialize_link_op (hb_serialize_context_t *c, op_code_t op, objidx_t link, whence_t whence)\n@@ -395,1 +414,4 @@\n-    return serialize_uint4_op (c, op, value);\n+    T &ofs = *(T *) (c->head + OpCode_Size (int_op));\n+    if (unlikely (!serialize_int_op<T> (c, op, 0, int_op))) return false;\n+    c->add_link (ofs, link, whence);\n+    return true;\n@@ -398,4 +420,5 @@\n-  static bool serialize_offset2_op (hb_serialize_context_t *c, op_code_t op, int value)\n-  {\n-    return serialize_uint2_op (c, op, value);\n-  }\n+  static bool serialize_link4_op (hb_serialize_context_t *c, op_code_t op, objidx_t link, whence_t whence = whence_t::Head)\n+  { return serialize_link_op<HBINT32, OpCode_longintdict> (c, op, link, whence); }\n+\n+  static bool serialize_link2_op (hb_serialize_context_t *c, op_code_t op, objidx_t link, whence_t whence = whence_t::Head)\n+  { return serialize_link_op<HBINT16, OpCode_shortint> (c, op, link, whence); }\n@@ -410,1 +433,1 @@\n-  void init () { offSize = offset = size = 0; }\n+  void init () { offset = size = 0; link = 0; }\n@@ -414,52 +437,1 @@\n-  unsigned int    offSize;\n-};\n-\n-\/* used to remap font index or SID from fullset to subset.\n- * set to CFF_UNDEF_CODE if excluded from subset *\/\n-struct remap_t : hb_vector_t<hb_codepoint_t>\n-{\n-  void init () { SUPER::init (); }\n-\n-  void fini () { SUPER::fini (); }\n-\n-  bool reset (unsigned int size)\n-  {\n-    if (unlikely (!SUPER::resize (size)))\n-      return false;\n-    for (unsigned int i = 0; i < length; i++)\n-      (*this)[i] = CFF_UNDEF_CODE;\n-    count = 0;\n-    return true;\n-  }\n-\n-  bool identity (unsigned int size)\n-  {\n-    if (unlikely (!SUPER::resize (size)))\n-      return false;\n-    unsigned int i;\n-    for (i = 0; i < length; i++)\n-      (*this)[i] = i;\n-    count = i;\n-    return true;\n-  }\n-\n-  bool excludes (hb_codepoint_t id) const\n-  { return (id < length) && ((*this)[id] == CFF_UNDEF_CODE); }\n-\n-  bool includes (hb_codepoint_t id) const\n-  { return !excludes (id); }\n-\n-  unsigned int add (unsigned int i)\n-  {\n-    if ((*this)[i] == CFF_UNDEF_CODE)\n-      (*this)[i] = count++;\n-    return (*this)[i];\n-  }\n-\n-  hb_codepoint_t get_count () const { return count; }\n-\n-  protected:\n-  hb_codepoint_t  count;\n-\n-  private:\n-  typedef hb_vector_t<hb_codepoint_t> SUPER;\n+  objidx_t        link;\n@@ -471,2 +443,1 @@\n-  \/* used by CFF1 *\/\n-  template <typename DICTVAL, typename OP_SERIALIZER>\n+  template <typename DICTVAL, typename INFO, typename Iterator, typename OP_SERIALIZER>\n@@ -474,2 +445,1 @@\n-                  unsigned int offSize_,\n-                  const hb_vector_t<DICTVAL> &fontDicts,\n+                  Iterator it,\n@@ -479,15 +449,0 @@\n-    if (unlikely (!c->extend_min (*this))) return_trace (false);\n-    this->count.set (fontDicts.length);\n-    this->offSize.set (offSize_);\n-    if (!unlikely (c->allocate_size<HBUINT8> (offSize_ * (fontDicts.length + 1))))\n-      return_trace (false);\n-\n-    \/* serialize font dict offsets *\/\n-    unsigned int  offset = 1;\n-    unsigned int fid = 0;\n-    for (; fid < fontDicts.length; fid++)\n-    {\n-      CFFIndexOf<COUNT, FontDict>::set_offset_at (fid, offset);\n-      offset += FontDict::calculate_serialized_size (fontDicts[fid], opszr);\n-    }\n-    CFFIndexOf<COUNT, FontDict>::set_offset_at (fid, offset);\n@@ -495,2 +450,5 @@\n-    \/* serialize font dicts *\/\n-    for (unsigned int i = 0; i < fontDicts.length; i++)\n+    \/* serialize INDEX data *\/\n+    hb_vector_t<unsigned> sizes;\n+    c->push ();\n+    + it\n+    | hb_map ([&] (const hb_pair_t<const DICTVAL&, const INFO&> &_)\n@@ -499,33 +457,6 @@\n-      if (unlikely (!dict->serialize (c, fontDicts[i], opszr, fontDicts[i])))\n-        return_trace (false);\n-    }\n-    return_trace (true);\n-  }\n-\n-  \/* used by CFF2 *\/\n-  template <typename DICTVAL, typename OP_SERIALIZER>\n-  bool serialize (hb_serialize_context_t *c,\n-                  unsigned int offSize_,\n-                  const hb_vector_t<DICTVAL> &fontDicts,\n-                  unsigned int fdCount,\n-                  const remap_t &fdmap,\n-                  OP_SERIALIZER& opszr,\n-                  const hb_vector_t<table_info_t> &privateInfos)\n-  {\n-    TRACE_SERIALIZE (this);\n-    if (unlikely (!c->extend_min (*this))) return_trace (false);\n-    this->count.set (fdCount);\n-    this->offSize.set (offSize_);\n-    if (!unlikely (c->allocate_size<HBUINT8> (offSize_ * (fdCount + 1))))\n-      return_trace (false);\n-\n-    \/* serialize font dict offsets *\/\n-    unsigned int  offset = 1;\n-    unsigned int  fid = 0;\n-    for (unsigned i = 0; i < fontDicts.length; i++)\n-      if (fdmap.includes (i))\n-      {\n-        CFFIndexOf<COUNT, FontDict>::set_offset_at (fid++, offset);\n-        offset += FontDict::calculate_serialized_size (fontDicts[i], opszr);\n-      }\n-    CFFIndexOf<COUNT, FontDict>::set_offset_at (fid, offset);\n+                dict->serialize (c, _.first, opszr, _.second);\n+                return c->head - (const char*)dict;\n+              })\n+    | hb_sink (sizes)\n+    ;\n+    c->pop_pack (false);\n@@ -533,26 +464,2 @@\n-    \/* serialize font dicts *\/\n-    for (unsigned int i = 0; i < fontDicts.length; i++)\n-      if (fdmap.includes (i))\n-      {\n-        FontDict *dict = c->start_embed<FontDict> ();\n-        if (unlikely (!dict->serialize (c, fontDicts[i], opszr, privateInfos[fdmap[i]])))\n-          return_trace (false);\n-      }\n-    return_trace (true);\n-  }\n-\n-  \/* in parallel to above *\/\n-  template <typename OP_SERIALIZER, typename DICTVAL>\n-  static unsigned int calculate_serialized_size (unsigned int &offSize_ \/* OUT *\/,\n-                                                 const hb_vector_t<DICTVAL> &fontDicts,\n-                                                 unsigned int fdCount,\n-                                                 const remap_t &fdmap,\n-                                                 OP_SERIALIZER& opszr)\n-  {\n-    unsigned int dictsSize = 0;\n-    for (unsigned int i = 0; i < fontDicts.len; i++)\n-      if (fdmap.includes (i))\n-        dictsSize += FontDict::calculate_serialized_size (fontDicts[i], opszr);\n-\n-    offSize_ = calcOffSize (dictsSize);\n-    return CFFIndex<COUNT>::calculate_serialized_size (offSize_, fdCount, dictsSize);\n+    \/* serialize INDEX header *\/\n+    return_trace (CFFIndex<COUNT>::serialize_header (c, hb_iter (sizes)));\n@@ -577,3 +484,1 @@\n-  {\n-    return (hb_codepoint_t)fds[glyph];\n-  }\n+  { return (hb_codepoint_t) fds[glyph]; }\n@@ -584,1 +489,1 @@\n-  HBUINT8     fds[VAR];\n+  HBUINT8     fds[HB_VAR_ARRAY];\n@@ -586,1 +491,1 @@\n-  DEFINE_SIZE_MIN (1);\n+  DEFINE_SIZE_MIN (0);\n@@ -590,2 +495,3 @@\n-struct FDSelect3_4_Range {\n-  bool sanitize (hb_sanitize_context_t *c, const void *\/*nullptr*\/, unsigned int fdcount) const\n+struct FDSelect3_4_Range\n+{\n+  bool sanitize (hb_sanitize_context_t *c, const void * \/*nullptr*\/, unsigned int fdcount) const\n@@ -599,1 +505,1 @@\n-\n+  public:\n@@ -604,1 +510,2 @@\n-struct FDSelect3_4 {\n+struct FDSelect3_4\n+{\n@@ -616,1 +523,0 @@\n-    {\n@@ -618,2 +524,1 @@\n-          return_trace (false);\n-    }\n+        return_trace (false);\n@@ -634,1 +539,1 @@\n-    return (hb_codepoint_t)ranges[i - 1].fd;\n+    return (hb_codepoint_t) ranges[i - 1].fd;\n@@ -637,4 +542,4 @@\n-  GID_TYPE &nRanges () { return ranges.len; }\n-  GID_TYPE nRanges () const { return ranges.len; }\n-  GID_TYPE &sentinel ()  { return StructAfter<GID_TYPE> (ranges[nRanges () - 1]); }\n-  const GID_TYPE &sentinel () const  { return StructAfter<GID_TYPE> (ranges[nRanges () - 1]); }\n+  GID_TYPE        &nRanges ()       { return ranges.len; }\n+  GID_TYPE         nRanges () const { return ranges.len; }\n+  GID_TYPE       &sentinel ()       { return StructAfter<GID_TYPE> (ranges[nRanges () - 1]); }\n+  const GID_TYPE &sentinel () const { return StructAfter<GID_TYPE> (ranges[nRanges () - 1]); }\n@@ -651,11 +556,2 @@\n-struct FDSelect {\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int fdcount) const\n-  {\n-    TRACE_SANITIZE (this);\n-\n-    return_trace (likely (c->check_struct (this) && (format == 0 || format == 3) &&\n-                          (format == 0)?\n-                          u.format0.sanitize (c, fdcount):\n-                          u.format3.sanitize (c, fdcount)));\n-  }\n-\n+struct FDSelect\n+{\n@@ -667,1 +563,1 @@\n-    if (unlikely (dest == nullptr)) return_trace (false);\n+    if (unlikely (!dest)) return_trace (false);\n@@ -672,3 +568,0 @@\n-  unsigned int calculate_serialized_size (unsigned int num_glyphs) const\n-  { return get_size (num_glyphs); }\n-\n@@ -677,6 +570,6 @@\n-    unsigned int size = format.static_size;\n-    if (format == 0)\n-      size += u.format0.get_size (num_glyphs);\n-    else\n-      size += u.format3.get_size ();\n-    return size;\n+    switch (format)\n+    {\n+    case 0: return format.static_size + u.format0.get_size (num_glyphs);\n+    case 3: return format.static_size + u.format3.get_size ();\n+    default:return 0;\n+    }\n@@ -687,6 +580,22 @@\n-    if (this == &Null(FDSelect))\n-      return 0;\n-    if (format == 0)\n-      return u.format0.get_fd (glyph);\n-    else\n-      return u.format3.get_fd (glyph);\n+    if (this == &Null (FDSelect)) return 0;\n+\n+    switch (format)\n+    {\n+    case 0: return u.format0.get_fd (glyph);\n+    case 3: return u.format3.get_fd (glyph);\n+    default:return 0;\n+    }\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c, unsigned int fdcount) const\n+  {\n+    TRACE_SANITIZE (this);\n+    if (unlikely (!c->check_struct (this)))\n+      return_trace (false);\n+\n+    switch (format)\n+    {\n+    case 0: return_trace (u.format0.sanitize (c, fdcount));\n+    case 3: return_trace (u.format3.sanitize (c, fdcount));\n+    default:return_trace (false);\n+    }\n@@ -697,2 +606,2 @@\n-    FDSelect0   format0;\n-    FDSelect3   format3;\n+  FDSelect0     format0;\n+  FDSelect3     format3;\n@@ -700,1 +609,1 @@\n-\n+  public:\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff-common.hh","additions":216,"deletions":307,"binary":false,"changes":523,"status":"modified"},{"patch":"@@ -0,0 +1,425 @@\n+\/*\n+ * Copyright © 2019  Adobe, Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Adobe Author(s): Michiharu Ariza\n+ *\/\n+\n+#ifndef HB_OT_CFF1_STD_STR_HH\n+#if 0 \/* Make checks happy. *\/\n+#define HB_OT_CFF1_STD_STR_HH\n+#include \"hb.hh\"\n+#endif\n+\n+_S(\".notdef\")\n+_S(\"space\")\n+_S(\"exclam\")\n+_S(\"quotedbl\")\n+_S(\"numbersign\")\n+_S(\"dollar\")\n+_S(\"percent\")\n+_S(\"ampersand\")\n+_S(\"quoteright\")\n+_S(\"parenleft\")\n+_S(\"parenright\")\n+_S(\"asterisk\")\n+_S(\"plus\")\n+_S(\"comma\")\n+_S(\"hyphen\")\n+_S(\"period\")\n+_S(\"slash\")\n+_S(\"zero\")\n+_S(\"one\")\n+_S(\"two\")\n+_S(\"three\")\n+_S(\"four\")\n+_S(\"five\")\n+_S(\"six\")\n+_S(\"seven\")\n+_S(\"eight\")\n+_S(\"nine\")\n+_S(\"colon\")\n+_S(\"semicolon\")\n+_S(\"less\")\n+_S(\"equal\")\n+_S(\"greater\")\n+_S(\"question\")\n+_S(\"at\")\n+_S(\"A\")\n+_S(\"B\")\n+_S(\"C\")\n+_S(\"D\")\n+_S(\"E\")\n+_S(\"F\")\n+_S(\"G\")\n+_S(\"H\")\n+_S(\"I\")\n+_S(\"J\")\n+_S(\"K\")\n+_S(\"L\")\n+_S(\"M\")\n+_S(\"N\")\n+_S(\"O\")\n+_S(\"P\")\n+_S(\"Q\")\n+_S(\"R\")\n+_S(\"S\")\n+_S(\"T\")\n+_S(\"U\")\n+_S(\"V\")\n+_S(\"W\")\n+_S(\"X\")\n+_S(\"Y\")\n+_S(\"Z\")\n+_S(\"bracketleft\")\n+_S(\"backslash\")\n+_S(\"bracketright\")\n+_S(\"asciicircum\")\n+_S(\"underscore\")\n+_S(\"quoteleft\")\n+_S(\"a\")\n+_S(\"b\")\n+_S(\"c\")\n+_S(\"d\")\n+_S(\"e\")\n+_S(\"f\")\n+_S(\"g\")\n+_S(\"h\")\n+_S(\"i\")\n+_S(\"j\")\n+_S(\"k\")\n+_S(\"l\")\n+_S(\"m\")\n+_S(\"n\")\n+_S(\"o\")\n+_S(\"p\")\n+_S(\"q\")\n+_S(\"r\")\n+_S(\"s\")\n+_S(\"t\")\n+_S(\"u\")\n+_S(\"v\")\n+_S(\"w\")\n+_S(\"x\")\n+_S(\"y\")\n+_S(\"z\")\n+_S(\"braceleft\")\n+_S(\"bar\")\n+_S(\"braceright\")\n+_S(\"asciitilde\")\n+_S(\"exclamdown\")\n+_S(\"cent\")\n+_S(\"sterling\")\n+_S(\"fraction\")\n+_S(\"yen\")\n+_S(\"florin\")\n+_S(\"section\")\n+_S(\"currency\")\n+_S(\"quotesingle\")\n+_S(\"quotedblleft\")\n+_S(\"guillemotleft\")\n+_S(\"guilsinglleft\")\n+_S(\"guilsinglright\")\n+_S(\"fi\")\n+_S(\"fl\")\n+_S(\"endash\")\n+_S(\"dagger\")\n+_S(\"daggerdbl\")\n+_S(\"periodcentered\")\n+_S(\"paragraph\")\n+_S(\"bullet\")\n+_S(\"quotesinglbase\")\n+_S(\"quotedblbase\")\n+_S(\"quotedblright\")\n+_S(\"guillemotright\")\n+_S(\"ellipsis\")\n+_S(\"perthousand\")\n+_S(\"questiondown\")\n+_S(\"grave\")\n+_S(\"acute\")\n+_S(\"circumflex\")\n+_S(\"tilde\")\n+_S(\"macron\")\n+_S(\"breve\")\n+_S(\"dotaccent\")\n+_S(\"dieresis\")\n+_S(\"ring\")\n+_S(\"cedilla\")\n+_S(\"hungarumlaut\")\n+_S(\"ogonek\")\n+_S(\"caron\")\n+_S(\"emdash\")\n+_S(\"AE\")\n+_S(\"ordfeminine\")\n+_S(\"Lslash\")\n+_S(\"Oslash\")\n+_S(\"OE\")\n+_S(\"ordmasculine\")\n+_S(\"ae\")\n+_S(\"dotlessi\")\n+_S(\"lslash\")\n+_S(\"oslash\")\n+_S(\"oe\")\n+_S(\"germandbls\")\n+_S(\"onesuperior\")\n+_S(\"logicalnot\")\n+_S(\"mu\")\n+_S(\"trademark\")\n+_S(\"Eth\")\n+_S(\"onehalf\")\n+_S(\"plusminus\")\n+_S(\"Thorn\")\n+_S(\"onequarter\")\n+_S(\"divide\")\n+_S(\"brokenbar\")\n+_S(\"degree\")\n+_S(\"thorn\")\n+_S(\"threequarters\")\n+_S(\"twosuperior\")\n+_S(\"registered\")\n+_S(\"minus\")\n+_S(\"eth\")\n+_S(\"multiply\")\n+_S(\"threesuperior\")\n+_S(\"copyright\")\n+_S(\"Aacute\")\n+_S(\"Acircumflex\")\n+_S(\"Adieresis\")\n+_S(\"Agrave\")\n+_S(\"Aring\")\n+_S(\"Atilde\")\n+_S(\"Ccedilla\")\n+_S(\"Eacute\")\n+_S(\"Ecircumflex\")\n+_S(\"Edieresis\")\n+_S(\"Egrave\")\n+_S(\"Iacute\")\n+_S(\"Icircumflex\")\n+_S(\"Idieresis\")\n+_S(\"Igrave\")\n+_S(\"Ntilde\")\n+_S(\"Oacute\")\n+_S(\"Ocircumflex\")\n+_S(\"Odieresis\")\n+_S(\"Ograve\")\n+_S(\"Otilde\")\n+_S(\"Scaron\")\n+_S(\"Uacute\")\n+_S(\"Ucircumflex\")\n+_S(\"Udieresis\")\n+_S(\"Ugrave\")\n+_S(\"Yacute\")\n+_S(\"Ydieresis\")\n+_S(\"Zcaron\")\n+_S(\"aacute\")\n+_S(\"acircumflex\")\n+_S(\"adieresis\")\n+_S(\"agrave\")\n+_S(\"aring\")\n+_S(\"atilde\")\n+_S(\"ccedilla\")\n+_S(\"eacute\")\n+_S(\"ecircumflex\")\n+_S(\"edieresis\")\n+_S(\"egrave\")\n+_S(\"iacute\")\n+_S(\"icircumflex\")\n+_S(\"idieresis\")\n+_S(\"igrave\")\n+_S(\"ntilde\")\n+_S(\"oacute\")\n+_S(\"ocircumflex\")\n+_S(\"odieresis\")\n+_S(\"ograve\")\n+_S(\"otilde\")\n+_S(\"scaron\")\n+_S(\"uacute\")\n+_S(\"ucircumflex\")\n+_S(\"udieresis\")\n+_S(\"ugrave\")\n+_S(\"yacute\")\n+_S(\"ydieresis\")\n+_S(\"zcaron\")\n+_S(\"exclamsmall\")\n+_S(\"Hungarumlautsmall\")\n+_S(\"dollaroldstyle\")\n+_S(\"dollarsuperior\")\n+_S(\"ampersandsmall\")\n+_S(\"Acutesmall\")\n+_S(\"parenleftsuperior\")\n+_S(\"parenrightsuperior\")\n+_S(\"twodotenleader\")\n+_S(\"onedotenleader\")\n+_S(\"zerooldstyle\")\n+_S(\"oneoldstyle\")\n+_S(\"twooldstyle\")\n+_S(\"threeoldstyle\")\n+_S(\"fouroldstyle\")\n+_S(\"fiveoldstyle\")\n+_S(\"sixoldstyle\")\n+_S(\"sevenoldstyle\")\n+_S(\"eightoldstyle\")\n+_S(\"nineoldstyle\")\n+_S(\"commasuperior\")\n+_S(\"threequartersemdash\")\n+_S(\"periodsuperior\")\n+_S(\"questionsmall\")\n+_S(\"asuperior\")\n+_S(\"bsuperior\")\n+_S(\"centsuperior\")\n+_S(\"dsuperior\")\n+_S(\"esuperior\")\n+_S(\"isuperior\")\n+_S(\"lsuperior\")\n+_S(\"msuperior\")\n+_S(\"nsuperior\")\n+_S(\"osuperior\")\n+_S(\"rsuperior\")\n+_S(\"ssuperior\")\n+_S(\"tsuperior\")\n+_S(\"ff\")\n+_S(\"ffi\")\n+_S(\"ffl\")\n+_S(\"parenleftinferior\")\n+_S(\"parenrightinferior\")\n+_S(\"Circumflexsmall\")\n+_S(\"hyphensuperior\")\n+_S(\"Gravesmall\")\n+_S(\"Asmall\")\n+_S(\"Bsmall\")\n+_S(\"Csmall\")\n+_S(\"Dsmall\")\n+_S(\"Esmall\")\n+_S(\"Fsmall\")\n+_S(\"Gsmall\")\n+_S(\"Hsmall\")\n+_S(\"Ismall\")\n+_S(\"Jsmall\")\n+_S(\"Ksmall\")\n+_S(\"Lsmall\")\n+_S(\"Msmall\")\n+_S(\"Nsmall\")\n+_S(\"Osmall\")\n+_S(\"Psmall\")\n+_S(\"Qsmall\")\n+_S(\"Rsmall\")\n+_S(\"Ssmall\")\n+_S(\"Tsmall\")\n+_S(\"Usmall\")\n+_S(\"Vsmall\")\n+_S(\"Wsmall\")\n+_S(\"Xsmall\")\n+_S(\"Ysmall\")\n+_S(\"Zsmall\")\n+_S(\"colonmonetary\")\n+_S(\"onefitted\")\n+_S(\"rupiah\")\n+_S(\"Tildesmall\")\n+_S(\"exclamdownsmall\")\n+_S(\"centoldstyle\")\n+_S(\"Lslashsmall\")\n+_S(\"Scaronsmall\")\n+_S(\"Zcaronsmall\")\n+_S(\"Dieresissmall\")\n+_S(\"Brevesmall\")\n+_S(\"Caronsmall\")\n+_S(\"Dotaccentsmall\")\n+_S(\"Macronsmall\")\n+_S(\"figuredash\")\n+_S(\"hypheninferior\")\n+_S(\"Ogoneksmall\")\n+_S(\"Ringsmall\")\n+_S(\"Cedillasmall\")\n+_S(\"questiondownsmall\")\n+_S(\"oneeighth\")\n+_S(\"threeeighths\")\n+_S(\"fiveeighths\")\n+_S(\"seveneighths\")\n+_S(\"onethird\")\n+_S(\"twothirds\")\n+_S(\"zerosuperior\")\n+_S(\"foursuperior\")\n+_S(\"fivesuperior\")\n+_S(\"sixsuperior\")\n+_S(\"sevensuperior\")\n+_S(\"eightsuperior\")\n+_S(\"ninesuperior\")\n+_S(\"zeroinferior\")\n+_S(\"oneinferior\")\n+_S(\"twoinferior\")\n+_S(\"threeinferior\")\n+_S(\"fourinferior\")\n+_S(\"fiveinferior\")\n+_S(\"sixinferior\")\n+_S(\"seveninferior\")\n+_S(\"eightinferior\")\n+_S(\"nineinferior\")\n+_S(\"centinferior\")\n+_S(\"dollarinferior\")\n+_S(\"periodinferior\")\n+_S(\"commainferior\")\n+_S(\"Agravesmall\")\n+_S(\"Aacutesmall\")\n+_S(\"Acircumflexsmall\")\n+_S(\"Atildesmall\")\n+_S(\"Adieresissmall\")\n+_S(\"Aringsmall\")\n+_S(\"AEsmall\")\n+_S(\"Ccedillasmall\")\n+_S(\"Egravesmall\")\n+_S(\"Eacutesmall\")\n+_S(\"Ecircumflexsmall\")\n+_S(\"Edieresissmall\")\n+_S(\"Igravesmall\")\n+_S(\"Iacutesmall\")\n+_S(\"Icircumflexsmall\")\n+_S(\"Idieresissmall\")\n+_S(\"Ethsmall\")\n+_S(\"Ntildesmall\")\n+_S(\"Ogravesmall\")\n+_S(\"Oacutesmall\")\n+_S(\"Ocircumflexsmall\")\n+_S(\"Otildesmall\")\n+_S(\"Odieresissmall\")\n+_S(\"OEsmall\")\n+_S(\"Oslashsmall\")\n+_S(\"Ugravesmall\")\n+_S(\"Uacutesmall\")\n+_S(\"Ucircumflexsmall\")\n+_S(\"Udieresissmall\")\n+_S(\"Yacutesmall\")\n+_S(\"Thornsmall\")\n+_S(\"Ydieresissmall\")\n+_S(\"001.000\")\n+_S(\"001.001\")\n+_S(\"001.002\")\n+_S(\"001.003\")\n+_S(\"Black\")\n+_S(\"Bold\")\n+_S(\"Book\")\n+_S(\"Light\")\n+_S(\"Medium\")\n+_S(\"Regular\")\n+_S(\"Roman\")\n+_S(\"Semibold\")\n+\n+#endif \/* HB_OT_CFF1_STD_STR_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff1-std-str.hh","additions":425,"deletions":0,"binary":false,"changes":425,"status":"added"},{"patch":"@@ -27,0 +27,6 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_CFF\n+\n+#include \"hb-draw.hh\"\n+#include \"hb-algs.hh\"\n@@ -32,0 +38,12 @@\n+struct sid_to_gid_t\n+{\n+  uint16_t  sid;\n+  uint8_t   gid;\n+\n+  int cmp (uint16_t a) const\n+  {\n+    if (a == sid) return 0;\n+    return (a < sid) ? -1 : 1;\n+  }\n+};\n+\n@@ -103,0 +121,74 @@\n+\/* SID to glyph ID *\/\n+static const sid_to_gid_t expert_charset_sid_to_gid [] =\n+{\n+    { 1, 1 },     { 13, 12 },   { 14, 13 },   { 15, 14 },\n+    { 27, 26 },   { 28, 27 },   { 99, 15 },   { 109, 46 },\n+    { 110, 47 },  { 150, 111 }, { 155, 101 }, { 158, 100 },\n+    { 163, 102 }, { 164, 112 }, { 169, 113 }, { 229, 2 },\n+    { 230, 3 },   { 231, 4 },   { 232, 5 },   { 233, 6 },\n+    { 234, 7 },   { 235, 8 },   { 236, 9 },   { 237, 10 },\n+    { 238, 11 },  { 239, 16 },  { 240, 17 },  { 241, 18 },\n+    { 242, 19 },  { 243, 20 },  { 244, 21 },  { 245, 22 },\n+    { 246, 23 },  { 247, 24 },  { 248, 25 },  { 249, 28 },\n+    { 250, 29 },  { 251, 30 },  { 252, 31 },  { 253, 32 },\n+    { 254, 33 },  { 255, 34 },  { 256, 35 },  { 257, 36 },\n+    { 258, 37 },  { 259, 38 },  { 260, 39 },  { 261, 40 },\n+    { 262, 41 },  { 263, 42 },  { 264, 43 },  { 265, 44 },\n+    { 266, 45 },  { 267, 48 },  { 268, 49 },  { 269, 50 },\n+    { 270, 51 },  { 271, 52 },  { 272, 53 },  { 273, 54 },\n+    { 274, 55 },  { 275, 56 },  { 276, 57 },  { 277, 58 },\n+    { 278, 59 },  { 279, 60 },  { 280, 61 },  { 281, 62 },\n+    { 282, 63 },  { 283, 64 },  { 284, 65 },  { 285, 66 },\n+    { 286, 67 },  { 287, 68 },  { 288, 69 },  { 289, 70 },\n+    { 290, 71 },  { 291, 72 },  { 292, 73 },  { 293, 74 },\n+    { 294, 75 },  { 295, 76 },  { 296, 77 },  { 297, 78 },\n+    { 298, 79 },  { 299, 80 },  { 300, 81 },  { 301, 82 },\n+    { 302, 83 },  { 303, 84 },  { 304, 85 },  { 305, 86 },\n+    { 306, 87 },  { 307, 88 },  { 308, 89 },  { 309, 90 },\n+    { 310, 91 },  { 311, 92 },  { 312, 93 },  { 313, 94 },\n+    { 314, 95 },  { 315, 96 },  { 316, 97 },  { 317, 98 },\n+    { 318, 99 },  { 319, 103 }, { 320, 104 }, { 321, 105 },\n+    { 322, 106 }, { 323, 107 }, { 324, 108 }, { 325, 109 },\n+    { 326, 110 }, { 327, 114 }, { 328, 115 }, { 329, 116 },\n+    { 330, 117 }, { 331, 118 }, { 332, 119 }, { 333, 120 },\n+    { 334, 121 }, { 335, 122 }, { 336, 123 }, { 337, 124 },\n+    { 338, 125 }, { 339, 126 }, { 340, 127 }, { 341, 128 },\n+    { 342, 129 }, { 343, 130 }, { 344, 131 }, { 345, 132 },\n+    { 346, 133 }, { 347, 134 }, { 348, 135 }, { 349, 136 },\n+    { 350, 137 }, { 351, 138 }, { 352, 139 }, { 353, 140 },\n+    { 354, 141 }, { 355, 142 }, { 356, 143 }, { 357, 144 },\n+    { 358, 145 }, { 359, 146 }, { 360, 147 }, { 361, 148 },\n+    { 362, 149 }, { 363, 150 }, { 364, 151 }, { 365, 152 },\n+    { 366, 153 }, { 367, 154 }, { 368, 155 }, { 369, 156 },\n+    { 370, 157 }, { 371, 158 }, { 372, 159 }, { 373, 160 },\n+    { 374, 161 }, { 375, 162 }, { 376, 163 }, { 377, 164 },\n+    { 378, 165 }\n+};\n+\n+\/* SID to glyph ID *\/\n+static const sid_to_gid_t expert_subset_charset_sid_to_gid [] =\n+{\n+  { 1, 1 },       { 13, 8 },      { 14, 9 },      { 15, 10 },\n+  { 27, 22 },     { 28, 23 },     { 99, 11 },     { 109, 41 },\n+  { 110, 42 },    { 150, 64 },    { 155, 55 },    { 158, 54 },\n+  { 163, 56 },    { 164, 65 },    { 169, 66 },    { 231, 2 },\n+  { 232, 3 },     { 235, 4 },     { 236, 5 },     { 237, 6 },\n+  { 238, 7 },     { 239, 12 },    { 240, 13 },    { 241, 14 },\n+  { 242, 15 },    { 243, 16 },    { 244, 17 },    { 245, 18 },\n+  { 246, 19 },    { 247, 20 },    { 248, 21 },    { 249, 24 },\n+  { 250, 25 },    { 251, 26 },    { 253, 27 },    { 254, 28 },\n+  { 255, 29 },    { 256, 30 },    { 257, 31 },    { 258, 32 },\n+  { 259, 33 },    { 260, 34 },    { 261, 35 },    { 262, 36 },\n+  { 263, 37 },    { 264, 38 },    { 265, 39 },    { 266, 40 },\n+  { 267, 43 },    { 268, 44 },    { 269, 45 },    { 270, 46 },\n+  { 272, 47 },    { 300, 48 },    { 301, 49 },    { 302, 50 },\n+  { 305, 51 },    { 314, 52 },    { 315, 53 },    { 320, 57 },\n+  { 321, 58 },    { 322, 59 },    { 323, 60 },    { 324, 61 },\n+  { 325, 62 },    { 326, 63 },    { 327, 67 },    { 328, 68 },\n+  { 329, 69 },    { 330, 70 },    { 331, 71 },    { 332, 72 },\n+  { 333, 73 },    { 334, 74 },    { 335, 75 },    { 336, 76 },\n+  { 337, 77 },    { 338, 78 },    { 339, 79 },    { 340, 80 },\n+  { 341, 81 },    { 342, 82 },    { 343, 83 },    { 344, 84 },\n+  { 345, 85 },    { 346, 86 }\n+};\n+\n@@ -156,0 +248,12 @@\n+hb_codepoint_t OT::cff1::lookup_expert_charset_for_glyph (hb_codepoint_t sid)\n+{\n+  const auto *pair = hb_sorted_array (expert_charset_sid_to_gid).bsearch (sid);\n+  return pair ? pair->gid : 0;\n+}\n+\n+hb_codepoint_t OT::cff1::lookup_expert_subset_charset_for_glyph (hb_codepoint_t sid)\n+{\n+  const auto *pair = hb_sorted_array (expert_subset_charset_sid_to_gid).bsearch (sid);\n+  return pair ? pair->gid : 0;\n+}\n+\n@@ -168,2 +272,2 @@\n-    min.set_int (0x7FFFFFFF, 0x7FFFFFFF);\n-    max.set_int (-0x80000000, -0x80000000);\n+    min.set_int (INT_MAX, INT_MAX);\n+    max.set_int (INT_MIN, INT_MIN);\n@@ -202,2 +306,1 @@\n-  bool empty () const\n-  { return (min.x >= max.x) || (min.y >= max.y); }\n+  bool empty () const { return (min.x >= max.x) || (min.y >= max.y); }\n@@ -209,1 +312,1 @@\n-struct extents_param_t\n+struct cff1_extents_param_t\n@@ -218,2 +321,2 @@\n-  void start_path ()         { path_open = true; }\n-  void end_path ()           { path_open = false; }\n+  void start_path   ()       { path_open = true; }\n+  void end_path     ()       { path_open = false; }\n@@ -222,2 +325,2 @@\n-  bool    path_open;\n-  bounds_t  bounds;\n+  bool path_open;\n+  bounds_t bounds;\n@@ -228,1 +331,1 @@\n-struct cff1_path_procs_extents_t : path_procs_t<cff1_path_procs_extents_t, cff1_cs_interp_env_t, extents_param_t>\n+struct cff1_path_procs_extents_t : path_procs_t<cff1_path_procs_extents_t, cff1_cs_interp_env_t, cff1_extents_param_t>\n@@ -230,1 +333,1 @@\n-  static void moveto (cff1_cs_interp_env_t &env, extents_param_t& param, const point_t &pt)\n+  static void moveto (cff1_cs_interp_env_t &env, cff1_extents_param_t& param, const point_t &pt)\n@@ -236,1 +339,1 @@\n-  static void line (cff1_cs_interp_env_t &env, extents_param_t& param, const point_t &pt1)\n+  static void line (cff1_cs_interp_env_t &env, cff1_extents_param_t& param, const point_t &pt1)\n@@ -247,1 +350,1 @@\n-  static void curve (cff1_cs_interp_env_t &env, extents_param_t& param, const point_t &pt1, const point_t &pt2, const point_t &pt3)\n+  static void curve (cff1_cs_interp_env_t &env, cff1_extents_param_t& param, const point_t &pt1, const point_t &pt2, const point_t &pt3)\n@@ -264,1 +367,1 @@\n-struct cff1_cs_opset_extents_t : cff1_cs_opset_t<cff1_cs_opset_extents_t, extents_param_t, cff1_path_procs_extents_t>\n+struct cff1_cs_opset_extents_t : cff1_cs_opset_t<cff1_cs_opset_extents_t, cff1_extents_param_t, cff1_path_procs_extents_t>\n@@ -266,1 +369,1 @@\n-  static void process_seac (cff1_cs_interp_env_t &env, extents_param_t& param)\n+  static void process_seac (cff1_cs_interp_env_t &env, cff1_extents_param_t& param)\n@@ -295,1 +398,1 @@\n-  cff1_cs_interpreter_t<cff1_cs_opset_extents_t, extents_param_t> interp;\n+  cff1_cs_interpreter_t<cff1_cs_opset_extents_t, cff1_extents_param_t> interp;\n@@ -299,1 +402,1 @@\n-  extents_param_t  param;\n+  cff1_extents_param_t  param;\n@@ -306,1 +409,1 @@\n-bool OT::cff1::accelerator_t::get_extents (hb_codepoint_t glyph, hb_glyph_extents_t *extents) const\n+bool OT::cff1::accelerator_t::get_extents (hb_font_t *font, hb_codepoint_t glyph, hb_glyph_extents_t *extents) const\n@@ -308,1 +411,6 @@\n-  bounds_t  bounds;\n+#ifdef HB_NO_OT_FONT_CFF\n+  \/* XXX Remove check when this code moves to .hh file. *\/\n+  return true;\n+#endif\n+\n+  bounds_t bounds;\n@@ -320,2 +428,2 @@\n-    extents->x_bearing = (int32_t)bounds.min.x.floor ();\n-    extents->width = (int32_t)bounds.max.x.ceil () - extents->x_bearing;\n+    extents->x_bearing = font->em_scalef_x (bounds.min.x.to_real ());\n+    extents->width = font->em_scalef_x (bounds.max.x.to_real () - bounds.min.x.to_real ());\n@@ -330,2 +438,2 @@\n-    extents->y_bearing = (int32_t)bounds.max.y.ceil ();\n-    extents->height = (int32_t)bounds.min.y.floor () - extents->y_bearing;\n+    extents->y_bearing = font->em_scalef_y (bounds.max.y.to_real ());\n+    extents->height = font->em_scalef_y (bounds.min.y.to_real () - bounds.max.y.to_real ());\n@@ -337,0 +445,124 @@\n+#ifdef HB_EXPERIMENTAL_API\n+struct cff1_path_param_t\n+{\n+  cff1_path_param_t (const OT::cff1::accelerator_t *cff_, hb_font_t *font_,\n+                     draw_helper_t &draw_helper_, point_t *delta_)\n+  {\n+    draw_helper = &draw_helper_;\n+    cff = cff_;\n+    font = font_;\n+    delta = delta_;\n+  }\n+\n+  void move_to (const point_t &p)\n+  {\n+    point_t point = p;\n+    if (delta) point.move (*delta);\n+    draw_helper->move_to (font->em_scalef_x (point.x.to_real ()), font->em_scalef_y (point.y.to_real ()));\n+  }\n+\n+  void line_to (const point_t &p)\n+  {\n+    point_t point = p;\n+    if (delta) point.move (*delta);\n+    draw_helper->line_to (font->em_scalef_x (point.x.to_real ()), font->em_scalef_y (point.y.to_real ()));\n+  }\n+\n+  void cubic_to (const point_t &p1, const point_t &p2, const point_t &p3)\n+  {\n+    point_t point1 = p1, point2 = p2, point3 = p3;\n+    if (delta)\n+    {\n+      point1.move (*delta);\n+      point2.move (*delta);\n+      point3.move (*delta);\n+    }\n+    draw_helper->cubic_to (font->em_scalef_x (point1.x.to_real ()), font->em_scalef_y (point1.y.to_real ()),\n+                           font->em_scalef_x (point2.x.to_real ()), font->em_scalef_y (point2.y.to_real ()),\n+                           font->em_scalef_x (point3.x.to_real ()), font->em_scalef_y (point3.y.to_real ()));\n+  }\n+\n+  void end_path () { draw_helper->end_path (); }\n+\n+  hb_font_t *font;\n+  draw_helper_t *draw_helper;\n+  point_t *delta;\n+\n+  const OT::cff1::accelerator_t *cff;\n+};\n+\n+struct cff1_path_procs_path_t : path_procs_t<cff1_path_procs_path_t, cff1_cs_interp_env_t, cff1_path_param_t>\n+{\n+  static void moveto (cff1_cs_interp_env_t &env, cff1_path_param_t& param, const point_t &pt)\n+  {\n+    param.move_to (pt);\n+    env.moveto (pt);\n+  }\n+\n+  static void line (cff1_cs_interp_env_t &env, cff1_path_param_t &param, const point_t &pt1)\n+  {\n+    param.line_to (pt1);\n+    env.moveto (pt1);\n+  }\n+\n+  static void curve (cff1_cs_interp_env_t &env, cff1_path_param_t &param, const point_t &pt1, const point_t &pt2, const point_t &pt3)\n+  {\n+    param.cubic_to (pt1, pt2, pt3);\n+    env.moveto (pt3);\n+  }\n+};\n+\n+static bool _get_path (const OT::cff1::accelerator_t *cff, hb_font_t *font, hb_codepoint_t glyph,\n+                       draw_helper_t &draw_helper, bool in_seac = false, point_t *delta = nullptr);\n+\n+struct cff1_cs_opset_path_t : cff1_cs_opset_t<cff1_cs_opset_path_t, cff1_path_param_t, cff1_path_procs_path_t>\n+{\n+  static void process_seac (cff1_cs_interp_env_t &env, cff1_path_param_t& param)\n+  {\n+    \/* End previous path *\/\n+    param.end_path ();\n+\n+    unsigned int n = env.argStack.get_count ();\n+    point_t delta;\n+    delta.x = env.argStack[n-4];\n+    delta.y = env.argStack[n-3];\n+    hb_codepoint_t base = param.cff->std_code_to_glyph (env.argStack[n-2].to_int ());\n+    hb_codepoint_t accent = param.cff->std_code_to_glyph (env.argStack[n-1].to_int ());\n+\n+    if (unlikely (!(!env.in_seac && base && accent\n+                    && _get_path (param.cff, param.font, base, *param.draw_helper, true)\n+                    && _get_path (param.cff, param.font, accent, *param.draw_helper, true, &delta))))\n+      env.set_error ();\n+  }\n+};\n+\n+bool _get_path (const OT::cff1::accelerator_t *cff, hb_font_t *font, hb_codepoint_t glyph,\n+                draw_helper_t &draw_helper, bool in_seac, point_t *delta)\n+{\n+  if (unlikely (!cff->is_valid () || (glyph >= cff->num_glyphs))) return false;\n+\n+  unsigned int fd = cff->fdSelect->get_fd (glyph);\n+  cff1_cs_interpreter_t<cff1_cs_opset_path_t, cff1_path_param_t> interp;\n+  const byte_str_t str = (*cff->charStrings)[glyph];\n+  interp.env.init (str, *cff, fd);\n+  interp.env.set_in_seac (in_seac);\n+  cff1_path_param_t param (cff, font, draw_helper, delta);\n+  if (unlikely (!interp.interpret (param))) return false;\n+\n+  \/* Let's end the path specially since it is called inside seac also *\/\n+  param.end_path ();\n+\n+  return true;\n+}\n+\n+bool OT::cff1::accelerator_t::get_path (hb_font_t *font, hb_codepoint_t glyph, draw_helper_t &draw_helper) const\n+{\n+#ifdef HB_NO_OT_FONT_CFF\n+  \/* XXX Remove check when this code moves to .hh file. *\/\n+  return true;\n+#endif\n+\n+  return _get_path (this, font, glyph, draw_helper);\n+}\n+#endif\n+\n@@ -386,0 +618,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff1-table.cc","additions":258,"deletions":23,"binary":false,"changes":281,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"hb-ot-head-table.hh\"\n@@ -33,0 +32,7 @@\n+#include \"hb-draw.hh\"\n+\n+#define HB_STRING_ARRAY_NAME cff1_std_strings\n+#define HB_STRING_ARRAY_LIST \"hb-ot-cff1-std-str.hh\"\n+#include \"hb-string-array.hh\"\n+#undef HB_STRING_ARRAY_LIST\n+#undef HB_STRING_ARRAY_NAME\n@@ -38,1 +44,1 @@\n- * http:\/\/www.adobe.com\/content\/dam\/acom\/en\/devnet\/font\/pdfs\/5176.CFF.pdf\n+ * https:\/\/www.adobe.com\/content\/dam\/acom\/en\/devnet\/font\/pdfs\/5176.CFF.pdf\n@@ -52,1 +58,0 @@\n-typedef FDArray<HBUINT16>  CFF1FDArray;\n@@ -62,1 +67,1 @@\n-    return_trace (c->check_struct (this) && codes[nCodes - 1].sanitize (c));\n+    return_trace (codes.sanitize (c));\n@@ -69,1 +74,1 @@\n-    if (glyph < nCodes)\n+    if (glyph < nCodes ())\n@@ -77,2 +82,2 @@\n-  unsigned int get_size () const\n-  { return HBUINT8::static_size * (nCodes + 1); }\n+  HBUINT8 &nCodes () { return codes.len; }\n+  HBUINT8 nCodes () const { return codes.len; }\n@@ -80,2 +85,1 @@\n-  HBUINT8     nCodes;\n-  HBUINT8     codes[VAR];\n+  ArrayOf<HBUINT8, HBUINT8> codes;\n@@ -83,1 +87,1 @@\n-  DEFINE_SIZE_ARRAY(1, codes);\n+  DEFINE_SIZE_ARRAY_SIZED (1, codes);\n@@ -100,3 +104,0 @@\n-  unsigned int get_size () const\n-  { return HBUINT8::static_size + Encoding1_Range::static_size * nRanges; }\n-\n@@ -106,1 +107,1 @@\n-    return_trace (c->check_struct (this) && ((nRanges == 0) || (ranges[nRanges - 1]).sanitize (c)));\n+    return_trace (ranges.sanitize (c));\n@@ -113,1 +114,1 @@\n-    for (unsigned int i = 0; i < nRanges; i++)\n+    for (unsigned int i = 0; i < nRanges (); i++)\n@@ -117,1 +118,2 @@\n-        return (hb_codepoint_t)ranges[i].first + glyph;\n+        hb_codepoint_t code = (hb_codepoint_t) ranges[i].first + glyph;\n+        return (likely (code < 0x100) ? code: CFF_UNDEF_CODE);\n@@ -124,2 +126,4 @@\n-  HBUINT8          nRanges;\n-  Encoding1_Range   ranges[VAR];\n+  HBUINT8 &nRanges () { return ranges.len; }\n+  HBUINT8 nRanges () const { return ranges.len; }\n+\n+  ArrayOf<Encoding1_Range, HBUINT8> ranges;\n@@ -127,1 +131,1 @@\n-  DEFINE_SIZE_ARRAY (1, ranges);\n+  DEFINE_SIZE_ARRAY_SIZED (1, ranges);\n@@ -147,1 +151,1 @@\n-    return_trace (c->check_struct (this) && ((nSups == 0) || (supps[nSups - 1]).sanitize (c)));\n+    return_trace (supps.sanitize (c));\n@@ -152,1 +156,1 @@\n-    for (unsigned int i = 0; i < nSups; i++)\n+    for (unsigned int i = 0; i < nSups (); i++)\n@@ -157,2 +161,2 @@\n-  unsigned int get_size () const\n-  { return HBUINT8::static_size + SuppEncoding::static_size * nSups; }\n+  HBUINT8 &nSups () { return supps.len; }\n+  HBUINT8 nSups () const { return supps.len; }\n@@ -160,2 +164,1 @@\n-  HBUINT8        nSups;\n-  SuppEncoding   supps[VAR];\n+  ArrayOf<SuppEncoding, HBUINT8> supps;\n@@ -163,1 +166,1 @@\n-  DEFINE_SIZE_ARRAY (1, supps);\n+  DEFINE_SIZE_ARRAY_SIZED (1, supps);\n@@ -166,15 +169,2 @@\n-struct Encoding {\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-\n-    if (unlikely (!c->check_struct (this)))\n-      return_trace (false);\n-    unsigned int fmt = format & 0x7F;\n-    if (unlikely (fmt > 1))\n-      return_trace (false);\n-    if (unlikely (!((fmt == 0)? u.format0.sanitize (c): u.format1.sanitize (c))))\n-      return_trace (false);\n-    return_trace (((format & 0x80) == 0) || suppEncData ().sanitize (c));\n-  }\n-\n+struct Encoding\n+{\n@@ -187,1 +177,1 @@\n-    if (unlikely (dest == nullptr)) return_trace (false);\n+    if (unlikely (!dest)) return_trace (false);\n@@ -201,3 +191,4 @@\n-    if (unlikely (dest == nullptr)) return_trace (false);\n-    dest->format.set (format | ((supp_codes.length > 0)? 0x80: 0));\n-    if (format == 0)\n+    if (unlikely (!dest)) return_trace (false);\n+    dest->format = format | ((supp_codes.length > 0) ? 0x80 : 0);\n+    switch (format) {\n+    case 0:\n@@ -206,2 +197,2 @@\n-    if (unlikely (fmt0 == nullptr)) return_trace (false);\n-      fmt0->nCodes.set (enc_count);\n+      if (unlikely (!fmt0)) return_trace (false);\n+      fmt0->nCodes () = enc_count;\n@@ -213,1 +204,1 @@\n-          fmt0->codes[glyph++].set (code++);\n+          fmt0->codes[glyph++] = code++;\n@@ -218,1 +209,3 @@\n-    else\n+    break;\n+\n+    case 1:\n@@ -221,2 +214,2 @@\n-      if (unlikely (fmt1 == nullptr)) return_trace (false);\n-      fmt1->nRanges.set (code_ranges.length);\n+      if (unlikely (!fmt1)) return_trace (false);\n+      fmt1->nRanges () = code_ranges.length;\n@@ -227,2 +220,2 @@\n-        fmt1->ranges[i].first.set (code_ranges[i].code);\n-        fmt1->ranges[i].nLeft.set (code_ranges[i].glyph);\n+        fmt1->ranges[i].first = code_ranges[i].code;\n+        fmt1->ranges[i].nLeft = code_ranges[i].glyph;\n@@ -231,1 +224,5 @@\n-    if (supp_codes.length > 0)\n+    break;\n+\n+    }\n+\n+    if (supp_codes.length)\n@@ -234,2 +231,2 @@\n-      if (unlikely (suppData == nullptr)) return_trace (false);\n-      suppData->nSups.set (supp_codes.length);\n+      if (unlikely (!suppData)) return_trace (false);\n+      suppData->nSups () = supp_codes.length;\n@@ -238,2 +235,2 @@\n-        suppData->supps[i].code.set (supp_codes[i].code);\n-        suppData->supps[i].glyph.set (supp_codes[i].glyph); \/* actually SID *\/\n+        suppData->supps[i].code = supp_codes[i].code;\n+        suppData->supps[i].glyph = supp_codes[i].glyph; \/* actually SID *\/\n@@ -242,2 +239,0 @@\n-    return_trace (true);\n-  }\n@@ -245,13 +240,1 @@\n-  \/* parallel to above: calculate the size of a subset Encoding *\/\n-  static unsigned int calculate_serialized_size (uint8_t format,\n-                                                 unsigned int enc_count,\n-                                                 unsigned int supp_count)\n-  {\n-    unsigned int  size = min_size;\n-    if (format == 0)\n-      size += Encoding0::min_size + HBUINT8::static_size * enc_count;\n-    else\n-      size += Encoding1::min_size + Encoding1_Range::static_size * enc_count;\n-    if (supp_count > 0)\n-      size += CFF1SuppEncData::min_size + SuppEncoding::static_size * supp_count;\n-    return size;\n+    return_trace (true);\n@@ -263,4 +246,5 @@\n-    if (table_format () == 0)\n-      size += u.format0.get_size ();\n-    else\n-      size += u.format1.get_size ();\n+    switch (table_format ())\n+    {\n+    case 0: size += u.format0.get_size (); break;\n+    case 1: size += u.format1.get_size (); break;\n+    }\n@@ -274,4 +258,6 @@\n-    if (table_format () == 0)\n-      return u.format0.get_code (glyph);\n-    else\n-      return u.format1.get_code (glyph);\n+    switch (table_format ())\n+    {\n+    case 0: return u.format0.get_code (glyph);\n+    case 1: return u.format1.get_code (glyph);\n+    default:return 0;\n+    }\n@@ -280,2 +266,2 @@\n-  uint8_t table_format () const { return (format & 0x7F); }\n-  bool  has_supplement () const { return (format & 0x80) != 0; }\n+  uint8_t table_format () const { return format & 0x7F; }\n+  bool  has_supplement () const { return format & 0x80; }\n@@ -290,0 +276,15 @@\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    if (unlikely (!c->check_struct (this)))\n+      return_trace (false);\n+\n+    switch (table_format ())\n+    {\n+    case 0: if (unlikely (!u.format0.sanitize (c))) { return_trace (false); } break;\n+    case 1: if (unlikely (!u.format1.sanitize (c))) { return_trace (false); } break;\n+    default:return_trace (false);\n+    }\n+    return_trace (likely (!has_supplement () || suppEncData ().sanitize (c)));\n+  }\n+\n@@ -293,4 +294,6 @@\n-    if ((format & 0x7F) == 0)\n-      return StructAfter<CFF1SuppEncData> (u.format0.codes[u.format0.nCodes-1]);\n-    else\n-      return StructAfter<CFF1SuppEncData> (u.format1.ranges[u.format1.nRanges-1]);\n+    switch (table_format ())\n+    {\n+    case 0: return StructAfter<CFF1SuppEncData> (u.format0.codes[u.format0.nCodes ()-1]);\n+    case 1: return StructAfter<CFF1SuppEncData> (u.format1.ranges[u.format1.nRanges ()-1]);\n+    default:return Null (CFF1SuppEncData);\n+    }\n@@ -301,1 +304,0 @@\n-\n@@ -303,2 +305,2 @@\n-    Encoding0   format0;\n-    Encoding1   format1;\n+  Encoding0     format0;\n+  Encoding1     format1;\n@@ -346,1 +348,1 @@\n-  HBUINT16  sids[VAR];\n+  HBUINT16  sids[HB_VAR_ARRAY];\n@@ -428,1 +430,1 @@\n-  Charset_Range<TYPE>   ranges[VAR];\n+  Charset_Range<TYPE>   ranges[HB_VAR_ARRAY];\n@@ -438,17 +440,2 @@\n-struct Charset {\n-  bool sanitize (hb_sanitize_context_t *c) const\n-  {\n-    TRACE_SANITIZE (this);\n-\n-    if (unlikely (!c->check_struct (this)))\n-      return_trace (false);\n-    if (format == 0)\n-      return_trace (u.format0.sanitize (c, c->get_num_glyphs ()));\n-    else if (format == 1)\n-      return_trace (u.format1.sanitize (c, c->get_num_glyphs ()));\n-    else if (likely (format == 2))\n-      return_trace (u.format2.sanitize (c, c->get_num_glyphs ()));\n-    else\n-      return_trace (false);\n-  }\n-\n+struct Charset\n+{\n@@ -461,1 +448,1 @@\n-    if (unlikely (dest == nullptr)) return_trace (false);\n+    if (unlikely (!dest)) return_trace (false);\n@@ -474,3 +461,5 @@\n-    if (unlikely (dest == nullptr)) return_trace (false);\n-    dest->format.set (format);\n-    if (format == 0)\n+    if (unlikely (!dest)) return_trace (false);\n+    dest->format = format;\n+    switch (format)\n+    {\n+    case 0:\n@@ -479,1 +468,1 @@\n-    if (unlikely (fmt0 == nullptr)) return_trace (false);\n+      if (unlikely (!fmt0)) return_trace (false);\n@@ -485,1 +474,1 @@\n-          fmt0->sids[glyph++].set (sid++);\n+          fmt0->sids[glyph++] = sid++;\n@@ -488,1 +477,3 @@\n-    else if (format == 1)\n+    break;\n+\n+    case 1:\n@@ -491,1 +482,1 @@\n-      if (unlikely (fmt1 == nullptr)) return_trace (false);\n+      if (unlikely (!fmt1)) return_trace (false);\n@@ -496,2 +487,2 @@\n-        fmt1->ranges[i].first.set (sid_ranges[i].code);\n-        fmt1->ranges[i].nLeft.set (sid_ranges[i].glyph);\n+        fmt1->ranges[i].first = sid_ranges[i].code;\n+        fmt1->ranges[i].nLeft = sid_ranges[i].glyph;\n@@ -500,1 +491,3 @@\n-    else \/* format 2 *\/\n+    break;\n+\n+    case 2:\n@@ -503,1 +496,1 @@\n-      if (unlikely (fmt2 == nullptr)) return_trace (false);\n+      if (unlikely (!fmt2)) return_trace (false);\n@@ -508,2 +501,2 @@\n-        fmt2->ranges[i].first.set (sid_ranges[i].code);\n-        fmt2->ranges[i].nLeft.set (sid_ranges[i].glyph);\n+        fmt2->ranges[i].first = sid_ranges[i].code;\n+        fmt2->ranges[i].nLeft = sid_ranges[i].glyph;\n@@ -511,0 +504,3 @@\n+    }\n+    break;\n+\n@@ -515,4 +511,1 @@\n-  \/* parallel to above: calculate the size of a subset Charset *\/\n-  static unsigned int calculate_serialized_size (\n-                        uint8_t format,\n-                        unsigned int count)\n+  unsigned int get_size (unsigned int num_glyphs) const\n@@ -520,9 +513,7 @@\n-    unsigned int  size = min_size;\n-    if (format == 0)\n-      size += Charset0::min_size + HBUINT16::static_size * (count - 1);\n-    else if (format == 1)\n-      size += Charset1::min_size + Charset1_Range::static_size * count;\n-    else\n-      size += Charset2::min_size + Charset2_Range::static_size * count;\n-\n-    return size;\n+    switch (format)\n+    {\n+    case 0: return min_size + u.format0.get_size (num_glyphs);\n+    case 1: return min_size + u.format1.get_size (num_glyphs);\n+    case 2: return min_size + u.format2.get_size (num_glyphs);\n+    default:return 0;\n+    }\n@@ -531,1 +522,1 @@\n-  unsigned int get_size (unsigned int num_glyphs) const\n+  hb_codepoint_t get_sid (hb_codepoint_t glyph, unsigned int num_glyphs) const\n@@ -533,8 +524,8 @@\n-    unsigned int size = min_size;\n-    if (format == 0)\n-      size += u.format0.get_size (num_glyphs);\n-    else if (format == 1)\n-      size += u.format1.get_size (num_glyphs);\n-    else\n-      size += u.format2.get_size (num_glyphs);\n-    return size;\n+    if (unlikely (glyph >= num_glyphs)) return 0;\n+    switch (format)\n+    {\n+    case 0: return u.format0.get_sid (glyph);\n+    case 1: return u.format1.get_sid (glyph);\n+    case 2: return u.format2.get_sid (glyph);\n+    default:return 0;\n+    }\n@@ -543,1 +534,1 @@\n-  hb_codepoint_t get_sid (hb_codepoint_t glyph) const\n+  hb_codepoint_t get_glyph (hb_codepoint_t sid, unsigned int num_glyphs) const\n@@ -545,6 +536,7 @@\n-    if (format == 0)\n-      return u.format0.get_sid (glyph);\n-    else if (format == 1)\n-      return u.format1.get_sid (glyph);\n-    else\n-      return u.format2.get_sid (glyph);\n+    switch (format)\n+    {\n+    case 0: return u.format0.get_glyph (sid, num_glyphs);\n+    case 1: return u.format1.get_glyph (sid, num_glyphs);\n+    case 2: return u.format2.get_glyph (sid, num_glyphs);\n+    default:return 0;\n+    }\n@@ -553,1 +545,1 @@\n-  hb_codepoint_t get_glyph (hb_codepoint_t sid, unsigned int num_glyphs) const\n+  bool sanitize (hb_sanitize_context_t *c) const\n@@ -555,6 +547,11 @@\n-    if (format == 0)\n-      return u.format0.get_glyph (sid, num_glyphs);\n-    else if (format == 1)\n-      return u.format1.get_glyph (sid, num_glyphs);\n-    else\n-      return u.format2.get_glyph (sid, num_glyphs);\n+    TRACE_SANITIZE (this);\n+    if (unlikely (!c->check_struct (this)))\n+      return_trace (false);\n+\n+    switch (format)\n+    {\n+    case 0: return_trace (u.format0.sanitize (c, c->get_num_glyphs ()));\n+    case 1: return_trace (u.format1.sanitize (c, c->get_num_glyphs ()));\n+    case 2: return_trace (u.format2.sanitize (c, c->get_num_glyphs ()));\n+    default:return_trace (false);\n+    }\n@@ -576,1 +573,1 @@\n-                  unsigned int offSize_, const remap_t &sidmap)\n+                  const hb_inc_bimap_t &sidmap)\n@@ -579,1 +576,1 @@\n-    if (unlikely ((strings.count == 0) || (sidmap.get_count () == 0)))\n+    if (unlikely ((strings.count == 0) || (sidmap.get_population () == 0)))\n@@ -581,1 +578,1 @@\n-      if (!unlikely (c->extend_min (this->count)))\n+      if (unlikely (!c->extend_min (this->count)))\n@@ -583,1 +580,1 @@\n-      count.set (0);\n+      count = 0;\n@@ -589,1 +586,1 @@\n-    if (!bytesArray.resize (sidmap.get_count ()))\n+    if (!bytesArray.resize (sidmap.get_population ()))\n@@ -594,1 +591,1 @@\n-      if (j != CFF_UNDEF_CODE)\n+      if (j != HB_MAP_VALUE_INVALID)\n@@ -598,1 +595,1 @@\n-    bool result = CFF1Index::serialize (c, offSize_, bytesArray);\n+    bool result = CFF1Index::serialize (c, bytesArray);\n@@ -602,16 +599,0 @@\n-\n-  \/* in parallel to above *\/\n-  unsigned int calculate_serialized_size (unsigned int &offSize \/*OUT*\/, const remap_t &sidmap) const\n-  {\n-    offSize = 0;\n-    if ((count == 0) || (sidmap.get_count () == 0))\n-      return count.static_size;\n-\n-    unsigned int dataSize = 0;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (sidmap[i] != CFF_UNDEF_CODE)\n-        dataSize += length_at (i);\n-\n-    offSize = calcOffSize(dataSize);\n-    return CFF1Index::calculate_serialized_size (offSize, sidmap.get_count (), dataSize);\n-  }\n@@ -720,1 +701,1 @@\n-  table_info_t       privateDictInfo;\n+  table_info_t    privateDictInfo;\n@@ -862,1 +843,1 @@\n-    localSubrs = &Null(CFF1Subrs);\n+    localSubrs = &Null (CFF1Subrs);\n@@ -866,11 +847,0 @@\n-  unsigned int calculate_serialized_size () const\n-  {\n-    unsigned int size = 0;\n-    for (unsigned int i = 0; i < dict_values_t<VAL>::get_count; i++)\n-      if (dict_values_t<VAL>::get_value (i).op == OpCode_Subrs)\n-        size += OpCode_Size (OpCode_shortint) + 2 + OpCode_Size (OpCode_Subrs);\n-      else\n-        size += dict_values_t<VAL>::get_value (i).str.length;\n-    return size;\n-  }\n-\n@@ -979,0 +949,31 @@\n+struct cff1_font_dict_values_mod_t\n+{\n+  cff1_font_dict_values_mod_t() { init (); }\n+\n+  void init () { init ( &Null (cff1_font_dict_values_t), CFF_UNDEF_SID ); }\n+\n+  void init (const cff1_font_dict_values_t *base_,\n+             unsigned int fontName_)\n+  {\n+    base = base_;\n+    fontName = fontName_;\n+    privateDictInfo.init ();\n+  }\n+\n+  unsigned get_count () const { return base->get_count (); }\n+\n+  const op_str_t &operator [] (unsigned int i) const { return (*base)[i]; }\n+\n+  const cff1_font_dict_values_t    *base;\n+  table_info_t             privateDictInfo;\n+  unsigned int          fontName;\n+};\n+\n+struct CFF1FDArray : FDArray<HBUINT16>\n+{\n+  \/* FDArray::serialize() requires this partial specialization to compile *\/\n+  template <typename ITER, typename OP_SERIALIZER>\n+  bool serialize (hb_serialize_context_t *c, ITER it, OP_SERIALIZER& opszr)\n+  { return FDArray<HBUINT16>::serialize<cff1_font_dict_values_mod_t, cff1_font_dict_values_mod_t> (c, it, opszr); }\n+};\n+\n@@ -1013,1 +1014,1 @@\n-      if (cff == &Null(OT::cff1))\n+      if (cff == &Null (OT::cff1))\n@@ -1034,1 +1035,1 @@\n-        charset = &Null(Charset);\n+        charset = &Null (Charset);\n@@ -1046,2 +1047,2 @@\n-        if (unlikely ((fdArray == &Null(CFF1FDArray)) || !fdArray->sanitize (&sc) ||\n-            (fdSelect == &Null(CFF1FDSelect)) || !fdSelect->sanitize (&sc, fdArray->count)))\n+        if (unlikely ((fdArray == &Null (CFF1FDArray)) || !fdArray->sanitize (&sc) ||\n+            (fdSelect == &Null (CFF1FDSelect)) || !fdSelect->sanitize (&sc, fdArray->count)))\n@@ -1054,2 +1055,16 @@\n-        fdArray = &Null(CFF1FDArray);\n-        fdSelect = &Null(CFF1FDSelect);\n+        fdArray = &Null (CFF1FDArray);\n+        fdSelect = &Null (CFF1FDSelect);\n+      }\n+\n+      encoding = &Null (Encoding);\n+      if (is_CID ())\n+      {\n+        if (unlikely (charset == &Null (Charset))) { fini (); return; }\n+      }\n+      else\n+      {\n+        if (!is_predef_encoding ())\n+        {\n+          encoding = &StructAtOffsetOrNull<Encoding> (cff, topDict.EncodingOffset);\n+          if (unlikely ((encoding == &Null (Encoding)) || !encoding->sanitize (&sc))) { fini (); return; }\n+        }\n@@ -1068,1 +1083,1 @@\n-      if ((charStrings == &Null(CFF1CharStrings)) || unlikely (!charStrings->sanitize (&sc)))\n+      if ((charStrings == &Null (CFF1CharStrings)) || unlikely (!charStrings->sanitize (&sc)))\n@@ -1075,1 +1090,2 @@\n-      privateDicts.resize (fdCount);\n+      if (unlikely (!privateDicts.resize (fdCount)))\n+      { fini (); return; }\n@@ -1086,1 +1102,1 @@\n-          cff1_font_dict_values_t  *font;\n+          cff1_font_dict_values_t *font;\n@@ -1090,1 +1106,1 @@\n-          if (unlikely (font == &Crap(cff1_font_dict_values_t))) { fini (); return; }\n+          if (unlikely (font == &Crap (cff1_font_dict_values_t))) { fini (); return; }\n@@ -1093,1 +1109,1 @@\n-          PRIVDICTVAL  *priv = &privateDicts[i];\n+          PRIVDICTVAL *priv = &privateDicts[i];\n@@ -1102,1 +1118,1 @@\n-          if (priv->localSubrs != &Null(CFF1Subrs) &&\n+          if (priv->localSubrs != &Null (CFF1Subrs) &&\n@@ -1109,2 +1125,2 @@\n-        cff1_top_dict_values_t  *font = &topDict;\n-        PRIVDICTVAL  *priv = &privateDicts[0];\n+        cff1_top_dict_values_t *font = &topDict;\n+        PRIVDICTVAL *priv = &privateDicts[0];\n@@ -1120,1 +1136,1 @@\n-        if (priv->localSubrs != &Null(CFF1Subrs) &&\n+        if (priv->localSubrs != &Null (CFF1Subrs) &&\n@@ -1136,2 +1152,2 @@\n-    bool is_valid () const { return blob != nullptr; }\n-    bool is_CID () const { return topDict.is_CID (); }\n+    bool is_valid () const { return blob; }\n+    bool   is_CID () const { return topDict.is_CID (); }\n@@ -1147,1 +1163,1 @@\n-      if (charset != &Null(Charset))\n+      if (charset != &Null (Charset))\n@@ -1154,27 +1170,1 @@\n-    protected:\n-    hb_blob_t          *blob;\n-    hb_sanitize_context_t   sc;\n-\n-    public:\n-    const Charset          *charset;\n-    const CFF1NameIndex     *nameIndex;\n-    const CFF1TopDictIndex  *topDictIndex;\n-    const CFF1StringIndex   *stringIndex;\n-    const CFF1Subrs      *globalSubrs;\n-    const CFF1CharStrings   *charStrings;\n-    const CFF1FDArray       *fdArray;\n-    const CFF1FDSelect      *fdSelect;\n-    unsigned int            fdCount;\n-\n-    cff1_top_dict_values_t       topDict;\n-    hb_vector_t<cff1_font_dict_values_t>   fontDicts;\n-    hb_vector_t<PRIVDICTVAL>      privateDicts;\n-\n-    unsigned int            num_glyphs;\n-  };\n-\n-  struct accelerator_t : accelerator_templ_t<cff1_private_dict_opset_t, cff1_private_dict_values_t>\n-  {\n-    HB_INTERNAL bool get_extents (hb_codepoint_t glyph, hb_glyph_extents_t *extents) const;\n-    HB_INTERNAL bool get_seac_components (hb_codepoint_t glyph, hb_codepoint_t *base, hb_codepoint_t *accent) const;\n-  };\n+    bool is_predef_encoding () const { return topDict.EncodingOffset <= ExpertEncoding; }\n@@ -1182,3 +1172,1 @@\n-  struct accelerator_subset_t : accelerator_templ_t<cff1_private_dict_opset_subset, cff1_private_dict_values_subset_t>\n-  {\n-    void init (hb_face_t *face)\n+    hb_codepoint_t glyph_to_code (hb_codepoint_t glyph) const\n@@ -1186,9 +1174,2 @@\n-      SUPER::init (face);\n-      if (blob == nullptr) return;\n-\n-      const OT::cff1 *cff = this->blob->as<OT::cff1> ();\n-      encoding = &Null(Encoding);\n-      if (is_CID ())\n-      {\n-        if (unlikely (charset == &Null(Charset))) { fini (); return; }\n-      }\n+      if (encoding != &Null (Encoding))\n+        return encoding->get_code (glyph);\n@@ -1197,1 +1178,4 @@\n-        if (!is_predef_encoding ())\n+        hb_codepoint_t sid = glyph_to_sid (glyph);\n+        if (sid == 0) return 0;\n+        hb_codepoint_t code = 0;\n+        switch (topDict.EncodingOffset)\n@@ -1199,2 +1183,8 @@\n-          encoding = &StructAtOffsetOrNull<Encoding> (cff, topDict.EncodingOffset);\n-          if (unlikely ((encoding == &Null (Encoding)) || !encoding->sanitize (&sc))) { fini (); return; }\n+        case StandardEncoding:\n+          code = lookup_standard_encoding_for_code (sid);\n+          break;\n+        case ExpertEncoding:\n+          code = lookup_expert_encoding_for_code (sid);\n+          break;\n+        default:\n+          break;\n@@ -1202,0 +1192,1 @@\n+        return code;\n@@ -1205,3 +1196,1 @@\n-    bool is_predef_encoding () const { return topDict.EncodingOffset <= ExpertEncoding; }\n-\n-    hb_codepoint_t  glyph_to_code (hb_codepoint_t glyph) const\n+    hb_codepoint_t glyph_to_sid (hb_codepoint_t glyph) const\n@@ -1209,2 +1198,2 @@\n-      if (encoding != &Null(Encoding))\n-        return encoding->get_code (glyph);\n+      if (charset != &Null (Charset))\n+        return charset->get_sid (glyph, num_glyphs);\n@@ -1213,4 +1202,2 @@\n-        hb_codepoint_t  sid = glyph_to_sid (glyph);\n-        if (sid == 0) return 0;\n-        hb_codepoint_t  code = 0;\n-        switch (topDict.EncodingOffset)\n+        hb_codepoint_t sid = 0;\n+        switch (topDict.CharsetOffset)\n@@ -1218,2 +1205,5 @@\n-          case  StandardEncoding:\n-            code = lookup_standard_encoding_for_code (sid);\n+          case ISOAdobeCharset:\n+            if (glyph <= 228 \/*zcaron*\/) sid = glyph;\n+            break;\n+          case ExpertCharset:\n+            sid = lookup_expert_charset_for_sid (glyph);\n@@ -1221,2 +1211,2 @@\n-          case  ExpertEncoding:\n-            code = lookup_expert_encoding_for_code (sid);\n+          case ExpertSubsetCharset:\n+              sid = lookup_expert_subset_charset_for_sid (glyph);\n@@ -1227,1 +1217,1 @@\n-        return code;\n+        return sid;\n@@ -1231,1 +1221,1 @@\n-    hb_codepoint_t glyph_to_sid (hb_codepoint_t glyph) const\n+    hb_codepoint_t sid_to_glyph (hb_codepoint_t sid) const\n@@ -1233,2 +1223,2 @@\n-      if (charset != &Null(Charset))\n-        return charset->get_sid (glyph);\n+      if (charset != &Null (Charset))\n+        return charset->get_glyph (sid, num_glyphs);\n@@ -1237,1 +1227,1 @@\n-        hb_codepoint_t sid = 0;\n+        hb_codepoint_t glyph = 0;\n@@ -1240,2 +1230,2 @@\n-          case  ISOAdobeCharset:\n-            if (glyph <= 228 \/*zcaron*\/) sid = glyph;\n+          case ISOAdobeCharset:\n+            if (sid <= 228 \/*zcaron*\/) glyph = sid;\n@@ -1243,2 +1233,2 @@\n-          case  ExpertCharset:\n-            sid = lookup_expert_charset_for_sid (glyph);\n+          case ExpertCharset:\n+            glyph = lookup_expert_charset_for_glyph (sid);\n@@ -1246,2 +1236,2 @@\n-          case  ExpertSubsetCharset:\n-              sid = lookup_expert_subset_charset_for_sid (glyph);\n+          case ExpertSubsetCharset:\n+            glyph = lookup_expert_subset_charset_for_glyph (sid);\n@@ -1252,1 +1242,1 @@\n-        return sid;\n+        return glyph;\n@@ -1256,1 +1246,3 @@\n-    const Encoding        *encoding;\n+    protected:\n+    hb_blob_t              *blob;\n+    hb_sanitize_context_t   sc;\n@@ -1258,2 +1250,18 @@\n-    private:\n-    typedef accelerator_templ_t<cff1_private_dict_opset_subset, cff1_private_dict_values_subset_t> SUPER;\n+    public:\n+    const Encoding          *encoding;\n+    const Charset           *charset;\n+    const CFF1NameIndex     *nameIndex;\n+    const CFF1TopDictIndex  *topDictIndex;\n+    const CFF1StringIndex   *stringIndex;\n+    const CFF1Subrs         *globalSubrs;\n+    const CFF1CharStrings   *charStrings;\n+    const CFF1FDArray       *fdArray;\n+    const CFF1FDSelect      *fdSelect;\n+    unsigned int             fdCount;\n+\n+    cff1_top_dict_values_t   topDict;\n+    hb_vector_t<cff1_font_dict_values_t>\n+                             fontDicts;\n+    hb_vector_t<PRIVDICTVAL> privateDicts;\n+\n+    unsigned int             num_glyphs;\n@@ -1262,1 +1270,1 @@\n-  bool subset (hb_subset_plan_t *plan) const\n+  struct accelerator_t : accelerator_templ_t<cff1_private_dict_opset_t, cff1_private_dict_values_t>\n@@ -1264,10 +1272,24 @@\n-    hb_blob_t *cff_prime = nullptr;\n-\n-    bool success = true;\n-    if (hb_subset_cff1 (plan, &cff_prime)) {\n-      success = success && plan->add_table (HB_OT_TAG_cff1, cff_prime);\n-      hb_blob_t *head_blob = hb_sanitize_context_t().reference_table<head> (plan->source);\n-      success = success && head_blob && plan->add_table (HB_OT_TAG_head, head_blob);\n-      hb_blob_destroy (head_blob);\n-    } else {\n-      success = false;\n+    void init (hb_face_t *face)\n+    {\n+      SUPER::init (face);\n+\n+      if (!is_valid ()) return;\n+      if (is_CID ()) return;\n+\n+      \/* fill glyph_names *\/\n+      for (hb_codepoint_t gid = 0; gid < num_glyphs; gid++)\n+      {\n+        hb_codepoint_t  sid = glyph_to_sid (gid);\n+        gname_t gname;\n+        gname.sid = sid;\n+        if (sid < cff1_std_strings_length)\n+          gname.name = cff1_std_strings (sid);\n+        else\n+        {\n+          byte_str_t    ustr = (*stringIndex)[sid - cff1_std_strings_length];\n+          gname.name = hb_bytes_t ((const char*)ustr.arrayZ, ustr.length);\n+        }\n+        if (unlikely (!gname.name.arrayZ)) { fini (); return; }\n+        glyph_names.push (gname);\n+      }\n+      glyph_names.qsort ();\n@@ -1275,1 +1297,0 @@\n-    hb_blob_destroy (cff_prime);\n@@ -1277,2 +1298,83 @@\n-    return success;\n-  }\n+    void fini ()\n+    {\n+      glyph_names.fini ();\n+\n+      SUPER::fini ();\n+    }\n+\n+    bool get_glyph_name (hb_codepoint_t glyph,\n+                         char *buf, unsigned int buf_len) const\n+    {\n+      if (!buf) return true;\n+      if (unlikely (!is_valid ())) return false;\n+      if (is_CID()) return false;\n+      hb_codepoint_t sid = glyph_to_sid (glyph);\n+      const char *str;\n+      size_t str_len;\n+      if (sid < cff1_std_strings_length)\n+      {\n+        hb_bytes_t byte_str = cff1_std_strings (sid);\n+        str = byte_str.arrayZ;\n+        str_len = byte_str.length;\n+      }\n+      else\n+      {\n+        byte_str_t ubyte_str = (*stringIndex)[sid - cff1_std_strings_length];\n+        str = (const char *)ubyte_str.arrayZ;\n+        str_len = ubyte_str.length;\n+      }\n+      if (!str_len) return false;\n+      unsigned int len = hb_min (buf_len - 1, str_len);\n+      strncpy (buf, (const char*)str, len);\n+      buf[len] = '\\0';\n+      return true;\n+    }\n+\n+    bool get_glyph_from_name (const char *name, int len,\n+                              hb_codepoint_t *glyph) const\n+    {\n+      if (len < 0) len = strlen (name);\n+      if (unlikely (!len)) return false;\n+\n+      gname_t key = { hb_bytes_t (name, len), 0 };\n+      const gname_t *gname = glyph_names.bsearch (key);\n+      if (!gname) return false;\n+      hb_codepoint_t gid = sid_to_glyph (gname->sid);\n+      if (!gid && gname->sid) return false;\n+      *glyph = gid;\n+      return true;\n+    }\n+\n+    HB_INTERNAL bool get_extents (hb_font_t *font, hb_codepoint_t glyph, hb_glyph_extents_t *extents) const;\n+    HB_INTERNAL bool get_seac_components (hb_codepoint_t glyph, hb_codepoint_t *base, hb_codepoint_t *accent) const;\n+#ifdef HB_EXPERIMENTAL_API\n+    HB_INTERNAL bool get_path (hb_font_t *font, hb_codepoint_t glyph, draw_helper_t &draw_helper) const;\n+#endif\n+\n+    private:\n+    struct gname_t\n+    {\n+      hb_bytes_t        name;\n+      uint16_t          sid;\n+\n+      static int cmp (const void *a_, const void *b_)\n+      {\n+        const gname_t *a = (const gname_t *)a_;\n+        const gname_t *b = (const gname_t *)b_;\n+        int minlen = hb_min (a->name.length, b->name.length);\n+        int ret = strncmp (a->name.arrayZ, b->name.arrayZ, minlen);\n+        if (ret) return ret;\n+        return a->name.length - b->name.length;\n+      }\n+\n+      int cmp (const gname_t &a) const { return cmp (&a, this); }\n+    };\n+\n+    hb_sorted_vector_t<gname_t> glyph_names;\n+\n+    typedef accelerator_templ_t<cff1_private_dict_opset_t, cff1_private_dict_values_t> SUPER;\n+  };\n+\n+  struct accelerator_subset_t : accelerator_templ_t<cff1_private_dict_opset_subset, cff1_private_dict_values_subset_t> {};\n+\n+  bool subset (hb_subset_context_t *c) const { return hb_subset_cff1 (c); }\n@@ -1285,0 +1387,2 @@\n+  HB_INTERNAL static hb_codepoint_t lookup_expert_charset_for_glyph (hb_codepoint_t sid);\n+  HB_INTERNAL static hb_codepoint_t lookup_expert_subset_charset_for_glyph (hb_codepoint_t sid);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff1-table.hh","additions":401,"deletions":297,"binary":false,"changes":698,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_FONT_CFF\n+\n@@ -29,0 +33,1 @@\n+#include \"hb-draw.hh\"\n@@ -32,1 +37,1 @@\n-struct extents_param_t\n+struct cff2_extents_param_t\n@@ -37,4 +42,4 @@\n-    min_x.set_int (0x7FFFFFFF);\n-    min_y.set_int (0x7FFFFFFF);\n-    max_x.set_int (-0x80000000);\n-    max_y.set_int (-0x80000000);\n+    min_x.set_int (INT_MAX);\n+    min_y.set_int (INT_MAX);\n+    max_x.set_int (INT_MIN);\n+    max_y.set_int (INT_MIN);\n@@ -43,2 +48,2 @@\n-  void start_path ()         { path_open = true; }\n-  void end_path ()           { path_open = false; }\n+  void   start_path ()       { path_open = true; }\n+  void     end_path ()       { path_open = false; }\n@@ -62,1 +67,1 @@\n-struct cff2_path_procs_extents_t : path_procs_t<cff2_path_procs_extents_t, cff2_cs_interp_env_t, extents_param_t>\n+struct cff2_path_procs_extents_t : path_procs_t<cff2_path_procs_extents_t, cff2_cs_interp_env_t, cff2_extents_param_t>\n@@ -64,1 +69,1 @@\n-  static void moveto (cff2_cs_interp_env_t &env, extents_param_t& param, const point_t &pt)\n+  static void moveto (cff2_cs_interp_env_t &env, cff2_extents_param_t& param, const point_t &pt)\n@@ -70,1 +75,1 @@\n-  static void line (cff2_cs_interp_env_t &env, extents_param_t& param, const point_t &pt1)\n+  static void line (cff2_cs_interp_env_t &env, cff2_extents_param_t& param, const point_t &pt1)\n@@ -81,1 +86,1 @@\n-  static void curve (cff2_cs_interp_env_t &env, extents_param_t& param, const point_t &pt1, const point_t &pt2, const point_t &pt3)\n+  static void curve (cff2_cs_interp_env_t &env, cff2_extents_param_t& param, const point_t &pt1, const point_t &pt2, const point_t &pt3)\n@@ -96,1 +101,1 @@\n-struct cff2_cs_opset_extents_t : cff2_cs_opset_t<cff2_cs_opset_extents_t, extents_param_t, cff2_path_procs_extents_t> {};\n+struct cff2_cs_opset_extents_t : cff2_cs_opset_t<cff2_cs_opset_extents_t, cff2_extents_param_t, cff2_path_procs_extents_t> {};\n@@ -102,0 +107,5 @@\n+#ifdef HB_NO_OT_FONT_CFF\n+  \/* XXX Remove check when this code moves to .hh file. *\/\n+  return true;\n+#endif\n+\n@@ -104,2 +114,0 @@\n-  unsigned int num_coords;\n-  const int *coords = hb_font_get_var_coords_normalized (font, &num_coords);\n@@ -107,1 +115,1 @@\n-  cff2_cs_interpreter_t<cff2_cs_opset_extents_t, extents_param_t> interp;\n+  cff2_cs_interpreter_t<cff2_cs_opset_extents_t, cff2_extents_param_t> interp;\n@@ -109,2 +117,2 @@\n-  interp.env.init (str, *this, fd, coords, num_coords);\n-  extents_param_t  param;\n+  interp.env.init (str, *this, fd, font->coords, font->num_coords);\n+  cff2_extents_param_t  param;\n@@ -121,2 +129,2 @@\n-    extents->x_bearing = (int32_t)param.min_x.floor ();\n-    extents->width = (int32_t)param.max_x.ceil () - extents->x_bearing;\n+    extents->x_bearing = font->em_scalef_x (param.min_x.to_real ());\n+    extents->width = font->em_scalef_x (param.max_x.to_real () - param.min_x.to_real ());\n@@ -131,2 +139,46 @@\n-    extents->y_bearing = (int32_t)param.max_y.ceil ();\n-    extents->height = (int32_t)param.min_y.floor () - extents->y_bearing;\n+    extents->y_bearing = font->em_scalef_y (param.max_y.to_real ());\n+    extents->height = font->em_scalef_y (param.min_y.to_real () - param.max_y.to_real ());\n+  }\n+\n+  return true;\n+}\n+\n+#ifdef HB_EXPERIMENTAL_API\n+struct cff2_path_param_t\n+{\n+  cff2_path_param_t (hb_font_t *font_, draw_helper_t &draw_helper_)\n+  {\n+    draw_helper = &draw_helper_;\n+    font = font_;\n+  }\n+\n+  void move_to (const point_t &p)\n+  { draw_helper->move_to (font->em_scalef_x (p.x.to_real ()), font->em_scalef_y (p.y.to_real ())); }\n+\n+  void line_to (const point_t &p)\n+  { draw_helper->line_to (font->em_scalef_x (p.x.to_real ()), font->em_scalef_y (p.y.to_real ())); }\n+\n+  void cubic_to (const point_t &p1, const point_t &p2, const point_t &p3)\n+  {\n+    draw_helper->cubic_to (font->em_scalef_x (p1.x.to_real ()), font->em_scalef_y (p1.y.to_real ()),\n+                           font->em_scalef_x (p2.x.to_real ()), font->em_scalef_y (p2.y.to_real ()),\n+                           font->em_scalef_x (p3.x.to_real ()), font->em_scalef_y (p3.y.to_real ()));\n+  }\n+\n+  protected:\n+  draw_helper_t *draw_helper;\n+  hb_font_t *font;\n+};\n+\n+struct cff2_path_procs_path_t : path_procs_t<cff2_path_procs_path_t, cff2_cs_interp_env_t, cff2_path_param_t>\n+{\n+  static void moveto (cff2_cs_interp_env_t &env, cff2_path_param_t& param, const point_t &pt)\n+  {\n+    param.move_to (pt);\n+    env.moveto (pt);\n+  }\n+\n+  static void line (cff2_cs_interp_env_t &env, cff2_path_param_t& param, const point_t &pt1)\n+  {\n+    param.line_to (pt1);\n+    env.moveto (pt1);\n@@ -135,0 +187,24 @@\n+  static void curve (cff2_cs_interp_env_t &env, cff2_path_param_t& param, const point_t &pt1, const point_t &pt2, const point_t &pt3)\n+  {\n+    param.cubic_to (pt1, pt2, pt3);\n+    env.moveto (pt3);\n+  }\n+};\n+\n+struct cff2_cs_opset_path_t : cff2_cs_opset_t<cff2_cs_opset_path_t, cff2_path_param_t, cff2_path_procs_path_t> {};\n+\n+bool OT::cff2::accelerator_t::get_path (hb_font_t *font, hb_codepoint_t glyph, draw_helper_t &draw_helper) const\n+{\n+#ifdef HB_NO_OT_FONT_CFF\n+  \/* XXX Remove check when this code moves to .hh file. *\/\n+  return true;\n+#endif\n+\n+  if (unlikely (!is_valid () || (glyph >= num_glyphs))) return false;\n+\n+  unsigned int fd = fdSelect->get_fd (glyph);\n+  cff2_cs_interpreter_t<cff2_cs_opset_path_t, cff2_path_param_t> interp;\n+  const byte_str_t str = (*charStrings)[glyph];\n+  interp.env.init (str, *this, fd, font->coords, font->num_coords);\n+  cff2_path_param_t param (font, draw_helper);\n+  if (unlikely (!interp.interpret (param))) return false;\n@@ -137,0 +213,3 @@\n+#endif\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff2-table.cc","additions":100,"deletions":21,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"hb-ot-head-table.hh\"\n@@ -33,0 +32,1 @@\n+#include \"hb-draw.hh\"\n@@ -46,1 +46,0 @@\n-typedef FDArray<HBUINT32> CFF2FDArray;\n@@ -54,12 +53,0 @@\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int fdcount) const\n-  {\n-    TRACE_SANITIZE (this);\n-\n-    return_trace (likely (c->check_struct (this) && (format == 0 || format == 3 || format == 4) &&\n-                          (format == 0)?\n-                          u.format0.sanitize (c, fdcount):\n-                            ((format == 3)?\n-                            u.format3.sanitize (c, fdcount):\n-                            u.format4.sanitize (c, fdcount))));\n-  }\n-\n@@ -71,1 +58,1 @@\n-    if (unlikely (dest == nullptr)) return_trace (false);\n+    if (unlikely (!dest)) return_trace (false);\n@@ -76,3 +63,0 @@\n-  unsigned int calculate_serialized_size (unsigned int num_glyphs) const\n-  { return get_size (num_glyphs); }\n-\n@@ -81,8 +65,7 @@\n-    unsigned int size = format.static_size;\n-    if (format == 0)\n-      size += u.format0.get_size (num_glyphs);\n-    else if (format == 3)\n-      size += u.format3.get_size ();\n-    else\n-      size += u.format4.get_size ();\n-    return size;\n+    switch (format)\n+    {\n+    case 0: return format.static_size + u.format0.get_size (num_glyphs);\n+    case 3: return format.static_size + u.format3.get_size ();\n+    case 4: return format.static_size + u.format4.get_size ();\n+    default:return 0;\n+    }\n@@ -93,1 +76,1 @@\n-    if (this == &Null(CFF2FDSelect))\n+    if (this == &Null (CFF2FDSelect))\n@@ -95,6 +78,23 @@\n-    if (format == 0)\n-      return u.format0.get_fd (glyph);\n-    else if (format == 3)\n-      return u.format3.get_fd (glyph);\n-    else\n-      return u.format4.get_fd (glyph);\n+\n+    switch (format)\n+    {\n+    case 0: return u.format0.get_fd (glyph);\n+    case 3: return u.format3.get_fd (glyph);\n+    case 4: return u.format4.get_fd (glyph);\n+    default:return 0;\n+    }\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c, unsigned int fdcount) const\n+  {\n+    TRACE_SANITIZE (this);\n+    if (unlikely (!c->check_struct (this)))\n+      return_trace (false);\n+\n+    switch (format)\n+    {\n+    case 0: return_trace (u.format0.sanitize (c, fdcount));\n+    case 3: return_trace (u.format3.sanitize (c, fdcount));\n+    case 4: return_trace (u.format4.sanitize (c, fdcount));\n+    default:return_trace (false);\n+    }\n@@ -105,3 +105,3 @@\n-    FDSelect0   format0;\n-    FDSelect3   format3;\n-    FDSelect4   format4;\n+  FDSelect0     format0;\n+  FDSelect3     format3;\n+  FDSelect4     format4;\n@@ -109,1 +109,1 @@\n-\n+  public:\n@@ -126,1 +126,1 @@\n-    if (unlikely (dest == nullptr)) return_trace (false);\n+    if (unlikely (!dest)) return_trace (false);\n@@ -149,20 +149,0 @@\n-  unsigned int calculate_serialized_size () const\n-  {\n-    unsigned int size = 0;\n-    for (unsigned int i = 0; i < get_count (); i++)\n-    {\n-      op_code_t op = get_value (i).op;\n-      switch (op)\n-      {\n-        case OpCode_vstore:\n-        case OpCode_FDSelect:\n-          size += OpCode_Size (OpCode_longintdict) + 4 + OpCode_Size (op);\n-          break;\n-        default:\n-          size += top_dict_values_t<>::calculate_serialized_op_size (get_value (i));\n-          break;\n-      }\n-    }\n-    return size;\n-  }\n-\n@@ -255,1 +235,1 @@\n-    localSubrs = &Null(CFF2Subrs);\n+    localSubrs = &Null (CFF2Subrs);\n@@ -260,11 +240,0 @@\n-  unsigned int calculate_serialized_size () const\n-  {\n-    unsigned int size = 0;\n-    for (unsigned int i = 0; i < dict_values_t<VAL>::get_count; i++)\n-      if (dict_values_t<VAL>::get_value (i).op == OpCode_Subrs)\n-        size += OpCode_Size (OpCode_shortint) + 2 + OpCode_Size (OpCode_Subrs);\n-      else\n-        size += dict_values_t<VAL>::get_value (i).str.length;\n-    return size;\n-  }\n-\n@@ -403,0 +372,8 @@\n+struct CFF2FDArray : FDArray<HBUINT32>\n+{\n+  \/* FDArray::serialize does not compile without this partial specialization *\/\n+  template <typename ITER, typename OP_SERIALIZER>\n+  bool serialize (hb_serialize_context_t *c, ITER it, OP_SERIALIZER& opszr)\n+  { return FDArray<HBUINT32>::serialize<cff2_font_dict_values_t, table_info_t> (c, it, opszr); }\n+};\n+\n@@ -437,1 +414,1 @@\n-      if (cff2 == &Null(OT::cff2))\n+      if (cff2 == &Null (OT::cff2))\n@@ -455,5 +432,5 @@\n-      if (((varStore != &Null(CFF2VariationStore)) && unlikely (!varStore->sanitize (&sc))) ||\n-          (charStrings == &Null(CFF2CharStrings)) || unlikely (!charStrings->sanitize (&sc)) ||\n-          (globalSubrs == &Null(CFF2Subrs)) || unlikely (!globalSubrs->sanitize (&sc)) ||\n-          (fdArray == &Null(CFF2FDArray)) || unlikely (!fdArray->sanitize (&sc)) ||\n-          (((fdSelect != &Null(CFF2FDSelect)) && unlikely (!fdSelect->sanitize (&sc, fdArray->count)))))\n+      if (((varStore != &Null (CFF2VariationStore)) && unlikely (!varStore->sanitize (&sc))) ||\n+          (charStrings == &Null (CFF2CharStrings)) || unlikely (!charStrings->sanitize (&sc)) ||\n+          (globalSubrs == &Null (CFF2Subrs)) || unlikely (!globalSubrs->sanitize (&sc)) ||\n+          (fdArray == &Null (CFF2FDArray)) || unlikely (!fdArray->sanitize (&sc)) ||\n+          (((fdSelect != &Null (CFF2FDSelect)) && unlikely (!fdSelect->sanitize (&sc, fdArray->count)))))\n@@ -467,1 +444,2 @@\n-      privateDicts.resize (fdCount);\n+      if (!privateDicts.resize (fdCount))\n+      { fini (); return; }\n@@ -478,1 +456,1 @@\n-        if (unlikely (font == &Crap(cff2_font_dict_values_t))) { fini (); return; }\n+        if (unlikely (font == &Crap (cff2_font_dict_values_t))) { fini (); return; }\n@@ -490,1 +468,1 @@\n-        if (privateDicts[i].localSubrs != &Null(CFF2Subrs) &&\n+        if (privateDicts[i].localSubrs != &Null (CFF2Subrs) &&\n@@ -506,1 +484,1 @@\n-    bool is_valid () const { return blob != nullptr; }\n+    bool is_valid () const { return blob; }\n@@ -532,0 +510,3 @@\n+#ifdef HB_EXPERIMENTAL_API\n+    HB_INTERNAL bool get_path (hb_font_t *font, hb_codepoint_t glyph, draw_helper_t &draw_helper) const;\n+#endif\n@@ -536,17 +517,1 @@\n-  bool subset (hb_subset_plan_t *plan) const\n-  {\n-    hb_blob_t *cff2_prime = nullptr;\n-\n-    bool success = true;\n-    if (hb_subset_cff2 (plan, &cff2_prime)) {\n-      success = success && plan->add_table (HB_OT_TAG_cff2, cff2_prime);\n-      hb_blob_t *head_blob = hb_sanitize_context_t().reference_table<head> (plan->source);\n-      success = success && head_blob && plan->add_table (HB_OT_TAG_head, head_blob);\n-      hb_blob_destroy (head_blob);\n-    } else {\n-      success = false;\n-    }\n-    hb_blob_destroy (cff2_prime);\n-\n-    return success;\n-  }\n+  bool subset (hb_subset_context_t *c) const { return hb_subset_cff2 (c); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cff2-table.hh","additions":62,"deletions":97,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -59,0 +59,12 @@\n+  void collect_mapping (hb_set_t *unicodes, \/* OUT *\/\n+                        hb_map_t *mapping \/* OUT *\/) const\n+  {\n+    for (unsigned i = 0; i < 256; i++)\n+      if (glyphIdArray[i])\n+      {\n+        hb_codepoint_t glyph = glyphIdArray[i];\n+        unicodes->add (i);\n+        mapping->set (i, glyph);\n+      }\n+  }\n+\n@@ -77,6 +89,0 @@\n-  struct segment_plan\n-  {\n-    HBUINT16 start_code;\n-    HBUINT16 end_code;\n-    bool use_delta;\n-  };\n@@ -84,3 +90,4 @@\n-  bool serialize (hb_serialize_context_t *c,\n-                  const hb_subset_plan_t *plan,\n-                  const hb_vector_t<segment_plan> &segments)\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  HBUINT16* serialize_endcode_array (hb_serialize_context_t *c,\n+                                     Iterator it)\n@@ -88,3 +95,2 @@\n-    TRACE_SERIALIZE (this);\n-\n-    if (unlikely (!c->extend_min (*this))) return_trace (false);\n+    HBUINT16 *endCode = c->start_embed<HBUINT16> ();\n+    hb_codepoint_t prev_endcp = 0xFFFF;\n@@ -92,18 +98,10 @@\n-    this->format.set (4);\n-    this->length.set (get_sub_table_size (segments));\n-\n-    this->segCountX2.set (segments.length * 2);\n-    this->entrySelector.set (MAX (1u, hb_bit_storage (segments.length)) - 1);\n-    this->searchRange.set (2 * (1u << this->entrySelector));\n-    this->rangeShift.set (segments.length * 2 > this->searchRange\n-                          ? 2 * segments.length - this->searchRange\n-                          : 0);\n-\n-    HBUINT16 *end_count = c->allocate_size<HBUINT16> (HBUINT16::static_size * segments.length);\n-    c->allocate_size<HBUINT16> (HBUINT16::static_size); \/\/ 2 bytes of padding.\n-    HBUINT16 *start_count = c->allocate_size<HBUINT16> (HBUINT16::static_size * segments.length);\n-    HBINT16 *id_delta = c->allocate_size<HBINT16> (HBUINT16::static_size * segments.length);\n-    HBUINT16 *id_range_offset = c->allocate_size<HBUINT16> (HBUINT16::static_size * segments.length);\n-\n-    if (id_range_offset == nullptr)\n-      return_trace (false);\n+    for (const hb_item_type<Iterator> _ : +it)\n+    {\n+      if (prev_endcp != 0xFFFF && prev_endcp + 1u != _.first)\n+      {\n+        HBUINT16 end_code;\n+        end_code = prev_endcp;\n+        c->copy<HBUINT16> (end_code);\n+      }\n+      prev_endcp = _.first;\n+    }\n@@ -111,1 +109,0 @@\n-    for (unsigned int i = 0; i < segments.length; i++)\n@@ -113,3 +110,6 @@\n-      end_count[i].set (segments[i].end_code);\n-      start_count[i].set (segments[i].start_code);\n-      if (segments[i].use_delta)\n+      \/\/ last endCode\n+      HBUINT16 endcode;\n+      endcode = prev_endcp;\n+      if (unlikely (!c->copy<HBUINT16> (endcode))) return nullptr;\n+      \/\/ There must be a final entry with end_code == 0xFFFF.\n+      if (prev_endcp != 0xFFFF)\n@@ -117,34 +117,3 @@\n-        hb_codepoint_t cp = segments[i].start_code;\n-        hb_codepoint_t start_gid = 0;\n-        if (unlikely (!plan->new_gid_for_codepoint (cp, &start_gid) && cp != 0xFFFF))\n-          return_trace (false);\n-        id_delta[i].set (start_gid - segments[i].start_code);\n-      } else {\n-        id_delta[i].set (0);\n-        unsigned int num_codepoints = segments[i].end_code - segments[i].start_code + 1;\n-        HBUINT16 *glyph_id_array = c->allocate_size<HBUINT16> (HBUINT16::static_size * num_codepoints);\n-        if (glyph_id_array == nullptr)\n-          return_trace (false);\n-        \/\/ From the cmap spec:\n-        \/\/\n-        \/\/ id_range_offset[i]\/2\n-        \/\/ + (cp - segments[i].start_code)\n-        \/\/ + (id_range_offset + i)\n-        \/\/ =\n-        \/\/ glyph_id_array + (cp - segments[i].start_code)\n-        \/\/\n-        \/\/ So, solve for id_range_offset[i]:\n-        \/\/\n-        \/\/ id_range_offset[i]\n-        \/\/ =\n-        \/\/ 2 * (glyph_id_array - id_range_offset - i)\n-        id_range_offset[i].set (2 * (\n-            glyph_id_array - id_range_offset - i));\n-        for (unsigned int j = 0; j < num_codepoints; j++)\n-        {\n-          hb_codepoint_t cp = segments[i].start_code + j;\n-          hb_codepoint_t new_gid;\n-          if (unlikely (!plan->new_gid_for_codepoint (cp, &new_gid)))\n-            return_trace (false);\n-          glyph_id_array[j].set (new_gid);\n-        }\n+        HBUINT16 finalcode;\n+        finalcode = 0xFFFF;\n+        if (unlikely (!c->copy<HBUINT16> (finalcode))) return nullptr;\n@@ -154,1 +123,1 @@\n-    return_trace (true);\n+    return endCode;\n@@ -157,1 +126,4 @@\n-  static size_t get_sub_table_size (const hb_vector_t<segment_plan> &segments)\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  HBUINT16* serialize_startcode_array (hb_serialize_context_t *c,\n+                                       Iterator it)\n@@ -159,2 +131,4 @@\n-    size_t segment_size = 0;\n-    for (unsigned int i = 0; i < segments.length; i++)\n+    HBUINT16 *startCode = c->start_embed<HBUINT16> ();\n+    hb_codepoint_t prev_cp = 0xFFFF;\n+\n+    for (const hb_item_type<Iterator> _ : +it)\n@@ -162,10 +136,8 @@\n-      \/\/ Parallel array entries\n-      segment_size +=\n-            2  \/\/ end count\n-          + 2  \/\/ start count\n-          + 2  \/\/ delta\n-          + 2; \/\/ range offset\n-\n-      if (!segments[i].use_delta)\n-        \/\/ Add bytes for the glyph index array entries for this segment.\n-        segment_size += (segments[i].end_code - segments[i].start_code + 1) * 2;\n+      if (prev_cp == 0xFFFF || prev_cp + 1u != _.first)\n+      {\n+        HBUINT16 start_code;\n+        start_code = _.first;\n+        c->copy<HBUINT16> (start_code);\n+      }\n+\n+      prev_cp = _.first;\n@@ -174,3 +146,9 @@\n-    return min_size\n-        + 2 \/\/ Padding\n-        + segment_size;\n+    \/\/ There must be a final entry with end_code == 0xFFFF.\n+    if (it.len () == 0 || prev_cp != 0xFFFF)\n+    {\n+      HBUINT16 finalcode;\n+      finalcode = 0xFFFF;\n+      if (unlikely (!c->copy<HBUINT16> (finalcode))) return nullptr;\n+    }\n+\n+    return startCode;\n@@ -179,2 +157,7 @@\n-  static bool create_sub_table_plan (const hb_subset_plan_t *plan,\n-                                     hb_vector_t<segment_plan> *segments)\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  HBINT16* serialize_idDelta_array (hb_serialize_context_t *c,\n+                                    Iterator it,\n+                                    HBUINT16 *endCode,\n+                                    HBUINT16 *startCode,\n+                                    unsigned segcount)\n@@ -182,2 +165,3 @@\n-    segment_plan *segment = nullptr;\n-    hb_codepoint_t last_gid = 0;\n+    unsigned i = 0;\n+    hb_codepoint_t last_gid = 0, start_gid = 0, last_cp = 0xFFFF;\n+    bool use_delta = true;\n@@ -185,4 +169,7 @@\n-    hb_codepoint_t cp = HB_SET_VALUE_INVALID;\n-    while (plan->unicodes->next (&cp)) {\n-      hb_codepoint_t new_gid;\n-      if (unlikely (!plan->new_gid_for_codepoint (cp, &new_gid)))\n+    HBINT16 *idDelta = c->start_embed<HBINT16> ();\n+    if ((char *)idDelta - (char *)startCode != (int) segcount * (int) HBINT16::static_size)\n+      return nullptr;\n+\n+    for (const hb_item_type<Iterator> _ : +it)\n+    {\n+      if (_.first == startCode[i])\n@@ -190,2 +177,2 @@\n-        DEBUG_MSG(SUBSET, nullptr, \"Unable to find new gid for %04x\", cp);\n-        return false;\n+        use_delta = true;\n+        start_gid = _.second;\n@@ -193,0 +180,1 @@\n+      else if (_.second != last_gid + 1) use_delta = false;\n@@ -194,5 +182,1 @@\n-      \/* Stop adding to cmap if we are now outside of unicode BMP. *\/\n-      if (cp > 0xFFFF) break;\n-\n-      if (!segment ||\n-          cp != segment->end_code + 1u)\n+      if (_.first == endCode[i])\n@@ -200,10 +184,6 @@\n-        segment = segments->push ();\n-        segment->start_code.set (cp);\n-        segment->end_code.set (cp);\n-        segment->use_delta = true;\n-      } else {\n-        segment->end_code.set (cp);\n-        if (last_gid + 1u != new_gid)\n-          \/\/ gid's are not consecutive in this segment so delta\n-          \/\/ cannot be used.\n-          segment->use_delta = false;\n+        HBINT16 delta;\n+        if (use_delta) delta = (int)start_gid - (int)startCode[i];\n+        else delta = 0;\n+        c->copy<HBINT16> (delta);\n+\n+        i++;\n@@ -212,1 +192,2 @@\n-      last_gid = new_gid;\n+      last_gid = _.second;\n+      last_cp = _.first;\n@@ -215,2 +196,1 @@\n-    \/\/ There must be a final entry with end_code == 0xFFFF. Check if we need to add one.\n-    if (segment == nullptr || segment->end_code != 0xFFFF)\n+    if (it.len () == 0 || last_cp != 0xFFFF)\n@@ -218,4 +198,3 @@\n-      segment = segments->push ();\n-      segment->start_code.set (0xFFFF);\n-      segment->end_code.set (0xFFFF);\n-      segment->use_delta = true;\n+      HBINT16 delta;\n+      delta = 1;\n+      if (unlikely (!c->copy<HBINT16> (delta))) return nullptr;\n@@ -224,1 +203,83 @@\n-    return true;\n+    return idDelta;\n+  }\n+\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  HBUINT16* serialize_rangeoffset_glyid (hb_serialize_context_t *c,\n+                                         Iterator it,\n+                                         HBUINT16 *endCode,\n+                                         HBUINT16 *startCode,\n+                                         HBINT16 *idDelta,\n+                                         unsigned segcount)\n+  {\n+    HBUINT16 *idRangeOffset = c->allocate_size<HBUINT16> (HBUINT16::static_size * segcount);\n+    if (unlikely (!c->check_success (idRangeOffset))) return nullptr;\n+    if (unlikely ((char *)idRangeOffset - (char *)idDelta != (int) segcount * (int) HBINT16::static_size)) return nullptr;\n+\n+    + hb_range (segcount)\n+    | hb_filter ([&] (const unsigned _) { return idDelta[_] == 0; })\n+    | hb_apply ([&] (const unsigned i)\n+                {\n+                  idRangeOffset[i] = 2 * (c->start_embed<HBUINT16> () - idRangeOffset - i);\n+\n+                  + it\n+                  | hb_filter ([&] (const hb_item_type<Iterator> _) { return _.first >= startCode[i] && _.first <= endCode[i]; })\n+                  | hb_apply ([&] (const hb_item_type<Iterator> _)\n+                              {\n+                                HBUINT16 glyID;\n+                                glyID = _.second;\n+                                c->copy<HBUINT16> (glyID);\n+                              })\n+                  ;\n+\n+\n+                })\n+    ;\n+\n+    return idRangeOffset;\n+  }\n+\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  Iterator it)\n+  {\n+    auto format4_iter =\n+    + it\n+    | hb_filter ([&] (const hb_pair_t<hb_codepoint_t, hb_codepoint_t> _)\n+                 { return _.first <= 0xFFFF; })\n+    ;\n+\n+    if (format4_iter.len () == 0) return;\n+\n+    unsigned table_initpos = c->length ();\n+    if (unlikely (!c->extend_min (*this))) return;\n+    this->format = 4;\n+\n+    \/\/serialize endCode[]\n+    HBUINT16 *endCode = serialize_endcode_array (c, format4_iter);\n+    if (unlikely (!endCode)) return;\n+\n+    unsigned segcount = (c->length () - min_size) \/ HBUINT16::static_size;\n+\n+    \/\/ 2 bytes of padding.\n+    if (unlikely (!c->allocate_size<HBUINT16> (HBUINT16::static_size))) return; \/\/ 2 bytes of padding.\n+\n+   \/\/ serialize startCode[]\n+    HBUINT16 *startCode = serialize_startcode_array (c, format4_iter);\n+    if (unlikely (!startCode)) return;\n+\n+    \/\/serialize idDelta[]\n+    HBINT16 *idDelta = serialize_idDelta_array (c, format4_iter, endCode, startCode, segcount);\n+    if (unlikely (!idDelta)) return;\n+\n+    HBUINT16 *idRangeOffset = serialize_rangeoffset_glyid (c, format4_iter, endCode, startCode, idDelta, segcount);\n+    if (unlikely (!c->check_success (idRangeOffset))) return;\n+\n+    if (unlikely (!c->check_assign(this->length, c->length () - table_initpos))) return;\n+    this->segCountX2 = segcount * 2;\n+    this->entrySelector = hb_max (1u, hb_bit_storage (segcount)) - 1;\n+    this->searchRange = 2 * (1u << this->entrySelector);\n+    this->rangeShift = segcount * 2 > this->searchRange\n+                       ? 2 * segcount - this->searchRange\n+                       : 0;\n@@ -247,6 +308,1 @@\n-      \/* Custom two-array bsearch. *\/\n-      int min = 0, max = (int) this->segCount - 1;\n-      const HBUINT16 *startCount = this->startCount;\n-      const HBUINT16 *endCount = this->endCount;\n-      unsigned int i;\n-      while (min <= max)\n+      struct CustomRange\n@@ -254,6 +310,2 @@\n-        int mid = ((unsigned int) min + (unsigned int) max) \/ 2;\n-        if (codepoint < startCount[mid])\n-          max = mid - 1;\n-        else if (codepoint > endCount[mid])\n-          min = mid + 1;\n-        else\n+        int cmp (hb_codepoint_t k,\n+                 unsigned distance) const\n@@ -261,2 +313,3 @@\n-          i = mid;\n-          goto found;\n+          if (k > last) return +1;\n+          if (k < (&last)[distance]) return -1;\n+          return 0;\n@@ -264,2 +317,12 @@\n-      }\n-      return false;\n+        HBUINT16 last;\n+      };\n+\n+      const HBUINT16 *found = hb_bsearch (codepoint,\n+                                          this->endCount,\n+                                          this->segCount,\n+                                          2,\n+                                          _hb_cmp_method<hb_codepoint_t, CustomRange, unsigned>,\n+                                          this->segCount + 1);\n+      if (!found)\n+        return false;\n+      unsigned int i = found - endCount;\n@@ -267,1 +330,0 @@\n-    found:\n@@ -289,4 +351,4 @@\n-    static bool get_glyph_func (const void *obj, hb_codepoint_t codepoint, hb_codepoint_t *glyph)\n-    {\n-      return ((const accelerator_t *) obj)->get_glyph (codepoint, glyph);\n-    }\n+\n+    HB_INTERNAL static bool get_glyph_func (const void *obj, hb_codepoint_t codepoint, hb_codepoint_t *glyph)\n+    { return ((const accelerator_t *) obj)->get_glyph (codepoint, glyph); }\n+\n@@ -300,0 +362,2 @@\n+        hb_codepoint_t start = this->startCount[i];\n+        hb_codepoint_t end = this->endCount[i];\n@@ -302,1 +366,9 @@\n-          out->add_range (this->startCount[i], this->endCount[i]);\n+        {\n+          for (hb_codepoint_t codepoint = start; codepoint <= end; codepoint++)\n+          {\n+            hb_codepoint_t gid = (codepoint + this->idDelta[i]) & 0xFFFFu;\n+            if (unlikely (!gid))\n+              continue;\n+            out->add (codepoint);\n+          }\n+        }\n@@ -305,3 +377,1 @@\n-          for (hb_codepoint_t codepoint = this->startCount[i];\n-               codepoint <= this->endCount[i];\n-               codepoint++)\n+          for (hb_codepoint_t codepoint = start; codepoint <= end; codepoint++)\n@@ -321,0 +391,39 @@\n+    void collect_mapping (hb_set_t *unicodes, \/* OUT *\/\n+                          hb_map_t *mapping \/* OUT *\/) const\n+    {\n+      unsigned count = this->segCount;\n+      if (count && this->startCount[count - 1] == 0xFFFFu)\n+        count--; \/* Skip sentinel segment. *\/\n+      for (unsigned i = 0; i < count; i++)\n+      {\n+        hb_codepoint_t start = this->startCount[i];\n+        hb_codepoint_t end = this->endCount[i];\n+        unsigned rangeOffset = this->idRangeOffset[i];\n+        if (rangeOffset == 0)\n+        {\n+          for (hb_codepoint_t codepoint = start; codepoint <= end; codepoint++)\n+          {\n+            hb_codepoint_t gid = (codepoint + this->idDelta[i]) & 0xFFFFu;\n+            if (unlikely (!gid))\n+              continue;\n+            unicodes->add (codepoint);\n+            mapping->set (codepoint, gid);\n+          }\n+        }\n+        else\n+        {\n+          for (hb_codepoint_t codepoint = start; codepoint <= end; codepoint++)\n+          {\n+            unsigned index = rangeOffset \/ 2 + (codepoint - this->startCount[i]) + i - this->segCount;\n+            if (unlikely (index >= this->glyphIdArrayLength))\n+              break;\n+            hb_codepoint_t gid = this->glyphIdArray[index];\n+            if (unlikely (!gid))\n+              continue;\n+            unicodes->add (codepoint);\n+            mapping->set (codepoint, gid);\n+          }\n+        }\n+      }\n+    }\n+\n@@ -341,0 +450,7 @@\n+  void collect_mapping (hb_set_t *unicodes, \/* OUT *\/\n+                        hb_map_t *mapping \/* OUT *\/) const\n+  {\n+    accelerator_t accel (this);\n+    accel.collect_mapping (unicodes, mapping);\n+  }\n+\n@@ -352,3 +468,3 @@\n-      uint16_t new_length = (uint16_t) MIN ((uintptr_t) 65535,\n-                                            (uintptr_t) (c->end -\n-                                                         (char *) this));\n+      uint16_t new_length = (uint16_t) hb_min ((uintptr_t) 65535,\n+                                               (uintptr_t) (c->end -\n+                                                            (char *) this));\n@@ -443,0 +559,15 @@\n+  void collect_mapping (hb_set_t *unicodes, \/* OUT *\/\n+                        hb_map_t *mapping \/* OUT *\/) const\n+  {\n+    hb_codepoint_t start_cp = startCharCode;\n+    unsigned count = glyphIdArray.len;\n+    for (unsigned i = 0; i < count; i++)\n+      if (glyphIdArray[i])\n+      {\n+        hb_codepoint_t unicode = start_cp + i;\n+        hb_codepoint_t glyphid = glyphIdArray[i];\n+        unicodes->add (unicode);\n+        mapping->set (unicode, glyphid);\n+      }\n+  }\n+\n@@ -454,1 +585,1 @@\n-  ArrayOf<GlyphID, UINT>\n+  ArrayOf<HBGlyphID, UINT>\n@@ -478,1 +609,26 @@\n-  void collect_unicodes (hb_set_t *out) const\n+  void collect_unicodes (hb_set_t *out, unsigned int num_glyphs) const\n+  {\n+    for (unsigned int i = 0; i < this->groups.len; i++)\n+    {\n+      hb_codepoint_t start = this->groups[i].startCharCode;\n+      hb_codepoint_t end = hb_min ((hb_codepoint_t) this->groups[i].endCharCode,\n+                                   (hb_codepoint_t) HB_UNICODE_MAX);\n+      hb_codepoint_t gid = this->groups[i].glyphID;\n+      if (!gid)\n+      {\n+        \/* Intention is: if (hb_is_same (T, CmapSubtableFormat13)) continue; *\/\n+        if (! T::group_get_glyph (this->groups[i], end)) continue;\n+        start++;\n+        gid++;\n+      }\n+      if (unlikely ((unsigned int) gid >= num_glyphs)) continue;\n+      if (unlikely ((unsigned int) (gid + end - start) >= num_glyphs))\n+        end = start + (hb_codepoint_t) num_glyphs - gid;\n+\n+      out->add_range (start, end);\n+    }\n+  }\n+\n+  void collect_mapping (hb_set_t *unicodes, \/* OUT *\/\n+                        hb_map_t *mapping, \/* OUT *\/\n+                        unsigned num_glyphs) const\n@@ -480,4 +636,23 @@\n-    for (unsigned int i = 0; i < this->groups.len; i++) {\n-      out->add_range (this->groups[i].startCharCode,\n-                      MIN ((hb_codepoint_t) this->groups[i].endCharCode,\n-                           (hb_codepoint_t) HB_UNICODE_MAX));\n+    for (unsigned i = 0; i < this->groups.len; i++)\n+    {\n+      hb_codepoint_t start = this->groups[i].startCharCode;\n+      hb_codepoint_t end = hb_min ((hb_codepoint_t) this->groups[i].endCharCode,\n+                                   (hb_codepoint_t) HB_UNICODE_MAX);\n+      hb_codepoint_t gid = this->groups[i].glyphID;\n+      if (!gid)\n+      {\n+        \/* Intention is: if (hb_is_same (T, CmapSubtableFormat13)) continue; *\/\n+        if (! T::group_get_glyph (this->groups[i], end)) continue;\n+        start++;\n+        gid++;\n+      }\n+      if (unlikely ((unsigned int) gid >= num_glyphs)) continue;\n+      if (unlikely ((unsigned int) (gid + end - start) >= num_glyphs))\n+        end = start + (hb_codepoint_t) num_glyphs - gid;\n+\n+      for (unsigned cp = start; cp <= end; cp++)\n+      {\n+        unicodes->add (cp);\n+        mapping->set (cp, gid);\n+        gid++;\n+      }\n@@ -493,9 +668,0 @@\n-  bool serialize (hb_serialize_context_t *c,\n-                  const hb_vector_t<CmapSubtableLongGroup> &group_data)\n-  {\n-    TRACE_SERIALIZE (this);\n-    if (unlikely (!c->extend_min (*this))) return_trace (false);\n-    if (unlikely (!groups.serialize (c, group_data.as_array ()))) return_trace (false);\n-    return true;\n-  }\n-\n@@ -521,2 +687,4 @@\n-  bool serialize (hb_serialize_context_t *c,\n-                  const hb_vector_t<CmapSubtableLongGroup> &groups)\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  Iterator it)\n@@ -524,5 +692,3 @@\n-    if (unlikely (!c->extend_min (*this))) return false;\n-\n-    this->format.set (12);\n-    this->reserved.set (0);\n-    this->length.set (get_sub_table_size (groups));\n+    if (it.len () == 0) return;\n+    unsigned table_initpos = c->length ();\n+    if (unlikely (!c->extend_min (*this))) return;\n@@ -530,2 +696,2 @@\n-    return CmapSubtableLongSegmented<CmapSubtableFormat12>::serialize (c, groups);\n-  }\n+    hb_codepoint_t startCharCode = 0xFFFF, endCharCode = 0xFFFF;\n+    hb_codepoint_t glyphID = 0;\n@@ -533,14 +699,3 @@\n-  static size_t get_sub_table_size (const hb_vector_t<CmapSubtableLongGroup> &groups)\n-  {\n-    return 16 + 12 * groups.length;\n-  }\n-\n-  static bool create_sub_table_plan (const hb_subset_plan_t *plan,\n-                                     hb_vector_t<CmapSubtableLongGroup> *groups)\n-  {\n-    CmapSubtableLongGroup *group = nullptr;\n-\n-    hb_codepoint_t cp = HB_SET_VALUE_INVALID;\n-    while (plan->unicodes->next (&cp)) {\n-      hb_codepoint_t new_gid;\n-      if (unlikely (!plan->new_gid_for_codepoint (cp, &new_gid)))\n+    for (const hb_item_type<Iterator> _ : +it)\n+    {\n+      if (startCharCode == 0xFFFF)\n@@ -548,2 +703,3 @@\n-        DEBUG_MSG(SUBSET, nullptr, \"Unable to find new gid for %04x\", cp);\n-        return false;\n+        startCharCode = _.first;\n+        endCharCode = _.first;\n+        glyphID = _.second;\n@@ -551,2 +707,1 @@\n-\n-      if (!group || !_is_gid_consecutive (group, cp, new_gid))\n+      else if (!_is_gid_consecutive (endCharCode, startCharCode, glyphID, _.first, _.second))\n@@ -554,4 +709,9 @@\n-        group = groups->push ();\n-        group->startCharCode.set (cp);\n-        group->endCharCode.set (cp);\n-        group->glyphID.set (new_gid);\n+        CmapSubtableLongGroup  grouprecord;\n+        grouprecord.startCharCode = startCharCode;\n+        grouprecord.endCharCode = endCharCode;\n+        grouprecord.glyphID = glyphID;\n+        c->copy<CmapSubtableLongGroup> (grouprecord);\n+\n+        startCharCode = _.first;\n+        endCharCode = _.first;\n+        glyphID = _.second;\n@@ -559,1 +719,2 @@\n-      else group->endCharCode.set (cp);\n+      else\n+        endCharCode = _.first;\n@@ -562,5 +723,5 @@\n-    DEBUG_MSG(SUBSET, nullptr, \"cmap\");\n-    for (unsigned int i = 0; i < groups->length; i++) {\n-      CmapSubtableLongGroup& group = (*groups)[i];\n-      DEBUG_MSG(SUBSET, nullptr, \"  %d: U+%04X-U+%04X, gid %d-%d\", i, (uint32_t) group.startCharCode, (uint32_t) group.endCharCode, (uint32_t) group.glyphID, (uint32_t) group.glyphID + ((uint32_t) group.endCharCode - (uint32_t) group.startCharCode));\n-    }\n+    CmapSubtableLongGroup record;\n+    record.startCharCode = startCharCode;\n+    record.endCharCode = endCharCode;\n+    record.glyphID = glyphID;\n+    c->copy<CmapSubtableLongGroup> (record);\n@@ -568,1 +729,4 @@\n-    return true;\n+    this->format = 12;\n+    this->reserved = 0;\n+    this->length = c->length () - table_initpos;\n+    this->groups.len = (this->length - min_size)\/CmapSubtableLongGroup::static_size;\n@@ -571,2 +735,7 @@\n- private:\n-  static bool _is_gid_consecutive (CmapSubtableLongGroup *group,\n+  static size_t get_sub_table_size (const hb_sorted_vector_t<CmapSubtableLongGroup> &groups_data)\n+  { return 16 + 12 * groups_data.length; }\n+\n+  private:\n+  static bool _is_gid_consecutive (hb_codepoint_t endCharCode,\n+                                   hb_codepoint_t startCharCode,\n+                                   hb_codepoint_t glyphID,\n@@ -576,2 +745,2 @@\n-    return (cp - 1 == group->endCharCode) &&\n-        new_gid == group->glyphID + (cp - group->startCharCode);\n+    return (cp - 1 == endCharCode) &&\n+        new_gid == glyphID + (cp - startCharCode);\n@@ -626,2 +795,2 @@\n-      hb_codepoint_t last = MIN ((hb_codepoint_t) (first + arrayZ[i].additionalCount),\n-                                 (hb_codepoint_t) HB_UNICODE_MAX);\n+      hb_codepoint_t last = hb_min ((hb_codepoint_t) (first + arrayZ[i].additionalCount),\n+                                    (hb_codepoint_t) HB_UNICODE_MAX);\n@@ -632,0 +801,57 @@\n+  DefaultUVS* copy (hb_serialize_context_t *c,\n+                    const hb_set_t *unicodes) const\n+  {\n+    DefaultUVS *out = c->start_embed<DefaultUVS> ();\n+    if (unlikely (!out)) return nullptr;\n+    auto snap = c->snapshot ();\n+\n+    HBUINT32 len;\n+    len = 0;\n+    if (unlikely (!c->copy<HBUINT32> (len))) return nullptr;\n+    unsigned init_len = c->length ();\n+\n+    hb_codepoint_t lastCode = HB_MAP_VALUE_INVALID;\n+    int count = -1;\n+\n+    for (const UnicodeValueRange& _ : as_array ())\n+    {\n+      for (const unsigned addcnt : hb_range ((unsigned) _.additionalCount + 1))\n+      {\n+        unsigned curEntry = (unsigned) _.startUnicodeValue + addcnt;\n+        if (!unicodes->has (curEntry)) continue;\n+        count += 1;\n+        if (lastCode == HB_MAP_VALUE_INVALID)\n+          lastCode = curEntry;\n+        else if (lastCode + count != curEntry)\n+        {\n+          UnicodeValueRange rec;\n+          rec.startUnicodeValue = lastCode;\n+          rec.additionalCount = count - 1;\n+          c->copy<UnicodeValueRange> (rec);\n+\n+          lastCode = curEntry;\n+          count = 0;\n+        }\n+      }\n+    }\n+\n+    if (lastCode != HB_MAP_VALUE_INVALID)\n+    {\n+      UnicodeValueRange rec;\n+      rec.startUnicodeValue = lastCode;\n+      rec.additionalCount = count;\n+      c->copy<UnicodeValueRange> (rec);\n+    }\n+\n+    if (c->length () - init_len == 0)\n+    {\n+      c->revert (snap);\n+      return nullptr;\n+    }\n+    else\n+    {\n+      if (unlikely (!c->check_assign (out->len, (c->length () - init_len) \/ UnicodeValueRange::static_size))) return nullptr;\n+      return out;\n+    }\n+  }\n+\n@@ -639,3 +865,1 @@\n-  {\n-    return unicodeValue.cmp (codepoint);\n-  }\n+  { return unicodeValue.cmp (codepoint); }\n@@ -650,1 +874,1 @@\n-  GlyphID       glyphID;        \/* Glyph ID of the UVS *\/\n+  HBGlyphID     glyphID;        \/* Glyph ID of the UVS *\/\n@@ -661,1 +885,57 @@\n-      out->add (arrayZ[i].glyphID);\n+      out->add (arrayZ[i].unicodeValue);\n+  }\n+\n+  void collect_mapping (hb_set_t *unicodes, \/* OUT *\/\n+                        hb_map_t *mapping \/* OUT *\/) const\n+  {\n+    unsigned count = len;\n+    for (unsigned i = 0; i < count; i++)\n+    {\n+      hb_codepoint_t unicode = arrayZ[i].unicodeValue;\n+      hb_codepoint_t glyphid = arrayZ[i].glyphID;\n+      unicodes->add (unicode);\n+      mapping->set (unicode, glyphid);\n+    }\n+  }\n+\n+  void closure_glyphs (const hb_set_t      *unicodes,\n+                       hb_set_t            *glyphset) const\n+  {\n+    + as_array ()\n+    | hb_filter (unicodes, &UVSMapping::unicodeValue)\n+    | hb_map (&UVSMapping::glyphID)\n+    | hb_sink (glyphset)\n+    ;\n+  }\n+\n+  NonDefaultUVS* copy (hb_serialize_context_t *c,\n+                       const hb_set_t *unicodes,\n+                       const hb_set_t *glyphs_requested,\n+                       const hb_map_t *glyph_map) const\n+  {\n+    NonDefaultUVS *out = c->start_embed<NonDefaultUVS> ();\n+    if (unlikely (!out)) return nullptr;\n+\n+    auto it =\n+    + as_array ()\n+    | hb_filter ([&] (const UVSMapping& _)\n+                 {\n+                   return unicodes->has (_.unicodeValue) || glyphs_requested->has (_.glyphID);\n+                 })\n+    ;\n+\n+    if (!it) return nullptr;\n+\n+    HBUINT32 len;\n+    len = it.len ();\n+    if (unlikely (!c->copy<HBUINT32> (len))) return nullptr;\n+\n+    for (const UVSMapping& _ : it)\n+    {\n+      UVSMapping mapping;\n+      mapping.unicodeValue = _.unicodeValue;\n+      mapping.glyphID = glyph_map->get (_.glyphID);\n+      c->copy<UVSMapping> (mapping);\n+    }\n+\n+    return out;\n@@ -685,0 +965,14 @@\n+  VariationSelectorRecord(const VariationSelectorRecord& other)\n+  {\n+    *this = other;\n+  }\n+\n+  void operator= (const VariationSelectorRecord& other)\n+  {\n+    varSelector = other.varSelector;\n+    HBUINT32 offset = other.defaultUVS;\n+    defaultUVS = offset;\n+    offset = other.nonDefaultUVS;\n+    nonDefaultUVS = offset;\n+  }\n+\n@@ -691,1 +985,3 @@\n-  int cmp (const hb_codepoint_t &variation_selector) const\n+  void collect_mapping (const void *base,\n+                        hb_set_t *unicodes, \/* OUT *\/\n+                        hb_map_t *mapping \/* OUT *\/) const\n@@ -693,1 +989,2 @@\n-    return varSelector.cmp (variation_selector);\n+    (base+defaultUVS).collect_unicodes (unicodes);\n+    (base+nonDefaultUVS).collect_mapping (unicodes, mapping);\n@@ -696,0 +993,3 @@\n+  int cmp (const hb_codepoint_t &variation_selector) const\n+  { return varSelector.cmp (variation_selector); }\n+\n@@ -704,0 +1004,39 @@\n+  hb_pair_t<unsigned, unsigned>\n+  copy (hb_serialize_context_t *c,\n+        const hb_set_t *unicodes,\n+        const hb_set_t *glyphs_requested,\n+        const hb_map_t *glyph_map,\n+        const void *base) const\n+  {\n+    auto snap = c->snapshot ();\n+    auto *out = c->embed<VariationSelectorRecord> (*this);\n+    if (unlikely (!out)) return hb_pair (0, 0);\n+\n+    out->defaultUVS = 0;\n+    out->nonDefaultUVS = 0;\n+\n+    unsigned non_default_uvs_objidx = 0;\n+    if (nonDefaultUVS != 0)\n+    {\n+      c->push ();\n+      if (c->copy (base+nonDefaultUVS, unicodes, glyphs_requested, glyph_map))\n+        non_default_uvs_objidx = c->pop_pack ();\n+      else c->pop_discard ();\n+    }\n+\n+    unsigned default_uvs_objidx = 0;\n+    if (defaultUVS != 0)\n+    {\n+      c->push ();\n+      if (c->copy (base+defaultUVS, unicodes))\n+        default_uvs_objidx = c->pop_pack ();\n+      else c->pop_discard ();\n+    }\n+\n+\n+    if (!default_uvs_objidx && !non_default_uvs_objidx)\n+      c->revert (snap);\n+\n+    return hb_pair (default_uvs_objidx, non_default_uvs_objidx);\n+  }\n+\n@@ -718,3 +1057,1 @@\n-  {\n-    return record.bsearch (variation_selector).get_glyph (codepoint, glyph, this);\n-  }\n+  { return record.bsearch (variation_selector).get_glyph (codepoint, glyph, this); }\n@@ -730,0 +1067,101 @@\n+  { record.bsearch (variation_selector).collect_unicodes (out, this); }\n+\n+  void serialize (hb_serialize_context_t *c,\n+                  const hb_set_t *unicodes,\n+                  const hb_set_t *glyphs_requested,\n+                  const hb_map_t *glyph_map,\n+                  const void *base)\n+  {\n+    auto snap = c->snapshot ();\n+    unsigned table_initpos = c->length ();\n+    const char* init_tail = c->tail;\n+\n+    if (unlikely (!c->extend_min (*this))) return;\n+    this->format = 14;\n+\n+    auto src_tbl = reinterpret_cast<const CmapSubtableFormat14*> (base);\n+\n+    \/*\n+     * Some versions of OTS require that offsets are in order. Due to the use\n+     * of push()\/pop_pack() serializing the variation records in order results\n+     * in the offsets being in reverse order (first record has the largest\n+     * offset). While this is perfectly valid, it will cause some versions of\n+     * OTS to consider this table bad.\n+     *\n+     * So to prevent this issue we serialize the variation records in reverse\n+     * order, so that the offsets are ordered from small to large. Since\n+     * variation records are supposed to be in increasing order of varSelector\n+     * we then have to reverse the order of the written variation selector\n+     * records after everything is finalized.\n+     *\/\n+    hb_vector_t<hb_pair_t<unsigned, unsigned>> obj_indices;\n+    for (int i = src_tbl->record.len - 1; i >= 0; i--)\n+    {\n+      hb_pair_t<unsigned, unsigned> result = src_tbl->record[i].copy (c, unicodes, glyphs_requested, glyph_map, base);\n+      if (result.first || result.second)\n+        obj_indices.push (result);\n+    }\n+\n+    if (c->length () - table_initpos == CmapSubtableFormat14::min_size)\n+    {\n+      c->revert (snap);\n+      return;\n+    }\n+\n+    if (unlikely (!c->check_success (!obj_indices.in_error ())))\n+      return;\n+\n+    int tail_len = init_tail - c->tail;\n+    c->check_assign (this->length, c->length () - table_initpos + tail_len);\n+    c->check_assign (this->record.len,\n+                     (c->length () - table_initpos - CmapSubtableFormat14::min_size) \/\n+                     VariationSelectorRecord::static_size);\n+\n+    \/* Correct the incorrect write order by reversing the order of the variation\n+       records array. *\/\n+    _reverse_variation_records ();\n+\n+    \/* Now that records are in the right order, we can set up the offsets. *\/\n+    _add_links_to_variation_records (c, obj_indices);\n+  }\n+\n+  void _reverse_variation_records ()\n+  {\n+    record.as_array ().reverse ();\n+  }\n+\n+  void _add_links_to_variation_records (hb_serialize_context_t *c,\n+                                        const hb_vector_t<hb_pair_t<unsigned, unsigned>>& obj_indices)\n+  {\n+    for (unsigned i = 0; i < obj_indices.length; i++)\n+    {\n+      \/*\n+       * Since the record array has been reversed (see comments in copy())\n+       * but obj_indices has not been, the indices at obj_indices[i]\n+       * are for the variation record at record[j].\n+       *\/\n+      int j = obj_indices.length - 1 - i;\n+      c->add_link (record[j].defaultUVS, obj_indices[i].first);\n+      c->add_link (record[j].nonDefaultUVS, obj_indices[i].second);\n+    }\n+  }\n+\n+  void closure_glyphs (const hb_set_t      *unicodes,\n+                       hb_set_t            *glyphset) const\n+  {\n+    + hb_iter (record)\n+    | hb_filter (hb_bool, &VariationSelectorRecord::nonDefaultUVS)\n+    | hb_map (&VariationSelectorRecord::nonDefaultUVS)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([=] (const NonDefaultUVS& _) { _.closure_glyphs (unicodes, glyphset); })\n+    ;\n+  }\n+\n+  void collect_unicodes (hb_set_t *out) const\n+  {\n+    for (const VariationSelectorRecord& _ : record)\n+      _.collect_unicodes (out, this);\n+  }\n+\n+  void collect_mapping (hb_set_t *unicodes, \/* OUT *\/\n+                        hb_map_t *mapping \/* OUT *\/) const\n@@ -731,1 +1169,2 @@\n-    record.bsearch (variation_selector).collect_unicodes (out, this);\n+    for (const VariationSelectorRecord& _ : record)\n+      _.collect_mapping (this, unicodes, mapping);\n@@ -769,1 +1208,1 @@\n-  void collect_unicodes (hb_set_t *out) const\n+  void collect_unicodes (hb_set_t *out, unsigned int num_glyphs = UINT_MAX) const\n@@ -776,2 +1215,2 @@\n-    case 12: u.format12.collect_unicodes (out); return;\n-    case 13: u.format13.collect_unicodes (out); return;\n+    case 12: u.format12.collect_unicodes (out, num_glyphs); return;\n+    case 13: u.format13.collect_unicodes (out, num_glyphs); return;\n@@ -783,0 +1222,32 @@\n+  void collect_mapping (hb_set_t *unicodes, \/* OUT *\/\n+                        hb_map_t *mapping, \/* OUT *\/\n+                        unsigned num_glyphs = UINT_MAX) const\n+  {\n+    switch (u.format) {\n+    case  0: u.format0 .collect_mapping (unicodes, mapping); return;\n+    case  4: u.format4 .collect_mapping (unicodes, mapping); return;\n+    case  6: u.format6 .collect_mapping (unicodes, mapping); return;\n+    case 10: u.format10.collect_mapping (unicodes, mapping); return;\n+    case 12: u.format12.collect_mapping (unicodes, mapping, num_glyphs); return;\n+    case 13: u.format13.collect_mapping (unicodes, mapping, num_glyphs); return;\n+    case 14:\n+    default: return;\n+    }\n+  }\n+\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  Iterator it,\n+                  unsigned format,\n+                  const hb_subset_plan_t *plan,\n+                  const void *base)\n+  {\n+    switch (format) {\n+    case  4: return u.format4.serialize (c, it);\n+    case 12: return u.format12.serialize (c, it);\n+    case 14: return u.format14.serialize (c, plan->unicodes, plan->glyphs_requested, plan->glyph_map, base);\n+    default: return;\n+    }\n+  }\n+\n@@ -834,0 +1305,34 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  EncodingRecord* copy (hb_serialize_context_t *c,\n+                        Iterator it,\n+                        unsigned format,\n+                        const void *base,\n+                        const hb_subset_plan_t *plan,\n+                        \/* INOUT *\/ unsigned *objidx) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto snap = c->snapshot ();\n+    auto *out = c->embed (this);\n+    if (unlikely (!out)) return_trace (nullptr);\n+    out->subtable = 0;\n+\n+    if (*objidx == 0)\n+    {\n+      CmapSubtable *cmapsubtable = c->push<CmapSubtable> ();\n+      unsigned origin_length = c->length ();\n+      cmapsubtable->serialize (c, it, format, plan, &(base+subtable));\n+      if (c->length () - origin_length > 0) *objidx = c->pop_pack ();\n+      else c->pop_discard ();\n+    }\n+\n+    if (*objidx == 0)\n+    {\n+      c->revert (snap);\n+      return_trace (nullptr);\n+    }\n+\n+    c->add_link (out->subtable, *objidx);\n+    return_trace (out);\n+  }\n+\n@@ -846,1 +1351,7 @@\n-  struct subset_plan\n+  template<typename Iterator, typename EncodingRecIter,\n+           hb_requires (hb_is_iterator (EncodingRecIter))>\n+  void serialize (hb_serialize_context_t *c,\n+                  Iterator it,\n+                  EncodingRecIter encodingrec_iter,\n+                  const void *base,\n+                  const hb_subset_plan_t *plan)\n@@ -848,1 +1359,6 @@\n-    size_t final_size () const\n+    if (unlikely (!c->extend_min ((*this))))  return;\n+    this->version = 0;\n+\n+    unsigned format4objidx = 0, format12objidx = 0, format14objidx = 0;\n+\n+    for (const EncodingRecord& _ : encodingrec_iter)\n@@ -850,4 +1366,36 @@\n-      return 4 \/\/ header\n-          +  8 * 3 \/\/ 3 EncodingRecord\n-          +  CmapSubtableFormat4::get_sub_table_size (this->format4_segments)\n-          +  CmapSubtableFormat12::get_sub_table_size (this->format12_groups);\n+      unsigned format = (base+_.subtable).u.format;\n+      if (!plan->glyphs_requested->is_empty ())\n+      {\n+        hb_set_t unicodes_set;\n+        hb_map_t cp_glyphid_map;\n+        (base+_.subtable).collect_mapping (&unicodes_set, &cp_glyphid_map);\n+\n+        auto table_iter =\n+        + hb_zip (unicodes_set.iter(), unicodes_set.iter() | hb_map(cp_glyphid_map))\n+        | hb_filter (plan->_glyphset, hb_second)\n+        | hb_filter ([plan] (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& p)\n+                     {\n+                       return plan->unicodes->has (p.first) ||\n+                              plan->glyphs_requested->has (p.second);\n+                     })\n+        | hb_map ([plan] (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& p_org)\n+                  {\n+                    return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (p_org.first, plan->glyph_map->get(p_org.second));\n+                  })\n+        ;\n+\n+        if (format == 4) c->copy (_, table_iter, 4u, base, plan, &format4objidx);\n+        else if (format == 12) c->copy (_, table_iter, 12u, base, plan, &format12objidx);\n+        else if (format == 14) c->copy (_, table_iter, 14u, base, plan, &format14objidx);\n+      }\n+      \/* when --gids option is not used, we iterate input unicodes instead of\n+       * all codepoints in each subtable, which is more efficient *\/\n+      else\n+      {\n+        hb_set_t unicodes_set;\n+        (base+_.subtable).collect_unicodes (&unicodes_set);\n+\n+        if (format == 4) c->copy (_, + it | hb_filter (unicodes_set, hb_first), 4u, base, plan, &format4objidx);\n+        else if (format == 12) c->copy (_, + it | hb_filter (unicodes_set, hb_first), 12u, base, plan, &format12objidx);\n+        else if (format == 14) c->copy (_, it, 14u, base, plan, &format14objidx);\n+      }\n@@ -856,3 +1404,2 @@\n-    hb_vector_t<CmapSubtableFormat4::segment_plan> format4_segments;\n-    hb_vector_t<CmapSubtableLongGroup> format12_groups;\n-  };\n+    c->check_assign(this->encodingRecord.len, (c->length () - cmap::min_size)\/EncodingRecord::static_size);\n+  }\n@@ -860,2 +1407,2 @@\n-  bool _create_plan (const hb_subset_plan_t *plan,\n-                     subset_plan *cmap_plan) const\n+  void closure_glyphs (const hb_set_t      *unicodes,\n+                       hb_set_t            *glyphset) const\n@@ -863,4 +1410,6 @@\n-    if (unlikely (!CmapSubtableFormat4::create_sub_table_plan (plan, &cmap_plan->format4_segments)))\n-      return false;\n-\n-    return CmapSubtableFormat12::create_sub_table_plan (plan, &cmap_plan->format12_groups);\n+    + hb_iter (encodingRecord)\n+    | hb_map (&EncodingRecord::subtable)\n+    | hb_map (hb_add (this))\n+    | hb_filter ([&] (const CmapSubtable& _) { return _.u.format == 14; })\n+    | hb_apply ([=] (const CmapSubtable& _) { _.u.format14.closure_glyphs (unicodes, glyphset); })\n+    ;\n@@ -869,4 +1418,1 @@\n-  bool _subset (const hb_subset_plan_t *plan,\n-                const subset_plan &cmap_subset_plan,\n-                size_t dest_sz,\n-                void *dest) const\n+  bool subset (hb_subset_context_t *c) const\n@@ -874,7 +1420,1 @@\n-    hb_serialize_context_t c (dest, dest_sz);\n-\n-    cmap *table = c.start_serialize<cmap> ();\n-    if (unlikely (!c.extend_min (*table)))\n-    {\n-      return false;\n-    }\n+    TRACE_SUBSET (this);\n@@ -882,1 +1422,2 @@\n-    table->version.set (0);\n+    cmap *cmap_prime = c->serializer->start_embed<cmap> ();\n+    if (unlikely (!c->serializer->check_success (cmap_prime))) return_trace (false);\n@@ -884,4 +1425,10 @@\n-    if (unlikely (!table->encodingRecord.serialize (&c, \/* numTables *\/ 3)))\n-      return false;\n-\n-    \/\/ TODO(grieger): Convert the below to a for loop\n+    auto encodingrec_iter =\n+    + hb_iter (encodingRecord)\n+    | hb_filter ([&] (const EncodingRecord& _)\n+                {\n+                  if ((_.platformID == 0 && _.encodingID == 3) ||\n+                      (_.platformID == 0 && _.encodingID == 4) ||\n+                      (_.platformID == 3 && _.encodingID == 1) ||\n+                      (_.platformID == 3 && _.encodingID == 10) ||\n+                      (this + _.subtable).u.format == 14)\n+                    return true;\n@@ -889,4 +1436,3 @@\n-    \/\/ Format 4, Plat 0 Encoding Record\n-    EncodingRecord &format4_plat0_rec = table->encodingRecord[0];\n-    format4_plat0_rec.platformID.set (0); \/\/ Unicode\n-    format4_plat0_rec.encodingID.set (3);\n+                  return false;\n+                })\n+    ;\n@@ -894,4 +1440,1 @@\n-    \/\/ Format 4, Plat 3 Encoding Record\n-    EncodingRecord &format4_plat3_rec = table->encodingRecord[1];\n-    format4_plat3_rec.platformID.set (3); \/\/ Windows\n-    format4_plat3_rec.encodingID.set (1); \/\/ Unicode BMP\n+    if (unlikely (!encodingrec_iter.len ())) return_trace (false);\n@@ -899,4 +1442,2 @@\n-    \/\/ Format 12 Encoding Record\n-    EncodingRecord &format12_rec = table->encodingRecord[2];\n-    format12_rec.platformID.set (3); \/\/ Windows\n-    format12_rec.encodingID.set (10); \/\/ Unicode UCS-4\n+    const EncodingRecord *unicode_bmp= nullptr, *unicode_ucs4 = nullptr, *ms_bmp = nullptr, *ms_ucs4 = nullptr;\n+    bool has_format12 = false;\n@@ -904,1 +1445,1 @@\n-    \/\/ Write out format 4 sub table\n+    for (const EncodingRecord& _ : encodingrec_iter)\n@@ -906,7 +1447,8 @@\n-      CmapSubtable &subtable = format4_plat0_rec.subtable.serialize (&c, table);\n-      format4_plat3_rec.subtable.set (format4_plat0_rec.subtable);\n-      subtable.u.format.set (4);\n-\n-      CmapSubtableFormat4 &format4 = subtable.u.format4;\n-      if (unlikely (!format4.serialize (&c, plan, cmap_subset_plan.format4_segments)))\n-        return false;\n+      unsigned format = (this + _.subtable).u.format;\n+      if (format == 12) has_format12 = true;\n+\n+      const EncodingRecord *table = hb_addressof (_);\n+      if      (_.platformID == 0 && _.encodingID ==  3) unicode_bmp = table;\n+      else if (_.platformID == 0 && _.encodingID ==  4) unicode_ucs4 = table;\n+      else if (_.platformID == 3 && _.encodingID ==  1) ms_bmp = table;\n+      else if (_.platformID == 3 && _.encodingID == 10) ms_ucs4 = table;\n@@ -915,49 +1457,16 @@\n-    \/\/ Write out format 12 sub table.\n-    {\n-      CmapSubtable &subtable = format12_rec.subtable.serialize (&c, table);\n-      subtable.u.format.set (12);\n-\n-      CmapSubtableFormat12 &format12 = subtable.u.format12;\n-      if (unlikely (!format12.serialize (&c, cmap_subset_plan.format12_groups)))\n-        return false;\n-    }\n-\n-    c.end_serialize ();\n-\n-    return true;\n-  }\n-\n-  bool subset (hb_subset_plan_t *plan) const\n-  {\n-    subset_plan cmap_subset_plan;\n-\n-    if (unlikely (!_create_plan (plan, &cmap_subset_plan)))\n-    {\n-      DEBUG_MSG(SUBSET, nullptr, \"Failed to generate a cmap subsetting plan.\");\n-      return false;\n-    }\n-\n-    \/\/ We now know how big our blob needs to be\n-    size_t dest_sz = cmap_subset_plan.final_size ();\n-    void *dest = malloc (dest_sz);\n-    if (unlikely (!dest)) {\n-      DEBUG_MSG(SUBSET, nullptr, \"Unable to alloc %lu for cmap subset output\", (unsigned long) dest_sz);\n-      return false;\n-    }\n-\n-    if (unlikely (!_subset (plan, cmap_subset_plan, dest_sz, dest)))\n-    {\n-      DEBUG_MSG(SUBSET, nullptr, \"Failed to perform subsetting of cmap.\");\n-      free (dest);\n-      return false;\n-    }\n-\n-    \/\/ all done, write the blob into dest\n-    hb_blob_t *cmap_prime = hb_blob_create ((const char *) dest,\n-                                            dest_sz,\n-                                            HB_MEMORY_MODE_READONLY,\n-                                            dest,\n-                                            free);\n-    bool result =  plan->add_table (HB_OT_TAG_cmap, cmap_prime);\n-    hb_blob_destroy (cmap_prime);\n-    return result;\n+    if (unlikely (!has_format12 && !unicode_bmp && !ms_bmp)) return_trace (false);\n+    if (unlikely (has_format12 && (!unicode_ucs4 && !ms_ucs4))) return_trace (false);\n+\n+    auto it =\n+    + hb_iter (c->plan->unicodes)\n+    | hb_map ([&] (hb_codepoint_t _)\n+              {\n+                hb_codepoint_t new_gid = HB_MAP_VALUE_INVALID;\n+                c->plan->new_gid_for_codepoint (_, &new_gid);\n+                return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (_, new_gid);\n+              })\n+    | hb_filter ([&] (const hb_pair_t<hb_codepoint_t, hb_codepoint_t> _)\n+                 { return (_.second != HB_MAP_VALUE_INVALID); })\n+    ;\n+    cmap_prime->serialize (c->serializer, it, encodingrec_iter, this, c->plan);\n+    return_trace (true);\n@@ -972,0 +1481,9 @@\n+    \/* Symbol subtable.\n+     * Prefer symbol if available.\n+     * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1918 *\/\n+    if ((subtable = this->find_subtable (3, 0)))\n+    {\n+      if (symbol) *symbol = true;\n+      return subtable;\n+    }\n+\n@@ -984,7 +1502,0 @@\n-    \/* Symbol subtable. *\/\n-    if ((subtable = this->find_subtable (3, 0)))\n-    {\n-      if (symbol) *symbol = true;\n-      return subtable;\n-    }\n-\n@@ -1011,1 +1522,0 @@\n-      {\n@@ -1013,1 +1523,2 @@\n-      } else {\n+      else\n+      {\n@@ -1023,5 +1534,4 @@\n-          {\n-            this->format4_accel.init (&subtable->u.format4);\n-            this->get_glyph_data = &this->format4_accel;\n-            this->get_glyph_funcZ = this->format4_accel.get_glyph_func;\n-          }\n+        {\n+          this->format4_accel.init (&subtable->u.format4);\n+          this->get_glyph_data = &this->format4_accel;\n+          this->get_glyph_funcZ = this->format4_accel.get_glyph_func;\n@@ -1030,0 +1540,1 @@\n+        }\n@@ -1036,1 +1547,1 @@\n-                                   hb_codepoint_t *glyph) const\n+                            hb_codepoint_t *glyph) const\n@@ -1079,4 +1590,5 @@\n-    void collect_unicodes (hb_set_t *out) const\n-    {\n-      subtable->collect_unicodes (out);\n-    }\n+    void collect_unicodes (hb_set_t *out, unsigned int num_glyphs) const\n+    { subtable->collect_unicodes (out, num_glyphs); }\n+    void collect_mapping (hb_set_t *unicodes, hb_map_t *mapping,\n+                          unsigned num_glyphs = UINT_MAX) const\n+    { subtable->collect_mapping (unicodes, mapping, num_glyphs); }\n@@ -1084,3 +1596,1 @@\n-    {\n-      subtable_uvs->collect_variation_selectors (out);\n-    }\n+    { subtable_uvs->collect_variation_selectors (out); }\n@@ -1089,3 +1599,1 @@\n-    {\n-      subtable_uvs->collect_variation_unicodes (variation_selector, out);\n-    }\n+    { subtable_uvs->collect_variation_unicodes (variation_selector, out); }\n@@ -1099,3 +1607,3 @@\n-    static bool get_glyph_from (const void *obj,\n-                                hb_codepoint_t codepoint,\n-                                hb_codepoint_t *glyph)\n+    HB_INTERNAL static bool get_glyph_from (const void *obj,\n+                                            hb_codepoint_t codepoint,\n+                                            hb_codepoint_t *glyph)\n@@ -1108,3 +1616,3 @@\n-    static bool get_glyph_from_symbol (const void *obj,\n-                                              hb_codepoint_t codepoint,\n-                                              hb_codepoint_t *glyph)\n+    HB_INTERNAL static bool get_glyph_from_symbol (const void *obj,\n+                                                   hb_codepoint_t codepoint,\n+                                                   hb_codepoint_t *glyph)\n@@ -1138,0 +1646,1 @@\n+    public:\n@@ -1147,2 +1656,2 @@\n-    key.platformID.set (platform_id);\n-    key.encodingID.set (encoding_id);\n+    key.platformID = platform_id;\n+    key.encodingID = encoding_id;\n@@ -1157,0 +1666,22 @@\n+  const EncodingRecord *find_encodingrec (unsigned int platform_id,\n+                                          unsigned int encoding_id) const\n+  {\n+    EncodingRecord key;\n+    key.platformID = platform_id;\n+    key.encodingID = encoding_id;\n+\n+    return encodingRecord.as_array ().bsearch (key);\n+  }\n+\n+  bool find_subtable (unsigned format) const\n+  {\n+    auto it =\n+    + hb_iter (encodingRecord)\n+    | hb_map (&EncodingRecord::subtable)\n+    | hb_map (hb_add (this))\n+    | hb_filter ([&] (const CmapSubtable& _) { return _.u.format == format; })\n+    ;\n+\n+    return it.len ();\n+  }\n+\n@@ -1168,1 +1699,1 @@\n-  HBUINT16              version;        \/* Table version number (0). *\/\n+  HBUINT16      version;        \/* Table version number (0). *\/\n@@ -1170,1 +1701,1 @@\n-                        encodingRecord; \/* Encoding tables. *\/\n+                encodingRecord; \/* Encoding tables. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-cmap-table.hh","additions":885,"deletions":354,"binary":false,"changes":1239,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n- * Google Author(s): Seigo Nonaka\n+ * Google Author(s): Seigo Nonaka, Calder Kitagawa\n@@ -46,0 +46,29 @@\n+struct cblc_bitmap_size_subset_context_t\n+{\n+  const char *cbdt;\n+  unsigned int cbdt_length;\n+  hb_vector_t<char> *cbdt_prime;\n+  unsigned int size;            \/* INOUT\n+                                 *  Input: old size of IndexSubtable\n+                                 *  Output: new size of IndexSubtable\n+                                 *\/\n+  unsigned int num_tables;      \/* INOUT\n+                                 *  Input: old number of subtables.\n+                                 *  Output: new number of subtables.\n+                                 *\/\n+  hb_codepoint_t start_glyph;   \/* OUT *\/\n+  hb_codepoint_t end_glyph;     \/* OUT *\/\n+};\n+\n+static inline bool\n+_copy_data_to_cbdt (hb_vector_t<char> *cbdt_prime,\n+                    const void        *data,\n+                    unsigned           length)\n+{\n+  unsigned int new_len = cbdt_prime->length + length;\n+  if (unlikely (!cbdt_prime->alloc (new_len))) return false;\n+  memcpy (cbdt_prime->arrayZ + cbdt_prime->length, data, length);\n+  cbdt_prime->length = new_len;\n+  return true;\n+}\n+\n@@ -54,1 +83,1 @@\n-  void get_extents (hb_glyph_extents_t *extents) const\n+  void get_extents (hb_font_t *font, hb_glyph_extents_t *extents) const\n@@ -56,4 +85,4 @@\n-    extents->x_bearing = bearingX;\n-    extents->y_bearing = bearingY;\n-    extents->width = width;\n-    extents->height = - (hb_position_t) height;\n+    extents->x_bearing = font->em_scale_x (bearingX);\n+    extents->y_bearing = font->em_scale_y (bearingY);\n+    extents->width = font->em_scale_x (width);\n+    extents->height = font->em_scale_y (-static_cast<int>(height));\n@@ -68,1 +97,1 @@\n-  DEFINE_SIZE_STATIC(5);\n+  DEFINE_SIZE_STATIC (5);\n@@ -77,1 +106,1 @@\n-  DEFINE_SIZE_STATIC(8);\n+  DEFINE_SIZE_STATIC (8);\n@@ -101,1 +130,1 @@\n-  DEFINE_SIZE_STATIC(12);\n+  DEFINE_SIZE_STATIC (12);\n@@ -121,1 +150,1 @@\n-  DEFINE_SIZE_STATIC(8);\n+  DEFINE_SIZE_STATIC (8);\n@@ -146,0 +175,12 @@\n+  bool add_offset (hb_serialize_context_t *c,\n+                   unsigned int offset,\n+                   unsigned int *size \/* OUT (accumulated) *\/)\n+  {\n+    TRACE_SERIALIZE (this);\n+    Offset<OffsetType> embedded_offset;\n+    embedded_offset = offset;\n+    *size += sizeof (OffsetType);\n+    auto *o = c->embed (embedded_offset);\n+    return_trace ((bool) o);\n+  }\n+\n@@ -147,1 +188,1 @@\n-  UnsizedArrayOf<Offset<OffsetType> >\n+  UnsizedArrayOf<Offset<OffsetType>>\n@@ -150,1 +191,1 @@\n-  DEFINE_SIZE_ARRAY(8, offsetArrayZ);\n+  DEFINE_SIZE_ARRAY (8, offsetArrayZ);\n@@ -162,1 +203,2 @@\n-    switch (u.header.indexFormat) {\n+    switch (u.header.indexFormat)\n+    {\n@@ -169,0 +211,99 @@\n+  bool\n+  finish_subtable (hb_serialize_context_t *c,\n+                   unsigned int cbdt_prime_len,\n+                   unsigned int num_glyphs,\n+                   unsigned int *size \/* OUT (accumulated) *\/)\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    unsigned int local_offset = cbdt_prime_len - u.header.imageDataOffset;\n+    switch (u.header.indexFormat)\n+    {\n+    case 1: return_trace (u.format1.add_offset (c, local_offset, size));\n+    case 3: {\n+      if (!u.format3.add_offset (c, local_offset, size))\n+        return_trace (false);\n+      if (!(num_glyphs & 0x01))  \/\/ Pad to 32-bit alignment if needed.\n+        return_trace (u.format3.add_offset (c, 0, size));\n+      return_trace (true);\n+    }\n+    \/\/ TODO: implement 2, 4, 5.\n+    case 2: case 4:  \/\/ No-op.\n+    case 5:  \/\/ Pad to 32-bit aligned.\n+    default: return_trace (false);\n+    }\n+  }\n+\n+  bool\n+  fill_missing_glyphs (hb_serialize_context_t *c,\n+                       unsigned int cbdt_prime_len,\n+                       unsigned int num_missing,\n+                       unsigned int *size \/* OUT (accumulated) *\/,\n+                       unsigned int *num_glyphs \/* OUT (accumulated) *\/)\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    unsigned int local_offset = cbdt_prime_len - u.header.imageDataOffset;\n+    switch (u.header.indexFormat)\n+    {\n+    case 1: {\n+      for (unsigned int i = 0; i < num_missing; i++)\n+      {\n+        if (unlikely (!u.format1.add_offset (c, local_offset, size)))\n+          return_trace (false);\n+        *num_glyphs += 1;\n+      }\n+      return_trace (true);\n+    }\n+    case 3: {\n+      for (unsigned int i = 0; i < num_missing; i++)\n+      {\n+        if (unlikely (!u.format3.add_offset (c, local_offset, size)))\n+          return_trace (false);\n+        *num_glyphs += 1;\n+      }\n+      return_trace (true);\n+    }\n+    \/\/ TODO: implement 2, 4, 5.\n+    case 2:  \/\/ Add empty space in cbdt_prime?.\n+    case 4: case 5:  \/\/ No-op as sparse is supported.\n+    default: return_trace (false);\n+    }\n+  }\n+\n+  bool\n+  copy_glyph_at_idx (hb_serialize_context_t *c, unsigned int idx,\n+                     const char *cbdt, unsigned int cbdt_length,\n+                     hb_vector_t<char> *cbdt_prime \/* INOUT *\/,\n+                     IndexSubtable *subtable_prime \/* INOUT *\/,\n+                     unsigned int *size \/* OUT (accumulated) *\/) const\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    unsigned int offset, length, format;\n+    if (unlikely (!get_image_data (idx, &offset, &length, &format))) return_trace (false);\n+    if (unlikely (offset > cbdt_length || cbdt_length - offset < length)) return_trace (false);\n+\n+    auto *header_prime = subtable_prime->get_header ();\n+    unsigned int new_local_offset = cbdt_prime->length - (unsigned int) header_prime->imageDataOffset;\n+    if (unlikely (!_copy_data_to_cbdt (cbdt_prime, cbdt + offset, length))) return_trace (false);\n+\n+    return_trace (subtable_prime->add_offset (c, new_local_offset, size));\n+  }\n+\n+  bool\n+  add_offset (hb_serialize_context_t *c, unsigned int local_offset,\n+              unsigned int *size \/* OUT (accumulated) *\/)\n+  {\n+    TRACE_SERIALIZE (this);\n+    switch (u.header.indexFormat)\n+    {\n+    case 1: return_trace (u.format1.add_offset (c, local_offset, size));\n+    case 3: return_trace (u.format3.add_offset (c, local_offset, size));\n+    \/\/ TODO: Implement tables 2, 4, 5\n+    case 2:  \/\/ Should be a no-op.\n+    case 4: case 5:  \/\/ Handle sparse cases.\n+    default: return_trace (false);\n+    }\n+  }\n+\n@@ -171,1 +312,2 @@\n-    switch (u.header.indexFormat) {\n+    switch (u.header.indexFormat)\n+    {\n@@ -178,4 +320,3 @@\n-  bool get_image_data (unsigned int idx,\n-                       unsigned int *offset,\n-                       unsigned int *length,\n-                       unsigned int *format) const\n+  bool\n+  get_image_data (unsigned int idx, unsigned int *offset,\n+                  unsigned int *length, unsigned int *format) const\n@@ -184,1 +325,2 @@\n-    switch (u.header.indexFormat) {\n+    switch (u.header.indexFormat)\n+    {\n@@ -191,0 +333,17 @@\n+  const IndexSubtableHeader* get_header () const { return &u.header; }\n+\n+  void populate_header (unsigned index_format,\n+                        unsigned image_format,\n+                        unsigned int image_data_offset,\n+                        unsigned int *size)\n+  {\n+    u.header.indexFormat = index_format;\n+    u.header.imageFormat = image_format;\n+    u.header.imageDataOffset = image_data_offset;\n+    switch (u.header.indexFormat)\n+    {\n+    case 1: *size += IndexSubtableFormat1::min_size; break;\n+    case 3: *size += IndexSubtableFormat3::min_size; break;\n+    }\n+  }\n+\n@@ -212,2 +371,111 @@\n-  bool get_extents (hb_glyph_extents_t *extents,\n-                    const void *base) const\n+  const IndexSubtable* get_subtable (const void *base) const\n+  {\n+    return &(base+offsetToSubtable);\n+  }\n+\n+  bool add_new_subtable (hb_subset_context_t* c,\n+                         cblc_bitmap_size_subset_context_t *bitmap_size_context,\n+                         IndexSubtableRecord *record,\n+                         const hb_vector_t<hb_pair_t<hb_codepoint_t, const IndexSubtableRecord*>> *lookup, \/* IN *\/\n+                         const void *base,\n+                         unsigned int *start \/* INOUT *\/) const\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    auto *subtable = c->serializer->start_embed<IndexSubtable> ();\n+    if (unlikely (!subtable)) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (subtable))) return_trace (false);\n+\n+    auto *old_subtable = get_subtable (base);\n+    auto *old_header = old_subtable->get_header ();\n+\n+    subtable->populate_header (old_header->indexFormat,\n+                               old_header->imageFormat,\n+                               bitmap_size_context->cbdt_prime->length,\n+                               &bitmap_size_context->size);\n+\n+    unsigned int num_glyphs = 0;\n+    bool early_exit = false;\n+    for (unsigned int i = *start; i < lookup->length; i++)\n+    {\n+      hb_codepoint_t new_gid = (*lookup)[i].first;\n+      const IndexSubtableRecord *next_record = (*lookup)[i].second;\n+      const IndexSubtable *next_subtable = next_record->get_subtable (base);\n+      auto *next_header = next_subtable->get_header ();\n+      if (next_header != old_header)\n+      {\n+        *start = i;\n+        early_exit = true;\n+        break;\n+      }\n+      unsigned int num_missing = record->add_glyph_for_subset (new_gid);\n+      if (unlikely (!subtable->fill_missing_glyphs (c->serializer,\n+                                                    bitmap_size_context->cbdt_prime->length,\n+                                                    num_missing,\n+                                                    &bitmap_size_context->size,\n+                                                    &num_glyphs)))\n+        return_trace (false);\n+\n+      hb_codepoint_t old_gid = 0;\n+      c->plan->old_gid_for_new_gid (new_gid, &old_gid);\n+      if (old_gid < next_record->firstGlyphIndex)\n+        return_trace (false);\n+\n+      unsigned int old_idx = (unsigned int) old_gid - next_record->firstGlyphIndex;\n+      if (unlikely (!next_subtable->copy_glyph_at_idx (c->serializer,\n+                                                       old_idx,\n+                                                       bitmap_size_context->cbdt,\n+                                                       bitmap_size_context->cbdt_length,\n+                                                       bitmap_size_context->cbdt_prime,\n+                                                       subtable,\n+                                                       &bitmap_size_context->size)))\n+        return_trace (false);\n+      num_glyphs += 1;\n+    }\n+    if (!early_exit)\n+      *start = lookup->length;\n+    if (unlikely (!subtable->finish_subtable (c->serializer,\n+                                              bitmap_size_context->cbdt_prime->length,\n+                                              num_glyphs,\n+                                              &bitmap_size_context->size)))\n+      return_trace (false);\n+    return_trace (true);\n+  }\n+\n+  bool add_new_record (hb_subset_context_t *c,\n+                       cblc_bitmap_size_subset_context_t *bitmap_size_context,\n+                       const hb_vector_t<hb_pair_t<hb_codepoint_t, const IndexSubtableRecord*>> *lookup, \/* IN *\/\n+                       const void *base,\n+                       unsigned int *start, \/* INOUT *\/\n+                       hb_vector_t<IndexSubtableRecord>* records \/* INOUT *\/) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto snap = c->serializer->snapshot ();\n+    unsigned int old_size = bitmap_size_context->size;\n+    unsigned int old_cbdt_prime_length = bitmap_size_context->cbdt_prime->length;\n+\n+    \/\/ Set to invalid state to indicate filling glyphs is not yet started.\n+    if (unlikely (!records->resize (records->length + 1)))\n+      return_trace (c->serializer->check_success (false));\n+\n+    (*records)[records->length - 1].firstGlyphIndex = 1;\n+    (*records)[records->length - 1].lastGlyphIndex = 0;\n+    bitmap_size_context->size += IndexSubtableRecord::min_size;\n+\n+    c->serializer->push ();\n+\n+    if (unlikely (!add_new_subtable (c, bitmap_size_context, &((*records)[records->length - 1]), lookup, base, start)))\n+    {\n+      c->serializer->pop_discard ();\n+      c->serializer->revert (snap);\n+      bitmap_size_context->cbdt_prime->shrink (old_cbdt_prime_length);\n+      bitmap_size_context->size = old_size;\n+      records->resize (records->length - 1);\n+      return_trace (false);\n+    }\n+\n+    bitmap_size_context->num_tables += 1;\n+    return_trace (true);\n+  }\n+\n+  unsigned int add_glyph_for_subset (hb_codepoint_t gid)\n@@ -215,1 +483,12 @@\n-    return (base+offsetToSubtable).get_extents (extents);\n+    if (firstGlyphIndex > lastGlyphIndex)\n+    {\n+      firstGlyphIndex = gid;\n+      lastGlyphIndex = gid;\n+      return 0;\n+    }\n+    \/\/ TODO maybe assert? this shouldn't occur.\n+    if (lastGlyphIndex > gid)\n+      return 0;\n+    unsigned int num_missing = (unsigned int) (gid - lastGlyphIndex - 1);\n+    lastGlyphIndex = gid;\n+    return num_missing;\n@@ -218,0 +497,3 @@\n+  bool get_extents (hb_glyph_extents_t *extents, const void *base) const\n+  { return (base+offsetToSubtable).get_extents (extents); }\n+\n@@ -229,2 +511,2 @@\n-  GlyphID                       firstGlyphIndex;\n-  GlyphID                       lastGlyphIndex;\n+  HBGlyphID                     firstGlyphIndex;\n+  HBGlyphID                     lastGlyphIndex;\n@@ -233,1 +515,1 @@\n-  DEFINE_SIZE_STATIC(8);\n+  DEFINE_SIZE_STATIC (8);\n@@ -246,0 +528,73 @@\n+  void\n+  build_lookup (hb_subset_context_t *c, cblc_bitmap_size_subset_context_t *bitmap_size_context,\n+                hb_vector_t<hb_pair_t<hb_codepoint_t,\n+                const IndexSubtableRecord*>> *lookup \/* OUT *\/) const\n+  {\n+    bool start_glyph_is_set = false;\n+    for (hb_codepoint_t new_gid = 0; new_gid < c->plan->num_output_glyphs (); new_gid++)\n+    {\n+      hb_codepoint_t old_gid;\n+      if (unlikely (!c->plan->old_gid_for_new_gid (new_gid, &old_gid))) continue;\n+\n+      const IndexSubtableRecord* record = find_table (old_gid, bitmap_size_context->num_tables);\n+      if (unlikely (!record)) continue;\n+\n+      \/\/ Don't add gaps to the lookup. The best way to determine if a glyph is a\n+      \/\/ gap is that it has no image data.\n+      unsigned int offset, length, format;\n+      if (unlikely (!record->get_image_data (old_gid, this, &offset, &length, &format))) continue;\n+\n+      lookup->push (hb_pair_t<hb_codepoint_t, const IndexSubtableRecord*> (new_gid, record));\n+\n+      if (!start_glyph_is_set)\n+      {\n+        bitmap_size_context->start_glyph = new_gid;\n+        start_glyph_is_set = true;\n+      }\n+\n+      bitmap_size_context->end_glyph = new_gid;\n+    }\n+  }\n+\n+  bool\n+  subset (hb_subset_context_t *c,\n+          cblc_bitmap_size_subset_context_t *bitmap_size_context) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    auto *dst = c->serializer->start_embed<IndexSubtableArray> ();\n+    if (unlikely (!dst)) return_trace (false);\n+\n+    hb_vector_t<hb_pair_t<hb_codepoint_t, const IndexSubtableRecord*>> lookup;\n+    build_lookup (c, bitmap_size_context, &lookup);\n+    if (unlikely (lookup.in_error ()))\n+      return c->serializer->check_success (false);\n+\n+    bitmap_size_context->size = 0;\n+    bitmap_size_context->num_tables = 0;\n+    hb_vector_t<IndexSubtableRecord> records;\n+    for (unsigned int start = 0; start < lookup.length;)\n+    {\n+      if (unlikely (!lookup[start].second->add_new_record (c, bitmap_size_context, &lookup, this, &start, &records)))\n+      {\n+        \/\/ Discard any leftover pushes to the serializer from successful records.\n+        for (unsigned int i = 0; i < records.length; i++)\n+          c->serializer->pop_discard ();\n+        return_trace (false);\n+      }\n+    }\n+\n+    \/* Workaround to ensure offset ordering is from least to greatest when\n+     * resolving links. *\/\n+    hb_vector_t<hb_serialize_context_t::objidx_t> objidxs;\n+    for (unsigned int i = 0; i < records.length; i++)\n+      objidxs.push (c->serializer->pop_pack ());\n+    for (unsigned int i = 0; i < records.length; i++)\n+    {\n+      IndexSubtableRecord* record = c->serializer->embed (records[i]);\n+      if (unlikely (!record)) return_trace (false);\n+      c->serializer->add_link (record->offsetToSubtable, objidxs[records.length - 1 - i]);\n+    }\n+    return_trace (true);\n+  }\n+\n@@ -277,3 +632,2 @@\n-  const IndexSubtableRecord *find_table (hb_codepoint_t glyph,\n-                                         const void *base,\n-                                         const void **out_base) const\n+  const IndexSubtableRecord *\n+  find_table (hb_codepoint_t glyph, const void *base, const void **out_base) const\n@@ -285,0 +639,35 @@\n+  bool\n+  subset (hb_subset_context_t *c, const void *base,\n+          const char *cbdt, unsigned int cbdt_length,\n+          hb_vector_t<char> *cbdt_prime \/* INOUT *\/) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out_table = c->serializer->embed (this);\n+    if (unlikely (!out_table)) return_trace (false);\n+\n+    cblc_bitmap_size_subset_context_t bitmap_size_context;\n+    bitmap_size_context.cbdt = cbdt;\n+    bitmap_size_context.cbdt_length = cbdt_length;\n+    bitmap_size_context.cbdt_prime = cbdt_prime;\n+    bitmap_size_context.size = indexTablesSize;\n+    bitmap_size_context.num_tables = numberOfIndexSubtables;\n+    bitmap_size_context.start_glyph = 1;\n+    bitmap_size_context.end_glyph = 0;\n+\n+    if (!out_table->indexSubtableArrayOffset.serialize_subset (c,\n+                                                               indexSubtableArrayOffset,\n+                                                               base,\n+                                                               &bitmap_size_context))\n+      return_trace (false);\n+    if (!bitmap_size_context.size ||\n+        !bitmap_size_context.num_tables ||\n+        bitmap_size_context.start_glyph > bitmap_size_context.end_glyph)\n+      return_trace (false);\n+\n+    out_table->indexTablesSize = bitmap_size_context.size;\n+    out_table->numberOfIndexSubtables = bitmap_size_context.num_tables;\n+    out_table->startGlyphIndex = bitmap_size_context.start_glyph;\n+    out_table->endGlyphIndex = bitmap_size_context.end_glyph;\n+    return_trace (true);\n+  }\n+\n@@ -293,2 +682,2 @@\n-  GlyphID               startGlyphIndex;\n-  GlyphID               endGlyphIndex;\n+  HBGlyphID             startGlyphIndex;\n+  HBGlyphID             endGlyphIndex;\n@@ -300,1 +689,1 @@\n-  DEFINE_SIZE_STATIC(48);\n+  DEFINE_SIZE_STATIC (48);\n@@ -313,1 +702,1 @@\n-  DEFINE_SIZE_ARRAY(9, data);\n+  DEFINE_SIZE_ARRAY (9, data);\n@@ -321,1 +710,1 @@\n-  DEFINE_SIZE_ARRAY(12, data);\n+  DEFINE_SIZE_ARRAY (12, data);\n@@ -328,1 +717,1 @@\n-  DEFINE_SIZE_ARRAY(4, data);\n+  DEFINE_SIZE_ARRAY (4, data);\n@@ -345,0 +734,38 @@\n+  static bool\n+  sink_cbdt (hb_subset_context_t *c, hb_vector_t<char>* cbdt_prime)\n+  {\n+    hb_blob_t *cbdt_prime_blob = hb_blob_create (cbdt_prime->arrayZ,\n+                                                 cbdt_prime->length,\n+                                                 HB_MEMORY_MODE_WRITABLE,\n+                                                 cbdt_prime->arrayZ,\n+                                                 free);\n+    cbdt_prime->init ();  \/\/ Leak arrayZ to the blob.\n+    bool ret = c->plan->add_table (HB_OT_TAG_CBDT, cbdt_prime_blob);\n+    hb_blob_destroy (cbdt_prime_blob);\n+    return ret;\n+  }\n+\n+  bool\n+  subset_size_table (hb_subset_context_t *c, const BitmapSizeTable& table,\n+                     const char *cbdt \/* IN *\/, unsigned int cbdt_length,\n+                     CBLC *cblc_prime \/* INOUT *\/, hb_vector_t<char> *cbdt_prime \/* INOUT *\/) const\n+  {\n+    TRACE_SUBSET (this);\n+    cblc_prime->sizeTables.len++;\n+\n+    auto snap = c->serializer->snapshot ();\n+    auto cbdt_prime_len = cbdt_prime->length;\n+\n+    if (!table.subset (c, this, cbdt, cbdt_length, cbdt_prime))\n+    {\n+      cblc_prime->sizeTables.len--;\n+      c->serializer->revert (snap);\n+      cbdt_prime->shrink (cbdt_prime_len);\n+      return_trace (false);\n+    }\n+    return_trace (true);\n+  }\n+\n+  \/\/ Implemented in cc file as it depends on definition of CBDT.\n+  HB_INTERNAL bool subset (hb_subset_context_t *c) const;\n+\n@@ -350,1 +777,1 @@\n-      return Null(BitmapSizeTable);\n+      return Null (BitmapSizeTable);\n@@ -352,1 +779,1 @@\n-    unsigned int requested_ppem = MAX (font->x_ppem, font->y_ppem);\n+    unsigned int requested_ppem = hb_max (font->x_ppem, font->y_ppem);\n@@ -356,1 +783,1 @@\n-    unsigned int best_ppem = MAX (sizeTables[0].ppemX, sizeTables[0].ppemY);\n+    unsigned int best_ppem = hb_max (sizeTables[0].ppemX, sizeTables[0].ppemY);\n@@ -360,1 +787,1 @@\n-      unsigned int ppem = MAX (sizeTables[i].ppemX, sizeTables[i].ppemY);\n+      unsigned int ppem = hb_max (sizeTables[i].ppemX, sizeTables[i].ppemY);\n@@ -376,1 +803,1 @@\n-  DEFINE_SIZE_ARRAY(8, sizeTables);\n+  DEFINE_SIZE_ARRAY (8, sizeTables);\n@@ -387,2 +814,2 @@\n-      cblc = hb_sanitize_context_t().reference_table<CBLC> (face);\n-      cbdt = hb_sanitize_context_t().reference_table<CBDT> (face);\n+      cblc = hb_sanitize_context_t ().reference_table<CBLC> (face);\n+      cbdt = hb_sanitize_context_t ().reference_table<CBDT> (face);\n@@ -399,2 +826,2 @@\n-    bool get_extents (hb_font_t *font, hb_codepoint_t glyph,\n-                      hb_glyph_extents_t *extents) const\n+    bool\n+    get_extents (hb_font_t *font, hb_codepoint_t glyph, hb_glyph_extents_t *extents) const\n@@ -415,0 +842,5 @@\n+      unsigned int cbdt_len = cbdt.get_length ();\n+      if (unlikely (image_offset > cbdt_len || cbdt_len - image_offset < image_length))\n+        return false;\n+\n+      switch (image_format)\n@@ -416,2 +848,2 @@\n-        unsigned int cbdt_len = cbdt.get_length ();\n-        if (unlikely (image_offset > cbdt_len || cbdt_len - image_offset < image_length))\n+      case 17: {\n+        if (unlikely (image_length < GlyphBitmapDataFormat17::min_size))\n@@ -419,23 +851,12 @@\n-\n-        switch (image_format)\n-        {\n-          case 17: {\n-            if (unlikely (image_length < GlyphBitmapDataFormat17::min_size))\n-              return false;\n-            const GlyphBitmapDataFormat17& glyphFormat17 =\n-                StructAtOffset<GlyphBitmapDataFormat17> (this->cbdt, image_offset);\n-            glyphFormat17.glyphMetrics.get_extents (extents);\n-            break;\n-          }\n-          case 18: {\n-            if (unlikely (image_length < GlyphBitmapDataFormat18::min_size))\n-              return false;\n-            const GlyphBitmapDataFormat18& glyphFormat18 =\n-                StructAtOffset<GlyphBitmapDataFormat18> (this->cbdt, image_offset);\n-            glyphFormat18.glyphMetrics.get_extents (extents);\n-            break;\n-          }\n-          default:\n-            \/\/ TODO: Support other image formats.\n-            return false;\n-        }\n+        auto &glyphFormat17 = StructAtOffset<GlyphBitmapDataFormat17> (this->cbdt, image_offset);\n+        glyphFormat17.glyphMetrics.get_extents (font, extents);\n+        break;\n+      }\n+      case 18: {\n+        if (unlikely (image_length < GlyphBitmapDataFormat18::min_size))\n+          return false;\n+        auto &glyphFormat18 = StructAtOffset<GlyphBitmapDataFormat18> (this->cbdt, image_offset);\n+        glyphFormat18.glyphMetrics.get_extents (font, extents);\n+        break;\n+      }\n+      default: return false; \/* TODO: Support other image formats. *\/\n@@ -445,6 +866,6 @@\n-      double x_scale = upem \/ (double) strike.ppemX;\n-      double y_scale = upem \/ (double) strike.ppemY;\n-      extents->x_bearing = round (extents->x_bearing * x_scale);\n-      extents->y_bearing = round (extents->y_bearing * y_scale);\n-      extents->width = round (extents->width * x_scale);\n-      extents->height = round (extents->height * y_scale);\n+      float x_scale = upem \/ (float) strike.ppemX;\n+      float y_scale = upem \/ (float) strike.ppemY;\n+      extents->x_bearing = roundf (extents->x_bearing * x_scale);\n+      extents->y_bearing = roundf (extents->y_bearing * y_scale);\n+      extents->width = roundf (extents->width * x_scale);\n+      extents->height = roundf (extents->height * y_scale);\n@@ -455,2 +876,2 @@\n-    hb_blob_t* reference_png (hb_font_t      *font,\n-                                     hb_codepoint_t  glyph) const\n+    hb_blob_t*\n+    reference_png (hb_font_t *font, hb_codepoint_t glyph) const\n@@ -468,0 +889,7 @@\n+      unsigned int cbdt_len = cbdt.get_length ();\n+      if (unlikely (image_offset > cbdt_len || cbdt_len - image_offset < image_length))\n+        return hb_blob_get_empty ();\n+\n+      switch (image_format)\n+      {\n+      case 17:\n@@ -469,2 +897,1 @@\n-        unsigned int cbdt_len = cbdt.get_length ();\n-        if (unlikely (image_offset > cbdt_len || cbdt_len - image_offset < image_length))\n+        if (unlikely (image_length < GlyphBitmapDataFormat17::min_size))\n@@ -472,31 +899,24 @@\n-\n-        switch (image_format)\n-        {\n-          case 17: {\n-            if (unlikely (image_length < GlyphBitmapDataFormat17::min_size))\n-              return hb_blob_get_empty ();\n-            const GlyphBitmapDataFormat17& glyphFormat17 =\n-              StructAtOffset<GlyphBitmapDataFormat17> (this->cbdt, image_offset);\n-            return hb_blob_create_sub_blob (cbdt.get_blob (),\n-                                            image_offset + GlyphBitmapDataFormat17::min_size,\n-                                            glyphFormat17.data.len);\n-          }\n-          case 18: {\n-            if (unlikely (image_length < GlyphBitmapDataFormat18::min_size))\n-              return hb_blob_get_empty ();\n-            const GlyphBitmapDataFormat18& glyphFormat18 =\n-              StructAtOffset<GlyphBitmapDataFormat18> (this->cbdt, image_offset);\n-            return hb_blob_create_sub_blob (cbdt.get_blob (),\n-                                            image_offset + GlyphBitmapDataFormat18::min_size,\n-                                            glyphFormat18.data.len);\n-          }\n-          case 19: {\n-            if (unlikely (image_length < GlyphBitmapDataFormat19::min_size))\n-              return hb_blob_get_empty ();\n-            const GlyphBitmapDataFormat19& glyphFormat19 =\n-              StructAtOffset<GlyphBitmapDataFormat19> (this->cbdt, image_offset);\n-            return hb_blob_create_sub_blob (cbdt.get_blob (),\n-                                            image_offset + GlyphBitmapDataFormat19::min_size,\n-                                            glyphFormat19.data.len);\n-          }\n-        }\n+        auto &glyphFormat17 = StructAtOffset<GlyphBitmapDataFormat17> (this->cbdt, image_offset);\n+        return hb_blob_create_sub_blob (cbdt.get_blob (),\n+                                        image_offset + GlyphBitmapDataFormat17::min_size,\n+                                        glyphFormat17.data.len);\n+      }\n+      case 18:\n+      {\n+        if (unlikely (image_length < GlyphBitmapDataFormat18::min_size))\n+          return hb_blob_get_empty ();\n+        auto &glyphFormat18 = StructAtOffset<GlyphBitmapDataFormat18> (this->cbdt, image_offset);\n+        return hb_blob_create_sub_blob (cbdt.get_blob (),\n+                                        image_offset + GlyphBitmapDataFormat18::min_size,\n+                                        glyphFormat18.data.len);\n+      }\n+      case 19:\n+      {\n+        if (unlikely (image_length < GlyphBitmapDataFormat19::min_size))\n+          return hb_blob_get_empty ();\n+        auto &glyphFormat19 = StructAtOffset<GlyphBitmapDataFormat19> (this->cbdt, image_offset);\n+        return hb_blob_create_sub_blob (cbdt.get_blob (),\n+                                        image_offset + GlyphBitmapDataFormat19::min_size,\n+                                        glyphFormat19.data.len);\n+      }\n+      default: return hb_blob_get_empty (); \/* TODO: Support other image formats. *\/\n@@ -504,2 +924,0 @@\n-\n-      return hb_blob_get_empty ();\n@@ -528,1 +946,1 @@\n-  DEFINE_SIZE_ARRAY(4, dataZ);\n+  DEFINE_SIZE_ARRAY (4, dataZ);\n@@ -531,0 +949,32 @@\n+inline bool\n+CBLC::subset (hb_subset_context_t *c) const\n+{\n+  TRACE_SUBSET (this);\n+\n+  auto *cblc_prime = c->serializer->start_embed<CBLC> ();\n+\n+  \/\/ Use a vector as a secondary buffer as the tables need to be built in parallel.\n+  hb_vector_t<char> cbdt_prime;\n+\n+  if (unlikely (!cblc_prime)) return_trace (false);\n+  if (unlikely (!c->serializer->extend_min (cblc_prime))) return_trace (false);\n+  cblc_prime->version = version;\n+\n+  hb_blob_t* cbdt_blob = hb_sanitize_context_t ().reference_table<CBDT> (c->plan->source);\n+  unsigned int cbdt_length;\n+  CBDT* cbdt = (CBDT *) hb_blob_get_data (cbdt_blob, &cbdt_length);\n+  if (unlikely (cbdt_length < CBDT::min_size))\n+  {\n+    hb_blob_destroy (cbdt_blob);\n+    return_trace (false);\n+  }\n+  _copy_data_to_cbdt (&cbdt_prime, cbdt, CBDT::min_size);\n+\n+  for (const BitmapSizeTable& table : + sizeTables.iter ())\n+    subset_size_table (c, table, (const char *) cbdt, cbdt_length, cblc_prime, &cbdt_prime);\n+\n+  hb_blob_destroy (cbdt_blob);\n+\n+  return_trace (CBLC::sink_cbdt (c, &cbdt_prime));\n+}\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-color-cbdt-table.hh","additions":562,"deletions":112,"binary":false,"changes":674,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright © 2020  Google, Inc.\n@@ -23,0 +24,2 @@\n+ *\n+ * Google Author(s): Calder Kitagawa\n@@ -42,0 +45,2 @@\n+  operator hb_ot_color_layer_t () const { return {glyphId, colorIdx}; }\n+\n@@ -49,1 +54,1 @@\n-  GlyphID       glyphId;        \/* Glyph ID of layer glyph *\/\n+  HBGlyphID     glyphId;        \/* Glyph ID of layer glyph *\/\n@@ -76,1 +81,1 @@\n-  GlyphID       glyphId;        \/* Glyph ID of reference glyph *\/\n+  HBGlyphID     glyphId;        \/* Glyph ID of reference glyph *\/\n@@ -101,1 +106,1 @@\n-    hb_array_t<const LayerRecord> all_layers ((this+layersZ).arrayZ, numLayers);\n+    hb_array_t<const LayerRecord> all_layers = (this+layersZ).as_array (numLayers);\n@@ -106,7 +111,3 @@\n-      hb_array_t<const LayerRecord> segment_layers = glyph_layers.sub_array (start_offset, *count);\n-      *count = segment_layers.length;\n-      for (unsigned int i = 0; i < segment_layers.length; i++)\n-      {\n-        layers[i].glyph = segment_layers.arrayZ[i].glyphId;\n-        layers[i].color_index = segment_layers.arrayZ[i].colorIdx;\n-      }\n+      + glyph_layers.sub_array (start_offset, count)\n+      | hb_sink (hb_array (layers, *count))\n+      ;\n@@ -117,0 +118,32 @@\n+  struct accelerator_t\n+  {\n+    accelerator_t () {}\n+    ~accelerator_t () { fini (); }\n+\n+    void init (hb_face_t *face)\n+    { colr = hb_sanitize_context_t ().reference_table<COLR> (face); }\n+\n+    void fini () { this->colr.destroy (); }\n+\n+    bool is_valid () { return colr.get_blob ()->length; }\n+\n+    void closure_glyphs (hb_codepoint_t glyph,\n+                         hb_set_t *related_ids \/* OUT *\/) const\n+    { colr->closure_glyphs (glyph, related_ids); }\n+\n+    private:\n+    hb_blob_ptr_t<COLR> colr;\n+  };\n+\n+  void closure_glyphs (hb_codepoint_t glyph,\n+                       hb_set_t *related_ids \/* OUT *\/) const\n+  {\n+    const BaseGlyphRecord *record = get_base_glyph_record (glyph);\n+    if (!record) return;\n+\n+    auto glyph_layers = (this+layersZ).as_array (numLayers).sub_array (record->firstLayerIdx,\n+                                                                       record->numLayers);\n+    if (!glyph_layers.length) return;\n+    related_ids->add_array (&glyph_layers[0].glyphId, glyph_layers.length, LayerRecord::min_size);\n+  }\n+\n@@ -125,0 +158,105 @@\n+  template<typename BaseIterator, typename LayerIterator,\n+           hb_requires (hb_is_iterator (BaseIterator)),\n+           hb_requires (hb_is_iterator (LayerIterator))>\n+  bool serialize (hb_serialize_context_t *c,\n+                  unsigned version,\n+                  BaseIterator base_it,\n+                  LayerIterator layer_it)\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (unlikely (base_it.len () != layer_it.len ()))\n+      return_trace (false);\n+\n+    if (unlikely (!c->extend_min (this))) return_trace (false);\n+    this->version = version;\n+    numLayers = 0;\n+    numBaseGlyphs = base_it.len ();\n+    baseGlyphsZ = COLR::min_size;\n+    layersZ = COLR::min_size + numBaseGlyphs * BaseGlyphRecord::min_size;\n+\n+    for (const hb_item_type<BaseIterator> _ : + base_it.iter ())\n+    {\n+      auto* record = c->embed (_);\n+      if (unlikely (!record)) return_trace (false);\n+      record->firstLayerIdx = numLayers;\n+      numLayers += record->numLayers;\n+    }\n+\n+    for (const hb_item_type<LayerIterator>& _ : + layer_it.iter ())\n+      _.as_array ().copy (c);\n+\n+    return_trace (true);\n+  }\n+\n+  const BaseGlyphRecord* get_base_glyph_record (hb_codepoint_t gid) const\n+  {\n+    if ((unsigned int) gid == 0) \/\/ Ignore notdef.\n+      return nullptr;\n+    const BaseGlyphRecord* record = &(this+baseGlyphsZ).bsearch (numBaseGlyphs, (unsigned int) gid);\n+    if ((record && (hb_codepoint_t) record->glyphId != gid))\n+      record = nullptr;\n+    return record;\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    const hb_map_t &reverse_glyph_map = *c->plan->reverse_glyph_map;\n+\n+    auto base_it =\n+    + hb_range (c->plan->num_output_glyphs ())\n+    | hb_map_retains_sorting ([&](hb_codepoint_t new_gid)\n+                              {\n+                                hb_codepoint_t old_gid = reverse_glyph_map.get (new_gid);\n+\n+                                const BaseGlyphRecord* old_record = get_base_glyph_record (old_gid);\n+                                if (unlikely (!old_record))\n+                                  return hb_pair_t<bool, BaseGlyphRecord> (false, Null (BaseGlyphRecord));\n+\n+                                BaseGlyphRecord new_record;\n+                                new_record.glyphId = new_gid;\n+                                new_record.numLayers = old_record->numLayers;\n+                                return hb_pair_t<bool, BaseGlyphRecord> (true, new_record);\n+                              })\n+    | hb_filter (hb_first)\n+    | hb_map_retains_sorting (hb_second)\n+    ;\n+\n+    auto layer_it =\n+    + hb_range (c->plan->num_output_glyphs ())\n+    | hb_map (reverse_glyph_map)\n+    | hb_map_retains_sorting ([&](hb_codepoint_t old_gid)\n+                              {\n+                                const BaseGlyphRecord* old_record = get_base_glyph_record (old_gid);\n+                                hb_vector_t<LayerRecord> out_layers;\n+\n+                                if (unlikely (!old_record ||\n+                                              old_record->firstLayerIdx >= numLayers ||\n+                                              old_record->firstLayerIdx + old_record->numLayers > numLayers))\n+                                  return hb_pair_t<bool, hb_vector_t<LayerRecord>> (false, out_layers);\n+\n+                                auto layers = (this+layersZ).as_array (numLayers).sub_array (old_record->firstLayerIdx,\n+                                                                                             old_record->numLayers);\n+                                out_layers.resize (layers.length);\n+                                for (unsigned int i = 0; i < layers.length; i++) {\n+                                  out_layers[i] = layers[i];\n+                                  hb_codepoint_t new_gid = 0;\n+                                  if (unlikely (!c->plan->new_gid_for_old_gid (out_layers[i].glyphId, &new_gid)))\n+                                    return hb_pair_t<bool, hb_vector_t<LayerRecord>> (false, out_layers);\n+                                  out_layers[i].glyphId = new_gid;\n+                                }\n+\n+                                return hb_pair_t<bool, hb_vector_t<LayerRecord>> (true, out_layers);\n+                              })\n+    | hb_filter (hb_first)\n+    | hb_map_retains_sorting (hb_second)\n+    ;\n+\n+    if (unlikely (!base_it || !layer_it || base_it.len () != layer_it.len ()))\n+      return_trace (false);\n+\n+    COLR *colr_prime = c->serializer->start_embed<COLR> ();\n+    return_trace (colr_prime->serialize (c->serializer, version, base_it, layer_it));\n+  }\n+\n@@ -128,1 +266,1 @@\n-  LNNOffsetTo<SortedUnsizedArrayOf<BaseGlyphRecord> >\n+  LNNOffsetTo<SortedUnsizedArrayOf<BaseGlyphRecord>>\n@@ -130,1 +268,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<LayerRecord> >\n+  LNNOffsetTo<UnsizedArrayOf<LayerRecord>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-color-colr-table.hh","additions":150,"deletions":12,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<HBUINT32> >\n+  LNNOffsetTo<UnsizedArrayOf<HBUINT32>>\n@@ -94,1 +94,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<NameID> >\n+  LNNOffsetTo<UnsizedArrayOf<NameID>>\n@@ -98,1 +98,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<NameID> >\n+  LNNOffsetTo<UnsizedArrayOf<NameID>>\n@@ -118,1 +118,1 @@\n-  unsigned int get_color_count () const   { return numColors; }\n+  unsigned int   get_color_count () const { return numColors; }\n@@ -145,6 +145,3 @@\n-      hb_array_t<const BGRAColor> segment_colors = palette_colors.sub_array (start_offset, *color_count);\n-      \/* Always return numColors colors per palette even if it has out-of-bounds start index. *\/\n-      unsigned int count = MIN<unsigned int> (MAX<int> (numColors - start_offset, 0), *color_count);\n-      *color_count = count;\n-      for (unsigned int i = 0; i < count; i++)\n-        colors[i] = segment_colors[i]; \/* Bound-checked read. *\/\n+      + palette_colors.sub_array (start_offset, color_count)\n+      | hb_sink (hb_array (colors, *color_count))\n+      ;\n@@ -158,1 +155,1 @@\n-    if (version == 0) return Null(CPALV1Tail);\n+    if (version == 0) return Null (CPALV1Tail);\n@@ -179,1 +176,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<BGRAColor> >\n+  LNNOffsetTo<UnsizedArrayOf<BGRAColor>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-color-cpal-table.hh","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright © 2020  Google, Inc.\n@@ -23,0 +24,2 @@\n+ *\n+ * Google Author(s): Calder Kitagawa\n@@ -29,0 +32,1 @@\n+#include \"hb-ot-layout-common.hh\"\n@@ -43,0 +47,14 @@\n+  SBIXGlyph* copy (hb_serialize_context_t *c, unsigned int data_length) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    SBIXGlyph* new_glyph = c->start_embed<SBIXGlyph> ();\n+    if (unlikely (!new_glyph)) return_trace (nullptr);\n+    if (unlikely (!c->extend_min (new_glyph))) return_trace (nullptr);\n+\n+    new_glyph->xOffset = xOffset;\n+    new_glyph->yOffset = yOffset;\n+    new_glyph->graphicType = graphicType;\n+    data.copy (c, data_length);\n+    return_trace (new_glyph);\n+  }\n+\n@@ -65,0 +83,3 @@\n+  static unsigned int get_size (unsigned num_glyphs)\n+  { return min_size + num_glyphs * HBUINT32::static_size; }\n+\n@@ -119,0 +140,43 @@\n+  bool subset (hb_subset_context_t *c, unsigned int available_len) const\n+  {\n+    TRACE_SUBSET (this);\n+    unsigned int num_output_glyphs = c->plan->num_output_glyphs ();\n+\n+    auto* out = c->serializer->start_embed<SBIXStrike> ();\n+    if (unlikely (!out)) return_trace (false);\n+    auto snap = c->serializer->snapshot ();\n+    if (unlikely (!c->serializer->extend (*out, num_output_glyphs + 1))) return_trace (false);\n+    out->ppem = ppem;\n+    out->resolution = resolution;\n+    HBUINT32 head;\n+    head = get_size (num_output_glyphs + 1);\n+\n+    bool has_glyphs = false;\n+    for (unsigned new_gid = 0; new_gid < num_output_glyphs; new_gid++)\n+    {\n+      hb_codepoint_t old_gid;\n+      if (!c->plan->old_gid_for_new_gid (new_gid, &old_gid) ||\n+          unlikely (imageOffsetsZ[old_gid].is_null () ||\n+                    imageOffsetsZ[old_gid + 1].is_null () ||\n+                    imageOffsetsZ[old_gid + 1] <= imageOffsetsZ[old_gid] ||\n+                    imageOffsetsZ[old_gid + 1] - imageOffsetsZ[old_gid] <= SBIXGlyph::min_size) ||\n+                    (unsigned int) imageOffsetsZ[old_gid + 1] > available_len)\n+      {\n+        out->imageOffsetsZ[new_gid] = head;\n+        continue;\n+      }\n+      has_glyphs = true;\n+      unsigned int delta = imageOffsetsZ[old_gid + 1] - imageOffsetsZ[old_gid];\n+      unsigned int glyph_data_length = delta - SBIXGlyph::min_size;\n+      if (!(this+imageOffsetsZ[old_gid]).copy (c->serializer, glyph_data_length))\n+        return_trace (false);\n+      out->imageOffsetsZ[new_gid] = head;\n+      head += delta;\n+    }\n+    if (has_glyphs)\n+      out->imageOffsetsZ[num_output_glyphs] = head;\n+    else\n+      c->serializer->revert (snap);\n+    return_trace (has_glyphs);\n+  }\n+\n@@ -124,1 +188,1 @@\n-  UnsizedArrayOf<LOffsetTo<SBIXGlyph> >\n+  UnsizedArrayOf<LOffsetTo<SBIXGlyph>>\n@@ -128,1 +192,1 @@\n-  DEFINE_SIZE_STATIC (8);\n+  DEFINE_SIZE_ARRAY (4, imageOffsetsZ);\n@@ -143,1 +207,1 @@\n-      table = hb_sanitize_context_t().reference_table<sbix> (face);\n+      table = hb_sanitize_context_t ().reference_table<sbix> (face);\n@@ -176,1 +240,1 @@\n-        return Null(SBIXStrike);\n+        return Null (SBIXStrike);\n@@ -178,1 +242,1 @@\n-      unsigned int requested_ppem = MAX (font->x_ppem, font->y_ppem);\n+      unsigned int requested_ppem = hb_max (font->x_ppem, font->y_ppem);\n@@ -238,1 +302,1 @@\n-      extents->y_bearing = y_offset;\n+      extents->y_bearing = png.IHDR.height + y_offset;\n@@ -240,1 +304,1 @@\n-      extents->height    = png.IHDR.height;\n+      extents->height    = -1 * png.IHDR.height;\n@@ -245,5 +309,12 @@\n-        double scale = font->face->get_upem () \/ (double) strike_ppem;\n-        extents->x_bearing = round (extents->x_bearing * scale);\n-        extents->y_bearing = round (extents->y_bearing * scale);\n-        extents->width = round (extents->width * scale);\n-        extents->height = round (extents->height * scale);\n+        float scale = font->face->get_upem () \/ (float) strike_ppem;\n+        extents->x_bearing = font->em_scalef_x (extents->x_bearing * scale);\n+        extents->y_bearing = font->em_scalef_y (extents->y_bearing * scale);\n+        extents->width = font->em_scalef_x (extents->width * scale);\n+        extents->height = font->em_scalef_y (extents->height * scale);\n+      }\n+      else\n+      {\n+        extents->x_bearing = font->em_scale_x (extents->x_bearing);\n+        extents->y_bearing = font->em_scale_y (extents->y_bearing);\n+        extents->width = font->em_scale_x (extents->width);\n+        extents->height = font->em_scale_y (extents->height);\n@@ -271,0 +342,57 @@\n+  bool\n+  add_strike (hb_subset_context_t *c, unsigned i) const\n+  {\n+    if (strikes[i].is_null () || c->source_blob->length < (unsigned) strikes[i])\n+      return false;\n+\n+    return (this+strikes[i]).subset (c, c->source_blob->length - (unsigned) strikes[i]);\n+  }\n+\n+  bool serialize_strike_offsets (hb_subset_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    auto *out = c->serializer->start_embed<LOffsetLArrayOf<SBIXStrike>> ();\n+    if (unlikely (!out)) return_trace (false);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    hb_vector_t<LOffsetTo<SBIXStrike>*> new_strikes;\n+    hb_vector_t<hb_serialize_context_t::objidx_t> objidxs;\n+    for (int i = strikes.len - 1; i >= 0; --i)\n+    {\n+      auto* o = out->serialize_append (c->serializer);\n+      if (unlikely (!o)) return_trace (false);\n+      *o = 0;\n+      auto snap = c->serializer->snapshot ();\n+      c->serializer->push ();\n+      bool ret = add_strike (c, i);\n+      if (!ret)\n+      {\n+        c->serializer->pop_discard ();\n+        out->pop ();\n+        c->serializer->revert (snap);\n+      }\n+      else\n+      {\n+        objidxs.push (c->serializer->pop_pack ());\n+        new_strikes.push (o);\n+      }\n+    }\n+    for (unsigned int i = 0; i < new_strikes.length; ++i)\n+      c->serializer->add_link (*new_strikes[i], objidxs[new_strikes.length - 1 - i]);\n+\n+    return_trace (true);\n+  }\n+\n+  bool subset (hb_subset_context_t* c) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    sbix *sbix_prime = c->serializer->start_embed<sbix> ();\n+    if (unlikely (!sbix_prime)) return_trace (false);\n+    if (unlikely (!c->serializer->embed (this->version))) return_trace (false);\n+    if (unlikely (!c->serializer->embed (this->flags))) return_trace (false);\n+\n+    return_trace (serialize_strike_offsets (c));\n+  }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-color-sbix-table.hh","additions":140,"deletions":12,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<HBUINT8> >\n+  LNNOffsetTo<UnsizedArrayOf<HBUINT8>>\n@@ -83,1 +83,1 @@\n-    { table = hb_sanitize_context_t().reference_table<SVG> (face); }\n+    { table = hb_sanitize_context_t ().reference_table<SVG> (face); }\n@@ -110,1 +110,1 @@\n-  LOffsetTo<SortedArrayOf<SVGDocumentIndexEntry> >\n+  LOffsetTo<SortedArrayOf<SVGDocumentIndexEntry>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-color-svg-table.hh","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n-#include \"hb-open-type.hh\"\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_COLOR\n+\n+#include \"hb-ot.h\"\n+\n@@ -34,2 +39,0 @@\n-#include \"hb-ot-face.hh\"\n-#include \"hb-ot.h\"\n@@ -40,2 +43,0 @@\n-#include \"hb-ot-layout.hh\"\n-\n@@ -50,0 +51,2 @@\n+ *\n+ * HarfBuzz supports `COLR`\/`CPAL`, `sbix`, `CBDT`, and `SVG` color fonts.\n@@ -60,1 +63,3 @@\n- * @face: a font face.\n+ * @face: #hb_face_t to work upon\n+ *\n+ * Tests whether a face includes a `CPAL` color-palette table.\n@@ -62,1 +67,1 @@\n- * Returns: whether CPAL table is available.\n+ * Return value: true if data found, false otherwise\n@@ -74,1 +79,1 @@\n- * @face: a font face.\n+ * @face: #hb_face_t to work upon\n@@ -76,2 +81,3 @@\n- * Returns: the number of color palettes in @face, or zero if @face has\n- * no colors.\n+ * Fetches the number of color palettes in a face.\n+ *\n+ * Return value: the number of palettes found\n@@ -89,2 +95,5 @@\n- * @face:    a font face.\n- * @palette_index: the index of the color palette whose name is being requested.\n+ * @face: #hb_face_t to work upon\n+ * @palette_index: The index of the color palette\n+ *\n+ * Fetches the `name` table Name ID that provides display names for\n+ * a `CPAL` color palette.\n@@ -92,2 +101,2 @@\n- * Retrieves the name id of a color palette. For example, a color font can\n- * have themed palettes like \"Spring\", \"Summer\", \"Fall\", and \"Winter\".\n+ * Palette display names can be generic (e.g., \"Default\") or provide\n+ * specific, themed names (e.g., \"Spring\", \"Summer\", \"Fall\", and \"Winter\").\n@@ -95,1 +104,1 @@\n- * Returns: an identifier within @face's `name` table.\n+ * Return value: the Named ID found for the palette.\n@@ -109,2 +118,2 @@\n- * @face:        a font face.\n- * @color_index: palette entry index.\n+ * @face: #hb_face_t to work upon\n+ * @color_index: The index of the color\n@@ -112,1 +121,7 @@\n- * Returns: Name ID associated with a palette entry, e.g. eye color\n+ * Fetches the `name` table Name ID that provides display names for\n+ * the specificed color in a face's `CPAL` color palette.\n+ *\n+ * Display names can be generic (e.g., \"Background\") or specific\n+ * (e.g., \"Eye color\").\n+ *\n+ * Return value: the Name ID found for the color.\n@@ -125,2 +140,4 @@\n- * @face:          a font face\n- * @palette_index: the index of the color palette whose flags are being requested\n+ * @face: #hb_face_t to work upon\n+ * @palette_index: The index of the color palette\n+ *\n+ * Fetches the flags defined for a color palette.\n@@ -128,1 +145,1 @@\n- * Returns: the flags for the requested color palette.\n+ * Return value: the #hb_ot_color_palette_flags_t of the requested color palette\n@@ -141,19 +158,16 @@\n- * @face:         a font face.\n- * @palette_index:the index of the color palette whose colors\n- *                are being requested.\n- * @start_offset: the index of the first color being requested.\n- * @color_count:  (inout) (optional): on input, how many colors\n- *                can be maximally stored into the @colors array;\n- *                on output, how many colors were actually stored.\n- * @colors: (array length=color_count) (out) (optional):\n- *                an array of #hb_color_t records. After calling\n- *                this function, @colors will be filled with\n- *                the palette colors. If @colors is NULL, the function\n- *                will just return the number of total colors\n- *                without storing any actual colors; this can be used\n- *                for allocating a buffer of suitable size before calling\n- *                hb_ot_color_palette_get_colors() a second time.\n- *\n- * Retrieves the colors in a color palette.\n- *\n- * Returns: the total number of colors in the palette.\n+ * @face: #hb_face_t to work upon\n+ * @palette_index: the index of the color palette to query\n+ * @start_offset: offset of the first color to retrieve\n+ * @color_count: (inout) (optional): Input = the maximum number of colors to return;\n+ *               Output = the actual number of colors returned (may be zero)\n+ * @colors: (out) (array length=color_count) (nullable): The array of #hb_color_t records found\n+ *\n+ * Fetches a list of the colors in a color palette.\n+ *\n+ * After calling this function, @colors will be filled with the palette\n+ * colors. If @colors is NULL, the function will just return the number\n+ * of total colors without storing any actual colors; this can be used\n+ * for allocating a buffer of suitable size before calling\n+ * hb_ot_color_palette_get_colors() a second time.\n+ *\n+ * Return value: the total number of colors in the palette\n@@ -180,1 +194,3 @@\n- * @face: a font face.\n+ * @face: #hb_face_t to work upon\n+ *\n+ * Tests whether a face includes any `COLR` color layers.\n@@ -182,1 +198,1 @@\n- * Returns: whether COLR table is available.\n+ * Return value: true if data found, false otherwise\n@@ -194,6 +210,9 @@\n- * @face:         a font face.\n- * @glyph:        a layered color glyph id.\n- * @start_offset: starting offset of layers.\n- * @count:  (inout) (optional): gets number of layers available to be written on buffer\n- *                              and returns number of written layers.\n- * @layers: (array length=count) (out) (optional): layers buffer to buffer.\n+ * @face: #hb_face_t to work upon\n+ * @glyph: The glyph index to query\n+ * @start_offset: offset of the first layer to retrieve\n+ * @layer_count: (inout) (optional): Input = the maximum number of layers to return;\n+ *         Output = the actual number of layers returned (may be zero)\n+ * @layers: (out) (array length=layer_count) (nullable): The array of layers found\n+ *\n+ * Fetches a list of all color layers for the specified glyph index in the specified\n+ * face. The list returned will begin at the offset provided.\n@@ -201,1 +220,1 @@\n- * Returns: Total number of layers a layered color glyph have.\n+ * Return value: Total number of layers available for the glyph index queried\n@@ -209,1 +228,1 @@\n-                              unsigned int        *count, \/* IN\/OUT.  May be NULL. *\/\n+                              unsigned int        *layer_count, \/* IN\/OUT.  May be NULL. *\/\n@@ -212,1 +231,1 @@\n-  return face->table.COLR->get_glyph_layers (glyph, start_offset, count, layers);\n+  return face->table.COLR->get_glyph_layers (glyph, start_offset, layer_count, layers);\n@@ -222,1 +241,1 @@\n- * @face: a font face.\n+ * @face: #hb_face_t to work upon.\n@@ -224,1 +243,1 @@\n- * Check whether @face has SVG glyph images.\n+ * Tests whether a face includes any `SVG` glyph images.\n@@ -226,1 +245,1 @@\n- * Returns true if available, false otherwise.\n+ * Return value: true if data found, false otherwise.\n@@ -238,2 +257,2 @@\n- * @face:  a font face.\n- * @glyph: a svg glyph index.\n+ * @face: #hb_face_t to work upon\n+ * @glyph: a svg glyph index\n@@ -241,1 +260,1 @@\n- * Get SVG document for a glyph. The blob may be either plain text or gzip-encoded.\n+ * Fetches the SVG document for a glyph. The blob may be either plain text or gzip-encoded.\n@@ -243,1 +262,1 @@\n- * Returns: (transfer full): respective svg blob of the glyph, if available.\n+ * Return value: (transfer full): An #hb_blob_t containing the SVG document of the glyph, if available\n@@ -260,1 +279,1 @@\n- * @face: a font face.\n+ * @face: #hb_face_t to work upon\n@@ -262,1 +281,1 @@\n- * Check whether @face has PNG glyph images (either CBDT or sbix tables).\n+ * Tests whether a face has PNG glyph images (either in `CBDT` or `sbix` tables).\n@@ -264,1 +283,1 @@\n- * Returns true if available, false otherwise.\n+ * Return value: true if data found, false otherwise\n@@ -276,4 +295,2 @@\n- * @font:  a font object, not face. upem should be set on\n- *         that font object if one wants to get optimal png blob, otherwise\n- *         return the biggest one\n- * @glyph: a glyph index.\n+ * @font: #hb_font_t to work upon\n+ * @glyph: a glyph index\n@@ -281,1 +298,3 @@\n- * Get PNG image for a glyph.\n+ * Fetches the PNG image for a glyph. This function takes a font object, not a face object,\n+ * as input. To get an optimally sized PNG blob, the UPEM value must be set on the @font\n+ * object. If UPEM is unset, the blob returned will be the largest PNG available.\n@@ -283,1 +302,1 @@\n- * Returns: (transfer full): respective PNG blob of the glyph, if available.\n+ * Return value: (transfer full): An #hb_blob_t containing the PNG image for the glyph, if available\n@@ -300,0 +319,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-color.cc","additions":89,"deletions":67,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * @HB_OT_COLOR_PALETTE_FLAG_DEFAULT: default indicating that there is nothing special\n+ * @HB_OT_COLOR_PALETTE_FLAG_DEFAULT: Default indicating that there is nothing special\n@@ -64,1 +64,1 @@\n- * @HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_LIGHT_BACKGROUND: flag indicating that the color\n+ * @HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_LIGHT_BACKGROUND: Flag indicating that the color\n@@ -66,1 +66,1 @@\n- * @HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_DARK_BACKGROUND: flag indicating that the color\n+ * @HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_DARK_BACKGROUND: Flag indicating that the color\n@@ -113,1 +113,1 @@\n-                              unsigned int        *count, \/* IN\/OUT.  May be NULL. *\/\n+                              unsigned int        *layer_count, \/* IN\/OUT.  May be NULL. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-color.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,0 +43,4 @@\n+\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1734 *\/\n+#define HB_MATH_GLYPH_PART_FLAG_EXTENDER HB_OT_MATH_GLYPH_PART_FLAG_EXTENDER\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-deprecated.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright © 2007,2008,2009  Red Hat, Inc.\n+ * Copyright © 2012,2013  Google, Inc.\n+ * Copyright © 2019, Facebook Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Red Hat Author(s): Behdad Esfahbod\n+ * Google Author(s): Behdad Esfahbod\n+ * Facebook Author(s): Behdad Esfahbod\n+ *\/\n+\n+#ifndef HB_OT_FACE_TABLE_LIST_HH\n+#define HB_OT_FACE_TABLE_LIST_HH\n+#endif \/* HB_OT_FACE_TABLE_LIST_HH *\/ \/* Dummy header guards *\/\n+\n+#ifndef HB_OT_ACCELERATOR\n+#define HB_OT_ACCELERATOR(Namespace, Type) HB_OT_TABLE (Namespace, Type)\n+#define _HB_OT_ACCELERATOR_UNDEF\n+#endif\n+\n+\n+\/* This lists font tables that the hb_face_t will contain and lazily\n+ * load.  Don't add a table unless it's used though.  This is not\n+ * exactly free. *\/\n+\n+\/* v--- Add new tables in the right place here. *\/\n+\n+\n+\/* OpenType fundamentals. *\/\n+HB_OT_TABLE (OT, head)\n+#if !defined(HB_NO_FACE_COLLECT_UNICODES) || !defined(HB_NO_OT_FONT)\n+HB_OT_ACCELERATOR (OT, cmap)\n+#endif\n+HB_OT_TABLE (OT, hhea)\n+HB_OT_ACCELERATOR (OT, hmtx)\n+HB_OT_TABLE (OT, OS2)\n+#if !defined(HB_NO_OT_FONT_GLYPH_NAMES) || !defined(HB_NO_METRICS) || !defined(HB_NO_STYLE)\n+HB_OT_ACCELERATOR (OT, post)\n+#endif\n+#ifndef HB_NO_NAME\n+HB_OT_ACCELERATOR (OT, name)\n+#endif\n+#ifndef HB_NO_STYLE\n+HB_OT_TABLE (OT, STAT)\n+#endif\n+#ifndef HB_NO_META\n+HB_OT_ACCELERATOR (OT, meta)\n+#endif\n+\n+\/* Vertical layout. *\/\n+HB_OT_TABLE (OT, vhea)\n+HB_OT_ACCELERATOR (OT, vmtx)\n+\n+\/* TrueType outlines. *\/\n+HB_OT_ACCELERATOR (OT, glyf)\n+\n+\/* CFF outlines. *\/\n+#ifndef HB_NO_CFF\n+HB_OT_ACCELERATOR (OT, cff1)\n+HB_OT_ACCELERATOR (OT, cff2)\n+HB_OT_TABLE (OT, VORG)\n+#endif\n+\n+\/* OpenType variations. *\/\n+#ifndef HB_NO_VAR\n+HB_OT_TABLE (OT, fvar)\n+HB_OT_TABLE (OT, avar)\n+HB_OT_ACCELERATOR (OT, gvar)\n+HB_OT_TABLE (OT, MVAR)\n+#endif\n+\n+\/* Legacy kern. *\/\n+#ifndef HB_NO_OT_KERN\n+HB_OT_TABLE (OT, kern)\n+#endif\n+\n+\/* OpenType shaping. *\/\n+#ifndef HB_NO_OT_LAYOUT\n+HB_OT_ACCELERATOR (OT, GDEF)\n+HB_OT_ACCELERATOR (OT, GSUB)\n+HB_OT_ACCELERATOR (OT, GPOS)\n+\/\/HB_OT_TABLE (OT, JSTF)\n+#endif\n+\n+\/* OpenType baseline. *\/\n+#ifndef HB_NO_BASE\n+HB_OT_TABLE (OT, BASE)\n+#endif\n+\n+\/* AAT shaping. *\/\n+#ifndef HB_NO_AAT\n+HB_OT_TABLE (AAT, morx)\n+HB_OT_TABLE (AAT, mort)\n+HB_OT_TABLE (AAT, kerx)\n+HB_OT_TABLE (AAT, ankr)\n+HB_OT_TABLE (AAT, trak)\n+HB_OT_TABLE (AAT, ltag)\n+HB_OT_TABLE (AAT, feat)\n+\/\/ HB_OT_TABLE (AAT, opbd)\n+#endif\n+\n+\/* OpenType color fonts. *\/\n+#ifndef HB_NO_COLOR\n+HB_OT_TABLE (OT, COLR)\n+HB_OT_TABLE (OT, CPAL)\n+HB_OT_ACCELERATOR (OT, CBDT)\n+HB_OT_ACCELERATOR (OT, sbix)\n+HB_OT_ACCELERATOR (OT, SVG)\n+#endif\n+\n+\/* OpenType math. *\/\n+#ifndef HB_NO_MATH\n+HB_OT_TABLE (OT, MATH)\n+#endif\n+\n+\n+#ifdef _HB_OT_ACCELERATOR_UNDEF\n+#undef HB_OT_ACCELERATOR\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-face-table-list.hh","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"hb-ot-meta-table.hh\"\n@@ -49,3 +50,1 @@\n-#define HB_OT_ACCELERATOR(Namespace, Type) HB_OT_TABLE (Namespace, Type)\n-  HB_OT_TABLES\n-#undef HB_OT_ACCELERATOR\n+#include \"hb-ot-face-table-list.hh\"\n@@ -57,3 +56,1 @@\n-#define HB_OT_ACCELERATOR(Namespace, Type) HB_OT_TABLE (Namespace, Type)\n-  HB_OT_TABLES\n-#undef HB_OT_ACCELERATOR\n+#include \"hb-ot-face-table-list.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-face.cc","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,44 +41,0 @@\n-#define HB_OT_TABLES \\\n-    \/* OpenType fundamentals. *\/ \\\n-    HB_OT_TABLE(OT, head) \\\n-    HB_OT_ACCELERATOR(OT, cmap) \\\n-    HB_OT_ACCELERATOR(OT, hmtx) \\\n-    HB_OT_ACCELERATOR(OT, vmtx) \\\n-    HB_OT_ACCELERATOR(OT, post) \\\n-    HB_OT_TABLE(OT, kern) \\\n-    HB_OT_ACCELERATOR(OT, glyf) \\\n-    HB_OT_ACCELERATOR(OT, cff1) \\\n-    HB_OT_ACCELERATOR(OT, cff2) \\\n-    HB_OT_TABLE(OT, VORG) \\\n-    HB_OT_ACCELERATOR(OT, name) \\\n-    HB_OT_TABLE(OT, OS2) \\\n-    HB_OT_TABLE(OT, STAT) \\\n-    \/* OpenType shaping. *\/ \\\n-    HB_OT_ACCELERATOR(OT, GDEF) \\\n-    HB_OT_ACCELERATOR(OT, GSUB) \\\n-    HB_OT_ACCELERATOR(OT, GPOS) \\\n-    HB_OT_TABLE(OT, BASE) \\\n-    HB_OT_TABLE(OT, JSTF) \\\n-    \/* AAT shaping. *\/ \\\n-    HB_OT_TABLE(AAT, mort) \\\n-    HB_OT_TABLE(AAT, morx) \\\n-    HB_OT_TABLE(AAT, kerx) \\\n-    HB_OT_TABLE(AAT, ankr) \\\n-    HB_OT_TABLE(AAT, trak) \\\n-    HB_OT_TABLE(AAT, lcar) \\\n-    HB_OT_TABLE(AAT, ltag) \\\n-    HB_OT_TABLE(AAT, feat) \\\n-    \/* OpenType variations. *\/ \\\n-    HB_OT_TABLE(OT, fvar) \\\n-    HB_OT_TABLE(OT, avar) \\\n-    HB_OT_TABLE(OT, MVAR) \\\n-    \/* OpenType math. *\/ \\\n-    HB_OT_TABLE(OT, MATH) \\\n-    \/* OpenType color fonts. *\/ \\\n-    HB_OT_TABLE(OT, COLR) \\\n-    HB_OT_TABLE(OT, CPAL) \\\n-    HB_OT_ACCELERATOR(OT, CBDT) \\\n-    HB_OT_ACCELERATOR(OT, sbix) \\\n-    HB_OT_ACCELERATOR(OT, SVG) \\\n-    \/* *\/\n-\n@@ -88,1 +44,1 @@\n-HB_OT_TABLES\n+#include \"hb-ot-face-table-list.hh\"\n@@ -103,3 +59,1 @@\n-#define HB_OT_ACCELERATOR(Namespace, Type) HB_OT_TABLE (Namespace, Type)\n-    HB_OT_TABLES\n-#undef HB_OT_ACCELERATOR\n+#include \"hb-ot-face-table-list.hh\"\n@@ -114,1 +68,1 @@\n-  HB_OT_TABLES\n+#include \"hb-ot-face-table-list.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-face.hh","additions":3,"deletions":49,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#ifndef HB_NO_OT_FONT\n+\n@@ -40,1 +42,0 @@\n-#include \"hb-ot-kern-table.hh\"\n@@ -55,1 +56,1 @@\n- * Functions for using OpenType fonts with hb_shape().  Not that fonts returned\n+ * Functions for using OpenType fonts with hb_shape().  Note that fonts returned\n@@ -152,0 +153,1 @@\n+#ifndef HB_NO_OT_FONT_CFF\n@@ -158,0 +160,1 @@\n+#endif\n@@ -160,1 +163,1 @@\n-  if (ot_face->glyf->get_extents (glyph, &extents))\n+  if (ot_face->glyf->get_extents (font, glyph, &extents))\n@@ -163,2 +166,2 @@\n-    hb_position_t tsb = vmtx.get_side_bearing (glyph);\n-    *y = font->em_scale_y (extents.y_bearing + tsb);\n+    hb_position_t tsb = vmtx.get_side_bearing (font, glyph);\n+    *y = extents.y_bearing + font->em_scale_y (tsb);\n@@ -183,9 +186,13 @@\n-  bool ret = ot_face->sbix->get_extents (font, glyph, extents);\n-  if (!ret)\n-    ret = ot_face->glyf->get_extents (glyph, extents);\n-  if (!ret)\n-    ret = ot_face->cff1->get_extents (glyph, extents);\n-  if (!ret)\n-    ret = ot_face->cff2->get_extents (font, glyph, extents);\n-  if (!ret)\n-    ret = ot_face->CBDT->get_extents (font, glyph, extents);\n+\n+#if !defined(HB_NO_OT_FONT_BITMAP) && !defined(HB_NO_COLOR)\n+  if (ot_face->sbix->get_extents (font, glyph, extents)) return true;\n+#endif\n+  if (ot_face->glyf->get_extents (font, glyph, extents)) return true;\n+#ifndef HB_NO_OT_FONT_CFF\n+  if (ot_face->cff1->get_extents (font, glyph, extents)) return true;\n+  if (ot_face->cff2->get_extents (font, glyph, extents)) return true;\n+#endif\n+#if !defined(HB_NO_OT_FONT_BITMAP) && !defined(HB_NO_COLOR)\n+  if (ot_face->CBDT->get_extents (font, glyph, extents)) return true;\n+#endif\n+\n@@ -193,5 +200,1 @@\n-  extents->x_bearing = font->em_scale_x (extents->x_bearing);\n-  extents->y_bearing = font->em_scale_y (extents->y_bearing);\n-  extents->width     = font->em_scale_x (extents->width);\n-  extents->height    = font->em_scale_y (extents->height);\n-  return ret;\n+  return false;\n@@ -200,0 +203,1 @@\n+#ifndef HB_NO_OT_FONT_GLYPH_NAMES\n@@ -208,1 +212,5 @@\n-  return ot_face->post->get_glyph_name (glyph, name, size);\n+  if (ot_face->post->get_glyph_name (glyph, name, size)) return true;\n+#ifndef HB_NO_OT_FONT_CFF\n+  if (ot_face->cff1->get_glyph_name (glyph, name, size)) return true;\n+#endif\n+  return false;\n@@ -210,1 +218,0 @@\n-\n@@ -219,1 +226,5 @@\n-  return ot_face->post->get_glyph_from_name (name, len, glyph);\n+  if (ot_face->post->get_glyph_from_name (name, len, glyph)) return true;\n+#ifndef HB_NO_OT_FONT_CFF\n+    if (ot_face->cff1->get_glyph_from_name (name, len, glyph)) return true;\n+#endif\n+  return false;\n@@ -221,0 +232,1 @@\n+#endif\n@@ -224,1 +236,1 @@\n-                          void *font_data,\n+                          void *font_data HB_UNUSED,\n@@ -228,7 +240,3 @@\n-  const hb_ot_face_t *ot_face = (const hb_ot_face_t *) font_data;\n-  const OT::hmtx_accelerator_t &hmtx = *ot_face->hmtx;\n-  metrics->ascender = font->em_scale_y (hmtx.ascender);\n-  metrics->descender = font->em_scale_y (hmtx.descender);\n-  metrics->line_gap = font->em_scale_y (hmtx.line_gap);\n-  \/\/ TODO Hook up variations.\n-  return hmtx.has_font_extents;\n+  return _hb_ot_metrics_get_position_common (font, HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER, &metrics->ascender) &&\n+         _hb_ot_metrics_get_position_common (font, HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER, &metrics->descender) &&\n+         _hb_ot_metrics_get_position_common (font, HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP, &metrics->line_gap);\n@@ -239,1 +247,1 @@\n-                          void *font_data,\n+                          void *font_data HB_UNUSED,\n@@ -243,7 +251,3 @@\n-  const hb_ot_face_t *ot_face = (const hb_ot_face_t *) font_data;\n-  const OT::vmtx_accelerator_t &vmtx = *ot_face->vmtx;\n-  metrics->ascender = font->em_scale_x (vmtx.ascender);\n-  metrics->descender = font->em_scale_x (vmtx.descender);\n-  metrics->line_gap = font->em_scale_x (vmtx.line_gap);\n-  \/\/ TODO Hook up variations.\n-  return vmtx.has_font_extents;\n+  return _hb_ot_metrics_get_position_common (font, HB_OT_METRICS_TAG_VERTICAL_ASCENDER, &metrics->ascender) &&\n+         _hb_ot_metrics_get_position_common (font, HB_OT_METRICS_TAG_VERTICAL_DESCENDER, &metrics->descender) &&\n+         _hb_ot_metrics_get_position_common (font, HB_OT_METRICS_TAG_VERTICAL_LINE_GAP, &metrics->line_gap);\n@@ -273,0 +277,1 @@\n+#ifndef HB_NO_OT_FONT_GLYPH_NAMES\n@@ -275,0 +280,1 @@\n+#endif\n@@ -314,0 +320,17 @@\n+\n+#ifndef HB_NO_VAR\n+int\n+_glyf_get_side_bearing_var (hb_font_t *font, hb_codepoint_t glyph, bool is_vertical)\n+{\n+  return font->face->table.glyf->get_side_bearing_var (font, glyph, is_vertical);\n+}\n+\n+unsigned\n+_glyf_get_advance_var (hb_font_t *font, hb_codepoint_t glyph, bool is_vertical)\n+{\n+  return font->face->table.glyf->get_advance_var (font, glyph, is_vertical);\n+}\n+#endif\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-font.cc","additions":61,"deletions":38,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -3,0 +3,2 @@\n+ * Copyright © 2019  Adobe Inc.\n+ * Copyright © 2019  Ebrahim Byagowi\n@@ -24,1 +26,2 @@\n- * Google Author(s): Behdad Esfahbod\n+ * Google Author(s): Behdad Esfahbod, Garret Rieger, Roderick Sheeter\n+ * Adobe Author(s): Michiharu Ariza\n@@ -32,1 +35,3 @@\n-#include \"hb-subset-glyf.hh\"\n+#include \"hb-ot-hmtx-table.hh\"\n+#include \"hb-ot-var-gvar-table.hh\"\n+#include \"hb-draw.hh\"\n@@ -57,1 +62,2 @@\n-  UnsizedArrayOf<HBUINT8>       dataZ;          \/* Location data. *\/\n+  UnsizedArrayOf<HBUINT8>\n+                dataZ;  \/* Location data. *\/\n@@ -59,3 +65,3 @@\n-  DEFINE_SIZE_MIN (0); \/* In reality, this is UNBOUNDED() type; but since we always\n-                        * check the size externally, allow Null() object of it by\n-                        * defining it MIN() instead. *\/\n+  DEFINE_SIZE_MIN (0);  \/* In reality, this is UNBOUNDED() type; but since we always\n+                         * check the size externally, allow Null() object of it by\n+                         * defining it _MIN instead. *\/\n@@ -79,2 +85,1 @@\n-    \/* We don't check for anything specific here.  The users of the\n-     * struct do all the hard work... *\/\n+    \/* Runtime checks as eager sanitizing each glyph is costy *\/\n@@ -84,1 +89,43 @@\n-  bool subset (hb_subset_plan_t *plan) const\n+  template<typename Iterator,\n+           hb_requires (hb_is_source_of (Iterator, unsigned int))>\n+  static bool\n+  _add_loca_and_head (hb_subset_plan_t * plan, Iterator padded_offsets)\n+  {\n+    unsigned max_offset =\n+    + padded_offsets\n+    | hb_reduce (hb_add, 0)\n+    ;\n+    unsigned num_offsets = padded_offsets.len () + 1;\n+    bool use_short_loca = max_offset < 0x1FFFF;\n+    unsigned entry_size = use_short_loca ? 2 : 4;\n+    char *loca_prime_data = (char *) calloc (entry_size, num_offsets);\n+\n+    if (unlikely (!loca_prime_data)) return false;\n+\n+    DEBUG_MSG (SUBSET, nullptr, \"loca entry_size %d num_offsets %d \"\n+                                \"max_offset %d size %d\",\n+               entry_size, num_offsets, max_offset, entry_size * num_offsets);\n+\n+    if (use_short_loca)\n+      _write_loca (padded_offsets, 1, hb_array ((HBUINT16 *) loca_prime_data, num_offsets));\n+    else\n+      _write_loca (padded_offsets, 0, hb_array ((HBUINT32 *) loca_prime_data, num_offsets));\n+\n+    hb_blob_t *loca_blob = hb_blob_create (loca_prime_data,\n+                                           entry_size * num_offsets,\n+                                           HB_MEMORY_MODE_WRITABLE,\n+                                           loca_prime_data,\n+                                           free);\n+\n+    bool result = plan->add_table (HB_OT_TAG_loca, loca_blob)\n+               && _add_head_and_set_loca_version (plan, use_short_loca);\n+\n+    hb_blob_destroy (loca_blob);\n+    return result;\n+  }\n+\n+  template<typename IteratorIn, typename IteratorOut,\n+           hb_requires (hb_is_source_of (IteratorIn, unsigned int)),\n+           hb_requires (hb_is_sink_of (IteratorOut, unsigned))>\n+  static void\n+  _write_loca (IteratorIn it, unsigned right_shift, IteratorOut dest)\n@@ -86,11 +133,32 @@\n-    hb_blob_t *glyf_prime = nullptr;\n-    hb_blob_t *loca_prime = nullptr;\n-\n-    bool success = true;\n-    bool use_short_loca = false;\n-    if (hb_subset_glyf_and_loca (plan, &use_short_loca, &glyf_prime, &loca_prime)) {\n-      success = success && plan->add_table (HB_OT_TAG_glyf, glyf_prime);\n-      success = success && plan->add_table (HB_OT_TAG_loca, loca_prime);\n-      success = success && _add_head_and_set_loca_version (plan, use_short_loca);\n-    } else {\n-      success = false;\n+    unsigned int offset = 0;\n+    dest << 0;\n+    + it\n+    | hb_map ([=, &offset] (unsigned int padded_size)\n+              {\n+                offset += padded_size;\n+                DEBUG_MSG (SUBSET, nullptr, \"loca entry offset %d\", offset);\n+                return offset >> right_shift;\n+              })\n+    | hb_sink (dest)\n+    ;\n+  }\n+\n+  \/* requires source of SubsetGlyph complains the identifier isn't declared *\/\n+  template <typename Iterator>\n+  bool serialize (hb_serialize_context_t *c,\n+                  Iterator it,\n+                  const hb_subset_plan_t *plan)\n+  {\n+    TRACE_SERIALIZE (this);\n+    unsigned init_len = c->length ();\n+    for (const auto &_ : it) _.serialize (c, plan);\n+\n+    \/* As a special case when all glyph in the font are empty, add a zero byte\n+     * to the table, so that OTS doesn’t reject it, and to make the table work\n+     * on Windows as well.\n+     * See https:\/\/github.com\/khaledhosny\/ots\/issues\/52 *\/\n+    if (init_len == c->length ())\n+    {\n+      HBUINT8 empty_byte;\n+      empty_byte = 0;\n+      c->copy (empty_byte);\n@@ -98,2 +166,2 @@\n-    hb_blob_destroy (loca_prime);\n-    hb_blob_destroy (glyf_prime);\n+    return_trace (true);\n+  }\n@@ -101,1 +169,53 @@\n-    return success;\n+  \/* Byte region(s) per glyph to output\n+     unpadded, hints removed if so requested\n+     If we fail to process a glyph we produce an empty (0-length) glyph *\/\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    glyf *glyf_prime = c->serializer->start_embed <glyf> ();\n+    if (unlikely (!c->serializer->check_success (glyf_prime))) return_trace (false);\n+\n+    hb_vector_t<SubsetGlyph> glyphs;\n+    _populate_subset_glyphs (c->plan, &glyphs);\n+\n+    glyf_prime->serialize (c->serializer, hb_iter (glyphs), c->plan);\n+\n+    auto padded_offsets =\n+    + hb_iter (glyphs)\n+    | hb_map (&SubsetGlyph::padded_size)\n+    ;\n+\n+    if (c->serializer->in_error ()) return_trace (false);\n+    return_trace (c->serializer->check_success (_add_loca_and_head (c->plan,\n+                                                                    padded_offsets)));\n+  }\n+\n+  template <typename SubsetGlyph>\n+  void\n+  _populate_subset_glyphs (const hb_subset_plan_t   *plan,\n+                           hb_vector_t<SubsetGlyph> *glyphs \/* OUT *\/) const\n+  {\n+    OT::glyf::accelerator_t glyf;\n+    glyf.init (plan->source);\n+\n+    + hb_range (plan->num_output_glyphs ())\n+    | hb_map ([&] (hb_codepoint_t new_gid)\n+              {\n+                SubsetGlyph subset_glyph = {0};\n+                subset_glyph.new_gid = new_gid;\n+\n+                \/* should never fail: all old gids should be mapped *\/\n+                if (!plan->old_gid_for_new_gid (new_gid, &subset_glyph.old_gid))\n+                  return subset_glyph;\n+\n+                subset_glyph.source_glyph = glyf.glyph_for_gid (subset_glyph.old_gid, true);\n+                if (plan->drop_hints) subset_glyph.drop_hints_bytes ();\n+                else subset_glyph.dest_start = subset_glyph.source_glyph.get_bytes ();\n+\n+                return subset_glyph;\n+              })\n+    | hb_sink (glyphs)\n+    ;\n+\n+    glyf.fini ();\n@@ -115,1 +235,1 @@\n-    head_prime->indexToLocFormat.set (use_short_loca ? 0 : 1);\n+    head_prime->indexToLocFormat = use_short_loca ? 0 : 1;\n@@ -122,15 +242,1 @@\n-  struct GlyphHeader\n-  {\n-    HBINT16             numberOfContours;       \/* If the number of contours is\n-                                                 * greater than or equal to zero,\n-                                                 * this is a simple glyph; if negative,\n-                                                 * this is a composite glyph. *\/\n-    FWORD               xMin;                   \/* Minimum x for coordinate data. *\/\n-    FWORD               yMin;                   \/* Minimum y for coordinate data. *\/\n-    FWORD               xMax;                   \/* Maximum x for coordinate data. *\/\n-    FWORD               yMax;                   \/* Maximum y for coordinate data. *\/\n-\n-    DEFINE_SIZE_STATIC (10);\n-  };\n-\n-  struct CompositeGlyphHeader\n+  struct CompositeGlyphChain\n@@ -138,13 +244,15 @@\n-    enum composite_glyph_flag_t {\n-      ARG_1_AND_2_ARE_WORDS =      0x0001,\n-      ARGS_ARE_XY_VALUES =         0x0002,\n-      ROUND_XY_TO_GRID =           0x0004,\n-      WE_HAVE_A_SCALE =            0x0008,\n-      MORE_COMPONENTS =            0x0020,\n-      WE_HAVE_AN_X_AND_Y_SCALE =   0x0040,\n-      WE_HAVE_A_TWO_BY_TWO =       0x0080,\n-      WE_HAVE_INSTRUCTIONS =       0x0100,\n-      USE_MY_METRICS =             0x0200,\n-      OVERLAP_COMPOUND =           0x0400,\n-      SCALED_COMPONENT_OFFSET =    0x0800,\n-      UNSCALED_COMPONENT_OFFSET =  0x1000\n+    protected:\n+    enum composite_glyph_flag_t\n+    {\n+      ARG_1_AND_2_ARE_WORDS     = 0x0001,\n+      ARGS_ARE_XY_VALUES        = 0x0002,\n+      ROUND_XY_TO_GRID          = 0x0004,\n+      WE_HAVE_A_SCALE           = 0x0008,\n+      MORE_COMPONENTS           = 0x0020,\n+      WE_HAVE_AN_X_AND_Y_SCALE  = 0x0040,\n+      WE_HAVE_A_TWO_BY_TWO      = 0x0080,\n+      WE_HAVE_INSTRUCTIONS      = 0x0100,\n+      USE_MY_METRICS            = 0x0200,\n+      OVERLAP_COMPOUND          = 0x0400,\n+      SCALED_COMPONENT_OFFSET   = 0x0800,\n+      UNSCALED_COMPONENT_OFFSET = 0x1000\n@@ -153,3 +261,1 @@\n-    HBUINT16 flags;\n-    GlyphID  glyphIndex;\n-\n+    public:\n@@ -159,1 +265,1 @@\n-      \/\/ arg1 and 2 are int16\n+      \/* arg1 and 2 are int16 *\/\n@@ -161,1 +267,1 @@\n-      \/\/ arg1 and 2 are int8\n+      \/* arg1 and 2 are int8 *\/\n@@ -164,1 +270,1 @@\n-      \/\/ One x 16 bit (scale)\n+      \/* One x 16 bit (scale) *\/\n@@ -166,1 +272,1 @@\n-      \/\/ Two x 16 bit (xscale, yscale)\n+      \/* Two x 16 bit (xscale, yscale) *\/\n@@ -168,1 +274,1 @@\n-      \/\/ Four x 16 bit (xscale, scale01, scale10, yscale)\n+      \/* Four x 16 bit (xscale, scale01, scale10, yscale) *\/\n@@ -174,1 +280,10 @@\n-    struct Iterator\n+    void set_glyph_index (hb_codepoint_t new_gid) { glyphIndex = new_gid; }\n+    hb_codepoint_t get_glyph_index ()       const { return glyphIndex; }\n+\n+    void drop_instructions_flag ()  { flags = (uint16_t) flags & ~WE_HAVE_INSTRUCTIONS; }\n+    bool has_instructions ()  const { return   flags & WE_HAVE_INSTRUCTIONS; }\n+\n+    bool has_more ()          const { return   flags & MORE_COMPONENTS; }\n+    bool is_use_my_metrics () const { return   flags & USE_MY_METRICS; }\n+    bool is_anchored ()       const { return !(flags & ARGS_ARE_XY_VALUES); }\n+    void get_anchor_points (unsigned int &point1, unsigned int &point2) const\n@@ -176,3 +291,12 @@\n-      const char *glyph_start;\n-      const char *glyph_end;\n-      const CompositeGlyphHeader *current;\n+      const HBUINT8 *p = &StructAfter<const HBUINT8> (glyphIndex);\n+      if (flags & ARG_1_AND_2_ARE_WORDS)\n+      {\n+        point1 = ((const HBUINT16 *) p)[0];\n+        point2 = ((const HBUINT16 *) p)[1];\n+      }\n+      else\n+      {\n+        point1 = p[0];\n+        point2 = p[1];\n+      }\n+    }\n@@ -180,1 +304,5 @@\n-      bool move_to_next ()\n+    void transform_points (contour_point_vector_t &points) const\n+    {\n+      float matrix[4];\n+      contour_point_t trans;\n+      if (get_transformation (matrix, trans))\n@@ -182,1 +310,1 @@\n-        if (current->flags & CompositeGlyphHeader::MORE_COMPONENTS)\n+        if (scaled_offsets ())\n@@ -184,6 +312,7 @@\n-          const CompositeGlyphHeader *possible =\n-            &StructAfter<CompositeGlyphHeader, CompositeGlyphHeader> (*current);\n-          if (!in_range (possible))\n-            return false;\n-          current = possible;\n-          return true;\n+          points.translate (trans);\n+          points.transform (matrix);\n+        }\n+        else\n+        {\n+          points.transform (matrix);\n+          points.translate (trans);\n@@ -191,1 +320,0 @@\n-        return false;\n@@ -193,0 +321,1 @@\n+    }\n@@ -194,7 +323,3 @@\n-      bool in_range (const CompositeGlyphHeader *composite) const\n-      {\n-        return (const char *) composite >= glyph_start\n-          && ((const char *) composite + CompositeGlyphHeader::min_size) <= glyph_end\n-          && ((const char *) composite + composite->get_size ()) <= glyph_end;\n-      }\n-    };\n+    protected:\n+    bool scaled_offsets () const\n+    { return (flags & (SCALED_COMPONENT_OFFSET | UNSCALED_COMPONENT_OFFSET)) == SCALED_COMPONENT_OFFSET; }\n@@ -202,3 +327,1 @@\n-    static bool get_iterator (const char * glyph_data,\n-                              unsigned int length,\n-                              CompositeGlyphHeader::Iterator *iterator \/* OUT *\/)\n+    bool get_transformation (float (&matrix)[4], contour_point_t &trans) const\n@@ -206,2 +329,2 @@\n-      if (length < GlyphHeader::static_size)\n-        return false; \/* Empty glyph; zero extents. *\/\n+      matrix[0] = matrix[3] = 1.f;\n+      matrix[1] = matrix[2] = 0.f;\n@@ -209,2 +332,3 @@\n-      const GlyphHeader &glyph_header = StructAtOffset<GlyphHeader> (glyph_data, 0);\n-      if (glyph_header.numberOfContours < 0)\n+      int tx, ty;\n+      const HBINT8 *p = &StructAfter<const HBINT8> (glyphIndex);\n+      if (flags & ARG_1_AND_2_ARE_WORDS)\n@@ -212,9 +336,4 @@\n-        const CompositeGlyphHeader *possible =\n-          &StructAfter<CompositeGlyphHeader, GlyphHeader> (glyph_header);\n-\n-        iterator->glyph_start = glyph_data;\n-        iterator->glyph_end = (const char *) glyph_data + length;\n-        if (!iterator->in_range (possible))\n-          return false;\n-        iterator->current = possible;\n-        return true;\n+        tx = *(const HBINT16 *) p;\n+        p += HBINT16::static_size;\n+        ty = *(const HBINT16 *) p;\n+        p += HBINT16::static_size;\n@@ -222,0 +341,6 @@\n+      else\n+      {\n+        tx = *p++;\n+        ty = *p++;\n+      }\n+      if (is_anchored ()) tx = ty = 0;\n@@ -223,1 +348,25 @@\n-      return false;\n+      trans.init ((float) tx, (float) ty);\n+\n+      {\n+        const F2DOT14 *points = (const F2DOT14 *) p;\n+        if (flags & WE_HAVE_A_SCALE)\n+        {\n+          matrix[0] = matrix[3] = points[0].to_float ();\n+          return true;\n+        }\n+        else if (flags & WE_HAVE_AN_X_AND_Y_SCALE)\n+        {\n+          matrix[0] = points[0].to_float ();\n+          matrix[3] = points[1].to_float ();\n+          return true;\n+        }\n+        else if (flags & WE_HAVE_A_TWO_BY_TWO)\n+        {\n+          matrix[0] = points[0].to_float ();\n+          matrix[1] = points[1].to_float ();\n+          matrix[2] = points[2].to_float ();\n+          matrix[3] = points[3].to_float ();\n+          return true;\n+        }\n+      }\n+      return tx || ty;\n@@ -226,0 +375,4 @@\n+    protected:\n+    HBUINT16    flags;\n+    HBGlyphID   glyphIndex;\n+    public:\n@@ -229,1 +382,1 @@\n-  struct accelerator_t\n+  struct composite_iter_t : hb_iter_with_fallback_t<composite_iter_t, const CompositeGlyphChain &>\n@@ -231,1 +384,9 @@\n-    void init (hb_face_t *face)\n+    typedef const CompositeGlyphChain *__item_t__;\n+    composite_iter_t (hb_bytes_t glyph_, __item_t__ current_) :\n+      glyph (glyph_), current (current_)\n+    { if (!check_range (current)) current = nullptr; }\n+    composite_iter_t () : glyph (hb_bytes_t ()), current (nullptr) {}\n+\n+    const CompositeGlyphChain &__item__ () const { return *current; }\n+    bool __more__ () const { return current; }\n+    void __next__ ()\n@@ -233,1 +394,1 @@\n-      memset (this, 0, sizeof (accelerator_t));\n+      if (!current->has_more ()) { current = nullptr; return; }\n@@ -235,10 +396,4 @@\n-      const OT::head &head = *face->table.head;\n-      if (head.indexToLocFormat > 1 || head.glyphDataFormat != 0)\n-        \/* Unknown format.  Leave num_glyphs=0, that takes care of disabling us. *\/\n-        return;\n-      short_offset = 0 == head.indexToLocFormat;\n-\n-      loca_table = hb_sanitize_context_t ().reference_table<loca> (face);\n-      glyf_table = hb_sanitize_context_t ().reference_table<glyf> (face);\n-\n-      num_glyphs = MAX (1u, loca_table.get_length () \/ (short_offset ? 2 : 4)) - 1;\n+      const CompositeGlyphChain *possible = &StructAfter<CompositeGlyphChain,\n+                                                         CompositeGlyphChain> (*current);\n+      if (!check_range (possible)) { current = nullptr; return; }\n+      current = possible;\n@@ -246,0 +401,2 @@\n+    bool operator != (const composite_iter_t& o) const\n+    { return glyph != o.glyph || current != o.current; }\n@@ -247,1 +404,1 @@\n-    void fini ()\n+    bool check_range (const CompositeGlyphChain *composite) const\n@@ -249,2 +406,2 @@\n-      loca_table.destroy ();\n-      glyf_table.destroy ();\n+      return glyph.check_range (composite, CompositeGlyphChain::min_size)\n+          && glyph.check_range (composite, composite->get_size ());\n@@ -253,10 +410,4 @@\n-    \/*\n-     * Returns true if the referenced glyph is a valid glyph and a composite glyph.\n-     * If true is returned a pointer to the composite glyph will be written into\n-     * composite.\n-     *\/\n-    bool get_composite (hb_codepoint_t glyph,\n-                        CompositeGlyphHeader::Iterator *composite \/* OUT *\/) const\n-    {\n-      if (unlikely (!num_glyphs))\n-        return false;\n+    private:\n+    hb_bytes_t glyph;\n+    __item_t__ current;\n+  };\n@@ -264,3 +415,8 @@\n-      unsigned int start_offset, end_offset;\n-      if (!get_offsets (glyph, &start_offset, &end_offset))\n-        return false; \/* glyph not found *\/\n+  enum phantom_point_index_t\n+  {\n+    PHANTOM_LEFT   = 0,\n+    PHANTOM_RIGHT  = 1,\n+    PHANTOM_TOP    = 2,\n+    PHANTOM_BOTTOM = 3,\n+    PHANTOM_COUNT  = 4\n+  };\n@@ -268,4 +424,1 @@\n-      return CompositeGlyphHeader::get_iterator ((const char *) this->glyf_table + start_offset,\n-                                                 end_offset - start_offset,\n-                                                 composite);\n-    }\n+  struct accelerator_t;\n@@ -273,7 +426,10 @@\n-    enum simple_glyph_flag_t {\n-      FLAG_ON_CURVE = 0x01,\n-      FLAG_X_SHORT = 0x02,\n-      FLAG_Y_SHORT = 0x04,\n-      FLAG_REPEAT = 0x08,\n-      FLAG_X_SAME = 0x10,\n-      FLAG_Y_SAME = 0x20,\n+  struct Glyph\n+  {\n+    enum simple_glyph_flag_t\n+    {\n+      FLAG_ON_CURVE  = 0x01,\n+      FLAG_X_SHORT   = 0x02,\n+      FLAG_Y_SHORT   = 0x04,\n+      FLAG_REPEAT    = 0x08,\n+      FLAG_X_SAME    = 0x10,\n+      FLAG_Y_SAME    = 0x20,\n@@ -284,3 +440,2 @@\n-    \/* based on FontTools _g_l_y_f.py::trim *\/\n-    bool remove_padding (unsigned int start_offset,\n-                                unsigned int *end_offset) const\n+    private:\n+    struct GlyphHeader\n@@ -288,1 +443,1 @@\n-      if (*end_offset - start_offset < GlyphHeader::static_size) return true;\n+      bool has_data () const { return numberOfContours; }\n@@ -290,4 +445,9 @@\n-      const char *glyph = ((const char *) glyf_table) + start_offset;\n-      const char * const glyph_end = glyph + (*end_offset - start_offset);\n-      const GlyphHeader &glyph_header = StructAtOffset<GlyphHeader> (glyph, 0);\n-      int16_t num_contours = (int16_t) glyph_header.numberOfContours;\n+      bool get_extents (hb_font_t *font, const accelerator_t &glyf_accelerator,\n+                        hb_codepoint_t gid, hb_glyph_extents_t *extents) const\n+      {\n+        \/* Undocumented rasterizer behavior: shift glyph to the left by (lsb - xMin), i.e., xMin = lsb *\/\n+        \/* extents->x_bearing = hb_min (glyph_header.xMin, glyph_header.xMax); *\/\n+        extents->x_bearing = font->em_scale_x (glyf_accelerator.hmtx->get_side_bearing (gid));\n+        extents->y_bearing = font->em_scale_y (hb_max (yMin, yMax));\n+        extents->width     = font->em_scale_x (hb_max (xMin, xMax) - hb_min (xMin, xMax));\n+        extents->height    = font->em_scale_y (hb_min (yMin, yMax) - hb_max (yMin, yMax));\n@@ -295,3 +455,0 @@\n-      if (num_contours < 0)\n-        \/* Trimming for composites not implemented.\n-         * If removing hints it falls out of that. *\/\n@@ -299,1 +456,29 @@\n-      else if (num_contours > 0)\n+      }\n+\n+      HBINT16   numberOfContours;\n+                        \/* If the number of contours is\n+                         * greater than or equal to zero,\n+                         * this is a simple glyph; if negative,\n+                         * this is a composite glyph. *\/\n+      FWORD     xMin;   \/* Minimum x for coordinate data. *\/\n+      FWORD     yMin;   \/* Minimum y for coordinate data. *\/\n+      FWORD     xMax;   \/* Maximum x for coordinate data. *\/\n+      FWORD     yMax;   \/* Maximum y for coordinate data. *\/\n+      public:\n+      DEFINE_SIZE_STATIC (10);\n+    };\n+\n+    struct SimpleGlyph\n+    {\n+      const GlyphHeader &header;\n+      hb_bytes_t bytes;\n+      SimpleGlyph (const GlyphHeader &header_, hb_bytes_t bytes_) :\n+        header (header_), bytes (bytes_) {}\n+\n+      unsigned int instruction_len_offset () const\n+      { return GlyphHeader::static_size + 2 * header.numberOfContours; }\n+\n+      unsigned int length (unsigned int instruction_len) const\n+      { return instruction_len_offset () + 2 + instruction_len; }\n+\n+      unsigned int instructions_length () const\n@@ -301,0 +486,14 @@\n+        unsigned int instruction_length_offset = instruction_len_offset ();\n+        if (unlikely (instruction_length_offset + 2 > bytes.length)) return 0;\n+\n+        const HBUINT16 &instructionLength = StructAtOffset<HBUINT16> (&bytes, instruction_length_offset);\n+        \/* Out of bounds of the current glyph *\/\n+        if (unlikely (length (instructionLength) > bytes.length)) return 0;\n+        return instructionLength;\n+      }\n+\n+      const Glyph trim_padding () const\n+      {\n+        \/* based on FontTools _g_l_y_f.py::trim *\/\n+        const char *glyph = bytes.arrayZ;\n+        const char *glyph_end = glyph + bytes.length;\n@@ -302,1 +501,1 @@\n-        glyph += GlyphHeader::static_size + 2 * num_contours;\n+        glyph += instruction_len_offset ();\n@@ -304,3 +503,3 @@\n-        if (unlikely (glyph + 2 >= glyph_end)) return false;\n-        uint16_t nCoordinates = (uint16_t) StructAtOffset<HBUINT16> (glyph - 2, 0) + 1;\n-        uint16_t nInstructions = (uint16_t) StructAtOffset<HBUINT16> (glyph, 0);\n+        if (unlikely (glyph + 2 >= glyph_end)) return Glyph ();\n+        unsigned int num_coordinates = StructAtOffset<HBUINT16> (glyph - 2, 0) + 1;\n+        unsigned int num_instructions = StructAtOffset<HBUINT16> (glyph, 0);\n@@ -308,2 +507,1 @@\n-        glyph += 2 + nInstructions;\n-        if (unlikely (glyph + 2 >= glyph_end)) return false;\n+        glyph += 2 + num_instructions;\n@@ -311,2 +509,2 @@\n-        unsigned int coordBytes = 0;\n-        unsigned int coordsWithFlags = 0;\n+        unsigned int coord_bytes = 0;\n+        unsigned int coords_with_flags = 0;\n@@ -315,1 +513,1 @@\n-          uint8_t flag = (uint8_t) *glyph;\n+          uint8_t flag = *glyph;\n@@ -321,6 +519,2 @@\n-            if (glyph >= glyph_end)\n-            {\n-              DEBUG_MSG(SUBSET, nullptr, \"Bad flag\");\n-              return false;\n-            }\n-            repeat = ((uint8_t) *glyph) + 1;\n+            if (unlikely (glyph >= glyph_end)) return Glyph ();\n+            repeat = *glyph + 1;\n@@ -338,4 +532,3 @@\n-          coordBytes += (xBytes + yBytes) * repeat;\n-          coordsWithFlags += repeat;\n-          if (coordsWithFlags >= nCoordinates)\n-            break;\n+          coord_bytes += (xBytes + yBytes) * repeat;\n+          coords_with_flags += repeat;\n+          if (coords_with_flags >= num_coordinates) break;\n@@ -344,1 +537,28 @@\n-        if (coordsWithFlags != nCoordinates)\n+        if (unlikely (coords_with_flags != num_coordinates)) return Glyph ();\n+        return Glyph (bytes.sub_array (0, bytes.length + coord_bytes - (glyph_end - glyph)));\n+      }\n+\n+      \/* zero instruction length *\/\n+      void drop_hints ()\n+      {\n+        GlyphHeader &glyph_header = const_cast<GlyphHeader &> (header);\n+        (HBUINT16 &) StructAtOffset<HBUINT16> (&glyph_header, instruction_len_offset ()) = 0;\n+      }\n+\n+      void drop_hints_bytes (hb_bytes_t &dest_start, hb_bytes_t &dest_end) const\n+      {\n+        unsigned int instructions_len = instructions_length ();\n+        unsigned int glyph_length = length (instructions_len);\n+        dest_start = bytes.sub_array (0, glyph_length - instructions_len);\n+        dest_end = bytes.sub_array (glyph_length, bytes.length - glyph_length);\n+      }\n+\n+      static bool read_points (const HBUINT8 *&p \/* IN\/OUT *\/,\n+                               contour_point_vector_t &points_ \/* IN\/OUT *\/,\n+                               const hb_bytes_t &bytes,\n+                               void (* setter) (contour_point_t &_, float v),\n+                               const simple_glyph_flag_t short_flag,\n+                               const simple_glyph_flag_t same_flag)\n+      {\n+        float v = 0;\n+        for (unsigned i = 0; i < points_.length; i++)\n@@ -346,2 +566,19 @@\n-          DEBUG_MSG(SUBSET, nullptr, \"Expect %d coords to have flags, got flags for %d\", nCoordinates, coordsWithFlags);\n-          return false;\n+          uint8_t flag = points_[i].flag;\n+          if (flag & short_flag)\n+          {\n+            if (unlikely (!bytes.check_range (p))) return false;\n+            if (flag & same_flag)\n+              v += *p++;\n+            else\n+              v -= *p++;\n+          }\n+          else\n+          {\n+            if (!(flag & same_flag))\n+            {\n+              if (unlikely (!bytes.check_range ((const HBUINT16 *) p))) return false;\n+              v += *(const HBINT16 *) p;\n+              p += HBINT16::static_size;\n+            }\n+          }\n+          setter (points_[i], v);\n@@ -349,1 +586,14 @@\n-        glyph += coordBytes;\n+        return true;\n+      }\n+\n+      bool get_contour_points (contour_point_vector_t &points_ \/* OUT *\/,\n+                               bool phantom_only = false) const\n+      {\n+        const HBUINT16 *endPtsOfContours = &StructAfter<HBUINT16> (header);\n+        int num_contours = header.numberOfContours;\n+        if (unlikely (!bytes.check_range (&endPtsOfContours[num_contours + 1]))) return false;\n+        unsigned int num_points = endPtsOfContours[num_contours - 1] + 1;\n+\n+        points_.resize (num_points);\n+        for (unsigned int i = 0; i < points_.length; i++) points_[i].init ();\n+        if (phantom_only) return true;\n@@ -351,2 +601,27 @@\n-        if (glyph < glyph_end)\n-          *end_offset -= glyph_end - glyph;\n+        for (int i = 0; i < num_contours; i++)\n+          points_[endPtsOfContours[i]].is_end_point = true;\n+\n+        \/* Skip instructions *\/\n+        const HBUINT8 *p = &StructAtOffset<HBUINT8> (&endPtsOfContours[num_contours + 1],\n+                                                     endPtsOfContours[num_contours]);\n+\n+        \/* Read flags *\/\n+        for (unsigned int i = 0; i < num_points; i++)\n+        {\n+          if (unlikely (!bytes.check_range (p))) return false;\n+          uint8_t flag = *p++;\n+          points_[i].flag = flag;\n+          if (flag & FLAG_REPEAT)\n+          {\n+            if (unlikely (!bytes.check_range (p))) return false;\n+            unsigned int repeat_count = *p++;\n+            while ((repeat_count-- > 0) && (++i < num_points))\n+              points_[i].flag = flag;\n+          }\n+        }\n+\n+        \/* Read x & y coordinates *\/\n+        return read_points (p, points_, bytes, [] (contour_point_t &p, float v) { p.x = v; },\n+                            FLAG_X_SHORT, FLAG_X_SAME)\n+            && read_points (p, points_, bytes, [] (contour_point_t &p, float v) { p.y = v; },\n+                            FLAG_Y_SHORT, FLAG_Y_SAME);\n@@ -354,2 +629,1 @@\n-      return true;\n-    }\n+    };\n@@ -357,3 +631,1 @@\n-    bool get_offsets (hb_codepoint_t  glyph,\n-                      unsigned int   *start_offset \/* OUT *\/,\n-                      unsigned int   *end_offset   \/* OUT *\/) const\n+    struct CompositeGlyph\n@@ -361,2 +633,4 @@\n-      if (unlikely (glyph >= num_glyphs))\n-        return false;\n+      const GlyphHeader &header;\n+      hb_bytes_t bytes;\n+      CompositeGlyph (const GlyphHeader &header_, hb_bytes_t bytes_) :\n+        header (header_), bytes (bytes_) {}\n@@ -364,1 +638,4 @@\n-      if (short_offset)\n+      composite_iter_t get_iterator () const\n+      { return composite_iter_t (bytes, &StructAfter<CompositeGlyphChain, GlyphHeader> (header)); }\n+\n+      unsigned int instructions_length (hb_bytes_t bytes) const\n@@ -366,3 +643,11 @@\n-        const HBUINT16 *offsets = (const HBUINT16 *) loca_table->dataZ.arrayZ;\n-        *start_offset = 2 * offsets[glyph];\n-        *end_offset   = 2 * offsets[glyph + 1];\n+        unsigned int start = bytes.length;\n+        unsigned int end = bytes.length;\n+        const CompositeGlyphChain *last = nullptr;\n+        for (auto &item : get_iterator ())\n+          last = &item;\n+        if (unlikely (!last)) return 0;\n+\n+        if (last->has_instructions ())\n+          start = (char *) last - &bytes + last->get_size ();\n+        if (unlikely (start > end)) return 0;\n+        return end - start;\n@@ -370,1 +655,6 @@\n-      else\n+\n+      \/* Trimming for composites not implemented.\n+       * If removing hints it falls out of that. *\/\n+      const Glyph trim_padding () const { return Glyph (bytes); }\n+\n+      void drop_hints ()\n@@ -372,1 +662,17 @@\n-        const HBUINT32 *offsets = (const HBUINT32 *) loca_table->dataZ.arrayZ;\n+        for (const auto &_ : get_iterator ())\n+          const_cast<CompositeGlyphChain &> (_).drop_instructions_flag ();\n+      }\n+\n+      \/* Chop instructions off the end *\/\n+      void drop_hints_bytes (hb_bytes_t &dest_start) const\n+      { dest_start = bytes.sub_array (0, bytes.length - instructions_length (bytes)); }\n+    };\n+\n+    enum glyph_type_t { EMPTY, SIMPLE, COMPOSITE };\n+\n+    public:\n+    composite_iter_t get_composite_iterator () const\n+    {\n+      if (type != COMPOSITE) return composite_iter_t ();\n+      return CompositeGlyph (*header, bytes).get_iterator ();\n+    }\n@@ -374,2 +680,6 @@\n-        *start_offset = offsets[glyph];\n-        *end_offset   = offsets[glyph + 1];\n+    const Glyph trim_padding () const\n+    {\n+      switch (type) {\n+      case COMPOSITE: return CompositeGlyph (*header, bytes).trim_padding ();\n+      case SIMPLE:    return SimpleGlyph (*header, bytes).trim_padding ();\n+      default:        return bytes;\n@@ -377,0 +687,1 @@\n+    }\n@@ -378,2 +689,8 @@\n-      if (*start_offset > *end_offset || *end_offset > glyf_table.get_length ())\n-        return false;\n+    void drop_hints ()\n+    {\n+      switch (type) {\n+      case COMPOSITE: CompositeGlyph (*header, bytes).drop_hints (); return;\n+      case SIMPLE:    SimpleGlyph (*header, bytes).drop_hints (); return;\n+      default:        return;\n+      }\n+    }\n@@ -381,1 +698,7 @@\n-      return true;\n+    void drop_hints_bytes (hb_bytes_t &dest_start, hb_bytes_t &dest_end) const\n+    {\n+      switch (type) {\n+      case COMPOSITE: CompositeGlyph (*header, bytes).drop_hints_bytes (dest_start); return;\n+      case SIMPLE:    SimpleGlyph (*header, bytes).drop_hints_bytes (dest_start, dest_end); return;\n+      default:        return;\n+      }\n@@ -384,4 +707,7 @@\n-    bool get_instruction_offsets (unsigned int start_offset,\n-                                  unsigned int end_offset,\n-                                  unsigned int *instruction_start \/* OUT *\/,\n-                                  unsigned int *instruction_end \/* OUT *\/) const\n+    \/* Note: Recursively calls itself.\n+     * all_points includes phantom points\n+     *\/\n+    bool get_points (hb_font_t *font, const accelerator_t &glyf_accelerator,\n+                     contour_point_vector_t &all_points \/* OUT *\/,\n+                     bool phantom_only = false,\n+                     unsigned int depth = 0) const\n@@ -389,1 +715,5 @@\n-      if (end_offset - start_offset < GlyphHeader::static_size)\n+      if (unlikely (depth > HB_MAX_NESTING_LEVEL)) return false;\n+      contour_point_vector_t points;\n+\n+      switch (type) {\n+      case COMPOSITE:\n@@ -391,3 +721,6 @@\n-        *instruction_start = 0;\n-        *instruction_end = 0;\n-        return true; \/* Empty glyph; no instructions. *\/\n+        \/* pseudo component points for each component in composite glyph *\/\n+        unsigned num_points = hb_len (CompositeGlyph (*header, bytes).get_iterator ());\n+        if (unlikely (!points.resize (num_points))) return false;\n+        for (unsigned i = 0; i < points.length; i++)\n+          points[i].init ();\n+        break;\n@@ -395,3 +728,9 @@\n-      const GlyphHeader &glyph_header = StructAtOffset<GlyphHeader> (glyf_table, start_offset);\n-      int16_t num_contours = (int16_t) glyph_header.numberOfContours;\n-      if (num_contours < 0)\n+      case SIMPLE:\n+        if (unlikely (!SimpleGlyph (*header, bytes).get_contour_points (points, phantom_only)))\n+          return false;\n+        break;\n+      }\n+\n+      \/* Init phantom points *\/\n+      if (unlikely (!points.resize (points.length + PHANTOM_COUNT))) return false;\n+      hb_array_t<contour_point_t> phantoms = points.sub_array (points.length - PHANTOM_COUNT, PHANTOM_COUNT);\n@@ -399,15 +738,24 @@\n-        CompositeGlyphHeader::Iterator composite_it;\n-        if (unlikely (!CompositeGlyphHeader::get_iterator (\n-            (const char*) this->glyf_table + start_offset,\n-             end_offset - start_offset, &composite_it))) return false;\n-        const CompositeGlyphHeader *last;\n-        do {\n-          last = composite_it.current;\n-        } while (composite_it.move_to_next ());\n-\n-        if ((uint16_t) last->flags & CompositeGlyphHeader::WE_HAVE_INSTRUCTIONS)\n-          *instruction_start = ((char *) last - (char *) glyf_table->dataZ.arrayZ) + last->get_size ();\n-        else\n-          *instruction_start = end_offset;\n-        *instruction_end = end_offset;\n-        if (unlikely (*instruction_start > *instruction_end))\n+        for (unsigned i = 0; i < PHANTOM_COUNT; ++i) phantoms[i].init ();\n+        int h_delta = (int) header->xMin - glyf_accelerator.hmtx->get_side_bearing (gid);\n+        int v_orig  = (int) header->yMax + glyf_accelerator.vmtx->get_side_bearing (gid);\n+        unsigned h_adv = glyf_accelerator.hmtx->get_advance (gid);\n+        unsigned v_adv = glyf_accelerator.vmtx->get_advance (gid);\n+        phantoms[PHANTOM_LEFT].x = h_delta;\n+        phantoms[PHANTOM_RIGHT].x = h_adv + h_delta;\n+        phantoms[PHANTOM_TOP].y = v_orig;\n+        phantoms[PHANTOM_BOTTOM].y = v_orig - (int) v_adv;\n+      }\n+\n+#ifndef HB_NO_VAR\n+      if (unlikely (!glyf_accelerator.gvar->apply_deltas_to_points (gid, font, points.as_array ())))\n+        return false;\n+#endif\n+\n+      switch (type) {\n+      case SIMPLE:\n+        all_points.extend (points.as_array ());\n+        break;\n+      case COMPOSITE:\n+      {\n+        unsigned int comp_index = 0;\n+        for (auto &item : get_composite_iterator ())\n@@ -415,2 +763,35 @@\n-          DEBUG_MSG(SUBSET, nullptr, \"Invalid instruction offset, %d is outside [%d, %d]\", *instruction_start, start_offset, end_offset);\n-          return false;\n+          contour_point_vector_t comp_points;\n+          if (unlikely (!glyf_accelerator.glyph_for_gid (item.get_glyph_index ())\n+                                         .get_points (font, glyf_accelerator, comp_points,\n+                                                      phantom_only, depth + 1)\n+                        || comp_points.length < PHANTOM_COUNT))\n+            return false;\n+\n+          \/* Copy phantom points from component if USE_MY_METRICS flag set *\/\n+          if (item.is_use_my_metrics ())\n+            for (unsigned int i = 0; i < PHANTOM_COUNT; i++)\n+              phantoms[i] = comp_points[comp_points.length - PHANTOM_COUNT + i];\n+\n+          \/* Apply component transformation & translation *\/\n+          item.transform_points (comp_points);\n+\n+          \/* Apply translation from gvar *\/\n+          comp_points.translate (points[comp_index]);\n+\n+          if (item.is_anchored ())\n+          {\n+            unsigned int p1, p2;\n+            item.get_anchor_points (p1, p2);\n+            if (likely (p1 < all_points.length && p2 < comp_points.length))\n+            {\n+              contour_point_t delta;\n+              delta.init (all_points[p1].x - comp_points[p2].x,\n+                          all_points[p1].y - comp_points[p2].y);\n+\n+              comp_points.translate (delta);\n+            }\n+          }\n+\n+          all_points.extend (comp_points.sub_array (0, comp_points.length - PHANTOM_COUNT));\n+\n+          comp_index++;\n@@ -418,0 +799,5 @@\n+\n+        all_points.extend (phantoms);\n+      } break;\n+      default:\n+        all_points.extend (phantoms);\n@@ -419,1 +805,2 @@\n-      else\n+\n+      if (depth == 0) \/* Apply at top level *\/\n@@ -421,2 +808,119 @@\n-        unsigned int instruction_length_offset = start_offset + GlyphHeader::static_size + 2 * num_contours;\n-        if (unlikely (instruction_length_offset + 2 > end_offset))\n+        \/* Undocumented rasterizer behavior:\n+         * Shift points horizontally by the updated left side bearing\n+         *\/\n+        contour_point_t delta;\n+        delta.init (-phantoms[PHANTOM_LEFT].x, 0.f);\n+        if (delta.x) all_points.translate (delta);\n+      }\n+\n+      return true;\n+    }\n+\n+    bool get_extents (hb_font_t *font, const accelerator_t &glyf_accelerator,\n+                      hb_glyph_extents_t *extents) const\n+    {\n+      if (type == EMPTY) return true; \/* Empty glyph; zero extents. *\/\n+      return header->get_extents (font, glyf_accelerator, gid, extents);\n+    }\n+\n+    hb_bytes_t get_bytes () const { return bytes; }\n+\n+    Glyph (hb_bytes_t bytes_ = hb_bytes_t (),\n+           hb_codepoint_t gid_ = (hb_codepoint_t) -1) : bytes (bytes_), gid (gid_),\n+                                                        header (bytes.as<GlyphHeader> ())\n+    {\n+      int num_contours = header->numberOfContours;\n+      if (unlikely (num_contours == 0)) type = EMPTY;\n+      else if (num_contours > 0) type = SIMPLE;\n+      else type = COMPOSITE; \/* negative numbers *\/\n+    }\n+\n+    protected:\n+    hb_bytes_t bytes;\n+    hb_codepoint_t gid;\n+    const GlyphHeader *header;\n+    unsigned type;\n+  };\n+\n+  struct accelerator_t\n+  {\n+    void init (hb_face_t *face_)\n+    {\n+      short_offset = false;\n+      num_glyphs = 0;\n+      loca_table = nullptr;\n+      glyf_table = nullptr;\n+#ifndef HB_NO_VAR\n+      gvar = nullptr;\n+#endif\n+      hmtx = nullptr;\n+      vmtx = nullptr;\n+      face = face_;\n+      const OT::head &head = *face->table.head;\n+      if (head.indexToLocFormat > 1 || head.glyphDataFormat > 0)\n+        \/* Unknown format.  Leave num_glyphs=0, that takes care of disabling us. *\/\n+        return;\n+      short_offset = 0 == head.indexToLocFormat;\n+\n+      loca_table = hb_sanitize_context_t ().reference_table<loca> (face);\n+      glyf_table = hb_sanitize_context_t ().reference_table<glyf> (face);\n+#ifndef HB_NO_VAR\n+      gvar = face->table.gvar;\n+#endif\n+      hmtx = face->table.hmtx;\n+      vmtx = face->table.vmtx;\n+\n+      num_glyphs = hb_max (1u, loca_table.get_length () \/ (short_offset ? 2 : 4)) - 1;\n+      num_glyphs = hb_min (num_glyphs, face->get_num_glyphs ());\n+    }\n+\n+    void fini ()\n+    {\n+      loca_table.destroy ();\n+      glyf_table.destroy ();\n+    }\n+\n+    protected:\n+    template<typename T>\n+    bool get_points (hb_font_t *font, hb_codepoint_t gid, T consumer) const\n+    {\n+      if (gid >= num_glyphs) return false;\n+\n+      \/* Making this alloc free is not that easy\n+         https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/2095\n+         mostly because of gvar handling in VF fonts,\n+         perhaps a separate path for non-VF fonts can be considered *\/\n+      contour_point_vector_t all_points;\n+\n+      bool phantom_only = !consumer.is_consuming_contour_points ();\n+      if (unlikely (!glyph_for_gid (gid).get_points (font, *this, all_points, phantom_only)))\n+        return false;\n+\n+      if (consumer.is_consuming_contour_points ())\n+      {\n+        for (unsigned point_index = 0; point_index + 4 < all_points.length; ++point_index)\n+          consumer.consume_point (all_points[point_index]);\n+        consumer.points_end ();\n+      }\n+\n+      \/* Where to write phantoms, nullptr if not requested *\/\n+      contour_point_t *phantoms = consumer.get_phantoms_sink ();\n+      if (phantoms)\n+        for (unsigned i = 0; i < PHANTOM_COUNT; ++i)\n+          phantoms[i] = all_points[all_points.length - PHANTOM_COUNT + i];\n+\n+      return true;\n+    }\n+\n+#ifndef HB_NO_VAR\n+    struct points_aggregator_t\n+    {\n+      hb_font_t *font;\n+      hb_glyph_extents_t *extents;\n+      contour_point_t *phantoms;\n+\n+      struct contour_bounds_t\n+      {\n+        contour_bounds_t () { min_x = min_y = FLT_MAX; max_x = max_y = -FLT_MAX; }\n+\n+        void add (const contour_point_t &p)\n@@ -424,2 +928,4 @@\n-          DEBUG_MSG(SUBSET, nullptr, \"Glyph size is too short, missing field instructionLength.\");\n-          return false;\n+          min_x = hb_min (min_x, p.x);\n+          min_y = hb_min (min_y, p.y);\n+          max_x = hb_max (max_x, p.x);\n+          max_y = hb_max (max_y, p.y);\n@@ -428,4 +934,3 @@\n-        const HBUINT16 &instruction_length = StructAtOffset<HBUINT16> (glyf_table, instruction_length_offset);\n-        unsigned int start = instruction_length_offset + 2;\n-        unsigned int end = start + (uint16_t) instruction_length;\n-        if (unlikely (end > end_offset)) \/\/ Out of bounds of the current glyph\n+        bool empty () const { return (min_x >= max_x) || (min_y >= max_y); }\n+\n+        void get_extents (hb_font_t *font, hb_glyph_extents_t *extents)\n@@ -433,2 +938,12 @@\n-          DEBUG_MSG(SUBSET, nullptr, \"The instructions array overruns the glyph's boundaries.\");\n-          return false;\n+          if (unlikely (empty ()))\n+          {\n+            extents->width = 0;\n+            extents->x_bearing = 0;\n+            extents->height = 0;\n+            extents->y_bearing = 0;\n+            return;\n+          }\n+          extents->x_bearing = font->em_scalef_x (min_x);\n+          extents->width = font->em_scalef_x (max_x - min_x);\n+          extents->y_bearing = font->em_scalef_y (max_y);\n+          extents->height = font->em_scalef_y (min_y - max_y);\n@@ -437,2 +952,10 @@\n-        *instruction_start = start;\n-        *instruction_end = end;\n+        protected:\n+        float min_x, min_y, max_x, max_y;\n+      } bounds;\n+\n+      points_aggregator_t (hb_font_t *font_, hb_glyph_extents_t *extents_, contour_point_t *phantoms_)\n+      {\n+        font = font_;\n+        extents = extents_;\n+        phantoms = phantoms_;\n+        if (extents) bounds = contour_bounds_t ();\n@@ -440,1 +963,27 @@\n-      return true;\n+\n+      void consume_point (const contour_point_t &point) { bounds.add (point); }\n+      void points_end () { bounds.get_extents (font, extents); }\n+\n+      bool is_consuming_contour_points () { return extents; }\n+      contour_point_t *get_phantoms_sink () { return phantoms; }\n+    };\n+\n+    public:\n+    unsigned\n+    get_advance_var (hb_font_t *font, hb_codepoint_t gid, bool is_vertical) const\n+    {\n+      if (unlikely (gid >= num_glyphs)) return 0;\n+\n+      bool success = false;\n+\n+      contour_point_t phantoms[PHANTOM_COUNT];\n+      if (likely (font->num_coords == gvar->get_axis_count ()))\n+        success = get_points (font, gid, points_aggregator_t (font, nullptr, phantoms));\n+\n+      if (unlikely (!success))\n+        return is_vertical ? vmtx->get_advance (gid) : hmtx->get_advance (gid);\n+\n+      float result = is_vertical\n+                   ? phantoms[PHANTOM_TOP].y - phantoms[PHANTOM_BOTTOM].y\n+                   : phantoms[PHANTOM_RIGHT].x - phantoms[PHANTOM_LEFT].x;\n+      return hb_clamp (roundf (result), 0.f, (float) UINT_MAX \/ 2);\n@@ -443,1 +992,1 @@\n-    bool get_extents (hb_codepoint_t glyph, hb_glyph_extents_t *extents) const\n+    int get_side_bearing_var (hb_font_t *font, hb_codepoint_t gid, bool is_vertical) const\n@@ -445,0 +994,31 @@\n+      if (unlikely (gid >= num_glyphs)) return 0;\n+\n+      hb_glyph_extents_t extents;\n+\n+      contour_point_t phantoms[PHANTOM_COUNT];\n+      if (unlikely (!get_points (font, gid, points_aggregator_t (font, &extents, phantoms))))\n+        return is_vertical ? vmtx->get_side_bearing (gid) : hmtx->get_side_bearing (gid);\n+\n+      return is_vertical\n+           ? ceilf (phantoms[PHANTOM_TOP].y) - extents.y_bearing\n+           : floorf (phantoms[PHANTOM_LEFT].x);\n+    }\n+#endif\n+\n+    public:\n+    bool get_extents (hb_font_t *font, hb_codepoint_t gid, hb_glyph_extents_t *extents) const\n+    {\n+      if (unlikely (gid >= num_glyphs)) return false;\n+\n+#ifndef HB_NO_VAR\n+      if (font->num_coords && font->num_coords == gvar->get_axis_count ())\n+        return get_points (font, gid, points_aggregator_t (font, extents, nullptr));\n+#endif\n+      return glyph_for_gid (gid).get_extents (font, *this, extents);\n+    }\n+\n+    const Glyph\n+    glyph_for_gid (hb_codepoint_t gid, bool needs_padding_removal = false) const\n+    {\n+      if (unlikely (gid >= num_glyphs)) return Glyph ();\n+\n@@ -446,2 +1026,0 @@\n-      if (!get_offsets (glyph, &start_offset, &end_offset))\n-        return false;\n@@ -449,2 +1027,15 @@\n-      if (end_offset - start_offset < GlyphHeader::static_size)\n-        return true; \/* Empty glyph; zero extents. *\/\n+      if (short_offset)\n+      {\n+        const HBUINT16 *offsets = (const HBUINT16 *) loca_table->dataZ.arrayZ;\n+        start_offset = 2 * offsets[gid];\n+        end_offset   = 2 * offsets[gid + 1];\n+      }\n+      else\n+      {\n+        const HBUINT32 *offsets = (const HBUINT32 *) loca_table->dataZ.arrayZ;\n+        start_offset = offsets[gid];\n+        end_offset   = offsets[gid + 1];\n+      }\n+\n+      if (unlikely (start_offset > end_offset || end_offset > glyf_table.get_length ()))\n+        return Glyph ();\n@@ -452,1 +1043,4 @@\n-      const GlyphHeader &glyph_header = StructAtOffset<GlyphHeader> (glyf_table, start_offset);\n+      Glyph glyph (hb_bytes_t ((const char *) this->glyf_table + start_offset,\n+                               end_offset - start_offset), gid);\n+      return needs_padding_removal ? glyph.trim_padding () : glyph;\n+    }\n@@ -454,4 +1048,7 @@\n-      extents->x_bearing = MIN (glyph_header.xMin, glyph_header.xMax);\n-      extents->y_bearing = MAX (glyph_header.yMin, glyph_header.yMax);\n-      extents->width     = MAX (glyph_header.xMin, glyph_header.xMax) - extents->x_bearing;\n-      extents->height    = MIN (glyph_header.yMin, glyph_header.yMax) - extents->y_bearing;\n+    void\n+    add_gid_and_children (hb_codepoint_t gid, hb_set_t *gids_to_retain,\n+                          unsigned int depth = 0) const\n+    {\n+      if (unlikely (depth++ > HB_MAX_NESTING_LEVEL)) return;\n+      \/* Check if is already visited *\/\n+      if (gids_to_retain->has (gid)) return;\n@@ -459,1 +1056,4 @@\n-      return true;\n+      gids_to_retain->add (gid);\n+\n+      for (auto &item : glyph_for_gid (gid).get_composite_iterator ())\n+        add_gid_and_children (item.get_glyph_index (), gids_to_retain, depth);\n@@ -462,0 +1062,127 @@\n+#ifdef HB_EXPERIMENTAL_API\n+    struct path_builder_t\n+    {\n+      hb_font_t *font;\n+      draw_helper_t *draw_helper;\n+\n+      struct optional_point_t\n+      {\n+        optional_point_t () { has_data = false; }\n+        optional_point_t (float x_, float y_) { x = x_; y = y_; has_data = true; }\n+\n+        bool has_data;\n+        float x;\n+        float y;\n+\n+        optional_point_t lerp (optional_point_t p, float t)\n+        { return optional_point_t (x + t * (p.x - x), y + t * (p.y - y)); }\n+      } first_oncurve, first_offcurve, last_offcurve;\n+\n+      path_builder_t (hb_font_t *font_, draw_helper_t &draw_helper_)\n+      {\n+        font = font_;\n+        draw_helper = &draw_helper_;\n+        first_oncurve = first_offcurve = last_offcurve = optional_point_t ();\n+      }\n+\n+      \/* based on https:\/\/github.com\/RazrFalcon\/ttf-parser\/blob\/4f32821\/src\/glyf.rs#L287\n+         See also:\n+         * https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM01\/Chap1.html\n+         * https:\/\/stackoverflow.com\/a\/20772557 *\/\n+      void consume_point (const contour_point_t &point)\n+      {\n+        \/* Skip empty contours *\/\n+        if (unlikely (point.is_end_point && !first_oncurve.has_data && !first_offcurve.has_data))\n+          return;\n+\n+        bool is_on_curve = point.flag & Glyph::FLAG_ON_CURVE;\n+        optional_point_t p (point.x, point.y);\n+        if (!first_oncurve.has_data)\n+        {\n+          if (is_on_curve)\n+          {\n+            first_oncurve = p;\n+            draw_helper->move_to (font->em_scalef_x (p.x), font->em_scalef_y (p.y));\n+          }\n+          else\n+          {\n+            if (first_offcurve.has_data)\n+            {\n+              optional_point_t mid = first_offcurve.lerp (p, .5f);\n+              first_oncurve = mid;\n+              last_offcurve = p;\n+              draw_helper->move_to (font->em_scalef_x (mid.x), font->em_scalef_y (mid.y));\n+            }\n+            else\n+              first_offcurve = p;\n+          }\n+        }\n+        else\n+        {\n+          if (last_offcurve.has_data)\n+          {\n+            if (is_on_curve)\n+            {\n+              draw_helper->quadratic_to (font->em_scalef_x (last_offcurve.x), font->em_scalef_y (last_offcurve.y),\n+                                         font->em_scalef_x (p.x), font->em_scalef_y (p.y));\n+              last_offcurve = optional_point_t ();\n+            }\n+            else\n+            {\n+              optional_point_t mid = last_offcurve.lerp (p, .5f);\n+              draw_helper->quadratic_to (font->em_scalef_x (last_offcurve.x), font->em_scalef_y (last_offcurve.y),\n+                                         font->em_scalef_x (mid.x), font->em_scalef_y (mid.y));\n+              last_offcurve = p;\n+            }\n+          }\n+          else\n+          {\n+            if (is_on_curve)\n+              draw_helper->line_to (font->em_scalef_x (p.x), font->em_scalef_y (p.y));\n+            else\n+              last_offcurve = p;\n+          }\n+        }\n+\n+        if (point.is_end_point)\n+        {\n+          if (first_offcurve.has_data && last_offcurve.has_data)\n+          {\n+            optional_point_t mid = last_offcurve.lerp (first_offcurve, .5f);\n+            draw_helper->quadratic_to (font->em_scalef_x (last_offcurve.x), font->em_scalef_y (last_offcurve.y),\n+                                       font->em_scalef_x (mid.x), font->em_scalef_y (mid.y));\n+            last_offcurve = optional_point_t ();\n+            \/* now check the rest *\/\n+          }\n+\n+          if (first_offcurve.has_data && first_oncurve.has_data)\n+            draw_helper->quadratic_to (font->em_scalef_x (first_offcurve.x), font->em_scalef_y (first_offcurve.y),\n+                                       font->em_scalef_x (first_oncurve.x), font->em_scalef_y (first_oncurve.y));\n+          else if (last_offcurve.has_data && first_oncurve.has_data)\n+            draw_helper->quadratic_to (font->em_scalef_x (last_offcurve.x), font->em_scalef_y (last_offcurve.y),\n+                                       font->em_scalef_x (first_oncurve.x), font->em_scalef_y (first_oncurve.y));\n+          else if (first_oncurve.has_data)\n+            draw_helper->line_to (font->em_scalef_x (first_oncurve.x), font->em_scalef_y (first_oncurve.y));\n+\n+          \/* Getting ready for the next contour *\/\n+          first_oncurve = first_offcurve = last_offcurve = optional_point_t ();\n+          draw_helper->end_path ();\n+        }\n+      }\n+      void points_end () {}\n+\n+      bool is_consuming_contour_points () { return true; }\n+      contour_point_t *get_phantoms_sink () { return nullptr; }\n+    };\n+\n+    bool\n+    get_path (hb_font_t *font, hb_codepoint_t gid, draw_helper_t &draw_helper) const\n+    { return get_points (font, gid, path_builder_t (font, draw_helper)); }\n+#endif\n+\n+#ifndef HB_NO_VAR\n+    const gvar_accelerator_t *gvar;\n+#endif\n+    const hmtx_accelerator_t *hmtx;\n+    const vmtx_accelerator_t *vmtx;\n+\n@@ -467,0 +1194,51 @@\n+    hb_face_t *face;\n+  };\n+\n+  struct SubsetGlyph\n+  {\n+    hb_codepoint_t new_gid;\n+    hb_codepoint_t old_gid;\n+    Glyph source_glyph;\n+    hb_bytes_t dest_start;  \/* region of source_glyph to copy first *\/\n+    hb_bytes_t dest_end;    \/* region of source_glyph to copy second *\/\n+\n+    bool serialize (hb_serialize_context_t *c,\n+                    const hb_subset_plan_t *plan) const\n+    {\n+      TRACE_SERIALIZE (this);\n+\n+      hb_bytes_t dest_glyph = dest_start.copy (c);\n+      dest_glyph = hb_bytes_t (&dest_glyph, dest_glyph.length + dest_end.copy (c).length);\n+      unsigned int pad_length = padding ();\n+      DEBUG_MSG (SUBSET, nullptr, \"serialize %d byte glyph, width %d pad %d\", dest_glyph.length, dest_glyph.length + pad_length, pad_length);\n+\n+      HBUINT8 pad;\n+      pad = 0;\n+      while (pad_length > 0)\n+      {\n+        c->embed (pad);\n+        pad_length--;\n+      }\n+\n+      if (unlikely (!dest_glyph.length)) return_trace (true);\n+\n+      \/* update components gids *\/\n+      for (auto &_ : Glyph (dest_glyph).get_composite_iterator ())\n+      {\n+        hb_codepoint_t new_gid;\n+        if (plan->new_gid_for_old_gid (_.get_glyph_index (), &new_gid))\n+          const_cast<CompositeGlyphChain &> (_).set_glyph_index (new_gid);\n+      }\n+\n+      if (plan->drop_hints) Glyph (dest_glyph).drop_hints ();\n+\n+      return_trace (true);\n+    }\n+\n+    void drop_hints_bytes ()\n+    { source_glyph.drop_hints_bytes (dest_start, dest_end); }\n+\n+    unsigned int      length () const { return dest_start.length + dest_end.length; }\n+    \/* pad to 2 to ensure 2-byte loca will be ok *\/\n+    unsigned int     padding () const { return length () % 2; }\n+    unsigned int padded_size () const { return length () + padding (); }\n@@ -470,1 +1248,2 @@\n-  UnsizedArrayOf<HBUINT8>       dataZ;          \/* Glyphs data. *\/\n+  UnsizedArrayOf<HBUINT8>\n+                dataZ;  \/* Glyphs data. *\/\n@@ -472,3 +1251,3 @@\n-  DEFINE_SIZE_MIN (0); \/* In reality, this is UNBOUNDED() type; but since we always\n-                        * check the size externally, allow Null() object of it by\n-                        * defining it MIN() instead. *\/\n+  DEFINE_SIZE_MIN (0);  \/* In reality, this is UNBOUNDED() type; but since we always\n+                         * check the size externally, allow Null() object of it by\n+                         * defining it _MIN instead. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-glyf-table.hh","additions":1028,"deletions":249,"binary":false,"changes":1277,"status":"modified"},{"patch":"@@ -44,30 +44,1 @@\n-  struct SubsetView\n-  {\n-    const DeviceRecord *source_device_record;\n-    unsigned int sizeDeviceRecord;\n-    hb_subset_plan_t *subset_plan;\n-\n-    void init (const DeviceRecord *source_device_record,\n-               unsigned int sizeDeviceRecord,\n-               hb_subset_plan_t   *subset_plan)\n-    {\n-      this->source_device_record = source_device_record;\n-      this->sizeDeviceRecord = sizeDeviceRecord;\n-      this->subset_plan = subset_plan;\n-    }\n-\n-    unsigned int len () const\n-    { return this->subset_plan->glyphs.length; }\n-\n-    const HBUINT8* operator [] (unsigned int i) const\n-    {\n-      if (unlikely (i >= len ())) return nullptr;\n-      hb_codepoint_t gid = this->subset_plan->glyphs [i];\n-\n-      if (gid >= sizeDeviceRecord - DeviceRecord::min_size)\n-        return nullptr;\n-      return &(this->source_device_record->widthsZ[gid]);\n-    }\n-  };\n-\n-  static unsigned int get_size (unsigned int count)\n+  static unsigned int get_size (unsigned count)\n@@ -76,1 +47,3 @@\n-  bool serialize (hb_serialize_context_t *c, const SubsetView &subset_view)\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize (hb_serialize_context_t *c, unsigned pixelSize, Iterator it)\n@@ -80,21 +53,11 @@\n-    unsigned int size = get_size (subset_view.len ());\n-    if (unlikely (!c->allocate_size<DeviceRecord> (size)))\n-    {\n-      DEBUG_MSG(SUBSET, nullptr, \"Couldn't allocate enough space for DeviceRecord: %d.\",\n-                 size);\n-      return_trace (false);\n-    }\n-\n-    this->pixelSize.set (subset_view.source_device_record->pixelSize);\n-    this->maxWidth.set (subset_view.source_device_record->maxWidth);\n-\n-    for (unsigned int i = 0; i < subset_view.len (); i++)\n-    {\n-      const HBUINT8 *width = subset_view[i];\n-      if (!width)\n-      {\n-        DEBUG_MSG(SUBSET, nullptr, \"HDMX width for new gid %d is missing.\", i);\n-        return_trace (false);\n-      }\n-      widthsZ[i].set (*width);\n-    }\n+    unsigned length = it.len ();\n+\n+    if (unlikely (!c->extend (*this, length)))  return_trace (false);\n+\n+    this->pixelSize = pixelSize;\n+    this->maxWidth =\n+    + it\n+    | hb_reduce (hb_max, 0u);\n+\n+    + it\n+    | hb_sink (widthsZ.as_array (length));\n@@ -105,1 +68,1 @@\n-  bool sanitize (hb_sanitize_context_t *c, unsigned int sizeDeviceRecord) const\n+  bool sanitize (hb_sanitize_context_t *c, unsigned sizeDeviceRecord) const\n@@ -135,1 +98,3 @@\n-  bool serialize (hb_serialize_context_t *c, const hdmx *source_hdmx, hb_subset_plan_t *plan)\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize (hb_serialize_context_t *c, unsigned version, Iterator it)\n@@ -141,3 +106,3 @@\n-    this->version.set (source_hdmx->version);\n-    this->numRecords.set (source_hdmx->numRecords);\n-    this->sizeDeviceRecord.set (DeviceRecord::get_size (plan->glyphs.length));\n+    this->version = version;\n+    this->numRecords = it.len ();\n+    this->sizeDeviceRecord = DeviceRecord::get_size (it ? (*it).second.len () : 0);\n@@ -145,4 +110,2 @@\n-    for (unsigned int i = 0; i < source_hdmx->numRecords; i++)\n-    {\n-      DeviceRecord::SubsetView subset_view;\n-      subset_view.init (&(*source_hdmx)[i], source_hdmx->sizeDeviceRecord, plan);\n+    for (const hb_item_type<Iterator>& _ : +it)\n+      c->start_embed<DeviceRecord> ()->serialize (c, _.first, _.second);\n@@ -150,5 +113,1 @@\n-      if (!c->start_embed<DeviceRecord> ()->serialize (c, subset_view))\n-        return_trace (false);\n-    }\n-\n-    return_trace (true);\n+    return_trace (c->successful);\n@@ -157,1 +116,2 @@\n-  static size_t get_subsetted_size (const hdmx *source_hdmx, hb_subset_plan_t *plan)\n+\n+  bool subset (hb_subset_context_t *c) const\n@@ -159,1 +119,28 @@\n-    return min_size + source_hdmx->numRecords * DeviceRecord::get_size (plan->glyphs.length);\n+    TRACE_SUBSET (this);\n+\n+    hdmx *hdmx_prime = c->serializer->start_embed <hdmx> ();\n+    if (unlikely (!hdmx_prime)) return_trace (false);\n+\n+    auto it =\n+    + hb_range ((unsigned) numRecords)\n+    | hb_map ([c, this] (unsigned _)\n+        {\n+          const DeviceRecord *device_record =\n+            &StructAtOffset<DeviceRecord> (&firstDeviceRecord,\n+                                           _ * sizeDeviceRecord);\n+          auto row =\n+            + hb_range (c->plan->num_output_glyphs ())\n+            | hb_map (c->plan->reverse_glyph_map)\n+            | hb_map ([this, c, device_record] (hb_codepoint_t _)\n+                      {\n+                        if (c->plan->is_empty_glyph (_))\n+                          return Null (HBUINT8);\n+                        return device_record->widthsZ.as_array (get_num_glyphs ()) [_];\n+                      })\n+            ;\n+          return hb_pair ((unsigned) device_record->pixelSize, +row);\n+        })\n+    ;\n+\n+    hdmx_prime->serialize (c->serializer, version, it);\n+    return_trace (true);\n@@ -162,1 +149,1 @@\n-  bool subset (hb_subset_plan_t *plan) const\n+  unsigned get_num_glyphs () const\n@@ -164,27 +151,1 @@\n-    size_t dest_size = get_subsetted_size (this, plan);\n-    hdmx *dest = (hdmx *) malloc (dest_size);\n-    if (unlikely (!dest))\n-    {\n-      DEBUG_MSG(SUBSET, nullptr, \"Unable to alloc %lu for hdmx subset output.\", (unsigned long) dest_size);\n-      return false;\n-    }\n-\n-    hb_serialize_context_t c (dest, dest_size);\n-    hdmx *hdmx_prime = c.start_serialize<hdmx> ();\n-    if (!hdmx_prime || !hdmx_prime->serialize (&c, this, plan))\n-    {\n-      free (dest);\n-      DEBUG_MSG(SUBSET, nullptr, \"Failed to serialize write new hdmx.\");\n-      return false;\n-    }\n-    c.end_serialize ();\n-\n-    hb_blob_t *hdmx_prime_blob = hb_blob_create ((const char *) dest,\n-                                                 dest_size,\n-                                                 HB_MEMORY_MODE_READONLY,\n-                                                 dest,\n-                                                 free);\n-    bool result = plan->add_table (HB_OT_TAG_hdmx, hdmx_prime_blob);\n-    hb_blob_destroy (hdmx_prime_blob);\n-\n-    return result;\n+    return sizeDeviceRecord - DeviceRecord::min_size;\n@@ -203,4 +164,6 @@\n-  HBUINT16              version;                \/* Table version number (0) *\/\n-  HBUINT16              numRecords;             \/* Number of device records. *\/\n-  HBUINT32              sizeDeviceRecord;       \/* Size of a device record, 32-bit aligned. *\/\n-  DeviceRecord          firstDeviceRecord;      \/* Array of device records. *\/\n+  HBUINT16      version;        \/* Table version number (0) *\/\n+  HBUINT16      numRecords;     \/* Number of device records. *\/\n+  HBUINT32      sizeDeviceRecord;\n+                                \/* Size of a device record, 32-bit aligned. *\/\n+  DeviceRecord  firstDeviceRecord;\n+                                \/* Array of device records. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-hdmx-table.hh","additions":63,"deletions":100,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -57,0 +57,12 @@\n+  bool serialize (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace ((bool) c->embed (this));\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    return_trace (serialize (c->serializer));\n+  }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-head-table.hh","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+  bool has_data () const { return version.major; }\n+\n@@ -55,29 +57,32 @@\n-  FixedVersion<>version;                \/* 0x00010000u for version 1.0. *\/\n-  FWORD         ascender;               \/* Typographic ascent. *\/\n-  FWORD         descender;              \/* Typographic descent. *\/\n-  FWORD         lineGap;                \/* Typographic line gap. *\/\n-  UFWORD        advanceMax;             \/* Maximum advance width\/height value in\n-                                         * metrics table. *\/\n-  FWORD         minLeadingBearing;      \/* Minimum left\/top sidebearing value in\n-                                         * metrics table. *\/\n-  FWORD         minTrailingBearing;     \/* Minimum right\/bottom sidebearing value;\n-                                         * calculated as Min(aw - lsb -\n-                                         * (xMax - xMin)) for horizontal. *\/\n-  FWORD         maxExtent;              \/* horizontal: Max(lsb + (xMax - xMin)),\n-                                         * vertical: minLeadingBearing+(yMax-yMin). *\/\n-  HBINT16               caretSlopeRise;         \/* Used to calculate the slope of the\n-                                         * cursor (rise\/run); 1 for vertical caret,\n-                                         * 0 for horizontal.*\/\n-  HBINT16               caretSlopeRun;          \/* 0 for vertical caret, 1 for horizontal. *\/\n-  HBINT16               caretOffset;            \/* The amount by which a slanted\n-                                         * highlight on a glyph needs\n-                                         * to be shifted to produce the\n-                                         * best appearance. Set to 0 for\n-                                         * non-slanted fonts. *\/\n-  HBINT16               reserved1;              \/* Set to 0. *\/\n-  HBINT16               reserved2;              \/* Set to 0. *\/\n-  HBINT16               reserved3;              \/* Set to 0. *\/\n-  HBINT16               reserved4;              \/* Set to 0. *\/\n-  HBINT16               metricDataFormat;       \/* 0 for current format. *\/\n-  HBUINT16      numberOfLongMetrics;    \/* Number of LongMetric entries in metric\n-                                         * table. *\/\n+  FixedVersion<>version;        \/* 0x00010000u for version 1.0. *\/\n+  FWORD         ascender;       \/* Typographic ascent. *\/\n+  FWORD         descender;      \/* Typographic descent. *\/\n+  FWORD         lineGap;        \/* Typographic line gap. *\/\n+  UFWORD        advanceMax;     \/* Maximum advance width\/height value in\n+                                 * metrics table. *\/\n+  FWORD         minLeadingBearing;\n+                                \/* Minimum left\/top sidebearing value in\n+                                 * metrics table. *\/\n+  FWORD         minTrailingBearing;\n+                                \/* Minimum right\/bottom sidebearing value;\n+                                 * calculated as Min(aw - lsb -\n+                                 * (xMax - xMin)) for horizontal. *\/\n+  FWORD         maxExtent;      \/* horizontal: Max(lsb + (xMax - xMin)),\n+                                 * vertical: minLeadingBearing+(yMax-yMin). *\/\n+  HBINT16       caretSlopeRise; \/* Used to calculate the slope of the\n+                                 * cursor (rise\/run); 1 for vertical caret,\n+                                 * 0 for horizontal.*\/\n+  HBINT16       caretSlopeRun;  \/* 0 for vertical caret, 1 for horizontal. *\/\n+  HBINT16       caretOffset;    \/* The amount by which a slanted\n+                                 * highlight on a glyph needs\n+                                 * to be shifted to produce the\n+                                 * best appearance. Set to 0 for\n+                                 * non-slanted fonts. *\/\n+  HBINT16       reserved1;      \/* Set to 0. *\/\n+  HBINT16       reserved2;      \/* Set to 0. *\/\n+  HBINT16       reserved3;      \/* Set to 0. *\/\n+  HBINT16       reserved4;      \/* Set to 0. *\/\n+  HBINT16       metricDataFormat;\/* 0 for current format. *\/\n+  HBUINT16      numberOfLongMetrics;\n+                                \/* Number of LongMetric entries in metric\n+                                 * table. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-hhea-table.hh","additions":34,"deletions":29,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"hb-ot-os2-table.hh\"\n@@ -34,0 +33,1 @@\n+#include \"hb-ot-metrics.hh\"\n@@ -45,0 +45,7 @@\n+HB_INTERNAL int\n+_glyf_get_side_bearing_var (hb_font_t *font, hb_codepoint_t glyph, bool is_vertical);\n+\n+HB_INTERNAL unsigned\n+_glyf_get_advance_var (hb_font_t *font, hb_codepoint_t glyph, bool is_vertical);\n+\n+\n@@ -56,0 +63,1 @@\n+\n@@ -69,1 +77,1 @@\n-                                    unsigned int num_hmetrics) const\n+                             unsigned int num_hmetrics) const\n@@ -81,1 +89,1 @@\n-    table->numberOfLongMetrics.set (num_hmetrics);\n+    table->numberOfLongMetrics = num_hmetrics;\n@@ -89,1 +97,5 @@\n-  bool subset (hb_subset_plan_t *plan) const\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  Iterator it,\n+                  unsigned num_advances)\n@@ -91,19 +103,2 @@\n-    typename T::accelerator_t _mtx;\n-    _mtx.init (plan->source);\n-\n-    \/* All the trailing glyphs with the same advance can use one LongMetric\n-     * and just keep LSB *\/\n-    hb_vector_t<hb_codepoint_t> &gids = plan->glyphs;\n-    unsigned int num_advances = gids.length;\n-    unsigned int last_advance = _mtx.get_advance (gids[num_advances - 1]);\n-    while (num_advances > 1 &&\n-           last_advance == _mtx.get_advance (gids[num_advances - 2]))\n-    {\n-      num_advances--;\n-    }\n-\n-    \/* alloc the new table *\/\n-    size_t dest_sz = num_advances * 4\n-                  + (gids.length - num_advances) * 2;\n-    void *dest = (void *) malloc (dest_sz);\n-    if (unlikely (!dest))\n+    unsigned idx = 0;\n+    for (auto _ : it)\n@@ -111,17 +106,1 @@\n-      return false;\n-    }\n-    DEBUG_MSG(SUBSET, nullptr, \"%c%c%c%c in src has %d advances, %d lsbs\", HB_UNTAG(T::tableTag), _mtx.num_advances, _mtx.num_metrics - _mtx.num_advances);\n-    DEBUG_MSG(SUBSET, nullptr, \"%c%c%c%c in dest has %d advances, %d lsbs, %u bytes\", HB_UNTAG(T::tableTag), num_advances, gids.length - num_advances, (unsigned int) dest_sz);\n-\n-    const char *source_table = hb_blob_get_data (_mtx.table.get_blob (), nullptr);\n-    \/\/ Copy everything over\n-    LongMetric * old_metrics = (LongMetric *) source_table;\n-    FWORD *lsbs = (FWORD *) (old_metrics + _mtx.num_advances);\n-    char * dest_pos = (char *) dest;\n-\n-    bool failed = false;\n-    for (unsigned int i = 0; i < gids.length; i++)\n-    {\n-      \/* the last metric or the one for gids[i] *\/\n-      LongMetric *src_metric = old_metrics + MIN ((hb_codepoint_t) _mtx.num_advances - 1, gids[i]);\n-      if (gids[i] < _mtx.num_advances)\n+      if (idx < num_advances)\n@@ -129,11 +108,4 @@\n-        \/* src is a LongMetric *\/\n-        if (i < num_advances)\n-        {\n-          \/* dest is a LongMetric, copy it *\/\n-          *((LongMetric *) dest_pos) = *src_metric;\n-        }\n-        else\n-        {\n-          \/* dest just sb *\/\n-          *((FWORD *) dest_pos) = src_metric->sb;\n-        }\n+        LongMetric lm;\n+        lm.advance = _.first;\n+        lm.sb = _.second;\n+        if (unlikely (!c->embed<LongMetric> (&lm))) return;\n@@ -143,20 +115,3 @@\n-        if (gids[i] >= _mtx.num_metrics)\n-        {\n-          DEBUG_MSG(SUBSET, nullptr, \"gid %d is >= number of source metrics %d\",\n-                    gids[i], _mtx.num_metrics);\n-          failed = true;\n-          break;\n-        }\n-        FWORD src_sb = *(lsbs + gids[i] - _mtx.num_advances);\n-        if (i < num_advances)\n-        {\n-          \/* dest needs a full LongMetric *\/\n-          LongMetric *metric = (LongMetric *)dest_pos;\n-          metric->advance = src_metric->advance;\n-          metric->sb = src_sb;\n-        }\n-        else\n-        {\n-          \/* dest just needs an sb *\/\n-          *((FWORD *) dest_pos) = src_sb;\n-        }\n+        FWORD *sb = c->allocate_size<FWORD> (FWORD::static_size);\n+        if (unlikely (!sb)) return;\n+        *sb = _.second;\n@@ -164,1 +119,1 @@\n-      dest_pos += (i < num_advances ? 4 : 2);\n+      idx++;\n@@ -166,0 +121,26 @@\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    T *table_prime = c->serializer->start_embed <T> ();\n+    if (unlikely (!table_prime)) return_trace (false);\n+\n+    accelerator_t _mtx;\n+    _mtx.init (c->plan->source);\n+    unsigned num_advances = _mtx.num_advances_for_subset (c->plan);\n+\n+    auto it =\n+    + hb_range (c->plan->num_output_glyphs ())\n+    | hb_map ([c, &_mtx] (unsigned _)\n+              {\n+                hb_codepoint_t old_gid;\n+                if (!c->plan->old_gid_for_new_gid (_, &old_gid))\n+                  return hb_pair (0u, 0);\n+                return hb_pair (_mtx.get_advance (old_gid), _mtx.get_side_bearing (old_gid));\n+              })\n+    ;\n+\n+    table_prime->serialize (c->serializer, it, num_advances);\n+\n@@ -168,0 +149,3 @@\n+    if (unlikely (c->serializer->ran_out_of_room || c->serializer->in_error ()))\n+      return_trace (false);\n+\n@@ -169,5 +153,2 @@\n-    if (failed || unlikely (!subset_update_header (plan, num_advances)))\n-    {\n-      free (dest);\n-      return false;\n-    }\n+    if (unlikely (!subset_update_header (c->plan, num_advances)))\n+      return_trace (false);\n@@ -175,8 +156,1 @@\n-    hb_blob_t *result = hb_blob_create ((const char *)dest,\n-                                        dest_sz,\n-                                        HB_MEMORY_MODE_READONLY,\n-                                        dest,\n-                                        free);\n-    bool success = plan->add_table (T::tableTag, result);\n-    hb_blob_destroy (result);\n-    return success;\n+    return_trace (true);\n@@ -190,1 +164,1 @@\n-                      unsigned int default_advance_ = 0)\n+               unsigned int default_advance_ = 0)\n@@ -194,8 +168,1 @@\n-      bool got_font_extents = false;\n-      if (T::os2Tag != HB_TAG_NONE && face->table.OS2->is_typo_metrics ())\n-      {\n-        ascender = abs (face->table.OS2->sTypoAscender);\n-        descender = -abs (face->table.OS2->sTypoDescender);\n-        line_gap = face->table.OS2->sTypoLineGap;\n-        got_font_extents = (ascender | descender) != 0;\n-      }\n+      num_advances = T::is_horizontal ? face->table.hhea->numberOfLongMetrics : face->table.vhea->numberOfLongMetrics;\n@@ -203,15 +170,1 @@\n-      hb_blob_t *_hea_blob = hb_sanitize_context_t().reference_table<H> (face);\n-      const H *_hea_table = _hea_blob->as<H> ();\n-      num_advances = _hea_table->numberOfLongMetrics;\n-      if (!got_font_extents)\n-      {\n-        ascender = abs (_hea_table->ascender);\n-        descender = -abs (_hea_table->descender);\n-        line_gap = _hea_table->lineGap;\n-        got_font_extents = (ascender | descender) != 0;\n-      }\n-      hb_blob_destroy (_hea_blob);\n-\n-      has_font_extents = got_font_extents;\n-\n-      table = hb_sanitize_context_t().reference_table<hmtxvmtx> (face, T::tableTag);\n+      table = hb_sanitize_context_t ().reference_table<hmtxvmtx> (face, T::tableTag);\n@@ -234,1 +187,1 @@\n-      var_table = hb_sanitize_context_t().reference_table<HVARVVAR> (face, T::variationsTag);\n+      var_table = hb_sanitize_context_t ().reference_table<HVARVVAR> (face, T::variationsTag);\n@@ -243,2 +196,1 @@\n-    \/* TODO Add variations version. *\/\n-    unsigned int get_side_bearing (hb_codepoint_t glyph) const\n+    int get_side_bearing (hb_codepoint_t glyph) const\n@@ -256,0 +208,17 @@\n+    int get_side_bearing (hb_font_t *font, hb_codepoint_t glyph) const\n+    {\n+      int side_bearing = get_side_bearing (glyph);\n+\n+#ifndef HB_NO_VAR\n+      if (unlikely (glyph >= num_metrics) || !font->num_coords)\n+        return side_bearing;\n+\n+      if (var_table.get_length ())\n+        return side_bearing + var_table->get_side_bearing_var (glyph, font->coords, font->num_coords); \/\/ TODO Optimize?!\n+\n+      return _glyf_get_side_bearing_var (font, glyph, T::tableTag == HB_OT_TAG_vmtx);\n+#else\n+      return side_bearing;\n+#endif\n+    }\n+\n@@ -269,1 +238,1 @@\n-      return table->longMetricZ[MIN (glyph, (uint32_t) num_advances - 1)].advance;\n+      return table->longMetricZ[hb_min (glyph, (uint32_t) num_advances - 1)].advance;\n@@ -276,1 +245,22 @@\n-      if (likely (glyph < num_metrics))\n+\n+#ifndef HB_NO_VAR\n+      if (unlikely (glyph >= num_metrics) || !font->num_coords)\n+        return advance;\n+\n+      if (var_table.get_length ())\n+        return advance + roundf (var_table->get_advance_var (glyph, font)); \/\/ TODO Optimize?!\n+\n+      return _glyf_get_advance_var (font, glyph, T::tableTag == HB_OT_TAG_vmtx);\n+#else\n+      return advance;\n+#endif\n+    }\n+\n+    unsigned int num_advances_for_subset (const hb_subset_plan_t *plan) const\n+    {\n+      unsigned int num_advances = plan->num_output_glyphs ();\n+      unsigned int last_advance = _advance_for_new_gid (plan,\n+                                                        num_advances - 1);\n+      while (num_advances > 1 &&\n+             last_advance == _advance_for_new_gid (plan,\n+                                                   num_advances - 2))\n@@ -278,1 +268,1 @@\n-        advance += (font->num_coords ? var_table->get_advance_var (glyph, font->coords, font->num_coords) : 0); \/\/ TODO Optimize?!\n+        num_advances--;\n@@ -280,1 +270,2 @@\n-      return advance;\n+\n+      return num_advances;\n@@ -283,5 +274,10 @@\n-    public:\n-    bool has_font_extents;\n-    int ascender;\n-    int descender;\n-    int line_gap;\n+    private:\n+    unsigned int _advance_for_new_gid (const hb_subset_plan_t *plan,\n+                                       hb_codepoint_t new_gid) const\n+    {\n+      hb_codepoint_t old_gid;\n+      if (!plan->old_gid_for_new_gid (new_gid, &old_gid))\n+        return 0;\n+\n+      return get_advance (old_gid);\n+    }\n@@ -300,21 +296,23 @@\n-  UnsizedArrayOf<LongMetric>longMetricZ;\/* Paired advance width and leading\n-                                         * bearing values for each glyph. The\n-                                         * value numOfHMetrics comes from\n-                                         * the 'hhea' table. If the font is\n-                                         * monospaced, only one entry need\n-                                         * be in the array, but that entry is\n-                                         * required. The last entry applies to\n-                                         * all subsequent glyphs. *\/\n-\/*UnsizedArrayOf<FWORD> leadingBearingX;*\/\/* Here the advance is assumed\n-                                         * to be the same as the advance\n-                                         * for the last entry above. The\n-                                         * number of entries in this array is\n-                                         * derived from numGlyphs (from 'maxp'\n-                                         * table) minus numberOfLongMetrics.\n-                                         * This generally is used with a run\n-                                         * of monospaced glyphs (e.g., Kanji\n-                                         * fonts or Courier fonts). Only one\n-                                         * run is allowed and it must be at\n-                                         * the end. This allows a monospaced\n-                                         * font to vary the side bearing\n-                                         * values for each glyph. *\/\n+  UnsizedArrayOf<LongMetric>\n+                longMetricZ;    \/* Paired advance width and leading\n+                                 * bearing values for each glyph. The\n+                                 * value numOfHMetrics comes from\n+                                 * the 'hhea' table. If the font is\n+                                 * monospaced, only one entry need\n+                                 * be in the array, but that entry is\n+                                 * required. The last entry applies to\n+                                 * all subsequent glyphs. *\/\n+\/*UnsizedArrayOf<FWORD> leadingBearingX;*\/\n+                                \/* Here the advance is assumed\n+                                 * to be the same as the advance\n+                                 * for the last entry above. The\n+                                 * number of entries in this array is\n+                                 * derived from numGlyphs (from 'maxp'\n+                                 * table) minus numberOfLongMetrics.\n+                                 * This generally is used with a run\n+                                 * of monospaced glyphs (e.g., Kanji\n+                                 * fonts or Courier fonts). Only one\n+                                 * run is allowed and it must be at\n+                                 * the end. This allows a monospaced\n+                                 * font to vary the side bearing\n+                                 * values for each glyph. *\/\n@@ -328,1 +326,1 @@\n-  static constexpr hb_tag_t os2Tag = HB_OT_TAG_OS2;\n+  static constexpr bool is_horizontal = true;\n@@ -333,1 +331,1 @@\n-  static constexpr hb_tag_t os2Tag = HB_TAG_NONE;\n+  static constexpr bool is_horizontal = false;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-hmtx-table.hh","additions":142,"deletions":144,"binary":false,"changes":286,"status":"modified"},{"patch":"@@ -50,3 +50,3 @@\n-    hb_array_t<const HBUINT8> leftClass = StructAfter<const UnsizedArrayOf<HBUINT8> > (kernValue).as_array (glyphCount);\n-    hb_array_t<const HBUINT8> rightClass = StructAfter<const UnsizedArrayOf<HBUINT8> > (leftClass).as_array (glyphCount);\n-    hb_array_t<const HBUINT8> kernIndex = StructAfter<const UnsizedArrayOf<HBUINT8> > (rightClass).as_array (leftClassCount * rightClassCount);\n+    hb_array_t<const HBUINT8> leftClass = StructAfter<const UnsizedArrayOf<HBUINT8>> (kernValue).as_array (glyphCount);\n+    hb_array_t<const HBUINT8> rightClass = StructAfter<const UnsizedArrayOf<HBUINT8>> (leftClass).as_array (glyphCount);\n+    hb_array_t<const HBUINT8> kernIndex = StructAfter<const UnsizedArrayOf<HBUINT8>> (rightClass).as_array (leftClassCount * rightClassCount);\n@@ -89,8 +89,10 @@\n-  KernSubTableHeader    header;\n-  HBUINT16              glyphCount;     \/* The number of glyphs in this font. *\/\n-  HBUINT8               kernValueCount; \/* The number of kerning values. *\/\n-  HBUINT8               leftClassCount; \/* The number of left-hand classes. *\/\n-  HBUINT8               rightClassCount;\/* The number of right-hand classes. *\/\n-  HBUINT8               flags;          \/* Set to zero (reserved for future use). *\/\n-  UnsizedArrayOf<FWORD> kernValueZ;     \/* The kerning values.\n-                                         * Length kernValueCount. *\/\n+  KernSubTableHeader\n+                header;\n+  HBUINT16      glyphCount;     \/* The number of glyphs in this font. *\/\n+  HBUINT8       kernValueCount; \/* The number of kerning values. *\/\n+  HBUINT8       leftClassCount; \/* The number of left-hand classes. *\/\n+  HBUINT8       rightClassCount;\/* The number of right-hand classes. *\/\n+  HBUINT8       flags;          \/* Set to zero (reserved for future use). *\/\n+  UnsizedArrayOf<FWORD>\n+                kernValueZ;     \/* The kerning values.\n+                                 * Length kernValueCount. *\/\n@@ -98,6 +100,9 @@\n-  UnsizedArrayOf<HBUINT8>leftClass;     \/* The left-hand classes.\n-                                         * Length glyphCount. *\/\n-  UnsizedArrayOf<HBUINT8>rightClass;    \/* The right-hand classes.\n-                                         * Length glyphCount. *\/\n-  UnsizedArrayOf<HBUINT8>kernIndex;     \/* The indices into the kernValue array.\n-                                         * Length leftClassCount * rightClassCount *\/\n+  UnsizedArrayOf<HBUINT8>\n+                leftClass;      \/* The left-hand classes.\n+                                 * Length glyphCount. *\/\n+  UnsizedArrayOf<HBUINT8>\n+                rightClass;     \/* The right-hand classes.\n+                                 * Length glyphCount. *\/\n+  UnsizedArrayOf<HBUINT8>kernIndex;\n+                                \/* The indices into the kernValue array.\n+                                 * Length leftClassCount * rightClassCount *\/\n@@ -124,2 +129,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -131,1 +136,3 @@\n-    case 1:     return_trace (u.header.apple ? c->dispatch (u.format1) : c->default_return_value ());\n+#ifndef HB_NO_AAT_SHAPE\n+    case 1:     return_trace (u.header.apple ? c->dispatch (u.format1, hb_forward<Ts> (ds)...) : c->default_return_value ());\n+#endif\n@@ -133,1 +140,3 @@\n-    case 3:     return_trace (u.header.apple ? c->dispatch (u.format3) : c->default_return_value ());\n+#ifndef HB_NO_AAT_SHAPE\n+    case 3:     return_trace (u.header.apple ? c->dispatch (u.format3, hb_forward<Ts> (ds)...) : c->default_return_value ());\n+#endif\n@@ -166,2 +175,2 @@\n-  unsigned int tuple_count () const { return 0; }\n-  bool is_horizontal () const { return (coverage & Horizontal); }\n+  unsigned   tuple_count () const { return 0; }\n+  bool     is_horizontal () const { return (coverage & Horizontal); }\n@@ -221,2 +230,2 @@\n-  unsigned int tuple_count () const { return 0; }\n-  bool is_horizontal () const       { return !(coverage & Vertical); }\n+  unsigned   tuple_count () const { return 0; }\n+  bool     is_horizontal () const { return !(coverage & Vertical); }\n@@ -245,2 +254,2 @@\n-                               * This value specifies which tuple this subtable covers.\n-                               * Note: We don't implement. *\/\n+                                 * This value specifies which tuple this subtable covers.\n+                                 * Note: We don't implement. *\/\n@@ -274,2 +283,2 @@\n-  bool has_data () const { return u.version32; }\n-  unsigned int get_type () const { return u.major; }\n+  bool     has_data () const { return u.version32; }\n+  unsigned get_type () const { return u.major; }\n@@ -281,0 +290,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -282,0 +292,1 @@\n+#endif\n@@ -290,0 +301,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -291,0 +303,1 @@\n+#endif\n@@ -299,0 +312,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -300,0 +314,1 @@\n+#endif\n@@ -307,2 +322,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -313,2 +328,4 @@\n-    case 0:     return_trace (c->dispatch (u.ot));\n-    case 1:     return_trace (c->dispatch (u.aat));\n+    case 0:     return_trace (c->dispatch (u.ot, hb_forward<Ts> (ds)...));\n+#ifndef HB_NO_AAT_SHAPE\n+    case 1:     return_trace (c->dispatch (u.aat, hb_forward<Ts> (ds)...));\n+#endif\n@@ -331,0 +348,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -332,0 +350,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-kern-table.hh","additions":52,"deletions":33,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright © 2016 Elie Roux <elie.roux@telecom-bretagne.eu>\n+ * Copyright © 2016  Elie Roux <elie.roux@telecom-bretagne.eu>\n@@ -4,1 +4,1 @@\n- * Copyright © 2018  Ebrahim Byagowi\n+ * Copyright © 2018-2019  Ebrahim Byagowi\n@@ -35,3 +35,0 @@\n-\/* To be removed *\/\n-typedef hb_tag_t hb_ot_layout_baseline_t;\n-\n@@ -79,1 +76,1 @@\n-  GlyphID       referenceGlyph; \/* Glyph ID of control glyph *\/\n+  HBGlyphID     referenceGlyph; \/* Glyph ID of control glyph *\/\n@@ -119,1 +116,3 @@\n-  hb_position_t get_coord (hb_font_t *font,\n+  bool has_data () const { return u.format; }\n+\n+  hb_position_t get_coord (hb_font_t            *font,\n@@ -121,1 +120,1 @@\n-                           hb_direction_t direction) const\n+                           hb_direction_t        direction) const\n@@ -145,4 +144,4 @@\n-    HBUINT16            format;\n-    BaseCoordFormat1    format1;\n-    BaseCoordFormat2    format2;\n-    BaseCoordFormat3    format3;\n+  HBUINT16              format;\n+  BaseCoordFormat1      format1;\n+  BaseCoordFormat2      format2;\n+  BaseCoordFormat3      format3;\n@@ -156,8 +155,3 @@\n-  static int cmp (const void *key_, const void *entry_)\n-  {\n-    hb_tag_t key = * (hb_tag_t *) key_;\n-    const FeatMinMaxRecord &entry = * (const FeatMinMaxRecord *) entry_;\n-    return key < (unsigned int) entry.tag ? -1 :\n-           key > (unsigned int) entry.tag ? 1 :\n-           0;\n-  }\n+  int cmp (hb_tag_t key) const { return tag.cmp (key); }\n+\n+  bool has_data () const { return tag; }\n@@ -198,2 +192,2 @@\n-                           const BaseCoord **min,\n-                           const BaseCoord **max) const\n+                    const BaseCoord **min,\n+                    const BaseCoord **max) const\n@@ -201,8 +195,3 @@\n-    \/* TODO Replace hb_bsearch() with .bsearch(). *\/\n-    const FeatMinMaxRecord *minMaxCoord = (const FeatMinMaxRecord *)\n-                                          hb_bsearch (&feature_tag, featMinMaxRecords.arrayZ,\n-                                                      featMinMaxRecords.len,\n-                                                      FeatMinMaxRecord::static_size,\n-                                                      FeatMinMaxRecord::cmp);\n-    if (minMaxCoord)\n-      minMaxCoord->get_min_max (min, max);\n+    const FeatMinMaxRecord &minMaxCoord = featMinMaxRecords.bsearch (feature_tag);\n+    if (minMaxCoord.has_data ())\n+      minMaxCoord.get_min_max (min, max);\n@@ -274,8 +263,3 @@\n-  static int cmp (const void *key_, const void *entry_)\n-  {\n-    hb_tag_t key = * (hb_tag_t *) key_;\n-    const BaseLangSysRecord &entry = * (const BaseLangSysRecord *) entry_;\n-    return key < (unsigned int) entry.baseLangSysTag ? -1 :\n-           key > (unsigned int) entry.baseLangSysTag ? 1 :\n-           0;\n-  }\n+  int cmp (hb_tag_t key) const { return baseLangSysTag.cmp (key); }\n+\n+  bool has_data () const { return baseLangSysTag; }\n@@ -283,2 +267,1 @@\n-  const MinMax &get_min_max () const\n-  { return this+minMax; }\n+  const MinMax &get_min_max () const { return this+minMax; }\n@@ -306,7 +289,2 @@\n-    \/* TODO Replace hb_bsearch() with .bsearch(). *\/\n-    const BaseLangSysRecord* record = (const BaseLangSysRecord *)\n-                                      hb_bsearch (&language_tag, baseLangSysRecords.arrayZ,\n-                                                  baseLangSysRecords.len,\n-                                                  BaseLangSysRecord::static_size,\n-                                                  BaseLangSysRecord::cmp);\n-    return record ? record->get_min_max () : this+defaultMinMax;\n+    const BaseLangSysRecord& record = baseLangSysRecords.bsearch (language_tag);\n+    return record.has_data () ? record.get_min_max () : this+defaultMinMax;\n@@ -318,1 +296,1 @@\n-  bool is_empty () const { return !baseValues; }\n+  bool has_data () const { return baseValues; }\n@@ -348,8 +326,3 @@\n-  static int cmp (const void *key_, const void *entry_)\n-  {\n-    hb_tag_t key = * (hb_tag_t *) key_;\n-    const BaseScriptRecord &entry = * (const BaseScriptRecord *) entry_;\n-    return key < (unsigned int) entry.baseScriptTag ? -1 :\n-           key > (unsigned int) entry.baseScriptTag ? 1 :\n-           0;\n-  }\n+  int cmp (hb_tag_t key) const { return baseScriptTag.cmp (key); }\n+\n+  bool has_data () const { return baseScriptTag; }\n@@ -379,10 +352,0 @@\n-  const BaseScriptRecord *find_record (hb_tag_t script) const\n-  {\n-    \/* TODO Replace hb_bsearch() with .bsearch(). *\/\n-    return (const BaseScriptRecord *) hb_bsearch (&script, baseScriptRecords.arrayZ,\n-                                                  baseScriptRecords.len,\n-                                                  BaseScriptRecord::static_size,\n-                                                  BaseScriptRecord::cmp);\n-  }\n-\n-  \/* TODO: Or client should handle fallback? *\/\n@@ -391,4 +354,3 @@\n-    const BaseScriptRecord *record = find_record (script);\n-    if (!record) record = find_record ((hb_script_t) HB_TAG ('D','F','L','T'));\n-\n-    return record ? record->get_base_script (this) : Null (BaseScript);\n+    const BaseScriptRecord *record = &baseScriptRecords.bsearch (script);\n+    if (!record->has_data ()) record = &baseScriptRecords.bsearch (HB_TAG ('D','F','L','T'));\n+    return record->has_data () ? record->get_base_script (this) : Null (BaseScript);\n@@ -414,4 +376,4 @@\n-  bool get_baseline (hb_ot_layout_baseline_t   baseline,\n-                            hb_tag_t                  script_tag,\n-                            hb_tag_t                  language_tag,\n-                            const BaseCoord         **coord) const\n+  bool get_baseline (hb_tag_t          baseline_tag,\n+                     hb_tag_t          script_tag,\n+                     hb_tag_t          language_tag,\n+                     const BaseCoord **coord) const\n@@ -420,1 +382,1 @@\n-    if (base_script.is_empty ()) return false;\n+    if (!base_script.has_data ()) return false;\n@@ -422,1 +384,6 @@\n-    if (likely (coord)) *coord = &base_script.get_base_coord ((this+baseTagList).bsearch (baseline));\n+    if (likely (coord))\n+    {\n+      unsigned int tag_index = 0;\n+      (this+baseTagList).bfind (baseline_tag, &tag_index);\n+      *coord = &base_script.get_base_coord (tag_index);\n+    }\n@@ -434,1 +401,1 @@\n-    if (base_script.is_empty ()) return false;\n+    if (!base_script.has_data ()) return false;\n@@ -450,1 +417,1 @@\n-  OffsetTo<SortedArrayOf<Tag> >\n+  OffsetTo<SortedArrayOf<Tag>>\n@@ -475,6 +442,6 @@\n-  bool get_baseline (hb_font_t               *font,\n-                     hb_ot_layout_baseline_t  baseline,\n-                     hb_direction_t           direction,\n-                     hb_tag_t                 script_tag,\n-                     hb_tag_t                 language_tag,\n-                     hb_position_t           *base) const\n+  bool get_baseline (hb_font_t      *font,\n+                     hb_tag_t        baseline_tag,\n+                     hb_direction_t  direction,\n+                     hb_tag_t        script_tag,\n+                     hb_tag_t        language_tag,\n+                     hb_position_t  *base) const\n@@ -482,2 +449,3 @@\n-    const BaseCoord *base_coord;\n-    if (!get_axis (direction).get_baseline (baseline, script_tag, language_tag, &base_coord))\n+    const BaseCoord *base_coord = nullptr;\n+    if (unlikely (!get_axis (direction).get_baseline (baseline_tag, script_tag, language_tag, &base_coord) ||\n+                  !base_coord || !base_coord->has_data ()))\n@@ -486,3 +454,3 @@\n-    if (likely (base && base_coord)) *base = base_coord->get_coord (font,\n-                                                                    get_var_store (),\n-                                                                    direction);\n+    if (likely (base))\n+      *base = base_coord->get_coord (font, get_var_store (), direction);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-base-table.hh","additions":57,"deletions":89,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"hb-bimap.hh\"\n@@ -62,0 +63,12 @@\n+#ifndef HB_MAX_FEATURES\n+#define HB_MAX_FEATURES 750\n+#endif\n+\n+#ifndef HB_MAX_FEATURE_INDICES\n+#define HB_MAX_FEATURE_INDICES  1500\n+#endif\n+\n+#ifndef HB_MAX_LOOKUP_INDICES\n+#define HB_MAX_LOOKUP_INDICES   20000\n+#endif\n+\n@@ -69,0 +82,207 @@\n+template<typename Iterator>\n+static inline void Coverage_serialize (hb_serialize_context_t *c,\n+                                       Iterator it);\n+\n+template<typename Iterator>\n+static inline void ClassDef_serialize (hb_serialize_context_t *c,\n+                                       Iterator it);\n+\n+static void ClassDef_remap_and_serialize (hb_serialize_context_t *c,\n+                                          const hb_set_t &glyphset,\n+                                          const hb_map_t &gid_klass_map,\n+                                          hb_sorted_vector_t<HBGlyphID> &glyphs,\n+                                          const hb_set_t &klasses,\n+                                          hb_map_t *klass_map \/*INOUT*\/);\n+\n+struct hb_subset_layout_context_t :\n+  hb_dispatch_context_t<hb_subset_layout_context_t, hb_empty_t, HB_DEBUG_SUBSET>\n+{\n+  const char *get_name () { return \"SUBSET_LAYOUT\"; }\n+  static return_t default_return_value () { return hb_empty_t (); }\n+\n+  bool visitScript ()\n+  {\n+    return script_count++ < HB_MAX_SCRIPTS;\n+  }\n+\n+  bool visitLangSys ()\n+  {\n+    return langsys_count++ < HB_MAX_LANGSYS;\n+  }\n+\n+  bool visitFeatureIndex (int count)\n+  {\n+    feature_index_count += count;\n+    return feature_index_count < HB_MAX_FEATURE_INDICES;\n+  }\n+\n+  bool visitLookupIndex()\n+  {\n+    lookup_index_count++;\n+    return lookup_index_count < HB_MAX_LOOKUP_INDICES;\n+  }\n+\n+  hb_subset_context_t *subset_context;\n+  const hb_tag_t table_tag;\n+  const hb_map_t *lookup_index_map;\n+  const hb_map_t *feature_index_map;\n+\n+  hb_subset_layout_context_t (hb_subset_context_t *c_,\n+                              hb_tag_t tag_,\n+                              hb_map_t *lookup_map_,\n+                              hb_map_t *feature_map_) :\n+                                subset_context (c_),\n+                                table_tag (tag_),\n+                                lookup_index_map (lookup_map_),\n+                                feature_index_map (feature_map_),\n+                                script_count (0),\n+                                langsys_count (0),\n+                                feature_index_count (0),\n+                                lookup_index_count (0)\n+  {}\n+\n+  private:\n+  unsigned script_count;\n+  unsigned langsys_count;\n+  unsigned feature_index_count;\n+  unsigned lookup_index_count;\n+};\n+\n+struct hb_collect_variation_indices_context_t :\n+       hb_dispatch_context_t<hb_collect_variation_indices_context_t>\n+{\n+  template <typename T>\n+  return_t dispatch (const T &obj) { obj.collect_variation_indices (this); return hb_empty_t (); }\n+  static return_t default_return_value () { return hb_empty_t (); }\n+\n+  hb_set_t *layout_variation_indices;\n+  const hb_set_t *glyph_set;\n+  const hb_map_t *gpos_lookups;\n+\n+  hb_collect_variation_indices_context_t (hb_set_t *layout_variation_indices_,\n+                                          const hb_set_t *glyph_set_,\n+                                          const hb_map_t *gpos_lookups_) :\n+                                        layout_variation_indices (layout_variation_indices_),\n+                                        glyph_set (glyph_set_),\n+                                        gpos_lookups (gpos_lookups_) {}\n+};\n+\n+template<typename OutputArray>\n+struct subset_offset_array_t\n+{\n+  subset_offset_array_t (hb_subset_context_t *subset_context_,\n+                         OutputArray& out_,\n+                         const void *base_) : subset_context (subset_context_),\n+                                              out (out_), base (base_) {}\n+\n+  template <typename T>\n+  bool operator () (T&& offset)\n+  {\n+    auto *o = out.serialize_append (subset_context->serializer);\n+    if (unlikely (!o)) return false;\n+    auto snap = subset_context->serializer->snapshot ();\n+    bool ret = o->serialize_subset (subset_context, offset, base);\n+    if (!ret)\n+    {\n+      out.pop ();\n+      subset_context->serializer->revert (snap);\n+    }\n+    return ret;\n+  }\n+\n+  private:\n+  hb_subset_context_t *subset_context;\n+  OutputArray &out;\n+  const void *base;\n+};\n+\n+\n+template<typename OutputArray, typename Arg>\n+struct subset_offset_array_arg_t\n+{\n+  subset_offset_array_arg_t (hb_subset_context_t *subset_context_,\n+                             OutputArray& out_,\n+                             const void *base_,\n+                             Arg &&arg_) : subset_context (subset_context_), out (out_),\n+                                          base (base_), arg (arg_) {}\n+\n+  template <typename T>\n+  bool operator () (T&& offset)\n+  {\n+    auto *o = out.serialize_append (subset_context->serializer);\n+    if (unlikely (!o)) return false;\n+    auto snap = subset_context->serializer->snapshot ();\n+    bool ret = o->serialize_subset (subset_context, offset, base, arg);\n+    if (!ret)\n+    {\n+      out.pop ();\n+      subset_context->serializer->revert (snap);\n+    }\n+    return ret;\n+  }\n+\n+  private:\n+  hb_subset_context_t *subset_context;\n+  OutputArray &out;\n+  const void *base;\n+  Arg &&arg;\n+};\n+\n+\/*\n+ * Helper to subset an array of offsets. Subsets the thing pointed to by each offset\n+ * and discards the offset in the array if the subset operation results in an empty\n+ * thing.\n+ *\/\n+struct\n+{\n+  template<typename OutputArray>\n+  subset_offset_array_t<OutputArray>\n+  operator () (hb_subset_context_t *subset_context, OutputArray& out,\n+               const void *base) const\n+  { return subset_offset_array_t<OutputArray> (subset_context, out, base); }\n+\n+  \/* Variant with one extra argument passed to serialize_subset *\/\n+  template<typename OutputArray, typename Arg>\n+  subset_offset_array_arg_t<OutputArray, Arg>\n+  operator () (hb_subset_context_t *subset_context, OutputArray& out,\n+               const void *base, Arg &&arg) const\n+  { return subset_offset_array_arg_t<OutputArray, Arg> (subset_context, out, base, arg); }\n+}\n+HB_FUNCOBJ (subset_offset_array);\n+\n+template<typename OutputArray>\n+struct subset_record_array_t\n+{\n+  subset_record_array_t (hb_subset_layout_context_t *c_, OutputArray* out_,\n+                         const void *base_) : subset_layout_context (c_),\n+                                              out (out_), base (base_) {}\n+\n+  template <typename T>\n+  void\n+  operator () (T&& record)\n+  {\n+    auto snap = subset_layout_context->subset_context->serializer->snapshot ();\n+    bool ret = record.subset (subset_layout_context, base);\n+    if (!ret) subset_layout_context->subset_context->serializer->revert (snap);\n+    else out->len++;\n+  }\n+\n+  private:\n+  hb_subset_layout_context_t *subset_layout_context;\n+  OutputArray *out;\n+  const void *base;\n+};\n+\n+\/*\n+ * Helper to subset a RecordList\/record array. Subsets each Record in the array and\n+ * discards the record if the subset operation returns false.\n+ *\/\n+struct\n+{\n+  template<typename OutputArray>\n+  subset_record_array_t<OutputArray>\n+  operator () (hb_subset_layout_context_t *c, OutputArray* out,\n+               const void *base) const\n+  { return subset_record_array_t<OutputArray> (c, out, base); }\n+}\n+HB_FUNCOBJ (subset_record_array);\n@@ -91,0 +311,9 @@\n+  bool subset (hb_subset_layout_context_t *c, const void *base) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->subset_context->serializer->embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+    bool ret = out->offset.serialize_subset (c->subset_context, offset, base, c, &tag);\n+    return_trace (ret);\n+  }\n+\n@@ -107,1 +336,1 @@\n-struct RecordArrayOf : SortedArrayOf<Record<Type> >\n+struct RecordArrayOf : SortedArrayOf<Record<Type>>\n@@ -119,5 +348,6 @@\n-    if (record_count) {\n-      const Record<Type> *arr = this->sub_array (start_offset, record_count);\n-      unsigned int count = *record_count;\n-      for (unsigned int i = 0; i < count; i++)\n-        record_tags[i] = arr[i].tag;\n+    if (record_count)\n+    {\n+      + this->sub_array (start_offset, record_count)\n+      | hb_map (&Record<Type>::tag)\n+      | hb_sink (hb_array (record_tags, *record_count))\n+      ;\n@@ -139,1 +369,2 @@\n-  bool subset (hb_subset_context_t *c) const\n+  bool subset (hb_subset_context_t *c,\n+               hb_subset_layout_context_t *l) const\n@@ -142,5 +373,6 @@\n-    struct RecordListOf<Type> *out = c->serializer->embed (*this);\n-    if (unlikely (!out)) return_trace (false);\n-    unsigned int count = this->len;\n-    for (unsigned int i = 0; i < count; i++)\n-      out->get_offset (i).serialize_subset (c, (*this)[i], out);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    + this->iter ()\n+    | hb_apply (subset_record_array (l, out, this))\n+    ;\n@@ -157,0 +389,20 @@\n+struct Feature;\n+\n+struct RecordListOfFeature : RecordListOf<Feature>\n+{\n+  bool subset (hb_subset_context_t *c,\n+               hb_subset_layout_context_t *l) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    unsigned count = this->len;\n+    + hb_zip (*this, hb_range (count))\n+    | hb_filter (l->feature_index_map, hb_second)\n+    | hb_map (hb_first)\n+    | hb_apply (subset_record_array (l, out, this))\n+    ;\n+    return_trace (true);\n+  }\n+};\n@@ -161,1 +413,1 @@\n-  { return g < start ? -1 : g <= end ? 0 : +1; }\n+  { return g < first ? -1 : g <= last ? 0 : +1; }\n@@ -170,1 +422,1 @@\n-  { return glyphs->intersects (start, end); }\n+  { return glyphs->intersects (first, last); }\n@@ -173,2 +425,2 @@\n-  bool add_coverage (set_t *glyphs) const\n-  { return glyphs->add_range (start, end); }\n+  bool collect_coverage (set_t *glyphs) const\n+  { return glyphs->add_range (first, last); }\n@@ -176,2 +428,2 @@\n-  GlyphID       start;          \/* First GlyphID in the range *\/\n-  GlyphID       end;            \/* Last GlyphID in the range *\/\n+  HBGlyphID     first;          \/* First GlyphID in the range *\/\n+  HBGlyphID     last;           \/* Last GlyphID in the range *\/\n@@ -187,0 +439,23 @@\n+  bool intersects (const hb_map_t *indexes) const\n+  { return hb_any (*this, indexes); }\n+\n+  template <typename Iterator,\n+            hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  hb_subset_layout_context_t *l,\n+                  Iterator it)\n+  {\n+    if (!it) return;\n+    if (unlikely (!c->extend_min ((*this)))) return;\n+\n+    for (const auto _ : it)\n+    {\n+      if (!l->visitLookupIndex()) break;\n+\n+      Index i;\n+      i = _;\n+      c->copy (i);\n+      this->len++;\n+    }\n+  }\n+\n@@ -191,5 +466,5 @@\n-    if (_count) {\n-      const HBUINT16 *arr = this->sub_array (start_offset, _count);\n-      unsigned int count = *_count;\n-      for (unsigned int i = 0; i < count; i++)\n-        _indexes[i] = arr[i];\n+    if (_count)\n+    {\n+      + this->sub_array (start_offset, _count)\n+      | hb_sink (hb_array (_indexes, *_count))\n+      ;\n@@ -207,5 +482,0 @@\n-struct Script;\n-struct LangSys;\n-struct Feature;\n-\n-\n@@ -230,1 +500,1 @@\n-   return reqFeatureIndex;;\n+   return reqFeatureIndex;\n@@ -233,1 +503,21 @@\n-  bool subset (hb_subset_context_t *c) const\n+  LangSys* copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed (*this));\n+  }\n+\n+  bool operator == (const LangSys& o) const\n+  {\n+    if (featureIndex.len != o.featureIndex.len ||\n+        reqFeatureIndex != o.reqFeatureIndex)\n+      return false;\n+\n+    for (const auto _ : + hb_zip (featureIndex, o.featureIndex))\n+      if (_.first != _.second) return false;\n+\n+    return true;\n+  }\n+\n+  bool subset (hb_subset_context_t        *c,\n+               hb_subset_layout_context_t *l,\n+               const Tag                  *tag = nullptr) const\n@@ -236,1 +526,17 @@\n-    return_trace (c->serializer->embed (*this));\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    out->reqFeatureIndex = l->feature_index_map->has (reqFeatureIndex) ? l->feature_index_map->get (reqFeatureIndex) : 0xFFFFu;\n+\n+    if (!l->visitFeatureIndex (featureIndex.len))\n+      return_trace (false);\n+\n+    auto it =\n+    + hb_iter (featureIndex)\n+    | hb_filter (l->feature_index_map)\n+    | hb_map (l->feature_index_map)\n+    ;\n+\n+    bool ret = bool (it);\n+    out->featureIndex.serialize (c->serializer, l, it);\n+    return_trace (ret);\n@@ -278,1 +584,3 @@\n-  bool subset (hb_subset_context_t *c) const\n+  bool subset (hb_subset_context_t         *c,\n+               hb_subset_layout_context_t  *l,\n+               const Tag                   *tag) const\n@@ -281,7 +589,35 @@\n-    struct Script *out = c->serializer->embed (*this);\n-    if (unlikely (!out)) return_trace (false);\n-    out->defaultLangSys.serialize_subset (c, this+defaultLangSys, out);\n-    unsigned int count = langSys.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      out->langSys.arrayZ[i].offset.serialize_subset (c, this+langSys[i].offset, out);\n-    return_trace (true);\n+    if (!l->visitScript ()) return_trace (false);\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    bool defaultLang = false;\n+    if (has_default_lang_sys ())\n+    {\n+      c->serializer->push ();\n+      const LangSys& ls = this+defaultLangSys;\n+      bool ret = ls.subset (c, l);\n+      if (!ret && tag && *tag != HB_TAG ('D', 'F', 'L', 'T'))\n+      {\n+        c->serializer->pop_discard ();\n+        out->defaultLangSys = 0;\n+      }\n+      else\n+      {\n+        c->serializer->add_link (out->defaultLangSys, c->serializer->pop_pack ());\n+        defaultLang = true;\n+      }\n+    }\n+\n+    + langSys.iter ()\n+    | hb_filter ([=] (const Record<LangSys>& record) {return l->visitLangSys (); })\n+    | hb_filter ([&] (const Record<LangSys>& record)\n+                 {\n+                   const LangSys& d = this+defaultLangSys;\n+                   const LangSys& l = this+record.offset;\n+                   return !(l == d);\n+                 })\n+    | hb_apply (subset_record_array (l, &(out->langSys), this))\n+    ;\n+\n+    return_trace (bool (out->langSys.len) || defaultLang || l->table_tag == HB_OT_TAG_GSUB);\n@@ -384,0 +720,6 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    return_trace ((bool) c->serializer->embed (*this));\n+  }\n+\n@@ -434,0 +776,6 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    return_trace ((bool) c->serializer->embed (*this));\n+  }\n+\n@@ -460,0 +808,21 @@\n+  unsigned\n+  get_characters (unsigned start_offset, unsigned *char_count, hb_codepoint_t *chars) const\n+  {\n+    if (char_count)\n+    {\n+      + characters.sub_array (start_offset, char_count)\n+      | hb_sink (hb_array (chars, *char_count))\n+      ;\n+    }\n+    return characters.len;\n+  }\n+\n+  unsigned get_size () const\n+  { return min_size + characters.len * HBUINT24::static_size; }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    return_trace ((bool) c->serializer->embed (*this));\n+  }\n+\n@@ -503,0 +872,3 @@\n+#ifdef HB_NO_LAYOUT_FEATURE_PARAMS\n+    return true;\n+#endif\n@@ -513,0 +885,14 @@\n+  bool subset (hb_subset_context_t *c, const Tag* tag) const\n+  {\n+    TRACE_SUBSET (this);\n+    if (!tag) return_trace (false);\n+    if (*tag == HB_TAG ('s','i','z','e'))\n+      return_trace (u.size.subset (c));\n+    if ((*tag & 0xFFFF0000u) == HB_TAG ('s','s','\\0','\\0')) \/* ssXX *\/\n+      return_trace (u.stylisticSet.subset (c));\n+    if ((*tag & 0xFFFF0000u) == HB_TAG ('c','v','\\0','\\0')) \/* cvXX *\/\n+      return_trace (u.characterVariants.subset (c));\n+    return_trace (false);\n+  }\n+\n+#ifndef HB_NO_LAYOUT_FEATURE_PARAMS\n@@ -519,1 +905,0 @@\n-\n@@ -526,1 +911,0 @@\n-\n@@ -533,0 +917,1 @@\n+#endif\n@@ -541,1 +926,1 @@\n-  DEFINE_SIZE_STATIC (17);\n+  DEFINE_SIZE_MIN (0);\n@@ -560,1 +945,6 @@\n-  bool subset (hb_subset_context_t *c) const\n+  bool intersects_lookup_indexes (const hb_map_t *lookup_indexes) const\n+  { return lookupIndex.intersects (lookup_indexes); }\n+\n+  bool subset (hb_subset_context_t         *c,\n+               hb_subset_layout_context_t  *l,\n+               const Tag                   *tag = nullptr) const\n@@ -563,4 +953,14 @@\n-    struct Feature *out = c->serializer->embed (*this);\n-    if (unlikely (!out)) return_trace (false);\n-    out->featureParams.set (0); \/* TODO(subset) FeatureParams. *\/\n-    return_trace (true);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    bool subset_featureParams = out->featureParams.serialize_subset (c, featureParams, this, tag);\n+\n+    auto it =\n+    + hb_iter (lookupIndex)\n+    | hb_filter (l->lookup_index_map)\n+    | hb_map (l->lookup_index_map)\n+    ;\n+\n+    out->lookupIndex.serialize (c->serializer, l, it);\n+    return_trace (bool (it) || subset_featureParams\n+                  || (tag && *tag == HB_TAG ('p', 'r', 'e', 'f')));\n@@ -587,1 +987,4 @@\n-    OffsetTo<FeatureParams> orig_offset = featureParams;\n+    if (likely (featureParams.is_null ()))\n+      return_trace (true);\n+\n+    unsigned int orig_offset = featureParams;\n@@ -591,3 +994,0 @@\n-    if (likely (orig_offset.is_null ()))\n-      return_trace (true);\n-\n@@ -598,1 +998,1 @@\n-      unsigned int new_offset_int = (unsigned int) orig_offset -\n+      unsigned int new_offset_int = orig_offset -\n@@ -602,2 +1002,2 @@\n-      \/* Check that it did not overflow. *\/\n-      new_offset.set (new_offset_int);\n+      \/* Check that it would not overflow. *\/\n+      new_offset = new_offset_int;\n@@ -605,1 +1005,1 @@\n-          c->try_set (&featureParams, new_offset) &&\n+          c->try_set (&featureParams, new_offset_int) &&\n@@ -651,4 +1051,0 @@\n-  template <typename TSubTable>\n-  const TSubTable& get_subtable (unsigned int i) const\n-  { return this+CastR<OffsetArrayOf<TSubTable> > (subTable)[i]; }\n-\n@@ -657,1 +1053,1 @@\n-  { return CastR<OffsetArrayOf<TSubTable> > (subTable); }\n+  { return reinterpret_cast<const OffsetArrayOf<TSubTable> &> (subTable); }\n@@ -660,1 +1056,8 @@\n-  { return CastR<OffsetArrayOf<TSubTable> > (subTable); }\n+  { return reinterpret_cast<OffsetArrayOf<TSubTable> &> (subTable); }\n+\n+  template <typename TSubTable>\n+  const TSubTable& get_subtable (unsigned int i) const\n+  { return this+get_subtables<TSubTable> ()[i]; }\n+  template <typename TSubTable>\n+  TSubTable& get_subtable (unsigned int i)\n+  { return this+get_subtables<TSubTable> ()[i]; }\n@@ -686,2 +1089,2 @@\n-  template <typename TSubTable, typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename TSubTable, typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -693,1 +1096,1 @@\n-      typename context_t::return_t r = get_subtable<TSubTable> (i).dispatch (c, lookup_type);\n+      typename context_t::return_t r = get_subtable<TSubTable> (i).dispatch (c, lookup_type, hb_forward<Ts> (ds)...);\n@@ -707,2 +1110,2 @@\n-    lookupType.set (lookup_type);\n-    lookupFlag.set (lookup_props & 0xFFFFu);\n+    lookupType = lookup_type;\n+    lookupFlag = lookup_props & 0xFFFFu;\n@@ -714,1 +1117,1 @@\n-      markFilteringSet.set (lookup_props >> 16);\n+      markFilteringSet = lookup_props >> 16;\n@@ -719,17 +1122,0 @@\n-  \/* Older compilers need this to NOT be locally defined in a function. *\/\n-  template <typename TSubTable>\n-  struct SubTableSubsetWrapper\n-  {\n-    SubTableSubsetWrapper (const TSubTable &subtable_,\n-                           unsigned int lookup_type_) :\n-                             subtable (subtable_),\n-                             lookup_type (lookup_type_) {}\n-\n-    bool subset (hb_subset_context_t *c) const\n-    { return subtable.dispatch (c, lookup_type); }\n-\n-    private:\n-    const TSubTable &subtable;\n-    unsigned int lookup_type;\n-  };\n-\n@@ -740,12 +1126,4 @@\n-    struct Lookup *out = c->serializer->embed (*this);\n-    if (unlikely (!out)) return_trace (false);\n-\n-    \/* Subset the actual subtables. *\/\n-    \/* TODO Drop empty ones, either by calling intersects() beforehand,\n-     * or just dropping null offsets after. *\/\n-    const OffsetArrayOf<TSubTable>& subtables = get_subtables<TSubTable> ();\n-    OffsetArrayOf<TSubTable>& out_subtables = out->get_subtables<TSubTable> ();\n-    unsigned int count = subTable.len;\n-    for (unsigned int i = 0; i < count; i++)\n-    {\n-      SubTableSubsetWrapper<TSubTable> wrapper (this+subtables[i], get_type ());\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+    out->lookupType = lookupType;\n+    out->lookupFlag = lookupFlag;\n@@ -753,2 +1131,6 @@\n-      out_subtables[i].serialize_subset (c, wrapper, out);\n-    }\n+    const hb_set_t *glyphset = c->plan->glyphset ();\n+    unsigned int lookup_type = get_type ();\n+    + hb_iter (get_subtables <TSubTable> ())\n+    | hb_filter ([this, glyphset, lookup_type] (const OffsetTo<TSubTable> &_) { return (this+_).intersects (glyphset, lookup_type); })\n+    | hb_apply (subset_offset_array (c, out->get_subtables<TSubTable> (), this, lookup_type))\n+    ;\n@@ -759,8 +1141,0 @@\n-  \/* Older compilers need this to NOT be locally defined in a function. *\/\n-  template <typename TSubTable>\n-  struct SubTableSanitizeWrapper : TSubTable\n-  {\n-    bool sanitize (hb_sanitize_context_t *c, unsigned int lookup_type) const\n-    { return this->dispatch (c, lookup_type); }\n-  };\n-\n@@ -772,0 +1146,4 @@\n+\n+    unsigned subtables = get_subtable_count ();\n+    if (unlikely (!c->visit_subtables (subtables))) return_trace (false);\n+\n@@ -778,2 +1156,1 @@\n-    if (unlikely (!CastR<OffsetArrayOf<SubTableSanitizeWrapper<TSubTable> > > (subTable)\n-                   .sanitize (c, this, get_type ())))\n+    if (unlikely (!get_subtables<TSubTable> ().sanitize (c, this, get_type ())))\n@@ -782,1 +1159,1 @@\n-    if (unlikely (get_type () == TSubTable::Extension))\n+    if (unlikely (get_type () == TSubTable::Extension && !c->get_edit_count ()))\n@@ -787,1 +1164,7 @@\n-       * This is specially important if one has a reverse type! *\/\n+       * This is specially important if one has a reverse type!\n+       *\n+       * We only do this if sanitizer edit_count is zero.  Otherwise,\n+       * some of the subtables might have become insane after they\n+       * were sanity-checked by the edits of subsequent subtables.\n+       * https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=960331\n+       *\/\n@@ -789,2 +1172,1 @@\n-      unsigned int count = get_subtable_count ();\n-      for (unsigned int i = 1; i < count; i++)\n+      for (unsigned int i = 1; i < subtables; i++)\n@@ -795,1 +1177,0 @@\n-    return_trace (true);\n@@ -803,1 +1184,1 @@\n-\/*HBUINT16      markFilteringSetX[VAR];*\/\/* Index (base 0) into GDEF mark glyph sets\n+\/*HBUINT16      markFilteringSetX[HB_VAR_ARRAY];*\/\/* Index (base 0) into GDEF mark glyph sets\n@@ -812,0 +1193,26 @@\n+template <typename TLookup>\n+struct LookupOffsetList : OffsetListOf<TLookup>\n+{\n+  bool subset (hb_subset_context_t        *c,\n+               hb_subset_layout_context_t *l) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    unsigned count = this->len;\n+    + hb_zip (*this, hb_range (count))\n+    | hb_filter (l->lookup_index_map, hb_second)\n+    | hb_map (hb_first)\n+    | hb_apply (subset_offset_array (c, *out, this))\n+    ;\n+    return_trace (true);\n+  }\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (OffsetListOf<TLookup>::sanitize (c, this));\n+  }\n+};\n+\n@@ -829,2 +1236,3 @@\n-  bool serialize (hb_serialize_context_t *c,\n-                  hb_array_t<const GlyphID> glyphs)\n+  template <typename Iterator,\n+      hb_requires (hb_is_sorted_source_of (Iterator, hb_codepoint_t))>\n+  bool serialize (hb_serialize_context_t *c, Iterator glyphs)\n@@ -855,4 +1263,2 @@\n-  bool add_coverage (set_t *glyphs) const\n-  {\n-    return glyphs->add_sorted_array (glyphArray.arrayZ, glyphArray.len);\n-  }\n+  bool collect_coverage (set_t *glyphs) const\n+  { return glyphs->add_sorted_array (glyphArray.arrayZ, glyphArray.len); }\n@@ -862,1 +1268,2 @@\n-  struct Iter {\n+  struct iter_t\n+  {\n@@ -865,1 +1272,1 @@\n-    bool more () { return i < c->glyphArray.len; }\n+    bool more () const { return i < c->glyphArray.len; }\n@@ -867,2 +1274,3 @@\n-    hb_codepoint_t get_glyph () { return c->glyphArray[i]; }\n-    unsigned int get_coverage () { return i; }\n+    hb_codepoint_t get_glyph () const { return c->glyphArray[i]; }\n+    bool operator != (const iter_t& o) const\n+    { return i != o.i || c != o.c; }\n@@ -878,1 +1286,1 @@\n-  SortedArrayOf<GlyphID>\n+  SortedArrayOf<HBGlyphID>\n@@ -892,3 +1300,3 @@\n-    return likely (range.start <= range.end) ?\n-           (unsigned int) range.value + (glyph_id - range.start) :\n-           NOT_COVERED;\n+    return likely (range.first <= range.last)\n+         ? (unsigned int) range.value + (glyph_id - range.first)\n+         : NOT_COVERED;\n@@ -897,2 +1305,3 @@\n-  bool serialize (hb_serialize_context_t *c,\n-                  hb_array_t<const GlyphID> glyphs)\n+  template <typename Iterator,\n+      hb_requires (hb_is_sorted_source_of (Iterator, hb_codepoint_t))>\n+  bool serialize (hb_serialize_context_t *c, Iterator glyphs)\n@@ -903,1 +1312,1 @@\n-    if (unlikely (!glyphs.length))\n+    if (unlikely (!glyphs))\n@@ -905,1 +1314,1 @@\n-      rangeRecord.len.set (0);\n+      rangeRecord.len = 0;\n@@ -909,3 +1318,7 @@\n-    unsigned int num_ranges = 1;\n-    for (unsigned int i = 1; i < glyphs.length; i++)\n-      if (glyphs[i - 1] + 1 != glyphs[i])\n+    \/* TODO(iter) Write more efficiently? *\/\n+\n+    unsigned num_ranges = 0;\n+    hb_codepoint_t last = (hb_codepoint_t) -2;\n+    for (auto g: glyphs)\n+    {\n+      if (last + 1 != g)\n@@ -913,2 +1326,4 @@\n-    rangeRecord.len.set (num_ranges);\n-    if (unlikely (!c->extend (rangeRecord))) return_trace (false);\n+      last = g;\n+    }\n+\n+    if (unlikely (!rangeRecord.serialize (c, num_ranges))) return_trace (false);\n@@ -916,4 +1331,4 @@\n-    unsigned int range = 0;\n-    rangeRecord[range].start = glyphs[0];\n-    rangeRecord[range].value.set (0);\n-    for (unsigned int i = 1; i < glyphs.length; i++)\n+    unsigned count = 0;\n+    unsigned range = (unsigned) -1;\n+    last = (hb_codepoint_t) -2;\n+    for (auto g: glyphs)\n@@ -921,1 +1336,1 @@\n-      if (glyphs[i - 1] + 1 != glyphs[i])\n+      if (last + 1 != g)\n@@ -924,2 +1339,2 @@\n-        rangeRecord[range].start = glyphs[i];\n-        rangeRecord[range].value.set (i);\n+        rangeRecord[range].first = g;\n+        rangeRecord[range].value = count;\n@@ -927,1 +1342,3 @@\n-      rangeRecord[range].end = glyphs[i];\n+      rangeRecord[range].last = g;\n+      last = g;\n+      count++;\n@@ -929,0 +1346,1 @@\n+\n@@ -954,1 +1372,1 @@\n-          index < (unsigned int) range.value + (range.end - range.start) &&\n+          index < (unsigned int) range.value + (range.last - range.first) &&\n@@ -964,1 +1382,1 @@\n-  bool add_coverage (set_t *glyphs) const\n+  bool collect_coverage (set_t *glyphs) const\n@@ -968,1 +1386,1 @@\n-      if (unlikely (!rangeRecord[i].add_coverage (glyphs)))\n+      if (unlikely (!rangeRecord[i].collect_coverage (glyphs)))\n@@ -975,1 +1393,1 @@\n-  struct Iter\n+  struct iter_t\n@@ -982,2 +1400,2 @@\n-      j = c->rangeRecord.len ? c->rangeRecord[0].start : 0;\n-      if (unlikely (c->rangeRecord[0].start > c->rangeRecord[0].end))\n+      j = c->rangeRecord.len ? c->rangeRecord[0].first : 0;\n+      if (unlikely (c->rangeRecord[0].first > c->rangeRecord[0].last))\n@@ -990,1 +1408,1 @@\n-    bool more () { return i < c->rangeRecord.len; }\n+    bool more () const { return i < c->rangeRecord.len; }\n@@ -993,1 +1411,1 @@\n-      if (j >= c->rangeRecord[i].end)\n+      if (j >= c->rangeRecord[i].last)\n@@ -998,3 +1416,4 @@\n-          hb_codepoint_t old = j;\n-          j = c->rangeRecord[i].start;\n-          if (unlikely (j <= old))\n+          unsigned int old = coverage;\n+          j = c->rangeRecord[i].first;\n+          coverage = c->rangeRecord[i].value;\n+          if (unlikely (coverage != old + 1))\n@@ -1002,1 +1421,4 @@\n-            \/* Broken table. Skip. Important to avoid DoS. *\/\n+            \/* Broken table. Skip. Important to avoid DoS.\n+             * Also, our callers depend on coverage being\n+             * consecutive and monotonically increasing,\n+             * ie. iota(). *\/\n@@ -1006,1 +1428,0 @@\n-          coverage = c->rangeRecord[i].value;\n@@ -1013,2 +1434,3 @@\n-    hb_codepoint_t get_glyph () { return j; }\n-    unsigned int get_coverage () { return coverage; }\n+    hb_codepoint_t get_glyph () const { return j; }\n+    bool operator != (const iter_t& o) const\n+    { return i != o.i || j != o.j || c != o.c; }\n@@ -1035,0 +1457,9 @@\n+  \/* Has interface. *\/\n+  static constexpr unsigned SENTINEL = NOT_COVERED;\n+  typedef unsigned int value_t;\n+  value_t operator [] (hb_codepoint_t k) const { return get (k); }\n+  bool has (hb_codepoint_t k) const { return (*this)[k] != SENTINEL; }\n+  \/* Predicate. *\/\n+  bool operator () (hb_codepoint_t k) const { return has (k); }\n+\n+  unsigned int get (hb_codepoint_t k) const { return get_coverage (k); }\n@@ -1044,2 +1475,3 @@\n-  bool serialize (hb_serialize_context_t *c,\n-                  hb_array_t<const GlyphID> glyphs)\n+  template <typename Iterator,\n+      hb_requires (hb_is_sorted_source_of (Iterator, hb_codepoint_t))>\n+  bool serialize (hb_serialize_context_t *c, Iterator glyphs)\n@@ -1050,3 +1482,6 @@\n-    unsigned int num_ranges = 1;\n-    for (unsigned int i = 1; i < glyphs.length; i++)\n-      if (glyphs[i - 1] + 1 != glyphs[i])\n+    unsigned count = 0;\n+    unsigned num_ranges = 0;\n+    hb_codepoint_t last = (hb_codepoint_t) -2;\n+    for (auto g: glyphs)\n+    {\n+      if (last + 1 != g)\n@@ -1054,1 +1489,4 @@\n-    u.format.set (glyphs.length * 2 < num_ranges * 3 ? 1 : 2);\n+      last = g;\n+      count++;\n+    }\n+    u.format = count <= num_ranges * 3 ? 1 : 2;\n@@ -1064,0 +1502,17 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto it =\n+    + iter ()\n+    | hb_filter (glyphset)\n+    | hb_map_retains_sorting (glyph_map)\n+    ;\n+\n+    bool ret = bool (it);\n+    Coverage_serialize (c->serializer, it);\n+    return_trace (ret);\n+  }\n+\n@@ -1098,1 +1553,1 @@\n-  bool add_coverage (set_t *glyphs) const\n+  bool collect_coverage (set_t *glyphs) const\n@@ -1102,2 +1557,2 @@\n-    case 1: return u.format1.add_coverage (glyphs);\n-    case 2: return u.format2.add_coverage (glyphs);\n+    case 1: return u.format1.collect_coverage (glyphs);\n+    case 2: return u.format2.collect_coverage (glyphs);\n@@ -1108,1 +1563,1 @@\n-  struct Iter\n+  struct iter_t : hb_iter_with_fallback_t<iter_t, hb_codepoint_t>\n@@ -1110,1 +1565,2 @@\n-    Iter (const Coverage &c_)\n+    static constexpr bool is_sorted_iterator = true;\n+    iter_t (const Coverage &c_ = Null (Coverage))\n@@ -1121,1 +1577,1 @@\n-    bool more ()\n+    bool __more__ () const\n@@ -1130,1 +1586,1 @@\n-    void next ()\n+    void __next__ ()\n@@ -1139,1 +1595,4 @@\n-    hb_codepoint_t get_glyph ()\n+    typedef hb_codepoint_t __item_t__;\n+    __item_t__ __item__ () const { return get_glyph (); }\n+\n+    hb_codepoint_t get_glyph () const\n@@ -1148,1 +1607,1 @@\n-    unsigned int get_coverage ()\n+    bool operator != (const iter_t& o) const\n@@ -1150,0 +1609,1 @@\n+      if (format != o.format) return true;\n@@ -1152,3 +1612,3 @@\n-      case 1: return u.format1.get_coverage ();\n-      case 2: return u.format2.get_coverage ();\n-      default:return -1;\n+      case 1: return u.format1 != o.u.format1;\n+      case 2: return u.format2 != o.u.format2;\n+      default:return false;\n@@ -1161,2 +1621,2 @@\n-    CoverageFormat2::Iter       format2; \/* Put this one first since it's larger; helps shut up compiler. *\/\n-    CoverageFormat1::Iter       format1;\n+    CoverageFormat2::iter_t     format2; \/* Put this one first since it's larger; helps shut up compiler. *\/\n+    CoverageFormat1::iter_t     format1;\n@@ -1165,0 +1625,1 @@\n+  iter_t iter () const { return iter_t (*this); }\n@@ -1176,0 +1637,45 @@\n+template<typename Iterator>\n+static inline void\n+Coverage_serialize (hb_serialize_context_t *c,\n+                    Iterator it)\n+{ c->start_embed<Coverage> ()->serialize (c, it); }\n+\n+static void ClassDef_remap_and_serialize (hb_serialize_context_t *c,\n+                                          const hb_set_t &glyphset,\n+                                          const hb_map_t &gid_klass_map,\n+                                          hb_sorted_vector_t<HBGlyphID> &glyphs,\n+                                          const hb_set_t &klasses,\n+                                          hb_map_t *klass_map \/*INOUT*\/)\n+{\n+  if (!klass_map)\n+  {\n+    ClassDef_serialize (c, hb_zip (glyphs.iter (), + glyphs.iter ()\n+                                                   | hb_map (gid_klass_map)));\n+    return;\n+  }\n+\n+  \/* any glyph not assigned a class value falls into Class zero (0),\n+   * if any glyph assigned to class 0, remapping must start with 0->0*\/\n+  if (glyphset.get_population () > gid_klass_map.get_population ())\n+    klass_map->set (0, 0);\n+\n+  unsigned idx = klass_map->has (0) ? 1 : 0;\n+  for (const unsigned k: klasses.iter ())\n+  {\n+    if (klass_map->has (k)) continue;\n+    klass_map->set (k, idx);\n+    idx++;\n+  }\n+\n+  auto it =\n+  + glyphs.iter ()\n+  | hb_map_retains_sorting ([&] (const HBGlyphID& gid) -> hb_pair_t<hb_codepoint_t, unsigned>\n+                            {\n+                              unsigned new_klass = klass_map->get (gid_klass_map[gid]);\n+                              return hb_pair ((hb_codepoint_t)gid, new_klass);\n+                            })\n+  ;\n+\n+  c->propagate_error (glyphs, klasses);\n+  ClassDef_serialize (c, it);\n+}\n@@ -1181,4 +1687,0 @@\n-static inline void ClassDef_serialize (hb_serialize_context_t *c,\n-                                       hb_array_t<const GlyphID> glyphs,\n-                                       hb_array_t<const HBUINT16> klasses);\n-\n@@ -1195,0 +1697,2 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n@@ -1196,2 +1700,1 @@\n-                  hb_array_t<const HBUINT16> glyphs,\n-                  hb_array_t<const HBUINT16> klasses)\n+                  Iterator it)\n@@ -1202,1 +1705,1 @@\n-    if (unlikely (!glyphs.length))\n+    if (unlikely (!it))\n@@ -1204,2 +1707,2 @@\n-      startGlyph.set (0);\n-      classValue.len.set (0);\n+      startGlyph = 0;\n+      classValue.len = 0;\n@@ -1209,9 +1712,5 @@\n-    hb_codepoint_t glyph_min = glyphs[0];\n-    hb_codepoint_t glyph_max = glyphs[glyphs.length - 1];\n-\n-    startGlyph.set (glyph_min);\n-    classValue.len.set (glyph_max - glyph_min + 1);\n-    if (unlikely (!c->extend (classValue))) return_trace (false);\n-\n-    for (unsigned int i = 0; i < glyphs.length; i++)\n-      classValue[glyphs[i] - glyph_min] = klasses[i];\n+    hb_codepoint_t glyph_min = (*it).first;\n+    hb_codepoint_t glyph_max = + it\n+                               | hb_map (hb_first)\n+                               | hb_reduce (hb_max, 0u);\n+    unsigned glyph_count = glyph_max - glyph_min + 1;\n@@ -1219,0 +1718,7 @@\n+    startGlyph = glyph_min;\n+    if (unlikely (!classValue.serialize (c, glyph_count))) return_trace (false);\n+    for (const hb_pair_t<hb_codepoint_t, unsigned> gid_klass_pair : + it)\n+    {\n+      unsigned idx = gid_klass_pair.first - glyph_min;\n+      classValue[idx] = gid_klass_pair.second;\n+    }\n@@ -1222,1 +1728,2 @@\n-  bool subset (hb_subset_context_t *c) const\n+  bool subset (hb_subset_context_t *c,\n+               hb_map_t *klass_map = nullptr \/*OUT*\/) const\n@@ -1225,1 +1732,1 @@\n-    const hb_set_t &glyphset = *c->plan->glyphset;\n+    const hb_set_t &glyphset = *c->plan->_glyphset_gsub;\n@@ -1227,2 +1734,4 @@\n-    hb_vector_t<GlyphID> glyphs;\n-    hb_vector_t<HBUINT16> klasses;\n+\n+    hb_sorted_vector_t<HBGlyphID> glyphs;\n+    hb_set_t orig_klasses;\n+    hb_map_t gid_org_klass_map;\n@@ -1232,1 +1741,2 @@\n-    for (hb_codepoint_t g = start; g < end; g++)\n+    for (const hb_codepoint_t gid : + hb_range (start, end)\n+                                    | hb_filter (glyphset))\n@@ -1234,5 +1744,6 @@\n-      unsigned int value = classValue[g - start];\n-      if (!value) continue;\n-      if (!glyphset.has (g)) continue;\n-      glyphs.push()->set (glyph_map[g]);\n-      klasses.push()->set (value);\n+      unsigned klass = classValue[gid - start];\n+      if (!klass) continue;\n+\n+      glyphs.push (glyph_map[gid]);\n+      gid_org_klass_map.set (glyph_map[gid], klass);\n+      orig_klasses.add (klass);\n@@ -1240,3 +1751,4 @@\n-    c->serializer->propagate_error (glyphs, klasses);\n-    ClassDef_serialize (c->serializer, glyphs, klasses);\n-    return_trace (glyphs.length);\n+\n+    ClassDef_remap_and_serialize (c->serializer, glyphset, gid_org_klass_map,\n+                                  glyphs, orig_klasses, klass_map);\n+    return_trace ((bool) glyphs);\n@@ -1252,1 +1764,1 @@\n-  bool add_coverage (set_t *glyphs) const\n+  bool collect_coverage (set_t *glyphs) const\n@@ -1275,1 +1787,1 @@\n-  bool add_class (set_t *glyphs, unsigned int klass) const\n+  bool collect_class (set_t *glyphs, unsigned int klass) const\n@@ -1314,1 +1826,1 @@\n-  GlyphID       startGlyph;     \/* First GlyphID of the classValueArray *\/\n+  HBGlyphID     startGlyph;     \/* First GlyphID of the classValueArray *\/\n@@ -1331,0 +1843,2 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n@@ -1332,2 +1846,1 @@\n-                  hb_array_t<const HBUINT16> glyphs,\n-                  hb_array_t<const HBUINT16> klasses)\n+                  Iterator it)\n@@ -1338,1 +1851,1 @@\n-    if (unlikely (!glyphs.length))\n+    if (unlikely (!it))\n@@ -1340,1 +1853,1 @@\n-      rangeRecord.len.set (0);\n+      rangeRecord.len = 0;\n@@ -1344,7 +1857,8 @@\n-    unsigned int num_ranges = 1;\n-    for (unsigned int i = 1; i < glyphs.length; i++)\n-      if (glyphs[i - 1] + 1 != glyphs[i] ||\n-          klasses[i - 1] != klasses[i])\n-        num_ranges++;\n-    rangeRecord.len.set (num_ranges);\n-    if (unlikely (!c->extend (rangeRecord))) return_trace (false);\n+    unsigned num_ranges = 1;\n+    hb_codepoint_t prev_gid = (*it).first;\n+    unsigned prev_klass = (*it).second;\n+\n+    RangeRecord range_rec;\n+    range_rec.first = prev_gid;\n+    range_rec.last = prev_gid;\n+    range_rec.value = prev_klass;\n@@ -1352,4 +1866,4 @@\n-    unsigned int range = 0;\n-    rangeRecord[range].start = glyphs[0];\n-    rangeRecord[range].value.set (klasses[0]);\n-    for (unsigned int i = 1; i < glyphs.length; i++)\n+    RangeRecord *record = c->copy (range_rec);\n+    if (unlikely (!record)) return_trace (false);\n+\n+    for (const auto gid_klass_pair : + (++it))\n@@ -1357,2 +1871,5 @@\n-      if (glyphs[i - 1] + 1 != glyphs[i] ||\n-          klasses[i - 1] != klasses[i])\n+      hb_codepoint_t cur_gid = gid_klass_pair.first;\n+      unsigned cur_klass = gid_klass_pair.second;\n+\n+      if (cur_gid != prev_gid + 1 ||\n+          cur_klass != prev_klass)\n@@ -1360,3 +1877,9 @@\n-        range++;\n-        rangeRecord[range].start = glyphs[i];\n-        rangeRecord[range].value = klasses[i];\n+        if (unlikely (!record)) break;\n+        record->last = prev_gid;\n+        num_ranges++;\n+\n+        range_rec.first = cur_gid;\n+        range_rec.last = cur_gid;\n+        range_rec.value = cur_klass;\n+\n+        record = c->copy (range_rec);\n@@ -1364,1 +1887,3 @@\n-      rangeRecord[range].end = glyphs[i];\n+\n+      prev_klass = cur_klass;\n+      prev_gid = cur_gid;\n@@ -1366,0 +1891,3 @@\n+\n+    if (likely (record)) record->last = prev_gid;\n+    rangeRecord.len = num_ranges;\n@@ -1369,1 +1897,2 @@\n-  bool subset (hb_subset_context_t *c) const\n+  bool subset (hb_subset_context_t *c,\n+               hb_map_t *klass_map = nullptr \/*OUT*\/) const\n@@ -1372,1 +1901,1 @@\n-    const hb_set_t &glyphset = *c->plan->glyphset;\n+    const hb_set_t &glyphset = *c->plan->_glyphset_gsub;\n@@ -1374,2 +1903,0 @@\n-    hb_vector_t<GlyphID> glyphs;\n-    hb_vector_t<HBUINT16> klasses;\n@@ -1377,2 +1904,6 @@\n-    unsigned int count = rangeRecord.len;\n-    for (unsigned int i = 0; i < count; i++)\n+    hb_sorted_vector_t<HBGlyphID> glyphs;\n+    hb_set_t orig_klasses;\n+    hb_map_t gid_org_klass_map;\n+\n+    unsigned count = rangeRecord.len;\n+    for (unsigned i = 0; i < count; i++)\n@@ -1380,4 +1911,4 @@\n-      unsigned int value = rangeRecord[i].value;\n-      if (!value) continue;\n-      hb_codepoint_t start = rangeRecord[i].start;\n-      hb_codepoint_t end   = rangeRecord[i].end + 1;\n+      unsigned klass = rangeRecord[i].value;\n+      if (!klass) continue;\n+      hb_codepoint_t start = rangeRecord[i].first;\n+      hb_codepoint_t end   = rangeRecord[i].last + 1;\n@@ -1387,2 +1918,3 @@\n-        glyphs.push ()->set (glyph_map[g]);\n-        klasses.push ()->set (value);\n+        glyphs.push (glyph_map[g]);\n+        gid_org_klass_map.set (glyph_map[g], klass);\n+        orig_klasses.add (klass);\n@@ -1391,3 +1923,4 @@\n-    c->serializer->propagate_error (glyphs, klasses);\n-    ClassDef_serialize (c->serializer, glyphs, klasses);\n-    return_trace (glyphs.length);\n+\n+    ClassDef_remap_and_serialize (c->serializer, glyphset, gid_org_klass_map,\n+                                  glyphs, orig_klasses, klass_map);\n+    return_trace ((bool) glyphs);\n@@ -1403,1 +1936,1 @@\n-  bool add_coverage (set_t *glyphs) const\n+  bool collect_coverage (set_t *glyphs) const\n@@ -1408,1 +1941,1 @@\n-        if (unlikely (!rangeRecord[i].add_coverage (glyphs)))\n+        if (unlikely (!rangeRecord[i].collect_coverage (glyphs)))\n@@ -1414,1 +1947,1 @@\n-  bool add_class (set_t *glyphs, unsigned int klass) const\n+  bool collect_class (set_t *glyphs, unsigned int klass) const\n@@ -1420,1 +1953,1 @@\n-        if (unlikely (!rangeRecord[i].add_coverage (glyphs)))\n+        if (unlikely (!rangeRecord[i].collect_coverage (glyphs)))\n@@ -1446,1 +1979,1 @@\n-        if (g < rangeRecord[i].start)\n+        if (g < rangeRecord[i].first)\n@@ -1448,1 +1981,1 @@\n-        g = rangeRecord[i].end;\n+        g = rangeRecord[i].last;\n@@ -1471,0 +2004,9 @@\n+  \/* Has interface. *\/\n+  static constexpr unsigned SENTINEL = 0;\n+  typedef unsigned int value_t;\n+  value_t operator [] (hb_codepoint_t k) const { return get (k); }\n+  bool has (hb_codepoint_t k) const { return (*this)[k] != SENTINEL; }\n+  \/* Projection. *\/\n+  hb_codepoint_t operator () (hb_codepoint_t k) const { return get (k); }\n+\n+  unsigned int get (hb_codepoint_t k) const { return get_class (k); }\n@@ -1480,3 +2022,3 @@\n-  bool serialize (hb_serialize_context_t *c,\n-                  hb_array_t<const GlyphID> glyphs,\n-                  hb_array_t<const HBUINT16> klasses)\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize (hb_serialize_context_t *c, Iterator it)\n@@ -1487,2 +2029,2 @@\n-    unsigned int format = 2;\n-    if (glyphs.length)\n+    unsigned format = 2;\n+    if (likely (it))\n@@ -1490,2 +2032,8 @@\n-      hb_codepoint_t glyph_min = glyphs[0];\n-      hb_codepoint_t glyph_max = glyphs[glyphs.length - 1];\n+      hb_codepoint_t glyph_min = (*it).first;\n+      hb_codepoint_t glyph_max = + it\n+                                 | hb_map (hb_first)\n+                                 | hb_reduce (hb_max, 0u);\n+\n+      unsigned num_ranges = 1;\n+      hb_codepoint_t prev_gid = glyph_min;\n+      unsigned prev_klass = (*it).second;\n@@ -1493,4 +2041,7 @@\n-      unsigned int num_ranges = 1;\n-      for (unsigned int i = 1; i < glyphs.length; i++)\n-        if (glyphs[i - 1] + 1 != glyphs[i] ||\n-            klasses[i - 1] != klasses[i])\n+      for (const auto gid_klass_pair : it)\n+      {\n+        hb_codepoint_t cur_gid = gid_klass_pair.first;\n+        unsigned cur_klass = gid_klass_pair.second;\n+        if (cur_gid == glyph_min || !cur_klass) continue;\n+        if (cur_gid != prev_gid + 1 ||\n+            cur_klass != prev_klass)\n@@ -1499,1 +2050,5 @@\n-      if (1 + (glyph_max - glyph_min + 1) < num_ranges * 3)\n+        prev_gid = cur_gid;\n+        prev_klass = cur_klass;\n+      }\n+\n+      if (1 + (glyph_max - glyph_min + 1) <= num_ranges * 3)\n@@ -1502,1 +2057,1 @@\n-    u.format.set (format);\n+    u.format = format;\n@@ -1506,2 +2061,2 @@\n-    case 1: return_trace (u.format1.serialize (c, glyphs, klasses));\n-    case 2: return_trace (u.format2.serialize (c, glyphs, klasses));\n+    case 1: return_trace (u.format1.serialize (c, it));\n+    case 2: return_trace (u.format2.serialize (c, it));\n@@ -1512,1 +2067,2 @@\n-  bool subset (hb_subset_context_t *c) const\n+  bool subset (hb_subset_context_t *c,\n+               hb_map_t *klass_map = nullptr \/*OUT*\/) const\n@@ -1516,2 +2072,2 @@\n-    case 1: return_trace (u.format1.subset (c));\n-    case 2: return_trace (u.format2.subset (c));\n+    case 1: return_trace (u.format1.subset (c, klass_map));\n+    case 2: return_trace (u.format2.subset (c, klass_map));\n@@ -1536,1 +2092,1 @@\n-  bool add_coverage (set_t *glyphs) const\n+  bool collect_coverage (set_t *glyphs) const\n@@ -1539,2 +2095,2 @@\n-    case 1: return u.format1.add_coverage (glyphs);\n-    case 2: return u.format2.add_coverage (glyphs);\n+    case 1: return u.format1.collect_coverage (glyphs);\n+    case 2: return u.format2.collect_coverage (glyphs);\n@@ -1548,1 +2104,1 @@\n-  bool add_class (set_t *glyphs, unsigned int klass) const\n+  bool collect_class (set_t *glyphs, unsigned int klass) const\n@@ -1551,2 +2107,2 @@\n-    case 1: return u.format1.add_class (glyphs, klass);\n-    case 2: return u.format2.add_class (glyphs, klass);\n+    case 1: return u.format1.collect_class (glyphs, klass);\n+    case 2: return u.format2.collect_class (glyphs, klass);\n@@ -1584,0 +2140,1 @@\n+template<typename Iterator>\n@@ -1585,3 +2142,2 @@\n-                                       hb_array_t<const GlyphID> glyphs,\n-                                       hb_array_t<const HBUINT16> klasses)\n-{ c->start_embed<ClassDef> ()->serialize (c, glyphs, klasses); }\n+                                       Iterator it)\n+{ c->start_embed<ClassDef> ()->serialize (c, it); }\n@@ -1638,1 +2194,1 @@\n-                         const int *coords, unsigned int coord_len) const\n+                  const int *coords, unsigned int coord_len) const\n@@ -1665,0 +2221,20 @@\n+  bool serialize (hb_serialize_context_t *c, const VarRegionList *src, const hb_bimap_t &region_map)\n+  {\n+    TRACE_SERIALIZE (this);\n+    VarRegionList *out = c->allocate_min<VarRegionList> ();\n+    if (unlikely (!out)) return_trace (false);\n+    axisCount = src->axisCount;\n+    regionCount = region_map.get_population ();\n+    if (unlikely (!c->allocate_size<VarRegionList> (get_size () - min_size))) return_trace (false);\n+    unsigned int region_count = src->get_region_count ();\n+    for (unsigned int r = 0; r < regionCount; r++)\n+    {\n+      unsigned int backward = region_map.backward (r);\n+      if (backward >= region_count) return_trace (false);\n+      memcpy (&axesZ[axisCount * r], &src->axesZ[axisCount * backward], VarRegionAxis::static_size * axisCount);\n+    }\n+\n+    return_trace (true);\n+  }\n+\n+  unsigned int get_size () const { return min_size + VarRegionAxis::static_size * axisCount * regionCount; }\n@@ -1688,2 +2264,2 @@\n-                          const int *coords, unsigned int coord_count,\n-                          const VarRegionList &regions) const\n+                   const int *coords, unsigned int coord_count,\n+                   const VarRegionList &regions) const\n@@ -1697,1 +2273,1 @@\n-   const HBUINT8 *bytes = &StructAfter<HBUINT8> (regionIndices);\n+   const HBUINT8 *bytes = get_delta_bytes ();\n@@ -1719,1 +2295,1 @@\n-  void get_scalars (int *coords, unsigned int coord_count,\n+  void get_scalars (const int *coords, unsigned int coord_count,\n@@ -1724,5 +2300,5 @@\n-    assert (num_scalars == regionIndices.len);\n-   for (unsigned int i = 0; i < num_scalars; i++)\n-   {\n-     scalars[i] = regions.evaluate (regionIndices.arrayZ[i], coords, coord_count);\n-   }\n+    unsigned count = hb_min (num_scalars, regionIndices.len);\n+    for (unsigned int i = 0; i < count; i++)\n+      scalars[i] = regions.evaluate (regionIndices.arrayZ[i], coords, coord_count);\n+    for (unsigned int i = count; i < num_scalars; i++)\n+      scalars[i] = 0.f;\n@@ -1737,1 +2313,1 @@\n-                  c->check_range (&StructAfter<HBUINT8> (regionIndices),\n+                  c->check_range (get_delta_bytes (),\n@@ -1742,0 +2318,106 @@\n+  bool serialize (hb_serialize_context_t *c,\n+                  const VarData *src,\n+                  const hb_inc_bimap_t &inner_map,\n+                  const hb_bimap_t &region_map)\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (unlikely (!c->extend_min (*this))) return_trace (false);\n+    itemCount = inner_map.get_next_value ();\n+\n+    \/* Optimize short count *\/\n+    unsigned short ri_count = src->regionIndices.len;\n+    enum delta_size_t { kZero=0, kByte, kShort };\n+    hb_vector_t<delta_size_t> delta_sz;\n+    hb_vector_t<unsigned int> ri_map;   \/* maps old index to new index *\/\n+    delta_sz.resize (ri_count);\n+    ri_map.resize (ri_count);\n+    unsigned int new_short_count = 0;\n+    unsigned int r;\n+    for (r = 0; r < ri_count; r++)\n+    {\n+      delta_sz[r] = kZero;\n+      for (unsigned int i = 0; i < inner_map.get_next_value (); i++)\n+      {\n+        unsigned int old = inner_map.backward (i);\n+        int16_t delta = src->get_item_delta (old, r);\n+        if (delta < -128 || 127 < delta)\n+        {\n+          delta_sz[r] = kShort;\n+          new_short_count++;\n+          break;\n+        }\n+        else if (delta != 0)\n+          delta_sz[r] = kByte;\n+      }\n+    }\n+    unsigned int short_index = 0;\n+    unsigned int byte_index = new_short_count;\n+    unsigned int new_ri_count = 0;\n+    for (r = 0; r < ri_count; r++)\n+      if (delta_sz[r])\n+      {\n+        ri_map[r] = (delta_sz[r] == kShort)? short_index++ : byte_index++;\n+        new_ri_count++;\n+      }\n+\n+    shortCount = new_short_count;\n+    regionIndices.len = new_ri_count;\n+\n+    unsigned int size = regionIndices.get_size () - HBUINT16::static_size\/*regionIndices.len*\/ + (get_row_size () * itemCount);\n+    if (unlikely (!c->allocate_size<HBUINT8> (size)))\n+      return_trace (false);\n+\n+    for (r = 0; r < ri_count; r++)\n+      if (delta_sz[r]) regionIndices[ri_map[r]] = region_map[src->regionIndices[r]];\n+\n+    for (unsigned int i = 0; i < itemCount; i++)\n+    {\n+      unsigned int      old = inner_map.backward (i);\n+      for (unsigned int r = 0; r < ri_count; r++)\n+        if (delta_sz[r]) set_item_delta (i, ri_map[r], src->get_item_delta (old, r));\n+    }\n+\n+    return_trace (true);\n+  }\n+\n+  void collect_region_refs (hb_inc_bimap_t &region_map, const hb_inc_bimap_t &inner_map) const\n+  {\n+    for (unsigned int r = 0; r < regionIndices.len; r++)\n+    {\n+      unsigned int region = regionIndices[r];\n+      if (region_map.has (region)) continue;\n+      for (unsigned int i = 0; i < inner_map.get_next_value (); i++)\n+        if (get_item_delta (inner_map.backward (i), r) != 0)\n+        {\n+          region_map.add (region);\n+          break;\n+        }\n+    }\n+  }\n+\n+  protected:\n+  const HBUINT8 *get_delta_bytes () const\n+  { return &StructAfter<HBUINT8> (regionIndices); }\n+\n+  HBUINT8 *get_delta_bytes ()\n+  { return &StructAfter<HBUINT8> (regionIndices); }\n+\n+  int16_t get_item_delta (unsigned int item, unsigned int region) const\n+  {\n+    if ( item >= itemCount || unlikely (region >= regionIndices.len)) return 0;\n+    const HBINT8 *p = (const HBINT8 *)get_delta_bytes () + item * get_row_size ();\n+    if (region < shortCount)\n+      return ((const HBINT16 *)p)[region];\n+    else\n+      return (p + HBINT16::static_size * shortCount)[region - shortCount];\n+  }\n+\n+  void set_item_delta (unsigned int item, unsigned int region, int16_t delta)\n+  {\n+    HBINT8 *p = (HBINT8 *)get_delta_bytes () + item * get_row_size ();\n+    if (region < shortCount)\n+      ((HBINT16 *)p)[region] = delta;\n+    else\n+      (p + HBINT16::static_size * shortCount)[region - shortCount] = delta;\n+  }\n+\n@@ -1756,0 +2438,4 @@\n+#ifdef HB_NO_VAR\n+    return 0.f;\n+#endif\n+\n@@ -1757,1 +2443,1 @@\n-      return 0.;\n+      return 0.f;\n@@ -1774,0 +2460,4 @@\n+#ifdef HB_NO_VAR\n+    return true;\n+#endif\n+\n@@ -1781,0 +2471,72 @@\n+  bool serialize (hb_serialize_context_t *c,\n+                  const VariationStore *src,\n+                  const hb_array_t <hb_inc_bimap_t> &inner_maps)\n+  {\n+    TRACE_SERIALIZE (this);\n+    unsigned int set_count = 0;\n+    for (unsigned int i = 0; i < inner_maps.length; i++)\n+      if (inner_maps[i].get_population () > 0) set_count++;\n+\n+    unsigned int size = min_size + HBUINT32::static_size * set_count;\n+    if (unlikely (!c->allocate_size<HBUINT32> (size))) return_trace (false);\n+    format = 1;\n+\n+    hb_inc_bimap_t region_map;\n+    for (unsigned int i = 0; i < inner_maps.length; i++)\n+      (src+src->dataSets[i]).collect_region_refs (region_map, inner_maps[i]);\n+    region_map.sort ();\n+\n+    if (unlikely (!regions.serialize (c, this)\n+                  .serialize (c, &(src+src->regions), region_map))) return_trace (false);\n+\n+    \/* TODO: The following code could be simplified when\n+     * OffsetListOf::subset () can take a custom param to be passed to VarData::serialize ()\n+     *\/\n+    dataSets.len = set_count;\n+    unsigned int set_index = 0;\n+    for (unsigned int i = 0; i < inner_maps.length; i++)\n+    {\n+      if (inner_maps[i].get_population () == 0) continue;\n+      if (unlikely (!dataSets[set_index++].serialize (c, this)\n+                      .serialize (c, &(src+src->dataSets[i]), inner_maps[i], region_map)))\n+        return_trace (false);\n+    }\n+\n+    return_trace (true);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    VariationStore *varstore_prime = c->serializer->start_embed<VariationStore> ();\n+    if (unlikely (!varstore_prime)) return_trace (false);\n+\n+    const hb_set_t *variation_indices = c->plan->layout_variation_indices;\n+    if (variation_indices->is_empty ()) return_trace (false);\n+\n+    hb_vector_t<hb_inc_bimap_t> inner_maps;\n+    inner_maps.resize ((unsigned) dataSets.len);\n+    for (unsigned i = 0; i < inner_maps.length; i++)\n+      inner_maps[i].init ();\n+\n+    for (unsigned idx : c->plan->layout_variation_indices->iter ())\n+    {\n+      uint16_t major = idx >> 16;\n+      uint16_t minor = idx & 0xFFFF;\n+\n+      if (major >= inner_maps.length)\n+      {\n+        for (unsigned i = 0; i < inner_maps.length; i++)\n+          inner_maps[i].fini ();\n+        return_trace (false);\n+      }\n+      inner_maps[major].add (minor);\n+    }\n+    varstore_prime->serialize (c->serializer, this, inner_maps.as_array ());\n+\n+    for (unsigned i = 0; i < inner_maps.length; i++)\n+      inner_maps[i].fini ();\n+    return_trace (bool (varstore_prime->dataSets));\n+  }\n+\n@@ -1785,1 +2547,1 @@\n-                    int *coords, unsigned int coord_count,\n+                    const int *coords, unsigned int coord_count,\n@@ -1789,0 +2551,6 @@\n+#ifdef HB_NO_VAR\n+    for (unsigned i = 0; i < num_scalars; i++)\n+      scalars[i] = 0.f;\n+    return;\n+#endif\n+\n@@ -1793,0 +2561,2 @@\n+  unsigned int get_sub_table_count () const { return dataSets.len; }\n+\n@@ -1809,0 +2579,8 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+    return_trace (true);\n+  }\n+\n@@ -1841,0 +2619,11 @@\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n+  {\n+    TRACE_DISPATCH (this, u.format);\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return_trace (c->no_dispatch_return_value ());\n+    switch (u.format) {\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n+    default:return_trace (c->default_return_value ());\n+    }\n+  }\n+\n@@ -1871,0 +2660,12 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    + conditions.iter ()\n+    | hb_apply (subset_offset_array (c, out->conditions, this))\n+    ;\n+    return_trace (true);\n+  }\n+\n@@ -1887,0 +2688,24 @@\n+  void collect_lookups (const void *base, hb_set_t *lookup_indexes \/* OUT *\/) const\n+  {\n+    return (base+feature).add_lookup_indexes_to (lookup_indexes);\n+  }\n+\n+  void closure_features (const void *base,\n+                         const hb_map_t *lookup_indexes,\n+                         hb_set_t       *feature_indexes \/* OUT *\/) const\n+  {\n+    if ((base+feature).intersects_lookup_indexes (lookup_indexes))\n+      feature_indexes->add (featureIndex);\n+  }\n+\n+  bool subset (hb_subset_layout_context_t *c, const void *base) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->subset_context->serializer->embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    out->featureIndex = c->feature_index_map->get (featureIndex);\n+    bool ret = out->feature.serialize_subset (c->subset_context, feature, base, c);\n+    return_trace (ret);\n+  }\n+\n@@ -1914,0 +2739,33 @@\n+  void collect_lookups (const hb_set_t *feature_indexes,\n+                        hb_set_t       *lookup_indexes \/* OUT *\/) const\n+  {\n+    + hb_iter (substitutions)\n+    | hb_filter (feature_indexes, &FeatureTableSubstitutionRecord::featureIndex)\n+    | hb_apply ([this, lookup_indexes] (const FeatureTableSubstitutionRecord& r)\n+                { r.collect_lookups (this, lookup_indexes); })\n+    ;\n+  }\n+\n+  void closure_features (const hb_map_t *lookup_indexes,\n+                         hb_set_t       *feature_indexes \/* OUT *\/) const\n+  {\n+    for (const FeatureTableSubstitutionRecord& record : substitutions)\n+      record.closure_features (this, lookup_indexes, feature_indexes);\n+  }\n+\n+  bool subset (hb_subset_context_t        *c,\n+               hb_subset_layout_context_t *l) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    out->version.major = version.major;\n+    out->version.minor = version.minor;\n+\n+    + substitutions.iter ()\n+    | hb_apply (subset_record_array (l, &(out->substitutions), this))\n+    ;\n+    return_trace (true);\n+  }\n+\n@@ -1934,0 +2792,26 @@\n+  void collect_lookups (const void     *base,\n+                        const hb_set_t *feature_indexes,\n+                        hb_set_t       *lookup_indexes \/* OUT *\/) const\n+  {\n+    return (base+substitutions).collect_lookups (feature_indexes, lookup_indexes);\n+  }\n+\n+  void closure_features (const void     *base,\n+                         const hb_map_t *lookup_indexes,\n+                         hb_set_t       *feature_indexes \/* OUT *\/) const\n+  {\n+    (base+substitutions).closure_features (lookup_indexes, feature_indexes);\n+  }\n+\n+  bool subset (hb_subset_layout_context_t *c, const void *base) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->subset_context->serializer->embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    out->conditions.serialize_subset (c->subset_context, conditions, base);\n+    out->substitutions.serialize_subset (c->subset_context, substitutions, base, c);\n+\n+    return_trace (true);\n+  }\n+\n@@ -1955,1 +2839,1 @@\n-                          unsigned int *index) const\n+                   unsigned int *index) const\n@@ -1978,1 +2862,22 @@\n-  bool subset (hb_subset_context_t *c) const\n+  FeatureVariations* copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed (*this));\n+  }\n+\n+  void collect_lookups (const hb_set_t *feature_indexes,\n+                        hb_set_t       *lookup_indexes \/* OUT *\/) const\n+  {\n+    for (const FeatureVariationRecord& r : varRecords)\n+      r.collect_lookups (this, feature_indexes, lookup_indexes);\n+  }\n+\n+  void closure_features (const hb_map_t *lookup_indexes,\n+                         hb_set_t       *feature_indexes \/* OUT *\/) const\n+  {\n+    for (const FeatureVariationRecord& record : varRecords)\n+      record.closure_features (this, lookup_indexes, feature_indexes);\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               hb_subset_layout_context_t *l) const\n@@ -1981,1 +2886,10 @@\n-    return_trace (c->serializer->embed (*this));\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out || !c->serializer->extend_min (out))) return_trace (false);\n+\n+    out->version.major = version.major;\n+    out->version.minor = version.minor;\n+\n+    + varRecords.iter ()\n+    | hb_apply (subset_record_array (l, &(out->varRecords), this))\n+    ;\n+    return_trace (bool (out->varRecords));\n@@ -2017,0 +2931,2 @@\n+  public:\n+\n@@ -2030,0 +2946,6 @@\n+  HintingDevice* copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed<HintingDevice> (this));\n+  }\n+\n@@ -2091,0 +3013,26 @@\n+  VariationDevice* copy (hb_serialize_context_t *c, const hb_map_t *layout_variation_idx_map) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto snap = c->snapshot ();\n+    auto *out = c->embed (this);\n+    if (unlikely (!out)) return_trace (nullptr);\n+    if (!layout_variation_idx_map || layout_variation_idx_map->is_empty ()) return_trace (out);\n+\n+    unsigned org_idx = (outerIndex << 16) + innerIndex;\n+    if (!layout_variation_idx_map->has (org_idx))\n+    {\n+      c->revert (snap);\n+      return_trace (nullptr);\n+    }\n+    unsigned new_idx = layout_variation_idx_map->get (org_idx);\n+    out->outerIndex = new_idx >> 16;\n+    out->innerIndex = new_idx & 0xFFFF;\n+    return_trace (out);\n+  }\n+\n+  void record_variation_index (hb_set_t *layout_variation_indices) const\n+  {\n+    unsigned var_idx = (outerIndex << 16) + innerIndex;\n+    layout_variation_indices->add (var_idx);\n+  }\n+\n@@ -2129,0 +3077,1 @@\n+#ifndef HB_NO_HINTING\n@@ -2131,0 +3080,2 @@\n+#endif\n+#ifndef HB_NO_VAR\n@@ -2133,0 +3084,1 @@\n+#endif\n@@ -2142,0 +3094,1 @@\n+#ifndef HB_NO_HINTING\n@@ -2143,0 +3096,2 @@\n+#endif\n+#ifndef HB_NO_VAR\n@@ -2145,0 +3100,1 @@\n+#endif\n@@ -2155,0 +3111,1 @@\n+#ifndef HB_NO_HINTING\n@@ -2157,0 +3114,2 @@\n+#endif\n+#ifndef HB_NO_VAR\n@@ -2159,0 +3118,1 @@\n+#endif\n@@ -2164,0 +3124,38 @@\n+  Device* copy (hb_serialize_context_t *c, const hb_map_t *layout_variation_idx_map=nullptr) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    switch (u.b.format) {\n+#ifndef HB_NO_HINTING\n+    case 1:\n+    case 2:\n+    case 3:\n+      return_trace (reinterpret_cast<Device *> (u.hinting.copy (c)));\n+#endif\n+#ifndef HB_NO_VAR\n+    case 0x8000:\n+      return_trace (reinterpret_cast<Device *> (u.variation.copy (c, layout_variation_idx_map)));\n+#endif\n+    default:\n+      return_trace (nullptr);\n+    }\n+  }\n+\n+  void collect_variation_indices (hb_set_t *layout_variation_indices) const\n+  {\n+    switch (u.b.format) {\n+#ifndef HB_NO_HINTING\n+    case 1:\n+    case 2:\n+    case 3:\n+      return;\n+#endif\n+#ifndef HB_NO_VAR\n+    case 0x8000:\n+      u.variation.record_variation_index (layout_variation_indices);\n+      return;\n+#endif\n+    default:\n+      return;\n+    }\n+  }\n+\n@@ -2168,0 +3166,1 @@\n+#ifndef HB_NO_VAR\n@@ -2169,0 +3168,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-common.hh","additions":1299,"deletions":299,"binary":false,"changes":1598,"status":"modified"},{"patch":"@@ -44,2 +44,12 @@\n-typedef ArrayOf<HBUINT16> AttachPoint;  \/* Array of contour point indices--in\n-                                         * increasing numerical order *\/\n+\/* Array of contour point indices--in increasing numerical order *\/\n+struct AttachPoint : ArrayOf<HBUINT16>\n+{\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    return_trace (out->serialize (c->serializer, + iter ()));\n+  }\n+};\n@@ -66,4 +76,3 @@\n-      hb_array_t<const HBUINT16> array = points.sub_array (start_offset, point_count);\n-      unsigned int count = array.length;\n-      for (unsigned int i = 0; i < count; i++)\n-        point_array[i] = array[i];\n+      + points.sub_array (start_offset, point_count)\n+      | hb_sink (hb_array (point_array, *point_count))\n+      ;\n@@ -75,0 +84,22 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + hb_zip (this+coverage, attachPoint)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter (subset_offset_array (c, out->attachPoint, this), hb_second)\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+    out->coverage.serialize (c->serializer, out)\n+                 .serialize (c->serializer, new_coverage.iter ());\n+    return_trace (bool (new_coverage));\n+  }\n+\n@@ -99,0 +130,7 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+    return_trace (true);\n+  }\n@@ -122,0 +160,7 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+    return_trace (true);\n+  }\n@@ -156,0 +201,13 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    return_trace (out->deviceTable.serialize_copy (c->serializer, deviceTable, this, c->serializer->to_bias (out),\n+                                                   hb_serialize_context_t::Head, c->plan->layout_variation_idx_map));\n+  }\n+\n+  void collect_variation_indices (hb_set_t *layout_variation_indices) const\n+  { (this+deviceTable).collect_variation_indices (layout_variation_indices); }\n+\n@@ -176,3 +234,3 @@\n-                                        hb_direction_t direction,\n-                                        hb_codepoint_t glyph_id,\n-                                        const VariationStore &var_store) const\n+                                 hb_direction_t direction,\n+                                 hb_codepoint_t glyph_id,\n+                                 const VariationStore &var_store) const\n@@ -188,0 +246,26 @@\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n+  {\n+    TRACE_DISPATCH (this, u.format);\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return_trace (c->no_dispatch_return_value ());\n+    switch (u.format) {\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n+    case 2: return_trace (c->dispatch (u.format2, hb_forward<Ts> (ds)...));\n+    case 3: return_trace (c->dispatch (u.format3, hb_forward<Ts> (ds)...));\n+    default:return_trace (c->default_return_value ());\n+    }\n+  }\n+\n+  void collect_variation_indices (hb_set_t *layout_variation_indices) const\n+  {\n+    switch (u.format) {\n+    case 1:\n+    case 2:\n+      return;\n+    case 3:\n+      u.format3.collect_variation_indices (layout_variation_indices);\n+      return;\n+    default: return;\n+    }\n+  }\n+\n@@ -213,7 +297,7 @@\n-  unsigned int get_lig_carets (hb_font_t *font,\n-                               hb_direction_t direction,\n-                               hb_codepoint_t glyph_id,\n-                               const VariationStore &var_store,\n-                               unsigned int start_offset,\n-                               unsigned int *caret_count \/* IN\/OUT *\/,\n-                               hb_position_t *caret_array \/* OUT *\/) const\n+  unsigned get_lig_carets (hb_font_t            *font,\n+                           hb_direction_t        direction,\n+                           hb_codepoint_t        glyph_id,\n+                           const VariationStore &var_store,\n+                           unsigned              start_offset,\n+                           unsigned             *caret_count \/* IN\/OUT *\/,\n+                           hb_position_t        *caret_array \/* OUT *\/) const\n@@ -223,4 +307,5 @@\n-      hb_array_t <const OffsetTo<CaretValue> > array = carets.sub_array (start_offset, caret_count);\n-      unsigned int count = array.length;\n-      for (unsigned int i = 0; i < count; i++)\n-        caret_array[i] = (this+array[i]).get_caret_value (font, direction, glyph_id, var_store);\n+      + carets.sub_array (start_offset, caret_count)\n+      | hb_map (hb_add (this))\n+      | hb_map ([&] (const CaretValue &value) { return value.get_caret_value (font, direction, glyph_id, var_store); })\n+      | hb_sink (hb_array (caret_array, *caret_count))\n+      ;\n@@ -232,0 +317,19 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    + hb_iter (carets)\n+    | hb_apply (subset_offset_array (c, out->carets, this))\n+    ;\n+\n+    return_trace (bool (out->carets));\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    for (const OffsetTo<CaretValue>& offset : carets.iter ())\n+      (this+offset).collect_variation_indices (c->layout_variation_indices);\n+  }\n+\n@@ -268,0 +372,32 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + hb_zip (this+coverage, ligGlyph)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter (subset_offset_array (c, out->ligGlyph, this), hb_second)\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+    out->coverage.serialize (c->serializer, out)\n+                 .serialize (c->serializer, new_coverage.iter ());\n+    return_trace (bool (new_coverage));\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    + hb_zip (this+coverage, ligGlyph)\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const LigGlyph& _) { _.collect_variation_indices (c); })\n+    ;\n+  }\n+\n@@ -291,0 +427,28 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+\n+    bool ret = true;\n+    for (const LOffsetTo<Coverage>& offset : coverage.iter ())\n+    {\n+      auto *o = out->coverage.serialize_append (c->serializer);\n+      if (unlikely (!o))\n+      {\n+        ret = false;\n+        break;\n+      }\n+\n+      \/\/not using o->serialize_subset (c, offset, this, out) here because\n+      \/\/OTS doesn't allow null offset.\n+      \/\/See issue: https:\/\/github.com\/khaledhosny\/ots\/issues\/172\n+      c->serializer->push ();\n+      c->dispatch (this+offset);\n+      c->serializer->add_link (*o, c->serializer->pop_pack ());\n+    }\n+\n+    return_trace (ret && out->coverage.len);\n+  }\n+\n@@ -299,1 +463,1 @@\n-  ArrayOf<LOffsetTo<Coverage> >\n+  ArrayOf<LOffsetTo<Coverage>>\n@@ -316,0 +480,9 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    switch (u.format) {\n+    case 1: return_trace (u.format1.subset (c));\n+    default:return_trace (false);\n+    }\n+  }\n+\n@@ -359,1 +532,1 @@\n-  { (this+glyphClassDef).add_class (glyphs, klass); }\n+  { (this+glyphClassDef).collect_class (glyphs, klass); }\n@@ -389,1 +562,1 @@\n-  { return version.to_int () >= 0x00010003u ? this+varStore : Null(VariationStore); }\n+  { return version.to_int () >= 0x00010003u ? this+varStore : Null (VariationStore); }\n@@ -412,1 +585,1 @@\n-  HB_INTERNAL bool is_blacklisted (hb_blob_t *blob,\n+  HB_INTERNAL bool is_blocklisted (hb_blob_t *blob,\n@@ -419,2 +592,2 @@\n-      this->table = hb_sanitize_context_t().reference_table<GDEF> (face);\n-      if (unlikely (this->table->is_blacklisted (this->table.get_blob (), face)))\n+      this->table = hb_sanitize_context_t ().reference_table<GDEF> (face);\n+      if (unlikely (this->table->is_blocklisted (this->table.get_blob (), face)))\n@@ -439,0 +612,28 @@\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  { (this+ligCaretList).collect_variation_indices (c); }\n+\n+  void remap_layout_variation_indices (const hb_set_t *layout_variation_indices,\n+                                       hb_map_t *layout_variation_idx_map \/* OUT *\/) const\n+  {\n+    if (version.to_int () < 0x00010003u || !varStore) return;\n+    if (layout_variation_indices->is_empty ()) return;\n+\n+    unsigned new_major = 0, new_minor = 0;\n+    unsigned last_major = (layout_variation_indices->get_min ()) >> 16;\n+    for (unsigned idx : layout_variation_indices->iter ())\n+    {\n+      uint16_t major = idx >> 16;\n+      if (major >= (this+varStore).get_sub_table_count ()) break;\n+      if (major != last_major)\n+      {\n+        new_minor = 0;\n+        ++new_major;\n+      }\n+\n+      unsigned new_idx = (new_major << 16) + new_minor;\n+      layout_variation_idx_map->set (idx, new_idx);\n+      ++new_minor;\n+      last_major = major;\n+    }\n+  }\n+\n@@ -442,1 +643,1 @@\n-    struct GDEF *out = c->serializer->embed (*this);\n+    auto *out = c->serializer->embed (*this);\n@@ -445,4 +646,4 @@\n-    out->glyphClassDef.serialize_subset (c, this+glyphClassDef, out);\n-    out->attachList.set (0);\/\/TODO(subset) serialize_subset (c, this+attachList, out);\n-    out->ligCaretList.set (0);\/\/TODO(subset) serialize_subset (c, this+ligCaretList, out);\n-    out->markAttachClassDef.serialize_subset (c, this+markAttachClassDef, out);\n+    bool subset_glyphclassdef = out->glyphClassDef.serialize_subset (c, glyphClassDef, this);\n+    bool subset_attachlist = out->attachList.serialize_subset (c, attachList, this);\n+    bool subset_ligcaretlist = out->ligCaretList.serialize_subset (c, ligCaretList, this);\n+    bool subset_markattachclassdef = out->markAttachClassDef.serialize_subset (c, markAttachClassDef, this);\n@@ -450,0 +651,1 @@\n+    bool subset_markglyphsetsdef = true;\n@@ -451,1 +653,6 @@\n-      out->markGlyphSetsDef.set (0);\/\/ TODO(subset) serialize_subset (c, this+markGlyphSetsDef, out);\n+    {\n+      subset_markglyphsetsdef = out->markGlyphSetsDef.serialize_subset (c, markGlyphSetsDef, this);\n+      if (!subset_markglyphsetsdef &&\n+          version.to_int () == 0x00010002u)\n+        out->version.minor = 0;\n+    }\n@@ -453,0 +660,1 @@\n+    bool subset_varstore = true;\n@@ -454,1 +662,5 @@\n-      out->varStore.set (0);\/\/ TODO(subset) serialize_subset (c, this+varStore, out);\n+    {\n+      subset_varstore = out->varStore.serialize_subset (c, varStore, this);\n+      if (!subset_varstore && version.to_int () == 0x00010003u)\n+        out->version.minor = 2;\n+    }\n@@ -456,1 +668,4 @@\n-    return_trace (true);\n+    return_trace (subset_glyphclassdef || subset_attachlist ||\n+                  subset_ligcaretlist || subset_markattachclassdef ||\n+                  (out->version.to_int () >= 0x00010002u && subset_markglyphsetsdef) ||\n+                  (out->version.to_int () >= 0x00010003u && subset_varstore));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-gdef-table.hh","additions":249,"deletions":34,"binary":false,"changes":283,"status":"modified"},{"patch":"@@ -37,0 +37,5 @@\n+struct MarkArray;\n+static void Markclass_closure_and_remap_indexes (const Coverage  &mark_coverage,\n+                                                 const MarkArray &mark_array,\n+                                                 const hb_set_t  &glyphset,\n+                                                 hb_map_t*        klass_mapping \/* INOUT *\/);\n@@ -77,1 +82,1 @@\n-  HBINT16               xPlacement;             \/* Horizontal adjustment for\n+  HBINT16               xPlacement;     \/* Horizontal adjustment for\n@@ -79,1 +84,1 @@\n-  HBINT16               yPlacement;             \/* Vertical adjustment for\n+  HBINT16               yPlacement;     \/* Vertical adjustment for\n@@ -81,1 +86,1 @@\n-  HBINT16               xAdvance;               \/* Horizontal adjustment for\n+  HBINT16               xAdvance;       \/* Horizontal adjustment for\n@@ -84,1 +89,1 @@\n-  HBINT16               yAdvance;               \/* Vertical adjustment for advance--in\n+  HBINT16               yAdvance;       \/* Vertical adjustment for advance--in\n@@ -104,4 +109,4 @@\n-  bool apply_value (hb_ot_apply_context_t   *c,\n-                    const void           *base,\n-                    const Value          *values,\n-                    hb_glyph_position_t  &glyph_pos) const\n+  bool apply_value (hb_ot_apply_context_t *c,\n+                    const void            *base,\n+                    const Value           *values,\n+                    hb_glyph_position_t   &glyph_pos) const\n@@ -158,0 +163,54 @@\n+  void serialize_copy (hb_serialize_context_t *c, const void *base,\n+                       const Value *values, const hb_map_t *layout_variation_idx_map) const\n+  {\n+    unsigned int format = *this;\n+    if (!format) return;\n+\n+    if (format & xPlacement) c->copy (*values++);\n+    if (format & yPlacement) c->copy (*values++);\n+    if (format & xAdvance)   c->copy (*values++);\n+    if (format & yAdvance)   c->copy (*values++);\n+\n+    if (format & xPlaDevice) copy_device (c, base, values++, layout_variation_idx_map);\n+    if (format & yPlaDevice) copy_device (c, base, values++, layout_variation_idx_map);\n+    if (format & xAdvDevice) copy_device (c, base, values++, layout_variation_idx_map);\n+    if (format & yAdvDevice) copy_device (c, base, values++, layout_variation_idx_map);\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c,\n+                                  const void *base,\n+                                  const hb_array_t<const Value>& values) const\n+  {\n+    unsigned format = *this;\n+    unsigned i = 0;\n+    if (format & xPlacement) i++;\n+    if (format & yPlacement) i++;\n+    if (format & xAdvance) i++;\n+    if (format & yAdvance) i++;\n+    if (format & xPlaDevice)\n+    {\n+      (base + get_device (&(values[i]))).collect_variation_indices (c->layout_variation_indices);\n+      i++;\n+    }\n+\n+    if (format & ValueFormat::yPlaDevice)\n+    {\n+      (base + get_device (&(values[i]))).collect_variation_indices (c->layout_variation_indices);\n+      i++;\n+    }\n+\n+    if (format & ValueFormat::xAdvDevice)\n+    {\n+\n+      (base + get_device (&(values[i]))).collect_variation_indices (c->layout_variation_indices);\n+      i++;\n+    }\n+\n+    if (format & ValueFormat::yAdvDevice)\n+    {\n+\n+      (base + get_device (&(values[i]))).collect_variation_indices (c->layout_variation_indices);\n+      i++;\n+    }\n+  }\n+\n@@ -176,3 +235,5 @@\n-  static OffsetTo<Device>& get_device (Value* value)\n-  { return *CastP<OffsetTo<Device> > (value); }\n-  static const OffsetTo<Device>& get_device (const Value* value, bool *worked=nullptr)\n+  static inline OffsetTo<Device>& get_device (Value* value)\n+  {\n+    return *static_cast<OffsetTo<Device> *> (value);\n+  }\n+  static inline const OffsetTo<Device>& get_device (const Value* value, bool *worked=nullptr)\n@@ -181,1 +242,23 @@\n-    return *CastP<OffsetTo<Device> > (value);\n+    return *static_cast<const OffsetTo<Device> *> (value);\n+  }\n+\n+  bool copy_device (hb_serialize_context_t *c, const void *base,\n+                    const Value *src_value, const hb_map_t *layout_variation_idx_map) const\n+  {\n+    Value       *dst_value = c->copy (*src_value);\n+\n+    if (!dst_value) return false;\n+    if (*dst_value == 0) return true;\n+\n+    *dst_value = 0;\n+    c->push ();\n+    if ((base + get_device (src_value)).copy (c, layout_variation_idx_map))\n+    {\n+      c->add_link (*dst_value, c->pop_pack ());\n+      return true;\n+    }\n+    else\n+    {\n+      c->pop_discard ();\n+      return false;\n+    }\n@@ -184,1 +267,1 @@\n-  static const HBINT16& get_short (const Value* value, bool *worked=nullptr)\n+  static inline const HBINT16& get_short (const Value* value, bool *worked=nullptr)\n@@ -187,1 +270,1 @@\n-    return *CastP<HBINT16> (value);\n+    return *reinterpret_cast<const HBINT16 *> (value);\n@@ -239,0 +322,7 @@\n+template<typename Iterator>\n+static void SinglePos_serialize (hb_serialize_context_t *c,\n+                                 const void *src,\n+                                 Iterator it,\n+                                 ValueFormat valFormat,\n+                                 const hb_map_t *layout_variation_idx_map);\n+\n@@ -256,0 +346,6 @@\n+  AnchorFormat1* copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed<AnchorFormat1> (this));\n+  }\n+\n@@ -270,0 +366,7 @@\n+\n+#ifdef HB_NO_HINTING\n+    *x = font->em_fscale_x (xCoordinate);\n+    *y = font->em_fscale_y (yCoordinate);\n+    return;\n+#endif\n+\n@@ -287,0 +390,6 @@\n+  AnchorFormat2* copy (hb_serialize_context_t *c) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    return_trace (c->embed<AnchorFormat2> (this));\n+  }\n+\n@@ -317,0 +426,20 @@\n+  AnchorFormat3* copy (hb_serialize_context_t *c,\n+                       const hb_map_t *layout_variation_idx_map) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (!layout_variation_idx_map) return_trace (nullptr);\n+\n+    auto *out = c->embed<AnchorFormat3> (this);\n+    if (unlikely (!out)) return_trace (nullptr);\n+\n+    out->xDeviceTable.serialize_copy (c, xDeviceTable, this, 0, hb_serialize_context_t::Head, layout_variation_idx_map);\n+    out->yDeviceTable.serialize_copy (c, yDeviceTable, this, 0, hb_serialize_context_t::Head, layout_variation_idx_map);\n+    return_trace (out);\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    (this+xDeviceTable).collect_variation_indices (c->layout_variation_indices);\n+    (this+yDeviceTable).collect_variation_indices (c->layout_variation_indices);\n+  }\n+\n@@ -359,0 +488,23 @@\n+  Anchor* copy (hb_serialize_context_t *c, const hb_map_t *layout_variation_idx_map) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    switch (u.format) {\n+    case 1: return_trace (reinterpret_cast<Anchor *> (u.format1.copy (c)));\n+    case 2: return_trace (reinterpret_cast<Anchor *> (u.format2.copy (c)));\n+    case 3: return_trace (reinterpret_cast<Anchor *> (u.format3.copy (c, layout_variation_idx_map)));\n+    default:return_trace (nullptr);\n+    }\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    switch (u.format) {\n+    case 1: case 2:\n+      return;\n+    case 3:\n+      u.format3.collect_variation_indices (c);\n+      return;\n+    default: return;\n+    }\n+  }\n+\n@@ -377,1 +529,1 @@\n-    if (unlikely (row >= rows || col >= cols)) return Null(Anchor);\n+    if (unlikely (row >= rows || col >= cols)) return Null (Anchor);\n@@ -382,0 +534,35 @@\n+  template <typename Iterator,\n+            hb_requires (hb_is_iterator (Iterator))>\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c,\n+                                  Iterator index_iter) const\n+  {\n+    for (unsigned i : index_iter)\n+      (this+matrixZ[i]).collect_variation_indices (c);\n+  }\n+\n+  template <typename Iterator,\n+            hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize (hb_serialize_context_t *c,\n+                  unsigned                num_rows,\n+                  AnchorMatrix const     *offset_matrix,\n+                  const hb_map_t         *layout_variation_idx_map,\n+                  Iterator                index_iter)\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (!index_iter) return_trace (false);\n+    if (unlikely (!c->extend_min ((*this))))  return_trace (false);\n+\n+    this->rows = num_rows;\n+    for (const unsigned i : index_iter)\n+    {\n+      auto *offset = c->embed (offset_matrix->matrixZ[i]);\n+      if (!offset) return_trace (false);\n+      offset->serialize_copy (c, offset_matrix->matrixZ[i],\n+                              offset_matrix, c->to_bias (this),\n+                              hb_serialize_context_t::Head,\n+                              layout_variation_idx_map);\n+    }\n+\n+    return_trace (true);\n+  }\n+\n@@ -395,2 +582,1 @@\n-  protected:\n-  UnsizedArrayOf<OffsetTo<Anchor> >\n+  UnsizedArrayOf<OffsetTo<Anchor>>\n@@ -408,0 +594,1 @@\n+  unsigned get_class () const { return (unsigned) klass; }\n@@ -414,0 +601,21 @@\n+  MarkRecord *copy (hb_serialize_context_t *c,\n+                    const void             *src_base,\n+                    unsigned                dst_bias,\n+                    const hb_map_t         *klass_mapping,\n+                    const hb_map_t         *layout_variation_idx_map) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->embed (this);\n+    if (unlikely (!out)) return_trace (nullptr);\n+\n+    out->klass = klass_mapping->get (klass);\n+    out->markAnchor.serialize_copy (c, markAnchor, src_base, dst_bias, hb_serialize_context_t::Head, layout_variation_idx_map);\n+    return_trace (out);\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c,\n+                                  const void *src_base) const\n+  {\n+    (src_base+markAnchor).collect_variation_indices (c);\n+  }\n+\n@@ -449,2 +657,2 @@\n-    o.x_offset = round (base_x - mark_x);\n-    o.y_offset = round (base_y - mark_y);\n+    o.x_offset = roundf (base_x - mark_x);\n+    o.y_offset = roundf (base_y - mark_y);\n@@ -459,0 +667,15 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_source_of (Iterator, MarkRecord))>\n+  bool serialize (hb_serialize_context_t *c,\n+                  const hb_map_t         *klass_mapping,\n+                  const hb_map_t         *layout_variation_idx_map,\n+                  const void             *base,\n+                  Iterator                it)\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (unlikely (!c->extend_min (*this))) return_trace (false);\n+    if (unlikely (!c->check_assign (len, it.len ()))) return_trace (false);\n+    c->copy_all (it, base, c->to_bias (this), klass_mapping, layout_variation_idx_map);\n+    return_trace (true);\n+  }\n+\n@@ -474,0 +697,14 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    if (!valueFormat.has_device ()) return;\n+\n+    auto it =\n+    + hb_iter (this+coverage)\n+    | hb_filter (c->glyph_set)\n+    ;\n+\n+    if (!it) return;\n+    valueFormat.collect_variation_indices (c, this, values.as_array (valueFormat.get_len ()));\n+  }\n+\n@@ -475,1 +712,1 @@\n-  { if (unlikely (!(this+coverage).add_coverage (c->input))) return; }\n+  { if (unlikely (!(this+coverage).collect_coverage (c->input))) return; }\n@@ -492,0 +729,26 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  const void *src,\n+                  Iterator it,\n+                  ValueFormat valFormat,\n+                  const hb_map_t *layout_variation_idx_map)\n+  {\n+    auto out = c->extend_min (*this);\n+    if (unlikely (!out)) return;\n+    if (unlikely (!c->check_assign (valueFormat, valFormat))) return;\n+\n+    + it\n+    | hb_map (hb_second)\n+    | hb_apply ([&] (hb_array_t<const Value> _)\n+                { valFormat.serialize_copy (c, src, &_, layout_variation_idx_map); })\n+    ;\n+\n+    auto glyphs =\n+    + it\n+    | hb_map_retains_sorting (hb_first)\n+    ;\n+\n+    coverage.serialize (c, this).serialize (c, glyphs);\n+  }\n+\n@@ -495,2 +758,13 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto it =\n+    + hb_iter (this+coverage)\n+    | hb_filter (glyphset)\n+    | hb_map_retains_sorting (glyph_map)\n+    | hb_zip (hb_repeat (values.as_array (valueFormat.get_len ())))\n+    ;\n+\n+    bool ret = bool (it);\n+    SinglePos_serialize (c->serializer, this, it, valueFormat, c->plan->layout_variation_idx_map);\n+    return_trace (ret);\n@@ -526,0 +800,21 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    if (!valueFormat.has_device ()) return;\n+\n+    auto it =\n+    + hb_zip (this+coverage, hb_range ((unsigned) valueCount))\n+    | hb_filter (c->glyph_set, hb_first)\n+    ;\n+\n+    if (!it) return;\n+\n+    unsigned sub_length = valueFormat.get_len ();\n+    const hb_array_t<const Value> values_array = values.as_array (valueCount * sub_length);\n+\n+    for (unsigned i : + it\n+                      | hb_map (hb_second))\n+      valueFormat.collect_variation_indices (c, this, values_array.sub_array (i * sub_length, sub_length));\n+\n+  }\n+\n@@ -527,1 +822,1 @@\n-  { if (unlikely (!(this+coverage).add_coverage (c->input))) return; }\n+  { if (unlikely (!(this+coverage).collect_coverage (c->input))) return; }\n@@ -548,0 +843,27 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  const void *src,\n+                  Iterator it,\n+                  ValueFormat valFormat,\n+                  const hb_map_t *layout_variation_idx_map)\n+  {\n+    auto out = c->extend_min (*this);\n+    if (unlikely (!out)) return;\n+    if (unlikely (!c->check_assign (valueFormat, valFormat))) return;\n+    if (unlikely (!c->check_assign (valueCount, it.len ()))) return;\n+\n+    + it\n+    | hb_map (hb_second)\n+    | hb_apply ([&] (hb_array_t<const Value> _)\n+                { valFormat.serialize_copy (c, src, &_, layout_variation_idx_map); })\n+    ;\n+\n+    auto glyphs =\n+    + it\n+    | hb_map_retains_sorting (hb_first)\n+    ;\n+\n+    coverage.serialize (c, this).serialize (c, glyphs);\n+  }\n+\n@@ -551,2 +873,20 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    unsigned sub_length = valueFormat.get_len ();\n+    auto values_array = values.as_array (valueCount * sub_length);\n+\n+    auto it =\n+    + hb_zip (this+coverage, hb_range ((unsigned) valueCount))\n+    | hb_filter (glyphset, hb_first)\n+    | hb_map_retains_sorting ([&] (const hb_pair_t<hb_codepoint_t, unsigned>& _)\n+                              {\n+                                return hb_pair (glyph_map[_.first],\n+                                                values_array.sub_array (_.second * sub_length,\n+                                                                        sub_length));\n+                              })\n+    ;\n+\n+    bool ret = bool (it);\n+    SinglePos_serialize (c->serializer, this, it, valueFormat, c->plan->layout_variation_idx_map);\n+    return_trace (ret);\n@@ -579,2 +919,40 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  unsigned get_format (Iterator glyph_val_iter_pairs)\n+  {\n+    hb_array_t<const Value> first_val_iter = hb_second (*glyph_val_iter_pairs);\n+\n+    for (const auto iter : glyph_val_iter_pairs)\n+      for (const auto _ : hb_zip (iter.second, first_val_iter))\n+        if (_.first != _.second)\n+          return 2;\n+\n+    return 1;\n+  }\n+\n+\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  const void *src,\n+                  Iterator glyph_val_iter_pairs,\n+                  ValueFormat valFormat,\n+                  const hb_map_t *layout_variation_idx_map)\n+  {\n+    if (unlikely (!c->extend_min (u.format))) return;\n+    unsigned format = 2;\n+\n+    if (glyph_val_iter_pairs) format = get_format (glyph_val_iter_pairs);\n+\n+    u.format = format;\n+    switch (u.format) {\n+    case 1: u.format1.serialize (c, src, glyph_val_iter_pairs, valFormat, layout_variation_idx_map);\n+            return;\n+    case 2: u.format2.serialize (c, src, glyph_val_iter_pairs, valFormat, layout_variation_idx_map);\n+            return;\n+    default:return;\n+    }\n+  }\n+\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -585,2 +963,2 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n-    case 2: return_trace (c->dispatch (u.format2));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n+    case 2: return_trace (c->dispatch (u.format2, hb_forward<Ts> (ds)...));\n@@ -599,0 +977,9 @@\n+template<typename Iterator>\n+static void\n+SinglePos_serialize (hb_serialize_context_t *c,\n+                     const void *src,\n+                     Iterator it,\n+                     ValueFormat valFormat,\n+                     const hb_map_t *layout_variation_idx_map)\n+{ c->start_embed<SinglePos> ()->serialize (c, src, it, valFormat, layout_variation_idx_map); }\n+\n@@ -604,0 +991,42 @@\n+  int cmp (hb_codepoint_t k) const\n+  { return secondGlyph.cmp (k); }\n+\n+  struct serialize_closure_t\n+  {\n+    const void          *base;\n+    const ValueFormat   *valueFormats;\n+    unsigned            len1; \/* valueFormats[0].get_len() *\/\n+    const hb_map_t      *glyph_map;\n+    const hb_map_t      *layout_variation_idx_map;\n+  };\n+\n+  bool serialize (hb_serialize_context_t *c,\n+                  serialize_closure_t *closure) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->start_embed (*this);\n+    if (unlikely (!c->extend_min (out))) return_trace (false);\n+\n+    out->secondGlyph = (*closure->glyph_map)[secondGlyph];\n+\n+    closure->valueFormats[0].serialize_copy (c, closure->base, &values[0], closure->layout_variation_idx_map);\n+    closure->valueFormats[1].serialize_copy (c, closure->base, &values[closure->len1], closure->layout_variation_idx_map);\n+\n+    return_trace (true);\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c,\n+                                  const ValueFormat *valueFormats,\n+                                  const void *base) const\n+  {\n+    unsigned record1_len = valueFormats[0].get_len ();\n+    unsigned record2_len = valueFormats[1].get_len ();\n+    const hb_array_t<const Value> values_array = values.as_array (record1_len + record2_len);\n+\n+    if (valueFormats[0].has_device ())\n+      valueFormats[0].collect_variation_indices (c, base, values_array.sub_array (0, record1_len));\n+\n+    if (valueFormats[1].has_device ())\n+      valueFormats[1].collect_variation_indices (c, base, values_array.sub_array (record1_len, record2_len));\n+  }\n+\n@@ -605,1 +1034,1 @@\n-  GlyphID       secondGlyph;            \/* GlyphID of second glyph in the\n+  HBGlyphID     secondGlyph;            \/* GlyphID of second glyph in the\n@@ -619,1 +1048,1 @@\n-                          const ValueFormat *valueFormats) const\n+                   const ValueFormat *valueFormats) const\n@@ -637,1 +1066,1 @@\n-                              const ValueFormat *valueFormats) const\n+                       const ValueFormat *valueFormats) const\n@@ -647,0 +1076,18 @@\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c,\n+                                  const ValueFormat *valueFormats) const\n+  {\n+    unsigned len1 = valueFormats[0].get_len ();\n+    unsigned len2 = valueFormats[1].get_len ();\n+    unsigned record_size = HBUINT16::static_size * (1 + len1 + len2);\n+\n+    const PairValueRecord *record = &firstPairValueRecord;\n+    unsigned count = len;\n+    for (unsigned i = 0; i < count; i++)\n+    {\n+      if (c->glyph_set->has (record->secondGlyph))\n+      { record->collect_variation_indices (c, valueFormats, this); }\n+\n+      record = &StructAtOffset<const PairValueRecord> (record, record_size);\n+    }\n+  }\n+\n@@ -648,2 +1095,2 @@\n-                     const ValueFormat *valueFormats,\n-                     unsigned int pos) const\n+              const ValueFormat *valueFormats,\n+              unsigned int pos) const\n@@ -657,1 +1104,17 @@\n-    unsigned int count = len;\n+    const PairValueRecord *record = hb_bsearch (buffer->info[pos].codepoint,\n+                                                &firstPairValueRecord,\n+                                                len,\n+                                                record_size);\n+    if (record)\n+    {\n+      \/* Note the intentional use of \"|\" instead of short-circuit \"||\". *\/\n+      if (valueFormats[0].apply_value (c, this, &record->values[0], buffer->cur_pos()) |\n+          valueFormats[1].apply_value (c, this, &record->values[len1], buffer->pos[pos]))\n+        buffer->unsafe_to_break (buffer->idx, pos + 1);\n+      if (len2)\n+        pos++;\n+      buffer->idx = pos;\n+      return_trace (true);\n+    }\n+    return_trace (false);\n+  }\n@@ -659,6 +1122,18 @@\n-    \/* Hand-coded bsearch. *\/\n-    if (unlikely (!count))\n-      return_trace (false);\n-    hb_codepoint_t x = buffer->info[pos].codepoint;\n-    int min = 0, max = (int) count - 1;\n-    while (min <= max)\n+  bool subset (hb_subset_context_t *c,\n+               const ValueFormat valueFormats[2]) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto snap = c->serializer->snapshot ();\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->len = 0;\n+\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    unsigned len1 = valueFormats[0].get_len ();\n+    unsigned len2 = valueFormats[1].get_len ();\n+    unsigned record_size = HBUINT16::static_size + Value::static_size * (len1 + len2);\n+\n+    PairValueRecord::serialize_closure_t closure =\n@@ -666,18 +1141,14 @@\n-      int mid = ((unsigned int) min + (unsigned int) max) \/ 2;\n-      const PairValueRecord *record = &StructAtOffset<PairValueRecord> (&firstPairValueRecord, record_size * mid);\n-      hb_codepoint_t mid_x = record->secondGlyph;\n-      if (x < mid_x)\n-        max = mid - 1;\n-      else if (x > mid_x)\n-        min = mid + 1;\n-      else\n-      {\n-        \/* Note the intentional use of \"|\" instead of short-circuit \"||\". *\/\n-        if (valueFormats[0].apply_value (c, this, &record->values[0], buffer->cur_pos()) |\n-            valueFormats[1].apply_value (c, this, &record->values[len1], buffer->pos[pos]))\n-          buffer->unsafe_to_break (buffer->idx, pos + 1);\n-        if (len2)\n-          pos++;\n-        buffer->idx = pos;\n-        return_trace (true);\n-      }\n+      this,\n+      valueFormats,\n+      len1,\n+      &glyph_map,\n+      c->plan->layout_variation_idx_map\n+    };\n+\n+    const PairValueRecord *record = &firstPairValueRecord;\n+    unsigned count = len, num = 0;\n+    for (unsigned i = 0; i < count; i++)\n+    {\n+      if (glyphset.has (record->secondGlyph)\n+         && record->serialize (c->serializer, &closure)) num++;\n+      record = &StructAtOffset<const PairValueRecord> (record, record_size);\n@@ -686,1 +1157,3 @@\n-    return_trace (false);\n+    out->len = num;\n+    if (!num) c->serializer->revert (snap);\n+    return_trace (num);\n@@ -691,1 +1164,0 @@\n-    const void *base;\n@@ -708,2 +1180,2 @@\n-    return_trace (closure->valueFormats[0].sanitize_values_stride_unsafe (c, closure->base, &record->values[0], count, closure->stride) &&\n-                  closure->valueFormats[1].sanitize_values_stride_unsafe (c, closure->base, &record->values[closure->len1], count, closure->stride));\n+    return_trace (closure->valueFormats[0].sanitize_values_stride_unsafe (c, this, &record->values[0], count, closure->stride) &&\n+                  closure->valueFormats[1].sanitize_values_stride_unsafe (c, this, &record->values[closure->len1], count, closure->stride));\n@@ -725,10 +1197,26 @@\n-    unsigned int count = pairSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (glyphs->has (iter.get_glyph ()) &&\n-          (this+pairSet[iter.get_coverage ()]).intersects (glyphs, valueFormat))\n-        return true;\n-    }\n-    return false;\n+    return\n+    + hb_zip (this+coverage, pairSet)\n+    | hb_filter (*glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map ([glyphs, this] (const OffsetTo<PairSet> &_)\n+              { return (this+_).intersects (glyphs, valueFormat); })\n+    | hb_any\n+    ;\n+  }\n+\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    if ((!valueFormat[0].has_device ()) && (!valueFormat[1].has_device ())) return;\n+\n+    auto it =\n+    + hb_zip (this+coverage, pairSet)\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    ;\n+\n+    if (!it) return;\n+    + it\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const PairSet& _) { _.collect_variation_indices (c, valueFormat); })\n+    ;\n@@ -739,1 +1227,1 @@\n-    if (unlikely (!(this+coverage).add_coverage (c->input))) return;\n+    if (unlikely (!(this+coverage).collect_coverage (c->input))) return;\n@@ -764,2 +1252,37 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+    out->valueFormat[0] = valueFormat[0];\n+    out->valueFormat[1] = valueFormat[1];\n+\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+\n+    + hb_zip (this+coverage, pairSet)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter ([this, c, out] (const OffsetTo<PairSet>& _)\n+                 {\n+                   auto *o = out->pairSet.serialize_append (c->serializer);\n+                   if (unlikely (!o)) return false;\n+                   auto snap = c->serializer->snapshot ();\n+                   bool ret = o->serialize_subset (c, _, this, valueFormat);\n+                   if (!ret)\n+                   {\n+                     out->pairSet.pop ();\n+                     c->serializer->revert (snap);\n+                   }\n+                   return ret;\n+                 },\n+                 hb_second)\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+\n+    out->coverage.serialize (c->serializer, out)\n+                 .serialize (c->serializer, new_coverage.iter ());\n+\n+    return_trace (bool (new_coverage));\n@@ -778,1 +1301,0 @@\n-      this,\n@@ -813,0 +1335,33 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    if ((!valueFormat1.has_device ()) && (!valueFormat2.has_device ())) return;\n+\n+    hb_set_t class1_set, class2_set;\n+    for (const unsigned cp : c->glyph_set->iter ())\n+    {\n+      unsigned klass1 = (this+classDef1).get (cp);\n+      unsigned klass2 = (this+classDef2).get (cp);\n+      class1_set.add (klass1);\n+      class2_set.add (klass2);\n+    }\n+\n+    if (class1_set.is_empty () || class2_set.is_empty ()) return;\n+\n+    unsigned len1 = valueFormat1.get_len ();\n+    unsigned len2 = valueFormat2.get_len ();\n+    const hb_array_t<const Value> values_array = values.as_array ((unsigned)class1Count * (unsigned) class2Count * (len1 + len2));\n+    for (const unsigned class1_idx : class1_set.iter ())\n+    {\n+      for (const unsigned class2_idx : class2_set.iter ())\n+      {\n+        unsigned start_offset = (class1_idx * (unsigned) class2Count + class2_idx) * (len1 + len2);\n+        if (valueFormat1.has_device ())\n+          valueFormat1.collect_variation_indices (c, this, values_array.sub_array (start_offset, len1));\n+\n+        if (valueFormat2.has_device ())\n+          valueFormat2.collect_variation_indices (c, this, values_array.sub_array (start_offset+len1, len2));\n+      }\n+    }\n+  }\n+\n@@ -815,2 +1370,2 @@\n-    if (unlikely (!(this+coverage).add_coverage (c->input))) return;\n-    if (unlikely (!(this+classDef2).add_coverage (c->input))) return;\n+    if (unlikely (!(this+coverage).collect_coverage (c->input))) return;\n+    if (unlikely (!(this+classDef2).collect_coverage (c->input))) return;\n@@ -856,2 +1411,44 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+    out->valueFormat1 = valueFormat1;\n+    out->valueFormat2 = valueFormat2;\n+\n+    hb_map_t klass1_map;\n+    out->classDef1.serialize_subset (c, classDef1, this, &klass1_map);\n+    out->class1Count = klass1_map.get_population ();\n+\n+    hb_map_t klass2_map;\n+    out->classDef2.serialize_subset (c, classDef2, this, &klass2_map);\n+    out->class2Count = klass2_map.get_population ();\n+\n+    unsigned len1 = valueFormat1.get_len ();\n+    unsigned len2 = valueFormat2.get_len ();\n+\n+    + hb_range ((unsigned) class1Count)\n+    | hb_filter (klass1_map)\n+    | hb_apply ([&] (const unsigned class1_idx)\n+                {\n+                  + hb_range ((unsigned) class2Count)\n+                  | hb_filter (klass2_map)\n+                  | hb_apply ([&] (const unsigned class2_idx)\n+                              {\n+                                unsigned idx = (class1_idx * (unsigned) class2Count + class2_idx) * (len1 + len2);\n+                                valueFormat1.serialize_copy (c->serializer, this, &values[idx], c->plan->layout_variation_idx_map);\n+                                valueFormat2.serialize_copy (c->serializer, this, &values[idx + len1], c->plan->layout_variation_idx_map);\n+                              })\n+                  ;\n+                })\n+    ;\n+\n+    const hb_set_t &glyphset = *c->plan->_glyphset_gsub;\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto it =\n+    + hb_iter (this+coverage)\n+    | hb_filter (glyphset)\n+    | hb_map_retains_sorting (glyph_map)\n+    ;\n+\n+    out->coverage.serialize (c->serializer, out).serialize (c->serializer, it);\n+    return_trace (out->class1Count && out->class2Count && bool (it));\n@@ -912,2 +1509,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -918,2 +1515,2 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n-    case 2: return_trace (c->dispatch (u.format2));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n+    case 2: return_trace (c->dispatch (u.format2, hb_forward<Ts> (ds)...));\n@@ -943,0 +1540,21 @@\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c,\n+                                  const void *src_base) const\n+  {\n+    (src_base+entryAnchor).collect_variation_indices (c);\n+    (src_base+exitAnchor).collect_variation_indices (c);\n+  }\n+\n+  EntryExitRecord* copy (hb_serialize_context_t *c,\n+                         const void *src_base,\n+                         const void *dst_base,\n+                         const hb_map_t *layout_variation_idx_map) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->embed (this);\n+    if (unlikely (!out)) return_trace (nullptr);\n+\n+    out->entryAnchor.serialize_copy (c, entryAnchor, src_base, c->to_bias (dst_base), hb_serialize_context_t::Head, layout_variation_idx_map);\n+    out->exitAnchor.serialize_copy (c, exitAnchor, src_base, c->to_bias (dst_base), hb_serialize_context_t::Head, layout_variation_idx_map);\n+    return_trace (out);\n+  }\n+\n@@ -964,0 +1582,11 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    + hb_zip (this+coverage, entryExitRecord)\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    | hb_apply ([&] (const EntryExitRecord& record) { record.collect_variation_indices (c, this); })\n+    ;\n+  }\n+\n@@ -965,1 +1594,1 @@\n-  { if (unlikely (!(this+coverage).add_coverage (c->input))) return; }\n+  { if (unlikely (!(this+coverage).collect_coverage (c->input))) return; }\n@@ -998,1 +1627,1 @@\n-        pos[i].x_advance  = round (exit_x) + pos[i].x_offset;\n+        pos[i].x_advance  = roundf (exit_x) + pos[i].x_offset;\n@@ -1000,1 +1629,1 @@\n-        d = round (entry_x) + pos[j].x_offset;\n+        d = roundf (entry_x) + pos[j].x_offset;\n@@ -1005,1 +1634,1 @@\n-        d = round (exit_x) + pos[i].x_offset;\n+        d = roundf (exit_x) + pos[i].x_offset;\n@@ -1009,1 +1638,1 @@\n-        pos[j].x_advance  = round (entry_x) + pos[j].x_offset;\n+        pos[j].x_advance  = roundf (entry_x) + pos[j].x_offset;\n@@ -1012,1 +1641,1 @@\n-        pos[i].y_advance  = round (exit_y) + pos[i].y_offset;\n+        pos[i].y_advance  = roundf (exit_y) + pos[i].y_offset;\n@@ -1014,1 +1643,1 @@\n-        d = round (entry_y) + pos[j].y_offset;\n+        d = roundf (entry_y) + pos[j].y_offset;\n@@ -1019,1 +1648,1 @@\n-        d = round (exit_y) + pos[i].y_offset;\n+        d = roundf (exit_y) + pos[i].y_offset;\n@@ -1023,1 +1652,1 @@\n-        pos[j].y_advance  = round (entry_y);\n+        pos[j].y_advance  = roundf (entry_y);\n@@ -1066,0 +1695,6 @@\n+    \/* If parent was attached to child, break them free.\n+     * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/2469\n+     *\/\n+    if (unlikely (pos[parent].attach_chain() == -pos[child].attach_chain()))\n+      pos[parent].attach_chain() = 0;\n+\n@@ -1070,0 +1705,23 @@\n+  template <typename Iterator,\n+            hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  Iterator it,\n+                  const void *src_base,\n+                  const hb_map_t *layout_variation_idx_map)\n+  {\n+    if (unlikely (!c->extend_min ((*this)))) return;\n+    this->format = 1;\n+    this->entryExitRecord.len = it.len ();\n+\n+    for (const EntryExitRecord& entry_record : + it\n+                                               | hb_map (hb_second))\n+      c->copy (entry_record, src_base, this, layout_variation_idx_map);\n+\n+    auto glyphs =\n+    + it\n+    | hb_map_retains_sorting (hb_first)\n+    ;\n+\n+    coverage.serialize (c, this).serialize (c, glyphs);\n+  }\n+\n@@ -1073,2 +1731,16 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n+\n+    auto it =\n+    + hb_zip (this+coverage, entryExitRecord)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_map_retains_sorting ([&] (hb_pair_t<hb_codepoint_t, const EntryExitRecord&> p) -> hb_pair_t<hb_codepoint_t, const EntryExitRecord&>\n+                              { return hb_pair (glyph_map[p.first], p.second);})\n+    ;\n+\n+    bool ret = bool (it);\n+    out->serialize (c->serializer, it, this, c->plan->layout_variation_idx_map);\n+    return_trace (ret);\n@@ -1097,2 +1769,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -1103,1 +1775,1 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n@@ -1121,0 +1793,23 @@\n+static void Markclass_closure_and_remap_indexes (const Coverage  &mark_coverage,\n+                                                 const MarkArray &mark_array,\n+                                                 const hb_set_t  &glyphset,\n+                                                 hb_map_t*        klass_mapping \/* INOUT *\/)\n+{\n+  hb_set_t orig_classes;\n+\n+  + hb_zip (mark_coverage, mark_array)\n+  | hb_filter (glyphset, hb_first)\n+  | hb_map (hb_second)\n+  | hb_map (&MarkRecord::get_class)\n+  | hb_sink (orig_classes)\n+  ;\n+\n+  unsigned idx = 0;\n+  for (auto klass : orig_classes.iter ())\n+  {\n+    if (klass_mapping->has (klass)) continue;\n+    klass_mapping->set (klass, idx);\n+    idx++;\n+  }\n+}\n+\n@@ -1124,2 +1819,36 @@\n-  { return (this+markCoverage).intersects (glyphs) &&\n-           (this+baseCoverage).intersects (glyphs); }\n+  {\n+    return (this+markCoverage).intersects (glyphs) &&\n+           (this+baseCoverage).intersects (glyphs);\n+  }\n+\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    + hb_zip (this+markCoverage, this+markArray)\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    | hb_apply ([&] (const MarkRecord& record) { record.collect_variation_indices (c, &(this+markArray)); })\n+    ;\n+\n+    hb_map_t klass_mapping;\n+    Markclass_closure_and_remap_indexes (this+markCoverage, this+markArray, *c->glyph_set, &klass_mapping);\n+\n+    unsigned basecount = (this+baseArray).rows;\n+    auto base_iter =\n+    + hb_zip (this+baseCoverage, hb_range (basecount))\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    ;\n+\n+    hb_sorted_vector_t<unsigned> base_indexes;\n+    for (const unsigned row : base_iter)\n+    {\n+      + hb_range ((unsigned) classCount)\n+      | hb_filter (klass_mapping)\n+      | hb_map ([&] (const unsigned col) { return row * (unsigned) classCount + col; })\n+      | hb_sink (base_indexes)\n+      ;\n+    }\n+    (this+baseArray).collect_variation_indices (c, base_indexes.iter ());\n+  }\n@@ -1129,2 +1858,2 @@\n-    if (unlikely (!(this+markCoverage).add_coverage (c->input))) return;\n-    if (unlikely (!(this+baseCoverage).add_coverage (c->input))) return;\n+    if (unlikely (!(this+markCoverage).collect_coverage (c->input))) return;\n+    if (unlikely (!(this+baseCoverage).collect_coverage (c->input))) return;\n@@ -1178,2 +1907,64 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+\n+    hb_map_t klass_mapping;\n+    Markclass_closure_and_remap_indexes (this+markCoverage, this+markArray, glyphset, &klass_mapping);\n+\n+    if (!klass_mapping.get_population ()) return_trace (false);\n+    out->classCount = klass_mapping.get_population ();\n+\n+    auto mark_iter =\n+    + hb_zip (this+markCoverage, this+markArray)\n+    | hb_filter (glyphset, hb_first)\n+    ;\n+\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + mark_iter\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+\n+    if (!out->markCoverage.serialize (c->serializer, out)\n+                          .serialize (c->serializer, new_coverage.iter ()))\n+      return_trace (false);\n+\n+    out->markArray.serialize (c->serializer, out)\n+                  .serialize (c->serializer, &klass_mapping, c->plan->layout_variation_idx_map, &(this+markArray), + mark_iter\n+                                                                                                                   | hb_map (hb_second));\n+\n+    unsigned basecount = (this+baseArray).rows;\n+    auto base_iter =\n+    + hb_zip (this+baseCoverage, hb_range (basecount))\n+    | hb_filter (glyphset, hb_first)\n+    ;\n+\n+    new_coverage.reset ();\n+    + base_iter\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+\n+    if (!out->baseCoverage.serialize (c->serializer, out)\n+                          .serialize (c->serializer, new_coverage.iter ()))\n+      return_trace (false);\n+\n+    hb_sorted_vector_t<unsigned> base_indexes;\n+    for (const unsigned row : + base_iter\n+                              | hb_map (hb_second))\n+    {\n+      + hb_range ((unsigned) classCount)\n+      | hb_filter (klass_mapping)\n+      | hb_map ([&] (const unsigned col) { return row * (unsigned) classCount + col; })\n+      | hb_sink (base_indexes)\n+      ;\n+    }\n+    out->baseArray.serialize (c->serializer, out)\n+                  .serialize (c->serializer, base_iter.len (), &(this+baseArray), c->plan->layout_variation_idx_map, base_indexes.iter ());\n+\n+    return_trace (true);\n@@ -1213,2 +2004,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -1219,1 +2010,1 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n@@ -1245,2 +2036,42 @@\n-  { return (this+markCoverage).intersects (glyphs) &&\n-           (this+ligatureCoverage).intersects (glyphs); }\n+  {\n+    return (this+markCoverage).intersects (glyphs) &&\n+           (this+ligatureCoverage).intersects (glyphs);\n+  }\n+\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    + hb_zip (this+markCoverage, this+markArray)\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    | hb_apply ([&] (const MarkRecord& record) { record.collect_variation_indices (c, &(this+markArray)); })\n+    ;\n+\n+    hb_map_t klass_mapping;\n+    Markclass_closure_and_remap_indexes (this+markCoverage, this+markArray, *c->glyph_set, &klass_mapping);\n+\n+    unsigned ligcount = (this+ligatureArray).len;\n+    auto lig_iter =\n+    + hb_zip (this+ligatureCoverage, hb_range (ligcount))\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    ;\n+\n+    const LigatureArray& lig_array = this+ligatureArray;\n+    for (const unsigned i : lig_iter)\n+    {\n+      hb_sorted_vector_t<unsigned> lig_indexes;\n+      unsigned row_count = lig_array[i].rows;\n+      for (unsigned row : + hb_range (row_count))\n+      {\n+        + hb_range ((unsigned) classCount)\n+        | hb_filter (klass_mapping)\n+        | hb_map ([&] (const unsigned col) { return row * (unsigned) classCount + col; })\n+        | hb_sink (lig_indexes)\n+        ;\n+      }\n+\n+      lig_array[i].collect_variation_indices (c, lig_indexes.iter ());\n+    }\n+  }\n@@ -1250,2 +2081,2 @@\n-    if (unlikely (!(this+markCoverage).add_coverage (c->input))) return;\n-    if (unlikely (!(this+ligatureCoverage).add_coverage (c->input))) return;\n+    if (unlikely (!(this+markCoverage).collect_coverage (c->input))) return;\n+    if (unlikely (!(this+ligatureCoverage).collect_coverage (c->input))) return;\n@@ -1292,1 +2123,1 @@\n-      comp_index = MIN (comp_count, _hb_glyph_info_get_lig_comp (&buffer->cur())) - 1;\n+      comp_index = hb_min (comp_count, _hb_glyph_info_get_lig_comp (&buffer->cur())) - 1;\n@@ -1338,2 +2169,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -1344,1 +2175,1 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n@@ -1365,2 +2196,36 @@\n-  { return (this+mark1Coverage).intersects (glyphs) &&\n-           (this+mark2Coverage).intersects (glyphs); }\n+  {\n+    return (this+mark1Coverage).intersects (glyphs) &&\n+           (this+mark2Coverage).intersects (glyphs);\n+  }\n+\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    + hb_zip (this+mark1Coverage, this+mark1Array)\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    | hb_apply ([&] (const MarkRecord& record) { record.collect_variation_indices (c, &(this+mark1Array)); })\n+    ;\n+\n+    hb_map_t klass_mapping;\n+    Markclass_closure_and_remap_indexes (this+mark1Coverage, this+mark1Array, *c->glyph_set, &klass_mapping);\n+\n+    unsigned mark2_count = (this+mark2Array).rows;\n+    auto mark2_iter =\n+    + hb_zip (this+mark2Coverage, hb_range (mark2_count))\n+    | hb_filter (c->glyph_set, hb_first)\n+    | hb_map (hb_second)\n+    ;\n+\n+    hb_sorted_vector_t<unsigned> mark2_indexes;\n+    for (const unsigned row : mark2_iter)\n+    {\n+      + hb_range ((unsigned) classCount)\n+      | hb_filter (klass_mapping)\n+      | hb_map ([&] (const unsigned col) { return row * (unsigned) classCount + col; })\n+      | hb_sink (mark2_indexes)\n+      ;\n+    }\n+    (this+mark2Array).collect_variation_indices (c, mark2_indexes.iter ());\n+  }\n@@ -1370,2 +2235,2 @@\n-    if (unlikely (!(this+mark1Coverage).add_coverage (c->input))) return;\n-    if (unlikely (!(this+mark2Coverage).add_coverage (c->input))) return;\n+    if (unlikely (!(this+mark1Coverage).collect_coverage (c->input))) return;\n+    if (unlikely (!(this+mark2Coverage).collect_coverage (c->input))) return;\n@@ -1398,1 +2263,2 @@\n-    if (likely (id1 == id2)) {\n+    if (likely (id1 == id2))\n+    {\n@@ -1403,1 +2269,3 @@\n-    } else {\n+    }\n+    else\n+    {\n@@ -1423,2 +2291,64 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+\n+    hb_map_t klass_mapping;\n+    Markclass_closure_and_remap_indexes (this+mark1Coverage, this+mark1Array, glyphset, &klass_mapping);\n+\n+    if (!klass_mapping.get_population ()) return_trace (false);\n+    out->classCount = klass_mapping.get_population ();\n+\n+    auto mark1_iter =\n+    + hb_zip (this+mark1Coverage, this+mark1Array)\n+    | hb_filter (glyphset, hb_first)\n+    ;\n+\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + mark1_iter\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+\n+    if (!out->mark1Coverage.serialize (c->serializer, out)\n+                           .serialize (c->serializer, new_coverage.iter ()))\n+      return_trace (false);\n+\n+    out->mark1Array.serialize (c->serializer, out)\n+                   .serialize (c->serializer, &klass_mapping, c->plan->layout_variation_idx_map, &(this+mark1Array), + mark1_iter\n+                                                                                                                     | hb_map (hb_second));\n+\n+    unsigned mark2count = (this+mark2Array).rows;\n+    auto mark2_iter =\n+    + hb_zip (this+mark2Coverage, hb_range (mark2count))\n+    | hb_filter (glyphset, hb_first)\n+    ;\n+\n+    new_coverage.reset ();\n+    + mark2_iter\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+\n+    if (!out->mark2Coverage.serialize (c->serializer, out)\n+                           .serialize (c->serializer, new_coverage.iter ()))\n+      return_trace (false);\n+\n+    hb_sorted_vector_t<unsigned> mark2_indexes;\n+    for (const unsigned row : + mark2_iter\n+                              | hb_map (hb_second))\n+    {\n+      + hb_range ((unsigned) classCount)\n+      | hb_filter (klass_mapping)\n+      | hb_map ([&] (const unsigned col) { return row * (unsigned) classCount + col; })\n+      | hb_sink (mark2_indexes)\n+      ;\n+    }\n+    out->mark2Array.serialize (c->serializer, out)\n+                   .serialize (c->serializer, mark2_iter.len (), &(this+mark2Array), c->plan->layout_variation_idx_map, mark2_indexes.iter ());\n+\n+    return_trace (true);\n@@ -1460,2 +2390,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -1466,1 +2396,1 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n@@ -1512,2 +2442,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c, unsigned int lookup_type) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, unsigned int lookup_type, Ts&&... ds) const\n@@ -1517,9 +2447,9 @@\n-    case Single:                return_trace (u.single.dispatch (c));\n-    case Pair:                  return_trace (u.pair.dispatch (c));\n-    case Cursive:               return_trace (u.cursive.dispatch (c));\n-    case MarkBase:              return_trace (u.markBase.dispatch (c));\n-    case MarkLig:               return_trace (u.markLig.dispatch (c));\n-    case MarkMark:              return_trace (u.markMark.dispatch (c));\n-    case Context:               return_trace (u.context.dispatch (c));\n-    case ChainContext:          return_trace (u.chainContext.dispatch (c));\n-    case Extension:             return_trace (u.extension.dispatch (c));\n+    case Single:                return_trace (u.single.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Pair:                  return_trace (u.pair.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Cursive:               return_trace (u.cursive.dispatch (c, hb_forward<Ts> (ds)...));\n+    case MarkBase:              return_trace (u.markBase.dispatch (c, hb_forward<Ts> (ds)...));\n+    case MarkLig:               return_trace (u.markLig.dispatch (c, hb_forward<Ts> (ds)...));\n+    case MarkMark:              return_trace (u.markMark.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Context:               return_trace (u.context.dispatch (c, hb_forward<Ts> (ds)...));\n+    case ChainContext:          return_trace (u.chainContext.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Extension:             return_trace (u.extension.dispatch (c, hb_forward<Ts> (ds)...));\n@@ -1530,0 +2460,6 @@\n+  bool intersects (const hb_set_t *glyphs, unsigned int lookup_type) const\n+  {\n+    hb_intersects_context_t c (glyphs);\n+    return dispatch (&c, lookup_type);\n+  }\n+\n@@ -1574,0 +2510,17 @@\n+  hb_closure_lookups_context_t::return_t closure_lookups (hb_closure_lookups_context_t *c, unsigned this_index) const\n+  {\n+    if (c->is_lookup_visited (this_index))\n+      return hb_closure_lookups_context_t::default_return_value ();\n+\n+    c->set_lookup_visited (this_index);\n+    if (!intersects (c->glyphs))\n+    {\n+      c->set_lookup_inactive (this_index);\n+      return hb_closure_lookups_context_t::default_return_value ();\n+    }\n+    c->set_recurse_func (dispatch_closure_lookups_recurse_func);\n+\n+    hb_closure_lookups_context_t::return_t ret = dispatch (c);\n+    return ret;\n+  }\n+\n@@ -1575,1 +2528,1 @@\n-  void add_coverage (set_t *glyphs) const\n+  void collect_coverage (set_t *glyphs) const\n@@ -1577,1 +2530,1 @@\n-    hb_add_coverage_context_t<set_t> c (glyphs);\n+    hb_collect_coverage_context_t<set_t> c (glyphs);\n@@ -1581,1 +2534,1 @@\n-  static bool apply_recurse_func (hb_ot_apply_context_t *c, unsigned int lookup_index);\n+  static inline bool apply_recurse_func (hb_ot_apply_context_t *c, unsigned int lookup_index);\n@@ -1586,3 +2539,5 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n-  { return Lookup::dispatch<SubTable> (c); }\n+  HB_INTERNAL static hb_closure_lookups_context_t::return_t dispatch_closure_lookups_recurse_func (hb_closure_lookups_context_t *c, unsigned this_index);\n+\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n+  { return Lookup::dispatch<SubTable> (c, hb_forward<Ts> (ds)...); }\n@@ -1607,1 +2562,1 @@\n-  { return CastR<PosLookup> (GSUBGPOS::get_lookup (i)); }\n+  { return static_cast<const PosLookup &> (GSUBGPOS::get_lookup (i)); }\n@@ -1614,1 +2569,4 @@\n-  { return GSUBGPOS::subset<PosLookup> (c); }\n+  {\n+    hb_subset_layout_context_t l (c, tableTag, c->plan->gpos_lookups, c->plan->gpos_features);\n+    return GSUBGPOS::subset<PosLookup> (&l);\n+  }\n@@ -1619,1 +2577,1 @@\n-  HB_INTERNAL bool is_blacklisted (hb_blob_t *blob,\n+  HB_INTERNAL bool is_blocklisted (hb_blob_t *blob,\n@@ -1622,0 +2580,15 @@\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  {\n+    for (unsigned i = 0; i < GSUBGPOS::get_lookup_count (); i++)\n+    {\n+      if (!c->gpos_lookups->has (i)) continue;\n+      const PosLookup &l = get_lookup (i);\n+      l.dispatch (c);\n+    }\n+  }\n+\n+  void closure_lookups (hb_face_t      *face,\n+                        const hb_set_t *glyphs,\n+                        hb_set_t       *lookup_indexes \/* IN\/OUT *\/) const\n+  { GSUBGPOS::closure_lookups<PosLookup> (face, glyphs, lookup_indexes); }\n+\n@@ -1735,0 +2708,1 @@\n+#ifndef HB_NO_OT_LAYOUT\n@@ -1736,1 +2710,1 @@\n-\/*static*\/ inline typename context_t::return_t PosLookup::dispatch_recurse_func (context_t *c, unsigned int lookup_index)\n+\/*static*\/ typename context_t::return_t PosLookup::dispatch_recurse_func (context_t *c, unsigned int lookup_index)\n@@ -1742,1 +2716,7 @@\n-\/*static*\/ inline bool PosLookup::apply_recurse_func (hb_ot_apply_context_t *c, unsigned int lookup_index)\n+\/*static*\/ inline hb_closure_lookups_context_t::return_t PosLookup::dispatch_closure_lookups_recurse_func (hb_closure_lookups_context_t *c, unsigned this_index)\n+{\n+  const PosLookup &l = c->face->table.GPOS.get_relaxed ()->table->get_lookup (this_index);\n+  return l.closure_lookups (c, this_index);\n+}\n+\n+\/*static*\/ bool PosLookup::apply_recurse_func (hb_ot_apply_context_t *c, unsigned int lookup_index)\n@@ -1754,0 +2734,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-gpos-table.hh","additions":1130,"deletions":149,"binary":false,"changes":1279,"status":"modified"},{"patch":"@@ -37,0 +37,5 @@\n+typedef hb_pair_t<hb_codepoint_t, hb_codepoint_t> hb_codepoint_pair_t;\n+\n+template<typename Iterator>\n+static void SingleSubst_serialize (hb_serialize_context_t *c,\n+                                   Iterator it);\n@@ -38,3 +43,0 @@\n-static inline void SingleSubst_serialize (hb_serialize_context_t *c,\n-                                          hb_array_t<const GlyphID> glyphs,\n-                                          hb_array_t<const GlyphID> substitutes);\n@@ -49,8 +51,6 @@\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      \/* TODO Switch to range-based API to work around malicious fonts.\n-       * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      hb_codepoint_t glyph_id = iter.get_glyph ();\n-      if (c->glyphs->has (glyph_id))\n-        c->out->add ((glyph_id + deltaGlyphID) & 0xFFFFu);\n-    }\n+    unsigned d = deltaGlyphID;\n+    + hb_iter (this+coverage)\n+    | hb_filter (*c->glyphs)\n+    | hb_map ([d] (hb_codepoint_t g) { return (g + d) & 0xFFFFu; })\n+    | hb_sink (c->output)\n+    ;\n@@ -59,0 +59,2 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n@@ -61,8 +63,6 @@\n-    if (unlikely (!(this+coverage).add_coverage (c->input))) return;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      \/* TODO Switch to range-based API to work around malicious fonts.\n-       * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      hb_codepoint_t glyph_id = iter.get_glyph ();\n-      c->output->add ((glyph_id + deltaGlyphID) & 0xFFFFu);\n-    }\n+    if (unlikely (!(this+coverage).collect_coverage (c->input))) return;\n+    unsigned d = deltaGlyphID;\n+    + hb_iter (this+coverage)\n+    | hb_map ([d] (hb_codepoint_t g) { return (g + d) & 0xFFFFu; })\n+    | hb_sink (c->output)\n+    ;\n@@ -74,4 +74,1 @@\n-  {\n-    TRACE_WOULD_APPLY (this);\n-    return_trace (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED);\n-  }\n+  { return c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED; }\n@@ -94,0 +91,2 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_sorted_source_of (Iterator, hb_codepoint_t))>\n@@ -95,2 +94,2 @@\n-                  hb_array_t<const GlyphID> glyphs,\n-                  int delta)\n+                  Iterator glyphs,\n+                  unsigned delta)\n@@ -101,1 +100,1 @@\n-    deltaGlyphID.set (delta); \/* TODO(serialize) overflow? *\/\n+    c->check_assign (deltaGlyphID, delta);\n@@ -108,1 +107,1 @@\n-    const hb_set_t &glyphset = *c->plan->glyphset;\n+    const hb_set_t &glyphset = *c->plan->glyphset_gsub ();\n@@ -110,2 +109,1 @@\n-    hb_vector_t<GlyphID> from;\n-    hb_vector_t<GlyphID> to;\n+\n@@ -113,9 +111,15 @@\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (!glyphset.has (iter.get_glyph ())) continue;\n-      from.push ()->set (glyph_map[iter.get_glyph ()]);\n-      to.push ()->set (glyph_map[(iter.get_glyph () + delta) & 0xFFFF]);\n-    }\n-    c->serializer->propagate_error (from, to);\n-    SingleSubst_serialize (c->serializer, from, to);\n-    return_trace (from.length);\n+\n+    auto it =\n+    + hb_iter (this+coverage)\n+    | hb_filter (glyphset)\n+    | hb_map_retains_sorting ([&] (hb_codepoint_t g) {\n+                                return hb_codepoint_pair_t (g,\n+                                                            (g + delta) & 0xFFFF); })\n+    | hb_filter (glyphset, hb_second)\n+    | hb_map_retains_sorting ([&] (hb_codepoint_pair_t p) -> hb_codepoint_pair_t\n+                              { return hb_pair (glyph_map[p.first], glyph_map[p.second]); })\n+    ;\n+\n+    bool ret = bool (it);\n+    SingleSubst_serialize (c->serializer, it);\n+    return_trace (ret);\n@@ -135,2 +139,2 @@\n-  HBINT16       deltaGlyphID;           \/* Add to original GlyphID to get\n-                                         * substitute GlyphID *\/\n+  HBUINT16      deltaGlyphID;           \/* Add to original GlyphID to get\n+                                         * substitute GlyphID, modulo 0x10000 *\/\n@@ -148,8 +152,5 @@\n-    unsigned int count = substitute.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (c->glyphs->has (iter.get_glyph ()))\n-        c->out->add (substitute[iter.get_coverage ()]);\n-    }\n+    + hb_zip (this+coverage, substitute)\n+    | hb_filter (*c->glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_sink (c->output)\n+    ;\n@@ -158,0 +159,2 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n@@ -160,8 +163,5 @@\n-    if (unlikely (!(this+coverage).add_coverage (c->input))) return;\n-    unsigned int count = substitute.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      c->output->add (substitute[iter.get_coverage ()]);\n-    }\n+    if (unlikely (!(this+coverage).collect_coverage (c->input))) return;\n+    + hb_zip (this+coverage, substitute)\n+    | hb_map (hb_second)\n+    | hb_sink (c->output)\n+    ;\n@@ -173,4 +173,1 @@\n-  {\n-    TRACE_WOULD_APPLY (this);\n-    return_trace (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED);\n-  }\n+  { return c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED; }\n@@ -191,0 +188,3 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_sorted_source_of (Iterator,\n+                                                hb_codepoint_pair_t))>\n@@ -192,2 +192,1 @@\n-                  hb_array_t<const GlyphID> glyphs,\n-                  hb_array_t<const GlyphID> substitutes)\n+                  Iterator it)\n@@ -196,0 +195,8 @@\n+    auto substitutes =\n+      + it\n+      | hb_map (hb_second)\n+      ;\n+    auto glyphs =\n+      + it\n+      | hb_map_retains_sorting (hb_first)\n+      ;\n@@ -205,1 +212,1 @@\n-    const hb_set_t &glyphset = *c->plan->glyphset;\n+    const hb_set_t &glyphset = *c->plan->glyphset_gsub ();\n@@ -207,11 +214,12 @@\n-    hb_vector_t<GlyphID> from;\n-    hb_vector_t<GlyphID> to;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (!glyphset.has (iter.get_glyph ())) continue;\n-      from.push ()->set (glyph_map[iter.get_glyph ()]);\n-      to.push ()->set (glyph_map[substitute[iter.get_coverage ()]]);\n-    }\n-    c->serializer->propagate_error (from, to);\n-    SingleSubst_serialize (c->serializer, from, to);\n-    return_trace (from.length);\n+\n+    auto it =\n+    + hb_zip (this+coverage, substitute)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter (glyphset, hb_second)\n+    | hb_map_retains_sorting ([&] (hb_pair_t<hb_codepoint_t, const HBGlyphID &> p) -> hb_codepoint_pair_t\n+                              { return hb_pair (glyph_map[p.first], glyph_map[p.second]); })\n+    ;\n+\n+    bool ret = bool (it);\n+    SingleSubst_serialize (c->serializer, it);\n+    return_trace (ret);\n@@ -231,1 +239,1 @@\n-  ArrayOf<GlyphID>\n+  ArrayOf<HBGlyphID>\n@@ -240,0 +248,4 @@\n+\n+  template<typename Iterator,\n+           hb_requires (hb_is_sorted_source_of (Iterator,\n+                                                const hb_codepoint_pair_t))>\n@@ -241,2 +253,1 @@\n-                  hb_array_t<const GlyphID> glyphs,\n-                  hb_array_t<const GlyphID> substitutes)\n+                  Iterator glyphs)\n@@ -246,3 +257,3 @@\n-    unsigned int format = 2;\n-    int delta = 0;\n-    if (glyphs.length)\n+    unsigned format = 2;\n+    unsigned delta = 0;\n+    if (glyphs)\n@@ -251,7 +262,4 @@\n-      \/* TODO(serialize) check for wrap-around *\/\n-      delta = substitutes[0] - glyphs[0];\n-      for (unsigned int i = 1; i < glyphs.length; i++)\n-        if (delta != (int) (substitutes[i] - glyphs[i])) {\n-          format = 2;\n-          break;\n-        }\n+      auto get_delta = [=] (hb_codepoint_pair_t _)\n+                       { return (unsigned) (_.second - _.first) & 0xFFFF; };\n+      delta = get_delta (*glyphs);\n+      if (!hb_all (++(+glyphs), delta, get_delta)) format = 2;\n@@ -259,1 +267,1 @@\n-    u.format.set (format);\n+    u.format = format;\n@@ -261,2 +269,5 @@\n-    case 1: return_trace (u.format1.serialize (c, glyphs, delta));\n-    case 2: return_trace (u.format2.serialize (c, glyphs, substitutes));\n+    case 1: return_trace (u.format1.serialize (c,\n+                                               + glyphs\n+                                               | hb_map_retains_sorting (hb_first),\n+                                               delta));\n+    case 2: return_trace (u.format2.serialize (c, glyphs));\n@@ -267,2 +278,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -273,2 +284,2 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n-    case 2: return_trace (c->dispatch (u.format2));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n+    case 2: return_trace (c->dispatch (u.format2, hb_forward<Ts> (ds)...));\n@@ -287,1 +298,2 @@\n-static inline void\n+template<typename Iterator>\n+static void\n@@ -289,3 +301,2 @@\n-                       hb_array_t<const GlyphID> glyphs,\n-                       hb_array_t<const GlyphID> substitutes)\n-{ c->start_embed<SingleSubst> ()->serialize (c, glyphs, substitutes); }\n+                       Iterator it)\n+{ c->start_embed<SingleSubst> ()->serialize (c, it); }\n@@ -295,0 +306,3 @@\n+  bool intersects (const hb_set_t *glyphs) const\n+  { return hb_all (substitute, glyphs); }\n+\n@@ -296,5 +310,1 @@\n-  {\n-    unsigned int count = substitute.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      c->out->add (substitute[i]);\n-  }\n+  { c->output->add_array (substitute.arrayZ, substitute.len); }\n@@ -337,0 +347,2 @@\n+  template <typename Iterator,\n+            hb_requires (hb_is_source_of (Iterator, hb_codepoint_t))>\n@@ -338,1 +350,1 @@\n-                  hb_array_t<const GlyphID> glyphs)\n+                  Iterator subst)\n@@ -341,1 +353,18 @@\n-    return_trace (substitute.serialize (c, glyphs));\n+    return_trace (substitute.serialize (c, subst));\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    if (!intersects (&glyphset)) return_trace (false);\n+\n+    auto it =\n+    + hb_iter (substitute)\n+    | hb_map (glyph_map)\n+    ;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    return_trace (out->serialize (c->serializer, it));\n@@ -351,1 +380,1 @@\n-  ArrayOf<GlyphID>\n+  ArrayOf<HBGlyphID>\n@@ -364,8 +393,6 @@\n-    unsigned int count = sequence.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (c->glyphs->has (iter.get_glyph ()))\n-        (this+sequence[iter.get_coverage ()]).closure (c);\n-    }\n+    + hb_zip (this+coverage, sequence)\n+    | hb_filter (*c->glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const Sequence &_) { _.closure (c); })\n+    ;\n@@ -374,0 +401,2 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n@@ -376,4 +405,6 @@\n-    if (unlikely (!(this+coverage).add_coverage (c->input))) return;\n-    unsigned int count = sequence.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      (this+sequence[i]).collect_glyphs (c);\n+    if (unlikely (!(this+coverage).collect_coverage (c->input))) return;\n+    + hb_zip (this+coverage, sequence)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const Sequence &_) { _.collect_glyphs (c); })\n+    ;\n@@ -385,4 +416,1 @@\n-  {\n-    TRACE_WOULD_APPLY (this);\n-    return_trace (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED);\n-  }\n+  { return c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED; }\n@@ -401,1 +429,1 @@\n-                  hb_array_t<const GlyphID> glyphs,\n+                  hb_sorted_array_t<const HBGlyphID> glyphs,\n@@ -403,1 +431,1 @@\n-                  hb_array_t<const GlyphID> substitute_glyphs_list)\n+                  hb_array_t<const HBGlyphID> substitute_glyphs_list)\n@@ -422,2 +450,18 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + hb_zip (this+coverage, sequence)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter (subset_offset_array (c, out->sequence, this), hb_second)\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+    out->coverage.serialize (c->serializer, out)\n+                 .serialize (c->serializer, new_coverage.iter ());\n+    return_trace (bool (new_coverage));\n@@ -447,1 +491,1 @@\n-                  hb_array_t<const GlyphID> glyphs,\n+                  hb_sorted_array_t<const HBGlyphID> glyphs,\n@@ -449,1 +493,1 @@\n-                  hb_array_t<const GlyphID> substitute_glyphs_list)\n+                  hb_array_t<const HBGlyphID> substitute_glyphs_list)\n@@ -454,1 +498,1 @@\n-    u.format.set (format);\n+    u.format = format;\n@@ -461,2 +505,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -467,1 +511,1 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n@@ -481,0 +525,3 @@\n+  bool intersects (const hb_set_t *glyphs) const\n+  { return hb_any (alternates, glyphs); }\n+\n@@ -482,5 +529,1 @@\n-  {\n-    unsigned int count = alternates.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      c->out->add (alternates[i]);\n-  }\n+  { c->output->add_array (alternates.arrayZ, alternates.len); }\n@@ -505,1 +548,1 @@\n-    \/* If alt_index is MAX, randomize feature if it is the rand feature. *\/\n+    \/* If alt_index is MAX_VALUE, randomize feature if it is the rand feature. *\/\n@@ -516,0 +559,16 @@\n+  unsigned\n+  get_alternates (unsigned        start_offset,\n+                  unsigned       *alternate_count  \/* IN\/OUT.  May be NULL. *\/,\n+                  hb_codepoint_t *alternate_glyphs \/* OUT.     May be NULL. *\/) const\n+  {\n+    if (alternates.len && alternate_count)\n+    {\n+      + alternates.sub_array (start_offset, alternate_count)\n+      | hb_sink (hb_array (alternate_glyphs, *alternate_count))\n+      ;\n+    }\n+    return alternates.len;\n+  }\n+\n+  template <typename Iterator,\n+            hb_requires (hb_is_source_of (Iterator, hb_codepoint_t))>\n@@ -517,1 +576,1 @@\n-                  hb_array_t<const GlyphID> glyphs)\n+                  Iterator alts)\n@@ -520,1 +579,18 @@\n-    return_trace (alternates.serialize (c, glyphs));\n+    return_trace (alternates.serialize (c, alts));\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto it =\n+      + hb_iter (alternates)\n+      | hb_filter (glyphset)\n+      | hb_map (glyph_map)\n+      ;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    return_trace (out->serialize (c->serializer, it) &&\n+                  out->alternates);\n@@ -530,1 +606,1 @@\n-  ArrayOf<GlyphID>\n+  ArrayOf<HBGlyphID>\n@@ -544,8 +620,6 @@\n-    unsigned int count = alternateSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (c->glyphs->has (iter.get_glyph ()))\n-        (this+alternateSet[iter.get_coverage ()]).closure (c);\n-    }\n+    + hb_zip (this+coverage, alternateSet)\n+    | hb_filter (c->glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const AlternateSet &_) { _.closure (c); })\n+    ;\n@@ -554,0 +628,2 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n@@ -556,8 +632,6 @@\n-    if (unlikely (!(this+coverage).add_coverage (c->input))) return;\n-    unsigned int count = alternateSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      (this+alternateSet[iter.get_coverage ()]).collect_glyphs (c);\n-    }\n+    if (unlikely (!(this+coverage).collect_coverage (c->input))) return;\n+    + hb_zip (this+coverage, alternateSet)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const AlternateSet &_) { _.collect_glyphs (c); })\n+    ;\n@@ -569,4 +643,9 @@\n-  {\n-    TRACE_WOULD_APPLY (this);\n-    return_trace (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED);\n-  }\n+  { return c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED; }\n+\n+  unsigned\n+  get_glyph_alternates (hb_codepoint_t  gid,\n+                        unsigned        start_offset,\n+                        unsigned       *alternate_count  \/* IN\/OUT.  May be NULL. *\/,\n+                        hb_codepoint_t *alternate_glyphs \/* OUT.     May be NULL. *\/) const\n+  { return (this+alternateSet[(this+coverage).get_coverage (gid)])\n+           .get_alternates (start_offset, alternate_count, alternate_glyphs); }\n@@ -585,1 +664,1 @@\n-                  hb_array_t<const GlyphID> glyphs,\n+                  hb_sorted_array_t<const HBGlyphID> glyphs,\n@@ -587,1 +666,1 @@\n-                  hb_array_t<const GlyphID> alternate_glyphs_list)\n+                  hb_array_t<const HBGlyphID> alternate_glyphs_list)\n@@ -606,2 +685,18 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + hb_zip (this+coverage, alternateSet)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter (subset_offset_array (c, out->alternateSet, this), hb_second)\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+    out->coverage.serialize (c->serializer, out)\n+                 .serialize (c->serializer, new_coverage.iter ());\n+    return_trace (bool (new_coverage));\n@@ -631,1 +726,1 @@\n-                  hb_array_t<const GlyphID> glyphs,\n+                  hb_sorted_array_t<const HBGlyphID> glyphs,\n@@ -633,1 +728,1 @@\n-                  hb_array_t<const GlyphID> alternate_glyphs_list)\n+                  hb_array_t<const HBGlyphID> alternate_glyphs_list)\n@@ -638,1 +733,1 @@\n-    u.format.set (format);\n+    u.format = format;\n@@ -645,2 +740,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -651,1 +746,1 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n@@ -667,7 +762,1 @@\n-  {\n-    unsigned int count = component.lenP1;\n-    for (unsigned int i = 1; i < count; i++)\n-      if (!glyphs->has (component[i]))\n-        return false;\n-    return true;\n-  }\n+  { return hb_all (component, glyphs); }\n@@ -677,5 +766,2 @@\n-    unsigned int count = component.lenP1;\n-    for (unsigned int i = 1; i < count; i++)\n-      if (!c->glyphs->has (component[i]))\n-        return;\n-    c->out->add (ligGlyph);\n+    if (!intersects (c->glyphs)) return;\n+    c->output->add (ligGlyph);\n@@ -686,1 +772,1 @@\n-    c->input->add_array (component.arrayZ, component.lenP1 ? component.lenP1 - 1 : 0);\n+    c->input->add_array (component.arrayZ, component.get_length ());\n@@ -692,1 +778,0 @@\n-    TRACE_WOULD_APPLY (this);\n@@ -694,1 +779,1 @@\n-      return_trace (false);\n+      return false;\n@@ -698,1 +783,1 @@\n-        return_trace (false);\n+        return false;\n@@ -700,1 +785,1 @@\n-    return_trace (true);\n+    return true;\n@@ -742,0 +827,2 @@\n+  template <typename Iterator,\n+            hb_requires (hb_is_source_of (Iterator, hb_codepoint_t))>\n@@ -743,2 +830,2 @@\n-                  GlyphID ligature,\n-                  hb_array_t<const GlyphID> components \/* Starting from second *\/)\n+                  hb_codepoint_t ligature,\n+                  Iterator components \/* Starting from second *\/)\n@@ -753,0 +840,19 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    if (!intersects (&glyphset) || !glyphset.has (ligGlyph)) return_trace (false);\n+\n+    auto it =\n+      + hb_iter (component)\n+      | hb_map (glyph_map)\n+      ;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    return_trace (out->serialize (c->serializer,\n+                                  glyph_map[ligGlyph],\n+                                  it));\n+  }\n+\n@@ -761,2 +867,2 @@\n-  GlyphID       ligGlyph;               \/* GlyphID of ligature to substitute *\/\n-  HeadlessArrayOf<GlyphID>\n+  HBGlyphID     ligGlyph;               \/* GlyphID of ligature to substitute *\/\n+  HeadlessArrayOf<HBGlyphID>\n@@ -774,5 +880,6 @@\n-    unsigned int num_ligs = ligature.len;\n-    for (unsigned int i = 0; i < num_ligs; i++)\n-      if ((this+ligature[i]).intersects (glyphs))\n-        return true;\n-    return false;\n+    return\n+    + hb_iter (ligature)\n+    | hb_map (hb_add (this))\n+    | hb_map ([glyphs] (const Ligature &_) { return _.intersects (glyphs); })\n+    | hb_any\n+    ;\n@@ -783,3 +890,4 @@\n-    unsigned int num_ligs = ligature.len;\n-    for (unsigned int i = 0; i < num_ligs; i++)\n-      (this+ligature[i]).closure (c);\n+    + hb_iter (ligature)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const Ligature &_) { _.closure (c); })\n+    ;\n@@ -790,3 +898,4 @@\n-    unsigned int num_ligs = ligature.len;\n-    for (unsigned int i = 0; i < num_ligs; i++)\n-      (this+ligature[i]).collect_glyphs (c);\n+    + hb_iter (ligature)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const Ligature &_) { _.collect_glyphs (c); })\n+    ;\n@@ -797,9 +906,6 @@\n-    TRACE_WOULD_APPLY (this);\n-    unsigned int num_ligs = ligature.len;\n-    for (unsigned int i = 0; i < num_ligs; i++)\n-    {\n-      const Ligature &lig = this+ligature[i];\n-      if (lig.would_apply (c))\n-        return_trace (true);\n-    }\n-    return_trace (false);\n+    return\n+    + hb_iter (ligature)\n+    | hb_map (hb_add (this))\n+    | hb_map ([c] (const Ligature &_) { return _.would_apply (c); })\n+    | hb_any\n+    ;\n@@ -822,1 +928,1 @@\n-                  hb_array_t<const GlyphID> ligatures,\n+                  hb_array_t<const HBGlyphID> ligatures,\n@@ -824,1 +930,1 @@\n-                  hb_array_t<const GlyphID> &component_list \/* Starting from second for each ligature *\/)\n+                  hb_array_t<const HBGlyphID> &component_list \/* Starting from second for each ligature *\/)\n@@ -831,1 +937,1 @@\n-      unsigned int component_count = MAX<int> (component_count_list[i] - 1, 0);\n+      unsigned int component_count = (unsigned) hb_max ((int) component_count_list[i] - 1, 0);\n@@ -842,0 +948,13 @@\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    + hb_iter (ligature)\n+    | hb_filter (subset_offset_array (c, out->ligature, this))\n+    | hb_drain\n+    ;\n+    return_trace (bool (out->ligature));\n+  }\n+\n@@ -860,10 +979,8 @@\n-    unsigned int count = ligatureSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (glyphs->has (iter.get_glyph ()) &&\n-          (this+ligatureSet[iter.get_coverage ()]).intersects (glyphs))\n-        return true;\n-    }\n-    return false;\n+    return\n+    + hb_zip (this+coverage, ligatureSet)\n+    | hb_filter (*glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map ([this, glyphs] (const OffsetTo<LigatureSet> &_)\n+              { return (this+_).intersects (glyphs); })\n+    | hb_any\n+    ;\n@@ -874,8 +991,6 @@\n-    unsigned int count = ligatureSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (c->glyphs->has (iter.get_glyph ()))\n-        (this+ligatureSet[iter.get_coverage ()]).closure (c);\n-    }\n+    + hb_zip (this+coverage, ligatureSet)\n+    | hb_filter (*c->glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const LigatureSet &_) { _.closure (c); })\n+    ;\n@@ -884,0 +999,2 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n@@ -886,8 +1003,7 @@\n-    if (unlikely (!(this+coverage).add_coverage (c->input))) return;\n-    unsigned int count = ligatureSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      (this+ligatureSet[iter.get_coverage ()]).collect_glyphs (c);\n-    }\n+    if (unlikely (!(this+coverage).collect_coverage (c->input))) return;\n+\n+    + hb_zip (this+coverage, ligatureSet)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([c] (const LigatureSet &_) { _.collect_glyphs (c); })\n+    ;\n@@ -900,1 +1016,0 @@\n-    TRACE_WOULD_APPLY (this);\n@@ -902,1 +1017,1 @@\n-    if (likely (index == NOT_COVERED)) return_trace (false);\n+    if (likely (index == NOT_COVERED)) return false;\n@@ -905,1 +1020,1 @@\n-    return_trace (lig_set.would_apply (c));\n+    return lig_set.would_apply (c);\n@@ -912,1 +1027,1 @@\n-    unsigned int index = (this+coverage).get_coverage (c->buffer->cur().codepoint);\n+    unsigned int index = (this+coverage).get_coverage (c->buffer->cur ().codepoint);\n@@ -920,1 +1035,1 @@\n-                  hb_array_t<const GlyphID> first_glyphs,\n+                  hb_sorted_array_t<const HBGlyphID> first_glyphs,\n@@ -922,1 +1037,1 @@\n-                  hb_array_t<const GlyphID> ligatures_list,\n+                  hb_array_t<const HBGlyphID> ligatures_list,\n@@ -924,1 +1039,1 @@\n-                  hb_array_t<const GlyphID> component_list \/* Starting from second for each ligature *\/)\n+                  hb_array_t<const HBGlyphID> component_list \/* Starting from second for each ligature *\/)\n@@ -946,2 +1061,18 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + hb_zip (this+coverage, ligatureSet)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter (subset_offset_array (c, out->ligatureSet, this), hb_second)\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+    out->coverage.serialize (c->serializer, out)\n+                 .serialize (c->serializer, new_coverage.iter ());\n+    return_trace (bool (new_coverage));\n@@ -971,1 +1102,1 @@\n-                  hb_array_t<const GlyphID> first_glyphs,\n+                  hb_sorted_array_t<const HBGlyphID> first_glyphs,\n@@ -973,1 +1104,1 @@\n-                  hb_array_t<const GlyphID> ligatures_list,\n+                  hb_array_t<const HBGlyphID> ligatures_list,\n@@ -975,1 +1106,1 @@\n-                  hb_array_t<const GlyphID> component_list \/* Starting from second for each ligature *\/)\n+                  hb_array_t<const HBGlyphID> component_list \/* Starting from second for each ligature *\/)\n@@ -980,1 +1111,1 @@\n-    u.format.set (format);\n+    u.format = format;\n@@ -992,2 +1123,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -998,1 +1129,1 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n@@ -1018,1 +1149,0 @@\n-\n@@ -1030,1 +1160,1 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -1049,1 +1179,1 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    if (!intersects (c->glyphs)) return;\n@@ -1051,11 +1181,2 @@\n-    unsigned int count;\n-\n-    count = backtrack.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (!(this+backtrack[i]).intersects (c->glyphs))\n-        return;\n-\n-    count = lookahead.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (!(this+lookahead[i]).intersects (c->glyphs))\n-        return;\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n+    const ArrayOf<HBGlyphID> &substitute = StructAfter<ArrayOf<HBGlyphID>> (lookahead);\n@@ -1063,9 +1184,5 @@\n-    const ArrayOf<GlyphID> &substitute = StructAfter<ArrayOf<GlyphID> > (lookahead);\n-    count = substitute.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (c->glyphs->has (iter.get_glyph ()))\n-        c->out->add (substitute[iter.get_coverage ()]);\n-    }\n+    + hb_zip (this+coverage, substitute)\n+    | hb_filter (*c->glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_sink (c->output)\n+    ;\n@@ -1074,0 +1191,2 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const {}\n+\n@@ -1076,1 +1195,1 @@\n-    if (unlikely (!(this+coverage).add_coverage (c->input))) return;\n+    if (unlikely (!(this+coverage).collect_coverage (c->input))) return;\n@@ -1082,1 +1201,1 @@\n-      if (unlikely (!(this+backtrack[i]).add_coverage (c->before))) return;\n+      if (unlikely (!(this+backtrack[i]).collect_coverage (c->before))) return;\n@@ -1084,1 +1203,1 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -1087,1 +1206,1 @@\n-      if (unlikely (!(this+lookahead[i]).add_coverage (c->after))) return;\n+      if (unlikely (!(this+lookahead[i]).collect_coverage (c->after))) return;\n@@ -1089,1 +1208,1 @@\n-    const ArrayOf<GlyphID> &substitute = StructAfter<ArrayOf<GlyphID> > (lookahead);\n+    const ArrayOf<HBGlyphID> &substitute = StructAfter<ArrayOf<HBGlyphID>> (lookahead);\n@@ -1097,4 +1216,1 @@\n-  {\n-    TRACE_WOULD_APPLY (this);\n-    return_trace (c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED);\n-  }\n+  { return c->len == 1 && (this+coverage).get_coverage (c->glyphs[0]) != NOT_COVERED; }\n@@ -1108,1 +1224,1 @@\n-    unsigned int index = (this+coverage).get_coverage (c->buffer->cur().codepoint);\n+    unsigned int index = (this+coverage).get_coverage (c->buffer->cur ().codepoint);\n@@ -1111,2 +1227,4 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n-    const ArrayOf<GlyphID> &substitute = StructAfter<ArrayOf<GlyphID> > (lookahead);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n+    const ArrayOf<HBGlyphID> &substitute = StructAfter<ArrayOf<HBGlyphID>> (lookahead);\n+\n+    if (unlikely (index >= substitute.len)) return_trace (false);\n@@ -1114,1 +1232,1 @@\n-  unsigned int start_index = 0, end_index = 0;\n+    unsigned int start_index = 0, end_index = 0;\n@@ -1147,1 +1265,1 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -1150,1 +1268,1 @@\n-    const ArrayOf<GlyphID> &substitute = StructAfter<ArrayOf<GlyphID> > (lookahead);\n+    const ArrayOf<HBGlyphID> &substitute = StructAfter<ArrayOf<HBGlyphID>> (lookahead);\n@@ -1167,1 +1285,1 @@\n-  ArrayOf<GlyphID>\n+  ArrayOf<HBGlyphID>\n@@ -1176,2 +1294,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -1182,1 +1300,1 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n@@ -1216,2 +1334,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c, unsigned int lookup_type) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, unsigned int lookup_type, Ts&&... ds) const\n@@ -1221,8 +1339,8 @@\n-    case Single:                return_trace (u.single.dispatch (c));\n-    case Multiple:              return_trace (u.multiple.dispatch (c));\n-    case Alternate:             return_trace (u.alternate.dispatch (c));\n-    case Ligature:              return_trace (u.ligature.dispatch (c));\n-    case Context:               return_trace (u.context.dispatch (c));\n-    case ChainContext:          return_trace (u.chainContext.dispatch (c));\n-    case Extension:             return_trace (u.extension.dispatch (c));\n-    case ReverseChainSingle:    return_trace (u.reverseChainContextSingle.dispatch (c));\n+    case Single:                return_trace (u.single.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Multiple:              return_trace (u.multiple.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Alternate:             return_trace (u.alternate.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Ligature:              return_trace (u.ligature.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Context:               return_trace (u.context.dispatch (c, hb_forward<Ts> (ds)...));\n+    case ChainContext:          return_trace (u.chainContext.dispatch (c, hb_forward<Ts> (ds)...));\n+    case Extension:             return_trace (u.extension.dispatch (c, hb_forward<Ts> (ds)...));\n+    case ReverseChainSingle:    return_trace (u.reverseChainContextSingle.dispatch (c, hb_forward<Ts> (ds)...));\n@@ -1233,0 +1351,6 @@\n+  bool intersects (const hb_set_t *glyphs, unsigned int lookup_type) const\n+  {\n+    hb_intersects_context_t c (glyphs);\n+    return dispatch (&c, lookup_type);\n+  }\n+\n@@ -1256,1 +1380,1 @@\n-  static bool lookup_type_is_reverse (unsigned int lookup_type)\n+  static inline bool lookup_type_is_reverse (unsigned int lookup_type)\n@@ -1263,1 +1387,1 @@\n-      return CastR<ExtensionSubst> (get_subtable(0)).is_reverse ();\n+      return reinterpret_cast<const ExtensionSubst &> (get_subtable (0)).is_reverse ();\n@@ -1293,0 +1417,18 @@\n+  hb_closure_lookups_context_t::return_t closure_lookups (hb_closure_lookups_context_t *c, unsigned this_index) const\n+  {\n+    if (c->is_lookup_visited (this_index))\n+      return hb_closure_lookups_context_t::default_return_value ();\n+\n+    c->set_lookup_visited (this_index);\n+    if (!intersects (c->glyphs))\n+    {\n+      c->set_lookup_inactive (this_index);\n+      return hb_closure_lookups_context_t::default_return_value ();\n+    }\n+\n+    c->set_recurse_func (dispatch_closure_lookups_recurse_func);\n+\n+    hb_closure_lookups_context_t::return_t ret = dispatch (c);\n+    return ret;\n+  }\n+\n@@ -1300,1 +1442,1 @@\n-  void add_coverage (set_t *glyphs) const\n+  void collect_coverage (set_t *glyphs) const\n@@ -1302,1 +1444,1 @@\n-    hb_add_coverage_context_t<set_t> c (glyphs);\n+    hb_collect_coverage_context_t<set_t> c (glyphs);\n@@ -1309,4 +1451,3 @@\n-    TRACE_WOULD_APPLY (this);\n-    if (unlikely (!c->len))  return_trace (false);\n-    if (!accel->may_have (c->glyphs[0]))  return_trace (false);\n-      return_trace (dispatch (c));\n+    if (unlikely (!c->len)) return false;\n+    if (!accel->may_have (c->glyphs[0])) return false;\n+      return dispatch (c);\n@@ -1315,1 +1456,1 @@\n-  static bool apply_recurse_func (hb_ot_apply_context_t *c, unsigned int lookup_index);\n+  static inline bool apply_recurse_func (hb_ot_apply_context_t *c, unsigned int lookup_index);\n@@ -1318,1 +1459,1 @@\n-                                       unsigned int i)\n+                                unsigned int i)\n@@ -1323,2 +1464,2 @@\n-                         hb_array_t<const GlyphID> glyphs,\n-                         hb_array_t<const GlyphID> substitutes)\n+                         hb_sorted_array_t<const HBGlyphID> glyphs,\n+                         hb_array_t<const HBGlyphID> substitutes)\n@@ -1328,1 +1469,2 @@\n-    return_trace (serialize_subtable (c, 0).u.single.serialize (c, glyphs, substitutes));\n+    return_trace (serialize_subtable (c, 0).u.single.\n+                  serialize (c, hb_zip (glyphs, substitutes)));\n@@ -1333,1 +1475,1 @@\n-                           hb_array_t<const GlyphID> glyphs,\n+                           hb_sorted_array_t<const HBGlyphID> glyphs,\n@@ -1335,1 +1477,1 @@\n-                           hb_array_t<const GlyphID> substitute_glyphs_list)\n+                           hb_array_t<const HBGlyphID> substitute_glyphs_list)\n@@ -1339,4 +1481,5 @@\n-    return_trace (serialize_subtable (c, 0).u.multiple.serialize (c,\n-                                                                  glyphs,\n-                                                                  substitute_len_list,\n-                                                                  substitute_glyphs_list));\n+    return_trace (serialize_subtable (c, 0).u.multiple.\n+                  serialize (c,\n+                             glyphs,\n+                             substitute_len_list,\n+                             substitute_glyphs_list));\n@@ -1347,1 +1490,1 @@\n-                            hb_array_t<const GlyphID> glyphs,\n+                            hb_sorted_array_t<const HBGlyphID> glyphs,\n@@ -1349,1 +1492,1 @@\n-                            hb_array_t<const GlyphID> alternate_glyphs_list)\n+                            hb_array_t<const HBGlyphID> alternate_glyphs_list)\n@@ -1353,4 +1496,5 @@\n-    return_trace (serialize_subtable (c, 0).u.alternate.serialize (c,\n-                                                                   glyphs,\n-                                                                   alternate_len_list,\n-                                                                   alternate_glyphs_list));\n+    return_trace (serialize_subtable (c, 0).u.alternate.\n+                  serialize (c,\n+                             glyphs,\n+                             alternate_len_list,\n+                             alternate_glyphs_list));\n@@ -1361,1 +1505,1 @@\n-                           hb_array_t<const GlyphID> first_glyphs,\n+                           hb_sorted_array_t<const HBGlyphID> first_glyphs,\n@@ -1363,1 +1507,1 @@\n-                           hb_array_t<const GlyphID> ligatures_list,\n+                           hb_array_t<const HBGlyphID> ligatures_list,\n@@ -1365,1 +1509,1 @@\n-                           hb_array_t<const GlyphID> component_list \/* Starting from second for each ligature *\/)\n+                           hb_array_t<const HBGlyphID> component_list \/* Starting from second for each ligature *\/)\n@@ -1369,6 +1513,7 @@\n-    return_trace (serialize_subtable (c, 0).u.ligature.serialize (c,\n-                                                                  first_glyphs,\n-                                                                  ligature_per_first_glyph_count_list,\n-                                                                  ligatures_list,\n-                                                                  component_count_list,\n-                                                                  component_list));\n+    return_trace (serialize_subtable (c, 0).u.ligature.\n+                  serialize (c,\n+                             first_glyphs,\n+                             ligature_per_first_glyph_count_list,\n+                             ligatures_list,\n+                             component_count_list,\n+                             component_list));\n@@ -1378,1 +1523,1 @@\n-  static typename context_t::return_t dispatch_recurse_func (context_t *c, unsigned int lookup_index);\n+  static inline typename context_t::return_t dispatch_recurse_func (context_t *c, unsigned int lookup_index);\n@@ -1380,1 +1525,1 @@\n-  static hb_closure_context_t::return_t dispatch_closure_recurse_func (hb_closure_context_t *c, unsigned int lookup_index)\n+  static inline hb_closure_context_t::return_t dispatch_closure_recurse_func (hb_closure_context_t *c, unsigned int lookup_index)\n@@ -1383,1 +1528,1 @@\n-      return HB_VOID;\n+      return hb_empty_t ();\n@@ -1395,3 +1540,5 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n-  { return Lookup::dispatch<SubTable> (c); }\n+  HB_INTERNAL static hb_closure_lookups_context_t::return_t dispatch_closure_lookups_recurse_func (hb_closure_lookups_context_t *c, unsigned lookup_index);\n+\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n+  { return Lookup::dispatch<SubTable> (c, hb_forward<Ts> (ds)...); }\n@@ -1416,1 +1563,1 @@\n-  { return CastR<SubstLookup> (GSUBGPOS::get_lookup (i)); }\n+  { return static_cast<const SubstLookup &> (GSUBGPOS::get_lookup (i)); }\n@@ -1419,1 +1566,4 @@\n-  { return GSUBGPOS::subset<SubstLookup> (c); }\n+  {\n+    hb_subset_layout_context_t l (c, tableTag, c->plan->gsub_lookups, c->plan->gsub_features);\n+    return GSUBGPOS::subset<SubstLookup> (&l);\n+  }\n@@ -1424,1 +1574,1 @@\n-  HB_INTERNAL bool is_blacklisted (hb_blob_t *blob,\n+  HB_INTERNAL bool is_blocklisted (hb_blob_t *blob,\n@@ -1427,0 +1577,5 @@\n+  void closure_lookups (hb_face_t      *face,\n+                        const hb_set_t *glyphs,\n+                        hb_set_t       *lookup_indexes \/* IN\/OUT *\/) const\n+  { GSUBGPOS::closure_lookups<SubstLookup> (face, glyphs, lookup_indexes); }\n+\n@@ -1436,0 +1591,1 @@\n+#ifndef HB_NO_OT_LAYOUT\n@@ -1438,4 +1594,1 @@\n-  unsigned int type = get_type ();\n-  if (unlikely (type == SubTable::Extension))\n-    return CastR<ExtensionSubst> (get_subtable<SubTable>()).is_reverse ();\n-  return SubstLookup::lookup_type_is_reverse (type);\n+  return SubstLookup::lookup_type_is_reverse (get_type ());\n@@ -1443,1 +1596,0 @@\n-\n@@ -1445,1 +1597,1 @@\n-\/*static*\/ inline typename context_t::return_t SubstLookup::dispatch_recurse_func (context_t *c, unsigned int lookup_index)\n+\/*static*\/ typename context_t::return_t SubstLookup::dispatch_recurse_func (context_t *c, unsigned int lookup_index)\n@@ -1451,1 +1603,7 @@\n-\/*static*\/ inline bool SubstLookup::apply_recurse_func (hb_ot_apply_context_t *c, unsigned int lookup_index)\n+\/*static*\/ inline hb_closure_lookups_context_t::return_t SubstLookup::dispatch_closure_lookups_recurse_func (hb_closure_lookups_context_t *c, unsigned this_index)\n+{\n+  const SubstLookup &l = c->face->table.GSUB.get_relaxed ()->table->get_lookup (this_index);\n+  return l.closure_lookups (c, this_index);\n+}\n+\n+\/*static*\/ bool SubstLookup::apply_recurse_func (hb_ot_apply_context_t *c, unsigned int lookup_index)\n@@ -1463,0 +1621,2 @@\n+#endif\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-gsub-table.hh","additions":519,"deletions":359,"binary":false,"changes":878,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-       hb_dispatch_context_t<hb_intersects_context_t, bool, 0>\n+       hb_dispatch_context_t<hb_intersects_context_t, bool>\n@@ -47,1 +47,0 @@\n-  const char *get_name () { return \"INTERSECTS\"; }\n@@ -54,1 +53,0 @@\n-  unsigned int debug_depth;\n@@ -57,2 +55,1 @@\n-                             glyphs (glyphs_),\n-                             debug_depth (0) {}\n+                             glyphs (glyphs_) {}\n@@ -62,1 +59,1 @@\n-       hb_dispatch_context_t<hb_closure_context_t, hb_void_t, 0>\n+       hb_dispatch_context_t<hb_closure_context_t>\n@@ -64,1 +61,0 @@\n-  const char *get_name () { return \"CLOSURE\"; }\n@@ -67,2 +63,2 @@\n-  return_t dispatch (const T &obj) { obj.closure (this); return HB_VOID; }\n-  static return_t default_return_value () { return HB_VOID; }\n+  return_t dispatch (const T &obj) { obj.closure (this); return hb_empty_t (); }\n+  static return_t default_return_value () { return hb_empty_t (); }\n@@ -79,0 +75,3 @@\n+  bool lookup_limit_exceeded ()\n+  { return lookup_count > HB_MAX_LOOKUP_INDICES; }\n+\n@@ -81,0 +80,3 @@\n+    if (lookup_count++ > HB_MAX_LOOKUP_INDICES)\n+      return false;\n+\n@@ -83,0 +85,1 @@\n+\n@@ -89,0 +92,3 @@\n+    if (done_lookups->in_error ())\n+      return true;\n+\n@@ -95,1 +101,1 @@\n-  hb_set_t out[1];\n+  hb_set_t output[1];\n@@ -98,1 +104,0 @@\n-  unsigned int debug_depth;\n@@ -108,2 +113,3 @@\n-                          debug_depth (0),\n-                          done_lookups (done_lookups_) {}\n+                          done_lookups (done_lookups_),\n+                          lookup_count (0)\n+  {}\n@@ -117,2 +123,3 @@\n-    hb_set_union (glyphs, out);\n-    hb_set_clear (out);\n+    hb_set_del_range (output, face->get_num_glyphs (), hb_set_get_max (output));        \/* Remove invalid glyphs. *\/\n+    hb_set_union (glyphs, output);\n+    hb_set_clear (output);\n@@ -123,0 +130,1 @@\n+  unsigned int lookup_count;\n@@ -125,0 +133,67 @@\n+struct hb_closure_lookups_context_t :\n+       hb_dispatch_context_t<hb_closure_lookups_context_t>\n+{\n+  typedef return_t (*recurse_func_t) (hb_closure_lookups_context_t *c, unsigned lookup_index);\n+  template <typename T>\n+  return_t dispatch (const T &obj) { obj.closure_lookups (this); return hb_empty_t (); }\n+  static return_t default_return_value () { return hb_empty_t (); }\n+  void recurse (unsigned lookup_index)\n+  {\n+    if (unlikely (nesting_level_left == 0 || !recurse_func))\n+      return;\n+\n+    \/* Return if new lookup was recursed to before. *\/\n+    if (is_lookup_visited (lookup_index))\n+      return;\n+\n+    set_lookup_visited (lookup_index);\n+    nesting_level_left--;\n+    recurse_func (this, lookup_index);\n+    nesting_level_left++;\n+  }\n+\n+  void set_lookup_visited (unsigned lookup_index)\n+  { visited_lookups->add (lookup_index); }\n+\n+  void set_lookup_inactive (unsigned lookup_index)\n+  { inactive_lookups->add (lookup_index); }\n+\n+  bool lookup_limit_exceeded ()\n+  { return lookup_count > HB_MAX_LOOKUP_INDICES; }\n+\n+  bool is_lookup_visited (unsigned lookup_index)\n+  {\n+    if (lookup_count++ > HB_MAX_LOOKUP_INDICES)\n+      return true;\n+\n+    if (visited_lookups->in_error ())\n+      return true;\n+\n+    return visited_lookups->has (lookup_index);\n+  }\n+\n+  hb_face_t *face;\n+  const hb_set_t *glyphs;\n+  recurse_func_t recurse_func;\n+  unsigned int nesting_level_left;\n+\n+  hb_closure_lookups_context_t (hb_face_t *face_,\n+                                const hb_set_t *glyphs_,\n+                                hb_set_t *visited_lookups_,\n+                                hb_set_t *inactive_lookups_,\n+                                unsigned nesting_level_left_ = HB_MAX_NESTING_LEVEL) :\n+                                face (face_),\n+                                glyphs (glyphs_),\n+                                recurse_func (nullptr),\n+                                nesting_level_left (nesting_level_left_),\n+                                visited_lookups (visited_lookups_),\n+                                inactive_lookups (inactive_lookups_),\n+                                lookup_count (0) {}\n+\n+  void set_recurse_func (recurse_func_t func) { recurse_func = func; }\n+\n+  private:\n+  hb_set_t *visited_lookups;\n+  hb_set_t *inactive_lookups;\n+  unsigned int lookup_count;\n+};\n@@ -127,1 +202,1 @@\n-       hb_dispatch_context_t<hb_would_apply_context_t, bool, HB_DEBUG_WOULD_APPLY>\n+       hb_dispatch_context_t<hb_would_apply_context_t, bool>\n@@ -129,1 +204,0 @@\n-  const char *get_name () { return \"WOULD_APPLY\"; }\n@@ -139,1 +213,0 @@\n-  unsigned int debug_depth;\n@@ -148,2 +221,1 @@\n-                              zero_context (zero_context_),\n-                              debug_depth (0) {}\n+                              zero_context (zero_context_) {}\n@@ -152,1 +224,0 @@\n-\n@@ -154,1 +225,1 @@\n-       hb_dispatch_context_t<hb_collect_glyphs_context_t, hb_void_t, 0>\n+       hb_dispatch_context_t<hb_collect_glyphs_context_t>\n@@ -156,1 +227,0 @@\n-  const char *get_name () { return \"COLLECT_GLYPHS\"; }\n@@ -159,2 +229,2 @@\n-  return_t dispatch (const T &obj) { obj.collect_glyphs (this); return HB_VOID; }\n-  static return_t default_return_value () { return HB_VOID; }\n+  return_t dispatch (const T &obj) { obj.collect_glyphs (this); return hb_empty_t (); }\n+  static return_t default_return_value () { return hb_empty_t (); }\n@@ -207,1 +277,0 @@\n-  unsigned int debug_depth;\n@@ -222,2 +291,1 @@\n-                              nesting_level_left (nesting_level_left_),\n-                              debug_depth (0) {}\n+                              nesting_level_left (nesting_level_left_) {}\n@@ -232,2 +300,2 @@\n-struct hb_add_coverage_context_t :\n-       hb_dispatch_context_t<hb_add_coverage_context_t<set_t>, const Coverage &, HB_DEBUG_GET_COVERAGE>\n+struct hb_collect_coverage_context_t :\n+       hb_dispatch_context_t<hb_collect_coverage_context_t<set_t>, const Coverage &>\n@@ -235,2 +303,1 @@\n-  const char *get_name () { return \"GET_COVERAGE\"; }\n-  typedef const Coverage &return_t;\n+  typedef const Coverage &return_t; \/\/ Stoopid that we have to dupe this here.\n@@ -239,1 +306,1 @@\n-  static return_t default_return_value () { return Null(Coverage); }\n+  static return_t default_return_value () { return Null (Coverage); }\n@@ -242,1 +309,1 @@\n-    r.add_coverage (set);\n+    r.collect_coverage (set);\n@@ -246,3 +313,2 @@\n-  hb_add_coverage_context_t (set_t *set_) :\n-                            set (set_),\n-                            debug_depth (0) {}\n+  hb_collect_coverage_context_t (set_t *set_) :\n+                                   set (set_) {}\n@@ -251,1 +317,0 @@\n-  unsigned int debug_depth;\n@@ -279,1 +344,1 @@\n-                                const void *match_data_)\n+                         const void *match_data_)\n@@ -289,1 +354,1 @@\n-                                  const HBUINT16        *glyph_data) const\n+                           const HBUINT16        *glyph_data) const\n@@ -358,1 +423,1 @@\n-                       unsigned int num_items_)\n+                unsigned int num_items_)\n@@ -366,1 +431,5 @@\n-    void reject () { num_items++; match_glyph_data--; }\n+    void reject ()\n+    {\n+      num_items++;\n+      if (match_glyph_data) match_glyph_data--;\n+    }\n@@ -390,1 +459,1 @@\n-          match_glyph_data++;\n+          if (match_glyph_data) match_glyph_data++;\n@@ -417,1 +486,1 @@\n-          match_glyph_data++;\n+          if (match_glyph_data) match_glyph_data++;\n@@ -470,1 +539,0 @@\n-  unsigned int debug_depth;\n@@ -481,2 +549,2 @@\n-                      hb_font_t *font_,\n-                      hb_buffer_t *buffer_) :\n+                         hb_font_t *font_,\n+                         hb_buffer_t *buffer_) :\n@@ -486,1 +554,7 @@\n-                        gdef (*face->table.GDEF->table),\n+                        gdef (\n+#ifndef HB_NO_OT_LAYOUT\n+                              *face->table.GDEF->table\n+#else\n+                              Null (GDEF)\n+#endif\n+                             ),\n@@ -494,1 +568,0 @@\n-                        debug_depth (0),\n@@ -598,1 +671,1 @@\n-                                           unsigned int class_guess) const\n+                                    unsigned int class_guess) const\n@@ -604,1 +677,1 @@\n-                                          unsigned int class_guess) const\n+                                   unsigned int class_guess) const\n@@ -613,1 +686,1 @@\n-       hb_dispatch_context_t<hb_get_subtables_context_t, hb_void_t, HB_DEBUG_APPLY>\n+       hb_dispatch_context_t<hb_get_subtables_context_t>\n@@ -616,1 +689,1 @@\n-  static bool apply_to (const void *obj, OT::hb_ot_apply_context_t *c)\n+  static inline bool apply_to (const void *obj, OT::hb_ot_apply_context_t *c)\n@@ -632,1 +705,1 @@\n-      obj_.get_coverage ().add_coverage (&digest);\n+      obj_.get_coverage ().collect_coverage (&digest);\n@@ -649,1 +722,0 @@\n-  const char *get_name () { return \"GET_SUBTABLES\"; }\n@@ -655,1 +727,1 @@\n-    return HB_VOID;\n+    return hb_empty_t ();\n@@ -657,1 +729,1 @@\n-  static return_t default_return_value () { return HB_VOID; }\n+  static return_t default_return_value () { return hb_empty_t (); }\n@@ -660,2 +732,1 @@\n-                              array (array_),\n-                              debug_depth (0) {}\n+                              array (array_) {}\n@@ -664,1 +735,0 @@\n-  unsigned int debug_depth;\n@@ -703,5 +773,5 @@\n-static inline bool intersects_array (const hb_set_t *glyphs,\n-                                     unsigned int count,\n-                                     const HBUINT16 values[],\n-                                     intersects_func_t intersects_func,\n-                                     const void *intersects_data)\n+static inline bool array_is_subset_of (const hb_set_t *glyphs,\n+                                       unsigned int count,\n+                                       const HBUINT16 values[],\n+                                       intersects_func_t intersects_func,\n+                                       const void *intersects_data)\n@@ -709,3 +779,2 @@\n-  for (unsigned int i = 0; i < count; i++)\n-    if (likely (!intersects_func (glyphs, values[i], intersects_data)))\n-      return false;\n+  for (const HBUINT16 &_ : + hb_iter (values, count))\n+    if (!intersects_func (glyphs, _, intersects_data)) return false;\n@@ -723,1 +792,1 @@\n-  class_def.add_class (glyphs, value);\n+  class_def.collect_class (glyphs, value);\n@@ -728,1 +797,1 @@\n-  (data+coverage).add_coverage (glyphs);\n+  (data+coverage).collect_coverage (glyphs);\n@@ -737,2 +806,4 @@\n-  for (unsigned int i = 0; i < count; i++)\n-    collect_func (glyphs, values[i], collect_data);\n+  return\n+  + hb_iter (values, count)\n+  | hb_apply ([&] (const HBUINT16 &_) { collect_func (glyphs, _, collect_data); })\n+  ;\n@@ -849,1 +920,1 @@\n-          const hb_glyph_info_t *out = buffer->out_info;\n+          const auto *out = buffer->out_info;\n@@ -973,1 +1044,1 @@\n-                                    MIN (this_comp, last_num_components);\n+                                    hb_min (this_comp, last_num_components);\n@@ -987,1 +1058,2 @@\n-  if (!is_mark_ligature && last_lig_id) {\n+  if (!is_mark_ligature && last_lig_id)\n+  {\n@@ -989,10 +1061,10 @@\n-    for (unsigned int i = buffer->idx; i < buffer->len; i++) {\n-      if (last_lig_id == _hb_glyph_info_get_lig_id (&buffer->info[i])) {\n-        unsigned int this_comp = _hb_glyph_info_get_lig_comp (&buffer->info[i]);\n-        if (!this_comp)\n-          break;\n-        unsigned int new_lig_comp = components_so_far - last_num_components +\n-                                    MIN (this_comp, last_num_components);\n-        _hb_glyph_info_set_lig_props_for_mark (&buffer->info[i], lig_id, new_lig_comp);\n-      } else\n-        break;\n+    for (unsigned i = buffer->idx; i < buffer->len; ++i)\n+    {\n+      if (last_lig_id != _hb_glyph_info_get_lig_id (&buffer->info[i])) break;\n+\n+      unsigned this_comp = _hb_glyph_info_get_lig_comp (&buffer->info[i]);\n+      if (!this_comp) break;\n+\n+      unsigned new_lig_comp = components_so_far - last_num_components +\n+                              hb_min (this_comp, last_num_components);\n+      _hb_glyph_info_set_lig_props_for_mark (&buffer->info[i], lig_id, new_lig_comp);\n@@ -1053,0 +1125,11 @@\n+  LookupRecord* copy (hb_serialize_context_t *c,\n+                      const hb_map_t         *lookup_map) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->embed (*this);\n+    if (unlikely (!out)) return_trace (nullptr);\n+\n+    out->lookupListIndex = hb_map_get (lookup_map, lookupListIndex);\n+    return_trace (out);\n+  }\n+\n@@ -1173,1 +1256,1 @@\n-      delta = MAX (delta, (int) next - (int) count);\n+      delta = hb_max (delta, (int) next - (int) count);\n@@ -1224,3 +1307,3 @@\n-  return intersects_array (glyphs,\n-                           inputCount ? inputCount - 1 : 0, input,\n-                           lookup_context.funcs.intersects, lookup_context.intersects_data);\n+  return array_is_subset_of (glyphs,\n+                             inputCount ? inputCount - 1 : 0, input,\n+                             lookup_context.funcs.intersects, lookup_context.intersects_data);\n@@ -1299,1 +1382,3 @@\n-    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord> >\n+    if (unlikely (c->lookup_limit_exceeded ())) return;\n+\n+    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord>>\n@@ -1307,0 +1392,9 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    if (unlikely (c->lookup_limit_exceeded ())) return;\n+\n+    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord>>\n+                                                       (inputZ.as_array (inputCount ? inputCount - 1 : 0));\n+    recurse_lookups (c, lookupCount, lookupRecord.arrayZ);\n+  }\n+\n@@ -1310,1 +1404,1 @@\n-    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord> >\n+    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord>>\n@@ -1321,2 +1415,1 @@\n-    TRACE_WOULD_APPLY (this);\n-    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord> >\n+    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord>>\n@@ -1324,1 +1417,4 @@\n-    return_trace (context_would_apply_lookup (c, inputCount, inputZ.arrayZ, lookupCount, lookupRecord.arrayZ, lookup_context));\n+    return context_would_apply_lookup (c,\n+                                       inputCount, inputZ.arrayZ,\n+                                       lookupCount, lookupRecord.arrayZ,\n+                                       lookup_context);\n@@ -1331,1 +1427,1 @@\n-    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord> >\n+    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord>>\n@@ -1336,0 +1432,41 @@\n+  bool serialize (hb_serialize_context_t *c,\n+                  const hb_map_t *input_mapping, \/* old->new glyphid or class mapping *\/\n+                  const hb_map_t *lookup_map) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->start_embed (this);\n+    if (unlikely (!c->extend_min (out))) return_trace (false);\n+\n+    out->inputCount = inputCount;\n+    out->lookupCount = lookupCount;\n+\n+    const hb_array_t<const HBUINT16> input = inputZ.as_array (inputCount - 1);\n+    for (const auto org : input)\n+    {\n+      HBUINT16 d;\n+      d = input_mapping->get (org);\n+      c->copy (d);\n+    }\n+\n+    const UnsizedArrayOf<LookupRecord> &lookupRecord = StructAfter<UnsizedArrayOf<LookupRecord>>\n+                                                       (inputZ.as_array ((inputCount ? inputCount - 1 : 0)));\n+    for (unsigned i = 0; i < (unsigned) lookupCount; i++)\n+      c->copy (lookupRecord[i], lookup_map);\n+\n+    return_trace (true);\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               const hb_map_t *lookup_map,\n+               const hb_map_t *klass_map = nullptr) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    const hb_array_t<const HBUINT16> input = inputZ.as_array ((inputCount ? inputCount - 1 : 0));\n+    if (!input.length) return_trace (false);\n+\n+    const hb_map_t *mapping = klass_map == nullptr ? c->plan->glyph_map : klass_map;\n+    if (!hb_all (input, mapping)) return_trace (false);\n+    return_trace (serialize (c->serializer, mapping, lookup_map));\n+  }\n+\n@@ -1367,5 +1504,6 @@\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-      if ((this+rule[i]).intersects (glyphs, lookup_context))\n-        return true;\n-    return false;\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_map ([&] (const Rule &_) { return _.intersects (glyphs, lookup_context); })\n+    | hb_any\n+    ;\n@@ -1377,3 +1515,18 @@\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-      (this+rule[i]).closure (c, lookup_context);\n+    if (unlikely (c->lookup_limit_exceeded ())) return;\n+\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const Rule &_) { _.closure (c, lookup_context); })\n+    ;\n+  }\n+\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    if (unlikely (c->lookup_limit_exceeded ())) return;\n+\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const Rule &_) { _.closure_lookups (c); })\n+    ;\n@@ -1385,3 +1538,5 @@\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-      (this+rule[i]).collect_glyphs (c, lookup_context);\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const Rule &_) { _.collect_glyphs (c, lookup_context); })\n+    ;\n@@ -1393,8 +1548,6 @@\n-    TRACE_WOULD_APPLY (this);\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-    {\n-      if ((this+rule[i]).would_apply (c, lookup_context))\n-        return_trace (true);\n-    }\n-    return_trace (false);\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_map ([&] (const Rule &_) { return _.would_apply (c, lookup_context); })\n+    | hb_any\n+    ;\n@@ -1407,2 +1560,20 @@\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n+    return_trace (\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_map ([&] (const Rule &_) { return _.apply (c, lookup_context); })\n+    | hb_any\n+    )\n+    ;\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               const hb_map_t *lookup_map,\n+               const hb_map_t *klass_map = nullptr) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    auto snap = c->serializer->snapshot ();\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    for (const OffsetTo<Rule>& _ : rule)\n@@ -1410,2 +1581,10 @@\n-      if ((this+rule[i]).apply (c, lookup_context))\n-        return_trace (true);\n+      if (!_) continue;\n+      auto *o = out->rule.serialize_append (c->serializer);\n+      if (unlikely (!o)) continue;\n+\n+      auto o_snap = c->serializer->snapshot ();\n+      if (!o->serialize_subset (c, _, this, lookup_map, klass_map))\n+      {\n+        out->rule.pop ();\n+        c->serializer->revert (o_snap);\n+      }\n@@ -1413,1 +1592,5 @@\n-    return_trace (false);\n+\n+    bool ret = bool (out->rule);\n+    if (!ret) c->serializer->revert (snap);\n+\n+    return_trace (ret);\n@@ -1440,10 +1623,8 @@\n-    unsigned int count = ruleSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (glyphs->has (iter.get_glyph ()) &&\n-          (this+ruleSet[iter.get_coverage ()]).intersects (glyphs, lookup_context))\n-        return true;\n-    }\n-    return false;\n+    return\n+    + hb_zip (this+coverage, ruleSet)\n+    | hb_filter (*glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_map ([&] (const RuleSet &_) { return _.intersects (glyphs, lookup_context); })\n+    | hb_any\n+    ;\n@@ -1459,8 +1640,14 @@\n-    unsigned int count = ruleSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (c->glyphs->has (iter.get_glyph ()))\n-        (this+ruleSet[iter.get_coverage ()]).closure (c, lookup_context);\n-    }\n+    + hb_zip (this+coverage, ruleSet)\n+    | hb_filter (*c->glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const RuleSet &_) { _.closure (c, lookup_context); })\n+    ;\n+  }\n+\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const RuleSet &_) { _.closure_lookups (c); })\n+    ;\n@@ -1469,0 +1656,2 @@\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const {}\n+\n@@ -1471,1 +1660,1 @@\n-    (this+coverage).add_coverage (c->input);\n+    (this+coverage).collect_coverage (c->input);\n@@ -1478,3 +1667,4 @@\n-    unsigned int count = ruleSet.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      (this+ruleSet[i]).collect_glyphs (c, lookup_context);\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const RuleSet &_) { _.collect_glyphs (c, lookup_context); })\n+    ;\n@@ -1485,2 +1675,0 @@\n-    TRACE_WOULD_APPLY (this);\n-\n@@ -1492,1 +1680,1 @@\n-    return_trace (rule_set.would_apply (c, lookup_context));\n+    return rule_set.would_apply (c, lookup_context);\n@@ -1515,2 +1703,20 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+\n+    const hb_map_t *lookup_map = c->table_tag == HB_OT_TAG_GSUB ? c->plan->gsub_lookups : c->plan->gpos_lookups;\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + hb_zip (this+coverage, ruleSet)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter (subset_offset_array (c, out->ruleSet, this, lookup_map), hb_second)\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+\n+    out->coverage.serialize (c->serializer, out)\n+                 .serialize (c->serializer, new_coverage.iter ());\n+    return_trace (bool (new_coverage));\n@@ -1552,7 +1758,9 @@\n-    unsigned int count = ruleSet.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (class_def.intersects_class (glyphs, i) &&\n-          (this+ruleSet[i]).intersects (glyphs, lookup_context))\n-        return true;\n-\n-    return false;\n+    return\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_enumerate\n+    | hb_map ([&] (const hb_pair_t<unsigned, const RuleSet &> p)\n+              { return class_def.intersects_class (glyphs, p.first) &&\n+                       p.second.intersects (glyphs, lookup_context); })\n+    | hb_any\n+    ;\n@@ -1573,6 +1781,9 @@\n-    unsigned int count = ruleSet.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (class_def.intersects_class (c->glyphs, i)) {\n-        const RuleSet &rule_set = this+ruleSet[i];\n-        rule_set.closure (c, lookup_context);\n-      }\n+    return\n+    + hb_enumerate (ruleSet)\n+    | hb_filter ([&] (unsigned _)\n+                 { return class_def.intersects_class (c->glyphs, _); },\n+                 hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const RuleSet &_) { _.closure (c, lookup_context); })\n+    ;\n@@ -1581,0 +1792,10 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const RuleSet &_) { _.closure_lookups (c); })\n+    ;\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const {}\n+\n@@ -1583,1 +1804,1 @@\n-    (this+coverage).add_coverage (c->input);\n+    (this+coverage).collect_coverage (c->input);\n@@ -1591,3 +1812,4 @@\n-    unsigned int count = ruleSet.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      (this+ruleSet[i]).collect_glyphs (c, lookup_context);\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const RuleSet &_) { _.collect_glyphs (c, lookup_context); })\n+    ;\n@@ -1598,2 +1820,0 @@\n-    TRACE_WOULD_APPLY (this);\n-\n@@ -1607,1 +1827,1 @@\n-    return_trace (rule_set.would_apply (c, lookup_context));\n+    return rule_set.would_apply (c, lookup_context);\n@@ -1631,2 +1851,39 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+    if (unlikely (!out->coverage.serialize_subset (c, coverage, this)))\n+      return_trace (false);\n+\n+    hb_map_t klass_map;\n+    out->classDef.serialize_subset (c, classDef, this, &klass_map);\n+\n+    const hb_map_t *lookup_map = c->table_tag == HB_OT_TAG_GSUB ? c->plan->gsub_lookups : c->plan->gpos_lookups;\n+    bool ret = true;\n+    unsigned non_zero_index = 0, index = 0;\n+    for (const hb_pair_t<unsigned, const OffsetTo<RuleSet>&> _ : + hb_enumerate (ruleSet)\n+                                                                 | hb_filter (klass_map, hb_first))\n+    {\n+      auto *o = out->ruleSet.serialize_append (c->serializer);\n+      if (unlikely (!o))\n+      {\n+        ret = false;\n+        break;\n+      }\n+\n+      if (o->serialize_subset (c, _.second, this, lookup_map, &klass_map))\n+        non_zero_index = index;\n+\n+      index++;\n+    }\n+\n+    if (!ret) return_trace (ret);\n+\n+    \/\/prune empty trailing ruleSets\n+    --index;\n+    while (index > non_zero_index)\n+    {\n+      out->ruleSet.pop ();\n+      index--;\n+    }\n+\n+    return_trace (bool (out->ruleSet));\n@@ -1689,0 +1946,8 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    const LookupRecord *lookupRecord = &StructAfter<LookupRecord> (coverageZ.as_array (glyphCount));\n+    recurse_lookups (c, lookupCount, lookupRecord);\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const {}\n+\n@@ -1691,1 +1956,1 @@\n-    (this+coverageZ[0]).add_coverage (c->input);\n+    (this+coverageZ[0]).collect_coverage (c->input);\n@@ -1707,2 +1972,0 @@\n-    TRACE_WOULD_APPLY (this);\n-\n@@ -1714,1 +1977,4 @@\n-    return_trace (context_would_apply_lookup (c, glyphCount, (const HBUINT16 *) (coverageZ.arrayZ + 1), lookupCount, lookupRecord, lookup_context));\n+    return context_would_apply_lookup (c,\n+                                       glyphCount, (const HBUINT16 *) (coverageZ.arrayZ + 1),\n+                                       lookupCount, lookupRecord,\n+                                       lookup_context);\n@@ -1736,2 +2002,22 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    auto *out = c->serializer->start_embed (this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    out->format = format;\n+    out->glyphCount = glyphCount;\n+    out->lookupCount = lookupCount;\n+\n+    auto coverages = coverageZ.as_array (glyphCount);\n+\n+    for (const OffsetTo<Coverage>& offset : coverages)\n+    {\n+      auto *o = c->serializer->allocate_size<OffsetTo<Coverage>> (OffsetTo<Coverage>::static_size);\n+      if (unlikely (!o)) return_trace (false);\n+      if (!o->serialize_subset (c, offset, this)) return_trace (false);\n+    }\n+\n+    const LookupRecord *lookupRecord = &StructAfter<LookupRecord> (coverageZ.as_array (glyphCount));\n+    const hb_map_t *lookup_map = c->table_tag == HB_OT_TAG_GSUB ? c->plan->gsub_lookups : c->plan->gpos_lookups;\n+    for (unsigned i = 0; i < (unsigned) lookupCount; i++)\n+      c->serializer->copy (lookupRecord[i], lookup_map);\n+\n+    return_trace (true);\n@@ -1758,1 +2044,1 @@\n-  UnsizedArrayOf<OffsetTo<Coverage> >\n+  UnsizedArrayOf<OffsetTo<Coverage>>\n@@ -1770,2 +2056,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -1776,3 +2062,3 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n-    case 2: return_trace (c->dispatch (u.format2));\n-    case 3: return_trace (c->dispatch (u.format3));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n+    case 2: return_trace (c->dispatch (u.format2, hb_forward<Ts> (ds)...));\n+    case 3: return_trace (c->dispatch (u.format3, hb_forward<Ts> (ds)...));\n@@ -1822,9 +2108,9 @@\n-  return intersects_array (glyphs,\n-                           backtrackCount, backtrack,\n-                           lookup_context.funcs.intersects, lookup_context.intersects_data[0])\n-      && intersects_array (glyphs,\n-                           inputCount ? inputCount - 1 : 0, input,\n-                           lookup_context.funcs.intersects, lookup_context.intersects_data[1])\n-      && intersects_array (glyphs,\n-                          lookaheadCount, lookahead,\n-                          lookup_context.funcs.intersects, lookup_context.intersects_data[2]);\n+  return array_is_subset_of (glyphs,\n+                             backtrackCount, backtrack,\n+                             lookup_context.funcs.intersects, lookup_context.intersects_data[0])\n+      && array_is_subset_of (glyphs,\n+                             inputCount ? inputCount - 1 : 0, input,\n+                             lookup_context.funcs.intersects, lookup_context.intersects_data[1])\n+      && array_is_subset_of (glyphs,\n+                             lookaheadCount, lookahead,\n+                             lookup_context.funcs.intersects, lookup_context.intersects_data[2]);\n@@ -1930,2 +2216,2 @@\n-    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16> > (backtrack);\n-    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16> > (input);\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n@@ -1942,3 +2228,5 @@\n-    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16> > (backtrack);\n-    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16> > (input);\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    if (unlikely (c->lookup_limit_exceeded ())) return;\n+\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -1953,0 +2241,10 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    if (unlikely (c->lookup_limit_exceeded ())) return;\n+\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n+    recurse_lookups (c, lookup.len, lookup.arrayZ);\n+  }\n+\n@@ -1956,3 +2254,3 @@\n-    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16> > (backtrack);\n-    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16> > (input);\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -1970,9 +2268,8 @@\n-    TRACE_WOULD_APPLY (this);\n-    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16> > (backtrack);\n-    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16> > (input);\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n-    return_trace (chain_context_would_apply_lookup (c,\n-                                                    backtrack.len, backtrack.arrayZ,\n-                                                    input.lenP1, input.arrayZ,\n-                                                    lookahead.len, lookahead.arrayZ, lookup.len,\n-                                                    lookup.arrayZ, lookup_context));\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n+    return chain_context_would_apply_lookup (c,\n+                                             backtrack.len, backtrack.arrayZ,\n+                                             input.lenP1, input.arrayZ,\n+                                             lookahead.len, lookahead.arrayZ, lookup.len,\n+                                             lookup.arrayZ, lookup_context);\n@@ -1984,3 +2281,3 @@\n-    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16> > (backtrack);\n-    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16> > (input);\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -1994,0 +2291,84 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  void serialize_array (hb_serialize_context_t *c,\n+                        HBUINT16 len,\n+                        Iterator it) const\n+  {\n+    c->copy (len);\n+    for (const auto g : it)\n+    {\n+      HBUINT16 gid;\n+      gid = g;\n+      c->copy (gid);\n+    }\n+  }\n+\n+  ChainRule* copy (hb_serialize_context_t *c,\n+                   const hb_map_t *lookup_map,\n+                   const hb_map_t *backtrack_map,\n+                   const hb_map_t *input_map = nullptr,\n+                   const hb_map_t *lookahead_map = nullptr) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->start_embed (this);\n+    if (unlikely (!out)) return_trace (nullptr);\n+\n+    const hb_map_t *mapping = backtrack_map;\n+    serialize_array (c, backtrack.len, + backtrack.iter ()\n+                                       | hb_map (mapping));\n+\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n+    if (input_map) mapping = input_map;\n+    serialize_array (c, input.lenP1, + input.iter ()\n+                                     | hb_map (mapping));\n+\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n+    if (lookahead_map) mapping = lookahead_map;\n+    serialize_array (c, lookahead.len, + lookahead.iter ()\n+                                       | hb_map (mapping));\n+\n+    const ArrayOf<LookupRecord> &lookupRecord = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n+    HBUINT16 lookupCount;\n+    lookupCount = lookupRecord.len;\n+    if (!c->copy (lookupCount)) return_trace (nullptr);\n+\n+    for (unsigned i = 0; i < (unsigned) lookupCount; i++)\n+      if (!c->copy (lookupRecord[i], lookup_map)) return_trace (nullptr);\n+\n+    return_trace (out);\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               const hb_map_t *lookup_map,\n+               const hb_map_t *backtrack_map = nullptr,\n+               const hb_map_t *input_map = nullptr,\n+               const hb_map_t *lookahead_map = nullptr) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n+\n+    if (!backtrack_map)\n+    {\n+      const hb_set_t &glyphset = *c->plan->glyphset ();\n+      if (!hb_all (backtrack, glyphset) ||\n+          !hb_all (input, glyphset) ||\n+          !hb_all (lookahead, glyphset))\n+        return_trace (false);\n+\n+      copy (c->serializer, lookup_map, c->plan->glyph_map);\n+    }\n+    else\n+    {\n+      if (!hb_all (backtrack, backtrack_map) ||\n+          !hb_all (input, input_map) ||\n+          !hb_all (lookahead, lookahead_map))\n+        return_trace (false);\n+\n+      copy (c->serializer, lookup_map, backtrack_map, input_map, lookahead_map);\n+    }\n+\n+    return_trace (true);\n+  }\n+\n@@ -1998,1 +2379,1 @@\n-    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16> > (backtrack);\n+    const HeadlessArrayOf<HBUINT16> &input = StructAfter<HeadlessArrayOf<HBUINT16>> (backtrack);\n@@ -2000,1 +2381,1 @@\n-    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16> > (input);\n+    const ArrayOf<HBUINT16> &lookahead = StructAfter<ArrayOf<HBUINT16>> (input);\n@@ -2002,1 +2383,1 @@\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -2028,5 +2409,6 @@\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-      if ((this+rule[i]).intersects (glyphs, lookup_context))\n-        return true;\n-    return false;\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_map ([&] (const ChainRule &_) { return _.intersects (glyphs, lookup_context); })\n+    | hb_any\n+    ;\n@@ -2036,3 +2418,18 @@\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-      (this+rule[i]).closure (c, lookup_context);\n+    if (unlikely (c->lookup_limit_exceeded ())) return;\n+\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRule &_) { _.closure (c, lookup_context); })\n+    ;\n+  }\n+\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    if (unlikely (c->lookup_limit_exceeded ())) return;\n+\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRule &_) { _.closure_lookups (c); })\n+    ;\n@@ -2043,3 +2440,5 @@\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-      (this+rule[i]).collect_glyphs (c, lookup_context);\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRule &_) { _.collect_glyphs (c, lookup_context); })\n+    ;\n@@ -2050,7 +2449,6 @@\n-    TRACE_WOULD_APPLY (this);\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-      if ((this+rule[i]).would_apply (c, lookup_context))\n-        return_trace (true);\n-\n-    return_trace (false);\n+    return\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_map ([&] (const ChainRule &_) { return _.would_apply (c, lookup_context); })\n+    | hb_any\n+    ;\n@@ -2062,4 +2460,41 @@\n-    unsigned int num_rules = rule.len;\n-    for (unsigned int i = 0; i < num_rules; i++)\n-      if ((this+rule[i]).apply (c, lookup_context))\n-        return_trace (true);\n+    return_trace (\n+    + hb_iter (rule)\n+    | hb_map (hb_add (this))\n+    | hb_map ([&] (const ChainRule &_) { return _.apply (c, lookup_context); })\n+    | hb_any\n+    )\n+    ;\n+  }\n+\n+  bool subset (hb_subset_context_t *c,\n+               const hb_map_t *lookup_map,\n+               const hb_map_t *backtrack_klass_map = nullptr,\n+               const hb_map_t *input_klass_map = nullptr,\n+               const hb_map_t *lookahead_klass_map = nullptr) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    auto snap = c->serializer->snapshot ();\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+\n+    for (const OffsetTo<ChainRule>& _ : rule)\n+    {\n+      if (!_) continue;\n+      auto *o = out->rule.serialize_append (c->serializer);\n+      if (unlikely (!o)) continue;\n+\n+      auto o_snap = c->serializer->snapshot ();\n+      if (!o->serialize_subset (c, _, this,\n+                                lookup_map,\n+                                backtrack_klass_map,\n+                                input_klass_map,\n+                                lookahead_klass_map))\n+      {\n+        out->rule.pop ();\n+        c->serializer->revert (o_snap);\n+      }\n+    }\n+\n+    bool ret = bool (out->rule);\n+    if (!ret) c->serializer->revert (snap);\n@@ -2067,1 +2502,1 @@\n-    return_trace (false);\n+    return_trace (ret);\n@@ -2093,10 +2528,8 @@\n-    unsigned int count = ruleSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (glyphs->has (iter.get_glyph ()) &&\n-          (this+ruleSet[iter.get_coverage ()]).intersects (glyphs, lookup_context))\n-        return true;\n-    }\n-    return false;\n+    return\n+    + hb_zip (this+coverage, ruleSet)\n+    | hb_filter (*glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_map ([&] (const ChainRuleSet &_) { return _.intersects (glyphs, lookup_context); })\n+    | hb_any\n+    ;\n@@ -2112,8 +2545,6 @@\n-    unsigned int count = ruleSet.len;\n-    for (Coverage::Iter iter (this+coverage); iter.more (); iter.next ())\n-    {\n-      if (unlikely (iter.get_coverage () >= count))\n-        break; \/* Work around malicious fonts. https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/363 *\/\n-      if (c->glyphs->has (iter.get_glyph ()))\n-        (this+ruleSet[iter.get_coverage ()]).closure (c, lookup_context);\n-    }\n+    + hb_zip (this+coverage, ruleSet)\n+    | hb_filter (*c->glyphs, hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRuleSet &_) { _.closure (c, lookup_context); })\n+    ;\n@@ -2122,0 +2553,10 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRuleSet &_) { _.closure_lookups (c); })\n+    ;\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const {}\n+\n@@ -2124,1 +2565,1 @@\n-    (this+coverage).add_coverage (c->input);\n+    (this+coverage).collect_coverage (c->input);\n@@ -2131,3 +2572,4 @@\n-    unsigned int count = ruleSet.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      (this+ruleSet[i]).collect_glyphs (c, lookup_context);\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRuleSet &_) { _.collect_glyphs (c, lookup_context); })\n+    ;\n@@ -2138,2 +2580,0 @@\n-    TRACE_WOULD_APPLY (this);\n-\n@@ -2145,1 +2585,1 @@\n-    return_trace (rule_set.would_apply (c, lookup_context));\n+    return rule_set.would_apply (c, lookup_context);\n@@ -2167,2 +2607,20 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    const hb_set_t &glyphset = *c->plan->glyphset ();\n+    const hb_map_t &glyph_map = *c->plan->glyph_map;\n+\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+\n+    const hb_map_t *lookup_map = c->table_tag == HB_OT_TAG_GSUB ? c->plan->gsub_lookups : c->plan->gpos_lookups;\n+    hb_sorted_vector_t<hb_codepoint_t> new_coverage;\n+    + hb_zip (this+coverage, ruleSet)\n+    | hb_filter (glyphset, hb_first)\n+    | hb_filter (subset_offset_array (c, out->ruleSet, this, lookup_map), hb_second)\n+    | hb_map (hb_first)\n+    | hb_map (glyph_map)\n+    | hb_sink (new_coverage)\n+    ;\n+\n+    out->coverage.serialize (c->serializer, out)\n+                 .serialize (c->serializer, new_coverage.iter ());\n+    return_trace (bool (new_coverage));\n@@ -2207,7 +2665,9 @@\n-    unsigned int count = ruleSet.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (input_class_def.intersects_class (glyphs, i) &&\n-          (this+ruleSet[i]).intersects (glyphs, lookup_context))\n-        return true;\n-\n-    return false;\n+    return\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_enumerate\n+    | hb_map ([&] (const hb_pair_t<unsigned, const ChainRuleSet &> p)\n+              { return input_class_def.intersects_class (glyphs, p.first) &&\n+                       p.second.intersects (glyphs, lookup_context); })\n+    | hb_any\n+    ;\n@@ -2231,6 +2691,17 @@\n-    unsigned int count = ruleSet.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      if (input_class_def.intersects_class (c->glyphs, i)) {\n-        const ChainRuleSet &rule_set = this+ruleSet[i];\n-        rule_set.closure (c, lookup_context);\n-      }\n+    return\n+    + hb_enumerate (ruleSet)\n+    | hb_filter ([&] (unsigned _)\n+                 { return input_class_def.intersects_class (c->glyphs, _); },\n+                 hb_first)\n+    | hb_map (hb_second)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRuleSet &_) { _.closure (c, lookup_context); })\n+    ;\n+  }\n+\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRuleSet &_) { _.closure_lookups (c); })\n+    ;\n@@ -2239,0 +2710,2 @@\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const {}\n+\n@@ -2241,1 +2714,1 @@\n-    (this+coverage).add_coverage (c->input);\n+    (this+coverage).collect_coverage (c->input);\n@@ -2254,3 +2727,4 @@\n-    unsigned int count = ruleSet.len;\n-    for (unsigned int i = 0; i < count; i++)\n-      (this+ruleSet[i]).collect_glyphs (c, lookup_context);\n+    + hb_iter (ruleSet)\n+    | hb_map (hb_add (this))\n+    | hb_apply ([&] (const ChainRuleSet &_) { _.collect_glyphs (c, lookup_context); })\n+    ;\n@@ -2261,2 +2735,0 @@\n-    TRACE_WOULD_APPLY (this);\n-\n@@ -2275,1 +2747,1 @@\n-    return_trace (rule_set.would_apply (c, lookup_context));\n+    return rule_set.would_apply (c, lookup_context);\n@@ -2304,2 +2776,55 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+    auto *out = c->serializer->start_embed (*this);\n+    if (unlikely (!c->serializer->extend_min (out))) return_trace (false);\n+    out->format = format;\n+    out->coverage.serialize_subset (c, coverage, this);\n+\n+    hb_map_t backtrack_klass_map;\n+    out->backtrackClassDef.serialize_subset (c, backtrackClassDef, this, &backtrack_klass_map);\n+    if (unlikely (!c->serializer->check_success (!backtrack_klass_map.in_error ())))\n+      return_trace (false);\n+\n+    \/\/ subset inputClassDef based on glyphs survived in Coverage subsetting\n+    hb_map_t input_klass_map;\n+    out->inputClassDef.serialize_subset (c, inputClassDef, this, &input_klass_map);\n+    if (unlikely (!c->serializer->check_success (!input_klass_map.in_error ())))\n+      return_trace (false);\n+\n+    hb_map_t lookahead_klass_map;\n+    out->lookaheadClassDef.serialize_subset (c, lookaheadClassDef, this, &lookahead_klass_map);\n+    if (unlikely (!c->serializer->check_success (!lookahead_klass_map.in_error ())))\n+      return_trace (false);\n+\n+    unsigned non_zero_index = 0, index = 0;\n+    bool ret = true;\n+    const hb_map_t *lookup_map = c->table_tag == HB_OT_TAG_GSUB ? c->plan->gsub_lookups : c->plan->gpos_lookups;\n+    for (const OffsetTo<ChainRuleSet>& _ : + hb_enumerate (ruleSet)\n+                                           | hb_filter (input_klass_map, hb_first)\n+                                           | hb_map (hb_second))\n+    {\n+      auto *o = out->ruleSet.serialize_append (c->serializer);\n+      if (unlikely (!o))\n+      {\n+        ret = false;\n+        break;\n+      }\n+      if (o->serialize_subset (c, _, this,\n+                               lookup_map,\n+                               &backtrack_klass_map,\n+                               &input_klass_map,\n+                               &lookahead_klass_map))\n+        non_zero_index = index;\n+\n+      index++;\n+    }\n+\n+    if (!ret) return_trace (ret);\n+\n+    \/\/prune empty trailing ruleSets\n+    --index;\n+    while (index > non_zero_index)\n+    {\n+      out->ruleSet.pop ();\n+      index--;\n+    }\n+\n+    return_trace (bool (out->ruleSet));\n@@ -2346,1 +2871,1 @@\n-    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -2351,1 +2876,1 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (input);\n@@ -2365,1 +2890,1 @@\n-    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -2370,2 +2895,2 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -2384,0 +2909,10 @@\n+  void closure_lookups (hb_closure_lookups_context_t *c) const\n+  {\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n+    recurse_lookups (c, lookup.len, lookup.arrayZ);\n+  }\n+\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const {}\n+\n@@ -2386,1 +2921,1 @@\n-    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -2388,1 +2923,1 @@\n-    (this+input[0]).add_coverage (c->input);\n+    (this+input[0]).collect_coverage (c->input);\n@@ -2390,2 +2925,2 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -2406,5 +2941,3 @@\n-    TRACE_WOULD_APPLY (this);\n-\n-    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -2415,5 +2948,5 @@\n-    return_trace (chain_context_would_apply_lookup (c,\n-                                                    backtrack.len, (const HBUINT16 *) backtrack.arrayZ,\n-                                                    input.len, (const HBUINT16 *) input.arrayZ + 1,\n-                                                    lookahead.len, (const HBUINT16 *) lookahead.arrayZ,\n-                                                    lookup.len, lookup.arrayZ, lookup_context));\n+    return chain_context_would_apply_lookup (c,\n+                                             backtrack.len, (const HBUINT16 *) backtrack.arrayZ,\n+                                             input.len, (const HBUINT16 *) input.arrayZ + 1,\n+                                             lookahead.len, (const HBUINT16 *) lookahead.arrayZ,\n+                                             lookup.len, lookup.arrayZ, lookup_context);\n@@ -2424,1 +2957,1 @@\n-    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -2431,1 +2964,1 @@\n-    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -2436,2 +2969,2 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (input);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -2449,0 +2982,16 @@\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator))>\n+  bool serialize_coverage_offsets (hb_subset_context_t *c, Iterator it, const void* base) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->serializer->start_embed<OffsetArrayOf<Coverage>> ();\n+\n+    if (unlikely (!c->serializer->allocate_size<HBUINT16> (HBUINT16::static_size))) return_trace (false);\n+\n+    + it\n+    | hb_apply (subset_offset_array (c, *out, base))\n+    ;\n+\n+    return_trace (out->len);\n+  }\n+\n@@ -2452,2 +3001,26 @@\n-    \/\/ TODO(subset)\n-    return_trace (false);\n+\n+    auto *out = c->serializer->start_embed (this);\n+    if (unlikely (!out)) return_trace (false);\n+    if (unlikely (!c->serializer->embed (this->format))) return_trace (false);\n+\n+    if (!serialize_coverage_offsets (c, backtrack.iter (), this))\n+      return_trace (false);\n+\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n+    if (!serialize_coverage_offsets (c, input.iter (), this))\n+      return_trace (false);\n+\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (input);\n+    if (!serialize_coverage_offsets (c, lookahead.iter (), this))\n+      return_trace (false);\n+\n+    const ArrayOf<LookupRecord> &lookupRecord = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n+    HBUINT16 lookupCount;\n+    lookupCount = lookupRecord.len;\n+    if (!c->serializer->copy (lookupCount)) return_trace (false);\n+\n+    const hb_map_t *lookup_map = c->table_tag == HB_OT_TAG_GSUB ? c->plan->gsub_lookups : c->plan->gpos_lookups;\n+    for (unsigned i = 0; i < (unsigned) lookupCount; i++)\n+      if (!c->serializer->copy (lookupRecord[i], lookup_map)) return_trace (false);\n+\n+    return_trace (true);\n@@ -2460,1 +3033,1 @@\n-    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage> > (backtrack);\n+    const OffsetArrayOf<Coverage> &input = StructAfter<OffsetArrayOf<Coverage>> (backtrack);\n@@ -2463,1 +3036,1 @@\n-    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage> > (input);\n+    const OffsetArrayOf<Coverage> &lookahead = StructAfter<OffsetArrayOf<Coverage>> (input);\n@@ -2465,1 +3038,1 @@\n-    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord> > (lookahead);\n+    const ArrayOf<LookupRecord> &lookup = StructAfter<ArrayOf<LookupRecord>> (lookahead);\n@@ -2492,2 +3065,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -2498,3 +3071,3 @@\n-    case 1: return_trace (c->dispatch (u.format1));\n-    case 2: return_trace (c->dispatch (u.format2));\n-    case 3: return_trace (c->dispatch (u.format3));\n+    case 1: return_trace (c->dispatch (u.format1, hb_forward<Ts> (ds)...));\n+    case 2: return_trace (c->dispatch (u.format2, hb_forward<Ts> (ds)...));\n+    case 3: return_trace (c->dispatch (u.format3, hb_forward<Ts> (ds)...));\n@@ -2522,5 +3095,1 @@\n-  {\n-    unsigned int offset = extensionOffset;\n-    if (unlikely (!offset)) return Null(typename T::SubTable);\n-    return StructAtOffset<typename T::SubTable> (this, offset);\n-  }\n+  { return this + reinterpret_cast<const LOffsetTo<typename T::SubTable> &> (extensionOffset); }\n@@ -2528,2 +3097,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -2533,1 +3102,1 @@\n-    return_trace (get_subtable<typename T::SubTable> ().dispatch (c, get_type ()));\n+    return_trace (get_subtable<typename T::SubTable> ().dispatch (c, get_type (), hb_forward<Ts> (ds)...));\n@@ -2536,0 +3105,3 @@\n+  void collect_variation_indices (hb_collect_variation_indices_context_t *c) const\n+  { dispatch (c); }\n+\n@@ -2541,1 +3113,0 @@\n-                  extensionOffset != 0 &&\n@@ -2550,1 +3121,1 @@\n-  HBUINT32      extensionOffset;        \/* Offset to the extension subtable,\n+  Offset32      extensionOffset;        \/* Offset to the extension subtable,\n@@ -2571,1 +3142,1 @@\n-    default:return Null(typename T::SubTable);\n+    default:return Null (typename T::SubTable);\n@@ -2575,2 +3146,2 @@\n-  template <typename context_t>\n-  typename context_t::return_t dispatch (context_t *c) const\n+  template <typename context_t, typename ...Ts>\n+  typename context_t::return_t dispatch (context_t *c, Ts&&... ds) const\n@@ -2581,1 +3152,1 @@\n-    case 1: return_trace (u.format1.dispatch (c));\n+    case 1: return_trace (u.format1.dispatch (c, hb_forward<Ts> (ds)...));\n@@ -2604,1 +3175,1 @@\n-    lookup.add_coverage (&digest);\n+    lookup.collect_coverage (&digest);\n@@ -2664,2 +3235,8 @@\n-  { return (version.to_int () >= 0x00010001u ? this+featureVars : Null(FeatureVariations))\n-           .find_index (coords, num_coords, index); }\n+  {\n+#ifdef HB_NO_VAR\n+    *index = FeatureVariations::NOT_FOUND_INDEX;\n+    return false;\n+#endif\n+    return (version.to_int () >= 0x00010001u ? this+featureVars : Null (FeatureVariations))\n+            .find_index (coords, num_coords, index);\n+  }\n@@ -2669,0 +3246,1 @@\n+#ifndef HB_NO_VAR\n@@ -2677,0 +3255,1 @@\n+#endif\n@@ -2680,0 +3259,9 @@\n+  void feature_variation_collect_lookups (const hb_set_t *feature_indexes,\n+                                          hb_set_t       *lookup_indexes \/* OUT *\/) const\n+  {\n+#ifndef HB_NO_VAR\n+    if (version.to_int () >= 0x00010001u)\n+      (this+featureVars).collect_lookups (feature_indexes, lookup_indexes);\n+#endif\n+  }\n+\n@@ -2681,1 +3269,3 @@\n-  bool subset (hb_subset_context_t *c) const\n+  void closure_lookups (hb_face_t      *face,\n+                        const hb_set_t *glyphs,\n+                        hb_set_t       *lookup_indexes \/* IN\/OUT *\/) const\n@@ -2683,3 +3273,2 @@\n-    TRACE_SUBSET (this);\n-    struct GSUBGPOS *out = c->serializer->embed (*this);\n-    if (unlikely (!out)) return_trace (false);\n+    hb_set_t visited_lookups, inactive_lookups;\n+    OT::hb_closure_lookups_context_t c (face, glyphs, &visited_lookups, &inactive_lookups);\n@@ -2687,2 +3276,2 @@\n-    out->scriptList.serialize_subset (c, this+scriptList, out);\n-    out->featureList.serialize_subset (c, this+featureList, out);\n+    for (unsigned lookup_index : + hb_iter (lookup_indexes))\n+      reinterpret_cast<const TLookup &> (get_lookup (lookup_index)).closure_lookups (&c, lookup_index);\n@@ -2690,6 +3279,10 @@\n-    typedef OffsetListOf<TLookup> TLookupList;\n-    \/* TODO Use intersects() to count how many subtables survive? *\/\n-    CastR<OffsetTo<TLookupList> > (out->lookupList)\n-      .serialize_subset (c,\n-                         this+CastR<const OffsetTo<TLookupList> > (lookupList),\n-                         out);\n+    hb_set_union (lookup_indexes, &visited_lookups);\n+    hb_set_subtract (lookup_indexes, &inactive_lookups);\n+  }\n+\n+  template <typename TLookup>\n+  bool subset (hb_subset_layout_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    auto *out = c->subset_context->serializer->embed (*this);\n+    if (unlikely (!out)) return_trace (false);\n@@ -2697,0 +3290,19 @@\n+    typedef LookupOffsetList<TLookup> TLookupList;\n+    reinterpret_cast<OffsetTo<TLookupList> &> (out->lookupList)\n+        .serialize_subset (c->subset_context,\n+                           reinterpret_cast<const OffsetTo<TLookupList> &> (lookupList),\n+                           this,\n+                           c);\n+\n+    reinterpret_cast<OffsetTo<RecordListOfFeature> &> (out->featureList)\n+        .serialize_subset (c->subset_context,\n+                           reinterpret_cast<const OffsetTo<RecordListOfFeature> &> (featureList),\n+                           this,\n+                           c);\n+\n+    out->scriptList.serialize_subset (c->subset_context,\n+                                      scriptList,\n+                                      this,\n+                                      c);\n+\n+#ifndef HB_NO_VAR\n@@ -2698,1 +3310,9 @@\n-     out->featureVars.serialize_subset (c, this+featureVars, out);\n+    {\n+      bool ret = out->featureVars.serialize_subset (c->subset_context, featureVars, this, c);\n+      if (!ret)\n+      {\n+        out->version.major = 1;\n+        out->version.minor = 0;\n+      }\n+    }\n+#endif\n@@ -2703,0 +3323,16 @@\n+  void closure_features (const hb_map_t *lookup_indexes, \/* IN *\/\n+                         hb_set_t       *feature_indexes \/* OUT *\/) const\n+  {\n+    unsigned int feature_count = hb_min (get_feature_count (), (unsigned) HB_MAX_FEATURES);\n+    for (unsigned i = 0; i < feature_count; i++)\n+    {\n+      const Feature& f = get_feature (i);\n+      if ((!f.featureParams.is_null ()) || f.intersects_lookup_indexes (lookup_indexes))\n+        feature_indexes->add (i);\n+    }\n+#ifndef HB_NO_VAR\n+    if (version.to_int () >= 0x00010001u)\n+      (this+featureVars).closure_features (lookup_indexes, feature_indexes);\n+#endif\n+  }\n+\n@@ -2714,6 +3350,13 @@\n-    return_trace (version.sanitize (c) &&\n-                  likely (version.major == 1) &&\n-                  scriptList.sanitize (c, this) &&\n-                  featureList.sanitize (c, this) &&\n-                  CastR<OffsetTo<TLookupList> > (lookupList).sanitize (c, this) &&\n-                  (version.to_int () < 0x00010001u || featureVars.sanitize (c, this)));\n+    if (unlikely (!(version.sanitize (c) &&\n+                    likely (version.major == 1) &&\n+                    scriptList.sanitize (c, this) &&\n+                    featureList.sanitize (c, this) &&\n+                    reinterpret_cast<const OffsetTo<TLookupList> &> (lookupList).sanitize (c, this))))\n+      return_trace (false);\n+\n+#ifndef HB_NO_VAR\n+    if (unlikely (!(version.to_int () < 0x00010001u || featureVars.sanitize (c, this))))\n+      return_trace (false);\n+#endif\n+\n+    return_trace (true);\n@@ -2727,2 +3370,2 @@\n-      this->table = hb_sanitize_context_t().reference_table<T> (face);\n-      if (unlikely (this->table->is_blacklisted (this->table.get_blob (), face)))\n+      this->table = hb_sanitize_context_t ().reference_table<T> (face);\n+      if (unlikely (this->table->is_blocklisted (this->table.get_blob (), face)))\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-gsubgpos.hh","additions":998,"deletions":355,"binary":false,"changes":1353,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-typedef SortedArrayOf<GlyphID> ExtenderGlyphs;\n+typedef SortedArrayOf<HBGlyphID> ExtenderGlyphs;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout-jstf-table.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,8 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_LAYOUT\n+\n+#ifdef HB_NO_OT_TAG\n+#error \"Cannot compile hb-ot-layout.cc with HB_NO_OT_TAG.\"\n+#endif\n+\n@@ -38,1 +46,0 @@\n-#include \"hb-ot-gasp-table.hh\" \/\/ Just so we compile it; unused otherwise.\n@@ -47,1 +54,0 @@\n-#include \"hb-aat-layout-lcar-table.hh\"\n@@ -49,1 +55,1 @@\n-\n+#include \"hb-aat-layout-opbd-table.hh\" \/\/ Just so we compile it; unused otherwise.\n@@ -65,0 +71,11 @@\n+#ifndef HB_NO_OT_KERN\n+\/**\n+ * hb_ot_layout_has_kerning:\n+ * @face: The #hb_face_t to work on\n+ *\n+ * Tests whether a face includes any kerning data in the 'kern' table.\n+ * Does NOT test for kerning lookups in the GPOS table.\n+ *\n+ * Return value: true if data found, false otherwise\n+ *\n+ **\/\n@@ -71,0 +88,10 @@\n+\/**\n+ * hb_ot_layout_has_machine_kerning:\n+ * @face: The #hb_face_t to work on\n+ *\n+ * Tests whether a face includes any state-machine kerning in the 'kern' table.\n+ * Does NOT examine the GPOS table.\n+ *\n+ * Return value: true if data found, false otherwise\n+ *\n+ **\/\n@@ -77,0 +104,14 @@\n+\/**\n+ * hb_ot_layout_has_cross_kerning:\n+ * @face: The #hb_face_t to work on\n+ *\n+ * Tests whether a face has any cross-stream kerning (i.e., kerns\n+ * that make adjustments perpendicular to the direction of the text\n+ * flow: Y adjustments in horizontal text or X adjustments in\n+ * vertical text) in the 'kern' table.\n+ *\n+ * Does NOT examine the GPOS table.\n+ *\n+ * Return value: true is data found, false otherwise\n+ *\n+ **\/\n@@ -95,0 +136,1 @@\n+#endif\n@@ -102,1 +144,1 @@\n-OT::GDEF::is_blacklisted (hb_blob_t *blob,\n+OT::GDEF::is_blocklisted (hb_blob_t *blob,\n@@ -105,1 +147,4 @@\n-  \/* The ugly business of blacklisting individual fonts' tables happen here!\n+#ifdef HB_NO_OT_LAYOUT_BLACKLIST\n+  return false;\n+#endif\n+  \/* The ugly business of blocklisting individual fonts' tables happen here!\n@@ -122,4 +167,3 @@\n-#define ENCODE(x,y,z) (((uint64_t) (x) << 48) | ((uint64_t) (y) << 24) | (uint64_t) (z))\n-  switch ENCODE(blob->length,\n-                face->table.GSUB->table.get_length (),\n-                face->table.GPOS->table.get_length ())\n+  switch HB_CODEPOINT_ENCODE3(blob->length,\n+                              face->table.GSUB->table.get_length (),\n+                              face->table.GPOS->table.get_length ())\n@@ -128,1 +172,1 @@\n-    case ENCODE (442, 2874, 42038):\n+    case HB_CODEPOINT_ENCODE3 (442, 2874, 42038):\n@@ -130,1 +174,1 @@\n-    case ENCODE (430, 2874, 40662):\n+    case HB_CODEPOINT_ENCODE3 (430, 2874, 40662):\n@@ -132,1 +176,1 @@\n-    case ENCODE (442, 2874, 39116):\n+    case HB_CODEPOINT_ENCODE3 (442, 2874, 39116):\n@@ -134,1 +178,1 @@\n-    case ENCODE (430, 2874, 39374):\n+    case HB_CODEPOINT_ENCODE3 (430, 2874, 39374):\n@@ -136,1 +180,1 @@\n-    case ENCODE (490, 3046, 41638):\n+    case HB_CODEPOINT_ENCODE3 (490, 3046, 41638):\n@@ -138,1 +182,1 @@\n-    case ENCODE (478, 3046, 41902):\n+    case HB_CODEPOINT_ENCODE3 (478, 3046, 41902):\n@@ -140,1 +184,1 @@\n-    case ENCODE (898, 12554, 46470):\n+    case HB_CODEPOINT_ENCODE3 (898, 12554, 46470):\n@@ -142,1 +186,1 @@\n-    case ENCODE (910, 12566, 47732):\n+    case HB_CODEPOINT_ENCODE3 (910, 12566, 47732):\n@@ -144,1 +188,1 @@\n-    case ENCODE (928, 23298, 59332):\n+    case HB_CODEPOINT_ENCODE3 (928, 23298, 59332):\n@@ -146,1 +190,1 @@\n-    case ENCODE (940, 23310, 60732):\n+    case HB_CODEPOINT_ENCODE3 (940, 23310, 60732):\n@@ -148,1 +192,1 @@\n-    case ENCODE (964, 23836, 60072):\n+    case HB_CODEPOINT_ENCODE3 (964, 23836, 60072):\n@@ -150,1 +194,1 @@\n-    case ENCODE (976, 23832, 61456):\n+    case HB_CODEPOINT_ENCODE3 (976, 23832, 61456):\n@@ -152,1 +196,1 @@\n-    case ENCODE (994, 24474, 60336):\n+    case HB_CODEPOINT_ENCODE3 (994, 24474, 60336):\n@@ -154,1 +198,1 @@\n-    case ENCODE (1006, 24470, 61740):\n+    case HB_CODEPOINT_ENCODE3 (1006, 24470, 61740):\n@@ -156,1 +200,1 @@\n-    case ENCODE (1006, 24576, 61346):\n+    case HB_CODEPOINT_ENCODE3 (1006, 24576, 61346):\n@@ -158,1 +202,1 @@\n-    case ENCODE (1018, 24572, 62828):\n+    case HB_CODEPOINT_ENCODE3 (1018, 24572, 62828):\n@@ -160,1 +204,1 @@\n-    case ENCODE (1006, 24576, 61352):\n+    case HB_CODEPOINT_ENCODE3 (1006, 24576, 61352):\n@@ -162,1 +206,1 @@\n-    case ENCODE (1018, 24572, 62834):\n+    case HB_CODEPOINT_ENCODE3 (1018, 24572, 62834):\n@@ -164,1 +208,1 @@\n-    case ENCODE (832, 7324, 47162):\n+    case HB_CODEPOINT_ENCODE3 (832, 7324, 47162):\n@@ -166,1 +210,1 @@\n-    case ENCODE (844, 7302, 45474):\n+    case HB_CODEPOINT_ENCODE3 (844, 7302, 45474):\n@@ -168,1 +212,1 @@\n-    case ENCODE (180, 13054, 7254):\n+    case HB_CODEPOINT_ENCODE3 (180, 13054, 7254):\n@@ -170,1 +214,1 @@\n-    case ENCODE (192, 12638, 7254):\n+    case HB_CODEPOINT_ENCODE3 (192, 12638, 7254):\n@@ -172,1 +216,1 @@\n-    case ENCODE (192, 12690, 7254):\n+    case HB_CODEPOINT_ENCODE3 (192, 12690, 7254):\n@@ -175,1 +219,1 @@\n-    case ENCODE (188, 248, 3852):\n+    case HB_CODEPOINT_ENCODE3 (188, 248, 3852):\n@@ -178,1 +222,1 @@\n-    case ENCODE (188, 264, 3426):\n+    case HB_CODEPOINT_ENCODE3 (188, 264, 3426):\n@@ -180,1 +224,1 @@\n-    case ENCODE (1058, 47032, 11818):\n+    case HB_CODEPOINT_ENCODE3 (1058, 47032, 11818):\n@@ -182,1 +226,1 @@\n-    case ENCODE (1046, 47030, 12600):\n+    case HB_CODEPOINT_ENCODE3 (1046, 47030, 12600):\n@@ -184,1 +228,1 @@\n-    case ENCODE (1058, 71796, 16770):\n+    case HB_CODEPOINT_ENCODE3 (1058, 71796, 16770):\n@@ -186,1 +230,1 @@\n-    case ENCODE (1046, 71790, 17862):\n+    case HB_CODEPOINT_ENCODE3 (1046, 71790, 17862):\n@@ -188,1 +232,1 @@\n-    case ENCODE (1046, 71788, 17112):\n+    case HB_CODEPOINT_ENCODE3 (1046, 71788, 17112):\n@@ -190,1 +234,1 @@\n-    case ENCODE (1058, 71794, 17514):\n+    case HB_CODEPOINT_ENCODE3 (1058, 71794, 17514):\n@@ -192,1 +236,1 @@\n-    case ENCODE (1330, 109904, 57938):\n+    case HB_CODEPOINT_ENCODE3 (1330, 109904, 57938):\n@@ -194,1 +238,1 @@\n-    case ENCODE (1330, 109904, 58972):\n+    case HB_CODEPOINT_ENCODE3 (1330, 109904, 58972):\n@@ -197,1 +241,1 @@\n-    case ENCODE (1004, 59092, 14836):\n+    case HB_CODEPOINT_ENCODE3 (1004, 59092, 14836):\n@@ -199,1 +243,0 @@\n-#undef ENCODE\n@@ -222,0 +265,9 @@\n+\/**\n+ * hb_ot_layout_has_glyph_classes:\n+ * @face: #hb_face_t to work upon\n+ *\n+ * Tests whether a face has any glyph classes defined in its GDEF table.\n+ *\n+ * Return value: true if data found, false otherwise\n+ *\n+ **\/\n@@ -230,0 +282,7 @@\n+ * @face: The #hb_face_t to work on\n+ * @glyph: The #hb_codepoint_t code point to query\n+ *\n+ * Fetches the GDEF class of the requested glyph in the specified face.\n+ *\n+ * Return value: The #hb_ot_layout_glyph_class_t glyph class of the given code\n+ * point in the GDEF table of the face.\n@@ -242,0 +301,7 @@\n+ * @face: The #hb_face_t to work on\n+ * @klass: The #hb_ot_layout_glyph_class_t GDEF class to retrieve\n+ * @glyphs: (out): The #hb_set_t set of all glyphs belonging to the requested\n+ *          class.\n+ *\n+ * Retrieves the set of all glyphs from the face that belong to the requested\n+ * glyph class in the face's GDEF table.\n@@ -253,0 +319,16 @@\n+#ifndef HB_NO_LAYOUT_UNUSED\n+\/**\n+ * hb_ot_layout_get_attach_points:\n+ * @face: The #hb_face_t to work on\n+ * @glyph: The #hb_codepoint_t code point to query\n+ * @start_offset: offset of the first attachment point to retrieve\n+ * @point_count: (inout) (allow-none): Input = the maximum number of attachment points to return;\n+ *               Output = the actual number of attachment points returned (may be zero)\n+ * @point_array: (out) (array length=point_count): The array of attachment points found for the query\n+ *\n+ * Fetches a list of all attachment points for the specified glyph in the GDEF\n+ * table of the face. The list returned will begin at the offset provided.\n+ *\n+ * Useful if the client program wishes to cache the list.\n+ *\n+ **\/\n@@ -265,1 +347,14 @@\n-\n+\/**\n+ * hb_ot_layout_get_ligature_carets:\n+ * @font: The #hb_font_t to work on\n+ * @direction: The #hb_direction_t text direction to use\n+ * @glyph: The #hb_codepoint_t code point to query\n+ * @start_offset: offset of the first caret position to retrieve\n+ * @caret_count: (inout) (allow-none): Input = the maximum number of caret positions to return;\n+ *               Output = the actual number of caret positions returned (may be zero)\n+ * @caret_array: (out) (array length=caret_count): The array of caret positions found for the query\n+ *\n+ * Fetches a list of the caret positions defined for a ligature glyph in the GDEF\n+ * table of the font. The list returned will begin at the offset provided.\n+ *\n+ **\/\n@@ -274,9 +369,1 @@\n-  unsigned int result_caret_count = 0;\n-  unsigned int result = font->face->table.GDEF->table->get_lig_carets (font, direction, glyph, start_offset, &result_caret_count, caret_array);\n-  if (result)\n-  {\n-    if (caret_count) *caret_count = result_caret_count;\n-  }\n-  else\n-    result = font->face->table.lcar->get_lig_carets (font, direction, glyph, start_offset, caret_count, caret_array);\n-  return result;\n+  return font->face->table.GDEF->table->get_lig_carets (font, direction, glyph, start_offset, caret_count, caret_array);\n@@ -284,0 +371,1 @@\n+#endif\n@@ -291,1 +379,1 @@\n-OT::GSUB::is_blacklisted (hb_blob_t *blob HB_UNUSED,\n+OT::GSUB::is_blocklisted (hb_blob_t *blob HB_UNUSED,\n@@ -294,18 +382,3 @@\n-  \/* Mac OS X prefers morx over GSUB.  It also ships with various Indic fonts,\n-   * all by 'MUTF' foundry (Tamil MN, Tamil Sangam MN, etc.), that have broken\n-   * GSUB\/GPOS tables.  Some have GSUB with zero scripts, those are ignored by\n-   * our morx\/GSUB preference code.  But if GSUB has non-zero scripts, we tend\n-   * to prefer it over morx because we want to be consistent with other OpenType\n-   * shapers.\n-   *\n-   * To work around broken Indic Mac system fonts, we ignore GSUB table if\n-   * OS\/2 VendorId is 'MUTF' and font has morx table as well.\n-   *\n-   * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1410\n-   * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1348\n-   * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1391\n-   *\/\n-  if (unlikely (face->table.OS2->achVendID == HB_TAG ('M','U','T','F') &&\n-                face->table.morx->has_data ()))\n-    return true;\n-\n+#ifdef HB_NO_OT_LAYOUT_BLACKLIST\n+  return false;\n+#endif\n@@ -316,1 +389,1 @@\n-OT::GPOS::is_blacklisted (hb_blob_t *blob HB_UNUSED,\n+OT::GPOS::is_blocklisted (hb_blob_t *blob HB_UNUSED,\n@@ -319,0 +392,3 @@\n+#ifdef HB_NO_OT_LAYOUT_BLACKLIST\n+  return false;\n+#endif\n@@ -329,1 +405,1 @@\n-    default:             return Null(OT::GSUBGPOS);\n+    default:             return Null (OT::GSUBGPOS);\n@@ -334,0 +410,13 @@\n+\/**\n+ * hb_ot_layout_table_get_script_tags:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @start_offset: offset of the first script tag to retrieve\n+ * @script_count: (inout) (allow-none): Input = the maximum number of script tags to return;\n+ *                Output = the actual number of script tags returned (may be zero)\n+ * @script_tags: (out) (array length=script_count): The array of #hb_tag_t script tags found for the query\n+ *\n+ * Fetches a list of all scripts enumerated in the specified face's GSUB table\n+ * or GPOS table. The list returned will begin at the offset provided.\n+ *\n+ **\/\n@@ -348,0 +437,13 @@\n+\/**\n+ * hb_ot_layout_table_find_script:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_tag: #hb_tag_t of the script tag requested\n+ * @script_index: (out): The index of the requested script tag\n+ *\n+ * Fetches the index if a given script tag in the specified face's GSUB table\n+ * or GPOS table.\n+ *\n+ * Return value: true if the script is found, false otherwise\n+ *\n+ **\/\n@@ -352,1 +454,1 @@\n-                                unsigned int *script_index)\n+                                unsigned int *script_index \/* OUT *\/)\n@@ -378,0 +480,11 @@\n+#ifndef HB_DISABLE_DEPRECATED\n+\/**\n+ * hb_ot_layout_table_choose_script:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_tags: Array of #hb_tag_t script tags\n+ * @script_index: (out): The index of the requested script tag\n+ * @chosen_script: (out): #hb_tag_t of the script tag requested\n+ *\n+ * Deprecated since 2.0.0\n+ **\/\n@@ -382,2 +495,2 @@\n-                                  unsigned int   *script_index,\n-                                  hb_tag_t       *chosen_script)\n+                                  unsigned int   *script_index  \/* OUT *\/,\n+                                  hb_tag_t       *chosen_script \/* OUT *\/)\n@@ -389,0 +502,1 @@\n+#endif\n@@ -392,0 +506,6 @@\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_count: Number of script tags in the array\n+ * @script_tags: Array of #hb_tag_t script tags\n+ * @script_index: (out): The index of the requested script\n+ * @chosen_script: (out): #hb_tag_t of the requested script\n@@ -445,0 +565,13 @@\n+\n+\/**\n+ * hb_ot_layout_table_get_feature_tags:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @start_offset: offset of the first feature tag to retrieve\n+ * @feature_count: (inout) (allow-none): Input = the maximum number of feature tags to return;\n+ *                 Output = the actual number of feature tags returned (may be zero)\n+ * @feature_tags: (out) (array length=feature_count): Array of feature tags found in the table\n+ *\n+ * Fetches a list of all feature tags in the given face's GSUB or GPOS table.\n+ *\n+ **\/\n@@ -457,0 +590,13 @@\n+\n+\/**\n+ * hb_ot_layout_table_find_feature:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @feature_tag: The #hb_tag_t og the requested feature tag\n+ * @feature_index: (out): The index of the requested feature\n+ *\n+ * Fetches the index for a given feature tag in the specified face's GSUB table\n+ * or GPOS table.\n+ *\n+ * Return value: true if the feature is found, false otherwise\n+ **\/\n@@ -461,1 +607,1 @@\n-                                 unsigned int *feature_index)\n+                                 unsigned int *feature_index \/* OUT *\/)\n@@ -480,0 +626,14 @@\n+\/**\n+ * hb_ot_layout_script_get_language_tags:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @start_offset: offset of the first language tag to retrieve\n+ * @language_count: (inout) (allow-none): Input = the maximum number of language tags to return;\n+ *                  Output = the actual number of language tags returned (may be zero)\n+ * @language_tags: (out) (array length=language_count): Array of language tags found in the table\n+ *\n+ * Fetches a list of language tags in the given face's GSUB or GPOS table, underneath\n+ * the specified script index. The list returned will begin at the offset provided.\n+ *\n+ **\/\n@@ -493,0 +653,18 @@\n+\n+#ifndef HB_DISABLE_DEPRECATED\n+\/**\n+ * hb_ot_layout_script_find_language:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @language_tag: The #hb_tag_t of the requested language\n+ * @language_index: The index of the requested language\n+ *\n+ * Fetches the index of a given language tag in the specified face's GSUB table\n+ * or GPOS table, underneath the specified script tag.\n+ *\n+ * Return value: true if the language tag is found, false otherwise\n+ *\n+ * Since: ??\n+ * Deprecated: ??\n+ **\/\n@@ -507,0 +685,2 @@\n+#endif\n+\n@@ -510,0 +690,11 @@\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @language_count: The number of languages in the specified script\n+ * @language_tags: The array of language tags\n+ * @language_index: (out): The index of the requested language\n+ *\n+ * Fetches the index of a given language tag in the specified face's GSUB table\n+ * or GPOS table, underneath the specified script index.\n+ *\n+ * Return value: true if the language tag is found, false otherwise\n@@ -539,0 +730,15 @@\n+\n+\/**\n+ * hb_ot_layout_language_get_required_feature_index:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @language_index: The index of the requested language tag\n+ * @feature_index: (out): The index of the requested feature\n+ *\n+ * Fetches the index of a requested feature in the given face's GSUB or GPOS table,\n+ * underneath the specified script and language.\n+ *\n+ * Return value: true if the feature is found, false otherwise\n+ *\n+ **\/\n@@ -544,1 +750,1 @@\n-                                                  unsigned int *feature_index)\n+                                                  unsigned int *feature_index \/* OUT *\/)\n@@ -554,0 +760,1 @@\n+\n@@ -556,0 +763,11 @@\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @language_index: The index of the requested language tag\n+ * @feature_index: (out): The index of the requested feature\n+ * @feature_tag: (out): The #hb_tag_t of the requested feature\n+ *\n+ * Fetches the tag of a requested feature index in the given face's GSUB or GPOS table,\n+ * underneath the specified script and language.\n+ *\n+ * Return value: true if the feature is found, false otherwise\n@@ -564,2 +782,2 @@\n-                                            unsigned int *feature_index,\n-                                            hb_tag_t     *feature_tag)\n+                                            unsigned int *feature_index \/* OUT *\/,\n+                                            hb_tag_t     *feature_tag   \/* OUT *\/)\n@@ -577,0 +795,16 @@\n+\n+\/**\n+ * hb_ot_layout_language_get_feature_indexes:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @language_index: The index of the requested language tag\n+ * @start_offset: offset of the first feature tag to retrieve\n+ * @feature_count: (inout) (allow-none): Input = the maximum number of feature tags to return;\n+ *                 Output: the actual number of feature tags returned (may be zero)\n+ * @feature_indexes: (out) (array length=feature_count): The array of feature indexes found for the query\n+ *\n+ * Fetches a list of all features in the specified face's GSUB table\n+ * or GPOS table, underneath the specified script and language. The list\n+ * returned will begin at the offset provided.\n+ **\/\n@@ -592,0 +826,17 @@\n+\n+\/**\n+ * hb_ot_layout_language_get_feature_tags:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @language_index: The index of the requested language tag\n+ * @start_offset: offset of the first feature tag to retrieve\n+ * @feature_count: (inout) (allow-none): Input = the maximum number of feature tags to return;\n+ *                 Output = the actual number of feature tags returned (may be zero)\n+ * @feature_tags: (out) (array length=feature_count): The array of #hb_tag_t feature tags found for the query\n+ *\n+ * Fetches a list of all features in the specified face's GSUB table\n+ * or GPOS table, underneath the specified script and language. The list\n+ * returned will begin at the offset provided.\n+ *\n+ **\/\n@@ -617,0 +868,15 @@\n+\/**\n+ * hb_ot_layout_language_find_feature:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @script_index: The index of the requested script tag\n+ * @language_index: The index of the requested language tag\n+ * @feature_tag: #hb_tag_t of the feature tag requested\n+ * @feature_index: (out): The index of the requested feature\n+ *\n+ * Fetches the index of a given feature tag in the specified face's GSUB table\n+ * or GPOS table, underneath the specified script and language.\n+ *\n+ * Return value: true if the feature is found, false otherwise\n+ *\n+ **\/\n@@ -623,1 +889,1 @@\n-                                    unsigned int *feature_index)\n+                                    unsigned int *feature_index \/* OUT *\/)\n@@ -643,0 +909,1 @@\n+\n@@ -645,0 +912,11 @@\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @feature_index: The index of the requested feature\n+ * @start_offset: offset of the first lookup to retrieve\n+ * @lookup_count: (inout) (allow-none): Input = the maximum number of lookups to return;\n+ *                Output = the actual number of lookups returned (may be zero)\n+ * @lookup_indexes: (out) (array length=lookup_count): The array of lookup indexes found for the query\n+ *\n+ * Fetches a list of all lookups enumerated for the specified feature, in\n+ * the specified face's GSUB table or GPOS table. The list returned will\n+ * begin at the offset provided.\n@@ -665,0 +943,1 @@\n+\n@@ -667,0 +946,5 @@\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ *\n+ * Fetches the total number of lookups enumerated in the specified\n+ * face's GSUB table or GPOS table.\n@@ -680,3 +964,3 @@\n-  hb_collect_features_context_t (hb_face_t       *face,\n-                                 hb_tag_t         table_tag,\n-                                 hb_set_t        *feature_indexes_)\n+  hb_collect_features_context_t (hb_face_t *face,\n+                                 hb_tag_t   table_tag,\n+                                 hb_set_t  *feature_indexes_)\n@@ -685,1 +969,1 @@\n-      script_count(0),langsys_count(0) {}\n+      script_count (0),langsys_count (0), feature_index_count (0) {}\n@@ -714,0 +998,6 @@\n+  bool visited_feature_indices (unsigned count)\n+  {\n+    feature_index_count += count;\n+    return feature_index_count > HB_MAX_FEATURE_INDICES;\n+  }\n+\n@@ -735,0 +1025,1 @@\n+  unsigned int feature_index_count;\n@@ -747,1 +1038,1 @@\n-    if (l.has_required_feature ())\n+    if (l.has_required_feature () && !c->visited_feature_indices (1))\n@@ -750,1 +1041,2 @@\n-    l.add_feature_indexes_to (c->feature_indexes);\n+    if (!c->visited_feature_indices (l.featureIndex.len))\n+      l.add_feature_indexes_to (c->feature_indexes);\n@@ -808,0 +1100,1 @@\n+\n@@ -810,0 +1103,12 @@\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @scripts: The array of scripts to collect features for\n+ * @languages: The array of languages to collect features for\n+ * @features: The array of features to collect\n+ * @feature_indexes: (out): The array of feature indexes found for the query\n+ *\n+ * Fetches a list of all feature indexes in the specified face's GSUB table\n+ * or GPOS table, underneath the specified scripts, languages, and features.\n+ * If no list of scripts is provided, all scripts will be queried. If no list\n+ * of languages is provided, all languages will be queried. If no list of\n+ * features is provided, all features will be queried.\n@@ -846,0 +1151,1 @@\n+\n@@ -848,0 +1154,12 @@\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @scripts: The array of scripts to collect lookups for\n+ * @languages: The array of languages to collect lookups for\n+ * @features: The array of features to collect lookups for\n+ * @lookup_indexes: (out): The array of lookup indexes found for the query\n+ *\n+ * Fetches a list of all feature-lookup indexes in the specified face's GSUB\n+ * table or GPOS table, underneath the specified scripts, languages, and\n+ * features. If no list of scripts is provided, all scripts will be queried.\n+ * If no list of languages is provided, all languages will be queried. If no\n+ * list of features is provided, all features will be queried.\n@@ -867,0 +1185,2 @@\n+\n+  g.feature_variation_collect_lookups (&feature_indexes, lookup_indexes);\n@@ -869,0 +1189,2 @@\n+\n+#ifndef HB_NO_LAYOUT_COLLECT_GLYPHS\n@@ -871,0 +1193,10 @@\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @lookup_index: The index of the feature lookup to query\n+ * @glyphs_before: (out): Array of glyphs preceding the substitution range\n+ * @glyphs_input: (out): Array of input glyphs that would be substituted by the lookup\n+ * @glyphs_after: (out): Array of glyphs following the substitution range\n+ * @glyphs_output: (out): Array of glyphs that would be the substitued output of the lookup\n+ *\n+ * Fetches a list of all glyphs affected by the specified lookup in the\n+ * specified face's GSUB table or GPOS table.\n@@ -905,0 +1237,1 @@\n+#endif\n@@ -909,0 +1242,13 @@\n+\n+\/**\n+ * hb_ot_layout_table_find_feature_variations:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @coords: The variation coordinates to query\n+ * @num_coords: The number of variation coorinates\n+ * @variations_index: (out): The array of feature variations found for the query\n+ *\n+ * Fetches a list of feature variations in the specified face's GSUB table\n+ * or GPOS table, at the specified variation coordinates.\n+ *\n+ **\/\n@@ -921,0 +1267,17 @@\n+\n+\/**\n+ * hb_ot_layout_feature_with_variations_get_lookups:\n+ * @face: #hb_face_t to work upon\n+ * @table_tag: HB_OT_TAG_GSUB or HB_OT_TAG_GPOS\n+ * @feature_index: The index of the feature to query\n+ * @variations_index: The index of the feature variation to query\n+ * @start_offset: offset of the first lookup to retrieve\n+ * @lookup_count: (inout) (allow-none): Input = the maximum number of lookups to return;\n+ *                Output = the actual number of lookups returned (may be zero)\n+ * @lookup_indexes: (out) (array length=lookup_count): The array of lookups found for the query\n+ *\n+ * Fetches a list of all lookups enumerated for the specified feature, in\n+ * the specified face's GSUB table or GPOS table, enabled at the specified\n+ * variations index. The list returned will begin at the offset provided.\n+ *\n+ **\/\n@@ -943,0 +1306,10 @@\n+\n+\/**\n+ * hb_ot_layout_has_substitution:\n+ * @face: #hb_face_t to work upon\n+ *\n+ * Tests whether the specified face includes any GSUB substitutions.\n+ *\n+ * Return value: true if data found, false otherwise\n+ *\n+ **\/\n@@ -949,0 +1322,1 @@\n+\n@@ -951,0 +1325,10 @@\n+ * @face: #hb_face_t to work upon\n+ * @lookup_index: The index of the lookup to query\n+ * @glyphs: The sequence of glyphs to query for substitution\n+ * @glyphs_length: The length of the glyph sequence\n+ * @zero_context: #hb_bool_t indicating whether substitutions should be context-free\n+ *\n+ * Tests whether a specified lookup in the specified face would\n+ * trigger a substitution on the given glyph sequence.\n+ *\n+ * Return value: true if a substitution would be triggered, false otherwise\n@@ -960,13 +1344,0 @@\n-{\n-  return hb_ot_layout_lookup_would_substitute_fast (face,\n-                                                    lookup_index,\n-                                                    glyphs, glyphs_length,\n-                                                    zero_context);\n-}\n-\n-bool\n-hb_ot_layout_lookup_would_substitute_fast (hb_face_t            *face,\n-                                           unsigned int          lookup_index,\n-                                           const hb_codepoint_t *glyphs,\n-                                           unsigned int          glyphs_length,\n-                                           bool                  zero_context)\n@@ -978,1 +1349,0 @@\n-\n@@ -982,0 +1352,10 @@\n+\n+\/**\n+ * hb_ot_layout_substitute_start:\n+ * @font: #hb_font_t to use\n+ * @buffer: #hb_buffer_t buffer to work upon\n+ *\n+ * Called before substitution lookups are performed, to ensure that glyph\n+ * class and other properties are set on the glyphs in the buffer.\n+ *\n+ **\/\n@@ -986,1 +1366,1 @@\n-_hb_ot_layout_set_glyph_props (font, buffer);\n+  _hb_ot_layout_set_glyph_props (font, buffer);\n@@ -1041,0 +1421,6 @@\n+ * @face: #hb_face_t to work upon\n+ * @lookup_index: index of the feature lookup to query\n+ * @glyphs: (out): Array of glyphs comprising the transitive closure of the lookup\n+ *\n+ * Compute the transitive closure of glyphs needed for a\n+ * specified lookup.\n@@ -1047,1 +1433,1 @@\n-                                        hb_set_t     *glyphs)\n+                                        hb_set_t     *glyphs \/* OUT *\/)\n@@ -1059,0 +1445,3 @@\n+ * @face: #hb_face_t to work upon\n+ * @lookups: The set of lookups to query\n+ * @glyphs: (out): Array of glyphs comprising the transitive closure of the lookups\n@@ -1068,1 +1457,1 @@\n-                                         hb_set_t       *glyphs)\n+                                         hb_set_t       *glyphs \/* OUT *\/)\n@@ -1079,1 +1468,1 @@\n-    if (lookups != nullptr)\n+    if (lookups)\n@@ -1097,0 +1486,8 @@\n+\n+\/**\n+ * hb_ot_layout_has_positioning:\n+ * @face: #hb_face_t to work upon\n+ *\n+ * Return value: true if the face has GPOS data, false otherwise\n+ *\n+ **\/\n@@ -1103,0 +1500,9 @@\n+\/**\n+ * hb_ot_layout_position_start:\n+ * @font: #hb_font_t to use\n+ * @buffer: #hb_buffer_t buffer to work upon\n+ *\n+ * Called before positioning lookups are performed, to ensure that glyph\n+ * attachment types and glyph-attachment chains are set for the glyphs in the buffer.\n+ *\n+ **\/\n@@ -1109,0 +1515,9 @@\n+\n+\/**\n+ * hb_ot_layout_position_finish_advances:\n+ * @font: #hb_font_t to use\n+ * @buffer: #hb_buffer_t buffer to work upon\n+ *\n+ * Called after positioning lookups are performed, to finish glyph advances.\n+ *\n+ **\/\n@@ -1115,0 +1530,8 @@\n+\/**\n+ * hb_ot_layout_position_finish_offsets:\n+ * @font: #hb_font_t to use\n+ * @buffer: #hb_buffer_t buffer to work upon\n+ *\n+ * Called after positioning lookups are performed, to finish glyph offsets.\n+ *\n+ **\/\n@@ -1121,0 +1544,2 @@\n+\n+#ifndef HB_NO_LAYOUT_FEATURE_PARAMS\n@@ -1123,0 +1548,17 @@\n+ * @face: #hb_face_t to work upon\n+ * @design_size: (out): The design size of the face\n+ * @subfamily_id: (out): The identifier of the face within the font subfamily\n+ * @subfamily_name_id: (out): The ‘name’ table name ID of the face within the font subfamily\n+ * @range_start: (out): The minimum size of the recommended size range for the face\n+ * @range_end: (out): The maximum size of the recommended size range for the face\n+ *\n+ * Fetches optical-size feature data (i.e., the `size` feature from GPOS). Note that\n+ * the subfamily_id and the subfamily name string (accessible via the subfamily_name_id)\n+ * as used here are defined as pertaining only to fonts within a font family that differ\n+ * specifically in their respective size ranges; other ways to differentiate fonts within\n+ * a subfamily are not covered by the `size` feature.\n+ *\n+ * For more information on this distinction, see the [`size` feature documentation](\n+ * https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/features_pt#tag-size).\n+ *\n+ * Return value: true if data found, false otherwise\n@@ -1166,1 +1608,0 @@\n-\n@@ -1241,1 +1682,0 @@\n-\n@@ -1247,12 +1687,9 @@\n- * @start_offset: In case the resulting char_count was equal to its input value, there\n- *                is a chance there were more characters on the tag so this API can be\n- *                called with an offset till resulting char_count gets to a number\n- *                lower than input buffer (or consider using just a bigger buffer for\n- *                one shot copying).\n- * @char_count: (inout) (allow-none): The count of characters for which this feature\n- *              provides glyph variants. (May be zero.)\n- * @characters: (out caller-allocates) (array length=char_count): A buffer pointer. The Unicode codepoints\n- *              of the characters for which this feature provides glyph variants.\n- *\n- * Fetches characters listed by designer under feature parameters for \"Character\n- * Variant\" (\"cvXX\") features.\n+ * @start_offset: offset of the first character to retrieve\n+ * @char_count: (inout) (allow-none): Input = the maximum number of characters to return;\n+ *              Output = the actual number of characters returned (may be zero)\n+ * @characters: (out caller-allocates) (array length=char_count): A buffer pointer.\n+ *              The Unicode codepoints of the characters for which this feature provides\n+ *               glyph variants.\n+ *\n+ * Fetches a list of the characters defined as having a variant under the specified\n+ * \"Character Variant\" (\"cvXX\") feature tag.\n@@ -1273,18 +1710,4 @@\n-\n-  hb_tag_t feature_tag = g.get_feature_tag (feature_index);\n-  const OT::Feature &f = g.get_feature (feature_index);\n-\n-  const OT::FeatureParams &feature_params = f.get_feature_params ();\n-\n-  const OT::FeatureParamsCharacterVariants& cv_params =\n-    feature_params.get_character_variants_params(feature_tag);\n-\n-  unsigned int len = 0;\n-  if (char_count && characters && start_offset < cv_params.characters.len)\n-  {\n-    len = MIN (cv_params.characters.len - start_offset, *char_count);\n-    for (unsigned int i = 0; i < len; ++i)\n-      characters[i] = cv_params.characters[start_offset + i];\n-  }\n-  if (char_count) *char_count = len;\n-  return cv_params.characters.len;\n+  return g.get_feature (feature_index)\n+          .get_feature_params ()\n+          .get_character_variants_params(g.get_feature_tag (feature_index))\n+          .get_characters (start_offset, char_count, characters);\n@@ -1292,0 +1715,1 @@\n+#endif\n@@ -1458,0 +1882,1 @@\n+  if (!buffer->message (font, \"start table GSUB\")) return;\n@@ -1459,0 +1884,1 @@\n+  (void)buffer->message (font, \"end table GSUB\");\n@@ -1464,0 +1890,1 @@\n+  if (!buffer->message (font, \"start table GPOS\")) return;\n@@ -1465,0 +1892,1 @@\n+  (void)buffer->message (font, \"end table GPOS\");\n@@ -1475,6 +1903,16 @@\n-#if 0\n-static const OT::BASE& _get_base (hb_face_t *face)\n-{\n-  return *face->table.BASE;\n-}\n-\n+#ifndef HB_NO_BASE\n+\/**\n+ * hb_ot_layout_get_baseline:\n+ * @font: a font\n+ * @baseline_tag: a baseline tag\n+ * @direction: text direction.\n+ * @script_tag:  script tag.\n+ * @language_tag: language tag.\n+ * @coord: (out): baseline value if found.\n+ *\n+ * Fetches a baseline value from the face.\n+ *\n+ * Return value: if found baseline value in the font.\n+ *\n+ * Since: 2.6.0\n+ **\/\n@@ -1482,6 +1920,6 @@\n-hb_ot_layout_get_baseline (hb_font_t               *font,\n-                           hb_ot_layout_baseline_t  baseline,\n-                           hb_direction_t           direction,\n-                           hb_tag_t                 script_tag,\n-                           hb_tag_t                 language_tag,\n-                           hb_position_t           *coord        \/* OUT.  May be NULL. *\/)\n+hb_ot_layout_get_baseline (hb_font_t                   *font,\n+                           hb_ot_layout_baseline_tag_t  baseline_tag,\n+                           hb_direction_t               direction,\n+                           hb_tag_t                     script_tag,\n+                           hb_tag_t                     language_tag,\n+                           hb_position_t               *coord        \/* OUT.  May be NULL. *\/)\n@@ -1489,3 +1927,1 @@\n-  const OT::BASE &base = _get_base (font->face);\n-  bool result = base.get_baseline (font, baseline, direction, script_tag,\n-                                   language_tag, coord);\n+  bool result = font->face->table.BASE->get_baseline (font, baseline_tag, direction, script_tag, language_tag, coord);\n@@ -1493,4 +1929,2 @@\n-  \/* TODO: Simulate https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/baselinetags#ideographic-em-box *\/\n-  if (!result && coord) *coord = 0;\n-\n-  if (coord) *coord = font->em_scale_dir (*coord, direction);\n+  if (result && coord)\n+    *coord = HB_DIRECTION_IS_HORIZONTAL (direction) ? font->em_scale_y (*coord) : font->em_scale_x (*coord);\n@@ -1500,0 +1934,1 @@\n+#endif\n@@ -1501,4 +1936,24 @@\n-\/* To be moved to public header *\/\n-\/*\n- * BASE\n- *\/\n+\n+struct hb_get_glyph_alternates_dispatch_t :\n+       hb_dispatch_context_t<hb_get_glyph_alternates_dispatch_t, unsigned>\n+{\n+  static return_t default_return_value () { return 0; }\n+  bool stop_sublookup_iteration (return_t r) const { return r; }\n+\n+  hb_face_t *face;\n+\n+  hb_get_glyph_alternates_dispatch_t (hb_face_t *face) :\n+                                        face (face) {}\n+\n+  private:\n+  template <typename T, typename ...Ts> auto\n+  _dispatch (const T &obj, hb_priority<1>, Ts&&... ds) HB_AUTO_RETURN\n+  ( obj.get_glyph_alternates (hb_forward<Ts> (ds)...) )\n+  template <typename T, typename ...Ts> auto\n+  _dispatch (const T &obj, hb_priority<0>, Ts&&... ds) HB_AUTO_RETURN\n+  ( default_return_value () )\n+  public:\n+  template <typename T, typename ...Ts> auto\n+  dispatch (const T &obj, Ts&&... ds) HB_AUTO_RETURN\n+  ( _dispatch (obj, hb_prioritize, hb_forward<Ts> (ds)...) )\n+};\n@@ -1507,1 +1962,9 @@\n- * hb_ot_layout_baseline_t:\n+ * hb_ot_layout_lookup_get_glyph_alternates:\n+ * @face: a face.\n+ * @lookup_index: index of the feature lookup to query.\n+ * @glyph: a glyph id.\n+ * @start_offset: starting offset.\n+ * @alternate_count: (inout) (allow-none): Input = the maximum number of alternate glyphs to return;\n+ *                   Output = the actual number of alternate glyphs returned (may be zero).\n+ * @alternate_glyphs: (out caller-allocates) (array length=alternate_count): A glyphs buffer.\n+ *                    Alternate glyphs associated with the glyph id.\n@@ -1509,1 +1972,1 @@\n- * https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/baselinetags\n+ * Fetches alternates of a glyph from a given GSUB lookup index.\n@@ -1511,19 +1974,18 @@\n- * Since: DONTREPLACEME\n- *\/\n-typedef enum {\n-  HB_OT_LAYOUT_BASELINE_HANG = HB_TAG('h','a','n','g'),\n-  HB_OT_LAYOUT_BASELINE_ICFB = HB_TAG('i','c','f','b'),\n-  HB_OT_LAYOUT_BASELINE_ICFT = HB_TAG('i','c','f','t'),\n-  HB_OT_LAYOUT_BASELINE_IDEO = HB_TAG('i','d','e','o'),\n-  HB_OT_LAYOUT_BASELINE_IDTB = HB_TAG('i','d','t','b'),\n-  HB_OT_LAYOUT_BASELINE_MATH = HB_TAG('m','a','t','h'),\n-  HB_OT_LAYOUT_BASELINE_ROMN = HB_TAG('r','o','m','n')\n-} hb_ot_layout_baseline_t;\n-\n-HB_EXTERN hb_bool_t\n-hb_ot_layout_get_baseline (hb_font_t               *font,\n-                           hb_ot_layout_baseline_t  baseline,\n-                           hb_direction_t           direction,\n-                           hb_tag_t                 script_tag,\n-                           hb_tag_t                 language_tag,\n-                           hb_position_t           *coord        \/* OUT.  May be NULL. *\/);\n+ * Return value: total number of alternates found in the specific lookup index for the given glyph id.\n+ *\n+ * Since: 2.6.8\n+ **\/\n+HB_EXTERN unsigned\n+hb_ot_layout_lookup_get_glyph_alternates (hb_face_t      *face,\n+                                          unsigned        lookup_index,\n+                                          hb_codepoint_t  glyph,\n+                                          unsigned        start_offset,\n+                                          unsigned       *alternate_count  \/* IN\/OUT.  May be NULL. *\/,\n+                                          hb_codepoint_t *alternate_glyphs \/* OUT.     May be NULL. *\/)\n+{\n+  hb_get_glyph_alternates_dispatch_t c (face);\n+  const OT::SubstLookup &lookup = face->table.GSUB->table->get_lookup (lookup_index);\n+  auto ret = lookup.dispatch (&c, glyph, start_offset, alternate_count, alternate_glyphs);\n+  if (!ret && alternate_count) *alternate_count = 0;\n+  return ret;\n+}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout.cc","additions":645,"deletions":183,"binary":false,"changes":828,"status":"modified"},{"patch":"@@ -96,0 +96,11 @@\n+\/**\n+ * hb_ot_layout_glyph_class_t:\n+ * @HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED: Glyphs not matching the other classifications\n+ * @HB_OT_LAYOUT_GLYPH_CLASS_BASE_GLYPH: Spacing, single characters, capable of accepting marks\n+ * @HB_OT_LAYOUT_GLYPH_CLASS_LIGATURE: Glyphs that represent ligation of multiple characters\n+ * @HB_OT_LAYOUT_GLYPH_CLASS_MARK: Non-spacing, combining glyphs that represent marks\n+ * @HB_OT_LAYOUT_GLYPH_CLASS_COMPONENT: Spacing glyphs that represent part of a single character\n+ *\n+ * The GDEF classes defined for glyphs.\n+ *\n+ **\/\n@@ -113,1 +124,0 @@\n-\n@@ -153,1 +163,1 @@\n-                                unsigned int *script_index);\n+                                unsigned int *script_index \/* OUT *\/);\n@@ -191,1 +201,1 @@\n-                                                  unsigned int *feature_index);\n+                                                  unsigned int *feature_index \/* OUT *\/);\n@@ -198,2 +208,2 @@\n-                                            unsigned int *feature_index,\n-                                            hb_tag_t     *feature_tag);\n+                                            unsigned int *feature_index \/* OUT *\/,\n+                                            hb_tag_t     *feature_tag \/* OUT *\/);\n@@ -225,1 +235,1 @@\n-                                    unsigned int *feature_index);\n+                                    unsigned int *feature_index \/* OUT *\/);\n@@ -316,0 +326,8 @@\n+HB_EXTERN unsigned\n+hb_ot_layout_lookup_get_glyph_alternates (hb_face_t      *face,\n+                                          unsigned        lookup_index,\n+                                          hb_codepoint_t  glyph,\n+                                          unsigned        start_offset,\n+                                          unsigned       *alternate_count \/* IN\/OUT *\/,\n+                                          hb_codepoint_t *alternate_glyphs \/* OUT *\/);\n+\n@@ -394,0 +412,48 @@\n+\/*\n+ * BASE\n+ *\/\n+\n+\/**\n+ * hb_ot_layout_baseline_tag_t:\n+ * @HB_OT_LAYOUT_BASELINE_TAG_ROMAN: The baseline used by alphabetic scripts such as Latin, Cyrillic and Greek.\n+ * In vertical writing mode, the alphabetic baseline for characters rotated 90 degrees clockwise.\n+ * (This would not apply to alphabetic characters that remain upright in vertical writing mode, since these\n+ * characters are not rotated.)\n+ * @HB_OT_LAYOUT_BASELINE_TAG_HANGING: The hanging baseline. In horizontal direction, this is the horizontal\n+ * line from which syllables seem, to hang in Tibetan and other similar scripts. In vertical writing mode,\n+ * for Tibetan (or some other similar script) characters rotated 90 degrees clockwise.\n+ * @HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_BOTTOM_OR_LEFT: Ideographic character face bottom or left edge,\n+ * if the direction is horizontal or vertical, respectively.\n+ * @HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_TOP_OR_RIGHT: Ideographic character face top or right edge,\n+ * if the direction is horizontal or vertical, respectively.\n+ * @HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_BOTTOM_OR_LEFT: Ideographic em-box bottom or left edge,\n+ * if the direction is horizontal or vertical, respectively.\n+ * @HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_TOP_OR_RIGHT: Ideographic em-box top or right edge baseline,\n+ * if the direction is horizontal or vertical, respectively.\n+ * @HB_OT_LAYOUT_BASELINE_TAG_MATH: The baseline about which mathematical characters are centered.\n+ * In vertical writing mode when mathematical characters rotated 90 degrees clockwise, are centered.\n+ *\n+ * Baseline tags from https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/baselinetags\n+ *\n+ * Since: 2.6.0\n+ *\/\n+typedef enum {\n+  HB_OT_LAYOUT_BASELINE_TAG_ROMAN                       = HB_TAG ('r','o','m','n'),\n+  HB_OT_LAYOUT_BASELINE_TAG_HANGING                     = HB_TAG ('h','a','n','g'),\n+  HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_BOTTOM_OR_LEFT    = HB_TAG ('i','c','f','b'),\n+  HB_OT_LAYOUT_BASELINE_TAG_IDEO_FACE_TOP_OR_RIGHT      = HB_TAG ('i','c','f','t'),\n+  HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_BOTTOM_OR_LEFT   = HB_TAG ('i','d','e','o'),\n+  HB_OT_LAYOUT_BASELINE_TAG_IDEO_EMBOX_TOP_OR_RIGHT     = HB_TAG ('i','d','t','p'),\n+  HB_OT_LAYOUT_BASELINE_TAG_MATH                        = HB_TAG ('m','a','t','h'),\n+\n+  _HB_OT_LAYOUT_BASELINE_TAG_MAX_VALUE = HB_TAG_MAX_SIGNED \/*< skip >*\/\n+} hb_ot_layout_baseline_tag_t;\n+\n+HB_EXTERN hb_bool_t\n+hb_ot_layout_get_baseline (hb_font_t                   *font,\n+                           hb_ot_layout_baseline_tag_t  baseline_tag,\n+                           hb_direction_t               direction,\n+                           hb_tag_t                     script_tag,\n+                           hb_tag_t                     language_tag,\n+                           hb_position_t               *coord        \/* OUT.  May be NULL. *\/);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout.h","additions":72,"deletions":6,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -99,7 +99,0 @@\n-HB_INTERNAL bool\n-hb_ot_layout_lookup_would_substitute_fast (hb_face_t            *face,\n-                                           unsigned int          lookup_index,\n-                                           const hb_codepoint_t *glyphs,\n-                                           unsigned int          glyphs_length,\n-                                           bool                  zero_context);\n-\n@@ -178,0 +171,11 @@\n+static inline void\n+_hb_clear_syllables (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                     hb_font_t *font HB_UNUSED,\n+                     hb_buffer_t *buffer)\n+{\n+  hb_glyph_info_t *info = buffer->info;\n+  unsigned int count = buffer->len;\n+  for (unsigned int i = 0; i < count; i++)\n+    info[i].syllable() = 0;\n+}\n+\n@@ -218,1 +222,1 @@\n-  if (u >= 0x80)\n+  if (u >= 0x80u)\n@@ -235,1 +239,1 @@\n-      else if (unlikely (hb_in_range (u, 0x180Bu, 0x180Du))) props |= UPROPS_MASK_HIDDEN;\n+      else if (unlikely (hb_in_range<hb_codepoint_t> (u, 0x180Bu, 0x180Du))) props |= UPROPS_MASK_HIDDEN;\n@@ -238,1 +242,1 @@\n-      else if (unlikely (hb_in_range (u, 0xE0020u, 0xE007Fu))) props |= UPROPS_MASK_HIDDEN;\n+      else if (unlikely (hb_in_range<hb_codepoint_t> (u, 0xE0020u, 0xE007Fu))) props |= UPROPS_MASK_HIDDEN;\n@@ -561,0 +565,11 @@\n+static inline void\n+_hb_clear_substitution_flags (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                              hb_font_t *font HB_UNUSED,\n+                              hb_buffer_t *buffer)\n+{\n+  hb_glyph_info_t *info = buffer->info;\n+  unsigned int count = buffer->len;\n+  for (unsigned int i = 0; i < count; i++)\n+    _hb_glyph_info_clear_substituted (&info[i]);\n+}\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-layout.hh","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -37,1 +41,1 @@\n-    hb_set_add (lookups_out, lookups[table_index][i].index);\n+    lookups_out->add (lookups[table_index][i].index);\n@@ -190,2 +194,3 @@\n-          feature_infos[j].flags &= ~F_GLOBAL;\n-          feature_infos[j].max_value = MAX (feature_infos[j].max_value, feature_infos[i].max_value);\n+          if (feature_infos[j].flags & F_GLOBAL)\n+            feature_infos[j].flags ^= F_GLOBAL;\n+          feature_infos[j].max_value = hb_max (feature_infos[j].max_value, feature_infos[i].max_value);\n@@ -195,2 +200,2 @@\n-        feature_infos[j].stage[0] = MIN (feature_infos[j].stage[0], feature_infos[i].stage[0]);\n-        feature_infos[j].stage[1] = MIN (feature_infos[j].stage[1], feature_infos[i].stage[1]);\n+        feature_infos[j].stage[0] = hb_min (feature_infos[j].stage[0], feature_infos[i].stage[0]);\n+        feature_infos[j].stage[1] = hb_min (feature_infos[j].stage[1], feature_infos[i].stage[1]);\n@@ -216,1 +221,1 @@\n-      bits_needed = MIN(HB_OT_MAP_MAX_BITS, hb_bit_storage (info->max_value));\n+      bits_needed = hb_min (HB_OT_MAP_MAX_BITS, hb_bit_storage (info->max_value));\n@@ -222,1 +227,1 @@\n-    hb_bool_t found = false;\n+    bool found = false;\n@@ -229,6 +234,6 @@\n-      found |= hb_ot_layout_language_find_feature (face,\n-                                                   table_tags[table_index],\n-                                                   script_index[table_index],\n-                                                   language_index[table_index],\n-                                                   info->tag,\n-                                                   &feature_index[table_index]);\n+      found |= (bool) hb_ot_layout_language_find_feature (face,\n+                                                          table_tags[table_index],\n+                                                          script_index[table_index],\n+                                                          language_index[table_index],\n+                                                          info->tag,\n+                                                          &feature_index[table_index]);\n@@ -240,4 +245,4 @@\n-        found |= hb_ot_layout_table_find_feature (face,\n-                                                  table_tags[table_index],\n-                                                  info->tag,\n-                                                  &feature_index[table_index]);\n+        found |= (bool) hb_ot_layout_table_find_feature (face,\n+                                                         table_tags[table_index],\n+                                                         info->tag,\n+                                                         &feature_index[table_index]);\n@@ -335,0 +340,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-map.cc","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    static int cmp (const void *pa, const void *pb)\n+    HB_INTERNAL static int cmp (const void *pa, const void *pb)\n@@ -137,1 +137,1 @@\n-    return map ? map->stage[table_index] : (unsigned int) -1;\n+    return map ? map->stage[table_index] : UINT_MAX;\n@@ -143,1 +143,1 @@\n-    if (unlikely (stage == (unsigned int) -1)) {\n+    if (unlikely (stage == UINT_MAX)) {\n@@ -157,2 +157,2 @@\n-  HB_INTERNAL inline void apply (const Proxy &proxy,\n-                                 const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const;\n+  HB_INTERNAL void apply (const Proxy &proxy,\n+                          const struct hb_ot_shape_plan_t *plan, hb_font_t *font, hb_buffer_t *buffer) const;\n@@ -170,1 +170,1 @@\n-  hb_vector_t<feature_map_t> features;\n+  hb_sorted_vector_t<feature_map_t> features;\n@@ -216,2 +216,2 @@\n-                              hb_ot_map_feature_flags_t flags=F_NONE,\n-                              unsigned int value=1)\n+                       hb_ot_map_feature_flags_t flags=F_NONE,\n+                       unsigned int value=1)\n@@ -250,1 +250,1 @@\n-    static int cmp (const void *pa, const void *pb)\n+    HB_INTERNAL static int cmp (const void *pa, const void *pb)\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-map.hh","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  HBINT16                       value;          \/* The X or Y value in design units *\/\n+  HBINT16               value;          \/* The X or Y value in design units *\/\n@@ -81,1 +81,1 @@\n-                                  hb_font_t *font) const\n+                           hb_font_t *font) const\n@@ -282,8 +282,9 @@\n-                mathValueRecordsZ;      \/* Array of correction heights at\n-                                         * which the kern value changes.\n-                                         * Sorted by the height value in\n-                                         * design units (heightCount entries),\n-                                         * Followed by:\n-                                         * Array of kern values corresponding\n-                                         * to heights. (heightCount+1 entries).\n-                                         *\/\n+                mathValueRecordsZ;\n+                                \/* Array of correction heights at\n+                                 * which the kern value changes.\n+                                 * Sorted by the height value in\n+                                 * design units (heightCount entries),\n+                                 * Followed by:\n+                                 * Array of kern values corresponding\n+                                 * to heights. (heightCount+1 entries).\n+                                 *\/\n@@ -348,9 +349,12 @@\n-  OffsetTo<Coverage>            mathKernCoverage;    \/* Offset to Coverage table -\n-                                                      * from the beginning of the\n-                                                      * MathKernInfo table. *\/\n-  ArrayOf<MathKernInfoRecord>   mathKernInfoRecords; \/* Array of\n-                                                      * MathKernInfoRecords,\n-                                                      * per-glyph information for\n-                                                      * mathematical positioning\n-                                                      * of subscripts and\n-                                                      * superscripts. *\/\n+  OffsetTo<Coverage>\n+                mathKernCoverage;\n+                                \/* Offset to Coverage table -\n+                                 * from the beginning of the\n+                                 * MathKernInfo table. *\/\n+  ArrayOf<MathKernInfoRecord>\n+                mathKernInfoRecords;\n+                                \/* Array of MathKernInfoRecords,\n+                                 * per-glyph information for\n+                                 * mathematical positioning\n+                                 * of subscripts and\n+                                 * superscripts. *\/\n@@ -426,1 +430,1 @@\n-  GlyphID variantGlyph;       \/* Glyph ID for the variant. *\/\n+  HBGlyphID variantGlyph;       \/* Glyph ID for the variant. *\/\n@@ -456,1 +460,1 @@\n-                int scale,\n+                int64_t mult,\n@@ -461,3 +465,3 @@\n-    out.start_connector_length  = font->em_scale (startConnectorLength, scale);\n-    out.end_connector_length    = font->em_scale (endConnectorLength, scale);\n-    out.full_advance            = font->em_scale (fullAdvance, scale);\n+    out.start_connector_length  = font->em_mult (startConnectorLength, mult);\n+    out.end_connector_length    = font->em_mult (endConnectorLength, mult);\n+    out.full_advance            = font->em_mult (fullAdvance, mult);\n@@ -465,1 +469,1 @@\n-    static_assert ((unsigned int) HB_MATH_GLYPH_PART_FLAG_EXTENDER ==\n+    static_assert ((unsigned int) HB_OT_MATH_GLYPH_PART_FLAG_EXTENDER ==\n@@ -474,13 +478,15 @@\n-  GlyphID   glyph;                \/* Glyph ID for the part. *\/\n-  HBUINT16    startConnectorLength; \/* Advance width\/ height of the straight bar\n-                                   * connector material, in design units, is at\n-                                   * the beginning of the glyph, in the\n-                                   * direction of the extension. *\/\n-  HBUINT16    endConnectorLength;   \/* Advance width\/ height of the straight bar\n-                                   * connector material, in design units, is at\n-                                   * the end of the glyph, in the direction of\n-                                   * the extension. *\/\n-  HBUINT16    fullAdvance;        \/* Full advance width\/height for this part,\n-                                   * in the direction of the extension.\n-                                   * In design units. *\/\n-  PartFlags partFlags;            \/* Part qualifiers. *\/\n+  HBGlyphID     glyph;          \/* Glyph ID for the part. *\/\n+  HBUINT16      startConnectorLength;\n+                                \/* Advance width\/ height of the straight bar\n+                                 * connector material, in design units, is at\n+                                 * the beginning of the glyph, in the\n+                                 * direction of the extension. *\/\n+  HBUINT16      endConnectorLength;\n+                                \/* Advance width\/ height of the straight bar\n+                                 * connector material, in design units, is at\n+                                 * the end of the glyph, in the direction of\n+                                 * the extension. *\/\n+  HBUINT16      fullAdvance;    \/* Full advance width\/height for this part,\n+                                 * in the direction of the extension.\n+                                 * In design units. *\/\n+  PartFlags     partFlags;      \/* Part qualifiers. *\/\n@@ -511,5 +517,4 @@\n-      int scale = font->dir_scale (direction);\n-      hb_array_t<const MathGlyphPartRecord> arr = partRecords.sub_array (start_offset, parts_count);\n-      unsigned int count = arr.length;\n-      for (unsigned int i = 0; i < count; i++)\n-        arr[i].extract (parts[i], scale, font);\n+      int64_t mult = font->dir_mult (direction);\n+      for (auto _ : hb_zip (partRecords.sub_array (start_offset, parts_count),\n+                            hb_array (parts, *parts_count)))\n+        _.first.extract (_.second, mult, font);\n@@ -525,6 +530,9 @@\n-  MathValueRecord          italicsCorrection; \/* Italics correction of this\n-                                               * MathGlyphAssembly. Should not\n-                                               * depend on the assembly size. *\/\n-  ArrayOf<MathGlyphPartRecord> partRecords;   \/* Array of part records, from\n-                                               * left to right and bottom to\n-                                               * top. *\/\n+  MathValueRecord\n+                italicsCorrection;\n+                                \/* Italics correction of this\n+                                 * MathGlyphAssembly. Should not\n+                                 * depend on the assembly size. *\/\n+  ArrayOf<MathGlyphPartRecord>\n+                partRecords;    \/* Array of part records, from\n+                                 * left to right and bottom to\n+                                 * top. *\/\n@@ -556,8 +564,4 @@\n-      int scale = font->dir_scale (direction);\n-      hb_array_t<const MathGlyphVariantRecord> arr = mathGlyphVariantRecord.sub_array (start_offset, variants_count);\n-      unsigned int count = arr.length;\n-      for (unsigned int i = 0; i < count; i++)\n-      {\n-        variants[i].glyph = arr[i].variantGlyph;\n-        variants[i].advance = font->em_scale (arr[i].advanceMeasurement, scale);\n-      }\n+      int64_t mult = font->dir_mult (direction);\n+      for (auto _ : hb_zip (mathGlyphVariantRecord.sub_array (start_offset, variants_count),\n+                            hb_array (variants, *variants_count)))\n+        _.second = {_.first.variantGlyph, font->em_mult (_.first.advanceMeasurement, mult)};\n@@ -615,6 +619,6 @@\n-                                       hb_direction_t direction,\n-                                       hb_font_t *font,\n-                                       unsigned int start_offset,\n-                                       unsigned int *parts_count, \/* IN\/OUT *\/\n-                                       hb_ot_math_glyph_part_t *parts \/* OUT *\/,\n-                                       hb_position_t *italics_correction \/* OUT *\/) const\n+                                hb_direction_t direction,\n+                                hb_font_t *font,\n+                                unsigned int start_offset,\n+                                unsigned int *parts_count, \/* IN\/OUT *\/\n+                                hb_ot_math_glyph_part_t *parts \/* OUT *\/,\n+                                hb_position_t *italics_correction \/* OUT *\/) const\n@@ -648,15 +652,18 @@\n-  HBUINT16           minConnectorOverlap; \/* Minimum overlap of connecting\n-                                           * glyphs during glyph construction,\n-                                           * in design units. *\/\n-  OffsetTo<Coverage> vertGlyphCoverage;   \/* Offset to Coverage table -\n-                                           * from the beginning of MathVariants\n-                                           * table. *\/\n-  OffsetTo<Coverage> horizGlyphCoverage;  \/* Offset to Coverage table -\n-                                           * from the beginning of MathVariants\n-                                           * table. *\/\n-  HBUINT16           vertGlyphCount;      \/* Number of glyphs for which\n-                                           * information is provided for\n-                                           * vertically growing variants. *\/\n-  HBUINT16           horizGlyphCount;     \/* Number of glyphs for which\n-                                           * information is provided for\n-                                           * horizontally growing variants. *\/\n+  HBUINT16      minConnectorOverlap;\n+                                \/* Minimum overlap of connecting\n+                                 * glyphs during glyph construction,\n+                                 * in design units. *\/\n+  OffsetTo<Coverage> vertGlyphCoverage;\n+                                \/* Offset to Coverage table -\n+                                 * from the beginning of MathVariants\n+                                 * table. *\/\n+  OffsetTo<Coverage> horizGlyphCoverage;\n+                                \/* Offset to Coverage table -\n+                                 * from the beginning of MathVariants\n+                                 * table. *\/\n+  HBUINT16      vertGlyphCount; \/* Number of glyphs for which\n+                                 * information is provided for\n+                                 * vertically growing variants. *\/\n+  HBUINT16      horizGlyphCount;\/* Number of glyphs for which\n+                                 * information is provided for\n+                                 * horizontally growing variants. *\/\n@@ -667,1 +674,1 @@\n-  UnsizedArrayOf<OffsetTo<MathGlyphConstruction> >\n+  UnsizedArrayOf<OffsetTo<MathGlyphConstruction>>\n@@ -697,1 +704,1 @@\n-                                     hb_font_t             *font) const\n+                              hb_font_t            *font) const\n@@ -705,5 +712,8 @@\n-  FixedVersion<>version;                \/* Version of the MATH table\n-                                         * initially set to 0x00010000u *\/\n-  OffsetTo<MathConstants> mathConstants;\/* MathConstants table *\/\n-  OffsetTo<MathGlyphInfo> mathGlyphInfo;\/* MathGlyphInfo table *\/\n-  OffsetTo<MathVariants>  mathVariants; \/* MathVariants table *\/\n+  FixedVersion<>version;        \/* Version of the MATH table\n+                                 * initially set to 0x00010000u *\/\n+  OffsetTo<MathConstants>\n+                mathConstants;  \/* MathConstants table *\/\n+  OffsetTo<MathGlyphInfo>\n+                mathGlyphInfo;  \/* MathGlyphInfo table *\/\n+  OffsetTo<MathVariants>\n+                mathVariants;   \/* MathVariants table *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-math-table.hh","additions":95,"deletions":85,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -27,1 +27,3 @@\n-#include \"hb-open-type.hh\"\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_MATH\n@@ -29,1 +31,0 @@\n-#include \"hb-ot-face.hh\"\n@@ -40,0 +41,5 @@\n+ *\n+ * HarfBuzz itself does not implement a math layout solution. The\n+ * functions and types provided can be used by client programs to access\n+ * the font data necessary for typesetting OpenType Math layout.\n+ *\n@@ -51,2 +57,1 @@\n- * This function allows to verify the presence of an OpenType MATH table on the\n- * face.\n+ * Tests whether a face has a `MATH` table.\n@@ -54,1 +59,1 @@\n- * Return value: true if face has a MATH table, false otherwise\n+ * Return value: true if the table is found, false otherwise\n@@ -66,1 +71,1 @@\n- * @font: #hb_font_t from which to retrieve the value\n+ * @font: #hb_font_t to work upon\n@@ -69,5 +74,7 @@\n- * This function returns the requested math constants as a #hb_position_t.\n- * If the request constant is HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN,\n- * HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN or\n- * HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN then the return value is\n- * actually an integer between 0 and 100 representing that percentage.\n+ * Fetches the specified math constant. For most constants, the value returned\n+ * is an #hb_position_t.\n+ *\n+ * However, if the requested constant is #HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN,\n+ * #HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN or\n+ * #HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN, then the return value is\n+ * an integer between 0 and 100 representing that percentage.\n@@ -75,1 +82,1 @@\n- * Return value: the requested constant or 0\n+ * Return value: the requested constant or zero\n@@ -88,2 +95,2 @@\n- * @font: #hb_font_t from which to retrieve the value\n- * @glyph: glyph index from which to retrieve the value\n+ * @font: #hb_font_t to work upon\n+ * @glyph: The glyph index from which to retrieve the value\n@@ -91,1 +98,4 @@\n- * Return value: the italics correction of the glyph or 0\n+ * Fetches an italics-correction value (if one exists) for the specified\n+ * glyph index.\n+ *\n+  * Return value: the italics correction of the glyph or zero\n@@ -104,2 +114,11 @@\n- * @font: #hb_font_t from which to retrieve the value\n- * @glyph: glyph index from which to retrieve the value\n+ * @font: #hb_font_t to work upon\n+ * @glyph: The glyph index from which to retrieve the value\n+ *\n+ * Fetches a top-accent-attachment value (if one exists) for the specified\n+ * glyph index.\n+ *\n+ * For any glyph that does not have a top-accent-attachment value - that is,\n+ * a glyph not covered by the `MathTopAccentAttachment` table (or, when\n+ * @font has no `MathTopAccentAttachment` table or no `MATH` table, any\n+ * glyph) - the function synthesizes a value, returning the position at\n+ * one-half the glyph's advance width.\n@@ -107,1 +126,2 @@\n- * Return value: the top accent attachment of the glyph or 0\n+ * Return value: the top accent attachment of the glyph or 0.5 * the advance\n+ *               width of @glyph\n@@ -120,2 +140,4 @@\n- * @face: a #hb_face_t to test\n- * @glyph: a glyph index to test\n+ * @face: #hb_face_t to work upon\n+ * @glyph: The glyph index to test\n+ *\n+ * Tests whether the given glyph index is an extended shape in the face.\n@@ -136,3 +158,3 @@\n- * @font: #hb_font_t from which to retrieve the value\n- * @glyph: glyph index from which to retrieve the value\n- * @kern: the #hb_ot_math_kern_t from which to retrieve the value\n+ * @font: #hb_font_t to work upon\n+ * @glyph: The glyph index from which to retrieve the value\n+ * @kern: The #hb_ot_math_kern_t from which to retrieve the value\n@@ -141,5 +163,7 @@\n- * This function tries to retrieve the MathKern table for the specified font,\n- * glyph and #hb_ot_math_kern_t. Then it browses the list of heights from the\n- * MathKern table to find one value that is greater or equal to specified\n- * correction_height. If one is found the corresponding value from the list of\n- * kerns is returned and otherwise the last kern value is returned.\n+ * Fetches the math kerning (cut-ins) value for the specified font, glyph index, and\n+ * @kern.\n+ *\n+ * If the MathKern table is found, the function examines it to find a height\n+ * value that is greater or equal to @correction_height. If such a height\n+ * value is found, corresponding kerning value from the table is returned. If\n+ * no such height value is found, the last kerning value is returned.\n@@ -147,1 +171,1 @@\n- * Return value: requested kerning or 0\n+ * Return value: requested kerning value or zero\n@@ -165,3 +189,3 @@\n- * @font: #hb_font_t from which to retrieve the values\n- * @glyph: index of the glyph to stretch\n- * @direction: direction of the stretching\n+ * @font: #hb_font_t to work upon\n+ * @glyph: The index of the glyph to stretch\n+ * @direction: The direction of the stretching (horizontal or vertical)\n@@ -169,3 +193,3 @@\n- * @variants_count: maximum number of variants to retrieve after start_offset\n- * (IN) and actual number of variants retrieved (OUT)\n- * @variants: array of size at least @variants_count to store the result\n+ * @variants_count: (inout): Input = the maximum number of variants to return;\n+ *                           Output = the actual number of variants returned\n+ * @variants: (out) (array length=variants_count): array of variants returned\n@@ -173,4 +197,3 @@\n- * This function tries to retrieve the MathGlyphConstruction for the specified\n- * font, glyph and direction. Note that only the value of\n- * #HB_DIRECTION_IS_HORIZONTAL is considered. It provides the corresponding list\n- * of size variants as an array of hb_ot_math_glyph_variant_t structs.\n+ * Fetches the MathGlyphConstruction for the specified font, glyph index, and\n+ * direction. The corresponding list of size variants is returned as a list of\n+ * #hb_ot_math_glyph_variant_t structs.\n@@ -178,1 +201,6 @@\n- * Return value: the total number of size variants available or 0\n+ * <note>The @direction parameter is only used to select between horizontal\n+ * or vertical directions for the construction. Even though all #hb_direction_t\n+ * values are accepted, only the result of #HB_DIRECTION_IS_HORIZONTAL is\n+ * considered.<\/note>\n+ *\n+ * Return value: the total number of size variants available or zero\n@@ -198,2 +226,6 @@\n- * @font: #hb_font_t from which to retrieve the value\n- * @direction: direction of the stretching\n+ * @font: #hb_font_t to work upon\n+ * @direction: direction of the stretching (horizontal or vertical)\n+ *\n+ * Fetches the MathVariants table for the specified font and returns the\n+ * minimum overlap of connecting glyphs that are required to draw a glyph\n+ * assembly in the specified direction.\n@@ -201,4 +233,4 @@\n- * This function tries to retrieve the MathVariants table for the specified\n- * font and returns the minimum overlap of connecting glyphs to draw a glyph\n- * assembly in the specified direction. Note that only the value of\n- * #HB_DIRECTION_IS_HORIZONTAL is considered.\n+ * <note>The @direction parameter is only used to select between horizontal\n+ * or vertical directions for the construction. Even though all #hb_direction_t\n+ * values are accepted, only the result of #HB_DIRECTION_IS_HORIZONTAL is\n+ * considered.<\/note>\n@@ -206,1 +238,1 @@\n- * Return value: requested min connector overlap or 0\n+ * Return value: requested minimum connector overlap or zero\n@@ -219,3 +251,3 @@\n- * @font: #hb_font_t from which to retrieve the values\n- * @glyph: index of the glyph to stretch\n- * @direction: direction of the stretching\n+ * @font: #hb_font_t to work upon\n+ * @glyph: The index of the glyph to stretch\n+ * @direction: direction of the stretching (horizontal or vertical)\n@@ -223,4 +255,4 @@\n- * @parts_count: maximum number of glyph parts to retrieve after start_offset\n- * (IN) and actual number of parts retrieved (OUT)\n- * @parts: array of size at least @parts_count to store the result\n- * @italics_correction: italic correction of the glyph assembly\n+ * @parts_count: (inout): Input = maximum number of glyph parts to return;\n+ *               Output = actual number of parts returned\n+ * @parts: (out) (array length=parts_count): the glyph parts returned\n+ * @italics_correction: (out): italics correction of the glyph assembly\n@@ -228,4 +260,9 @@\n- * This function tries to retrieve the GlyphAssembly for the specified font,\n- * glyph and direction. Note that only the value of #HB_DIRECTION_IS_HORIZONTAL\n- * is considered. It provides the information necessary to draw the glyph\n- * assembly as an array of #hb_ot_math_glyph_part_t.\n+ * Fetches the GlyphAssembly for the specified font, glyph index, and direction.\n+ * Returned are a list of #hb_ot_math_glyph_part_t glyph parts that can be\n+ * used to draw the glyph and an italics-correction value (if one is defined\n+ * in the font).\n+ *\n+ * <note>The @direction parameter is only used to select between horizontal\n+ * or vertical directions for the construction. Even though all #hb_direction_t\n+ * values are accepted, only the result of #HB_DIRECTION_IS_HORIZONTAL is\n+ * considered.<\/note>\n@@ -254,0 +291,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-math.cc","additions":98,"deletions":58,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -53,0 +53,3 @@\n+ * The 'MATH' table constants specified at\n+ * https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/math\n+ *\n@@ -117,0 +120,3 @@\n+ * The math kerning-table types defined for the four corners\n+ * of a glyph.\n+ *\n@@ -128,0 +134,4 @@\n+ * @glyph: The glyph index of the variant\n+ * @advance: The advance width of the variant\n+ *\n+ * Data type to hold math-variant information for a glyph.\n@@ -139,0 +149,2 @@\n+ * Flags for math glyph parts.\n+ *\n@@ -142,1 +154,1 @@\n-  HB_MATH_GLYPH_PART_FLAG_EXTENDER      = 0x00000001u  \/* Extender glyph *\/\n+  HB_OT_MATH_GLYPH_PART_FLAG_EXTENDER   = 0x00000001u  \/* Extender glyph *\/\n@@ -147,0 +159,9 @@\n+ * @glyph: The glyph index of the variant part\n+ * @start_connector_length: The length of the connector on the starting side of the variant part\n+ * @end_connector_length: The length of the connector on the ending side of the variant part\n+ * @full_advance: The total advance of the part\n+ * @flags: #hb_ot_math_glyph_part_flags_t flags for the part\n+ *\n+ * Data type to hold information for a \"part\" component of a math-variant glyph.\n+ * Large variants for stretchable math glyphs (such as parentheses) can be constructed\n+ * on the fly from parts.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-math.h","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    numGlyphs.set (count);\n+    numGlyphs = count;\n@@ -97,1 +97,1 @@\n-  bool subset (hb_subset_plan_t *plan) const\n+  bool subset (hb_subset_context_t *c) const\n@@ -99,3 +99,3 @@\n-    hb_blob_t *maxp_blob = hb_sanitize_context_t().reference_table<maxp> (plan->source);\n-    hb_blob_t *maxp_prime_blob = hb_blob_copy_writable_or_fail (maxp_blob);\n-    hb_blob_destroy (maxp_blob);\n+    TRACE_SUBSET (this);\n+    maxp *maxp_prime = c->serializer->embed (this);\n+    if (unlikely (!maxp_prime)) return_trace (false);\n@@ -103,4 +103,6 @@\n-    if (unlikely (!maxp_prime_blob)) {\n-      return false;\n-    }\n-    maxp *maxp_prime = (maxp *) hb_blob_get_data (maxp_prime_blob, nullptr);\n+    maxp_prime->numGlyphs = c->plan->num_output_glyphs ();\n+    if (maxp_prime->version.major == 1)\n+    {\n+      const maxpV1Tail *src_v1 = &StructAfter<maxpV1Tail> (*this);\n+      maxpV1Tail *dest_v1 = c->serializer->embed<maxpV1Tail> (src_v1);\n+      if (unlikely (!dest_v1)) return_trace (false);\n@@ -108,3 +110,3 @@\n-    maxp_prime->set_num_glyphs (plan->glyphs.length);\n-    if (plan->drop_hints)\n-      drop_hint_fields (plan, maxp_prime);\n+      if (c->plan->drop_hints)\n+        drop_hint_fields (dest_v1);\n+    }\n@@ -112,3 +114,1 @@\n-    bool result = plan->add_table (HB_OT_TAG_maxp, maxp_prime_blob);\n-    hb_blob_destroy (maxp_prime_blob);\n-    return result;\n+    return_trace (true);\n@@ -117,1 +117,1 @@\n-  static void drop_hint_fields (hb_subset_plan_t *plan HB_UNUSED, maxp *maxp_prime)\n+  static void drop_hint_fields (maxpV1Tail* dest_v1)\n@@ -119,11 +119,7 @@\n-    if (maxp_prime->version.major == 1)\n-    {\n-      maxpV1Tail &v1 = StructAfter<maxpV1Tail> (*maxp_prime);\n-      v1.maxZones.set (1);\n-      v1.maxTwilightPoints.set (0);\n-      v1.maxStorage.set (0);\n-      v1.maxFunctionDefs.set (0);\n-      v1.maxInstructionDefs.set (0);\n-      v1.maxStackElements.set (0);\n-      v1.maxSizeOfInstructions.set (0);\n-    }\n+    dest_v1->maxZones = 1;\n+    dest_v1->maxTwilightPoints = 0;\n+    dest_v1->maxStorage = 0;\n+    dest_v1->maxFunctionDefs = 0;\n+    dest_v1->maxInstructionDefs = 0;\n+    dest_v1->maxStackElements = 0;\n+    dest_v1->maxSizeOfInstructions = 0;\n@@ -133,4 +129,5 @@\n-  FixedVersion<>version;                \/* Version of the maxp table (0.5 or 1.0),\n-                                         * 0x00005000u or 0x00010000u. *\/\n-  HBUINT16      numGlyphs;              \/* The number of glyphs in the font. *\/\n-\/*maxpV1Tail    v1Tail[VAR]; *\/\n+  FixedVersion<>version;\/* Version of the maxp table (0.5 or 1.0),\n+                         * 0x00005000u or 0x00010000u. *\/\n+  HBUINT16      numGlyphs;\n+                        \/* The number of glyphs in the font. *\/\n+\/*maxpV1Tail    v1Tail[HB_VAR_ARRAY]; *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-maxp-table.hh","additions":28,"deletions":31,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_OT_META_TABLE_HH\n+#define HB_OT_META_TABLE_HH\n+\n+#include \"hb-open-type.hh\"\n+\n+\/*\n+ * meta -- Metadata Table\n+ * https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/meta\n+ * https:\/\/developer.apple.com\/fonts\/TrueType-Reference-Manual\/RM06\/Chap6meta.html\n+ *\/\n+#define HB_OT_TAG_meta HB_TAG ('m','e','t','a')\n+\n+\n+namespace OT {\n+\n+\n+struct DataMap\n+{\n+  int cmp (hb_tag_t a) const { return tag.cmp (a); }\n+\n+  hb_tag_t get_tag () const { return tag; }\n+\n+  hb_blob_t *reference_entry (hb_blob_t *meta_blob) const\n+  { return hb_blob_create_sub_blob (meta_blob, dataZ, dataLength); }\n+\n+  bool sanitize (hb_sanitize_context_t *c, const void *base) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (likely (c->check_struct (this) &&\n+                          dataZ.sanitize (c, base, dataLength)));\n+  }\n+\n+  protected:\n+  Tag           tag;            \/* A tag indicating the type of metadata. *\/\n+  LNNOffsetTo<UnsizedArrayOf<HBUINT8>>\n+                dataZ;          \/* Offset in bytes from the beginning of the\n+                                 * metadata table to the data for this tag. *\/\n+  HBUINT32      dataLength;     \/* Length of the data. The data is not required to\n+                                 * be padded to any byte boundary. *\/\n+  public:\n+  DEFINE_SIZE_STATIC (12);\n+};\n+\n+struct meta\n+{\n+  static constexpr hb_tag_t tableTag = HB_OT_TAG_meta;\n+\n+  struct accelerator_t\n+  {\n+    void init (hb_face_t *face)\n+    { table = hb_sanitize_context_t ().reference_table<meta> (face); }\n+    void fini () { table.destroy (); }\n+\n+    hb_blob_t *reference_entry (hb_tag_t tag) const\n+    { return table->dataMaps.lsearch (tag).reference_entry (table.get_blob ()); }\n+\n+    unsigned int get_entries (unsigned int      start_offset,\n+                              unsigned int     *count,\n+                              hb_ot_meta_tag_t *entries) const\n+    {\n+      if (count)\n+      {\n+        + table->dataMaps.sub_array (start_offset, count)\n+        | hb_map (&DataMap::get_tag)\n+        | hb_map ([](hb_tag_t tag) { return (hb_ot_meta_tag_t) tag; })\n+        | hb_sink (hb_array (entries, *count))\n+        ;\n+      }\n+      return table->dataMaps.len;\n+    }\n+\n+    private:\n+    hb_blob_ptr_t<meta> table;\n+  };\n+\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (likely (c->check_struct (this) &&\n+                          version == 1 &&\n+                          dataMaps.sanitize (c, this)));\n+  }\n+\n+  protected:\n+  HBUINT32      version;        \/* Version number of the metadata table — set to 1. *\/\n+  HBUINT32      flags;          \/* Flags — currently unused; set to 0. *\/\n+  HBUINT32      dataOffset;\n+                                \/* Per Apple specification:\n+                                 * Offset from the beginning of the table to the data.\n+                                 * Per OT specification:\n+                                 * Reserved. Not used; should be set to 0. *\/\n+  LArrayOf<DataMap>\n+                dataMaps;\/* Array of data map records. *\/\n+  public:\n+  DEFINE_SIZE_ARRAY (16, dataMaps);\n+};\n+\n+struct meta_accelerator_t : meta::accelerator_t {};\n+\n+} \/* namespace OT *\/\n+\n+\n+#endif \/* HB_OT_META_TABLE_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-meta-table.hh","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_META\n+\n+#include \"hb-ot-meta-table.hh\"\n+\n+\/**\n+ * SECTION:hb-ot-meta\n+ * @title: hb-ot-meta\n+ * @short_description: OpenType Metadata\n+ * @include: hb-ot.h\n+ *\n+ * Functions for fetching metadata from fonts.\n+ **\/\n+\n+\/**\n+ * hb_ot_meta_get_entry_tags:\n+ * @face: a face object\n+ * @start_offset: iteration's start offset\n+ * @entries_count:(inout) (allow-none): buffer size as input, filled size as output\n+ * @entries: (out caller-allocates) (array length=entries_count): entries tags buffer\n+ *\n+ * Return value: Number of all available feature types.\n+ *\n+ * Since: 2.6.0\n+ **\/\n+unsigned int\n+hb_ot_meta_get_entry_tags (hb_face_t        *face,\n+                           unsigned int      start_offset,\n+                           unsigned int     *entries_count, \/* IN\/OUT.  May be NULL. *\/\n+                           hb_ot_meta_tag_t *entries        \/* OUT.     May be NULL. *\/)\n+{\n+  return face->table.meta->get_entries (start_offset, entries_count, entries);\n+}\n+\n+\/**\n+ * hb_ot_meta_reference_entry:\n+ * @face: a #hb_face_t object.\n+ * @meta_tag: tag of metadata you like to have.\n+ *\n+ * It fetches metadata entry of a given tag from a font.\n+ *\n+ * Returns: (transfer full): A blob containing the blob.\n+ *\n+ * Since: 2.6.0\n+ **\/\n+hb_blob_t *\n+hb_ot_meta_reference_entry (hb_face_t *face, hb_ot_meta_tag_t meta_tag)\n+{\n+  return face->table.meta->reference_entry (meta_tag);\n+}\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-meta.cc","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_OT_H_IN\n+#error \"Include <hb-ot.h> instead.\"\n+#endif\n+\n+#ifndef HB_OT_META_H\n+#define HB_OT_META_H\n+\n+#include \"hb.h\"\n+\n+HB_BEGIN_DECLS\n+\n+\/**\n+ * hb_ot_meta_tag_t:\n+ * @HB_OT_META_TAG_DESIGN_LANGUAGES: Design languages. Text, using only\n+ * Basic Latin (ASCII) characters. Indicates languages and\/or scripts\n+ * for the user audiences that the font was primarily designed for.\n+ * @HB_OT_META_TAG_SUPPORTED_LANGUAGES: Supported languages. Text, using\n+ * only Basic Latin (ASCII) characters. Indicates languages and\/or scripts\n+ * that the font is declared to be capable of supporting.\n+ *\n+ * Known metadata tags from https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/meta\n+ *\n+ * Since: 2.6.0\n+ **\/\n+typedef enum {\n+\/*\n+   HB_OT_META_TAG_APPL          = HB_TAG ('a','p','p','l'),\n+   HB_OT_META_TAG_BILD          = HB_TAG ('b','i','l','d'),\n+*\/\n+  HB_OT_META_TAG_DESIGN_LANGUAGES       = HB_TAG ('d','l','n','g'),\n+  HB_OT_META_TAG_SUPPORTED_LANGUAGES    = HB_TAG ('s','l','n','g'),\n+\n+  _HB_OT_META_TAG_MAX_VALUE = HB_TAG_MAX_SIGNED \/*< skip >*\/\n+} hb_ot_meta_tag_t;\n+\n+HB_EXTERN unsigned int\n+hb_ot_meta_get_entry_tags (hb_face_t        *face,\n+                           unsigned int      start_offset,\n+                           unsigned int     *entries_count, \/* IN\/OUT.  May be NULL. *\/\n+                           hb_ot_meta_tag_t *entries        \/* OUT.     May be NULL. *\/);\n+\n+HB_EXTERN hb_blob_t *\n+hb_ot_meta_reference_entry (hb_face_t *face, hb_ot_meta_tag_t meta_tag);\n+\n+HB_END_DECLS\n+\n+#endif \/* HB_OT_META_H *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-meta.h","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,231 @@\n+\/*\n+ * Copyright © 2018-2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#include \"hb.hh\"\n+\n+#include \"hb-ot-var-mvar-table.hh\"\n+#include \"hb-ot-gasp-table.hh\" \/\/ Just so we compile it; unused otherwise.\n+#include \"hb-ot-os2-table.hh\"\n+#include \"hb-ot-post-table.hh\"\n+#include \"hb-ot-hhea-table.hh\"\n+#include \"hb-ot-metrics.hh\"\n+#include \"hb-ot-face.hh\"\n+\n+\n+static float\n+_fix_ascender_descender (float value, hb_ot_metrics_tag_t metrics_tag)\n+{\n+  if (metrics_tag == HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER ||\n+      metrics_tag == HB_OT_METRICS_TAG_VERTICAL_ASCENDER)\n+    return fabs ((double) value);\n+  if (metrics_tag == HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER ||\n+      metrics_tag == HB_OT_METRICS_TAG_VERTICAL_DESCENDER)\n+    return -fabs ((double) value);\n+  return value;\n+}\n+\n+\/* The common part of _get_position logic needed on hb-ot-font and here\n+   to be able to have slim builds without the not always needed parts *\/\n+bool\n+_hb_ot_metrics_get_position_common (hb_font_t           *font,\n+                                    hb_ot_metrics_tag_t  metrics_tag,\n+                                    hb_position_t       *position     \/* OUT.  May be NULL. *\/)\n+{\n+  hb_face_t *face = font->face;\n+  switch ((unsigned) metrics_tag)\n+  {\n+#ifndef HB_NO_VAR\n+#define GET_VAR face->table.MVAR->get_var (metrics_tag, font->coords, font->num_coords)\n+#else\n+#define GET_VAR .0f\n+#endif\n+#define GET_METRIC_X(TABLE, ATTR) \\\n+  (face->table.TABLE->has_data () && \\\n+    (position && (*position = font->em_scalef_x (_fix_ascender_descender ( \\\n+      face->table.TABLE->ATTR + GET_VAR, metrics_tag))), true))\n+#define GET_METRIC_Y(TABLE, ATTR) \\\n+  (face->table.TABLE->has_data () && \\\n+    (position && (*position = font->em_scalef_y (_fix_ascender_descender ( \\\n+      face->table.TABLE->ATTR + GET_VAR, metrics_tag))), true))\n+  case HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER:\n+    return (face->table.OS2->use_typo_metrics () && GET_METRIC_Y (OS2, sTypoAscender)) ||\n+           GET_METRIC_Y (hhea, ascender);\n+  case HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER:\n+    return (face->table.OS2->use_typo_metrics () && GET_METRIC_Y (OS2, sTypoDescender)) ||\n+           GET_METRIC_Y (hhea, descender);\n+  case HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP:\n+    return (face->table.OS2->use_typo_metrics () && GET_METRIC_Y (OS2, sTypoLineGap)) ||\n+           GET_METRIC_Y (hhea, lineGap);\n+  case HB_OT_METRICS_TAG_VERTICAL_ASCENDER:  return GET_METRIC_X (vhea, ascender);\n+  case HB_OT_METRICS_TAG_VERTICAL_DESCENDER: return GET_METRIC_X (vhea, descender);\n+  case HB_OT_METRICS_TAG_VERTICAL_LINE_GAP:  return GET_METRIC_X (vhea, lineGap);\n+#undef GET_METRIC_Y\n+#undef GET_METRIC_X\n+#undef GET_VAR\n+  default:                               assert (0); return false;\n+  }\n+}\n+\n+#ifndef HB_NO_METRICS\n+\n+#if 0\n+static bool\n+_get_gasp (hb_face_t *face, float *result, hb_ot_metrics_tag_t metrics_tag)\n+{\n+  const OT::GaspRange& range = face->table.gasp->get_gasp_range (metrics_tag - HB_TAG ('g','s','p','0'));\n+  if (&range == &Null (OT::GaspRange)) return false;\n+  if (result) *result = range.rangeMaxPPEM + font->face->table.MVAR->get_var (metrics_tag, font->coords, font->num_coords);\n+  return true;\n+}\n+#endif\n+\n+\/* Private tags for https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1866 *\/\n+#define _HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER_OS2   HB_TAG ('O','a','s','c')\n+#define _HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER_HHEA  HB_TAG ('H','a','s','c')\n+#define _HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER_OS2  HB_TAG ('O','d','s','c')\n+#define _HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER_HHEA HB_TAG ('H','d','s','c')\n+#define _HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP_OS2   HB_TAG ('O','l','g','p')\n+#define _HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP_HHEA  HB_TAG ('H','l','g','p')\n+\n+\/**\n+ * hb_ot_metrics_get_position:\n+ * @font: a #hb_font_t object.\n+ * @metrics_tag: tag of metrics value you like to fetch.\n+ * @position: (out) (optional): result of metrics value from the font.\n+ *\n+ * It fetches metrics value corresponding to a given tag from a font.\n+ *\n+ * Returns: Whether found the requested metrics in the font.\n+ * Since: 2.6.0\n+ **\/\n+hb_bool_t\n+hb_ot_metrics_get_position (hb_font_t           *font,\n+                            hb_ot_metrics_tag_t  metrics_tag,\n+                            hb_position_t       *position     \/* OUT.  May be NULL. *\/)\n+{\n+  hb_face_t *face = font->face;\n+  switch ((unsigned) metrics_tag)\n+  {\n+  case HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER:\n+  case HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER:\n+  case HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP:\n+  case HB_OT_METRICS_TAG_VERTICAL_ASCENDER:\n+  case HB_OT_METRICS_TAG_VERTICAL_DESCENDER:\n+  case HB_OT_METRICS_TAG_VERTICAL_LINE_GAP:           return _hb_ot_metrics_get_position_common (font, metrics_tag, position);\n+#ifndef HB_NO_VAR\n+#define GET_VAR hb_ot_metrics_get_variation (font, metrics_tag)\n+#else\n+#define GET_VAR 0\n+#endif\n+#define GET_METRIC_X(TABLE, ATTR) \\\n+  (face->table.TABLE->has_data () && \\\n+    (position && (*position = font->em_scalef_x (face->table.TABLE->ATTR + GET_VAR)), true))\n+#define GET_METRIC_Y(TABLE, ATTR) \\\n+  (face->table.TABLE->has_data () && \\\n+    (position && (*position = font->em_scalef_y (face->table.TABLE->ATTR + GET_VAR)), true))\n+  case HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_ASCENT:  return GET_METRIC_Y (OS2, usWinAscent);\n+  case HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_DESCENT: return GET_METRIC_Y (OS2, usWinDescent);\n+  case HB_OT_METRICS_TAG_HORIZONTAL_CARET_RISE:       return GET_METRIC_Y (hhea, caretSlopeRise);\n+  case HB_OT_METRICS_TAG_HORIZONTAL_CARET_RUN:        return GET_METRIC_X (hhea, caretSlopeRun);\n+  case HB_OT_METRICS_TAG_HORIZONTAL_CARET_OFFSET:     return GET_METRIC_X (hhea, caretOffset);\n+  case HB_OT_METRICS_TAG_VERTICAL_CARET_RISE:         return GET_METRIC_X (vhea, caretSlopeRise);\n+  case HB_OT_METRICS_TAG_VERTICAL_CARET_RUN:          return GET_METRIC_Y (vhea, caretSlopeRun);\n+  case HB_OT_METRICS_TAG_VERTICAL_CARET_OFFSET:       return GET_METRIC_Y (vhea, caretOffset);\n+  case HB_OT_METRICS_TAG_X_HEIGHT:                    return GET_METRIC_Y (OS2->v2 (), sxHeight);\n+  case HB_OT_METRICS_TAG_CAP_HEIGHT:                  return GET_METRIC_Y (OS2->v2 (), sCapHeight);\n+  case HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_SIZE:         return GET_METRIC_X (OS2, ySubscriptXSize);\n+  case HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_SIZE:         return GET_METRIC_Y (OS2, ySubscriptYSize);\n+  case HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_OFFSET:       return GET_METRIC_X (OS2, ySubscriptXOffset);\n+  case HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_OFFSET:       return GET_METRIC_Y (OS2, ySubscriptYOffset);\n+  case HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_SIZE:       return GET_METRIC_X (OS2, ySuperscriptXSize);\n+  case HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_SIZE:       return GET_METRIC_Y (OS2, ySuperscriptYSize);\n+  case HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_OFFSET:     return GET_METRIC_X (OS2, ySuperscriptXOffset);\n+  case HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_OFFSET:     return GET_METRIC_Y (OS2, ySuperscriptYOffset);\n+  case HB_OT_METRICS_TAG_STRIKEOUT_SIZE:              return GET_METRIC_Y (OS2, yStrikeoutSize);\n+  case HB_OT_METRICS_TAG_STRIKEOUT_OFFSET:            return GET_METRIC_Y (OS2, yStrikeoutPosition);\n+  case HB_OT_METRICS_TAG_UNDERLINE_SIZE:              return GET_METRIC_Y (post->table, underlineThickness);\n+  case HB_OT_METRICS_TAG_UNDERLINE_OFFSET:            return GET_METRIC_Y (post->table, underlinePosition);\n+\n+  \/* Private tags *\/\n+  case _HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER_OS2:    return GET_METRIC_Y (OS2, sTypoAscender);\n+  case _HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER_HHEA:   return GET_METRIC_Y (hhea, ascender);\n+  case _HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER_OS2:   return GET_METRIC_Y (OS2, sTypoDescender);\n+  case _HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER_HHEA:  return GET_METRIC_Y (hhea, descender);\n+  case _HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP_OS2:    return GET_METRIC_Y (OS2, sTypoLineGap);\n+  case _HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP_HHEA:   return GET_METRIC_Y (hhea, lineGap);\n+#undef GET_METRIC_Y\n+#undef GET_METRIC_X\n+#undef GET_VAR\n+  default:                                        return false;\n+  }\n+}\n+\n+#ifndef HB_NO_VAR\n+\/**\n+ * hb_ot_metrics_get_variation:\n+ * @font:\n+ * @metrics_tag:\n+ *\n+ * Returns:\n+ *\n+ * Since: 2.6.0\n+ **\/\n+float\n+hb_ot_metrics_get_variation (hb_font_t *font, hb_ot_metrics_tag_t metrics_tag)\n+{\n+  return font->face->table.MVAR->get_var (metrics_tag, font->coords, font->num_coords);\n+}\n+\n+\/**\n+ * hb_ot_metrics_get_x_variation:\n+ * @font:\n+ * @metrics_tag:\n+ *\n+ * Returns:\n+ *\n+ * Since: 2.6.0\n+ **\/\n+hb_position_t\n+hb_ot_metrics_get_x_variation (hb_font_t *font, hb_ot_metrics_tag_t metrics_tag)\n+{\n+  return font->em_scalef_x (hb_ot_metrics_get_variation (font, metrics_tag));\n+}\n+\n+\/**\n+ * hb_ot_metrics_get_y_variation:\n+ * @font:\n+ * @metrics_tag:\n+ *\n+ * Returns:\n+ *\n+ * Since: 2.6.0\n+ **\/\n+hb_position_t\n+hb_ot_metrics_get_y_variation (hb_font_t *font, hb_ot_metrics_tag_t metrics_tag)\n+{\n+  return font->em_scalef_y (hb_ot_metrics_get_variation (font, metrics_tag));\n+}\n+#endif\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-metrics.cc","additions":231,"deletions":0,"binary":false,"changes":231,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright © 2018  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_OT_H_IN\n+#error \"Include <hb-ot.h> instead.\"\n+#endif\n+\n+#ifndef HB_OT_METRICS_H\n+#define HB_OT_METRICS_H\n+\n+#include \"hb.h\"\n+#include \"hb-ot-name.h\"\n+\n+HB_BEGIN_DECLS\n+\n+\n+\/**\n+ * hb_ot_metrics_tag_t:\n+ * @HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER: horizontal ascender.\n+ * @HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER: horizontal descender.\n+ * @HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP: horizontal line gap.\n+ * @HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_ASCENT: horizontal clipping ascent.\n+ * @HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_DESCENT: horizontal clipping descent.\n+ * @HB_OT_METRICS_TAG_VERTICAL_ASCENDER: vertical ascender.\n+ * @HB_OT_METRICS_TAG_VERTICAL_DESCENDER: vertical descender.\n+ * @HB_OT_METRICS_TAG_VERTICAL_LINE_GAP: vertical line gap.\n+ * @HB_OT_METRICS_TAG_HORIZONTAL_CARET_RISE: horizontal caret rise.\n+ * @HB_OT_METRICS_TAG_HORIZONTAL_CARET_RUN: horizontal caret run.\n+ * @HB_OT_METRICS_TAG_HORIZONTAL_CARET_OFFSET: horizontal caret offset.\n+ * @HB_OT_METRICS_TAG_VERTICAL_CARET_RISE: vertical caret rise.\n+ * @HB_OT_METRICS_TAG_VERTICAL_CARET_RUN: vertical caret run.\n+ * @HB_OT_METRICS_TAG_VERTICAL_CARET_OFFSET: vertical caret offset.\n+ * @HB_OT_METRICS_TAG_X_HEIGHT: x height.\n+ * @HB_OT_METRICS_TAG_CAP_HEIGHT: cap height.\n+ * @HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_SIZE: subscript em x size.\n+ * @HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_SIZE: subscript em y size.\n+ * @HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_OFFSET: subscript em x offset.\n+ * @HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_OFFSET: subscript em y offset.\n+ * @HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_SIZE: superscript em x size.\n+ * @HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_SIZE: superscript em y size.\n+ * @HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_OFFSET: superscript em x offset.\n+ * @HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_OFFSET: superscript em y offset.\n+ * @HB_OT_METRICS_TAG_STRIKEOUT_SIZE: strikeout size.\n+ * @HB_OT_METRICS_TAG_STRIKEOUT_OFFSET: strikeout offset.\n+ * @HB_OT_METRICS_TAG_UNDERLINE_SIZE: underline size.\n+ * @HB_OT_METRICS_TAG_UNDERLINE_OFFSET: underline offset.\n+ *\n+ * From https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/mvar#value-tags\n+ *\n+ * Since: 2.6.0\n+ **\/\n+typedef enum {\n+  HB_OT_METRICS_TAG_HORIZONTAL_ASCENDER         = HB_TAG ('h','a','s','c'),\n+  HB_OT_METRICS_TAG_HORIZONTAL_DESCENDER        = HB_TAG ('h','d','s','c'),\n+  HB_OT_METRICS_TAG_HORIZONTAL_LINE_GAP         = HB_TAG ('h','l','g','p'),\n+  HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_ASCENT  = HB_TAG ('h','c','l','a'),\n+  HB_OT_METRICS_TAG_HORIZONTAL_CLIPPING_DESCENT = HB_TAG ('h','c','l','d'),\n+  HB_OT_METRICS_TAG_VERTICAL_ASCENDER           = HB_TAG ('v','a','s','c'),\n+  HB_OT_METRICS_TAG_VERTICAL_DESCENDER          = HB_TAG ('v','d','s','c'),\n+  HB_OT_METRICS_TAG_VERTICAL_LINE_GAP           = HB_TAG ('v','l','g','p'),\n+  HB_OT_METRICS_TAG_HORIZONTAL_CARET_RISE       = HB_TAG ('h','c','r','s'),\n+  HB_OT_METRICS_TAG_HORIZONTAL_CARET_RUN        = HB_TAG ('h','c','r','n'),\n+  HB_OT_METRICS_TAG_HORIZONTAL_CARET_OFFSET     = HB_TAG ('h','c','o','f'),\n+  HB_OT_METRICS_TAG_VERTICAL_CARET_RISE         = HB_TAG ('v','c','r','s'),\n+  HB_OT_METRICS_TAG_VERTICAL_CARET_RUN          = HB_TAG ('v','c','r','n'),\n+  HB_OT_METRICS_TAG_VERTICAL_CARET_OFFSET       = HB_TAG ('v','c','o','f'),\n+  HB_OT_METRICS_TAG_X_HEIGHT                    = HB_TAG ('x','h','g','t'),\n+  HB_OT_METRICS_TAG_CAP_HEIGHT                  = HB_TAG ('c','p','h','t'),\n+  HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_SIZE         = HB_TAG ('s','b','x','s'),\n+  HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_SIZE         = HB_TAG ('s','b','y','s'),\n+  HB_OT_METRICS_TAG_SUBSCRIPT_EM_X_OFFSET       = HB_TAG ('s','b','x','o'),\n+  HB_OT_METRICS_TAG_SUBSCRIPT_EM_Y_OFFSET       = HB_TAG ('s','b','y','o'),\n+  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_SIZE       = HB_TAG ('s','p','x','s'),\n+  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_SIZE       = HB_TAG ('s','p','y','s'),\n+  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_X_OFFSET     = HB_TAG ('s','p','x','o'),\n+  HB_OT_METRICS_TAG_SUPERSCRIPT_EM_Y_OFFSET     = HB_TAG ('s','p','y','o'),\n+  HB_OT_METRICS_TAG_STRIKEOUT_SIZE              = HB_TAG ('s','t','r','s'),\n+  HB_OT_METRICS_TAG_STRIKEOUT_OFFSET            = HB_TAG ('s','t','r','o'),\n+  HB_OT_METRICS_TAG_UNDERLINE_SIZE              = HB_TAG ('u','n','d','s'),\n+  HB_OT_METRICS_TAG_UNDERLINE_OFFSET            = HB_TAG ('u','n','d','o'),\n+\n+  _HB_OT_METRICS_TAG_MAX_VALUE = HB_TAG_MAX_SIGNED \/*< skip >*\/\n+} hb_ot_metrics_tag_t;\n+\n+HB_EXTERN hb_bool_t\n+hb_ot_metrics_get_position (hb_font_t           *font,\n+                            hb_ot_metrics_tag_t  metrics_tag,\n+                            hb_position_t       *position     \/* OUT.  May be NULL. *\/);\n+\n+HB_EXTERN float\n+hb_ot_metrics_get_variation (hb_font_t *font, hb_ot_metrics_tag_t metrics_tag);\n+\n+HB_EXTERN hb_position_t\n+hb_ot_metrics_get_x_variation (hb_font_t *font, hb_ot_metrics_tag_t metrics_tag);\n+\n+HB_EXTERN hb_position_t\n+hb_ot_metrics_get_y_variation (hb_font_t *font, hb_ot_metrics_tag_t metrics_tag);\n+\n+HB_END_DECLS\n+\n+#endif \/* HB_OT_METRICS_H *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-metrics.h","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright © 2018  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_OT_METRICS_HH\n+#define HB_OT_METRICS_HH\n+\n+#include \"hb.hh\"\n+\n+HB_INTERNAL bool\n+_hb_ot_metrics_get_position_common (hb_font_t           *font,\n+                                    hb_ot_metrics_tag_t  metrics_tag,\n+                                    hb_position_t       *position     \/* OUT.  May be NULL. *\/);\n+\n+#endif \/* HB_OT_METRICS_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-metrics.hh","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -27,0 +27,3 @@\n+#ifndef HB_OT_NAME_LANGUAGE_STATIC_HH\n+#define HB_OT_NAME_LANGUAGE_STATIC_HH\n+\n@@ -37,6 +40,2 @@\n-  static int cmp (const void *key, const void *item)\n-  {\n-    unsigned int a = * (unsigned int *) key;\n-    unsigned int b = ((const hb_ot_language_map_t *) item)->code;\n-    return a < b ? -1 : a > b ? +1 : 0;\n-  }\n+  int cmp (unsigned int key) const\n+  { return key < code ? -1 : key > code ? +1 : 0; }\n@@ -430,6 +429,4 @@\n-  const hb_ot_language_map_t *entry = (const hb_ot_language_map_t *)\n-                                      hb_bsearch (&code,\n-                                                  array,\n-                                                  len,\n-                                                  sizeof (array[0]),\n-                                                  hb_ot_language_map_t::cmp);\n+#ifdef HB_NO_OT_NAME_LANGUAGE\n+  return HB_LANGUAGE_INVALID;\n+#endif\n+  auto *entry = hb_bsearch (code, array, len);\n@@ -458,0 +455,2 @@\n+\n+#endif \/* HB_OT_NAME_LANGUAGE_STATIC_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-name-language-static.hh","additions":11,"deletions":12,"binary":false,"changes":23,"previous_filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-name-language.cc","status":"renamed"},{"patch":"@@ -54,0 +54,1 @@\n+#ifndef HB_NO_OT_NAME_LANGUAGE\n@@ -63,0 +64,1 @@\n+#ifndef HB_NO_OT_NAME_LANGUAGE_AAT\n@@ -64,1 +66,2 @@\n-      return _hb_aat_language_get (face, l);\n+      return face->table.ltag->get_language (l);\n+#endif\n@@ -66,0 +69,1 @@\n+#endif\n@@ -96,0 +100,41 @@\n+  NameRecord* copy (hb_serialize_context_t *c, const void *base) const\n+  {\n+    TRACE_SERIALIZE (this);\n+    auto *out = c->embed (this);\n+    if (unlikely (!out)) return_trace (nullptr);\n+    out->offset.serialize_copy (c, offset, base, 0, hb_serialize_context_t::Tail, length);\n+    return_trace (out);\n+  }\n+\n+  bool isUnicode () const\n+  {\n+    unsigned int p = platformID;\n+    unsigned int e = encodingID;\n+\n+    return (p == 0 ||\n+            (p == 3 && (e == 0 || e == 1 || e == 10)));\n+  }\n+\n+  static int cmp (const void *pa, const void *pb)\n+  {\n+    const NameRecord *a = (const NameRecord *)pa;\n+    const NameRecord *b = (const NameRecord *)pb;\n+\n+    if (a->platformID != b->platformID)\n+      return a->platformID - b->platformID;\n+\n+    if (a->encodingID != b->encodingID)\n+      return a->encodingID - b->encodingID;\n+\n+    if (a->languageID != b->languageID)\n+      return a->languageID - b->languageID;\n+\n+    if (a->nameID != b->nameID)\n+      return a->nameID - b->nameID;\n+\n+    if (a->length != b->length)\n+      return a->length - b->length;\n+\n+    return 0;\n+  }\n+\n@@ -99,2 +144,1 @@\n-    \/* We can check from base all the way up to the end of string... *\/\n-    return_trace (c->check_struct (this) && c->check_range ((char *) base, (unsigned int) length + offset));\n+    return_trace (c->check_struct (this) && offset.sanitize (c, base, length));\n@@ -108,1 +152,2 @@\n-  HBUINT16      offset;         \/* String offset from start of storage area (in bytes). *\/\n+  NNOffsetTo<UnsizedArrayOf<HBUINT8>>\n+                offset;         \/* String offset from start of storage area (in bytes). *\/\n@@ -122,1 +167,1 @@\n-    return a->name_id < b->name_id ? -1 : +1;\n+    return a->name_id - b->name_id;\n@@ -144,1 +189,1 @@\n-    return a->entry_score < b->entry_score ? -1 : +1;\n+    return a->entry_score - b->entry_score;\n@@ -147,1 +192,1 @@\n-    return a->entry_index < b->entry_index ? -1 : +1;\n+    return a->entry_index - b->entry_index;\n@@ -159,0 +204,54 @@\n+  template <typename Iterator,\n+            hb_requires (hb_is_source_of (Iterator, const NameRecord &))>\n+  bool serialize (hb_serialize_context_t *c,\n+                  Iterator it,\n+                  const void *src_string_pool)\n+  {\n+    TRACE_SERIALIZE (this);\n+\n+    if (unlikely (!c->extend_min ((*this))))  return_trace (false);\n+\n+    this->format = 0;\n+    this->count = it.len ();\n+\n+    NameRecord *name_records = (NameRecord *) calloc (it.len (), NameRecord::static_size);\n+    if (unlikely (!name_records)) return_trace (false);\n+\n+    hb_array_t<NameRecord> records (name_records, it.len ());\n+\n+    for (const NameRecord& record : it)\n+    {\n+      memcpy (name_records, &record, NameRecord::static_size);\n+      name_records++;\n+    }\n+\n+    records.qsort ();\n+\n+    c->copy_all (records, src_string_pool);\n+    free (records.arrayZ);\n+\n+    if (unlikely (c->ran_out_of_room)) return_trace (false);\n+\n+    this->stringOffset = c->length ();\n+\n+    return_trace (true);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    name *name_prime = c->serializer->start_embed<name> ();\n+    if (unlikely (!name_prime)) return_trace (false);\n+\n+    auto it =\n+    + nameRecordZ.as_array (count)\n+    | hb_filter (c->plan->name_ids, &NameRecord::nameID)\n+    | hb_filter (c->plan->name_languages, &NameRecord::languageID)\n+    | hb_filter ([&] (const NameRecord& namerecord) { return c->plan->name_legacy || namerecord.isUnicode (); })\n+    ;\n+\n+    name_prime->serialize (c->serializer, it, hb_addressof (this + stringOffset));\n+    return_trace (name_prime->count);\n+  }\n+\n@@ -163,5 +262,1 @@\n-    unsigned int _count = count;\n-    \/* Move to run-time?! *\/\n-    for (unsigned int i = 0; i < _count; i++)\n-      if (!nameRecordZ[i].sanitize (c, string_pool)) return_trace (false);\n-    return_trace (true);\n+    return_trace (nameRecordZ.sanitize (c, count, string_pool));\n@@ -176,1 +271,2 @@\n-                  c->check_range (this, stringOffset));\n+                  c->check_range (this, stringOffset) &&\n+                  sanitize_records (c));\n@@ -183,1 +279,1 @@\n-      this->table = hb_sanitize_context_t().reference_table<name> (face);\n+      this->table = hb_sanitize_context_t ().reference_table<name> (face);\n@@ -227,3 +323,3 @@\n-    int get_index (hb_ot_name_id_t   name_id,\n-                          hb_language_t     language,\n-                          unsigned int     *width=nullptr) const\n+    int get_index (hb_ot_name_id_t  name_id,\n+                   hb_language_t    language,\n+                   unsigned int    *width=nullptr) const\n@@ -232,3 +328,1 @@\n-      const hb_ot_name_entry_t *entry = (const hb_ot_name_entry_t *)\n-                                        hb_bsearch (&key,\n-                                                    (const hb_ot_name_entry_t *) this->names,\n+      const hb_ot_name_entry_t *entry = hb_bsearch (key, (const hb_ot_name_entry_t *) this->names,\n@@ -236,1 +330,1 @@\n-                                                    sizeof (key),\n+                                                    sizeof (hb_ot_name_entry_t),\n@@ -264,4 +358,4 @@\n-  HBUINT16      format;                 \/* Format selector (=0\/1). *\/\n-  HBUINT16      count;                  \/* Number of name records. *\/\n-  NNOffsetTo<UnsizedArrayOf<HBUINT8> >\n-                stringOffset;           \/* Offset to start of string storage (from start of table). *\/\n+  HBUINT16      format;         \/* Format selector (=0\/1). *\/\n+  HBUINT16      count;          \/* Number of name records. *\/\n+  NNOffsetTo<UnsizedArrayOf<HBUINT8>>\n+                stringOffset;   \/* Offset to start of string storage (from start of table). *\/\n@@ -269,1 +363,1 @@\n-                nameRecordZ;            \/* The name records where count is the number of records. *\/\n+                nameRecordZ;    \/* The name records where count is the number of records. *\/\n@@ -274,0 +368,3 @@\n+#undef entry_index\n+#undef entry_score\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-name-table.hh","additions":123,"deletions":26,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#ifndef HB_NO_NAME\n+\n@@ -31,1 +33,0 @@\n-#include \"hb-ot-face.hh\"\n@@ -96,1 +97,1 @@\n-    };\n+    }\n@@ -108,1 +109,1 @@\n-  };\n+  }\n@@ -225,0 +226,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-name.cc","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"hb-ot-cmap-table.hh\"\n@@ -62,0 +63,4 @@\n+  bool has_data () const { return sxHeight || sCapHeight; }\n+\n+  const OS2V2Tail * operator -> () const { return this; }\n+\n@@ -80,0 +85,17 @@\n+  inline bool get_optical_size (unsigned int *lower, unsigned int *upper) const\n+  {\n+    unsigned int lower_optical_size = usLowerOpticalPointSize;\n+    unsigned int upper_optical_size = usUpperOpticalPointSize;\n+\n+    \/* Per https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/os2#lps *\/\n+    if (lower_optical_size < upper_optical_size &&\n+        lower_optical_size >= 1 && lower_optical_size <= 0xFFFE &&\n+        upper_optical_size >= 2 && upper_optical_size <= 0xFFFF)\n+    {\n+      *lower = lower_optical_size;\n+      *upper = upper_optical_size;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n@@ -97,1 +119,1 @@\n-  bool has_data () const { return this != &Null (OS2); }\n+  bool has_data () const { return usWeightClass || usWidthClass || usFirstCharIndex || usLastCharIndex; }\n@@ -116,3 +138,3 @@\n-  bool is_italic () const       { return fsSelection & ITALIC; }\n-  bool is_oblique () const      { return fsSelection & OBLIQUE; }\n-  bool is_typo_metrics () const { return fsSelection & USE_TYPO_METRICS; }\n+  bool        is_italic () const { return fsSelection & ITALIC; }\n+  bool       is_oblique () const { return fsSelection & OBLIQUE; }\n+  bool use_typo_metrics () const { return fsSelection & USE_TYPO_METRICS; }\n@@ -148,1 +170,1 @@\n-  bool subset (hb_subset_plan_t *plan) const\n+  bool subset (hb_subset_context_t *c) const\n@@ -150,10 +172,16 @@\n-    hb_blob_t *os2_blob = hb_sanitize_context_t ().reference_table<OS2> (plan->source);\n-    hb_blob_t *os2_prime_blob = hb_blob_create_sub_blob (os2_blob, 0, -1);\n-    \/\/ TODO(grieger): move to hb_blob_copy_writable_or_fail\n-    hb_blob_destroy (os2_blob);\n-\n-    OS2 *os2_prime = (OS2 *) hb_blob_get_data_writable (os2_prime_blob, nullptr);\n-    if (unlikely (!os2_prime)) {\n-      hb_blob_destroy (os2_prime_blob);\n-      return false;\n-    }\n+    TRACE_SUBSET (this);\n+    OS2 *os2_prime = c->serializer->embed (this);\n+    if (unlikely (!os2_prime)) return_trace (false);\n+\n+    hb_set_t unicodes;\n+    if (!c->plan->glyphs_requested->is_empty ())\n+    {\n+      hb_map_t unicode_glyphid_map;\n+\n+      OT::cmap::accelerator_t cmap;\n+      cmap.init (c->plan->source);\n+      cmap.collect_mapping (&unicodes, &unicode_glyphid_map);\n+      cmap.fini ();\n+\n+      if (c->plan->unicodes->is_empty ()) unicodes.clear ();\n+      else hb_set_set (&unicodes, c->plan->unicodes);\n@@ -161,0 +189,8 @@\n+      + unicode_glyphid_map.iter ()\n+      | hb_filter (c->plan->glyphs_requested, hb_second)\n+      | hb_map (hb_first)\n+      | hb_sink (unicodes)\n+      ;\n+    }\n+    \/* when --gids option is not used, no need to do collect_mapping that is\n+       * iterating all codepoints in each subtable, which is not efficient *\/\n@@ -162,3 +198,3 @@\n-    find_min_and_max_codepoint (plan->unicodes, &min_cp, &max_cp);\n-    os2_prime->usFirstCharIndex.set (min_cp);\n-    os2_prime->usLastCharIndex.set (max_cp);\n+    find_min_and_max_codepoint (unicodes.is_empty () ? c->plan->unicodes : &unicodes, &min_cp, &max_cp);\n+    os2_prime->usFirstCharIndex = min_cp;\n+    os2_prime->usLastCharIndex = max_cp;\n@@ -166,2 +202,1 @@\n-    _update_unicode_ranges (plan->unicodes, os2_prime->ulUnicodeRange);\n-    bool result = plan->add_table (HB_OT_TAG_OS2, os2_prime_blob);\n+    _update_unicode_ranges (unicodes.is_empty () ? c->plan->unicodes : &unicodes, os2_prime->ulUnicodeRange);\n@@ -169,2 +204,1 @@\n-    hb_blob_destroy (os2_prime_blob);\n-    return result;\n+    return_trace (true);\n@@ -176,0 +210,1 @@\n+    HBUINT32    newBits[4];\n@@ -177,1 +212,1 @@\n-      ulUnicodeRange[i].set (0);\n+      newBits[i] = 0;\n@@ -187,1 +222,1 @@\n-        ulUnicodeRange[block].set (ulUnicodeRange[block] | mask);\n+        newBits[block] = newBits[block] | mask;\n@@ -194,1 +229,1 @@\n-        ulUnicodeRange[1].set (ulUnicodeRange[1] | (1 << 25));\n+        newBits[1] = newBits[1] | (1 << 25);\n@@ -197,0 +232,3 @@\n+\n+    for (unsigned int i = 0; i < 4; i++)\n+      ulUnicodeRange[i] = ulUnicodeRange[i] & newBits[i]; \/\/ set bits only if set in the original\n@@ -200,2 +238,2 @@\n-                                                 uint16_t *min_cp, \/* OUT *\/\n-                                                 uint16_t *max_cp  \/* OUT *\/)\n+                                          uint16_t *min_cp, \/* OUT *\/\n+                                          uint16_t *max_cp  \/* OUT *\/)\n@@ -203,2 +241,2 @@\n-    *min_cp = codepoints->get_min ();\n-    *max_cp = codepoints->get_max ();\n+    *min_cp = hb_min (0xFFFFu, codepoints->get_min ());\n+    *max_cp = hb_min (0xFFFFu, codepoints->get_max ());\n@@ -207,8 +245,10 @@\n-  enum font_page_t {\n-    HEBREW_FONT_PAGE            = 0xB100, \/\/ Hebrew Windows 3.1 font page\n-    SIMP_ARABIC_FONT_PAGE       = 0xB200, \/\/ Simplified Arabic Windows 3.1 font page\n-    TRAD_ARABIC_FONT_PAGE       = 0xB300, \/\/ Traditional Arabic Windows 3.1 font page\n-    OEM_ARABIC_FONT_PAGE        = 0xB400, \/\/ OEM Arabic Windows 3.1 font page\n-    SIMP_FARSI_FONT_PAGE        = 0xBA00, \/\/ Simplified Farsi Windows 3.1 font page\n-    TRAD_FARSI_FONT_PAGE        = 0xBB00, \/\/ Traditional Farsi Windows 3.1 font page\n-    THAI_FONT_PAGE              = 0xDE00  \/\/ Thai Windows 3.1 font page\n+  \/* https:\/\/github.com\/Microsoft\/Font-Validator\/blob\/520aaae\/OTFontFileVal\/val_OS2.cs#L644-L681 *\/\n+  enum font_page_t\n+  {\n+    FONT_PAGE_HEBREW            = 0xB100, \/* Hebrew Windows 3.1 font page *\/\n+    FONT_PAGE_SIMP_ARABIC       = 0xB200, \/* Simplified Arabic Windows 3.1 font page *\/\n+    FONT_PAGE_TRAD_ARABIC       = 0xB300, \/* Traditional Arabic Windows 3.1 font page *\/\n+    FONT_PAGE_OEM_ARABIC        = 0xB400, \/* OEM Arabic Windows 3.1 font page *\/\n+    FONT_PAGE_SIMP_FARSI        = 0xBA00, \/* Simplified Farsi Windows 3.1 font page *\/\n+    FONT_PAGE_TRAD_FARSI        = 0xBB00, \/* Traditional Farsi Windows 3.1 font page *\/\n+    FONT_PAGE_THAI              = 0xDE00  \/* Thai Windows 3.1 font page *\/\n@@ -216,2 +256,0 @@\n-\n-  \/\/ https:\/\/github.com\/Microsoft\/Font-Validator\/blob\/520aaae\/OTFontFileVal\/val_OS2.cs#L644-L681\n@@ -221,0 +259,9 @@\n+  unsigned get_size () const\n+  {\n+    unsigned result = min_size;\n+    if (version >= 1) result += v1X.get_size ();\n+    if (version >= 2) result += v2X.get_size ();\n+    if (version >= 5) result += v5X.get_size ();\n+    return result;\n+  }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-os2-table.hh","additions":86,"deletions":39,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -36,13 +36,2 @@\n-  static int\n-  cmp (const void *_key, const void *_item)\n-  {\n-    hb_codepoint_t cp = *((hb_codepoint_t *) _key);\n-    const OS2Range *range = (OS2Range *) _item;\n-\n-    if (cp < range->start)\n-      return -1;\n-    else if (cp <= range->end)\n-      return 0;\n-    else\n-      return +1;\n-  }\n+  int cmp (hb_codepoint_t key) const\n+  { return (key < start) ? -1 : key <= end ? 0 : +1; }\n@@ -236,7 +225,2 @@\n-  OS2Range *range = (OS2Range*) hb_bsearch (&cp, _hb_os2_unicode_ranges,\n-                                            ARRAY_LENGTH (_hb_os2_unicode_ranges),\n-                                            sizeof (OS2Range),\n-                                            OS2Range::cmp);\n-  if (range != nullptr)\n-    return range->bit;\n-  return -1;\n+  auto *range = hb_sorted_array (_hb_os2_unicode_ranges).bsearch (cp);\n+  return range ? range->bit : -1;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-os2-unicode-ranges.hh","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-#define NUM_FORMAT1_NAMES 258\n-\n@@ -76,1 +74,1 @@\n-  bool subset (hb_subset_plan_t *plan) const\n+  void serialize (hb_serialize_context_t *c) const\n@@ -78,5 +76,2 @@\n-    unsigned int post_prime_length;\n-    hb_blob_t *post_blob = hb_sanitize_context_t ().reference_table<post>(plan->source);\n-    hb_blob_t *post_prime_blob = hb_blob_create_sub_blob (post_blob, 0, post::min_size);\n-    post *post_prime = (post *) hb_blob_get_data_writable (post_prime_blob, &post_prime_length);\n-    hb_blob_destroy (post_blob);\n+    post *post_prime = c->allocate_min<post> ();\n+    if (unlikely (!post_prime))  return;\n@@ -84,6 +79,3 @@\n-    if (unlikely (!post_prime || post_prime_length != post::min_size))\n-    {\n-      hb_blob_destroy (post_prime_blob);\n-      DEBUG_MSG(SUBSET, nullptr, \"Invalid source post table with length %d.\", post_prime_length);\n-      return false;\n-    }\n+    memcpy (post_prime, this, post::min_size);\n+    post_prime->version.major = 3; \/\/ Version 3 does not have any glyph names.\n+  }\n@@ -91,3 +83,5 @@\n-    post_prime->version.major.set (3); \/\/ Version 3 does not have any glyph names.\n-    bool result = plan->add_table (HB_OT_TAG_post, post_prime_blob);\n-    hb_blob_destroy (post_prime_blob);\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    post *post_prime = c->serializer->start_embed<post> ();\n+    if (unlikely (!post_prime)) return_trace (false);\n@@ -95,1 +89,4 @@\n-    return result;\n+    serialize (c->serializer);\n+    if (c->serializer->in_error () || c->serializer->ran_out_of_room) return_trace (false);\n+\n+    return_trace (true);\n@@ -134,1 +131,1 @@\n-      unsigned int len = MIN (buf_len - 1, s.length);\n+      unsigned int len = hb_min (buf_len - 1, s.length);\n@@ -161,1 +158,1 @@\n-        hb_sort_r (gids, count, sizeof (gids[0]), cmp_gids, (void *) this);\n+        hb_qsort (gids, count, sizeof (gids[0]), cmp_gids, (void *) this);\n@@ -171,2 +168,1 @@\n-      const uint16_t *gid = (const uint16_t *) hb_bsearch_r (hb_addressof (st), gids, count,\n-                                                             sizeof (gids[0]), cmp_key, (void *) this);\n+      auto* gid = hb_bsearch (st, gids, count, sizeof (gids[0]), cmp_key, (void *) this);\n@@ -182,0 +178,2 @@\n+    hb_blob_ptr_t<post> table;\n+\n@@ -187,1 +185,1 @@\n-        return NUM_FORMAT1_NAMES;\n+        return format1_names_length;\n@@ -215,1 +213,1 @@\n-        if (glyph >= NUM_FORMAT1_NAMES)\n+        if (glyph >= format1_names_length)\n@@ -225,1 +223,1 @@\n-      if (index < NUM_FORMAT1_NAMES)\n+      if (index < format1_names_length)\n@@ -227,1 +225,1 @@\n-      index -= NUM_FORMAT1_NAMES;\n+      index -= format1_names_length;\n@@ -241,1 +239,0 @@\n-    hb_blob_ptr_t<post> table;\n@@ -249,0 +246,2 @@\n+  bool has_data () const { return version.to_int (); }\n+\n@@ -263,1 +262,1 @@\n-  Fixed         italicAngle;            \/* Italic angle in counter-clockwise degrees\n+  HBFixed       italicAngle;            \/* Italic angle in counter-clockwise degrees\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-post-table.hh","additions":27,"deletions":28,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-  OT::GlyphID glyphs[SHAPING_TABLE_LAST - SHAPING_TABLE_FIRST + 1];\n-  OT::GlyphID substitutes[SHAPING_TABLE_LAST - SHAPING_TABLE_FIRST + 1];\n+  OT::HBGlyphID glyphs[SHAPING_TABLE_LAST - SHAPING_TABLE_FIRST + 1];\n+  OT::HBGlyphID substitutes[SHAPING_TABLE_LAST - SHAPING_TABLE_FIRST + 1];\n@@ -69,2 +69,2 @@\n-    glyphs[num_glyphs].set (u_glyph);\n-    substitutes[num_glyphs].set (s_glyph);\n+    glyphs[num_glyphs] = u_glyph;\n+    substitutes[num_glyphs] = s_glyph;\n@@ -80,1 +80,3 @@\n-  hb_stable_sort (&glyphs[0], num_glyphs, (int(*)(const OT::GlyphID*, const OT::GlyphID *)) OT::GlyphID::cmp, &substitutes[0]);\n+  hb_stable_sort (&glyphs[0], num_glyphs,\n+                  (int(*)(const OT::HBUINT16*, const OT::HBUINT16 *)) OT::HBGlyphID::cmp,\n+                  &substitutes[0]);\n@@ -89,1 +91,1 @@\n-                                       hb_array (glyphs, num_glyphs),\n+                                       hb_sorted_array (glyphs, num_glyphs),\n@@ -92,1 +94,0 @@\n-  \/* TODO sanitize the results? *\/\n@@ -94,1 +95,1 @@\n-  return ret ? c.copy<OT::SubstLookup> () : nullptr;\n+  return ret && !c.in_error () ? c.copy<OT::SubstLookup> () : nullptr;\n@@ -101,1 +102,1 @@\n-  OT::GlyphID first_glyphs[ARRAY_LENGTH_CONST (ligature_table)];\n+  OT::HBGlyphID first_glyphs[ARRAY_LENGTH_CONST (ligature_table)];\n@@ -107,1 +108,1 @@\n-  OT::GlyphID ligature_list[ARRAY_LENGTH_CONST (first_glyphs) * ARRAY_LENGTH_CONST(ligature_table[0].ligatures)];\n+  OT::HBGlyphID ligature_list[ARRAY_LENGTH_CONST (first_glyphs) * ARRAY_LENGTH_CONST(ligature_table[0].ligatures)];\n@@ -109,1 +110,1 @@\n-  OT::GlyphID component_list[ARRAY_LENGTH_CONST (ligature_list) * 1\/* One extra component per ligature *\/];\n+  OT::HBGlyphID component_list[ARRAY_LENGTH_CONST (ligature_list) * 1\/* One extra component per ligature *\/];\n@@ -121,1 +122,1 @@\n-    first_glyphs[num_first_glyphs].set (first_glyph);\n+    first_glyphs[num_first_glyphs] = first_glyph;\n@@ -126,1 +127,3 @@\n-  hb_stable_sort (&first_glyphs[0], num_first_glyphs, (int(*)(const OT::GlyphID*, const OT::GlyphID *)) OT::GlyphID::cmp, &first_glyphs_indirection[0]);\n+  hb_stable_sort (&first_glyphs[0], num_first_glyphs,\n+                  (int(*)(const OT::HBUINT16*, const OT::HBUINT16 *)) OT::HBGlyphID::cmp,\n+                  &first_glyphs_indirection[0]);\n@@ -145,1 +148,1 @@\n-      ligature_list[num_ligatures].set (ligature_glyph);\n+      ligature_list[num_ligatures] = ligature_glyph;\n@@ -147,1 +150,1 @@\n-      component_list[num_ligatures].set (second_glyph);\n+      component_list[num_ligatures] = second_glyph;\n@@ -162,1 +165,1 @@\n-                                         hb_array (first_glyphs, num_first_glyphs),\n+                                         hb_sorted_array (first_glyphs, num_first_glyphs),\n@@ -170,1 +173,1 @@\n-  return ret ? c.copy<OT::SubstLookup> () : nullptr;\n+  return ret && !c.in_error () ? c.copy<OT::SubstLookup> () : nullptr;\n@@ -230,2 +233,2 @@\n-  static_assert (sizeof (arabic_win1256_gsub_lookups.manifestData) \/ sizeof (ManifestLookup)\n-                 <= ARABIC_FALLBACK_MAX_LOOKUPS, \"\");\n+  static_assert (sizeof (arabic_win1256_gsub_lookups.manifestData) ==\n+                 ARABIC_FALLBACK_MAX_LOOKUPS * sizeof (ManifestLookup), \"\");\n@@ -292,1 +295,1 @@\n-    return const_cast<arabic_fallback_plan_t *> (&Null(arabic_fallback_plan_t));\n+    return const_cast<arabic_fallback_plan_t *> (&Null (arabic_fallback_plan_t));\n@@ -309,1 +312,1 @@\n-  return const_cast<arabic_fallback_plan_t *> (&Null(arabic_fallback_plan_t));\n+  return const_cast<arabic_fallback_plan_t *> (&Null (arabic_fallback_plan_t));\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-arabic-fallback.hh","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/* == Start of generated function == *\/\n+\/*\n+ * The following function is generated by running:\n+ *\n+ *   .\/gen-arabic-joining-list.py ArabicShaping.txt Scripts.txt\n+ *\n+ * on files with these headers:\n+ *\n+ * # ArabicShaping-13.0.0.txt\n+ * # Date: 2020-01-31, 23:55:00 GMT [KW, RP]\n+ * # Scripts-13.0.0.txt\n+ * # Date: 2020-01-22, 00:07:43 GMT\n+ *\/\n+\n+#ifndef HB_OT_SHAPE_COMPLEX_ARABIC_JOINING_LIST_HH\n+#define HB_OT_SHAPE_COMPLEX_ARABIC_JOINING_LIST_HH\n+\n+static bool\n+has_arabic_joining (hb_script_t script)\n+{\n+  \/* List of scripts that have data in arabic-table. *\/\n+  switch ((int) script)\n+  {\n+    case HB_SCRIPT_ADLAM:\n+    case HB_SCRIPT_ARABIC:\n+    case HB_SCRIPT_CHORASMIAN:\n+    case HB_SCRIPT_HANIFI_ROHINGYA:\n+    case HB_SCRIPT_MANDAIC:\n+    case HB_SCRIPT_MANICHAEAN:\n+    case HB_SCRIPT_MONGOLIAN:\n+    case HB_SCRIPT_NKO:\n+    case HB_SCRIPT_PHAGS_PA:\n+    case HB_SCRIPT_PSALTER_PAHLAVI:\n+    case HB_SCRIPT_SOGDIAN:\n+    case HB_SCRIPT_SYRIAC:\n+      return true;\n+\n+    default:\n+      return false;\n+  }\n+}\n+\n+\n+#endif \/* HB_OT_SHAPE_COMPLEX_ARABIC_JOINING_LIST_HH *\/\n+\n+\/* == End of generated function == *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-arabic-joining-list.hh","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -9,4 +9,4 @@\n- * # ArabicShaping-11.0.0.txt\n- * # Date: 2018-02-21, 14:50:00 GMT [KW, RP]\n- * # Blocks-11.0.0.txt\n- * # Date: 2017-10-16, 24:39:00 GMT [KW]\n+ * # ArabicShaping-13.0.0.txt\n+ * # Date: 2020-01-31, 23:55:00 GMT [KW, RP]\n+ * # Blocks-13.0.0.txt\n+ * # Date: 2019-07-10, 19:06:00 GMT [KW]\n@@ -20,4 +20,0 @@\n-#define X       JOINING_TYPE_X\n-#define R       JOINING_TYPE_R\n-#define T       JOINING_TYPE_T\n-#define U       JOINING_TYPE_U\n@@ -26,1 +22,0 @@\n-#define L       JOINING_TYPE_L\n@@ -29,0 +24,5 @@\n+#define L       JOINING_TYPE_L\n+#define R       JOINING_TYPE_R\n+#define T       JOINING_TYPE_T\n+#define U       JOINING_TYPE_U\n+#define X       JOINING_TYPE_X\n@@ -74,1 +74,1 @@\n-  \/* 0840 *\/ R,D,D,D,D,D,R,R,D,R,D,D,D,D,D,D,D,D,D,D,R,D,U,U,U,X,X,X,X,X,X,X,\n+  \/* 0840 *\/ R,D,D,D,D,D,R,R,D,R,D,D,D,D,D,D,D,D,D,D,R,D,R,R,R,X,X,X,X,X,X,X,\n@@ -83,2 +83,2 @@\n-  \/* 08A0 *\/ D,D,D,D,D,D,D,D,D,D,R,R,R,U,R,D,D,R,R,D,D,X,D,D,D,R,D,D,D,D,X,X,\n-  \/* 08C0 *\/ X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,\n+  \/* 08A0 *\/ D,D,D,D,D,D,D,D,D,D,R,R,R,U,R,D,D,R,R,D,D,X,D,D,D,R,D,D,D,D,D,D,\n+  \/* 08C0 *\/ D,D,D,D,D,D,D,D,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,\n@@ -142,1 +142,8 @@\n-#define joining_offset_0x110bdu 1219\n+#define joining_offset_0x10fb0u 1219\n+\n+  \/* Chorasmian *\/\n+\n+  \/* 10FA0 *\/                                 D,U,D,D,R,R,R,U,D,R,R,D,D,R,D,D,\n+  \/* 10FC0 *\/ U,D,R,R,D,U,U,U,U,R,D,L,\n+\n+#define joining_offset_0x110bdu 1247\n@@ -149,1 +156,1 @@\n-#define joining_offset_0x1e900u 1236\n+#define joining_offset_0x1e900u 1264\n@@ -155,1 +162,1 @@\n-  \/* 1E940 *\/ D,D,D,D,\n+  \/* 1E940 *\/ D,D,D,D,X,X,X,X,X,X,X,T,\n@@ -157,1 +164,1 @@\n-}; \/* Table items: 1304; occupancy: 56% *\/\n+}; \/* Table items: 1340; occupancy: 57% *\/\n@@ -186,0 +193,1 @@\n+      if (hb_in_range<hb_codepoint_t> (u, 0x10FB0u, 0x10FCBu)) return joining_table[u - 0x10FB0u + joining_offset_0x10fb0u];\n@@ -193,1 +201,1 @@\n-      if (hb_in_range<hb_codepoint_t> (u, 0x1E900u, 0x1E943u)) return joining_table[u - 0x1E900u + joining_offset_0x1e900u];\n+      if (hb_in_range<hb_codepoint_t> (u, 0x1E900u, 0x1E94Bu)) return joining_table[u - 0x1E900u + joining_offset_0x1e900u];\n@@ -202,4 +210,0 @@\n-#undef X\n-#undef R\n-#undef T\n-#undef U\n@@ -208,1 +212,0 @@\n-#undef L\n@@ -211,0 +214,5 @@\n+#undef L\n+#undef R\n+#undef T\n+#undef U\n+#undef X\n@@ -409,1 +417,0 @@\n-    { 0xFE88u, 0xFEF9u }, \/* ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM *\/\n@@ -411,1 +418,0 @@\n-    { 0xFE8Eu, 0xFEFBu }, \/* ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM *\/\n@@ -413,0 +419,2 @@\n+    { 0xFE88u, 0xFEF9u }, \/* ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM *\/\n+    { 0xFE8Eu, 0xFEFBu }, \/* ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM *\/\n@@ -415,1 +423,0 @@\n-    { 0xFE88u, 0xFEFAu }, \/* ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM *\/\n@@ -417,1 +424,0 @@\n-    { 0xFE8Eu, 0xFEFCu }, \/* ARABIC LIGATURE LAM WITH ALEF FINAL FORM *\/\n@@ -419,0 +425,2 @@\n+    { 0xFE88u, 0xFEFAu }, \/* ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM *\/\n+    { 0xFE8Eu, 0xFEFCu }, \/* ARABIC LIGATURE LAM WITH ALEF FINAL FORM *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-arabic-table.hh","additions":34,"deletions":26,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -228,2 +231,0 @@\n-  \/* And undo here. *\/\n-\n@@ -292,1 +293,1 @@\n-  unsigned int prev = (unsigned int) -1, state = 0;\n+  unsigned int prev = UINT_MAX, state = 0;\n@@ -318,1 +319,1 @@\n-    if (entry->prev_action != NONE && prev != (unsigned int) -1)\n+    if (entry->prev_action != NONE && prev != UINT_MAX)\n@@ -338,1 +339,1 @@\n-    if (entry->prev_action != NONE && prev != (unsigned int) -1)\n+    if (entry->prev_action != NONE && prev != UINT_MAX)\n@@ -386,0 +387,4 @@\n+#ifdef HB_NO_OT_SHAPE_COMPLEX_ARABIC_FALLBACK\n+  return;\n+#endif\n+\n@@ -470,1 +475,1 @@\n-      if (!hb_in_range<unsigned> (info[i - 1].arabic_shaping_action(), STCH_FIXED, STCH_REPEATING))\n+      if (!hb_in_range<uint8_t> (info[i - 1].arabic_shaping_action(), STCH_FIXED, STCH_REPEATING))\n@@ -491,1 +496,1 @@\n-             hb_in_range<unsigned> (info[i - 1].arabic_shaping_action(), STCH_FIXED, STCH_REPEATING))\n+             hb_in_range<uint8_t> (info[i - 1].arabic_shaping_action(), STCH_FIXED, STCH_REPEATING))\n@@ -509,1 +514,1 @@\n-             !hb_in_range<unsigned> (info[context - 1].arabic_shaping_action(), STCH_FIXED, STCH_REPEATING) &&\n+             !hb_in_range<uint8_t> (info[context - 1].arabic_shaping_action(), STCH_FIXED, STCH_REPEATING) &&\n@@ -600,1 +605,1 @@\n-\/* http:\/\/www.unicode.org\/reports\/tr53\/ *\/\n+\/* https:\/\/www.unicode.org\/reports\/tr53\/ *\/\n@@ -709,0 +714,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-arabic.cc","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -47,0 +51,23 @@\n+\n+\/* Same as default but no mark advance zeroing \/ fallback positioning.\n+ * Dumbest shaper ever, basically. *\/\n+const hb_ot_complex_shaper_t _hb_ot_complex_shaper_dumber =\n+{\n+  nullptr, \/* collect_features *\/\n+  nullptr, \/* override_features *\/\n+  nullptr, \/* data_create *\/\n+  nullptr, \/* data_destroy *\/\n+  nullptr, \/* preprocess_text *\/\n+  nullptr, \/* postprocess_glyphs *\/\n+  HB_OT_SHAPE_NORMALIZATION_MODE_DEFAULT,\n+  nullptr, \/* decompose *\/\n+  nullptr, \/* compose *\/\n+  nullptr, \/* setup_masks *\/\n+  HB_TAG_NONE, \/* gpos_tag *\/\n+  nullptr, \/* reorder_marks *\/\n+  HB_OT_SHAPE_ZERO_WIDTH_MARKS_NONE,\n+  false, \/* fallback_position *\/\n+};\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-default.cc","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -217,1 +221,2 @@\n-        if (font->has_glyph (0x25CCu))\n+      if (!(buffer->flags & HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE) &&\n+          font->has_glyph (0x25CCu))\n@@ -432,0 +437,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-hangul.cc","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -73,0 +77,4 @@\n+#ifdef HB_NO_OT_SHAPE_COMPLEX_HEBREW_FALLBACK\n+  return found;\n+#endif\n+\n@@ -175,0 +183,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-hebrew.cc","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,51 +37,18 @@\n-        8u, 8u, 4u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u,\n-        5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 4u, 8u, 6u, 6u, 16u, 16u,\n-        4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u,\n-        16u, 16u, 4u, 13u, 4u, 8u, 4u, 13u, 4u, 8u, 4u, 13u, 4u, 8u, 4u, 13u,\n-        4u, 8u, 4u, 13u, 8u, 8u, 4u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u,\n-        7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 4u, 8u,\n-        6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u,\n-        4u, 8u, 6u, 6u, 16u, 16u, 4u, 13u, 4u, 8u, 4u, 13u, 4u, 8u, 4u, 13u,\n-        4u, 8u, 4u, 13u, 4u, 8u, 4u, 13u, 8u, 8u, 4u, 8u, 5u, 7u, 7u, 7u,\n-        5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u,\n-        7u, 7u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u,\n-        6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 13u, 4u, 8u, 4u, 13u,\n-        4u, 8u, 4u, 13u, 4u, 8u, 4u, 13u, 4u, 8u, 8u, 8u, 4u, 8u, 5u, 7u,\n-        7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u, 5u, 7u, 7u, 7u, 5u, 8u,\n-        5u, 7u, 7u, 7u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u,\n-        4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 13u, 4u, 8u,\n-        4u, 13u, 4u, 8u, 4u, 13u, 4u, 8u, 4u, 13u, 4u, 8u, 4u, 13u, 4u, 13u,\n-        5u, 8u, 8u, 8u, 1u, 19u, 3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u,\n-        3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u,\n-        3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u, 4u, 10u, 5u, 10u, 5u, 10u,\n-        5u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 5u, 10u, 3u, 10u, 5u, 10u, 3u, 10u,\n-        4u, 10u, 5u, 10u, 3u, 10u, 4u, 10u, 5u, 10u, 3u, 10u, 4u, 10u, 5u, 10u,\n-        3u, 10u, 4u, 10u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u,\n-        3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u,\n-        1u, 16u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 3u, 13u,\n-        3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u,\n-        3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u,\n-        3u, 13u, 3u, 10u, 4u, 10u, 5u, 10u, 5u, 10u, 5u, 10u, 10u, 10u, 10u, 10u,\n-        10u, 10u, 5u, 10u, 3u, 10u, 5u, 10u, 3u, 10u, 4u, 10u, 5u, 10u, 3u, 10u,\n-        4u, 10u, 5u, 10u, 3u, 10u, 4u, 10u, 5u, 10u, 3u, 10u, 4u, 10u, 3u, 10u,\n-        3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u,\n-        1u, 16u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 3u, 13u,\n-        1u, 16u, 1u, 16u, 1u, 16u, 4u, 8u, 3u, 10u, 3u, 10u, 4u, 10u, 1u, 16u,\n-        3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u,\n-        3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u, 4u, 10u, 5u, 10u,\n-        5u, 10u, 5u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 5u, 10u, 3u, 10u, 5u, 10u,\n-        3u, 10u, 4u, 10u, 5u, 10u, 3u, 10u, 4u, 10u, 5u, 10u, 3u, 10u, 4u, 10u,\n-        5u, 10u, 3u, 10u, 4u, 10u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u,\n-        3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 3u, 13u, 1u, 16u,\n-        1u, 16u, 1u, 16u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 4u, 13u,\n-        3u, 10u, 4u, 8u, 3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u,\n-        4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u, 4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u,\n-        4u, 10u, 1u, 16u, 3u, 13u, 3u, 10u, 4u, 10u, 5u, 10u, 5u, 10u, 5u, 10u,\n-        10u, 10u, 10u, 10u, 10u, 10u, 5u, 10u, 3u, 10u, 5u, 10u, 3u, 10u, 4u, 10u,\n-        5u, 10u, 3u, 10u, 4u, 10u, 5u, 10u, 3u, 10u, 4u, 10u, 5u, 10u, 3u, 10u,\n-        4u, 10u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 3u, 13u,\n-        1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u,\n-        3u, 10u, 3u, 13u, 1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 1u, 16u, 3u, 13u,\n-        1u, 16u, 4u, 13u, 5u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 5u, 10u, 1u, 16u,\n-        3u, 10u, 5u, 10u, 5u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 5u, 10u, 1u, 16u,\n-        0\n+        8u, 8u, 4u, 8u, 5u, 7u, 5u, 8u, 4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u,\n+        4u, 13u, 4u, 8u, 8u, 8u, 5u, 7u, 5u, 8u, 4u, 8u, 6u, 6u, 16u, 16u,\n+        4u, 8u, 4u, 13u, 4u, 13u, 4u, 13u, 8u, 8u, 5u, 7u, 5u, 8u, 4u, 8u,\n+        6u, 6u, 16u, 16u, 4u, 8u, 4u, 8u, 4u, 13u, 8u, 8u, 5u, 7u, 5u, 8u,\n+        4u, 8u, 6u, 6u, 16u, 16u, 4u, 8u, 4u, 8u, 5u, 8u, 8u, 8u, 1u, 19u,\n+        3u, 17u, 3u, 17u, 4u, 17u, 1u, 16u, 5u, 10u, 5u, 10u, 10u, 10u, 5u, 10u,\n+        1u, 16u, 1u, 16u, 1u, 16u, 3u, 10u, 4u, 10u, 5u, 10u, 4u, 10u, 5u, 10u,\n+        3u, 10u, 5u, 10u, 3u, 17u, 3u, 17u, 3u, 17u, 3u, 17u, 4u, 17u, 1u, 16u,\n+        3u, 17u, 3u, 17u, 4u, 17u, 1u, 16u, 5u, 10u, 10u, 10u, 5u, 10u, 1u, 16u,\n+        1u, 16u, 3u, 10u, 4u, 10u, 5u, 10u, 4u, 10u, 5u, 10u, 5u, 10u, 3u, 10u,\n+        5u, 10u, 3u, 17u, 3u, 17u, 4u, 8u, 3u, 17u, 3u, 17u, 4u, 17u, 1u, 16u,\n+        3u, 17u, 1u, 16u, 5u, 10u, 10u, 10u, 5u, 10u, 1u, 16u, 1u, 16u, 3u, 10u,\n+        4u, 10u, 5u, 10u, 3u, 17u, 4u, 10u, 5u, 10u, 5u, 10u, 3u, 10u, 5u, 10u,\n+        3u, 17u, 4u, 13u, 4u, 8u, 3u, 17u, 3u, 17u, 4u, 17u, 1u, 16u, 3u, 17u,\n+        1u, 16u, 5u, 10u, 10u, 10u, 5u, 10u, 1u, 16u, 1u, 16u, 3u, 10u, 4u, 10u,\n+        5u, 10u, 3u, 17u, 4u, 10u, 5u, 10u, 5u, 10u, 3u, 10u, 5u, 10u, 1u, 17u,\n+        3u, 17u, 1u, 17u, 4u, 13u, 5u, 10u, 10u, 10u, 5u, 10u, 1u, 16u, 3u, 10u,\n+        5u, 10u, 5u, 10u, 10u, 10u, 5u, 10u, 1u, 16u, 0\n@@ -91,50 +58,18 @@\n-        1, 5, 3, 1, 4, 3, 1, 4,\n-        3, 1, 4, 3, 1, 5, 1, 1,\n-        5, 1, 1, 5, 1, 1, 5, 1,\n-        1, 10, 5, 10, 5, 10, 5, 10,\n-        5, 10, 1, 5, 3, 1, 4, 3,\n-        1, 4, 3, 1, 4, 3, 1, 5,\n-        1, 1, 5, 1, 1, 5, 1, 1,\n-        5, 1, 1, 10, 5, 10, 5, 10,\n-        5, 10, 5, 10, 1, 5, 3, 1,\n-        4, 3, 1, 4, 3, 1, 4, 3,\n-        1, 5, 1, 1, 5, 1, 1, 5,\n-        1, 1, 5, 1, 1, 10, 5, 10,\n-        5, 10, 5, 10, 5, 1, 5, 3,\n-        1, 4, 3, 1, 4, 3, 1, 4,\n-        3, 1, 5, 1, 1, 5, 1, 1,\n-        5, 1, 1, 5, 1, 1, 10, 5,\n-        10, 5, 10, 5, 10, 5, 10, 10,\n-        4, 1, 19, 11, 8, 7, 16, 11,\n-        8, 7, 16, 11, 8, 7, 16, 11,\n-        8, 7, 16, 11, 8, 7, 6, 6,\n-        6, 1, 1, 1, 6, 8, 6, 8,\n-        7, 6, 8, 7, 6, 8, 7, 6,\n-        8, 7, 8, 11, 16, 16, 16, 8,\n-        11, 16, 16, 16, 8, 11, 16, 16,\n-        16, 8, 11, 16, 16, 16, 8, 11,\n-        11, 8, 7, 16, 11, 8, 7, 16,\n-        11, 8, 7, 16, 11, 8, 7, 16,\n-        11, 8, 7, 6, 6, 6, 1, 1,\n-        1, 6, 8, 6, 8, 7, 6, 8,\n-        7, 6, 8, 7, 6, 8, 7, 8,\n-        11, 16, 16, 16, 8, 11, 16, 16,\n-        16, 8, 11, 16, 16, 16, 8, 11,\n-        16, 16, 16, 5, 8, 8, 7, 16,\n-        11, 8, 7, 16, 11, 8, 7, 16,\n-        11, 8, 7, 16, 11, 8, 7, 6,\n-        6, 6, 1, 1, 1, 6, 8, 6,\n-        8, 7, 6, 8, 7, 6, 8, 7,\n-        6, 8, 7, 8, 11, 16, 16, 16,\n-        8, 11, 16, 16, 16, 8, 11, 16,\n-        16, 16, 8, 11, 16, 16, 16, 10,\n-        8, 5, 11, 8, 7, 16, 11, 8,\n-        7, 16, 11, 8, 7, 16, 11, 8,\n-        7, 16, 11, 8, 7, 6, 6, 6,\n-        1, 1, 1, 6, 8, 6, 8, 7,\n-        6, 8, 7, 6, 8, 7, 6, 8,\n-        7, 8, 11, 16, 16, 16, 8, 11,\n-        16, 16, 16, 8, 11, 16, 16, 16,\n-        8, 11, 16, 16, 16, 8, 16, 11,\n-        16, 10, 6, 1, 1, 1, 6, 16,\n-        8, 6, 6, 1, 1, 1, 6, 16\n+        1, 5, 3, 4, 5, 1, 1, 5,\n+        10, 5, 1, 3, 4, 5, 1, 1,\n+        5, 10, 10, 10, 1, 3, 4, 5,\n+        1, 1, 5, 5, 10, 1, 3, 4,\n+        5, 1, 1, 5, 5, 4, 1, 19,\n+        15, 15, 14, 16, 6, 6, 1, 6,\n+        16, 16, 16, 8, 7, 6, 7, 6,\n+        8, 6, 15, 15, 15, 15, 14, 16,\n+        15, 15, 14, 16, 6, 1, 6, 16,\n+        16, 8, 7, 6, 7, 6, 6, 8,\n+        6, 15, 15, 5, 15, 15, 14, 16,\n+        15, 16, 6, 1, 6, 16, 16, 8,\n+        7, 6, 15, 7, 6, 6, 8, 6,\n+        15, 10, 5, 15, 15, 14, 16, 15,\n+        16, 6, 1, 6, 16, 16, 8, 7,\n+        6, 15, 7, 6, 6, 8, 6, 17,\n+        15, 17, 10, 6, 1, 6, 16, 8,\n+        6, 6, 1, 6, 16\n@@ -144,50 +79,18 @@\n-        0, 2, 8, 12, 14, 19, 23, 25,\n-        30, 34, 36, 41, 45, 47, 53, 55,\n-        57, 63, 65, 67, 73, 75, 77, 83,\n-        85, 87, 98, 104, 115, 121, 132, 138,\n-        149, 155, 166, 168, 174, 178, 180, 185,\n-        189, 191, 196, 200, 202, 207, 211, 213,\n-        219, 221, 223, 229, 231, 233, 239, 241,\n-        243, 249, 251, 253, 264, 270, 281, 287,\n-        298, 304, 315, 321, 332, 334, 340, 344,\n-        346, 351, 355, 357, 362, 366, 368, 373,\n-        377, 379, 385, 387, 389, 395, 397, 399,\n-        405, 407, 409, 415, 417, 419, 430, 436,\n-        447, 453, 464, 470, 481, 487, 489, 495,\n-        499, 501, 506, 510, 512, 517, 521, 523,\n-        528, 532, 534, 540, 542, 544, 550, 552,\n-        554, 560, 562, 564, 570, 572, 574, 585,\n-        591, 602, 608, 619, 625, 636, 642, 653,\n-        664, 669, 671, 691, 703, 712, 720, 737,\n-        749, 758, 766, 783, 795, 804, 812, 829,\n-        841, 850, 858, 875, 887, 896, 904, 911,\n-        918, 925, 927, 929, 931, 938, 947, 954,\n-        963, 971, 978, 987, 995, 1002, 1011, 1019,\n-        1026, 1035, 1043, 1052, 1064, 1081, 1098, 1115,\n-        1124, 1136, 1153, 1170, 1187, 1196, 1208, 1225,\n-        1242, 1259, 1268, 1280, 1297, 1314, 1331, 1340,\n-        1352, 1364, 1373, 1381, 1398, 1410, 1419, 1427,\n-        1444, 1456, 1465, 1473, 1490, 1502, 1511, 1519,\n-        1536, 1548, 1557, 1565, 1572, 1579, 1586, 1588,\n-        1590, 1592, 1599, 1608, 1615, 1624, 1632, 1639,\n-        1648, 1656, 1663, 1672, 1680, 1687, 1696, 1704,\n-        1713, 1725, 1742, 1759, 1776, 1785, 1797, 1814,\n-        1831, 1848, 1857, 1869, 1886, 1903, 1920, 1929,\n-        1941, 1958, 1975, 1992, 1998, 2007, 2016, 2024,\n-        2041, 2053, 2062, 2070, 2087, 2099, 2108, 2116,\n-        2133, 2145, 2154, 2162, 2179, 2191, 2200, 2208,\n-        2215, 2222, 2229, 2231, 2233, 2235, 2242, 2251,\n-        2258, 2267, 2275, 2282, 2291, 2299, 2306, 2315,\n-        2323, 2330, 2339, 2347, 2356, 2368, 2385, 2402,\n-        2419, 2428, 2440, 2457, 2474, 2491, 2500, 2512,\n-        2529, 2546, 2563, 2572, 2584, 2601, 2618, 2635,\n-        2646, 2655, 2661, 2673, 2682, 2690, 2707, 2719,\n-        2728, 2736, 2753, 2765, 2774, 2782, 2799, 2811,\n-        2820, 2828, 2845, 2857, 2866, 2874, 2881, 2888,\n-        2895, 2897, 2899, 2901, 2908, 2917, 2924, 2933,\n-        2941, 2948, 2957, 2965, 2972, 2981, 2989, 2996,\n-        3005, 3013, 3022, 3034, 3051, 3068, 3085, 3094,\n-        3106, 3123, 3140, 3157, 3166, 3178, 3195, 3212,\n-        3229, 3238, 3250, 3267, 3284, 3301, 3310, 3327,\n-        3339, 3356, 3367, 3374, 3376, 3378, 3380, 3387,\n-        3404, 3413, 3420, 3427, 3429, 3431, 3433, 3440\n+        0, 2, 8, 12, 17, 23, 25, 27,\n+        33, 44, 50, 52, 56, 61, 67, 69,\n+        71, 77, 88, 99, 110, 112, 116, 121,\n+        127, 129, 131, 137, 143, 154, 156, 160,\n+        165, 171, 173, 175, 181, 187, 192, 194,\n+        214, 230, 246, 261, 278, 285, 292, 294,\n+        301, 318, 335, 352, 361, 369, 376, 384,\n+        391, 400, 407, 423, 439, 455, 471, 486,\n+        503, 519, 535, 550, 567, 574, 576, 583,\n+        600, 617, 626, 634, 641, 649, 656, 663,\n+        672, 679, 695, 711, 717, 733, 749, 764,\n+        781, 797, 814, 821, 823, 830, 847, 864,\n+        873, 881, 888, 904, 912, 919, 926, 935,\n+        942, 958, 969, 975, 991, 1007, 1022, 1039,\n+        1055, 1072, 1079, 1081, 1088, 1105, 1122, 1131,\n+        1139, 1146, 1162, 1170, 1177, 1184, 1193, 1200,\n+        1218, 1234, 1252, 1263, 1270, 1272, 1279, 1296,\n+        1305, 1312, 1319, 1321, 1328\n@@ -196,1 +99,1 @@\n-static const short _indic_syllable_machine_indicies[] = {\n+static const unsigned char _indic_syllable_machine_indicies[] = {\n@@ -198,432 +101,168 @@\n-        5, 5, 4, 0, 4, 0, 6, 6,\n-        7, 1, 0, 8, 8, 7, 0, 7,\n-        0, 9, 9, 10, 1, 0, 11, 11,\n-        10, 0, 10, 0, 12, 12, 13, 1,\n-        0, 14, 14, 13, 0, 13, 0, 15,\n-        0, 0, 0, 1, 0, 16, 0, 17,\n-        0, 18, 12, 12, 13, 1, 0, 19,\n-        0, 20, 0, 21, 9, 9, 10, 1,\n-        0, 22, 0, 23, 0, 24, 6, 6,\n-        7, 1, 0, 25, 0, 26, 0, 2,\n-        3, 3, 4, 1, 0, 0, 0, 0,\n-        27, 0, 28, 3, 3, 4, 1, 0,\n-        28, 3, 3, 4, 1, 0, 0, 0,\n-        0, 29, 0, 30, 3, 3, 4, 1,\n-        0, 30, 3, 3, 4, 1, 0, 0,\n-        0, 0, 31, 0, 32, 3, 3, 4,\n-        1, 0, 32, 3, 3, 4, 1, 0,\n-        0, 0, 0, 33, 0, 34, 3, 3,\n-        4, 1, 0, 34, 3, 3, 4, 1,\n-        0, 0, 0, 0, 35, 0, 37, 36,\n-        38, 39, 39, 40, 37, 36, 41, 41,\n-        40, 36, 40, 36, 42, 42, 43, 37,\n-        36, 44, 44, 43, 36, 43, 36, 45,\n-        45, 46, 37, 36, 47, 47, 46, 36,\n-        46, 36, 48, 48, 49, 37, 36, 50,\n-        50, 49, 36, 49, 36, 51, 36, 36,\n-        36, 37, 36, 52, 36, 53, 36, 54,\n-        48, 48, 49, 37, 36, 55, 36, 56,\n-        36, 57, 45, 45, 46, 37, 36, 58,\n-        36, 59, 36, 60, 42, 42, 43, 37,\n-        36, 61, 36, 62, 36, 38, 39, 39,\n-        40, 37, 36, 36, 36, 36, 63, 36,\n-        64, 39, 39, 40, 37, 36, 64, 39,\n-        39, 40, 37, 36, 36, 36, 36, 65,\n-        36, 66, 39, 39, 40, 37, 36, 66,\n-        39, 39, 40, 37, 36, 36, 36, 36,\n-        67, 36, 68, 39, 39, 40, 37, 36,\n-        68, 39, 39, 40, 37, 36, 36, 36,\n-        36, 69, 36, 70, 39, 39, 40, 37,\n-        36, 70, 39, 39, 40, 37, 36, 36,\n-        36, 36, 71, 36, 73, 72, 74, 75,\n-        75, 76, 73, 72, 78, 78, 76, 77,\n-        76, 77, 79, 79, 80, 73, 72, 81,\n-        81, 80, 72, 80, 72, 82, 82, 83,\n-        73, 72, 84, 84, 83, 72, 83, 72,\n-        85, 85, 86, 73, 72, 87, 87, 86,\n-        72, 86, 72, 88, 72, 72, 72, 73,\n-        72, 89, 72, 90, 72, 91, 85, 85,\n-        86, 73, 72, 92, 72, 93, 72, 94,\n-        82, 82, 83, 73, 72, 95, 72, 96,\n-        72, 97, 79, 79, 80, 73, 72, 98,\n-        72, 99, 72, 74, 75, 75, 76, 73,\n-        72, 72, 72, 72, 100, 72, 101, 75,\n-        75, 76, 73, 72, 101, 75, 75, 76,\n-        73, 72, 72, 72, 72, 102, 72, 103,\n-        75, 75, 76, 73, 72, 103, 75, 75,\n-        76, 73, 72, 72, 72, 72, 104, 72,\n-        105, 75, 75, 76, 73, 72, 105, 75,\n-        75, 76, 73, 72, 72, 72, 72, 106,\n-        72, 107, 75, 75, 76, 73, 72, 109,\n-        108, 110, 111, 111, 112, 109, 108, 113,\n-        113, 112, 108, 112, 108, 114, 114, 115,\n-        109, 108, 116, 116, 115, 108, 115, 108,\n-        117, 117, 118, 109, 108, 119, 119, 118,\n-        108, 118, 108, 120, 120, 121, 109, 108,\n-        122, 122, 121, 108, 121, 108, 123, 108,\n-        108, 108, 109, 108, 124, 108, 125, 108,\n-        126, 120, 120, 121, 109, 108, 127, 108,\n-        128, 108, 129, 117, 117, 118, 109, 108,\n-        130, 108, 131, 108, 132, 114, 114, 115,\n-        109, 108, 133, 108, 134, 108, 110, 111,\n-        111, 112, 109, 108, 108, 108, 108, 135,\n-        108, 136, 111, 111, 112, 109, 108, 136,\n-        111, 111, 112, 109, 108, 108, 108, 108,\n-        137, 108, 138, 111, 111, 112, 109, 108,\n-        138, 111, 111, 112, 109, 108, 108, 108,\n-        108, 139, 108, 140, 111, 111, 112, 109,\n-        108, 140, 111, 111, 112, 109, 108, 108,\n-        108, 108, 141, 108, 142, 111, 111, 112,\n-        109, 108, 142, 111, 111, 112, 109, 108,\n-        108, 108, 108, 143, 108, 107, 75, 75,\n-        76, 73, 72, 72, 72, 72, 144, 72,\n-        78, 78, 76, 1, 0, 146, 145, 148,\n-        149, 150, 151, 152, 153, 76, 73, 147,\n-        154, 155, 155, 144, 147, 156, 157, 147,\n-        158, 159, 147, 161, 162, 163, 164, 4,\n-        1, 160, 165, 160, 160, 35, 160, 166,\n-        162, 167, 167, 4, 1, 160, 165, 160,\n-        162, 167, 167, 4, 1, 160, 165, 160,\n-        168, 160, 160, 160, 17, 169, 160, 1,\n-        160, 165, 160, 160, 160, 160, 160, 168,\n-        160, 170, 171, 172, 173, 4, 1, 160,\n-        165, 160, 160, 33, 160, 174, 171, 175,\n-        175, 4, 1, 160, 165, 160, 171, 175,\n-        175, 4, 1, 160, 165, 160, 176, 160,\n-        160, 160, 17, 177, 160, 1, 160, 165,\n-        160, 160, 160, 160, 160, 176, 160, 178,\n-        179, 180, 181, 4, 1, 160, 165, 160,\n-        160, 31, 160, 182, 179, 183, 183, 4,\n-        1, 160, 165, 160, 179, 183, 183, 4,\n-        1, 160, 165, 160, 184, 160, 160, 160,\n-        17, 185, 160, 1, 160, 165, 160, 160,\n-        160, 160, 160, 184, 160, 186, 187, 188,\n-        189, 4, 1, 160, 165, 160, 160, 29,\n-        160, 190, 187, 191, 191, 4, 1, 160,\n-        165, 160, 187, 191, 191, 4, 1, 160,\n-        165, 160, 192, 160, 160, 160, 17, 193,\n-        160, 1, 160, 165, 160, 160, 160, 160,\n-        160, 192, 160, 194, 195, 196, 197, 4,\n-        1, 160, 165, 160, 160, 27, 160, 198,\n-        195, 199, 199, 4, 1, 160, 165, 160,\n-        195, 199, 199, 4, 1, 160, 165, 160,\n-        17, 200, 160, 1, 160, 165, 160, 201,\n-        201, 160, 1, 160, 165, 160, 202, 160,\n-        160, 203, 160, 165, 160, 165, 160, 204,\n-        160, 205, 160, 202, 160, 160, 160, 160,\n-        165, 160, 17, 160, 201, 201, 160, 1,\n-        160, 165, 160, 201, 200, 160, 1, 160,\n-        165, 160, 206, 26, 207, 208, 7, 1,\n-        160, 165, 160, 26, 207, 208, 7, 1,\n-        160, 165, 160, 207, 207, 7, 1, 160,\n-        165, 160, 209, 23, 210, 211, 10, 1,\n-        160, 165, 160, 23, 210, 211, 10, 1,\n-        160, 165, 160, 210, 210, 10, 1, 160,\n-        165, 160, 212, 20, 213, 214, 13, 1,\n-        160, 165, 160, 20, 213, 214, 13, 1,\n-        160, 165, 160, 213, 213, 13, 1, 160,\n-        165, 160, 215, 17, 201, 216, 160, 1,\n-        160, 165, 160, 17, 201, 216, 160, 1,\n-        160, 165, 160, 194, 195, 199, 199, 4,\n-        1, 160, 165, 160, 194, 195, 196, 199,\n-        4, 1, 160, 165, 160, 160, 27, 160,\n-        192, 160, 217, 160, 201, 201, 160, 1,\n-        160, 165, 160, 160, 160, 160, 160, 192,\n-        160, 192, 160, 160, 160, 201, 201, 160,\n-        1, 160, 165, 160, 160, 160, 160, 160,\n-        192, 160, 192, 160, 160, 160, 201, 193,\n-        160, 1, 160, 165, 160, 160, 160, 160,\n-        160, 192, 160, 186, 187, 191, 191, 4,\n-        1, 160, 165, 160, 186, 187, 188, 191,\n-        4, 1, 160, 165, 160, 160, 29, 160,\n-        184, 160, 218, 160, 201, 201, 160, 1,\n-        160, 165, 160, 160, 160, 160, 160, 184,\n-        160, 184, 160, 160, 160, 201, 201, 160,\n-        1, 160, 165, 160, 160, 160, 160, 160,\n-        184, 160, 184, 160, 160, 160, 201, 185,\n-        160, 1, 160, 165, 160, 160, 160, 160,\n-        160, 184, 160, 178, 179, 183, 183, 4,\n-        1, 160, 165, 160, 178, 179, 180, 183,\n-        4, 1, 160, 165, 160, 160, 31, 160,\n-        176, 160, 219, 160, 201, 201, 160, 1,\n-        160, 165, 160, 160, 160, 160, 160, 176,\n-        160, 176, 160, 160, 160, 201, 201, 160,\n-        1, 160, 165, 160, 160, 160, 160, 160,\n-        176, 160, 176, 160, 160, 160, 201, 177,\n-        160, 1, 160, 165, 160, 160, 160, 160,\n-        160, 176, 160, 170, 171, 175, 175, 4,\n-        1, 160, 165, 160, 170, 171, 172, 175,\n-        4, 1, 160, 165, 160, 160, 33, 160,\n-        168, 160, 220, 160, 201, 201, 160, 1,\n-        160, 165, 160, 160, 160, 160, 160, 168,\n-        160, 168, 160, 160, 160, 201, 201, 160,\n-        1, 160, 165, 160, 160, 160, 160, 160,\n-        168, 160, 168, 160, 160, 160, 201, 169,\n-        160, 1, 160, 165, 160, 160, 160, 160,\n-        160, 168, 160, 161, 162, 167, 167, 4,\n-        1, 160, 165, 160, 161, 162, 163, 167,\n-        4, 1, 160, 165, 160, 160, 35, 160,\n-        222, 223, 224, 225, 40, 37, 221, 226,\n-        221, 221, 71, 221, 227, 223, 228, 225,\n-        40, 37, 221, 226, 221, 223, 228, 225,\n-        40, 37, 221, 226, 221, 229, 221, 221,\n-        221, 53, 230, 221, 37, 221, 226, 221,\n-        221, 221, 221, 221, 229, 221, 231, 232,\n-        233, 234, 40, 37, 221, 226, 221, 221,\n-        69, 221, 235, 232, 236, 236, 40, 37,\n-        221, 226, 221, 232, 236, 236, 40, 37,\n-        221, 226, 221, 237, 221, 221, 221, 53,\n-        238, 221, 37, 221, 226, 221, 221, 221,\n-        221, 221, 237, 221, 239, 240, 241, 242,\n-        40, 37, 221, 226, 221, 221, 67, 221,\n-        243, 240, 244, 244, 40, 37, 221, 226,\n-        221, 240, 244, 244, 40, 37, 221, 226,\n-        221, 245, 221, 221, 221, 53, 246, 221,\n-        37, 221, 226, 221, 221, 221, 221, 221,\n-        245, 221, 247, 248, 249, 250, 40, 37,\n-        221, 226, 221, 221, 65, 221, 251, 248,\n-        252, 252, 40, 37, 221, 226, 221, 248,\n-        252, 252, 40, 37, 221, 226, 221, 253,\n-        221, 221, 221, 53, 254, 221, 37, 221,\n-        226, 221, 221, 221, 221, 221, 253, 221,\n-        255, 256, 257, 258, 40, 37, 221, 226,\n-        221, 221, 63, 221, 259, 256, 260, 260,\n-        40, 37, 221, 226, 221, 256, 260, 260,\n-        40, 37, 221, 226, 221, 53, 261, 221,\n-        37, 221, 226, 221, 262, 262, 221, 37,\n-        221, 226, 221, 263, 221, 221, 264, 221,\n-        226, 221, 226, 221, 265, 221, 266, 221,\n-        263, 221, 221, 221, 221, 226, 221, 53,\n-        221, 262, 262, 221, 37, 221, 226, 221,\n-        262, 261, 221, 37, 221, 226, 221, 267,\n-        62, 268, 269, 43, 37, 221, 226, 221,\n-        62, 268, 269, 43, 37, 221, 226, 221,\n-        268, 268, 43, 37, 221, 226, 221, 270,\n-        59, 271, 272, 46, 37, 221, 226, 221,\n-        59, 271, 272, 46, 37, 221, 226, 221,\n-        271, 271, 46, 37, 221, 226, 221, 273,\n-        56, 274, 275, 49, 37, 221, 226, 221,\n-        56, 274, 275, 49, 37, 221, 226, 221,\n-        274, 274, 49, 37, 221, 226, 221, 276,\n-        53, 262, 277, 221, 37, 221, 226, 221,\n-        53, 262, 277, 221, 37, 221, 226, 221,\n-        255, 256, 260, 260, 40, 37, 221, 226,\n-        221, 255, 256, 257, 260, 40, 37, 221,\n-        226, 221, 221, 63, 221, 253, 221, 278,\n-        221, 262, 262, 221, 37, 221, 226, 221,\n-        221, 221, 221, 221, 253, 221, 253, 221,\n-        221, 221, 262, 262, 221, 37, 221, 226,\n-        221, 221, 221, 221, 221, 253, 221, 253,\n-        221, 221, 221, 262, 254, 221, 37, 221,\n-        226, 221, 221, 221, 221, 221, 253, 221,\n-        247, 248, 252, 252, 40, 37, 221, 226,\n-        221, 247, 248, 249, 252, 40, 37, 221,\n-        226, 221, 221, 65, 221, 245, 221, 279,\n-        221, 262, 262, 221, 37, 221, 226, 221,\n-        221, 221, 221, 221, 245, 221, 245, 221,\n-        221, 221, 262, 262, 221, 37, 221, 226,\n-        221, 221, 221, 221, 221, 245, 221, 245,\n-        221, 221, 221, 262, 246, 221, 37, 221,\n-        226, 221, 221, 221, 221, 221, 245, 221,\n-        239, 240, 244, 244, 40, 37, 221, 226,\n-        221, 239, 240, 241, 244, 40, 37, 221,\n-        226, 221, 221, 67, 221, 237, 221, 280,\n-        221, 262, 262, 221, 37, 221, 226, 221,\n-        221, 221, 221, 221, 237, 221, 237, 221,\n-        221, 221, 262, 262, 221, 37, 221, 226,\n-        221, 221, 221, 221, 221, 237, 221, 237,\n-        221, 221, 221, 262, 238, 221, 37, 221,\n-        226, 221, 221, 221, 221, 221, 237, 221,\n-        231, 232, 236, 236, 40, 37, 221, 226,\n-        221, 231, 232, 233, 236, 40, 37, 221,\n-        226, 221, 221, 69, 221, 229, 221, 281,\n-        221, 262, 262, 221, 37, 221, 226, 221,\n-        221, 221, 221, 221, 229, 221, 229, 221,\n-        221, 221, 262, 262, 221, 37, 221, 226,\n-        221, 221, 221, 221, 221, 229, 221, 229,\n-        221, 221, 221, 262, 230, 221, 37, 221,\n-        226, 221, 221, 221, 221, 221, 229, 221,\n-        70, 39, 39, 40, 37, 221, 222, 223,\n-        228, 225, 40, 37, 221, 226, 221, 283,\n-        151, 284, 284, 76, 73, 282, 154, 282,\n-        151, 284, 284, 76, 73, 282, 154, 282,\n-        285, 282, 282, 282, 90, 286, 282, 73,\n-        282, 154, 282, 282, 282, 282, 282, 285,\n-        282, 287, 288, 289, 290, 76, 73, 282,\n-        154, 282, 282, 106, 282, 291, 288, 292,\n-        292, 76, 73, 282, 154, 282, 288, 292,\n-        292, 76, 73, 282, 154, 282, 293, 282,\n-        282, 282, 90, 294, 282, 73, 282, 154,\n-        282, 282, 282, 282, 282, 293, 282, 295,\n-        296, 297, 298, 76, 73, 282, 154, 282,\n-        282, 104, 282, 299, 296, 300, 300, 76,\n-        73, 282, 154, 282, 296, 300, 300, 76,\n-        73, 282, 154, 282, 301, 282, 282, 282,\n-        90, 302, 282, 73, 282, 154, 282, 282,\n-        282, 282, 282, 301, 282, 303, 304, 305,\n-        306, 76, 73, 282, 154, 282, 282, 102,\n-        282, 307, 304, 308, 308, 76, 73, 282,\n-        154, 282, 304, 308, 308, 76, 73, 282,\n-        154, 282, 309, 282, 282, 282, 90, 310,\n-        282, 73, 282, 154, 282, 282, 282, 282,\n-        282, 309, 282, 311, 312, 313, 314, 76,\n-        73, 282, 154, 282, 282, 100, 282, 315,\n-        312, 316, 316, 76, 73, 282, 154, 282,\n-        312, 316, 316, 76, 73, 282, 154, 282,\n-        90, 317, 282, 73, 282, 154, 282, 318,\n-        318, 282, 73, 282, 154, 282, 319, 282,\n-        282, 320, 282, 154, 282, 154, 282, 321,\n-        282, 322, 282, 319, 282, 282, 282, 282,\n-        154, 282, 90, 282, 318, 318, 282, 73,\n-        282, 154, 282, 318, 317, 282, 73, 282,\n-        154, 282, 323, 99, 324, 325, 80, 73,\n-        282, 154, 282, 99, 324, 325, 80, 73,\n-        282, 154, 282, 324, 324, 80, 73, 282,\n-        154, 282, 326, 96, 327, 328, 83, 73,\n-        282, 154, 282, 96, 327, 328, 83, 73,\n-        282, 154, 282, 327, 327, 83, 73, 282,\n-        154, 282, 329, 93, 330, 331, 86, 73,\n-        282, 154, 282, 93, 330, 331, 86, 73,\n-        282, 154, 282, 330, 330, 86, 73, 282,\n-        154, 282, 332, 90, 318, 333, 282, 73,\n-        282, 154, 282, 90, 318, 333, 282, 73,\n-        282, 154, 282, 311, 312, 316, 316, 76,\n-        73, 282, 154, 282, 311, 312, 313, 316,\n-        76, 73, 282, 154, 282, 282, 100, 282,\n-        309, 282, 334, 282, 318, 318, 282, 73,\n-        282, 154, 282, 282, 282, 282, 282, 309,\n-        282, 309, 282, 282, 282, 318, 318, 282,\n-        73, 282, 154, 282, 282, 282, 282, 282,\n-        309, 282, 309, 282, 282, 282, 318, 310,\n-        282, 73, 282, 154, 282, 282, 282, 282,\n-        282, 309, 282, 303, 304, 308, 308, 76,\n-        73, 282, 154, 282, 303, 304, 305, 308,\n-        76, 73, 282, 154, 282, 282, 102, 282,\n-        301, 282, 335, 282, 318, 318, 282, 73,\n-        282, 154, 282, 282, 282, 282, 282, 301,\n-        282, 301, 282, 282, 282, 318, 318, 282,\n-        73, 282, 154, 282, 282, 282, 282, 282,\n-        301, 282, 301, 282, 282, 282, 318, 302,\n-        282, 73, 282, 154, 282, 282, 282, 282,\n-        282, 301, 282, 295, 296, 300, 300, 76,\n-        73, 282, 154, 282, 295, 296, 297, 300,\n-        76, 73, 282, 154, 282, 282, 104, 282,\n-        293, 282, 336, 282, 318, 318, 282, 73,\n-        282, 154, 282, 282, 282, 282, 282, 293,\n-        282, 293, 282, 282, 282, 318, 318, 282,\n-        73, 282, 154, 282, 282, 282, 282, 282,\n-        293, 282, 293, 282, 282, 282, 318, 294,\n-        282, 73, 282, 154, 282, 282, 282, 282,\n-        282, 293, 282, 287, 288, 292, 292, 76,\n-        73, 282, 154, 282, 287, 288, 289, 292,\n-        76, 73, 282, 154, 282, 282, 106, 282,\n-        285, 282, 337, 282, 318, 318, 282, 73,\n-        282, 154, 282, 282, 282, 282, 282, 285,\n-        282, 285, 282, 282, 282, 318, 318, 282,\n-        73, 282, 154, 282, 282, 282, 282, 282,\n-        285, 282, 285, 282, 282, 282, 318, 286,\n-        282, 73, 282, 154, 282, 282, 282, 282,\n-        282, 285, 282, 107, 75, 75, 76, 73,\n-        338, 338, 338, 338, 144, 338, 150, 151,\n-        284, 284, 76, 73, 282, 154, 282, 107,\n-        75, 75, 76, 73, 338, 340, 341, 342,\n-        343, 112, 109, 339, 344, 339, 339, 143,\n-        339, 345, 341, 343, 343, 112, 109, 339,\n-        344, 339, 341, 343, 343, 112, 109, 339,\n-        344, 339, 346, 339, 339, 339, 125, 347,\n-        339, 109, 339, 344, 339, 339, 339, 339,\n-        339, 346, 339, 348, 349, 350, 351, 112,\n-        109, 339, 344, 339, 339, 141, 339, 352,\n-        349, 353, 353, 112, 109, 339, 344, 339,\n-        349, 353, 353, 112, 109, 339, 344, 339,\n-        354, 339, 339, 339, 125, 355, 339, 109,\n-        339, 344, 339, 339, 339, 339, 339, 354,\n-        339, 356, 357, 358, 359, 112, 109, 339,\n-        344, 339, 339, 139, 339, 360, 357, 361,\n-        361, 112, 109, 339, 344, 339, 357, 361,\n-        361, 112, 109, 339, 344, 339, 362, 339,\n-        339, 339, 125, 363, 339, 109, 339, 344,\n-        339, 339, 339, 339, 339, 362, 339, 364,\n-        365, 366, 367, 112, 109, 339, 344, 339,\n-        339, 137, 339, 368, 365, 369, 369, 112,\n-        109, 339, 344, 339, 365, 369, 369, 112,\n-        109, 339, 344, 339, 370, 339, 339, 339,\n-        125, 371, 339, 109, 339, 344, 339, 339,\n-        339, 339, 339, 370, 339, 372, 373, 374,\n-        375, 112, 109, 339, 344, 339, 339, 135,\n-        339, 376, 373, 377, 377, 112, 109, 339,\n-        344, 339, 373, 377, 377, 112, 109, 339,\n-        344, 339, 125, 378, 339, 109, 339, 344,\n-        339, 379, 379, 339, 109, 339, 344, 339,\n-        380, 339, 339, 381, 339, 344, 339, 344,\n-        339, 382, 339, 383, 339, 380, 339, 339,\n-        339, 339, 344, 339, 125, 339, 379, 379,\n-        339, 109, 339, 344, 339, 379, 378, 339,\n-        109, 339, 344, 339, 384, 134, 385, 386,\n-        115, 109, 339, 344, 339, 134, 385, 386,\n-        115, 109, 339, 344, 339, 385, 385, 115,\n-        109, 339, 344, 339, 387, 131, 388, 389,\n-        118, 109, 339, 344, 339, 131, 388, 389,\n-        118, 109, 339, 344, 339, 388, 388, 118,\n-        109, 339, 344, 339, 390, 128, 391, 392,\n-        121, 109, 339, 344, 339, 128, 391, 392,\n-        121, 109, 339, 344, 339, 391, 391, 121,\n-        109, 339, 344, 339, 393, 125, 379, 394,\n-        339, 109, 339, 344, 339, 125, 379, 394,\n-        339, 109, 339, 344, 339, 372, 373, 377,\n-        377, 112, 109, 339, 344, 339, 372, 373,\n-        374, 377, 112, 109, 339, 344, 339, 339,\n-        135, 339, 370, 339, 395, 339, 379, 379,\n-        339, 109, 339, 344, 339, 339, 339, 339,\n-        339, 370, 339, 370, 339, 339, 339, 379,\n-        379, 339, 109, 339, 344, 339, 339, 339,\n-        339, 339, 370, 339, 370, 339, 339, 339,\n-        379, 371, 339, 109, 339, 344, 339, 339,\n-        339, 339, 339, 370, 339, 364, 365, 369,\n-        369, 112, 109, 339, 344, 339, 364, 365,\n-        366, 369, 112, 109, 339, 344, 339, 339,\n-        137, 339, 362, 339, 396, 339, 379, 379,\n-        339, 109, 339, 344, 339, 339, 339, 339,\n-        339, 362, 339, 362, 339, 339, 339, 379,\n-        379, 339, 109, 339, 344, 339, 339, 339,\n-        339, 339, 362, 339, 362, 339, 339, 339,\n-        379, 363, 339, 109, 339, 344, 339, 339,\n-        339, 339, 339, 362, 339, 356, 357, 361,\n-        361, 112, 109, 339, 344, 339, 356, 357,\n-        358, 361, 112, 109, 339, 344, 339, 339,\n-        139, 339, 354, 339, 397, 339, 379, 379,\n-        339, 109, 339, 344, 339, 339, 339, 339,\n-        339, 354, 339, 354, 339, 339, 339, 379,\n-        379, 339, 109, 339, 344, 339, 339, 339,\n-        339, 339, 354, 339, 354, 339, 339, 339,\n-        379, 355, 339, 109, 339, 344, 339, 339,\n-        339, 339, 339, 354, 339, 348, 349, 353,\n-        353, 112, 109, 339, 344, 339, 348, 349,\n-        350, 353, 112, 109, 339, 344, 339, 339,\n-        141, 339, 346, 339, 398, 339, 379, 379,\n-        339, 109, 339, 344, 339, 339, 339, 339,\n-        339, 346, 339, 346, 339, 339, 339, 379,\n-        379, 339, 109, 339, 344, 339, 339, 339,\n-        339, 339, 346, 339, 346, 339, 339, 339,\n-        379, 347, 339, 109, 339, 344, 339, 339,\n-        339, 339, 339, 346, 339, 340, 341, 343,\n-        343, 112, 109, 339, 344, 339, 148, 149,\n-        150, 151, 399, 284, 76, 73, 282, 154,\n-        155, 155, 144, 282, 282, 148, 282, 161,\n-        400, 163, 164, 4, 1, 160, 165, 160,\n-        160, 35, 160, 168, 149, 150, 151, 401,\n-        402, 76, 403, 160, 404, 160, 155, 144,\n-        160, 160, 168, 160, 107, 405, 405, 76,\n-        403, 160, 165, 160, 160, 144, 160, 406,\n-        160, 160, 407, 160, 404, 160, 404, 160,\n-        408, 160, 205, 160, 406, 160, 160, 160,\n-        160, 404, 160, 168, 160, 220, 107, 405,\n-        405, 76, 403, 160, 165, 160, 160, 160,\n-        160, 160, 168, 160, 410, 409, 411, 411,\n-        409, 146, 409, 412, 409, 411, 411, 409,\n-        146, 409, 412, 409, 413, 409, 409, 414,\n-        409, 412, 409, 412, 409, 415, 409, 416,\n-        409, 413, 409, 409, 409, 409, 412, 409,\n-        148, 338, 338, 338, 338, 338, 338, 338,\n-        338, 338, 155, 338, 338, 338, 338, 148,\n-        338, 0\n+        3, 3, 4, 0, 3, 3, 4, 1,\n+        0, 5, 3, 3, 4, 1, 0, 6,\n+        0, 7, 0, 8, 3, 3, 4, 1,\n+        0, 2, 3, 3, 4, 1, 0, 0,\n+        0, 0, 9, 0, 11, 12, 12, 13,\n+        14, 10, 14, 10, 12, 12, 13, 10,\n+        12, 12, 13, 14, 10, 15, 12, 12,\n+        13, 14, 10, 16, 10, 17, 10, 18,\n+        12, 12, 13, 14, 10, 11, 12, 12,\n+        13, 14, 10, 10, 10, 10, 19, 10,\n+        11, 12, 12, 13, 14, 10, 10, 10,\n+        10, 20, 10, 22, 23, 23, 24, 25,\n+        21, 21, 21, 21, 26, 21, 25, 21,\n+        23, 23, 24, 27, 23, 23, 24, 25,\n+        21, 28, 23, 23, 24, 25, 21, 29,\n+        21, 30, 21, 22, 23, 23, 24, 25,\n+        21, 31, 23, 23, 24, 25, 21, 33,\n+        34, 34, 35, 36, 32, 32, 32, 32,\n+        37, 32, 36, 32, 34, 34, 35, 32,\n+        34, 34, 35, 36, 32, 38, 34, 34,\n+        35, 36, 32, 39, 32, 40, 32, 33,\n+        34, 34, 35, 36, 32, 41, 34, 34,\n+        35, 36, 32, 23, 23, 24, 1, 0,\n+        43, 42, 45, 46, 47, 48, 49, 50,\n+        24, 25, 44, 51, 52, 52, 26, 44,\n+        53, 54, 55, 56, 57, 44, 59, 60,\n+        61, 62, 4, 1, 58, 63, 58, 58,\n+        9, 58, 58, 58, 64, 58, 65, 60,\n+        66, 66, 4, 1, 58, 63, 58, 58,\n+        58, 58, 58, 58, 64, 58, 60, 66,\n+        66, 4, 1, 58, 63, 58, 58, 58,\n+        58, 58, 58, 64, 58, 45, 58, 58,\n+        58, 67, 68, 58, 1, 58, 63, 58,\n+        58, 58, 58, 58, 45, 58, 69, 69,\n+        58, 1, 58, 63, 58, 63, 58, 58,\n+        70, 58, 63, 58, 63, 58, 63, 58,\n+        58, 58, 58, 63, 58, 45, 58, 71,\n+        58, 69, 69, 58, 1, 58, 63, 58,\n+        58, 58, 58, 58, 45, 58, 45, 58,\n+        58, 58, 69, 69, 58, 1, 58, 63,\n+        58, 58, 58, 58, 58, 45, 58, 45,\n+        58, 58, 58, 69, 68, 58, 1, 58,\n+        63, 58, 58, 58, 58, 58, 45, 58,\n+        72, 7, 73, 74, 4, 1, 58, 63,\n+        58, 7, 73, 74, 4, 1, 58, 63,\n+        58, 73, 73, 4, 1, 58, 63, 58,\n+        75, 76, 76, 4, 1, 58, 63, 58,\n+        67, 77, 58, 1, 58, 63, 58, 67,\n+        58, 69, 69, 58, 1, 58, 63, 58,\n+        69, 77, 58, 1, 58, 63, 58, 59,\n+        60, 66, 66, 4, 1, 58, 63, 58,\n+        58, 58, 58, 58, 58, 64, 58, 59,\n+        60, 61, 66, 4, 1, 58, 63, 58,\n+        58, 9, 58, 58, 58, 64, 58, 79,\n+        80, 81, 82, 13, 14, 78, 83, 78,\n+        78, 20, 78, 78, 78, 84, 78, 85,\n+        80, 86, 82, 13, 14, 78, 83, 78,\n+        78, 78, 78, 78, 78, 84, 78, 80,\n+        86, 82, 13, 14, 78, 83, 78, 78,\n+        78, 78, 78, 78, 84, 78, 87, 78,\n+        78, 78, 88, 89, 78, 14, 78, 83,\n+        78, 78, 78, 78, 78, 87, 78, 90,\n+        80, 91, 92, 13, 14, 78, 83, 78,\n+        78, 19, 78, 78, 78, 84, 78, 93,\n+        80, 86, 86, 13, 14, 78, 83, 78,\n+        78, 78, 78, 78, 78, 84, 78, 80,\n+        86, 86, 13, 14, 78, 83, 78, 78,\n+        78, 78, 78, 78, 84, 78, 87, 78,\n+        78, 78, 94, 89, 78, 14, 78, 83,\n+        78, 78, 78, 78, 78, 87, 78, 83,\n+        78, 78, 95, 78, 83, 78, 83, 78,\n+        83, 78, 78, 78, 78, 83, 78, 87,\n+        78, 96, 78, 94, 94, 78, 14, 78,\n+        83, 78, 78, 78, 78, 78, 87, 78,\n+        87, 78, 78, 78, 94, 94, 78, 14,\n+        78, 83, 78, 78, 78, 78, 78, 87,\n+        78, 97, 17, 98, 99, 13, 14, 78,\n+        83, 78, 17, 98, 99, 13, 14, 78,\n+        83, 78, 98, 98, 13, 14, 78, 83,\n+        78, 100, 101, 101, 13, 14, 78, 83,\n+        78, 88, 102, 78, 14, 78, 83, 78,\n+        94, 94, 78, 14, 78, 83, 78, 88,\n+        78, 94, 94, 78, 14, 78, 83, 78,\n+        94, 102, 78, 14, 78, 83, 78, 90,\n+        80, 86, 86, 13, 14, 78, 83, 78,\n+        78, 78, 78, 78, 78, 84, 78, 90,\n+        80, 91, 86, 13, 14, 78, 83, 78,\n+        78, 19, 78, 78, 78, 84, 78, 11,\n+        12, 12, 13, 14, 78, 79, 80, 86,\n+        82, 13, 14, 78, 83, 78, 78, 78,\n+        78, 78, 78, 84, 78, 104, 48, 105,\n+        105, 24, 25, 103, 51, 103, 103, 103,\n+        103, 103, 103, 55, 103, 48, 105, 105,\n+        24, 25, 103, 51, 103, 103, 103, 103,\n+        103, 103, 55, 103, 106, 103, 103, 103,\n+        107, 108, 103, 25, 103, 51, 103, 103,\n+        103, 103, 103, 106, 103, 47, 48, 109,\n+        110, 24, 25, 103, 51, 103, 103, 26,\n+        103, 103, 103, 55, 103, 106, 103, 103,\n+        103, 111, 108, 103, 25, 103, 51, 103,\n+        103, 103, 103, 103, 106, 103, 51, 103,\n+        103, 112, 103, 51, 103, 51, 103, 51,\n+        103, 103, 103, 103, 51, 103, 106, 103,\n+        113, 103, 111, 111, 103, 25, 103, 51,\n+        103, 103, 103, 103, 103, 106, 103, 106,\n+        103, 103, 103, 111, 111, 103, 25, 103,\n+        51, 103, 103, 103, 103, 103, 106, 103,\n+        114, 30, 115, 116, 24, 25, 103, 51,\n+        103, 30, 115, 116, 24, 25, 103, 51,\n+        103, 115, 115, 24, 25, 103, 51, 103,\n+        47, 48, 105, 105, 24, 25, 103, 51,\n+        103, 103, 103, 103, 103, 103, 55, 103,\n+        117, 118, 118, 24, 25, 103, 51, 103,\n+        107, 119, 103, 25, 103, 51, 103, 111,\n+        111, 103, 25, 103, 51, 103, 107, 103,\n+        111, 111, 103, 25, 103, 51, 103, 111,\n+        119, 103, 25, 103, 51, 103, 47, 48,\n+        109, 105, 24, 25, 103, 51, 103, 103,\n+        26, 103, 103, 103, 55, 103, 22, 23,\n+        23, 24, 25, 120, 120, 120, 120, 26,\n+        120, 22, 23, 23, 24, 25, 120, 122,\n+        123, 124, 125, 35, 36, 121, 126, 121,\n+        121, 37, 121, 121, 121, 127, 121, 128,\n+        123, 125, 125, 35, 36, 121, 126, 121,\n+        121, 121, 121, 121, 121, 127, 121, 123,\n+        125, 125, 35, 36, 121, 126, 121, 121,\n+        121, 121, 121, 121, 127, 121, 129, 121,\n+        121, 121, 130, 131, 121, 36, 121, 126,\n+        121, 121, 121, 121, 121, 129, 121, 122,\n+        123, 124, 52, 35, 36, 121, 126, 121,\n+        121, 37, 121, 121, 121, 127, 121, 129,\n+        121, 121, 121, 132, 131, 121, 36, 121,\n+        126, 121, 121, 121, 121, 121, 129, 121,\n+        126, 121, 121, 133, 121, 126, 121, 126,\n+        121, 126, 121, 121, 121, 121, 126, 121,\n+        129, 121, 134, 121, 132, 132, 121, 36,\n+        121, 126, 121, 121, 121, 121, 121, 129,\n+        121, 129, 121, 121, 121, 132, 132, 121,\n+        36, 121, 126, 121, 121, 121, 121, 121,\n+        129, 121, 135, 40, 136, 137, 35, 36,\n+        121, 126, 121, 40, 136, 137, 35, 36,\n+        121, 126, 121, 136, 136, 35, 36, 121,\n+        126, 121, 122, 123, 125, 125, 35, 36,\n+        121, 126, 121, 121, 121, 121, 121, 121,\n+        127, 121, 138, 139, 139, 35, 36, 121,\n+        126, 121, 130, 140, 121, 36, 121, 126,\n+        121, 132, 132, 121, 36, 121, 126, 121,\n+        130, 121, 132, 132, 121, 36, 121, 126,\n+        121, 132, 140, 121, 36, 121, 126, 121,\n+        45, 46, 47, 48, 109, 105, 24, 25,\n+        103, 51, 52, 52, 26, 103, 103, 45,\n+        55, 103, 59, 141, 61, 62, 4, 1,\n+        58, 63, 58, 58, 9, 58, 58, 58,\n+        64, 58, 45, 46, 47, 48, 142, 143,\n+        24, 144, 58, 145, 58, 52, 26, 58,\n+        58, 45, 55, 58, 22, 146, 146, 24,\n+        144, 58, 63, 58, 58, 26, 58, 145,\n+        58, 58, 147, 58, 145, 58, 145, 58,\n+        145, 58, 58, 58, 58, 145, 58, 45,\n+        58, 71, 22, 146, 146, 24, 144, 58,\n+        63, 58, 58, 58, 58, 58, 45, 58,\n+        149, 148, 150, 150, 148, 43, 148, 151,\n+        148, 150, 150, 148, 43, 148, 151, 148,\n+        151, 148, 148, 152, 148, 151, 148, 151,\n+        148, 151, 148, 148, 148, 148, 151, 148,\n+        45, 120, 120, 120, 120, 120, 120, 120,\n+        120, 120, 52, 120, 120, 120, 120, 45,\n+        120, 0\n@@ -632,54 +271,21 @@\n-static const short _indic_syllable_machine_trans_targs[] = {\n-        138, 160, 166, 2, 167, 3, 5, 170,\n-        6, 8, 173, 9, 11, 176, 12, 14,\n-        15, 159, 17, 18, 175, 20, 21, 172,\n-        23, 24, 169, 178, 182, 183, 187, 188,\n-        192, 193, 197, 198, 138, 221, 227, 36,\n-        228, 37, 39, 231, 40, 42, 234, 43,\n-        45, 237, 46, 48, 49, 220, 51, 52,\n-        236, 54, 55, 233, 57, 58, 230, 239,\n-        243, 244, 248, 249, 253, 254, 258, 260,\n-        138, 281, 287, 70, 288, 138, 71, 73,\n-        291, 74, 76, 294, 77, 79, 297, 80,\n-        82, 83, 280, 85, 86, 296, 88, 89,\n-        293, 91, 92, 290, 299, 303, 304, 308,\n-        309, 313, 314, 318, 138, 343, 349, 103,\n-        350, 104, 106, 353, 107, 109, 356, 110,\n-        112, 359, 113, 115, 116, 342, 118, 119,\n-        358, 121, 122, 355, 124, 125, 352, 361,\n-        365, 366, 370, 371, 375, 376, 380, 381,\n-        320, 138, 394, 138, 139, 200, 261, 263,\n-        319, 321, 283, 322, 382, 383, 392, 399,\n-        138, 140, 142, 33, 199, 162, 141, 32,\n-        143, 195, 144, 146, 31, 194, 145, 30,\n-        147, 190, 148, 150, 29, 189, 149, 28,\n-        151, 185, 152, 154, 27, 184, 153, 26,\n-        155, 180, 156, 158, 25, 179, 157, 1,\n-        165, 0, 161, 164, 163, 138, 168, 4,\n-        22, 171, 7, 19, 174, 10, 16, 177,\n-        13, 181, 186, 191, 196, 138, 201, 203,\n-        67, 259, 223, 202, 66, 204, 256, 205,\n-        207, 65, 255, 206, 64, 208, 251, 209,\n-        211, 63, 250, 210, 62, 212, 246, 213,\n-        215, 61, 245, 214, 60, 216, 241, 217,\n-        219, 59, 240, 218, 35, 226, 34, 222,\n-        225, 224, 138, 229, 38, 56, 232, 41,\n-        53, 235, 44, 50, 238, 47, 242, 247,\n-        252, 257, 138, 262, 100, 264, 316, 265,\n-        267, 99, 315, 266, 98, 268, 311, 269,\n-        271, 97, 310, 270, 96, 272, 306, 273,\n-        275, 95, 305, 274, 94, 276, 301, 277,\n-        279, 93, 300, 278, 69, 286, 68, 282,\n-        285, 284, 138, 289, 72, 90, 292, 75,\n-        87, 295, 78, 84, 298, 81, 302, 307,\n-        312, 317, 138, 138, 323, 325, 134, 133,\n-        345, 324, 326, 378, 327, 329, 132, 377,\n-        328, 131, 330, 373, 331, 333, 130, 372,\n-        332, 129, 334, 368, 335, 337, 128, 367,\n-        336, 127, 338, 363, 339, 341, 126, 362,\n-        340, 102, 348, 101, 344, 347, 346, 138,\n-        351, 105, 123, 354, 108, 120, 357, 111,\n-        117, 360, 114, 364, 369, 374, 379, 135,\n-        384, 385, 391, 386, 388, 136, 387, 390,\n-        389, 138, 393, 137, 396, 395, 398, 397,\n-        138\n+static const unsigned char _indic_syllable_machine_trans_targs[] = {\n+        39, 45, 50, 2, 51, 5, 6, 53,\n+        57, 58, 39, 67, 11, 73, 68, 14,\n+        15, 75, 80, 81, 84, 39, 89, 21,\n+        95, 90, 98, 39, 24, 25, 97, 103,\n+        39, 112, 30, 118, 113, 121, 33, 34,\n+        120, 126, 39, 137, 39, 40, 60, 85,\n+        87, 105, 106, 91, 107, 127, 128, 99,\n+        135, 140, 39, 41, 43, 8, 59, 46,\n+        54, 42, 1, 44, 48, 0, 47, 49,\n+        52, 3, 4, 55, 7, 56, 39, 61,\n+        63, 18, 83, 69, 76, 62, 9, 64,\n+        78, 71, 65, 17, 82, 66, 10, 70,\n+        72, 74, 12, 13, 77, 16, 79, 39,\n+        86, 26, 88, 101, 93, 19, 104, 20,\n+        92, 94, 96, 22, 23, 100, 27, 102,\n+        39, 39, 108, 110, 28, 35, 114, 122,\n+        109, 111, 124, 116, 29, 115, 117, 119,\n+        31, 32, 123, 36, 125, 129, 130, 134,\n+        131, 132, 37, 133, 39, 136, 38, 138,\n+        139\n@@ -690,52 +296,19 @@\n-        0, 0, 2, 0, 0, 2, 0, 0,\n-        0, 2, 0, 0, 2, 0, 0, 2,\n-        0, 0, 2, 2, 2, 2, 2, 2,\n-        2, 2, 2, 2, 3, 0, 2, 0,\n-        2, 0, 0, 2, 0, 0, 2, 0,\n-        0, 2, 0, 0, 0, 2, 0, 0,\n-        2, 0, 0, 2, 0, 0, 2, 2,\n-        2, 2, 2, 2, 2, 2, 2, 2,\n-        4, 0, 2, 0, 2, 5, 0, 0,\n-        2, 0, 0, 2, 0, 0, 2, 0,\n-        0, 0, 2, 0, 0, 2, 0, 0,\n-        2, 0, 0, 2, 6, 2, 6, 2,\n-        6, 2, 6, 2, 7, 0, 2, 0,\n-        2, 0, 0, 2, 0, 0, 2, 0,\n-        0, 2, 0, 0, 0, 2, 0, 0,\n-        2, 0, 0, 2, 0, 0, 2, 2,\n-        2, 2, 2, 2, 2, 2, 2, 2,\n-        6, 8, 0, 11, 2, 2, 6, 0,\n-        12, 12, 0, 2, 6, 2, 2, 0,\n-        13, 2, 0, 0, 2, 0, 2, 0,\n-        2, 2, 2, 0, 0, 2, 2, 0,\n-        2, 2, 2, 0, 0, 2, 2, 0,\n-        2, 2, 2, 0, 0, 2, 2, 0,\n-        2, 2, 2, 0, 0, 2, 2, 0,\n-        2, 0, 0, 0, 0, 14, 2, 0,\n-        0, 2, 0, 0, 2, 0, 0, 2,\n-        0, 2, 2, 2, 2, 15, 2, 0,\n-        0, 2, 0, 2, 0, 2, 2, 2,\n-        0, 0, 2, 2, 0, 2, 2, 2,\n-        0, 0, 2, 2, 0, 2, 2, 2,\n-        0, 0, 2, 2, 0, 2, 2, 2,\n-        0, 0, 2, 2, 0, 2, 0, 0,\n-        0, 0, 16, 2, 0, 0, 2, 0,\n-        0, 2, 0, 0, 2, 0, 2, 2,\n-        2, 2, 17, 6, 0, 6, 2, 6,\n-        0, 0, 6, 6, 0, 6, 2, 6,\n-        0, 0, 6, 6, 0, 6, 2, 6,\n-        0, 0, 6, 6, 0, 6, 2, 6,\n-        0, 0, 6, 6, 0, 2, 0, 0,\n-        0, 0, 18, 2, 0, 0, 2, 0,\n-        0, 2, 0, 0, 2, 0, 2, 2,\n-        2, 2, 19, 20, 2, 0, 0, 0,\n-        0, 2, 2, 2, 2, 0, 0, 2,\n-        2, 0, 2, 2, 2, 0, 0, 2,\n-        2, 0, 2, 2, 2, 0, 0, 2,\n-        2, 0, 2, 2, 2, 0, 0, 2,\n-        2, 0, 2, 0, 0, 0, 0, 21,\n-        2, 0, 0, 2, 0, 0, 2, 0,\n-        0, 2, 0, 2, 2, 2, 2, 0,\n-        0, 22, 22, 0, 0, 0, 0, 0,\n-        0, 23, 2, 0, 0, 0, 0, 0,\n-        24\n+        2, 2, 3, 2, 0, 2, 0, 0,\n+        0, 2, 2, 2, 2, 4, 2, 0,\n+        5, 0, 5, 6, 0, 0, 5, 2,\n+        7, 2, 0, 2, 0, 2, 0, 0,\n+        2, 2, 8, 0, 11, 2, 2, 5,\n+        0, 12, 12, 0, 2, 5, 2, 5,\n+        2, 0, 13, 2, 0, 0, 2, 0,\n+        2, 2, 0, 2, 2, 0, 0, 2,\n+        2, 0, 0, 0, 0, 2, 14, 2,\n+        0, 0, 2, 0, 2, 2, 0, 2,\n+        2, 2, 2, 0, 2, 2, 0, 0,\n+        2, 2, 0, 0, 0, 0, 2, 15,\n+        5, 0, 5, 2, 2, 0, 5, 0,\n+        0, 2, 5, 0, 0, 0, 0, 2,\n+        16, 17, 2, 0, 0, 0, 0, 2,\n+        2, 2, 2, 2, 0, 0, 2, 2,\n+        0, 0, 0, 0, 2, 0, 18, 18,\n+        0, 0, 0, 0, 19, 2, 0, 0,\n+        0\n@@ -749,0 +322,1 @@\n+        0, 0, 0, 0, 0, 0, 0, 9,\n@@ -761,34 +335,1 @@\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 9, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0\n@@ -802,0 +343,1 @@\n+        0, 0, 0, 0, 0, 0, 0, 10,\n@@ -814,34 +356,1 @@\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 10, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0\n@@ -852,49 +361,17 @@\n-        1, 1, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 1, 1, 1, 1,\n-        1, 1, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 73, 73, 78, 78,\n-        73, 73, 73, 73, 73, 73, 73, 73,\n-        73, 73, 73, 73, 73, 73, 73, 73,\n-        73, 73, 73, 73, 73, 73, 73, 73,\n-        73, 73, 73, 73, 73, 109, 109, 109,\n-        109, 109, 109, 109, 109, 109, 109, 109,\n-        109, 109, 109, 109, 109, 109, 109, 109,\n-        109, 109, 109, 109, 109, 109, 109, 109,\n-        109, 109, 109, 109, 109, 109, 109, 73,\n-        1, 146, 0, 161, 161, 161, 161, 161,\n-        161, 161, 161, 161, 161, 161, 161, 161,\n-        161, 161, 161, 161, 161, 161, 161, 161,\n-        161, 161, 161, 161, 161, 161, 161, 161,\n-        161, 161, 161, 161, 161, 161, 161, 161,\n-        161, 161, 161, 161, 161, 161, 161, 161,\n-        161, 161, 161, 161, 161, 161, 161, 161,\n-        161, 161, 161, 161, 161, 161, 161, 161,\n-        222, 222, 222, 222, 222, 222, 222, 222,\n-        222, 222, 222, 222, 222, 222, 222, 222,\n-        222, 222, 222, 222, 222, 222, 222, 222,\n-        222, 222, 222, 222, 222, 222, 222, 222,\n-        222, 222, 222, 222, 222, 222, 222, 222,\n-        222, 222, 222, 222, 222, 222, 222, 222,\n-        222, 222, 222, 222, 222, 222, 222, 222,\n-        222, 222, 222, 222, 222, 283, 283, 283,\n-        283, 283, 283, 283, 283, 283, 283, 283,\n-        283, 283, 283, 283, 283, 283, 283, 283,\n-        283, 283, 283, 283, 283, 283, 283, 283,\n-        283, 283, 283, 283, 283, 283, 283, 283,\n-        283, 283, 283, 283, 283, 283, 283, 283,\n-        283, 283, 283, 283, 283, 283, 283, 283,\n-        283, 283, 283, 283, 283, 283, 283, 339,\n-        283, 339, 340, 340, 340, 340, 340, 340,\n-        340, 340, 340, 340, 340, 340, 340, 340,\n-        340, 340, 340, 340, 340, 340, 340, 340,\n-        340, 340, 340, 340, 340, 340, 340, 340,\n-        340, 340, 340, 340, 340, 340, 340, 340,\n-        340, 340, 340, 340, 340, 340, 340, 340,\n-        340, 340, 340, 340, 340, 340, 340, 340,\n-        340, 340, 340, 340, 340, 340, 283, 161,\n-        161, 161, 161, 161, 161, 161, 161, 161,\n-        410, 410, 410, 410, 410, 410, 410, 339\n+        1, 11, 11, 11, 11, 11, 11, 11,\n+        11, 11, 11, 22, 22, 28, 22, 22,\n+        22, 22, 22, 22, 33, 33, 33, 33,\n+        33, 33, 33, 33, 33, 1, 43, 0,\n+        59, 59, 59, 59, 59, 59, 59, 59,\n+        59, 59, 59, 59, 59, 59, 59, 59,\n+        59, 59, 59, 59, 79, 79, 79, 79,\n+        79, 79, 79, 79, 79, 79, 79, 79,\n+        79, 79, 79, 79, 79, 79, 79, 79,\n+        79, 79, 79, 79, 79, 104, 104, 104,\n+        104, 104, 104, 104, 104, 104, 104, 104,\n+        104, 104, 104, 104, 104, 104, 104, 104,\n+        104, 121, 121, 122, 122, 122, 122, 122,\n+        122, 122, 122, 122, 122, 122, 122, 122,\n+        122, 122, 122, 122, 122, 122, 122, 104,\n+        59, 59, 59, 59, 59, 59, 59, 149,\n+        149, 149, 149, 149, 121\n@@ -903,2 +380,2 @@\n-static const int indic_syllable_machine_start = 138;\n-static const int indic_syllable_machine_first_final = 138;\n+static const int indic_syllable_machine_start = 39;\n+static const int indic_syllable_machine_first_final = 39;\n@@ -907,1 +384,1 @@\n-static const int indic_syllable_machine_en_main = 138;\n+static const int indic_syllable_machine_en_main = 39;\n@@ -914,1 +391,1 @@\n-#line 92 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 93 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -921,1 +398,1 @@\n-      info[i].syllable() = (syllable_serial << 4) | syllable_type; \\\n+      info[i].syllable() = (syllable_serial << 4) | indic_##syllable_type; \\\n@@ -927,1 +404,1 @@\n-find_syllables (hb_buffer_t *buffer)\n+find_syllables_indic (hb_buffer_t *buffer)\n@@ -933,1 +410,1 @@\n-#line 934 \"hb-ot-shape-complex-indic-machine.hh\"\n+#line 411 \"hb-ot-shape-complex-indic-machine.hh\"\n@@ -941,1 +418,1 @@\n-#line 112 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 113 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -949,1 +426,1 @@\n-#line 950 \"hb-ot-shape-complex-indic-machine.hh\"\n+#line 427 \"hb-ot-shape-complex-indic-machine.hh\"\n@@ -954,1 +431,1 @@\n-        const short *_inds;\n+        const unsigned char *_inds;\n@@ -963,1 +440,1 @@\n-#line 964 \"hb-ot-shape-complex-indic-machine.hh\"\n+#line 441 \"hb-ot-shape-complex-indic-machine.hh\"\n@@ -985,20 +462,0 @@\n-        case 14:\n-#line 83 \"hb-ot-shape-complex-indic-machine.rl\"\n-        {te = p+1;{ found_syllable (consonant_syllable); }}\n-        break;\n-        case 16:\n-#line 84 \"hb-ot-shape-complex-indic-machine.rl\"\n-        {te = p+1;{ found_syllable (vowel_syllable); }}\n-        break;\n-        case 21:\n-#line 85 \"hb-ot-shape-complex-indic-machine.rl\"\n-        {te = p+1;{ found_syllable (standalone_cluster); }}\n-        break;\n-        case 24:\n-#line 86 \"hb-ot-shape-complex-indic-machine.rl\"\n-        {te = p+1;{ found_syllable (symbol_cluster); }}\n-        break;\n-        case 18:\n-#line 87 \"hb-ot-shape-complex-indic-machine.rl\"\n-        {te = p+1;{ found_syllable (broken_cluster); }}\n-        break;\n@@ -1006,1 +463,1 @@\n-#line 88 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 89 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1010,1 +467,1 @@\n-#line 83 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 84 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1013,2 +470,2 @@\n-        case 15:\n-#line 84 \"hb-ot-shape-complex-indic-machine.rl\"\n+        case 14:\n+#line 85 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1017,2 +474,2 @@\n-        case 20:\n-#line 85 \"hb-ot-shape-complex-indic-machine.rl\"\n+        case 17:\n+#line 86 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1021,2 +478,2 @@\n-        case 23:\n-#line 86 \"hb-ot-shape-complex-indic-machine.rl\"\n+        case 19:\n+#line 87 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1025,2 +482,2 @@\n-        case 17:\n-#line 87 \"hb-ot-shape-complex-indic-machine.rl\"\n+        case 15:\n+#line 88 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1029,2 +486,2 @@\n-        case 19:\n-#line 88 \"hb-ot-shape-complex-indic-machine.rl\"\n+        case 16:\n+#line 89 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1034,1 +491,1 @@\n-#line 83 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 84 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1038,1 +495,1 @@\n-#line 84 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 85 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1042,1 +499,1 @@\n-#line 85 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 86 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1046,1 +503,1 @@\n-#line 86 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 87 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1050,1 +507,1 @@\n-#line 87 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 88 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1053,1 +510,1 @@\n-        case 5:\n+        case 6:\n@@ -1068,1 +525,1 @@\n-        case 22:\n+        case 18:\n@@ -1071,1 +528,1 @@\n-#line 83 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 84 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1074,1 +531,1 @@\n-        case 6:\n+        case 5:\n@@ -1077,1 +534,1 @@\n-#line 87 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 88 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1083,1 +540,1 @@\n-#line 88 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 89 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1086,1 +543,1 @@\n-#line 1087 \"hb-ot-shape-complex-indic-machine.hh\"\n+#line 544 \"hb-ot-shape-complex-indic-machine.hh\"\n@@ -1095,1 +552,1 @@\n-#line 1096 \"hb-ot-shape-complex-indic-machine.hh\"\n+#line 553 \"hb-ot-shape-complex-indic-machine.hh\"\n@@ -1111,1 +568,1 @@\n-#line 120 \"hb-ot-shape-complex-indic-machine.rl\"\n+#line 121 \"hb-ot-shape-complex-indic-machine.rl\"\n@@ -1115,0 +572,2 @@\n+#undef found_syllable\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-indic-machine.hh","additions":323,"deletions":864,"binary":false,"changes":1187,"status":"modified"},{"patch":"@@ -9,6 +9,6 @@\n- * # IndicSyllabicCategory-11.0.0.txt\n- * # Date: 2018-05-21, 18:33:00 GMT [KW, RP]\n- * # IndicPositionalCategory-11.0.0.txt\n- * # Date: 2018-02-05, 16:21:00 GMT [KW, RP]\n- * # Blocks-11.0.0.txt\n- * # Date: 2017-10-16, 24:39:00 GMT [KW]\n+ * # IndicSyllabicCategory-13.0.0.txt\n+ * # Date: 2019-07-22, 19:55:00 GMT [KW, RP]\n+ * # IndicPositionalCategory-13.0.0.txt\n+ * # Date: 2019-07-23, 00:01:00 GMT [KW, RP]\n+ * # Blocks-13.0.0.txt\n+ * # Date: 2019-07-10, 19:06:00 GMT [KW]\n@@ -17,0 +17,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -22,52 +26,54 @@\n-#define ISC_A   INDIC_SYLLABIC_CATEGORY_AVAGRAHA                \/*  16 chars; Avagraha *\/\n-#define ISC_Bi  INDIC_SYLLABIC_CATEGORY_BINDU                   \/*  83 chars; Bindu *\/\n-#define ISC_BJN INDIC_SYLLABIC_CATEGORY_BRAHMI_JOINING_NUMBER   \/*  20 chars; Brahmi_Joining_Number *\/\n-#define ISC_Ca  INDIC_SYLLABIC_CATEGORY_CANTILLATION_MARK       \/*  58 chars; Cantillation_Mark *\/\n-#define ISC_C   INDIC_SYLLABIC_CATEGORY_CONSONANT               \/* 2110 chars; Consonant *\/\n-#define ISC_CD  INDIC_SYLLABIC_CATEGORY_CONSONANT_DEAD          \/*  10 chars; Consonant_Dead *\/\n-#define ISC_CF  INDIC_SYLLABIC_CATEGORY_CONSONANT_FINAL         \/*  67 chars; Consonant_Final *\/\n-#define ISC_CHL INDIC_SYLLABIC_CATEGORY_CONSONANT_HEAD_LETTER   \/*   5 chars; Consonant_Head_Letter *\/\n-#define ISC_CIP INDIC_SYLLABIC_CATEGORY_CONSONANT_INITIAL_POSTFIXED     \/*   1 chars; Consonant_Initial_Postfixed *\/\n-#define ISC_CK  INDIC_SYLLABIC_CATEGORY_CONSONANT_KILLER        \/*   2 chars; Consonant_Killer *\/\n-#define ISC_CM  INDIC_SYLLABIC_CATEGORY_CONSONANT_MEDIAL        \/*  28 chars; Consonant_Medial *\/\n-#define ISC_CP  INDIC_SYLLABIC_CATEGORY_CONSONANT_PLACEHOLDER   \/*  21 chars; Consonant_Placeholder *\/\n-#define ISC_CPR INDIC_SYLLABIC_CATEGORY_CONSONANT_PRECEDING_REPHA       \/*   2 chars; Consonant_Preceding_Repha *\/\n-#define ISC_CPrf        INDIC_SYLLABIC_CATEGORY_CONSONANT_PREFIXED      \/*   7 chars; Consonant_Prefixed *\/\n-#define ISC_CS  INDIC_SYLLABIC_CATEGORY_CONSONANT_SUBJOINED     \/*  95 chars; Consonant_Subjoined *\/\n-#define ISC_CSR INDIC_SYLLABIC_CATEGORY_CONSONANT_SUCCEEDING_REPHA      \/*   4 chars; Consonant_Succeeding_Repha *\/\n-#define ISC_CWS INDIC_SYLLABIC_CATEGORY_CONSONANT_WITH_STACKER  \/*   6 chars; Consonant_With_Stacker *\/\n-#define ISC_GM  INDIC_SYLLABIC_CATEGORY_GEMINATION_MARK         \/*   3 chars; Gemination_Mark *\/\n-#define ISC_IS  INDIC_SYLLABIC_CATEGORY_INVISIBLE_STACKER       \/*  11 chars; Invisible_Stacker *\/\n-#define ISC_ZWJ INDIC_SYLLABIC_CATEGORY_JOINER                  \/*   1 chars; Joiner *\/\n-#define ISC_ML  INDIC_SYLLABIC_CATEGORY_MODIFYING_LETTER        \/*   1 chars; Modifying_Letter *\/\n-#define ISC_ZWNJ        INDIC_SYLLABIC_CATEGORY_NON_JOINER              \/*   1 chars; Non_Joiner *\/\n-#define ISC_N   INDIC_SYLLABIC_CATEGORY_NUKTA                   \/*  30 chars; Nukta *\/\n-#define ISC_Nd  INDIC_SYLLABIC_CATEGORY_NUMBER                  \/* 480 chars; Number *\/\n-#define ISC_NJ  INDIC_SYLLABIC_CATEGORY_NUMBER_JOINER           \/*   1 chars; Number_Joiner *\/\n-#define ISC_x   INDIC_SYLLABIC_CATEGORY_OTHER                   \/*   1 chars; Other *\/\n-#define ISC_PK  INDIC_SYLLABIC_CATEGORY_PURE_KILLER             \/*  21 chars; Pure_Killer *\/\n-#define ISC_RS  INDIC_SYLLABIC_CATEGORY_REGISTER_SHIFTER        \/*   2 chars; Register_Shifter *\/\n-#define ISC_SM  INDIC_SYLLABIC_CATEGORY_SYLLABLE_MODIFIER       \/*  25 chars; Syllable_Modifier *\/\n-#define ISC_TL  INDIC_SYLLABIC_CATEGORY_TONE_LETTER             \/*   7 chars; Tone_Letter *\/\n-#define ISC_TM  INDIC_SYLLABIC_CATEGORY_TONE_MARK               \/*  42 chars; Tone_Mark *\/\n-#define ISC_V   INDIC_SYLLABIC_CATEGORY_VIRAMA                  \/*  25 chars; Virama *\/\n-#define ISC_Vs  INDIC_SYLLABIC_CATEGORY_VISARGA                 \/*  36 chars; Visarga *\/\n-#define ISC_Vo  INDIC_SYLLABIC_CATEGORY_VOWEL                   \/*  30 chars; Vowel *\/\n-#define ISC_M   INDIC_SYLLABIC_CATEGORY_VOWEL_DEPENDENT         \/* 660 chars; Vowel_Dependent *\/\n-#define ISC_VI  INDIC_SYLLABIC_CATEGORY_VOWEL_INDEPENDENT       \/* 464 chars; Vowel_Independent *\/\n-\n-#define IMC_B   INDIC_MATRA_CATEGORY_BOTTOM                     \/* 340 chars; Bottom *\/\n-#define IMC_BL  INDIC_MATRA_CATEGORY_BOTTOM_AND_LEFT            \/*   1 chars; Bottom_And_Left *\/\n-#define IMC_BR  INDIC_MATRA_CATEGORY_BOTTOM_AND_RIGHT           \/*   2 chars; Bottom_And_Right *\/\n-#define IMC_L   INDIC_MATRA_CATEGORY_LEFT                       \/*  59 chars; Left *\/\n-#define IMC_LR  INDIC_MATRA_CATEGORY_LEFT_AND_RIGHT             \/*  21 chars; Left_And_Right *\/\n-#define IMC_x   INDIC_MATRA_CATEGORY_NOT_APPLICABLE             \/*   1 chars; Not_Applicable *\/\n-#define IMC_O   INDIC_MATRA_CATEGORY_OVERSTRUCK                 \/*  10 chars; Overstruck *\/\n-#define IMC_R   INDIC_MATRA_CATEGORY_RIGHT                      \/* 276 chars; Right *\/\n-#define IMC_T   INDIC_MATRA_CATEGORY_TOP                        \/* 393 chars; Top *\/\n-#define IMC_TB  INDIC_MATRA_CATEGORY_TOP_AND_BOTTOM             \/*  10 chars; Top_And_Bottom *\/\n-#define IMC_TBR INDIC_MATRA_CATEGORY_TOP_AND_BOTTOM_AND_RIGHT   \/*   1 chars; Top_And_Bottom_And_Right *\/\n-#define IMC_TL  INDIC_MATRA_CATEGORY_TOP_AND_LEFT               \/*   6 chars; Top_And_Left *\/\n-#define IMC_TLR INDIC_MATRA_CATEGORY_TOP_AND_LEFT_AND_RIGHT     \/*   4 chars; Top_And_Left_And_Right *\/\n-#define IMC_TR  INDIC_MATRA_CATEGORY_TOP_AND_RIGHT              \/*  13 chars; Top_And_Right *\/\n-#define IMC_VOL INDIC_MATRA_CATEGORY_VISUAL_ORDER_LEFT          \/*  19 chars; Visual_Order_Left *\/\n+#define ISC_A    INDIC_SYLLABIC_CATEGORY_AVAGRAHA                    \/*   17 chars; Avagraha *\/\n+#define ISC_Bi   INDIC_SYLLABIC_CATEGORY_BINDU                       \/*   91 chars; Bindu *\/\n+#define ISC_BJN  INDIC_SYLLABIC_CATEGORY_BRAHMI_JOINING_NUMBER       \/*   20 chars; Brahmi_Joining_Number *\/\n+#define ISC_Ca   INDIC_SYLLABIC_CATEGORY_CANTILLATION_MARK           \/*   59 chars; Cantillation_Mark *\/\n+#define ISC_C    INDIC_SYLLABIC_CATEGORY_CONSONANT                   \/* 2195 chars; Consonant *\/\n+#define ISC_CD   INDIC_SYLLABIC_CATEGORY_CONSONANT_DEAD              \/*   12 chars; Consonant_Dead *\/\n+#define ISC_CF   INDIC_SYLLABIC_CATEGORY_CONSONANT_FINAL             \/*   67 chars; Consonant_Final *\/\n+#define ISC_CHL  INDIC_SYLLABIC_CATEGORY_CONSONANT_HEAD_LETTER       \/*    5 chars; Consonant_Head_Letter *\/\n+#define ISC_CIP  INDIC_SYLLABIC_CATEGORY_CONSONANT_INITIAL_POSTFIXED \/*    1 chars; Consonant_Initial_Postfixed *\/\n+#define ISC_CK   INDIC_SYLLABIC_CATEGORY_CONSONANT_KILLER            \/*    2 chars; Consonant_Killer *\/\n+#define ISC_CM   INDIC_SYLLABIC_CATEGORY_CONSONANT_MEDIAL            \/*   31 chars; Consonant_Medial *\/\n+#define ISC_CP   INDIC_SYLLABIC_CATEGORY_CONSONANT_PLACEHOLDER       \/*   22 chars; Consonant_Placeholder *\/\n+#define ISC_CPR  INDIC_SYLLABIC_CATEGORY_CONSONANT_PRECEDING_REPHA   \/*    3 chars; Consonant_Preceding_Repha *\/\n+#define ISC_CPrf INDIC_SYLLABIC_CATEGORY_CONSONANT_PREFIXED          \/*   10 chars; Consonant_Prefixed *\/\n+#define ISC_CS   INDIC_SYLLABIC_CATEGORY_CONSONANT_SUBJOINED         \/*   94 chars; Consonant_Subjoined *\/\n+#define ISC_CSR  INDIC_SYLLABIC_CATEGORY_CONSONANT_SUCCEEDING_REPHA  \/*    4 chars; Consonant_Succeeding_Repha *\/\n+#define ISC_CWS  INDIC_SYLLABIC_CATEGORY_CONSONANT_WITH_STACKER      \/*    8 chars; Consonant_With_Stacker *\/\n+#define ISC_GM   INDIC_SYLLABIC_CATEGORY_GEMINATION_MARK             \/*    3 chars; Gemination_Mark *\/\n+#define ISC_IS   INDIC_SYLLABIC_CATEGORY_INVISIBLE_STACKER           \/*   12 chars; Invisible_Stacker *\/\n+#define ISC_ZWJ  INDIC_SYLLABIC_CATEGORY_JOINER                      \/*    1 chars; Joiner *\/\n+#define ISC_ML   INDIC_SYLLABIC_CATEGORY_MODIFYING_LETTER            \/*    1 chars; Modifying_Letter *\/\n+#define ISC_ZWNJ INDIC_SYLLABIC_CATEGORY_NON_JOINER                  \/*    1 chars; Non_Joiner *\/\n+#define ISC_N    INDIC_SYLLABIC_CATEGORY_NUKTA                       \/*   31 chars; Nukta *\/\n+#define ISC_Nd   INDIC_SYLLABIC_CATEGORY_NUMBER                      \/*  491 chars; Number *\/\n+#define ISC_NJ   INDIC_SYLLABIC_CATEGORY_NUMBER_JOINER               \/*    1 chars; Number_Joiner *\/\n+#define ISC_x    INDIC_SYLLABIC_CATEGORY_OTHER                       \/*    1 chars; Other *\/\n+#define ISC_PK   INDIC_SYLLABIC_CATEGORY_PURE_KILLER                 \/*   23 chars; Pure_Killer *\/\n+#define ISC_RS   INDIC_SYLLABIC_CATEGORY_REGISTER_SHIFTER            \/*    2 chars; Register_Shifter *\/\n+#define ISC_SM   INDIC_SYLLABIC_CATEGORY_SYLLABLE_MODIFIER           \/*   25 chars; Syllable_Modifier *\/\n+#define ISC_TL   INDIC_SYLLABIC_CATEGORY_TONE_LETTER                 \/*    7 chars; Tone_Letter *\/\n+#define ISC_TM   INDIC_SYLLABIC_CATEGORY_TONE_MARK                   \/*   42 chars; Tone_Mark *\/\n+#define ISC_V    INDIC_SYLLABIC_CATEGORY_VIRAMA                      \/*   27 chars; Virama *\/\n+#define ISC_Vs   INDIC_SYLLABIC_CATEGORY_VISARGA                     \/*   35 chars; Visarga *\/\n+#define ISC_Vo   INDIC_SYLLABIC_CATEGORY_VOWEL                       \/*   30 chars; Vowel *\/\n+#define ISC_M    INDIC_SYLLABIC_CATEGORY_VOWEL_DEPENDENT             \/*  683 chars; Vowel_Dependent *\/\n+#define ISC_VI   INDIC_SYLLABIC_CATEGORY_VOWEL_INDEPENDENT           \/*  484 chars; Vowel_Independent *\/\n+\n+#define IMC_B    INDIC_MATRA_CATEGORY_BOTTOM                         \/*  351 chars; Bottom *\/\n+#define IMC_BL   INDIC_MATRA_CATEGORY_BOTTOM_AND_LEFT                \/*    1 chars; Bottom_And_Left *\/\n+#define IMC_BR   INDIC_MATRA_CATEGORY_BOTTOM_AND_RIGHT               \/*    4 chars; Bottom_And_Right *\/\n+#define IMC_L    INDIC_MATRA_CATEGORY_LEFT                           \/*   64 chars; Left *\/\n+#define IMC_LR   INDIC_MATRA_CATEGORY_LEFT_AND_RIGHT                 \/*   22 chars; Left_And_Right *\/\n+#define IMC_x    INDIC_MATRA_CATEGORY_NOT_APPLICABLE                 \/*    1 chars; Not_Applicable *\/\n+#define IMC_O    INDIC_MATRA_CATEGORY_OVERSTRUCK                     \/*   10 chars; Overstruck *\/\n+#define IMC_R    INDIC_MATRA_CATEGORY_RIGHT                          \/*  288 chars; Right *\/\n+#define IMC_T    INDIC_MATRA_CATEGORY_TOP                            \/*  415 chars; Top *\/\n+#define IMC_TB   INDIC_MATRA_CATEGORY_TOP_AND_BOTTOM                 \/*   10 chars; Top_And_Bottom *\/\n+#define IMC_TBL  INDIC_MATRA_CATEGORY_TOP_AND_BOTTOM_AND_LEFT        \/*    2 chars; Top_And_Bottom_And_Left *\/\n+#define IMC_TBR  INDIC_MATRA_CATEGORY_TOP_AND_BOTTOM_AND_RIGHT       \/*    1 chars; Top_And_Bottom_And_Right *\/\n+#define IMC_TL   INDIC_MATRA_CATEGORY_TOP_AND_LEFT                   \/*    6 chars; Top_And_Left *\/\n+#define IMC_TLR  INDIC_MATRA_CATEGORY_TOP_AND_LEFT_AND_RIGHT         \/*    4 chars; Top_And_Left_And_Right *\/\n+#define IMC_TR   INDIC_MATRA_CATEGORY_TOP_AND_RIGHT                  \/*   13 chars; Top_And_Right *\/\n+#define IMC_VOL  INDIC_MATRA_CATEGORY_VISUAL_ORDER_LEFT              \/*   19 chars; Visual_Order_Left *\/\n+\n@@ -155,1 +161,1 @@\n-  \/* 0A50 *\/  _(x,x), _(Ca,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),\n+  \/* 0A50 *\/  _(x,x), _(Ca,B),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),\n@@ -193,1 +199,1 @@\n-  \/* 0B50 *\/  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(M,T), _(M,TR),\n+  \/* 0B50 *\/  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(M,T),  _(M,T), _(M,TR),\n@@ -240,1 +246,1 @@\n-  \/* 0C80 *\/  _(x,x), _(Bi,T), _(Bi,R), _(Vs,R),  _(x,x), _(VI,x), _(VI,x), _(VI,x),\n+  \/* 0C80 *\/ _(Bi,x), _(Bi,T), _(Bi,R), _(Vs,R),  _(x,x), _(VI,x), _(VI,x), _(VI,x),\n@@ -259,1 +265,1 @@\n-  \/* 0D00 *\/ _(Bi,T), _(Bi,T), _(Bi,R), _(Vs,R),  _(x,x), _(VI,x), _(VI,x), _(VI,x),\n+  \/* 0D00 *\/ _(Bi,T), _(Bi,T), _(Bi,R), _(Vs,R), _(Bi,x), _(VI,x), _(VI,x), _(VI,x),\n@@ -268,1 +274,1 @@\n-  \/* 0D48 *\/  _(M,L),  _(x,x), _(M,LR), _(M,LR), _(M,LR),  _(V,T),_(CPR,x),  _(x,x),\n+  \/* 0D48 *\/  _(M,L),  _(x,x), _(M,LR), _(M,LR), _(M,LR),  _(V,T),_(CPR,T),  _(x,x),\n@@ -278,1 +284,1 @@\n-  \/* 0D80 *\/  _(x,x),  _(x,x), _(Bi,R), _(Vs,R),  _(x,x), _(VI,x), _(VI,x), _(VI,x),\n+  \/* 0D80 *\/  _(x,x), _(Bi,T), _(Bi,R), _(Vs,R),  _(x,x), _(VI,x), _(VI,x), _(VI,x),\n@@ -306,1 +312,1 @@\n-  \/* 1038 *\/ _(Vs,R), _(IS,x), _(PK,T), _(CM,R), _(CM,x), _(CM,B), _(CM,B),  _(C,x),\n+  \/* 1038 *\/ _(Vs,R), _(IS,x), _(PK,T), _(CM,R),_(CM,TBL), _(CM,B), _(CM,B),  _(C,x),\n@@ -349,2 +355,2 @@\n-  \/* 1CF0 *\/  _(x,x),  _(x,x), _(Vs,x), _(Vs,x), _(Ca,T),_(CWS,x),_(CWS,x), _(Ca,R),\n-  \/* 1CF8 *\/ _(Ca,x), _(Ca,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),\n+  \/* 1CF0 *\/  _(x,x),  _(x,x), _(CD,x), _(CD,x), _(Ca,T),_(CWS,x),_(CWS,x), _(Ca,R),\n+  \/* 1CF8 *\/ _(Ca,x), _(Ca,x), _(CP,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),  _(x,x),\n@@ -438,0 +444,1 @@\n+\n@@ -474,0 +481,1 @@\n+\n@@ -484,0 +492,1 @@\n+#undef IMC_TBL\n@@ -490,0 +499,2 @@\n+#endif\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-indic-table.cc","additions":78,"deletions":67,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -130,7 +134,0 @@\n-  \/*\n-   * Positioning features.\n-   * We don't care about the types.\n-   *\/\n-  {HB_TAG('d','i','s','t'), F_GLOBAL},\n-  {HB_TAG('a','b','v','m'), F_GLOBAL},\n-  {HB_TAG('b','l','w','m'), F_GLOBAL},\n@@ -143,22 +140,18 @@\n-  _NUKT,\n-  _AKHN,\n-  RPHF,\n-  _RKRF,\n-  PREF,\n-  BLWF,\n-  ABVF,\n-  HALF,\n-  PSTF,\n-  _VATU,\n-  _CJCT,\n-\n-  INIT,\n-  _PRES,\n-  _ABVS,\n-  _BLWS,\n-  _PSTS,\n-  _HALN,\n-\n-  _DIST,\n-  _ABVM,\n-  _BLWM,\n+  _INDIC_NUKT,\n+  _INDIC_AKHN,\n+  INDIC_RPHF,\n+  _INDIC_RKRF,\n+  INDIC_PREF,\n+  INDIC_BLWF,\n+  INDIC_ABVF,\n+  INDIC_HALF,\n+  INDIC_PSTF,\n+  _INDIC_VATU,\n+  _INDIC_CJCT,\n+\n+  INDIC_INIT,\n+  _INDIC_PRES,\n+  _INDIC_ABVS,\n+  _INDIC_BLWS,\n+  _INDIC_PSTS,\n+  _INDIC_HALN,\n@@ -167,1 +160,1 @@\n-  INDIC_BASIC_FEATURES = INIT, \/* Don't forget to update this! *\/\n+  INDIC_BASIC_FEATURES = INDIC_INIT, \/* Don't forget to update this! *\/\n@@ -171,7 +164,3 @@\n-setup_syllables (const hb_ot_shape_plan_t *plan,\n-                 hb_font_t *font,\n-                 hb_buffer_t *buffer);\n-static void\n-initial_reordering (const hb_ot_shape_plan_t *plan,\n-                    hb_font_t *font,\n-                    hb_buffer_t *buffer);\n+setup_syllables_indic (const hb_ot_shape_plan_t *plan,\n+                       hb_font_t *font,\n+                       hb_buffer_t *buffer);\n@@ -179,3 +168,3 @@\n-final_reordering (const hb_ot_shape_plan_t *plan,\n-                  hb_font_t *font,\n-                  hb_buffer_t *buffer);\n+initial_reordering_indic (const hb_ot_shape_plan_t *plan,\n+                          hb_font_t *font,\n+                          hb_buffer_t *buffer);\n@@ -183,3 +172,3 @@\n-clear_syllables (const hb_ot_shape_plan_t *plan,\n-                 hb_font_t *font,\n-                 hb_buffer_t *buffer);\n+final_reordering_indic (const hb_ot_shape_plan_t *plan,\n+                        hb_font_t *font,\n+                        hb_buffer_t *buffer);\n@@ -193,1 +182,1 @@\n-  map->add_gsub_pause (setup_syllables);\n+  map->add_gsub_pause (setup_syllables_indic);\n@@ -202,1 +191,1 @@\n-  map->add_gsub_pause (initial_reordering);\n+  map->add_gsub_pause (initial_reordering_indic);\n@@ -209,1 +198,1 @@\n-  map->add_gsub_pause (final_reordering);\n+  map->add_gsub_pause (final_reordering_indic);\n@@ -217,1 +206,1 @@\n-  map->add_gsub_pause (clear_syllables);\n+  map->add_gsub_pause (_hb_clear_syllables);\n@@ -227,26 +216,0 @@\n-struct would_substitute_feature_t\n-{\n-  void init (const hb_ot_map_t *map, hb_tag_t feature_tag, bool zero_context_)\n-  {\n-    zero_context = zero_context_;\n-    map->get_stage_lookups (0\/*GSUB*\/,\n-                            map->get_feature_stage (0\/*GSUB*\/, feature_tag),\n-                            &lookups, &count);\n-  }\n-\n-  bool would_substitute (const hb_codepoint_t *glyphs,\n-                         unsigned int          glyphs_count,\n-                         hb_face_t            *face) const\n-  {\n-    for (unsigned int i = 0; i < count; i++)\n-      if (hb_ot_layout_lookup_would_substitute_fast (face, lookups[i].index, glyphs, glyphs_count, zero_context))\n-        return true;\n-    return false;\n-  }\n-\n-  private:\n-  const hb_ot_map_t::lookup_map_t *lookups;\n-  unsigned int count;\n-  bool zero_context;\n-};\n-\n@@ -277,0 +240,1 @@\n+#ifndef HB_NO_UNISCRIBE_BUG_COMPATIBLE\n@@ -278,0 +242,3 @@\n+#else\n+  static constexpr bool uniscribe_bug_compatible = false;\n+#endif\n@@ -280,4 +247,5 @@\n-  would_substitute_feature_t rphf;\n-  would_substitute_feature_t pref;\n-  would_substitute_feature_t blwf;\n-  would_substitute_feature_t pstf;\n+  hb_indic_would_substitute_feature_t rphf;\n+  hb_indic_would_substitute_feature_t pref;\n+  hb_indic_would_substitute_feature_t blwf;\n+  hb_indic_would_substitute_feature_t pstf;\n+  hb_indic_would_substitute_feature_t vatu;\n@@ -303,0 +271,1 @@\n+#ifndef HB_NO_UNISCRIBE_BUG_COMPATIBLE\n@@ -304,0 +273,1 @@\n+#endif\n@@ -320,0 +290,1 @@\n+  indic_plan->vatu.init (&plan->map, HB_TAG('v','a','t','u'), zero_context);\n@@ -349,1 +320,5 @@\n-   * to work. *\/\n+   * to work.\n+   *\n+   * Vatu is done as well, for:\n+   * https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1587\n+   *\/\n@@ -352,1 +327,3 @@\n-      indic_plan->blwf.would_substitute (glyphs+1, 2, face))\n+      indic_plan->blwf.would_substitute (glyphs+1, 2, face) ||\n+      indic_plan->vatu.would_substitute (glyphs  , 2, face) ||\n+      indic_plan->vatu.would_substitute (glyphs+1, 2, face))\n@@ -364,7 +341,7 @@\n-enum syllable_type_t {\n-  consonant_syllable,\n-  vowel_syllable,\n-  standalone_cluster,\n-  symbol_cluster,\n-  broken_cluster,\n-  non_indic_cluster,\n+enum indic_syllable_type_t {\n+  indic_consonant_syllable,\n+  indic_vowel_syllable,\n+  indic_standalone_cluster,\n+  indic_symbol_cluster,\n+  indic_broken_cluster,\n+  indic_non_indic_cluster,\n@@ -394,3 +371,3 @@\n-setup_syllables (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                 hb_font_t *font HB_UNUSED,\n-                 hb_buffer_t *buffer)\n+setup_syllables_indic (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                       hb_font_t *font HB_UNUSED,\n+                       hb_buffer_t *buffer)\n@@ -398,1 +375,1 @@\n-  find_syllables (buffer);\n+  find_syllables_indic (buffer);\n@@ -415,3 +392,3 @@\n-update_consonant_positions (const hb_ot_shape_plan_t *plan,\n-                            hb_font_t         *font,\n-                            hb_buffer_t       *buffer)\n+update_consonant_positions_indic (const hb_ot_shape_plan_t *plan,\n+                                  hb_font_t         *font,\n+                                  hb_buffer_t       *buffer)\n@@ -490,1 +467,1 @@\n-    if (indic_plan->mask_array[RPHF] &&\n+    if (indic_plan->mask_array[INDIC_RPHF] &&\n@@ -648,1 +625,1 @@\n-    info[i].indic_position() = MIN (POS_PRE_C, (indic_position_t) info[i].indic_position());\n+    info[i].indic_position() = hb_min (POS_PRE_C, (indic_position_t) info[i].indic_position());\n@@ -676,1 +653,1 @@\n-   * other scripts, so we blacklist Kannada.\n+   * other scripts, so we block Kannada.\n@@ -723,1 +700,1 @@\n-      if ((FLAG_UNSAFE (info[i].indic_category()) & (JOINER_FLAGS | FLAG (OT_N) | FLAG (OT_RS) | FLAG (OT_H))))\n+      if ((FLAG_UNSAFE (info[i].indic_category()) & (JOINER_FLAGS | FLAG (OT_N) | FLAG (OT_RS) | MEDIAL_FLAGS | FLAG (OT_H))))\n@@ -804,1 +781,1 @@\n-            max = MAX (max, j);\n+            max = hb_max (max, j);\n@@ -826,1 +803,1 @@\n-      info[i].mask |= indic_plan->mask_array[RPHF];\n+      info[i].mask |= indic_plan->mask_array[INDIC_RPHF];\n@@ -829,1 +806,1 @@\n-    mask = indic_plan->mask_array[HALF];\n+    mask = indic_plan->mask_array[INDIC_HALF];\n@@ -832,1 +809,1 @@\n-      mask |= indic_plan->mask_array[BLWF];\n+      mask |= indic_plan->mask_array[INDIC_BLWF];\n@@ -840,1 +817,3 @@\n-    mask = indic_plan->mask_array[BLWF] | indic_plan->mask_array[ABVF] | indic_plan->mask_array[PSTF];\n+    mask = indic_plan->mask_array[INDIC_BLWF] |\n+           indic_plan->mask_array[INDIC_ABVF] |\n+           indic_plan->mask_array[INDIC_PSTF];\n@@ -872,2 +851,2 @@\n-        info[i  ].mask |= indic_plan->mask_array[BLWF];\n-        info[i+1].mask |= indic_plan->mask_array[BLWF];\n+        info[i  ].mask |= indic_plan->mask_array[INDIC_BLWF];\n+        info[i+1].mask |= indic_plan->mask_array[INDIC_BLWF];\n@@ -878,1 +857,1 @@\n-  if (indic_plan->mask_array[PREF] && base + pref_len < end)\n+  if (indic_plan->mask_array[INDIC_PREF] && base + pref_len < end)\n@@ -888,1 +867,1 @@\n-          info[i++].mask |= indic_plan->mask_array[PREF];\n+          info[i++].mask |= indic_plan->mask_array[INDIC_PREF];\n@@ -909,1 +888,1 @@\n-          info[j].mask &= ~indic_plan->mask_array[HALF];\n+          info[j].mask &= ~indic_plan->mask_array[INDIC_HALF];\n@@ -921,2 +900,0 @@\n-  const indic_shape_plan_t *indic_plan = (const indic_shape_plan_t *) plan->data;\n-\n@@ -926,0 +903,1 @@\n+  const indic_shape_plan_t *indic_plan = (const indic_shape_plan_t *) plan->data;\n@@ -939,4 +917,4 @@\n-initial_reordering_syllable (const hb_ot_shape_plan_t *plan,\n-                             hb_face_t *face,\n-                             hb_buffer_t *buffer,\n-                             unsigned int start, unsigned int end)\n+initial_reordering_syllable_indic (const hb_ot_shape_plan_t *plan,\n+                                   hb_face_t *face,\n+                                   hb_buffer_t *buffer,\n+                                   unsigned int start, unsigned int end)\n@@ -944,1 +922,1 @@\n-  syllable_type_t syllable_type = (syllable_type_t) (buffer->info[start].syllable() & 0x0F);\n+  indic_syllable_type_t syllable_type = (indic_syllable_type_t) (buffer->info[start].syllable() & 0x0F);\n@@ -947,2 +925,2 @@\n-    case vowel_syllable: \/* We made the vowels look like consonants.  So let's call the consonant logic! *\/\n-    case consonant_syllable:\n+    case indic_vowel_syllable: \/* We made the vowels look like consonants.  So let's call the consonant logic! *\/\n+    case indic_consonant_syllable:\n@@ -952,2 +930,2 @@\n-    case broken_cluster: \/* We already inserted dotted-circles, so just call the standalone_cluster. *\/\n-    case standalone_cluster:\n+    case indic_broken_cluster: \/* We already inserted dotted-circles, so just call the standalone_cluster. *\/\n+    case indic_standalone_cluster:\n@@ -957,2 +935,2 @@\n-    case symbol_cluster:\n-    case non_indic_cluster:\n+    case indic_symbol_cluster:\n+    case indic_non_indic_cluster:\n@@ -964,3 +942,3 @@\n-insert_dotted_circles (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                       hb_font_t *font,\n-                       hb_buffer_t *buffer)\n+insert_dotted_circles_indic (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                             hb_font_t *font,\n+                             hb_buffer_t *buffer)\n@@ -968,0 +946,3 @@\n+  if (unlikely (buffer->flags & HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE))\n+    return;\n+\n@@ -974,1 +955,1 @@\n-    if ((info[i].syllable() & 0x0F) == broken_cluster)\n+    if ((info[i].syllable() & 0x0F) == indic_broken_cluster)\n@@ -999,2 +980,2 @@\n-    syllable_type_t syllable_type = (syllable_type_t) (syllable & 0x0F);\n-    if (unlikely (last_syllable != syllable && syllable_type == broken_cluster))\n+    indic_syllable_type_t syllable_type = (indic_syllable_type_t) (syllable & 0x0F);\n+    if (unlikely (last_syllable != syllable && syllable_type == indic_broken_cluster))\n@@ -1008,1 +989,0 @@\n-      \/* TODO Set glyph_props? *\/\n@@ -1025,3 +1005,3 @@\n-initial_reordering (const hb_ot_shape_plan_t *plan,\n-                    hb_font_t *font,\n-                    hb_buffer_t *buffer)\n+initial_reordering_indic (const hb_ot_shape_plan_t *plan,\n+                          hb_font_t *font,\n+                          hb_buffer_t *buffer)\n@@ -1029,2 +1009,2 @@\n-  update_consonant_positions (plan, font, buffer);\n-  insert_dotted_circles (plan, font, buffer);\n+  update_consonant_positions_indic (plan, font, buffer);\n+  insert_dotted_circles_indic (plan, font, buffer);\n@@ -1033,1 +1013,1 @@\n-    initial_reordering_syllable (plan, font->face, buffer, start, end);\n+    initial_reordering_syllable_indic (plan, font->face, buffer, start, end);\n@@ -1037,3 +1017,3 @@\n-final_reordering_syllable (const hb_ot_shape_plan_t *plan,\n-                           hb_buffer_t *buffer,\n-                           unsigned int start, unsigned int end)\n+final_reordering_syllable_indic (const hb_ot_shape_plan_t *plan,\n+                                 hb_buffer_t *buffer,\n+                                 unsigned int start, unsigned int end)\n@@ -1075,1 +1055,1 @@\n-  bool try_pref = !!indic_plan->mask_array[PREF];\n+  bool try_pref = !!indic_plan->mask_array[INDIC_PREF];\n@@ -1085,1 +1065,1 @@\n-          if ((info[i].mask & indic_plan->mask_array[PREF]) != 0)\n+          if ((info[i].mask & indic_plan->mask_array[INDIC_PREF]) != 0)\n@@ -1202,3 +1182,8 @@\n-          \/* -> If ZWNJ follows this halant, position is moved after it. *\/\n-          if (info[new_pos + 1].indic_category() == OT_ZWNJ)\n-            new_pos++;\n+          \/* -> If ZWNJ follows this halant, position is moved after it.\n+           *\n+           * IMPLEMENTATION NOTES:\n+           *\n+           * This is taken care of by the state-machine. A Halant,ZWNJ is a terminating\n+           * sequence for a consonant syllable; any pre-base matras occurring after it\n+           * will belong to the subsequent syllable.\n+           *\/\n@@ -1227,1 +1212,1 @@\n-          buffer->merge_clusters (new_pos, MIN (end, base + 1));\n+          buffer->merge_clusters (new_pos, hb_min (end, base + 1));\n@@ -1234,1 +1219,1 @@\n-          buffer->merge_clusters (i, MIN (end, base + 1));\n+          buffer->merge_clusters (i, hb_min (end, base + 1));\n@@ -1351,0 +1336,1 @@\n+    \/* See https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/2298#issuecomment-615318654 *\/\n@@ -1367,1 +1353,2 @@\n-          unlikely (is_halant (info[new_reph_pos]))) {\n+          unlikely (is_halant (info[new_reph_pos])))\n+      {\n@@ -1374,0 +1361,1 @@\n+\n@@ -1400,1 +1388,1 @@\n-      if ((info[i].mask & indic_plan->mask_array[PREF]) != 0)\n+      if ((info[i].mask & indic_plan->mask_array[INDIC_PREF]) != 0)\n@@ -1463,1 +1451,1 @@\n-      info[start].mask |= indic_plan->mask_array[INIT];\n+      info[start].mask |= indic_plan->mask_array[INDIC_INIT];\n@@ -1493,3 +1481,3 @@\n-final_reordering (const hb_ot_shape_plan_t *plan,\n-                  hb_font_t *font HB_UNUSED,\n-                  hb_buffer_t *buffer)\n+final_reordering_indic (const hb_ot_shape_plan_t *plan,\n+                        hb_font_t *font HB_UNUSED,\n+                        hb_buffer_t *buffer)\n@@ -1501,1 +1489,1 @@\n-    final_reordering_syllable (plan, buffer, start, end);\n+    final_reordering_syllable_indic (plan, buffer, start, end);\n@@ -1508,12 +1496,0 @@\n-static void\n-clear_syllables (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                 hb_font_t *font HB_UNUSED,\n-                 hb_buffer_t *buffer)\n-{\n-  hb_glyph_info_t *info = buffer->info;\n-  unsigned int count = buffer->len;\n-  for (unsigned int i = 0; i < count; i++)\n-    info[i].syllable() = 0;\n-}\n-\n-\n@@ -1586,1 +1562,0 @@\n-    const indic_shape_plan_t *indic_plan = (const indic_shape_plan_t *) c->plan->data;\n@@ -1588,0 +1563,1 @@\n+    const indic_shape_plan_t *indic_plan = (const indic_shape_plan_t *) c->plan->data;\n@@ -1589,2 +1565,1 @@\n-\n-    if (hb_options ().uniscribe_bug_compatible ||\n+    if (indic_plan->uniscribe_bug_compatible ||\n@@ -1638,0 +1613,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-indic.cc","additions":143,"deletions":165,"binary":false,"changes":308,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  OT_CM = 17,  \/* Consonant-Medial; Unused by Indic shaper. *\/\n+  OT_CM = 17,  \/* Consonant-Medial. *\/\n@@ -67,1 +67,8 @@\n-  OT_CS = 19\n+  OT_CS = 19,\n+\n+  \/* The following are used by Khmer & Myanmar shapers.  Defined\n+   * here for them to share. *\/\n+  OT_VAbv    = 26,\n+  OT_VBlw    = 27,\n+  OT_VPre    = 28,\n+  OT_VPst    = 29,\n@@ -70,0 +77,2 @@\n+#define MEDIAL_FLAGS (FLAG (OT_CM))\n+\n@@ -75,1 +84,1 @@\n-#define CONSONANT_FLAGS (FLAG (OT_C) | FLAG (OT_CS) | FLAG (OT_Ra) | FLAG (OT_V) | FLAG (OT_PLACEHOLDER) | FLAG (OT_DOTTEDCIRCLE))\n+#define CONSONANT_FLAGS (FLAG (OT_C) | FLAG (OT_CS) | FLAG (OT_Ra) | MEDIAL_FLAGS | FLAG (OT_V) | FLAG (OT_PLACEHOLDER) | FLAG (OT_DOTTEDCIRCLE))\n@@ -159,0 +168,1 @@\n+  INDIC_MATRA_CATEGORY_TOP_AND_BOTTOM_AND_LEFT          = INDIC_MATRA_CATEGORY_BOTTOM,\n@@ -279,1 +289,1 @@\n-  };\n+  }\n@@ -360,1 +370,1 @@\n-  else if (unlikely (u == 0x1133cu)) cat = OT_N;\n+  else if (unlikely (u == 0x1133Bu || u == 0x1133Cu)) cat = OT_N;\n@@ -365,0 +375,1 @@\n+  else if (unlikely (u == 0x09FCu)) cat = OT_PLACEHOLDER; \/* https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/1613 *\/\n@@ -398,0 +409,26 @@\n+struct hb_indic_would_substitute_feature_t\n+{\n+  void init (const hb_ot_map_t *map, hb_tag_t feature_tag, bool zero_context_)\n+  {\n+    zero_context = zero_context_;\n+    map->get_stage_lookups (0\/*GSUB*\/,\n+                            map->get_feature_stage (0\/*GSUB*\/, feature_tag),\n+                            &lookups, &count);\n+  }\n+\n+  bool would_substitute (const hb_codepoint_t *glyphs,\n+                         unsigned int          glyphs_count,\n+                         hb_face_t            *face) const\n+  {\n+    for (unsigned int i = 0; i < count; i++)\n+      if (hb_ot_layout_lookup_would_substitute (face, lookups[i].index, glyphs, glyphs_count, zero_context))\n+        return true;\n+    return false;\n+  }\n+\n+  private:\n+  const hb_ot_map_t::lookup_map_t *lookups;\n+  unsigned int count;\n+  bool zero_context;\n+};\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-indic.hh","additions":42,"deletions":5,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -38,5 +38,5 @@\n-        5u, 26u, 5u, 21u, 1u, 16u, 5u, 21u, 5u, 26u, 5u, 21u, 1u, 16u, 5u, 21u,\n-        5u, 26u, 5u, 21u, 5u, 26u, 5u, 21u, 5u, 26u, 1u, 16u, 1u, 29u, 5u, 29u,\n-        5u, 29u, 5u, 29u, 22u, 22u, 5u, 22u, 5u, 29u, 5u, 29u, 5u, 29u, 5u, 26u,\n-        5u, 29u, 5u, 29u, 22u, 22u, 5u, 22u, 5u, 29u, 5u, 29u, 1u, 16u, 5u, 29u,\n-        5u, 29u, 0\n+        5u, 26u, 5u, 21u, 5u, 21u, 5u, 26u, 5u, 21u, 1u, 16u, 5u, 21u, 5u, 26u,\n+        5u, 21u, 5u, 26u, 5u, 21u, 5u, 26u, 1u, 29u, 5u, 29u, 5u, 29u, 5u, 29u,\n+        22u, 22u, 5u, 22u, 5u, 29u, 5u, 29u, 5u, 29u, 1u, 16u, 5u, 26u, 5u, 29u,\n+        5u, 29u, 22u, 22u, 5u, 22u, 5u, 29u, 5u, 29u, 1u, 16u, 5u, 29u, 5u, 29u,\n+        0\n@@ -47,5 +47,4 @@\n-        22, 17, 16, 17, 22, 17, 16, 17,\n-        22, 17, 22, 17, 22, 16, 29, 25,\n-        25, 25, 1, 18, 25, 25, 25, 22,\n-        25, 25, 1, 18, 25, 25, 16, 25,\n-        25\n+        22, 17, 17, 22, 17, 16, 17, 22,\n+        17, 22, 17, 22, 29, 25, 25, 25,\n+        1, 18, 25, 25, 25, 16, 22, 25,\n+        25, 1, 18, 25, 25, 16, 25, 25\n@@ -56,5 +55,4 @@\n-        158, 181, 199, 216, 234, 257, 275, 292,\n-        310, 333, 351, 374, 392, 415, 432, 462,\n-        488, 514, 540, 542, 561, 587, 613, 639,\n-        662, 688, 714, 716, 735, 761, 787, 804,\n-        830\n+        158, 181, 199, 217, 240, 258, 275, 293,\n+        316, 334, 357, 375, 398, 428, 454, 480,\n+        506, 508, 527, 553, 579, 605, 622, 645,\n+        671, 697, 699, 718, 744, 770, 787, 813\n@@ -88,75 +86,73 @@\n-        0, 0, 0, 0, 0, 12, 0, 13,\n-        13, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 13, 0,\n-        15, 15, 14, 14, 14, 14, 14, 14,\n-        14, 14, 14, 14, 14, 14, 14, 14,\n-        16, 14, 15, 15, 17, 17, 17, 17,\n-        17, 17, 17, 17, 17, 17, 17, 17,\n-        17, 17, 16, 17, 17, 17, 17, 18,\n-        17, 19, 19, 17, 17, 17, 17, 17,\n-        17, 17, 17, 17, 17, 17, 17, 17,\n-        17, 18, 17, 20, 20, 17, 17, 17,\n-        17, 17, 17, 17, 17, 17, 17, 17,\n-        17, 17, 20, 17, 21, 21, 17, 17,\n-        17, 17, 17, 17, 17, 17, 17, 17,\n-        17, 17, 17, 17, 22, 17, 23, 23,\n-        17, 17, 17, 17, 17, 17, 17, 17,\n-        17, 17, 17, 17, 17, 17, 24, 17,\n-        17, 17, 17, 18, 17, 23, 23, 17,\n-        17, 17, 17, 17, 17, 17, 17, 17,\n-        17, 17, 17, 17, 17, 24, 17, 25,\n-        25, 17, 17, 17, 17, 17, 17, 17,\n-        17, 17, 17, 17, 17, 17, 17, 26,\n-        17, 17, 17, 17, 18, 17, 25, 25,\n-        17, 17, 17, 17, 17, 17, 17, 17,\n-        17, 17, 17, 17, 17, 17, 26, 17,\n-        15, 15, 17, 17, 17, 17, 17, 17,\n-        17, 17, 17, 17, 17, 17, 17, 27,\n-        16, 17, 17, 17, 17, 18, 17, 28,\n-        28, 17, 17, 17, 17, 17, 17, 17,\n-        17, 17, 17, 17, 17, 17, 28, 17,\n-        13, 13, 29, 29, 30, 30, 29, 29,\n-        29, 29, 2, 2, 29, 31, 29, 13,\n-        29, 29, 29, 29, 16, 20, 29, 29,\n-        29, 18, 24, 26, 22, 29, 33, 33,\n-        32, 32, 32, 32, 32, 32, 32, 34,\n-        32, 32, 32, 32, 32, 2, 3, 6,\n-        32, 32, 32, 4, 10, 12, 8, 32,\n-        35, 35, 32, 32, 32, 32, 32, 32,\n-        32, 36, 32, 32, 32, 32, 32, 32,\n-        3, 6, 32, 32, 32, 4, 10, 12,\n-        8, 32, 5, 5, 32, 32, 32, 32,\n-        32, 32, 32, 36, 32, 32, 32, 32,\n-        32, 32, 4, 6, 32, 32, 32, 32,\n-        32, 32, 8, 32, 6, 32, 7, 7,\n-        32, 32, 32, 32, 32, 32, 32, 36,\n-        32, 32, 32, 32, 32, 32, 8, 6,\n-        32, 37, 37, 32, 32, 32, 32, 32,\n-        32, 32, 36, 32, 32, 32, 32, 32,\n-        32, 10, 6, 32, 32, 32, 4, 32,\n-        32, 8, 32, 38, 38, 32, 32, 32,\n-        32, 32, 32, 32, 36, 32, 32, 32,\n-        32, 32, 32, 12, 6, 32, 32, 32,\n-        4, 10, 32, 8, 32, 35, 35, 32,\n-        32, 32, 32, 32, 32, 32, 34, 32,\n-        32, 32, 32, 32, 32, 3, 6, 32,\n-        32, 32, 4, 10, 12, 8, 32, 15,\n-        15, 39, 39, 39, 39, 39, 39, 39,\n-        39, 39, 39, 39, 39, 39, 39, 16,\n-        39, 39, 39, 39, 18, 39, 41, 41,\n-        40, 40, 40, 40, 40, 40, 40, 42,\n-        40, 40, 40, 40, 40, 40, 16, 20,\n-        40, 40, 40, 18, 24, 26, 22, 40,\n-        19, 19, 40, 40, 40, 40, 40, 40,\n-        40, 42, 40, 40, 40, 40, 40, 40,\n-        18, 20, 40, 40, 40, 40, 40, 40,\n-        22, 40, 20, 40, 21, 21, 40, 40,\n-        40, 40, 40, 40, 40, 42, 40, 40,\n-        40, 40, 40, 40, 22, 20, 40, 43,\n-        43, 40, 40, 40, 40, 40, 40, 40,\n-        42, 40, 40, 40, 40, 40, 40, 24,\n-        20, 40, 40, 40, 18, 40, 40, 22,\n-        40, 44, 44, 40, 40, 40, 40, 40,\n-        40, 40, 42, 40, 40, 40, 40, 40,\n-        40, 26, 20, 40, 40, 40, 18, 24,\n-        40, 22, 40, 28, 28, 39, 39, 39,\n+        0, 0, 0, 0, 0, 12, 0, 14,\n+        14, 13, 13, 13, 13, 13, 13, 13,\n+        13, 13, 13, 13, 13, 13, 13, 15,\n+        13, 14, 14, 16, 16, 16, 16, 16,\n+        16, 16, 16, 16, 16, 16, 16, 16,\n+        16, 15, 16, 16, 16, 16, 17, 16,\n+        18, 18, 16, 16, 16, 16, 16, 16,\n+        16, 16, 16, 16, 16, 16, 16, 16,\n+        17, 16, 19, 19, 16, 16, 16, 16,\n+        16, 16, 16, 16, 16, 16, 16, 16,\n+        16, 19, 16, 20, 20, 16, 16, 16,\n+        16, 16, 16, 16, 16, 16, 16, 16,\n+        16, 16, 16, 21, 16, 22, 22, 16,\n+        16, 16, 16, 16, 16, 16, 16, 16,\n+        16, 16, 16, 16, 16, 23, 16, 16,\n+        16, 16, 17, 16, 22, 22, 16, 16,\n+        16, 16, 16, 16, 16, 16, 16, 16,\n+        16, 16, 16, 16, 23, 16, 24, 24,\n+        16, 16, 16, 16, 16, 16, 16, 16,\n+        16, 16, 16, 16, 16, 16, 25, 16,\n+        16, 16, 16, 17, 16, 24, 24, 16,\n+        16, 16, 16, 16, 16, 16, 16, 16,\n+        16, 16, 16, 16, 16, 25, 16, 14,\n+        14, 16, 16, 16, 16, 16, 16, 16,\n+        16, 16, 16, 16, 16, 16, 26, 15,\n+        16, 16, 16, 16, 17, 16, 28, 28,\n+        27, 27, 29, 29, 27, 27, 27, 27,\n+        2, 2, 27, 30, 27, 28, 27, 27,\n+        27, 27, 15, 19, 27, 27, 27, 17,\n+        23, 25, 21, 27, 32, 32, 31, 31,\n+        31, 31, 31, 31, 31, 33, 31, 31,\n+        31, 31, 31, 2, 3, 6, 31, 31,\n+        31, 4, 10, 12, 8, 31, 34, 34,\n+        31, 31, 31, 31, 31, 31, 31, 35,\n+        31, 31, 31, 31, 31, 31, 3, 6,\n+        31, 31, 31, 4, 10, 12, 8, 31,\n+        5, 5, 31, 31, 31, 31, 31, 31,\n+        31, 35, 31, 31, 31, 31, 31, 31,\n+        4, 6, 31, 31, 31, 31, 31, 31,\n+        8, 31, 6, 31, 7, 7, 31, 31,\n+        31, 31, 31, 31, 31, 35, 31, 31,\n+        31, 31, 31, 31, 8, 6, 31, 36,\n+        36, 31, 31, 31, 31, 31, 31, 31,\n+        35, 31, 31, 31, 31, 31, 31, 10,\n+        6, 31, 31, 31, 4, 31, 31, 8,\n+        31, 37, 37, 31, 31, 31, 31, 31,\n+        31, 31, 35, 31, 31, 31, 31, 31,\n+        31, 12, 6, 31, 31, 31, 4, 10,\n+        31, 8, 31, 34, 34, 31, 31, 31,\n+        31, 31, 31, 31, 33, 31, 31, 31,\n+        31, 31, 31, 3, 6, 31, 31, 31,\n+        4, 10, 12, 8, 31, 28, 28, 31,\n+        31, 31, 31, 31, 31, 31, 31, 31,\n+        31, 31, 31, 31, 28, 31, 14, 14,\n+        38, 38, 38, 38, 38, 38, 38, 38,\n+        38, 38, 38, 38, 38, 38, 15, 38,\n+        38, 38, 38, 17, 38, 40, 40, 39,\n+        39, 39, 39, 39, 39, 39, 41, 39,\n+        39, 39, 39, 39, 39, 15, 19, 39,\n+        39, 39, 17, 23, 25, 21, 39, 18,\n+        18, 39, 39, 39, 39, 39, 39, 39,\n+        41, 39, 39, 39, 39, 39, 39, 17,\n+        19, 39, 39, 39, 39, 39, 39, 21,\n+        39, 19, 39, 20, 20, 39, 39, 39,\n+        39, 39, 39, 39, 41, 39, 39, 39,\n+        39, 39, 39, 21, 19, 39, 42, 42,\n+        39, 39, 39, 39, 39, 39, 39, 41,\n+        39, 39, 39, 39, 39, 39, 23, 19,\n+        39, 39, 39, 17, 39, 39, 21, 39,\n+        43, 43, 39, 39, 39, 39, 39, 39,\n+        39, 41, 39, 39, 39, 39, 39, 39,\n+        25, 19, 39, 39, 39, 17, 23, 39,\n+        21, 39, 44, 44, 39, 39, 39, 39,\n@@ -164,8 +160,7 @@\n-        39, 39, 28, 39, 45, 45, 40, 40,\n-        40, 40, 40, 40, 40, 46, 40, 40,\n-        40, 40, 40, 27, 16, 20, 40, 40,\n-        40, 18, 24, 26, 22, 40, 41, 41,\n-        40, 40, 40, 40, 40, 40, 40, 46,\n-        40, 40, 40, 40, 40, 40, 16, 20,\n-        40, 40, 40, 18, 24, 26, 22, 40,\n-        0\n+        39, 44, 39, 45, 45, 39, 39, 39,\n+        39, 39, 39, 39, 30, 39, 39, 39,\n+        39, 39, 26, 15, 19, 39, 39, 39,\n+        17, 23, 25, 21, 39, 40, 40, 39,\n+        39, 39, 39, 39, 39, 39, 30, 39,\n+        39, 39, 39, 39, 39, 15, 19, 39,\n+        39, 39, 17, 23, 25, 21, 39, 0\n@@ -175,6 +170,6 @@\n-        22, 1, 30, 24, 25, 3, 26, 5,\n-        27, 7, 28, 9, 29, 23, 22, 11,\n-        32, 22, 33, 13, 34, 15, 35, 17,\n-        36, 19, 37, 40, 39, 22, 31, 38,\n-        22, 0, 10, 2, 4, 6, 8, 22,\n-        22, 12, 14, 16, 18, 20, 21\n+        20, 1, 28, 22, 23, 3, 24, 5,\n+        25, 7, 26, 9, 27, 20, 10, 31,\n+        20, 32, 12, 33, 14, 34, 16, 35,\n+        18, 36, 39, 20, 21, 30, 37, 20,\n+        0, 29, 2, 4, 6, 8, 20, 20,\n+        11, 13, 15, 17, 38, 19\n@@ -185,5 +180,5 @@\n-        2, 0, 2, 0, 2, 2, 3, 0,\n-        4, 5, 2, 0, 0, 0, 2, 0,\n-        2, 0, 2, 4, 4, 8, 9, 0,\n-        10, 0, 0, 0, 0, 0, 0, 11,\n-        12, 0, 0, 0, 0, 0, 0\n+        2, 0, 2, 0, 2, 3, 0, 4,\n+        5, 2, 0, 0, 0, 2, 0, 2,\n+        0, 2, 4, 8, 2, 9, 0, 10,\n+        0, 0, 0, 0, 0, 0, 11, 12,\n+        0, 0, 0, 0, 4, 0\n@@ -195,1 +190,1 @@\n-        0, 0, 0, 0, 0, 0, 6, 0,\n+        0, 0, 0, 0, 6, 0, 0, 0,\n@@ -197,2 +192,1 @@\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0\n+        0, 0, 0, 0, 0, 0, 0, 0\n@@ -204,1 +198,1 @@\n-        0, 0, 0, 0, 0, 0, 7, 0,\n+        0, 0, 0, 0, 7, 0, 0, 0,\n@@ -206,2 +200,1 @@\n-        0, 0, 0, 0, 0, 0, 0, 0,\n-        0\n+        0, 0, 0, 0, 0, 0, 0, 0\n@@ -212,5 +205,4 @@\n-        1, 1, 1, 15, 18, 18, 18, 18,\n-        18, 18, 18, 18, 18, 18, 0, 33,\n-        33, 33, 33, 33, 33, 33, 33, 40,\n-        41, 41, 41, 41, 41, 41, 40, 41,\n-        41\n+        1, 1, 14, 17, 17, 17, 17, 17,\n+        17, 17, 17, 17, 0, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 39, 40,\n+        40, 40, 40, 40, 40, 40, 40, 40\n@@ -219,2 +211,2 @@\n-static const int khmer_syllable_machine_start = 22;\n-static const int khmer_syllable_machine_first_final = 22;\n+static const int khmer_syllable_machine_start = 20;\n+static const int khmer_syllable_machine_first_final = 20;\n@@ -223,1 +215,1 @@\n-static const int khmer_syllable_machine_en_main = 22;\n+static const int khmer_syllable_machine_en_main = 20;\n@@ -237,1 +229,1 @@\n-      info[i].syllable() = (syllable_serial << 4) | syllable_type; \\\n+      info[i].syllable() = (syllable_serial << 4) | khmer_##syllable_type; \\\n@@ -243,1 +235,1 @@\n-find_syllables (hb_buffer_t *buffer)\n+find_syllables_khmer (hb_buffer_t *buffer)\n@@ -249,1 +241,1 @@\n-#line 250 \"hb-ot-shape-complex-khmer-machine.hh\"\n+#line 242 \"hb-ot-shape-complex-khmer-machine.hh\"\n@@ -265,1 +257,1 @@\n-#line 266 \"hb-ot-shape-complex-khmer-machine.hh\"\n+#line 258 \"hb-ot-shape-complex-khmer-machine.hh\"\n@@ -279,1 +271,1 @@\n-#line 280 \"hb-ot-shape-complex-khmer-machine.hh\"\n+#line 272 \"hb-ot-shape-complex-khmer-machine.hh\"\n@@ -349,1 +341,1 @@\n-#line 350 \"hb-ot-shape-complex-khmer-machine.hh\"\n+#line 342 \"hb-ot-shape-complex-khmer-machine.hh\"\n@@ -358,1 +350,1 @@\n-#line 359 \"hb-ot-shape-complex-khmer-machine.hh\"\n+#line 351 \"hb-ot-shape-complex-khmer-machine.hh\"\n@@ -378,0 +370,2 @@\n+#undef found_syllable\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-khmer-machine.hh","additions":124,"deletions":130,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -55,7 +59,0 @@\n-  \/*\n-   * Positioning features.\n-   * We don't care about the types.\n-   *\/\n-  {HB_TAG('d','i','s','t'), F_GLOBAL},\n-  {HB_TAG('a','b','v','m'), F_GLOBAL},\n-  {HB_TAG('b','l','w','m'), F_GLOBAL},\n@@ -68,10 +65,5 @@\n-  PREF,\n-  BLWF,\n-  ABVF,\n-  PSTF,\n-  CFAR,\n-\n-  _PRES,\n-  _ABVS,\n-  _BLWS,\n-  _PSTS,\n+  KHMER_PREF,\n+  KHMER_BLWF,\n+  KHMER_ABVF,\n+  KHMER_PSTF,\n+  KHMER_CFAR,\n@@ -79,3 +71,4 @@\n-  _DIST,\n-  _ABVM,\n-  _BLWM,\n+  _KHMER_PRES,\n+  _KHMER_ABVS,\n+  _KHMER_BLWS,\n+  _KHMER_PSTS,\n@@ -84,1 +77,1 @@\n-  KHMER_BASIC_FEATURES = _PRES, \/* Don't forget to update this! *\/\n+  KHMER_BASIC_FEATURES = _KHMER_PRES, \/* Don't forget to update this! *\/\n@@ -88,7 +81,3 @@\n-setup_syllables (const hb_ot_shape_plan_t *plan,\n-                 hb_font_t *font,\n-                 hb_buffer_t *buffer);\n-static void\n-reorder (const hb_ot_shape_plan_t *plan,\n-         hb_font_t *font,\n-         hb_buffer_t *buffer);\n+setup_syllables_khmer (const hb_ot_shape_plan_t *plan,\n+                       hb_font_t *font,\n+                       hb_buffer_t *buffer);\n@@ -96,3 +85,3 @@\n-clear_syllables (const hb_ot_shape_plan_t *plan,\n-                 hb_font_t *font,\n-                 hb_buffer_t *buffer);\n+reorder_khmer (const hb_ot_shape_plan_t *plan,\n+               hb_font_t *font,\n+               hb_buffer_t *buffer);\n@@ -106,2 +95,2 @@\n-  map->add_gsub_pause (setup_syllables);\n-  map->add_gsub_pause (reorder);\n+  map->add_gsub_pause (setup_syllables_khmer);\n+  map->add_gsub_pause (reorder_khmer);\n@@ -126,1 +115,1 @@\n-  map->add_gsub_pause (clear_syllables);\n+  map->add_gsub_pause (_hb_clear_syllables);\n@@ -152,26 +141,0 @@\n-struct would_substitute_feature_t\n-{\n-  void init (const hb_ot_map_t *map, hb_tag_t feature_tag, bool zero_context_)\n-  {\n-    zero_context = zero_context_;\n-    map->get_stage_lookups (0\/*GSUB*\/,\n-                            map->get_feature_stage (0\/*GSUB*\/, feature_tag),\n-                            &lookups, &count);\n-  }\n-\n-  bool would_substitute (const hb_codepoint_t *glyphs,\n-                         unsigned int          glyphs_count,\n-                         hb_face_t            *face) const\n-  {\n-    for (unsigned int i = 0; i < count; i++)\n-      if (hb_ot_layout_lookup_would_substitute_fast (face, lookups[i].index, glyphs, glyphs_count, zero_context))\n-        return true;\n-    return false;\n-  }\n-\n-  private:\n-  const hb_ot_map_t::lookup_map_t *lookups;\n-  unsigned int count;\n-  bool zero_context;\n-};\n-\n@@ -201,2 +164,0 @@\n-  would_substitute_feature_t pref;\n-\n@@ -215,2 +176,0 @@\n-  khmer_plan->pref.init (&plan->map, HB_TAG('p','r','e','f'), true);\n-\n@@ -231,4 +190,4 @@\n-enum syllable_type_t {\n-  consonant_syllable,\n-  broken_cluster,\n-  non_khmer_cluster,\n+enum khmer_syllable_type_t {\n+  khmer_consonant_syllable,\n+  khmer_broken_cluster,\n+  khmer_non_khmer_cluster,\n@@ -256,3 +215,3 @@\n-setup_syllables (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                 hb_font_t *font HB_UNUSED,\n-                 hb_buffer_t *buffer)\n+setup_syllables_khmer (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                       hb_font_t *font HB_UNUSED,\n+                       hb_buffer_t *buffer)\n@@ -260,1 +219,1 @@\n-  find_syllables (buffer);\n+  find_syllables_khmer (buffer);\n@@ -281,1 +240,3 @@\n-    hb_mask_t mask = khmer_plan->mask_array[BLWF] | khmer_plan->mask_array[ABVF] | khmer_plan->mask_array[PSTF];\n+    hb_mask_t mask = khmer_plan->mask_array[KHMER_BLWF] |\n+                     khmer_plan->mask_array[KHMER_ABVF] |\n+                     khmer_plan->mask_array[KHMER_PSTF];\n@@ -308,1 +269,1 @@\n-          info[i + j].mask |= khmer_plan->mask_array[PREF];\n+          info[i + j].mask |= khmer_plan->mask_array[KHMER_PREF];\n@@ -324,1 +285,1 @@\n-        if (khmer_plan->mask_array[CFAR])\n+        if (khmer_plan->mask_array[KHMER_CFAR])\n@@ -326,1 +287,1 @@\n-            info[j].mask |= khmer_plan->mask_array[CFAR];\n+            info[j].mask |= khmer_plan->mask_array[KHMER_CFAR];\n@@ -345,4 +306,4 @@\n-initial_reordering_syllable (const hb_ot_shape_plan_t *plan,\n-                             hb_face_t *face,\n-                             hb_buffer_t *buffer,\n-                             unsigned int start, unsigned int end)\n+reorder_syllable_khmer (const hb_ot_shape_plan_t *plan,\n+                        hb_face_t *face,\n+                        hb_buffer_t *buffer,\n+                        unsigned int start, unsigned int end)\n@@ -350,1 +311,1 @@\n-  syllable_type_t syllable_type = (syllable_type_t) (buffer->info[start].syllable() & 0x0F);\n+  khmer_syllable_type_t syllable_type = (khmer_syllable_type_t) (buffer->info[start].syllable() & 0x0F);\n@@ -353,2 +314,2 @@\n-    case broken_cluster: \/* We already inserted dotted-circles, so just call the consonant_syllable. *\/\n-    case consonant_syllable:\n+    case khmer_broken_cluster: \/* We already inserted dotted-circles, so just call the consonant_syllable. *\/\n+    case khmer_consonant_syllable:\n@@ -358,1 +319,1 @@\n-    case non_khmer_cluster:\n+    case khmer_non_khmer_cluster:\n@@ -364,3 +325,3 @@\n-insert_dotted_circles (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                       hb_font_t *font,\n-                       hb_buffer_t *buffer)\n+insert_dotted_circles_khmer (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                             hb_font_t *font,\n+                             hb_buffer_t *buffer)\n@@ -368,1 +329,5 @@\n-  \/* Note: This loop is extra overhead, but should not be measurable. *\/\n+  if (unlikely (buffer->flags & HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE))\n+    return;\n+\n+  \/* Note: This loop is extra overhead, but should not be measurable.\n+   * TODO Use a buffer scratch flag to remove the loop. *\/\n@@ -373,1 +338,1 @@\n-    if ((info[i].syllable() & 0x0F) == broken_cluster)\n+    if ((info[i].syllable() & 0x0F) == khmer_broken_cluster)\n@@ -398,2 +363,2 @@\n-    syllable_type_t syllable_type = (syllable_type_t) (syllable & 0x0F);\n-    if (unlikely (last_syllable != syllable && syllable_type == broken_cluster))\n+    khmer_syllable_type_t syllable_type = (khmer_syllable_type_t) (syllable & 0x0F);\n+    if (unlikely (last_syllable != syllable && syllable_type == khmer_broken_cluster))\n@@ -407,1 +372,0 @@\n-      \/* TODO Set glyph_props? *\/\n@@ -424,3 +388,3 @@\n-reorder (const hb_ot_shape_plan_t *plan,\n-         hb_font_t *font,\n-         hb_buffer_t *buffer)\n+reorder_khmer (const hb_ot_shape_plan_t *plan,\n+               hb_font_t *font,\n+               hb_buffer_t *buffer)\n@@ -428,1 +392,1 @@\n-  insert_dotted_circles (plan, font, buffer);\n+  insert_dotted_circles_khmer (plan, font, buffer);\n@@ -431,1 +395,1 @@\n-    initial_reordering_syllable (plan, font->face, buffer, start, end);\n+    reorder_syllable_khmer (plan, font->face, buffer, start, end);\n@@ -436,11 +400,0 @@\n-static void\n-clear_syllables (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                 hb_font_t *font HB_UNUSED,\n-                 hb_buffer_t *buffer)\n-{\n-  hb_glyph_info_t *info = buffer->info;\n-  unsigned int count = buffer->len;\n-  for (unsigned int i = 0; i < count; i++)\n-    info[i].syllable() = 0;\n-}\n-\n@@ -502,0 +455,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-khmer.cc","additions":64,"deletions":108,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -46,5 +46,4 @@\n-\n-  OT_VAbv    = 26,\n-  OT_VBlw    = 27,\n-  OT_VPre    = 28,\n-  OT_VPst    = 29,\n+  \/\/OT_VAbv = 26,\n+  \/\/OT_VBlw = 27,\n+  \/\/OT_VPre = 28,\n+  \/\/OT_VPst = 29,\n@@ -103,4 +102,4 @@\n-      case POS_PRE_C:   cat = OT_VPre; break;\n-      case POS_BELOW_C: cat = OT_VBlw; break;\n-      case POS_ABOVE_C: cat = OT_VAbv; break;\n-      case POS_POST_C:  cat = OT_VPst; break;\n+      case POS_PRE_C:   cat = (khmer_category_t) OT_VPre; break;\n+      case POS_BELOW_C: cat = (khmer_category_t) OT_VBlw; break;\n+      case POS_ABOVE_C: cat = (khmer_category_t) OT_VAbv; break;\n+      case POS_POST_C:  cat = (khmer_category_t) OT_VPst; break;\n@@ -108,1 +107,1 @@\n-    };\n+    }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-khmer.hh","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -39,5 +39,5 @@\n-        3u, 29u, 3u, 29u, 3u, 30u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 29u, 5u, 29u,\n-        5u, 8u, 5u, 29u, 3u, 25u, 5u, 25u, 5u, 25u, 3u, 29u, 3u, 29u, 3u, 29u,\n-        3u, 29u, 3u, 30u, 3u, 29u, 1u, 32u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 29u,\n-        3u, 29u, 3u, 30u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 29u, 1u, 32u, 8u, 8u,\n-        0\n+        3u, 29u, 3u, 29u, 3u, 30u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 29u,\n+        5u, 29u, 5u, 8u, 5u, 29u, 3u, 25u, 5u, 25u, 5u, 25u, 3u, 29u, 3u, 29u,\n+        3u, 29u, 3u, 29u, 1u, 16u, 3u, 30u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 29u,\n+        3u, 29u, 3u, 30u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 29u, 3u, 30u,\n+        3u, 29u, 1u, 32u, 1u, 32u, 8u, 8u, 0\n@@ -49,4 +49,5 @@\n-        27, 27, 28, 27, 27, 27, 27, 25,\n-        4, 25, 23, 21, 21, 27, 27, 27,\n-        27, 28, 27, 32, 27, 27, 27, 27,\n-        27, 28, 27, 27, 27, 27, 32, 1\n+        27, 27, 28, 27, 27, 27, 27, 27,\n+        25, 4, 25, 23, 21, 21, 27, 27,\n+        27, 27, 16, 28, 27, 27, 27, 27,\n+        27, 28, 27, 27, 27, 27, 27, 28,\n+        27, 32, 32, 1\n@@ -59,3 +60,4 @@\n-        623, 628, 654, 678, 700, 722, 750, 778,\n-        806, 834, 863, 891, 924, 952, 980, 1008,\n-        1036, 1064, 1093, 1121, 1149, 1177, 1205, 1238\n+        625, 651, 656, 682, 706, 728, 750, 778,\n+        806, 834, 862, 879, 908, 936, 964, 992,\n+        1020, 1048, 1077, 1105, 1133, 1161, 1189, 1217,\n+        1246, 1274, 1307, 1340\n@@ -127,1 +129,1 @@\n-        21, 21, 21, 21, 43, 21, 21, 28,\n+        21, 21, 21, 21, 21, 21, 21, 28,\n@@ -134,1 +136,1 @@\n-        21, 21, 21, 21, 43, 21, 21, 28,\n+        21, 21, 21, 21, 44, 21, 21, 28,\n@@ -136,1 +138,1 @@\n-        21, 22, 23, 24, 24, 21, 25, 21,\n+        21, 22, 21, 24, 24, 21, 25, 21,\n@@ -138,41 +140,78 @@\n-        27, 21, 21, 28, 29, 30, 31, 32,\n-        33, 34, 35, 36, 21, 3, 3, 44,\n-        5, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 45, 44, 44, 44, 44, 44,\n-        44, 14, 44, 44, 44, 18, 44, 3,\n-        3, 44, 5, 44, 3, 3, 44, 5,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        14, 44, 44, 44, 18, 44, 46, 44,\n-        3, 3, 44, 5, 44, 14, 44, 44,\n-        44, 44, 44, 44, 44, 47, 44, 44,\n-        44, 44, 44, 44, 14, 44, 3, 3,\n-        44, 5, 44, 44, 44, 44, 44, 44,\n-        44, 44, 44, 47, 44, 44, 44, 44,\n-        44, 44, 14, 44, 3, 3, 44, 5,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        14, 44, 2, 44, 3, 3, 44, 5,\n-        44, 6, 44, 44, 44, 44, 44, 44,\n-        44, 48, 44, 44, 48, 44, 44, 44,\n-        14, 49, 44, 44, 18, 44, 2, 44,\n-        3, 3, 44, 5, 44, 6, 44, 44,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 44, 44, 14, 44, 44, 44,\n-        18, 44, 2, 44, 3, 3, 44, 5,\n-        44, 6, 44, 44, 44, 44, 44, 44,\n-        44, 48, 44, 44, 44, 44, 44, 44,\n-        14, 49, 44, 44, 18, 44, 2, 44,\n-        3, 3, 44, 5, 44, 6, 44, 44,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 44, 44, 14, 49, 44, 44,\n-        18, 44, 22, 23, 24, 24, 21, 25,\n-        21, 26, 21, 21, 21, 21, 21, 21,\n-        21, 50, 21, 21, 28, 29, 30, 31,\n-        32, 33, 34, 35, 36, 37, 21, 22,\n-        51, 24, 24, 21, 25, 21, 26, 21,\n-        21, 21, 21, 21, 21, 21, 27, 21,\n-        21, 28, 29, 30, 31, 32, 33, 34,\n-        35, 36, 21, 1, 1, 2, 3, 3,\n-        3, 44, 5, 44, 6, 1, 44, 44,\n-        44, 44, 1, 44, 8, 44, 44, 10,\n+        21, 21, 21, 28, 29, 30, 21, 32,\n+        33, 34, 35, 36, 21, 22, 23, 24,\n+        24, 21, 25, 21, 26, 21, 21, 21,\n+        21, 21, 21, 21, 27, 21, 21, 28,\n+        29, 30, 31, 32, 33, 34, 35, 36,\n+        21, 46, 46, 45, 5, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 47, 45,\n+        45, 45, 45, 45, 45, 14, 45, 45,\n+        45, 18, 45, 46, 46, 45, 5, 45,\n+        46, 46, 45, 5, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        45, 45, 45, 45, 14, 45, 45, 45,\n+        18, 45, 48, 45, 46, 46, 45, 5,\n+        45, 14, 45, 45, 45, 45, 45, 45,\n+        45, 49, 45, 45, 45, 45, 45, 45,\n+        14, 45, 46, 46, 45, 5, 45, 45,\n+        45, 45, 45, 45, 45, 45, 45, 49,\n+        45, 45, 45, 45, 45, 45, 14, 45,\n+        46, 46, 45, 5, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        45, 45, 45, 45, 14, 45, 2, 45,\n+        46, 46, 45, 5, 45, 6, 45, 45,\n+        45, 45, 45, 45, 45, 50, 45, 45,\n+        50, 45, 45, 45, 14, 51, 45, 45,\n+        18, 45, 2, 45, 46, 46, 45, 5,\n+        45, 6, 45, 45, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        14, 45, 45, 45, 18, 45, 2, 45,\n+        46, 46, 45, 5, 45, 6, 45, 45,\n+        45, 45, 45, 45, 45, 50, 45, 45,\n+        45, 45, 45, 45, 14, 51, 45, 45,\n+        18, 45, 2, 45, 46, 46, 45, 5,\n+        45, 6, 45, 45, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        14, 51, 45, 45, 18, 45, 52, 52,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 52, 45, 2,\n+        3, 46, 46, 45, 5, 45, 6, 45,\n+        45, 45, 45, 45, 45, 45, 8, 45,\n+        45, 10, 11, 12, 13, 14, 15, 16,\n+        17, 18, 19, 45, 2, 45, 46, 46,\n+        45, 5, 45, 6, 45, 45, 45, 45,\n+        45, 45, 45, 8, 45, 45, 10, 11,\n+        12, 13, 14, 15, 16, 17, 18, 45,\n+        2, 45, 46, 46, 45, 5, 45, 6,\n+        45, 45, 45, 45, 45, 45, 45, 53,\n+        45, 45, 45, 45, 45, 45, 14, 15,\n+        16, 17, 18, 45, 2, 45, 46, 46,\n+        45, 5, 45, 6, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        45, 45, 14, 15, 16, 17, 18, 45,\n+        2, 45, 46, 46, 45, 5, 45, 6,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 14, 15,\n+        16, 45, 18, 45, 2, 45, 46, 46,\n+        45, 5, 45, 6, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        45, 45, 14, 45, 16, 45, 18, 45,\n+        2, 45, 46, 46, 45, 5, 45, 6,\n+        45, 45, 45, 45, 45, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 14, 15,\n+        16, 17, 18, 53, 45, 2, 45, 46,\n+        46, 45, 5, 45, 6, 45, 45, 45,\n+        45, 45, 45, 45, 45, 45, 45, 10,\n+        45, 12, 45, 14, 15, 16, 17, 18,\n+        45, 2, 45, 46, 46, 45, 5, 45,\n+        6, 45, 45, 45, 45, 45, 45, 45,\n+        53, 45, 45, 10, 45, 45, 45, 14,\n+        15, 16, 17, 18, 45, 2, 45, 46,\n+        46, 45, 5, 45, 6, 45, 45, 45,\n+        45, 45, 45, 45, 54, 45, 45, 10,\n+        11, 12, 45, 14, 15, 16, 17, 18,\n+        45, 2, 45, 46, 46, 45, 5, 45,\n+        6, 45, 45, 45, 45, 45, 45, 45,\n+        45, 45, 45, 10, 11, 12, 45, 14,\n+        15, 16, 17, 18, 45, 2, 3, 46,\n+        46, 45, 5, 45, 6, 45, 45, 45,\n+        45, 45, 45, 45, 8, 45, 45, 10,\n@@ -180,41 +219,16 @@\n-        19, 44, 1, 44, 2, 44, 3, 3,\n-        44, 5, 44, 6, 44, 44, 44, 44,\n-        44, 44, 44, 8, 44, 44, 10, 11,\n-        12, 13, 14, 15, 16, 17, 18, 44,\n-        2, 44, 3, 3, 44, 5, 44, 6,\n-        44, 44, 44, 44, 44, 44, 44, 52,\n-        44, 44, 44, 44, 44, 44, 14, 15,\n-        16, 17, 18, 44, 2, 44, 3, 3,\n-        44, 5, 44, 6, 44, 44, 44, 44,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 14, 15, 16, 17, 18, 44,\n-        2, 44, 3, 3, 44, 5, 44, 6,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 44, 44, 44, 44, 14, 15,\n-        16, 44, 18, 44, 2, 44, 3, 3,\n-        44, 5, 44, 6, 44, 44, 44, 44,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 14, 44, 16, 44, 18, 44,\n-        2, 44, 3, 3, 44, 5, 44, 6,\n-        44, 44, 44, 44, 44, 44, 44, 44,\n-        44, 44, 44, 44, 44, 44, 14, 15,\n-        16, 17, 18, 52, 44, 2, 44, 3,\n-        3, 44, 5, 44, 6, 44, 44, 44,\n-        44, 44, 44, 44, 52, 44, 44, 10,\n-        44, 12, 44, 14, 15, 16, 17, 18,\n-        44, 2, 44, 3, 3, 44, 5, 44,\n-        6, 44, 44, 44, 44, 44, 44, 44,\n-        52, 44, 44, 10, 44, 44, 44, 14,\n-        15, 16, 17, 18, 44, 2, 44, 3,\n-        3, 44, 5, 44, 6, 44, 44, 44,\n-        44, 44, 44, 44, 52, 44, 44, 10,\n-        11, 12, 44, 14, 15, 16, 17, 18,\n-        44, 2, 3, 3, 3, 44, 5, 44,\n-        6, 44, 44, 44, 44, 44, 44, 44,\n-        8, 44, 44, 10, 11, 12, 13, 14,\n-        15, 16, 17, 18, 44, 1, 1, 53,\n-        53, 53, 53, 53, 53, 53, 53, 1,\n-        53, 53, 53, 53, 1, 53, 53, 53,\n-        53, 53, 53, 53, 53, 53, 53, 53,\n-        53, 53, 53, 53, 1, 53, 54, 53,\n-        0\n+        45, 22, 23, 24, 24, 21, 25, 21,\n+        26, 21, 21, 21, 21, 21, 21, 21,\n+        55, 21, 21, 28, 29, 30, 31, 32,\n+        33, 34, 35, 36, 37, 21, 22, 56,\n+        24, 24, 21, 25, 21, 26, 21, 21,\n+        21, 21, 21, 21, 21, 27, 21, 21,\n+        28, 29, 30, 31, 32, 33, 34, 35,\n+        36, 21, 1, 1, 2, 3, 46, 46,\n+        45, 5, 45, 6, 1, 45, 45, 45,\n+        45, 1, 45, 8, 45, 45, 10, 11,\n+        12, 13, 14, 15, 16, 17, 18, 19,\n+        45, 1, 45, 1, 1, 57, 57, 57,\n+        57, 57, 57, 57, 57, 1, 57, 57,\n+        57, 57, 1, 57, 57, 57, 57, 57,\n+        57, 57, 57, 57, 57, 57, 57, 57,\n+        57, 57, 1, 57, 58, 57, 0\n@@ -224,3 +238,3 @@\n-        0, 1, 23, 0, 0, 24, 30, 33,\n-        36, 46, 37, 42, 43, 44, 26, 39,\n-        40, 41, 29, 45, 47, 0, 2, 12,\n+        0, 1, 24, 34, 0, 25, 31, 47,\n+        36, 50, 37, 42, 43, 44, 27, 39,\n+        40, 41, 30, 46, 51, 0, 2, 12,\n@@ -228,3 +242,4 @@\n-        5, 16, 17, 18, 8, 22, 4, 6,\n-        7, 10, 11, 15, 0, 25, 27, 28,\n-        31, 32, 34, 35, 38, 0, 0\n+        5, 16, 17, 18, 8, 23, 4, 6,\n+        7, 10, 11, 15, 22, 0, 0, 26,\n+        28, 29, 32, 33, 35, 38, 45, 48,\n+        49, 0, 0\n@@ -234,1 +249,4 @@\n-        3, 0, 0, 4, 5, 0, 0, 0,\n+        3, 0, 0, 0, 4, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 5, 0, 0,\n+        6, 0, 0, 0, 0, 0, 0, 0,\n@@ -236,2 +254,1 @@\n-        0, 0, 0, 0, 0, 6, 0, 0,\n-        7, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 7, 8, 0,\n@@ -239,2 +256,1 @@\n-        0, 0, 0, 0, 8, 0, 0, 0,\n-        0, 0, 0, 0, 0, 9, 10\n+        0, 9, 10\n@@ -249,1 +265,2 @@\n-        0, 0, 0, 0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0\n@@ -258,1 +275,2 @@\n-        0, 0, 0, 0, 0, 0, 0, 0\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0\n@@ -264,4 +282,5 @@\n-        22, 22, 22, 22, 22, 22, 22, 45,\n-        45, 45, 45, 45, 45, 45, 45, 45,\n-        45, 22, 22, 45, 45, 45, 45, 45,\n-        45, 45, 45, 45, 45, 45, 54, 54\n+        22, 22, 22, 22, 22, 22, 22, 22,\n+        46, 46, 46, 46, 46, 46, 46, 46,\n+        46, 46, 46, 46, 46, 46, 46, 46,\n+        46, 46, 46, 46, 46, 46, 46, 22,\n+        22, 46, 58, 58\n@@ -288,1 +307,1 @@\n-      info[i].syllable() = (syllable_serial << 4) | syllable_type; \\\n+      info[i].syllable() = (syllable_serial << 4) | myanmar_##syllable_type; \\\n@@ -294,1 +313,1 @@\n-find_syllables (hb_buffer_t *buffer)\n+find_syllables_myanmar (hb_buffer_t *buffer)\n@@ -300,1 +319,1 @@\n-#line 301 \"hb-ot-shape-complex-myanmar-machine.hh\"\n+#line 320 \"hb-ot-shape-complex-myanmar-machine.hh\"\n@@ -316,1 +335,1 @@\n-#line 317 \"hb-ot-shape-complex-myanmar-machine.hh\"\n+#line 336 \"hb-ot-shape-complex-myanmar-machine.hh\"\n@@ -330,1 +349,1 @@\n-#line 331 \"hb-ot-shape-complex-myanmar-machine.hh\"\n+#line 350 \"hb-ot-shape-complex-myanmar-machine.hh\"\n@@ -348,1 +367,1 @@\n-        case 7:\n+        case 6:\n@@ -352,1 +371,1 @@\n-        case 5:\n+        case 4:\n@@ -360,1 +379,1 @@\n-        case 4:\n+        case 8:\n@@ -368,1 +387,1 @@\n-        case 6:\n+        case 5:\n@@ -372,1 +391,1 @@\n-        case 8:\n+        case 7:\n@@ -380,1 +399,1 @@\n-#line 381 \"hb-ot-shape-complex-myanmar-machine.hh\"\n+#line 400 \"hb-ot-shape-complex-myanmar-machine.hh\"\n@@ -389,1 +408,1 @@\n-#line 390 \"hb-ot-shape-complex-myanmar-machine.hh\"\n+#line 409 \"hb-ot-shape-complex-myanmar-machine.hh\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-myanmar-machine.hh","additions":145,"deletions":126,"binary":false,"changes":271,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -35,1 +39,1 @@\n-basic_features[] =\n+myanmar_basic_features[] =\n@@ -47,1 +51,1 @@\n-other_features[] =\n+myanmar_other_features[] =\n@@ -58,19 +62,0 @@\n-static const hb_tag_t\n-positioning_features[] =\n-{\n-  \/*\n-   * Positioning features.\n-   * We don't care about the types.\n-   *\/\n-  HB_TAG('d','i','s','t'),\n-  \/* Pre-release version of Windows 8 Myanmar font had abvm,blwm\n-   * features.  The released Windows 8 version of the font (as well\n-   * as the released spec) used 'mark' instead.  The Windows 8\n-   * shaper however didn't apply 'mark' but did apply 'mkmk'.\n-   * Perhaps it applied abvm\/blwm.  This was fixed in a Windows 8\n-   * update, so now it applies mark\/mkmk.  We are guessing that\n-   * it still applies abvm\/blwm too.\n-   *\/\n-  HB_TAG('a','b','v','m'),\n-  HB_TAG('b','l','w','m'),\n-};\n@@ -79,7 +64,3 @@\n-setup_syllables (const hb_ot_shape_plan_t *plan,\n-                 hb_font_t *font,\n-                 hb_buffer_t *buffer);\n-static void\n-reorder (const hb_ot_shape_plan_t *plan,\n-         hb_font_t *font,\n-         hb_buffer_t *buffer);\n+setup_syllables_myanmar (const hb_ot_shape_plan_t *plan,\n+                         hb_font_t *font,\n+                         hb_buffer_t *buffer);\n@@ -87,1 +68,1 @@\n-clear_syllables (const hb_ot_shape_plan_t *plan,\n+reorder_myanmar (const hb_ot_shape_plan_t *plan,\n@@ -97,1 +78,1 @@\n-  map->add_gsub_pause (setup_syllables);\n+  map->add_gsub_pause (setup_syllables_myanmar);\n@@ -105,1 +86,1 @@\n-  map->add_gsub_pause (reorder);\n+  map->add_gsub_pause (reorder_myanmar);\n@@ -107,1 +88,1 @@\n-  for (unsigned int i = 0; i < ARRAY_LENGTH (basic_features); i++)\n+  for (unsigned int i = 0; i < ARRAY_LENGTH (myanmar_basic_features); i++)\n@@ -109,1 +90,1 @@\n-    map->enable_feature (basic_features[i], F_MANUAL_ZWJ);\n+    map->enable_feature (myanmar_basic_features[i], F_MANUAL_ZWJ);\n@@ -113,1 +94,1 @@\n-  map->add_gsub_pause (clear_syllables);\n+  map->add_gsub_pause (_hb_clear_syllables);\n@@ -115,5 +96,2 @@\n-  for (unsigned int i = 0; i < ARRAY_LENGTH (other_features); i++)\n-    map->enable_feature (other_features[i], F_MANUAL_ZWJ);\n-\n-  for (unsigned int i = 0; i < ARRAY_LENGTH (positioning_features); i++)\n-    map->enable_feature (positioning_features[i]);\n+  for (unsigned int i = 0; i < ARRAY_LENGTH (myanmar_other_features); i++)\n+    map->enable_feature (myanmar_other_features[i], F_MANUAL_ZWJ);\n@@ -129,5 +107,5 @@\n-enum syllable_type_t {\n-  consonant_syllable,\n-  punctuation_cluster,\n-  broken_cluster,\n-  non_myanmar_cluster,\n+enum myanmar_syllable_type_t {\n+  myanmar_consonant_syllable,\n+  myanmar_punctuation_cluster,\n+  myanmar_broken_cluster,\n+  myanmar_non_myanmar_cluster,\n@@ -141,2 +119,2 @@\n-                   hb_buffer_t              *buffer,\n-                   hb_font_t                *font HB_UNUSED)\n+                     hb_buffer_t              *buffer,\n+                     hb_font_t                *font HB_UNUSED)\n@@ -157,3 +135,3 @@\n-setup_syllables (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                 hb_font_t *font HB_UNUSED,\n-                 hb_buffer_t *buffer)\n+setup_syllables_myanmar (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                         hb_font_t *font HB_UNUSED,\n+                         hb_buffer_t *buffer)\n@@ -161,1 +139,1 @@\n-  find_syllables (buffer);\n+  find_syllables_myanmar (buffer);\n@@ -277,4 +255,4 @@\n-initial_reordering_syllable (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                             hb_face_t *face HB_UNUSED,\n-                             hb_buffer_t *buffer,\n-                             unsigned int start, unsigned int end)\n+reorder_syllable_myanmar (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                          hb_face_t *face HB_UNUSED,\n+                          hb_buffer_t *buffer,\n+                          unsigned int start, unsigned int end)\n@@ -282,1 +260,1 @@\n-  syllable_type_t syllable_type = (syllable_type_t) (buffer->info[start].syllable() & 0x0F);\n+  myanmar_syllable_type_t syllable_type = (myanmar_syllable_type_t) (buffer->info[start].syllable() & 0x0F);\n@@ -285,2 +263,2 @@\n-    case broken_cluster: \/* We already inserted dotted-circles, so just call the consonant_syllable. *\/\n-    case consonant_syllable:\n+    case myanmar_broken_cluster: \/* We already inserted dotted-circles, so just call the consonant_syllable. *\/\n+    case myanmar_consonant_syllable:\n@@ -290,2 +268,2 @@\n-    case punctuation_cluster:\n-    case non_myanmar_cluster:\n+    case myanmar_punctuation_cluster:\n+    case myanmar_non_myanmar_cluster:\n@@ -297,3 +275,3 @@\n-insert_dotted_circles (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                       hb_font_t *font,\n-                       hb_buffer_t *buffer)\n+insert_dotted_circles_myanmar (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                               hb_font_t *font,\n+                               hb_buffer_t *buffer)\n@@ -301,1 +279,5 @@\n-  \/* Note: This loop is extra overhead, but should not be measurable. *\/\n+  if (unlikely (buffer->flags & HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE))\n+    return;\n+\n+  \/* Note: This loop is extra overhead, but should not be measurable.\n+   * TODO Use a buffer scratch flag to remove the loop. *\/\n@@ -306,1 +288,1 @@\n-    if ((info[i].syllable() & 0x0F) == broken_cluster)\n+    if ((info[i].syllable() & 0x0F) == myanmar_broken_cluster)\n@@ -331,2 +313,2 @@\n-    syllable_type_t syllable_type = (syllable_type_t) (syllable & 0x0F);\n-    if (unlikely (last_syllable != syllable && syllable_type == broken_cluster))\n+    myanmar_syllable_type_t syllable_type = (myanmar_syllable_type_t) (syllable & 0x0F);\n+    if (unlikely (last_syllable != syllable && syllable_type == myanmar_broken_cluster))\n@@ -350,3 +332,3 @@\n-reorder (const hb_ot_shape_plan_t *plan,\n-         hb_font_t *font,\n-         hb_buffer_t *buffer)\n+reorder_myanmar (const hb_ot_shape_plan_t *plan,\n+                 hb_font_t *font,\n+                 hb_buffer_t *buffer)\n@@ -354,1 +336,1 @@\n-  insert_dotted_circles (plan, font, buffer);\n+  insert_dotted_circles_myanmar (plan, font, buffer);\n@@ -357,1 +339,1 @@\n-    initial_reordering_syllable (plan, font->face, buffer, start, end);\n+    reorder_syllable_myanmar (plan, font->face, buffer, start, end);\n@@ -363,11 +345,0 @@\n-static void\n-clear_syllables (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                 hb_font_t *font HB_UNUSED,\n-                 hb_buffer_t *buffer)\n-{\n-  hb_glyph_info_t *info = buffer->info;\n-  unsigned int count = buffer->len;\n-  for (unsigned int i = 0; i < count; i++)\n-    info[i].syllable() = 0;\n-}\n-\n@@ -414,0 +385,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-myanmar.cc","additions":56,"deletions":82,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -52,4 +52,4 @@\n-  OT_VAbv = 26,\n-  OT_VBlw = 27,\n-  OT_VPre = 28,\n-  OT_VPst = 29,\n+  \/\/OT_VAbv = 26,\n+  \/\/OT_VBlw = 27,\n+  \/\/OT_VPre = 28,\n+  \/\/OT_VPst = 29,\n@@ -149,1 +149,1 @@\n-      \/* https:\/\/github.com\/roozbehp\/unicode-data\/issues\/3 *\/\n+      \/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/218 *\/\n@@ -158,1 +158,1 @@\n-      case POS_PRE_C:   cat = OT_VPre;\n+      case POS_PRE_C:   cat = (myanmar_category_t) OT_VPre;\n@@ -160,3 +160,3 @@\n-      case POS_ABOVE_C: cat = OT_VAbv;   break;\n-      case POS_BELOW_C: cat = OT_VBlw;   break;\n-      case POS_POST_C:  cat = OT_VPst;   break;\n+      case POS_ABOVE_C: cat = (myanmar_category_t) OT_VAbv;   break;\n+      case POS_BELOW_C: cat = (myanmar_category_t) OT_VBlw;   break;\n+      case POS_POST_C:  cat = (myanmar_category_t) OT_VPst;   break;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-myanmar.hh","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -221,0 +225,4 @@\n+#ifdef HB_NO_OT_SHAPE_COMPLEX_THAI_FALLBACK\n+  return;\n+#endif\n+\n@@ -384,0 +392,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-thai.cc","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,8 +39,10 @@\n-        12u, 44u, 1u, 15u, 1u, 1u, 12u, 44u, 0u, 44u, 21u, 21u, 8u, 44u, 8u, 44u,\n-        1u, 15u, 1u, 1u, 8u, 44u, 8u, 44u, 8u, 39u, 8u, 26u, 8u, 26u, 8u, 26u,\n-        8u, 39u, 8u, 39u, 8u, 39u, 8u, 44u, 8u, 44u, 8u, 44u, 8u, 44u, 8u, 44u,\n-        8u, 44u, 8u, 44u, 8u, 44u, 1u, 39u, 8u, 44u, 13u, 21u, 4u, 4u, 13u, 13u,\n-        8u, 44u, 8u, 44u, 8u, 44u, 8u, 39u, 8u, 26u, 8u, 26u, 8u, 26u, 8u, 39u,\n-        8u, 39u, 8u, 39u, 8u, 44u, 8u, 44u, 8u, 44u, 8u, 44u, 8u, 44u, 8u, 44u,\n-        8u, 44u, 8u, 44u, 1u, 39u, 1u, 15u, 12u, 44u, 1u, 44u, 8u, 44u, 21u, 42u,\n-        41u, 42u, 42u, 42u, 1u, 5u, 0\n+        12u, 48u, 1u, 15u, 1u, 1u, 12u, 48u, 1u, 1u, 0u, 48u, 21u, 21u, 11u, 48u,\n+        11u, 48u, 1u, 15u, 1u, 1u, 11u, 48u, 22u, 48u, 23u, 48u, 24u, 47u, 25u, 47u,\n+        26u, 47u, 45u, 46u, 46u, 46u, 24u, 48u, 24u, 48u, 24u, 48u, 1u, 1u, 24u, 48u,\n+        23u, 48u, 23u, 48u, 23u, 48u, 22u, 48u, 22u, 48u, 22u, 48u, 22u, 48u, 11u, 48u,\n+        1u, 48u, 11u, 48u, 13u, 21u, 4u, 4u, 13u, 13u, 11u, 48u, 11u, 48u, 41u, 42u,\n+        42u, 42u, 11u, 48u, 11u, 48u, 22u, 48u, 23u, 48u, 24u, 47u, 25u, 47u, 26u, 47u,\n+        45u, 46u, 46u, 46u, 24u, 48u, 24u, 48u, 24u, 48u, 24u, 48u, 23u, 48u, 23u, 48u,\n+        23u, 48u, 22u, 48u, 22u, 48u, 22u, 48u, 22u, 48u, 11u, 48u, 1u, 48u, 1u, 15u,\n+        4u, 4u, 13u, 21u, 13u, 13u, 12u, 48u, 1u, 48u, 11u, 48u, 41u, 42u, 42u, 42u,\n+        21u, 42u, 1u, 5u, 0\n@@ -50,8 +52,10 @@\n-        33, 15, 1, 33, 45, 1, 37, 37,\n-        15, 1, 37, 37, 32, 19, 19, 19,\n-        32, 32, 32, 37, 37, 37, 37, 37,\n-        37, 37, 37, 39, 37, 9, 1, 1,\n-        37, 37, 37, 32, 19, 19, 19, 32,\n-        32, 32, 37, 37, 37, 37, 37, 37,\n-        37, 37, 39, 15, 33, 44, 37, 22,\n-        2, 1, 5\n+        37, 15, 1, 37, 1, 49, 1, 38,\n+        38, 15, 1, 38, 27, 26, 24, 23,\n+        22, 2, 1, 25, 25, 25, 1, 25,\n+        26, 26, 26, 27, 27, 27, 27, 38,\n+        48, 38, 9, 1, 1, 38, 38, 2,\n+        1, 38, 38, 27, 26, 24, 23, 22,\n+        2, 1, 25, 25, 25, 25, 26, 26,\n+        26, 27, 27, 27, 27, 38, 48, 15,\n+        1, 9, 1, 37, 48, 38, 2, 1,\n+        22, 5\n@@ -61,8 +65,10 @@\n-        0, 34, 50, 52, 86, 132, 134, 172,\n-        210, 226, 228, 266, 304, 337, 357, 377,\n-        397, 430, 463, 496, 534, 572, 610, 648,\n-        686, 724, 762, 800, 840, 878, 888, 890,\n-        892, 930, 968, 1006, 1039, 1059, 1079, 1099,\n-        1132, 1165, 1198, 1236, 1274, 1312, 1350, 1388,\n-        1426, 1464, 1502, 1542, 1558, 1592, 1637, 1675,\n-        1698, 1701, 1703\n+        0, 38, 54, 56, 94, 96, 146, 148,\n+        187, 226, 242, 244, 283, 311, 338, 363,\n+        387, 410, 413, 415, 441, 467, 493, 495,\n+        521, 548, 575, 602, 630, 658, 686, 714,\n+        753, 802, 841, 851, 853, 855, 894, 933,\n+        936, 938, 977, 1016, 1044, 1071, 1096, 1120,\n+        1143, 1146, 1148, 1174, 1200, 1226, 1252, 1279,\n+        1306, 1333, 1361, 1389, 1417, 1445, 1484, 1533,\n+        1549, 1551, 1561, 1563, 1601, 1650, 1689, 1692,\n+        1694, 1717\n@@ -76,1 +82,1 @@\n-        1, 0, 3, 2, 2, 2, 2, 2,\n+        1, 0, 0, 0, 1, 0, 3, 2,\n@@ -78,1 +84,2 @@\n-        4, 2, 3, 2, 6, 5, 5, 5,\n+        2, 2, 2, 2, 4, 2, 3, 2,\n+        6, 5, 5, 5, 5, 5, 5, 5,\n@@ -82,204 +89,205 @@\n-        5, 5, 5, 5, 6, 5, 7, 8,\n-        9, 7, 10, 8, 9, 9, 11, 9,\n-        9, 3, 12, 9, 9, 13, 7, 7,\n-        14, 15, 9, 9, 16, 17, 18, 19,\n-        20, 21, 22, 16, 23, 24, 25, 26,\n-        27, 28, 9, 29, 30, 31, 9, 9,\n-        9, 32, 33, 9, 35, 34, 37, 36,\n-        36, 38, 1, 36, 36, 39, 36, 36,\n-        36, 36, 36, 40, 41, 42, 43, 44,\n-        45, 46, 47, 41, 48, 40, 49, 50,\n-        51, 52, 36, 53, 54, 55, 36, 36,\n-        36, 36, 56, 36, 37, 36, 36, 38,\n-        1, 36, 36, 39, 36, 36, 36, 36,\n-        36, 57, 41, 42, 43, 44, 45, 46,\n-        47, 41, 48, 49, 49, 50, 51, 52,\n-        36, 53, 54, 55, 36, 36, 36, 36,\n-        56, 36, 38, 58, 58, 58, 58, 58,\n-        58, 58, 58, 58, 58, 58, 58, 58,\n-        59, 58, 38, 58, 37, 36, 36, 38,\n-        1, 36, 36, 39, 36, 36, 36, 36,\n-        36, 36, 41, 42, 43, 44, 45, 46,\n-        47, 41, 48, 49, 49, 50, 51, 52,\n-        36, 53, 54, 55, 36, 36, 36, 36,\n-        56, 36, 37, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        41, 42, 43, 44, 45, 36, 36, 36,\n-        36, 36, 36, 50, 51, 52, 36, 53,\n-        54, 55, 36, 36, 36, 36, 42, 36,\n-        37, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 42,\n-        43, 44, 45, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 53, 54, 55,\n-        36, 37, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 43, 44, 45, 36, 37, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 44, 45,\n-        36, 37, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 45, 36, 37, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 43, 44, 45,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 53, 54, 55, 36, 37, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 43, 44,\n-        45, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 54, 55, 36, 37,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 43,\n-        44, 45, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 55, 36,\n-        37, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 42,\n-        43, 44, 45, 36, 36, 36, 36, 36,\n-        36, 50, 51, 52, 36, 53, 54, 55,\n-        36, 36, 36, 36, 42, 36, 37, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 42, 43, 44,\n-        45, 36, 36, 36, 36, 36, 36, 36,\n-        51, 52, 36, 53, 54, 55, 36, 36,\n-        36, 36, 42, 36, 37, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 42, 43, 44, 45, 36,\n-        36, 36, 36, 36, 36, 36, 36, 52,\n-        36, 53, 54, 55, 36, 36, 36, 36,\n-        42, 36, 37, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        41, 42, 43, 44, 45, 36, 47, 41,\n-        36, 36, 36, 50, 51, 52, 36, 53,\n-        54, 55, 36, 36, 36, 36, 42, 36,\n-        37, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 41, 42,\n-        43, 44, 45, 36, 60, 41, 36, 36,\n-        36, 50, 51, 52, 36, 53, 54, 55,\n-        36, 36, 36, 36, 42, 36, 37, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 36, 36, 41, 42, 43, 44,\n-        45, 36, 36, 41, 36, 36, 36, 50,\n-        51, 52, 36, 53, 54, 55, 36, 36,\n-        36, 36, 42, 36, 37, 36, 36, 36,\n-        36, 36, 36, 36, 36, 36, 36, 36,\n-        36, 36, 41, 42, 43, 44, 45, 46,\n-        47, 41, 36, 36, 36, 50, 51, 52,\n-        36, 53, 54, 55, 36, 36, 36, 36,\n-        42, 36, 37, 36, 36, 38, 1, 36,\n-        36, 39, 36, 36, 36, 36, 36, 36,\n-        41, 42, 43, 44, 45, 46, 47, 41,\n-        48, 36, 49, 50, 51, 52, 36, 53,\n-        54, 55, 36, 36, 36, 36, 56, 36,\n-        38, 58, 58, 58, 58, 58, 58, 37,\n-        58, 58, 58, 58, 58, 58, 59, 58,\n-        58, 58, 58, 58, 58, 58, 42, 43,\n-        44, 45, 58, 58, 58, 58, 58, 58,\n-        58, 58, 58, 58, 53, 54, 55, 58,\n-        37, 36, 36, 38, 1, 36, 36, 39,\n-        36, 36, 36, 36, 36, 36, 41, 42,\n-        43, 44, 45, 46, 47, 41, 48, 40,\n-        49, 50, 51, 52, 36, 53, 54, 55,\n-        36, 36, 36, 36, 56, 36, 62, 61,\n-        61, 61, 61, 61, 61, 61, 63, 61,\n-        10, 64, 62, 61, 11, 65, 65, 3,\n-        6, 65, 65, 66, 65, 65, 65, 65,\n-        65, 67, 16, 17, 18, 19, 20, 21,\n-        22, 16, 23, 25, 25, 26, 27, 28,\n-        65, 29, 30, 31, 65, 65, 65, 65,\n-        33, 65, 11, 65, 65, 3, 6, 65,\n-        65, 66, 65, 65, 65, 65, 65, 65,\n-        16, 17, 18, 19, 20, 21, 22, 16,\n-        23, 25, 25, 26, 27, 28, 65, 29,\n-        30, 31, 65, 65, 65, 65, 33, 65,\n-        11, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 16, 17,\n-        18, 19, 20, 65, 65, 65, 65, 65,\n-        65, 26, 27, 28, 65, 29, 30, 31,\n-        65, 65, 65, 65, 17, 65, 11, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 17, 18, 19,\n-        20, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 29, 30, 31, 65, 11,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 18,\n-        19, 20, 65, 11, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 19, 20, 65, 11,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 20, 65, 11, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 18, 19, 20, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        29, 30, 31, 65, 11, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 18, 19, 20, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 30, 31, 65, 11, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 18, 19, 20,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 31, 65, 11, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 17, 18, 19,\n-        20, 65, 65, 65, 65, 65, 65, 26,\n-        27, 28, 65, 29, 30, 31, 65, 65,\n-        65, 65, 17, 65, 11, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 17, 18, 19, 20, 65,\n-        65, 65, 65, 65, 65, 65, 27, 28,\n-        65, 29, 30, 31, 65, 65, 65, 65,\n-        17, 65, 11, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 17, 18, 19, 20, 65, 65, 65,\n-        65, 65, 65, 65, 65, 28, 65, 29,\n-        30, 31, 65, 65, 65, 65, 17, 65,\n-        11, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 16, 17,\n-        18, 19, 20, 65, 22, 16, 65, 65,\n-        65, 26, 27, 28, 65, 29, 30, 31,\n-        65, 65, 65, 65, 17, 65, 11, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 16, 17, 18, 19,\n-        20, 65, 68, 16, 65, 65, 65, 26,\n-        27, 28, 65, 29, 30, 31, 65, 65,\n-        65, 65, 17, 65, 11, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 16, 17, 18, 19, 20, 65,\n-        65, 16, 65, 65, 65, 26, 27, 28,\n-        65, 29, 30, 31, 65, 65, 65, 65,\n-        17, 65, 11, 65, 65, 65, 65, 65,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        16, 17, 18, 19, 20, 21, 22, 16,\n-        65, 65, 65, 26, 27, 28, 65, 29,\n-        30, 31, 65, 65, 65, 65, 17, 65,\n-        11, 65, 65, 3, 6, 65, 65, 66,\n-        65, 65, 65, 65, 65, 65, 16, 17,\n-        18, 19, 20, 21, 22, 16, 23, 65,\n-        25, 26, 27, 28, 65, 29, 30, 31,\n-        65, 65, 65, 65, 33, 65, 3, 65,\n-        65, 65, 65, 65, 65, 11, 65, 65,\n-        65, 65, 65, 65, 4, 65, 65, 65,\n-        65, 65, 65, 65, 17, 18, 19, 20,\n-        65, 65, 65, 65, 65, 65, 65, 65,\n-        65, 65, 29, 30, 31, 65, 3, 69,\n-        69, 69, 69, 69, 69, 69, 69, 69,\n-        69, 69, 69, 69, 4, 69, 6, 69,\n-        69, 69, 69, 69, 69, 69, 69, 69,\n-        69, 69, 69, 69, 69, 69, 69, 69,\n-        69, 69, 69, 69, 69, 69, 69, 69,\n-        69, 69, 69, 69, 69, 69, 6, 69,\n-        8, 65, 65, 65, 8, 65, 65, 11,\n-        65, 65, 3, 6, 65, 65, 66, 65,\n-        65, 65, 65, 65, 65, 16, 17, 18,\n-        19, 20, 21, 22, 16, 23, 24, 25,\n-        26, 27, 28, 65, 29, 30, 31, 65,\n-        65, 65, 65, 33, 65, 11, 65, 65,\n-        3, 6, 65, 65, 66, 65, 65, 65,\n-        65, 65, 65, 16, 17, 18, 19, 20,\n-        21, 22, 16, 23, 24, 25, 26, 27,\n-        28, 65, 29, 30, 31, 65, 65, 65,\n-        65, 33, 65, 71, 70, 70, 70, 70,\n-        70, 70, 70, 70, 70, 70, 70, 70,\n-        70, 70, 70, 70, 70, 70, 70, 71,\n-        72, 70, 71, 72, 70, 72, 70, 8,\n-        69, 69, 69, 8, 69, 0\n+        6, 5, 5, 5, 6, 5, 7, 5,\n+        8, 9, 10, 8, 11, 12, 10, 10,\n+        10, 10, 10, 3, 13, 14, 10, 15,\n+        8, 8, 16, 17, 10, 10, 18, 19,\n+        20, 21, 22, 23, 24, 18, 25, 26,\n+        27, 28, 29, 30, 10, 31, 32, 33,\n+        10, 34, 35, 36, 37, 38, 39, 40,\n+        13, 10, 42, 41, 44, 1, 43, 43,\n+        45, 43, 43, 43, 43, 43, 46, 47,\n+        48, 49, 50, 51, 52, 53, 47, 54,\n+        46, 55, 56, 57, 58, 43, 59, 60,\n+        61, 43, 43, 43, 43, 62, 63, 64,\n+        65, 1, 43, 44, 1, 43, 43, 45,\n+        43, 43, 43, 43, 43, 66, 47, 48,\n+        49, 50, 51, 52, 53, 47, 54, 55,\n+        55, 56, 57, 58, 43, 59, 60, 61,\n+        43, 43, 43, 43, 62, 63, 64, 65,\n+        1, 43, 44, 67, 67, 67, 67, 67,\n+        67, 67, 67, 67, 67, 67, 67, 67,\n+        68, 67, 44, 67, 44, 1, 43, 43,\n+        45, 43, 43, 43, 43, 43, 43, 47,\n+        48, 49, 50, 51, 52, 53, 47, 54,\n+        55, 55, 56, 57, 58, 43, 59, 60,\n+        61, 43, 43, 43, 43, 62, 63, 64,\n+        65, 1, 43, 47, 48, 49, 50, 51,\n+        43, 43, 43, 43, 43, 43, 56, 57,\n+        58, 43, 59, 60, 61, 43, 43, 43,\n+        43, 48, 63, 64, 65, 69, 43, 48,\n+        49, 50, 51, 43, 43, 43, 43, 43,\n+        43, 43, 43, 43, 43, 59, 60, 61,\n+        43, 43, 43, 43, 43, 63, 64, 65,\n+        69, 43, 49, 50, 51, 43, 43, 43,\n+        43, 43, 43, 43, 43, 43, 43, 43,\n+        43, 43, 43, 43, 43, 43, 43, 63,\n+        64, 65, 43, 50, 51, 43, 43, 43,\n+        43, 43, 43, 43, 43, 43, 43, 43,\n+        43, 43, 43, 43, 43, 43, 43, 63,\n+        64, 65, 43, 51, 43, 43, 43, 43,\n+        43, 43, 43, 43, 43, 43, 43, 43,\n+        43, 43, 43, 43, 43, 43, 63, 64,\n+        65, 43, 63, 64, 43, 64, 43, 49,\n+        50, 51, 43, 43, 43, 43, 43, 43,\n+        43, 43, 43, 43, 59, 60, 61, 43,\n+        43, 43, 43, 43, 63, 64, 65, 69,\n+        43, 49, 50, 51, 43, 43, 43, 43,\n+        43, 43, 43, 43, 43, 43, 43, 60,\n+        61, 43, 43, 43, 43, 43, 63, 64,\n+        65, 69, 43, 49, 50, 51, 43, 43,\n+        43, 43, 43, 43, 43, 43, 43, 43,\n+        43, 43, 61, 43, 43, 43, 43, 43,\n+        63, 64, 65, 69, 43, 71, 70, 49,\n+        50, 51, 43, 43, 43, 43, 43, 43,\n+        43, 43, 43, 43, 43, 43, 43, 43,\n+        43, 43, 43, 43, 63, 64, 65, 69,\n+        43, 48, 49, 50, 51, 43, 43, 43,\n+        43, 43, 43, 56, 57, 58, 43, 59,\n+        60, 61, 43, 43, 43, 43, 48, 63,\n+        64, 65, 69, 43, 48, 49, 50, 51,\n+        43, 43, 43, 43, 43, 43, 43, 57,\n+        58, 43, 59, 60, 61, 43, 43, 43,\n+        43, 48, 63, 64, 65, 69, 43, 48,\n+        49, 50, 51, 43, 43, 43, 43, 43,\n+        43, 43, 43, 58, 43, 59, 60, 61,\n+        43, 43, 43, 43, 48, 63, 64, 65,\n+        69, 43, 47, 48, 49, 50, 51, 43,\n+        53, 47, 43, 43, 43, 56, 57, 58,\n+        43, 59, 60, 61, 43, 43, 43, 43,\n+        48, 63, 64, 65, 69, 43, 47, 48,\n+        49, 50, 51, 43, 72, 47, 43, 43,\n+        43, 56, 57, 58, 43, 59, 60, 61,\n+        43, 43, 43, 43, 48, 63, 64, 65,\n+        69, 43, 47, 48, 49, 50, 51, 43,\n+        43, 47, 43, 43, 43, 56, 57, 58,\n+        43, 59, 60, 61, 43, 43, 43, 43,\n+        48, 63, 64, 65, 69, 43, 47, 48,\n+        49, 50, 51, 52, 53, 47, 43, 43,\n+        43, 56, 57, 58, 43, 59, 60, 61,\n+        43, 43, 43, 43, 48, 63, 64, 65,\n+        69, 43, 44, 1, 43, 43, 45, 43,\n+        43, 43, 43, 43, 43, 47, 48, 49,\n+        50, 51, 52, 53, 47, 54, 43, 55,\n+        56, 57, 58, 43, 59, 60, 61, 43,\n+        43, 43, 43, 62, 63, 64, 65, 1,\n+        43, 44, 67, 67, 67, 67, 67, 67,\n+        67, 67, 67, 67, 67, 67, 67, 68,\n+        67, 67, 67, 67, 67, 67, 67, 48,\n+        49, 50, 51, 67, 67, 67, 67, 67,\n+        67, 67, 67, 67, 67, 59, 60, 61,\n+        67, 67, 67, 67, 67, 63, 64, 65,\n+        69, 67, 44, 1, 43, 43, 45, 43,\n+        43, 43, 43, 43, 43, 47, 48, 49,\n+        50, 51, 52, 53, 47, 54, 46, 55,\n+        56, 57, 58, 43, 59, 60, 61, 43,\n+        43, 43, 43, 62, 63, 64, 65, 1,\n+        43, 74, 73, 73, 73, 73, 73, 73,\n+        73, 75, 73, 11, 76, 74, 73, 44,\n+        1, 43, 43, 45, 43, 43, 43, 43,\n+        43, 77, 47, 48, 49, 50, 51, 52,\n+        53, 47, 54, 46, 55, 56, 57, 58,\n+        43, 59, 60, 61, 43, 78, 79, 43,\n+        62, 63, 64, 65, 1, 43, 44, 1,\n+        43, 43, 45, 43, 43, 43, 43, 43,\n+        43, 47, 48, 49, 50, 51, 52, 53,\n+        47, 54, 46, 55, 56, 57, 58, 43,\n+        59, 60, 61, 43, 78, 79, 43, 62,\n+        63, 64, 65, 1, 43, 78, 79, 80,\n+        79, 80, 3, 6, 81, 81, 82, 81,\n+        81, 81, 81, 81, 83, 18, 19, 20,\n+        21, 22, 23, 24, 18, 25, 27, 27,\n+        28, 29, 30, 81, 31, 32, 33, 81,\n+        81, 81, 81, 37, 38, 39, 40, 6,\n+        81, 3, 6, 81, 81, 82, 81, 81,\n+        81, 81, 81, 81, 18, 19, 20, 21,\n+        22, 23, 24, 18, 25, 27, 27, 28,\n+        29, 30, 81, 31, 32, 33, 81, 81,\n+        81, 81, 37, 38, 39, 40, 6, 81,\n+        18, 19, 20, 21, 22, 81, 81, 81,\n+        81, 81, 81, 28, 29, 30, 81, 31,\n+        32, 33, 81, 81, 81, 81, 19, 38,\n+        39, 40, 84, 81, 19, 20, 21, 22,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 31, 32, 33, 81, 81, 81,\n+        81, 81, 38, 39, 40, 84, 81, 20,\n+        21, 22, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 38, 39, 40, 81,\n+        21, 22, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 38, 39, 40, 81,\n+        22, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 38, 39, 40, 81, 38,\n+        39, 81, 39, 81, 20, 21, 22, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 31, 32, 33, 81, 81, 81, 81,\n+        81, 38, 39, 40, 84, 81, 20, 21,\n+        22, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 32, 33, 81, 81,\n+        81, 81, 81, 38, 39, 40, 84, 81,\n+        20, 21, 22, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 33,\n+        81, 81, 81, 81, 81, 38, 39, 40,\n+        84, 81, 20, 21, 22, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 38,\n+        39, 40, 84, 81, 19, 20, 21, 22,\n+        81, 81, 81, 81, 81, 81, 28, 29,\n+        30, 81, 31, 32, 33, 81, 81, 81,\n+        81, 19, 38, 39, 40, 84, 81, 19,\n+        20, 21, 22, 81, 81, 81, 81, 81,\n+        81, 81, 29, 30, 81, 31, 32, 33,\n+        81, 81, 81, 81, 19, 38, 39, 40,\n+        84, 81, 19, 20, 21, 22, 81, 81,\n+        81, 81, 81, 81, 81, 81, 30, 81,\n+        31, 32, 33, 81, 81, 81, 81, 19,\n+        38, 39, 40, 84, 81, 18, 19, 20,\n+        21, 22, 81, 24, 18, 81, 81, 81,\n+        28, 29, 30, 81, 31, 32, 33, 81,\n+        81, 81, 81, 19, 38, 39, 40, 84,\n+        81, 18, 19, 20, 21, 22, 81, 85,\n+        18, 81, 81, 81, 28, 29, 30, 81,\n+        31, 32, 33, 81, 81, 81, 81, 19,\n+        38, 39, 40, 84, 81, 18, 19, 20,\n+        21, 22, 81, 81, 18, 81, 81, 81,\n+        28, 29, 30, 81, 31, 32, 33, 81,\n+        81, 81, 81, 19, 38, 39, 40, 84,\n+        81, 18, 19, 20, 21, 22, 23, 24,\n+        18, 81, 81, 81, 28, 29, 30, 81,\n+        31, 32, 33, 81, 81, 81, 81, 19,\n+        38, 39, 40, 84, 81, 3, 6, 81,\n+        81, 82, 81, 81, 81, 81, 81, 81,\n+        18, 19, 20, 21, 22, 23, 24, 18,\n+        25, 81, 27, 28, 29, 30, 81, 31,\n+        32, 33, 81, 81, 81, 81, 37, 38,\n+        39, 40, 6, 81, 3, 81, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        81, 81, 4, 81, 81, 81, 81, 81,\n+        81, 81, 19, 20, 21, 22, 81, 81,\n+        81, 81, 81, 81, 81, 81, 81, 81,\n+        31, 32, 33, 81, 81, 81, 81, 81,\n+        38, 39, 40, 84, 81, 3, 86, 86,\n+        86, 86, 86, 86, 86, 86, 86, 86,\n+        86, 86, 86, 4, 86, 87, 81, 14,\n+        81, 81, 81, 81, 81, 81, 81, 88,\n+        81, 14, 81, 6, 86, 86, 86, 86,\n+        86, 86, 86, 86, 86, 86, 86, 86,\n+        86, 86, 86, 86, 86, 86, 86, 86,\n+        86, 86, 86, 86, 86, 86, 86, 86,\n+        86, 86, 86, 6, 86, 86, 86, 6,\n+        86, 9, 81, 81, 81, 9, 81, 81,\n+        81, 81, 81, 3, 6, 14, 81, 82,\n+        81, 81, 81, 81, 81, 81, 18, 19,\n+        20, 21, 22, 23, 24, 18, 25, 26,\n+        27, 28, 29, 30, 81, 31, 32, 33,\n+        81, 34, 35, 81, 37, 38, 39, 40,\n+        6, 81, 3, 6, 81, 81, 82, 81,\n+        81, 81, 81, 81, 81, 18, 19, 20,\n+        21, 22, 23, 24, 18, 25, 26, 27,\n+        28, 29, 30, 81, 31, 32, 33, 81,\n+        81, 81, 81, 37, 38, 39, 40, 6,\n+        81, 34, 35, 81, 35, 81, 78, 80,\n+        80, 80, 80, 80, 80, 80, 80, 80,\n+        80, 80, 80, 80, 80, 80, 80, 80,\n+        80, 80, 78, 79, 80, 9, 86, 86,\n+        86, 9, 86, 0\n@@ -289,10 +297,12 @@\n-        4, 8, 4, 32, 2, 4, 1, 5,\n-        6, 4, 29, 4, 51, 52, 53, 55,\n-        34, 35, 36, 37, 38, 45, 46, 48,\n-        54, 49, 42, 43, 44, 39, 40, 41,\n-        58, 50, 4, 4, 4, 4, 7, 0,\n-        28, 11, 12, 13, 14, 15, 22, 23,\n-        25, 26, 19, 20, 21, 16, 17, 18,\n-        27, 10, 4, 9, 24, 4, 30, 31,\n-        4, 4, 3, 33, 47, 4, 4, 56,\n-        57\n+        5, 9, 5, 41, 2, 5, 1, 53,\n+        6, 7, 5, 34, 37, 63, 64, 67,\n+        68, 72, 43, 44, 45, 46, 47, 57,\n+        58, 60, 69, 61, 54, 55, 56, 50,\n+        51, 52, 70, 71, 73, 62, 48, 49,\n+        5, 5, 5, 5, 8, 0, 33, 12,\n+        13, 14, 15, 16, 27, 28, 30, 31,\n+        24, 25, 26, 19, 20, 21, 32, 17,\n+        18, 5, 11, 5, 10, 22, 5, 23,\n+        29, 5, 35, 36, 5, 38, 39, 40,\n+        5, 5, 3, 42, 4, 59, 5, 65,\n+        66\n@@ -302,2 +312,7 @@\n-        1, 0, 2, 3, 0, 4, 0, 0,\n-        7, 8, 0, 9, 10, 10, 3, 0,\n+        1, 0, 2, 3, 0, 4, 0, 5,\n+        0, 5, 8, 0, 5, 9, 0, 9,\n+        3, 0, 5, 5, 0, 0, 0, 5,\n+        5, 5, 3, 3, 5, 5, 5, 5,\n+        5, 5, 0, 0, 0, 3, 0, 0,\n+        10, 11, 12, 13, 5, 0, 5, 0,\n+        0, 0, 0, 0, 0, 0, 0, 5,\n@@ -305,6 +320,3 @@\n-        3, 3, 0, 0, 0, 0, 0, 0,\n-        0, 3, 11, 12, 13, 14, 7, 0,\n-        7, 0, 0, 0, 0, 0, 0, 0,\n-        0, 7, 0, 0, 0, 0, 0, 0,\n-        0, 7, 15, 0, 0, 16, 0, 0,\n-        17, 18, 0, 3, 0, 19, 20, 0,\n+        0, 14, 5, 15, 0, 0, 16, 0,\n+        0, 17, 0, 0, 18, 5, 0, 0,\n+        19, 20, 0, 3, 0, 5, 21, 0,\n@@ -315,1 +327,1 @@\n-        0, 0, 0, 0, 5, 0, 0, 0,\n+        0, 0, 0, 0, 0, 6, 0, 0,\n@@ -322,1 +334,3 @@\n-        0, 0, 0\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0\n@@ -326,1 +340,3 @@\n-        0, 0, 0, 0, 6, 0, 0, 0,\n+        0, 0, 0, 0, 0, 7, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0,\n@@ -333,1 +349,1 @@\n-        0, 0, 0\n+        0, 0\n@@ -337,8 +353,10 @@\n-        1, 3, 3, 6, 0, 35, 37, 37,\n-        59, 59, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 37, 37, 37, 37, 37,\n-        37, 37, 37, 59, 37, 62, 65, 62,\n-        66, 66, 66, 66, 66, 66, 66, 66,\n-        66, 66, 66, 66, 66, 66, 66, 66,\n-        66, 66, 66, 70, 70, 66, 66, 71,\n-        71, 71, 70\n+        1, 3, 3, 6, 6, 0, 42, 44,\n+        44, 68, 68, 44, 44, 44, 44, 44,\n+        44, 44, 44, 44, 44, 44, 71, 44,\n+        44, 44, 44, 44, 44, 44, 44, 44,\n+        68, 44, 74, 77, 74, 44, 44, 81,\n+        81, 82, 82, 82, 82, 82, 82, 82,\n+        82, 82, 82, 82, 82, 82, 82, 82,\n+        82, 82, 82, 82, 82, 82, 82, 87,\n+        82, 82, 82, 87, 82, 82, 82, 82,\n+        81, 87\n@@ -347,2 +365,2 @@\n-static const int use_syllable_machine_start = 4;\n-static const int use_syllable_machine_first_final = 4;\n+static const int use_syllable_machine_start = 5;\n+static const int use_syllable_machine_first_final = 5;\n@@ -351,1 +369,1 @@\n-static const int use_syllable_machine_en_main = 4;\n+static const int use_syllable_machine_en_main = 5;\n@@ -358,1 +376,1 @@\n-#line 143 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 162 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -365,1 +383,1 @@\n-      info[i].syllable() = (syllable_serial << 4) | syllable_type; \\\n+      info[i].syllable() = (syllable_serial << 4) | use_##syllable_type; \\\n@@ -371,1 +389,1 @@\n-find_syllables (hb_buffer_t *buffer)\n+find_syllables_use (hb_buffer_t *buffer)\n@@ -377,1 +395,1 @@\n-#line 378 \"hb-ot-shape-complex-use-machine.hh\"\n+#line 396 \"hb-ot-shape-complex-use-machine.hh\"\n@@ -385,1 +403,1 @@\n-#line 163 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 182 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -393,1 +411,1 @@\n-#line 394 \"hb-ot-shape-complex-use-machine.hh\"\n+#line 412 \"hb-ot-shape-complex-use-machine.hh\"\n@@ -403,1 +421,1 @@\n-        case 6:\n+        case 7:\n@@ -407,1 +425,1 @@\n-#line 408 \"hb-ot-shape-complex-use-machine.hh\"\n+#line 426 \"hb-ot-shape-complex-use-machine.hh\"\n@@ -425,1 +443,1 @@\n-        case 7:\n+        case 5:\n@@ -430,1 +448,1 @@\n-#line 132 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 150 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -434,1 +452,1 @@\n-#line 134 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 153 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -437,2 +455,2 @@\n-        case 9:\n-#line 138 \"hb-ot-shape-complex-use-machine.rl\"\n+        case 10:\n+#line 157 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -442,1 +460,1 @@\n-#line 139 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 158 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -446,1 +464,1 @@\n-#line 132 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 150 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -450,1 +468,1 @@\n-#line 133 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 151 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -453,0 +471,4 @@\n+        case 16:\n+#line 152 \"hb-ot-shape-complex-use-machine.rl\"\n+        {te = p;p--;{ found_syllable (sakot_terminated_cluster); }}\n+        break;\n@@ -454,1 +476,1 @@\n-#line 134 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 153 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -457,2 +479,2 @@\n-        case 17:\n-#line 135 \"hb-ot-shape-complex-use-machine.rl\"\n+        case 18:\n+#line 154 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -461,2 +483,2 @@\n-        case 16:\n-#line 136 \"hb-ot-shape-complex-use-machine.rl\"\n+        case 17:\n+#line 155 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -465,2 +487,2 @@\n-        case 20:\n-#line 137 \"hb-ot-shape-complex-use-machine.rl\"\n+        case 19:\n+#line 156 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -469,2 +491,2 @@\n-        case 18:\n-#line 138 \"hb-ot-shape-complex-use-machine.rl\"\n+        case 20:\n+#line 157 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -473,2 +495,2 @@\n-        case 19:\n-#line 139 \"hb-ot-shape-complex-use-machine.rl\"\n+        case 21:\n+#line 158 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -478,1 +500,1 @@\n-#line 134 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 153 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -482,1 +504,1 @@\n-#line 138 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 157 \"hb-ot-shape-complex-use-machine.rl\"\n@@ -488,1 +510,1 @@\n-        case 7:\n+        case 8:\n@@ -491,1 +513,1 @@\n-        case 8:\n+        case 9:\n@@ -500,2 +522,2 @@\n-#line 138 \"hb-ot-shape-complex-use-machine.rl\"\n-        {act = 7;}\n+#line 157 \"hb-ot-shape-complex-use-machine.rl\"\n+        {act = 8;}\n@@ -503,1 +525,1 @@\n-        case 10:\n+        case 9:\n@@ -506,2 +528,2 @@\n-#line 139 \"hb-ot-shape-complex-use-machine.rl\"\n-        {act = 8;}\n+#line 158 \"hb-ot-shape-complex-use-machine.rl\"\n+        {act = 9;}\n@@ -509,1 +531,1 @@\n-#line 510 \"hb-ot-shape-complex-use-machine.hh\"\n+#line 532 \"hb-ot-shape-complex-use-machine.hh\"\n@@ -514,1 +536,1 @@\n-        case 5:\n+        case 6:\n@@ -518,1 +540,1 @@\n-#line 519 \"hb-ot-shape-complex-use-machine.hh\"\n+#line 541 \"hb-ot-shape-complex-use-machine.hh\"\n@@ -534,1 +556,1 @@\n-#line 171 \"hb-ot-shape-complex-use-machine.rl\"\n+#line 190 \"hb-ot-shape-complex-use-machine.rl\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-use-machine.hh","additions":325,"deletions":303,"binary":false,"changes":628,"status":"modified"},{"patch":"@@ -9,6 +9,6 @@\n- * # IndicSyllabicCategory-11.0.0.txt\n- * # Date: 2018-05-21, 18:33:00 GMT [KW, RP]\n- * # IndicPositionalCategory-11.0.0.txt\n- * # Date: 2018-02-05, 16:21:00 GMT [KW, RP]\n- * # Blocks-11.0.0.txt\n- * # Date: 2017-10-16, 24:39:00 GMT [KW]\n+ * # IndicSyllabicCategory-13.0.0.txt\n+ * # Date: 2019-07-22, 19:55:00 GMT [KW, RP]\n+ * # IndicPositionalCategory-13.0.0.txt\n+ * # Date: 2019-07-23, 00:01:00 GMT [KW, RP]\n+ * # Blocks-13.0.0.txt\n+ * # Date: 2019-07-10, 19:06:00 GMT [KW]\n@@ -18,0 +18,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -25,1 +29,0 @@\n-#define FM      USE_FM  \/* CONS_FINAL_MOD *\/\n@@ -37,0 +40,1 @@\n+#define Sk      USE_Sk  \/* SAKOT *\/\n@@ -41,1 +45,0 @@\n-#define CMBlw   USE_CMBlw\n@@ -43,0 +46,2 @@\n+#define CMBlw   USE_CMBlw\n+#define FAbv    USE_FAbv\n@@ -45,2 +50,4 @@\n-#define FAbv    USE_FAbv\n-#define MPre    USE_MPre\n+#define FMAbv   USE_FMAbv\n+#define FMBlw   USE_FMBlw\n+#define FMPst   USE_FMPst\n+#define MAbv    USE_MAbv\n@@ -49,2 +56,1 @@\n-#define MAbv    USE_MAbv\n-#define SMBlw   USE_SMBlw\n+#define MPre    USE_MPre\n@@ -52,1 +58,2 @@\n-#define VPre    USE_VPre\n+#define SMBlw   USE_SMBlw\n+#define VAbv    USE_VAbv\n@@ -55,2 +62,2 @@\n-#define VAbv    USE_VAbv\n-#define VMPre   USE_VMPre\n+#define VPre    USE_VPre\n+#define VMAbv   USE_VMAbv\n@@ -59,1 +66,1 @@\n-#define VMAbv   USE_VMAbv\n+#define VMPre   USE_VMPre\n@@ -78,1 +85,1 @@\n-  \/* 00B0 *\/     O,     O,    FM,    FM,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 00B0 *\/     O,     O, FMPst, FMPst,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n@@ -111,1 +118,1 @@\n-  \/* 09F0 *\/     B,     B,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     B,     O,    FM,     O,\n+  \/* 09F0 *\/     B,     B,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     B,     O, FMAbv,     O,\n@@ -142,1 +149,1 @@\n-  \/* 0B50 *\/     O,     O,     O,     O,     O,     O,  VAbv,  VAbv,     O,     O,     O,     O,     B,     B,     O,     B,\n+  \/* 0B50 *\/     O,     O,     O,     O,     O,  VAbv,  VAbv,  VAbv,     O,     O,     O,     O,     B,     B,     O,     B,\n@@ -170,1 +177,1 @@\n-  \/* 0C80 *\/     O, VMAbv, VMPst, VMPst,     O,     B,     B,     B,     B,     B,     B,     B,     B,     O,     B,     B,\n+  \/* 0C80 *\/     B, VMAbv, VMPst, VMPst,     O,     B,     B,     B,     B,     B,     B,     B,     B,     O,     B,     B,\n@@ -181,1 +188,1 @@\n-  \/* 0D00 *\/ VMAbv, VMAbv, VMPst, VMPst,     O,     B,     B,     B,     B,     B,     B,     B,     B,     O,     B,     B,\n+  \/* 0D00 *\/ VMAbv, VMAbv, VMPst, VMPst,     B,     B,     B,     B,     B,     B,     B,     B,     B,     O,     B,     B,\n@@ -192,1 +199,1 @@\n-  \/* 0D80 *\/     O,     O, VMPst, VMPst,     O,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,\n+  \/* 0D80 *\/     O, VMAbv, VMPst, VMPst,     O,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,\n@@ -207,1 +214,1 @@\n-  \/* 0F30 *\/     B,     B,     B,     B,     O,    FM,     O,    FM,     O, CMAbv,     O,     O,     O,     O,  VPst,  VPre,\n+  \/* 0F30 *\/     B,     B,     B,     B,     O, FMBlw,     O, FMBlw,     O, CMAbv,     O,     O,     O,     O,  VPst,  VPre,\n@@ -216,1 +223,1 @@\n-  \/* 0FC0 *\/     O,     O,     O,     O,     O,     O,    FM,     O,\n+  \/* 0FC0 *\/     O,     O,     O,     O,     O,     O, FMBlw,     O,\n@@ -263,2 +270,2 @@\n-  \/* 17C0 *\/  VPst,  VPre,  VPre,  VPre,  VPst,  VPst, VMAbv, VMPst,  VPst, VMAbv, VMAbv,    FM,  FAbv, CMAbv,    FM,    FM,\n-  \/* 17D0 *\/    FM,  VAbv,     H,    FM,     O,     O,     O,     O,     O,     O,     O,     O,     B,  VAbv,     O,     O,\n+  \/* 17C0 *\/  VPst,  VPre,  VPre,  VPre,  VPst,  VPst, VMAbv, VMPst,  VPst, VMAbv, VMAbv, FMAbv,  FAbv, CMAbv, FMAbv, FMAbv,\n+  \/* 17D0 *\/ FMAbv,  VAbv,     H, FMAbv,     O,     O,     O,     O,     O,     O,     O,     O,     B, FMAbv,     O,     O,\n@@ -275,1 +282,1 @@\n-  \/* 1930 *\/  FPst,  FPst, VMBlw,  FPst,  FPst,  FPst,  FPst,  FPst,  FPst,  FBlw,  VAbv,    FM,     O,     O,     O,     O,\n+  \/* 1930 *\/  FPst,  FPst, VMBlw,  FPst,  FPst,  FPst,  FPst,  FPst,  FPst,  FBlw,  VAbv, FMBlw,     O,     O,     O,     O,\n@@ -291,1 +298,1 @@\n-  \/* 19D0 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     O,     O,     O,     O,\n+  \/* 19D0 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     O,     O,     O,\n@@ -305,3 +312,3 @@\n-  \/* 1A50 *\/     B,     B,     B,     B,     B,  MPre,  MBlw,   SUB,  FAbv,  FAbv,  FAbv,   SUB,   SUB,   SUB,   SUB,     O,\n-  \/* 1A60 *\/     H,  VPst,  VAbv,  VPst,  VPst,  VAbv,  VAbv,  VAbv,  VAbv,  VBlw,  VBlw,  VAbv,  VBlw,  VPst,  VPre,  VPre,\n-  \/* 1A70 *\/  VPre,  VPre,  VPre,  VAbv, VMAbv, VMAbv, VMAbv, VMAbv, VMAbv, VMAbv,  VAbv,    FM,    FM,     O,     O,  FBlw,\n+  \/* 1A50 *\/     B,     B,     B,     B,     B,  MPre,  MBlw,   SUB,  FAbv,  FAbv,  MAbv,   SUB,   SUB,   SUB,   SUB,     O,\n+  \/* 1A60 *\/    Sk,  VPst,  VAbv,  VPst,  VPst,  VAbv,  VAbv,  VAbv,  VAbv,  VBlw,  VBlw,  VAbv,  VBlw,  VPst,  VPre,  VPre,\n+  \/* 1A70 *\/  VPre,  VPre,  VPre,  VAbv, VMAbv, VMAbv, VMAbv, VMAbv, VMAbv, VMAbv,  VAbv, FMAbv, FMAbv,     O,     O, FMBlw,\n@@ -321,2 +328,2 @@\n-  \/* 1B50 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     O,     O,     O,     O,\n-  \/* 1B60 *\/     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O, SMAbv, SMBlw, SMAbv, SMAbv, SMAbv,\n+  \/* 1B50 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     O,    GB,    GB,     O,     O,    GB,\n+  \/* 1B60 *\/     O,     S,    GB,     S,     S,     S,     S,     S,    GB,     S,     S, SMAbv, SMBlw, SMAbv, SMAbv, SMAbv,\n@@ -343,2 +350,2 @@\n-  \/* 1C20 *\/     B,     B,     B,     B,   SUB,   SUB,  VPst,  VPre,  VPre,  VPst,  VPst,  VPst,  VBlw,  FAbv,  FAbv,  FAbv,\n-  \/* 1C30 *\/  FAbv,  FAbv,  FAbv,  FAbv, VMPre, VMPre,    FM, CMBlw,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 1C20 *\/     B,     B,     B,     B,   SUB,   SUB,  VPst,  VPre,  VPre,  VPre,  VPst,  VPst,  VBlw,  FAbv,  FAbv,  FAbv,\n+  \/* 1C30 *\/  FAbv,  FAbv,  FAbv,  FAbv, VMPre, VMPre, FMAbv, CMBlw,     O,     O,     O,     O,     O,     O,     O,     O,\n@@ -354,1 +361,1 @@\n-  \/* 1CF0 *\/     O,     O, VMPst, VMPst, VMAbv,    CS,    CS, VMPst, VMAbv, VMAbv,     O,     O,     O,     O,     O,     O,\n+  \/* 1CF0 *\/     O,     O,   IND,   IND, VMAbv,    CS,    CS, VMPst, VMAbv, VMAbv,    GB,     O,     O,     O,     O,     O,\n@@ -360,1 +367,1 @@\n-                                                                         O,     O,     O,    FM,     O,     O,     O,     O,\n+                                                                         O,     O,     O, FMAbv,     O,     O,     O,     O,\n@@ -375,2 +382,2 @@\n-  \/* 2070 *\/     O,     O,     O,     O,    FM,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n-  \/* 2080 *\/     O,     O,    FM,    FM,    FM,     O,     O,     O,\n+  \/* 2070 *\/     O,     O,     O,     O, FMPst,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 2080 *\/     O,     O, FMPst, FMPst, FMPst,     O,     O,     O,\n@@ -396,1 +403,1 @@\n-  \/* A800 *\/     B,     B,     O,     B,     B,     B,  VAbv,     B,     B,     B,     B, VMAbv,     B,     B,     B,     B,\n+  \/* A800 *\/     B,     B,  VAbv,     B,     B,     B,     H,     B,     B,     B,     B, VMAbv,     B,     B,     B,     B,\n@@ -398,1 +405,1 @@\n-  \/* A820 *\/     B,     B,     B,  VPst,  VPst,  VBlw,  VAbv,  VPst,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* A820 *\/     B,     B,     B,  VPst,  VPst,  VBlw,  VAbv,  VPst,     O,     O,     O,     O,  VBlw,     O,     O,     O,\n@@ -441,1 +448,1 @@\n-  \/* A9B0 *\/     B,     B,     B, CMAbv,  VPst,  VPst,  VAbv,  VAbv,  VBlw,  VBlw,  VPre,  VPre,  VAbv,   SUB,  MPst,  MBlw,\n+  \/* A9B0 *\/     B,     B,     B, CMAbv,  VPst,  VPst,  VAbv,  VAbv,  VBlw,  VBlw,  VPre,  VPre,  VAbv,  MBlw,  MBlw,  MBlw,\n@@ -536,1 +543,1 @@\n-  \/* 11140 *\/     O,     O,     O,     O,     B,  VPst,  VPst,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 11140 *\/     O,     O,     O,     O,     B,  VPst,  VPst,     B,     O,     O,     O,     O,     O,     O,     O,     O,\n@@ -550,1 +557,1 @@\n-  \/* 111C0 *\/     H,     B,     R,     R,     O,     O,     O,     O,    GB,  FBlw, CMBlw,  VAbv,  VBlw,     O,     O,     O,\n+  \/* 111C0 *\/     H,     B,     R,     R,     O,     O,     O,     O,    GB, FMBlw, CMBlw,  VAbv,  VBlw,     O,  VPre, VMAbv,\n@@ -584,1 +591,1 @@\n-  \/* 11300 *\/ VMAbv, VMAbv, VMAbv, VMPst,     O,     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     B,\n+  \/* 11300 *\/ VMAbv, VMAbv, VMAbv, VMAbv,     O,     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     B,\n@@ -603,2 +610,2 @@\n-  \/* 11450 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     O,     O,    FM,     O,\n-  \/* 11460 *\/     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 11450 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     O,     O, FMAbv,     B,\n+  \/* 11460 *\/    CS,    CS,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n@@ -613,1 +620,1 @@\n-  \/* 114C0 *\/ VMAbv, VMPst,     H, CMBlw,     B,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 114C0 *\/ VMAbv, VMAbv,     H, CMBlw,     B,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n@@ -646,1 +653,1 @@\n-  \/* 116B0 *\/  VBlw,  VBlw,  VAbv,  VAbv,  VAbv,  VAbv,     H, CMBlw,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 116B0 *\/  VBlw,  VBlw,  VAbv,  VAbv,  VAbv,  VAbv,     H, CMBlw,     B,     O,     O,     O,     O,     O,     O,     O,\n@@ -669,1 +676,11 @@\n-#define use_offset_0x11a00u 5232\n+#define use_offset_0x11900u 5232\n+\n+\n+  \/* Dives Akuru *\/\n+\n+  \/* 11900 *\/     B,     B,     B,     B,     B,     B,     B,     O,     O,     B,     O,     O,     B,     B,     B,     B,\n+  \/* 11910 *\/     B,     B,     B,     B,     O,     B,     B,     O,     B,     B,     B,     B,     B,     B,     B,     B,\n+  \/* 11920 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,\n+  \/* 11930 *\/  VPst,  VPst,  VPst,  VPst,  VPst,  VPre,     O,  VPre,  VPst,     O,     O, VMAbv, VMAbv,  VPst,     H,     R,\n+  \/* 11940 *\/  MPst,     R,  MBlw, CMBlw,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 11950 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     O,     O,     O,     O,\n@@ -671,0 +688,11 @@\n+#define use_offset_0x119a0u 5328\n+\n+\n+  \/* Nandinagari *\/\n+\n+  \/* 119A0 *\/     B,     B,     B,     B,     B,     B,     B,     B,     O,     O,     B,     B,     B,     B,     B,     B,\n+  \/* 119B0 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,\n+  \/* 119C0 *\/     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,     B,\n+  \/* 119D0 *\/     B,  VPst,  VPre,  VPst,  VBlw,  VBlw,  VBlw,  VBlw,     O,     O,  VAbv,  VAbv,  VPst,  VPst, VMPst, VMPst,\n+  \/* 119E0 *\/     H,     B,     O,     O,  VPre,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n+  \/* 119F0 *\/     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,     O,\n@@ -677,1 +705,1 @@\n-  \/* 11A30 *\/     B,     B,     B,    FM,  VBlw, VMAbv, VMAbv, VMAbv, VMAbv, VMPst,     R,  MBlw,  MBlw,  MBlw,  MBlw,    GB,\n+  \/* 11A30 *\/     B,     B,     B, FMBlw,  VBlw, VMAbv, VMAbv, VMAbv, VMAbv, VMPst,     R,  MBlw,  MBlw,  MBlw,  MBlw,    GB,\n@@ -685,1 +713,1 @@\n-  \/* 11A80 *\/     B,     B,     B,     B,     O,     O,     R,     R,     R,     R,  FBlw,  FBlw,  FBlw,  FBlw,  FBlw,  FBlw,\n+  \/* 11A80 *\/     B,     B,     B,     B,     R,     R,     R,     R,     R,     R,  FBlw,  FBlw,  FBlw,  FBlw,  FBlw,  FBlw,\n@@ -688,1 +716,1 @@\n-#define use_offset_0x11c00u 5392\n+#define use_offset_0x11c00u 5584\n@@ -709,1 +737,1 @@\n-#define use_offset_0x11d00u 5576\n+#define use_offset_0x11d00u 5768\n@@ -729,1 +757,1 @@\n-#define use_offset_0x11ee0u 5752\n+#define use_offset_0x11ee0u 5944\n@@ -737,1 +765,1 @@\n-}; \/* Table items: 5776; occupancy: 74% *\/\n+}; \/* Table items: 5968; occupancy: 74% *\/\n@@ -788,1 +816,2 @@\n-      if (hb_in_range<hb_codepoint_t> (u, 0x11A00u, 0x11A9Fu)) return use_table[u - 0x11A00u + use_offset_0x11a00u];\n+      if (hb_in_range<hb_codepoint_t> (u, 0x11900u, 0x1195Fu)) return use_table[u - 0x11900u + use_offset_0x11900u];\n+      if (hb_in_range<hb_codepoint_t> (u, 0x119A0u, 0x11A9Fu)) return use_table[u - 0x119A0u + use_offset_0x119a0u];\n@@ -803,1 +832,0 @@\n-#undef FM\n@@ -815,0 +843,1 @@\n+#undef Sk\n@@ -819,1 +848,0 @@\n-#undef CMBlw\n@@ -821,0 +849,2 @@\n+#undef CMBlw\n+#undef FAbv\n@@ -823,2 +853,4 @@\n-#undef FAbv\n-#undef MPre\n+#undef FMAbv\n+#undef FMBlw\n+#undef FMPst\n+#undef MAbv\n@@ -827,2 +859,1 @@\n-#undef MAbv\n-#undef SMBlw\n+#undef MPre\n@@ -830,1 +861,2 @@\n-#undef VPre\n+#undef SMBlw\n+#undef VAbv\n@@ -833,2 +865,2 @@\n-#undef VAbv\n-#undef VMPre\n+#undef VPre\n+#undef VMAbv\n@@ -837,1 +869,2 @@\n-#undef VMAbv\n+#undef VMPre\n+\n@@ -839,0 +872,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-use-table.cc","additions":101,"deletions":67,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -31,0 +35,1 @@\n+#include \"hb-ot-shape-complex-arabic-joining-list.hh\"\n@@ -34,1 +39,1 @@\n-#define use_category() complex_var_u8_0()\n+#define use_category() complex_var_u8_1()\n@@ -43,1 +48,1 @@\n-basic_features[] =\n+use_basic_features[] =\n@@ -58,1 +63,1 @@\n-arabic_features[] =\n+use_topographical_features[] =\n@@ -64,5 +69,0 @@\n-  \/* The spec doesn't specify these but we apply anyway, since our Arabic shaper\n-   * does.  These are only used in Syriac spec. *\/\n-  HB_TAG('m','e','d','2'),\n-  HB_TAG('f','i','n','2'),\n-  HB_TAG('f','i','n','3'),\n@@ -70,1 +70,1 @@\n-\/* Same order as arabic_features.  Don't need Syriac stuff.*\/\n+\/* Same order as use_topographical_features. *\/\n@@ -72,5 +72,5 @@\n-  ISOL,\n-  INIT,\n-  MEDI,\n-  FINA,\n-  _NONE\n+  USE_ISOL,\n+  USE_INIT,\n+  USE_MEDI,\n+  USE_FINA,\n+  _USE_NONE\n@@ -79,1 +79,1 @@\n-other_features[] =\n+use_other_features[] =\n@@ -92,11 +92,0 @@\n-static const hb_tag_t\n-positioning_features[] =\n-{\n-  \/*\n-   * Positioning features.\n-   * We don't care about the types.\n-   *\/\n-  HB_TAG('d','i','s','t'),\n-  HB_TAG('a','b','v','m'),\n-  HB_TAG('b','l','w','m'),\n-};\n@@ -105,1 +94,5 @@\n-setup_syllables (const hb_ot_shape_plan_t *plan,\n+setup_syllables_use (const hb_ot_shape_plan_t *plan,\n+                     hb_font_t *font,\n+                     hb_buffer_t *buffer);\n+static void\n+record_rphf_use (const hb_ot_shape_plan_t *plan,\n@@ -109,7 +102,3 @@\n-clear_substitution_flags (const hb_ot_shape_plan_t *plan,\n-                          hb_font_t *font,\n-                          hb_buffer_t *buffer);\n-static void\n-record_rphf (const hb_ot_shape_plan_t *plan,\n-             hb_font_t *font,\n-             hb_buffer_t *buffer);\n+record_pref_use (const hb_ot_shape_plan_t *plan,\n+                 hb_font_t *font,\n+                 hb_buffer_t *buffer);\n@@ -117,1 +106,1 @@\n-record_pref (const hb_ot_shape_plan_t *plan,\n+reorder_use (const hb_ot_shape_plan_t *plan,\n@@ -120,8 +109,0 @@\n-static void\n-reorder (const hb_ot_shape_plan_t *plan,\n-         hb_font_t *font,\n-         hb_buffer_t *buffer);\n-static void\n-clear_syllables (const hb_ot_shape_plan_t *plan,\n-                 hb_font_t *font,\n-                 hb_buffer_t *buffer);\n@@ -135,1 +116,1 @@\n-  map->add_gsub_pause (setup_syllables);\n+  map->add_gsub_pause (setup_syllables_use);\n@@ -144,1 +125,1 @@\n-  map->add_gsub_pause (clear_substitution_flags);\n+  map->add_gsub_pause (_hb_clear_substitution_flags);\n@@ -146,2 +127,2 @@\n-  map->add_gsub_pause (record_rphf);\n-  map->add_gsub_pause (clear_substitution_flags);\n+  map->add_gsub_pause (record_rphf_use);\n+  map->add_gsub_pause (_hb_clear_substitution_flags);\n@@ -149,1 +130,1 @@\n-  map->add_gsub_pause (record_pref);\n+  map->add_gsub_pause (record_pref_use);\n@@ -152,2 +133,2 @@\n-  for (unsigned int i = 0; i < ARRAY_LENGTH (basic_features); i++)\n-    map->enable_feature (basic_features[i], F_MANUAL_ZWJ);\n+  for (unsigned int i = 0; i < ARRAY_LENGTH (use_basic_features); i++)\n+    map->enable_feature (use_basic_features[i], F_MANUAL_ZWJ);\n@@ -155,2 +136,2 @@\n-  map->add_gsub_pause (reorder);\n-  map->add_gsub_pause (clear_syllables);\n+  map->add_gsub_pause (reorder_use);\n+  map->add_gsub_pause (_hb_clear_syllables);\n@@ -159,2 +140,2 @@\n-  for (unsigned int i = 0; i < ARRAY_LENGTH (arabic_features); i++)\n-    map->add_feature (arabic_features[i]);\n+  for (unsigned int i = 0; i < ARRAY_LENGTH (use_topographical_features); i++)\n+    map->add_feature (use_topographical_features[i]);\n@@ -164,6 +145,2 @@\n-  for (unsigned int i = 0; i < ARRAY_LENGTH (other_features); i++)\n-    map->enable_feature (other_features[i], F_MANUAL_ZWJ);\n-\n-  \/* \"Positional feature application\" *\/\n-  for (unsigned int i = 0; i < ARRAY_LENGTH (positioning_features); i++)\n-    map->enable_feature (positioning_features[i]);\n+  for (unsigned int i = 0; i < ARRAY_LENGTH (use_other_features); i++)\n+    map->enable_feature (use_other_features[i], F_MANUAL_ZWJ);\n@@ -179,34 +156,0 @@\n-static bool\n-has_arabic_joining (hb_script_t script)\n-{\n-  \/* List of scripts that have data in arabic-table. *\/\n-  switch ((int) script)\n-  {\n-    \/* Unicode-1.1 additions *\/\n-    case HB_SCRIPT_ARABIC:\n-\n-    \/* Unicode-3.0 additions *\/\n-    case HB_SCRIPT_MONGOLIAN:\n-    case HB_SCRIPT_SYRIAC:\n-\n-    \/* Unicode-5.0 additions *\/\n-    case HB_SCRIPT_NKO:\n-    case HB_SCRIPT_PHAGS_PA:\n-\n-    \/* Unicode-6.0 additions *\/\n-    case HB_SCRIPT_MANDAIC:\n-\n-    \/* Unicode-7.0 additions *\/\n-    case HB_SCRIPT_MANICHAEAN:\n-    case HB_SCRIPT_PSALTER_PAHLAVI:\n-\n-    \/* Unicode-9.0 additions *\/\n-    case HB_SCRIPT_ADLAM:\n-\n-      return true;\n-\n-    default:\n-      return false;\n-  }\n-}\n-\n@@ -246,9 +189,10 @@\n-enum syllable_type_t {\n-  independent_cluster,\n-  virama_terminated_cluster,\n-  standard_cluster,\n-  number_joiner_terminated_cluster,\n-  numeral_cluster,\n-  symbol_cluster,\n-  broken_cluster,\n-  non_cluster,\n+enum use_syllable_type_t {\n+  use_independent_cluster,\n+  use_virama_terminated_cluster,\n+  use_sakot_terminated_cluster,\n+  use_standard_cluster,\n+  use_number_joiner_terminated_cluster,\n+  use_numeral_cluster,\n+  use_symbol_cluster,\n+  use_broken_cluster,\n+  use_non_cluster,\n@@ -297,1 +241,1 @@\n-    unsigned int limit = info[start].use_category() == USE_R ? 1 : MIN (3u, end - start);\n+    unsigned int limit = info[start].use_category() == USE_R ? 1 : hb_min (3u, end - start);\n@@ -311,1 +255,1 @@\n-  static_assert ((INIT < 4 && ISOL < 4 && MEDI < 4 && FINA < 4), \"\");\n+  static_assert ((USE_INIT < 4 && USE_ISOL < 4 && USE_MEDI < 4 && USE_FINA < 4), \"\");\n@@ -315,1 +259,1 @@\n-    masks[i] = plan->map.get_1_mask (arabic_features[i]);\n+    masks[i] = plan->map.get_1_mask (use_topographical_features[i]);\n@@ -325,1 +269,1 @@\n-  joining_form_t last_form = _NONE;\n+  joining_form_t last_form = _USE_NONE;\n@@ -329,1 +273,1 @@\n-    syllable_type_t syllable_type = (syllable_type_t) (info[start].syllable() & 0x0F);\n+    use_syllable_type_t syllable_type = (use_syllable_type_t) (info[start].syllable() & 0x0F);\n@@ -332,3 +276,3 @@\n-      case independent_cluster:\n-      case symbol_cluster:\n-      case non_cluster:\n+      case use_independent_cluster:\n+      case use_symbol_cluster:\n+      case use_non_cluster:\n@@ -336,1 +280,1 @@\n-        last_form = _NONE;\n+        last_form = _USE_NONE;\n@@ -339,5 +283,6 @@\n-      case virama_terminated_cluster:\n-      case standard_cluster:\n-      case number_joiner_terminated_cluster:\n-      case numeral_cluster:\n-      case broken_cluster:\n+      case use_virama_terminated_cluster:\n+      case use_sakot_terminated_cluster:\n+      case use_standard_cluster:\n+      case use_number_joiner_terminated_cluster:\n+      case use_numeral_cluster:\n+      case use_broken_cluster:\n@@ -345,1 +290,1 @@\n-        bool join = last_form == FINA || last_form == ISOL;\n+        bool join = last_form == USE_FINA || last_form == USE_ISOL;\n@@ -350,1 +295,1 @@\n-          last_form = last_form == FINA ? MEDI : INIT;\n+          last_form = last_form == USE_FINA ? USE_MEDI : USE_INIT;\n@@ -356,1 +301,1 @@\n-        last_form = join ? FINA : ISOL;\n+        last_form = join ? USE_FINA : USE_ISOL;\n@@ -368,3 +313,3 @@\n-setup_syllables (const hb_ot_shape_plan_t *plan,\n-                 hb_font_t *font HB_UNUSED,\n-                 hb_buffer_t *buffer)\n+setup_syllables_use (const hb_ot_shape_plan_t *plan,\n+                     hb_font_t *font HB_UNUSED,\n+                     hb_buffer_t *buffer)\n@@ -372,1 +317,1 @@\n-  find_syllables (buffer);\n+  find_syllables_use (buffer);\n@@ -380,14 +325,3 @@\n-clear_substitution_flags (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                          hb_font_t *font HB_UNUSED,\n-                          hb_buffer_t *buffer)\n-{\n-  hb_glyph_info_t *info = buffer->info;\n-  unsigned int count = buffer->len;\n-  for (unsigned int i = 0; i < count; i++)\n-    _hb_glyph_info_clear_substituted (&info[i]);\n-}\n-\n-static void\n-record_rphf (const hb_ot_shape_plan_t *plan,\n-             hb_font_t *font HB_UNUSED,\n-             hb_buffer_t *buffer)\n+record_rphf_use (const hb_ot_shape_plan_t *plan,\n+                 hb_font_t *font HB_UNUSED,\n+                 hb_buffer_t *buffer)\n@@ -414,3 +348,3 @@\n-record_pref (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-             hb_font_t *font HB_UNUSED,\n-             hb_buffer_t *buffer)\n+record_pref_use (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                 hb_font_t *font HB_UNUSED,\n+                 hb_buffer_t *buffer)\n@@ -433,1 +367,1 @@\n-is_halant (const hb_glyph_info_t &info)\n+is_halant_use (const hb_glyph_info_t &info)\n@@ -440,1 +374,1 @@\n-reorder_syllable (hb_buffer_t *buffer, unsigned int start, unsigned int end)\n+reorder_syllable_use (hb_buffer_t *buffer, unsigned int start, unsigned int end)\n@@ -442,1 +376,1 @@\n-  syllable_type_t syllable_type = (syllable_type_t) (buffer->info[start].syllable() & 0x0F);\n+  use_syllable_type_t syllable_type = (use_syllable_type_t) (buffer->info[start].syllable() & 0x0F);\n@@ -445,3 +379,4 @@\n-                  (FLAG (virama_terminated_cluster) |\n-                   FLAG (standard_cluster) |\n-                   FLAG (broken_cluster) |\n+                  (FLAG (use_virama_terminated_cluster) |\n+                   FLAG (use_sakot_terminated_cluster) |\n+                   FLAG (use_standard_cluster) |\n+                   FLAG (use_broken_cluster) |\n@@ -478,1 +413,1 @@\n-                                is_halant (info[i]);\n+                                is_halant_use (info[i]);\n@@ -502,1 +437,1 @@\n-    if (is_halant (info[i]))\n+    if (is_halant_use (info[i]))\n@@ -522,3 +457,3 @@\n-insert_dotted_circles (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                       hb_font_t *font,\n-                       hb_buffer_t *buffer)\n+insert_dotted_circles_use (const hb_ot_shape_plan_t *plan HB_UNUSED,\n+                           hb_font_t *font,\n+                           hb_buffer_t *buffer)\n@@ -526,1 +461,5 @@\n-  \/* Note: This loop is extra overhead, but should not be measurable. *\/\n+  if (unlikely (buffer->flags & HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE))\n+    return;\n+\n+  \/* Note: This loop is extra overhead, but should not be measurable.\n+   * TODO Use a buffer scratch flag to remove the loop. *\/\n@@ -531,1 +470,1 @@\n-    if ((info[i].syllable() & 0x0F) == broken_cluster)\n+    if ((info[i].syllable() & 0x0F) == use_broken_cluster)\n@@ -551,2 +490,2 @@\n-    syllable_type_t syllable_type = (syllable_type_t) (syllable & 0x0F);\n-    if (unlikely (last_syllable != syllable && syllable_type == broken_cluster))\n+    use_syllable_type_t syllable_type = (use_syllable_type_t) (syllable & 0x0F);\n+    if (unlikely (last_syllable != syllable && syllable_type == use_broken_cluster))\n@@ -560,1 +499,0 @@\n-      \/* TODO Set glyph_props? *\/\n@@ -577,3 +515,3 @@\n-reorder (const hb_ot_shape_plan_t *plan,\n-         hb_font_t *font,\n-         hb_buffer_t *buffer)\n+reorder_use (const hb_ot_shape_plan_t *plan,\n+             hb_font_t *font,\n+             hb_buffer_t *buffer)\n@@ -581,1 +519,1 @@\n-  insert_dotted_circles (plan, font, buffer);\n+  insert_dotted_circles_use (plan, font, buffer);\n@@ -584,1 +522,1 @@\n-    reorder_syllable (buffer, start, end);\n+    reorder_syllable_use (buffer, start, end);\n@@ -589,11 +527,0 @@\n-static void\n-clear_syllables (const hb_ot_shape_plan_t *plan HB_UNUSED,\n-                 hb_font_t *font HB_UNUSED,\n-                 hb_buffer_t *buffer)\n-{\n-  hb_glyph_info_t *info = buffer->info;\n-  unsigned int count = buffer->len;\n-  for (unsigned int i = 0; i < count; i++)\n-    info[i].syllable() = 0;\n-}\n-\n@@ -640,0 +567,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-use.cc","additions":103,"deletions":173,"binary":false,"changes":276,"status":"modified"},{"patch":"@@ -71,0 +71,6 @@\n+  USE_CS        = 43,   \/* CONS_WITH_STACKER *\/\n+\n+  \/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1102 *\/\n+  USE_HVM       = 44,   \/* HALANT_OR_VOWEL_MODIFIER *\/\n+\n+  USE_Sk        = 48,   \/* SAKOT *\/\n@@ -91,4 +97,3 @@\n-  USE_CS        = 43,   \/* CONS_WITH_STACKER *\/\n-\n-  \/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1102 *\/\n-  USE_HVM       = 44,   \/* HALANT_OR_VOWEL_MODIFIER *\/\n+  USE_FMAbv     = 45,   \/* CONS_FINAL_MOD       UIPC = Top *\/\n+  USE_FMBlw     = 46,   \/* CONS_FINAL_MOD       UIPC = Bottom *\/\n+  USE_FMPst     = 47,   \/* CONS_FINAL_MOD       UIPC = Not_Applicable *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-use.hh","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- *   .\/gen-vowel-constraints.py use Scripts.txt\n+ *   .\/gen-vowel-constraints.py ms-use\/IndicShapingInvalidCluster.txt Scripts.txt\n@@ -9,2 +9,3 @@\n- * # Copied from https:\/\/docs.microsoft.com\/en-us\/typography\/script-development\/use\n- * # On October 23, 2018; with documentd dated 02\/07\/2018.\n+ * # IndicShapingInvalidCluster.txt\n+ * # Date: 2015-03-12, 21:17:00 GMT [AG]\n+ * # Date: 2019-11-08, 23:22:00 GMT [AG]\n@@ -12,2 +13,2 @@\n- * # Scripts-11.0.0.txt\n- * # Date: 2018-02-21, 05:34:31 GMT\n+ * # Scripts-13.0.0.txt\n+ * # Date: 2020-01-22, 00:07:43 GMT\n@@ -16,0 +17,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -37,0 +42,6 @@\n+#ifdef HB_NO_OT_SHAPE_COMPLEX_VOWEL_CONSTRAINTS\n+  return;\n+#endif\n+  if (buffer->flags & HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE)\n+    return;\n+\n@@ -90,2 +101,1 @@\n-              buffer->next_glyph ();\n-              _output_dotted_circle (buffer);\n+              matched = true;\n@@ -204,0 +214,15 @@\n+    case HB_SCRIPT_TAMIL:\n+      for (buffer->idx = 0; buffer->idx + 1 < count && buffer->successful;)\n+      {\n+        bool matched = false;\n+        if (0x0B85u == buffer->cur ().codepoint &&\n+            0x0BC2u == buffer->cur (1).codepoint)\n+        {\n+          matched = true;\n+        }\n+        buffer->next_glyph ();\n+        if (matched) _output_with_dotted_circle (buffer);\n+      }\n+      processed = true;\n+      break;\n+\n@@ -437,0 +462,2 @@\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex-vowel-constraints.cc","additions":34,"deletions":7,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-  HB_COMPLEX_SHAPER_IMPLEMENT (default) \/* should be first *\/ \\\n@@ -55,0 +54,2 @@\n+  HB_COMPLEX_SHAPER_IMPLEMENT (default) \\\n+  HB_COMPLEX_SHAPER_IMPLEMENT (dumber) \\\n@@ -63,1 +64,1 @@\n-  \/* ^--- Add new shapers here *\/\n+  \/* ^--- Add new shapers here; keep sorted. *\/\n@@ -380,0 +381,7 @@\n+    \/* Unicode-12.0 additions *\/\n+    case HB_SCRIPT_NANDINAGARI:\n+\n+    \/* Unicode-13.0 additions *\/\n+    case HB_SCRIPT_CHORASMIAN:\n+    case HB_SCRIPT_DIVES_AKURU:\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-complex.hh","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -169,0 +173,4 @@\n+#ifdef HB_NO_OT_SHAPE_FALLBACK\n+  return;\n+#endif\n+\n@@ -417,1 +425,1 @@\n-    if (!HB_UNICODE_GENERAL_CATEGORY_IS_MARK (_hb_glyph_info_get_general_category (&info[i])))\n+    if (!_hb_glyph_info_is_unicode_mark (&info[i]))\n@@ -422,1 +430,1 @@\n-        if (!HB_UNICODE_GENERAL_CATEGORY_IS_MARK (_hb_glyph_info_get_general_category (&info[j])))\n+        if (!_hb_glyph_info_is_unicode_mark (&info[j]))\n@@ -437,0 +445,4 @@\n+#ifdef HB_NO_OT_SHAPE_FALLBACK\n+  return;\n+#endif\n+\n@@ -443,1 +455,1 @@\n-    if (likely (!HB_UNICODE_GENERAL_CATEGORY_IS_MARK (_hb_glyph_info_get_general_category (&info[i])))) {\n+    if (likely (!_hb_glyph_info_is_unicode_mark (&info[i]))) {\n@@ -451,0 +463,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -469,0 +482,1 @@\n+#endif\n@@ -476,0 +490,5 @@\n+#ifdef HB_NO_OT_SHAPE_FALLBACK\n+  return;\n+#endif\n+\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -492,0 +511,1 @@\n+#endif\n@@ -574,0 +594,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-fallback.cc","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n@@ -333,1 +337,1 @@\n-        if (unlikely (HB_UNICODE_GENERAL_CATEGORY_IS_MARK (_hb_glyph_info_get_general_category (&buffer->info[end]))))\n+        if (unlikely (_hb_glyph_info_is_unicode_mark (&buffer->info[end])))\n@@ -359,1 +363,1 @@\n-        if (!HB_UNICODE_GENERAL_CATEGORY_IS_MARK (_hb_glyph_info_get_general_category (&buffer->info[end])))\n+        if (!_hb_glyph_info_is_unicode_mark(&buffer->info[end]))\n@@ -434,1 +438,1 @@\n-          HB_UNICODE_GENERAL_CATEGORY_IS_MARK (_hb_glyph_info_get_general_category (&buffer->cur())))\n+          _hb_glyph_info_is_unicode_mark(&buffer->cur()))\n@@ -472,0 +476,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape-normalize.cc","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,8 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_OT_SHAPE\n+\n+#ifdef HB_NO_OT_LAYOUT\n+#error \"Cannot compile 'ot' shaper with HB_NO_OT_LAYOUT.\"\n+#endif\n+\n@@ -43,0 +51,10 @@\n+#ifndef HB_NO_AAT_SHAPE\n+static inline bool\n+_hb_apply_morx (hb_face_t *face, const hb_segment_properties_t *props)\n+{\n+  \/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/2124 *\/\n+  return hb_aat_layout_has_substitution (face) &&\n+         (HB_DIRECTION_IS_HORIZONTAL (props->direction) || !hb_ot_layout_has_substitution (face));\n+}\n+#endif\n+\n@@ -58,15 +76,0 @@\n-static bool\n-_hb_apply_morx (hb_face_t *face)\n-{\n-  if (hb_options ().aat &&\n-      hb_aat_layout_has_substitution (face))\n-    return true;\n-\n-  \/* Ignore empty GSUB tables. *\/\n-  return (!hb_ot_layout_has_substitution (face) ||\n-          !hb_ot_layout_table_get_script_tags (face,\n-                                               HB_OT_TAG_GSUB,\n-                                               0, nullptr, nullptr)) &&\n-         hb_aat_layout_has_substitution (face);\n-}\n-\n@@ -78,2 +81,4 @@\n-                                                aat_map (face, props),\n-                                                apply_morx (_hb_apply_morx (face))\n+                                                aat_map (face, props)\n+#ifndef HB_NO_AAT_SHAPE\n+                                                , apply_morx (_hb_apply_morx (face, props))\n+#endif\n@@ -86,2 +91,3 @@\n-  if (apply_morx)\n-    shaper = &_hb_ot_complex_shaper_default;\n+  \/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1528 *\/\n+  if (apply_morx && shaper != &_hb_ot_complex_shaper_default)\n+    shaper = &_hb_ot_complex_shaper_dumber;\n@@ -97,0 +103,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -99,0 +106,1 @@\n+#endif\n@@ -100,0 +108,1 @@\n+#ifndef HB_NO_OT_SHAPE_FRACTIONS\n@@ -104,0 +113,2 @@\n+#endif\n+\n@@ -105,0 +116,2 @@\n+  plan.has_vert = !!plan.map.get_1_mask (HB_TAG ('v','e','r','t'));\n+\n@@ -107,0 +120,1 @@\n+#ifndef HB_NO_OT_KERN\n@@ -108,2 +122,0 @@\n-  plan.trak_mask = plan.map.get_mask (HB_TAG ('t','r','a','k'));\n-\n@@ -111,0 +123,3 @@\n+#endif\n+#ifndef HB_NO_AAT_SHAPE\n+  plan.trak_mask = plan.map.get_mask (HB_TAG ('t','r','a','k'));\n@@ -112,0 +127,2 @@\n+#endif\n+\n@@ -127,0 +144,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -128,0 +146,1 @@\n+#endif\n@@ -133,1 +152,4 @@\n-  if (hb_options ().aat && hb_aat_layout_has_positioning (face))\n+  if (0)\n+    ;\n+#ifndef HB_NO_AAT_SHAPE\n+  else if (hb_aat_layout_has_positioning (face))\n@@ -135,0 +157,1 @@\n+#endif\n@@ -137,2 +160,0 @@\n-  else if (hb_aat_layout_has_positioning (face))\n-    plan.apply_kerx = true;\n@@ -140,1 +161,1 @@\n-  if (!plan.apply_kerx && !has_gpos_kern)\n+  if (!plan.apply_kerx && (!has_gpos_kern || !plan.apply_gpos))\n@@ -143,0 +164,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -145,1 +167,4 @@\n-    else if (hb_ot_layout_has_kerning (face))\n+    else\n+#endif\n+#ifndef HB_NO_OT_KERN\n+    if (hb_ot_layout_has_kerning (face))\n@@ -147,0 +172,1 @@\n+#endif\n@@ -151,1 +177,5 @@\n-                    (!plan.apply_kern || !hb_ot_layout_has_machine_kerning (face));\n+                    (!plan.apply_kern\n+#ifndef HB_NO_OT_KERN\n+                     || !hb_ot_layout_has_machine_kerning (face)\n+#endif\n+                    );\n@@ -156,1 +186,5 @@\n-                                              (!plan.apply_kern || !hb_ot_layout_has_cross_kerning (face));\n+                                              (!plan.apply_kern\n+#ifndef HB_NO_OT_KERN\n+                                               || !hb_ot_layout_has_cross_kerning (face)\n+#endif\n+                                              );\n@@ -161,0 +195,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -163,0 +198,1 @@\n+#endif\n@@ -170,0 +206,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -171,0 +208,1 @@\n+#endif\n@@ -185,0 +223,5 @@\n+    {\n+      map.fini ();\n+#ifndef HB_NO_AAT_SHAPE\n+      aat_map.fini ();\n+#endif\n@@ -186,0 +229,1 @@\n+    }\n@@ -198,0 +242,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -199,0 +244,1 @@\n+#endif\n@@ -205,0 +251,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -208,0 +255,1 @@\n+#endif\n@@ -217,0 +265,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -219,0 +268,2 @@\n+#endif\n+#ifndef HB_NO_OT_KERN\n@@ -221,0 +272,1 @@\n+#endif\n@@ -224,0 +276,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -226,0 +279,1 @@\n+#endif\n@@ -232,0 +286,2 @@\n+  {HB_TAG('a','b','v','m'), F_GLOBAL},\n+  {HB_TAG('b','l','w','m'), F_GLOBAL},\n@@ -246,0 +302,1 @@\n+  {HB_TAG('d','i','s','t'), F_GLOBAL},\n@@ -277,0 +334,1 @@\n+#ifndef HB_NO_OT_SHAPE_FRACTIONS\n@@ -281,0 +339,1 @@\n+#endif\n@@ -285,0 +344,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -289,0 +349,1 @@\n+#endif\n@@ -321,0 +382,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -330,0 +392,1 @@\n+#endif\n@@ -420,0 +483,1 @@\n+#ifndef HB_NO_EMOJI_SEQUENCES\n@@ -431,0 +495,1 @@\n+#endif\n@@ -451,0 +516,3 @@\n+  if (unlikely (buffer->flags & HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE))\n+    return;\n+\n@@ -527,2 +595,2 @@\n-static inline void\n-hb_ot_mirror_chars (const hb_ot_shape_context_t *c)\n+static hb_codepoint_t\n+hb_vert_char_for (hb_codepoint_t u)\n@@ -530,2 +598,44 @@\n-  if (HB_DIRECTION_IS_FORWARD (c->target_direction))\n-    return;\n+  switch (u >> 8)\n+  {\n+    case 0x20: switch (u) {\n+      case 0x2013u: return 0xfe32u; \/\/ EN DASH\n+      case 0x2014u: return 0xfe31u; \/\/ EM DASH\n+      case 0x2025u: return 0xfe30u; \/\/ TWO DOT LEADER\n+      case 0x2026u: return 0xfe19u; \/\/ HORIZONTAL ELLIPSIS\n+    } break;\n+    case 0x30: switch (u) {\n+      case 0x3001u: return 0xfe11u; \/\/ IDEOGRAPHIC COMMA\n+      case 0x3002u: return 0xfe12u; \/\/ IDEOGRAPHIC FULL STOP\n+      case 0x3008u: return 0xfe3fu; \/\/ LEFT ANGLE BRACKET\n+      case 0x3009u: return 0xfe40u; \/\/ RIGHT ANGLE BRACKET\n+      case 0x300au: return 0xfe3du; \/\/ LEFT DOUBLE ANGLE BRACKET\n+      case 0x300bu: return 0xfe3eu; \/\/ RIGHT DOUBLE ANGLE BRACKET\n+      case 0x300cu: return 0xfe41u; \/\/ LEFT CORNER BRACKET\n+      case 0x300du: return 0xfe42u; \/\/ RIGHT CORNER BRACKET\n+      case 0x300eu: return 0xfe43u; \/\/ LEFT WHITE CORNER BRACKET\n+      case 0x300fu: return 0xfe44u; \/\/ RIGHT WHITE CORNER BRACKET\n+      case 0x3010u: return 0xfe3bu; \/\/ LEFT BLACK LENTICULAR BRACKET\n+      case 0x3011u: return 0xfe3cu; \/\/ RIGHT BLACK LENTICULAR BRACKET\n+      case 0x3014u: return 0xfe39u; \/\/ LEFT TORTOISE SHELL BRACKET\n+      case 0x3015u: return 0xfe3au; \/\/ RIGHT TORTOISE SHELL BRACKET\n+      case 0x3016u: return 0xfe17u; \/\/ LEFT WHITE LENTICULAR BRACKET\n+      case 0x3017u: return 0xfe18u; \/\/ RIGHT WHITE LENTICULAR BRACKET\n+    } break;\n+    case 0xfe: switch (u) {\n+      case 0xfe4fu: return 0xfe34u; \/\/ WAVY LOW LINE\n+    } break;\n+    case 0xff: switch (u) {\n+      case 0xff01u: return 0xfe15u; \/\/ FULLWIDTH EXCLAMATION MARK\n+      case 0xff08u: return 0xfe35u; \/\/ FULLWIDTH LEFT PARENTHESIS\n+      case 0xff09u: return 0xfe36u; \/\/ FULLWIDTH RIGHT PARENTHESIS\n+      case 0xff0cu: return 0xfe10u; \/\/ FULLWIDTH COMMA\n+      case 0xff1au: return 0xfe13u; \/\/ FULLWIDTH COLON\n+      case 0xff1bu: return 0xfe14u; \/\/ FULLWIDTH SEMICOLON\n+      case 0xff1fu: return 0xfe16u; \/\/ FULLWIDTH QUESTION MARK\n+      case 0xff3bu: return 0xfe47u; \/\/ FULLWIDTH LEFT SQUARE BRACKET\n+      case 0xff3du: return 0xfe48u; \/\/ FULLWIDTH RIGHT SQUARE BRACKET\n+      case 0xff3fu: return 0xfe33u; \/\/ FULLWIDTH LOW LINE\n+      case 0xff5bu: return 0xfe37u; \/\/ FULLWIDTH LEFT CURLY BRACKET\n+      case 0xff5du: return 0xfe38u; \/\/ FULLWIDTH RIGHT CURLY BRACKET\n+    } break;\n+  }\n@@ -533,3 +643,2 @@\n-  hb_buffer_t *buffer = c->buffer;\n-  hb_unicode_funcs_t *unicode = buffer->unicode;\n-  hb_mask_t rtlm_mask = c->plan->rtlm_mask;\n+  return u;\n+}\n@@ -537,0 +646,4 @@\n+static inline void\n+hb_ot_rotate_chars (const hb_ot_shape_context_t *c)\n+{\n+  hb_buffer_t *buffer = c->buffer;\n@@ -539,6 +652,22 @@\n-  for (unsigned int i = 0; i < count; i++) {\n-    hb_codepoint_t codepoint = unicode->mirroring (info[i].codepoint);\n-    if (likely (codepoint == info[i].codepoint || !c->font->has_glyph (codepoint)))\n-      info[i].mask |= rtlm_mask;\n-    else\n-      info[i].codepoint = codepoint;\n+\n+  if (HB_DIRECTION_IS_BACKWARD (c->target_direction))\n+  {\n+    hb_unicode_funcs_t *unicode = buffer->unicode;\n+    hb_mask_t rtlm_mask = c->plan->rtlm_mask;\n+\n+    for (unsigned int i = 0; i < count; i++) {\n+      hb_codepoint_t codepoint = unicode->mirroring (info[i].codepoint);\n+      if (unlikely (codepoint != info[i].codepoint && c->font->has_glyph (codepoint)))\n+        info[i].codepoint = codepoint;\n+      else\n+        info[i].mask |= rtlm_mask;\n+    }\n+  }\n+\n+  if (HB_DIRECTION_IS_VERTICAL (c->target_direction) && !c->plan->has_vert)\n+  {\n+    for (unsigned int i = 0; i < count; i++) {\n+      hb_codepoint_t codepoint = hb_vert_char_for (info[i].codepoint);\n+      if (unlikely (codepoint != info[i].codepoint && c->font->has_glyph (codepoint)))\n+        info[i].codepoint = codepoint;\n+    }\n@@ -551,0 +680,4 @@\n+#ifdef HB_NO_OT_SHAPE_FRACTIONS\n+  return;\n+#endif\n+\n@@ -622,1 +755,1 @@\n-    if (!(feature->start == 0 && feature->end == (unsigned int)-1)) {\n+    if (!(feature->start == HB_FEATURE_GLOBAL_START && feature->end == HB_FEATURE_GLOBAL_END)) {\n@@ -717,1 +850,1 @@\n-  hb_ot_mirror_chars (c);\n+  hb_ot_rotate_chars (c);\n@@ -761,0 +894,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -763,0 +897,1 @@\n+#endif\n@@ -896,0 +1031,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -898,0 +1034,1 @@\n+#endif\n@@ -962,2 +1099,2 @@\n-    c->buffer->max_len = MAX (c->buffer->len * HB_BUFFER_MAX_LEN_FACTOR,\n-                              (unsigned) HB_BUFFER_MAX_LEN_MIN);\n+    c->buffer->max_len = hb_max (c->buffer->len * HB_BUFFER_MAX_LEN_FACTOR,\n+                                 (unsigned) HB_BUFFER_MAX_LEN_MIN);\n@@ -967,2 +1104,2 @@\n-    c->buffer->max_ops = MAX (c->buffer->len * HB_BUFFER_MAX_OPS_FACTOR,\n-                              (unsigned) HB_BUFFER_MAX_OPS_MIN);\n+    c->buffer->max_ops = hb_max (c->buffer->len * HB_BUFFER_MAX_OPS_FACTOR,\n+                                 (unsigned) HB_BUFFER_MAX_OPS_MIN);\n@@ -1084,0 +1221,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape.cc","additions":187,"deletions":47,"binary":false,"changes":234,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-  void init (hb_face_t   *face,\n-                    const int   *coords,\n-                    unsigned int num_coords)\n+  void init (hb_face_t *face,\n+             const int *coords,\n+             unsigned   num_coords)\n@@ -68,0 +68,1 @@\n+#ifndef HB_NO_OT_SHAPE_FRACTIONS\n@@ -69,0 +70,5 @@\n+#else\n+  static constexpr hb_mask_t frac_mask = 0;\n+  static constexpr hb_mask_t numr_mask = 0;\n+  static constexpr hb_mask_t dnom_mask = 0;\n+#endif\n@@ -70,0 +76,1 @@\n+#ifndef HB_NO_OT_KERN\n@@ -71,0 +78,4 @@\n+#else\n+  static constexpr hb_mask_t kern_mask = 0;\n+#endif\n+#ifndef HB_NO_AAT_SHAPE\n@@ -72,0 +83,3 @@\n+#else\n+  static constexpr hb_mask_t trak_mask = 0;\n+#endif\n@@ -73,0 +87,1 @@\n+#ifndef HB_NO_OT_KERN\n@@ -74,0 +89,4 @@\n+#else\n+  static constexpr bool requested_kerning = false;\n+#endif\n+#ifndef HB_NO_AAT_SHAPE\n@@ -75,0 +94,4 @@\n+#else\n+  static constexpr bool requested_tracking = false;\n+#endif\n+#ifndef HB_NO_OT_SHAPE_FRACTIONS\n@@ -76,0 +99,4 @@\n+#else\n+  static constexpr bool has_frac = false;\n+#endif\n+  bool has_vert : 1;\n@@ -83,1 +110,1 @@\n-  bool apply_kerx : 1;\n+#ifndef HB_NO_OT_KERN\n@@ -85,0 +112,5 @@\n+#else\n+  static constexpr bool apply_kern = false;\n+#endif\n+#ifndef HB_NO_AAT_SHAPE\n+  bool apply_kerx : 1;\n@@ -87,0 +119,5 @@\n+#else\n+  static constexpr bool apply_kerx = false;\n+  static constexpr bool apply_morx = false;\n+  static constexpr bool apply_trak = false;\n+#endif\n@@ -116,0 +153,1 @@\n+#ifndef HB_NO_AAT_SHAPE\n@@ -117,0 +155,3 @@\n+#else\n+  static constexpr bool apply_morx = false;\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-shape.hh","additions":45,"deletions":4,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -62,0 +62,5 @@\n+  unsigned int get_axis_index () const { return axisIndex; }\n+  float get_value ()             const { return value.to_float (); }\n+\n+  hb_ot_name_id_t get_value_name_id () const { return valueNameID; }\n+\n@@ -78,1 +83,1 @@\n-  Fixed         value;          \/* A numeric value for this attribute value. *\/\n+  HBFixed       value;          \/* A numeric value for this attribute value. *\/\n@@ -85,0 +90,5 @@\n+  unsigned int get_axis_index () const { return axisIndex; }\n+  float get_value ()             const { return nominalValue.to_float (); }\n+\n+  hb_ot_name_id_t get_value_name_id () const { return valueNameID; }\n+\n@@ -101,2 +111,2 @@\n-  Fixed         nominalValue;   \/* A numeric value for this attribute value. *\/\n-  Fixed         rangeMinValue;  \/* The minimum value for a range associated\n+  HBFixed       nominalValue;   \/* A numeric value for this attribute value. *\/\n+  HBFixed       rangeMinValue;  \/* The minimum value for a range associated\n@@ -104,1 +114,1 @@\n-  Fixed         rangeMaxValue;  \/* The maximum value for a range associated\n+  HBFixed       rangeMaxValue;  \/* The maximum value for a range associated\n@@ -112,0 +122,5 @@\n+  unsigned int get_axis_index () const { return axisIndex; }\n+  float get_value ()             const { return value.to_float (); }\n+\n+  hb_ot_name_id_t get_value_name_id () const { return valueNameID; }\n+\n@@ -128,2 +143,2 @@\n-  Fixed         value;          \/* A numeric value for this attribute value. *\/\n-  Fixed         linkedValue;    \/* The numeric value for a style-linked mapping\n+  HBFixed       value;          \/* A numeric value for this attribute value. *\/\n+  HBFixed       linkedValue;    \/* The numeric value for a style-linked mapping\n@@ -137,0 +152,3 @@\n+  unsigned int get_axis_index () const { return axisIndex; }\n+  float get_value ()             const { return value.to_float (); }\n+\n@@ -147,1 +165,1 @@\n-  Fixed         value;          \/* A numeric value for this attribute value. *\/\n+  HBFixed       value;          \/* A numeric value for this attribute value. *\/\n@@ -154,0 +172,5 @@\n+  const AxisValueRecord &get_axis_record (unsigned int axis_index) const\n+  { return axisValues.as_array (axisCount)[axis_index]; }\n+\n+  hb_ot_name_id_t get_value_name_id () const { return valueNameID; }\n+\n@@ -178,0 +201,36 @@\n+  bool get_value (unsigned int axis_index) const\n+  {\n+    switch (u.format)\n+    {\n+    case 1: return u.format1.get_value ();\n+    case 2: return u.format2.get_value ();\n+    case 3: return u.format3.get_value ();\n+    case 4: return u.format4.get_axis_record (axis_index).get_value ();\n+    default:return 0;\n+    }\n+  }\n+\n+  unsigned int get_axis_index () const\n+  {\n+    switch (u.format)\n+    {\n+    case 1: return u.format1.get_axis_index ();\n+    case 2: return u.format2.get_axis_index ();\n+    case 3: return u.format3.get_axis_index ();\n+    \/* case 4: Makes more sense for variable fonts which are handled by fvar in hb-style *\/\n+    default:return -1;\n+    }\n+  }\n+\n+  hb_ot_name_id_t get_value_name_id () const\n+  {\n+    switch (u.format)\n+    {\n+    case 1: return u.format1.get_value_name_id ();\n+    case 2: return u.format2.get_value_name_id ();\n+    case 3: return u.format3.get_value_name_id ();\n+    case 4: return u.format4.get_value_name_id ();\n+    default:return HB_OT_NAME_ID_INVALID;\n+    }\n+  }\n+\n@@ -181,1 +240,1 @@\n-    if (unlikely (c->check_struct (this)))\n+    if (unlikely (!c->check_struct (this)))\n@@ -186,5 +245,5 @@\n-    case 1:  return_trace (likely (u.format1.sanitize (c)));\n-    case 2:  return_trace (likely (u.format2.sanitize (c)));\n-    case 3:  return_trace (likely (u.format3.sanitize (c)));\n-    case 4:  return_trace (likely (u.format4.sanitize (c)));\n-    default: return_trace (true);\n+    case 1: return_trace (u.format1.sanitize (c));\n+    case 2: return_trace (u.format2.sanitize (c));\n+    case 3: return_trace (u.format3.sanitize (c));\n+    case 4: return_trace (u.format4.sanitize (c));\n+    default:return_trace (true);\n@@ -209,0 +268,4 @@\n+  int cmp (hb_tag_t key) const { return tag.cmp (key); }\n+\n+  hb_ot_name_id_t get_name_id () const { return nameID; }\n+\n@@ -230,0 +293,55 @@\n+  bool has_data () const { return version.to_int (); }\n+\n+  bool get_value (hb_tag_t tag, float *value) const\n+  {\n+    unsigned int axis_index;\n+    if (!get_design_axes ().lfind (tag, &axis_index)) return false;\n+\n+    hb_array_t<const OffsetTo<AxisValue>> axis_values = get_axis_value_offsets ();\n+    for (unsigned int i = 0; i < axis_values.length; i++)\n+    {\n+      const AxisValue& axis_value = this+axis_values[i];\n+      if (axis_value.get_axis_index () == axis_index)\n+      {\n+        if (value)\n+          *value = axis_value.get_value (axis_index);\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  unsigned get_design_axis_count () const { return designAxisCount; }\n+\n+  hb_ot_name_id_t get_axis_record_name_id (unsigned axis_record_index) const\n+  {\n+    if (unlikely (axis_record_index >= designAxisCount)) return HB_OT_NAME_ID_INVALID;\n+    const StatAxisRecord &axis_record = get_design_axes ()[axis_record_index];\n+    return axis_record.get_name_id ();\n+  }\n+\n+  unsigned get_axis_value_count () const { return axisValueCount; }\n+\n+  hb_ot_name_id_t get_axis_value_name_id (unsigned axis_value_index) const\n+  {\n+    if (unlikely (axis_value_index >= axisValueCount)) return HB_OT_NAME_ID_INVALID;\n+    const AxisValue &axis_value = (this + get_axis_value_offsets ()[axis_value_index]);\n+    return axis_value.get_value_name_id ();\n+  }\n+\n+  void collect_name_ids (hb_set_t *nameids_to_retain) const\n+  {\n+    if (!has_data ()) return;\n+\n+    + get_design_axes ()\n+    | hb_map (&StatAxisRecord::get_name_id)\n+    | hb_sink (nameids_to_retain)\n+    ;\n+\n+    + get_axis_value_offsets ()\n+    | hb_map (hb_add (&(this + offsetToAxisValueOffsets)))\n+    | hb_map (&AxisValue::get_value_name_id)\n+    | hb_sink (nameids_to_retain)\n+    ;\n+  }\n+\n@@ -234,2 +352,2 @@\n-                          majorVersion == 1 &&\n-                          minorVersion > 0 &&\n+                          version.major == 1 &&\n+                          version.minor > 0 &&\n@@ -241,4 +359,10 @@\n-  HBUINT16      majorVersion;   \/* Major version number of the style attributes\n-                                 * table — set to 1. *\/\n-  HBUINT16      minorVersion;   \/* Minor version number of the style attributes\n-                                 * table — set to 2. *\/\n+  hb_array_t<const StatAxisRecord> const get_design_axes () const\n+  { return (this+designAxesOffset).as_array (designAxisCount); }\n+\n+  hb_array_t<const OffsetTo<AxisValue>> const get_axis_value_offsets () const\n+  { return (this+offsetToAxisValueOffsets).as_array (axisValueCount); }\n+\n+\n+  protected:\n+  FixedVersion<>version;        \/* Version of the stat table\n+                                 * initially set to 0x00010002u *\/\n@@ -252,1 +376,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<StatAxisRecord> >\n+  LNNOffsetTo<UnsizedArrayOf<StatAxisRecord>>\n@@ -260,1 +384,1 @@\n-  LNNOffsetTo<UnsizedArrayOf<OffsetTo<AxisValue> > >\n+  LNNOffsetTo<UnsizedArrayOf<OffsetTo<AxisValue>>>\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-stat-table.hh","additions":145,"deletions":21,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -9,2 +9,2 @@\n- * <meta name=\"updated_at\" content=\"2018-09-07 07:45 PM\" \/>\n- * File-Date: 2018-08-08\n+ * <meta name=\"updated_at\" content=\"2019-05-22 06:05 PM\" \/>\n+ * File-Date: 2020-05-12\n@@ -17,1037 +17,1042 @@\n-  {\"aa\",        {HB_TAG('A','F','R',' ')}},     \/* Afar *\/\n-  {\"aae\",       {HB_TAG('S','Q','I',' ')}},     \/* Arbëreshë Albanian -> Albanian *\/\n-  {\"aao\",       {HB_TAG('A','R','A',' ')}},     \/* Algerian Saharan Arabic -> Arabic *\/\n-  {\"aat\",       {HB_TAG('S','Q','I',' ')}},     \/* Arvanitika Albanian -> Albanian *\/\n-  {\"ab\",        {HB_TAG('A','B','K',' ')}},     \/* Abkhazian *\/\n-  {\"abh\",       {HB_TAG('A','R','A',' ')}},     \/* Tajiki Arabic -> Arabic *\/\n-  {\"abq\",       {HB_TAG('A','B','A',' ')}},     \/* Abaza *\/\n-  {\"abv\",       {HB_TAG('A','R','A',' ')}},     \/* Baharna Arabic -> Arabic *\/\n-  {\"acf\",       {HB_TAG('F','A','N',' ')}},     \/* Saint Lucian Creole French -> French Antillean *\/\n-  {\"ach\",       {HB_TAG('A','C','H',' ')}},     \/* Acoli -> Acholi *\/\n-  {\"acm\",       {HB_TAG('A','R','A',' ')}},     \/* Mesopotamian Arabic -> Arabic *\/\n-  {\"acq\",       {HB_TAG('A','R','A',' ')}},     \/* Ta'izzi-Adeni Arabic -> Arabic *\/\n-  {\"acr\",       {HB_TAG('A','C','R',' ')}},     \/* Achi *\/\n-  {\"acw\",       {HB_TAG('A','R','A',' ')}},     \/* Hijazi Arabic -> Arabic *\/\n-  {\"acx\",       {HB_TAG('A','R','A',' ')}},     \/* Omani Arabic -> Arabic *\/\n-  {\"acy\",       {HB_TAG('A','R','A',' ')}},     \/* Cypriot Arabic -> Arabic *\/\n-  {\"ada\",       {HB_TAG('D','N','G',' ')}},     \/* Adangme -> Dangme *\/\n-  {\"adf\",       {HB_TAG('A','R','A',' ')}},     \/* Dhofari Arabic -> Arabic *\/\n-  {\"adp\",       {HB_TAG('D','Z','N',' ')}},     \/* Adap (retired code) -> Dzongkha *\/\n-  {\"ady\",       {HB_TAG('A','D','Y',' ')}},     \/* Adyghe *\/\n-  {\"aeb\",       {HB_TAG('A','R','A',' ')}},     \/* Tunisian Arabic -> Arabic *\/\n-  {\"aec\",       {HB_TAG('A','R','A',' ')}},     \/* Saidi Arabic -> Arabic *\/\n-  {\"af\",        {HB_TAG('A','F','K',' ')}},     \/* Afrikaans *\/\n-  {\"afb\",       {HB_TAG('A','R','A',' ')}},     \/* Gulf Arabic -> Arabic *\/\n-  {\"ahg\",       {HB_TAG('A','G','W',' ')}},     \/* Qimant -> Agaw *\/\n-  {\"aht\",       {HB_TAG('A','T','H',' ')}},     \/* Ahtena -> Athapaskan *\/\n-  {\"aii\",       {HB_TAG('S','W','A',' '),       \/* Assyrian Neo-Aramaic -> Swadaya Aramaic *\/\n-                 HB_TAG('S','Y','R',' ')}},     \/* Assyrian Neo-Aramaic -> Syriac *\/\n-  {\"aio\",       {HB_TAG('A','I','O',' ')}},     \/* Aiton *\/\n-  {\"aiw\",       {HB_TAG('A','R','I',' ')}},     \/* Aari *\/\n-  {\"ajp\",       {HB_TAG('A','R','A',' ')}},     \/* South Levantine Arabic -> Arabic *\/\n-  {\"ak\",        {HB_TAG('A','K','A',' '),       \/* Akan [macrolanguage] *\/\n-                 HB_TAG('T','W','I',' ')}},     \/* Akan [macrolanguage] -> Twi *\/\n-  {\"aln\",       {HB_TAG('S','Q','I',' ')}},     \/* Gheg Albanian -> Albanian *\/\n-  {\"als\",       {HB_TAG('S','Q','I',' ')}},     \/* Tosk Albanian -> Albanian *\/\n-  {\"alt\",       {HB_TAG('A','L','T',' ')}},     \/* Southern Altai -> Altai *\/\n-  {\"am\",        {HB_TAG('A','M','H',' ')}},     \/* Amharic *\/\n-  {\"amf\",       {HB_TAG('H','B','N',' ')}},     \/* Hamer-Banna -> Hammer-Banna *\/\n-  {\"amw\",       {HB_TAG('S','Y','R',' ')}},     \/* Western Neo-Aramaic -> Syriac *\/\n-  {\"an\",        {HB_TAG('A','R','G',' ')}},     \/* Aragonese *\/\n-  {\"ang\",       {HB_TAG('A','N','G',' ')}},     \/* Old English (ca. 450-1100) -> Anglo-Saxon *\/\n-  {\"apc\",       {HB_TAG('A','R','A',' ')}},     \/* North Levantine Arabic -> Arabic *\/\n-  {\"apd\",       {HB_TAG('A','R','A',' ')}},     \/* Sudanese Arabic -> Arabic *\/\n-  {\"apj\",       {HB_TAG('A','T','H',' ')}},     \/* Jicarilla Apache -> Athapaskan *\/\n-  {\"apk\",       {HB_TAG('A','T','H',' ')}},     \/* Kiowa Apache -> Athapaskan *\/\n-  {\"apl\",       {HB_TAG('A','T','H',' ')}},     \/* Lipan Apache -> Athapaskan *\/\n-  {\"apm\",       {HB_TAG('A','T','H',' ')}},     \/* Mescalero-Chiricahua Apache -> Athapaskan *\/\n-  {\"apw\",       {HB_TAG('A','T','H',' ')}},     \/* Western Apache -> Athapaskan *\/\n-  {\"ar\",        {HB_TAG('A','R','A',' ')}},     \/* Arabic [macrolanguage] *\/\n-  {\"arb\",       {HB_TAG('A','R','A',' ')}},     \/* Standard Arabic -> Arabic *\/\n-  {\"arn\",       {HB_TAG('M','A','P',' ')}},     \/* Mapudungun *\/\n-  {\"arq\",       {HB_TAG('A','R','A',' ')}},     \/* Algerian Arabic -> Arabic *\/\n-  {\"ars\",       {HB_TAG('A','R','A',' ')}},     \/* Najdi Arabic -> Arabic *\/\n-  {\"ary\",       {HB_TAG('M','O','R',' ')}},     \/* Moroccan Arabic -> Moroccan *\/\n-  {\"arz\",       {HB_TAG('A','R','A',' ')}},     \/* Egyptian Arabic -> Arabic *\/\n-  {\"as\",        {HB_TAG('A','S','M',' ')}},     \/* Assamese *\/\n-  {\"ast\",       {HB_TAG('A','S','T',' ')}},     \/* Asturian *\/\n-  {\"ath\",       {HB_TAG('A','T','H',' ')}},     \/* Athapascan [family] -> Athapaskan *\/\n-  {\"atj\",       {HB_TAG('R','C','R',' ')}},     \/* Atikamekw -> R-Cree *\/\n-  {\"atv\",       {HB_TAG('A','L','T',' ')}},     \/* Northern Altai -> Altai *\/\n-  {\"auz\",       {HB_TAG('A','R','A',' ')}},     \/* Uzbeki Arabic -> Arabic *\/\n-  {\"av\",        {HB_TAG('A','V','R',' ')}},     \/* Avaric -> Avar *\/\n-  {\"avl\",       {HB_TAG('A','R','A',' ')}},     \/* Eastern Egyptian Bedawi Arabic -> Arabic *\/\n-  {\"awa\",       {HB_TAG('A','W','A',' ')}},     \/* Awadhi *\/\n-  {\"ay\",        {HB_TAG('A','Y','M',' ')}},     \/* Aymara [macrolanguage] *\/\n-  {\"ayc\",       {HB_TAG('A','Y','M',' ')}},     \/* Southern Aymara -> Aymara *\/\n-  {\"ayh\",       {HB_TAG('A','R','A',' ')}},     \/* Hadrami Arabic -> Arabic *\/\n-  {\"ayl\",       {HB_TAG('A','R','A',' ')}},     \/* Libyan Arabic -> Arabic *\/\n-  {\"ayn\",       {HB_TAG('A','R','A',' ')}},     \/* Sanaani Arabic -> Arabic *\/\n-  {\"ayp\",       {HB_TAG('A','R','A',' ')}},     \/* North Mesopotamian Arabic -> Arabic *\/\n-  {\"ayr\",       {HB_TAG('A','Y','M',' ')}},     \/* Central Aymara -> Aymara *\/\n-  {\"az\",        {HB_TAG('A','Z','E',' ')}},     \/* Azerbaijani [macrolanguage] *\/\n-  {\"azb\",       {HB_TAG('A','Z','B',' ')}},     \/* South Azerbaijani -> Torki *\/\n-  {\"azj\",       {HB_TAG('A','Z','E',' ')}},     \/* North Azerbaijani -> Azerbaijani *\/\n-  {\"ba\",        {HB_TAG('B','S','H',' ')}},     \/* Bashkir *\/\n-  {\"bad\",       {HB_TAG('B','A','D','0')}},     \/* Banda [family] *\/\n-  {\"bai\",       {HB_TAG('B','M','L',' ')}},     \/* Bamileke [family] *\/\n-  {\"bal\",       {HB_TAG('B','L','I',' ')}},     \/* Baluchi [macrolanguage] *\/\n-  {\"ban\",       {HB_TAG('B','A','N',' ')}},     \/* Balinese *\/\n-  {\"bar\",       {HB_TAG('B','A','R',' ')}},     \/* Bavarian *\/\n-  {\"bbc\",       {HB_TAG('B','B','C',' ')}},     \/* Batak Toba *\/\n-  {\"bbz\",       {HB_TAG('A','R','A',' ')}},     \/* Babalia Creole Arabic -> Arabic *\/\n-  {\"bcc\",       {HB_TAG('B','L','I',' ')}},     \/* Southern Balochi -> Baluchi *\/\n-  {\"bci\",       {HB_TAG('B','A','U',' ')}},     \/* Baoulé -> Baulé *\/\n-  {\"bcl\",       {HB_TAG('B','I','K',' ')}},     \/* Central Bikol -> Bikol *\/\n-  {\"bcq\",       {HB_TAG('B','C','H',' ')}},     \/* Bench *\/\n-  {\"bcr\",       {HB_TAG('A','T','H',' ')}},     \/* Babine -> Athapaskan *\/\n-  {\"bdy\",       {HB_TAG('B','D','Y',' ')}},     \/* Bandjalang *\/\n-  {\"be\",        {HB_TAG('B','E','L',' ')}},     \/* Belarusian -> Belarussian *\/\n-  {\"bea\",       {HB_TAG('A','T','H',' ')}},     \/* Beaver -> Athapaskan *\/\n-  {\"beb\",       {HB_TAG('B','T','I',' ')}},     \/* Bebele -> Beti *\/\n-  {\"bem\",       {HB_TAG('B','E','M',' ')}},     \/* Bemba (Zambia) *\/\n-  {\"ber\",       {HB_TAG('B','B','R',' ')}},     \/* Berber [family] *\/\n-  {\"bfq\",       {HB_TAG('B','A','D',' ')}},     \/* Badaga *\/\n-  {\"bft\",       {HB_TAG('B','L','T',' ')}},     \/* Balti *\/\n-  {\"bfu\",       {HB_TAG('L','A','H',' ')}},     \/* Gahri -> Lahuli *\/\n-  {\"bfy\",       {HB_TAG('B','A','G',' ')}},     \/* Bagheli -> Baghelkhandi *\/\n-  {\"bg\",        {HB_TAG('B','G','R',' ')}},     \/* Bulgarian *\/\n-  {\"bgc\",       {HB_TAG('B','G','C',' ')}},     \/* Haryanvi *\/\n-  {\"bgn\",       {HB_TAG('B','L','I',' ')}},     \/* Western Balochi -> Baluchi *\/\n-  {\"bgp\",       {HB_TAG('B','L','I',' ')}},     \/* Eastern Balochi -> Baluchi *\/\n-  {\"bgq\",       {HB_TAG('B','G','Q',' ')}},     \/* Bagri *\/\n-  {\"bgr\",       {HB_TAG('Q','I','N',' ')}},     \/* Bawm Chin -> Chin *\/\n-  {\"bhb\",       {HB_TAG('B','H','I',' ')}},     \/* Bhili *\/\n-  {\"bhi\",       {HB_TAG('B','H','I',' ')}},     \/* Bhilali -> Bhili *\/\n-  {\"bhk\",       {HB_TAG('B','I','K',' ')}},     \/* Albay Bicolano (retired code) -> Bikol *\/\n-  {\"bho\",       {HB_TAG('B','H','O',' ')}},     \/* Bhojpuri *\/\n-  {\"bhr\",       {HB_TAG('M','L','G',' ')}},     \/* Bara Malagasy -> Malagasy *\/\n-  {\"bi\",        {HB_TAG('B','I','S',' ')}},     \/* Bislama *\/\n-  {\"bik\",       {HB_TAG('B','I','K',' ')}},     \/* Bikol [macrolanguage] *\/\n-  {\"bin\",       {HB_TAG('E','D','O',' ')}},     \/* Edo *\/\n-  {\"bjj\",       {HB_TAG('B','J','J',' ')}},     \/* Kanauji *\/\n-  {\"bjn\",       {HB_TAG('M','L','Y',' ')}},     \/* Banjar -> Malay *\/\n-  {\"bjq\",       {HB_TAG('M','L','G',' ')}},     \/* Southern Betsimisaraka Malagasy (retired code) -> Malagasy *\/\n-  {\"bjt\",       {HB_TAG('B','L','N',' ')}},     \/* Balanta-Ganja -> Balante *\/\n-  {\"bla\",       {HB_TAG('B','K','F',' ')}},     \/* Siksika -> Blackfoot *\/\n-  {\"ble\",       {HB_TAG('B','L','N',' ')}},     \/* Balanta-Kentohe -> Balante *\/\n-  {\"blk\",       {HB_TAG('B','L','K',' ')}},     \/* Pa'o Karen *\/\n-  {\"bln\",       {HB_TAG('B','I','K',' ')}},     \/* Southern Catanduanes Bikol -> Bikol *\/\n-  {\"bm\",        {HB_TAG('B','M','B',' ')}},     \/* Bambara (Bamanankan) *\/\n-  {\"bmm\",       {HB_TAG('M','L','G',' ')}},     \/* Northern Betsimisaraka Malagasy -> Malagasy *\/\n-  {\"bn\",        {HB_TAG('B','E','N',' ')}},     \/* Bengali *\/\n-  {\"bo\",        {HB_TAG('T','I','B',' ')}},     \/* Tibetan *\/\n-  {\"bpy\",       {HB_TAG('B','P','Y',' ')}},     \/* Bishnupriya -> Bishnupriya Manipuri *\/\n-  {\"bqi\",       {HB_TAG('L','R','C',' ')}},     \/* Bakhtiari -> Luri *\/\n-  {\"br\",        {HB_TAG('B','R','E',' ')}},     \/* Breton *\/\n-  {\"bra\",       {HB_TAG('B','R','I',' ')}},     \/* Braj -> Braj Bhasha *\/\n-  {\"brh\",       {HB_TAG('B','R','H',' ')}},     \/* Brahui *\/\n-  {\"brx\",       {HB_TAG('B','R','X',' ')}},     \/* Bodo (India) *\/\n-  {\"bs\",        {HB_TAG('B','O','S',' ')}},     \/* Bosnian *\/\n-  {\"bsk\",       {HB_TAG('B','S','K',' ')}},     \/* Burushaski *\/\n-  {\"btb\",       {HB_TAG('B','T','I',' ')}},     \/* Beti (Cameroon) (retired code) *\/\n-  {\"btj\",       {HB_TAG('M','L','Y',' ')}},     \/* Bacanese Malay -> Malay *\/\n-  {\"bto\",       {HB_TAG('B','I','K',' ')}},     \/* Rinconada Bikol -> Bikol *\/\n-  {\"bts\",       {HB_TAG('B','T','S',' ')}},     \/* Batak Simalungun *\/\n-  {\"bug\",       {HB_TAG('B','U','G',' ')}},     \/* Buginese -> Bugis *\/\n-  {\"bum\",       {HB_TAG('B','T','I',' ')}},     \/* Bulu (Cameroon) -> Beti *\/\n-  {\"bve\",       {HB_TAG('M','L','Y',' ')}},     \/* Berau Malay -> Malay *\/\n-  {\"bvu\",       {HB_TAG('M','L','Y',' ')}},     \/* Bukit Malay -> Malay *\/\n-  {\"bxk\",       {HB_TAG('L','U','H',' ')}},     \/* Bukusu -> Luyia *\/\n-  {\"bxp\",       {HB_TAG('B','T','I',' ')}},     \/* Bebil -> Beti *\/\n-  {\"bxr\",       {HB_TAG('R','B','U',' ')}},     \/* Russia Buriat -> Russian Buriat *\/\n-  {\"byn\",       {HB_TAG('B','I','L',' ')}},     \/* Bilin -> Bilen *\/\n-  {\"byv\",       {HB_TAG('B','Y','V',' ')}},     \/* Medumba *\/\n-  {\"bzc\",       {HB_TAG('M','L','G',' ')}},     \/* Southern Betsimisaraka Malagasy -> Malagasy *\/\n-  {\"ca\",        {HB_TAG('C','A','T',' ')}},     \/* Catalan *\/\n-  {\"caf\",       {HB_TAG('C','R','R',' '),       \/* Southern Carrier -> Carrier *\/\n-                 HB_TAG('A','T','H',' ')}},     \/* Southern Carrier -> Athapaskan *\/\n-  {\"cak\",       {HB_TAG('C','A','K',' ')}},     \/* Kaqchikel *\/\n-  {\"cbk\",       {HB_TAG('C','B','K',' ')}},     \/* Chavacano -> Zamboanga Chavacano *\/\n-  {\"cbl\",       {HB_TAG('Q','I','N',' ')}},     \/* Bualkhaw Chin -> Chin *\/\n-  {\"cco\",       {HB_TAG('C','C','H','N')}},     \/* Comaltepec Chinantec -> Chinantec *\/\n-  {\"ccq\",       {HB_TAG('A','R','K',' ')}},     \/* Chaungtha (retired code) -> Rakhine *\/\n-  {\"cdo\",       {HB_TAG('Z','H','S',' ')}},     \/* Min Dong Chinese -> Chinese Simplified *\/\n-  {\"ce\",        {HB_TAG('C','H','E',' ')}},     \/* Chechen *\/\n-  {\"ceb\",       {HB_TAG('C','E','B',' ')}},     \/* Cebuano *\/\n-  {\"cfm\",       {HB_TAG('H','A','L',' ')}},     \/* Halam (Falam Chin) *\/\n-  {\"cgg\",       {HB_TAG('C','G','G',' ')}},     \/* Chiga *\/\n-  {\"ch\",        {HB_TAG('C','H','A',' ')}},     \/* Chamorro *\/\n-  {\"chj\",       {HB_TAG('C','C','H','N')}},     \/* Ojitlán Chinantec -> Chinantec *\/\n-  {\"chk\",       {HB_TAG('C','H','K','0')}},     \/* Chuukese *\/\n-  {\"cho\",       {HB_TAG('C','H','O',' ')}},     \/* Choctaw *\/\n-  {\"chp\",       {HB_TAG('C','H','P',' '),       \/* Chipewyan *\/\n-                 HB_TAG('S','A','Y',' '),       \/* Chipewyan -> Sayisi *\/\n-                 HB_TAG('A','T','H',' ')}},     \/* Chipewyan -> Athapaskan *\/\n-  {\"chq\",       {HB_TAG('C','C','H','N')}},     \/* Quiotepec Chinantec -> Chinantec *\/\n-  {\"chr\",       {HB_TAG('C','H','R',' ')}},     \/* Cherokee *\/\n-  {\"chy\",       {HB_TAG('C','H','Y',' ')}},     \/* Cheyenne *\/\n-  {\"chz\",       {HB_TAG('C','C','H','N')}},     \/* Ozumacín Chinantec -> Chinantec *\/\n-  {\"ciw\",       {HB_TAG('O','J','B',' ')}},     \/* Chippewa -> Ojibway *\/\n-  {\"cja\",       {HB_TAG('C','J','A',' ')}},     \/* Western Cham *\/\n-  {\"cjm\",       {HB_TAG('C','J','M',' ')}},     \/* Eastern Cham *\/\n-  {\"cjy\",       {HB_TAG('Z','H','S',' ')}},     \/* Jinyu Chinese -> Chinese Simplified *\/\n-  {\"cka\",       {HB_TAG('Q','I','N',' ')}},     \/* Khumi Awa Chin (retired code) -> Chin *\/\n-  {\"ckb\",       {HB_TAG('K','U','R',' ')}},     \/* Central Kurdish -> Kurdish *\/\n-  {\"ckt\",       {HB_TAG('C','H','K',' ')}},     \/* Chukot -> Chukchi *\/\n-  {\"clc\",       {HB_TAG('A','T','H',' ')}},     \/* Chilcotin -> Athapaskan *\/\n-  {\"cld\",       {HB_TAG('S','Y','R',' ')}},     \/* Chaldean Neo-Aramaic -> Syriac *\/\n-  {\"cle\",       {HB_TAG('C','C','H','N')}},     \/* Lealao Chinantec -> Chinantec *\/\n-  {\"cmn\",       {HB_TAG('Z','H','S',' ')}},     \/* Mandarin Chinese -> Chinese Simplified *\/\n-  {\"cmr\",       {HB_TAG('Q','I','N',' ')}},     \/* Mro-Khimi Chin -> Chin *\/\n-  {\"cnb\",       {HB_TAG('Q','I','N',' ')}},     \/* Chinbon Chin -> Chin *\/\n-  {\"cnh\",       {HB_TAG('Q','I','N',' ')}},     \/* Hakha Chin -> Chin *\/\n-  {\"cnk\",       {HB_TAG('Q','I','N',' ')}},     \/* Khumi Chin -> Chin *\/\n-  {\"cnl\",       {HB_TAG('C','C','H','N')}},     \/* Lalana Chinantec -> Chinantec *\/\n-  {\"cnt\",       {HB_TAG('C','C','H','N')}},     \/* Tepetotutla Chinantec -> Chinantec *\/\n-  {\"cnw\",       {HB_TAG('Q','I','N',' ')}},     \/* Ngawn Chin -> Chin *\/\n-  {\"co\",        {HB_TAG('C','O','S',' ')}},     \/* Corsican *\/\n-  {\"coa\",       {HB_TAG('M','L','Y',' ')}},     \/* Cocos Islands Malay -> Malay *\/\n-  {\"cop\",       {HB_TAG('C','O','P',' ')}},     \/* Coptic *\/\n-  {\"coq\",       {HB_TAG('A','T','H',' ')}},     \/* Coquille -> Athapaskan *\/\n-  {\"cpa\",       {HB_TAG('C','C','H','N')}},     \/* Palantla Chinantec -> Chinantec *\/\n-  {\"cpe\",       {HB_TAG('C','P','P',' ')}},     \/* English-based creoles and pidgins [family] -> Creoles *\/\n-  {\"cpf\",       {HB_TAG('C','P','P',' ')}},     \/* French-based creoles and pidgins [family] -> Creoles *\/\n-  {\"cpp\",       {HB_TAG('C','P','P',' ')}},     \/* Portuguese-based creoles and pidgins [family] -> Creoles *\/\n-  {\"cpx\",       {HB_TAG('Z','H','S',' ')}},     \/* Pu-Xian Chinese -> Chinese Simplified *\/\n-  {\"cqd\",       {HB_TAG('H','M','N',' ')}},     \/* Chuanqiandian Cluster Miao -> Hmong *\/\n-  {\"cqu\",       {HB_TAG('Q','U','H',' ')}},     \/* Chilean Quechua (retired code) -> Quechua (Bolivia) *\/\n-  {\"cr\",        {HB_TAG('C','R','E',' '),       \/* Cree [macrolanguage] *\/\n-                 HB_TAG('Y','C','R',' ')}},     \/* Cree [macrolanguage] -> Y-Cree *\/\n-  {\"crh\",       {HB_TAG('C','R','T',' ')}},     \/* Crimean Tatar *\/\n-  {\"crj\",       {HB_TAG('E','C','R',' ')}},     \/* Southern East Cree -> Eastern Cree *\/\n-  {\"crk\",       {HB_TAG('W','C','R',' ')}},     \/* Plains Cree -> West-Cree *\/\n-  {\"crl\",       {HB_TAG('E','C','R',' ')}},     \/* Northern East Cree -> Eastern Cree *\/\n-  {\"crm\",       {HB_TAG('M','C','R',' '),       \/* Moose Cree *\/\n-                 HB_TAG('L','C','R',' ')}},     \/* Moose Cree -> L-Cree *\/\n-  {\"crp\",       {HB_TAG('C','P','P',' ')}},     \/* Creoles and pidgins [family] -> Creoles *\/\n-  {\"crx\",       {HB_TAG('C','R','R',' '),       \/* Carrier *\/\n-                 HB_TAG('A','T','H',' ')}},     \/* Carrier -> Athapaskan *\/\n-  {\"cs\",        {HB_TAG('C','S','Y',' ')}},     \/* Czech *\/\n-  {\"csa\",       {HB_TAG('C','C','H','N')}},     \/* Chiltepec Chinantec -> Chinantec *\/\n-  {\"csb\",       {HB_TAG('C','S','B',' ')}},     \/* Kashubian *\/\n-  {\"csh\",       {HB_TAG('Q','I','N',' ')}},     \/* Asho Chin -> Chin *\/\n-  {\"cso\",       {HB_TAG('C','C','H','N')}},     \/* Sochiapam Chinantec -> Chinantec *\/\n-  {\"csw\",       {HB_TAG('N','C','R',' '),       \/* Swampy Cree -> N-Cree *\/\n-                 HB_TAG('N','H','C',' ')}},     \/* Swampy Cree -> Norway House Cree *\/\n-  {\"csy\",       {HB_TAG('Q','I','N',' ')}},     \/* Siyin Chin -> Chin *\/\n-  {\"ctc\",       {HB_TAG('A','T','H',' ')}},     \/* Chetco -> Athapaskan *\/\n-  {\"ctd\",       {HB_TAG('Q','I','N',' ')}},     \/* Tedim Chin -> Chin *\/\n-  {\"cte\",       {HB_TAG('C','C','H','N')}},     \/* Tepinapa Chinantec -> Chinantec *\/\n-  {\"ctg\",       {HB_TAG('C','T','G',' ')}},     \/* Chittagonian *\/\n-  {\"ctl\",       {HB_TAG('C','C','H','N')}},     \/* Tlacoatzintepec Chinantec -> Chinantec *\/\n-  {\"cts\",       {HB_TAG('B','I','K',' ')}},     \/* Northern Catanduanes Bikol -> Bikol *\/\n-  {\"cu\",        {HB_TAG('C','S','L',' ')}},     \/* Church Slavonic *\/\n-  {\"cuc\",       {HB_TAG('C','C','H','N')}},     \/* Usila Chinantec -> Chinantec *\/\n-  {\"cuk\",       {HB_TAG('C','U','K',' ')}},     \/* San Blas Kuna *\/\n-  {\"cv\",        {HB_TAG('C','H','U',' ')}},     \/* Chuvash *\/\n-  {\"cvn\",       {HB_TAG('C','C','H','N')}},     \/* Valle Nacional Chinantec -> Chinantec *\/\n-  {\"cwd\",       {HB_TAG('D','C','R',' '),       \/* Woods Cree *\/\n-                 HB_TAG('T','C','R',' ')}},     \/* Woods Cree -> TH-Cree *\/\n-  {\"cy\",        {HB_TAG('W','E','L',' ')}},     \/* Welsh *\/\n-  {\"czh\",       {HB_TAG('Z','H','S',' ')}},     \/* Huizhou Chinese -> Chinese Simplified *\/\n-  {\"czo\",       {HB_TAG('Z','H','S',' ')}},     \/* Min Zhong Chinese -> Chinese Simplified *\/\n-  {\"czt\",       {HB_TAG('Q','I','N',' ')}},     \/* Zotung Chin -> Chin *\/\n-  {\"da\",        {HB_TAG('D','A','N',' ')}},     \/* Danish *\/\n-  {\"dao\",       {HB_TAG('Q','I','N',' ')}},     \/* Daai Chin -> Chin *\/\n-  {\"dap\",       {HB_TAG('N','I','S',' ')}},     \/* Nisi (India) (retired code) *\/\n-  {\"dar\",       {HB_TAG('D','A','R',' ')}},     \/* Dargwa *\/\n-  {\"dax\",       {HB_TAG('D','A','X',' ')}},     \/* Dayi *\/\n-  {\"de\",        {HB_TAG('D','E','U',' ')}},     \/* German *\/\n-  {\"den\",       {HB_TAG('S','L','A',' '),       \/* Slave (Athapascan) [macrolanguage] -> Slavey *\/\n-                 HB_TAG('A','T','H',' ')}},     \/* Slave (Athapascan) [macrolanguage] -> Athapaskan *\/\n-  {\"dgo\",       {HB_TAG('D','G','O',' ')}},     \/* Dogri *\/\n-  {\"dgr\",       {HB_TAG('A','T','H',' ')}},     \/* Dogrib -> Athapaskan *\/\n-  {\"dhd\",       {HB_TAG('M','A','W',' ')}},     \/* Dhundari -> Marwari *\/\n-  {\"dhg\",       {HB_TAG('D','H','G',' ')}},     \/* Dhangu *\/\n-  {\"dib\",       {HB_TAG('D','N','K',' ')}},     \/* South Central Dinka -> Dinka *\/\n-  {\"dik\",       {HB_TAG('D','N','K',' ')}},     \/* Southwestern Dinka -> Dinka *\/\n-  {\"din\",       {HB_TAG('D','N','K',' ')}},     \/* Dinka [macrolanguage] *\/\n-  {\"dip\",       {HB_TAG('D','N','K',' ')}},     \/* Northeastern Dinka -> Dinka *\/\n-  {\"diq\",       {HB_TAG('D','I','Q',' ')}},     \/* Dimli *\/\n-  {\"diw\",       {HB_TAG('D','N','K',' ')}},     \/* Northwestern Dinka -> Dinka *\/\n-  {\"dje\",       {HB_TAG('D','J','R',' ')}},     \/* Zarma *\/\n-  {\"djr\",       {HB_TAG('D','J','R','0')}},     \/* Djambarrpuyngu *\/\n-  {\"dks\",       {HB_TAG('D','N','K',' ')}},     \/* Southeastern Dinka -> Dinka *\/\n-  {\"dng\",       {HB_TAG('D','U','N',' ')}},     \/* Dungan *\/\n-  {\"dnj\",       {HB_TAG('D','N','J',' ')}},     \/* Dan *\/\n-  {\"doi\",       {HB_TAG('D','G','R',' ')}},     \/* Dogri [macrolanguage] *\/\n-  {\"drh\",       {HB_TAG('M','N','G',' ')}},     \/* Darkhat (retired code) -> Mongolian *\/\n-  {\"drw\",       {HB_TAG('D','R','I',' ')}},     \/* Darwazi (retired code) -> Dari *\/\n-  {\"dsb\",       {HB_TAG('L','S','B',' ')}},     \/* Lower Sorbian *\/\n-  {\"dty\",       {HB_TAG('N','E','P',' ')}},     \/* Dotyali -> Nepali *\/\n-  {\"duj\",       {HB_TAG('D','U','J',' ')}},     \/* Dhuwal (retired code) *\/\n-  {\"dup\",       {HB_TAG('M','L','Y',' ')}},     \/* Duano -> Malay *\/\n-  {\"dv\",        {HB_TAG('D','I','V',' '),       \/* Divehi (Dhivehi, Maldivian) *\/\n-                 HB_TAG('D','H','V',' ')}},     \/* Divehi (Dhivehi, Maldivian) (deprecated) *\/\n-  {\"dwu\",       {HB_TAG('D','U','J',' ')}},     \/* Dhuwal *\/\n-  {\"dwy\",       {HB_TAG('D','U','J',' ')}},     \/* Dhuwaya -> Dhuwal *\/\n-  {\"dyu\",       {HB_TAG('J','U','L',' ')}},     \/* Dyula -> Jula *\/\n-  {\"dz\",        {HB_TAG('D','Z','N',' ')}},     \/* Dzongkha *\/\n-  {\"ee\",        {HB_TAG('E','W','E',' ')}},     \/* Ewe *\/\n-  {\"efi\",       {HB_TAG('E','F','I',' ')}},     \/* Efik *\/\n-  {\"ekk\",       {HB_TAG('E','T','I',' ')}},     \/* Standard Estonian -> Estonian *\/\n-  {\"el\",        {HB_TAG('E','L','L',' ')}},     \/* Modern Greek (1453-) -> Greek *\/\n-  {\"emk\",       {HB_TAG('E','M','K',' '),       \/* Eastern Maninkakan *\/\n-                 HB_TAG('M','N','K',' ')}},     \/* Eastern Maninkakan -> Maninka *\/\n-  {\"en\",        {HB_TAG('E','N','G',' ')}},     \/* English *\/\n-  {\"enb\",       {HB_TAG('K','A','L',' ')}},     \/* Markweeta -> Kalenjin *\/\n-  {\"enf\",       {HB_TAG('F','N','E',' ')}},     \/* Forest Enets -> Forest Nenets *\/\n-  {\"enh\",       {HB_TAG('T','N','E',' ')}},     \/* Tundra Enets -> Tundra Nenets *\/\n-  {\"eo\",        {HB_TAG('N','T','O',' ')}},     \/* Esperanto *\/\n-  {\"es\",        {HB_TAG('E','S','P',' ')}},     \/* Spanish *\/\n-  {\"esg\",       {HB_TAG('G','O','N',' ')}},     \/* Aheri Gondi -> Gondi *\/\n-  {\"esi\",       {HB_TAG('I','P','K',' ')}},     \/* North Alaskan Inupiatun -> Inupiat *\/\n-  {\"esk\",       {HB_TAG('I','P','K',' ')}},     \/* Northwest Alaska Inupiatun -> Inupiat *\/\n-  {\"esu\",       {HB_TAG('E','S','U',' ')}},     \/* Central Yupik *\/\n-  {\"et\",        {HB_TAG('E','T','I',' ')}},     \/* Estonian [macrolanguage] *\/\n-  {\"eto\",       {HB_TAG('B','T','I',' ')}},     \/* Eton (Cameroon) -> Beti *\/\n-  {\"eu\",        {HB_TAG('E','U','Q',' ')}},     \/* Basque *\/\n-  {\"eve\",       {HB_TAG('E','V','N',' ')}},     \/* Even *\/\n-  {\"evn\",       {HB_TAG('E','V','K',' ')}},     \/* Evenki *\/\n-  {\"ewo\",       {HB_TAG('B','T','I',' ')}},     \/* Ewondo -> Beti *\/\n-  {\"eyo\",       {HB_TAG('K','A','L',' ')}},     \/* Keiyo -> Kalenjin *\/\n-  {\"fa\",        {HB_TAG('F','A','R',' ')}},     \/* Persian [macrolanguage] *\/\n-  {\"fan\",       {HB_TAG('F','A','N','0')}},     \/* Fang (Equatorial Guinea) *\/\n-  {\"fat\",       {HB_TAG('F','A','T',' ')}},     \/* Fanti *\/\n-  {\"fbl\",       {HB_TAG('B','I','K',' ')}},     \/* West Albay Bikol -> Bikol *\/\n-  {\"ff\",        {HB_TAG('F','U','L',' ')}},     \/* Fulah [macrolanguage] *\/\n-  {\"ffm\",       {HB_TAG('F','U','L',' ')}},     \/* Maasina Fulfulde -> Fulah *\/\n-  {\"fi\",        {HB_TAG('F','I','N',' ')}},     \/* Finnish *\/\n-  {\"fil\",       {HB_TAG('P','I','L',' ')}},     \/* Filipino *\/\n-  {\"fj\",        {HB_TAG('F','J','I',' ')}},     \/* Fijian *\/\n-  {\"flm\",       {HB_TAG('H','A','L',' '),       \/* Halam (Falam Chin) (retired code) *\/\n-                 HB_TAG('Q','I','N',' ')}},     \/* Falam Chin (retired code) -> Chin *\/\n-  {\"fmp\",       {HB_TAG('F','M','P',' ')}},     \/* Fe'fe' *\/\n-  {\"fo\",        {HB_TAG('F','O','S',' ')}},     \/* Faroese *\/\n-  {\"fon\",       {HB_TAG('F','O','N',' ')}},     \/* Fon *\/\n-  {\"fr\",        {HB_TAG('F','R','A',' ')}},     \/* French *\/\n-  {\"frc\",       {HB_TAG('F','R','C',' ')}},     \/* Cajun French *\/\n-  {\"frp\",       {HB_TAG('F','R','P',' ')}},     \/* Arpitan *\/\n-  {\"fub\",       {HB_TAG('F','U','L',' ')}},     \/* Adamawa Fulfulde -> Fulah *\/\n-  {\"fuc\",       {HB_TAG('F','U','L',' ')}},     \/* Pulaar -> Fulah *\/\n-  {\"fue\",       {HB_TAG('F','U','L',' ')}},     \/* Borgu Fulfulde -> Fulah *\/\n-  {\"fuf\",       {HB_TAG('F','T','A',' ')}},     \/* Pular -> Futa *\/\n-  {\"fuh\",       {HB_TAG('F','U','L',' ')}},     \/* Western Niger Fulfulde -> Fulah *\/\n-  {\"fui\",       {HB_TAG('F','U','L',' ')}},     \/* Bagirmi Fulfulde -> Fulah *\/\n-  {\"fuq\",       {HB_TAG('F','U','L',' ')}},     \/* Central-Eastern Niger Fulfulde -> Fulah *\/\n-  {\"fur\",       {HB_TAG('F','R','L',' ')}},     \/* Friulian *\/\n-  {\"fuv\",       {HB_TAG('F','U','V',' ')}},     \/* Nigerian Fulfulde *\/\n-  {\"fy\",        {HB_TAG('F','R','I',' ')}},     \/* Western Frisian -> Frisian *\/\n-  {\"ga\",        {HB_TAG('I','R','I',' ')}},     \/* Irish *\/\n-  {\"gaa\",       {HB_TAG('G','A','D',' ')}},     \/* Ga *\/\n-  {\"gag\",       {HB_TAG('G','A','G',' ')}},     \/* Gagauz *\/\n-  {\"gan\",       {HB_TAG('Z','H','S',' ')}},     \/* Gan Chinese -> Chinese Simplified *\/\n-  {\"gax\",       {HB_TAG('O','R','O',' ')}},     \/* Borana-Arsi-Guji Oromo -> Oromo *\/\n-  {\"gaz\",       {HB_TAG('O','R','O',' ')}},     \/* West Central Oromo -> Oromo *\/\n-  {\"gbm\",       {HB_TAG('G','A','W',' ')}},     \/* Garhwali *\/\n-  {\"gce\",       {HB_TAG('A','T','H',' ')}},     \/* Galice -> Athapaskan *\/\n-  {\"gd\",        {HB_TAG('G','A','E',' ')}},     \/* Scottish Gaelic (Gaelic) *\/\n-  {\"gda\",       {HB_TAG('R','A','J',' ')}},     \/* Gade Lohar -> Rajasthani *\/\n-  {\"gez\",       {HB_TAG('G','E','Z',' ')}},     \/* Geez *\/\n-  {\"ggo\",       {HB_TAG('G','O','N',' ')}},     \/* Southern Gondi (retired code) -> Gondi *\/\n-  {\"gih\",       {HB_TAG('G','I','H',' ')}},     \/* Githabul *\/\n-  {\"gil\",       {HB_TAG('G','I','L','0')}},     \/* Kiribati (Gilbertese) *\/\n-  {\"gju\",       {HB_TAG('R','A','J',' ')}},     \/* Gujari -> Rajasthani *\/\n-  {\"gkp\",       {HB_TAG('G','K','P',' ')}},     \/* Guinea Kpelle -> Kpelle (Guinea) *\/\n-  {\"gl\",        {HB_TAG('G','A','L',' ')}},     \/* Galician *\/\n-  {\"gld\",       {HB_TAG('N','A','N',' ')}},     \/* Nanai *\/\n-  {\"glk\",       {HB_TAG('G','L','K',' ')}},     \/* Gilaki *\/\n-  {\"gn\",        {HB_TAG('G','U','A',' ')}},     \/* Guarani [macrolanguage] *\/\n-  {\"gnn\",       {HB_TAG('G','N','N',' ')}},     \/* Gumatj *\/\n-  {\"gno\",       {HB_TAG('G','O','N',' ')}},     \/* Northern Gondi -> Gondi *\/\n-  {\"gnw\",       {HB_TAG('G','U','A',' ')}},     \/* Western Bolivian Guaraní -> Guarani *\/\n-  {\"gog\",       {HB_TAG('G','O','G',' ')}},     \/* Gogo *\/\n-  {\"gom\",       {HB_TAG('K','O','K',' ')}},     \/* Goan Konkani -> Konkani *\/\n-  {\"gon\",       {HB_TAG('G','O','N',' ')}},     \/* Gondi [macrolanguage] *\/\n-  {\"grt\",       {HB_TAG('G','R','O',' ')}},     \/* Garo *\/\n-  {\"gru\",       {HB_TAG('S','O','G',' ')}},     \/* Kistane -> Sodo Gurage *\/\n-  {\"gsw\",       {HB_TAG('A','L','S',' ')}},     \/* Alsatian *\/\n-  {\"gu\",        {HB_TAG('G','U','J',' ')}},     \/* Gujarati *\/\n-  {\"guc\",       {HB_TAG('G','U','C',' ')}},     \/* Wayuu *\/\n-  {\"guf\",       {HB_TAG('G','U','F',' ')}},     \/* Gupapuyngu *\/\n-  {\"gug\",       {HB_TAG('G','U','A',' ')}},     \/* Paraguayan Guaraní -> Guarani *\/\n-  {\"gui\",       {HB_TAG('G','U','A',' ')}},     \/* Eastern Bolivian Guaraní -> Guarani *\/\n-  {\"guk\",       {HB_TAG('G','M','Z',' '),       \/* Gumuz *\/\n-                 HB_TAG('G','U','K',' ')}},     \/* Gumuz (SIL fonts) *\/\n-  {\"gun\",       {HB_TAG('G','U','A',' ')}},     \/* Mbyá Guaraní -> Guarani *\/\n-  {\"guz\",       {HB_TAG('G','U','Z',' ')}},     \/* Gusii *\/\n-  {\"gv\",        {HB_TAG('M','N','X',' ')}},     \/* Manx *\/\n-  {\"gwi\",       {HB_TAG('A','T','H',' ')}},     \/* Gwichʼin -> Athapaskan *\/\n-  {\"ha\",        {HB_TAG('H','A','U',' ')}},     \/* Hausa *\/\n-  {\"haa\",       {HB_TAG('A','T','H',' ')}},     \/* Han -> Athapaskan *\/\n-  {\"hae\",       {HB_TAG('O','R','O',' ')}},     \/* Eastern Oromo -> Oromo *\/\n-  {\"hak\",       {HB_TAG('Z','H','S',' ')}},     \/* Hakka Chinese -> Chinese Simplified *\/\n-  {\"har\",       {HB_TAG('H','R','I',' ')}},     \/* Harari *\/\n-  {\"haw\",       {HB_TAG('H','A','W',' ')}},     \/* Hawaiian *\/\n-  {\"hay\",       {HB_TAG('H','A','Y',' ')}},     \/* Haya *\/\n-  {\"haz\",       {HB_TAG('H','A','Z',' ')}},     \/* Hazaragi *\/\n-  {\"he\",        {HB_TAG('I','W','R',' ')}},     \/* Hebrew *\/\n-  {\"hea\",       {HB_TAG('H','M','N',' ')}},     \/* Northern Qiandong Miao -> Hmong *\/\n-  {\"hi\",        {HB_TAG('H','I','N',' ')}},     \/* Hindi *\/\n-  {\"hil\",       {HB_TAG('H','I','L',' ')}},     \/* Hiligaynon *\/\n-  {\"hji\",       {HB_TAG('M','L','Y',' ')}},     \/* Haji -> Malay *\/\n-  {\"hlt\",       {HB_TAG('Q','I','N',' ')}},     \/* Matu Chin -> Chin *\/\n-  {\"hma\",       {HB_TAG('H','M','N',' ')}},     \/* Southern Mashan Hmong -> Hmong *\/\n-  {\"hmc\",       {HB_TAG('H','M','N',' ')}},     \/* Central Huishui Hmong -> Hmong *\/\n-  {\"hmd\",       {HB_TAG('H','M','N',' ')}},     \/* Large Flowery Miao -> Hmong *\/\n-  {\"hme\",       {HB_TAG('H','M','N',' ')}},     \/* Eastern Huishui Hmong -> Hmong *\/\n-  {\"hmg\",       {HB_TAG('H','M','N',' ')}},     \/* Southwestern Guiyang Hmong -> Hmong *\/\n-  {\"hmh\",       {HB_TAG('H','M','N',' ')}},     \/* Southwestern Huishui Hmong -> Hmong *\/\n-  {\"hmi\",       {HB_TAG('H','M','N',' ')}},     \/* Northern Huishui Hmong -> Hmong *\/\n-  {\"hmj\",       {HB_TAG('H','M','N',' ')}},     \/* Ge -> Hmong *\/\n-  {\"hml\",       {HB_TAG('H','M','N',' ')}},     \/* Luopohe Hmong -> Hmong *\/\n-  {\"hmm\",       {HB_TAG('H','M','N',' ')}},     \/* Central Mashan Hmong -> Hmong *\/\n-  {\"hmn\",       {HB_TAG('H','M','N',' ')}},     \/* Hmong [macrolanguage] *\/\n-  {\"hmp\",       {HB_TAG('H','M','N',' ')}},     \/* Northern Mashan Hmong -> Hmong *\/\n-  {\"hmq\",       {HB_TAG('H','M','N',' ')}},     \/* Eastern Qiandong Miao -> Hmong *\/\n-  {\"hms\",       {HB_TAG('H','M','N',' ')}},     \/* Southern Qiandong Miao -> Hmong *\/\n-  {\"hmw\",       {HB_TAG('H','M','N',' ')}},     \/* Western Mashan Hmong -> Hmong *\/\n-  {\"hmy\",       {HB_TAG('H','M','N',' ')}},     \/* Southern Guiyang Hmong -> Hmong *\/\n-  {\"hmz\",       {HB_TAG('H','M','N',' ')}},     \/* Hmong Shua -> Hmong *\/\n-  {\"hnd\",       {HB_TAG('H','N','D',' ')}},     \/* Southern Hindko -> Hindko *\/\n-  {\"hne\",       {HB_TAG('C','H','H',' ')}},     \/* Chhattisgarhi -> Chattisgarhi *\/\n-  {\"hnj\",       {HB_TAG('H','M','N',' ')}},     \/* Hmong Njua -> Hmong *\/\n-  {\"hno\",       {HB_TAG('H','N','D',' ')}},     \/* Northern Hindko -> Hindko *\/\n-  {\"ho\",        {HB_TAG('H','M','O',' ')}},     \/* Hiri Motu *\/\n-  {\"hoc\",       {HB_TAG('H','O',' ',' ')}},     \/* Ho *\/\n-  {\"hoi\",       {HB_TAG('A','T','H',' ')}},     \/* Holikachuk -> Athapaskan *\/\n-  {\"hoj\",       {HB_TAG('H','A','R',' ')}},     \/* Hadothi -> Harauti *\/\n-  {\"hr\",        {HB_TAG('H','R','V',' ')}},     \/* Croatian *\/\n-  {\"hrm\",       {HB_TAG('H','M','N',' ')}},     \/* Horned Miao -> Hmong *\/\n-  {\"hsb\",       {HB_TAG('U','S','B',' ')}},     \/* Upper Sorbian *\/\n-  {\"hsn\",       {HB_TAG('Z','H','S',' ')}},     \/* Xiang Chinese -> Chinese Simplified *\/\n-  {\"ht\",        {HB_TAG('H','A','I',' ')}},     \/* Haitian (Haitian Creole) *\/\n-  {\"hu\",        {HB_TAG('H','U','N',' ')}},     \/* Hungarian *\/\n-  {\"huj\",       {HB_TAG('H','M','N',' ')}},     \/* Northern Guiyang Hmong -> Hmong *\/\n-  {\"hup\",       {HB_TAG('A','T','H',' ')}},     \/* Hupa -> Athapaskan *\/\n-  {\"hy\",        {HB_TAG('H','Y','E','0'),       \/* Armenian -> Armenian East *\/\n-                 HB_TAG('H','Y','E',' ')}},     \/* Armenian *\/\n-  {\"hyw\",       {HB_TAG('H','Y','E',' ')}},     \/* Western Armenian -> Armenian *\/\n-  {\"hz\",        {HB_TAG('H','E','R',' ')}},     \/* Herero *\/\n-  {\"ia\",        {HB_TAG('I','N','A',' ')}},     \/* Interlingua (International Auxiliary Language Association) *\/\n-  {\"iba\",       {HB_TAG('I','B','A',' ')}},     \/* Iban *\/\n-  {\"ibb\",       {HB_TAG('I','B','B',' ')}},     \/* Ibibio *\/\n-  {\"id\",        {HB_TAG('I','N','D',' ')}},     \/* Indonesian *\/\n-  {\"ida\",       {HB_TAG('L','U','H',' ')}},     \/* Idakho-Isukha-Tiriki -> Luyia *\/\n-  {\"ie\",        {HB_TAG('I','L','E',' ')}},     \/* Interlingue *\/\n-  {\"ig\",        {HB_TAG('I','B','O',' ')}},     \/* Igbo *\/\n-  {\"igb\",       {HB_TAG('E','B','I',' ')}},     \/* Ebira *\/\n-  {\"ii\",        {HB_TAG('Y','I','M',' ')}},     \/* Sichuan Yi -> Yi Modern *\/\n-  {\"ijc\",       {HB_TAG('I','J','O',' ')}},     \/* Izon -> Ijo *\/\n-  {\"ijo\",       {HB_TAG('I','J','O',' ')}},     \/* Ijo [family] *\/\n-  {\"ik\",        {HB_TAG('I','P','K',' ')}},     \/* Inupiaq [macrolanguage] -> Inupiat *\/\n-  {\"ike\",       {HB_TAG('I','N','U',' ')}},     \/* Eastern Canadian Inuktitut -> Inuktitut *\/\n-  {\"ikt\",       {HB_TAG('I','N','U',' ')}},     \/* Inuinnaqtun -> Inuktitut *\/\n-  {\"ilo\",       {HB_TAG('I','L','O',' ')}},     \/* Iloko -> Ilokano *\/\n-  {\"in\",        {HB_TAG('I','N','D',' ')}},     \/* Indonesian (retired code) *\/\n-  {\"ing\",       {HB_TAG('A','T','H',' ')}},     \/* Degexit'an -> Athapaskan *\/\n-  {\"inh\",       {HB_TAG('I','N','G',' ')}},     \/* Ingush *\/\n-  {\"io\",        {HB_TAG('I','D','O',' ')}},     \/* Ido *\/\n-  {\"is\",        {HB_TAG('I','S','L',' ')}},     \/* Icelandic *\/\n-  {\"it\",        {HB_TAG('I','T','A',' ')}},     \/* Italian *\/\n-  {\"iu\",        {HB_TAG('I','N','U',' ')}},     \/* Inuktitut [macrolanguage] *\/\n-  {\"iw\",        {HB_TAG('I','W','R',' ')}},     \/* Hebrew (retired code) *\/\n-  {\"ja\",        {HB_TAG('J','A','N',' ')}},     \/* Japanese *\/\n-  {\"jak\",       {HB_TAG('M','L','Y',' ')}},     \/* Jakun -> Malay *\/\n-  {\"jam\",       {HB_TAG('J','A','M',' ')}},     \/* Jamaican Creole English -> Jamaican Creole *\/\n-  {\"jax\",       {HB_TAG('M','L','Y',' ')}},     \/* Jambi Malay -> Malay *\/\n-  {\"jbo\",       {HB_TAG('J','B','O',' ')}},     \/* Lojban *\/\n-  {\"jct\",       {HB_TAG('J','C','T',' ')}},     \/* Krymchak *\/\n-  {\"ji\",        {HB_TAG('J','I','I',' ')}},     \/* Yiddish (retired code) *\/\n-  {\"jv\",        {HB_TAG('J','A','V',' ')}},     \/* Javanese *\/\n-  {\"jw\",        {HB_TAG('J','A','V',' ')}},     \/* Javanese (retired code) *\/\n-  {\"ka\",        {HB_TAG('K','A','T',' ')}},     \/* Georgian *\/\n-  {\"kaa\",       {HB_TAG('K','R','K',' ')}},     \/* Kara-Kalpak -> Karakalpak *\/\n-  {\"kab\",       {HB_TAG('K','A','B','0')}},     \/* Kabyle *\/\n-  {\"kam\",       {HB_TAG('K','M','B',' ')}},     \/* Kamba (Kenya) *\/\n-  {\"kar\",       {HB_TAG('K','R','N',' ')}},     \/* Karen [family] *\/\n-  {\"kbd\",       {HB_TAG('K','A','B',' ')}},     \/* Kabardian *\/\n-  {\"kby\",       {HB_TAG('K','N','R',' ')}},     \/* Manga Kanuri -> Kanuri *\/\n-  {\"kca\",       {HB_TAG('K','H','K',' '),       \/* Khanty -> Khanty-Kazim *\/\n-                 HB_TAG('K','H','S',' '),       \/* Khanty -> Khanty-Shurishkar *\/\n-                 HB_TAG('K','H','V',' ')}},     \/* Khanty -> Khanty-Vakhi *\/\n-  {\"kde\",       {HB_TAG('K','D','E',' ')}},     \/* Makonde *\/\n-  {\"kdr\",       {HB_TAG('K','R','M',' ')}},     \/* Karaim *\/\n-  {\"kdt\",       {HB_TAG('K','U','Y',' ')}},     \/* Kuy *\/\n-  {\"kea\",       {HB_TAG('K','E','A',' ')}},     \/* Kabuverdianu (Crioulo) *\/\n-  {\"kek\",       {HB_TAG('K','E','K',' ')}},     \/* Kekchi *\/\n-  {\"kex\",       {HB_TAG('K','K','N',' ')}},     \/* Kukna -> Kokni *\/\n-  {\"kfa\",       {HB_TAG('K','O','D',' ')}},     \/* Kodava -> Kodagu *\/\n-  {\"kfr\",       {HB_TAG('K','A','C',' ')}},     \/* Kachhi -> Kachchi *\/\n-  {\"kfx\",       {HB_TAG('K','U','L',' ')}},     \/* Kullu Pahari -> Kulvi *\/\n-  {\"kfy\",       {HB_TAG('K','M','N',' ')}},     \/* Kumaoni *\/\n-  {\"kg\",        {HB_TAG('K','O','N','0')}},     \/* Kongo [macrolanguage] *\/\n-  {\"kha\",       {HB_TAG('K','S','I',' ')}},     \/* Khasi *\/\n-  {\"khb\",       {HB_TAG('X','B','D',' ')}},     \/* Lü *\/\n-  {\"khk\",       {HB_TAG('M','N','G',' ')}},     \/* Halh Mongolian -> Mongolian *\/\n-  {\"kht\",       {HB_TAG('K','H','N',' '),       \/* Khamti -> Khamti Shan (Microsoft fonts) *\/\n-                 HB_TAG('K','H','T',' ')}},     \/* Khamti -> Khamti Shan (OpenType spec and SIL fonts) *\/\n-  {\"khw\",       {HB_TAG('K','H','W',' ')}},     \/* Khowar *\/\n-  {\"ki\",        {HB_TAG('K','I','K',' ')}},     \/* Kikuyu (Gikuyu) *\/\n-  {\"kiu\",       {HB_TAG('K','I','U',' ')}},     \/* Kirmanjki *\/\n-  {\"kj\",        {HB_TAG('K','U','A',' ')}},     \/* Kuanyama *\/\n-  {\"kjd\",       {HB_TAG('K','J','D',' ')}},     \/* Southern Kiwai *\/\n-  {\"kjh\",       {HB_TAG('K','H','A',' ')}},     \/* Khakas -> Khakass *\/\n-  {\"kjp\",       {HB_TAG('K','J','P',' ')}},     \/* Pwo Eastern Karen -> Eastern Pwo Karen *\/\n-  {\"kjz\",       {HB_TAG('K','J','Z',' ')}},     \/* Bumthangkha *\/\n-  {\"kk\",        {HB_TAG('K','A','Z',' ')}},     \/* Kazakh *\/\n-  {\"kkz\",       {HB_TAG('A','T','H',' ')}},     \/* Kaska -> Athapaskan *\/\n-  {\"kl\",        {HB_TAG('G','R','N',' ')}},     \/* Greenlandic *\/\n-  {\"kln\",       {HB_TAG('K','A','L',' ')}},     \/* Kalenjin [macrolanguage] *\/\n-  {\"km\",        {HB_TAG('K','H','M',' ')}},     \/* Khmer *\/\n-  {\"kmb\",       {HB_TAG('M','B','N',' ')}},     \/* Kimbundu -> Mbundu *\/\n-  {\"kmr\",       {HB_TAG('K','U','R',' ')}},     \/* Northern Kurdish -> Kurdish *\/\n-  {\"kmw\",       {HB_TAG('K','M','O',' ')}},     \/* Komo (Democratic Republic of Congo) *\/\n-  {\"kmz\",       {HB_TAG('K','M','Z',' ')}},     \/* Khorasani Turkish -> Khorasani Turkic *\/\n-  {\"kn\",        {HB_TAG('K','A','N',' ')}},     \/* Kannada *\/\n-  {\"knc\",       {HB_TAG('K','N','R',' ')}},     \/* Central Kanuri -> Kanuri *\/\n-  {\"kng\",       {HB_TAG('K','O','N','0')}},     \/* Koongo -> Kongo *\/\n-  {\"knn\",       {HB_TAG('K','O','K',' ')}},     \/* Konkani *\/\n-  {\"ko\",        {HB_TAG('K','O','R',' ')}},     \/* Korean *\/\n-  {\"koi\",       {HB_TAG('K','O','P',' ')}},     \/* Komi-Permyak *\/\n-  {\"kok\",       {HB_TAG('K','O','K',' ')}},     \/* Konkani [macrolanguage] *\/\n-  {\"kos\",       {HB_TAG('K','O','S',' ')}},     \/* Kosraean *\/\n-  {\"koy\",       {HB_TAG('A','T','H',' ')}},     \/* Koyukon -> Athapaskan *\/\n-  {\"kpe\",       {HB_TAG('K','P','L',' ')}},     \/* Kpelle [macrolanguage] *\/\n-  {\"kpv\",       {HB_TAG('K','O','Z',' ')}},     \/* Komi-Zyrian *\/\n-  {\"kpy\",       {HB_TAG('K','Y','K',' ')}},     \/* Koryak *\/\n-  {\"kqs\",       {HB_TAG('K','I','S',' ')}},     \/* Northern Kissi -> Kisii *\/\n-  {\"kqy\",       {HB_TAG('K','R','T',' ')}},     \/* Koorete *\/\n-  {\"kr\",        {HB_TAG('K','N','R',' ')}},     \/* Kanuri [macrolanguage] *\/\n-  {\"krc\",       {HB_TAG('K','A','R',' '),       \/* Karachay-Balkar -> Karachay *\/\n-                 HB_TAG('B','A','L',' ')}},     \/* Karachay-Balkar -> Balkar *\/\n-  {\"kri\",       {HB_TAG('K','R','I',' ')}},     \/* Krio *\/\n-  {\"krl\",       {HB_TAG('K','R','L',' ')}},     \/* Karelian *\/\n-  {\"krt\",       {HB_TAG('K','N','R',' ')}},     \/* Tumari Kanuri -> Kanuri *\/\n-  {\"kru\",       {HB_TAG('K','U','U',' ')}},     \/* Kurukh *\/\n-  {\"ks\",        {HB_TAG('K','S','H',' ')}},     \/* Kashmiri *\/\n-  {\"ksh\",       {HB_TAG('K','S','H','0')}},     \/* Kölsch -> Ripuarian *\/\n-  {\"kss\",       {HB_TAG('K','I','S',' ')}},     \/* Southern Kisi -> Kisii *\/\n-  {\"ksw\",       {HB_TAG('K','S','W',' ')}},     \/* S’gaw Karen *\/\n-  {\"ktb\",       {HB_TAG('K','E','B',' ')}},     \/* Kambaata -> Kebena *\/\n-  {\"ktu\",       {HB_TAG('K','O','N',' ')}},     \/* Kituba (Democratic Republic of Congo) -> Kikongo *\/\n-  {\"ktw\",       {HB_TAG('A','T','H',' ')}},     \/* Kato -> Athapaskan *\/\n-  {\"ku\",        {HB_TAG('K','U','R',' ')}},     \/* Kurdish [macrolanguage] *\/\n-  {\"kum\",       {HB_TAG('K','U','M',' ')}},     \/* Kumyk *\/\n-  {\"kuu\",       {HB_TAG('A','T','H',' ')}},     \/* Upper Kuskokwim -> Athapaskan *\/\n-  {\"kv\",        {HB_TAG('K','O','M',' ')}},     \/* Komi [macrolanguage] *\/\n-  {\"kvb\",       {HB_TAG('M','L','Y',' ')}},     \/* Kubu -> Malay *\/\n-  {\"kvr\",       {HB_TAG('M','L','Y',' ')}},     \/* Kerinci -> Malay *\/\n-  {\"kw\",        {HB_TAG('C','O','R',' ')}},     \/* Cornish *\/\n-  {\"kwy\",       {HB_TAG('K','O','N','0')}},     \/* San Salvador Kongo -> Kongo *\/\n-  {\"kxc\",       {HB_TAG('K','M','S',' ')}},     \/* Konso -> Komso *\/\n-  {\"kxd\",       {HB_TAG('M','L','Y',' ')}},     \/* Brunei -> Malay *\/\n-  {\"kxu\",       {HB_TAG('K','U','I',' ')}},     \/* Kui (India) *\/\n-  {\"ky\",        {HB_TAG('K','I','R',' ')}},     \/* Kirghiz (Kyrgyz) *\/\n-  {\"kyu\",       {HB_TAG('K','Y','U',' ')}},     \/* Western Kayah *\/\n-  {\"la\",        {HB_TAG('L','A','T',' ')}},     \/* Latin *\/\n-  {\"lad\",       {HB_TAG('J','U','D',' ')}},     \/* Ladino *\/\n-  {\"lb\",        {HB_TAG('L','T','Z',' ')}},     \/* Luxembourgish *\/\n-  {\"lbe\",       {HB_TAG('L','A','K',' ')}},     \/* Lak *\/\n-  {\"lbj\",       {HB_TAG('L','D','K',' ')}},     \/* Ladakhi *\/\n-  {\"lbl\",       {HB_TAG('B','I','K',' ')}},     \/* Libon Bikol -> Bikol *\/\n-  {\"lce\",       {HB_TAG('M','L','Y',' ')}},     \/* Loncong -> Malay *\/\n-  {\"lcf\",       {HB_TAG('M','L','Y',' ')}},     \/* Lubu -> Malay *\/\n-  {\"ldi\",       {HB_TAG('K','O','N','0')}},     \/* Laari -> Kongo *\/\n-  {\"lez\",       {HB_TAG('L','E','Z',' ')}},     \/* Lezghian -> Lezgi *\/\n-  {\"lg\",        {HB_TAG('L','U','G',' ')}},     \/* Ganda *\/\n-  {\"li\",        {HB_TAG('L','I','M',' ')}},     \/* Limburgish *\/\n-  {\"lif\",       {HB_TAG('L','M','B',' ')}},     \/* Limbu *\/\n-  {\"lij\",       {HB_TAG('L','I','J',' ')}},     \/* Ligurian *\/\n-  {\"lis\",       {HB_TAG('L','I','S',' ')}},     \/* Lisu *\/\n-  {\"liw\",       {HB_TAG('M','L','Y',' ')}},     \/* Col -> Malay *\/\n-  {\"ljp\",       {HB_TAG('L','J','P',' ')}},     \/* Lampung Api -> Lampung *\/\n-  {\"lkb\",       {HB_TAG('L','U','H',' ')}},     \/* Kabras -> Luyia *\/\n-  {\"lki\",       {HB_TAG('L','K','I',' ')}},     \/* Laki *\/\n-  {\"lko\",       {HB_TAG('L','U','H',' ')}},     \/* Khayo -> Luyia *\/\n-  {\"lks\",       {HB_TAG('L','U','H',' ')}},     \/* Kisa -> Luyia *\/\n-  {\"lld\",       {HB_TAG('L','A','D',' ')}},     \/* Ladin *\/\n-  {\"lmn\",       {HB_TAG('L','A','M',' ')}},     \/* Lambadi -> Lambani *\/\n-  {\"lmo\",       {HB_TAG('L','M','O',' ')}},     \/* Lombard *\/\n-  {\"ln\",        {HB_TAG('L','I','N',' ')}},     \/* Lingala *\/\n-  {\"lo\",        {HB_TAG('L','A','O',' ')}},     \/* Lao *\/\n-  {\"lom\",       {HB_TAG('L','O','M',' ')}},     \/* Loma (Liberia) *\/\n-  {\"lrc\",       {HB_TAG('L','R','C',' ')}},     \/* Northern Luri -> Luri *\/\n-  {\"lri\",       {HB_TAG('L','U','H',' ')}},     \/* Marachi -> Luyia *\/\n-  {\"lrm\",       {HB_TAG('L','U','H',' ')}},     \/* Marama -> Luyia *\/\n-  {\"lsm\",       {HB_TAG('L','U','H',' ')}},     \/* Saamia -> Luyia *\/\n-  {\"lt\",        {HB_TAG('L','T','H',' ')}},     \/* Lithuanian *\/\n-  {\"ltg\",       {HB_TAG('L','V','I',' ')}},     \/* Latgalian -> Latvian *\/\n-  {\"lto\",       {HB_TAG('L','U','H',' ')}},     \/* Tsotso -> Luyia *\/\n-  {\"lts\",       {HB_TAG('L','U','H',' ')}},     \/* Tachoni -> Luyia *\/\n-  {\"lu\",        {HB_TAG('L','U','B',' ')}},     \/* Luba-Katanga *\/\n-  {\"lua\",       {HB_TAG('L','U','A',' ')}},     \/* Luba-Lulua *\/\n-  {\"luo\",       {HB_TAG('L','U','O',' ')}},     \/* Luo (Kenya and Tanzania) *\/\n-  {\"lus\",       {HB_TAG('M','I','Z',' ')}},     \/* Lushai -> Mizo *\/\n-  {\"luy\",       {HB_TAG('L','U','H',' ')}},     \/* Luyia [macrolanguage] *\/\n-  {\"luz\",       {HB_TAG('L','R','C',' ')}},     \/* Southern Luri -> Luri *\/\n-  {\"lv\",        {HB_TAG('L','V','I',' ')}},     \/* Latvian [macrolanguage] *\/\n-  {\"lvs\",       {HB_TAG('L','V','I',' ')}},     \/* Standard Latvian -> Latvian *\/\n-  {\"lwg\",       {HB_TAG('L','U','H',' ')}},     \/* Wanga -> Luyia *\/\n-  {\"lzh\",       {HB_TAG('Z','H','T',' ')}},     \/* Literary Chinese -> Chinese Traditional *\/\n-  {\"lzz\",       {HB_TAG('L','A','Z',' ')}},     \/* Laz *\/\n-  {\"mad\",       {HB_TAG('M','A','D',' ')}},     \/* Madurese -> Madura *\/\n-  {\"mag\",       {HB_TAG('M','A','G',' ')}},     \/* Magahi *\/\n-  {\"mai\",       {HB_TAG('M','T','H',' ')}},     \/* Maithili *\/\n-  {\"mak\",       {HB_TAG('M','K','R',' ')}},     \/* Makasar *\/\n-  {\"mam\",       {HB_TAG('M','A','M',' ')}},     \/* Mam *\/\n-  {\"man\",       {HB_TAG('M','N','K',' ')}},     \/* Mandingo [macrolanguage] -> Maninka *\/\n-  {\"max\",       {HB_TAG('M','L','Y',' ')}},     \/* North Moluccan Malay -> Malay *\/\n-  {\"mbo\",       {HB_TAG('M','B','O',' ')}},     \/* Mbo (Cameroon) *\/\n-  {\"mct\",       {HB_TAG('B','T','I',' ')}},     \/* Mengisa -> Beti *\/\n-  {\"mdf\",       {HB_TAG('M','O','K',' ')}},     \/* Moksha *\/\n-  {\"mdr\",       {HB_TAG('M','D','R',' ')}},     \/* Mandar *\/\n-  {\"mdy\",       {HB_TAG('M','L','E',' ')}},     \/* Male (Ethiopia) *\/\n-  {\"men\",       {HB_TAG('M','D','E',' ')}},     \/* Mende (Sierra Leone) *\/\n-  {\"meo\",       {HB_TAG('M','L','Y',' ')}},     \/* Kedah Malay -> Malay *\/\n-  {\"mer\",       {HB_TAG('M','E','R',' ')}},     \/* Meru *\/\n-  {\"mfa\",       {HB_TAG('M','F','A',' ')}},     \/* Pattani Malay *\/\n-  {\"mfb\",       {HB_TAG('M','L','Y',' ')}},     \/* Bangka -> Malay *\/\n-  {\"mfe\",       {HB_TAG('M','F','E',' ')}},     \/* Morisyen *\/\n-  {\"mg\",        {HB_TAG('M','L','G',' ')}},     \/* Malagasy [macrolanguage] *\/\n-  {\"mh\",        {HB_TAG('M','A','H',' ')}},     \/* Marshallese *\/\n-  {\"mhr\",       {HB_TAG('L','M','A',' ')}},     \/* Eastern Mari -> Low Mari *\/\n-  {\"mhv\",       {HB_TAG('A','R','K',' ')}},     \/* Arakanese (retired code) -> Rakhine *\/\n-  {\"mi\",        {HB_TAG('M','R','I',' ')}},     \/* Maori *\/\n-  {\"min\",       {HB_TAG('M','I','N',' ')}},     \/* Minangkabau *\/\n-  {\"mk\",        {HB_TAG('M','K','D',' ')}},     \/* Macedonian *\/\n-  {\"mku\",       {HB_TAG('M','N','K',' ')}},     \/* Konyanka Maninka -> Maninka *\/\n-  {\"mkw\",       {HB_TAG('M','K','W',' ')}},     \/* Kituba (Congo) *\/\n-  {\"ml\",        {HB_TAG('M','A','L',' '),       \/* Malayalam -> Malayalam Traditional *\/\n-                 HB_TAG('M','L','R',' ')}},     \/* Malayalam -> Malayalam Reformed *\/\n-  {\"mlq\",       {HB_TAG('M','L','N',' '),       \/* Western Maninkakan -> Malinke *\/\n-                 HB_TAG('M','N','K',' ')}},     \/* Western Maninkakan -> Maninka *\/\n-  {\"mmr\",       {HB_TAG('H','M','N',' ')}},     \/* Western Xiangxi Miao -> Hmong *\/\n-  {\"mn\",        {HB_TAG('M','N','G',' ')}},     \/* Mongolian [macrolanguage] *\/\n-  {\"mnc\",       {HB_TAG('M','C','H',' ')}},     \/* Manchu *\/\n-  {\"mni\",       {HB_TAG('M','N','I',' ')}},     \/* Manipuri *\/\n-  {\"mnk\",       {HB_TAG('M','N','D',' '),       \/* Mandinka *\/\n-                 HB_TAG('M','N','K',' ')}},     \/* Mandinka -> Maninka *\/\n-  {\"mnp\",       {HB_TAG('Z','H','S',' ')}},     \/* Min Bei Chinese -> Chinese Simplified *\/\n-  {\"mns\",       {HB_TAG('M','A','N',' ')}},     \/* Mansi *\/\n-  {\"mnw\",       {HB_TAG('M','O','N',' ')}},     \/* Mon *\/\n-  {\"mo\",        {HB_TAG('M','O','L',' ')}},     \/* Moldavian (retired code) *\/\n-  {\"moh\",       {HB_TAG('M','O','H',' ')}},     \/* Mohawk *\/\n-  {\"mos\",       {HB_TAG('M','O','S',' ')}},     \/* Mossi *\/\n-  {\"mpe\",       {HB_TAG('M','A','J',' ')}},     \/* Majang *\/\n-  {\"mqg\",       {HB_TAG('M','L','Y',' ')}},     \/* Kota Bangun Kutai Malay -> Malay *\/\n-  {\"mr\",        {HB_TAG('M','A','R',' ')}},     \/* Marathi *\/\n-  {\"mrh\",       {HB_TAG('Q','I','N',' ')}},     \/* Mara Chin -> Chin *\/\n-  {\"mrj\",       {HB_TAG('H','M','A',' ')}},     \/* Western Mari -> High Mari *\/\n-  {\"ms\",        {HB_TAG('M','L','Y',' ')}},     \/* Malay [macrolanguage] *\/\n-  {\"msc\",       {HB_TAG('M','N','K',' ')}},     \/* Sankaran Maninka -> Maninka *\/\n-  {\"msh\",       {HB_TAG('M','L','G',' ')}},     \/* Masikoro Malagasy -> Malagasy *\/\n-  {\"msi\",       {HB_TAG('M','L','Y',' ')}},     \/* Sabah Malay -> Malay *\/\n-  {\"mt\",        {HB_TAG('M','T','S',' ')}},     \/* Maltese *\/\n-  {\"mtr\",       {HB_TAG('M','A','W',' ')}},     \/* Mewari -> Marwari *\/\n-  {\"mui\",       {HB_TAG('M','L','Y',' ')}},     \/* Musi -> Malay *\/\n-  {\"mup\",       {HB_TAG('R','A','J',' ')}},     \/* Malvi -> Rajasthani *\/\n-  {\"muq\",       {HB_TAG('H','M','N',' ')}},     \/* Eastern Xiangxi Miao -> Hmong *\/\n-  {\"mus\",       {HB_TAG('M','U','S',' ')}},     \/* Creek -> Muscogee *\/\n-  {\"mvb\",       {HB_TAG('A','T','H',' ')}},     \/* Mattole -> Athapaskan *\/\n-  {\"mve\",       {HB_TAG('M','A','W',' ')}},     \/* Marwari (Pakistan) *\/\n-  {\"mvf\",       {HB_TAG('M','N','G',' ')}},     \/* Peripheral Mongolian -> Mongolian *\/\n-  {\"mwk\",       {HB_TAG('M','N','K',' ')}},     \/* Kita Maninkakan -> Maninka *\/\n-  {\"mwl\",       {HB_TAG('M','W','L',' ')}},     \/* Mirandese *\/\n-  {\"mwr\",       {HB_TAG('M','A','W',' ')}},     \/* Marwari [macrolanguage] *\/\n-  {\"mww\",       {HB_TAG('M','W','W',' ')}},     \/* Hmong Daw *\/\n-  {\"my\",        {HB_TAG('B','R','M',' ')}},     \/* Burmese *\/\n-  {\"mym\",       {HB_TAG('M','E','N',' ')}},     \/* Me'en *\/\n-  {\"myn\",       {HB_TAG('M','Y','N',' ')}},     \/* Mayan [family] *\/\n-  {\"myq\",       {HB_TAG('M','N','K',' ')}},     \/* Forest Maninka (retired code) -> Maninka *\/\n-  {\"myv\",       {HB_TAG('E','R','Z',' ')}},     \/* Erzya *\/\n-  {\"mzn\",       {HB_TAG('M','Z','N',' ')}},     \/* Mazanderani *\/\n-  {\"na\",        {HB_TAG('N','A','U',' ')}},     \/* Nauru -> Nauruan *\/\n-  {\"nag\",       {HB_TAG('N','A','G',' ')}},     \/* Naga Pidgin -> Naga-Assamese *\/\n-  {\"nah\",       {HB_TAG('N','A','H',' ')}},     \/* Nahuatl [family] *\/\n-  {\"nan\",       {HB_TAG('Z','H','S',' ')}},     \/* Min Nan Chinese -> Chinese Simplified *\/\n-  {\"nap\",       {HB_TAG('N','A','P',' ')}},     \/* Neapolitan *\/\n-  {\"nb\",        {HB_TAG('N','O','R',' ')}},     \/* Norwegian Bokmål -> Norwegian *\/\n-  {\"nd\",        {HB_TAG('N','D','B',' ')}},     \/* North Ndebele -> Ndebele *\/\n-  {\"ndc\",       {HB_TAG('N','D','C',' ')}},     \/* Ndau *\/\n-  {\"nds\",       {HB_TAG('N','D','S',' ')}},     \/* Low Saxon *\/\n-  {\"ne\",        {HB_TAG('N','E','P',' ')}},     \/* Nepali [macrolanguage] *\/\n-  {\"new\",       {HB_TAG('N','E','W',' ')}},     \/* Newari *\/\n-  {\"ng\",        {HB_TAG('N','D','G',' ')}},     \/* Ndonga *\/\n-  {\"nga\",       {HB_TAG('N','G','A',' ')}},     \/* Ngbaka *\/\n-  {\"ngl\",       {HB_TAG('L','M','W',' ')}},     \/* Lomwe *\/\n-  {\"ngo\",       {HB_TAG('S','X','T',' ')}},     \/* Ngoni -> Sutu *\/\n-  {\"nhd\",       {HB_TAG('G','U','A',' ')}},     \/* Chiripá -> Guarani *\/\n-  {\"niq\",       {HB_TAG('K','A','L',' ')}},     \/* Nandi -> Kalenjin *\/\n-  {\"niu\",       {HB_TAG('N','I','U',' ')}},     \/* Niuean *\/\n-  {\"niv\",       {HB_TAG('G','I','L',' ')}},     \/* Gilyak *\/\n-  {\"njz\",       {HB_TAG('N','I','S',' ')}},     \/* Nyishi -> Nisi *\/\n-  {\"nl\",        {HB_TAG('N','L','D',' ')}},     \/* Dutch *\/\n-  {\"nle\",       {HB_TAG('L','U','H',' ')}},     \/* East Nyala -> Luyia *\/\n-  {\"nn\",        {HB_TAG('N','Y','N',' ')}},     \/* Norwegian Nynorsk (Nynorsk, Norwegian) *\/\n-  {\"no\",        {HB_TAG('N','O','R',' ')}},     \/* Norwegian [macrolanguage] *\/\n-  {\"nod\",       {HB_TAG('N','T','A',' ')}},     \/* Northern Thai -> Northern Tai *\/\n-  {\"noe\",       {HB_TAG('N','O','E',' ')}},     \/* Nimadi *\/\n-  {\"nog\",       {HB_TAG('N','O','G',' ')}},     \/* Nogai *\/\n-  {\"nov\",       {HB_TAG('N','O','V',' ')}},     \/* Novial *\/\n-  {\"npi\",       {HB_TAG('N','E','P',' ')}},     \/* Nepali *\/\n-  {\"nqo\",       {HB_TAG('N','K','O',' ')}},     \/* N'Ko *\/\n-  {\"nr\",        {HB_TAG('N','D','B',' ')}},     \/* South Ndebele -> Ndebele *\/\n-  {\"nsk\",       {HB_TAG('N','A','S',' ')}},     \/* Naskapi *\/\n-  {\"nso\",       {HB_TAG('N','S','O',' ')}},     \/* Pedi -> Sotho, Northern *\/\n-  {\"nv\",        {HB_TAG('N','A','V',' '),       \/* Navajo *\/\n-                 HB_TAG('A','T','H',' ')}},     \/* Navajo -> Athapaskan *\/\n-  {\"ny\",        {HB_TAG('C','H','I',' ')}},     \/* Chichewa (Chewa, Nyanja) *\/\n-  {\"nyd\",       {HB_TAG('L','U','H',' ')}},     \/* Nyore -> Luyia *\/\n-  {\"nym\",       {HB_TAG('N','Y','M',' ')}},     \/* Nyamwezi *\/\n-  {\"nyn\",       {HB_TAG('N','K','L',' ')}},     \/* Nyankole *\/\n-  {\"nza\",       {HB_TAG('N','Z','A',' ')}},     \/* Tigon Mbembe -> Mbembe Tigon *\/\n-  {\"oc\",        {HB_TAG('O','C','I',' ')}},     \/* Occitan (post 1500) *\/\n-  {\"oj\",        {HB_TAG('O','J','B',' ')}},     \/* Ojibwa [macrolanguage] -> Ojibway *\/\n-  {\"ojb\",       {HB_TAG('O','J','B',' ')}},     \/* Northwestern Ojibwa -> Ojibway *\/\n-  {\"ojc\",       {HB_TAG('O','J','B',' ')}},     \/* Central Ojibwa -> Ojibway *\/\n-  {\"ojg\",       {HB_TAG('O','J','B',' ')}},     \/* Eastern Ojibwa -> Ojibway *\/\n-  {\"ojs\",       {HB_TAG('O','C','R',' ')}},     \/* Severn Ojibwa -> Oji-Cree *\/\n-  {\"ojw\",       {HB_TAG('O','J','B',' ')}},     \/* Western Ojibwa -> Ojibway *\/\n-  {\"oki\",       {HB_TAG('K','A','L',' ')}},     \/* Okiek -> Kalenjin *\/\n-  {\"okm\",       {HB_TAG('K','O','H',' ')}},     \/* Middle Korean (10th-16th cent.) -> Korean Old Hangul *\/\n-  {\"om\",        {HB_TAG('O','R','O',' ')}},     \/* Oromo [macrolanguage] *\/\n-  {\"or\",        {HB_TAG('O','R','I',' ')}},     \/* Odia (formerly Oriya) [macrolanguage] *\/\n-  {\"orc\",       {HB_TAG('O','R','O',' ')}},     \/* Orma -> Oromo *\/\n-  {\"orn\",       {HB_TAG('M','L','Y',' ')}},     \/* Orang Kanaq -> Malay *\/\n-  {\"ors\",       {HB_TAG('M','L','Y',' ')}},     \/* Orang Seletar -> Malay *\/\n-  {\"ory\",       {HB_TAG('O','R','I',' ')}},     \/* Odia (formerly Oriya) *\/\n-  {\"os\",        {HB_TAG('O','S','S',' ')}},     \/* Ossetian *\/\n-  {\"otw\",       {HB_TAG('O','J','B',' ')}},     \/* Ottawa -> Ojibway *\/\n-  {\"pa\",        {HB_TAG('P','A','N',' ')}},     \/* Punjabi *\/\n-  {\"pag\",       {HB_TAG('P','A','G',' ')}},     \/* Pangasinan *\/\n-  {\"pam\",       {HB_TAG('P','A','M',' ')}},     \/* Pampanga -> Pampangan *\/\n-  {\"pap\",       {HB_TAG('P','A','P','0')}},     \/* Papiamento -> Papiamentu *\/\n-  {\"pau\",       {HB_TAG('P','A','U',' ')}},     \/* Palauan *\/\n-  {\"pbt\",       {HB_TAG('P','A','S',' ')}},     \/* Southern Pashto -> Pashto *\/\n-  {\"pbu\",       {HB_TAG('P','A','S',' ')}},     \/* Northern Pashto -> Pashto *\/\n-  {\"pcc\",       {HB_TAG('P','C','C',' ')}},     \/* Bouyei *\/\n-  {\"pcd\",       {HB_TAG('P','C','D',' ')}},     \/* Picard *\/\n-  {\"pce\",       {HB_TAG('P','L','G',' ')}},     \/* Ruching Palaung -> Palaung *\/\n-  {\"pck\",       {HB_TAG('Q','I','N',' ')}},     \/* Paite Chin -> Chin *\/\n-  {\"pdc\",       {HB_TAG('P','D','C',' ')}},     \/* Pennsylvania German *\/\n-  {\"pel\",       {HB_TAG('M','L','Y',' ')}},     \/* Pekal -> Malay *\/\n-  {\"pes\",       {HB_TAG('F','A','R',' ')}},     \/* Iranian Persian -> Persian *\/\n-  {\"pga\",       {HB_TAG('A','R','A',' ')}},     \/* Sudanese Creole Arabic -> Arabic *\/\n-  {\"phk\",       {HB_TAG('P','H','K',' ')}},     \/* Phake *\/\n-  {\"pi\",        {HB_TAG('P','A','L',' ')}},     \/* Pali *\/\n-  {\"pih\",       {HB_TAG('P','I','H',' ')}},     \/* Pitcairn-Norfolk -> Norfolk *\/\n-  {\"pko\",       {HB_TAG('K','A','L',' ')}},     \/* Pökoot -> Kalenjin *\/\n-  {\"pl\",        {HB_TAG('P','L','K',' ')}},     \/* Polish *\/\n-  {\"pll\",       {HB_TAG('P','L','G',' ')}},     \/* Shwe Palaung -> Palaung *\/\n-  {\"plp\",       {HB_TAG('P','A','P',' ')}},     \/* Palpa *\/\n-  {\"plt\",       {HB_TAG('M','L','G',' ')}},     \/* Plateau Malagasy -> Malagasy *\/\n-  {\"pms\",       {HB_TAG('P','M','S',' ')}},     \/* Piemontese *\/\n-  {\"pnb\",       {HB_TAG('P','N','B',' ')}},     \/* Western Panjabi *\/\n-  {\"poh\",       {HB_TAG('P','O','H',' ')}},     \/* Poqomchi' -> Pocomchi *\/\n-  {\"pon\",       {HB_TAG('P','O','N',' ')}},     \/* Pohnpeian *\/\n-  {\"ppa\",       {HB_TAG('B','A','G',' ')}},     \/* Pao (retired code) -> Baghelkhandi *\/\n-  {\"pro\",       {HB_TAG('P','R','O',' ')}},     \/* Old Provençal (to 1500) -> Provençal \/ Old Provençal *\/\n-  {\"prs\",       {HB_TAG('D','R','I',' ')}},     \/* Dari *\/\n-  {\"ps\",        {HB_TAG('P','A','S',' ')}},     \/* Pashto [macrolanguage] *\/\n-  {\"pse\",       {HB_TAG('M','L','Y',' ')}},     \/* Central Malay -> Malay *\/\n-  {\"pst\",       {HB_TAG('P','A','S',' ')}},     \/* Central Pashto -> Pashto *\/\n-  {\"pt\",        {HB_TAG('P','T','G',' ')}},     \/* Portuguese *\/\n-  {\"pwo\",       {HB_TAG('P','W','O',' ')}},     \/* Pwo Western Karen -> Western Pwo Karen *\/\n-  {\"qu\",        {HB_TAG('Q','U','Z',' ')}},     \/* Quechua [macrolanguage] *\/\n-  {\"qub\",       {HB_TAG('Q','W','H',' ')}},     \/* Huallaga Huánuco Quechua -> Quechua (Peru) *\/\n-  {\"quc\",       {HB_TAG('Q','U','C',' ')}},     \/* K’iche’ *\/\n-  {\"qud\",       {HB_TAG('Q','V','I',' ')}},     \/* Calderón Highland Quichua -> Quechua (Ecuador) *\/\n-  {\"quf\",       {HB_TAG('Q','U','Z',' ')}},     \/* Lambayeque Quechua -> Quechua *\/\n-  {\"qug\",       {HB_TAG('Q','V','I',' ')}},     \/* Chimborazo Highland Quichua -> Quechua (Ecuador) *\/\n-  {\"quh\",       {HB_TAG('Q','U','H',' ')}},     \/* South Bolivian Quechua -> Quechua (Bolivia) *\/\n-  {\"quk\",       {HB_TAG('Q','U','Z',' ')}},     \/* Chachapoyas Quechua -> Quechua *\/\n-  {\"qul\",       {HB_TAG('Q','U','Z',' ')}},     \/* North Bolivian Quechua -> Quechua *\/\n-  {\"qup\",       {HB_TAG('Q','V','I',' ')}},     \/* Southern Pastaza Quechua -> Quechua (Ecuador) *\/\n-  {\"qur\",       {HB_TAG('Q','W','H',' ')}},     \/* Yanahuanca Pasco Quechua -> Quechua (Peru) *\/\n-  {\"qus\",       {HB_TAG('Q','U','H',' ')}},     \/* Santiago del Estero Quichua -> Quechua (Bolivia) *\/\n-  {\"quw\",       {HB_TAG('Q','V','I',' ')}},     \/* Tena Lowland Quichua -> Quechua (Ecuador) *\/\n-  {\"qux\",       {HB_TAG('Q','W','H',' ')}},     \/* Yauyos Quechua -> Quechua (Peru) *\/\n-  {\"quy\",       {HB_TAG('Q','U','Z',' ')}},     \/* Ayacucho Quechua -> Quechua *\/\n-  {\"quz\",       {HB_TAG('Q','U','Z',' ')}},     \/* Cusco Quechua -> Quechua *\/\n-  {\"qva\",       {HB_TAG('Q','W','H',' ')}},     \/* Ambo-Pasco Quechua -> Quechua (Peru) *\/\n-  {\"qvc\",       {HB_TAG('Q','U','Z',' ')}},     \/* Cajamarca Quechua -> Quechua *\/\n-  {\"qve\",       {HB_TAG('Q','U','Z',' ')}},     \/* Eastern Apurímac Quechua -> Quechua *\/\n-  {\"qvh\",       {HB_TAG('Q','W','H',' ')}},     \/* Huamalíes-Dos de Mayo Huánuco Quechua -> Quechua (Peru) *\/\n-  {\"qvi\",       {HB_TAG('Q','V','I',' ')}},     \/* Imbabura Highland Quichua -> Quechua (Ecuador) *\/\n-  {\"qvj\",       {HB_TAG('Q','V','I',' ')}},     \/* Loja Highland Quichua -> Quechua (Ecuador) *\/\n-  {\"qvl\",       {HB_TAG('Q','W','H',' ')}},     \/* Cajatambo North Lima Quechua -> Quechua (Peru) *\/\n-  {\"qvm\",       {HB_TAG('Q','W','H',' ')}},     \/* Margos-Yarowilca-Lauricocha Quechua -> Quechua (Peru) *\/\n-  {\"qvn\",       {HB_TAG('Q','W','H',' ')}},     \/* North Junín Quechua -> Quechua (Peru) *\/\n-  {\"qvo\",       {HB_TAG('Q','V','I',' ')}},     \/* Napo Lowland Quechua -> Quechua (Ecuador) *\/\n-  {\"qvp\",       {HB_TAG('Q','W','H',' ')}},     \/* Pacaraos Quechua -> Quechua (Peru) *\/\n-  {\"qvs\",       {HB_TAG('Q','U','Z',' ')}},     \/* San Martín Quechua -> Quechua *\/\n-  {\"qvw\",       {HB_TAG('Q','W','H',' ')}},     \/* Huaylla Wanca Quechua -> Quechua (Peru) *\/\n-  {\"qvz\",       {HB_TAG('Q','V','I',' ')}},     \/* Northern Pastaza Quichua -> Quechua (Ecuador) *\/\n-  {\"qwa\",       {HB_TAG('Q','W','H',' ')}},     \/* Corongo Ancash Quechua -> Quechua (Peru) *\/\n-  {\"qwc\",       {HB_TAG('Q','U','Z',' ')}},     \/* Classical Quechua -> Quechua *\/\n-  {\"qwh\",       {HB_TAG('Q','W','H',' ')}},     \/* Huaylas Ancash Quechua -> Quechua (Peru) *\/\n-  {\"qws\",       {HB_TAG('Q','W','H',' ')}},     \/* Sihuas Ancash Quechua -> Quechua (Peru) *\/\n-  {\"qxa\",       {HB_TAG('Q','W','H',' ')}},     \/* Chiquián Ancash Quechua -> Quechua (Peru) *\/\n-  {\"qxc\",       {HB_TAG('Q','W','H',' ')}},     \/* Chincha Quechua -> Quechua (Peru) *\/\n-  {\"qxh\",       {HB_TAG('Q','W','H',' ')}},     \/* Panao Huánuco Quechua -> Quechua (Peru) *\/\n-  {\"qxl\",       {HB_TAG('Q','V','I',' ')}},     \/* Salasaca Highland Quichua -> Quechua (Ecuador) *\/\n-  {\"qxn\",       {HB_TAG('Q','W','H',' ')}},     \/* Northern Conchucos Ancash Quechua -> Quechua (Peru) *\/\n-  {\"qxo\",       {HB_TAG('Q','W','H',' ')}},     \/* Southern Conchucos Ancash Quechua -> Quechua (Peru) *\/\n-  {\"qxp\",       {HB_TAG('Q','U','Z',' ')}},     \/* Puno Quechua -> Quechua *\/\n-  {\"qxr\",       {HB_TAG('Q','V','I',' ')}},     \/* Cañar Highland Quichua -> Quechua (Ecuador) *\/\n-  {\"qxt\",       {HB_TAG('Q','W','H',' ')}},     \/* Santa Ana de Tusi Pasco Quechua -> Quechua (Peru) *\/\n-  {\"qxu\",       {HB_TAG('Q','U','Z',' ')}},     \/* Arequipa-La Unión Quechua -> Quechua *\/\n-  {\"qxw\",       {HB_TAG('Q','W','H',' ')}},     \/* Jauja Wanca Quechua -> Quechua (Peru) *\/\n-  {\"rag\",       {HB_TAG('L','U','H',' ')}},     \/* Logooli -> Luyia *\/\n-  {\"raj\",       {HB_TAG('R','A','J',' ')}},     \/* Rajasthani [macrolanguage] *\/\n-  {\"rar\",       {HB_TAG('R','A','R',' ')}},     \/* Rarotongan *\/\n-  {\"rbb\",       {HB_TAG('P','L','G',' ')}},     \/* Rumai Palaung -> Palaung *\/\n-  {\"rbl\",       {HB_TAG('B','I','K',' ')}},     \/* Miraya Bikol -> Bikol *\/\n-  {\"rej\",       {HB_TAG('R','E','J',' ')}},     \/* Rejang *\/\n-  {\"ria\",       {HB_TAG('R','I','A',' ')}},     \/* Riang (India) *\/\n-  {\"rif\",       {HB_TAG('R','I','F',' ')}},     \/* Tarifit *\/\n-  {\"rit\",       {HB_TAG('R','I','T',' ')}},     \/* Ritarungo *\/\n-  {\"rki\",       {HB_TAG('A','R','K',' ')}},     \/* Rakhine *\/\n-  {\"rkw\",       {HB_TAG('R','K','W',' ')}},     \/* Arakwal *\/\n-  {\"rm\",        {HB_TAG('R','M','S',' ')}},     \/* Romansh *\/\n-  {\"rmc\",       {HB_TAG('R','O','Y',' ')}},     \/* Carpathian Romani -> Romany *\/\n-  {\"rmf\",       {HB_TAG('R','O','Y',' ')}},     \/* Kalo Finnish Romani -> Romany *\/\n-  {\"rml\",       {HB_TAG('R','O','Y',' ')}},     \/* Baltic Romani -> Romany *\/\n-  {\"rmn\",       {HB_TAG('R','O','Y',' ')}},     \/* Balkan Romani -> Romany *\/\n-  {\"rmo\",       {HB_TAG('R','O','Y',' ')}},     \/* Sinte Romani -> Romany *\/\n-  {\"rmw\",       {HB_TAG('R','O','Y',' ')}},     \/* Welsh Romani -> Romany *\/\n-  {\"rmy\",       {HB_TAG('R','M','Y',' ')}},     \/* Vlax Romani *\/\n-  {\"rmz\",       {HB_TAG('A','R','K',' ')}},     \/* Marma -> Rakhine *\/\n-  {\"rn\",        {HB_TAG('R','U','N',' ')}},     \/* Rundi *\/\n-  {\"rnl\",       {HB_TAG('H','A','L',' ')}},     \/* Ranglong -> Halam (Falam Chin) *\/\n-  {\"ro\",        {HB_TAG('R','O','M',' ')}},     \/* Romanian *\/\n-  {\"rom\",       {HB_TAG('R','O','Y',' ')}},     \/* Romany [macrolanguage] *\/\n-  {\"rtm\",       {HB_TAG('R','T','M',' ')}},     \/* Rotuman *\/\n-  {\"ru\",        {HB_TAG('R','U','S',' ')}},     \/* Russian *\/\n-  {\"rue\",       {HB_TAG('R','S','Y',' ')}},     \/* Rusyn *\/\n-  {\"rup\",       {HB_TAG('R','U','P',' ')}},     \/* Aromanian *\/\n-  {\"rw\",        {HB_TAG('R','U','A',' ')}},     \/* Kinyarwanda *\/\n-  {\"rwr\",       {HB_TAG('M','A','W',' ')}},     \/* Marwari (India) *\/\n-  {\"sa\",        {HB_TAG('S','A','N',' ')}},     \/* Sanskrit *\/\n-  {\"sah\",       {HB_TAG('Y','A','K',' ')}},     \/* Yakut -> Sakha *\/\n-  {\"sam\",       {HB_TAG('P','A','A',' ')}},     \/* Samaritan Aramaic -> Palestinian Aramaic *\/\n-  {\"sas\",       {HB_TAG('S','A','S',' ')}},     \/* Sasak *\/\n-  {\"sat\",       {HB_TAG('S','A','T',' ')}},     \/* Santali *\/\n-  {\"sc\",        {HB_TAG('S','R','D',' ')}},     \/* Sardinian [macrolanguage] *\/\n-  {\"sck\",       {HB_TAG('S','A','D',' ')}},     \/* Sadri *\/\n-  {\"scn\",       {HB_TAG('S','C','N',' ')}},     \/* Sicilian *\/\n-  {\"sco\",       {HB_TAG('S','C','O',' ')}},     \/* Scots *\/\n-  {\"scs\",       {HB_TAG('S','C','S',' '),       \/* North Slavey *\/\n-                 HB_TAG('S','L','A',' '),       \/* North Slavey -> Slavey *\/\n-                 HB_TAG('A','T','H',' ')}},     \/* North Slavey -> Athapaskan *\/\n-  {\"sd\",        {HB_TAG('S','N','D',' ')}},     \/* Sindhi *\/\n-  {\"sdc\",       {HB_TAG('S','R','D',' ')}},     \/* Sassarese Sardinian -> Sardinian *\/\n-  {\"sdh\",       {HB_TAG('K','U','R',' ')}},     \/* Southern Kurdish -> Kurdish *\/\n-  {\"sdn\",       {HB_TAG('S','R','D',' ')}},     \/* Gallurese Sardinian -> Sardinian *\/\n-  {\"se\",        {HB_TAG('N','S','M',' ')}},     \/* Northern Sami *\/\n-  {\"seh\",       {HB_TAG('S','N','A',' ')}},     \/* Sena *\/\n-  {\"sek\",       {HB_TAG('A','T','H',' ')}},     \/* Sekani -> Athapaskan *\/\n-  {\"sel\",       {HB_TAG('S','E','L',' ')}},     \/* Selkup *\/\n-  {\"sez\",       {HB_TAG('Q','I','N',' ')}},     \/* Senthang Chin -> Chin *\/\n-  {\"sfm\",       {HB_TAG('H','M','N',' ')}},     \/* Small Flowery Miao -> Hmong *\/\n-  {\"sg\",        {HB_TAG('S','G','O',' ')}},     \/* Sango *\/\n-  {\"sga\",       {HB_TAG('S','G','A',' ')}},     \/* Old Irish (to 900) *\/\n-  {\"sgc\",       {HB_TAG('K','A','L',' ')}},     \/* Kipsigis -> Kalenjin *\/\n-  {\"sgs\",       {HB_TAG('S','G','S',' ')}},     \/* Samogitian *\/\n-  {\"sgw\",       {HB_TAG('C','H','G',' '),       \/* Sebat Bet Gurage -> Chaha Gurage *\/\n-                 HB_TAG('S','G','W',' ')}},     \/* Sebat Bet Gurage -> Chaha Gurage (SIL fonts) *\/\n-  {\"shi\",       {HB_TAG('S','H','I',' ')}},     \/* Tachelhit *\/\n-  {\"shn\",       {HB_TAG('S','H','N',' ')}},     \/* Shan *\/\n-  {\"shu\",       {HB_TAG('A','R','A',' ')}},     \/* Chadian Arabic -> Arabic *\/\n-  {\"si\",        {HB_TAG('S','N','H',' ')}},     \/* Sinhala (Sinhalese) *\/\n-  {\"sid\",       {HB_TAG('S','I','D',' ')}},     \/* Sidamo *\/\n-  {\"sjd\",       {HB_TAG('K','S','M',' ')}},     \/* Kildin Sami *\/\n-  {\"sjo\",       {HB_TAG('S','I','B',' ')}},     \/* Xibe -> Sibe *\/\n-  {\"sk\",        {HB_TAG('S','K','Y',' ')}},     \/* Slovak *\/\n-  {\"skg\",       {HB_TAG('M','L','G',' ')}},     \/* Sakalava Malagasy -> Malagasy *\/\n-  {\"skr\",       {HB_TAG('S','R','K',' ')}},     \/* Saraiki *\/\n-  {\"sl\",        {HB_TAG('S','L','V',' ')}},     \/* Slovenian *\/\n-  {\"sm\",        {HB_TAG('S','M','O',' ')}},     \/* Samoan *\/\n-  {\"sma\",       {HB_TAG('S','S','M',' ')}},     \/* Southern Sami *\/\n-  {\"smj\",       {HB_TAG('L','S','M',' ')}},     \/* Lule Sami *\/\n-  {\"smn\",       {HB_TAG('I','S','M',' ')}},     \/* Inari Sami *\/\n-  {\"sms\",       {HB_TAG('S','K','S',' ')}},     \/* Skolt Sami *\/\n-  {\"sn\",        {HB_TAG('S','N','A','0')}},     \/* Shona *\/\n-  {\"snk\",       {HB_TAG('S','N','K',' ')}},     \/* Soninke *\/\n-  {\"so\",        {HB_TAG('S','M','L',' ')}},     \/* Somali *\/\n-  {\"sop\",       {HB_TAG('S','O','P',' ')}},     \/* Songe *\/\n-  {\"spv\",       {HB_TAG('O','R','I',' ')}},     \/* Sambalpuri -> Odia (formerly Oriya) *\/\n-  {\"spy\",       {HB_TAG('K','A','L',' ')}},     \/* Sabaot -> Kalenjin *\/\n-  {\"sq\",        {HB_TAG('S','Q','I',' ')}},     \/* Albanian [macrolanguage] *\/\n-  {\"sr\",        {HB_TAG('S','R','B',' ')}},     \/* Serbian *\/\n-  {\"src\",       {HB_TAG('S','R','D',' ')}},     \/* Logudorese Sardinian -> Sardinian *\/\n-  {\"sro\",       {HB_TAG('S','R','D',' ')}},     \/* Campidanese Sardinian -> Sardinian *\/\n-  {\"srr\",       {HB_TAG('S','R','R',' ')}},     \/* Serer *\/\n-  {\"srs\",       {HB_TAG('A','T','H',' ')}},     \/* Sarsi -> Athapaskan *\/\n-  {\"ss\",        {HB_TAG('S','W','Z',' ')}},     \/* Swati *\/\n-  {\"ssh\",       {HB_TAG('A','R','A',' ')}},     \/* Shihhi Arabic -> Arabic *\/\n-  {\"st\",        {HB_TAG('S','O','T',' ')}},     \/* Southern Sotho -> Sotho, Southern *\/\n-  {\"stq\",       {HB_TAG('S','T','Q',' ')}},     \/* Saterfriesisch -> Saterland Frisian *\/\n-  {\"stv\",       {HB_TAG('S','I','G',' ')}},     \/* Silt'e -> Silte Gurage *\/\n-  {\"su\",        {HB_TAG('S','U','N',' ')}},     \/* Sundanese *\/\n-  {\"suk\",       {HB_TAG('S','U','K',' ')}},     \/* Sukuma *\/\n-  {\"suq\",       {HB_TAG('S','U','R',' ')}},     \/* Suri *\/\n-  {\"sv\",        {HB_TAG('S','V','E',' ')}},     \/* Swedish *\/\n-  {\"sva\",       {HB_TAG('S','V','A',' ')}},     \/* Svan *\/\n-  {\"sw\",        {HB_TAG('S','W','K',' ')}},     \/* Swahili [macrolanguage] *\/\n-  {\"swb\",       {HB_TAG('C','M','R',' ')}},     \/* Maore Comorian -> Comorian *\/\n-  {\"swc\",       {HB_TAG('S','W','K',' ')}},     \/* Congo Swahili -> Swahili *\/\n-  {\"swh\",       {HB_TAG('S','W','K',' ')}},     \/* Swahili *\/\n-  {\"swv\",       {HB_TAG('M','A','W',' ')}},     \/* Shekhawati -> Marwari *\/\n-  {\"sxu\",       {HB_TAG('S','X','U',' ')}},     \/* Upper Saxon *\/\n-  {\"syc\",       {HB_TAG('S','Y','R',' ')}},     \/* Classical Syriac -> Syriac *\/\n-  {\"syl\",       {HB_TAG('S','Y','L',' ')}},     \/* Sylheti *\/\n-  {\"syr\",       {HB_TAG('S','Y','R',' ')}},     \/* Syriac [macrolanguage] *\/\n-  {\"szl\",       {HB_TAG('S','Z','L',' ')}},     \/* Silesian *\/\n-  {\"ta\",        {HB_TAG('T','A','M',' ')}},     \/* Tamil *\/\n-  {\"taa\",       {HB_TAG('A','T','H',' ')}},     \/* Lower Tanana -> Athapaskan *\/\n-  {\"tab\",       {HB_TAG('T','A','B',' ')}},     \/* Tabassaran -> Tabasaran *\/\n-  {\"taq\",       {HB_TAG('T','M','H',' ')}},     \/* Tamasheq -> Tamashek *\/\n-  {\"tau\",       {HB_TAG('A','T','H',' ')}},     \/* Upper Tanana -> Athapaskan *\/\n-  {\"tcb\",       {HB_TAG('A','T','H',' ')}},     \/* Tanacross -> Athapaskan *\/\n-  {\"tce\",       {HB_TAG('A','T','H',' ')}},     \/* Southern Tutchone -> Athapaskan *\/\n-  {\"tcp\",       {HB_TAG('Q','I','N',' ')}},     \/* Tawr Chin -> Chin *\/\n-  {\"tcy\",       {HB_TAG('T','U','L',' ')}},     \/* Tulu -> Tumbuka *\/\n-  {\"tcz\",       {HB_TAG('Q','I','N',' ')}},     \/* Thado Chin -> Chin *\/\n-  {\"tdd\",       {HB_TAG('T','D','D',' ')}},     \/* Tai Nüa -> Dehong Dai *\/\n-  {\"tdx\",       {HB_TAG('M','L','G',' ')}},     \/* Tandroy-Mahafaly Malagasy -> Malagasy *\/\n-  {\"te\",        {HB_TAG('T','E','L',' ')}},     \/* Telugu *\/\n-  {\"tec\",       {HB_TAG('K','A','L',' ')}},     \/* Terik -> Kalenjin *\/\n-  {\"tem\",       {HB_TAG('T','M','N',' ')}},     \/* Timne -> Temne *\/\n-  {\"tet\",       {HB_TAG('T','E','T',' ')}},     \/* Tetum *\/\n-  {\"tfn\",       {HB_TAG('A','T','H',' ')}},     \/* Tanaina -> Athapaskan *\/\n-  {\"tg\",        {HB_TAG('T','A','J',' ')}},     \/* Tajik -> Tajiki *\/\n-  {\"tgj\",       {HB_TAG('N','I','S',' ')}},     \/* Tagin -> Nisi *\/\n-  {\"tgx\",       {HB_TAG('A','T','H',' ')}},     \/* Tagish -> Athapaskan *\/\n-  {\"th\",        {HB_TAG('T','H','A',' ')}},     \/* Thai *\/\n-  {\"tht\",       {HB_TAG('A','T','H',' ')}},     \/* Tahltan -> Athapaskan *\/\n-  {\"thv\",       {HB_TAG('T','M','H',' ')}},     \/* Tahaggart Tamahaq -> Tamashek *\/\n-  {\"thz\",       {HB_TAG('T','M','H',' ')}},     \/* Tayart Tamajeq -> Tamashek *\/\n-  {\"ti\",        {HB_TAG('T','G','Y',' ')}},     \/* Tigrinya *\/\n-  {\"tig\",       {HB_TAG('T','G','R',' ')}},     \/* Tigre *\/\n-  {\"tiv\",       {HB_TAG('T','I','V',' ')}},     \/* Tiv *\/\n-  {\"tk\",        {HB_TAG('T','K','M',' ')}},     \/* Turkmen *\/\n-  {\"tkg\",       {HB_TAG('M','L','G',' ')}},     \/* Tesaka Malagasy -> Malagasy *\/\n-  {\"tl\",        {HB_TAG('T','G','L',' ')}},     \/* Tagalog *\/\n-  {\"tmh\",       {HB_TAG('T','M','H',' ')}},     \/* Tamashek [macrolanguage] *\/\n-  {\"tmw\",       {HB_TAG('M','L','Y',' ')}},     \/* Temuan -> Malay *\/\n-  {\"tn\",        {HB_TAG('T','N','A',' ')}},     \/* Tswana *\/\n-  {\"tnf\",       {HB_TAG('D','R','I',' ')}},     \/* Tangshewi (retired code) -> Dari *\/\n-  {\"to\",        {HB_TAG('T','G','N',' ')}},     \/* Tonga (Tonga Islands) -> Tongan *\/\n-  {\"tod\",       {HB_TAG('T','O','D','0')}},     \/* Toma *\/\n-  {\"toi\",       {HB_TAG('T','N','G',' ')}},     \/* Tonga (Zambia) *\/\n-  {\"tol\",       {HB_TAG('A','T','H',' ')}},     \/* Tolowa -> Athapaskan *\/\n-  {\"tpi\",       {HB_TAG('T','P','I',' ')}},     \/* Tok Pisin *\/\n-  {\"tr\",        {HB_TAG('T','R','K',' ')}},     \/* Turkish *\/\n-  {\"tru\",       {HB_TAG('T','U','A',' '),       \/* Turoyo -> Turoyo Aramaic *\/\n-                 HB_TAG('S','Y','R',' ')}},     \/* Turoyo -> Syriac *\/\n-  {\"ts\",        {HB_TAG('T','S','G',' ')}},     \/* Tsonga *\/\n-  {\"tsj\",       {HB_TAG('T','S','J',' ')}},     \/* Tshangla *\/\n-  {\"tt\",        {HB_TAG('T','A','T',' ')}},     \/* Tatar *\/\n-  {\"ttm\",       {HB_TAG('A','T','H',' ')}},     \/* Northern Tutchone -> Athapaskan *\/\n-  {\"ttq\",       {HB_TAG('T','M','H',' ')}},     \/* Tawallammat Tamajaq -> Tamashek *\/\n-  {\"tum\",       {HB_TAG('T','U','M',' ')}},     \/* Tumbuka -> Tulu *\/\n-  {\"tuu\",       {HB_TAG('A','T','H',' ')}},     \/* Tututni -> Athapaskan *\/\n-  {\"tuy\",       {HB_TAG('K','A','L',' ')}},     \/* Tugen -> Kalenjin *\/\n-  {\"tvl\",       {HB_TAG('T','V','L',' ')}},     \/* Tuvalu *\/\n-  {\"tw\",        {HB_TAG('T','W','I',' '),       \/* Twi *\/\n-                 HB_TAG('A','K','A',' ')}},     \/* Twi -> Akan *\/\n-  {\"txc\",       {HB_TAG('A','T','H',' ')}},     \/* Tsetsaut -> Athapaskan *\/\n-  {\"txy\",       {HB_TAG('M','L','G',' ')}},     \/* Tanosy Malagasy -> Malagasy *\/\n-  {\"ty\",        {HB_TAG('T','H','T',' ')}},     \/* Tahitian *\/\n-  {\"tyv\",       {HB_TAG('T','U','V',' ')}},     \/* Tuvinian -> Tuvin *\/\n-  {\"tyz\",       {HB_TAG('T','Y','Z',' ')}},     \/* Tày *\/\n-  {\"tzm\",       {HB_TAG('T','Z','M',' ')}},     \/* Central Atlas Tamazight -> Tamazight *\/\n-  {\"tzo\",       {HB_TAG('T','Z','O',' ')}},     \/* Tzotzil *\/\n-  {\"ubl\",       {HB_TAG('B','I','K',' ')}},     \/* Buhi'non Bikol -> Bikol *\/\n-  {\"udm\",       {HB_TAG('U','D','M',' ')}},     \/* Udmurt *\/\n-  {\"ug\",        {HB_TAG('U','Y','G',' ')}},     \/* Uyghur *\/\n-  {\"uk\",        {HB_TAG('U','K','R',' ')}},     \/* Ukrainian *\/\n-  {\"umb\",       {HB_TAG('U','M','B',' ')}},     \/* Umbundu *\/\n-  {\"unr\",       {HB_TAG('M','U','N',' ')}},     \/* Mundari *\/\n-  {\"ur\",        {HB_TAG('U','R','D',' ')}},     \/* Urdu *\/\n-  {\"urk\",       {HB_TAG('M','L','Y',' ')}},     \/* Urak Lawoi' -> Malay *\/\n-  {\"uz\",        {HB_TAG('U','Z','B',' ')}},     \/* Uzbek [macrolanguage] *\/\n-  {\"uzn\",       {HB_TAG('U','Z','B',' ')}},     \/* Northern Uzbek -> Uzbek *\/\n-  {\"uzs\",       {HB_TAG('U','Z','B',' ')}},     \/* Southern Uzbek -> Uzbek *\/\n-  {\"ve\",        {HB_TAG('V','E','N',' ')}},     \/* Venda *\/\n-  {\"vec\",       {HB_TAG('V','E','C',' ')}},     \/* Venetian *\/\n-  {\"vi\",        {HB_TAG('V','I','T',' ')}},     \/* Vietnamese *\/\n-  {\"vkk\",       {HB_TAG('M','L','Y',' ')}},     \/* Kaur -> Malay *\/\n-  {\"vkt\",       {HB_TAG('M','L','Y',' ')}},     \/* Tenggarong Kutai Malay -> Malay *\/\n-  {\"vls\",       {HB_TAG('F','L','E',' ')}},     \/* Vlaams -> Dutch (Flemish) *\/\n-  {\"vmw\",       {HB_TAG('M','A','K',' ')}},     \/* Makhuwa *\/\n-  {\"vo\",        {HB_TAG('V','O','L',' ')}},     \/* Volapük *\/\n-  {\"vro\",       {HB_TAG('V','R','O',' ')}},     \/* Võro *\/\n-  {\"wa\",        {HB_TAG('W','L','N',' ')}},     \/* Walloon *\/\n-  {\"war\",       {HB_TAG('W','A','R',' ')}},     \/* Waray (Philippines) -> Waray-Waray *\/\n-  {\"wbm\",       {HB_TAG('W','A',' ',' ')}},     \/* Wa *\/\n-  {\"wbr\",       {HB_TAG('W','A','G',' ')}},     \/* Wagdi *\/\n-  {\"wlc\",       {HB_TAG('C','M','R',' ')}},     \/* Mwali Comorian -> Comorian *\/\n-  {\"wle\",       {HB_TAG('S','I','G',' ')}},     \/* Wolane -> Silte Gurage *\/\n-  {\"wlk\",       {HB_TAG('A','T','H',' ')}},     \/* Wailaki -> Athapaskan *\/\n-  {\"wni\",       {HB_TAG('C','M','R',' ')}},     \/* Ndzwani Comorian -> Comorian *\/\n-  {\"wo\",        {HB_TAG('W','L','F',' ')}},     \/* Wolof *\/\n-  {\"wry\",       {HB_TAG('M','A','W',' ')}},     \/* Merwari -> Marwari *\/\n-  {\"wsg\",       {HB_TAG('G','O','N',' ')}},     \/* Adilabad Gondi -> Gondi *\/\n-  {\"wtm\",       {HB_TAG('W','T','M',' ')}},     \/* Mewati *\/\n-  {\"wuu\",       {HB_TAG('Z','H','S',' ')}},     \/* Wu Chinese -> Chinese Simplified *\/\n-  {\"xal\",       {HB_TAG('K','L','M',' '),       \/* Kalmyk *\/\n-                 HB_TAG('T','O','D',' ')}},     \/* Kalmyk -> Todo *\/\n-  {\"xan\",       {HB_TAG('S','E','K',' ')}},     \/* Xamtanga -> Sekota *\/\n-  {\"xh\",        {HB_TAG('X','H','S',' ')}},     \/* Xhosa *\/\n-  {\"xjb\",       {HB_TAG('X','J','B',' ')}},     \/* Minjungbal -> Minjangbal *\/\n-  {\"xkf\",       {HB_TAG('X','K','F',' ')}},     \/* Khengkha *\/\n-  {\"xmm\",       {HB_TAG('M','L','Y',' ')}},     \/* Manado Malay -> Malay *\/\n-  {\"xmv\",       {HB_TAG('M','L','G',' ')}},     \/* Antankarana Malagasy -> Malagasy *\/\n-  {\"xmw\",       {HB_TAG('M','L','G',' ')}},     \/* Tsimihety Malagasy -> Malagasy *\/\n-  {\"xnr\",       {HB_TAG('D','G','R',' ')}},     \/* Kangri -> Dogri *\/\n-  {\"xog\",       {HB_TAG('X','O','G',' ')}},     \/* Soga *\/\n-  {\"xpe\",       {HB_TAG('X','P','E',' ')}},     \/* Liberia Kpelle -> Kpelle (Liberia) *\/\n-  {\"xsl\",       {HB_TAG('S','S','L',' '),       \/* South Slavey *\/\n-                 HB_TAG('S','L','A',' '),       \/* South Slavey -> Slavey *\/\n-                 HB_TAG('A','T','H',' ')}},     \/* South Slavey -> Athapaskan *\/\n-  {\"xst\",       {HB_TAG('S','I','G',' ')}},     \/* Silt'e (retired code) -> Silte Gurage *\/\n-  {\"xwo\",       {HB_TAG('T','O','D',' ')}},     \/* Written Oirat -> Todo *\/\n-  {\"yao\",       {HB_TAG('Y','A','O',' ')}},     \/* Yao *\/\n-  {\"yap\",       {HB_TAG('Y','A','P',' ')}},     \/* Yapese *\/\n-  {\"ybd\",       {HB_TAG('A','R','K',' ')}},     \/* Yangbye (retired code) -> Rakhine *\/\n-  {\"ydd\",       {HB_TAG('J','I','I',' ')}},     \/* Eastern Yiddish -> Yiddish *\/\n-  {\"yi\",        {HB_TAG('J','I','I',' ')}},     \/* Yiddish [macrolanguage] *\/\n-  {\"yih\",       {HB_TAG('J','I','I',' ')}},     \/* Western Yiddish -> Yiddish *\/\n-  {\"yo\",        {HB_TAG('Y','B','A',' ')}},     \/* Yoruba *\/\n-  {\"yos\",       {HB_TAG('Q','I','N',' ')}},     \/* Yos (retired code) -> Chin *\/\n-  {\"yrk\",       {HB_TAG('T','N','E',' '),       \/* Nenets -> Tundra Nenets *\/\n-                 HB_TAG('F','N','E',' ')}},     \/* Nenets -> Forest Nenets *\/\n-  {\"yue\",       {HB_TAG('Z','H','H',' ')}},     \/* Yue Chinese -> Chinese, Hong Kong SAR *\/\n-  {\"za\",        {HB_TAG('Z','H','A',' ')}},     \/* Zhuang [macrolanguage] *\/\n-  {\"zch\",       {HB_TAG('Z','H','A',' ')}},     \/* Central Hongshuihe Zhuang -> Zhuang *\/\n-  {\"zdj\",       {HB_TAG('C','M','R',' ')}},     \/* Ngazidja Comorian -> Comorian *\/\n-  {\"zea\",       {HB_TAG('Z','E','A',' ')}},     \/* Zeeuws -> Zealandic *\/\n-  {\"zeh\",       {HB_TAG('Z','H','A',' ')}},     \/* Eastern Hongshuihe Zhuang -> Zhuang *\/\n-  {\"zgb\",       {HB_TAG('Z','H','A',' ')}},     \/* Guibei Zhuang -> Zhuang *\/\n-  {\"zgh\",       {HB_TAG('Z','G','H',' ')}},     \/* Standard Moroccan Tamazight *\/\n-  {\"zgm\",       {HB_TAG('Z','H','A',' ')}},     \/* Minz Zhuang -> Zhuang *\/\n-  {\"zgn\",       {HB_TAG('Z','H','A',' ')}},     \/* Guibian Zhuang -> Zhuang *\/\n-  {\"zh\",        {HB_TAG('Z','H','S',' ')}},     \/* Chinese [macrolanguage] -> Chinese Simplified *\/\n-  {\"zhd\",       {HB_TAG('Z','H','A',' ')}},     \/* Dai Zhuang -> Zhuang *\/\n-  {\"zhn\",       {HB_TAG('Z','H','A',' ')}},     \/* Nong Zhuang -> Zhuang *\/\n-  {\"zlj\",       {HB_TAG('Z','H','A',' ')}},     \/* Liujiang Zhuang -> Zhuang *\/\n-  {\"zlm\",       {HB_TAG('M','L','Y',' ')}},     \/* Malay *\/\n-  {\"zln\",       {HB_TAG('Z','H','A',' ')}},     \/* Lianshan Zhuang -> Zhuang *\/\n-  {\"zlq\",       {HB_TAG('Z','H','A',' ')}},     \/* Liuqian Zhuang -> Zhuang *\/\n-  {\"zmi\",       {HB_TAG('M','L','Y',' ')}},     \/* Negeri Sembilan Malay -> Malay *\/\n-  {\"zne\",       {HB_TAG('Z','N','D',' ')}},     \/* Zande *\/\n-  {\"zom\",       {HB_TAG('Q','I','N',' ')}},     \/* Zou -> Chin *\/\n-  {\"zqe\",       {HB_TAG('Z','H','A',' ')}},     \/* Qiubei Zhuang -> Zhuang *\/\n-  {\"zsm\",       {HB_TAG('M','L','Y',' ')}},     \/* Standard Malay -> Malay *\/\n-  {\"zu\",        {HB_TAG('Z','U','L',' ')}},     \/* Zulu *\/\n-  {\"zum\",       {HB_TAG('L','R','C',' ')}},     \/* Kumzari -> Luri *\/\n-  {\"zyb\",       {HB_TAG('Z','H','A',' ')}},     \/* Yongbei Zhuang -> Zhuang *\/\n-  {\"zyg\",       {HB_TAG('Z','H','A',' ')}},     \/* Yang Zhuang -> Zhuang *\/\n-  {\"zyj\",       {HB_TAG('Z','H','A',' ')}},     \/* Youjiang Zhuang -> Zhuang *\/\n-  {\"zyn\",       {HB_TAG('Z','H','A',' ')}},     \/* Yongnan Zhuang -> Zhuang *\/\n-  {\"zza\",       {HB_TAG('Z','Z','A',' ')}},     \/* Zazaki [macrolanguage] *\/\n-  {\"zzj\",       {HB_TAG('Z','H','A',' ')}},     \/* Zuojiang Zhuang -> Zhuang *\/\n+  {\"aa\",        HB_TAG('A','F','R',' ')},       \/* Afar *\/\n+  {\"aae\",       HB_TAG('S','Q','I',' ')},       \/* Arbëreshë Albanian -> Albanian *\/\n+  {\"aao\",       HB_TAG('A','R','A',' ')},       \/* Algerian Saharan Arabic -> Arabic *\/\n+  {\"aat\",       HB_TAG('S','Q','I',' ')},       \/* Arvanitika Albanian -> Albanian *\/\n+  {\"ab\",        HB_TAG('A','B','K',' ')},       \/* Abkhazian *\/\n+  {\"abh\",       HB_TAG('A','R','A',' ')},       \/* Tajiki Arabic -> Arabic *\/\n+  {\"abq\",       HB_TAG('A','B','A',' ')},       \/* Abaza *\/\n+  {\"abv\",       HB_TAG('A','R','A',' ')},       \/* Baharna Arabic -> Arabic *\/\n+  {\"acf\",       HB_TAG('F','A','N',' ')},       \/* Saint Lucian Creole French -> French Antillean *\/\n+\/*{\"ach\",       HB_TAG('A','C','H',' ')},*\/     \/* Acoli -> Acholi *\/\n+  {\"acm\",       HB_TAG('A','R','A',' ')},       \/* Mesopotamian Arabic -> Arabic *\/\n+  {\"acq\",       HB_TAG('A','R','A',' ')},       \/* Ta'izzi-Adeni Arabic -> Arabic *\/\n+\/*{\"acr\",       HB_TAG('A','C','R',' ')},*\/     \/* Achi *\/\n+  {\"acw\",       HB_TAG('A','R','A',' ')},       \/* Hijazi Arabic -> Arabic *\/\n+  {\"acx\",       HB_TAG('A','R','A',' ')},       \/* Omani Arabic -> Arabic *\/\n+  {\"acy\",       HB_TAG('A','R','A',' ')},       \/* Cypriot Arabic -> Arabic *\/\n+  {\"ada\",       HB_TAG('D','N','G',' ')},       \/* Adangme -> Dangme *\/\n+  {\"adf\",       HB_TAG('A','R','A',' ')},       \/* Dhofari Arabic -> Arabic *\/\n+  {\"adp\",       HB_TAG('D','Z','N',' ')},       \/* Adap (retired code) -> Dzongkha *\/\n+\/*{\"ady\",       HB_TAG('A','D','Y',' ')},*\/     \/* Adyghe *\/\n+  {\"aeb\",       HB_TAG('A','R','A',' ')},       \/* Tunisian Arabic -> Arabic *\/\n+  {\"aec\",       HB_TAG('A','R','A',' ')},       \/* Saidi Arabic -> Arabic *\/\n+  {\"af\",        HB_TAG('A','F','K',' ')},       \/* Afrikaans *\/\n+  {\"afb\",       HB_TAG('A','R','A',' ')},       \/* Gulf Arabic -> Arabic *\/\n+  {\"ahg\",       HB_TAG('A','G','W',' ')},       \/* Qimant -> Agaw *\/\n+  {\"aht\",       HB_TAG('A','T','H',' ')},       \/* Ahtena -> Athapaskan *\/\n+  {\"aii\",       HB_TAG('S','W','A',' ')},       \/* Assyrian Neo-Aramaic -> Swadaya Aramaic *\/\n+  {\"aii\",       HB_TAG('S','Y','R',' ')},       \/* Assyrian Neo-Aramaic -> Syriac *\/\n+\/*{\"aio\",       HB_TAG('A','I','O',' ')},*\/     \/* Aiton *\/\n+  {\"aiw\",       HB_TAG('A','R','I',' ')},       \/* Aari *\/\n+  {\"ajp\",       HB_TAG('A','R','A',' ')},       \/* South Levantine Arabic -> Arabic *\/\n+  {\"ak\",        HB_TAG('A','K','A',' ')},       \/* Akan [macrolanguage] *\/\n+  {\"ak\",        HB_TAG('T','W','I',' ')},       \/* Akan [macrolanguage] -> Twi *\/\n+  {\"aln\",       HB_TAG('S','Q','I',' ')},       \/* Gheg Albanian -> Albanian *\/\n+  {\"als\",       HB_TAG('S','Q','I',' ')},       \/* Tosk Albanian -> Albanian *\/\n+\/*{\"alt\",       HB_TAG('A','L','T',' ')},*\/     \/* Southern Altai -> Altai *\/\n+  {\"am\",        HB_TAG('A','M','H',' ')},       \/* Amharic *\/\n+  {\"amf\",       HB_TAG('H','B','N',' ')},       \/* Hamer-Banna -> Hammer-Banna *\/\n+  {\"amw\",       HB_TAG('S','Y','R',' ')},       \/* Western Neo-Aramaic -> Syriac *\/\n+  {\"an\",        HB_TAG('A','R','G',' ')},       \/* Aragonese *\/\n+\/*{\"ang\",       HB_TAG('A','N','G',' ')},*\/     \/* Old English (ca. 450-1100) -> Anglo-Saxon *\/\n+  {\"apc\",       HB_TAG('A','R','A',' ')},       \/* North Levantine Arabic -> Arabic *\/\n+  {\"apd\",       HB_TAG('A','R','A',' ')},       \/* Sudanese Arabic -> Arabic *\/\n+  {\"apj\",       HB_TAG('A','T','H',' ')},       \/* Jicarilla Apache -> Athapaskan *\/\n+  {\"apk\",       HB_TAG('A','T','H',' ')},       \/* Kiowa Apache -> Athapaskan *\/\n+  {\"apl\",       HB_TAG('A','T','H',' ')},       \/* Lipan Apache -> Athapaskan *\/\n+  {\"apm\",       HB_TAG('A','T','H',' ')},       \/* Mescalero-Chiricahua Apache -> Athapaskan *\/\n+  {\"apw\",       HB_TAG('A','T','H',' ')},       \/* Western Apache -> Athapaskan *\/\n+  {\"ar\",        HB_TAG('A','R','A',' ')},       \/* Arabic [macrolanguage] *\/\n+  {\"arb\",       HB_TAG('A','R','A',' ')},       \/* Standard Arabic -> Arabic *\/\n+  {\"arn\",       HB_TAG('M','A','P',' ')},       \/* Mapudungun *\/\n+  {\"arq\",       HB_TAG('A','R','A',' ')},       \/* Algerian Arabic -> Arabic *\/\n+  {\"ars\",       HB_TAG('A','R','A',' ')},       \/* Najdi Arabic -> Arabic *\/\n+  {\"ary\",       HB_TAG('M','O','R',' ')},       \/* Moroccan Arabic -> Moroccan *\/\n+  {\"arz\",       HB_TAG('A','R','A',' ')},       \/* Egyptian Arabic -> Arabic *\/\n+  {\"as\",        HB_TAG('A','S','M',' ')},       \/* Assamese *\/\n+\/*{\"ast\",       HB_TAG('A','S','T',' ')},*\/     \/* Asturian *\/\n+\/*{\"ath\",       HB_TAG('A','T','H',' ')},*\/     \/* Athapascan [family] -> Athapaskan *\/\n+  {\"atj\",       HB_TAG('R','C','R',' ')},       \/* Atikamekw -> R-Cree *\/\n+  {\"atv\",       HB_TAG('A','L','T',' ')},       \/* Northern Altai -> Altai *\/\n+  {\"auz\",       HB_TAG('A','R','A',' ')},       \/* Uzbeki Arabic -> Arabic *\/\n+  {\"av\",        HB_TAG('A','V','R',' ')},       \/* Avaric -> Avar *\/\n+  {\"avl\",       HB_TAG('A','R','A',' ')},       \/* Eastern Egyptian Bedawi Arabic -> Arabic *\/\n+\/*{\"awa\",       HB_TAG('A','W','A',' ')},*\/     \/* Awadhi *\/\n+  {\"ay\",        HB_TAG('A','Y','M',' ')},       \/* Aymara [macrolanguage] *\/\n+  {\"ayc\",       HB_TAG('A','Y','M',' ')},       \/* Southern Aymara -> Aymara *\/\n+  {\"ayh\",       HB_TAG('A','R','A',' ')},       \/* Hadrami Arabic -> Arabic *\/\n+  {\"ayl\",       HB_TAG('A','R','A',' ')},       \/* Libyan Arabic -> Arabic *\/\n+  {\"ayn\",       HB_TAG('A','R','A',' ')},       \/* Sanaani Arabic -> Arabic *\/\n+  {\"ayp\",       HB_TAG('A','R','A',' ')},       \/* North Mesopotamian Arabic -> Arabic *\/\n+  {\"ayr\",       HB_TAG('A','Y','M',' ')},       \/* Central Aymara -> Aymara *\/\n+  {\"az\",        HB_TAG('A','Z','E',' ')},       \/* Azerbaijani [macrolanguage] *\/\n+\/*{\"azb\",       HB_TAG('A','Z','B',' ')},*\/     \/* South Azerbaijani -> Torki *\/\n+  {\"azj\",       HB_TAG('A','Z','E',' ')},       \/* North Azerbaijani -> Azerbaijani *\/\n+  {\"ba\",        HB_TAG('B','S','H',' ')},       \/* Bashkir *\/\n+  {\"bad\",       HB_TAG('B','A','D','0')},       \/* Banda [family] *\/\n+  {\"bai\",       HB_TAG('B','M','L',' ')},       \/* Bamileke [family] *\/\n+  {\"bal\",       HB_TAG('B','L','I',' ')},       \/* Baluchi [macrolanguage] *\/\n+\/*{\"ban\",       HB_TAG('B','A','N',' ')},*\/     \/* Balinese *\/\n+\/*{\"bar\",       HB_TAG('B','A','R',' ')},*\/     \/* Bavarian *\/\n+\/*{\"bbc\",       HB_TAG('B','B','C',' ')},*\/     \/* Batak Toba *\/\n+  {\"bbz\",       HB_TAG('A','R','A',' ')},       \/* Babalia Creole Arabic (retired code) -> Arabic *\/\n+  {\"bcc\",       HB_TAG('B','L','I',' ')},       \/* Southern Balochi -> Baluchi *\/\n+  {\"bci\",       HB_TAG('B','A','U',' ')},       \/* Baoulé -> Baulé *\/\n+  {\"bcl\",       HB_TAG('B','I','K',' ')},       \/* Central Bikol -> Bikol *\/\n+  {\"bcq\",       HB_TAG('B','C','H',' ')},       \/* Bench *\/\n+  {\"bcr\",       HB_TAG('A','T','H',' ')},       \/* Babine -> Athapaskan *\/\n+\/*{\"bdy\",       HB_TAG('B','D','Y',' ')},*\/     \/* Bandjalang *\/\n+  {\"be\",        HB_TAG('B','E','L',' ')},       \/* Belarusian -> Belarussian *\/\n+  {\"bea\",       HB_TAG('A','T','H',' ')},       \/* Beaver -> Athapaskan *\/\n+  {\"beb\",       HB_TAG('B','T','I',' ')},       \/* Bebele -> Beti *\/\n+\/*{\"bem\",       HB_TAG('B','E','M',' ')},*\/     \/* Bemba (Zambia) *\/\n+  {\"ber\",       HB_TAG('B','B','R',' ')},       \/* Berber [family] *\/\n+  {\"bfq\",       HB_TAG('B','A','D',' ')},       \/* Badaga *\/\n+  {\"bft\",       HB_TAG('B','L','T',' ')},       \/* Balti *\/\n+  {\"bfu\",       HB_TAG('L','A','H',' ')},       \/* Gahri -> Lahuli *\/\n+  {\"bfy\",       HB_TAG('B','A','G',' ')},       \/* Bagheli -> Baghelkhandi *\/\n+  {\"bg\",        HB_TAG('B','G','R',' ')},       \/* Bulgarian *\/\n+\/*{\"bgc\",       HB_TAG('B','G','C',' ')},*\/     \/* Haryanvi *\/\n+  {\"bgn\",       HB_TAG('B','L','I',' ')},       \/* Western Balochi -> Baluchi *\/\n+  {\"bgp\",       HB_TAG('B','L','I',' ')},       \/* Eastern Balochi -> Baluchi *\/\n+\/*{\"bgq\",       HB_TAG('B','G','Q',' ')},*\/     \/* Bagri *\/\n+  {\"bgr\",       HB_TAG('Q','I','N',' ')},       \/* Bawm Chin -> Chin *\/\n+  {\"bhb\",       HB_TAG('B','H','I',' ')},       \/* Bhili *\/\n+\/*{\"bhi\",       HB_TAG('B','H','I',' ')},*\/     \/* Bhilali -> Bhili *\/\n+  {\"bhk\",       HB_TAG('B','I','K',' ')},       \/* Albay Bicolano (retired code) -> Bikol *\/\n+\/*{\"bho\",       HB_TAG('B','H','O',' ')},*\/     \/* Bhojpuri *\/\n+  {\"bhr\",       HB_TAG('M','L','G',' ')},       \/* Bara Malagasy -> Malagasy *\/\n+  {\"bi\",        HB_TAG('B','I','S',' ')},       \/* Bislama *\/\n+\/*{\"bik\",       HB_TAG('B','I','K',' ')},*\/     \/* Bikol [macrolanguage] *\/\n+  {\"bin\",       HB_TAG('E','D','O',' ')},       \/* Edo *\/\n+\/*{\"bjj\",       HB_TAG('B','J','J',' ')},*\/     \/* Kanauji *\/\n+  {\"bjn\",       HB_TAG('M','L','Y',' ')},       \/* Banjar -> Malay *\/\n+  {\"bjq\",       HB_TAG('M','L','G',' ')},       \/* Southern Betsimisaraka Malagasy (retired code) -> Malagasy *\/\n+  {\"bjt\",       HB_TAG('B','L','N',' ')},       \/* Balanta-Ganja -> Balante *\/\n+  {\"bla\",       HB_TAG('B','K','F',' ')},       \/* Siksika -> Blackfoot *\/\n+  {\"ble\",       HB_TAG('B','L','N',' ')},       \/* Balanta-Kentohe -> Balante *\/\n+\/*{\"blk\",       HB_TAG('B','L','K',' ')},*\/     \/* Pa’o Karen *\/\n+  {\"bln\",       HB_TAG('B','I','K',' ')},       \/* Southern Catanduanes Bikol -> Bikol *\/\n+  {\"bm\",        HB_TAG('B','M','B',' ')},       \/* Bambara (Bamanankan) *\/\n+  {\"bmm\",       HB_TAG('M','L','G',' ')},       \/* Northern Betsimisaraka Malagasy -> Malagasy *\/\n+  {\"bn\",        HB_TAG('B','E','N',' ')},       \/* Bengali *\/\n+  {\"bo\",        HB_TAG('T','I','B',' ')},       \/* Tibetan *\/\n+\/*{\"bpy\",       HB_TAG('B','P','Y',' ')},*\/     \/* Bishnupriya -> Bishnupriya Manipuri *\/\n+  {\"bqi\",       HB_TAG('L','R','C',' ')},       \/* Bakhtiari -> Luri *\/\n+  {\"br\",        HB_TAG('B','R','E',' ')},       \/* Breton *\/\n+  {\"bra\",       HB_TAG('B','R','I',' ')},       \/* Braj -> Braj Bhasha *\/\n+\/*{\"brh\",       HB_TAG('B','R','H',' ')},*\/     \/* Brahui *\/\n+\/*{\"brx\",       HB_TAG('B','R','X',' ')},*\/     \/* Bodo (India) *\/\n+  {\"bs\",        HB_TAG('B','O','S',' ')},       \/* Bosnian *\/\n+\/*{\"bsk\",       HB_TAG('B','S','K',' ')},*\/     \/* Burushaski *\/\n+  {\"btb\",       HB_TAG('B','T','I',' ')},       \/* Beti (Cameroon) (retired code) *\/\n+  {\"btj\",       HB_TAG('M','L','Y',' ')},       \/* Bacanese Malay -> Malay *\/\n+  {\"bto\",       HB_TAG('B','I','K',' ')},       \/* Rinconada Bikol -> Bikol *\/\n+\/*{\"bts\",       HB_TAG('B','T','S',' ')},*\/     \/* Batak Simalungun *\/\n+\/*{\"bug\",       HB_TAG('B','U','G',' ')},*\/     \/* Buginese -> Bugis *\/\n+  {\"bum\",       HB_TAG('B','T','I',' ')},       \/* Bulu (Cameroon) -> Beti *\/\n+  {\"bve\",       HB_TAG('M','L','Y',' ')},       \/* Berau Malay -> Malay *\/\n+  {\"bvu\",       HB_TAG('M','L','Y',' ')},       \/* Bukit Malay -> Malay *\/\n+  {\"bxk\",       HB_TAG('L','U','H',' ')},       \/* Bukusu -> Luyia *\/\n+  {\"bxp\",       HB_TAG('B','T','I',' ')},       \/* Bebil -> Beti *\/\n+  {\"bxr\",       HB_TAG('R','B','U',' ')},       \/* Russia Buriat -> Russian Buriat *\/\n+  {\"byn\",       HB_TAG('B','I','L',' ')},       \/* Bilin -> Bilen *\/\n+\/*{\"byv\",       HB_TAG('B','Y','V',' ')},*\/     \/* Medumba *\/\n+  {\"bzc\",       HB_TAG('M','L','G',' ')},       \/* Southern Betsimisaraka Malagasy -> Malagasy *\/\n+  {\"ca\",        HB_TAG('C','A','T',' ')},       \/* Catalan *\/\n+  {\"caf\",       HB_TAG('C','R','R',' ')},       \/* Southern Carrier -> Carrier *\/\n+  {\"caf\",       HB_TAG('A','T','H',' ')},       \/* Southern Carrier -> Athapaskan *\/\n+\/*{\"cak\",       HB_TAG('C','A','K',' ')},*\/     \/* Kaqchikel *\/\n+\/*{\"cbk\",       HB_TAG('C','B','K',' ')},*\/     \/* Chavacano -> Zamboanga Chavacano *\/\n+  {\"cbl\",       HB_TAG('Q','I','N',' ')},       \/* Bualkhaw Chin -> Chin *\/\n+  {\"cco\",       HB_TAG('C','C','H','N')},       \/* Comaltepec Chinantec -> Chinantec *\/\n+  {\"ccq\",       HB_TAG('A','R','K',' ')},       \/* Chaungtha (retired code) -> Rakhine *\/\n+  {\"cdo\",       HB_TAG('Z','H','S',' ')},       \/* Min Dong Chinese -> Chinese Simplified *\/\n+  {\"ce\",        HB_TAG('C','H','E',' ')},       \/* Chechen *\/\n+\/*{\"ceb\",       HB_TAG('C','E','B',' ')},*\/     \/* Cebuano *\/\n+  {\"cfm\",       HB_TAG('H','A','L',' ')},       \/* Halam (Falam Chin) *\/\n+\/*{\"cgg\",       HB_TAG('C','G','G',' ')},*\/     \/* Chiga *\/\n+  {\"ch\",        HB_TAG('C','H','A',' ')},       \/* Chamorro *\/\n+  {\"chj\",       HB_TAG('C','C','H','N')},       \/* Ojitlán Chinantec -> Chinantec *\/\n+  {\"chk\",       HB_TAG('C','H','K','0')},       \/* Chuukese *\/\n+\/*{\"cho\",       HB_TAG('C','H','O',' ')},*\/     \/* Choctaw *\/\n+  {\"chp\",       HB_TAG('C','H','P',' ')},       \/* Chipewyan *\/\n+  {\"chp\",       HB_TAG('S','A','Y',' ')},       \/* Chipewyan -> Sayisi *\/\n+  {\"chp\",       HB_TAG('A','T','H',' ')},       \/* Chipewyan -> Athapaskan *\/\n+  {\"chq\",       HB_TAG('C','C','H','N')},       \/* Quiotepec Chinantec -> Chinantec *\/\n+\/*{\"chr\",       HB_TAG('C','H','R',' ')},*\/     \/* Cherokee *\/\n+\/*{\"chy\",       HB_TAG('C','H','Y',' ')},*\/     \/* Cheyenne *\/\n+  {\"chz\",       HB_TAG('C','C','H','N')},       \/* Ozumacín Chinantec -> Chinantec *\/\n+  {\"ciw\",       HB_TAG('O','J','B',' ')},       \/* Chippewa -> Ojibway *\/\n+\/*{\"cja\",       HB_TAG('C','J','A',' ')},*\/     \/* Western Cham *\/\n+\/*{\"cjm\",       HB_TAG('C','J','M',' ')},*\/     \/* Eastern Cham *\/\n+  {\"cjy\",       HB_TAG('Z','H','S',' ')},       \/* Jinyu Chinese -> Chinese Simplified *\/\n+  {\"cka\",       HB_TAG('Q','I','N',' ')},       \/* Khumi Awa Chin (retired code) -> Chin *\/\n+  {\"ckb\",       HB_TAG('K','U','R',' ')},       \/* Central Kurdish -> Kurdish *\/\n+  {\"ckt\",       HB_TAG('C','H','K',' ')},       \/* Chukot -> Chukchi *\/\n+  {\"clc\",       HB_TAG('A','T','H',' ')},       \/* Chilcotin -> Athapaskan *\/\n+  {\"cld\",       HB_TAG('S','Y','R',' ')},       \/* Chaldean Neo-Aramaic -> Syriac *\/\n+  {\"cle\",       HB_TAG('C','C','H','N')},       \/* Lealao Chinantec -> Chinantec *\/\n+  {\"cmn\",       HB_TAG('Z','H','S',' ')},       \/* Mandarin Chinese -> Chinese Simplified *\/\n+  {\"cmr\",       HB_TAG('Q','I','N',' ')},       \/* Mro-Khimi Chin -> Chin *\/\n+  {\"cnb\",       HB_TAG('Q','I','N',' ')},       \/* Chinbon Chin -> Chin *\/\n+  {\"cnh\",       HB_TAG('Q','I','N',' ')},       \/* Hakha Chin -> Chin *\/\n+  {\"cnk\",       HB_TAG('Q','I','N',' ')},       \/* Khumi Chin -> Chin *\/\n+  {\"cnl\",       HB_TAG('C','C','H','N')},       \/* Lalana Chinantec -> Chinantec *\/\n+  {\"cnp\",       HB_TAG('Z','H','S',' ')},       \/* Northern Ping Chinese -> Chinese Simplified *\/\n+  {\"cnt\",       HB_TAG('C','C','H','N')},       \/* Tepetotutla Chinantec -> Chinantec *\/\n+  {\"cnw\",       HB_TAG('Q','I','N',' ')},       \/* Ngawn Chin -> Chin *\/\n+  {\"co\",        HB_TAG('C','O','S',' ')},       \/* Corsican *\/\n+  {\"coa\",       HB_TAG('M','L','Y',' ')},       \/* Cocos Islands Malay -> Malay *\/\n+\/*{\"cop\",       HB_TAG('C','O','P',' ')},*\/     \/* Coptic *\/\n+  {\"coq\",       HB_TAG('A','T','H',' ')},       \/* Coquille -> Athapaskan *\/\n+  {\"cpa\",       HB_TAG('C','C','H','N')},       \/* Palantla Chinantec -> Chinantec *\/\n+  {\"cpe\",       HB_TAG('C','P','P',' ')},       \/* English-based creoles and pidgins [family] -> Creoles *\/\n+  {\"cpf\",       HB_TAG('C','P','P',' ')},       \/* French-based creoles and pidgins [family] -> Creoles *\/\n+\/*{\"cpp\",       HB_TAG('C','P','P',' ')},*\/     \/* Portuguese-based creoles and pidgins [family] -> Creoles *\/\n+  {\"cpx\",       HB_TAG('Z','H','S',' ')},       \/* Pu-Xian Chinese -> Chinese Simplified *\/\n+  {\"cqd\",       HB_TAG('H','M','N',' ')},       \/* Chuanqiandian Cluster Miao -> Hmong *\/\n+  {\"cqu\",       HB_TAG('Q','U','H',' ')},       \/* Chilean Quechua (retired code) -> Quechua (Bolivia) *\/\n+  {\"cr\",        HB_TAG('C','R','E',' ')},       \/* Cree [macrolanguage] *\/\n+  {\"cr\",        HB_TAG('Y','C','R',' ')},       \/* Cree [macrolanguage] -> Y-Cree *\/\n+  {\"crh\",       HB_TAG('C','R','T',' ')},       \/* Crimean Tatar *\/\n+  {\"crj\",       HB_TAG('E','C','R',' ')},       \/* Southern East Cree -> Eastern Cree *\/\n+  {\"crk\",       HB_TAG('W','C','R',' ')},       \/* Plains Cree -> West-Cree *\/\n+  {\"crl\",       HB_TAG('E','C','R',' ')},       \/* Northern East Cree -> Eastern Cree *\/\n+  {\"crm\",       HB_TAG('M','C','R',' ')},       \/* Moose Cree *\/\n+  {\"crm\",       HB_TAG('L','C','R',' ')},       \/* Moose Cree -> L-Cree *\/\n+  {\"crp\",       HB_TAG('C','P','P',' ')},       \/* Creoles and pidgins [family] -> Creoles *\/\n+  {\"crx\",       HB_TAG('C','R','R',' ')},       \/* Carrier *\/\n+  {\"crx\",       HB_TAG('A','T','H',' ')},       \/* Carrier -> Athapaskan *\/\n+  {\"cs\",        HB_TAG('C','S','Y',' ')},       \/* Czech *\/\n+  {\"csa\",       HB_TAG('C','C','H','N')},       \/* Chiltepec Chinantec -> Chinantec *\/\n+\/*{\"csb\",       HB_TAG('C','S','B',' ')},*\/     \/* Kashubian *\/\n+  {\"csh\",       HB_TAG('Q','I','N',' ')},       \/* Asho Chin -> Chin *\/\n+  {\"cso\",       HB_TAG('C','C','H','N')},       \/* Sochiapam Chinantec -> Chinantec *\/\n+  {\"csp\",       HB_TAG('Z','H','S',' ')},       \/* Southern Ping Chinese -> Chinese Simplified *\/\n+  {\"csw\",       HB_TAG('N','C','R',' ')},       \/* Swampy Cree -> N-Cree *\/\n+  {\"csw\",       HB_TAG('N','H','C',' ')},       \/* Swampy Cree -> Norway House Cree *\/\n+  {\"csy\",       HB_TAG('Q','I','N',' ')},       \/* Siyin Chin -> Chin *\/\n+  {\"ctc\",       HB_TAG('A','T','H',' ')},       \/* Chetco -> Athapaskan *\/\n+  {\"ctd\",       HB_TAG('Q','I','N',' ')},       \/* Tedim Chin -> Chin *\/\n+  {\"cte\",       HB_TAG('C','C','H','N')},       \/* Tepinapa Chinantec -> Chinantec *\/\n+\/*{\"ctg\",       HB_TAG('C','T','G',' ')},*\/     \/* Chittagonian *\/\n+  {\"ctl\",       HB_TAG('C','C','H','N')},       \/* Tlacoatzintepec Chinantec -> Chinantec *\/\n+  {\"cts\",       HB_TAG('B','I','K',' ')},       \/* Northern Catanduanes Bikol -> Bikol *\/\n+  {\"cu\",        HB_TAG('C','S','L',' ')},       \/* Church Slavonic *\/\n+  {\"cuc\",       HB_TAG('C','C','H','N')},       \/* Usila Chinantec -> Chinantec *\/\n+\/*{\"cuk\",       HB_TAG('C','U','K',' ')},*\/     \/* San Blas Kuna *\/\n+  {\"cv\",        HB_TAG('C','H','U',' ')},       \/* Chuvash *\/\n+  {\"cvn\",       HB_TAG('C','C','H','N')},       \/* Valle Nacional Chinantec -> Chinantec *\/\n+  {\"cwd\",       HB_TAG('D','C','R',' ')},       \/* Woods Cree *\/\n+  {\"cwd\",       HB_TAG('T','C','R',' ')},       \/* Woods Cree -> TH-Cree *\/\n+  {\"cy\",        HB_TAG('W','E','L',' ')},       \/* Welsh *\/\n+  {\"czh\",       HB_TAG('Z','H','S',' ')},       \/* Huizhou Chinese -> Chinese Simplified *\/\n+  {\"czo\",       HB_TAG('Z','H','S',' ')},       \/* Min Zhong Chinese -> Chinese Simplified *\/\n+  {\"czt\",       HB_TAG('Q','I','N',' ')},       \/* Zotung Chin -> Chin *\/\n+  {\"da\",        HB_TAG('D','A','N',' ')},       \/* Danish *\/\n+  {\"dao\",       HB_TAG('Q','I','N',' ')},       \/* Daai Chin -> Chin *\/\n+  {\"dap\",       HB_TAG('N','I','S',' ')},       \/* Nisi (India) (retired code) *\/\n+\/*{\"dar\",       HB_TAG('D','A','R',' ')},*\/     \/* Dargwa *\/\n+\/*{\"dax\",       HB_TAG('D','A','X',' ')},*\/     \/* Dayi *\/\n+  {\"de\",        HB_TAG('D','E','U',' ')},       \/* German *\/\n+  {\"den\",       HB_TAG('S','L','A',' ')},       \/* Slave (Athapascan) [macrolanguage] -> Slavey *\/\n+  {\"den\",       HB_TAG('A','T','H',' ')},       \/* Slave (Athapascan) [macrolanguage] -> Athapaskan *\/\n+\/*{\"dgo\",       HB_TAG('D','G','O',' ')},*\/     \/* Dogri *\/\n+  {\"dgr\",       HB_TAG('A','T','H',' ')},       \/* Dogrib -> Athapaskan *\/\n+  {\"dhd\",       HB_TAG('M','A','W',' ')},       \/* Dhundari -> Marwari *\/\n+\/*{\"dhg\",       HB_TAG('D','H','G',' ')},*\/     \/* Dhangu *\/\n+  {\"dib\",       HB_TAG('D','N','K',' ')},       \/* South Central Dinka -> Dinka *\/\n+  {\"dik\",       HB_TAG('D','N','K',' ')},       \/* Southwestern Dinka -> Dinka *\/\n+  {\"din\",       HB_TAG('D','N','K',' ')},       \/* Dinka [macrolanguage] *\/\n+  {\"dip\",       HB_TAG('D','N','K',' ')},       \/* Northeastern Dinka -> Dinka *\/\n+\/*{\"diq\",       HB_TAG('D','I','Q',' ')},*\/     \/* Dimli *\/\n+  {\"diw\",       HB_TAG('D','N','K',' ')},       \/* Northwestern Dinka -> Dinka *\/\n+  {\"dje\",       HB_TAG('D','J','R',' ')},       \/* Zarma *\/\n+  {\"djr\",       HB_TAG('D','J','R','0')},       \/* Djambarrpuyngu *\/\n+  {\"dks\",       HB_TAG('D','N','K',' ')},       \/* Southeastern Dinka -> Dinka *\/\n+  {\"dng\",       HB_TAG('D','U','N',' ')},       \/* Dungan *\/\n+\/*{\"dnj\",       HB_TAG('D','N','J',' ')},*\/     \/* Dan *\/\n+  {\"doi\",       HB_TAG('D','G','R',' ')},       \/* Dogri [macrolanguage] *\/\n+  {\"drh\",       HB_TAG('M','N','G',' ')},       \/* Darkhat (retired code) -> Mongolian *\/\n+  {\"drw\",       HB_TAG('D','R','I',' ')},       \/* Darwazi (retired code) -> Dari *\/\n+  {\"dsb\",       HB_TAG('L','S','B',' ')},       \/* Lower Sorbian *\/\n+  {\"dty\",       HB_TAG('N','E','P',' ')},       \/* Dotyali -> Nepali *\/\n+\/*{\"duj\",       HB_TAG('D','U','J',' ')},*\/     \/* Dhuwal (retired code) *\/\n+  {\"dup\",       HB_TAG('M','L','Y',' ')},       \/* Duano -> Malay *\/\n+  {\"dv\",        HB_TAG('D','I','V',' ')},       \/* Divehi (Dhivehi, Maldivian) *\/\n+  {\"dv\",        HB_TAG('D','H','V',' ')},       \/* Divehi (Dhivehi, Maldivian) (deprecated) *\/\n+  {\"dwk\",       HB_TAG('K','U','I',' ')},       \/* Dawik Kui -> Kui *\/\n+  {\"dwu\",       HB_TAG('D','U','J',' ')},       \/* Dhuwal *\/\n+  {\"dwy\",       HB_TAG('D','U','J',' ')},       \/* Dhuwaya -> Dhuwal *\/\n+  {\"dyu\",       HB_TAG('J','U','L',' ')},       \/* Dyula -> Jula *\/\n+  {\"dz\",        HB_TAG('D','Z','N',' ')},       \/* Dzongkha *\/\n+  {\"ee\",        HB_TAG('E','W','E',' ')},       \/* Ewe *\/\n+\/*{\"efi\",       HB_TAG('E','F','I',' ')},*\/     \/* Efik *\/\n+  {\"ekk\",       HB_TAG('E','T','I',' ')},       \/* Standard Estonian -> Estonian *\/\n+  {\"el\",        HB_TAG('E','L','L',' ')},       \/* Modern Greek (1453-) -> Greek *\/\n+  {\"emk\",       HB_TAG('E','M','K',' ')},       \/* Eastern Maninkakan *\/\n+  {\"emk\",       HB_TAG('M','N','K',' ')},       \/* Eastern Maninkakan -> Maninka *\/\n+  {\"en\",        HB_TAG('E','N','G',' ')},       \/* English *\/\n+  {\"enb\",       HB_TAG('K','A','L',' ')},       \/* Markweeta -> Kalenjin *\/\n+  {\"enf\",       HB_TAG('F','N','E',' ')},       \/* Forest Enets -> Forest Nenets *\/\n+  {\"enh\",       HB_TAG('T','N','E',' ')},       \/* Tundra Enets -> Tundra Nenets *\/\n+  {\"eo\",        HB_TAG('N','T','O',' ')},       \/* Esperanto *\/\n+  {\"es\",        HB_TAG('E','S','P',' ')},       \/* Spanish *\/\n+  {\"esg\",       HB_TAG('G','O','N',' ')},       \/* Aheri Gondi -> Gondi *\/\n+  {\"esi\",       HB_TAG('I','P','K',' ')},       \/* North Alaskan Inupiatun -> Inupiat *\/\n+  {\"esk\",       HB_TAG('I','P','K',' ')},       \/* Northwest Alaska Inupiatun -> Inupiat *\/\n+\/*{\"esu\",       HB_TAG('E','S','U',' ')},*\/     \/* Central Yupik *\/\n+  {\"et\",        HB_TAG('E','T','I',' ')},       \/* Estonian [macrolanguage] *\/\n+  {\"eto\",       HB_TAG('B','T','I',' ')},       \/* Eton (Cameroon) -> Beti *\/\n+  {\"eu\",        HB_TAG('E','U','Q',' ')},       \/* Basque *\/\n+  {\"eve\",       HB_TAG('E','V','N',' ')},       \/* Even *\/\n+  {\"evn\",       HB_TAG('E','V','K',' ')},       \/* Evenki *\/\n+  {\"ewo\",       HB_TAG('B','T','I',' ')},       \/* Ewondo -> Beti *\/\n+  {\"eyo\",       HB_TAG('K','A','L',' ')},       \/* Keiyo -> Kalenjin *\/\n+  {\"fa\",        HB_TAG('F','A','R',' ')},       \/* Persian [macrolanguage] *\/\n+  {\"fan\",       HB_TAG('F','A','N','0')},       \/* Fang (Equatorial Guinea) *\/\n+\/*{\"fat\",       HB_TAG('F','A','T',' ')},*\/     \/* Fanti *\/\n+  {\"fbl\",       HB_TAG('B','I','K',' ')},       \/* West Albay Bikol -> Bikol *\/\n+  {\"ff\",        HB_TAG('F','U','L',' ')},       \/* Fulah [macrolanguage] *\/\n+  {\"ffm\",       HB_TAG('F','U','L',' ')},       \/* Maasina Fulfulde -> Fulah *\/\n+  {\"fi\",        HB_TAG('F','I','N',' ')},       \/* Finnish *\/\n+  {\"fil\",       HB_TAG('P','I','L',' ')},       \/* Filipino *\/\n+  {\"fj\",        HB_TAG('F','J','I',' ')},       \/* Fijian *\/\n+  {\"flm\",       HB_TAG('H','A','L',' ')},       \/* Halam (Falam Chin) (retired code) *\/\n+  {\"flm\",       HB_TAG('Q','I','N',' ')},       \/* Falam Chin (retired code) -> Chin *\/\n+\/*{\"fmp\",       HB_TAG('F','M','P',' ')},*\/     \/* Fe’fe’ *\/\n+  {\"fo\",        HB_TAG('F','O','S',' ')},       \/* Faroese *\/\n+\/*{\"fon\",       HB_TAG('F','O','N',' ')},*\/     \/* Fon *\/\n+  {\"fr\",        HB_TAG('F','R','A',' ')},       \/* French *\/\n+\/*{\"frc\",       HB_TAG('F','R','C',' ')},*\/     \/* Cajun French *\/\n+\/*{\"frp\",       HB_TAG('F','R','P',' ')},*\/     \/* Arpitan *\/\n+  {\"fub\",       HB_TAG('F','U','L',' ')},       \/* Adamawa Fulfulde -> Fulah *\/\n+  {\"fuc\",       HB_TAG('F','U','L',' ')},       \/* Pulaar -> Fulah *\/\n+  {\"fue\",       HB_TAG('F','U','L',' ')},       \/* Borgu Fulfulde -> Fulah *\/\n+  {\"fuf\",       HB_TAG('F','T','A',' ')},       \/* Pular -> Futa *\/\n+  {\"fuh\",       HB_TAG('F','U','L',' ')},       \/* Western Niger Fulfulde -> Fulah *\/\n+  {\"fui\",       HB_TAG('F','U','L',' ')},       \/* Bagirmi Fulfulde -> Fulah *\/\n+  {\"fuq\",       HB_TAG('F','U','L',' ')},       \/* Central-Eastern Niger Fulfulde -> Fulah *\/\n+  {\"fur\",       HB_TAG('F','R','L',' ')},       \/* Friulian *\/\n+\/*{\"fuv\",       HB_TAG('F','U','V',' ')},*\/     \/* Nigerian Fulfulde *\/\n+  {\"fy\",        HB_TAG('F','R','I',' ')},       \/* Western Frisian -> Frisian *\/\n+  {\"ga\",        HB_TAG('I','R','I',' ')},       \/* Irish *\/\n+  {\"gaa\",       HB_TAG('G','A','D',' ')},       \/* Ga *\/\n+\/*{\"gag\",       HB_TAG('G','A','G',' ')},*\/     \/* Gagauz *\/\n+  {\"gan\",       HB_TAG('Z','H','S',' ')},       \/* Gan Chinese -> Chinese Simplified *\/\n+  {\"gax\",       HB_TAG('O','R','O',' ')},       \/* Borana-Arsi-Guji Oromo -> Oromo *\/\n+  {\"gaz\",       HB_TAG('O','R','O',' ')},       \/* West Central Oromo -> Oromo *\/\n+  {\"gbm\",       HB_TAG('G','A','W',' ')},       \/* Garhwali *\/\n+  {\"gce\",       HB_TAG('A','T','H',' ')},       \/* Galice -> Athapaskan *\/\n+  {\"gd\",        HB_TAG('G','A','E',' ')},       \/* Scottish Gaelic (Gaelic) *\/\n+  {\"gda\",       HB_TAG('R','A','J',' ')},       \/* Gade Lohar -> Rajasthani *\/\n+\/*{\"gez\",       HB_TAG('G','E','Z',' ')},*\/     \/* Geez *\/\n+  {\"ggo\",       HB_TAG('G','O','N',' ')},       \/* Southern Gondi (retired code) -> Gondi *\/\n+\/*{\"gih\",       HB_TAG('G','I','H',' ')},*\/     \/* Githabul *\/\n+  {\"gil\",       HB_TAG('G','I','L','0')},       \/* Kiribati (Gilbertese) *\/\n+  {\"gju\",       HB_TAG('R','A','J',' ')},       \/* Gujari -> Rajasthani *\/\n+\/*{\"gkp\",       HB_TAG('G','K','P',' ')},*\/     \/* Guinea Kpelle -> Kpelle (Guinea) *\/\n+  {\"gl\",        HB_TAG('G','A','L',' ')},       \/* Galician *\/\n+  {\"gld\",       HB_TAG('N','A','N',' ')},       \/* Nanai *\/\n+\/*{\"glk\",       HB_TAG('G','L','K',' ')},*\/     \/* Gilaki *\/\n+  {\"gn\",        HB_TAG('G','U','A',' ')},       \/* Guarani [macrolanguage] *\/\n+\/*{\"gnn\",       HB_TAG('G','N','N',' ')},*\/     \/* Gumatj *\/\n+  {\"gno\",       HB_TAG('G','O','N',' ')},       \/* Northern Gondi -> Gondi *\/\n+  {\"gnw\",       HB_TAG('G','U','A',' ')},       \/* Western Bolivian Guaraní -> Guarani *\/\n+\/*{\"gog\",       HB_TAG('G','O','G',' ')},*\/     \/* Gogo *\/\n+  {\"gom\",       HB_TAG('K','O','K',' ')},       \/* Goan Konkani -> Konkani *\/\n+\/*{\"gon\",       HB_TAG('G','O','N',' ')},*\/     \/* Gondi [macrolanguage] *\/\n+  {\"grt\",       HB_TAG('G','R','O',' ')},       \/* Garo *\/\n+  {\"gru\",       HB_TAG('S','O','G',' ')},       \/* Kistane -> Sodo Gurage *\/\n+  {\"gsw\",       HB_TAG('A','L','S',' ')},       \/* Alsatian *\/\n+  {\"gu\",        HB_TAG('G','U','J',' ')},       \/* Gujarati *\/\n+\/*{\"guc\",       HB_TAG('G','U','C',' ')},*\/     \/* Wayuu *\/\n+\/*{\"guf\",       HB_TAG('G','U','F',' ')},*\/     \/* Gupapuyngu *\/\n+  {\"gug\",       HB_TAG('G','U','A',' ')},       \/* Paraguayan Guaraní -> Guarani *\/\n+  {\"gui\",       HB_TAG('G','U','A',' ')},       \/* Eastern Bolivian Guaraní -> Guarani *\/\n+  {\"guk\",       HB_TAG('G','M','Z',' ')},       \/* Gumuz *\/\n+  {\"guk\",       HB_TAG('G','U','K',' ')},       \/* Gumuz (SIL fonts) *\/\n+  {\"gun\",       HB_TAG('G','U','A',' ')},       \/* Mbyá Guaraní -> Guarani *\/\n+\/*{\"guz\",       HB_TAG('G','U','Z',' ')},*\/     \/* Gusii *\/\n+  {\"gv\",        HB_TAG('M','N','X',' ')},       \/* Manx *\/\n+  {\"gwi\",       HB_TAG('A','T','H',' ')},       \/* Gwichʼin -> Athapaskan *\/\n+  {\"ha\",        HB_TAG('H','A','U',' ')},       \/* Hausa *\/\n+  {\"haa\",       HB_TAG('A','T','H',' ')},       \/* Han -> Athapaskan *\/\n+  {\"hae\",       HB_TAG('O','R','O',' ')},       \/* Eastern Oromo -> Oromo *\/\n+  {\"hak\",       HB_TAG('Z','H','S',' ')},       \/* Hakka Chinese -> Chinese Simplified *\/\n+  {\"har\",       HB_TAG('H','R','I',' ')},       \/* Harari *\/\n+\/*{\"haw\",       HB_TAG('H','A','W',' ')},*\/     \/* Hawaiian *\/\n+\/*{\"hay\",       HB_TAG('H','A','Y',' ')},*\/     \/* Haya *\/\n+\/*{\"haz\",       HB_TAG('H','A','Z',' ')},*\/     \/* Hazaragi *\/\n+  {\"he\",        HB_TAG('I','W','R',' ')},       \/* Hebrew *\/\n+  {\"hea\",       HB_TAG('H','M','N',' ')},       \/* Northern Qiandong Miao -> Hmong *\/\n+  {\"hi\",        HB_TAG('H','I','N',' ')},       \/* Hindi *\/\n+\/*{\"hil\",       HB_TAG('H','I','L',' ')},*\/     \/* Hiligaynon *\/\n+  {\"hji\",       HB_TAG('M','L','Y',' ')},       \/* Haji -> Malay *\/\n+  {\"hlt\",       HB_TAG('Q','I','N',' ')},       \/* Matu Chin -> Chin *\/\n+  {\"hma\",       HB_TAG('H','M','N',' ')},       \/* Southern Mashan Hmong -> Hmong *\/\n+  {\"hmc\",       HB_TAG('H','M','N',' ')},       \/* Central Huishui Hmong -> Hmong *\/\n+  {\"hmd\",       HB_TAG('H','M','N',' ')},       \/* Large Flowery Miao -> Hmong *\/\n+  {\"hme\",       HB_TAG('H','M','N',' ')},       \/* Eastern Huishui Hmong -> Hmong *\/\n+  {\"hmg\",       HB_TAG('H','M','N',' ')},       \/* Southwestern Guiyang Hmong -> Hmong *\/\n+  {\"hmh\",       HB_TAG('H','M','N',' ')},       \/* Southwestern Huishui Hmong -> Hmong *\/\n+  {\"hmi\",       HB_TAG('H','M','N',' ')},       \/* Northern Huishui Hmong -> Hmong *\/\n+  {\"hmj\",       HB_TAG('H','M','N',' ')},       \/* Ge -> Hmong *\/\n+  {\"hml\",       HB_TAG('H','M','N',' ')},       \/* Luopohe Hmong -> Hmong *\/\n+  {\"hmm\",       HB_TAG('H','M','N',' ')},       \/* Central Mashan Hmong -> Hmong *\/\n+\/*{\"hmn\",       HB_TAG('H','M','N',' ')},*\/     \/* Hmong [macrolanguage] *\/\n+  {\"hmp\",       HB_TAG('H','M','N',' ')},       \/* Northern Mashan Hmong -> Hmong *\/\n+  {\"hmq\",       HB_TAG('H','M','N',' ')},       \/* Eastern Qiandong Miao -> Hmong *\/\n+  {\"hms\",       HB_TAG('H','M','N',' ')},       \/* Southern Qiandong Miao -> Hmong *\/\n+  {\"hmw\",       HB_TAG('H','M','N',' ')},       \/* Western Mashan Hmong -> Hmong *\/\n+  {\"hmy\",       HB_TAG('H','M','N',' ')},       \/* Southern Guiyang Hmong -> Hmong *\/\n+  {\"hmz\",       HB_TAG('H','M','N',' ')},       \/* Hmong Shua -> Hmong *\/\n+\/*{\"hnd\",       HB_TAG('H','N','D',' ')},*\/     \/* Southern Hindko -> Hindko *\/\n+  {\"hne\",       HB_TAG('C','H','H',' ')},       \/* Chhattisgarhi -> Chattisgarhi *\/\n+  {\"hnj\",       HB_TAG('H','M','N',' ')},       \/* Hmong Njua -> Hmong *\/\n+  {\"hno\",       HB_TAG('H','N','D',' ')},       \/* Northern Hindko -> Hindko *\/\n+  {\"ho\",        HB_TAG('H','M','O',' ')},       \/* Hiri Motu *\/\n+  {\"hoc\",       HB_TAG('H','O',' ',' ')},       \/* Ho *\/\n+  {\"hoi\",       HB_TAG('A','T','H',' ')},       \/* Holikachuk -> Athapaskan *\/\n+  {\"hoj\",       HB_TAG('H','A','R',' ')},       \/* Hadothi -> Harauti *\/\n+  {\"hr\",        HB_TAG('H','R','V',' ')},       \/* Croatian *\/\n+  {\"hrm\",       HB_TAG('H','M','N',' ')},       \/* Horned Miao -> Hmong *\/\n+  {\"hsb\",       HB_TAG('U','S','B',' ')},       \/* Upper Sorbian *\/\n+  {\"hsn\",       HB_TAG('Z','H','S',' ')},       \/* Xiang Chinese -> Chinese Simplified *\/\n+  {\"ht\",        HB_TAG('H','A','I',' ')},       \/* Haitian (Haitian Creole) *\/\n+  {\"hu\",        HB_TAG('H','U','N',' ')},       \/* Hungarian *\/\n+  {\"huj\",       HB_TAG('H','M','N',' ')},       \/* Northern Guiyang Hmong -> Hmong *\/\n+  {\"hup\",       HB_TAG('A','T','H',' ')},       \/* Hupa -> Athapaskan *\/\n+  {\"hy\",        HB_TAG('H','Y','E','0')},       \/* Armenian -> Armenian East *\/\n+  {\"hy\",        HB_TAG('H','Y','E',' ')},       \/* Armenian *\/\n+  {\"hyw\",       HB_TAG('H','Y','E',' ')},       \/* Western Armenian -> Armenian *\/\n+  {\"hz\",        HB_TAG('H','E','R',' ')},       \/* Herero *\/\n+  {\"ia\",        HB_TAG('I','N','A',' ')},       \/* Interlingua (International Auxiliary Language Association) *\/\n+\/*{\"iba\",       HB_TAG('I','B','A',' ')},*\/     \/* Iban *\/\n+\/*{\"ibb\",       HB_TAG('I','B','B',' ')},*\/     \/* Ibibio *\/\n+  {\"id\",        HB_TAG('I','N','D',' ')},       \/* Indonesian *\/\n+  {\"ida\",       HB_TAG('L','U','H',' ')},       \/* Idakho-Isukha-Tiriki -> Luyia *\/\n+  {\"ie\",        HB_TAG('I','L','E',' ')},       \/* Interlingue *\/\n+  {\"ig\",        HB_TAG('I','B','O',' ')},       \/* Igbo *\/\n+  {\"igb\",       HB_TAG('E','B','I',' ')},       \/* Ebira *\/\n+  {\"ii\",        HB_TAG('Y','I','M',' ')},       \/* Sichuan Yi -> Yi Modern *\/\n+  {\"ijc\",       HB_TAG('I','J','O',' ')},       \/* Izon -> Ijo *\/\n+\/*{\"ijo\",       HB_TAG('I','J','O',' ')},*\/     \/* Ijo [family] *\/\n+  {\"ik\",        HB_TAG('I','P','K',' ')},       \/* Inupiaq [macrolanguage] -> Inupiat *\/\n+  {\"ike\",       HB_TAG('I','N','U',' ')},       \/* Eastern Canadian Inuktitut -> Inuktitut *\/\n+  {\"ikt\",       HB_TAG('I','N','U',' ')},       \/* Inuinnaqtun -> Inuktitut *\/\n+\/*{\"ilo\",       HB_TAG('I','L','O',' ')},*\/     \/* Iloko -> Ilokano *\/\n+  {\"in\",        HB_TAG('I','N','D',' ')},       \/* Indonesian (retired code) *\/\n+  {\"ing\",       HB_TAG('A','T','H',' ')},       \/* Degexit'an -> Athapaskan *\/\n+  {\"inh\",       HB_TAG('I','N','G',' ')},       \/* Ingush *\/\n+  {\"io\",        HB_TAG('I','D','O',' ')},       \/* Ido *\/\n+  {\"is\",        HB_TAG('I','S','L',' ')},       \/* Icelandic *\/\n+  {\"it\",        HB_TAG('I','T','A',' ')},       \/* Italian *\/\n+  {\"iu\",        HB_TAG('I','N','U',' ')},       \/* Inuktitut [macrolanguage] *\/\n+  {\"iw\",        HB_TAG('I','W','R',' ')},       \/* Hebrew (retired code) *\/\n+  {\"ja\",        HB_TAG('J','A','N',' ')},       \/* Japanese *\/\n+  {\"jak\",       HB_TAG('M','L','Y',' ')},       \/* Jakun -> Malay *\/\n+\/*{\"jam\",       HB_TAG('J','A','M',' ')},*\/     \/* Jamaican Creole English -> Jamaican Creole *\/\n+  {\"jax\",       HB_TAG('M','L','Y',' ')},       \/* Jambi Malay -> Malay *\/\n+\/*{\"jbo\",       HB_TAG('J','B','O',' ')},*\/     \/* Lojban *\/\n+\/*{\"jct\",       HB_TAG('J','C','T',' ')},*\/     \/* Krymchak *\/\n+  {\"ji\",        HB_TAG('J','I','I',' ')},       \/* Yiddish (retired code) *\/\n+  {\"jv\",        HB_TAG('J','A','V',' ')},       \/* Javanese *\/\n+  {\"jw\",        HB_TAG('J','A','V',' ')},       \/* Javanese (retired code) *\/\n+  {\"ka\",        HB_TAG('K','A','T',' ')},       \/* Georgian *\/\n+  {\"kaa\",       HB_TAG('K','R','K',' ')},       \/* Karakalpak *\/\n+  {\"kab\",       HB_TAG('K','A','B','0')},       \/* Kabyle *\/\n+  {\"kam\",       HB_TAG('K','M','B',' ')},       \/* Kamba (Kenya) *\/\n+  {\"kar\",       HB_TAG('K','R','N',' ')},       \/* Karen [family] *\/\n+  {\"kbd\",       HB_TAG('K','A','B',' ')},       \/* Kabardian *\/\n+  {\"kby\",       HB_TAG('K','N','R',' ')},       \/* Manga Kanuri -> Kanuri *\/\n+  {\"kca\",       HB_TAG('K','H','K',' ')},       \/* Khanty -> Khanty-Kazim *\/\n+  {\"kca\",       HB_TAG('K','H','S',' ')},       \/* Khanty -> Khanty-Shurishkar *\/\n+  {\"kca\",       HB_TAG('K','H','V',' ')},       \/* Khanty -> Khanty-Vakhi *\/\n+\/*{\"kde\",       HB_TAG('K','D','E',' ')},*\/     \/* Makonde *\/\n+  {\"kdr\",       HB_TAG('K','R','M',' ')},       \/* Karaim *\/\n+  {\"kdt\",       HB_TAG('K','U','Y',' ')},       \/* Kuy *\/\n+\/*{\"kea\",       HB_TAG('K','E','A',' ')},*\/     \/* Kabuverdianu (Crioulo) *\/\n+\/*{\"kek\",       HB_TAG('K','E','K',' ')},*\/     \/* Kekchi *\/\n+  {\"kex\",       HB_TAG('K','K','N',' ')},       \/* Kukna -> Kokni *\/\n+  {\"kfa\",       HB_TAG('K','O','D',' ')},       \/* Kodava -> Kodagu *\/\n+  {\"kfr\",       HB_TAG('K','A','C',' ')},       \/* Kachhi -> Kachchi *\/\n+  {\"kfx\",       HB_TAG('K','U','L',' ')},       \/* Kullu Pahari -> Kulvi *\/\n+  {\"kfy\",       HB_TAG('K','M','N',' ')},       \/* Kumaoni *\/\n+  {\"kg\",        HB_TAG('K','O','N','0')},       \/* Kongo [macrolanguage] *\/\n+  {\"kha\",       HB_TAG('K','S','I',' ')},       \/* Khasi *\/\n+  {\"khb\",       HB_TAG('X','B','D',' ')},       \/* Lü *\/\n+  {\"khk\",       HB_TAG('M','N','G',' ')},       \/* Halh Mongolian -> Mongolian *\/\n+  {\"kht\",       HB_TAG('K','H','N',' ')},       \/* Khamti -> Khamti Shan (Microsoft fonts) *\/\n+  {\"kht\",       HB_TAG('K','H','T',' ')},       \/* Khamti -> Khamti Shan (OpenType spec and SIL fonts) *\/\n+\/*{\"khw\",       HB_TAG('K','H','W',' ')},*\/     \/* Khowar *\/\n+  {\"ki\",        HB_TAG('K','I','K',' ')},       \/* Kikuyu (Gikuyu) *\/\n+\/*{\"kiu\",       HB_TAG('K','I','U',' ')},*\/     \/* Kirmanjki *\/\n+  {\"kj\",        HB_TAG('K','U','A',' ')},       \/* Kuanyama *\/\n+\/*{\"kjd\",       HB_TAG('K','J','D',' ')},*\/     \/* Southern Kiwai *\/\n+  {\"kjh\",       HB_TAG('K','H','A',' ')},       \/* Khakas -> Khakass *\/\n+\/*{\"kjp\",       HB_TAG('K','J','P',' ')},*\/     \/* Pwo Eastern Karen -> Eastern Pwo Karen *\/\n+\/*{\"kjz\",       HB_TAG('K','J','Z',' ')},*\/     \/* Bumthangkha *\/\n+  {\"kk\",        HB_TAG('K','A','Z',' ')},       \/* Kazakh *\/\n+  {\"kkz\",       HB_TAG('A','T','H',' ')},       \/* Kaska -> Athapaskan *\/\n+  {\"kl\",        HB_TAG('G','R','N',' ')},       \/* Greenlandic *\/\n+  {\"kln\",       HB_TAG('K','A','L',' ')},       \/* Kalenjin [macrolanguage] *\/\n+  {\"km\",        HB_TAG('K','H','M',' ')},       \/* Khmer *\/\n+  {\"kmb\",       HB_TAG('M','B','N',' ')},       \/* Kimbundu -> Mbundu *\/\n+  {\"kmr\",       HB_TAG('K','U','R',' ')},       \/* Northern Kurdish -> Kurdish *\/\n+  {\"kmw\",       HB_TAG('K','M','O',' ')},       \/* Komo (Democratic Republic of Congo) *\/\n+\/*{\"kmz\",       HB_TAG('K','M','Z',' ')},*\/     \/* Khorasani Turkish -> Khorasani Turkic *\/\n+  {\"kn\",        HB_TAG('K','A','N',' ')},       \/* Kannada *\/\n+  {\"knc\",       HB_TAG('K','N','R',' ')},       \/* Central Kanuri -> Kanuri *\/\n+  {\"kng\",       HB_TAG('K','O','N','0')},       \/* Koongo -> Kongo *\/\n+  {\"knn\",       HB_TAG('K','O','K',' ')},       \/* Konkani *\/\n+  {\"ko\",        HB_TAG('K','O','R',' ')},       \/* Korean *\/\n+  {\"koi\",       HB_TAG('K','O','P',' ')},       \/* Komi-Permyak *\/\n+\/*{\"kok\",       HB_TAG('K','O','K',' ')},*\/     \/* Konkani [macrolanguage] *\/\n+\/*{\"kos\",       HB_TAG('K','O','S',' ')},*\/     \/* Kosraean *\/\n+  {\"koy\",       HB_TAG('A','T','H',' ')},       \/* Koyukon -> Athapaskan *\/\n+  {\"kpe\",       HB_TAG('K','P','L',' ')},       \/* Kpelle [macrolanguage] *\/\n+  {\"kpv\",       HB_TAG('K','O','Z',' ')},       \/* Komi-Zyrian *\/\n+  {\"kpy\",       HB_TAG('K','Y','K',' ')},       \/* Koryak *\/\n+  {\"kqs\",       HB_TAG('K','I','S',' ')},       \/* Northern Kissi -> Kisii *\/\n+  {\"kqy\",       HB_TAG('K','R','T',' ')},       \/* Koorete *\/\n+  {\"kr\",        HB_TAG('K','N','R',' ')},       \/* Kanuri [macrolanguage] *\/\n+  {\"krc\",       HB_TAG('K','A','R',' ')},       \/* Karachay-Balkar -> Karachay *\/\n+  {\"krc\",       HB_TAG('B','A','L',' ')},       \/* Karachay-Balkar -> Balkar *\/\n+\/*{\"kri\",       HB_TAG('K','R','I',' ')},*\/     \/* Krio *\/\n+\/*{\"krl\",       HB_TAG('K','R','L',' ')},*\/     \/* Karelian *\/\n+  {\"krt\",       HB_TAG('K','N','R',' ')},       \/* Tumari Kanuri -> Kanuri *\/\n+  {\"kru\",       HB_TAG('K','U','U',' ')},       \/* Kurukh *\/\n+  {\"ks\",        HB_TAG('K','S','H',' ')},       \/* Kashmiri *\/\n+  {\"ksh\",       HB_TAG('K','S','H','0')},       \/* Kölsch -> Ripuarian *\/\n+  {\"kss\",       HB_TAG('K','I','S',' ')},       \/* Southern Kisi -> Kisii *\/\n+\/*{\"ksw\",       HB_TAG('K','S','W',' ')},*\/     \/* S’gaw Karen *\/\n+  {\"ktb\",       HB_TAG('K','E','B',' ')},       \/* Kambaata -> Kebena *\/\n+  {\"ktu\",       HB_TAG('K','O','N',' ')},       \/* Kituba (Democratic Republic of Congo) -> Kikongo *\/\n+  {\"ktw\",       HB_TAG('A','T','H',' ')},       \/* Kato -> Athapaskan *\/\n+  {\"ku\",        HB_TAG('K','U','R',' ')},       \/* Kurdish [macrolanguage] *\/\n+\/*{\"kum\",       HB_TAG('K','U','M',' ')},*\/     \/* Kumyk *\/\n+  {\"kuu\",       HB_TAG('A','T','H',' ')},       \/* Upper Kuskokwim -> Athapaskan *\/\n+  {\"kv\",        HB_TAG('K','O','M',' ')},       \/* Komi [macrolanguage] *\/\n+  {\"kvb\",       HB_TAG('M','L','Y',' ')},       \/* Kubu -> Malay *\/\n+  {\"kvr\",       HB_TAG('M','L','Y',' ')},       \/* Kerinci -> Malay *\/\n+  {\"kw\",        HB_TAG('C','O','R',' ')},       \/* Cornish *\/\n+  {\"kwy\",       HB_TAG('K','O','N','0')},       \/* San Salvador Kongo -> Kongo *\/\n+  {\"kxc\",       HB_TAG('K','M','S',' ')},       \/* Konso -> Komso *\/\n+  {\"kxd\",       HB_TAG('M','L','Y',' ')},       \/* Brunei -> Malay *\/\n+  {\"kxl\",       HB_TAG('K','U','U',' ')},       \/* Nepali Kurux (retired code) -> Kurukh *\/\n+  {\"kxu\",       HB_TAG('K','U','I',' ')},       \/* Kui (India) (retired code) *\/\n+  {\"ky\",        HB_TAG('K','I','R',' ')},       \/* Kirghiz (Kyrgyz) *\/\n+\/*{\"kyu\",       HB_TAG('K','Y','U',' ')},*\/     \/* Western Kayah *\/\n+  {\"la\",        HB_TAG('L','A','T',' ')},       \/* Latin *\/\n+  {\"lad\",       HB_TAG('J','U','D',' ')},       \/* Ladino *\/\n+  {\"lb\",        HB_TAG('L','T','Z',' ')},       \/* Luxembourgish *\/\n+  {\"lbe\",       HB_TAG('L','A','K',' ')},       \/* Lak *\/\n+  {\"lbj\",       HB_TAG('L','D','K',' ')},       \/* Ladakhi *\/\n+  {\"lbl\",       HB_TAG('B','I','K',' ')},       \/* Libon Bikol -> Bikol *\/\n+  {\"lce\",       HB_TAG('M','L','Y',' ')},       \/* Loncong -> Malay *\/\n+  {\"lcf\",       HB_TAG('M','L','Y',' ')},       \/* Lubu -> Malay *\/\n+  {\"ldi\",       HB_TAG('K','O','N','0')},       \/* Laari -> Kongo *\/\n+\/*{\"lez\",       HB_TAG('L','E','Z',' ')},*\/     \/* Lezghian -> Lezgi *\/\n+  {\"lg\",        HB_TAG('L','U','G',' ')},       \/* Ganda *\/\n+  {\"li\",        HB_TAG('L','I','M',' ')},       \/* Limburgish *\/\n+  {\"lif\",       HB_TAG('L','M','B',' ')},       \/* Limbu *\/\n+\/*{\"lij\",       HB_TAG('L','I','J',' ')},*\/     \/* Ligurian *\/\n+\/*{\"lis\",       HB_TAG('L','I','S',' ')},*\/     \/* Lisu *\/\n+  {\"liw\",       HB_TAG('M','L','Y',' ')},       \/* Col -> Malay *\/\n+\/*{\"ljp\",       HB_TAG('L','J','P',' ')},*\/     \/* Lampung Api -> Lampung *\/\n+  {\"lkb\",       HB_TAG('L','U','H',' ')},       \/* Kabras -> Luyia *\/\n+\/*{\"lki\",       HB_TAG('L','K','I',' ')},*\/     \/* Laki *\/\n+  {\"lko\",       HB_TAG('L','U','H',' ')},       \/* Khayo -> Luyia *\/\n+  {\"lks\",       HB_TAG('L','U','H',' ')},       \/* Kisa -> Luyia *\/\n+  {\"lld\",       HB_TAG('L','A','D',' ')},       \/* Ladin *\/\n+  {\"lmn\",       HB_TAG('L','A','M',' ')},       \/* Lambadi -> Lambani *\/\n+\/*{\"lmo\",       HB_TAG('L','M','O',' ')},*\/     \/* Lombard *\/\n+  {\"ln\",        HB_TAG('L','I','N',' ')},       \/* Lingala *\/\n+  {\"lo\",        HB_TAG('L','A','O',' ')},       \/* Lao *\/\n+\/*{\"lom\",       HB_TAG('L','O','M',' ')},*\/     \/* Loma (Liberia) *\/\n+\/*{\"lrc\",       HB_TAG('L','R','C',' ')},*\/     \/* Northern Luri -> Luri *\/\n+  {\"lri\",       HB_TAG('L','U','H',' ')},       \/* Marachi -> Luyia *\/\n+  {\"lrm\",       HB_TAG('L','U','H',' ')},       \/* Marama -> Luyia *\/\n+  {\"lsm\",       HB_TAG('L','U','H',' ')},       \/* Saamia -> Luyia *\/\n+  {\"lt\",        HB_TAG('L','T','H',' ')},       \/* Lithuanian *\/\n+  {\"ltg\",       HB_TAG('L','V','I',' ')},       \/* Latgalian -> Latvian *\/\n+  {\"lto\",       HB_TAG('L','U','H',' ')},       \/* Tsotso -> Luyia *\/\n+  {\"lts\",       HB_TAG('L','U','H',' ')},       \/* Tachoni -> Luyia *\/\n+  {\"lu\",        HB_TAG('L','U','B',' ')},       \/* Luba-Katanga *\/\n+\/*{\"lua\",       HB_TAG('L','U','A',' ')},*\/     \/* Luba-Lulua *\/\n+\/*{\"luo\",       HB_TAG('L','U','O',' ')},*\/     \/* Luo (Kenya and Tanzania) *\/\n+  {\"lus\",       HB_TAG('M','I','Z',' ')},       \/* Lushai -> Mizo *\/\n+  {\"luy\",       HB_TAG('L','U','H',' ')},       \/* Luyia [macrolanguage] *\/\n+  {\"luz\",       HB_TAG('L','R','C',' ')},       \/* Southern Luri -> Luri *\/\n+  {\"lv\",        HB_TAG('L','V','I',' ')},       \/* Latvian [macrolanguage] *\/\n+  {\"lvs\",       HB_TAG('L','V','I',' ')},       \/* Standard Latvian -> Latvian *\/\n+  {\"lwg\",       HB_TAG('L','U','H',' ')},       \/* Wanga -> Luyia *\/\n+  {\"lzh\",       HB_TAG('Z','H','T',' ')},       \/* Literary Chinese -> Chinese Traditional *\/\n+  {\"lzz\",       HB_TAG('L','A','Z',' ')},       \/* Laz *\/\n+\/*{\"mad\",       HB_TAG('M','A','D',' ')},*\/     \/* Madurese -> Madura *\/\n+\/*{\"mag\",       HB_TAG('M','A','G',' ')},*\/     \/* Magahi *\/\n+  {\"mai\",       HB_TAG('M','T','H',' ')},       \/* Maithili *\/\n+  {\"mak\",       HB_TAG('M','K','R',' ')},       \/* Makasar *\/\n+\/*{\"mam\",       HB_TAG('M','A','M',' ')},*\/     \/* Mam *\/\n+  {\"man\",       HB_TAG('M','N','K',' ')},       \/* Mandingo [macrolanguage] -> Maninka *\/\n+  {\"max\",       HB_TAG('M','L','Y',' ')},       \/* North Moluccan Malay -> Malay *\/\n+\/*{\"mbo\",       HB_TAG('M','B','O',' ')},*\/     \/* Mbo (Cameroon) *\/\n+  {\"mct\",       HB_TAG('B','T','I',' ')},       \/* Mengisa -> Beti *\/\n+  {\"mdf\",       HB_TAG('M','O','K',' ')},       \/* Moksha *\/\n+\/*{\"mdr\",       HB_TAG('M','D','R',' ')},*\/     \/* Mandar *\/\n+  {\"mdy\",       HB_TAG('M','L','E',' ')},       \/* Male (Ethiopia) *\/\n+  {\"men\",       HB_TAG('M','D','E',' ')},       \/* Mende (Sierra Leone) *\/\n+  {\"meo\",       HB_TAG('M','L','Y',' ')},       \/* Kedah Malay -> Malay *\/\n+\/*{\"mer\",       HB_TAG('M','E','R',' ')},*\/     \/* Meru *\/\n+\/*{\"mfa\",       HB_TAG('M','F','A',' ')},*\/     \/* Pattani Malay *\/\n+  {\"mfb\",       HB_TAG('M','L','Y',' ')},       \/* Bangka -> Malay *\/\n+\/*{\"mfe\",       HB_TAG('M','F','E',' ')},*\/     \/* Morisyen *\/\n+  {\"mg\",        HB_TAG('M','L','G',' ')},       \/* Malagasy [macrolanguage] *\/\n+  {\"mh\",        HB_TAG('M','A','H',' ')},       \/* Marshallese *\/\n+  {\"mhr\",       HB_TAG('L','M','A',' ')},       \/* Eastern Mari -> Low Mari *\/\n+  {\"mhv\",       HB_TAG('A','R','K',' ')},       \/* Arakanese (retired code) -> Rakhine *\/\n+  {\"mi\",        HB_TAG('M','R','I',' ')},       \/* Maori *\/\n+\/*{\"min\",       HB_TAG('M','I','N',' ')},*\/     \/* Minangkabau *\/\n+  {\"mk\",        HB_TAG('M','K','D',' ')},       \/* Macedonian *\/\n+  {\"mku\",       HB_TAG('M','N','K',' ')},       \/* Konyanka Maninka -> Maninka *\/\n+\/*{\"mkw\",       HB_TAG('M','K','W',' ')},*\/     \/* Kituba (Congo) *\/\n+  {\"ml\",        HB_TAG('M','A','L',' ')},       \/* Malayalam -> Malayalam Traditional *\/\n+  {\"ml\",        HB_TAG('M','L','R',' ')},       \/* Malayalam -> Malayalam Reformed *\/\n+  {\"mlq\",       HB_TAG('M','L','N',' ')},       \/* Western Maninkakan -> Malinke *\/\n+  {\"mlq\",       HB_TAG('M','N','K',' ')},       \/* Western Maninkakan -> Maninka *\/\n+  {\"mmr\",       HB_TAG('H','M','N',' ')},       \/* Western Xiangxi Miao -> Hmong *\/\n+  {\"mn\",        HB_TAG('M','N','G',' ')},       \/* Mongolian [macrolanguage] *\/\n+  {\"mnc\",       HB_TAG('M','C','H',' ')},       \/* Manchu *\/\n+\/*{\"mni\",       HB_TAG('M','N','I',' ')},*\/     \/* Manipuri *\/\n+  {\"mnk\",       HB_TAG('M','N','D',' ')},       \/* Mandinka *\/\n+  {\"mnk\",       HB_TAG('M','N','K',' ')},       \/* Mandinka -> Maninka *\/\n+  {\"mnp\",       HB_TAG('Z','H','S',' ')},       \/* Min Bei Chinese -> Chinese Simplified *\/\n+  {\"mns\",       HB_TAG('M','A','N',' ')},       \/* Mansi *\/\n+  {\"mnw\",       HB_TAG('M','O','N',' ')},       \/* Mon *\/\n+  {\"mo\",        HB_TAG('M','O','L',' ')},       \/* Moldavian (retired code) *\/\n+\/*{\"moh\",       HB_TAG('M','O','H',' ')},*\/     \/* Mohawk *\/\n+\/*{\"mos\",       HB_TAG('M','O','S',' ')},*\/     \/* Mossi *\/\n+  {\"mpe\",       HB_TAG('M','A','J',' ')},       \/* Majang *\/\n+  {\"mqg\",       HB_TAG('M','L','Y',' ')},       \/* Kota Bangun Kutai Malay -> Malay *\/\n+  {\"mr\",        HB_TAG('M','A','R',' ')},       \/* Marathi *\/\n+  {\"mrh\",       HB_TAG('Q','I','N',' ')},       \/* Mara Chin -> Chin *\/\n+  {\"mrj\",       HB_TAG('H','M','A',' ')},       \/* Western Mari -> High Mari *\/\n+  {\"ms\",        HB_TAG('M','L','Y',' ')},       \/* Malay [macrolanguage] *\/\n+  {\"msc\",       HB_TAG('M','N','K',' ')},       \/* Sankaran Maninka -> Maninka *\/\n+  {\"msh\",       HB_TAG('M','L','G',' ')},       \/* Masikoro Malagasy -> Malagasy *\/\n+  {\"msi\",       HB_TAG('M','L','Y',' ')},       \/* Sabah Malay -> Malay *\/\n+  {\"mt\",        HB_TAG('M','T','S',' ')},       \/* Maltese *\/\n+  {\"mtr\",       HB_TAG('M','A','W',' ')},       \/* Mewari -> Marwari *\/\n+  {\"mui\",       HB_TAG('M','L','Y',' ')},       \/* Musi -> Malay *\/\n+  {\"mup\",       HB_TAG('R','A','J',' ')},       \/* Malvi -> Rajasthani *\/\n+  {\"muq\",       HB_TAG('H','M','N',' ')},       \/* Eastern Xiangxi Miao -> Hmong *\/\n+\/*{\"mus\",       HB_TAG('M','U','S',' ')},*\/     \/* Creek -> Muscogee *\/\n+  {\"mvb\",       HB_TAG('A','T','H',' ')},       \/* Mattole -> Athapaskan *\/\n+  {\"mve\",       HB_TAG('M','A','W',' ')},       \/* Marwari (Pakistan) *\/\n+  {\"mvf\",       HB_TAG('M','N','G',' ')},       \/* Peripheral Mongolian -> Mongolian *\/\n+  {\"mwk\",       HB_TAG('M','N','K',' ')},       \/* Kita Maninkakan -> Maninka *\/\n+\/*{\"mwl\",       HB_TAG('M','W','L',' ')},*\/     \/* Mirandese *\/\n+  {\"mwr\",       HB_TAG('M','A','W',' ')},       \/* Marwari [macrolanguage] *\/\n+\/*{\"mww\",       HB_TAG('M','W','W',' ')},*\/     \/* Hmong Daw *\/\n+  {\"my\",        HB_TAG('B','R','M',' ')},       \/* Burmese *\/\n+  {\"mym\",       HB_TAG('M','E','N',' ')},       \/* Me’en *\/\n+\/*{\"myn\",       HB_TAG('M','Y','N',' ')},*\/     \/* Mayan [family] *\/\n+  {\"myq\",       HB_TAG('M','N','K',' ')},       \/* Forest Maninka (retired code) -> Maninka *\/\n+  {\"myv\",       HB_TAG('E','R','Z',' ')},       \/* Erzya *\/\n+\/*{\"mzn\",       HB_TAG('M','Z','N',' ')},*\/     \/* Mazanderani *\/\n+  {\"na\",        HB_TAG('N','A','U',' ')},       \/* Nauru -> Nauruan *\/\n+\/*{\"nag\",       HB_TAG('N','A','G',' ')},*\/     \/* Naga Pidgin -> Naga-Assamese *\/\n+\/*{\"nah\",       HB_TAG('N','A','H',' ')},*\/     \/* Nahuatl [family] *\/\n+  {\"nan\",       HB_TAG('Z','H','S',' ')},       \/* Min Nan Chinese -> Chinese Simplified *\/\n+\/*{\"nap\",       HB_TAG('N','A','P',' ')},*\/     \/* Neapolitan *\/\n+  {\"nb\",        HB_TAG('N','O','R',' ')},       \/* Norwegian Bokmål -> Norwegian *\/\n+  {\"nd\",        HB_TAG('N','D','B',' ')},       \/* North Ndebele -> Ndebele *\/\n+\/*{\"ndc\",       HB_TAG('N','D','C',' ')},*\/     \/* Ndau *\/\n+\/*{\"nds\",       HB_TAG('N','D','S',' ')},*\/     \/* Low Saxon *\/\n+  {\"ne\",        HB_TAG('N','E','P',' ')},       \/* Nepali [macrolanguage] *\/\n+\/*{\"new\",       HB_TAG('N','E','W',' ')},*\/     \/* Newari *\/\n+  {\"ng\",        HB_TAG('N','D','G',' ')},       \/* Ndonga *\/\n+\/*{\"nga\",       HB_TAG('N','G','A',' ')},*\/     \/* Ngbaka *\/\n+  {\"ngl\",       HB_TAG('L','M','W',' ')},       \/* Lomwe *\/\n+  {\"ngo\",       HB_TAG('S','X','T',' ')},       \/* Ngoni -> Sutu *\/\n+  {\"nhd\",       HB_TAG('G','U','A',' ')},       \/* Chiripá -> Guarani *\/\n+  {\"niq\",       HB_TAG('K','A','L',' ')},       \/* Nandi -> Kalenjin *\/\n+\/*{\"niu\",       HB_TAG('N','I','U',' ')},*\/     \/* Niuean *\/\n+  {\"niv\",       HB_TAG('G','I','L',' ')},       \/* Gilyak *\/\n+  {\"njz\",       HB_TAG('N','I','S',' ')},       \/* Nyishi -> Nisi *\/\n+  {\"nl\",        HB_TAG('N','L','D',' ')},       \/* Dutch *\/\n+  {\"nle\",       HB_TAG('L','U','H',' ')},       \/* East Nyala -> Luyia *\/\n+  {\"nn\",        HB_TAG('N','Y','N',' ')},       \/* Norwegian Nynorsk (Nynorsk, Norwegian) *\/\n+  {\"no\",        HB_TAG('N','O','R',' ')},       \/* Norwegian [macrolanguage] *\/\n+  {\"nod\",       HB_TAG('N','T','A',' ')},       \/* Northern Thai -> Northern Tai *\/\n+\/*{\"noe\",       HB_TAG('N','O','E',' ')},*\/     \/* Nimadi *\/\n+\/*{\"nog\",       HB_TAG('N','O','G',' ')},*\/     \/* Nogai *\/\n+\/*{\"nov\",       HB_TAG('N','O','V',' ')},*\/     \/* Novial *\/\n+  {\"npi\",       HB_TAG('N','E','P',' ')},       \/* Nepali *\/\n+  {\"nqo\",       HB_TAG('N','K','O',' ')},       \/* N’Ko *\/\n+  {\"nr\",        HB_TAG('N','D','B',' ')},       \/* South Ndebele -> Ndebele *\/\n+  {\"nsk\",       HB_TAG('N','A','S',' ')},       \/* Naskapi *\/\n+\/*{\"nso\",       HB_TAG('N','S','O',' ')},*\/     \/* Pedi -> Sotho, Northern *\/\n+  {\"nv\",        HB_TAG('N','A','V',' ')},       \/* Navajo *\/\n+  {\"nv\",        HB_TAG('A','T','H',' ')},       \/* Navajo -> Athapaskan *\/\n+  {\"ny\",        HB_TAG('C','H','I',' ')},       \/* Chichewa (Chewa, Nyanja) *\/\n+  {\"nyd\",       HB_TAG('L','U','H',' ')},       \/* Nyore -> Luyia *\/\n+\/*{\"nym\",       HB_TAG('N','Y','M',' ')},*\/     \/* Nyamwezi *\/\n+  {\"nyn\",       HB_TAG('N','K','L',' ')},       \/* Nyankole *\/\n+\/*{\"nza\",       HB_TAG('N','Z','A',' ')},*\/     \/* Tigon Mbembe -> Mbembe Tigon *\/\n+  {\"oc\",        HB_TAG('O','C','I',' ')},       \/* Occitan (post 1500) *\/\n+  {\"oj\",        HB_TAG('O','J','B',' ')},       \/* Ojibwa [macrolanguage] -> Ojibway *\/\n+\/*{\"ojb\",       HB_TAG('O','J','B',' ')},*\/     \/* Northwestern Ojibwa -> Ojibway *\/\n+  {\"ojc\",       HB_TAG('O','J','B',' ')},       \/* Central Ojibwa -> Ojibway *\/\n+  {\"ojg\",       HB_TAG('O','J','B',' ')},       \/* Eastern Ojibwa -> Ojibway *\/\n+  {\"ojs\",       HB_TAG('O','C','R',' ')},       \/* Severn Ojibwa -> Oji-Cree *\/\n+  {\"ojw\",       HB_TAG('O','J','B',' ')},       \/* Western Ojibwa -> Ojibway *\/\n+  {\"oki\",       HB_TAG('K','A','L',' ')},       \/* Okiek -> Kalenjin *\/\n+  {\"okm\",       HB_TAG('K','O','H',' ')},       \/* Middle Korean (10th-16th cent.) -> Korean Old Hangul *\/\n+  {\"om\",        HB_TAG('O','R','O',' ')},       \/* Oromo [macrolanguage] *\/\n+  {\"or\",        HB_TAG('O','R','I',' ')},       \/* Odia (formerly Oriya) [macrolanguage] *\/\n+  {\"orc\",       HB_TAG('O','R','O',' ')},       \/* Orma -> Oromo *\/\n+  {\"orn\",       HB_TAG('M','L','Y',' ')},       \/* Orang Kanaq -> Malay *\/\n+  {\"ors\",       HB_TAG('M','L','Y',' ')},       \/* Orang Seletar -> Malay *\/\n+  {\"ory\",       HB_TAG('O','R','I',' ')},       \/* Odia (formerly Oriya) *\/\n+  {\"os\",        HB_TAG('O','S','S',' ')},       \/* Ossetian *\/\n+  {\"otw\",       HB_TAG('O','J','B',' ')},       \/* Ottawa -> Ojibway *\/\n+  {\"pa\",        HB_TAG('P','A','N',' ')},       \/* Punjabi *\/\n+\/*{\"pag\",       HB_TAG('P','A','G',' ')},*\/     \/* Pangasinan *\/\n+\/*{\"pam\",       HB_TAG('P','A','M',' ')},*\/     \/* Pampanga -> Pampangan *\/\n+  {\"pap\",       HB_TAG('P','A','P','0')},       \/* Papiamento -> Papiamentu *\/\n+\/*{\"pau\",       HB_TAG('P','A','U',' ')},*\/     \/* Palauan *\/\n+  {\"pbt\",       HB_TAG('P','A','S',' ')},       \/* Southern Pashto -> Pashto *\/\n+  {\"pbu\",       HB_TAG('P','A','S',' ')},       \/* Northern Pashto -> Pashto *\/\n+\/*{\"pcc\",       HB_TAG('P','C','C',' ')},*\/     \/* Bouyei *\/\n+\/*{\"pcd\",       HB_TAG('P','C','D',' ')},*\/     \/* Picard *\/\n+  {\"pce\",       HB_TAG('P','L','G',' ')},       \/* Ruching Palaung -> Palaung *\/\n+  {\"pck\",       HB_TAG('Q','I','N',' ')},       \/* Paite Chin -> Chin *\/\n+\/*{\"pdc\",       HB_TAG('P','D','C',' ')},*\/     \/* Pennsylvania German *\/\n+  {\"pel\",       HB_TAG('M','L','Y',' ')},       \/* Pekal -> Malay *\/\n+  {\"pes\",       HB_TAG('F','A','R',' ')},       \/* Iranian Persian -> Persian *\/\n+  {\"pga\",       HB_TAG('A','R','A',' ')},       \/* Sudanese Creole Arabic -> Arabic *\/\n+\/*{\"phk\",       HB_TAG('P','H','K',' ')},*\/     \/* Phake *\/\n+  {\"pi\",        HB_TAG('P','A','L',' ')},       \/* Pali *\/\n+\/*{\"pih\",       HB_TAG('P','I','H',' ')},*\/     \/* Pitcairn-Norfolk -> Norfolk *\/\n+  {\"pko\",       HB_TAG('K','A','L',' ')},       \/* Pökoot -> Kalenjin *\/\n+  {\"pl\",        HB_TAG('P','L','K',' ')},       \/* Polish *\/\n+  {\"pll\",       HB_TAG('P','L','G',' ')},       \/* Shwe Palaung -> Palaung *\/\n+  {\"plp\",       HB_TAG('P','A','P',' ')},       \/* Palpa (retired code) *\/\n+  {\"plt\",       HB_TAG('M','L','G',' ')},       \/* Plateau Malagasy -> Malagasy *\/\n+\/*{\"pms\",       HB_TAG('P','M','S',' ')},*\/     \/* Piemontese *\/\n+\/*{\"pnb\",       HB_TAG('P','N','B',' ')},*\/     \/* Western Panjabi *\/\n+\/*{\"poh\",       HB_TAG('P','O','H',' ')},*\/     \/* Poqomchi' -> Pocomchi *\/\n+\/*{\"pon\",       HB_TAG('P','O','N',' ')},*\/     \/* Pohnpeian *\/\n+  {\"ppa\",       HB_TAG('B','A','G',' ')},       \/* Pao (retired code) -> Baghelkhandi *\/\n+\/*{\"pro\",       HB_TAG('P','R','O',' ')},*\/     \/* Old Provençal (to 1500) -> Provençal \/ Old Provençal *\/\n+  {\"prs\",       HB_TAG('D','R','I',' ')},       \/* Dari *\/\n+  {\"ps\",        HB_TAG('P','A','S',' ')},       \/* Pashto [macrolanguage] *\/\n+  {\"pse\",       HB_TAG('M','L','Y',' ')},       \/* Central Malay -> Malay *\/\n+  {\"pst\",       HB_TAG('P','A','S',' ')},       \/* Central Pashto -> Pashto *\/\n+  {\"pt\",        HB_TAG('P','T','G',' ')},       \/* Portuguese *\/\n+\/*{\"pwo\",       HB_TAG('P','W','O',' ')},*\/     \/* Pwo Western Karen -> Western Pwo Karen *\/\n+  {\"qu\",        HB_TAG('Q','U','Z',' ')},       \/* Quechua [macrolanguage] *\/\n+  {\"qub\",       HB_TAG('Q','W','H',' ')},       \/* Huallaga Huánuco Quechua -> Quechua (Peru) *\/\n+\/*{\"quc\",       HB_TAG('Q','U','C',' ')},*\/     \/* K’iche’ *\/\n+  {\"qud\",       HB_TAG('Q','V','I',' ')},       \/* Calderón Highland Quichua -> Quechua (Ecuador) *\/\n+  {\"quf\",       HB_TAG('Q','U','Z',' ')},       \/* Lambayeque Quechua -> Quechua *\/\n+  {\"qug\",       HB_TAG('Q','V','I',' ')},       \/* Chimborazo Highland Quichua -> Quechua (Ecuador) *\/\n+\/*{\"quh\",       HB_TAG('Q','U','H',' ')},*\/     \/* South Bolivian Quechua -> Quechua (Bolivia) *\/\n+  {\"quk\",       HB_TAG('Q','U','Z',' ')},       \/* Chachapoyas Quechua -> Quechua *\/\n+  {\"qul\",       HB_TAG('Q','U','Z',' ')},       \/* North Bolivian Quechua -> Quechua *\/\n+  {\"qup\",       HB_TAG('Q','V','I',' ')},       \/* Southern Pastaza Quechua -> Quechua (Ecuador) *\/\n+  {\"qur\",       HB_TAG('Q','W','H',' ')},       \/* Yanahuanca Pasco Quechua -> Quechua (Peru) *\/\n+  {\"qus\",       HB_TAG('Q','U','H',' ')},       \/* Santiago del Estero Quichua -> Quechua (Bolivia) *\/\n+  {\"quw\",       HB_TAG('Q','V','I',' ')},       \/* Tena Lowland Quichua -> Quechua (Ecuador) *\/\n+  {\"qux\",       HB_TAG('Q','W','H',' ')},       \/* Yauyos Quechua -> Quechua (Peru) *\/\n+  {\"quy\",       HB_TAG('Q','U','Z',' ')},       \/* Ayacucho Quechua -> Quechua *\/\n+\/*{\"quz\",       HB_TAG('Q','U','Z',' ')},*\/     \/* Cusco Quechua -> Quechua *\/\n+  {\"qva\",       HB_TAG('Q','W','H',' ')},       \/* Ambo-Pasco Quechua -> Quechua (Peru) *\/\n+  {\"qvc\",       HB_TAG('Q','U','Z',' ')},       \/* Cajamarca Quechua -> Quechua *\/\n+  {\"qve\",       HB_TAG('Q','U','Z',' ')},       \/* Eastern Apurímac Quechua -> Quechua *\/\n+  {\"qvh\",       HB_TAG('Q','W','H',' ')},       \/* Huamalíes-Dos de Mayo Huánuco Quechua -> Quechua (Peru) *\/\n+\/*{\"qvi\",       HB_TAG('Q','V','I',' ')},*\/     \/* Imbabura Highland Quichua -> Quechua (Ecuador) *\/\n+  {\"qvj\",       HB_TAG('Q','V','I',' ')},       \/* Loja Highland Quichua -> Quechua (Ecuador) *\/\n+  {\"qvl\",       HB_TAG('Q','W','H',' ')},       \/* Cajatambo North Lima Quechua -> Quechua (Peru) *\/\n+  {\"qvm\",       HB_TAG('Q','W','H',' ')},       \/* Margos-Yarowilca-Lauricocha Quechua -> Quechua (Peru) *\/\n+  {\"qvn\",       HB_TAG('Q','W','H',' ')},       \/* North Junín Quechua -> Quechua (Peru) *\/\n+  {\"qvo\",       HB_TAG('Q','V','I',' ')},       \/* Napo Lowland Quechua -> Quechua (Ecuador) *\/\n+  {\"qvp\",       HB_TAG('Q','W','H',' ')},       \/* Pacaraos Quechua -> Quechua (Peru) *\/\n+  {\"qvs\",       HB_TAG('Q','U','Z',' ')},       \/* San Martín Quechua -> Quechua *\/\n+  {\"qvw\",       HB_TAG('Q','W','H',' ')},       \/* Huaylla Wanca Quechua -> Quechua (Peru) *\/\n+  {\"qvz\",       HB_TAG('Q','V','I',' ')},       \/* Northern Pastaza Quichua -> Quechua (Ecuador) *\/\n+  {\"qwa\",       HB_TAG('Q','W','H',' ')},       \/* Corongo Ancash Quechua -> Quechua (Peru) *\/\n+  {\"qwc\",       HB_TAG('Q','U','Z',' ')},       \/* Classical Quechua -> Quechua *\/\n+\/*{\"qwh\",       HB_TAG('Q','W','H',' ')},*\/     \/* Huaylas Ancash Quechua -> Quechua (Peru) *\/\n+  {\"qws\",       HB_TAG('Q','W','H',' ')},       \/* Sihuas Ancash Quechua -> Quechua (Peru) *\/\n+  {\"qxa\",       HB_TAG('Q','W','H',' ')},       \/* Chiquián Ancash Quechua -> Quechua (Peru) *\/\n+  {\"qxc\",       HB_TAG('Q','W','H',' ')},       \/* Chincha Quechua -> Quechua (Peru) *\/\n+  {\"qxh\",       HB_TAG('Q','W','H',' ')},       \/* Panao Huánuco Quechua -> Quechua (Peru) *\/\n+  {\"qxl\",       HB_TAG('Q','V','I',' ')},       \/* Salasaca Highland Quichua -> Quechua (Ecuador) *\/\n+  {\"qxn\",       HB_TAG('Q','W','H',' ')},       \/* Northern Conchucos Ancash Quechua -> Quechua (Peru) *\/\n+  {\"qxo\",       HB_TAG('Q','W','H',' ')},       \/* Southern Conchucos Ancash Quechua -> Quechua (Peru) *\/\n+  {\"qxp\",       HB_TAG('Q','U','Z',' ')},       \/* Puno Quechua -> Quechua *\/\n+  {\"qxr\",       HB_TAG('Q','V','I',' ')},       \/* Cañar Highland Quichua -> Quechua (Ecuador) *\/\n+  {\"qxt\",       HB_TAG('Q','W','H',' ')},       \/* Santa Ana de Tusi Pasco Quechua -> Quechua (Peru) *\/\n+  {\"qxu\",       HB_TAG('Q','U','Z',' ')},       \/* Arequipa-La Unión Quechua -> Quechua *\/\n+  {\"qxw\",       HB_TAG('Q','W','H',' ')},       \/* Jauja Wanca Quechua -> Quechua (Peru) *\/\n+  {\"rag\",       HB_TAG('L','U','H',' ')},       \/* Logooli -> Luyia *\/\n+\/*{\"raj\",       HB_TAG('R','A','J',' ')},*\/     \/* Rajasthani [macrolanguage] *\/\n+\/*{\"rar\",       HB_TAG('R','A','R',' ')},*\/     \/* Rarotongan *\/\n+  {\"rbb\",       HB_TAG('P','L','G',' ')},       \/* Rumai Palaung -> Palaung *\/\n+  {\"rbl\",       HB_TAG('B','I','K',' ')},       \/* Miraya Bikol -> Bikol *\/\n+\/*{\"rej\",       HB_TAG('R','E','J',' ')},*\/     \/* Rejang *\/\n+\/*{\"ria\",       HB_TAG('R','I','A',' ')},*\/     \/* Riang (India) *\/\n+\/*{\"rif\",       HB_TAG('R','I','F',' ')},*\/     \/* Tarifit *\/\n+\/*{\"rit\",       HB_TAG('R','I','T',' ')},*\/     \/* Ritharrngu -> Ritarungo *\/\n+  {\"rki\",       HB_TAG('A','R','K',' ')},       \/* Rakhine *\/\n+\/*{\"rkw\",       HB_TAG('R','K','W',' ')},*\/     \/* Arakwal *\/\n+  {\"rm\",        HB_TAG('R','M','S',' ')},       \/* Romansh *\/\n+  {\"rmc\",       HB_TAG('R','O','Y',' ')},       \/* Carpathian Romani -> Romany *\/\n+  {\"rmf\",       HB_TAG('R','O','Y',' ')},       \/* Kalo Finnish Romani -> Romany *\/\n+  {\"rml\",       HB_TAG('R','O','Y',' ')},       \/* Baltic Romani -> Romany *\/\n+  {\"rmn\",       HB_TAG('R','O','Y',' ')},       \/* Balkan Romani -> Romany *\/\n+  {\"rmo\",       HB_TAG('R','O','Y',' ')},       \/* Sinte Romani -> Romany *\/\n+  {\"rmw\",       HB_TAG('R','O','Y',' ')},       \/* Welsh Romani -> Romany *\/\n+\/*{\"rmy\",       HB_TAG('R','M','Y',' ')},*\/     \/* Vlax Romani *\/\n+  {\"rmz\",       HB_TAG('A','R','K',' ')},       \/* Marma -> Rakhine *\/\n+  {\"rn\",        HB_TAG('R','U','N',' ')},       \/* Rundi *\/\n+  {\"rnl\",       HB_TAG('H','A','L',' ')},       \/* Ranglong -> Halam (Falam Chin) *\/\n+  {\"ro\",        HB_TAG('R','O','M',' ')},       \/* Romanian *\/\n+  {\"rom\",       HB_TAG('R','O','Y',' ')},       \/* Romany [macrolanguage] *\/\n+\/*{\"rtm\",       HB_TAG('R','T','M',' ')},*\/     \/* Rotuman *\/\n+  {\"ru\",        HB_TAG('R','U','S',' ')},       \/* Russian *\/\n+  {\"rue\",       HB_TAG('R','S','Y',' ')},       \/* Rusyn *\/\n+\/*{\"rup\",       HB_TAG('R','U','P',' ')},*\/     \/* Aromanian *\/\n+  {\"rw\",        HB_TAG('R','U','A',' ')},       \/* Kinyarwanda *\/\n+  {\"rwr\",       HB_TAG('M','A','W',' ')},       \/* Marwari (India) *\/\n+  {\"sa\",        HB_TAG('S','A','N',' ')},       \/* Sanskrit *\/\n+  {\"sah\",       HB_TAG('Y','A','K',' ')},       \/* Yakut -> Sakha *\/\n+  {\"sam\",       HB_TAG('P','A','A',' ')},       \/* Samaritan Aramaic -> Palestinian Aramaic *\/\n+\/*{\"sas\",       HB_TAG('S','A','S',' ')},*\/     \/* Sasak *\/\n+\/*{\"sat\",       HB_TAG('S','A','T',' ')},*\/     \/* Santali *\/\n+  {\"sc\",        HB_TAG('S','R','D',' ')},       \/* Sardinian [macrolanguage] *\/\n+  {\"sck\",       HB_TAG('S','A','D',' ')},       \/* Sadri *\/\n+\/*{\"scn\",       HB_TAG('S','C','N',' ')},*\/     \/* Sicilian *\/\n+\/*{\"sco\",       HB_TAG('S','C','O',' ')},*\/     \/* Scots *\/\n+  {\"scs\",       HB_TAG('S','C','S',' ')},       \/* North Slavey *\/\n+  {\"scs\",       HB_TAG('S','L','A',' ')},       \/* North Slavey -> Slavey *\/\n+  {\"scs\",       HB_TAG('A','T','H',' ')},       \/* North Slavey -> Athapaskan *\/\n+  {\"sd\",        HB_TAG('S','N','D',' ')},       \/* Sindhi *\/\n+  {\"sdc\",       HB_TAG('S','R','D',' ')},       \/* Sassarese Sardinian -> Sardinian *\/\n+  {\"sdh\",       HB_TAG('K','U','R',' ')},       \/* Southern Kurdish -> Kurdish *\/\n+  {\"sdn\",       HB_TAG('S','R','D',' ')},       \/* Gallurese Sardinian -> Sardinian *\/\n+  {\"se\",        HB_TAG('N','S','M',' ')},       \/* Northern Sami *\/\n+  {\"seh\",       HB_TAG('S','N','A',' ')},       \/* Sena *\/\n+  {\"sek\",       HB_TAG('A','T','H',' ')},       \/* Sekani -> Athapaskan *\/\n+\/*{\"sel\",       HB_TAG('S','E','L',' ')},*\/     \/* Selkup *\/\n+  {\"sez\",       HB_TAG('Q','I','N',' ')},       \/* Senthang Chin -> Chin *\/\n+  {\"sfm\",       HB_TAG('H','M','N',' ')},       \/* Small Flowery Miao -> Hmong *\/\n+  {\"sg\",        HB_TAG('S','G','O',' ')},       \/* Sango *\/\n+\/*{\"sga\",       HB_TAG('S','G','A',' ')},*\/     \/* Old Irish (to 900) *\/\n+  {\"sgc\",       HB_TAG('K','A','L',' ')},       \/* Kipsigis -> Kalenjin *\/\n+\/*{\"sgs\",       HB_TAG('S','G','S',' ')},*\/     \/* Samogitian *\/\n+  {\"sgw\",       HB_TAG('C','H','G',' ')},       \/* Sebat Bet Gurage -> Chaha Gurage *\/\n+  {\"sgw\",       HB_TAG('S','G','W',' ')},       \/* Sebat Bet Gurage -> Chaha Gurage (SIL fonts) *\/\n+\/*{\"shi\",       HB_TAG('S','H','I',' ')},*\/     \/* Tachelhit *\/\n+\/*{\"shn\",       HB_TAG('S','H','N',' ')},*\/     \/* Shan *\/\n+  {\"shu\",       HB_TAG('A','R','A',' ')},       \/* Chadian Arabic -> Arabic *\/\n+  {\"si\",        HB_TAG('S','N','H',' ')},       \/* Sinhala (Sinhalese) *\/\n+\/*{\"sid\",       HB_TAG('S','I','D',' ')},*\/     \/* Sidamo *\/\n+  {\"sjd\",       HB_TAG('K','S','M',' ')},       \/* Kildin Sami *\/\n+  {\"sjo\",       HB_TAG('S','I','B',' ')},       \/* Xibe -> Sibe *\/\n+  {\"sk\",        HB_TAG('S','K','Y',' ')},       \/* Slovak *\/\n+  {\"skg\",       HB_TAG('M','L','G',' ')},       \/* Sakalava Malagasy -> Malagasy *\/\n+  {\"skr\",       HB_TAG('S','R','K',' ')},       \/* Saraiki *\/\n+  {\"sl\",        HB_TAG('S','L','V',' ')},       \/* Slovenian *\/\n+  {\"sm\",        HB_TAG('S','M','O',' ')},       \/* Samoan *\/\n+  {\"sma\",       HB_TAG('S','S','M',' ')},       \/* Southern Sami *\/\n+  {\"smj\",       HB_TAG('L','S','M',' ')},       \/* Lule Sami *\/\n+  {\"smn\",       HB_TAG('I','S','M',' ')},       \/* Inari Sami *\/\n+  {\"sms\",       HB_TAG('S','K','S',' ')},       \/* Skolt Sami *\/\n+  {\"sn\",        HB_TAG('S','N','A','0')},       \/* Shona *\/\n+\/*{\"snk\",       HB_TAG('S','N','K',' ')},*\/     \/* Soninke *\/\n+  {\"so\",        HB_TAG('S','M','L',' ')},       \/* Somali *\/\n+\/*{\"sop\",       HB_TAG('S','O','P',' ')},*\/     \/* Songe *\/\n+  {\"spv\",       HB_TAG('O','R','I',' ')},       \/* Sambalpuri -> Odia (formerly Oriya) *\/\n+  {\"spy\",       HB_TAG('K','A','L',' ')},       \/* Sabaot -> Kalenjin *\/\n+  {\"sq\",        HB_TAG('S','Q','I',' ')},       \/* Albanian [macrolanguage] *\/\n+  {\"sr\",        HB_TAG('S','R','B',' ')},       \/* Serbian *\/\n+  {\"src\",       HB_TAG('S','R','D',' ')},       \/* Logudorese Sardinian -> Sardinian *\/\n+  {\"sro\",       HB_TAG('S','R','D',' ')},       \/* Campidanese Sardinian -> Sardinian *\/\n+\/*{\"srr\",       HB_TAG('S','R','R',' ')},*\/     \/* Serer *\/\n+  {\"srs\",       HB_TAG('A','T','H',' ')},       \/* Sarsi -> Athapaskan *\/\n+  {\"ss\",        HB_TAG('S','W','Z',' ')},       \/* Swati *\/\n+  {\"ssh\",       HB_TAG('A','R','A',' ')},       \/* Shihhi Arabic -> Arabic *\/\n+  {\"st\",        HB_TAG('S','O','T',' ')},       \/* Southern Sotho -> Sotho, Southern *\/\n+\/*{\"stq\",       HB_TAG('S','T','Q',' ')},*\/     \/* Saterfriesisch -> Saterland Frisian *\/\n+  {\"stv\",       HB_TAG('S','I','G',' ')},       \/* Silt'e -> Silte Gurage *\/\n+  {\"su\",        HB_TAG('S','U','N',' ')},       \/* Sundanese *\/\n+\/*{\"suk\",       HB_TAG('S','U','K',' ')},*\/     \/* Sukuma *\/\n+  {\"suq\",       HB_TAG('S','U','R',' ')},       \/* Suri *\/\n+  {\"sv\",        HB_TAG('S','V','E',' ')},       \/* Swedish *\/\n+\/*{\"sva\",       HB_TAG('S','V','A',' ')},*\/     \/* Svan *\/\n+  {\"sw\",        HB_TAG('S','W','K',' ')},       \/* Swahili [macrolanguage] *\/\n+  {\"swb\",       HB_TAG('C','M','R',' ')},       \/* Maore Comorian -> Comorian *\/\n+  {\"swc\",       HB_TAG('S','W','K',' ')},       \/* Congo Swahili -> Swahili *\/\n+  {\"swh\",       HB_TAG('S','W','K',' ')},       \/* Swahili *\/\n+  {\"swv\",       HB_TAG('M','A','W',' ')},       \/* Shekhawati -> Marwari *\/\n+\/*{\"sxu\",       HB_TAG('S','X','U',' ')},*\/     \/* Upper Saxon *\/\n+  {\"syc\",       HB_TAG('S','Y','R',' ')},       \/* Classical Syriac -> Syriac *\/\n+\/*{\"syl\",       HB_TAG('S','Y','L',' ')},*\/     \/* Sylheti *\/\n+\/*{\"syr\",       HB_TAG('S','Y','R',' ')},*\/     \/* Syriac [macrolanguage] *\/\n+\/*{\"szl\",       HB_TAG('S','Z','L',' ')},*\/     \/* Silesian *\/\n+  {\"ta\",        HB_TAG('T','A','M',' ')},       \/* Tamil *\/\n+  {\"taa\",       HB_TAG('A','T','H',' ')},       \/* Lower Tanana -> Athapaskan *\/\n+\/*{\"tab\",       HB_TAG('T','A','B',' ')},*\/     \/* Tabassaran -> Tabasaran *\/\n+  {\"taq\",       HB_TAG('T','M','H',' ')},       \/* Tamasheq -> Tamashek *\/\n+  {\"tau\",       HB_TAG('A','T','H',' ')},       \/* Upper Tanana -> Athapaskan *\/\n+  {\"tcb\",       HB_TAG('A','T','H',' ')},       \/* Tanacross -> Athapaskan *\/\n+  {\"tce\",       HB_TAG('A','T','H',' ')},       \/* Southern Tutchone -> Athapaskan *\/\n+  {\"tcp\",       HB_TAG('Q','I','N',' ')},       \/* Tawr Chin -> Chin *\/\n+  {\"tcy\",       HB_TAG('T','U','L',' ')},       \/* Tulu -> Tumbuka *\/\n+  {\"tcz\",       HB_TAG('Q','I','N',' ')},       \/* Thado Chin -> Chin *\/\n+\/*{\"tdd\",       HB_TAG('T','D','D',' ')},*\/     \/* Tai Nüa -> Dehong Dai *\/\n+  {\"tdx\",       HB_TAG('M','L','G',' ')},       \/* Tandroy-Mahafaly Malagasy -> Malagasy *\/\n+  {\"te\",        HB_TAG('T','E','L',' ')},       \/* Telugu *\/\n+  {\"tec\",       HB_TAG('K','A','L',' ')},       \/* Terik -> Kalenjin *\/\n+  {\"tem\",       HB_TAG('T','M','N',' ')},       \/* Timne -> Temne *\/\n+\/*{\"tet\",       HB_TAG('T','E','T',' ')},*\/     \/* Tetum *\/\n+  {\"tfn\",       HB_TAG('A','T','H',' ')},       \/* Tanaina -> Athapaskan *\/\n+  {\"tg\",        HB_TAG('T','A','J',' ')},       \/* Tajik -> Tajiki *\/\n+  {\"tgj\",       HB_TAG('N','I','S',' ')},       \/* Tagin -> Nisi *\/\n+  {\"tgx\",       HB_TAG('A','T','H',' ')},       \/* Tagish -> Athapaskan *\/\n+  {\"th\",        HB_TAG('T','H','A',' ')},       \/* Thai *\/\n+  {\"tht\",       HB_TAG('A','T','H',' ')},       \/* Tahltan -> Athapaskan *\/\n+  {\"thv\",       HB_TAG('T','M','H',' ')},       \/* Tahaggart Tamahaq -> Tamashek *\/\n+  {\"thz\",       HB_TAG('T','M','H',' ')},       \/* Tayart Tamajeq -> Tamashek *\/\n+  {\"ti\",        HB_TAG('T','G','Y',' ')},       \/* Tigrinya *\/\n+  {\"tig\",       HB_TAG('T','G','R',' ')},       \/* Tigre *\/\n+\/*{\"tiv\",       HB_TAG('T','I','V',' ')},*\/     \/* Tiv *\/\n+  {\"tk\",        HB_TAG('T','K','M',' ')},       \/* Turkmen *\/\n+  {\"tkg\",       HB_TAG('M','L','G',' ')},       \/* Tesaka Malagasy -> Malagasy *\/\n+  {\"tl\",        HB_TAG('T','G','L',' ')},       \/* Tagalog *\/\n+\/*{\"tmh\",       HB_TAG('T','M','H',' ')},*\/     \/* Tamashek [macrolanguage] *\/\n+  {\"tmw\",       HB_TAG('M','L','Y',' ')},       \/* Temuan -> Malay *\/\n+  {\"tn\",        HB_TAG('T','N','A',' ')},       \/* Tswana *\/\n+  {\"tnf\",       HB_TAG('D','R','I',' ')},       \/* Tangshewi (retired code) -> Dari *\/\n+  {\"to\",        HB_TAG('T','G','N',' ')},       \/* Tonga (Tonga Islands) -> Tongan *\/\n+  {\"tod\",       HB_TAG('T','O','D','0')},       \/* Toma *\/\n+  {\"toi\",       HB_TAG('T','N','G',' ')},       \/* Tonga (Zambia) *\/\n+  {\"tol\",       HB_TAG('A','T','H',' ')},       \/* Tolowa -> Athapaskan *\/\n+\/*{\"tpi\",       HB_TAG('T','P','I',' ')},*\/     \/* Tok Pisin *\/\n+  {\"tr\",        HB_TAG('T','R','K',' ')},       \/* Turkish *\/\n+  {\"tru\",       HB_TAG('T','U','A',' ')},       \/* Turoyo -> Turoyo Aramaic *\/\n+  {\"tru\",       HB_TAG('S','Y','R',' ')},       \/* Turoyo -> Syriac *\/\n+  {\"ts\",        HB_TAG('T','S','G',' ')},       \/* Tsonga *\/\n+\/*{\"tsj\",       HB_TAG('T','S','J',' ')},*\/     \/* Tshangla *\/\n+  {\"tt\",        HB_TAG('T','A','T',' ')},       \/* Tatar *\/\n+  {\"ttm\",       HB_TAG('A','T','H',' ')},       \/* Northern Tutchone -> Athapaskan *\/\n+  {\"ttq\",       HB_TAG('T','M','H',' ')},       \/* Tawallammat Tamajaq -> Tamashek *\/\n+\/*{\"tum\",       HB_TAG('T','U','M',' ')},*\/     \/* Tumbuka -> Tulu *\/\n+  {\"tuu\",       HB_TAG('A','T','H',' ')},       \/* Tututni -> Athapaskan *\/\n+  {\"tuy\",       HB_TAG('K','A','L',' ')},       \/* Tugen -> Kalenjin *\/\n+\/*{\"tvl\",       HB_TAG('T','V','L',' ')},*\/     \/* Tuvalu *\/\n+  {\"tw\",        HB_TAG('T','W','I',' ')},       \/* Twi *\/\n+  {\"tw\",        HB_TAG('A','K','A',' ')},       \/* Twi -> Akan *\/\n+  {\"txc\",       HB_TAG('A','T','H',' ')},       \/* Tsetsaut -> Athapaskan *\/\n+  {\"txy\",       HB_TAG('M','L','G',' ')},       \/* Tanosy Malagasy -> Malagasy *\/\n+  {\"ty\",        HB_TAG('T','H','T',' ')},       \/* Tahitian *\/\n+  {\"tyv\",       HB_TAG('T','U','V',' ')},       \/* Tuvinian -> Tuvin *\/\n+\/*{\"tyz\",       HB_TAG('T','Y','Z',' ')},*\/     \/* Tày *\/\n+\/*{\"tzm\",       HB_TAG('T','Z','M',' ')},*\/     \/* Central Atlas Tamazight -> Tamazight *\/\n+\/*{\"tzo\",       HB_TAG('T','Z','O',' ')},*\/     \/* Tzotzil *\/\n+  {\"ubl\",       HB_TAG('B','I','K',' ')},       \/* Buhi'non Bikol -> Bikol *\/\n+\/*{\"udm\",       HB_TAG('U','D','M',' ')},*\/     \/* Udmurt *\/\n+  {\"ug\",        HB_TAG('U','Y','G',' ')},       \/* Uyghur *\/\n+  {\"uk\",        HB_TAG('U','K','R',' ')},       \/* Ukrainian *\/\n+  {\"uki\",       HB_TAG('K','U','I',' ')},       \/* Kui (India) *\/\n+\/*{\"umb\",       HB_TAG('U','M','B',' ')},*\/     \/* Umbundu *\/\n+  {\"unr\",       HB_TAG('M','U','N',' ')},       \/* Mundari *\/\n+  {\"ur\",        HB_TAG('U','R','D',' ')},       \/* Urdu *\/\n+  {\"urk\",       HB_TAG('M','L','Y',' ')},       \/* Urak Lawoi' -> Malay *\/\n+  {\"uz\",        HB_TAG('U','Z','B',' ')},       \/* Uzbek [macrolanguage] *\/\n+  {\"uzn\",       HB_TAG('U','Z','B',' ')},       \/* Northern Uzbek -> Uzbek *\/\n+  {\"uzs\",       HB_TAG('U','Z','B',' ')},       \/* Southern Uzbek -> Uzbek *\/\n+  {\"ve\",        HB_TAG('V','E','N',' ')},       \/* Venda *\/\n+\/*{\"vec\",       HB_TAG('V','E','C',' ')},*\/     \/* Venetian *\/\n+  {\"vi\",        HB_TAG('V','I','T',' ')},       \/* Vietnamese *\/\n+  {\"vkk\",       HB_TAG('M','L','Y',' ')},       \/* Kaur -> Malay *\/\n+  {\"vkt\",       HB_TAG('M','L','Y',' ')},       \/* Tenggarong Kutai Malay -> Malay *\/\n+  {\"vls\",       HB_TAG('F','L','E',' ')},       \/* Vlaams -> Dutch (Flemish) *\/\n+  {\"vmw\",       HB_TAG('M','A','K',' ')},       \/* Makhuwa *\/\n+  {\"vo\",        HB_TAG('V','O','L',' ')},       \/* Volapük *\/\n+\/*{\"vro\",       HB_TAG('V','R','O',' ')},*\/     \/* Võro *\/\n+  {\"wa\",        HB_TAG('W','L','N',' ')},       \/* Walloon *\/\n+\/*{\"war\",       HB_TAG('W','A','R',' ')},*\/     \/* Waray (Philippines) -> Waray-Waray *\/\n+  {\"wbm\",       HB_TAG('W','A',' ',' ')},       \/* Wa *\/\n+  {\"wbr\",       HB_TAG('W','A','G',' ')},       \/* Wagdi *\/\n+  {\"wlc\",       HB_TAG('C','M','R',' ')},       \/* Mwali Comorian -> Comorian *\/\n+  {\"wle\",       HB_TAG('S','I','G',' ')},       \/* Wolane -> Silte Gurage *\/\n+  {\"wlk\",       HB_TAG('A','T','H',' ')},       \/* Wailaki -> Athapaskan *\/\n+  {\"wni\",       HB_TAG('C','M','R',' ')},       \/* Ndzwani Comorian -> Comorian *\/\n+  {\"wo\",        HB_TAG('W','L','F',' ')},       \/* Wolof *\/\n+  {\"wry\",       HB_TAG('M','A','W',' ')},       \/* Merwari -> Marwari *\/\n+  {\"wsg\",       HB_TAG('G','O','N',' ')},       \/* Adilabad Gondi -> Gondi *\/\n+\/*{\"wtm\",       HB_TAG('W','T','M',' ')},*\/     \/* Mewati *\/\n+  {\"wuu\",       HB_TAG('Z','H','S',' ')},       \/* Wu Chinese -> Chinese Simplified *\/\n+  {\"xal\",       HB_TAG('K','L','M',' ')},       \/* Kalmyk *\/\n+  {\"xal\",       HB_TAG('T','O','D',' ')},       \/* Kalmyk -> Todo *\/\n+  {\"xan\",       HB_TAG('S','E','K',' ')},       \/* Xamtanga -> Sekota *\/\n+  {\"xh\",        HB_TAG('X','H','S',' ')},       \/* Xhosa *\/\n+\/*{\"xjb\",       HB_TAG('X','J','B',' ')},*\/     \/* Minjungbal -> Minjangbal *\/\n+\/*{\"xkf\",       HB_TAG('X','K','F',' ')},*\/     \/* Khengkha *\/\n+  {\"xmm\",       HB_TAG('M','L','Y',' ')},       \/* Manado Malay -> Malay *\/\n+  {\"xmv\",       HB_TAG('M','L','G',' ')},       \/* Antankarana Malagasy -> Malagasy *\/\n+  {\"xmw\",       HB_TAG('M','L','G',' ')},       \/* Tsimihety Malagasy -> Malagasy *\/\n+  {\"xnr\",       HB_TAG('D','G','R',' ')},       \/* Kangri -> Dogri *\/\n+\/*{\"xog\",       HB_TAG('X','O','G',' ')},*\/     \/* Soga *\/\n+\/*{\"xpe\",       HB_TAG('X','P','E',' ')},*\/     \/* Liberia Kpelle -> Kpelle (Liberia) *\/\n+  {\"xsl\",       HB_TAG('S','S','L',' ')},       \/* South Slavey *\/\n+  {\"xsl\",       HB_TAG('S','L','A',' ')},       \/* South Slavey -> Slavey *\/\n+  {\"xsl\",       HB_TAG('A','T','H',' ')},       \/* South Slavey -> Athapaskan *\/\n+  {\"xst\",       HB_TAG('S','I','G',' ')},       \/* Silt'e (retired code) -> Silte Gurage *\/\n+  {\"xwo\",       HB_TAG('T','O','D',' ')},       \/* Written Oirat -> Todo *\/\n+\/*{\"yao\",       HB_TAG('Y','A','O',' ')},*\/     \/* Yao *\/\n+\/*{\"yap\",       HB_TAG('Y','A','P',' ')},*\/     \/* Yapese *\/\n+  {\"ybd\",       HB_TAG('A','R','K',' ')},       \/* Yangbye (retired code) -> Rakhine *\/\n+  {\"ydd\",       HB_TAG('J','I','I',' ')},       \/* Eastern Yiddish -> Yiddish *\/\n+  {\"yi\",        HB_TAG('J','I','I',' ')},       \/* Yiddish [macrolanguage] *\/\n+  {\"yih\",       HB_TAG('J','I','I',' ')},       \/* Western Yiddish -> Yiddish *\/\n+  {\"yo\",        HB_TAG('Y','B','A',' ')},       \/* Yoruba *\/\n+  {\"yos\",       HB_TAG('Q','I','N',' ')},       \/* Yos (retired code) -> Chin *\/\n+  {\"yrk\",       HB_TAG('T','N','E',' ')},       \/* Nenets -> Tundra Nenets *\/\n+  {\"yrk\",       HB_TAG('F','N','E',' ')},       \/* Nenets -> Forest Nenets *\/\n+  {\"yue\",       HB_TAG('Z','H','H',' ')},       \/* Yue Chinese -> Chinese, Hong Kong SAR *\/\n+  {\"za\",        HB_TAG('Z','H','A',' ')},       \/* Zhuang [macrolanguage] *\/\n+  {\"zch\",       HB_TAG('Z','H','A',' ')},       \/* Central Hongshuihe Zhuang -> Zhuang *\/\n+  {\"zdj\",       HB_TAG('C','M','R',' ')},       \/* Ngazidja Comorian -> Comorian *\/\n+\/*{\"zea\",       HB_TAG('Z','E','A',' ')},*\/     \/* Zeeuws -> Zealandic *\/\n+  {\"zeh\",       HB_TAG('Z','H','A',' ')},       \/* Eastern Hongshuihe Zhuang -> Zhuang *\/\n+  {\"zgb\",       HB_TAG('Z','H','A',' ')},       \/* Guibei Zhuang -> Zhuang *\/\n+\/*{\"zgh\",       HB_TAG('Z','G','H',' ')},*\/     \/* Standard Moroccan Tamazight *\/\n+  {\"zgm\",       HB_TAG('Z','H','A',' ')},       \/* Minz Zhuang -> Zhuang *\/\n+  {\"zgn\",       HB_TAG('Z','H','A',' ')},       \/* Guibian Zhuang -> Zhuang *\/\n+  {\"zh\",        HB_TAG('Z','H','S',' ')},       \/* Chinese [macrolanguage] -> Chinese Simplified *\/\n+  {\"zhd\",       HB_TAG('Z','H','A',' ')},       \/* Dai Zhuang -> Zhuang *\/\n+  {\"zhn\",       HB_TAG('Z','H','A',' ')},       \/* Nong Zhuang -> Zhuang *\/\n+  {\"zlj\",       HB_TAG('Z','H','A',' ')},       \/* Liujiang Zhuang -> Zhuang *\/\n+  {\"zlm\",       HB_TAG('M','L','Y',' ')},       \/* Malay *\/\n+  {\"zln\",       HB_TAG('Z','H','A',' ')},       \/* Lianshan Zhuang -> Zhuang *\/\n+  {\"zlq\",       HB_TAG('Z','H','A',' ')},       \/* Liuqian Zhuang -> Zhuang *\/\n+  {\"zmi\",       HB_TAG('M','L','Y',' ')},       \/* Negeri Sembilan Malay -> Malay *\/\n+  {\"zne\",       HB_TAG('Z','N','D',' ')},       \/* Zande *\/\n+  {\"zom\",       HB_TAG('Q','I','N',' ')},       \/* Zou -> Chin *\/\n+  {\"zqe\",       HB_TAG('Z','H','A',' ')},       \/* Qiubei Zhuang -> Zhuang *\/\n+  {\"zsm\",       HB_TAG('M','L','Y',' ')},       \/* Standard Malay -> Malay *\/\n+  {\"zu\",        HB_TAG('Z','U','L',' ')},       \/* Zulu *\/\n+  {\"zum\",       HB_TAG('L','R','C',' ')},       \/* Kumzari -> Luri *\/\n+  {\"zyb\",       HB_TAG('Z','H','A',' ')},       \/* Yongbei Zhuang -> Zhuang *\/\n+  {\"zyg\",       HB_TAG('Z','H','A',' ')},       \/* Yang Zhuang -> Zhuang *\/\n+  {\"zyj\",       HB_TAG('Z','H','A',' ')},       \/* Youjiang Zhuang -> Zhuang *\/\n+  {\"zyn\",       HB_TAG('Z','H','A',' ')},       \/* Yongnan Zhuang -> Zhuang *\/\n+\/*{\"zza\",       HB_TAG('Z','Z','A',' ')},*\/     \/* Zazaki [macrolanguage] *\/\n+  {\"zzj\",       HB_TAG('Z','H','A',' ')},       \/* Zuojiang Zhuang -> Zhuang *\/\n@@ -1056,2 +1061,0 @@\n-static_assert (HB_OT_MAX_TAGS_PER_LANGUAGE == 3u, \"\");\n-\n@@ -1188,0 +1191,14 @@\n+    if (lang_matches (&lang_str[1], \"np-hant-hk\"))\n+    {\n+      \/* Northern Ping Chinese *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], \"np-hant-mo\"))\n+    {\n+      \/* Northern Ping Chinese *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -1202,0 +1219,14 @@\n+    if (lang_matches (&lang_str[1], \"sp-hant-hk\"))\n+    {\n+      \/* Southern Ping Chinese *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], \"sp-hant-mo\"))\n+    {\n+      \/* Southern Ping Chinese *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -1272,0 +1303,14 @@\n+    if (lang_matches (&lang_str[1], \"np-hans\"))\n+    {\n+      \/* Northern Ping Chinese *\/\n+      tags[0] = HB_TAG('Z','H','S',' ');  \/* Chinese Simplified *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], \"np-hant\"))\n+    {\n+      \/* Northern Ping Chinese *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -1286,0 +1331,14 @@\n+    if (lang_matches (&lang_str[1], \"sp-hans\"))\n+    {\n+      \/* Southern Ping Chinese *\/\n+      tags[0] = HB_TAG('Z','H','S',' ');  \/* Chinese Simplified *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (lang_matches (&lang_str[1], \"sp-hant\"))\n+    {\n+      \/* Southern Ping Chinese *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -1386,0 +1445,24 @@\n+    if (0 == strncmp (&lang_str[1], \"np-\", 3)\n+        && subtag_matches (lang_str, limit, \"-hk\"))\n+    {\n+      \/* Northern Ping Chinese; Hong Kong *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"np-\", 3)\n+        && subtag_matches (lang_str, limit, \"-mo\"))\n+    {\n+      \/* Northern Ping Chinese; Macao *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"np-\", 3)\n+        && subtag_matches (lang_str, limit, \"-tw\"))\n+    {\n+      \/* Northern Ping Chinese; Taiwan, Province of China *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -1410,0 +1493,24 @@\n+    if (0 == strncmp (&lang_str[1], \"sp-\", 3)\n+        && subtag_matches (lang_str, limit, \"-hk\"))\n+    {\n+      \/* Southern Ping Chinese; Hong Kong *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"sp-\", 3)\n+        && subtag_matches (lang_str, limit, \"-mo\"))\n+    {\n+      \/* Southern Ping Chinese; Macao *\/\n+      tags[0] = HB_TAG('Z','H','H',' ');  \/* Chinese, Hong Kong SAR *\/\n+      *count = 1;\n+      return true;\n+    }\n+    if (0 == strncmp (&lang_str[1], \"sp-\", 3)\n+        && subtag_matches (lang_str, limit, \"-tw\"))\n+    {\n+      \/* Southern Ping Chinese; Taiwan, Province of China *\/\n+      tags[0] = HB_TAG('Z','H','T',' ');  \/* Chinese Traditional *\/\n+      *count = 1;\n+      return true;\n+    }\n@@ -1937,1 +2044,2 @@\n- * the best tag consists of multiple subtags.\n+ * the best tag consists of multiple subtags, or if the best tag does not appear\n+ * in #ot_languages.\n@@ -1947,0 +2055,2 @@\n+  case HB_TAG('A','L','T',' '):  \/* Altai *\/\n+    return hb_language_from_string (\"alt\", -1);  \/* Southern Altai *\/\n@@ -1965,2 +2075,0 @@\n-  case HB_TAG('D','U','J',' '):  \/* Dhuwal *\/\n-    return hb_language_from_string (\"dwu\", -1);  \/* Dhuwal *\/\n@@ -1975,0 +2083,2 @@\n+  case HB_TAG('H','N','D',' '):  \/* Hindko *\/\n+    return hb_language_from_string (\"hnd\", -1);  \/* Southern Hindko *\/\n@@ -1995,0 +2105,2 @@\n+  case HB_TAG('K','U','I',' '):  \/* Kui *\/\n+    return hb_language_from_string (\"uki\", -1);  \/* Kui (India) *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-tag-table.hh","additions":1156,"deletions":1044,"binary":false,"changes":2200,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+#ifndef HB_NO_OT_TAG\n+\n@@ -116,0 +118,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -127,0 +130,1 @@\n+#endif\n@@ -146,1 +150,3 @@\n-    tags[i++] = new_tag | '3';\n+    \/* HB_SCRIPT_MYANMAR maps to 'mym2', but there is no 'mym3'. *\/\n+    if (new_tag != HB_TAG('m','y','m','2'))\n+      tags[i++] = new_tag | '3';\n@@ -174,18 +180,0 @@\n-static int\n-lang_compare_first_component (const void *pa,\n-                              const void *pb)\n-{\n-  const char *a = (const char *) pa;\n-  const char *b = (const char *) pb;\n-  unsigned int da, db;\n-  const char *p;\n-\n-  p = strchr (a, '-');\n-  da = p ? (unsigned int) (p - a) : strlen (a);\n-\n-  p = strchr (b, '-');\n-  db = p ? (unsigned int) (p - b) : strlen (b);\n-\n-  return strncmp (a, b, MAX (da, db));\n-}\n-\n@@ -216,1 +204,2 @@\n-typedef struct {\n+struct LangTag\n+{\n@@ -218,2 +207,19 @@\n-  hb_tag_t tags[HB_OT_MAX_TAGS_PER_LANGUAGE];\n-} LangTag;\n+  hb_tag_t tag;\n+\n+  int cmp (const char *a) const\n+  {\n+    const char *b = this->language;\n+    unsigned int da, db;\n+    const char *p;\n+\n+    p = strchr (a, '-');\n+    da = p ? (unsigned int) (p - a) : strlen (a);\n+\n+    p = strchr (b, '-');\n+    db = p ? (unsigned int) (p - b) : strlen (b);\n+\n+    return strncmp (a, b, hb_max (da, db));\n+  }\n+  int cmp (const LangTag *that) const\n+  { return cmp (that->language); }\n+};\n@@ -233,0 +239,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -241,0 +248,1 @@\n+#endif\n@@ -249,0 +257,1 @@\n+  unsigned int tag_idx;\n@@ -257,1 +266,0 @@\n-    const LangTag *lang_tag;\n@@ -266,4 +274,1 @@\n-    lang_tag = (LangTag *) bsearch (lang_str, ot_languages,\n-                                    ARRAY_LENGTH (ot_languages), sizeof (LangTag),\n-                                    lang_compare_first_component);\n-    if (lang_tag)\n+    if (hb_sorted_array (ot_languages).bfind (lang_str, &tag_idx))\n@@ -272,2 +277,9 @@\n-      for (i = 0; i < *count && lang_tag->tags[i] != HB_TAG_NONE; i++)\n-        tags[i] = lang_tag->tags[i];\n+      while (tag_idx != 0 &&\n+             0 == strcmp (ot_languages[tag_idx].language, ot_languages[tag_idx - 1].language))\n+        tag_idx--;\n+      for (i = 0;\n+           i < *count &&\n+           tag_idx + i < ARRAY_LENGTH (ot_languages) &&\n+           0 == strcmp (ot_languages[tag_idx + i].language, ot_languages[tag_idx].language);\n+           i++)\n+        tags[i] = ot_languages[tag_idx + i].tag;\n@@ -298,4 +310,16 @@\n-  if (private_use_subtag && count && tags && *count)\n-  {\n-    const char *s = strstr (private_use_subtag, prefix);\n-    if (s)\n+#ifdef HB_NO_LANGUAGE_PRIVATE_SUBTAG\n+  return false;\n+#endif\n+\n+  if (!(private_use_subtag && count && tags && *count)) return false;\n+\n+  const char *s = strstr (private_use_subtag, prefix);\n+  if (!s) return false;\n+\n+  char tag[4];\n+  int i;\n+  s += strlen (prefix);\n+  if (s[0] == '-') {\n+    s += 1;\n+    char c;\n+    for (i = 0; i < 8 && ISHEX (s[i]); i++)\n@@ -303,15 +327,5 @@\n-      char tag[4];\n-      int i;\n-      s += strlen (prefix);\n-      for (i = 0; i < 4 && ISALNUM (s[i]); i++)\n-        tag[i] = normalize (s[i]);\n-      if (i)\n-      {\n-        for (; i < 4; i++)\n-          tag[i] = ' ';\n-        tags[0] = HB_TAG (tag[0], tag[1], tag[2], tag[3]);\n-        if ((tags[0] & 0xDFDFDFDF) == HB_OT_TAG_DEFAULT_SCRIPT)\n-          tags[0] ^= ~0xDFDFDFDF;\n-        *count = 1;\n-        return false;\n-      }\n+      c = FROMHEX (s[i]);\n+      if (i % 2 == 0)\n+        tag[i \/ 2] = c << 4;\n+      else\n+        tag[i \/ 2] += c;\n@@ -319,0 +333,8 @@\n+    if (i != 8) return false;\n+  } else {\n+    for (i = 0; i < 4 && ISALNUM (s[i]); i++)\n+      tag[i] = normalize (s[i]);\n+    if (!i) return false;\n+\n+    for (; i < 4; i++)\n+      tag[i] = ' ';\n@@ -320,0 +342,4 @@\n+  tags[0] = HB_TAG (tag[0], tag[1], tag[2], tag[3]);\n+  if ((tags[0] & 0xDFDFDFDF) == HB_OT_TAG_DEFAULT_SCRIPT)\n+    tags[0] ^= ~0xDFDFDFDF;\n+  *count = 1;\n@@ -387,2 +413,2 @@\n-    needs_script = parse_private_use_subtag (private_use_subtag, script_count, script_tags, \"-hbsc\", TOLOWER);\n-    needs_language = parse_private_use_subtag (private_use_subtag, language_count, language_tags, \"-hbot\", TOUPPER);\n+    needs_script = !parse_private_use_subtag (private_use_subtag, script_count, script_tags, \"-hbsc\", TOLOWER);\n+    needs_language = !parse_private_use_subtag (private_use_subtag, language_count, language_tags, \"-hbot\", TOUPPER);\n@@ -422,1 +448,1 @@\n-    if (ot_languages[i].tags[0] == tag)\n+    if (ot_languages[i].tag == tag)\n@@ -425,1 +451,6 @@\n-  \/* Else return a custom language in the form of \"x-hbotABCD\" *\/\n+  \/* Return a custom language in the form of \"x-hbot-AABBCCDD\".\n+   * If it's three letters long, also guess it's ISO 639-3 and lower-case and\n+   * prepend it (if it's not a registered tag, the private use subtags will\n+   * ensure that calling hb_ot_tag_from_language on the result will still return\n+   * the same tag as the original tag).\n+   *\/\n@@ -427,9 +458,15 @@\n-    unsigned char buf[11] = \"x-hbot\";\n-    buf[6] = tag >> 24;\n-    buf[7] = (tag >> 16) & 0xFF;\n-    buf[8] = (tag >> 8) & 0xFF;\n-    buf[9] = tag & 0xFF;\n-    if (buf[9] == 0x20)\n-      buf[9] = '\\0';\n-    buf[10] = '\\0';\n-    return hb_language_from_string ((char *) buf, -1);\n+    char buf[20];\n+    char *str = buf;\n+    if (ISALPHA (tag >> 24)\n+        && ISALPHA ((tag >> 16) & 0xFF)\n+        && ISALPHA ((tag >> 8) & 0xFF)\n+        && (tag & 0xFF) == ' ')\n+    {\n+      buf[0] = TOLOWER (tag >> 24);\n+      buf[1] = TOLOWER ((tag >> 16) & 0xFF);\n+      buf[2] = TOLOWER ((tag >> 8) & 0xFF);\n+      buf[3] = '-';\n+      str += 4;\n+    }\n+    snprintf (str, 16, \"x-hbot-%08x\", tag);\n+    return hb_language_from_string (&*buf, -1);\n@@ -476,1 +513,1 @@\n-      buf = (unsigned char *) malloc (len + 11);\n+      buf = (unsigned char *) malloc (len + 16);\n@@ -483,0 +520,1 @@\n+        int shift;\n@@ -493,4 +531,3 @@\n-        buf[len++] = script_tag >> 24;\n-        buf[len++] = (script_tag >> 16) & 0xFF;\n-        buf[len++] = (script_tag >> 8) & 0xFF;\n-        buf[len++] = script_tag & 0xFF;\n+        buf[len++] = '-';\n+        for (shift = 28; shift >= 0; shift -= 4)\n+          buf[len++] = TOHEX (script_tag >> shift);\n@@ -510,2 +547,2 @@\n-    int c = lang_compare_first_component (ot_languages[i-1].language, ot_languages[i].language);\n-    if (c >= 0)\n+    int c = ot_languages[i].cmp (&ot_languages[i - 1]);\n+    if (c > 0)\n@@ -528,0 +565,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-tag.cc","additions":108,"deletions":68,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -52,3 +52,4 @@\n-  F2DOT14       fromCoord;      \/* A normalized coordinate value obtained using\n-                                 * default normalization. *\/\n-  F2DOT14       toCoord;        \/* The modified, normalized coordinate value. *\/\n+  F2DOT14       coords[2];\n+\/\/   F2DOT14    fromCoord;      \/* A normalized coordinate value obtained using\n+\/\/                               * default normalization. *\/\n+\/\/   F2DOT14    toCoord;        \/* The modified, normalized coordinate value. *\/\n@@ -62,1 +63,1 @@\n-  int map (int value) const\n+  int map (int value, unsigned int from_offset = 0, unsigned int to_offset = 1) const\n@@ -64,0 +65,2 @@\n+#define fromCoord coords[from_offset]\n+#define toCoord coords[to_offset]\n@@ -67,1 +70,0 @@\n-\n@@ -80,1 +82,1 @@\n-    unsigned int count = len;\n+    unsigned int count = len - 1;\n@@ -91,3 +93,4 @@\n-    return arrayZ[i-1].toCoord +\n-           ((arrayZ[i].toCoord - arrayZ[i-1].toCoord) *\n-            (value - arrayZ[i-1].fromCoord) + denom\/2) \/ denom;\n+    return roundf (arrayZ[i-1].toCoord + ((float) (arrayZ[i].toCoord - arrayZ[i-1].toCoord) *\n+                                          (value - arrayZ[i-1].fromCoord)) \/ denom);\n+#undef toCoord\n+#undef fromCoord\n@@ -96,0 +99,2 @@\n+  int unmap (int value) const { return map (value, 1, 0); }\n+\n@@ -126,1 +131,1 @@\n-    unsigned int count = MIN<unsigned int> (coords_length, axisCount);\n+    unsigned int count = hb_min (coords_length, axisCount);\n@@ -136,0 +141,12 @@\n+  void unmap_coords (int *coords, unsigned int coords_length) const\n+  {\n+    unsigned int count = hb_min (coords_length, axisCount);\n+\n+    const SegmentMaps *map = &firstAxisSegmentMaps;\n+    for (unsigned int i = 0; i < count; i++)\n+    {\n+      coords[i] = map->unmap (coords[i]);\n+      map = &StructAfter<SegmentMaps> (*map);\n+    }\n+  }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-avar-table.hh","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  hb_array_t<const Fixed> get_coordinates (unsigned int axis_count) const\n+  hb_array_t<const HBFixed> get_coordinates (unsigned int axis_count) const\n@@ -61,1 +61,1 @@\n-  UnsizedArrayOf<Fixed>\n+  UnsizedArrayOf<HBFixed>\n@@ -73,0 +73,2 @@\n+  int cmp (hb_tag_t key) const { return axisTag.cmp (key); }\n+\n@@ -78,0 +80,50 @@\n+#ifndef HB_DISABLE_DEPRECATED\n+  void get_axis_deprecated (hb_ot_var_axis_t *info) const\n+  {\n+    info->tag = axisTag;\n+    info->name_id = axisNameID;\n+    get_coordinates (info->min_value, info->default_value, info->max_value);\n+  }\n+#endif\n+\n+  void get_axis_info (unsigned axis_index, hb_ot_var_axis_info_t *info) const\n+  {\n+    info->axis_index = axis_index;\n+    info->tag = axisTag;\n+    info->name_id = axisNameID;\n+    info->flags = (hb_ot_var_axis_flags_t) (unsigned int) flags;\n+    get_coordinates (info->min_value, info->default_value, info->max_value);\n+    info->reserved = 0;\n+  }\n+\n+  int normalize_axis_value (float v) const\n+  {\n+    float min_value, default_value, max_value;\n+    get_coordinates (min_value, default_value, max_value);\n+\n+    v = hb_clamp (v, min_value, max_value);\n+\n+    if (v == default_value)\n+      return 0;\n+    else if (v < default_value)\n+      v = (v - default_value) \/ (default_value - min_value);\n+    else\n+      v = (v - default_value) \/ (max_value - default_value);\n+    return roundf (v * 16384.f);\n+  }\n+\n+  float unnormalize_axis_value (int v) const\n+  {\n+    float min_value, default_value, max_value;\n+    get_coordinates (min_value, default_value, max_value);\n+\n+    if (v == 0)\n+      return default_value;\n+    else if (v < 0)\n+      return v * (default_value - min_value) \/ 16384.f + default_value;\n+    else\n+      return v * (max_value - default_value) \/ 16384.f + default_value;\n+  }\n+\n+  hb_ot_name_id_t get_name_id () const { return axisNameID; }\n+\n@@ -84,1 +136,10 @@\n-  public:\n+  protected:\n+  void get_coordinates (float &min, float &default_, float &max) const\n+  {\n+    default_ = defaultValue \/ 65536.f;\n+    \/* Ensure order, to simplify client math. *\/\n+    min = hb_min (default_, minValue \/ 65536.f);\n+    max = hb_max (default_, maxValue \/ 65536.f);\n+  }\n+\n+  protected:\n@@ -86,3 +147,3 @@\n-  Fixed         minValue;       \/* The minimum coordinate value for the axis. *\/\n-  Fixed         defaultValue;   \/* The default coordinate value for the axis. *\/\n-  Fixed         maxValue;       \/* The maximum coordinate value for the axis. *\/\n+  HBFixed       minValue;       \/* The minimum coordinate value for the axis. *\/\n+  HBFixed       defaultValue;   \/* The default coordinate value for the axis. *\/\n+  HBFixed       maxValue;       \/* The maximum coordinate value for the axis. *\/\n@@ -117,27 +178,1 @@\n-  void get_axis_deprecated (unsigned int axis_index,\n-                                   hb_ot_var_axis_t *info) const\n-  {\n-    const AxisRecord &axis = get_axes ()[axis_index];\n-    info->tag = axis.axisTag;\n-    info->name_id =  axis.axisNameID;\n-    info->default_value = axis.defaultValue \/ 65536.;\n-    \/* Ensure order, to simplify client math. *\/\n-    info->min_value = MIN<float> (info->default_value, axis.minValue \/ 65536.);\n-    info->max_value = MAX<float> (info->default_value, axis.maxValue \/ 65536.);\n-  }\n-\n-  void get_axis_info (unsigned int axis_index,\n-                      hb_ot_var_axis_info_t *info) const\n-  {\n-    const AxisRecord &axis = get_axes ()[axis_index];\n-    info->axis_index = axis_index;\n-    info->tag = axis.axisTag;\n-    info->name_id =  axis.axisNameID;\n-    info->flags = (hb_ot_var_axis_flags_t) (unsigned int) axis.flags;\n-    info->default_value = axis.defaultValue \/ 65536.;\n-    \/* Ensure order, to simplify client math. *\/\n-    info->min_value = MIN<float> (info->default_value, axis.minValue \/ 65536.);\n-    info->max_value = MAX<float> (info->default_value, axis.maxValue \/ 65536.);\n-    info->reserved = 0;\n-  }\n-\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -150,12 +185,3 @@\n-      \/* TODO Rewrite as hb_array_t<>::sub-array() *\/\n-      unsigned int count = axisCount;\n-      start_offset = MIN (start_offset, count);\n-\n-      count -= start_offset;\n-      axes_array += start_offset;\n-\n-      count = MIN (count, *axes_count);\n-      *axes_count = count;\n-\n-      for (unsigned int i = 0; i < count; i++)\n-        get_axis_deprecated (start_offset + i, axes_array + i);\n+      hb_array_t<const AxisRecord> arr = get_axes ().sub_array (start_offset, axes_count);\n+      for (unsigned i = 0; i < arr.length; ++i)\n+        arr[i].get_axis_deprecated (&axes_array[i]);\n@@ -165,0 +191,1 @@\n+#endif\n@@ -172,12 +199,3 @@\n-      \/* TODO Rewrite as hb_array_t<>::sub-array() *\/\n-      unsigned int count = axisCount;\n-      start_offset = MIN (start_offset, count);\n-\n-      count -= start_offset;\n-      axes_array += start_offset;\n-\n-      count = MIN (count, *axes_count);\n-      *axes_count = count;\n-\n-      for (unsigned int i = 0; i < count; i++)\n-        get_axis_info (start_offset + i, axes_array + i);\n+      hb_array_t<const AxisRecord> arr = get_axes ().sub_array (start_offset, axes_count);\n+      for (unsigned i = 0; i < arr.length; ++i)\n+        arr[i].get_axis_info (start_offset + i, &axes_array[i]);\n@@ -188,3 +206,3 @@\n-  bool find_axis_deprecated (hb_tag_t tag,\n-                             unsigned int *axis_index,\n-                             hb_ot_var_axis_t *info) const\n+#ifndef HB_DISABLE_DEPRECATED\n+  bool\n+  find_axis_deprecated (hb_tag_t tag, unsigned *axis_index, hb_ot_var_axis_t *info) const\n@@ -192,13 +210,5 @@\n-    const AxisRecord *axes = get_axes ();\n-    unsigned int count = get_axis_count ();\n-    for (unsigned int i = 0; i < count; i++)\n-      if (axes[i].axisTag == tag)\n-      {\n-        if (axis_index)\n-          *axis_index = i;\n-        get_axis_deprecated (i, info);\n-        return true;\n-      }\n-    if (axis_index)\n-      *axis_index = HB_OT_VAR_NO_AXIS_INDEX;\n-    return false;\n+    unsigned i;\n+    if (!axis_index) axis_index = &i;\n+    *axis_index = HB_OT_VAR_NO_AXIS_INDEX;\n+    auto axes = get_axes ();\n+    return axes.lfind (tag, axis_index) && (axes[*axis_index].get_axis_deprecated (info), true);\n@@ -206,0 +216,1 @@\n+#endif\n@@ -207,2 +218,2 @@\n-  bool find_axis_info (hb_tag_t tag,\n-                       hb_ot_var_axis_info_t *info) const\n+  bool\n+  find_axis_info (hb_tag_t tag, hb_ot_var_axis_info_t *info) const\n@@ -210,9 +221,3 @@\n-    const AxisRecord *axes = get_axes ();\n-    unsigned int count = get_axis_count ();\n-    for (unsigned int i = 0; i < count; i++)\n-      if (axes[i].axisTag == tag)\n-      {\n-        get_axis_info (i, info);\n-        return true;\n-      }\n-    return false;\n+    unsigned i;\n+    auto axes = get_axes ();\n+    return axes.lfind (tag, &i) && (axes[i].get_axis_info (i, info), true);\n@@ -222,3 +227,1 @@\n-  {\n-    hb_ot_var_axis_info_t axis;\n-    get_axis_info (axis_index, &axis);\n+  { return get_axes ()[axis_index].normalize_axis_value (v); }\n@@ -226,10 +229,2 @@\n-    v = MAX (MIN (v, axis.max_value), axis.min_value); \/* Clamp. *\/\n-\n-    if (v == axis.default_value)\n-      return 0;\n-    else if (v < axis.default_value)\n-      v = (v - axis.default_value) \/ (axis.default_value - axis.min_value);\n-    else\n-      v = (v - axis.default_value) \/ (axis.max_value - axis.default_value);\n-    return (int) (v * 16384.f + (v >= 0.f ? .5f : -.5f));\n-  }\n+  float unnormalize_axis_value (unsigned int axis_index, int v) const\n+  { return get_axes ()[axis_index].unnormalize_axis_value (v); }\n@@ -256,2 +251,2 @@\n-                                           unsigned int *coords_length, \/* IN\/OUT *\/\n-                                           float        *coords         \/* OUT *\/) const\n+                                    unsigned int *coords_length, \/* IN\/OUT *\/\n+                                    float        *coords         \/* OUT *\/) const\n@@ -269,1 +264,1 @@\n-      hb_array_t<const Fixed> instanceCoords = instance->get_coordinates (axisCount)\n+      hb_array_t<const HBFixed> instanceCoords = instance->get_coordinates (axisCount)\n@@ -277,0 +272,20 @@\n+  void collect_name_ids (hb_set_t *nameids) const\n+  {\n+    if (!has_data ()) return;\n+\n+    + get_axes ()\n+    | hb_map (&AxisRecord::get_name_id)\n+    | hb_sink (nameids)\n+    ;\n+\n+    + hb_range ((unsigned) instanceCount)\n+    | hb_map ([this] (const unsigned _) { return get_instance_subfamily_name_id (_); })\n+    | hb_sink (nameids)\n+    ;\n+\n+    + hb_range ((unsigned) instanceCount)\n+    | hb_map ([this] (const unsigned _) { return get_instance_postscript_name_id (_); })\n+    | hb_sink (nameids)\n+    ;\n+  }\n+\n@@ -302,2 +317,2 @@\n-                                 * to either axisCount * sizeof(Fixed) + 4, or to\n-                                 * axisCount * sizeof(Fixed) + 6. *\/\n+                                 * to either axisCount * sizeof(HBFixed) + 4, or to\n+                                 * axisCount * sizeof(HBFixed) + 6. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-fvar-table.hh","additions":117,"deletions":102,"binary":false,"changes":219,"status":"modified"},{"patch":"@@ -0,0 +1,701 @@\n+\/*\n+ * Copyright © 2019  Adobe Inc.\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Adobe Author(s): Michiharu Ariza\n+ *\/\n+\n+#ifndef HB_OT_VAR_GVAR_TABLE_HH\n+#define HB_OT_VAR_GVAR_TABLE_HH\n+\n+#include \"hb-open-type.hh\"\n+\n+\/*\n+ * gvar -- Glyph Variation Table\n+ * https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/gvar\n+ *\/\n+#define HB_OT_TAG_gvar HB_TAG('g','v','a','r')\n+\n+namespace OT {\n+\n+struct contour_point_t\n+{\n+  void init (float x_ = 0.f, float y_ = 0.f, bool is_end_point_ = false)\n+  { flag = 0; x = x_; y = y_; is_end_point = is_end_point_; }\n+\n+  void translate (const contour_point_t &p) { x += p.x; y += p.y; }\n+\n+  uint8_t flag;\n+  float x, y;\n+  bool is_end_point;\n+};\n+\n+struct contour_point_vector_t : hb_vector_t<contour_point_t>\n+{\n+  void extend (const hb_array_t<contour_point_t> &a)\n+  {\n+    unsigned int old_len = length;\n+    resize (old_len + a.length);\n+    for (unsigned int i = 0; i < a.length; i++)\n+      (*this)[old_len + i] = a[i];\n+  }\n+\n+  void transform (const float (&matrix)[4])\n+  {\n+    for (unsigned int i = 0; i < length; i++)\n+    {\n+      contour_point_t &p = (*this)[i];\n+      float x_ = p.x * matrix[0] + p.y * matrix[2];\n+           p.y = p.x * matrix[1] + p.y * matrix[3];\n+      p.x = x_;\n+    }\n+  }\n+\n+  void translate (const contour_point_t& delta)\n+  {\n+    for (unsigned int i = 0; i < length; i++)\n+      (*this)[i].translate (delta);\n+  }\n+};\n+\n+\/* https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/otvarcommonformats#tuplevariationheader *\/\n+struct TupleVariationHeader\n+{\n+  unsigned get_size (unsigned axis_count) const\n+  { return min_size + get_all_tuples (axis_count).get_size (); }\n+\n+  unsigned get_data_size () const { return varDataSize; }\n+\n+  const TupleVariationHeader &get_next (unsigned axis_count) const\n+  { return StructAtOffset<TupleVariationHeader> (this, get_size (axis_count)); }\n+\n+  float calculate_scalar (const int *coords, unsigned int coord_count,\n+                          const hb_array_t<const F2DOT14> shared_tuples) const\n+  {\n+    hb_array_t<const F2DOT14> peak_tuple;\n+\n+    if (has_peak ())\n+      peak_tuple = get_peak_tuple (coord_count);\n+    else\n+    {\n+      unsigned int index = get_index ();\n+      if (unlikely (index * coord_count >= shared_tuples.length))\n+        return 0.f;\n+      peak_tuple = shared_tuples.sub_array (coord_count * index, coord_count);\n+    }\n+\n+    hb_array_t<const F2DOT14> start_tuple;\n+    hb_array_t<const F2DOT14> end_tuple;\n+    if (has_intermediate ())\n+    {\n+      start_tuple = get_start_tuple (coord_count);\n+      end_tuple = get_end_tuple (coord_count);\n+    }\n+\n+    float scalar = 1.f;\n+    for (unsigned int i = 0; i < coord_count; i++)\n+    {\n+      int v = coords[i];\n+      int peak = peak_tuple[i];\n+      if (!peak || v == peak) continue;\n+\n+      if (has_intermediate ())\n+      {\n+        int start = start_tuple[i];\n+        int end = end_tuple[i];\n+        if (unlikely (start > peak || peak > end ||\n+                      (start < 0 && end > 0 && peak))) continue;\n+        if (v < start || v > end) return 0.f;\n+        if (v < peak)\n+        { if (peak != start) scalar *= (float) (v - start) \/ (peak - start); }\n+        else\n+        { if (peak != end) scalar *= (float) (end - v) \/ (end - peak); }\n+      }\n+      else if (!v || v < hb_min (0, peak) || v > hb_max (0, peak)) return 0.f;\n+      else\n+        scalar *= (float) v \/ peak;\n+    }\n+    return scalar;\n+  }\n+\n+  bool           has_peak () const { return tupleIndex & TuppleIndex::EmbeddedPeakTuple; }\n+  bool   has_intermediate () const { return tupleIndex & TuppleIndex::IntermediateRegion; }\n+  bool has_private_points () const { return tupleIndex & TuppleIndex::PrivatePointNumbers; }\n+  unsigned      get_index () const { return tupleIndex & TuppleIndex::TupleIndexMask; }\n+\n+  protected:\n+  struct TuppleIndex : HBUINT16\n+  {\n+    enum Flags {\n+      EmbeddedPeakTuple   = 0x8000u,\n+      IntermediateRegion  = 0x4000u,\n+      PrivatePointNumbers = 0x2000u,\n+      TupleIndexMask      = 0x0FFFu\n+    };\n+\n+    DEFINE_SIZE_STATIC (2);\n+  };\n+\n+  hb_array_t<const F2DOT14> get_all_tuples (unsigned axis_count) const\n+  { return StructAfter<UnsizedArrayOf<F2DOT14>> (tupleIndex).as_array ((has_peak () + has_intermediate () * 2) * axis_count); }\n+  hb_array_t<const F2DOT14> get_peak_tuple (unsigned axis_count) const\n+  { return get_all_tuples (axis_count).sub_array (0, axis_count); }\n+  hb_array_t<const F2DOT14> get_start_tuple (unsigned axis_count) const\n+  { return get_all_tuples (axis_count).sub_array (has_peak () * axis_count, axis_count); }\n+  hb_array_t<const F2DOT14> get_end_tuple (unsigned axis_count) const\n+  { return get_all_tuples (axis_count).sub_array (has_peak () * axis_count + axis_count, axis_count); }\n+\n+  HBUINT16      varDataSize;    \/* The size in bytes of the serialized\n+                                 * data for this tuple variation table. *\/\n+  TuppleIndex   tupleIndex;     \/* A packed field. The high 4 bits are flags (see below).\n+                                   The low 12 bits are an index into a shared tuple\n+                                   records array. *\/\n+  \/* UnsizedArrayOf<F2DOT14> peakTuple - optional *\/\n+                                \/* Peak tuple record for this tuple variation table — optional,\n+                                 * determined by flags in the tupleIndex value.\n+                                 *\n+                                 * Note that this must always be included in the 'cvar' table. *\/\n+  \/* UnsizedArrayOf<F2DOT14> intermediateStartTuple - optional *\/\n+                                \/* Intermediate start tuple record for this tuple variation table — optional,\n+                                   determined by flags in the tupleIndex value. *\/\n+  \/* UnsizedArrayOf<F2DOT14> intermediateEndTuple - optional *\/\n+                                \/* Intermediate end tuple record for this tuple variation table — optional,\n+                                 * determined by flags in the tupleIndex value. *\/\n+  public:\n+  DEFINE_SIZE_MIN (4);\n+};\n+\n+struct GlyphVariationData\n+{\n+  const TupleVariationHeader &get_tuple_var_header (void) const\n+  { return StructAfter<TupleVariationHeader> (data); }\n+\n+  struct tuple_iterator_t\n+  {\n+    void init (hb_bytes_t var_data_bytes_, unsigned int axis_count_)\n+    {\n+      var_data_bytes = var_data_bytes_;\n+      var_data = var_data_bytes_.as<GlyphVariationData> ();\n+      index = 0;\n+      axis_count = axis_count_;\n+      current_tuple = &var_data->get_tuple_var_header ();\n+      data_offset = 0;\n+    }\n+\n+    bool get_shared_indices (hb_vector_t<unsigned int> &shared_indices \/* OUT *\/)\n+    {\n+      if (var_data->has_shared_point_numbers ())\n+      {\n+        const HBUINT8 *base = &(var_data+var_data->data);\n+        const HBUINT8 *p = base;\n+        if (!unpack_points (p, shared_indices, var_data_bytes)) return false;\n+        data_offset = p - base;\n+      }\n+      return true;\n+    }\n+\n+    bool is_valid () const\n+    {\n+      return (index < var_data->tupleVarCount.get_count ()) &&\n+             var_data_bytes.check_range (current_tuple, TupleVariationHeader::min_size) &&\n+             var_data_bytes.check_range (current_tuple, hb_max (current_tuple->get_data_size (), current_tuple->get_size (axis_count))) &&\n+             current_tuple->get_size (axis_count);\n+    }\n+\n+    bool move_to_next ()\n+    {\n+      data_offset += current_tuple->get_data_size ();\n+      current_tuple = &current_tuple->get_next (axis_count);\n+      index++;\n+      return is_valid ();\n+    }\n+\n+    const HBUINT8 *get_serialized_data () const\n+    { return &(var_data+var_data->data) + data_offset; }\n+\n+    private:\n+    const GlyphVariationData *var_data;\n+    unsigned int index;\n+    unsigned int axis_count;\n+    unsigned int data_offset;\n+\n+    public:\n+    hb_bytes_t var_data_bytes;\n+    const TupleVariationHeader *current_tuple;\n+  };\n+\n+  static bool get_tuple_iterator (hb_bytes_t var_data_bytes, unsigned axis_count,\n+                                  hb_vector_t<unsigned int> &shared_indices \/* OUT *\/,\n+                                  tuple_iterator_t *iterator \/* OUT *\/)\n+  {\n+    iterator->init (var_data_bytes, axis_count);\n+    if (!iterator->get_shared_indices (shared_indices))\n+      return false;\n+    return iterator->is_valid ();\n+  }\n+\n+  bool has_shared_point_numbers () const { return tupleVarCount.has_shared_point_numbers (); }\n+\n+  static bool unpack_points (const HBUINT8 *&p \/* IN\/OUT *\/,\n+                             hb_vector_t<unsigned int> &points \/* OUT *\/,\n+                             const hb_bytes_t &bytes)\n+  {\n+    enum packed_point_flag_t\n+    {\n+      POINTS_ARE_WORDS     = 0x80,\n+      POINT_RUN_COUNT_MASK = 0x7F\n+    };\n+\n+    if (unlikely (!bytes.check_range (p))) return false;\n+\n+    uint16_t count = *p++;\n+    if (count & POINTS_ARE_WORDS)\n+    {\n+      if (unlikely (!bytes.check_range (p))) return false;\n+      count = ((count & POINT_RUN_COUNT_MASK) << 8) | *p++;\n+    }\n+    points.resize (count);\n+\n+    unsigned int n = 0;\n+    uint16_t i = 0;\n+    while (i < count)\n+    {\n+      if (unlikely (!bytes.check_range (p))) return false;\n+      uint16_t j;\n+      uint8_t control = *p++;\n+      uint16_t run_count = (control & POINT_RUN_COUNT_MASK) + 1;\n+      if (control & POINTS_ARE_WORDS)\n+      {\n+        for (j = 0; j < run_count && i < count; j++, i++)\n+        {\n+          if (unlikely (!bytes.check_range ((const HBUINT16 *) p)))\n+            return false;\n+          n += *(const HBUINT16 *)p;\n+          points[i] = n;\n+          p += HBUINT16::static_size;\n+        }\n+      }\n+      else\n+      {\n+        for (j = 0; j < run_count && i < count; j++, i++)\n+        {\n+          if (unlikely (!bytes.check_range (p))) return false;\n+          n += *p++;\n+          points[i] = n;\n+        }\n+      }\n+      if (j < run_count) return false;\n+    }\n+    return true;\n+  }\n+\n+  static bool unpack_deltas (const HBUINT8 *&p \/* IN\/OUT *\/,\n+                             hb_vector_t<int> &deltas \/* IN\/OUT *\/,\n+                             const hb_bytes_t &bytes)\n+  {\n+    enum packed_delta_flag_t\n+    {\n+      DELTAS_ARE_ZERO      = 0x80,\n+      DELTAS_ARE_WORDS     = 0x40,\n+      DELTA_RUN_COUNT_MASK = 0x3F\n+    };\n+\n+    unsigned int i = 0;\n+    unsigned int count = deltas.length;\n+    while (i < count)\n+    {\n+      if (unlikely (!bytes.check_range (p))) return false;\n+      uint8_t control = *p++;\n+      unsigned int run_count = (control & DELTA_RUN_COUNT_MASK) + 1;\n+      unsigned int j;\n+      if (control & DELTAS_ARE_ZERO)\n+        for (j = 0; j < run_count && i < count; j++, i++)\n+          deltas[i] = 0;\n+      else if (control & DELTAS_ARE_WORDS)\n+        for (j = 0; j < run_count && i < count; j++, i++)\n+        {\n+          if (unlikely (!bytes.check_range ((const HBUINT16 *) p)))\n+            return false;\n+          deltas[i] = *(const HBINT16 *) p;\n+          p += HBUINT16::static_size;\n+        }\n+      else\n+        for (j = 0; j < run_count && i < count; j++, i++)\n+        {\n+          if (unlikely (!bytes.check_range (p)))\n+            return false;\n+          deltas[i] = *(const HBINT8 *) p++;\n+        }\n+      if (j < run_count)\n+        return false;\n+    }\n+    return true;\n+  }\n+\n+  bool has_data () const { return tupleVarCount; }\n+\n+  protected:\n+  struct TupleVarCount : HBUINT16\n+  {\n+    bool has_shared_point_numbers () const { return ((*this) & SharedPointNumbers); }\n+    unsigned int get_count () const { return (*this) & CountMask; }\n+\n+    protected:\n+    enum Flags\n+    {\n+      SharedPointNumbers= 0x8000u,\n+      CountMask         = 0x0FFFu\n+    };\n+    public:\n+    DEFINE_SIZE_STATIC (2);\n+  };\n+\n+  TupleVarCount tupleVarCount;  \/* A packed field. The high 4 bits are flags, and the\n+                                 * low 12 bits are the number of tuple variation tables\n+                                 * for this glyph. The number of tuple variation tables\n+                                 * can be any number between 1 and 4095. *\/\n+  OffsetTo<HBUINT8>\n+                data;           \/* Offset from the start of the GlyphVariationData table\n+                                 * to the serialized data. *\/\n+  \/* TupleVariationHeader tupleVariationHeaders[] *\/\/* Array of tuple variation headers. *\/\n+  public:\n+  DEFINE_SIZE_MIN (4);\n+};\n+\n+struct gvar\n+{\n+  static constexpr hb_tag_t tableTag = HB_OT_TAG_gvar;\n+\n+  bool sanitize_shallow (hb_sanitize_context_t *c) const\n+  {\n+    TRACE_SANITIZE (this);\n+    return_trace (c->check_struct (this) && (version.major == 1) &&\n+                  (glyphCount == c->get_num_glyphs ()) &&\n+                  sharedTuples.sanitize (c, this, axisCount * sharedTupleCount) &&\n+                  (is_long_offset () ?\n+                     c->check_array (get_long_offset_array (), glyphCount+1) :\n+                     c->check_array (get_short_offset_array (), glyphCount+1)) &&\n+                  c->check_array (((const HBUINT8*)&(this+dataZ)) + get_offset (0),\n+                                  get_offset (glyphCount) - get_offset (0)));\n+  }\n+\n+  \/* GlyphVariationData not sanitized here; must be checked while accessing each glyph varation data *\/\n+  bool sanitize (hb_sanitize_context_t *c) const\n+  { return sanitize_shallow (c); }\n+\n+  bool subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+\n+    gvar *out = c->serializer->allocate_min<gvar> ();\n+    if (unlikely (!out)) return_trace (false);\n+\n+    out->version.major = 1;\n+    out->version.minor = 0;\n+    out->axisCount = axisCount;\n+    out->sharedTupleCount = sharedTupleCount;\n+\n+    unsigned int num_glyphs = c->plan->num_output_glyphs ();\n+    out->glyphCount = num_glyphs;\n+\n+    unsigned int subset_data_size = 0;\n+    for (hb_codepoint_t gid = 0; gid < num_glyphs; gid++)\n+    {\n+      hb_codepoint_t old_gid;\n+      if (!c->plan->old_gid_for_new_gid (gid, &old_gid)) continue;\n+      subset_data_size += get_glyph_var_data_bytes (c->source_blob, old_gid).length;\n+    }\n+\n+    bool long_offset = subset_data_size & ~0xFFFFu;\n+    out->flags = long_offset ? 1 : 0;\n+\n+    HBUINT8 *subset_offsets = c->serializer->allocate_size<HBUINT8> ((long_offset ? 4 : 2) * (num_glyphs + 1));\n+    if (!subset_offsets) return_trace (false);\n+\n+    \/* shared tuples *\/\n+    if (!sharedTupleCount || !sharedTuples)\n+      out->sharedTuples = 0;\n+    else\n+    {\n+      unsigned int shared_tuple_size = F2DOT14::static_size * axisCount * sharedTupleCount;\n+      F2DOT14 *tuples = c->serializer->allocate_size<F2DOT14> (shared_tuple_size);\n+      if (!tuples) return_trace (false);\n+      out->sharedTuples = (char *) tuples - (char *) out;\n+      memcpy (tuples, this+sharedTuples, shared_tuple_size);\n+    }\n+\n+    char *subset_data = c->serializer->allocate_size<char> (subset_data_size);\n+    if (!subset_data) return_trace (false);\n+    out->dataZ = subset_data - (char *) out;\n+\n+    unsigned int glyph_offset = 0;\n+    for (hb_codepoint_t gid = 0; gid < num_glyphs; gid++)\n+    {\n+      hb_codepoint_t old_gid;\n+      hb_bytes_t var_data_bytes = c->plan->old_gid_for_new_gid (gid, &old_gid)\n+                                ? get_glyph_var_data_bytes (c->source_blob, old_gid)\n+                                : hb_bytes_t ();\n+\n+      if (long_offset)\n+        ((HBUINT32 *) subset_offsets)[gid] = glyph_offset;\n+      else\n+        ((HBUINT16 *) subset_offsets)[gid] = glyph_offset \/ 2;\n+\n+      if (var_data_bytes.length > 0)\n+        memcpy (subset_data, var_data_bytes.arrayZ, var_data_bytes.length);\n+      subset_data += var_data_bytes.length;\n+      glyph_offset += var_data_bytes.length;\n+    }\n+    if (long_offset)\n+      ((HBUINT32 *) subset_offsets)[num_glyphs] = glyph_offset;\n+    else\n+      ((HBUINT16 *) subset_offsets)[num_glyphs] = glyph_offset \/ 2;\n+\n+    return_trace (true);\n+  }\n+\n+  protected:\n+  const hb_bytes_t get_glyph_var_data_bytes (hb_blob_t *blob, hb_codepoint_t glyph) const\n+  {\n+    unsigned start_offset = get_offset (glyph);\n+    unsigned length = get_offset (glyph+1) - start_offset;\n+    hb_bytes_t var_data = blob->as_bytes ().sub_array (((unsigned) dataZ) + start_offset, length);\n+    return likely (var_data.length >= GlyphVariationData::min_size) ? var_data : hb_bytes_t ();\n+  }\n+\n+  bool is_long_offset () const { return flags & 1; }\n+\n+  unsigned get_offset (unsigned i) const\n+  { return is_long_offset () ? get_long_offset_array ()[i] : get_short_offset_array ()[i] * 2; }\n+\n+  const HBUINT32 * get_long_offset_array () const { return (const HBUINT32 *) &offsetZ; }\n+  const HBUINT16 *get_short_offset_array () const { return (const HBUINT16 *) &offsetZ; }\n+\n+  public:\n+  struct accelerator_t\n+  {\n+    void init (hb_face_t *face)\n+    { table = hb_sanitize_context_t ().reference_table<gvar> (face); }\n+    void fini () { table.destroy (); }\n+\n+    private:\n+    struct x_getter { static float get (const contour_point_t &p) { return p.x; } };\n+    struct y_getter { static float get (const contour_point_t &p) { return p.y; } };\n+\n+    template <typename T>\n+    static float infer_delta (const hb_array_t<contour_point_t> points,\n+                              const hb_array_t<contour_point_t> deltas,\n+                              unsigned int target, unsigned int prev, unsigned int next)\n+    {\n+      float target_val = T::get (points[target]);\n+      float prev_val = T::get (points[prev]);\n+      float next_val = T::get (points[next]);\n+      float prev_delta = T::get (deltas[prev]);\n+      float next_delta = T::get (deltas[next]);\n+\n+      if (prev_val == next_val)\n+        return (prev_delta == next_delta) ? prev_delta : 0.f;\n+      else if (target_val <= hb_min (prev_val, next_val))\n+        return (prev_val < next_val) ? prev_delta : next_delta;\n+      else if (target_val >= hb_max (prev_val, next_val))\n+        return (prev_val > next_val) ? prev_delta : next_delta;\n+\n+      \/* linear interpolation *\/\n+      float r = (target_val - prev_val) \/ (next_val - prev_val);\n+      return (1.f - r) * prev_delta + r * next_delta;\n+    }\n+\n+    static unsigned int next_index (unsigned int i, unsigned int start, unsigned int end)\n+    { return (i >= end) ? start : (i + 1); }\n+\n+    public:\n+    bool apply_deltas_to_points (hb_codepoint_t glyph, hb_font_t *font,\n+                                 const hb_array_t<contour_point_t> points) const\n+    {\n+      \/* num_coords should exactly match gvar's axisCount due to how GlyphVariationData tuples are aligned *\/\n+      if (!font->num_coords || font->num_coords != table->axisCount) return true;\n+\n+      if (unlikely (glyph >= table->glyphCount)) return true;\n+\n+      hb_bytes_t var_data_bytes = table->get_glyph_var_data_bytes (table.get_blob (), glyph);\n+      if (!var_data_bytes.as<GlyphVariationData> ()->has_data ()) return true;\n+      hb_vector_t<unsigned int> shared_indices;\n+      GlyphVariationData::tuple_iterator_t iterator;\n+      if (!GlyphVariationData::get_tuple_iterator (var_data_bytes, table->axisCount,\n+                                                   shared_indices, &iterator))\n+        return true; \/* so isn't applied at all *\/\n+\n+      \/* Save original points for inferred delta calculation *\/\n+      contour_point_vector_t orig_points;\n+      orig_points.resize (points.length);\n+      for (unsigned int i = 0; i < orig_points.length; i++)\n+        orig_points[i] = points[i];\n+\n+      contour_point_vector_t deltas; \/* flag is used to indicate referenced point *\/\n+      deltas.resize (points.length);\n+\n+      hb_vector_t<unsigned> end_points;\n+      for (unsigned i = 0; i < points.length; ++i)\n+        if (points[i].is_end_point)\n+          end_points.push (i);\n+\n+      int *coords = font->coords;\n+      unsigned num_coords = font->num_coords;\n+      hb_array_t<const F2DOT14> shared_tuples = (table+table->sharedTuples).as_array (table->sharedTupleCount * table->axisCount);\n+      do\n+      {\n+        float scalar = iterator.current_tuple->calculate_scalar (coords, num_coords, shared_tuples);\n+        if (scalar == 0.f) continue;\n+        const HBUINT8 *p = iterator.get_serialized_data ();\n+        unsigned int length = iterator.current_tuple->get_data_size ();\n+        if (unlikely (!iterator.var_data_bytes.check_range (p, length)))\n+          return false;\n+\n+        hb_bytes_t bytes ((const char *) p, length);\n+        hb_vector_t<unsigned int> private_indices;\n+        if (iterator.current_tuple->has_private_points () &&\n+            !GlyphVariationData::unpack_points (p, private_indices, bytes))\n+          return false;\n+        const hb_array_t<unsigned int> &indices = private_indices.length ? private_indices : shared_indices;\n+\n+        bool apply_to_all = (indices.length == 0);\n+        unsigned int num_deltas = apply_to_all ? points.length : indices.length;\n+        hb_vector_t<int> x_deltas;\n+        x_deltas.resize (num_deltas);\n+        if (!GlyphVariationData::unpack_deltas (p, x_deltas, bytes))\n+          return false;\n+        hb_vector_t<int> y_deltas;\n+        y_deltas.resize (num_deltas);\n+        if (!GlyphVariationData::unpack_deltas (p, y_deltas, bytes))\n+          return false;\n+\n+        for (unsigned int i = 0; i < deltas.length; i++)\n+          deltas[i].init ();\n+        for (unsigned int i = 0; i < num_deltas; i++)\n+        {\n+          unsigned int pt_index = apply_to_all ? i : indices[i];\n+          deltas[pt_index].flag = 1;    \/* this point is referenced, i.e., explicit deltas specified *\/\n+          deltas[pt_index].x += x_deltas[i] * scalar;\n+          deltas[pt_index].y += y_deltas[i] * scalar;\n+        }\n+\n+        \/* infer deltas for unreferenced points *\/\n+        unsigned start_point = 0;\n+        for (unsigned c = 0; c < end_points.length; c++)\n+        {\n+          unsigned end_point = end_points[c];\n+\n+          \/* Check the number of unreferenced points in a contour. If no unref points or no ref points, nothing to do. *\/\n+          unsigned unref_count = 0;\n+          for (unsigned i = start_point; i <= end_point; i++)\n+            if (!deltas[i].flag) unref_count++;\n+\n+          unsigned j = start_point;\n+          if (unref_count == 0 || unref_count > end_point - start_point)\n+            goto no_more_gaps;\n+\n+          for (;;)\n+          {\n+            \/* Locate the next gap of unreferenced points between two referenced points prev and next.\n+             * Note that a gap may wrap around at left (start_point) and\/or at right (end_point).\n+             *\/\n+            unsigned int prev, next, i;\n+            for (;;)\n+            {\n+              i = j;\n+              j = next_index (i, start_point, end_point);\n+              if (deltas[i].flag && !deltas[j].flag) break;\n+            }\n+            prev = j = i;\n+            for (;;)\n+            {\n+              i = j;\n+              j = next_index (i, start_point, end_point);\n+              if (!deltas[i].flag && deltas[j].flag) break;\n+            }\n+            next = j;\n+            \/* Infer deltas for all unref points in the gap between prev and next *\/\n+            i = prev;\n+            for (;;)\n+            {\n+              i = next_index (i, start_point, end_point);\n+              if (i == next) break;\n+              deltas[i].x = infer_delta<x_getter> (orig_points.as_array (), deltas.as_array (), i, prev, next);\n+              deltas[i].y = infer_delta<y_getter> (orig_points.as_array (), deltas.as_array (), i, prev, next);\n+              if (--unref_count == 0) goto no_more_gaps;\n+            }\n+          }\n+no_more_gaps:\n+          start_point = end_point + 1;\n+        }\n+\n+        \/* apply specified \/ inferred deltas to points *\/\n+        for (unsigned int i = 0; i < points.length; i++)\n+        {\n+          points[i].x += roundf (deltas[i].x);\n+          points[i].y += roundf (deltas[i].y);\n+        }\n+      } while (iterator.move_to_next ());\n+\n+      return true;\n+    }\n+\n+    unsigned int get_axis_count () const { return table->axisCount; }\n+\n+    private:\n+    hb_blob_ptr_t<gvar> table;\n+  };\n+\n+  protected:\n+  FixedVersion<>version;        \/* Version number of the glyph variations table\n+                                 * Set to 0x00010000u. *\/\n+  HBUINT16      axisCount;      \/* The number of variation axes for this font. This must be\n+                                 * the same number as axisCount in the 'fvar' table. *\/\n+  HBUINT16      sharedTupleCount;\n+                                \/* The number of shared tuple records. Shared tuple records\n+                                 * can be referenced within glyph variation data tables for\n+                                 * multiple glyphs, as opposed to other tuple records stored\n+                                 * directly within a glyph variation data table. *\/\n+  LNNOffsetTo<UnsizedArrayOf<F2DOT14>>\n+                sharedTuples;   \/* Offset from the start of this table to the shared tuple records.\n+                                 * Array of tuple records shared across all glyph variation data tables. *\/\n+  HBUINT16      glyphCount;     \/* The number of glyphs in this font. This must match the number of\n+                                 * glyphs stored elsewhere in the font. *\/\n+  HBUINT16      flags;          \/* Bit-field that gives the format of the offset array that follows.\n+                                 * If bit 0 is clear, the offsets are uint16; if bit 0 is set, the\n+                                 * offsets are uint32. *\/\n+  LOffsetTo<GlyphVariationData>\n+                dataZ;          \/* Offset from the start of this table to the array of\n+                                 * GlyphVariationData tables. *\/\n+  UnsizedArrayOf<HBUINT8>\n+                offsetZ;        \/* Offsets from the start of the GlyphVariationData array\n+                                 * to each GlyphVariationData table. *\/\n+  public:\n+  DEFINE_SIZE_MIN (20);\n+};\n+\n+struct gvar_accelerator_t : gvar::accelerator_t {};\n+\n+} \/* namespace OT *\/\n+\n+#endif \/* HB_OT_VAR_GVAR_TABLE_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-gvar-table.hh","additions":701,"deletions":0,"binary":false,"changes":701,"status":"added"},{"patch":"@@ -47,0 +47,32 @@\n+  template <typename T>\n+  bool serialize (hb_serialize_context_t *c, const T &plan)\n+  {\n+    unsigned int width = plan.get_width ();\n+    unsigned int inner_bit_count = plan.get_inner_bit_count ();\n+    const hb_array_t<const unsigned int> output_map = plan.get_output_map ();\n+\n+    TRACE_SERIALIZE (this);\n+    if (unlikely (output_map.length && ((((inner_bit_count-1)&~0xF)!=0) || (((width-1)&~0x3)!=0))))\n+      return_trace (false);\n+    if (unlikely (!c->extend_min (*this))) return_trace (false);\n+\n+    format = ((width-1)<<4)|(inner_bit_count-1);\n+    mapCount = output_map.length;\n+    HBUINT8 *p = c->allocate_size<HBUINT8> (width * output_map.length);\n+    if (unlikely (!p)) return_trace (false);\n+    for (unsigned int i = 0; i < output_map.length; i++)\n+    {\n+      unsigned int v = output_map[i];\n+      unsigned int outer = v >> 16;\n+      unsigned int inner = v & 0xFFFF;\n+      unsigned int u = (outer << inner_bit_count) | inner;\n+      for (unsigned int w = width; w > 0;)\n+      {\n+        p[--w] = u;\n+        u >>= 8;\n+      }\n+      p += width;\n+    }\n+    return_trace (true);\n+  }\n+\n@@ -66,1 +98,1 @@\n-      unsigned int n = get_inner_bitcount ();\n+      unsigned int n = get_inner_bit_count ();\n@@ -75,4 +107,3 @@\n-  protected:\n-  unsigned int get_width () const          { return ((format >> 4) & 3) + 1; }\n-\n-  unsigned int get_inner_bitcount () const { return (format & 0xF) + 1; }\n+  unsigned int get_map_count () const       { return mapCount; }\n+  unsigned int get_width () const           { return ((format >> 4) & 3) + 1; }\n+  unsigned int get_inner_bit_count () const { return (format & 0xF) + 1; }\n@@ -91,0 +122,209 @@\n+struct index_map_subset_plan_t\n+{\n+  enum index_map_index_t {\n+    ADV_INDEX,\n+    LSB_INDEX,  \/* dual as TSB *\/\n+    RSB_INDEX,  \/* dual as BSB *\/\n+    VORG_INDEX\n+  };\n+\n+  void init (const DeltaSetIndexMap  &index_map,\n+             hb_inc_bimap_t          &outer_map,\n+             hb_vector_t<hb_set_t *> &inner_sets,\n+             const hb_subset_plan_t  *plan)\n+  {\n+    map_count = 0;\n+    outer_bit_count = 0;\n+    inner_bit_count = 1;\n+    max_inners.init ();\n+    output_map.init ();\n+\n+    if (&index_map == &Null (DeltaSetIndexMap)) return;\n+\n+    unsigned int        last_val = (unsigned int)-1;\n+    hb_codepoint_t      last_gid = (hb_codepoint_t)-1;\n+    hb_codepoint_t      gid = (hb_codepoint_t) hb_min (index_map.get_map_count (), plan->num_output_glyphs ());\n+\n+    outer_bit_count = (index_map.get_width () * 8) - index_map.get_inner_bit_count ();\n+    max_inners.resize (inner_sets.length);\n+    for (unsigned i = 0; i < inner_sets.length; i++) max_inners[i] = 0;\n+\n+    \/* Search backwards for a map value different from the last map value *\/\n+    for (; gid > 0; gid--)\n+    {\n+      hb_codepoint_t    old_gid;\n+      if (!plan->old_gid_for_new_gid (gid - 1, &old_gid))\n+      {\n+        if (last_gid == (hb_codepoint_t) -1)\n+          continue;\n+        else\n+          break;\n+      }\n+\n+      unsigned int v = index_map.map (old_gid);\n+      if (last_gid == (hb_codepoint_t) -1)\n+      {\n+        last_val = v;\n+        last_gid = gid;\n+        continue;\n+      }\n+      if (v != last_val) break;\n+\n+      last_gid = gid;\n+    }\n+\n+    if (unlikely (last_gid == (hb_codepoint_t)-1)) return;\n+    map_count = last_gid;\n+    for (gid = 0; gid < map_count; gid++)\n+    {\n+      hb_codepoint_t    old_gid;\n+      if (plan->old_gid_for_new_gid (gid, &old_gid))\n+      {\n+        unsigned int v = index_map.map (old_gid);\n+        unsigned int outer = v >> 16;\n+        unsigned int inner = v & 0xFFFF;\n+        outer_map.add (outer);\n+        if (inner > max_inners[outer]) max_inners[outer] = inner;\n+        if (outer >= inner_sets.length) return;\n+        inner_sets[outer]->add (inner);\n+      }\n+    }\n+  }\n+\n+  void fini ()\n+  {\n+    max_inners.fini ();\n+    output_map.fini ();\n+  }\n+\n+  void remap (const DeltaSetIndexMap *input_map,\n+              const hb_inc_bimap_t &outer_map,\n+              const hb_vector_t<hb_inc_bimap_t> &inner_maps,\n+              const hb_subset_plan_t *plan)\n+  {\n+    if (input_map == &Null (DeltaSetIndexMap)) return;\n+\n+    for (unsigned int i = 0; i < max_inners.length; i++)\n+    {\n+      if (inner_maps[i].get_population () == 0) continue;\n+      unsigned int bit_count = (max_inners[i]==0)? 1: hb_bit_storage (inner_maps[i][max_inners[i]]);\n+      if (bit_count > inner_bit_count) inner_bit_count = bit_count;\n+    }\n+\n+    output_map.resize (map_count);\n+    for (hb_codepoint_t gid = 0; gid < output_map.length; gid++)\n+    {\n+      hb_codepoint_t    old_gid;\n+      if (plan->old_gid_for_new_gid (gid, &old_gid))\n+      {\n+        unsigned int v = input_map->map (old_gid);\n+        unsigned int outer = v >> 16;\n+        output_map[gid] = (outer_map[outer] << 16) | (inner_maps[outer][v & 0xFFFF]);\n+      }\n+      else\n+        output_map[gid] = 0;    \/* Map unused glyph to outer\/inner=0\/0 *\/\n+    }\n+  }\n+\n+  unsigned int get_inner_bit_count () const { return inner_bit_count; }\n+  unsigned int get_width ()           const { return ((outer_bit_count + inner_bit_count + 7) \/ 8); }\n+  unsigned int get_map_count ()       const { return map_count; }\n+\n+  unsigned int get_size () const\n+  { return (map_count? (DeltaSetIndexMap::min_size + get_width () * map_count): 0); }\n+\n+  bool is_identity () const { return get_output_map ().length == 0; }\n+  hb_array_t<const unsigned int> get_output_map () const { return output_map.as_array (); }\n+\n+  protected:\n+  unsigned int map_count;\n+  hb_vector_t<unsigned int> max_inners;\n+  unsigned int outer_bit_count;\n+  unsigned int inner_bit_count;\n+  hb_vector_t<unsigned int> output_map;\n+};\n+\n+struct hvarvvar_subset_plan_t\n+{\n+  hvarvvar_subset_plan_t() : inner_maps (), index_map_plans () {}\n+  ~hvarvvar_subset_plan_t() { fini (); }\n+\n+  void init (const hb_array_t<const DeltaSetIndexMap *> &index_maps,\n+             const VariationStore &_var_store,\n+             const hb_subset_plan_t *plan)\n+  {\n+    index_map_plans.resize (index_maps.length);\n+\n+    var_store = &_var_store;\n+    inner_sets.resize (var_store->get_sub_table_count ());\n+    for (unsigned int i = 0; i < inner_sets.length; i++)\n+      inner_sets[i] = hb_set_create ();\n+    adv_set = hb_set_create ();\n+\n+    inner_maps.resize (var_store->get_sub_table_count ());\n+\n+    for (unsigned int i = 0; i < inner_maps.length; i++)\n+      inner_maps[i].init ();\n+\n+    if (unlikely (!index_map_plans.length || !inner_sets.length || !inner_maps.length)) return;\n+\n+    bool retain_adv_map = false;\n+    index_map_plans[0].init (*index_maps[0], outer_map, inner_sets, plan);\n+    if (index_maps[0] == &Null (DeltaSetIndexMap))\n+    {\n+      retain_adv_map = plan->retain_gids;\n+      outer_map.add (0);\n+      for (hb_codepoint_t gid = 0; gid < plan->num_output_glyphs (); gid++)\n+      {\n+        hb_codepoint_t old_gid;\n+        if (plan->old_gid_for_new_gid (gid, &old_gid))\n+          inner_sets[0]->add (old_gid);\n+      }\n+      hb_set_union (adv_set, inner_sets[0]);\n+    }\n+\n+    for (unsigned int i = 1; i < index_maps.length; i++)\n+      index_map_plans[i].init (*index_maps[i], outer_map, inner_sets, plan);\n+\n+    outer_map.sort ();\n+\n+    if (retain_adv_map)\n+    {\n+      for (hb_codepoint_t gid = 0; gid < plan->num_output_glyphs (); gid++)\n+        if (inner_sets[0]->has (gid))\n+          inner_maps[0].add (gid);\n+        else\n+          inner_maps[0].skip ();\n+    }\n+    else\n+    {\n+      inner_maps[0].add_set (adv_set);\n+      hb_set_subtract (inner_sets[0], adv_set);\n+      inner_maps[0].add_set (inner_sets[0]);\n+    }\n+\n+    for (unsigned int i = 1; i < inner_maps.length; i++)\n+      inner_maps[i].add_set (inner_sets[i]);\n+\n+    for (unsigned int i = 0; i < index_maps.length; i++)\n+      index_map_plans[i].remap (index_maps[i], outer_map, inner_maps, plan);\n+  }\n+\n+  void fini ()\n+  {\n+    for (unsigned int i = 0; i < inner_sets.length; i++)\n+      hb_set_destroy (inner_sets[i]);\n+    hb_set_destroy (adv_set);\n+    inner_maps.fini_deep ();\n+    index_map_plans.fini_deep ();\n+  }\n+\n+  hb_inc_bimap_t outer_map;\n+  hb_vector_t<hb_inc_bimap_t> inner_maps;\n+  hb_vector_t<index_map_subset_plan_t> index_map_plans;\n+  const VariationStore *var_store;\n+\n+  protected:\n+  hb_vector_t<hb_set_t *> inner_sets;\n+  hb_set_t *adv_set;\n+};\n@@ -117,2 +357,53 @@\n-  float get_advance_var (hb_codepoint_t glyph,\n-                         const int *coords, unsigned int coord_count) const\n+  void listup_index_maps (hb_vector_t<const DeltaSetIndexMap *> &index_maps) const\n+  {\n+    index_maps.push (&(this+advMap));\n+    index_maps.push (&(this+lsbMap));\n+    index_maps.push (&(this+rsbMap));\n+  }\n+\n+  bool serialize_index_maps (hb_serialize_context_t *c,\n+                             const hb_array_t<index_map_subset_plan_t> &im_plans)\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (im_plans[index_map_subset_plan_t::ADV_INDEX].is_identity ())\n+      advMap = 0;\n+    else if (unlikely (!advMap.serialize (c, this).serialize (c, im_plans[index_map_subset_plan_t::ADV_INDEX])))\n+      return_trace (false);\n+    if (im_plans[index_map_subset_plan_t::LSB_INDEX].is_identity ())\n+      lsbMap = 0;\n+    else if (unlikely (!lsbMap.serialize (c, this).serialize (c, im_plans[index_map_subset_plan_t::LSB_INDEX])))\n+      return_trace (false);\n+    if (im_plans[index_map_subset_plan_t::RSB_INDEX].is_identity ())\n+      rsbMap = 0;\n+    else if (unlikely (!rsbMap.serialize (c, this).serialize (c, im_plans[index_map_subset_plan_t::RSB_INDEX])))\n+      return_trace (false);\n+\n+    return_trace (true);\n+  }\n+\n+  template <typename T>\n+  bool _subset (hb_subset_context_t *c) const\n+  {\n+    TRACE_SUBSET (this);\n+    hvarvvar_subset_plan_t      hvar_plan;\n+    hb_vector_t<const DeltaSetIndexMap *>\n+                                index_maps;\n+\n+    ((T*)this)->listup_index_maps (index_maps);\n+    hvar_plan.init (index_maps.as_array (), this+varStore, c->plan);\n+\n+    T *out = c->serializer->allocate_min<T> ();\n+    if (unlikely (!out)) return_trace (false);\n+\n+    out->version.major = 1;\n+    out->version.minor = 0;\n+\n+    if (unlikely (!out->varStore.serialize (c->serializer, out)\n+                     .serialize (c->serializer, hvar_plan.var_store, hvar_plan.inner_maps.as_array ())))\n+      return_trace (false);\n+\n+    return_trace (out->T::serialize_index_maps (c->serializer,\n+                                                hvar_plan.index_map_plans.as_array ()));\n+  }\n+\n+  float get_advance_var (hb_codepoint_t glyph, hb_font_t *font) const\n@@ -121,0 +412,8 @@\n+    return (this+varStore).get_delta (varidx, font->coords, font->num_coords);\n+  }\n+\n+  float get_side_bearing_var (hb_codepoint_t glyph,\n+                              const int *coords, unsigned int coord_count) const\n+  {\n+    if (!has_side_bearing_deltas ()) return 0.f;\n+    unsigned int varidx = (this+lsbMap).map (glyph);\n@@ -124,1 +423,1 @@\n-  bool has_sidebearing_deltas () const { return lsbMap && rsbMap; }\n+  bool has_side_bearing_deltas () const { return lsbMap && rsbMap; }\n@@ -144,0 +443,1 @@\n+  bool subset (hb_subset_context_t *c) const { return HVARVVAR::_subset<HVAR> (c); }\n@@ -155,0 +455,22 @@\n+  void listup_index_maps (hb_vector_t<const DeltaSetIndexMap *> &index_maps) const\n+  {\n+    HVARVVAR::listup_index_maps (index_maps);\n+    index_maps.push (&(this+vorgMap));\n+  }\n+\n+  bool serialize_index_maps (hb_serialize_context_t *c,\n+                             const hb_array_t<index_map_subset_plan_t> &im_plans)\n+  {\n+    TRACE_SERIALIZE (this);\n+    if (unlikely (!HVARVVAR::serialize_index_maps (c, im_plans)))\n+      return_trace (false);\n+    if (!im_plans[index_map_subset_plan_t::VORG_INDEX].get_map_count ())\n+      vorgMap = 0;\n+    else if (unlikely (!vorgMap.serialize (c, this).serialize (c, im_plans[index_map_subset_plan_t::VORG_INDEX])))\n+      return_trace (false);\n+\n+    return_trace (true);\n+  }\n+\n+  bool subset (hb_subset_context_t *c) const { return HVARVVAR::_subset<VVAR> (c); }\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-hvar-table.hh","additions":330,"deletions":8,"binary":false,"changes":338,"status":"modified"},{"patch":"@@ -80,3 +80,5 @@\n-    record = (VariationValueRecord *) bsearch (&tag, valuesZ.arrayZ,\n-                                               valueRecordCount, valueRecordSize,\n-                                               tag_compare);\n+    record = (VariationValueRecord *) hb_bsearch (tag,\n+                                                  (const VariationValueRecord *)\n+                                                    (const HBUINT8 *) valuesZ,\n+                                                  valueRecordCount, valueRecordSize,\n+                                                  tag_compare);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var-mvar-table.hh","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,5 @@\n-#include \"hb-open-type.hh\"\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_VAR\n+\n+#include \"hb-ot-var.h\"\n@@ -29,1 +33,0 @@\n-#include \"hb-ot-face.hh\"\n@@ -33,1 +36,0 @@\n-#include \"hb-ot-var.h\"\n@@ -78,0 +80,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -107,0 +110,1 @@\n+#endif\n@@ -214,0 +218,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var.cc","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  _HB_OT_VAR_AXIS_FLAG_MAX_VALUE= 0x7FFFFFFFu \/*< skip >*\/\n+  _HB_OT_VAR_AXIS_FLAG_MAX_VALUE= HB_TAG_MAX_SIGNED \/*< skip >*\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-var.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  GlyphID       glyph;\n+  HBGlyphID     glyph;\n@@ -72,5 +72,5 @@\n-  bool _subset (const hb_subset_plan_t *plan HB_UNUSED,\n-                const VORG *vorg_table,\n-                const hb_vector_t<VertOriginMetric> &subset_metrics,\n-                unsigned int dest_sz,\n-                void *dest) const\n+  template <typename Iterator,\n+            hb_requires (hb_is_iterator (Iterator))>\n+  void serialize (hb_serialize_context_t *c,\n+                  Iterator it,\n+                  FWORD defaultVertOriginY)\n@@ -78,25 +78,10 @@\n-    hb_serialize_context_t c (dest, dest_sz);\n-\n-    VORG *subset_table = c.start_serialize<VORG> ();\n-    if (unlikely (!c.extend_min (*subset_table)))\n-      return false;\n-\n-    subset_table->version.major.set (1);\n-    subset_table->version.minor.set (0);\n-\n-    subset_table->defaultVertOriginY.set (vorg_table->defaultVertOriginY);\n-    subset_table->vertYOrigins.len.set (subset_metrics.length);\n-\n-    bool success = true;\n-    if (subset_metrics.length > 0)\n-    {\n-      unsigned int  size = VertOriginMetric::static_size * subset_metrics.length;\n-      VertOriginMetric  *metrics = c.allocate_size<VertOriginMetric> (size);\n-      if (likely (metrics != nullptr))\n-        memcpy (metrics, &subset_metrics[0], size);\n-      else\n-        success = false;\n-    }\n-    c.end_serialize ();\n-\n-    return success;\n+\n+    if (unlikely (!c->extend_min ((*this))))  return;\n+\n+    this->version.major = 1;\n+    this->version.minor = 0;\n+\n+    this->defaultVertOriginY = defaultVertOriginY;\n+    this->vertYOrigins.len = it.len ();\n+\n+    c->copy_all (it);\n@@ -105,1 +90,1 @@\n-  bool subset (hb_subset_plan_t *plan) const\n+  bool subset (hb_subset_context_t *c) const\n@@ -107,33 +92,18 @@\n-    hb_blob_t *vorg_blob = hb_sanitize_context_t().reference_table<VORG> (plan->source);\n-    const VORG *vorg_table = vorg_blob->as<VORG> ();\n-\n-    \/* count the number of glyphs to be included in the subset table *\/\n-    hb_vector_t<VertOriginMetric> subset_metrics;\n-    subset_metrics.init ();\n-    unsigned int glyph = 0;\n-    unsigned int i = 0;\n-    while ((glyph < plan->glyphs.length) && (i < vertYOrigins.len))\n-    {\n-      if (plan->glyphs[glyph] > vertYOrigins[i].glyph)\n-        i++;\n-      else if (plan->glyphs[glyph] < vertYOrigins[i].glyph)\n-        glyph++;\n-      else\n-      {\n-        VertOriginMetric *metrics = subset_metrics.push ();\n-        metrics->glyph.set (glyph);\n-        metrics->vertOriginY.set (vertYOrigins[i].vertOriginY);\n-        glyph++;\n-        i++;\n-      }\n-    }\n-\n-    \/* alloc the new table *\/\n-    unsigned int dest_sz = VORG::min_size + VertOriginMetric::static_size * subset_metrics.length;\n-    void *dest = (void *) malloc (dest_sz);\n-    if (unlikely (!dest))\n-    {\n-      subset_metrics.fini ();\n-      hb_blob_destroy (vorg_blob);\n-      return false;\n-    }\n+    TRACE_SUBSET (this);\n+    VORG *vorg_prime = c->serializer->start_embed<VORG> ();\n+    if (unlikely (!c->serializer->check_success (vorg_prime))) return_trace (false);\n+\n+    auto it =\n+    + vertYOrigins.as_array ()\n+    | hb_filter (c->plan->glyphset (), &VertOriginMetric::glyph)\n+    | hb_map ([&] (const VertOriginMetric& _)\n+              {\n+                hb_codepoint_t new_glyph = HB_SET_VALUE_INVALID;\n+                c->plan->new_gid_for_old_gid (_.glyph, &new_glyph);\n+\n+                VertOriginMetric metric;\n+                metric.glyph = new_glyph;\n+                metric.vertOriginY = _.vertOriginY;\n+                return metric;\n+              })\n+    ;\n@@ -142,18 +112,2 @@\n-    if (!_subset (plan, vorg_table, subset_metrics, dest_sz, dest))\n-    {\n-      subset_metrics.fini ();\n-      free (dest);\n-      hb_blob_destroy (vorg_blob);\n-      return false;\n-    }\n-\n-    hb_blob_t *result = hb_blob_create ((const char *)dest,\n-                                        dest_sz,\n-                                        HB_MEMORY_MODE_READONLY,\n-                                        dest,\n-                                        free);\n-    bool success = plan->add_table (HB_OT_TAG_VORG, result);\n-    hb_blob_destroy (result);\n-    subset_metrics.fini ();\n-    hb_blob_destroy (vorg_blob);\n-    return success;\n+    vorg_prime->serialize (c->serializer, it, defaultVertOriginY);\n+    return_trace (true);\n@@ -171,2 +125,3 @@\n-  FixedVersion<>        version;                \/* Version of VORG table. Set to 0x00010000u. *\/\n-  FWORD                 defaultVertOriginY;     \/* The default vertical origin. *\/\n+  FixedVersion<>version;        \/* Version of VORG table. Set to 0x00010000u. *\/\n+  FWORD         defaultVertOriginY;\n+                                \/* The default vertical origin. *\/\n@@ -174,1 +129,1 @@\n-                        vertYOrigins;           \/* The array of vertical origins. *\/\n+                vertYOrigins;   \/* The array of vertical origins. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot-vorg-table.hh","additions":41,"deletions":86,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+#include \"hb-ot-meta.h\"\n+#include \"hb-ot-metrics.h\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ot.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright © 2019  Facebook, Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Facebook Author(s): Behdad Esfahbod\n+ *\/\n+\n+#ifndef HB_POOL_HH\n+#define HB_POOL_HH\n+\n+#include \"hb.hh\"\n+\n+\/* Memory pool for persistent allocation of small objects. *\/\n+\n+template <typename T, unsigned ChunkLen = 16>\n+struct hb_pool_t\n+{\n+  hb_pool_t () : next (nullptr) {}\n+  ~hb_pool_t () { fini (); }\n+\n+  void fini ()\n+  {\n+    next = nullptr;\n+\n+    for (chunk_t *_ : chunks) ::free (_);\n+\n+    chunks.fini ();\n+  }\n+\n+  T* alloc ()\n+  {\n+    if (unlikely (!next))\n+    {\n+      if (unlikely (!chunks.alloc (chunks.length + 1))) return nullptr;\n+      chunk_t *chunk = (chunk_t *) calloc (1, sizeof (chunk_t));\n+      if (unlikely (!chunk)) return nullptr;\n+      chunks.push (chunk);\n+      next = chunk->thread ();\n+    }\n+\n+    T* obj = next;\n+    next = * ((T**) next);\n+\n+    memset (obj, 0, sizeof (T));\n+\n+    return obj;\n+  }\n+\n+  void free (T* obj)\n+  {\n+    * (T**) obj = next;\n+    next = obj;\n+  }\n+\n+  private:\n+\n+  static_assert (ChunkLen > 1, \"\");\n+  static_assert (sizeof (T) >= sizeof (void *), \"\");\n+  static_assert (alignof (T) % alignof (void *) == 0, \"\");\n+\n+  struct chunk_t\n+  {\n+    T* thread ()\n+    {\n+      for (unsigned i = 0; i < ARRAY_LENGTH (arrayZ) - 1; i++)\n+        * (T**) &arrayZ[i] = &arrayZ[i + 1];\n+\n+      * (T**) &arrayZ[ARRAY_LENGTH (arrayZ) - 1] = nullptr;\n+\n+      return arrayZ;\n+    }\n+\n+    T arrayZ[ChunkLen];\n+  };\n+\n+  T* next;\n+  hb_vector_t<chunk_t *> chunks;\n+};\n+\n+\n+#endif \/* HB_POOL_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-pool.hh","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,412 @@\n+\/*\n+ * Copyright © 2007,2008,2009,2010  Red Hat, Inc.\n+ * Copyright © 2012,2018  Google, Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Red Hat Author(s): Behdad Esfahbod\n+ * Google Author(s): Behdad Esfahbod\n+ *\/\n+\n+#ifndef HB_SANITIZE_HH\n+#define HB_SANITIZE_HH\n+\n+#include \"hb.hh\"\n+#include \"hb-blob.hh\"\n+#include \"hb-dispatch.hh\"\n+\n+\n+\/*\n+ * Sanitize\n+ *\n+ *\n+ * === Introduction ===\n+ *\n+ * The sanitize machinery is at the core of our zero-cost font loading.  We\n+ * mmap() font file into memory and create a blob out of it.  Font subtables\n+ * are returned as a readonly sub-blob of the main font blob.  These table\n+ * blobs are then sanitized before use, to ensure invalid memory access does\n+ * not happen.  The toplevel sanitize API use is like, eg. to load the 'head'\n+ * table:\n+ *\n+ *   hb_blob_t *head_blob = hb_sanitize_context_t ().reference_table<OT::head> (face);\n+ *\n+ * The blob then can be converted to a head table struct with:\n+ *\n+ *   const head *head_table = head_blob->as<head> ();\n+ *\n+ * What the reference_table does is, to call hb_face_reference_table() to load\n+ * the table blob, sanitize it and return either the sanitized blob, or empty\n+ * blob if sanitization failed.  The blob->as() function returns the null\n+ * object of its template type argument if the blob is empty.  Otherwise, it\n+ * just casts the blob contents to the desired type.\n+ *\n+ * Sanitizing a blob of data with a type T works as follows (with minor\n+ * simplification):\n+ *\n+ *   - Cast blob content to T*, call sanitize() method of it,\n+ *   - If sanitize succeeded, return blob.\n+ *   - Otherwise, if blob is not writable, try making it writable,\n+ *     or copy if cannot be made writable in-place,\n+ *   - Call sanitize() again.  Return blob if sanitize succeeded.\n+ *   - Return empty blob otherwise.\n+ *\n+ *\n+ * === The sanitize() contract ===\n+ *\n+ * The sanitize() method of each object type shall return true if it's safe to\n+ * call other methods of the object, and false otherwise.\n+ *\n+ * Note that what sanitize() checks for might align with what the specification\n+ * describes as valid table data, but does not have to be.  In particular, we\n+ * do NOT want to be pedantic and concern ourselves with validity checks that\n+ * are irrelevant to our use of the table.  On the contrary, we want to be\n+ * lenient with error handling and accept invalid data to the extent that it\n+ * does not impose extra burden on us.\n+ *\n+ * Based on the sanitize contract, one can see that what we check for depends\n+ * on how we use the data in other table methods.  Ie. if other table methods\n+ * assume that offsets do NOT point out of the table data block, then that's\n+ * something sanitize() must check for (GSUB\/GPOS\/GDEF\/etc work this way).  On\n+ * the other hand, if other methods do such checks themselves, then sanitize()\n+ * does not have to bother with them (glyf\/local work this way).  The choice\n+ * depends on the table structure and sanitize() performance.  For example, to\n+ * check glyf\/loca offsets in sanitize() would cost O(num-glyphs).  We try hard\n+ * to avoid such costs during font loading.  By postponing such checks to the\n+ * actual glyph loading, we reduce the sanitize cost to O(1) and total runtime\n+ * cost to O(used-glyphs).  As such, this is preferred.\n+ *\n+ * The same argument can be made re GSUB\/GPOS\/GDEF, but there, the table\n+ * structure is so complicated that by checking all offsets at sanitize() time,\n+ * we make the code much simpler in other methods, as offsets and referenced\n+ * objects do not need to be validated at each use site.\n+ *\/\n+\n+\/* This limits sanitizing time on really broken fonts. *\/\n+#ifndef HB_SANITIZE_MAX_EDITS\n+#define HB_SANITIZE_MAX_EDITS 32\n+#endif\n+#ifndef HB_SANITIZE_MAX_OPS_FACTOR\n+#define HB_SANITIZE_MAX_OPS_FACTOR 8\n+#endif\n+#ifndef HB_SANITIZE_MAX_OPS_MIN\n+#define HB_SANITIZE_MAX_OPS_MIN 16384\n+#endif\n+#ifndef HB_SANITIZE_MAX_OPS_MAX\n+#define HB_SANITIZE_MAX_OPS_MAX 0x3FFFFFFF\n+#endif\n+#ifndef HB_SANITIZE_MAX_SUTABLES\n+#define HB_SANITIZE_MAX_SUTABLES 0x4000\n+#endif\n+\n+struct hb_sanitize_context_t :\n+       hb_dispatch_context_t<hb_sanitize_context_t, bool, HB_DEBUG_SANITIZE>\n+{\n+  hb_sanitize_context_t () :\n+        start (nullptr), end (nullptr),\n+        max_ops (0), max_subtables (0),\n+        writable (false), edit_count (0),\n+        blob (nullptr),\n+        num_glyphs (65536),\n+        num_glyphs_set (false) {}\n+\n+  const char *get_name () { return \"SANITIZE\"; }\n+  template <typename T, typename F>\n+  bool may_dispatch (const T *obj HB_UNUSED, const F *format)\n+  { return format->sanitize (this); }\n+  static return_t default_return_value () { return true; }\n+  static return_t no_dispatch_return_value () { return false; }\n+  bool stop_sublookup_iteration (const return_t r) const { return !r; }\n+\n+  bool visit_subtables (unsigned count)\n+  {\n+    max_subtables += count;\n+    return max_subtables < HB_SANITIZE_MAX_SUTABLES;\n+  }\n+\n+  private:\n+  template <typename T, typename ...Ts> auto\n+  _dispatch (const T &obj, hb_priority<1>, Ts&&... ds) HB_AUTO_RETURN\n+  ( obj.sanitize (this, hb_forward<Ts> (ds)...) )\n+  template <typename T, typename ...Ts> auto\n+  _dispatch (const T &obj, hb_priority<0>, Ts&&... ds) HB_AUTO_RETURN\n+  ( obj.dispatch (this, hb_forward<Ts> (ds)...) )\n+  public:\n+  template <typename T, typename ...Ts> auto\n+  dispatch (const T &obj, Ts&&... ds) HB_AUTO_RETURN\n+  ( _dispatch (obj, hb_prioritize, hb_forward<Ts> (ds)...) )\n+\n+\n+  void init (hb_blob_t *b)\n+  {\n+    this->blob = hb_blob_reference (b);\n+    this->writable = false;\n+  }\n+\n+  void set_num_glyphs (unsigned int num_glyphs_)\n+  {\n+    num_glyphs = num_glyphs_;\n+    num_glyphs_set = true;\n+  }\n+  unsigned int get_num_glyphs () { return num_glyphs; }\n+\n+  void set_max_ops (int max_ops_) { max_ops = max_ops_; }\n+\n+  template <typename T>\n+  void set_object (const T *obj)\n+  {\n+    reset_object ();\n+\n+    if (!obj) return;\n+\n+    const char *obj_start = (const char *) obj;\n+    if (unlikely (obj_start < this->start || this->end <= obj_start))\n+      this->start = this->end = nullptr;\n+    else\n+    {\n+      this->start = obj_start;\n+      this->end   = obj_start + hb_min (size_t (this->end - obj_start), obj->get_size ());\n+    }\n+  }\n+\n+  void reset_object ()\n+  {\n+    this->start = this->blob->data;\n+    this->end = this->start + this->blob->length;\n+    assert (this->start <= this->end); \/* Must not overflow. *\/\n+  }\n+\n+  void start_processing ()\n+  {\n+    reset_object ();\n+    if (unlikely (hb_unsigned_mul_overflows (this->end - this->start, HB_SANITIZE_MAX_OPS_FACTOR)))\n+      this->max_ops = HB_SANITIZE_MAX_OPS_MAX;\n+    else\n+      this->max_ops = hb_clamp ((unsigned) (this->end - this->start) * HB_SANITIZE_MAX_OPS_FACTOR,\n+                                (unsigned) HB_SANITIZE_MAX_OPS_MIN,\n+                                (unsigned) HB_SANITIZE_MAX_OPS_MAX);\n+    this->edit_count = 0;\n+    this->debug_depth = 0;\n+\n+    DEBUG_MSG_LEVEL (SANITIZE, start, 0, +1,\n+                     \"start [%p..%p] (%lu bytes)\",\n+                     this->start, this->end,\n+                     (unsigned long) (this->end - this->start));\n+  }\n+\n+  void end_processing ()\n+  {\n+    DEBUG_MSG_LEVEL (SANITIZE, this->start, 0, -1,\n+                     \"end [%p..%p] %u edit requests\",\n+                     this->start, this->end, this->edit_count);\n+\n+    hb_blob_destroy (this->blob);\n+    this->blob = nullptr;\n+    this->start = this->end = nullptr;\n+  }\n+\n+  unsigned get_edit_count () { return edit_count; }\n+\n+  bool check_range (const void *base,\n+                    unsigned int len) const\n+  {\n+    const char *p = (const char *) base;\n+    bool ok = !len ||\n+              (this->start <= p &&\n+               p <= this->end &&\n+               (unsigned int) (this->end - p) >= len &&\n+               this->max_ops-- > 0);\n+\n+    DEBUG_MSG_LEVEL (SANITIZE, p, this->debug_depth+1, 0,\n+                     \"check_range [%p..%p]\"\n+                     \" (%d bytes) in [%p..%p] -> %s\",\n+                     p, p + len, len,\n+                     this->start, this->end,\n+                     ok ? \"OK\" : \"OUT-OF-RANGE\");\n+\n+    return likely (ok);\n+  }\n+\n+  template <typename T>\n+  bool check_range (const T *base,\n+                    unsigned int a,\n+                    unsigned int b) const\n+  {\n+    return !hb_unsigned_mul_overflows (a, b) &&\n+           this->check_range (base, a * b);\n+  }\n+\n+  template <typename T>\n+  bool check_range (const T *base,\n+                    unsigned int a,\n+                    unsigned int b,\n+                    unsigned int c) const\n+  {\n+    return !hb_unsigned_mul_overflows (a, b) &&\n+           this->check_range (base, a * b, c);\n+  }\n+\n+  template <typename T>\n+  bool check_array (const T *base, unsigned int len) const\n+  {\n+    return this->check_range (base, len, hb_static_size (T));\n+  }\n+\n+  template <typename T>\n+  bool check_array (const T *base,\n+                    unsigned int a,\n+                    unsigned int b) const\n+  {\n+    return this->check_range (base, a, b, hb_static_size (T));\n+  }\n+\n+  template <typename Type>\n+  bool check_struct (const Type *obj) const\n+  { return likely (this->check_range (obj, obj->min_size)); }\n+\n+  bool may_edit (const void *base, unsigned int len)\n+  {\n+    if (this->edit_count >= HB_SANITIZE_MAX_EDITS)\n+      return false;\n+\n+    const char *p = (const char *) base;\n+    this->edit_count++;\n+\n+    DEBUG_MSG_LEVEL (SANITIZE, p, this->debug_depth+1, 0,\n+       \"may_edit(%u) [%p..%p] (%d bytes) in [%p..%p] -> %s\",\n+       this->edit_count,\n+       p, p + len, len,\n+       this->start, this->end,\n+       this->writable ? \"GRANTED\" : \"DENIED\");\n+\n+    return this->writable;\n+  }\n+\n+  template <typename Type, typename ValueType>\n+  bool try_set (const Type *obj, const ValueType &v)\n+  {\n+    if (this->may_edit (obj, hb_static_size (Type)))\n+    {\n+      * const_cast<Type *> (obj) = v;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  template <typename Type>\n+  hb_blob_t *sanitize_blob (hb_blob_t *blob)\n+  {\n+    bool sane;\n+\n+    init (blob);\n+\n+  retry:\n+    DEBUG_MSG_FUNC (SANITIZE, start, \"start\");\n+\n+    start_processing ();\n+\n+    if (unlikely (!start))\n+    {\n+      end_processing ();\n+      return blob;\n+    }\n+\n+    Type *t = reinterpret_cast<Type *> (const_cast<char *> (start));\n+\n+    sane = t->sanitize (this);\n+    if (sane)\n+    {\n+      if (edit_count)\n+      {\n+        DEBUG_MSG_FUNC (SANITIZE, start, \"passed first round with %d edits; going for second round\", edit_count);\n+\n+        \/* sanitize again to ensure no toe-stepping *\/\n+        edit_count = 0;\n+        sane = t->sanitize (this);\n+        if (edit_count) {\n+          DEBUG_MSG_FUNC (SANITIZE, start, \"requested %d edits in second round; FAILLING\", edit_count);\n+          sane = false;\n+        }\n+      }\n+    }\n+    else\n+    {\n+      if (edit_count && !writable) {\n+        start = hb_blob_get_data_writable (blob, nullptr);\n+        end = start + blob->length;\n+\n+        if (start)\n+        {\n+          writable = true;\n+          \/* ok, we made it writable by relocating.  try again *\/\n+          DEBUG_MSG_FUNC (SANITIZE, start, \"retry\");\n+          goto retry;\n+        }\n+      }\n+    }\n+\n+    end_processing ();\n+\n+    DEBUG_MSG_FUNC (SANITIZE, start, sane ? \"PASSED\" : \"FAILED\");\n+    if (sane)\n+    {\n+      hb_blob_make_immutable (blob);\n+      return blob;\n+    }\n+    else\n+    {\n+      hb_blob_destroy (blob);\n+      return hb_blob_get_empty ();\n+    }\n+  }\n+\n+  template <typename Type>\n+  hb_blob_t *reference_table (const hb_face_t *face, hb_tag_t tableTag = Type::tableTag)\n+  {\n+    if (!num_glyphs_set)\n+      set_num_glyphs (hb_face_get_glyph_count (face));\n+    return sanitize_blob<Type> (hb_face_reference_table (face, tableTag));\n+  }\n+\n+  const char *start, *end;\n+  mutable int max_ops, max_subtables;\n+  private:\n+  bool writable;\n+  unsigned int edit_count;\n+  hb_blob_t *blob;\n+  unsigned int num_glyphs;\n+  bool  num_glyphs_set;\n+};\n+\n+struct hb_sanitize_with_object_t\n+{\n+  template <typename T>\n+  hb_sanitize_with_object_t (hb_sanitize_context_t *c, const T& obj) : c (c)\n+  { c->set_object (obj); }\n+  ~hb_sanitize_with_object_t ()\n+  { c->reset_object (); }\n+\n+  private:\n+  hb_sanitize_context_t *c;\n+};\n+\n+\n+#endif \/* HB_SANITIZE_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-sanitize.hh","additions":412,"deletions":0,"binary":false,"changes":412,"status":"added"},{"patch":"@@ -0,0 +1,553 @@\n+\/*\n+ * Copyright © 2007,2008,2009,2010  Red Hat, Inc.\n+ * Copyright © 2012,2018  Google, Inc.\n+ * Copyright © 2019  Facebook, Inc.\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\n+ * Red Hat Author(s): Behdad Esfahbod\n+ * Google Author(s): Behdad Esfahbod\n+ * Facebook Author(s): Behdad Esfahbod\n+ *\/\n+\n+#ifndef HB_SERIALIZE_HH\n+#define HB_SERIALIZE_HH\n+\n+#include \"hb.hh\"\n+#include \"hb-blob.hh\"\n+#include \"hb-map.hh\"\n+#include \"hb-pool.hh\"\n+\n+\n+\/*\n+ * Serialize\n+ *\/\n+\n+struct hb_serialize_context_t\n+{\n+  typedef unsigned objidx_t;\n+\n+  enum whence_t {\n+     Head,      \/* Relative to the current object head (default). *\/\n+     Tail,      \/* Relative to the current object tail after packed. *\/\n+     Absolute   \/* Absolute: from the start of the serialize buffer. *\/\n+   };\n+\n+  struct object_t\n+  {\n+    void fini () { links.fini (); }\n+\n+    bool operator == (const object_t &o) const\n+    {\n+      return (tail - head == o.tail - o.head)\n+          && (links.length == o.links.length)\n+          && 0 == hb_memcmp (head, o.head, tail - head)\n+          && links.as_bytes () == o.links.as_bytes ();\n+    }\n+    uint32_t hash () const\n+    {\n+      return hb_bytes_t (head, tail - head).hash () ^\n+             links.as_bytes ().hash ();\n+    }\n+\n+    struct link_t\n+    {\n+      bool is_wide: 1;\n+      bool is_signed: 1;\n+      unsigned whence: 2;\n+      unsigned position: 28;\n+      unsigned bias;\n+      objidx_t objidx;\n+    };\n+\n+    char *head;\n+    char *tail;\n+    hb_vector_t<link_t> links;\n+    object_t *next;\n+  };\n+\n+  struct snapshot_t\n+  {\n+    char *head;\n+    char *tail;\n+    object_t *current; \/\/ Just for sanity check\n+    unsigned num_links;\n+  };\n+\n+  snapshot_t snapshot ()\n+  { return snapshot_t { head, tail, current, current->links.length }; }\n+\n+  hb_serialize_context_t (void *start_, unsigned int size) :\n+    start ((char *) start_),\n+    end (start + size),\n+    current (nullptr)\n+  { reset (); }\n+  ~hb_serialize_context_t () { fini (); }\n+\n+  void fini ()\n+  {\n+    for (object_t *_ : ++hb_iter (packed)) _->fini ();\n+    packed.fini ();\n+    this->packed_map.fini ();\n+\n+    while (current)\n+    {\n+      auto *_ = current;\n+      current = current->next;\n+      _->fini ();\n+    }\n+    object_pool.fini ();\n+  }\n+\n+  bool in_error () const { return !this->successful; }\n+\n+  void reset ()\n+  {\n+    this->successful = true;\n+    this->ran_out_of_room = false;\n+    this->head = this->start;\n+    this->tail = this->end;\n+    this->debug_depth = 0;\n+\n+    fini ();\n+    this->packed.push (nullptr);\n+  }\n+\n+  bool check_success (bool success)\n+  { return this->successful && (success || (err_other_error (), false)); }\n+\n+  template <typename T1, typename T2>\n+  bool check_equal (T1 &&v1, T2 &&v2)\n+  { return check_success ((long long) v1 == (long long) v2); }\n+\n+  template <typename T1, typename T2>\n+  bool check_assign (T1 &v1, T2 &&v2)\n+  { return check_equal (v1 = v2, v2); }\n+\n+  template <typename T> bool propagate_error (T &&obj)\n+  { return check_success (!hb_deref (obj).in_error ()); }\n+\n+  template <typename T1, typename... Ts> bool propagate_error (T1 &&o1, Ts&&... os)\n+  { return propagate_error (hb_forward<T1> (o1)) &&\n+           propagate_error (hb_forward<Ts> (os)...); }\n+\n+  \/* To be called around main operation. *\/\n+  template <typename Type>\n+  Type *start_serialize ()\n+  {\n+    DEBUG_MSG_LEVEL (SERIALIZE, this->start, 0, +1,\n+                     \"start [%p..%p] (%lu bytes)\",\n+                     this->start, this->end,\n+                     (unsigned long) (this->end - this->start));\n+\n+    assert (!current);\n+    return push<Type> ();\n+  }\n+  void end_serialize ()\n+  {\n+    DEBUG_MSG_LEVEL (SERIALIZE, this->start, 0, -1,\n+                     \"end [%p..%p] serialized %u bytes; %s\",\n+                     this->start, this->end,\n+                     (unsigned) (this->head - this->start),\n+                     this->successful ? \"successful\" : \"UNSUCCESSFUL\");\n+\n+    propagate_error (packed, packed_map);\n+\n+    if (unlikely (!current)) return;\n+    if (unlikely (in_error())) return;\n+\n+    assert (!current->next);\n+\n+    \/* Only \"pack\" if there exist other objects... Otherwise, don't bother.\n+     * Saves a move. *\/\n+    if (packed.length <= 1)\n+      return;\n+\n+    pop_pack (false);\n+\n+    resolve_links ();\n+  }\n+\n+  template <typename Type = void>\n+  Type *push ()\n+  {\n+    if (unlikely (in_error ())) return start_embed<Type> ();\n+\n+    object_t *obj = object_pool.alloc ();\n+    if (unlikely (!obj))\n+      check_success (false);\n+    else\n+    {\n+      obj->head = head;\n+      obj->tail = tail;\n+      obj->next = current;\n+      current = obj;\n+    }\n+    return start_embed<Type> ();\n+  }\n+  void pop_discard ()\n+  {\n+    object_t *obj = current;\n+    if (unlikely (!obj)) return;\n+    if (unlikely (in_error())) return;\n+\n+    current = current->next;\n+    revert (obj->head, obj->tail);\n+    obj->fini ();\n+    object_pool.free (obj);\n+  }\n+\n+  \/* Set share to false when an object is unlikely sharable with others\n+   * so not worth an attempt, or a contiguous table is serialized as\n+   * multiple consecutive objects in the reverse order so can't be shared.\n+   *\/\n+  objidx_t pop_pack (bool share=true)\n+  {\n+    object_t *obj = current;\n+    if (unlikely (!obj)) return 0;\n+    if (unlikely (in_error())) return 0;\n+\n+    current = current->next;\n+    obj->tail = head;\n+    obj->next = nullptr;\n+    unsigned len = obj->tail - obj->head;\n+    head = obj->head; \/* Rewind head. *\/\n+\n+    if (!len)\n+    {\n+      assert (!obj->links.length);\n+      return 0;\n+    }\n+\n+    objidx_t objidx;\n+    if (share)\n+    {\n+      objidx = packed_map.get (obj);\n+      if (objidx)\n+      {\n+        obj->fini ();\n+        return objidx;\n+      }\n+    }\n+\n+    tail -= len;\n+    memmove (tail, obj->head, len);\n+\n+    obj->head = tail;\n+    obj->tail = tail + len;\n+\n+    packed.push (obj);\n+\n+    if (unlikely (packed.in_error ())) {\n+      \/\/ obj wasn't successfully added to packed, so clean it up otherwise it's\n+      \/\/ links will be leaked.\n+      propagate_error (packed);\n+      obj->fini ();\n+      return 0;\n+    }\n+\n+    objidx = packed.length - 1;\n+\n+    if (share) packed_map.set (obj, objidx);\n+    propagate_error (packed_map);\n+\n+    return objidx;\n+  }\n+\n+  void revert (snapshot_t snap)\n+  {\n+    if (unlikely (in_error ())) return;\n+    assert (snap.current == current);\n+    current->links.shrink (snap.num_links);\n+    revert (snap.head, snap.tail);\n+  }\n+\n+  void revert (char *snap_head,\n+               char *snap_tail)\n+  {\n+    if (unlikely (in_error ())) return;\n+    assert (snap_head <= head);\n+    assert (tail <= snap_tail);\n+    head = snap_head;\n+    tail = snap_tail;\n+    discard_stale_objects ();\n+  }\n+\n+  void discard_stale_objects ()\n+  {\n+    if (unlikely (in_error ())) return;\n+    while (packed.length > 1 &&\n+           packed.tail ()->head < tail)\n+    {\n+      packed_map.del (packed.tail ());\n+      assert (!packed.tail ()->next);\n+      packed.tail ()->fini ();\n+      packed.pop ();\n+    }\n+    if (packed.length > 1)\n+      assert (packed.tail ()->head == tail);\n+  }\n+\n+  template <typename T>\n+  void add_link (T &ofs, objidx_t objidx,\n+                 whence_t whence = Head,\n+                 unsigned bias = 0)\n+  {\n+    static_assert (sizeof (T) == 2 || sizeof (T) == 4, \"\");\n+    if (unlikely (in_error ())) return;\n+\n+    if (!objidx)\n+      return;\n+\n+    assert (current);\n+    assert (current->head <= (const char *) &ofs);\n+\n+    auto& link = *current->links.push ();\n+\n+    link.is_wide = sizeof (T) == 4;\n+    link.is_signed = hb_is_signed (hb_unwrap_type (T));\n+    link.whence = (unsigned) whence;\n+    link.position = (const char *) &ofs - current->head;\n+    link.bias = bias;\n+    link.objidx = objidx;\n+  }\n+\n+  unsigned to_bias (const void *base) const\n+  {\n+    if (unlikely (in_error ())) return 0;\n+    if (!base) return 0;\n+    assert (current);\n+    assert (current->head <= (const char *) base);\n+    return (const char *) base - current->head;\n+  }\n+\n+  void resolve_links ()\n+  {\n+    if (unlikely (in_error ())) return;\n+\n+    assert (!current);\n+    assert (packed.length > 1);\n+\n+    for (const object_t* parent : ++hb_iter (packed))\n+      for (const object_t::link_t &link : parent->links)\n+      {\n+        const object_t* child = packed[link.objidx];\n+        if (unlikely (!child)) { err_other_error(); return; }\n+        unsigned offset = 0;\n+        switch ((whence_t) link.whence) {\n+        case Head:     offset = child->head - parent->head; break;\n+        case Tail:     offset = child->head - parent->tail; break;\n+        case Absolute: offset = (head - start) + (child->head - tail); break;\n+        }\n+\n+        assert (offset >= link.bias);\n+        offset -= link.bias;\n+        if (link.is_signed)\n+        {\n+          if (link.is_wide)\n+            assign_offset<int32_t> (parent, link, offset);\n+          else\n+            assign_offset<int16_t> (parent, link, offset);\n+        }\n+        else\n+        {\n+          if (link.is_wide)\n+            assign_offset<uint32_t> (parent, link, offset);\n+          else\n+            assign_offset<uint16_t> (parent, link, offset);\n+        }\n+      }\n+  }\n+\n+  unsigned int length () const\n+  {\n+    if (unlikely (!current)) return 0;\n+    return this->head - current->head;\n+  }\n+\n+  void align (unsigned int alignment)\n+  {\n+    unsigned int l = length () % alignment;\n+    if (l)\n+      allocate_size<void> (alignment - l);\n+  }\n+\n+  template <typename Type = void>\n+  Type *start_embed (const Type *obj HB_UNUSED = nullptr) const\n+  { return reinterpret_cast<Type *> (this->head); }\n+  template <typename Type>\n+  Type *start_embed (const Type &obj) const\n+  { return start_embed (hb_addressof (obj)); }\n+\n+  \/* Following two functions exist to allow setting breakpoint on. *\/\n+  void err_ran_out_of_room () { this->ran_out_of_room = true; }\n+  void err_other_error () { this->successful = false; }\n+\n+  template <typename Type>\n+  Type *allocate_size (unsigned int size)\n+  {\n+    if (unlikely (!this->successful)) return nullptr;\n+\n+    if (this->tail - this->head < ptrdiff_t (size))\n+    {\n+      err_ran_out_of_room ();\n+      this->successful = false;\n+      return nullptr;\n+    }\n+    memset (this->head, 0, size);\n+    char *ret = this->head;\n+    this->head += size;\n+    return reinterpret_cast<Type *> (ret);\n+  }\n+\n+  template <typename Type>\n+  Type *allocate_min ()\n+  { return this->allocate_size<Type> (Type::min_size); }\n+\n+  template <typename Type>\n+  Type *embed (const Type *obj)\n+  {\n+    unsigned int size = obj->get_size ();\n+    Type *ret = this->allocate_size<Type> (size);\n+    if (unlikely (!ret)) return nullptr;\n+    memcpy (ret, obj, size);\n+    return ret;\n+  }\n+  template <typename Type>\n+  Type *embed (const Type &obj)\n+  { return embed (hb_addressof (obj)); }\n+\n+  template <typename Type, typename ...Ts> auto\n+  _copy (const Type &src, hb_priority<1>, Ts&&... ds) HB_RETURN\n+  (Type *, src.copy (this, hb_forward<Ts> (ds)...))\n+\n+  template <typename Type> auto\n+  _copy (const Type &src, hb_priority<0>) -> decltype (&(hb_declval<Type> () = src))\n+  {\n+    Type *ret = this->allocate_size<Type> (sizeof (Type));\n+    if (unlikely (!ret)) return nullptr;\n+    *ret = src;\n+    return ret;\n+  }\n+\n+  \/* Like embed, but active: calls obj.operator=() or obj.copy() to transfer data\n+   * instead of memcpy(). *\/\n+  template <typename Type, typename ...Ts>\n+  Type *copy (const Type &src, Ts&&... ds)\n+  { return _copy (src, hb_prioritize, hb_forward<Ts> (ds)...); }\n+  template <typename Type, typename ...Ts>\n+  Type *copy (const Type *src, Ts&&... ds)\n+  { return copy (*src, hb_forward<Ts> (ds)...); }\n+\n+  template<typename Iterator,\n+           hb_requires (hb_is_iterator (Iterator)),\n+           typename ...Ts>\n+  void copy_all (Iterator it, Ts&&... ds)\n+  { for (decltype (*it) _ : it) copy (_, hb_forward<Ts> (ds)...); }\n+\n+  template <typename Type>\n+  hb_serialize_context_t& operator << (const Type &obj) & { embed (obj); return *this; }\n+\n+  template <typename Type>\n+  Type *extend_size (Type *obj, unsigned int size)\n+  {\n+    if (unlikely (in_error ())) return nullptr;\n+\n+    assert (this->start <= (char *) obj);\n+    assert ((char *) obj <= this->head);\n+    assert ((char *) obj + size >= this->head);\n+    if (unlikely (!this->allocate_size<Type> (((char *) obj) + size - this->head))) return nullptr;\n+    return reinterpret_cast<Type *> (obj);\n+  }\n+  template <typename Type>\n+  Type *extend_size (Type &obj, unsigned int size)\n+  { return extend_size (hb_addressof (obj), size); }\n+\n+  template <typename Type>\n+  Type *extend_min (Type *obj) { return extend_size (obj, obj->min_size); }\n+  template <typename Type>\n+  Type *extend_min (Type &obj) { return extend_min (hb_addressof (obj)); }\n+\n+  template <typename Type, typename ...Ts>\n+  Type *extend (Type *obj, Ts&&... ds)\n+  { return extend_size (obj, obj->get_size (hb_forward<Ts> (ds)...)); }\n+  template <typename Type, typename ...Ts>\n+  Type *extend (Type &obj, Ts&&... ds)\n+  { return extend (hb_addressof (obj), hb_forward<Ts> (ds)...); }\n+\n+  \/* Output routines. *\/\n+  hb_bytes_t copy_bytes () const\n+  {\n+    assert (this->successful);\n+    \/* Copy both items from head side and tail side... *\/\n+    unsigned int len = (this->head - this->start)\n+                     + (this->end  - this->tail);\n+\n+    char *p = (char *) malloc (len);\n+    if (unlikely (!p)) return hb_bytes_t ();\n+\n+    memcpy (p, this->start, this->head - this->start);\n+    memcpy (p + (this->head - this->start), this->tail, this->end - this->tail);\n+    return hb_bytes_t (p, len);\n+  }\n+  template <typename Type>\n+  Type *copy () const\n+  { return reinterpret_cast<Type *> ((char *) copy_bytes ().arrayZ); }\n+  hb_blob_t *copy_blob () const\n+  {\n+    hb_bytes_t b = copy_bytes ();\n+    return hb_blob_create (b.arrayZ, b.length,\n+                           HB_MEMORY_MODE_WRITABLE,\n+                           (char *) b.arrayZ, free);\n+  }\n+\n+  private:\n+  template <typename T>\n+  void assign_offset (const object_t* parent, const object_t::link_t &link, unsigned offset)\n+  {\n+    auto &off = * ((BEInt<T, sizeof (T)> *) (parent->head + link.position));\n+    assert (0 == off);\n+    check_assign (off, offset);\n+  }\n+\n+  public: \/* TODO Make private. *\/\n+  char *start, *head, *tail, *end;\n+  unsigned int debug_depth;\n+  bool successful;\n+  bool ran_out_of_room;\n+\n+  private:\n+\n+  \/* Object memory pool. *\/\n+  hb_pool_t<object_t> object_pool;\n+\n+  \/* Stack of currently under construction objects. *\/\n+  object_t *current;\n+\n+  \/* Stack of packed objects.  Object 0 is always nil object. *\/\n+  hb_vector_t<object_t *> packed;\n+\n+  \/* Map view of packed objects. *\/\n+  hb_hashmap_t<const object_t *, objidx_t, nullptr, 0> packed_map;\n+};\n+\n+\n+#endif \/* HB_SERIALIZE_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-serialize.hh","additions":553,"deletions":0,"binary":false,"changes":553,"status":"added"},{"patch":"@@ -72,1 +72,1 @@\n-  return const_cast<hb_set_t *> (&Null(hb_set_t));\n+  return const_cast<hb_set_t *> (&Null (hb_set_t));\n@@ -392,0 +392,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -406,0 +407,1 @@\n+#endif\n@@ -480,1 +482,1 @@\n- * Gets the previous number in @set that is slower than current value of @codepoint.\n+ * Gets the previous number in @set that is lower than current value of @codepoint.\n@@ -525,1 +527,1 @@\n- * are greater than current value of @last.\n+ * are less than current value of @first.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-set.cc","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"hb-machinery.hh\"\n@@ -42,1 +43,1 @@\n-  HB_NO_COPY_ASSIGN (hb_set_t);\n+  HB_DELETE_COPY_ASSIGN (hb_set_t);\n@@ -72,1 +73,1 @@\n-    bool has (hb_codepoint_t g) const { return !!(elt (g) & mask (g)); }\n+    bool get (hb_codepoint_t g) const { return elt (g) & mask (g); }\n@@ -91,0 +92,17 @@\n+    void del_range (hb_codepoint_t a, hb_codepoint_t b)\n+    {\n+      elt_t *la = &elt (a);\n+      elt_t *lb = &elt (b);\n+      if (la == lb)\n+        *la &= ~((mask (b) << 1) - mask(a));\n+      else\n+      {\n+        *la &= mask (a) - 1;\n+        la++;\n+\n+        memset (la, 0, (char *) lb - (char *) la);\n+\n+        *lb &= ~((mask (b) << 1) - 1);\n+      }\n+    }\n+\n@@ -137,2 +155,8 @@\n-      const elt_t vv = v[i] & ((elt_t (1) << (j + 1)) - 1);\n-      for (const elt_t *p = &vv; (int) i >= 0; p = &v[--i])\n+      \/* Fancy mask to avoid shifting by elt_t bitsize, which is undefined. *\/\n+      const elt_t mask = j < 8 * sizeof (elt_t) - 1 ?\n+                         ((elt_t (1) << (j + 1)) - 1) :\n+                         (elt_t) -1;\n+      const elt_t vv = v[i] & mask;\n+      const elt_t *p = &vv;\n+      while (true)\n+      {\n@@ -144,0 +168,3 @@\n+        if ((int) i <= 0) break;\n+        p = &v[--i];\n+      }\n@@ -189,1 +216,1 @@\n-  hb_vector_t<page_map_t> page_map;\n+  hb_sorted_vector_t<page_map_t> page_map;\n@@ -230,1 +257,1 @@\n-  void clear ()\n+  void reset ()\n@@ -234,0 +261,1 @@\n+    clear ();\n@@ -235,0 +263,6 @@\n+  }\n+\n+  void clear ()\n+  {\n+    if (unlikely (hb_object_is_immutable (this)))\n+      return;\n@@ -248,1 +282,1 @@\n-  void dirty () { population = (unsigned int) -1; }\n+  void dirty () { population = UINT_MAX; }\n@@ -304,1 +338,1 @@\n-        array = (const T *) ((const char *) array + stride);\n+        array = &StructAtOffsetUnaligned<T> (array, stride);\n@@ -352,0 +386,19 @@\n+\n+  private:\n+  void del_pages (int ds, int de)\n+  {\n+    if (ds <= de)\n+    {\n+      unsigned int write_index = 0;\n+      for (unsigned int i = 0; i < page_map.length; i++)\n+      {\n+        int m = (int) page_map[i].major;\n+        if (m < ds || de < m)\n+          page_map[write_index++] = page_map[i];\n+      }\n+      compact (write_index);\n+      resize (write_index);\n+    }\n+  }\n+\n+  public:\n@@ -355,1 +408,0 @@\n-    \/* TODO Optimize, like add_range(). *\/\n@@ -357,2 +409,25 @@\n-    for (unsigned int i = a; i < b + 1; i++)\n-      del (i);\n+    if (unlikely (a > b || a == INVALID || b == INVALID)) return;\n+    dirty ();\n+    unsigned int ma = get_major (a);\n+    unsigned int mb = get_major (b);\n+    \/* Delete pages from ds through de if ds <= de. *\/\n+    int ds = (a == major_start (ma))? (int) ma: (int) (ma + 1);\n+    int de = (b + 1 == major_start (mb + 1))? (int) mb: ((int) mb - 1);\n+    if (ds > de || (int) ma < ds)\n+    {\n+      page_t *page = page_for (a);\n+      if (page)\n+      {\n+        if (ma == mb)\n+          page->del_range (a, b);\n+        else\n+          page->del_range (a, major_start (ma + 1) - 1);\n+      }\n+    }\n+    if (de < (int) mb && ma != mb)\n+    {\n+      page_t *page = page_for (b);\n+      if (page)\n+        page->del_range (major_start (mb), b);\n+    }\n+    del_pages (ds, de);\n@@ -360,1 +435,2 @@\n-  bool has (hb_codepoint_t g) const\n+\n+  bool get (hb_codepoint_t g) const\n@@ -365,1 +441,1 @@\n-    return page->has (g);\n+    return page->get (g);\n@@ -367,2 +443,16 @@\n-  bool intersects (hb_codepoint_t first,\n-                          hb_codepoint_t last) const\n+\n+  \/* Has interface. *\/\n+  static constexpr bool SENTINEL = false;\n+  typedef bool value_t;\n+  value_t operator [] (hb_codepoint_t k) const { return get (k); }\n+  bool has (hb_codepoint_t k) const { return (*this)[k] != SENTINEL; }\n+  \/* Predicate. *\/\n+  bool operator () (hb_codepoint_t k) const { return has (k); }\n+\n+  \/* Sink interface. *\/\n+  hb_set_t& operator << (hb_codepoint_t v)\n+  { add (v); return *this; }\n+  hb_set_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)\n+  { add_range (range.first, range.second); return *this; }\n+\n+  bool intersects (hb_codepoint_t first, hb_codepoint_t last) const\n@@ -425,2 +515,30 @@\n-  template <class Op>\n-  void process (const hb_set_t *other)\n+  void compact (unsigned int length)\n+  {\n+    hb_vector_t<uint32_t> old_index_to_page_map_index;\n+    old_index_to_page_map_index.resize(pages.length);\n+    for (uint32_t i = 0; i < old_index_to_page_map_index.length; i++)\n+      old_index_to_page_map_index[i] = 0xFFFFFFFF;\n+\n+    for (uint32_t i = 0; i < length; i++)\n+      old_index_to_page_map_index[page_map[i].index] =  i;\n+\n+    compact_pages (old_index_to_page_map_index);\n+  }\n+\n+  void compact_pages (const hb_vector_t<uint32_t>& old_index_to_page_map_index)\n+  {\n+    unsigned int write_index = 0;\n+    for (unsigned int i = 0; i < pages.length; i++)\n+    {\n+      if (old_index_to_page_map_index[i] == 0xFFFFFFFF) continue;\n+\n+      if (write_index < i)\n+        pages[write_index] = pages[i];\n+\n+      page_map[old_index_to_page_map_index[i]].index = write_index;\n+      write_index++;\n+    }\n+  }\n+\n+  template <typename Op>\n+  void process (const Op& op, const hb_set_t *other)\n@@ -438,0 +556,1 @@\n+    unsigned int write_index = 0;\n@@ -442,0 +561,11 @@\n+        if (!Op::passthru_left)\n+        {\n+          \/\/ Move page_map entries that we're keeping from the left side set\n+          \/\/ to the front of the page_map vector. This isn't necessary if\n+          \/\/ passthru_left is set since no left side pages will be removed\n+          \/\/ in that case.\n+          if (write_index < a)\n+            page_map[write_index] = page_map[a];\n+          write_index++;\n+        }\n+\n@@ -464,3 +594,10 @@\n-    if (count > pages.length)\n-      if (!resize (count))\n-        return;\n+    if (!Op::passthru_left)\n+    {\n+      na  = write_index;\n+      next_page = write_index;\n+      compact (write_index);\n+    }\n+\n+    if (!resize (count))\n+      return;\n+\n@@ -480,1 +617,1 @@\n-        Op::process (page_at (count).v, page_at (a).v, other->page_at (b).v);\n+        page_at (count).v = op (page_at (a).v, other->page_at (b).v);\n@@ -526,1 +663,1 @@\n-    process<HbOpOr> (other);\n+    process (hb_bitwise_or, other);\n@@ -530,1 +667,1 @@\n-    process<HbOpAnd> (other);\n+    process (hb_bitwise_and, other);\n@@ -534,1 +671,1 @@\n-    process<HbOpMinus> (other);\n+    process (hb_bitwise_sub, other);\n@@ -538,1 +675,1 @@\n-    process<HbOpXor> (other);\n+    process (hb_bitwise_xor, other);\n@@ -641,1 +778,1 @@\n-    if (population != (unsigned int) -1)\n+    if (population != UINT_MAX)\n@@ -674,1 +811,1 @@\n-  struct const_iter_t : hb_sorted_iter_t<const_iter_t, const hb_codepoint_t>\n+  struct iter_t : hb_iter_with_fallback_t<iter_t, hb_codepoint_t>\n@@ -676,2 +813,10 @@\n-    const_iter_t (const hb_set_t &s_) :\n-      s (s_), v (INVALID), l (s.get_population () + 1) { __next__ (); }\n+    static constexpr bool is_sorted_iterator = true;\n+    iter_t (const hb_set_t &s_ = Null (hb_set_t),\n+            bool init = true) : s (&s_), v (INVALID), l(0)\n+    {\n+      if (init)\n+      {\n+        l = s->get_population () + 1;\n+        __next__ ();\n+      }\n+    }\n@@ -679,1 +824,1 @@\n-    typedef hb_codepoint_t __item_type__;\n+    typedef hb_codepoint_t __item_t__;\n@@ -682,3 +827,6 @@\n-    void __next__ () { s.next (&v); if (l) l--; }\n-    void __prev__ () { s.previous (&v); }\n-    unsigned __len__ () { return l; }\n+    void __next__ () { s->next (&v); if (l) l--; }\n+    void __prev__ () { s->previous (&v); }\n+    unsigned __len__ () const { return l; }\n+    iter_t end () const { return iter_t (*s, false); }\n+    bool operator != (const iter_t& o) const\n+    { return s != o.s || v != o.v; }\n@@ -687,1 +835,1 @@\n-    const hb_set_t &s;\n+    const hb_set_t *s;\n@@ -691,4 +839,2 @@\n-  const_iter_t const_iter () const { return const_iter_t (*this); }\n-  operator const_iter_t () const { return const_iter (); }\n-  typedef const_iter_t iter_t;\n-  iter_t iter () const { return const_iter (); }\n+  iter_t iter () const { return iter_t (*this); }\n+  operator iter_t () const { return iter (); }\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-set.hh","additions":184,"deletions":38,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -83,0 +84,1 @@\n+#endif\n@@ -151,0 +153,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -152,0 +155,1 @@\n+#endif\n@@ -227,0 +231,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -229,0 +234,1 @@\n+#endif\n@@ -232,0 +238,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -233,0 +240,1 @@\n+#endif\n@@ -252,1 +260,1 @@\n-  return const_cast<hb_shape_plan_t *> (&Null(hb_shape_plan_t));\n+  return const_cast<hb_shape_plan_t *> (&Null (hb_shape_plan_t));\n@@ -284,0 +292,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -285,0 +294,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shape-plan.cc","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -43,0 +44,1 @@\n+#endif\n@@ -47,8 +49,8 @@\n-  HB_INTERNAL inline bool init (bool                           copy,\n-                                hb_face_t                     *face,\n-                                const hb_segment_properties_t *props,\n-                                const hb_feature_t            *user_features,\n-                                unsigned int                   num_user_features,\n-                                const int                     *coords,\n-                                unsigned int                   num_coords,\n-                                const char * const            *shaper_list);\n+  HB_INTERNAL bool init (bool                           copy,\n+                         hb_face_t                     *face,\n+                         const hb_segment_properties_t *props,\n+                         const hb_feature_t            *user_features,\n+                         unsigned int                   num_user_features,\n+                         const int                     *coords,\n+                         unsigned int                   num_coords,\n+                         const char * const            *shaper_list);\n@@ -56,1 +58,1 @@\n-  HB_INTERNAL inline void free () { ::free ((void *) user_features); }\n+  HB_INTERNAL void free () { ::free ((void *) user_features); }\n@@ -68,0 +70,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -69,0 +72,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shape-plan.hh","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -135,0 +135,2 @@\n+  if (unlikely (hb_object_is_immutable (buffer))) return false;\n+\n@@ -157,1 +159,3 @@\n- * features applied during shaping.\n+ * features applied during shaping. If two @features have the same tag but\n+ * overlapping ranges the value of the feature with the higher index takes\n+ * precedence.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shape.cc","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+#ifndef HB_NO_SHAPER\n+\n+\n@@ -38,0 +41,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -39,0 +43,1 @@\n+#endif\n@@ -48,4 +53,0 @@\n-\n-\/* Only picks up fonts that have a \"mort\" or \"morx\" table.\n-   Probably going to be removed https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1478 *\/\n-HB_SHAPER_IMPLEMENT (coretext_aat)\n@@ -54,1 +55,1 @@\n-#ifdef HAVE_FALLBACK\n+#ifndef HB_NO_FALLBACK_SHAPE\n@@ -57,0 +58,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shaper-list.hh","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,0 +37,3 @@\n+#ifndef HB_NO_SHAPER\n+static_assert (0 != ARRAY_LENGTH_CONST (all_shapers), \"No shaper enabled.\");\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shaper.cc","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        static_assert (true, \"\") \/* Require semicolon. *\/\n+        static_assert (true, \"\") \/* Require semicolon after. *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-shaper.hh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"hb-ot-name-language-static.hh\"\n@@ -41,2 +42,2 @@\n-hb_vector_size_impl_t const _hb_NullPool[(HB_NULL_POOL_SIZE + sizeof (hb_vector_size_impl_t) - 1) \/ sizeof (hb_vector_size_impl_t)] = {};\n-\/*thread_local*\/ hb_vector_size_impl_t _hb_CrapPool[(HB_NULL_POOL_SIZE + sizeof (hb_vector_size_impl_t) - 1) \/ sizeof (hb_vector_size_impl_t)] = {};\n+uint64_t const _hb_NullPool[(HB_NULL_POOL_SIZE + sizeof (uint64_t) - 1) \/ sizeof (uint64_t)] = {};\n+\/*thread_local*\/ uint64_t _hb_CrapPool[(HB_NULL_POOL_SIZE + sizeof (uint64_t) - 1) \/ sizeof (uint64_t)] = {};\n@@ -53,0 +54,3 @@\n+\n+\/* hb_face_t *\/\n+\n@@ -75,0 +79,33 @@\n+\n+\/* hb_user_data_array_t *\/\n+\n+bool\n+hb_user_data_array_t::set (hb_user_data_key_t *key,\n+                           void *              data,\n+                           hb_destroy_func_t   destroy,\n+                           hb_bool_t           replace)\n+{\n+  if (!key)\n+    return false;\n+\n+  if (replace) {\n+    if (!data && !destroy) {\n+      items.remove (key, lock);\n+      return true;\n+    }\n+  }\n+  hb_user_data_item_t item = {key, data, destroy};\n+  bool ret = !!items.replace_or_insert (item, lock, (bool) replace);\n+\n+  return ret;\n+}\n+\n+void *\n+hb_user_data_array_t::get (hb_user_data_key_t *key)\n+{\n+  hb_user_data_item_t item = {nullptr, nullptr, nullptr};\n+\n+  return items.find (key, &item, lock) ? item.data : nullptr;\n+}\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-static.cc","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#define HB_STRING_ARRAY_LENG_NAME       HB_PASTE(HB_STRING_ARRAY_NAME, _length)\n@@ -51,1 +52,1 @@\n-  char str[VAR];\n+  char str[HB_VAR_ARRAY];\n@@ -69,0 +70,2 @@\n+static const unsigned int HB_STRING_ARRAY_LENG_NAME = ARRAY_LENGTH_CONST (HB_STRING_ARRAY_OFFS_NAME) - 1;\n+\n@@ -80,0 +83,1 @@\n+#undef HB_STRING_ARRAY_LENG_NAME\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-string-array.hh","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_STYLE\n+#ifdef HB_EXPERIMENTAL_API\n+\n+#include \"hb-ot-var-avar-table.hh\"\n+#include \"hb-ot-var-fvar-table.hh\"\n+#include \"hb-ot-stat-table.hh\"\n+#include \"hb-ot-os2-table.hh\"\n+#include \"hb-ot-head-table.hh\"\n+#include \"hb-ot-post-table.hh\"\n+#include \"hb-ot-face.hh\"\n+\n+\/**\n+ * hb_style_tag_t:\n+ * @HB_STYLE_TAG_ITALIC: Used to vary between non-italic and italic.\n+ * A value of 0 can be interpreted as \"Roman\" (non-italic); a value of 1 can\n+ * be interpreted as (fully) italic.\n+ * @HB_STYLE_TAG_OPTICAL_SIZE: Used to vary design to suit different text sizes.\n+ * Non-zero. Values can be interpreted as text size, in points.\n+ * @HB_STYLE_TAG_SLANT: Used to vary between upright and slanted text. Values\n+ * must be greater than -90 and less than +90. Values can be interpreted as\n+ * the angle, in counter-clockwise degrees, of oblique slant from whatever the\n+ * designer considers to be upright for that font design.\n+ * @HB_STYLE_TAG_WIDTH: Used to vary width of text from narrower to wider.\n+ * Non-zero. Values can be interpreted as a percentage of whatever the font\n+ * designer considers “normal width” for that font design.\n+ * @HB_STYLE_TAG_WEIGHT: Used to vary stroke thicknesses or other design details\n+ * to give variation from lighter to blacker. Values can be interpreted in direct\n+ * comparison to values for usWeightClass in the OS\/2 table,\n+ * or the CSS font-weight property.\n+ *\n+ * Defined by https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/dvaraxisreg\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+typedef enum {\n+  HB_STYLE_TAG_ITALIC           = HB_TAG ('i','t','a','l'),\n+  HB_STYLE_TAG_OPTICAL_SIZE     = HB_TAG ('o','p','s','z'),\n+  HB_STYLE_TAG_SLANT            = HB_TAG ('s','l','n','t'),\n+  HB_STYLE_TAG_WIDTH            = HB_TAG ('w','d','t','h'),\n+  HB_STYLE_TAG_WEIGHT           = HB_TAG ('w','g','h','t'),\n+\n+  _HB_STYLE_TAG_MAX_VALUE       = HB_TAG_MAX_SIGNED \/*< skip >*\/\n+} hb_style_tag_t;\n+\n+\/**\n+ * hb_style_get_value:\n+ * @font: a #hb_font_t object.\n+ * @style_tag: a style tag.\n+ *\n+ * Searches variation axes of a hb_font_t object for a specific axis first,\n+ * if not set, then tries to get default style values from different\n+ * tables of the font.\n+ *\n+ * Returns: Corresponding axis or default value to a style tag.\n+ *\n+ * Since: EXPERIMENTAL\n+ **\/\n+float\n+hb_style_get_value (hb_font_t *font, hb_tag_t tag)\n+{\n+  hb_style_tag_t style_tag = (hb_style_tag_t) tag;\n+  hb_face_t *face = font->face;\n+\n+#ifndef HB_NO_VAR\n+  hb_ot_var_axis_info_t axis;\n+  if (hb_ot_var_find_axis_info (face, style_tag, &axis))\n+  {\n+    if (axis.axis_index < font->num_coords) return font->design_coords[axis.axis_index];\n+    \/* If a face is variable, fvar's default_value is better than STAT records *\/\n+    return axis.default_value;\n+  }\n+#endif\n+\n+  if (style_tag == HB_STYLE_TAG_OPTICAL_SIZE && font->ptem)\n+    return font->ptem;\n+\n+  \/* STAT *\/\n+  float value;\n+  if (face->table.STAT->get_value (style_tag, &value))\n+    return value;\n+\n+  switch ((unsigned) style_tag)\n+  {\n+  case HB_STYLE_TAG_ITALIC:\n+    return face->table.OS2->is_italic () || face->table.head->is_italic () ? 1 : 0;\n+  case HB_STYLE_TAG_OPTICAL_SIZE:\n+  {\n+    unsigned int lower, upper;\n+    return face->table.OS2->v5 ().get_optical_size (&lower, &upper)\n+           ? (float) (lower + upper) \/ 2.f\n+           : 12.f;\n+  }\n+  case HB_STYLE_TAG_SLANT:\n+    return face->table.post->table->italicAngle.to_float ();\n+  case HB_STYLE_TAG_WIDTH:\n+    return face->table.OS2->has_data ()\n+           ? face->table.OS2->get_width ()\n+           : (face->table.head->is_condensed () ? 75 : 100);\n+  case HB_STYLE_TAG_WEIGHT:\n+    return face->table.OS2->has_data ()\n+           ? face->table.OS2->usWeightClass\n+           : (face->table.head->is_bold () ? 700 : 400);\n+  default:\n+    return 0;\n+  }\n+}\n+\n+#endif\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-style.cc","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright © 2019  Ebrahim Byagowi\n+ *\n+ *  This is part of HarfBuzz, a text shaping library.\n+ *\n+ * Permission is hereby granted, without written agreement and without\n+ * license or royalty fees, to use, copy, modify, and distribute this\n+ * software and its documentation for any purpose, provided that the\n+ * above copyright notice and the following two paragraphs appear in\n+ * all copies of this software.\n+ *\n+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n+ * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n+ * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n+ * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n+ * DAMAGE.\n+ *\n+ * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n+ * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n+ * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n+ *\/\n+\n+#ifndef HB_H_IN\n+#error \"Include <hb.h> instead.\"\n+#endif\n+\n+#ifndef HB_STYLE_H\n+#define HB_STYLE_H\n+\n+#include \"hb.h\"\n+\n+HB_BEGIN_DECLS\n+\n+#ifdef HB_EXPERIMENTAL_API\n+HB_EXTERN float\n+hb_style_get_value (hb_font_t *font, hb_tag_t style_tag);\n+#endif\n+\n+HB_END_DECLS\n+\n+#endif \/* HB_STYLE_H *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-style.h","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_SUBSET_CFF\n+\n@@ -46,8 +50,8 @@\n-hb_plan_subset_cff_fdselect (const hb_vector_t<hb_codepoint_t> &glyphs,\n-                            unsigned int fdCount,\n-                            const FDSelect &src, \/* IN *\/\n-                            unsigned int &subset_fd_count \/* OUT *\/,\n-                            unsigned int &subset_fdselect_size \/* OUT *\/,\n-                            unsigned int &subset_fdselect_format \/* OUT *\/,\n-                            hb_vector_t<code_pair_t> &fdselect_ranges \/* OUT *\/,\n-                            remap_t &fdmap \/* OUT *\/)\n+hb_plan_subset_cff_fdselect (const hb_subset_plan_t *plan,\n+                             unsigned int fdCount,\n+                             const FDSelect &src, \/* IN *\/\n+                             unsigned int &subset_fd_count \/* OUT *\/,\n+                             unsigned int &subset_fdselect_size \/* OUT *\/,\n+                             unsigned int &subset_fdselect_format \/* OUT *\/,\n+                             hb_vector_t<code_pair_t> &fdselect_ranges \/* OUT *\/,\n+                             hb_inc_bimap_t &fdmap \/* OUT *\/)\n@@ -58,1 +62,1 @@\n-  unsigned int  num_ranges = 0;\n+  unsigned int num_ranges = 0;\n@@ -60,1 +64,1 @@\n-  unsigned int subset_num_glyphs = glyphs.length;\n+  unsigned int subset_num_glyphs = plan->num_output_glyphs ();\n@@ -66,4 +70,3 @@\n-    hb_set_t  *set = hb_set_create ();\n-    if (set == &Null (hb_set_t))\n-      return false;\n-    hb_codepoint_t  prev_fd = CFF_UNDEF_CODE;\n+    hb_set_t *set = hb_set_create ();\n+    if (unlikely (set == &Null (hb_set_t))) return false;\n+    hb_codepoint_t prev_fd = CFF_UNDEF_CODE;\n@@ -72,1 +75,8 @@\n-      hb_codepoint_t  fd = src.get_fd (glyphs[i]);\n+      hb_codepoint_t glyph;\n+      hb_codepoint_t fd;\n+      if (!plan->old_gid_for_new_gid (i, &glyph))\n+      {\n+        \/* fonttools retains FDSelect & font dicts for missing glyphs. do the same *\/\n+        glyph = i;\n+      }\n+      fd = src.get_fd (glyph);\n@@ -94,5 +104,1 @@\n-      if (!fdmap.reset (fdCount))\n-      {\n-        hb_set_destroy (set);\n-        return false;\n-      }\n+      fdmap.reset ();\n@@ -100,1 +106,1 @@\n-      hb_codepoint_t  fd = CFF_UNDEF_CODE;\n+      hb_codepoint_t fd = CFF_UNDEF_CODE;\n@@ -104,1 +110,1 @@\n-      if (unlikely (fdmap.get_count () != subset_fd_count))\n+      if (unlikely (fdmap.get_population () != subset_fd_count))\n@@ -148,4 +154,4 @@\n-                          const unsigned int num_glyphs,\n-                          const FDSelect &src,\n-                          unsigned int size,\n-                          const hb_vector_t<code_pair_t> &fdselect_ranges)\n+                        const unsigned int num_glyphs,\n+                        const FDSelect &src,\n+                        unsigned int size,\n+                        const hb_vector_t<code_pair_t> &fdselect_ranges)\n@@ -155,2 +161,2 @@\n-  if (unlikely (p == nullptr)) return_trace (false);\n-  p->nRanges ().set (fdselect_ranges.length);\n+  if (unlikely (!p)) return_trace (false);\n+  p->nRanges () = fdselect_ranges.length;\n@@ -159,2 +165,2 @@\n-    p->ranges[i].first.set (fdselect_ranges[i].glyph);\n-    p->ranges[i].fd.set (fdselect_ranges[i].code);\n+    p->ranges[i].first = fdselect_ranges[i].glyph;\n+    p->ranges[i].fd = fdselect_ranges[i].code;\n@@ -162,1 +168,1 @@\n-  p->sentinel().set (num_glyphs);\n+  p->sentinel () = num_glyphs;\n@@ -172,6 +178,6 @@\n-                          const unsigned int num_glyphs,\n-                          const FDSelect &src,\n-                          unsigned int fd_count,\n-                          unsigned int fdselect_format,\n-                          unsigned int size,\n-                          const hb_vector_t<code_pair_t> &fdselect_ranges)\n+                           const unsigned int num_glyphs,\n+                           const FDSelect &src,\n+                           unsigned int fd_count,\n+                           unsigned int fdselect_format,\n+                           unsigned int size,\n+                           const hb_vector_t<code_pair_t> &fdselect_ranges)\n@@ -180,3 +186,3 @@\n-  FDSelect  *p = c->allocate_min<FDSelect> ();\n-  if (unlikely (p == nullptr)) return_trace (false);\n-  p->format.set (fdselect_format);\n+  FDSelect *p = c->allocate_min<FDSelect> ();\n+  if (unlikely (!p)) return_trace (false);\n+  p->format = fdselect_format;\n@@ -188,1 +194,7 @@\n-    case 0:\n+  case 0:\n+  {\n+    FDSelect0 *p = c->allocate_size<FDSelect0> (size);\n+    if (unlikely (!p)) return_trace (false);\n+    unsigned int range_index = 0;\n+    unsigned int fd = fdselect_ranges[range_index++].code;\n+    for (unsigned int i = 0; i < num_glyphs; i++)\n@@ -190,5 +202,2 @@\n-      FDSelect0 *p = c->allocate_size<FDSelect0> (size);\n-      if (unlikely (p == nullptr)) return_trace (false);\n-      unsigned int range_index = 0;\n-      unsigned int  fd = fdselect_ranges[range_index++].code;\n-      for (unsigned int i = 0; i < num_glyphs; i++)\n+      if ((range_index < fdselect_ranges.len) &&\n+          (i >= fdselect_ranges[range_index].glyph))\n@@ -196,6 +205,1 @@\n-        if ((range_index < fdselect_ranges.len) &&\n-            (i >= fdselect_ranges[range_index].glyph))\n-        {\n-          fd = fdselect_ranges[range_index++].code;\n-        }\n-        p->fds[i].set (fd);\n+        fd = fdselect_ranges[range_index++].code;\n@@ -203,1 +207,1 @@\n-      break;\n+      p->fds[i] = fd;\n@@ -205,0 +209,2 @@\n+    return_trace (true);\n+  }\n@@ -207,17 +213,3 @@\n-    case 3:\n-      return serialize_fdselect_3_4<FDSelect3> (c,\n-                                                num_glyphs,\n-                                                src,\n-                                                size,\n-                                                fdselect_ranges);\n-\n-    case 4:\n-      return serialize_fdselect_3_4<FDSelect4> (c,\n-                                                num_glyphs,\n-                                                src,\n-                                                size,\n-                                                fdselect_ranges);\n-\n-    default:\n-      assert(false);\n-  }\n+  case 3:\n+    return serialize_fdselect_3_4<FDSelect3> (c, num_glyphs, src,\n+                                              size, fdselect_ranges);\n@@ -225,1 +217,7 @@\n-  return_trace (true);\n+  case 4:\n+    return serialize_fdselect_3_4<FDSelect4> (c, num_glyphs, src,\n+                                              size, fdselect_ranges);\n+\n+  default:\n+    return_trace (false);\n+  }\n@@ -227,0 +225,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff-common.cc","additions":72,"deletions":71,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    if (unlikely (buff.push (b) == &Crap(unsigned char)))\n+    if (unlikely (buff.push (b) == &Crap (unsigned char)))\n@@ -113,1 +113,5 @@\n-    buff.resize (offset + str.length);\n+    if (unlikely (!buff.resize (offset + str.length)))\n+    {\n+      set_error ();\n+      return;\n+    }\n@@ -131,2 +135,4 @@\n-struct cff_sub_table_offsets_t {\n-  cff_sub_table_offsets_t () : privateDictsOffset (0)\n+struct cff_sub_table_info_t {\n+  cff_sub_table_info_t ()\n+    : fd_array_link (0),\n+      char_strings_link (0)\n@@ -134,6 +140,1 @@\n-    topDictInfo.init ();\n-    FDSelectInfo.init ();\n-    FDArrayInfo.init ();\n-    charStringsInfo.init ();\n-    globalSubrsInfo.init ();\n-    localSubrsInfos.init ();\n+    fd_select.init ();\n@@ -142,9 +143,3 @@\n-  ~cff_sub_table_offsets_t () { localSubrsInfos.fini (); }\n-\n-  table_info_t     topDictInfo;\n-  table_info_t     FDSelectInfo;\n-  table_info_t     FDArrayInfo;\n-  table_info_t     charStringsInfo;\n-  unsigned int  privateDictsOffset;\n-  table_info_t     globalSubrsInfo;\n-  hb_vector_t<table_info_t>  localSubrsInfos;\n+  table_info_t     fd_select;\n+  objidx_t         fd_array_link;\n+  objidx_t         char_strings_link;\n@@ -158,1 +153,1 @@\n-                  const cff_sub_table_offsets_t &offsets) const\n+                  const cff_sub_table_info_t &info) const\n@@ -165,1 +160,1 @@\n-        return_trace (FontDict::serialize_offset4_op(c, opstr.op, offsets.charStringsInfo.offset));\n+        return_trace (FontDict::serialize_link4_op(c, opstr.op, info.char_strings_link, whence_t::Absolute));\n@@ -168,1 +163,1 @@\n-        return_trace (FontDict::serialize_offset4_op(c, opstr.op, offsets.FDArrayInfo.offset));\n+        return_trace (FontDict::serialize_link4_op(c, opstr.op, info.fd_array_link, whence_t::Absolute));\n@@ -171,1 +166,1 @@\n-        return_trace (FontDict::serialize_offset4_op(c, opstr.op, offsets.FDSelectInfo.offset));\n+        return_trace (FontDict::serialize_link4_op(c, opstr.op, info.fd_select.link, whence_t::Absolute));\n@@ -178,14 +173,0 @@\n-\n-  unsigned int calculate_serialized_size (const OPSTR &opstr) const\n-  {\n-    switch (opstr.op)\n-    {\n-      case OpCode_CharStrings:\n-      case OpCode_FDArray:\n-      case OpCode_FDSelect:\n-        return OpCode_Size (OpCode_longintdict) + 4 + OpCode_Size (opstr.op);\n-\n-      default:\n-        return opstr.str.length;\n-    }\n-  }\n@@ -205,10 +186,2 @@\n-      if (unlikely (!UnsizedByteStr::serialize_int2 (c, privateDictInfo.size) ||\n-                    !UnsizedByteStr::serialize_int4 (c, privateDictInfo.offset)))\n-        return_trace (false);\n-\n-      \/* serialize the opcode *\/\n-      HBUINT8 *p = c->allocate_size<HBUINT8> (1);\n-      if (unlikely (p == nullptr)) return_trace (false);\n-      p->set (OpCode_Private);\n-\n-      return_trace (true);\n+      return_trace (UnsizedByteStr::serialize_int2 (c, privateDictInfo.size) &&\n+                    Dict::serialize_link4_op (c, opstr.op, privateDictInfo.link, whence_t::Absolute));\n@@ -219,1 +192,1 @@\n-      if (unlikely (d == nullptr)) return_trace (false);\n+      if (unlikely (!d)) return_trace (false);\n@@ -224,8 +197,0 @@\n-\n-  unsigned int calculate_serialized_size (const op_str_t &opstr) const\n-  {\n-    if (opstr.op == OpCode_Private)\n-      return OpCode_Size (OpCode_longintdict) + 4 + OpCode_Size (OpCode_shortint) + 2 + OpCode_Size (OpCode_Private);\n-    else\n-      return opstr.str.length;\n-  }\n@@ -241,1 +206,1 @@\n-                  const unsigned int subrsOffset) const\n+                  objidx_t subrs_link) const\n@@ -249,1 +214,1 @@\n-      if (desubroutinize || (subrsOffset == 0))\n+      if (desubroutinize || !subrs_link)\n@@ -252,1 +217,1 @@\n-        return_trace (FontDict::serialize_offset2_op (c, opstr.op, subrsOffset));\n+        return_trace (FontDict::serialize_link2_op (c, opstr.op, subrs_link));\n@@ -258,16 +223,0 @@\n-  unsigned int calculate_serialized_size (const op_str_t &opstr,\n-                                          bool has_localsubr=true) const\n-  {\n-    if (drop_hints && dict_opset_t::is_hint_op (opstr.op))\n-      return 0;\n-    if (opstr.op == OpCode_Subrs)\n-    {\n-      if (desubroutinize || !has_localsubr)\n-        return 0;\n-      else\n-        return OpCode_Size (OpCode_shortint) + 2 + OpCode_Size (opstr.op);\n-    }\n-    else\n-      return opstr.str.length;\n-  }\n-\n@@ -285,1 +234,1 @@\n-template <typename ACC, typename ENV, typename OPSET>\n+template <typename ACC, typename ENV, typename OPSET, op_code_t endchar_op=OpCode_Invalid>\n@@ -289,3 +238,2 @@\n-                    const hb_vector_t<hb_codepoint_t> &glyphs_,\n-                    bool drop_hints_) : acc (acc_), glyphs (glyphs_),\n-                                        drop_hints (drop_hints_) {}\n+                    const hb_subset_plan_t *plan_)\n+                   : acc (acc_), plan (plan_) {}\n@@ -295,1 +243,1 @@\n-    if (!flat_charstrings.resize (glyphs.length))\n+    if (!flat_charstrings.resize (plan->num_output_glyphs ()))\n@@ -297,1 +245,1 @@\n-    for (unsigned int i = 0; i < glyphs.length; i++)\n+    for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n@@ -299,1 +247,1 @@\n-    for (unsigned int i = 0; i < glyphs.length; i++)\n+    for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n@@ -301,1 +249,7 @@\n-      hb_codepoint_t  glyph = glyphs[i];\n+      hb_codepoint_t  glyph;\n+      if (!plan->old_gid_for_new_gid (i, &glyph))\n+      {\n+        \/* add an endchar only charstring for a missing glyph if CFF1 *\/\n+        if (endchar_op != OpCode_Invalid) flat_charstrings[i].push (endchar_op);\n+        continue;\n+      }\n@@ -308,1 +262,1 @@\n-      flatten_param_t  param = { flat_charstrings[i], drop_hints };\n+      flatten_param_t  param = { flat_charstrings[i], plan->drop_hints };\n@@ -316,2 +270,1 @@\n-  const hb_vector_t<hb_codepoint_t> &glyphs;\n-  bool  drop_hints;\n+  const hb_subset_plan_t *plan;\n@@ -466,1 +419,2 @@\n-    resize (len_);\n+    if (unlikely (!resize (len_)))\n+      return;\n@@ -515,2 +469,2 @@\n-    parsed_cs_str_t  *parsed_str = get_parsed_str_for_context (env.context);\n-    if (likely (parsed_str != nullptr))\n+    parsed_cs_str_t *parsed_str = get_parsed_str_for_context (env.context);\n+    if (unlikely (!parsed_str))\n@@ -518,7 +472,2 @@\n-      \/* If the called subroutine is parsed partially but not completely yet,\n-       * it must be because we are calling it recursively.\n-       * Handle it as an error. *\/\n-      if (unlikely (calling && !parsed_str->is_parsed () && (parsed_str->values.length > 0)))\n-        env.set_error ();\n-      else\n-        current_parsed_str = parsed_str;\n+      env.set_error ();\n+      return;\n@@ -526,1 +475,4 @@\n-    else\n+    \/* If the called subroutine is parsed partially but not completely yet,\n+     * it must be because we are calling it recursively.\n+     * Handle it as an error. *\/\n+    if (unlikely (calling && !parsed_str->is_parsed () && (parsed_str->values.length > 0)))\n@@ -528,0 +480,2 @@\n+    else\n+      current_parsed_str = parsed_str;\n@@ -540,1 +494,1 @@\n-struct subr_remap_t : remap_t\n+struct subr_remap_t : hb_inc_bimap_t\n@@ -547,6 +501,0 @@\n-    reset (closure->get_max () + 1);\n-    for (hb_codepoint_t old_num = 0; old_num < length; old_num++)\n-    {\n-      if (hb_set_has (closure, old_num))\n-        add (old_num);\n-    }\n@@ -554,1 +502,5 @@\n-    if (get_count () < 1240)\n+    hb_codepoint_t old_num = HB_SET_VALUE_INVALID;\n+    while (hb_set_next (closure, &old_num))\n+      add (old_num);\n+\n+    if (get_population () < 1240)\n@@ -556,1 +508,1 @@\n-    else if (get_count () < 33900)\n+    else if (get_population () < 33900)\n@@ -562,8 +514,0 @@\n-  hb_codepoint_t operator[] (unsigned int old_num) const\n-  {\n-    if (old_num >= length)\n-      return CFF_UNDEF_CODE;\n-    else\n-      return remap_t::operator[] (old_num);\n-  }\n-\n@@ -572,1 +516,1 @@\n-    hb_codepoint_t new_num = (*this)[old_num];\n+    hb_codepoint_t new_num = get (old_num);\n@@ -580,1 +524,1 @@\n-struct subr_remap_ts\n+struct subr_remaps_t\n@@ -582,1 +526,1 @@\n-  subr_remap_ts ()\n+  subr_remaps_t ()\n@@ -588,1 +532,1 @@\n-  ~subr_remap_ts () { fini (); }\n+  ~subr_remaps_t () { fini (); }\n@@ -592,1 +536,1 @@\n-    local_remaps.resize (fdCount);\n+    if (unlikely (!local_remaps.resize (fdCount))) return;\n@@ -597,0 +541,5 @@\n+  bool in_error()\n+  {\n+    return local_remaps.in_error ();\n+  }\n+\n@@ -614,1 +563,1 @@\n-template <typename SUBSETTER, typename SUBRS, typename ACC, typename ENV, typename OPSET>\n+template <typename SUBSETTER, typename SUBRS, typename ACC, typename ENV, typename OPSET, op_code_t endchar_op=OpCode_Invalid>\n@@ -617,1 +566,2 @@\n-  subr_subsetter_t ()\n+  subr_subsetter_t (ACC &acc_, const hb_subset_plan_t *plan_)\n+    : acc (acc_), plan (plan_)\n@@ -647,1 +597,1 @@\n-  bool subset (ACC &acc, const hb_vector_t<hb_codepoint_t> &glyphs, bool drop_hints)\n+  bool subset (void)\n@@ -652,1 +602,1 @@\n-    parsed_charstrings.init (glyphs.length);\n+    parsed_charstrings.init (plan->num_output_glyphs ());\n@@ -654,1 +604,9 @@\n-    parsed_local_subrs.resize (acc.fdCount);\n+\n+    if (unlikely (remaps.in_error()\n+                  || parsed_charstrings.in_error ()\n+                  || parsed_global_subrs.in_error ())) {\n+      return false;\n+    }\n+\n+    if (unlikely (!parsed_local_subrs.resize (acc.fdCount))) return false;\n+\n@@ -658,0 +616,1 @@\n+      if (unlikely (parsed_local_subrs[i].in_error ())) return false;\n@@ -663,1 +622,1 @@\n-    for (unsigned int i = 0; i < glyphs.length; i++)\n+    for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n@@ -665,1 +624,3 @@\n-      hb_codepoint_t  glyph = glyphs[i];\n+      hb_codepoint_t  glyph;\n+      if (!plan->old_gid_for_new_gid (i, &glyph))\n+        continue;\n@@ -678,1 +639,1 @@\n-                  drop_hints);\n+                  plan->drop_hints);\n@@ -683,2 +644,2 @@\n-      \/* finalize parsed string esp. copy CFF1 width or CFF2 vsindex to the parsed charstring for encoding *\/\n-      SUBSETTER::finalize_parsed_str (interp.env, param, parsed_charstrings[i]);\n+      \/* complete parsed string esp. copy CFF1 width or CFF2 vsindex to the parsed charstring for encoding *\/\n+      SUBSETTER::complete_parsed_str (interp.env, param, parsed_charstrings[i]);\n@@ -687,1 +648,1 @@\n-    if (drop_hints)\n+    if (plan->drop_hints)\n@@ -690,1 +651,1 @@\n-      for (unsigned int i = 0; i < glyphs.length; i++)\n+      for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n@@ -692,1 +653,4 @@\n-        unsigned int fd = acc.fdSelect->get_fd (glyphs[i]);\n+        hb_codepoint_t  glyph;\n+        if (!plan->old_gid_for_new_gid (i, &glyph))\n+          continue;\n+        unsigned int fd = acc.fdSelect->get_fd (glyph);\n@@ -699,1 +663,1 @@\n-                    drop_hints);\n+                    plan->drop_hints);\n@@ -712,1 +676,1 @@\n-      for (unsigned int i = 0; i < glyphs.length; i++)\n+      for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n@@ -714,1 +678,4 @@\n-        unsigned int fd = acc.fdSelect->get_fd (glyphs[i]);\n+        hb_codepoint_t  glyph;\n+        if (!plan->old_gid_for_new_gid (i, &glyph))\n+          continue;\n+        unsigned int fd = acc.fdSelect->get_fd (glyph);\n@@ -721,1 +688,1 @@\n-                    drop_hints);\n+                    plan->drop_hints);\n@@ -731,1 +698,1 @@\n-  bool encode_charstrings (ACC &acc, const hb_vector_t<hb_codepoint_t> &glyphs, str_buff_vec_t &buffArray) const\n+  bool encode_charstrings (str_buff_vec_t &buffArray) const\n@@ -733,1 +700,1 @@\n-    if (unlikely (!buffArray.resize (glyphs.length)))\n+    if (unlikely (!buffArray.resize (plan->num_output_glyphs ())))\n@@ -735,1 +702,1 @@\n-    for (unsigned int i = 0; i < glyphs.length; i++)\n+    for (unsigned int i = 0; i < plan->num_output_glyphs (); i++)\n@@ -737,1 +704,8 @@\n-      unsigned int  fd = acc.fdSelect->get_fd (glyphs[i]);\n+      hb_codepoint_t  glyph;\n+      if (!plan->old_gid_for_new_gid (i, &glyph))\n+      {\n+        \/* add an endchar only charstring for a missing glyph if CFF1 *\/\n+        if (endchar_op != OpCode_Invalid) buffArray[i].push (endchar_op);\n+        continue;\n+      }\n+      unsigned int  fd = acc.fdSelect->get_fd (glyph);\n@@ -748,1 +722,1 @@\n-    unsigned int  count = remap.get_count ();\n+    unsigned int  count = remap.get_population ();\n@@ -780,0 +754,1 @@\n+        all_dropped (false),\n@@ -784,0 +759,1 @@\n+    bool  all_dropped;\n@@ -794,1 +770,1 @@\n-    \/* if this subr ends with a stem hint (i.e., not a number a potential argument for moveto),\n+    \/* if this subr ends with a stem hint (i.e., not a number; potential argument for moveto),\n@@ -804,0 +780,4 @@\n+    else if (drop.all_dropped)\n+    {\n+      str.values[pos].set_drop ();\n+    }\n@@ -822,1 +802,0 @@\n-\n@@ -879,0 +858,17 @@\n+    \/* Raise all_dropped flag if all operators except return are dropped from a subr.\n+     * It may happen even after seeing the first moveto if a subr contains\n+     * only (usually one) hintmask operator, then calls to this subr can be dropped.\n+     *\/\n+    drop.all_dropped = true;\n+    for (unsigned int pos = 0; pos < str.values.length; pos++)\n+    {\n+      parsed_cs_op_t  &csop = str.values[pos];\n+      if (csop.op == OpCode_return)\n+        break;\n+      if (!csop.for_drop ())\n+      {\n+        drop.all_dropped = false;\n+        break;\n+      }\n+    }\n+\n@@ -887,1 +883,1 @@\n-    hb_set_add (closure, subr_num);\n+    closure->add (subr_num);\n@@ -957,1 +953,4 @@\n-  subr_closures_t             closures;\n+  const ACC                     &acc;\n+  const hb_subset_plan_t        *plan;\n+\n+  subr_closures_t               closures;\n@@ -959,2 +958,2 @@\n-  parsed_cs_str_vec_t          parsed_charstrings;\n-  parsed_cs_str_vec_t          parsed_global_subrs;\n+  parsed_cs_str_vec_t           parsed_charstrings;\n+  parsed_cs_str_vec_t           parsed_global_subrs;\n@@ -963,1 +962,1 @@\n-  subr_remap_ts         remaps;\n+  subr_remaps_t                 remaps;\n@@ -972,1 +971,1 @@\n-hb_plan_subset_cff_fdselect (const hb_vector_t<hb_codepoint_t> &glyphs,\n+hb_plan_subset_cff_fdselect (const hb_subset_plan_t *plan,\n@@ -979,1 +978,1 @@\n-                            CFF::remap_t &fdmap \/* OUT *\/);\n+                            hb_inc_bimap_t &fdmap \/* OUT *\/);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff-common.hh","additions":149,"deletions":150,"binary":false,"changes":299,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_SUBSET_CFF\n+\n@@ -30,0 +34,1 @@\n+#include \"hb-bimap.hh\"\n@@ -37,1 +42,1 @@\n-struct remap_sid_t : remap_t\n+struct remap_sid_t : hb_inc_bimap_t\n@@ -42,1 +47,1 @@\n-      return offset_sid (remap_t::add (unoffset_sid (sid)));\n+      return offset_sid (hb_inc_bimap_t::add (unoffset_sid (sid)));\n@@ -52,1 +57,1 @@\n-      return offset_sid (remap_t::operator [] (unoffset_sid (sid)));\n+      return offset_sid (get (unoffset_sid (sid)));\n@@ -62,1 +67,1 @@\n-struct cff1_sub_table_offsets_t : cff_sub_table_offsets_t\n+struct cff1_sub_table_info_t : cff_sub_table_info_t\n@@ -64,7 +69,5 @@\n-  cff1_sub_table_offsets_t ()\n-    : cff_sub_table_offsets_t (),\n-      nameIndexOffset (0),\n-      encodingOffset (0)\n-  {\n-    stringIndexInfo.init ();\n-    charsetInfo.init ();\n+  cff1_sub_table_info_t ()\n+    : cff_sub_table_info_t (),\n+      encoding_link (0),\n+      charset_link (0)\n+   {\n@@ -74,4 +77,2 @@\n-  unsigned int  nameIndexOffset;\n-  table_info_t  stringIndexInfo;\n-  unsigned int  encodingOffset;\n-  table_info_t  charsetInfo;\n+  objidx_t      encoding_link;\n+  objidx_t      charset_link;\n@@ -84,1 +85,1 @@\n-  void init (const cff1_top_dict_values_t *base_= &Null(cff1_top_dict_values_t))\n+  void init (const cff1_top_dict_values_t *base_= &Null (cff1_top_dict_values_t))\n@@ -115,3 +116,3 @@\n-  top_dict_modifiers_t (const cff1_sub_table_offsets_t &offsets_,\n-                           const unsigned int (&nameSIDs_)[name_dict_values_t::ValCount])\n-    : offsets (offsets_),\n+  top_dict_modifiers_t (const cff1_sub_table_info_t &info_,\n+                        const unsigned int (&nameSIDs_)[name_dict_values_t::ValCount])\n+    : info (info_),\n@@ -121,1 +122,1 @@\n-  const cff1_sub_table_offsets_t &offsets;\n+  const cff1_sub_table_info_t &info;\n@@ -137,1 +138,4 @@\n-        return_trace (FontDict::serialize_offset4_op(c, op, mod.offsets.charsetInfo.offset));\n+        if (mod.info.charset_link)\n+          return_trace (FontDict::serialize_link4_op(c, op, mod.info.charset_link, whence_t::Absolute));\n+        else\n+          goto fall_back;\n@@ -140,1 +144,4 @@\n-        return_trace (FontDict::serialize_offset4_op(c, op, mod.offsets.encodingOffset));\n+        if (mod.info.encoding_link)\n+          return_trace (FontDict::serialize_link4_op(c, op, mod.info.encoding_link, whence_t::Absolute));\n+        else\n+          goto fall_back;\n@@ -143,10 +150,2 @@\n-        {\n-          if (unlikely (!UnsizedByteStr::serialize_int2 (c, mod.offsets.privateDictInfo.size)))\n-            return_trace (false);\n-          if (unlikely (!UnsizedByteStr::serialize_int4 (c, mod.offsets.privateDictInfo.offset)))\n-            return_trace (false);\n-          HBUINT8 *p = c->allocate_size<HBUINT8> (1);\n-          if (unlikely (p == nullptr)) return_trace (false);\n-          p->set (OpCode_Private);\n-        }\n-        break;\n+        return_trace (UnsizedByteStr::serialize_int2 (c, mod.info.privateDictInfo.size) &&\n+                      Dict::serialize_link4_op (c, op, mod.info.privateDictInfo.link, whence_t::Absolute));\n@@ -163,1 +162,1 @@\n-        return_trace (FontDict::serialize_offset2_op(c, op, mod.nameSIDs[name_dict_values_t::name_op_to_index (op)]));\n+        return_trace (FontDict::serialize_int2_op (c, op, mod.nameSIDs[name_dict_values_t::name_op_to_index (op)]));\n@@ -178,0 +177,1 @@\n+      fall_back:\n@@ -179,1 +179,1 @@\n-        return_trace (cff_top_dict_op_serializer_t<cff1_top_dict_val_t>::serialize (c, opstr, mod.offsets));\n+        return_trace (cff_top_dict_op_serializer_t<cff1_top_dict_val_t>::serialize (c, opstr, mod.info));\n@@ -184,50 +184,0 @@\n-  unsigned int calculate_serialized_size (const cff1_top_dict_val_t &opstr) const\n-  {\n-    op_code_t op = opstr.op;\n-    switch (op)\n-    {\n-      case OpCode_charset:\n-      case OpCode_Encoding:\n-        return OpCode_Size (OpCode_longintdict) + 4 + OpCode_Size (op);\n-\n-      case OpCode_Private:\n-        return OpCode_Size (OpCode_longintdict) + 4 + OpCode_Size (OpCode_shortint) + 2 + OpCode_Size (OpCode_Private);\n-\n-      case OpCode_version:\n-      case OpCode_Notice:\n-      case OpCode_Copyright:\n-      case OpCode_FullName:\n-      case OpCode_FamilyName:\n-      case OpCode_Weight:\n-      case OpCode_PostScript:\n-      case OpCode_BaseFontName:\n-      case OpCode_FontName:\n-        return OpCode_Size (OpCode_shortint) + 2 + OpCode_Size (op);\n-\n-      case OpCode_ROS:\n-        return ((OpCode_Size (OpCode_shortint) + 2) * 2) + (opstr.str.length - opstr.last_arg_offset)\/* supplement + op *\/;\n-\n-      default:\n-        return cff_top_dict_op_serializer_t<cff1_top_dict_val_t>::calculate_serialized_size (opstr);\n-    }\n-  }\n-};\n-\n-struct font_dict_values_mod_t\n-{\n-  void init (const cff1_font_dict_values_t *base_,\n-             unsigned int fontName_,\n-             const table_info_t &privateDictInfo_)\n-  {\n-    base = base_;\n-    fontName = fontName_;\n-    privateDictInfo = privateDictInfo_;\n-  }\n-\n-  unsigned get_count () const { return base->get_count (); }\n-\n-  const op_str_t &operator [] (unsigned int i) const { return (*base)[i]; }\n-\n-  const cff1_font_dict_values_t    *base;\n-  table_info_t             privateDictInfo;\n-  unsigned int          fontName;\n@@ -240,1 +190,1 @@\n-                  const font_dict_values_mod_t &mod) const\n+                  const cff1_font_dict_values_mod_t &mod) const\n@@ -245,1 +195,1 @@\n-      return_trace (FontDict::serialize_uint2_op (c, opstr.op, mod.fontName));\n+      return_trace (FontDict::serialize_int2_op (c, opstr.op, mod.fontName));\n@@ -250,8 +200,0 @@\n-  unsigned int calculate_serialized_size (const op_str_t &opstr) const\n-  {\n-    if (opstr.op == OpCode_FontName)\n-      return OpCode_Size (OpCode_shortint) + 2 + OpCode_Size (OpCode_FontName);\n-    else\n-      return SUPER::calculate_serialized_size (opstr);\n-  }\n-\n@@ -329,1 +271,1 @@\n-  bool finalize (unsigned int last_glyph)\n+  bool complete (unsigned int last_glyph)\n@@ -354,1 +296,1 @@\n-        env.returnFromSubr ();\n+        env.return_from_subr ();\n@@ -385,1 +327,1 @@\n-    env.callSubr (subrs, type);\n+    env.call_subr (subrs, type);\n@@ -387,1 +329,1 @@\n-    hb_set_add (closure, env.context.subr_num);\n+    closure->add (env.context.subr_num);\n@@ -395,1 +337,1 @@\n-struct cff1_subr_subsetter_t : subr_subsetter_t<cff1_subr_subsetter_t, CFF1Subrs, const OT::cff1::accelerator_subset_t, cff1_cs_interp_env_t, cff1_cs_opset_subr_subset_t>\n+struct cff1_subr_subsetter_t : subr_subsetter_t<cff1_subr_subsetter_t, CFF1Subrs, const OT::cff1::accelerator_subset_t, cff1_cs_interp_env_t, cff1_cs_opset_subr_subset_t, OpCode_endchar>\n@@ -397,1 +339,4 @@\n-  static void finalize_parsed_str (cff1_cs_interp_env_t &env, subr_subset_param_t& param, parsed_cs_str_t &charstring)\n+  cff1_subr_subsetter_t (const OT::cff1::accelerator_subset_t &acc_, const hb_subset_plan_t *plan_)\n+    : subr_subsetter_t (acc_, plan_) {}\n+\n+  static void complete_parsed_str (cff1_cs_interp_env_t &env, subr_subset_param_t& param, parsed_cs_str_t &charstring)\n@@ -409,2 +354,2 @@\n-      parsed_cs_str_t  *parsed_str = param.get_parsed_str_for_context (env.callStack[i]);\n-      if (likely (parsed_str != nullptr))\n+      parsed_cs_str_t *parsed_str = param.get_parsed_str_for_context (env.callStack[i]);\n+      if (likely (parsed_str))\n@@ -420,2 +365,1 @@\n-    : final_size (0),\n-      offsets (),\n+    : info (),\n@@ -428,2 +372,0 @@\n-    topdict_sizes.init ();\n-    topdict_sizes.resize (1);\n@@ -447,1 +389,0 @@\n-    topdict_sizes.fini ();\n@@ -461,1 +402,1 @@\n-  unsigned int plan_subset_encoding (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)\n+  void plan_subset_encoding (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)\n@@ -468,1 +409,6 @@\n-    subset_enc_code_ranges.resize (0);\n+    if (unlikely (!subset_enc_code_ranges.resize (0)))\n+    {\n+      plan->check_success (false);\n+      return;\n+    }\n+\n@@ -472,1 +418,1 @@\n-    subset_enc_num_codes = plan->glyphs.length - 1;\n+    subset_enc_num_codes = plan->num_output_glyphs () - 1;\n@@ -474,1 +420,1 @@\n-    for (glyph = 1; glyph < plan->glyphs.length; glyph++)\n+    for (glyph = 1; glyph < plan->num_output_glyphs (); glyph++)\n@@ -476,2 +422,7 @@\n-      hb_codepoint_t  orig_glyph = plan->glyphs[glyph];\n-      code = acc.glyph_to_code (orig_glyph);\n+      hb_codepoint_t  old_glyph;\n+      if (!plan->old_gid_for_new_gid (glyph, &old_glyph))\n+      {\n+        \/* Retain the code for the old missing glyph ID *\/\n+        old_glyph = glyph;\n+      }\n+      code = acc.glyph_to_code (old_glyph);\n@@ -484,1 +435,1 @@\n-      if (code != last_code + 1)\n+      if ((last_code == CFF_UNDEF_CODE) || (code != last_code + 1))\n@@ -491,1 +442,1 @@\n-      if (encoding != &Null(Encoding))\n+      if (encoding != &Null (Encoding))\n@@ -493,1 +444,1 @@\n-        hb_codepoint_t  sid = acc.glyph_to_sid (orig_glyph);\n+        hb_codepoint_t  sid = acc.glyph_to_sid (old_glyph);\n@@ -505,1 +456,1 @@\n-    subset_enc_code_ranges.finalize (glyph);\n+    subset_enc_code_ranges.complete (glyph);\n@@ -515,5 +466,0 @@\n-\n-    return Encoding::calculate_serialized_size (\n-                        subset_enc_format,\n-                        subset_enc_format? subset_enc_code_ranges.length: subset_enc_num_codes,\n-                        subset_enc_supp_codes.length);\n@@ -522,1 +468,1 @@\n-  unsigned int plan_subset_charset (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)\n+  void plan_subset_charset (const OT::cff1::accelerator_subset_t &acc, hb_subset_plan_t *plan)\n@@ -527,1 +473,6 @@\n-    subset_charset_ranges.resize (0);\n+    if (unlikely (!subset_charset_ranges.resize (0)))\n+    {\n+      plan->check_success (false);\n+      return;\n+    }\n+\n@@ -529,1 +480,1 @@\n-    for (glyph = 1; glyph < plan->glyphs.length; glyph++)\n+    for (glyph = 1; glyph < plan->num_output_glyphs (); glyph++)\n@@ -531,2 +482,7 @@\n-      hb_codepoint_t  orig_glyph = plan->glyphs[glyph];\n-      sid = acc.glyph_to_sid (orig_glyph);\n+      hb_codepoint_t  old_glyph;\n+      if (!plan->old_gid_for_new_gid (glyph, &old_glyph))\n+      {\n+        \/* Retain the SID for the old missing glyph ID *\/\n+        old_glyph = glyph;\n+      }\n+      sid = acc.glyph_to_sid (old_glyph);\n@@ -537,1 +493,1 @@\n-      if (sid != last_sid + 1)\n+      if ((last_sid == CFF_UNDEF_CODE) || (sid != last_sid + 1))\n@@ -545,1 +501,1 @@\n-    bool two_byte = subset_charset_ranges.finalize (glyph);\n+    bool two_byte = subset_charset_ranges.complete (glyph);\n@@ -547,1 +503,1 @@\n-    size0 = Charset0::min_size + HBUINT16::static_size * (plan->glyphs.length - 1);\n+    size0 = Charset0::min_size + HBUINT16::static_size * (plan->num_output_glyphs () - 1);\n@@ -559,4 +515,0 @@\n-\n-    return Charset::calculate_serialized_size (\n-                        subset_charset_format,\n-                        subset_charset_format? subset_charset_ranges.length: plan->glyphs.length);\n@@ -567,2 +519,1 @@\n-    if (unlikely (!sidmap.reset (acc.stringIndex->count)))\n-      return false;\n+    sidmap.reset ();\n@@ -580,1 +531,1 @@\n-    if (acc.fdArray != &Null(CFF1FDArray))\n+    if (acc.fdArray != &Null (CFF1FDArray))\n@@ -582,1 +533,1 @@\n-        if (fdmap.includes (i))\n+        if (fdmap.has (i))\n@@ -589,1 +540,1 @@\n-                      hb_subset_plan_t *plan)\n+               hb_subset_plan_t *plan)\n@@ -591,2 +542,3 @@\n-     \/* make sure notdef is first *\/\n-    if ((plan->glyphs.length == 0) || (plan->glyphs[0] != 0)) return false;\n+    \/* make sure notdef is first *\/\n+    hb_codepoint_t old_glyph;\n+    if (!plan->old_gid_for_new_gid (0, &old_glyph) || (old_glyph != 0)) return false;\n@@ -594,2 +546,1 @@\n-    final_size = 0;\n-    num_glyphs = plan->glyphs.length;\n+    num_glyphs = plan->num_output_glyphs ();\n@@ -602,1 +553,1 @@\n-    for (unsigned int glyph = 0; glyph < plan->glyphs.length; glyph++)\n+    for (hb_codepoint_t new_glyph = 0; new_glyph < plan->num_output_glyphs (); new_glyph++)\n@@ -604,1 +555,3 @@\n-      if (plan->glyphs[glyph] != glyph) {\n+      if (!plan->old_gid_for_new_gid(new_glyph, &old_glyph))\n+        continue;\n+      if (new_glyph != old_glyph) {\n@@ -613,7 +566,0 @@\n-    \/* CFF header *\/\n-    final_size += OT::cff1::static_size;\n-\n-    \/* Name INDEX *\/\n-    offsets.nameIndexOffset = final_size;\n-    final_size += acc.nameIndex->get_size ();\n-\n@@ -633,9 +579,0 @@\n-      offsets.topDictInfo.offset = final_size;\n-      cff1_top_dict_op_serializer_t topSzr;\n-      unsigned int topDictSize = TopDict::calculate_serialized_size (topdict_mod, topSzr);\n-      offsets.topDictInfo.offSize = calcOffSize(topDictSize);\n-      if (unlikely (offsets.topDictInfo.offSize > 4))\n-        return false;\n-      final_size += CFF1IndexOf<TopDict>::calculate_serialized_size<cff1_top_dict_values_mod_t>\n-                                                (offsets.topDictInfo.offSize,\n-                                                 &topdict_mod, 1, topdict_sizes, topSzr);\n@@ -645,1 +582,1 @@\n-    if (acc.fdSelect != &Null(CFF1FDSelect))\n+    if (acc.fdSelect != &Null (CFF1FDSelect))\n@@ -647,1 +584,1 @@\n-        if (unlikely (!hb_plan_subset_cff_fdselect (plan->glyphs,\n+        if (unlikely (!hb_plan_subset_cff_fdselect (plan,\n@@ -651,1 +588,1 @@\n-                                  offsets.FDSelectInfo.size,\n+                                  info.fd_select.size,\n@@ -665,1 +602,1 @@\n-      if (unlikely (sidmap.get_count () > 0x8000))      \/* assumption: a dict won't reference that many strings *\/\n+      if (unlikely (sidmap.get_population () > 0x8000)) \/* assumption: a dict won't reference that many strings *\/\n@@ -667,2 +604,0 @@\n-      if (subset_charset)\n-        offsets.charsetInfo.size = plan_subset_charset (acc, plan);\n@@ -670,2 +605,1 @@\n-      topdict_mod.reassignSIDs (sidmap);\n-    }\n+      if (subset_charset) plan_subset_charset (acc, plan);\n@@ -673,5 +607,1 @@\n-    \/* String INDEX *\/\n-    {\n-      offsets.stringIndexInfo.offset = final_size;\n-      offsets.stringIndexInfo.size = acc.stringIndex->calculate_serialized_size (offsets.stringIndexInfo.offSize, sidmap);\n-      final_size += offsets.stringIndexInfo.size;\n+      topdict_mod.reassignSIDs (sidmap);\n@@ -683,2 +613,2 @@\n-      subr_flattener_t<const OT::cff1::accelerator_subset_t, cff1_cs_interp_env_t, cff1_cs_opset_flatten_t>\n-                    flattener(acc, plan->glyphs, plan->drop_hints);\n+      subr_flattener_t<const OT::cff1::accelerator_subset_t, cff1_cs_interp_env_t, cff1_cs_opset_flatten_t, OpCode_endchar>\n+                    flattener(acc, plan);\n@@ -687,3 +617,0 @@\n-\n-      \/* no global\/local subroutines *\/\n-      offsets.globalSubrsInfo.size = CFF1Subrs::calculate_serialized_size (1, 0, 0);\n@@ -693,0 +620,2 @@\n+      cff1_subr_subsetter_t       subr_subsetter (acc, plan);\n+\n@@ -694,1 +623,1 @@\n-      if (!subr_subsetter.subset (acc, plan->glyphs, plan->drop_hints))\n+      if (!subr_subsetter.subset ())\n@@ -698,1 +627,1 @@\n-      if (!subr_subsetter.encode_charstrings (acc, plan->glyphs, subset_charstrings))\n+      if (!subr_subsetter.encode_charstrings (subset_charstrings))\n@@ -704,7 +633,0 @@\n-      \/* global subrs *\/\n-      unsigned int dataSize = subset_globalsubrs.total_size ();\n-      offsets.globalSubrsInfo.offSize = calcOffSize (dataSize);\n-      if (unlikely (offsets.globalSubrsInfo.offSize > 4))\n-        return false;\n-      offsets.globalSubrsInfo.size = CFF1Subrs::calculate_serialized_size (offsets.globalSubrsInfo.offSize, subset_globalsubrs.length, dataSize);\n-\n@@ -712,2 +634,0 @@\n-      if (!offsets.localSubrsInfos.resize (orig_fdcount))\n-        return false;\n@@ -719,2 +639,1 @@\n-        offsets.localSubrsInfos[fd].init ();\n-        if (fdmap.includes (fd))\n+        if (fdmap.has (fd))\n@@ -724,10 +643,0 @@\n-\n-          unsigned int dataSize = subset_localsubrs[fd].total_size ();\n-          if (dataSize > 0)\n-          {\n-            offsets.localSubrsInfos[fd].offset = final_size;\n-            offsets.localSubrsInfos[fd].offSize = calcOffSize (dataSize);\n-            if (unlikely (offsets.localSubrsInfos[fd].offSize > 4))\n-              return false;\n-            offsets.localSubrsInfos[fd].size = CFF1Subrs::calculate_serialized_size (offsets.localSubrsInfos[fd].offSize, subset_localsubrs[fd].length, dataSize);\n-          }\n@@ -738,4 +647,0 @@\n-    \/* global subrs *\/\n-    offsets.globalSubrsInfo.offset = final_size;\n-    final_size += offsets.globalSubrsInfo.size;\n-\n@@ -743,46 +648,2 @@\n-    if (!subset_encoding)\n-      offsets.encodingOffset = acc.topDict.EncodingOffset;\n-    else\n-    {\n-      offsets.encodingOffset = final_size;\n-      final_size += plan_subset_encoding (acc, plan);\n-    }\n-\n-    \/* Charset *\/\n-    if (!subset_charset && acc.is_predef_charset ())\n-      offsets.charsetInfo.offset = acc.topDict.CharsetOffset;\n-    else\n-      offsets.charsetInfo.offset = final_size;\n-    final_size += offsets.charsetInfo.size;\n-\n-    \/* FDSelect *\/\n-    if (acc.fdSelect != &Null(CFF1FDSelect))\n-    {\n-      offsets.FDSelectInfo.offset = final_size;\n-      final_size += offsets.FDSelectInfo.size;\n-    }\n-\n-    \/* FDArray (FDIndex) *\/\n-    if (acc.fdArray != &Null(CFF1FDArray)) {\n-      offsets.FDArrayInfo.offset = final_size;\n-      cff1_font_dict_op_serializer_t fontSzr;\n-      unsigned int dictsSize = 0;\n-      for (unsigned int i = 0; i < acc.fontDicts.length; i++)\n-        if (fdmap.includes (i))\n-          dictsSize += FontDict::calculate_serialized_size (acc.fontDicts[i], fontSzr);\n-\n-      offsets.FDArrayInfo.offSize = calcOffSize (dictsSize);\n-      if (unlikely (offsets.FDArrayInfo.offSize > 4))\n-        return false;\n-      final_size += CFF1Index::calculate_serialized_size (offsets.FDArrayInfo.offSize, subset_fdcount, dictsSize);\n-    }\n-\n-    \/* CharStrings *\/\n-    {\n-      offsets.charStringsInfo.offset = final_size;\n-      unsigned int dataSize = subset_charstrings.total_size ();\n-      offsets.charStringsInfo.offSize = calcOffSize (dataSize);\n-      if (unlikely (offsets.charStringsInfo.offSize > 4))\n-        return false;\n-      final_size += CFF1CharStrings::calculate_serialized_size (offsets.charStringsInfo.offSize, plan->glyphs.length, dataSize);\n-    }\n+    if (subset_encoding)\n+      plan_subset_encoding (acc, plan);\n@@ -791,2 +652,3 @@\n-    offsets.privateDictInfo.offset = final_size;\n-    for (unsigned int i = 0; i < orig_fdcount; i++)\n+    if (!acc.is_CID ())\n+      fontdicts_mod.push (cff1_font_dict_values_mod_t ());\n+    else\n@@ -794,15 +656,4 @@\n-      if (fdmap.includes (i))\n-      {\n-        bool  has_localsubrs = offsets.localSubrsInfos[i].size > 0;\n-        cff_private_dict_op_serializer_t privSzr (desubroutinize, plan->drop_hints);\n-        unsigned int  priv_size = PrivateDict::calculate_serialized_size (acc.privateDicts[i], privSzr, has_localsubrs);\n-        table_info_t  privInfo = { final_size, priv_size, 0 };\n-        font_dict_values_mod_t fontdict_mod;\n-        if (!acc.is_CID ())\n-          fontdict_mod.init ( &Null(cff1_font_dict_values_t), CFF_UNDEF_SID, privInfo );\n-        else\n-          fontdict_mod.init ( &acc.fontDicts[i], sidmap[acc.fontDicts[i].fontName], privInfo );\n-        fontdicts_mod.push (fontdict_mod);\n-        final_size += privInfo.size;\n-\n-        if (!plan->desubroutinize && has_localsubrs)\n+      + hb_iter (acc.fontDicts)\n+      | hb_filter ([&] (const cff1_font_dict_values_t &_)\n+        { return fdmap.has (&_ - &acc.fontDicts[0]); } )\n+      | hb_map ([&] (const cff1_font_dict_values_t &_)\n@@ -810,4 +661,6 @@\n-          offsets.localSubrsInfos[i].offset = final_size;\n-          final_size += offsets.localSubrsInfos[i].size;\n-        }\n-      }\n+          cff1_font_dict_values_mod_t mod;\n+          mod.init (&_, sidmap[_.fontName]);\n+          return mod;\n+        })\n+      | hb_sink (fontdicts_mod)\n+      ;\n@@ -816,4 +669,1 @@\n-    if (!acc.is_CID ())\n-      offsets.privateDictInfo = fontdicts_mod[0].privateDictInfo;\n-\n-    return ((subset_charstrings.length == plan->glyphs.length)\n+    return ((subset_charstrings.length == plan->num_output_glyphs ())\n@@ -823,4 +673,0 @@\n-  unsigned int get_final_size () const  { return final_size; }\n-\n-  unsigned int        final_size;\n-  hb_vector_t<unsigned int>     topdict_sizes;\n@@ -828,1 +674,1 @@\n-  cff1_sub_table_offsets_t      offsets;\n+  cff1_sub_table_info_t         info;\n@@ -838,1 +684,1 @@\n-  remap_t   fdmap;\n+  hb_inc_bimap_t   fdmap;\n@@ -843,1 +689,1 @@\n-  hb_vector_t<font_dict_values_mod_t>  fontdicts_mod;\n+  hb_vector_t<cff1_font_dict_values_mod_t>  fontdicts_mod;\n@@ -862,1 +708,0 @@\n-  cff1_subr_subsetter_t       subr_subsetter;\n@@ -865,5 +710,4 @@\n-static inline bool _write_cff1 (const cff_subset_plan &plan,\n-                                const OT::cff1::accelerator_subset_t  &acc,\n-                                const hb_vector_t<hb_codepoint_t>& glyphs,\n-                                unsigned int dest_sz,\n-                                void *dest)\n+static bool _serialize_cff1 (hb_serialize_context_t *c,\n+                             cff_subset_plan &plan,\n+                             const OT::cff1::accelerator_subset_t  &acc,\n+                             unsigned int num_glyphs)\n@@ -871,13 +715,2 @@\n-  hb_serialize_context_t c (dest, dest_sz);\n-\n-  OT::cff1 *cff = c.start_serialize<OT::cff1> ();\n-  if (unlikely (!c.extend_min (*cff)))\n-    return false;\n-\n-  \/* header *\/\n-  cff->version.major.set (0x01);\n-  cff->version.minor.set (0x00);\n-  cff->nameIndex.set (cff->min_size);\n-  cff->offSize.set (4); \/* unused? *\/\n-\n-  \/* name INDEX *\/\n+  \/* private dicts & local subrs *\/\n+  for (int i = (int)acc.privateDicts.length; --i >= 0 ;)\n@@ -885,4 +718,1 @@\n-    assert (cff->nameIndex == (unsigned) (c.head - c.start));\n-    CFF1NameIndex *dest = c.start_embed<CFF1NameIndex> ();\n-    if (unlikely (dest == nullptr)) return false;\n-    if (unlikely (!dest->serialize (&c, *acc.nameIndex)))\n+    if (plan.fdmap.has (i))\n@@ -890,4 +720,14 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF name INDEX\");\n-      return false;\n-    }\n-  }\n+      objidx_t  subrs_link = 0;\n+      if (plan.subset_localsubrs[i].length > 0)\n+      {\n+        CFF1Subrs *dest = c->start_embed <CFF1Subrs> ();\n+        if (unlikely (!dest)) return false;\n+        c->push ();\n+        if (likely (dest && dest->serialize (c, plan.subset_localsubrs[i])))\n+          subrs_link = c->pop_pack ();\n+        else\n+        {\n+          c->pop_discard ();\n+          return false;\n+        }\n+      }\n@@ -895,13 +735,16 @@\n-  \/* top dict INDEX *\/\n-  {\n-    assert (plan.offsets.topDictInfo.offset == (unsigned) (c.head - c.start));\n-    CFF1IndexOf<TopDict> *dest = c.start_embed< CFF1IndexOf<TopDict> > ();\n-    if (dest == nullptr) return false;\n-    cff1_top_dict_op_serializer_t topSzr;\n-    top_dict_modifiers_t  modifier (plan.offsets, plan.topDictModSIDs);\n-    if (unlikely (!dest->serialize (&c, plan.offsets.topDictInfo.offSize,\n-                                    &plan.topdict_mod, 1,\n-                                    plan.topdict_sizes, topSzr, modifier)))\n-    {\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF top dict\");\n-      return false;\n+      PrivateDict *pd = c->start_embed<PrivateDict> ();\n+      if (unlikely (!pd)) return false;\n+      c->push ();\n+      cff_private_dict_op_serializer_t privSzr (plan.desubroutinize, plan.drop_hints);\n+      \/* N.B. local subrs immediately follows its corresponding private dict. i.e., subr offset == private dict size *\/\n+      if (likely (pd->serialize (c, acc.privateDicts[i], privSzr, subrs_link)))\n+      {\n+        unsigned fd = plan.fdmap[i];\n+        plan.fontdicts_mod[fd].privateDictInfo.size = c->length ();\n+        plan.fontdicts_mod[fd].privateDictInfo.link = c->pop_pack ();\n+      }\n+      else\n+      {\n+        c->pop_discard ();\n+        return false;\n+      }\n@@ -911,1 +754,4 @@\n-  \/* String INDEX *\/\n+  if (!acc.is_CID ())\n+    plan.info.privateDictInfo = plan.fontdicts_mod[0].privateDictInfo;\n+\n+  \/* CharStrings *\/\n@@ -913,4 +759,6 @@\n-    assert (plan.offsets.stringIndexInfo.offset == (unsigned) (c.head - c.start));\n-    CFF1StringIndex *dest = c.start_embed<CFF1StringIndex> ();\n-    if (unlikely (dest == nullptr)) return false;\n-    if (unlikely (!dest->serialize (&c, *acc.stringIndex, plan.offsets.stringIndexInfo.offSize, plan.sidmap)))\n+    CFF1CharStrings  *cs = c->start_embed<CFF1CharStrings> ();\n+    if (unlikely (!cs)) return false;\n+    c->push ();\n+    if (likely (cs->serialize (c, plan.subset_charstrings)))\n+      plan.info.char_strings_link = c->pop_pack ();\n+    else\n@@ -918,1 +766,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF string INDEX\");\n+      c->pop_discard ();\n@@ -923,1 +771,2 @@\n-  \/* global subrs *\/\n+  \/* FDArray (FD Index) *\/\n+  if (acc.fdArray != &Null (CFF1FDArray))\n@@ -925,6 +774,8 @@\n-    assert (plan.offsets.globalSubrsInfo.offset != 0);\n-    assert (plan.offsets.globalSubrsInfo.offset == (unsigned) (c.head - c.start));\n-\n-    CFF1Subrs *dest = c.start_embed <CFF1Subrs> ();\n-    if (unlikely (dest == nullptr)) return false;\n-    if (unlikely (!dest->serialize (&c, plan.offsets.globalSubrsInfo.offSize, plan.subset_globalsubrs)))\n+    CFF1FDArray *fda = c->start_embed<CFF1FDArray> ();\n+    if (unlikely (!fda)) return false;\n+    c->push ();\n+    cff1_font_dict_op_serializer_t  fontSzr;\n+    auto it = + hb_zip (+ hb_iter (plan.fontdicts_mod), + hb_iter (plan.fontdicts_mod));\n+    if (likely (fda->serialize (c, it, fontSzr)))\n+      plan.info.fd_array_link = c->pop_pack (false);\n+    else\n@@ -932,1 +783,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize global subroutines\");\n+      c->pop_discard ();\n@@ -937,2 +788,2 @@\n-  \/* Encoding *\/\n-  if (plan.subset_encoding)\n+  \/* FDSelect *\/\n+  if (acc.fdSelect != &Null (CFF1FDSelect))\n@@ -940,8 +791,6 @@\n-    assert (plan.offsets.encodingOffset == (unsigned) (c.head - c.start));\n-    Encoding *dest = c.start_embed<Encoding> ();\n-    if (unlikely (dest == nullptr)) return false;\n-    if (unlikely (!dest->serialize (&c,\n-                                    plan.subset_enc_format,\n-                                    plan.subset_enc_num_codes,\n-                                    plan.subset_enc_code_ranges,\n-                                    plan.subset_enc_supp_codes)))\n+    c->push ();\n+    if (likely (hb_serialize_cff_fdselect (c, num_glyphs, *acc.fdSelect, acc.fdCount,\n+                                           plan.subset_fdselect_format, plan.info.fd_select.size,\n+                                           plan.subset_fdselect_ranges)))\n+      plan.info.fd_select.link = c->pop_pack ();\n+    else\n@@ -949,1 +798,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize Encoding\");\n+      c->pop_discard ();\n@@ -957,7 +806,9 @@\n-    assert (plan.offsets.charsetInfo.offset == (unsigned) (c.head - c.start));\n-    Charset *dest = c.start_embed<Charset> ();\n-    if (unlikely (dest == nullptr)) return false;\n-    if (unlikely (!dest->serialize (&c,\n-                                    plan.subset_charset_format,\n-                                    plan.num_glyphs,\n-                                    plan.subset_charset_ranges)))\n+    Charset *dest = c->start_embed<Charset> ();\n+    if (unlikely (!dest)) return false;\n+    c->push ();\n+    if (likely (dest->serialize (c,\n+                                 plan.subset_charset_format,\n+                                 plan.num_glyphs,\n+                                 plan.subset_charset_ranges)))\n+      plan.info.charset_link = c->pop_pack ();\n+    else\n@@ -965,1 +816,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize Charset\");\n+      c->pop_discard ();\n@@ -970,2 +821,2 @@\n-  \/* FDSelect *\/\n-  if (acc.fdSelect != &Null(CFF1FDSelect))\n+  \/* Encoding *\/\n+  if (plan.subset_encoding)\n@@ -973,5 +824,10 @@\n-    assert (plan.offsets.FDSelectInfo.offset == (unsigned) (c.head - c.start));\n-\n-    if (unlikely (!hb_serialize_cff_fdselect (&c, glyphs.length, *acc.fdSelect, acc.fdCount,\n-                                              plan.subset_fdselect_format, plan.offsets.FDSelectInfo.size,\n-                                              plan.subset_fdselect_ranges)))\n+    Encoding *dest = c->start_embed<Encoding> ();\n+    if (unlikely (!dest)) return false;\n+    c->push ();\n+    if (likely (dest->serialize (c,\n+                                 plan.subset_enc_format,\n+                                 plan.subset_enc_num_codes,\n+                                 plan.subset_enc_code_ranges,\n+                                 plan.subset_enc_supp_codes)))\n+      plan.info.encoding_link = c->pop_pack ();\n+    else\n@@ -979,1 +835,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF subset FDSelect\");\n+      c->pop_discard ();\n@@ -984,2 +840,1 @@\n-  \/* FDArray (FD Index) *\/\n-  if (acc.fdArray != &Null(CFF1FDArray))\n+  \/* global subrs *\/\n@@ -987,7 +842,6 @@\n-    assert (plan.offsets.FDArrayInfo.offset == (unsigned) (c.head - c.start));\n-    CFF1FDArray  *fda = c.start_embed<CFF1FDArray> ();\n-    if (unlikely (fda == nullptr)) return false;\n-    cff1_font_dict_op_serializer_t  fontSzr;\n-    if (unlikely (!fda->serialize (&c, plan.offsets.FDArrayInfo.offSize,\n-                                   plan.fontdicts_mod,\n-                                   fontSzr)))\n+    c->push ();\n+    CFF1Subrs *dest = c->start_embed <CFF1Subrs> ();\n+    if (unlikely (!dest)) return false;\n+    if (likely (dest->serialize (c, plan.subset_globalsubrs)))\n+      c->pop_pack ();\n+    else\n@@ -995,1 +849,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF FDArray\");\n+      c->pop_discard ();\n@@ -1000,1 +854,1 @@\n-  \/* CharStrings *\/\n+  \/* String INDEX *\/\n@@ -1002,4 +856,6 @@\n-    assert (plan.offsets.charStringsInfo.offset == (unsigned) (c.head - c.start));\n-    CFF1CharStrings  *cs = c.start_embed<CFF1CharStrings> ();\n-    if (unlikely (cs == nullptr)) return false;\n-    if (unlikely (!cs->serialize (&c, plan.offsets.charStringsInfo.offSize, plan.subset_charstrings)))\n+    CFF1StringIndex *dest = c->start_embed<CFF1StringIndex> ();\n+    if (unlikely (!dest)) return false;\n+    c->push ();\n+    if (likely (dest->serialize (c, *acc.stringIndex, plan.sidmap)))\n+      c->pop_pack ();\n+    else\n@@ -1007,1 +863,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF CharStrings\");\n+      c->pop_discard ();\n@@ -1012,3 +868,14 @@\n-  \/* private dicts & local subrs *\/\n-  assert (plan.offsets.privateDictInfo.offset == (unsigned) (c.head - c.start));\n-  for (unsigned int i = 0; i < acc.privateDicts.length; i++)\n+  OT::cff1 *cff = c->allocate_min<OT::cff1> ();\n+  if (unlikely (!cff))\n+    return false;\n+\n+  \/* header *\/\n+  cff->version.major = 0x01;\n+  cff->version.minor = 0x00;\n+  cff->nameIndex = cff->min_size;\n+  cff->offSize = 4; \/* unused? *\/\n+\n+  \/* name INDEX *\/\n+  if (unlikely (!(*acc.nameIndex).copy (c))) return false;\n+\n+  \/* top dict INDEX *\/\n@@ -1016,1 +883,8 @@\n-    if (plan.fdmap.includes (i))\n+    \/* serialize singleton TopDict *\/\n+    TopDict *top = c->start_embed<TopDict> ();\n+    if (!top) return false;\n+    c->push ();\n+    cff1_top_dict_op_serializer_t topSzr;\n+    unsigned top_size = 0;\n+    top_dict_modifiers_t  modifier (plan.info, plan.topDictModSIDs);\n+    if (likely (top->serialize (c, plan.topdict_mod, topSzr, modifier)))\n@@ -1018,23 +892,2 @@\n-      PrivateDict  *pd = c.start_embed<PrivateDict> ();\n-      if (unlikely (pd == nullptr)) return false;\n-      unsigned int priv_size = plan.fontdicts_mod[plan.fdmap[i]].privateDictInfo.size;\n-      bool result;\n-      cff_private_dict_op_serializer_t privSzr (plan.desubroutinize, plan.drop_hints);\n-      \/* N.B. local subrs immediately follows its corresponding private dict. i.e., subr offset == private dict size *\/\n-      unsigned int  subroffset = (plan.offsets.localSubrsInfos[i].size > 0)? priv_size: 0;\n-      result = pd->serialize (&c, acc.privateDicts[i], privSzr, subroffset);\n-      if (unlikely (!result))\n-      {\n-        DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF Private Dict[%d]\", i);\n-        return false;\n-      }\n-      if (plan.offsets.localSubrsInfos[i].size > 0)\n-      {\n-        CFF1Subrs *dest = c.start_embed <CFF1Subrs> ();\n-        if (unlikely (dest == nullptr)) return false;\n-        if (unlikely (!dest->serialize (&c, plan.offsets.localSubrsInfos[i].offSize, plan.subset_localsubrs[i])))\n-        {\n-          DEBUG_MSG (SUBSET, nullptr, \"failed to serialize local subroutines\");\n-          return false;\n-        }\n-      }\n+      top_size = c->length ();\n+      c->pop_pack (false);\n@@ -1042,0 +895,9 @@\n+    else\n+    {\n+      c->pop_discard ();\n+      return false;\n+    }\n+    \/* serialize INDEX header for above *\/\n+    CFF1Index *dest = c->start_embed<CFF1Index> ();\n+    if (!dest) return false;\n+    return dest->serialize_header (c, hb_iter (hb_array_t<unsigned> (&top_size, 1)));\n@@ -1043,5 +905,0 @@\n-\n-  assert (c.head == c.end);\n-  c.end_serialize ();\n-\n-  return true;\n@@ -1052,3 +909,1 @@\n-                const char              *data,\n-                hb_subset_plan_t        *plan,\n-                hb_blob_t               **prime \/* OUT *\/)\n+                hb_subset_context_t     *c)\n@@ -1058,1 +913,1 @@\n-  if (unlikely (!cff_plan.create (acc, plan)))\n+  if (unlikely (!cff_plan.create (acc, c->plan)))\n@@ -1064,16 +919,1 @@\n-  unsigned int  cff_prime_size = cff_plan.get_final_size ();\n-  char *cff_prime_data = (char *) calloc (1, cff_prime_size);\n-\n-  if (unlikely (!_write_cff1 (cff_plan, acc, plan->glyphs,\n-                              cff_prime_size, cff_prime_data))) {\n-    DEBUG_MSG(SUBSET, nullptr, \"Failed to write a subset cff.\");\n-    free (cff_prime_data);\n-    return false;\n-  }\n-\n-  *prime = hb_blob_create (cff_prime_data,\n-                           cff_prime_size,\n-                           HB_MEMORY_MODE_READONLY,\n-                           cff_prime_data,\n-                           free);\n-  return true;\n+  return _serialize_cff1 (c->serializer, cff_plan, acc, c->plan->num_output_glyphs ());\n@@ -1089,2 +929,1 @@\n-hb_subset_cff1 (hb_subset_plan_t *plan,\n-                hb_blob_t       **prime \/* OUT *\/)\n+hb_subset_cff1 (hb_subset_context_t *c)\n@@ -1092,3 +931,0 @@\n-  hb_blob_t *cff_blob = hb_sanitize_context_t().reference_table<CFF::cff1> (plan->source);\n-  const char *data = hb_blob_get_data(cff_blob, nullptr);\n-\n@@ -1096,4 +932,2 @@\n-  acc.init(plan->source);\n-  bool result = likely (acc.is_valid ()) &&\n-                        _hb_subset_cff1 (acc, data, plan, prime);\n-  hb_blob_destroy (cff_blob);\n+  acc.init (c->plan->source);\n+  bool result = likely (acc.is_valid ()) && _hb_subset_cff1 (acc, c);\n@@ -1104,0 +938,3 @@\n+\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff1.cc","additions":279,"deletions":442,"binary":false,"changes":721,"status":"modified"},{"patch":"@@ -35,2 +35,1 @@\n-hb_subset_cff1 (hb_subset_plan_t *plan,\n-               hb_blob_t        **cff_prime \/* OUT *\/);\n+hb_subset_cff1 (hb_subset_context_t *c);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff1.hh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+#include \"hb.hh\"\n+\n+#ifndef HB_NO_SUBSET_CFF\n+\n@@ -37,1 +41,1 @@\n-struct cff2_sub_table_offsets_t : cff_sub_table_offsets_t\n+struct cff2_sub_table_info_t : cff_sub_table_info_t\n@@ -39,3 +43,3 @@\n-  cff2_sub_table_offsets_t ()\n-    : cff_sub_table_offsets_t (),\n-      varStoreOffset (0)\n+  cff2_sub_table_info_t ()\n+    : cff_sub_table_info_t (),\n+      var_store_link (0)\n@@ -44,1 +48,1 @@\n-  unsigned int  varStoreOffset;\n+  objidx_t  var_store_link;\n@@ -51,1 +55,1 @@\n-                  const cff2_sub_table_offsets_t &offsets) const\n+                  const cff2_sub_table_info_t &info) const\n@@ -58,1 +62,1 @@\n-        return_trace (FontDict::serialize_offset4_op(c, opstr.op, offsets.varStoreOffset));\n+        return_trace (FontDict::serialize_link4_op(c, opstr.op, info.var_store_link));\n@@ -61,13 +65,1 @@\n-        return_trace (cff_top_dict_op_serializer_t<>::serialize (c, opstr, offsets));\n-    }\n-  }\n-\n-  unsigned int calculate_serialized_size (const op_str_t &opstr) const\n-  {\n-    switch (opstr.op)\n-    {\n-      case OpCode_vstore:\n-        return OpCode_Size (OpCode_longintdict) + 4 + OpCode_Size (opstr.op);\n-\n-      default:\n-        return cff_top_dict_op_serializer_t<>::calculate_serialized_size (opstr);\n+        return_trace (cff_top_dict_op_serializer_t<>::serialize (c, opstr, info));\n@@ -186,1 +178,1 @@\n-        env.returnFromSubr ();\n+        env.return_from_subr ();\n@@ -216,1 +208,1 @@\n-    env.callSubr (subrs, type);\n+    env.call_subr (subrs, type);\n@@ -218,1 +210,1 @@\n-    hb_set_add (closure, env.context.subr_num);\n+    closure->add (env.context.subr_num);\n@@ -228,1 +220,4 @@\n-  static void finalize_parsed_str (cff2_cs_interp_env_t &env, subr_subset_param_t& param, parsed_cs_str_t &charstring)\n+  cff2_subr_subsetter_t (const OT::cff2::accelerator_subset_t &acc_, const hb_subset_plan_t *plan_)\n+    : subr_subsetter_t (acc_, plan_) {}\n+\n+  static void complete_parsed_str (cff2_cs_interp_env_t &env, subr_subset_param_t& param, parsed_cs_str_t &charstring)\n@@ -242,2 +237,1 @@\n-    : final_size (0),\n-      orig_fdcount (0),\n+    : orig_fdcount (0),\n@@ -245,0 +239,1 @@\n+      subset_fdselect_size (0),\n@@ -254,1 +249,0 @@\n-    privateDictInfos.init ();\n@@ -264,1 +258,0 @@\n-    privateDictInfos.fini ();\n@@ -270,1 +263,0 @@\n-    final_size = 0;\n@@ -276,10 +268,0 @@\n-    \/* CFF2 header *\/\n-    final_size += OT::cff2::static_size;\n-\n-    \/* top dict *\/\n-    {\n-      cff2_top_dict_op_serializer_t topSzr;\n-      offsets.topDictInfo.size = TopDict::calculate_serialized_size (acc.topDict, topSzr);\n-      final_size += offsets.topDictInfo.size;\n-    }\n-\n@@ -290,1 +272,1 @@\n-                    flattener(acc, plan->glyphs, plan->drop_hints);\n+                    flattener(acc, plan);\n@@ -293,3 +275,0 @@\n-\n-      \/* no global\/local subroutines *\/\n-      offsets.globalSubrsInfo.size = CFF2Subrs::calculate_serialized_size (1, 0, 0);\n@@ -299,0 +278,2 @@\n+      cff2_subr_subsetter_t     subr_subsetter (acc, plan);\n+\n@@ -300,1 +281,1 @@\n-      if (!subr_subsetter.subset (acc, plan->glyphs, plan->drop_hints))\n+      if (!subr_subsetter.subset ())\n@@ -304,1 +285,1 @@\n-      if (!subr_subsetter.encode_charstrings (acc, plan->glyphs, subset_charstrings))\n+      if (!subr_subsetter.encode_charstrings (subset_charstrings))\n@@ -310,5 +291,0 @@\n-      \/* global subrs *\/\n-      unsigned int dataSize = subset_globalsubrs.total_size ();\n-      offsets.globalSubrsInfo.offSize = calcOffSize (dataSize);\n-      offsets.globalSubrsInfo.size = CFF2Subrs::calculate_serialized_size (offsets.globalSubrsInfo.offSize, subset_globalsubrs.length, dataSize);\n-\n@@ -316,2 +292,0 @@\n-      if (!offsets.localSubrsInfos.resize (orig_fdcount))\n-        return false;\n@@ -323,14 +297,2 @@\n-        offsets.localSubrsInfos[fd].init ();\n-        if (fdmap.includes (fd))\n-        {\n-          if (!subr_subsetter.encode_localsubrs (fd, subset_localsubrs[fd]))\n-            return false;\n-\n-          unsigned int dataSize = subset_localsubrs[fd].total_size ();\n-          if (dataSize > 0)\n-          {\n-            offsets.localSubrsInfos[fd].offset = final_size;\n-            offsets.localSubrsInfos[fd].offSize = calcOffSize (dataSize);\n-            offsets.localSubrsInfos[fd].size = CFF2Subrs::calculate_serialized_size (offsets.localSubrsInfos[fd].offSize, subset_localsubrs[fd].length, dataSize);\n-          }\n-        }\n+        if (!subr_subsetter.encode_localsubrs (fd, subset_localsubrs[fd]))\n+          return false;\n@@ -340,11 +302,0 @@\n-    \/* global subrs *\/\n-    offsets.globalSubrsInfo.offset = final_size;\n-    final_size += offsets.globalSubrsInfo.size;\n-\n-    \/* variation store *\/\n-    if (acc.varStore != &Null(CFF2VariationStore))\n-    {\n-      offsets.varStoreOffset = final_size;\n-      final_size += acc.varStore->get_size ();\n-    }\n-\n@@ -352,1 +303,1 @@\n-    if (acc.fdSelect != &Null(CFF2FDSelect))\n+    if (acc.fdSelect != &Null (CFF2FDSelect))\n@@ -354,9 +305,8 @@\n-      offsets.FDSelectInfo.offset = final_size;\n-      if (unlikely (!hb_plan_subset_cff_fdselect (plan->glyphs,\n-                                  orig_fdcount,\n-                                  *(const FDSelect *)acc.fdSelect,\n-                                  subset_fdcount,\n-                                  offsets.FDSelectInfo.size,\n-                                  subset_fdselect_format,\n-                                  subset_fdselect_ranges,\n-                                  fdmap)))\n+      if (unlikely (!hb_plan_subset_cff_fdselect (plan,\n+                                                  orig_fdcount,\n+                                                  *(const FDSelect *)acc.fdSelect,\n+                                                  subset_fdcount,\n+                                                  subset_fdselect_size,\n+                                                  subset_fdselect_format,\n+                                                  subset_fdselect_ranges,\n+                                                  fdmap)))\n@@ -364,2 +314,0 @@\n-\n-      final_size += offsets.FDSelectInfo.size;\n@@ -370,42 +318,0 @@\n-    \/* FDArray (FDIndex) *\/\n-    {\n-      offsets.FDArrayInfo.offset = final_size;\n-      cff_font_dict_op_serializer_t fontSzr;\n-      unsigned int dictsSize = 0;\n-      for (unsigned int i = 0; i < acc.fontDicts.length; i++)\n-        if (fdmap.includes (i))\n-          dictsSize += FontDict::calculate_serialized_size (acc.fontDicts[i], fontSzr);\n-\n-      offsets.FDArrayInfo.offSize = calcOffSize (dictsSize);\n-      final_size += CFF2Index::calculate_serialized_size (offsets.FDArrayInfo.offSize, subset_fdcount, dictsSize);\n-    }\n-\n-    \/* CharStrings *\/\n-    {\n-      offsets.charStringsInfo.offset = final_size;\n-      unsigned int dataSize = subset_charstrings.total_size ();\n-      offsets.charStringsInfo.offSize = calcOffSize (dataSize);\n-      final_size += CFF2CharStrings::calculate_serialized_size (offsets.charStringsInfo.offSize, plan->glyphs.length, dataSize);\n-    }\n-\n-    \/* private dicts & local subrs *\/\n-    offsets.privateDictsOffset = final_size;\n-    for (unsigned int i = 0; i < orig_fdcount; i++)\n-    {\n-      if (fdmap.includes (i))\n-      {\n-        bool  has_localsubrs = offsets.localSubrsInfos[i].size > 0;\n-        cff_private_dict_op_serializer_t privSzr (desubroutinize, drop_hints);\n-        unsigned int  priv_size = PrivateDict::calculate_serialized_size (acc.privateDicts[i], privSzr, has_localsubrs);\n-        table_info_t  privInfo = { final_size, priv_size, 0 };\n-        privateDictInfos.push (privInfo);\n-        final_size += privInfo.size;\n-\n-        if (!plan->desubroutinize && has_localsubrs)\n-        {\n-          offsets.localSubrsInfos[i].offset = final_size;\n-          final_size += offsets.localSubrsInfos[i].size;\n-        }\n-      }\n-    }\n-\n@@ -415,4 +321,1 @@\n-  unsigned int get_final_size () const  { return final_size; }\n-\n-  unsigned int  final_size;\n-  cff2_sub_table_offsets_t offsets;\n+  cff2_sub_table_info_t info;\n@@ -422,0 +325,1 @@\n+  unsigned int    subset_fdselect_size;\n@@ -425,1 +329,1 @@\n-  remap_t   fdmap;\n+  hb_inc_bimap_t   fdmap;\n@@ -430,1 +334,0 @@\n-  hb_vector_t<table_info_t>  privateDictInfos;\n@@ -434,1 +337,0 @@\n-  cff2_subr_subsetter_t       subr_subsetter;\n@@ -437,5 +339,4 @@\n-static inline bool _write_cff2 (const cff2_subset_plan &plan,\n-                                const OT::cff2::accelerator_subset_t  &acc,\n-                                const hb_vector_t<hb_codepoint_t>& glyphs,\n-                                unsigned int dest_sz,\n-                                void *dest)\n+static bool _serialize_cff2 (hb_serialize_context_t *c,\n+                             cff2_subset_plan &plan,\n+                             const OT::cff2::accelerator_subset_t  &acc,\n+                             unsigned int num_glyphs)\n@@ -443,10 +344,3 @@\n-  hb_serialize_context_t c (dest, dest_sz);\n-\n-  OT::cff2 *cff2 = c.start_serialize<OT::cff2> ();\n-  if (unlikely (!c.extend_min (*cff2)))\n-    return false;\n-\n-  \/* header *\/\n-  cff2->version.major.set (0x02);\n-  cff2->version.minor.set (0x00);\n-  cff2->topDict.set (OT::cff2::static_size);\n+  \/* private dicts & local subrs *\/\n+  hb_vector_t<table_info_t>  private_dict_infos;\n+  if (unlikely (!private_dict_infos.resize (plan.subset_fdcount))) return false;\n@@ -454,1 +348,1 @@\n-  \/* top dict *\/\n+  for (int i = (int)acc.privateDicts.length; --i >= 0 ;)\n@@ -456,5 +350,1 @@\n-    assert (cff2->topDict == (unsigned) (c.head - c.start));\n-    cff2->topDictSize.set (plan.offsets.topDictInfo.size);\n-    TopDict &dict = cff2 + cff2->topDict;\n-    cff2_top_dict_op_serializer_t topSzr;\n-    if (unlikely (!dict.serialize (&c, acc.topDict, topSzr, plan.offsets)))\n+    if (plan.fdmap.has (i))\n@@ -462,4 +352,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF2 top dict\");\n-      return false;\n-    }\n-  }\n+      objidx_t  subrs_link = 0;\n@@ -467,9 +354,28 @@\n-  \/* global subrs *\/\n-  {\n-    assert (cff2->topDict + plan.offsets.topDictInfo.size == (unsigned) (c.head - c.start));\n-    CFF2Subrs *dest = c.start_embed <CFF2Subrs> ();\n-    if (unlikely (dest == nullptr)) return false;\n-    if (unlikely (!dest->serialize (&c, plan.offsets.globalSubrsInfo.offSize, plan.subset_globalsubrs)))\n-    {\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize global subroutines\");\n-      return false;\n+      if (plan.subset_localsubrs[i].length > 0)\n+      {\n+        CFF2Subrs *dest = c->start_embed <CFF2Subrs> ();\n+        if (unlikely (!dest)) return false;\n+        c->push ();\n+        if (likely (dest->serialize (c, plan.subset_localsubrs[i])))\n+          subrs_link = c->pop_pack ();\n+        else\n+        {\n+          c->pop_discard ();\n+          return false;\n+        }\n+      }\n+      PrivateDict *pd = c->start_embed<PrivateDict> ();\n+      if (unlikely (!pd)) return false;\n+      c->push ();\n+      cff_private_dict_op_serializer_t privSzr (plan.desubroutinize, plan.drop_hints);\n+      if (likely (pd->serialize (c, acc.privateDicts[i], privSzr, subrs_link)))\n+      {\n+        unsigned fd = plan.fdmap[i];\n+        private_dict_infos[fd].size = c->length ();\n+        private_dict_infos[fd].link = c->pop_pack ();\n+      }\n+      else\n+      {\n+        c->pop_discard ();\n+        return false;\n+      }\n@@ -479,2 +385,1 @@\n-  \/* variation store *\/\n-  if (acc.varStore != &Null(CFF2VariationStore))\n+  \/* CharStrings *\/\n@@ -482,3 +387,6 @@\n-    assert (plan.offsets.varStoreOffset == (unsigned) (c.head - c.start));\n-    CFF2VariationStore *dest = c.start_embed<CFF2VariationStore> ();\n-    if (unlikely (!dest->serialize (&c, acc.varStore)))\n+    CFF2CharStrings  *cs = c->start_embed<CFF2CharStrings> ();\n+    if (unlikely (!cs)) return false;\n+    c->push ();\n+    if (likely (cs->serialize (c, plan.subset_charstrings)))\n+      plan.info.char_strings_link = c->pop_pack ();\n+    else\n@@ -486,1 +394,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF2 Variation Store\");\n+      c->pop_discard ();\n@@ -492,1 +400,1 @@\n-  if (acc.fdSelect != &Null(CFF2FDSelect))\n+  if (acc.fdSelect != &Null (CFF2FDSelect))\n@@ -494,5 +402,6 @@\n-    assert (plan.offsets.FDSelectInfo.offset == (unsigned) (c.head - c.start));\n-\n-    if (unlikely (!hb_serialize_cff_fdselect (&c, glyphs.length, *(const FDSelect *)acc.fdSelect, acc.fdArray->count,\n-                                              plan.subset_fdselect_format, plan.offsets.FDSelectInfo.size,\n-                                              plan.subset_fdselect_ranges)))\n+    c->push ();\n+    if (likely (hb_serialize_cff_fdselect (c, num_glyphs, *(const FDSelect *)acc.fdSelect,                                            plan.orig_fdcount,\n+                                            plan.subset_fdselect_format, plan.subset_fdselect_size,\n+                                            plan.subset_fdselect_ranges)))\n+      plan.info.fd_select.link = c->pop_pack ();\n+    else\n@@ -500,1 +409,1 @@\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF2 subset FDSelect\");\n+      c->pop_discard ();\n@@ -507,11 +416,12 @@\n-    assert (plan.offsets.FDArrayInfo.offset == (unsigned) (c.head - c.start));\n-    CFF2FDArray  *fda = c.start_embed<CFF2FDArray> ();\n-    if (unlikely (fda == nullptr)) return false;\n-    cff_font_dict_op_serializer_t  fontSzr;\n-    if (unlikely (!fda->serialize (&c, plan.offsets.FDArrayInfo.offSize,\n-                                   acc.fontDicts, plan.subset_fdcount, plan.fdmap,\n-                                   fontSzr, plan.privateDictInfos)))\n-    {\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF2 FDArray\");\n-      return false;\n-    }\n+    c->push ();\n+    CFF2FDArray *fda = c->start_embed<CFF2FDArray> ();\n+    if (unlikely (!fda)) return false;\n+    cff_font_dict_op_serializer_t fontSzr;\n+    auto it =\n+    + hb_zip (+ hb_iter (acc.fontDicts)\n+              | hb_filter ([&] (const cff2_font_dict_values_t &_)\n+                { return plan.fdmap.has (&_ - &acc.fontDicts[0]); }),\n+              hb_iter (private_dict_infos))\n+    ;\n+    if (unlikely (!fda->serialize (c, it, fontSzr))) return false;\n+    plan.info.fd_array_link = c->pop_pack ();\n@@ -520,1 +430,2 @@\n-  \/* CharStrings *\/\n+  \/* variation store *\/\n+  if (acc.varStore != &Null (CFF2VariationStore))\n@@ -522,8 +433,4 @@\n-    assert (plan.offsets.charStringsInfo.offset == (unsigned) (c.head - c.start));\n-    CFF2CharStrings  *cs = c.start_embed<CFF2CharStrings> ();\n-    if (unlikely (cs == nullptr)) return false;\n-    if (unlikely (!cs->serialize (&c, plan.offsets.charStringsInfo.offSize, plan.subset_charstrings)))\n-    {\n-      DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF2 CharStrings\");\n-      return false;\n-    }\n+    c->push ();\n+    CFF2VariationStore *dest = c->start_embed<CFF2VariationStore> ();\n+    if (unlikely (!dest || !dest->serialize (c, acc.varStore))) return false;\n+    plan.info.var_store_link = c->pop_pack ();\n@@ -532,3 +439,9 @@\n-  \/* private dicts & local subrs *\/\n-  assert (plan.offsets.privateDictsOffset == (unsigned) (c.head - c.start));\n-  for (unsigned int i = 0; i < acc.privateDicts.length; i++)\n+  OT::cff2 *cff2 = c->allocate_min<OT::cff2> ();\n+  if (unlikely (!cff2)) return false;\n+\n+  \/* header *\/\n+  cff2->version.major = 0x02;\n+  cff2->version.minor = 0x00;\n+  cff2->topDict = OT::cff2::static_size;\n+\n+  \/* top dict *\/\n@@ -536,26 +449,4 @@\n-    if (plan.fdmap.includes (i))\n-    {\n-      PrivateDict  *pd = c.start_embed<PrivateDict> ();\n-      if (unlikely (pd == nullptr)) return false;\n-      unsigned int priv_size = plan.privateDictInfos[plan.fdmap[i]].size;\n-      bool result;\n-      cff_private_dict_op_serializer_t privSzr (plan.desubroutinize, plan.drop_hints);\n-      \/* N.B. local subrs immediately follows its corresponding private dict. i.e., subr offset == private dict size *\/\n-      unsigned int  subroffset = (plan.offsets.localSubrsInfos[i].size > 0)? priv_size: 0;\n-      result = pd->serialize (&c, acc.privateDicts[i], privSzr, subroffset);\n-      if (unlikely (!result))\n-      {\n-        DEBUG_MSG (SUBSET, nullptr, \"failed to serialize CFF Private Dict[%d]\", i);\n-        return false;\n-      }\n-      if (plan.offsets.localSubrsInfos[i].size > 0)\n-      {\n-        CFF2Subrs *dest = c.start_embed <CFF2Subrs> ();\n-        if (unlikely (dest == nullptr)) return false;\n-        if (unlikely (!dest->serialize (&c, plan.offsets.localSubrsInfos[i].offSize, plan.subset_localsubrs[i])))\n-        {\n-          DEBUG_MSG (SUBSET, nullptr, \"failed to serialize local subroutines\");\n-          return false;\n-        }\n-      }\n-    }\n+    TopDict &dict = cff2 + cff2->topDict;\n+    cff2_top_dict_op_serializer_t topSzr;\n+    if (unlikely (!dict.serialize (c, acc.topDict, topSzr, plan.info))) return false;\n+    cff2->topDictSize = c->head - (const char *)&dict;\n@@ -564,4 +455,6 @@\n-  assert (c.head == c.end);\n-  c.end_serialize ();\n-\n-  return true;\n+  \/* global subrs *\/\n+  {\n+    CFF2Subrs *dest = c->start_embed <CFF2Subrs> ();\n+    if (unlikely (!dest)) return false;\n+    return dest->serialize (c, plan.subset_globalsubrs);\n+  }\n@@ -572,3 +465,1 @@\n-                const char                    *data,\n-                hb_subset_plan_t                *plan,\n-                hb_blob_t                      **prime \/* OUT *\/)\n+                 hb_subset_context_t    *c)\n@@ -578,22 +469,2 @@\n-  if (unlikely (!cff2_plan.create (acc, plan)))\n-  {\n-    DEBUG_MSG(SUBSET, nullptr, \"Failed to generate a cff2 subsetting plan.\");\n-    return false;\n-  }\n-\n-  unsigned int  cff2_prime_size = cff2_plan.get_final_size ();\n-  char *cff2_prime_data = (char *) calloc (1, cff2_prime_size);\n-\n-  if (unlikely (!_write_cff2 (cff2_plan, acc, plan->glyphs,\n-                              cff2_prime_size, cff2_prime_data))) {\n-    DEBUG_MSG(SUBSET, nullptr, \"Failed to write a subset cff2.\");\n-    free (cff2_prime_data);\n-    return false;\n-  }\n-\n-  *prime = hb_blob_create (cff2_prime_data,\n-                                cff2_prime_size,\n-                                HB_MEMORY_MODE_READONLY,\n-                                cff2_prime_data,\n-                                free);\n-  return true;\n+  if (unlikely (!cff2_plan.create (acc, c->plan))) return false;\n+  return _serialize_cff2 (c->serializer, cff2_plan, acc, c->plan->num_output_glyphs ());\n@@ -604,3 +475,1 @@\n- * Subsets the CFF2 table according to a provided plan.\n- *\n- * Return value: subsetted cff2 table.\n+ * Subsets the CFF2 table according to a provided subset context.\n@@ -609,2 +478,1 @@\n-hb_subset_cff2 (hb_subset_plan_t *plan,\n-                hb_blob_t       **prime \/* OUT *\/)\n+hb_subset_cff2 (hb_subset_context_t *c)\n@@ -612,3 +480,0 @@\n-  hb_blob_t *cff2_blob = hb_sanitize_context_t().reference_table<CFF::cff2> (plan->source);\n-  const char *data = hb_blob_get_data(cff2_blob, nullptr);\n-\n@@ -616,5 +481,2 @@\n-  acc.init(plan->source);\n-  bool result = likely (acc.is_valid ()) &&\n-                _hb_subset_cff2 (acc, data, plan, prime);\n-\n-  hb_blob_destroy (cff2_blob);\n+  acc.init (c->plan->source);\n+  bool result = likely (acc.is_valid ()) && _hb_subset_cff2 (acc, c);\n@@ -625,0 +487,2 @@\n+\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff2.cc","additions":140,"deletions":276,"binary":false,"changes":416,"status":"modified"},{"patch":"@@ -35,2 +35,1 @@\n-hb_subset_cff2 (hb_subset_plan_t *plan,\n-               hb_blob_t       **cff2_prime \/* OUT *\/);\n+hb_subset_cff2 (hb_subset_context_t *c);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-cff2.hh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,310 +0,0 @@\n-\/*\n- * Copyright © 2018  Google, Inc.\n- *\n- *  This is part of HarfBuzz, a text shaping library.\n- *\n- * Permission is hereby granted, without written agreement and without\n- * license or royalty fees, to use, copy, modify, and distribute this\n- * software and its documentation for any purpose, provided that the\n- * above copyright notice and the following two paragraphs appear in\n- * all copies of this software.\n- *\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n- * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n- * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n- * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n- * DAMAGE.\n- *\n- * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n- * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n- * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n- * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n- *\n- * Google Author(s): Garret Rieger, Roderick Sheeter\n- *\/\n-\n-#include \"hb-open-type.hh\"\n-#include \"hb-ot-glyf-table.hh\"\n-#include \"hb-set.h\"\n-#include \"hb-subset-glyf.hh\"\n-\n-static bool\n-_calculate_glyf_and_loca_prime_size (const OT::glyf::accelerator_t &glyf,\n-                                     hb_vector_t<hb_codepoint_t> &glyph_ids,\n-                                     hb_bool_t drop_hints,\n-                                     bool *use_short_loca \/* OUT *\/,\n-                                     unsigned int *glyf_size \/* OUT *\/,\n-                                     unsigned int *loca_size \/* OUT *\/,\n-                                     hb_vector_t<unsigned int> *instruction_ranges \/* OUT *\/)\n-{\n-  unsigned int total = 0;\n-  for (unsigned int i = 0; i < glyph_ids.length; i++)\n-  {\n-    hb_codepoint_t next_glyph = glyph_ids[i];\n-    if (!instruction_ranges->resize (instruction_ranges->length + 2))\n-    {\n-      DEBUG_MSG(SUBSET, nullptr, \"Failed to resize instruction_ranges.\");\n-      return false;\n-    }\n-    unsigned int *instruction_start = &(*instruction_ranges)[instruction_ranges->length - 2];\n-    *instruction_start = 0;\n-    unsigned int *instruction_end = &(*instruction_ranges)[instruction_ranges->length - 1];\n-    *instruction_end = 0;\n-\n-    unsigned int start_offset, end_offset;\n-    if (unlikely (!(glyf.get_offsets (next_glyph, &start_offset, &end_offset) &&\n-                    glyf.remove_padding (start_offset, &end_offset))))\n-    {\n-      DEBUG_MSG(SUBSET, nullptr, \"Invalid gid %d\", next_glyph);\n-      continue;\n-    }\n-    if (end_offset - start_offset < OT::glyf::GlyphHeader::static_size)\n-      continue; \/* 0-length glyph *\/\n-\n-    if (drop_hints)\n-    {\n-      if (unlikely (!glyf.get_instruction_offsets (start_offset, end_offset,\n-                                                   instruction_start, instruction_end)))\n-      {\n-        DEBUG_MSG(SUBSET, nullptr, \"Unable to get instruction offsets for %d\", next_glyph);\n-        return false;\n-      }\n-    }\n-\n-    total += end_offset - start_offset - (*instruction_end - *instruction_start);\n-    \/* round2 so short loca will work *\/\n-    total += total % 2;\n-  }\n-\n-  *glyf_size = total;\n-  *use_short_loca = (total <= 131070);\n-  *loca_size = (glyph_ids.length + 1)\n-      * (*use_short_loca ? sizeof (OT::HBUINT16) : sizeof (OT::HBUINT32));\n-\n-  DEBUG_MSG(SUBSET, nullptr, \"preparing to subset glyf: final size %d, loca size %d, using %s loca\",\n-            total,\n-            *loca_size,\n-            *use_short_loca ? \"short\" : \"long\");\n-  return true;\n-}\n-\n-static bool\n-_write_loca_entry (unsigned int  id,\n-                   unsigned int  offset,\n-                   bool          is_short,\n-                   void         *loca_prime,\n-                   unsigned int  loca_size)\n-{\n-  unsigned int entry_size = is_short ? sizeof (OT::HBUINT16) : sizeof (OT::HBUINT32);\n-  if ((id + 1) * entry_size <= loca_size)\n-  {\n-    if (is_short) {\n-      ((OT::HBUINT16*) loca_prime) [id].set (offset \/ 2);\n-    } else {\n-      ((OT::HBUINT32*) loca_prime) [id].set (offset);\n-    }\n-    return true;\n-  }\n-\n-  \/\/ Offset was not written because the write is out of bounds.\n-  DEBUG_MSG(SUBSET,\n-            nullptr,\n-            \"WARNING: Attempted to write an out of bounds loca entry at index %d. Loca size is %d.\",\n-            id,\n-            loca_size);\n-  return false;\n-}\n-\n-static void\n-_update_components (hb_subset_plan_t * plan,\n-                    char * glyph_start,\n-                    unsigned int length)\n-{\n-  OT::glyf::CompositeGlyphHeader::Iterator iterator;\n-  if (OT::glyf::CompositeGlyphHeader::get_iterator (glyph_start,\n-                                                    length,\n-                                                    &iterator))\n-  {\n-    do\n-    {\n-      hb_codepoint_t new_gid;\n-      if (!plan->new_gid_for_old_gid (iterator.current->glyphIndex,\n-                                      &new_gid))\n-        continue;\n-\n-      ((OT::glyf::CompositeGlyphHeader *) iterator.current)->glyphIndex.set (new_gid);\n-    } while (iterator.move_to_next ());\n-  }\n-}\n-\n-static bool _remove_composite_instruction_flag (char *glyf_prime, unsigned int length)\n-{\n-  \/* remove WE_HAVE_INSTRUCTIONS from flags in dest *\/\n-  OT::glyf::CompositeGlyphHeader::Iterator composite_it;\n-  if (unlikely (!OT::glyf::CompositeGlyphHeader::get_iterator (glyf_prime, length, &composite_it))) return false;\n-  const OT::glyf::CompositeGlyphHeader *glyph;\n-  do {\n-    glyph = composite_it.current;\n-    OT::HBUINT16 *flags = const_cast<OT::HBUINT16 *> (&glyph->flags);\n-    flags->set ( (uint16_t) *flags & ~OT::glyf::CompositeGlyphHeader::WE_HAVE_INSTRUCTIONS);\n-  } while (composite_it.move_to_next ());\n-  return true;\n-}\n-\n-static bool\n-_write_glyf_and_loca_prime (hb_subset_plan_t              *plan,\n-                            const OT::glyf::accelerator_t &glyf,\n-                            const char                    *glyf_data,\n-                            bool                           use_short_loca,\n-                            hb_vector_t<unsigned int> &instruction_ranges,\n-                            unsigned int                   glyf_prime_size,\n-                            char                          *glyf_prime_data \/* OUT *\/,\n-                            unsigned int                   loca_prime_size,\n-                            char                          *loca_prime_data \/* OUT *\/)\n-{\n-  hb_vector_t<hb_codepoint_t> &glyph_ids = plan->glyphs;\n-  char *glyf_prime_data_next = glyf_prime_data;\n-\n-  bool success = true;\n-  for (unsigned int i = 0; i < glyph_ids.length; i++)\n-  {\n-    unsigned int start_offset, end_offset;\n-    if (unlikely (!(glyf.get_offsets (glyph_ids[i], &start_offset, &end_offset) &&\n-                    glyf.remove_padding (start_offset, &end_offset))))\n-      end_offset = start_offset = 0;\n-\n-    unsigned int instruction_start = instruction_ranges[i * 2];\n-    unsigned int instruction_end = instruction_ranges[i * 2 + 1];\n-\n-    int length = end_offset - start_offset - (instruction_end - instruction_start);\n-\n-    if (glyf_prime_data_next + length > glyf_prime_data + glyf_prime_size)\n-    {\n-      DEBUG_MSG(SUBSET,\n-                 nullptr,\n-                 \"WARNING: Attempted to write an out of bounds glyph entry for gid %d (length %d)\",\n-                 i, length);\n-      return false;\n-    }\n-\n-    if (instruction_start == instruction_end)\n-      memcpy (glyf_prime_data_next, glyf_data + start_offset, length);\n-    else\n-    {\n-      memcpy (glyf_prime_data_next, glyf_data + start_offset, instruction_start - start_offset);\n-      memcpy (glyf_prime_data_next + instruction_start - start_offset, glyf_data + instruction_end, end_offset - instruction_end);\n-      \/* if the instructions end at the end this was a composite glyph, else simple *\/\n-      if (instruction_end == end_offset)\n-      {\n-        if (unlikely (!_remove_composite_instruction_flag (glyf_prime_data_next, length))) return false;\n-      }\n-      else\n-        \/* zero instruction length, which is just before instruction_start *\/\n-        memset (glyf_prime_data_next + instruction_start - start_offset - 2, 0, 2);\n-    }\n-\n-    success = success && _write_loca_entry (i,\n-                                            glyf_prime_data_next - glyf_prime_data,\n-                                            use_short_loca,\n-                                            loca_prime_data,\n-                                            loca_prime_size);\n-    _update_components (plan, glyf_prime_data_next, length);\n-\n-    \/\/ TODO: don't align to two bytes if using long loca.\n-    glyf_prime_data_next += length + (length % 2); \/\/ Align to 2 bytes for short loca.\n-  }\n-\n-  success = success && _write_loca_entry (glyph_ids.length,\n-                                          glyf_prime_data_next - glyf_prime_data,\n-                                          use_short_loca,\n-                                          loca_prime_data,\n-                                          loca_prime_size);\n-  return success;\n-}\n-\n-static bool\n-_hb_subset_glyf_and_loca (const OT::glyf::accelerator_t  &glyf,\n-                          const char                     *glyf_data,\n-                          hb_subset_plan_t               *plan,\n-                          bool                           *use_short_loca,\n-                          hb_blob_t                     **glyf_prime \/* OUT *\/,\n-                          hb_blob_t                     **loca_prime \/* OUT *\/)\n-{\n-  \/\/ TODO(grieger): Sanity check allocation size for the new table.\n-  hb_vector_t<hb_codepoint_t> &glyphs_to_retain = plan->glyphs;\n-\n-  unsigned int glyf_prime_size;\n-  unsigned int loca_prime_size;\n-  hb_vector_t<unsigned int> instruction_ranges;\n-  instruction_ranges.init ();\n-\n-  if (unlikely (!_calculate_glyf_and_loca_prime_size (glyf,\n-                                                      glyphs_to_retain,\n-                                                      plan->drop_hints,\n-                                                      use_short_loca,\n-                                                      &glyf_prime_size,\n-                                                      &loca_prime_size,\n-                                                      &instruction_ranges))) {\n-    instruction_ranges.fini ();\n-    return false;\n-  }\n-\n-  char *glyf_prime_data = (char *) calloc (1, glyf_prime_size);\n-  char *loca_prime_data = (char *) calloc (1, loca_prime_size);\n-  if (unlikely (!_write_glyf_and_loca_prime (plan, glyf, glyf_data,\n-                                             *use_short_loca,\n-                                             instruction_ranges,\n-                                             glyf_prime_size, glyf_prime_data,\n-                                             loca_prime_size, loca_prime_data))) {\n-    free (glyf_prime_data);\n-    free (loca_prime_data);\n-    instruction_ranges.fini ();\n-    return false;\n-  }\n-  instruction_ranges.fini ();\n-\n-  *glyf_prime = hb_blob_create (glyf_prime_data,\n-                                glyf_prime_size,\n-                                HB_MEMORY_MODE_READONLY,\n-                                glyf_prime_data,\n-                                free);\n-  *loca_prime = hb_blob_create (loca_prime_data,\n-                                loca_prime_size,\n-                                HB_MEMORY_MODE_READONLY,\n-                                loca_prime_data,\n-                                free);\n-  return true;\n-}\n-\n-\/**\n- * hb_subset_glyf:\n- * Subsets the glyph table according to a provided plan.\n- *\n- * Return value: subsetted glyf table.\n- *\n- * Since: 1.7.5\n- **\/\n-bool\n-hb_subset_glyf_and_loca (hb_subset_plan_t *plan,\n-                         bool             *use_short_loca, \/* OUT *\/\n-                         hb_blob_t       **glyf_prime, \/* OUT *\/\n-                         hb_blob_t       **loca_prime \/* OUT *\/)\n-{\n-  hb_blob_t *glyf_blob = hb_sanitize_context_t ().reference_table<OT::glyf> (plan->source);\n-  const char *glyf_data = hb_blob_get_data (glyf_blob, nullptr);\n-\n-  OT::glyf::accelerator_t glyf;\n-  glyf.init (plan->source);\n-  bool result = _hb_subset_glyf_and_loca (glyf,\n-                                          glyf_data,\n-                                          plan,\n-                                          use_short_loca,\n-                                          glyf_prime,\n-                                          loca_prime);\n-\n-  hb_blob_destroy (glyf_blob);\n-  glyf.fini ();\n-\n-  return result;\n-}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-glyf.cc","additions":0,"deletions":310,"binary":false,"changes":310,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright © 2018  Google, Inc.\n- *\n- *  This is part of HarfBuzz, a text shaping library.\n- *\n- * Permission is hereby granted, without written agreement and without\n- * license or royalty fees, to use, copy, modify, and distribute this\n- * software and its documentation for any purpose, provided that the\n- * above copyright notice and the following two paragraphs appear in\n- * all copies of this software.\n- *\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n- * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n- * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n- * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n- * DAMAGE.\n- *\n- * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n- * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n- * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n- * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n- *\n- * Google Author(s): Garret Rieger\n- *\/\n-\n-#ifndef HB_SUBSET_GLYF_HH\n-#define HB_SUBSET_GLYF_HH\n-\n-#include \"hb.hh\"\n-\n-#include \"hb-subset.hh\"\n-\n-HB_INTERNAL bool\n-hb_subset_glyf_and_loca (hb_subset_plan_t *plan,\n-                         bool             *use_short_loca, \/* OUT *\/\n-                         hb_blob_t       **glyf_prime      \/* OUT *\/,\n-                         hb_blob_t       **loca_prime      \/* OUT *\/);\n-\n-#endif \/* HB_SUBSET_GLYF_HH *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-glyf.hh","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -47,1 +47,39 @@\n-  input->drop_layout = true;\n+  input->name_ids = hb_set_create ();\n+  hb_set_add_range (input->name_ids, 0, 6);\n+  input->name_languages = hb_set_create ();\n+  hb_set_add (input->name_languages, 0x0409);\n+  input->drop_tables = hb_set_create ();\n+  input->drop_hints = false;\n+  input->desubroutinize = false;\n+  input->retain_gids = false;\n+  input->name_legacy = false;\n+\n+  hb_tag_t default_drop_tables[] = {\n+    \/\/ Layout disabled by default\n+    HB_TAG ('G', 'S', 'U', 'B'),\n+    HB_TAG ('G', 'P', 'O', 'S'),\n+    HB_TAG ('G', 'D', 'E', 'F'),\n+    HB_TAG ('m', 'o', 'r', 'x'),\n+    HB_TAG ('m', 'o', 'r', 't'),\n+    HB_TAG ('k', 'e', 'r', 'x'),\n+    HB_TAG ('k', 'e', 'r', 'n'),\n+\n+    \/\/ Copied from fontTools:\n+    HB_TAG ('B', 'A', 'S', 'E'),\n+    HB_TAG ('J', 'S', 'T', 'F'),\n+    HB_TAG ('D', 'S', 'I', 'G'),\n+    HB_TAG ('E', 'B', 'D', 'T'),\n+    HB_TAG ('E', 'B', 'L', 'C'),\n+    HB_TAG ('E', 'B', 'S', 'C'),\n+    HB_TAG ('S', 'V', 'G', ' '),\n+    HB_TAG ('P', 'C', 'L', 'T'),\n+    HB_TAG ('L', 'T', 'S', 'H'),\n+    \/\/ Graphite tables\n+    HB_TAG ('F', 'e', 'a', 't'),\n+    HB_TAG ('G', 'l', 'a', 't'),\n+    HB_TAG ('G', 'l', 'o', 'c'),\n+    HB_TAG ('S', 'i', 'l', 'f'),\n+    HB_TAG ('S', 'i', 'l', 'l'),\n+  };\n+\n+  input->drop_tables->add_array (default_drop_tables, ARRAY_LENGTH (default_drop_tables));\n@@ -81,0 +119,3 @@\n+  hb_set_destroy (subset_input->name_ids);\n+  hb_set_destroy (subset_input->name_languages);\n+  hb_set_destroy (subset_input->drop_tables);\n@@ -109,0 +150,18 @@\n+HB_EXTERN hb_set_t *\n+hb_subset_input_nameid_set (hb_subset_input_t *subset_input)\n+{\n+  return subset_input->name_ids;\n+}\n+\n+HB_EXTERN hb_set_t *\n+hb_subset_input_namelangid_set (hb_subset_input_t *subset_input)\n+{\n+  return subset_input->name_languages;\n+}\n+\n+HB_EXTERN hb_set_t *\n+hb_subset_input_drop_tables_set (hb_subset_input_t *subset_input)\n+{\n+  return subset_input->drop_tables;\n+}\n+\n@@ -123,2 +182,2 @@\n-hb_subset_input_set_drop_layout (hb_subset_input_t *subset_input,\n-                                 hb_bool_t drop_layout)\n+hb_subset_input_set_desubroutinize (hb_subset_input_t *subset_input,\n+                                    hb_bool_t desubroutinize)\n@@ -126,1 +185,1 @@\n-  subset_input->drop_layout = drop_layout;\n+  subset_input->desubroutinize = desubroutinize;\n@@ -130,1 +189,1 @@\n-hb_subset_input_get_drop_layout (hb_subset_input_t *subset_input)\n+hb_subset_input_get_desubroutinize (hb_subset_input_t *subset_input)\n@@ -132,1 +191,1 @@\n-  return subset_input->drop_layout;\n+  return subset_input->desubroutinize;\n@@ -135,0 +194,6 @@\n+\/**\n+ * hb_subset_input_set_retain_gids:\n+ * @subset_input: a subset_input.\n+ * @retain_gids: If true the subsetter will not renumber glyph ids.\n+ * Since: 2.4.0\n+ **\/\n@@ -136,2 +201,2 @@\n-hb_subset_input_set_desubroutinize (hb_subset_input_t *subset_input,\n-        hb_bool_t desubroutinize)\n+hb_subset_input_set_retain_gids (hb_subset_input_t *subset_input,\n+                                 hb_bool_t retain_gids)\n@@ -139,1 +204,1 @@\n-  subset_input->desubroutinize = desubroutinize;\n+  subset_input->retain_gids = retain_gids;\n@@ -142,0 +207,5 @@\n+\/**\n+ * hb_subset_input_get_retain_gids:\n+ * Returns: value of retain_gids.\n+ * Since: 2.4.0\n+ **\/\n@@ -143,1 +213,1 @@\n-hb_subset_input_get_desubroutinize (hb_subset_input_t *subset_input)\n+hb_subset_input_get_retain_gids (hb_subset_input_t *subset_input)\n@@ -145,1 +215,14 @@\n-  return subset_input->desubroutinize;\n+  return subset_input->retain_gids;\n+}\n+\n+HB_EXTERN void\n+hb_subset_input_set_name_legacy (hb_subset_input_t *subset_input,\n+                                 hb_bool_t name_legacy)\n+{\n+  subset_input->name_legacy = name_legacy;\n+}\n+\n+HB_EXTERN hb_bool_t\n+hb_subset_input_get_name_legacy (hb_subset_input_t *subset_input)\n+{\n+  return subset_input->name_legacy;\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-input.cc","additions":94,"deletions":11,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -43,4 +43,8 @@\n-\n-  bool drop_hints : 1;\n-  bool drop_layout : 1;\n-  bool desubroutinize : 1;\n+  hb_set_t *name_ids;\n+  hb_set_t *name_languages;\n+  hb_set_t *drop_tables;\n+\n+  bool drop_hints;\n+  bool desubroutinize;\n+  bool retain_gids;\n+  bool name_legacy;\n@@ -51,1 +55,1 @@\n-   * nameIDs\n+   * name_ids\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-input.hh","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+#include \"hb-ot-layout-gdef-table.hh\"\n+#include \"hb-ot-layout-gpos-table.hh\"\n+#include \"hb-ot-layout-gsub-table.hh\"\n@@ -34,0 +37,3 @@\n+#include \"hb-ot-color-colr-table.hh\"\n+#include \"hb-ot-var-fvar-table.hh\"\n+#include \"hb-ot-stat-table.hh\"\n@@ -35,10 +41,0 @@\n-static void\n-_add_gid_and_children (const OT::glyf::accelerator_t &glyf,\n-                       hb_codepoint_t gid,\n-                       hb_set_t *gids_to_retain)\n-{\n-  if (hb_set_has (gids_to_retain, gid))\n-    \/\/ Already visited this gid, ignore.\n-    return;\n-\n-  hb_set_add (gids_to_retain, gid);\n@@ -46,11 +42,2 @@\n-  OT::glyf::CompositeGlyphHeader::Iterator composite;\n-  if (glyf.get_composite (gid, &composite))\n-  {\n-    do\n-    {\n-      _add_gid_and_children (glyf, (hb_codepoint_t) composite.current->glyphIndex, gids_to_retain);\n-    } while (composite.move_to_next());\n-  }\n-}\n-\n-static void\n+#ifndef HB_NO_SUBSET_CFF\n+static inline void\n@@ -58,2 +45,2 @@\n-           hb_codepoint_t gid,\n-           hb_set_t *gids_to_retain)\n+                          hb_codepoint_t gid,\n+                          hb_set_t *gids_to_retain)\n@@ -64,2 +51,2 @@\n-    hb_set_add (gids_to_retain, base_gid);\n-    hb_set_add (gids_to_retain, accent_gid);\n+    gids_to_retain->add (base_gid);\n+    gids_to_retain->add (accent_gid);\n@@ -68,0 +55,1 @@\n+#endif\n@@ -69,0 +57,1 @@\n+#ifndef HB_NO_SUBSET_LAYOUT\n@@ -70,1 +59,15 @@\n-_gsub_closure (hb_face_t *face, hb_set_t *gids_to_retain)\n+_remap_indexes (const hb_set_t *indexes,\n+                hb_map_t       *mapping \/* OUT *\/)\n+{\n+  unsigned count = indexes->get_population ();\n+\n+  for (auto _ : + hb_zip (indexes->iter (), hb_range (count)))\n+    mapping->set (_.first, _.second);\n+\n+}\n+\n+static inline void\n+_gsub_closure_glyphs_lookups_features (hb_face_t *face,\n+                                       hb_set_t *gids_to_retain,\n+                                       hb_map_t *gsub_lookups,\n+                                       hb_map_t *gsub_features)\n@@ -82,0 +85,11 @@\n+  hb_blob_ptr_t<OT::GSUB> gsub = hb_sanitize_context_t ().reference_table<OT::GSUB> (face);\n+  gsub->closure_lookups (face,\n+                         gids_to_retain,\n+                         &lookup_indices);\n+  _remap_indexes (&lookup_indices, gsub_lookups);\n+\n+  \/\/closure features\n+  hb_set_t feature_indices;\n+  gsub->closure_features (gsub_lookups, &feature_indices);\n+  _remap_indexes (&feature_indices, gsub_features);\n+  gsub.destroy ();\n@@ -84,1 +98,69 @@\n-static void\n+static inline void\n+_gpos_closure_lookups_features (hb_face_t      *face,\n+                                const hb_set_t *gids_to_retain,\n+                                hb_map_t       *gpos_lookups,\n+                                hb_map_t       *gpos_features)\n+{\n+  hb_set_t lookup_indices;\n+  hb_ot_layout_collect_lookups (face,\n+                                HB_OT_TAG_GPOS,\n+                                nullptr,\n+                                nullptr,\n+                                nullptr,\n+                                &lookup_indices);\n+  hb_blob_ptr_t<OT::GPOS> gpos = hb_sanitize_context_t ().reference_table<OT::GPOS> (face);\n+  gpos->closure_lookups (face,\n+                         gids_to_retain,\n+                         &lookup_indices);\n+  _remap_indexes (&lookup_indices, gpos_lookups);\n+\n+  \/\/closure features\n+  hb_set_t feature_indices;\n+  gpos->closure_features (gpos_lookups, &feature_indices);\n+  _remap_indexes (&feature_indices, gpos_features);\n+  gpos.destroy ();\n+}\n+#endif\n+\n+#ifndef HB_NO_VAR\n+static inline void\n+  _collect_layout_variation_indices (hb_face_t *face,\n+                                     const hb_set_t *glyphset,\n+                                     const hb_map_t *gpos_lookups,\n+                                     hb_set_t  *layout_variation_indices,\n+                                     hb_map_t  *layout_variation_idx_map)\n+{\n+  hb_blob_ptr_t<OT::GDEF> gdef = hb_sanitize_context_t ().reference_table<OT::GDEF> (face);\n+  hb_blob_ptr_t<OT::GPOS> gpos = hb_sanitize_context_t ().reference_table<OT::GPOS> (face);\n+\n+  if (!gdef->has_data ())\n+  {\n+    gdef.destroy ();\n+    gpos.destroy ();\n+    return;\n+  }\n+  OT::hb_collect_variation_indices_context_t c (layout_variation_indices, glyphset, gpos_lookups);\n+  gdef->collect_variation_indices (&c);\n+\n+  if (hb_ot_layout_has_positioning (face))\n+    gpos->collect_variation_indices (&c);\n+\n+  gdef->remap_layout_variation_indices (layout_variation_indices, layout_variation_idx_map);\n+\n+  gdef.destroy ();\n+  gpos.destroy ();\n+}\n+#endif\n+\n+static inline void\n+_cmap_closure (hb_face_t           *face,\n+               const hb_set_t      *unicodes,\n+               hb_set_t            *glyphset)\n+{\n+  OT::cmap::accelerator_t cmap;\n+  cmap.init (face);\n+  cmap.table->closure_glyphs (unicodes, glyphset);\n+  cmap.fini ();\n+}\n+\n+static inline void\n@@ -96,2 +178,2 @@\n-static hb_set_t *\n-_populate_gids_to_retain (hb_face_t *face,\n+static void\n+_populate_gids_to_retain (hb_subset_plan_t* plan,\n@@ -99,0 +181,1 @@\n+                          const hb_set_t *input_glyphs_to_retain,\n@@ -100,3 +183,2 @@\n-                          hb_set_t *unicodes_to_retain,\n-                          hb_map_t *codepoint_to_glyph,\n-                          hb_vector_t<hb_codepoint_t> *glyphs)\n+                          bool close_over_gpos,\n+                          bool close_over_gdef)\n@@ -106,0 +188,1 @@\n+#ifndef HB_NO_SUBSET_CFF\n@@ -107,3 +190,8 @@\n-  cmap.init (face);\n-  glyf.init (face);\n-  cff.init (face);\n+#endif\n+  OT::COLR::accelerator_t colr;\n+  cmap.init (plan->source);\n+  glyf.init (plan->source);\n+#ifndef HB_NO_SUBSET_CFF\n+  cff.init (plan->source);\n+#endif\n+  colr.init (plan->source);\n@@ -111,2 +199,2 @@\n-  hb_set_t *initial_gids_to_retain = hb_set_create ();\n-  initial_gids_to_retain->add (0); \/\/ Not-def\n+  plan->_glyphset_gsub->add (0); \/\/ Not-def\n+  hb_set_union (plan->_glyphset_gsub, input_glyphs_to_retain);\n@@ -123,3 +211,3 @@\n-    unicodes_to_retain->add (cp);\n-    codepoint_to_glyph->set (cp, gid);\n-    initial_gids_to_retain->add (gid);\n+    plan->unicodes->add (cp);\n+    plan->codepoint_to_glyph->set (cp, gid);\n+    plan->_glyphset_gsub->add (gid);\n@@ -128,0 +216,3 @@\n+  _cmap_closure (plan->source, plan->unicodes, plan->_glyphset_gsub);\n+\n+#ifndef HB_NO_SUBSET_LAYOUT\n@@ -129,2 +220,7 @@\n-    \/\/ Add all glyphs needed for GSUB substitutions.\n-    _gsub_closure (face, initial_gids_to_retain);\n+    \/\/ closure all glyphs\/lookups\/features needed for GSUB substitutions.\n+    _gsub_closure_glyphs_lookups_features (plan->source, plan->_glyphset_gsub, plan->gsub_lookups, plan->gsub_features);\n+\n+  if (close_over_gpos)\n+    _gpos_closure_lookups_features (plan->source, plan->_glyphset_gsub, plan->gpos_lookups, plan->gpos_features);\n+#endif\n+  _remove_invalid_gids (plan->_glyphset_gsub, plan->source->get_num_glyphs ());\n@@ -135,2 +231,1 @@\n-  hb_set_t *all_gids_to_retain = hb_set_create ();\n-  while (initial_gids_to_retain->next (&gid))\n+  while (plan->_glyphset_gsub->next (&gid))\n@@ -138,1 +233,2 @@\n-    _add_gid_and_children (glyf, gid, all_gids_to_retain);\n+    glyf.add_gid_and_children (gid, plan->_glyphset);\n+#ifndef HB_NO_SUBSET_CFF\n@@ -140,1 +236,4 @@\n-      _add_cff_seac_components (cff, gid, all_gids_to_retain);\n+      _add_cff_seac_components (cff, gid, plan->_glyphset);\n+#endif\n+    if (colr.is_valid ())\n+      colr.closure_glyphs (gid, plan->_glyphset);\n@@ -142,1 +241,0 @@\n-  hb_set_destroy (initial_gids_to_retain);\n@@ -144,1 +242,1 @@\n-  _remove_invalid_gids (all_gids_to_retain, face->get_num_glyphs ());\n+  _remove_invalid_gids (plan->_glyphset, plan->source->get_num_glyphs ());\n@@ -146,4 +244,4 @@\n-  glyphs->alloc (all_gids_to_retain->get_population ());\n-  gid = HB_SET_VALUE_INVALID;\n-  while (all_gids_to_retain->next (&gid))\n-    glyphs->push (gid);\n+#ifndef HB_NO_VAR\n+  if (close_over_gdef)\n+    _collect_layout_variation_indices (plan->source, plan->_glyphset, plan->gpos_lookups, plan->layout_variation_indices, plan->layout_variation_idx_map);\n+#endif\n@@ -151,0 +249,1 @@\n+#ifndef HB_NO_SUBSET_CFF\n@@ -152,0 +251,1 @@\n+#endif\n@@ -154,2 +254,0 @@\n-\n-  return all_gids_to_retain;\n@@ -159,2 +257,6 @@\n-_create_old_gid_to_new_gid_map (const hb_vector_t<hb_codepoint_t> &glyphs,\n-                                hb_map_t *glyph_map)\n+_create_old_gid_to_new_gid_map (const hb_face_t *face,\n+                                bool             retain_gids,\n+                                const hb_set_t  *all_gids_to_retain,\n+                                hb_map_t        *glyph_map, \/* OUT *\/\n+                                hb_map_t        *reverse_glyph_map, \/* OUT *\/\n+                                unsigned int    *num_glyphs \/* OUT *\/)\n@@ -162,2 +264,19 @@\n-  for (unsigned int i = 0; i < glyphs.length; i++) {\n-    glyph_map->set (glyphs[i], i);\n+  if (!retain_gids)\n+  {\n+    + hb_enumerate (hb_iter (all_gids_to_retain), (hb_codepoint_t) 0)\n+    | hb_sink (reverse_glyph_map)\n+    ;\n+    *num_glyphs = reverse_glyph_map->get_population ();\n+  } else {\n+    + hb_iter (all_gids_to_retain)\n+    | hb_map ([] (hb_codepoint_t _) {\n+                return hb_pair_t<hb_codepoint_t, hb_codepoint_t> (_, _);\n+              })\n+    | hb_sink (reverse_glyph_map)\n+    ;\n+\n+    unsigned max_glyph =\n+    + hb_iter (all_gids_to_retain)\n+    | hb_reduce (hb_max, 0u)\n+    ;\n+    *num_glyphs = max_glyph + 1;\n@@ -165,0 +284,17 @@\n+\n+  + reverse_glyph_map->iter ()\n+  | hb_map (&hb_pair_t<hb_codepoint_t, hb_codepoint_t>::reverse)\n+  | hb_sink (glyph_map)\n+  ;\n+}\n+\n+static void\n+_nameid_closure (hb_face_t *face,\n+                 hb_set_t  *nameids)\n+{\n+#ifndef HB_NO_STYLE\n+  face->table.STAT->collect_name_ids (nameids);\n+#endif\n+#ifndef HB_NO_VAR\n+  face->table.fvar->collect_name_ids (nameids);\n+#endif\n@@ -178,2 +314,2 @@\n-hb_subset_plan_create (hb_face_t           *face,\n-                       hb_subset_input_t   *input)\n+hb_subset_plan_create (hb_face_t         *face,\n+                       hb_subset_input_t *input)\n@@ -181,1 +317,3 @@\n-  hb_subset_plan_t *plan = hb_object_create<hb_subset_plan_t> ();\n+  hb_subset_plan_t *plan;\n+  if (unlikely (!(plan = hb_object_create<hb_subset_plan_t> ())))\n+    return const_cast<hb_subset_plan_t *> (&Null (hb_subset_plan_t));\n@@ -183,0 +321,1 @@\n+  plan->successful = true;\n@@ -184,1 +323,0 @@\n-  plan->drop_layout = input->drop_layout;\n@@ -186,2 +324,8 @@\n-  plan->unicodes = hb_set_create();\n-  plan->glyphs.init();\n+  plan->retain_gids = input->retain_gids;\n+  plan->name_legacy = input->name_legacy;\n+  plan->unicodes = hb_set_create ();\n+  plan->name_ids = hb_set_reference (input->name_ids);\n+  _nameid_closure (face, plan->name_ids);\n+  plan->name_languages = hb_set_reference (input->name_languages);\n+  plan->glyphs_requested = hb_set_reference (input->glyphs);\n+  plan->drop_tables = hb_set_reference (input->drop_tables);\n@@ -190,10 +334,26 @@\n-  plan->codepoint_to_glyph = hb_map_create();\n-  plan->glyph_map = hb_map_create();\n-  plan->glyphset = _populate_gids_to_retain (face,\n-                                             input->unicodes,\n-                                             !plan->drop_layout,\n-                                             plan->unicodes,\n-                                             plan->codepoint_to_glyph,\n-                                             &plan->glyphs);\n-  _create_old_gid_to_new_gid_map (plan->glyphs,\n-                                  plan->glyph_map);\n+\n+  plan->_glyphset = hb_set_create ();\n+  plan->_glyphset_gsub = hb_set_create ();\n+  plan->codepoint_to_glyph = hb_map_create ();\n+  plan->glyph_map = hb_map_create ();\n+  plan->reverse_glyph_map = hb_map_create ();\n+  plan->gsub_lookups = hb_map_create ();\n+  plan->gpos_lookups = hb_map_create ();\n+  plan->gsub_features = hb_map_create ();\n+  plan->gpos_features = hb_map_create ();\n+  plan->layout_variation_indices = hb_set_create ();\n+  plan->layout_variation_idx_map = hb_map_create ();\n+\n+  _populate_gids_to_retain (plan,\n+                            input->unicodes,\n+                            input->glyphs,\n+                            !input->drop_tables->has (HB_OT_TAG_GSUB),\n+                            !input->drop_tables->has (HB_OT_TAG_GPOS),\n+                            !input->drop_tables->has (HB_OT_TAG_GDEF));\n+\n+  _create_old_gid_to_new_gid_map (face,\n+                                  input->retain_gids,\n+                                  plan->_glyphset,\n+                                  plan->glyph_map,\n+                                  plan->reverse_glyph_map,\n+                                  &plan->_num_output_glyphs);\n@@ -215,1 +375,4 @@\n-  plan->glyphs.fini ();\n+  hb_set_destroy (plan->name_ids);\n+  hb_set_destroy (plan->name_languages);\n+  hb_set_destroy (plan->glyphs_requested);\n+  hb_set_destroy (plan->drop_tables);\n@@ -220,1 +383,10 @@\n-  hb_set_destroy (plan->glyphset);\n+  hb_map_destroy (plan->reverse_glyph_map);\n+  hb_set_destroy (plan->_glyphset);\n+  hb_set_destroy (plan->_glyphset_gsub);\n+  hb_map_destroy (plan->gsub_lookups);\n+  hb_map_destroy (plan->gpos_lookups);\n+  hb_map_destroy (plan->gsub_features);\n+  hb_map_destroy (plan->gpos_features);\n+  hb_set_destroy (plan->layout_variation_indices);\n+  hb_map_destroy (plan->layout_variation_idx_map);\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-plan.cc","additions":248,"deletions":76,"binary":false,"changes":324,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"hb-set.hh\"\n@@ -41,0 +42,1 @@\n+  bool successful : 1;\n@@ -42,1 +44,0 @@\n-  bool drop_layout : 1;\n@@ -44,0 +45,2 @@\n+  bool retain_gids : 1;\n+  bool name_legacy : 1;\n@@ -48,2 +51,2 @@\n-  hb_vector_t<hb_codepoint_t> glyphs;\n-  hb_set_t *glyphset;\n+  \/\/ name_ids we would like to retain\n+  hb_set_t *name_ids;\n@@ -51,0 +54,10 @@\n+  \/\/ name_languages we would like to retain\n+  hb_set_t *name_languages;\n+\n+  \/\/glyph ids requested to retain\n+  hb_set_t *glyphs_requested;\n+\n+  \/\/ Tables which should be dropped.\n+  hb_set_t *drop_tables;\n+\n+  \/\/ The glyph subset\n@@ -52,0 +65,2 @@\n+\n+  \/\/ Old -> New glyph id mapping\n@@ -53,0 +68,1 @@\n+  hb_map_t *reverse_glyph_map;\n@@ -58,2 +74,67 @@\n-  bool new_gid_for_codepoint (hb_codepoint_t codepoint,\n-                              hb_codepoint_t *new_gid) const\n+  unsigned int _num_output_glyphs;\n+  hb_set_t *_glyphset;\n+  hb_set_t *_glyphset_gsub;\n+\n+  \/\/active lookups we'd like to retain\n+  hb_map_t *gsub_lookups;\n+  hb_map_t *gpos_lookups;\n+\n+  \/\/active features we'd like to retain\n+  hb_map_t *gsub_features;\n+  hb_map_t *gpos_features;\n+\n+  \/\/The set of layout item variation store delta set indices to be retained\n+  hb_set_t *layout_variation_indices;\n+  \/\/Old -> New layout item variation store delta set index mapping\n+  hb_map_t *layout_variation_idx_map;\n+\n+ public:\n+\n+  bool in_error () const { return !successful; }\n+\n+  bool check_success(bool success)\n+  {\n+    successful = (successful && success);\n+    return successful;\n+  }\n+\n+  \/*\n+   * The set of input glyph ids which will be retained in the subset.\n+   * Does NOT include ids kept due to retain_gids. You probably want to use\n+   * glyph_map\/reverse_glyph_map.\n+   *\/\n+  inline const hb_set_t *\n+  glyphset () const\n+  {\n+    return _glyphset;\n+  }\n+\n+  \/*\n+   * The set of input glyph ids which will be retained in the subset.\n+   *\/\n+  inline const hb_set_t *\n+  glyphset_gsub () const\n+  {\n+    return _glyphset_gsub;\n+  }\n+\n+  \/*\n+   * The total number of output glyphs in the final subset.\n+   *\/\n+  inline unsigned int\n+  num_output_glyphs () const\n+  {\n+    return _num_output_glyphs;\n+  }\n+\n+  \/*\n+   * Given an output gid , returns true if that glyph id is an empty\n+   * glyph (ie. it's a gid that we are dropping all data for).\n+   *\/\n+  inline bool is_empty_glyph (hb_codepoint_t gid) const\n+  {\n+    return !_glyphset->has (gid);\n+  }\n+\n+  inline bool new_gid_for_codepoint (hb_codepoint_t codepoint,\n+                                     hb_codepoint_t *new_gid) const\n@@ -68,2 +149,2 @@\n-  bool new_gid_for_old_gid (hb_codepoint_t old_gid,\n-                            hb_codepoint_t *new_gid) const\n+  inline bool new_gid_for_old_gid (hb_codepoint_t old_gid,\n+                                   hb_codepoint_t *new_gid) const\n@@ -79,1 +160,12 @@\n-  bool\n+  inline bool old_gid_for_new_gid (hb_codepoint_t  new_gid,\n+                                   hb_codepoint_t *old_gid) const\n+  {\n+    hb_codepoint_t gid = reverse_glyph_map->get (new_gid);\n+    if (gid == HB_MAP_VALUE_INVALID)\n+      return false;\n+\n+    *old_gid = gid;\n+    return true;\n+  }\n+\n+  inline bool\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset-plan.hh","additions":100,"deletions":8,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"hb-subset-glyf.hh\"\n@@ -41,0 +40,2 @@\n+#include \"hb-ot-color-sbix-table.hh\"\n+#include \"hb-ot-color-colr-table.hh\"\n@@ -46,0 +47,2 @@\n+#include \"hb-ot-name-table.hh\"\n+#include \"hb-ot-color-cbdt-table.hh\"\n@@ -48,0 +51,2 @@\n+#include \"hb-ot-var-gvar-table.hh\"\n+#include \"hb-ot-var-hvar-table.hh\"\n@@ -50,3 +55,2 @@\n-static unsigned int\n-_plan_estimate_subset_table_size (hb_subset_plan_t *plan,\n-                                  unsigned int table_len)\n+static unsigned\n+_plan_estimate_subset_table_size (hb_subset_plan_t *plan, unsigned table_len)\n@@ -54,2 +58,2 @@\n-  unsigned int src_glyphs = plan->source->get_num_glyphs ();\n-  unsigned int dst_glyphs = plan->glyphset->get_population ();\n+  unsigned src_glyphs = plan->source->get_num_glyphs ();\n+  unsigned dst_glyphs = plan->glyphset ()->get_population ();\n@@ -60,1 +64,1 @@\n-  return 512 + (unsigned int) (table_len * sqrt ((double) dst_glyphs \/ src_glyphs));\n+  return 512 + (unsigned) (table_len * sqrt ((double) dst_glyphs \/ src_glyphs));\n@@ -65,1 +69,1 @@\n-_subset2 (hb_subset_plan_t *plan)\n+_subset (hb_subset_plan_t *plan)\n@@ -67,0 +71,1 @@\n+  bool result = false;\n@@ -71,1 +76,0 @@\n-  hb_bool_t result = false;\n@@ -75,2 +79,4 @@\n-    unsigned int buf_size = _plan_estimate_subset_table_size (plan, source_blob->length);\n-    DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c initial estimated table size: %u bytes.\", HB_UNTAG (tag), buf_size);\n+    \/* TODO Not all tables are glyph-related.  'name' table size for example should not be\n+     * affected by number of glyphs.  Accommodate that. *\/\n+    unsigned buf_size = _plan_estimate_subset_table_size (plan, source_blob->length);\n+    DEBUG_MSG (SUBSET, nullptr, \"OT::%c%c%c%c initial estimated table size: %u bytes.\", HB_UNTAG (tag), buf_size);\n@@ -79,1 +85,2 @@\n-      DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c failed to allocate %u bytes.\", HB_UNTAG (tag), buf_size);\n+      DEBUG_MSG (SUBSET, nullptr, \"OT::%c%c%c%c failed to allocate %u bytes.\", HB_UNTAG (tag), buf_size);\n+      hb_blob_destroy (source_blob);\n@@ -84,3 +91,4 @@\n-    hb_subset_context_t c (plan, &serializer);\n-    result = table->subset (&c);\n-    if (serializer.in_error ())\n+    serializer.start_serialize<TableType> ();\n+    hb_subset_context_t c (source_blob, plan, &serializer, tag);\n+    bool needed = table->subset (&c);\n+    if (serializer.ran_out_of_room)\n@@ -89,1 +97,1 @@\n-      DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c ran out of room; reallocating to %u bytes.\", HB_UNTAG (tag), buf_size);\n+      DEBUG_MSG (SUBSET, nullptr, \"OT::%c%c%c%c ran out of room; reallocating to %u bytes.\", HB_UNTAG (tag), buf_size);\n@@ -92,1 +100,2 @@\n-        DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c failed to reallocate %u bytes.\", HB_UNTAG (tag), buf_size);\n+        DEBUG_MSG (SUBSET, nullptr, \"OT::%c%c%c%c failed to reallocate %u bytes.\", HB_UNTAG (tag), buf_size);\n+        hb_blob_destroy (source_blob);\n@@ -97,0 +106,4 @@\n+    serializer.end_serialize ();\n+\n+    result = !serializer.in_error ();\n+\n@@ -99,9 +112,11 @@\n-      hb_blob_t *dest_blob = serializer.copy_blob ();\n-      DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c final subset table size: %u bytes.\", HB_UNTAG (tag), dest_blob->length);\n-      result = c.plan->add_table (tag, dest_blob);\n-      hb_blob_destroy (dest_blob);\n-    }\n-    else\n-    {\n-      DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c::subset table subsetted to empty.\", HB_UNTAG (tag));\n-      result = true;\n+      if (needed)\n+      {\n+        hb_blob_t *dest_blob = serializer.copy_blob ();\n+        DEBUG_MSG (SUBSET, nullptr, \"OT::%c%c%c%c final subset table size: %u bytes.\", HB_UNTAG (tag), dest_blob->length);\n+        result = c.plan->add_table (tag, dest_blob);\n+        hb_blob_destroy (dest_blob);\n+      }\n+      else\n+      {\n+        DEBUG_MSG (SUBSET, nullptr, \"OT::%c%c%c%c::subset table subsetted to empty.\", HB_UNTAG (tag));\n+      }\n@@ -111,1 +126,1 @@\n-    DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c::subset sanitize failed on source table.\", HB_UNTAG (tag));\n+    DEBUG_MSG (SUBSET, nullptr, \"OT::%c%c%c%c::subset sanitize failed on source table.\", HB_UNTAG (tag));\n@@ -114,1 +129,1 @@\n-  DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c::subset %s\", HB_UNTAG (tag), result ? \"success\" : \"FAILED!\");\n+  DEBUG_MSG (SUBSET, nullptr, \"OT::%c%c%c%c::subset %s\", HB_UNTAG (tag), result ? \"success\" : \"FAILED!\");\n@@ -118,1 +133,0 @@\n-template<typename TableType>\n@@ -120,1 +134,1 @@\n-_subset (hb_subset_plan_t *plan)\n+_is_table_present (hb_face_t *source, hb_tag_t tag)\n@@ -122,13 +136,10 @@\n-  hb_blob_t *source_blob = hb_sanitize_context_t ().reference_table<TableType> (plan->source);\n-  const TableType *table = source_blob->as<TableType> ();\n-\n-  hb_tag_t tag = TableType::tableTag;\n-  hb_bool_t result = false;\n-  if (source_blob->data)\n-    result = table->subset (plan);\n-  else\n-    DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c::subset sanitize failed on source table.\", HB_UNTAG (tag));\n-\n-  hb_blob_destroy (source_blob);\n-  DEBUG_MSG(SUBSET, nullptr, \"OT::%c%c%c%c::subset %s\", HB_UNTAG (tag), result ? \"success\" : \"FAILED!\");\n-  return result;\n+  hb_tag_t table_tags[32];\n+  unsigned offset = 0, num_tables = ARRAY_LENGTH (table_tags);\n+  while ((hb_face_get_table_tags (source, offset, &num_tables, table_tags), num_tables))\n+  {\n+    for (unsigned i = 0; i < num_tables; ++i)\n+      if (table_tags[i] == tag)\n+        return true;\n+    offset += num_tables;\n+  }\n+  return false;\n@@ -137,1 +148,0 @@\n-\n@@ -139,2 +149,1 @@\n-_subset_table (hb_subset_plan_t *plan,\n-               hb_tag_t          tag)\n+_should_drop_table (hb_subset_plan_t *plan, hb_tag_t tag)\n@@ -142,59 +151,2 @@\n-  DEBUG_MSG(SUBSET, nullptr, \"begin subset %c%c%c%c\", HB_UNTAG (tag));\n-  bool result = true;\n-  switch (tag) {\n-    case HB_OT_TAG_glyf:\n-      result = _subset<const OT::glyf> (plan);\n-      break;\n-    case HB_OT_TAG_hdmx:\n-      result = _subset<const OT::hdmx> (plan);\n-      break;\n-    case HB_OT_TAG_head:\n-      \/\/ TODO that won't work well if there is no glyf\n-      DEBUG_MSG(SUBSET, nullptr, \"skip head, handled by glyf\");\n-      result = true;\n-      break;\n-    case HB_OT_TAG_hhea:\n-      DEBUG_MSG(SUBSET, nullptr, \"skip hhea handled by hmtx\");\n-      return true;\n-    case HB_OT_TAG_hmtx:\n-      result = _subset<const OT::hmtx> (plan);\n-      break;\n-    case HB_OT_TAG_vhea:\n-      DEBUG_MSG(SUBSET, nullptr, \"skip vhea handled by vmtx\");\n-      return true;\n-    case HB_OT_TAG_vmtx:\n-      result = _subset<const OT::vmtx> (plan);\n-      break;\n-    case HB_OT_TAG_maxp:\n-      result = _subset<const OT::maxp> (plan);\n-      break;\n-    case HB_OT_TAG_loca:\n-      DEBUG_MSG(SUBSET, nullptr, \"skip loca handled by glyf\");\n-      return true;\n-    case HB_OT_TAG_cmap:\n-      result = _subset<const OT::cmap> (plan);\n-      break;\n-    case HB_OT_TAG_OS2:\n-      result = _subset<const OT::OS2> (plan);\n-      break;\n-    case HB_OT_TAG_post:\n-      result = _subset<const OT::post> (plan);\n-      break;\n-    case HB_OT_TAG_cff1:\n-      result = _subset<const OT::cff1> (plan);\n-      break;\n-    case HB_OT_TAG_cff2:\n-      result = _subset<const OT::cff2> (plan);\n-      break;\n-    case HB_OT_TAG_VORG:\n-      result = _subset<const OT::VORG> (plan);\n-      break;\n-    case HB_OT_TAG_GDEF:\n-      result = _subset2<const OT::GDEF> (plan);\n-      break;\n-    case HB_OT_TAG_GSUB:\n-      result = _subset2<const OT::GSUB> (plan);\n-      break;\n-    case HB_OT_TAG_GPOS:\n-      result = _subset2<const OT::GPOS> (plan);\n-      break;\n+  if (plan->drop_tables->has (tag))\n+    return true;\n@@ -202,8 +154,24 @@\n-    default:\n-      hb_blob_t *source_table = hb_face_reference_table (plan->source, tag);\n-      if (likely (source_table))\n-        result = plan->add_table (tag, source_table);\n-      else\n-        result = false;\n-      hb_blob_destroy (source_table);\n-      break;\n+  switch (tag)\n+  {\n+  case HB_TAG ('c','v','a','r'): \/* hint table, fallthrough *\/\n+  case HB_TAG ('c','v','t',' '): \/* hint table, fallthrough *\/\n+  case HB_TAG ('f','p','g','m'): \/* hint table, fallthrough *\/\n+  case HB_TAG ('p','r','e','p'): \/* hint table, fallthrough *\/\n+  case HB_TAG ('h','d','m','x'): \/* hint table, fallthrough *\/\n+  case HB_TAG ('V','D','M','X'): \/* hint table, fallthrough *\/\n+    return plan->drop_hints;\n+\n+#ifdef HB_NO_SUBSET_LAYOUT\n+    \/\/ Drop Layout Tables if requested.\n+  case HB_OT_TAG_GDEF:\n+  case HB_OT_TAG_GPOS:\n+  case HB_OT_TAG_GSUB:\n+  case HB_TAG ('m','o','r','x'):\n+  case HB_TAG ('m','o','r','t'):\n+  case HB_TAG ('k','e','r','x'):\n+  case HB_TAG ('k','e','r','n'):\n+    return true;\n+#endif\n+\n+  default:\n+    return false;\n@@ -211,2 +179,0 @@\n-  DEBUG_MSG(SUBSET, nullptr, \"subset %c%c%c%c %s\", HB_UNTAG (tag), result ? \"ok\" : \"FAILED\");\n-  return result;\n@@ -216,1 +182,1 @@\n-_should_drop_table (hb_subset_plan_t *plan, hb_tag_t tag)\n+_subset_table (hb_subset_plan_t *plan, hb_tag_t tag)\n@@ -218,35 +184,44 @@\n-  switch (tag) {\n-    case HB_TAG ('c', 'v', 'a', 'r'): \/* hint table, fallthrough *\/\n-    case HB_TAG ('c', 'v', 't', ' '): \/* hint table, fallthrough *\/\n-    case HB_TAG ('f', 'p', 'g', 'm'): \/* hint table, fallthrough *\/\n-    case HB_TAG ('p', 'r', 'e', 'p'): \/* hint table, fallthrough *\/\n-    case HB_TAG ('h', 'd', 'm', 'x'): \/* hint table, fallthrough *\/\n-    case HB_TAG ('V', 'D', 'M', 'X'): \/* hint table, fallthrough *\/\n-      return plan->drop_hints;\n-    \/\/ Drop Layout Tables if requested.\n-    case HB_OT_TAG_GDEF:\n-    case HB_OT_TAG_GPOS:\n-    case HB_OT_TAG_GSUB:\n-      return plan->drop_layout;\n-    \/\/ Drop these tables below by default, list pulled\n-    \/\/ from fontTools:\n-    case HB_TAG ('B', 'A', 'S', 'E'):\n-    case HB_TAG ('J', 'S', 'T', 'F'):\n-    case HB_TAG ('D', 'S', 'I', 'G'):\n-    case HB_TAG ('E', 'B', 'D', 'T'):\n-    case HB_TAG ('E', 'B', 'L', 'C'):\n-    case HB_TAG ('E', 'B', 'S', 'C'):\n-    case HB_TAG ('S', 'V', 'G', ' '):\n-    case HB_TAG ('P', 'C', 'L', 'T'):\n-    case HB_TAG ('L', 'T', 'S', 'H'):\n-    \/\/ Graphite tables:\n-    case HB_TAG ('F', 'e', 'a', 't'):\n-    case HB_TAG ('G', 'l', 'a', 't'):\n-    case HB_TAG ('G', 'l', 'o', 'c'):\n-    case HB_TAG ('S', 'i', 'l', 'f'):\n-    case HB_TAG ('S', 'i', 'l', 'l'):\n-    \/\/ Colour\n-    case HB_TAG ('s', 'b', 'i', 'x'):\n-      return true;\n-    default:\n-      return false;\n+  DEBUG_MSG (SUBSET, nullptr, \"subset %c%c%c%c\", HB_UNTAG (tag));\n+  switch (tag)\n+  {\n+  case HB_OT_TAG_glyf: return _subset<const OT::glyf> (plan);\n+  case HB_OT_TAG_hdmx: return _subset<const OT::hdmx> (plan);\n+  case HB_OT_TAG_name: return _subset<const OT::name> (plan);\n+  case HB_OT_TAG_head:\n+    if (_is_table_present (plan->source, HB_OT_TAG_glyf) && !_should_drop_table (plan, HB_OT_TAG_glyf))\n+      return true; \/* skip head, handled by glyf *\/\n+    return _subset<const OT::head> (plan);\n+  case HB_OT_TAG_hhea: return true; \/* skip hhea, handled by hmtx *\/\n+  case HB_OT_TAG_hmtx: return _subset<const OT::hmtx> (plan);\n+  case HB_OT_TAG_vhea: return true; \/* skip vhea, handled by vmtx *\/\n+  case HB_OT_TAG_vmtx: return _subset<const OT::vmtx> (plan);\n+  case HB_OT_TAG_maxp: return _subset<const OT::maxp> (plan);\n+  case HB_OT_TAG_sbix: return _subset<const OT::sbix> (plan);\n+  case HB_OT_TAG_loca: return true; \/* skip loca, handled by glyf *\/\n+  case HB_OT_TAG_cmap: return _subset<const OT::cmap> (plan);\n+  case HB_OT_TAG_OS2 : return _subset<const OT::OS2 > (plan);\n+  case HB_OT_TAG_post: return _subset<const OT::post> (plan);\n+  case HB_OT_TAG_COLR: return _subset<const OT::COLR> (plan);\n+  case HB_OT_TAG_CBLC: return _subset<const OT::CBLC> (plan);\n+  case HB_OT_TAG_CBDT: return true; \/* skip CBDT, handled by CBLC *\/\n+\n+#ifndef HB_NO_SUBSET_CFF\n+  case HB_OT_TAG_cff1: return _subset<const OT::cff1> (plan);\n+  case HB_OT_TAG_cff2: return _subset<const OT::cff2> (plan);\n+  case HB_OT_TAG_VORG: return _subset<const OT::VORG> (plan);\n+#endif\n+\n+#ifndef HB_NO_SUBSET_LAYOUT\n+  case HB_OT_TAG_GDEF: return _subset<const OT::GDEF> (plan);\n+  case HB_OT_TAG_GSUB: return _subset<const OT::GSUB> (plan);\n+  case HB_OT_TAG_GPOS: return _subset<const OT::GPOS> (plan);\n+  case HB_OT_TAG_gvar: return _subset<const OT::gvar> (plan);\n+  case HB_OT_TAG_HVAR: return _subset<const OT::HVAR> (plan);\n+  case HB_OT_TAG_VVAR: return _subset<const OT::VVAR> (plan);\n+#endif\n+\n+  default:\n+    hb_blob_t *source_table = hb_face_reference_table (plan->source, tag);\n+    bool result = plan->add_table (tag, source_table);\n+    hb_blob_destroy (source_table);\n+    return result;\n@@ -264,2 +239,1 @@\n-hb_subset (hb_face_t *source,\n-           hb_subset_input_t *input)\n+hb_subset (hb_face_t *source, hb_subset_input_t *input)\n@@ -270,0 +244,2 @@\n+  if (unlikely (plan->in_error ()))\n+    return hb_face_get_empty ();\n@@ -271,2 +247,1 @@\n-  hb_tag_t table_tags[32];\n-  unsigned int offset = 0, count;\n+  hb_set_t tags_set;\n@@ -274,4 +249,5 @@\n-  do {\n-    count = ARRAY_LENGTH (table_tags);\n-    hb_face_get_table_tags (source, offset, &count, table_tags);\n-    for (unsigned int i = 0; i < count; i++)\n+  hb_tag_t table_tags[32];\n+  unsigned offset = 0, num_tables = ARRAY_LENGTH (table_tags);\n+  while ((hb_face_get_table_tags (source, offset, &num_tables, table_tags), num_tables))\n+  {\n+    for (unsigned i = 0; i < num_tables; ++i)\n@@ -280,6 +256,4 @@\n-      if (_should_drop_table (plan, tag))\n-      {\n-        DEBUG_MSG(SUBSET, nullptr, \"drop %c%c%c%c\", HB_UNTAG (tag));\n-        continue;\n-      }\n-      success = success && _subset_table (plan, tag);\n+      if (_should_drop_table (plan, tag) && !tags_set.has (tag)) continue;\n+      tags_set.add (tag);\n+      success = _subset_table (plan, tag);\n+      if (unlikely (!success)) goto end;\n@@ -287,2 +261,3 @@\n-    offset += count;\n-  } while (success && count == ARRAY_LENGTH (table_tags));\n+    offset += num_tables;\n+  }\n+end:\n@@ -291,0 +266,1 @@\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset.cc","additions":143,"deletions":167,"binary":false,"changes":310,"status":"modified"},{"patch":"@@ -57,0 +57,9 @@\n+HB_EXTERN hb_set_t *\n+hb_subset_input_nameid_set (hb_subset_input_t *subset_input);\n+\n+HB_EXTERN hb_set_t *\n+hb_subset_input_namelangid_set (hb_subset_input_t *subset_input);\n+\n+HB_EXTERN hb_set_t *\n+hb_subset_input_drop_tables_set (hb_subset_input_t *subset_input);\n+\n@@ -64,2 +73,2 @@\n-hb_subset_input_set_drop_layout (hb_subset_input_t *subset_input,\n-                                 hb_bool_t drop_layout);\n+hb_subset_input_set_desubroutinize (hb_subset_input_t *subset_input,\n+                                    hb_bool_t desubroutinize);\n@@ -67,1 +76,1 @@\n-hb_subset_input_get_drop_layout (hb_subset_input_t *subset_input);\n+hb_subset_input_get_desubroutinize (hb_subset_input_t *subset_input);\n@@ -70,2 +79,2 @@\n-hb_subset_input_set_desubroutinize (hb_subset_input_t *subset_input,\n-        hb_bool_t desubroutinize);\n+hb_subset_input_set_retain_gids (hb_subset_input_t *subset_input,\n+                                 hb_bool_t retain_gids);\n@@ -73,1 +82,7 @@\n-hb_subset_input_get_desubroutinize (hb_subset_input_t *subset_input);\n+hb_subset_input_get_retain_gids (hb_subset_input_t *subset_input);\n+\n+HB_EXTERN void\n+hb_subset_input_set_name_legacy (hb_subset_input_t *subset_input,\n+                                 hb_bool_t name_legacy);\n+HB_EXTERN hb_bool_t\n+hb_subset_input_get_name_legacy (hb_subset_input_t *subset_input);\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset.h","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -43,3 +43,1 @@\n-  template <typename T>\n-  bool dispatch (const T &obj) { return obj.subset (this); }\n-  static bool default_return_value () { return true; }\n+  static return_t default_return_value () { return true; }\n@@ -47,0 +45,13 @@\n+  private:\n+  template <typename T, typename ...Ts> auto\n+  _dispatch (const T &obj, hb_priority<1>, Ts&&... ds) HB_AUTO_RETURN\n+  ( obj.subset (this, hb_forward<Ts> (ds)...) )\n+  template <typename T, typename ...Ts> auto\n+  _dispatch (const T &obj, hb_priority<0>, Ts&&... ds) HB_AUTO_RETURN\n+  ( obj.dispatch (this, hb_forward<Ts> (ds)...) )\n+  public:\n+  template <typename T, typename ...Ts> auto\n+  dispatch (const T &obj, Ts&&... ds) HB_AUTO_RETURN\n+  ( _dispatch (obj, hb_prioritize, hb_forward<Ts> (ds)...) )\n+\n+  hb_blob_t *source_blob;\n@@ -49,1 +60,1 @@\n-  unsigned int debug_depth;\n+  hb_tag_t table_tag;\n@@ -51,2 +62,5 @@\n-  hb_subset_context_t (hb_subset_plan_t *plan_,\n-                       hb_serialize_context_t *serializer_) :\n+  hb_subset_context_t (hb_blob_t *source_blob_,\n+                       hb_subset_plan_t *plan_,\n+                       hb_serialize_context_t *serializer_,\n+                       hb_tag_t table_tag_) :\n+                        source_blob (source_blob_),\n@@ -55,1 +69,1 @@\n-                        debug_depth (0) {}\n+                        table_tag (table_tag_) {}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-subset.hh","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,6780 @@\n+\/* == Start of generated table == *\/\n+\/*\n+ * The following table is generated by running:\n+ *\n+ *   .\/gen-ucd-table.py ucd.nounihan.grouped.xml\n+ *\n+ * on file with this description: Unicode 13.0.0\n+ *\/\n+\n+#ifndef HB_UCD_TABLE_HH\n+#define HB_UCD_TABLE_HH\n+\n+#include \"hb.hh\"\n+\n+static const hb_script_t\n+_hb_ucd_sc_map[157] =\n+{\n+                   HB_SCRIPT_COMMON,              HB_SCRIPT_INHERITED,\n+                  HB_SCRIPT_UNKNOWN,                 HB_SCRIPT_ARABIC,\n+                 HB_SCRIPT_ARMENIAN,                HB_SCRIPT_BENGALI,\n+                 HB_SCRIPT_CYRILLIC,             HB_SCRIPT_DEVANAGARI,\n+                 HB_SCRIPT_GEORGIAN,                  HB_SCRIPT_GREEK,\n+                 HB_SCRIPT_GUJARATI,               HB_SCRIPT_GURMUKHI,\n+                   HB_SCRIPT_HANGUL,                    HB_SCRIPT_HAN,\n+                   HB_SCRIPT_HEBREW,               HB_SCRIPT_HIRAGANA,\n+                  HB_SCRIPT_KANNADA,               HB_SCRIPT_KATAKANA,\n+                      HB_SCRIPT_LAO,                  HB_SCRIPT_LATIN,\n+                HB_SCRIPT_MALAYALAM,                  HB_SCRIPT_ORIYA,\n+                    HB_SCRIPT_TAMIL,                 HB_SCRIPT_TELUGU,\n+                     HB_SCRIPT_THAI,                HB_SCRIPT_TIBETAN,\n+                 HB_SCRIPT_BOPOMOFO,                HB_SCRIPT_BRAILLE,\n+       HB_SCRIPT_CANADIAN_SYLLABICS,               HB_SCRIPT_CHEROKEE,\n+                 HB_SCRIPT_ETHIOPIC,                  HB_SCRIPT_KHMER,\n+                HB_SCRIPT_MONGOLIAN,                HB_SCRIPT_MYANMAR,\n+                    HB_SCRIPT_OGHAM,                  HB_SCRIPT_RUNIC,\n+                  HB_SCRIPT_SINHALA,                 HB_SCRIPT_SYRIAC,\n+                   HB_SCRIPT_THAANA,                     HB_SCRIPT_YI,\n+                  HB_SCRIPT_DESERET,                 HB_SCRIPT_GOTHIC,\n+               HB_SCRIPT_OLD_ITALIC,                  HB_SCRIPT_BUHID,\n+                  HB_SCRIPT_HANUNOO,                HB_SCRIPT_TAGALOG,\n+                 HB_SCRIPT_TAGBANWA,                HB_SCRIPT_CYPRIOT,\n+                    HB_SCRIPT_LIMBU,               HB_SCRIPT_LINEAR_B,\n+                  HB_SCRIPT_OSMANYA,                HB_SCRIPT_SHAVIAN,\n+                   HB_SCRIPT_TAI_LE,               HB_SCRIPT_UGARITIC,\n+                 HB_SCRIPT_BUGINESE,                 HB_SCRIPT_COPTIC,\n+               HB_SCRIPT_GLAGOLITIC,             HB_SCRIPT_KHAROSHTHI,\n+              HB_SCRIPT_NEW_TAI_LUE,            HB_SCRIPT_OLD_PERSIAN,\n+             HB_SCRIPT_SYLOTI_NAGRI,               HB_SCRIPT_TIFINAGH,\n+                 HB_SCRIPT_BALINESE,              HB_SCRIPT_CUNEIFORM,\n+                      HB_SCRIPT_NKO,               HB_SCRIPT_PHAGS_PA,\n+               HB_SCRIPT_PHOENICIAN,                 HB_SCRIPT_CARIAN,\n+                     HB_SCRIPT_CHAM,               HB_SCRIPT_KAYAH_LI,\n+                   HB_SCRIPT_LEPCHA,                 HB_SCRIPT_LYCIAN,\n+                   HB_SCRIPT_LYDIAN,               HB_SCRIPT_OL_CHIKI,\n+                   HB_SCRIPT_REJANG,             HB_SCRIPT_SAURASHTRA,\n+                HB_SCRIPT_SUNDANESE,                    HB_SCRIPT_VAI,\n+                  HB_SCRIPT_AVESTAN,                  HB_SCRIPT_BAMUM,\n+     HB_SCRIPT_EGYPTIAN_HIEROGLYPHS,       HB_SCRIPT_IMPERIAL_ARAMAIC,\n+    HB_SCRIPT_INSCRIPTIONAL_PAHLAVI, HB_SCRIPT_INSCRIPTIONAL_PARTHIAN,\n+                 HB_SCRIPT_JAVANESE,                 HB_SCRIPT_KAITHI,\n+                     HB_SCRIPT_LISU,           HB_SCRIPT_MEETEI_MAYEK,\n+        HB_SCRIPT_OLD_SOUTH_ARABIAN,             HB_SCRIPT_OLD_TURKIC,\n+                HB_SCRIPT_SAMARITAN,               HB_SCRIPT_TAI_THAM,\n+                 HB_SCRIPT_TAI_VIET,                  HB_SCRIPT_BATAK,\n+                   HB_SCRIPT_BRAHMI,                HB_SCRIPT_MANDAIC,\n+                   HB_SCRIPT_CHAKMA,       HB_SCRIPT_MEROITIC_CURSIVE,\n+     HB_SCRIPT_MEROITIC_HIEROGLYPHS,                   HB_SCRIPT_MIAO,\n+                  HB_SCRIPT_SHARADA,           HB_SCRIPT_SORA_SOMPENG,\n+                    HB_SCRIPT_TAKRI,              HB_SCRIPT_BASSA_VAH,\n+       HB_SCRIPT_CAUCASIAN_ALBANIAN,               HB_SCRIPT_DUPLOYAN,\n+                  HB_SCRIPT_ELBASAN,                HB_SCRIPT_GRANTHA,\n+                   HB_SCRIPT_KHOJKI,              HB_SCRIPT_KHUDAWADI,\n+                 HB_SCRIPT_LINEAR_A,               HB_SCRIPT_MAHAJANI,\n+               HB_SCRIPT_MANICHAEAN,          HB_SCRIPT_MENDE_KIKAKUI,\n+                     HB_SCRIPT_MODI,                    HB_SCRIPT_MRO,\n+                HB_SCRIPT_NABATAEAN,      HB_SCRIPT_OLD_NORTH_ARABIAN,\n+               HB_SCRIPT_OLD_PERMIC,           HB_SCRIPT_PAHAWH_HMONG,\n+                HB_SCRIPT_PALMYRENE,            HB_SCRIPT_PAU_CIN_HAU,\n+          HB_SCRIPT_PSALTER_PAHLAVI,                HB_SCRIPT_SIDDHAM,\n+                  HB_SCRIPT_TIRHUTA,            HB_SCRIPT_WARANG_CITI,\n+                     HB_SCRIPT_AHOM,  HB_SCRIPT_ANATOLIAN_HIEROGLYPHS,\n+                   HB_SCRIPT_HATRAN,                HB_SCRIPT_MULTANI,\n+            HB_SCRIPT_OLD_HUNGARIAN,            HB_SCRIPT_SIGNWRITING,\n+                    HB_SCRIPT_ADLAM,              HB_SCRIPT_BHAIKSUKI,\n+                  HB_SCRIPT_MARCHEN,                  HB_SCRIPT_OSAGE,\n+                   HB_SCRIPT_TANGUT,                   HB_SCRIPT_NEWA,\n+            HB_SCRIPT_MASARAM_GONDI,                  HB_SCRIPT_NUSHU,\n+                  HB_SCRIPT_SOYOMBO,       HB_SCRIPT_ZANABAZAR_SQUARE,\n+                    HB_SCRIPT_DOGRA,          HB_SCRIPT_GUNJALA_GONDI,\n+          HB_SCRIPT_HANIFI_ROHINGYA,                HB_SCRIPT_MAKASAR,\n+              HB_SCRIPT_MEDEFAIDRIN,            HB_SCRIPT_OLD_SOGDIAN,\n+                  HB_SCRIPT_SOGDIAN,                HB_SCRIPT_ELYMAIC,\n+              HB_SCRIPT_NANDINAGARI, HB_SCRIPT_NYIAKENG_PUACHUE_HMONG,\n+                   HB_SCRIPT_WANCHO,             HB_SCRIPT_CHORASMIAN,\n+              HB_SCRIPT_DIVES_AKURU,    HB_SCRIPT_KHITAN_SMALL_SCRIPT,\n+                   HB_SCRIPT_YEZIDI,\n+};\n+static const uint16_t\n+_hb_ucd_dm1_p0_map[825] =\n+{\n+   0x003Bu, 0x004Bu, 0x0060u, 0x00B4u, 0x00B7u, 0x00C5u, 0x02B9u, 0x0300u,\n+   0x0301u, 0x0313u, 0x0385u, 0x0386u, 0x0388u, 0x0389u, 0x038Au, 0x038Cu,\n+   0x038Eu, 0x038Fu, 0x0390u, 0x03A9u, 0x03ACu, 0x03ADu, 0x03AEu, 0x03AFu,\n+   0x03B0u, 0x03B9u, 0x03CCu, 0x03CDu, 0x03CEu, 0x2002u, 0x2003u, 0x3008u,\n+   0x3009u, 0x349Eu, 0x34B9u, 0x34BBu, 0x34DFu, 0x3515u, 0x36EEu, 0x36FCu,\n+   0x3781u, 0x382Fu, 0x3862u, 0x387Cu, 0x38C7u, 0x38E3u, 0x391Cu, 0x393Au,\n+   0x3A2Eu, 0x3A6Cu, 0x3AE4u, 0x3B08u, 0x3B19u, 0x3B49u, 0x3B9Du, 0x3C18u,\n+   0x3C4Eu, 0x3D33u, 0x3D96u, 0x3EACu, 0x3EB8u, 0x3F1Bu, 0x3FFCu, 0x4008u,\n+   0x4018u, 0x4039u, 0x4046u, 0x4096u, 0x40E3u, 0x412Fu, 0x4202u, 0x4227u,\n+   0x42A0u, 0x4301u, 0x4334u, 0x4359u, 0x43D5u, 0x43D9u, 0x440Bu, 0x446Bu,\n+   0x452Bu, 0x455Du, 0x4561u, 0x456Bu, 0x45D7u, 0x45F9u, 0x4635u, 0x46BEu,\n+   0x46C7u, 0x4995u, 0x49E6u, 0x4A6Eu, 0x4A76u, 0x4AB2u, 0x4B33u, 0x4BCEu,\n+   0x4CCEu, 0x4CEDu, 0x4CF8u, 0x4D56u, 0x4E0Du, 0x4E26u, 0x4E32u, 0x4E38u,\n+   0x4E39u, 0x4E3Du, 0x4E41u, 0x4E82u, 0x4E86u, 0x4EAEu, 0x4EC0u, 0x4ECCu,\n+   0x4EE4u, 0x4F60u, 0x4F80u, 0x4F86u, 0x4F8Bu, 0x4FAEu, 0x4FBBu, 0x4FBFu,\n+   0x5002u, 0x502Bu, 0x507Au, 0x5099u, 0x50CFu, 0x50DAu, 0x50E7u, 0x5140u,\n+   0x5145u, 0x514Du, 0x5154u, 0x5164u, 0x5167u, 0x5168u, 0x5169u, 0x516Du,\n+   0x5177u, 0x5180u, 0x518Du, 0x5192u, 0x5195u, 0x5197u, 0x51A4u, 0x51ACu,\n+   0x51B5u, 0x51B7u, 0x51C9u, 0x51CCu, 0x51DCu, 0x51DEu, 0x51F5u, 0x5203u,\n+   0x5207u, 0x5217u, 0x5229u, 0x523Au, 0x523Bu, 0x5246u, 0x5272u, 0x5277u,\n+   0x5289u, 0x529Bu, 0x52A3u, 0x52B3u, 0x52C7u, 0x52C9u, 0x52D2u, 0x52DEu,\n+   0x52E4u, 0x52F5u, 0x52FAu, 0x5305u, 0x5306u, 0x5317u, 0x533Fu, 0x5349u,\n+   0x5351u, 0x535Au, 0x5373u, 0x5375u, 0x537Du, 0x537Fu, 0x53C3u, 0x53CAu,\n+   0x53DFu, 0x53E5u, 0x53EBu, 0x53F1u, 0x5406u, 0x540Fu, 0x541Du, 0x5438u,\n+   0x5442u, 0x5448u, 0x5468u, 0x549Eu, 0x54A2u, 0x54BDu, 0x54F6u, 0x5510u,\n+   0x5553u, 0x5555u, 0x5563u, 0x5584u, 0x5587u, 0x5599u, 0x559Du, 0x55ABu,\n+   0x55B3u, 0x55C0u, 0x55C2u, 0x55E2u, 0x5606u, 0x5651u, 0x5668u, 0x5674u,\n+   0x56F9u, 0x5716u, 0x5717u, 0x578Bu, 0x57CEu, 0x57F4u, 0x580Du, 0x5831u,\n+   0x5832u, 0x5840u, 0x585Au, 0x585Eu, 0x58A8u, 0x58ACu, 0x58B3u, 0x58D8u,\n+   0x58DFu, 0x58EEu, 0x58F2u, 0x58F7u, 0x5906u, 0x591Au, 0x5922u, 0x5944u,\n+   0x5948u, 0x5951u, 0x5954u, 0x5962u, 0x5973u, 0x59D8u, 0x59ECu, 0x5A1Bu,\n+   0x5A27u, 0x5A62u, 0x5A66u, 0x5AB5u, 0x5B08u, 0x5B28u, 0x5B3Eu, 0x5B85u,\n+   0x5BC3u, 0x5BD8u, 0x5BE7u, 0x5BEEu, 0x5BF3u, 0x5BFFu, 0x5C06u, 0x5C22u,\n+   0x5C3Fu, 0x5C60u, 0x5C62u, 0x5C64u, 0x5C65u, 0x5C6Eu, 0x5C8Du, 0x5CC0u,\n+   0x5D19u, 0x5D43u, 0x5D50u, 0x5D6Bu, 0x5D6Eu, 0x5D7Cu, 0x5DB2u, 0x5DBAu,\n+   0x5DE1u, 0x5DE2u, 0x5DFDu, 0x5E28u, 0x5E3Du, 0x5E69u, 0x5E74u, 0x5EA6u,\n+   0x5EB0u, 0x5EB3u, 0x5EB6u, 0x5EC9u, 0x5ECAu, 0x5ED2u, 0x5ED3u, 0x5ED9u,\n+   0x5EECu, 0x5EFEu, 0x5F04u, 0x5F22u, 0x5F53u, 0x5F62u, 0x5F69u, 0x5F6Bu,\n+   0x5F8Bu, 0x5F9Au, 0x5FA9u, 0x5FADu, 0x5FCDu, 0x5FD7u, 0x5FF5u, 0x5FF9u,\n+   0x6012u, 0x601Cu, 0x6075u, 0x6081u, 0x6094u, 0x60C7u, 0x60D8u, 0x60E1u,\n+   0x6108u, 0x6144u, 0x6148u, 0x614Cu, 0x614Eu, 0x6160u, 0x6168u, 0x617Au,\n+   0x618Eu, 0x6190u, 0x61A4u, 0x61AFu, 0x61B2u, 0x61DEu, 0x61F2u, 0x61F6u,\n+   0x6200u, 0x6210u, 0x621Bu, 0x622Eu, 0x6234u, 0x625Du, 0x62B1u, 0x62C9u,\n+   0x62CFu, 0x62D3u, 0x62D4u, 0x62FCu, 0x62FEu, 0x633Du, 0x6350u, 0x6368u,\n+   0x637Bu, 0x6383u, 0x63A0u, 0x63A9u, 0x63C4u, 0x63C5u, 0x63E4u, 0x641Cu,\n+   0x6422u, 0x6452u, 0x6469u, 0x6477u, 0x647Eu, 0x649Au, 0x649Du, 0x64C4u,\n+   0x654Fu, 0x6556u, 0x656Cu, 0x6578u, 0x6599u, 0x65C5u, 0x65E2u, 0x65E3u,\n+   0x6613u, 0x6649u, 0x6674u, 0x6688u, 0x6691u, 0x669Cu, 0x66B4u, 0x66C6u,\n+   0x66F4u, 0x66F8u, 0x6700u, 0x6717u, 0x671Bu, 0x6721u, 0x674Eu, 0x6753u,\n+   0x6756u, 0x675Eu, 0x677Bu, 0x6785u, 0x6797u, 0x67F3u, 0x67FAu, 0x6817u,\n+   0x681Fu, 0x6852u, 0x6881u, 0x6885u, 0x688Eu, 0x68A8u, 0x6914u, 0x6942u,\n+   0x69A3u, 0x69EAu, 0x6A02u, 0x6A13u, 0x6AA8u, 0x6AD3u, 0x6ADBu, 0x6B04u,\n+   0x6B21u, 0x6B54u, 0x6B72u, 0x6B77u, 0x6B79u, 0x6B9Fu, 0x6BAEu, 0x6BBAu,\n+   0x6BBBu, 0x6C4Eu, 0x6C67u, 0x6C88u, 0x6CBFu, 0x6CCCu, 0x6CCDu, 0x6CE5u,\n+   0x6D16u, 0x6D1Bu, 0x6D1Eu, 0x6D34u, 0x6D3Eu, 0x6D41u, 0x6D69u, 0x6D6Au,\n+   0x6D77u, 0x6D78u, 0x6D85u, 0x6DCBu, 0x6DDAu, 0x6DEAu, 0x6DF9u, 0x6E1Au,\n+   0x6E2Fu, 0x6E6Eu, 0x6E9Cu, 0x6EBAu, 0x6EC7u, 0x6ECBu, 0x6ED1u, 0x6EDBu,\n+   0x6F0Fu, 0x6F22u, 0x6F23u, 0x6F6Eu, 0x6FC6u, 0x6FEBu, 0x6FFEu, 0x701Bu,\n+   0x701Eu, 0x7039u, 0x704Au, 0x7070u, 0x7077u, 0x707Du, 0x7099u, 0x70ADu,\n+   0x70C8u, 0x70D9u, 0x7145u, 0x7149u, 0x716Eu, 0x719Cu, 0x71CEu, 0x71D0u,\n+   0x7210u, 0x721Bu, 0x7228u, 0x722Bu, 0x7235u, 0x7250u, 0x7262u, 0x7280u,\n+   0x7295u, 0x72AFu, 0x72C0u, 0x72FCu, 0x732Au, 0x7375u, 0x737Au, 0x7387u,\n+   0x738Bu, 0x73A5u, 0x73B2u, 0x73DEu, 0x7406u, 0x7409u, 0x7422u, 0x7447u,\n+   0x745Cu, 0x7469u, 0x7471u, 0x7485u, 0x7489u, 0x7498u, 0x74CAu, 0x7506u,\n+   0x7524u, 0x753Bu, 0x753Eu, 0x7559u, 0x7565u, 0x7570u, 0x75E2u, 0x7610u,\n+   0x761Du, 0x761Fu, 0x7642u, 0x7669u, 0x76CAu, 0x76DBu, 0x76E7u, 0x76F4u,\n+   0x7701u, 0x771Eu, 0x771Fu, 0x7740u, 0x774Au, 0x778Bu, 0x77A7u, 0x784Eu,\n+   0x786Bu, 0x788Cu, 0x7891u, 0x78CAu, 0x78CCu, 0x78FBu, 0x792Au, 0x793Cu,\n+   0x793Eu, 0x7948u, 0x7949u, 0x7950u, 0x7956u, 0x795Du, 0x795Eu, 0x7965u,\n+   0x797Fu, 0x798Du, 0x798Eu, 0x798Fu, 0x79AEu, 0x79CAu, 0x79EBu, 0x7A1Cu,\n+   0x7A40u, 0x7A4Au, 0x7A4Fu, 0x7A81u, 0x7AB1u, 0x7ACBu, 0x7AEEu, 0x7B20u,\n+   0x7BC0u, 0x7BC6u, 0x7BC9u, 0x7C3Eu, 0x7C60u, 0x7C7Bu, 0x7C92u, 0x7CBEu,\n+   0x7CD2u, 0x7CD6u, 0x7CE3u, 0x7CE7u, 0x7CE8u, 0x7D00u, 0x7D10u, 0x7D22u,\n+   0x7D2Fu, 0x7D5Bu, 0x7D63u, 0x7DA0u, 0x7DBEu, 0x7DC7u, 0x7DF4u, 0x7E02u,\n+   0x7E09u, 0x7E37u, 0x7E41u, 0x7E45u, 0x7F3Eu, 0x7F72u, 0x7F79u, 0x7F7Au,\n+   0x7F85u, 0x7F95u, 0x7F9Au, 0x7FBDu, 0x7FFAu, 0x8001u, 0x8005u, 0x8046u,\n+   0x8060u, 0x806Fu, 0x8070u, 0x807Eu, 0x808Bu, 0x80ADu, 0x80B2u, 0x8103u,\n+   0x813Eu, 0x81D8u, 0x81E8u, 0x81EDu, 0x8201u, 0x8204u, 0x8218u, 0x826Fu,\n+   0x8279u, 0x828Bu, 0x8291u, 0x829Du, 0x82B1u, 0x82B3u, 0x82BDu, 0x82E5u,\n+   0x82E6u, 0x831Du, 0x8323u, 0x8336u, 0x8352u, 0x8353u, 0x8363u, 0x83ADu,\n+   0x83BDu, 0x83C9u, 0x83CAu, 0x83CCu, 0x83DCu, 0x83E7u, 0x83EFu, 0x83F1u,\n+   0x843Du, 0x8449u, 0x8457u, 0x84EEu, 0x84F1u, 0x84F3u, 0x84FCu, 0x8516u,\n+   0x8564u, 0x85CDu, 0x85FAu, 0x8606u, 0x8612u, 0x862Du, 0x863Fu, 0x8650u,\n+   0x865Cu, 0x8667u, 0x8669u, 0x8688u, 0x86A9u, 0x86E2u, 0x870Eu, 0x8728u,\n+   0x876Bu, 0x8779u, 0x8786u, 0x87BAu, 0x87E1u, 0x8801u, 0x881Fu, 0x884Cu,\n+   0x8860u, 0x8863u, 0x88C2u, 0x88CFu, 0x88D7u, 0x88DEu, 0x88E1u, 0x88F8u,\n+   0x88FAu, 0x8910u, 0x8941u, 0x8964u, 0x8986u, 0x898Bu, 0x8996u, 0x8AA0u,\n+   0x8AAAu, 0x8ABFu, 0x8ACBu, 0x8AD2u, 0x8AD6u, 0x8AEDu, 0x8AF8u, 0x8AFEu,\n+   0x8B01u, 0x8B39u, 0x8B58u, 0x8B80u, 0x8B8Au, 0x8C48u, 0x8C55u, 0x8CABu,\n+   0x8CC1u, 0x8CC2u, 0x8CC8u, 0x8CD3u, 0x8D08u, 0x8D1Bu, 0x8D77u, 0x8DBCu,\n+   0x8DCBu, 0x8DEFu, 0x8DF0u, 0x8ECAu, 0x8ED4u, 0x8F26u, 0x8F2Au, 0x8F38u,\n+   0x8F3Bu, 0x8F62u, 0x8F9Eu, 0x8FB0u, 0x8FB6u, 0x9023u, 0x9038u, 0x9072u,\n+   0x907Cu, 0x908Fu, 0x9094u, 0x90CEu, 0x90DEu, 0x90F1u, 0x90FDu, 0x9111u,\n+   0x911Bu, 0x916Au, 0x9199u, 0x91B4u, 0x91CCu, 0x91CFu, 0x91D1u, 0x9234u,\n+   0x9238u, 0x9276u, 0x927Cu, 0x92D7u, 0x92D8u, 0x9304u, 0x934Au, 0x93F9u,\n+   0x9415u, 0x958Bu, 0x95ADu, 0x95B7u, 0x962Eu, 0x964Bu, 0x964Du, 0x9675u,\n+   0x9678u, 0x967Cu, 0x9686u, 0x96A3u, 0x96B7u, 0x96B8u, 0x96C3u, 0x96E2u,\n+   0x96E3u, 0x96F6u, 0x96F7u, 0x9723u, 0x9732u, 0x9748u, 0x9756u, 0x97DBu,\n+   0x97E0u, 0x97FFu, 0x980Bu, 0x9818u, 0x9829u, 0x983Bu, 0x985Eu, 0x98E2u,\n+   0x98EFu, 0x98FCu, 0x9928u, 0x9929u, 0x99A7u, 0x99C2u, 0x99F1u, 0x99FEu,\n+   0x9A6Au, 0x9B12u, 0x9B6Fu, 0x9C40u, 0x9C57u, 0x9CFDu, 0x9D67u, 0x9DB4u,\n+   0x9DFAu, 0x9E1Eu, 0x9E7Fu, 0x9E97u, 0x9E9Fu, 0x9EBBu, 0x9ECEu, 0x9EF9u,\n+   0x9EFEu, 0x9F05u, 0x9F0Fu, 0x9F16u, 0x9F3Bu, 0x9F43u, 0x9F8Du, 0x9F8Eu,\n+   0x9F9Cu,\n+};\n+static const uint16_t\n+_hb_ucd_dm1_p2_map[110] =\n+{\n+   0x0122u, 0x051Cu, 0x0525u, 0x054Bu, 0x063Au, 0x0804u, 0x08DEu, 0x0A2Cu,\n+   0x0B63u, 0x14E4u, 0x16A8u, 0x16EAu, 0x19C8u, 0x1B18u, 0x1D0Bu, 0x1DE4u,\n+   0x1DE6u, 0x2183u, 0x219Fu, 0x2331u, 0x26D4u, 0x2844u, 0x284Au, 0x2B0Cu,\n+   0x2BF1u, 0x300Au, 0x32B8u, 0x335Fu, 0x3393u, 0x339Cu, 0x33C3u, 0x33D5u,\n+   0x346Du, 0x36A3u, 0x38A7u, 0x3A8Du, 0x3AFAu, 0x3CBCu, 0x3D1Eu, 0x3ED1u,\n+   0x3F5Eu, 0x3F8Eu, 0x4263u, 0x42EEu, 0x43ABu, 0x4608u, 0x4735u, 0x4814u,\n+   0x4C36u, 0x4C92u, 0x4FA1u, 0x4FB8u, 0x5044u, 0x50F2u, 0x50F3u, 0x5119u,\n+   0x5133u, 0x5249u, 0x541Du, 0x5626u, 0x569Au, 0x56C5u, 0x597Cu, 0x5AA7u,\n+   0x5BABu, 0x5C80u, 0x5CD0u, 0x5F86u, 0x61DAu, 0x6228u, 0x6247u, 0x62D9u,\n+   0x633Eu, 0x64DAu, 0x6523u, 0x65A8u, 0x67A7u, 0x67B5u, 0x6B3Cu, 0x6C36u,\n+   0x6CD5u, 0x6D6Bu, 0x6F2Cu, 0x6FB1u, 0x70D2u, 0x73CAu, 0x7667u, 0x78AEu,\n+   0x7966u, 0x7CA8u, 0x7ED3u, 0x7F2Fu, 0x85D2u, 0x85EDu, 0x872Eu, 0x8BFAu,\n+   0x8D77u, 0x9145u, 0x91DFu, 0x921Au, 0x940Au, 0x9496u, 0x95B6u, 0x9B30u,\n+   0xA0CEu, 0xA105u, 0xA20Eu, 0xA291u, 0xA392u, 0xA600u,\n+};\n+static const uint32_t\n+_hb_ucd_dm2_u32_map[638] =\n+{\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x003Cu, 0x0338u, 0x226Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x003Du, 0x0338u, 0x2260u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x003Eu, 0x0338u, 0x226Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0300u, 0x00C0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0301u, 0x00C1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0302u, 0x00C2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0303u, 0x00C3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0304u, 0x0100u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0306u, 0x0102u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0307u, 0x0226u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0308u, 0x00C4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0309u, 0x1EA2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x030Au, 0x00C5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x030Cu, 0x01CDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x030Fu, 0x0200u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0311u, 0x0202u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0323u, 0x1EA0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0325u, 0x1E00u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0041u, 0x0328u, 0x0104u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0042u, 0x0307u, 0x1E02u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0042u, 0x0323u, 0x1E04u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0042u, 0x0331u, 0x1E06u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0043u, 0x0301u, 0x0106u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0043u, 0x0302u, 0x0108u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0043u, 0x0307u, 0x010Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0043u, 0x030Cu, 0x010Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0043u, 0x0327u, 0x00C7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0044u, 0x0307u, 0x1E0Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0044u, 0x030Cu, 0x010Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0044u, 0x0323u, 0x1E0Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0044u, 0x0327u, 0x1E10u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0044u, 0x032Du, 0x1E12u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0044u, 0x0331u, 0x1E0Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0300u, 0x00C8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0301u, 0x00C9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0302u, 0x00CAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0303u, 0x1EBCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0304u, 0x0112u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0306u, 0x0114u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0307u, 0x0116u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0308u, 0x00CBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0309u, 0x1EBAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x030Cu, 0x011Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x030Fu, 0x0204u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0311u, 0x0206u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0323u, 0x1EB8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0327u, 0x0228u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0328u, 0x0118u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x032Du, 0x1E18u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0045u, 0x0330u, 0x1E1Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0046u, 0x0307u, 0x1E1Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0047u, 0x0301u, 0x01F4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0047u, 0x0302u, 0x011Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0047u, 0x0304u, 0x1E20u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0047u, 0x0306u, 0x011Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0047u, 0x0307u, 0x0120u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0047u, 0x030Cu, 0x01E6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0047u, 0x0327u, 0x0122u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0048u, 0x0302u, 0x0124u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0048u, 0x0307u, 0x1E22u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0048u, 0x0308u, 0x1E26u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0048u, 0x030Cu, 0x021Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0048u, 0x0323u, 0x1E24u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0048u, 0x0327u, 0x1E28u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0048u, 0x032Eu, 0x1E2Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0300u, 0x00CCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0301u, 0x00CDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0302u, 0x00CEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0303u, 0x0128u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0304u, 0x012Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0306u, 0x012Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0307u, 0x0130u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0308u, 0x00CFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0309u, 0x1EC8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x030Cu, 0x01CFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x030Fu, 0x0208u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0311u, 0x020Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0323u, 0x1ECAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0328u, 0x012Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0049u, 0x0330u, 0x1E2Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Au, 0x0302u, 0x0134u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Bu, 0x0301u, 0x1E30u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Bu, 0x030Cu, 0x01E8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Bu, 0x0323u, 0x1E32u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Bu, 0x0327u, 0x0136u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Bu, 0x0331u, 0x1E34u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Cu, 0x0301u, 0x0139u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Cu, 0x030Cu, 0x013Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Cu, 0x0323u, 0x1E36u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Cu, 0x0327u, 0x013Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Cu, 0x032Du, 0x1E3Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Cu, 0x0331u, 0x1E3Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Du, 0x0301u, 0x1E3Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Du, 0x0307u, 0x1E40u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Du, 0x0323u, 0x1E42u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x0300u, 0x01F8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x0301u, 0x0143u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x0303u, 0x00D1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x0307u, 0x1E44u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x030Cu, 0x0147u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x0323u, 0x1E46u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x0327u, 0x0145u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x032Du, 0x1E4Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Eu, 0x0331u, 0x1E48u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0300u, 0x00D2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0301u, 0x00D3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0302u, 0x00D4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0303u, 0x00D5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0304u, 0x014Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0306u, 0x014Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0307u, 0x022Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0308u, 0x00D6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0309u, 0x1ECEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x030Bu, 0x0150u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x030Cu, 0x01D1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x030Fu, 0x020Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0311u, 0x020Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x031Bu, 0x01A0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0323u, 0x1ECCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x004Fu, 0x0328u, 0x01EAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0050u, 0x0301u, 0x1E54u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0050u, 0x0307u, 0x1E56u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0052u, 0x0301u, 0x0154u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0052u, 0x0307u, 0x1E58u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0052u, 0x030Cu, 0x0158u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0052u, 0x030Fu, 0x0210u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0052u, 0x0311u, 0x0212u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0052u, 0x0323u, 0x1E5Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0052u, 0x0327u, 0x0156u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0052u, 0x0331u, 0x1E5Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0053u, 0x0301u, 0x015Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0053u, 0x0302u, 0x015Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0053u, 0x0307u, 0x1E60u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0053u, 0x030Cu, 0x0160u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0053u, 0x0323u, 0x1E62u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0053u, 0x0326u, 0x0218u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0053u, 0x0327u, 0x015Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0054u, 0x0307u, 0x1E6Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0054u, 0x030Cu, 0x0164u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0054u, 0x0323u, 0x1E6Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0054u, 0x0326u, 0x021Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0054u, 0x0327u, 0x0162u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0054u, 0x032Du, 0x1E70u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0054u, 0x0331u, 0x1E6Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0300u, 0x00D9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0301u, 0x00DAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0302u, 0x00DBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0303u, 0x0168u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0304u, 0x016Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0306u, 0x016Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0308u, 0x00DCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0309u, 0x1EE6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x030Au, 0x016Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x030Bu, 0x0170u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x030Cu, 0x01D3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x030Fu, 0x0214u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0311u, 0x0216u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x031Bu, 0x01AFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0323u, 0x1EE4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0324u, 0x1E72u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0328u, 0x0172u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x032Du, 0x1E76u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0055u, 0x0330u, 0x1E74u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0056u, 0x0303u, 0x1E7Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0056u, 0x0323u, 0x1E7Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0057u, 0x0300u, 0x1E80u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0057u, 0x0301u, 0x1E82u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0057u, 0x0302u, 0x0174u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0057u, 0x0307u, 0x1E86u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0057u, 0x0308u, 0x1E84u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0057u, 0x0323u, 0x1E88u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0058u, 0x0307u, 0x1E8Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0058u, 0x0308u, 0x1E8Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0300u, 0x1EF2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0301u, 0x00DDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0302u, 0x0176u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0303u, 0x1EF8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0304u, 0x0232u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0307u, 0x1E8Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0308u, 0x0178u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0309u, 0x1EF6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0059u, 0x0323u, 0x1EF4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x005Au, 0x0301u, 0x0179u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x005Au, 0x0302u, 0x1E90u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x005Au, 0x0307u, 0x017Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x005Au, 0x030Cu, 0x017Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x005Au, 0x0323u, 0x1E92u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x005Au, 0x0331u, 0x1E94u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0300u, 0x00E0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0301u, 0x00E1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0302u, 0x00E2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0303u, 0x00E3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0304u, 0x0101u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0306u, 0x0103u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0307u, 0x0227u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0308u, 0x00E4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0309u, 0x1EA3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x030Au, 0x00E5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x030Cu, 0x01CEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x030Fu, 0x0201u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0311u, 0x0203u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0323u, 0x1EA1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0325u, 0x1E01u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0061u, 0x0328u, 0x0105u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0062u, 0x0307u, 0x1E03u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0062u, 0x0323u, 0x1E05u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0062u, 0x0331u, 0x1E07u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0063u, 0x0301u, 0x0107u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0063u, 0x0302u, 0x0109u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0063u, 0x0307u, 0x010Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0063u, 0x030Cu, 0x010Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0063u, 0x0327u, 0x00E7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0064u, 0x0307u, 0x1E0Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0064u, 0x030Cu, 0x010Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0064u, 0x0323u, 0x1E0Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0064u, 0x0327u, 0x1E11u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0064u, 0x032Du, 0x1E13u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0064u, 0x0331u, 0x1E0Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0300u, 0x00E8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0301u, 0x00E9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0302u, 0x00EAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0303u, 0x1EBDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0304u, 0x0113u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0306u, 0x0115u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0307u, 0x0117u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0308u, 0x00EBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0309u, 0x1EBBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x030Cu, 0x011Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x030Fu, 0x0205u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0311u, 0x0207u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0323u, 0x1EB9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0327u, 0x0229u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0328u, 0x0119u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x032Du, 0x1E19u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0065u, 0x0330u, 0x1E1Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0066u, 0x0307u, 0x1E1Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0067u, 0x0301u, 0x01F5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0067u, 0x0302u, 0x011Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0067u, 0x0304u, 0x1E21u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0067u, 0x0306u, 0x011Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0067u, 0x0307u, 0x0121u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0067u, 0x030Cu, 0x01E7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0067u, 0x0327u, 0x0123u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0068u, 0x0302u, 0x0125u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0068u, 0x0307u, 0x1E23u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0068u, 0x0308u, 0x1E27u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0068u, 0x030Cu, 0x021Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0068u, 0x0323u, 0x1E25u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0068u, 0x0327u, 0x1E29u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0068u, 0x032Eu, 0x1E2Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0068u, 0x0331u, 0x1E96u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0300u, 0x00ECu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0301u, 0x00EDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0302u, 0x00EEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0303u, 0x0129u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0304u, 0x012Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0306u, 0x012Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0308u, 0x00EFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0309u, 0x1EC9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x030Cu, 0x01D0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x030Fu, 0x0209u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0311u, 0x020Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0323u, 0x1ECBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0328u, 0x012Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0069u, 0x0330u, 0x1E2Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Au, 0x0302u, 0x0135u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Au, 0x030Cu, 0x01F0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Bu, 0x0301u, 0x1E31u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Bu, 0x030Cu, 0x01E9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Bu, 0x0323u, 0x1E33u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Bu, 0x0327u, 0x0137u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Bu, 0x0331u, 0x1E35u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Cu, 0x0301u, 0x013Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Cu, 0x030Cu, 0x013Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Cu, 0x0323u, 0x1E37u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Cu, 0x0327u, 0x013Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Cu, 0x032Du, 0x1E3Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Cu, 0x0331u, 0x1E3Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Du, 0x0301u, 0x1E3Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Du, 0x0307u, 0x1E41u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Du, 0x0323u, 0x1E43u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x0300u, 0x01F9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x0301u, 0x0144u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x0303u, 0x00F1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x0307u, 0x1E45u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x030Cu, 0x0148u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x0323u, 0x1E47u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x0327u, 0x0146u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x032Du, 0x1E4Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Eu, 0x0331u, 0x1E49u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0300u, 0x00F2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0301u, 0x00F3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0302u, 0x00F4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0303u, 0x00F5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0304u, 0x014Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0306u, 0x014Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0307u, 0x022Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0308u, 0x00F6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0309u, 0x1ECFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x030Bu, 0x0151u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x030Cu, 0x01D2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x030Fu, 0x020Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0311u, 0x020Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x031Bu, 0x01A1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0323u, 0x1ECDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x006Fu, 0x0328u, 0x01EBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0070u, 0x0301u, 0x1E55u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0070u, 0x0307u, 0x1E57u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0072u, 0x0301u, 0x0155u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0072u, 0x0307u, 0x1E59u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0072u, 0x030Cu, 0x0159u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0072u, 0x030Fu, 0x0211u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0072u, 0x0311u, 0x0213u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0072u, 0x0323u, 0x1E5Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0072u, 0x0327u, 0x0157u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0072u, 0x0331u, 0x1E5Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0073u, 0x0301u, 0x015Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0073u, 0x0302u, 0x015Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0073u, 0x0307u, 0x1E61u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0073u, 0x030Cu, 0x0161u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0073u, 0x0323u, 0x1E63u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0073u, 0x0326u, 0x0219u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0073u, 0x0327u, 0x015Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0074u, 0x0307u, 0x1E6Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0074u, 0x0308u, 0x1E97u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0074u, 0x030Cu, 0x0165u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0074u, 0x0323u, 0x1E6Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0074u, 0x0326u, 0x021Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0074u, 0x0327u, 0x0163u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0074u, 0x032Du, 0x1E71u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0074u, 0x0331u, 0x1E6Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0300u, 0x00F9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0301u, 0x00FAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0302u, 0x00FBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0303u, 0x0169u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0304u, 0x016Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0306u, 0x016Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0308u, 0x00FCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0309u, 0x1EE7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x030Au, 0x016Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x030Bu, 0x0171u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x030Cu, 0x01D4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x030Fu, 0x0215u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0311u, 0x0217u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x031Bu, 0x01B0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0323u, 0x1EE5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0324u, 0x1E73u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0328u, 0x0173u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x032Du, 0x1E77u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0075u, 0x0330u, 0x1E75u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0076u, 0x0303u, 0x1E7Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0076u, 0x0323u, 0x1E7Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0077u, 0x0300u, 0x1E81u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0077u, 0x0301u, 0x1E83u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0077u, 0x0302u, 0x0175u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0077u, 0x0307u, 0x1E87u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0077u, 0x0308u, 0x1E85u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0077u, 0x030Au, 0x1E98u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0077u, 0x0323u, 0x1E89u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0078u, 0x0307u, 0x1E8Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0078u, 0x0308u, 0x1E8Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0300u, 0x1EF3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0301u, 0x00FDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0302u, 0x0177u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0303u, 0x1EF9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0304u, 0x0233u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0307u, 0x1E8Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0308u, 0x00FFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0309u, 0x1EF7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x030Au, 0x1E99u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0079u, 0x0323u, 0x1EF5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x007Au, 0x0301u, 0x017Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x007Au, 0x0302u, 0x1E91u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x007Au, 0x0307u, 0x017Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x007Au, 0x030Cu, 0x017Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x007Au, 0x0323u, 0x1E93u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x007Au, 0x0331u, 0x1E95u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00A8u, 0x0300u, 0x1FEDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00A8u, 0x0301u, 0x0385u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00A8u, 0x0342u, 0x1FC1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C2u, 0x0300u, 0x1EA6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C2u, 0x0301u, 0x1EA4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C2u, 0x0303u, 0x1EAAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C2u, 0x0309u, 0x1EA8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C4u, 0x0304u, 0x01DEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C5u, 0x0301u, 0x01FAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C6u, 0x0301u, 0x01FCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C6u, 0x0304u, 0x01E2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00C7u, 0x0301u, 0x1E08u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00CAu, 0x0300u, 0x1EC0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00CAu, 0x0301u, 0x1EBEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00CAu, 0x0303u, 0x1EC4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00CAu, 0x0309u, 0x1EC2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00CFu, 0x0301u, 0x1E2Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D4u, 0x0300u, 0x1ED2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D4u, 0x0301u, 0x1ED0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D4u, 0x0303u, 0x1ED6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D4u, 0x0309u, 0x1ED4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D5u, 0x0301u, 0x1E4Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D5u, 0x0304u, 0x022Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D5u, 0x0308u, 0x1E4Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D6u, 0x0304u, 0x022Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00D8u, 0x0301u, 0x01FEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00DCu, 0x0300u, 0x01DBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00DCu, 0x0301u, 0x01D7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00DCu, 0x0304u, 0x01D5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00DCu, 0x030Cu, 0x01D9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E2u, 0x0300u, 0x1EA7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E2u, 0x0301u, 0x1EA5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E2u, 0x0303u, 0x1EABu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E2u, 0x0309u, 0x1EA9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E4u, 0x0304u, 0x01DFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E5u, 0x0301u, 0x01FBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E6u, 0x0301u, 0x01FDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E6u, 0x0304u, 0x01E3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00E7u, 0x0301u, 0x1E09u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00EAu, 0x0300u, 0x1EC1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00EAu, 0x0301u, 0x1EBFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00EAu, 0x0303u, 0x1EC5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00EAu, 0x0309u, 0x1EC3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00EFu, 0x0301u, 0x1E2Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F4u, 0x0300u, 0x1ED3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F4u, 0x0301u, 0x1ED1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F4u, 0x0303u, 0x1ED7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F4u, 0x0309u, 0x1ED5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F5u, 0x0301u, 0x1E4Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F5u, 0x0304u, 0x022Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F5u, 0x0308u, 0x1E4Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F6u, 0x0304u, 0x022Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00F8u, 0x0301u, 0x01FFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00FCu, 0x0300u, 0x01DCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00FCu, 0x0301u, 0x01D8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00FCu, 0x0304u, 0x01D6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x00FCu, 0x030Cu, 0x01DAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0102u, 0x0300u, 0x1EB0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0102u, 0x0301u, 0x1EAEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0102u, 0x0303u, 0x1EB4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0102u, 0x0309u, 0x1EB2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0103u, 0x0300u, 0x1EB1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0103u, 0x0301u, 0x1EAFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0103u, 0x0303u, 0x1EB5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0103u, 0x0309u, 0x1EB3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0112u, 0x0300u, 0x1E14u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0112u, 0x0301u, 0x1E16u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0113u, 0x0300u, 0x1E15u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0113u, 0x0301u, 0x1E17u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x014Cu, 0x0300u, 0x1E50u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x014Cu, 0x0301u, 0x1E52u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x014Du, 0x0300u, 0x1E51u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x014Du, 0x0301u, 0x1E53u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x015Au, 0x0307u, 0x1E64u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x015Bu, 0x0307u, 0x1E65u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0160u, 0x0307u, 0x1E66u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0161u, 0x0307u, 0x1E67u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0168u, 0x0301u, 0x1E78u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0169u, 0x0301u, 0x1E79u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x016Au, 0x0308u, 0x1E7Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x016Bu, 0x0308u, 0x1E7Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x017Fu, 0x0307u, 0x1E9Bu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A0u, 0x0300u, 0x1EDCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A0u, 0x0301u, 0x1EDAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A0u, 0x0303u, 0x1EE0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A0u, 0x0309u, 0x1EDEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A0u, 0x0323u, 0x1EE2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A1u, 0x0300u, 0x1EDDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A1u, 0x0301u, 0x1EDBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A1u, 0x0303u, 0x1EE1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A1u, 0x0309u, 0x1EDFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01A1u, 0x0323u, 0x1EE3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01AFu, 0x0300u, 0x1EEAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01AFu, 0x0301u, 0x1EE8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01AFu, 0x0303u, 0x1EEEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01AFu, 0x0309u, 0x1EECu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01AFu, 0x0323u, 0x1EF0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01B0u, 0x0300u, 0x1EEBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01B0u, 0x0301u, 0x1EE9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01B0u, 0x0303u, 0x1EEFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01B0u, 0x0309u, 0x1EEDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01B0u, 0x0323u, 0x1EF1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01B7u, 0x030Cu, 0x01EEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01EAu, 0x0304u, 0x01ECu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x01EBu, 0x0304u, 0x01EDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0226u, 0x0304u, 0x01E0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0227u, 0x0304u, 0x01E1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0228u, 0x0306u, 0x1E1Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0229u, 0x0306u, 0x1E1Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x022Eu, 0x0304u, 0x0230u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x022Fu, 0x0304u, 0x0231u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0292u, 0x030Cu, 0x01EFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0308u, 0x0301u, 0x0000u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0391u, 0x0300u, 0x1FBAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0391u, 0x0301u, 0x0386u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0391u, 0x0304u, 0x1FB9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0391u, 0x0306u, 0x1FB8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0391u, 0x0313u, 0x1F08u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0391u, 0x0314u, 0x1F09u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0391u, 0x0345u, 0x1FBCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0395u, 0x0300u, 0x1FC8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0395u, 0x0301u, 0x0388u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0395u, 0x0313u, 0x1F18u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0395u, 0x0314u, 0x1F19u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0397u, 0x0300u, 0x1FCAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0397u, 0x0301u, 0x0389u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0397u, 0x0313u, 0x1F28u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0397u, 0x0314u, 0x1F29u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0397u, 0x0345u, 0x1FCCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0399u, 0x0300u, 0x1FDAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0399u, 0x0301u, 0x038Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0399u, 0x0304u, 0x1FD9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0399u, 0x0306u, 0x1FD8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0399u, 0x0308u, 0x03AAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0399u, 0x0313u, 0x1F38u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0399u, 0x0314u, 0x1F39u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x039Fu, 0x0300u, 0x1FF8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x039Fu, 0x0301u, 0x038Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x039Fu, 0x0313u, 0x1F48u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x039Fu, 0x0314u, 0x1F49u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A1u, 0x0314u, 0x1FECu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A5u, 0x0300u, 0x1FEAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A5u, 0x0301u, 0x038Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A5u, 0x0304u, 0x1FE9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A5u, 0x0306u, 0x1FE8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A5u, 0x0308u, 0x03ABu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A5u, 0x0314u, 0x1F59u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A9u, 0x0300u, 0x1FFAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A9u, 0x0301u, 0x038Fu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A9u, 0x0313u, 0x1F68u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A9u, 0x0314u, 0x1F69u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03A9u, 0x0345u, 0x1FFCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03ACu, 0x0345u, 0x1FB4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03AEu, 0x0345u, 0x1FC4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B1u, 0x0300u, 0x1F70u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B1u, 0x0301u, 0x03ACu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B1u, 0x0304u, 0x1FB1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B1u, 0x0306u, 0x1FB0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B1u, 0x0313u, 0x1F00u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B1u, 0x0314u, 0x1F01u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B1u, 0x0342u, 0x1FB6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B1u, 0x0345u, 0x1FB3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B5u, 0x0300u, 0x1F72u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B5u, 0x0301u, 0x03ADu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B5u, 0x0313u, 0x1F10u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B5u, 0x0314u, 0x1F11u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B7u, 0x0300u, 0x1F74u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B7u, 0x0301u, 0x03AEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B7u, 0x0313u, 0x1F20u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B7u, 0x0314u, 0x1F21u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B7u, 0x0342u, 0x1FC6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B7u, 0x0345u, 0x1FC3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B9u, 0x0300u, 0x1F76u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B9u, 0x0301u, 0x03AFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B9u, 0x0304u, 0x1FD1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B9u, 0x0306u, 0x1FD0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B9u, 0x0308u, 0x03CAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B9u, 0x0313u, 0x1F30u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B9u, 0x0314u, 0x1F31u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03B9u, 0x0342u, 0x1FD6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03BFu, 0x0300u, 0x1F78u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03BFu, 0x0301u, 0x03CCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03BFu, 0x0313u, 0x1F40u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03BFu, 0x0314u, 0x1F41u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C1u, 0x0313u, 0x1FE4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C1u, 0x0314u, 0x1FE5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C5u, 0x0300u, 0x1F7Au),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C5u, 0x0301u, 0x03CDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C5u, 0x0304u, 0x1FE1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C5u, 0x0306u, 0x1FE0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C5u, 0x0308u, 0x03CBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C5u, 0x0313u, 0x1F50u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C5u, 0x0314u, 0x1F51u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C5u, 0x0342u, 0x1FE6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C9u, 0x0300u, 0x1F7Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C9u, 0x0301u, 0x03CEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C9u, 0x0313u, 0x1F60u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C9u, 0x0314u, 0x1F61u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C9u, 0x0342u, 0x1FF6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03C9u, 0x0345u, 0x1FF3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03CAu, 0x0300u, 0x1FD2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03CAu, 0x0301u, 0x0390u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03CAu, 0x0342u, 0x1FD7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03CBu, 0x0300u, 0x1FE2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03CBu, 0x0301u, 0x03B0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03CBu, 0x0342u, 0x1FE7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03CEu, 0x0345u, 0x1FF4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03D2u, 0x0301u, 0x03D3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x03D2u, 0x0308u, 0x03D4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0406u, 0x0308u, 0x0407u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0410u, 0x0306u, 0x04D0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0410u, 0x0308u, 0x04D2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0413u, 0x0301u, 0x0403u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0415u, 0x0300u, 0x0400u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0415u, 0x0306u, 0x04D6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0415u, 0x0308u, 0x0401u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0416u, 0x0306u, 0x04C1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0416u, 0x0308u, 0x04DCu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0417u, 0x0308u, 0x04DEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0418u, 0x0300u, 0x040Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0418u, 0x0304u, 0x04E2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0418u, 0x0306u, 0x0419u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0418u, 0x0308u, 0x04E4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x041Au, 0x0301u, 0x040Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x041Eu, 0x0308u, 0x04E6u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0423u, 0x0304u, 0x04EEu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0423u, 0x0306u, 0x040Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0423u, 0x0308u, 0x04F0u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0423u, 0x030Bu, 0x04F2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0427u, 0x0308u, 0x04F4u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x042Bu, 0x0308u, 0x04F8u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x042Du, 0x0308u, 0x04ECu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0430u, 0x0306u, 0x04D1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0430u, 0x0308u, 0x04D3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0433u, 0x0301u, 0x0453u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0435u, 0x0300u, 0x0450u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0435u, 0x0306u, 0x04D7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0435u, 0x0308u, 0x0451u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0436u, 0x0306u, 0x04C2u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0436u, 0x0308u, 0x04DDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0437u, 0x0308u, 0x04DFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0438u, 0x0300u, 0x045Du),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0438u, 0x0304u, 0x04E3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0438u, 0x0306u, 0x0439u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0438u, 0x0308u, 0x04E5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x043Au, 0x0301u, 0x045Cu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x043Eu, 0x0308u, 0x04E7u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0443u, 0x0304u, 0x04EFu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0443u, 0x0306u, 0x045Eu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0443u, 0x0308u, 0x04F1u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0443u, 0x030Bu, 0x04F3u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0447u, 0x0308u, 0x04F5u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x044Bu, 0x0308u, 0x04F9u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x044Du, 0x0308u, 0x04EDu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0456u, 0x0308u, 0x0457u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0474u, 0x030Fu, 0x0476u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x0475u, 0x030Fu, 0x0477u),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x04D8u, 0x0308u, 0x04DAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x04D9u, 0x0308u, 0x04DBu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x04E8u, 0x0308u, 0x04EAu),\n+   HB_CODEPOINT_ENCODE3_11_7_14 (0x04E9u, 0x0308u, 0x04EBu),\n+};\n+static const uint64_t\n+_hb_ucd_dm2_u64_map[388] =\n+{\n+     HB_CODEPOINT_ENCODE3 (0x05D0u, 0x05B7u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05D0u, 0x05B8u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05D0u, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05D1u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05D1u, 0x05BFu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05D2u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05D3u, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05D4u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05D5u, 0x05B9u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05D5u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05D6u, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05D8u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05D9u, 0x05B4u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05D9u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05DAu, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05DBu, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05DBu, 0x05BFu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05DCu, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05DEu, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05E0u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05E1u, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05E3u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05E4u, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05E4u, 0x05BFu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05E6u, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05E7u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05E8u, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05E9u, 0x05BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05E9u, 0x05C1u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05E9u, 0x05C2u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x05EAu, 0x05BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x05F2u, 0x05B7u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0627u, 0x0653u, 0x0622u),   HB_CODEPOINT_ENCODE3 (0x0627u, 0x0654u, 0x0623u),\n+     HB_CODEPOINT_ENCODE3 (0x0627u, 0x0655u, 0x0625u),   HB_CODEPOINT_ENCODE3 (0x0648u, 0x0654u, 0x0624u),\n+     HB_CODEPOINT_ENCODE3 (0x064Au, 0x0654u, 0x0626u),   HB_CODEPOINT_ENCODE3 (0x06C1u, 0x0654u, 0x06C2u),\n+     HB_CODEPOINT_ENCODE3 (0x06D2u, 0x0654u, 0x06D3u),   HB_CODEPOINT_ENCODE3 (0x06D5u, 0x0654u, 0x06C0u),\n+     HB_CODEPOINT_ENCODE3 (0x0915u, 0x093Cu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0916u, 0x093Cu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0917u, 0x093Cu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x091Cu, 0x093Cu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0921u, 0x093Cu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0922u, 0x093Cu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0928u, 0x093Cu, 0x0929u),   HB_CODEPOINT_ENCODE3 (0x092Bu, 0x093Cu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x092Fu, 0x093Cu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0930u, 0x093Cu, 0x0931u),\n+     HB_CODEPOINT_ENCODE3 (0x0933u, 0x093Cu, 0x0934u),   HB_CODEPOINT_ENCODE3 (0x09A1u, 0x09BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x09A2u, 0x09BCu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x09AFu, 0x09BCu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x09C7u, 0x09BEu, 0x09CBu),   HB_CODEPOINT_ENCODE3 (0x09C7u, 0x09D7u, 0x09CCu),\n+     HB_CODEPOINT_ENCODE3 (0x0A16u, 0x0A3Cu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0A17u, 0x0A3Cu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0A1Cu, 0x0A3Cu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0A2Bu, 0x0A3Cu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0A32u, 0x0A3Cu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0A38u, 0x0A3Cu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0B21u, 0x0B3Cu, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0B22u, 0x0B3Cu, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0B47u, 0x0B3Eu, 0x0B4Bu),   HB_CODEPOINT_ENCODE3 (0x0B47u, 0x0B56u, 0x0B48u),\n+     HB_CODEPOINT_ENCODE3 (0x0B47u, 0x0B57u, 0x0B4Cu),   HB_CODEPOINT_ENCODE3 (0x0B92u, 0x0BD7u, 0x0B94u),\n+     HB_CODEPOINT_ENCODE3 (0x0BC6u, 0x0BBEu, 0x0BCAu),   HB_CODEPOINT_ENCODE3 (0x0BC6u, 0x0BD7u, 0x0BCCu),\n+     HB_CODEPOINT_ENCODE3 (0x0BC7u, 0x0BBEu, 0x0BCBu),   HB_CODEPOINT_ENCODE3 (0x0C46u, 0x0C56u, 0x0C48u),\n+     HB_CODEPOINT_ENCODE3 (0x0CBFu, 0x0CD5u, 0x0CC0u),   HB_CODEPOINT_ENCODE3 (0x0CC6u, 0x0CC2u, 0x0CCAu),\n+     HB_CODEPOINT_ENCODE3 (0x0CC6u, 0x0CD5u, 0x0CC7u),   HB_CODEPOINT_ENCODE3 (0x0CC6u, 0x0CD6u, 0x0CC8u),\n+     HB_CODEPOINT_ENCODE3 (0x0CCAu, 0x0CD5u, 0x0CCBu),   HB_CODEPOINT_ENCODE3 (0x0D46u, 0x0D3Eu, 0x0D4Au),\n+     HB_CODEPOINT_ENCODE3 (0x0D46u, 0x0D57u, 0x0D4Cu),   HB_CODEPOINT_ENCODE3 (0x0D47u, 0x0D3Eu, 0x0D4Bu),\n+     HB_CODEPOINT_ENCODE3 (0x0DD9u, 0x0DCAu, 0x0DDAu),   HB_CODEPOINT_ENCODE3 (0x0DD9u, 0x0DCFu, 0x0DDCu),\n+     HB_CODEPOINT_ENCODE3 (0x0DD9u, 0x0DDFu, 0x0DDEu),   HB_CODEPOINT_ENCODE3 (0x0DDCu, 0x0DCAu, 0x0DDDu),\n+     HB_CODEPOINT_ENCODE3 (0x0F40u, 0x0FB5u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0F42u, 0x0FB7u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0F4Cu, 0x0FB7u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0F51u, 0x0FB7u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0F56u, 0x0FB7u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0F5Bu, 0x0FB7u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0F71u, 0x0F72u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0F71u, 0x0F74u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0F71u, 0x0F80u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0F90u, 0x0FB5u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0F92u, 0x0FB7u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0F9Cu, 0x0FB7u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0FA1u, 0x0FB7u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0FA6u, 0x0FB7u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0FABu, 0x0FB7u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x0FB2u, 0x0F80u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x0FB3u, 0x0F80u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0x1025u, 0x102Eu, 0x1026u),\n+     HB_CODEPOINT_ENCODE3 (0x1B05u, 0x1B35u, 0x1B06u),   HB_CODEPOINT_ENCODE3 (0x1B07u, 0x1B35u, 0x1B08u),\n+     HB_CODEPOINT_ENCODE3 (0x1B09u, 0x1B35u, 0x1B0Au),   HB_CODEPOINT_ENCODE3 (0x1B0Bu, 0x1B35u, 0x1B0Cu),\n+     HB_CODEPOINT_ENCODE3 (0x1B0Du, 0x1B35u, 0x1B0Eu),   HB_CODEPOINT_ENCODE3 (0x1B11u, 0x1B35u, 0x1B12u),\n+     HB_CODEPOINT_ENCODE3 (0x1B3Au, 0x1B35u, 0x1B3Bu),   HB_CODEPOINT_ENCODE3 (0x1B3Cu, 0x1B35u, 0x1B3Du),\n+     HB_CODEPOINT_ENCODE3 (0x1B3Eu, 0x1B35u, 0x1B40u),   HB_CODEPOINT_ENCODE3 (0x1B3Fu, 0x1B35u, 0x1B41u),\n+     HB_CODEPOINT_ENCODE3 (0x1B42u, 0x1B35u, 0x1B43u),   HB_CODEPOINT_ENCODE3 (0x1E36u, 0x0304u, 0x1E38u),\n+     HB_CODEPOINT_ENCODE3 (0x1E37u, 0x0304u, 0x1E39u),   HB_CODEPOINT_ENCODE3 (0x1E5Au, 0x0304u, 0x1E5Cu),\n+     HB_CODEPOINT_ENCODE3 (0x1E5Bu, 0x0304u, 0x1E5Du),   HB_CODEPOINT_ENCODE3 (0x1E62u, 0x0307u, 0x1E68u),\n+     HB_CODEPOINT_ENCODE3 (0x1E63u, 0x0307u, 0x1E69u),   HB_CODEPOINT_ENCODE3 (0x1EA0u, 0x0302u, 0x1EACu),\n+     HB_CODEPOINT_ENCODE3 (0x1EA0u, 0x0306u, 0x1EB6u),   HB_CODEPOINT_ENCODE3 (0x1EA1u, 0x0302u, 0x1EADu),\n+     HB_CODEPOINT_ENCODE3 (0x1EA1u, 0x0306u, 0x1EB7u),   HB_CODEPOINT_ENCODE3 (0x1EB8u, 0x0302u, 0x1EC6u),\n+     HB_CODEPOINT_ENCODE3 (0x1EB9u, 0x0302u, 0x1EC7u),   HB_CODEPOINT_ENCODE3 (0x1ECCu, 0x0302u, 0x1ED8u),\n+     HB_CODEPOINT_ENCODE3 (0x1ECDu, 0x0302u, 0x1ED9u),   HB_CODEPOINT_ENCODE3 (0x1F00u, 0x0300u, 0x1F02u),\n+     HB_CODEPOINT_ENCODE3 (0x1F00u, 0x0301u, 0x1F04u),   HB_CODEPOINT_ENCODE3 (0x1F00u, 0x0342u, 0x1F06u),\n+     HB_CODEPOINT_ENCODE3 (0x1F00u, 0x0345u, 0x1F80u),   HB_CODEPOINT_ENCODE3 (0x1F01u, 0x0300u, 0x1F03u),\n+     HB_CODEPOINT_ENCODE3 (0x1F01u, 0x0301u, 0x1F05u),   HB_CODEPOINT_ENCODE3 (0x1F01u, 0x0342u, 0x1F07u),\n+     HB_CODEPOINT_ENCODE3 (0x1F01u, 0x0345u, 0x1F81u),   HB_CODEPOINT_ENCODE3 (0x1F02u, 0x0345u, 0x1F82u),\n+     HB_CODEPOINT_ENCODE3 (0x1F03u, 0x0345u, 0x1F83u),   HB_CODEPOINT_ENCODE3 (0x1F04u, 0x0345u, 0x1F84u),\n+     HB_CODEPOINT_ENCODE3 (0x1F05u, 0x0345u, 0x1F85u),   HB_CODEPOINT_ENCODE3 (0x1F06u, 0x0345u, 0x1F86u),\n+     HB_CODEPOINT_ENCODE3 (0x1F07u, 0x0345u, 0x1F87u),   HB_CODEPOINT_ENCODE3 (0x1F08u, 0x0300u, 0x1F0Au),\n+     HB_CODEPOINT_ENCODE3 (0x1F08u, 0x0301u, 0x1F0Cu),   HB_CODEPOINT_ENCODE3 (0x1F08u, 0x0342u, 0x1F0Eu),\n+     HB_CODEPOINT_ENCODE3 (0x1F08u, 0x0345u, 0x1F88u),   HB_CODEPOINT_ENCODE3 (0x1F09u, 0x0300u, 0x1F0Bu),\n+     HB_CODEPOINT_ENCODE3 (0x1F09u, 0x0301u, 0x1F0Du),   HB_CODEPOINT_ENCODE3 (0x1F09u, 0x0342u, 0x1F0Fu),\n+     HB_CODEPOINT_ENCODE3 (0x1F09u, 0x0345u, 0x1F89u),   HB_CODEPOINT_ENCODE3 (0x1F0Au, 0x0345u, 0x1F8Au),\n+     HB_CODEPOINT_ENCODE3 (0x1F0Bu, 0x0345u, 0x1F8Bu),   HB_CODEPOINT_ENCODE3 (0x1F0Cu, 0x0345u, 0x1F8Cu),\n+     HB_CODEPOINT_ENCODE3 (0x1F0Du, 0x0345u, 0x1F8Du),   HB_CODEPOINT_ENCODE3 (0x1F0Eu, 0x0345u, 0x1F8Eu),\n+     HB_CODEPOINT_ENCODE3 (0x1F0Fu, 0x0345u, 0x1F8Fu),   HB_CODEPOINT_ENCODE3 (0x1F10u, 0x0300u, 0x1F12u),\n+     HB_CODEPOINT_ENCODE3 (0x1F10u, 0x0301u, 0x1F14u),   HB_CODEPOINT_ENCODE3 (0x1F11u, 0x0300u, 0x1F13u),\n+     HB_CODEPOINT_ENCODE3 (0x1F11u, 0x0301u, 0x1F15u),   HB_CODEPOINT_ENCODE3 (0x1F18u, 0x0300u, 0x1F1Au),\n+     HB_CODEPOINT_ENCODE3 (0x1F18u, 0x0301u, 0x1F1Cu),   HB_CODEPOINT_ENCODE3 (0x1F19u, 0x0300u, 0x1F1Bu),\n+     HB_CODEPOINT_ENCODE3 (0x1F19u, 0x0301u, 0x1F1Du),   HB_CODEPOINT_ENCODE3 (0x1F20u, 0x0300u, 0x1F22u),\n+     HB_CODEPOINT_ENCODE3 (0x1F20u, 0x0301u, 0x1F24u),   HB_CODEPOINT_ENCODE3 (0x1F20u, 0x0342u, 0x1F26u),\n+     HB_CODEPOINT_ENCODE3 (0x1F20u, 0x0345u, 0x1F90u),   HB_CODEPOINT_ENCODE3 (0x1F21u, 0x0300u, 0x1F23u),\n+     HB_CODEPOINT_ENCODE3 (0x1F21u, 0x0301u, 0x1F25u),   HB_CODEPOINT_ENCODE3 (0x1F21u, 0x0342u, 0x1F27u),\n+     HB_CODEPOINT_ENCODE3 (0x1F21u, 0x0345u, 0x1F91u),   HB_CODEPOINT_ENCODE3 (0x1F22u, 0x0345u, 0x1F92u),\n+     HB_CODEPOINT_ENCODE3 (0x1F23u, 0x0345u, 0x1F93u),   HB_CODEPOINT_ENCODE3 (0x1F24u, 0x0345u, 0x1F94u),\n+     HB_CODEPOINT_ENCODE3 (0x1F25u, 0x0345u, 0x1F95u),   HB_CODEPOINT_ENCODE3 (0x1F26u, 0x0345u, 0x1F96u),\n+     HB_CODEPOINT_ENCODE3 (0x1F27u, 0x0345u, 0x1F97u),   HB_CODEPOINT_ENCODE3 (0x1F28u, 0x0300u, 0x1F2Au),\n+     HB_CODEPOINT_ENCODE3 (0x1F28u, 0x0301u, 0x1F2Cu),   HB_CODEPOINT_ENCODE3 (0x1F28u, 0x0342u, 0x1F2Eu),\n+     HB_CODEPOINT_ENCODE3 (0x1F28u, 0x0345u, 0x1F98u),   HB_CODEPOINT_ENCODE3 (0x1F29u, 0x0300u, 0x1F2Bu),\n+     HB_CODEPOINT_ENCODE3 (0x1F29u, 0x0301u, 0x1F2Du),   HB_CODEPOINT_ENCODE3 (0x1F29u, 0x0342u, 0x1F2Fu),\n+     HB_CODEPOINT_ENCODE3 (0x1F29u, 0x0345u, 0x1F99u),   HB_CODEPOINT_ENCODE3 (0x1F2Au, 0x0345u, 0x1F9Au),\n+     HB_CODEPOINT_ENCODE3 (0x1F2Bu, 0x0345u, 0x1F9Bu),   HB_CODEPOINT_ENCODE3 (0x1F2Cu, 0x0345u, 0x1F9Cu),\n+     HB_CODEPOINT_ENCODE3 (0x1F2Du, 0x0345u, 0x1F9Du),   HB_CODEPOINT_ENCODE3 (0x1F2Eu, 0x0345u, 0x1F9Eu),\n+     HB_CODEPOINT_ENCODE3 (0x1F2Fu, 0x0345u, 0x1F9Fu),   HB_CODEPOINT_ENCODE3 (0x1F30u, 0x0300u, 0x1F32u),\n+     HB_CODEPOINT_ENCODE3 (0x1F30u, 0x0301u, 0x1F34u),   HB_CODEPOINT_ENCODE3 (0x1F30u, 0x0342u, 0x1F36u),\n+     HB_CODEPOINT_ENCODE3 (0x1F31u, 0x0300u, 0x1F33u),   HB_CODEPOINT_ENCODE3 (0x1F31u, 0x0301u, 0x1F35u),\n+     HB_CODEPOINT_ENCODE3 (0x1F31u, 0x0342u, 0x1F37u),   HB_CODEPOINT_ENCODE3 (0x1F38u, 0x0300u, 0x1F3Au),\n+     HB_CODEPOINT_ENCODE3 (0x1F38u, 0x0301u, 0x1F3Cu),   HB_CODEPOINT_ENCODE3 (0x1F38u, 0x0342u, 0x1F3Eu),\n+     HB_CODEPOINT_ENCODE3 (0x1F39u, 0x0300u, 0x1F3Bu),   HB_CODEPOINT_ENCODE3 (0x1F39u, 0x0301u, 0x1F3Du),\n+     HB_CODEPOINT_ENCODE3 (0x1F39u, 0x0342u, 0x1F3Fu),   HB_CODEPOINT_ENCODE3 (0x1F40u, 0x0300u, 0x1F42u),\n+     HB_CODEPOINT_ENCODE3 (0x1F40u, 0x0301u, 0x1F44u),   HB_CODEPOINT_ENCODE3 (0x1F41u, 0x0300u, 0x1F43u),\n+     HB_CODEPOINT_ENCODE3 (0x1F41u, 0x0301u, 0x1F45u),   HB_CODEPOINT_ENCODE3 (0x1F48u, 0x0300u, 0x1F4Au),\n+     HB_CODEPOINT_ENCODE3 (0x1F48u, 0x0301u, 0x1F4Cu),   HB_CODEPOINT_ENCODE3 (0x1F49u, 0x0300u, 0x1F4Bu),\n+     HB_CODEPOINT_ENCODE3 (0x1F49u, 0x0301u, 0x1F4Du),   HB_CODEPOINT_ENCODE3 (0x1F50u, 0x0300u, 0x1F52u),\n+     HB_CODEPOINT_ENCODE3 (0x1F50u, 0x0301u, 0x1F54u),   HB_CODEPOINT_ENCODE3 (0x1F50u, 0x0342u, 0x1F56u),\n+     HB_CODEPOINT_ENCODE3 (0x1F51u, 0x0300u, 0x1F53u),   HB_CODEPOINT_ENCODE3 (0x1F51u, 0x0301u, 0x1F55u),\n+     HB_CODEPOINT_ENCODE3 (0x1F51u, 0x0342u, 0x1F57u),   HB_CODEPOINT_ENCODE3 (0x1F59u, 0x0300u, 0x1F5Bu),\n+     HB_CODEPOINT_ENCODE3 (0x1F59u, 0x0301u, 0x1F5Du),   HB_CODEPOINT_ENCODE3 (0x1F59u, 0x0342u, 0x1F5Fu),\n+     HB_CODEPOINT_ENCODE3 (0x1F60u, 0x0300u, 0x1F62u),   HB_CODEPOINT_ENCODE3 (0x1F60u, 0x0301u, 0x1F64u),\n+     HB_CODEPOINT_ENCODE3 (0x1F60u, 0x0342u, 0x1F66u),   HB_CODEPOINT_ENCODE3 (0x1F60u, 0x0345u, 0x1FA0u),\n+     HB_CODEPOINT_ENCODE3 (0x1F61u, 0x0300u, 0x1F63u),   HB_CODEPOINT_ENCODE3 (0x1F61u, 0x0301u, 0x1F65u),\n+     HB_CODEPOINT_ENCODE3 (0x1F61u, 0x0342u, 0x1F67u),   HB_CODEPOINT_ENCODE3 (0x1F61u, 0x0345u, 0x1FA1u),\n+     HB_CODEPOINT_ENCODE3 (0x1F62u, 0x0345u, 0x1FA2u),   HB_CODEPOINT_ENCODE3 (0x1F63u, 0x0345u, 0x1FA3u),\n+     HB_CODEPOINT_ENCODE3 (0x1F64u, 0x0345u, 0x1FA4u),   HB_CODEPOINT_ENCODE3 (0x1F65u, 0x0345u, 0x1FA5u),\n+     HB_CODEPOINT_ENCODE3 (0x1F66u, 0x0345u, 0x1FA6u),   HB_CODEPOINT_ENCODE3 (0x1F67u, 0x0345u, 0x1FA7u),\n+     HB_CODEPOINT_ENCODE3 (0x1F68u, 0x0300u, 0x1F6Au),   HB_CODEPOINT_ENCODE3 (0x1F68u, 0x0301u, 0x1F6Cu),\n+     HB_CODEPOINT_ENCODE3 (0x1F68u, 0x0342u, 0x1F6Eu),   HB_CODEPOINT_ENCODE3 (0x1F68u, 0x0345u, 0x1FA8u),\n+     HB_CODEPOINT_ENCODE3 (0x1F69u, 0x0300u, 0x1F6Bu),   HB_CODEPOINT_ENCODE3 (0x1F69u, 0x0301u, 0x1F6Du),\n+     HB_CODEPOINT_ENCODE3 (0x1F69u, 0x0342u, 0x1F6Fu),   HB_CODEPOINT_ENCODE3 (0x1F69u, 0x0345u, 0x1FA9u),\n+     HB_CODEPOINT_ENCODE3 (0x1F6Au, 0x0345u, 0x1FAAu),   HB_CODEPOINT_ENCODE3 (0x1F6Bu, 0x0345u, 0x1FABu),\n+     HB_CODEPOINT_ENCODE3 (0x1F6Cu, 0x0345u, 0x1FACu),   HB_CODEPOINT_ENCODE3 (0x1F6Du, 0x0345u, 0x1FADu),\n+     HB_CODEPOINT_ENCODE3 (0x1F6Eu, 0x0345u, 0x1FAEu),   HB_CODEPOINT_ENCODE3 (0x1F6Fu, 0x0345u, 0x1FAFu),\n+     HB_CODEPOINT_ENCODE3 (0x1F70u, 0x0345u, 0x1FB2u),   HB_CODEPOINT_ENCODE3 (0x1F74u, 0x0345u, 0x1FC2u),\n+     HB_CODEPOINT_ENCODE3 (0x1F7Cu, 0x0345u, 0x1FF2u),   HB_CODEPOINT_ENCODE3 (0x1FB6u, 0x0345u, 0x1FB7u),\n+     HB_CODEPOINT_ENCODE3 (0x1FBFu, 0x0300u, 0x1FCDu),   HB_CODEPOINT_ENCODE3 (0x1FBFu, 0x0301u, 0x1FCEu),\n+     HB_CODEPOINT_ENCODE3 (0x1FBFu, 0x0342u, 0x1FCFu),   HB_CODEPOINT_ENCODE3 (0x1FC6u, 0x0345u, 0x1FC7u),\n+     HB_CODEPOINT_ENCODE3 (0x1FF6u, 0x0345u, 0x1FF7u),   HB_CODEPOINT_ENCODE3 (0x1FFEu, 0x0300u, 0x1FDDu),\n+     HB_CODEPOINT_ENCODE3 (0x1FFEu, 0x0301u, 0x1FDEu),   HB_CODEPOINT_ENCODE3 (0x1FFEu, 0x0342u, 0x1FDFu),\n+     HB_CODEPOINT_ENCODE3 (0x2190u, 0x0338u, 0x219Au),   HB_CODEPOINT_ENCODE3 (0x2192u, 0x0338u, 0x219Bu),\n+     HB_CODEPOINT_ENCODE3 (0x2194u, 0x0338u, 0x21AEu),   HB_CODEPOINT_ENCODE3 (0x21D0u, 0x0338u, 0x21CDu),\n+     HB_CODEPOINT_ENCODE3 (0x21D2u, 0x0338u, 0x21CFu),   HB_CODEPOINT_ENCODE3 (0x21D4u, 0x0338u, 0x21CEu),\n+     HB_CODEPOINT_ENCODE3 (0x2203u, 0x0338u, 0x2204u),   HB_CODEPOINT_ENCODE3 (0x2208u, 0x0338u, 0x2209u),\n+     HB_CODEPOINT_ENCODE3 (0x220Bu, 0x0338u, 0x220Cu),   HB_CODEPOINT_ENCODE3 (0x2223u, 0x0338u, 0x2224u),\n+     HB_CODEPOINT_ENCODE3 (0x2225u, 0x0338u, 0x2226u),   HB_CODEPOINT_ENCODE3 (0x223Cu, 0x0338u, 0x2241u),\n+     HB_CODEPOINT_ENCODE3 (0x2243u, 0x0338u, 0x2244u),   HB_CODEPOINT_ENCODE3 (0x2245u, 0x0338u, 0x2247u),\n+     HB_CODEPOINT_ENCODE3 (0x2248u, 0x0338u, 0x2249u),   HB_CODEPOINT_ENCODE3 (0x224Du, 0x0338u, 0x226Du),\n+     HB_CODEPOINT_ENCODE3 (0x2261u, 0x0338u, 0x2262u),   HB_CODEPOINT_ENCODE3 (0x2264u, 0x0338u, 0x2270u),\n+     HB_CODEPOINT_ENCODE3 (0x2265u, 0x0338u, 0x2271u),   HB_CODEPOINT_ENCODE3 (0x2272u, 0x0338u, 0x2274u),\n+     HB_CODEPOINT_ENCODE3 (0x2273u, 0x0338u, 0x2275u),   HB_CODEPOINT_ENCODE3 (0x2276u, 0x0338u, 0x2278u),\n+     HB_CODEPOINT_ENCODE3 (0x2277u, 0x0338u, 0x2279u),   HB_CODEPOINT_ENCODE3 (0x227Au, 0x0338u, 0x2280u),\n+     HB_CODEPOINT_ENCODE3 (0x227Bu, 0x0338u, 0x2281u),   HB_CODEPOINT_ENCODE3 (0x227Cu, 0x0338u, 0x22E0u),\n+     HB_CODEPOINT_ENCODE3 (0x227Du, 0x0338u, 0x22E1u),   HB_CODEPOINT_ENCODE3 (0x2282u, 0x0338u, 0x2284u),\n+     HB_CODEPOINT_ENCODE3 (0x2283u, 0x0338u, 0x2285u),   HB_CODEPOINT_ENCODE3 (0x2286u, 0x0338u, 0x2288u),\n+     HB_CODEPOINT_ENCODE3 (0x2287u, 0x0338u, 0x2289u),   HB_CODEPOINT_ENCODE3 (0x2291u, 0x0338u, 0x22E2u),\n+     HB_CODEPOINT_ENCODE3 (0x2292u, 0x0338u, 0x22E3u),   HB_CODEPOINT_ENCODE3 (0x22A2u, 0x0338u, 0x22ACu),\n+     HB_CODEPOINT_ENCODE3 (0x22A8u, 0x0338u, 0x22ADu),   HB_CODEPOINT_ENCODE3 (0x22A9u, 0x0338u, 0x22AEu),\n+     HB_CODEPOINT_ENCODE3 (0x22ABu, 0x0338u, 0x22AFu),   HB_CODEPOINT_ENCODE3 (0x22B2u, 0x0338u, 0x22EAu),\n+     HB_CODEPOINT_ENCODE3 (0x22B3u, 0x0338u, 0x22EBu),   HB_CODEPOINT_ENCODE3 (0x22B4u, 0x0338u, 0x22ECu),\n+     HB_CODEPOINT_ENCODE3 (0x22B5u, 0x0338u, 0x22EDu),   HB_CODEPOINT_ENCODE3 (0x2ADDu, 0x0338u, 0x0000u),\n+     HB_CODEPOINT_ENCODE3 (0x3046u, 0x3099u, 0x3094u),   HB_CODEPOINT_ENCODE3 (0x304Bu, 0x3099u, 0x304Cu),\n+     HB_CODEPOINT_ENCODE3 (0x304Du, 0x3099u, 0x304Eu),   HB_CODEPOINT_ENCODE3 (0x304Fu, 0x3099u, 0x3050u),\n+     HB_CODEPOINT_ENCODE3 (0x3051u, 0x3099u, 0x3052u),   HB_CODEPOINT_ENCODE3 (0x3053u, 0x3099u, 0x3054u),\n+     HB_CODEPOINT_ENCODE3 (0x3055u, 0x3099u, 0x3056u),   HB_CODEPOINT_ENCODE3 (0x3057u, 0x3099u, 0x3058u),\n+     HB_CODEPOINT_ENCODE3 (0x3059u, 0x3099u, 0x305Au),   HB_CODEPOINT_ENCODE3 (0x305Bu, 0x3099u, 0x305Cu),\n+     HB_CODEPOINT_ENCODE3 (0x305Du, 0x3099u, 0x305Eu),   HB_CODEPOINT_ENCODE3 (0x305Fu, 0x3099u, 0x3060u),\n+     HB_CODEPOINT_ENCODE3 (0x3061u, 0x3099u, 0x3062u),   HB_CODEPOINT_ENCODE3 (0x3064u, 0x3099u, 0x3065u),\n+     HB_CODEPOINT_ENCODE3 (0x3066u, 0x3099u, 0x3067u),   HB_CODEPOINT_ENCODE3 (0x3068u, 0x3099u, 0x3069u),\n+     HB_CODEPOINT_ENCODE3 (0x306Fu, 0x3099u, 0x3070u),   HB_CODEPOINT_ENCODE3 (0x306Fu, 0x309Au, 0x3071u),\n+     HB_CODEPOINT_ENCODE3 (0x3072u, 0x3099u, 0x3073u),   HB_CODEPOINT_ENCODE3 (0x3072u, 0x309Au, 0x3074u),\n+     HB_CODEPOINT_ENCODE3 (0x3075u, 0x3099u, 0x3076u),   HB_CODEPOINT_ENCODE3 (0x3075u, 0x309Au, 0x3077u),\n+     HB_CODEPOINT_ENCODE3 (0x3078u, 0x3099u, 0x3079u),   HB_CODEPOINT_ENCODE3 (0x3078u, 0x309Au, 0x307Au),\n+     HB_CODEPOINT_ENCODE3 (0x307Bu, 0x3099u, 0x307Cu),   HB_CODEPOINT_ENCODE3 (0x307Bu, 0x309Au, 0x307Du),\n+     HB_CODEPOINT_ENCODE3 (0x309Du, 0x3099u, 0x309Eu),   HB_CODEPOINT_ENCODE3 (0x30A6u, 0x3099u, 0x30F4u),\n+     HB_CODEPOINT_ENCODE3 (0x30ABu, 0x3099u, 0x30ACu),   HB_CODEPOINT_ENCODE3 (0x30ADu, 0x3099u, 0x30AEu),\n+     HB_CODEPOINT_ENCODE3 (0x30AFu, 0x3099u, 0x30B0u),   HB_CODEPOINT_ENCODE3 (0x30B1u, 0x3099u, 0x30B2u),\n+     HB_CODEPOINT_ENCODE3 (0x30B3u, 0x3099u, 0x30B4u),   HB_CODEPOINT_ENCODE3 (0x30B5u, 0x3099u, 0x30B6u),\n+     HB_CODEPOINT_ENCODE3 (0x30B7u, 0x3099u, 0x30B8u),   HB_CODEPOINT_ENCODE3 (0x30B9u, 0x3099u, 0x30BAu),\n+     HB_CODEPOINT_ENCODE3 (0x30BBu, 0x3099u, 0x30BCu),   HB_CODEPOINT_ENCODE3 (0x30BDu, 0x3099u, 0x30BEu),\n+     HB_CODEPOINT_ENCODE3 (0x30BFu, 0x3099u, 0x30C0u),   HB_CODEPOINT_ENCODE3 (0x30C1u, 0x3099u, 0x30C2u),\n+     HB_CODEPOINT_ENCODE3 (0x30C4u, 0x3099u, 0x30C5u),   HB_CODEPOINT_ENCODE3 (0x30C6u, 0x3099u, 0x30C7u),\n+     HB_CODEPOINT_ENCODE3 (0x30C8u, 0x3099u, 0x30C9u),   HB_CODEPOINT_ENCODE3 (0x30CFu, 0x3099u, 0x30D0u),\n+     HB_CODEPOINT_ENCODE3 (0x30CFu, 0x309Au, 0x30D1u),   HB_CODEPOINT_ENCODE3 (0x30D2u, 0x3099u, 0x30D3u),\n+     HB_CODEPOINT_ENCODE3 (0x30D2u, 0x309Au, 0x30D4u),   HB_CODEPOINT_ENCODE3 (0x30D5u, 0x3099u, 0x30D6u),\n+     HB_CODEPOINT_ENCODE3 (0x30D5u, 0x309Au, 0x30D7u),   HB_CODEPOINT_ENCODE3 (0x30D8u, 0x3099u, 0x30D9u),\n+     HB_CODEPOINT_ENCODE3 (0x30D8u, 0x309Au, 0x30DAu),   HB_CODEPOINT_ENCODE3 (0x30DBu, 0x3099u, 0x30DCu),\n+     HB_CODEPOINT_ENCODE3 (0x30DBu, 0x309Au, 0x30DDu),   HB_CODEPOINT_ENCODE3 (0x30EFu, 0x3099u, 0x30F7u),\n+     HB_CODEPOINT_ENCODE3 (0x30F0u, 0x3099u, 0x30F8u),   HB_CODEPOINT_ENCODE3 (0x30F1u, 0x3099u, 0x30F9u),\n+     HB_CODEPOINT_ENCODE3 (0x30F2u, 0x3099u, 0x30FAu),   HB_CODEPOINT_ENCODE3 (0x30FDu, 0x3099u, 0x30FEu),\n+     HB_CODEPOINT_ENCODE3 (0xFB49u, 0x05C1u, 0x0000u),   HB_CODEPOINT_ENCODE3 (0xFB49u, 0x05C2u, 0x0000u),\n+  HB_CODEPOINT_ENCODE3 (0x11099u, 0x110BAu, 0x1109Au),HB_CODEPOINT_ENCODE3 (0x1109Bu, 0x110BAu, 0x1109Cu),\n+  HB_CODEPOINT_ENCODE3 (0x110A5u, 0x110BAu, 0x110ABu),HB_CODEPOINT_ENCODE3 (0x11131u, 0x11127u, 0x1112Eu),\n+  HB_CODEPOINT_ENCODE3 (0x11132u, 0x11127u, 0x1112Fu),HB_CODEPOINT_ENCODE3 (0x11347u, 0x1133Eu, 0x1134Bu),\n+  HB_CODEPOINT_ENCODE3 (0x11347u, 0x11357u, 0x1134Cu),HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114B0u, 0x114BCu),\n+  HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114BAu, 0x114BBu),HB_CODEPOINT_ENCODE3 (0x114B9u, 0x114BDu, 0x114BEu),\n+  HB_CODEPOINT_ENCODE3 (0x115B8u, 0x115AFu, 0x115BAu),HB_CODEPOINT_ENCODE3 (0x115B9u, 0x115AFu, 0x115BBu),\n+  HB_CODEPOINT_ENCODE3 (0x11935u, 0x11930u, 0x11938u), HB_CODEPOINT_ENCODE3 (0x1D157u, 0x1D165u, 0x0000u),\n+   HB_CODEPOINT_ENCODE3 (0x1D158u, 0x1D165u, 0x0000u), HB_CODEPOINT_ENCODE3 (0x1D15Fu, 0x1D16Eu, 0x0000u),\n+   HB_CODEPOINT_ENCODE3 (0x1D15Fu, 0x1D16Fu, 0x0000u), HB_CODEPOINT_ENCODE3 (0x1D15Fu, 0x1D170u, 0x0000u),\n+   HB_CODEPOINT_ENCODE3 (0x1D15Fu, 0x1D171u, 0x0000u), HB_CODEPOINT_ENCODE3 (0x1D15Fu, 0x1D172u, 0x0000u),\n+   HB_CODEPOINT_ENCODE3 (0x1D1B9u, 0x1D165u, 0x0000u), HB_CODEPOINT_ENCODE3 (0x1D1BAu, 0x1D165u, 0x0000u),\n+   HB_CODEPOINT_ENCODE3 (0x1D1BBu, 0x1D16Eu, 0x0000u), HB_CODEPOINT_ENCODE3 (0x1D1BBu, 0x1D16Fu, 0x0000u),\n+   HB_CODEPOINT_ENCODE3 (0x1D1BCu, 0x1D16Eu, 0x0000u), HB_CODEPOINT_ENCODE3 (0x1D1BCu, 0x1D16Fu, 0x0000u),\n+};\n+\n+#ifndef HB_OPTIMIZE_SIZE\n+\n+static const uint8_t\n+_hb_ucd_u8[32480] =\n+{\n+    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n+   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28,\n+   29, 26, 30, 31, 32, 33, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 34, 35, 35, 35, 35,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 38, 39, 40,\n+   41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\n+   26, 57, 58, 59, 59, 59, 59, 59, 26, 26, 60, 59, 59, 59, 59, 59,\n+   59, 59, 26, 61, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 26, 62, 59, 63, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 64, 26, 26, 65, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 66, 67, 59, 59, 59, 59, 68, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 69, 70, 71, 72, 73, 74, 59, 59,\n+   75, 76, 59, 59, 77, 59, 78, 79, 80, 81, 73, 82, 83, 84, 59, 59,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 85, 26, 26, 26, 26, 26, 26, 26, 86, 87, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 88, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 89, 59, 59, 59, 59, 59, 59, 26, 90, 59, 59,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 91, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   92, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 93,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 94,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   29, 21, 21, 21, 23, 21, 21, 21, 22, 18, 21, 25, 21, 17, 21, 21,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 21, 21, 25, 25, 25, 21,\n+   21,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 22, 21, 18, 24, 16,\n+   24,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 22, 25, 18, 25,  0,\n+   29, 21, 23, 23, 23, 23, 26, 21, 24, 26,  7, 20, 25,  1, 26, 24,\n+   26, 25, 15, 15, 24,  5, 21, 21, 24, 15,  7, 19, 15, 15, 15, 21,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9, 25,  9,  9,  9,  9,  9,  9,  9,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5, 25,  5,  5,  5,  5,  5,  5,  5,  5,\n+    9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,\n+    9,  5,  9,  5,  9,  5,  9,  5,  5,  9,  5,  9,  5,  9,  5,  9,\n+    5,  9,  5,  9,  5,  9,  5,  9,  5,  5,  9,  5,  9,  5,  9,  5,\n+    9,  5,  9,  5,  9,  5,  9,  5,  9,  9,  5,  9,  5,  9,  5,  5,\n+    5,  9,  9,  5,  9,  5,  9,  9,  5,  9,  9,  9,  5,  5,  9,  9,\n+    9,  9,  5,  9,  9,  5,  9,  9,  9,  5,  5,  5,  9,  9,  5,  9,\n+    9,  5,  9,  5,  9,  5,  9,  9,  5,  9,  5,  5,  9,  5,  9,  9,\n+    5,  9,  9,  9,  5,  9,  5,  9,  9,  5,  5,  7,  9,  5,  5,  5,\n+    7,  7,  7,  7,  9,  8,  5,  9,  8,  5,  9,  8,  5,  9,  5,  9,\n+    5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  5,  9,  5,\n+    5,  9,  8,  5,  9,  5,  9,  9,  9,  5,  9,  5,  9,  5,  9,  5,\n+    9,  5,  9,  5,  5,  5,  5,  5,  5,  5,  9,  9,  5,  9,  9,  5,\n+    5,  9,  5,  9,  9,  9,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,\n+    5,  5,  5,  5,  7,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n+    6,  6, 24, 24, 24, 24,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n+    6,  6, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+    6,  6,  6,  6,  6, 24, 24, 24, 24, 24, 24, 24,  6, 24,  6, 24,\n+   24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+    9,  5,  9,  5,  6, 24,  9,  5,  2,  2,  6,  5,  5,  5, 21,  9,\n+    2,  2,  2,  2, 24, 24,  9, 21,  9,  9,  9,  2,  9,  2,  9,  9,\n+    5,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  9,\n+    5,  5,  9,  9,  9,  5,  5,  5,  9,  5,  9,  5,  9,  5,  9,  5,\n+    5,  5,  5,  5,  9,  5, 25,  9,  5,  9,  9,  5,  5,  9,  9,  9,\n+    9,  5, 26, 12, 12, 12, 12, 12, 11, 11,  9,  5,  9,  5,  9,  5,\n+    9,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  5,\n+    2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  2,  2,  6, 21, 21, 21, 21, 21, 21,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5, 21, 17,  2,  2, 26, 26, 23,\n+    2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 12,\n+   21, 12, 12, 21, 12, 12, 21, 12,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  7,\n+    7,  7,  7, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    1,  1,  1,  1,  1,  1, 25, 25, 25, 21, 21, 23, 21, 21, 26, 26,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21,  1,  2, 21, 21,\n+    6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 21, 21, 21, 21,  7,  7,\n+   12,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7, 21,  7, 12, 12, 12, 12, 12, 12, 12,  1, 26, 12,\n+   12, 12, 12, 12, 12,  6,  6, 12, 12, 26, 12, 12, 12, 12,  7,  7,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  7,  7,  7, 26, 26,  7,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,  1,\n+    7, 12,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  2,  2,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12,  6,  6, 26, 21, 21, 21,  6,  2,  2, 12, 23, 23,\n+    7,  7,  7,  7,  7,  7, 12, 12, 12, 12,  6, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12,  6, 12, 12, 12,  6, 12, 12, 12, 12, 12,  2,  2,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 12, 12,  2,  2, 21,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 10,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 10, 12,  7, 10, 10,\n+   10, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 10, 10, 12, 10, 10,\n+    7, 12, 12, 12, 12, 12, 12, 12,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7, 12, 12, 21, 21, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   21,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7, 12, 10, 10,  2,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  7,\n+    7,  2,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  7,  7,\n+    7,  2,  7,  2,  2,  2,  7,  7,  7,  7,  2,  2, 12,  7, 10, 10,\n+   10, 12, 12, 12, 12,  2,  2, 10, 10,  2,  2, 10, 10, 12,  7,  2,\n+    2,  2,  2,  2,  2,  2,  2, 10,  2,  2,  2,  2,  7,  7,  2,  7,\n+    7,  7, 12, 12,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    7,  7, 23, 23, 15, 15, 15, 15, 15, 15, 26, 23,  7, 21, 12,  2,\n+    2, 12, 12, 10,  2,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  7,\n+    7,  2,  7,  7,  2,  7,  7,  2,  7,  7,  2,  2, 12,  2, 10, 10,\n+   10, 12, 12,  2,  2,  2,  2, 12, 12,  2,  2, 12, 12, 12,  2,  2,\n+    2, 12,  2,  2,  2,  2,  2,  2,  2,  7,  7,  7,  7,  2,  7,  2,\n+    2,  2,  2,  2,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   12, 12,  7,  7,  7, 12, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2, 12, 12, 10,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,\n+    7,  7,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  2,  7,  7,  2,  7,  7,  7,  7,  7,  2,  2, 12,  7, 10, 10,\n+   10, 12, 12, 12, 12, 12,  2, 12, 12, 10,  2, 10, 10, 12,  2,  2,\n+    7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   21, 23,  2,  2,  2,  2,  2,  2,  2,  7, 12, 12, 12, 12, 12, 12,\n+    2, 12, 10, 10,  2,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  7,\n+    7,  2,  7,  7,  2,  7,  7,  7,  7,  7,  2,  2, 12,  7, 10, 12,\n+   10, 12, 12, 12, 12,  2,  2, 10, 10,  2,  2, 10, 10, 12,  2,  2,\n+    2,  2,  2,  2,  2, 12, 12, 10,  2,  2,  2,  2,  7,  7,  2,  7,\n+   26,  7, 15, 15, 15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2, 12,  7,  2,  7,  7,  7,  7,  7,  7,  2,  2,  2,  7,  7,\n+    7,  2,  7,  7,  7,  7,  2,  2,  2,  7,  7,  2,  7,  2,  7,  7,\n+    2,  2,  2,  7,  7,  2,  2,  2,  7,  7,  7,  2,  2,  2,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2, 10, 10,\n+   12, 10, 10,  2,  2,  2, 10, 10, 10,  2, 10, 10, 10, 12,  2,  2,\n+    7,  2,  2,  2,  2,  2,  2, 10,  2,  2,  2,  2,  2,  2,  2,  2,\n+   15, 15, 15, 26, 26, 26, 26, 26, 26, 23, 26,  2,  2,  2,  2,  2,\n+   12, 10, 10, 10, 12,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,\n+    7,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  7, 12, 12,\n+   12, 10, 10, 10, 10,  2, 12, 12, 12,  2, 12, 12, 12, 12,  2,  2,\n+    2,  2,  2,  2,  2, 12, 12,  2,  7,  7,  7,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2, 21, 15, 15, 15, 15, 15, 15, 15, 26,\n+    7, 12, 10, 10, 21,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,\n+    7,  7,  7,  7,  2,  7,  7,  7,  7,  7,  2,  2, 12,  7, 10, 12,\n+   10, 10, 10, 10, 10,  2, 12, 10, 10,  2, 10, 10, 12, 12,  2,  2,\n+    2,  2,  2,  2,  2, 10, 10,  2,  2,  2,  2,  2,  2,  2,  7,  2,\n+    2,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   12, 12, 10, 10,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 12,  7, 10, 10,\n+   10, 12, 12, 12, 12,  2, 10, 10, 10,  2, 10, 10, 10, 12,  7, 26,\n+    2,  2,  2,  2,  7,  7,  7, 10, 15, 15, 15, 15, 15, 15, 15,  7,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 26,  7,  7,  7,  7,  7,  7,\n+    2, 12, 10, 10,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  7,  7,  7,  7,  7,  7,\n+    7,  7,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  2,  2,  2, 12,  2,  2,  2,  2, 10,\n+   10, 10, 12, 12, 12,  2, 12,  2, 10, 10, 10, 10, 10, 10, 10, 10,\n+    2,  2, 10, 10, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7, 12,  7,  7, 12, 12, 12, 12, 12, 12, 12,  2,  2,  2,  2, 23,\n+    7,  7,  7,  7,  7,  7,  6, 12, 12, 12, 12, 12, 12, 12, 12, 21,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 21, 21,  2,  2,  2,  2,\n+    2,  7,  7,  2,  7,  2,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,\n+    7,  7,  7,  7,  2,  7,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7, 12,  7,  7, 12, 12, 12, 12, 12, 12, 12, 12, 12,  7,  2,  2,\n+    7,  7,  7,  7,  7,  2,  6,  2, 12, 12, 12, 12, 12, 12,  2,  2,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  7,  7,  7,  7,\n+    7, 26, 26, 26, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 26, 21, 26, 26, 26, 12, 12, 26, 26, 26, 26, 26, 26,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 26, 12, 26, 12, 26, 12, 22, 18, 22, 18, 10, 10,\n+    7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,\n+    2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10,\n+   12, 12, 12, 12, 12, 21, 12, 12,  7,  7,  7,  7,  7, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12,  2, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  2, 26, 26,\n+   26, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 26,  2, 26, 26,\n+   21, 21, 21, 21, 21, 26, 26, 26, 26, 21, 21,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 10, 10, 12, 12, 12,\n+   12, 10, 12, 12, 12, 12, 12, 12, 10, 12, 12, 10, 10, 12, 12,  7,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 21, 21, 21, 21, 21, 21,\n+    7,  7,  7,  7,  7,  7, 10, 10, 12, 12,  7,  7,  7,  7, 12, 12,\n+   12,  7, 10, 10, 10,  7,  7, 10, 10, 10, 10, 10, 10, 10,  7,  7,\n+    7, 12, 12, 12, 12,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7, 12, 10, 10, 12, 12, 10, 10, 10, 10, 10, 10, 12,  7, 10,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 10, 10, 12, 26, 26,\n+    9,  9,  9,  9,  9,  9,  2,  9,  2,  2,  2,  2,  2,  9,  2,  2,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 21,  6,  5,  5,  5,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  2,  7,  2,  7,  7,  7,  7,  2,  2,\n+    7,  2,  7,  7,  7,  7,  2,  2,  7,  7,  7,  7,  7,  7,  7,  2,\n+    7,  2,  7,  7,  7,  7,  2,  2,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2, 12, 12, 12,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2,  2,  2,  2,  2,  2,\n+    9,  9,  9,  9,  9,  9,  2,  2,  5,  5,  5,  5,  5,  5,  2,  2,\n+   17,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 26, 21,  7,\n+   29,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 22, 18,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 21, 21, 21, 14, 14,\n+   14,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,\n+    7,  7, 12, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7, 12, 12, 12, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  2, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 10, 10,\n+   10, 10, 10, 10, 10, 10, 12, 10, 10, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 21, 21, 21,  6, 21, 21, 21, 23,  7, 12,  2,  2,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2,  2,  2,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  2,  2,  2,  2,\n+   21, 21, 21, 21, 21, 21, 17, 21, 21, 21, 21, 12, 12, 12,  1,  2,\n+    7,  7,  7,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7, 12, 12,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7, 12,  7,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,\n+   12, 12, 12, 10, 10, 10, 10, 12, 12, 10, 10, 10,  2,  2,  2,  2,\n+   10, 10, 12, 10, 10, 10, 10, 10, 10, 12, 12, 12,  2,  2,  2,  2,\n+   26,  2,  2,  2, 21, 21, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,\n+    7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15,  2,  2,  2, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+    7,  7,  7,  7,  7,  7,  7, 12, 12, 10, 10, 12,  2,  2, 21, 21,\n+    7,  7,  7,  7,  7, 10, 12, 10, 12, 12, 12, 12, 12, 12, 12,  2,\n+   12, 10, 12, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 10,\n+   10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  2,  2, 12,\n+   21, 21, 21, 21, 21, 21, 21,  6, 21, 21, 21, 21, 21, 21,  2,  2,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12,\n+   12,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   12, 12, 12, 12, 10,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7, 12, 10, 12, 12, 12, 12, 12, 10, 12, 10, 10, 10,\n+   10, 10, 12, 10, 10,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,\n+   21, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2,  2,  2,\n+   12, 12, 10,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7, 10, 12, 12, 12, 12, 10, 10, 12, 12, 10, 12, 12, 12,  7,  7,\n+    7,  7,  7,  7,  7,  7, 12, 10, 12, 12, 10, 10, 10, 12, 10, 12,\n+   12, 12, 10, 10,  2,  2,  2,  2,  2,  2,  2,  2, 21, 21, 21, 21,\n+    7,  7,  7,  7, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12,\n+   12, 12, 12, 12, 10, 10, 12, 12,  2,  2,  2, 21, 21, 21, 21, 21,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  6,  6,  6,  6,  6,  6, 21, 21,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2,  2,  2,  2,  2,  2,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  2,  2,  9,  9,  9,\n+   21, 21, 21, 21, 21, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,\n+   12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 10, 12, 12, 12, 12, 12, 12, 12,  7,  7,  7,  7, 12,  7,  7,\n+    7,  7,  7,  7, 12,  7,  7, 10, 12, 12,  7,  2,  2,  2,  2,  2,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n+    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  6,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  2, 12, 12, 12, 12, 12,\n+    9,  5,  9,  5,  9,  5,  5,  5,  5,  5,  5,  5,  5,  5,  9,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  9,  9,  9,  9,  9,  9,  9,  9,\n+    5,  5,  5,  5,  5,  5,  2,  2,  9,  9,  9,  9,  9,  9,  2,  2,\n+    5,  5,  5,  5,  5,  5,  5,  5,  2,  9,  2,  9,  2,  9,  2,  9,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2,\n+    5,  5,  5,  5,  5,  5,  5,  5,  8,  8,  8,  8,  8,  8,  8,  8,\n+    5,  5,  5,  5,  5,  2,  5,  5,  9,  9,  9,  9,  8, 24,  5, 24,\n+   24, 24,  5,  5,  5,  2,  5,  5,  9,  9,  9,  9,  8, 24, 24, 24,\n+    5,  5,  5,  5,  2,  2,  5,  5,  9,  9,  9,  9,  2, 24, 24, 24,\n+    5,  5,  5,  5,  5,  5,  5,  5,  9,  9,  9,  9,  9, 24, 24, 24,\n+    2,  2,  5,  5,  5,  2,  5,  5,  9,  9,  9,  9,  8, 24, 24,  2,\n+   29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,  1,  1,  1,  1,  1,\n+   17, 17, 17, 17, 17, 17, 21, 21, 20, 19, 22, 20, 20, 19, 22, 20,\n+   21, 21, 21, 21, 21, 21, 21, 21, 27, 28,  1,  1,  1,  1,  1, 29,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 19, 21, 21, 21, 21, 16,\n+   16, 21, 21, 21, 25, 22, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 25, 21, 16, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29,\n+    1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n+   15,  6,  2,  2, 15, 15, 15, 15, 15, 15, 25, 25, 25, 22, 18,  6,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 25, 25, 25, 22, 18,  2,\n+    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  2,  2,  2,\n+   23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11,\n+   11, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   26, 26,  9, 26, 26, 26, 26,  9, 26, 26,  5,  9,  9,  9,  5,  5,\n+    9,  9,  9,  5, 26,  9, 26, 26, 25,  9,  9,  9,  9,  9, 26, 26,\n+   26, 26, 26, 26,  9, 26,  9, 26,  9, 26,  9,  9,  9,  9, 26,  5,\n+    9,  9,  9,  9,  5,  7,  7,  7,  7,  5, 26, 26,  5,  5,  9,  9,\n+   25, 25, 25, 25, 25,  9,  5,  5,  5,  5, 26, 25, 26, 26,  5, 26,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14,  9,  5, 14, 14, 14, 14, 15, 26, 26,  2,  2,  2,  2,\n+   25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 25, 25, 26, 26, 26, 26,\n+   25, 26, 26, 25, 26, 26, 25, 26, 26, 26, 26, 26, 26, 26, 25, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25,\n+   26, 26, 25, 26, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   26, 26, 26, 26, 26, 26, 26, 26, 22, 18, 22, 18, 26, 26, 26, 26,\n+   25, 25, 26, 26, 26, 26, 26, 26, 26, 22, 18, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25,\n+   25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2,  2,  2,  2,  2,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 15, 15, 15, 15, 15, 15,\n+   26, 26, 26, 26, 26, 26, 26, 25, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25, 25, 25, 25, 25,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25,\n+   26, 26, 26, 26, 26, 26, 26, 26, 22, 18, 22, 18, 22, 18, 22, 18,\n+   22, 18, 22, 18, 22, 18, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   25, 25, 25, 25, 25, 22, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 22, 18, 22, 18, 22, 18, 22, 18, 22, 18,\n+   25, 25, 25, 22, 18, 22, 18, 22, 18, 22, 18, 22, 18, 22, 18, 22,\n+   18, 22, 18, 22, 18, 22, 18, 22, 18, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 22, 18, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 25, 25,\n+   25, 25, 25, 25, 25, 26, 26, 25, 25, 25, 25, 25, 25, 26, 26, 26,\n+   26, 26, 26, 26,  2,  2, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26,  2, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  2,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,\n+    9,  5,  9,  9,  9,  5,  5,  9,  5,  9,  5,  9,  5,  9,  9,  9,\n+    9,  5,  9,  5,  5,  9,  5,  5,  5,  5,  5,  5,  6,  6,  9,  9,\n+    9,  5,  9,  5,  5, 26, 26, 26, 26, 26, 26,  9,  5,  9,  5, 12,\n+   12, 12,  9,  5,  2,  2,  2,  2,  2, 21, 21, 21, 21, 15, 21, 21,\n+    5,  5,  5,  5,  5,  5,  2,  5,  2,  2,  2,  2,  2,  5,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  6,\n+   21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 12,\n+    7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  7,  7,  7,  2,\n+   21, 21, 20, 19, 20, 19, 21, 21, 21, 20, 19, 21, 20, 19, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 17, 21, 21, 17, 21, 20, 19, 21, 21,\n+   20, 19, 22, 18, 22, 18, 22, 18, 22, 18, 21, 21, 21, 21, 21,  6,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 17, 17, 21, 21, 21, 21,\n+   17, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   26, 26, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2,  2,  2,  2,\n+   29, 21, 21, 21, 26,  6,  7, 14, 22, 18, 22, 18, 22, 18, 22, 18,\n+   22, 18, 26, 26, 22, 18, 22, 18, 22, 18, 22, 18, 17, 22, 18, 18,\n+   26, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 10, 10,\n+   17,  6,  6,  6,  6,  6, 26, 26, 14, 14, 14,  6,  7, 21, 26, 26,\n+    7,  7,  7,  7,  7,  7,  7,  2,  2, 12, 12, 24, 24,  6,  6,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 21,  6,  6,  6,  7,\n+    2,  2,  2,  2,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+   26, 26, 15, 15, 15, 15, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 15, 15, 15, 15, 15, 15, 15, 15,\n+   26, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+    7,  7,  7,  7,  7,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6, 21, 21, 21,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  7,  7,  2,  2,  2,  2,\n+    9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  7, 12,\n+   11, 11, 11, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21,  6,\n+    9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  6,  6, 12, 12,\n+    7,  7,  7,  7,  7,  7, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   12, 12, 21, 21, 21, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,\n+   24, 24, 24, 24, 24, 24, 24,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n+   24, 24,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,\n+    5,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,\n+    6,  5,  5,  5,  5,  5,  5,  5,  5,  9,  5,  9,  5,  9,  9,  5,\n+    9,  5,  9,  5,  9,  5,  9,  5,  6, 24, 24,  9,  5,  9,  5,  7,\n+    9,  5,  9,  5,  5,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,\n+    9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  9,  9,  9,  9,  5,\n+    9,  9,  9,  9,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,  9,  5,\n+    2,  2,  9,  5,  9,  9,  9,  9,  5,  9,  5,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  9,  5,  7,  6,  6,  5,  7,  7,  7,  7,  7,\n+    7,  7, 12,  7,  7,  7, 12,  7,  7,  7,  7, 12,  7,  7,  7,  7,\n+    7,  7,  7, 10, 10, 12, 12, 10, 26, 26, 26, 26, 12,  2,  2,  2,\n+   15, 15, 15, 15, 15, 15, 26, 26, 23, 26,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7, 21, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,\n+   10, 10,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n+   10, 10, 10, 10, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2, 21, 21,\n+   12, 12,  7,  7,  7,  7,  7,  7, 21, 21, 21,  7, 21,  7,  7, 12,\n+    7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21,\n+    7,  7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 10, 10,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 21,\n+    7,  7,  7, 12, 10, 10, 12, 12, 12, 12, 10, 10, 12, 12, 10, 10,\n+   10, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,  6,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2, 21, 21,\n+    7,  7,  7,  7,  7, 12,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  7,  7,  7,  7,  7,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12, 12, 10,\n+   10, 12, 12, 10, 10, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7, 12,  7,  7,  7,  7,  7,  7,  7,  7, 12, 10,  2,  2,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2, 21, 21, 21, 21,\n+    6,  7,  7,  7,  7,  7,  7, 26, 26, 26,  7, 10, 12, 10,  7,  7,\n+   12,  7, 12, 12, 12,  7,  7, 12, 12,  7,  7,  7,  7,  7, 12, 12,\n+    7, 12,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  7,  7,  6, 21, 21,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 10, 12, 12, 10, 10,\n+   21, 21,  7,  6,  6, 10, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  7,  7,  7,  7,  7,  7,  2,  2,  7,  7,  7,  7,  7,  7,  2,\n+    2,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 24,  6,  6,  6,  6,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  6, 24, 24,  2,  2,  2,  2,\n+    7,  7,  7, 10, 10, 12, 10, 10, 12, 10, 10, 21, 10, 12,  2,  2,\n+    7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  7,  7,  7,  7,  7,\n+    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    5,  5,  5,  5,  5,  5,  5,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  5,  5,  5,  5,  5,  2,  2,  2,  2,  2,  7, 12,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7, 25,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  7,  2,  7,  2,\n+    7,  7,  2,  7,  7,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24, 24,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 18, 22,\n+    2,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 23, 26,  2,  2,\n+   21, 21, 21, 21, 21, 21, 21, 22, 18, 21,  2,  2,  2,  2,  2,  2,\n+   21, 17, 17, 16, 16, 22, 18, 22, 18, 22, 18, 22, 18, 22, 18, 22,\n+   18, 22, 18, 22, 18, 21, 21, 22, 18, 21, 21, 21, 21, 16, 16, 16,\n+   21, 21, 21,  2, 21, 21, 21, 21, 17, 22, 18, 22, 18, 22, 18, 21,\n+   21, 21, 25, 17, 25, 25, 25,  2, 21, 23, 21, 21,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  1,\n+    2, 21, 21, 21, 23, 21, 21, 21, 22, 18, 21, 25, 21, 17, 21, 21,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 22, 25, 18, 25, 22,\n+   18, 21, 22, 18, 21, 21,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6,  6,\n+    2,  2,  7,  7,  7,  7,  7,  7,  2,  2,  7,  7,  7,  7,  7,  7,\n+    2,  2,  7,  7,  7,  7,  7,  7,  2,  2,  7,  7,  7,  2,  2,  2,\n+   23, 23, 25, 24, 26, 23, 23,  2, 26, 25, 25, 25, 25, 26, 26,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  1,  1,  1, 26, 26,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  2,  7,\n+   21, 21, 21,  2,  2,  2,  2, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15,  2,  2,  2, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   14, 14, 14, 14, 14, 15, 15, 15, 15, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 15, 15, 26, 26, 26,  2,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2,  2,  2,\n+   26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12,  2,  2,\n+   12, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  2,  2,\n+   15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2,  2,  7,  7,  7,\n+    7, 14,  7,  7,  7,  7,  7,  7,  7,  7, 14,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2, 21,\n+    7,  7,  7,  7,  2,  2,  2,  2,  7,  7,  7,  7,  7,  7,  7,  7,\n+   21, 14, 14, 14, 14, 14,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    9,  9,  9,  9,  9,  9,  9,  9,  5,  5,  5,  5,  5,  5,  5,  5,\n+    9,  9,  9,  9,  2,  2,  2,  2,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2,  2,  2,\n+    7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 21,\n+    7,  7,  7,  7,  7,  7,  2,  2,  7,  2,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  2,  7,  7,  2,  2,  2,  7,  2,  2,  7,\n+    7,  7,  7,  7,  7,  7,  2, 21, 15, 15, 15, 15, 15, 15, 15, 15,\n+    7,  7,  7,  7,  7,  7,  7, 26, 26, 15, 15, 15, 15, 15, 15, 15,\n+    2,  2,  2,  2,  2,  2,  2, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+    7,  7,  7,  2,  7,  7,  2,  2,  2,  2,  2, 15, 15, 15, 15, 15,\n+    7,  7,  7,  7,  7,  7, 15, 15, 15, 15, 15, 15,  2,  2,  2, 21,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2, 21,\n+    7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2, 15, 15,  7,  7,\n+    2,  2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+    7, 12, 12, 12,  2, 12, 12,  2,  2,  2,  2,  2, 12, 12, 12, 12,\n+    7,  7,  7,  7,  2,  7,  7,  7,  2,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  2,  2, 12, 12, 12,  2,  2,  2,  2, 12,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 15, 15, 21,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 15, 15, 15,\n+    7,  7,  7,  7,  7,  7,  7,  7, 26,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7, 12, 12,  2,  2,  2,  2, 15, 15, 15, 15, 15,\n+   21, 21, 21, 21, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  2,  2,  2, 21, 21, 21, 21, 21, 21, 21,\n+    7,  7,  7,  7,  7,  7,  2,  2, 15, 15, 15, 15, 15, 15, 15, 15,\n+    7,  7,  7,  2,  2,  2,  2,  2, 15, 15, 15, 15, 15, 15, 15, 15,\n+    7,  7,  2,  2,  2,  2,  2,  2,  2, 21, 21, 21, 21,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2, 15, 15, 15, 15, 15, 15, 15,\n+    9,  9,  9,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    5,  5,  5,  2,  2,  2,  2,  2,  2,  2, 15, 15, 15, 15, 15, 15,\n+    7,  7,  7,  7, 12, 12, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2, 12, 12, 17,  2,  2,\n+    7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   15, 15, 15, 15, 15, 15, 15,  7,  2,  2,  2,  2,  2,  2,  2,  2,\n+   12, 15, 15, 15, 15, 21, 21, 21, 21, 21,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7, 15, 15, 15, 15, 15, 15, 15,  2,  2,  2,  2,\n+   10, 12, 10,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21,  2,  2,\n+   15, 15, 15, 15, 15, 15, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 12,\n+   10, 10, 10, 12, 12, 12, 12, 10, 10, 12, 12, 21, 21,  1, 21, 21,\n+   21, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,  2,  2,\n+   12, 12, 12,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12, 10, 12, 12, 12,\n+   12, 12, 12, 12, 12,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   21, 21, 21, 21,  7, 10, 10,  7,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7, 12, 21, 21,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10,\n+   10,  7,  7,  7,  7, 21, 21, 21, 21, 12, 12, 12, 12, 21, 10, 12,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  7, 21,  7, 21, 21, 21,\n+    2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 10, 10, 10, 12,\n+   12, 12, 10, 10, 12, 10, 12, 12, 21, 21, 21, 21, 21, 21, 12,  2,\n+    7,  7,  7,  7,  7,  7,  7,  2,  7,  2,  7,  7,  7,  7,  2,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7, 21,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 12,\n+   10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12,  2,  2,  2,  2,  2,\n+   12, 12, 10, 10,  2,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  7,\n+    7,  2,  7,  7,  2,  7,  7,  7,  7,  7,  2, 12, 12,  7, 10, 10,\n+   12, 10, 10, 10, 10,  2,  2, 10, 10,  2,  2, 10, 10, 10,  2,  2,\n+    7,  2,  2,  2,  2,  2,  2, 10,  2,  2,  2,  2,  2,  7,  7,  7,\n+    7,  7, 10, 10,  2,  2, 12, 12, 12, 12, 12, 12, 12,  2,  2,  2,\n+   12, 12, 12, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12,\n+   10, 10, 12, 12, 12, 10, 12,  7,  7,  7,  7, 21, 21, 21, 21, 21,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 21, 21,  2, 21, 12,  7,\n+   10, 10, 10, 12, 12, 12, 12, 12, 12, 10, 12, 10, 10, 10, 10, 12,\n+   12, 10, 12, 12,  7,  7, 21,  7,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 10,\n+   10, 10, 12, 12, 12, 12,  2,  2, 10, 10, 10, 10, 12, 12, 10, 12,\n+   12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21,  7,  7,  7,  7, 12, 12,  2,  2,\n+   10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 12, 10, 12,\n+   12, 21, 21, 21,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 10, 12, 10, 10,\n+   12, 12, 12, 12, 12, 12, 10, 12,  7,  2,  2,  2,  2,  2,  2,  2,\n+   10, 10, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12,  2,  2,  2,  2,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 21, 21, 21, 26,\n+   12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 21,  2,  2,  2,  2,\n+   15, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  7,\n+    7,  7,  7,  7,  7,  7,  7,  2,  2,  7,  2,  2,  7,  7,  7,  7,\n+    7,  7,  7,  7,  2,  7,  7,  2,  7,  7,  7,  7,  7,  7,  7,  7,\n+   10, 10, 10, 10, 10, 10,  2, 10, 10,  2,  2, 12, 12, 10, 12,  7,\n+   10,  7, 10, 12, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  7,  7,  7,  7,  7,  7,\n+    7, 10, 10, 10, 12, 12, 12, 12,  2,  2, 12, 12, 10, 10, 10, 10,\n+   12,  7, 21,  7, 10,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  7,  7,  7,  7,  7,\n+    7,  7,  7, 12, 12, 12, 12, 12, 12, 10,  7, 12, 12, 12, 12, 21,\n+   21, 21, 21, 21, 21, 21, 21, 12,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7, 12, 12, 12, 12, 12, 12, 10, 10, 12, 12, 12,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 21, 21, 21,  7, 21, 21,\n+   21, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   12, 12, 12, 12, 12, 12, 12,  2, 12, 12, 12, 12, 12, 12, 10, 12,\n+    7, 21, 21, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   21, 21,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    2,  2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12,  2, 10, 12, 12, 12, 12, 12, 12,\n+   12, 10, 12, 12, 10, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  2,  7,  7,  7,  7,  7,\n+    7, 12, 12, 12, 12, 12, 12,  2,  2,  2, 12,  2, 12, 12,  2, 12,\n+   12, 12, 12, 12, 12, 12,  7, 12,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  2,  7,  7,  2,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 10, 10, 10, 10, 10,  2,\n+   12, 12,  2, 10, 10, 12, 10, 12,  7,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7, 12, 12, 10, 10, 21, 21,  2,  2,  2,  2,  2,  2,  2,\n+   15, 15, 15, 15, 15, 26, 26, 26, 26, 26, 26, 26, 26, 23, 23, 23,\n+   23, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 21,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2,\n+   21, 21, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,\n+   12, 12, 12, 12, 12, 21,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 26, 26, 26, 26,\n+    6,  6,  6,  6, 21, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2, 15, 15, 15, 15, 15,\n+   15, 15,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2,  2,  7,  7,  7,\n+   15, 15, 15, 15, 15, 15, 15, 21, 21, 21, 21,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2,  2,  2, 12,\n+    7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n+   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n+   10, 10, 10, 10, 10, 10, 10, 10,  2,  2,  2,  2,  2,  2,  2, 12,\n+   12, 12, 12,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n+    6,  6, 21,  6, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   10, 10,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  7,  7,  7,  7,  2,  2,  2,  2,  2,  2,  2,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  2, 26, 12, 12, 21,\n+    1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26, 26,  2,  2, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 10, 10, 12, 12, 12, 26, 26, 26, 10, 10, 10,\n+   10, 10, 10,  1,  1,  1,  1,  1,  1,  1,  1, 12, 12, 12, 12, 12,\n+   12, 12, 12, 26, 26, 12, 12, 12, 12, 12, 12, 12, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 12, 12, 12, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  5,  5,\n+    5,  5,  5,  5,  5,  2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    9,  9,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  9,  2,  9,  9,\n+    2,  2,  9,  2,  2,  9,  9,  2,  2,  9,  9,  9,  9,  2,  9,  9,\n+    9,  9,  9,  9,  9,  9,  5,  5,  5,  5,  2,  5,  2,  5,  5,  5,\n+    5,  5,  5,  5,  2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  9,  9,  2,  9,  9,  9,  9,  2,  2,  9,  9,  9,\n+    9,  9,  9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  9,  2,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  9,  9,  2,  9,  9,  9,  9,  2,\n+    9,  9,  9,  9,  9,  2,  9,  2,  2,  2,  9,  9,  9,  9,  9,  9,\n+    9,  2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  2,  2,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9, 25,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 25,  5,  5,  5,  5,\n+    5,  5,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 25,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5, 25,  5,  5,  5,  5,  5,  5,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9, 25,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 25,\n+    5,  5,  5,  5,  5,  5,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 25,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5, 25,  5,  5,  5,  5,  5,  5,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9, 25,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5, 25,  5,  5,  5,  5,  5,  5,  9,  5,  2,  2, 13, 13,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   12, 12, 12, 12, 12, 12, 12, 26, 26, 26, 26, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 26, 26, 26,\n+   26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 12, 26, 26, 21, 21, 21, 21, 21,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12,  2, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12,  2,  2, 12, 12, 12, 12, 12,\n+   12, 12,  2, 12, 12,  2, 12, 12, 12, 12, 12,  2,  2,  2,  2,  2,\n+   12, 12, 12, 12, 12, 12, 12,  6,  6,  6,  6,  6,  6,  6,  2,  2,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2,  7, 26,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 12, 12, 12, 12,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2,  2, 23,\n+    7,  7,  7,  7,  7,  2,  2, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   12, 12, 12, 12, 12, 12, 12,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    5,  5,  5,  5, 12, 12, 12, 12, 12, 12, 12,  6,  2,  2,  2,  2,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 26, 15, 15, 15,\n+   23, 15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 26, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,\n+    7,  7,  7,  7,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    2,  7,  7,  2,  7,  2,  2,  7,  2,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  2,  7,  7,  7,  7,  2,  7,  2,  7,  2,  2,  2,  2,\n+    2,  2,  7,  2,  2,  2,  2,  7,  2,  7,  2,  7,  2,  7,  7,  7,\n+    2,  7,  7,  2,  7,  2,  2,  7,  2,  7,  2,  7,  2,  7,  2,  7,\n+    2,  7,  7,  2,  7,  2,  2,  7,  7,  7,  7,  2,  7,  7,  7,  7,\n+    7,  7,  7,  2,  7,  7,  7,  7,  2,  7,  7,  7,  7,  2,  7,  2,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  7,\n+    2,  7,  7,  7,  2,  7,  7,  7,  7,  7,  2,  7,  7,  7,  7,  7,\n+   25, 25,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2,  2,\n+    2,  2,  2,  2,  2,  2, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 24, 24, 24, 24, 24,\n+   26, 26, 26, 26, 26, 26, 26, 26,  2,  2,  2,  2,  2,  2,  2,  2,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26,  2, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  2, 26, 26, 26,\n+   26, 26, 26, 26, 26,  2,  2,  2, 26, 26, 26,  2,  2,  2,  2,  2,\n+   26, 26, 26,  2, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+    2,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  0,\n+    0,  0,  0,  0,  0,  0,  1,  0,  0,  2,  0,  3,  4,  5,  6,  7,\n+    8,  9, 10, 11, 12, 12, 12, 13, 14, 12, 15, 16, 17, 18, 19, 20,\n+   21, 22,  0,  0,  0,  0, 23,  0,  0,  0,  0,  0,  0,  0, 24, 25,\n+    0, 26, 27,  0, 28, 29, 30, 31, 32, 33,  0, 34,  0,  0,  0,  0,\n+    0, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 36, 37, 38,  0,  0,  0,  0,\n+   39, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,\n+   43, 44, 45, 46,  0, 47,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 49,  0,  0,  0,  0,  0, 50,  0,  0,  0,\n+    0,  0,  0, 51,  0, 52, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 54, 55,  0,  0,  0,  0, 56,  0,  0, 57, 58,  0,\n+   59, 60, 61, 62, 63, 64, 65,  0, 66, 67,  0, 68, 69, 70, 71,  0,\n+   60,  0, 72, 73, 74, 75,  0,  0, 69,  0, 76, 77,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 78, 79,  0,  0,  0,  0,  0,  0,  0,  0, 80,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 81,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 82, 83, 84,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   85,  0, 79,  0,  0, 86,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 87, 88,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,\n+   12,  1,  0,  0, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 14, 15, 16, 17, 18, 19, 20,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  1, 21,  0,  0,  0,  0,  0, 22, 23, 24,\n+    0,  0, 25,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 27,\n+   28, 29,  0,  0,  0,  0, 30,  0,  0,  0, 31, 32, 33, 34,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 13, 35, 36,  0,  0, 26, 37, 38, 39,  0,  0,  0,  0,  0, 40,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41,  1,\n+   42, 43, 44, 45,  0,  0,  0,  0,  0,  0,  0, 46,  0, 47, 48,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 46,  0, 47,  0,  0,\n+    0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0, 46,  0, 47,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 47,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 47, 50,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 51,  0, 47,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 52,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 53,  0, 54,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 55,  0, 56,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 57,  0,  0, 58, 59,  0,  0,  0,  0,\n+    0,  0, 60, 61, 62,  0,  0,  0,  0,  0,  0,  0, 63,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64, 65,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 66,\n+    0,  0,  0,  0,  0,  0, 67,  0,  0,  0, 67,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 52, 68,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 69,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 70,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 71, 72,  0,  0,  0,  0,  0,  0,  0,  0,\n+   73,  0, 66, 74,  0,  0,  0,  0,  0,  0, 75, 76, 72,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 46,  0, 67,  0,  0,  0,\n+    0, 77, 78,  0,  0,  0,  0,  0,  0, 79,  0,  0,  0,  0,  0,  0,\n+   80,  0, 79,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 81, 82,\n+   83, 84, 85, 86,  0,  0,  0,  0,  0,  0,  0,  0, 87, 88, 89,  1,\n+    1,  1, 90, 91,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 92, 93,\n+   94, 95, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 71, 86,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 97,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    1,  1,  1,  1,  0,  0,  0,  0,  0, 98,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 99,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 71,100,101,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 86,  0,102,  0,  0,  0,  0, 67,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 67,  0,  0,  0,\n+    1,  1, 86,  0,  0,  0,  0,  0,  0,103,  0,  0,  0,  0,104,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,105,  0, 73,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,106,107,108,  0,  0,  0,\n+    0,  0,102,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 47,  0,  0,  0,  0,  0,109,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,110,111,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   72,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 26,112,  0,113,  0,  0,  0,  0,  0,114,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+  115,  0,  0,  0,  0,  0,  0,  0,100,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,116,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,117,118, 72,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,102,  0,  0,  0,\n+    0,  0,  0, 97,  0,  0,  0,  0,  0,  0,  0,119,  0,  0,  0,  0,\n+    0,  0,  0,  0,112,  0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0,\n+    0,  0,105,  0,  0,  0,  0,  0,  0,  0,  0,  0, 73,120,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,121,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,122,  0,  0,  0,  0,  0,  0,  0,  0,  0,123,  0, 47,  0,  0,\n+   26,124,124,  0,  0,  0,  0,  0,  0,  0,  0,  0,125,  0,  0, 49,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,126,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 97,127,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 97,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,104,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,129,105,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   73,  0,  0,  0,  0,  0,  0,  0,  0,  0, 67,  0, 97,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,130,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,131,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 97,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,132,  0,  0,  0,  0,  0,  0,  0,133,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,134,  0,  0,  0,  0,135,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+  136,137,138,139,140,141,  0,  0,  0,142,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,143,  0,  0,  0,\n+    0,  0,  0,  0,133,  1,  1,144,145,112,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,146,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,147,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,230,230,230,230,\n+  230,230,230,230,230,230,230,230,230,232,220,220,220,220,232,216,\n+  220,220,220,220,220,202,202,220,220,220,220,202,202,220,220,220,\n+  220,220,220,220,220,220,220,220,  1,  1,  1,  1,  1,220,220,220,\n+  220,230,230,230,230,230,230,230,230,240,230,220,220,220,230,230,\n+  230,220,220,  0,230,230,230,220,220,220,220,230,232,220,220,230,\n+  233,234,234,233,234,234,233,230,230,230,230,230,  0,  0,  0,230,\n+  230,230,230,230,  0,220,230,230,230,230,220,230,230,230,222,220,\n+  230,230,230,230,230,230,220,220,220,220,220,220,230,230,220,230,\n+  230,222,228,230, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20,\n+   21, 22,  0, 23,  0, 24, 25,  0,230,220,  0, 18, 30, 31, 32,  0,\n+    0,  0,  0,  0,  0,  0,  0, 27, 28, 29, 30, 31, 32, 33, 34,230,\n+  230,220,220,230,230,230,230,230,220,230,230,220, 35,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,230,230,230,230,230,230,\n+  230,  0,  0,230,230,230,230,220,230,  0,  0,230,230,  0,220,230,\n+  230,220,  0,  0,  0, 36,  0,  0,  0,  0,  0,  0,230,220,230,230,\n+  220,230,230,220,220,220,230,220,220,230,220,230,230,230,220,230,\n+  220,230,220,230,220,230,230,  0,  0,  0,  0,  0,230,230,220,230,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,220,  0,  0,230,230,  0,230,\n+  230,230,230,230,230,230,230,230,  0,230,230,230,  0,230,230,230,\n+  230,230,  0,  0,  0,220,220,220,  0,  0,  0,  0,  0,  0,  0,220,\n+  230,230,230,230,230,230,  0,220,230,230,220,230,230,220,230,230,\n+  230,220,220,220, 27, 28, 29,230,230,230,220,230,230,220,220,230,\n+  230,230,230,230,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,\n+    0,  9,  0,  0,  0,230,220,230,230,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,230,  0,  0,  0,  0,  0,  0, 84, 91,  0,  0,  0,  0,  9,\n+    9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,103,103,  9,  0,\n+    0,  0,  0,  0,107,107,107,107,  0,  0,  0,  0,118,118,  9,  0,\n+    0,  0,  0,  0,122,122,122,122,  0,  0,  0,  0,220,220,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,220,  0,220,  0,216,  0,  0,\n+    0,  0,  0,  0,  0,129,130,  0,132,  0,  0,  0,  0,  0,130,130,\n+  130,130,  0,  0,130,  0,230,230,  9,  0,230,230,  0,  0,  0,  0,\n+    0,  0,220,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  9,  9,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,230,230,230,  0,  0,  0,  0,\n+    9,  0,  0,  0,  0,  0,  0,  0,  0,230,  0,  0,  0,228,  0,  0,\n+    0,  0,  0,  0,  0,222,230,220,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,230,220,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,\n+    0,  0,  0,  0,230,230,230,230,230,  0,  0,220,230,230,230,230,\n+  230,220,220,220,220,220,220,230,230,220,  0,220,  0,  0,  0,230,\n+  220,230,230,230,230,230,230,230,  0,  0,  0,  0,  0,  0,  9,  9,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,230,230,230,  0,\n+    1,220,220,220,220,220,230,230,220,220,220,220,230,  0,  1,  1,\n+    1,  1,  1,  1,  1,  0,  0,  0,  0,220,  0,  0,  0,  0,  0,  0,\n+  230,  0,  0,  0,230,230,  0,  0,  0,  0,  0,  0,230,230,220,230,\n+  230,230,230,230,230,230,220,230,230,234,214,220,202,230,230,230,\n+  230,230,230,230,230,230,230,230,230,230,232,228,228,220,  0,230,\n+  233,220,230,220,230,230,  1,  1,230,230,230,230,  1,  1,  1,230,\n+  230,  0,  0,  0,  0,230,  0,  0,  0,  1,  1,230,220,230,  1,  1,\n+  220,220,220,220,230,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  9,  0,  0,218,228,232,222,224,224,  0,  8,  8,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,230,230,230,230,230,230,230,230,\n+  230,230,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,220,\n+  220,220,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  7,\n+    0,  0,  0,  0,230,  0,230,230,220,  0,  0,230,230,  0,  0,  0,\n+    0,  0,230,230,  0,230,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 26,  0,230,230,230,230,230,230,230,220,220,220,220,220,\n+  220,220,230,230,230,230,230,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,220,  0,230,230,  1,220,  0,  0,  0,  0,  9,  0,  0,  0,  0,\n+    0,230,220,  0,  0,  0,  0,230,230,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,220,220,230,230,230,220,230,220,220,220,  0,  9,  7,  0,\n+    0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  9,  7,  0,  0,  7,  9,  0,  0,  0,  0,  0,  0,  0,  0,  7,\n+    7,  0,  0,  0,230,230,230,230,230,  0,  0,  0,  0,  0,  9,  0,\n+    0,  0,  7,  0,  0,  0,  9,  7,  0,  0,  0,  0,  7,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  7,  0,  0,  0,  0,\n+    0,  9,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,\n+    9,  9,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,230,230,230,230,\n+  230,230,230,  0,  6,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  1,  0,  0,  0,  0,  0,  0,216,216,  1,  1,  1,  0,  0,\n+    0,226,216,216,216,216,216,  0,  0,  0,  0,  0,  0,  0,  0,220,\n+  220,220,220,220,220,220,220,  0,  0,230,230,230,230,230,220,220,\n+    0,  0,  0,  0,  0,  0,230,230,230,230,  0,  0,  0,  0,230,230,\n+  230,  0,  0,  0,230,  0,  0,230,230,230,230,230,230,230,  0,230,\n+  230,  0,230,230,220,220,220,220,220,220,220,  0,230,230,  7,  0,\n+    0,  0,  0,  0, 16, 17, 17, 17, 17, 17, 17, 33, 17, 17, 17, 19,\n+   17, 17, 17, 17, 20,101, 17,113,129,169, 17, 27, 28, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17,237,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,\n+    0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  3,  4,  0,  0,  0,  0,\n+    0,  0,  3,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,\n+    0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  9,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 10,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 10,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 11, 12,  0, 13,  0, 14, 15, 16,  0,  0,\n+    0,  0,  0,  1, 17, 18,  0, 19,  7,  1,  0,  0,  0, 20, 20,  7,\n+   20, 20, 20, 20, 20, 20, 20,  8, 21,  0, 22,  0,  7, 23, 24,  0,\n+   20, 20, 25,  0,  0,  0, 26, 27,  1,  7, 20, 20, 20, 20, 20,  1,\n+   28, 29, 30, 31,  0,  0, 20,  0,  0,  0,  0,  0,  0,  0, 10,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 20,\n+   20,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  8, 21, 32,  4,  0, 10,  0, 33,  7, 20, 20, 20,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  8, 34, 34, 35, 36, 34, 37,  0, 38,  1, 20, 20,\n+    0,  0, 39,  0,  1,  1,  0,  8, 21,  1, 20,  0,  0,  0,  1,  0,\n+    0, 40,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 21,\n+    0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,\n+    0,  0, 26, 34, 34, 34, 34, 34, 34, 34, 34, 34, 21,  7, 20, 41,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 21,  0, 42, 43, 44,  0, 45,\n+    0,  8, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 46,  7,  1, 10,  1,  0,  0,  0,  1, 20, 20,  1,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 20, 20,  1, 20, 20,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 21,  0,  1,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  2,  0,  0,  0,  0,\n+    0,  0,  3,  4,  0,  0,  0,  0,  0,  0,  3, 47, 48,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,\n+    0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  3,  4,  0,  0,  0,  0,\n+    0,  0,  3,  4,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,\n+   12, 13, 14, 15, 16, 17, 18, 17, 19, 20, 21, 22, 23, 24, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 27, 28, 28, 29, 30, 31, 32, 33, 33, 33, 33, 33, 33,\n+   33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n+   52, 53, 54, 55, 56, 57, 58, 35, 35, 35, 35, 35, 59, 59, 60, 35,\n+   35, 35, 35, 35, 35, 35, 61, 62, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 63, 64, 35, 65, 66, 66, 66, 66,\n+   66, 66, 66, 66, 66, 66, 66, 67, 66, 68, 69, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 70, 71, 35, 35,\n+   35, 35, 72, 35, 35, 35, 35, 35, 35, 35, 35, 35, 73, 74, 75, 76,\n+   77, 78, 35, 35, 79, 80, 35, 35, 81, 35, 82, 83, 84, 85, 17, 86,\n+   87, 88, 35, 35, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 89, 25, 25, 25, 25, 25, 25, 25, 90,\n+   91, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 92, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 93, 35, 35, 35, 35, 35, 35,\n+   25, 94, 35, 35, 25, 25, 25, 25, 25, 25, 25, 25, 25, 95, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   19,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0, 19, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,\n+    0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,\n+   26, 26,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n+    1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  0,  9,  9,  9,  2,  2,\n+    9,  9,  9,  9,  0,  9,  2,  2,  2,  2,  9,  0,  9,  0,  9,  9,\n+    9,  2,  9,  2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9, 55, 55, 55, 55, 55, 55, 55, 55,\n+   55, 55, 55, 55, 55, 55,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n+    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  1,  1,  6,  6,  6,\n+    6,  6,  6,  6,  6,  6,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n+    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n+    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  4,\n+    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n+    4,  2,  2,  4,  4,  4,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2,  2,\n+    2,  2,  2,  2,  2,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14,  2,  2,  2,  2, 14, 14, 14, 14, 14, 14,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,\n+    3,  3,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  0,  3,  2,  3,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  1,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  0,  3,  3, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,\n+   37, 37, 37, 37,  2, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,\n+   37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,\n+   37,  2,  2, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,\n+   38, 38, 38, 38, 38, 38, 38, 38,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n+   64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n+   64,  2,  2, 64, 64, 64, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,\n+   90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,\n+   90, 90, 90, 90,  2,  2, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,\n+   90, 90, 90, 90, 90,  2, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,\n+   95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,\n+   95, 95,  2,  2, 95,  2, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,\n+   37,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  2,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  1,  1,  1,  1,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  5,  5,  5,  5,  2,  5,  5,  5,  5,  5,\n+    5,  5,  5,  2,  2,  5,  5,  2,  2,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,\n+    5,  5,  5,  5,  5,  5,  5,  2,  5,  2,  2,  2,  5,  5,  5,  5,\n+    2,  2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2,  5,  5,  2,\n+    2,  5,  5,  5,  5,  2,  2,  2,  2,  2,  2,  2,  2,  5,  2,  2,\n+    2,  2,  5,  5,  2,  5,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n+    5,  5,  5,  5,  5,  2,  2, 11, 11, 11,  2, 11, 11, 11, 11, 11,\n+   11,  2,  2,  2,  2, 11, 11,  2,  2, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,\n+   11, 11, 11, 11, 11, 11, 11,  2, 11, 11,  2, 11, 11,  2, 11, 11,\n+    2,  2, 11,  2, 11, 11, 11, 11, 11,  2,  2,  2,  2, 11, 11,  2,\n+    2, 11, 11, 11,  2,  2,  2, 11,  2,  2,  2,  2,  2,  2,  2, 11,\n+   11, 11, 11,  2, 11,  2,  2,  2,  2,  2,  2,  2, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2, 10, 10, 10,  2, 10, 10, 10, 10, 10,\n+   10, 10, 10, 10,  2, 10, 10, 10,  2, 10, 10, 10, 10, 10, 10, 10,\n+   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2,\n+   10, 10, 10, 10, 10, 10, 10,  2, 10, 10,  2, 10, 10, 10, 10, 10,\n+    2,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,\n+    2, 10, 10, 10,  2,  2, 10,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 10, 10, 10, 10,  2,  2, 10, 10, 10, 10,\n+   10, 10, 10, 10, 10, 10, 10, 10,  2,  2,  2,  2,  2,  2,  2, 10,\n+   10, 10, 10, 10, 10, 10,  2, 21, 21, 21,  2, 21, 21, 21, 21, 21,\n+   21, 21, 21,  2,  2, 21, 21,  2,  2, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,\n+   21, 21, 21, 21, 21, 21, 21,  2, 21, 21,  2, 21, 21, 21, 21, 21,\n+    2,  2, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2, 21, 21,  2,\n+    2, 21, 21, 21,  2,  2,  2,  2,  2,  2,  2, 21, 21, 21,  2,  2,\n+    2,  2, 21, 21,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2, 22, 22,  2, 22, 22, 22, 22, 22,\n+   22,  2,  2,  2, 22, 22, 22,  2, 22, 22, 22, 22,  2,  2,  2, 22,\n+   22,  2, 22,  2, 22, 22,  2,  2,  2, 22, 22,  2,  2,  2, 22, 22,\n+   22,  2,  2,  2, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+    2,  2,  2,  2, 22, 22, 22, 22, 22,  2,  2,  2, 22, 22, 22,  2,\n+   22, 22, 22, 22,  2,  2, 22,  2,  2,  2,  2,  2,  2, 22,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22,  2,  2,  2,  2,  2, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n+   23, 23, 23,  2, 23, 23, 23,  2, 23, 23, 23, 23, 23, 23, 23, 23,\n+   23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  2,\n+   23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n+    2,  2,  2, 23, 23, 23, 23, 23, 23, 23, 23,  2, 23, 23, 23,  2,\n+   23, 23, 23, 23,  2,  2,  2,  2,  2,  2,  2, 23, 23,  2, 23, 23,\n+   23,  2,  2,  2,  2,  2, 23, 23, 23, 23,  2,  2, 23, 23, 23, 23,\n+   23, 23, 23, 23, 23, 23,  2,  2,  2,  2,  2,  2,  2, 23, 23, 23,\n+   23, 23, 23, 23, 23, 23, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16,  2, 16, 16, 16,  2, 16, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2,\n+   16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16, 16,\n+    2,  2, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16,  2,\n+   16, 16, 16, 16,  2,  2,  2,  2,  2,  2,  2, 16, 16,  2,  2,  2,\n+    2,  2,  2,  2, 16,  2, 16, 16, 16, 16,  2,  2, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16,  2, 16, 16,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20,  2, 20, 20, 20,  2, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  2, 20, 20, 20,  2,\n+   20, 20, 20, 20, 20, 20,  2,  2,  2,  2, 20, 20, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  2,  2, 20, 20, 20, 20,\n+   20, 20, 20, 20, 20, 20,  2, 36, 36, 36,  2, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36,  2, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36,  2, 36,  2,  2, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,\n+   36,  2,  2,  2,  2, 36, 36, 36, 36, 36, 36,  2, 36,  2, 36, 36,\n+   36, 36, 36, 36, 36, 36,  2,  2,  2,  2,  2,  2, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36,  2,  2, 36, 36, 36,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24,  2,  2,  2,  2,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24, 24,  2,  2,  2,  2,  2, 18, 18,  2, 18,  2, 18, 18, 18, 18,\n+   18,  2, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n+   18, 18, 18, 18, 18, 18, 18, 18, 18, 18,  2, 18,  2, 18, 18, 18,\n+   18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n+   18, 18, 18, 18,  2,  2, 18, 18, 18, 18, 18,  2, 18,  2, 18, 18,\n+   18, 18, 18, 18,  2,  2, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n+    2,  2, 18, 18, 18, 18, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,  2, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25,  2,  2,  2,  2, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25,  2, 25, 25, 25, 25, 25, 25, 25,  0,  0,  0,  0, 25,\n+   25,  2,  2,  2,  2,  2, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,\n+   33, 33, 33, 33, 33, 33,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  2,  8,  2,  2,\n+    2,  2,  2,  8,  2,  2,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+    8,  0,  8,  8,  8,  8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n+   30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,  2,\n+   30, 30, 30, 30,  2,  2, 30, 30, 30, 30, 30, 30, 30,  2, 30,  2,\n+   30, 30, 30, 30,  2,  2, 30,  2, 30, 30, 30, 30,  2,  2, 30, 30,\n+   30, 30, 30, 30, 30,  2, 30,  2, 30, 30, 30, 30,  2,  2, 30, 30,\n+   30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,  2, 30, 30,\n+   30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n+   30,  2,  2, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n+   30, 30, 30,  2,  2,  2, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n+    2,  2,  2,  2,  2,  2, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n+   29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,  2,  2, 29, 29,\n+   29, 29, 29, 29,  2,  2, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n+   28, 28, 28, 28, 28, 28, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34,  2,  2,  2, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35,  0,  0,  0, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,  2,\n+    2,  2,  2,  2,  2,  2, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n+   45, 45, 45,  2, 45, 45, 45, 45, 45, 45, 45,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n+   44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,  0,  0,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,\n+   43, 43, 43, 43, 43, 43, 43, 43, 43, 43,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,\n+   46, 46, 46,  2, 46, 46, 46,  2, 46, 46,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n+   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n+   31, 31, 31, 31,  2,  2, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n+    2,  2,  2,  2,  2,  2, 32, 32,  0,  0, 32,  0, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32,  2, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    2,  2,  2,  2,  2,  2, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,  2,\n+    2,  2,  2,  2,  2,  2, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32,  2,  2,  2,  2,  2, 28, 28, 28, 28, 28, 28,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n+   48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n+   48, 48, 48, 48, 48,  2, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n+   48, 48,  2,  2,  2,  2, 48,  2,  2,  2, 48, 48, 48, 48, 48, 48,\n+   48, 48, 48, 48, 48, 48, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n+   52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n+   52, 52, 52, 52,  2,  2, 52, 52, 52, 52, 52,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,\n+   58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,\n+   58, 58,  2,  2,  2,  2, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,\n+    2,  2,  2,  2,  2,  2, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,\n+   58,  2,  2,  2, 58, 58, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,\n+   54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,\n+   54, 54,  2,  2, 54, 54, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,\n+   91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,\n+   91, 91, 91, 91, 91,  2, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,\n+   91, 91, 91,  2,  2, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,\n+    2,  2,  2,  2,  2,  2, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,\n+   91, 91, 91, 91,  2,  2,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,\n+   62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,\n+   62, 62,  2,  2,  2,  2, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,\n+   62, 62, 62,  2,  2,  2, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,\n+   76, 76, 76, 76, 76, 76, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,\n+   93, 93, 93, 93, 93, 93, 93, 93, 93, 93,  2,  2,  2,  2,  2,  2,\n+    2,  2, 93, 93, 93, 93, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,  2,  2,\n+    2, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+    2,  2,  2, 70, 70, 70, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,\n+   73, 73, 73, 73, 73, 73,  6,  6,  6,  6,  6,  6,  6,  6,  6,  2,\n+    2,  2,  2,  2,  2,  2,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+    8,  2,  2,  8,  8,  8, 76, 76, 76, 76, 76, 76, 76, 76,  2,  2,\n+    2,  2,  2,  2,  2,  2,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,\n+    1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,\n+    0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,\n+    0,  2,  2,  2,  2,  2, 19, 19, 19, 19, 19, 19,  9,  9,  9,  9,\n+    9,  6, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19,  9,  9,  9,  9,  9, 19, 19, 19, 19,  9,  9,  9,  9,\n+    9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  6, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n+    2,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  2,  2,  9,  9,\n+    9,  9,  9,  9,  2,  2,  9,  9,  9,  9,  9,  9,  9,  9,  2,  9,\n+    2,  9,  2,  9,  2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  2,  2,  9,  9,  9,  9,  9,  2,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  2,  2,  9,  9,  9,  9,\n+    9,  9,  2,  9,  9,  9,  2,  2,  9,  9,  9,  2,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 19,  2,  2,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  2, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19,  2,  2,  2,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,\n+   19, 19,  0,  0,  0,  0,  0,  0, 19,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 19,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,\n+    0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  2,  2,  2,  2,  2, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\n+   27, 27, 27, 27, 27, 27,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n+   56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n+   56, 56, 56, 56, 56,  2, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,\n+   55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  2,  2,  2,  2,  2, 55,\n+   55, 55, 55, 55, 55, 55, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,\n+   61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,  2,  2,\n+    2,  2,  2,  2,  2, 61, 61,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 61, 30, 30, 30, 30, 30, 30, 30,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 30, 30, 30, 30, 30, 30, 30,  2, 30, 30,\n+   30, 30, 30, 30, 30,  2,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    2, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  2,  2,  2,  2,  0,  0,  0,  0,  0, 13,  0, 13,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    1,  1,  1,  1, 12, 12,  0,  0,  0,  0,  0,  0,  0,  0, 13, 13,\n+   13, 13,  0,  0,  0,  0,  2, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  1,\n+    1,  0,  0, 15, 15, 15,  0, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17,  0,  0, 17, 17, 17,  2,  2,  2,  2,  2, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26,  2, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12,  2,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12,  0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17,  0, 17, 17, 17, 17, 17, 17, 17, 17,  0,  0,\n+    0,  0,  0,  0,  0,  0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   13, 13, 13,  2,  2,  2, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,\n+   39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,\n+   39, 39, 39,  2,  2,  2, 39, 39, 39, 39, 39, 39, 39,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+   86, 86, 86, 86, 86, 86, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n+   77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\n+   77, 77,  2,  2,  2,  2, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,\n+   79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,\n+    0, 19, 19, 19, 19, 19,  2,  2, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19, 19, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n+   60, 60, 60,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    2,  2,  2,  2,  2,  2, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,\n+   65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,  2,  2,\n+    2,  2,  2,  2,  2,  2, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,\n+   75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,  2,  2,  2,  2,\n+    2,  2,  2,  2, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,\n+    2,  2,  2,  2,  2,  2, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,\n+   69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,\n+   69, 69, 69, 69,  0, 69, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n+   74, 74, 74, 74, 74, 74, 74, 74, 74, 74,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 74, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12,  2,  2,  2, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,\n+   84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,\n+   84, 84, 84, 84,  2,  0, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,\n+    2,  2,  2,  2, 84, 84, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,\n+   33, 33, 33, 33, 33,  2, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,\n+   68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,\n+   68, 68, 68, 68,  2,  2, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,\n+    2,  2, 68, 68, 68, 68, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,\n+   92, 92, 92, 92, 92, 92, 92, 92, 92,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2, 92, 92, 92, 92, 92, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\n+   87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2, 30, 30, 30, 30, 30, 30,  2,  2, 30,\n+   30, 30, 30, 30, 30,  2,  2, 30, 30, 30, 30, 30, 30,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9, 19, 19, 19, 19,\n+    0,  0,  2,  2,  2,  2, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\n+   87, 87, 87, 87,  2,  2, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\n+    2,  2,  2,  2,  2,  2, 12, 12, 12, 12,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 12, 12, 12, 12, 12, 12, 12,  2,  2,  2,\n+    2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12,  2,  2,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   13, 13, 13, 13,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    2,  2,  2,  2,  2,  2, 19, 19, 19, 19, 19, 19, 19,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  2,  2,\n+    2,  2,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2, 14, 14,\n+   14, 14, 14,  2, 14,  2, 14, 14,  2, 14, 14,  2, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14,  3,  3,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  0,  0,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n+    1,  1,  1,  1,  6,  6,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,\n+    0,  0,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  2,  2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17,  0,  0,  2,  2, 12, 12, 12, 12, 12, 12,  2,  2,\n+   12, 12, 12, 12, 12, 12,  2,  2, 12, 12, 12, 12, 12, 12,  2,  2,\n+   12, 12, 12,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,\n+    0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,\n+    0,  0,  0,  0,  2,  2, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n+   49, 49,  2, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n+   49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,  2, 49, 49,\n+   49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n+   49,  2, 49, 49,  2, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n+   49, 49, 49, 49,  2,  2, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n+   49,  2,  2,  2,  2,  2,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  2,  2,  2,  9,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  1,  2,  2, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,\n+   71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,\n+   71, 71, 71,  2,  2,  2, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,\n+   67, 67, 67, 67, 67, 67, 67,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,\n+   42, 42, 42, 42, 42, 42, 42, 42, 42, 42,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,\n+   41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,\n+   41,  2,  2,  2,  2,  2,118,118,118,118,118,118,118,118,118,118,\n+  118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,\n+  118,  2,  2,  2,  2,  2, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,\n+   53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,\n+   53, 53, 53, 53,  2, 53, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59,  2,  2,  2,  2, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n+   40, 40, 40, 40, 40, 40, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,\n+   51, 51, 51, 51, 51, 51, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n+   50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n+   50, 50, 50, 50,  2,  2, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n+    2,  2,  2,  2,  2,  2,135,135,135,135,135,135,135,135,135,135,\n+  135,135,135,135,135,135,135,135,135,135,  2,  2,  2,  2,135,135,\n+  135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,\n+  135,135,  2,  2,  2,  2,106,106,106,106,106,106,106,106,106,106,\n+  106,106,106,106,106,106,106,106,106,106,106,106,106,106,  2,  2,\n+    2,  2,  2,  2,  2,  2,104,104,104,104,104,104,104,104,104,104,\n+  104,104,104,104,104,104,104,104,104,104,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,104,110,110,110,110,110,110,110,110,110,110,\n+  110,110,110,110,110,110,110,110,110,110,110,110,110,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,110,110,110,110,110,110,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,110,110,110,110,110,110,110,110,  2,  2,\n+    2,  2,  2,  2,  2,  2, 47, 47, 47, 47, 47, 47,  2,  2, 47,  2,\n+   47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n+   47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,  2, 47, 47,  2,\n+    2,  2, 47,  2,  2, 47, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,\n+   81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,  2, 81, 81, 81,\n+   81, 81, 81, 81, 81, 81,120,120,120,120,120,120,120,120,120,120,\n+  120,120,120,120,120,120,116,116,116,116,116,116,116,116,116,116,\n+  116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,\n+  116,116,116,116,116,  2,  2,  2,  2,  2,  2,  2,  2,116,116,116,\n+  116,116,116,116,116,116,128,128,128,128,128,128,128,128,128,128,\n+  128,128,128,128,128,128,128,128,128,  2,128,128,  2,  2,  2,  2,\n+    2,128,128,128,128,128, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,\n+   66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,\n+   66, 66,  2,  2,  2, 66, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,\n+   72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,\n+    2,  2,  2,  2,  2, 72, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98,\n+   98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,\n+   97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,  2,  2,\n+    2,  2, 97, 97, 97, 97,  2,  2, 97, 97, 97, 97, 97, 97, 97, 97,\n+   97, 97, 97, 97, 97, 97, 57, 57, 57, 57,  2, 57, 57,  2,  2,  2,\n+    2,  2, 57, 57, 57, 57, 57, 57, 57, 57,  2, 57, 57, 57,  2, 57,\n+   57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,\n+   57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,  2,  2, 57, 57,\n+   57,  2,  2,  2,  2, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,  2,\n+    2,  2,  2,  2,  2,  2, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,\n+   88, 88, 88, 88, 88, 88,117,117,117,117,117,117,117,117,117,117,\n+  117,117,117,117,117,117,112,112,112,112,112,112,112,112,112,112,\n+  112,112,112,112,112,112,112,112,112,112,112,112,112,  2,  2,  2,\n+    2,112,112,112,112,112,112,112,112,112,112,112,112,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,\n+   78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,  2,  2,  2, 78,\n+   78, 78, 78, 78, 78, 78, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,\n+   83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,  2,  2, 83, 83,\n+   83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+   82, 82, 82, 82, 82, 82, 82, 82, 82,  2,  2,  2,  2,  2, 82, 82,\n+   82, 82, 82, 82, 82, 82,122,122,122,122,122,122,122,122,122,122,\n+  122,122,122,122,122,122,122,122,  2,  2,  2,  2,  2,  2,  2,122,\n+  122,122,122,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,122,\n+  122,122,122,122,122,122, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,\n+   89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,  2,\n+    2,  2,  2,  2,  2,  2,130,130,130,130,130,130,130,130,130,130,\n+  130,130,130,130,130,130,130,130,130,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,130,130,130,  2,  2,  2,  2,  2,  2,  2,\n+  130,130,130,130,130,130,144,144,144,144,144,144,144,144,144,144,\n+  144,144,144,144,144,144,144,144,144,144,144,144,144,144,  2,  2,\n+    2,  2,  2,  2,  2,  2,144,144,144,144,144,144,144,144,144,144,\n+    2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  2,156,156,156,156,156,156,156,156,156,156,\n+  156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,\n+    2,156,156,156,  2,  2,156,156,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,147,147,147,147,147,147,147,147,147,147,\n+  147,147,147,147,147,147,147,147,147,147,147,147,147,147,  2,  2,\n+    2,  2,  2,  2,  2,  2,148,148,148,148,148,148,148,148,148,148,\n+  148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,\n+    2,  2,  2,  2,  2,  2,153,153,153,153,153,153,153,153,153,153,\n+  153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,\n+  153,153,  2,  2,  2,  2,149,149,149,149,149,149,149,149,149,149,\n+  149,149,149,149,149,149,149,149,149,149,149,149,149,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\n+   94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\n+   94, 94, 94, 94,  2,  2,  2,  2, 94, 94, 94, 94, 94, 94, 94, 94,\n+   94, 94, 94, 94, 94, 94,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 94, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,\n+   85, 85, 85, 85, 85, 85, 85, 85,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2, 85,  2,  2,101,101,101,101,101,101,101,101,101,101,\n+  101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,  2,\n+    2,  2,  2,  2,  2,  2,101,101,101,101,101,101,101,101,101,101,\n+    2,  2,  2,  2,  2,  2, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,  2, 96, 96, 96, 96,\n+   96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,  2,  2,\n+    2,  2,  2,  2,  2,  2,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,100,100,100,100,100,100,100,100,100,100,\n+  100,100,100,100,100,100,  2, 36, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,108,108,108,108,108,108,108,108,108,108,\n+  108,108,108,108,108,108,108,108,  2,108,108,108,108,108,108,108,\n+  108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,\n+  108,108,108,108,108,  2,129,129,129,129,129,129,129,  2,129,  2,\n+  129,129,129,129,  2,129,129,129,129,129,129,129,129,129,129,129,\n+  129,129,129,129,  2,129,129,129,129,129,129,129,129,129,129,129,\n+    2,  2,  2,  2,  2,  2,109,109,109,109,109,109,109,109,109,109,\n+  109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,\n+  109,  2,  2,  2,  2,  2,109,109,109,109,109,109,109,109,109,109,\n+    2,  2,  2,  2,  2,  2,107,107,107,107,  2,107,107,107,107,107,\n+  107,107,107,  2,  2,107,107,  2,  2,107,107,107,107,107,107,107,\n+  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,  2,\n+  107,107,107,107,107,107,107,  2,107,107,  2,107,107,107,107,107,\n+    2,  1,107,107,107,107,107,107,107,107,107,  2,  2,107,107,  2,\n+    2,107,107,107,  2,  2,107,  2,  2,  2,  2,  2,  2,107,  2,  2,\n+    2,  2,  2,107,107,107,107,107,107,107,  2,  2,107,107,107,107,\n+  107,107,107,  2,  2,  2,107,107,107,107,107,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,137,137,137,137,137,137,137,137,137,137,\n+  137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,\n+  137,137,  2,137,137,137,137,137,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,124,124,124,124,124,124,124,124,124,124,\n+  124,124,124,124,124,124,124,124,124,124,124,124,124,124,  2,  2,\n+    2,  2,  2,  2,  2,  2,124,124,124,124,124,124,124,124,124,124,\n+    2,  2,  2,  2,  2,  2,123,123,123,123,123,123,123,123,123,123,\n+  123,123,123,123,123,123,123,123,123,123,123,123,  2,  2,123,123,\n+  123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\n+  123,123,123,123,  2,  2,114,114,114,114,114,114,114,114,114,114,\n+  114,114,114,114,114,114,114,114,114,114,114,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,114,114,114,114,114,114,114,114,114,114,\n+    2,  2,  2,  2,  2,  2, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32, 32, 32,  2,  2,  2,102,102,102,102,102,102,102,102,102,102,\n+  102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,  2,\n+    2,  2,  2,  2,  2,  2,102,102,102,102,102,102,102,102,102,102,\n+    2,  2,  2,  2,  2,  2,126,126,126,126,126,126,126,126,126,126,\n+  126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,\n+  126,  2,  2,126,126,126,126,126,126,126,126,126,126,126,126,126,\n+  126,126,  2,  2,  2,  2,142,142,142,142,142,142,142,142,142,142,\n+  142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,\n+  142,142,  2,  2,  2,  2,125,125,125,125,125,125,125,125,125,125,\n+  125,125,125,125,125,125,125,125,125,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,125,154,154,154,154,154,154,154,  2,  2,154,\n+    2,  2,154,154,154,154,154,154,154,154,  2,154,154,  2,154,154,\n+  154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,\n+  154,154,154,154,154,154,154,154,154,154,154,154,  2,154,154,  2,\n+    2,154,154,154,154,154,154,154,154,154,154,154,154,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,154,154,154,154,154,154,154,154,154,154,\n+    2,  2,  2,  2,  2,  2,150,150,150,150,150,150,150,150,  2,  2,\n+  150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,\n+  150,150,150,150,150,150,150,150,150,150,150,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,141,141,141,141,141,141,141,141,141,141,\n+  141,141,141,141,141,141,141,141,141,141,141,141,141,141,  2,  2,\n+    2,  2,  2,  2,  2,  2,140,140,140,140,140,140,140,140,140,140,\n+  140,140,140,140,140,140,140,140,140,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,121,121,121,121,121,121,121,121,121,121,\n+  121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,  2,\n+    2,  2,  2,  2,  2,  2,133,133,133,133,133,133,133,133,133,  2,\n+  133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,\n+  133,133,133,133,133,133,133,133,133,133,133,133,133,  2,133,133,\n+  133,133,133,133,133,133,133,133,133,133,133,133,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,133,133,133,133,133,133,133,133,133,133,\n+  133,133,133,  2,  2,  2,134,134,134,134,134,134,134,134,134,134,\n+  134,134,134,134,134,134,  2,  2,134,134,134,134,134,134,134,134,\n+  134,134,134,134,134,134,134,134,134,134,134,134,134,134,  2,134,\n+  134,134,134,134,134,134,134,134,134,134,134,134,134,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,138,138,138,138,138,138,138,  2,138,138,\n+    2,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,\n+  138,138,138,138,138,138,138,138,138,138,138,138,138,  2,  2,  2,\n+  138,  2,138,138,  2,138,138,138,138,138,138,138,138,138,  2,  2,\n+    2,  2,  2,  2,  2,  2,138,138,138,138,138,138,138,138,138,138,\n+    2,  2,  2,  2,  2,  2,143,143,143,143,143,143,  2,143,143,  2,\n+  143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,\n+  143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,\n+  143,143,143,143,143,  2,143,143,  2,143,143,143,143,143,143,  2,\n+    2,  2,  2,  2,  2,  2,143,143,143,143,143,143,143,143,143,143,\n+    2,  2,  2,  2,  2,  2,145,145,145,145,145,145,145,145,145,145,\n+  145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,  2,\n+    2,  2,  2,  2,  2,  2, 86,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 22, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,\n+   63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,\n+    2,  2,  2,  2,  2,  2, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,\n+   63, 63, 63, 63, 63,  2, 63, 63, 63, 63, 63,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 63, 63, 63, 63,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,\n+   80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,\n+   80, 80, 80, 80, 80,  2, 80, 80, 80, 80, 80, 80, 80, 80, 80,  2,\n+    2,  2,  2,  2,  2,  2,127,127,127,127,127,127,127,127,127,127,\n+  127,127,127,127,127,127,127,127,127,127,127,127,127,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 79, 79, 79, 79, 79, 79, 79, 79, 79,  2,\n+    2,  2,  2,  2,  2,  2,115,115,115,115,115,115,115,115,115,115,\n+  115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,\n+  115,115,115,115,115,  2,115,115,115,115,115,115,115,115,115,115,\n+    2,  2,  2,  2,115,115,103,103,103,103,103,103,103,103,103,103,\n+  103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,\n+  103,103,103,103,  2,  2,103,103,103,103,103,103,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,119,119,119,119,119,119,119,119,119,119,\n+  119,119,119,119,119,119,119,119,119,119,119,119,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,119,119,119,119,119,119,119,119,119,119,\n+    2,119,119,119,119,119,119,119,  2,119,119,119,119,119,119,119,\n+  119,119,119,119,119,119,119,119,119,119,119,119,119,119,  2,  2,\n+    2,  2,  2,119,119,119,146,146,146,146,146,146,146,146,146,146,\n+  146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,\n+  146,  2,  2,  2,  2,  2, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n+   99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n+   99,  2,  2,  2,  2, 99, 99, 99, 99, 99, 99, 99, 99, 99,  2,  2,\n+    2,  2,  2,  2,  2, 99,136,139,  0,  0,155,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 13, 13,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,136,136,136,136,136,136,136,136,136,136,\n+  136,136,136,136,136,136,136,136,136,136,136,136,136,136,  2,  2,\n+    2,  2,  2,  2,  2,  2,155,155,155,155,155,155,155,155,155,155,\n+  155,155,155,155,155,155,155,155,155,155,155,155,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,136,136,136,136,136,136,136,136,136,  2,\n+    2,  2,  2,  2,  2,  2, 17, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15,  2, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 17, 17, 17, 17,  2,  2,\n+    2,  2,  2,  2,  2,  2,139,139,139,139,139,139,139,139,139,139,\n+  139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,\n+  139,139,  2,  2,  2,  2,105,105,105,105,105,105,105,105,105,105,\n+  105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,\n+  105,  2,  2,  2,  2,  2,105,105,105,105,105,105,105,105,105,105,\n+  105,105,105,  2,  2,  2,105,105,105,105,105,105,105,105,105,  2,\n+    2,  2,  2,  2,  2,  2,105,105,105,105,105,105,105,105,105,105,\n+    2,  2,105,105,105,105,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,\n+    1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,\n+    2,  2,  2,  2,  2,  2,  9,  9,  9,  9,  9,  9,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  2,  0,  0,  2,  2,  0,  2,  2,  0,  0,  2,  2,  0,\n+    0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,\n+    0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,\n+    0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    2,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  2,  0,  2,  2,  2,\n+    0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  2,  2,  0,  0,131,131,131,131,131,131,131,131,131,131,\n+  131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,\n+  131,131,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,131,131,131,131,131,  2,131,131,131,131,131,131,131,131,131,\n+  131,131,131,131,131,131, 56, 56, 56, 56, 56, 56, 56,  2, 56, 56,\n+   56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,  2,\n+    2, 56, 56, 56, 56, 56, 56, 56,  2, 56, 56,  2, 56, 56, 56, 56,\n+   56,  2,  2,  2,  2,  2,151,151,151,151,151,151,151,151,151,151,\n+  151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,\n+  151,151,151,  2,  2,  2,151,151,151,151,151,151,151,151,151,151,\n+  151,151,151,151,  2,  2,151,151,151,151,151,151,151,151,151,151,\n+    2,  2,  2,  2,151,151,152,152,152,152,152,152,152,152,152,152,\n+  152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,\n+    2,  2,  2,  2,  2,152,113,113,113,113,113,113,113,113,113,113,\n+  113,113,113,113,113,113,113,113,113,113,113,  2,  2,113,113,113,\n+  113,113,113,113,113,113,113,113,113,113,113,113,113,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,132,132,132,132,132,132,132,132,132,132,\n+  132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,\n+  132,132,  2,  2,  2,  2,132,132,132,132,132,132,132,132,132,132,\n+    2,  2,  2,  2,132,132,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  2,  2,  3,  3,  3,  3,  2,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  2,  3,  3,  2,  3,  2,  2,  3,  2,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  3,  3,  3,  3,  2,  3,\n+    2,  3,  2,  2,  2,  2,  2,  2,  3,  2,  2,  2,  2,  3,  2,  3,\n+    2,  3,  2,  3,  3,  3,  2,  3,  3,  2,  3,  2,  2,  3,  2,  3,\n+    2,  3,  2,  3,  2,  3,  2,  3,  3,  2,  3,  2,  2,  3,  3,  3,\n+    3,  2,  3,  3,  3,  3,  3,  3,  3,  2,  3,  3,  3,  3,  2,  3,\n+    3,  3,  3,  2,  3,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  2,  2,  2,  2,  2,  3,  3,  3,  2,  3,  3,  3,  3,  3,\n+    2,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 15,  0,  0,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,\n+    0,  2,  2,  2,  2,  2, 13, 13, 13, 13, 13,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 13,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+   13,  2,  2,  2,  2,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  1,  2,  3,  4,  5,  6,  0,\n+    0,  0,  0,  7,  8,  9, 10, 11,  0, 12,  0,  0,  0,  0, 13,  0,\n+    0, 14,  0,  0,  0,  0,  0,  0,  0,  0, 15, 16,  0, 17, 18, 19,\n+    0,  0,  0, 20, 21, 22,  0, 23,  0, 24,  0, 25,  0, 26,  0,  0,\n+    0,  0,  0, 27, 28,  0, 29,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 30, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 33,\n+   34, 35, 36, 37, 38, 39, 40,  0,  0,  0, 41,  0, 42, 43, 44, 45,\n+   46, 47, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 50, 51, 52,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 53, 54, 55, 56, 57, 58,\n+   59, 60, 61, 62,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 63,  0, 64,  0,  0,  0,  0,  0,\n+    0,  0,  0, 65,  0,  0,  0,  0, 66,  0,  0,  0, 67,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 68,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69, 70, 71,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 72, 73, 74, 75, 76, 77, 78, 79, 80,  0,\n+};\n+static const uint16_t\n+_hb_ucd_u16[11328] =\n+{\n+     0,   0,   1,   2,   3,   4,   5,   6,   0,   0,   7,   8,   9,  10,  11,  12,\n+    13,  13,  13,  14,  15,  13,  13,  16,  17,  18,  19,  20,  21,  22,  13,  23,\n+    13,  13,  13,  24,  25,  11,  11,  11,  11,  26,  11,  27,  28,  29,  30,  31,\n+    32,  32,  32,  32,  32,  32,  32,  33,  34,  35,  36,  11,  37,  38,  13,  39,\n+     9,   9,   9,  11,  11,  11,  13,  13,  40,  13,  13,  13,  41,  13,  13,  13,\n+    13,  13,  13,  42,   9,  43,  11,  11,  44,  45,  32,  46,  47,  48,  49,  50,\n+    51,  52,  48,  48,  53,  32,  54,  55,  48,  48,  48,  48,  48,  56,  57,  58,\n+    59,  60,  48,  32,  61,  48,  48,  48,  48,  48,  62,  63,  64,  48,  65,  66,\n+    48,  67,  68,  69,  48,  70,  71,  72,  72,  72,  48,  73,  74,  75,  76,  32,\n+    77,  48,  48,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n+    91,  84,  85,  92,  93,  94,  95,  96,  97,  98,  85,  99, 100, 101,  89, 102,\n+   103,  84,  85, 104, 105, 106,  89, 107, 108, 109, 110, 111, 112, 113,  95, 114,\n+   115, 116,  85, 117, 118, 119,  89, 120, 121, 116,  85, 122, 123, 124,  89, 125,\n+   126, 116,  48, 127, 128, 129,  89, 130, 131, 132,  48, 133, 134, 135,  95, 136,\n+   137,  48,  48, 138, 139, 140,  72,  72, 141,  48, 142, 143, 144, 145,  72,  72,\n+   146, 147, 148, 149, 150,  48, 151, 152, 153, 154,  32, 155, 156, 157,  72,  72,\n+    48,  48, 158, 159, 160, 161, 162, 163, 164, 165,   9,   9, 166,  11,  11, 167,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48, 168, 169,  48,  48, 168,  48,  48, 170, 171, 172,  48,  48,\n+    48, 171,  48,  48,  48, 173, 174, 175,  48, 176,   9,   9,   9,   9,   9, 177,\n+   178,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48, 179,  48, 180, 181,  48,  48,  48,  48, 182, 183,\n+   184, 185,  48, 186,  48, 187, 184, 188,  48,  48,  48, 189, 190, 191, 192, 193,\n+   194, 192,  48,  48, 195,  48,  48, 196, 197,  48, 198,  48,  48,  48,  48, 199,\n+    48, 200, 201, 202, 203,  48, 204, 205,  48,  48, 206,  48, 207, 208, 209, 209,\n+    48, 210,  48,  48,  48, 211, 212, 213, 192, 192, 214, 215, 216,  72,  72,  72,\n+   217,  48,  48, 218, 219, 160, 220, 221, 222,  48, 223,  64,  48,  48, 224, 225,\n+    48,  48, 226, 227, 228,  64,  48, 229, 230,   9,   9, 231, 232, 233, 234, 235,\n+    11,  11, 236,  27,  27,  27, 237, 238,  11, 239,  27,  27,  32,  32,  32, 240,\n+    13,  13,  13,  13,  13,  13,  13,  13,  13, 241,  13,  13,  13,  13,  13,  13,\n+   242, 243, 242, 242, 243, 244, 242, 245, 246, 246, 246, 247, 248, 249, 250, 251,\n+   252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 262,  72, 263, 264, 216,\n+   265, 266, 267, 268, 269, 270, 271, 271, 272, 273, 274, 209, 275, 276, 209, 277,\n+   278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278,\n+   279, 209, 280, 209, 209, 209, 209, 281, 209, 282, 278, 283, 209, 284, 285, 209,\n+   209, 209, 286,  72, 287,  72, 270, 270, 270, 288, 209, 209, 209, 209, 289, 270,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 290, 291, 209, 209, 292,\n+   209, 209, 209, 209, 209, 209, 293, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+   209, 209, 209, 209, 209, 209, 294, 295, 270, 296, 209, 209, 297, 278, 298, 278,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+   278, 278, 278, 278, 278, 278, 278, 278, 299, 300, 278, 278, 278, 301, 278, 302,\n+   278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278,\n+   209, 209, 209, 278, 303, 209, 209, 304, 209, 305, 209, 209, 209, 209, 209, 209,\n+     9,   9, 306,  11,  11, 307, 308, 309,  13,  13,  13,  13,  13,  13, 310, 311,\n+    11,  11, 312,  48,  48,  48, 313, 314,  48, 315, 316, 316, 316, 316,  32,  32,\n+   317, 318, 319, 320, 321, 322,  72,  72, 209, 323, 209, 209, 209, 209, 209, 324,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 325,  72, 326,\n+   327, 328, 329, 330, 137,  48,  48,  48,  48, 331, 178,  48,  48,  48,  48, 332,\n+   333,  48,  48, 137,  48,  48,  48,  48, 200, 334,  48,  48, 209, 209, 324,  48,\n+   209, 335, 336, 209, 337, 338, 209, 209, 336, 209, 209, 338, 209, 209, 209, 209,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 209, 209, 209, 209,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 151,\n+    48, 339,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48, 151, 209, 209, 209, 286,  48,  48, 229,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+   340,  48, 341,  72,  13,  13, 342, 343,  13, 344,  48,  48,  48,  48, 345, 346,\n+    31, 347, 348, 349,  13,  13,  13, 350, 351, 352, 353, 354, 355,  72,  72, 356,\n+   357,  48, 358, 359,  48,  48,  48, 360, 361,  48,  48, 362, 363, 192,  32, 364,\n+    64,  48, 365,  48, 366, 367,  48, 151,  77,  48,  48, 368, 369, 370, 371, 372,\n+    48,  48, 373, 374, 375, 376,  48, 377,  48,  48,  48, 378, 379, 380, 381, 382,\n+   383, 384, 316,  11,  11, 385, 386,  11,  11,  11,  11,  11,  48,  48, 387, 192,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 388,  48, 389,  48,  48, 206,\n+   390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390,\n+   390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48, 204,  48,  48,  48,  48,  48,  48, 207,  72,  72,\n+   392, 393, 394, 395, 396,  48,  48,  48,  48,  48,  48, 397, 398, 399,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48, 400,  72,  48,  48,  48,  48, 401,  48,  48,  74,  72,  72, 402,\n+    32, 403,  32, 404, 405, 406, 407,  73,  48,  48,  48,  48,  48,  48,  48, 408,\n+   409,   2,   3,   4,   5, 410, 411, 412,  48, 413,  48, 200, 414, 415, 416, 417,\n+   418,  48, 172, 419, 204, 204,  72,  72,  48,  48,  48,  48,  48,  48,  48,  71,\n+   420, 270, 270, 421, 271, 271, 271, 422, 423, 424, 425,  72,  72, 209, 209, 426,\n+    72,  72,  72,  72,  72,  72,  72,  72,  48, 151,  48,  48,  48, 101, 427, 428,\n+    48,  48, 429,  48, 430,  48,  48, 431,  48, 432,  48,  48, 433, 434,  72,  72,\n+     9,   9, 435,  11,  11,  48,  48,  48,  48, 204, 192,   9,   9, 436,  11, 437,\n+    48,  48,  74,  48,  48,  48, 438,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48, 315,  48, 199,  74,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+   439,  48,  48, 440,  48, 441,  48, 442,  48, 200, 443,  72,  72,  72,  48, 444,\n+    48, 445,  48, 446,  72,  72,  72,  72,  48,  48,  48, 447, 270, 448, 270, 270,\n+   449, 450,  48, 451, 452, 453,  48, 454,  48, 455,  72,  72, 456,  48, 457, 458,\n+    48,  48,  48, 459,  48, 460,  48, 461,  48, 462, 463,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48, 196,  72,  72,  72,   9,   9,   9, 464,  11,  11,  11, 465,\n+    48,  48, 466, 192,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72, 270, 467,  48,  48, 468, 469,  72,  72,  72,  72,\n+    48, 455, 470,  48,  62, 471,  72,  72,  72,  72,  72,  48, 472,  72,  48, 315,\n+   473,  48,  48, 474, 475, 448, 476, 477, 222,  48,  48, 478, 479,  48, 196, 192,\n+   480,  48, 481, 482, 483,  48,  48, 484, 222,  48,  48, 485, 486, 487, 488, 489,\n+    48,  98, 490, 491,  72,  72,  72,  72, 492, 493, 494,  48,  48, 495, 496, 192,\n+   497,  84,  85, 498, 499, 500, 501, 502,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48, 503, 504, 505, 469,  72,  48,  48,  48, 506, 507, 192,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  48,  48, 508, 509, 510, 511,  72,  72,\n+    48,  48,  48, 512, 513, 192, 514,  72,  48,  48, 515, 516, 192,  72,  72,  72,\n+    48, 173, 517, 518,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48, 490, 519,  72,  72,  72,  72,  72,  72,   9,   9,  11,  11, 148, 520,\n+   521, 522,  48, 523, 524, 192,  72,  72,  72,  72, 525,  48,  48, 526, 527,  72,\n+   528,  48,  48, 529, 530, 531,  48,  48, 532, 533, 534,  72,  48,  48,  48, 196,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    85,  48, 508, 535, 536, 148, 175, 537,  48, 538, 539, 540,  72,  72,  72,  72,\n+   541,  48,  48, 542, 543, 192, 544,  48, 545, 546, 192,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  48, 547,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72, 101, 270, 548, 549, 550,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48, 207,  72,  72,  72,  72,  72,  72,\n+   271, 271, 271, 271, 271, 271, 551, 552,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48, 388,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48, 200, 553,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48, 315,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48, 196,  48, 200, 370,  72,  72,  72,  72,  72,  72,  48, 204, 554,\n+    48,  48,  48, 555, 556, 557, 558, 559,  48,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,   9,   9,  11,  11, 270, 560,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48, 561, 562, 563, 563, 564, 565,  72,  72,  72,  72, 566, 567,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  74,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 199,  72,  72,\n+   196,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48, 200,  72,  72,  72, 568, 569,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 206,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48,  48,  48,  71, 151, 196, 570, 571,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 325,\n+   209, 209, 572, 209, 209, 209, 573, 574, 575, 209, 576, 209, 209, 209, 577,  72,\n+   209, 209, 209, 209, 578,  72,  72,  72,  72,  72,  72,  72,  72,  72, 270, 579,\n+   209, 209, 209, 209, 209, 286, 270, 452,  72,  72,  72,  72,  72,  72,  72,  72,\n+     9, 580,  11, 581, 582, 583, 242,   9, 584, 585, 586, 587, 588,   9, 580,  11,\n+   589, 590,  11, 591, 592, 593, 594,   9, 595,  11,   9, 580,  11, 581, 582,  11,\n+   242,   9, 584, 594,   9, 595,  11,   9, 580,  11, 596,   9, 597, 598, 599, 600,\n+    11, 601,   9, 602, 603, 604, 605,  11, 606,   9, 607,  11, 608, 609, 609, 609,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209,\n+    32,  32,  32, 610,  32,  32, 611, 612, 613, 614,  45,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+   615, 616, 617,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48, 151, 618, 619,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  48,  48, 620, 621,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 622, 623,  72,  72,\n+     9,   9, 584,  11, 624, 370,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72, 488, 270, 270, 625, 626,  72,  72,  72,  72,\n+   488, 270, 627, 628,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+   629,  48, 630, 631, 632, 633, 634, 635, 636, 206, 637, 206,  72,  72,  72, 638,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+   209, 209, 326, 209, 209, 209, 209, 209, 209, 324, 335, 639, 639, 639, 209, 325,\n+   640, 209, 209, 209, 209, 209, 209, 209, 209, 209, 641,  72,  72,  72, 642, 209,\n+   643, 209, 209, 326, 577, 644, 325,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 645,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 646, 424, 424,\n+   209, 209, 209, 209, 209, 209, 209, 324, 209, 209, 209, 209, 209, 577, 326,  72,\n+   326, 209, 209, 209, 646, 176, 209, 209, 646, 209, 641, 644,  72,  72,  72,  72,\n+   209, 209, 209, 209, 209, 209, 209, 647, 209, 209, 209, 209, 648, 209, 209, 209,\n+   209, 209, 209, 209, 209, 324, 641, 649, 286, 209, 577, 286, 643, 286,  72,  72,\n+   209, 209, 209, 209, 209, 209, 209, 209, 209, 650, 209, 209, 287,  72,  72, 192,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 204,  72,  72,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48, 205,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48, 204,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 469,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 101,  72,\n+    48, 204,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  71,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,\n+   651,  72, 652, 652, 652, 652, 652, 652,  72,  72,  72,  72,  72,  72,  72,  72,\n+    32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  72,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 653,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,\n+   391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 654,\n+     0,   0,   0,   0,   1,   2,   1,   2,   0,   0,   3,   3,   4,   5,   4,   5,\n+     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,\n+     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   6,   0,   0,   7,   0,\n+     8,   8,   8,   8,   8,   8,   8,   9,  10,  11,  12,  11,  11,  11,  13,  11,\n+    14,  14,  14,  14,  14,  14,  14,  14,  15,  14,  14,  14,  14,  14,  14,  14,\n+    14,  14,  14,  16,  17,  18,  17,  17,  19,  20,  21,  21,  22,  21,  23,  24,\n+    25,  26,  27,  27,  28,  29,  27,  30,  27,  27,  27,  27,  27,  31,  27,  27,\n+    32,  33,  33,  33,  34,  27,  27,  27,  35,  35,  35,  36,  37,  37,  37,  38,\n+    39,  39,  40,  41,  42,  43,  44,  45,  45,  45,  27,  46,  47,  48,  49,  27,\n+    50,  50,  50,  50,  50,  51,  52,  50,  53,  54,  55,  56,  57,  58,  59,  60,\n+    61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,\n+    77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,\n+    93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\n+   109, 110, 111, 111, 112, 113, 114, 111, 115, 116, 117, 118, 119, 120, 121, 122,\n+   123, 124, 124, 125, 124, 126,  45,  45, 127, 128, 129, 130, 131, 132,  45,  45,\n+   133, 133, 133, 133, 134, 133, 135, 136, 133, 134, 133, 137, 137, 138,  45,  45,\n+   139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 140, 140, 141, 140, 140, 142,\n+   143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143,\n+   144, 144, 144, 144, 145, 146, 144, 144, 145, 144, 144, 147, 148, 149, 144, 144,\n+   144, 148, 144, 144, 144, 150, 144, 151, 144, 152, 153, 153, 153, 153, 153, 154,\n+   155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,\n+   155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,\n+   155, 155, 155, 155, 155, 155, 155, 155, 156, 157, 158, 158, 158, 158, 159, 160,\n+   161, 162, 163, 164, 165, 166, 167, 168, 169, 169, 169, 169, 169, 170, 171, 171,\n+   172, 173, 174, 174, 174, 174, 174, 175, 174, 174, 176, 155, 155, 155, 155, 177,\n+   178, 179, 180, 180, 181, 182, 183, 184, 185, 185, 186, 185, 187, 188, 169, 169,\n+   189, 190, 191, 191, 191, 192, 191, 193, 194, 194, 195,   8, 196,  45,  45,  45,\n+   197, 197, 197, 197, 198, 197, 197, 199, 200, 200, 200, 200, 201, 201, 201, 202,\n+   203, 203, 203, 204, 205, 206, 206, 206, 207, 140, 140, 208, 209, 210, 211, 212,\n+     4,   4, 213,   4,   4, 214, 215, 216,   4,   4,   4, 217,   8,   8,   8, 218,\n+     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,\n+    11, 219,  11,  11, 219, 220,  11, 221,  11,  11,  11, 222, 222, 223,  11, 224,\n+   225,   0,   0,   0,   0,   0, 226, 227, 228, 229,   0,   0,  45,   8,   8, 196,\n+     0,   0, 230, 231, 232,   0,   4,   4, 233,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0, 234,  45, 235,  45,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0, 237,   0, 238,   0,   0,   0,   0,   0,   0,\n+   239, 239, 240, 239, 239, 240,   4,   4, 241, 241, 241, 241, 241, 241, 241, 242,\n+   140, 140, 141, 243, 243, 243, 244, 245, 144, 246, 247, 247, 247, 247,  14,  14,\n+     0,   0,   0,   0,   0, 248,  45,  45, 249, 250, 249, 249, 249, 249, 249, 251,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 252,  45, 253,\n+   254,   0, 255, 256, 257, 258, 258, 258, 258, 259, 260, 261, 261, 261, 261, 262,\n+   263, 264, 264, 265, 143, 143, 143, 143, 266,   0, 264, 264,   0,   0, 267, 261,\n+   143, 266,   0,   0,   0,   0, 143, 268,   0,   0,   0,   0,   0, 261, 261, 269,\n+   261, 261, 261, 261, 261, 270,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,   0,   0,   0,   0,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 271,\n+   272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272,\n+   272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272,\n+   272, 272, 272, 272, 272, 272, 272, 272, 273, 272, 272, 272, 274, 275, 275, 275,\n+   276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276,\n+   276, 276, 277,  45,  14,  14,  14,  14,  14,  14, 278, 278, 278, 278, 278, 279,\n+     0,   0, 280,   4,   4,   4,   4,   4, 281,   4,   4,   4, 282,  45,  45, 283,\n+   284, 284, 285, 286, 287, 287, 287, 288, 289, 289, 289, 289, 290, 291,  50,  50,\n+   292, 292, 293, 294, 294, 295, 143, 296, 297, 297, 297, 297, 298, 299, 139, 300,\n+   301, 301, 301, 302, 303, 304, 139, 139, 305, 305, 305, 305, 306, 307, 308, 309,\n+   310, 311, 247,   4,   4, 312, 313, 153, 153, 153, 153, 153, 308, 308, 314, 315,\n+   143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143,\n+   143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143,\n+   143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143,\n+   143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 316, 143, 317, 143, 143, 318,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 319, 249, 249, 249, 249, 249, 249, 320,  45,  45,\n+   321, 322,  21, 323, 324,  27,  27,  27,  27,  27,  27,  27, 325,  48,  27,  27,\n+    27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,\n+    27,  27,  27, 326,  45,  27,  27,  27,  27, 327,  27,  27,  47,  45,  45, 328,\n+     8, 286, 329,   0,   0, 330, 331,  46,  27,  27,  27,  27,  27,  27,  27, 332,\n+   333,   0,   1,   2,   1,   2, 334, 260, 261, 335, 143, 266, 336, 337, 338, 339,\n+   340, 341, 342, 343, 344, 344,  45,  45, 341, 341, 341, 341, 341, 341, 341, 345,\n+   346,   0,   0, 347,  11,  11,  11,  11, 348, 349, 350,  45,  45,   0,   0, 351,\n+    45,  45,  45,  45,  45,  45,  45,  45, 352, 353, 354, 354, 354, 355, 356, 253,\n+   357, 357, 358, 359, 360, 361, 361, 362, 363, 364, 365, 365, 366, 367,  45,  45,\n+   368, 368, 368, 368, 368, 369, 369, 369, 370, 371, 372, 373, 373, 374, 373, 375,\n+   376, 376, 377, 378, 378, 378, 379,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380,\n+   380, 380, 380, 381, 380, 382, 383,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   384, 385, 385, 386, 387, 388, 389, 389, 390, 391, 392,  45,  45,  45, 393, 394,\n+   395, 396, 397, 398,  45,  45,  45,  45, 399, 399, 400, 401, 400, 402, 400, 400,\n+   403, 404, 405, 406, 407, 407, 408, 408, 409, 409,  45,  45, 410, 410, 411, 412,\n+   413, 413, 413, 414, 415, 416, 417, 418, 419, 420, 421,  45,  45,  45,  45,  45,\n+   422, 422, 422, 422, 423,  45,  45,  45, 424, 424, 424, 425, 424, 424, 424, 426,\n+   427, 427, 428, 429,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  27, 430, 431, 431, 432, 433,  45,  45,  45,  45,\n+   434, 434, 435, 436, 436, 437,  45,  45,  45,  45,  45, 438, 439,  45, 440, 441,\n+   442, 442, 442, 442, 443, 444, 442, 445, 446, 446, 446, 446, 447, 448, 449, 450,\n+   451, 451, 451, 452, 453, 454, 454, 455, 456, 456, 456, 456, 456, 456, 457, 458,\n+   459, 460, 459, 461,  45,  45,  45,  45, 462, 463, 464, 465, 465, 465, 466, 467,\n+   468, 469, 470, 471, 472, 473, 474, 475,  45,  45,  45,  45,  45,  45,  45,  45,\n+   476, 476, 476, 476, 476, 477, 478,  45, 479, 479, 479, 479, 480, 481,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45, 482, 482, 482, 483, 482, 484,  45,  45,\n+   485, 485, 485, 485, 486, 487, 488,  45, 489, 489, 489, 490, 491,  45,  45,  45,\n+   492, 493, 494, 492,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   495, 495, 495, 496,  45,  45,  45,  45,  45,  45, 497, 497, 497, 497, 497, 498,\n+   499, 500, 501, 502, 503, 504,  45,  45,  45,  45, 505, 506, 506, 505, 507,  45,\n+   508, 508, 508, 508, 509, 510, 510, 510, 510, 510, 511,  45, 512, 512, 512, 513,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   514, 515, 515, 516, 517, 515, 518, 519, 519, 520, 521, 522,  45,  45,  45,  45,\n+   523, 524, 524, 525, 526, 527, 528, 529, 530, 531, 532,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45, 533, 534,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45, 535, 536, 536, 536, 537,\n+   538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,\n+   538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,\n+   538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,\n+   538, 538, 538, 538, 538, 538, 538, 538, 538, 539,  45,  45,  45,  45,  45,  45,\n+   538, 538, 538, 538, 538, 538, 540, 541, 538, 538, 538, 538, 538, 538, 538, 538,\n+   538, 538, 538, 538, 542,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,\n+   543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543,\n+   543, 543, 544, 545,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,\n+   546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546,\n+   546, 546, 546, 546, 547,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278,\n+   278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278,\n+   278, 278, 278, 548, 549, 550, 551,  45,  45,  45,  45,  45,  45, 552, 553, 554,\n+   555, 555, 555, 555, 556, 557, 558, 559, 555,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45, 560, 560, 560, 560, 560, 561,  45,  45,  45,  45,  45,  45,\n+   562, 562, 562, 562, 563, 562, 562, 562, 564, 562,  45,  45,  45,  45, 565, 566,\n+   567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567,\n+   567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567,\n+   567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567,\n+   567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 568,\n+   567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567,\n+   569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569,\n+   569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 570,  45,  45,\n+   571,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   572, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258,\n+   258, 573,  45,  45,  45, 574, 575, 576, 576, 576, 576, 576, 576, 576, 576, 576,\n+   576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 577,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   578, 578, 578, 578, 578, 578, 579, 580, 581, 582, 267,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 583,\n+     0,   0, 584,   0,   0,   0, 585, 586, 587,   0, 588,   0,   0,   0, 589,  45,\n+    11,  11,  11,  11, 590,  45,  45,  45,  45,  45,  45,  45,  45,  45,   0, 267,\n+     0,   0,   0,   0,   0, 234,   0, 589,  45,  45,  45,  45,  45,  45,  45,  45,\n+     0,   0,   0,   0,   0, 226,   0,   0,   0, 591, 592, 593, 594,   0,   0,   0,\n+   595, 596,   0, 597, 598, 599,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 600,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 601,   0,   0,   0,\n+   602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602,\n+   602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602,\n+   602, 602, 602, 602, 602, 602, 602, 602, 603, 604, 605,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   606, 607, 608,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   609, 609, 610, 611, 612,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45, 613, 613, 613, 614,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 616, 617,  45,  45,\n+   618, 618, 618, 618, 619, 620,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45, 333,   0,   0,   0, 621,  45,  45,  45,  45,\n+   333,   0,   0, 622,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   623,  27, 624, 625, 626, 627, 628, 629, 630, 631, 632, 631,  45,  45,  45, 325,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+     0,   0, 253,   0,   0,   0,   0,   0,   0, 267, 228, 333, 333, 333,   0, 583,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 622,  45,  45,  45, 633,   0,\n+   634,   0,   0, 253, 589, 635, 583,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 636, 349, 349,\n+     0,   0,   0,   0,   0,   0,   0, 267,   0,   0,   0,   0,   0, 589, 253,  45,\n+   253,   0,   0,   0, 636, 286,   0,   0, 636,   0, 622, 635,  45,  45,  45,  45,\n+     0,   0,   0,   0,   0,   0,   0, 637,   0,   0,   0,   0, 638,   0,   0,   0,\n+     0,   0,   0,   0,   0, 267, 622, 639, 234,   0, 589, 234, 248, 234,  45,  45,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0, 330,   0,   0, 235,  45,  45, 286,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 319,  45,  45,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 640, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 319, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 566, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 641,  45,\n+   249, 319,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+    45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n+   249, 249, 249, 249, 642,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,\n+   643,  45,   0,   0,   0,   0,   0,   0,  45,  45,  45,  45,  45,  45,  45,  45,\n+     8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   939, 940, 941, 942, 946, 948,   0, 962, 969, 970, 971, 976,1001,1002,1003,1008,\n+     0,1033,1040,1041,1042,1043,1047,   0,   0,1080,1081,1082,1086,1110,   0,   0,\n+  1124,1125,1126,1127,1131,1133,   0,1147,1154,1155,1156,1161,1187,1188,1189,1193,\n+     0,1219,1226,1227,1228,1229,1233,   0,   0,1267,1268,1269,1273,1298,   0,1303,\n+   943,1128, 944,1129, 954,1139, 958,1143, 959,1144, 960,1145, 961,1146, 964,1149,\n+     0,   0, 973,1158, 974,1159, 975,1160, 983,1168, 978,1163, 988,1173, 990,1175,\n+   991,1176, 993,1178, 994,1179,   0,   0,1004,1190,1005,1191,1006,1192,1014,1199,\n+  1007,   0,   0,   0,1016,1201,1020,1206,   0,1022,1208,1025,1211,1023,1209,   0,\n+     0,   0,   0,1032,1218,1037,1223,1035,1221,   0,   0,   0,1044,1230,1045,1231,\n+  1049,1235,   0,   0,1058,1244,1064,1250,1060,1246,1066,1252,1067,1253,1072,1258,\n+  1069,1255,1077,1264,1074,1261,   0,   0,1083,1270,1084,1271,1085,1272,1088,1275,\n+  1089,1276,1096,1283,1103,1290,1111,1299,1115,1118,1307,1120,1309,1121,1310,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1053,1239,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1093,\n+  1280,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 949,1134,1010,\n+  1195,1050,1236,1090,1277,1341,1368,1340,1367,1342,1369,1339,1366,   0,1320,1347,\n+  1418,1419,1323,1350,   0,   0, 992,1177,1018,1204,1055,1241,1416,1417,1415,1424,\n+  1202,   0,   0,   0, 987,1172,   0,   0,1031,1217,1321,1348,1322,1349,1338,1365,\n+   950,1135, 951,1136, 979,1164, 980,1165,1011,1196,1012,1197,1051,1237,1052,1238,\n+  1061,1247,1062,1248,1091,1278,1092,1279,1071,1257,1076,1263,   0,   0, 997,1182,\n+     0,   0,   0,   0,   0,   0, 945,1130, 982,1167,1337,1364,1335,1362,1046,1232,\n+  1422,1423,1113,1301,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     8,   9,   0,  10,1425,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,\n+     0,   0,   0,   0,   0,1314,1427,   5,1434,1438,1443,   0,1450,   0,1455,1461,\n+  1514,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1446,1458,1468,1476,1480,1486,\n+  1517,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1489,1503,1494,1500,1508,   0,\n+     0,   0,   0,1520,1521,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1526,1528,   0,1525,   0,   0,   0,1522,   0,   0,   0,   0,1536,1532,1539,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1534,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1556,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1548,1550,   0,1547,   0,   0,   0,1567,   0,   0,   0,   0,1558,1554,1561,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1568,1569,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1529,1551,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1523,1545,1524,1546,   0,   0,1527,1549,   0,   0,1570,1571,1530,1552,1531,1553,\n+     0,   0,1533,1555,1535,1557,1537,1559,   0,   0,1572,1573,1544,1566,1538,1560,\n+  1540,1562,1541,1563,1542,1564,   0,   0,1543,1565,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1606,1607,1609,1608,1610,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1613,   0,1611,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1612,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1620,   0,   0,   0,   0,   0,   0,\n+     0,1623,   0,   0,1624,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1614,1615,1616,1617,1618,1619,1621,1622,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1628,1629,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1625,1626,   0,1627,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1634,   0,   0,1635,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1630,1631,1632,   0,   0,1633,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1639,   0,   0,1638,1640,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1636,1637,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1641,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1642,1644,1643,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1645,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1646,   0,   0,   0,   0,   0,   0,1648,1649,   0,1647,1650,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1651,1653,1652,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1654,   0,1655,1657,1656,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1659,   0,   0,   0,   0,   0,   0,   0,   0,   0,1660,   0,   0,\n+     0,   0,1661,   0,   0,   0,   0,1662,   0,   0,   0,   0,1663,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1658,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1664,   0,1665,1673,   0,1674,   0,   0,   0,   0,   0,   0,   0,\n+     0,1666,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1668,   0,   0,   0,   0,   0,   0,   0,   0,   0,1669,   0,   0,\n+     0,   0,1670,   0,   0,   0,   0,1671,   0,   0,   0,   0,1672,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1667,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1675,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1676,   0,1677,   0,1678,   0,1679,   0,1680,   0,\n+     0,   0,1681,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1682,   0,1683,   0,   0,\n+  1684,1685,   0,1686,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   953,1138, 955,1140, 956,1141, 957,1142,1324,1351, 963,1148, 965,1150, 968,1153,\n+   966,1151, 967,1152,1378,1380,1379,1381, 984,1169, 985,1170,1420,1421, 986,1171,\n+   989,1174, 995,1180, 998,1183, 996,1181, 999,1184,1000,1185,1015,1200,1329,1356,\n+  1017,1203,1019,1205,1021,1207,1024,1210,1687,1688,1027,1213,1026,1212,1028,1214,\n+  1029,1215,1030,1216,1034,1220,1036,1222,1039,1225,1038,1224,1334,1361,1336,1363,\n+  1382,1384,1383,1385,1056,1242,1057,1243,1059,1245,1063,1249,1689,1690,1065,1251,\n+  1068,1254,1070,1256,1386,1387,1388,1389,1691,1692,1073,1259,1075,1262,1079,1266,\n+  1078,1265,1095,1282,1098,1285,1097,1284,1390,1391,1392,1393,1099,1286,1100,1287,\n+  1101,1288,1102,1289,1105,1292,1104,1291,1106,1294,1107,1295,1108,1296,1114,1302,\n+  1119,1308,1122,1311,1123,1312,1186,1260,1293,1305,   0,1394,   0,   0,   0,   0,\n+   952,1137, 947,1132,1317,1344,1316,1343,1319,1346,1318,1345,1693,1695,1371,1375,\n+  1370,1374,1373,1377,1372,1376,1694,1696, 981,1166, 977,1162, 972,1157,1326,1353,\n+  1325,1352,1328,1355,1327,1354,1697,1698,1009,1194,1013,1198,1054,1240,1048,1234,\n+  1331,1358,1330,1357,1333,1360,1332,1359,1699,1700,1396,1401,1395,1400,1398,1403,\n+  1397,1402,1399,1404,1094,1281,1087,1274,1406,1411,1405,1410,1408,1413,1407,1412,\n+  1409,1414,1109,1297,1117,1306,1116,1304,1112,1300,   0,   0,   0,   0,   0,   0,\n+  1471,1472,1701,1705,1702,1706,1703,1707,1430,1431,1715,1719,1716,1720,1717,1721,\n+  1477,1478,1729,1731,1730,1732,   0,   0,1435,1436,1733,1735,1734,1736,   0,   0,\n+  1481,1482,1737,1741,1738,1742,1739,1743,1439,1440,1751,1755,1752,1756,1753,1757,\n+  1490,1491,1765,1768,1766,1769,1767,1770,1447,1448,1771,1774,1772,1775,1773,1776,\n+  1495,1496,1777,1779,1778,1780,   0,   0,1451,1452,1781,1783,1782,1784,   0,   0,\n+  1504,1505,1785,1788,1786,1789,1787,1790,   0,1459,   0,1791,   0,1792,   0,1793,\n+  1509,1510,1794,1798,1795,1799,1796,1800,1462,1463,1808,1812,1809,1813,1810,1814,\n+  1467,  21,1475,  22,1479,  23,1485,  24,1493,  27,1499,  28,1507,  29,   0,   0,\n+  1704,1708,1709,1710,1711,1712,1713,1714,1718,1722,1723,1724,1725,1726,1727,1728,\n+  1740,1744,1745,1746,1747,1748,1749,1750,1754,1758,1759,1760,1761,1762,1763,1764,\n+  1797,1801,1802,1803,1804,1805,1806,1807,1811,1815,1816,1817,1818,1819,1820,1821,\n+  1470,1469,1822,1474,1465,   0,1473,1825,1429,1428,1426,  12,1432,   0,  26,   0,\n+     0,1315,1823,1484,1466,   0,1483,1829,1433,  13,1437,  14,1441,1826,1827,1828,\n+  1488,1487,1513,  19,   0,   0,1492,1515,1445,1444,1442,  15,   0,1831,1832,1833,\n+  1502,1501,1516,  25,1497,1498,1506,1518,1457,1456,1454,  17,1453,1313,  11,   3,\n+     0,   0,1824,1512,1519,   0,1511,1830,1449,  16,1460,  18,1464,   4,   0,   0,\n+    30,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   2,   6,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1834,1835,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1836,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1837,1839,1838,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1840,   0,   0,   0,   0,1841,   0,   0,1842,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1843,   0,1844,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1845,   0,   0,1846,   0,   0,1847,   0,1848,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   937,   0,1850,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1849, 936, 938,\n+  1851,1852,   0,   0,1853,1854,   0,   0,1855,1856,   0,   0,   0,   0,   0,   0,\n+  1857,1858,   0,   0,1861,1862,   0,   0,1863,1864,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1867,1868,1869,1870,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1859,1860,1865,1866,   0,   0,   0,   0,   0,   0,1871,1872,1873,1874,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,  32,  33,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1875,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1877,   0,1878,   0,\n+  1879,   0,1880,   0,1881,   0,1882,   0,1883,   0,1884,   0,1885,   0,1886,   0,\n+  1887,   0,1888,   0,   0,1889,   0,1890,   0,1891,   0,   0,   0,   0,   0,   0,\n+  1892,1893,   0,1894,1895,   0,1896,1897,   0,1898,1899,   0,1900,1901,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1876,   0,   0,   0,   0,   0,   0,   0,   0,   0,1902,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1904,   0,1905,   0,\n+  1906,   0,1907,   0,1908,   0,1909,   0,1910,   0,1911,   0,1912,   0,1913,   0,\n+  1914,   0,1915,   0,   0,1916,   0,1917,   0,1918,   0,   0,   0,   0,   0,   0,\n+  1919,1920,   0,1921,1922,   0,1923,1924,   0,1925,1926,   0,1927,1928,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1903,   0,   0,1929,1930,1931,1932,   0,   0,   0,1933,   0,\n+   710, 385, 724, 715, 455, 103, 186, 825, 825, 242, 751, 205, 241, 336, 524, 601,\n+   663, 676, 688, 738, 411, 434, 474, 500, 649, 746, 799, 108, 180, 416, 482, 662,\n+   810, 275, 462, 658, 692, 344, 618, 679, 293, 388, 440, 492, 740, 116, 146, 168,\n+   368, 414, 481, 527, 606, 660, 665, 722, 781, 803, 809, 538, 553, 588, 642, 758,\n+   811, 701, 233, 299, 573, 612, 487, 540, 714, 779, 232, 267, 412, 445, 457, 585,\n+   594, 766, 167, 613, 149, 148, 560, 589, 648, 768, 708, 345, 411, 704, 105, 259,\n+   313, 496, 518, 174, 542, 120, 307, 101, 430, 372, 584, 183, 228, 529, 650, 697,\n+   424, 732, 428, 349, 632, 355, 517, 110, 135, 147, 403, 580, 624, 700, 750, 170,\n+   193, 245, 297, 374, 463, 543, 763, 801, 812, 815, 162, 384, 420, 730, 287, 330,\n+   337, 366, 459, 476, 509, 558, 591, 610, 726, 652, 734, 759, 154, 163, 198, 473,\n+   683, 697, 292, 311, 353, 423, 572, 494, 113, 217, 259, 280, 314, 499, 506, 603,\n+   608, 752, 778, 782, 788, 117, 557, 748, 774, 320, 109, 126, 260, 265, 373, 411,\n+   479, 523, 655, 737, 823, 380, 765, 161, 395, 398, 438, 451, 502, 516, 537, 583,\n+   791, 136, 340, 769, 122, 273, 446, 727, 305, 322, 400, 496, 771, 155, 190, 269,\n+   377, 391, 406, 432, 501, 519, 599, 684, 687, 749, 776, 175, 452, 191, 480, 510,\n+   659, 772, 805, 813, 397, 444, 619, 566, 568, 575, 491, 471, 707, 111, 636, 156,\n+   153, 288, 346, 578, 256, 435, 383, 729, 680, 767, 694, 295, 128, 210,   0,   0,\n+   227,   0, 379,   0,   0, 150, 493, 525, 544, 551, 552, 556, 783, 576, 604,   0,\n+   661,   0, 703,   0,   0, 735, 743,   0,   0,   0, 793, 794, 795, 808, 741, 773,\n+   118, 127, 130, 166, 169, 177, 207, 213, 215, 226, 229, 268, 270, 317, 327, 329,\n+   335, 369, 375, 381, 404, 441, 448, 458, 477, 484, 503, 539, 545, 547, 546, 548,\n+   549, 550, 554, 555, 561, 564, 569, 591, 593, 595, 598, 607, 620, 625, 625, 651,\n+   690, 695, 705, 706, 716, 717, 733, 735, 777, 786, 790, 315, 869, 623,   0,   0,\n+   102, 145, 134, 115, 129, 138, 165, 171, 207, 202, 206, 212, 227, 231, 240, 243,\n+   250, 254, 294, 296, 303, 308, 319, 325, 321, 329, 326, 335, 341, 357, 360, 362,\n+   370, 379, 388, 389, 393, 421, 424, 438, 456, 454, 458, 465, 477, 535, 485, 490,\n+   493, 507, 512, 514, 521, 522, 525, 526, 528, 533, 532, 541, 565, 569, 574, 586,\n+   591, 597, 607, 637, 647, 674, 691, 693, 695, 698, 703, 699, 705, 704, 702, 706,\n+   709, 717, 728, 736, 747, 754, 770, 777, 783, 784, 786, 787, 790, 802, 825, 848,\n+   847, 857,  55,  65,  66, 883, 892, 916, 822, 824,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1586,   0,1605,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1602,1603,1934,1935,1574,1575,\n+  1576,1577,1579,1580,1581,1583,1584,   0,1585,1587,1588,1589,1591,   0,1592,   0,\n+  1593,1594,   0,1595,1596,   0,1598,1599,1600,1601,1604,1582,1578,1590,1597,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1936,   0,1937,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1938,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1939,1940,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1941,1942,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1944,1943,   0,1945,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1946,1947,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1948,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1949,1950,\n+  1951,1952,1953,1954,1955,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1956,1957,1958,1960,1959,\n+  1961,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   106, 104, 107, 826, 114, 118, 119, 121, 123, 124, 127, 125,  34, 830, 130, 131,\n+   132, 137, 827,  35, 133, 139, 829, 142, 143, 112, 144, 145, 924, 151, 152,  37,\n+   157, 158, 159, 160,  38, 165, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179,\n+   181, 182, 182, 182, 833, 468, 184, 185, 834, 187, 188, 189, 196, 192, 194, 195,\n+   197, 199, 200, 201, 203, 204, 204, 206, 208, 209, 211, 218, 213, 219, 214, 216,\n+   153, 234, 221, 222, 223, 220, 225, 224, 230, 835, 235, 236, 237, 238, 239, 244,\n+   836, 837, 247, 248, 249, 246, 251,  39,  40, 253, 255, 255, 838, 257, 258, 259,\n+   261, 839, 262, 263, 301, 264,  41, 266, 270, 272, 271, 841, 274, 842, 277, 276,\n+   278, 281, 282,  42, 283, 284, 285, 286,  43, 843,  44, 289, 290, 291, 293, 934,\n+   298, 845, 845, 621, 300, 300,  45, 852, 894, 302, 304,  46, 306, 309, 310, 312,\n+   316,  48,  47, 317, 846, 318, 323, 324, 325, 324, 328, 329, 333, 331, 332, 334,\n+   335, 336, 338, 339, 342, 343, 347, 351, 849, 350, 348, 352, 354, 359, 850, 361,\n+   358, 356,  49, 363, 365, 367, 364,  50, 369, 371, 851, 376, 386, 378,  53, 381,\n+    52,  51, 140, 141, 387, 382, 614,  78, 388, 389, 390, 394, 392, 856,  54, 399,\n+   396, 402, 404, 858, 405, 401, 407,  55, 408, 409, 410, 413, 859, 415,  56, 417,\n+   860, 418,  57, 419, 422, 424, 425, 861, 840, 862, 426, 863, 429, 431, 427, 433,\n+   437, 441, 438, 439, 442, 443, 864, 436, 449, 450,  58, 454, 453, 865, 447, 460,\n+   866, 867, 461, 466, 465, 464,  59, 467, 470, 469, 472, 828, 475, 868, 478, 870,\n+   483, 485, 486, 871, 488, 489, 872, 873, 495, 497,  60, 498,  61,  61, 504, 505,\n+   507, 508, 511,  62, 513, 874, 515, 875, 518, 844, 520, 876, 877, 878,  63,  64,\n+   528, 880, 879, 881, 882, 530, 531, 531, 533,  66, 534,  67,  68, 884, 536, 538,\n+   541,  69, 885, 549, 886, 887, 556, 559,  70, 561, 562, 563, 888, 889, 889, 567,\n+    71, 890, 570, 571,  72, 891, 577,  73, 581, 579, 582, 893, 587,  74, 590, 592,\n+   596,  75, 895, 896,  76, 897, 600, 898, 602, 605, 607, 899, 900, 609, 901, 611,\n+   853,  77, 615, 616,  79, 617, 252, 902, 903, 854, 855, 621, 622, 731,  80, 627,\n+   626, 628, 164, 629, 630, 631, 633, 904, 632, 634, 639, 640, 635, 641, 646, 651,\n+   638, 643, 644, 645, 905, 907, 906,  81, 653, 654, 656, 911, 657, 908,  82,  83,\n+   909, 910,  84, 664, 665, 666, 667, 669, 668, 671, 670, 674, 672, 673, 675,  85,\n+   677, 678,  86, 681, 682, 912, 685, 686,  87, 689,  36, 913, 914,  88,  89, 696,\n+   702, 709, 711, 915, 712, 713, 718, 719, 917, 831, 721, 720, 723, 832, 725, 728,\n+   918, 919, 739, 742, 744, 920, 745, 753, 756, 757, 755, 760, 761, 921, 762,  90,\n+   764, 922,  91, 775, 279, 780, 923, 925,  92,  93, 785, 926,  94, 927, 787, 787,\n+   789, 928, 792,  95, 796, 797, 798, 800,  96, 929, 802, 804, 806,  97,  98, 807,\n+   930,  99, 931, 932, 933, 814, 100, 816, 817, 818, 819, 820, 821, 935,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+};\n+static const int16_t\n+_hb_ucd_i16[196] =\n+{\n+      0,    0,    0,    0,    1,   -1,    0,    0,    2,    0,   -2,    0,    0,    0,    0,    2,\n+      0,   -2,    0,    0,    0,    0,    0,   16,    0,    0,    0,  -16,    0,    0,    1,   -1,\n+      0,    0,    0,    1,   -1,    0,    0,    0,    0,    1,   -1,    0,    3,    3,    3,   -3,\n+     -3,   -3,    0,    0,    0, 2016,    0,    0,    0,    0,    0, 2527, 1923, 1914, 1918,    0,\n+   2250,    0,    0,    0,    0,    0,    0,  138,    0,    7,    0,    0,   -7,    0,    0,    0,\n+      1,   -1,    1,   -1,   -1,    1,   -1,    0, 1824,    0,    0,    0,    0,    0, 2104,    0,\n+   2108, 2106,    0, 2106, 1316,    0,    0,    0,    0,    1,   -1,    1,   -1, -138,    0,    0,\n+      1,   -1,    8,    8,    8,    0,    7,    7,    0,    0,   -8,   -8,   -8,   -7,   -7,    0,\n+      1,   -1,    0,    2,-1316,    1,   -1,    0,   -1,    1,   -1,    1,   -1,    3,    1,   -1,\n+     -3,    1,   -1,    1,   -1,    0,    0,-1914,-1918,    0,    0,-1923,-1824,    0,    0,    0,\n+      0,-2016,    0,    0,    1,   -1,    0,    1,    0,    0,-2104,    0,    0,    0,    0,-2106,\n+  -2108,-2106,    0,    0,    1,   -1,-2250,    0,    0,    0,-2527,    0,    0,   -2,    0,    1,\n+     -1,    0,    1,   -1,\n+};\n+\n+static inline uint_fast8_t\n+_hb_ucd_gc (unsigned u)\n+{\n+  return u<1114110u?_hb_ucd_u8[2176+(((_hb_ucd_u16[((_hb_ucd_u8[u>>4>>5])<<5)+((u>>4)&31u)])<<4)+((u)&15u))]:2;\n+}\n+static inline uint_fast8_t\n+_hb_ucd_ccc (unsigned u)\n+{\n+  return u<125259u?_hb_ucd_u8[15060+(((_hb_ucd_u8[13636+(((_hb_ucd_u8[12656+(u>>3>>4)])<<4)+((u>>3)&15u))])<<3)+((u)&7u))]:0;\n+}\n+static inline unsigned\n+_hb_ucd_b4 (const uint8_t* a, unsigned i)\n+{\n+  return (a[i>>1]>>((i&1u)<<2))&15u;\n+}\n+static inline int_fast16_t\n+_hb_ucd_bmg (unsigned u)\n+{\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[16372+(((_hb_ucd_b4(16244+_hb_ucd_u8,u>>2>>6))<<6)+((u>>2)&63u))])<<2)+((u)&3u)]:0;\n+}\n+static inline uint_fast8_t\n+_hb_ucd_sc (unsigned u)\n+{\n+  return u<918000u?_hb_ucd_u8[19126+(((_hb_ucd_u16[3040+(((_hb_ucd_u8[17332+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:2;\n+}\n+static inline uint_fast16_t\n+_hb_ucd_dm (unsigned u)\n+{\n+  return u<195102u?_hb_ucd_u16[6144+(((_hb_ucd_u8[29430+(u>>6)])<<6)+((u)&63u))]:0;\n+}\n+\n+\n+#elif !defined(HB_NO_UCD_UNASSIGNED)\n+\n+static const uint8_t\n+_hb_ucd_u8[17508] =\n+{\n+    0,  1,  2,  3,  4,  5,  6,  7,  7,  8,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  9, 10, 11,  7,  7,  7,  7, 12, 13, 14, 14, 14, 15,\n+   16, 17, 18, 19, 20, 21, 22, 21, 23, 21, 21, 21, 21, 24,  7,  7,\n+   25, 26, 21, 21, 21, 21, 27, 28, 21, 21, 29, 30, 31, 32, 33, 34,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7, 35,  7, 36, 37,  7, 38,  7,  7,  7, 39, 21, 40,\n+    7,  7, 41, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   42, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 43,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 44,\n+    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n+   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n+   32, 33, 34, 34, 35, 36, 37, 38, 39, 34, 34, 34, 40, 41, 42, 43,\n+   44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n+   60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70, 71, 69, 72, 73,\n+   69, 69, 64, 74, 64, 64, 75, 76, 77, 78, 79, 80, 81, 82, 69, 83,\n+   84, 85, 86, 87, 88, 89, 69, 69, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 90, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 91,\n+   92, 34, 34, 34, 34, 34, 34, 34, 34, 93, 34, 34, 94, 95, 96, 97,\n+   98, 99,100,101,102,103,104,105, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,106,\n+  107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,\n+  108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,\n+  108,108, 34, 34,109,110,111,112, 34, 34,113,114,115,116,117,118,\n+  119,120,121,122,123,124,125,126,127,128,129,123, 34, 34,130,123,\n+  131,132,133,134,135,136,137,138,139,140,141,123,142,143,144,145,\n+  146,147,148,149,150,151,152,123,153,154,123,155,156,157,158,123,\n+  159,160,161,162,163,164,123,123,165,166,167,168,123,169,123,170,\n+   34, 34, 34, 34, 34, 34, 34,171,172, 34,173,123,123,123,123,123,\n+  123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,\n+   34, 34, 34, 34, 34, 34, 34, 34,174,123,123,123,123,123,123,123,\n+  123,123,123,123,123,123,123,123, 34, 34, 34, 34,175,123,123,123,\n+   34, 34, 34, 34,176,177,178,179,123,123,123,123,180,181,182,183,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,184,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34,185,186,123,123,123,123,123,\n+   34, 34,187, 34, 34,188,123,123,123,123,123,123,123,123,123,123,\n+  123,123,123,123,123,123,123,123,189,190,123,123,123,123,123,123,\n+   69,191,192,193,194,195,196,123,197,198,199,200,201,202,203,204,\n+   69, 69, 69, 69,205,206,123,123,123,123,123,123,123,123,123,123,\n+  207,123,208,123,123,209,123,123,123,123,123,123,123,123,123,123,\n+   34,210,211,123,123,123,123,123,212,213,214,123,215,216,123,123,\n+  217,218,219,220,221,123, 69,222, 69, 69, 69, 69, 69,223,224,225,\n+  226,227,228,229,230,231, 69,232,123,123,123,123,123,123,123,123,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,233, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,234, 34,\n+  235, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,236, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34,237,123,123,123,123,123,123,123,123,\n+   34, 34, 34, 34,238,123,123,123,123,123,123,123,123,123,123,123,\n+   34, 34, 34, 34, 34, 34,239,123,123,123,123,123,123,123,123,123,\n+  240,123,241,242,123,123,123,123,123,123,123,123,123,123,123,123,\n+  108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,243,\n+  108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,244,\n+    0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  2,  4,  5,  6,  2,\n+    7,  7,  7,  7,  7,  2,  8,  9, 10, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 12, 13, 14, 15, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 17, 18, 19,  1, 20, 20, 21, 22, 23, 24, 25,\n+   26, 27, 15,  2, 28, 29, 27, 30, 11, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 31, 11, 11, 11, 32, 16, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 33, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32, 32, 32, 32, 34, 34, 34, 34, 34, 34, 34, 34, 16, 32, 32, 32,\n+   32, 32, 32, 32, 11, 34, 34, 16, 34, 32, 32, 11, 34, 11, 16, 11,\n+   11, 34, 32, 11, 32, 16, 11, 34, 32, 32, 32, 11, 34, 16, 32, 11,\n+   34, 11, 34, 34, 32, 35, 32, 16, 36, 36, 37, 34, 38, 37, 34, 34,\n+   34, 34, 34, 34, 34, 34, 16, 32, 34, 38, 32, 11, 32, 32, 32, 32,\n+   32, 32, 16, 16, 16, 11, 34, 32, 34, 34, 11, 32, 32, 32, 32, 32,\n+   16, 16, 39, 16, 16, 16, 16, 16, 40, 40, 40, 40, 40, 40, 40, 40,\n+   40, 41, 41, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41,\n+   40, 40, 42, 41, 41, 41, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41,\n+   43, 43, 43, 43, 43, 43, 43, 43, 32, 32, 42, 32, 44, 45, 16, 10,\n+   44, 44, 41, 46, 11, 47, 47, 11, 34, 11, 11, 11, 11, 11, 11, 11,\n+   11, 48, 11, 11, 11, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 34,\n+   16, 11, 32, 16, 32, 32, 32, 32, 16, 16, 32, 49, 34, 32, 34, 11,\n+   32, 50, 43, 43, 51, 32, 32, 32, 11, 34, 34, 34, 34, 34, 34, 16,\n+   48, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 47, 52,  2,  2,  2,\n+   16, 16, 16, 16, 53, 54, 55, 56, 57, 43, 43, 43, 43, 43, 43, 43,\n+   43, 43, 43, 43, 43, 43, 43, 58, 59, 60, 43, 59, 44, 44, 44, 44,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 61, 44, 62,\n+   36, 63, 64, 44, 44, 44, 44, 44, 65, 65, 65,  8,  9, 66,  2, 67,\n+   43, 43, 43, 43, 43, 60, 68,  2, 69, 36, 36, 36, 36, 70, 43, 43,\n+    7,  7,  7,  7,  7,  2,  2, 36, 71, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 72, 43, 43, 43, 73, 50, 43, 43, 74, 75, 76, 43, 43, 36,\n+    7,  7,  7,  7,  7, 36, 77, 78,  2,  2,  2,  2,  2,  2,  2, 79,\n+   70, 36, 36, 36, 36, 36, 36, 36, 43, 43, 43, 43, 43, 80, 62, 36,\n+   36, 36, 36, 43, 43, 43, 43, 43, 71, 44, 44, 44, 44, 44, 44, 44,\n+    7,  7,  7,  7,  7, 36, 36, 36, 36, 36, 36, 36, 36, 70, 43, 43,\n+   43, 43, 40, 21,  2, 81, 57, 20, 36, 36, 36, 43, 43, 75, 43, 43,\n+   43, 43, 75, 43, 75, 43, 43, 44,  2,  2,  2,  2,  2,  2,  2, 64,\n+   36, 36, 36, 36, 70, 43, 44, 64, 36, 36, 36, 36, 36, 61, 44, 44,\n+   44, 44, 44, 44, 44, 44, 44, 44, 36, 36, 61, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 44, 44, 44, 44, 44, 57, 43, 43, 43, 43, 43, 43,\n+   43, 82, 43, 43, 43, 43, 43, 43, 43, 83, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 83, 71, 84, 85, 43, 43, 43, 83, 84, 85, 84,\n+   70, 43, 43, 43, 36, 36, 36, 36, 36, 43,  2,  7,  7,  7,  7,  7,\n+   86, 36, 36, 36, 36, 36, 36, 36, 70, 84, 62, 36, 36, 36, 61, 62,\n+   61, 62, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 61, 36, 36, 36,\n+   61, 61, 44, 36, 36, 44, 71, 84, 85, 43, 80, 87, 88, 87, 85, 61,\n+   44, 44, 44, 87, 44, 44, 36, 62, 36, 43, 44,  7,  7,  7,  7,  7,\n+   36, 20, 27, 27, 27, 56, 63, 80, 57, 83, 62, 36, 36, 61, 44, 62,\n+   61, 36, 62, 61, 36, 44, 80, 84, 85, 80, 44, 57, 80, 57, 43, 44,\n+   57, 44, 44, 44, 62, 36, 61, 61, 44, 44, 44,  7,  7,  7,  7,  7,\n+   43, 36, 70, 64, 44, 44, 44, 44, 57, 83, 62, 36, 36, 36, 36, 62,\n+   36, 62, 36, 36, 36, 36, 36, 36, 61, 36, 62, 36, 36, 44, 71, 84,\n+   85, 43, 43, 57, 83, 87, 85, 44, 61, 44, 44, 44, 44, 44, 44, 44,\n+   66, 44, 44, 44, 62, 43, 43, 43, 57, 84, 62, 36, 36, 36, 61, 62,\n+   61, 36, 62, 36, 36, 44, 71, 85, 85, 43, 80, 87, 88, 87, 85, 44,\n+   44, 44, 57, 83, 44, 44, 36, 62, 78, 27, 27, 27, 44, 44, 44, 44,\n+   44, 71, 62, 36, 36, 61, 44, 36, 61, 36, 36, 44, 62, 61, 61, 36,\n+   44, 62, 61, 44, 36, 61, 44, 36, 36, 36, 36, 36, 36, 44, 44, 84,\n+   83, 88, 44, 84, 88, 84, 85, 44, 61, 44, 44, 87, 44, 44, 44, 44,\n+   27, 89, 67, 67, 56, 90, 44, 44, 83, 84, 71, 36, 36, 36, 61, 36,\n+   61, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 44, 62, 43,\n+   83, 84, 88, 43, 80, 43, 43, 44, 44, 44, 57, 80, 36, 61, 44, 44,\n+   44, 44, 44, 91, 27, 27, 27, 89, 70, 84, 72, 36, 36, 36, 61, 36,\n+   36, 36, 62, 36, 36, 44, 71, 85, 84, 84, 88, 83, 88, 84, 43, 44,\n+   44, 44, 87, 88, 44, 44, 44, 61, 62, 61, 44, 44, 44, 44, 44, 44,\n+   43, 84, 36, 36, 36, 36, 61, 36, 36, 36, 36, 36, 36, 70, 71, 84,\n+   85, 43, 80, 84, 88, 84, 85, 77, 44, 44, 36, 92, 27, 27, 27, 93,\n+   27, 27, 27, 27, 89, 36, 36, 36, 57, 84, 62, 36, 36, 36, 36, 36,\n+   36, 36, 36, 61, 44, 36, 36, 36, 36, 62, 36, 36, 36, 36, 62, 44,\n+   36, 36, 36, 61, 44, 80, 44, 87, 84, 43, 80, 80, 84, 84, 84, 84,\n+   44, 84, 64, 44, 44, 44, 44, 44, 62, 36, 36, 36, 36, 36, 36, 36,\n+   70, 36, 43, 43, 43, 80, 44, 94, 36, 36, 36, 75, 43, 43, 43, 60,\n+    7,  7,  7,  7,  7,  2, 44, 44, 62, 61, 61, 36, 36, 61, 36, 36,\n+   36, 36, 62, 62, 36, 36, 36, 36, 70, 36, 43, 43, 43, 43, 71, 44,\n+   36, 36, 61, 81, 43, 43, 43, 44,  7,  7,  7,  7,  7, 44, 36, 36,\n+   77, 67,  2,  2,  2,  2,  2,  2,  2, 95, 95, 67, 43, 67, 67, 67,\n+    7,  7,  7,  7,  7, 27, 27, 27, 27, 27, 50, 50, 50,  4,  4, 84,\n+   36, 36, 36, 36, 62, 36, 36, 36, 36, 36, 36, 36, 36, 36, 61, 44,\n+   57, 43, 43, 43, 43, 43, 43, 83, 43, 43, 60, 43, 36, 36, 70, 43,\n+   43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 80, 67,\n+   67, 67, 67, 76, 67, 67, 90, 67,  2,  2, 95, 67, 21, 64, 44, 44,\n+   36, 36, 36, 36, 36, 92, 85, 43, 83, 43, 43, 43, 85, 83, 85, 71,\n+    7,  7,  7,  7,  7,  2,  2,  2, 36, 36, 36, 84, 43, 36, 36, 43,\n+   71, 84, 96, 92, 84, 84, 84, 36, 70, 43, 71, 36, 36, 36, 36, 36,\n+   36, 83, 85, 83, 84, 84, 85, 92,  7,  7,  7,  7,  7, 84, 85, 67,\n+   11, 11, 11, 48, 44, 44, 48, 44, 16, 16, 16, 16, 16, 53, 45, 16,\n+   36, 36, 36, 36, 61, 36, 36, 44, 36, 36, 36, 61, 61, 36, 36, 44,\n+   61, 36, 36, 44, 36, 36, 36, 61, 61, 36, 36, 44, 36, 36, 36, 36,\n+   36, 36, 36, 61, 36, 36, 36, 36, 36, 36, 36, 36, 36, 61, 57, 43,\n+    2,  2,  2,  2, 97, 27, 27, 27, 27, 27, 27, 27, 27, 27, 98, 44,\n+   67, 67, 67, 67, 67, 44, 44, 44, 11, 11, 11, 44, 16, 16, 16, 44,\n+   99, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 77, 72,\n+  100, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,101,102, 44,\n+   36, 36, 36, 36, 36, 63,  2,103,104, 36, 36, 36, 61, 44, 44, 44,\n+   36, 36, 36, 36, 36, 36, 61, 36, 36, 43, 80, 44, 44, 44, 44, 44,\n+   36, 43, 60, 64, 44, 44, 44, 44, 36, 43, 44, 44, 44, 44, 44, 44,\n+   61, 43, 44, 44, 44, 44, 44, 44, 36, 36, 43, 85, 43, 43, 43, 84,\n+   84, 84, 84, 83, 85, 43, 43, 43, 43, 43,  2, 86,  2, 66, 70, 44,\n+    7,  7,  7,  7,  7, 44, 44, 44, 27, 27, 27, 27, 27, 44, 44, 44,\n+    2,  2,  2,105,  2, 59, 43, 68, 36,106, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 61, 44, 44, 44, 36, 36, 70, 71, 36, 36, 36, 36,\n+   36, 36, 36, 36, 70, 61, 44, 44, 36, 36, 36, 44, 44, 44, 44, 44,\n+   36, 36, 36, 36, 36, 36, 36, 61, 43, 83, 84, 85, 83, 84, 44, 44,\n+   84, 83, 84, 84, 85, 43, 44, 44, 90, 44,  2,  7,  7,  7,  7,  7,\n+   36, 36, 36, 36, 36, 36, 36, 44, 36, 36, 61, 44, 44, 44, 44, 44,\n+   36, 36, 36, 36, 36, 36, 44, 44, 36, 36, 36, 36, 36, 44, 44, 44,\n+    7,  7,  7,  7,  7, 98, 44, 67, 67, 67, 67, 67, 67, 67, 67, 67,\n+   36, 36, 36, 70, 83, 85, 44,  2, 36, 36, 92, 83, 43, 43, 43, 80,\n+   83, 83, 85, 43, 43, 43, 83, 84, 84, 85, 43, 43, 43, 43, 80, 57,\n+    2,  2,  2, 86,  2,  2,  2, 44, 43, 43, 43, 43, 43, 43, 43,107,\n+   80, 44, 44, 44, 44, 44, 44, 44, 43, 43, 96, 36, 36, 36, 36, 36,\n+   36, 36, 83, 43, 43, 83, 83, 84, 84, 83, 96, 36, 36, 36, 44, 44,\n+   95, 67, 67, 67, 67, 50, 43, 43, 43, 43, 67, 67, 67, 67, 90, 44,\n+   43, 96, 36, 36, 36, 36, 36, 36, 92, 43, 43, 84, 43, 85, 43, 36,\n+   36, 36, 36, 83, 43, 84, 85, 85, 43, 84, 44, 44, 44, 44,  2,  2,\n+   36, 36, 84, 84, 84, 84, 43, 43, 43, 43, 84, 43, 44, 91,  2,  2,\n+    7,  7,  7,  7,  7, 44, 62, 36, 36, 36, 36, 36, 40, 40, 40,  2,\n+   16, 16, 16, 16,108, 44, 44, 44, 11, 11, 11, 11, 11, 47, 48, 11,\n+    2,  2,  2,  2, 44, 44, 44, 44, 43, 60, 43, 43, 43, 43, 43, 43,\n+   83, 43, 43, 43, 71, 36, 70, 36, 36, 36, 71, 92, 43, 61, 44, 44,\n+   16, 16, 16, 16, 16, 16, 40, 40, 40, 40, 40, 40, 40, 45, 16, 16,\n+   16, 16, 16, 16, 45, 16, 16, 16, 16, 16, 16, 16, 16,109, 40, 40,\n+   43, 43, 43, 43, 43, 57, 43, 43, 32, 32, 32, 16, 16, 16, 16, 32,\n+   16, 16, 16, 16, 11, 11, 11, 11, 16, 16, 16, 44, 11, 11, 11, 44,\n+   16, 16, 16, 16, 48, 48, 48, 48, 16, 16, 16, 16, 16, 16, 16, 44,\n+   16, 16, 16, 16,110,110,110,110, 16, 16,108, 16, 11, 11,111,112,\n+   41, 16,108, 16, 11, 11,111, 41, 16, 16, 44, 16, 11, 11,113, 41,\n+   16, 16, 16, 16, 11, 11,114, 41, 44, 16,108, 16, 11, 11,111,115,\n+  116,116,116,116,116,117, 65, 65,118,118,118,  2,119,120,119,120,\n+    2,  2,  2,  2,121, 65, 65,122,  2,  2,  2,  2,123,124,  2,125,\n+  126,  2,127,128,  2,  2,  2,  2,  2,  9,126,  2,  2,  2,  2,129,\n+   65, 65, 68, 65, 65, 65, 65, 65,130, 44, 27, 27, 27,  8,127,131,\n+   27, 27, 27, 27, 27,  8,127,102, 40, 40, 40, 40, 40, 40, 81, 44,\n+   20, 20, 20, 20, 20, 20, 20, 20, 43, 43, 43, 43, 43, 43,132, 51,\n+  107, 51,107, 43, 43, 43, 43, 43, 67,133, 67,134, 67, 34, 11, 16,\n+   11, 32,134, 67, 49, 11, 11, 67, 67, 67,133,133,133, 11, 11,135,\n+   11, 11, 35, 36, 39, 67, 16, 11,  8,  8, 49, 16, 16, 26, 67,136,\n+   27, 27, 27, 27, 27, 27, 27, 27,103,103,103,103,103,103,103,103,\n+  103,137,138,103,139, 67, 44, 44,  8,  8,140, 67, 67,  8, 67, 67,\n+  140, 26, 67,140, 67, 67, 67,140, 67, 67, 67, 67, 67, 67, 67,  8,\n+   67,140,140, 67, 67, 67, 67, 67, 67, 67,  8,  8,  8,  8,  8,  8,\n+    8,  8,  8,  8,  8,  8,  8,  8, 67, 67, 67, 67,  4,  4, 67, 67,\n+    8, 67, 67, 67,141,142, 67, 67, 67, 67, 67, 67, 67, 67,140, 67,\n+   67, 67, 67, 67, 67, 26,  8,  8,  8,  8, 67, 67, 67, 67, 67, 67,\n+   67, 67, 67, 67, 67, 67,  8,  8,  8, 67, 67, 67, 67, 67, 67, 67,\n+   67, 67, 67, 90, 44, 44, 44, 44, 67, 67, 67, 67, 67, 90, 44, 44,\n+   27, 27, 27, 27, 27, 27, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27,\n+   67, 67, 67, 26, 67, 67, 67, 67, 26, 67, 67, 67, 67, 67, 67, 67,\n+   67, 67, 67, 67,  8,  8,  8,  8, 67, 67, 67, 67, 67, 67, 67, 26,\n+   67, 67, 67, 67,  4,  4,  4,  4,  4,  4,  4, 27, 27, 27, 27, 27,\n+   27, 27, 67, 67, 67, 67, 67, 67,  8,  8,127,143,  8,  8,  8,  8,\n+    8,  8,  8,  4,  4,  4,  4,  4,  8,127,144,144,144,144,144,144,\n+  144,144,144,144,143,  8,  8,  8,  8,  8,  8,  8,  4,  4,  8,  8,\n+    8,  8,  8,  8,  8,  8,  4,  8,  8,  8,140, 26,  8,  8,140, 67,\n+   67, 67, 44, 67, 67, 67, 67, 67, 67, 67, 67, 55, 67, 67, 67, 67,\n+   11, 11, 11, 11, 11, 11, 11, 47, 16, 16, 16, 16, 16, 16, 16,108,\n+   32, 11, 32, 34, 34, 34, 34, 11, 32, 32, 34, 16, 16, 16, 40, 11,\n+   32, 32,136, 67, 67,134, 34,145, 43, 32, 44, 44, 91,  2, 97,  2,\n+   16, 16, 16,146, 44, 44,146, 44, 36, 36, 36, 36, 44, 44, 44, 52,\n+   64, 44, 44, 44, 44, 44, 44, 57, 36, 36, 36, 61, 44, 44, 44, 44,\n+   36, 36, 36, 61, 36, 36, 36, 61,  2,119,119,  2,123,124,119,  2,\n+    2,  2,  2,  6,  2,105,119,  2,119,  4,  4,  4,  4,  2,  2, 86,\n+    2,  2,  2,  2,  2,118,  2,  2,105,147,  2,  2,  2,  2,  2,  2,\n+   67, 64, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 55, 67, 67,\n+   67, 67, 44, 44, 44, 44, 44, 44, 67, 67, 67, 44, 44, 44, 44, 44,\n+   67, 67, 67, 67, 67, 67, 44, 44,  1,  2,148,149,  4,  4,  4,  4,\n+    4, 67,  4,  4,  4,  4,150,151,152,103,103,103,103, 43, 43, 84,\n+  153, 40, 40, 67,103,154, 63, 67, 36, 36, 36, 61, 57,155,156, 69,\n+   36, 36, 36, 36, 36, 63, 40, 69, 44, 44, 62, 36, 36, 36, 36, 36,\n+   67, 27, 27, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 90,\n+   27, 27, 27, 27, 27, 67, 67, 67, 67, 67, 67, 67, 27, 27, 27, 27,\n+  157, 27, 27, 27, 27, 27, 27, 27, 36, 36,106, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36,158,  2,  7,  7,  7,  7,  7, 36, 44, 44,\n+   32, 32, 32, 32, 32, 32, 32, 70, 51,159, 43, 43, 43, 43, 43, 86,\n+   32, 32, 32, 32, 32, 32, 40, 43, 36, 36, 36,103,103,103,103,103,\n+   43,  2,  2,  2, 44, 44, 44, 44, 41, 41, 41,156, 40, 40, 40, 40,\n+   41, 32, 32, 32, 32, 32, 32, 32, 16, 32, 32, 32, 32, 32, 32, 32,\n+   45, 16, 16, 16, 34, 34, 34, 32, 32, 32, 32, 32, 42,160, 34, 35,\n+   32, 32, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11, 11, 32,\n+   11, 11, 32, 32, 32, 32, 32, 32, 44, 32, 11, 11, 34,108, 44, 44,\n+   44, 44, 48, 35, 40, 35, 36, 36, 36, 71, 36, 71, 36, 70, 36, 36,\n+   36, 92, 85, 83, 67, 67, 80, 44, 27, 27, 27, 67,161, 44, 44, 44,\n+   36, 36,  2,  2, 44, 44, 44, 44, 84, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 84, 84, 84, 84, 84, 84, 84, 84, 43, 44, 44, 44, 44,  2,\n+   43, 36, 36, 36,  2, 72, 72, 70, 36, 36, 36, 43, 43, 43, 43,  2,\n+   36, 36, 36, 70, 43, 43, 43, 43, 43, 84, 44, 44, 44, 44, 44, 91,\n+   36, 70, 84, 43, 43, 84, 43, 84,162,  2,  2,  2,  2,  2,  2, 52,\n+    7,  7,  7,  7,  7, 44, 44,  2, 36, 36, 70, 69, 36, 36, 36, 36,\n+    7,  7,  7,  7,  7, 36, 36, 61, 36, 36, 36, 36, 70, 43, 43, 83,\n+   85, 83, 85, 80, 44, 44, 44, 44, 36, 70, 36, 36, 36, 36, 83, 44,\n+    7,  7,  7,  7,  7, 44,  2,  2, 69, 36, 36, 77, 67, 92, 83, 36,\n+   71, 43, 71, 70, 71, 36, 36, 43, 70, 61, 44, 44, 44, 44, 44, 44,\n+   44, 44, 44, 44, 44, 62,106,  2, 36, 36, 36, 36, 36, 92, 43, 84,\n+    2,106,163, 80, 44, 44, 44, 44, 62, 36, 36, 61, 62, 36, 36, 61,\n+   62, 36, 36, 61, 44, 44, 44, 44, 16, 16, 16, 16, 16,112, 40, 40,\n+   16, 16, 16, 16,109, 41, 44, 44, 36, 92, 85, 84, 83,162, 85, 44,\n+   36, 36, 44, 44, 44, 44, 44, 44, 36, 36, 36, 61, 44, 62, 36, 36,\n+  164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,\n+   16, 16, 16,108, 44, 44, 44, 44, 44,146, 16, 16, 44, 44, 62, 71,\n+   36, 36, 36, 36,166, 36, 36, 36, 36, 36, 36, 61, 36, 36, 61, 61,\n+   36, 62, 61, 36, 36, 36, 36, 36, 36, 41, 41, 41, 41, 41, 41, 41,\n+   41, 44, 44, 44, 44, 44, 44, 44, 44, 62, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36,144, 44, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36,161, 44,  2,  2,  2,167,128, 44, 44, 44,\n+    6,168,169,144,144,144,144,144,144,144,128,167,128,  2,125,170,\n+    2, 64,  2,  2,150,144,144,128,  2,171,  8,172, 66,  2, 44, 44,\n+   36, 36, 36, 36, 36, 36, 61, 79, 91,  2,  3,  2,  4,  5,  6,  2,\n+   16, 16, 16, 16, 16, 17, 18,127,128,  4,  2, 36, 36, 36, 36, 36,\n+   69, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40,\n+   44, 36, 36, 36, 44, 36, 36, 36, 44, 36, 36, 36, 44, 36, 61, 44,\n+   20,173, 56,174, 26,  8,140, 90, 44, 44, 44, 44, 79, 65, 67, 44,\n+   36, 36, 36, 36, 36, 36, 62, 36, 36, 36, 36, 36, 36, 61, 36, 62,\n+    2, 64, 44,175, 27, 27, 27, 27, 27, 27, 44, 55, 67, 67, 67, 67,\n+  103,103,139, 27, 89, 67, 67, 67, 67, 67, 67, 67, 67, 27, 67, 90,\n+   67, 67, 67, 67, 67, 67, 90, 44, 90, 44, 44, 44, 44, 44, 44, 44,\n+   67, 67, 67, 67, 67, 67, 50, 44,176, 27, 27, 27, 27, 27, 27, 27,\n+   27, 27, 27, 27, 27, 27, 44, 44, 27, 27, 44, 44, 44, 44, 62, 36,\n+  149, 36, 36, 36, 36,177, 44, 44, 36, 36, 36, 43, 43, 80, 44, 44,\n+   36, 36, 36, 36, 36, 36, 36, 91, 36, 36, 44, 44, 36, 36, 36, 36,\n+  178,103,103, 44, 44, 44, 44, 44, 11, 11, 11, 11, 16, 16, 16, 16,\n+   11, 11, 44, 44, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 44, 44,\n+   36, 36, 44, 44, 44, 44, 44, 91, 36, 36, 36, 44, 61, 36, 36, 36,\n+   36, 36, 36, 62, 61, 44, 61, 62, 36, 36, 36, 91, 27, 27, 27, 27,\n+   36, 36, 36, 77,157, 27, 27, 27, 44, 44, 44,175, 27, 27, 27, 27,\n+   36, 61, 36, 44, 44,175, 27, 27, 36, 36, 36, 27, 27, 27, 44, 91,\n+   36, 36, 36, 36, 36, 44, 44, 91, 36, 36, 36, 36, 44, 44, 27, 36,\n+   44, 27, 27, 27, 27, 27, 27, 27, 70, 43, 57, 80, 44, 44, 43, 43,\n+   36, 36, 62, 36, 62, 36, 36, 36, 36, 36, 36, 44, 43, 80, 44, 57,\n+   27, 27, 27, 27, 98, 44, 44, 44,  2,  2,  2,  2, 64, 44, 44, 44,\n+   36, 36, 36, 36, 36, 36,179, 30, 36, 36, 36, 36, 36, 36,179, 27,\n+   36, 36, 36, 36, 78, 36, 36, 36, 36, 36, 70, 80, 44,175, 27, 27,\n+    2,  2,  2, 64, 44, 44, 44, 44, 36, 36, 36, 44, 91,  2,  2,  2,\n+   36, 36, 36, 44, 27, 27, 27, 27, 36, 61, 44, 44, 27, 27, 27, 27,\n+   36, 44, 44, 44, 91,  2, 64, 44, 44, 44, 44, 44,175, 27, 27, 27,\n+   11, 47, 44, 44, 44, 44, 44, 44, 16,108, 44, 44, 44, 27, 27, 27,\n+   36, 36, 43, 43, 44, 44, 44, 44, 27, 27, 27, 27, 27, 27, 27, 98,\n+   36, 36, 36, 36, 36, 57,180, 44, 36, 44, 44, 44, 44, 44, 44, 44,\n+   27, 27, 27, 93, 44, 44, 44, 44,176, 27, 30,  2,  2, 44, 44, 44,\n+   36, 36,179, 27, 27, 27, 44, 44, 85, 96, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 43, 43, 43, 43, 43, 43, 43, 60,  2,  2,  2, 44,\n+   27, 27, 27,  7,  7,  7,  7,  7, 44, 44, 44, 44, 44, 44, 44, 57,\n+   84, 85, 43, 83, 85, 60,181,  2,  2, 44, 44, 44, 44, 44, 79, 44,\n+   43, 71, 36, 36, 36, 36, 36, 36, 36, 36, 36, 70, 43, 43, 85, 43,\n+   43, 43, 80,  7,  7,  7,  7,  7,  2,  2, 92, 96, 44, 44, 44, 44,\n+   36, 70,  2, 61, 44, 44, 44, 44, 36, 92, 84, 43, 43, 43, 43, 83,\n+   96, 36, 63,  2, 59, 43, 60, 85,  7,  7,  7,  7,  7, 63, 63,  2,\n+  175, 27, 27, 27, 27, 27, 27, 27, 27, 27, 98, 44, 44, 44, 44, 44,\n+   36, 36, 36, 36, 36, 36, 84, 85, 43, 84, 83, 43,  2,  2,  2, 80,\n+   36, 36, 36, 61, 61, 36, 36, 62, 36, 36, 36, 36, 36, 36, 36, 62,\n+   36, 36, 36, 36, 63, 44, 44, 44, 36, 36, 36, 36, 36, 36, 36, 70,\n+   84, 85, 43, 43, 43, 80, 44, 44, 43, 84, 62, 36, 36, 36, 61, 62,\n+   61, 36, 62, 36, 36, 57, 71, 84, 83, 84, 88, 87, 88, 87, 84, 44,\n+   61, 44, 44, 87, 44, 44, 62, 36, 36, 84, 44, 43, 43, 43, 80, 44,\n+   43, 43, 80, 44, 44, 44, 44, 44, 36, 36, 92, 84, 43, 43, 43, 43,\n+   84, 43, 83, 71, 36, 63,  2,  2,  7,  7,  7,  7,  7,  2, 91, 71,\n+   84, 85, 43, 43, 83, 83, 84, 85, 83, 43, 36, 72, 44, 44, 44, 44,\n+   36, 36, 36, 36, 36, 36, 36, 92, 84, 43, 43, 44, 84, 84, 43, 85,\n+   60,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 36, 36, 43, 44,\n+   84, 85, 43, 43, 43, 83, 85, 85, 60,  2, 61, 44, 44, 44, 44, 44,\n+    2,  2,  2,  2,  2,  2, 64, 44, 36, 36, 36, 36, 36, 70, 85, 84,\n+   43, 43, 43, 85, 61, 44, 44, 44, 84, 43, 43, 85, 43, 43, 44, 44,\n+    7,  7,  7,  7,  7, 27,  2, 95, 43, 43, 43, 43, 85, 60, 44, 44,\n+   27, 98, 44, 44, 44, 44, 44, 62, 36, 36, 36, 61, 62, 44, 36, 36,\n+   36, 36, 62, 61, 36, 36, 36, 36, 84, 84, 84, 87, 88, 57, 83, 71,\n+   96, 85,  2, 64, 44, 44, 44, 44, 36, 36, 36, 36, 44, 36, 36, 36,\n+   92, 84, 43, 43, 44, 43, 84, 84, 71, 72, 88, 44, 44, 44, 44, 44,\n+   70, 43, 43, 43, 43, 71, 36, 36, 36, 70, 43, 43, 83, 70, 43, 60,\n+    2,  2,  2, 59, 44, 44, 44, 44, 70, 43, 43, 83, 85, 43, 36, 36,\n+   36, 36, 36, 36, 36, 43, 43, 43, 43, 43, 43, 83, 43,  2, 72,  2,\n+    2, 64, 44, 44, 44, 44, 44, 44, 43, 43, 43, 80, 43, 43, 43, 85,\n+   63,  2,  2, 44, 44, 44, 44, 44,  2, 36, 36, 36, 36, 36, 36, 36,\n+   44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 87, 43, 43, 43,\n+   83, 43, 85, 80, 44, 44, 44, 44, 36, 36, 36, 61, 36, 62, 36, 36,\n+   70, 43, 43, 80, 44, 80, 43, 57, 43, 43, 43, 70, 44, 44, 44, 44,\n+   36, 36, 36, 62, 61, 36, 36, 36, 36, 36, 36, 36, 36, 84, 84, 88,\n+   43, 87, 85, 85, 61, 44, 44, 44, 36, 70, 83,162, 64, 44, 44, 44,\n+   27, 27, 89, 67, 67, 67, 56, 20,161, 67, 67, 67, 67, 67, 67, 67,\n+   67, 44, 44, 44, 44, 44, 44, 91,103,103,103,103,103,103,103,177,\n+    2,  2, 64, 44, 44, 44, 44, 44, 65, 65, 65, 65, 68, 44, 44, 44,\n+   43, 43, 60, 44, 44, 44, 44, 44, 43, 43, 43, 60,  2,  2, 67, 67,\n+   40, 40, 95, 44, 44, 44, 44, 44,  7,  7,  7,  7,  7,175, 27, 27,\n+   27, 62, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 44, 44, 62, 36,\n+   27, 27, 27, 30,  2, 64, 44, 44, 36, 36, 36, 36, 36, 61, 44, 57,\n+   92, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,\n+   84, 84, 84, 84, 44, 44, 44, 57, 43, 74, 40, 40, 40, 40, 40, 40,\n+   40, 86, 80, 44, 44, 44, 44, 44, 84, 44, 44, 44, 44, 44, 44, 44,\n+   36, 61, 44, 44, 44, 44, 44, 44, 44, 44, 36, 36, 44, 44, 44, 44,\n+   36, 36, 36, 36, 36, 44, 50, 60, 65, 65, 44, 44, 44, 44, 44, 44,\n+   67, 67, 67, 90, 55, 67, 67, 67, 67, 67,182, 85, 43, 67,182, 84,\n+   84,183, 65, 65, 65, 82, 43, 43, 43, 76, 50, 43, 43, 43, 67, 67,\n+   67, 67, 67, 67, 67, 43, 43, 67, 67, 67, 67, 67, 90, 44, 44, 44,\n+   67, 43, 76, 44, 44, 44, 44, 44, 27, 27, 44, 44, 44, 44, 44, 44,\n+   11, 11, 11, 11, 11, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 16, 16, 16,108, 16, 16, 16, 16, 16,\n+   11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 47, 11,\n+   44, 47, 48, 47, 48, 11, 47, 11, 11, 11, 11, 16, 16,146,146, 16,\n+   16, 16,146, 16, 16, 16, 16, 16, 16, 16, 11, 48, 11, 47, 48, 11,\n+   11, 11, 47, 11, 11, 11, 47, 16, 16, 16, 16, 16, 11, 48, 11, 47,\n+   11, 11, 47, 47, 44, 11, 11, 11, 47, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 16, 16, 16, 16, 16,\n+   16, 16, 16, 44, 11, 11, 11, 11, 31, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11,\n+   11, 11, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33,\n+   16, 16, 16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 31,\n+   16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 31, 16, 16, 16,\n+   16, 33, 16, 16, 16, 32, 44,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+   43, 43, 43, 76, 67, 50, 43, 43, 43, 43, 43, 43, 43, 43, 76, 67,\n+   67, 67, 50, 67, 67, 67, 67, 67, 67, 67, 76, 21,  2,  2, 44, 44,\n+   44, 44, 44, 44, 44, 57, 43, 43, 43, 43, 43, 80, 43, 43, 43, 43,\n+   43, 43, 43, 43, 80, 57, 43, 43, 43, 57, 80, 43, 43, 80, 44, 44,\n+   43, 43, 43, 74, 40, 40, 40, 44,  7,  7,  7,  7,  7, 44, 44, 77,\n+   36, 36, 36, 36, 36, 36, 43, 43,  7,  7,  7,  7,  7, 44, 44, 94,\n+   36, 36, 61,175, 27, 27, 27, 27, 43, 43, 43, 80, 44, 44, 44, 44,\n+   16, 16, 43, 43, 43, 74, 44, 44, 27, 27, 27, 27, 27, 27,157, 27,\n+  184, 27, 98, 44, 44, 44, 44, 44, 27, 27, 27, 27, 27, 27, 27,157,\n+   27, 27, 27, 27, 27, 27, 27, 44, 36, 36, 62, 36, 36, 36, 36, 36,\n+   62, 61, 61, 62, 62, 36, 36, 36, 36, 61, 36, 36, 62, 62, 44, 44,\n+   44, 61, 44, 62, 62, 62, 62, 36, 62, 61, 61, 62, 62, 62, 62, 62,\n+   62, 61, 61, 62, 36, 61, 36, 36, 36, 61, 36, 36, 62, 36, 61, 61,\n+   36, 36, 36, 36, 36, 62, 36, 36, 62, 36, 62, 36, 36, 62, 36, 36,\n+    8, 44, 44, 44, 44, 44, 44, 44, 55, 67, 67, 67, 67, 67, 67, 67,\n+   27, 27, 27, 27, 27, 27, 89, 67, 67, 67, 67, 67, 67, 67, 67, 44,\n+   44, 44, 44, 67, 67, 67, 67, 67, 67, 90, 44, 44, 44, 44, 44, 44,\n+   67, 44, 44, 44, 44, 44, 44, 44, 67, 67, 67, 67, 67, 25, 41, 41,\n+   67, 67, 67, 67, 44, 44, 44, 44, 67, 67, 67, 67, 90, 67, 67, 67,\n+   67, 67, 67, 67, 67, 67, 55, 67, 67, 67, 90, 44, 67, 90, 44, 44,\n+   67, 90, 67, 67, 67, 67, 67, 67, 79, 44, 44, 44, 44, 44, 44, 44,\n+   65, 65, 65, 65, 65, 65, 65, 65,165,165,165,165,165,165,165, 44,\n+  165,165,165,165,165,165,165,  0,  0,  0, 29, 21, 21, 21, 23, 21,\n+   22, 18, 21, 25, 21, 17, 13, 13, 25, 25, 25, 21, 21,  9,  9,  9,\n+    9, 22, 21, 18, 24, 16, 24,  5,  5,  5,  5, 22, 25, 18, 25,  0,\n+   23, 23, 26, 21, 24, 26,  7, 20, 25,  1, 26, 24, 26, 25, 15, 15,\n+   24, 15,  7, 19, 15, 21,  9, 25,  9,  5,  5, 25,  5,  9,  5,  7,\n+    7,  7,  9,  8,  8,  5,  7,  5,  6,  6, 24, 24,  6, 24, 12, 12,\n+    2,  2,  6,  5,  9, 21,  9,  2,  2,  9, 25,  9, 26, 12, 11, 11,\n+    2,  6,  5, 21, 17,  2,  2, 26, 26, 23,  2, 12, 17, 12, 21, 12,\n+   12, 21,  7,  2,  2,  7,  7, 21, 21,  2,  1,  1, 21, 23, 26, 26,\n+    1,  2,  6,  7,  7, 12, 12,  7, 21,  7, 12,  1, 12,  6,  6, 12,\n+   12, 26,  7, 26, 26,  7,  2,  1, 12,  2,  6,  2,  1, 12, 12, 10,\n+   10, 10, 10, 12, 21,  6,  2, 10, 10,  2, 15, 26, 26,  2,  2, 21,\n+    7, 10, 15,  7,  2, 23, 21, 26, 10,  7, 21, 15, 15,  2, 17,  7,\n+   29,  7,  7, 22, 18,  2, 14, 14, 14,  7, 17, 21,  7,  6, 11, 12,\n+    5,  2,  5,  6,  8,  8,  8, 24,  5, 24,  2, 24,  9, 24, 24,  2,\n+   29, 29, 29,  1, 17, 17, 20, 19, 22, 20, 27, 28,  1, 29, 21, 20,\n+   19, 21, 21, 16, 16, 21, 25, 22, 18, 21, 21, 29, 15,  6, 18,  6,\n+   12, 11,  9, 26, 26,  9, 26,  5,  5, 26, 14,  9,  5, 14, 14, 15,\n+   25, 26, 26, 22, 18, 26, 18, 25, 18, 22,  5, 12,  2,  5, 22, 21,\n+   26,  6,  7, 14, 17, 22, 18, 18, 26, 14, 17,  6, 14,  6, 12, 24,\n+   24,  6, 26, 15,  6, 21, 11, 21, 24,  9, 23, 26, 10, 21,  6, 10,\n+    4,  4,  3,  3,  7, 25, 21, 22, 17, 16, 16, 22, 16, 16, 25, 17,\n+   25,  2, 25, 24, 23,  2,  2, 15, 12, 15, 14,  2, 21, 14,  7, 15,\n+   12, 17, 21,  1, 26, 10, 10,  1, 23, 15,  0,  1,  2,  3,  4,  5,\n+    6,  7,  8,  9,  0, 10, 11, 12, 13,  0, 14,  0,  0,  0,  0,  0,\n+   15,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 18, 19,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 20,  0, 21, 22, 23,  0,  0,  0, 24,\n+   25, 26, 27, 28, 29, 30, 31, 32, 33,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 34,\n+    0, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 36,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 37, 38,  0,  0,  0,  0,  0,  0, 39, 40,  0,  0, 41,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  0,  0,  0,  0,\n+    0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  6,  7,  8,  0,\n+    9,  0, 10, 11,  0,  0, 12, 13, 14, 15, 16,  0,  0,  0,  0, 17,\n+   18, 19, 20,  0,  0,  0, 21, 22,  0, 23, 24,  0,  0, 23, 25, 26,\n+    0, 23, 25,  0,  0, 23, 25,  0,  0, 23, 25,  0,  0,  0, 25,  0,\n+    0,  0, 27,  0,  0, 23, 25,  0,  0, 28, 25,  0,  0,  0, 29,  0,\n+    0, 30, 31,  0,  0, 32, 33,  0, 34, 35,  0, 36, 37,  0, 38,  0,\n+    0, 39,  0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 42, 42,  0,  0,  0,  0, 43,  0,\n+    0,  0,  0,  0,  0, 44,  0,  0,  0, 45,  0,  0,  0,  0,  0,  0,\n+   46,  0,  0, 47,  0, 48, 49,  0,  0, 50, 51, 52,  0, 53,  0, 54,\n+    0, 55,  0,  0,  0,  0, 56, 57,  0,  0,  0,  0,  0,  0, 58, 59,\n+    0,  0,  0,  0,  0,  0, 60, 61,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 62,  0,  0,  0, 63,  0,  0,  0, 64,\n+    0, 65,  0,  0, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 67, 68,  0,  0, 69,  0,  0,  0,  0,  0,  0,  0,  0,\n+   70, 71,  0,  0,  0,  0, 51, 72,  0, 73, 74,  0,  0, 75, 76,  0,\n+    0,  0,  0,  0,  0, 77, 78, 79,  0,  0,  0,  0,  0,  0,  0, 25,\n+    0,  0,  0,  0,  0,  0,  0,  0, 80,  0,  0,  0,  0,  0,  0,  0,\n+    0, 81,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 82,\n+    0,  0,  0,  0,  0,  0,  0, 49,  0,  0,  0, 83,  0,  0,  0,  0,\n+   84, 85,  0,  0,  0,  0,  0, 86,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0, 87,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 88,  0,  0,  0,  0, 89,  0,  0,  0,  0,  0,\n+    0,  0, 70, 63,  0, 90,  0,  0, 91, 92,  0, 75,  0,  0, 93,  0,\n+    0, 94,  0,  0,  0,  0,  0, 95,  0, 96, 25, 97,  0,  0,  0,  0,\n+    0,  0, 98,  0,  0,  0, 99,  0,  0,  0,  0,  0,  0, 63,100,  0,\n+    0, 63,  0,  0,  0,101,  0,  0,  0,102,  0,  0,  0,  0,  0,  0,\n+    0, 90,  0,  0,  0,  0,  0,  0,  0,103,104,  0,  0,  0,  0, 76,\n+    0, 42,105,  0,106,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 63,  0,  0,  0,  0,  0,  0,  0,  0,107,  0,108,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,109,  0,110,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,111,\n+    0,  0,  0,  0,112,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,113,114,115,  0,  0,\n+    0,  0,116,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+  117,118,  0,  0,  0,  0,  0,  0,  0,110,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,119,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,120,  0,  0,  0,121,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,\n+    5,  6,  7,  4,  4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17,\n+   18,  1,  1,  1,  0,  0,  0,  0, 19,  1,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24, 25, 26, 27, 28,\n+   29, 30,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, 31,  0,\n+    0,  0, 32, 33, 34, 35,  1, 36,  0,  0,  0,  0, 37,  0,  0,  0,\n+    0,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41,  0,  0,  0,  0,\n+    0,  0,  0,  0, 42,  0,  0,  0,  0,  0,  0,  0, 43, 36, 44, 45,\n+   21, 45, 46,  0,  0,  0,  0,  0,  0,  0, 19,  1, 21,  0,  0, 47,\n+    0,  0,  0,  0,  0, 38, 48,  1,  1, 49, 49, 50,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0, 52,  1,  1,  1,\n+   53, 21, 43, 54, 55, 21, 35,  1,  0,  0,  0,  0,  0,  0,  0, 56,\n+    0,  0,  0, 57, 58, 59,  0,  0,  0,  0,  0, 57,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 60,  0,  0,  0, 57,  0, 61,  0,  0,\n+    0,  0,  0,  0,  0,  0, 62, 63,  0,  0, 64,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 65,  0,  0,  0, 66,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 67,  0,  0,  0, 68,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 69,  0,  0,  0,  0,  0,  0, 70, 71,  0,\n+    0,  0,  0,  0, 72, 73, 74, 75, 76, 77,  0,  0,  0,  0,  0,  0,\n+    0, 78,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 79, 80,  0,\n+    0,  0,  0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 49,\n+    0,  0,  0,  0,  0, 63,  0,  0,  0,  0,  0,  0, 64,  0,  0, 81,\n+    0,  0, 82,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 83,  0,\n+    0,  0,  0,  0,  0, 19, 84,  0, 63,  0,  0,  0,  0, 49,  1, 85,\n+    0,  0,  0,  0,  1, 54, 15, 86, 84,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 56,  0,  0,  0, 63,  0,  0,  0,  0,  0,  0,\n+    0,  0, 19, 10,  1,  0,  0,  0,  0,  0, 87,  0,  0,  0,  0,  0,\n+    0, 88,  0,  0, 87,  0,  0,  0,  0,  0,  0,  0,  0, 79,  0,  0,\n+    0,  0,  0,  0, 89,  9, 12,  4, 90,  8, 91, 47,  0, 59, 50,  0,\n+   21,  1, 21, 92, 93,  1,  1,  1,  1,  1,  1,  1,  1, 94, 95, 96,\n+    0,  0,  0,  0, 97,  1, 98, 59, 81, 99,100,  4, 59,  0,  0,  0,\n+    0,  0,  0, 19, 50,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 62,\n+    1,  1,  1,  1,  1,  1,  1,  1,  0,  0,101,102,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,103,  0,  0,  0,  0, 19,  0,  1,  1, 50,\n+    0,  0,  0,  0,  0,  0,  0, 38,  0,  0,  0,  0, 50,  0,  0,  0,\n+    0, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0, 63,  0,  0,  0,  0,\n+    1,  1,  1,  1, 50,  0,  0,  0,  0,  0, 52, 69,  0,  0,  0,  0,\n+    0,  0,  0,  0, 62,  0,  0,  0,  0,  0,  0,  0, 79,  0,  0,  0,\n+   63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,104,105, 59, 38,\n+   81,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 64,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,106,  1, 14,  4, 12,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 47,  0,  0,  0,  0,  0, 38, 89,  0,\n+    0,  0,  0,107,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,108, 62,\n+    0,109,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,\n+    0,  0, 19, 59,  0,  0,  0,  0,  0,110, 14, 54, 84,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,111,  0, 89,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 62, 63,  0,  0, 63,  0, 88,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,111,  0,  0,  0,  0,112,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 79, 56,  0, 38,  1, 59,  1, 59,  0,  0,\n+   64, 88,  0,  0,  0,  0,  0, 60,113,  0,  0,  0,  0,  0,  0,  0,\n+   56,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,113,  0,  0,\n+    0,  0, 62,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 80,\n+   79,  0,  0,  0,  0,  0,  0,  0,  0, 62,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 57,  0, 88,114,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0, 62,  0,  0,  0,  0,  0,  0,  8, 91,  0,  0,\n+    0,  0,  0,  0,  1, 89,  0,  0,  0,  0,  0,  0,115,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,116,  0,117,118,119,120,  0, 52,  4,\n+  121, 49, 23,  0,  0,  0,  0,  0,  0,  0, 38, 50,  0,  0,  0,  0,\n+   38, 59,  0,  0,  0,  0,  0,  0,  1, 89,  1,  1,  1,  1, 39,  1,\n+   48,104, 89,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,\n+    0,  0,  0,  0,  4,121,  0,  0,  0,  1,122,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,230,230,230,230,230,232,220,220,220,220,232,216,\n+  220,220,220,220,220,202,202,220,220,220,220,202,202,220,220,220,\n+    1,  1,  1,  1,  1,220,220,220,220,230,230,230,230,240,230,220,\n+  220,220,230,230,230,220,220,  0,230,230,230,220,220,220,220,230,\n+  232,220,220,230,233,234,234,233,234,234,233,230,  0,  0,  0,230,\n+    0,220,230,230,230,230,220,230,230,230,222,220,230,230,220,220,\n+  230,222,228,230, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20,\n+   21, 22,  0, 23,  0, 24, 25,  0,230,220,  0, 18, 30, 31, 32,  0,\n+    0,  0,  0, 27, 28, 29, 30, 31, 32, 33, 34,230,230,220,220,230,\n+  220,230,230,220, 35,  0,  0,  0,  0,  0,230,230,230,  0,  0,230,\n+  230,  0,220,230,230,220,  0,  0,  0, 36,  0,  0,230,220,230,230,\n+  220,220,230,220,220,230,220,230,220,230,230,  0,  0,220,  0,  0,\n+  230,230,  0,230,  0,230,230,230,230,230,  0,  0,  0,220,220,220,\n+    0,  0,  0,220,230,230,  0,220,230,220,220,220, 27, 28, 29,230,\n+    7,  0,  0,  0,  0,  9,  0,  0,  0,230,220,230,230,  0,  0,  0,\n+    0,  0,230,  0,  0, 84, 91,  0,  0,  0,  0,  9,  9,  0,  0,  0,\n+    0,  0,  9,  0,103,103,  9,  0,107,107,107,107,118,118,  9,  0,\n+  122,122,122,122,220,220,  0,  0,  0,220,  0,220,  0,216,  0,  0,\n+    0,129,130,  0,132,  0,  0,  0,  0,  0,130,130,130,130,  0,  0,\n+  130,  0,230,230,  9,  0,230,230,  0,  0,220,  0,  0,  0,  0,  7,\n+    0,  9,  9,  0,  0,230,  0,  0,  0,228,  0,  0,  0,222,230,220,\n+  220,  0,  0,  0,230,  0,  0,220,230,220,  0,220,  0,  0,  9,  9,\n+    0,  0,  7,  0,230,230,230,  0,230,  0,  1,  1,  1,  0,  0,  0,\n+  230,234,214,220,202,230,230,230,230,230,232,228,228,220,  0,230,\n+  233,220,230,220,230,230,  1,  1,  1,  1,  1,230,  0,  1,  1,230,\n+  220,230,  1,  1,  0,  0,218,228,232,222,224,224,  0,  8,  8,  0,\n+  230,  0,230,230,220,  0,  0,230,  0,  0, 26,  0,  0,220,  0,230,\n+  230,  1,220,  0,  0,230,220,  0,  0,  0,220,220,  0,  9,  7,  0,\n+    0,  7,  9,  0,  0,  0,  9,  7,  9,  9,  0,  0,  6,  6,  0,  0,\n+    0,  0,  1,  0,  0,216,216,  1,  1,  1,  0,  0,  0,226,216,216,\n+  216,216,216,  0,220,220,220,  0,230,230,  7,  0, 16, 17, 17, 17,\n+   17, 17, 17, 33, 17, 17, 17, 19, 17, 17, 17, 17, 20,101, 17,113,\n+  129,169, 17, 27, 28, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,237,  0,  1,  2,  2,\n+    0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  6,  7,  8,\n+    9,  0,  0,  0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 20,  0,  0, 21, 22,  0,  0,  0,  0,\n+   23, 24, 25, 26,  0, 27,  0, 28, 29, 30, 31, 32,  0,  0,  0,  0,\n+    0,  0,  0, 33, 34, 35,  0,  0,  0,  0,  0,  0, 36,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 37, 38,  0,  0,  0,  0,  1,  2, 39, 40,\n+    0,  1,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,\n+    0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  3,  4,  0,  0,  5,  0,\n+    0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  7,  1,  0,  0,  0,  0,\n+    0,  0,  8,  9,  0,  0,  0,  0,  0,  0, 10,  0,  0, 10,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0, 10,\n+    0,  0,  0,  0,  0,  0, 11, 12,  0, 13,  0, 14, 15, 16,  0,  0,\n+    0,  0,  0,  1, 17, 18,  0, 19,  7,  1,  0,  0,  0, 20, 20,  7,\n+   20, 20, 20, 20, 20, 20, 20,  8, 21,  0, 22,  0,  7, 23, 24,  0,\n+   20, 20, 25,  0,  0,  0, 26, 27,  1,  7, 20, 20, 20, 20, 20,  1,\n+   28, 29, 30, 31,  0,  0, 20,  0,  0,  0,  0,  0,  0,  0, 10,  0,\n+    0,  0,  0,  0,  0,  0, 20, 20, 20,  1,  0,  0,  8, 21, 32,  4,\n+    0, 10,  0, 33,  7, 20, 20, 20,  0,  0,  0,  0,  8, 34, 34, 35,\n+   36, 34, 37,  0, 38,  1, 20, 20,  0,  0, 39,  0,  1,  1,  0,  8,\n+   21,  1, 20,  0,  0,  0,  1,  0,  0, 40,  1,  1,  0,  0,  8, 21,\n+    0,  1,  0,  1,  0,  1,  0,  0,  0,  0, 26, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 21,  7, 20, 41, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 21,  0, 42, 43, 44,  0, 45,  0,  8, 21,  0,  0,  0,  0,  0,\n+    0,  0,  0, 46,  7,  1, 10,  1,  0,  0,  0,  1, 20, 20,  1,  0,\n+    0,  0,  0,  0,  0,  0, 20, 20,  1, 20, 20,  0,  0,  0,  0,  0,\n+    0,  0, 26, 21,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  3, 47, 48,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,\n+    4,  5,  6,  7,  7,  8,  7,  7,  7,  7,  7,  7,  7,  7,  7,  9,\n+   10, 11, 12, 12, 12, 12, 13, 14, 14, 14, 14, 15, 16, 17, 18, 19,\n+   20, 14, 21, 14, 22, 14, 14, 14, 14, 23, 24, 24, 25, 26, 14, 14,\n+   14, 14, 27, 28, 14, 14, 29, 30, 31, 32, 33, 34,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+   35,  7, 36, 37,  7, 38,  7,  7,  7, 39, 14, 40,  7,  7, 41, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42,  0,  0,  1,\n+    2,  2,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n+   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n+   32, 32, 33, 34, 35, 36, 37, 37, 37, 37, 37, 38, 39, 40, 41, 42,\n+   43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  2,  2, 53, 54, 55, 56,\n+   57, 58, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 61, 61,\n+   59, 59, 59, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n+   74, 75, 76, 77, 78, 59, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 79, 70, 70, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 80, 81, 81,\n+   81, 81, 81, 81, 81, 81, 81, 82, 83, 83, 84, 85, 86, 87, 88, 89,\n+   90, 91, 92, 93, 94, 95, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 97, 97,\n+   97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,\n+   70, 70, 98, 99,100,101,102,102,103,104,105,106,107,108,109,110,\n+  111,112, 97,113,114,115,116,117,118, 97,119,119,120, 97,121,122,\n+  123,124,125,126,127,128,129,130,131, 97,132,133,134,135,136,137,\n+  138,139,140,141,142, 97,143,144, 97,145,146,147,148, 97,149,150,\n+  151,152,153,154, 97, 97,155,156,157,158, 97,159, 97,160,161,161,\n+  161,161,161,161,161,162,163,161,164, 97, 97, 97, 97, 97,165,165,\n+  165,165,165,165,165,165,166, 97, 97, 97, 97, 97, 97, 97, 97, 97,\n+   97, 97, 97, 97, 97, 97,167,167,167,167,168, 97, 97, 97,169,169,\n+  169,169,170,171,172,173, 97, 97, 97, 97,174,175,176,177,178,178,\n+  178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,\n+  178,178,178,178,178,178,178,178,178,178,178,178,178,179,178,178,\n+  178,178,178,178,180,180,180,181,182, 97, 97, 97, 97, 97,183,184,\n+  185,186,186,187, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,\n+   97, 97, 97, 97, 97, 97,188,189, 97, 97, 97, 97, 97, 97, 59,190,\n+  191,192,193,194,195, 97,196,197,198, 59, 59,199, 59,200,201,201,\n+  201,201,201,202, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,203, 97,\n+  204, 97, 97,205, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,206,207,\n+  208, 97, 97, 97, 97, 97,209,210,211, 97,212,213, 97, 97,214,215,\n+   59,216,217, 97, 59, 59, 59, 59, 59, 59, 59,218,219,220,221,222,\n+  223,224,225,226, 59,227, 97, 97, 97, 97, 97, 97, 97, 97, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,228, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,229, 70,230, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,231, 70, 70, 70, 70,\n+   70, 70, 70, 70, 70,232, 97, 97, 97, 97, 97, 97, 97, 97, 70, 70,\n+   70, 70,233, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 70, 70,\n+   70, 70, 70, 70,234, 97, 97, 97, 97, 97, 97, 97, 97, 97,235, 97,\n+  236,237,  0,  1,  2,  2,  0,  1,  2,  2,  2,  3,  4,  5,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,\n+   19,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19,  0, 19,  0,\n+    0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,\n+   26, 26,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,\n+    9,  9,  0,  9,  9,  9,  2,  2,  9,  9,  9,  9,  0,  9,  2,  2,\n+    2,  2,  9,  0,  9,  0,  9,  9,  9,  2,  9,  2,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  9,\n+   55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  6,  6,\n+    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  1,  1,  6,  2,  4,\n+    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n+    4,  4,  4,  4,  4,  2,  4,  4,  4,  2,  2,  4,  4,  4,  2, 14,\n+   14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2,  2,\n+    2,  2,  2,  2,  2,  2, 14, 14, 14,  2,  2,  2,  2, 14, 14, 14,\n+   14, 14, 14,  2,  2,  2,  3,  3,  3,  3,  3,  0,  3,  3,  3,  3,\n+    3,  3,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  0,  3,  2,  3,  0,  0,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n+    3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  3,  1,  3,\n+    3,  3,  3,  3,  3,  3, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,\n+   37, 37, 37, 37,  2, 37, 37, 37, 37,  2,  2, 37, 37, 37, 38, 38,\n+   38, 38, 38, 38, 38, 38, 38, 38,  2,  2,  2,  2,  2,  2, 64, 64,\n+   64, 64, 64, 64, 64, 64, 64, 64, 64,  2,  2, 64, 64, 64, 90, 90,\n+   90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,  2,  2, 90, 90,\n+   90, 90, 90, 90, 90,  2, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,\n+   95, 95,  2,  2, 95,  2, 37, 37, 37,  2,  2,  2,  2,  2,  3,  3,\n+    3,  3,  3,  2,  3,  3,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,\n+    0,  3,  3,  3,  3,  3,  7,  7,  7,  7,  7,  7,  7,  7,  7,  1,\n+    1,  1,  1,  7,  7,  7,  7,  7,  7,  7,  0,  0,  7,  7,  5,  5,\n+    5,  5,  2,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2,  5,  5,  2,\n+    2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,\n+    5,  5,  5,  5,  5,  5,  5,  2,  5,  2,  2,  2,  5,  5,  5,  5,\n+    2,  2,  5,  5,  5,  5,  5,  2,  2,  5,  5,  5,  5,  2,  2,  2,\n+    2,  2,  2,  2,  2,  5,  2,  2,  2,  2,  5,  5,  2,  5,  5,  5,\n+    5,  5,  2,  2,  5,  5,  5,  5,  5,  5,  5,  5,  5,  2,  2, 11,\n+   11, 11,  2, 11, 11, 11, 11, 11, 11,  2,  2,  2,  2, 11, 11,  2,\n+    2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,\n+   11, 11, 11, 11, 11, 11, 11,  2, 11, 11,  2, 11, 11,  2, 11, 11,\n+    2,  2, 11,  2, 11, 11, 11,  2,  2, 11, 11, 11,  2,  2,  2, 11,\n+    2,  2,  2,  2,  2,  2,  2, 11, 11, 11, 11,  2, 11,  2,  2,  2,\n+    2,  2,  2,  2, 11, 11, 11, 11, 11, 11, 11, 11, 11,  2,  2, 10,\n+   10, 10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,\n+    2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  2,\n+   10, 10, 10, 10, 10, 10, 10,  2, 10, 10,  2, 10, 10, 10, 10, 10,\n+    2,  2, 10, 10, 10, 10, 10, 10,  2, 10, 10, 10,  2,  2, 10,  2,\n+    2,  2,  2,  2,  2,  2, 10, 10, 10, 10,  2,  2, 10, 10, 10, 10,\n+    2,  2,  2,  2,  2,  2,  2, 10, 10, 10, 10, 10, 10, 10,  2, 21,\n+   21, 21,  2, 21, 21, 21, 21, 21, 21, 21, 21,  2,  2, 21, 21,  2,\n+    2, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  2,\n+   21, 21, 21, 21, 21, 21, 21,  2, 21, 21,  2, 21, 21, 21, 21, 21,\n+    2,  2, 21, 21, 21, 21, 21,  2,  2, 21, 21, 21,  2,  2,  2,  2,\n+    2,  2,  2, 21, 21, 21,  2,  2,  2,  2, 21, 21,  2, 21, 21, 21,\n+   21, 21,  2,  2, 21, 21,  2,  2, 22, 22,  2, 22, 22, 22, 22, 22,\n+   22,  2,  2,  2, 22, 22, 22,  2, 22, 22, 22, 22,  2,  2,  2, 22,\n+   22,  2, 22,  2, 22, 22,  2,  2,  2, 22, 22,  2,  2,  2, 22, 22,\n+   22, 22, 22, 22, 22, 22, 22, 22,  2,  2,  2,  2, 22, 22, 22,  2,\n+    2,  2,  2,  2,  2, 22,  2,  2,  2,  2,  2,  2, 22, 22, 22, 22,\n+   22,  2,  2,  2,  2,  2, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n+   23, 23, 23,  2, 23, 23, 23,  2, 23, 23, 23, 23, 23, 23, 23, 23,\n+    2,  2,  2, 23, 23, 23, 23,  2, 23, 23, 23, 23,  2,  2,  2,  2,\n+    2,  2,  2, 23, 23,  2, 23, 23, 23,  2,  2,  2,  2,  2, 23, 23,\n+   23, 23,  2,  2, 23, 23,  2,  2,  2,  2,  2,  2,  2, 23, 16, 16,\n+   16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16,  2,\n+   16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16, 16,\n+    2,  2, 16, 16, 16, 16, 16,  2, 16, 16, 16, 16,  2,  2,  2,  2,\n+    2,  2,  2, 16, 16,  2,  2,  2,  2,  2,  2,  2, 16,  2, 16, 16,\n+   16, 16,  2,  2, 16, 16,  2, 16, 16,  2,  2,  2,  2,  2, 20, 20,\n+   20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  2, 20, 20, 20,  2,\n+   20, 20, 20, 20, 20, 20,  2,  2,  2,  2, 20, 20, 20, 20, 20, 20,\n+   20, 20,  2,  2, 20, 20,  2, 36, 36, 36,  2, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,\n+   36, 36, 36, 36, 36, 36, 36, 36,  2, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36,  2, 36,  2,  2,  2,  2, 36,  2,  2,  2,  2, 36, 36, 36,\n+   36, 36, 36,  2, 36,  2,  2,  2,  2,  2,  2,  2, 36, 36,  2,  2,\n+   36, 36, 36,  2,  2,  2,  2, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n+   24, 24, 24, 24, 24, 24, 24, 24, 24,  2,  2,  2,  2,  0, 24, 24,\n+   24, 24,  2,  2,  2,  2,  2, 18, 18,  2, 18,  2, 18, 18, 18, 18,\n+   18,  2, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n+   18, 18,  2, 18,  2, 18, 18, 18, 18, 18, 18, 18,  2,  2, 18, 18,\n+   18, 18, 18,  2, 18,  2, 18, 18,  2,  2, 18, 18, 18, 18, 25, 25,\n+   25, 25, 25, 25, 25, 25,  2, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n+   25, 25, 25,  2,  2,  2, 25, 25, 25, 25, 25,  2, 25, 25, 25, 25,\n+   25, 25, 25,  0,  0,  0,  0, 25, 25,  2,  2,  2,  2,  2, 33, 33,\n+   33, 33, 33, 33, 33, 33,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+    8,  8,  8,  8,  2,  8,  2,  2,  2,  2,  2,  8,  2,  2,  8,  8,\n+    8,  0,  8,  8,  8,  8, 12, 12, 12, 12, 12, 12, 12, 12, 30, 30,\n+   30, 30, 30, 30, 30, 30, 30,  2, 30, 30, 30, 30,  2,  2, 30, 30,\n+   30, 30, 30, 30, 30,  2, 30, 30, 30,  2,  2, 30, 30, 30, 30, 30,\n+   30, 30, 30,  2,  2,  2, 30, 30,  2,  2,  2,  2,  2,  2, 29, 29,\n+   29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,  2,  2, 28, 28,\n+   28, 28, 28, 28, 28, 28, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34,  2,  2,  2, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,\n+   35,  0,  0,  0, 35, 35, 35,  2,  2,  2,  2,  2,  2,  2, 45, 45,\n+   45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,  2, 45, 45, 45, 45,\n+   45, 45, 45,  2,  2,  2, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,\n+   44, 44, 44,  0,  0,  2, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,\n+   43, 43,  2,  2,  2,  2, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,\n+   46, 46, 46,  2, 46, 46, 46,  2, 46, 46,  2,  2,  2,  2, 31, 31,\n+   31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,  2,  2, 31, 31,\n+    2,  2,  2,  2,  2,  2, 32, 32,  0,  0, 32,  0, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32,  2, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    2,  2,  2,  2,  2,  2, 32,  2,  2,  2,  2,  2,  2,  2, 32, 32,\n+   32,  2,  2,  2,  2,  2, 28, 28, 28, 28, 28, 28,  2,  2, 48, 48,\n+   48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,  2, 48, 48,\n+   48, 48,  2,  2,  2,  2, 48,  2,  2,  2, 48, 48, 48, 48, 52, 52,\n+   52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,  2,  2, 52, 52,\n+   52, 52, 52,  2,  2,  2, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,\n+   58, 58,  2,  2,  2,  2, 58, 58,  2,  2,  2,  2,  2,  2, 58, 58,\n+   58,  2,  2,  2, 58, 58, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,\n+   54, 54,  2,  2, 54, 54, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,\n+   91, 91, 91, 91, 91,  2, 91, 91, 91, 91, 91,  2,  2, 91, 91, 91,\n+    2,  2,  2,  2,  2,  2, 91, 91, 91, 91, 91, 91,  2,  2,  1,  2,\n+    2,  2,  2,  2,  2,  2, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,\n+   62, 62,  2,  2,  2,  2, 62, 62, 62, 62, 62,  2,  2,  2, 76, 76,\n+   76, 76, 76, 76, 76, 76, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,\n+   93, 93,  2,  2,  2,  2,  2,  2,  2,  2, 93, 93, 93, 93, 70, 70,\n+   70, 70, 70, 70, 70, 70,  2,  2,  2, 70, 70, 70, 70, 70, 70, 70,\n+    2,  2,  2, 70, 70, 70, 73, 73, 73, 73, 73, 73, 73, 73,  6,  2,\n+    2,  2,  2,  2,  2,  2,  8,  8,  8,  2,  2,  8,  8,  8,  1,  1,\n+    1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,\n+    0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,\n+    0,  2,  2,  2,  2,  2, 19, 19, 19, 19, 19, 19,  9,  9,  9,  9,\n+    9,  6, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9,  9,  9,  9,  9,\n+   19, 19, 19, 19,  9,  9,  9,  9,  9, 19, 19, 19, 19, 19,  6, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9,  1,  1,\n+    2,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  2,  2,  2,  9,\n+    2,  9,  2,  9,  2,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  9,\n+    9,  9,  2,  2,  9,  9,  9,  9,  9,  9,  2,  9,  9,  9,  2,  2,\n+    9,  9,  9,  2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  2,  0,  0,\n+    0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0, 19,\n+    2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19,  0,  0,\n+    0,  0,  0,  0,  0,  2, 19, 19, 19, 19, 19,  2,  2,  2,  0,  0,\n+    0,  0,  0,  0,  9,  0,  0,  0, 19, 19,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 19,  0, 19,  0,  0,  0,  2,  2,  2,  2,  0,  0,\n+    0,  2,  2,  2,  2,  2, 27, 27, 27, 27, 27, 27, 27, 27,  0,  0,\n+    0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0, 56, 56,\n+   56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,  2, 55, 55,\n+   55, 55,  2,  2,  2,  2,  2, 55, 55, 55, 55, 55, 55, 55, 61, 61,\n+   61, 61, 61, 61, 61, 61,  2,  2,  2,  2,  2,  2,  2, 61, 61,  2,\n+    2,  2,  2,  2,  2,  2, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    2, 13, 13, 13, 13, 13, 13, 13, 13, 13,  2,  2,  2,  2, 13, 13,\n+   13, 13, 13, 13,  2,  2,  0,  0,  0,  0,  2,  2,  2,  2,  0,  0,\n+    0,  0,  0, 13,  0, 13,  0, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n+    1,  1,  1,  1, 12, 12, 13, 13, 13, 13,  0,  0,  0,  0,  2, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15,  2,  2,  1,  1,  0,  0, 15, 15, 15,  0, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17,  0,  0, 17, 17, 17,  2,  2,  2,  2,  2, 26, 26, 26, 26, 26,\n+   26, 26, 26, 26, 26, 26,  2, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12,  2, 12, 12, 12, 12, 12, 12, 12,  0, 17, 17,\n+   17, 17, 17, 17, 17,  0, 13, 13, 13, 13, 13,  2,  2,  2, 39, 39,\n+   39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,  2,  2,  2, 39, 39,\n+   39, 39, 39, 39, 39,  2, 86, 86, 86, 86, 86, 86, 86, 86, 77, 77,\n+   77, 77, 77, 77, 77, 77, 77, 77, 77, 77,  2,  2,  2,  2, 79, 79,\n+   79, 79, 79, 79, 79, 79,  0,  0, 19, 19, 19, 19, 19, 19,  0,  0,\n+    0, 19, 19, 19, 19, 19,  2,  2, 19, 19, 19, 19, 19, 19, 19, 19,\n+   19,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 19, 19, 19, 60, 60,\n+   60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,  2,  2,  2,  0,  0,\n+    2,  2,  2,  2,  2,  2, 65, 65, 65, 65, 65, 65, 65, 65, 75, 75,\n+   75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,  2,  2,  2,  2,\n+    2,  2,  2,  2, 75, 75, 75, 75,  2,  2,  2,  2,  2,  2, 69, 69,\n+   69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,  0, 69, 74, 74,\n+   74, 74, 74, 74, 74, 74, 74, 74, 74, 74,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 74, 12, 12, 12, 12, 12,  2,  2,  2, 84, 84,\n+   84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,  2,  0, 84, 84,\n+    2,  2,  2,  2, 84, 84, 33, 33, 33, 33, 33, 33, 33,  2, 68, 68,\n+   68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,  2, 68, 68,\n+   68, 68, 68, 68,  2,  2, 68, 68,  2,  2, 68, 68, 68, 68, 92, 92,\n+   92, 92, 92, 92, 92, 92, 92, 92, 92,  2,  2,  2,  2,  2,  2,  2,\n+    2, 92, 92, 92, 92, 92, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\n+   87, 87, 87, 87, 87,  2,  2, 30, 30, 30, 30, 30, 30,  2, 19, 19,\n+   19,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19,  9, 19, 19, 19, 19,\n+    0,  0,  2,  2,  2,  2, 87, 87, 87, 87, 87, 87,  2,  2, 87, 87,\n+    2,  2,  2,  2,  2,  2, 12, 12, 12, 12,  2,  2,  2,  2,  2,  2,\n+    2, 12, 12, 12, 12, 12, 13, 13,  2,  2,  2,  2,  2,  2, 19, 19,\n+   19, 19, 19, 19, 19,  2,  2,  2,  2,  4,  4,  4,  4,  4,  2,  2,\n+    2,  2,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2, 14, 14,\n+   14, 14, 14,  2, 14,  2, 14, 14,  2, 14, 14,  2, 14, 14,  3,  3,\n+    2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  0,  0,  2,  2,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,  1,  1,\n+    1,  1,  1,  1,  6,  6,  0,  0,  0,  2,  0,  0,  0,  0,  3,  3,\n+    3,  3,  3,  2,  2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 17, 17, 17, 17, 17, 17, 17, 17,  0,  0,  2,  2,\n+   12, 12, 12, 12, 12, 12,  2,  2, 12, 12, 12,  2,  2,  2,  2,  0,\n+    0,  0,  0,  0,  2,  2, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n+   49, 49,  2, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,  2, 49, 49,\n+   49,  2, 49, 49,  2, 49, 49, 49, 49, 49, 49, 49,  2,  2, 49, 49,\n+   49,  2,  2,  2,  2,  2,  0,  0,  0,  2,  2,  2,  2,  0,  0,  0,\n+    0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  2,  2,  2,  9,  2,\n+    2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  1,  2,  2, 71, 71,\n+   71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,  2,  2,  2, 67, 67,\n+   67, 67, 67, 67, 67, 67, 67,  2,  2,  2,  2,  2,  2,  2,  1,  0,\n+    0,  0,  0,  0,  0,  0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,\n+   42, 42,  2,  2,  2,  2,  2,  2,  2,  2,  2, 42, 42, 42, 41, 41,\n+   41, 41, 41, 41, 41, 41, 41, 41, 41,  2,  2,  2,  2,  2,118,118,\n+  118,118,118,118,118,118,118,118,118,  2,  2,  2,  2,  2, 53, 53,\n+   53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,  2, 53, 59, 59,\n+   59, 59, 59, 59, 59, 59, 59, 59, 59, 59,  2,  2,  2,  2, 59, 59,\n+   59, 59, 59, 59,  2,  2, 40, 40, 40, 40, 40, 40, 40, 40, 51, 51,\n+   51, 51, 51, 51, 51, 51, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n+   50, 50, 50, 50,  2,  2, 50, 50,  2,  2,  2,  2,  2,  2,135,135,\n+  135,135,135,135,135,135,135,135,135,135,  2,  2,  2,  2,106,106,\n+  106,106,106,106,106,106,104,104,104,104,104,104,104,104,104,104,\n+  104,104,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,104,110,110,\n+  110,110,110,110,110,110,110,110,110,110,110,110,110,  2,110,110,\n+  110,110,110,110,  2,  2, 47, 47, 47, 47, 47, 47,  2,  2, 47,  2,\n+   47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n+   47, 47, 47, 47,  2, 47, 47,  2,  2,  2, 47,  2,  2, 47, 81, 81,\n+   81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,  2, 81,120,120,\n+  120,120,120,120,120,120,116,116,116,116,116,116,116,116,116,116,\n+  116,116,116,116,116,  2,  2,  2,  2,  2,  2,  2,  2,116,128,128,\n+  128,128,128,128,128,128,128,128,128,  2,128,128,  2,  2,  2,  2,\n+    2,128,128,128,128,128, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,\n+   66, 66,  2,  2,  2, 66, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,\n+    2,  2,  2,  2,  2, 72, 98, 98, 98, 98, 98, 98, 98, 98, 97, 97,\n+   97, 97, 97, 97, 97, 97,  2,  2,  2,  2, 97, 97, 97, 97,  2,  2,\n+   97, 97, 97, 97, 97, 97, 57, 57, 57, 57,  2, 57, 57,  2,  2,  2,\n+    2,  2, 57, 57, 57, 57, 57, 57, 57, 57,  2, 57, 57, 57,  2, 57,\n+   57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,\n+   57, 57, 57, 57,  2,  2, 57, 57, 57,  2,  2,  2,  2, 57, 57,  2,\n+    2,  2,  2,  2,  2,  2, 88, 88, 88, 88, 88, 88, 88, 88,117,117,\n+  117,117,117,117,117,117,112,112,112,112,112,112,112,112,112,112,\n+  112,112,112,112,112,  2,  2,  2,  2,112,112,112,112,112, 78, 78,\n+   78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,  2,  2,  2, 78,\n+   78, 78, 78, 78, 78, 78, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,\n+   83, 83, 83, 83,  2,  2, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+   82,  2,  2,  2,  2,  2,122,122,122,122,122,122,122,122,122,122,\n+    2,  2,  2,  2,  2,  2,  2,122,122,122,122,  2,  2,  2,  2,122,\n+  122,122,122,122,122,122, 89, 89, 89, 89, 89, 89, 89, 89, 89,  2,\n+    2,  2,  2,  2,  2,  2,130,130,130,130,130,130,130,130,130,130,\n+  130,  2,  2,  2,  2,  2,  2,  2,130,130,130,130,130,130,144,144,\n+  144,144,144,144,144,144,144,144,  2,  2,  2,  2,  2,  2,  3,  3,\n+    3,  3,  3,  3,  3,  2,156,156,156,156,156,156,156,156,156,156,\n+    2,156,156,156,  2,  2,156,156,  2,  2,  2,  2,  2,  2,147,147,\n+  147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,\n+    2,  2,  2,  2,  2,  2,153,153,153,153,153,153,153,153,153,153,\n+  153,153,  2,  2,  2,  2,149,149,149,149,149,149,149,149,149,149,\n+  149,149,149,149,149,  2, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\n+   94, 94, 94, 94,  2,  2,  2,  2, 94, 94, 94, 94, 94, 94,  2,  2,\n+    2,  2,  2,  2,  2, 94, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 85,  2,  2,101,101,\n+  101,101,101,101,101,101,101,  2,  2,  2,  2,  2,  2,  2,101,101,\n+    2,  2,  2,  2,  2,  2, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n+   96, 96, 96,  2, 96, 96,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,  2,100,100,100,100,100,100,100,100,  2, 36,\n+   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,  2,  2,  2,108,108,\n+  108,108,108,108,108,108,108,108,  2,108,108,108,108,108,108,108,\n+  108,108,108,108,108,  2,129,129,129,129,129,129,129,  2,129,  2,\n+  129,129,129,129,  2,129,129,129,129,129,129,129,129,129,129,129,\n+  129,129,129,129,  2,129,129,129,  2,  2,  2,  2,  2,  2,109,109,\n+  109,109,109,109,109,109,109,109,109,  2,  2,  2,  2,  2,109,109,\n+    2,  2,  2,  2,  2,  2,107,107,107,107,  2,107,107,107,107,107,\n+  107,107,107,  2,  2,107,107,  2,  2,107,107,107,107,107,107,107,\n+  107,107,107,107,107,107,107,  2,107,107,107,107,107,107,107,  2,\n+  107,107,  2,107,107,107,107,107,  2,  1,107,107,107,107,107,  2,\n+    2,107,107,107,  2,  2,107,  2,  2,  2,  2,  2,  2,107,  2,  2,\n+    2,  2,  2,107,107,107,107,107,107,107,  2,  2,107,107,107,107,\n+  107,107,107,  2,  2,  2,137,137,137,137,137,137,137,137,137,137,\n+  137,137,  2,137,137,137,137,137,  2,  2,  2,  2,  2,  2,124,124,\n+  124,124,124,124,124,124,124,124,  2,  2,  2,  2,  2,  2,123,123,\n+  123,123,123,123,123,123,123,123,123,123,123,123,  2,  2,114,114,\n+  114,114,114,114,114,114,114,114,114,114,114,  2,  2,  2,114,114,\n+    2,  2,  2,  2,  2,  2, 32, 32, 32, 32, 32,  2,  2,  2,102,102,\n+  102,102,102,102,102,102,102,  2,  2,  2,  2,  2,  2,  2,102,102,\n+    2,  2,  2,  2,  2,  2,126,126,126,126,126,126,126,126,126,126,\n+  126,  2,  2,126,126,126,126,126,126,126,  2,  2,  2,  2,142,142,\n+  142,142,142,142,142,142,142,142,142,142,  2,  2,  2,  2,125,125,\n+  125,125,125,125,125,125,125,125,125,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2,125,154,154,154,154,154,154,154,  2,  2,154,\n+    2,  2,154,154,154,154,154,154,154,154,  2,154,154,  2,154,154,\n+  154,154,154,154,154,154,154,154,154,154,154,154,  2,154,154,  2,\n+    2,154,154,154,154,154,154,154,  2,  2,  2,  2,  2,  2,150,150,\n+  150,150,150,150,150,150,  2,  2,150,150,150,150,150,150,150,150,\n+  150,150,150,  2,  2,  2,141,141,141,141,141,141,141,141,140,140,\n+  140,140,140,140,140,140,140,140,140,  2,  2,  2,  2,  2,121,121,\n+  121,121,121,121,121,121,121,  2,  2,  2,  2,  2,  2,  2,133,133,\n+  133,133,133,133,133,133,133,  2,133,133,133,133,133,133,133,133,\n+  133,133,133,133,133,  2,133,133,133,133,133,133,  2,  2,133,133,\n+  133,133,133,  2,  2,  2,134,134,134,134,134,134,134,134,  2,  2,\n+  134,134,134,134,134,134,  2,134,134,134,134,134,134,134,134,134,\n+  134,134,134,134,134,  2,138,138,138,138,138,138,138,  2,138,138,\n+    2,138,138,138,138,138,138,138,138,138,138,138,138,138,  2,  2,\n+  138,  2,138,138,  2,138,138,138,  2,  2,  2,  2,  2,  2,143,143,\n+  143,143,143,143,  2,143,143,  2,143,143,143,143,143,143,143,143,\n+  143,143,143,143,143,143,143,143,143,143,143,143,143,  2,143,143,\n+    2,143,143,143,143,143,143,  2,  2,  2,  2,  2,  2,  2,143,143,\n+    2,  2,  2,  2,  2,  2,145,145,145,145,145,145,145,145,145,  2,\n+    2,  2,  2,  2,  2,  2, 86,  2,  2,  2,  2,  2,  2,  2, 22, 22,\n+    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 22, 63, 63,\n+   63, 63, 63, 63, 63, 63, 63, 63,  2,  2,  2,  2,  2,  2, 63, 63,\n+   63, 63, 63, 63, 63,  2, 63, 63, 63, 63, 63,  2,  2,  2, 63, 63,\n+   63, 63,  2,  2,  2,  2, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,\n+   80, 80, 80, 80, 80,  2, 80,  2,  2,  2,  2,  2,  2,  2,127,127,\n+  127,127,127,127,127,127,127,127,127,127,127,127,127,  2, 79,  2,\n+    2,  2,  2,  2,  2,  2,115,115,115,115,115,115,115,115,115,115,\n+  115,115,115,115,115,  2,115,115,  2,  2,  2,  2,115,115,103,103,\n+  103,103,103,103,103,103,103,103,103,103,103,103,  2,  2,119,119,\n+  119,119,119,119,119,119,119,119,119,119,119,119,  2,  2,119,119,\n+    2,119,119,119,119,119,  2,  2,  2,  2,  2,119,119,119,146,146,\n+  146,146,146,146,146,146,146,146,146,  2,  2,  2,  2,  2, 99, 99,\n+   99, 99, 99, 99, 99, 99, 99, 99, 99,  2,  2,  2,  2, 99,  2,  2,\n+    2,  2,  2,  2,  2, 99,136,139,  0,  0,155,  2,  2,  2,136,136,\n+  136,136,136,136,136,136,155,155,155,155,155,155,155,155,155,155,\n+  155,155,155,155,  2,  2,136,  2,  2,  2,  2,  2,  2,  2, 17, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2, 17, 17, 17, 17,139,139,139,139,139,139,139,139,139,139,\n+  139,139,  2,  2,  2,  2,105,105,105,105,105,105,105,105,105,105,\n+  105,  2,  2,  2,  2,  2,105,105,105,105,105,  2,  2,  2,105,  2,\n+    2,  2,  2,  2,  2,  2,105,105,  2,  2,105,105,105,105,  0,  0,\n+    0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,\n+    1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,\n+    1,  1,  1,  1,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n+    0,  2,  2,  0,  0,  2,  2,  0,  0,  0,  0,  2,  0,  0,  0,  0,\n+    2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,\n+    0,  2,  2,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  2,  0,  0,\n+    0,  0,  0,  2,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  2,\n+    0,  0,  0,  0,  0,  0,131,131,131,131,131,131,131,131,131,131,\n+  131,131,  2,  2,  2,  2,  2,  2,  2,131,131,131,131,131,  2,131,\n+  131,131,131,131,131,131, 56,  2,  2, 56, 56, 56, 56, 56, 56, 56,\n+    2, 56, 56,  2, 56, 56, 56, 56, 56,  2,  2,  2,  2,  2,151,151,\n+  151,151,151,151,151,151,151,151,151,151,151,  2,  2,  2,151,151,\n+  151,151,151,151,  2,  2,151,151,  2,  2,  2,  2,151,151,152,152,\n+  152,152,152,152,152,152,152,152,  2,  2,  2,  2,  2,152,113,113,\n+  113,113,113,113,113,113,113,113,113,113,113,  2,  2,113,113,113,\n+  113,113,113,113,113,  2,132,132,132,132,132,132,132,132,132,132,\n+  132,132,  2,  2,  2,  2,132,132,  2,  2,  2,  2,132,132,  3,  3,\n+    3,  3,  2,  3,  3,  3,  2,  3,  3,  2,  3,  2,  2,  3,  2,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  3,  3,  3,  3,  2,  3,\n+    2,  3,  2,  2,  2,  2,  2,  2,  3,  2,  2,  2,  2,  3,  2,  3,\n+    2,  3,  2,  3,  3,  3,  2,  3,  2,  3,  2,  3,  2,  3,  2,  3,\n+    3,  3,  3,  2,  3,  2,  3,  3,  2,  3,  3,  3,  3,  3,  3,  3,\n+    3,  3,  2,  2,  2,  2,  2,  3,  3,  3,  2,  3,  3,  3,  2,  2,\n+    2,  2,  2,  2,  0,  0, 15,  0,  0,  2,  2,  2,  2,  2, 13,  2,\n+    2,  2,  2,  2,  2,  2, 13, 13, 13,  2,  2,  2,  2,  2,  2,  0,\n+    2,  2,  2,  2,  2,  2,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,\n+    9,  9,  9, 10,  9, 11, 12, 13,  9,  9,  9, 14,  9,  9, 15,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9, 16, 17,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 18, 19,\n+   20,  9, 21,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 22,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9, 23, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,  0,  0, 13, 14,\n+   15, 16, 17, 18, 19, 20, 21, 22,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 23,  0,  0, 24, 25, 26, 27, 28,\n+   29, 30,  0,  0, 31, 32,  0, 33,  0, 34,  0, 35,  0,  0,  0,  0,\n+   36, 37, 38, 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   41, 42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 43, 44,  0, 45,  0,  0,  0,  0,  0,  0,\n+   46, 47,  0,  0,  0,  0,  0, 48,  0, 49,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 50, 51,  0,  0,  0, 52,  0,  0,\n+   53,  0,  0,  0,  0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0,\n+   55,  0,  0,  0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,\n+    0, 57,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0, 58, 59, 60, 61, 62, 63, 64, 65,\n+    0,  0,  0,  0,  0,  0, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 67, 68,  0, 69, 70,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n+   83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n+   99,100,101,102,103,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,104,  0,  0,  0,  0,  0,  0,105,106,  0,\n+  107,  0,  0,  0,108,  0,109,  0,110,  0,111,112,113,  0,114,  0,\n+    0,  0,115,  0,  0,  0,116,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,117,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,118,119,120,121,  0,122,123,124,\n+  125,126,  0,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,128,129,130,131,132,133,134,135,136,137,138,139,\n+  140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,\n+  156,157,  0,  0,  0,158,159,160,161,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,162,163,  0,\n+    0,  0,  0,  0,  0,  0,164,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,165,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,166,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,167,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,168,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,169,170,  0,  0,  0,  0,171,\n+  172,  0,  0,  0,173,174,175,176,177,178,179,180,181,182,183,184,\n+  185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,\n+  201,202,203,204,205,206,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    1,  2,  3,  4,\n+};\n+static const uint16_t\n+_hb_ucd_u16[9080] =\n+{\n+     0,   0,   1,   2,   3,   4,   5,   6,   0,   0,   7,   8,   9,  10,  11,  12,\n+    13,  13,  13,  14,  15,  13,  13,  16,  17,  18,  19,  20,  21,  22,  13,  23,\n+    13,  13,  13,  24,  25,  11,  11,  11,  11,  26,  11,  27,  28,  29,  30,  31,\n+    32,  32,  32,  32,  32,  32,  32,  33,  34,  35,  36,  11,  37,  38,  13,  39,\n+     9,   9,   9,  11,  11,  11,  13,  13,  40,  13,  13,  13,  41,  13,  13,  13,\n+    13,  13,  13,  42,   9,  43,  11,  11,  44,  45,  32,  46,  47,  48,  49,  50,\n+    51,  52,  48,  48,  53,  32,  54,  55,  48,  48,  48,  48,  48,  56,  57,  58,\n+    59,  60,  48,  32,  61,  48,  48,  48,  48,  48,  62,  63,  64,  48,  65,  66,\n+    48,  67,  68,  69,  48,  70,  71,  72,  72,  72,  48,  73,  74,  75,  76,  32,\n+    77,  48,  48,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n+    91,  84,  85,  92,  93,  94,  95,  96,  97,  98,  85,  99, 100, 101,  89, 102,\n+   103,  84,  85, 104, 105, 106,  89, 107, 108, 109, 110, 111, 112, 113,  95, 114,\n+   115, 116,  85, 117, 118, 119,  89, 120, 121, 116,  85, 122, 123, 124,  89, 125,\n+   126, 116,  48, 127, 128, 129,  89, 130, 131, 132,  48, 133, 134, 135,  95, 136,\n+   137,  48,  48, 138, 139, 140,  72,  72, 141,  48, 142, 143, 144, 145,  72,  72,\n+   146, 147, 148, 149, 150,  48, 151, 152, 153, 154,  32, 155, 156, 157,  72,  72,\n+    48,  48, 158, 159, 160, 161, 162, 163, 164, 165,   9,   9, 166,  11,  11, 167,\n+    48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 168, 169,  48,  48,\n+   168,  48,  48, 170, 171, 172,  48,  48,  48, 171,  48,  48,  48, 173, 174, 175,\n+    48, 176,   9,   9,   9,   9,   9, 177, 178,  48,  48,  48,  48,  48,  48,  48,\n+    48,  48,  48,  48,  48,  48, 179,  48, 180, 181,  48,  48,  48,  48, 182, 183,\n+   184, 185,  48, 186,  48, 187, 184, 188,  48,  48,  48, 189, 190, 191, 192, 193,\n+   194, 192,  48,  48, 195,  48,  48, 196, 197,  48, 198,  48,  48,  48,  48, 199,\n+    48, 200, 201, 202, 203,  48, 204, 205,  48,  48, 206,  48, 207, 208, 209, 209,\n+    48, 210,  48,  48,  48, 211, 212, 213, 192, 192, 214, 215, 216,  72,  72,  72,\n+   217,  48,  48, 218, 219, 160, 220, 221, 222,  48, 223,  64,  48,  48, 224, 225,\n+    48,  48, 226, 227, 228,  64,  48, 229, 230,   9,   9, 231, 232, 233, 234, 235,\n+    11,  11, 236,  27,  27,  27, 237, 238,  11, 239,  27,  27,  32,  32,  32, 240,\n+    13,  13,  13,  13,  13,  13,  13,  13,  13, 241,  13,  13,  13,  13,  13,  13,\n+   242, 243, 242, 242, 243, 244, 242, 245, 246, 246, 246, 247, 248, 249, 250, 251,\n+   252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 262,  72, 263, 264, 216,\n+   265, 266, 267, 268, 269, 270, 271, 271, 272, 273, 274, 209, 275, 276, 209, 277,\n+   278, 278, 278, 278, 278, 278, 278, 278, 279, 209, 280, 209, 209, 209, 209, 281,\n+   209, 282, 278, 283, 209, 284, 285, 209, 209, 209, 286,  72, 287,  72, 270, 270,\n+   270, 288, 209, 209, 209, 209, 289, 270, 209, 209, 209, 209, 209, 209, 209, 209,\n+   209, 209, 209, 290, 291, 209, 209, 292, 209, 209, 209, 209, 209, 209, 293, 209,\n+   209, 209, 209, 209, 209, 209, 294, 295, 270, 296, 209, 209, 297, 278, 298, 278,\n+   299, 300, 278, 278, 278, 301, 278, 302, 209, 209, 209, 278, 303, 209, 209, 304,\n+   209, 305, 209, 209, 209, 209, 209, 209,   9,   9, 306,  11,  11, 307, 308, 309,\n+    13,  13,  13,  13,  13,  13, 310, 311,  11,  11, 312,  48,  48,  48, 313, 314,\n+    48, 315, 316, 316, 316, 316,  32,  32, 317, 318, 319, 320, 321, 322,  72,  72,\n+   209, 323, 209, 209, 209, 209, 209, 324, 209, 209, 209, 209, 209, 325,  72, 326,\n+   327, 328, 329, 330, 137,  48,  48,  48,  48, 331, 178,  48,  48,  48,  48, 332,\n+   333,  48,  48, 137,  48,  48,  48,  48, 200, 334,  48,  48, 209, 209, 324,  48,\n+   209, 335, 336, 209, 337, 338, 209, 209, 336, 209, 209, 338, 209, 209, 209, 209,\n+    48,  48,  48,  48, 209, 209, 209, 209,  48,  48,  48,  48,  48,  48,  48, 151,\n+    48, 339,  48,  48,  48,  48,  48,  48, 151, 209, 209, 209, 286,  48,  48, 229,\n+   340,  48, 341,  72,  13,  13, 342, 343,  13, 344,  48,  48,  48,  48, 345, 346,\n+    31, 347, 348, 349,  13,  13,  13, 350, 351, 352, 353, 354, 355,  72,  72, 356,\n+   357,  48, 358, 359,  48,  48,  48, 360, 361,  48,  48, 362, 363, 192,  32, 364,\n+    64,  48, 365,  48, 366, 367,  48, 151,  77,  48,  48, 368, 369, 370, 371, 372,\n+    48,  48, 373, 374, 375, 376,  48, 377,  48,  48,  48, 378, 379, 380, 381, 382,\n+   383, 384, 316,  11,  11, 385, 386,  11,  11,  11,  11,  11,  48,  48, 387, 192,\n+    48,  48, 388,  48, 389,  48,  48, 206, 390, 390, 390, 390, 390, 390, 390, 390,\n+   391, 391, 391, 391, 391, 391, 391, 391,  48,  48,  48,  48,  48,  48, 204,  48,\n+    48,  48,  48,  48,  48, 207,  72,  72, 392, 393, 394, 395, 396,  48,  48,  48,\n+    48,  48,  48, 397, 398, 399,  48,  48,  48,  48,  48, 400,  72,  48,  48,  48,\n+    48, 401,  48,  48,  74,  72,  72, 402,  32, 403,  32, 404, 405, 406, 407,  73,\n+    48,  48,  48,  48,  48,  48,  48, 408, 409,   2,   3,   4,   5, 410, 411, 412,\n+    48, 413,  48, 200, 414, 415, 416, 417, 418,  48, 172, 419, 204, 204,  72,  72,\n+    48,  48,  48,  48,  48,  48,  48,  71, 420, 270, 270, 421, 271, 271, 271, 422,\n+   423, 424, 425,  72,  72, 209, 209, 426,  72,  72,  72,  72,  72,  72,  72,  72,\n+    48, 151,  48,  48,  48, 101, 427, 428,  48,  48, 429,  48, 430,  48,  48, 431,\n+    48, 432,  48,  48, 433, 434,  72,  72,   9,   9, 435,  11,  11,  48,  48,  48,\n+    48, 204, 192,   9,   9, 436,  11, 437,  48,  48,  74,  48,  48,  48, 438,  72,\n+    48,  48,  48, 315,  48, 199,  74,  72, 439,  48,  48, 440,  48, 441,  48, 442,\n+    48, 200, 443,  72,  72,  72,  48, 444,  48, 445,  48, 446,  72,  72,  72,  72,\n+    48,  48,  48, 447, 270, 448, 270, 270, 449, 450,  48, 451, 452, 453,  48, 454,\n+    48, 455,  72,  72, 456,  48, 457, 458,  48,  48,  48, 459,  48, 460,  48, 461,\n+    48, 462, 463,  72,  72,  72,  72,  72,  48,  48,  48,  48, 196,  72,  72,  72,\n+     9,   9,   9, 464,  11,  11,  11, 465,  48,  48, 466, 192,  72,  72,  72,  72,\n+    72,  72,  72,  72,  72,  72, 270, 467,  48,  48, 468, 469,  72,  72,  72,  72,\n+    48, 455, 470,  48,  62, 471,  72,  72,  72,  72,  72,  48, 472,  72,  48, 315,\n+   473,  48,  48, 474, 475, 448, 476, 477, 222,  48,  48, 478, 479,  48, 196, 192,\n+   480,  48, 481, 482, 483,  48,  48, 484, 222,  48,  48, 485, 486, 487, 488, 489,\n+    48,  98, 490, 491,  72,  72,  72,  72, 492, 493, 494,  48,  48, 495, 496, 192,\n+   497,  84,  85, 498, 499, 500, 501, 502,  48,  48,  48, 503, 504, 505, 469,  72,\n+    48,  48,  48, 506, 507, 192,  72,  72,  48,  48, 508, 509, 510, 511,  72,  72,\n+    48,  48,  48, 512, 513, 192, 514,  72,  48,  48, 515, 516, 192,  72,  72,  72,\n+    48, 173, 517, 518,  72,  72,  72,  72,  48,  48, 490, 519,  72,  72,  72,  72,\n+    72,  72,   9,   9,  11,  11, 148, 520, 521, 522,  48, 523, 524, 192,  72,  72,\n+    72,  72, 525,  48,  48, 526, 527,  72, 528,  48,  48, 529, 530, 531,  48,  48,\n+   532, 533, 534,  72,  48,  48,  48, 196,  85,  48, 508, 535, 536, 148, 175, 537,\n+    48, 538, 539, 540,  72,  72,  72,  72, 541,  48,  48, 542, 543, 192, 544,  48,\n+   545, 546, 192,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  48, 547,\n+    72,  72,  72, 101, 270, 548, 549, 550,  48, 207,  72,  72,  72,  72,  72,  72,\n+   271, 271, 271, 271, 271, 271, 551, 552,  48,  48,  48,  48, 388,  72,  72,  72,\n+    48,  48, 200, 553,  72,  72,  72,  72,  48,  48,  48,  48, 315,  72,  72,  72,\n+    48,  48,  48, 196,  48, 200, 370,  72,  72,  72,  72,  72,  72,  48, 204, 554,\n+    48,  48,  48, 555, 556, 557, 558, 559,  48,  72,  72,  72,  72,  72,  72,  72,\n+    72,  72,  72,  72,   9,   9,  11,  11, 270, 560,  72,  72,  72,  72,  72,  72,\n+    48,  48,  48,  48, 561, 562, 563, 563, 564, 565,  72,  72,  72,  72, 566, 567,\n+    48,  48,  48,  48,  48,  48,  48,  74,  48,  48,  48,  48,  48, 199,  72,  72,\n+   196,  72,  72,  72,  72,  72,  72,  72,  48, 200,  72,  72,  72, 568, 569,  48,\n+    48,  48,  48,  48,  48,  48,  48, 206,  48,  48,  48,  48,  48,  48,  71, 151,\n+   196, 570, 571,  72,  72,  72,  72,  72, 209, 209, 209, 209, 209, 209, 209, 325,\n+   209, 209, 572, 209, 209, 209, 573, 574, 575, 209, 576, 209, 209, 209, 577,  72,\n+   209, 209, 209, 209, 578,  72,  72,  72,  72,  72,  72,  72,  72,  72, 270, 579,\n+   209, 209, 209, 209, 209, 286, 270, 452,   9, 580,  11, 581, 582, 583, 242,   9,\n+   584, 585, 586, 587, 588,   9, 580,  11, 589, 590,  11, 591, 592, 593, 594,   9,\n+   595,  11,   9, 580,  11, 581, 582,  11, 242,   9, 584, 594,   9, 595,  11,   9,\n+   580,  11, 596,   9, 597, 598, 599, 600,  11, 601,   9, 602, 603, 604, 605,  11,\n+   606,   9, 607,  11, 608, 609, 609, 609,  32,  32,  32, 610,  32,  32, 611, 612,\n+   613, 614,  45,  72,  72,  72,  72,  72, 615, 616, 617,  72,  72,  72,  72,  72,\n+    48,  48, 151, 618, 619,  72,  72,  72,  72,  72,  72,  72,  48,  48, 620, 621,\n+    48,  48,  48,  48, 622, 623,  72,  72,   9,   9, 584,  11, 624, 370,  72,  72,\n+    72,  72,  72,  72,  72,  72,  72, 488, 270, 270, 625, 626,  72,  72,  72,  72,\n+   488, 270, 627, 628,  72,  72,  72,  72, 629,  48, 630, 631, 632, 633, 634, 635,\n+   636, 206, 637, 206,  72,  72,  72, 638, 209, 209, 326, 209, 209, 209, 209, 209,\n+   209, 324, 335, 639, 639, 639, 209, 325, 640, 209, 209, 209, 209, 209, 209, 209,\n+   209, 209, 641,  72,  72,  72, 642, 209, 643, 209, 209, 326, 577, 644, 325,  72,\n+   209, 209, 209, 209, 209, 209, 209, 645, 209, 209, 209, 209, 209, 646, 424, 424,\n+   209, 209, 209, 209, 209, 209, 209, 324, 209, 209, 209, 209, 209, 577, 326,  72,\n+   326, 209, 209, 209, 646, 176, 209, 209, 646, 209, 641, 644,  72,  72,  72,  72,\n+   209, 209, 209, 209, 209, 209, 209, 647, 209, 209, 209, 209, 648, 209, 209, 209,\n+   209, 209, 209, 209, 209, 324, 641, 649, 286, 209, 577, 286, 643, 286,  72,  72,\n+   209, 650, 209, 209, 287,  72,  72, 192,  48,  48,  48,  48,  48, 204,  72,  72,\n+    48,  48,  48, 205,  48,  48,  48,  48,  48, 204,  48,  48,  48,  48,  48,  48,\n+    48,  48, 469,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48,  48, 101,  72,\n+    48, 204,  72,  72,  72,  72,  72,  72,  48,  48,  48,  48,  71,  72,  72,  72,\n+   651,  72, 652, 652, 652, 652, 652, 652,  32,  32,  32,  32,  32,  32,  32,  32,\n+    32,  32,  32,  32,  32,  32,  32,  72, 391, 391, 391, 391, 391, 391, 391, 653,\n+   391, 391, 391, 391, 391, 391, 391, 654,   0,   0,   0,   0,   0,   0,   0,   0,\n+     1,   2,   2,   3,   1,   2,   2,   3,   0,   0,   0,   0,   0,   4,   0,   4,\n+     2,   2,   5,   2,   2,   2,   5,   2,   2,   2,   2,   2,   2,   2,   2,   2,\n+     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   6,\n+     0,   0,   0,   0,   7,   8,   0,   0,   9,   9,   9,   9,   9,   9,   9,   9,\n+     9,   9,   9,   9,   9,   9,  10,  11,  12,  13,  14,  14,  15,  14,  14,  14,\n+    14,  14,  14,  14,  16,  17,  14,  14,  18,  18,  18,  18,  18,  18,  18,  18,\n+    18,  18,  18,  18,  18,  18,  18,  18,  19,  18,  18,  18,  18,  18,  18,  18,\n+    18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  20,  21,\n+    21,  21,  22,  20,  21,  21,  21,  21,  21,  23,  24,  25,  25,  25,  25,  25,\n+    25,  26,  25,  25,  25,  27,  28,  26,  29,  30,  31,  32,  31,  31,  31,  31,\n+    33,  34,  35,  31,  31,  31,  36,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n+    31,  31,  31,  29,  31,  31,  31,  31,  37,  38,  37,  37,  37,  37,  37,  37,\n+    37,  39,  31,  31,  31,  31,  31,  31,  40,  40,  40,  40,  40,  40,  41,  26,\n+    42,  42,  42,  42,  42,  42,  42,  43,  44,  44,  44,  44,  44,  45,  44,  46,\n+    47,  47,  47,  48,  37,  49,  26,  26,  26,  26,  26,  26,  31,  31,  50,  31,\n+    31,  26,  51,  31,  52,  31,  31,  31,  53,  53,  53,  53,  53,  53,  53,  53,\n+    53,  53,  54,  53,  55,  53,  53,  53,  56,  57,  58,  59,  59,  60,  61,  62,\n+    57,  63,  64,  65,  66,  59,  59,  67,  68,  69,  70,  71,  71,  72,  73,  74,\n+    69,  75,  76,  77,  78,  71,  79,  26,  80,  81,  82,  83,  83,  84,  85,  86,\n+    81,  87,  88,  26,  89,  83,  90,  91,  92,  93,  94,  95,  95,  96,  97,  98,\n+    93,  99, 100, 101, 102,  95,  95,  26, 103, 104, 105, 106, 107, 104, 108, 109,\n+   104, 105, 110,  26, 111, 108, 108, 112, 113, 114, 115, 113, 113, 115, 113, 116,\n+   114, 117, 118, 119, 120, 113, 121, 113, 122, 123, 124, 122, 122, 124, 125, 126,\n+   123, 127, 128, 129, 130, 122, 131,  26, 132, 133, 134, 132, 132, 132, 132, 132,\n+   133, 134, 135, 132, 136, 132, 132, 132, 137, 138, 139, 140, 138, 138, 141, 142,\n+   139, 143, 144, 138, 145, 138, 146,  26, 147, 148, 148, 148, 148, 148, 148, 149,\n+   148, 148, 148, 150,  26,  26,  26,  26, 151, 152, 153, 153, 154, 153, 153, 155,\n+   156, 155, 153, 157,  26,  26,  26,  26, 158, 158, 158, 158, 158, 158, 158, 158,\n+   158, 159, 158, 158, 158, 160, 159, 158, 158, 158, 158, 159, 158, 158, 158, 161,\n+   158, 161, 162, 163,  26,  26,  26,  26, 164, 164, 164, 164, 164, 164, 164, 164,\n+   164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 165, 165, 165, 165,\n+   166, 167, 165, 165, 165, 165, 165, 168, 169, 169, 169, 169, 169, 169, 169, 169,\n+   169, 169, 169, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 170, 170, 170,\n+   170, 171, 172, 171, 170, 170, 170, 170, 170, 171, 170, 170, 170, 170, 171, 172,\n+   171, 170, 172, 170, 170, 170, 170, 170, 170, 170, 171, 170, 170, 170, 170, 170,\n+   170, 170, 170, 173, 170, 170, 170, 174, 170, 170, 170, 175, 176, 176, 176, 176,\n+   176, 176, 176, 176, 176, 176, 177, 177, 178, 178, 178, 178, 178, 178, 178, 178,\n+   178, 178, 178, 178, 178, 178, 178, 178, 179, 179, 179, 180, 181, 181, 181, 181,\n+   181, 181, 181, 181, 181, 182, 181, 183, 184, 185, 186,  26, 187, 187, 188,  26,\n+   189, 189, 190,  26, 191, 192, 193,  26, 194, 194, 194, 194, 194, 194, 194, 194,\n+   194, 194, 194, 195, 194, 196, 194, 196, 197, 198, 199, 200, 199, 199, 199, 199,\n+   199, 199, 199, 199, 199, 199, 199, 201, 199, 199, 199, 199, 199, 202, 178, 178,\n+   178, 178, 178, 178, 178, 178, 203,  26, 204, 204, 204, 205, 204, 206, 204, 206,\n+   207, 204, 208, 208, 208, 209, 210,  26, 211, 211, 211, 211, 211, 212, 211, 211,\n+   211, 213, 211, 214, 194, 194, 194, 194, 215, 215, 215, 216, 217, 217, 217, 217,\n+   217, 217, 217, 218, 217, 217, 217, 219, 217, 220, 217, 220, 217, 221,   9,   9,\n+   222,  26,  26,  26,  26,  26,  26,  26, 223, 223, 223, 223, 223, 223, 223, 223,\n+   223, 224, 223, 223, 223, 223, 223, 225, 226, 226, 226, 226, 226, 226, 226, 226,\n+   227, 227, 227, 227, 227, 227, 228, 229, 230, 230, 230, 230, 230, 230, 230, 231,\n+   230, 232, 233, 233, 233, 233, 233, 233,  18, 234, 165, 165, 165, 165, 165, 235,\n+   226,  26, 236,   9, 237, 238, 239, 240,   2,   2,   2,   2, 241, 242,   2,   2,\n+     2,   2,   2, 243, 244, 245,   2, 246,   2,   2,   2,   2,   2,   2,   2, 247,\n+     9,   9,   9,   9,   9,   9,   9, 248,  14,  14, 249, 249,  14,  14,  14,  14,\n+   249, 249,  14, 250,  14,  14,  14, 249,  14,  14,  14,  14,  14,  14, 251,  14,\n+   251,  14, 252, 253,  14,  14, 254, 255,   0, 256,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0, 257,   0, 258, 259,   0, 260,   2, 261,   0,   0,   0,   0,\n+    26,  26,   9,   9,   9,   9, 222,  26,   0,   0,   0,   0, 262, 263,   4,   0,\n+     0, 264,   0,   0,   2,   2,   2,   2,   2, 265,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 260,  26,  26,  26,\n+     0, 266,  26,  26,   0,   0,   0,   0, 267, 267, 267, 267, 267, 267, 267, 267,\n+   267, 267, 267, 267, 267, 267, 267, 267,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0, 268,   0,   0,   0, 269,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0, 270, 270, 270, 270, 270, 271, 270, 270,\n+   270, 270, 270, 271,   2,   2,   2,   2,  17,  17,  17,  17,  17,  17,  17,  17,\n+    17,  17,  17,  17,  17,  17, 272, 273, 165, 165, 165, 165, 166, 167, 274, 274,\n+   274, 274, 274, 274, 274, 275, 276, 275, 170, 170, 172,  26, 172, 172, 172, 172,\n+   172, 172, 172, 172,  18,  18,  18,  18,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0, 266,  26,  26,  26,  26,  26, 277, 277, 277, 278, 277, 277, 277, 277,\n+   277, 277, 277, 277, 277, 277, 279,  26, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 280,  26,  26,  26,   0, 281, 282,   0,   0,   0, 283, 284,   0, 285,\n+   286, 287, 287, 287, 287, 287, 287, 287, 287, 287, 288, 289, 290, 291, 291, 291,\n+   291, 291, 291, 291, 291, 291, 291, 292, 293, 294, 294, 294, 294, 294, 295, 169,\n+   169, 169, 169, 169, 169, 169, 169, 169, 169, 296,   0,   0, 294, 294, 294, 294,\n+     0,   0,   0,   0, 281,  26, 291, 291, 169, 169, 169, 296,   0,   0,   0,   0,\n+     0,   0,   0,   0, 169, 169, 169, 297,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0, 291, 291, 291, 291, 291, 298, 291, 291, 291, 291, 291, 291, 291, 291,\n+   291, 291, 291,   0,   0,   0,   0,   0, 277, 277, 277, 277, 277, 277, 277, 277,\n+     0,   0,   0,   0,   0,   0,   0,   0, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 277, 277, 277, 277, 299, 300, 300, 300, 300, 300, 300, 300, 300,\n+   300, 300, 300, 300, 300, 300, 300, 300, 300, 301, 300, 300, 300, 300, 300, 300,\n+   302,  26, 303, 303, 303, 303, 303, 303, 304, 304, 304, 304, 304, 304, 304, 304,\n+   304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 305,  26,  26,\n+    18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18, 306, 306, 306, 306,\n+   306, 306, 306, 306, 306, 306, 306,  26,   0,   0,   0,   0, 307,   2,   2,   2,\n+     2,   2,   2,   2,   2,   2,   2,   2,   2, 308,   2,   2,   2,   2,   2,   2,\n+   309, 310,  26,  26,  26,  26, 311,   2, 312, 312, 312, 312, 312, 313,   0, 314,\n+   315, 315, 315, 315, 315, 315, 315,  26, 316, 316, 316, 316, 316, 316, 316, 316,\n+   317, 318, 316, 319,  53,  53,  53,  53, 320, 320, 320, 320, 320, 321, 322, 322,\n+   322, 322, 323, 324, 169, 169, 169, 325, 326, 326, 326, 326, 326, 326, 326, 326,\n+   326, 327, 326, 328, 164, 164, 164, 329, 330, 330, 330, 330, 330, 330, 331,  26,\n+   330, 332, 330, 333, 164, 164, 164, 164, 334, 334, 334, 334, 334, 334, 334, 334,\n+   335,  26,  26, 336, 337, 337, 338,  26, 339, 339, 339,  26, 172, 172,   2,   2,\n+     2,   2,   2, 340, 341, 342, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176,\n+   337, 337, 337, 337, 337, 343, 337, 344, 169, 169, 169, 169, 345,  26, 169, 169,\n+   296, 346, 169, 169, 169, 169, 169, 345,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 277, 277, 280, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 347,  26,  26,  26,  26, 348,  26, 349, 350,  25,  25, 351, 352,\n+   353,  25,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n+   354,  26,  51,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n+    31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 355,\n+    26,  26,  31,  31,  31,  31,  31,  31,  31,  31, 356,  31,  31,  31,  31,  31,\n+    31,  26,  26,  26,  26,  26,  31, 357,   9,   9,   0, 314,   9, 358,   0,   0,\n+     0,   0, 359,   0, 260, 281,  50,  31,  31,  31,  31,  31,  31,  31,  31,  31,\n+    31,  31,  31,  31,  31,  31,  31, 360, 361,   0,   0,   0,   1,   2,   2,   3,\n+     1,   2,   2,   3, 362, 291, 290, 291, 291, 291, 291, 363, 169, 169, 169, 296,\n+   364, 364, 364, 365, 260, 260,  26, 366, 367, 368, 367, 367, 369, 367, 367, 370,\n+   367, 371, 367, 371,  26,  26,  26,  26, 367, 367, 367, 367, 367, 367, 367, 367,\n+   367, 367, 367, 367, 367, 367, 367, 372, 373,   0,   0,   0,   0,   0, 374,   0,\n+    14,  14,  14,  14,  14,  14,  14,  14,  14, 255,   0, 375, 376,  26,  26,  26,\n+    26,  26,   0,   0,   0,   0,   0, 377, 378, 378, 378, 379, 380, 380, 380, 380,\n+   380, 380, 381,  26, 382,   0,   0, 281, 383, 383, 383, 383, 384, 385, 386, 386,\n+   386, 387, 388, 388, 388, 388, 388, 389, 390, 390, 390, 391, 392, 392, 392, 392,\n+   393, 392, 394,  26,  26,  26,  26,  26, 395, 395, 395, 395, 395, 395, 395, 395,\n+   395, 395, 396, 396, 396, 396, 396, 396, 397, 397, 397, 398, 397, 399, 400, 400,\n+   400, 400, 401, 400, 400, 400, 400, 401, 402, 402, 402, 402, 402,  26, 403, 403,\n+   403, 403, 403, 403, 404, 405,  26,  26, 406, 406, 406, 406, 406, 406, 406, 406,\n+   406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 406, 407,  26,\n+   406, 406, 408,  26, 406,  26,  26,  26, 409, 410, 411, 411, 411, 411, 412, 413,\n+   414, 414, 415, 414, 416, 416, 416, 416, 417, 417, 417, 418, 419, 417,  26,  26,\n+    26,  26,  26,  26, 420, 420, 421, 422, 423, 423, 423, 424, 425, 425, 425, 426,\n+    26,  26,  26,  26,  26,  26,  26,  26, 427, 427, 427, 427, 428, 428, 428, 429,\n+   428, 428, 430, 428, 428, 428, 428, 428, 431, 432, 433, 434, 435, 435, 436, 437,\n+   435, 438, 435, 438, 439, 439, 439, 439, 440, 440, 440, 440,  26,  26,  26,  26,\n+   441, 441, 441, 441, 442, 443, 442,  26, 444, 444, 444, 444, 444, 444, 445, 446,\n+   447, 447, 448, 447, 449, 449, 450, 449, 451, 451, 452, 453,  26, 454,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 455, 455, 455, 455, 455, 455, 455, 455,\n+   455, 456,  26,  26,  26,  26,  26,  26, 457, 457, 457, 457, 457, 457, 458,  26,\n+   457, 457, 457, 457, 457, 457, 458, 459, 460, 460, 460, 460, 460,  26, 460, 461,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  31,  31,  31, 462, 463, 463, 463, 463, 463, 464, 465,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 466, 466, 466, 466, 466,  26, 467, 467,\n+   467, 467, 467, 468,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 469, 469,\n+   469, 470,  26,  26, 471, 471, 472,  26, 473, 473, 473, 473, 473, 473, 473, 473,\n+   473, 474, 475, 473, 473, 473,  26, 476, 477, 477, 477, 477, 477, 477, 477, 477,\n+   478, 479, 480, 480, 480, 481, 480, 482, 483, 483, 483, 483, 483, 483, 484, 483,\n+   483,  26, 485, 485, 485, 485, 486,  26, 487, 487, 487, 487, 487, 487, 487, 487,\n+   487, 487, 487, 487, 488, 138, 489,  26, 490, 490, 491, 490, 490, 490, 490, 492,\n+    26,  26,  26,  26,  26,  26,  26,  26, 493, 494, 495, 496, 495, 497, 498, 498,\n+   498, 498, 498, 498, 498, 499, 498, 500, 501, 502, 503, 504, 504, 505, 506, 507,\n+   502, 508, 509, 510, 511, 512, 512,  26, 513, 513, 513, 513, 513, 513, 513, 513,\n+   513, 513, 513, 514, 515,  26,  26,  26, 516, 516, 516, 516, 516, 516, 516, 516,\n+   516,  26, 516, 517,  26,  26,  26,  26, 518, 518, 518, 518, 518, 518, 519, 518,\n+   518, 518, 518, 519,  26,  26,  26,  26, 520, 520, 520, 520, 520, 520, 520, 520,\n+   521,  26, 520, 522, 199, 523,  26,  26, 524, 524, 524, 524, 524, 524, 524, 525,\n+   524, 526,  26,  26,  26,  26,  26,  26, 527, 527, 527, 528, 527, 529, 527, 527,\n+    26,  26,  26,  26,  26,  26,  26,  26, 530, 530, 530, 530, 530, 530, 530, 531,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26, 532, 532, 532, 532,\n+   532, 532, 532, 532, 532, 532, 533, 534, 535, 536, 537, 538, 538, 538, 539, 540,\n+   535,  26, 538, 541,  26,  26,  26,  26,  26,  26,  26,  26, 542, 543, 542, 542,\n+   542, 542, 542, 543, 544,  26,  26,  26, 545, 545, 545, 545, 545, 545, 545, 545,\n+   545,  26, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 547,  26,  26,  26,\n+   548, 548, 548, 548, 548, 548, 548, 549, 550, 551, 550, 550, 550, 550, 552, 550,\n+   553,  26, 550, 550, 550, 554, 555, 555, 555, 555, 556, 555, 555, 557, 558,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 559, 560, 561, 561, 561, 561, 559, 562,\n+   561,  26, 561, 563, 564, 565, 566, 566, 566, 567, 568, 569, 566, 570,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26, 571, 571, 571, 572,  26,  26,  26,  26,  26,  26, 573,  26,\n+   108, 108, 108, 108, 108, 108, 574, 575, 576, 576, 576, 576, 576, 576, 576, 576,\n+   576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 577,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 576, 576, 576, 576, 576, 576, 576, 576,\n+   576, 576, 576, 576, 576, 578, 579,  26, 576, 576, 576, 576, 576, 576, 576, 576,\n+   580,  26,  26,  26,  26,  26,  26,  26, 581, 581, 581, 581, 581, 581, 581, 581,\n+   581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 582, 581, 583,\n+    26,  26,  26,  26,  26,  26,  26,  26, 584, 584, 584, 584, 584, 584, 584, 584,\n+   584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,\n+   585,  26,  26,  26,  26,  26,  26,  26, 306, 306, 306, 306, 306, 306, 306, 306,\n+   306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 586,\n+   587, 587, 587, 588, 587, 589,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26, 590, 590, 590, 591, 591,  26, 592, 592, 592, 592, 592, 592, 592, 592,\n+   593,  26, 592, 594, 594, 592, 592, 595, 592, 592,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 597,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 598, 598, 598, 598, 598, 598, 598, 598,\n+   598, 599, 598, 598, 598, 598, 598, 598, 598, 600, 598, 598,  26,  26,  26,  26,\n+    26,  26,  26,  26, 601,  26, 347,  26, 602, 602, 602, 602, 602, 602, 602, 602,\n+   602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602,\n+   602, 602, 602, 602, 602, 602, 602,  26, 603, 603, 603, 603, 603, 603, 603, 603,\n+   603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603,\n+   603, 603, 604,  26,  26,  26,  26,  26, 602, 605,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 606, 287, 287, 287, 287, 287, 287, 287,\n+   287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287,\n+   287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 288,  26,  26,  26,  26,\n+    26,  26, 607,  26, 608,  26, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609,\n+   609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609,\n+   609, 609, 609, 609, 609, 609, 609, 610, 611, 611, 611, 611, 611, 611, 611, 611,\n+   611, 611, 611, 611, 611, 612, 611, 613, 611, 614, 611, 615, 281,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0, 616,  26,   0,   0,   0,   0, 260, 361,   0,   0,\n+     0,   0,   0,   0, 617, 618,   0, 619, 620, 621,   0,   0,   0, 622,   0,   0,\n+     0,   0,   0,   0,   0, 623,  26,  26,  14,  14,  14,  14,  14,  14,  14,  14,\n+   249,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,   0,   0, 281,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0, 260,  26,   0,   0,   0, 623,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0, 257,   0,   0,   0,   0,   0,   0,   0,   0, 257, 624, 625,   0, 626,\n+   627,   0,   0,   0,   0,   0,   0,   0, 269, 628, 257, 257,   0,   0,   0, 629,\n+   630, 631, 632,   0,   0,   0,   0,   0,   0,   0,   0,   0, 616,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0, 268,   0,   0,   0,   0,   0,   0, 633, 633, 633, 633, 633, 633, 633, 633,\n+   633, 633, 633, 633, 633, 633, 633, 633, 633, 634,  26, 635, 636, 633,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 271, 270, 270, 637, 638, 639,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 640, 640, 640, 640, 640, 641, 640, 642,\n+   640, 643,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+   644, 644, 644, 644, 644, 644, 644, 645, 646, 646, 646, 646, 646, 646, 646, 646,\n+   646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646,\n+   647, 646, 648,  26,  26,  26,  26,  26, 649, 649, 649, 649, 649, 649, 649, 649,\n+   649, 650, 649, 651,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26, 361,   0,   0,   0,   0,   0,   0,   0, 375,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 361,   0,   0,   0,   0,   0,   0, 616,\n+    26,  26,  26,  26,  26,  26,  26,  26, 652,  31,  31,  31, 653, 654, 655, 656,\n+   657, 658, 653, 659, 653, 655, 655, 660,  31, 661,  31, 662, 663, 661,  31, 662,\n+    26,  26,  26,  26,  26,  26, 354,  26,   0,   0,   0,   0,   0, 281,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 281,  26,   0, 260, 361,   0,\n+   361,   0, 361,   0,   0,   0, 616,  26,   0,   0,   0,   0,   0, 616,  26,  26,\n+    26,  26,  26,  26, 664,   0,   0,   0, 665,  26,   0,   0,   0,   0,   0, 281,\n+     0, 623, 314,  26, 616,  26,  26,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,  26,   0, 375,   0, 375,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0, 281,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0, 623,   0, 281,  26,  26,   0, 281,   0,   0,   0,   0,   0,   0,\n+     0,  26,   0, 314,   0,   0,   0,   0,   0,  26,   0,   0,   0, 616, 314,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0, 632,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0, 627,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0, 281,  26,   0, 616, 375, 266, 260,  26,   0,   0,   0, 623, 260,  26,\n+   266,  26, 260,  26,  26,  26,  26,  26,   0,   0, 359,   0,   0,   0,   0,   0,\n+     0, 266,  26,  26,  26,  26,   0, 314, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 280,  26,  26,  26,  26, 277, 277, 277, 277, 277, 277, 299,  26,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 280, 277, 277, 277, 277,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 347,  26, 277, 277,\n+   277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 277, 277, 277, 666,  26,  26,  26, 277, 277, 277, 280,  26,  26,  26,  26,\n+    26,  26,  26,  26,  26,  26,  26,  26, 277, 277, 277, 277, 277, 277, 277, 277,\n+   277, 667,  26,  26,  26,  26,  26,  26, 668,  26,  26,  26,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   9,   9,   9,   9,   9,   9,   9,   9,\n+     9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,\n+     9,   9,   9,   9,   9,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0, 939, 940, 941, 942, 946, 948,   0, 962,\n+   969, 970, 971, 976,1001,1002,1003,1008,   0,1033,1040,1041,1042,1043,1047,   0,\n+     0,1080,1081,1082,1086,1110,   0,   0,1124,1125,1126,1127,1131,1133,   0,1147,\n+  1154,1155,1156,1161,1187,1188,1189,1193,   0,1219,1226,1227,1228,1229,1233,   0,\n+     0,1267,1268,1269,1273,1298,   0,1303, 943,1128, 944,1129, 954,1139, 958,1143,\n+   959,1144, 960,1145, 961,1146, 964,1149,   0,   0, 973,1158, 974,1159, 975,1160,\n+   983,1168, 978,1163, 988,1173, 990,1175, 991,1176, 993,1178, 994,1179,   0,   0,\n+  1004,1190,1005,1191,1006,1192,1014,1199,1007,   0,   0,   0,1016,1201,1020,1206,\n+     0,1022,1208,1025,1211,1023,1209,   0,   0,   0,   0,1032,1218,1037,1223,1035,\n+  1221,   0,   0,   0,1044,1230,1045,1231,1049,1235,   0,   0,1058,1244,1064,1250,\n+  1060,1246,1066,1252,1067,1253,1072,1258,1069,1255,1077,1264,1074,1261,   0,   0,\n+  1083,1270,1084,1271,1085,1272,1088,1275,1089,1276,1096,1283,1103,1290,1111,1299,\n+  1115,1118,1307,1120,1309,1121,1310,   0,1053,1239,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,1093,1280,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0, 949,1134,1010,1195,1050,1236,1090,1277,1341,1368,1340,\n+  1367,1342,1369,1339,1366,   0,1320,1347,1418,1419,1323,1350,   0,   0, 992,1177,\n+  1018,1204,1055,1241,1416,1417,1415,1424,1202,   0,   0,   0, 987,1172,   0,   0,\n+  1031,1217,1321,1348,1322,1349,1338,1365, 950,1135, 951,1136, 979,1164, 980,1165,\n+  1011,1196,1012,1197,1051,1237,1052,1238,1061,1247,1062,1248,1091,1278,1092,1279,\n+  1071,1257,1076,1263,   0,   0, 997,1182,   0,   0,   0,   0,   0,   0, 945,1130,\n+   982,1167,1337,1364,1335,1362,1046,1232,1422,1423,1113,1301,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   8,   9,   0,  10,1425,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,1314,1427,   5,\n+  1434,1438,1443,   0,1450,   0,1455,1461,1514,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1446,1458,1468,1476,1480,1486,1517,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1489,1503,1494,1500,1508,   0,   0,   0,   0,1520,1521,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1526,1528,   0,1525,   0,   0,   0,1522,\n+     0,   0,   0,   0,1536,1532,1539,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1534,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1556,   0,   0,   0,   0,   0,   0,1548,1550,   0,1547,   0,   0,   0,1567,\n+     0,   0,   0,   0,1558,1554,1561,   0,   0,   0,   0,   0,   0,   0,1568,1569,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1529,1551,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1523,1545,1524,1546,   0,   0,1527,1549,\n+     0,   0,1570,1571,1530,1552,1531,1553,   0,   0,1533,1555,1535,1557,1537,1559,\n+     0,   0,1572,1573,1544,1566,1538,1560,1540,1562,1541,1563,1542,1564,   0,   0,\n+  1543,1565,   0,   0,   0,   0,   0,   0,   0,   0,1606,1607,1609,1608,1610,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1613,   0,1611,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1612,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1620,   0,   0,   0,   0,   0,   0,   0,1623,   0,   0,1624,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1614,1615,1616,1617,1618,1619,1621,1622,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1628,1629,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1625,1626,   0,1627,   0,   0,   0,1634,   0,   0,1635,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1630,1631,1632,   0,   0,1633,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1639,   0,   0,1638,1640,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1636,1637,   0,   0,   0,   0,   0,   0,1641,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1642,1644,1643,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1645,   0,   0,   0,   0,   0,   0,   0,1646,   0,   0,   0,   0,   0,   0,1648,\n+  1649,   0,1647,1650,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1651,1653,1652,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1654,   0,1655,1657,1656,   0,   0,   0,   0,1659,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1660,   0,   0,   0,   0,1661,   0,   0,   0,   0,1662,\n+     0,   0,   0,   0,1663,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1658,   0,   0,   0,   0,   0,   0,   0,   0,   0,1664,   0,1665,1673,   0,\n+  1674,   0,   0,   0,   0,   0,   0,   0,   0,1666,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1668,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1669,   0,   0,   0,   0,1670,   0,   0,   0,   0,1671,\n+     0,   0,   0,   0,1672,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1667,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1675,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1676,   0,\n+  1677,   0,1678,   0,1679,   0,1680,   0,   0,   0,1681,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1682,   0,1683,   0,   0,1684,1685,   0,1686,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0, 953,1138, 955,1140, 956,1141, 957,1142,\n+  1324,1351, 963,1148, 965,1150, 968,1153, 966,1151, 967,1152,1378,1380,1379,1381,\n+   984,1169, 985,1170,1420,1421, 986,1171, 989,1174, 995,1180, 998,1183, 996,1181,\n+   999,1184,1000,1185,1015,1200,1329,1356,1017,1203,1019,1205,1021,1207,1024,1210,\n+  1687,1688,1027,1213,1026,1212,1028,1214,1029,1215,1030,1216,1034,1220,1036,1222,\n+  1039,1225,1038,1224,1334,1361,1336,1363,1382,1384,1383,1385,1056,1242,1057,1243,\n+  1059,1245,1063,1249,1689,1690,1065,1251,1068,1254,1070,1256,1386,1387,1388,1389,\n+  1691,1692,1073,1259,1075,1262,1079,1266,1078,1265,1095,1282,1098,1285,1097,1284,\n+  1390,1391,1392,1393,1099,1286,1100,1287,1101,1288,1102,1289,1105,1292,1104,1291,\n+  1106,1294,1107,1295,1108,1296,1114,1302,1119,1308,1122,1311,1123,1312,1186,1260,\n+  1293,1305,   0,1394,   0,   0,   0,   0, 952,1137, 947,1132,1317,1344,1316,1343,\n+  1319,1346,1318,1345,1693,1695,1371,1375,1370,1374,1373,1377,1372,1376,1694,1696,\n+   981,1166, 977,1162, 972,1157,1326,1353,1325,1352,1328,1355,1327,1354,1697,1698,\n+  1009,1194,1013,1198,1054,1240,1048,1234,1331,1358,1330,1357,1333,1360,1332,1359,\n+  1699,1700,1396,1401,1395,1400,1398,1403,1397,1402,1399,1404,1094,1281,1087,1274,\n+  1406,1411,1405,1410,1408,1413,1407,1412,1409,1414,1109,1297,1117,1306,1116,1304,\n+  1112,1300,   0,   0,   0,   0,   0,   0,1471,1472,1701,1705,1702,1706,1703,1707,\n+  1430,1431,1715,1719,1716,1720,1717,1721,1477,1478,1729,1731,1730,1732,   0,   0,\n+  1435,1436,1733,1735,1734,1736,   0,   0,1481,1482,1737,1741,1738,1742,1739,1743,\n+  1439,1440,1751,1755,1752,1756,1753,1757,1490,1491,1765,1768,1766,1769,1767,1770,\n+  1447,1448,1771,1774,1772,1775,1773,1776,1495,1496,1777,1779,1778,1780,   0,   0,\n+  1451,1452,1781,1783,1782,1784,   0,   0,1504,1505,1785,1788,1786,1789,1787,1790,\n+     0,1459,   0,1791,   0,1792,   0,1793,1509,1510,1794,1798,1795,1799,1796,1800,\n+  1462,1463,1808,1812,1809,1813,1810,1814,1467,  21,1475,  22,1479,  23,1485,  24,\n+  1493,  27,1499,  28,1507,  29,   0,   0,1704,1708,1709,1710,1711,1712,1713,1714,\n+  1718,1722,1723,1724,1725,1726,1727,1728,1740,1744,1745,1746,1747,1748,1749,1750,\n+  1754,1758,1759,1760,1761,1762,1763,1764,1797,1801,1802,1803,1804,1805,1806,1807,\n+  1811,1815,1816,1817,1818,1819,1820,1821,1470,1469,1822,1474,1465,   0,1473,1825,\n+  1429,1428,1426,  12,1432,   0,  26,   0,   0,1315,1823,1484,1466,   0,1483,1829,\n+  1433,  13,1437,  14,1441,1826,1827,1828,1488,1487,1513,  19,   0,   0,1492,1515,\n+  1445,1444,1442,  15,   0,1831,1832,1833,1502,1501,1516,  25,1497,1498,1506,1518,\n+  1457,1456,1454,  17,1453,1313,  11,   3,   0,   0,1824,1512,1519,   0,1511,1830,\n+  1449,  16,1460,  18,1464,   4,   0,   0,  30,  31,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  20,   0,\n+     0,   0,   2,   6,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1834,1835,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1836,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1837,1839,1838,   0,   0,   0,   0,1840,   0,   0,   0,\n+     0,1841,   0,   0,1842,   0,   0,   0,   0,   0,   0,   0,1843,   0,1844,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1845,   0,   0,1846,   0,   0,1847,\n+     0,1848,   0,   0,   0,   0,   0,   0, 937,   0,1850,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1849, 936, 938,1851,1852,   0,   0,1853,1854,   0,   0,\n+  1855,1856,   0,   0,   0,   0,   0,   0,1857,1858,   0,   0,1861,1862,   0,   0,\n+  1863,1864,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1867,1868,1869,1870,1859,1860,1865,1866,   0,   0,   0,   0,\n+     0,   0,1871,1872,1873,1874,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,  32,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1875,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1877,   0,1878,   0,1879,   0,1880,   0,1881,   0,1882,   0,\n+  1883,   0,1884,   0,1885,   0,1886,   0,1887,   0,1888,   0,   0,1889,   0,1890,\n+     0,1891,   0,   0,   0,   0,   0,   0,1892,1893,   0,1894,1895,   0,1896,1897,\n+     0,1898,1899,   0,1900,1901,   0,   0,   0,   0,   0,   0,1876,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1902,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,1904,   0,1905,   0,1906,   0,1907,   0,1908,   0,1909,   0,\n+  1910,   0,1911,   0,1912,   0,1913,   0,1914,   0,1915,   0,   0,1916,   0,1917,\n+     0,1918,   0,   0,   0,   0,   0,   0,1919,1920,   0,1921,1922,   0,1923,1924,\n+     0,1925,1926,   0,1927,1928,   0,   0,   0,   0,   0,   0,1903,   0,   0,1929,\n+  1930,1931,1932,   0,   0,   0,1933,   0, 710, 385, 724, 715, 455, 103, 186, 825,\n+   825, 242, 751, 205, 241, 336, 524, 601, 663, 676, 688, 738, 411, 434, 474, 500,\n+   649, 746, 799, 108, 180, 416, 482, 662, 810, 275, 462, 658, 692, 344, 618, 679,\n+   293, 388, 440, 492, 740, 116, 146, 168, 368, 414, 481, 527, 606, 660, 665, 722,\n+   781, 803, 809, 538, 553, 588, 642, 758, 811, 701, 233, 299, 573, 612, 487, 540,\n+   714, 779, 232, 267, 412, 445, 457, 585, 594, 766, 167, 613, 149, 148, 560, 589,\n+   648, 768, 708, 345, 411, 704, 105, 259, 313, 496, 518, 174, 542, 120, 307, 101,\n+   430, 372, 584, 183, 228, 529, 650, 697, 424, 732, 428, 349, 632, 355, 517, 110,\n+   135, 147, 403, 580, 624, 700, 750, 170, 193, 245, 297, 374, 463, 543, 763, 801,\n+   812, 815, 162, 384, 420, 730, 287, 330, 337, 366, 459, 476, 509, 558, 591, 610,\n+   726, 652, 734, 759, 154, 163, 198, 473, 683, 697, 292, 311, 353, 423, 572, 494,\n+   113, 217, 259, 280, 314, 499, 506, 603, 608, 752, 778, 782, 788, 117, 557, 748,\n+   774, 320, 109, 126, 260, 265, 373, 411, 479, 523, 655, 737, 823, 380, 765, 161,\n+   395, 398, 438, 451, 502, 516, 537, 583, 791, 136, 340, 769, 122, 273, 446, 727,\n+   305, 322, 400, 496, 771, 155, 190, 269, 377, 391, 406, 432, 501, 519, 599, 684,\n+   687, 749, 776, 175, 452, 191, 480, 510, 659, 772, 805, 813, 397, 444, 619, 566,\n+   568, 575, 491, 471, 707, 111, 636, 156, 153, 288, 346, 578, 256, 435, 383, 729,\n+   680, 767, 694, 295, 128, 210,   0,   0, 227,   0, 379,   0,   0, 150, 493, 525,\n+   544, 551, 552, 556, 783, 576, 604,   0, 661,   0, 703,   0,   0, 735, 743,   0,\n+     0,   0, 793, 794, 795, 808, 741, 773, 118, 127, 130, 166, 169, 177, 207, 213,\n+   215, 226, 229, 268, 270, 317, 327, 329, 335, 369, 375, 381, 404, 441, 448, 458,\n+   477, 484, 503, 539, 545, 547, 546, 548, 549, 550, 554, 555, 561, 564, 569, 591,\n+   593, 595, 598, 607, 620, 625, 625, 651, 690, 695, 705, 706, 716, 717, 733, 735,\n+   777, 786, 790, 315, 869, 623,   0,   0, 102, 145, 134, 115, 129, 138, 165, 171,\n+   207, 202, 206, 212, 227, 231, 240, 243, 250, 254, 294, 296, 303, 308, 319, 325,\n+   321, 329, 326, 335, 341, 357, 360, 362, 370, 379, 388, 389, 393, 421, 424, 438,\n+   456, 454, 458, 465, 477, 535, 485, 490, 493, 507, 512, 514, 521, 522, 525, 526,\n+   528, 533, 532, 541, 565, 569, 574, 586, 591, 597, 607, 637, 647, 674, 691, 693,\n+   695, 698, 703, 699, 705, 704, 702, 706, 709, 717, 728, 736, 747, 754, 770, 777,\n+   783, 784, 786, 787, 790, 802, 825, 848, 847, 857,  55,  65,  66, 883, 892, 916,\n+   822, 824,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,1586,   0,1605,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1602,1603,1934,1935,1574,1575,1576,1577,1579,1580,1581,1583,1584,   0,\n+  1585,1587,1588,1589,1591,   0,1592,   0,1593,1594,   0,1595,1596,   0,1598,1599,\n+  1600,1601,1604,1582,1578,1590,1597,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1936,   0,1937,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1938,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1939,1940,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1941,1942,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1944,1943,   0,1945,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,1946,1947,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1948,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1949,1950,1951,1952,1953,1954,1955,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1956,1957,1958,1960,1959,1961,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0, 106, 104, 107, 826, 114, 118, 119, 121,\n+   123, 124, 127, 125,  34, 830, 130, 131, 132, 137, 827,  35, 133, 139, 829, 142,\n+   143, 112, 144, 145, 924, 151, 152,  37, 157, 158, 159, 160,  38, 165, 166, 169,\n+   171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 182, 182, 833, 468, 184, 185,\n+   834, 187, 188, 189, 196, 192, 194, 195, 197, 199, 200, 201, 203, 204, 204, 206,\n+   208, 209, 211, 218, 213, 219, 214, 216, 153, 234, 221, 222, 223, 220, 225, 224,\n+   230, 835, 235, 236, 237, 238, 239, 244, 836, 837, 247, 248, 249, 246, 251,  39,\n+    40, 253, 255, 255, 838, 257, 258, 259, 261, 839, 262, 263, 301, 264,  41, 266,\n+   270, 272, 271, 841, 274, 842, 277, 276, 278, 281, 282,  42, 283, 284, 285, 286,\n+    43, 843,  44, 289, 290, 291, 293, 934, 298, 845, 845, 621, 300, 300,  45, 852,\n+   894, 302, 304,  46, 306, 309, 310, 312, 316,  48,  47, 317, 846, 318, 323, 324,\n+   325, 324, 328, 329, 333, 331, 332, 334, 335, 336, 338, 339, 342, 343, 347, 351,\n+   849, 350, 348, 352, 354, 359, 850, 361, 358, 356,  49, 363, 365, 367, 364,  50,\n+   369, 371, 851, 376, 386, 378,  53, 381,  52,  51, 140, 141, 387, 382, 614,  78,\n+   388, 389, 390, 394, 392, 856,  54, 399, 396, 402, 404, 858, 405, 401, 407,  55,\n+   408, 409, 410, 413, 859, 415,  56, 417, 860, 418,  57, 419, 422, 424, 425, 861,\n+   840, 862, 426, 863, 429, 431, 427, 433, 437, 441, 438, 439, 442, 443, 864, 436,\n+   449, 450,  58, 454, 453, 865, 447, 460, 866, 867, 461, 466, 465, 464,  59, 467,\n+   470, 469, 472, 828, 475, 868, 478, 870, 483, 485, 486, 871, 488, 489, 872, 873,\n+   495, 497,  60, 498,  61,  61, 504, 505, 507, 508, 511,  62, 513, 874, 515, 875,\n+   518, 844, 520, 876, 877, 878,  63,  64, 528, 880, 879, 881, 882, 530, 531, 531,\n+   533,  66, 534,  67,  68, 884, 536, 538, 541,  69, 885, 549, 886, 887, 556, 559,\n+    70, 561, 562, 563, 888, 889, 889, 567,  71, 890, 570, 571,  72, 891, 577,  73,\n+   581, 579, 582, 893, 587,  74, 590, 592, 596,  75, 895, 896,  76, 897, 600, 898,\n+   602, 605, 607, 899, 900, 609, 901, 611, 853,  77, 615, 616,  79, 617, 252, 902,\n+   903, 854, 855, 621, 622, 731,  80, 627, 626, 628, 164, 629, 630, 631, 633, 904,\n+   632, 634, 639, 640, 635, 641, 646, 651, 638, 643, 644, 645, 905, 907, 906,  81,\n+   653, 654, 656, 911, 657, 908,  82,  83, 909, 910,  84, 664, 665, 666, 667, 669,\n+   668, 671, 670, 674, 672, 673, 675,  85, 677, 678,  86, 681, 682, 912, 685, 686,\n+    87, 689,  36, 913, 914,  88,  89, 696, 702, 709, 711, 915, 712, 713, 718, 719,\n+   917, 831, 721, 720, 723, 832, 725, 728, 918, 919, 739, 742, 744, 920, 745, 753,\n+   756, 757, 755, 760, 761, 921, 762,  90, 764, 922,  91, 775, 279, 780, 923, 925,\n+    92,  93, 785, 926,  94, 927, 787, 787, 789, 928, 792,  95, 796, 797, 798, 800,\n+    96, 929, 802, 804, 806,  97,  98, 807, 930,  99, 931, 932, 933, 814, 100, 816,\n+   817, 818, 819, 820, 821, 935,   0,   0,\n+};\n+static const int16_t\n+_hb_ucd_i16[196] =\n+{\n+      0,    0,    0,    0,    1,   -1,    0,    0,    2,    0,   -2,    0,    0,    0,    0,    2,\n+      0,   -2,    0,    0,    0,    0,    0,   16,    0,    0,    0,  -16,    0,    0,    1,   -1,\n+      0,    0,    0,    1,   -1,    0,    0,    0,    0,    1,   -1,    0,    3,    3,    3,   -3,\n+     -3,   -3,    0,    0,    0, 2016,    0,    0,    0,    0,    0, 2527, 1923, 1914, 1918,    0,\n+   2250,    0,    0,    0,    0,    0,    0,  138,    0,    7,    0,    0,   -7,    0,    0,    0,\n+      1,   -1,    1,   -1,   -1,    1,   -1,    0, 1824,    0,    0,    0,    0,    0, 2104,    0,\n+   2108, 2106,    0, 2106, 1316,    0,    0,    0,    0,    1,   -1,    1,   -1, -138,    0,    0,\n+      1,   -1,    8,    8,    8,    0,    7,    7,    0,    0,   -8,   -8,   -8,   -7,   -7,    0,\n+      1,   -1,    0,    2,-1316,    1,   -1,    0,   -1,    1,   -1,    1,   -1,    3,    1,   -1,\n+     -3,    1,   -1,    1,   -1,    0,    0,-1914,-1918,    0,    0,-1923,-1824,    0,    0,    0,\n+      0,-2016,    0,    0,    1,   -1,    0,    1,    0,    0,-2104,    0,    0,    0,    0,-2106,\n+  -2108,-2106,    0,    0,    1,   -1,-2250,    0,    0,    0,-2527,    0,    0,   -2,    0,    1,\n+     -1,    0,    1,   -1,\n+};\n+\n+static inline uint_fast8_t\n+_hb_ucd_gc (unsigned u)\n+{\n+  return u<1114110u?_hb_ucd_u8[6504+(((_hb_ucd_u8[1264+(((_hb_ucd_u16[((_hb_ucd_u8[544+(((_hb_ucd_u8[u>>1>>3>>3>>4])<<4)+((u>>1>>3>>3)&15u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n+}\n+static inline uint_fast8_t\n+_hb_ucd_ccc (unsigned u)\n+{\n+  return u<125259u?_hb_ucd_u8[8768+(((_hb_ucd_u8[7792+(((_hb_ucd_u8[7120+(((_hb_ucd_u8[6874+(u>>2>>3>>4)])<<4)+((u>>2>>3)&15u))])<<3)+((u>>2)&7u))])<<2)+((u)&3u))]:0;\n+}\n+static inline unsigned\n+_hb_ucd_b4 (const uint8_t* a, unsigned i)\n+{\n+  return (a[i>>1]>>((i&1u)<<2))&15u;\n+}\n+static inline int_fast16_t\n+_hb_ucd_bmg (unsigned u)\n+{\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[9508+(((_hb_ucd_u8[9388+(((_hb_ucd_b4(9260+_hb_ucd_u8,u>>2>>3>>3))<<3)+((u>>2>>3)&7u))])<<3)+((u>>2)&7u))])<<2)+((u)&3u)]:0;\n+}\n+static inline uint_fast8_t\n+_hb_ucd_sc (unsigned u)\n+{\n+  return u<918000u?_hb_ucd_u8[10974+(((_hb_ucd_u16[1960+(((_hb_ucd_u8[10286+(((_hb_ucd_u8[9836+(u>>3>>4>>4)])<<4)+((u>>3>>4)&15u))])<<4)+((u>>3)&15u))])<<3)+((u)&7u))]:2;\n+}\n+static inline uint_fast16_t\n+_hb_ucd_dm (unsigned u)\n+{\n+  return u<195102u?_hb_ucd_u16[5768+(((_hb_ucd_u8[16708+(((_hb_ucd_u8[16326+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n+}\n+\n+\n+#else\n+\n+static const uint8_t\n+_hb_ucd_u8[13344] =\n+{\n+    0,  1,  2,  3,  4,  5,  5,  5,  5,  5,  6,  5,  5,  7,  8,  9,\n+   10, 11, 12, 13, 14, 15, 16,  5, 17, 15, 15, 18, 15, 19, 20, 21,\n+    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 22, 23,\n+    5, 24, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+   25, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n+    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n+   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n+   32, 33, 34, 34, 34, 34, 35, 36, 37, 34, 34, 34, 38, 39, 40, 41,\n+   42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n+   58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69, 67, 70, 71,\n+   67, 67, 62, 72, 62, 62, 73, 67, 74, 75, 76, 77, 78, 67, 67, 67,\n+   79, 80, 34, 81, 82, 83, 67, 67, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 84, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   85, 34, 34, 34, 34, 34, 34, 34, 34, 86, 34, 34, 87, 88, 89, 90,\n+   91, 92, 93, 94, 95, 96, 97, 98, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n+  100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,\n+  100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,\n+  100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,\n+  100,100, 34, 34, 34, 34,101,102, 34, 34,103,104,105,106,107,108,\n+   34, 34,109,110,111,112,113,114,115,116,117,111, 34, 34, 34,111,\n+  118,119,120,121,122,123,124,125, 34,126,127,111,128,129,130,131,\n+  132,133,134,135,136,137,138,111,139,140,111,141,142,143,144,111,\n+  145,146,147,148,149,150,111,111,151,152,153,154,111,155,111,156,\n+   34, 34, 34, 34, 34, 34, 34, 34,157, 34, 34,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+   34, 34, 34, 34, 34, 34, 34, 34,158,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111, 34, 34, 34, 34, 34,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+   34, 34, 34, 34,159,160,161, 34,111,111,111,111,162,163,164,165,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,111,111,111,111,111,\n+   34, 34, 34, 34, 34, 34,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111, 34,166,111,111,111,111,111,111,\n+   67, 67,167,168,169,128, 65,111,170,171,172,173,174,175,176,177,\n+   67, 67, 67, 67,178,179,111,111,111,111,111,111,111,111,111,111,\n+  180,111,181,111,111,182,111,111,111,111,111,111,111,111,111,111,\n+   34,183,184,111,111,111,111,111,128,185,186,111, 34,187,111,111,\n+   67, 67,188, 67, 67,111, 67,189, 67, 67, 67, 67, 67, 67, 67, 67,\n+   67, 67, 67, 67, 67, 67, 67,190,111,111,111,111,111,111,111,111,\n+   34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n+   34, 34, 34, 34, 34, 34, 34, 34,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+   34, 34, 34, 34, 34,111,111,111,111,111,111,111,111,111,111,111,\n+   34, 34, 34, 34, 34, 34, 34,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+  191,111,180,180,111,111,111,111,111,111,111,111,111,111,111,111,\n+  111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,\n+    0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  2,  4,  5,  6,  2,\n+    7,  7,  7,  7,  7,  2,  8,  9, 10, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 12, 13, 14, 15, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 17, 18, 19,  1, 20, 20, 21, 22, 23, 24, 25,\n+   26, 27, 15,  2, 28, 29, 27, 30, 11, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 31, 11, 11, 11, 32, 16, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 33, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32, 32, 32, 32, 34, 34, 34, 34, 34, 34, 34, 34, 16, 32, 32, 32,\n+   32, 32, 32, 32, 11, 34, 34, 16, 34, 32, 32, 11, 34, 11, 16, 11,\n+   11, 34, 32, 11, 32, 16, 11, 34, 32, 32, 32, 11, 34, 16, 32, 11,\n+   34, 11, 34, 34, 32, 35, 32, 16, 36, 36, 37, 34, 38, 37, 34, 34,\n+   34, 34, 34, 34, 34, 34, 16, 32, 34, 38, 32, 11, 32, 32, 32, 32,\n+   32, 32, 16, 16, 16, 11, 34, 32, 34, 34, 11, 32, 32, 32, 32, 32,\n+   16, 16, 39, 16, 16, 16, 16, 16, 40, 40, 40, 40, 40, 40, 40, 40,\n+   40, 41, 41, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41,\n+   40, 40, 42, 41, 41, 41, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41,\n+   43, 43, 43, 43, 43, 43, 43, 43, 32, 32, 42, 32, 16, 44, 16, 10,\n+   41, 41, 41, 45, 11, 11, 11, 11, 34, 11, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 34,\n+   16, 11, 32, 16, 32, 32, 32, 32, 16, 16, 32, 46, 34, 32, 34, 11,\n+   32, 47, 43, 43, 48, 32, 32, 32, 11, 34, 34, 34, 34, 34, 34, 16,\n+   11, 11, 11, 11, 49,  2,  2,  2, 16, 16, 16, 16, 50, 51, 52, 53,\n+   54, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 55,\n+   56, 57, 43, 56, 43, 43, 43, 43, 36, 36, 36, 36, 36, 36, 36, 36,\n+   36, 58,  2,  2,  2,  2,  2,  2, 59, 59, 59,  8,  9, 60,  2, 61,\n+   43, 43, 43, 43, 43, 57, 59,  2, 62, 36, 36, 36, 36, 63, 43, 43,\n+    7,  7,  7,  7,  7,  2,  2, 36, 64, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 65, 43, 43, 43, 66, 47, 43, 43, 67, 68, 69, 43, 43, 36,\n+    7,  7,  7,  7,  7, 36, 70, 71,  2,  2,  2,  2,  2,  2,  2, 72,\n+   63, 36, 36, 36, 36, 36, 36, 36, 43, 43, 43, 43, 43, 43, 64, 36,\n+   36, 36, 36, 43, 43, 43, 43, 43,  7,  7,  7,  7,  7, 36, 36, 36,\n+   36, 36, 36, 36, 36, 63, 43, 43, 43, 43, 40, 21,  2, 40, 68, 20,\n+   36, 36, 36, 43, 43, 68, 43, 43, 43, 43, 68, 43, 68, 43, 43, 43,\n+    2,  2,  2,  2,  2,  2,  2,  2, 36, 36, 36, 36, 63, 43, 43,  2,\n+   36, 63, 43, 43, 43, 43, 43, 43, 43, 73, 43, 43, 43, 43, 43, 43,\n+   43, 74, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 74, 64, 75,\n+   76, 43, 43, 43, 74, 75, 76, 75, 63, 43, 43, 43, 36, 36, 36, 36,\n+   36, 43,  2,  7,  7,  7,  7,  7, 77, 36, 36, 36, 36, 36, 36, 36,\n+   63, 75, 78, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 64, 75,\n+   76, 43, 43, 74, 75, 75, 76, 36, 36, 36, 36, 79, 75, 75, 36, 36,\n+   36, 43, 43,  7,  7,  7,  7,  7, 36, 20, 27, 27, 27, 53, 58, 43,\n+   43, 74, 78, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 43, 75,\n+   76, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 64, 36, 36, 36,\n+   36, 36, 36,  7,  7,  7,  7,  7, 43, 36, 63,  2,  2,  2,  2,  2,\n+   76, 43, 43, 43, 74, 75, 76, 43, 60, 20, 20, 20, 80, 43, 43, 43,\n+   43, 75, 78, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 64, 76,\n+   76, 43, 43, 74, 75, 75, 76, 43, 43, 43, 43, 74, 75, 75, 36, 36,\n+   71, 27, 27, 27, 27, 27, 27, 27, 43, 64, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 75, 74, 75, 75, 75, 75, 75, 76, 43,\n+   36, 36, 36, 79, 75, 75, 75, 75, 75, 75, 75,  7,  7,  7,  7,  7,\n+   27, 81, 61, 61, 53, 61, 61, 61, 74, 75, 64, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36, 43, 74, 75, 75, 43, 43, 43, 43, 43,\n+   43, 43, 43, 43, 36, 36, 36, 36,  7,  7,  7, 82, 27, 27, 27, 81,\n+   63, 75, 65, 36, 36, 36, 36, 36, 75, 75, 75, 74, 75, 75, 43, 43,\n+   43, 43, 74, 75, 75, 75, 75, 36, 83, 36, 36, 36, 36, 36, 36, 36,\n+   43, 75, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 63, 64, 75,\n+   76, 43, 43, 75, 75, 75, 76, 70, 61, 61, 36, 79, 27, 27, 27, 84,\n+   27, 27, 27, 27, 81, 36, 36, 36, 36, 36, 36, 36, 36, 43, 43, 74,\n+   75, 43, 43, 43, 75, 75, 75, 75,  7, 75,  2,  2,  2,  2,  2,  2,\n+   63, 36, 43, 43, 43, 43, 43, 85, 36, 36, 36, 68, 43, 43, 43, 57,\n+    7,  7,  7,  7,  7,  2,  2,  2, 63, 36, 43, 43, 43, 43, 64, 36,\n+   36, 36, 36, 40, 43, 43, 43, 43,  7,  7,  7,  7,  7,  7, 36, 36,\n+   70, 61,  2,  2,  2,  2,  2,  2,  2, 86, 86, 61, 43, 61, 61, 61,\n+    7,  7,  7,  7,  7, 27, 27, 27, 27, 27, 47, 47, 47,  4,  4, 75,\n+   63, 43, 43, 43, 43, 43, 43, 74, 43, 43, 57, 43, 36, 36, 63, 43,\n+   43, 43, 43, 43, 43, 43, 43, 61, 61, 61, 61, 69, 61, 61, 61, 61,\n+    2,  2, 86, 61, 21,  2,  2,  2, 36, 36, 36, 36, 36, 79, 76, 43,\n+   74, 43, 43, 43, 76, 74, 76, 64, 36, 36, 36, 75, 43, 36, 36, 43,\n+   64, 75, 78, 79, 75, 75, 75, 36, 63, 43, 64, 36, 36, 36, 36, 36,\n+   36, 74, 76, 74, 75, 75, 76, 79,  7,  7,  7,  7,  7, 75, 76, 61,\n+   16, 16, 16, 16, 16, 50, 44, 16, 36, 36, 36, 36, 36, 36, 63, 43,\n+    2,  2,  2,  2, 87, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\n+   61, 61, 61, 61, 61, 61, 61, 61, 11, 11, 11, 11, 16, 16, 16, 16,\n+   88, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 70, 65,\n+   89, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 90, 91, 91,\n+   36, 36, 36, 36, 36, 58,  2, 92, 93, 36, 36, 36, 36, 36, 36, 36,\n+   36, 43, 43, 43, 43, 43, 43, 43, 36, 43, 57,  2,  2,  2,  2,  2,\n+   36, 36, 43, 76, 43, 43, 43, 75, 75, 75, 75, 74, 76, 43, 43, 43,\n+   43, 43,  2, 77,  2, 60, 63, 43,  7,  7,  7,  7,  7,  7,  7,  7,\n+    2,  2,  2, 94,  2, 56, 43, 59, 36, 95, 36, 36, 36, 36, 36, 36,\n+   36, 36, 63, 64, 36, 36, 36, 36, 36, 36, 36, 36, 63, 36, 36, 36,\n+   43, 74, 75, 76, 74, 75, 75, 75, 75, 74, 75, 75, 76, 43, 43, 43,\n+   61, 61,  2,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 27, 27, 61,\n+   36, 36, 36, 63, 74, 76, 43,  2, 36, 36, 79, 74, 43, 43, 43, 43,\n+   74, 74, 76, 43, 43, 43, 74, 75, 75, 76, 43, 43, 43, 43, 43, 43,\n+    2,  2,  2, 77,  2,  2,  2,  2, 43, 43, 43, 43, 43, 43, 43, 96,\n+   43, 43, 78, 36, 36, 36, 36, 36, 36, 36, 74, 43, 43, 74, 74, 75,\n+   75, 74, 78, 36, 36, 36, 36, 36, 86, 61, 61, 61, 61, 47, 43, 43,\n+   43, 43, 61, 61, 61, 61, 61, 61, 43, 78, 36, 36, 36, 36, 36, 36,\n+   79, 43, 43, 75, 43, 76, 43, 36, 36, 36, 36, 74, 43, 75, 76, 76,\n+   43, 75, 75, 75, 75, 75,  2,  2, 36, 36, 75, 75, 75, 75, 43, 43,\n+   43, 43, 75, 43, 43, 57,  2,  2,  7,  7,  7,  7,  7,  7, 83, 36,\n+   36, 36, 36, 36, 40, 40, 40,  2, 43, 57, 43, 43, 43, 43, 43, 43,\n+   74, 43, 43, 43, 64, 36, 63, 36, 36, 36, 64, 79, 43, 36, 36, 36,\n+   16, 16, 16, 16, 16, 16, 40, 40, 40, 40, 40, 40, 40, 44, 16, 16,\n+   16, 16, 16, 16, 44, 16, 16, 16, 16, 16, 16, 16, 16, 97, 40, 40,\n+   32, 32, 32, 16, 16, 16, 16, 32, 16, 16, 16, 16, 11, 11, 11, 11,\n+   16, 16, 16, 16, 34, 11, 11, 11, 16, 16, 16, 16, 98, 98, 98, 98,\n+   16, 16, 16, 16, 11, 11, 99,100, 41, 16, 16, 16, 11, 11, 99, 41,\n+   16, 16, 16, 16, 11, 11,101, 41,102,102,102,102,102,103, 59, 59,\n+   51, 51, 51,  2,104,105,104,105,  2,  2,  2,  2,106, 59, 59,107,\n+    2,  2,  2,  2,108,109,  2,110,111,  2,112,113,  2,  2,  2,  2,\n+    2,  9,111,  2,  2,  2,  2,114, 59, 59, 59, 59, 59, 59, 59, 59,\n+  115, 40, 27, 27, 27,  8,112,116, 27, 27, 27, 27, 27,  8,112, 91,\n+   20, 20, 20, 20, 20, 20, 20, 20, 43, 43, 43, 43, 43, 43,117, 48,\n+   96, 48, 96, 43, 43, 43, 43, 43, 61,118, 61,119, 61, 34, 11, 16,\n+   11, 32,119, 61, 46, 11, 11, 61, 61, 61,118,118,118, 11, 11,120,\n+   11, 11, 35, 36, 39, 61, 16, 11,  8,  8, 46, 16, 16, 26, 61,121,\n+   92, 92, 92, 92, 92, 92, 92, 92, 92,122,123, 92,124, 61, 61, 61,\n+    8,  8,125, 61, 61,  8, 61, 61,125, 26, 61,125, 61, 61, 61,125,\n+   61, 61, 61, 61, 61, 61, 61,  8, 61,125,125, 61, 61, 61, 61, 61,\n+   61, 61,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n+   61, 61, 61, 61,  4,  4, 61, 61,  8, 61, 61, 61,126,127, 61, 61,\n+   61, 61, 61, 61, 61, 61,125, 61, 61, 61, 61, 61, 61, 26,  8,  8,\n+    8,  8, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,  8,  8,\n+    8, 61, 61, 61, 61, 61, 61, 61, 27, 27, 27, 27, 27, 27, 61, 61,\n+   61, 61, 61, 61, 61, 27, 27, 27, 61, 61, 61, 26, 61, 61, 61, 61,\n+   26, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,  8,  8,  8,  8,\n+   61, 61, 61, 61, 61, 61, 61, 26, 61, 61, 61, 61,  4,  4,  4,  4,\n+    4,  4,  4, 27, 27, 27, 27, 27, 27, 27, 61, 61, 61, 61, 61, 61,\n+    8,  8,112,128,  8,  8,  8,  8,  8,  8,  8,  4,  4,  4,  4,  4,\n+    8,112,129,129,129,129,129,129,129,129,129,129,128,  8,  8,  8,\n+    8,  8,  8,  8,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  4,  8,\n+    8,  8,125, 26,  8,  8,125, 61, 32, 11, 32, 34, 34, 34, 34, 11,\n+   32, 32, 34, 16, 16, 16, 40, 11, 32, 32,121, 61, 61,119, 34,130,\n+   43, 32, 16, 16, 50,  2, 87,  2, 36, 36, 36, 36, 36, 36, 36, 95,\n+    2,  2,  2,  2,  2,  2,  2, 56,  2,104,104,  2,108,109,104,  2,\n+    2,  2,  2,  6,  2, 94,104,  2,104,  4,  4,  4,  4,  2,  2, 77,\n+    2,  2,  2,  2,  2, 51,  2,  2, 94,131,  2,  2,  2,  2,  2,  2,\n+   61,  2,  2,  2,  2,  2,  2,  2,  1,  2,132,133,  4,  4,  4,  4,\n+    4, 61,  4,  4,  4,  4,134, 91,135, 92, 92, 92, 92, 43, 43, 75,\n+  136, 40, 40, 61, 92,137, 58, 61, 71, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 63,138,139, 62, 36, 36, 36, 36, 36, 58, 40, 62,\n+   61, 27, 27, 61, 61, 61, 61, 61, 27, 27, 27, 27, 27, 61, 61, 61,\n+   61, 61, 61, 61, 27, 27, 27, 27,140, 27, 27, 27, 27, 27, 27, 27,\n+   36, 36, 95, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,141,  2,\n+   32, 32, 32, 32, 32, 32, 32, 63, 48,142, 43, 43, 43, 43, 43, 77,\n+   32, 32, 32, 32, 32, 32, 40, 43, 36, 36, 36, 92, 92, 92, 92, 92,\n+   43,  2,  2,  2,  2,  2,  2,  2, 41, 41, 41,139, 40, 40, 40, 40,\n+   41, 32, 32, 32, 32, 32, 32, 32, 16, 32, 32, 32, 32, 32, 32, 32,\n+   44, 16, 16, 16, 34, 34, 34, 32, 32, 32, 32, 32, 42,143, 34, 35,\n+   32, 32, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11, 11, 32,\n+   11, 11, 32, 32, 32, 32, 32, 32, 16, 32, 11, 11, 34, 16, 16, 16,\n+   16, 16, 34, 35, 40, 35, 36, 36, 36, 64, 36, 64, 36, 63, 36, 36,\n+   36, 79, 76, 74, 61, 61, 43, 43, 27, 27, 27, 61,144, 61, 61, 61,\n+   36, 36,  2,  2,  2,  2,  2,  2, 75, 36, 36, 36, 36, 36, 36, 36,\n+   36, 36, 75, 75, 75, 75, 75, 75, 75, 75, 43, 43, 43, 43, 43,  2,\n+   43, 36, 36, 36,  2, 65, 65, 63, 36, 36, 36, 43, 43, 43, 43,  2,\n+   36, 36, 36, 63, 43, 43, 43, 43, 43, 75, 75, 75, 75, 75, 75,145,\n+   36, 63, 75, 43, 43, 75, 43, 75,145,  2,  2,  2,  2,  2,  2, 77,\n+    7,  7,  7,  7,  7,  7,  7,  2, 36, 36, 63, 62, 36, 36, 36, 36,\n+   36, 36, 36, 36, 63, 43, 43, 74, 76, 74, 76, 43, 43, 43, 43, 43,\n+   36, 63, 36, 36, 36, 36, 74, 75,  7,  7,  7,  7,  7,  7,  2,  2,\n+   62, 36, 36, 70, 61, 79, 74, 36, 64, 43, 64, 63, 64, 36, 36, 43,\n+   36, 36, 36, 36, 36, 36, 95,  2, 36, 36, 36, 36, 36, 79, 43, 75,\n+    2, 95,146, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16,100, 40, 40,\n+   16, 16, 16, 16, 97, 41, 41, 41, 36, 79, 76, 75, 74,145, 76, 43,\n+  147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,\n+   16, 16, 16, 16, 16, 16, 35, 64, 36, 36, 36, 36,149, 36, 36, 36,\n+   36, 41, 41, 41, 41, 41, 41, 41, 41,150, 36, 36, 36, 36, 36, 36,\n+   36, 36, 36, 36, 36, 36, 36,129,151,151,151,151,151,151,151,151,\n+   36, 36, 36, 36, 36, 36,144, 61,  2,  2,  2,152,113,  2,  2,  2,\n+    6,153,154,129,129,129,129,129,129,129,113,152,113,  2,110,155,\n+    2,  2,  2,  2,134,129,129,113,  2,156,  8,  8, 60,  2,  2,  2,\n+   36, 36, 36, 36, 36, 36, 36,157,  2,  2,  3,  2,  4,  5,  6,  2,\n+   16, 16, 16, 16, 16, 17, 18,112,113,  4,  2, 36, 36, 36, 36, 36,\n+   62, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40,\n+   20,158, 53, 20, 26,  8,125, 61, 61, 61, 61, 61,159, 59, 61, 61,\n+    2,  2,  2, 87, 27, 27, 27, 27, 27, 27, 27, 81, 61, 61, 61, 61,\n+   92, 92,124, 27, 81, 61, 61, 61, 61, 61, 61, 61, 61, 27, 61, 61,\n+   61, 61, 61, 61, 61, 61, 47, 43,160,160,160,160,160,160,160,160,\n+  161, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 84, 36,\n+  133, 36, 36, 36, 36, 92, 92, 92, 36, 36, 36, 36, 36, 36, 36, 58,\n+  162, 92, 92, 92, 92, 92, 92, 92, 36, 36, 36, 58, 27, 27, 27, 27,\n+   36, 36, 36, 70,140, 27, 27, 27, 36, 36, 36,163, 27, 27, 27, 27,\n+   36, 36, 36, 36, 36,163, 27, 27, 36, 36, 36, 27, 27, 27, 27, 30,\n+   36, 36, 36, 36, 36, 36, 27, 36, 63, 43, 43, 43, 43, 43, 43, 43,\n+   36, 36, 36, 36, 43, 43, 43, 43, 36, 36, 36, 36, 36, 36,163, 30,\n+   36, 36, 36, 36, 36, 36,163, 27, 36, 36, 36, 36, 71, 36, 36, 36,\n+   36, 36, 63, 43, 43,161, 27, 27, 36, 36, 36, 36, 58,  2,  2,  2,\n+   36, 36, 36, 36, 27, 27, 27, 27, 16, 16, 16, 16, 16, 27, 27, 27,\n+   36, 36, 43, 43, 43, 43, 43, 43, 36, 36, 36, 36, 36, 63,164, 51,\n+   27, 27, 27, 84, 36, 36, 36, 36,161, 27, 30,  2,  2,  2,  2,  2,\n+   36, 36,163, 27, 27, 27, 27, 27, 76, 78, 36, 36, 36, 36, 36, 36,\n+   43, 43, 43, 57,  2,  2,  2,  2,  2, 27, 27, 27, 27, 27, 27, 27,\n+   27, 27, 27,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,165,\n+   75, 76, 43, 74, 76, 57, 72,  2,  2,  2,  2,  2,  2,  2, 72, 59,\n+   36, 36, 36, 63, 43, 43, 76, 43, 43, 43, 43,  7,  7,  7,  7,  7,\n+    2,  2, 79, 78, 36, 36, 36, 36, 36, 63,  2, 36, 36, 36, 36, 36,\n+   36, 79, 75, 43, 43, 43, 43, 74, 78, 36, 58,  2, 56, 43, 57, 76,\n+    7,  7,  7,  7,  7, 58, 58,  2, 87, 27, 27, 27, 27, 27, 27, 27,\n+   36, 36, 36, 36, 36, 36, 75, 76, 43, 75, 74, 43,  2,  2,  2, 43,\n+   36, 36, 36, 36, 36, 36, 36, 63, 74, 75, 75, 75, 75, 75, 75, 75,\n+   36, 36, 36, 79, 75, 75, 78, 36, 36, 75, 75, 43, 43, 43, 43, 43,\n+   36, 36, 79, 75, 43, 43, 43, 43, 75, 43, 74, 64, 36, 58,  2,  2,\n+    7,  7,  7,  7,  7,  2,  2, 64, 75, 76, 43, 43, 74, 74, 75, 76,\n+   74, 43, 36, 65, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 79,\n+   75, 43, 43, 43, 75, 75, 43, 76, 57,  2,  2,  2,  2,  2,  2,  2,\n+    2,  2,  2,  2, 36, 36, 43, 43, 75, 76, 43, 43, 43, 74, 76, 76,\n+   57,  2, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 63, 76, 75,\n+   43, 43, 43, 76, 36, 36, 36, 36, 75, 43, 43, 76, 43, 43, 43, 43,\n+    7,  7,  7,  7,  7, 27,  2, 86, 43, 43, 43, 43, 76, 57,  2,  2,\n+   27, 27, 27, 27, 27, 27, 27, 84, 75, 75, 75, 75, 75, 76, 74, 64,\n+   78, 76,  2,  2,  2,  2,  2,  2, 79, 75, 43, 43, 43, 43, 75, 75,\n+   64, 65, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,\n+   63, 43, 43, 43, 43, 64, 36, 36, 36, 63, 43, 43, 74, 63, 43, 57,\n+    2,  2,  2, 56, 43, 43, 43, 43, 63, 43, 43, 74, 76, 43, 36, 36,\n+   36, 36, 36, 36, 36, 43, 43, 43, 43, 43, 43, 74, 43,  2, 65,  2,\n+   43, 43, 43, 43, 43, 43, 43, 76, 58,  2,  2,  2,  2,  2,  2,  2,\n+    2, 36, 36, 36, 36, 36, 36, 36, 43, 43, 43, 43, 74, 43, 43, 43,\n+   74, 43, 76, 43, 43, 43, 43, 43, 43, 43, 43, 63, 43, 43, 43, 43,\n+   36, 36, 36, 36, 36, 75, 75, 75, 43, 74, 76, 76, 36, 36, 36, 36,\n+   36, 63, 74,145,  2,  2,  2,  2, 27, 27, 81, 61, 61, 61, 53, 20,\n+  144, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 21,\n+   43, 43, 57,  2,  2,  2,  2,  2, 43, 43, 43, 57,  2,  2, 61, 61,\n+   40, 40, 86, 61, 61, 61, 61, 61,  7,  7,  7,  7,  7,166, 27, 27,\n+   27, 84, 36, 36, 36, 36, 36, 36, 27, 27, 27, 30,  2,  2,  2,  2,\n+   79, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76,\n+   43, 67, 40, 40, 40, 40, 40, 40, 40, 77, 43, 43, 43, 43, 43, 43,\n+   36, 36, 36, 36, 36, 36, 47, 57, 61, 61,167, 76, 43, 61,167, 75,\n+   75,168, 59, 59, 59, 73, 43, 43, 43, 69, 47, 43, 43, 43, 61, 61,\n+   61, 61, 61, 61, 61, 43, 43, 61, 61, 43, 69, 61, 61, 61, 61, 61,\n+   11, 11, 11, 11, 11, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 16, 11, 16, 16, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16, 11, 11, 11, 11, 11, 16, 16, 16, 16, 16,\n+   31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33, 16, 16,\n+   16, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 31, 16, 16,\n+   16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 31, 16, 16, 16, 16, 16,\n+   16, 16, 16, 16, 16, 16, 16, 33, 16, 16, 16, 11, 11, 11, 11, 11,\n+   11, 11, 11, 11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16,\n+   11, 11, 11, 11, 31, 16, 16, 16, 16, 33, 16, 16, 16, 32, 16,  7,\n+   43, 43, 43, 69, 61, 47, 43, 43, 43, 43, 43, 43, 43, 43, 69, 61,\n+   61, 61, 47, 61, 61, 61, 61, 61, 61, 61, 69, 21,  2,  2,  2,  2,\n+    2,  2,  2,  2,  2, 56, 43, 43, 43, 43, 43, 67, 40, 40, 40, 40,\n+    7,  7,  7,  7,  7,  7,  7, 70, 36, 36, 36, 36, 36, 36, 43, 43,\n+    7,  7,  7,  7,  7,  7,  7,169, 16, 16, 43, 43, 43, 67, 40, 40,\n+   27, 27, 27, 27, 27, 27,140, 27,170, 27, 27, 27, 27, 27, 27, 27,\n+   27, 27, 27, 27, 27, 27, 27,140, 27, 27, 27, 27, 27, 27, 81, 61,\n+   61, 61, 61, 61, 61, 25, 41, 41,  0,  0, 29, 21, 21, 21, 23, 21,\n+   22, 18, 21, 25, 21, 17, 13, 13, 25, 25, 25, 21, 21,  9,  9,  9,\n+    9, 22, 21, 18, 24, 16, 24,  5,  5,  5,  5, 22, 25, 18, 25,  0,\n+   23, 23, 26, 21, 24, 26,  7, 20, 25,  1, 26, 24, 26, 25, 15, 15,\n+   24, 15,  7, 19, 15, 21,  9, 25,  9,  5,  5, 25,  5,  9,  5,  7,\n+    7,  7,  9,  8,  8,  5,  7,  5,  6,  6, 24, 24,  6, 24, 12, 12,\n+    6,  5,  9, 21, 25,  9, 26, 12, 11, 11,  9,  6,  5, 21, 17, 17,\n+   17, 26, 26, 23, 23, 12, 17, 12, 21, 12, 12, 21,  7, 21,  1,  1,\n+   21, 23, 26, 26,  6,  7,  7, 12, 12,  7, 21,  7, 12,  1, 12,  6,\n+    6, 12, 12, 26,  7, 26, 26,  7, 21,  1,  1, 12, 12, 10, 10, 10,\n+   10, 12, 21,  6, 10,  7,  7, 10, 23,  7, 15, 26, 13, 21, 13,  7,\n+   15,  7, 12, 23, 21, 26, 21, 15, 17,  7, 29,  7,  7, 22, 18, 18,\n+   14, 14, 14,  7, 17, 21,  7,  6, 11, 12,  5,  6,  8,  8,  8, 24,\n+    5, 24,  9, 24, 29, 29, 29,  1, 20, 19, 22, 20, 27, 28,  1, 29,\n+   21, 20, 19, 21, 21, 16, 16, 21, 25, 22, 18, 21, 21, 29, 15,  6,\n+   18,  6, 12, 11,  9, 26, 26,  9, 26,  5,  5, 26, 14,  9,  5, 14,\n+   14, 15, 25, 26, 26, 22, 18, 26, 18, 25, 18, 22,  5, 12, 22, 21,\n+   26,  6,  7, 14, 17, 22, 26, 14, 17,  6, 14,  6, 12, 24, 24,  6,\n+   26, 15,  6, 21, 11, 21, 24,  9, 23, 26, 10, 21,  6, 10,  4,  4,\n+    3,  3,  7, 25, 24,  7, 22, 22, 21, 22, 17, 16, 16, 22, 16, 16,\n+   25, 17,  7,  1, 25, 24, 26,  1,  2,  2, 12, 15, 21, 14,  7, 15,\n+   12, 17, 13, 12, 13, 15, 26, 10, 10,  1, 13, 23, 23, 15,  0,  1,\n+    2,  3,  4,  5,  6,  7,  8,  9,  0, 10, 11, 12, 13,  0, 14,  0,\n+    0,  0,  0,  0, 15,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,  0, 21, 22, 23,\n+    0,  0,  0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 34,  0, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 36,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 37, 38,  0,  0,  0,  0,  0,  0, 39, 40,\n+    0,  0, 41,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    1,  2,  0,  0,  0,  0,  3,  0,  0,  0,  4,  5,  6,  7,  0,  8,\n+    9, 10,  0, 11, 12, 13,  0, 14, 15, 16, 15, 17, 15, 18, 15, 18,\n+   15, 18,  0, 18,  0, 19, 15, 18, 20, 18,  0, 21, 22, 23, 24, 25,\n+   26, 27, 28, 29, 30,  0, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0, 32,  0,  0,  0,  0,  0,  0, 33,  0,  0, 34,  0,  0, 35,  0,\n+   36,  0,  0,  0, 37, 38, 39, 40, 41, 42, 43, 44, 45,  0,  0, 46,\n+    0,  0,  0, 47,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0, 49,\n+    0, 50,  0, 51, 52,  0, 53,  0,  0,  0,  0,  0,  0, 54, 55, 56,\n+    0,  0,  0,  0, 57,  0,  0, 58, 59, 60, 61, 62,  0,  0, 63, 64,\n+    0,  0,  0, 65,  0,  0,  0,  0, 66,  0,  0,  0, 67,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 68,  0,  0,  0, 69,\n+    0, 70,  0,  0, 71,  0,  0, 72,  0,  0,  0,  0,  0,  0,  0,  0,\n+   73,  0,  0,  0,  0,  0, 74,  0,  0, 75,  0,  0,  0, 76, 77,  0,\n+   78, 61,  0, 79, 80,  0,  0, 81, 82, 83,  0,  0,  0, 84,  0, 85,\n+    0,  0, 50, 86, 50,  0, 87,  0, 88,  0,  0,  0, 77,  0,  0,  0,\n+   89, 90,  0, 91, 92, 93, 94,  0,  0,  0,  0,  0, 50,  0,  0,  0,\n+    0, 95, 96,  0,  0,  0,  0, 97, 98,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0, 99,  0,  0,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,101,102,  0,  0,103,  0,  0,  0,  0,  0,  0,104,  0,  0,  0,\n+   98,  0,  0,  0,  0,  0,  0,105,  0,  0,  0,  0,  0,  0,  0,106,\n+    0,107,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  0,\n+    8,  0,  0,  0,  0,  9, 10, 11, 12,  0,  0,  0,  0, 13,  0,  0,\n+   14, 15,  0, 16,  0, 17, 18,  0,  0, 19,  0, 20, 21,  0,  0,  0,\n+    0,  0, 22, 23,  0, 24, 25,  0,  0, 26,  0,  0,  0, 27, 28, 29,\n+    0,  0,  0, 30, 31, 32,  0,  0, 31,  0,  0, 33, 31,  0,  0,  0,\n+   31, 34,  0,  0,  0,  0,  0, 35, 36,  0,  0,  0,  0,  0,  0, 37,\n+   38,  0,  0,  0,  0,  0,  0, 39, 40,  0,  0,  0,  0, 41,  0, 42,\n+    0,  0,  0, 43, 44,  0,  0,  0, 45,  0,  0,  0,  0,  0,  0, 46,\n+   47,  0,  0,  0,  0, 48,  0,  0,  0, 49,  0, 49,  0, 50,  0,  0,\n+    0,  0, 51,  0,  0,  0,  0, 52,  0, 53,  0,  0,  0,  0, 54, 55,\n+    0,  0,  0, 56, 57,  0,  0,  0,  0,  0,  0, 58, 49,  0, 59, 60,\n+    0,  0, 61,  0,  0,  0, 62, 63,  0,  0,  0, 64,  0, 65, 66, 67,\n+   68, 69,  1, 70,  0, 71, 72, 73,  0,  0, 74, 75,  0,  0,  0, 76,\n+    0,  0,  1,  1,  0,  0, 77,  0,  0, 78,  0,  0,  0,  0, 74, 79,\n+    0, 80,  0,  0,  0,  0,  0, 75, 81,  0, 82,  0, 49,  0,  1, 75,\n+    0,  0, 83,  0,  0, 84,  0,  0,  0,  0,  0, 85, 54,  0,  0,  0,\n+    0,  0,  0, 86, 87,  0,  0, 81,  0,  0, 31,  0,  0, 88,  0,  0,\n+    0,  0, 89,  0,  0,  0,  0, 47,  0,  0, 57,  0,  0,  0,  0, 90,\n+   91,  0,  0, 92,  0,  0, 93,  0,  0,  0, 94,  0,  0,  0, 95,  0,\n+   96, 57,  0,  0, 81,  0,  0, 76,  0,  0,  0, 97, 98,  0,  0, 99,\n+  100,  0,  0,  0,  0,  0,  0,101,  0,  0,102,  0,  0,  0,  0,103,\n+   31,  0,104,105,106, 33,  0,  0,107,  0,  0,  0,108,  0,  0,  0,\n+    0,  0,  0,109,  0,  0,110,  0,  0,  0,  0,111, 85,  0,  0,  0,\n+    0,  0, 54,  0,  0,  0,  0, 49,112,  0,  0,  0,  0,113,  0,  0,\n+  114,  0,  0,  0,  0,112,  0,  0,  0,  0,  0,115,  0,  0,  0,116,\n+    0,  0,  0,117,  0,118,  0,  0,  0,  0,119,120,121,  0,122,  0,\n+  123,  0,  0,  0,124,125,126,  0,  0,  0,127,  0,  0,128,  0,  0,\n+  129,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  3,  4,\n+    5,  6,  7,  4,  4,  8,  9, 10,  1, 11, 12, 13, 14, 15, 16, 17,\n+   18,  1,  1,  1, 19,  1,  0,  0, 20, 21, 22,  1, 23,  4, 21, 24,\n+   25, 26, 27, 28, 29, 30,  0,  0,  1,  1, 31,  0,  0,  0, 32, 33,\n+   34, 35,  1, 36, 37,  0,  0,  0,  0, 38,  1, 39, 14, 39, 40, 41,\n+   42,  0,  0,  0, 43, 36, 44, 45, 21, 45, 46,  0,  0,  0, 19,  1,\n+   21,  0,  0, 47,  0, 38, 48,  1,  1, 49, 49, 50,  0,  0, 51,  0,\n+   52,  1,  1,  1, 53, 21, 43, 54, 55, 21, 35,  1,  0,  0,  0, 56,\n+    0,  0,  0, 57, 58, 59,  0,  0,  0,  0,  0, 60,  0, 61,  0,  0,\n+    0,  0, 62, 63,  0,  0, 64,  0,  0,  0, 65,  0,  0,  0, 66,  0,\n+    0,  0, 67,  0,  0,  0, 68,  0,  0,  0, 69,  0,  0, 70, 71,  0,\n+   72, 73, 74, 75, 76, 77,  0,  0,  0, 78,  0,  0,  0, 79, 80,  0,\n+    0,  0,  0, 47,  0,  0,  0, 49,  0, 63,  0,  0, 64,  0,  0, 81,\n+    0,  0, 82,  0,  0,  0, 83,  0,  0, 19, 84,  0, 63,  0,  0,  0,\n+    0, 49,  1, 85,  1, 54, 15, 86, 84,  0,  0,  0,  0, 56,  0,  0,\n+    0,  0, 19, 10,  1,  0,  0,  0,  0,  0, 87,  0,  0, 88,  0,  0,\n+   87,  0,  0,  0,  0, 79,  0,  0, 89,  9, 12,  4, 90,  8, 91, 47,\n+    0, 59, 50,  0, 21,  1, 21, 92, 93,  1,  1,  1,  1, 94, 95, 96,\n+   97,  1, 98, 59, 81, 99,100,  4, 59,  0,  0,  0,  0,  0,  0, 19,\n+   50,  0,  0,  0,  0,  0,  0, 62,  0,  0,101,102,  0,  0,103,  0,\n+    0,  1,  1, 50,  0,  0,  0, 38,  0, 64,  0,  0,  0,  0,  0, 63,\n+    0,  0, 52, 69, 62,  0,  0,  0, 79,  0,  0,  0,104,105, 59, 38,\n+   81,  0,  0,  0,  0,  0,  0,106,  1, 14,  4, 12,  0, 38, 89,  0,\n+    0,  0,  0,107,  0,  0,108, 62,  0,109,  0,  0,  0,  1,  0,  0,\n+    0,  0, 19, 59,  0,110, 14, 54,  0,  0,111,  0, 89,  0,  0,  0,\n+   62, 63,  0,  0, 63,  0, 88,  0,  0,111,  0,  0,  0,  0,112,  0,\n+    0,  0, 79, 56,  0, 38,  1, 59,  1, 59,  0,  0, 64, 88,  0,  0,\n+  113,  0,  0,  0, 56,  0,  0,  0,  0,113,  0,  0,  0,  0, 62,  0,\n+    0,  0,  0, 80,  0, 62,  0,  0,  0,  0, 57,  0, 88,114,  0,  0,\n+    8, 91,  0,  0,  1, 89,  0,  0,115,  0,  0,  0,  0,  0,  0,116,\n+    0,117,118,119,120,  0, 52,  4,121, 49, 23,  0,  0,  0, 38, 50,\n+   38, 59,  0,  0,  1, 89,  1,  1,  1,  1, 39,  1, 48,104, 89,  0,\n+    0,  0,  0,  1,  4,121,  0,  0,  0,  1,122,  0,  0,  0,  0,  0,\n+  230,230,230,230,230,232,220,220,220,220,232,216,220,220,220,220,\n+  220,202,202,220,220,220,220,202,202,220,220,220,  1,  1,  1,  1,\n+    1,220,220,220,220,230,230,230,230,240,230,220,220,220,230,230,\n+  230,220,220,  0,230,230,230,220,220,220,220,230,232,220,220,230,\n+  233,234,234,233,234,234,233,230,  0,  0,  0,230,  0,220,230,230,\n+  230,230,220,230,230,230,222,220,230,230,220,220,230,222,228,230,\n+   10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22,  0, 23,\n+    0, 24, 25,  0,230,220,  0, 18, 30, 31, 32,  0,  0,  0,  0, 27,\n+   28, 29, 30, 31, 32, 33, 34,230,230,220,220,230,220,230,230,220,\n+   35,  0,  0,  0,  0,  0,230,230,230,  0,  0,230,230,  0,220,230,\n+  230,220,  0,  0,  0, 36,  0,  0,230,220,230,230,220,220,230,220,\n+  220,230,220,230,220,230,230,  0,  0,220,  0,  0,230,230,  0,230,\n+    0,230,230,230,230,230,  0,  0,  0,220,220,220,  0,  0,  0,220,\n+  230,230,  0,220,230,220,220,220, 27, 28, 29,230,  7,  0,  0,  0,\n+    0,  9,  0,  0,  0,230,220,230,230,  0,  0,  0,  0,  0,230,  0,\n+    0, 84, 91,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,\n+  103,103,  9,  0,107,107,107,107,118,118,  9,  0,122,122,122,122,\n+  220,220,  0,  0,  0,220,  0,220,  0,216,  0,  0,  0,129,130,  0,\n+  132,  0,  0,  0,  0,  0,130,130,130,130,  0,  0,130,  0,230,230,\n+    9,  0,230,230,  0,  0,220,  0,  0,  0,  0,  7,  0,  9,  9,  0,\n+    0,230,  0,  0,  0,228,  0,  0,  0,222,230,220,220,  0,  0,  0,\n+  230,  0,  0,220,230,220,  0,220,  0,  0,  9,  9,  0,  0,  7,  0,\n+  230,230,230,  0,230,  0,  1,  1,  1,  0,  0,  0,230,234,214,220,\n+  202,230,230,230,230,230,232,228,228,220,  0,230,233,220,230,220,\n+  230,230,  1,  1,  1,  1,  1,230,  0,  1,  1,230,220,230,  1,  1,\n+    0,  0,218,228,232,222,224,224,  0,  8,  8,  0,230,  0,230,230,\n+  220,  0,  0,230,  0,  0, 26,  0,  0,220,  0,230,230,  1,220,  0,\n+    0,230,220,  0,  0,  0,220,220,  0,  9,  7,  0,  0,  7,  9,  0,\n+    0,  0,  9,  7,  9,  9,  0,  0,  6,  6,  0,  0,  0,  0,  1,  0,\n+    0,216,216,  1,  1,  1,  0,  0,  0,226,216,216,216,216,216,  0,\n+  220,220,220,  0,230,230,  7,  0, 16, 17, 17, 33, 17, 49, 17, 17,\n+   84, 97,135,145, 26, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17, 17, 17,177,  0,  1,  2,  3,  3,  3,  3,  3,\n+    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  3,  3,  3,\n+    3,  3,  5,  3,  3,  3,  3,  3,  6,  7,  8,  3,  3,  3,  3,  3,\n+    9, 10, 11, 12, 13,  3,  3,  3,  3,  3,  3,  3,  3, 14,  3, 15,\n+    3,  3,  3,  3,  3,  3, 16, 17, 18, 19, 20, 21,  3,  3,  3, 22,\n+   23,  3,  3,  3,  3,  3,  3,  3, 24,  3,  3,  3,  3,  3,  3,  3,\n+    3, 25,  3,  3, 26, 27,  0,  1,  0,  0,  0,  0,  0,  1,  0,  2,\n+    0,  0,  0,  3,  0,  0,  0,  3,  0,  0,  0,  0,  0,  4,  0,  5,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,\n+    0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,\n+    9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,\n+    0, 10, 11, 12, 13,  0,  0, 14, 15, 16,  6,  0, 17, 18, 19, 19,\n+   19, 20, 21, 22, 23, 24, 19, 25,  0, 26, 27, 19, 19, 28, 29, 30,\n+    0, 31,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0, 19, 28,  0,\n+   32, 33,  9, 34, 35, 19,  0,  0, 36, 37, 38, 39, 40, 19,  0, 41,\n+   42, 43, 44, 31,  0,  1, 45, 42,  0,  0,  0,  0,  0, 32, 14, 14,\n+    0,  0,  0,  0, 14,  0,  0, 46, 47, 47, 47, 47, 48, 49, 47, 47,\n+   47, 47, 50, 51, 52, 53, 43, 21,  0,  0,  0,  0,  0,  0,  0, 54,\n+    6, 55,  0, 14, 19,  1,  0,  0,  0, 19, 56, 31,  0,  0,  0,  0,\n+    0,  0,  0, 57, 14,  0,  0,  0,  0,  1,  0,  2,  0,  0,  0,  3,\n+    0,  0,  0, 58, 59,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,\n+    0,  0,  2,  3,  0,  4,  5,  0,  0,  6,  0,  0,  0,  7,  0,  0,\n+    0,  1,  1,  0,  0,  8,  9,  0,  8,  9,  0,  0,  0,  0,  8,  9,\n+   10, 11, 12,  0,  0,  0, 13,  0,  0,  0,  0, 14, 15, 16, 17,  0,\n+    0,  0,  1,  0,  0, 18, 19,  0,  0,  0, 20,  0,  0,  0,  1,  1,\n+    1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,  8, 21,  9,  0,  0,\n+   22,  0,  0,  0,  0,  1,  0, 23, 24, 25,  0,  0, 26,  0,  0,  0,\n+    8, 21, 27,  0,  1,  0,  0,  1,  1,  1,  1,  0,  1, 28, 29, 30,\n+    0, 31, 32, 20,  1,  1,  0,  0,  0,  8, 21,  9,  1,  4,  5,  0,\n+    0,  0, 33,  9,  0,  1,  1,  1,  0,  8, 21, 21, 21, 21, 34,  1,\n+   35, 21, 21, 21,  9, 36,  0,  0, 37, 38,  1,  0, 39,  0,  0,  0,\n+    1,  0,  1,  0,  0,  0,  0,  8, 21,  9,  1,  0,  0,  0, 40,  0,\n+    8, 21, 21, 21, 21, 21, 21, 21, 21,  9,  0,  1,  1,  1,  1,  8,\n+   21, 21, 21,  9,  0,  0,  0, 41,  0, 42, 43,  0,  0,  0,  1, 44,\n+    0,  0,  0, 45,  8,  9,  1,  0,  1,  0,  1,  1,  8, 21, 21,  9,\n+    0,  4,  5,  8,  9,  1,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,\n+    7,  8,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  9, 10, 11, 11,\n+   11, 11, 11, 12, 12, 12, 12, 13, 14, 15, 16, 17, 18, 12, 19, 12,\n+   20, 12, 12, 12, 12, 21, 22, 22, 22, 23, 12, 12, 12, 12, 24, 25,\n+   12, 12, 26, 27, 28, 29, 30, 31,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n+    7,  7,  7,  7,  7, 32, 12, 33,  7,  7, 34, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n+   12, 12, 12, 12, 12, 12, 12, 12, 35,  0,  0,  1,  2,  2,  2,  3,\n+    4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n+   20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 33,\n+   33, 34, 35, 35, 35, 35, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n+   45, 46, 47, 48, 49, 50,  2,  2, 51, 51, 52, 53, 54, 55, 56, 56,\n+   56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 56, 56, 56, 56,\n+   56, 56, 58, 59, 60, 61, 56, 62, 62, 63, 64, 65, 66, 67, 68, 69,\n+   70, 56, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,\n+   62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,\n+   62, 62, 62, 62, 62, 71, 62, 62, 62, 62, 72, 72, 72, 72, 72, 72,\n+   72, 72, 72, 73, 74, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n+   85, 86, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 87, 87, 87, 87, 87, 87,\n+   87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 62, 62, 62, 62,\n+   88, 89, 89, 89, 90, 89, 91, 92, 93, 94, 95, 95, 96, 97, 87, 98,\n+   99,100,101,102,103, 87,104,104,104, 87,105,106,107,108,109,110,\n+  111,112,113,114,115, 87, 89,116,117,118,119,120,121,122,123,124,\n+  125, 87,126,127, 87,128,129,130,131, 87,132,133,134,135,136,137,\n+   87, 87,138,139,140,141, 87,142, 87,143,144,144,144,144,144,144,\n+  144,144,144,144,144, 87, 87, 87, 87, 87,145,145,145,145,145,145,\n+  145,145,145, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\n+   87, 87,146,146,146,146,146, 87, 87, 87,147,147,147,147,148,149,\n+  150,150, 87, 87, 87, 87,151,151,152,153,154,154,154,154,154,154,\n+  154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,\n+  155,155,155,155,154, 87, 87, 87, 87, 87,156,157,158,159,159,159,\n+   87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\n+   87, 87,160,161, 87, 87, 87, 87, 87, 87, 56, 56,162,163, 51, 56,\n+   56, 87, 56, 56, 56, 56, 56, 56, 56, 56,164,164,164,164,164,164,\n+   87, 87, 87, 87, 87, 87, 87, 87, 87, 87,165, 87,166, 87, 87,167,\n+   87, 87, 87, 87, 87, 87, 87, 87, 87, 87,168,168,169, 87, 87, 87,\n+   87, 87, 56, 56, 56, 87, 89, 89, 87, 87, 56, 56, 56, 56,170, 87,\n+   56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n+   56, 56, 87, 87, 87, 87, 87, 87, 87, 87, 62, 62, 62, 62, 62, 62,\n+   62, 62, 87, 87, 87, 87, 87, 87, 87, 87, 62, 62, 62, 62, 62, 87,\n+   87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 62, 62, 62, 62, 62, 62,\n+   62, 87, 87, 87, 87, 87, 87, 87, 87, 87, 56, 87,171,171,  0,  1,\n+    2,  2,  0,  1,  2,  2,  2,  3,  4,  5,  0,  0,  0,  0,  1,  2,\n+    1,  2,  0,  0,  3,  3,  4,  5,  4,  5,  4,  4,  4,  4,  4,  4,\n+    4,  4,  4,  4,  4,  6,  0,  0,  7,  0,  8,  8,  8,  8,  8,  8,\n+    8,  9, 10, 11, 11, 11, 11, 11, 12, 11, 13, 13, 13, 13, 13, 13,\n+   13, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 16, 16,\n+   16, 16, 16, 17, 18, 18, 18, 18, 18, 18, 19, 20, 21, 21, 22, 23,\n+   21, 24, 21, 21, 21, 21, 21, 25, 21, 21, 26, 26, 26, 26, 26, 21,\n+   21, 21, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30,\n+   26, 26, 21, 21, 21, 21, 21, 21, 31, 21, 32, 32, 32, 32, 32, 33,\n+   34, 32, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36,\n+   36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38,\n+   38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40,\n+   40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42,\n+   42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 45, 44, 44,\n+   44, 44, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47,\n+   47, 47, 47, 47, 47, 47, 47, 48, 47, 47, 49, 49, 49, 49, 49, 49,\n+   49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 52, 52, 52, 52, 52, 52,\n+   52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54,\n+   54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 57, 57, 57, 57,\n+   58, 57, 59, 59, 60, 61, 62, 62, 63, 63, 64, 64, 64, 64, 64, 64,\n+   64, 64, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 55, 55, 55,\n+   55, 55, 67, 67, 67, 67, 67, 68, 68, 68, 69, 69, 69, 69, 69, 69,\n+   64, 64, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71,  8,  8,  8,\n+    8,  8, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74,\n+   74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 13, 50, 50, 50, 73, 77,\n+   78, 79,  4,  4, 80,  4,  4, 81, 82, 83,  4,  4,  4, 84,  8,  8,\n+    8,  8, 11, 11, 11, 11, 11, 11, 11, 11, 85,  0,  0,  0,  0,  0,\n+    0, 86,  0,  4,  0,  0,  0,  8,  8,  8,  0,  0, 87, 88, 89,  0,\n+    4,  4,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91,\n+    4,  4, 92, 92, 92, 92, 92, 92, 92, 92, 50, 50, 50, 93, 93, 93,\n+   93, 93, 53, 53, 53, 53, 53, 53, 13, 13, 94, 94, 94, 94, 94, 94,\n+   94, 94, 94, 94, 94, 94, 94, 94, 94,  0, 95,  0, 96, 97, 98, 99,\n+   99, 99, 99,100,101,102,102,102,102,103,104,104,104,105, 52, 52,\n+   52, 52, 52,  0,104,104,  0,  0,  0,102, 52, 52,  0,  0,  0,  0,\n+   52,106,  0,  0,  0,  0,  0,102,102,107,102,102,102,102,102,108,\n+    0,  0, 94, 94, 94, 94,  0,  0,  0,  0,109,109,109,109,109,109,\n+  109,109,109,109,109,109,109,110,110,110,111,111,111,111,111,111,\n+  111,111,111,111,111,111, 13, 13, 13, 13, 13, 13,112,112,112,112,\n+  112,112,  0,  0,113,  4,  4,  4,  4,  4,114,  4,  4,  4,  4,  4,\n+    4,  4,115,115,115,  0,116,116,116,116,117,117,117,117,117,117,\n+   32, 32,118,118,119,120,120,120, 52, 52,121,121,121,121,122,121,\n+   49, 49,123,123,123,123,123,123, 49, 49,124,124,124,124,124,124,\n+  125,125, 53, 53, 53,  4,  4,126,127, 54, 54, 54, 54, 54,125,125,\n+  125,125,128,128,128,128,128,128,128,128,  4,129, 18, 18, 18, 21,\n+   21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,130,  0, 21,\n+   21, 21,  8,  0,131,  0,  0,  0,  0, 21, 21, 21, 21, 21, 21, 21,\n+   21,132,  0,  0,  1,  2,  1,  2,133,101,102,134, 52, 52, 52, 52,\n+    0,  0,135,135,135,135,135,135,135,135,  0,  0,  0,  0, 11, 11,\n+   11, 11, 11,  0, 11, 11, 11,  0,  0,136,137,137,138,138,138,138,\n+  139,  0,140,140,140,141,141,142,142,142,143,143,144,144,144,144,\n+  144,144,145,145,145,145,145,146,146,146,147,147,147,148,148,148,\n+  148,148,149,149,149,150,150,150,150,150,151,151,151,151,151,151,\n+  151,151,152,152,152,152,153,153,154,154,155,155,155,155,155,155,\n+  156,156,157,157,158,158,158,158,158,158,159,159,160,160,160,160,\n+  160,160,161,161,161,161,161,161,162,162,163,163,163,163,164,164,\n+  164,164,165,165,165,165,166,166,167,167,168,168,168,168,168,168,\n+  168,168,169,169,169,169,169,169,169,169,170,170,170,170,170,170,\n+  170,170,171,171,171,171,171,171,171,171,172,172,172,172,172,172,\n+  172,172,173,173,173,174,174,174,174,174,175,175,175,175,175,175,\n+  176,176,177,177,177,177,177,177,177,177,178,178,178,178,178,179,\n+  179,179,180,180,180,180,180,181,181,181,182,182,182,182,182,182,\n+  183, 43,184,184,184,184,184,184,184,184,185,185,185,186,186,186,\n+  186,186,187,187,187,188,187,187,187,187,189,189,189,189,189,189,\n+  189,189,190,190,190,190,190,190,190,190,191,191,191,191,191,191,\n+  191,191,192,192,192,192,192,192, 66, 66,193,193,193,193,193,193,\n+  193,193,194,194,194,194,194,194,194,194,195,195,195,195,195,195,\n+  195,195,196,196,196,196,196,196,196,196,197,197,197,197,197,197,\n+  197,197,198,198,198,198,198,198,198,198,199,199,199,199,199,200,\n+  200,200,200,200,200,200,201,201,201,201,202,202,202,202,202,202,\n+  202,203,203,203,203,203,203,203,203,203,204,204,204,204,204,204,\n+  205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,\n+  206,206,110,110,110,110, 39, 39, 39, 39,207,207,207,207,207,207,\n+  207,207,208,208,208,208,208,208,208,208,209,209,209,209,209,209,\n+  209,209,112,112,112,112,112,112,112,112,112,112,112,112,210,210,\n+  210,210,211,211,211,211,211,211,211,211,212,212,212,212,212,212,\n+  212,212,213,213,213,213,213,213,213,213,214,214,214,214,214,214,\n+  214,214,214,214,214,214,214,214,215, 94,216,216,216,216,216,216,\n+  216,216,217,217,217,217,217,217,217,217,218, 99, 99, 99, 99, 99,\n+   99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,\n+  219,220,220,220,220,220,220,220,220,220,221,221,221,221,221,221,\n+  221,221,221,221,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+  222,223,224,  0,225,  0,  0,  0,  0,  0,226,226,226,226,226,226,\n+  226,226, 91, 91, 91, 91, 91, 91, 91, 91,227,227,227,227,227,227,\n+  227,227,228,228,228,228,228,228,228,228,229,229,229,229,229,229,\n+  229,229,230,230,230,230,230,230,230,230,231,  0,  0,  0,  0,  0,\n+    0,  0,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  1,  2,\n+    2,  2,  2,  2,  3,  0,  0,  0,  4,  0,  2,  2,  2,  2,  2,  3,\n+    2,  2,  2,  2,  5,  0,  2,  5,  6,  0,  7,  7,  7,  7,  8,  9,\n+    8, 10,  8, 11,  8,  8,  8,  8,  8,  8, 12, 13, 13, 13, 14, 14,\n+   14, 14, 14, 15, 14, 14, 16, 17, 17, 17, 17, 17, 17, 17, 18, 19,\n+   19, 19, 19, 19, 19, 19, 20, 21, 20, 22, 20, 20, 23, 23, 20, 20,\n+   20, 20, 22, 20, 24,  7,  7, 25, 20, 20, 26, 20, 20, 20, 20, 20,\n+   20, 21, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30,\n+   30, 30, 31, 31, 31, 31, 32, 20, 20, 20, 33, 33, 33, 33, 34, 35,\n+   33, 33, 33, 36, 33, 33, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39,\n+   39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43,\n+   43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46,\n+   46, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 51, 49, 52, 52,\n+   52, 52, 53, 53, 53, 53, 53, 53, 54, 53, 55, 55, 55, 55, 56, 56,\n+   56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60,\n+   60, 60, 60, 60, 61, 62, 63, 63, 63, 63, 64, 64, 64, 64, 64, 65,\n+    0,  0, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 69, 70,\n+   71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74,\n+   74, 74, 75, 75, 75, 75, 76, 76, 76, 76, 77, 77, 77, 77, 78, 78,\n+   78, 78, 79, 79, 79, 79, 80, 80, 80, 80, 81, 81, 81, 81, 82,  7,\n+    7,  7, 83,  7, 84, 85,  0, 84, 86,  0,  2, 87, 88,  2,  2,  2,\n+    2, 89, 90, 87, 91,  2,  2,  2, 92,  2,  2,  2,  2, 93,  0,  0,\n+    0, 86,  1,  0,  0, 94,  0, 95, 96,  0,  4,  0,  0,  0,  0,  0,\n+    0,  4, 97, 97, 97, 97, 98, 98, 98, 98, 13, 13, 13, 13, 99, 99,\n+   99, 99,100,100,100,100,  0,101,  0,  0,102,100,103,104,  0,  0,\n+  100,  0,105,106,106,106,106,106,106,106,106,106,107,105,108,109,\n+  109,109,109,109,109,109,109,109,110,108,111,111,111,111,112, 55,\n+   55, 55, 55, 55, 55,113,109,109,109,110,109,109,  0,  0,114,114,\n+  114,114,115,115,115,115,116,116,116,116,117,117,117,117, 96,  2,\n+    2,  2,  2,  2, 94,  2,118,118,118,118,119,119,119,119,120,120,\n+  120,120,121,121,121,121,121,121,121,122,123,123,123,123,124,124,\n+  124,124,124,124,124,125,126,126,126,126,127,127,127,127,128,128,\n+  128,128,  2,  2,  3,  2,  2,129,130,  0,131,131,131,131,132, 17,\n+   17, 18, 20, 20, 20,133,  7,  7,  7,134, 20, 20, 20, 23,  0,135,\n+  109,109,109,109,109,136,137,137,137,137,  0,  0,  0,138,139,139,\n+  139,139,140,140,140,140, 84,  0,  0,  0,141,141,141,141,142,142,\n+  142,142,143,143,143,143,144,144,144,144,145,145,145,145,146,146,\n+  146,146,147,147,147,147,148,148,148,148,149,149,149,149,150,150,\n+  150,150,151,151,151,151,152,152,152,152,153,153,153,153,154,154,\n+  154,154,155,155,155,155,156,156,156,156,157,157,157,157,158,158,\n+  158,158,159,159,159,159,160,160,160,160,161,161,161,161,162,162,\n+  162,162,163,163,163,163,164,164,164,164,165,165,165,165,166,166,\n+  166,166,167,167,167,167,168,168,168,168,169,169,169,169,170,170,\n+  170,170,171,171,171,171,172,172,172,172,173,173,173,173,174,174,\n+  174,174,175,175,175,175,176,176,176,176,177,177,177,177,178,178,\n+  178,178,179,179,179,179,180,180,180,180,181,181,181,181,182,182,\n+  182,182,183,183,183,183,184, 45, 45, 45,185,185,185,185,186,186,\n+  186,186,187,187,187,187,188,188,188,188,188,188,189,188,190,190,\n+  190,190,191,191,191,191,192,192,192,192,193,193,193,193,194,194,\n+  194,194,195,195,195,195,196,196,196,196,197,197,197,197,198,198,\n+  198,198,199,199,199,199,200,200,200,200,201,201,201,201,202,202,\n+  202,202,203,203,203,203,204,204,204,204,205,205,205,205,206,206,\n+  206,206,207,207,207,207,208,208,208,208,209,209,209,209,210,210,\n+  210,210,211,211,211,211,212,212,212,212,213,213,213,213,214,214,\n+  214,214,215,215,215,215,216,217,217,217,218,218,218,218,217,217,\n+  217,217,219,106,106,106,106,109,109,109,220,220,220,220,221,221,\n+  221,221,  0,222, 86,  0,  0,  0,222,  7, 82,138,  7,  0,  0,  0,\n+  223, 86,224,224,224,224,225,225,225,225,226,226,226,226,227,227,\n+  227,227,228,228,228,228,229,  0,  0,  0,  0,  0,  0,  0,  0, 19,\n+   19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0, 19,  0, 19,  0,\n+    0,  0,  0,  0, 26, 26,  1,  1,  1,  1,  9,  9,  9,  9,  0,  9,\n+    9,  9,  9,  9,  0,  9,  9,  0,  9,  0,  9,  9, 55, 55, 55, 55,\n+   55, 55,  6,  6,  6,  6,  6,  1,  1,  6,  6,  4,  4,  4,  4,  4,\n+    4,  4,  4, 14, 14, 14, 14, 14, 14, 14,  3,  3,  3,  3,  3,  0,\n+    3,  3,  0,  3,  3,  3,  3,  3,  3,  0,  3,  3,  3,  1,  1,  1,\n+    3,  3,  1,  3,  3,  3, 37, 37, 37, 37, 38, 38, 38, 38, 64, 64,\n+   64, 64, 90, 90, 90, 90, 95, 95, 95, 95,  3,  3,  0,  3,  7,  7,\n+    7,  7,  7,  1,  1,  1,  1,  7,  7,  7,  0,  0,  7,  7,  5,  5,\n+    5,  5, 11, 11, 11, 11, 10, 10, 10, 10, 21, 21, 21, 21, 22, 22,\n+   22, 22, 23, 23, 23, 23, 16, 16, 16, 16, 20, 20, 20, 20, 36, 36,\n+   36, 36, 24, 24, 24, 24, 24, 24, 24,  0, 18, 18, 18, 18, 25, 25,\n+   25, 25, 25,  0,  0,  0,  0, 25, 25, 25, 33, 33, 33, 33,  8,  8,\n+    8,  8,  8,  8,  8,  0, 12, 12, 12, 12, 30, 30, 30, 30, 29, 29,\n+   29, 29, 28, 28, 28, 28, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35,\n+   35,  0,  0,  0, 35, 35, 45, 45, 45, 45, 44, 44, 44, 44, 44,  0,\n+    0,  0, 43, 43, 43, 43, 46, 46, 46, 46, 31, 31, 31, 31, 32, 32,\n+    0,  0, 32,  0, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48, 52, 52,\n+   52, 52, 58, 58, 58, 58, 54, 54, 54, 54, 91, 91, 91, 91, 62, 62,\n+   62, 62, 76, 76, 76, 76, 93, 93, 93, 93, 70, 70, 70, 70, 73, 73,\n+   73, 73,  1,  1,  1,  0,  1,  0,  1,  1,  1,  0,  0,  0,  0,  1,\n+    0,  0,  1,  1,  0,  0, 19, 19,  9,  9,  9,  9,  9,  6, 19,  9,\n+    9,  9,  9,  9, 19, 19,  9,  9,  9, 19,  6, 19, 19, 19, 19, 19,\n+   19,  9,  0,  0,  0, 19,  0,  0,  9,  0,  0,  0, 19, 19, 27, 27,\n+   27, 27, 56, 56, 56, 56, 61, 61, 61, 61, 13, 13, 13, 13,  0, 13,\n+    0, 13,  0, 13, 13, 13, 13, 13,  1,  1,  1,  1, 12, 12,  0, 15,\n+   15, 15, 15, 15, 15, 15, 15,  1,  1,  0,  0, 17, 17, 17, 17, 17,\n+   17, 17, 17, 17, 17,  0, 26, 26, 26, 26, 26, 12, 12, 12, 12, 12,\n+   12,  0, 39, 39, 39, 39, 86, 86, 86, 86, 77, 77, 77, 77, 79, 79,\n+   79, 79, 60, 60, 60, 60, 65, 65, 65, 65, 75, 75, 75, 75, 69, 69,\n+   69, 69, 69, 69,  0, 69, 74, 74, 74, 74, 84, 84, 84, 84, 84, 84,\n+   84,  0, 68, 68, 68, 68, 92, 92, 92, 92, 87, 87, 87, 87, 19,  9,\n+   19, 19, 19, 19,  0,  0,  2,  2,  2,  2, 19, 19, 19,  4,  3,  3,\n+    0,  0,  1,  1,  6,  6,  0,  0, 17, 17, 17, 17,  0,  0, 49, 49,\n+   49, 49,  0,  1,  1,  1, 71, 71, 71, 71, 67, 67, 67, 67, 42, 42,\n+   42, 42, 41, 41, 41, 41,118,118,118,118, 53, 53, 53, 53, 59, 59,\n+   59, 59, 40, 40, 40, 40, 51, 51, 51, 51, 50, 50, 50, 50,135,135,\n+  135,135,106,106,106,106,104,104,104,104,110,110,110,110, 47, 47,\n+   47, 47, 81, 81, 81, 81,120,120,120,120,116,116,116,116,128,128,\n+  128,128, 66, 66, 66, 66, 72, 72, 72, 72, 98, 98, 98, 98, 97, 97,\n+   97, 97, 57, 57, 57, 57, 88, 88, 88, 88,117,117,117,117,112,112,\n+  112,112, 78, 78, 78, 78, 83, 83, 83, 83, 82, 82, 82, 82,122,122,\n+  122,122, 89, 89, 89, 89,130,130,130,130,144,144,144,144,156,156,\n+  156,156,147,147,147,147,148,148,148,148,153,153,153,153,149,149,\n+  149,149, 94, 94, 94, 94, 85, 85, 85, 85,101,101,101,101, 96, 96,\n+   96, 96,111,111,111,111,100,100,100,100,100, 36, 36, 36,108,108,\n+  108,108,129,129,129,129,109,109,109,109,107,107,107,107,107,107,\n+  107,  1,137,137,137,137,124,124,124,124,123,123,123,123,114,114,\n+  114,114,102,102,102,102,126,126,126,126,142,142,142,142,125,125,\n+  125,125,154,154,154,154,150,150,150,150,141,141,141,141,140,140,\n+  140,140,121,121,121,121,133,133,133,133,134,134,134,134,138,138,\n+  138,138,143,143,143,143,145,145,145,145, 63, 63, 63, 63, 80, 80,\n+   80, 80,127,127,127,127,115,115,115,115,103,103,103,103,119,119,\n+  119,119,146,146,146,146, 99, 99, 99, 99,136,139,  0,  0,155,155,\n+  155,155,136,136,136,136, 17, 15, 15, 15,139,139,139,139,105,105,\n+  105,105,  0,  0,  0,  1,  0,  0,  1,  1,131,131,131,131,151,151,\n+  151,151,152,152,152,152,113,113,113,113,132,132,132,132, 15,  0,\n+    0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9,  9, 10,\n+    9, 11, 12, 13,  9,  9,  9, 14,  9,  9, 15,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 16, 17,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 18, 19, 20,  9, 21,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 22,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n+    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 23, 24,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n+    5,  6,  7,  8,  9, 10, 11, 12,  0,  0, 13, 14, 15, 16, 17, 18,\n+   19, 20, 21, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 23,  0,  0, 24, 25, 26, 27, 28, 29, 30,  0,  0,\n+   31, 32,  0, 33,  0, 34,  0, 35,  0,  0,  0,  0, 36, 37, 38, 39,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41, 42,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0, 43, 44,  0, 45,  0,  0,  0,  0,  0,  0, 46, 47,  0,  0,\n+    0,  0,  0, 48,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 50, 51,  0,  0,  0, 52,  0,  0, 53,  0,  0,  0,\n+    0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0,\n+    0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,  0, 57,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0, 58, 59, 60, 61, 62, 63, 64, 65,  0,  0,  0,  0,\n+    0,  0, 66,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   67, 68,  0, 69, 70,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+   71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\n+   87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,\n+  103,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,104,  0,  0,  0,  0,  0,  0,105,106,  0,107,  0,  0,  0,\n+  108,  0,109,  0,110,  0,111,112,113,  0,114,  0,  0,  0,115,  0,\n+    0,  0,116,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,117,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,118,119,120,121,  0,122,123,124,125,126,  0,127,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+  128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,\n+  144,145,146,147,148,149,150,151,152,153,154,155,156,157,  0,  0,\n+    0,158,159,160,161,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,162,163,  0,  0,  0,  0,  0,\n+    0,  0,164,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,165,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,166,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,167,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,168,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,169,170,  0,  0,  0,  0,171,172,  0,  0,  0,\n+  173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,\n+  189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n+  205,206,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,\n+};\n+static const uint16_t\n+_hb_ucd_u16[4848] =\n+{\n+     0,   0,   1,   2,   3,   4,   5,   6,   0,   0,   7,   8,   9,  10,  11,  12,\n+    13,  13,  13,  14,  15,  13,  13,  16,  17,  18,  19,  20,  21,  22,  13,  23,\n+    13,  13,  13,  24,  25,  11,  11,  11,  11,  26,  11,  27,  28,  29,  30,  31,\n+    32,  32,  32,  32,  32,  32,  32,  33,  34,  35,  36,  11,  37,  38,  13,  39,\n+     9,   9,   9,  11,  11,  11,  13,  13,  40,  13,  13,  13,  41,  13,  13,  13,\n+    13,  13,  13,  35,   9,  42,  11,  11,  43,  44,  32,  45,  46,  47,  47,  48,\n+    49,  50,  47,  47,  51,  32,  52,  53,  47,  47,  47,  47,  47,  54,  55,  56,\n+    57,  58,  47,  32,  59,  47,  47,  47,  47,  47,  60,  53,  61,  47,  62,  63,\n+    47,  64,  65,  66,  47,  67,  47,  47,  47,  47,  47,  47,  47,  68,  69,  32,\n+    70,  47,  47,  71,  72,  73,  74,  75,  76,  47,  47,  77,  78,  79,  80,  81,\n+    82,  47,  47,  83,  84,  85,  86,  87,  82,  47,  47,  77,  88,  47,  80,  89,\n+    90,  47,  47,  91,  92,  93,  80,  94,  95,  47,  47,  96,  97,  98,  99, 100,\n+   101,  47,  47, 102, 103, 104,  80, 105, 106,  47,  47,  91, 107, 108,  80, 109,\n+   110,  47,  47, 111, 112, 113,  80, 114,  90,  47,  47,  47, 115, 116,  99, 117,\n+    47,  47,  47, 118, 119, 120,  66,  66,  47,  47,  47, 121, 122, 123,  47,  47,\n+   124, 125, 126, 127,  47,  47,  47, 128, 129,  32,  32, 130, 131, 132,  66,  66,\n+    47,  47, 133, 134, 120, 135, 136, 137, 138, 139,   9,   9,   9,  11,  11, 140,\n+    47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47, 141, 142, 143,\n+    47, 144,   9,   9,   9,   9,   9, 145, 146,  47,  47,  47,  47,  47,  47,  47,\n+    47,  47,  47,  47,  47,  47, 147,  47, 148, 149,  47,  47,  47,  47, 150, 151,\n+    47, 152,  47, 153,  47, 152,  47, 152,  47,  47,  47, 154, 155, 156, 157, 143,\n+   158, 157,  47,  47, 159,  47,  47,  47, 160,  47, 161,  47,  47,  47,  47,  47,\n+    47,  47, 162, 163, 164,  47,  47,  47,  47,  47,  47,  47,  47, 165, 144, 144,\n+    47, 166,  47,  47,  47, 167, 168, 169, 157, 157, 170, 171,  32,  32,  32,  32,\n+   172,  47,  47, 173, 174, 120, 175, 176, 177,  47, 178,  61,  47,  47, 179, 180,\n+    47,  47, 181, 182, 183,  61,  47, 184,  11,   9,   9,   9,  66, 185, 186, 187,\n+    11,  11, 188,  27,  27,  27, 189, 190,  11, 191,  27,  27,  32,  32,  32,  32,\n+    13,  13,  13,  13,  13,  13,  13,  13,  13, 192,  13,  13,  13,  13,  13,  13,\n+   193, 193, 193, 193, 193, 194, 193,  11, 195, 195, 195, 196, 197, 198, 198, 197,\n+   199, 200, 201, 202, 203, 204, 205, 206, 207,  27, 208, 208, 208, 209, 210,  32,\n+   211, 212, 213, 214, 215, 143, 216, 216, 217, 218, 219, 144, 220, 221, 144, 222,\n+   223, 223, 223, 223, 223, 223, 223, 223, 224, 144, 225, 144, 144, 144, 144, 226,\n+   144, 227, 223, 228, 144, 229, 230, 144, 144, 144, 144, 144, 144, 144, 143, 143,\n+   143, 231, 144, 144, 144, 144, 232, 143, 144, 144, 144, 144, 144, 144, 144, 144,\n+   144, 144, 144, 233, 234, 144, 144, 235, 144, 144, 144, 144, 144, 144, 236, 144,\n+   144, 144, 144, 144, 144, 144, 237, 238, 143, 239, 144, 144, 240, 223, 241, 223,\n+   242, 243, 223, 223, 223, 244, 223, 245, 144, 144, 144, 223, 246, 144, 144, 144,\n+     9,   9,   9,  11,  11,  11, 247, 248,  13,  13,  13,  13,  13,  13, 249, 250,\n+    11,  11,  11,  47,  47,  47, 251, 252,  47,  47,  47,  47,  47,  47,  32,  32,\n+   253, 254, 255, 256, 257, 258,  66,  66, 259, 260, 261, 262, 263,  47,  47,  47,\n+    47, 264, 146,  47,  47,  47,  47, 265,  47, 266,  47,  47, 144, 144, 144,  47,\n+   144, 144, 267, 144, 268, 269, 144, 144, 267, 144, 144, 269, 144, 144, 144, 144,\n+    47,  47,  47,  47, 144, 144, 144, 144,  47, 270,  47,  47,  47,  47,  47,  47,\n+    47, 144, 144, 144, 144,  47,  47, 184, 271,  47,  61,  47,  13,  13, 272, 273,\n+    13, 274,  47,  47,  47,  47, 275, 276,  31, 277, 278, 279,  13,  13,  13, 280,\n+   281, 282, 283, 284, 285,  11,  11, 286, 287,  47, 288, 289,  47,  47,  47, 290,\n+   291,  47,  47, 292, 293, 157,  32, 294,  61,  47, 295,  47, 296, 297,  47,  47,\n+    70,  47,  47, 298, 299, 300, 301,  61,  47,  47, 302, 303, 304, 305,  47, 306,\n+    47,  47,  47, 307,  58, 308, 309, 310,  47,  47,  47,  11,  11, 311, 312,  11,\n+    11,  11,  11,  11,  47,  47, 313, 157, 314, 314, 314, 314, 314, 314, 314, 314,\n+   315, 315, 315, 315, 315, 315, 315, 315,  11, 316, 317,  47,  47,  47,  47,  47,\n+    47,  47,  47, 318,  31, 319,  47,  47,  47,  47,  47, 320, 321,  47,  47,  47,\n+    47,  47,  47,  47,  47,  47,  47, 322,  32, 323,  32, 324, 325, 326, 327,  47,\n+    47,  47,  47,  47,  47,  47,  47, 328, 329,   2,   3,   4,   5, 330, 331, 332,\n+    47, 333,  47,  47,  47,  47, 334, 335, 336, 143, 143, 337, 216, 216, 216, 338,\n+   339, 144, 144, 144, 144, 144, 144, 340, 341, 341, 341, 341, 341, 341, 341, 341,\n+    47,  47,  47,  47,  47,  47, 342, 143,  47,  47, 343,  47, 344,  47,  47,  60,\n+    47, 345,  47,  47,  47, 346, 216, 216,   9,   9, 145,  11,  11,  47,  47,  47,\n+    47,  47, 157,   9,   9, 145,  11,  11,  47,  47,  47,  47,  47,  47, 345,  66,\n+    47,  47,  47,  47,  47, 347,  47, 348,  47,  47, 349, 143, 143, 143,  47, 350,\n+    47, 351,  47, 345,  66,  66,  66,  66,  47,  47,  47, 352, 143, 143, 143, 143,\n+   353,  47,  47, 354, 143,  66,  47, 355,  47, 356, 143, 143, 357,  47, 358,  66,\n+    47,  47,  47, 359,  47, 360,  47, 360,  47, 359, 142, 143, 143, 143, 143, 143,\n+     9,   9,   9,   9,  11,  11,  11, 361,  47,  47, 362, 157, 157, 157, 157, 157,\n+   143, 143, 143, 143, 143, 143, 143, 143,  47,  47, 363,  47,  47,  47,  47,  47,\n+    47, 356, 364,  47,  60, 365,  66,  66,  47,  47,  47,  47, 366, 143,  47,  47,\n+   367,  47,  47, 354, 368, 369, 370, 371, 177,  47,  47, 372, 373,  47,  47, 157,\n+    95,  47, 374, 375, 376,  47,  47, 377, 177,  47,  47, 378, 379, 380, 381, 143,\n+    47,  47, 382, 383,  32,  32,  32,  32,  47,  47, 359,  47,  47, 384, 169, 157,\n+    90,  47,  47, 111, 385, 386, 387,  32,  47,  47,  47, 388, 389, 390,  47,  47,\n+    47,  47,  47, 391, 392, 157, 157, 157,  47,  47, 393, 394, 395, 396,  32,  32,\n+    47,  47,  47, 397, 398, 157,  66,  66,  47,  47, 399, 400, 157, 157, 157, 157,\n+    47, 141, 401, 402, 144, 144, 144, 144,  47,  47, 382, 403,  66,  66,  66,  66,\n+     9,   9,   9,   9,  11,  11, 126, 404,  47,  47,  47, 405, 406, 157, 157, 157,\n+    47,  47,  47,  47,  47, 407, 408, 409, 410,  47,  47, 411, 412, 413,  47,  47,\n+   414, 415,  66,  66,  47,  47,  47,  47,  47,  47, 393, 416, 417, 126, 143, 418,\n+    47, 152, 419, 420,  32,  32,  32,  32,  47,  47,  47, 353, 421, 157,  47,  47,\n+   422, 423, 157, 157, 157, 157, 157, 157,  47,  47,  47,  47,  47,  47,  47, 424,\n+    47,  47,  47,  47, 143, 425, 426, 427, 216, 216, 216, 216, 216, 216, 216,  66,\n+    47,  47,  47, 205, 205, 205, 205, 205,  47,  47,  47,  47,  47,  47, 300,  66,\n+    47,  47,  47,  47,  47,  47,  47, 428,  47,  47,  47, 429, 430, 431, 432,  47,\n+     9,   9,   9,   9,   9,   9,  11,  11, 143, 433,  66,  66,  66,  66,  66,  66,\n+    47,  47,  47,  47, 384, 434, 409, 409, 435, 436,  27,  27,  27,  27, 437, 409,\n+    47, 438, 205, 205, 205, 205, 205, 205, 144, 144, 144, 144, 144, 144, 439, 440,\n+   441, 144, 442, 144, 144, 144, 144, 144, 144, 144, 144, 144, 443, 144, 144, 144,\n+     9, 444,  11, 445, 446,  11, 193,   9, 447, 448,   9, 449,  11,   9, 444,  11,\n+   445, 446,  11, 193,   9, 447, 448,   9, 449,  11,   9, 444,  11, 445, 446,  11,\n+   193,   9, 447, 448,   9, 449,  11,   9, 444,  11, 193,   9, 450, 451, 452, 453,\n+    11, 454,   9, 455, 456, 457, 458,  11, 459,   9, 460,  11, 461, 157, 157, 157,\n+    32,  32,  32, 462,  32,  32, 463, 464, 465, 466,  32,  32,  32,  32,  32,  32,\n+    32,  32,  32,  32,  32,  32,  32,  32,  47,  47,  47, 467, 468, 144, 144, 144,\n+    47,  47,  47,  47,  47,  47, 469, 470,  47,  47,  47,  47, 349,  32,  32,  32,\n+     9,   9, 447,  11, 471, 300,  66,  66, 143, 143, 472, 473, 143, 143, 143, 143,\n+   143, 143, 474, 143, 143, 143, 143, 143,  47,  47,  47,  47,  47,  47,  47, 223,\n+   475, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 476,\n+   144, 144, 144, 144, 144, 144, 144, 157, 205, 205, 205, 205, 205, 205, 205, 205,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   939, 940, 941, 942, 946, 948,   0, 962, 969, 970, 971, 976,1001,1002,1003,1008,\n+     0,1033,1040,1041,1042,1043,1047,   0,   0,1080,1081,1082,1086,1110,   0,   0,\n+  1124,1125,1126,1127,1131,1133,   0,1147,1154,1155,1156,1161,1187,1188,1189,1193,\n+     0,1219,1226,1227,1228,1229,1233,   0,   0,1267,1268,1269,1273,1298,   0,1303,\n+   943,1128, 944,1129, 954,1139, 958,1143, 959,1144, 960,1145, 961,1146, 964,1149,\n+     0,   0, 973,1158, 974,1159, 975,1160, 983,1168, 978,1163, 988,1173, 990,1175,\n+   991,1176, 993,1178, 994,1179,   0,   0,1004,1190,1005,1191,1006,1192,1014,1199,\n+  1007,   0,   0,   0,1016,1201,1020,1206,   0,1022,1208,1025,1211,1023,1209,   0,\n+     0,   0,   0,1032,1218,1037,1223,1035,1221,   0,   0,   0,1044,1230,1045,1231,\n+  1049,1235,   0,   0,1058,1244,1064,1250,1060,1246,1066,1252,1067,1253,1072,1258,\n+  1069,1255,1077,1264,1074,1261,   0,   0,1083,1270,1084,1271,1085,1272,1088,1275,\n+  1089,1276,1096,1283,1103,1290,1111,1299,1115,1118,1307,1120,1309,1121,1310,   0,\n+  1053,1239,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1093,\n+  1280,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 949,1134,1010,\n+  1195,1050,1236,1090,1277,1341,1368,1340,1367,1342,1369,1339,1366,   0,1320,1347,\n+  1418,1419,1323,1350,   0,   0, 992,1177,1018,1204,1055,1241,1416,1417,1415,1424,\n+  1202,   0,   0,   0, 987,1172,   0,   0,1031,1217,1321,1348,1322,1349,1338,1365,\n+   950,1135, 951,1136, 979,1164, 980,1165,1011,1196,1012,1197,1051,1237,1052,1238,\n+  1061,1247,1062,1248,1091,1278,1092,1279,1071,1257,1076,1263,   0,   0, 997,1182,\n+     0,   0,   0,   0,   0,   0, 945,1130, 982,1167,1337,1364,1335,1362,1046,1232,\n+  1422,1423,1113,1301,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     8,   9,   0,  10,1425,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,\n+     0,   0,   0,   0,   0,1314,1427,   5,1434,1438,1443,   0,1450,   0,1455,1461,\n+  1514,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1446,1458,1468,1476,1480,1486,\n+  1517,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1489,1503,1494,1500,1508,   0,\n+     0,   0,   0,1520,1521,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1526,1528,   0,1525,   0,   0,   0,1522,   0,   0,   0,   0,1536,1532,1539,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1534,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1556,   0,   0,   0,   0,   0,   0,\n+  1548,1550,   0,1547,   0,   0,   0,1567,   0,   0,   0,   0,1558,1554,1561,   0,\n+     0,   0,   0,   0,   0,   0,1568,1569,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1529,1551,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1523,1545,1524,1546,   0,   0,1527,1549,   0,   0,1570,1571,1530,1552,1531,1553,\n+     0,   0,1533,1555,1535,1557,1537,1559,   0,   0,1572,1573,1544,1566,1538,1560,\n+  1540,1562,1541,1563,1542,1564,   0,   0,1543,1565,   0,   0,   0,   0,   0,   0,\n+     0,   0,1606,1607,1609,1608,1610,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+  1613,   0,1611,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1612,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1620,   0,   0,   0,   0,   0,   0,\n+     0,1623,   0,   0,1624,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1614,1615,1616,1617,1618,1619,1621,1622,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1628,1629,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1625,1626,   0,1627,\n+     0,   0,   0,1634,   0,   0,1635,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1630,1631,1632,   0,   0,1633,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1639,   0,   0,1638,1640,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1636,1637,   0,   0,\n+     0,   0,   0,   0,1641,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1642,1644,1643,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1645,   0,   0,   0,   0,   0,   0,   0,\n+  1646,   0,   0,   0,   0,   0,   0,1648,1649,   0,1647,1650,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1651,1653,1652,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1654,   0,1655,1657,1656,   0,\n+     0,   0,   0,1659,   0,   0,   0,   0,   0,   0,   0,   0,   0,1660,   0,   0,\n+     0,   0,1661,   0,   0,   0,   0,1662,   0,   0,   0,   0,1663,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1658,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1664,   0,1665,1673,   0,1674,   0,   0,   0,   0,   0,   0,   0,\n+     0,1666,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,1668,   0,   0,   0,   0,   0,   0,   0,   0,   0,1669,   0,   0,\n+     0,   0,1670,   0,   0,   0,   0,1671,   0,   0,   0,   0,1672,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,1667,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1675,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,1676,   0,1677,   0,1678,   0,1679,   0,1680,   0,\n+     0,   0,1681,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1682,   0,1683,   0,   0,\n+  1684,1685,   0,1686,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   953,1138, 955,1140, 956,1141, 957,1142,1324,1351, 963,1148, 965,1150, 968,1153,\n+   966,1151, 967,1152,1378,1380,1379,1381, 984,1169, 985,1170,1420,1421, 986,1171,\n+   989,1174, 995,1180, 998,1183, 996,1181, 999,1184,1000,1185,1015,1200,1329,1356,\n+  1017,1203,1019,1205,1021,1207,1024,1210,1687,1688,1027,1213,1026,1212,1028,1214,\n+  1029,1215,1030,1216,1034,1220,1036,1222,1039,1225,1038,1224,1334,1361,1336,1363,\n+  1382,1384,1383,1385,1056,1242,1057,1243,1059,1245,1063,1249,1689,1690,1065,1251,\n+  1068,1254,1070,1256,1386,1387,1388,1389,1691,1692,1073,1259,1075,1262,1079,1266,\n+  1078,1265,1095,1282,1098,1285,1097,1284,1390,1391,1392,1393,1099,1286,1100,1287,\n+  1101,1288,1102,1289,1105,1292,1104,1291,1106,1294,1107,1295,1108,1296,1114,1302,\n+  1119,1308,1122,1311,1123,1312,1186,1260,1293,1305,   0,1394,   0,   0,   0,   0,\n+   952,1137, 947,1132,1317,1344,1316,1343,1319,1346,1318,1345,1693,1695,1371,1375,\n+  1370,1374,1373,1377,1372,1376,1694,1696, 981,1166, 977,1162, 972,1157,1326,1353,\n+  1325,1352,1328,1355,1327,1354,1697,1698,1009,1194,1013,1198,1054,1240,1048,1234,\n+  1331,1358,1330,1357,1333,1360,1332,1359,1699,1700,1396,1401,1395,1400,1398,1403,\n+  1397,1402,1399,1404,1094,1281,1087,1274,1406,1411,1405,1410,1408,1413,1407,1412,\n+  1409,1414,1109,1297,1117,1306,1116,1304,1112,1300,   0,   0,   0,   0,   0,   0,\n+  1471,1472,1701,1705,1702,1706,1703,1707,1430,1431,1715,1719,1716,1720,1717,1721,\n+  1477,1478,1729,1731,1730,1732,   0,   0,1435,1436,1733,1735,1734,1736,   0,   0,\n+  1481,1482,1737,1741,1738,1742,1739,1743,1439,1440,1751,1755,1752,1756,1753,1757,\n+  1490,1491,1765,1768,1766,1769,1767,1770,1447,1448,1771,1774,1772,1775,1773,1776,\n+  1495,1496,1777,1779,1778,1780,   0,   0,1451,1452,1781,1783,1782,1784,   0,   0,\n+  1504,1505,1785,1788,1786,1789,1787,1790,   0,1459,   0,1791,   0,1792,   0,1793,\n+  1509,1510,1794,1798,1795,1799,1796,1800,1462,1463,1808,1812,1809,1813,1810,1814,\n+  1467,  21,1475,  22,1479,  23,1485,  24,1493,  27,1499,  28,1507,  29,   0,   0,\n+  1704,1708,1709,1710,1711,1712,1713,1714,1718,1722,1723,1724,1725,1726,1727,1728,\n+  1740,1744,1745,1746,1747,1748,1749,1750,1754,1758,1759,1760,1761,1762,1763,1764,\n+  1797,1801,1802,1803,1804,1805,1806,1807,1811,1815,1816,1817,1818,1819,1820,1821,\n+  1470,1469,1822,1474,1465,   0,1473,1825,1429,1428,1426,  12,1432,   0,  26,   0,\n+     0,1315,1823,1484,1466,   0,1483,1829,1433,  13,1437,  14,1441,1826,1827,1828,\n+  1488,1487,1513,  19,   0,   0,1492,1515,1445,1444,1442,  15,   0,1831,1832,1833,\n+  1502,1501,1516,  25,1497,1498,1506,1518,1457,1456,1454,  17,1453,1313,  11,   3,\n+     0,   0,1824,1512,1519,   0,1511,1830,1449,  16,1460,  18,1464,   4,   0,   0,\n+    30,  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,  20,   0,   0,   0,   2,   6,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1834,1835,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1836,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1837,1839,1838,\n+     0,   0,   0,   0,1840,   0,   0,   0,   0,1841,   0,   0,1842,   0,   0,   0,\n+     0,   0,   0,   0,1843,   0,1844,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,1845,   0,   0,1846,   0,   0,1847,   0,1848,   0,   0,   0,   0,   0,   0,\n+   937,   0,1850,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1849, 936, 938,\n+  1851,1852,   0,   0,1853,1854,   0,   0,1855,1856,   0,   0,   0,   0,   0,   0,\n+  1857,1858,   0,   0,1861,1862,   0,   0,1863,1864,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1867,1868,1869,1870,\n+  1859,1860,1865,1866,   0,   0,   0,   0,   0,   0,1871,1872,1873,1874,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,  32,  33,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1875,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1877,   0,1878,   0,\n+  1879,   0,1880,   0,1881,   0,1882,   0,1883,   0,1884,   0,1885,   0,1886,   0,\n+  1887,   0,1888,   0,   0,1889,   0,1890,   0,1891,   0,   0,   0,   0,   0,   0,\n+  1892,1893,   0,1894,1895,   0,1896,1897,   0,1898,1899,   0,1900,1901,   0,   0,\n+     0,   0,   0,   0,1876,   0,   0,   0,   0,   0,   0,   0,   0,   0,1902,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1904,   0,1905,   0,\n+  1906,   0,1907,   0,1908,   0,1909,   0,1910,   0,1911,   0,1912,   0,1913,   0,\n+  1914,   0,1915,   0,   0,1916,   0,1917,   0,1918,   0,   0,   0,   0,   0,   0,\n+  1919,1920,   0,1921,1922,   0,1923,1924,   0,1925,1926,   0,1927,1928,   0,   0,\n+     0,   0,   0,   0,1903,   0,   0,1929,1930,1931,1932,   0,   0,   0,1933,   0,\n+   710, 385, 724, 715, 455, 103, 186, 825, 825, 242, 751, 205, 241, 336, 524, 601,\n+   663, 676, 688, 738, 411, 434, 474, 500, 649, 746, 799, 108, 180, 416, 482, 662,\n+   810, 275, 462, 658, 692, 344, 618, 679, 293, 388, 440, 492, 740, 116, 146, 168,\n+   368, 414, 481, 527, 606, 660, 665, 722, 781, 803, 809, 538, 553, 588, 642, 758,\n+   811, 701, 233, 299, 573, 612, 487, 540, 714, 779, 232, 267, 412, 445, 457, 585,\n+   594, 766, 167, 613, 149, 148, 560, 589, 648, 768, 708, 345, 411, 704, 105, 259,\n+   313, 496, 518, 174, 542, 120, 307, 101, 430, 372, 584, 183, 228, 529, 650, 697,\n+   424, 732, 428, 349, 632, 355, 517, 110, 135, 147, 403, 580, 624, 700, 750, 170,\n+   193, 245, 297, 374, 463, 543, 763, 801, 812, 815, 162, 384, 420, 730, 287, 330,\n+   337, 366, 459, 476, 509, 558, 591, 610, 726, 652, 734, 759, 154, 163, 198, 473,\n+   683, 697, 292, 311, 353, 423, 572, 494, 113, 217, 259, 280, 314, 499, 506, 603,\n+   608, 752, 778, 782, 788, 117, 557, 748, 774, 320, 109, 126, 260, 265, 373, 411,\n+   479, 523, 655, 737, 823, 380, 765, 161, 395, 398, 438, 451, 502, 516, 537, 583,\n+   791, 136, 340, 769, 122, 273, 446, 727, 305, 322, 400, 496, 771, 155, 190, 269,\n+   377, 391, 406, 432, 501, 519, 599, 684, 687, 749, 776, 175, 452, 191, 480, 510,\n+   659, 772, 805, 813, 397, 444, 619, 566, 568, 575, 491, 471, 707, 111, 636, 156,\n+   153, 288, 346, 578, 256, 435, 383, 729, 680, 767, 694, 295, 128, 210,   0,   0,\n+   227,   0, 379,   0,   0, 150, 493, 525, 544, 551, 552, 556, 783, 576, 604,   0,\n+   661,   0, 703,   0,   0, 735, 743,   0,   0,   0, 793, 794, 795, 808, 741, 773,\n+   118, 127, 130, 166, 169, 177, 207, 213, 215, 226, 229, 268, 270, 317, 327, 329,\n+   335, 369, 375, 381, 404, 441, 448, 458, 477, 484, 503, 539, 545, 547, 546, 548,\n+   549, 550, 554, 555, 561, 564, 569, 591, 593, 595, 598, 607, 620, 625, 625, 651,\n+   690, 695, 705, 706, 716, 717, 733, 735, 777, 786, 790, 315, 869, 623,   0,   0,\n+   102, 145, 134, 115, 129, 138, 165, 171, 207, 202, 206, 212, 227, 231, 240, 243,\n+   250, 254, 294, 296, 303, 308, 319, 325, 321, 329, 326, 335, 341, 357, 360, 362,\n+   370, 379, 388, 389, 393, 421, 424, 438, 456, 454, 458, 465, 477, 535, 485, 490,\n+   493, 507, 512, 514, 521, 522, 525, 526, 528, 533, 532, 541, 565, 569, 574, 586,\n+   591, 597, 607, 637, 647, 674, 691, 693, 695, 698, 703, 699, 705, 704, 702, 706,\n+   709, 717, 728, 736, 747, 754, 770, 777, 783, 784, 786, 787, 790, 802, 825, 848,\n+   847, 857,  55,  65,  66, 883, 892, 916, 822, 824,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1586,   0,1605,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1602,1603,1934,1935,1574,1575,\n+  1576,1577,1579,1580,1581,1583,1584,   0,1585,1587,1588,1589,1591,   0,1592,   0,\n+  1593,1594,   0,1595,1596,   0,1598,1599,1600,1601,1604,1582,1578,1590,1597,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1936,   0,1937,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1938,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1939,1940,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1941,1942,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1944,1943,   0,1945,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1946,1947,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,1948,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1949,1950,\n+  1951,1952,1953,1954,1955,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,1956,1957,1958,1960,1959,\n+  1961,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+   106, 104, 107, 826, 114, 118, 119, 121, 123, 124, 127, 125,  34, 830, 130, 131,\n+   132, 137, 827,  35, 133, 139, 829, 142, 143, 112, 144, 145, 924, 151, 152,  37,\n+   157, 158, 159, 160,  38, 165, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179,\n+   181, 182, 182, 182, 833, 468, 184, 185, 834, 187, 188, 189, 196, 192, 194, 195,\n+   197, 199, 200, 201, 203, 204, 204, 206, 208, 209, 211, 218, 213, 219, 214, 216,\n+   153, 234, 221, 222, 223, 220, 225, 224, 230, 835, 235, 236, 237, 238, 239, 244,\n+   836, 837, 247, 248, 249, 246, 251,  39,  40, 253, 255, 255, 838, 257, 258, 259,\n+   261, 839, 262, 263, 301, 264,  41, 266, 270, 272, 271, 841, 274, 842, 277, 276,\n+   278, 281, 282,  42, 283, 284, 285, 286,  43, 843,  44, 289, 290, 291, 293, 934,\n+   298, 845, 845, 621, 300, 300,  45, 852, 894, 302, 304,  46, 306, 309, 310, 312,\n+   316,  48,  47, 317, 846, 318, 323, 324, 325, 324, 328, 329, 333, 331, 332, 334,\n+   335, 336, 338, 339, 342, 343, 347, 351, 849, 350, 348, 352, 354, 359, 850, 361,\n+   358, 356,  49, 363, 365, 367, 364,  50, 369, 371, 851, 376, 386, 378,  53, 381,\n+    52,  51, 140, 141, 387, 382, 614,  78, 388, 389, 390, 394, 392, 856,  54, 399,\n+   396, 402, 404, 858, 405, 401, 407,  55, 408, 409, 410, 413, 859, 415,  56, 417,\n+   860, 418,  57, 419, 422, 424, 425, 861, 840, 862, 426, 863, 429, 431, 427, 433,\n+   437, 441, 438, 439, 442, 443, 864, 436, 449, 450,  58, 454, 453, 865, 447, 460,\n+   866, 867, 461, 466, 465, 464,  59, 467, 470, 469, 472, 828, 475, 868, 478, 870,\n+   483, 485, 486, 871, 488, 489, 872, 873, 495, 497,  60, 498,  61,  61, 504, 505,\n+   507, 508, 511,  62, 513, 874, 515, 875, 518, 844, 520, 876, 877, 878,  63,  64,\n+   528, 880, 879, 881, 882, 530, 531, 531, 533,  66, 534,  67,  68, 884, 536, 538,\n+   541,  69, 885, 549, 886, 887, 556, 559,  70, 561, 562, 563, 888, 889, 889, 567,\n+    71, 890, 570, 571,  72, 891, 577,  73, 581, 579, 582, 893, 587,  74, 590, 592,\n+   596,  75, 895, 896,  76, 897, 600, 898, 602, 605, 607, 899, 900, 609, 901, 611,\n+   853,  77, 615, 616,  79, 617, 252, 902, 903, 854, 855, 621, 622, 731,  80, 627,\n+   626, 628, 164, 629, 630, 631, 633, 904, 632, 634, 639, 640, 635, 641, 646, 651,\n+   638, 643, 644, 645, 905, 907, 906,  81, 653, 654, 656, 911, 657, 908,  82,  83,\n+   909, 910,  84, 664, 665, 666, 667, 669, 668, 671, 670, 674, 672, 673, 675,  85,\n+   677, 678,  86, 681, 682, 912, 685, 686,  87, 689,  36, 913, 914,  88,  89, 696,\n+   702, 709, 711, 915, 712, 713, 718, 719, 917, 831, 721, 720, 723, 832, 725, 728,\n+   918, 919, 739, 742, 744, 920, 745, 753, 756, 757, 755, 760, 761, 921, 762,  90,\n+   764, 922,  91, 775, 279, 780, 923, 925,  92,  93, 785, 926,  94, 927, 787, 787,\n+   789, 928, 792,  95, 796, 797, 798, 800,  96, 929, 802, 804, 806,  97,  98, 807,\n+   930,  99, 931, 932, 933, 814, 100, 816, 817, 818, 819, 820, 821, 935,   0,   0,\n+};\n+static const int16_t\n+_hb_ucd_i16[92] =\n+{\n+      0,    0,    1,   -1,    2,    0,   -2,    0,    0,    2,    0,   -2,    0,   16,    0,  -16,\n+      0,    1,   -1,    0,    3,    3,    3,   -3,   -3,   -3,    0, 2016,    0, 2527, 1923, 1914,\n+   1918,    0, 2250,    0,    0,  138,    0,    7,   -7,    0,   -1,    1, 1824,    0, 2104,    0,\n+   2108, 2106,    0, 2106, 1316,    0,   -1, -138,    8,    8,    8,    0,    7,    7,   -8,   -8,\n+     -8,   -7,-1316,    1,   -1,    3,   -3,    1,    0,-1914,-1918,    0,    0,-1923,-1824,    0,\n+      0,-2016,-2104,    0,    0,-2106,-2108,-2106,-2250,    0,-2527,    0,\n+};\n+\n+static inline uint_fast8_t\n+_hb_ucd_gc (unsigned u)\n+{\n+  return u<1114112u?_hb_ucd_u8[4920+(((_hb_ucd_u8[1104+(((_hb_ucd_u16[((_hb_ucd_u8[272+(((_hb_ucd_u8[u>>1>>3>>3>>5])<<5)+((u>>1>>3>>3)&31u))])<<3)+((u>>1>>3)&7u)])<<3)+((u>>1)&7u))])<<1)+((u)&1u))]:2;\n+}\n+static inline uint_fast8_t\n+_hb_ucd_ccc (unsigned u)\n+{\n+  return u<125259u?_hb_ucd_u8[6796+(((_hb_ucd_u8[6276+(((_hb_ucd_u8[5844+(((_hb_ucd_u8[5508+(((_hb_ucd_u8[5262+(u>>2>>2>>2>>3)])<<3)+((u>>2>>2>>2)&7u))])<<2)+((u>>2>>2)&3u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:0;\n+}\n+static inline unsigned\n+_hb_ucd_b4 (const uint8_t* a, unsigned i)\n+{\n+  return (a[i>>1]>>((i&1u)<<2))&15u;\n+}\n+static inline int_fast16_t\n+_hb_ucd_bmg (unsigned u)\n+{\n+  return u<65380u?_hb_ucd_i16[((_hb_ucd_u8[7672+(((_hb_ucd_u8[7448+(((_hb_ucd_u8[7352+(((_hb_ucd_b4(7288+_hb_ucd_u8,u>>1>>2>>3>>3))<<3)+((u>>1>>2>>3)&7u))])<<3)+((u>>1>>2)&7u))])<<2)+((u>>1)&3u))])<<1)+((u)&1u)]:0;\n+}\n+static inline uint_fast8_t\n+_hb_ucd_sc (unsigned u)\n+{\n+  return u<918016u?_hb_ucd_u8[11242+(((_hb_ucd_u8[10314+(((_hb_ucd_u8[8938+(((_hb_ucd_u8[8362+(((_hb_ucd_u8[7912+(u>>2>>2>>3>>4)])<<4)+((u>>2>>2>>3)&15u))])<<3)+((u>>2>>2)&7u))])<<2)+((u>>2)&3u))])<<2)+((u)&3u))]:2;\n+}\n+static inline uint_fast16_t\n+_hb_ucd_dm (unsigned u)\n+{\n+  return u<195102u?_hb_ucd_u16[1536+(((_hb_ucd_u8[12544+(((_hb_ucd_u8[12162+(u>>4>>5)])<<5)+((u>>4)&31u))])<<4)+((u)&15u))]:0;\n+}\n+\n+#endif\n+\n+\n+#endif \/* HB_UCD_TABLE_HH *\/\n+\n+\/* == End of generated table == *\/\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ucd-table.hh","additions":6780,"deletions":0,"binary":false,"changes":6780,"status":"added"},{"patch":"@@ -0,0 +1,248 @@\n+\/*\n+ * Copyright (C) 2012 Grigori Goronzy <greg@kinoho.net>\n+ *\n+ * Permission to use, copy, modify, and\/or distribute this software for any\n+ * purpose with or without fee is hereby granted, provided that the above\n+ * copyright notice and this permission notice appear in all copies.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n+ *\/\n+\n+#include \"hb.hh\"\n+#include \"hb-unicode.hh\"\n+#include \"hb-machinery.hh\"\n+\n+#include \"hb-ucd-table.hh\"\n+\n+static hb_unicode_combining_class_t\n+hb_ucd_combining_class (hb_unicode_funcs_t *ufuncs HB_UNUSED,\n+                        hb_codepoint_t unicode,\n+                        void *user_data HB_UNUSED)\n+{\n+  return (hb_unicode_combining_class_t) _hb_ucd_ccc (unicode);\n+}\n+\n+static hb_unicode_general_category_t\n+hb_ucd_general_category (hb_unicode_funcs_t *ufuncs HB_UNUSED,\n+                         hb_codepoint_t unicode,\n+                         void *user_data HB_UNUSED)\n+{\n+  return (hb_unicode_general_category_t) _hb_ucd_gc (unicode);\n+}\n+\n+static hb_codepoint_t\n+hb_ucd_mirroring (hb_unicode_funcs_t *ufuncs HB_UNUSED,\n+                  hb_codepoint_t unicode,\n+                  void *user_data HB_UNUSED)\n+{\n+  return unicode + _hb_ucd_bmg (unicode);\n+}\n+\n+static hb_script_t\n+hb_ucd_script (hb_unicode_funcs_t *ufuncs HB_UNUSED,\n+               hb_codepoint_t unicode,\n+               void *user_data HB_UNUSED)\n+{\n+  return _hb_ucd_sc_map[_hb_ucd_sc (unicode)];\n+}\n+\n+\n+#define SBASE 0xAC00u\n+#define LBASE 0x1100u\n+#define VBASE 0x1161u\n+#define TBASE 0x11A7u\n+#define SCOUNT 11172u\n+#define LCOUNT 19u\n+#define VCOUNT 21u\n+#define TCOUNT 28u\n+#define NCOUNT (VCOUNT * TCOUNT)\n+\n+static inline bool\n+_hb_ucd_decompose_hangul (hb_codepoint_t ab, hb_codepoint_t *a, hb_codepoint_t *b)\n+{\n+  unsigned si = ab - SBASE;\n+\n+  if (si >= SCOUNT)\n+    return false;\n+\n+  if (si % TCOUNT)\n+  {\n+    \/* LV,T *\/\n+    *a = SBASE + (si \/ TCOUNT) * TCOUNT;\n+    *b = TBASE + (si % TCOUNT);\n+    return true;\n+  } else {\n+    \/* L,V *\/\n+    *a = LBASE + (si \/ NCOUNT);\n+    *b = VBASE + (si % NCOUNT) \/ TCOUNT;\n+    return true;\n+  }\n+}\n+\n+static inline bool\n+_hb_ucd_compose_hangul (hb_codepoint_t a, hb_codepoint_t b, hb_codepoint_t *ab)\n+{\n+  if (a >= SBASE && a < (SBASE + SCOUNT) && b > TBASE && b < (TBASE + TCOUNT) &&\n+    !((a - SBASE) % TCOUNT))\n+  {\n+    \/* LV,T *\/\n+    *ab = a + (b - TBASE);\n+    return true;\n+  }\n+  else if (a >= LBASE && a < (LBASE + LCOUNT) && b >= VBASE && b < (VBASE + VCOUNT))\n+  {\n+    \/* L,V *\/\n+    int li = a - LBASE;\n+    int vi = b - VBASE;\n+    *ab = SBASE + li * NCOUNT + vi * TCOUNT;\n+    return true;\n+  }\n+  else\n+    return false;\n+}\n+\n+static int\n+_cmp_pair (const void *_key, const void *_item)\n+{\n+  uint64_t& a = * (uint64_t*) _key;\n+  uint64_t b = (* (uint64_t*) _item) & HB_CODEPOINT_ENCODE3(0x1FFFFFu, 0x1FFFFFu, 0);\n+\n+  return a < b ? -1 : a > b ? +1 : 0;\n+}\n+static int\n+_cmp_pair_11_7_14 (const void *_key, const void *_item)\n+{\n+  uint32_t& a = * (uint32_t*) _key;\n+  uint32_t b = (* (uint32_t*) _item) & HB_CODEPOINT_ENCODE3_11_7_14(0x1FFFFFu, 0x1FFFFFu, 0);\n+\n+  return a < b ? -1 : a > b ? +1 : 0;\n+}\n+\n+static hb_bool_t\n+hb_ucd_compose (hb_unicode_funcs_t *ufuncs HB_UNUSED,\n+                hb_codepoint_t a, hb_codepoint_t b, hb_codepoint_t *ab,\n+                void *user_data HB_UNUSED)\n+{\n+  if (_hb_ucd_compose_hangul (a, b, ab)) return true;\n+\n+  hb_codepoint_t u = 0;\n+\n+  if ((a & 0xFFFFF800u) == 0x0000u && (b & 0xFFFFFF80) == 0x0300u)\n+  {\n+    uint32_t k = HB_CODEPOINT_ENCODE3_11_7_14 (a, b, 0);\n+    const uint32_t *v = hb_bsearch (k,\n+                                    _hb_ucd_dm2_u32_map,\n+                                    ARRAY_LENGTH (_hb_ucd_dm2_u32_map),\n+                                    sizeof (*_hb_ucd_dm2_u32_map),\n+                                    _cmp_pair_11_7_14);\n+    if (likely (!v)) return false;\n+    u = HB_CODEPOINT_DECODE3_11_7_14_3 (*v);\n+  }\n+  else\n+  {\n+    uint64_t k = HB_CODEPOINT_ENCODE3 (a, b, 0);\n+    const uint64_t *v = hb_bsearch (k,\n+                                    _hb_ucd_dm2_u64_map,\n+                                    ARRAY_LENGTH (_hb_ucd_dm2_u64_map),\n+                                    sizeof (*_hb_ucd_dm2_u64_map),\n+                                    _cmp_pair);\n+    if (likely (!v)) return false;\n+    u = HB_CODEPOINT_DECODE3_3 (*v);\n+  }\n+\n+  if (unlikely (!u)) return false;\n+  *ab = u;\n+  return true;\n+}\n+\n+static hb_bool_t\n+hb_ucd_decompose (hb_unicode_funcs_t *ufuncs HB_UNUSED,\n+                  hb_codepoint_t ab, hb_codepoint_t *a, hb_codepoint_t *b,\n+                  void *user_data HB_UNUSED)\n+{\n+  if (_hb_ucd_decompose_hangul (ab, a, b)) return true;\n+\n+  unsigned i = _hb_ucd_dm (ab);\n+\n+  if (likely (!i)) return false;\n+  i--;\n+\n+  if (i < ARRAY_LENGTH (_hb_ucd_dm1_p0_map) + ARRAY_LENGTH (_hb_ucd_dm1_p2_map))\n+  {\n+    if (i < ARRAY_LENGTH (_hb_ucd_dm1_p0_map))\n+      *a = _hb_ucd_dm1_p0_map[i];\n+    else\n+    {\n+      i -= ARRAY_LENGTH (_hb_ucd_dm1_p0_map);\n+      *a = 0x20000 | _hb_ucd_dm1_p2_map[i];\n+    }\n+    *b = 0;\n+    return true;\n+  }\n+  i -= ARRAY_LENGTH (_hb_ucd_dm1_p0_map) + ARRAY_LENGTH (_hb_ucd_dm1_p2_map);\n+\n+  if (i < ARRAY_LENGTH (_hb_ucd_dm2_u32_map))\n+  {\n+    uint32_t v = _hb_ucd_dm2_u32_map[i];\n+    *a = HB_CODEPOINT_DECODE3_11_7_14_1 (v);\n+    *b = HB_CODEPOINT_DECODE3_11_7_14_2 (v);\n+    return true;\n+  }\n+  i -= ARRAY_LENGTH (_hb_ucd_dm2_u32_map);\n+\n+  uint64_t v = _hb_ucd_dm2_u64_map[i];\n+  *a = HB_CODEPOINT_DECODE3_1 (v);\n+  *b = HB_CODEPOINT_DECODE3_2 (v);\n+  return true;\n+}\n+\n+\n+#if HB_USE_ATEXIT\n+static void free_static_ucd_funcs ();\n+#endif\n+\n+static struct hb_ucd_unicode_funcs_lazy_loader_t : hb_unicode_funcs_lazy_loader_t<hb_ucd_unicode_funcs_lazy_loader_t>\n+{\n+  static hb_unicode_funcs_t *create ()\n+  {\n+    hb_unicode_funcs_t *funcs = hb_unicode_funcs_create (nullptr);\n+\n+    hb_unicode_funcs_set_combining_class_func (funcs, hb_ucd_combining_class, nullptr, nullptr);\n+    hb_unicode_funcs_set_general_category_func (funcs, hb_ucd_general_category, nullptr, nullptr);\n+    hb_unicode_funcs_set_mirroring_func (funcs, hb_ucd_mirroring, nullptr, nullptr);\n+    hb_unicode_funcs_set_script_func (funcs, hb_ucd_script, nullptr, nullptr);\n+    hb_unicode_funcs_set_compose_func (funcs, hb_ucd_compose, nullptr, nullptr);\n+    hb_unicode_funcs_set_decompose_func (funcs, hb_ucd_decompose, nullptr, nullptr);\n+\n+    hb_unicode_funcs_make_immutable (funcs);\n+\n+#if HB_USE_ATEXIT\n+    atexit (free_static_ucd_funcs);\n+#endif\n+\n+    return funcs;\n+  }\n+} static_ucd_funcs;\n+\n+#if HB_USE_ATEXIT\n+static\n+void free_static_ucd_funcs ()\n+{\n+  static_ucd_funcs.free_instance ();\n+}\n+#endif\n+\n+hb_unicode_funcs_t *\n+hb_ucd_get_unicode_funcs ()\n+{\n+#ifdef HB_NO_UCD\n+  return hb_unicode_funcs_get_empty ();\n+#endif\n+  return static_ucd_funcs.get_unconst ();\n+}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ucd.cc","additions":248,"deletions":0,"binary":false,"changes":248,"status":"added"},{"patch":"@@ -1,268 +0,0 @@\n-\/*\n- * Copyright (C) 2012 Grigori Goronzy <greg@kinoho.net>\n- *\n- * Permission to use, copy, modify, and\/or distribute this software for any\n- * purpose with or without fee is hereby granted, provided that the above\n- * copyright notice and this permission notice appear in all copies.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n- * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n- * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n- * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n- *\/\n-\n-#include \"hb.hh\"\n-\n-#include \"hb-machinery.hh\"\n-\n-#include \"ucdn.h\"\n-\n-static const hb_script_t ucdn_script_translate[] =\n-{\n-    HB_SCRIPT_COMMON,\n-    HB_SCRIPT_LATIN,\n-    HB_SCRIPT_GREEK,\n-    HB_SCRIPT_CYRILLIC,\n-    HB_SCRIPT_ARMENIAN,\n-    HB_SCRIPT_HEBREW,\n-    HB_SCRIPT_ARABIC,\n-    HB_SCRIPT_SYRIAC,\n-    HB_SCRIPT_THAANA,\n-    HB_SCRIPT_DEVANAGARI,\n-    HB_SCRIPT_BENGALI,\n-    HB_SCRIPT_GURMUKHI,\n-    HB_SCRIPT_GUJARATI,\n-    HB_SCRIPT_ORIYA,\n-    HB_SCRIPT_TAMIL,\n-    HB_SCRIPT_TELUGU,\n-    HB_SCRIPT_KANNADA,\n-    HB_SCRIPT_MALAYALAM,\n-    HB_SCRIPT_SINHALA,\n-    HB_SCRIPT_THAI,\n-    HB_SCRIPT_LAO,\n-    HB_SCRIPT_TIBETAN,\n-    HB_SCRIPT_MYANMAR,\n-    HB_SCRIPT_GEORGIAN,\n-    HB_SCRIPT_HANGUL,\n-    HB_SCRIPT_ETHIOPIC,\n-    HB_SCRIPT_CHEROKEE,\n-    HB_SCRIPT_CANADIAN_SYLLABICS,\n-    HB_SCRIPT_OGHAM,\n-    HB_SCRIPT_RUNIC,\n-    HB_SCRIPT_KHMER,\n-    HB_SCRIPT_MONGOLIAN,\n-    HB_SCRIPT_HIRAGANA,\n-    HB_SCRIPT_KATAKANA,\n-    HB_SCRIPT_BOPOMOFO,\n-    HB_SCRIPT_HAN,\n-    HB_SCRIPT_YI,\n-    HB_SCRIPT_OLD_ITALIC,\n-    HB_SCRIPT_GOTHIC,\n-    HB_SCRIPT_DESERET,\n-    HB_SCRIPT_INHERITED,\n-    HB_SCRIPT_TAGALOG,\n-    HB_SCRIPT_HANUNOO,\n-    HB_SCRIPT_BUHID,\n-    HB_SCRIPT_TAGBANWA,\n-    HB_SCRIPT_LIMBU,\n-    HB_SCRIPT_TAI_LE,\n-    HB_SCRIPT_LINEAR_B,\n-    HB_SCRIPT_UGARITIC,\n-    HB_SCRIPT_SHAVIAN,\n-    HB_SCRIPT_OSMANYA,\n-    HB_SCRIPT_CYPRIOT,\n-    HB_SCRIPT_BRAILLE,\n-    HB_SCRIPT_BUGINESE,\n-    HB_SCRIPT_COPTIC,\n-    HB_SCRIPT_NEW_TAI_LUE,\n-    HB_SCRIPT_GLAGOLITIC,\n-    HB_SCRIPT_TIFINAGH,\n-    HB_SCRIPT_SYLOTI_NAGRI,\n-    HB_SCRIPT_OLD_PERSIAN,\n-    HB_SCRIPT_KHAROSHTHI,\n-    HB_SCRIPT_BALINESE,\n-    HB_SCRIPT_CUNEIFORM,\n-    HB_SCRIPT_PHOENICIAN,\n-    HB_SCRIPT_PHAGS_PA,\n-    HB_SCRIPT_NKO,\n-    HB_SCRIPT_SUNDANESE,\n-    HB_SCRIPT_LEPCHA,\n-    HB_SCRIPT_OL_CHIKI,\n-    HB_SCRIPT_VAI,\n-    HB_SCRIPT_SAURASHTRA,\n-    HB_SCRIPT_KAYAH_LI,\n-    HB_SCRIPT_REJANG,\n-    HB_SCRIPT_LYCIAN,\n-    HB_SCRIPT_CARIAN,\n-    HB_SCRIPT_LYDIAN,\n-    HB_SCRIPT_CHAM,\n-    HB_SCRIPT_TAI_THAM,\n-    HB_SCRIPT_TAI_VIET,\n-    HB_SCRIPT_AVESTAN,\n-    HB_SCRIPT_EGYPTIAN_HIEROGLYPHS,\n-    HB_SCRIPT_SAMARITAN,\n-    HB_SCRIPT_LISU,\n-    HB_SCRIPT_BAMUM,\n-    HB_SCRIPT_JAVANESE,\n-    HB_SCRIPT_MEETEI_MAYEK,\n-    HB_SCRIPT_IMPERIAL_ARAMAIC,\n-    HB_SCRIPT_OLD_SOUTH_ARABIAN,\n-    HB_SCRIPT_INSCRIPTIONAL_PARTHIAN,\n-    HB_SCRIPT_INSCRIPTIONAL_PAHLAVI,\n-    HB_SCRIPT_OLD_TURKIC,\n-    HB_SCRIPT_KAITHI,\n-    HB_SCRIPT_BATAK,\n-    HB_SCRIPT_BRAHMI,\n-    HB_SCRIPT_MANDAIC,\n-    HB_SCRIPT_CHAKMA,\n-    HB_SCRIPT_MEROITIC_CURSIVE,\n-    HB_SCRIPT_MEROITIC_HIEROGLYPHS,\n-    HB_SCRIPT_MIAO,\n-    HB_SCRIPT_SHARADA,\n-    HB_SCRIPT_SORA_SOMPENG,\n-    HB_SCRIPT_TAKRI,\n-    HB_SCRIPT_UNKNOWN,\n-    HB_SCRIPT_BASSA_VAH,\n-    HB_SCRIPT_CAUCASIAN_ALBANIAN,\n-    HB_SCRIPT_DUPLOYAN,\n-    HB_SCRIPT_ELBASAN,\n-    HB_SCRIPT_GRANTHA,\n-    HB_SCRIPT_KHOJKI,\n-    HB_SCRIPT_KHUDAWADI,\n-    HB_SCRIPT_LINEAR_A,\n-    HB_SCRIPT_MAHAJANI,\n-    HB_SCRIPT_MANICHAEAN,\n-    HB_SCRIPT_MENDE_KIKAKUI,\n-    HB_SCRIPT_MODI,\n-    HB_SCRIPT_MRO,\n-    HB_SCRIPT_NABATAEAN,\n-    HB_SCRIPT_OLD_NORTH_ARABIAN,\n-    HB_SCRIPT_OLD_PERMIC,\n-    HB_SCRIPT_PAHAWH_HMONG,\n-    HB_SCRIPT_PALMYRENE,\n-    HB_SCRIPT_PAU_CIN_HAU,\n-    HB_SCRIPT_PSALTER_PAHLAVI,\n-    HB_SCRIPT_SIDDHAM,\n-    HB_SCRIPT_TIRHUTA,\n-    HB_SCRIPT_WARANG_CITI,\n-    HB_SCRIPT_AHOM,\n-    HB_SCRIPT_ANATOLIAN_HIEROGLYPHS,\n-    HB_SCRIPT_HATRAN,\n-    HB_SCRIPT_MULTANI,\n-    HB_SCRIPT_OLD_HUNGARIAN,\n-    HB_SCRIPT_SIGNWRITING,\n-    HB_SCRIPT_ADLAM,\n-    HB_SCRIPT_BHAIKSUKI,\n-    HB_SCRIPT_MARCHEN,\n-    HB_SCRIPT_NEWA,\n-    HB_SCRIPT_OSAGE,\n-    HB_SCRIPT_TANGUT,\n-    HB_SCRIPT_MASARAM_GONDI,\n-    HB_SCRIPT_NUSHU,\n-    HB_SCRIPT_SOYOMBO,\n-    HB_SCRIPT_ZANABAZAR_SQUARE,\n-    HB_SCRIPT_DOGRA,\n-    HB_SCRIPT_GUNJALA_GONDI,\n-    HB_SCRIPT_HANIFI_ROHINGYA,\n-    HB_SCRIPT_MAKASAR,\n-    HB_SCRIPT_MEDEFAIDRIN,\n-    HB_SCRIPT_OLD_SOGDIAN,\n-    HB_SCRIPT_SOGDIAN,\n-};\n-\n-static hb_unicode_combining_class_t\n-hb_ucdn_combining_class(hb_unicode_funcs_t *ufuncs HB_UNUSED,\n-                        hb_codepoint_t unicode,\n-                        void *user_data HB_UNUSED)\n-{\n-    return (hb_unicode_combining_class_t) ucdn_get_combining_class(unicode);\n-}\n-\n-static hb_unicode_general_category_t\n-hb_ucdn_general_category(hb_unicode_funcs_t *ufuncs HB_UNUSED,\n-                         hb_codepoint_t unicode,\n-                         void *user_data HB_UNUSED)\n-{\n-    return (hb_unicode_general_category_t)ucdn_get_general_category(unicode);\n-}\n-\n-static hb_codepoint_t\n-hb_ucdn_mirroring(hb_unicode_funcs_t *ufuncs HB_UNUSED,\n-                  hb_codepoint_t unicode,\n-                  void *user_data HB_UNUSED)\n-{\n-    return ucdn_mirror(unicode);\n-}\n-\n-static hb_script_t\n-hb_ucdn_script(hb_unicode_funcs_t *ufuncs HB_UNUSED,\n-               hb_codepoint_t unicode,\n-               void *user_data HB_UNUSED)\n-{\n-    return ucdn_script_translate[ucdn_get_script(unicode)];\n-}\n-\n-static hb_bool_t\n-hb_ucdn_compose(hb_unicode_funcs_t *ufuncs HB_UNUSED,\n-                hb_codepoint_t a, hb_codepoint_t b, hb_codepoint_t *ab,\n-                void *user_data HB_UNUSED)\n-{\n-    return ucdn_compose(ab, a, b);\n-}\n-\n-static hb_bool_t\n-hb_ucdn_decompose(hb_unicode_funcs_t *ufuncs HB_UNUSED,\n-                  hb_codepoint_t ab, hb_codepoint_t *a, hb_codepoint_t *b,\n-                  void *user_data HB_UNUSED)\n-{\n-    return ucdn_decompose(ab, a, b);\n-}\n-\n-\n-#if HB_USE_ATEXIT\n-static void free_static_ucdn_funcs ();\n-#endif\n-\n-static struct hb_ucdn_unicode_funcs_lazy_loader_t : hb_unicode_funcs_lazy_loader_t<hb_ucdn_unicode_funcs_lazy_loader_t>\n-{\n-  static hb_unicode_funcs_t *create ()\n-  {\n-    hb_unicode_funcs_t *funcs = hb_unicode_funcs_create (nullptr);\n-\n-    hb_unicode_funcs_set_combining_class_func (funcs, hb_ucdn_combining_class, nullptr, nullptr);\n-    hb_unicode_funcs_set_general_category_func (funcs, hb_ucdn_general_category, nullptr, nullptr);\n-    hb_unicode_funcs_set_mirroring_func (funcs, hb_ucdn_mirroring, nullptr, nullptr);\n-    hb_unicode_funcs_set_script_func (funcs, hb_ucdn_script, nullptr, nullptr);\n-    hb_unicode_funcs_set_compose_func (funcs, hb_ucdn_compose, nullptr, nullptr);\n-    hb_unicode_funcs_set_decompose_func (funcs, hb_ucdn_decompose, nullptr, nullptr);\n-\n-    hb_unicode_funcs_make_immutable (funcs);\n-\n-#if HB_USE_ATEXIT\n-    atexit (free_static_ucdn_funcs);\n-#endif\n-\n-    return funcs;\n-  }\n-} static_ucdn_funcs;\n-\n-#if HB_USE_ATEXIT\n-static\n-void free_static_ucdn_funcs ()\n-{\n-  static_ucdn_funcs.free_instance ();\n-}\n-#endif\n-\n-extern \"C\" HB_INTERNAL\n-hb_unicode_funcs_t *\n-hb_ucdn_get_unicode_funcs ();\n-\n-hb_unicode_funcs_t *\n-hb_ucdn_get_unicode_funcs ()\n-{\n-  return static_ucdn_funcs.get_unconst ();\n-}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ucdn.cc","additions":0,"deletions":268,"binary":false,"changes":268,"status":"deleted"},{"patch":"@@ -1,360 +0,0 @@\n-\/*\n- * Copyright (C) 2012 Grigori Goronzy <greg@kinoho.net>\n- *\n- * Permission to use, copy, modify, and\/or distribute this software for any\n- * purpose with or without fee is hereby granted, provided that the above\n- * copyright notice and this permission notice appear in all copies.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n- * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n- * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n- * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n- *\/\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <stdint.h>\n-#include \"ucdn.h\"\n-\n-typedef struct {\n-    unsigned char category;\n-    unsigned char combining;\n-    unsigned char bidi_class;\n-    unsigned char east_asian_width;\n-    unsigned char script;\n-    unsigned char linebreak_class;\n-} UCDRecord;\n-\n-typedef struct {\n-    unsigned short from, to;\n-} MirrorPair;\n-\n-typedef struct {\n-  unsigned short from, to;\n-  unsigned char type;\n-} BracketPair;\n-\n-typedef struct {\n-    unsigned int start;\n-    short count, index;\n-} Reindex;\n-\n-#include \"ucdn_db.h\"\n-\n-\/* constants required for Hangul (de)composition *\/\n-#define SBASE 0xAC00\n-#define LBASE 0x1100\n-#define VBASE 0x1161\n-#define TBASE 0x11A7\n-#define SCOUNT 11172\n-#define LCOUNT 19\n-#define VCOUNT 21\n-#define TCOUNT 28\n-#define NCOUNT (VCOUNT * TCOUNT)\n-\n-static const UCDRecord *get_ucd_record(uint32_t code)\n-{\n-    int index, offset;\n-\n-    if (code >= 0x110000)\n-        index = 0;\n-    else {\n-        index  = index0[code >> (SHIFT1+SHIFT2)] << SHIFT1;\n-        offset = (code >> SHIFT2) & ((1<<SHIFT1) - 1);\n-        index  = index1[index + offset] << SHIFT2;\n-        offset = code & ((1<<SHIFT2) - 1);\n-        index  = index2[index + offset];\n-    }\n-\n-    return &ucd_records[index];\n-}\n-\n-static const unsigned short *get_decomp_record(uint32_t code)\n-{\n-    int index, offset;\n-\n-    if (code >= 0x110000)\n-        index = 0;\n-    else {\n-        index  = decomp_index0[code >> (DECOMP_SHIFT1+DECOMP_SHIFT2)]\n-            << DECOMP_SHIFT1;\n-        offset = (code >> DECOMP_SHIFT2) & ((1<<DECOMP_SHIFT1) - 1);\n-        index  = decomp_index1[index + offset] << DECOMP_SHIFT2;\n-        offset = code & ((1<<DECOMP_SHIFT2) - 1);\n-        index  = decomp_index2[index + offset];\n-    }\n-\n-    return &decomp_data[index];\n-}\n-\n-static int compare_reindex(const void *a, const void *b)\n-{\n-    Reindex *ra = (Reindex *)a;\n-    Reindex *rb = (Reindex *)b;\n-\n-    if (ra->start < rb->start)\n-        return -1;\n-    else if (ra->start > (rb->start + rb->count))\n-        return 1;\n-    else\n-        return 0;\n-}\n-\n-static int get_comp_index(uint32_t code, const Reindex *idx, size_t len)\n-{\n-    Reindex *res;\n-    Reindex r = {0, 0, 0};\n-    r.start = code;\n-    res = (Reindex *) bsearch(&r, idx, len, sizeof(Reindex), compare_reindex);\n-\n-    if (res != NULL)\n-        return res->index + (code - res->start);\n-    else\n-        return -1;\n-}\n-\n-static int compare_mp(const void *a, const void *b)\n-{\n-    MirrorPair *mpa = (MirrorPair *)a;\n-    MirrorPair *mpb = (MirrorPair *)b;\n-    return mpa->from - mpb->from;\n-}\n-\n-static int compare_bp(const void *a, const void *b)\n-{\n-    BracketPair *bpa = (BracketPair *)a;\n-    BracketPair *bpb = (BracketPair *)b;\n-    return bpa->from - bpb->from;\n-}\n-\n-static BracketPair *search_bp(uint32_t code)\n-{\n-    BracketPair bp = {0,0,2};\n-    BracketPair *res;\n-\n-    bp.from = code;\n-    res = (BracketPair *) bsearch(&bp, bracket_pairs, BIDI_BRACKET_LEN,\n-                                 sizeof(BracketPair), compare_bp);\n-    return res;\n-}\n-\n-static int hangul_pair_decompose(uint32_t code, uint32_t *a, uint32_t *b)\n-{\n-    int si = code - SBASE;\n-\n-    if (si < 0 || si >= SCOUNT)\n-        return 0;\n-\n-    if (si % TCOUNT) {\n-        \/* LV,T *\/\n-        *a = SBASE + (si \/ TCOUNT) * TCOUNT;\n-        *b = TBASE + (si % TCOUNT);\n-        return 3;\n-    } else {\n-        \/* L,V *\/\n-        *a = LBASE + (si \/ NCOUNT);\n-        *b = VBASE + (si % NCOUNT) \/ TCOUNT;\n-        return 2;\n-    }\n-}\n-\n-static int hangul_pair_compose(uint32_t *code, uint32_t a, uint32_t b)\n-{\n-    if (a >= SBASE && a < (SBASE + SCOUNT) && b >= TBASE && b < (TBASE + TCOUNT)) {\n-        \/* LV,T *\/\n-        *code = a + (b - TBASE);\n-        return 3;\n-    } else if (a >= LBASE && a < (LBASE + LCOUNT) && b >= VBASE && b < (VBASE + VCOUNT)) {\n-        \/* L,V *\/\n-        int li = a - LBASE;\n-        int vi = b - VBASE;\n-        *code = SBASE + li * NCOUNT + vi * TCOUNT;\n-        return 2;\n-    } else {\n-        return 0;\n-    }\n-}\n-\n-static uint32_t decode_utf16(const unsigned short **code_ptr)\n-{\n-    const unsigned short *code = *code_ptr;\n-\n-    if (code[0] < 0xd800 || code[0] > 0xdc00) {\n-        *code_ptr += 1;\n-        return (uint32_t)code[0];\n-    } else {\n-        *code_ptr += 2;\n-        return 0x10000 + ((uint32_t)code[1] - 0xdc00) +\n-            (((uint32_t)code[0] - 0xd800) << 10);\n-    }\n-}\n-\n-const char *ucdn_get_unicode_version(void)\n-{\n-    return UNIDATA_VERSION;\n-}\n-\n-int ucdn_get_combining_class(uint32_t code)\n-{\n-    return get_ucd_record(code)->combining;\n-}\n-\n-int ucdn_get_east_asian_width(uint32_t code)\n-{\n-    return get_ucd_record(code)->east_asian_width;\n-}\n-\n-int ucdn_get_general_category(uint32_t code)\n-{\n-    return get_ucd_record(code)->category;\n-}\n-\n-int ucdn_get_bidi_class(uint32_t code)\n-{\n-    return get_ucd_record(code)->bidi_class;\n-}\n-\n-int ucdn_get_mirrored(uint32_t code)\n-{\n-    return ucdn_mirror(code) != code;\n-}\n-\n-int ucdn_get_script(uint32_t code)\n-{\n-    return get_ucd_record(code)->script;\n-}\n-\n-int ucdn_get_linebreak_class(uint32_t code)\n-{\n-    return get_ucd_record(code)->linebreak_class;\n-}\n-\n-int ucdn_get_resolved_linebreak_class(uint32_t code)\n-{\n-    const UCDRecord *record = get_ucd_record(code);\n-\n-    switch (record->linebreak_class)\n-    {\n-    case UCDN_LINEBREAK_CLASS_AI:\n-    case UCDN_LINEBREAK_CLASS_SG:\n-    case UCDN_LINEBREAK_CLASS_XX:\n-        return UCDN_LINEBREAK_CLASS_AL;\n-\n-    case UCDN_LINEBREAK_CLASS_SA:\n-        if (record->category == UCDN_GENERAL_CATEGORY_MC ||\n-                record->category == UCDN_GENERAL_CATEGORY_MN)\n-            return UCDN_LINEBREAK_CLASS_CM;\n-        return UCDN_LINEBREAK_CLASS_AL;\n-\n-    case UCDN_LINEBREAK_CLASS_CJ:\n-        return UCDN_LINEBREAK_CLASS_NS;\n-\n-    case UCDN_LINEBREAK_CLASS_CB:\n-        return UCDN_LINEBREAK_CLASS_B2;\n-\n-    case UCDN_LINEBREAK_CLASS_NL:\n-        return UCDN_LINEBREAK_CLASS_BK;\n-\n-    default:\n-        return record->linebreak_class;\n-    }\n-}\n-\n-uint32_t ucdn_mirror(uint32_t code)\n-{\n-    MirrorPair mp = {0};\n-    MirrorPair *res;\n-\n-    mp.from = code;\n-    res = (MirrorPair *) bsearch(&mp, mirror_pairs, BIDI_MIRROR_LEN,\n-                                sizeof(MirrorPair), compare_mp);\n-\n-    if (res == NULL)\n-        return code;\n-    else\n-        return res->to;\n-}\n-\n-uint32_t ucdn_paired_bracket(uint32_t code)\n-{\n-    BracketPair *res = search_bp(code);\n-    if (res == NULL)\n-        return code;\n-    else\n-        return res->to;\n-}\n-\n-int ucdn_paired_bracket_type(uint32_t code)\n-{\n-    BracketPair *res = search_bp(code);\n-    if (res == NULL)\n-        return UCDN_BIDI_PAIRED_BRACKET_TYPE_NONE;\n-    else\n-        return res->type;\n-}\n-\n-int ucdn_decompose(uint32_t code, uint32_t *a, uint32_t *b)\n-{\n-    const unsigned short *rec;\n-    int len;\n-\n-    if (hangul_pair_decompose(code, a, b))\n-        return 1;\n-\n-    rec = get_decomp_record(code);\n-    len = rec[0] >> 8;\n-\n-    if ((rec[0] & 0xff) != 0 || len == 0)\n-        return 0;\n-\n-    rec++;\n-    *a = decode_utf16(&rec);\n-    if (len > 1)\n-        *b = decode_utf16(&rec);\n-    else\n-        *b = 0;\n-\n-    return 1;\n-}\n-\n-int ucdn_compose(uint32_t *code, uint32_t a, uint32_t b)\n-{\n-    int l, r, index, indexi, offset;\n-\n-    if (hangul_pair_compose(code, a, b))\n-        return 1;\n-\n-    l = get_comp_index(a, nfc_first, sizeof(nfc_first) \/ sizeof(Reindex));\n-    r = get_comp_index(b, nfc_last, sizeof(nfc_last) \/ sizeof(Reindex));\n-\n-    if (l < 0 || r < 0)\n-        return 0;\n-\n-    indexi = l * TOTAL_LAST + r;\n-    index  = comp_index0[indexi >> (COMP_SHIFT1+COMP_SHIFT2)] << COMP_SHIFT1;\n-    offset = (indexi >> COMP_SHIFT2) & ((1<<COMP_SHIFT1) - 1);\n-    index  = comp_index1[index + offset] << COMP_SHIFT2;\n-    offset = indexi & ((1<<COMP_SHIFT2) - 1);\n-    *code  = comp_data[index + offset];\n-\n-    return *code != 0;\n-}\n-\n-int ucdn_compat_decompose(uint32_t code, uint32_t *decomposed)\n-{\n-    int i, len;\n-    const unsigned short *rec = get_decomp_record(code);\n-    len = rec[0] >> 8;\n-\n-    if (len == 0)\n-        return 0;\n-\n-    rec++;\n-    for (i = 0; i < len; i++)\n-        decomposed[i] = decode_utf16(&rec);\n-\n-    return len;\n-}\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ucdn\/ucdn.c","additions":0,"deletions":360,"binary":false,"changes":360,"status":"deleted"},{"patch":"@@ -1,461 +0,0 @@\n-\/*\n- * Copyright (C) 2012 Grigori Goronzy <greg@kinoho.net>\n- *\n- * Permission to use, copy, modify, and\/or distribute this software for any\n- * purpose with or without fee is hereby granted, provided that the above\n- * copyright notice and this permission notice appear in all copies.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n- * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n- * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n- * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n- *\/\n-\n-#ifndef UCDN_H\n-#define UCDN_H\n-\n-\n-\n-#if defined(__GNUC__) && (__GNUC__ >= 4) && !defined(__MINGW32__)\n-# define HB_BEGIN_VISIBILITY _Pragma (\"GCC visibility push(hidden)\")\n-# define HB_END_VISIBILITY _Pragma (\"GCC visibility pop\")\n-#else\n-# define HB_BEGIN_VISIBILITY\n-# define HB_END_VISIBILITY\n-#endif\n-#ifdef __cplusplus\n-# define HB_BEGIN_HEADER  extern \"C\" { HB_BEGIN_VISIBILITY\n-# define HB_END_HEADER  HB_END_VISIBILITY }\n-#else\n-# define HB_BEGIN_HEADER  HB_BEGIN_VISIBILITY\n-# define HB_END_HEADER  HB_END_VISIBILITY\n-#endif\n-\n-HB_BEGIN_HEADER\n-\n-#if defined (_SVR4) || defined (SVR4) || defined (__OpenBSD__) || \\\n-    defined (_sgi) || defined (__sun) || defined (sun) || \\\n-    defined (__digital__) || defined (__HP_cc)\n-#  include <inttypes.h>\n-#elif defined (_AIX)\n-#  include <sys\/inttypes.h>\n-#elif defined (_MSC_VER) && _MSC_VER < 1600\n-\/* VS 2010 (_MSC_VER 1600) has stdint.h *\/\n-typedef __int8 int8_t;\n-typedef unsigned __int8 uint8_t;\n-typedef __int16 int16_t;\n-typedef unsigned __int16 uint16_t;\n-typedef __int32 int32_t;\n-typedef unsigned __int32 uint32_t;\n-typedef __int64 int64_t;\n-typedef unsigned __int64 uint64_t;\n-#else\n-#  include <stdint.h>\n-#endif\n-\n-\n-#define UCDN_EAST_ASIAN_F 0\n-#define UCDN_EAST_ASIAN_H 1\n-#define UCDN_EAST_ASIAN_W 2\n-#define UCDN_EAST_ASIAN_NA 3\n-#define UCDN_EAST_ASIAN_A 4\n-#define UCDN_EAST_ASIAN_N 5\n-\n-#define UCDN_SCRIPT_COMMON 0\n-#define UCDN_SCRIPT_LATIN 1\n-#define UCDN_SCRIPT_GREEK 2\n-#define UCDN_SCRIPT_CYRILLIC 3\n-#define UCDN_SCRIPT_ARMENIAN 4\n-#define UCDN_SCRIPT_HEBREW 5\n-#define UCDN_SCRIPT_ARABIC 6\n-#define UCDN_SCRIPT_SYRIAC 7\n-#define UCDN_SCRIPT_THAANA 8\n-#define UCDN_SCRIPT_DEVANAGARI 9\n-#define UCDN_SCRIPT_BENGALI 10\n-#define UCDN_SCRIPT_GURMUKHI 11\n-#define UCDN_SCRIPT_GUJARATI 12\n-#define UCDN_SCRIPT_ORIYA 13\n-#define UCDN_SCRIPT_TAMIL 14\n-#define UCDN_SCRIPT_TELUGU 15\n-#define UCDN_SCRIPT_KANNADA 16\n-#define UCDN_SCRIPT_MALAYALAM 17\n-#define UCDN_SCRIPT_SINHALA 18\n-#define UCDN_SCRIPT_THAI 19\n-#define UCDN_SCRIPT_LAO 20\n-#define UCDN_SCRIPT_TIBETAN 21\n-#define UCDN_SCRIPT_MYANMAR 22\n-#define UCDN_SCRIPT_GEORGIAN 23\n-#define UCDN_SCRIPT_HANGUL 24\n-#define UCDN_SCRIPT_ETHIOPIC 25\n-#define UCDN_SCRIPT_CHEROKEE 26\n-#define UCDN_SCRIPT_CANADIAN_ABORIGINAL 27\n-#define UCDN_SCRIPT_OGHAM 28\n-#define UCDN_SCRIPT_RUNIC 29\n-#define UCDN_SCRIPT_KHMER 30\n-#define UCDN_SCRIPT_MONGOLIAN 31\n-#define UCDN_SCRIPT_HIRAGANA 32\n-#define UCDN_SCRIPT_KATAKANA 33\n-#define UCDN_SCRIPT_BOPOMOFO 34\n-#define UCDN_SCRIPT_HAN 35\n-#define UCDN_SCRIPT_YI 36\n-#define UCDN_SCRIPT_OLD_ITALIC 37\n-#define UCDN_SCRIPT_GOTHIC 38\n-#define UCDN_SCRIPT_DESERET 39\n-#define UCDN_SCRIPT_INHERITED 40\n-#define UCDN_SCRIPT_TAGALOG 41\n-#define UCDN_SCRIPT_HANUNOO 42\n-#define UCDN_SCRIPT_BUHID 43\n-#define UCDN_SCRIPT_TAGBANWA 44\n-#define UCDN_SCRIPT_LIMBU 45\n-#define UCDN_SCRIPT_TAI_LE 46\n-#define UCDN_SCRIPT_LINEAR_B 47\n-#define UCDN_SCRIPT_UGARITIC 48\n-#define UCDN_SCRIPT_SHAVIAN 49\n-#define UCDN_SCRIPT_OSMANYA 50\n-#define UCDN_SCRIPT_CYPRIOT 51\n-#define UCDN_SCRIPT_BRAILLE 52\n-#define UCDN_SCRIPT_BUGINESE 53\n-#define UCDN_SCRIPT_COPTIC 54\n-#define UCDN_SCRIPT_NEW_TAI_LUE 55\n-#define UCDN_SCRIPT_GLAGOLITIC 56\n-#define UCDN_SCRIPT_TIFINAGH 57\n-#define UCDN_SCRIPT_SYLOTI_NAGRI 58\n-#define UCDN_SCRIPT_OLD_PERSIAN 59\n-#define UCDN_SCRIPT_KHAROSHTHI 60\n-#define UCDN_SCRIPT_BALINESE 61\n-#define UCDN_SCRIPT_CUNEIFORM 62\n-#define UCDN_SCRIPT_PHOENICIAN 63\n-#define UCDN_SCRIPT_PHAGS_PA 64\n-#define UCDN_SCRIPT_NKO 65\n-#define UCDN_SCRIPT_SUNDANESE 66\n-#define UCDN_SCRIPT_LEPCHA 67\n-#define UCDN_SCRIPT_OL_CHIKI 68\n-#define UCDN_SCRIPT_VAI 69\n-#define UCDN_SCRIPT_SAURASHTRA 70\n-#define UCDN_SCRIPT_KAYAH_LI 71\n-#define UCDN_SCRIPT_REJANG 72\n-#define UCDN_SCRIPT_LYCIAN 73\n-#define UCDN_SCRIPT_CARIAN 74\n-#define UCDN_SCRIPT_LYDIAN 75\n-#define UCDN_SCRIPT_CHAM 76\n-#define UCDN_SCRIPT_TAI_THAM 77\n-#define UCDN_SCRIPT_TAI_VIET 78\n-#define UCDN_SCRIPT_AVESTAN 79\n-#define UCDN_SCRIPT_EGYPTIAN_HIEROGLYPHS 80\n-#define UCDN_SCRIPT_SAMARITAN 81\n-#define UCDN_SCRIPT_LISU 82\n-#define UCDN_SCRIPT_BAMUM 83\n-#define UCDN_SCRIPT_JAVANESE 84\n-#define UCDN_SCRIPT_MEETEI_MAYEK 85\n-#define UCDN_SCRIPT_IMPERIAL_ARAMAIC 86\n-#define UCDN_SCRIPT_OLD_SOUTH_ARABIAN 87\n-#define UCDN_SCRIPT_INSCRIPTIONAL_PARTHIAN 88\n-#define UCDN_SCRIPT_INSCRIPTIONAL_PAHLAVI 89\n-#define UCDN_SCRIPT_OLD_TURKIC 90\n-#define UCDN_SCRIPT_KAITHI 91\n-#define UCDN_SCRIPT_BATAK 92\n-#define UCDN_SCRIPT_BRAHMI 93\n-#define UCDN_SCRIPT_MANDAIC 94\n-#define UCDN_SCRIPT_CHAKMA 95\n-#define UCDN_SCRIPT_MEROITIC_CURSIVE 96\n-#define UCDN_SCRIPT_MEROITIC_HIEROGLYPHS 97\n-#define UCDN_SCRIPT_MIAO 98\n-#define UCDN_SCRIPT_SHARADA 99\n-#define UCDN_SCRIPT_SORA_SOMPENG 100\n-#define UCDN_SCRIPT_TAKRI 101\n-#define UCDN_SCRIPT_UNKNOWN 102\n-#define UCDN_SCRIPT_BASSA_VAH 103\n-#define UCDN_SCRIPT_CAUCASIAN_ALBANIAN 104\n-#define UCDN_SCRIPT_DUPLOYAN 105\n-#define UCDN_SCRIPT_ELBASAN 106\n-#define UCDN_SCRIPT_GRANTHA 107\n-#define UCDN_SCRIPT_KHOJKI 108\n-#define UCDN_SCRIPT_KHUDAWADI 109\n-#define UCDN_SCRIPT_LINEAR_A 110\n-#define UCDN_SCRIPT_MAHAJANI 111\n-#define UCDN_SCRIPT_MANICHAEAN 112\n-#define UCDN_SCRIPT_MENDE_KIKAKUI 113\n-#define UCDN_SCRIPT_MODI 114\n-#define UCDN_SCRIPT_MRO 115\n-#define UCDN_SCRIPT_NABATAEAN 116\n-#define UCDN_SCRIPT_OLD_NORTH_ARABIAN 117\n-#define UCDN_SCRIPT_OLD_PERMIC 118\n-#define UCDN_SCRIPT_PAHAWH_HMONG 119\n-#define UCDN_SCRIPT_PALMYRENE 120\n-#define UCDN_SCRIPT_PAU_CIN_HAU 121\n-#define UCDN_SCRIPT_PSALTER_PAHLAVI 122\n-#define UCDN_SCRIPT_SIDDHAM 123\n-#define UCDN_SCRIPT_TIRHUTA 124\n-#define UCDN_SCRIPT_WARANG_CITI 125\n-#define UCDN_SCRIPT_AHOM 126\n-#define UCDN_SCRIPT_ANATOLIAN_HIEROGLYPHS 127\n-#define UCDN_SCRIPT_HATRAN 128\n-#define UCDN_SCRIPT_MULTANI 129\n-#define UCDN_SCRIPT_OLD_HUNGARIAN 130\n-#define UCDN_SCRIPT_SIGNWRITING 131\n-#define UCDN_SCRIPT_ADLAM 132\n-#define UCDN_SCRIPT_BHAIKSUKI 133\n-#define UCDN_SCRIPT_MARCHEN 134\n-#define UCDN_SCRIPT_NEWA 135\n-#define UCDN_SCRIPT_OSAGE 136\n-#define UCDN_SCRIPT_TANGUT 137\n-#define UCDN_SCRIPT_MASARAM_GONDI 138\n-#define UCDN_SCRIPT_NUSHU 139\n-#define UCDN_SCRIPT_SOYOMBO 140\n-#define UCDN_SCRIPT_ZANABAZAR_SQUARE 141\n-\n-#define UCDN_LINEBREAK_CLASS_OP 0\n-#define UCDN_LINEBREAK_CLASS_CL 1\n-#define UCDN_LINEBREAK_CLASS_CP 2\n-#define UCDN_LINEBREAK_CLASS_QU 3\n-#define UCDN_LINEBREAK_CLASS_GL 4\n-#define UCDN_LINEBREAK_CLASS_NS 5\n-#define UCDN_LINEBREAK_CLASS_EX 6\n-#define UCDN_LINEBREAK_CLASS_SY 7\n-#define UCDN_LINEBREAK_CLASS_IS 8\n-#define UCDN_LINEBREAK_CLASS_PR 9\n-#define UCDN_LINEBREAK_CLASS_PO 10\n-#define UCDN_LINEBREAK_CLASS_NU 11\n-#define UCDN_LINEBREAK_CLASS_AL 12\n-#define UCDN_LINEBREAK_CLASS_HL 13\n-#define UCDN_LINEBREAK_CLASS_ID 14\n-#define UCDN_LINEBREAK_CLASS_IN 15\n-#define UCDN_LINEBREAK_CLASS_HY 16\n-#define UCDN_LINEBREAK_CLASS_BA 17\n-#define UCDN_LINEBREAK_CLASS_BB 18\n-#define UCDN_LINEBREAK_CLASS_B2 19\n-#define UCDN_LINEBREAK_CLASS_ZW 20\n-#define UCDN_LINEBREAK_CLASS_CM 21\n-#define UCDN_LINEBREAK_CLASS_WJ 22\n-#define UCDN_LINEBREAK_CLASS_H2 23\n-#define UCDN_LINEBREAK_CLASS_H3 24\n-#define UCDN_LINEBREAK_CLASS_JL 25\n-#define UCDN_LINEBREAK_CLASS_JV 26\n-#define UCDN_LINEBREAK_CLASS_JT 27\n-#define UCDN_LINEBREAK_CLASS_RI 28\n-#define UCDN_LINEBREAK_CLASS_AI 29\n-#define UCDN_LINEBREAK_CLASS_BK 30\n-#define UCDN_LINEBREAK_CLASS_CB 31\n-#define UCDN_LINEBREAK_CLASS_CJ 32\n-#define UCDN_LINEBREAK_CLASS_CR 33\n-#define UCDN_LINEBREAK_CLASS_LF 34\n-#define UCDN_LINEBREAK_CLASS_NL 35\n-#define UCDN_LINEBREAK_CLASS_SA 36\n-#define UCDN_LINEBREAK_CLASS_SG 37\n-#define UCDN_LINEBREAK_CLASS_SP 38\n-#define UCDN_LINEBREAK_CLASS_XX 39\n-#define UCDN_LINEBREAK_CLASS_ZWJ 40\n-#define UCDN_LINEBREAK_CLASS_EB 41\n-#define UCDN_LINEBREAK_CLASS_EM 42\n-\n-#define UCDN_GENERAL_CATEGORY_CC 0\n-#define UCDN_GENERAL_CATEGORY_CF 1\n-#define UCDN_GENERAL_CATEGORY_CN 2\n-#define UCDN_GENERAL_CATEGORY_CO 3\n-#define UCDN_GENERAL_CATEGORY_CS 4\n-#define UCDN_GENERAL_CATEGORY_LL 5\n-#define UCDN_GENERAL_CATEGORY_LM 6\n-#define UCDN_GENERAL_CATEGORY_LO 7\n-#define UCDN_GENERAL_CATEGORY_LT 8\n-#define UCDN_GENERAL_CATEGORY_LU 9\n-#define UCDN_GENERAL_CATEGORY_MC 10\n-#define UCDN_GENERAL_CATEGORY_ME 11\n-#define UCDN_GENERAL_CATEGORY_MN 12\n-#define UCDN_GENERAL_CATEGORY_ND 13\n-#define UCDN_GENERAL_CATEGORY_NL 14\n-#define UCDN_GENERAL_CATEGORY_NO 15\n-#define UCDN_GENERAL_CATEGORY_PC 16\n-#define UCDN_GENERAL_CATEGORY_PD 17\n-#define UCDN_GENERAL_CATEGORY_PE 18\n-#define UCDN_GENERAL_CATEGORY_PF 19\n-#define UCDN_GENERAL_CATEGORY_PI 20\n-#define UCDN_GENERAL_CATEGORY_PO 21\n-#define UCDN_GENERAL_CATEGORY_PS 22\n-#define UCDN_GENERAL_CATEGORY_SC 23\n-#define UCDN_GENERAL_CATEGORY_SK 24\n-#define UCDN_GENERAL_CATEGORY_SM 25\n-#define UCDN_GENERAL_CATEGORY_SO 26\n-#define UCDN_GENERAL_CATEGORY_ZL 27\n-#define UCDN_GENERAL_CATEGORY_ZP 28\n-#define UCDN_GENERAL_CATEGORY_ZS 29\n-\n-#define UCDN_BIDI_CLASS_L 0\n-#define UCDN_BIDI_CLASS_LRE 1\n-#define UCDN_BIDI_CLASS_LRO 2\n-#define UCDN_BIDI_CLASS_R 3\n-#define UCDN_BIDI_CLASS_AL 4\n-#define UCDN_BIDI_CLASS_RLE 5\n-#define UCDN_BIDI_CLASS_RLO 6\n-#define UCDN_BIDI_CLASS_PDF 7\n-#define UCDN_BIDI_CLASS_EN 8\n-#define UCDN_BIDI_CLASS_ES 9\n-#define UCDN_BIDI_CLASS_ET 10\n-#define UCDN_BIDI_CLASS_AN 11\n-#define UCDN_BIDI_CLASS_CS 12\n-#define UCDN_BIDI_CLASS_NSM 13\n-#define UCDN_BIDI_CLASS_BN 14\n-#define UCDN_BIDI_CLASS_B 15\n-#define UCDN_BIDI_CLASS_S 16\n-#define UCDN_BIDI_CLASS_WS 17\n-#define UCDN_BIDI_CLASS_ON 18\n-#define UCDN_BIDI_CLASS_LRI 19\n-#define UCDN_BIDI_CLASS_RLI 20\n-#define UCDN_BIDI_CLASS_FSI 21\n-#define UCDN_BIDI_CLASS_PDI 22\n-\n-#define UCDN_BIDI_PAIRED_BRACKET_TYPE_OPEN 0\n-#define UCDN_BIDI_PAIRED_BRACKET_TYPE_CLOSE 1\n-#define UCDN_BIDI_PAIRED_BRACKET_TYPE_NONE 2\n-\n-\/**\n- * Return version of the Unicode database.\n- *\n- * @return Unicode database version\n- *\/\n-const char *ucdn_get_unicode_version(void);\n-\n-\/**\n- * Get combining class of a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @return combining class value, as defined in UAX#44\n- *\/\n-int ucdn_get_combining_class(uint32_t code);\n-\n-\/**\n- * Get east-asian width of a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @return value according to UCDN_EAST_ASIAN_* and as defined in UAX#11.\n- *\/\n-int ucdn_get_east_asian_width(uint32_t code);\n-\n-\/**\n- * Get general category of a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @return value according to UCDN_GENERAL_CATEGORY_* and as defined in\n- * UAX#44.\n- *\/\n-int ucdn_get_general_category(uint32_t code);\n-\n-\/**\n- * Get bidirectional class of a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @return value according to UCDN_BIDI_CLASS_* and as defined in UAX#44.\n- *\/\n-int ucdn_get_bidi_class(uint32_t code);\n-\n-\/**\n- * Get script of a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @return value according to UCDN_SCRIPT_* and as defined in UAX#24.\n- *\/\n-int ucdn_get_script(uint32_t code);\n-\n-\/**\n- * Get unresolved linebreak class of a codepoint. This does not take\n- * rule LB1 of UAX#14 into account. See ucdn_get_resolved_linebreak_class()\n- * for resolved linebreak classes.\n- *\n- * @param code Unicode codepoint\n- * @return value according to UCDN_LINEBREAK_* and as defined in UAX#14.\n- *\/\n-int ucdn_get_linebreak_class(uint32_t code);\n-\n-\/**\n- * Get resolved linebreak class of a codepoint. This resolves characters\n- * in the AI, SG, XX, SA and CJ classes according to rule LB1 of UAX#14.\n- * In addition the CB class is resolved as the equivalent B2 class and\n- * the NL class is resolved as the equivalent BK class.\n- *\n- * @param code Unicode codepoint\n- * @return value according to UCDN_LINEBREAK_* and as defined in UAX#14.\n- *\/\n-int ucdn_get_resolved_linebreak_class(uint32_t code);\n-\n-\/**\n- * Check if codepoint can be mirrored.\n- *\n- * @param code Unicode codepoint\n- * @return 1 if mirrored character exists, otherwise 0\n- *\/\n-int ucdn_get_mirrored(uint32_t code);\n-\n-\/**\n- * Mirror a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @return mirrored codepoint or the original codepoint if no\n- * mirrored character exists\n- *\/\n-uint32_t ucdn_mirror(uint32_t code);\n-\n-\/**\n- * Get paired bracket for a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @return paired bracket codepoint or the original codepoint if no\n- * paired bracket character exists\n- *\/\n-uint32_t ucdn_paired_bracket(uint32_t code);\n-\n-\/**\n- * Get paired bracket type for a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @return value according to UCDN_BIDI_PAIRED_BRACKET_TYPE_* and as defined\n- * in UAX#9.\n- *\n- *\/\n-int ucdn_paired_bracket_type(uint32_t code);\n-\n-\/**\n- * Pairwise canonical decomposition of a codepoint. This includes\n- * Hangul Jamo decomposition (see chapter 3.12 of the Unicode core\n- * specification).\n- *\n- * Hangul is decomposed into L and V jamos for LV forms, and an\n- * LV precomposed syllable and a T jamo for LVT forms.\n- *\n- * @param code Unicode codepoint\n- * @param a filled with first codepoint of decomposition\n- * @param b filled with second codepoint of decomposition, or 0\n- * @return success\n- *\/\n-int ucdn_decompose(uint32_t code, uint32_t *a, uint32_t *b);\n-\n-\/**\n- * Compatibility decomposition of a codepoint.\n- *\n- * @param code Unicode codepoint\n- * @param decomposed filled with decomposition, must be able to hold 18\n- * characters\n- * @return length of decomposition or 0 in case none exists\n- *\/\n-int ucdn_compat_decompose(uint32_t code, uint32_t *decomposed);\n-\n-\/**\n- * Pairwise canonical composition of two codepoints. This includes\n- * Hangul Jamo composition (see chapter 3.12 of the Unicode core\n- * specification).\n- *\n- * Hangul composition expects either L and V jamos, or an LV\n- * precomposed syllable and a T jamo. This is exactly the inverse\n- * of pairwise Hangul decomposition.\n- *\n- * @param code filled with composition\n- * @param a first codepoint\n- * @param b second codepoint\n- * @return success\n- *\/\n-int ucdn_compose(uint32_t *code, uint32_t a, uint32_t b);\n-\n-HB_END_HEADER\n-\n-#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ucdn\/ucdn.h","additions":0,"deletions":461,"binary":false,"changes":461,"status":"deleted"},{"patch":"@@ -1,5730 +0,0 @@\n-\/* this file was generated by makeunicodedata.py 3.2 *\/\n-\n-#define UNIDATA_VERSION \"11.0.0\"\n-\/* a list of unique database records *\/\n-static const UCDRecord ucd_records[] = {\n-    {2, 0, 18, 5, 102, 39},\n-    {0, 0, 14, 5, 0, 21},\n-    {0, 0, 16, 5, 0, 17},\n-    {0, 0, 15, 5, 0, 34},\n-    {0, 0, 16, 5, 0, 30},\n-    {0, 0, 17, 5, 0, 30},\n-    {0, 0, 15, 5, 0, 33},\n-    {0, 0, 15, 5, 0, 21},\n-    {0, 0, 16, 5, 0, 21},\n-    {29, 0, 17, 3, 0, 38},\n-    {21, 0, 18, 3, 0, 6},\n-    {21, 0, 18, 3, 0, 3},\n-    {21, 0, 10, 3, 0, 12},\n-    {23, 0, 10, 3, 0, 9},\n-    {21, 0, 10, 3, 0, 10},\n-    {21, 0, 18, 3, 0, 12},\n-    {22, 0, 18, 3, 0, 0},\n-    {18, 0, 18, 3, 0, 2},\n-    {25, 0, 9, 3, 0, 9},\n-    {21, 0, 12, 3, 0, 8},\n-    {17, 0, 9, 3, 0, 16},\n-    {21, 0, 12, 3, 0, 7},\n-    {13, 0, 8, 3, 0, 11},\n-    {21, 0, 18, 3, 0, 8},\n-    {25, 0, 18, 3, 0, 12},\n-    {9, 0, 0, 3, 1, 12},\n-    {21, 0, 18, 3, 0, 9},\n-    {24, 0, 18, 3, 0, 12},\n-    {16, 0, 18, 3, 0, 12},\n-    {5, 0, 0, 3, 1, 12},\n-    {25, 0, 18, 3, 0, 17},\n-    {18, 0, 18, 3, 0, 1},\n-    {0, 0, 15, 5, 0, 35},\n-    {29, 0, 12, 5, 0, 4},\n-    {21, 0, 18, 4, 0, 0},\n-    {23, 0, 10, 3, 0, 10},\n-    {23, 0, 10, 4, 0, 9},\n-    {26, 0, 18, 3, 0, 12},\n-    {21, 0, 18, 4, 0, 29},\n-    {24, 0, 18, 4, 0, 29},\n-    {26, 0, 18, 5, 0, 12},\n-    {7, 0, 0, 4, 1, 29},\n-    {20, 0, 18, 5, 0, 3},\n-    {1, 0, 14, 4, 0, 17},\n-    {26, 0, 18, 4, 0, 12},\n-    {26, 0, 10, 4, 0, 10},\n-    {25, 0, 10, 4, 0, 9},\n-    {15, 0, 8, 4, 0, 29},\n-    {24, 0, 18, 4, 0, 18},\n-    {5, 0, 0, 5, 0, 12},\n-    {19, 0, 18, 5, 0, 3},\n-    {15, 0, 18, 4, 0, 29},\n-    {9, 0, 0, 5, 1, 12},\n-    {9, 0, 0, 4, 1, 12},\n-    {25, 0, 18, 4, 0, 29},\n-    {5, 0, 0, 4, 1, 12},\n-    {5, 0, 0, 5, 1, 12},\n-    {7, 0, 0, 5, 1, 12},\n-    {8, 0, 0, 5, 1, 12},\n-    {6, 0, 0, 5, 1, 12},\n-    {6, 0, 18, 5, 0, 12},\n-    {6, 0, 0, 5, 0, 12},\n-    {24, 0, 18, 5, 0, 12},\n-    {24, 0, 18, 4, 0, 12},\n-    {6, 0, 18, 4, 0, 29},\n-    {6, 0, 18, 5, 0, 18},\n-    {6, 0, 0, 4, 0, 29},\n-    {24, 0, 18, 5, 34, 12},\n-    {12, 230, 13, 4, 40, 21},\n-    {12, 232, 13, 4, 40, 21},\n-    {12, 220, 13, 4, 40, 21},\n-    {12, 216, 13, 4, 40, 21},\n-    {12, 202, 13, 4, 40, 21},\n-    {12, 1, 13, 4, 40, 21},\n-    {12, 240, 13, 4, 40, 21},\n-    {12, 0, 13, 4, 40, 4},\n-    {12, 233, 13, 4, 40, 4},\n-    {12, 234, 13, 4, 40, 4},\n-    {9, 0, 0, 5, 2, 12},\n-    {5, 0, 0, 5, 2, 12},\n-    {24, 0, 18, 5, 2, 12},\n-    {2, 0, 18, 5, 102, 39},\n-    {6, 0, 0, 5, 2, 12},\n-    {21, 0, 18, 5, 0, 8},\n-    {21, 0, 18, 5, 0, 12},\n-    {9, 0, 0, 4, 2, 12},\n-    {5, 0, 0, 4, 2, 12},\n-    {9, 0, 0, 5, 54, 12},\n-    {5, 0, 0, 5, 54, 12},\n-    {25, 0, 18, 5, 2, 12},\n-    {9, 0, 0, 5, 3, 12},\n-    {9, 0, 0, 4, 3, 12},\n-    {5, 0, 0, 4, 3, 12},\n-    {5, 0, 0, 5, 3, 12},\n-    {26, 0, 0, 5, 3, 12},\n-    {12, 230, 13, 5, 3, 21},\n-    {12, 230, 13, 5, 40, 21},\n-    {11, 0, 13, 5, 3, 21},\n-    {9, 0, 0, 5, 4, 12},\n-    {6, 0, 0, 5, 4, 12},\n-    {21, 0, 0, 5, 4, 12},\n-    {5, 0, 0, 5, 4, 12},\n-    {21, 0, 0, 5, 0, 8},\n-    {17, 0, 18, 5, 4, 17},\n-    {26, 0, 18, 5, 4, 12},\n-    {23, 0, 10, 5, 4, 9},\n-    {12, 220, 13, 5, 5, 21},\n-    {12, 230, 13, 5, 5, 21},\n-    {12, 222, 13, 5, 5, 21},\n-    {12, 228, 13, 5, 5, 21},\n-    {12, 10, 13, 5, 5, 21},\n-    {12, 11, 13, 5, 5, 21},\n-    {12, 12, 13, 5, 5, 21},\n-    {12, 13, 13, 5, 5, 21},\n-    {12, 14, 13, 5, 5, 21},\n-    {12, 15, 13, 5, 5, 21},\n-    {12, 16, 13, 5, 5, 21},\n-    {12, 17, 13, 5, 5, 21},\n-    {12, 18, 13, 5, 5, 21},\n-    {12, 19, 13, 5, 5, 21},\n-    {12, 20, 13, 5, 5, 21},\n-    {12, 21, 13, 5, 5, 21},\n-    {12, 22, 13, 5, 5, 21},\n-    {17, 0, 3, 5, 5, 17},\n-    {12, 23, 13, 5, 5, 21},\n-    {21, 0, 3, 5, 5, 12},\n-    {12, 24, 13, 5, 5, 21},\n-    {12, 25, 13, 5, 5, 21},\n-    {21, 0, 3, 5, 5, 6},\n-    {7, 0, 3, 5, 5, 13},\n-    {1, 0, 11, 5, 6, 12},\n-    {1, 0, 11, 5, 0, 12},\n-    {25, 0, 18, 5, 6, 12},\n-    {25, 0, 4, 5, 6, 12},\n-    {21, 0, 10, 5, 6, 10},\n-    {23, 0, 4, 5, 6, 10},\n-    {21, 0, 12, 5, 0, 8},\n-    {21, 0, 4, 5, 6, 8},\n-    {26, 0, 18, 5, 6, 12},\n-    {12, 230, 13, 5, 6, 21},\n-    {12, 30, 13, 5, 6, 21},\n-    {12, 31, 13, 5, 6, 21},\n-    {12, 32, 13, 5, 6, 21},\n-    {21, 0, 4, 5, 0, 6},\n-    {1, 0, 4, 5, 6, 21},\n-    {21, 0, 4, 5, 6, 6},\n-    {7, 0, 4, 5, 6, 12},\n-    {6, 0, 4, 5, 0, 12},\n-    {12, 27, 13, 5, 40, 21},\n-    {12, 28, 13, 5, 40, 21},\n-    {12, 29, 13, 5, 40, 21},\n-    {12, 30, 13, 5, 40, 21},\n-    {12, 31, 13, 5, 40, 21},\n-    {12, 32, 13, 5, 40, 21},\n-    {12, 33, 13, 5, 40, 21},\n-    {12, 34, 13, 5, 40, 21},\n-    {12, 220, 13, 5, 40, 21},\n-    {12, 220, 13, 5, 6, 21},\n-    {13, 0, 11, 5, 6, 11},\n-    {21, 0, 11, 5, 6, 11},\n-    {21, 0, 4, 5, 6, 12},\n-    {12, 35, 13, 5, 40, 21},\n-    {6, 0, 4, 5, 6, 12},\n-    {13, 0, 8, 5, 6, 11},\n-    {26, 0, 4, 5, 6, 12},\n-    {21, 0, 4, 5, 7, 12},\n-    {1, 0, 4, 5, 7, 12},\n-    {7, 0, 4, 5, 7, 12},\n-    {12, 36, 13, 5, 7, 21},\n-    {12, 230, 13, 5, 7, 21},\n-    {12, 220, 13, 5, 7, 21},\n-    {7, 0, 4, 5, 8, 12},\n-    {12, 0, 13, 5, 8, 21},\n-    {13, 0, 3, 5, 65, 11},\n-    {7, 0, 3, 5, 65, 12},\n-    {12, 230, 13, 5, 65, 21},\n-    {12, 220, 13, 5, 65, 21},\n-    {6, 0, 3, 5, 65, 12},\n-    {26, 0, 18, 5, 65, 12},\n-    {21, 0, 18, 5, 65, 12},\n-    {21, 0, 18, 5, 65, 8},\n-    {21, 0, 18, 5, 65, 6},\n-    {23, 0, 3, 5, 65, 9},\n-    {7, 0, 3, 5, 81, 12},\n-    {12, 230, 13, 5, 81, 21},\n-    {6, 0, 3, 5, 81, 12},\n-    {21, 0, 3, 5, 81, 12},\n-    {7, 0, 3, 5, 94, 12},\n-    {12, 220, 13, 5, 94, 21},\n-    {21, 0, 3, 5, 94, 12},\n-    {12, 27, 13, 5, 6, 21},\n-    {12, 28, 13, 5, 6, 21},\n-    {12, 29, 13, 5, 6, 21},\n-    {12, 0, 13, 5, 9, 21},\n-    {10, 0, 0, 5, 9, 21},\n-    {7, 0, 0, 5, 9, 12},\n-    {12, 7, 13, 5, 9, 21},\n-    {12, 9, 13, 5, 9, 21},\n-    {12, 230, 13, 5, 9, 21},\n-    {21, 0, 0, 5, 0, 17},\n-    {13, 0, 0, 5, 9, 11},\n-    {21, 0, 0, 5, 9, 12},\n-    {6, 0, 0, 5, 9, 12},\n-    {7, 0, 0, 5, 10, 12},\n-    {12, 0, 13, 5, 10, 21},\n-    {10, 0, 0, 5, 10, 21},\n-    {12, 7, 13, 5, 10, 21},\n-    {12, 9, 13, 5, 10, 21},\n-    {13, 0, 0, 5, 10, 11},\n-    {23, 0, 10, 5, 10, 10},\n-    {15, 0, 0, 5, 10, 12},\n-    {15, 0, 0, 5, 10, 10},\n-    {26, 0, 0, 5, 10, 12},\n-    {23, 0, 10, 5, 10, 9},\n-    {21, 0, 0, 5, 10, 12},\n-    {12, 230, 13, 5, 10, 21},\n-    {12, 0, 13, 5, 11, 21},\n-    {10, 0, 0, 5, 11, 21},\n-    {7, 0, 0, 5, 11, 12},\n-    {12, 7, 13, 5, 11, 21},\n-    {12, 9, 13, 5, 11, 21},\n-    {13, 0, 0, 5, 11, 11},\n-    {21, 0, 0, 5, 11, 12},\n-    {12, 0, 13, 5, 12, 21},\n-    {10, 0, 0, 5, 12, 21},\n-    {7, 0, 0, 5, 12, 12},\n-    {12, 7, 13, 5, 12, 21},\n-    {12, 9, 13, 5, 12, 21},\n-    {13, 0, 0, 5, 12, 11},\n-    {21, 0, 0, 5, 12, 12},\n-    {23, 0, 10, 5, 12, 9},\n-    {12, 0, 13, 5, 13, 21},\n-    {10, 0, 0, 5, 13, 21},\n-    {7, 0, 0, 5, 13, 12},\n-    {12, 7, 13, 5, 13, 21},\n-    {12, 9, 13, 5, 13, 21},\n-    {13, 0, 0, 5, 13, 11},\n-    {26, 0, 0, 5, 13, 12},\n-    {15, 0, 0, 5, 13, 12},\n-    {12, 0, 13, 5, 14, 21},\n-    {7, 0, 0, 5, 14, 12},\n-    {10, 0, 0, 5, 14, 21},\n-    {12, 9, 13, 5, 14, 21},\n-    {13, 0, 0, 5, 14, 11},\n-    {15, 0, 0, 5, 14, 12},\n-    {26, 0, 18, 5, 14, 12},\n-    {23, 0, 10, 5, 14, 9},\n-    {12, 0, 13, 5, 15, 21},\n-    {10, 0, 0, 5, 15, 21},\n-    {7, 0, 0, 5, 15, 12},\n-    {12, 9, 13, 5, 15, 21},\n-    {12, 84, 13, 5, 15, 21},\n-    {12, 91, 13, 5, 15, 21},\n-    {13, 0, 0, 5, 15, 11},\n-    {15, 0, 18, 5, 15, 12},\n-    {26, 0, 0, 5, 15, 12},\n-    {7, 0, 0, 5, 16, 12},\n-    {12, 0, 13, 5, 16, 21},\n-    {10, 0, 0, 5, 16, 21},\n-    {21, 0, 0, 5, 16, 18},\n-    {12, 7, 13, 5, 16, 21},\n-    {12, 0, 0, 5, 16, 21},\n-    {12, 9, 13, 5, 16, 21},\n-    {13, 0, 0, 5, 16, 11},\n-    {12, 0, 13, 5, 17, 21},\n-    {10, 0, 0, 5, 17, 21},\n-    {7, 0, 0, 5, 17, 12},\n-    {12, 9, 13, 5, 17, 21},\n-    {26, 0, 0, 5, 17, 12},\n-    {15, 0, 0, 5, 17, 12},\n-    {13, 0, 0, 5, 17, 11},\n-    {26, 0, 0, 5, 17, 10},\n-    {10, 0, 0, 5, 18, 21},\n-    {7, 0, 0, 5, 18, 12},\n-    {12, 9, 13, 5, 18, 21},\n-    {12, 0, 13, 5, 18, 21},\n-    {13, 0, 0, 5, 18, 11},\n-    {21, 0, 0, 5, 18, 12},\n-    {7, 0, 0, 5, 19, 36},\n-    {12, 0, 13, 5, 19, 36},\n-    {12, 103, 13, 5, 19, 36},\n-    {12, 9, 13, 5, 19, 36},\n-    {23, 0, 10, 5, 0, 9},\n-    {6, 0, 0, 5, 19, 36},\n-    {12, 107, 13, 5, 19, 36},\n-    {21, 0, 0, 5, 19, 12},\n-    {13, 0, 0, 5, 19, 11},\n-    {21, 0, 0, 5, 19, 17},\n-    {7, 0, 0, 5, 20, 36},\n-    {12, 0, 13, 5, 20, 36},\n-    {12, 118, 13, 5, 20, 36},\n-    {6, 0, 0, 5, 20, 36},\n-    {12, 122, 13, 5, 20, 36},\n-    {13, 0, 0, 5, 20, 11},\n-    {7, 0, 0, 5, 21, 12},\n-    {26, 0, 0, 5, 21, 18},\n-    {21, 0, 0, 5, 21, 18},\n-    {21, 0, 0, 5, 21, 12},\n-    {21, 0, 0, 5, 21, 4},\n-    {21, 0, 0, 5, 21, 17},\n-    {21, 0, 0, 5, 21, 6},\n-    {26, 0, 0, 5, 21, 12},\n-    {12, 220, 13, 5, 21, 21},\n-    {13, 0, 0, 5, 21, 11},\n-    {15, 0, 0, 5, 21, 12},\n-    {26, 0, 0, 5, 21, 17},\n-    {12, 216, 13, 5, 21, 21},\n-    {22, 0, 18, 5, 21, 0},\n-    {18, 0, 18, 5, 21, 1},\n-    {10, 0, 0, 5, 21, 21},\n-    {12, 129, 13, 5, 21, 21},\n-    {12, 130, 13, 5, 21, 21},\n-    {12, 0, 13, 5, 21, 21},\n-    {12, 132, 13, 5, 21, 21},\n-    {10, 0, 0, 5, 21, 17},\n-    {12, 230, 13, 5, 21, 21},\n-    {12, 9, 13, 5, 21, 21},\n-    {26, 0, 0, 5, 0, 12},\n-    {7, 0, 0, 5, 22, 36},\n-    {10, 0, 0, 5, 22, 36},\n-    {12, 0, 13, 5, 22, 36},\n-    {12, 7, 13, 5, 22, 36},\n-    {12, 9, 13, 5, 22, 36},\n-    {13, 0, 0, 5, 22, 11},\n-    {21, 0, 0, 5, 22, 17},\n-    {21, 0, 0, 5, 22, 12},\n-    {12, 220, 13, 5, 22, 36},\n-    {26, 0, 0, 5, 22, 36},\n-    {9, 0, 0, 5, 23, 12},\n-    {5, 0, 0, 5, 23, 12},\n-    {21, 0, 0, 5, 0, 12},\n-    {6, 0, 0, 5, 23, 12},\n-    {7, 0, 0, 2, 24, 25},\n-    {7, 0, 0, 5, 24, 26},\n-    {7, 0, 0, 5, 24, 27},\n-    {7, 0, 0, 5, 25, 12},\n-    {12, 230, 13, 5, 25, 21},\n-    {21, 0, 0, 5, 25, 12},\n-    {21, 0, 0, 5, 25, 17},\n-    {15, 0, 0, 5, 25, 12},\n-    {26, 0, 18, 5, 25, 12},\n-    {9, 0, 0, 5, 26, 12},\n-    {5, 0, 0, 5, 26, 12},\n-    {17, 0, 18, 5, 27, 17},\n-    {7, 0, 0, 5, 27, 12},\n-    {21, 0, 0, 5, 27, 12},\n-    {29, 0, 17, 5, 28, 17},\n-    {7, 0, 0, 5, 28, 12},\n-    {22, 0, 18, 5, 28, 0},\n-    {18, 0, 18, 5, 28, 1},\n-    {7, 0, 0, 5, 29, 12},\n-    {14, 0, 0, 5, 29, 12},\n-    {7, 0, 0, 5, 41, 12},\n-    {12, 0, 13, 5, 41, 21},\n-    {12, 9, 13, 5, 41, 21},\n-    {7, 0, 0, 5, 42, 12},\n-    {12, 0, 13, 5, 42, 21},\n-    {12, 9, 13, 5, 42, 21},\n-    {7, 0, 0, 5, 43, 12},\n-    {12, 0, 13, 5, 43, 21},\n-    {7, 0, 0, 5, 44, 12},\n-    {12, 0, 13, 5, 44, 21},\n-    {7, 0, 0, 5, 30, 36},\n-    {12, 0, 13, 5, 30, 36},\n-    {10, 0, 0, 5, 30, 36},\n-    {12, 9, 13, 5, 30, 36},\n-    {21, 0, 0, 5, 30, 17},\n-    {21, 0, 0, 5, 30, 5},\n-    {6, 0, 0, 5, 30, 36},\n-    {21, 0, 0, 5, 30, 12},\n-    {23, 0, 10, 5, 30, 9},\n-    {12, 230, 13, 5, 30, 36},\n-    {13, 0, 0, 5, 30, 11},\n-    {15, 0, 18, 5, 30, 12},\n-    {21, 0, 18, 5, 31, 12},\n-    {21, 0, 18, 5, 0, 6},\n-    {21, 0, 18, 5, 31, 17},\n-    {21, 0, 18, 5, 0, 17},\n-    {17, 0, 18, 5, 31, 18},\n-    {21, 0, 18, 5, 31, 6},\n-    {12, 0, 13, 5, 31, 21},\n-    {1, 0, 14, 5, 31, 4},\n-    {13, 0, 0, 5, 31, 11},\n-    {7, 0, 0, 5, 31, 12},\n-    {6, 0, 0, 5, 31, 12},\n-    {12, 228, 13, 5, 31, 21},\n-    {7, 0, 0, 5, 45, 12},\n-    {12, 0, 13, 5, 45, 21},\n-    {10, 0, 0, 5, 45, 21},\n-    {12, 222, 13, 5, 45, 21},\n-    {12, 230, 13, 5, 45, 21},\n-    {12, 220, 13, 5, 45, 21},\n-    {26, 0, 18, 5, 45, 12},\n-    {21, 0, 18, 5, 45, 6},\n-    {13, 0, 0, 5, 45, 11},\n-    {7, 0, 0, 5, 46, 36},\n-    {7, 0, 0, 5, 55, 36},\n-    {13, 0, 0, 5, 55, 11},\n-    {15, 0, 0, 5, 55, 36},\n-    {26, 0, 18, 5, 55, 36},\n-    {26, 0, 18, 5, 30, 12},\n-    {7, 0, 0, 5, 53, 12},\n-    {12, 230, 13, 5, 53, 21},\n-    {12, 220, 13, 5, 53, 21},\n-    {10, 0, 0, 5, 53, 21},\n-    {12, 0, 13, 5, 53, 21},\n-    {21, 0, 0, 5, 53, 12},\n-    {7, 0, 0, 5, 77, 36},\n-    {10, 0, 0, 5, 77, 36},\n-    {12, 0, 13, 5, 77, 36},\n-    {12, 9, 13, 5, 77, 36},\n-    {12, 230, 13, 5, 77, 36},\n-    {12, 220, 13, 5, 77, 21},\n-    {13, 0, 0, 5, 77, 11},\n-    {21, 0, 0, 5, 77, 36},\n-    {6, 0, 0, 5, 77, 36},\n-    {11, 0, 13, 5, 40, 21},\n-    {12, 0, 13, 5, 61, 21},\n-    {10, 0, 0, 5, 61, 21},\n-    {7, 0, 0, 5, 61, 12},\n-    {12, 7, 13, 5, 61, 21},\n-    {10, 9, 0, 5, 61, 21},\n-    {13, 0, 0, 5, 61, 11},\n-    {21, 0, 0, 5, 61, 17},\n-    {21, 0, 0, 5, 61, 12},\n-    {26, 0, 0, 5, 61, 12},\n-    {12, 230, 13, 5, 61, 21},\n-    {12, 220, 13, 5, 61, 21},\n-    {12, 0, 13, 5, 66, 21},\n-    {10, 0, 0, 5, 66, 21},\n-    {7, 0, 0, 5, 66, 12},\n-    {10, 9, 0, 5, 66, 21},\n-    {12, 9, 13, 5, 66, 21},\n-    {13, 0, 0, 5, 66, 11},\n-    {7, 0, 0, 5, 92, 12},\n-    {12, 7, 13, 5, 92, 21},\n-    {10, 0, 0, 5, 92, 21},\n-    {12, 0, 13, 5, 92, 21},\n-    {10, 9, 0, 5, 92, 21},\n-    {21, 0, 0, 5, 92, 12},\n-    {7, 0, 0, 5, 67, 12},\n-    {10, 0, 0, 5, 67, 21},\n-    {12, 0, 13, 5, 67, 21},\n-    {12, 7, 13, 5, 67, 21},\n-    {21, 0, 0, 5, 67, 17},\n-    {13, 0, 0, 5, 67, 11},\n-    {13, 0, 0, 5, 68, 11},\n-    {7, 0, 0, 5, 68, 12},\n-    {6, 0, 0, 5, 68, 12},\n-    {21, 0, 0, 5, 68, 17},\n-    {21, 0, 0, 5, 66, 12},\n-    {12, 1, 13, 5, 40, 21},\n-    {10, 0, 0, 5, 0, 21},\n-    {7, 0, 0, 5, 0, 12},\n-    {6, 0, 0, 5, 3, 12},\n-    {12, 234, 13, 5, 40, 21},\n-    {12, 214, 13, 5, 40, 21},\n-    {12, 202, 13, 5, 40, 21},\n-    {12, 232, 13, 5, 40, 21},\n-    {12, 228, 13, 5, 40, 21},\n-    {12, 233, 13, 5, 40, 21},\n-    {8, 0, 0, 5, 2, 12},\n-    {24, 0, 18, 5, 2, 18},\n-    {29, 0, 17, 5, 0, 17},\n-    {29, 0, 17, 5, 0, 4},\n-    {1, 0, 14, 5, 0, 20},\n-    {1, 0, 14, 5, 40, 21},\n-    {1, 0, 14, 5, 40, 40},\n-    {1, 0, 0, 5, 0, 21},\n-    {1, 0, 3, 5, 0, 21},\n-    {17, 0, 18, 4, 0, 17},\n-    {17, 0, 18, 5, 0, 4},\n-    {17, 0, 18, 5, 0, 17},\n-    {17, 0, 18, 4, 0, 19},\n-    {17, 0, 18, 4, 0, 29},\n-    {20, 0, 18, 4, 0, 3},\n-    {19, 0, 18, 4, 0, 3},\n-    {22, 0, 18, 5, 0, 0},\n-    {21, 0, 18, 4, 0, 12},\n-    {21, 0, 18, 4, 0, 15},\n-    {21, 0, 18, 4, 0, 17},\n-    {27, 0, 17, 5, 0, 30},\n-    {28, 0, 15, 5, 0, 30},\n-    {1, 0, 1, 5, 0, 21},\n-    {1, 0, 5, 5, 0, 21},\n-    {1, 0, 7, 5, 0, 21},\n-    {1, 0, 2, 5, 0, 21},\n-    {1, 0, 6, 5, 0, 21},\n-    {21, 0, 10, 4, 0, 10},\n-    {21, 0, 10, 5, 0, 10},\n-    {21, 0, 18, 4, 0, 10},\n-    {21, 0, 18, 5, 0, 10},\n-    {21, 0, 18, 5, 0, 5},\n-    {16, 0, 18, 5, 0, 12},\n-    {25, 0, 12, 5, 0, 8},\n-    {18, 0, 18, 5, 0, 1},\n-    {25, 0, 18, 5, 0, 12},\n-    {1, 0, 14, 5, 0, 22},\n-    {1, 0, 14, 5, 0, 12},\n-    {1, 0, 19, 5, 0, 21},\n-    {1, 0, 20, 5, 0, 21},\n-    {1, 0, 21, 5, 0, 21},\n-    {1, 0, 22, 5, 0, 21},\n-    {1, 0, 14, 5, 0, 21},\n-    {15, 0, 8, 5, 0, 12},\n-    {25, 0, 9, 5, 0, 12},\n-    {6, 0, 0, 4, 1, 29},\n-    {23, 0, 10, 5, 0, 10},\n-    {23, 0, 10, 1, 0, 9},\n-    {2, 0, 18, 5, 102, 9},\n-    {9, 0, 0, 5, 0, 12},\n-    {26, 0, 18, 4, 0, 10},\n-    {26, 0, 18, 4, 0, 29},\n-    {5, 0, 0, 4, 0, 29},\n-    {26, 0, 18, 4, 0, 9},\n-    {9, 0, 0, 4, 1, 29},\n-    {26, 0, 10, 5, 0, 12},\n-    {15, 0, 18, 5, 0, 12},\n-    {15, 0, 18, 4, 0, 12},\n-    {15, 0, 18, 5, 0, 29},\n-    {14, 0, 0, 4, 1, 29},\n-    {14, 0, 0, 5, 1, 12},\n-    {25, 0, 9, 5, 0, 9},\n-    {25, 0, 10, 5, 0, 9},\n-    {25, 0, 18, 5, 0, 15},\n-    {26, 0, 18, 2, 0, 14},\n-    {22, 0, 18, 2, 0, 0},\n-    {18, 0, 18, 2, 0, 1},\n-    {26, 0, 18, 2, 0, 12},\n-    {26, 0, 18, 5, 0, 14},\n-    {26, 0, 0, 4, 0, 29},\n-    {26, 0, 18, 5, 0, 29},\n-    {25, 0, 18, 2, 0, 12},\n-    {26, 0, 18, 4, 0, 14},\n-    {26, 0, 18, 5, 0, 41},\n-    {26, 0, 18, 4, 0, 41},\n-    {26, 0, 18, 2, 0, 41},\n-    {26, 0, 18, 2, 0, 29},\n-    {26, 0, 18, 5, 0, 3},\n-    {26, 0, 18, 5, 0, 6},\n-    {26, 0, 0, 5, 52, 12},\n-    {9, 0, 0, 5, 56, 12},\n-    {5, 0, 0, 5, 56, 12},\n-    {26, 0, 18, 5, 54, 12},\n-    {12, 230, 13, 5, 54, 21},\n-    {21, 0, 18, 5, 54, 6},\n-    {21, 0, 18, 5, 54, 17},\n-    {15, 0, 18, 5, 54, 12},\n-    {7, 0, 0, 5, 57, 12},\n-    {6, 0, 0, 5, 57, 12},\n-    {21, 0, 0, 5, 57, 17},\n-    {12, 9, 13, 5, 57, 21},\n-    {21, 0, 18, 5, 0, 3},\n-    {21, 0, 18, 5, 0, 0},\n-    {17, 0, 18, 5, 0, 12},\n-    {17, 0, 18, 5, 0, 19},\n-    {26, 0, 18, 2, 35, 14},\n-    {29, 0, 17, 0, 0, 17},\n-    {21, 0, 18, 2, 0, 1},\n-    {21, 0, 18, 2, 0, 14},\n-    {6, 0, 0, 2, 35, 5},\n-    {7, 0, 0, 2, 0, 14},\n-    {14, 0, 0, 2, 35, 14},\n-    {17, 0, 18, 2, 0, 5},\n-    {12, 218, 13, 2, 40, 21},\n-    {12, 228, 13, 2, 40, 21},\n-    {12, 232, 13, 2, 40, 21},\n-    {12, 222, 13, 2, 40, 21},\n-    {10, 224, 0, 2, 24, 21},\n-    {17, 0, 18, 2, 0, 14},\n-    {6, 0, 0, 2, 0, 14},\n-    {6, 0, 0, 2, 0, 21},\n-    {7, 0, 0, 2, 0, 5},\n-    {7, 0, 0, 2, 32, 32},\n-    {7, 0, 0, 2, 32, 14},\n-    {12, 8, 13, 2, 40, 21},\n-    {24, 0, 18, 2, 0, 5},\n-    {6, 0, 0, 2, 32, 5},\n-    {7, 0, 0, 2, 33, 32},\n-    {7, 0, 0, 2, 33, 14},\n-    {21, 0, 18, 2, 0, 5},\n-    {6, 0, 0, 2, 0, 32},\n-    {6, 0, 0, 2, 33, 5},\n-    {7, 0, 0, 2, 34, 14},\n-    {7, 0, 0, 2, 24, 14},\n-    {26, 0, 0, 2, 0, 14},\n-    {15, 0, 0, 2, 0, 14},\n-    {26, 0, 0, 2, 24, 14},\n-    {26, 0, 18, 2, 24, 14},\n-    {15, 0, 0, 4, 0, 29},\n-    {15, 0, 18, 2, 0, 14},\n-    {26, 0, 0, 2, 33, 14},\n-    {7, 0, 0, 2, 35, 14},\n-    {2, 0, 18, 2, 102, 14},\n-    {7, 0, 0, 2, 36, 14},\n-    {6, 0, 0, 2, 36, 5},\n-    {26, 0, 18, 2, 36, 14},\n-    {7, 0, 0, 5, 82, 12},\n-    {6, 0, 0, 5, 82, 12},\n-    {21, 0, 0, 5, 82, 17},\n-    {7, 0, 0, 5, 69, 12},\n-    {6, 0, 0, 5, 69, 12},\n-    {21, 0, 18, 5, 69, 17},\n-    {21, 0, 18, 5, 69, 6},\n-    {13, 0, 0, 5, 69, 11},\n-    {7, 0, 0, 5, 3, 12},\n-    {21, 0, 18, 5, 3, 12},\n-    {6, 0, 18, 5, 3, 12},\n-    {7, 0, 0, 5, 83, 12},\n-    {14, 0, 0, 5, 83, 12},\n-    {12, 230, 13, 5, 83, 21},\n-    {21, 0, 0, 5, 83, 12},\n-    {21, 0, 0, 5, 83, 17},\n-    {24, 0, 0, 5, 0, 12},\n-    {7, 0, 0, 5, 58, 12},\n-    {12, 0, 13, 5, 58, 21},\n-    {12, 9, 13, 5, 58, 21},\n-    {10, 0, 0, 5, 58, 21},\n-    {26, 0, 18, 5, 58, 12},\n-    {15, 0, 0, 5, 0, 12},\n-    {7, 0, 0, 5, 64, 12},\n-    {21, 0, 18, 5, 64, 18},\n-    {21, 0, 18, 5, 64, 6},\n-    {10, 0, 0, 5, 70, 21},\n-    {7, 0, 0, 5, 70, 12},\n-    {12, 9, 13, 5, 70, 21},\n-    {12, 0, 13, 5, 70, 21},\n-    {21, 0, 0, 5, 70, 17},\n-    {13, 0, 0, 5, 70, 11},\n-    {21, 0, 0, 5, 9, 18},\n-    {13, 0, 0, 5, 71, 11},\n-    {7, 0, 0, 5, 71, 12},\n-    {12, 0, 13, 5, 71, 21},\n-    {12, 220, 13, 5, 71, 21},\n-    {21, 0, 0, 5, 71, 17},\n-    {7, 0, 0, 5, 72, 12},\n-    {12, 0, 13, 5, 72, 21},\n-    {10, 0, 0, 5, 72, 21},\n-    {10, 9, 0, 5, 72, 21},\n-    {21, 0, 0, 5, 72, 12},\n-    {12, 0, 13, 5, 84, 21},\n-    {10, 0, 0, 5, 84, 21},\n-    {7, 0, 0, 5, 84, 12},\n-    {12, 7, 13, 5, 84, 21},\n-    {10, 9, 0, 5, 84, 21},\n-    {21, 0, 0, 5, 84, 12},\n-    {21, 0, 0, 5, 84, 17},\n-    {13, 0, 0, 5, 84, 11},\n-    {6, 0, 0, 5, 22, 36},\n-    {7, 0, 0, 5, 76, 12},\n-    {12, 0, 13, 5, 76, 21},\n-    {10, 0, 0, 5, 76, 21},\n-    {13, 0, 0, 5, 76, 11},\n-    {21, 0, 0, 5, 76, 12},\n-    {21, 0, 0, 5, 76, 17},\n-    {7, 0, 0, 5, 78, 36},\n-    {12, 230, 13, 5, 78, 36},\n-    {12, 220, 13, 5, 78, 36},\n-    {6, 0, 0, 5, 78, 36},\n-    {21, 0, 0, 5, 78, 36},\n-    {7, 0, 0, 5, 85, 12},\n-    {10, 0, 0, 5, 85, 21},\n-    {12, 0, 13, 5, 85, 21},\n-    {21, 0, 0, 5, 85, 17},\n-    {6, 0, 0, 5, 85, 12},\n-    {12, 9, 13, 5, 85, 21},\n-    {13, 0, 0, 5, 85, 11},\n-    {7, 0, 0, 2, 24, 23},\n-    {7, 0, 0, 2, 24, 24},\n-    {4, 0, 0, 5, 102, 37},\n-    {3, 0, 0, 4, 102, 39},\n-    {12, 26, 13, 5, 5, 21},\n-    {25, 0, 9, 5, 5, 12},\n-    {24, 0, 4, 5, 6, 12},\n-    {12, 0, 13, 4, 40, 21},\n-    {21, 0, 18, 2, 0, 8},\n-    {21, 0, 18, 2, 0, 6},\n-    {21, 0, 18, 2, 0, 15},\n-    {16, 0, 18, 2, 0, 14},\n-    {21, 0, 12, 2, 0, 1},\n-    {21, 0, 12, 2, 0, 5},\n-    {21, 0, 10, 2, 0, 14},\n-    {25, 0, 9, 2, 0, 14},\n-    {17, 0, 9, 2, 0, 14},\n-    {25, 0, 18, 2, 0, 14},\n-    {23, 0, 10, 2, 0, 9},\n-    {21, 0, 10, 2, 0, 10},\n-    {21, 0, 18, 0, 0, 6},\n-    {21, 0, 18, 0, 0, 14},\n-    {21, 0, 10, 0, 0, 14},\n-    {23, 0, 10, 0, 0, 9},\n-    {21, 0, 10, 0, 0, 10},\n-    {22, 0, 18, 0, 0, 0},\n-    {18, 0, 18, 0, 0, 1},\n-    {25, 0, 9, 0, 0, 14},\n-    {21, 0, 12, 0, 0, 1},\n-    {17, 0, 9, 0, 0, 14},\n-    {21, 0, 12, 0, 0, 14},\n-    {13, 0, 8, 0, 0, 14},\n-    {21, 0, 12, 0, 0, 5},\n-    {21, 0, 18, 0, 0, 5},\n-    {25, 0, 18, 0, 0, 14},\n-    {9, 0, 0, 0, 1, 14},\n-    {24, 0, 18, 0, 0, 14},\n-    {16, 0, 18, 0, 0, 14},\n-    {5, 0, 0, 0, 1, 14},\n-    {21, 0, 18, 1, 0, 1},\n-    {22, 0, 18, 1, 0, 0},\n-    {18, 0, 18, 1, 0, 1},\n-    {21, 0, 18, 1, 0, 5},\n-    {7, 0, 0, 1, 33, 14},\n-    {7, 0, 0, 1, 33, 32},\n-    {6, 0, 0, 1, 0, 32},\n-    {6, 0, 0, 1, 0, 5},\n-    {7, 0, 0, 1, 24, 14},\n-    {23, 0, 10, 0, 0, 10},\n-    {26, 0, 18, 0, 0, 14},\n-    {26, 0, 18, 1, 0, 12},\n-    {25, 0, 18, 1, 0, 12},\n-    {1, 0, 18, 5, 0, 21},\n-    {26, 0, 18, 5, 0, 31},\n-    {7, 0, 0, 5, 47, 12},\n-    {14, 0, 18, 5, 2, 12},\n-    {15, 0, 18, 5, 2, 12},\n-    {26, 0, 18, 5, 2, 12},\n-    {26, 0, 0, 5, 2, 12},\n-    {7, 0, 0, 5, 73, 12},\n-    {7, 0, 0, 5, 74, 12},\n-    {7, 0, 0, 5, 37, 12},\n-    {15, 0, 0, 5, 37, 12},\n-    {7, 0, 0, 5, 38, 12},\n-    {14, 0, 0, 5, 38, 12},\n-    {7, 0, 0, 5, 118, 12},\n-    {12, 230, 13, 5, 118, 21},\n-    {7, 0, 0, 5, 48, 12},\n-    {21, 0, 0, 5, 48, 17},\n-    {7, 0, 0, 5, 59, 12},\n-    {21, 0, 0, 5, 59, 17},\n-    {14, 0, 0, 5, 59, 12},\n-    {9, 0, 0, 5, 39, 12},\n-    {5, 0, 0, 5, 39, 12},\n-    {7, 0, 0, 5, 49, 12},\n-    {7, 0, 0, 5, 50, 12},\n-    {13, 0, 0, 5, 50, 11},\n-    {9, 0, 0, 5, 136, 12},\n-    {5, 0, 0, 5, 136, 12},\n-    {7, 0, 0, 5, 106, 12},\n-    {7, 0, 0, 5, 104, 12},\n-    {21, 0, 0, 5, 104, 12},\n-    {7, 0, 0, 5, 110, 12},\n-    {7, 0, 3, 5, 51, 12},\n-    {7, 0, 3, 5, 86, 12},\n-    {21, 0, 3, 5, 86, 17},\n-    {15, 0, 3, 5, 86, 12},\n-    {7, 0, 3, 5, 120, 12},\n-    {26, 0, 3, 5, 120, 12},\n-    {15, 0, 3, 5, 120, 12},\n-    {7, 0, 3, 5, 116, 12},\n-    {15, 0, 3, 5, 116, 12},\n-    {7, 0, 3, 5, 128, 12},\n-    {15, 0, 3, 5, 128, 12},\n-    {7, 0, 3, 5, 63, 12},\n-    {15, 0, 3, 5, 63, 12},\n-    {21, 0, 18, 5, 63, 17},\n-    {7, 0, 3, 5, 75, 12},\n-    {21, 0, 3, 5, 75, 12},\n-    {7, 0, 3, 5, 97, 12},\n-    {7, 0, 3, 5, 96, 12},\n-    {15, 0, 3, 5, 96, 12},\n-    {7, 0, 3, 5, 60, 12},\n-    {12, 0, 13, 5, 60, 21},\n-    {12, 220, 13, 5, 60, 21},\n-    {12, 230, 13, 5, 60, 21},\n-    {12, 1, 13, 5, 60, 21},\n-    {12, 9, 13, 5, 60, 21},\n-    {15, 0, 3, 5, 60, 12},\n-    {21, 0, 3, 5, 60, 17},\n-    {21, 0, 3, 5, 60, 12},\n-    {7, 0, 3, 5, 87, 12},\n-    {15, 0, 3, 5, 87, 12},\n-    {21, 0, 3, 5, 87, 12},\n-    {7, 0, 3, 5, 117, 12},\n-    {15, 0, 3, 5, 117, 12},\n-    {7, 0, 3, 5, 112, 12},\n-    {26, 0, 3, 5, 112, 12},\n-    {12, 230, 13, 5, 112, 21},\n-    {12, 220, 13, 5, 112, 21},\n-    {15, 0, 3, 5, 112, 12},\n-    {21, 0, 3, 5, 112, 17},\n-    {21, 0, 3, 5, 112, 15},\n-    {7, 0, 3, 5, 79, 12},\n-    {21, 0, 18, 5, 79, 17},\n-    {7, 0, 3, 5, 88, 12},\n-    {15, 0, 3, 5, 88, 12},\n-    {7, 0, 3, 5, 89, 12},\n-    {15, 0, 3, 5, 89, 12},\n-    {7, 0, 3, 5, 122, 12},\n-    {21, 0, 3, 5, 122, 12},\n-    {15, 0, 3, 5, 122, 12},\n-    {7, 0, 3, 5, 90, 12},\n-    {9, 0, 3, 5, 130, 12},\n-    {5, 0, 3, 5, 130, 12},\n-    {15, 0, 3, 5, 130, 12},\n-    {7, 0, 4, 5, 144, 12},\n-    {12, 230, 13, 5, 144, 21},\n-    {13, 0, 11, 5, 144, 11},\n-    {15, 0, 11, 5, 6, 12},\n-    {7, 0, 3, 5, 147, 12},\n-    {15, 0, 3, 5, 147, 12},\n-    {7, 0, 4, 5, 148, 12},\n-    {12, 220, 13, 5, 148, 21},\n-    {12, 230, 13, 5, 148, 21},\n-    {15, 0, 4, 5, 148, 12},\n-    {21, 0, 4, 5, 148, 12},\n-    {10, 0, 0, 5, 93, 21},\n-    {12, 0, 13, 5, 93, 21},\n-    {7, 0, 0, 5, 93, 12},\n-    {12, 9, 13, 5, 93, 21},\n-    {21, 0, 0, 5, 93, 17},\n-    {21, 0, 0, 5, 93, 12},\n-    {15, 0, 18, 5, 93, 12},\n-    {13, 0, 0, 5, 93, 11},\n-    {12, 0, 13, 5, 91, 21},\n-    {10, 0, 0, 5, 91, 21},\n-    {7, 0, 0, 5, 91, 12},\n-    {12, 9, 13, 5, 91, 21},\n-    {12, 7, 13, 5, 91, 21},\n-    {21, 0, 0, 5, 91, 12},\n-    {1, 0, 0, 5, 91, 12},\n-    {21, 0, 0, 5, 91, 17},\n-    {7, 0, 0, 5, 100, 12},\n-    {13, 0, 0, 5, 100, 11},\n-    {12, 230, 13, 5, 95, 21},\n-    {7, 0, 0, 5, 95, 12},\n-    {12, 0, 13, 5, 95, 21},\n-    {10, 0, 0, 5, 95, 21},\n-    {12, 9, 13, 5, 95, 21},\n-    {13, 0, 0, 5, 95, 11},\n-    {21, 0, 0, 5, 95, 17},\n-    {7, 0, 0, 5, 111, 12},\n-    {12, 7, 13, 5, 111, 21},\n-    {21, 0, 0, 5, 111, 12},\n-    {21, 0, 0, 5, 111, 18},\n-    {12, 0, 13, 5, 99, 21},\n-    {10, 0, 0, 5, 99, 21},\n-    {7, 0, 0, 5, 99, 12},\n-    {10, 9, 0, 5, 99, 21},\n-    {21, 0, 0, 5, 99, 17},\n-    {21, 0, 0, 5, 99, 12},\n-    {12, 7, 13, 5, 99, 21},\n-    {13, 0, 0, 5, 99, 11},\n-    {21, 0, 0, 5, 99, 18},\n-    {15, 0, 0, 5, 18, 12},\n-    {7, 0, 0, 5, 108, 12},\n-    {10, 0, 0, 5, 108, 21},\n-    {12, 0, 13, 5, 108, 21},\n-    {10, 9, 0, 5, 108, 21},\n-    {12, 7, 13, 5, 108, 21},\n-    {21, 0, 0, 5, 108, 17},\n-    {21, 0, 0, 5, 108, 12},\n-    {7, 0, 0, 5, 129, 12},\n-    {21, 0, 0, 5, 129, 17},\n-    {7, 0, 0, 5, 109, 12},\n-    {12, 0, 13, 5, 109, 21},\n-    {10, 0, 0, 5, 109, 21},\n-    {12, 7, 13, 5, 109, 21},\n-    {12, 9, 13, 5, 109, 21},\n-    {13, 0, 0, 5, 109, 11},\n-    {12, 0, 13, 5, 107, 21},\n-    {10, 0, 0, 5, 107, 21},\n-    {7, 0, 0, 5, 107, 12},\n-    {12, 7, 13, 5, 40, 21},\n-    {12, 7, 13, 5, 107, 21},\n-    {10, 9, 0, 5, 107, 21},\n-    {12, 230, 13, 5, 107, 21},\n-    {7, 0, 0, 5, 135, 12},\n-    {10, 0, 0, 5, 135, 21},\n-    {12, 0, 13, 5, 135, 21},\n-    {12, 9, 13, 5, 135, 21},\n-    {12, 7, 13, 5, 135, 21},\n-    {21, 0, 0, 5, 135, 17},\n-    {21, 0, 0, 5, 135, 12},\n-    {13, 0, 0, 5, 135, 11},\n-    {12, 230, 13, 5, 135, 21},\n-    {7, 0, 0, 5, 124, 12},\n-    {10, 0, 0, 5, 124, 21},\n-    {12, 0, 13, 5, 124, 21},\n-    {12, 9, 13, 5, 124, 21},\n-    {12, 7, 13, 5, 124, 21},\n-    {21, 0, 0, 5, 124, 12},\n-    {13, 0, 0, 5, 124, 11},\n-    {7, 0, 0, 5, 123, 12},\n-    {10, 0, 0, 5, 123, 21},\n-    {12, 0, 13, 5, 123, 21},\n-    {12, 9, 13, 5, 123, 21},\n-    {12, 7, 13, 5, 123, 21},\n-    {21, 0, 0, 5, 123, 18},\n-    {21, 0, 0, 5, 123, 17},\n-    {21, 0, 0, 5, 123, 6},\n-    {21, 0, 0, 5, 123, 12},\n-    {7, 0, 0, 5, 114, 12},\n-    {10, 0, 0, 5, 114, 21},\n-    {12, 0, 13, 5, 114, 21},\n-    {12, 9, 13, 5, 114, 21},\n-    {21, 0, 0, 5, 114, 17},\n-    {21, 0, 0, 5, 114, 12},\n-    {13, 0, 0, 5, 114, 11},\n-    {21, 0, 18, 5, 31, 18},\n-    {7, 0, 0, 5, 101, 12},\n-    {12, 0, 13, 5, 101, 21},\n-    {10, 0, 0, 5, 101, 21},\n-    {10, 9, 0, 5, 101, 21},\n-    {12, 7, 13, 5, 101, 21},\n-    {13, 0, 0, 5, 101, 11},\n-    {7, 0, 0, 5, 126, 36},\n-    {12, 0, 13, 5, 126, 36},\n-    {10, 0, 0, 5, 126, 36},\n-    {12, 9, 13, 5, 126, 36},\n-    {13, 0, 0, 5, 126, 11},\n-    {15, 0, 0, 5, 126, 36},\n-    {21, 0, 0, 5, 126, 17},\n-    {26, 0, 0, 5, 126, 36},\n-    {7, 0, 0, 5, 142, 12},\n-    {10, 0, 0, 5, 142, 21},\n-    {12, 0, 13, 5, 142, 21},\n-    {12, 9, 13, 5, 142, 21},\n-    {12, 7, 13, 5, 142, 21},\n-    {21, 0, 0, 5, 142, 12},\n-    {9, 0, 0, 5, 125, 12},\n-    {5, 0, 0, 5, 125, 12},\n-    {13, 0, 0, 5, 125, 11},\n-    {15, 0, 0, 5, 125, 12},\n-    {7, 0, 0, 5, 125, 12},\n-    {7, 0, 0, 5, 141, 12},\n-    {12, 0, 13, 5, 141, 21},\n-    {12, 0, 0, 5, 141, 21},\n-    {12, 9, 13, 5, 141, 21},\n-    {10, 0, 0, 5, 141, 21},\n-    {21, 0, 0, 5, 141, 18},\n-    {21, 0, 0, 5, 141, 12},\n-    {21, 0, 0, 5, 141, 17},\n-    {7, 0, 0, 5, 140, 12},\n-    {12, 0, 13, 5, 140, 21},\n-    {10, 0, 0, 5, 140, 21},\n-    {12, 9, 13, 5, 140, 21},\n-    {21, 0, 0, 5, 140, 17},\n-    {21, 0, 0, 5, 140, 18},\n-    {7, 0, 0, 5, 121, 12},\n-    {7, 0, 0, 5, 133, 12},\n-    {10, 0, 0, 5, 133, 21},\n-    {12, 0, 13, 5, 133, 21},\n-    {12, 9, 0, 5, 133, 21},\n-    {21, 0, 0, 5, 133, 17},\n-    {13, 0, 0, 5, 133, 11},\n-    {15, 0, 0, 5, 133, 12},\n-    {21, 0, 0, 5, 134, 18},\n-    {21, 0, 0, 5, 134, 6},\n-    {7, 0, 0, 5, 134, 12},\n-    {12, 0, 13, 5, 134, 21},\n-    {10, 0, 0, 5, 134, 21},\n-    {7, 0, 0, 5, 138, 12},\n-    {12, 0, 13, 5, 138, 21},\n-    {12, 7, 13, 5, 138, 21},\n-    {12, 9, 13, 5, 138, 21},\n-    {13, 0, 0, 5, 138, 11},\n-    {7, 0, 0, 5, 143, 12},\n-    {10, 0, 0, 5, 143, 21},\n-    {12, 0, 13, 5, 143, 21},\n-    {12, 9, 13, 5, 143, 21},\n-    {13, 0, 0, 5, 143, 11},\n-    {7, 0, 0, 5, 145, 12},\n-    {12, 0, 13, 5, 145, 21},\n-    {10, 0, 0, 5, 145, 21},\n-    {21, 0, 0, 5, 145, 12},\n-    {7, 0, 0, 5, 62, 12},\n-    {14, 0, 0, 5, 62, 12},\n-    {21, 0, 0, 5, 62, 17},\n-    {7, 0, 0, 5, 80, 12},\n-    {7, 0, 0, 5, 80, 0},\n-    {7, 0, 0, 5, 80, 1},\n-    {7, 0, 0, 5, 127, 12},\n-    {7, 0, 0, 5, 127, 0},\n-    {7, 0, 0, 5, 127, 1},\n-    {7, 0, 0, 5, 115, 12},\n-    {13, 0, 0, 5, 115, 11},\n-    {21, 0, 0, 5, 115, 17},\n-    {7, 0, 0, 5, 103, 12},\n-    {12, 1, 13, 5, 103, 21},\n-    {21, 0, 0, 5, 103, 17},\n-    {7, 0, 0, 5, 119, 12},\n-    {12, 230, 13, 5, 119, 21},\n-    {21, 0, 0, 5, 119, 17},\n-    {21, 0, 0, 5, 119, 12},\n-    {26, 0, 0, 5, 119, 12},\n-    {6, 0, 0, 5, 119, 12},\n-    {13, 0, 0, 5, 119, 11},\n-    {15, 0, 0, 5, 119, 12},\n-    {9, 0, 0, 5, 146, 12},\n-    {5, 0, 0, 5, 146, 12},\n-    {15, 0, 0, 5, 146, 12},\n-    {21, 0, 0, 5, 146, 17},\n-    {21, 0, 0, 5, 146, 12},\n-    {7, 0, 0, 5, 98, 12},\n-    {10, 0, 0, 5, 98, 21},\n-    {12, 0, 13, 5, 98, 21},\n-    {6, 0, 0, 5, 98, 12},\n-    {6, 0, 0, 2, 137, 5},\n-    {6, 0, 0, 2, 139, 5},\n-    {7, 0, 0, 2, 137, 14},\n-    {7, 0, 0, 2, 139, 14},\n-    {7, 0, 0, 5, 105, 12},\n-    {26, 0, 0, 5, 105, 12},\n-    {12, 0, 13, 5, 105, 21},\n-    {12, 1, 13, 5, 105, 21},\n-    {21, 0, 0, 5, 105, 17},\n-    {10, 216, 0, 5, 0, 21},\n-    {10, 226, 0, 5, 0, 21},\n-    {12, 230, 13, 5, 2, 21},\n-    {25, 0, 0, 5, 0, 12},\n-    {13, 0, 8, 5, 0, 11},\n-    {26, 0, 0, 5, 131, 12},\n-    {12, 0, 13, 5, 131, 21},\n-    {21, 0, 0, 5, 131, 17},\n-    {21, 0, 0, 5, 131, 12},\n-    {12, 230, 13, 5, 56, 21},\n-    {7, 0, 3, 5, 113, 12},\n-    {15, 0, 3, 5, 113, 12},\n-    {12, 220, 13, 5, 113, 21},\n-    {9, 0, 3, 5, 132, 12},\n-    {5, 0, 3, 5, 132, 12},\n-    {12, 230, 13, 5, 132, 21},\n-    {12, 7, 13, 5, 132, 21},\n-    {13, 0, 3, 5, 132, 11},\n-    {21, 0, 3, 5, 132, 0},\n-    {15, 0, 4, 5, 0, 12},\n-    {26, 0, 4, 5, 0, 10},\n-    {23, 0, 4, 5, 0, 10},\n-    {2, 0, 18, 5, 102, 14},\n-    {26, 0, 0, 2, 0, 29},\n-    {26, 0, 0, 5, 0, 28},\n-    {26, 0, 0, 2, 32, 14},\n-    {24, 0, 18, 2, 0, 42},\n-    {26, 0, 18, 5, 0, 5},\n-};\n-\n-#define BIDI_MIRROR_LEN 420\n-static const MirrorPair mirror_pairs[] = {\n-    {40, 41},\n-    {41, 40},\n-    {60, 62},\n-    {62, 60},\n-    {91, 93},\n-    {93, 91},\n-    {123, 125},\n-    {125, 123},\n-    {171, 187},\n-    {187, 171},\n-    {3898, 3899},\n-    {3899, 3898},\n-    {3900, 3901},\n-    {3901, 3900},\n-    {5787, 5788},\n-    {5788, 5787},\n-    {8249, 8250},\n-    {8250, 8249},\n-    {8261, 8262},\n-    {8262, 8261},\n-    {8317, 8318},\n-    {8318, 8317},\n-    {8333, 8334},\n-    {8334, 8333},\n-    {8712, 8715},\n-    {8713, 8716},\n-    {8714, 8717},\n-    {8715, 8712},\n-    {8716, 8713},\n-    {8717, 8714},\n-    {8725, 10741},\n-    {8735, 11262},\n-    {8736, 10659},\n-    {8737, 10651},\n-    {8738, 10656},\n-    {8740, 10990},\n-    {8764, 8765},\n-    {8765, 8764},\n-    {8771, 8909},\n-    {8773, 8780},\n-    {8780, 8773},\n-    {8786, 8787},\n-    {8787, 8786},\n-    {8788, 8789},\n-    {8789, 8788},\n-    {8804, 8805},\n-    {8805, 8804},\n-    {8806, 8807},\n-    {8807, 8806},\n-    {8808, 8809},\n-    {8809, 8808},\n-    {8810, 8811},\n-    {8811, 8810},\n-    {8814, 8815},\n-    {8815, 8814},\n-    {8816, 8817},\n-    {8817, 8816},\n-    {8818, 8819},\n-    {8819, 8818},\n-    {8820, 8821},\n-    {8821, 8820},\n-    {8822, 8823},\n-    {8823, 8822},\n-    {8824, 8825},\n-    {8825, 8824},\n-    {8826, 8827},\n-    {8827, 8826},\n-    {8828, 8829},\n-    {8829, 8828},\n-    {8830, 8831},\n-    {8831, 8830},\n-    {8832, 8833},\n-    {8833, 8832},\n-    {8834, 8835},\n-    {8835, 8834},\n-    {8836, 8837},\n-    {8837, 8836},\n-    {8838, 8839},\n-    {8839, 8838},\n-    {8840, 8841},\n-    {8841, 8840},\n-    {8842, 8843},\n-    {8843, 8842},\n-    {8847, 8848},\n-    {8848, 8847},\n-    {8849, 8850},\n-    {8850, 8849},\n-    {8856, 10680},\n-    {8866, 8867},\n-    {8867, 8866},\n-    {8870, 10974},\n-    {8872, 10980},\n-    {8873, 10979},\n-    {8875, 10981},\n-    {8880, 8881},\n-    {8881, 8880},\n-    {8882, 8883},\n-    {8883, 8882},\n-    {8884, 8885},\n-    {8885, 8884},\n-    {8886, 8887},\n-    {8887, 8886},\n-    {8888, 10204},\n-    {8905, 8906},\n-    {8906, 8905},\n-    {8907, 8908},\n-    {8908, 8907},\n-    {8909, 8771},\n-    {8912, 8913},\n-    {8913, 8912},\n-    {8918, 8919},\n-    {8919, 8918},\n-    {8920, 8921},\n-    {8921, 8920},\n-    {8922, 8923},\n-    {8923, 8922},\n-    {8924, 8925},\n-    {8925, 8924},\n-    {8926, 8927},\n-    {8927, 8926},\n-    {8928, 8929},\n-    {8929, 8928},\n-    {8930, 8931},\n-    {8931, 8930},\n-    {8932, 8933},\n-    {8933, 8932},\n-    {8934, 8935},\n-    {8935, 8934},\n-    {8936, 8937},\n-    {8937, 8936},\n-    {8938, 8939},\n-    {8939, 8938},\n-    {8940, 8941},\n-    {8941, 8940},\n-    {8944, 8945},\n-    {8945, 8944},\n-    {8946, 8954},\n-    {8947, 8955},\n-    {8948, 8956},\n-    {8950, 8957},\n-    {8951, 8958},\n-    {8954, 8946},\n-    {8955, 8947},\n-    {8956, 8948},\n-    {8957, 8950},\n-    {8958, 8951},\n-    {8968, 8969},\n-    {8969, 8968},\n-    {8970, 8971},\n-    {8971, 8970},\n-    {9001, 9002},\n-    {9002, 9001},\n-    {10088, 10089},\n-    {10089, 10088},\n-    {10090, 10091},\n-    {10091, 10090},\n-    {10092, 10093},\n-    {10093, 10092},\n-    {10094, 10095},\n-    {10095, 10094},\n-    {10096, 10097},\n-    {10097, 10096},\n-    {10098, 10099},\n-    {10099, 10098},\n-    {10100, 10101},\n-    {10101, 10100},\n-    {10179, 10180},\n-    {10180, 10179},\n-    {10181, 10182},\n-    {10182, 10181},\n-    {10184, 10185},\n-    {10185, 10184},\n-    {10187, 10189},\n-    {10189, 10187},\n-    {10197, 10198},\n-    {10198, 10197},\n-    {10204, 8888},\n-    {10205, 10206},\n-    {10206, 10205},\n-    {10210, 10211},\n-    {10211, 10210},\n-    {10212, 10213},\n-    {10213, 10212},\n-    {10214, 10215},\n-    {10215, 10214},\n-    {10216, 10217},\n-    {10217, 10216},\n-    {10218, 10219},\n-    {10219, 10218},\n-    {10220, 10221},\n-    {10221, 10220},\n-    {10222, 10223},\n-    {10223, 10222},\n-    {10627, 10628},\n-    {10628, 10627},\n-    {10629, 10630},\n-    {10630, 10629},\n-    {10631, 10632},\n-    {10632, 10631},\n-    {10633, 10634},\n-    {10634, 10633},\n-    {10635, 10636},\n-    {10636, 10635},\n-    {10637, 10640},\n-    {10638, 10639},\n-    {10639, 10638},\n-    {10640, 10637},\n-    {10641, 10642},\n-    {10642, 10641},\n-    {10643, 10644},\n-    {10644, 10643},\n-    {10645, 10646},\n-    {10646, 10645},\n-    {10647, 10648},\n-    {10648, 10647},\n-    {10651, 8737},\n-    {10656, 8738},\n-    {10659, 8736},\n-    {10660, 10661},\n-    {10661, 10660},\n-    {10664, 10665},\n-    {10665, 10664},\n-    {10666, 10667},\n-    {10667, 10666},\n-    {10668, 10669},\n-    {10669, 10668},\n-    {10670, 10671},\n-    {10671, 10670},\n-    {10680, 8856},\n-    {10688, 10689},\n-    {10689, 10688},\n-    {10692, 10693},\n-    {10693, 10692},\n-    {10703, 10704},\n-    {10704, 10703},\n-    {10705, 10706},\n-    {10706, 10705},\n-    {10708, 10709},\n-    {10709, 10708},\n-    {10712, 10713},\n-    {10713, 10712},\n-    {10714, 10715},\n-    {10715, 10714},\n-    {10728, 10729},\n-    {10729, 10728},\n-    {10741, 8725},\n-    {10744, 10745},\n-    {10745, 10744},\n-    {10748, 10749},\n-    {10749, 10748},\n-    {10795, 10796},\n-    {10796, 10795},\n-    {10797, 10798},\n-    {10798, 10797},\n-    {10804, 10805},\n-    {10805, 10804},\n-    {10812, 10813},\n-    {10813, 10812},\n-    {10852, 10853},\n-    {10853, 10852},\n-    {10873, 10874},\n-    {10874, 10873},\n-    {10875, 10876},\n-    {10876, 10875},\n-    {10877, 10878},\n-    {10878, 10877},\n-    {10879, 10880},\n-    {10880, 10879},\n-    {10881, 10882},\n-    {10882, 10881},\n-    {10883, 10884},\n-    {10884, 10883},\n-    {10885, 10886},\n-    {10886, 10885},\n-    {10887, 10888},\n-    {10888, 10887},\n-    {10889, 10890},\n-    {10890, 10889},\n-    {10891, 10892},\n-    {10892, 10891},\n-    {10893, 10894},\n-    {10894, 10893},\n-    {10895, 10896},\n-    {10896, 10895},\n-    {10897, 10898},\n-    {10898, 10897},\n-    {10899, 10900},\n-    {10900, 10899},\n-    {10901, 10902},\n-    {10902, 10901},\n-    {10903, 10904},\n-    {10904, 10903},\n-    {10905, 10906},\n-    {10906, 10905},\n-    {10907, 10908},\n-    {10908, 10907},\n-    {10909, 10910},\n-    {10910, 10909},\n-    {10911, 10912},\n-    {10912, 10911},\n-    {10913, 10914},\n-    {10914, 10913},\n-    {10918, 10919},\n-    {10919, 10918},\n-    {10920, 10921},\n-    {10921, 10920},\n-    {10922, 10923},\n-    {10923, 10922},\n-    {10924, 10925},\n-    {10925, 10924},\n-    {10927, 10928},\n-    {10928, 10927},\n-    {10929, 10930},\n-    {10930, 10929},\n-    {10931, 10932},\n-    {10932, 10931},\n-    {10933, 10934},\n-    {10934, 10933},\n-    {10935, 10936},\n-    {10936, 10935},\n-    {10937, 10938},\n-    {10938, 10937},\n-    {10939, 10940},\n-    {10940, 10939},\n-    {10941, 10942},\n-    {10942, 10941},\n-    {10943, 10944},\n-    {10944, 10943},\n-    {10945, 10946},\n-    {10946, 10945},\n-    {10947, 10948},\n-    {10948, 10947},\n-    {10949, 10950},\n-    {10950, 10949},\n-    {10951, 10952},\n-    {10952, 10951},\n-    {10953, 10954},\n-    {10954, 10953},\n-    {10955, 10956},\n-    {10956, 10955},\n-    {10957, 10958},\n-    {10958, 10957},\n-    {10959, 10960},\n-    {10960, 10959},\n-    {10961, 10962},\n-    {10962, 10961},\n-    {10963, 10964},\n-    {10964, 10963},\n-    {10965, 10966},\n-    {10966, 10965},\n-    {10974, 8870},\n-    {10979, 8873},\n-    {10980, 8872},\n-    {10981, 8875},\n-    {10988, 10989},\n-    {10989, 10988},\n-    {10990, 8740},\n-    {10999, 11000},\n-    {11000, 10999},\n-    {11001, 11002},\n-    {11002, 11001},\n-    {11262, 8735},\n-    {11778, 11779},\n-    {11779, 11778},\n-    {11780, 11781},\n-    {11781, 11780},\n-    {11785, 11786},\n-    {11786, 11785},\n-    {11788, 11789},\n-    {11789, 11788},\n-    {11804, 11805},\n-    {11805, 11804},\n-    {11808, 11809},\n-    {11809, 11808},\n-    {11810, 11811},\n-    {11811, 11810},\n-    {11812, 11813},\n-    {11813, 11812},\n-    {11814, 11815},\n-    {11815, 11814},\n-    {11816, 11817},\n-    {11817, 11816},\n-    {12296, 12297},\n-    {12297, 12296},\n-    {12298, 12299},\n-    {12299, 12298},\n-    {12300, 12301},\n-    {12301, 12300},\n-    {12302, 12303},\n-    {12303, 12302},\n-    {12304, 12305},\n-    {12305, 12304},\n-    {12308, 12309},\n-    {12309, 12308},\n-    {12310, 12311},\n-    {12311, 12310},\n-    {12312, 12313},\n-    {12313, 12312},\n-    {12314, 12315},\n-    {12315, 12314},\n-    {65113, 65114},\n-    {65114, 65113},\n-    {65115, 65116},\n-    {65116, 65115},\n-    {65117, 65118},\n-    {65118, 65117},\n-    {65124, 65125},\n-    {65125, 65124},\n-    {65288, 65289},\n-    {65289, 65288},\n-    {65308, 65310},\n-    {65310, 65308},\n-    {65339, 65341},\n-    {65341, 65339},\n-    {65371, 65373},\n-    {65373, 65371},\n-    {65375, 65376},\n-    {65376, 65375},\n-    {65378, 65379},\n-    {65379, 65378},\n-};\n-\n-#define BIDI_BRACKET_LEN 120\n-static const BracketPair bracket_pairs[] = {\n-    {40, 41, 0},\n-    {41, 40, 1},\n-    {91, 93, 0},\n-    {93, 91, 1},\n-    {123, 125, 0},\n-    {125, 123, 1},\n-    {3898, 3899, 0},\n-    {3899, 3898, 1},\n-    {3900, 3901, 0},\n-    {3901, 3900, 1},\n-    {5787, 5788, 0},\n-    {5788, 5787, 1},\n-    {8261, 8262, 0},\n-    {8262, 8261, 1},\n-    {8317, 8318, 0},\n-    {8318, 8317, 1},\n-    {8333, 8334, 0},\n-    {8334, 8333, 1},\n-    {8968, 8969, 0},\n-    {8969, 8968, 1},\n-    {8970, 8971, 0},\n-    {8971, 8970, 1},\n-    {9001, 9002, 0},\n-    {9002, 9001, 1},\n-    {10088, 10089, 0},\n-    {10089, 10088, 1},\n-    {10090, 10091, 0},\n-    {10091, 10090, 1},\n-    {10092, 10093, 0},\n-    {10093, 10092, 1},\n-    {10094, 10095, 0},\n-    {10095, 10094, 1},\n-    {10096, 10097, 0},\n-    {10097, 10096, 1},\n-    {10098, 10099, 0},\n-    {10099, 10098, 1},\n-    {10100, 10101, 0},\n-    {10101, 10100, 1},\n-    {10181, 10182, 0},\n-    {10182, 10181, 1},\n-    {10214, 10215, 0},\n-    {10215, 10214, 1},\n-    {10216, 10217, 0},\n-    {10217, 10216, 1},\n-    {10218, 10219, 0},\n-    {10219, 10218, 1},\n-    {10220, 10221, 0},\n-    {10221, 10220, 1},\n-    {10222, 10223, 0},\n-    {10223, 10222, 1},\n-    {10627, 10628, 0},\n-    {10628, 10627, 1},\n-    {10629, 10630, 0},\n-    {10630, 10629, 1},\n-    {10631, 10632, 0},\n-    {10632, 10631, 1},\n-    {10633, 10634, 0},\n-    {10634, 10633, 1},\n-    {10635, 10636, 0},\n-    {10636, 10635, 1},\n-    {10637, 10640, 0},\n-    {10638, 10639, 1},\n-    {10639, 10638, 0},\n-    {10640, 10637, 1},\n-    {10641, 10642, 0},\n-    {10642, 10641, 1},\n-    {10643, 10644, 0},\n-    {10644, 10643, 1},\n-    {10645, 10646, 0},\n-    {10646, 10645, 1},\n-    {10647, 10648, 0},\n-    {10648, 10647, 1},\n-    {10712, 10713, 0},\n-    {10713, 10712, 1},\n-    {10714, 10715, 0},\n-    {10715, 10714, 1},\n-    {10748, 10749, 0},\n-    {10749, 10748, 1},\n-    {11810, 11811, 0},\n-    {11811, 11810, 1},\n-    {11812, 11813, 0},\n-    {11813, 11812, 1},\n-    {11814, 11815, 0},\n-    {11815, 11814, 1},\n-    {11816, 11817, 0},\n-    {11817, 11816, 1},\n-    {12296, 12297, 0},\n-    {12297, 12296, 1},\n-    {12298, 12299, 0},\n-    {12299, 12298, 1},\n-    {12300, 12301, 0},\n-    {12301, 12300, 1},\n-    {12302, 12303, 0},\n-    {12303, 12302, 1},\n-    {12304, 12305, 0},\n-    {12305, 12304, 1},\n-    {12308, 12309, 0},\n-    {12309, 12308, 1},\n-    {12310, 12311, 0},\n-    {12311, 12310, 1},\n-    {12312, 12313, 0},\n-    {12313, 12312, 1},\n-    {12314, 12315, 0},\n-    {12315, 12314, 1},\n-    {65113, 65114, 0},\n-    {65114, 65113, 1},\n-    {65115, 65116, 0},\n-    {65116, 65115, 1},\n-    {65117, 65118, 0},\n-    {65118, 65117, 1},\n-    {65288, 65289, 0},\n-    {65289, 65288, 1},\n-    {65339, 65341, 0},\n-    {65341, 65339, 1},\n-    {65371, 65373, 0},\n-    {65373, 65371, 1},\n-    {65375, 65376, 0},\n-    {65376, 65375, 1},\n-    {65378, 65379, 0},\n-    {65379, 65378, 1},\n-};\n-\n-\/* Reindexing of NFC first characters. *\/\n-#define TOTAL_FIRST 376\n-#define TOTAL_LAST 62\n-static const Reindex nfc_first[] = {\n-  { 60, 2, 0},\n-  { 65, 15, 3},\n-  { 82, 8, 19},\n-  { 97, 15, 28},\n-  { 114, 8, 44},\n-  { 168, 0, 53},\n-  { 194, 0, 54},\n-  { 196, 3, 55},\n-  { 202, 0, 59},\n-  { 207, 0, 60},\n-  { 212, 2, 61},\n-  { 216, 0, 64},\n-  { 220, 0, 65},\n-  { 226, 0, 66},\n-  { 228, 3, 67},\n-  { 234, 0, 71},\n-  { 239, 0, 72},\n-  { 244, 2, 73},\n-  { 248, 0, 76},\n-  { 252, 0, 77},\n-  { 258, 1, 78},\n-  { 274, 1, 80},\n-  { 332, 1, 82},\n-  { 346, 1, 84},\n-  { 352, 1, 86},\n-  { 360, 3, 88},\n-  { 383, 0, 92},\n-  { 416, 1, 93},\n-  { 431, 1, 95},\n-  { 439, 0, 97},\n-  { 490, 1, 98},\n-  { 550, 3, 100},\n-  { 558, 1, 104},\n-  { 658, 0, 106},\n-  { 913, 0, 107},\n-  { 917, 0, 108},\n-  { 919, 0, 109},\n-  { 921, 0, 110},\n-  { 927, 0, 111},\n-  { 929, 0, 112},\n-  { 933, 0, 113},\n-  { 937, 0, 114},\n-  { 940, 0, 115},\n-  { 942, 0, 116},\n-  { 945, 0, 117},\n-  { 949, 0, 118},\n-  { 951, 0, 119},\n-  { 953, 0, 120},\n-  { 959, 0, 121},\n-  { 961, 0, 122},\n-  { 965, 0, 123},\n-  { 969, 2, 124},\n-  { 974, 0, 127},\n-  { 978, 0, 128},\n-  { 1030, 0, 129},\n-  { 1040, 0, 130},\n-  { 1043, 0, 131},\n-  { 1045, 3, 132},\n-  { 1050, 0, 136},\n-  { 1054, 0, 137},\n-  { 1059, 0, 138},\n-  { 1063, 0, 139},\n-  { 1067, 0, 140},\n-  { 1069, 0, 141},\n-  { 1072, 0, 142},\n-  { 1075, 0, 143},\n-  { 1077, 3, 144},\n-  { 1082, 0, 148},\n-  { 1086, 0, 149},\n-  { 1091, 0, 150},\n-  { 1095, 0, 151},\n-  { 1099, 0, 152},\n-  { 1101, 0, 153},\n-  { 1110, 0, 154},\n-  { 1140, 1, 155},\n-  { 1240, 1, 157},\n-  { 1256, 1, 159},\n-  { 1575, 0, 161},\n-  { 1608, 0, 162},\n-  { 1610, 0, 163},\n-  { 1729, 0, 164},\n-  { 1746, 0, 165},\n-  { 1749, 0, 166},\n-  { 2344, 0, 167},\n-  { 2352, 0, 168},\n-  { 2355, 0, 169},\n-  { 2503, 0, 170},\n-  { 2887, 0, 171},\n-  { 2962, 0, 172},\n-  { 3014, 1, 173},\n-  { 3142, 0, 175},\n-  { 3263, 0, 176},\n-  { 3270, 0, 177},\n-  { 3274, 0, 178},\n-  { 3398, 1, 179},\n-  { 3545, 0, 181},\n-  { 3548, 0, 182},\n-  { 4133, 0, 183},\n-  { 6917, 0, 184},\n-  { 6919, 0, 185},\n-  { 6921, 0, 186},\n-  { 6923, 0, 187},\n-  { 6925, 0, 188},\n-  { 6929, 0, 189},\n-  { 6970, 0, 190},\n-  { 6972, 0, 191},\n-  { 6974, 1, 192},\n-  { 6978, 0, 194},\n-  { 7734, 1, 195},\n-  { 7770, 1, 197},\n-  { 7778, 1, 199},\n-  { 7840, 1, 201},\n-  { 7864, 1, 203},\n-  { 7884, 1, 205},\n-  { 7936, 17, 207},\n-  { 7960, 1, 225},\n-  { 7968, 17, 227},\n-  { 7992, 1, 245},\n-  { 8000, 1, 247},\n-  { 8008, 1, 249},\n-  { 8016, 1, 251},\n-  { 8025, 0, 253},\n-  { 8032, 16, 254},\n-  { 8052, 0, 271},\n-  { 8060, 0, 272},\n-  { 8118, 0, 273},\n-  { 8127, 0, 274},\n-  { 8134, 0, 275},\n-  { 8182, 0, 276},\n-  { 8190, 0, 277},\n-  { 8592, 0, 278},\n-  { 8594, 0, 279},\n-  { 8596, 0, 280},\n-  { 8656, 0, 281},\n-  { 8658, 0, 282},\n-  { 8660, 0, 283},\n-  { 8707, 0, 284},\n-  { 8712, 0, 285},\n-  { 8715, 0, 286},\n-  { 8739, 0, 287},\n-  { 8741, 0, 288},\n-  { 8764, 0, 289},\n-  { 8771, 0, 290},\n-  { 8773, 0, 291},\n-  { 8776, 0, 292},\n-  { 8781, 0, 293},\n-  { 8801, 0, 294},\n-  { 8804, 1, 295},\n-  { 8818, 1, 297},\n-  { 8822, 1, 299},\n-  { 8826, 3, 301},\n-  { 8834, 1, 305},\n-  { 8838, 1, 307},\n-  { 8849, 1, 309},\n-  { 8866, 0, 311},\n-  { 8872, 1, 312},\n-  { 8875, 0, 314},\n-  { 8882, 3, 315},\n-  { 12358, 0, 319},\n-  { 12363, 0, 320},\n-  { 12365, 0, 321},\n-  { 12367, 0, 322},\n-  { 12369, 0, 323},\n-  { 12371, 0, 324},\n-  { 12373, 0, 325},\n-  { 12375, 0, 326},\n-  { 12377, 0, 327},\n-  { 12379, 0, 328},\n-  { 12381, 0, 329},\n-  { 12383, 0, 330},\n-  { 12385, 0, 331},\n-  { 12388, 0, 332},\n-  { 12390, 0, 333},\n-  { 12392, 0, 334},\n-  { 12399, 0, 335},\n-  { 12402, 0, 336},\n-  { 12405, 0, 337},\n-  { 12408, 0, 338},\n-  { 12411, 0, 339},\n-  { 12445, 0, 340},\n-  { 12454, 0, 341},\n-  { 12459, 0, 342},\n-  { 12461, 0, 343},\n-  { 12463, 0, 344},\n-  { 12465, 0, 345},\n-  { 12467, 0, 346},\n-  { 12469, 0, 347},\n-  { 12471, 0, 348},\n-  { 12473, 0, 349},\n-  { 12475, 0, 350},\n-  { 12477, 0, 351},\n-  { 12479, 0, 352},\n-  { 12481, 0, 353},\n-  { 12484, 0, 354},\n-  { 12486, 0, 355},\n-  { 12488, 0, 356},\n-  { 12495, 0, 357},\n-  { 12498, 0, 358},\n-  { 12501, 0, 359},\n-  { 12504, 0, 360},\n-  { 12507, 0, 361},\n-  { 12527, 3, 362},\n-  { 12541, 0, 366},\n-  { 69785, 0, 367},\n-  { 69787, 0, 368},\n-  { 69797, 0, 369},\n-  { 69937, 1, 370},\n-  { 70471, 0, 372},\n-  { 70841, 0, 373},\n-  { 71096, 1, 374},\n-  {0,0,0}\n-};\n-\n-static const Reindex nfc_last[] = {\n-  { 768, 4, 0},\n-  { 774, 6, 5},\n-  { 783, 0, 12},\n-  { 785, 0, 13},\n-  { 787, 1, 14},\n-  { 795, 0, 16},\n-  { 803, 5, 17},\n-  { 813, 1, 23},\n-  { 816, 1, 25},\n-  { 824, 0, 27},\n-  { 834, 0, 28},\n-  { 837, 0, 29},\n-  { 1619, 2, 30},\n-  { 2364, 0, 33},\n-  { 2494, 0, 34},\n-  { 2519, 0, 35},\n-  { 2878, 0, 36},\n-  { 2902, 1, 37},\n-  { 3006, 0, 39},\n-  { 3031, 0, 40},\n-  { 3158, 0, 41},\n-  { 3266, 0, 42},\n-  { 3285, 1, 43},\n-  { 3390, 0, 45},\n-  { 3415, 0, 46},\n-  { 3530, 0, 47},\n-  { 3535, 0, 48},\n-  { 3551, 0, 49},\n-  { 4142, 0, 50},\n-  { 6965, 0, 51},\n-  { 12441, 1, 52},\n-  { 69818, 0, 54},\n-  { 69927, 0, 55},\n-  { 70462, 0, 56},\n-  { 70487, 0, 57},\n-  { 70832, 0, 58},\n-  { 70842, 0, 59},\n-  { 70845, 0, 60},\n-  { 71087, 0, 61},\n-  {0,0,0}\n-};\n-\n-#define UCDN_EAST_ASIAN_F 0\n-#define UCDN_EAST_ASIAN_H 1\n-#define UCDN_EAST_ASIAN_W 2\n-#define UCDN_EAST_ASIAN_NA 3\n-#define UCDN_EAST_ASIAN_A 4\n-#define UCDN_EAST_ASIAN_N 5\n-\n-#define UCDN_SCRIPT_COMMON 0\n-#define UCDN_SCRIPT_LATIN 1\n-#define UCDN_SCRIPT_GREEK 2\n-#define UCDN_SCRIPT_CYRILLIC 3\n-#define UCDN_SCRIPT_ARMENIAN 4\n-#define UCDN_SCRIPT_HEBREW 5\n-#define UCDN_SCRIPT_ARABIC 6\n-#define UCDN_SCRIPT_SYRIAC 7\n-#define UCDN_SCRIPT_THAANA 8\n-#define UCDN_SCRIPT_DEVANAGARI 9\n-#define UCDN_SCRIPT_BENGALI 10\n-#define UCDN_SCRIPT_GURMUKHI 11\n-#define UCDN_SCRIPT_GUJARATI 12\n-#define UCDN_SCRIPT_ORIYA 13\n-#define UCDN_SCRIPT_TAMIL 14\n-#define UCDN_SCRIPT_TELUGU 15\n-#define UCDN_SCRIPT_KANNADA 16\n-#define UCDN_SCRIPT_MALAYALAM 17\n-#define UCDN_SCRIPT_SINHALA 18\n-#define UCDN_SCRIPT_THAI 19\n-#define UCDN_SCRIPT_LAO 20\n-#define UCDN_SCRIPT_TIBETAN 21\n-#define UCDN_SCRIPT_MYANMAR 22\n-#define UCDN_SCRIPT_GEORGIAN 23\n-#define UCDN_SCRIPT_HANGUL 24\n-#define UCDN_SCRIPT_ETHIOPIC 25\n-#define UCDN_SCRIPT_CHEROKEE 26\n-#define UCDN_SCRIPT_CANADIAN_ABORIGINAL 27\n-#define UCDN_SCRIPT_OGHAM 28\n-#define UCDN_SCRIPT_RUNIC 29\n-#define UCDN_SCRIPT_KHMER 30\n-#define UCDN_SCRIPT_MONGOLIAN 31\n-#define UCDN_SCRIPT_HIRAGANA 32\n-#define UCDN_SCRIPT_KATAKANA 33\n-#define UCDN_SCRIPT_BOPOMOFO 34\n-#define UCDN_SCRIPT_HAN 35\n-#define UCDN_SCRIPT_YI 36\n-#define UCDN_SCRIPT_OLD_ITALIC 37\n-#define UCDN_SCRIPT_GOTHIC 38\n-#define UCDN_SCRIPT_DESERET 39\n-#define UCDN_SCRIPT_INHERITED 40\n-#define UCDN_SCRIPT_TAGALOG 41\n-#define UCDN_SCRIPT_HANUNOO 42\n-#define UCDN_SCRIPT_BUHID 43\n-#define UCDN_SCRIPT_TAGBANWA 44\n-#define UCDN_SCRIPT_LIMBU 45\n-#define UCDN_SCRIPT_TAI_LE 46\n-#define UCDN_SCRIPT_LINEAR_B 47\n-#define UCDN_SCRIPT_UGARITIC 48\n-#define UCDN_SCRIPT_SHAVIAN 49\n-#define UCDN_SCRIPT_OSMANYA 50\n-#define UCDN_SCRIPT_CYPRIOT 51\n-#define UCDN_SCRIPT_BRAILLE 52\n-#define UCDN_SCRIPT_BUGINESE 53\n-#define UCDN_SCRIPT_COPTIC 54\n-#define UCDN_SCRIPT_NEW_TAI_LUE 55\n-#define UCDN_SCRIPT_GLAGOLITIC 56\n-#define UCDN_SCRIPT_TIFINAGH 57\n-#define UCDN_SCRIPT_SYLOTI_NAGRI 58\n-#define UCDN_SCRIPT_OLD_PERSIAN 59\n-#define UCDN_SCRIPT_KHAROSHTHI 60\n-#define UCDN_SCRIPT_BALINESE 61\n-#define UCDN_SCRIPT_CUNEIFORM 62\n-#define UCDN_SCRIPT_PHOENICIAN 63\n-#define UCDN_SCRIPT_PHAGS_PA 64\n-#define UCDN_SCRIPT_NKO 65\n-#define UCDN_SCRIPT_SUNDANESE 66\n-#define UCDN_SCRIPT_LEPCHA 67\n-#define UCDN_SCRIPT_OL_CHIKI 68\n-#define UCDN_SCRIPT_VAI 69\n-#define UCDN_SCRIPT_SAURASHTRA 70\n-#define UCDN_SCRIPT_KAYAH_LI 71\n-#define UCDN_SCRIPT_REJANG 72\n-#define UCDN_SCRIPT_LYCIAN 73\n-#define UCDN_SCRIPT_CARIAN 74\n-#define UCDN_SCRIPT_LYDIAN 75\n-#define UCDN_SCRIPT_CHAM 76\n-#define UCDN_SCRIPT_TAI_THAM 77\n-#define UCDN_SCRIPT_TAI_VIET 78\n-#define UCDN_SCRIPT_AVESTAN 79\n-#define UCDN_SCRIPT_EGYPTIAN_HIEROGLYPHS 80\n-#define UCDN_SCRIPT_SAMARITAN 81\n-#define UCDN_SCRIPT_LISU 82\n-#define UCDN_SCRIPT_BAMUM 83\n-#define UCDN_SCRIPT_JAVANESE 84\n-#define UCDN_SCRIPT_MEETEI_MAYEK 85\n-#define UCDN_SCRIPT_IMPERIAL_ARAMAIC 86\n-#define UCDN_SCRIPT_OLD_SOUTH_ARABIAN 87\n-#define UCDN_SCRIPT_INSCRIPTIONAL_PARTHIAN 88\n-#define UCDN_SCRIPT_INSCRIPTIONAL_PAHLAVI 89\n-#define UCDN_SCRIPT_OLD_TURKIC 90\n-#define UCDN_SCRIPT_KAITHI 91\n-#define UCDN_SCRIPT_BATAK 92\n-#define UCDN_SCRIPT_BRAHMI 93\n-#define UCDN_SCRIPT_MANDAIC 94\n-#define UCDN_SCRIPT_CHAKMA 95\n-#define UCDN_SCRIPT_MEROITIC_CURSIVE 96\n-#define UCDN_SCRIPT_MEROITIC_HIEROGLYPHS 97\n-#define UCDN_SCRIPT_MIAO 98\n-#define UCDN_SCRIPT_SHARADA 99\n-#define UCDN_SCRIPT_SORA_SOMPENG 100\n-#define UCDN_SCRIPT_TAKRI 101\n-#define UCDN_SCRIPT_UNKNOWN 102\n-#define UCDN_SCRIPT_BASSA_VAH 103\n-#define UCDN_SCRIPT_CAUCASIAN_ALBANIAN 104\n-#define UCDN_SCRIPT_DUPLOYAN 105\n-#define UCDN_SCRIPT_ELBASAN 106\n-#define UCDN_SCRIPT_GRANTHA 107\n-#define UCDN_SCRIPT_KHOJKI 108\n-#define UCDN_SCRIPT_KHUDAWADI 109\n-#define UCDN_SCRIPT_LINEAR_A 110\n-#define UCDN_SCRIPT_MAHAJANI 111\n-#define UCDN_SCRIPT_MANICHAEAN 112\n-#define UCDN_SCRIPT_MENDE_KIKAKUI 113\n-#define UCDN_SCRIPT_MODI 114\n-#define UCDN_SCRIPT_MRO 115\n-#define UCDN_SCRIPT_NABATAEAN 116\n-#define UCDN_SCRIPT_OLD_NORTH_ARABIAN 117\n-#define UCDN_SCRIPT_OLD_PERMIC 118\n-#define UCDN_SCRIPT_PAHAWH_HMONG 119\n-#define UCDN_SCRIPT_PALMYRENE 120\n-#define UCDN_SCRIPT_PAU_CIN_HAU 121\n-#define UCDN_SCRIPT_PSALTER_PAHLAVI 122\n-#define UCDN_SCRIPT_SIDDHAM 123\n-#define UCDN_SCRIPT_TIRHUTA 124\n-#define UCDN_SCRIPT_WARANG_CITI 125\n-#define UCDN_SCRIPT_AHOM 126\n-#define UCDN_SCRIPT_ANATOLIAN_HIEROGLYPHS 127\n-#define UCDN_SCRIPT_HATRAN 128\n-#define UCDN_SCRIPT_MULTANI 129\n-#define UCDN_SCRIPT_OLD_HUNGARIAN 130\n-#define UCDN_SCRIPT_SIGNWRITING 131\n-#define UCDN_SCRIPT_ADLAM 132\n-#define UCDN_SCRIPT_BHAIKSUKI 133\n-#define UCDN_SCRIPT_MARCHEN 134\n-#define UCDN_SCRIPT_NEWA 135\n-#define UCDN_SCRIPT_OSAGE 136\n-#define UCDN_SCRIPT_TANGUT 137\n-#define UCDN_SCRIPT_MASARAM_GONDI 138\n-#define UCDN_SCRIPT_NUSHU 139\n-#define UCDN_SCRIPT_SOYOMBO 140\n-#define UCDN_SCRIPT_ZANABAZAR_SQUARE 141\n-#define UCDN_SCRIPT_DOGRA 142\n-#define UCDN_SCRIPT_GUNJALA_GONDI 143\n-#define UCDN_SCRIPT_HANIFI_ROHINGYA 144\n-#define UCDN_SCRIPT_MAKASAR 145\n-#define UCDN_SCRIPT_MEDEFAIDRIN 146\n-#define UCDN_SCRIPT_OLD_SOGDIAN 147\n-#define UCDN_SCRIPT_SOGDIAN 148\n-\n-#define UCDN_GENERAL_CATEGORY_CC 0\n-#define UCDN_GENERAL_CATEGORY_CF 1\n-#define UCDN_GENERAL_CATEGORY_CN 2\n-#define UCDN_GENERAL_CATEGORY_CO 3\n-#define UCDN_GENERAL_CATEGORY_CS 4\n-#define UCDN_GENERAL_CATEGORY_LL 5\n-#define UCDN_GENERAL_CATEGORY_LM 6\n-#define UCDN_GENERAL_CATEGORY_LO 7\n-#define UCDN_GENERAL_CATEGORY_LT 8\n-#define UCDN_GENERAL_CATEGORY_LU 9\n-#define UCDN_GENERAL_CATEGORY_MC 10\n-#define UCDN_GENERAL_CATEGORY_ME 11\n-#define UCDN_GENERAL_CATEGORY_MN 12\n-#define UCDN_GENERAL_CATEGORY_ND 13\n-#define UCDN_GENERAL_CATEGORY_NL 14\n-#define UCDN_GENERAL_CATEGORY_NO 15\n-#define UCDN_GENERAL_CATEGORY_PC 16\n-#define UCDN_GENERAL_CATEGORY_PD 17\n-#define UCDN_GENERAL_CATEGORY_PE 18\n-#define UCDN_GENERAL_CATEGORY_PF 19\n-#define UCDN_GENERAL_CATEGORY_PI 20\n-#define UCDN_GENERAL_CATEGORY_PO 21\n-#define UCDN_GENERAL_CATEGORY_PS 22\n-#define UCDN_GENERAL_CATEGORY_SC 23\n-#define UCDN_GENERAL_CATEGORY_SK 24\n-#define UCDN_GENERAL_CATEGORY_SM 25\n-#define UCDN_GENERAL_CATEGORY_SO 26\n-#define UCDN_GENERAL_CATEGORY_ZL 27\n-#define UCDN_GENERAL_CATEGORY_ZP 28\n-#define UCDN_GENERAL_CATEGORY_ZS 29\n-\n-#define UCDN_BIDI_CLASS_L 0\n-#define UCDN_BIDI_CLASS_LRE 1\n-#define UCDN_BIDI_CLASS_LRO 2\n-#define UCDN_BIDI_CLASS_R 3\n-#define UCDN_BIDI_CLASS_AL 4\n-#define UCDN_BIDI_CLASS_RLE 5\n-#define UCDN_BIDI_CLASS_RLO 6\n-#define UCDN_BIDI_CLASS_PDF 7\n-#define UCDN_BIDI_CLASS_EN 8\n-#define UCDN_BIDI_CLASS_ES 9\n-#define UCDN_BIDI_CLASS_ET 10\n-#define UCDN_BIDI_CLASS_AN 11\n-#define UCDN_BIDI_CLASS_CS 12\n-#define UCDN_BIDI_CLASS_NSM 13\n-#define UCDN_BIDI_CLASS_BN 14\n-#define UCDN_BIDI_CLASS_B 15\n-#define UCDN_BIDI_CLASS_S 16\n-#define UCDN_BIDI_CLASS_WS 17\n-#define UCDN_BIDI_CLASS_ON 18\n-#define UCDN_BIDI_CLASS_LRI 19\n-#define UCDN_BIDI_CLASS_RLI 20\n-#define UCDN_BIDI_CLASS_FSI 21\n-#define UCDN_BIDI_CLASS_PDI 22\n-\n-\/* index tables for the database records *\/\n-#define SHIFT1 5\n-#define SHIFT2 3\n-static const unsigned char index0[] = {\n-    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n-    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n-    39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 55, 56, 56, 56, 57,\n-    58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 65, 66, 67, 68,\n-    69, 70, 71, 65, 66, 67, 68, 69, 70, 71, 65, 66, 67, 68, 69, 70, 71, 65,\n-    66, 67, 68, 69, 70, 71, 65, 66, 67, 68, 69, 70, 71, 65, 72, 73, 73, 73,\n-    73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 52, 75, 76, 77, 78, 79,\n-    80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,\n-    98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 106, 108, 109, 110, 106,\n-    111, 111, 111, 112, 113, 114, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 115, 115, 116, 117, 118, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 119, 120, 121, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 122, 122, 123, 124, 106, 106, 125, 126, 127, 127, 127, 127,\n-    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n-    127, 127, 127, 127, 127, 128, 127, 127, 129, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 130, 131, 132, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 133, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 134, 135, 136, 137, 138, 139,\n-    140, 141, 142, 142, 143, 106, 106, 106, 106, 106, 144, 106, 106, 106,\n-    106, 106, 106, 106, 145, 146, 106, 106, 147, 106, 148, 106, 149, 150,\n-    151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 160, 160, 160, 161, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 162, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 163, 164, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 165, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,\n-    166, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 52, 52,\n-    168, 167, 167, 167, 167, 169, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 169, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 170, 171, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,\n-    106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    172, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n-    74, 74, 74, 74, 172,\n-};\n-\n-static const unsigned short index1[] = {\n-    0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 0, 0, 0, 14, 15,\n-    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 29, 31, 32,\n-    33, 34, 35, 27, 30, 29, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n-    47, 48, 27, 27, 49, 27, 27, 27, 27, 27, 27, 27, 50, 51, 52, 27, 53, 54,\n-    53, 54, 54, 54, 54, 54, 55, 54, 54, 54, 56, 57, 58, 59, 60, 61, 62, 63,\n-    64, 64, 65, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 65, 77, 78,\n-    79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n-    97, 97, 97, 97, 98, 98, 98, 98, 99, 100, 101, 101, 101, 101, 102, 103,\n-    101, 101, 101, 101, 101, 101, 104, 105, 101, 101, 101, 101, 101, 101,\n-    101, 101, 101, 101, 101, 101, 106, 107, 107, 107, 108, 109, 110, 110,\n-    110, 110, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 120,\n-    120, 121, 122, 119, 123, 124, 125, 126, 127, 127, 127, 127, 128, 129,\n-    130, 131, 132, 133, 134, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n-    127, 127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 144, 144,\n-    145, 146, 147, 148, 127, 127, 127, 127, 127, 127, 149, 149, 149, 149,\n-    150, 151, 152, 119, 153, 154, 155, 155, 155, 156, 157, 158, 159, 159,\n-    160, 161, 162, 163, 164, 165, 166, 166, 166, 167, 144, 168, 119, 119,\n-    119, 119, 119, 119, 127, 127, 169, 170, 119, 119, 171, 125, 172, 173,\n-    174, 175, 176, 177, 177, 177, 177, 177, 177, 178, 179, 180, 181, 177,\n-    182, 183, 184, 177, 185, 186, 187, 188, 188, 189, 190, 191, 192, 193,\n-    194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 203, 204, 205, 206,\n-    207, 208, 209, 210, 211, 212, 213, 119, 214, 215, 216, 217, 217, 218,\n-    219, 220, 221, 222, 223, 119, 224, 225, 226, 227, 228, 229, 230, 231,\n-    231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 119, 242, 243,\n-    244, 245, 246, 243, 247, 248, 249, 250, 251, 119, 252, 253, 254, 255,\n-    256, 257, 258, 259, 259, 258, 259, 260, 261, 262, 263, 264, 265, 266,\n-    119, 267, 268, 269, 270, 271, 271, 270, 272, 273, 274, 275, 276, 277,\n-    278, 279, 280, 119, 281, 282, 283, 284, 284, 284, 284, 285, 286, 287,\n-    288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 295, 295, 298, 299,\n-    296, 300, 301, 302, 303, 304, 305, 119, 306, 307, 307, 307, 307, 307,\n-    308, 309, 310, 311, 312, 313, 119, 119, 119, 119, 314, 315, 316, 317,\n-    318, 319, 320, 321, 322, 323, 324, 325, 119, 119, 119, 119, 326, 327,\n-    328, 329, 330, 331, 332, 333, 334, 335, 334, 334, 334, 336, 337, 338,\n-    339, 340, 341, 342, 341, 341, 341, 343, 344, 345, 346, 347, 119, 119,\n-    119, 119, 348, 348, 348, 348, 348, 349, 350, 351, 352, 353, 354, 355,\n-    356, 357, 358, 348, 359, 360, 352, 361, 362, 362, 362, 362, 363, 364,\n-    365, 365, 365, 365, 365, 366, 367, 367, 367, 367, 367, 367, 367, 367,\n-    367, 367, 367, 367, 368, 368, 368, 368, 368, 368, 368, 368, 368, 369,\n-    369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 370, 370, 370, 370,\n-    370, 370, 370, 370, 370, 371, 372, 371, 370, 370, 370, 370, 370, 371,\n-    370, 370, 370, 370, 371, 372, 371, 370, 372, 370, 370, 370, 370, 370,\n-    370, 370, 371, 370, 370, 370, 370, 370, 370, 370, 370, 373, 374, 375,\n-    376, 377, 370, 370, 378, 379, 380, 380, 380, 380, 380, 380, 380, 380,\n-    380, 380, 381, 382, 383, 384, 384, 384, 384, 384, 384, 384, 384, 384,\n-    384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384,\n-    384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384,\n-    384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384,\n-    384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384,\n-    384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 385, 384, 384,\n-    386, 387, 387, 388, 389, 389, 389, 389, 389, 389, 389, 389, 389, 390,\n-    391, 392, 393, 394, 395, 119, 396, 396, 397, 119, 398, 398, 399, 119,\n-    400, 401, 402, 119, 403, 403, 403, 403, 403, 403, 404, 405, 406, 407,\n-    408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 418, 418, 418,\n-    419, 418, 418, 418, 418, 418, 418, 420, 421, 418, 418, 418, 418, 422,\n-    384, 384, 384, 384, 384, 384, 384, 384, 423, 119, 424, 424, 424, 425,\n-    426, 427, 428, 429, 430, 431, 432, 432, 432, 433, 434, 119, 435, 435,\n-    435, 435, 435, 436, 435, 435, 435, 437, 438, 439, 440, 440, 440, 440,\n-    441, 441, 442, 443, 444, 444, 444, 444, 444, 444, 445, 446, 447, 448,\n-    449, 450, 451, 452, 451, 452, 453, 454, 455, 456, 119, 119, 119, 119,\n-    119, 119, 119, 119, 457, 458, 458, 458, 458, 458, 459, 460, 461, 462,\n-    463, 464, 465, 466, 467, 468, 469, 470, 470, 470, 471, 472, 473, 474,\n-    475, 475, 475, 475, 476, 477, 478, 479, 480, 480, 480, 480, 481, 482,\n-    483, 484, 485, 486, 487, 488, 489, 489, 489, 490, 100, 491, 362, 362,\n-    362, 362, 362, 492, 493, 119, 494, 495, 496, 497, 498, 499, 54, 54, 54,\n-    54, 500, 501, 56, 56, 56, 56, 56, 502, 503, 504, 54, 505, 54, 54, 54,\n-    506, 56, 56, 56, 507, 508, 509, 510, 511, 511, 511, 512, 513, 27, 27, 27,\n-    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 514, 515, 27,\n-    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 516, 517, 518, 519, 516, 517,\n-    516, 517, 518, 519, 516, 520, 516, 517, 516, 518, 516, 521, 516, 521,\n-    516, 521, 522, 523, 524, 525, 526, 527, 516, 528, 529, 530, 531, 532,\n-    533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546,\n-    547, 548, 56, 549, 550, 551, 552, 553, 554, 554, 555, 556, 557, 558, 559,\n-    119, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572,\n-    573, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 581, 583, 584,\n-    581, 585, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 587,\n-    596, 597, 587, 598, 599, 587, 587, 599, 587, 600, 601, 600, 587, 587,\n-    602, 587, 587, 587, 587, 587, 603, 587, 587, 581, 604, 605, 606, 607,\n-    608, 609, 610, 610, 610, 610, 610, 610, 610, 610, 611, 581, 581, 612,\n-    613, 587, 587, 614, 581, 581, 581, 581, 586, 607, 615, 616, 581, 581,\n-    581, 581, 581, 617, 119, 119, 119, 581, 618, 119, 119, 619, 619, 619,\n-    619, 619, 620, 620, 621, 622, 622, 622, 622, 622, 622, 622, 622, 622,\n-    623, 619, 624, 625, 625, 625, 625, 625, 625, 625, 625, 625, 626, 625,\n-    625, 625, 625, 627, 581, 625, 625, 628, 581, 629, 630, 631, 632, 633,\n-    634, 630, 581, 628, 635, 581, 636, 637, 638, 639, 640, 581, 581, 581,\n-    641, 642, 643, 644, 581, 645, 646, 581, 647, 581, 581, 648, 649, 650,\n-    651, 581, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 581,\n-    581, 581, 663, 581, 664, 581, 665, 666, 667, 668, 669, 670, 619, 671,\n-    671, 672, 581, 581, 581, 663, 673, 674, 587, 587, 587, 675, 676, 587,\n-    587, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677,\n-    677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677,\n-    677, 677, 677, 677, 677, 587, 587, 587, 587, 587, 587, 587, 587, 587,\n-    587, 587, 587, 587, 587, 587, 587, 678, 679, 679, 680, 587, 587, 587,\n-    587, 587, 587, 587, 681, 587, 587, 587, 682, 587, 587, 587, 587, 587,\n-    587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,\n-    587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 581,\n-    581, 581, 683, 581, 581, 587, 587, 684, 685, 686, 630, 581, 581, 687,\n-    581, 581, 581, 688, 581, 581, 581, 581, 581, 581, 689, 581, 581, 581,\n-    581, 581, 617, 690, 690, 690, 690, 690, 691, 692, 692, 692, 692, 692,\n-    693, 694, 695, 696, 697, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,\n-    698, 699, 700, 701, 365, 365, 365, 365, 702, 703, 704, 704, 704, 704,\n-    704, 704, 704, 705, 706, 707, 370, 370, 372, 119, 372, 372, 372, 372,\n-    372, 372, 372, 372, 708, 708, 708, 708, 709, 710, 711, 712, 713, 714,\n-    715, 716, 717, 718, 119, 119, 119, 119, 119, 119, 719, 719, 719, 720,\n-    719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 721, 119, 719, 719,\n-    719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 719,\n-    719, 719, 719, 719, 719, 719, 719, 719, 719, 719, 722, 119, 119, 119,\n-    723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 735,\n-    736, 735, 735, 735, 737, 738, 739, 740, 741, 742, 743, 743, 744, 743,\n-    743, 743, 745, 746, 747, 748, 749, 750, 750, 750, 750, 750, 751, 752,\n-    752, 752, 752, 752, 752, 752, 752, 752, 752, 753, 754, 755, 750, 750,\n-    750, 756, 723, 723, 723, 723, 724, 119, 757, 757, 758, 758, 758, 759,\n-    760, 761, 755, 755, 755, 762, 763, 764, 758, 758, 758, 765, 760, 761,\n-    755, 755, 755, 755, 766, 764, 755, 767, 768, 768, 768, 768, 768, 769,\n-    768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 755, 755, 755,\n-    770, 771, 755, 755, 755, 755, 755, 755, 755, 755, 755, 755, 755, 772,\n-    755, 755, 755, 770, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 774, 775, 581, 581, 581, 581, 581, 581, 581, 581, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    775, 775, 776, 776, 777, 776, 776, 776, 776, 776, 776, 776, 776, 776,\n-    776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776,\n-    776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776,\n-    776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776,\n-    776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776,\n-    776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 776, 778,\n-    779, 779, 779, 779, 779, 779, 780, 119, 781, 781, 781, 781, 781, 782,\n-    783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783,\n-    783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783, 783,\n-    783, 783, 783, 783, 783, 784, 783, 783, 785, 786, 119, 119, 101, 101,\n-    101, 101, 101, 787, 788, 789, 101, 101, 101, 790, 791, 791, 791, 791,\n-    791, 791, 791, 791, 792, 793, 794, 119, 64, 64, 795, 796, 797, 27, 798,\n-    27, 27, 27, 27, 27, 27, 27, 799, 800, 27, 801, 802, 27, 27, 803, 804,\n-    805, 119, 119, 119, 119, 119, 119, 806, 807, 808, 809, 810, 810, 811,\n-    812, 813, 814, 815, 815, 815, 815, 815, 815, 816, 119, 817, 818, 818,\n-    818, 818, 818, 819, 820, 821, 822, 823, 824, 825, 825, 826, 827, 828,\n-    829, 830, 830, 831, 832, 833, 833, 834, 835, 836, 837, 367, 367, 367,\n-    838, 839, 840, 840, 840, 840, 840, 841, 842, 843, 844, 845, 846, 847,\n-    348, 352, 848, 849, 849, 849, 849, 849, 850, 851, 119, 852, 853, 854,\n-    855, 348, 348, 856, 857, 858, 858, 858, 858, 858, 858, 859, 860, 861,\n-    119, 119, 862, 863, 864, 865, 119, 866, 866, 866, 119, 372, 372, 54, 54,\n-    54, 54, 54, 867, 868, 119, 869, 869, 869, 869, 869, 869, 869, 869, 869,\n-    869, 863, 863, 863, 863, 870, 871, 872, 873, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875, 875, 876, 875,\n-    875, 875, 874, 875, 875, 876, 875, 875, 875, 875, 875, 875, 874, 875,\n-    875, 876, 875, 875, 875, 874, 875, 875, 876, 875, 875, 875, 874, 875,\n-    875, 877, 119, 368, 368, 878, 879, 369, 369, 369, 369, 369, 880, 881,\n-    881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881,\n-    881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881, 881,\n-    881, 881, 881, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882,\n-    882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882,\n-    882, 882, 882, 882, 882, 882, 882, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 774, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 883, 775, 775, 775, 775, 884, 119, 885,\n-    886, 120, 887, 888, 889, 890, 120, 127, 127, 127, 127, 127, 127, 127,\n-    127, 127, 127, 127, 127, 891, 892, 893, 119, 894, 127, 127, 127, 127,\n-    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n-    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,\n-    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 895, 119,\n-    119, 127, 127, 127, 127, 127, 127, 127, 127, 896, 127, 127, 127, 127,\n-    127, 127, 119, 119, 119, 119, 119, 127, 897, 898, 898, 899, 900, 901,\n-    902, 903, 904, 905, 906, 907, 908, 909, 910, 169, 127, 127, 127, 127,\n-    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 911, 912,\n-    913, 914, 915, 916, 917, 917, 918, 919, 920, 920, 921, 922, 923, 924,\n-    925, 925, 925, 925, 926, 927, 927, 927, 928, 929, 929, 929, 930, 931,\n-    932, 119, 933, 934, 935, 934, 934, 936, 934, 934, 937, 934, 938, 934,\n-    938, 119, 119, 119, 119, 934, 934, 934, 934, 934, 934, 934, 934, 934,\n-    934, 934, 934, 934, 934, 934, 939, 940, 941, 941, 941, 941, 941, 942,\n-    610, 943, 943, 943, 943, 943, 943, 944, 945, 946, 947, 581, 948, 949,\n-    119, 119, 119, 119, 119, 610, 610, 610, 610, 610, 950, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 951,\n-    951, 951, 952, 953, 953, 953, 953, 953, 953, 954, 119, 955, 956, 956,\n-    957, 958, 958, 958, 958, 959, 960, 961, 961, 962, 963, 964, 964, 964,\n-    964, 965, 966, 967, 967, 967, 968, 969, 969, 969, 969, 970, 969, 971,\n-    119, 119, 119, 119, 119, 972, 972, 972, 972, 972, 973, 973, 973, 973,\n-    973, 974, 974, 974, 974, 974, 974, 975, 975, 975, 976, 977, 978, 979,\n-    979, 979, 979, 980, 981, 981, 981, 981, 982, 983, 983, 983, 983, 983,\n-    119, 984, 984, 984, 984, 984, 984, 985, 986, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 987,\n-    987, 987, 987, 987, 987, 987, 987, 987, 987, 987, 987, 987, 987, 987,\n-    987, 987, 987, 987, 987, 987, 987, 987, 987, 987, 987, 987, 987, 987,\n-    987, 987, 987, 987, 987, 987, 987, 987, 987, 988, 119, 987, 987, 989,\n-    119, 987, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 990, 991, 992, 992, 992, 992, 993,\n-    994, 995, 995, 996, 997, 998, 998, 999, 1000, 1001, 1001, 1001, 1002,\n-    1003, 1004, 119, 119, 119, 119, 119, 119, 1005, 1005, 1006, 1007, 1008,\n-    1008, 1009, 1010, 1011, 1011, 1011, 1012, 119, 119, 119, 119, 119, 119,\n-    119, 119, 1013, 1013, 1013, 1013, 1014, 1014, 1014, 1015, 1016, 1016,\n-    1017, 1016, 1016, 1016, 1016, 1016, 1018, 1019, 1020, 1021, 1022, 1022,\n-    1023, 1024, 1025, 1026, 1027, 1028, 1029, 1029, 1029, 1030, 1031, 1031,\n-    1031, 1032, 119, 119, 119, 119, 1033, 1034, 1033, 1033, 1035, 1036, 1037,\n-    119, 1038, 1038, 1038, 1038, 1038, 1038, 1039, 1040, 1041, 1041, 1042,\n-    1043, 1044, 1044, 1045, 1046, 1047, 1047, 1048, 1049, 119, 1050, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 1051, 1051, 1051, 1051,\n-    1051, 1051, 1051, 1051, 1051, 1052, 119, 119, 119, 119, 119, 119, 1053,\n-    1053, 1053, 1053, 1053, 1053, 1054, 119, 1055, 1055, 1055, 1055, 1055,\n-    1055, 1056, 1057, 1058, 1058, 1058, 1058, 1059, 119, 1060, 1061, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 1062, 1062, 1062, 1063, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 1064,\n-    1064, 1064, 1065, 1066, 119, 1067, 1067, 1068, 1069, 1070, 1071, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 1072, 1073, 1073, 1073, 1073, 1073, 1073, 1074,\n-    1075, 1076, 1077, 1078, 1079, 1080, 119, 1081, 1082, 1083, 1083, 1083,\n-    1083, 1083, 1084, 1085, 1086, 1087, 1088, 1088, 1088, 1089, 1090, 1091,\n-    1092, 1093, 1093, 1093, 1094, 1095, 1096, 1097, 1098, 119, 1099, 1099,\n-    1099, 1099, 1100, 119, 1101, 1102, 1102, 1102, 1102, 1102, 1103, 1104,\n-    1105, 1106, 1107, 1108, 1109, 1110, 1111, 119, 1112, 1112, 1113, 1112,\n-    1112, 1114, 1115, 1116, 119, 119, 119, 119, 119, 119, 119, 119, 1117,\n-    1118, 1119, 1120, 1119, 1121, 1122, 1122, 1122, 1122, 1122, 1123, 1124,\n-    1125, 1126, 1127, 1128, 1129, 1130, 1131, 1131, 1132, 1133, 1134, 1135,\n-    1136, 1137, 1138, 1139, 1140, 1140, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 1141, 1141, 1141, 1141,\n-    1141, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 119, 119, 119, 119, 1148,\n-    1148, 1148, 1148, 1148, 1148, 1149, 1150, 1151, 119, 1152, 1153, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 1154, 1154, 1154, 1154, 1154, 1155, 1156, 1157,\n-    1158, 1159, 1160, 1161, 119, 119, 119, 119, 1162, 1162, 1162, 1162, 1162,\n-    1162, 1163, 1164, 1165, 119, 1166, 1167, 1168, 1169, 119, 119, 1170,\n-    1170, 1170, 1170, 1170, 1171, 1172, 119, 1173, 1174, 119, 119, 119, 119,\n-    119, 119, 1175, 1175, 1175, 1176, 1177, 1178, 1179, 1180, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 1181, 1181, 1181, 1181, 1181, 1182,\n-    1183, 1184, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    1185, 1185, 1185, 1185, 1186, 1186, 1186, 1186, 1187, 1188, 1189, 1190,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 1191, 1192, 1193, 1193, 1193, 1193, 1194, 1195, 1196,\n-    119, 1197, 1198, 1199, 1199, 1199, 1199, 1200, 1201, 1202, 1203, 1204,\n-    119, 119, 119, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1206, 1207,\n-    1208, 1207, 1207, 1207, 1209, 1210, 1211, 1212, 119, 1213, 1214, 1215,\n-    1216, 1217, 1218, 1218, 1218, 1219, 1220, 1220, 1221, 1222, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 1223, 1224, 1225, 1225, 1225, 1225,\n-    1226, 1227, 1228, 119, 1229, 1230, 1231, 1232, 1233, 1233, 1233, 1234,\n-    1235, 1236, 1237, 1238, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    1239, 1239, 1240, 1241, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,\n-    1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,\n-    1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,\n-    1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,\n-    1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 1244, 1244, 1244, 1244, 1244, 1244,\n-    1244, 1244, 1244, 1244, 1244, 1244, 1244, 1245, 1246, 119, 1242, 1242,\n-    1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,\n-    1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1247, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 1248, 1248, 1248, 1248, 1248,\n-    1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,\n-    1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,\n-    1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,\n-    1248, 1248, 1249, 1248, 1248, 1248, 1248, 1250, 1251, 1248, 1248, 1248,\n-    1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,\n-    1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,\n-    1248, 1248, 1252, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,\n-    1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,\n-    1253, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 1254,\n-    1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,\n-    1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,\n-    1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,\n-    1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,\n-    1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1255, 1254, 1254, 1254,\n-    1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1256,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 791, 791, 791, 791, 791,\n-    791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791,\n-    791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791,\n-    791, 791, 791, 791, 791, 791, 1257, 1258, 1258, 1258, 1259, 1260, 1261,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 1262, 1262,\n-    1262, 1263, 1264, 119, 1265, 1265, 1265, 1265, 1265, 1265, 1266, 1267,\n-    1268, 119, 1269, 1270, 1271, 1265, 1265, 1272, 1265, 1265, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 1273, 1273, 1273, 1273, 1274, 1274, 1274, 1274,\n-    1275, 1275, 1276, 1277, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1279, 119,\n-    1280, 1281, 1281, 1281, 1281, 1282, 119, 1283, 1284, 1285, 119, 119, 119,\n-    119, 119, 119, 119, 119, 1286, 119, 119, 119, 1287, 1287, 1287, 1287,\n-    1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,\n-    1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,\n-    1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,\n-    1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,\n-    1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1288, 119,\n-    1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,\n-    1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,\n-    1287, 1287, 1287, 1287, 1287, 1287, 1289, 119, 1290, 735, 735, 735, 735,\n-    735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735,\n-    735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735,\n-    735, 735, 1291, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 1292,\n-    1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,\n-    1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,\n-    1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,\n-    1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,\n-    1293, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,\n-    1294, 1294, 1295, 1294, 1296, 1294, 1297, 1294, 1298, 1299, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 610, 610, 610, 610, 610,\n-    610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610,\n-    610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 1300, 119, 610,\n-    610, 610, 610, 1301, 1302, 610, 610, 610, 610, 610, 610, 1303, 1304,\n-    1305, 1306, 1307, 1308, 610, 610, 610, 1309, 610, 610, 610, 610, 610,\n-    610, 610, 1310, 119, 119, 946, 946, 946, 946, 946, 946, 946, 946, 1311,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 941, 941, 1312, 119, 581, 581, 581, 581, 581,\n-    581, 581, 581, 581, 581, 617, 119, 941, 941, 941, 1313, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 1314,\n-    1314, 1314, 1315, 1316, 1316, 1317, 1314, 1314, 1318, 1319, 1316, 1316,\n-    1314, 1314, 1314, 1315, 1316, 1316, 1320, 1321, 1322, 1318, 1323, 1324,\n-    1316, 1314, 1314, 1314, 1315, 1316, 1316, 1325, 1326, 1327, 1328, 1316,\n-    1316, 1316, 1329, 1330, 1331, 1332, 1316, 1316, 1317, 1314, 1314, 1318,\n-    1316, 1316, 1316, 1314, 1314, 1314, 1315, 1316, 1316, 1317, 1314, 1314,\n-    1318, 1316, 1316, 1316, 1314, 1314, 1314, 1315, 1316, 1316, 1317, 1314,\n-    1314, 1318, 1316, 1316, 1316, 1314, 1314, 1314, 1315, 1316, 1316, 1333,\n-    1314, 1314, 1314, 1334, 1316, 1316, 1335, 1336, 1314, 1314, 1337, 1316,\n-    1316, 1338, 1317, 1314, 1314, 1339, 1316, 1316, 1340, 1341, 1314, 1314,\n-    1342, 1316, 1316, 1316, 1343, 1314, 1314, 1314, 1334, 1316, 1316, 1335,\n-    1344, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346,\n-    1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,\n-    1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,\n-    1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1348, 1349, 1347,\n-    1347, 1347, 1347, 1347, 1350, 1351, 1346, 1352, 1353, 119, 1354, 1355,\n-    1347, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 1356, 1357, 1357,\n-    1358, 1359, 1360, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,\n-    1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,\n-    1361, 1362, 1363, 1364, 119, 119, 119, 119, 119, 1365, 1365, 1365, 1365,\n-    1366, 1367, 1367, 1367, 1368, 1369, 1370, 1371, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 1372, 1373, 1373, 1373, 1373, 1373, 1373, 1374, 1375, 119, 119, 119,\n-    119, 119, 119, 119, 119, 119, 1376, 127, 127, 127, 1377, 1378, 1379,\n-    1380, 1381, 1382, 1377, 1383, 1377, 1379, 1379, 1384, 127, 1385, 127,\n-    1386, 1387, 1385, 127, 1386, 119, 119, 119, 119, 119, 119, 1388, 119,\n-    1389, 1390, 1390, 1390, 1390, 1391, 1390, 1390, 1390, 1390, 1390, 1390,\n-    1390, 1390, 1390, 1390, 1390, 1390, 1391, 1392, 1390, 1393, 1394, 1390,\n-    1394, 1395, 1394, 1390, 1390, 1390, 1396, 1392, 620, 1397, 622, 622, 622,\n-    1398, 622, 622, 622, 622, 622, 622, 622, 1399, 622, 622, 622, 1400, 1401,\n-    1402, 622, 1403, 1392, 1392, 1392, 1392, 1392, 1392, 1404, 1405, 1405,\n-    1405, 1406, 1392, 755, 755, 755, 755, 755, 1407, 755, 1408, 1409, 1392,\n-    1410, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 723, 723, 723, 723, 1411,\n-    1412, 1413, 723, 723, 723, 723, 723, 723, 723, 723, 1414, 1415, 723,\n-    1416, 1417, 723, 723, 1418, 1419, 1420, 1421, 1416, 1390, 723, 723, 1422,\n-    1423, 723, 723, 723, 723, 723, 723, 723, 1424, 1425, 1426, 1427, 723,\n-    1428, 1429, 1426, 1430, 1431, 723, 723, 723, 1432, 1433, 1434, 723, 723,\n-    723, 723, 723, 723, 723, 723, 1435, 1436, 723, 1437, 643, 1438, 723,\n-    1439, 1440, 581, 1441, 723, 723, 723, 1390, 1442, 1443, 1390, 1390, 1444,\n-    1390, 1389, 1390, 1390, 1390, 1390, 1390, 1445, 1446, 1390, 1390, 1445,\n-    1447, 723, 723, 723, 723, 723, 723, 723, 723, 1448, 1449, 581, 581, 581,\n-    581, 1450, 1451, 723, 723, 723, 723, 1452, 723, 1453, 723, 1454, 1455,\n-    1456, 1392, 1390, 1457, 1458, 1459, 581, 581, 581, 581, 581, 581, 581,\n-    581, 581, 581, 581, 581, 581, 581, 1460, 1392, 581, 581, 581, 581, 581,\n-    581, 581, 581, 581, 581, 1461, 1462, 1392, 1392, 1392, 1392, 581, 1460,\n-    581, 581, 581, 581, 581, 581, 581, 1392, 581, 1463, 581, 581, 581, 581,\n-    581, 1392, 581, 581, 581, 1464, 1392, 1392, 1392, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 581, 1460, 723, 1465, 1466, 723, 1426, 1467, 723, 723,\n-    723, 723, 723, 723, 1468, 1469, 723, 723, 723, 723, 1470, 1392, 1471,\n-    1472, 1470, 1392, 1473, 1474, 723, 723, 723, 723, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1390, 1396, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,\n-    1392, 1392, 1392, 1392, 1392, 1392, 1392, 1475, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 1476, 775, 775, 775, 775, 775, 773,\n-    773, 773, 773, 773, 773, 1477, 775, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 774, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 883,\n-    775, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773,\n-    773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 773, 1478, 775, 775,\n-    775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775,\n-    775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775,\n-    775, 775, 775, 775, 775, 773, 773, 773, 774, 775, 775, 775, 775, 775,\n-    775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775,\n-    775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775,\n-    775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775,\n-    775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 1479, 1480,\n-    119, 119, 119, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,\n-    1481, 1481, 1481, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,\n-    119, 119, 119, 119, 119, 898, 898, 898, 898, 898, 898, 898, 898, 898,\n-    898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898, 898,\n-    898, 898, 898, 898, 898, 898, 898, 119, 119, 882, 882, 882, 882, 882,\n-    882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882,\n-    882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 882, 1482,\n-};\n-\n-static const unsigned short index2[] = {\n-    1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 1, 1, 1, 1, 1, 1, 7, 7, 7, 8,\n-    9, 10, 11, 12, 13, 14, 15, 11, 16, 17, 15, 18, 19, 20, 19, 21, 22, 22,\n-    22, 22, 22, 22, 22, 22, 22, 22, 19, 23, 24, 24, 24, 10, 15, 25, 25, 25,\n-    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 16, 26, 17,\n-    27, 28, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n-    29, 29, 29, 16, 30, 31, 24, 1, 1, 1, 1, 1, 1, 32, 1, 1, 33, 34, 35, 13,\n-    36, 13, 37, 38, 39, 40, 41, 42, 24, 43, 44, 27, 45, 46, 47, 47, 48, 49,\n-    38, 38, 39, 47, 41, 50, 51, 51, 51, 34, 52, 52, 52, 52, 52, 52, 53, 52,\n-    52, 52, 52, 52, 52, 52, 52, 52, 53, 52, 52, 52, 52, 52, 52, 54, 53, 52,\n-    52, 52, 52, 52, 53, 55, 55, 55, 56, 56, 56, 56, 55, 56, 55, 55, 55, 56,\n-    55, 55, 56, 56, 55, 56, 55, 55, 56, 56, 56, 54, 55, 55, 55, 56, 55, 56,\n-    55, 56, 52, 55, 52, 56, 52, 56, 52, 56, 52, 56, 52, 56, 52, 56, 52, 56,\n-    52, 55, 52, 55, 52, 56, 52, 56, 52, 56, 52, 55, 52, 56, 52, 56, 52, 56,\n-    52, 56, 52, 56, 53, 55, 52, 55, 53, 55, 52, 56, 52, 56, 55, 52, 56, 52,\n-    56, 52, 56, 53, 55, 53, 55, 52, 55, 52, 56, 52, 55, 55, 53, 55, 52, 55,\n-    52, 56, 52, 56, 53, 55, 52, 56, 52, 56, 52, 52, 56, 52, 56, 52, 56, 56,\n-    56, 52, 52, 56, 52, 56, 52, 52, 56, 52, 52, 52, 56, 56, 52, 52, 52, 52,\n-    56, 52, 52, 56, 52, 52, 52, 56, 56, 56, 52, 52, 56, 52, 52, 56, 52, 56,\n-    52, 56, 52, 52, 56, 52, 56, 56, 52, 56, 52, 52, 56, 52, 52, 52, 56, 52,\n-    56, 52, 52, 56, 56, 57, 52, 56, 56, 56, 57, 57, 57, 57, 52, 58, 56, 52,\n-    58, 56, 52, 58, 56, 52, 55, 52, 55, 52, 55, 52, 55, 52, 55, 52, 55, 52,\n-    55, 52, 55, 56, 52, 56, 56, 52, 58, 56, 52, 56, 52, 52, 52, 56, 52, 56,\n-    56, 56, 56, 56, 56, 56, 52, 52, 56, 52, 52, 56, 56, 52, 56, 52, 52, 52,\n-    52, 56, 56, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n-    56, 56, 56, 56, 57, 56, 56, 56, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60,\n-    60, 61, 61, 61, 61, 61, 61, 61, 62, 62, 63, 62, 60, 64, 65, 64, 64, 64,\n-    65, 64, 60, 60, 66, 61, 62, 62, 62, 62, 62, 62, 39, 39, 39, 39, 62, 39,\n-    62, 48, 59, 59, 59, 59, 59, 62, 62, 62, 62, 62, 67, 67, 60, 62, 61, 62,\n-    62, 62, 62, 62, 62, 62, 62, 62, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,\n-    68, 68, 68, 69, 70, 70, 70, 70, 69, 71, 70, 70, 70, 70, 70, 72, 72, 70,\n-    70, 70, 70, 72, 72, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 73, 73,\n-    73, 73, 73, 70, 70, 70, 70, 68, 68, 68, 68, 68, 68, 68, 68, 74, 68, 70,\n-    70, 70, 68, 68, 68, 70, 70, 75, 68, 68, 68, 70, 70, 70, 70, 68, 69, 70,\n-    70, 68, 76, 77, 77, 76, 77, 77, 76, 68, 68, 68, 68, 68, 78, 79, 78, 79,\n-    60, 80, 78, 79, 81, 81, 82, 79, 79, 79, 83, 78, 81, 81, 81, 81, 80, 62,\n-    78, 84, 78, 78, 78, 81, 78, 81, 78, 78, 79, 85, 85, 85, 85, 85, 85, 85,\n-    85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 81, 85, 85, 85, 85, 85, 85, 85,\n-    78, 78, 79, 79, 79, 79, 79, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n-    86, 86, 86, 86, 86, 86, 79, 86, 86, 86, 86, 86, 86, 86, 79, 79, 79, 79,\n-    79, 78, 79, 79, 78, 78, 78, 79, 79, 79, 78, 79, 78, 79, 78, 79, 78, 79,\n-    78, 79, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 87, 88, 79, 79,\n-    79, 79, 78, 79, 89, 78, 79, 78, 78, 79, 79, 78, 78, 78, 90, 91, 90, 90,\n-    90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91,\n-    91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 93, 92, 93, 93, 93, 93, 93, 93,\n-    93, 93, 93, 93, 93, 93, 93, 93, 90, 93, 90, 93, 90, 93, 90, 93, 90, 93,\n-    94, 95, 95, 96, 96, 95, 97, 97, 90, 93, 90, 93, 90, 93, 90, 90, 93, 90,\n-    93, 90, 93, 90, 93, 90, 93, 90, 93, 90, 93, 93, 81, 98, 98, 98, 98, 98,\n-    98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 81,\n-    81, 99, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101,\n-    101, 101, 102, 103, 81, 81, 104, 104, 105, 81, 106, 107, 107, 107, 107,\n-    106, 107, 107, 107, 108, 106, 107, 107, 107, 107, 107, 107, 106, 106,\n-    106, 106, 106, 106, 107, 107, 106, 107, 107, 108, 109, 107, 110, 111,\n-    112, 113, 114, 115, 116, 117, 118, 119, 119, 120, 121, 122, 123, 124,\n-    125, 126, 127, 125, 107, 106, 128, 118, 81, 81, 81, 81, 81, 81, 81, 81,\n-    129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 81, 81, 81, 81,\n-    129, 129, 129, 129, 125, 125, 81, 81, 81, 130, 130, 130, 130, 130, 131,\n-    132, 132, 133, 134, 134, 135, 136, 137, 138, 138, 139, 139, 139, 139,\n-    139, 139, 139, 139, 140, 141, 142, 143, 144, 81, 145, 143, 146, 146, 146,\n-    146, 146, 146, 146, 146, 147, 146, 146, 146, 146, 146, 146, 146, 146,\n-    146, 146, 148, 149, 150, 151, 152, 153, 154, 155, 96, 96, 156, 157, 139,\n-    139, 139, 139, 139, 157, 139, 139, 157, 158, 158, 158, 158, 158, 158,\n-    158, 158, 158, 158, 134, 159, 159, 160, 146, 146, 161, 146, 146, 146,\n-    146, 146, 146, 146, 146, 146, 146, 146, 145, 146, 139, 139, 139, 139,\n-    139, 139, 139, 131, 138, 139, 139, 139, 139, 157, 139, 162, 162, 139,\n-    139, 138, 157, 139, 139, 157, 146, 146, 163, 163, 163, 163, 163, 163,\n-    163, 163, 163, 163, 146, 146, 146, 164, 164, 146, 165, 165, 165, 165,\n-    165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 81, 166, 167, 168, 167,\n-    167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 169,\n-    170, 169, 169, 170, 169, 169, 170, 170, 170, 169, 170, 170, 169, 170,\n-    169, 169, 169, 170, 169, 170, 169, 170, 169, 170, 169, 169, 81, 81, 167,\n-    167, 167, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171,\n-    171, 171, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 171, 81,\n-    81, 81, 81, 81, 81, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,\n-    174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n-    174, 174, 174, 175, 175, 175, 175, 175, 175, 175, 176, 175, 177, 177,\n-    178, 179, 180, 181, 177, 81, 81, 176, 182, 182, 183, 183, 183, 183, 183,\n-    183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 184, 184, 184, 185,\n-    184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 184, 184, 184, 185,\n-    184, 184, 184, 184, 184, 81, 81, 186, 186, 186, 186, 186, 186, 186, 186,\n-    186, 186, 186, 186, 186, 186, 186, 81, 187, 187, 187, 187, 187, 187, 187,\n-    187, 187, 188, 188, 188, 81, 81, 189, 81, 167, 167, 167, 81, 81, 81, 81,\n-    81, 146, 146, 146, 146, 146, 81, 146, 146, 146, 146, 146, 146, 146, 146,\n-    81, 81, 81, 81, 81, 157, 139, 139, 139, 139, 139, 139, 131, 157, 139,\n-    139, 157, 139, 139, 157, 139, 139, 139, 157, 157, 157, 190, 191, 192,\n-    139, 139, 139, 157, 139, 139, 157, 157, 139, 139, 139, 139, 139, 193,\n-    193, 193, 194, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,\n-    195, 195, 195, 193, 194, 196, 195, 194, 194, 194, 193, 193, 193, 193,\n-    193, 193, 193, 193, 194, 194, 194, 194, 197, 194, 194, 195, 96, 156, 198,\n-    198, 193, 193, 193, 195, 195, 193, 193, 199, 199, 200, 200, 200, 200,\n-    200, 200, 200, 200, 200, 200, 201, 202, 195, 195, 195, 195, 195, 195,\n-    203, 204, 205, 205, 81, 203, 203, 203, 203, 203, 203, 203, 203, 81, 81,\n-    203, 203, 81, 81, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,\n-    203, 203, 203, 81, 203, 203, 203, 203, 203, 203, 203, 81, 203, 81, 81,\n-    81, 203, 203, 203, 203, 81, 81, 206, 203, 205, 205, 205, 204, 204, 204,\n-    204, 81, 81, 205, 205, 81, 81, 205, 205, 207, 203, 81, 81, 81, 81, 81,\n-    81, 81, 81, 205, 81, 81, 81, 81, 203, 203, 81, 203, 203, 203, 204, 204,\n-    81, 81, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 203, 203, 209,\n-    209, 210, 210, 210, 210, 210, 211, 212, 213, 203, 214, 215, 81, 81, 216,\n-    216, 217, 81, 218, 218, 218, 218, 218, 218, 81, 81, 81, 81, 218, 218, 81,\n-    81, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218,\n-    81, 218, 218, 218, 218, 218, 218, 218, 81, 218, 218, 81, 218, 218, 81,\n-    218, 218, 81, 81, 219, 81, 217, 217, 217, 216, 216, 81, 81, 81, 81, 216,\n-    216, 81, 81, 216, 216, 220, 81, 81, 81, 216, 81, 81, 81, 81, 81, 81, 81,\n-    218, 218, 218, 218, 81, 218, 81, 81, 81, 81, 81, 81, 81, 221, 221, 221,\n-    221, 221, 221, 221, 221, 221, 221, 216, 216, 218, 218, 218, 216, 222, 81,\n-    81, 223, 223, 224, 81, 225, 225, 225, 225, 225, 225, 225, 225, 225, 81,\n-    225, 225, 225, 81, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225,\n-    225, 225, 225, 81, 225, 225, 225, 225, 225, 225, 225, 81, 225, 225, 81,\n-    225, 225, 225, 225, 225, 81, 81, 226, 225, 224, 224, 224, 223, 223, 223,\n-    223, 223, 81, 223, 223, 224, 81, 224, 224, 227, 81, 81, 225, 81, 81, 81,\n-    81, 81, 81, 81, 225, 225, 223, 223, 81, 81, 228, 228, 228, 228, 228, 228,\n-    228, 228, 228, 228, 229, 230, 81, 81, 81, 81, 81, 81, 81, 225, 223, 223,\n-    223, 223, 223, 223, 81, 231, 232, 232, 81, 233, 233, 233, 233, 233, 233,\n-    233, 233, 81, 81, 233, 233, 81, 81, 233, 233, 233, 233, 233, 233, 233,\n-    233, 233, 233, 233, 233, 233, 233, 81, 233, 233, 233, 233, 233, 233, 233,\n-    81, 233, 233, 81, 233, 233, 233, 233, 233, 81, 81, 234, 233, 232, 231,\n-    232, 231, 231, 231, 231, 81, 81, 232, 232, 81, 81, 232, 232, 235, 81, 81,\n-    81, 81, 81, 81, 81, 81, 231, 232, 81, 81, 81, 81, 233, 233, 81, 233, 233,\n-    233, 231, 231, 81, 81, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236,\n-    237, 233, 238, 238, 238, 238, 238, 238, 81, 81, 239, 240, 81, 240, 240,\n-    240, 240, 240, 240, 81, 81, 81, 240, 240, 240, 81, 240, 240, 240, 240,\n-    81, 81, 81, 240, 240, 81, 240, 81, 240, 240, 81, 81, 81, 240, 240, 81,\n-    81, 81, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 81, 81, 81, 81,\n-    241, 241, 239, 241, 241, 81, 81, 81, 241, 241, 241, 81, 241, 241, 241,\n-    242, 81, 81, 240, 81, 81, 81, 81, 81, 81, 241, 81, 81, 81, 81, 81, 81,\n-    243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 244, 244, 244, 245,\n-    245, 245, 245, 245, 245, 246, 245, 81, 81, 81, 81, 81, 247, 248, 248,\n-    248, 247, 249, 249, 249, 249, 249, 249, 249, 249, 81, 249, 249, 249, 81,\n-    249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,\n-    249, 249, 81, 81, 81, 249, 247, 247, 247, 248, 248, 248, 248, 81, 247,\n-    247, 247, 81, 247, 247, 247, 250, 81, 81, 81, 81, 81, 81, 81, 251, 252,\n-    81, 249, 249, 249, 81, 81, 81, 81, 81, 249, 249, 247, 247, 81, 81, 253,\n-    253, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254,\n-    254, 254, 255, 256, 257, 258, 258, 259, 256, 256, 256, 256, 256, 256,\n-    256, 256, 81, 256, 256, 256, 81, 256, 256, 256, 256, 256, 256, 256, 256,\n-    256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 81, 256, 256, 256, 256,\n-    256, 81, 81, 260, 256, 258, 261, 258, 258, 258, 258, 258, 81, 261, 258,\n-    258, 81, 258, 258, 257, 262, 81, 81, 81, 81, 81, 81, 81, 258, 258, 81,\n-    81, 81, 81, 81, 81, 81, 256, 81, 256, 256, 257, 257, 81, 81, 263, 263,\n-    263, 263, 263, 263, 263, 263, 263, 263, 81, 256, 256, 81, 81, 81, 81, 81,\n-    264, 264, 265, 265, 81, 266, 266, 266, 266, 266, 266, 266, 266, 81, 266,\n-    266, 266, 81, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266,\n-    266, 266, 266, 266, 266, 267, 267, 266, 265, 265, 265, 264, 264, 264,\n-    264, 81, 265, 265, 265, 81, 265, 265, 265, 267, 266, 268, 81, 81, 81, 81,\n-    266, 266, 266, 265, 269, 269, 269, 269, 269, 269, 269, 266, 266, 266,\n-    264, 264, 81, 81, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 269,\n-    269, 269, 269, 269, 269, 269, 269, 269, 271, 266, 266, 266, 266, 266,\n-    266, 81, 81, 272, 272, 81, 273, 273, 273, 273, 273, 273, 273, 273, 273,\n-    273, 273, 273, 273, 273, 273, 273, 273, 273, 81, 81, 81, 273, 273, 273,\n-    273, 273, 273, 273, 273, 81, 273, 273, 273, 273, 273, 273, 273, 273, 273,\n-    81, 273, 81, 81, 81, 81, 274, 81, 81, 81, 81, 272, 272, 272, 275, 275,\n-    275, 81, 275, 81, 272, 272, 272, 272, 272, 272, 272, 272, 81, 81, 81, 81,\n-    81, 81, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 81, 81, 272,\n-    272, 277, 81, 81, 81, 81, 278, 278, 278, 278, 278, 278, 278, 278, 278,\n-    278, 278, 278, 278, 278, 278, 278, 279, 278, 278, 279, 279, 279, 279,\n-    280, 280, 281, 81, 81, 81, 81, 282, 278, 278, 278, 278, 278, 278, 283,\n-    279, 284, 284, 284, 284, 279, 279, 279, 285, 286, 286, 286, 286, 286,\n-    286, 286, 286, 286, 286, 287, 287, 81, 81, 81, 81, 81, 288, 288, 81, 288,\n-    81, 81, 288, 288, 81, 288, 81, 81, 288, 81, 81, 81, 81, 81, 81, 288, 288,\n-    288, 288, 81, 288, 288, 288, 288, 288, 288, 288, 81, 288, 288, 288, 81,\n-    288, 81, 288, 81, 81, 288, 288, 81, 288, 288, 288, 288, 289, 288, 288,\n-    289, 289, 289, 289, 290, 290, 81, 289, 289, 288, 81, 81, 288, 288, 288,\n-    288, 288, 81, 291, 81, 292, 292, 292, 292, 289, 289, 81, 81, 293, 293,\n-    293, 293, 293, 293, 293, 293, 293, 293, 81, 81, 288, 288, 288, 288, 294,\n-    295, 295, 295, 296, 297, 296, 296, 298, 296, 296, 299, 298, 300, 300,\n-    300, 300, 300, 298, 301, 300, 301, 301, 301, 302, 302, 301, 301, 301,\n-    301, 301, 301, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 304,\n-    304, 304, 304, 304, 304, 304, 304, 304, 304, 305, 302, 301, 302, 301,\n-    306, 307, 308, 307, 308, 309, 309, 294, 294, 294, 294, 294, 294, 294,\n-    294, 81, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 81,\n-    81, 81, 81, 310, 311, 312, 313, 312, 312, 312, 312, 312, 311, 311, 311,\n-    311, 312, 314, 311, 312, 315, 315, 316, 299, 315, 315, 294, 294, 294,\n-    294, 294, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 81, 312,\n-    312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 81, 305, 305, 301,\n-    301, 301, 301, 301, 301, 302, 301, 301, 301, 301, 301, 301, 81, 301, 301,\n-    296, 296, 299, 296, 297, 317, 317, 317, 317, 298, 298, 81, 81, 81, 81,\n-    81, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 319, 319, 320,\n-    320, 320, 320, 319, 320, 320, 320, 320, 320, 321, 319, 322, 322, 319,\n-    319, 320, 320, 318, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323,\n-    324, 324, 325, 325, 325, 325, 318, 318, 318, 318, 318, 318, 319, 319,\n-    320, 320, 318, 318, 318, 318, 320, 320, 320, 318, 319, 319, 319, 318,\n-    318, 319, 319, 319, 319, 319, 319, 319, 318, 318, 318, 320, 320, 320,\n-    320, 318, 318, 318, 318, 318, 320, 319, 319, 320, 320, 319, 319, 319,\n-    319, 319, 319, 326, 318, 319, 323, 323, 319, 319, 319, 320, 327, 327,\n-    328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 81,\n-    328, 81, 81, 81, 81, 81, 328, 81, 81, 329, 329, 329, 329, 329, 329, 329,\n-    329, 329, 329, 329, 330, 331, 329, 329, 329, 332, 332, 332, 332, 332,\n-    332, 332, 332, 333, 333, 333, 333, 333, 333, 333, 333, 334, 334, 334,\n-    334, 334, 334, 334, 334, 335, 335, 335, 335, 335, 335, 335, 335, 335, 81,\n-    335, 335, 335, 335, 81, 81, 335, 335, 335, 335, 335, 335, 335, 81, 335,\n-    335, 335, 81, 81, 336, 336, 336, 337, 338, 337, 337, 337, 337, 337, 337,\n-    337, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,\n-    339, 339, 339, 339, 339, 339, 339, 81, 81, 81, 340, 340, 340, 340, 340,\n-    340, 340, 340, 340, 340, 81, 81, 81, 81, 81, 81, 341, 341, 341, 341, 341,\n-    341, 341, 341, 341, 341, 341, 341, 341, 341, 81, 81, 342, 342, 342, 342,\n-    342, 342, 81, 81, 343, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344,\n-    344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 345, 345, 344, 346,\n-    347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347,\n-    347, 347, 347, 347, 348, 349, 81, 81, 81, 350, 350, 350, 350, 350, 350,\n-    350, 350, 350, 350, 350, 199, 199, 199, 351, 351, 351, 350, 350, 350,\n-    350, 350, 350, 350, 350, 81, 81, 81, 81, 81, 81, 81, 352, 352, 352, 352,\n-    352, 352, 352, 352, 352, 352, 352, 352, 352, 81, 352, 352, 352, 352, 353,\n-    353, 354, 81, 81, 81, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355,\n-    356, 356, 357, 199, 199, 81, 358, 358, 358, 358, 358, 358, 358, 358, 358,\n-    358, 359, 359, 81, 81, 81, 81, 360, 360, 360, 360, 360, 360, 360, 360,\n-    360, 360, 360, 360, 360, 81, 360, 360, 360, 81, 361, 361, 81, 81, 81, 81,\n-    362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 363, 363,\n-    364, 363, 363, 363, 363, 363, 363, 363, 364, 364, 364, 364, 364, 364,\n-    364, 364, 363, 364, 364, 363, 363, 363, 363, 363, 363, 363, 363, 363,\n-    365, 363, 366, 366, 367, 368, 366, 369, 366, 370, 362, 371, 81, 81, 372,\n-    372, 372, 372, 372, 372, 372, 372, 372, 372, 81, 81, 81, 81, 81, 81, 373,\n-    373, 373, 373, 373, 373, 373, 373, 373, 373, 81, 81, 81, 81, 81, 81, 374,\n-    374, 375, 375, 376, 377, 378, 374, 379, 379, 374, 380, 380, 380, 381, 81,\n-    382, 382, 382, 382, 382, 382, 382, 382, 382, 382, 81, 81, 81, 81, 81, 81,\n-    383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 384, 383, 383,\n-    383, 383, 383, 81, 81, 81, 81, 81, 81, 81, 383, 383, 383, 383, 383, 380,\n-    380, 383, 383, 385, 383, 81, 81, 81, 81, 81, 344, 344, 344, 344, 344,\n-    344, 81, 81, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386,\n-    386, 386, 386, 81, 387, 387, 387, 388, 388, 388, 388, 387, 387, 388, 388,\n-    388, 81, 81, 81, 81, 388, 388, 387, 388, 388, 388, 388, 388, 388, 389,\n-    390, 391, 81, 81, 81, 81, 392, 81, 81, 81, 393, 393, 394, 394, 394, 394,\n-    394, 394, 394, 394, 394, 394, 395, 395, 395, 395, 395, 395, 395, 395,\n-    395, 395, 395, 395, 395, 395, 81, 81, 395, 395, 395, 395, 395, 81, 81,\n-    81, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 81, 81,\n-    81, 81, 396, 396, 81, 81, 81, 81, 81, 81, 397, 397, 397, 397, 397, 397,\n-    397, 397, 397, 397, 398, 81, 81, 81, 399, 399, 400, 400, 400, 400, 400,\n-    400, 400, 400, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401,\n-    401, 401, 401, 401, 402, 403, 404, 404, 405, 81, 81, 406, 406, 407, 407,\n-    407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 408, 409, 408,\n-    409, 409, 409, 409, 409, 409, 409, 81, 410, 408, 409, 408, 408, 409, 409,\n-    409, 409, 409, 409, 409, 409, 408, 408, 408, 408, 408, 408, 409, 409,\n-    411, 411, 411, 411, 411, 411, 411, 411, 81, 81, 412, 413, 413, 413, 413,\n-    413, 413, 413, 413, 413, 413, 81, 81, 81, 81, 81, 81, 414, 414, 414, 414,\n-    414, 414, 414, 415, 414, 414, 414, 414, 414, 414, 81, 81, 96, 96, 96, 96,\n-    96, 156, 156, 156, 156, 156, 156, 96, 96, 156, 416, 81, 417, 417, 417,\n-    417, 418, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419,\n-    419, 419, 419, 420, 418, 417, 417, 417, 417, 417, 418, 417, 418, 418,\n-    418, 418, 418, 417, 418, 421, 419, 419, 419, 419, 419, 419, 419, 81, 81,\n-    81, 81, 422, 422, 422, 422, 422, 422, 422, 422, 422, 422, 423, 423, 424,\n-    423, 423, 423, 423, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425,\n-    426, 427, 426, 426, 426, 426, 426, 426, 426, 425, 425, 425, 425, 425,\n-    425, 425, 425, 425, 81, 81, 81, 428, 428, 429, 430, 430, 430, 430, 430,\n-    430, 430, 430, 430, 430, 430, 430, 430, 430, 429, 428, 428, 428, 428,\n-    429, 429, 428, 428, 431, 432, 428, 428, 430, 430, 433, 433, 433, 433,\n-    433, 433, 433, 433, 433, 433, 430, 430, 430, 430, 430, 430, 434, 434,\n-    434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 434, 435, 436,\n-    437, 437, 436, 436, 436, 437, 436, 437, 437, 437, 438, 438, 81, 81, 81,\n-    81, 81, 81, 81, 81, 439, 439, 439, 439, 440, 440, 440, 440, 440, 440,\n-    440, 440, 440, 440, 440, 440, 441, 441, 441, 441, 441, 441, 441, 441,\n-    442, 442, 442, 442, 442, 442, 442, 442, 441, 441, 442, 443, 81, 81, 81,\n-    444, 444, 444, 444, 444, 445, 445, 445, 445, 445, 445, 445, 445, 445,\n-    445, 81, 81, 81, 440, 440, 440, 446, 446, 446, 446, 446, 446, 446, 446,\n-    446, 446, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447,\n-    447, 447, 448, 448, 448, 448, 448, 448, 449, 449, 93, 81, 81, 81, 81, 81,\n-    81, 81, 328, 328, 328, 81, 81, 328, 328, 328, 450, 450, 450, 450, 450,\n-    450, 450, 450, 96, 96, 96, 330, 451, 156, 156, 156, 156, 156, 96, 96,\n-    156, 156, 156, 156, 96, 452, 451, 451, 451, 451, 451, 451, 451, 453, 453,\n-    453, 453, 156, 453, 453, 453, 453, 452, 452, 96, 453, 453, 452, 96, 96,\n-    81, 81, 81, 81, 81, 81, 56, 56, 56, 56, 56, 56, 79, 79, 79, 79, 79, 93,\n-    59, 59, 59, 59, 59, 59, 59, 59, 59, 82, 82, 82, 82, 82, 59, 59, 59, 59,\n-    82, 82, 82, 82, 82, 56, 56, 56, 56, 56, 454, 56, 56, 56, 56, 56, 56, 56,\n-    56, 56, 56, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 82, 96, 96,\n-    156, 96, 96, 96, 96, 96, 96, 96, 156, 96, 96, 455, 456, 156, 457, 96, 96,\n-    96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-    96, 458, 459, 459, 156, 81, 96, 460, 156, 96, 156, 52, 56, 52, 56, 52,\n-    56, 56, 56, 56, 56, 56, 56, 56, 56, 52, 56, 79, 79, 79, 79, 79, 79, 79,\n-    79, 78, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 81, 81, 78,\n-    78, 78, 78, 78, 78, 81, 81, 81, 78, 81, 78, 81, 78, 81, 78, 461, 461,\n-    461, 461, 461, 461, 461, 461, 79, 79, 79, 79, 79, 81, 79, 79, 78, 78, 78,\n-    78, 461, 80, 79, 80, 80, 80, 79, 79, 79, 81, 79, 79, 78, 78, 78, 78, 461,\n-    80, 80, 80, 79, 79, 79, 79, 81, 81, 79, 79, 78, 78, 78, 78, 81, 80, 80,\n-    80, 78, 78, 78, 78, 78, 80, 80, 80, 81, 81, 79, 79, 79, 81, 79, 79, 78,\n-    78, 78, 78, 461, 462, 80, 81, 463, 463, 463, 463, 463, 463, 463, 464,\n-    463, 463, 463, 465, 466, 467, 468, 469, 470, 471, 472, 470, 473, 474, 38,\n-    84, 475, 476, 477, 42, 475, 476, 477, 42, 38, 38, 478, 84, 479, 479, 479,\n-    480, 481, 482, 483, 484, 485, 486, 487, 33, 488, 489, 488, 488, 489, 490,\n-    491, 491, 84, 42, 50, 38, 492, 492, 478, 493, 493, 84, 84, 84, 494, 477,\n-    495, 492, 492, 492, 84, 84, 84, 84, 84, 84, 84, 84, 496, 84, 493, 84,\n-    377, 84, 377, 377, 377, 377, 84, 377, 377, 463, 497, 498, 498, 498, 498,\n-    81, 499, 500, 501, 502, 503, 503, 503, 503, 503, 503, 504, 59, 81, 81,\n-    47, 504, 504, 504, 504, 504, 505, 505, 496, 477, 495, 506, 504, 47, 47,\n-    47, 47, 504, 504, 504, 504, 504, 505, 505, 496, 477, 495, 81, 59, 59, 59,\n-    59, 59, 81, 81, 81, 282, 282, 282, 282, 282, 282, 282, 507, 282, 508,\n-    282, 282, 36, 282, 282, 282, 282, 282, 282, 282, 282, 282, 507, 282, 282,\n-    282, 282, 507, 282, 282, 507, 282, 509, 509, 509, 509, 509, 509, 509,\n-    509, 96, 96, 451, 451, 96, 96, 96, 96, 451, 451, 451, 96, 96, 416, 416,\n-    416, 416, 96, 416, 416, 416, 451, 451, 96, 156, 96, 451, 451, 156, 156,\n-    156, 156, 96, 81, 81, 81, 81, 81, 81, 81, 40, 40, 510, 511, 40, 512, 40,\n-    510, 40, 511, 49, 510, 510, 510, 49, 49, 510, 510, 510, 513, 40, 510,\n-    514, 40, 496, 510, 510, 510, 510, 510, 40, 40, 40, 512, 512, 40, 510, 40,\n-    85, 40, 510, 40, 52, 515, 510, 510, 516, 49, 510, 510, 52, 510, 49, 453,\n-    453, 453, 453, 49, 40, 40, 49, 49, 510, 510, 496, 496, 496, 496, 496,\n-    510, 49, 49, 49, 49, 40, 496, 40, 40, 56, 317, 517, 517, 517, 518, 51,\n-    519, 517, 517, 517, 517, 517, 51, 518, 518, 51, 517, 520, 520, 520, 520,\n-    520, 520, 520, 520, 520, 520, 520, 520, 521, 521, 521, 521, 520, 520,\n-    521, 521, 521, 521, 521, 521, 521, 521, 521, 52, 56, 521, 521, 521, 521,\n-    51, 40, 40, 81, 81, 81, 81, 54, 54, 54, 54, 54, 512, 512, 512, 512, 512,\n-    496, 496, 40, 40, 40, 40, 496, 40, 40, 496, 40, 40, 496, 40, 40, 40, 40,\n-    40, 40, 40, 496, 40, 40, 40, 40, 40, 40, 40, 40, 40, 44, 44, 40, 40, 40,\n-    40, 40, 40, 40, 40, 40, 40, 40, 40, 496, 496, 40, 40, 54, 40, 54, 40, 40,\n-    40, 40, 40, 40, 40, 40, 40, 40, 44, 40, 40, 40, 40, 496, 496, 496, 496,\n-    496, 496, 496, 496, 496, 496, 496, 496, 54, 496, 54, 54, 496, 496, 496,\n-    54, 54, 496, 496, 54, 496, 496, 496, 54, 496, 54, 522, 523, 496, 54, 496,\n-    496, 496, 496, 54, 496, 496, 54, 54, 54, 54, 496, 496, 54, 496, 54, 496,\n-    54, 54, 54, 54, 54, 54, 496, 54, 496, 496, 496, 496, 496, 54, 54, 54, 54,\n-    496, 496, 496, 496, 54, 54, 496, 496, 54, 496, 496, 496, 54, 496, 496,\n-    496, 496, 496, 54, 496, 496, 496, 496, 496, 54, 54, 496, 496, 54, 54, 54,\n-    54, 496, 496, 54, 54, 496, 496, 54, 54, 496, 496, 496, 496, 496, 54, 496,\n-    496, 496, 54, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496,\n-    496, 54, 496, 496, 496, 496, 496, 496, 496, 524, 477, 495, 477, 495, 40,\n-    40, 40, 40, 40, 40, 512, 40, 40, 40, 40, 40, 40, 40, 525, 525, 40, 40,\n-    40, 40, 496, 496, 40, 40, 40, 40, 40, 40, 40, 526, 527, 40, 40, 40, 40,\n-    40, 40, 40, 40, 40, 40, 40, 317, 317, 317, 317, 317, 317, 317, 317, 317,\n-    317, 317, 317, 317, 40, 496, 40, 40, 40, 40, 40, 40, 40, 40, 317, 40, 40,\n-    40, 40, 40, 496, 496, 496, 496, 496, 496, 496, 496, 496, 40, 40, 40, 40,\n-    40, 528, 528, 528, 528, 40, 40, 40, 525, 529, 529, 525, 40, 40, 40, 40,\n-    40, 40, 40, 40, 40, 40, 40, 81, 40, 40, 40, 81, 81, 81, 81, 81, 51, 51,\n-    51, 51, 51, 51, 51, 51, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n-    530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530,\n-    519, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 518, 512, 512, 512,\n-    512, 512, 512, 512, 512, 512, 512, 512, 512, 40, 40, 40, 40, 512, 512,\n-    512, 512, 531, 40, 40, 40, 40, 40, 512, 512, 512, 512, 40, 40, 512, 512,\n-    40, 512, 512, 512, 512, 512, 512, 512, 40, 40, 40, 40, 40, 40, 40, 40,\n-    512, 512, 40, 40, 512, 54, 40, 40, 40, 40, 512, 512, 40, 40, 512, 54, 40,\n-    40, 40, 40, 512, 512, 512, 40, 40, 512, 40, 40, 512, 512, 40, 40, 40, 40,\n-    40, 40, 40, 512, 496, 496, 496, 496, 496, 532, 532, 496, 529, 529, 529,\n-    529, 40, 512, 512, 40, 40, 512, 40, 40, 40, 40, 512, 512, 40, 40, 40, 40,\n-    525, 525, 531, 531, 529, 40, 529, 529, 533, 534, 533, 529, 40, 529, 529,\n-    529, 40, 40, 40, 40, 512, 40, 512, 40, 40, 40, 40, 40, 528, 528, 528,\n-    528, 528, 528, 528, 528, 528, 528, 528, 528, 40, 40, 40, 40, 512, 512,\n-    40, 512, 512, 512, 40, 512, 533, 512, 512, 40, 512, 512, 40, 54, 40, 40,\n-    40, 40, 40, 40, 40, 525, 40, 40, 40, 528, 40, 40, 40, 40, 40, 40, 40, 40,\n-    40, 40, 512, 512, 40, 528, 40, 40, 40, 40, 40, 40, 40, 40, 528, 528, 317,\n-    40, 40, 40, 40, 40, 40, 40, 40, 525, 525, 533, 529, 529, 529, 529, 525,\n-    525, 533, 533, 533, 512, 512, 512, 512, 533, 528, 533, 533, 533, 512,\n-    533, 525, 512, 512, 512, 533, 533, 512, 512, 533, 512, 512, 533, 533,\n-    533, 40, 512, 40, 40, 40, 40, 512, 512, 525, 512, 512, 512, 512, 512,\n-    512, 533, 525, 525, 533, 525, 512, 533, 533, 535, 525, 512, 512, 525,\n-    533, 533, 529, 529, 529, 529, 529, 528, 40, 40, 529, 529, 536, 536, 534,\n-    534, 40, 40, 528, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 44, 40,\n-    40, 40, 40, 40, 40, 528, 40, 528, 40, 40, 40, 40, 528, 528, 528, 40, 537,\n-    40, 40, 40, 538, 538, 538, 538, 538, 538, 40, 539, 539, 529, 40, 40, 40,\n-    477, 495, 477, 495, 477, 495, 477, 495, 477, 495, 477, 495, 477, 495, 51,\n-    51, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 40, 528,\n-    528, 528, 40, 40, 40, 40, 40, 40, 40, 528, 496, 496, 496, 496, 496, 477,\n-    495, 496, 496, 496, 496, 496, 496, 496, 16, 31, 16, 31, 16, 31, 16, 31,\n-    477, 495, 540, 540, 540, 540, 540, 540, 540, 540, 496, 496, 496, 477,\n-    495, 16, 31, 477, 495, 477, 495, 477, 495, 477, 495, 477, 495, 496, 496,\n-    496, 496, 496, 496, 496, 477, 495, 477, 495, 496, 496, 496, 496, 496,\n-    496, 496, 496, 477, 495, 496, 496, 40, 40, 40, 528, 528, 40, 40, 40, 496,\n-    496, 496, 496, 496, 40, 40, 496, 496, 496, 496, 496, 496, 40, 40, 40,\n-    528, 40, 40, 40, 40, 537, 512, 512, 40, 40, 40, 40, 81, 81, 40, 40, 40,\n-    40, 40, 40, 40, 40, 81, 81, 40, 81, 40, 40, 40, 40, 40, 40, 541, 541,\n-    541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 81, 542,\n-    542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 81,\n-    52, 56, 52, 52, 52, 56, 56, 52, 56, 52, 56, 52, 56, 52, 52, 52, 52, 56,\n-    52, 56, 56, 52, 56, 56, 56, 56, 56, 56, 59, 59, 52, 52, 87, 88, 87, 88,\n-    88, 543, 543, 543, 543, 543, 543, 87, 88, 87, 88, 544, 544, 544, 87, 88,\n-    81, 81, 81, 81, 81, 545, 546, 546, 546, 547, 545, 546, 329, 329, 329,\n-    329, 329, 329, 81, 329, 81, 81, 81, 81, 81, 329, 81, 81, 548, 548, 548,\n-    548, 548, 548, 548, 548, 81, 81, 81, 81, 81, 81, 81, 549, 550, 81, 81,\n-    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 551, 95, 95, 95, 95, 95,\n-    95, 95, 95, 552, 552, 42, 50, 42, 50, 552, 552, 552, 42, 50, 552, 42, 50,\n-    377, 377, 377, 377, 377, 377, 377, 377, 84, 472, 553, 377, 554, 84, 42,\n-    50, 84, 84, 42, 50, 477, 495, 477, 495, 477, 495, 477, 495, 377, 377,\n-    377, 377, 375, 60, 377, 377, 84, 377, 377, 84, 84, 84, 84, 84, 555, 555,\n-    377, 377, 377, 84, 472, 377, 477, 377, 377, 377, 377, 377, 377, 377, 377,\n-    84, 377, 84, 377, 81, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556,\n-    81, 556, 556, 556, 556, 556, 556, 556, 556, 556, 81, 81, 81, 81, 556,\n-    556, 556, 556, 556, 556, 81, 81, 525, 525, 525, 525, 525, 525, 525, 525,\n-    525, 525, 525, 525, 81, 81, 81, 81, 557, 558, 558, 559, 525, 560, 561,\n-    562, 526, 527, 526, 527, 526, 527, 526, 527, 526, 527, 525, 525, 526,\n-    527, 526, 527, 526, 527, 526, 527, 563, 526, 527, 527, 525, 562, 562,\n-    562, 562, 562, 562, 562, 562, 562, 564, 565, 566, 567, 568, 568, 569,\n-    570, 570, 570, 570, 571, 525, 525, 562, 562, 562, 560, 572, 559, 525,\n-    529, 81, 573, 574, 573, 574, 573, 574, 573, 574, 573, 574, 574, 574, 574,\n-    574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 573,\n-    574, 574, 574, 574, 574, 574, 574, 573, 574, 573, 574, 573, 574, 574,\n-    574, 574, 574, 574, 573, 574, 574, 574, 574, 574, 574, 573, 573, 81, 81,\n-    575, 575, 576, 576, 577, 577, 574, 563, 578, 579, 578, 579, 578, 579,\n-    578, 579, 578, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579,\n-    579, 579, 579, 579, 579, 579, 578, 579, 579, 579, 579, 579, 579, 579,\n-    578, 579, 578, 579, 578, 579, 579, 579, 579, 579, 579, 578, 579, 579,\n-    579, 579, 579, 579, 578, 578, 579, 579, 579, 579, 580, 581, 582, 582,\n-    579, 81, 81, 81, 81, 81, 583, 583, 583, 583, 583, 583, 583, 583, 583,\n-    583, 583, 81, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584,\n-    584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 81, 585, 585, 586, 586,\n-    586, 586, 585, 585, 585, 585, 585, 585, 585, 585, 585, 585, 583, 583,\n-    583, 81, 81, 81, 81, 81, 578, 578, 578, 578, 578, 578, 578, 578, 587,\n-    587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 588, 588, 81,\n-    586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 585, 585, 585, 585,\n-    585, 585, 589, 589, 589, 589, 589, 589, 589, 589, 525, 590, 590, 590,\n-    590, 590, 590, 590, 590, 590, 590, 590, 590, 590, 590, 590, 587, 587,\n-    587, 587, 588, 588, 588, 585, 585, 590, 590, 590, 590, 590, 590, 590,\n-    585, 585, 585, 585, 525, 525, 525, 525, 591, 591, 591, 591, 591, 591,\n-    591, 591, 591, 591, 591, 591, 591, 591, 591, 81, 585, 585, 585, 585, 585,\n-    585, 585, 525, 525, 525, 525, 585, 585, 585, 585, 585, 585, 585, 585,\n-    585, 585, 585, 525, 525, 592, 592, 592, 592, 592, 592, 592, 592, 592,\n-    592, 592, 592, 592, 592, 593, 593, 593, 593, 593, 593, 593, 593, 593,\n-    593, 594, 594, 594, 594, 594, 594, 594, 594, 594, 594, 594, 594, 594,\n-    595, 594, 594, 594, 594, 594, 594, 594, 81, 81, 81, 596, 596, 596, 596,\n-    596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 81, 597, 597, 597,\n-    597, 597, 597, 597, 597, 598, 598, 598, 598, 598, 598, 599, 599, 600,\n-    600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 601, 602, 603,\n-    602, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 600, 600, 81, 81,\n-    81, 81, 90, 93, 90, 93, 90, 93, 605, 95, 97, 97, 97, 606, 95, 95, 95, 95,\n-    95, 95, 95, 95, 95, 95, 606, 607, 90, 93, 90, 93, 454, 454, 95, 95, 608,\n-    608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 609,\n-    609, 609, 609, 609, 609, 609, 609, 609, 609, 610, 610, 611, 612, 612,\n-    612, 612, 612, 62, 62, 62, 62, 62, 62, 62, 60, 60, 60, 60, 60, 60, 60,\n-    60, 60, 62, 62, 52, 56, 52, 56, 52, 56, 56, 56, 52, 56, 52, 56, 52, 56,\n-    59, 56, 56, 56, 56, 56, 56, 56, 56, 52, 56, 52, 56, 52, 52, 56, 60, 613,\n-    613, 52, 56, 52, 56, 57, 52, 56, 52, 56, 56, 56, 52, 56, 52, 56, 52, 52,\n-    52, 52, 52, 56, 52, 52, 52, 52, 52, 56, 52, 56, 52, 56, 81, 81, 81, 81,\n-    81, 81, 81, 81, 81, 81, 81, 81, 81, 57, 59, 59, 56, 57, 57, 57, 57, 57,\n-    614, 614, 615, 614, 614, 614, 616, 614, 614, 614, 614, 615, 614, 614,\n-    614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 617,\n-    617, 615, 615, 617, 618, 618, 618, 618, 81, 81, 81, 81, 619, 619, 619,\n-    619, 619, 619, 317, 317, 507, 516, 81, 81, 81, 81, 81, 81, 620, 620, 620,\n-    620, 620, 620, 620, 620, 620, 620, 620, 620, 621, 621, 622, 622, 623,\n-    623, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624,\n-    624, 624, 624, 624, 624, 623, 623, 623, 623, 623, 623, 623, 623, 623,\n-    623, 623, 623, 623, 623, 623, 623, 625, 626, 81, 81, 81, 81, 81, 81, 81,\n-    81, 627, 627, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 81, 81,\n-    81, 81, 81, 81, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 195,\n-    195, 195, 195, 195, 195, 201, 201, 201, 195, 629, 195, 195, 193, 630,\n-    630, 630, 630, 630, 630, 630, 630, 630, 630, 631, 631, 631, 631, 631,\n-    631, 631, 631, 631, 631, 631, 631, 631, 631, 631, 631, 631, 631, 631,\n-    631, 632, 632, 632, 632, 632, 633, 633, 633, 199, 634, 635, 635, 635,\n-    635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 635, 636, 636,\n-    636, 636, 636, 636, 636, 636, 636, 636, 636, 637, 638, 81, 81, 81, 81,\n-    81, 81, 81, 81, 81, 81, 81, 639, 332, 332, 332, 332, 332, 81, 81, 81,\n-    640, 640, 640, 641, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642,\n-    642, 642, 642, 642, 642, 643, 641, 641, 640, 640, 640, 640, 641, 641,\n-    640, 641, 641, 641, 644, 645, 645, 645, 645, 645, 645, 646, 646, 646,\n-    645, 645, 645, 645, 81, 61, 647, 647, 647, 647, 647, 647, 647, 647, 647,\n-    647, 81, 81, 81, 81, 645, 645, 318, 318, 318, 318, 318, 320, 648, 318,\n-    323, 323, 318, 318, 318, 318, 318, 81, 649, 649, 649, 649, 649, 649, 649,\n-    649, 649, 650, 650, 650, 650, 650, 650, 651, 651, 650, 650, 651, 651,\n-    650, 650, 81, 649, 649, 649, 650, 649, 649, 649, 649, 649, 649, 649, 649,\n-    650, 651, 81, 81, 652, 652, 652, 652, 652, 652, 652, 652, 652, 652, 81,\n-    81, 653, 654, 654, 654, 648, 318, 318, 318, 318, 318, 318, 327, 327, 327,\n-    318, 319, 320, 319, 318, 318, 655, 655, 655, 655, 655, 655, 655, 655,\n-    656, 655, 656, 656, 657, 655, 655, 656, 656, 655, 655, 655, 655, 655,\n-    656, 656, 655, 656, 655, 81, 81, 81, 81, 81, 81, 81, 81, 655, 655, 658,\n-    659, 659, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 661,\n-    662, 662, 661, 661, 663, 663, 660, 664, 664, 661, 665, 81, 81, 335, 335,\n-    335, 335, 335, 335, 81, 56, 56, 56, 613, 59, 59, 59, 59, 56, 56, 56, 56,\n-    56, 79, 81, 81, 342, 342, 342, 342, 342, 342, 342, 342, 660, 660, 660,\n-    661, 661, 662, 661, 661, 662, 661, 661, 663, 661, 665, 81, 81, 666, 666,\n-    666, 666, 666, 666, 666, 666, 666, 666, 81, 81, 81, 81, 81, 81, 667, 668,\n-    668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668, 668,\n-    668, 668, 668, 668, 667, 668, 668, 668, 668, 668, 668, 668, 81, 81, 81,\n-    81, 333, 333, 333, 333, 333, 333, 333, 81, 81, 81, 81, 334, 334, 334,\n-    334, 334, 334, 334, 334, 334, 81, 81, 81, 81, 669, 669, 669, 669, 669,\n-    669, 669, 669, 670, 670, 670, 670, 670, 670, 670, 670, 592, 592, 593,\n-    593, 593, 593, 593, 593, 56, 56, 56, 56, 56, 56, 56, 81, 81, 81, 81, 101,\n-    101, 101, 101, 101, 81, 81, 81, 81, 81, 129, 671, 129, 129, 672, 129,\n-    129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 81, 129, 129,\n-    129, 129, 129, 81, 129, 81, 129, 129, 81, 129, 129, 81, 129, 129, 146,\n-    146, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673,\n-    673, 673, 673, 81, 81, 81, 81, 81, 81, 81, 81, 81, 146, 146, 146, 146,\n-    146, 146, 146, 146, 146, 146, 146, 495, 477, 81, 81, 146, 146, 146, 146,\n-    146, 146, 146, 146, 146, 146, 135, 138, 81, 81, 674, 674, 674, 674, 674,\n-    674, 674, 674, 675, 558, 558, 675, 675, 676, 676, 526, 527, 677, 81, 81,\n-    81, 81, 81, 81, 96, 96, 96, 96, 96, 96, 96, 156, 156, 156, 156, 156, 156,\n-    156, 95, 95, 559, 569, 569, 678, 678, 526, 527, 526, 527, 526, 527, 526,\n-    527, 526, 527, 526, 527, 526, 527, 526, 527, 559, 559, 526, 527, 559,\n-    559, 559, 559, 678, 678, 678, 679, 559, 679, 81, 580, 680, 676, 676, 569,\n-    526, 527, 526, 527, 526, 527, 681, 559, 559, 682, 683, 684, 684, 684, 81,\n-    559, 685, 686, 559, 81, 81, 81, 81, 146, 146, 146, 146, 146, 81, 81, 497,\n-    81, 687, 688, 689, 690, 691, 688, 688, 692, 693, 688, 694, 695, 696, 695,\n-    697, 698, 698, 698, 698, 698, 698, 698, 698, 698, 698, 699, 700, 701,\n-    701, 701, 687, 688, 702, 702, 702, 702, 702, 702, 702, 702, 702, 702,\n-    702, 702, 702, 702, 702, 702, 702, 702, 692, 688, 693, 703, 704, 703,\n-    705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705, 705,\n-    705, 705, 705, 705, 692, 701, 693, 701, 692, 693, 706, 707, 708, 706,\n-    709, 710, 711, 711, 711, 711, 711, 711, 711, 711, 711, 712, 710, 710,\n-    710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,\n-    710, 710, 710, 710, 710, 713, 713, 714, 714, 714, 714, 714, 714, 714,\n-    714, 714, 714, 714, 714, 714, 714, 714, 81, 81, 81, 714, 714, 714, 714,\n-    714, 714, 81, 81, 714, 714, 714, 81, 81, 81, 715, 690, 701, 703, 716,\n-    690, 690, 81, 717, 718, 718, 718, 718, 717, 717, 81, 81, 719, 719, 719,\n-    720, 512, 81, 81, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721,\n-    721, 81, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 81, 721, 721,\n-    721, 81, 721, 721, 81, 721, 721, 721, 721, 721, 721, 721, 81, 81, 721,\n-    721, 721, 81, 81, 81, 81, 81, 199, 377, 199, 81, 81, 81, 81, 619, 619,\n-    619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 81, 81, 81, 317,\n-    722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 722, 723,\n-    723, 723, 723, 724, 724, 724, 724, 724, 724, 724, 724, 724, 724, 724,\n-    724, 724, 724, 724, 724, 724, 723, 723, 724, 725, 725, 81, 40, 40, 40,\n-    40, 81, 81, 81, 81, 724, 81, 81, 81, 81, 81, 81, 81, 317, 317, 317, 317,\n-    317, 156, 81, 81, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726, 726,\n-    726, 726, 81, 81, 81, 727, 727, 727, 727, 727, 727, 727, 727, 727, 81,\n-    81, 81, 81, 81, 81, 81, 156, 504, 504, 504, 504, 504, 504, 504, 504, 504,\n-    504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 81, 81, 81, 81, 728,\n-    728, 728, 728, 728, 728, 728, 728, 729, 729, 729, 729, 81, 81, 81, 81,\n-    81, 81, 81, 81, 81, 728, 728, 728, 730, 730, 730, 730, 730, 730, 730,\n-    730, 730, 731, 730, 730, 730, 730, 730, 730, 730, 730, 731, 81, 81, 81,\n-    81, 81, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732, 732,\n-    732, 733, 733, 733, 733, 733, 81, 81, 81, 81, 81, 734, 734, 734, 734,\n-    734, 734, 734, 734, 734, 734, 734, 734, 734, 734, 81, 735, 736, 736, 736,\n-    736, 736, 736, 736, 736, 736, 736, 736, 736, 81, 81, 81, 81, 737, 738,\n-    738, 738, 738, 738, 81, 81, 739, 739, 739, 739, 739, 739, 739, 739, 740,\n-    740, 740, 740, 740, 740, 740, 740, 741, 741, 741, 741, 741, 741, 741,\n-    741, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742,\n-    742, 81, 81, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 81, 81,\n-    81, 81, 81, 81, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744, 744,\n-    744, 81, 81, 81, 81, 745, 745, 745, 745, 745, 745, 745, 745, 745, 745,\n-    745, 745, 81, 81, 81, 81, 746, 746, 746, 746, 746, 746, 746, 746, 747,\n-    747, 747, 747, 747, 747, 747, 747, 747, 747, 747, 747, 81, 81, 81, 81,\n-    81, 81, 81, 81, 81, 81, 81, 748, 749, 749, 749, 749, 749, 749, 749, 749,\n-    749, 749, 749, 749, 749, 749, 749, 81, 749, 749, 749, 749, 749, 749, 81,\n-    81, 750, 750, 750, 750, 750, 750, 81, 81, 750, 81, 750, 750, 750, 750,\n-    750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750,\n-    750, 750, 81, 750, 750, 81, 81, 81, 750, 81, 81, 750, 751, 751, 751, 751,\n-    751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 81, 752, 753, 753, 753,\n-    753, 753, 753, 753, 753, 754, 754, 754, 754, 754, 754, 754, 754, 754,\n-    754, 754, 754, 754, 754, 754, 755, 755, 756, 756, 756, 756, 756, 756,\n-    756, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757,\n-    757, 757, 81, 81, 81, 81, 81, 81, 81, 81, 758, 758, 758, 758, 758, 758,\n-    758, 758, 758, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 81,\n-    759, 759, 81, 81, 81, 81, 81, 760, 760, 760, 760, 760, 761, 761, 761,\n-    761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 762, 762, 762,\n-    762, 762, 762, 81, 81, 81, 763, 764, 764, 764, 764, 764, 764, 764, 764,\n-    764, 764, 81, 81, 81, 81, 81, 765, 766, 766, 766, 766, 766, 766, 766,\n-    766, 767, 767, 767, 767, 767, 767, 767, 767, 81, 81, 81, 81, 768, 768,\n-    767, 767, 768, 768, 768, 768, 768, 768, 768, 768, 81, 81, 768, 768, 768,\n-    768, 768, 768, 769, 770, 770, 770, 81, 770, 770, 81, 81, 81, 81, 81, 770,\n-    771, 770, 772, 769, 769, 769, 769, 81, 769, 769, 769, 81, 769, 769, 769,\n-    769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769,\n-    769, 769, 769, 769, 81, 81, 772, 773, 771, 81, 81, 81, 81, 774, 775, 775,\n-    775, 775, 775, 775, 775, 775, 775, 81, 81, 81, 81, 81, 81, 81, 776, 776,\n-    776, 776, 776, 776, 776, 776, 777, 81, 81, 81, 81, 81, 81, 81, 778, 778,\n-    778, 778, 778, 778, 778, 778, 778, 778, 778, 778, 778, 779, 779, 780,\n-    781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 782,\n-    782, 782, 783, 783, 783, 783, 783, 783, 783, 783, 784, 783, 783, 783,\n-    783, 783, 783, 783, 783, 783, 783, 783, 783, 785, 786, 81, 81, 81, 81,\n-    787, 787, 787, 787, 787, 788, 788, 788, 788, 788, 788, 789, 81, 790, 790,\n-    790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 81, 81, 81,\n-    791, 791, 791, 791, 791, 791, 791, 792, 792, 792, 792, 792, 792, 792,\n-    792, 792, 792, 792, 792, 792, 792, 81, 81, 793, 793, 793, 793, 793, 793,\n-    793, 793, 794, 794, 794, 794, 794, 794, 794, 794, 794, 794, 794, 81, 81,\n-    81, 81, 81, 795, 795, 795, 795, 795, 795, 795, 795, 796, 796, 796, 796,\n-    796, 796, 796, 796, 796, 796, 81, 81, 81, 81, 81, 81, 81, 797, 797, 797,\n-    797, 81, 81, 81, 81, 798, 798, 798, 798, 798, 798, 798, 799, 799, 799,\n-    799, 799, 799, 799, 799, 799, 81, 81, 81, 81, 81, 81, 81, 800, 800, 800,\n-    800, 800, 800, 800, 800, 800, 800, 800, 81, 81, 81, 81, 81, 801, 801,\n-    801, 801, 801, 801, 801, 801, 801, 801, 801, 81, 81, 81, 81, 81, 81, 81,\n-    802, 802, 802, 802, 802, 802, 803, 803, 803, 803, 803, 803, 803, 803,\n-    803, 803, 803, 803, 804, 804, 804, 804, 805, 805, 805, 805, 805, 805,\n-    805, 805, 805, 805, 81, 81, 81, 81, 81, 81, 806, 806, 806, 806, 806, 806,\n-    806, 806, 806, 806, 806, 806, 806, 806, 806, 81, 807, 807, 807, 807, 807,\n-    807, 807, 807, 807, 807, 807, 807, 807, 808, 808, 808, 808, 808, 808,\n-    808, 808, 808, 808, 807, 809, 809, 809, 809, 809, 809, 809, 809, 809,\n-    809, 809, 809, 809, 809, 810, 810, 811, 811, 811, 810, 811, 810, 810,\n-    810, 810, 812, 812, 812, 812, 813, 813, 813, 813, 813, 81, 81, 81, 81,\n-    81, 81, 814, 815, 814, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816,\n-    816, 816, 816, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815, 815,\n-    815, 815, 815, 817, 818, 818, 819, 819, 819, 819, 819, 81, 81, 81, 81,\n-    820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820, 820,\n-    820, 820, 820, 820, 820, 820, 821, 821, 821, 821, 821, 821, 821, 821,\n-    821, 821, 81, 81, 81, 81, 81, 81, 81, 817, 822, 822, 823, 824, 824, 824,\n-    824, 824, 824, 824, 824, 824, 824, 824, 824, 824, 823, 823, 823, 822,\n-    822, 822, 822, 823, 823, 825, 826, 827, 827, 828, 829, 829, 829, 829, 81,\n-    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 828, 81, 81, 830, 830, 830, 830,\n-    830, 830, 830, 830, 830, 81, 81, 81, 81, 81, 81, 81, 831, 831, 831, 831,\n-    831, 831, 831, 831, 831, 831, 81, 81, 81, 81, 81, 81, 832, 832, 832, 833,\n-    833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833,\n-    833, 833, 833, 833, 833, 834, 834, 834, 834, 834, 835, 834, 834, 834,\n-    834, 834, 834, 836, 836, 81, 837, 837, 837, 837, 837, 837, 837, 837, 837,\n-    837, 838, 838, 838, 838, 833, 835, 835, 81, 839, 839, 839, 839, 839, 839,\n-    839, 839, 839, 839, 839, 840, 841, 842, 839, 81, 843, 843, 844, 845, 845,\n-    845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845,\n-    844, 844, 844, 843, 843, 843, 843, 843, 843, 843, 843, 843, 844, 846,\n-    845, 845, 845, 845, 847, 847, 848, 847, 843, 849, 843, 843, 848, 81, 81,\n-    850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 845, 851, 845, 847,\n-    847, 847, 81, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852,\n-    852, 852, 852, 852, 852, 852, 852, 852, 81, 81, 81, 853, 853, 853, 853,\n-    853, 853, 853, 853, 853, 853, 81, 853, 853, 853, 853, 853, 853, 853, 853,\n-    853, 854, 854, 854, 855, 855, 855, 854, 854, 855, 856, 857, 855, 858,\n-    858, 859, 858, 858, 859, 855, 81, 860, 860, 860, 860, 860, 860, 860, 81,\n-    860, 81, 860, 860, 860, 860, 81, 860, 860, 860, 860, 860, 860, 860, 860,\n-    860, 860, 860, 860, 860, 860, 860, 81, 860, 860, 861, 81, 81, 81, 81, 81,\n-    81, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862,\n-    862, 863, 864, 864, 864, 863, 863, 863, 863, 863, 863, 865, 866, 81, 81,\n-    81, 81, 81, 867, 867, 867, 867, 867, 867, 867, 867, 867, 867, 81, 81, 81,\n-    81, 81, 81, 868, 868, 869, 869, 81, 870, 870, 870, 870, 870, 870, 870,\n-    870, 81, 81, 870, 870, 81, 81, 870, 870, 870, 870, 870, 870, 870, 870,\n-    870, 870, 870, 870, 870, 870, 81, 870, 870, 870, 870, 870, 870, 870, 81,\n-    870, 870, 81, 870, 870, 870, 870, 870, 81, 871, 872, 870, 869, 869, 868,\n-    869, 869, 869, 869, 81, 81, 869, 869, 81, 81, 869, 869, 873, 81, 81, 870,\n-    81, 81, 81, 81, 81, 81, 869, 81, 81, 81, 81, 81, 870, 870, 870, 870, 870,\n-    869, 869, 81, 81, 874, 874, 874, 874, 874, 874, 874, 81, 81, 81, 875,\n-    875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 875, 876, 876,\n-    876, 877, 877, 877, 877, 877, 877, 877, 877, 876, 876, 878, 877, 877,\n-    876, 879, 875, 875, 875, 875, 880, 880, 880, 880, 881, 882, 882, 882,\n-    882, 882, 882, 882, 882, 882, 882, 81, 880, 81, 881, 883, 81, 884, 884,\n-    884, 884, 884, 884, 884, 884, 885, 885, 885, 886, 886, 886, 886, 886,\n-    886, 885, 886, 885, 885, 885, 885, 886, 886, 885, 887, 888, 884, 884,\n-    889, 884, 890, 890, 890, 890, 890, 890, 890, 890, 890, 890, 81, 81, 81,\n-    81, 81, 81, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891,\n-    891, 891, 891, 892, 892, 892, 893, 893, 893, 893, 81, 81, 892, 892, 892,\n-    892, 893, 893, 892, 894, 895, 896, 897, 897, 898, 898, 899, 899, 899,\n-    897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897,\n-    897, 891, 891, 891, 891, 893, 893, 81, 81, 900, 900, 900, 900, 900, 900,\n-    900, 900, 901, 901, 901, 902, 902, 902, 902, 902, 902, 902, 902, 901,\n-    901, 902, 901, 903, 902, 904, 904, 905, 900, 81, 81, 81, 906, 906, 906,\n-    906, 906, 906, 906, 906, 906, 906, 81, 81, 81, 81, 81, 81, 907, 907, 907,\n-    907, 907, 907, 907, 907, 907, 907, 907, 907, 907, 81, 81, 81, 908, 908,\n-    908, 908, 908, 908, 908, 908, 908, 908, 908, 909, 910, 909, 910, 910,\n-    909, 909, 909, 909, 909, 909, 911, 912, 913, 913, 913, 913, 913, 913,\n-    913, 913, 913, 913, 81, 81, 81, 81, 81, 81, 914, 914, 914, 914, 914, 914,\n-    914, 914, 914, 914, 914, 81, 81, 915, 915, 915, 916, 916, 915, 915, 915,\n-    915, 916, 915, 915, 915, 915, 917, 81, 81, 81, 81, 918, 918, 918, 918,\n-    918, 918, 918, 918, 918, 918, 919, 919, 920, 920, 920, 921, 922, 922,\n-    922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 923, 923, 923, 924,\n-    924, 924, 924, 924, 924, 924, 924, 924, 923, 925, 926, 927, 81, 81, 81,\n-    81, 928, 928, 928, 928, 928, 928, 928, 928, 929, 929, 929, 929, 929, 929,\n-    929, 929, 930, 930, 930, 930, 930, 930, 930, 930, 930, 930, 931, 931,\n-    931, 931, 931, 931, 931, 931, 931, 81, 81, 81, 81, 81, 81, 81, 81, 81,\n-    81, 81, 81, 932, 933, 934, 934, 934, 934, 934, 934, 935, 935, 934, 934,\n-    933, 933, 933, 933, 933, 933, 933, 933, 933, 933, 933, 933, 933, 933,\n-    933, 933, 934, 936, 934, 934, 934, 934, 937, 933, 934, 934, 934, 934,\n-    938, 939, 940, 940, 940, 940, 938, 939, 936, 941, 942, 942, 942, 942,\n-    942, 942, 943, 943, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941,\n-    941, 941, 941, 941, 941, 941, 941, 941, 941, 81, 81, 941, 941, 941, 941,\n-    942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 943,\n-    942, 944, 945, 945, 945, 941, 946, 946, 946, 945, 945, 81, 81, 81, 81,\n-    81, 947, 947, 947, 947, 947, 947, 947, 947, 947, 81, 81, 81, 81, 81, 81,\n-    81, 948, 948, 948, 948, 948, 948, 948, 948, 948, 81, 948, 948, 948, 948,\n-    948, 948, 948, 948, 948, 948, 948, 948, 948, 949, 950, 950, 950, 950,\n-    950, 950, 950, 81, 950, 950, 950, 950, 950, 950, 949, 951, 948, 952, 952,\n-    952, 952, 952, 81, 81, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953,\n-    954, 954, 954, 954, 954, 954, 954, 954, 954, 954, 954, 954, 954, 954,\n-    954, 954, 954, 954, 954, 81, 81, 81, 955, 956, 957, 957, 957, 957, 957,\n-    957, 957, 957, 957, 957, 957, 957, 957, 957, 81, 81, 958, 958, 958, 958,\n-    958, 958, 958, 958, 958, 958, 958, 958, 958, 958, 81, 959, 958, 958, 958,\n-    958, 958, 958, 958, 959, 958, 958, 959, 958, 958, 81, 960, 960, 960, 960,\n-    960, 960, 960, 81, 960, 960, 81, 960, 960, 960, 960, 960, 960, 960, 960,\n-    960, 960, 960, 960, 960, 960, 961, 961, 961, 961, 961, 961, 81, 81, 81,\n-    961, 81, 961, 961, 81, 961, 961, 961, 962, 961, 963, 963, 960, 961, 964,\n-    964, 964, 964, 964, 964, 964, 964, 964, 964, 81, 81, 81, 81, 81, 81, 965,\n-    965, 965, 965, 965, 965, 81, 965, 965, 81, 965, 965, 965, 965, 965, 965,\n-    965, 965, 965, 965, 965, 965, 965, 965, 965, 965, 966, 966, 966, 966,\n-    966, 81, 967, 967, 81, 966, 966, 967, 966, 968, 965, 81, 81, 81, 81, 81,\n-    81, 81, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 81, 81, 81, 81,\n-    81, 81, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 971, 971,\n-    972, 972, 973, 973, 81, 81, 81, 81, 81, 81, 81, 974, 974, 974, 974, 974,\n-    974, 974, 974, 974, 974, 81, 81, 81, 81, 81, 81, 975, 975, 975, 975, 975,\n-    975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 81, 976, 976, 976, 976,\n-    976, 81, 81, 81, 974, 974, 974, 974, 81, 81, 81, 81, 977, 977, 977, 977,\n-    977, 977, 977, 977, 978, 978, 978, 979, 979, 979, 977, 977, 977, 977,\n-    979, 977, 977, 977, 978, 979, 978, 979, 977, 977, 977, 977, 977, 977,\n-    977, 978, 979, 979, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977,\n-    977, 81, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980, 980,\n-    980, 981, 982, 980, 980, 980, 980, 980, 980, 980, 81, 608, 81, 81, 81,\n-    81, 81, 81, 81, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983,\n-    983, 983, 983, 983, 81, 984, 984, 984, 984, 984, 984, 984, 984, 984, 984,\n-    81, 81, 81, 81, 985, 985, 986, 986, 986, 986, 986, 986, 986, 986, 986,\n-    986, 986, 986, 986, 986, 81, 81, 987, 987, 987, 987, 987, 988, 81, 81,\n-    989, 989, 989, 989, 989, 989, 989, 989, 990, 990, 990, 990, 990, 990,\n-    990, 991, 991, 991, 992, 992, 993, 993, 993, 993, 994, 994, 994, 994,\n-    991, 993, 81, 81, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 81,\n-    996, 996, 996, 996, 996, 996, 996, 81, 989, 989, 989, 989, 989, 81, 81,\n-    81, 81, 81, 989, 989, 989, 997, 997, 997, 997, 997, 997, 997, 997, 998,\n-    998, 998, 998, 998, 998, 998, 998, 999, 999, 999, 999, 999, 999, 999,\n-    999, 999, 999, 999, 999, 999, 999, 999, 1000, 1000, 1001, 1001, 81, 81,\n-    81, 81, 81, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,\n-    1002, 1002, 1002, 81, 81, 81, 1002, 1003, 1003, 1003, 1003, 1003, 1003,\n-    1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,\n-    1003, 1003, 1003, 1003, 81, 81, 81, 81, 81, 81, 81, 81, 1004, 1004, 1004,\n-    1004, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,\n-    1005, 1005, 1006, 1007, 81, 81, 81, 81, 81, 81, 1008, 1008, 1008, 1008,\n-    1008, 1008, 1008, 1008, 1008, 1008, 81, 81, 81, 81, 81, 81, 1008, 1008,\n-    1008, 81, 81, 81, 81, 81, 579, 574, 574, 574, 574, 574, 574, 574, 574,\n-    574, 574, 574, 574, 574, 574, 81, 1009, 1009, 1009, 1009, 1009, 1009,\n-    1009, 1009, 1009, 1009, 1009, 1009, 81, 81, 81, 81, 1010, 1010, 1010,\n-    1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 81, 81, 81, 81, 81, 1010,\n-    1010, 1010, 1010, 1010, 81, 81, 81, 1010, 81, 81, 81, 81, 81, 81, 81,\n-    1010, 1010, 81, 81, 1011, 1012, 1013, 1014, 503, 503, 503, 503, 81, 81,\n-    81, 81, 317, 317, 317, 317, 317, 317, 81, 81, 317, 317, 317, 317, 317,\n-    317, 317, 81, 81, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317,\n-    317, 1015, 1015, 451, 451, 451, 317, 317, 317, 1016, 1015, 1015, 1015,\n-    1015, 1015, 503, 503, 503, 503, 503, 503, 503, 503, 156, 156, 156, 156,\n-    156, 156, 156, 156, 317, 317, 96, 96, 96, 96, 96, 156, 156, 317, 317,\n-    317, 317, 317, 317, 96, 96, 96, 96, 317, 317, 317, 81, 81, 81, 81, 81,\n-    81, 81, 724, 724, 1017, 1017, 1017, 724, 81, 81, 619, 619, 619, 619, 81,\n-    81, 81, 81, 619, 81, 81, 81, 81, 81, 81, 81, 510, 510, 510, 510, 510,\n-    510, 510, 510, 510, 510, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n-    49, 49, 49, 49, 49, 49, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510,\n-    49, 49, 49, 49, 49, 49, 49, 81, 49, 49, 49, 49, 49, 49, 510, 81, 510,\n-    510, 81, 81, 510, 81, 81, 510, 510, 81, 81, 510, 510, 510, 510, 81, 510,\n-    510, 49, 49, 81, 49, 81, 49, 49, 49, 49, 49, 49, 49, 81, 49, 49, 49, 49,\n-    49, 49, 49, 510, 510, 81, 510, 510, 510, 510, 81, 81, 510, 510, 510, 510,\n-    510, 510, 510, 510, 81, 510, 510, 510, 510, 510, 510, 510, 81, 49, 49,\n-    510, 510, 81, 510, 510, 510, 510, 81, 510, 510, 510, 510, 510, 81, 510,\n-    81, 81, 81, 510, 510, 510, 510, 510, 510, 510, 81, 49, 49, 49, 49, 49,\n-    49, 49, 49, 49, 49, 49, 49, 81, 81, 510, 1018, 49, 49, 49, 49, 49, 49,\n-    49, 49, 49, 496, 49, 49, 49, 49, 49, 49, 510, 510, 510, 510, 510, 510,\n-    510, 510, 510, 1018, 49, 49, 49, 49, 49, 49, 49, 49, 49, 496, 49, 49,\n-    510, 510, 510, 510, 510, 1018, 49, 49, 49, 49, 49, 49, 49, 49, 49, 496,\n-    49, 49, 49, 49, 49, 49, 510, 510, 510, 510, 510, 510, 510, 510, 510,\n-    1018, 49, 496, 49, 49, 49, 49, 49, 49, 49, 49, 510, 49, 81, 81, 1019,\n-    1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1020, 1020,\n-    1020, 1020, 1020, 1020, 1020, 1021, 1021, 1021, 1021, 1021, 1021, 1021,\n-    1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1020, 1020, 1020, 1020,\n-    1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1020, 1020,\n-    1020, 1020, 1020, 1020, 1020, 1020, 1021, 1020, 1020, 1020, 1020, 1020,\n-    1020, 1021, 1020, 1020, 1022, 1022, 1022, 1022, 1023, 81, 81, 81, 81, 81,\n-    81, 81, 1021, 1021, 1021, 1021, 1021, 81, 1021, 1021, 1021, 1021, 1021,\n-    1021, 1021, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 81, 1024, 1024,\n-    1024, 1024, 1024, 1024, 1024, 1024, 1024, 81, 81, 1024, 1024, 1024, 1024,\n-    1024, 1024, 1024, 81, 1024, 1024, 81, 1024, 1024, 1024, 1024, 1024, 81,\n-    81, 81, 81, 81, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,\n-    1025, 1025, 1025, 1025, 81, 81, 1026, 1026, 1026, 1026, 1026, 1026, 1026,\n-    1026, 1026, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 81, 1028, 1028,\n-    1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1029, 1029, 1029, 1029,\n-    1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,\n-    1029, 1029, 1030, 1030, 1030, 1030, 1030, 1030, 1031, 81, 81, 81, 81, 81,\n-    1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 81, 81, 81,\n-    81, 1033, 1033, 81, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,\n-    1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1035, 1034,\n-    1034, 1034, 1036, 1034, 1034, 1034, 1034, 81, 81, 81, 146, 146, 146, 146,\n-    81, 146, 146, 146, 81, 146, 146, 81, 146, 81, 81, 146, 81, 146, 146, 146,\n-    146, 146, 146, 146, 146, 146, 146, 81, 146, 146, 146, 146, 81, 146, 81,\n-    146, 81, 81, 81, 81, 81, 81, 146, 81, 81, 81, 81, 146, 81, 146, 81, 146,\n-    81, 146, 146, 146, 81, 146, 81, 146, 81, 146, 81, 146, 81, 146, 146, 146,\n-    146, 81, 146, 81, 146, 146, 81, 146, 146, 146, 146, 146, 146, 146, 146,\n-    146, 81, 81, 81, 81, 81, 146, 146, 146, 81, 146, 146, 146, 132, 132, 81,\n-    81, 81, 81, 81, 81, 529, 529, 529, 529, 525, 529, 529, 529, 529, 529,\n-    529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 1037, 1037, 1037, 1037,\n-    1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 529, 529, 529, 529, 529,\n-    529, 529, 1037, 1037, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529,\n-    529, 529, 529, 529, 525, 529, 529, 529, 529, 529, 529, 1037, 1037, 47,\n-    47, 47, 519, 519, 1037, 1037, 1037, 530, 530, 530, 530, 530, 530, 317,\n-    40, 530, 530, 40, 40, 1037, 1037, 1037, 1037, 530, 530, 530, 530, 530,\n-    530, 1038, 530, 530, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,\n-    1038, 1038, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 1037, 1037,\n-    1037, 1037, 1037, 1037, 1037, 1037, 1037, 1039, 1039, 1039, 1039, 1039,\n-    1039, 1039, 1039, 1039, 1039, 1040, 585, 585, 1037, 1037, 1037, 1037,\n-    1037, 585, 585, 585, 585, 1037, 1037, 1037, 1037, 585, 1037, 1037, 1037,\n-    1037, 1037, 1037, 1037, 585, 585, 1037, 1037, 1037, 1037, 1037, 1037,\n-    525, 525, 525, 525, 525, 525, 1037, 1037, 525, 529, 529, 529, 529, 529,\n-    529, 529, 529, 529, 529, 529, 529, 525, 525, 525, 525, 525, 525, 525,\n-    525, 525, 529, 525, 525, 525, 525, 525, 525, 529, 525, 525, 525, 525,\n-    525, 525, 525, 536, 525, 525, 525, 525, 525, 525, 529, 529, 529, 529,\n-    529, 529, 529, 529, 40, 40, 529, 529, 525, 525, 525, 525, 525, 528, 528,\n-    525, 525, 525, 525, 525, 528, 525, 525, 525, 525, 525, 536, 536, 536,\n-    525, 525, 536, 525, 525, 536, 534, 534, 529, 529, 525, 525, 529, 529,\n-    529, 525, 529, 529, 529, 525, 525, 525, 1041, 1041, 1041, 1041, 1041,\n-    525, 525, 525, 525, 525, 525, 525, 529, 525, 529, 536, 536, 525, 525,\n-    536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 525, 525, 525,\n-    525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 536, 536, 536, 536,\n-    525, 525, 525, 525, 536, 525, 536, 525, 525, 525, 536, 525, 525, 525,\n-    525, 536, 536, 536, 525, 536, 536, 536, 528, 525, 528, 525, 528, 525,\n-    525, 525, 525, 525, 536, 525, 525, 525, 525, 528, 525, 528, 528, 525,\n-    525, 525, 525, 525, 525, 525, 525, 525, 525, 529, 529, 525, 528, 528,\n-    528, 528, 528, 528, 528, 525, 525, 525, 525, 525, 525, 525, 525, 528,\n-    528, 528, 528, 528, 528, 525, 525, 525, 525, 525, 528, 528, 528, 528,\n-    528, 528, 528, 528, 528, 528, 528, 528, 40, 40, 40, 40, 529, 525, 525,\n-    525, 525, 529, 529, 529, 529, 529, 534, 534, 529, 529, 529, 529, 536,\n-    529, 529, 529, 529, 529, 534, 529, 529, 529, 529, 536, 536, 529, 529,\n-    529, 529, 529, 40, 40, 40, 40, 40, 40, 40, 40, 529, 529, 529, 529, 40,\n-    40, 529, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 536, 536, 536,\n-    525, 525, 525, 536, 536, 536, 536, 536, 40, 40, 40, 40, 40, 40, 538, 538,\n-    538, 1042, 1042, 1042, 40, 40, 40, 40, 525, 525, 525, 536, 525, 525, 525,\n-    525, 525, 525, 525, 525, 536, 536, 536, 525, 536, 525, 525, 525, 525,\n-    525, 529, 529, 529, 529, 529, 529, 536, 529, 529, 529, 525, 525, 525,\n-    529, 529, 1037, 1037, 1037, 529, 529, 529, 525, 525, 1037, 1037, 1037,\n-    529, 529, 529, 529, 525, 525, 525, 525, 525, 525, 1037, 1037, 1037, 1037,\n-    1037, 1037, 40, 40, 40, 40, 1037, 1037, 1037, 1037, 40, 40, 40, 40, 40,\n-    529, 529, 529, 529, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 40, 40,\n-    1037, 1037, 1037, 1037, 1037, 1037, 40, 40, 40, 40, 40, 40, 1037, 1037,\n-    536, 536, 536, 536, 536, 525, 536, 536, 525, 525, 525, 525, 525, 525,\n-    536, 525, 536, 536, 525, 525, 525, 536, 536, 1037, 525, 1037, 1037, 525,\n-    525, 525, 525, 1037, 1037, 1037, 525, 1037, 525, 525, 525, 525, 525, 525,\n-    525, 1037, 1037, 1037, 1037, 1037, 525, 525, 525, 525, 525, 536, 536,\n-    525, 536, 536, 1037, 1037, 1037, 1037, 1037, 1037, 525, 536, 536, 536,\n-    536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 525, 525, 1037, 1037,\n-    1037, 1037, 1037, 1037, 81, 81, 592, 592, 592, 592, 592, 592, 592, 593,\n-    592, 592, 592, 592, 592, 593, 593, 593, 592, 593, 593, 593, 593, 593,\n-    593, 593, 593, 593, 593, 593, 593, 593, 81, 81, 81, 503, 81, 81, 81, 81,\n-    81, 81, 503, 503, 503, 503, 503, 503, 503, 503, 670, 670, 670, 670, 670,\n-    670, 81, 81,\n-};\n-\n-\/* decomposition data *\/\n-static const unsigned short decomp_data[] = {\n-    0, 257, 32, 514, 32, 776, 259, 97, 514, 32, 772, 259, 50, 259, 51, 514,\n-    32, 769, 258, 956, 514, 32, 807, 259, 49, 259, 111, 772, 49, 8260, 52,\n-    772, 49, 8260, 50, 772, 51, 8260, 52, 512, 65, 768, 512, 65, 769, 512,\n-    65, 770, 512, 65, 771, 512, 65, 776, 512, 65, 778, 512, 67, 807, 512, 69,\n-    768, 512, 69, 769, 512, 69, 770, 512, 69, 776, 512, 73, 768, 512, 73,\n-    769, 512, 73, 770, 512, 73, 776, 512, 78, 771, 512, 79, 768, 512, 79,\n-    769, 512, 79, 770, 512, 79, 771, 512, 79, 776, 512, 85, 768, 512, 85,\n-    769, 512, 85, 770, 512, 85, 776, 512, 89, 769, 512, 97, 768, 512, 97,\n-    769, 512, 97, 770, 512, 97, 771, 512, 97, 776, 512, 97, 778, 512, 99,\n-    807, 512, 101, 768, 512, 101, 769, 512, 101, 770, 512, 101, 776, 512,\n-    105, 768, 512, 105, 769, 512, 105, 770, 512, 105, 776, 512, 110, 771,\n-    512, 111, 768, 512, 111, 769, 512, 111, 770, 512, 111, 771, 512, 111,\n-    776, 512, 117, 768, 512, 117, 769, 512, 117, 770, 512, 117, 776, 512,\n-    121, 769, 512, 121, 776, 512, 65, 772, 512, 97, 772, 512, 65, 774, 512,\n-    97, 774, 512, 65, 808, 512, 97, 808, 512, 67, 769, 512, 99, 769, 512, 67,\n-    770, 512, 99, 770, 512, 67, 775, 512, 99, 775, 512, 67, 780, 512, 99,\n-    780, 512, 68, 780, 512, 100, 780, 512, 69, 772, 512, 101, 772, 512, 69,\n-    774, 512, 101, 774, 512, 69, 775, 512, 101, 775, 512, 69, 808, 512, 101,\n-    808, 512, 69, 780, 512, 101, 780, 512, 71, 770, 512, 103, 770, 512, 71,\n-    774, 512, 103, 774, 512, 71, 775, 512, 103, 775, 512, 71, 807, 512, 103,\n-    807, 512, 72, 770, 512, 104, 770, 512, 73, 771, 512, 105, 771, 512, 73,\n-    772, 512, 105, 772, 512, 73, 774, 512, 105, 774, 512, 73, 808, 512, 105,\n-    808, 512, 73, 775, 514, 73, 74, 514, 105, 106, 512, 74, 770, 512, 106,\n-    770, 512, 75, 807, 512, 107, 807, 512, 76, 769, 512, 108, 769, 512, 76,\n-    807, 512, 108, 807, 512, 76, 780, 512, 108, 780, 514, 76, 183, 514, 108,\n-    183, 512, 78, 769, 512, 110, 769, 512, 78, 807, 512, 110, 807, 512, 78,\n-    780, 512, 110, 780, 514, 700, 110, 512, 79, 772, 512, 111, 772, 512, 79,\n-    774, 512, 111, 774, 512, 79, 779, 512, 111, 779, 512, 82, 769, 512, 114,\n-    769, 512, 82, 807, 512, 114, 807, 512, 82, 780, 512, 114, 780, 512, 83,\n-    769, 512, 115, 769, 512, 83, 770, 512, 115, 770, 512, 83, 807, 512, 115,\n-    807, 512, 83, 780, 512, 115, 780, 512, 84, 807, 512, 116, 807, 512, 84,\n-    780, 512, 116, 780, 512, 85, 771, 512, 117, 771, 512, 85, 772, 512, 117,\n-    772, 512, 85, 774, 512, 117, 774, 512, 85, 778, 512, 117, 778, 512, 85,\n-    779, 512, 117, 779, 512, 85, 808, 512, 117, 808, 512, 87, 770, 512, 119,\n-    770, 512, 89, 770, 512, 121, 770, 512, 89, 776, 512, 90, 769, 512, 122,\n-    769, 512, 90, 775, 512, 122, 775, 512, 90, 780, 512, 122, 780, 258, 115,\n-    512, 79, 795, 512, 111, 795, 512, 85, 795, 512, 117, 795, 514, 68, 381,\n-    514, 68, 382, 514, 100, 382, 514, 76, 74, 514, 76, 106, 514, 108, 106,\n-    514, 78, 74, 514, 78, 106, 514, 110, 106, 512, 65, 780, 512, 97, 780,\n-    512, 73, 780, 512, 105, 780, 512, 79, 780, 512, 111, 780, 512, 85, 780,\n-    512, 117, 780, 512, 220, 772, 512, 252, 772, 512, 220, 769, 512, 252,\n-    769, 512, 220, 780, 512, 252, 780, 512, 220, 768, 512, 252, 768, 512,\n-    196, 772, 512, 228, 772, 512, 550, 772, 512, 551, 772, 512, 198, 772,\n-    512, 230, 772, 512, 71, 780, 512, 103, 780, 512, 75, 780, 512, 107, 780,\n-    512, 79, 808, 512, 111, 808, 512, 490, 772, 512, 491, 772, 512, 439, 780,\n-    512, 658, 780, 512, 106, 780, 514, 68, 90, 514, 68, 122, 514, 100, 122,\n-    512, 71, 769, 512, 103, 769, 512, 78, 768, 512, 110, 768, 512, 197, 769,\n-    512, 229, 769, 512, 198, 769, 512, 230, 769, 512, 216, 769, 512, 248,\n-    769, 512, 65, 783, 512, 97, 783, 512, 65, 785, 512, 97, 785, 512, 69,\n-    783, 512, 101, 783, 512, 69, 785, 512, 101, 785, 512, 73, 783, 512, 105,\n-    783, 512, 73, 785, 512, 105, 785, 512, 79, 783, 512, 111, 783, 512, 79,\n-    785, 512, 111, 785, 512, 82, 783, 512, 114, 783, 512, 82, 785, 512, 114,\n-    785, 512, 85, 783, 512, 117, 783, 512, 85, 785, 512, 117, 785, 512, 83,\n-    806, 512, 115, 806, 512, 84, 806, 512, 116, 806, 512, 72, 780, 512, 104,\n-    780, 512, 65, 775, 512, 97, 775, 512, 69, 807, 512, 101, 807, 512, 214,\n-    772, 512, 246, 772, 512, 213, 772, 512, 245, 772, 512, 79, 775, 512, 111,\n-    775, 512, 558, 772, 512, 559, 772, 512, 89, 772, 512, 121, 772, 259, 104,\n-    259, 614, 259, 106, 259, 114, 259, 633, 259, 635, 259, 641, 259, 119,\n-    259, 121, 514, 32, 774, 514, 32, 775, 514, 32, 778, 514, 32, 808, 514,\n-    32, 771, 514, 32, 779, 259, 611, 259, 108, 259, 115, 259, 120, 259, 661,\n-    256, 768, 256, 769, 256, 787, 512, 776, 769, 256, 697, 514, 32, 837, 256,\n-    59, 514, 32, 769, 512, 168, 769, 512, 913, 769, 256, 183, 512, 917, 769,\n-    512, 919, 769, 512, 921, 769, 512, 927, 769, 512, 933, 769, 512, 937,\n-    769, 512, 970, 769, 512, 921, 776, 512, 933, 776, 512, 945, 769, 512,\n-    949, 769, 512, 951, 769, 512, 953, 769, 512, 971, 769, 512, 953, 776,\n-    512, 965, 776, 512, 959, 769, 512, 965, 769, 512, 969, 769, 258, 946,\n-    258, 952, 258, 933, 512, 978, 769, 512, 978, 776, 258, 966, 258, 960,\n-    258, 954, 258, 961, 258, 962, 258, 920, 258, 949, 258, 931, 512, 1045,\n-    768, 512, 1045, 776, 512, 1043, 769, 512, 1030, 776, 512, 1050, 769, 512,\n-    1048, 768, 512, 1059, 774, 512, 1048, 774, 512, 1080, 774, 512, 1077,\n-    768, 512, 1077, 776, 512, 1075, 769, 512, 1110, 776, 512, 1082, 769, 512,\n-    1080, 768, 512, 1091, 774, 512, 1140, 783, 512, 1141, 783, 512, 1046,\n-    774, 512, 1078, 774, 512, 1040, 774, 512, 1072, 774, 512, 1040, 776, 512,\n-    1072, 776, 512, 1045, 774, 512, 1077, 774, 512, 1240, 776, 512, 1241,\n-    776, 512, 1046, 776, 512, 1078, 776, 512, 1047, 776, 512, 1079, 776, 512,\n-    1048, 772, 512, 1080, 772, 512, 1048, 776, 512, 1080, 776, 512, 1054,\n-    776, 512, 1086, 776, 512, 1256, 776, 512, 1257, 776, 512, 1069, 776, 512,\n-    1101, 776, 512, 1059, 772, 512, 1091, 772, 512, 1059, 776, 512, 1091,\n-    776, 512, 1059, 779, 512, 1091, 779, 512, 1063, 776, 512, 1095, 776, 512,\n-    1067, 776, 512, 1099, 776, 514, 1381, 1410, 512, 1575, 1619, 512, 1575,\n-    1620, 512, 1608, 1620, 512, 1575, 1621, 512, 1610, 1620, 514, 1575, 1652,\n-    514, 1608, 1652, 514, 1735, 1652, 514, 1610, 1652, 512, 1749, 1620, 512,\n-    1729, 1620, 512, 1746, 1620, 512, 2344, 2364, 512, 2352, 2364, 512, 2355,\n-    2364, 512, 2325, 2364, 512, 2326, 2364, 512, 2327, 2364, 512, 2332, 2364,\n-    512, 2337, 2364, 512, 2338, 2364, 512, 2347, 2364, 512, 2351, 2364, 512,\n-    2503, 2494, 512, 2503, 2519, 512, 2465, 2492, 512, 2466, 2492, 512, 2479,\n-    2492, 512, 2610, 2620, 512, 2616, 2620, 512, 2582, 2620, 512, 2583, 2620,\n-    512, 2588, 2620, 512, 2603, 2620, 512, 2887, 2902, 512, 2887, 2878, 512,\n-    2887, 2903, 512, 2849, 2876, 512, 2850, 2876, 512, 2962, 3031, 512, 3014,\n-    3006, 512, 3015, 3006, 512, 3014, 3031, 512, 3142, 3158, 512, 3263, 3285,\n-    512, 3270, 3285, 512, 3270, 3286, 512, 3270, 3266, 512, 3274, 3285, 512,\n-    3398, 3390, 512, 3399, 3390, 512, 3398, 3415, 512, 3545, 3530, 512, 3545,\n-    3535, 512, 3548, 3530, 512, 3545, 3551, 514, 3661, 3634, 514, 3789, 3762,\n-    514, 3755, 3737, 514, 3755, 3745, 257, 3851, 512, 3906, 4023, 512, 3916,\n-    4023, 512, 3921, 4023, 512, 3926, 4023, 512, 3931, 4023, 512, 3904, 4021,\n-    512, 3953, 3954, 512, 3953, 3956, 512, 4018, 3968, 514, 4018, 3969, 512,\n-    4019, 3968, 514, 4019, 3969, 512, 3953, 3968, 512, 3986, 4023, 512, 3996,\n-    4023, 512, 4001, 4023, 512, 4006, 4023, 512, 4011, 4023, 512, 3984, 4021,\n-    512, 4133, 4142, 259, 4316, 512, 6917, 6965, 512, 6919, 6965, 512, 6921,\n-    6965, 512, 6923, 6965, 512, 6925, 6965, 512, 6929, 6965, 512, 6970, 6965,\n-    512, 6972, 6965, 512, 6974, 6965, 512, 6975, 6965, 512, 6978, 6965, 259,\n-    65, 259, 198, 259, 66, 259, 68, 259, 69, 259, 398, 259, 71, 259, 72, 259,\n-    73, 259, 74, 259, 75, 259, 76, 259, 77, 259, 78, 259, 79, 259, 546, 259,\n-    80, 259, 82, 259, 84, 259, 85, 259, 87, 259, 97, 259, 592, 259, 593, 259,\n-    7426, 259, 98, 259, 100, 259, 101, 259, 601, 259, 603, 259, 604, 259,\n-    103, 259, 107, 259, 109, 259, 331, 259, 111, 259, 596, 259, 7446, 259,\n-    7447, 259, 112, 259, 116, 259, 117, 259, 7453, 259, 623, 259, 118, 259,\n-    7461, 259, 946, 259, 947, 259, 948, 259, 966, 259, 967, 261, 105, 261,\n-    114, 261, 117, 261, 118, 261, 946, 261, 947, 261, 961, 261, 966, 261,\n-    967, 259, 1085, 259, 594, 259, 99, 259, 597, 259, 240, 259, 604, 259,\n-    102, 259, 607, 259, 609, 259, 613, 259, 616, 259, 617, 259, 618, 259,\n-    7547, 259, 669, 259, 621, 259, 7557, 259, 671, 259, 625, 259, 624, 259,\n-    626, 259, 627, 259, 628, 259, 629, 259, 632, 259, 642, 259, 643, 259,\n-    427, 259, 649, 259, 650, 259, 7452, 259, 651, 259, 652, 259, 122, 259,\n-    656, 259, 657, 259, 658, 259, 952, 512, 65, 805, 512, 97, 805, 512, 66,\n-    775, 512, 98, 775, 512, 66, 803, 512, 98, 803, 512, 66, 817, 512, 98,\n-    817, 512, 199, 769, 512, 231, 769, 512, 68, 775, 512, 100, 775, 512, 68,\n-    803, 512, 100, 803, 512, 68, 817, 512, 100, 817, 512, 68, 807, 512, 100,\n-    807, 512, 68, 813, 512, 100, 813, 512, 274, 768, 512, 275, 768, 512, 274,\n-    769, 512, 275, 769, 512, 69, 813, 512, 101, 813, 512, 69, 816, 512, 101,\n-    816, 512, 552, 774, 512, 553, 774, 512, 70, 775, 512, 102, 775, 512, 71,\n-    772, 512, 103, 772, 512, 72, 775, 512, 104, 775, 512, 72, 803, 512, 104,\n-    803, 512, 72, 776, 512, 104, 776, 512, 72, 807, 512, 104, 807, 512, 72,\n-    814, 512, 104, 814, 512, 73, 816, 512, 105, 816, 512, 207, 769, 512, 239,\n-    769, 512, 75, 769, 512, 107, 769, 512, 75, 803, 512, 107, 803, 512, 75,\n-    817, 512, 107, 817, 512, 76, 803, 512, 108, 803, 512, 7734, 772, 512,\n-    7735, 772, 512, 76, 817, 512, 108, 817, 512, 76, 813, 512, 108, 813, 512,\n-    77, 769, 512, 109, 769, 512, 77, 775, 512, 109, 775, 512, 77, 803, 512,\n-    109, 803, 512, 78, 775, 512, 110, 775, 512, 78, 803, 512, 110, 803, 512,\n-    78, 817, 512, 110, 817, 512, 78, 813, 512, 110, 813, 512, 213, 769, 512,\n-    245, 769, 512, 213, 776, 512, 245, 776, 512, 332, 768, 512, 333, 768,\n-    512, 332, 769, 512, 333, 769, 512, 80, 769, 512, 112, 769, 512, 80, 775,\n-    512, 112, 775, 512, 82, 775, 512, 114, 775, 512, 82, 803, 512, 114, 803,\n-    512, 7770, 772, 512, 7771, 772, 512, 82, 817, 512, 114, 817, 512, 83,\n-    775, 512, 115, 775, 512, 83, 803, 512, 115, 803, 512, 346, 775, 512, 347,\n-    775, 512, 352, 775, 512, 353, 775, 512, 7778, 775, 512, 7779, 775, 512,\n-    84, 775, 512, 116, 775, 512, 84, 803, 512, 116, 803, 512, 84, 817, 512,\n-    116, 817, 512, 84, 813, 512, 116, 813, 512, 85, 804, 512, 117, 804, 512,\n-    85, 816, 512, 117, 816, 512, 85, 813, 512, 117, 813, 512, 360, 769, 512,\n-    361, 769, 512, 362, 776, 512, 363, 776, 512, 86, 771, 512, 118, 771, 512,\n-    86, 803, 512, 118, 803, 512, 87, 768, 512, 119, 768, 512, 87, 769, 512,\n-    119, 769, 512, 87, 776, 512, 119, 776, 512, 87, 775, 512, 119, 775, 512,\n-    87, 803, 512, 119, 803, 512, 88, 775, 512, 120, 775, 512, 88, 776, 512,\n-    120, 776, 512, 89, 775, 512, 121, 775, 512, 90, 770, 512, 122, 770, 512,\n-    90, 803, 512, 122, 803, 512, 90, 817, 512, 122, 817, 512, 104, 817, 512,\n-    116, 776, 512, 119, 778, 512, 121, 778, 514, 97, 702, 512, 383, 775, 512,\n-    65, 803, 512, 97, 803, 512, 65, 777, 512, 97, 777, 512, 194, 769, 512,\n-    226, 769, 512, 194, 768, 512, 226, 768, 512, 194, 777, 512, 226, 777,\n-    512, 194, 771, 512, 226, 771, 512, 7840, 770, 512, 7841, 770, 512, 258,\n-    769, 512, 259, 769, 512, 258, 768, 512, 259, 768, 512, 258, 777, 512,\n-    259, 777, 512, 258, 771, 512, 259, 771, 512, 7840, 774, 512, 7841, 774,\n-    512, 69, 803, 512, 101, 803, 512, 69, 777, 512, 101, 777, 512, 69, 771,\n-    512, 101, 771, 512, 202, 769, 512, 234, 769, 512, 202, 768, 512, 234,\n-    768, 512, 202, 777, 512, 234, 777, 512, 202, 771, 512, 234, 771, 512,\n-    7864, 770, 512, 7865, 770, 512, 73, 777, 512, 105, 777, 512, 73, 803,\n-    512, 105, 803, 512, 79, 803, 512, 111, 803, 512, 79, 777, 512, 111, 777,\n-    512, 212, 769, 512, 244, 769, 512, 212, 768, 512, 244, 768, 512, 212,\n-    777, 512, 244, 777, 512, 212, 771, 512, 244, 771, 512, 7884, 770, 512,\n-    7885, 770, 512, 416, 769, 512, 417, 769, 512, 416, 768, 512, 417, 768,\n-    512, 416, 777, 512, 417, 777, 512, 416, 771, 512, 417, 771, 512, 416,\n-    803, 512, 417, 803, 512, 85, 803, 512, 117, 803, 512, 85, 777, 512, 117,\n-    777, 512, 431, 769, 512, 432, 769, 512, 431, 768, 512, 432, 768, 512,\n-    431, 777, 512, 432, 777, 512, 431, 771, 512, 432, 771, 512, 431, 803,\n-    512, 432, 803, 512, 89, 768, 512, 121, 768, 512, 89, 803, 512, 121, 803,\n-    512, 89, 777, 512, 121, 777, 512, 89, 771, 512, 121, 771, 512, 945, 787,\n-    512, 945, 788, 512, 7936, 768, 512, 7937, 768, 512, 7936, 769, 512, 7937,\n-    769, 512, 7936, 834, 512, 7937, 834, 512, 913, 787, 512, 913, 788, 512,\n-    7944, 768, 512, 7945, 768, 512, 7944, 769, 512, 7945, 769, 512, 7944,\n-    834, 512, 7945, 834, 512, 949, 787, 512, 949, 788, 512, 7952, 768, 512,\n-    7953, 768, 512, 7952, 769, 512, 7953, 769, 512, 917, 787, 512, 917, 788,\n-    512, 7960, 768, 512, 7961, 768, 512, 7960, 769, 512, 7961, 769, 512, 951,\n-    787, 512, 951, 788, 512, 7968, 768, 512, 7969, 768, 512, 7968, 769, 512,\n-    7969, 769, 512, 7968, 834, 512, 7969, 834, 512, 919, 787, 512, 919, 788,\n-    512, 7976, 768, 512, 7977, 768, 512, 7976, 769, 512, 7977, 769, 512,\n-    7976, 834, 512, 7977, 834, 512, 953, 787, 512, 953, 788, 512, 7984, 768,\n-    512, 7985, 768, 512, 7984, 769, 512, 7985, 769, 512, 7984, 834, 512,\n-    7985, 834, 512, 921, 787, 512, 921, 788, 512, 7992, 768, 512, 7993, 768,\n-    512, 7992, 769, 512, 7993, 769, 512, 7992, 834, 512, 7993, 834, 512, 959,\n-    787, 512, 959, 788, 512, 8000, 768, 512, 8001, 768, 512, 8000, 769, 512,\n-    8001, 769, 512, 927, 787, 512, 927, 788, 512, 8008, 768, 512, 8009, 768,\n-    512, 8008, 769, 512, 8009, 769, 512, 965, 787, 512, 965, 788, 512, 8016,\n-    768, 512, 8017, 768, 512, 8016, 769, 512, 8017, 769, 512, 8016, 834, 512,\n-    8017, 834, 512, 933, 788, 512, 8025, 768, 512, 8025, 769, 512, 8025, 834,\n-    512, 969, 787, 512, 969, 788, 512, 8032, 768, 512, 8033, 768, 512, 8032,\n-    769, 512, 8033, 769, 512, 8032, 834, 512, 8033, 834, 512, 937, 787, 512,\n-    937, 788, 512, 8040, 768, 512, 8041, 768, 512, 8040, 769, 512, 8041, 769,\n-    512, 8040, 834, 512, 8041, 834, 512, 945, 768, 256, 940, 512, 949, 768,\n-    256, 941, 512, 951, 768, 256, 942, 512, 953, 768, 256, 943, 512, 959,\n-    768, 256, 972, 512, 965, 768, 256, 973, 512, 969, 768, 256, 974, 512,\n-    7936, 837, 512, 7937, 837, 512, 7938, 837, 512, 7939, 837, 512, 7940,\n-    837, 512, 7941, 837, 512, 7942, 837, 512, 7943, 837, 512, 7944, 837, 512,\n-    7945, 837, 512, 7946, 837, 512, 7947, 837, 512, 7948, 837, 512, 7949,\n-    837, 512, 7950, 837, 512, 7951, 837, 512, 7968, 837, 512, 7969, 837, 512,\n-    7970, 837, 512, 7971, 837, 512, 7972, 837, 512, 7973, 837, 512, 7974,\n-    837, 512, 7975, 837, 512, 7976, 837, 512, 7977, 837, 512, 7978, 837, 512,\n-    7979, 837, 512, 7980, 837, 512, 7981, 837, 512, 7982, 837, 512, 7983,\n-    837, 512, 8032, 837, 512, 8033, 837, 512, 8034, 837, 512, 8035, 837, 512,\n-    8036, 837, 512, 8037, 837, 512, 8038, 837, 512, 8039, 837, 512, 8040,\n-    837, 512, 8041, 837, 512, 8042, 837, 512, 8043, 837, 512, 8044, 837, 512,\n-    8045, 837, 512, 8046, 837, 512, 8047, 837, 512, 945, 774, 512, 945, 772,\n-    512, 8048, 837, 512, 945, 837, 512, 940, 837, 512, 945, 834, 512, 8118,\n-    837, 512, 913, 774, 512, 913, 772, 512, 913, 768, 256, 902, 512, 913,\n-    837, 514, 32, 787, 256, 953, 514, 32, 787, 514, 32, 834, 512, 168, 834,\n-    512, 8052, 837, 512, 951, 837, 512, 942, 837, 512, 951, 834, 512, 8134,\n-    837, 512, 917, 768, 256, 904, 512, 919, 768, 256, 905, 512, 919, 837,\n-    512, 8127, 768, 512, 8127, 769, 512, 8127, 834, 512, 953, 774, 512, 953,\n-    772, 512, 970, 768, 256, 912, 512, 953, 834, 512, 970, 834, 512, 921,\n-    774, 512, 921, 772, 512, 921, 768, 256, 906, 512, 8190, 768, 512, 8190,\n-    769, 512, 8190, 834, 512, 965, 774, 512, 965, 772, 512, 971, 768, 256,\n-    944, 512, 961, 787, 512, 961, 788, 512, 965, 834, 512, 971, 834, 512,\n-    933, 774, 512, 933, 772, 512, 933, 768, 256, 910, 512, 929, 788, 512,\n-    168, 768, 256, 901, 256, 96, 512, 8060, 837, 512, 969, 837, 512, 974,\n-    837, 512, 969, 834, 512, 8182, 837, 512, 927, 768, 256, 908, 512, 937,\n-    768, 256, 911, 512, 937, 837, 256, 180, 514, 32, 788, 256, 8194, 256,\n-    8195, 258, 32, 258, 32, 258, 32, 258, 32, 258, 32, 257, 32, 258, 32, 258,\n-    32, 258, 32, 257, 8208, 514, 32, 819, 258, 46, 514, 46, 46, 770, 46, 46,\n-    46, 257, 32, 514, 8242, 8242, 770, 8242, 8242, 8242, 514, 8245, 8245,\n-    770, 8245, 8245, 8245, 514, 33, 33, 514, 32, 773, 514, 63, 63, 514, 63,\n-    33, 514, 33, 63, 1026, 8242, 8242, 8242, 8242, 258, 32, 259, 48, 259,\n-    105, 259, 52, 259, 53, 259, 54, 259, 55, 259, 56, 259, 57, 259, 43, 259,\n-    8722, 259, 61, 259, 40, 259, 41, 259, 110, 261, 48, 261, 49, 261, 50,\n-    261, 51, 261, 52, 261, 53, 261, 54, 261, 55, 261, 56, 261, 57, 261, 43,\n-    261, 8722, 261, 61, 261, 40, 261, 41, 261, 97, 261, 101, 261, 111, 261,\n-    120, 261, 601, 261, 104, 261, 107, 261, 108, 261, 109, 261, 110, 261,\n-    112, 261, 115, 261, 116, 514, 82, 115, 770, 97, 47, 99, 770, 97, 47, 115,\n-    262, 67, 514, 176, 67, 770, 99, 47, 111, 770, 99, 47, 117, 258, 400, 514,\n-    176, 70, 262, 103, 262, 72, 262, 72, 262, 72, 262, 104, 262, 295, 262,\n-    73, 262, 73, 262, 76, 262, 108, 262, 78, 514, 78, 111, 262, 80, 262, 81,\n-    262, 82, 262, 82, 262, 82, 515, 83, 77, 770, 84, 69, 76, 515, 84, 77,\n-    262, 90, 256, 937, 262, 90, 256, 75, 256, 197, 262, 66, 262, 67, 262,\n-    101, 262, 69, 262, 70, 262, 77, 262, 111, 258, 1488, 258, 1489, 258,\n-    1490, 258, 1491, 262, 105, 770, 70, 65, 88, 262, 960, 262, 947, 262, 915,\n-    262, 928, 262, 8721, 262, 68, 262, 100, 262, 101, 262, 105, 262, 106,\n-    772, 49, 8260, 55, 772, 49, 8260, 57, 1028, 49, 8260, 49, 48, 772, 49,\n-    8260, 51, 772, 50, 8260, 51, 772, 49, 8260, 53, 772, 50, 8260, 53, 772,\n-    51, 8260, 53, 772, 52, 8260, 53, 772, 49, 8260, 54, 772, 53, 8260, 54,\n-    772, 49, 8260, 56, 772, 51, 8260, 56, 772, 53, 8260, 56, 772, 55, 8260,\n-    56, 516, 49, 8260, 258, 73, 514, 73, 73, 770, 73, 73, 73, 514, 73, 86,\n-    258, 86, 514, 86, 73, 770, 86, 73, 73, 1026, 86, 73, 73, 73, 514, 73, 88,\n-    258, 88, 514, 88, 73, 770, 88, 73, 73, 258, 76, 258, 67, 258, 68, 258,\n-    77, 258, 105, 514, 105, 105, 770, 105, 105, 105, 514, 105, 118, 258, 118,\n-    514, 118, 105, 770, 118, 105, 105, 1026, 118, 105, 105, 105, 514, 105,\n-    120, 258, 120, 514, 120, 105, 770, 120, 105, 105, 258, 108, 258, 99, 258,\n-    100, 258, 109, 772, 48, 8260, 51, 512, 8592, 824, 512, 8594, 824, 512,\n-    8596, 824, 512, 8656, 824, 512, 8660, 824, 512, 8658, 824, 512, 8707,\n-    824, 512, 8712, 824, 512, 8715, 824, 512, 8739, 824, 512, 8741, 824, 514,\n-    8747, 8747, 770, 8747, 8747, 8747, 514, 8750, 8750, 770, 8750, 8750,\n-    8750, 512, 8764, 824, 512, 8771, 824, 512, 8773, 824, 512, 8776, 824,\n-    512, 61, 824, 512, 8801, 824, 512, 8781, 824, 512, 60, 824, 512, 62, 824,\n-    512, 8804, 824, 512, 8805, 824, 512, 8818, 824, 512, 8819, 824, 512,\n-    8822, 824, 512, 8823, 824, 512, 8826, 824, 512, 8827, 824, 512, 8834,\n-    824, 512, 8835, 824, 512, 8838, 824, 512, 8839, 824, 512, 8866, 824, 512,\n-    8872, 824, 512, 8873, 824, 512, 8875, 824, 512, 8828, 824, 512, 8829,\n-    824, 512, 8849, 824, 512, 8850, 824, 512, 8882, 824, 512, 8883, 824, 512,\n-    8884, 824, 512, 8885, 824, 256, 12296, 256, 12297, 263, 49, 263, 50, 263,\n-    51, 263, 52, 263, 53, 263, 54, 263, 55, 263, 56, 263, 57, 519, 49, 48,\n-    519, 49, 49, 519, 49, 50, 519, 49, 51, 519, 49, 52, 519, 49, 53, 519, 49,\n-    54, 519, 49, 55, 519, 49, 56, 519, 49, 57, 519, 50, 48, 770, 40, 49, 41,\n-    770, 40, 50, 41, 770, 40, 51, 41, 770, 40, 52, 41, 770, 40, 53, 41, 770,\n-    40, 54, 41, 770, 40, 55, 41, 770, 40, 56, 41, 770, 40, 57, 41, 1026, 40,\n-    49, 48, 41, 1026, 40, 49, 49, 41, 1026, 40, 49, 50, 41, 1026, 40, 49, 51,\n-    41, 1026, 40, 49, 52, 41, 1026, 40, 49, 53, 41, 1026, 40, 49, 54, 41,\n-    1026, 40, 49, 55, 41, 1026, 40, 49, 56, 41, 1026, 40, 49, 57, 41, 1026,\n-    40, 50, 48, 41, 514, 49, 46, 514, 50, 46, 514, 51, 46, 514, 52, 46, 514,\n-    53, 46, 514, 54, 46, 514, 55, 46, 514, 56, 46, 514, 57, 46, 770, 49, 48,\n-    46, 770, 49, 49, 46, 770, 49, 50, 46, 770, 49, 51, 46, 770, 49, 52, 46,\n-    770, 49, 53, 46, 770, 49, 54, 46, 770, 49, 55, 46, 770, 49, 56, 46, 770,\n-    49, 57, 46, 770, 50, 48, 46, 770, 40, 97, 41, 770, 40, 98, 41, 770, 40,\n-    99, 41, 770, 40, 100, 41, 770, 40, 101, 41, 770, 40, 102, 41, 770, 40,\n-    103, 41, 770, 40, 104, 41, 770, 40, 105, 41, 770, 40, 106, 41, 770, 40,\n-    107, 41, 770, 40, 108, 41, 770, 40, 109, 41, 770, 40, 110, 41, 770, 40,\n-    111, 41, 770, 40, 112, 41, 770, 40, 113, 41, 770, 40, 114, 41, 770, 40,\n-    115, 41, 770, 40, 116, 41, 770, 40, 117, 41, 770, 40, 118, 41, 770, 40,\n-    119, 41, 770, 40, 120, 41, 770, 40, 121, 41, 770, 40, 122, 41, 263, 65,\n-    263, 66, 263, 67, 263, 68, 263, 69, 263, 70, 263, 71, 263, 72, 263, 73,\n-    263, 74, 263, 75, 263, 76, 263, 77, 263, 78, 263, 79, 263, 80, 263, 81,\n-    263, 82, 263, 83, 263, 84, 263, 85, 263, 86, 263, 87, 263, 88, 263, 89,\n-    263, 90, 263, 97, 263, 98, 263, 99, 263, 100, 263, 101, 263, 102, 263,\n-    103, 263, 104, 263, 105, 263, 106, 263, 107, 263, 108, 263, 109, 263,\n-    110, 263, 111, 263, 112, 263, 113, 263, 114, 263, 115, 263, 116, 263,\n-    117, 263, 118, 263, 119, 263, 120, 263, 121, 263, 122, 263, 48, 1026,\n-    8747, 8747, 8747, 8747, 770, 58, 58, 61, 514, 61, 61, 770, 61, 61, 61,\n-    512, 10973, 824, 261, 106, 259, 86, 259, 11617, 258, 27597, 258, 40863,\n-    258, 19968, 258, 20008, 258, 20022, 258, 20031, 258, 20057, 258, 20101,\n-    258, 20108, 258, 20128, 258, 20154, 258, 20799, 258, 20837, 258, 20843,\n-    258, 20866, 258, 20886, 258, 20907, 258, 20960, 258, 20981, 258, 20992,\n-    258, 21147, 258, 21241, 258, 21269, 258, 21274, 258, 21304, 258, 21313,\n-    258, 21340, 258, 21353, 258, 21378, 258, 21430, 258, 21448, 258, 21475,\n-    258, 22231, 258, 22303, 258, 22763, 258, 22786, 258, 22794, 258, 22805,\n-    258, 22823, 258, 22899, 258, 23376, 258, 23424, 258, 23544, 258, 23567,\n-    258, 23586, 258, 23608, 258, 23662, 258, 23665, 258, 24027, 258, 24037,\n-    258, 24049, 258, 24062, 258, 24178, 258, 24186, 258, 24191, 258, 24308,\n-    258, 24318, 258, 24331, 258, 24339, 258, 24400, 258, 24417, 258, 24435,\n-    258, 24515, 258, 25096, 258, 25142, 258, 25163, 258, 25903, 258, 25908,\n-    258, 25991, 258, 26007, 258, 26020, 258, 26041, 258, 26080, 258, 26085,\n-    258, 26352, 258, 26376, 258, 26408, 258, 27424, 258, 27490, 258, 27513,\n-    258, 27571, 258, 27595, 258, 27604, 258, 27611, 258, 27663, 258, 27668,\n-    258, 27700, 258, 28779, 258, 29226, 258, 29238, 258, 29243, 258, 29247,\n-    258, 29255, 258, 29273, 258, 29275, 258, 29356, 258, 29572, 258, 29577,\n-    258, 29916, 258, 29926, 258, 29976, 258, 29983, 258, 29992, 258, 30000,\n-    258, 30091, 258, 30098, 258, 30326, 258, 30333, 258, 30382, 258, 30399,\n-    258, 30446, 258, 30683, 258, 30690, 258, 30707, 258, 31034, 258, 31160,\n-    258, 31166, 258, 31348, 258, 31435, 258, 31481, 258, 31859, 258, 31992,\n-    258, 32566, 258, 32593, 258, 32650, 258, 32701, 258, 32769, 258, 32780,\n-    258, 32786, 258, 32819, 258, 32895, 258, 32905, 258, 33251, 258, 33258,\n-    258, 33267, 258, 33276, 258, 33292, 258, 33307, 258, 33311, 258, 33390,\n-    258, 33394, 258, 33400, 258, 34381, 258, 34411, 258, 34880, 258, 34892,\n-    258, 34915, 258, 35198, 258, 35211, 258, 35282, 258, 35328, 258, 35895,\n-    258, 35910, 258, 35925, 258, 35960, 258, 35997, 258, 36196, 258, 36208,\n-    258, 36275, 258, 36523, 258, 36554, 258, 36763, 258, 36784, 258, 36789,\n-    258, 37009, 258, 37193, 258, 37318, 258, 37324, 258, 37329, 258, 38263,\n-    258, 38272, 258, 38428, 258, 38582, 258, 38585, 258, 38632, 258, 38737,\n-    258, 38750, 258, 38754, 258, 38761, 258, 38859, 258, 38893, 258, 38899,\n-    258, 38913, 258, 39080, 258, 39131, 258, 39135, 258, 39318, 258, 39321,\n-    258, 39340, 258, 39592, 258, 39640, 258, 39647, 258, 39717, 258, 39727,\n-    258, 39730, 258, 39740, 258, 39770, 258, 40165, 258, 40565, 258, 40575,\n-    258, 40613, 258, 40635, 258, 40643, 258, 40653, 258, 40657, 258, 40697,\n-    258, 40701, 258, 40718, 258, 40723, 258, 40736, 258, 40763, 258, 40778,\n-    258, 40786, 258, 40845, 258, 40860, 258, 40864, 264, 32, 258, 12306, 258,\n-    21313, 258, 21316, 258, 21317, 512, 12363, 12441, 512, 12365, 12441, 512,\n-    12367, 12441, 512, 12369, 12441, 512, 12371, 12441, 512, 12373, 12441,\n-    512, 12375, 12441, 512, 12377, 12441, 512, 12379, 12441, 512, 12381,\n-    12441, 512, 12383, 12441, 512, 12385, 12441, 512, 12388, 12441, 512,\n-    12390, 12441, 512, 12392, 12441, 512, 12399, 12441, 512, 12399, 12442,\n-    512, 12402, 12441, 512, 12402, 12442, 512, 12405, 12441, 512, 12405,\n-    12442, 512, 12408, 12441, 512, 12408, 12442, 512, 12411, 12441, 512,\n-    12411, 12442, 512, 12358, 12441, 514, 32, 12441, 514, 32, 12442, 512,\n-    12445, 12441, 521, 12424, 12426, 512, 12459, 12441, 512, 12461, 12441,\n-    512, 12463, 12441, 512, 12465, 12441, 512, 12467, 12441, 512, 12469,\n-    12441, 512, 12471, 12441, 512, 12473, 12441, 512, 12475, 12441, 512,\n-    12477, 12441, 512, 12479, 12441, 512, 12481, 12441, 512, 12484, 12441,\n-    512, 12486, 12441, 512, 12488, 12441, 512, 12495, 12441, 512, 12495,\n-    12442, 512, 12498, 12441, 512, 12498, 12442, 512, 12501, 12441, 512,\n-    12501, 12442, 512, 12504, 12441, 512, 12504, 12442, 512, 12507, 12441,\n-    512, 12507, 12442, 512, 12454, 12441, 512, 12527, 12441, 512, 12528,\n-    12441, 512, 12529, 12441, 512, 12530, 12441, 512, 12541, 12441, 521,\n-    12467, 12488, 258, 4352, 258, 4353, 258, 4522, 258, 4354, 258, 4524, 258,\n-    4525, 258, 4355, 258, 4356, 258, 4357, 258, 4528, 258, 4529, 258, 4530,\n-    258, 4531, 258, 4532, 258, 4533, 258, 4378, 258, 4358, 258, 4359, 258,\n-    4360, 258, 4385, 258, 4361, 258, 4362, 258, 4363, 258, 4364, 258, 4365,\n-    258, 4366, 258, 4367, 258, 4368, 258, 4369, 258, 4370, 258, 4449, 258,\n-    4450, 258, 4451, 258, 4452, 258, 4453, 258, 4454, 258, 4455, 258, 4456,\n-    258, 4457, 258, 4458, 258, 4459, 258, 4460, 258, 4461, 258, 4462, 258,\n-    4463, 258, 4464, 258, 4465, 258, 4466, 258, 4467, 258, 4468, 258, 4469,\n-    258, 4448, 258, 4372, 258, 4373, 258, 4551, 258, 4552, 258, 4556, 258,\n-    4558, 258, 4563, 258, 4567, 258, 4569, 258, 4380, 258, 4573, 258, 4575,\n-    258, 4381, 258, 4382, 258, 4384, 258, 4386, 258, 4387, 258, 4391, 258,\n-    4393, 258, 4395, 258, 4396, 258, 4397, 258, 4398, 258, 4399, 258, 4402,\n-    258, 4406, 258, 4416, 258, 4423, 258, 4428, 258, 4593, 258, 4594, 258,\n-    4439, 258, 4440, 258, 4441, 258, 4484, 258, 4485, 258, 4488, 258, 4497,\n-    258, 4498, 258, 4500, 258, 4510, 258, 4513, 259, 19968, 259, 20108, 259,\n-    19977, 259, 22235, 259, 19978, 259, 20013, 259, 19979, 259, 30002, 259,\n-    20057, 259, 19993, 259, 19969, 259, 22825, 259, 22320, 259, 20154, 770,\n-    40, 4352, 41, 770, 40, 4354, 41, 770, 40, 4355, 41, 770, 40, 4357, 41,\n-    770, 40, 4358, 41, 770, 40, 4359, 41, 770, 40, 4361, 41, 770, 40, 4363,\n-    41, 770, 40, 4364, 41, 770, 40, 4366, 41, 770, 40, 4367, 41, 770, 40,\n-    4368, 41, 770, 40, 4369, 41, 770, 40, 4370, 41, 1026, 40, 4352, 4449, 41,\n-    1026, 40, 4354, 4449, 41, 1026, 40, 4355, 4449, 41, 1026, 40, 4357, 4449,\n-    41, 1026, 40, 4358, 4449, 41, 1026, 40, 4359, 4449, 41, 1026, 40, 4361,\n-    4449, 41, 1026, 40, 4363, 4449, 41, 1026, 40, 4364, 4449, 41, 1026, 40,\n-    4366, 4449, 41, 1026, 40, 4367, 4449, 41, 1026, 40, 4368, 4449, 41, 1026,\n-    40, 4369, 4449, 41, 1026, 40, 4370, 4449, 41, 1026, 40, 4364, 4462, 41,\n-    1794, 40, 4363, 4457, 4364, 4453, 4523, 41, 1538, 40, 4363, 4457, 4370,\n-    4462, 41, 770, 40, 19968, 41, 770, 40, 20108, 41, 770, 40, 19977, 41,\n-    770, 40, 22235, 41, 770, 40, 20116, 41, 770, 40, 20845, 41, 770, 40,\n-    19971, 41, 770, 40, 20843, 41, 770, 40, 20061, 41, 770, 40, 21313, 41,\n-    770, 40, 26376, 41, 770, 40, 28779, 41, 770, 40, 27700, 41, 770, 40,\n-    26408, 41, 770, 40, 37329, 41, 770, 40, 22303, 41, 770, 40, 26085, 41,\n-    770, 40, 26666, 41, 770, 40, 26377, 41, 770, 40, 31038, 41, 770, 40,\n-    21517, 41, 770, 40, 29305, 41, 770, 40, 36001, 41, 770, 40, 31069, 41,\n-    770, 40, 21172, 41, 770, 40, 20195, 41, 770, 40, 21628, 41, 770, 40,\n-    23398, 41, 770, 40, 30435, 41, 770, 40, 20225, 41, 770, 40, 36039, 41,\n-    770, 40, 21332, 41, 770, 40, 31085, 41, 770, 40, 20241, 41, 770, 40,\n-    33258, 41, 770, 40, 33267, 41, 263, 21839, 263, 24188, 263, 25991, 263,\n-    31631, 778, 80, 84, 69, 519, 50, 49, 519, 50, 50, 519, 50, 51, 519, 50,\n-    52, 519, 50, 53, 519, 50, 54, 519, 50, 55, 519, 50, 56, 519, 50, 57, 519,\n-    51, 48, 519, 51, 49, 519, 51, 50, 519, 51, 51, 519, 51, 52, 519, 51, 53,\n-    263, 4352, 263, 4354, 263, 4355, 263, 4357, 263, 4358, 263, 4359, 263,\n-    4361, 263, 4363, 263, 4364, 263, 4366, 263, 4367, 263, 4368, 263, 4369,\n-    263, 4370, 519, 4352, 4449, 519, 4354, 4449, 519, 4355, 4449, 519, 4357,\n-    4449, 519, 4358, 4449, 519, 4359, 4449, 519, 4361, 4449, 519, 4363, 4449,\n-    519, 4364, 4449, 519, 4366, 4449, 519, 4367, 4449, 519, 4368, 4449, 519,\n-    4369, 4449, 519, 4370, 4449, 1287, 4366, 4449, 4535, 4352, 4457, 1031,\n-    4364, 4462, 4363, 4468, 519, 4363, 4462, 263, 19968, 263, 20108, 263,\n-    19977, 263, 22235, 263, 20116, 263, 20845, 263, 19971, 263, 20843, 263,\n-    20061, 263, 21313, 263, 26376, 263, 28779, 263, 27700, 263, 26408, 263,\n-    37329, 263, 22303, 263, 26085, 263, 26666, 263, 26377, 263, 31038, 263,\n-    21517, 263, 29305, 263, 36001, 263, 31069, 263, 21172, 263, 31192, 263,\n-    30007, 263, 22899, 263, 36969, 263, 20778, 263, 21360, 263, 27880, 263,\n-    38917, 263, 20241, 263, 20889, 263, 27491, 263, 19978, 263, 20013, 263,\n-    19979, 263, 24038, 263, 21491, 263, 21307, 263, 23447, 263, 23398, 263,\n-    30435, 263, 20225, 263, 36039, 263, 21332, 263, 22812, 519, 51, 54, 519,\n-    51, 55, 519, 51, 56, 519, 51, 57, 519, 52, 48, 519, 52, 49, 519, 52, 50,\n-    519, 52, 51, 519, 52, 52, 519, 52, 53, 519, 52, 54, 519, 52, 55, 519, 52,\n-    56, 519, 52, 57, 519, 53, 48, 514, 49, 26376, 514, 50, 26376, 514, 51,\n-    26376, 514, 52, 26376, 514, 53, 26376, 514, 54, 26376, 514, 55, 26376,\n-    514, 56, 26376, 514, 57, 26376, 770, 49, 48, 26376, 770, 49, 49, 26376,\n-    770, 49, 50, 26376, 522, 72, 103, 778, 101, 114, 103, 522, 101, 86, 778,\n-    76, 84, 68, 263, 12450, 263, 12452, 263, 12454, 263, 12456, 263, 12458,\n-    263, 12459, 263, 12461, 263, 12463, 263, 12465, 263, 12467, 263, 12469,\n-    263, 12471, 263, 12473, 263, 12475, 263, 12477, 263, 12479, 263, 12481,\n-    263, 12484, 263, 12486, 263, 12488, 263, 12490, 263, 12491, 263, 12492,\n-    263, 12493, 263, 12494, 263, 12495, 263, 12498, 263, 12501, 263, 12504,\n-    263, 12507, 263, 12510, 263, 12511, 263, 12512, 263, 12513, 263, 12514,\n-    263, 12516, 263, 12518, 263, 12520, 263, 12521, 263, 12522, 263, 12523,\n-    263, 12524, 263, 12525, 263, 12527, 263, 12528, 263, 12529, 263, 12530,\n-    1034, 12450, 12497, 12540, 12488, 1034, 12450, 12523, 12501, 12449, 1034,\n-    12450, 12531, 12506, 12450, 778, 12450, 12540, 12523, 1034, 12452, 12491,\n-    12531, 12464, 778, 12452, 12531, 12481, 778, 12454, 12457, 12531, 1290,\n-    12456, 12473, 12463, 12540, 12489, 1034, 12456, 12540, 12459, 12540, 778,\n-    12458, 12531, 12473, 778, 12458, 12540, 12512, 778, 12459, 12452, 12522,\n-    1034, 12459, 12521, 12483, 12488, 1034, 12459, 12525, 12522, 12540, 778,\n-    12460, 12525, 12531, 778, 12460, 12531, 12510, 522, 12462, 12460, 778,\n-    12462, 12491, 12540, 1034, 12461, 12517, 12522, 12540, 1034, 12462,\n-    12523, 12480, 12540, 522, 12461, 12525, 1290, 12461, 12525, 12464, 12521,\n-    12512, 1546, 12461, 12525, 12513, 12540, 12488, 12523, 1290, 12461,\n-    12525, 12527, 12483, 12488, 778, 12464, 12521, 12512, 1290, 12464, 12521,\n-    12512, 12488, 12531, 1290, 12463, 12523, 12476, 12452, 12525, 1034,\n-    12463, 12525, 12540, 12493, 778, 12465, 12540, 12473, 778, 12467, 12523,\n-    12490, 778, 12467, 12540, 12509, 1034, 12469, 12452, 12463, 12523, 1290,\n-    12469, 12531, 12481, 12540, 12512, 1034, 12471, 12522, 12531, 12464, 778,\n-    12475, 12531, 12481, 778, 12475, 12531, 12488, 778, 12480, 12540, 12473,\n-    522, 12487, 12471, 522, 12489, 12523, 522, 12488, 12531, 522, 12490,\n-    12494, 778, 12494, 12483, 12488, 778, 12495, 12452, 12484, 1290, 12497,\n-    12540, 12475, 12531, 12488, 778, 12497, 12540, 12484, 1034, 12496, 12540,\n-    12524, 12523, 1290, 12500, 12450, 12473, 12488, 12523, 778, 12500, 12463,\n-    12523, 522, 12500, 12467, 522, 12499, 12523, 1290, 12501, 12449, 12521,\n-    12483, 12489, 1034, 12501, 12451, 12540, 12488, 1290, 12502, 12483,\n-    12471, 12455, 12523, 778, 12501, 12521, 12531, 1290, 12504, 12463, 12479,\n-    12540, 12523, 522, 12506, 12477, 778, 12506, 12491, 12498, 778, 12504,\n-    12523, 12484, 778, 12506, 12531, 12473, 778, 12506, 12540, 12472, 778,\n-    12505, 12540, 12479, 1034, 12509, 12452, 12531, 12488, 778, 12508, 12523,\n-    12488, 522, 12507, 12531, 778, 12509, 12531, 12489, 778, 12507, 12540,\n-    12523, 778, 12507, 12540, 12531, 1034, 12510, 12452, 12463, 12525, 778,\n-    12510, 12452, 12523, 778, 12510, 12483, 12495, 778, 12510, 12523, 12463,\n-    1290, 12510, 12531, 12471, 12519, 12531, 1034, 12511, 12463, 12525,\n-    12531, 522, 12511, 12522, 1290, 12511, 12522, 12496, 12540, 12523, 522,\n-    12513, 12460, 1034, 12513, 12460, 12488, 12531, 1034, 12513, 12540,\n-    12488, 12523, 778, 12516, 12540, 12489, 778, 12516, 12540, 12523, 778,\n-    12518, 12450, 12531, 1034, 12522, 12483, 12488, 12523, 522, 12522, 12521,\n-    778, 12523, 12500, 12540, 1034, 12523, 12540, 12502, 12523, 522, 12524,\n-    12512, 1290, 12524, 12531, 12488, 12466, 12531, 778, 12527, 12483, 12488,\n-    514, 48, 28857, 514, 49, 28857, 514, 50, 28857, 514, 51, 28857, 514, 52,\n-    28857, 514, 53, 28857, 514, 54, 28857, 514, 55, 28857, 514, 56, 28857,\n-    514, 57, 28857, 770, 49, 48, 28857, 770, 49, 49, 28857, 770, 49, 50,\n-    28857, 770, 49, 51, 28857, 770, 49, 52, 28857, 770, 49, 53, 28857, 770,\n-    49, 54, 28857, 770, 49, 55, 28857, 770, 49, 56, 28857, 770, 49, 57,\n-    28857, 770, 50, 48, 28857, 770, 50, 49, 28857, 770, 50, 50, 28857, 770,\n-    50, 51, 28857, 770, 50, 52, 28857, 778, 104, 80, 97, 522, 100, 97, 522,\n-    65, 85, 778, 98, 97, 114, 522, 111, 86, 522, 112, 99, 522, 100, 109, 778,\n-    100, 109, 178, 778, 100, 109, 179, 522, 73, 85, 522, 24179, 25104, 522,\n-    26157, 21644, 522, 22823, 27491, 522, 26126, 27835, 1034, 26666, 24335,\n-    20250, 31038, 522, 112, 65, 522, 110, 65, 522, 956, 65, 522, 109, 65,\n-    522, 107, 65, 522, 75, 66, 522, 77, 66, 522, 71, 66, 778, 99, 97, 108,\n-    1034, 107, 99, 97, 108, 522, 112, 70, 522, 110, 70, 522, 956, 70, 522,\n-    956, 103, 522, 109, 103, 522, 107, 103, 522, 72, 122, 778, 107, 72, 122,\n-    778, 77, 72, 122, 778, 71, 72, 122, 778, 84, 72, 122, 522, 956, 8467,\n-    522, 109, 8467, 522, 100, 8467, 522, 107, 8467, 522, 102, 109, 522, 110,\n-    109, 522, 956, 109, 522, 109, 109, 522, 99, 109, 522, 107, 109, 778, 109,\n-    109, 178, 778, 99, 109, 178, 522, 109, 178, 778, 107, 109, 178, 778, 109,\n-    109, 179, 778, 99, 109, 179, 522, 109, 179, 778, 107, 109, 179, 778, 109,\n-    8725, 115, 1034, 109, 8725, 115, 178, 522, 80, 97, 778, 107, 80, 97, 778,\n-    77, 80, 97, 778, 71, 80, 97, 778, 114, 97, 100, 1290, 114, 97, 100, 8725,\n-    115, 1546, 114, 97, 100, 8725, 115, 178, 522, 112, 115, 522, 110, 115,\n-    522, 956, 115, 522, 109, 115, 522, 112, 86, 522, 110, 86, 522, 956, 86,\n-    522, 109, 86, 522, 107, 86, 522, 77, 86, 522, 112, 87, 522, 110, 87, 522,\n-    956, 87, 522, 109, 87, 522, 107, 87, 522, 77, 87, 522, 107, 937, 522, 77,\n-    937, 1034, 97, 46, 109, 46, 522, 66, 113, 522, 99, 99, 522, 99, 100,\n-    1034, 67, 8725, 107, 103, 778, 67, 111, 46, 522, 100, 66, 522, 71, 121,\n-    522, 104, 97, 522, 72, 80, 522, 105, 110, 522, 75, 75, 522, 75, 77, 522,\n-    107, 116, 522, 108, 109, 522, 108, 110, 778, 108, 111, 103, 522, 108,\n-    120, 522, 109, 98, 778, 109, 105, 108, 778, 109, 111, 108, 522, 80, 72,\n-    1034, 112, 46, 109, 46, 778, 80, 80, 77, 522, 80, 82, 522, 115, 114, 522,\n-    83, 118, 522, 87, 98, 778, 86, 8725, 109, 778, 65, 8725, 109, 514, 49,\n-    26085, 514, 50, 26085, 514, 51, 26085, 514, 52, 26085, 514, 53, 26085,\n-    514, 54, 26085, 514, 55, 26085, 514, 56, 26085, 514, 57, 26085, 770, 49,\n-    48, 26085, 770, 49, 49, 26085, 770, 49, 50, 26085, 770, 49, 51, 26085,\n-    770, 49, 52, 26085, 770, 49, 53, 26085, 770, 49, 54, 26085, 770, 49, 55,\n-    26085, 770, 49, 56, 26085, 770, 49, 57, 26085, 770, 50, 48, 26085, 770,\n-    50, 49, 26085, 770, 50, 50, 26085, 770, 50, 51, 26085, 770, 50, 52,\n-    26085, 770, 50, 53, 26085, 770, 50, 54, 26085, 770, 50, 55, 26085, 770,\n-    50, 56, 26085, 770, 50, 57, 26085, 770, 51, 48, 26085, 770, 51, 49,\n-    26085, 778, 103, 97, 108, 259, 1098, 259, 1100, 259, 42863, 259, 294,\n-    259, 339, 259, 42791, 259, 43831, 259, 619, 259, 43858, 256, 35912, 256,\n-    26356, 256, 36554, 256, 36040, 256, 28369, 256, 20018, 256, 21477, 256,\n-    40860, 256, 40860, 256, 22865, 256, 37329, 256, 21895, 256, 22856, 256,\n-    25078, 256, 30313, 256, 32645, 256, 34367, 256, 34746, 256, 35064, 256,\n-    37007, 256, 27138, 256, 27931, 256, 28889, 256, 29662, 256, 33853, 256,\n-    37226, 256, 39409, 256, 20098, 256, 21365, 256, 27396, 256, 29211, 256,\n-    34349, 256, 40478, 256, 23888, 256, 28651, 256, 34253, 256, 35172, 256,\n-    25289, 256, 33240, 256, 34847, 256, 24266, 256, 26391, 256, 28010, 256,\n-    29436, 256, 37070, 256, 20358, 256, 20919, 256, 21214, 256, 25796, 256,\n-    27347, 256, 29200, 256, 30439, 256, 32769, 256, 34310, 256, 34396, 256,\n-    36335, 256, 38706, 256, 39791, 256, 40442, 256, 30860, 256, 31103, 256,\n-    32160, 256, 33737, 256, 37636, 256, 40575, 256, 35542, 256, 22751, 256,\n-    24324, 256, 31840, 256, 32894, 256, 29282, 256, 30922, 256, 36034, 256,\n-    38647, 256, 22744, 256, 23650, 256, 27155, 256, 28122, 256, 28431, 256,\n-    32047, 256, 32311, 256, 38475, 256, 21202, 256, 32907, 256, 20956, 256,\n-    20940, 256, 31260, 256, 32190, 256, 33777, 256, 38517, 256, 35712, 256,\n-    25295, 256, 27138, 256, 35582, 256, 20025, 256, 23527, 256, 24594, 256,\n-    29575, 256, 30064, 256, 21271, 256, 30971, 256, 20415, 256, 24489, 256,\n-    19981, 256, 27852, 256, 25976, 256, 32034, 256, 21443, 256, 22622, 256,\n-    30465, 256, 33865, 256, 35498, 256, 27578, 256, 36784, 256, 27784, 256,\n-    25342, 256, 33509, 256, 25504, 256, 30053, 256, 20142, 256, 20841, 256,\n-    20937, 256, 26753, 256, 31975, 256, 33391, 256, 35538, 256, 37327, 256,\n-    21237, 256, 21570, 256, 22899, 256, 24300, 256, 26053, 256, 28670, 256,\n-    31018, 256, 38317, 256, 39530, 256, 40599, 256, 40654, 256, 21147, 256,\n-    26310, 256, 27511, 256, 36706, 256, 24180, 256, 24976, 256, 25088, 256,\n-    25754, 256, 28451, 256, 29001, 256, 29833, 256, 31178, 256, 32244, 256,\n-    32879, 256, 36646, 256, 34030, 256, 36899, 256, 37706, 256, 21015, 256,\n-    21155, 256, 21693, 256, 28872, 256, 35010, 256, 35498, 256, 24265, 256,\n-    24565, 256, 25467, 256, 27566, 256, 31806, 256, 29557, 256, 20196, 256,\n-    22265, 256, 23527, 256, 23994, 256, 24604, 256, 29618, 256, 29801, 256,\n-    32666, 256, 32838, 256, 37428, 256, 38646, 256, 38728, 256, 38936, 256,\n-    20363, 256, 31150, 256, 37300, 256, 38584, 256, 24801, 256, 20102, 256,\n-    20698, 256, 23534, 256, 23615, 256, 26009, 256, 27138, 256, 29134, 256,\n-    30274, 256, 34044, 256, 36988, 256, 40845, 256, 26248, 256, 38446, 256,\n-    21129, 256, 26491, 256, 26611, 256, 27969, 256, 28316, 256, 29705, 256,\n-    30041, 256, 30827, 256, 32016, 256, 39006, 256, 20845, 256, 25134, 256,\n-    38520, 256, 20523, 256, 23833, 256, 28138, 256, 36650, 256, 24459, 256,\n-    24900, 256, 26647, 256, 29575, 256, 38534, 256, 21033, 256, 21519, 256,\n-    23653, 256, 26131, 256, 26446, 256, 26792, 256, 27877, 256, 29702, 256,\n-    30178, 256, 32633, 256, 35023, 256, 35041, 256, 37324, 256, 38626, 256,\n-    21311, 256, 28346, 256, 21533, 256, 29136, 256, 29848, 256, 34298, 256,\n-    38563, 256, 40023, 256, 40607, 256, 26519, 256, 28107, 256, 33256, 256,\n-    31435, 256, 31520, 256, 31890, 256, 29376, 256, 28825, 256, 35672, 256,\n-    20160, 256, 33590, 256, 21050, 256, 20999, 256, 24230, 256, 25299, 256,\n-    31958, 256, 23429, 256, 27934, 256, 26292, 256, 36667, 256, 34892, 256,\n-    38477, 256, 35211, 256, 24275, 256, 20800, 256, 21952, 256, 22618, 256,\n-    26228, 256, 20958, 256, 29482, 256, 30410, 256, 31036, 256, 31070, 256,\n-    31077, 256, 31119, 256, 38742, 256, 31934, 256, 32701, 256, 34322, 256,\n-    35576, 256, 36920, 256, 37117, 256, 39151, 256, 39164, 256, 39208, 256,\n-    40372, 256, 37086, 256, 38583, 256, 20398, 256, 20711, 256, 20813, 256,\n-    21193, 256, 21220, 256, 21329, 256, 21917, 256, 22022, 256, 22120, 256,\n-    22592, 256, 22696, 256, 23652, 256, 23662, 256, 24724, 256, 24936, 256,\n-    24974, 256, 25074, 256, 25935, 256, 26082, 256, 26257, 256, 26757, 256,\n-    28023, 256, 28186, 256, 28450, 256, 29038, 256, 29227, 256, 29730, 256,\n-    30865, 256, 31038, 256, 31049, 256, 31048, 256, 31056, 256, 31062, 256,\n-    31069, 256, 31117, 256, 31118, 256, 31296, 256, 31361, 256, 31680, 256,\n-    32244, 256, 32265, 256, 32321, 256, 32626, 256, 32773, 256, 33261, 256,\n-    33401, 256, 33401, 256, 33879, 256, 35088, 256, 35222, 256, 35585, 256,\n-    35641, 256, 36051, 256, 36104, 256, 36790, 256, 36920, 256, 38627, 256,\n-    38911, 256, 38971, 256, 24693, 256, 55376, 57070, 256, 33304, 256, 20006,\n-    256, 20917, 256, 20840, 256, 20352, 256, 20805, 256, 20864, 256, 21191,\n-    256, 21242, 256, 21917, 256, 21845, 256, 21913, 256, 21986, 256, 22618,\n-    256, 22707, 256, 22852, 256, 22868, 256, 23138, 256, 23336, 256, 24274,\n-    256, 24281, 256, 24425, 256, 24493, 256, 24792, 256, 24910, 256, 24840,\n-    256, 24974, 256, 24928, 256, 25074, 256, 25140, 256, 25540, 256, 25628,\n-    256, 25682, 256, 25942, 256, 26228, 256, 26391, 256, 26395, 256, 26454,\n-    256, 27513, 256, 27578, 256, 27969, 256, 28379, 256, 28363, 256, 28450,\n-    256, 28702, 256, 29038, 256, 30631, 256, 29237, 256, 29359, 256, 29482,\n-    256, 29809, 256, 29958, 256, 30011, 256, 30237, 256, 30239, 256, 30410,\n-    256, 30427, 256, 30452, 256, 30538, 256, 30528, 256, 30924, 256, 31409,\n-    256, 31680, 256, 31867, 256, 32091, 256, 32244, 256, 32574, 256, 32773,\n-    256, 33618, 256, 33775, 256, 34681, 256, 35137, 256, 35206, 256, 35222,\n-    256, 35519, 256, 35576, 256, 35531, 256, 35585, 256, 35582, 256, 35565,\n-    256, 35641, 256, 35722, 256, 36104, 256, 36664, 256, 36978, 256, 37273,\n-    256, 37494, 256, 38524, 256, 38627, 256, 38742, 256, 38875, 256, 38911,\n-    256, 38923, 256, 38971, 256, 39698, 256, 40860, 256, 55370, 56394, 256,\n-    55370, 56388, 256, 55372, 57301, 256, 15261, 256, 16408, 256, 16441, 256,\n-    55380, 56905, 256, 55383, 56528, 256, 55391, 57043, 256, 40771, 256,\n-    40846, 514, 102, 102, 514, 102, 105, 514, 102, 108, 770, 102, 102, 105,\n-    770, 102, 102, 108, 514, 383, 116, 514, 115, 116, 514, 1396, 1398, 514,\n-    1396, 1381, 514, 1396, 1387, 514, 1406, 1398, 514, 1396, 1389, 512, 1497,\n-    1460, 512, 1522, 1463, 262, 1506, 262, 1488, 262, 1491, 262, 1492, 262,\n-    1499, 262, 1500, 262, 1501, 262, 1512, 262, 1514, 262, 43, 512, 1513,\n-    1473, 512, 1513, 1474, 512, 64329, 1473, 512, 64329, 1474, 512, 1488,\n-    1463, 512, 1488, 1464, 512, 1488, 1468, 512, 1489, 1468, 512, 1490, 1468,\n-    512, 1491, 1468, 512, 1492, 1468, 512, 1493, 1468, 512, 1494, 1468, 512,\n-    1496, 1468, 512, 1497, 1468, 512, 1498, 1468, 512, 1499, 1468, 512, 1500,\n-    1468, 512, 1502, 1468, 512, 1504, 1468, 512, 1505, 1468, 512, 1507, 1468,\n-    512, 1508, 1468, 512, 1510, 1468, 512, 1511, 1468, 512, 1512, 1468, 512,\n-    1513, 1468, 512, 1514, 1468, 512, 1493, 1465, 512, 1489, 1471, 512, 1499,\n-    1471, 512, 1508, 1471, 514, 1488, 1500, 267, 1649, 268, 1649, 267, 1659,\n-    268, 1659, 269, 1659, 270, 1659, 267, 1662, 268, 1662, 269, 1662, 270,\n-    1662, 267, 1664, 268, 1664, 269, 1664, 270, 1664, 267, 1658, 268, 1658,\n-    269, 1658, 270, 1658, 267, 1663, 268, 1663, 269, 1663, 270, 1663, 267,\n-    1657, 268, 1657, 269, 1657, 270, 1657, 267, 1700, 268, 1700, 269, 1700,\n-    270, 1700, 267, 1702, 268, 1702, 269, 1702, 270, 1702, 267, 1668, 268,\n-    1668, 269, 1668, 270, 1668, 267, 1667, 268, 1667, 269, 1667, 270, 1667,\n-    267, 1670, 268, 1670, 269, 1670, 270, 1670, 267, 1671, 268, 1671, 269,\n-    1671, 270, 1671, 267, 1677, 268, 1677, 267, 1676, 268, 1676, 267, 1678,\n-    268, 1678, 267, 1672, 268, 1672, 267, 1688, 268, 1688, 267, 1681, 268,\n-    1681, 267, 1705, 268, 1705, 269, 1705, 270, 1705, 267, 1711, 268, 1711,\n-    269, 1711, 270, 1711, 267, 1715, 268, 1715, 269, 1715, 270, 1715, 267,\n-    1713, 268, 1713, 269, 1713, 270, 1713, 267, 1722, 268, 1722, 267, 1723,\n-    268, 1723, 269, 1723, 270, 1723, 267, 1728, 268, 1728, 267, 1729, 268,\n-    1729, 269, 1729, 270, 1729, 267, 1726, 268, 1726, 269, 1726, 270, 1726,\n-    267, 1746, 268, 1746, 267, 1747, 268, 1747, 267, 1709, 268, 1709, 269,\n-    1709, 270, 1709, 267, 1735, 268, 1735, 267, 1734, 268, 1734, 267, 1736,\n-    268, 1736, 267, 1655, 267, 1739, 268, 1739, 267, 1733, 268, 1733, 267,\n-    1737, 268, 1737, 267, 1744, 268, 1744, 269, 1744, 270, 1744, 269, 1609,\n-    270, 1609, 523, 1574, 1575, 524, 1574, 1575, 523, 1574, 1749, 524, 1574,\n-    1749, 523, 1574, 1608, 524, 1574, 1608, 523, 1574, 1735, 524, 1574, 1735,\n-    523, 1574, 1734, 524, 1574, 1734, 523, 1574, 1736, 524, 1574, 1736, 523,\n-    1574, 1744, 524, 1574, 1744, 525, 1574, 1744, 523, 1574, 1609, 524, 1574,\n-    1609, 525, 1574, 1609, 267, 1740, 268, 1740, 269, 1740, 270, 1740, 523,\n-    1574, 1580, 523, 1574, 1581, 523, 1574, 1605, 523, 1574, 1609, 523, 1574,\n-    1610, 523, 1576, 1580, 523, 1576, 1581, 523, 1576, 1582, 523, 1576, 1605,\n-    523, 1576, 1609, 523, 1576, 1610, 523, 1578, 1580, 523, 1578, 1581, 523,\n-    1578, 1582, 523, 1578, 1605, 523, 1578, 1609, 523, 1578, 1610, 523, 1579,\n-    1580, 523, 1579, 1605, 523, 1579, 1609, 523, 1579, 1610, 523, 1580, 1581,\n-    523, 1580, 1605, 523, 1581, 1580, 523, 1581, 1605, 523, 1582, 1580, 523,\n-    1582, 1581, 523, 1582, 1605, 523, 1587, 1580, 523, 1587, 1581, 523, 1587,\n-    1582, 523, 1587, 1605, 523, 1589, 1581, 523, 1589, 1605, 523, 1590, 1580,\n-    523, 1590, 1581, 523, 1590, 1582, 523, 1590, 1605, 523, 1591, 1581, 523,\n-    1591, 1605, 523, 1592, 1605, 523, 1593, 1580, 523, 1593, 1605, 523, 1594,\n-    1580, 523, 1594, 1605, 523, 1601, 1580, 523, 1601, 1581, 523, 1601, 1582,\n-    523, 1601, 1605, 523, 1601, 1609, 523, 1601, 1610, 523, 1602, 1581, 523,\n-    1602, 1605, 523, 1602, 1609, 523, 1602, 1610, 523, 1603, 1575, 523, 1603,\n-    1580, 523, 1603, 1581, 523, 1603, 1582, 523, 1603, 1604, 523, 1603, 1605,\n-    523, 1603, 1609, 523, 1603, 1610, 523, 1604, 1580, 523, 1604, 1581, 523,\n-    1604, 1582, 523, 1604, 1605, 523, 1604, 1609, 523, 1604, 1610, 523, 1605,\n-    1580, 523, 1605, 1581, 523, 1605, 1582, 523, 1605, 1605, 523, 1605, 1609,\n-    523, 1605, 1610, 523, 1606, 1580, 523, 1606, 1581, 523, 1606, 1582, 523,\n-    1606, 1605, 523, 1606, 1609, 523, 1606, 1610, 523, 1607, 1580, 523, 1607,\n-    1605, 523, 1607, 1609, 523, 1607, 1610, 523, 1610, 1580, 523, 1610, 1581,\n-    523, 1610, 1582, 523, 1610, 1605, 523, 1610, 1609, 523, 1610, 1610, 523,\n-    1584, 1648, 523, 1585, 1648, 523, 1609, 1648, 779, 32, 1612, 1617, 779,\n-    32, 1613, 1617, 779, 32, 1614, 1617, 779, 32, 1615, 1617, 779, 32, 1616,\n-    1617, 779, 32, 1617, 1648, 524, 1574, 1585, 524, 1574, 1586, 524, 1574,\n-    1605, 524, 1574, 1606, 524, 1574, 1609, 524, 1574, 1610, 524, 1576, 1585,\n-    524, 1576, 1586, 524, 1576, 1605, 524, 1576, 1606, 524, 1576, 1609, 524,\n-    1576, 1610, 524, 1578, 1585, 524, 1578, 1586, 524, 1578, 1605, 524, 1578,\n-    1606, 524, 1578, 1609, 524, 1578, 1610, 524, 1579, 1585, 524, 1579, 1586,\n-    524, 1579, 1605, 524, 1579, 1606, 524, 1579, 1609, 524, 1579, 1610, 524,\n-    1601, 1609, 524, 1601, 1610, 524, 1602, 1609, 524, 1602, 1610, 524, 1603,\n-    1575, 524, 1603, 1604, 524, 1603, 1605, 524, 1603, 1609, 524, 1603, 1610,\n-    524, 1604, 1605, 524, 1604, 1609, 524, 1604, 1610, 524, 1605, 1575, 524,\n-    1605, 1605, 524, 1606, 1585, 524, 1606, 1586, 524, 1606, 1605, 524, 1606,\n-    1606, 524, 1606, 1609, 524, 1606, 1610, 524, 1609, 1648, 524, 1610, 1585,\n-    524, 1610, 1586, 524, 1610, 1605, 524, 1610, 1606, 524, 1610, 1609, 524,\n-    1610, 1610, 525, 1574, 1580, 525, 1574, 1581, 525, 1574, 1582, 525, 1574,\n-    1605, 525, 1574, 1607, 525, 1576, 1580, 525, 1576, 1581, 525, 1576, 1582,\n-    525, 1576, 1605, 525, 1576, 1607, 525, 1578, 1580, 525, 1578, 1581, 525,\n-    1578, 1582, 525, 1578, 1605, 525, 1578, 1607, 525, 1579, 1605, 525, 1580,\n-    1581, 525, 1580, 1605, 525, 1581, 1580, 525, 1581, 1605, 525, 1582, 1580,\n-    525, 1582, 1605, 525, 1587, 1580, 525, 1587, 1581, 525, 1587, 1582, 525,\n-    1587, 1605, 525, 1589, 1581, 525, 1589, 1582, 525, 1589, 1605, 525, 1590,\n-    1580, 525, 1590, 1581, 525, 1590, 1582, 525, 1590, 1605, 525, 1591, 1581,\n-    525, 1592, 1605, 525, 1593, 1580, 525, 1593, 1605, 525, 1594, 1580, 525,\n-    1594, 1605, 525, 1601, 1580, 525, 1601, 1581, 525, 1601, 1582, 525, 1601,\n-    1605, 525, 1602, 1581, 525, 1602, 1605, 525, 1603, 1580, 525, 1603, 1581,\n-    525, 1603, 1582, 525, 1603, 1604, 525, 1603, 1605, 525, 1604, 1580, 525,\n-    1604, 1581, 525, 1604, 1582, 525, 1604, 1605, 525, 1604, 1607, 525, 1605,\n-    1580, 525, 1605, 1581, 525, 1605, 1582, 525, 1605, 1605, 525, 1606, 1580,\n-    525, 1606, 1581, 525, 1606, 1582, 525, 1606, 1605, 525, 1606, 1607, 525,\n-    1607, 1580, 525, 1607, 1605, 525, 1607, 1648, 525, 1610, 1580, 525, 1610,\n-    1581, 525, 1610, 1582, 525, 1610, 1605, 525, 1610, 1607, 526, 1574, 1605,\n-    526, 1574, 1607, 526, 1576, 1605, 526, 1576, 1607, 526, 1578, 1605, 526,\n-    1578, 1607, 526, 1579, 1605, 526, 1579, 1607, 526, 1587, 1605, 526, 1587,\n-    1607, 526, 1588, 1605, 526, 1588, 1607, 526, 1603, 1604, 526, 1603, 1605,\n-    526, 1604, 1605, 526, 1606, 1605, 526, 1606, 1607, 526, 1610, 1605, 526,\n-    1610, 1607, 782, 1600, 1614, 1617, 782, 1600, 1615, 1617, 782, 1600,\n-    1616, 1617, 523, 1591, 1609, 523, 1591, 1610, 523, 1593, 1609, 523, 1593,\n-    1610, 523, 1594, 1609, 523, 1594, 1610, 523, 1587, 1609, 523, 1587, 1610,\n-    523, 1588, 1609, 523, 1588, 1610, 523, 1581, 1609, 523, 1581, 1610, 523,\n-    1580, 1609, 523, 1580, 1610, 523, 1582, 1609, 523, 1582, 1610, 523, 1589,\n-    1609, 523, 1589, 1610, 523, 1590, 1609, 523, 1590, 1610, 523, 1588, 1580,\n-    523, 1588, 1581, 523, 1588, 1582, 523, 1588, 1605, 523, 1588, 1585, 523,\n-    1587, 1585, 523, 1589, 1585, 523, 1590, 1585, 524, 1591, 1609, 524, 1591,\n-    1610, 524, 1593, 1609, 524, 1593, 1610, 524, 1594, 1609, 524, 1594, 1610,\n-    524, 1587, 1609, 524, 1587, 1610, 524, 1588, 1609, 524, 1588, 1610, 524,\n-    1581, 1609, 524, 1581, 1610, 524, 1580, 1609, 524, 1580, 1610, 524, 1582,\n-    1609, 524, 1582, 1610, 524, 1589, 1609, 524, 1589, 1610, 524, 1590, 1609,\n-    524, 1590, 1610, 524, 1588, 1580, 524, 1588, 1581, 524, 1588, 1582, 524,\n-    1588, 1605, 524, 1588, 1585, 524, 1587, 1585, 524, 1589, 1585, 524, 1590,\n-    1585, 525, 1588, 1580, 525, 1588, 1581, 525, 1588, 1582, 525, 1588, 1605,\n-    525, 1587, 1607, 525, 1588, 1607, 525, 1591, 1605, 526, 1587, 1580, 526,\n-    1587, 1581, 526, 1587, 1582, 526, 1588, 1580, 526, 1588, 1581, 526, 1588,\n-    1582, 526, 1591, 1605, 526, 1592, 1605, 524, 1575, 1611, 523, 1575, 1611,\n-    781, 1578, 1580, 1605, 780, 1578, 1581, 1580, 781, 1578, 1581, 1580, 781,\n-    1578, 1581, 1605, 781, 1578, 1582, 1605, 781, 1578, 1605, 1580, 781,\n-    1578, 1605, 1581, 781, 1578, 1605, 1582, 780, 1580, 1605, 1581, 781,\n-    1580, 1605, 1581, 780, 1581, 1605, 1610, 780, 1581, 1605, 1609, 781,\n-    1587, 1581, 1580, 781, 1587, 1580, 1581, 780, 1587, 1580, 1609, 780,\n-    1587, 1605, 1581, 781, 1587, 1605, 1581, 781, 1587, 1605, 1580, 780,\n-    1587, 1605, 1605, 781, 1587, 1605, 1605, 780, 1589, 1581, 1581, 781,\n-    1589, 1581, 1581, 780, 1589, 1605, 1605, 780, 1588, 1581, 1605, 781,\n-    1588, 1581, 1605, 780, 1588, 1580, 1610, 780, 1588, 1605, 1582, 781,\n-    1588, 1605, 1582, 780, 1588, 1605, 1605, 781, 1588, 1605, 1605, 780,\n-    1590, 1581, 1609, 780, 1590, 1582, 1605, 781, 1590, 1582, 1605, 780,\n-    1591, 1605, 1581, 781, 1591, 1605, 1581, 781, 1591, 1605, 1605, 780,\n-    1591, 1605, 1610, 780, 1593, 1580, 1605, 780, 1593, 1605, 1605, 781,\n-    1593, 1605, 1605, 780, 1593, 1605, 1609, 780, 1594, 1605, 1605, 780,\n-    1594, 1605, 1610, 780, 1594, 1605, 1609, 780, 1601, 1582, 1605, 781,\n-    1601, 1582, 1605, 780, 1602, 1605, 1581, 780, 1602, 1605, 1605, 780,\n-    1604, 1581, 1605, 780, 1604, 1581, 1610, 780, 1604, 1581, 1609, 781,\n-    1604, 1580, 1580, 780, 1604, 1580, 1580, 780, 1604, 1582, 1605, 781,\n-    1604, 1582, 1605, 780, 1604, 1605, 1581, 781, 1604, 1605, 1581, 781,\n-    1605, 1581, 1580, 781, 1605, 1581, 1605, 780, 1605, 1581, 1610, 781,\n-    1605, 1580, 1581, 781, 1605, 1580, 1605, 781, 1605, 1582, 1580, 781,\n-    1605, 1582, 1605, 781, 1605, 1580, 1582, 781, 1607, 1605, 1580, 781,\n-    1607, 1605, 1605, 781, 1606, 1581, 1605, 780, 1606, 1581, 1609, 780,\n-    1606, 1580, 1605, 781, 1606, 1580, 1605, 780, 1606, 1580, 1609, 780,\n-    1606, 1605, 1610, 780, 1606, 1605, 1609, 780, 1610, 1605, 1605, 781,\n-    1610, 1605, 1605, 780, 1576, 1582, 1610, 780, 1578, 1580, 1610, 780,\n-    1578, 1580, 1609, 780, 1578, 1582, 1610, 780, 1578, 1582, 1609, 780,\n-    1578, 1605, 1610, 780, 1578, 1605, 1609, 780, 1580, 1605, 1610, 780,\n-    1580, 1581, 1609, 780, 1580, 1605, 1609, 780, 1587, 1582, 1609, 780,\n-    1589, 1581, 1610, 780, 1588, 1581, 1610, 780, 1590, 1581, 1610, 780,\n-    1604, 1580, 1610, 780, 1604, 1605, 1610, 780, 1610, 1581, 1610, 780,\n-    1610, 1580, 1610, 780, 1610, 1605, 1610, 780, 1605, 1605, 1610, 780,\n-    1602, 1605, 1610, 780, 1606, 1581, 1610, 781, 1602, 1605, 1581, 781,\n-    1604, 1581, 1605, 780, 1593, 1605, 1610, 780, 1603, 1605, 1610, 781,\n-    1606, 1580, 1581, 780, 1605, 1582, 1610, 781, 1604, 1580, 1605, 780,\n-    1603, 1605, 1605, 780, 1604, 1580, 1605, 780, 1606, 1580, 1581, 780,\n-    1580, 1581, 1610, 780, 1581, 1580, 1610, 780, 1605, 1580, 1610, 780,\n-    1601, 1605, 1610, 780, 1576, 1581, 1610, 781, 1603, 1605, 1605, 781,\n-    1593, 1580, 1605, 781, 1589, 1605, 1605, 780, 1587, 1582, 1610, 780,\n-    1606, 1580, 1610, 779, 1589, 1604, 1746, 779, 1602, 1604, 1746, 1035,\n-    1575, 1604, 1604, 1607, 1035, 1575, 1603, 1576, 1585, 1035, 1605, 1581,\n-    1605, 1583, 1035, 1589, 1604, 1593, 1605, 1035, 1585, 1587, 1608, 1604,\n-    1035, 1593, 1604, 1610, 1607, 1035, 1608, 1587, 1604, 1605, 779, 1589,\n-    1604, 1609, 4619, 1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593,\n-    1604, 1610, 1607, 32, 1608, 1587, 1604, 1605, 2059, 1580, 1604, 32, 1580,\n-    1604, 1575, 1604, 1607, 1035, 1585, 1740, 1575, 1604, 265, 44, 265,\n-    12289, 265, 12290, 265, 58, 265, 59, 265, 33, 265, 63, 265, 12310, 265,\n-    12311, 265, 8230, 265, 8229, 265, 8212, 265, 8211, 265, 95, 265, 95, 265,\n-    40, 265, 41, 265, 123, 265, 125, 265, 12308, 265, 12309, 265, 12304, 265,\n-    12305, 265, 12298, 265, 12299, 265, 12296, 265, 12297, 265, 12300, 265,\n-    12301, 265, 12302, 265, 12303, 265, 91, 265, 93, 258, 8254, 258, 8254,\n-    258, 8254, 258, 8254, 258, 95, 258, 95, 258, 95, 271, 44, 271, 12289,\n-    271, 46, 271, 59, 271, 58, 271, 63, 271, 33, 271, 8212, 271, 40, 271, 41,\n-    271, 123, 271, 125, 271, 12308, 271, 12309, 271, 35, 271, 38, 271, 42,\n-    271, 43, 271, 45, 271, 60, 271, 62, 271, 61, 271, 92, 271, 36, 271, 37,\n-    271, 64, 523, 32, 1611, 526, 1600, 1611, 523, 32, 1612, 523, 32, 1613,\n-    523, 32, 1614, 526, 1600, 1614, 523, 32, 1615, 526, 1600, 1615, 523, 32,\n-    1616, 526, 1600, 1616, 523, 32, 1617, 526, 1600, 1617, 523, 32, 1618,\n-    526, 1600, 1618, 267, 1569, 267, 1570, 268, 1570, 267, 1571, 268, 1571,\n-    267, 1572, 268, 1572, 267, 1573, 268, 1573, 267, 1574, 268, 1574, 269,\n-    1574, 270, 1574, 267, 1575, 268, 1575, 267, 1576, 268, 1576, 269, 1576,\n-    270, 1576, 267, 1577, 268, 1577, 267, 1578, 268, 1578, 269, 1578, 270,\n-    1578, 267, 1579, 268, 1579, 269, 1579, 270, 1579, 267, 1580, 268, 1580,\n-    269, 1580, 270, 1580, 267, 1581, 268, 1581, 269, 1581, 270, 1581, 267,\n-    1582, 268, 1582, 269, 1582, 270, 1582, 267, 1583, 268, 1583, 267, 1584,\n-    268, 1584, 267, 1585, 268, 1585, 267, 1586, 268, 1586, 267, 1587, 268,\n-    1587, 269, 1587, 270, 1587, 267, 1588, 268, 1588, 269, 1588, 270, 1588,\n-    267, 1589, 268, 1589, 269, 1589, 270, 1589, 267, 1590, 268, 1590, 269,\n-    1590, 270, 1590, 267, 1591, 268, 1591, 269, 1591, 270, 1591, 267, 1592,\n-    268, 1592, 269, 1592, 270, 1592, 267, 1593, 268, 1593, 269, 1593, 270,\n-    1593, 267, 1594, 268, 1594, 269, 1594, 270, 1594, 267, 1601, 268, 1601,\n-    269, 1601, 270, 1601, 267, 1602, 268, 1602, 269, 1602, 270, 1602, 267,\n-    1603, 268, 1603, 269, 1603, 270, 1603, 267, 1604, 268, 1604, 269, 1604,\n-    270, 1604, 267, 1605, 268, 1605, 269, 1605, 270, 1605, 267, 1606, 268,\n-    1606, 269, 1606, 270, 1606, 267, 1607, 268, 1607, 269, 1607, 270, 1607,\n-    267, 1608, 268, 1608, 267, 1609, 268, 1609, 267, 1610, 268, 1610, 269,\n-    1610, 270, 1610, 523, 1604, 1570, 524, 1604, 1570, 523, 1604, 1571, 524,\n-    1604, 1571, 523, 1604, 1573, 524, 1604, 1573, 523, 1604, 1575, 524, 1604,\n-    1575, 264, 33, 264, 34, 264, 35, 264, 36, 264, 37, 264, 38, 264, 39, 264,\n-    40, 264, 41, 264, 42, 264, 43, 264, 44, 264, 45, 264, 46, 264, 47, 264,\n-    48, 264, 49, 264, 50, 264, 51, 264, 52, 264, 53, 264, 54, 264, 55, 264,\n-    56, 264, 57, 264, 58, 264, 59, 264, 60, 264, 61, 264, 62, 264, 63, 264,\n-    64, 264, 65, 264, 66, 264, 67, 264, 68, 264, 69, 264, 70, 264, 71, 264,\n-    72, 264, 73, 264, 74, 264, 75, 264, 76, 264, 77, 264, 78, 264, 79, 264,\n-    80, 264, 81, 264, 82, 264, 83, 264, 84, 264, 85, 264, 86, 264, 87, 264,\n-    88, 264, 89, 264, 90, 264, 91, 264, 92, 264, 93, 264, 94, 264, 95, 264,\n-    96, 264, 97, 264, 98, 264, 99, 264, 100, 264, 101, 264, 102, 264, 103,\n-    264, 104, 264, 105, 264, 106, 264, 107, 264, 108, 264, 109, 264, 110,\n-    264, 111, 264, 112, 264, 113, 264, 114, 264, 115, 264, 116, 264, 117,\n-    264, 118, 264, 119, 264, 120, 264, 121, 264, 122, 264, 123, 264, 124,\n-    264, 125, 264, 126, 264, 10629, 264, 10630, 272, 12290, 272, 12300, 272,\n-    12301, 272, 12289, 272, 12539, 272, 12530, 272, 12449, 272, 12451, 272,\n-    12453, 272, 12455, 272, 12457, 272, 12515, 272, 12517, 272, 12519, 272,\n-    12483, 272, 12540, 272, 12450, 272, 12452, 272, 12454, 272, 12456, 272,\n-    12458, 272, 12459, 272, 12461, 272, 12463, 272, 12465, 272, 12467, 272,\n-    12469, 272, 12471, 272, 12473, 272, 12475, 272, 12477, 272, 12479, 272,\n-    12481, 272, 12484, 272, 12486, 272, 12488, 272, 12490, 272, 12491, 272,\n-    12492, 272, 12493, 272, 12494, 272, 12495, 272, 12498, 272, 12501, 272,\n-    12504, 272, 12507, 272, 12510, 272, 12511, 272, 12512, 272, 12513, 272,\n-    12514, 272, 12516, 272, 12518, 272, 12520, 272, 12521, 272, 12522, 272,\n-    12523, 272, 12524, 272, 12525, 272, 12527, 272, 12531, 272, 12441, 272,\n-    12442, 272, 12644, 272, 12593, 272, 12594, 272, 12595, 272, 12596, 272,\n-    12597, 272, 12598, 272, 12599, 272, 12600, 272, 12601, 272, 12602, 272,\n-    12603, 272, 12604, 272, 12605, 272, 12606, 272, 12607, 272, 12608, 272,\n-    12609, 272, 12610, 272, 12611, 272, 12612, 272, 12613, 272, 12614, 272,\n-    12615, 272, 12616, 272, 12617, 272, 12618, 272, 12619, 272, 12620, 272,\n-    12621, 272, 12622, 272, 12623, 272, 12624, 272, 12625, 272, 12626, 272,\n-    12627, 272, 12628, 272, 12629, 272, 12630, 272, 12631, 272, 12632, 272,\n-    12633, 272, 12634, 272, 12635, 272, 12636, 272, 12637, 272, 12638, 272,\n-    12639, 272, 12640, 272, 12641, 272, 12642, 272, 12643, 264, 162, 264,\n-    163, 264, 172, 264, 175, 264, 166, 264, 165, 264, 8361, 272, 9474, 272,\n-    8592, 272, 8593, 272, 8594, 272, 8595, 272, 9632, 272, 9675, 512, 55300,\n-    56473, 55300, 56506, 512, 55300, 56475, 55300, 56506, 512, 55300, 56485,\n-    55300, 56506, 512, 55300, 56625, 55300, 56615, 512, 55300, 56626, 55300,\n-    56615, 512, 55300, 57159, 55300, 57150, 512, 55300, 57159, 55300, 57175,\n-    512, 55301, 56505, 55301, 56506, 512, 55301, 56505, 55301, 56496, 512,\n-    55301, 56505, 55301, 56509, 512, 55301, 56760, 55301, 56751, 512, 55301,\n-    56761, 55301, 56751, 512, 55348, 56663, 55348, 56677, 512, 55348, 56664,\n-    55348, 56677, 512, 55348, 56671, 55348, 56686, 512, 55348, 56671, 55348,\n-    56687, 512, 55348, 56671, 55348, 56688, 512, 55348, 56671, 55348, 56689,\n-    512, 55348, 56671, 55348, 56690, 512, 55348, 56761, 55348, 56677, 512,\n-    55348, 56762, 55348, 56677, 512, 55348, 56763, 55348, 56686, 512, 55348,\n-    56764, 55348, 56686, 512, 55348, 56763, 55348, 56687, 512, 55348, 56764,\n-    55348, 56687, 262, 65, 262, 66, 262, 67, 262, 68, 262, 69, 262, 70, 262,\n-    71, 262, 72, 262, 73, 262, 74, 262, 75, 262, 76, 262, 77, 262, 78, 262,\n-    79, 262, 80, 262, 81, 262, 82, 262, 83, 262, 84, 262, 85, 262, 86, 262,\n-    87, 262, 88, 262, 89, 262, 90, 262, 97, 262, 98, 262, 99, 262, 100, 262,\n-    101, 262, 102, 262, 103, 262, 104, 262, 105, 262, 106, 262, 107, 262,\n-    108, 262, 109, 262, 110, 262, 111, 262, 112, 262, 113, 262, 114, 262,\n-    115, 262, 116, 262, 117, 262, 118, 262, 119, 262, 120, 262, 121, 262,\n-    122, 262, 65, 262, 66, 262, 67, 262, 68, 262, 69, 262, 70, 262, 71, 262,\n-    72, 262, 73, 262, 74, 262, 75, 262, 76, 262, 77, 262, 78, 262, 79, 262,\n-    80, 262, 81, 262, 82, 262, 83, 262, 84, 262, 85, 262, 86, 262, 87, 262,\n-    88, 262, 89, 262, 90, 262, 97, 262, 98, 262, 99, 262, 100, 262, 101, 262,\n-    102, 262, 103, 262, 105, 262, 106, 262, 107, 262, 108, 262, 109, 262,\n-    110, 262, 111, 262, 112, 262, 113, 262, 114, 262, 115, 262, 116, 262,\n-    117, 262, 118, 262, 119, 262, 120, 262, 121, 262, 122, 262, 65, 262, 66,\n-    262, 67, 262, 68, 262, 69, 262, 70, 262, 71, 262, 72, 262, 73, 262, 74,\n-    262, 75, 262, 76, 262, 77, 262, 78, 262, 79, 262, 80, 262, 81, 262, 82,\n-    262, 83, 262, 84, 262, 85, 262, 86, 262, 87, 262, 88, 262, 89, 262, 90,\n-    262, 97, 262, 98, 262, 99, 262, 100, 262, 101, 262, 102, 262, 103, 262,\n-    104, 262, 105, 262, 106, 262, 107, 262, 108, 262, 109, 262, 110, 262,\n-    111, 262, 112, 262, 113, 262, 114, 262, 115, 262, 116, 262, 117, 262,\n-    118, 262, 119, 262, 120, 262, 121, 262, 122, 262, 65, 262, 67, 262, 68,\n-    262, 71, 262, 74, 262, 75, 262, 78, 262, 79, 262, 80, 262, 81, 262, 83,\n-    262, 84, 262, 85, 262, 86, 262, 87, 262, 88, 262, 89, 262, 90, 262, 97,\n-    262, 98, 262, 99, 262, 100, 262, 102, 262, 104, 262, 105, 262, 106, 262,\n-    107, 262, 108, 262, 109, 262, 110, 262, 112, 262, 113, 262, 114, 262,\n-    115, 262, 116, 262, 117, 262, 118, 262, 119, 262, 120, 262, 121, 262,\n-    122, 262, 65, 262, 66, 262, 67, 262, 68, 262, 69, 262, 70, 262, 71, 262,\n-    72, 262, 73, 262, 74, 262, 75, 262, 76, 262, 77, 262, 78, 262, 79, 262,\n-    80, 262, 81, 262, 82, 262, 83, 262, 84, 262, 85, 262, 86, 262, 87, 262,\n-    88, 262, 89, 262, 90, 262, 97, 262, 98, 262, 99, 262, 100, 262, 101, 262,\n-    102, 262, 103, 262, 104, 262, 105, 262, 106, 262, 107, 262, 108, 262,\n-    109, 262, 110, 262, 111, 262, 112, 262, 113, 262, 114, 262, 115, 262,\n-    116, 262, 117, 262, 118, 262, 119, 262, 120, 262, 121, 262, 122, 262, 65,\n-    262, 66, 262, 68, 262, 69, 262, 70, 262, 71, 262, 74, 262, 75, 262, 76,\n-    262, 77, 262, 78, 262, 79, 262, 80, 262, 81, 262, 83, 262, 84, 262, 85,\n-    262, 86, 262, 87, 262, 88, 262, 89, 262, 97, 262, 98, 262, 99, 262, 100,\n-    262, 101, 262, 102, 262, 103, 262, 104, 262, 105, 262, 106, 262, 107,\n-    262, 108, 262, 109, 262, 110, 262, 111, 262, 112, 262, 113, 262, 114,\n-    262, 115, 262, 116, 262, 117, 262, 118, 262, 119, 262, 120, 262, 121,\n-    262, 122, 262, 65, 262, 66, 262, 68, 262, 69, 262, 70, 262, 71, 262, 73,\n-    262, 74, 262, 75, 262, 76, 262, 77, 262, 79, 262, 83, 262, 84, 262, 85,\n-    262, 86, 262, 87, 262, 88, 262, 89, 262, 97, 262, 98, 262, 99, 262, 100,\n-    262, 101, 262, 102, 262, 103, 262, 104, 262, 105, 262, 106, 262, 107,\n-    262, 108, 262, 109, 262, 110, 262, 111, 262, 112, 262, 113, 262, 114,\n-    262, 115, 262, 116, 262, 117, 262, 118, 262, 119, 262, 120, 262, 121,\n-    262, 122, 262, 65, 262, 66, 262, 67, 262, 68, 262, 69, 262, 70, 262, 71,\n-    262, 72, 262, 73, 262, 74, 262, 75, 262, 76, 262, 77, 262, 78, 262, 79,\n-    262, 80, 262, 81, 262, 82, 262, 83, 262, 84, 262, 85, 262, 86, 262, 87,\n-    262, 88, 262, 89, 262, 90, 262, 97, 262, 98, 262, 99, 262, 100, 262, 101,\n-    262, 102, 262, 103, 262, 104, 262, 105, 262, 106, 262, 107, 262, 108,\n-    262, 109, 262, 110, 262, 111, 262, 112, 262, 113, 262, 114, 262, 115,\n-    262, 116, 262, 117, 262, 118, 262, 119, 262, 120, 262, 121, 262, 122,\n-    262, 65, 262, 66, 262, 67, 262, 68, 262, 69, 262, 70, 262, 71, 262, 72,\n-    262, 73, 262, 74, 262, 75, 262, 76, 262, 77, 262, 78, 262, 79, 262, 80,\n-    262, 81, 262, 82, 262, 83, 262, 84, 262, 85, 262, 86, 262, 87, 262, 88,\n-    262, 89, 262, 90, 262, 97, 262, 98, 262, 99, 262, 100, 262, 101, 262,\n-    102, 262, 103, 262, 104, 262, 105, 262, 106, 262, 107, 262, 108, 262,\n-    109, 262, 110, 262, 111, 262, 112, 262, 113, 262, 114, 262, 115, 262,\n-    116, 262, 117, 262, 118, 262, 119, 262, 120, 262, 121, 262, 122, 262, 65,\n-    262, 66, 262, 67, 262, 68, 262, 69, 262, 70, 262, 71, 262, 72, 262, 73,\n-    262, 74, 262, 75, 262, 76, 262, 77, 262, 78, 262, 79, 262, 80, 262, 81,\n-    262, 82, 262, 83, 262, 84, 262, 85, 262, 86, 262, 87, 262, 88, 262, 89,\n-    262, 90, 262, 97, 262, 98, 262, 99, 262, 100, 262, 101, 262, 102, 262,\n-    103, 262, 104, 262, 105, 262, 106, 262, 107, 262, 108, 262, 109, 262,\n-    110, 262, 111, 262, 112, 262, 113, 262, 114, 262, 115, 262, 116, 262,\n-    117, 262, 118, 262, 119, 262, 120, 262, 121, 262, 122, 262, 65, 262, 66,\n-    262, 67, 262, 68, 262, 69, 262, 70, 262, 71, 262, 72, 262, 73, 262, 74,\n-    262, 75, 262, 76, 262, 77, 262, 78, 262, 79, 262, 80, 262, 81, 262, 82,\n-    262, 83, 262, 84, 262, 85, 262, 86, 262, 87, 262, 88, 262, 89, 262, 90,\n-    262, 97, 262, 98, 262, 99, 262, 100, 262, 101, 262, 102, 262, 103, 262,\n-    104, 262, 105, 262, 106, 262, 107, 262, 108, 262, 109, 262, 110, 262,\n-    111, 262, 112, 262, 113, 262, 114, 262, 115, 262, 116, 262, 117, 262,\n-    118, 262, 119, 262, 120, 262, 121, 262, 122, 262, 65, 262, 66, 262, 67,\n-    262, 68, 262, 69, 262, 70, 262, 71, 262, 72, 262, 73, 262, 74, 262, 75,\n-    262, 76, 262, 77, 262, 78, 262, 79, 262, 80, 262, 81, 262, 82, 262, 83,\n-    262, 84, 262, 85, 262, 86, 262, 87, 262, 88, 262, 89, 262, 90, 262, 97,\n-    262, 98, 262, 99, 262, 100, 262, 101, 262, 102, 262, 103, 262, 104, 262,\n-    105, 262, 106, 262, 107, 262, 108, 262, 109, 262, 110, 262, 111, 262,\n-    112, 262, 113, 262, 114, 262, 115, 262, 116, 262, 117, 262, 118, 262,\n-    119, 262, 120, 262, 121, 262, 122, 262, 65, 262, 66, 262, 67, 262, 68,\n-    262, 69, 262, 70, 262, 71, 262, 72, 262, 73, 262, 74, 262, 75, 262, 76,\n-    262, 77, 262, 78, 262, 79, 262, 80, 262, 81, 262, 82, 262, 83, 262, 84,\n-    262, 85, 262, 86, 262, 87, 262, 88, 262, 89, 262, 90, 262, 97, 262, 98,\n-    262, 99, 262, 100, 262, 101, 262, 102, 262, 103, 262, 104, 262, 105, 262,\n-    106, 262, 107, 262, 108, 262, 109, 262, 110, 262, 111, 262, 112, 262,\n-    113, 262, 114, 262, 115, 262, 116, 262, 117, 262, 118, 262, 119, 262,\n-    120, 262, 121, 262, 122, 262, 305, 262, 567, 262, 913, 262, 914, 262,\n-    915, 262, 916, 262, 917, 262, 918, 262, 919, 262, 920, 262, 921, 262,\n-    922, 262, 923, 262, 924, 262, 925, 262, 926, 262, 927, 262, 928, 262,\n-    929, 262, 1012, 262, 931, 262, 932, 262, 933, 262, 934, 262, 935, 262,\n-    936, 262, 937, 262, 8711, 262, 945, 262, 946, 262, 947, 262, 948, 262,\n-    949, 262, 950, 262, 951, 262, 952, 262, 953, 262, 954, 262, 955, 262,\n-    956, 262, 957, 262, 958, 262, 959, 262, 960, 262, 961, 262, 962, 262,\n-    963, 262, 964, 262, 965, 262, 966, 262, 967, 262, 968, 262, 969, 262,\n-    8706, 262, 1013, 262, 977, 262, 1008, 262, 981, 262, 1009, 262, 982, 262,\n-    913, 262, 914, 262, 915, 262, 916, 262, 917, 262, 918, 262, 919, 262,\n-    920, 262, 921, 262, 922, 262, 923, 262, 924, 262, 925, 262, 926, 262,\n-    927, 262, 928, 262, 929, 262, 1012, 262, 931, 262, 932, 262, 933, 262,\n-    934, 262, 935, 262, 936, 262, 937, 262, 8711, 262, 945, 262, 946, 262,\n-    947, 262, 948, 262, 949, 262, 950, 262, 951, 262, 952, 262, 953, 262,\n-    954, 262, 955, 262, 956, 262, 957, 262, 958, 262, 959, 262, 960, 262,\n-    961, 262, 962, 262, 963, 262, 964, 262, 965, 262, 966, 262, 967, 262,\n-    968, 262, 969, 262, 8706, 262, 1013, 262, 977, 262, 1008, 262, 981, 262,\n-    1009, 262, 982, 262, 913, 262, 914, 262, 915, 262, 916, 262, 917, 262,\n-    918, 262, 919, 262, 920, 262, 921, 262, 922, 262, 923, 262, 924, 262,\n-    925, 262, 926, 262, 927, 262, 928, 262, 929, 262, 1012, 262, 931, 262,\n-    932, 262, 933, 262, 934, 262, 935, 262, 936, 262, 937, 262, 8711, 262,\n-    945, 262, 946, 262, 947, 262, 948, 262, 949, 262, 950, 262, 951, 262,\n-    952, 262, 953, 262, 954, 262, 955, 262, 956, 262, 957, 262, 958, 262,\n-    959, 262, 960, 262, 961, 262, 962, 262, 963, 262, 964, 262, 965, 262,\n-    966, 262, 967, 262, 968, 262, 969, 262, 8706, 262, 1013, 262, 977, 262,\n-    1008, 262, 981, 262, 1009, 262, 982, 262, 913, 262, 914, 262, 915, 262,\n-    916, 262, 917, 262, 918, 262, 919, 262, 920, 262, 921, 262, 922, 262,\n-    923, 262, 924, 262, 925, 262, 926, 262, 927, 262, 928, 262, 929, 262,\n-    1012, 262, 931, 262, 932, 262, 933, 262, 934, 262, 935, 262, 936, 262,\n-    937, 262, 8711, 262, 945, 262, 946, 262, 947, 262, 948, 262, 949, 262,\n-    950, 262, 951, 262, 952, 262, 953, 262, 954, 262, 955, 262, 956, 262,\n-    957, 262, 958, 262, 959, 262, 960, 262, 961, 262, 962, 262, 963, 262,\n-    964, 262, 965, 262, 966, 262, 967, 262, 968, 262, 969, 262, 8706, 262,\n-    1013, 262, 977, 262, 1008, 262, 981, 262, 1009, 262, 982, 262, 913, 262,\n-    914, 262, 915, 262, 916, 262, 917, 262, 918, 262, 919, 262, 920, 262,\n-    921, 262, 922, 262, 923, 262, 924, 262, 925, 262, 926, 262, 927, 262,\n-    928, 262, 929, 262, 1012, 262, 931, 262, 932, 262, 933, 262, 934, 262,\n-    935, 262, 936, 262, 937, 262, 8711, 262, 945, 262, 946, 262, 947, 262,\n-    948, 262, 949, 262, 950, 262, 951, 262, 952, 262, 953, 262, 954, 262,\n-    955, 262, 956, 262, 957, 262, 958, 262, 959, 262, 960, 262, 961, 262,\n-    962, 262, 963, 262, 964, 262, 965, 262, 966, 262, 967, 262, 968, 262,\n-    969, 262, 8706, 262, 1013, 262, 977, 262, 1008, 262, 981, 262, 1009, 262,\n-    982, 262, 988, 262, 989, 262, 48, 262, 49, 262, 50, 262, 51, 262, 52,\n-    262, 53, 262, 54, 262, 55, 262, 56, 262, 57, 262, 48, 262, 49, 262, 50,\n-    262, 51, 262, 52, 262, 53, 262, 54, 262, 55, 262, 56, 262, 57, 262, 48,\n-    262, 49, 262, 50, 262, 51, 262, 52, 262, 53, 262, 54, 262, 55, 262, 56,\n-    262, 57, 262, 48, 262, 49, 262, 50, 262, 51, 262, 52, 262, 53, 262, 54,\n-    262, 55, 262, 56, 262, 57, 262, 48, 262, 49, 262, 50, 262, 51, 262, 52,\n-    262, 53, 262, 54, 262, 55, 262, 56, 262, 57, 262, 1575, 262, 1576, 262,\n-    1580, 262, 1583, 262, 1608, 262, 1586, 262, 1581, 262, 1591, 262, 1610,\n-    262, 1603, 262, 1604, 262, 1605, 262, 1606, 262, 1587, 262, 1593, 262,\n-    1601, 262, 1589, 262, 1602, 262, 1585, 262, 1588, 262, 1578, 262, 1579,\n-    262, 1582, 262, 1584, 262, 1590, 262, 1592, 262, 1594, 262, 1646, 262,\n-    1722, 262, 1697, 262, 1647, 262, 1576, 262, 1580, 262, 1607, 262, 1581,\n-    262, 1610, 262, 1603, 262, 1604, 262, 1605, 262, 1606, 262, 1587, 262,\n-    1593, 262, 1601, 262, 1589, 262, 1602, 262, 1588, 262, 1578, 262, 1579,\n-    262, 1582, 262, 1590, 262, 1594, 262, 1580, 262, 1581, 262, 1610, 262,\n-    1604, 262, 1606, 262, 1587, 262, 1593, 262, 1589, 262, 1602, 262, 1588,\n-    262, 1582, 262, 1590, 262, 1594, 262, 1722, 262, 1647, 262, 1576, 262,\n-    1580, 262, 1607, 262, 1581, 262, 1591, 262, 1610, 262, 1603, 262, 1605,\n-    262, 1606, 262, 1587, 262, 1593, 262, 1601, 262, 1589, 262, 1602, 262,\n-    1588, 262, 1578, 262, 1579, 262, 1582, 262, 1590, 262, 1592, 262, 1594,\n-    262, 1646, 262, 1697, 262, 1575, 262, 1576, 262, 1580, 262, 1583, 262,\n-    1607, 262, 1608, 262, 1586, 262, 1581, 262, 1591, 262, 1610, 262, 1604,\n-    262, 1605, 262, 1606, 262, 1587, 262, 1593, 262, 1601, 262, 1589, 262,\n-    1602, 262, 1585, 262, 1588, 262, 1578, 262, 1579, 262, 1582, 262, 1584,\n-    262, 1590, 262, 1592, 262, 1594, 262, 1576, 262, 1580, 262, 1583, 262,\n-    1608, 262, 1586, 262, 1581, 262, 1591, 262, 1610, 262, 1604, 262, 1605,\n-    262, 1606, 262, 1587, 262, 1593, 262, 1601, 262, 1589, 262, 1602, 262,\n-    1585, 262, 1588, 262, 1578, 262, 1579, 262, 1582, 262, 1584, 262, 1590,\n-    262, 1592, 262, 1594, 514, 48, 46, 514, 48, 44, 514, 49, 44, 514, 50, 44,\n-    514, 51, 44, 514, 52, 44, 514, 53, 44, 514, 54, 44, 514, 55, 44, 514, 56,\n-    44, 514, 57, 44, 770, 40, 65, 41, 770, 40, 66, 41, 770, 40, 67, 41, 770,\n-    40, 68, 41, 770, 40, 69, 41, 770, 40, 70, 41, 770, 40, 71, 41, 770, 40,\n-    72, 41, 770, 40, 73, 41, 770, 40, 74, 41, 770, 40, 75, 41, 770, 40, 76,\n-    41, 770, 40, 77, 41, 770, 40, 78, 41, 770, 40, 79, 41, 770, 40, 80, 41,\n-    770, 40, 81, 41, 770, 40, 82, 41, 770, 40, 83, 41, 770, 40, 84, 41, 770,\n-    40, 85, 41, 770, 40, 86, 41, 770, 40, 87, 41, 770, 40, 88, 41, 770, 40,\n-    89, 41, 770, 40, 90, 41, 770, 12308, 83, 12309, 263, 67, 263, 82, 519,\n-    67, 68, 519, 87, 90, 266, 65, 266, 66, 266, 67, 266, 68, 266, 69, 266,\n-    70, 266, 71, 266, 72, 266, 73, 266, 74, 266, 75, 266, 76, 266, 77, 266,\n-    78, 266, 79, 266, 80, 266, 81, 266, 82, 266, 83, 266, 84, 266, 85, 266,\n-    86, 266, 87, 266, 88, 266, 89, 266, 90, 522, 72, 86, 522, 77, 86, 522,\n-    83, 68, 522, 83, 83, 778, 80, 80, 86, 522, 87, 67, 515, 77, 67, 515, 77,\n-    68, 522, 68, 74, 522, 12411, 12363, 522, 12467, 12467, 266, 12469, 266,\n-    25163, 266, 23383, 266, 21452, 266, 12487, 266, 20108, 266, 22810, 266,\n-    35299, 266, 22825, 266, 20132, 266, 26144, 266, 28961, 266, 26009, 266,\n-    21069, 266, 24460, 266, 20877, 266, 26032, 266, 21021, 266, 32066, 266,\n-    29983, 266, 36009, 266, 22768, 266, 21561, 266, 28436, 266, 25237, 266,\n-    25429, 266, 19968, 266, 19977, 266, 36938, 266, 24038, 266, 20013, 266,\n-    21491, 266, 25351, 266, 36208, 266, 25171, 266, 31105, 266, 31354, 266,\n-    21512, 266, 28288, 266, 26377, 266, 26376, 266, 30003, 266, 21106, 266,\n-    21942, 266, 37197, 770, 12308, 26412, 12309, 770, 12308, 19977, 12309,\n-    770, 12308, 20108, 12309, 770, 12308, 23433, 12309, 770, 12308, 28857,\n-    12309, 770, 12308, 25171, 12309, 770, 12308, 30423, 12309, 770, 12308,\n-    21213, 12309, 770, 12308, 25943, 12309, 263, 24471, 263, 21487, 256,\n-    20029, 256, 20024, 256, 20033, 256, 55360, 56610, 256, 20320, 256, 20398,\n-    256, 20411, 256, 20482, 256, 20602, 256, 20633, 256, 20711, 256, 20687,\n-    256, 13470, 256, 55361, 56890, 256, 20813, 256, 20820, 256, 20836, 256,\n-    20855, 256, 55361, 56604, 256, 13497, 256, 20839, 256, 20877, 256, 55361,\n-    56651, 256, 20887, 256, 20900, 256, 20172, 256, 20908, 256, 20917, 256,\n-    55396, 56799, 256, 20981, 256, 20995, 256, 13535, 256, 21051, 256, 21062,\n-    256, 21106, 256, 21111, 256, 13589, 256, 21191, 256, 21193, 256, 21220,\n-    256, 21242, 256, 21253, 256, 21254, 256, 21271, 256, 21321, 256, 21329,\n-    256, 21338, 256, 21363, 256, 21373, 256, 21375, 256, 21375, 256, 21375,\n-    256, 55362, 56876, 256, 28784, 256, 21450, 256, 21471, 256, 55362, 57187,\n-    256, 21483, 256, 21489, 256, 21510, 256, 21662, 256, 21560, 256, 21576,\n-    256, 21608, 256, 21666, 256, 21750, 256, 21776, 256, 21843, 256, 21859,\n-    256, 21892, 256, 21892, 256, 21913, 256, 21931, 256, 21939, 256, 21954,\n-    256, 22294, 256, 22022, 256, 22295, 256, 22097, 256, 22132, 256, 20999,\n-    256, 22766, 256, 22478, 256, 22516, 256, 22541, 256, 22411, 256, 22578,\n-    256, 22577, 256, 22700, 256, 55365, 56548, 256, 22770, 256, 22775, 256,\n-    22790, 256, 22810, 256, 22818, 256, 22882, 256, 55365, 57000, 256, 55365,\n-    57066, 256, 23020, 256, 23067, 256, 23079, 256, 23000, 256, 23142, 256,\n-    14062, 256, 14076, 256, 23304, 256, 23358, 256, 23358, 256, 55366, 56776,\n-    256, 23491, 256, 23512, 256, 23527, 256, 23539, 256, 55366, 57112, 256,\n-    23551, 256, 23558, 256, 24403, 256, 23586, 256, 14209, 256, 23648, 256,\n-    23662, 256, 23744, 256, 23693, 256, 55367, 56804, 256, 23875, 256, 55367,\n-    56806, 256, 23918, 256, 23915, 256, 23932, 256, 24033, 256, 24034, 256,\n-    14383, 256, 24061, 256, 24104, 256, 24125, 256, 24169, 256, 14434, 256,\n-    55368, 56707, 256, 14460, 256, 24240, 256, 24243, 256, 24246, 256, 24266,\n-    256, 55400, 57234, 256, 24318, 256, 55368, 57137, 256, 55368, 57137, 256,\n-    33281, 256, 24354, 256, 24354, 256, 14535, 256, 55372, 57016, 256, 55384,\n-    56794, 256, 24418, 256, 24427, 256, 14563, 256, 24474, 256, 24525, 256,\n-    24535, 256, 24569, 256, 24705, 256, 14650, 256, 14620, 256, 24724, 256,\n-    55369, 57044, 256, 24775, 256, 24904, 256, 24908, 256, 24910, 256, 24908,\n-    256, 24954, 256, 24974, 256, 25010, 256, 24996, 256, 25007, 256, 25054,\n-    256, 25074, 256, 25078, 256, 25104, 256, 25115, 256, 25181, 256, 25265,\n-    256, 25300, 256, 25424, 256, 55370, 57100, 256, 25405, 256, 25340, 256,\n-    25448, 256, 25475, 256, 25572, 256, 55370, 57329, 256, 25634, 256, 25541,\n-    256, 25513, 256, 14894, 256, 25705, 256, 25726, 256, 25757, 256, 25719,\n-    256, 14956, 256, 25935, 256, 25964, 256, 55372, 56330, 256, 26083, 256,\n-    26360, 256, 26185, 256, 15129, 256, 26257, 256, 15112, 256, 15076, 256,\n-    20882, 256, 20885, 256, 26368, 256, 26268, 256, 32941, 256, 17369, 256,\n-    26391, 256, 26395, 256, 26401, 256, 26462, 256, 26451, 256, 55372, 57283,\n-    256, 15177, 256, 26618, 256, 26501, 256, 26706, 256, 26757, 256, 55373,\n-    56429, 256, 26766, 256, 26655, 256, 26900, 256, 15261, 256, 26946, 256,\n-    27043, 256, 27114, 256, 27304, 256, 55373, 56995, 256, 27355, 256, 15384,\n-    256, 27425, 256, 55374, 56487, 256, 27476, 256, 15438, 256, 27506, 256,\n-    27551, 256, 27578, 256, 27579, 256, 55374, 56973, 256, 55367, 56587, 256,\n-    55374, 57082, 256, 27726, 256, 55375, 56508, 256, 27839, 256, 27853, 256,\n-    27751, 256, 27926, 256, 27966, 256, 28023, 256, 27969, 256, 28009, 256,\n-    28024, 256, 28037, 256, 55375, 56606, 256, 27956, 256, 28207, 256, 28270,\n-    256, 15667, 256, 28363, 256, 28359, 256, 55375, 57041, 256, 28153, 256,\n-    28526, 256, 55375, 57182, 256, 55375, 57230, 256, 28614, 256, 28729, 256,\n-    28702, 256, 28699, 256, 15766, 256, 28746, 256, 28797, 256, 28791, 256,\n-    28845, 256, 55361, 56613, 256, 28997, 256, 55376, 56931, 256, 29084, 256,\n-    55376, 57259, 256, 29224, 256, 29237, 256, 29264, 256, 55377, 56840, 256,\n-    29312, 256, 29333, 256, 55377, 57141, 256, 55378, 56340, 256, 29562, 256,\n-    29579, 256, 16044, 256, 29605, 256, 16056, 256, 16056, 256, 29767, 256,\n-    29788, 256, 29809, 256, 29829, 256, 29898, 256, 16155, 256, 29988, 256,\n-    55379, 56374, 256, 30014, 256, 55379, 56466, 256, 30064, 256, 55368,\n-    56735, 256, 30224, 256, 55379, 57249, 256, 55379, 57272, 256, 55380,\n-    56388, 256, 16380, 256, 16392, 256, 30452, 256, 55380, 56563, 256, 55380,\n-    56562, 256, 55380, 56601, 256, 55380, 56627, 256, 30494, 256, 30495, 256,\n-    30495, 256, 30538, 256, 16441, 256, 30603, 256, 16454, 256, 16534, 256,\n-    55381, 56349, 256, 30798, 256, 30860, 256, 30924, 256, 16611, 256, 55381,\n-    56870, 256, 31062, 256, 55381, 56986, 256, 55381, 57029, 256, 31119, 256,\n-    31211, 256, 16687, 256, 31296, 256, 31306, 256, 31311, 256, 55382, 56700,\n-    256, 55382, 56999, 256, 55382, 56999, 256, 31470, 256, 16898, 256, 55382,\n-    57259, 256, 31686, 256, 31689, 256, 16935, 256, 55383, 56448, 256, 31954,\n-    256, 17056, 256, 31976, 256, 31971, 256, 32000, 256, 55383, 57222, 256,\n-    32099, 256, 17153, 256, 32199, 256, 32258, 256, 32325, 256, 17204, 256,\n-    55384, 56872, 256, 55384, 56903, 256, 17241, 256, 55384, 57049, 256,\n-    32634, 256, 55384, 57150, 256, 32661, 256, 32762, 256, 32773, 256, 55385,\n-    56538, 256, 55385, 56611, 256, 32864, 256, 55385, 56744, 256, 32880, 256,\n-    55372, 57183, 256, 17365, 256, 32946, 256, 33027, 256, 17419, 256, 33086,\n-    256, 23221, 256, 55385, 57255, 256, 55385, 57269, 256, 55372, 57235, 256,\n-    55372, 57244, 256, 33281, 256, 33284, 256, 36766, 256, 17515, 256, 33425,\n-    256, 33419, 256, 33437, 256, 21171, 256, 33457, 256, 33459, 256, 33469,\n-    256, 33510, 256, 55386, 57148, 256, 33509, 256, 33565, 256, 33635, 256,\n-    33709, 256, 33571, 256, 33725, 256, 33767, 256, 33879, 256, 33619, 256,\n-    33738, 256, 33740, 256, 33756, 256, 55387, 56374, 256, 55387, 56683, 256,\n-    55387, 56533, 256, 17707, 256, 34033, 256, 34035, 256, 34070, 256, 55388,\n-    57290, 256, 34148, 256, 55387, 57132, 256, 17757, 256, 17761, 256, 55387,\n-    57265, 256, 55388, 56530, 256, 17771, 256, 34384, 256, 34396, 256, 34407,\n-    256, 34409, 256, 34473, 256, 34440, 256, 34574, 256, 34530, 256, 34681,\n-    256, 34600, 256, 34667, 256, 34694, 256, 17879, 256, 34785, 256, 34817,\n-    256, 17913, 256, 34912, 256, 34915, 256, 55389, 56935, 256, 35031, 256,\n-    35038, 256, 17973, 256, 35066, 256, 13499, 256, 55390, 56494, 256, 55390,\n-    56678, 256, 18110, 256, 18119, 256, 35488, 256, 35565, 256, 35722, 256,\n-    35925, 256, 55391, 56488, 256, 36011, 256, 36033, 256, 36123, 256, 36215,\n-    256, 55391, 57135, 256, 55362, 56324, 256, 36299, 256, 36284, 256, 36336,\n-    256, 55362, 56542, 256, 36564, 256, 36664, 256, 55393, 56786, 256, 55393,\n-    56813, 256, 37012, 256, 37105, 256, 37137, 256, 55393, 57134, 256, 37147,\n-    256, 37432, 256, 37591, 256, 37592, 256, 37500, 256, 37881, 256, 37909,\n-    256, 55394, 57338, 256, 38283, 256, 18837, 256, 38327, 256, 55395, 56695,\n-    256, 18918, 256, 38595, 256, 23986, 256, 38691, 256, 55396, 56645, 256,\n-    55396, 56858, 256, 19054, 256, 19062, 256, 38880, 256, 55397, 56330, 256,\n-    19122, 256, 55397, 56470, 256, 38923, 256, 38923, 256, 38953, 256, 55397,\n-    56758, 256, 39138, 256, 19251, 256, 39209, 256, 39335, 256, 39362, 256,\n-    39422, 256, 19406, 256, 55398, 57136, 256, 39698, 256, 40000, 256, 40189,\n-    256, 19662, 256, 19693, 256, 40295, 256, 55400, 56526, 256, 19704, 256,\n-    55400, 56581, 256, 55400, 56846, 256, 55400, 56977, 256, 40635, 256,\n-    19798, 256, 40697, 256, 40702, 256, 40709, 256, 40719, 256, 40726, 256,\n-    40763, 256, 55401, 56832,\n-};\n-\n-\/* index tables for the decomposition data *\/\n-#define DECOMP_SHIFT1 6\n-#define DECOMP_SHIFT2 4\n-static const unsigned char decomp_index0[] = {\n-    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13, 14, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 16, 5, 5, 5, 5, 17, 18,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 20,\n-    5, 5, 5, 5, 5, 21, 22, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    23, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-};\n-\n-static const unsigned short decomp_index1[] = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\n-    14, 0, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 0, 0, 0, 0, 0, 0,\n-    25, 0, 26, 27, 0, 0, 0, 0, 0, 28, 0, 0, 29, 30, 31, 32, 33, 34, 35, 0,\n-    36, 37, 38, 0, 39, 0, 40, 0, 41, 0, 0, 0, 0, 42, 43, 44, 45, 0, 0, 0, 0,\n-    0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 48, 0, 0, 0,\n-    0, 49, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 52, 0, 53, 0, 0, 0, 0,\n-    0, 0, 54, 55, 0, 0, 0, 0, 0, 56, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 58, 59, 0, 0, 0, 60, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0,\n-    0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0,\n-    0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 67, 0, 68, 0, 0, 69, 0, 0, 0, 70,\n-    71, 72, 73, 74, 75, 76, 77, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 81, 0,\n-    82, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 84, 85, 86, 87, 88, 89, 0, 90, 91, 92, 0, 0, 0, 0,\n-    93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\n-    109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\n-    123, 124, 125, 126, 127, 128, 129, 130, 0, 131, 132, 133, 134, 0, 0, 0,\n-    0, 0, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 0, 146, 0,\n-    0, 0, 147, 0, 148, 149, 150, 0, 151, 152, 153, 0, 154, 0, 0, 0, 155, 0,\n-    0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157,\n-    158, 159, 160, 161, 162, 163, 164, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0,\n-    0, 0, 0, 0, 0, 167, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    171, 0, 0, 0, 0, 0, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\n-    182, 183, 184, 185, 186, 0, 0, 187, 0, 0, 188, 189, 190, 191, 192, 0,\n-    193, 194, 195, 196, 197, 0, 198, 0, 0, 0, 199, 200, 201, 202, 203, 204,\n-    205, 0, 0, 0, 0, 0, 0, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,\n-    216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,\n-    230, 231, 232, 233, 234, 235, 236, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 239, 0, 0,\n-    0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 243, 244, 245, 246, 247,\n-    248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261,\n-    262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 0, 0, 272, 273, 274,\n-    275, 276, 277, 278, 279, 280, 281, 282, 283, 0, 284, 285, 286, 287, 288,\n-    289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,\n-    303, 304, 305, 306, 0, 307, 308, 309, 310, 311, 312, 313, 314, 0, 0, 315,\n-    0, 316, 0, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,\n-    329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342,\n-    343, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345, 346, 0, 0, 0, 0, 0, 0, 0,\n-    347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 352, 0, 0, 0, 0, 353, 354, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,\n-    365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378,\n-    379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392,\n-    393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406,\n-    407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 431, 432, 433, 434, 435, 0, 436, 0,\n-    0, 437, 0, 0, 0, 0, 0, 0, 438, 439, 440, 441, 442, 443, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 444, 445,\n-    446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459,\n-    460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473,\n-    474, 475, 476, 477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-};\n-\n-static const unsigned short decomp_index2[] = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n-    3, 0, 6, 0, 0, 0, 0, 8, 0, 0, 11, 13, 15, 18, 0, 0, 20, 23, 25, 0, 27,\n-    31, 35, 0, 39, 42, 45, 48, 51, 54, 0, 57, 60, 63, 66, 69, 72, 75, 78, 81,\n-    0, 84, 87, 90, 93, 96, 99, 0, 0, 102, 105, 108, 111, 114, 0, 0, 117, 120,\n-    123, 126, 129, 132, 0, 135, 138, 141, 144, 147, 150, 153, 156, 159, 0,\n-    162, 165, 168, 171, 174, 177, 0, 0, 180, 183, 186, 189, 192, 0, 195, 198,\n-    201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240,\n-    243, 0, 0, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279,\n-    282, 285, 288, 291, 294, 297, 300, 303, 0, 0, 306, 309, 312, 315, 318,\n-    321, 324, 327, 330, 0, 333, 336, 339, 342, 345, 348, 0, 351, 354, 357,\n-    360, 363, 366, 369, 372, 0, 0, 375, 378, 381, 384, 387, 390, 393, 0, 0,\n-    396, 399, 402, 405, 408, 411, 0, 0, 414, 417, 420, 423, 426, 429, 432,\n-    435, 438, 441, 444, 447, 450, 453, 456, 459, 462, 465, 0, 0, 468, 471,\n-    474, 477, 480, 483, 486, 489, 492, 495, 498, 501, 504, 507, 510, 513,\n-    516, 519, 522, 525, 528, 531, 534, 537, 539, 542, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 545, 548, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 551, 554, 557, 560, 563, 566, 569, 572, 575, 578, 581, 584, 587,\n-    590, 593, 596, 599, 602, 605, 608, 611, 614, 617, 620, 623, 0, 626, 629,\n-    632, 635, 638, 641, 0, 0, 644, 647, 650, 653, 656, 659, 662, 665, 668,\n-    671, 674, 677, 680, 683, 686, 689, 0, 0, 692, 695, 698, 701, 704, 707,\n-    710, 713, 716, 719, 722, 725, 728, 731, 734, 737, 740, 743, 746, 749,\n-    752, 755, 758, 761, 764, 767, 770, 773, 776, 779, 782, 785, 788, 791,\n-    794, 797, 0, 0, 800, 803, 0, 0, 0, 0, 0, 0, 806, 809, 812, 815, 818, 821,\n-    824, 827, 830, 833, 836, 839, 842, 845, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 848, 850, 852, 854, 856, 858, 860, 862, 864, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 866, 869, 872, 875, 878, 881, 0, 0, 884, 886, 888,\n-    890, 892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 894, 896, 0, 898, 900, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 903, 0, 0, 0, 0, 0, 905, 0, 0, 0,\n-    908, 0, 0, 0, 0, 0, 910, 913, 916, 919, 921, 924, 927, 0, 930, 0, 933,\n-    936, 939, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 942, 945, 948, 951, 954, 957, 960, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 963, 966, 969, 972, 975,\n-    0, 978, 980, 982, 984, 987, 990, 992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 994,\n-    996, 998, 0, 1000, 1002, 0, 0, 0, 1004, 0, 0, 0, 0, 0, 0, 1006, 1009, 0,\n-    1012, 0, 0, 0, 1015, 0, 0, 0, 0, 1018, 1021, 1024, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 1027, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1030, 0, 0,\n-    0, 0, 0, 0, 1033, 1036, 0, 1039, 0, 0, 0, 1042, 0, 0, 0, 0, 1045, 1048,\n-    1051, 0, 0, 0, 0, 0, 0, 0, 1054, 1057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,\n-    1063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1066, 1069, 1072, 1075, 0,\n-    0, 1078, 1081, 0, 0, 1084, 1087, 1090, 1093, 1096, 1099, 0, 0, 1102,\n-    1105, 1108, 1111, 1114, 1117, 0, 0, 1120, 1123, 1126, 1129, 1132, 1135,\n-    1138, 1141, 1144, 1147, 1150, 1153, 0, 0, 1156, 1159, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1165, 1168,\n-    1171, 1174, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1180, 1183,\n-    1186, 1189, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 1195, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0, 1204, 0, 0, 1207, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1210, 1213, 1216,\n-    1219, 1222, 1225, 1228, 1231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1234,\n-    1237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 1243, 0, 1246,\n-    0, 0, 0, 1249, 0, 0, 1252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 1255, 1258, 1261, 0, 0, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1267,\n-    0, 0, 1270, 1273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,\n-    1279, 0, 0, 0, 0, 0, 0, 1282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 1285, 1288, 1291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    1294, 0, 0, 0, 0, 0, 0, 0, 1297, 0, 0, 0, 0, 0, 0, 1300, 1303, 0, 1306,\n-    1309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1312, 1315, 1318, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1321, 0, 1324, 1327, 1330, 0, 0, 0, 0,\n-    1333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1339, 1342, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1345, 0, 0, 0, 0, 0, 0, 1347, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 1350, 0, 0, 0, 0, 1353, 0, 0, 0, 0, 1356, 0, 0,\n-    0, 0, 1359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1362, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 1365, 0, 1368, 1371, 1374, 1377, 1380, 0, 0, 0, 0, 0, 0, 0,\n-    1383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1386, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 1389, 0, 0, 0, 0, 1392, 0, 0, 0, 0, 1395, 0, 0, 0, 0,\n-    1398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1401, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 1404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 1407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1409, 0, 1412, 0, 1415, 0,\n-    1418, 0, 1421, 0, 0, 0, 1424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1427, 0, 1430, 0, 0, 1433, 1436, 0, 1439,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    1442, 1444, 1446, 0, 1448, 1450, 1452, 1454, 1456, 1458, 1460, 1462,\n-    1464, 1466, 1468, 0, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484,\n-    1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 0, 1506,\n-    1508, 1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 1526, 1528, 1530,\n-    1532, 1534, 1536, 1538, 1540, 1542, 1544, 1546, 1548, 1550, 1552, 1554,\n-    1556, 1558, 1560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1562, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1564, 1566, 1568, 1570,\n-    1572, 1574, 1576, 1578, 1580, 1582, 1584, 1586, 1588, 1590, 1592, 1594,\n-    1596, 1598, 1600, 1602, 1604, 1606, 1608, 1610, 1612, 1614, 1616, 1618,\n-    1620, 1622, 1624, 1626, 1628, 1630, 1632, 1634, 1636, 1638, 1641, 1644,\n-    1647, 1650, 1653, 1656, 1659, 1662, 1665, 1668, 1671, 1674, 1677, 1680,\n-    1683, 1686, 1689, 1692, 1695, 1698, 1701, 1704, 1707, 1710, 1713, 1716,\n-    1719, 1722, 1725, 1728, 1731, 1734, 1737, 1740, 1743, 1746, 1749, 1752,\n-    1755, 1758, 1761, 1764, 1767, 1770, 1773, 1776, 1779, 1782, 1785, 1788,\n-    1791, 1794, 1797, 1800, 1803, 1806, 1809, 1812, 1815, 1818, 1821, 1824,\n-    1827, 1830, 1833, 1836, 1839, 1842, 1845, 1848, 1851, 1854, 1857, 1860,\n-    1863, 1866, 1869, 1872, 1875, 1878, 1881, 1884, 1887, 1890, 1893, 1896,\n-    1899, 1902, 1905, 1908, 1911, 1914, 1917, 1920, 1923, 1926, 1929, 1932,\n-    1935, 1938, 1941, 1944, 1947, 1950, 1953, 1956, 1959, 1962, 1965, 1968,\n-    1971, 1974, 1977, 1980, 1983, 1986, 1989, 1992, 1995, 1998, 2001, 2004,\n-    2007, 2010, 2013, 2016, 2019, 2022, 2025, 2028, 2031, 2034, 2037, 2040,\n-    2043, 2046, 2049, 2052, 2055, 2058, 2061, 2064, 2067, 2070, 2073, 2076,\n-    2079, 2082, 2085, 2088, 2091, 2094, 2097, 2100, 2103, 0, 0, 0, 0, 2106,\n-    2109, 2112, 2115, 2118, 2121, 2124, 2127, 2130, 2133, 2136, 2139, 2142,\n-    2145, 2148, 2151, 2154, 2157, 2160, 2163, 2166, 2169, 2172, 2175, 2178,\n-    2181, 2184, 2187, 2190, 2193, 2196, 2199, 2202, 2205, 2208, 2211, 2214,\n-    2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238, 2241, 2244, 2247, 2250,\n-    2253, 2256, 2259, 2262, 2265, 2268, 2271, 2274, 2277, 2280, 2283, 2286,\n-    2289, 2292, 2295, 2298, 2301, 2304, 2307, 2310, 2313, 2316, 2319, 2322,\n-    2325, 2328, 2331, 2334, 2337, 2340, 2343, 2346, 2349, 2352, 2355, 2358,\n-    2361, 2364, 2367, 2370, 2373, 0, 0, 0, 0, 0, 0, 2376, 2379, 2382, 2385,\n-    2388, 2391, 2394, 2397, 2400, 2403, 2406, 2409, 2412, 2415, 2418, 2421,\n-    2424, 2427, 2430, 2433, 2436, 2439, 0, 0, 2442, 2445, 2448, 2451, 2454,\n-    2457, 0, 0, 2460, 2463, 2466, 2469, 2472, 2475, 2478, 2481, 2484, 2487,\n-    2490, 2493, 2496, 2499, 2502, 2505, 2508, 2511, 2514, 2517, 2520, 2523,\n-    2526, 2529, 2532, 2535, 2538, 2541, 2544, 2547, 2550, 2553, 2556, 2559,\n-    2562, 2565, 2568, 2571, 0, 0, 2574, 2577, 2580, 2583, 2586, 2589, 0, 0,\n-    2592, 2595, 2598, 2601, 2604, 2607, 2610, 2613, 0, 2616, 0, 2619, 0,\n-    2622, 0, 2625, 2628, 2631, 2634, 2637, 2640, 2643, 2646, 2649, 2652,\n-    2655, 2658, 2661, 2664, 2667, 2670, 2673, 2676, 2679, 2681, 2684, 2686,\n-    2689, 2691, 2694, 2696, 2699, 2701, 2704, 2706, 2709, 0, 0, 2711, 2714,\n-    2717, 2720, 2723, 2726, 2729, 2732, 2735, 2738, 2741, 2744, 2747, 2750,\n-    2753, 2756, 2759, 2762, 2765, 2768, 2771, 2774, 2777, 2780, 2783, 2786,\n-    2789, 2792, 2795, 2798, 2801, 2804, 2807, 2810, 2813, 2816, 2819, 2822,\n-    2825, 2828, 2831, 2834, 2837, 2840, 2843, 2846, 2849, 2852, 2855, 2858,\n-    2861, 2864, 2867, 0, 2870, 2873, 2876, 2879, 2882, 2885, 2887, 2890,\n-    2893, 2895, 2898, 2901, 2904, 2907, 2910, 0, 2913, 2916, 2919, 2922,\n-    2924, 2927, 2929, 2932, 2935, 2938, 2941, 2944, 2947, 2950, 0, 0, 2952,\n-    2955, 2958, 2961, 2964, 2967, 0, 2969, 2972, 2975, 2978, 2981, 2984,\n-    2987, 2989, 2992, 2995, 2998, 3001, 3004, 3007, 3010, 3012, 3015, 3018,\n-    3020, 0, 0, 3022, 3025, 3028, 0, 3031, 3034, 3037, 3040, 3042, 3045,\n-    3047, 3050, 3052, 0, 3055, 3057, 3059, 3061, 3063, 3065, 3067, 3069,\n-    3071, 3073, 3075, 0, 0, 0, 0, 0, 0, 3077, 0, 0, 0, 0, 0, 3079, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 3082, 3084, 3087, 0, 0, 0, 0, 0, 0, 0, 0,\n-    3091, 0, 0, 0, 3093, 3096, 0, 3100, 3103, 0, 0, 0, 0, 3107, 0, 3110, 0,\n-    0, 0, 0, 0, 0, 0, 0, 3113, 3116, 3119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 3122, 0, 0, 0, 0, 0, 0, 0, 3127, 3129, 3131, 0, 0, 3133, 3135,\n-    3137, 3139, 3141, 3143, 3145, 3147, 3149, 3151, 3153, 3155, 3157, 3159,\n-    3161, 3163, 3165, 3167, 3169, 3171, 3173, 3175, 3177, 3179, 3181, 3183,\n-    3185, 0, 3187, 3189, 3191, 3193, 3195, 3197, 3199, 3201, 3203, 3205,\n-    3207, 3209, 3211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3213, 0, 0, 0, 0, 0,\n-    0, 0, 3216, 3220, 3224, 3226, 0, 3229, 3233, 3237, 0, 3239, 3242, 3244,\n-    3246, 3248, 3250, 3252, 3254, 3256, 3258, 3260, 0, 3262, 3264, 0, 0,\n-    3267, 3269, 3271, 3273, 3275, 0, 0, 3277, 3280, 3284, 0, 3287, 0, 3289,\n-    0, 3291, 0, 3293, 3295, 3297, 3299, 0, 3301, 3303, 3305, 0, 3307, 3309,\n-    3311, 3313, 3315, 3317, 3319, 0, 3321, 3325, 3327, 3329, 3331, 3333, 0,\n-    0, 0, 0, 3335, 3337, 3339, 3341, 3343, 0, 0, 0, 0, 0, 0, 3345, 3349,\n-    3353, 3358, 3362, 3366, 3370, 3374, 3378, 3382, 3386, 3390, 3394, 3398,\n-    3402, 3406, 3409, 3411, 3414, 3418, 3421, 3423, 3426, 3430, 3435, 3438,\n-    3440, 3443, 3447, 3449, 3451, 3453, 3455, 3457, 3460, 3464, 3467, 3469,\n-    3472, 3476, 3481, 3484, 3486, 3489, 3493, 3495, 3497, 3499, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 3501, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    3505, 3508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3511,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3514, 3517, 3520, 0, 0, 0, 0,\n-    3523, 0, 0, 0, 0, 3526, 0, 0, 3529, 0, 0, 0, 0, 0, 0, 0, 3532, 0, 3535,\n-    0, 0, 0, 0, 0, 3538, 3541, 0, 3545, 3548, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 3552, 0, 0, 3555, 0, 0, 3558, 0, 3561, 0, 0, 0, 0, 0,\n-    0, 3564, 0, 3567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3570, 3573, 3576, 3579,\n-    3582, 0, 0, 3585, 3588, 0, 0, 3591, 3594, 0, 0, 0, 0, 0, 0, 3597, 3600,\n-    0, 0, 3603, 3606, 0, 0, 3609, 3612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 3615, 3618, 3621, 3624, 3627, 3630, 3633, 3636, 0, 0,\n-    0, 0, 0, 0, 3639, 3642, 3645, 3648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    3651, 3653, 0, 0, 0, 0, 0, 3655, 3657, 3659, 3661, 3663, 3665, 3667,\n-    3669, 3671, 3673, 3676, 3679, 3682, 3685, 3688, 3691, 3694, 3697, 3700,\n-    3703, 3706, 3710, 3714, 3718, 3722, 3726, 3730, 3734, 3738, 3742, 3747,\n-    3752, 3757, 3762, 3767, 3772, 3777, 3782, 3787, 3792, 3797, 3800, 3803,\n-    3806, 3809, 3812, 3815, 3818, 3821, 3824, 3828, 3832, 3836, 3840, 3844,\n-    3848, 3852, 3856, 3860, 3864, 3868, 3872, 3876, 3880, 3884, 3888, 3892,\n-    3896, 3900, 3904, 3908, 3912, 3916, 3920, 3924, 3928, 3932, 3936, 3940,\n-    3944, 3948, 3952, 3956, 3960, 3964, 3968, 3972, 3974, 3976, 3978, 3980,\n-    3982, 3984, 3986, 3988, 3990, 3992, 3994, 3996, 3998, 4000, 4002, 4004,\n-    4006, 4008, 4010, 4012, 4014, 4016, 4018, 4020, 4022, 4024, 4026, 4028,\n-    4030, 4032, 4034, 4036, 4038, 4040, 4042, 4044, 4046, 4048, 4050, 4052,\n-    4054, 4056, 4058, 4060, 4062, 4064, 4066, 4068, 4070, 4072, 4074, 4076,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4078, 0, 0, 0, 0, 0,\n-    0, 0, 4083, 4087, 4090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 4094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4097,\n-    4099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4101, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4103, 0, 0, 0, 4105, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 4107, 4109, 4111, 4113, 4115, 4117, 4119, 4121,\n-    4123, 4125, 4127, 4129, 4131, 4133, 4135, 4137, 4139, 4141, 4143, 4145,\n-    4147, 4149, 4151, 4153, 4155, 4157, 4159, 4161, 4163, 4165, 4167, 4169,\n-    4171, 4173, 4175, 4177, 4179, 4181, 4183, 4185, 4187, 4189, 4191, 4193,\n-    4195, 4197, 4199, 4201, 4203, 4205, 4207, 4209, 4211, 4213, 4215, 4217,\n-    4219, 4221, 4223, 4225, 4227, 4229, 4231, 4233, 4235, 4237, 4239, 4241,\n-    4243, 4245, 4247, 4249, 4251, 4253, 4255, 4257, 4259, 4261, 4263, 4265,\n-    4267, 4269, 4271, 4273, 4275, 4277, 4279, 4281, 4283, 4285, 4287, 4289,\n-    4291, 4293, 4295, 4297, 4299, 4301, 4303, 4305, 4307, 4309, 4311, 4313,\n-    4315, 4317, 4319, 4321, 4323, 4325, 4327, 4329, 4331, 4333, 4335, 4337,\n-    4339, 4341, 4343, 4345, 4347, 4349, 4351, 4353, 4355, 4357, 4359, 4361,\n-    4363, 4365, 4367, 4369, 4371, 4373, 4375, 4377, 4379, 4381, 4383, 4385,\n-    4387, 4389, 4391, 4393, 4395, 4397, 4399, 4401, 4403, 4405, 4407, 4409,\n-    4411, 4413, 4415, 4417, 4419, 4421, 4423, 4425, 4427, 4429, 4431, 4433,\n-    4435, 4437, 4439, 4441, 4443, 4445, 4447, 4449, 4451, 4453, 4455, 4457,\n-    4459, 4461, 4463, 4465, 4467, 4469, 4471, 4473, 4475, 4477, 4479, 4481,\n-    4483, 4485, 4487, 4489, 4491, 4493, 4495, 4497, 4499, 4501, 4503, 4505,\n-    4507, 4509, 4511, 4513, 4515, 4517, 4519, 4521, 4523, 4525, 4527, 4529,\n-    4531, 4533, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4535, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4537, 0, 4539, 4541, 4543, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4545, 0, 4548, 0, 4551, 0,\n-    4554, 0, 4557, 0, 4560, 0, 4563, 0, 4566, 0, 4569, 0, 4572, 0, 4575, 0,\n-    4578, 0, 0, 4581, 0, 4584, 0, 4587, 0, 0, 0, 0, 0, 0, 4590, 4593, 0,\n-    4596, 4599, 0, 4602, 4605, 0, 4608, 4611, 0, 4614, 4617, 0, 0, 0, 0, 0,\n-    0, 4620, 0, 0, 0, 0, 0, 0, 4623, 4626, 0, 4629, 4632, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 4635, 0, 4638, 0, 4641, 0, 4644, 0, 4647, 0, 4650, 0,\n-    4653, 0, 4656, 0, 4659, 0, 4662, 0, 4665, 0, 4668, 0, 0, 4671, 0, 4674,\n-    0, 4677, 0, 0, 0, 0, 0, 0, 4680, 4683, 0, 4686, 4689, 0, 4692, 4695, 0,\n-    4698, 4701, 0, 4704, 4707, 0, 0, 0, 0, 0, 0, 4710, 0, 0, 4713, 4716,\n-    4719, 4722, 0, 0, 0, 4725, 4728, 0, 4731, 4733, 4735, 4737, 4739, 4741,\n-    4743, 4745, 4747, 4749, 4751, 4753, 4755, 4757, 4759, 4761, 4763, 4765,\n-    4767, 4769, 4771, 4773, 4775, 4777, 4779, 4781, 4783, 4785, 4787, 4789,\n-    4791, 4793, 4795, 4797, 4799, 4801, 4803, 4805, 4807, 4809, 4811, 4813,\n-    4815, 4817, 4819, 4821, 4823, 4825, 4827, 4829, 4831, 4833, 4835, 4837,\n-    4839, 4841, 4843, 4845, 4847, 4849, 4851, 4853, 4855, 4857, 4859, 4861,\n-    4863, 4865, 4867, 4869, 4871, 4873, 4875, 4877, 4879, 4881, 4883, 4885,\n-    4887, 4889, 4891, 4893, 4895, 4897, 4899, 4901, 4903, 4905, 4907, 4909,\n-    4911, 4913, 4915, 4917, 0, 0, 0, 4919, 4921, 4923, 4925, 4927, 4929,\n-    4931, 4933, 4935, 4937, 4939, 4941, 4943, 4945, 4947, 4951, 4955, 4959,\n-    4963, 4967, 4971, 4975, 4979, 4983, 4987, 4991, 4995, 4999, 5003, 5008,\n-    5013, 5018, 5023, 5028, 5033, 5038, 5043, 5048, 5053, 5058, 5063, 5068,\n-    5073, 5078, 5086, 0, 5093, 5097, 5101, 5105, 5109, 5113, 5117, 5121,\n-    5125, 5129, 5133, 5137, 5141, 5145, 5149, 5153, 5157, 5161, 5165, 5169,\n-    5173, 5177, 5181, 5185, 5189, 5193, 5197, 5201, 5205, 5209, 5213, 5217,\n-    5221, 5225, 5229, 5233, 5237, 5239, 5241, 5243, 0, 0, 0, 0, 0, 0, 0, 0,\n-    5245, 5249, 5252, 5255, 5258, 5261, 5264, 5267, 5270, 5273, 5276, 5279,\n-    5282, 5285, 5288, 5291, 5294, 5296, 5298, 5300, 5302, 5304, 5306, 5308,\n-    5310, 5312, 5314, 5316, 5318, 5320, 5322, 5325, 5328, 5331, 5334, 5337,\n-    5340, 5343, 5346, 5349, 5352, 5355, 5358, 5361, 5364, 5370, 5375, 0,\n-    5378, 5380, 5382, 5384, 5386, 5388, 5390, 5392, 5394, 5396, 5398, 5400,\n-    5402, 5404, 5406, 5408, 5410, 5412, 5414, 5416, 5418, 5420, 5422, 5424,\n-    5426, 5428, 5430, 5432, 5434, 5436, 5438, 5440, 5442, 5444, 5446, 5448,\n-    5450, 5452, 5454, 5456, 5458, 5460, 5462, 5464, 5466, 5468, 5470, 5472,\n-    5474, 5476, 5479, 5482, 5485, 5488, 5491, 5494, 5497, 5500, 5503, 5506,\n-    5509, 5512, 5515, 5518, 5521, 5524, 5527, 5530, 5533, 5536, 5539, 5542,\n-    5545, 5548, 5552, 5556, 5560, 5563, 5567, 5570, 5574, 5576, 5578, 5580,\n-    5582, 5584, 5586, 5588, 5590, 5592, 5594, 5596, 5598, 5600, 5602, 5604,\n-    5606, 5608, 5610, 5612, 5614, 5616, 5618, 5620, 5622, 5624, 5626, 5628,\n-    5630, 5632, 5634, 5636, 5638, 5640, 5642, 5644, 5646, 5648, 5650, 5652,\n-    5654, 5656, 5658, 5660, 5662, 5664, 5666, 0, 5668, 5673, 5678, 5683,\n-    5687, 5692, 5696, 5700, 5706, 5711, 5715, 5719, 5723, 5728, 5733, 5737,\n-    5741, 5744, 5748, 5753, 5758, 5761, 5767, 5774, 5780, 5784, 5790, 5796,\n-    5801, 5805, 5809, 5813, 5818, 5824, 5829, 5833, 5837, 5841, 5844, 5847,\n-    5850, 5853, 5857, 5861, 5867, 5871, 5876, 5882, 5886, 5889, 5892, 5898,\n-    5903, 5909, 5913, 5919, 5922, 5926, 5930, 5934, 5938, 5942, 5947, 5951,\n-    5954, 5958, 5962, 5966, 5971, 5975, 5979, 5983, 5989, 5994, 5997, 6003,\n-    6006, 6011, 6016, 6020, 6024, 6028, 6033, 6036, 6040, 6045, 6048, 6054,\n-    6058, 6061, 6064, 6067, 6070, 6073, 6076, 6079, 6082, 6085, 6088, 6092,\n-    6096, 6100, 6104, 6108, 6112, 6116, 6120, 6124, 6128, 6132, 6136, 6140,\n-    6144, 6148, 6152, 6155, 6158, 6162, 6165, 6168, 6171, 6175, 6179, 6182,\n-    6185, 6188, 6191, 6194, 6199, 6202, 6205, 6208, 6211, 6214, 6217, 6220,\n-    6223, 6227, 6232, 6235, 6238, 6241, 6244, 6247, 6250, 6253, 6257, 6261,\n-    6265, 6269, 6272, 6275, 6278, 6281, 6284, 6287, 6290, 6293, 6296, 6299,\n-    6303, 6307, 6310, 6314, 6318, 6322, 6325, 6329, 6333, 6338, 6341, 6345,\n-    6349, 6353, 6357, 6363, 6370, 6373, 6376, 6379, 6382, 6385, 6388, 6391,\n-    6394, 6397, 6400, 6403, 6406, 6409, 6412, 6415, 6418, 6421, 6424, 6429,\n-    6432, 6435, 6438, 6443, 6447, 6450, 6453, 6456, 6459, 6462, 6465, 6468,\n-    6471, 6474, 6477, 6481, 6484, 6487, 6491, 6495, 6498, 6503, 6507, 6510,\n-    6513, 6516, 6519, 6523, 6527, 6530, 6533, 6536, 6539, 6542, 6545, 6548,\n-    6551, 6554, 6558, 6562, 6566, 6570, 6574, 6578, 6582, 6586, 6590, 6594,\n-    6598, 6602, 6606, 6610, 6614, 6618, 6622, 6626, 6630, 6634, 6638, 6642,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6646, 6648, 0, 0, 6650, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6652, 6654, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6656, 6658, 6660,\n-    6662, 6664, 6666, 6668, 6670, 6672, 6674, 6676, 6678, 6680, 6682, 6684,\n-    6686, 6688, 6690, 6692, 6694, 6696, 6698, 6700, 6702, 6704, 6706, 6708,\n-    6710, 6712, 6714, 6716, 6718, 6720, 6722, 6724, 6726, 6728, 6730, 6732,\n-    6734, 6736, 6738, 6740, 6742, 6744, 6746, 6748, 6750, 6752, 6754, 6756,\n-    6758, 6760, 6762, 6764, 6766, 6768, 6770, 6772, 6774, 6776, 6778, 6780,\n-    6782, 6784, 6786, 6788, 6790, 6792, 6794, 6796, 6798, 6800, 6802, 6804,\n-    6806, 6808, 6810, 6812, 6814, 6816, 6818, 6820, 6822, 6824, 6826, 6828,\n-    6830, 6832, 6834, 6836, 6838, 6840, 6842, 6844, 6846, 6848, 6850, 6852,\n-    6854, 6856, 6858, 6860, 6862, 6864, 6866, 6868, 6870, 6872, 6874, 6876,\n-    6878, 6880, 6882, 6884, 6886, 6888, 6890, 6892, 6894, 6896, 6898, 6900,\n-    6902, 6904, 6906, 6908, 6910, 6912, 6914, 6916, 6918, 6920, 6922, 6924,\n-    6926, 6928, 6930, 6932, 6934, 6936, 6938, 6940, 6942, 6944, 6946, 6948,\n-    6950, 6952, 6954, 6956, 6958, 6960, 6962, 6964, 6966, 6968, 6970, 6972,\n-    6974, 6976, 6978, 6980, 6982, 6984, 6986, 6988, 6990, 6992, 6994, 6996,\n-    6998, 7000, 7002, 7004, 7006, 7008, 7010, 7012, 7014, 7016, 7018, 7020,\n-    7022, 7024, 7026, 7028, 7030, 7032, 7034, 7036, 7038, 7040, 7042, 7044,\n-    7046, 7048, 7050, 7052, 7054, 7056, 7058, 7060, 7062, 7064, 7066, 7068,\n-    7070, 7072, 7074, 7076, 7078, 7080, 7082, 7084, 7086, 7088, 7090, 7092,\n-    7094, 7096, 7098, 7100, 7102, 7104, 7106, 7108, 7110, 7112, 7114, 7116,\n-    7118, 7120, 7122, 7124, 7126, 7128, 7130, 7132, 7134, 7136, 7138, 7140,\n-    7142, 7144, 7146, 7148, 7150, 7152, 7154, 7156, 7158, 7160, 7162, 7164,\n-    7166, 7168, 7170, 7172, 7174, 7176, 7178, 7180, 7182, 7184, 7186, 7188,\n-    7190, 7192, 7194, 7196, 7198, 7200, 7202, 0, 0, 7204, 0, 7206, 0, 0,\n-    7208, 7210, 7212, 7214, 7216, 7218, 7220, 7222, 7224, 7226, 0, 7228, 0,\n-    7230, 0, 0, 7232, 7234, 0, 0, 0, 7236, 7238, 7240, 7242, 7244, 7246,\n-    7248, 7250, 7252, 7254, 7256, 7258, 7260, 7262, 7264, 7266, 7268, 7270,\n-    7272, 7274, 7276, 7278, 7280, 7282, 7284, 7286, 7288, 7290, 7292, 7294,\n-    7296, 7298, 7300, 7302, 7304, 7306, 7308, 7310, 7312, 7314, 7316, 7318,\n-    7320, 7322, 7324, 7326, 7328, 7330, 7332, 7334, 7336, 7338, 7340, 7342,\n-    7344, 7346, 7348, 7350, 7352, 7354, 7356, 7358, 7360, 7362, 7364, 7366,\n-    7368, 7371, 0, 0, 7373, 7375, 7377, 7379, 7381, 7383, 7385, 7387, 7389,\n-    7391, 7393, 7395, 7397, 7399, 7401, 7403, 7405, 7407, 7409, 7411, 7413,\n-    7415, 7417, 7419, 7421, 7423, 7425, 7427, 7429, 7431, 7433, 7435, 7437,\n-    7439, 7441, 7443, 7445, 7447, 7449, 7451, 7453, 7455, 7457, 7459, 7461,\n-    7463, 7465, 7467, 7469, 7471, 7473, 7475, 7477, 7479, 7481, 7483, 7485,\n-    7487, 7489, 7491, 7493, 7495, 7497, 7499, 7501, 7503, 7505, 7507, 7509,\n-    7511, 7513, 7515, 7517, 7519, 7521, 7523, 7525, 7527, 7529, 7531, 7533,\n-    7535, 7537, 7539, 7541, 7543, 7545, 7547, 7549, 7551, 7553, 7555, 7557,\n-    7559, 7561, 7563, 7566, 7569, 7572, 7574, 7576, 7578, 7581, 7584, 7587,\n-    7589, 0, 0, 0, 0, 0, 0, 7591, 7594, 7597, 7600, 7604, 7608, 7611, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7614, 7617, 7620, 7623, 7626, 0, 0, 0, 0,\n-    0, 7629, 0, 7632, 7635, 7637, 7639, 7641, 7643, 7645, 7647, 7649, 7651,\n-    7653, 7655, 7658, 7661, 7664, 7667, 7670, 7673, 7676, 7679, 7682, 7685,\n-    7688, 7691, 0, 7694, 7697, 7700, 7703, 7706, 0, 7709, 0, 7712, 7715, 0,\n-    7718, 7721, 0, 7724, 7727, 7730, 7733, 7736, 7739, 7742, 7745, 7748,\n-    7751, 7754, 7756, 7758, 7760, 7762, 7764, 7766, 7768, 7770, 7772, 7774,\n-    7776, 7778, 7780, 7782, 7784, 7786, 7788, 7790, 7792, 7794, 7796, 7798,\n-    7800, 7802, 7804, 7806, 7808, 7810, 7812, 7814, 7816, 7818, 7820, 7822,\n-    7824, 7826, 7828, 7830, 7832, 7834, 7836, 7838, 7840, 7842, 7844, 7846,\n-    7848, 7850, 7852, 7854, 7856, 7858, 7860, 7862, 7864, 7866, 7868, 7870,\n-    7872, 7874, 7876, 7878, 7880, 7882, 7884, 7886, 7888, 7890, 7892, 7894,\n-    7896, 7898, 7900, 7902, 7904, 7906, 7908, 7910, 7912, 7914, 7916, 7918,\n-    7920, 7922, 7924, 7926, 7928, 7930, 7932, 7934, 7936, 7938, 7940, 7942,\n-    7944, 7946, 7948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    7950, 7952, 7954, 7956, 7958, 7960, 7962, 7964, 7966, 7968, 7970, 7972,\n-    7974, 7976, 7978, 7980, 7982, 7984, 7986, 7988, 7990, 7992, 7994, 7996,\n-    7999, 8002, 8005, 8008, 8011, 8014, 8017, 8020, 8023, 8026, 8029, 8032,\n-    8035, 8038, 8041, 8044, 8047, 8050, 8052, 8054, 8056, 8058, 8061, 8064,\n-    8067, 8070, 8073, 8076, 8079, 8082, 8085, 8088, 8091, 8094, 8097, 8100,\n-    8103, 8106, 8109, 8112, 8115, 8118, 8121, 8124, 8127, 8130, 8133, 8136,\n-    8139, 8142, 8145, 8148, 8151, 8154, 8157, 8160, 8163, 8166, 8169, 8172,\n-    8175, 8178, 8181, 8184, 8187, 8190, 8193, 8196, 8199, 8202, 8205, 8208,\n-    8211, 8214, 8217, 8220, 8223, 8226, 8229, 8232, 8235, 8238, 8241, 8244,\n-    8247, 8250, 8253, 8256, 8259, 8262, 8265, 8268, 8271, 8274, 8277, 8280,\n-    8283, 8286, 8289, 8292, 8295, 8298, 8301, 8304, 8307, 8310, 8313, 8316,\n-    8319, 8322, 8325, 8328, 8331, 8334, 8337, 8340, 8344, 8348, 8352, 8356,\n-    8360, 8364, 8367, 8370, 8373, 8376, 8379, 8382, 8385, 8388, 8391, 8394,\n-    8397, 8400, 8403, 8406, 8409, 8412, 8415, 8418, 8421, 8424, 8427, 8430,\n-    8433, 8436, 8439, 8442, 8445, 8448, 8451, 8454, 8457, 8460, 8463, 8466,\n-    8469, 8472, 8475, 8478, 8481, 8484, 8487, 8490, 8493, 8496, 8499, 8502,\n-    8505, 8508, 8511, 8514, 8517, 8520, 8523, 8526, 8529, 8532, 8535, 8538,\n-    8541, 8544, 8547, 8550, 8553, 8556, 8559, 8562, 8565, 8568, 8571, 8574,\n-    8577, 8580, 8583, 8586, 8589, 8592, 8595, 8598, 8601, 8604, 8607, 8610,\n-    8613, 8616, 8619, 8622, 8625, 8628, 8631, 8634, 8637, 8640, 8643, 8646,\n-    8649, 8652, 8655, 8658, 8661, 8664, 8667, 8670, 8673, 8676, 8679, 8682,\n-    8685, 8688, 8691, 8694, 8697, 8700, 8703, 8706, 8709, 8712, 8715, 8718,\n-    8721, 8724, 8727, 8730, 8733, 8736, 8739, 8742, 8745, 8748, 8751, 8754,\n-    8757, 8760, 8763, 8766, 8769, 8772, 8775, 8778, 8781, 8784, 8787, 8790,\n-    8794, 8798, 8802, 8805, 8808, 8811, 8814, 8817, 8820, 8823, 8826, 8829,\n-    8832, 8835, 8838, 8841, 8844, 8847, 8850, 8853, 8856, 8859, 8862, 8865,\n-    8868, 8871, 8874, 8877, 8880, 8883, 8886, 8889, 8892, 8895, 8898, 8901,\n-    8904, 8907, 8910, 8913, 8916, 8919, 8922, 8925, 8928, 8931, 8934, 8937,\n-    8940, 8943, 8946, 8949, 8952, 8955, 8958, 8961, 8964, 8967, 8970, 8973,\n-    8976, 8979, 8982, 8985, 8988, 8991, 8994, 8997, 9000, 9003, 9006, 9009,\n-    9012, 9015, 9018, 0, 0, 9021, 9025, 9029, 9033, 9037, 9041, 9045, 9049,\n-    9053, 9057, 9061, 9065, 9069, 9073, 9077, 9081, 9085, 9089, 9093, 9097,\n-    9101, 9105, 9109, 9113, 9117, 9121, 9125, 9129, 9133, 9137, 9141, 9145,\n-    9149, 9153, 9157, 9161, 9165, 9169, 9173, 9177, 9181, 9185, 9189, 9193,\n-    9197, 9201, 9205, 9209, 9213, 9217, 9221, 9225, 9229, 9233, 9237, 9241,\n-    9245, 9249, 9253, 9257, 9261, 9265, 9269, 9273, 0, 0, 9277, 9281, 9285,\n-    9289, 9293, 9297, 9301, 9305, 9309, 9313, 9317, 9321, 9325, 9329, 9333,\n-    9337, 9341, 9345, 9349, 9353, 9357, 9361, 9365, 9369, 9373, 9377, 9381,\n-    9385, 9389, 9393, 9397, 9401, 9405, 9409, 9413, 9417, 9421, 9425, 9429,\n-    9433, 9437, 9441, 9445, 9449, 9453, 9457, 9461, 9465, 9469, 9473, 9477,\n-    9481, 9485, 9489, 0, 0, 0, 0, 0, 0, 0, 0, 9493, 9497, 9501, 9506, 9511,\n-    9516, 9521, 9526, 9531, 9536, 9540, 9559, 9568, 0, 0, 0, 9573, 9575,\n-    9577, 9579, 9581, 9583, 9585, 9587, 9589, 9591, 0, 0, 0, 0, 0, 0, 9593,\n-    9595, 9597, 9599, 9601, 9603, 9605, 9607, 9609, 9611, 9613, 9615, 9617,\n-    9619, 9621, 9623, 9625, 9627, 9629, 9631, 9633, 0, 0, 9635, 9637, 9639,\n-    9641, 9643, 9645, 9647, 9649, 9651, 9653, 9655, 9657, 0, 9659, 9661,\n-    9663, 9665, 9667, 9669, 9671, 9673, 9675, 9677, 9679, 9681, 9683, 9685,\n-    9687, 9689, 9691, 9693, 9695, 0, 9697, 9699, 9701, 9703, 0, 0, 0, 0,\n-    9705, 9708, 9711, 0, 9714, 0, 9717, 9720, 9723, 9726, 9729, 9732, 9735,\n-    9738, 9741, 9744, 9747, 9749, 9751, 9753, 9755, 9757, 9759, 9761, 9763,\n-    9765, 9767, 9769, 9771, 9773, 9775, 9777, 9779, 9781, 9783, 9785, 9787,\n-    9789, 9791, 9793, 9795, 9797, 9799, 9801, 9803, 9805, 9807, 9809, 9811,\n-    9813, 9815, 9817, 9819, 9821, 9823, 9825, 9827, 9829, 9831, 9833, 9835,\n-    9837, 9839, 9841, 9843, 9845, 9847, 9849, 9851, 9853, 9855, 9857, 9859,\n-    9861, 9863, 9865, 9867, 9869, 9871, 9873, 9875, 9877, 9879, 9881, 9883,\n-    9885, 9887, 9889, 9891, 9893, 9895, 9897, 9899, 9901, 9903, 9905, 9907,\n-    9909, 9911, 9913, 9915, 9917, 9919, 9921, 9923, 9925, 9927, 9929, 9931,\n-    9933, 9935, 9937, 9939, 9941, 9943, 9945, 9947, 9949, 9951, 9953, 9955,\n-    9957, 9959, 9961, 9963, 9965, 9967, 9969, 9971, 9973, 9975, 9977, 9979,\n-    9981, 9984, 9987, 9990, 9993, 9996, 9999, 10002, 0, 0, 0, 0, 10005,\n-    10007, 10009, 10011, 10013, 10015, 10017, 10019, 10021, 10023, 10025,\n-    10027, 10029, 10031, 10033, 10035, 10037, 10039, 10041, 10043, 10045,\n-    10047, 10049, 10051, 10053, 10055, 10057, 10059, 10061, 10063, 10065,\n-    10067, 10069, 10071, 10073, 10075, 10077, 10079, 10081, 10083, 10085,\n-    10087, 10089, 10091, 10093, 10095, 10097, 10099, 10101, 10103, 10105,\n-    10107, 10109, 10111, 10113, 10115, 10117, 10119, 10121, 10123, 10125,\n-    10127, 10129, 10131, 10133, 10135, 10137, 10139, 10141, 10143, 10145,\n-    10147, 10149, 10151, 10153, 10155, 10157, 10159, 10161, 10163, 10165,\n-    10167, 10169, 10171, 10173, 10175, 10177, 10179, 10181, 10183, 10185,\n-    10187, 10189, 10191, 10193, 10195, 10197, 10199, 10201, 10203, 10205,\n-    10207, 10209, 10211, 10213, 10215, 10217, 10219, 10221, 10223, 10225,\n-    10227, 10229, 10231, 10233, 10235, 10237, 10239, 10241, 10243, 10245,\n-    10247, 10249, 10251, 10253, 10255, 10257, 10259, 10261, 10263, 10265,\n-    10267, 10269, 10271, 10273, 10275, 10277, 10279, 10281, 10283, 10285,\n-    10287, 10289, 10291, 10293, 10295, 10297, 10299, 10301, 10303, 10305,\n-    10307, 10309, 10311, 10313, 10315, 10317, 10319, 10321, 10323, 10325,\n-    10327, 10329, 10331, 10333, 10335, 10337, 10339, 10341, 10343, 10345,\n-    10347, 10349, 10351, 10353, 10355, 10357, 10359, 10361, 10363, 10365,\n-    10367, 10369, 10371, 10373, 10375, 10377, 10379, 10381, 10383, 0, 0, 0,\n-    10385, 10387, 10389, 10391, 10393, 10395, 0, 0, 10397, 10399, 10401,\n-    10403, 10405, 10407, 0, 0, 10409, 10411, 10413, 10415, 10417, 10419, 0,\n-    0, 10421, 10423, 10425, 0, 0, 0, 10427, 10429, 10431, 10433, 10435,\n-    10437, 10439, 0, 10441, 10443, 10445, 10447, 10449, 10451, 10453, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 10455, 0, 10460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 10465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    10470, 10475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10480, 10485, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10490, 10495, 0, 10500, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 10505, 10510, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 10515, 10520, 10525, 10530, 10535, 10540, 10545, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10550, 10555, 10560,\n-    10565, 10570, 10575, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10580,\n-    10582, 10584, 10586, 10588, 10590, 10592, 10594, 10596, 10598, 10600,\n-    10602, 10604, 10606, 10608, 10610, 10612, 10614, 10616, 10618, 10620,\n-    10622, 10624, 10626, 10628, 10630, 10632, 10634, 10636, 10638, 10640,\n-    10642, 10644, 10646, 10648, 10650, 10652, 10654, 10656, 10658, 10660,\n-    10662, 10664, 10666, 10668, 10670, 10672, 10674, 10676, 10678, 10680,\n-    10682, 10684, 10686, 10688, 10690, 10692, 10694, 10696, 10698, 10700,\n-    10702, 10704, 10706, 10708, 10710, 10712, 10714, 10716, 10718, 10720,\n-    10722, 10724, 10726, 10728, 10730, 10732, 10734, 10736, 10738, 10740,\n-    10742, 10744, 10746, 10748, 0, 10750, 10752, 10754, 10756, 10758, 10760,\n-    10762, 10764, 10766, 10768, 10770, 10772, 10774, 10776, 10778, 10780,\n-    10782, 10784, 10786, 10788, 10790, 10792, 10794, 10796, 10798, 10800,\n-    10802, 10804, 10806, 10808, 10810, 10812, 10814, 10816, 10818, 10820,\n-    10822, 10824, 10826, 10828, 10830, 10832, 10834, 10836, 10838, 10840,\n-    10842, 10844, 10846, 10848, 10850, 10852, 10854, 10856, 10858, 10860,\n-    10862, 10864, 10866, 10868, 10870, 10872, 10874, 10876, 10878, 10880,\n-    10882, 10884, 10886, 10888, 10890, 0, 10892, 10894, 0, 0, 10896, 0, 0,\n-    10898, 10900, 0, 0, 10902, 10904, 10906, 10908, 0, 10910, 10912, 10914,\n-    10916, 10918, 10920, 10922, 10924, 10926, 10928, 10930, 10932, 0, 10934,\n-    0, 10936, 10938, 10940, 10942, 10944, 10946, 10948, 0, 10950, 10952,\n-    10954, 10956, 10958, 10960, 10962, 10964, 10966, 10968, 10970, 10972,\n-    10974, 10976, 10978, 10980, 10982, 10984, 10986, 10988, 10990, 10992,\n-    10994, 10996, 10998, 11000, 11002, 11004, 11006, 11008, 11010, 11012,\n-    11014, 11016, 11018, 11020, 11022, 11024, 11026, 11028, 11030, 11032,\n-    11034, 11036, 11038, 11040, 11042, 11044, 11046, 11048, 11050, 11052,\n-    11054, 11056, 11058, 11060, 11062, 11064, 11066, 11068, 11070, 11072,\n-    11074, 11076, 11078, 0, 11080, 11082, 11084, 11086, 0, 0, 11088, 11090,\n-    11092, 11094, 11096, 11098, 11100, 11102, 0, 11104, 11106, 11108, 11110,\n-    11112, 11114, 11116, 0, 11118, 11120, 11122, 11124, 11126, 11128, 11130,\n-    11132, 11134, 11136, 11138, 11140, 11142, 11144, 11146, 11148, 11150,\n-    11152, 11154, 11156, 11158, 11160, 11162, 11164, 11166, 11168, 11170,\n-    11172, 0, 11174, 11176, 11178, 11180, 0, 11182, 11184, 11186, 11188,\n-    11190, 0, 11192, 0, 0, 0, 11194, 11196, 11198, 11200, 11202, 11204,\n-    11206, 0, 11208, 11210, 11212, 11214, 11216, 11218, 11220, 11222, 11224,\n-    11226, 11228, 11230, 11232, 11234, 11236, 11238, 11240, 11242, 11244,\n-    11246, 11248, 11250, 11252, 11254, 11256, 11258, 11260, 11262, 11264,\n-    11266, 11268, 11270, 11272, 11274, 11276, 11278, 11280, 11282, 11284,\n-    11286, 11288, 11290, 11292, 11294, 11296, 11298, 11300, 11302, 11304,\n-    11306, 11308, 11310, 11312, 11314, 11316, 11318, 11320, 11322, 11324,\n-    11326, 11328, 11330, 11332, 11334, 11336, 11338, 11340, 11342, 11344,\n-    11346, 11348, 11350, 11352, 11354, 11356, 11358, 11360, 11362, 11364,\n-    11366, 11368, 11370, 11372, 11374, 11376, 11378, 11380, 11382, 11384,\n-    11386, 11388, 11390, 11392, 11394, 11396, 11398, 11400, 11402, 11404,\n-    11406, 11408, 11410, 11412, 11414, 11416, 11418, 11420, 11422, 11424,\n-    11426, 11428, 11430, 11432, 11434, 11436, 11438, 11440, 11442, 11444,\n-    11446, 11448, 11450, 11452, 11454, 11456, 11458, 11460, 11462, 11464,\n-    11466, 11468, 11470, 11472, 11474, 11476, 11478, 11480, 11482, 11484,\n-    11486, 11488, 11490, 11492, 11494, 11496, 11498, 11500, 11502, 11504,\n-    11506, 11508, 11510, 11512, 11514, 11516, 11518, 11520, 11522, 11524,\n-    11526, 11528, 11530, 11532, 11534, 11536, 11538, 11540, 11542, 11544,\n-    11546, 11548, 11550, 11552, 11554, 11556, 11558, 11560, 11562, 11564,\n-    11566, 11568, 11570, 11572, 11574, 11576, 11578, 11580, 11582, 11584,\n-    11586, 11588, 11590, 11592, 11594, 11596, 11598, 11600, 11602, 11604,\n-    11606, 11608, 11610, 11612, 11614, 11616, 11618, 11620, 11622, 11624,\n-    11626, 11628, 11630, 11632, 11634, 11636, 11638, 11640, 11642, 11644,\n-    11646, 11648, 11650, 11652, 11654, 11656, 11658, 11660, 11662, 11664,\n-    11666, 11668, 11670, 11672, 11674, 11676, 11678, 11680, 11682, 11684,\n-    11686, 11688, 11690, 11692, 11694, 11696, 11698, 11700, 11702, 11704,\n-    11706, 11708, 11710, 11712, 11714, 11716, 11718, 11720, 11722, 11724,\n-    11726, 11728, 11730, 11732, 11734, 11736, 11738, 11740, 11742, 11744,\n-    11746, 11748, 11750, 11752, 11754, 11756, 11758, 11760, 11762, 11764,\n-    11766, 11768, 11770, 11772, 11774, 11776, 11778, 11780, 11782, 11784,\n-    11786, 11788, 11790, 11792, 11794, 11796, 11798, 11800, 11802, 11804,\n-    11806, 11808, 11810, 11812, 11814, 11816, 11818, 11820, 11822, 11824,\n-    11826, 11828, 11830, 11832, 11834, 11836, 11838, 11840, 11842, 11844,\n-    11846, 11848, 11850, 11852, 11854, 11856, 11858, 11860, 11862, 11864,\n-    11866, 11868, 11870, 11872, 11874, 11876, 11878, 11880, 11882, 11884,\n-    11886, 0, 0, 11888, 11890, 11892, 11894, 11896, 11898, 11900, 11902,\n-    11904, 11906, 11908, 11910, 11912, 11914, 11916, 11918, 11920, 11922,\n-    11924, 11926, 11928, 11930, 11932, 11934, 11936, 11938, 11940, 11942,\n-    11944, 11946, 11948, 11950, 11952, 11954, 11956, 11958, 11960, 11962,\n-    11964, 11966, 11968, 11970, 11972, 11974, 11976, 11978, 11980, 11982,\n-    11984, 11986, 11988, 11990, 11992, 11994, 11996, 11998, 12000, 12002,\n-    12004, 12006, 12008, 12010, 12012, 12014, 12016, 12018, 12020, 12022,\n-    12024, 12026, 12028, 12030, 12032, 12034, 12036, 12038, 12040, 12042,\n-    12044, 12046, 12048, 12050, 12052, 12054, 12056, 12058, 12060, 12062,\n-    12064, 12066, 12068, 12070, 12072, 12074, 12076, 12078, 12080, 12082,\n-    12084, 12086, 12088, 12090, 12092, 12094, 12096, 12098, 12100, 12102,\n-    12104, 12106, 12108, 12110, 12112, 12114, 12116, 12118, 12120, 12122,\n-    12124, 12126, 12128, 12130, 12132, 12134, 12136, 12138, 12140, 12142,\n-    12144, 12146, 12148, 12150, 12152, 12154, 12156, 12158, 12160, 12162,\n-    12164, 12166, 12168, 12170, 12172, 12174, 12176, 12178, 12180, 12182,\n-    12184, 12186, 12188, 12190, 12192, 12194, 12196, 12198, 12200, 12202,\n-    12204, 12206, 12208, 12210, 12212, 12214, 12216, 12218, 12220, 12222,\n-    12224, 12226, 12228, 12230, 12232, 12234, 12236, 12238, 12240, 12242,\n-    12244, 12246, 12248, 12250, 12252, 12254, 12256, 12258, 12260, 12262,\n-    12264, 12266, 12268, 12270, 12272, 12274, 12276, 12278, 12280, 12282,\n-    12284, 12286, 12288, 12290, 12292, 12294, 12296, 12298, 12300, 12302,\n-    12304, 12306, 12308, 12310, 12312, 12314, 12316, 12318, 12320, 12322,\n-    12324, 12326, 12328, 12330, 12332, 12334, 12336, 12338, 12340, 12342,\n-    12344, 12346, 12348, 12350, 12352, 12354, 12356, 12358, 12360, 12362,\n-    12364, 12366, 12368, 12370, 12372, 12374, 12376, 12378, 12380, 12382,\n-    12384, 12386, 12388, 12390, 12392, 12394, 12396, 12398, 12400, 12402,\n-    12404, 12406, 12408, 12410, 12412, 12414, 12416, 12418, 12420, 12422,\n-    12424, 12426, 12428, 12430, 12432, 12434, 12436, 12438, 12440, 12442,\n-    12444, 12446, 12448, 12450, 12452, 12454, 12456, 12458, 12460, 12462,\n-    12464, 12466, 12468, 12470, 0, 0, 12472, 12474, 12476, 12478, 12480,\n-    12482, 12484, 12486, 12488, 12490, 12492, 12494, 12496, 12498, 12500,\n-    12502, 12504, 12506, 12508, 12510, 12512, 12514, 12516, 12518, 12520,\n-    12522, 12524, 12526, 12528, 12530, 12532, 12534, 12536, 12538, 12540,\n-    12542, 12544, 12546, 12548, 12550, 12552, 12554, 12556, 12558, 12560,\n-    12562, 12564, 12566, 12568, 12570, 12572, 12574, 12576, 12578, 0, 12580,\n-    12582, 12584, 12586, 12588, 12590, 12592, 12594, 12596, 12598, 12600,\n-    12602, 12604, 12606, 12608, 12610, 12612, 12614, 12616, 12618, 12620,\n-    12622, 12624, 12626, 12628, 12630, 12632, 0, 12634, 12636, 0, 12638, 0,\n-    0, 12640, 0, 12642, 12644, 12646, 12648, 12650, 12652, 12654, 12656,\n-    12658, 12660, 0, 12662, 12664, 12666, 12668, 0, 12670, 0, 12672, 0, 0, 0,\n-    0, 0, 0, 12674, 0, 0, 0, 0, 12676, 0, 12678, 0, 12680, 0, 12682, 12684,\n-    12686, 0, 12688, 12690, 0, 12692, 0, 0, 12694, 0, 12696, 0, 12698, 0,\n-    12700, 0, 12702, 0, 12704, 12706, 0, 12708, 0, 0, 12710, 12712, 12714,\n-    12716, 0, 12718, 12720, 12722, 12724, 12726, 12728, 12730, 0, 12732,\n-    12734, 12736, 12738, 0, 12740, 12742, 12744, 12746, 0, 12748, 0, 12750,\n-    12752, 12754, 12756, 12758, 12760, 12762, 12764, 12766, 12768, 0, 12770,\n-    12772, 12774, 12776, 12778, 12780, 12782, 12784, 12786, 12788, 12790,\n-    12792, 12794, 12796, 12798, 12800, 12802, 0, 0, 0, 0, 0, 12804, 12806,\n-    12808, 0, 12810, 12812, 12814, 12816, 12818, 0, 12820, 12822, 12824,\n-    12826, 12828, 12830, 12832, 12834, 12836, 12838, 12840, 12842, 12844,\n-    12846, 12848, 12850, 12852, 0, 0, 0, 0, 12854, 12857, 12860, 12863,\n-    12866, 12869, 12872, 12875, 12878, 12881, 12884, 0, 0, 0, 0, 0, 12887,\n-    12891, 12895, 12899, 12903, 12907, 12911, 12915, 12919, 12923, 12927,\n-    12931, 12935, 12939, 12943, 12947, 12951, 12955, 12959, 12963, 12967,\n-    12971, 12975, 12979, 12983, 12987, 12991, 12995, 12997, 12999, 13002, 0,\n-    13005, 13007, 13009, 13011, 13013, 13015, 13017, 13019, 13021, 13023,\n-    13025, 13027, 13029, 13031, 13033, 13035, 13037, 13039, 13041, 13043,\n-    13045, 13047, 13049, 13051, 13053, 13055, 13057, 13060, 13063, 13066,\n-    13069, 13073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13076, 13079, 0, 0, 0, 0,\n-    13082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13085, 13088, 13091,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13093, 13095, 13097, 13099, 13101,\n-    13103, 13105, 13107, 13109, 13111, 13113, 13115, 13117, 13119, 13121,\n-    13123, 13125, 13127, 13129, 13131, 13133, 13135, 13137, 13139, 13141,\n-    13143, 13145, 13147, 13149, 13151, 13153, 13155, 13157, 13159, 13161,\n-    13163, 13165, 13167, 13169, 13171, 13173, 13175, 13177, 13179, 0, 0, 0,\n-    0, 13181, 13185, 13189, 13193, 13197, 13201, 13205, 13209, 13213, 0, 0,\n-    0, 0, 0, 0, 0, 13217, 13219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    13221, 13223, 13225, 13227, 13230, 13232, 13234, 13236, 13238, 13240,\n-    13242, 13244, 13246, 13248, 13251, 13253, 13255, 13257, 13259, 13262,\n-    13264, 13266, 13268, 13271, 13273, 13275, 13277, 13279, 13281, 13284,\n-    13286, 13288, 13290, 13292, 13294, 13296, 13298, 13300, 13302, 13304,\n-    13306, 13308, 13310, 13312, 13314, 13316, 13318, 13320, 13322, 13324,\n-    13326, 13328, 13330, 13333, 13335, 13337, 13339, 13342, 13344, 13346,\n-    13348, 13350, 13352, 13354, 13356, 13358, 13360, 13362, 13364, 13366,\n-    13368, 13370, 13372, 13374, 13376, 13378, 13380, 13382, 13384, 13386,\n-    13388, 13390, 13392, 13394, 13396, 13398, 13400, 13402, 13404, 13406,\n-    13409, 13411, 13413, 13415, 13417, 13419, 13421, 13424, 13427, 13429,\n-    13431, 13433, 13435, 13437, 13439, 13441, 13443, 13445, 13447, 13450,\n-    13452, 13454, 13456, 13458, 13461, 13463, 13465, 13467, 13469, 13471,\n-    13473, 13475, 13477, 13479, 13482, 13484, 13487, 13489, 13491, 13493,\n-    13495, 13497, 13499, 13501, 13503, 13505, 13507, 13509, 13512, 13514,\n-    13516, 13518, 13520, 13522, 13525, 13527, 13530, 13533, 13535, 13537,\n-    13539, 13541, 13544, 13547, 13549, 13551, 13553, 13555, 13557, 13559,\n-    13561, 13563, 13565, 13567, 13569, 13572, 13574, 13576, 13578, 13580,\n-    13582, 13584, 13586, 13588, 13590, 13592, 13594, 13596, 13598, 13600,\n-    13602, 13604, 13606, 13608, 13610, 13613, 13615, 13617, 13619, 13621,\n-    13623, 13626, 13628, 13630, 13632, 13634, 13636, 13638, 13640, 13642,\n-    13644, 13646, 13648, 13651, 13653, 13655, 13657, 13659, 13661, 13663,\n-    13665, 13667, 13669, 13671, 13673, 13675, 13677, 13679, 13681, 13683,\n-    13685, 13687, 13690, 13692, 13694, 13696, 13698, 13700, 13703, 13705,\n-    13707, 13709, 13711, 13713, 13715, 13717, 13719, 13722, 13724, 13726,\n-    13728, 13731, 13733, 13735, 13737, 13739, 13741, 13743, 13746, 13749,\n-    13752, 13754, 13757, 13759, 13761, 13763, 13765, 13767, 13769, 13771,\n-    13773, 13775, 13777, 13780, 13782, 13784, 13786, 13788, 13790, 13792,\n-    13795, 13797, 13799, 13802, 13805, 13807, 13809, 13811, 13813, 13815,\n-    13817, 13819, 13821, 13823, 13826, 13828, 13831, 13833, 13836, 13838,\n-    13840, 13842, 13845, 13847, 13849, 13852, 13855, 13857, 13859, 13861,\n-    13863, 13865, 13867, 13869, 13871, 13873, 13875, 13877, 13879, 13881,\n-    13884, 13886, 13889, 13891, 13894, 13896, 13899, 13902, 13905, 13907,\n-    13909, 13911, 13914, 13917, 13920, 13923, 13925, 13927, 13929, 13931,\n-    13933, 13935, 13937, 13939, 13942, 13944, 13946, 13948, 13950, 13953,\n-    13955, 13958, 13961, 13963, 13965, 13967, 13969, 13971, 13973, 13976,\n-    13979, 13982, 13984, 13986, 13989, 13991, 13993, 13995, 13998, 14000,\n-    14002, 14004, 14006, 14008, 14011, 14013, 14015, 14017, 14019, 14021,\n-    14023, 14026, 14029, 14031, 14034, 14036, 14039, 14041, 14043, 14045,\n-    14048, 14051, 14053, 14056, 14058, 14061, 14063, 14065, 14067, 14069,\n-    14071, 14073, 14076, 14079, 14082, 14085, 14087, 14089, 14091, 14093,\n-    14095, 14097, 14099, 14101, 14103, 14105, 14107, 14109, 14112, 14114,\n-    14116, 14118, 14120, 14122, 14124, 14126, 14128, 14130, 14132, 14134,\n-    14136, 14139, 14142, 14145, 14147, 14149, 14151, 14153, 14156, 14158,\n-    14161, 14163, 14165, 14168, 14171, 14173, 14175, 14177, 14179, 14181,\n-    14183, 14185, 14187, 14189, 14191, 14193, 14195, 14197, 14199, 14201,\n-    14203, 14205, 14207, 14209, 14212, 14214, 14216, 14218, 14220, 14222,\n-    14225, 14228, 14230, 14232, 14234, 14236, 14238, 14240, 14243, 14245,\n-    14247, 14249, 14251, 14254, 14257, 14259, 14261, 14263, 14266, 14268,\n-    14270, 14273, 14276, 14278, 14280, 14282, 14285, 14287, 14289, 14291,\n-    14293, 14295, 14297, 14299, 14302, 14304, 14306, 14308, 14311, 14313,\n-    14315, 14317, 14319, 14322, 14325, 14327, 14329, 14331, 14334, 14336,\n-    14339, 14341, 14343, 14345, 14348, 14350, 14352, 14354, 14356, 14358,\n-    14360, 14362, 14365, 14367, 14369, 14371, 14373, 14375, 14377, 14380,\n-    14382, 14385, 14388, 14391, 14393, 14395, 14397, 14399, 14401, 14403,\n-    14405, 14407, 0, 0,\n-};\n-\n-\/* NFC pairs *\/\n-#define COMP_SHIFT1 2\n-#define COMP_SHIFT2 1\n-static const unsigned short comp_index0[] = {\n-    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4,\n-    5, 6, 7, 0, 0, 0, 0, 8, 0, 9, 10, 0, 0, 0, 11, 12, 13, 14, 0, 0, 0, 0, 0,\n-    15, 16, 17, 0, 0, 0, 0, 18, 19, 20, 21, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0,\n-    23, 24, 25, 26, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 31, 32, 33, 34,\n-    0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 36, 0, 37, 38, 39, 0, 0, 0, 40, 41, 42,\n-    43, 0, 0, 0, 0, 44, 45, 46, 0, 0, 0, 0, 0, 47, 48, 49, 50, 0, 0, 0, 51,\n-    52, 53, 54, 0, 0, 0, 0, 55, 56, 0, 0, 0, 0, 0, 0, 57, 58, 59, 60, 0, 0,\n-    0, 0, 61, 62, 63, 0, 0, 0, 0, 0, 64, 65, 66, 67, 0, 0, 0, 68, 69, 70, 71,\n-    0, 0, 0, 0, 72, 0, 73, 0, 0, 0, 0, 0, 74, 0, 75, 0, 0, 0, 0, 0, 76, 0, 0,\n-    0, 0, 0, 0, 77, 78, 79, 0, 0, 0, 0, 0, 80, 81, 82, 83, 0, 0, 0, 0, 84,\n-    85, 86, 0, 0, 0, 0, 0, 87, 88, 0, 89, 0, 0, 0, 90, 91, 0, 92, 0, 0, 0, 0,\n-    0, 93, 94, 95, 0, 0, 0, 0, 96, 97, 98, 99, 0, 0, 0, 0, 100, 0, 0, 0, 0,\n-    0, 0, 101, 102, 0, 103, 0, 0, 0, 0, 104, 105, 106, 107, 0, 0, 0, 0, 108,\n-    109, 110, 111, 0, 0, 0, 0, 112, 113, 0, 0, 0, 0, 0, 114, 115, 116, 117,\n-    0, 0, 0, 0, 118, 119, 120, 121, 0, 0, 0, 0, 122, 0, 123, 0, 0, 0, 0, 124,\n-    125, 126, 127, 128, 0, 0, 0, 129, 130, 131, 132, 0, 0, 0, 0, 133, 134, 0,\n-    0, 0, 0, 0, 0, 135, 136, 137, 138, 0, 0, 0, 139, 140, 141, 142, 0, 0, 0,\n-    0, 0, 143, 144, 145, 0, 0, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0, 150, 0,\n-    151, 0, 0, 0, 0, 152, 153, 154, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0,\n-    156, 157, 158, 0, 0, 0, 0, 0, 159, 160, 161, 162, 0, 0, 0, 163, 0, 0, 0,\n-    164, 0, 0, 0, 165, 166, 0, 0, 0, 0, 0, 0, 167, 0, 0, 0, 0, 0, 0, 0, 168,\n-    0, 0, 0, 0, 0, 0, 169, 170, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0,\n-    172, 173, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 175, 176, 0, 0, 0, 0,\n-    0, 0, 177, 178, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0,\n-    0, 0, 0, 181, 182, 183, 0, 0, 0, 0, 0, 184, 185, 0, 0, 0, 0, 0, 0, 186,\n-    0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 188, 189, 0, 0, 0, 0, 0, 0,\n-    190, 0, 0, 0, 0, 0, 0, 0, 191, 192, 0, 0, 0, 0, 0, 0, 193, 0, 0, 0, 0, 0,\n-    0, 194, 195, 0, 0, 0, 0, 0, 0, 196, 197, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0,\n-    0, 0, 0, 0, 199, 0, 0, 0, 0, 0, 0, 200, 201, 202, 0, 0, 0, 0, 0, 203,\n-    204, 0, 0, 0, 0, 0, 0, 205, 206, 0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0,\n-    208, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0,\n-    0, 0, 211, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0,\n-    0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0,\n-    0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 219, 0,\n-    0, 0, 0, 0, 0, 220, 221, 222, 0, 0, 0, 0, 0, 223, 224, 225, 0, 0, 0, 0,\n-    0, 226, 227, 228, 0, 0, 0, 0, 0, 229, 230, 231, 0, 0, 0, 0, 0, 0, 232, 0,\n-    0, 0, 0, 0, 0, 233, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 235, 0,\n-    0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 0, 0, 0, 0, 237, 0, 0, 0, 0, 0, 0, 238,\n-    0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0,\n-    241, 0, 0, 0, 0, 0, 0, 242, 0, 243, 244, 0, 0, 0, 0, 245, 246, 0, 0, 0,\n-    0, 0, 247, 0, 248, 0, 249, 0, 0, 0, 250, 251, 252, 0, 0, 0, 0, 0, 253, 0,\n-    254, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 256, 257, 258, 0, 0, 0, 0, 0,\n-    259, 0, 260, 0, 261, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 263, 0,\n-    0, 0, 264, 265, 266, 0, 267, 0, 0, 0, 268, 0, 269, 0, 0, 0, 0, 0, 270, 0,\n-    271, 272, 0, 0, 0, 0, 273, 274, 0, 275, 0, 0, 0, 276, 0, 277, 0, 0, 0, 0,\n-    0, 0, 0, 278, 0, 0, 0, 0, 0, 279, 280, 281, 282, 0, 0, 0, 0, 283, 284, 0,\n-    285, 0, 0, 0, 286, 0, 0, 0, 287, 0, 0, 0, 288, 0, 0, 0, 289, 0, 0, 0, 0,\n-    0, 0, 290, 0, 0, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0,\n-    0, 293, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0,\n-    0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0,\n-    0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0,\n-    0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 305, 0,\n-    0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 308,\n-    0, 0, 0, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 0, 0,\n-    311, 312, 0, 0, 0, 0, 0, 0, 313, 0, 0, 0, 0, 0, 0, 0, 314, 0, 0, 0, 0, 0,\n-    0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 316, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0,\n-    0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0,\n-    0, 0, 0, 0, 0, 321, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0, 0, 0, 0, 0, 323, 0,\n-    0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 326, 0, 0, 0, 0, 0, 0, 0, 327, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0,\n-    0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 331, 0, 0, 0,\n-    0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 334, 0, 0,\n-    0, 0, 0, 0, 0, 335, 0, 0, 0, 0, 0, 0, 0, 336, 337, 0, 0, 0, 0, 0, 0, 0,\n-    338, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0,\n-    0, 341, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 0,\n-    0, 0, 344, 0, 0, 0, 0, 0, 0, 0, 345, 346, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0,\n-    0, 0, 0, 0, 348, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 350, 0,\n-    0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 0, 0, 0, 0, 353,\n-    0, 0, 0, 0, 0, 0, 0, 354, 0, 0, 0, 0, 0, 0, 0, 355, 0, 0, 0, 0, 0, 0, 0,\n-    356, 0, 0, 0, 0, 0, 0, 357, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 0, 0, 0, 0,\n-    0, 359, 0, 0, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 361, 0, 362, 0, 0, 0,\n-    0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 365, 0,\n-    0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 368,\n-    0, 0, 0, 0, 0, 0, 369, 370, 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0,\n-    372, 0, 0, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 0,\n-    0, 375, 0, 0, 376, 0, 0, 0, 0, 377, 0, 0, 378, 0, 0, 0, 0, 0, 0, 0, 379,\n-    0, 0, 0, 0, 0, 0, 0, 380, 0, 0, 0, 0, 0, 0, 381, 0, 0, 0, 0, 0, 0, 0,\n-    382, 0, 0, 0, 0, 0, 0, 0, 383, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 385, 0,\n-    0, 386, 0, 0, 0, 0, 387, 0, 0, 388, 0, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 0,\n-    0, 0, 0, 390, 0, 0, 0, 0, 0, 0, 391, 0, 0, 0, 0, 0, 0, 0, 392, 0, 0, 0,\n-    0, 0, 0, 0, 393, 0, 0, 0, 0, 0, 0, 0, 394, 0, 0, 0, 395, 0, 0, 0, 0, 0,\n-    0, 0, 396, 0, 0, 0, 0, 0, 0, 397, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0,\n-    0, 0, 0, 399, 0, 0, 400, 0, 0, 0, 0, 401, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0,\n-    403, 0, 0, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 0,\n-    0, 406, 0, 0, 0, 0, 0, 0, 0, 407, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 409,\n-    0, 0, 410, 0, 0, 0, 0, 411, 0, 0, 412, 0, 0, 0, 0, 0, 0, 0, 413, 0, 0, 0,\n-    0, 0, 0, 0, 414, 0, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 0, 0, 416, 0, 0,\n-    0, 0, 0, 0, 0, 417, 0, 0, 0, 0, 0, 0, 0, 418, 0, 0, 0, 419, 0, 0, 420, 0,\n-    0, 0, 0, 421, 0, 0, 422, 0, 0, 0, 423, 0, 0, 0, 424, 0, 0, 0, 425, 0, 0,\n-    0, 426, 0, 0, 0, 427, 0, 0, 0, 0, 0, 0, 0, 428, 0, 0, 0, 0, 0, 0, 429, 0,\n-    0, 0, 0, 0, 0, 0, 430, 0, 0, 0, 0, 0, 0, 0, 431, 0, 0, 432, 0, 0, 0, 0,\n-    433, 0, 0, 434, 0, 0, 0, 435, 0, 0, 0, 436, 0, 0, 0, 437, 0, 0, 0, 438,\n-    0, 0, 0, 439, 0, 0, 440, 0, 0, 0, 0, 0, 0, 0, 441, 0, 0, 0, 0, 0, 0, 0,\n-    442, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0, 0, 0, 0, 0, 444, 0, 0, 0, 0, 0, 0,\n-    0, 445, 0, 0, 0, 0, 0, 0, 0, 446, 0, 0, 0, 447, 0, 0, 0, 448, 0, 0, 0,\n-    449, 0, 0, 450, 0, 0, 0, 0, 0, 0, 0, 451, 0, 0, 0, 0, 0, 0, 0, 452, 0, 0,\n-    0, 0, 0, 0, 0, 453, 0, 0, 0, 0, 0, 0, 454, 0, 0, 0, 0, 0, 0, 0, 455, 0,\n-    0, 0, 0, 0, 0, 0, 456, 0, 0, 0, 0, 0, 0, 0, 457, 0, 0, 0, 0, 0, 0, 458,\n-    0, 0, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0, 0, 0, 0, 460, 0, 0, 0, 461, 0, 0,\n-    0, 462, 0, 0, 0, 0, 0, 0, 463, 0, 0, 0, 0, 0, 0, 0, 464, 0, 0, 0, 465, 0,\n-    0, 0, 466, 0, 0, 0, 0, 0, 0, 467, 0, 0, 0, 0, 0, 0, 0, 468, 0, 0, 0, 0,\n-    0, 0, 0, 469, 0, 0, 0, 0, 0, 0, 0, 470, 0, 0, 0, 0, 0, 0, 471, 0, 0, 0,\n-    0, 0, 0, 0, 472, 0, 0, 0, 0, 0, 0, 0, 473, 0, 0, 0, 0, 0, 0, 0, 474, 0,\n-    0, 0, 0, 0, 0, 475, 0, 0, 0, 0, 0, 0, 0, 476, 0, 0, 0, 0, 0, 0, 0, 477,\n-    0, 0, 0, 0, 0, 0, 0, 478, 0, 0, 0, 0, 0, 0, 479, 0, 0, 0, 0, 0, 0, 0,\n-    480, 0, 0, 0, 0, 0, 0, 0, 481, 0, 0, 0, 0, 0, 0, 0, 482, 0, 0, 0, 0, 0,\n-    0, 483, 0, 0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 485, 0, 0, 0, 0,\n-    0, 0, 0, 486, 0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 0, 0, 0, 488, 0, 0, 0,\n-    0, 0, 0, 0, 489, 0, 0, 0, 0, 0, 0, 0, 490, 0, 0, 0, 0, 0, 0, 491, 0, 0,\n-    0, 0, 0, 0, 0, 492, 0, 0, 0, 0, 0, 0, 0, 493, 0, 0, 0, 0, 0, 0, 0, 494,\n-    0, 0, 0, 0, 0, 0, 495, 0, 0, 0, 0, 0, 0, 0, 496, 0, 0, 0, 0, 0, 0, 0,\n-    497, 0, 0, 0, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0, 0, 499, 0, 0, 0, 0, 0, 0,\n-    0, 500, 0, 0, 0, 0, 0, 0, 0, 501, 0, 0, 0, 0, 0, 0, 0, 502, 0, 0, 0, 0,\n-    0, 0, 503, 0, 0, 0, 0, 0, 0, 0, 504, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 0,\n-    0, 0, 0, 0, 506, 0, 0, 0, 0, 0, 0, 507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    508, 0, 0, 0, 0, 0, 0, 0, 509, 0, 0, 0, 0, 0, 0, 0, 510, 0, 0, 0, 0, 0,\n-    0, 0, 511, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 0, 0, 0, 0, 513, 0, 0, 0, 0,\n-    0, 0, 0, 514, 0, 0, 0, 0, 0, 0, 0, 515, 0, 0, 0, 0, 0, 0, 516, 0, 0, 0,\n-    0, 0, 0, 0, 517, 0, 0, 0, 0, 0, 0, 0, 518, 0, 0, 0, 0, 0, 0, 0, 519, 0,\n-    0, 0, 0, 0, 0, 520, 0, 0, 0, 0, 0, 0, 0, 521, 0, 0, 0, 0, 0, 0, 0, 522,\n-    0, 0, 0, 0, 0, 0, 0, 523, 0, 0, 0, 0, 0, 0, 524, 0, 0, 0, 0, 0, 0, 0,\n-    525, 0, 0, 0, 0, 0, 0, 0, 526, 0, 0, 0, 0, 0, 0, 0, 527, 0, 0, 0, 0, 0,\n-    0, 528, 0, 0, 0, 0, 0, 0, 0, 529, 0, 0, 0, 0, 0, 0, 0, 530, 0, 0, 0, 0,\n-    0, 0, 0, 531, 0, 0, 0, 0, 0, 0, 532, 0, 0, 0, 0, 0, 0, 0, 533, 0, 0, 0,\n-    0, 0, 0, 0, 534, 0, 0, 0, 0, 0, 0, 0, 535, 0, 0, 0, 0, 0, 0, 536, 0, 0,\n-    0, 0, 0, 0, 0, 537, 0, 0, 0, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0, 0, 0, 539,\n-    0, 0, 0, 0, 0, 0, 540, 0, 0, 0, 0, 0, 0, 0, 541, 0, 0, 0, 0, 0, 0, 0,\n-    542, 0, 0, 0, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 544, 0, 0, 0, 0, 0, 0,\n-    0, 545, 0, 0, 0, 0, 0, 0, 0, 546, 0, 0, 0, 0, 0, 0, 0, 547, 0, 0, 0, 0,\n-    0, 0, 548, 0, 0, 0, 0, 0, 0, 0, 549, 0, 0, 0, 0, 0, 0, 0, 550, 0, 0, 0,\n-    0, 0, 0, 0, 551, 0, 0, 0, 0, 0, 0, 552, 0, 0, 0, 0, 0, 0, 0, 553, 0, 0,\n-    0, 0, 0, 0, 0, 554, 0, 0, 0, 0, 0, 0, 0, 555, 0, 0, 0, 0, 0, 0, 0, 556,\n-    0, 0, 0, 0, 0, 0, 557, 0, 0, 0, 0, 0, 0, 0, 558, 0, 0, 0, 0, 0, 0, 0,\n-    559, 0, 0, 0, 0, 0, 0, 0, 560, 0, 0, 0, 0, 0, 0, 0, 561, 0, 0, 0, 0, 0,\n-    0, 0, 562, 0, 0, 0, 0, 0, 0, 0, 563, 0, 0, 0, 0, 0, 0, 564,\n-};\n-\n-static const unsigned short comp_index1[] = {\n-    0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 4, 5, 6, 7, 8, 9, 10,\n-    0, 11, 12, 0, 13, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0,\n-    0, 17, 18, 0, 19, 0, 20, 0, 0, 0, 0, 21, 0, 0, 0, 22, 0, 23, 0, 0, 24, 0,\n-    25, 26, 0, 27, 0, 28, 29, 30, 31, 32, 33, 34, 0, 35, 0, 36, 37, 38, 0, 0,\n-    0, 0, 0, 39, 0, 0, 0, 40, 41, 42, 43, 0, 44, 0, 0, 0, 0, 45, 0, 0, 0, 0,\n-    0, 46, 0, 47, 0, 48, 0, 0, 49, 0, 50, 0, 51, 0, 0, 52, 53, 54, 55, 56,\n-    57, 58, 0, 59, 0, 0, 60, 61, 0, 0, 0, 62, 0, 0, 0, 0, 0, 63, 64, 0, 0,\n-    65, 0, 66, 0, 0, 67, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 69, 0, 0, 70, 0, 71,\n-    72, 0, 73, 0, 74, 0, 0, 75, 0, 0, 0, 0, 76, 0, 0, 77, 78, 0, 79, 0, 80,\n-    0, 0, 81, 0, 82, 83, 0, 84, 0, 0, 0, 0, 0, 85, 86, 87, 88, 89, 90, 91, 0,\n-    92, 0, 0, 93, 0, 0, 0, 94, 0, 0, 95, 0, 0, 0, 96, 0, 0, 97, 0, 98, 99, 0,\n-    100, 0, 101, 0, 0, 102, 0, 103, 104, 0, 105, 0, 106, 0, 0, 107, 0, 108,\n-    0, 0, 0, 109, 0, 110, 0, 0, 111, 0, 112, 113, 0, 114, 0, 0, 0, 0, 0, 115,\n-    116, 117, 118, 119, 120, 121, 0, 122, 123, 0, 124, 125, 0, 0, 0, 126, 0,\n-    0, 127, 0, 0, 128, 129, 0, 130, 131, 0, 0, 0, 0, 0, 132, 0, 0, 0, 133,\n-    134, 135, 136, 137, 0, 0, 0, 138, 0, 0, 139, 140, 0, 141, 0, 142, 0, 0,\n-    143, 0, 0, 0, 0, 144, 0, 145, 146, 147, 148, 149, 150, 151, 0, 152, 153,\n-    0, 154, 0, 0, 155, 0, 0, 0, 0, 156, 157, 0, 0, 0, 0, 0, 158, 159, 0, 160,\n-    0, 161, 162, 0, 0, 0, 163, 0, 164, 0, 0, 165, 0, 166, 167, 0, 168, 0,\n-    169, 170, 171, 172, 173, 174, 175, 0, 176, 0, 177, 178, 179, 0, 0, 0, 0,\n-    0, 180, 0, 0, 0, 181, 182, 183, 184, 0, 185, 186, 0, 0, 0, 0, 0, 187, 0,\n-    188, 0, 189, 0, 0, 190, 0, 191, 0, 192, 193, 0, 194, 195, 196, 197, 198,\n-    199, 200, 0, 201, 0, 0, 202, 203, 0, 0, 0, 204, 0, 0, 0, 205, 0, 0, 0, 0,\n-    0, 206, 0, 0, 0, 0, 207, 0, 0, 208, 0, 209, 0, 0, 210, 0, 211, 0, 0, 0,\n-    0, 212, 0, 0, 213, 0, 214, 215, 0, 216, 0, 217, 0, 0, 218, 219, 0, 0, 0,\n-    0, 0, 0, 220, 221, 0, 222, 0, 223, 0, 0, 224, 0, 225, 226, 0, 227, 0, 0,\n-    0, 0, 0, 228, 229, 230, 231, 232, 233, 234, 0, 235, 0, 0, 236, 0, 0, 0,\n-    237, 0, 0, 238, 0, 0, 0, 239, 0, 0, 240, 0, 241, 242, 0, 243, 0, 244, 0,\n-    0, 245, 0, 0, 0, 0, 0, 246, 247, 0, 248, 0, 249, 0, 0, 250, 0, 251, 0, 0,\n-    0, 252, 0, 253, 0, 0, 254, 0, 255, 256, 0, 257, 0, 258, 259, 260, 261,\n-    262, 263, 264, 0, 265, 266, 0, 267, 268, 0, 0, 0, 269, 0, 0, 270, 0, 0,\n-    0, 0, 0, 0, 271, 272, 0, 273, 274, 0, 0, 0, 275, 0, 276, 0, 0, 0, 277,\n-    278, 279, 280, 281, 0, 0, 0, 282, 0, 0, 283, 284, 0, 285, 0, 286, 0, 0,\n-    287, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 289, 0, 290, 0, 0, 0, 0, 291, 292,\n-    0, 0, 293, 0, 0, 0, 0, 294, 295, 0, 0, 0, 0, 0, 0, 296, 0, 297, 0, 0, 0,\n-    0, 298, 0, 0, 299, 300, 0, 0, 301, 0, 0, 302, 0, 0, 0, 0, 0, 0, 303, 304,\n-    0, 0, 305, 0, 0, 306, 0, 307, 308, 0, 0, 0, 0, 0, 309, 310, 0, 0, 0, 0,\n-    0, 0, 311, 0, 312, 0, 0, 313, 0, 0, 0, 0, 0, 314, 315, 0, 0, 316, 0, 0,\n-    0, 0, 317, 318, 0, 0, 0, 0, 0, 0, 319, 0, 320, 0, 0, 0, 0, 321, 0, 0,\n-    322, 323, 0, 0, 324, 0, 0, 325, 0, 0, 0, 0, 0, 0, 326, 327, 0, 0, 328, 0,\n-    0, 329, 0, 330, 331, 0, 0, 0, 0, 0, 332, 333, 0, 0, 0, 0, 0, 0, 334, 0,\n-    335, 0, 0, 336, 0, 0, 0, 0, 0, 337, 338, 0, 0, 339, 0, 0, 340, 341, 0, 0,\n-    342, 0, 0, 343, 0, 0, 0, 0, 0, 0, 344, 0, 0, 345, 0, 0, 346, 0, 0, 0, 0,\n-    0, 347, 0, 0, 348, 0, 0, 349, 0, 0, 350, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0,\n-    352, 0, 353, 0, 0, 354, 0, 0, 0, 0, 0, 0, 355, 0, 0, 0, 356, 357, 0, 0,\n-    358, 0, 0, 0, 359, 0, 0, 360, 361, 0, 0, 362, 0, 0, 0, 363, 0, 0, 364,\n-    365, 0, 0, 366, 0, 0, 0, 367, 0, 0, 368, 369, 0, 0, 370, 0, 0, 0, 371, 0,\n-    0, 0, 372, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 374, 0, 0, 375, 0, 0, 376, 0,\n-    0, 377, 0, 0, 0, 0, 0, 0, 378, 0, 0, 379, 0, 0, 380, 0, 0, 0, 0, 0, 381,\n-    0, 382, 0, 383, 384, 0, 0, 0, 0, 0, 0, 385, 386, 0, 0, 0, 0, 0, 0, 387,\n-    0, 0, 0, 388, 0, 0, 389, 0, 0, 390, 0, 0, 0, 0, 391, 0, 392, 393, 0, 0,\n-    0, 394, 0, 0, 0, 395, 0, 0, 396, 0, 0, 0, 0, 0, 0, 397, 0, 0, 0, 398, 0,\n-    399, 400, 0, 0, 0, 401, 0, 0, 0, 402, 0, 0, 403, 0, 0, 404, 0, 0, 0, 0,\n-    0, 0, 405, 0, 0, 406, 0, 0, 0, 0, 407, 0, 408, 0, 0, 0, 0, 409, 0, 0,\n-    410, 0, 0, 0, 0, 411, 0, 0, 412, 0, 0, 0, 413, 0, 0, 414, 0, 0, 0, 0, 0,\n-    0, 415, 416, 0, 417, 418, 0, 0, 0, 419, 0, 0, 420, 0, 0, 0, 0, 421, 0, 0,\n-    422, 0, 0, 423, 0, 0, 0, 424, 0, 425, 426, 0, 0, 0, 427, 0, 0, 0, 0, 0,\n-    0, 428, 429, 0, 0, 0, 0, 0, 0, 430, 0, 0, 431, 0, 0, 0, 0, 432, 0, 433,\n-    0, 0, 0, 0, 434, 0, 435, 0, 0, 0, 0, 0, 0, 436, 437, 0, 0, 438, 0, 0,\n-    439, 0, 440, 441, 0, 0, 0, 442, 0, 0, 443, 0, 444, 445, 0, 446, 447, 0,\n-    0, 448, 0, 0, 0, 449, 0, 450, 451, 0, 0, 0, 452, 0, 0, 0, 0, 0, 453, 0,\n-    454, 455, 0, 456, 457, 0, 0, 0, 0, 0, 0, 458, 0, 0, 459, 0, 460, 461, 0,\n-    0, 0, 462, 0, 0, 463, 0, 464, 465, 0, 466, 467, 0, 0, 468, 0, 0, 0, 469,\n-    0, 470, 471, 0, 0, 0, 472, 0, 0, 0, 0, 0, 473, 0, 474, 475, 0, 476, 477,\n-    0, 0, 0, 0, 0, 0, 478, 0, 0, 479, 0, 0, 480, 0, 0, 0, 0, 0, 481, 0, 0,\n-    482, 0, 0, 0, 483, 0, 0, 484, 0, 0, 485, 0, 0, 0, 0, 0, 0, 486, 0, 0,\n-    487, 488, 0, 489, 0, 0, 490, 0, 0, 0, 0, 0, 0, 491, 0, 0, 492, 0, 0, 493,\n-    0, 0, 0, 494, 0, 0, 495, 0, 0, 0, 0, 0, 0, 496, 0, 0, 0, 497, 0, 0, 0,\n-    498, 499, 0, 0, 0, 500, 0, 0, 0, 0, 0, 501, 502, 0, 503, 0, 0, 0, 504, 0,\n-    0, 0, 505, 0, 0, 506, 507, 0, 0, 0, 0, 0, 508, 0, 0, 0, 509, 510, 0, 0,\n-    0, 0, 0, 511, 0, 0, 0, 512, 513, 0, 514, 0, 0, 0, 0, 515, 0, 0, 516, 0,\n-    0, 517, 0, 0, 0, 0, 0, 0, 518, 0, 0, 519, 0, 0, 520, 0, 0, 521, 0, 0, 0,\n-    0, 0, 0, 522, 0, 0, 523, 0, 0, 524, 0, 0, 525, 0, 0, 0, 0, 0, 0, 526, 0,\n-    0, 0, 527, 0, 0, 528, 0, 0, 529, 0, 0, 530, 0, 0, 0, 531, 0, 0, 0, 0, 0,\n-    0, 532, 533, 534, 0, 0, 0, 0, 0, 535, 536, 0, 0, 0, 0, 0, 537, 0, 0, 538,\n-    0, 0, 539, 0, 0, 0, 0, 0, 0, 540, 0, 541, 0, 0, 0, 0, 0, 542, 543, 0, 0,\n-    0, 0, 0, 544, 0, 0, 545, 0, 0, 546, 0, 0, 0, 0, 0, 0, 547, 0, 0, 548, 0,\n-    0, 549, 0, 0, 550, 0, 0, 0, 0, 551, 0, 0, 0, 0, 0, 552, 553, 0, 0, 0, 0,\n-    0, 554, 0, 0, 555, 0, 0, 556, 0, 0, 0, 0, 0, 0, 557, 0, 0, 558, 0, 0,\n-    559, 0, 0, 560, 0, 0, 0, 0, 561, 0, 0, 562, 0, 0, 0, 0, 0, 0, 563, 0, 0,\n-    564, 0, 0, 565, 0, 0, 0, 0, 0, 566, 567, 0, 0, 0, 0, 0, 568, 0, 0, 569,\n-    0, 0, 570, 0, 0, 0, 0, 0, 0, 571, 0, 0, 572, 0, 0, 573, 0, 0, 574, 0, 0,\n-    0, 0, 575, 0, 0, 0, 0, 0, 576, 577, 0, 0, 0, 0, 0, 578, 0, 0, 579, 0, 0,\n-    580, 0, 0, 0, 0, 0, 0, 581, 0, 0, 582, 0, 0, 583, 0, 0, 584, 0, 0, 0, 0,\n-    585, 0, 0, 0, 0, 0, 586, 587, 0, 0, 0, 0, 0, 588, 0, 0, 0, 0, 589, 0,\n-    590, 0, 0, 0, 0, 591, 0, 592, 0, 0, 0, 0, 593, 0, 0, 594, 0, 0, 0, 0, 0,\n-    0, 595, 0, 0, 596, 0, 0, 597, 0, 0, 0, 0, 0, 598, 599, 0, 0, 0, 0, 0,\n-    600, 0, 0, 0, 0, 601, 0, 602, 0, 0, 0, 0, 603, 0, 604, 0, 0, 0, 0, 605,\n-    0, 0, 0, 0, 0, 606, 0, 0, 607, 0, 0, 608, 0, 0, 609, 0, 0, 0, 0, 0, 0,\n-    610, 0, 0, 611, 0, 0, 612, 0, 0, 0, 0, 613, 0, 614, 0, 0, 0, 0, 615, 0,\n-    0, 0, 0, 0, 616, 0, 0, 617, 0, 0, 618, 0, 0, 619, 0, 0, 0, 0, 0, 0, 620,\n-    0, 0, 621, 0, 0, 622, 0, 0, 623, 0, 0, 0, 0, 0, 0, 624, 0, 0, 625, 0, 0,\n-    626, 0, 0, 0, 0, 627, 0, 628, 0, 0, 0, 0, 0, 0, 629, 0, 0, 630, 0, 0, 0,\n-    0, 631, 0, 632, 0, 0, 0, 0, 0, 633, 0, 0, 634, 0, 0, 635, 0, 0, 636, 0,\n-    0, 0, 0, 0, 0, 637, 0, 0, 638, 0, 0, 639, 0, 0, 640, 0, 0, 0, 0, 0, 0,\n-    641, 0, 0, 642, 0, 0, 643, 0, 0, 644, 0, 0, 0, 0, 0, 0, 645, 0, 0, 646,\n-    0, 0, 647, 0, 0, 648, 0, 0, 0, 0, 0, 0, 649, 0, 0, 650, 0, 0, 651, 0, 0,\n-    652, 0, 0, 0, 0, 0, 0, 653, 0, 0, 654, 0, 0, 655, 0, 0, 656, 0, 0, 0, 0,\n-    0, 0, 657, 0, 0, 658, 0, 0, 659, 0, 0, 660, 0, 0, 0, 0, 0, 0, 661, 0, 0,\n-    662, 0, 0, 663, 0, 0, 664, 0, 0, 0, 0, 0, 0, 665, 0, 0, 666, 0, 0, 667,\n-    0, 0, 668, 0, 0, 0, 0, 0, 0, 669, 0, 0, 670, 0, 0, 671, 0, 0, 672, 0, 0,\n-    0, 0, 0, 0, 673, 0, 0, 0, 674, 0, 0, 675, 0, 0, 676, 0, 0, 677, 0, 0, 0,\n-    0, 0, 0, 678, 0, 0, 679, 0, 0, 680, 0, 0, 681, 0, 0, 0, 0, 0, 0, 682, 0,\n-    0, 683, 0, 0, 684, 0, 0, 685, 0, 0, 0, 0, 0, 0, 686, 0, 0, 687, 0, 0,\n-    688, 0, 0, 689, 0, 0, 0, 0, 0, 0, 690, 0, 0, 691, 0, 0, 692, 0, 0, 693,\n-    0, 0, 0, 0, 0, 0, 694, 0, 0, 695, 0, 0, 696, 0, 0, 697, 0, 0, 0, 0, 0, 0,\n-    698, 0, 0, 699, 0, 0, 700, 0, 0, 701, 0, 0, 0, 0, 0, 0, 702, 0, 0, 703,\n-    0, 0, 704, 0, 0, 705, 0, 0, 0, 0, 0, 0, 706, 0, 0, 707, 0, 0, 708, 0, 0,\n-    709, 0, 0, 0, 0, 0, 0, 710, 0, 0, 711, 0, 0, 712, 0, 0, 713, 0, 0, 0, 0,\n-    0, 0, 714, 0, 0, 715, 0, 0, 716, 0, 0, 717, 0, 0, 0, 0, 0, 0, 718, 0, 0,\n-    719, 0, 0, 720, 0, 0, 721, 0, 0, 0, 722, 0, 0, 0, 0, 0, 0, 723, 0, 0,\n-    724, 0, 0, 725, 0, 0, 726, 0, 0, 0, 727, 0, 0, 0, 728, 729, 0, 0, 730, 0,\n-    0, 0, 0, 0, 0, 731,\n-};\n-\n-static const unsigned int comp_data[] = {\n-    0, 0, 0, 8814, 0, 8800, 0, 8815, 192, 193, 194, 195, 256, 258, 550, 196,\n-    7842, 197, 0, 461, 512, 514, 0, 7840, 0, 7680, 260, 0, 7682, 0, 0, 7684,\n-    7686, 0, 0, 262, 264, 0, 266, 0, 0, 268, 0, 199, 7690, 0, 0, 270, 0,\n-    7692, 0, 7696, 0, 7698, 7694, 0, 200, 201, 202, 7868, 274, 276, 278, 203,\n-    7866, 0, 0, 282, 516, 518, 0, 7864, 0, 552, 280, 7704, 0, 7706, 7710, 0,\n-    0, 500, 284, 0, 7712, 286, 288, 0, 0, 486, 0, 290, 292, 0, 7714, 7718, 0,\n-    542, 0, 7716, 0, 7720, 7722, 0, 204, 205, 206, 296, 298, 300, 304, 207,\n-    7880, 0, 0, 463, 520, 522, 0, 7882, 302, 0, 0, 7724, 308, 0, 0, 7728, 0,\n-    488, 0, 7730, 0, 310, 7732, 0, 0, 313, 0, 317, 0, 7734, 0, 315, 0, 7740,\n-    7738, 0, 0, 7742, 7744, 0, 0, 7746, 504, 323, 0, 209, 7748, 0, 0, 327, 0,\n-    7750, 0, 325, 0, 7754, 7752, 0, 210, 211, 212, 213, 332, 334, 558, 214,\n-    7886, 0, 336, 465, 524, 526, 416, 7884, 490, 0, 0, 7764, 7766, 0, 0, 340,\n-    7768, 0, 0, 344, 528, 530, 0, 7770, 0, 342, 7774, 0, 0, 346, 348, 0,\n-    7776, 0, 0, 352, 0, 7778, 536, 350, 7786, 0, 0, 356, 0, 7788, 538, 354,\n-    0, 7792, 7790, 0, 217, 218, 219, 360, 362, 364, 0, 220, 7910, 366, 368,\n-    467, 532, 534, 431, 7908, 7794, 0, 370, 7798, 0, 7796, 0, 7804, 0, 7806,\n-    7808, 7810, 372, 0, 7814, 7812, 0, 7816, 7818, 7820, 7922, 221, 374,\n-    7928, 562, 0, 7822, 376, 7926, 0, 0, 7924, 0, 377, 7824, 0, 379, 0, 0,\n-    381, 0, 7826, 7828, 0, 224, 225, 226, 227, 257, 259, 551, 228, 7843, 229,\n-    0, 462, 513, 515, 0, 7841, 0, 7681, 261, 0, 7683, 0, 0, 7685, 7687, 0, 0,\n-    263, 265, 0, 267, 0, 0, 269, 0, 231, 7691, 0, 0, 271, 0, 7693, 0, 7697,\n-    0, 7699, 7695, 0, 232, 233, 234, 7869, 275, 277, 279, 235, 7867, 0, 0,\n-    283, 517, 519, 0, 7865, 0, 553, 281, 7705, 0, 7707, 7711, 0, 0, 501, 285,\n-    0, 7713, 287, 289, 0, 0, 487, 0, 291, 293, 0, 7715, 7719, 0, 543, 0,\n-    7717, 0, 7721, 7723, 0, 7830, 0, 236, 237, 238, 297, 299, 301, 0, 239,\n-    7881, 0, 0, 464, 521, 523, 0, 7883, 303, 0, 0, 7725, 309, 0, 0, 496, 0,\n-    7729, 0, 489, 0, 7731, 0, 311, 7733, 0, 0, 314, 0, 318, 0, 7735, 0, 316,\n-    0, 7741, 7739, 0, 0, 7743, 7745, 0, 0, 7747, 505, 324, 0, 241, 7749, 0,\n-    0, 328, 0, 7751, 0, 326, 0, 7755, 7753, 0, 242, 243, 244, 245, 333, 335,\n-    559, 246, 7887, 0, 337, 466, 525, 527, 417, 7885, 491, 0, 0, 7765, 7767,\n-    0, 0, 341, 7769, 0, 0, 345, 529, 531, 0, 7771, 0, 343, 7775, 0, 0, 347,\n-    349, 0, 7777, 0, 0, 353, 0, 7779, 537, 351, 7787, 7831, 0, 357, 0, 7789,\n-    539, 355, 0, 7793, 7791, 0, 249, 250, 251, 361, 363, 365, 0, 252, 7911,\n-    367, 369, 468, 533, 535, 432, 7909, 7795, 0, 371, 7799, 0, 7797, 0, 7805,\n-    0, 7807, 7809, 7811, 373, 0, 7815, 7813, 0, 7832, 0, 7817, 7819, 7821,\n-    7923, 253, 375, 7929, 563, 0, 7823, 255, 7927, 7833, 0, 7925, 0, 378,\n-    7825, 0, 380, 0, 0, 382, 0, 7827, 7829, 0, 8173, 901, 8129, 0, 7846,\n-    7844, 0, 7850, 7848, 0, 478, 0, 0, 506, 0, 508, 482, 0, 0, 7688, 7872,\n-    7870, 0, 7876, 7874, 0, 0, 7726, 7890, 7888, 0, 7894, 7892, 0, 0, 7756,\n-    556, 0, 0, 7758, 554, 0, 0, 510, 475, 471, 469, 0, 0, 473, 7847, 7845, 0,\n-    7851, 7849, 0, 479, 0, 0, 507, 0, 509, 483, 0, 0, 7689, 7873, 7871, 0,\n-    7877, 7875, 0, 0, 7727, 7891, 7889, 0, 7895, 7893, 0, 0, 7757, 557, 0, 0,\n-    7759, 555, 0, 0, 511, 476, 472, 470, 0, 0, 474, 7856, 7854, 0, 7860,\n-    7858, 0, 7857, 7855, 0, 7861, 7859, 0, 7700, 7702, 7701, 7703, 7760,\n-    7762, 7761, 7763, 7780, 0, 7781, 0, 7782, 0, 7783, 0, 0, 7800, 0, 7801,\n-    0, 7802, 0, 7803, 7835, 0, 7900, 7898, 0, 7904, 7902, 0, 0, 7906, 7901,\n-    7899, 0, 7905, 7903, 0, 0, 7907, 7914, 7912, 0, 7918, 7916, 0, 0, 7920,\n-    7915, 7913, 0, 7919, 7917, 0, 0, 7921, 0, 494, 492, 0, 493, 0, 480, 0,\n-    481, 0, 0, 7708, 0, 7709, 560, 0, 561, 0, 0, 495, 8122, 902, 8121, 8120,\n-    7944, 7945, 0, 8124, 8136, 904, 7960, 7961, 8138, 905, 7976, 7977, 0,\n-    8140, 8154, 906, 8153, 8152, 0, 938, 7992, 7993, 8184, 908, 8008, 8009,\n-    0, 8172, 8170, 910, 8169, 8168, 0, 939, 0, 8025, 8186, 911, 8040, 8041,\n-    0, 8188, 0, 8116, 0, 8132, 8048, 940, 8113, 8112, 7936, 7937, 8118, 8115,\n-    8050, 941, 7952, 7953, 8052, 942, 7968, 7969, 8134, 8131, 8054, 943,\n-    8145, 8144, 0, 970, 7984, 7985, 8150, 0, 8056, 972, 8000, 8001, 8164,\n-    8165, 8058, 973, 8161, 8160, 0, 971, 8016, 8017, 8166, 0, 8060, 974,\n-    8032, 8033, 8182, 8179, 8146, 912, 8151, 0, 8162, 944, 8167, 0, 0, 8180,\n-    0, 979, 0, 980, 0, 1031, 0, 1232, 0, 1234, 0, 1027, 1024, 0, 0, 1238, 0,\n-    1025, 0, 1217, 0, 1244, 0, 1246, 1037, 0, 1250, 1049, 0, 1252, 0, 1036,\n-    0, 1254, 1262, 1038, 0, 1264, 1266, 0, 0, 1268, 0, 1272, 0, 1260, 0,\n-    1233, 0, 1235, 0, 1107, 1104, 0, 0, 1239, 0, 1105, 0, 1218, 0, 1245, 0,\n-    1247, 1117, 0, 1251, 1081, 0, 1253, 0, 1116, 0, 1255, 1263, 1118, 0,\n-    1265, 1267, 0, 0, 1269, 0, 1273, 0, 1261, 0, 1111, 1142, 0, 1143, 0, 0,\n-    1242, 0, 1243, 0, 1258, 0, 1259, 1570, 1571, 1573, 0, 0, 1572, 0, 1574,\n-    0, 1730, 0, 1747, 0, 1728, 0, 2345, 0, 2353, 0, 2356, 2507, 2508, 2891,\n-    2888, 2892, 0, 2964, 0, 0, 3018, 3020, 0, 0, 3019, 0, 3144, 0, 3264,\n-    3274, 3271, 3272, 0, 0, 3275, 0, 3402, 3404, 0, 0, 3403, 0, 3546, 3548,\n-    3550, 0, 3549, 4134, 0, 0, 6918, 0, 6920, 0, 6922, 0, 6924, 0, 6926, 0,\n-    6930, 0, 6971, 0, 6973, 0, 6976, 0, 6977, 0, 6979, 7736, 0, 7737, 0,\n-    7772, 0, 7773, 0, 7784, 0, 7785, 0, 7852, 0, 0, 7862, 7853, 0, 0, 7863,\n-    7878, 0, 7879, 0, 7896, 0, 7897, 0, 7938, 7940, 7942, 8064, 7939, 7941,\n-    7943, 8065, 0, 8066, 0, 8067, 0, 8068, 0, 8069, 0, 8070, 0, 8071, 7946,\n-    7948, 7950, 8072, 7947, 7949, 7951, 8073, 0, 8074, 0, 8075, 0, 8076, 0,\n-    8077, 0, 8078, 0, 8079, 7954, 7956, 7955, 7957, 7962, 7964, 7963, 7965,\n-    7970, 7972, 7974, 8080, 7971, 7973, 7975, 8081, 0, 8082, 0, 8083, 0,\n-    8084, 0, 8085, 0, 8086, 0, 8087, 7978, 7980, 7982, 8088, 7979, 7981,\n-    7983, 8089, 0, 8090, 0, 8091, 0, 8092, 0, 8093, 0, 8094, 0, 8095, 7986,\n-    7988, 7990, 0, 7987, 7989, 7991, 0, 7994, 7996, 7998, 0, 7995, 7997,\n-    7999, 0, 8002, 8004, 8003, 8005, 8010, 8012, 8011, 8013, 8018, 8020,\n-    8022, 0, 8019, 8021, 8023, 0, 8027, 8029, 8031, 0, 8034, 8036, 8038,\n-    8096, 8035, 8037, 8039, 8097, 0, 8098, 0, 8099, 0, 8100, 0, 8101, 0,\n-    8102, 0, 8103, 8042, 8044, 8046, 8104, 8043, 8045, 8047, 8105, 0, 8106,\n-    0, 8107, 0, 8108, 0, 8109, 0, 8110, 0, 8111, 0, 8114, 0, 8130, 0, 8178,\n-    0, 8119, 8141, 8142, 8143, 0, 0, 8135, 0, 8183, 8157, 8158, 8159, 0, 0,\n-    8602, 0, 8603, 0, 8622, 0, 8653, 0, 8655, 0, 8654, 0, 8708, 0, 8713, 0,\n-    8716, 0, 8740, 0, 8742, 0, 8769, 0, 8772, 0, 8775, 0, 8777, 0, 8813, 0,\n-    8802, 0, 8816, 0, 8817, 0, 8820, 0, 8821, 0, 8824, 0, 8825, 0, 8832, 0,\n-    8833, 0, 8928, 0, 8929, 0, 8836, 0, 8837, 0, 8840, 0, 8841, 0, 8930, 0,\n-    8931, 0, 8876, 0, 8877, 0, 8878, 0, 8879, 0, 8938, 0, 8939, 0, 8940, 0,\n-    8941, 12436, 0, 12364, 0, 12366, 0, 12368, 0, 12370, 0, 12372, 0, 12374,\n-    0, 12376, 0, 12378, 0, 12380, 0, 12382, 0, 12384, 0, 12386, 0, 12389, 0,\n-    12391, 0, 12393, 0, 12400, 12401, 12403, 12404, 12406, 12407, 12409,\n-    12410, 12412, 12413, 12446, 0, 12532, 0, 12460, 0, 12462, 0, 12464, 0,\n-    12466, 0, 12468, 0, 12470, 0, 12472, 0, 12474, 0, 12476, 0, 12478, 0,\n-    12480, 0, 12482, 0, 12485, 0, 12487, 0, 12489, 0, 12496, 12497, 12499,\n-    12500, 12502, 12503, 12505, 12506, 12508, 12509, 12535, 0, 12536, 0,\n-    12537, 0, 12538, 0, 12542, 0, 69786, 0, 69788, 0, 69803, 0, 0, 69934, 0,\n-    69935, 70475, 70476, 70844, 70843, 70846, 0, 0, 71098, 0, 71099,\n-};\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-ucdn\/ucdn_db.h","additions":0,"deletions":5730,"binary":false,"changes":5730,"status":"deleted"},{"patch":"@@ -10,2 +10,2 @@\n- * # Date: 2018-02-07, 07:55:18 GMT\n- * # © 2018 Unicode®, Inc.\n+ * # Date: 2020-01-28, 20:52:38 GMT\n+ * # © 2020 Unicode®, Inc.\n@@ -16,1 +16,1 @@\n- * # Version: 11.0\n+ * # Version: 13.0\n@@ -26,2 +26,2 @@\n-\n-static const struct hb_unicode_range_t _hb_unicode_emoji_Extended_Pictographic_table[] =\n+static const uint8_t\n+_hb_emoji_u8[448] =\n@@ -29,77 +29,28 @@\n-  {0x00A9, 0x00A9},\n-  {0x00AE, 0x00AE},\n-  {0x203C, 0x203C},\n-  {0x2049, 0x2049},\n-  {0x2122, 0x2122},\n-  {0x2139, 0x2139},\n-  {0x2194, 0x2199},\n-  {0x21A9, 0x21AA},\n-  {0x231A, 0x231B},\n-  {0x2328, 0x2328},\n-  {0x2388, 0x2388},\n-  {0x23CF, 0x23CF},\n-  {0x23E9, 0x23F3},\n-  {0x23F8, 0x23FA},\n-  {0x24C2, 0x24C2},\n-  {0x25AA, 0x25AB},\n-  {0x25B6, 0x25B6},\n-  {0x25C0, 0x25C0},\n-  {0x25FB, 0x25FE},\n-  {0x2600, 0x2605},\n-  {0x2607, 0x2612},\n-  {0x2614, 0x2685},\n-  {0x2690, 0x2705},\n-  {0x2708, 0x2712},\n-  {0x2714, 0x2714},\n-  {0x2716, 0x2716},\n-  {0x271D, 0x271D},\n-  {0x2721, 0x2721},\n-  {0x2728, 0x2728},\n-  {0x2733, 0x2734},\n-  {0x2744, 0x2744},\n-  {0x2747, 0x2747},\n-  {0x274C, 0x274C},\n-  {0x274E, 0x274E},\n-  {0x2753, 0x2755},\n-  {0x2757, 0x2757},\n-  {0x2763, 0x2767},\n-  {0x2795, 0x2797},\n-  {0x27A1, 0x27A1},\n-  {0x27B0, 0x27B0},\n-  {0x27BF, 0x27BF},\n-  {0x2934, 0x2935},\n-  {0x2B05, 0x2B07},\n-  {0x2B1B, 0x2B1C},\n-  {0x2B50, 0x2B50},\n-  {0x2B55, 0x2B55},\n-  {0x3030, 0x3030},\n-  {0x303D, 0x303D},\n-  {0x3297, 0x3297},\n-  {0x3299, 0x3299},\n-  {0x1F000, 0x1F0FF},\n-  {0x1F10D, 0x1F10F},\n-  {0x1F12F, 0x1F12F},\n-  {0x1F16C, 0x1F171},\n-  {0x1F17E, 0x1F17F},\n-  {0x1F18E, 0x1F18E},\n-  {0x1F191, 0x1F19A},\n-  {0x1F1AD, 0x1F1E5},\n-  {0x1F201, 0x1F20F},\n-  {0x1F21A, 0x1F21A},\n-  {0x1F22F, 0x1F22F},\n-  {0x1F232, 0x1F23A},\n-  {0x1F23C, 0x1F23F},\n-  {0x1F249, 0x1F3FA},\n-  {0x1F400, 0x1F53D},\n-  {0x1F546, 0x1F64F},\n-  {0x1F680, 0x1F6FF},\n-  {0x1F774, 0x1F77F},\n-  {0x1F7D5, 0x1F7FF},\n-  {0x1F80C, 0x1F80F},\n-  {0x1F848, 0x1F84F},\n-  {0x1F85A, 0x1F85F},\n-  {0x1F888, 0x1F88F},\n-  {0x1F8AE, 0x1F8FF},\n-  {0x1F90C, 0x1F93A},\n-  {0x1F93C, 0x1F945},\n-  {0x1F947, 0x1FFFD},\n+    0,  0,  0,  0, 33,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 84,118,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  2,  0,  0,  3,\n+    0,  0,  0,  0,  0,  0,  4,  5,  6,  7,  8,  7,  9, 10, 11,  0,\n+    0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  0,\n+    7,  7,  7, 14, 15, 16, 17, 18, 19, 20,  7,  7,  7,  7,  7, 21,\n+    7,  7,  7,  7, 22, 23,  7,  7,  7, 24,  7, 14,  0, 25,  0, 26,\n+   27, 28, 29, 14, 30, 31,  7,  7,  7,  7,  7, 14,  0,  0,  0,  0,\n+    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 22,\n+    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,240,  1,  0,  2,  0,  0,\n+    0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,254,  7,  3,\n+    0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0, 56,\n+  159,255,243,255,255,255,255,255,255,255,255,255,255,255,255,255,\n+   31,  0,255,255,255,255,255,255, 31,255,  3,  0,  0,  0,  8,  0,\n+    0,  0, 24,  0,120,  0,  0,  0,  0,  0, 96,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,  0, 16,  0, 96,  0,  0,  8,  0,  0,  0,  0,\n+  255,255,255,255,255,255,255,127,  0, 96,  0,  0,  0,  0,  0,  0,\n+    0,  0,  0,  0,  0,240,  1, 64,  0,  0,254,  3,  0,224,255,255,\n+  255,255,255,255, 31,  0,  0,  0,254,127,  0,  0,  0,  0,252,115,\n+    0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,  3,\n+  255,255,255,255,255,255,255, 31,192,255,255,255,255,255,255,255,\n+  255,127,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,240,127,\n+    0,  0,224,255,255,255,255,127,  0,112,  0,  0,  0,  0,  0,  0,\n+    0,127,  0,124,  0,  0,  0,  0,  0,127,  0,  0,  0,192,255,255,\n+    0,240,255,255,255,255,255,243,159,255,255,255,255,255,255,255,\n@@ -108,0 +59,17 @@\n+static inline unsigned\n+_hb_emoji_b4 (const uint8_t* a, unsigned i)\n+{\n+  return (a[i>>1]>>((i&1u)<<2))&15u;\n+}\n+static inline unsigned\n+_hb_emoji_b1 (const uint8_t* a, unsigned i)\n+{\n+  return (a[i>>3]>>((i&7u)<<0))&1u;\n+}\n+static inline uint_fast8_t\n+_hb_emoji_is_Extended_Pictographic (unsigned u)\n+{\n+  return u<131069u?_hb_emoji_b1(192+_hb_emoji_u8,((_hb_emoji_u8[64+(((_hb_emoji_b4(_hb_emoji_u8,u>>6>>4))<<4)+((u>>6)&15u))])<<6)+((u)&63u)):0;\n+}\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-unicode-emoji-table.hh","additions":50,"deletions":82,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -70,0 +71,1 @@\n+#endif\n@@ -116,0 +118,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -124,0 +127,1 @@\n+#endif\n@@ -125,4 +129,6 @@\n-\n-extern \"C\" hb_unicode_funcs_t *hb_glib_get_unicode_funcs ();\n-extern \"C\" hb_unicode_funcs_t *hb_icu_get_unicode_funcs ();\n-extern \"C\" hb_unicode_funcs_t *hb_ucdn_get_unicode_funcs ();\n+#if !defined(HB_NO_UNICODE_FUNCS) && defined(HAVE_GLIB)\n+#include \"hb-glib.h\"\n+#endif\n+#if !defined(HB_NO_UNICODE_FUNCS) && defined(HAVE_ICU) && defined(HAVE_ICU_BUILTIN)\n+#include \"hb-icu.h\"\n+#endif\n@@ -133,3 +139,3 @@\n-#if defined(HAVE_UCDN)\n-  return hb_ucdn_get_unicode_funcs ();\n-#elif defined(HAVE_GLIB)\n+#if !defined(HB_NO_UNICODE_FUNCS) && !defined(HB_NO_UCD)\n+  return hb_ucd_get_unicode_funcs ();\n+#elif !defined(HB_NO_UNICODE_FUNCS) && defined(HAVE_GLIB)\n@@ -137,1 +143,1 @@\n-#elif defined(HAVE_ICU) && defined(HAVE_ICU_BUILTIN)\n+#elif !defined(HB_NO_UNICODE_FUNCS) && defined(HAVE_ICU) && defined(HAVE_ICU_BUILTIN)\n@@ -147,1 +153,1 @@\n-#error \"Consider building hb-ucdn.c.  If you absolutely want to build without any, check the code.\"\n+#error \"Consider building hb-ucd.cc.  If you absolutely want to build without any, check the code.\"\n@@ -209,1 +215,1 @@\n-  return const_cast<hb_unicode_funcs_t *> (&Null(hb_unicode_funcs_t));\n+  return const_cast<hb_unicode_funcs_t *> (&Null (hb_unicode_funcs_t));\n@@ -428,0 +434,1 @@\n+#ifndef HB_DISABLE_DEPRECATED\n@@ -448,0 +455,1 @@\n+#endif\n@@ -450,0 +458,1 @@\n+#ifndef HB_NO_OT_SHAPE\n@@ -562,0 +571,1 @@\n+#endif\n@@ -567,0 +577,1 @@\n+#ifndef HB_NO_EMOJI_SEQUENCES\n@@ -573,4 +584,1 @@\n-  return hb_bsearch (&cp, _hb_unicode_emoji_Extended_Pictographic_table,\n-                     ARRAY_LENGTH (_hb_unicode_emoji_Extended_Pictographic_table),\n-                     sizeof (hb_unicode_range_t),\n-                     hb_unicode_range_t::cmp);\n+  return _hb_emoji_is_Extended_Pictographic (cp);\n@@ -578,0 +586,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-unicode.cc","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  HB_UNICODE_FUNC_IMPLEMENT (eastasian_width) \\\n+  HB_IF_NOT_DEPRECATED (HB_UNICODE_FUNC_IMPLEMENT (eastasian_width)) \\\n@@ -51,1 +51,1 @@\n-  HB_UNICODE_FUNC_IMPLEMENT (decompose_compatibility) \\\n+  HB_IF_NOT_DEPRECATED (HB_UNICODE_FUNC_IMPLEMENT (decompose_compatibility)) \\\n@@ -57,1 +57,1 @@\n-  HB_UNICODE_FUNC_IMPLEMENT (unsigned int, eastasian_width) \\\n+  HB_IF_NOT_DEPRECATED (HB_UNICODE_FUNC_IMPLEMENT (unsigned int, eastasian_width)) \\\n@@ -92,0 +92,3 @@\n+#ifdef HB_DISABLE_DEPRECATED\n+    unsigned int ret  = 0;\n+#else\n@@ -93,0 +96,1 @@\n+#endif\n@@ -104,3 +108,0 @@\n-    \/* XXX This hack belongs to the Myanmar shaper. *\/\n-    if (unlikely (u == 0x1037u)) u = 0x103Au;\n-\n@@ -325,2 +326,2 @@\n- * a non-zero ccc.  That makes them reorder with the Halant that is\n- * ccc=9.  Just zero them, we don't need them in our Indic shaper.\n+ * a non-zero ccc.  That makes them reorder with the Halant (ccc=9).\n+ * Assign 4 and 5, which are otherwise unassigned.\n@@ -328,2 +329,2 @@\n-#define HB_MODIFIED_COMBINING_CLASS_CCC84 0 \/* length mark *\/\n-#define HB_MODIFIED_COMBINING_CLASS_CCC91 0 \/* ai length mark *\/\n+#define HB_MODIFIED_COMBINING_CLASS_CCC84 4 \/* length mark *\/\n+#define HB_MODIFIED_COMBINING_CLASS_CCC91 5 \/* ai length mark *\/\n@@ -394,0 +395,3 @@\n+extern \"C\" HB_INTERNAL hb_unicode_funcs_t *hb_ucd_get_unicode_funcs ();\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-unicode.hh","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-  HB_NO_COPY_ASSIGN_TEMPLATE (hb_vector_t, Type);\n@@ -43,0 +42,13 @@\n+  hb_vector_t (const hb_vector_t &o)\n+  {\n+    init ();\n+    alloc (o.length);\n+    hb_copy (o, *this);\n+  }\n+  hb_vector_t (hb_vector_t &&o)\n+  {\n+    allocated = o.allocated;\n+    length = o.length;\n+    arrayZ = o.arrayZ;\n+    o.init ();\n+  }\n@@ -45,1 +57,0 @@\n-  unsigned int length;\n@@ -48,1 +59,0 @@\n-  Type *arrayZ_;\n@@ -50,0 +60,3 @@\n+  unsigned int length;\n+  public:\n+  Type *arrayZ;\n@@ -54,1 +67,1 @@\n-    arrayZ_ = nullptr;\n+    arrayZ = nullptr;\n@@ -59,2 +72,1 @@\n-    if (arrayZ_)\n-      free (arrayZ_);\n+    free (arrayZ);\n@@ -65,1 +77,0 @@\n-    Type *array = arrayZ();\n@@ -68,1 +79,15 @@\n-      array[i].fini ();\n+      arrayZ[i].fini ();\n+    fini ();\n+  }\n+\n+  void reset () { resize (0); }\n+\n+  hb_vector_t& operator = (const hb_vector_t &o)\n+  {\n+    reset ();\n+    alloc (o.length);\n+    hb_copy (o, *this);\n+    return *this;\n+  }\n+  hb_vector_t& operator = (hb_vector_t &&o)\n+  {\n@@ -70,0 +95,5 @@\n+    allocated = o.allocated;\n+    length = o.length;\n+    arrayZ = o.arrayZ;\n+    o.init ();\n+    return *this;\n@@ -72,2 +102,6 @@\n-  const Type * arrayZ () const { return arrayZ_; }\n-        Type * arrayZ ()       { return arrayZ_; }\n+  hb_bytes_t as_bytes () const\n+  { return hb_bytes_t ((const char *) arrayZ, length * item_size); }\n+\n+  bool operator == (const hb_vector_t &o) const { return as_array () == o.as_array (); }\n+  bool operator != (const hb_vector_t &o) const { return !(*this == o); }\n+  uint32_t hash () const { return as_array ().hash (); }\n@@ -80,1 +114,1 @@\n-    return arrayZ()[i];\n+    return arrayZ[i];\n@@ -86,2 +120,2 @@\n-      return Null(Type);\n-    return arrayZ()[i];\n+      return Null (Type);\n+    return arrayZ[i];\n@@ -90,1 +124,9 @@\n-  explicit_operator bool () const { return length; }\n+  Type& tail () { return (*this)[length - 1]; }\n+  const Type& tail () const { return (*this)[length - 1]; }\n+\n+  explicit operator bool () const { return length; }\n+  unsigned get_size () const { return length * item_size; }\n+\n+  \/* Sink interface. *\/\n+  template <typename T>\n+  hb_vector_t& operator << (T&& v) { push (hb_forward<T> (v)); return *this; }\n@@ -92,4 +134,10 @@\n-  hb_array_t<Type> as_array ()\n-  { return hb_array (arrayZ(), length); }\n-  hb_array_t<const Type> as_array () const\n-  { return hb_array (arrayZ(), length); }\n+  hb_array_t<      Type> as_array ()       { return hb_array (arrayZ, length); }\n+  hb_array_t<const Type> as_array () const { return hb_array (arrayZ, length); }\n+\n+  \/* Iterator. *\/\n+  typedef hb_array_t<const Type>   iter_t;\n+  typedef hb_array_t<      Type> writer_t;\n+    iter_t   iter () const { return as_array (); }\n+  writer_t writer ()       { return as_array (); }\n+  operator   iter_t () const { return   iter (); }\n+  operator writer_t ()       { return writer (); }\n@@ -98,1 +146,1 @@\n-  { return as_array ().sub_array (start_offset, count);}\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -100,1 +148,1 @@\n-  { return as_array ().sub_array (start_offset, count);}\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -102,1 +150,1 @@\n-  { return as_array ().sub_array (start_offset, count);}\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -104,1 +152,1 @@\n-  { return as_array ().sub_array (start_offset, count);}\n+  { return as_array ().sub_array (start_offset, count); }\n@@ -107,1 +155,1 @@\n-  { return hb_sorted_array (arrayZ(), length); }\n+  { return hb_sorted_array (arrayZ, length); }\n@@ -109,10 +157,1 @@\n-  { return hb_sorted_array (arrayZ(), length); }\n-\n-  hb_array_t<const Type> sorted_sub_array (unsigned int start_offset, unsigned int count) const\n-  { return as_sorted_array ().sorted_sub_array (start_offset, count);}\n-  hb_array_t<const Type> sorted_sub_array (unsigned int start_offset, unsigned int *count = nullptr \/* IN\/OUT *\/) const\n-  { return as_sorted_array ().sorted_sub_array (start_offset, count);}\n-  hb_array_t<Type> sorted_sub_array (unsigned int start_offset, unsigned int count)\n-  { return as_sorted_array ().sorted_sub_array (start_offset, count);}\n-  hb_array_t<Type> sorted_sub_array (unsigned int start_offset, unsigned int *count = nullptr \/* IN\/OUT *\/)\n-  { return as_sorted_array ().sorted_sub_array (start_offset, count);}\n+  { return hb_sorted_array (arrayZ, length); }\n@@ -120,4 +159,2 @@\n-  template <typename T> explicit_operator T * () { return arrayZ(); }\n-  template <typename T> explicit_operator const T * () const { return arrayZ(); }\n-  operator hb_array_t<Type> ()             { return as_array (); }\n-  operator hb_array_t<const Type> () const { return as_array (); }\n+  template <typename T> explicit operator T * () { return arrayZ; }\n+  template <typename T> explicit operator const T * () const { return arrayZ; }\n@@ -125,2 +162,2 @@\n-  Type * operator  + (unsigned int i) { return arrayZ() + i; }\n-  const Type * operator  + (unsigned int i) const { return arrayZ() + i; }\n+  Type * operator  + (unsigned int i) { return arrayZ + i; }\n+  const Type * operator  + (unsigned int i) const { return arrayZ + i; }\n@@ -131,2 +168,2 @@\n-      return &Crap(Type);\n-    return &arrayZ()[length - 1];\n+      return &Crap (Type);\n+    return &arrayZ[length - 1];\n@@ -134,1 +171,2 @@\n-  Type *push (const Type& v)\n+  template <typename T>\n+  Type *push (T&& v)\n@@ -137,1 +175,1 @@\n-    *p = v;\n+    *p = hb_forward<T> (v);\n@@ -164,1 +202,1 @@\n-      new_array = (Type *) realloc (arrayZ_, new_allocated * sizeof (Type));\n+      new_array = (Type *) realloc (arrayZ, new_allocated * sizeof (Type));\n@@ -172,1 +210,1 @@\n-    arrayZ_ = new_array;\n+    arrayZ = new_array;\n@@ -185,1 +223,1 @@\n-      memset (arrayZ() + length, 0, (size - length) * sizeof (*arrayZ()));\n+      memset (arrayZ + length, 0, (size - length) * sizeof (*arrayZ));\n@@ -191,1 +229,1 @@\n-  void pop ()\n+  Type pop ()\n@@ -193,2 +231,2 @@\n-    if (!length) return;\n-    length--;\n+    if (!length) return Null (Type);\n+    return hb_move (arrayZ[--length]); \/* Does this move actually work? *\/\n@@ -201,3 +239,2 @@\n-    Type *array = arrayZ();\n-    memmove (static_cast<void *> (&array[i]),\n-             static_cast<void *> (&array[i + 1]),\n+    memmove (static_cast<void *> (&arrayZ[i]),\n+             static_cast<void *> (&arrayZ[i + 1]),\n@@ -218,1 +255,0 @@\n-    Type *array = arrayZ();\n@@ -220,2 +256,2 @@\n-      if (array[i] == v)\n-        return &array[i];\n+      if (arrayZ[i] == v)\n+        return &arrayZ[i];\n@@ -227,1 +263,0 @@\n-    const Type *array = arrayZ();\n@@ -229,2 +264,2 @@\n-      if (array[i] == v)\n-        return &array[i];\n+      if (arrayZ[i] == v)\n+        return &arrayZ[i];\n@@ -245,0 +280,19 @@\n+  template <typename T>\n+  bool lfind (const T &x, unsigned *pos = nullptr) const\n+  { return as_array ().lfind (x, pos); }\n+};\n+\n+template <typename Type>\n+struct hb_sorted_vector_t : hb_vector_t<Type>\n+{\n+  hb_sorted_array_t<      Type> as_array ()       { return hb_sorted_array (this->arrayZ, this->length); }\n+  hb_sorted_array_t<const Type> as_array () const { return hb_sorted_array (this->arrayZ, this->length); }\n+\n+  \/* Iterator. *\/\n+  typedef hb_sorted_array_t<const Type> const_iter_t;\n+  typedef hb_sorted_array_t<      Type>       iter_t;\n+  const_iter_t  iter () const { return as_array (); }\n+  const_iter_t citer () const { return as_array (); }\n+        iter_t  iter ()       { return as_array (); }\n+  operator       iter_t ()       { return iter (); }\n+  operator const_iter_t () const { return iter (); }\n@@ -248,1 +302,1 @@\n-  { return as_sorted_array ().bsearch (x, not_found); }\n+  { return as_array ().bsearch (x, not_found); }\n@@ -251,1 +305,1 @@\n-  { return as_sorted_array ().bsearch (x, not_found); }\n+  { return as_array ().bsearch (x, not_found); }\n@@ -254,3 +308,3 @@\n-                     hb_bfind_not_found_t not_found = HB_BFIND_NOT_FOUND_DONT_STORE,\n-                     unsigned int to_store = (unsigned int) -1) const\n-  { return as_sorted_array ().bfind (x, i, not_found, to_store); }\n+              hb_bfind_not_found_t not_found = HB_BFIND_NOT_FOUND_DONT_STORE,\n+              unsigned int to_store = (unsigned int) -1) const\n+  { return as_array ().bfind (x, i, not_found, to_store); }\n@@ -259,1 +313,0 @@\n-\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-vector.hh","additions":117,"deletions":64,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-#define HB_VERSION_MINOR 3\n-#define HB_VERSION_MICRO 1\n+#define HB_VERSION_MINOR 7\n+#define HB_VERSION_MICRO 2\n@@ -43,1 +43,1 @@\n-#define HB_VERSION_STRING \"2.3.1\"\n+#define HB_VERSION_STRING \"2.7.2\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-version.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright © 2012  Google, Inc.\n- *\n- *  This is part of HarfBuzz, a text shaping library.\n- *\n- * Permission is hereby granted, without written agreement and without\n- * license or royalty fees, to use, copy, modify, and distribute this\n- * software and its documentation for any purpose, provided that the\n- * above copyright notice and the following two paragraphs appear in\n- * all copies of this software.\n- *\n- * IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\n- * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n- * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\n- * IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n- * DAMAGE.\n- *\n- * THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n- * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\n- * ON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\n- * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n- *\n- * Google Author(s): Behdad Esfahbod\n- *\/\n-\n-#include \"hb.hh\"\n-\n-#if defined(HB_ATOMIC_INT_NIL)\n-#error \"Could not find any system to define atomic_int macros, library WILL NOT be thread-safe\"\n-#error \"Check hb-atomic.hh for possible resolutions.\"\n-#endif\n-\n-#if defined(HB_MUTEX_IMPL_NIL)\n-#error \"Could not find any system to define mutex macros, library WILL NOT be thread-safe\"\n-#error \"Check hb-mutex.hh for possible resolutions.\"\n-#endif\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb-warning.cc","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"hb-draw.h\"\n@@ -41,0 +42,1 @@\n+#include \"hb-style.h\"\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+\n@@ -33,1 +34,1 @@\n-#if defined(_MSC_VER)\n+#ifdef _MSC_VER\n@@ -68,0 +69,2 @@\n+#pragma GCC diagnostic error   \"-Wembedded-directive\"\n+#pragma GCC diagnostic error   \"-Wextra-semi-stmt\"\n@@ -71,0 +74,1 @@\n+#pragma GCC diagnostic error   \"-Winjected-class-name\"\n@@ -96,0 +100,2 @@\n+#pragma GCC diagnostic warning \"-Wdeprecated\"\n+#pragma GCC diagnostic warning \"-Wdeprecated-declarations\"\n@@ -97,0 +103,1 @@\n+#pragma GCC diagnostic warning \"-Wdouble-promotion\"\n@@ -103,0 +110,1 @@\n+#pragma GCC diagnostic warning \"-Wunused-but-set-variable\"\n@@ -123,0 +131,1 @@\n+#pragma GCC diagnostic ignored \"-Wc++11-compat\" \/\/ only gcc raises it\n@@ -128,3 +137,3 @@\n-#ifdef HAVE_CONFIG_H\n-#include \"config.h\"\n-#endif\n+\n+#include \"hb-config.hh\"\n+\n@@ -169,2 +178,1 @@\n-#include \"hb-aat.h\"\n-\n+#include <limits.h>\n@@ -172,0 +180,1 @@\n+#include <float.h>\n@@ -176,1 +185,0 @@\n-#include <errno.h>\n@@ -181,0 +189,5 @@\n+#ifdef __MINGW32_VERSION\n+#ifndef WIN32_LEAN_AND_MEAN\n+#define WIN32_LEAN_AND_MEAN 1\n+#endif\n+#else\n@@ -183,0 +196,6 @@\n+#endif\n+\n+#ifdef _WIN32\n+#include <windows.h>\n+#include <winapifamily.h>\n+#endif\n@@ -190,4 +209,9 @@\n-#if defined(hb_malloc_impl) \\\n- && defined(hb_calloc_impl) \\\n- && defined(hb_realloc_impl) \\\n- && defined(hb_free_impl)\n+#if !defined(HB_CUSTOM_MALLOC) \\\n+  && defined(hb_malloc_impl) \\\n+  && defined(hb_calloc_impl) \\\n+  && defined(hb_realloc_impl) \\\n+  && defined(hb_free_impl)\n+#define HB_CUSTOM_MALLOC\n+#endif\n+\n+#ifdef HB_CUSTOM_MALLOC\n@@ -202,8 +226,0 @@\n-\n-#if defined(hb_memalign_impl)\n-extern \"C\" int hb_memalign_impl(void **memptr, size_t alignment, size_t size);\n-#define posix_memalign hb_memalign_impl\n-#else\n-#undef HAVE_POSIX_MEMALIGN\n-#endif\n-\n@@ -217,52 +233,0 @@\n-#if __cplusplus < 201103L\n-\n-#ifndef nullptr\n-#define nullptr NULL\n-#endif\n-\n-#ifndef constexpr\n-#define constexpr const\n-#endif\n-\n-#ifndef static_assert\n-#define static_assert(e, msg) \\\n-        HB_UNUSED typedef int HB_PASTE(static_assertion_failed_at_line_, __LINE__) [(e) ? 1 : -1]\n-#endif \/\/ static_assert\n-\n-#if defined(__GNUC__)\n-#if (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 8))\n-#define thread_local __thread\n-#endif\n-#else\n-#define thread_local\n-#endif\n-\n-template <typename T>\n-struct _hb_alignof\n-{\n-  struct s\n-  {\n-    char c;\n-    T t;\n-  };\n-  static constexpr size_t value = offsetof (s, t);\n-};\n-#ifndef alignof\n-#define alignof(x) (_hb_alignof<x>::value)\n-#endif\n-\n-\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1127 *\/\n-#ifndef explicit_operator\n-#define explicit_operator operator\n-#endif\n-\n-#else \/* __cplusplus >= 201103L *\/\n-\n-\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1127 *\/\n-#ifndef explicit_operator\n-#define explicit_operator explicit operator\n-#endif\n-\n-#endif \/* __cplusplus < 201103L *\/\n-\n-\n@@ -291,1 +255,1 @@\n-#if defined(__GNUC__) && (__GNUC__ >= 4)\n+#if defined(__GNUC__) && (__GNUC__ >= 4) || (__clang__)\n@@ -314,0 +278,7 @@\n+\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1651 *\/\n+#if defined(__clang__) && __clang_major__ < 10\n+#define static_const static\n+#else\n+#define static_const static const\n+#endif\n+\n@@ -360,1 +331,14 @@\n-#if defined(__clang__)\n+\/* A tag to enforce use of return value for a function *\/\n+#if __cplusplus >= 201703L\n+#  define HB_NODISCARD [[nodiscard]]\n+#elif defined(__GNUC__) || defined(__clang__)\n+#  define HB_NODISCARD __attribute__((warn_unused_result))\n+#elif defined(_MSC_VER)\n+#  define HB_NODISCARD _Check_return_\n+#else\n+#  define HB_NODISCARD\n+#endif\n+#define hb_success_t HB_NODISCARD bool\n+\n+\/* https:\/\/github.com\/harfbuzz\/harfbuzz\/issues\/1852 *\/\n+#if defined(__clang__) && !(defined(_AIX) && (defined(__IBMCPP__) || defined(__ibmxl__)))\n@@ -377,1 +361,1 @@\n-#    if !defined(WINAPI_FAMILY) || !(WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)\n+#    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)\n@@ -391,1 +375,3 @@\n-#    define getenv(Name) nullptr\n+#    ifndef HB_NO_GETENV\n+#      define HB_NO_GETENV\n+#    endif\n@@ -393,2 +379,6 @@\n-#      define setlocale(Category, Locale) \"C\"\n-static int errno = 0; \/* Use something better? *\/\n+#      define HB_NO_SETLOCALE\n+#      define HB_NO_ERRNO\n+#    endif\n+#  elif WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)\n+#    ifndef HB_NO_GETENV\n+#      define HB_NO_GETENV\n@@ -396,2 +386,0 @@\n-#  elif defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)\n-#    define getenv(Name) nullptr\n@@ -404,0 +392,12 @@\n+#ifdef HB_NO_GETENV\n+#define getenv(Name) nullptr\n+#endif\n+\n+#ifndef HB_NO_ERRNO\n+#  include <errno.h>\n+#else\n+static int HB_UNUSED _hb_errno = 0;\n+#  undef errno\n+#  define errno _hb_errno\n+#endif\n+\n@@ -462,81 +462,7 @@\n-\n-#if __cplusplus >= 201103L\n-\n-\/* We only enable these with C++11 or later, since earlier language\n- * does not allow structs with constructors in unions, and we need\n- * those. *\/\n-\n-#define HB_NO_COPY_ASSIGN(TypeName) \\\n-  TypeName(const TypeName&); \\\n-  void operator=(const TypeName&)\n-#define HB_NO_COPY_ASSIGN_TEMPLATE(TypeName, T) \\\n-  TypeName(const TypeName<T>&); \\\n-  void operator=(const TypeName<T>&)\n-#define HB_NO_COPY_ASSIGN_TEMPLATE2(TypeName, T1, T2) \\\n-  TypeName(const TypeName<T1, T2>&); \\\n-  void operator=(const TypeName<T1, T2>&)\n-#define HB_NO_CREATE_COPY_ASSIGN(TypeName) \\\n-  TypeName(); \\\n-  TypeName(const TypeName&); \\\n-  void operator=(const TypeName&)\n-#define HB_NO_CREATE_COPY_ASSIGN_TEMPLATE(TypeName, T) \\\n-  TypeName(); \\\n-  TypeName(const TypeName<T>&); \\\n-  void operator=(const TypeName<T>&)\n-#define HB_NO_CREATE_COPY_ASSIGN_TEMPLATE2(TypeName, T1, T2) \\\n-  TypeName(); \\\n-  TypeName(const TypeName<T1, T2>&); \\\n-  void operator=(const TypeName<T1, T2>&)\n-\n-#else \/* __cpluspplus >= 201103L *\/\n-\n-#define HB_NO_COPY_ASSIGN(TypeName) static_assert (true, \"\")\n-#define HB_NO_COPY_ASSIGN_TEMPLATE(TypeName, T) static_assert (true, \"\")\n-#define HB_NO_COPY_ASSIGN_TEMPLATE2(TypeName, T1, T2) static_assert (true, \"\")\n-#define HB_NO_CREATE_COPY_ASSIGN(TypeName) static_assert (true, \"\")\n-#define HB_NO_CREATE_COPY_ASSIGN_TEMPLATE(TypeName, T) static_assert (true, \"\")\n-#define HB_NO_CREATE_COPY_ASSIGN_TEMPLATE2(TypeName, T1, T2) static_assert (true, \"\")\n-\n-#endif \/* __cpluspplus >= 201103L *\/\n-\n-\n-\/*\n- * Compiler-assisted vectorization parameters.\n- *\/\n-\n-\/*\n- * Disable vectorization for now.  To correctly use them, we should\n- * use posix_memalign() to allocate in hb_vector_t.  Otherwise, can\n- * cause misaligned access.\n- *\n- * https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=860184\n- *\/\n-#if !defined(HB_VECTOR_SIZE)\n-#  define HB_VECTOR_SIZE 0\n-#endif\n-\n-\/* The `vector_size' attribute was introduced in gcc 3.1. *\/\n-#if !defined(HB_VECTOR_SIZE)\n-#  if defined( __GNUC__ ) && ( __GNUC__ >= 4 )\n-#    define HB_VECTOR_SIZE 128\n-#  else\n-#    define HB_VECTOR_SIZE 0\n-#  endif\n-#endif\n-static_assert (0 == (HB_VECTOR_SIZE & (HB_VECTOR_SIZE - 1)), \"HB_VECTOR_SIZE is not power of 2.\");\n-static_assert (0 == (HB_VECTOR_SIZE % 64), \"HB_VECTOR_SIZE is not multiple of 64.\");\n-#if HB_VECTOR_SIZE\n-typedef uint64_t hb_vector_size_impl_t __attribute__((vector_size (HB_VECTOR_SIZE \/ 8)));\n-#else\n-typedef uint64_t hb_vector_size_impl_t;\n-#endif\n-\n-\n-\/* HB_NDEBUG disables some sanity checks that are very safe to disable and\n- * should be disabled in production systems.  If NDEBUG is defined, enable\n- * HB_NDEBUG; but if it's desirable that normal assert()s (which are very\n- * light-weight) to be enabled, then HB_DEBUG can be defined to disable\n- * the costlier checks. *\/\n-#ifdef NDEBUG\n-#define HB_NDEBUG 1\n-#endif\n+#define HB_DELETE_COPY_ASSIGN(TypeName) \\\n+  TypeName(const TypeName&) = delete; \\\n+  void operator=(const TypeName&) = delete\n+#define HB_DELETE_CREATE_COPY_ASSIGN(TypeName) \\\n+  TypeName() = delete; \\\n+  TypeName(const TypeName&) = delete; \\\n+  void operator=(const TypeName&) = delete\n@@ -582,14 +508,2 @@\n-#define VAR 1\n-\n-\n-\/* fallback for round() *\/\n-static inline double\n-_hb_round (double x)\n-{\n-  if (x >= 0)\n-    return floor (x + 0.5);\n-  else\n-    return ceil (x - 0.5);\n-}\n-#if !defined (HAVE_ROUND) && !defined (HAVE_DECL_ROUND)\n-#define round(x) _hb_round(x)\n+#ifndef HB_VAR_ARRAY\n+#define HB_VAR_ARRAY 1\n@@ -598,0 +512,3 @@\n+static inline float\n+_hb_roundf (float x) { return floorf (x + .5f); }\n+#define roundf(x) _hb_roundf(x)\n@@ -599,12 +516,5 @@\n-\/* fallback for posix_memalign() *\/\n-static inline int\n-_hb_memalign(void **memptr, size_t alignment, size_t size)\n-{\n-  if (unlikely (0 != (alignment & (alignment - 1)) ||\n-                !alignment ||\n-                0 != (alignment & (sizeof (void *) - 1))))\n-    return EINVAL;\n-\n-  char *p = (char *) malloc (size + alignment - 1);\n-  if (unlikely (!p))\n-    return ENOMEM;\n+\/* Endian swap, used in Windows related backends *\/\n+static inline uint16_t hb_uint16_swap (const uint16_t v)\n+{ return (v >> 8) | (v << 8); }\n+static inline uint32_t hb_uint32_swap (const uint32_t v)\n+{ return (hb_uint16_swap (v) << 16) | hb_uint16_swap (v >> 16); }\n@@ -612,3 +522,3 @@\n-  size_t off = (size_t) p & (alignment - 1);\n-  if (off)\n-    p += alignment - off;\n+\/*\n+ * Big-endian integers.  Here because fundamental.\n+ *\/\n@@ -616,1 +526,1 @@\n-  *memptr = (void *) p;\n+template <typename Type, int Bytes> struct BEInt;\n@@ -618,5 +528,81 @@\n-  return 0;\n-}\n-#if !defined(posix_memalign) && !defined(HAVE_POSIX_MEMALIGN)\n-#define posix_memalign _hb_memalign\n-#endif\n+template <typename Type>\n+struct BEInt<Type, 1>\n+{\n+  public:\n+  BEInt<Type, 1>& operator = (Type V)\n+  {\n+    v = V;\n+    return *this;\n+  }\n+  operator Type () const { return v; }\n+  private: uint8_t v;\n+};\n+template <typename Type>\n+struct BEInt<Type, 2>\n+{\n+  public:\n+  BEInt<Type, 2>& operator = (Type V)\n+  {\n+    v[0] = (V >>  8) & 0xFF;\n+    v[1] = (V      ) & 0xFF;\n+    return *this;\n+  }\n+  operator Type () const\n+  {\n+#if ((defined(__GNUC__) && __GNUC__ >= 5) || defined(__clang__)) && \\\n+    defined(__BYTE_ORDER) && \\\n+    (__BYTE_ORDER == __LITTLE_ENDIAN || __BYTE_ORDER == __BIG_ENDIAN)\n+    \/* Spoon-feed the compiler a big-endian integer with alignment 1.\n+     * https:\/\/github.com\/harfbuzz\/harfbuzz\/pull\/1398 *\/\n+    struct __attribute__((packed)) packed_uint16_t { uint16_t v; };\n+#if __BYTE_ORDER == __LITTLE_ENDIAN\n+    return __builtin_bswap16 (((packed_uint16_t *) this)->v);\n+#else \/* __BYTE_ORDER == __BIG_ENDIAN *\/\n+    return ((packed_uint16_t *) this)->v;\n+#endif\n+#endif\n+    return (v[0] <<  8)\n+         + (v[1]      );\n+  }\n+  private: uint8_t v[2];\n+};\n+template <typename Type>\n+struct BEInt<Type, 3>\n+{\n+  public:\n+  BEInt<Type, 3>& operator = (Type V)\n+  {\n+    v[0] = (V >> 16) & 0xFF;\n+    v[1] = (V >>  8) & 0xFF;\n+    v[2] = (V      ) & 0xFF;\n+    return *this;\n+  }\n+  operator Type () const\n+  {\n+    return (v[0] << 16)\n+         + (v[1] <<  8)\n+         + (v[2]      );\n+  }\n+  private: uint8_t v[3];\n+};\n+template <typename Type>\n+struct BEInt<Type, 4>\n+{\n+  public:\n+  BEInt<Type, 4>& operator = (Type V)\n+  {\n+    v[0] = (V >> 24) & 0xFF;\n+    v[1] = (V >> 16) & 0xFF;\n+    v[2] = (V >>  8) & 0xFF;\n+    v[3] = (V      ) & 0xFF;\n+    return *this;\n+  }\n+  operator Type () const\n+  {\n+    return (v[0] << 24)\n+         + (v[1] << 16)\n+         + (v[2] <<  8)\n+         + (v[3]      );\n+  }\n+  private: uint8_t v[4];\n+};\n@@ -633,12 +619,0 @@\n-\/* Some really basic things everyone wants. *\/\n-template <typename T> struct hb_remove_const { typedef T value; };\n-template <typename T> struct hb_remove_const<const T> { typedef T value; };\n-#define hb_remove_const(T) hb_remove_const<T>::value\n-template <typename T> struct hb_remove_reference { typedef T value; };\n-template <typename T> struct hb_remove_reference<T &> { typedef T value; };\n-#define hb_remove_reference(T) hb_remove_reference<T>::value\n-template <typename T> struct hb_remove_pointer { typedef T value; };\n-template <typename T> struct hb_remove_pointer<T *> { typedef T value; };\n-#define hb_remove_pointer(T) hb_remove_pointer<T>::value\n-\n-\n@@ -648,1 +622,1 @@\n-#include \"hb-atomic.hh\"\n+#include \"hb-meta.hh\"\n@@ -650,5 +624,7 @@\n-#include \"hb-null.hh\"\n-#include \"hb-dsalgs.hh\" \/\/ Requires: hb-null\n-#include \"hb-iter.hh\"   \/\/ Requires: hb-null\n-#include \"hb-debug.hh\"  \/\/ Requires: hb-atomic hb-dsalgs\n-#include \"hb-array.hh\"  \/\/ Requires: hb-dsalgs hb-iter hb-null\n+#include \"hb-number.hh\"\n+#include \"hb-atomic.hh\" \/\/ Requires: hb-meta\n+#include \"hb-null.hh\"   \/\/ Requires: hb-meta\n+#include \"hb-algs.hh\"   \/\/ Requires: hb-meta hb-null hb-number\n+#include \"hb-iter.hh\"   \/\/ Requires: hb-algs hb-meta\n+#include \"hb-debug.hh\"  \/\/ Requires: hb-algs hb-atomic\n+#include \"hb-array.hh\"  \/\/ Requires: hb-algs hb-iter hb-null\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/hb.hh","additions":189,"deletions":213,"binary":false,"changes":402,"status":"modified"}]}