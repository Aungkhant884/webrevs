{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -326,1 +326,1 @@\n-                            stream.readFully(unit, bytesRead, sz);\n+                            stream.readFully(unit, 0, sz);\n@@ -462,1 +462,1 @@\n-                        stream.readFully(unit, shortsRead, sz);\n+                        stream.readFully(unit, 0, sz);\n@@ -493,1 +493,1 @@\n-                        stream.readFully(unit, intsToRead, sz);\n+                        stream.readFully(unit, 0, sz);\n@@ -525,1 +525,1 @@\n-                        stream.readFully(unit, (srationalsToRead * 2), (sz * 2));\n+                        stream.readFully(unit, 0, (sz * 2));\n@@ -559,1 +559,1 @@\n-                        stream.readFully(unit, floatsToRead, sz);\n+                        stream.readFully(unit, 0, sz);\n@@ -590,1 +590,1 @@\n-                        stream.readFully(unit, doublesToRead, sz);\n+                        stream.readFully(unit, 0, sz);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/tiff\/TIFFIFD.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8270893\n+ * @summary Ensure that we don't throw IndexOutOfBoundsException when\n+ *          we read TIFF tag with content more than 1024000 bytes\n+ * @run main LargeTIFFTagTest\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageReader;\n+import javax.imageio.stream.ImageInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public class LargeTIFFTagTest {\n+    public static void main(String[] args) throws IOException {\n+        \/\/ TIFF stream length to hold 22 bytes of TIFF header\n+        \/\/ plus 1024002 bytes of data in one TIFFTag\n+        int length = 1024024;\n+        byte[] ba = new byte[length];\n+        \/\/ Little endian TIFF stream with header and only one\n+        \/\/ IFD entry at offset 22 having count value 1024002.\n+        byte[] header = new byte[] { (byte)0x49, (byte) 0x49,\n+                (byte)0x2a, (byte)0x00, (byte)0x08, (byte)0x00,\n+                (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x00,\n+                (byte)0x73, (byte)0x87, (byte)0x07, (byte)0x00,\n+                (byte)0x02, (byte)0xA0, (byte)0x0F, (byte)0x00,\n+                (byte)0x16, (byte)0x00, (byte)0x00, (byte)0x00};\n+        \/\/ copy first 22 bytes of TIFF header to byte array\n+        for (int i = 0; i < 22; i++) {\n+            ba[i] = header[i];\n+        }\n+        ByteArrayInputStream bais = new ByteArrayInputStream(ba);\n+        ImageInputStream stream = ImageIO.createImageInputStream(bais);\n+        Iterator<ImageReader> readers = ImageIO.getImageReaders(stream);\n+\n+        if(readers.hasNext()) {\n+            ImageReader reader = readers.next();\n+            reader.setInput(stream);\n+            try {\n+                reader.readAll(0, null);\n+            } catch (IllegalArgumentException e) {\n+                \/\/ do nothing we expect IllegalArgumentException but we\n+                \/\/ should not throw IndexOutOfBoundsException.\n+                System.out.println(e.toString());\n+                System.out.println(\"Caught IllegalArgumentException ignore it\");\n+            }\n+        } else {\n+            throw new RuntimeException(\"No readers available for TIFF format\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/tiff\/LargeTIFFTagTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}