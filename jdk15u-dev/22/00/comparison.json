{"files":[{"patch":"@@ -136,0 +136,2 @@\n+    exports com.sun.crypto.provider to\n+        jdk.crypto.cryptoki;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,0 +126,2 @@\n+    permission java.lang.RuntimePermission\n+                   \"accessClassInPackage.com.sun.crypto.provider\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,6 +91,21 @@\n-                @SuppressWarnings(\"deprecation\")\n-                Object o = Class.forName(className).newInstance();\n-                p = (Provider)o;\n-            } catch (Exception e) {\n-                throw new ProviderException\n-                        (\"Could not find provider \" + providerName, e);\n+                final Class<?> c = Class.forName(className);\n+                p = AccessController.doPrivileged(\n+                    new PrivilegedAction<Provider>() {\n+                        public Provider run() {\n+                            try {\n+                                @SuppressWarnings(\"deprecation\")\n+                                Object o = c.newInstance();\n+                                return (Provider) o;\n+                            } catch (Exception e) {\n+                                throw new ProviderException(\n+                                        \"Could not find provider \" +\n+                                                providerName, e);\n+                            }\n+                        }\n+                    }, null, new RuntimePermission(\n+                            \"accessClassInPackage.\" + c.getPackageName()));\n+            } catch (ClassNotFoundException e) {\n+                \/\/ Unexpected, as className is not a user but a\n+                \/\/ P11Util-internal value.\n+                throw new ProviderException(\"Could not find provider \" +\n+                        providerName, e);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Util.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.security.AllPermission;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.Permission;\n+import java.security.PermissionCollection;\n+import java.security.Permissions;\n+import java.security.Policy;\n+import java.security.ProtectionDomain;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+\/*\n+ * @test\n+ * @bug 8259319\n+ * @library \/test\/lib ..\n+ * @run main\/othervm IllegalPackageAccess\n+ *\/\n+\n+public class IllegalPackageAccess extends PKCS11Test {\n+\n+    private static Policy policy = Policy.getPolicy();\n+    private static RuntimePermission accessPerm =\n+            new RuntimePermission(\"accessClassInPackage.com.sun.crypto.provider\");\n+\n+    private static class MyPolicy extends Policy {\n+        @Override\n+        public PermissionCollection getPermissions(ProtectionDomain domain) {\n+            PermissionCollection perms = new Permissions();\n+            perms.add(new AllPermission());\n+            return perms;\n+        }\n+\n+        @Override\n+        public boolean implies(ProtectionDomain domain, Permission permission) {\n+            if (permission.equals(accessPerm)) {\n+                return policy.implies(domain, permission);\n+            }\n+            return super.implies(domain, permission);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new IllegalPackageAccess(), args);\n+        System.out.println(\"TEST PASS - OK\");\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        Policy.setPolicy(new MyPolicy());\n+        System.setSecurityManager(new SecurityManager());\n+\n+        \/\/ Remove all security providers so a fallback scheme\n+        \/\/ that creates class instances is forced.\n+        for (Provider provider : Security.getProviders()) {\n+            Security.removeProvider(provider.getName());\n+        }\n+\n+        KeyPair kp = KeyPairGenerator.getInstance(\"DH\", p)\n+                .generateKeyPair();\n+        byte[] encPubKey = kp.getPublic().getEncoded();\n+        KeyFactory kf = KeyFactory.getInstance(\"DH\", p);\n+\n+        \/\/ Requires access to a SunJCE class that parses\n+        \/\/ the encoded key.\n+        kf.generatePublic(new X509EncodedKeySpec(encPubKey));\n+\n+        System.setSecurityManager(null);\n+        Policy.setPolicy(policy);\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/IllegalPackageAccess.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}