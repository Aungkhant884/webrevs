{"files":[{"patch":"@@ -185,0 +185,1 @@\n+    int fd;\n@@ -192,1 +193,2 @@\n-  bool same_fd(int fd1, int fd2);\n+  \/\/ params are indices into _fdinfos\n+  bool same_fd(int i1, int i2);\n@@ -194,2 +196,2 @@\n-  fdinfo *_fdinfos;\n-  int _len;\n+  bool _inited;\n+  GrowableArray<fdinfo> _fdinfos;\n@@ -198,3 +200,3 @@\n-    assert(inited(), \"\");\n-    assert(i < len(), \"\");\n-    assert(_fdinfos[i].state != CLOSED, \"\");\n+    assert(_inited, \"\");\n+    assert(i < _fdinfos.length(), \"\");\n+    assert(_fdinfos.at(i).state != CLOSED, \"\");\n@@ -206,2 +208,1 @@\n-  bool inited() { return _fdinfos != NULL; }\n-  int len() { return _len; }\n+  int len() { return _fdinfos.length(); }\n@@ -209,4 +210,12 @@\n-  state_t get_state(int i, state_t orstate = INVALID) {\n-    assert(inited(), \"\");\n-    if (i < len()) {\n-      return _fdinfos[i].state;\n+  state_t get_state(int i) {\n+    assert(_inited, \"\");\n+    assert(i < _fdinfos.length(), \"\");\n+    return _fdinfos.at(i).state;\n+  }\n+\n+  state_t find_state(int fd, state_t orstate) {\n+    for (int i = 0; i < _fdinfos.length(); ++i) {\n+      fdinfo *info = _fdinfos.adr_at(i);\n+      if (info->fd == fd) {\n+        return info->state;\n+      }\n@@ -214,1 +223,0 @@\n-    guarantee(orstate != INVALID, \"can't use default orstate\");\n@@ -218,17 +226,4 @@\n-  void set_state(int i, state_t newst) {\n-    assert(inited(), \"\");\n-    assert(i < len(), \"\");\n-    _fdinfos[i].state = newst;\n-  }\n-\n-  void mark(int i, mark_t m) {\n-    assert_mark(i);\n-    _fdinfos[i].mark |= (unsigned)m;\n-  }\n-  void clear(int i, mark_t m) {\n-    assert_mark(i);\n-    _fdinfos[i].mark &= ~(unsigned)m;\n-  }\n-  bool check(int i, mark_t m) {\n-    assert_mark(i);\n-    return 0 != (_fdinfos[i].mark & (unsigned)m);\n+  int get_fd(int i) {\n+    assert(_inited, \"\");\n+    assert(i < _fdinfos.length(), \"\");\n+    return _fdinfos.at(i).fd;\n@@ -238,3 +233,3 @@\n-    assert(inited(), \"\");\n-    assert(i < len(), \"\");\n-    return &_fdinfos[i].stat;\n+    assert(_inited, \"\");\n+    assert(i < _fdinfos.length(), \"\");\n+    return &_fdinfos.at(i).stat;\n@@ -244,2 +239,2 @@\n-    _fdinfos(NULL),\n-    _len(-1)\n+    _inited(false),\n+    _fdinfos(16, mtInternal)\n@@ -251,6 +246,0 @@\n-\n-  ~FdsInfo() {\n-    if (_fdinfos) {\n-      FREE_C_HEAP_ARRAY(fdinfo, _fdinfos);\n-    }\n-  }\n@@ -5780,2 +5769,6 @@\n-bool FdsInfo::same_fd(int fd1, int fd2) {\n-  if (!same_stat(get_stat(fd1), get_stat(fd2))) {\n+bool FdsInfo::same_fd(int i1, int i2) {\n+  assert(i1 < _fdinfos.length(), \"\");\n+  assert(i2 < _fdinfos.length(), \"\");\n+  fdinfo *fi1 = _fdinfos.adr_at(i1);\n+  fdinfo *fi2 = _fdinfos.adr_at(i2);\n+  if (!same_stat(&fi1->stat, &fi2->stat)) {\n@@ -5785,2 +5778,2 @@\n-  int flags1 = fcntl(fd1, F_GETFL);\n-  int flags2 = fcntl(fd2, F_GETFL);\n+  int flags1 = fcntl(fi1->fd, F_GETFL);\n+  int flags2 = fcntl(fi2->fd, F_GETFL);\n@@ -5793,2 +5786,2 @@\n-  fcntl(fd1, F_SETFL, new_flags1);\n-  if (fcntl(fd1, F_GETFL) != new_flags1) {\n+  fcntl(fi1->fd, F_SETFL, new_flags1);\n+  if (fcntl(fi1->fd, F_GETFL) != new_flags1) {\n@@ -5800,1 +5793,1 @@\n-  const int new_flags2 = fcntl(fd2, F_GETFL);\n+  const int new_flags2 = fcntl(fi2->fd, F_GETFL);\n@@ -5803,1 +5796,1 @@\n-  fcntl(fd1, flags1);\n+  fcntl(fi2->fd, flags1);\n@@ -5809,1 +5802,1 @@\n-  assert(!inited(), \"should be called only once\");\n+  assert(!_inited, \"should be called only once\");\n@@ -5811,3 +5804,2 @@\n-  const int max_fd = sysconf(_SC_OPEN_MAX);\n-  _fdinfos = NEW_C_HEAP_ARRAY(fdinfo, max_fd, mtInternal);\n-  int last_fd = -1;\n+  char path[PATH_MAX];\n+  struct dirent *dp;\n@@ -5815,3 +5807,13 @@\n-  for (int i = 0; i < max_fd; ++i) {\n-    fdinfo* info = _fdinfos + i;\n-    int r = fstat(i, &info->stat);\n+  DIR *dir = opendir(\"\/proc\/self\/fd\");\n+  int dfd = dirfd(dir);\n+  while (dp = readdir(dir)) {\n+    if (dp->d_name[0] == '.') {\n+      \/\/ skip \".\" and \"..\"\n+      continue;\n+    }\n+    fdinfo info;\n+    info.fd = atoi(dp->d_name);\n+    if (info.fd == dfd) {\n+      continue;\n+    }\n+    int r = fstat(info.fd, &info.stat);\n@@ -5819,1 +5821,1 @@\n-      info->state = CLOSED;\n+      info.state = CLOSED;\n@@ -5822,3 +5824,3 @@\n-    info->state = ROOT; \/\/ can be changed to DUP_OF_0 + N below\n-    info->mark = 0;\n-    last_fd = i;\n+    info.state = ROOT; \/\/ can be changed to DUP_OF_0 + N below\n+    info.mark = 0;\n+    _fdinfos.append(info);\n@@ -5826,2 +5828,2 @@\n-  _len = last_fd + 1;\n-  _fdinfos = REALLOC_C_HEAP_ARRAY(fdinfo, _fdinfos, _len, mtInternal);\n+  closedir(dir);\n+  _inited = true;\n@@ -5829,1 +5831,2 @@\n-  for (int i = 0; i < _len; ++i) {\n+  for (int i = 0; i < _fdinfos.length(); ++i) {\n+    fdinfo *info = _fdinfos.adr_at(i);\n@@ -5832,1 +5835,1 @@\n-        _fdinfos[i].state = (state_t)(DUP_OF_0 + j);\n+        info->state = (state_t)(DUP_OF_0 + j);\n@@ -5837,1 +5840,1 @@\n-    if (get_state(i) == ROOT) {\n+    if (info->state == ROOT) {\n@@ -5839,1 +5842,1 @@\n-      int r = readfdlink(i, fdpath, sizeof(fdpath));\n+      int r = readfdlink(info->fd, fdpath, sizeof(fdpath));\n@@ -5841,1 +5844,1 @@\n-      if (get_stat(i)->st_nlink == 0 ||\n+      if (info->stat.st_nlink == 0 ||\n@@ -5844,1 +5847,1 @@\n-        mark(i, FdsInfo::M_CANT_RESTORE);\n+        info->mark |= FdsInfo::M_CANT_RESTORE;\n@@ -6060,0 +6063,1 @@\n+    int fd = fds.get_fd(i);\n@@ -6062,2 +6066,3 @@\n-    const char* type = stat2strtype(fds.get_stat(i)->st_mode);\n-    int linkret = readfdlink(i, detailsbuf, sizeof(detailsbuf));\n+    struct stat* st = fds.get_stat(i);\n+    const char* type = stat2strtype(st->st_mode);\n+    int linkret = readfdlink(fd, detailsbuf, sizeof(detailsbuf));\n@@ -6065,1 +6070,1 @@\n-    print_resources(\"JVM: FD fd=%d type=%s path=\\\"%s\\\"\", i, type, details);\n+    print_resources(\"JVM: FD fd=%d type=%s path=\\\"%s\\\"\", fd, type, details);\n@@ -6067,1 +6072,1 @@\n-    if (is_claimed_fd(i)) {\n+    if (is_claimed_fd(fd)) {\n@@ -6072,1 +6077,1 @@\n-    if (_vm_inited_fds.get_state(i, FdsInfo::CLOSED) != FdsInfo::CLOSED) {\n+    if (_vm_inited_fds.find_state(fd, FdsInfo::CLOSED) != FdsInfo::CLOSED) {\n@@ -6077,1 +6082,0 @@\n-    struct stat* st = fds.get_stat(i);\n@@ -6079,1 +6083,1 @@\n-      if (is_socket_from_jcmd(i)){\n+      if (is_socket_from_jcmd(fd)){\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":79,"deletions":75,"binary":false,"changes":154,"status":"modified"}]}