{"files":[{"patch":"@@ -76,1 +76,0 @@\n-SystemProperty* Arguments::_system_properties_for_restore = NULL;\n@@ -2318,1 +2317,1 @@\n-bool Arguments::is_restoring(const JavaVMInitArgs* args) {\n+bool Arguments::is_restore_option_set(const JavaVMInitArgs* args) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -280,3 +280,0 @@\n-  \/\/ Property list when restoring from checkpoint\n-  static SystemProperty* _system_properties_for_restore;\n-\n@@ -386,0 +383,4 @@\n+  \/\/ System properties\n+  static bool add_property(const char* prop, PropertyWriteable writeable=WriteableProperty,\n+                           PropertyInternal internal=ExternalProperty);\n+\n@@ -474,4 +475,0 @@\n-  \/\/ restore feature\n-  static bool add_property_for_restore(const char* prop,\n-                                       PropertyWriteable writeable=WriteableProperty,\n-                                       PropertyInternal internal=ExternalProperty);\n@@ -531,5 +528,0 @@\n-  \/\/ System properties\n-  static bool add_property(const char* prop,\n-                           PropertyWriteable writeable=WriteableProperty,\n-                           PropertyInternal internal=ExternalProperty);\n-\n@@ -639,3 +631,0 @@\n-  \/\/ restore feature\n-  static SystemProperty* system_properties_for_restore() { return _system_properties_for_restore; }\n-\n@@ -659,1 +648,1 @@\n-  static bool is_restoring(const JavaVMInitArgs* args);\n+  static bool is_restore_option_set(const JavaVMInitArgs* args);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2708,1 +2708,1 @@\n-  if (Arguments::is_restoring(args)) {\n+  if (Arguments::is_restore_option_set(args)) {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,9 +168,0 @@\n-            for (String str: newProperties) {\n-\t        System.out.println(\"property: \" + str);\n-\t    }\n-        } else {\n-            System.out.println(\"No new properties specified\");\n-\t}\n-\n-        if (newProperties != null && newProperties.length > 0) {\n-            Arrays.stream(newProperties).forEach(System.out::println);\n@@ -185,1 +176,0 @@\n-            System.out.println(\"new arguments: \" + newArguments);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -246,0 +246,7 @@\n+        \/**\n+         * Return a Properties instance of the command line and VM options\n+         * defined by name and value.\n+         * The Properties instance is sized to include the fixed properties.\n+         *\n+         * @return return a Properties instance of the command line and VM options\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/SystemProps.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}