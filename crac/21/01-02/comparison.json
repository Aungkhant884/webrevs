{"files":[{"patch":"@@ -120,1 +120,0 @@\n-JVM_GetModifiableProperties\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -103,6 +103,0 @@\n-\/*\n- * Return an array of all modifiable properties as alternating name and value pairs.\n- *\/\n-JNIEXPORT jobjectArray JNICALL\n-JVM_GetModifiableProperties(JNIEnv *env);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -318,34 +318,0 @@\n-\/*\n- * Return all of the system properties in a Java String array with alternating\n- * names and values from the jvm SystemProperty which are modifiable on restore.\n- *\/\n-JVM_ENTRY(jobjectArray, JVM_GetModifiableProperties(JNIEnv *env))\n-  ResourceMark rm(THREAD);\n-  HandleMark hm(THREAD);\n-  int ndx = 0;\n-\n-  SystemProperty* p = Arguments::system_properties();\n-  int count = Arguments::PropertyList_modifiable_count(p);\n-\n-  \/\/ Allocate result String array\n-  InstanceKlass* ik = vmClasses::String_klass();\n-  objArrayOop r = oopFactory::new_objArray(ik, count * 2, CHECK_NULL);\n-  objArrayHandle result_h(THREAD, r);\n-\n-  while (p != NULL) {\n-    const char * key = p->key();\n-    if (p->modifiable_on_restore() &&\n-       (strcmp(key, \"sun.nio.MaxDirectMemorySize\") != 0)) {\n-        const char * value = p->value();\n-        Handle key_str    = java_lang_String::create_from_platform_dependent_str(key, CHECK_NULL);\n-        Handle value_str  = java_lang_String::create_from_platform_dependent_str((value != NULL ? value : \"\"), CHECK_NULL);\n-        result_h->obj_at_put(ndx * 2,  key_str());\n-        result_h->obj_at_put(ndx * 2 + 1, value_str());\n-        ndx++;\n-    }\n-    p = p->next();\n-  }\n-\n-  return (jobjectArray) JNIHandles::make_local(THREAD, result_h());\n-JVM_END\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"}]}