{"files":[{"patch":"@@ -1158,0 +1158,13 @@\n+static void parse_argname(const char *arg, const char **argname, size_t *arg_len, bool *has_plus_minus) {\n+  \/\/ Determine if the flag has '+', '-', or '=' characters.\n+  *has_plus_minus = (*arg == '+' || *arg == '-');\n+  *argname = *has_plus_minus ? arg + 1 : arg;\n+\n+  const char* equal_sign = strchr(*argname, '=');\n+  if (equal_sign == NULL) {\n+    *arg_len = strlen(*argname);\n+  } else {\n+    *arg_len = equal_sign - *argname;\n+  }\n+}\n+\n@@ -1167,4 +1180,1 @@\n-  \/\/ Determine if the flag has '+', '-', or '=' characters.\n-  bool has_plus_minus = (*arg == '+' || *arg == '-');\n-  const char* const argname = has_plus_minus ? arg + 1 : arg;\n-\n+  const char* argname;\n@@ -1172,6 +1182,2 @@\n-  const char* equal_sign = strchr(argname, '=');\n-  if (equal_sign == NULL) {\n-    arg_len = strlen(argname);\n-  } else {\n-    arg_len = equal_sign - argname;\n-  }\n+  bool has_plus_minus;\n+  parse_argname(arg, &argname, &arg_len, &has_plus_minus);\n@@ -2338,16 +2344,16 @@\n-    if (!match_option(option, \"-Djava.class.path\", &tail) &&\n-        !match_option(option, \"-Dsun.java.launcher\", &tail)) {\n-      if (match_option(option, \"-D\", &tail)) {\n-        const char* key = NULL;\n-        const char* value = NULL;\n-\n-        get_key_value(tail, &key, &value);\n-\n-        if (strcmp(key, \"sun.java.command\") == 0) {\n-          char *old_java_command = _java_command;\n-          _java_command = os::strdup_check_oom(value, mtArguments);\n-          if (old_java_command != NULL) {\n-            os::free(old_java_command);\n-          }\n-        } else {\n-          add_property(tail);\n+    if (match_option(option, \"-Djava.class.path\", &tail) ||\n+        match_option(option, \"-Dsun.java.launcher\", &tail)) {\n+      \/\/ These options are already set based on -cp (and aliases), -jar\n+      \/\/ or even inheriting the CLASSPATH env var; therefore it's too\n+      \/\/ late to prohibit explicitly setting them at this point.\n+    } else if (match_option(option, \"-D\", &tail)) {\n+      const char* key = NULL;\n+      const char* value = NULL;\n+\n+      get_key_value(tail, &key, &value);\n+\n+      if (strcmp(key, \"sun.java.command\") == 0) {\n+        char *old_java_command = _java_command;\n+        _java_command = os::strdup_check_oom(value, mtArguments);\n+        if (old_java_command != NULL) {\n+          os::free(old_java_command);\n@@ -2355,4 +2361,18 @@\n-      } else if (match_option(option, \"-XX:\", &tail)) { \/\/ -XX:xxxx\n-        \/\/ Skip -XX:Flags= and -XX:VMOptionsFile= since those cases have\n-        \/\/ already been handled\n-        if (!process_argument(tail, args->ignoreUnrecognized, JVMFlagOrigin::COMMAND_LINE)) {\n+      } else {\n+        add_property(tail);\n+      }\n+    } else if (match_option(option, \"-XX:\", &tail)) { \/\/ -XX:xxxx\n+      \/\/ Skip -XX:Flags= and -XX:VMOptionsFile= since those cases have\n+      \/\/ already been handled\n+      if (!process_argument(tail, args->ignoreUnrecognized, JVMFlagOrigin::COMMAND_LINE)) {\n+        return false;\n+      }\n+      const char *argname;\n+      size_t arg_len;\n+      bool ignored_plus_minus;\n+      parse_argname(tail, &argname, &arg_len, &ignored_plus_minus);\n+      const JVMFlag* flag = JVMFlag::find_declared_flag((const char*)argname, arg_len);\n+      if (flag != NULL) {\n+        if (!flag->is_restore_settable()) {\n+          jio_fprintf(defaultStream::error_stream(),\n+            \"Flag %.*s cannot be set during restore: %s\\n\", arg_len, argname, option->optionString);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":50,"deletions":30,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -533,3 +533,4 @@\n-const int DIAGNOSTIC   = JVMFlag::KIND_DIAGNOSTIC;\n-const int MANAGEABLE   = JVMFlag::KIND_MANAGEABLE;\n-const int EXPERIMENTAL = JVMFlag::KIND_EXPERIMENTAL;\n+const int DIAGNOSTIC       = JVMFlag::KIND_DIAGNOSTIC;\n+const int MANAGEABLE       = JVMFlag::KIND_MANAGEABLE;\n+const int EXPERIMENTAL     = JVMFlag::KIND_EXPERIMENTAL;\n+const int RESTORE_SETTABLE = JVMFlag::KIND_RESTORE_SETTABLE;\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-\n+    KIND_RESTORE_SETTABLE   = 1 << 16,\n@@ -254,0 +254,1 @@\n+  bool is_restore_settable() const { return (_flags & (KIND_RESTORE_SETTABLE | KIND_MANAGEABLE)) != 0; }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-\/\/ DIAGNOSTIC, EXPERIMENTAL, or MANAGEABLE. Currently extra_attrs can be used\n-\/\/ only with product\/product_pd flags.\n+\/\/ DIAGNOSTIC, EXPERIMENTAL, MANAGEABLE and RESTORE_SETTABLE. Currently\n+\/\/ extra_attrs can be used only with product\/product_pd flags.\n@@ -100,0 +100,3 @@\n+\/\/ RESTORE_SETTABLE are flags that can be set during restore from a snapshot.\n+\/\/    All MANAGEABLE flags are implicitly RESTORE_SETTABLE but\n+\/\/    RESTORE_SETTABLE are not MANAGEABLE.\n@@ -2094,3 +2097,1 @@\n-  \/* It does not make sense to change this flag in runtime but we'll tag *\/ \\\n-  \/* it MANAGEABLE to prevent warnings when setting this on restore. *\/     \\\n-  product(ccstr, CRaCRestoreFrom, NULL, MANAGEABLE,                         \\\n+  product(ccstr, CRaCRestoreFrom, NULL, RESTORE_SETTABLE,                   \\\n@@ -2102,3 +2103,3 @@\n-  product(bool, CRaCIgnoreRestoreIfUnavailable, false, \"Ignore \"            \\\n-      \"-XX:CRaCRestoreFrom and continue initialization if restore is \"      \\\n-      \"unavailable\")                                                        \\\n+  product(bool, CRaCIgnoreRestoreIfUnavailable, false, RESTORE_SETTABLE,    \\\n+      \"Ignore -XX:CRaCRestoreFrom and continue initialization if restore \"  \\\n+      \"is unavailable\")                                                     \\\n@@ -2106,1 +2107,1 @@\n-  product(ccstr, CRaCIgnoredFileDescriptors, NULL, MANAGEABLE,              \\\n+  product(ccstr, CRaCIgnoredFileDescriptors, NULL, RESTORE_SETTABLE,        \\\n@@ -2128,1 +2129,1 @@\n-  product(bool, CRTrace, true, \"Minimal C\/R tracing\")                       \\\n+  product(bool, CRTrace, true, MANAGEABLE, \"Minimal C\/R tracing\")           \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2709,1 +2709,3 @@\n-    Arguments::parse_options_for_restore(args);\n+    if (!Arguments::parse_options_for_restore(args)) {\n+      return JNI_ERR;\n+    }\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -238,2 +238,2 @@\n-    \/\/ only writeable flags are allowed to be set\n-    if (f->is_writeable()) {\n+    \/\/ only writeable or restore_settable flags are allowed to be set\n+    if (f->is_writeable() || f->is_restore_settable() && origin == JVMFlagOrigin::CRAC_RESTORE) {\n","filename":"src\/hotspot\/share\/services\/writeableFlags.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.test.lib.crac.CracEngine;\n@@ -46,2 +45,2 @@\n-        builder.vmOption(\"-XX:CRaCCheckpointTo=another\");\n-        builder.vmOption(\"-XX:NativeMemoryTracking=summary\");\n+        builder.vmOption(\"-XX:CRaCCheckpointTo=another\"); \/\/ manageable\n+        builder.vmOption(\"-XX:CRaCIgnoredFileDescriptors=42,43\"); \/\/ restore_settable\n@@ -49,0 +48,3 @@\n+        \/\/ Setting non-manageable option\n+        builder.vmOption(\"-XX:NativeMemoryTracking=summary\");\n+        assertEquals(1, builder.startRestore().waitFor());\n@@ -66,0 +68,3 @@\n+        VMOption ignoredFileDescriptors = bean.getVMOption(\"CRaCIgnoredFileDescriptors\");\n+        assertEquals(\"42,43\", ignoredFileDescriptors.getValue());\n+        assertEquals(VMOption.Origin.OTHER, ignoredFileDescriptors.getOrigin());\n","filename":"test\/jdk\/jdk\/crac\/VMOptionsTest.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    \/\/ make sure to update copy() when adding another field here\n@@ -62,0 +63,18 @@\n+    public CracBuilder copy() {\n+        CracBuilder other = new CracBuilder();\n+        other.verbose = verbose;\n+        other.debug = debug;\n+        other.classpathEntries.addAll(classpathEntries);\n+        other.env.putAll(env);\n+        other.vmOptions.addAll(vmOptions);\n+        other.imageDir = imageDir;\n+        other.engine = engine;\n+        other.printResources = printResources;\n+        other.main = main;\n+        other.args = args == null ? null : Arrays.copyOf(args, args.length);\n+        other.captureOutput = captureOutput;\n+        other.dockerImageName = dockerImageName;\n+        other.dockerOptions = dockerOptions == null ? null : Arrays.copyOf(dockerOptions, dockerOptions.length);\n+        return other;\n+    }\n+\n@@ -155,1 +174,1 @@\n-        List<String> cmd = prepareCommand(javaPrefix);\n+        List<String> cmd = prepareCommand(javaPrefix, false);\n@@ -249,1 +268,1 @@\n-        List<String> cmd = prepareCommand(prefixJava);\n+        List<String> cmd = prepareCommand(prefixJava, true);\n@@ -292,1 +311,1 @@\n-    private List<String> prepareCommand(List<String> javaPrefix) {\n+    private List<String> prepareCommand(List<String> javaPrefix, boolean isRestore) {\n@@ -303,8 +322,10 @@\n-        cmd.add(\"-cp\");\n-        cmd.add(getClassPath());\n-        if (engine != null) {\n-            cmd.add(\"-XX:CREngine=\" + engine.engine);\n-        }\n-        if (printResources) {\n-            cmd.add(\"-XX:+UnlockDiagnosticVMOptions\");\n-            cmd.add(\"-XX:+CRPrintResourcesOnCheckpoint\");\n+        if (!isRestore) {\n+            cmd.add(\"-cp\");\n+            cmd.add(getClassPath());\n+            if (engine != null) {\n+                cmd.add(\"-XX:CREngine=\" + engine.engine);\n+            }\n+            if (printResources) {\n+                cmd.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+                cmd.add(\"-XX:+CRPrintResourcesOnCheckpoint\");\n+            }\n@@ -314,1 +335,4 @@\n-            cmd.add(\"-XX:-CRDoThrowCheckpointException\");\n+            if (!isRestore) {\n+                cmd.add(\"-XX:+UnlockExperimentalVMOptions\");\n+                cmd.add(\"-XX:-CRDoThrowCheckpointException\");\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":36,"deletions":12,"binary":false,"changes":48,"status":"modified"}]}