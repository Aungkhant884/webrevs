{"files":[{"patch":"@@ -74,0 +74,1 @@\n+#include \"services\/writeableFlags.hpp\"\n@@ -295,0 +296,1 @@\n+    int _nflags;\n@@ -347,0 +349,1 @@\n+      const char* const* flags, int num_flags,\n@@ -354,0 +357,1 @@\n+      num_flags,\n@@ -362,0 +366,6 @@\n+    for (int i = 0; i < num_flags; ++i) {\n+      if (!write_check_error(fd, flags[i], strlen(flags[i]) + 1)) {\n+        return false;\n+      }\n+    }\n+\n@@ -6442,0 +6452,1 @@\n+          Arguments::jvm_flags_array(), Arguments::num_jvm_flags(),\n@@ -6546,0 +6557,27 @@\n+  for (int i = 0; i < hdr->_nflags; i++) {\n+    FormatBuffer<80> err_msg(\"%s\", \"\");\n+    JVMFlag::Error result;\n+    const char *name = cursor;\n+    if (*cursor == '+' || *cursor == '-') {\n+      name = cursor + 1;\n+      result = WriteableFlags::set_flag(name, *cursor == '+' ? \"true\" : \"false\",\n+        JVMFlagOrigin::CRAC_RESTORE, err_msg);\n+      cursor += strlen(cursor) + 1;\n+    } else {\n+      char* eq = strchrnul(cursor, '=');\n+      if (*eq == '\\0') {\n+        result = JVMFlag::Error::MISSING_VALUE;\n+        cursor = eq + 1;\n+      } else {\n+        *eq = '\\0';\n+        char* value = eq + 1;\n+        result = WriteableFlags::set_flag(cursor, value, JVMFlagOrigin::CRAC_RESTORE, err_msg);\n+        cursor = value + strlen(value) + 1;\n+      }\n+    }\n+    if (result != JVMFlag::Error::SUCCESS) {\n+      warning(\"VM Option '%s' cannot be changed, ignoring: %s\",\n+        name, JVMFlag::flag_error_str(result));\n+    }\n+  }\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -137,0 +137,1 @@\n+    case JVMFlagOrigin::CRAC_RESTORE: return \"CRaC restore\";\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2361,0 +2361,1 @@\n+        build_jvm_flags(tail);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -408,0 +408,2 @@\n+    case JVMFlagOrigin::CRAC_RESTORE:\n+      st->print(\"crac restore\");\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  CRAC_RESTORE     = 9,\n@@ -51,1 +52,1 @@\n-ENUMERATOR_RANGE(JVMFlagOrigin, JVMFlagOrigin::DEFAULT, JVMFlagOrigin::JIMAGE_RESOURCE)\n+ENUMERATOR_RANGE(JVMFlagOrigin, JVMFlagOrigin::DEFAULT, JVMFlagOrigin::CRAC_RESTORE)\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2091,1 +2091,2 @@\n-  product(ccstr, CRaCCheckpointTo, NULL, \"Path to checkpoint image\")        \\\n+  product(ccstr, CRaCCheckpointTo, NULL, MANAGEABLE,                        \\\n+        \"Path to checkpoint image directory\")                               \\\n@@ -2093,2 +2094,4 @@\n-  product(ccstr, CRaCRestoreFrom, NULL, \"Path to image for restore, \"       \\\n-      \"replaces the initializing VM on success\")                            \\\n+  \/* It does not make sense to change this flag in runtime but we'll tag *\/ \\\n+  \/* it MANAGEABLE to prevent warnings when setting this on restore. *\/     \\\n+  product(ccstr, CRaCRestoreFrom, NULL, MANAGEABLE,                         \\\n+      \"Path to image for restore, replaces the initializing VM on success\") \\\n@@ -2103,4 +2106,5 @@\n-  product(ccstr, CRaCIgnoredFileDescriptors, NULL, \"Comma-separated list \"  \\\n-      \"of file descriptor numbers or paths. All file descriptors greater \"  \\\n-      \"than 2 (stdin, stdout and stderr are excluded automatically) not \"   \\\n-      \"in this list are closed when the VM is started.\")                    \\\n+  product(ccstr, CRaCIgnoredFileDescriptors, NULL, MANAGEABLE,              \\\n+      \"Comma-separated list of file descriptor numbers or paths. \"          \\\n+      \"All file descriptors greater than 2 (stdin, stdout and stderr are \"  \\\n+      \"excluded automatically) not in this list are closed when the VM \"    \\\n+      \"is started.\")                                                        \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2604,0 +2604,1 @@\n+  declare_constant(JVMFlagOrigin::CRAC_RESTORE)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import com.sun.management.HotSpotDiagnosticMXBean;\n+import com.sun.management.VMOption;\n+import jdk.crac.*;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+import jdk.test.lib.crac.CracTest;\n+\n+import java.lang.management.ManagementFactory;\n+\n+import static jdk.test.lib.Asserts.assertEquals;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build VMOptionsTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class VMOptionsTest implements CracTest {\n+    @Override\n+    public void test() throws Exception {\n+        CracBuilder builder = new CracBuilder();\n+        builder.doCheckpoint();\n+        builder.vmOption(\"-XX:CRaCCheckpointTo=another\");\n+        builder.vmOption(\"-XX:NativeMemoryTracking=summary\");\n+        builder.doRestore();\n+    }\n+\n+    @Override\n+    public void exec() throws RestoreException, CheckpointException {\n+        HotSpotDiagnosticMXBean bean = ManagementFactory.getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n+        VMOption checkpointTo1 = bean.getVMOption(\"CRaCCheckpointTo\");\n+        assertEquals(\"cr\", checkpointTo1.getValue());\n+        assertEquals(VMOption.Origin.VM_CREATION, checkpointTo1.getOrigin());\n+        VMOption nmt1 = bean.getVMOption(\"NativeMemoryTracking\");\n+        assertEquals(\"off\", nmt1.getValue());\n+        assertEquals(VMOption.Origin.DEFAULT, nmt1.getOrigin());\n+\n+        Core.checkpointRestore();\n+\n+        VMOption checkpointTo2 = bean.getVMOption(\"CRaCCheckpointTo\");\n+        assertEquals(\"another\", checkpointTo2.getValue());\n+        assertEquals(VMOption.Origin.OTHER, checkpointTo2.getOrigin());\n+        VMOption nmt = bean.getVMOption(\"NativeMemoryTracking\");\n+        assertEquals(\"off\", nmt.getValue());\n+        assertEquals(VMOption.Origin.DEFAULT, nmt.getOrigin());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/VMOptionsTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -34,0 +34,1 @@\n+    final List<String> vmOptions = new ArrayList<>();\n@@ -92,0 +93,5 @@\n+    public CracBuilder vmOption(String option) {\n+        vmOptions.add(option);\n+        return this;\n+    }\n+\n@@ -310,0 +316,1 @@\n+        cmd.addAll(vmOptions);\n@@ -329,1 +336,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-            throw new ClassNotFoundException(\"Test class \" + testClassName + \" not found, add jtreg tag @build \" + args[0], e);\n+            throw new ClassNotFoundException(\"Test class \" + testClassName + \" not found, add jtreg tag @build \" + testClassName, e);\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}