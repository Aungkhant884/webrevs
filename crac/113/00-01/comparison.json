{"files":[{"patch":"@@ -200,0 +200,2 @@\n+  void stop() { _lock.lock(); }\n+  void resume() { _lock.unlock(); }\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -724,0 +724,12 @@\n+\n+void LogConfiguration::close() {\n+  for (size_t i = 0; i < _n_outputs; i++) {\n+    _outputs[i]->close();\n+  }\n+}\n+\n+void LogConfiguration::reopen() {\n+  for (size_t i = 0; i < _n_outputs; i++) {\n+    _outputs[i]->reopen();\n+  }\n+}\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -139,0 +139,2 @@\n+  static void close();\n+  static void reopen();\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -468,0 +468,33 @@\n+\n+int LogFileOutput::fd_get() const {\n+  if (_stream == nullptr) {\n+    return -1;\n+  }\n+  return LogFileStreamOutput::fd_get();\n+}\n+\n+void LogFileOutput::close() {\n+  if (_stream == nullptr) {\n+    return;\n+  }\n+  if (fclose(_stream)) {\n+    jio_fprintf(defaultStream::error_stream(), \"Error closing log file '%s' (%s).\\n\",\n+                _file_name, os::strerror(errno));\n+  }\n+  _stream = nullptr;\n+}\n+\n+void LogFileOutput::reopen() {\n+  assert(_stream == nullptr, \"reopening an already opened log file\");\n+\n+  \/\/ Open the active log file using the same stream as before\n+  _stream = os::fopen(_file_name, FileOpenMode);\n+  if (_stream == nullptr) {\n+    jio_fprintf(defaultStream::error_stream(), \"Could not reopen log file '%s' (%s).\\n\",\n+                _file_name, os::strerror(errno));\n+    return;\n+  }\n+\n+  \/\/ _current_size still keeps how much data we wrote for the rotation purposes.\n+  \/\/ The log file may contain more data now.\n+}\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -91,0 +91,3 @@\n+  virtual int fd_get() const override;\n+  virtual void close() override;\n+  virtual void reopen() override;\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  virtual int fd_get() const { return fileno(_stream); }\n+  virtual int fd_get() const override { return fileno(_stream); }\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+  virtual void close() {}\n+  virtual void reopen() {}\n","filename":"src\/hotspot\/share\/logging\/logOutput.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"logging\/logAsyncWriter.hpp\"\n+#include \"logging\/logConfiguration.hpp\"\n@@ -312,0 +314,7 @@\n+  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n+  if (aio_writer) {\n+    aio_writer->flush();\n+    aio_writer->stop();\n+  }\n+  LogConfiguration::close();\n+\n@@ -363,0 +372,5 @@\n+  LogConfiguration::reopen();\n+  if (aio_writer) {\n+    aio_writer->resume();\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}