{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"logging\/logConfiguration.hpp\"\n@@ -387,0 +388,4 @@\n+  if (LogConfiguration::is_fd_used(fd)) {\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -714,0 +714,10 @@\n+\n+bool LogConfiguration::is_fd_used(int fd) {\n+  assert(fd != -1, \"fd must be valid\");\n+  for (size_t i = 0; i < _n_outputs; i++) {\n+    if (fd == _outputs[i]->fd_get()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -136,0 +136,3 @@\n+\n+  \/\/ Is this file descriptor in use?\n+  static bool is_fd_used(int fd);\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+  virtual int fd_get() const { return fileno(_stream); }\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+  virtual int fd_get() const { return -1; }\n","filename":"src\/hotspot\/share\/logging\/logOutput.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.internal.crac.JDKFdResource;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.crac:+open\n+ * @requires (os.family == \"linux\")\n+ * @build FDPolicyTestBase\n+ * @build LoggingFileOpenTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class LoggingFileOpenTest extends FDPolicyTestBase implements CracTest {\n+    @Override\n+    public void test() throws Exception {\n+        Path gcPath = Files.createTempFile(getClass().getName(), \"-gc.txt\");\n+        try {\n+            CracBuilder builder = new CracBuilder()\n+                    .vmOption(\"-Xlog:gc:\" + gcPath);\n+            builder.startCheckpoint().waitForCheckpointed();\n+            var oa =builder.captureOutput(true).doRestore().outputAnalyzer()\n+                    .shouldNotContain(\"CRaC closing file descriptor\")\n+                    .shouldNotContain(\"Could not flush log\")\n+                    .shouldNotContain(\"Could not close log file\")\n+                    .shouldNotContain(\"Bad file descriptor\")\n+                    .shouldContain(RESTORED_MESSAGE);\n+        } finally {\n+            Files.deleteIfExists(gcPath);\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+        System.out.println(RESTORED_MESSAGE);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/LoggingFileOpenTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}