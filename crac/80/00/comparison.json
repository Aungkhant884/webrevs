{"files":[{"patch":"@@ -6066,2 +6066,1 @@\n-  \/\/ dry-run fails checkpoint\n-  bool ok = !_dry_run;\n+  bool ok = true;\n@@ -6080,1 +6079,1 @@\n-    print_resources(\"JVM: FD fd=%d type=%s path=\\\"%s\\\"\", fd, type, details);\n+    print_resources(\"JVM: FD fd=%d type=%s path=\\\"%s\\\" \", fd, type, details);\n@@ -6105,1 +6104,1 @@\n-    int len = snprintf(msg, buflen, \"FD fd=%d type=%s path=%s\", i, type, detailsbuf);\n+    int len = snprintf(msg, buflen, \"FD fd=%d type=%s path=%s\", fd, type, detailsbuf);\n@@ -6110,1 +6109,1 @@\n-  if (!ok && CRHeapDumpOnCheckpointException) {\n+  if ((!ok || _dry_run) && CRHeapDumpOnCheckpointException) {\n@@ -6116,0 +6115,3 @@\n+  } else if (_dry_run) {\n+    _ok = ok;\n+    return;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import jdk.crac.*;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test FailedResourceTest\n+ * @library \/test\/lib\n+ * @build FailedResourceTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+\n+public class FailedResourceTest implements CracTest {\n+    public static final String EXCEPTION_MESSAGE = \"Resource failed\";\n+\n+    @Override\n+    public void test() throws Exception {\n+        new CracBuilder().startCheckpoint().waitForSuccess();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        AtomicBoolean ranAfter = new AtomicBoolean();\n+        Resource resource = new Resource() {\n+            @Override\n+            public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+                throw new Exception(EXCEPTION_MESSAGE);\n+            }\n+\n+            @Override\n+            public void afterRestore(Context<? extends Resource> context) throws Exception {\n+                ranAfter.set(true);\n+            }\n+        };\n+        Core.getGlobalContext().register(resource);\n+        try {\n+            Core.checkpointRestore();\n+            fail(\"Was supposed to throw\");\n+        } catch (CheckpointException e) {\n+            assertEquals(1, e.getSuppressed().length, Arrays.toString(e.getSuppressed()));\n+            assertEquals(EXCEPTION_MESSAGE, e.getSuppressed()[0].getMessage());\n+        } catch (RestoreException e) {\n+            fail(\"Shouldn't error in restore\", e);\n+        }\n+        assertTrue(ranAfter.get());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/FailedResourceTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}