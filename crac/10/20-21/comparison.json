{"files":[{"patch":"@@ -68,1 +68,1 @@\n-AttachOperation* LinuxAttachListener::_jcmdOperation = NULL;\n+AttachOperation* LinuxAttachListener::_attach_op = NULL;\n@@ -344,1 +344,1 @@\n-  LinuxAttachListener::set_jcmdOperation(NULL);\n+  LinuxAttachListener::set_attach_op(NULL);\n@@ -359,0 +359,1 @@\n+    assert(st->size() == 0, \"no lost output\");\n@@ -385,0 +386,1 @@\n+  st->reset();\n@@ -393,1 +395,1 @@\n-AttachOperation* LinuxAttachListener::get_jcmdOperation() {\n+AttachOperation* LinuxAttachListener::get_attach_op() {\n@@ -395,1 +397,1 @@\n-  return LinuxAttachListener::_jcmdOperation;\n+  return LinuxAttachListener::_attach_op;\n@@ -398,1 +400,1 @@\n-void LinuxAttachListener::set_jcmdOperation(AttachOperation* s) {\n+void LinuxAttachListener::set_attach_op(AttachOperation* s) {\n@@ -400,1 +402,1 @@\n-  LinuxAttachListener::_jcmdOperation = s;\n+  LinuxAttachListener::_attach_op = s;\n@@ -410,1 +412,1 @@\n-  LinuxAttachListener::set_jcmdOperation(op);\n+  LinuxAttachListener::set_attach_op(op);\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  static AttachOperation* _jcmdOperation;\n+  static AttachOperation* _attach_op;\n@@ -88,2 +88,2 @@\n-  static void set_jcmdOperation(AttachOperation* s);\n-  static AttachOperation* get_jcmdOperation();\n+  static void set_attach_op(AttachOperation* s);\n+  static AttachOperation* get_attach_op();\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+#include \"attachListener_linux.hpp\"\n@@ -400,1 +401,1 @@\n-  LinuxAttachOperation* jcmd_operation;\n+  LinuxAttachOperation* attached_operation;\n@@ -402,1 +403,1 @@\n-  VM_Crac(bool dry_run, outputStream* output_stream, LinuxAttachOperation* jcmd_operation) :\n+  VM_Crac(bool dry_run, outputStream* output_stream) :\n@@ -406,4 +407,4 @@\n-    _restore_parameters(new CracRestoreParameters(NULL, NULL)),\n-    ostream(output_stream),\n-    jcmd_operation(jcmd_operation)\n-  { }\n+    _restore_parameters(new CracRestoreParameters(NULL, NULL)) {\n+    attached_operation = (LinuxAttachOperation*)LinuxAttachListener::get_attach_op();\n+    ostream = (output_stream == NULL) ? tty : output_stream;\n+  }\n@@ -427,2 +428,4 @@\n-  int is_socket_from_jcmd (int sock_fd);\n-  void report_ok_to_jcmd ();\n+  int is_socket_from_jcmd(int sock_fd);\n+  void report_ok_to_jcmd();\n+  void print_resources(const char* msg, ... );\n+  void trace_cr(const char* msg, ... );\n@@ -5719,3 +5722,2 @@\n-static void trace_cr(outputStream * ostream, const char* msg, ... ) {\n-  outputStream * ou = (ostream == NULL) ? tty : ostream;\n-  if (CRTrace){\n+void VM_Crac::trace_cr(const char* msg, ... ) {\n+  if (CRTrace) {\n@@ -5724,2 +5726,2 @@\n-    ou->print(\"CR: \");\n-    ou->vprint_cr(msg, ap);\n+    ostream->print(\"CR: \");\n+    ostream->vprint_cr(msg, ap);\n@@ -5730,2 +5732,1 @@\n-static void print_resources(outputStream * ostream, const char* msg, ... ) {\n-  outputStream * ou = (ostream == NULL) ? tty : ostream;\n+void VM_Crac::print_resources(const char* msg, ... ) {\n@@ -5735,1 +5736,1 @@\n-    ou->vprint_cr(msg, ap);\n+    ostream->vprint(msg, ap);\n@@ -6174,2 +6175,2 @@\n-int VM_Crac::is_socket_from_jcmd (int sock){\n-  if (jcmd_operation == 0)\n+int VM_Crac::is_socket_from_jcmd(int sock) {\n+  if (attached_operation == 0)\n@@ -6177,1 +6178,1 @@\n-  int sock_fd = jcmd_operation->socket();\n+  int sock_fd = attached_operation->socket();\n@@ -6182,1 +6183,1 @@\n-  if (jcmd_operation == 0)\n+  if (attached_operation == 0)\n@@ -6184,2 +6185,2 @@\n-  bufferedStream * buf = static_cast<bufferedStream*>(ostream);\n-  jcmd_operation->effectively_complete_raw(JNI_OK, buf);\n+  bufferedStream* buf = static_cast<bufferedStream*>(ostream);\n+  attached_operation->effectively_complete_raw(JNI_OK, buf);\n@@ -6209,1 +6210,1 @@\n-    print_resources(ostream, \"JVM: FD fd=%d type=%s: details1=\\\"%s\\\" \",\n+    print_resources(\"JVM: FD fd=%d type=%s: details1=\\\"%s\\\" \",\n@@ -6213,1 +6214,1 @@\n-      print_resources(ostream, \"OK: inherited from process env\");\n+      print_resources(\"OK: inherited from process env \\n\");\n@@ -6222,1 +6223,1 @@\n-        print_resources(ostream, \"OK: always available, random or urandom\");\n+        print_resources(\"OK: always available, random or urandom \\n\");\n@@ -6228,1 +6229,1 @@\n-      print_resources(ostream, \"OK: in classpath\");\n+      print_resources(\"OK: in classpath\\n\");\n@@ -6233,1 +6234,1 @@\n-      print_resources(ostream, \"OK: assured persistent\");\n+      print_resources(\"OK: assured persistent\\n\");\n@@ -6239,1 +6240,1 @@\n-        print_resources(ostream, \"OK: jcmd socket\");\n+        print_resources(\"OK: jcmd socket\\n\");\n@@ -6243,1 +6244,1 @@\n-      print_resources(ostream, \"issock, details2=\\\"%s\\\" \", details);\n+      print_resources(\" details2=\\\"%s\\\" \", details);\n@@ -6246,1 +6247,1 @@\n-    print_resources(ostream, \"BAD: opened by application\");\n+    print_resources(\"BAD: opened by application\\n\");\n@@ -6268,1 +6269,1 @@\n-    trace_cr(ostream, \"Skip Checkpoint\");\n+    trace_cr(\"Skip Checkpoint\");\n@@ -6270,2 +6271,3 @@\n-    trace_cr(ostream, \"Checkpoint ...\");\n-    \/\/ If execution comes here, assumme that further all be ok.\n+    trace_cr(\"Checkpoint ...\");\n+    \/\/ If execution comes here, redirect output to console\n+    ostream = tty;\n@@ -6373,1 +6375,1 @@\n-Handle os::Linux::checkpoint(bool dry_run, jlong stream, jlong op, TRAPS) {\n+Handle os::Linux::checkpoint(bool dry_run, jlong stream, TRAPS) {\n@@ -6387,1 +6389,1 @@\n-  VM_Crac cr(dry_run, (outputStream*) stream, (LinuxAttachOperation*) op);\n+  VM_Crac cr(dry_run, (outputStream*)stream);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":37,"deletions":35,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  static Handle checkpoint(bool dry_run, jlong st, jlong op, TRAPS);\n+  static Handle checkpoint(bool dry_run, jlong st, TRAPS);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -710,1 +710,1 @@\n-  template(checkpointRestereInternal_signature,    \"(JJ)Ljava\/lang\/String;\")                                       \\\n+  template(checkpointRestereInternal_signature,    \"(J)Ljava\/lang\/String;\")                                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1146,1 +1146,1 @@\n-JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream, jlong op);\n+JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3852,2 +3852,2 @@\n-JVM_ENTRY(jobjectArray, JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream, jlong op))\n-  Handle ret = os::Linux::checkpoint(dry_run, stream, op, CHECK_NULL);\n+JVM_ENTRY(jobjectArray, JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream))\n+  Handle ret = os::Linux::checkpoint(dry_run, stream, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -795,1 +795,1 @@\n-  jvalue* jv = (jvalue*) result.get_value_addr();\n+  jvalue*jv = (jvalue*)result.get_value_addr();\n@@ -1046,2 +1046,1 @@\n-  args.push_long((jlong )output());\n-  args.push_long((jlong )LinuxAttachListener::get_jcmdOperation());\n+  args.push_long((jlong)output());\n@@ -1051,2 +1050,1 @@\n-  jvalue* jv = (jvalue*) result.get_value_addr();\n-  oop str = cast_to_oop(jv->l);\n+  oop str = result.get_oop();\n@@ -1054,5 +1052,5 @@\n-      char* out = java_lang_String::as_utf8_string(str);\n-      if (out) {\n-          output()->print_cr(\"An exception during a checkpoint operation: \");\n-          output()->print_cr(\"%s\", out);\n-      }\n+    char* out = java_lang_String::as_utf8_string(str);\n+    if (strlen(out) > 0) {\n+      output()->print_cr(\"An exception during a checkpoint operation: \");\n+      output()->print(\"%s \", out);\n+    }\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-    private static final long JCMD_OPERATION_NULL = 0;\n@@ -61,1 +60,1 @@\n-    private static native Object[] checkpointRestore0(boolean dryRun, long stream, long op);\n+    private static native Object[] checkpointRestore0(boolean dryRun, long stream);\n@@ -115,1 +114,1 @@\n-    private static void checkpointRestore1(long ostream, long jcmd) throws\n+    private static void checkpointRestore1(long ostream) throws\n@@ -129,1 +128,1 @@\n-        final Object[] bundle = checkpointRestore0(checkpointException != null, ostream, jcmd);\n+        final Object[] bundle = checkpointRestore0(checkpointException != null, ostream);\n@@ -232,1 +231,1 @@\n-        checkpointRestoreLocked(JCMD_STREAM_NULL, JCMD_OPERATION_NULL);\n+        checkpointRestore(JCMD_STREAM_NULL);\n@@ -235,1 +234,1 @@\n-    private static void checkpointRestoreLocked(long outputStream_p, long jcmd_p) throws\n+    private static void checkpointRestore(long outputStream_p) throws\n@@ -247,1 +246,1 @@\n-                    checkpointRestore1(outputStream_p, jcmd_p);\n+                    checkpointRestore1(outputStream_p);\n@@ -261,1 +260,1 @@\n-    private static String checkpointRestoreInternal(long outputStream_p, long jcmd_p){\n+    private static String checkpointRestoreInternal(long outputStream_p){\n@@ -265,2 +264,2 @@\n-            checkpointRestoreLocked(outputStream_p, jcmd_p);\n-        } catch (CheckpointException | RestoreException e) {\n+            checkpointRestore(outputStream_p);\n+        } catch (CheckpointException e) {\n@@ -270,0 +269,4 @@\n+        } catch (RestoreException e) {\n+            for (Throwable t : e.getSuppressed()) {\n+                t.printStackTrace();\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jboolean dry_run, jlong stream, jlong op)\n+Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jboolean dry_run, jlong stream)\n@@ -41,1 +41,1 @@\n-    return JVM_Checkpoint(env, dry_run, stream, op);\n+    return JVM_Checkpoint(env, dry_run, stream);\n","filename":"src\/java.base\/share\/native\/libjava\/CracCore.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}