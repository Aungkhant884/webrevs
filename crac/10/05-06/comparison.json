{"files":[{"patch":"@@ -79,1 +79,1 @@\n-  static AttachOperation* _currentOperation;\n+  static AttachOperation* _jcmdOperation;\n@@ -118,1 +118,1 @@\n-AttachOperation* LinuxAttachListener::_currentOperation = NULL;\n+AttachOperation* LinuxAttachListener::_jcmdOperation = NULL;\n@@ -394,1 +394,1 @@\n-  AttachListener::set_CurrentOperation(NULL);\n+  AttachListener::set_jcmdOperation(NULL);\n@@ -435,2 +435,4 @@\n-AttachOperation* AttachListener::get_CurrentOperation() {\n-  return Atomic::load(&LinuxAttachListener::_currentOperation);\n+AttachOperation* AttachListener::get_jcmdOperation() {\n+  const char assertion_listener_thread[] = \"Attach Listener\";\n+  assert(strcmp(assertion_listener_thread, Thread::current()->name()) == 0, \"should gets called from Attach Listener thread\");\n+  return LinuxAttachListener::_jcmdOperation;\n@@ -439,1 +441,1 @@\n-void AttachListener::set_CurrentOperation(AttachOperation* s) {\n+void AttachListener::set_jcmdOperation(AttachOperation* s) {\n@@ -442,1 +444,1 @@\n-  Atomic::store(&LinuxAttachListener::_currentOperation, s);\n+  LinuxAttachListener::_jcmdOperation = s;\n@@ -450,1 +452,1 @@\n-  AttachListener::set_CurrentOperation(op);\n+  AttachListener::set_jcmdOperation(op);\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -413,0 +413,1 @@\n+  LinuxAttachOperation* jcmd_operation;\n@@ -421,0 +422,4 @@\n+  private:\n+  int is_socket_from_jcmd (int sock_fd);\n+  void report_ok_to_jcmd ();\n+\n@@ -5712,1 +5717,2 @@\n-  if ((CRTrace) && (ostream != NULL)){\n+  outputStream * ou = (ostream == NULL) ? tty : ostream;\n+  if (CRTrace){\n@@ -5715,2 +5721,2 @@\n-    ostream->print(\"CR: \");\n-    ostream->vprint_cr(msg, ap);\n+    ou->print(\"CR: \");\n+    ou->vprint_cr(msg, ap);\n@@ -5722,1 +5728,2 @@\n-  if ((CRPrintResourcesOnCheckpoint) && (ostream != NULL)) {\n+outputStream * ou = (ostream == NULL) ? tty : ostream;\n+  if (CRPrintResourcesOnCheckpoint) {\n@@ -5725,1 +5732,1 @@\n-    ostream->vprint_cr(msg, ap);\n+    ou->vprint_cr(msg, ap);\n@@ -6028,1 +6035,5 @@\n-    tty->print_cr(\"JVM: invalid info for restore provided (may be failed checkpoint) si_code %d si_int %d\", info.si_code,  info.si_int);\n+    tty->print(\"JVM: invalid info for restore provided: %s\", info.si_code == SI_QUEUE ? \"queued\" : \"not queued\");\n+  if (info.si_code == SI_QUEUE) {\n+    tty->print(\" code %d\", info.si_int);\n+  }\n+    tty->cr();\n@@ -6159,0 +6170,15 @@\n+\/\/ The checkpoint could be called with an API, so jcmd operation and io stream doesnt exist. \n+int VM_Crac::is_socket_from_jcmd (int sock){\n+  if (jcmd_operation == 0)\n+    return 0;\n+  int sock_fd = jcmd_operation->socket();\n+  return sock == sock_fd;\n+}\n+\n+void VM_Crac::report_ok_to_jcmd (){\n+  if (jcmd_operation == 0)\n+    return;\n+  bufferedStream * buf = static_cast<bufferedStream*>(ostream);\n+  jcmd_operation->effectively_complete(JNI_OK, buf);\n+}\n+\n@@ -6171,1 +6197,0 @@\n-  LinuxAttachOperation * op = (LinuxAttachOperation* )AttachListener::get_CurrentOperation();\n@@ -6184,1 +6209,0 @@\n-\n@@ -6210,1 +6234,0 @@\n-\n@@ -6212,6 +6235,1 @@\n-      details = sock_details(details, detailsbuf, sizeof(detailsbuf));\n-      print_resources(ostream, \"issock, details2=\\\"%s\\\" \", details);\n-\n-      \/\/ and sock fd from listener\n-      int sock_fd = op->socket();\n-      if ( i == sock_fd){\n+      if (is_socket_from_jcmd(i)){\n@@ -6222,0 +6240,2 @@\n+      details = sock_details(details, detailsbuf, sizeof(detailsbuf));\n+      print_resources(ostream, \"issock, details2=\\\"%s\\\" \", details);\n@@ -6233,10 +6253,3 @@\n-    trace_cr(ostream, \"Checkpoint aborted: resources opened by application\");\n-    return;\n-  }\n-\n-\n-  if (!ok && CRHeapDumpOnCheckpointException) {\n-    HeapDumper::dump_heap();\n-  }\n-\n-  if (!ok && CRDoThrowCheckpointException) {\n+    if (CRHeapDumpOnCheckpointException){\n+      HeapDumper::dump_heap();\n+    }\n@@ -6255,3 +6268,2 @@\n-    bufferedStream * buf = static_cast<bufferedStream*>(ostream);\n-    \/\/ Send a result to jcmd\n-    op->effectively_complete(JNI_OK, buf);\n+    \/\/ If execution comes here, assumme that further all be ok.\n+    report_ok_to_jcmd();\n@@ -6358,1 +6370,1 @@\n-Handle os::Linux::checkpoint(bool dry_run, jlong stream, TRAPS) {\n+Handle os::Linux::checkpoint(bool dry_run, jlong stream, jlong op, TRAPS) {\n@@ -6374,1 +6386,2 @@\n-    cr.ostream = (outputStream*) stream;\n+    cr.jcmd_operation = (LinuxAttachOperation *) op;\n+    cr.ostream = (outputStream *) stream;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":43,"deletions":30,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  static Handle checkpoint(bool dry_run, jlong st, TRAPS);\n+  static Handle checkpoint(bool dry_run, jlong st, jlong op, TRAPS);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -710,1 +710,1 @@\n-  template(checkpointRestereInternal_signature,    \"(J)Ljava\/lang\/String;\")                                       \\\n+  template(checkpointRestereInternal_signature,    \"(JJ)Ljava\/lang\/String;\")                                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1146,1 +1146,1 @@\n-JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream);\n+JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream, jlong op);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3852,2 +3852,2 @@\n-JVM_ENTRY(jobjectArray, JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream))\n-  Handle ret = os::Linux::checkpoint(dry_run, stream, CHECK_NULL);\n+JVM_ENTRY(jobjectArray, JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream, jlong op))\n+  Handle ret = os::Linux::checkpoint(dry_run, stream, op, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2116,3 +2116,0 @@\n-  product(bool, CRDoThrowCheckpointException, true, EXPERIMENTAL,           \\\n-      \"Throw CheckpointException if uncheckpointable resource handle found\")\\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -110,3 +110,2 @@\n-  static AttachOperation* get_CurrentOperation();\n-  static void set_CurrentOperation(AttachOperation* op);\n-\n+  static AttachOperation* get_jcmdOperation();\n+  static void set_jcmdOperation(AttachOperation* op);\n","filename":"src\/hotspot\/share\/services\/attachListener.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+#include \"services\/attachListener.hpp\"\n+#include \"services\/linuxAttachOperation.hpp\"\n@@ -1047,0 +1049,1 @@\n+  args.push_long((jlong )AttachListener::get_jcmdOperation());\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+\/* \n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved. \n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved. \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. \n+ * \n+ * This code is free software; you can redistribute it and\/or modify it \n+ * under the terms of the GNU General Public License version 2 only, as \n+ * published by the Free Software Foundation. \n+ * \n+ * This code is distributed in the hope that it will be useful, but WITHOUT \n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or \n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License \n+ * version 2 for more details (a copy is included in the LICENSE file that \n+ * accompanied this code). \n+ * \n+ * You should have received a copy of the GNU General Public License version \n+ * 2 along with this work; if not, write to the Free Software Foundation, \n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA. \n+ * \n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA \n+ * or visit www.oracle.com if you need additional information or have any \n+ * questions. \n+ * \n+ *\/\n+#ifndef SHARE_SERVICES_LINUXATTACHOPERATION_HPP\n+#define SHARE_SERVICES_LINUXATTACHOPERATION_HPP\n+\n@@ -19,0 +46,1 @@\n+#endif \/\/ SHARE_SERVICES_LINUXATTACHOPERATION_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/services\/linuxAttachOperation.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -58,1 +58,4 @@\n-    private static native Object[] checkpointRestore0(boolean dryRun, long stream);\n+    private static long jcmd = 0;\n+    private static long ostream = 0;\n+\n+    private static native Object[] checkpointRestore0(boolean dryRun, long stream, long op);\n@@ -112,1 +115,1 @@\n-    private static void checkpointRestore1(long... outputStream_p) throws\n+    private static void checkpointRestore1() throws\n@@ -126,1 +129,1 @@\n-        final Object[] bundle = checkpointRestore0(checkpointException != null, outputStream_p[0]);\n+        final Object[] bundle = checkpointRestore0(checkpointException != null, ostream, jcmd);\n@@ -226,1 +229,1 @@\n-    public static void checkpointRestore(long ...outputStream_p) throws\n+    public static void checkpointRestore() throws\n@@ -238,1 +241,1 @@\n-                    checkpointRestore1(outputStream_p);\n+                    checkpointRestore1();\n@@ -252,1 +255,3 @@\n-    private static String checkpointRestoreInternal(long outputStream_p){\n+    private static String checkpointRestoreInternal(long outputStream_p, long jcmd_p){\n+        jcmd = jcmd_p;\n+        ostream = outputStream_p;\n@@ -256,1 +261,1 @@\n-            checkpointRestore(outputStream_p);\n+            checkpointRestore();\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jboolean dry_run, jlong stream)\n+Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jboolean dry_run, jlong stream, jlong op)\n@@ -41,1 +41,1 @@\n-    return JVM_Checkpoint(env, dry_run, stream);\n+    return JVM_Checkpoint(env, dry_run, stream, op);\n","filename":"src\/java.base\/share\/native\/libjava\/CracCore.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}