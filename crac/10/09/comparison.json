{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"services\/linuxAttachOperation.hpp\"\n@@ -60,2 +61,0 @@\n-\/\/ forward reference\n-class LinuxAttachOperation;\n@@ -78,0 +77,1 @@\n+  static AttachOperation* _jcmdOperation;\n@@ -111,16 +111,0 @@\n-class LinuxAttachOperation: public AttachOperation {\n- private:\n-  \/\/ the connection to the client\n-  int _socket;\n-\n- public:\n-  void complete(jint res, bufferedStream* st);\n-\n-  void set_socket(int s)                                { _socket = s; }\n-  int socket() const                                    { return _socket; }\n-\n-  LinuxAttachOperation(char* name) : AttachOperation(name) {\n-    set_socket(-1);\n-  }\n-};\n-\n@@ -132,0 +116,1 @@\n+AttachOperation* LinuxAttachListener::_jcmdOperation = NULL;\n@@ -400,0 +385,11 @@\n+\/\/ An operation completion is splitted into two parts.\n+\/\/ For proper handling the jcmd connection at CRaC checkpoint action.\n+\/\/ An effectively_complete is called in checkpoint processing, before criu engine calls, for properly closing the socket.\n+\/\/ The complete() gets called after restore for proper deletion the leftover object.\n+\n+void LinuxAttachOperation::complete(jint result, bufferedStream* st) {\n+  LinuxAttachOperation::effectively_complete(result, st);\n+  AttachListener::set_jcmdOperation(NULL);\n+  delete this;\n+}\n+\n@@ -408,1 +404,6 @@\n-void LinuxAttachOperation::complete(jint result, bufferedStream* st) {\n+void LinuxAttachOperation::effectively_complete(jint result, bufferedStream* st) {\n+\n+  if (_effectively_completed) {\n+    return;\n+  }\n+\n@@ -425,0 +426,1 @@\n+  _effectively_completed = true;\n@@ -426,1 +428,0 @@\n-  delete this;\n@@ -432,0 +433,12 @@\n+AttachOperation* AttachListener::get_jcmdOperation() {\n+  const char assertion_listener_thread[] = \"Attach Listener\";\n+  assert(strcmp(assertion_listener_thread, Thread::current()->name()) == 0, \"should gets called from Attach Listener thread\");\n+  return LinuxAttachListener::_jcmdOperation;\n+}\n+\n+void AttachListener::set_jcmdOperation(AttachOperation* s) {\n+  const char assertion_listener_thread[] = \"Attach Listener\";\n+  assert(strcmp(assertion_listener_thread, Thread::current()->name()) == 0, \"should gets called from Attach Listener thread\");\n+  LinuxAttachListener::_jcmdOperation = s;\n+}\n+\n@@ -437,1 +450,1 @@\n-\n+  AttachListener::set_jcmdOperation(op);\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":34,"deletions":21,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+#include \"services\/linuxAttachOperation.hpp\"\n@@ -411,0 +412,2 @@\n+  outputStream* ostream;\n+  LinuxAttachOperation* jcmd_operation;\n@@ -419,0 +422,4 @@\n+  private:\n+  int is_socket_from_jcmd (int sock_fd);\n+  void report_ok_to_jcmd ();\n+\n@@ -5709,2 +5716,3 @@\n-static void trace_cr(const char* msg, ...) {\n-  if (CRTrace) {\n+static void trace_cr(outputStream * ostream, const char* msg, ... ) {\n+  outputStream * ou = (ostream == NULL) ? tty : ostream;\n+  if (CRTrace){\n@@ -5713,2 +5721,12 @@\n-    tty->print(\"CR: \");\n-    tty->vprint_cr(msg, ap);\n+    ou->print(\"CR: \");\n+    ou->vprint_cr(msg, ap);\n+    va_end(ap);\n+  }\n+}\n+\n+static void print_resources(outputStream * ostream, const char* msg, ... ) {\n+  outputStream * ou = (ostream == NULL) ? tty : ostream;\n+  if (CRPrintResourcesOnCheckpoint) {\n+    va_list ap;\n+    va_start(ap, msg);\n+    ou->vprint_cr(msg, ap);\n@@ -5996,7 +6014,0 @@\n-  if (CRAllowToSkipCheckpoint) {\n-    trace_cr(\"Skip Checkpoint\");\n-    return JVM_CHECKPOINT_OK;\n-  }\n-\n-  trace_cr(\"Checkpoint ...\");\n-\n@@ -6024,1 +6035,5 @@\n-    tty->print_cr(\"JVM: invalid info for restore provided (may be failed checkpoint)\");\n+    tty->print(\"JVM: invalid info for restore provided: %s\", info.si_code == SI_QUEUE ? \"queued\" : \"not queued\");\n+    if (info.si_code == SI_QUEUE) {\n+      tty->print(\" code %d\", info.si_int);\n+    }\n+    tty->cr();\n@@ -6155,0 +6170,15 @@\n+\/\/ If checkpoint is called throught the API, jcmd operation and jcmd output doesn't exist.\n+int VM_Crac::is_socket_from_jcmd (int sock){\n+  if (jcmd_operation == 0)\n+    return 0;\n+  int sock_fd = jcmd_operation->socket();\n+  return sock == sock_fd;\n+}\n+\n+void VM_Crac::report_ok_to_jcmd (){\n+  if (jcmd_operation == 0)\n+    return;\n+  bufferedStream * buf = static_cast<bufferedStream*>(ostream);\n+  jcmd_operation->effectively_complete(JNI_OK, buf);\n+}\n+\n@@ -6176,4 +6206,2 @@\n-    if (CRPrintResourcesOnCheckpoint) {\n-      tty->print(\"JVM: FD fd=%d type=%s: details1=\\\"%s\\\" \",\n-          i, stat2strtype(fds.get_stat(i)->st_mode), details);\n-    }\n+    print_resources(ostream, \"JVM: FD fd=%d type=%s: details1=\\\"%s\\\" \",\n+        i, stat2strtype(fds.get_stat(i)->st_mode), details);\n@@ -6182,3 +6210,1 @@\n-      if (CRPrintResourcesOnCheckpoint) {\n-        tty->print_cr(\"OK: inherited from process env\");\n-      }\n+      print_resources(ostream, \"OK: inherited from process env\");\n@@ -6193,3 +6219,1 @@\n-        if (CRPrintResourcesOnCheckpoint) {\n-          tty->print_cr(\"OK: always available, random or urandom\");\n-        }\n+        print_resources(ostream, \"OK: always available, random or urandom\");\n@@ -6201,3 +6225,1 @@\n-      if (CRPrintResourcesOnCheckpoint) {\n-        tty->print_cr(\"OK: in classpath\");\n-      }\n+      print_resources(ostream, \"OK: in classpath\");\n@@ -6208,3 +6230,1 @@\n-      if (CRPrintResourcesOnCheckpoint) {\n-        tty->print_cr(\"OK: assured persistent\");\n-      }\n+      print_resources(ostream, \"OK: assured persistent\");\n@@ -6214,5 +6234,0 @@\n-    if (CRPrintResourcesOnCheckpoint) {\n-      tty->print(\"BAD: opened by application\");\n-    }\n-    ok = false;\n-\n@@ -6220,3 +6235,4 @@\n-      details = sock_details(details, detailsbuf, sizeof(detailsbuf));\n-      if (CRPrintResourcesOnCheckpoint) {\n-        tty->print(\" details2=\\\"%s\\\" \", details);\n+      if (is_socket_from_jcmd(i)){\n+        print_resources(ostream, \"OK: jcmd socket\");\n+        ok = true;\n+        continue;\n@@ -6224,0 +6240,2 @@\n+      details = sock_details(details, detailsbuf, sizeof(detailsbuf));\n+      print_resources(ostream, \"issock, details2=\\\"%s\\\" \", details);\n@@ -6226,3 +6244,3 @@\n-    if (CRPrintResourcesOnCheckpoint) {\n-      tty->cr();\n-    }\n+    print_resources(ostream, \"BAD: opened by application\");\n+    ok = false;\n+\n@@ -6234,5 +6252,4 @@\n-  if (!ok && CRHeapDumpOnCheckpointException) {\n-    HeapDumper::dump_heap();\n-  }\n-\n-  if (!ok && CRDoThrowCheckpointException) {\n+  if (!ok) {\n+    if (CRHeapDumpOnCheckpointException){\n+      HeapDumper::dump_heap();\n+    }\n@@ -6246,1 +6263,0 @@\n-\n@@ -6248,4 +6264,11 @@\n-  int ret = checkpoint_restore(&shmid);\n-  if (ret == JVM_CHECKPOINT_ERROR) {\n-    PerfMemoryLinux::restore();\n-    return;\n+  if (CRAllowToSkipCheckpoint) {\n+    trace_cr(ostream, \"Skip Checkpoint\");\n+  } else {\n+    trace_cr(ostream, \"Checkpoint ...\");\n+    \/\/ If execution comes here, assumme that further all be ok.\n+    report_ok_to_jcmd();\n+    int ret = checkpoint_restore(&shmid);\n+    if (ret == JVM_CHECKPOINT_ERROR) {\n+      PerfMemoryLinux::restore();\n+      return;\n+    }\n@@ -6253,1 +6276,0 @@\n-\n@@ -6348,1 +6370,1 @@\n-Handle os::Linux::checkpoint(bool dry_run, TRAPS) {\n+Handle os::Linux::checkpoint(bool dry_run, jlong stream, jlong op, TRAPS) {\n@@ -6364,0 +6386,2 @@\n+    cr.jcmd_operation = (LinuxAttachOperation *) op;\n+    cr.ostream = (outputStream *) stream;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":75,"deletions":51,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  static Handle checkpoint(bool dry_run, TRAPS);\n+  static Handle checkpoint(bool dry_run, jlong st, jlong op, TRAPS);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -710,0 +710,1 @@\n+  template(checkpointRestereInternal_signature,    \"(JJ)Ljava\/lang\/String;\")                                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1146,1 +1146,1 @@\n-JVM_Checkpoint(JNIEnv *env, jboolean dry_run);\n+JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream, jlong op);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3852,2 +3852,2 @@\n-JVM_ENTRY(jobjectArray, JVM_Checkpoint(JNIEnv *env, jboolean dry_run))\n-  Handle ret = os::Linux::checkpoint(dry_run, CHECK_NULL);\n+JVM_ENTRY(jobjectArray, JVM_Checkpoint(JNIEnv *env, jboolean dry_run, jlong stream, jlong op))\n+  Handle ret = os::Linux::checkpoint(dry_run, stream, op, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2116,3 +2116,0 @@\n-  product(bool, CRDoThrowCheckpointException, true, EXPERIMENTAL,           \\\n-      \"Throw CheckpointException if uncheckpointable resource handle found\")\\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -108,0 +108,5 @@\n+\n+  \/\/ save jcmd operation, and use it further on checkpoint reporting\n+  static AttachOperation* get_jcmdOperation();\n+  static void set_jcmdOperation(AttachOperation* op);\n+\n","filename":"src\/hotspot\/share\/services\/attachListener.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+#include \"services\/attachListener.hpp\"\n+#include \"services\/linuxAttachOperation.hpp\"\n@@ -1043,1 +1045,4 @@\n-  JavaValue result(T_VOID);\n+  JavaValue result(T_OBJECT);\n+  JavaCallArguments args;\n+  args.push_long((jlong )output());\n+  args.push_long((jlong )AttachListener::get_jcmdOperation());\n@@ -1046,1 +1051,10 @@\n-                         vmSymbols::void_method_signature(), CHECK);\n+                         vmSymbols::checkpointRestereInternal_signature(), &args, CHECK);\n+  jvalue* jv = (jvalue*) result.get_value_addr();\n+  oop str = cast_to_oop(jv->l);\n+  if (str != NULL) {\n+      char* out = java_lang_String::as_utf8_string(str);\n+      if (out) {\n+          output()->print_cr(\"An exception during a checkpoint operation: \");\n+          output()->print_cr(\"%s\", out);\n+      }\n+  }\n@@ -1048,1 +1062,0 @@\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+#ifndef SHARE_SERVICES_LINUXATTACHOPERATION_HPP\n+#define SHARE_SERVICES_LINUXATTACHOPERATION_HPP\n+\n+class LinuxAttachOperation: public AttachOperation {\n+ private:\n+  \/\/ the connection to the client\n+  int _socket;\n+  bool _effectively_completed;\n+\n+ public:\n+  void complete(jint res, bufferedStream* st);\n+  void effectively_complete(jint res, bufferedStream* st);\n+\n+  void set_socket(int s)                                { _socket = s; }\n+  int socket() const                                    { return _socket; }\n+\n+  LinuxAttachOperation(char* name) : AttachOperation(name) {\n+    set_socket(-1);\n+    _effectively_completed = false;\n+  }\n+};\n+#endif \/\/ SHARE_SERVICES_LINUXATTACHOPERATION_HPP\n","filename":"src\/hotspot\/share\/services\/linuxAttachOperation.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -33,0 +33,2 @@\n+import java.io.StringWriter;\n+import java.io.PrintWriter;\n@@ -56,2 +58,1 @@\n-    private static native Object[] checkpointRestore0(boolean dryRun);\n-\n+    private static native Object[] checkpointRestore0(boolean dryRun, long stream, long op);\n@@ -111,1 +112,1 @@\n-    private static void checkpointRestore1() throws\n+    private static void checkpointRestore1(long ostream, long jcmd) throws\n@@ -125,1 +126,1 @@\n-        final Object[] bundle = checkpointRestore0(checkpointException != null);\n+        final Object[] bundle = checkpointRestore0(checkpointException != null, ostream, jcmd);\n@@ -237,1 +238,1 @@\n-                    checkpointRestore1();\n+                    checkpointRestore1(0, 0);\n@@ -250,6 +251,13 @@\n-    \/* called by VM *\/\n-    private static void checkpointRestoreInternal() {\n-        Thread thread = new Thread(() -> {\n-            try {\n-                Thread.sleep(100);\n-            } catch (InterruptedException e) {\n+    private static void checkpointRestore2(long outputStream_p, long jcmd_p) throws\n+            CheckpointException,\n+            RestoreException {\n+        synchronized (checkpointRestoreLock) {\n+            \/\/ idkn, it worth to protect from multy-thread checkpointing ?  - doesn't have sence for jcmd checkpointing, only for\n+            \/\/ jcmd + comebody through an api ...\n+            if (!checkpointInProgress) {\n+                checkpointInProgress = true;\n+                try {\n+                    checkpointRestore1(outputStream_p, jcmd_p);\n+                } finally {\n+                    checkpointInProgress = false;\n+                }\n@@ -257,0 +265,2 @@\n+        }\n+    }\n@@ -258,6 +268,9 @@\n-            try {\n-                checkpointRestore();\n-            } catch (CheckpointException | RestoreException e) {\n-                for (Throwable t : e.getSuppressed()) {\n-                    t.printStackTrace();\n-                }\n+    \/* called by VM *\/\n+    private static String checkpointRestoreInternal(long outputStream_p, long jcmd_p){\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        try {\n+            checkpointRestore2(outputStream_p, jcmd_p);\n+        } catch (CheckpointException | RestoreException e) {\n+            for (Throwable t : e.getSuppressed()) {\n+                t.printStackTrace(pw);\n@@ -265,3 +278,2 @@\n-        });\n-        thread.setDaemon(true);\n-        thread.start();\n+        }\n+        return sw.toString();\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":32,"deletions":20,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jboolean dry_run)\n+Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jboolean dry_run, jlong stream, jlong op)\n@@ -41,1 +41,1 @@\n-    return JVM_Checkpoint(env, dry_run);\n+    return JVM_Checkpoint(env, dry_run, stream, op);\n","filename":"src\/java.base\/share\/native\/libjava\/CracCore.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}