{"files":[{"patch":"@@ -393,1 +393,1 @@\n-  LinuxAttachOperation::effectiveley_complete(result, st);\n+  LinuxAttachOperation::effectively_complete(result, st);\n@@ -406,1 +406,1 @@\n-void LinuxAttachOperation::effectiveley_complete(jint result, bufferedStream* st) {\n+void LinuxAttachOperation::effectively_complete(jint result, bufferedStream* st) {\n@@ -433,4 +433,0 @@\n-int LinuxAttachOperation::get_unix_socket_fd(){\n-  return this->socket();\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -121,2 +121,0 @@\n-#include <typeinfo>\n-#include <sys\/socket.h>\n@@ -6161,12 +6159,0 @@\n-#define PATH_PROC     \"\/proc\"\n-#define PATH_NET_UNIX_SUFF  \"net\/unix\"\n-#define PATH_PROC_X_NET_UNIX PATH_PROC \"\/%s\/\" PATH_NET_UNIX_SUFF\n-#define PATH_CMDLINE  \"cmdline\"\n-#define PATH_CMDLINEl       strlen(PATH_CMDLINE)\n-\n-#define PRG_INODE   \"inode\"\n-#define PRG_SOCKET_PFX    \"socket:[\"\n-#define PRG_SOCKET_PFXl (strlen(PRG_SOCKET_PFX))\n-#define PRG_SOCKET_PFX2   \"[0000]:\"\n-#define PRG_SOCKET_PFX2l  (strlen(PRG_SOCKET_PFX2))\n-\n@@ -6229,1 +6215,1 @@\n-      \/\/ and sock fd from listener      \n+      \/\/ and sock fd from listener\n@@ -6232,1 +6218,1 @@\n-        print_resources(ostream, \"OK: jcmd socket\");  \n+        print_resources(ostream, \"OK: jcmd socket\");\n@@ -6246,1 +6232,1 @@\n-  if (!ok){\n+  if (!ok) {\n@@ -6271,1 +6257,1 @@\n-    op->effectiveley_complete(JNI_OK, buf);\n+    op->effectively_complete(JNI_OK, buf);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-\n@@ -198,6 +197,0 @@\n-  virtual void effectiveley_complete(jint result, bufferedStream* result_stream) = 0;\n-  \n-  \/\/ the file descriptor for the listening socket\n-  \/\/ static int _unix_socket_fd;\n-  \/\/ virtual int get_unix_socket_fd();\n-  \/\/ void set_unix_socket_fd(int fd);\n","filename":"src\/hotspot\/share\/services\/attachListener.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -9,2 +9,1 @@\n-  void effectiveley_complete(jint res, bufferedStream* st);\n-  int get_unix_socket_fd();\n+  void effectively_complete(jint res, bufferedStream* st);\n@@ -19,1 +18,1 @@\n-};\n\\ No newline at end of file\n+};\n","filename":"src\/hotspot\/share\/services\/linuxAttachOperation.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-                        checkpointRestore1(outputStream_p); \n+                    checkpointRestore1(outputStream_p);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}