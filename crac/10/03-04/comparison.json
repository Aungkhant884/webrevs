{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"services\/linuxAttachOperation.hpp\"\n@@ -61,1 +62,1 @@\n-class LinuxAttachOperation;\n+\/\/class LinuxAttachOperation;\n@@ -78,0 +79,1 @@\n+  static AttachOperation* _currentOperation;\n@@ -111,18 +113,0 @@\n-class LinuxAttachOperation: public AttachOperation {\n- private:\n-  \/\/ the connection to the client\n-  int _socket;\n-  bool _effectively_completed;\n-\n- public:\n-  void complete(jint res, bufferedStream* st);\n-  void effectivley_complete(jint res, bufferedStream* st);\n-\n-  void set_socket(int s)                                { _socket = s; }\n-  int socket() const                                    { return _socket; }\n-\n-  LinuxAttachOperation(char* name) : AttachOperation(name) {\n-    set_socket(-1);\n-  }\n-};\n-\n@@ -134,0 +118,1 @@\n+AttachOperation* LinuxAttachListener::_currentOperation = NULL;\n@@ -402,1 +387,1 @@\n-\/\/ An operation completeon is splitted on two parts.\n+\/\/ An operation completion is splitted into two parts.\n@@ -408,1 +393,2 @@\n-  LinuxAttachOperation::effectivley_complete(result, st);\n+  LinuxAttachOperation::effectiveley_complete(result, st);\n+  AttachListener::set_CurrentOperation(NULL);\n@@ -420,1 +406,1 @@\n-void LinuxAttachOperation::effectivley_complete(jint result, bufferedStream* st) {\n+void LinuxAttachOperation::effectiveley_complete(jint result, bufferedStream* st) {\n@@ -447,0 +433,4 @@\n+int LinuxAttachOperation::get_unix_socket_fd(){\n+  return this->socket();\n+}\n+\n@@ -449,0 +439,10 @@\n+AttachOperation* AttachListener::get_CurrentOperation() {\n+  return Atomic::load(&LinuxAttachListener::_currentOperation);\n+}\n+\n+void AttachListener::set_CurrentOperation(AttachOperation* s) {\n+  const char assertion_listener_thread[] = \"Attach Listener\";\n+  assert(strcmp(assertion_listener_thread, Thread::current()->name()) == 0, \"should gets called from Attach Listener thread\");\n+  Atomic::store(&LinuxAttachListener::_currentOperation, s);\n+}\n+\n@@ -454,1 +454,1 @@\n-\n+  AttachListener::set_CurrentOperation(op);\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+#include \"services\/linuxAttachOperation.hpp\"\n@@ -5713,1 +5714,1 @@\n-  if (CRTrace) {\n+  if ((CRTrace) && (ostream != NULL)){\n@@ -5722,0 +5723,9 @@\n+static void print_resources(outputStream * ostream, const char* msg, ... ) {\n+  if ((CRPrintResourcesOnCheckpoint) && (ostream != NULL)) {\n+    va_list ap;\n+    va_start(ap, msg);\n+    ostream->vprint_cr(msg, ap);\n+    va_end(ap);\n+  }\n+}\n+\n@@ -6163,127 +6173,0 @@\n-static int is_process_jcmd(char * fd) {\n-  char link[128];\n-  char str1[] = \"\/jcmd\";\n-  char * p;\n-  char fdpath[64];\n-  size_t len = sizeof(link);\n-  int d = atoi(fd);\n-  snprintf(fdpath, sizeof(fdpath), \"\/proc\/%d\/exe\", d);\n-  int ret = readlink(fdpath, link, len);\n-  if (ret == -1) {\n-    return 0;\n-  }\n-  link[(unsigned)ret < len ? ret : len - 1] = '\\0';\n-  p = strrchr(link, '\/');\n-  if (!strcmp(str1, p))\n-    return 1;\n-  else\n-    return 0;\n-}\n-\n-static int extract_type_1_socket_inode(const char lname[], unsigned long * inode_p) {\n-\n-    \/* If lname is of the form \"socket:[12345]\", extract the \"12345\"\n-       as *inode_p.  Otherwise, return -1 as *inode_p.\n-       *\/\n-\n-    if (strlen(lname) < PRG_SOCKET_PFXl+3) return(-1);\n-\n-    if (memcmp(lname, PRG_SOCKET_PFX, PRG_SOCKET_PFXl)) return(-1);\n-    if (lname[strlen(lname)-1] != ']') return(-1);\n-\n-    {\n-        char inode_str[strlen(lname + 1)];  \/* e.g. \"12345\" *\/\n-        const int inode_str_len = strlen(lname) - PRG_SOCKET_PFXl - 1;\n-        char *serr;\n-\n-        strncpy(inode_str, lname+PRG_SOCKET_PFXl, inode_str_len);\n-        inode_str[inode_str_len] = '\\0';\n-        *inode_p = strtol(inode_str,&serr,0);\n-        if (!serr || *serr )\n-            return(-1);\n-    }\n-    return(0);\n-}\n-\n-static int extract_type_2_socket_inode(const char lname[], unsigned long * inode_p) {\n-\n-    \/* If lname is of the form \"[0000]:12345\", extract the \"12345\"\n-       as *inode_p.  Otherwise, return -1 as *inode_p.\n-       *\/\n-\n-    if (strlen(lname) < PRG_SOCKET_PFX2l+1) return(-1);\n-    if (memcmp(lname, PRG_SOCKET_PFX2, PRG_SOCKET_PFX2l)) return(-1);\n-\n-    {\n-        char *serr;\n-        *inode_p=strtol(lname + PRG_SOCKET_PFX2l,&serr,0);\n-        if (!serr || *serr )\n-            return(-1);\n-    }\n-    return(0);\n-}\n-\n-static int is_socket_from_jcmd(unsigned long parm_inode){\n-\n-  char line[4096];\n-  char *token_word;\n-  char *eptr;\n-  ssize_t rread;\n-  int procfdlen;\n-  size_t len = 0;\n-  unsigned long inode;\n-  const char *cs;\n-  char *pline;\n-  FILE * fp;\n-  DIR *dirproc=NULL;\n-  struct dirent *direproc;\n-  int rc;\n-  if (!(dirproc=opendir(PATH_PROC)))\n-    return 1;\n-\n-  while (errno=0,direproc=readdir(dirproc)) {\n-    for (cs=direproc->d_name;*cs;cs++)\n-      if (!isdigit(*cs))\n-        break;\n-    if (*cs)\n-      continue;\n-\n-    if (!is_process_jcmd(direproc->d_name))\n-      continue;\n-\n-    \/\/ this is preparing the filelist, dont need for regular proc\n-    procfdlen=snprintf(line, sizeof(line), PATH_PROC_X_NET_UNIX, direproc->d_name);\n-    if (procfdlen<=0 || procfdlen>=(int)sizeof(line)-5)\n-      continue;\n-    errno=0;\n-\n-    fp = fopen(line, \"r\");\n-    if (fp == NULL){\n-      tty->print(\"is_socket_from_jcmd read errno: %d %s \\n\", errno, os::strerror(errno));\n-      closedir(dirproc);\n-      fclose(fp);\n-      return 0;\n-    }\n-\n-    while ((rread = getline(&pline, &len, fp)) != -1) {\n-      int count =0;\n-      token_word = strtok(pline, \" \");\n-      while(token_word != NULL){\n-        if (count == 6){\n-          inode = atoi(token_word);\n-          if (inode == parm_inode){\n-            closedir(dirproc);\n-            fclose(fp);\n-            return 1;\n-          }\n-        }\n-        token_word = strtok(NULL,\" \");\n-        count++;\n-      }\n-    }\n-  }\n-  closedir(dirproc);\n-  fclose(fp);\n-  return 0;\n-}\n-\n@@ -6295,1 +6178,0 @@\n-  int unixsockdf;\n@@ -6303,0 +6185,1 @@\n+  LinuxAttachOperation * op = (LinuxAttachOperation* )AttachListener::get_CurrentOperation();\n@@ -6312,4 +6195,3 @@\n-    if (CRPrintResourcesOnCheckpoint) {\n-      ostream->print(\"JVM: FD fd=%d type=%s: details1=\\\"%s\\\" \",\n-          i, stat2strtype(fds.get_stat(i)->st_mode), details);\n-    }\n+    print_resources(ostream, \"JVM: FD fd=%d type=%s: details1=\\\"%s\\\" \",\n+        i, stat2strtype(fds.get_stat(i)->st_mode), details);\n+\n@@ -6318,3 +6200,1 @@\n-      if (CRPrintResourcesOnCheckpoint) {\n-        ostream->print_cr(\"OK: inherited from process env\");\n-      }\n+      print_resources(ostream, \"OK: inherited from process env\");\n@@ -6329,3 +6209,1 @@\n-        if (CRPrintResourcesOnCheckpoint) {\n-          ostream->print_cr(\"OK: always available, random or urandom\");\n-        }\n+        print_resources(ostream, \"OK: always available, random or urandom\");\n@@ -6337,3 +6215,1 @@\n-      if (CRPrintResourcesOnCheckpoint) {\n-        ostream->print_cr(\"OK: in classpath\");\n-      }\n+      print_resources(ostream, \"OK: in classpath\");\n@@ -6344,3 +6220,1 @@\n-      if (CRPrintResourcesOnCheckpoint) {\n-        ostream->print_cr(\"OK: assured persistent\");\n-      }\n+      print_resources(ostream, \"OK: assured persistent\");\n@@ -6353,18 +6227,1 @@\n-      if (CRPrintResourcesOnCheckpoint)\n-        ostream->print(\"issock, details2=\\\"%s\\\" \", details);\n-\n-      typedef union {\n-          struct sockaddr     sa;\n-          struct sockaddr_in  sa4;\n-          struct sockaddr_in6 sa6;\n-      } SOCKETADDRESS;\n-\n-      SOCKETADDRESS sa;\n-      socklen_t len = sizeof(SOCKETADDRESS);\n-      int sock_family;\n-      if (getsockname(i, &sa.sa, &len) == 0) {\n-        sock_family = sa.sa.sa_family;\n-      } else {\n-        if (CRPrintResourcesOnCheckpoint)\n-          ostream->print(\"getsockname  errno: %d %s \\n\", errno, os::strerror(errno));\n-      }\n+      print_resources(ostream, \"issock, details2=\\\"%s\\\" \", details);\n@@ -6372,16 +6229,6 @@\n-      \/\/ socket should be 'unix' type, it's mean this is pipe\n-      if (sock_family != AF_UNIX)\n-        ok = false;\n-\n-      unsigned long inod;\n-      if (extract_type_1_socket_inode(details, &inod) < 0){\n-        if (extract_type_2_socket_inode(details, &inod) < 0)\n-          ok = false;\n-      }\n-\n-      if (ok){\n-        if (is_socket_from_jcmd(inod)){\n-          ostream->print_cr(\"OK: jcmd socket\");\n-          unixsockdf = i;\n-          continue;\n-        }\n+      \/\/ and sock fd from listener      \n+      int sock_fd = op->socket();\n+      if ( i == sock_fd){\n+        print_resources(ostream, \"OK: jcmd socket\");  \n+        ok = true;\n+        continue;\n@@ -6391,4 +6238,2 @@\n-    if (CRPrintResourcesOnCheckpoint) {\n-      ostream->print_cr(\"BAD: opened by application\");\n-    }\n-      ok = false;\n+    print_resources(ostream, \"BAD: opened by application\");\n+    ok = false;\n@@ -6425,1 +6270,0 @@\n-    AttachOperation * op = AttachListener::get_CurrentOperation();\n@@ -6427,1 +6271,1 @@\n-    op->effectivley_complete(JNI_OK, buf);\n+    op->effectiveley_complete(JNI_OK, buf);\n@@ -6430,1 +6274,1 @@\n-      PerfMemoryLinux::checkpoint_fail();\n+      PerfMemoryLinux::restore();\n@@ -6433,1 +6277,1 @@\n-\n+  }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":31,"deletions":187,"binary":false,"changes":218,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-AttachOperation* AttachListener::_currentOperation = NULL;\n@@ -408,1 +407,0 @@\n-      AttachListener::set_CurrentOperation(op);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,0 @@\n-  static AttachOperation* _currentOperation;\n@@ -97,7 +96,0 @@\n-  static AttachOperation* get_CurrentOperation() {\n-    return Atomic::load(&AttachListener::_currentOperation);\n-  }\n-  static void set_CurrentOperation(AttachOperation* s) {\n-    Atomic::store(&AttachListener::_currentOperation, s);\n-  }\n-\n@@ -117,0 +109,6 @@\n+\n+  \/\/ save jcmd operation for proper Checkpoint\n+  static AttachOperation* get_CurrentOperation();\n+  static void set_CurrentOperation(AttachOperation* op);\n+\n+\n@@ -200,1 +198,6 @@\n-  virtual void effectivley_complete(jint result, bufferedStream* result_stream) = 0;\n+  virtual void effectiveley_complete(jint result, bufferedStream* result_stream) = 0;\n+  \n+  \/\/ the file descriptor for the listening socket\n+  \/\/ static int _unix_socket_fd;\n+  \/\/ virtual int get_unix_socket_fd();\n+  \/\/ void set_unix_socket_fd(int fd);\n","filename":"src\/hotspot\/share\/services\/attachListener.hpp","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1060,1 +1060,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,19 @@\n+class LinuxAttachOperation: public AttachOperation {\n+ private:\n+  \/\/ the connection to the client\n+  int _socket;\n+  bool _effectively_completed;\n+\n+ public:\n+  void complete(jint res, bufferedStream* st);\n+  void effectiveley_complete(jint res, bufferedStream* st);\n+  int get_unix_socket_fd();\n+\n+  void set_socket(int s)                                { _socket = s; }\n+  int socket() const                                    { return _socket; }\n+\n+  LinuxAttachOperation(char* name) : AttachOperation(name) {\n+    set_socket(-1);\n+    _effectively_completed = false;\n+  }\n+};\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/services\/linuxAttachOperation.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -57,1 +57,1 @@\n-    \n+\n@@ -59,1 +59,0 @@\n-    private static long outputStream_p;\n@@ -113,1 +112,1 @@\n-    private static void checkpointRestore1() throws\n+    private static void checkpointRestore1(long... outputStream_p) throws\n@@ -127,1 +126,1 @@\n-        final Object[] bundle = checkpointRestore0(checkpointException != null, outputStream_p);\n+        final Object[] bundle = checkpointRestore0(checkpointException != null, outputStream_p[0]);\n@@ -227,1 +226,1 @@\n-    public static void checkpointRestore() throws\n+    public static void checkpointRestore(long ...outputStream_p) throws\n@@ -239,1 +238,1 @@\n-                    checkpointRestore1();\n+                        checkpointRestore1(outputStream_p); \n@@ -253,2 +252,1 @@\n-    private static String checkpointRestoreInternal(long st){\n-        outputStream_p = st;\n+    private static String checkpointRestoreInternal(long outputStream_p){\n@@ -258,1 +256,1 @@\n-            checkpointRestore();\n+            checkpointRestore(outputStream_p);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"}]}