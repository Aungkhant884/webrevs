{"files":[{"patch":"@@ -286,0 +286,1 @@\n+  const bool _dry_run;\n@@ -289,1 +290,2 @@\n-  VM_Crac() :\n+  VM_Crac(bool dry_run) :\n+    _dry_run(dry_run),\n@@ -5836,1 +5838,1 @@\n-static int checkpoint_restore(FdsInfo* fds) {\n+static int checkpoint_restore() {\n@@ -5982,1 +5984,3 @@\n-  bool ok = true;\n+  \/\/ dry-run fails checkpoint\n+  bool ok = !_dry_run;\n+\n@@ -6061,1 +6065,1 @@\n-  int ret = checkpoint_restore(&fds);\n+  int ret = checkpoint_restore();\n@@ -6162,1 +6166,1 @@\n-Handle os::Linux::checkpoint(TRAPS) {\n+Handle os::Linux::checkpoint(bool dry_run, TRAPS) {\n@@ -6176,1 +6180,1 @@\n-  VM_Crac cr;\n+  VM_Crac cr(dry_run);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  static Handle checkpoint(TRAPS);\n+  static Handle checkpoint(bool dry_run, TRAPS);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1146,1 +1146,1 @@\n-JVM_Checkpoint(JNIEnv *env);\n+JVM_Checkpoint(JNIEnv *env, jboolean dry_run);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3852,2 +3852,2 @@\n-JVM_ENTRY(jobjectArray, JVM_Checkpoint(JNIEnv *env))\n-  Handle ret = os::Linux::checkpoint(CHECK_NULL);\n+JVM_ENTRY(jobjectArray, JVM_Checkpoint(JNIEnv *env, jboolean dry_run))\n+  Handle ret = os::Linux::checkpoint(dry_run, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    private static native Object[] checkpointRestore0();\n+    private static native Object[] checkpointRestore0(boolean dryRun);\n@@ -77,1 +77,1 @@\n-                                               CheckpointException newException) {\n+                                               CheckpointException exception) {\n@@ -84,1 +84,1 @@\n-                    newException.addSuppressed(\n+                    exception.addSuppressed(\n@@ -88,1 +88,1 @@\n-                    newException.addSuppressed(\n+                    exception.addSuppressed(\n@@ -94,1 +94,1 @@\n-                    newException.addSuppressed(\n+                    exception.addSuppressed(\n@@ -113,0 +113,2 @@\n+        CheckpointException checkpointException = null;\n+\n@@ -116,12 +118,3 @@\n-            \/\/ TODO make dry-run\n-            try {\n-                globalContext.afterRestore(null);\n-            } catch (RestoreException re) {\n-                CheckpointException newException = new CheckpointException();\n-                for (Throwable t : ce.getSuppressed()) {\n-                    newException.addSuppressed(t);\n-                }\n-                for (Throwable t : re.getSuppressed()) {\n-                    newException.addSuppressed(t);\n-                }\n-                throw newException;\n+            checkpointException = new CheckpointException();\n+            for (Throwable t : ce.getSuppressed()) {\n+                checkpointException.addSuppressed(t);\n@@ -129,1 +122,0 @@\n-            throw ce;\n@@ -132,1 +124,1 @@\n-        final Object[] bundle = checkpointRestore0();\n+        final Object[] bundle = checkpointRestore0(checkpointException != null);\n@@ -142,1 +134,3 @@\n-            CheckpointException newException = new CheckpointException();\n+            if (checkpointException == null) {\n+                checkpointException = new CheckpointException();\n+            }\n@@ -145,1 +139,1 @@\n-                    translateJVMExceptions(codes, messages, newException);\n+                    translateJVMExceptions(codes, messages, checkpointException);\n@@ -148,1 +142,1 @@\n-                    newException.addSuppressed(\n+                    checkpointException.addSuppressed(\n@@ -152,1 +146,1 @@\n-                    newException.addSuppressed(\n+                    checkpointException.addSuppressed(\n@@ -155,0 +149,1 @@\n+        }\n@@ -156,6 +151,8 @@\n-            try {\n-                globalContext.afterRestore(null);\n-            } catch (RestoreException re) {\n-                for (Throwable t : re.getSuppressed()) {\n-                    newException.addSuppressed(t);\n-                }\n+        try {\n+            globalContext.afterRestore(null);\n+        } catch (RestoreException re) {\n+            if (checkpointException == null) {\n+                throw re;\n+            }\n+            for (Throwable t : re.getSuppressed()) {\n+                checkpointException.addSuppressed(t);\n@@ -163,1 +160,0 @@\n-            throw newException;\n@@ -165,2 +161,3 @@\n-\n-        globalContext.afterRestore(null);\n+        if (checkpointException != null) {\n+            throw checkpointException;\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":29,"deletions":32,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"jdk_crac_Core.h\"\n@@ -38,1 +39,1 @@\n-Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore)\n+Java_jdk_crac_Core_checkpointRestore0(JNIEnv *env, jclass ignore, jboolean dry_run)\n@@ -40,1 +41,1 @@\n-    return JVM_Checkpoint(env);\n+    return JVM_Checkpoint(env, dry_run);\n","filename":"src\/java.base\/share\/native\/libjava\/CracCore.c","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+\n+import jdk.crac.*;\n+\n+\/**\n+ * @test DryRunTest\n+ * @run main\/othervm -XX:CREngine=simengine -XX:CRaCCheckpointTo=.\/cr -XX:+CRPrintResourcesOnCheckpoint DryRunTest\n+ *\/\n+public class DryRunTest {\n+    static class CRResource implements Resource {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            throw new RuntimeException(\"should not pass\");\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+        }\n+    }\n+\n+    static public void main(String[] args) throws Exception {\n+        Resource resource = new CRResource();\n+        Core.getGlobalContext().register(resource);\n+\n+        File tempFile = File.createTempFile(\"jtreg-DryRunTest\", null);\n+        FileOutputStream stream = new FileOutputStream(tempFile);\n+        stream.write('j');\n+\n+        int exceptions = 0;\n+\n+        try {\n+            Core.checkpointRestore();\n+        } catch (CheckpointException ce) {\n+\n+            ce.printStackTrace();\n+\n+            for (Throwable e : ce.getSuppressed()) {\n+                String name = e.getClass().getName();\n+                switch (name) {\n+                    case \"java.lang.RuntimeException\":                exceptions |= 0x1; break;\n+                    case \"jdk.crac.impl.CheckpointOpenFileException\": exceptions |= 0x2; break;\n+                }\n+            }\n+        }\n+\n+        stream.close();\n+        tempFile.delete();\n+\n+        if (exceptions != 0x3) {\n+            throw new RuntimeException(\"fail \" + exceptions);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/DryRunTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}