{"files":[{"patch":"@@ -170,0 +170,43 @@\n+static const char *last_pid_filename = \"\/proc\/sys\/kernel\/ns_last_pid\";\n+\n+static int get_last_pid() {\n+    FILE *last_pid_file = fopen(last_pid_filename, \"r\");\n+    if (!last_pid_file) {\n+        perror(\"last_pid_file fopen\");\n+        return -1;\n+    }\n+    int last_pid;\n+    if (0 >= fscanf(last_pid_file, \"%d\", &last_pid)) {\n+        fclose(last_pid_file);\n+        perror(\"last_pid_file fscanf\");\n+        last_pid = -1;\n+    }\n+    fclose(last_pid_file);\n+    return last_pid;\n+}\n+\n+static void set_last_pid(int pid) {\n+    FILE *last_pid_file = fopen(last_pid_filename, \"w\");\n+    if (!last_pid_file) {\n+        perror(\"last_pid_file fopen\");\n+        return;\n+    }\n+    if (0 > fprintf(last_pid_file, \"%d\", pid)) {\n+        perror(\"last_pid_file fprintf\");\n+    }\n+    fclose(last_pid_file);\n+}\n+\n+static void spin_last_pid(int pid) {\n+    for (pid_t child = fork(); child < (pid_t)pid; child = fork()) {\n+        if (0 == child) {\n+            exit(0);\n+        }\n+        int status;\n+        if (0 > waitpid(child, &status, 0)) {\n+            perror(\"waitpid last pid\");\n+            break;\n+        }\n+    }\n+}\n+\n@@ -281,9 +324,26 @@\n-    \/\/ Avoid unexpected process completion when checkpointing under docker container run\n-    \/\/ by creating the main process waiting for children before exit.\n-    if (is_checkpoint && 1 == getpid()) {\n-        g_child_pid = fork();\n-        if (0 < g_child_pid) {\n-            \/\/ The main process should forward signals to the child.\n-            setup_sighandler();\n-            const int status = wait_for_children();\n-            exit(status);\n+    if (is_checkpoint) {\n+        const int crac_min_pid_default = 128;\n+        const char *env_min_pid_str = getenv(\"CRAC_MIN_PID\");\n+        const int env_min_pid = env_min_pid_str ? atoi(env_min_pid_str) : 0;\n+        \/\/ TODO: should it be checked for max pid overflow?\n+        const int crac_min_pid = 0 < env_min_pid ? env_min_pid : crac_min_pid_default;\n+\n+        if (getpid() <= crac_min_pid) {\n+            \/\/ Move PID value for new processes to a desired value\n+            \/\/ to avoid PID conflicts on restore.\n+            if (get_last_pid() < crac_min_pid) {\n+                set_last_pid(crac_min_pid);\n+                if (get_last_pid() < crac_min_pid) {\n+                    spin_last_pid(crac_min_pid);\n+                }\n+            }\n+\n+            \/\/ Avoid unexpected process completion when checkpointing under docker container run\n+            \/\/ by creating the main process waiting for children before exit.\n+            g_child_pid = fork();\n+            if (0 < g_child_pid) {\n+                \/\/ The main process should forward signals to the child.\n+                setup_sighandler();\n+                const int status = wait_for_children();\n+                exit(status);\n+            }\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":69,"deletions":9,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Azul Systems, 385 Moffett Park Drive, Suite 115, Sunnyvale\n+ * CA 94089 USA or visit www.azul.com if you need additional information or\n+ * have any questions.\n+ *\/\n+\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracProcess;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertLessThan;\n+\n+\/*\n+ * @test ContainerPidAdjustmentTest\n+ * @summary The test checks that process PID is adjusted with the specified value, when checkpointing in a container. Default min PID value is 128.\n+ * @library \/test\/lib\n+ * @build ContainerPidAdjustmentTest\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest false 0      128  false\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true  0      128  false\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true  1      1    false\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true  1000   1000 true\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true  -10    128  false\n+ *\/\n+public class ContainerPidAdjustmentTest implements CracTest {\n+    @CracTestArg(0)\n+    boolean needSetLastPid;\n+\n+    @CracTestArg(1)\n+    long lastPid;\n+\n+    @CracTestArg(2)\n+    long expectedLastPid;\n+\n+    @CracTestArg(3)\n+    boolean disablePrivileged;\n+\n+    @Override\n+    public void test() throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+        CracBuilder builder = new CracBuilder()\n+            .inDockerImage(\"pid-adjustment\")\n+            .disablePrivileged(disablePrivileged);\n+        if (needSetLastPid) {\n+            builder.dockerOptions(\"-e\", \"CRAC_MIN_PID=\" + lastPid);\n+        }\n+        assertEquals(0, builder.startCheckpoint().waitFor(), \"Process exited abnormally.\");\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        System.out.println(\"Current PID = \" + ProcessHandle.current().pid());\n+        assertLessThan(expectedLastPid, ProcessHandle.current().pid());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/ContainerPidAdjustmentTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -34,0 +34,1 @@\n+    boolean disablePrivileged = false;\n@@ -73,0 +74,1 @@\n+        other.disablePrivileged = disablePrivileged;\n@@ -99,0 +101,5 @@\n+    public CracBuilder disablePrivileged(boolean disablePrivileged) {\n+        this.disablePrivileged = disablePrivileged;\n+        return this;\n+    }\n+\n@@ -271,1 +278,3 @@\n-        cmd.add(\"--privileged\"); \/\/ required to give CRIU sufficient permissions\n+        if (!disablePrivileged) {\n+            cmd.add(\"--privileged\"); \/\/ required to give CRIU sufficient permissions\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}