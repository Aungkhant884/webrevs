{"files":[{"patch":"@@ -2100,1 +2100,1 @@\n-  product(uint, CRaCMinPid, 128,                                           \\\n+  product(uint, CRaCMinPid, 1,                                              \\\n@@ -2102,0 +2102,1 @@\n+      range(1, UINT_MAX)                                                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -348,3 +348,1 @@\n-    if (is_checkpoint) {\n-        const int crac_min_pid_default = 128;\n-        const int min_pid = 0 < crac_min_pid ? crac_min_pid : crac_min_pid_default;\n+    if (is_checkpoint && (1 == getpid() || is_min_pid_set)) {\n@@ -352,4 +350,1 @@\n-        if (is_min_pid_set && min_pid != crac_min_pid) {\n-            fprintf(stderr, \"Warning: wrong CRaCMinPid specified %d, using default value.\\n\", crac_min_pid);\n-        }\n-        if (getpid() <= min_pid) {\n+        if (is_min_pid_set && 0 < crac_min_pid && getpid() < crac_min_pid) {\n@@ -358,8 +353,6 @@\n-            {\n-                const int res = set_last_pid(min_pid);\n-                if (EPERM == res || EACCES == res || EROFS == res) {\n-                    spin_last_pid(min_pid);\n-                } else if (0 != res) {\n-                    fprintf(stderr, \"set_last_pid: %s\\n\", strerror(res));\n-                    exit(1);\n-                }\n+            const int res = set_last_pid(crac_min_pid);\n+            if (EPERM == res || EACCES == res || EROFS == res) {\n+                spin_last_pid(crac_min_pid);\n+            } else if (0 != res) {\n+                fprintf(stderr, \"set_last_pid: %s\\n\", strerror(res));\n+                exit(1);\n@@ -367,0 +360,1 @@\n+        }\n@@ -368,20 +362,13 @@\n-            \/\/ Avoid unexpected process completion when checkpointing under docker container run\n-            \/\/ by creating the main process waiting for children before exit.\n-            g_child_pid = fork();\n-            if (0 == g_child_pid && getpid() < min_pid) {\n-                if (is_min_pid_set) {\n-                    fprintf(stderr, \"Error: Can't adjust PID to min PID %d, current PID %d\\n\", min_pid, (int)getpid());\n-                    exit(1);\n-                } else {\n-                    fprintf(stderr,\n-                            \"Warning: Can't adjust PID to min PID %d, current PID %d.\\n\"\n-                            \"This message can be suppressed by '-XX:CRaCMinPid=1' option\\n\",\n-                            min_pid, (int)getpid());\n-                }\n-            }\n-            if (0 < g_child_pid) {\n-                \/\/ The main process should forward signals to the child.\n-                setup_sighandler();\n-                const int status = wait_for_children();\n-                exit(status);\n-            }\n+        \/\/ Avoid unexpected process completion when checkpointing under docker container run\n+        \/\/ or when adjusting PID for checkpointed process\n+        \/\/ by creating the main process waiting for children before exit.\n+        g_child_pid = fork();\n+        if (0 == g_child_pid && is_min_pid_set && getpid() < crac_min_pid) {\n+            fprintf(stderr, \"Error: Can't adjust PID to min PID %d, current PID %d\\n\", crac_min_pid, (int)getpid());\n+            exit(1);\n+        }\n+        if (0 < g_child_pid) {\n+            \/\/ The main process should forward signals to the child.\n+            setup_sighandler();\n+            const int status = wait_for_children();\n+            exit(status);\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":22,"deletions":35,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -42,9 +42,9 @@\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   false  0       true   128\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   0       true   128\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   1       true   1\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   1000    false  1000\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   -10     true   -1\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   blabla  true   -1\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   5000000 true   -1\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   5000000 true   -1     4194200\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   4194303 true   -1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   1       true   1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   128     true   128\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   1000    false  1000\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   0       true   -1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   -10     true   -1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   blabla  true   -1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   5000000 true   -1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   5000000 true   -1     4194200\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   4194303 true   -1\n@@ -54,3 +54,0 @@\n-    boolean needSetLastPid;\n-\n-    @CracTestArg(1)\n@@ -59,1 +56,1 @@\n-    @CracTestArg(2)\n+    @CracTestArg(1)\n@@ -62,1 +59,1 @@\n-    @CracTestArg(3)\n+    @CracTestArg(2)\n@@ -65,1 +62,1 @@\n-    @CracTestArg(value = 4, optional = true)\n+    @CracTestArg(value = 3, optional = true)\n@@ -77,4 +74,2 @@\n-            .containerUsePrivileged(usePrivilegedContainer);\n-        if (needSetLastPid) {\n-            builder.vmOption(\"-XX:CRaCMinPid=\" + lastPid);\n-        }\n+            .containerUsePrivileged(usePrivilegedContainer)\n+            .vmOption(\"-XX:CRaCMinPid=\" + lastPid);\n","filename":"test\/jdk\/jdk\/crac\/ContainerPidAdjustmentTest.java","additions":14,"deletions":19,"binary":false,"changes":33,"status":"modified"}]}