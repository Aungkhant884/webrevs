{"files":[{"patch":"@@ -2100,0 +2100,3 @@\n+  product(ccstr, CRaCMinPid, NULL, RESTORE_SETTABLE,                        \\\n+      \"Mininal PID value for checkpoint'ed process\")                        \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1328,0 +1328,5 @@\n+.B \\f[CB]\\-XX:CRaCMinPid=\\f[R]value\\f[R]\n+A desired minimal PID value for checkpoint'ed process. Ignored on restore.\n+.RS\n+.RE\n+.TP\n","filename":"src\/java.base\/share\/man\/java.1","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,7 @@\n+#ifndef WIN32\n+#include <errno.h>\n+#endif\n+#ifdef LINUX\n+#include <syscall.h>\n+#endif\n+\n@@ -100,0 +107,1 @@\n+static int crac_min_pid = 0;\n@@ -109,0 +117,7 @@\n+    {\n+        const char *checkpoint_arg = \"-XX:CRaCMinPid=\";\n+        const int len = strlen(checkpoint_arg);\n+        if (0 == strncmp(arg, checkpoint_arg, len)) {\n+            crac_min_pid = atoi(arg + len);\n+        }\n+    }\n@@ -170,7 +185,6 @@\n-static const char *last_pid_filename = \"\/proc\/sys\/kernel\/ns_last_pid\";\n-\n-static int get_last_pid() {\n-    FILE *last_pid_file = fopen(last_pid_filename, \"r\");\n-    if (!last_pid_file) {\n-        perror(\"last_pid_file fopen\");\n-        return -1;\n+static int set_last_pid(int pid) {\n+#ifdef LINUX\n+    char buf[11]; \/\/ enough for int32\n+    const int len = snprintf(buf, sizeof(buf), \"%d\", pid);\n+    if (0 > len || sizeof(buf) < (size_t)len) {\n+        return EINVAL;\n@@ -178,5 +192,4 @@\n-    int last_pid;\n-    if (0 >= fscanf(last_pid_file, \"%d\", &last_pid)) {\n-        fclose(last_pid_file);\n-        perror(\"last_pid_file fscanf\");\n-        last_pid = -1;\n+    const char *last_pid_filename = \"\/proc\/sys\/kernel\/ns_last_pid\";\n+    const int last_pid_file = open(last_pid_filename, O_WRONLY|O_CREAT|O_TRUNC, 0666);\n+    if (0 > last_pid_file) {\n+        return errno;\n@@ -184,2 +197,3 @@\n-    fclose(last_pid_file);\n-    return last_pid;\n+    int res = 0;\n+    if (0 > write(last_pid_file, buf, len)) {\n+        res =   errno;\n@@ -187,11 +201,5 @@\n-\n-static void set_last_pid(int pid) {\n-    FILE *last_pid_file = fopen(last_pid_filename, \"w\");\n-    if (!last_pid_file) {\n-        perror(\"last_pid_file fopen\");\n-        return;\n-    }\n-    if (0 > fprintf(last_pid_file, \"%d\", pid)) {\n-        perror(\"last_pid_file fprintf\");\n-    }\n-    fclose(last_pid_file);\n+    close(last_pid_file);\n+    return res;\n+#else\n+    return EPERM;\n+#endif\n@@ -201,1 +209,6 @@\n-    for (pid_t child = fork(); child < (pid_t)pid; child = fork()) {\n+    const int MaxSpinCount = 10000;\n+    for (int child = fork(), prev = 0, cnt = MaxSpinCount; child < pid; child = fork(), --cnt) {\n+        if (0 > child) {\n+            perror(\"spin_last_pid clone\");\n+            exit(1);\n+        }\n@@ -205,0 +218,9 @@\n+        if (child < prev) {\n+            fprintf(stderr, \"%s: Invalid argument (%d)\\n\", __FUNCTION__, pid);\n+            exit(1);\n+        }\n+        if (0 >= cnt) {\n+            fprintf(stderr, \"%s: Can't reach pid %d, out of try count. Current pid=%d\\n\", __FUNCTION__, pid, child);\n+            exit(1);\n+        }\n+        prev = child;\n@@ -207,2 +229,2 @@\n-            perror(\"waitpid last pid\");\n-            break;\n+            perror(\"spin_last_pid waitpid\");\n+            exit(1);\n@@ -326,4 +348,1 @@\n-        const char *env_min_pid_str = getenv(\"CRAC_MIN_PID\");\n-        const int env_min_pid = env_min_pid_str ? atoi(env_min_pid_str) : 0;\n-        \/\/ TODO: should it be checked for max pid overflow?\n-        const int crac_min_pid = 0 < env_min_pid ? env_min_pid : crac_min_pid_default;\n+        const int min_pid = 0 < crac_min_pid ? crac_min_pid : crac_min_pid_default;\n@@ -331,1 +350,1 @@\n-        if (getpid() <= crac_min_pid) {\n+        if (getpid() <= min_pid) {\n@@ -334,4 +353,8 @@\n-            if (get_last_pid() < crac_min_pid) {\n-                set_last_pid(crac_min_pid);\n-                if (get_last_pid() < crac_min_pid) {\n-                    spin_last_pid(crac_min_pid);\n+            {\n+                const int res = set_last_pid(min_pid);\n+                if (EPERM == res || EACCES == res || EROFS == res) {\n+                    spin_last_pid(min_pid);\n+                } else if (0 != res) {\n+                    errno = res;\n+                    perror(\"set_last_pid\");\n+                    exit(1);\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":60,"deletions":37,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n@@ -38,5 +42,9 @@\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest false 0      128  true\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true  0      128  true\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true  1      1    true\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true  1000   1000 false\n- * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true  -10    128  true\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   false  0       true   128\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   0       true   128\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   1       true   1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   1000    false  1000\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   -10     true   128\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   40000   true   40000\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   40000   false  -1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   5000000 true   -1\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest   true   5000000 true   -1     4194200\n@@ -52,1 +60,1 @@\n-    long expectedLastPid;\n+    boolean usePrivilegedContainer;\n@@ -55,1 +63,4 @@\n-    boolean enablePrivileged;\n+    long expectedLastPid;\n+\n+    @CracTestArg(value = 4, optional = true)\n+    String lastPidSetup;\n@@ -64,1 +75,1 @@\n-            .enablePrivilegesInContainer(enablePrivileged);\n+            .containerUsePrivileged(usePrivilegedContainer);\n@@ -66,1 +77,22 @@\n-            builder.dockerOptions(\"-e\", \"CRAC_MIN_PID=\" + lastPid);\n+            builder.vmOption(\"-XX:CRaCMinPid=\" + lastPid);\n+        }\n+        if (null != lastPidSetup) {\n+            \/\/ Set up the initial last pid,\n+            \/\/ create a non-privileged user,\n+            \/\/ and force spinning the last pid running checkpoint under the user.\n+            builder\n+                .containerSetup(Arrays.asList(\"bash\", \"-c\", \"useradd the_user && echo \" + lastPidSetup + \" >\/proc\/sys\/kernel\/ns_last_pid\"))\n+                .captureOutput(true)\n+                .dockerCheckpointOptions(Arrays.asList(\"-u\", \"the_user\"));\n+        }\n+\n+        if (0 < expectedLastPid) {\n+            builder.startCheckpoint().waitForSuccess();\n+        } else {\n+            int expectedExitValue = (int)java.lang.Math.abs(expectedLastPid);\n+            CracProcess process = builder.startCheckpoint();\n+            final int exitValue = process.waitFor();\n+            assertEquals(expectedExitValue, exitValue, \"Process returned unexpected exit code: \" + exitValue);\n+            if (null != lastPidSetup) {\n+                process.outputAnalyzer().shouldContain(\"spin_last_pid: Invalid argument (\" + lastPid + \")\");\n+            }\n@@ -68,1 +100,0 @@\n-        builder.startCheckpoint().waitForSuccess();\n@@ -74,0 +105,1 @@\n+        assertLessThan((long)0, expectedLastPid, \"Shouldn't happen\");\n","filename":"test\/jdk\/jdk\/crac\/ContainerPidAdjustmentTest.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -49,1 +49,3 @@\n-    boolean enablePrivilegesInContainer = true;\n+    private List<String> dockerCheckpointOptions;\n+    boolean containerUsePrivileged = true;\n+    private List<String> containerSetupCommand;\n@@ -87,1 +89,3 @@\n-        other.enablePrivilegesInContainer = enablePrivilegesInContainer;\n+        other.dockerCheckpointOptions = dockerCheckpointOptions;\n+        other.containerUsePrivileged = containerUsePrivileged;\n+        other.containerSetupCommand = containerSetupCommand;\n@@ -101,2 +105,12 @@\n-    public CracBuilder enablePrivilegesInContainer(boolean enablePrivileges) {\n-        this.enablePrivilegesInContainer = enablePrivileges;\n+    public CracBuilder dockerCheckpointOptions(List<String> options) {\n+        this.dockerCheckpointOptions = options;\n+        return this;\n+    }\n+\n+    public CracBuilder containerSetup(List<String> cmd) {\n+        this.containerSetupCommand = cmd;\n+        return this;\n+    }\n+\n+    public CracBuilder containerUsePrivileged(boolean usePrivileged) {\n+        this.containerUsePrivileged = usePrivileged;\n@@ -243,0 +257,1 @@\n+            containerSetup();\n@@ -247,0 +262,10 @@\n+    private void containerSetup() throws Exception {\n+        if (null != containerSetupCommand && 0 < containerSetupCommand.size()) {\n+            List<String> cmd = new ArrayList<>();\n+            cmd.addAll(Arrays.asList(Container.ENGINE_COMMAND, \"exec\", CONTAINER_NAME));\n+            cmd.addAll(containerSetupCommand);\n+            log(\"Container set up:\\n\" + String.join(\" \", cmd));\n+            DockerTestUtils.execute(cmd).shouldHaveExitValue(0);\n+        }\n+    }\n+\n@@ -278,1 +303,1 @@\n-        if (enablePrivilegesInContainer) {\n+        if (containerUsePrivileged) {\n@@ -381,1 +406,6 @@\n-            cmd.addAll(Arrays.asList(Container.ENGINE_COMMAND, \"exec\", CONTAINER_NAME));\n+            cmd.add(Container.ENGINE_COMMAND);\n+            cmd.add(\"exec\");\n+            if (null != dockerCheckpointOptions) {\n+                cmd.addAll(dockerCheckpointOptions);\n+            }\n+            cmd.add(CONTAINER_NAME);\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":36,"deletions":6,"binary":false,"changes":42,"status":"modified"}]}