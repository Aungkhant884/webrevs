{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include \"os_posix.hpp\"\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,4 @@\n+void crac::initialize_time_counters() {\n+  os::Posix::initialize_time_counters();\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/crac_posix.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1258,0 +1258,4 @@\n+  initialize_time_counters();\n+}\n+\n+void os::Posix::initialize_time_counters(void) {\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+  static void initialize_time_counters(void);\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,4 @@\n+\n+void crac::initialize_time_counters() {\n+  os::win32::initialize_performance_counter();\n+}\n","filename":"src\/hotspot\/os\/windows\/crac_windows.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -360,0 +360,4 @@\n+  if (CRaCResetStartTime) {\n+    crac::initialize_time_counters();\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+  static void initialize_time_counters();\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1999,0 +1999,3 @@\n+  product(bool, CRaCResetStartTime, false, RESTORE_SETTABLE,                    \\\n+      \"Reset JVM's start time and uptime on restore\")                     \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+import jdk.test.lib.Utils;\n+\n+import java.lang.management.ManagementFactory;\n+import java.nio.file.Path;\n+import java.util.*;\n+\n+import static jdk.test.lib.Asserts.assertLT;\n+import static jdk.test.lib.Asserts.assertLTE;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build ResetStartTimeTest\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest false\n+ * @run driver\/timeout=60 jdk.test.lib.crac.CracTest true\n+ *\/\n+public class ResetStartTimeTest implements CracTest {\n+\n+    @CracTestArg(0)\n+    boolean resetUptime;\n+\n+    static private final long WAIT_TIMEOUT = 2 * 1000; \/\/ msecs\n+\n+    @Override\n+    public void test() throws Exception {\n+        CracBuilder builder = new CracBuilder().engine(CracEngine.SIMULATE);\n+        if (resetUptime) {\n+            builder.vmOption(\"-XX:+CRaCResetStartTime\");\n+        }\n+        var output = builder.captureOutput(true)\n+                .startCheckpoint().waitForSuccess()\n+                .outputAnalyzer();\n+        output.shouldContain(RESTORED_MESSAGE);\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Thread.sleep(WAIT_TIMEOUT);\n+        final long uptime0 = ManagementFactory.getRuntimeMXBean().getUptime();\n+\n+        Core.checkpointRestore();\n+        System.out.println(RESTORED_MESSAGE);\n+        final long uptime1 = ManagementFactory.getRuntimeMXBean().getUptime();\n+\n+        if (resetUptime) {\n+            assertLT(uptime1, uptime0);\n+            assertLT(uptime1, WAIT_TIMEOUT);\n+        } else {\n+            assertLTE(uptime0, uptime1);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/ResetStartTimeTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}