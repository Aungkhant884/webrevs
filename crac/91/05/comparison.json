{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.WeakHashMap;\n@@ -37,0 +38,4 @@\n+import jdk.internal.crac.Core;\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -43,1 +48,1 @@\n-class JarFileFactory implements URLJarFile.URLJarFileCloseController {\n+class JarFileFactory implements URLJarFile.URLJarFileCloseController, jdk.internal.crac.JDKResource {\n@@ -53,1 +58,3 @@\n-    private JarFileFactory() { }\n+    private JarFileFactory() {\n+        Core.Priority.NORMAL.getContext().register(this);\n+    }\n@@ -262,0 +269,25 @@\n+\n+    @Override\n+    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+        \/\/ Need to clear cached entries that are held by the factory only (e.g.\n+        \/\/ after JarURLInputStream.close with useCaches == true).  Creating a\n+        \/\/ temporary weak cache and triggering GC to get know JARs really in\n+        \/\/ use.\n+        synchronized (instance) {\n+            WeakHashMap<JarFile, URL> weakMap = new WeakHashMap<>(urlCache);\n+            fileCache.clear();\n+            urlCache.clear();\n+\n+            System.gc();\n+\n+            weakMap.forEach((JarFile jarFile, URL url) -> {\n+                String key = urlKey(url);\n+                urlCache.put(jarFile, url);\n+                fileCache.put(key, jarFile);\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public void afterRestore(Context<? extends Resource> context) throws Exception {\n+    }\n","filename":"src\/java.base\/windows\/classes\/sun\/net\/www\/protocol\/jar\/JarFileFactory.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+#include <windows.h>\n+#include <winternl.h>\n+\n@@ -96,0 +99,2 @@\n+#define BufferSize 1024\n+\n@@ -97,3 +102,11 @@\n-Java_java_io_FileDescriptor_nativeDescription0(JNIEnv *env, jobject this) {\n-    return (*env)->NewStringUTF(env, \"(not implemented)\");\n-}\n\\ No newline at end of file\n+Java_java_io_FileDescriptor_nativeDescription0(JNIEnv* env, jobject this) {\n+    HANDLE handle = (HANDLE)(*env)->GetLongField(env, this, IO_handle_fdID);\n+    char lpszFilePath[BufferSize] = {'\\0'};\n+\n+    const DWORD dwFileType = GetFileType(handle);\n+    if (FILE_TYPE_DISK != dwFileType || !GetFinalPathNameByHandleA(handle, lpszFilePath, BufferSize, FILE_NAME_OPENED)) {\n+        snprintf(lpszFilePath, sizeof(lpszFilePath) - 1, \"Handle 0x%p, type %lu\", handle, dwFileType);\n+    }\n+\n+    return (*env)->NewStringUTF(env, lpszFilePath);\n+}\n","filename":"src\/java.base\/windows\/native\/libjava\/FileDescriptor_md.c","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @requires (os.family == \"linux\")\n","filename":"test\/jdk\/jdk\/crac\/JarFileFactoryCacheTest\/JarFileFactoryCacheTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.test.lib.crac.CracEngine;\n@@ -29,0 +30,1 @@\n+import java.io.File;\n@@ -37,1 +39,0 @@\n- * @requires (os.family == \"linux\")\n@@ -42,1 +43,1 @@\n-        CracProcess cp = new CracBuilder().captureOutput(true)\n+        CracProcess cp = new CracBuilder().engine(CracEngine.SIMULATE).captureOutput(true)\n@@ -47,2 +48,2 @@\n-                .shouldMatch(\"CheckpointOpenFileException: \/etc\/passwd\") \/\/ RandomAccessFile should have the expected format\n-                .shouldMatch(\"\/etc\/group\") \/\/ others are allowed to specify the path in some format\n+                .shouldMatch(\"CheckpointOpenFileException: filename1.txt\") \/\/ RandomAccessFile should have the expected format\n+                .shouldMatch(\"filename2.txt\") \/\/ others are allowed to specify the path in some format\n@@ -54,2 +55,5 @@\n-        try (var file1 = new RandomAccessFile(\"\/etc\/passwd\", \"r\");\n-             var file2 = new FileInputStream(\"\/etc\/group\")) {\n+        new File(\"filename1.txt\").createNewFile();\n+        new File(\"filename2.txt\").createNewFile();\n+\n+        try (var file1 = new RandomAccessFile(\"filename1.txt\", \"r\");\n+             var file2 = new FileInputStream(\"filename2.txt\")) {\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/OpenFileDetectionTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.test.lib.crac.CracEngine;\n@@ -40,1 +41,0 @@\n- * @requires (os.family == \"linux\")\n@@ -45,1 +45,1 @@\n-        CracProcess cp = new CracBuilder().captureOutput(true)\n+        CracProcess cp = new CracBuilder().engine(CracEngine.SIMULATE).captureOutput(true)\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/OpenSocketDetectionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}