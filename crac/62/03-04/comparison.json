{"files":[{"patch":"@@ -29,4 +29,2 @@\n-import jdk.crac.impl.CheckpointOpenFileException;\n-import jdk.crac.impl.CheckpointOpenResourceException;\n-import jdk.crac.impl.CheckpointOpenSocketException;\n-import jdk.crac.impl.OrderedContext;\n+import jdk.crac.impl.*;\n+\n@@ -44,1 +42,0 @@\n-import java.util.concurrent.CountDownLatch;\n@@ -235,28 +232,1 @@\n-    \/**\n-     * Keeps VM alive by at least one non-daemon thread.\n-     *\/\n-    private static class KeepAlive {\n-        private final CountDownLatch start = new CountDownLatch(1);\n-        private final CountDownLatch finish = new CountDownLatch(1);\n-\n-        private final Thread thread = new Thread(() -> {\n-            start.countDown();\n-            try {\n-                finish.await();\n-            } catch (InterruptedException e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n-\n-        KeepAlive() throws InterruptedException {\n-            thread.setDaemon(false);\n-            thread.start();\n-            start.await();\n-        }\n-\n-        public void stop() throws InterruptedException {\n-            finish.countDown();\n-            thread.join();\n-        }\n-    }\n-\n+    @SuppressWarnings(\"try\")\n@@ -276,3 +246,1 @@\n-            KeepAlive keepAlive = null;\n-\n-            try {\n+            try (@SuppressWarnings(\"unused\") var keepAlive = new KeepAlive()) {\n@@ -280,12 +248,0 @@\n-\n-                \/\/ Create a non-daemon thread while notification is performed\n-                \/\/ to avoid VM exit. The notifications are done on the original\n-                \/\/ thread.\n-                if (Thread.currentThread().isDaemon()) {\n-                    try {\n-                        keepAlive = new KeepAlive();\n-                    } catch (InterruptedException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                }\n-\n@@ -297,8 +253,0 @@\n-\n-                if (keepAlive != null) {\n-                    try {\n-                        keepAlive.stop();\n-                    } catch (InterruptedException e) {\n-                    }\n-                }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":4,"deletions":56,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.crac.impl;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+\/**\n+ * Keeps VM alive by at least one non-daemon thread.\n+ *\/\n+public class KeepAlive implements AutoCloseable {\n+    private final CountDownLatch start = new CountDownLatch(1);\n+    private final CountDownLatch finish = new CountDownLatch(1);\n+    private final Thread thread;\n+\n+    public KeepAlive() {\n+        \/\/ When the thread running notifications is not a daemon thread\n+        \/\/ it is unnecessary to create the keep-alive thread.\n+        if (!Thread.currentThread().isDaemon()) {\n+            thread = null;\n+            return;\n+        }\n+        thread = new Thread(() -> {\n+            start.countDown();\n+            try {\n+                finish.await();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, \"CRaC Keep-Alive\");\n+        thread.setDaemon(false);\n+        thread.start();\n+        try {\n+            start.await();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(\"Interrupted waiting for the keep-alive thread to start.\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        if (thread == null) {\n+            return; \/\/ noop\n+        }\n+        finish.countDown();\n+        try {\n+            thread.join();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(\"Interrupted waiting for the keep-alive thread to complete\", e);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/KeepAlive.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -33,0 +33,2 @@\n+import static jdk.test.lib.Asserts.assertFalse;\n+\n@@ -82,1 +84,1 @@\n-        workerThread.setDaemon(false);\n+        assertFalse(workerThread.isDaemon());\n","filename":"test\/jdk\/jdk\/crac\/DaemonAfterRestore.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}