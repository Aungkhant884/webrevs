{"files":[{"patch":"@@ -29,4 +29,2 @@\n-import jdk.crac.impl.CheckpointOpenFileException;\n-import jdk.crac.impl.CheckpointOpenResourceException;\n-import jdk.crac.impl.CheckpointOpenSocketException;\n-import jdk.crac.impl.OrderedContext;\n+import jdk.crac.impl.*;\n+\n@@ -234,0 +232,1 @@\n+    @SuppressWarnings(\"try\")\n@@ -243,1 +242,5 @@\n-            if (!checkpointInProgress) {\n+            if (checkpointInProgress) {\n+                throw new CheckpointException(\"Recursive checkpoint is not allowed\");\n+            }\n+\n+            try (@SuppressWarnings(\"unused\") var keepAlive = new KeepAlive()) {\n@@ -245,7 +248,4 @@\n-                try {\n-                    checkpointRestore1(jcmdStream);\n-                } finally {\n-                    if (FlagsHolder.TRACE_STARTUP_TIME) {\n-                        System.out.println(\"STARTUPTIME \" + System.nanoTime() + \" restore-finish\");\n-                    }\n-                    checkpointInProgress = false;\n+                checkpointRestore1(jcmdStream);\n+            } finally {\n+                if (FlagsHolder.TRACE_STARTUP_TIME) {\n+                    System.out.println(\"STARTUPTIME \" + System.nanoTime() + \" restore-finish\");\n@@ -253,2 +253,1 @@\n-            } else {\n-                throw new CheckpointException(\"Recursive checkpoint is not allowed\");\n+                checkpointInProgress = false;\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.crac.impl;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+\/**\n+ * Keeps VM alive by at least one non-daemon thread.\n+ *\/\n+public class KeepAlive implements AutoCloseable {\n+    private final CountDownLatch start = new CountDownLatch(1);\n+    private final CountDownLatch finish = new CountDownLatch(1);\n+    private final Thread thread;\n+\n+    public KeepAlive() {\n+        \/\/ When the thread running notifications is not a daemon thread\n+        \/\/ it is unnecessary to create the keep-alive thread.\n+        if (!Thread.currentThread().isDaemon()) {\n+            thread = null;\n+            return;\n+        }\n+        thread = new Thread(() -> {\n+            start.countDown();\n+            try {\n+                finish.await();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, \"CRaC Keep-Alive\");\n+        thread.setDaemon(false);\n+        thread.start();\n+        try {\n+            start.await();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(\"Interrupted waiting for the keep-alive thread to start.\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        if (thread == null) {\n+            return; \/\/ noop\n+        }\n+        finish.countDown();\n+        try {\n+            thread.join();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(\"Interrupted waiting for the keep-alive thread to complete\", e);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/KeepAlive.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.*;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracProcess;\n+import jdk.test.lib.crac.CracTest;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static jdk.test.lib.Asserts.assertFalse;\n+\n+\/**\n+ * @test\n+ * @summary All afterRestore's should complete, even if there are only daemon threads (in case one of the afterRestore's finally creates non-daemon thread that will be responsible to keep VM alive)\n+ * @library \/test\/lib\n+ * @build DaemonAfterRestore\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class DaemonAfterRestore implements CracTest {\n+    static final String MAIN_THREAD_FINISH = \"main thread finish\";\n+    static final String AFTER_RESTORE_MESSAGE = \"after restore finish\";\n+\n+    @Override\n+    public void test() throws Exception {\n+        CracBuilder builder = new CracBuilder().captureOutput(true);\n+\n+        CompletableFuture<?> firstOutputFuture = new CompletableFuture<Void>();\n+        CracProcess checkpointProcess = builder.startCheckpoint().watch(\n+            outline -> {\n+                System.out.println(outline);\n+                if (outline.equals(MAIN_THREAD_FINISH)) {\n+                    firstOutputFuture.complete(null);\n+                }\n+            },\n+            errline -> {\n+                System.err.println(\"ERROR: \" + errline);\n+                firstOutputFuture.cancel(false);\n+            });\n+        firstOutputFuture.get(10, TimeUnit.SECONDS);\n+        builder.checkpointViaJcmd();\n+        checkpointProcess.waitForCheckpointed();\n+\n+        builder.startRestore().waitForSuccess()\n+            .outputAnalyzer().shouldContain(AFTER_RESTORE_MESSAGE);\n+    }\n+\n+    @Override\n+    public void exec() throws RestoreException, CheckpointException {\n+        CountDownLatch start = new CountDownLatch(1);\n+        CountDownLatch finish = new CountDownLatch(1);\n+        Thread workerThread = new Thread(() -> {\n+            System.out.println(\"worker thread start\");\n+            start.countDown();\n+            try {\n+                finish.await();\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+            System.out.println(\"worker thread finish\");\n+        });\n+        assertFalse(workerThread.isDaemon());\n+        workerThread.start();\n+\n+        try {\n+            start.await();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Resource resource = new Resource() {\n+            @Override\n+            public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+                assert Thread.currentThread().isDaemon() : \"beforeCheckpoint is expected to be called from daemon thread\";\n+                finish.countDown();\n+            }\n+            @Override\n+            public void afterRestore(Context<? extends Resource> context) throws Exception {\n+                Thread.sleep(3000);\n+                System.out.println(AFTER_RESTORE_MESSAGE);\n+            }\n+        };\n+\n+        Core.getGlobalContext().register(resource);\n+\n+        System.out.println(MAIN_THREAD_FINISH);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/DaemonAfterRestore.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}