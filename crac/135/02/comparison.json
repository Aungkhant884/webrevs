{"files":[{"patch":"@@ -180,1 +180,2 @@\n-  product(bool, UnlockDiagnosticVMOptions, trueInDebug, DIAGNOSTIC,         \\\n+  product(bool, UnlockDiagnosticVMOptions, trueInDebug,                     \\\n+          DIAGNOSTIC | RESTORE_SETTABLE,                                    \\\n@@ -1999,2 +2000,2 @@\n-  product(bool, CRaCResetStartTime, false, RESTORE_SETTABLE,                    \\\n-      \"Reset JVM's start time and uptime on restore\")                     \\\n+  product(bool, CRaCResetStartTime, true, DIAGNOSTIC | RESTORE_SETTABLE,    \\\n+      \"Reset JVM's start time and uptime on restore\")                       \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @requires (os.family == \"linux\")\n@@ -54,3 +55,5 @@\n-        CracBuilder builder = new CracBuilder().engine(CracEngine.SIMULATE);\n-        if (resetUptime) {\n-            builder.vmOption(\"-XX:+CRaCResetStartTime\");\n+        CracBuilder builder = new CracBuilder();\n+        builder.startCheckpoint().waitForCheckpointed();\n+        if (!resetUptime) {\n+            builder.vmOption(\"-XX:+UnlockDiagnosticVMOptions\");\n+            builder.vmOption(\"-XX:-CRaCResetStartTime\");\n@@ -58,4 +61,2 @@\n-        var output = builder.captureOutput(true)\n-                .startCheckpoint().waitForSuccess()\n-                .outputAnalyzer();\n-        output.shouldContain(RESTORED_MESSAGE);\n+        builder.captureOutput(true).doRestore().waitForSuccess()\n+                .outputAnalyzer().shouldContain(RESTORED_MESSAGE);\n","filename":"test\/jdk\/jdk\/crac\/ResetStartTimeTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"}]}