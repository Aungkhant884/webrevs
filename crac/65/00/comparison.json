{"files":[{"patch":"@@ -46,1 +46,30 @@\n-     * Gets the global {@code Context} for checkpoint\/restore notifications.\n+     * Gets the global {@code Context} for checkpoint\/restore notifications\n+     * with the following properties:\n+     * <ul>\n+     * <li>The context maintains a weak reference to registered {@link jdk.crac.Resource}.\n+     *     The lifecycle of the resource should be bound to the lifecycle of\n+     *     the component (registrar) through a strong reference to the resource\n+     *     (if these are not the same instance). That way the resource receives\n+     *     notifications only until the component ceases to exist.\n+     *     When the registrar does not keep a strong reference to the resource\n+     *     the garbage collector is free to trash the resource and notifications\n+     *     will not be invoked.\n+     * <li>Order of invoking {@link jdk.crac.Resource#beforeCheckpoint(jdk.crac.Context)} is\n+     *     the reverse of the order of {@linkplain jdk.crac.Context#register(jdk.crac.Resource)\n+     *     registration}.\n+     * <li>Order of invoking {@link jdk.crac.Resource#afterRestore(jdk.crac.Context)} is\n+     *     the reverse of the order of {@linkplain jdk.crac.Resource#beforeCheckpoint(jdk.crac.Context)\n+     *     checkpoint notification}, hence the same as the order of\n+     *     {@link jdk.crac.Context#register(jdk.crac.Resource) registration}.\n+     * <li>{@code Resource} is always notified of checkpoint or restore,\n+     *     regardless of whether other {@code Resource} notifications have\n+     *     thrown an exception or not,\n+     * <li>When an exception is thrown during notification it is caught by\n+     *     the {@code Context} and is suppressed by a {@link jdk.crac.CheckpointException}\n+     *     or {@link jdk.crac.RestoreException}, depends on the throwing method.\n+     * <li>When the {@code Resource} throws a {@link jdk.crac.CheckpointException} or\n+     *     {@link RestoreException} with suppressed exceptions (this happens\n+     *     e.g. when the {@code Resource} is a {@code Context}), this context\n+     *     throws a new exception of the same type, with suppressed exceptions\n+     *     from the original exception moved over to the new exception.\n+     * <\/ul>\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- *\n- * <p>The class that is interested in receiving a checkpoint\/restore notification\n+ * <p>\n+ * The class that is interested in receiving a checkpoint\/restore notification\n@@ -35,0 +35,3 @@\n+ * <p>\n+ * Note that other application threads might be running during these notifications,\n+ * therefore it is up to the implementation to protect against concurrent access.\n@@ -40,0 +43,8 @@\n+     * The resource should not depend on the state of any other resource; when\n+     * this method is invoked it is possible that some other resource's\n+     * notification has thrown an error and\/or its\n+     * {@link #afterRestore(Context)} method has been already called.\n+     * <p>\n+     * The order of notification is subject to the {@link Context}\n+     * implementation, e.g. for the global context see\n+     * {@link Core#getGlobalContext()}.\n@@ -47,1 +58,14 @@\n-     * Invoked by a {@code Context} as a notification about restore.\n+     * Invoked by a {@code Context} both as a notification about restore or\n+     * when the checkpoint cannot be performed (e.g. due to this or some other\n+     * resource throwing an exception when {@link #beforeCheckpoint(Context)\n+     * beforeCheckpoint}.\n+     * Therefore, the resource should not have assumptions about it state; it\n+     * can be partially de-initialized if the previous invocation of\n+     * {@link #beforeCheckpoint(Context) beforeCheckpoint} was not successful.\n+     * <p>\n+     * The order of notification is subject to the {@link Context}\n+     * implementation, e.g. for the global context see\n+     * {@link Core#getGlobalContext()}.\n+     * <p>\n+     * The resource can assume that this method is called from the same thread\n+     * as {@link #beforeCheckpoint(Context)} was.\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Resource.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -70,23 +70,0 @@\n- * <h2>Global Context Properties<\/h2>\n- * Java Runtime maintains the global {@code Context} with following properties.\n- * An implementor is encouraged to define {@code Context} with the properties of the global {@code Context}.\n- * <ul>\n- * <li>The {@code Context} maintains a weak reference to registered {@code Resource}.\n- * <\/li>\n- * <li>Order of checkpoint notification is the reverse order of registration.\n- * Restore notification order is the reverse of checkpoint one, that is, forward order of registration.\n- * <\/li>\n- * <li>For single {@code Resource} registered in this {@code Context}:\n- * <ul>\n- *   <li>{@code Resource} is always notified of checkpoint, regardless of other {@code Resource} notifications have thrown an exception or not,\n- *   <\/li>\n- *   <li>{@code Resource} is always notified of restore, regardless of its checkpoint or others' restore notification have thrown an exception or not.\n- *   <\/li>\n- *   <li>When an exception is thrown during notificaion, it is caught by the {@code Context} and is suppressed by a {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n- *   <\/li>\n- *   <li>When the {@code Resource} is a {@code Context} and it throws {@code CheckpointException} or {@code RestoreException}, exceptions suppressed by the original exception are suppressed by another {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n- *   <\/li>\n- * <\/ul>\n- * <li>All exceptions thrown by {@code Resource} are suppressed by {@code CheckpointException} or {@code RestoreException} thrown by the {@code Context}.\n- * <\/li>\n- * <\/ul>\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/package-info.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -105,1 +105,30 @@\n-     * Gets the global {@code Context} for checkpoint\/restore notifications.\n+     * Gets the global {@code Context} for checkpoint\/restore notifications\n+     * with the following properties:\n+     * <ul>\n+     * <li>The context maintains a weak reference to registered {@link Resource}.\n+     *     The lifecycle of the resource should be bound to the lifecycle of\n+     *     the component (registrar) through a strong reference to the resource\n+     *     (if these are not the same instance). That way the resource receives\n+     *     notifications only until the component ceases to exist.\n+     *     When the registrar does not keep a strong reference to the resource\n+     *     the garbage collector is free to trash the resource and notifications\n+     *     will not be invoked.\n+     * <li>Order of invoking {@link Resource#beforeCheckpoint(Context)} is\n+     *     the reverse of the order of {@linkplain Context#register(Resource)\n+     *     registration}.\n+     * <li>Order of invoking {@link Resource#afterRestore(Context)} is\n+     *     the reverse of the order of {@linkplain Resource#beforeCheckpoint(Context)\n+     *     checkpoint notification}, hence the same as the order of\n+     *     {@link Context#register(Resource) registration}.\n+     * <li>{@code Resource} is always notified of checkpoint or restore,\n+     *     regardless of whether other {@code Resource} notifications have\n+     *     thrown an exception or not,\n+     * <li>When an exception is thrown during notification it is caught by\n+     *     the {@code Context} and is suppressed by a {@link CheckpointException}\n+     *     or {@link RestoreException}, depends on the throwing method.\n+     * <li>When the {@code Resource} throws a {@link CheckpointException} or\n+     *     {@link RestoreException} with suppressed exceptions (this happens\n+     *     e.g. when the {@code Resource} is a {@code Context}), this context\n+     *     throws a new exception of the same type, with suppressed exceptions\n+     *     from the original exception moved over to the new exception.\n+     * <\/ul>\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- *\n- * <p>The class that is interested in receiving a checkpoint\/restore notification\n+ * <p>\n+ * The class that is interested in receiving a checkpoint\/restore notification\n@@ -35,0 +35,3 @@\n+ * <p>\n+ * Note that other application threads might be running during these notifications,\n+ * therefore it is up to the implementation to protect against concurrent access.\n@@ -40,0 +43,8 @@\n+     * The resource should not depend on the state of any other resource; when\n+     * this method is invoked it is possible that some other resource's\n+     * notification has thrown an error and\/or its\n+     * {@link #afterRestore(Context)} method has been already called.\n+     * <p>\n+     * The order of notification is subject to the {@link Context}\n+     * implementation, e.g. for the global context see\n+     * {@link Core#getGlobalContext()}.\n@@ -47,1 +58,13 @@\n-     * Invoked by a {@code Context} as a notification about restore.\n+     * Invoked by a {@code Context} both as a notification about restore or\n+     * when the checkpoint cannot be performed (e.g. due to this or some other\n+     * resource throwing an exception from {@link #beforeCheckpoint(Context)\n+     * beforeCheckpoint}). As in the latter case the resource might be partially\n+     * de-initialized this method should validate its assumptions about resource\n+     * state and restore it to a valid state.\n+     * <p>\n+     * The order of notification is subject to the {@link Context}\n+     * implementation, e.g. for the global context see\n+     * {@link Core#getGlobalContext()}.\n+     * <p>\n+     * The resource can assume that this method is called from the same thread\n+     * as {@link #beforeCheckpoint(Context)} was.\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Resource.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n- * If the global {@code Context} throws an exception during checkpoint notification then restore notificaion starts immediately without the image creation.\n+ * If the global {@code Context} throws an exception during checkpoint notification then restore notification starts immediately without the image creation.\n@@ -70,23 +70,0 @@\n- * <h2>Global Context Properties<\/h2>\n- * Java Runtime maintains the global {@code Context} with following properties.\n- * An implementor is encouraged to define {@code Context} with the properties of the global {@code Context}.\n- * <ul>\n- * <li>The {@code Context} maintains a weak reference to registered {@code Resource}.\n- * <\/li>\n- * <li>Order of checkpoint notification is the reverse order of registration.\n- * Restore notification order is the reverse of checkpoint one, that is, forward order of registration.\n- * <\/li>\n- * <li>For single {@code Resource} registered in this {@code Context}:\n- * <ul>\n- *   <li>{@code Resource} is always notified of checkpoint, regardless of other {@code Resource} notifications have thrown an exception or not,\n- *   <\/li>\n- *   <li>{@code Resource} is always notified of restore, regardless of its checkpoint or others' restore notification have thrown an exception or not.\n- *   <\/li>\n- *   <li>When an exception is thrown during notificaion, it is caught by the {@code Context} and is suppressed by a {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n- *   <\/li>\n- *   <li>When the {@code Resource} is a {@code Context} and it throws {@code CheckpointException} or {@code RestoreException}, exceptions suppressed by the original exception are suppressed by another {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n- *   <\/li>\n- * <\/ul>\n- * <li>All exceptions thrown by {@code Resource} are suppressed by {@code CheckpointException} or {@code RestoreException} thrown by the {@code Context}.\n- * <\/li>\n- * <\/ul>\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/package-info.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"}]}