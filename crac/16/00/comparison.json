{"files":[{"patch":"@@ -227,0 +227,4 @@\n+$(eval $(call SetupBuildDemo, JavaCompilerCRaC, \\\n+    DEMO_SUBDIR := crac, \\\n+))\n+\n","filename":"make\/CompileDemos.gmk","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+import java.util.Arrays;\n+import jdk.crac.Core;\n+\n+public class JavaCompilerCRaC {\n+\n+    static void runJavac(String... args) {\n+        System.out.println(\"javac \" + String.join(\" \", args));\n+        int status = com.sun.tools.javac.Main.compile(args);\n+        if (status != 0) {\n+            System.exit(status);\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        int startIdx = 0;\n+        for (int endIdx = 1; endIdx < args.length; ++endIdx) {\n+            if (args[endIdx].equals(\"--\")) {\n+                runJavac(Arrays.copyOfRange(args, startIdx, endIdx));\n+                startIdx = endIdx + 1;\n+            }\n+        }\n+\n+        if (startIdx < args.length) {\n+            runJavac(Arrays.copyOfRange(args, startIdx, args.length));\n+        }\n+\n+        Core.checkpointRestore();\n+\n+        String[] newArgs = Core.newArgs();\n+        runJavac(Arrays.copyOfRange(newArgs, 1, newArgs.length));\n+    }\n+}\n","filename":"src\/demo\/share\/crac\/JavaCompilerCRaC\/JavaCompilerCRaC.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -288,0 +288,1 @@\n+  char* _new_args;\n@@ -291,1 +292,2 @@\n-    _failures(new (ResourceObj::C_HEAP, mtInternal) GrowableArray<CracFailDep>(0, mtInternal))\n+    _failures(new (ResourceObj::C_HEAP, mtInternal) GrowableArray<CracFailDep>(0, mtInternal)),\n+    _new_args(NULL)\n@@ -296,0 +298,3 @@\n+    if (_new_args) {\n+      FREE_C_HEAP_ARRAY(char, _new_args);\n+    }\n@@ -299,1 +304,0 @@\n-\n@@ -301,0 +305,2 @@\n+  char* new_args() { return _new_args; }\n+\n@@ -5836,1 +5842,58 @@\n-static int checkpoint_restore(FdsInfo* fds) {\n+static int set_new_args(int id, const char *args) {\n+    char shmpath[128];\n+    snprintf(shmpath, sizeof(shmpath), \"\/crac_%d\", id);\n+\n+    int shmfd = shm_open(shmpath, O_RDWR | O_CREAT, 0600);\n+    if (-1 == shmfd) {\n+        perror(\"shm_open\");\n+        return -1;\n+    }\n+\n+    int argslen = strlen(args);\n+    int wret = write(shmfd, args, argslen);\n+    if (argslen != wret) {\n+        if (wret < 0) {\n+            perror(\"write shm\");\n+        } else {\n+            fprintf(stderr, \"write shm truncated\");\n+        }\n+        close(shmfd);\n+        return -1;\n+    }\n+\n+    close(shmfd);\n+    return 0;\n+}\n+\n+static char* get_new_args(int id) {\n+    char shmpath[128];\n+    snprintf(shmpath, sizeof(shmpath), \"\/crac_%d\", id);\n+\n+    int shmfd = shm_open(shmpath, O_RDONLY, 0600);\n+    if (-1 == shmfd) {\n+      perror(\"shm_open (ignoring new args)\");\n+      return NULL;\n+    }\n+\n+    shm_unlink(shmpath);\n+\n+    struct stat st;\n+    if (fstat(shmfd, &st)) {\n+      perror(\"shm_open (ignoring new args)\");\n+      close(shmfd);\n+      return NULL;\n+    }\n+\n+    char *args = NEW_C_HEAP_ARRAY(char, st.st_size + 1, mtInternal);\n+    if (read(shmfd, args, st.st_size) < 0) {\n+      perror(\"read (ignoring new args)\");\n+      close(shmfd);\n+      FREE_C_HEAP_ARRAY(char, args);\n+      return NULL;\n+    }\n+\n+    args[st.st_size] = '\\0';\n+    return args;\n+}\n+\n+static int checkpoint_restore(FdsInfo* fds, char** argp) {\n@@ -5870,1 +5933,5 @@\n-  return info.si_int;\n+  if (0 < info.si_int) {\n+    *argp = get_new_args(info.si_int);\n+  }\n+\n+  return JVM_CHECKPOINT_OK;\n@@ -6061,1 +6128,1 @@\n-  int ret = checkpoint_restore(&fds);\n+  int ret = checkpoint_restore(&fds, &_new_args);\n@@ -6145,2 +6212,2 @@\n-static Handle ret_cr(int ret, Handle codes, Handle msgs, TRAPS) {\n-  objArrayOop bundleObj = oopFactory::new_objectArray(3, CHECK_NH);\n+static Handle ret_cr(int ret, Handle new_args, Handle err_codes, Handle err_msgs, TRAPS) {\n+  objArrayOop bundleObj = oopFactory::new_objectArray(4, CHECK_NH);\n@@ -6151,2 +6218,3 @@\n-  bundle->obj_at_put(1, codes());\n-  bundle->obj_at_put(2, msgs());\n+  bundle->obj_at_put(1, new_args());\n+  bundle->obj_at_put(2, err_codes());\n+  bundle->obj_at_put(3, err_msgs());\n@@ -6156,4 +6224,0 @@\n-static Handle ret_cr(int ret, TRAPS) {\n-  return ret_cr(ret, Handle(), Handle(), THREAD);\n-}\n-\n@@ -6164,1 +6228,1 @@\n-    return ret_cr(JVM_CHECKPOINT_NONE, THREAD);\n+    return ret_cr(JVM_CHECKPOINT_NONE, Handle(), Handle(), Handle(), THREAD);\n@@ -6169,1 +6233,1 @@\n-    return ret_cr(JVM_CHECKPOINT_NONE, THREAD);\n+    return ret_cr(JVM_CHECKPOINT_NONE, Handle(), Handle(), Handle(), THREAD);\n@@ -6182,1 +6246,5 @@\n-    return ret_cr(JVM_CHECKPOINT_OK, THREAD);\n+    oop new_args = NULL;\n+    if (cr.new_args()) {\n+      new_args = java_lang_String::create_oop_from_str(cr.new_args(), CHECK_NH);\n+    }\n+    return ret_cr(JVM_CHECKPOINT_OK, Handle(THREAD, new_args), Handle(), Handle(), THREAD);\n@@ -6199,1 +6267,1 @@\n-  return ret_cr(JVM_CHECKPOINT_ERROR, codes, msgs, THREAD);\n+  return ret_cr(JVM_CHECKPOINT_ERROR, Handle(), codes, msgs, THREAD);\n@@ -6207,0 +6275,10 @@\n+  int id = getpid();\n+  const char* args = Arguments::java_command() ? Arguments::java_command() : \"\";\n+  if (set_new_args(id, args)) {\n+    id = 0;\n+  }\n+\n+  char strid[32];\n+  snprintf(strid, sizeof(strid), \"%d\", id);\n+  setenv(\"CRAC_NEW_ARGS_ID\", strid, true);\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":95,"deletions":17,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import java.util.Arrays;\n+\n@@ -53,0 +55,2 @@\n+    private static String[] newArgs = {};\n+\n@@ -126,2 +130,3 @@\n-        final int[] codes = (int[])bundle[1];\n-        final String[] messages = (String[])bundle[2];\n+        final String newArgs = (String)bundle[1];\n+        final int[] codes = (int[])bundle[2];\n+        final String[] messages = (String[])bundle[3];\n@@ -158,0 +163,2 @@\n+        Core.newArgs = newArgs != null ? newArgs.split(\" \") : new String[0];\n+\n@@ -198,0 +205,4 @@\n+    public static String[] newArgs() {\n+        return Arrays.copyOf(newArgs, newArgs.length);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -193,7 +193,2 @@\n-    union sigval sv = { .sival_int = 0 };\n-    if (-1 == sigqueue(pid, RESTORE_SIGNAL, sv)) {\n-        perror(MSGPREFIX \"sigqueue\");\n-        return 1;\n-    }\n-\n-    return 0;\n+    char *strid = getenv(\"CRAC_NEW_ARGS_ID\");\n+    return kickjvm(pid, atoi(strid));\n","filename":"src\/java.base\/unix\/native\/criuengine\/criuengine.c","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include <stdlib.h>\n@@ -80,1 +81,2 @@\n-        if (kickjvm(jvm, 0)) {\n+        char *strid = getenv(\"CRAC_NEW_ARGS_ID\");\n+        if (kickjvm(jvm, atoi(strid))) {\n","filename":"src\/java.base\/unix\/native\/pauseengine\/pauseengine.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include <stdlib.h>\n@@ -47,0 +48,2 @@\n+        const char* argsidstr = getenv(\"SIM_CRAC_NEW_ARGS_ID\");\n+        int argsid = argsidstr ? atoi(argsidstr) : 0;\n@@ -48,1 +51,1 @@\n-        kickjvm(jvm, 0);\n+        kickjvm(jvm, argsid);\n@@ -50,1 +53,1 @@\n-        \/* should not be called and nothing to do *\/\n+        printf(\"SIM_CRAC_NEW_ARGS_ID=%s\\n\", getenv(\"CRAC_NEW_ARGS_ID\"));\n","filename":"src\/java.base\/unix\/native\/simengine\/simengine.c","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}