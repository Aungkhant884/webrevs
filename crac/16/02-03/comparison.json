{"files":[{"patch":"@@ -0,0 +1,5 @@\n+public class Compile {\n+    public static void main(String... args) throws Exception {\n+        JavaCompilerCRaC.runJavac(args);\n+    }\n+}\n","filename":"src\/demo\/share\/crac\/JavaCompilerCRaC\/Compile.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -28,3 +28,0 @@\n-\n-        String[] newArgs = Core.newArguments();\n-        runJavac(Arrays.copyOfRange(newArgs, 1, newArgs.length));\n","filename":"src\/demo\/share\/crac\/JavaCompilerCRaC\/JavaCompilerCRaC.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5846,1 +5846,5 @@\n-    snprintf(shmpath, sizeof(shmpath), \"\/crac_%d\", id);\n+    int shmpathlen = snprintf(shmpath, sizeof(shmpath), \"\/crac_%d\", id);\n+    if (shmpathlen < 0 || sizeof(shmpath) <= (size_t)shmpathlen) {\n+      fprintf(stderr, \"shmpath is too long: %d\\n\", shmpathlen);\n+      return -1;\n+    }\n@@ -5863,0 +5867,1 @@\n+        shm_unlink(shmpath);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -85,9 +85,0 @@\n-\n-    \/**\n-     * Gets new arguments provided after restore.\n-     *\n-     * @return new arguments\n-     *\/\n-    public static String[] newArguments() {\n-        return jdk.crac.Core.newArguments();\n-    }\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -35,0 +37,1 @@\n+import java.lang.reflect.Method;\n@@ -55,2 +58,0 @@\n-    private static String[] newArguments = {};\n-\n@@ -106,1 +107,1 @@\n-    private static void checkpointRestore1() throws\n+    private static void checkpointRestore1(Class<?> callerClass) throws\n@@ -148,4 +149,1 @@\n-        if (checkpointException == null) {\n-            Core.newArguments = newArguments != null ? newArguments.split(\" \") : new String[0];\n-        }\n-\n+        RestoreException restoreException = null;\n@@ -156,1 +154,5 @@\n-                throw re;\n+                restoreException = re;\n+            } else {\n+                for (Throwable t : re.getSuppressed()) {\n+                    checkpointException.addSuppressed(t);\n+                }\n@@ -158,2 +160,20 @@\n-            for (Throwable t : re.getSuppressed()) {\n-                checkpointException.addSuppressed(t);\n+        }\n+\n+        if (newArguments != null && newArguments.length() > 0) {\n+            String[] args = newArguments.split(\" \");\n+            if (args.length > 0) {\n+                try {\n+                    Class<?> newMainClass = Class.forName(args[0], false,\n+                        callerClass.getClassLoader());\n+                    Method newMain = newMainClass.getDeclaredMethod(\"main\",\n+                        String[].class);\n+                    newMain.invoke(null,\n+                        (Object)Arrays.copyOfRange(args, 1, args.length));\n+                } catch (Throwable e) {\n+                    assert checkpointException == null :\n+                        \"should not have new arguments\";\n+                    if (restoreException == null) {\n+                        restoreException = new RestoreException();\n+                    }\n+                    restoreException.addSuppressed(e);\n+                }\n@@ -162,0 +182,2 @@\n+\n+        assert checkpointException == null || restoreException == null;\n@@ -164,0 +186,2 @@\n+        } else if (restoreException != null) {\n+            throw restoreException;\n@@ -179,0 +203,1 @@\n+    @CallerSensitive\n@@ -191,1 +216,1 @@\n-                    checkpointRestore1();\n+                    checkpointRestore1(Reflection.getCallerClass());\n@@ -204,9 +229,0 @@\n-    \/**\n-     * Gets new arguments provided after restore.\n-     *\n-     * @return new arguments\n-     *\/\n-    public static String[] newArguments() {\n-        return Arrays.copyOf(newArguments, newArguments.length);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":36,"deletions":20,"binary":false,"changes":56,"status":"modified"}]}