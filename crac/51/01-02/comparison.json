{"files":[{"patch":"@@ -546,5 +546,4 @@\n-     * @crac The value returned by this method can be non-consistent after\n-     * restore from a checkpoint. Applications are recommended to discard\n-     * the measurement if the difference from previous invocation is outside\n-     * of expected bounds, or {@link javax.crac.Context#register(javax.crac.Resource) register}\n-     * a resource that will help with adapting after the restore.\n+     * @crac When the process is restored on another machine or if the machine\n+     * rebooted the value is updated based on wall-clock time difference,\n+     * resulting in a loss of accuracy when comparing timestamps obtained\n+     * before and after checkpoint.\n@@ -790,3 +789,4 @@\n-     * should {@link javax.crac.Context#register(javax.crac.Resource) register}\n-     * a resource and in the {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method}\n-     * reload system properties, propagating any change.\n+     * can {@link javax.crac.Context#register(javax.crac.Resource) register}\n+     * a resource and reload system properties in the\n+     * {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method},\n+     * updating the application.\n@@ -1108,3 +1108,4 @@\n-     * a checkpoint. The application should {@link javax.crac.Context#register(javax.crac.Resource) register}\n-     * a resource and in the {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method}\n-     * reload environment variables, propagating any change.\n+     * a checkpoint. The application can {@link javax.crac.Context#register(javax.crac.Resource) register}\n+     * a resource and reload environment variables in the\n+     * {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method},\n+     * updating the application.\n@@ -1167,3 +1168,4 @@\n-     * a checkpoint. The application should {@link javax.crac.Context#register(javax.crac.Resource) register}\n-     * a resource and in the {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method}\n-     * reload the environment variable, propagating any change.\n+     * a checkpoint. The application can {@link javax.crac.Context#register(javax.crac.Resource) register}\n+     * a resource and reload the environment variables in the\n+     * {@link javax.crac.Resource#afterRestore(javax.crac.Context) afterRestore method},\n+     * updating the application.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -196,2 +196,4 @@\n- * this cache is wiped out before checkpoint since this mapping might be\n- * outdated or invalid in the environment where the process is restored.\n+ * this cache is wiped out before checkpoint. Therefore, lookups after restore\n+ * will cause name address resolution.\n+ * This ensures that the addresses are up-to-date in the environment where\n+ * the process is restored.\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -366,1 +366,1 @@\n-     * @crac See provider documentation for details of behaviour after restore from a checkpoint.\n+     * @crac The checkpoint\/restore behaviour depends on security provider implementation.\n@@ -415,1 +415,1 @@\n-     * @crac See provider documentation for details of behaviour after restore from a checkpoint.\n+     * @crac The checkpoint\/restore behaviour depends on security provider implementation.\n@@ -461,1 +461,1 @@\n-     * @crac See provider documentation for details of behaviour after restore from a checkpoint.\n+     * @crac The checkpoint\/restore behaviour depends on security provider implementation.\n@@ -510,1 +510,1 @@\n-     * @crac See provider documentation for details of behaviour after restore from a checkpoint.\n+     * @crac The checkpoint\/restore behaviour depends on security provider implementation.\n@@ -569,1 +569,1 @@\n-     * @crac See provider documentation for details of behaviour after restore from a checkpoint.\n+     * @crac The checkpoint\/restore behaviour depends on security provider implementation.\n@@ -624,1 +624,1 @@\n-     * @crac See provider documentation for details of behaviour after restore from a checkpoint.\n+     * @crac The checkpoint\/restore behaviour depends on security provider implementation.\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureRandom.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -326,3 +326,3 @@\n-     * could execute many times after a restore. This is likely an undesired\n-     * behaviour, therefore it is recommended to cancel the task before\n-     * checkpoint and schedule it again after restore.\n+     * could execute many times after a restore, catching up for all the\n+     * delayed executions. If this is not desirable the application can cancel\n+     * the task before checkpoint and schedule it again after restore.\n@@ -375,3 +375,3 @@\n-     * could execute many times after a restore. This is likely an undesired\n-     * behaviour, therefore it is recommended to cancel the task before\n-     * checkpoint and schedule it again after restore.\n+     * could execute many times after a restore, catching up for all the\n+     * delayed executions. If this is not desirable the application can cancel\n+     * the task before checkpoint and schedule it again after restore.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Timer.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -150,4 +150,4 @@\n-     * @crac Since the execution is suspended after a checkpoint the command\n-     * could execute many times after a restore. This is likely an undesired\n-     * behaviour, therefore it is recommended to cancel the future before\n-     * checkpoint and schedule the command again after restore.\n+     * @crac Since the execution is suspended after a checkpoint the timer\n+     * could execute many times after a restore, catching up for all the\n+     * delayed executions. If this is not desirable the application can cancel\n+     * the task before checkpoint and schedule it again after restore.\n@@ -194,4 +194,4 @@\n-     * @crac Since the execution is suspended after a checkpoint the command\n-     * could execute many times after a restore. This is likely an undesired\n-     * behaviour, therefore it is recommended to cancel the future before\n-     * checkpoint and schedule the command again after restore.\n+     * @crac Since the execution is suspended after a checkpoint the timer\n+     * could execute many times after a restore, catching up for all the\n+     * delayed executions. If this is not desirable the application can cancel\n+     * the task before checkpoint and schedule it again after restore.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ScheduledExecutorService.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @crac It is assumed that JAR files opened through this class thatn are open\n+ * @crac It is assumed that JAR files opened through this class that are open\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/jar\/PersistentJarFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}