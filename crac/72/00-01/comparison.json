{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.nio.channels.IllegalSelectorException;\n@@ -33,0 +32,1 @@\n+import jdk.crac.CheckpointException;\n@@ -176,1 +176,0 @@\n-        private final Object checkpointLock = new Object();\n@@ -180,0 +179,2 @@\n+            this.socketpair = new int[2];\n+            initFDs();\n@@ -184,2 +185,0 @@\n-            this.socketpair = new int[2];\n-            initFDs();\n@@ -217,1 +216,1 @@\n-            synchronized (checkpointLock) {\n+            synchronized (this) {\n@@ -230,1 +229,1 @@\n-                checkpointLock.notifyAll();\n+                this.notifyAll();\n@@ -233,1 +232,1 @@\n-                        checkpointLock.wait();\n+                        this.wait();\n@@ -242,1 +241,1 @@\n-                checkpointLock.notifyAll();\n+                this.notifyAll();\n@@ -499,1 +498,1 @@\n-            synchronized (checkpointLock) {\n+            synchronized (this) {\n@@ -501,1 +500,1 @@\n-                write(socketpair[1], address, 1);\n+                wakeup();\n@@ -504,1 +503,1 @@\n-                        checkpointLock.wait();\n+                        this.wait();\n@@ -509,1 +508,1 @@\n-                    throw new IllegalSelectorException();\n+                    throw new CheckpointException(\"LinuxWatchService.processCheckpointRestore with keys\");\n@@ -519,1 +518,1 @@\n-            synchronized (checkpointLock) {\n+            synchronized (this) {\n@@ -521,1 +520,1 @@\n-                checkpointLock.notifyAll();\n+                this.notifyAll();\n@@ -524,1 +523,1 @@\n-                        checkpointLock.wait();\n+                        this.wait();\n@@ -528,0 +527,3 @@\n+                if (checkpointState != CheckpointRestoreState.NORMAL_OPERATION) {\n+                    throw new CheckpointException(\"LinuxWatchService restore exception\");\n+                }\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxWatchService.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.net.ServerSocket;\n@@ -30,1 +31,0 @@\n-import java.util.concurrent.CountDownLatch;\n@@ -54,1 +54,0 @@\n-        Thread.sleep(200);\n@@ -79,0 +78,1 @@\n+        watchService.close();\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/FileWatcherAfterRestoreTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.crac.CracTest;\n-\n-import java.nio.file.*;\n-import jdk.crac.Core;\n-import jdk.test.lib.crac.CracBuilder;\n-\n-\/**\n- * @test\n- * @library \/test\/lib\n- * @build FileWatcherTest\n- * @run driver jdk.test.lib.crac.CracTest\n- *\/\n-public class FileWatcherTest implements CracTest {\n-    @Override\n-    public void test() throws Exception {\n-        CracBuilder builder = new CracBuilder();\n-        builder.doCheckpointAndRestore();\n-    }\n-\n-    @Override\n-    public void exec() throws Exception {\n-        FileSystems.getDefault().newWatchService();\n-        Core.checkpointRestore();\n-    }\n-}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/FileWatcherTest.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"}]}