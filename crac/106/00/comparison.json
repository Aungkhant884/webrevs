{"files":[{"patch":"@@ -295,0 +295,19 @@\n+\/\/ Prevent an assertion: Attempting to acquire lock PeriodicTask_lock\/safepoint out of order with lock Threads_lock\/safepoint-1 -- possible deadlock\n+\/\/ SafepointSynchronize::begin() did lock Threads_lock.\n+\/\/ WatcherThread::unpark() requires PeriodicTask_lock to be held locked.\n+\/\/ But PeriodicTask_lock cannot be locked after Threads_lock so we need a different thread for that.\n+\/\/ FIXME during merge to trunk: Could be priorities of these locks changed?\n+class WatcherUnparkerThread : public NonJavaThread {\n+protected:\n+  virtual void run() override {\n+    MonitorLocker ml(PeriodicTask_lock, Mutex::_no_safepoint_check_flag);\n+    WatcherThread::watcher_thread()->unpark();\n+  }\n+  virtual void post_run() override {\n+    NonJavaThread::post_run();\n+    \/\/ ~Thread() requires current non-null Thread::current but NonJavaThread::post_run() has cleared it.\n+    initialize_thread_current();\n+    delete this;\n+  }\n+};\n+\n@@ -299,2 +318,8 @@\n-  MonitorLocker ml(PeriodicTask_lock, Mutex::_no_safepoint_check_flag);\n-  WatcherThread::watcher_thread()->unpark();\n+  auto thread = new WatcherUnparkerThread();\n+  if (!os::create_thread(thread, os::watcher_thread)) {\n+    delete thread;\n+    warning(\"Failed to create thread for unparking WatcherThread\");\n+  } else {\n+    os::set_priority(thread, MaxPriority);\n+    os::start_thread(thread);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}