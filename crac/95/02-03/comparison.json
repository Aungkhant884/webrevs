{"files":[{"patch":"@@ -577,0 +577,1 @@\n+  int retval = 0;\n@@ -579,2 +580,3 @@\n-    \".begin: syscall\\n\\t\"\n-    \"mov (%%rsi), %%ecx\\n\\t\"\n+    \".begin: mov %[sysnum], %%eax\\n\\t\"\n+    \"syscall\\n\\t\"\n+    \"mov (%%rdi), %%ecx\\n\\t\"\n@@ -583,2 +585,2 @@\n-    : \/\/ ignore return value\n-    : \"a\"(SYS_futex), \"D\"(FUTEX_WAIT_PRIVATE), \"S\"(&persist_futex), \"d\"(1)\n+    : \"=a\"(retval)\n+    : [sysnum]\"i\"(SYS_futex), \"D\"(&persist_futex), \"S\"(FUTEX_WAIT_PRIVATE), \"d\"(1)\n@@ -587,4 +589,1 @@\n-  register int sysnum asm (\"x8\") = SYS_futex;\n-  register int op asm (\"x0\") = FUTEX_WAIT_PRIVATE;\n-  register volatile int *futex asm (\"x1\") = &persist_futex;\n-  register int value asm (\"x2\") = 1;\n+  register volatile int *futex asm(\"x7\") = &persist_futex;\n@@ -592,2 +591,10 @@\n-    \".begin: svc #0\\n\\t\"\n-    \"ldr w3, [x1]\\n\\t\"\n+    \"mov x1, %[op]\\n\\t\"\n+    \"mov x2, 1\\n\\t\"\n+    \"mov x4, 0\\n\\t\"\n+    \"mov x5, 0\\n\\t\"\n+    \"mov x8, %[sysnum]\\n\\t\"\n+    \".begin: mov x0, %[futex]\\n\\t\"\n+    \"mov x3, 0\\n\\t\"\n+    \"svc #0\\n\\t\"\n+    \"mov x3, %[futex]\\n\\t\"\n+    \"ldr w3, [x3]\\n\\t\"\n@@ -595,3 +602,4 @@\n-    : \/\/ ignore return value\n-    : \"r\"(sysnum), \"r\"(op), \"r\"(futex), \"r\"(value)\n-    : \"memory\", \"cc\", \"x3\");\n+    \"mov %[retval], x0\\n\\t\"\n+    : [retval]\"=r\"(retval)\n+    : [sysnum]\"i\"(SYS_futex), [futex]\"r\"(futex), [op]\"i\"(FUTEX_WAIT_PRIVATE)\n+    : \"memory\", \"cc\", \"x0\", \"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x8\");\n@@ -601,3 +609,3 @@\n-  \/\/ while (persist_futex) {\n-  \/\/    syscall(SYS_futex, &persist_futex, FUTEX_WAIT_PRIVATE, 1, nullptr, nullptr, 0);\n-  \/\/ }\n+  while (persist_futex) {\n+     syscall(SYS_futex, &persist_futex, FUTEX_WAIT_PRIVATE, 1, nullptr, nullptr, 0);\n+  }\n@@ -606,0 +614,7 @@\n+  if (retval != 0) {\n+    errno = -retval;\n+    perror(\"Syscall wait loop\");\n+    os::exit(1);\n+  }\n+\n+\n@@ -689,0 +704,4 @@\n+  sigset_t blocking_set;\n+  sigemptyset(&blocking_set);\n+  sigaddset(&blocking_set, SIGUSR1);\n+\n@@ -693,1 +712,0 @@\n-#endif \/\/ HAS_RSEQ\n@@ -695,3 +713,0 @@\n-  sigset_t blocking_set;\n-  sigemptyset(&blocking_set);\n-  sigaddset(&blocking_set, SIGUSR1);\n@@ -703,1 +718,0 @@\n-#ifdef HAS_RSEQ\n@@ -706,1 +720,0 @@\n-#endif \/\/ HAS_RSEQ\n@@ -709,1 +722,0 @@\n-    sigprocmask(SIG_UNBLOCK, &blocking_set, nullptr);\n@@ -718,0 +730,3 @@\n+#endif \/\/ HAS_RSEQ\n+  \/\/ Make sure the signal is not blocked even if we didn't use it above for rseq\n+  sigprocmask(SIG_UNBLOCK, &blocking_set, nullptr);\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":38,"deletions":23,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -322,2 +322,0 @@\n-  CountThreadsClosure counter;\n-  Threads::java_threads_do(&counter);\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}