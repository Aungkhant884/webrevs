{"files":[{"patch":"@@ -501,39 +501,0 @@\n-bool crac::MemoryPersister::unmap(void *addr, size_t length) {\n-  while (::munmap(addr, length) != 0) {\n-    if (errno != EINTR) {\n-      perror(\"::munmap\");\n-      return false;\n-    }\n-  }\n-  return true;\n-}\n-\n-bool crac::MemoryPersister::map(void *addr, size_t length, bool executable) {\n-  while (::mmap(addr, length, PROT_READ | PROT_WRITE | (executable ? PROT_EXEC : 0),\n-      MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1 , 0) != addr) {\n-    if (errno != EINTR) {\n-      fprintf(stderr, \"::mmap %p %zu RW: %m\\n\", addr, length);\n-      return false;\n-    }\n-  }\n-  return true;\n-}\n-\n-bool crac::MemoryPersister::map_gap(void *addr, size_t length) {\n-  while (::mmap(addr, length, PROT_NONE, MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0) != addr) {\n-    if (errno != EINTR) {\n-      perror(\"::mmap NONE\");\n-      return false;\n-    }\n-  }\n-  return true;\n-}\n-\n-void crac::MmappingMemoryReader::read(size_t offset, void *addr, size_t size, bool executable) {\n-  assert(_fd >= 0, \"File not open!\");\n-  if (::mmap(addr, size, PROT_READ | PROT_WRITE | (executable ? PROT_EXEC : 0),\n-      MAP_PRIVATE | MAP_FIXED, _fd , offset) != addr) {\n-    fatal(\"::mmap %p %zu RW(X): %s\", addr, size, os::strerror(errno));\n-  }\n-}\n-\n@@ -581,1 +542,1 @@\n-#elif IA32\n+#elif defined(IA32)\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":1,"deletions":40,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -65,2 +65,1 @@\n-bool crac::MemoryPersister::unmap(void *addr, size_t length) {\n-  return false;\n+void crac::before_threads_persisted() {\n@@ -69,2 +68,1 @@\n-bool crac::MemoryPersister::map(void *addr, size_t length, bool executable) {\n-  return false;\n+void crac::after_threads_restored() {\n@@ -73,2 +71,10 @@\n-bool crac::MemoryPersister::map_gap(void *addr, size_t length) {\n-  return false;\n+#endif\n+\n+bool crac::MemoryPersister::unmap(void *addr, size_t length) {\n+  while (::munmap(addr, length) != 0) {\n+    if (errno != EINTR) {\n+      perror(\"::munmap\");\n+      return false;\n+    }\n+  }\n+  return true;\n@@ -77,1 +83,17 @@\n-void crac::before_threads_persisted() {\n+bool crac::MemoryPersister::map(void *addr, size_t length, os::ProtType protType) {\n+  unsigned int p = 0;\n+  switch (protType) {\n+  case os::ProtType::MEM_PROT_NONE: p = PROT_NONE; break;\n+  case os::ProtType::MEM_PROT_READ: p = PROT_READ; break;\n+  case os::ProtType::MEM_PROT_RW:   p = PROT_READ|PROT_WRITE; break;\n+  case os::ProtType::MEM_PROT_RWX:  p = PROT_READ|PROT_WRITE|PROT_EXEC; break;\n+  default:\n+    ShouldNotReachHere();\n+  }\n+  while (::mmap(addr, length, p, MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1 , 0) != addr) {\n+    if (errno != EINTR) {\n+      fprintf(stderr, \"::mmap %p %zu RW: %m\\n\", addr, length);\n+      return false;\n+    }\n+  }\n+  return true;\n@@ -80,1 +102,6 @@\n-void crac::after_threads_restored() {\n+void crac::MmappingMemoryReader::read(size_t offset, void *addr, size_t size, bool executable) {\n+  assert(_fd >= 0, \"File not open!\");\n+  if (::mmap(addr, size, PROT_READ | PROT_WRITE | (executable ? PROT_EXEC : 0),\n+      MAP_PRIVATE | MAP_FIXED, _fd , offset) != addr) {\n+    fatal(\"::mmap %p %zu RW(X): %s\", addr, size, os::strerror(errno));\n+  }\n@@ -83,1 +110,0 @@\n-#endif\n","filename":"src\/hotspot\/os\/posix\/crac_posix.cpp","additions":35,"deletions":9,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  return false;\n+  return true; \/\/ Don't fail; just keep memory as-is\n@@ -62,1 +62,1 @@\n-  return false;\n+  return true; \/\/ Don't fail; the memory should not be unmapped\n@@ -65,2 +65,1 @@\n-bool crac::MemoryPersister::map_gap(void *addr, size_t length) {\n-  return false;\n+void crac::MmappingMemoryReader::read(size_t offset, void *addr, size_t size, bool executable) {\n","filename":"src\/hotspot\/os\/windows\/crac_windows.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -708,2 +708,2 @@\n-    \/\/ without the explicit cast it fails the build on Windows\n-    ssize_t r = (ssize_t) ::read(fd, dest + rd, n - rd);\n+    \/\/ using ssize_t fails the build on Windows\n+    long r = (long) ::read(fd, dest + rd, n - rd);\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -150,2 +151,1 @@\n-    static bool map(void *addr, size_t length, bool executable);\n-    static bool map_gap(void *addr, size_t length);\n+    static bool map(void *addr, size_t length, os::ProtType protType);\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-    if (!map_gap(r.addr, aligned_length)) {\n+    if (!map(r.addr, aligned_length, os::ProtType::MEM_PROT_NONE)) {\n@@ -208,1 +208,2 @@\n-    bool executable = r.flags & Flags::EXECUTABLE;\n+    os::ProtType protType = r.flags & Flags::EXECUTABLE ?\n+      os::ProtType::MEM_PROT_RWX : os::ProtType::MEM_PROT_RW;\n@@ -211,1 +212,1 @@\n-        if (!map(r.addr, aligned_length, executable)) {\n+        if (!map(r.addr, aligned_length, protType)) {\n@@ -216,2 +217,1 @@\n-        if (update_protection && !os::protect_memory(data, aligned_length,\n-            executable ? os::ProtType::MEM_PROT_RWX : os::ProtType::MEM_PROT_RW)) {\n+        if (update_protection && !os::protect_memory(data, aligned_length, protType)) {\n","filename":"src\/hotspot\/share\/runtime\/crac_memory.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}