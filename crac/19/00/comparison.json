{"files":[{"patch":"@@ -36,0 +36,4 @@\n+    private Core() {\n+\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/Core.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+     *\n@@ -42,0 +43,1 @@\n+     *\n@@ -48,0 +50,12 @@\n+        \/* Keep this priority first to clear and\n+        reinitialize X11 and AWT resources correctly *\/\n+\n+        \/**\n+         * Priority of the\n+         * sun.awt.X11ToolkitJDKResource resource\n+         *\/\n+        X11TOOLKIT,\n+\n+\n+        \/* Use this priority in most cases. *\/\n+\n@@ -52,0 +66,2 @@\n+\n+\n@@ -73,1 +89,2 @@\n-        \/* Keep next priorities last to ensure handling of pending References\n+\n+        \/* Keep next priorities here to ensure handling of pending References\n@@ -81,0 +98,5 @@\n+        \/**\n+         * Priority of the\n+         * sun.java2d.Disposer resources\n+         *\/\n+        DISPOSERS,\n@@ -86,0 +108,10 @@\n+\n+\n+        \/* Keep next priority last to reinitialize\n+         X11 connection correctly *\/\n+\n+        \/**\n+         * Priority of the\n+         * sun.awt.X11GEJDKResource resource\n+         *\/\n+        X11GE,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKResource.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -367,0 +367,2 @@\n+    exports jdk.internal.crac to\n+        java.desktop;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Arrays;\n@@ -41,0 +42,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -49,0 +53,16 @@\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            Arrays.fill(predefinedPrivate, null);\n+            Arrays.fill(predefined, null);\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+\n+        }\n+    };\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Cursor.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,0 +41,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -84,1 +87,1 @@\n-        static final GraphicsEnvironment INSTANCE = createGE();\n+        static GraphicsEnvironment INSTANCE = createGE();\n@@ -101,0 +104,15 @@\n+    \/**\n+     * Resource nested in {@code X11GEJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            LocalGE.INSTANCE = null;\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+            LocalGE.INSTANCE = LocalGE.createGE();\n+        }\n+    };\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/GraphicsEnvironment.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -77,0 +77,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -169,0 +172,30 @@\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            for (int i = 0; i < allWindows.size(); i++) {\n+                Window window = allWindows.get(i);\n+\n+                \/\/ Ensure that the window is removed from the\n+                \/\/ AppContext before sun.java2d.Disposer disposed it\n+                window.disposerRecord.dispose();\n+\n+                \/\/ When the last displayable window within the\n+                \/\/ Java virtual machine (VM) is disposed of, the VM may terminate\n+                window.dispose();\n+\n+                \/\/ Let the GC collect this window\n+                window = null;\n+            }\n+\n+            nameCounter = 0;\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+\n+        }\n+    };\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -39,0 +39,4 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+import jdk.internal.crac.JDKResource;\n+\n@@ -54,1 +58,1 @@\n-public class Disposer implements Runnable {\n+public class Disposer implements Runnable, JDKResource {\n@@ -95,0 +99,16 @@\n+\n+        jdk.internal.crac.Core.getJDKContext().register(disposerInstance);\n+    }\n+\n+    @Override\n+    public Priority getPriority() {\n+        return Priority.DISPOSERS;\n+    }\n+\n+    @Override\n+    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+        queue.waitForWaiters(1);\n+    }\n+\n+    @Override\n+    public void afterRestore(Context<? extends Resource> context) throws Exception {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/Disposer.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+    private static X11GEJDKResource x11GEJDKResource;\n+    private static X11ToolkitJDKResource x11ToolkitJDKResource;\n@@ -36,0 +38,3 @@\n+        x11GEJDKResource = new X11GEJDKResource();\n+        jdk.internal.crac.Core.getJDKContext().register(x11GEJDKResource);\n+\n@@ -40,0 +45,3 @@\n+        x11ToolkitJDKResource = new X11ToolkitJDKResource();\n+        jdk.internal.crac.Core.getJDKContext().register(x11ToolkitJDKResource);\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/PlatformGraphicsInfo.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,0 +64,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -143,0 +146,17 @@\n+\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint (Context < ? extends Resource > context) throws Exception {\n+            atomToAtom.clear();\n+            nameToAtom.clear();\n+        }\n+\n+        @Override\n+        public void afterRestore (Context < ? extends Resource > context) throws Exception {\n+\n+        }\n+    };\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XAtom.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -40,0 +43,15 @@\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            wm_client_leader = null;\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+\n+        }\n+    };\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XBaseWindow.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -38,0 +41,15 @@\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            manager = null;\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+\n+        }\n+    };\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XGlobalCursorManager.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -33,1 +36,1 @@\n-class XRootWindow extends XBaseWindow {\n+public class XRootWindow extends XBaseWindow {\n@@ -35,1 +38,1 @@\n-        private static final XRootWindow xawtRootWindow;\n+        private static XRootWindow xawtRootWindow;\n@@ -37,1 +40,1 @@\n-        static {\n+        private static void init() {\n@@ -47,0 +50,3 @@\n+        static {\n+            init();\n+        }\n@@ -48,0 +54,17 @@\n+\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            LazyHolder.xawtRootWindow.destroy();\n+            LazyHolder.xawtRootWindow = null;\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+            LazyHolder.init();\n+        }\n+    };\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XRootWindow.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -153,0 +153,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -201,3 +204,3 @@\n-    static final X11GraphicsEnvironment localEnv;\n-    private static final X11GraphicsDevice device;\n-    private static final long display;\n+    static X11GraphicsEnvironment localEnv;\n+    private static X11GraphicsDevice device;\n+    private static long display;\n@@ -216,1 +219,77 @@\n-    static {\n+    private static int state = 0;\n+\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            awtLock();\n+            state = 1;\n+            while (state != 2) {\n+                awtLockWait(10);\n+            }\n+            awtUnlock();\n+\n+            synchronized (winMap) {\n+                for(XBaseWindow window : winMap.values()) {\n+                    window.destroy();\n+                }\n+                winMap.clear();\n+            }\n+\n+            for(Object peer : specialPeerMap.values()) {\n+                if (peer instanceof XComponentPeer)\n+                    ((XComponentPeer)peer).dispose();\n+            }\n+            specialPeerMap.clear();\n+\n+            synchronized (winToDispatcher) {\n+                winToDispatcher.clear();\n+            }\n+\n+            initialized = false;\n+            timeStampUpdated = false;\n+            timeStamp = 0;\n+            _XA_JAVA_TIME_PROPERTY_ATOM = null;\n+\n+            maxWindowWidthInPixels = -1;\n+            maxWindowHeightInPixels = -1;\n+            dynamicLayoutSetting = false;\n+\n+            arrowCursor = 0;\n+            awt_multiclick_time = 0;\n+            awt_IsXsunKPBehavior = 0;\n+            xPeer = null;\n+\n+            altMask = 0;\n+            metaMask = 0;\n+            numLockMask = 0;\n+            modeSwitchMask = 0;\n+            modLockIsShiftLock = 0;\n+\n+            localEnv = null;\n+            device = null;\n+            display = 0;\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+            initStatic();\n+            resetKeyboardSniffer();\n+            initStaticInternal();\n+\n+            awtLock();\n+            state = 0;\n+            awtLockNotifyAll();\n+            awtUnlock();\n+        }\n+    };\n+\n+    private static void initStatic() {\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        if (ge instanceof SunGraphicsEnvironment) {\n+            ((SunGraphicsEnvironment) ge).addDisplayChangedListener(\n+                    displayChangedHandler);\n+        }\n+\n@@ -233,0 +312,4 @@\n+    static {\n+        initStatic();\n+    }\n+\n@@ -329,1 +412,1 @@\n-    void init() {\n+    static void initStaticInternal() {\n@@ -367,0 +450,6 @@\n+    }\n+\n+    @SuppressWarnings(\"removal\")\n+    void init() {\n+        initStaticInternal();\n+\n@@ -684,0 +773,7 @@\n+                        if (state == 1) {\n+                            state = 2;\n+                            awtLockNotifyAll();\n+                            while (state == 2) {\n+                                awtLockWait();\n+                            }\n+                        }\n@@ -761,8 +857,0 @@\n-    static {\n-        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n-        if (ge instanceof SunGraphicsEnvironment) {\n-            ((SunGraphicsEnvironment) ge).addDisplayChangedListener(\n-                    displayChangedHandler);\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XToolkit.java","additions":101,"deletions":13,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n@@ -50,1 +52,1 @@\n-final class XWM\n+public final class XWM\n@@ -57,1 +59,48 @@\n-    static final XAtom XA_MWM_HINTS = new XAtom();\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            winmgr_running = false;\n+            awt_wmgr = XWM.UNDETERMINED_WM;\n+\n+            awtWMNonReparenting = -1;\n+            awtWMStaticGravity = -1;\n+\n+            wm = null;\n+            g_net_protocol = null;\n+            g_win_protocol = null;\n+            inited = false;\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+            \/\/ Re-register the cleared XWM atoms\n+            XA_MWM_HINTS = new XAtom();\n+            XA_WM_STATE = new XAtom();\n+            XA_E_FRAME_SIZE = new XAtom();\n+            XA_KDE_NET_WM_FRAME_STRUT = new XAtom();\n+            XA_KWM_WIN_ICONIFIED = new XAtom();\n+            XA_KWM_WIN_MAXIMIZED = new XAtom();\n+            XA_OL_DECOR_DEL = new XAtom();\n+            XA_OL_DECOR_HEADER = new XAtom();\n+            XA_OL_DECOR_RESIZE = new XAtom();\n+            XA_OL_DECOR_PIN = new XAtom();\n+            XA_OL_DECOR_CLOSE = new XAtom();\n+            XA_NET_FRAME_EXTENTS = new XAtom();\n+            XA_NET_REQUEST_FRAME_EXTENTS = new XAtom();\n+\n+            XA_ENLIGHTENMENT_COMMS = new XAtom(\"ENLIGHTENMENT_COMMS\", false);\n+            XA_DT_SM_WINDOW_INFO = new XAtom(\"_DT_SM_WINDOW_INFO\", false);\n+            XA_DT_SM_STATE_INFO = new XAtom(\"_DT_SM_STATE_INFO\", false);\n+            XA_MOTIF_WM_INFO = new XAtom(\"_MOTIF_WM_INFO\", false);\n+            XA_DT_WORKSPACE_CURRENT = new XAtom(\"_DT_WORKSPACE_CURRENT\", false);\n+            XA_ICEWM_WINOPTHINT = new XAtom(\"_ICEWM_WINOPTHINT\", false);\n+            XA_SUN_WM_PROTOCOLS = new XAtom(\"_SUN_WM_PROTOCOLS\", false);\n+\n+            init();\n+        }\n+    };\n+\n+    static XAtom XA_MWM_HINTS = new XAtom();\n@@ -72,1 +121,1 @@\n-    static final XAtom XA_E_FRAME_SIZE = new XAtom();\n+    static XAtom XA_E_FRAME_SIZE = new XAtom();\n@@ -75,1 +124,1 @@\n-    static final XAtom XA_KDE_NET_WM_FRAME_STRUT = new XAtom();\n+    static XAtom XA_KDE_NET_WM_FRAME_STRUT = new XAtom();\n@@ -78,2 +127,2 @@\n-    static final XAtom XA_KWM_WIN_ICONIFIED = new XAtom();\n-    static final XAtom XA_KWM_WIN_MAXIMIZED = new XAtom();\n+    static XAtom XA_KWM_WIN_ICONIFIED = new XAtom();\n+    static XAtom XA_KWM_WIN_MAXIMIZED = new XAtom();\n@@ -82,5 +131,5 @@\n-    static final XAtom XA_OL_DECOR_DEL = new XAtom();\n-    static final XAtom XA_OL_DECOR_HEADER = new XAtom();\n-    static final XAtom XA_OL_DECOR_RESIZE = new XAtom();\n-    static final XAtom XA_OL_DECOR_PIN = new XAtom();\n-    static final XAtom XA_OL_DECOR_CLOSE = new XAtom();\n+    static XAtom XA_OL_DECOR_DEL = new XAtom();\n+    static XAtom XA_OL_DECOR_HEADER = new XAtom();\n+    static XAtom XA_OL_DECOR_RESIZE = new XAtom();\n+    static XAtom XA_OL_DECOR_PIN = new XAtom();\n+    static XAtom XA_OL_DECOR_CLOSE = new XAtom();\n@@ -89,2 +138,2 @@\n-    static final XAtom XA_NET_FRAME_EXTENTS = new XAtom();\n-    static final XAtom XA_NET_REQUEST_FRAME_EXTENTS = new XAtom();\n+    static XAtom XA_NET_FRAME_EXTENTS = new XAtom();\n+    static XAtom XA_NET_REQUEST_FRAME_EXTENTS = new XAtom();\n@@ -419,2 +468,2 @@\n-    static final XAtom XA_DT_SM_WINDOW_INFO = new XAtom(\"_DT_SM_WINDOW_INFO\", false);\n-    static final XAtom XA_DT_SM_STATE_INFO = new XAtom(\"_DT_SM_STATE_INFO\", false);\n+    static XAtom XA_DT_SM_WINDOW_INFO = new XAtom(\"_DT_SM_WINDOW_INFO\", false);\n+    static XAtom XA_DT_SM_STATE_INFO = new XAtom(\"_DT_SM_STATE_INFO\", false);\n@@ -496,2 +545,2 @@\n-    static final XAtom XA_MOTIF_WM_INFO = new XAtom(\"_MOTIF_WM_INFO\", false);\n-    static final XAtom XA_DT_WORKSPACE_CURRENT = new XAtom(\"_DT_WORKSPACE_CURRENT\", false);\n+    static XAtom XA_MOTIF_WM_INFO = new XAtom(\"_MOTIF_WM_INFO\", false);\n+    static XAtom XA_DT_WORKSPACE_CURRENT = new XAtom(\"_DT_WORKSPACE_CURRENT\", false);\n@@ -627,1 +676,1 @@\n-    static final XAtom XA_ICEWM_WINOPTHINT = new XAtom(\"_ICEWM_WINOPTHINT\", false);\n+    static XAtom XA_ICEWM_WINOPTHINT = new XAtom(\"_ICEWM_WINOPTHINT\", false);\n@@ -704,1 +753,1 @@\n-    static final XAtom XA_SUN_WM_PROTOCOLS = new XAtom(\"_SUN_WM_PROTOCOLS\", false);\n+    static XAtom XA_SUN_WM_PROTOCOLS = new XAtom(\"_SUN_WM_PROTOCOLS\", false);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWM.java","additions":68,"deletions":19,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -65,1 +65,4 @@\n-class XWindow extends XBaseWindow implements X11ComponentPeer {\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n+public class XWindow extends XBaseWindow implements X11ComponentPeer {\n@@ -71,0 +74,26 @@\n+\n+    \/**\n+     * Resource nested in {@code X11ToolkitJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            lastX = 0;\n+            lastY = 0;\n+            lastTime = 0;\n+            lastButton = 0;\n+            lastWindowRef = null;\n+            clickCount = 0;\n+\n+            wm_protocols = null;\n+            wm_delete_window = null;\n+            wm_take_focus = null;\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+\n+        }\n+    };\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindow.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+package sun.awt;\n+\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+import jdk.internal.crac.JDKResource;\n+\n+import java.awt.GraphicsEnvironment;\n+\n+\n+public class X11GEJDKResource implements JDKResource {\n+\n+    @Override\n+    public Priority getPriority() {\n+        return Priority.X11GE;\n+    }\n+\n+    @Override\n+    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+        \/\/ GE\n+        GraphicsEnvironment.resource.beforeCheckpoint(context);\n+\n+        \/\/ X11\n+        X11GraphicsEnvironment.resource.beforeCheckpoint(context);\n+    }\n+\n+    @Override\n+    public void afterRestore(Context<? extends Resource> context) throws Exception {\n+        \/\/ X11\n+        X11GraphicsEnvironment.resource.afterRestore(context);\n+\n+        \/\/ GE\n+        GraphicsEnvironment.resource.afterRestore(context);\n+    }\n+}\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GEJDKResource.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -48,0 +48,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -59,0 +62,17 @@\n+    \/**\n+     * Resource nested in {@code X11GEJDKResource}.\n+     *\/\n+    public static final Resource resource = new Resource() {\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            \/\/ XCloseDisplay\n+            beforeCheckpoint0();\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+            \/\/ XOpenDisplay\n+            afterRestore0();\n+        }\n+    };\n+\n@@ -191,0 +211,3 @@\n+    private static native void beforeCheckpoint0();\n+    private static native void afterRestore0();\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsEnvironment.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+package sun.awt;\n+\n+import java.awt.Window;\n+import java.awt.Cursor;\n+\n+import sun.awt.X11.XRootWindow;\n+import sun.awt.X11.XWindow;\n+import sun.awt.X11.XBaseWindow;\n+import sun.awt.X11.XGlobalCursorManager;\n+import sun.awt.X11.XWM;\n+import sun.awt.X11.XAtom;\n+import sun.awt.X11.XToolkit;\n+\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+import jdk.internal.crac.JDKResource;\n+\n+\n+public class X11ToolkitJDKResource implements JDKResource {\n+\n+    @Override\n+    public Priority getPriority() {\n+        return Priority.X11TOOLKIT;\n+    }\n+\n+    @Override\n+    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+        \/\/ AWT\n+        Window.resource.beforeCheckpoint(context);\n+        Cursor.resource.beforeCheckpoint(context);\n+\n+        \/\/ X11\n+        XRootWindow.resource.beforeCheckpoint(context);\n+        XWindow.resource.beforeCheckpoint(context);\n+        XBaseWindow.resource.beforeCheckpoint(context);\n+        XGlobalCursorManager.resource.beforeCheckpoint(context);\n+        XWM.resource.beforeCheckpoint(context);\n+        XAtom.resource.beforeCheckpoint(context);\n+        XToolkit.resource.beforeCheckpoint(context);\n+    }\n+\n+    @Override\n+    public void afterRestore(Context<? extends Resource> context) throws Exception {\n+        \/\/ X11\n+        XToolkit.resource.afterRestore(context);\n+        XAtom.resource.afterRestore(context);\n+        XWM.resource.afterRestore(context);\n+        XGlobalCursorManager.resource.afterRestore(context);\n+        XBaseWindow.resource.afterRestore(context);\n+        XWindow.resource.afterRestore(context);\n+        XRootWindow.resource.afterRestore(context);\n+\n+        \/\/ AWT\n+        Cursor.resource.afterRestore(context);\n+        Window.resource.afterRestore(context);\n+    }\n+}\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11ToolkitJDKResource.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -126,1 +126,2 @@\n-extern Display         *awt_display; \/* awt_GraphicsEnv.c *\/\n+extern Display         *get_awt_display(void); \/* awt_GraphicsEnv.c *\/\n+#define awt_display     get_awt_display()\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/awt.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+#include <pthread.h>\n+\n@@ -69,1 +71,8 @@\n-Display *awt_display;\n+Display *awt_display_storage;\n+pthread_mutex_t lock;\n+\n+Display *get_awt_display(void) {\n+    pthread_mutex_lock(&lock);\n+    pthread_mutex_unlock(&lock);\n+    return awt_display_storage;\n+}\n@@ -289,1 +298,1 @@\n-    awt_display = NULL;\n+    awt_display_storage = NULL;\n@@ -721,0 +730,2 @@\n+    pthread_mutex_init(&lock, NULL);\n+\n@@ -739,1 +750,1 @@\n-    dpy = awt_display = XOpenDisplay(NULL);\n+    dpy = awt_display_storage = XOpenDisplay(NULL);\n@@ -799,0 +810,14 @@\n+JNIEXPORT void JNICALL\n+Java_sun_awt_X11GraphicsEnvironment_beforeCheckpoint0(JNIEnv *env, jclass this)\n+{\n+    pthread_mutex_lock(&lock);\n+    XCloseDisplay(awt_display_storage);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_sun_awt_X11GraphicsEnvironment_afterRestore0(JNIEnv *env, jclass this)\n+{\n+    awt_display_storage = XOpenDisplay(NULL);\n+    pthread_mutex_unlock(&lock);\n+}\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_GraphicsEnv.c","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"}]}