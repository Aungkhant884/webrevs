{"files":[{"patch":"@@ -74,1 +74,0 @@\n-                String warn = \"false\";\n@@ -80,1 +79,0 @@\n-                    warn = policy.params.getOrDefault(\"warn\", \"true\");\n@@ -92,3 +90,1 @@\n-                        if (Boolean.parseBoolean(warn)) {\n-                            LoggerContainer.warn(\"File descriptor {0} was not closed by the application. Use 'warn: false' in the policy to suppress this message.\", fd);\n-                        }\n+                        warnOpenResource(policy, \"File descriptor \" + fd);\n@@ -117,1 +113,1 @@\n-                    return Pattern.compile(regex).matcher(nativeDescription).matches();\n+                    return Pattern.compile(regex).matcher(nativeDescription).find();\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileDescriptor.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -875,3 +875,1 @@\n-                    if (Boolean.parseBoolean(policy.params.getOrDefault(\"warn\", \"true\"))) {\n-                        LoggerContainer.warn(\"{0} was not closed by the application. Use 'warn: false' in the policy to suppress this message.\", this);\n-                    }\n+                    warnOpenResource(policy, owner.toString());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Process.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,0 +54,12 @@\n+\n+    protected void warnOpenResource(OpenResourcePolicies.Policy policy, String self) {\n+        \/\/ The warning is not printed for implicitly closed resource (without policy)\n+        \/\/ e.g. standard input\/output streams\n+        String warn = \"false\";\n+        if (policy != null) {\n+            warn = policy.params.getOrDefault(\"warn\", \"true\");\n+        }\n+        if (Boolean.parseBoolean(warn)) {\n+            LoggerContainer.warn(\"{0} was not closed by the application. Use 'warn: false' in the policy to suppress this message.\", self);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKFdResource.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-        String warn = \"false\";\n@@ -65,1 +64,0 @@\n-            warn = policy.params.getOrDefault(\"warn\", \"true\");\n@@ -84,3 +82,1 @@\n-                if (Boolean.parseBoolean(warn)) {\n-                    LoggerContainer.warn(\"File {0} was not closed by the application. Use 'warn: false' in the policy to suppress this message.\", path);\n-                }\n+                warnOpenResource(policy, \"File \" + path);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKFileResource.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,3 +53,1 @@\n-                    if (Boolean.parseBoolean(policy.params.getOrDefault(\"warn\", \"true\"))) {\n-                        LoggerContainer.warn(\"Socket {0} was not closed by the application. Use 'warn: false' in the policy to suppress this message.\", owner);\n-                    }\n+                    warnOpenResource(policy, \"Socket \" + owner);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKSocketResourceBase.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,3 +69,1 @@\n-                    if (Boolean.parseBoolean(policy.params.getOrDefault(\"warn\", \"true\"))) {\n-                        LoggerContainer.warn(\"{0} was not closed by the application. Use 'warn: false' in the policy to suppress this message.\", this);\n-                    }\n+                    warnOpenResource(policy, PipeImpl.this.toString());\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}