{"files":[{"patch":"@@ -29,0 +29,2 @@\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n@@ -34,3 +36,1 @@\n-import jdk.internal.crac.Core;\n-import jdk.internal.crac.ClaimedFDs;\n-import jdk.internal.crac.JDKFdResource;\n+import jdk.internal.crac.*;\n@@ -64,0 +64,1 @@\n+        @SuppressWarnings(\"fallthrough\")\n@@ -69,0 +70,1 @@\n+                String nativeDescription = nativeDescription0();\n@@ -70,0 +72,4 @@\n+                OpenResourcePolicies.Policy policy = findPolicy(nativeDescription);\n+                String action = \"error\";\n+                String warn = \"false\";\n+                Supplier<Exception> supplier = null;\n@@ -72,2 +78,5 @@\n-                if (self == in || self == out || self == err) {\n-                    claimedFDs.claimFd(self, self, null);\n+                if (policy != null) {\n+                    action = policy.action;\n+                    warn = policy.params.getOrDefault(\"warn\", \"false\");\n+                } else if (self == in || self == out || self == err) {\n+                    action = \"ignore\";\n@@ -75,4 +84,15 @@\n-\n-                claimedFDs.claimFd(self, self, () -> new CheckpointOpenResourceException(\n-                    FileDescriptor.class.getSimpleName() + \" \" + fd + \": \" + nativeDescription0(),\n-                    getStackTraceHolder()));\n+                supplier = switch (action.toLowerCase()) {\n+                    case \"error\":\n+                        yield () -> new CheckpointOpenResourceException(\n+                            FileDescriptor.class.getSimpleName() + \" \" + fd + \": \" + nativeDescription,\n+                            getStackTraceHolder());\n+                    case \"close\":\n+                        close();\n+                    case \"ignore\":\n+                        if (Boolean.parseBoolean(warn)) {\n+                            LoggerContainer.warn(\"File descriptor {0} was not closed by the application!\", fd);\n+                        }\n+                        yield NO_EXCEPTION;\n+                    default: throw new IllegalArgumentException(\"Unknown policy action for file descriptor \" + fd + \": \" + action);\n+                };\n+                claimedFDs.claimFd(self, self, supplier);\n@@ -82,0 +102,21 @@\n+        private OpenResourcePolicies.Policy findPolicy(String nativeDescription) {\n+            return OpenResourcePolicies.find(false, \"filedescriptor\", params -> {\n+                String value = params.get(\"value\");\n+                if (value != null) {\n+                    try {\n+                        int expected = Integer.parseInt(value);\n+                        if (expected != fd) {\n+                            return false;\n+                        }\n+                    } catch (NumberFormatException e) {\n+                        throw new IllegalArgumentException(\"Cannot parse file descriptor value '\" + value + \"'\");\n+                    }\n+                }\n+                String regex = params.get(\"regex\");\n+                if (regex != null) {\n+                    return Pattern.compile(regex).matcher(nativeDescription).matches();\n+                }\n+                return true;\n+            });\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileDescriptor.java","additions":50,"deletions":9,"binary":false,"changes":59,"status":"modified"}]}