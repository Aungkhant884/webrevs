{"files":[{"patch":"@@ -35,0 +35,4 @@\n+#include <limits.h>\n+#include <string.h>\n+#include <sys\/prctl.h>\n+\n@@ -465,0 +469,43 @@\n+\n+void crac::set_terminate_with_parent() {\n+  if (prctl(PR_SET_PDEATHSIG, SIGTERM)) {\n+    perror(\"CRaC: Cannot setup parent termination signal\");\n+    return;\n+  }\n+  \/\/ We need to check if the parent was not already terminated (though\n+  \/\/ since this happens very early, such situation should be rare).\n+  \/\/ We cannot just check if getppid() == 1 because modern kernels\n+  \/\/ support any process becoming child reaper for its subtree, using\n+  \/\/ prctl(PR_SET_CHILD_SUBREAPER, 1)\n+  pid_t ppid = getppid();\n+  char buf[PATH_MAX];\n+  snprintf(buf, sizeof(buf), \"\/proc\/%d\/comm\", ppid);\n+  int comm_fd = open(buf, O_RDONLY);\n+  if (comm_fd < 0) {\n+    perror(\"Cannot open parent process comm!\");\n+  } else {\n+    size_t rd = 0;\n+    do {\n+      ssize_t r = ::read(comm_fd, buf + rd, sizeof(buf) - rd);\n+      if (r == 0) {\n+        break;\n+      } else if (r < 0) {\n+        if (errno == EINTR) {\n+          continue;\n+        }\n+        perror(\"Cannot read parent process comm!\");\n+      }\n+      rd += r;\n+    } while (rd < sizeof(buf));\n+    close(comm_fd);\n+    if (rd == sizeof(buf)) {\n+      fprintf(stderr, \"Parent process comm too long, terminating.\");\n+      raise(SIGTERM);\n+    }\n+    \/\/ criu sometimes does not manage to exec into criuengine restorewait\n+    if (strncmp(buf, \"criuengine\\n\", rd) && strncmp(buf, \"criu\\n\", rd)) {\n+      fprintf(stderr, \"Parent process is neither criu nor criuengine, terminating.\");\n+      raise(SIGTERM);\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -212,0 +212,9 @@\n+static bool ends_with(const char *str, const char *suffix) {\n+  size_t str_len = strlen(str);\n+  size_t suffix_len = strlen(suffix);\n+  if (suffix_len > str_len) {\n+    return false;\n+  }\n+  return !strcmp(str + str_len - suffix_len, suffix);\n+}\n+\n@@ -240,0 +249,4 @@\n+  if (ends_with(_crengine, \"criuengine\")) {\n+    LINUX_ONLY(crac::set_terminate_with_parent());\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,0 +46,7 @@\n+#ifdef LINUX\n+  \/\/ With criuengine the restored process gets restorewait process\n+  \/\/ as its parent; scripts not expecting two processes might signal\n+  \/\/ (e.g. terminate) the parent process but the actual restored\n+  \/\/ process would get orphaned.\n+  static void set_terminate_with_parent();\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/crac.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import jdk.crac.*;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+import jdk.test.lib.crac.CracProcess;\n+import jdk.test.lib.crac.CracTest;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test KillRestoredTest\n+ * @requires os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @build KillRestoredTest\n+ * @run driver\/timeout=20 jdk.test.lib.crac.CracTest\n+ *\/\n+public class KillRestoredTest implements CracTest {\n+    @Override\n+    public void test() throws Exception {\n+        CracProcess checkpoint = new CracBuilder().startCheckpoint();\n+        checkpoint.waitForCheckpointed();\n+        CracProcess restore = new CracBuilder().startRestore();\n+        assertTrue(processExists(restore.pid())); \/\/ criu or criuengine\n+        while (!processExists(checkpoint.pid())) { \/\/ actually restored process\n+            Thread.sleep(50);\n+        }\n+        String children = Files.readString(Path.of(\"\/proc\/\" + restore.pid() + \"\/task\/\" + restore.pid() + \"\/children\")).trim();\n+        assertEquals(String.valueOf(checkpoint.pid()), children);\n+        new ProcessBuilder().inheritIO().command(\"kill\", \"-9\", String.valueOf(restore.pid())).start().waitFor();\n+        assertEquals(137, restore.waitFor());\n+        assertFalse(processExists(restore.pid()));\n+        \/\/ While the PID is the same, checkpoint.waitFor() would wait for a different process\n+        while (processExists(checkpoint.pid())) {\n+            Thread.sleep(50);\/\/ signal delivery and termination might take a bit\n+        }\n+    }\n+\n+    private boolean processExists(long pid) {\n+        File procDir = new File(\"\/proc\/\" + pid);\n+        return procDir.exists() && procDir.isDirectory();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        Core.checkpointRestore();\n+        Thread.sleep(60_000);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/KillRestoredTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -131,0 +131,4 @@\n+\n+    public long pid() {\n+        return process.pid();\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracProcess.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}