{"files":[{"patch":"@@ -416,0 +416,38 @@\n+\n+static bool read_all(int fd, char *dest, size_t n) {\n+  size_t rd = 0;\n+  do {\n+    ssize_t r = ::read(fd, dest + rd, n - rd);\n+    if (r == 0) {\n+      return false;\n+    } else if (r < 0) {\n+      if (errno == EINTR) {\n+        continue;\n+      }\n+      return false;\n+    }\n+    rd += r;\n+  } while (rd < n);\n+  return true;\n+}\n+\n+bool crac::read_bootid(char *dest) {\n+  int fd = ::open(\"\/proc\/sys\/kernel\/random\/boot_id\", O_RDONLY);\n+  if (fd < 0 || !read_all(fd, dest, UUID_LENGTH)) {\n+    perror(\"CRaC: Cannot read system boot ID\");\n+    return false;\n+  }\n+  char c;\n+  if (!read_all(fd, &c, 1) || c != '\\n') {\n+    perror(\"CRaC: system boot ID does not end with newline\");\n+    return false;\n+  }\n+  if (::read(fd, &c, 1) != 0) {\n+    perror(\"CRaC: Unexpected data\/error reading system boot ID\");\n+    return false;\n+  }\n+  if (::close(fd) != 0) {\n+    perror(\"CRaC: Cannot close system boot ID file\");\n+  }\n+  return true;\n+}\n","filename":"src\/hotspot\/os\/linux\/crac_linux.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -59,0 +59,4 @@\n+\n+bool crac::read_bootid(char *dest) {\n+  return true;\n+}\n","filename":"src\/hotspot\/os\/posix\/crac_posix.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-\/\/ no precompiled headers\n+#include \"precompiled.hpp\"\n+\n@@ -51,0 +52,4 @@\n+\n+bool crac::read_bootid(char *dest) {\n+  return true;\n+}\n","filename":"src\/hotspot\/os\/windows\/crac_windows.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-\/\/ no precompiled headers\n+#include \"precompiled.hpp\"\n+\n@@ -29,1 +30,0 @@\n-#include \"perfMemory_linux.hpp\"\n@@ -40,0 +40,4 @@\n+#ifdef _WINDOWS\n+#include <process.h>\n+#endif\n+\n@@ -238,3 +242,0 @@\n-#else\n-  \/\/ TODO add sync processing\n-#endif \/\/LINUX\n@@ -245,0 +246,3 @@\n+#else\n+  \/\/ TODO add sync processing\n+#endif \/\/LINUX\n@@ -600,38 +604,0 @@\n-\n-static bool read_all(int fd, char *dest, size_t n) {\n-  size_t rd = 0;\n-  do {\n-    ssize_t r = ::read(fd, dest + rd, n - rd);\n-    if (r == 0) {\n-      return false;\n-    } else if (r < 0) {\n-      if (errno == EINTR) {\n-        continue;\n-      }\n-      return false;\n-    }\n-    rd += r;\n-  } while (rd < n);\n-  return true;\n-}\n-\n-bool crac::read_bootid(char *dest) {\n-  int fd = ::open(\"\/proc\/sys\/kernel\/random\/boot_id\", O_RDONLY);\n-  if (fd < 0 || !read_all(fd, dest, UUID_LENGTH)) {\n-    perror(\"CRaC: Cannot read system boot ID\");\n-    return false;\n-  }\n-  char c;\n-  if (!read_all(fd, &c, 1) || c != '\\n') {\n-    perror(\"CRaC: system boot ID does not end with newline\");\n-    return false;\n-  }\n-  if (::read(fd, &c, 1) != 0) {\n-    perror(\"CRaC: Unexpected data\/error reading system boot ID\");\n-    return false;\n-  }\n-  if (::close(fd) != 0) {\n-    perror(\"CRaC: Cannot close system boot ID file\");\n-  }\n-  return true;\n-}\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":9,"deletions":43,"binary":false,"changes":52,"status":"modified"}]}