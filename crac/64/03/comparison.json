{"files":[{"patch":"@@ -38,2 +38,25 @@\n-    public CheckpointException() {\n-        super();\n+    private CheckpointException() {\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n+    }\n+\n+    \/**\n+     * Constructs a {@code CheckpointException} with the specified\n+     * detail message.\n+     *\n+     * @param message the detail message.\n+     *\/\n+    public CheckpointException(String message) {\n+        super(message);\n+    }\n+\n+    \/**\n+     * Exception that combines multiple other exceptions in its suppressed exceptions.\n+     *\/\n+    public static class Combined extends CheckpointException {\n+        private static final long serialVersionUID = -7949656538310239746L;\n+        \/**\n+         * Constructs a message-less exception, not capturing stack trace.\n+         *\/\n+        public Combined() {}\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/CheckpointException.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-        } catch (jdk.crac.CheckpointException e) {\n-            CheckpointException newException = new CheckpointException();\n+        } catch (jdk.crac.CheckpointException.Combined e) {\n+            CheckpointException newException = new CheckpointException.Combined();\n@@ -54,0 +54,5 @@\n+        } catch (jdk.crac.CheckpointException e) {\n+            \/\/ should we rather use message + cause in here?\n+            CheckpointException newException = new CheckpointException.Combined();\n+            newException.addSuppressed(e);\n+            throw newException;\n@@ -62,2 +67,2 @@\n-        } catch (jdk.crac.RestoreException e) {\n-            RestoreException newException = new RestoreException();\n+        } catch (jdk.crac.RestoreException.Combined e) {\n+            RestoreException newException = new RestoreException.Combined();\n@@ -68,0 +73,4 @@\n+        } catch (jdk.crac.RestoreException e) {\n+            RestoreException newException = new RestoreException.Combined();\n+            newException.addSuppressed(e);\n+            throw newException;\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/ContextWrapper.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-        } catch (jdk.crac.CheckpointException e) {\n-            CheckpointException newException = new CheckpointException();\n+        } catch (jdk.crac.CheckpointException.Combined e) {\n+            CheckpointException.Combined newException = new CheckpointException.Combined();\n@@ -77,2 +77,6 @@\n-        } catch (jdk.crac.RestoreException e) {\n-            RestoreException newException = new RestoreException();\n+        } catch (jdk.crac.CheckpointException e) {\n+            CheckpointException newException = new CheckpointException.Combined();\n+            newException.addSuppressed(e);\n+            throw newException;\n+        } catch (jdk.crac.RestoreException.Combined e) {\n+            RestoreException newException = new RestoreException.Combined();\n@@ -83,0 +87,4 @@\n+        } catch (jdk.crac.RestoreException e) {\n+            RestoreException newException = new RestoreException.Combined();\n+            newException.addSuppressed(e);\n+            throw newException;\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-            } catch (CheckpointException e) {\n-                Exception newException = new jdk.crac.CheckpointException();\n+            } catch (CheckpointException.Combined e) {\n+                Exception newException = new jdk.crac.CheckpointException.Combined();\n@@ -68,0 +68,4 @@\n+            } catch (Exception e) {\n+                Exception newException = new jdk.crac.CheckpointException.Combined();\n+                newException.addSuppressed(e);\n+                throw newException;\n@@ -79,2 +83,2 @@\n-            } catch (RestoreException e) {\n-                Exception newException = new jdk.crac.RestoreException();\n+            } catch (RestoreException.Combined e) {\n+                Exception newException = new jdk.crac.RestoreException.Combined();\n@@ -85,0 +89,4 @@\n+            } catch (RestoreException e) {\n+                Exception newException = new jdk.crac.RestoreException.Combined();\n+                newException.addSuppressed(e);\n+                throw newException;\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/ResourceWrapper.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,2 +38,25 @@\n-    public RestoreException() {\n-        super();\n+    private RestoreException() {\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n+    }\n+\n+    \/**\n+     * Constructs a {@code RestoreException} with the specified\n+     * detail message.\n+     *\n+     * @param message the detail message.\n+     *\/\n+    public RestoreException(String message) {\n+        super(message);\n+    }\n+\n+    \/**\n+     * Exception that combines multiple other exceptions in its suppressed exceptions.\n+     *\/\n+    public static class Combined extends RestoreException {\n+        private static final long serialVersionUID = 7243624264568410630L;\n+        \/**\n+         * Constructs a message-less exception, not capturing stack trace.\n+         *\/\n+        public Combined() {}\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/RestoreException.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -38,2 +38,4 @@\n-    public CheckpointException() {\n-        super();\n+    private CheckpointException() {\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n@@ -51,0 +53,11 @@\n+\n+    \/**\n+     * Exception that combines multiple other exceptions in its suppressed exceptions.\n+     *\/\n+    public static class Combined extends CheckpointException {\n+        private static final long serialVersionUID = 6743619271103062963L;\n+        \/**\n+         * Constructs a message-less exception, not capturing stack trace.\n+         *\/\n+        public Combined() {}\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/CheckpointException.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -90,16 +90,6 @@\n-            switch(codes[i]) {\n-                case JVM_CR_FAIL_FILE:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenFileException(messages[i], null));\n-                    break;\n-                case JVM_CR_FAIL_SOCK:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenSocketException(messages[i]));\n-                    break;\n-                case JVM_CR_FAIL_PIPE:\n-                    \/\/ FALLTHROUGH\n-                default:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenResourceException(messages[i], null));\n-                    break;\n-            }\n+            exception.addSuppressed(switch (codes[i]) {\n+                case JVM_CR_FAIL_FILE -> new CheckpointOpenFileException(messages[i], null);\n+                case JVM_CR_FAIL_SOCK -> new CheckpointOpenSocketException(messages[i]);\n+                case JVM_CR_FAIL_PIPE -> new CheckpointOpenResourceException(messages[i], null);\n+                default -> new CheckpointOpenResourceException(messages[i], null);\n+            });\n@@ -128,0 +118,2 @@\n+        } catch (CheckpointException.Combined ce) {\n+            checkpointException = ce;\n@@ -129,4 +121,2 @@\n-            checkpointException = new CheckpointException();\n-            for (Throwable t : ce.getSuppressed()) {\n-                checkpointException.addSuppressed(t);\n-            }\n+            checkpointException = new CheckpointException.Combined();\n+            checkpointException.addSuppressed(ce);\n@@ -159,1 +149,5 @@\n-                checkpointException = new CheckpointException();\n+                if (messages.length == 0) {\n+                    checkpointException = new CheckpointException(\"Native checkpoint failed\");\n+                } else {\n+                    checkpointException = new CheckpointException.Combined();\n+                }\n@@ -162,10 +156,3 @@\n-                case JVM_CHECKPOINT_ERROR:\n-                    translateJVMExceptions(codes, messages, checkpointException);\n-                    break;\n-                case JVM_CHECKPOINT_NONE:\n-                    checkpointException.addSuppressed(\n-                            new RuntimeException(\"C\/R is not configured\"));\n-                    break;\n-                default:\n-                    checkpointException.addSuppressed(\n-                            new RuntimeException(\"Unknown C\/R result: \" + retCode));\n+                case JVM_CHECKPOINT_ERROR -> translateJVMExceptions(codes, messages, checkpointException);\n+                case JVM_CHECKPOINT_NONE -> checkpointException.addSuppressed(new RuntimeException(\"C\/R is not configured\"));\n+                default -> checkpointException.addSuppressed(new RuntimeException(\"Unknown C\/R result: \" + retCode));\n@@ -189,1 +176,1 @@\n-            } else {\n+            } else if (re instanceof RestoreException.Combined) {\n@@ -193,0 +180,2 @@\n+            } else {\n+                checkpointException.addSuppressed(re);\n@@ -219,1 +208,1 @@\n-                        restoreException = new RestoreException();\n+                        restoreException = new RestoreException.Combined();\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":22,"deletions":33,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -38,2 +38,4 @@\n-    public RestoreException() {\n-        super();\n+    private RestoreException() {\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n@@ -51,0 +53,12 @@\n+\n+    \/**\n+     * Exception that combines multiple other exceptions in its suppressed exceptions.\n+     *\/\n+    public static class Combined extends RestoreException {\n+        private static final long serialVersionUID = -574656804868751049L;\n+\n+        \/**\n+         * Constructs a message-less exception, not capturing stack trace.\n+         *\/\n+        public Combined() {}\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/RestoreException.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,2 +42,5 @@\n-        } catch (CheckpointException e) {\n-            handleCheckpointException(e);\n+        } catch (CheckpointException.Combined e) {\n+            CheckpointException ce = ensureCheckpointException();\n+            for (Throwable t : e.getSuppressed()) {\n+                ce.addSuppressed(t);\n+            }\n@@ -52,10 +55,0 @@\n-    protected void handleCheckpointException(CheckpointException e) {\n-        CheckpointException ce = ensureCheckpointException();\n-        for (Throwable t : e.getSuppressed()) {\n-            ce.addSuppressed(t);\n-        }\n-        if (e.getMessage() != null) {\n-            ce.addSuppressed(e);\n-        }\n-    }\n-\n@@ -64,1 +57,1 @@\n-            checkpointException = new CheckpointException();\n+            checkpointException = new CheckpointException.Combined();\n@@ -134,1 +127,1 @@\n-        } catch (RestoreException e) {\n+        } catch (RestoreException.Combined e) {\n@@ -137,1 +130,4 @@\n-            handleRestoreException(e);\n+            RestoreException re = ensureRestoreException();\n+            for (Throwable t : e.getSuppressed()) {\n+                re.addSuppressed(t);\n+            }\n@@ -147,10 +143,0 @@\n-    protected void handleRestoreException(RestoreException e) {\n-        RestoreException re = ensureRestoreException();\n-        for (Throwable t : e.getSuppressed()) {\n-            re.addSuppressed(t);\n-        }\n-        if (e.getMessage() != null) {\n-            re.addSuppressed(e);\n-        }\n-    }\n-\n@@ -159,1 +145,1 @@\n-            restoreException = new RestoreException();\n+            restoreException = new RestoreException.Combined();\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java","additions":12,"deletions":26,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -108,2 +108,5 @@\n-            } catch (CheckpointException e) {\n-                handleCheckpointException(e);\n+            } catch (CheckpointException.Combined e) {\n+                CheckpointException ce = ensureCheckpointException();\n+                for (Throwable t : e.getSuppressed()) {\n+                    ce.addSuppressed(t);\n+                }\n@@ -125,1 +128,1 @@\n-            } catch (RestoreException e) {\n+            } catch (RestoreException.Combined e) {\n@@ -128,1 +131,4 @@\n-                handleRestoreException(e);\n+                RestoreException re = ensureRestoreException();\n+                for (Throwable t : e.getSuppressed()) {\n+                    re.addSuppressed(t);\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    private static JDKContext JDKContext;\n+    private static final JDKContext JDKContext;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/Core.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        other.javaOptions = new HashMap<>(javaOptions);\n+        other.javaOptions.putAll(javaOptions);\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}