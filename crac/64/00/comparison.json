{"files":[{"patch":"@@ -39,1 +39,13 @@\n-        super();\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n+    }\n+\n+    \/**\n+     * Constructs a {@code CheckpointException} with the specified\n+     * detail message.\n+     *\n+     * @param message the detail message.\n+     *\/\n+    public CheckpointException(String message) {\n+        super(message);\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/CheckpointException.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -72,1 +72,5 @@\n-            CheckpointException newException = new CheckpointException();\n+            \/\/ We will lose the stack trace information but not the detailed message\n+            \/\/ Since the exception received here will originate from jdk.crac.Core\n+            \/\/ anyway the actual stack trace is not that important.\n+            CheckpointException newException = e.getMessage() == null ?\n+                    new CheckpointException() : new CheckpointException(e.getMessage());\n@@ -78,1 +82,2 @@\n-            RestoreException newException = new RestoreException();\n+            RestoreException newException = e.getMessage() == null ?\n+                    new RestoreException() : new RestoreException(e.getMessage());\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,1 +39,13 @@\n-        super();\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n+    }\n+\n+    \/**\n+     * Constructs a {@code RestoreException} with the specified\n+     * detail message.\n+     *\n+     * @param message the detail message.\n+     *\/\n+    public RestoreException(String message) {\n+        super(message);\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/RestoreException.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,1 +39,3 @@\n-        super();\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/CheckpointException.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,16 +85,7 @@\n-            switch(codes[i]) {\n-                case JVM_CR_FAIL_FILE:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenFileException(messages[i]));\n-                    break;\n-                case JVM_CR_FAIL_SOCK:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenSocketException(messages[i]));\n-                    break;\n-                case JVM_CR_FAIL_PIPE:\n-                    \/\/ FALLTHROUGH\n-                default:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenResourceException(messages[i]));\n-                    break;\n-            }\n+            Throwable ex = switch (codes[i]) {\n+                case JVM_CR_FAIL_FILE -> new CheckpointOpenFileException(messages[i]);\n+                case JVM_CR_FAIL_SOCK -> new CheckpointOpenSocketException(messages[i]);\n+                case JVM_CR_FAIL_PIPE -> new CheckpointOpenResourceException(messages[i]);\n+                default -> new CheckpointOpenResourceException(messages[i]);\n+            };\n+            exception.addSuppressed(ex);\n@@ -141,1 +132,5 @@\n-                checkpointException = new CheckpointException();\n+                if (messages.length == 0) {\n+                    checkpointException = new CheckpointException(\"Native checkpoint failed\");\n+                } else {\n+                    checkpointException = new CheckpointException();\n+                }\n@@ -144,10 +139,3 @@\n-                case JVM_CHECKPOINT_ERROR:\n-                    translateJVMExceptions(codes, messages, checkpointException);\n-                    break;\n-                case JVM_CHECKPOINT_NONE:\n-                    checkpointException.addSuppressed(\n-                            new RuntimeException(\"C\/R is not configured\"));\n-                    break;\n-                default:\n-                    checkpointException.addSuppressed(\n-                            new RuntimeException(\"Unknown C\/R result: \" + retCode));\n+                case JVM_CHECKPOINT_ERROR -> translateJVMExceptions(codes, messages, checkpointException);\n+                case JVM_CHECKPOINT_NONE -> checkpointException.addSuppressed(new RuntimeException(\"C\/R is not configured\"));\n+                default -> checkpointException.addSuppressed(new RuntimeException(\"Unknown C\/R result: \" + retCode));\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":15,"deletions":27,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -39,1 +39,3 @@\n-        super();\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/RestoreException.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    private static JDKContext JDKContext;\n+    private static final JDKContext JDKContext;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/Core.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+    final Map<String, String> javaOptions = new HashMap<>();\n@@ -102,0 +103,5 @@\n+    public CracBuilder javaOption(String name, String value) {\n+        javaOptions.put(name, value);\n+        return this;\n+    }\n+\n@@ -308,0 +314,1 @@\n+            cmd.add(\"-XX:+UnlockExperimentalVMOptions\");\n@@ -310,0 +317,3 @@\n+        for (var entry : javaOptions.entrySet()) {\n+            cmd.add(\"-D\" + entry.getKey() + \"=\" + entry.getValue());\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}