{"files":[{"patch":"@@ -39,1 +39,3 @@\n-        super();\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/CheckpointException.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,3 @@\n-        super();\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/RestoreException.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,11 +39,3 @@\n-        super();\n-    }\n-\n-    \/**\n-     * Constructs a {@code CheckpointException} with the specified\n-     * detail message.\n-     *\n-     * @param message the detail message.\n-     *\/\n-    public CheckpointException(String message) {\n-        super(message);\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/CheckpointException.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -87,16 +87,6 @@\n-            switch(codes[i]) {\n-                case JVM_CR_FAIL_FILE:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenFileException(messages[i], null));\n-                    break;\n-                case JVM_CR_FAIL_SOCK:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenSocketException(messages[i]));\n-                    break;\n-                case JVM_CR_FAIL_PIPE:\n-                    \/\/ FALLTHROUGH\n-                default:\n-                    exception.addSuppressed(\n-                            new CheckpointOpenResourceException(messages[i], null));\n-                    break;\n-            }\n+            exception.addSuppressed(switch (codes[i]) {\n+                case JVM_CR_FAIL_FILE -> new CheckpointOpenFileException(messages[i], null);\n+                case JVM_CR_FAIL_SOCK -> new CheckpointOpenSocketException(messages[i]);\n+                case JVM_CR_FAIL_PIPE -> new CheckpointOpenResourceException(messages[i], null);\n+                default -> new CheckpointOpenResourceException(messages[i], null);\n+            });\n@@ -127,4 +117,1 @@\n-            checkpointException = new CheckpointException();\n-            for (Throwable t : ce.getSuppressed()) {\n-                checkpointException.addSuppressed(t);\n-            }\n+            checkpointException = ce;\n@@ -158,0 +145,3 @@\n+                if (messages.length == 0) {\n+                    checkpointException.addSuppressed(new RuntimeException(\"Native checkpoint failed\"));\n+                }\n@@ -160,10 +150,3 @@\n-                case JVM_CHECKPOINT_ERROR:\n-                    translateJVMExceptions(codes, messages, checkpointException);\n-                    break;\n-                case JVM_CHECKPOINT_NONE:\n-                    checkpointException.addSuppressed(\n-                            new RuntimeException(\"C\/R is not configured\"));\n-                    break;\n-                default:\n-                    checkpointException.addSuppressed(\n-                            new RuntimeException(\"Unknown C\/R result: \" + retCode));\n+                case JVM_CHECKPOINT_ERROR -> translateJVMExceptions(codes, messages, checkpointException);\n+                case JVM_CHECKPOINT_NONE -> checkpointException.addSuppressed(new RuntimeException(\"C\/R is not configured\"));\n+                default -> checkpointException.addSuppressed(new RuntimeException(\"Unknown C\/R result: \" + retCode));\n@@ -276,1 +259,3 @@\n-                throw new CheckpointException(\"Recursive checkpoint is not allowed\");\n+                CheckpointException ex = new CheckpointException();\n+                ex.addSuppressed(new IllegalStateException(\"Recursive checkpoint is not allowed\"));\n+                throw ex;\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":16,"deletions":31,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -39,11 +39,3 @@\n-        super();\n-    }\n-\n-    \/**\n-     * Constructs a {@code RestoreException} with the specified\n-     * detail message.\n-     *\n-     * @param message the detail message.\n-     *\/\n-    public RestoreException(String message) {\n-        super(message);\n+        \/\/ This exception is used as an aggregate for other (suppressed)\n+        \/\/ exceptions; no point in recording and printing the stack trace.\n+        super(null, null, true, false);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/RestoreException.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -33,3 +33,0 @@\n-            if (e.getMessage() != null) {\n-                exception.addSuppressed(e); \/\/ FIXME avoid message \/ preserve it via a distinct Exception\n-            }\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/ExceptionHolder.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -35,1 +35,1 @@\n-    Map<String, String> javaOptions = new HashMap<>();\n+    final Map<String, String> javaOptions = new HashMap<>();\n@@ -71,1 +71,1 @@\n-        other.javaOptions = new HashMap<>(javaOptions);\n+        other.javaOptions.putAll(javaOptions);\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}