{"files":[{"patch":"@@ -33,2 +33,1 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+import sun.security.action.GetBooleanAction;\n@@ -51,1 +50,0 @@\n-    private static boolean traceStartupTime;\n@@ -55,0 +53,4 @@\n+    private static class FlagsHolder {\n+        public static final boolean TRACE_STARTUP_TIME =\n+            GetBooleanAction.privilegedGetProperty(\"jdk.crac.trace-startup-time\");\n+    }\n@@ -60,10 +62,0 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        boolean doTraceStartupTime = AccessController.doPrivileged(\n-                new PrivilegedAction<Boolean>() {\n-                    public Boolean run() {\n-                        return Boolean.parseBoolean(\n-                                System.getProperty(\"jdk.crac.trace-startup-time\"));\n-                    }});\n-\n-        traceStartupTime = doTraceStartupTime;\n@@ -137,1 +129,1 @@\n-        if (traceStartupTime) {\n+        if (FlagsHolder.TRACE_STARTUP_TIME) {\n@@ -195,1 +187,1 @@\n-                    if (traceStartupTime) {\n+                    if (FlagsHolder.TRACE_STARTUP_TIME) {\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import sun.security.action.GetBooleanAction;\n@@ -30,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -36,7 +35,5 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean DEBUG = AccessController.doPrivileged(\n-            new PrivilegedAction<Boolean>() {\n-                public Boolean run() {\n-                    return Boolean.parseBoolean(\n-                            System.getProperty(\"jdk.crac.debug\"));\n-                }});\n+\n+    private static class FlagsHolder {\n+        public static final boolean DEBUG =\n+            GetBooleanAction.privilegedGetProperty(\"jdk.crac.debug\");\n+    }\n@@ -65,1 +62,1 @@\n-            if (DEBUG) {\n+            if (FlagsHolder.DEBUG) {\n@@ -91,1 +88,1 @@\n-            if (DEBUG) {\n+            if (FlagsHolder.DEBUG) {\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.*;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @run main LazyProps\n+ *\/\n+public class LazyProps {\n+    static public void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            OutputAnalyzer output = ProcessTools.executeTestJvm(\n+                    \"-XX:CREngine=simengine\", \"-XX:CRaCCheckpointTo=.\/cr\",\n+                    \"LazyProps\",\n+                    \"-runTest\");\n+            output.shouldHaveExitValue(0);\n+            output.shouldContain(\"jdk.crac beforeCheckpoint\");\n+        } else {\n+            Resource resource = new Resource() {\n+                @Override\n+                public void beforeCheckpoint(Context<? extends Resource> context) throws Exception { }\n+                @Override\n+                public void afterRestore(Context<? extends Resource> context) throws Exception { }\n+            };\n+            Core.getGlobalContext().register(resource);\n+\n+            System.setProperty(\"jdk.crac.debug\", \"true\");\n+            Core.checkpointRestore();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/LazyProps.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}