{"files":[{"patch":"@@ -294,1 +294,1 @@\n-    jlong _restore_counter;\n+    jlong _restore_nanos;\n@@ -350,1 +350,1 @@\n-      jlong restore_counter) {\n+      jlong restore_nanos) {\n@@ -353,1 +353,1 @@\n-      restore_counter,\n+      restore_nanos,\n@@ -453,1 +453,1 @@\n-static jlong _restore_start_counter;\n+static jlong _restore_start_nanos;\n@@ -5724,1 +5724,1 @@\n-  if (!_restore_start_counter) {\n+  if (!_restore_start_nanos) {\n@@ -5727,1 +5727,1 @@\n-  return javaTimeNanos() - _restore_start_counter;\n+  return javaTimeNanos() - _restore_start_nanos;\n@@ -6024,0 +6024,1 @@\n+  os::record_time_before_checkpoint();\n@@ -6041,0 +6042,2 @@\n+  os::update_javaTimeNanos_offset();\n+\n@@ -6281,1 +6284,3 @@\n-    _restore_start_counter = os::javaTimeNanos();\n+    _restore_start_nanos = os::javaTimeNanos();\n+  } else {\n+    _restore_start_nanos += os::monotonic_time_offset();\n@@ -6432,1 +6437,1 @@\n-  jlong restore_counter = javaTimeNanos();\n+  jlong restore_nanos = javaTimeNanos();\n@@ -6445,1 +6450,1 @@\n-          restore_counter)) {\n+          restore_nanos)) {\n@@ -6544,1 +6549,1 @@\n-  ::_restore_start_counter = hdr->_restore_counter;\n+  ::_restore_start_nanos = hdr->_restore_nanos;\n@@ -6598,0 +6603,27 @@\n+\n+bool os::read_bootid(char *dest, size_t size) {\n+  int fd = ::open(\"\/proc\/sys\/kernel\/random\/boot_id\", O_RDONLY);\n+  if (fd < 0) {\n+    perror(\"CRaC: Cannot read system boot ID\");\n+    return false;\n+  }\n+  size_t rd = 0;\n+  bool success = true;\n+  do {\n+    ssize_t r = read(fd, dest + rd, size - rd - 1);\n+    if (r == 0) {\n+      break;\n+    } else if (r < 0) {\n+      if (errno == EINTR) {\n+        continue;\n+      }\n+      success = false;\n+      perror(\"CRaC: Cannot read system boot ID\");\n+      break;\n+    }\n+    rd += r;\n+  } while (rd < size - 1);\n+  dest[size - 1] = '\\0';\n+  ::close(fd);\n+  return success;\n+}\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1413,1 +1413,1 @@\n-  jlong result = jlong(tp.tv_sec) * NANOSECS_PER_SEC + jlong(tp.tv_nsec);\n+  jlong result = jlong(tp.tv_sec) * NANOSECS_PER_SEC + jlong(tp.tv_nsec) + javaTimeNanos_offset;\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,8 @@\n+\/\/ Timestamps recorded before checkpoint\n+jlong os::checkpoint_millis;\n+jlong os::checkpoint_nanos;\n+char os::checkpoint_bootid[UUID_LENGTH + 1];\n+\/\/ Value based on wall clock time difference that will guarantee monotonic\n+\/\/ System.nanoTime() close to actual wall-clock time difference.\n+jlong os::javaTimeNanos_offset = 0;\n+\n@@ -2026,0 +2034,36 @@\n+\n+void os::record_time_before_checkpoint() {\n+  checkpoint_millis = javaTimeMillis();\n+  checkpoint_nanos = javaTimeNanos();\n+  memset(checkpoint_bootid, 0, sizeof(checkpoint_bootid));\n+  read_bootid(checkpoint_bootid, sizeof(checkpoint_bootid));\n+}\n+\n+void os::update_javaTimeNanos_offset() {\n+  char buf[UUID_LENGTH + 1];\n+  \/\/ We will change the nanotime offset only if this is not the same boot\n+  \/\/ to prevent reducing the accuracy of System.nanoTime() unnecessarily.\n+  \/\/ It is possible that in a real-world case the boot_id does not change\n+  \/\/ (containers keep the boot_id) - but the monotonic time changes. We will\n+  \/\/ only guarantee that the nanotime does not go backwards in that case but\n+  \/\/ won't offset the time based on wall-clock time as this change in monotonic\n+  \/\/ time is likely intentional.\n+  if (!read_bootid(buf, sizeof(buf)) || strncmp(buf, checkpoint_bootid, UUID_LENGTH) != 0) {\n+    assert(checkpoint_millis >= 0, \"Restore without a checkpoint?\");\n+    long diff_millis = javaTimeMillis() - checkpoint_millis;\n+    \/\/ If the wall clock has gone backwards we won't add it to the offset\n+    if (diff_millis < 0) {\n+      diff_millis = 0;\n+    }\n+    \/\/ javaTimeNanos() call on the second line below uses the *_offset, so we will zero\n+    \/\/ it to make the call return true monotonic time rather than the adjusted value.\n+    javaTimeNanos_offset = 0;\n+    javaTimeNanos_offset = checkpoint_nanos - javaTimeNanos() + diff_millis * 1000000L;\n+  } else {\n+    \/\/ ensure monotonicity even if this looks like the same boot\n+    jlong diff = javaTimeNanos() - checkpoint_nanos;\n+    if (diff < 0) {\n+      javaTimeNanos_offset -= diff;\n+    }\n+  }\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+\/\/ xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n+#define UUID_LENGTH 36\n+\n@@ -133,0 +136,5 @@\n+  static jlong checkpoint_millis;\n+  static jlong checkpoint_nanos;\n+  static char checkpoint_bootid[UUID_LENGTH + 1];\n+  static jlong javaTimeNanos_offset;\n+\n@@ -177,0 +185,2 @@\n+  static bool read_bootid(char *dest, size_t size);\n+\n@@ -202,0 +212,6 @@\n+  static void record_time_before_checkpoint();\n+  static void update_javaTimeNanos_offset();\n+  static jlong monotonic_time_offset() {\n+    return javaTimeNanos_offset;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+\n@@ -2452,0 +2453,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-java\/lang\/System::nanoTime()\n+java\/lang\/System::nanoTime0()\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/conf\/exclude.methods.lst","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.*;\n+import jdk.crac.management.CRaCMXBean;\n+import jdk.test.lib.Container;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+\/**\n+ * @test NanoTimeTest\n+ * @requires (os.family == \"linux\")\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @build NanoTimeTest\n+ * @run driver jdk.test.lib.crac.CracTest      0 true\n+ * @run driver jdk.test.lib.crac.CracTest  86400 true\n+ * @run driver jdk.test.lib.crac.CracTest -86400 true\n+ * @run driver jdk.test.lib.crac.CracTest  86400 false\n+ * @run driver jdk.test.lib.crac.CracTest -86400 false\n+ *\/\n+public class NanoTimeTest implements CracTest {\n+    private static final String imageName = Common.imageName(\"system-nanotime\");\n+\n+    @CracTestArg(0)\n+    long monotonicOffset;\n+\n+    @CracTestArg(1)\n+    boolean changeBootId;\n+\n+    @Override\n+    public void test() throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+        CracBuilder builder = new CracBuilder();\n+        Path bootIdFile = Files.createTempFile(\"NanoTimeTest-\", \"-boot_id\");\n+        try {\n+            \/\/ TODO: use more official image\n+            builder.withBaseImage(\"ghcr.io\/crac\/test-base\", \"latest\")\n+                    .dockerOptions(\"-v\", bootIdFile + \":\/fake_boot_id\")\n+                    .inDockerImage(imageName);\n+\n+            Files.writeString(bootIdFile, \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n+            \/\/ We need to preload the library before checkpoint\n+            builder.doCheckpoint(Container.ENGINE_COMMAND, \"exec\",\n+                    \"-e\", \"LD_PRELOAD=\/opt\/path-mapping-quiet.so\",\n+                    \"-e\", \"PATH_MAPPING=\/proc\/sys\/kernel\/random\/boot_id:\/fake_boot_id\",\n+                    CracBuilder.CONTAINER_NAME, CracBuilder.DOCKER_JAVA);\n+\n+            if (changeBootId) {\n+                Files.writeString(bootIdFile, \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\");\n+            }\n+\n+            builder.doRestore(Container.ENGINE_COMMAND, \"exec\", CracBuilder.CONTAINER_NAME,\n+                    \"unshare\", \"--fork\", \"--time\", \"--boottime\", \"86400\", \"--monotonic\", String.valueOf(monotonicOffset),\n+                    CracBuilder.DOCKER_JAVA);\n+        } finally {\n+            builder.ensureContainerKilled();\n+            assertTrue(bootIdFile.toFile().delete());\n+        }\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        System.out.println(\"Expected offset: \" + monotonicOffset);\n+        \/\/ We use uptime to assert that changing the clock worked\n+        long boottimeBefore = readSystemUptime();\n+\n+        long before = System.nanoTime();\n+        Core.checkpointRestore();\n+        long after = System.nanoTime();\n+        System.out.println(\"Before: \" + before);\n+        System.out.println(\"After: \" + after);\n+        assertLTE(before, after, \"After < Before\");\n+        if (changeBootId || monotonicOffset <= 0) {\n+            \/\/ Even though we have shifted the monotic offset by a day the difference\n+            \/\/ is adjusted by difference between wall clock time before and after;\n+            \/\/ the difference in monotonic time is considered \"random\"\n+            assertLT(after, before + TimeUnit.HOURS.toNanos(1), \"After too late\");\n+        } else {\n+            assertGT(after, before + TimeUnit.HOURS.toNanos(1), \"After too early\");\n+            assertLT(after, before + TimeUnit.HOURS.toNanos(25), \"After too late\");\n+        }\n+        long boottimeAfter = readSystemUptime();\n+        assertGTE(boottimeAfter, boottimeBefore + 86_400_000, \"Boottime was not changed\");\n+        RuntimeMXBean runtimeMX = ManagementFactory.getRuntimeMXBean();\n+        assertGTE(runtimeMX.getUptime(), 0L,\"VM Uptime is negative!\");\n+        CRaCMXBean cracBean = CRaCMXBean.getCRaCMXBean();\n+        assertLT(cracBean.getUptimeSinceRestore(), 60_000L);\n+        assertGTE(cracBean.getUptimeSinceRestore(), 0L);\n+    }\n+\n+    private long readSystemUptime() throws IOException {\n+        String uptimeStr = Files.readString(Path.of(\"\/proc\/uptime\"));\n+        String[] parts = uptimeStr.split(\" \");\n+        return (long)(Double.parseDouble(parts[0]) * 1000);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/java\/lang\/System\/NanoTimeTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -40,2 +40,5 @@\n-    static String getBaseImageName() {\n-        String name = System.getProperty(\"jdk.test.docker.image.name\");\n+    public static final String BASE_IMAGE_NAME = \"jdk.test.docker.image.name\";\n+    public static final String BASE_IMAGE_VERSION = \"jdk.test.docker.image.version\";\n+\n+    public static String getBaseImageName() {\n+        String name = System.getProperty(BASE_IMAGE_NAME);\n@@ -59,2 +62,2 @@\n-    static String getBaseImageVersion() {\n-        String version = System.getProperty(\"jdk.test.docker.image.version\");\n+    public static String getBaseImageVersion() {\n+        String version = System.getProperty(BASE_IMAGE_VERSION);\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerfileConfig.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+import jdk.test.lib.containers.docker.DockerfileConfig;\n@@ -40,0 +41,2 @@\n+    String dockerImageBaseName;\n+    String dockerImageBaseVersion;\n@@ -127,0 +130,8 @@\n+    public CracBuilder withBaseImage(String name, String tag) {\n+        assertNull(dockerImageBaseName);\n+        assertNull(dockerImageBaseVersion);\n+        this.dockerImageBaseName = name;\n+        this.dockerImageBaseVersion = tag;\n+        return this;\n+    }\n+\n@@ -139,2 +150,2 @@\n-    public void doCheckpoint() throws Exception {\n-        startCheckpoint().waitForCheckpointed();\n+    public void doCheckpoint(String... javaPrefix) throws Exception {\n+        startCheckpoint(javaPrefix).waitForCheckpointed();\n@@ -143,2 +154,3 @@\n-    public CracProcess startCheckpoint() throws Exception {\n-        return startCheckpoint(null);\n+    public CracProcess startCheckpoint(String... javaPrefix) throws Exception {\n+        List<String> list = javaPrefix.length == 0 ? null : Arrays.asList(javaPrefix);\n+        return startCheckpoint(list);\n@@ -168,1 +180,1 @@\n-    private void ensureContainerStarted() throws Exception {\n+    public void ensureContainerStarted() throws Exception {\n@@ -177,1 +189,1 @@\n-            DockerTestUtils.buildJdkDockerImage(dockerImageName, \"Dockerfile-is-ignored\", \"jdk-docker\");\n+            buildDockerImage();\n@@ -188,0 +200,27 @@\n+    private void buildDockerImage() throws Exception {\n+        String previousBaseImageName = null;\n+        String previousBaseImageVersion = null;\n+        try {\n+            previousBaseImageName = System.getProperty(DockerfileConfig.BASE_IMAGE_NAME);\n+            previousBaseImageVersion = System.getProperty(DockerfileConfig.BASE_IMAGE_VERSION);\n+            if (dockerImageBaseName != null) {\n+                System.setProperty(DockerfileConfig.BASE_IMAGE_NAME, dockerImageBaseName);\n+            }\n+            if (dockerImageBaseVersion != null) {\n+                System.setProperty(DockerfileConfig.BASE_IMAGE_VERSION, dockerImageBaseVersion);\n+            }\n+            DockerTestUtils.buildJdkDockerImage(dockerImageName, \"Dockerfile-is-ignored\", \"jdk-docker\");\n+        } finally {\n+            if (previousBaseImageName != null) {\n+                System.setProperty(DockerfileConfig.BASE_IMAGE_NAME, previousBaseImageName);\n+            } else {\n+                System.clearProperty(DockerfileConfig.BASE_IMAGE_NAME);\n+            }\n+            if (previousBaseImageVersion != null) {\n+                System.setProperty(DockerfileConfig.BASE_IMAGE_VERSION, previousBaseImageVersion);\n+            } else {\n+                System.clearProperty(DockerfileConfig.BASE_IMAGE_VERSION);\n+            }\n+        }\n+    }\n+\n@@ -234,2 +273,2 @@\n-    public CracProcess doRestore() throws Exception {\n-        return startRestore().waitForSuccess();\n+    public CracProcess doRestore(String... javaPrefix) throws Exception {\n+        return startRestore(javaPrefix).waitForSuccess();\n@@ -238,2 +277,3 @@\n-    public CracProcess startRestore() throws Exception {\n-         return startRestore(null);\n+    public CracProcess startRestore(String... javaPrefix) throws Exception {\n+         List<String> list = javaPrefix.length == 0 ? null : Arrays.asList(javaPrefix);\n+         return startRestore(list);\n@@ -241,1 +281,2 @@\n-    public CracProcess startRestore(List<String> prefixJava) throws Exception {\n+\n+    public CracProcess startRestore(List<String> javaPrefix) throws Exception {\n@@ -243,1 +284,1 @@\n-        List<String> cmd = prepareCommand(prefixJava);\n+        List<String> cmd = prepareCommand(javaPrefix);\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":53,"deletions":12,"binary":false,"changes":65,"status":"modified"}]}