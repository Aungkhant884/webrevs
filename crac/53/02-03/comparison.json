{"files":[{"patch":"@@ -6603,0 +6603,27 @@\n+\n+bool os::read_bootid(char *dest, size_t size) {\n+  int fd = ::open(\"\/proc\/sys\/kernel\/random\/boot_id\", O_RDONLY);\n+  if (fd < 0) {\n+    perror(\"CRaC: Cannot read system boot ID\");\n+    return false;\n+  }\n+  size_t rd = 0;\n+  bool success = true;\n+  do {\n+    ssize_t r = read(fd, dest + rd, size - rd - 1);\n+    if (r == 0) {\n+      break;\n+    } else if (r < 0) {\n+      if (errno == EINTR) {\n+        continue;\n+      }\n+      success = false;\n+      perror(\"CRaC: Cannot read system boot ID\");\n+      break;\n+    }\n+    rd += r;\n+  } while (rd < size - 1);\n+  dest[size - 1] = '\\0';\n+  ::close(fd);\n+  return success;\n+}\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-jlong os::checkpoint_millis = -1;\n+jlong os::checkpoint_millis;\n@@ -88,0 +88,1 @@\n+char os::checkpoint_bootid[UUID_LENGTH + 1];\n@@ -2035,7 +2036,4 @@\n-  \/\/ If CRaC supports multiple checkpoint - restore - checkpoint - restore cycles\n-  \/\/ we want to record the timestamps only on the first checkpoint, but update\n-  \/\/ the offset after each restore\n-  if (checkpoint_millis < 0) {\n-      checkpoint_millis = javaTimeMillis();\n-      checkpoint_nanos = javaTimeNanos();\n-  }\n+  checkpoint_millis = javaTimeMillis();\n+  checkpoint_nanos = javaTimeNanos();\n+  memset(checkpoint_bootid, 0, sizeof(checkpoint_bootid));\n+  read_bootid(checkpoint_bootid, sizeof(checkpoint_bootid));\n@@ -2045,9 +2043,14 @@\n-  assert(checkpoint_millis >= 0, \"Restore without a checkpoint?\");\n-  long diff_millis = javaTimeMillis() - checkpoint_millis;\n-  \/\/ If the wall clock has gone backwards we won't add it to the offset\n-  if (diff_millis < 0) {\n-    diff_millis = 0;\n-  }\n-  \/\/ Make the javaTimeNanos() on the next line return true monotonic time\n-  javaTimeNanos_offset = 0;\n-  javaTimeNanos_offset = checkpoint_nanos - javaTimeNanos() + diff_millis * 1000000L;\n+  char buf[UUID_LENGTH + 1];\n+  \/\/ We will change the nanotime offset only if this is not the same boot\n+  \/\/ to prevent reducing the accuracy of System.nanoTime() unnecessarily\n+  if (!read_bootid(buf, sizeof(buf)) || strncmp(buf, checkpoint_bootid, UUID_LENGTH) != 0) {\n+    assert(checkpoint_millis >= 0, \"Restore without a checkpoint?\");\n+    long diff_millis = javaTimeMillis() - checkpoint_millis;\n+    \/\/ If the wall clock has gone backwards we won't add it to the offset\n+    if (diff_millis < 0) {\n+      diff_millis = 0;\n+    }\n+    \/\/ Make the javaTimeNanos() on the next line return true monotonic time\n+    javaTimeNanos_offset = 0;\n+    javaTimeNanos_offset = checkpoint_nanos - javaTimeNanos() + diff_millis * 1000000L;\n+  }\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+\/\/ xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n+#define UUID_LENGTH 36\n+\n@@ -135,0 +138,1 @@\n+  static char checkpoint_bootid[UUID_LENGTH + 1];\n@@ -181,0 +185,2 @@\n+  static bool read_bootid(char *dest, size_t size);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.test.lib.Container;\n@@ -63,1 +64,2 @@\n-        CracBuilder builder = new CracBuilder().inDockerImage(imageName);\n+        CracBuilder builder = new CracBuilder();\n+        Path bootIdFile = Files.createTempFile(\"NanoTimeTest-\", \"-boot_id\");\n@@ -65,1 +67,4 @@\n-            builder.doCheckpoint();\n+            \/\/ TODO: use more official image\n+            builder.withBaseImage(\"ghcr.io\/rvansa\/crac-test-base\", \"latest\")\n+                    .dockerOptions(\"-v\", bootIdFile + \":\/fake_boot_id\")\n+                    .inDockerImage(imageName);\n@@ -67,1 +72,10 @@\n-            builder.startRestore(Arrays.asList(\"docker\", \"exec\", CracBuilder.CONTAINER_NAME,\n+            Files.writeString(bootIdFile, \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n+            \/\/ We need to preload the library before checkpoint\n+            builder.doCheckpoint(Container.ENGINE_COMMAND, \"exec\",\n+                    \"-e\", \"LD_PRELOAD=\/opt\/path-mapping-quiet.so\",\n+                    \"-e\", \"PATH_MAPPING=\/proc\/sys\/kernel\/random\/boot_id:\/fake_boot_id\",\n+                    CracBuilder.CONTAINER_NAME, CracBuilder.DOCKER_JAVA);\n+\n+            Files.writeString(bootIdFile, \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\");\n+\n+            builder.doRestore(Container.ENGINE_COMMAND, \"exec\", CracBuilder.CONTAINER_NAME,\n@@ -69,1 +83,1 @@\n-                    CracBuilder.DOCKER_JAVA)).waitForSuccess();\n+                    CracBuilder.DOCKER_JAVA);\n@@ -72,0 +86,1 @@\n+            assertTrue(bootIdFile.toFile().delete());\n","filename":"test\/jdk\/jdk\/crac\/java\/lang\/System\/NanoTimeTest.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -40,2 +40,5 @@\n-    static String getBaseImageName() {\n-        String name = System.getProperty(\"jdk.test.docker.image.name\");\n+    public static final String BASE_IMAGE_NAME = \"jdk.test.docker.image.name\";\n+    public static final String BASE_IMAGE_VERSION = \"jdk.test.docker.image.version\";\n+\n+    public static String getBaseImageName() {\n+        String name = System.getProperty(BASE_IMAGE_NAME);\n@@ -59,2 +62,2 @@\n-    static String getBaseImageVersion() {\n-        String version = System.getProperty(\"jdk.test.docker.image.version\");\n+    public static String getBaseImageVersion() {\n+        String version = System.getProperty(BASE_IMAGE_VERSION);\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerfileConfig.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+import jdk.test.lib.containers.docker.DockerfileConfig;\n@@ -40,0 +41,2 @@\n+    String dockerImageBaseName;\n+    String dockerImageBaseVersion;\n@@ -127,0 +130,8 @@\n+    public CracBuilder withBaseImage(String name, String tag) {\n+        assertNull(dockerImageBaseName);\n+        assertNull(dockerImageBaseVersion);\n+        this.dockerImageBaseName = name;\n+        this.dockerImageBaseVersion = tag;\n+        return this;\n+    }\n+\n@@ -139,2 +150,2 @@\n-    public void doCheckpoint() throws Exception {\n-        startCheckpoint().waitForCheckpointed();\n+    public void doCheckpoint(String... javaPrefix) throws Exception {\n+        startCheckpoint(javaPrefix).waitForCheckpointed();\n@@ -143,2 +154,3 @@\n-    public CracProcess startCheckpoint() throws Exception {\n-        return startCheckpoint(null);\n+    public CracProcess startCheckpoint(String... javaPrefix) throws Exception {\n+        List<String> list = javaPrefix.length == 0 ? null : Arrays.asList(javaPrefix);\n+        return startCheckpoint(list);\n@@ -168,1 +180,1 @@\n-    private void ensureContainerStarted() throws Exception {\n+    public void ensureContainerStarted() throws Exception {\n@@ -177,1 +189,1 @@\n-            DockerTestUtils.buildJdkDockerImage(dockerImageName, \"Dockerfile-is-ignored\", \"jdk-docker\");\n+            buildDockerImage();\n@@ -188,0 +200,27 @@\n+    private void buildDockerImage() throws Exception {\n+        String previousBaseImageName = null;\n+        String previousBaseImageVersion = null;\n+        try {\n+            previousBaseImageName = System.getProperty(DockerfileConfig.BASE_IMAGE_NAME);\n+            previousBaseImageVersion = System.getProperty(DockerfileConfig.BASE_IMAGE_VERSION);\n+            if (dockerImageBaseName != null) {\n+                System.setProperty(DockerfileConfig.BASE_IMAGE_NAME, dockerImageBaseName);\n+            }\n+            if (dockerImageBaseVersion != null) {\n+                System.setProperty(DockerfileConfig.BASE_IMAGE_VERSION, dockerImageBaseVersion);\n+            }\n+            DockerTestUtils.buildJdkDockerImage(dockerImageName, \"Dockerfile-is-ignored\", \"jdk-docker\");\n+        } finally {\n+            if (previousBaseImageName != null) {\n+                System.setProperty(DockerfileConfig.BASE_IMAGE_NAME, previousBaseImageName);\n+            } else {\n+                System.clearProperty(DockerfileConfig.BASE_IMAGE_NAME);\n+            }\n+            if (previousBaseImageVersion != null) {\n+                System.setProperty(DockerfileConfig.BASE_IMAGE_VERSION, previousBaseImageVersion);\n+            } else {\n+                System.clearProperty(DockerfileConfig.BASE_IMAGE_VERSION);\n+            }\n+        }\n+    }\n+\n@@ -234,2 +273,2 @@\n-    public CracProcess doRestore() throws Exception {\n-        return startRestore().waitForSuccess();\n+    public CracProcess doRestore(String... javaPrefix) throws Exception {\n+        return startRestore(javaPrefix).waitForSuccess();\n@@ -238,2 +277,3 @@\n-    public CracProcess startRestore() throws Exception {\n-         return startRestore(null);\n+    public CracProcess startRestore(String... javaPrefix) throws Exception {\n+         List<String> list = javaPrefix.length == 0 ? null : Arrays.asList(javaPrefix);\n+         return startRestore(list);\n@@ -241,1 +281,2 @@\n-    public CracProcess startRestore(List<String> prefixJava) throws Exception {\n+\n+    public CracProcess startRestore(List<String> javaPrefix) throws Exception {\n@@ -243,1 +284,1 @@\n-        List<String> cmd = prepareCommand(prefixJava);\n+        List<String> cmd = prepareCommand(javaPrefix);\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":53,"deletions":12,"binary":false,"changes":65,"status":"modified"}]}