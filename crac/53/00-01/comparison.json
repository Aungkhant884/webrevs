{"files":[{"patch":"@@ -294,1 +294,1 @@\n-    jlong _restore_counter;\n+    jlong _restore_nanos;\n@@ -350,1 +350,1 @@\n-      jlong restore_counter) {\n+      jlong restore_nanos) {\n@@ -353,1 +353,1 @@\n-      restore_counter,\n+      restore_nanos,\n@@ -453,1 +453,1 @@\n-static jlong _restore_start_counter;\n+static jlong _restore_start_nanos;\n@@ -5724,1 +5724,1 @@\n-  if (!_restore_start_counter) {\n+  if (!_restore_start_nanos) {\n@@ -5727,1 +5727,1 @@\n-  return javaTimeNanos() - _restore_start_counter;\n+  return javaTimeNanos() - _restore_start_nanos;\n@@ -6284,1 +6284,3 @@\n-    _restore_start_counter = os::javaTimeNanos();\n+    _restore_start_nanos = os::javaTimeNanos();\n+  } else {\n+    _restore_start_nanos += os::monotonic_time_offset();\n@@ -6435,1 +6437,1 @@\n-  jlong restore_counter = javaTimeNanos();\n+  jlong restore_nanos = javaTimeNanos();\n@@ -6448,1 +6450,1 @@\n-          restore_counter)) {\n+          restore_nanos)) {\n@@ -6547,1 +6549,1 @@\n-  ::_restore_start_counter = hdr->_restore_counter;\n+  ::_restore_start_nanos = hdr->_restore_nanos;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -208,0 +208,3 @@\n+  static jlong monotonic_time_offset() {\n+    return javaTimeNanos_offset;\n+  }\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.crac.management.CRaCMXBean;\n@@ -39,0 +40,2 @@\n+import static jdk.test.lib.Asserts.*;\n+\n@@ -55,4 +58,0 @@\n-    public static void main(String[] args) throws Exception {\n-        CracTest.run(NanoTimeTest.class, args);\n-    }\n-\n@@ -64,1 +63,1 @@\n-        CracBuilder builder = new CracBuilder().inDockerImage(imageName).main(NanoTimeTest.class).args(CracTest.args());\n+        CracBuilder builder = new CracBuilder().inDockerImage(imageName);\n@@ -87,8 +86,5 @@\n-        if (after < before) {\n-            throw new AssertionError(\"After < Before\");\n-        } else if (after > before + TimeUnit.HOURS.toNanos(1)) {\n-            \/\/ Even though we have shifted the monotic offset by a day the difference\n-            \/\/ is adjusted by difference between wall clock time before and after;\n-            \/\/ the difference in monotonic time is considered \"random\"\n-            throw new AssertionError(\"After too late\");\n-        }\n+        assertLTE(before, after, \"After < Before\");\n+        \/\/ Even though we have shifted the monotic offset by a day the difference\n+        \/\/ is adjusted by difference between wall clock time before and after;\n+        \/\/ the difference in monotonic time is considered \"random\"\n+        assertLT(after, before + TimeUnit.HOURS.toNanos(1), \"After too late\");\n@@ -97,3 +93,1 @@\n-        if (boottimeAfter < boottimeBefore + 86_400_000) {\n-            throw new AssertionError(\"Boottime was not changed\");\n-        }\n+        assertGTE(boottimeAfter, boottimeBefore + 86_400_000, \"Boottime was not changed\");\n@@ -101,3 +95,4 @@\n-        if (runtimeMX.getUptime() < 0) {\n-            throw new AssertionError(\"VM Uptime is negative!\");\n-        }\n+        assertGTE(runtimeMX.getUptime(), 0L,\"VM Uptime is negative!\");\n+        CRaCMXBean cracBean = CRaCMXBean.getCRaCMXBean();\n+        assertLT(cracBean.getUptimeSinceRestore(), 60_000L);\n+        assertGTE(cracBean.getUptimeSinceRestore(), 0L);\n","filename":"test\/jdk\/jdk\/crac\/java\/lang\/System\/NanoTimeTest.java","additions":14,"deletions":19,"binary":false,"changes":33,"status":"modified"}]}