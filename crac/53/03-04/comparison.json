{"files":[{"patch":"@@ -2045,1 +2045,6 @@\n-  \/\/ to prevent reducing the accuracy of System.nanoTime() unnecessarily\n+  \/\/ to prevent reducing the accuracy of System.nanoTime() unnecessarily.\n+  \/\/ It is possible that in a real-world case the boot_id does not change\n+  \/\/ (containers keep the boot_id) - but the monotonic time changes. We will\n+  \/\/ only guarantee that the nanotime does not go backwards in that case but\n+  \/\/ won't offset the time based on wall-clock time as this change in monotonic\n+  \/\/ time is likely intentional.\n@@ -2053,1 +2058,2 @@\n-    \/\/ Make the javaTimeNanos() on the next line return true monotonic time\n+    \/\/ javaTimeNanos() call on the second line below uses the *_offset, so we will zero\n+    \/\/ it to make the call return true monotonic time rather than the adjusted value.\n@@ -2056,0 +2062,6 @@\n+  } else {\n+    \/\/ ensure monotonicity even if this looks like the same boot\n+    jlong diff = javaTimeNanos() - checkpoint_nanos;\n+    if (diff < 0) {\n+      javaTimeNanos_offset -= diff;\n+    }\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -49,3 +49,5 @@\n- * @run driver jdk.test.lib.crac.CracTest 0\n- * @run driver jdk.test.lib.crac.CracTest 86400\n- * @run driver jdk.test.lib.crac.CracTest -86400\n+ * @run driver jdk.test.lib.crac.CracTest      0 true\n+ * @run driver jdk.test.lib.crac.CracTest  86400 true\n+ * @run driver jdk.test.lib.crac.CracTest -86400 true\n+ * @run driver jdk.test.lib.crac.CracTest  86400 false\n+ * @run driver jdk.test.lib.crac.CracTest -86400 false\n@@ -56,1 +58,1 @@\n-    @CracTestArg\n+    @CracTestArg(0)\n@@ -59,0 +61,3 @@\n+    @CracTestArg(1)\n+    boolean changeBootId;\n+\n@@ -79,1 +84,3 @@\n-            Files.writeString(bootIdFile, \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\");\n+            if (changeBootId) {\n+                Files.writeString(bootIdFile, \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\");\n+            }\n@@ -102,5 +109,9 @@\n-        \/\/ Even though we have shifted the monotic offset by a day the difference\n-        \/\/ is adjusted by difference between wall clock time before and after;\n-        \/\/ the difference in monotonic time is considered \"random\"\n-        assertLT(after, before + TimeUnit.HOURS.toNanos(1), \"After too late\");\n-\n+        if (changeBootId || monotonicOffset <= 0) {\n+            \/\/ Even though we have shifted the monotic offset by a day the difference\n+            \/\/ is adjusted by difference between wall clock time before and after;\n+            \/\/ the difference in monotonic time is considered \"random\"\n+            assertLT(after, before + TimeUnit.HOURS.toNanos(1), \"After too late\");\n+        } else {\n+            assertGT(after, before + TimeUnit.HOURS.toNanos(1), \"After too early\");\n+            assertLT(after, before + TimeUnit.HOURS.toNanos(25), \"After too late\");\n+        }\n","filename":"test\/jdk\/jdk\/crac\/java\/lang\/System\/NanoTimeTest.java","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"}]}