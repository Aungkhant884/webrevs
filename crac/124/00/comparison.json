{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.reflect.InvocationHandler;\n@@ -32,0 +33,1 @@\n+import java.lang.reflect.Proxy;\n@@ -75,1 +77,1 @@\n-    private final FileChannel channel;\n+    private FileChannel channel;\n@@ -84,0 +86,1 @@\n+    private Object cracResource;\n@@ -85,1 +88,1 @@\n-    @SuppressWarnings({ \"removal\", \"this-escape\" })\n+    @SuppressWarnings(\"this-escape\")\n@@ -106,24 +109,2 @@\n-            channel = FileChannel.open(imagePath, StandardOpenOption.READ);\n-            \/\/ No lambdas during bootstrap\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    if (BasicImageReader.class.getClassLoader() == null) {\n-                        try {\n-                            Class<?> fileChannelImpl =\n-                                Class.forName(\"sun.nio.ch.FileChannelImpl\");\n-                            Method setUninterruptible =\n-                                    fileChannelImpl.getMethod(\"setUninterruptible\");\n-                            setUninterruptible.invoke(channel);\n-                        } catch (ClassNotFoundException |\n-                                 NoSuchMethodException |\n-                                 IllegalAccessException |\n-                                 InvocationTargetException ex) {\n-                            \/\/ fall thru - will only happen on JDK-8 systems where this code\n-                            \/\/ is only used by tools using jrt-fs (non-critical.)\n-                        }\n-                    }\n-\n-                    return null;\n-                }\n-            });\n+            channel = openFileChannel();\n+            registerIfCRaCPresent();\n@@ -178,0 +159,83 @@\n+    \/\/ Since this class must be compatible with JDK 8 and any non-CRaC JDK due to being part of jrtfs.jar\n+    \/\/ we must register this to CRaC via reflection.\n+    private void registerIfCRaCPresent() {\n+        try {\n+            Class<?> priorityClass = Class.forName(\"jdk.internal.crac.Core$Priority\");\n+            Class<?> jdkResourceClass = Class.forName(\"jdk.internal.crac.JDKResource\");\n+            Class<?> resourceClass = Class.forName(\"jdk.crac.Resource\");\n+            Object[] priorities = priorityClass.getEnumConstants();\n+            if (priorities == null) {\n+                return;\n+            }\n+            Object normalPriority = null;\n+            for (int i = 0; i < priorities.length; ++i) {\n+                if (\"NORMAL\".equals(priorities[i].toString())) {\n+                    normalPriority = priorities[i];\n+                }\n+            }\n+            if (normalPriority == null) {\n+                throw new IllegalStateException();\n+            }\n+            try {\n+                Method getContext = priorityClass.getMethod(\"getContext\");\n+                Object ctx = getContext.invoke(normalPriority);\n+                Method register = ctx.getClass().getMethod(\"register\", resourceClass);\n+                cracResource = Proxy.newProxyInstance(null, new Class<?>[] { jdkResourceClass }, new InvocationHandler() {\n+                    @Override\n+                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                        if (\"beforeCheckpoint\".equals(method.getName())) {\n+                            channel.close();\n+                        } else if (\"afterRestore\".equals(method.getName())) {\n+                            if (channel != null) {\n+                                channel = openFileChannel();\n+                            }\n+                        } else if (\"toString\".equals(method.getName())) {\n+                            return BasicImageReader.this.toString();\n+                        } else if (\"hashCode\".equals(method.getName())) {\n+                            return 0;\n+                        } else if (\"equals\".equals(method.getName())) {\n+                            return args[0] == cracResource;\n+                        } else {\n+                            throw new UnsupportedOperationException(method.toString());\n+                        }\n+                        return null;\n+                    }\n+                });\n+                register.invoke(ctx, cracResource);\n+            } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } catch (ClassNotFoundException e) {\n+            \/\/ ignored if class not present\n+        }\n+    }\n+\n+    @SuppressWarnings(\"removal\")\n+    private FileChannel openFileChannel() throws IOException {\n+        FileChannel channel = FileChannel.open(imagePath, StandardOpenOption.READ);\n+        \/\/ No lambdas during bootstrap\n+        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+            @Override\n+            public Void run() {\n+                if (BasicImageReader.class.getClassLoader() == null) {\n+                    try {\n+                        Class<?> fileChannelImpl =\n+                            Class.forName(\"sun.nio.ch.FileChannelImpl\");\n+                        Method setUninterruptible =\n+                                fileChannelImpl.getMethod(\"setUninterruptible\");\n+                        setUninterruptible.invoke(channel);\n+                    } catch (ClassNotFoundException |\n+                             NoSuchMethodException |\n+                             IllegalAccessException |\n+                             InvocationTargetException ex) {\n+                        \/\/ fall thru - will only happen on JDK-8 systems where this code\n+                        \/\/ is only used by tools using jrt-fs (non-critical.)\n+                    }\n+                }\n+\n+                return null;\n+            }\n+        });\n+        return channel;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/BasicImageReader.java","additions":90,"deletions":26,"binary":false,"changes":116,"status":"modified"}]}