{"files":[{"patch":"@@ -2776,0 +2776,1 @@\n+\/\/ This function may be called twice.\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+const char CracSHM::_prefix[] = \"\/tmp\/cracshm.\";\n+\n","filename":"src\/hotspot\/os\/posix\/crac_posix.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+const char CracSHM::_prefix[] = \"\";\n+\n","filename":"src\/hotspot\/os\/windows\/crac_windows.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -354,0 +354,2 @@\n+    VM_Version::crac_restore_finalize();\n+\n@@ -357,0 +359,1 @@\n+    \/\/ VM_Version::crac_restore_finalize() has been already called by VM_Crac::read_shm().\n@@ -364,3 +367,0 @@\n-  \/\/ VM_Crac::read_shm needs to be already called to read RESTORE_SETTABLE parameters.\n-  VM_Version::crac_restore_finalize();\n-\n@@ -518,6 +518,0 @@\n-  struct stat st;\n-  if (fstat(fd, &st)) {\n-    perror(\"fstat (ignoring restore parameters)\");\n-    return false;\n-  }\n-\n@@ -525,3 +519,4 @@\n-  \/\/ The flag is stored separately as all the code of this function below is difficult to implement without the string functions.\n-  bool IgnoreCPUFeatures_local;\n-  if (read(fd, &IgnoreCPUFeatures_local, sizeof(IgnoreCPUFeatures_local)) != sizeof(IgnoreCPUFeatures_local)) {\n+  \/\/ The header is read first as all the code of this function below is difficult to implement without the string functions.\n+  header hdr;\n+  \/\/ FIXME: Fix incomplete reads.\n+  if (read(fd, &hdr, sizeof(hdr)) != sizeof(hdr)) {\n@@ -531,2 +526,8 @@\n-  if (!IgnoreCPUFeatures_local) {\n-    VM_Version::crac_restore_finalize();\n+  if (hdr._ignore_cpu_features)\n+    IgnoreCPUFeatures = hdr._ignore_cpu_features == '+';\n+  VM_Version::crac_restore_finalize();\n+\n+  struct stat st;\n+  if (fstat(fd, &st) || st.st_size < (ssize_t)sizeof(hdr)) {\n+    perror(\"fstat (ignoring restore parameters)\");\n+    return false;\n@@ -535,1 +536,1 @@\n-  size_t contents_size = st.st_size - sizeof(IgnoreCPUFeatures_local);\n+  size_t contents_size = st.st_size - sizeof(hdr);\n@@ -546,2 +547,1 @@\n-  header* hdr = (header*)_raw_content;\n-  char* cursor = _raw_content + sizeof(header);\n+  char* cursor = contents;\n@@ -549,2 +549,2 @@\n-  ::_restore_start_time = hdr->_restore_time;\n-  ::_restore_start_nanos = hdr->_restore_nanos;\n+  ::_restore_start_time = hdr._restore_time;\n+  ::_restore_start_nanos = hdr._restore_nanos;\n@@ -552,1 +552,1 @@\n-  for (int i = 0; i < hdr->_nflags; i++) {\n+  for (int i = 0; i < hdr._nflags; i++) {\n@@ -577,1 +577,1 @@\n-  for (int i = 0; i < hdr->_nprops; i++) {\n+  for (int i = 0; i < hdr._nprops; i++) {\n@@ -584,2 +584,2 @@\n-  char* env_mem = NEW_C_HEAP_ARRAY(char, hdr->_env_memory_size, mtArguments); \/\/ left this pointer unowned, it is freed when process dies\n-  memcpy(env_mem, cursor, hdr->_env_memory_size);\n+  char* env_mem = NEW_C_HEAP_ARRAY(char, hdr._env_memory_size, mtArguments); \/\/ left this pointer unowned, it is freed when process dies\n+  memcpy(env_mem, cursor, hdr._env_memory_size);\n@@ -587,1 +587,1 @@\n-  const char* env_end = env_mem + hdr->_env_memory_size;\n+  const char* env_end = env_mem + hdr._env_memory_size;\n@@ -594,1 +594,1 @@\n-  cursor += hdr->_env_memory_size;\n+  cursor += hdr._env_memory_size;\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+    char _ignore_cpu_features; \/\/ IgnoreCPUFeatures: 0 to keep the checkpointed value, '+' for true, '-' for false\n@@ -118,4 +119,0 @@\n-    if (!write_check_error(fd, (void *)&IgnoreCPUFeatures, sizeof(IgnoreCPUFeatures))) {\n-      return false;\n-    }\n-\n@@ -127,1 +124,2 @@\n-      env_vars_size(os::get_environ())\n+      env_vars_size(os::get_environ()),\n+      0 \/\/ _ignore_cpu_features\n@@ -130,0 +128,6 @@\n+    for (int i = 0; i < num_flags; ++i) {\n+      if ((flags[i][0] == '+' || flags[i][0] == '-') && strcmp(flags[i] + 1, \"IgnoreCPUFeatures\") == 0) {\n+        hdr._ignore_cpu_features = flags[i][0];\n+      }\n+    }\n+\n@@ -221,0 +225,1 @@\n+  static const char _prefix[];\n@@ -225,2 +230,1 @@\n-    const char prefix[] = \"\/tmp\/cracshm.\";\n-    const char *cs = prefix;\n+    const char *cs = _prefix;\n","filename":"src\/hotspot\/share\/runtime\/crac_structs.hpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}