{"files":[{"patch":"@@ -1401,0 +1401,1 @@\n+  \/\/ We are running still before crac_restore_finalize() so we cannot use string functions.\n@@ -1402,1 +1403,2 @@\n-    tty->print_cr(\"CPU features are being kept intact as requested by -XX:CPUFeatures=ignore\");\n+    static const char msg[] = \"CPU features are being kept intact as requested by -XX:CPUFeatures=ignore\";\n+    tty->print_raw(msg, sizeof(msg) - 1);\n@@ -1404,1 +1406,3 @@\n-    tty->print_cr(\"CPU features being used are: -XX:CPUFeatures=\" UINT64_FORMAT_X \",\" UINT64_FORMAT_X, _features, _glibc_features);\n+    static const char prefix[] = \"CPU features being used are: -XX:CPUFeatures=\";\n+    tty->print_raw(prefix, sizeof(prefix) - 1);\n+    nonlibc_tty_print_uint64_comma_uint64(_features, _glibc_features);\n@@ -1406,0 +1410,1 @@\n+  tty->cr();\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-  int shmfd = shm_open(_path, mode, 0600);\n+  \/\/ shm_open() is using glibc string functions, therefore it cannot be used before calling crac_restore_finalize().\n+  int shmfd = ::open(_path, mode, 0600);\n@@ -41,1 +42,1 @@\n-  shm_unlink(_path);\n+  ::unlink(_path);\n@@ -69,1 +70,1 @@\n-#endif\n\\ No newline at end of file\n+#endif\n","filename":"src\/hotspot\/os\/posix\/crac_posix.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -524,2 +524,14 @@\n-  char *contents = NEW_C_HEAP_ARRAY(char, st.st_size, mtInternal);\n-  if (read(fd, contents, st.st_size) < 0) {\n+  \/\/ crac_restore_finalize() may terminate the process if we run on (older) CPU where glibc string functions may crash.\n+  \/\/ The flag is stored separately as all the code of this function below is difficult to implement without the string functions.\n+  bool IgnoreCPUFeatures_local;\n+  if (read(fd, &IgnoreCPUFeatures_local, sizeof(IgnoreCPUFeatures_local)) != sizeof(IgnoreCPUFeatures_local)) {\n+    perror(\"read (ignoring restore parameters)\");\n+    return false;\n+  }\n+  if (!IgnoreCPUFeatures_local) {\n+    VM_Version::crac_restore_finalize();\n+  }\n+\n+  size_t contents_size = st.st_size - sizeof(IgnoreCPUFeatures_local);\n+  char *contents = NEW_C_HEAP_ARRAY(char, contents_size, mtInternal);\n+  if (read(fd, contents, contents_size) < 0) {\n@@ -566,1 +578,1 @@\n-    assert((cursor + strlen(cursor) <= contents + st.st_size), \"property length exceeds shared memory size\");\n+    assert((cursor + strlen(cursor) <= contents + contents_size), \"property length exceeds shared memory size\");\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -118,0 +118,4 @@\n+    if (!write_check_error(fd, (void *)&IgnoreCPUFeatures, sizeof(IgnoreCPUFeatures))) {\n+      return false;\n+    }\n+\n@@ -211,0 +215,6 @@\n+  static void write_dec(char *&d, int id) {\n+    if (!id)\n+      return;\n+    write_dec(d, id \/ 10);\n+    *d++ = '0' + id % 10;\n+  }\n@@ -213,3 +223,6 @@\n-    int shmpathlen = snprintf(_path, sizeof(_path), \"\/crac_%d\", id);\n-    if (shmpathlen < 0 || sizeof(_path) <= (size_t)shmpathlen) {\n-      fprintf(stderr, \"shmpath is too long: %d\\n\", shmpathlen);\n+    assert(id > 0, \"id is expected to be a PID and therefore > 0\");\n+    char *d = _path;\n+    const char prefix[] = \"\/tmp\/cracshm.\";\n+    const char *cs = prefix;\n+    while (*cs) {\n+      *d++ = *cs++;\n@@ -217,0 +230,2 @@\n+    write_dec(d, id);\n+    *d = 0;\n","filename":"src\/hotspot\/share\/runtime\/crac_structs.hpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"}]}