{"files":[{"patch":"@@ -28,0 +28,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+import jdk.internal.crac.JDKResource;\n@@ -248,0 +251,2 @@\n+    private static JDKResource referenceHandlerResource;\n+\n@@ -330,0 +335,19 @@\n+\n+        referenceHandlerResource = new JDKResource() {\n+            @Override\n+            public Priority getPriority() {\n+                return Priority.REFERENCE_HANDLER;\n+            }\n+\n+            @Override\n+            public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+                System.gc();\n+                \/\/ TODO ensure GC done processing all References\n+                while (waitForReferenceProcessing());\n+            }\n+\n+            @Override\n+            public void afterRestore(Context<? extends Resource> context) throws Exception {\n+            }\n+        };\n+        jdk.internal.crac.Core.getJDKContext().register(referenceHandlerResource);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -71,1 +71,15 @@\n-        SEEDER_HOLDER\n+        SEEDER_HOLDER,\n+\n+        \/* Keep next priorities last to ensure handling of pending References\n+         * appeared on earlier priorities. *\/\n+\n+        \/**\n+         * Priority of the\n+         * java.lan.ref.Reference static resource\n+         *\/\n+        REFERENCE_HANDLER,\n+        \/**\n+         * Priority of the\n+         * jdk.internal.ref.CleanerImpl resources\n+         *\/\n+        CLEANERS,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKResource.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -37,0 +37,4 @@\n+import jdk.crac.CheckpointException;\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+import jdk.internal.crac.JDKResource;\n@@ -154,1 +158,1 @@\n-    public static final class PhantomCleanableRef extends PhantomCleanable<Object> {\n+    public static final class PhantomCleanableRef extends PhantomCleanable<Object> implements JDKResource {\n@@ -166,0 +170,1 @@\n+            jdk.internal.crac.Core.getJDKContext().register(this);\n@@ -200,0 +205,17 @@\n+\n+        @Override\n+        public Priority getPriority() {\n+            return Priority.CLEANERS;\n+        }\n+\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            if (refersTo(null)) {\n+                 clean();\n+            }\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/CleanerImpl.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.*;\n+import java.lang.ref.Cleaner;\n+\n+import jdk.crac.*;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracEngine;\n+import jdk.test.lib.crac.CracTest;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build RefQueueTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class RefQueueTest implements CracTest {\n+    private static final Cleaner cleaner = Cleaner.create();\n+\n+    @Override\n+    public void test() throws Exception {\n+        new CracBuilder().engine(CracEngine.SIMULATE)\n+                .startCheckpoint().waitForSuccess();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        File badFile = File.createTempFile(\"jtreg-RefQueueTest\", null);\n+        OutputStream badStream = new FileOutputStream(badFile);\n+        badStream.write('j');\n+        badFile.delete();\n+\n+        \/\/ the cleaner would be able to run right away\n+        cleaner.register(new Object(), () -> {\n+            try {\n+                badStream.close();\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        \/\/ should close the file and only then go to the native checkpoint\n+        Core.checkpointRestore();\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/RefQueueTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}