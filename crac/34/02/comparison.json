{"files":[{"patch":"@@ -59,1 +59,0 @@\n-    private int nWaiters = 0;\n@@ -156,2 +155,0 @@\n-                ++nWaiters;\n-                lock.notifyAll();\n@@ -159,1 +156,0 @@\n-                --nWaiters;\n@@ -211,13 +207,0 @@\n-\n-    \/**\n-     * Blocks calling thread until the specified number of threads are blocked with no reference available.\n-     * @param nWaiters number of threads to wait\n-     * @throws InterruptedException If the wait is interrupted\n-     *\/\n-    public void waitForWaiters(int nWaiters) throws InterruptedException {\n-        synchronized (lock) {\n-            while (head != null || this.nWaiters < nWaiters) {\n-                lock.wait();\n-            }\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/ReferenceQueue.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.crac.CheckpointException;\n@@ -46,1 +47,1 @@\n-public final class CleanerImpl implements Runnable, JDKResource {\n+public final class CleanerImpl implements Runnable {\n@@ -89,1 +90,0 @@\n-        jdk.internal.crac.Core.getJDKContext().register(this);\n@@ -155,14 +155,0 @@\n-    @Override\n-    public Priority getPriority() {\n-        return Priority.CLEANERS;\n-    }\n-\n-    @Override\n-    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n-        queue.waitForWaiters(1);\n-    }\n-\n-    @Override\n-    public void afterRestore(Context<? extends Resource> context) throws Exception {\n-    }\n-\n@@ -172,1 +158,1 @@\n-    public static final class PhantomCleanableRef extends PhantomCleanable<Object> {\n+    public static final class PhantomCleanableRef extends PhantomCleanable<Object> implements JDKResource {\n@@ -184,0 +170,1 @@\n+            jdk.internal.crac.Core.getJDKContext().register(this);\n@@ -218,0 +205,17 @@\n+\n+        @Override\n+        public Priority getPriority() {\n+            return Priority.CLEANERS;\n+        }\n+\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+            if (refersTo(null)) {\n+                 clean();\n+            }\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/CleanerImpl.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"}]}