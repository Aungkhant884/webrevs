[{"commit":{"message":"Add forgotten condition.signal() call"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/RCULock.java"}],"sha":"984cb5d3db6347e8866a1a45ccb37ac9388b99bd"},{"commit":{"message":"Add synchronized context"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"}],"sha":"1116ace699807bbff7b534a7c3db3c5259890951"},{"commit":{"message":"Drop some trailing whitespaces"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/RCULock.java"}],"sha":"91cd4451bb77c6657a408ea6443e4b9172e1bd33"},{"commit":{"message":"Add Core.defaultLock()\n\n* Add RCU lock instance that's registered as JDKResource for\n  synchronization around checkpoint.\n* Allow amend the list of read-critical methods.\n* Use binary search when searching the list of read-critical methods."},"files":[{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/RCULock.java"},{"filename":"src\/java.base\/share\/native\/libjava\/RCULock.c"},{"filename":"test\/jdk\/jdk\/crac\/RCULockTest.java"}],"sha":"6dacbc11e53bdc9319efbc8b7ed10dab620b2079"},{"commit":{"message":"Reuse MethodHandles.lookup()\n\nCo-authored-by: Dan Heidinga <heidinga@redhat.com>"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/RCULock.java"}],"sha":"98732ab94d54aaec2c98c3de393d38ae08fd160f"},{"commit":{"message":"RCU Lock - RW lock with very lightweight read- and heavyweight write-locking"},"files":[{"filename":"make\/data\/hotspot-symbols\/symbols-shared"},{"filename":"src\/hotspot\/share\/include\/jvm.h"},{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/RCULock.java"},{"filename":"src\/java.base\/share\/native\/libjava\/RCULock.c"},{"filename":"test\/jdk\/jdk\/crac\/RCULockTest.java"}],"sha":"37fa1aa64e57bd495ce8ca05ea70a3d959186c33"}]