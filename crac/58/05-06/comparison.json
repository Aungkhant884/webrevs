{"files":[{"patch":"@@ -9,1 +9,0 @@\n-import java.lang.invoke.*;\n@@ -18,1 +17,0 @@\n-import java.util.function.Function;\n@@ -23,1 +21,1 @@\n- * This class represents a RW-lock with extremely lightweight read-locking\n+ * This class represents a non-reentrant RW-lock with extremely lightweight read-locking\n@@ -63,1 +61,1 @@\n-    private boolean synchronize;\n+    private volatile boolean synchronize;\n@@ -69,4 +67,0 @@\n-    private SwitchPoint lockSwitchPoint = new SwitchPoint();\n-    private SwitchPoint unlockSwitchPoint = new SwitchPoint();\n-    private volatile MethodHandle lockImpl;\n-    private volatile MethodHandle unlockImpl;\n@@ -142,1 +136,0 @@\n-        initSwitchPoints();\n@@ -199,19 +192,0 @@\n-    private void initSwitchPoints() {\n-        try {\n-            MethodType voidType = MethodType.methodType(void.class);\n-            MethodHandles.Lookup lookup = MethodHandles.lookup();\n-            MethodHandle noop = lookup.findSpecial(RCULock.class, \"noop\", voidType, RCULock.class);\n-            MethodHandle readLockImpl = lookup.findSpecial(RCULock.class, \"readLockImpl\", voidType, RCULock.class);\n-            MethodHandle readUnlockImpl = lookup.findSpecial(RCULock.class, \"readUnlockImpl\", voidType, RCULock.class);\n-            lockSwitchPoint = new SwitchPoint();\n-            lockImpl = lockSwitchPoint.guardWithTest(noop, readLockImpl);\n-            unlockSwitchPoint = new SwitchPoint();\n-            unlockImpl = lockSwitchPoint.guardWithTest(noop, readUnlockImpl);\n-        } catch (NoSuchMethodException | IllegalAccessException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private void noop() {\n-    }\n-\n@@ -229,1 +203,19 @@\n-            lockImpl.invokeExact(this);\n+            if (synchronize) {\n+                lock.lock();\n+                try {\n+                    \/\/ In case that we have been caught in the critical section\n+                    \/\/ before calling readLock() this thread was added to the list\n+                    \/\/ but won't be removed as we will block.\n+                    \/\/ After continuing in the critical section any subsequent\n+                    \/\/ synchronizeBegin will catch us in again, so we don't need to\n+                    \/\/ do anything.\n+                    removeThread();\n+                    beginCondition.signal();\n+                    \/\/ The lock is released as we are waiting for beginCondition\n+                    while (synchronize) {\n+                        endCondition.awaitUninterruptibly();\n+                    }\n+                } finally {\n+                    lock.unlock();\n+                }\n+            }\n@@ -235,20 +227,0 @@\n-    private void readLockImpl() {\n-        lock.lock();\n-        try {\n-            \/\/ In case that we have been caught in the critical section\n-            \/\/ before calling readLock() this thread was added to the list\n-            \/\/ but won't be removed as we will block.\n-            \/\/ After continuing in the critical section any subsequent\n-            \/\/ synchronizeBegin will catch us in again, so we don't need to\n-            \/\/ do anything.\n-            removeThread();\n-            beginCondition.signal();\n-            \/\/ The lock is released as we are waiting for beginCondition\n-            while (synchronize) {\n-                endCondition.awaitUninterruptibly();\n-            }\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n@@ -261,1 +233,9 @@\n-            unlockImpl.invokeExact(this);\n+            if (synchronize) {\n+                lock.lock();\n+                try {\n+                    removeThread();\n+                    beginCondition.signal();\n+                } finally {\n+                    lock.unlock();\n+                }\n+            }\n@@ -267,10 +247,0 @@\n-    private void readUnlockImpl() {\n-        lock.lock();\n-        try {\n-            removeThread();\n-            beginCondition.signal();\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n@@ -291,1 +261,0 @@\n-        SwitchPoint.invalidateAll(new SwitchPoint[]{ lockSwitchPoint, unlockSwitchPoint });\n@@ -311,1 +280,0 @@\n-        initSwitchPoints();\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/RCULock.java","additions":30,"deletions":62,"binary":false,"changes":92,"status":"modified"}]}