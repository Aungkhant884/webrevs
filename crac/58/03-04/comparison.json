{"files":[{"patch":"@@ -74,5 +74,1 @@\n-        private static JDKResource DEFAULT_LOCK_SYNC = new JDKResource() {\n-            @Override\n-            public JDKResource.Priority getPriority() {\n-                return JDKResource.Priority.NORMAL;\n-            }\n+    }\n@@ -80,4 +76,7 @@\n-            @Override\n-            public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n-                jdk.crac.Core.defaultLock().synchronizeBegin();\n-            }\n+    private static final Context<Resource> globalContext = new OrderedContext();\n+    private static final Context<Resource> synchronizedContext = new OrderedContext() {\n+        @Override\n+        public synchronized void beforeCheckpoint(Context<? extends Resource> context) throws CheckpointException {\n+            defaultLock().synchronizeBegin();\n+            super.beforeCheckpoint(context);\n+        }\n@@ -85,3 +84,6 @@\n-            @Override\n-            public void afterRestore(Context<? extends Resource> context) throws Exception {\n-                jdk.crac.Core.defaultLock().synchronizeEnd();\n+        @Override\n+        public synchronized void afterRestore(Context<? extends Resource> context) throws RestoreException {\n+            try {\n+                super.afterRestore(context);\n+            } finally {\n+                defaultLock().synchronizeEnd();\n@@ -89,4 +91,0 @@\n-        };\n-\n-        static {\n-            jdk.internal.crac.Core.getJDKContext().register(DEFAULT_LOCK_SYNC);\n@@ -94,1 +92,1 @@\n-    }\n+    };\n@@ -96,1 +94,0 @@\n-    private static final Context<Resource> globalContext = new OrderedContext();\n@@ -100,0 +97,1 @@\n+        globalContext.register(synchronizedContext);\n@@ -144,0 +142,12 @@\n+    \/**\n+     * Retrieves a context guarded by {@link #defaultLock()} - the {@link RCULock#synchronizeBegin()}\n+     * will be called before all {@link Resource#beforeCheckpoint(Context)} invocations on resources\n+     * registered in this context, and {@link RCULock#synchronizeEnd()} will be called after all\n+     * invocations of {@link Resource#afterRestore(Context)}.\n+     *\n+     * @return The context synchronized through {@link #defaultLock()}\n+     *\/\n+    public static Context<Resource> getSynchronizedContext() {\n+        return synchronizedContext;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":28,"deletions":18,"binary":false,"changes":46,"status":"modified"}]}