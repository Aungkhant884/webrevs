{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2017, 2021, Azul Systems, Inc. All rights reserved.\n+ * Copyright (c) 2017, 2022, Azul Systems, Inc. All rights reserved.\n@@ -294,0 +294,1 @@\n+    int _env_memory_size;\n@@ -318,0 +319,8 @@\n+  static int env_vars_size(const char* const * env) {\n+    int len = 0;\n+    for (; *env; ++env) {\n+      len += strlen(*env) + 1;\n+    }\n+    return len;\n+  }\n+\n@@ -343,1 +352,2 @@\n-      system_props_length(props)\n+      system_props_length(props),\n+      env_vars_size(environ)\n@@ -361,0 +371,8 @@\n+    \/\/ Write env vars\n+    for (char** env = environ; *env; ++env)\n+    {\n+      if (!write_check_error(fd, *env, strlen(*env) + 1)) {\n+        return false;\n+      }\n+    }\n+\n@@ -6444,0 +6462,14 @@\n+  {\n+    char* env_mem = NEW_C_HEAP_ARRAY(char, hdr->_env_memory_size, mtArguments); \/\/ left this pointer unowned, it is freed when process dies\n+    memcpy(env_mem, cursor, hdr->_env_memory_size);\n+\n+    const char* env_end = env_mem + hdr->_env_memory_size;\n+    while (env_mem < env_end) {\n+      const size_t s = strlen(env_mem) + 1;\n+      assert(env_mem + s <= env_end, \"env vars exceed memory buffer, maybe ending 0 is lost\");\n+      putenv(env_mem);\n+      env_mem += s;\n+    }\n+  }\n+  cursor += hdr->_env_memory_size;\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n@@ -57,0 +58,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+\n@@ -63,2 +67,21 @@\n-    private static final HashMap<Variable,Value> theEnvironment;\n-    private static final Map<String,String> theUnmodifiableEnvironment;\n+    private static class CracSubscriber\n+            implements jdk.internal.crac.JDKResource {\n+\n+        @Override\n+        public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+        }\n+\n+        @Override\n+        public void afterRestore(Context<? extends Resource> context) throws Exception {\n+            ProcessEnvironment.updateEnvironment();\n+        }\n+\n+        @Override\n+        public Priority getPriority() {\n+            return Priority.NORMAL;\n+        }\n+    }\n+\n+    private static HashMap<Variable,Value> theEnvironment;\n+    private static Map<String,String> theUnmodifiableEnvironment;\n+    private static final CracSubscriber theCracSubscriber;\n@@ -81,0 +104,3 @@\n+\n+        theCracSubscriber = new CracSubscriber();\n+        jdk.internal.crac.Core.getJDKContext().register(theCracSubscriber);\n@@ -105,0 +131,14 @@\n+    static private void updateEnvironment() {\n+        byte[][] environ = environ();\n+        \/\/ Read environment variables back to front,\n+        \/\/ so that earlier variables override later ones.\n+        for (int i = environ.length-1; i > 0; i-=2) {\n+            theEnvironment.put(Variable.valueOf(environ[i-1]),\n+                               Value.valueOf(environ[i]));\n+        }\n+\n+        theUnmodifiableEnvironment\n+            = Collections.unmodifiableMap\n+            (new StringEnvironment(theEnvironment));\n+    }\n+\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Azul Systems, 385 Moffett Park Drive, Suite 115, Sunnyvale\n+ * CA 94089 USA or visit www.azul.com if you need additional information or\n+ * have any questions.\n+ *\/\n+\n+import jdk.crac.*;\n+\n+public class RestoreEnvironmentTest {\n+    static public void main(String[] args) throws Exception {\n+        {\n+            String testVarName = \"RESTORE_ENVIRONMENT_TEST_VAR\";\n+\n+            for (int i = 0; i < 3; ++i) {\n+                var testVar = java.lang.System.getenv(testVarName + i);\n+                System.out.println(\"(before checkpoint) \" + testVarName + i + \"=\" + testVar);\n+            }\n+\n+            jdk.crac.Core.checkpointRestore();\n+\n+            System.out.print(\"(after restore) \");\n+            for (int i = 0; i < 3; ++i) {\n+                var testVar = java.lang.System.getenv(testVarName + i);\n+                System.out.print(testVarName + i + \"=\" + testVar + \";\");\n+            }\n+        }\n+        System.out.println();\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/RestoreEnvironmentTest.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+#!\/bin\/sh\n+\n+# Copyright 2019-2021 Azul Systems, Inc.  All Rights Reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it under\n+# the terms of the GNU General Public License version 2 only, as published by\n+# the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n+# A PARTICULAR PURPOSE.  See the GNU General Public License version 2 for more\n+# details (a copy is included in the LICENSE file that accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version 2\n+# along with this work; if not, write to the Free Software Foundation, Inc.,\n+# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Azul Systems, 385 Moffett Park Drive, Suite 115, Sunnyvale,\n+# CA 94089 USA or visit www.azul.com if you need additional information or\n+# have any questions.\n+\n+##\n+## @test RestoreEnvironmentTest.sh\n+## @summary the test checks that actual environment variables are propagated into a restored process.\n+## @compile RestoreEnvironmentTest.java\n+## @run shell\/timeout=120 RestoreEnvironmentTest.sh\n+##\n+\n+set -x\n+\n+CHECKPOINT_DIR=cr_dir\n+BEFORE=BeforeCheckpoint\n+AFTER=AfterRestore\n+NEWVAL=NewValue\n+\n+echo CHECKPOINT_DIR=$CHECKPOINT_DIR\n+rm -rf CHECKPOINT_DIR\n+\n+echo === Checkpointing...\n+export RESTORE_ENVIRONMENT_TEST_VAR0=$BEFORE\n+export RESTORE_ENVIRONMENT_TEST_VAR1=$BEFORE\n+${TESTJAVA}\/bin\/java -cp ${TESTCLASSPATH} -XX:CRaCCheckpointTo=$CHECKPOINT_DIR RestoreEnvironmentTest\n+\n+echo === Restoring...\n+export RESTORE_ENVIRONMENT_TEST_VAR1=$AFTER\n+RESULT=`RESTORE_ENVIRONMENT_TEST_VAR2=$NEWVAL ${TESTJAVA}\/bin\/java -cp ${TESTCLASSPATH} -XX:CRaCRestoreFrom=$CHECKPOINT_DIR`\n+\n+EXPECTED=\"(after restore) RESTORE_ENVIRONMENT_TEST_VAR0=$BEFORE;RESTORE_ENVIRONMENT_TEST_VAR1=$AFTER;RESTORE_ENVIRONMENT_TEST_VAR2=$NEWVAL;\"\n+echo RESULT=$RESULT\n+echo EXPECTED=$EXPECTED\n+if [ \"$EXPECTED\" != \"$RESULT\" ]; then\n+    echo FAILED\n+    exit 1\n+fi\n+echo PASSED\n","filename":"test\/jdk\/jdk\/crac\/RestoreEnvironmentTest.sh","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}