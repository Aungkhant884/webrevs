{"files":[{"patch":"@@ -97,1 +97,1 @@\n-            SharedSecrets.getJavaLangRefAccess().register(CleanerFactory.cleaner(), cs, newContext, null);\n+            SharedSecrets.getJavaLangRefAccess().cleanerRegisterWithPriority(CleanerFactory.cleaner(), cs, newContext, null);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-     * Register an object and object and also register the underlying Reference with a CRaC priority.\n+     * Register an object and action and also register the underlying Reference with a CRaC priority.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Cleaner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -336,1 +336,1 @@\n-            public java.lang.ref.Cleaner.Cleanable register(java.lang.ref.Cleaner cleaner, Object obj, Runnable action, JDKResource.Priority priority) {\n+            public java.lang.ref.Cleaner.Cleanable cleanerRegisterWithPriority(java.lang.ref.Cleaner cleaner, Object obj, Runnable action, JDKResource.Priority priority) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-     * Registers an object and an action in a cleaner, with action synhronized with a CRaC priority.\n+     * Calls package-private {@link Cleaner#register(Object, Runnable, JDKResource.Priority)}.\n@@ -54,1 +54,1 @@\n-    Cleaner.Cleanable register(Cleaner cleaner, Object obj, Runnable action, JDKResource.Priority priority);\n+    Cleaner.Cleanable cleanerRegisterWithPriority(Cleaner cleaner, Object obj, Runnable action, JDKResource.Priority priority);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangRefAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}