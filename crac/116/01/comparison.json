{"files":[{"patch":"@@ -40,0 +40,1 @@\n+#include \"utilities\/decoder.hpp\"\n@@ -312,0 +313,1 @@\n+  Decoder::before_checkpoint();\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,0 +125,9 @@\n+void Decoder::before_checkpoint() {\n+  MutexLocker locker(shared_decoder_lock(), Mutex::_no_safepoint_check_flag);\n+  if (_shared_decoder != nullptr) {\n+    delete _shared_decoder;\n+    _shared_decoder = nullptr;\n+  }\n+  guarantee(_error_handler_decoder == nullptr, \"Error handler decoder should not be present\");\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/decoder.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -125,0 +125,2 @@\n+  static void before_checkpoint();\n+\n","filename":"src\/hotspot\/share\/utilities\/decoder.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.crac.Core;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.crac.CracBuilder;\n+import jdk.test.lib.crac.CracTest;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static jdk.test.lib.Asserts.assertEquals;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @requires (os.family == \"linux\")\n+ * @build SharedLibraryTest\n+ * @run driver jdk.test.lib.crac.CracTest\n+ *\/\n+public class SharedLibraryTest implements CracTest {\n+    @Override\n+    public void test() throws Exception {\n+        CracBuilder builder = new CracBuilder()\n+                .javaOption(\"test.jdk\", Utils.TEST_JDK);\n+        builder.copy().vmOption(\"-XX:NativeMemoryTracking=detail\").doCheckpoint();\n+        builder.doRestore();\n+    }\n+\n+    @Override\n+    public void exec() throws Exception {\n+        checkNativeMemory();\n+        Core.checkpointRestore();\n+        checkNativeMemory();\n+    }\n+\n+    private static void checkNativeMemory() throws InterruptedException, IOException {\n+        String jcmd = Path.of(Utils.TEST_JDK, \"bin\", \"jcmd\").toString();\n+        assertEquals(0, new ProcessBuilder().inheritIO().redirectOutput(ProcessBuilder.Redirect.DISCARD).command(\n+                jcmd, String.valueOf(ProcessHandle.current().pid()), \"VM.native_memory\", \"detail\"\n+        ).start().waitFor());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/SharedLibraryTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}