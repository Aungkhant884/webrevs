{"files":[{"patch":"@@ -46,6 +46,20 @@\n-     * Gets the global {@code Context} for checkpoint\/restore notifications.\n-     * Order of invoking {@link Resource#beforeCheckpoint(Context)} is the reverse\n-     * of the order of {@link Context#register(Resource) registration}.\n-     * Order of invoking {@link Resource#afterRestore(Context)} is the reverse\n-     * of the order of {@link Resource#beforeCheckpoint(Context) checkpoint notification},\n-     * hence the same as the order of {@link Context#register(Resource) registration}.\n+     * Gets the global {@code Context} for checkpoint\/restore notifications\n+     * with the following properties:\n+     * <li>The context maintains a weak reference to registered {@link jdk.crac.Resource}.\n+     *     Therefore, it is important for the registrar to keep another strong\n+     *     reference to the resource - otherwise the garbage collector\n+     *     is free to trash the resource and notifications on this resource\n+     *     will not be invoked.\n+     * <li>Order of invoking {@link jdk.crac.Resource#beforeCheckpoint(jdk.crac.Context)} is\n+     *     the reverse of the order of {@linkplain jdk.crac.Context#register(jdk.crac.Resource)\n+     *     registration}.\n+     * <li>Order of invoking {@link jdk.crac.Resource#afterRestore(jdk.crac.Context)} is\n+     *     the reverse of the order of {@linkplain jdk.crac.Resource#beforeCheckpoint(jdk.crac.Context)\n+     *     checkpoint notification}, hence the same as the order of\n+     *     {@link jdk.crac.Context#register(jdk.crac.Resource) registration}.\n+     * <li>{@code Resource} is always notified of checkpoint or restore,\n+     *     regardless of whether other {@code Resource} notifications have\n+     *     thrown an exception or not,\n+     * <li>When an exception is thrown during notification it is caught by\n+     *     the {@code Context} and is suppressed by a {@link jdk.crac.CheckpointException}\n+     *     or {@link jdk.crac.RestoreException}, depends on the throwing method.\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -70,23 +70,0 @@\n- * <h2>Global Context Properties<\/h2>\n- * Java Runtime maintains the global {@code Context} with following properties.\n- * An implementor is encouraged to define {@code Context} with the properties of the global {@code Context}.\n- * <ul>\n- * <li>The {@code Context} maintains a weak reference to registered {@code Resource}.\n- * <\/li>\n- * <li>Order of checkpoint notification is the reverse order of registration.\n- * Restore notification order is the reverse of checkpoint one, that is, forward order of registration.\n- * <\/li>\n- * <li>For single {@code Resource} registered in this {@code Context}:\n- * <ul>\n- *   <li>{@code Resource} is always notified of checkpoint, regardless of other {@code Resource} notifications have thrown an exception or not,\n- *   <\/li>\n- *   <li>{@code Resource} is always notified of restore, regardless of its checkpoint or others' restore notification have thrown an exception or not.\n- *   <\/li>\n- *   <li>When an exception is thrown during notificaion, it is caught by the {@code Context} and is suppressed by a {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n- *   <\/li>\n- *   <li>When the {@code Resource} is a {@code Context} and it throws {@code CheckpointException} or {@code RestoreException}, exceptions suppressed by the original exception are suppressed by another {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n- *   <\/li>\n- * <\/ul>\n- * <li>All exceptions thrown by {@code Resource} are suppressed by {@code CheckpointException} or {@code RestoreException} thrown by the {@code Context}.\n- * <\/li>\n- * <\/ul>\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/package-info.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -99,6 +99,20 @@\n-     * Gets the global {@code Context} for checkpoint\/restore notifications.\n-     * Order of invoking {@link Resource#beforeCheckpoint(Context)} is the reverse\n-     * of the order of {@link Context#register(Resource) registration}.\n-     * Order of invoking {@link Resource#afterRestore(Context)} is the reverse\n-     * of the order of {@link Resource#beforeCheckpoint(Context) checkpoint notification},\n-     * hence the same as the order of {@link Context#register(Resource) registration}.\n+     * Gets the global {@code Context} for checkpoint\/restore notifications\n+     * with the following properties:\n+     * <li>The context maintains a weak reference to registered {@link Resource}.\n+     *     Therefore, it is important for the registrar to keep another strong\n+     *     reference to the resource - otherwise the garbage collector\n+     *     is free to trash the resource and notifications on this resource\n+     *     will not be invoked.\n+     * <li>Order of invoking {@link Resource#beforeCheckpoint(Context)} is\n+     *     the reverse of the order of {@linkplain Context#register(Resource)\n+     *     registration}.\n+     * <li>Order of invoking {@link Resource#afterRestore(Context)} is\n+     *     the reverse of the order of {@linkplain Resource#beforeCheckpoint(Context)\n+     *     checkpoint notification}, hence the same as the order of\n+     *     {@link Context#register(Resource) registration}.\n+     * <li>{@code Resource} is always notified of checkpoint or restore,\n+     *     regardless of whether other {@code Resource} notifications have\n+     *     thrown an exception or not,\n+     * <li>When an exception is thrown during notification it is caught by\n+     *     the {@code Context} and is suppressed by a {@link CheckpointException}\n+     *     or {@link RestoreException}, depends on the throwing method.\n@@ -116,0 +130,9 @@\n+    \/**\n+     * Checks if we are currently invoking {@link Resource#afterRestore(Context)}\n+     * notifications (whether this is after a successful checkpoint or\n+     * compensating for a failed one). Calling this from a different thread\n+     * than the one performing the restore is subject to races.\n+     *\n+     * @return True if invoking <code>afterRestore<\/code>, false if the C\/R\n+     * is not in progress, or it is yet in the checkpoint phase.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    protected List<Resource> restoreQ = null;\n+    private List<Resource> restoreQ = null;\n@@ -35,7 +35,10 @@\n-    protected static <E extends Exception> void recordExceptions(E source) {\n-        Throwable[] suppressed = source.getSuppressed();\n-        if (suppressed.length == 0) {\n-            Core.recordException(source);\n-        }\n-        for (Throwable t : suppressed) {\n-            Core.recordException(t);\n+    protected static <E extends Exception> void recordExceptions(E exception) {\n+        assert exception instanceof CheckpointException || exception instanceof RestoreException;\n+        Throwable[] suppressed = exception.getSuppressed();\n+        if (suppressed.length == 0 || exception.getMessage() != null) {\n+            Core.recordException(exception);\n+        } else {\n+            \/\/ the exception is only wrapping actual ones...\n+            for (Throwable t : suppressed) {\n+                Core.recordException(t);\n+            }\n@@ -83,5 +86,0 @@\n-        restoreQ = null;\n-        runAfterRestore(queue);\n-    }\n-\n-    private void runAfterRestore(List<Resource> queue) {\n@@ -91,0 +89,1 @@\n+        restoreQ = null;\n@@ -92,12 +91,1 @@\n-            LoggerContainer.debug(\"afterRestore {0}\", r);\n-            try {\n-                r.afterRestore(semanticContext());\n-            } catch (RestoreException e) {\n-                \/\/ Print error early in case the restore process gets stuck\n-                LoggerContainer.error(e, \"Failed to restore \" + r);\n-                recordExceptions(e);\n-            } catch (Exception e) {\n-                \/\/ Print error early in case the restore process gets stuck\n-                LoggerContainer.error(e, \"Failed to restore \" + r);\n-                Core.recordException(e);\n-            }\n+            invokeAfterRestore(r);\n@@ -106,0 +94,16 @@\n+\n+    protected void invokeAfterRestore(Resource resource) {\n+        LoggerContainer.debug(\"afterRestore {0}\", resource);\n+        try {\n+            resource.afterRestore(semanticContext());\n+        } catch (RestoreException e) {\n+            \/\/ Print error early in case the restore process gets stuck\n+            LoggerContainer.error(e, \"Failed to restore \" + resource);\n+            recordExceptions(e);\n+        } catch (Exception e) {\n+            \/\/ Print error early in case the restore process gets stuck\n+            LoggerContainer.error(e, \"Failed to restore \" + resource);\n+            Core.recordException(e);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java","additions":29,"deletions":25,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -1,22 +1,24 @@\n-\/\/ Copyright 2023 Azul Systems, Inc.\n-\/\/\n-\/\/ Redistribution and use in source and binary forms, with or without\n-\/\/ modification, are permitted provided that the following conditions are met:\n-\/\/\n-\/\/ 1. Redistributions of source code must retain the above copyright notice,\n-\/\/ this list of conditions and the following disclaimer.\n-\/\/\n-\/\/ 2. Redistributions in binary form must reproduce the above copyright notice,\n-\/\/ this list of conditions and the following disclaimer in the documentation\n-\/\/ and\/or other materials provided with the distribution.\n-\/\/\n-\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-\/\/ ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n-\/\/ LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n-\/\/ CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n-\/\/ SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n-\/\/ INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n-\/\/ CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n-\/\/ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n-\/\/ POSSIBILITY OF SUCH DAMAGE.\n-\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java","additions":24,"deletions":22,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n- * If the global {@code Context} throws an exception during checkpoint notification then restore notificaion starts immediately without the image creation.\n+ * If the global {@code Context} throws an exception during checkpoint notification then restore notification starts immediately without the image creation.\n@@ -70,23 +70,0 @@\n- * <h2>Global Context Properties<\/h2>\n- * Java Runtime maintains the global {@code Context} with following properties.\n- * An implementor is encouraged to define {@code Context} with the properties of the global {@code Context}.\n- * <ul>\n- * <li>The {@code Context} maintains a weak reference to registered {@code Resource}.\n- * <\/li>\n- * <li>Order of checkpoint notification is the reverse order of registration.\n- * Restore notification order is the reverse of checkpoint one, that is, forward order of registration.\n- * <\/li>\n- * <li>For single {@code Resource} registered in this {@code Context}:\n- * <ul>\n- *   <li>{@code Resource} is always notified of checkpoint, regardless of other {@code Resource} notifications have thrown an exception or not,\n- *   <\/li>\n- *   <li>{@code Resource} is always notified of restore, regardless of its checkpoint or others' restore notification have thrown an exception or not.\n- *   <\/li>\n- *   <li>When an exception is thrown during notificaion, it is caught by the {@code Context} and is suppressed by a {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n- *   <\/li>\n- *   <li>When the {@code Resource} is a {@code Context} and it throws {@code CheckpointException} or {@code RestoreException}, exceptions suppressed by the original exception are suppressed by another {@code CheckpointException} or {@code RestoreException}, depends on the throwing method.\n- *   <\/li>\n- * <\/ul>\n- * <li>All exceptions thrown by {@code Resource} are suppressed by {@code CheckpointException} or {@code RestoreException} thrown by the {@code Context}.\n- * <\/li>\n- * <\/ul>\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/package-info.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"}]}