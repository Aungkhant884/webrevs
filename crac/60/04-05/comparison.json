{"files":[{"patch":"@@ -50,3 +50,6 @@\n-     *     Therefore, it is important for the registrar to keep another strong\n-     *     reference to the resource - otherwise the garbage collector\n-     *     is free to trash the resource and notifications on this resource\n+     *     The lifecycle of the resource should be bound to the lifecycle of\n+     *     the component (registrar) through a strong reference to the resource\n+     *     (if these are not the same instance). That way the resource receives\n+     *     notifications only until the component ceases to exist.\n+     *     When the registrar does not keep a strong reference to the resource\n+     *     the garbage collector is free to trash the resource and notifications\n","filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -103,3 +103,6 @@\n-     *     Therefore, it is important for the registrar to keep another strong\n-     *     reference to the resource - otherwise the garbage collector\n-     *     is free to trash the resource and notifications on this resource\n+     *     The lifecycle of the resource should be bound to the lifecycle of\n+     *     the component (registrar) through a strong reference to the resource\n+     *     (if these are not the same instance). That way the resource receives\n+     *     notifications only until the component ceases to exist.\n+     *     When the registrar does not keep a strong reference to the resource\n+     *     the garbage collector is free to trash the resource and notifications\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -55,2 +55,1 @@\n-        \/\/ Resource.afterRestore is invoked even if Resource.beforeCheckpoint fails\n-        restoreQ.add(resource);\n+        recordResource(resource);\n@@ -58,1 +57,1 @@\n-            resource.beforeCheckpoint(semanticContext());\n+            resource.beforeCheckpoint(this);\n@@ -66,2 +65,3 @@\n-    protected Context<? extends Resource> semanticContext() {\n-        return this;\n+    protected void recordResource(Resource resource) {\n+        \/\/ Resource.afterRestore is invoked even if Resource.beforeCheckpoint fails\n+        restoreQ.add(resource);\n@@ -98,1 +98,1 @@\n-            resource.afterRestore(semanticContext());\n+            resource.afterRestore(this);\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.crac.LoggerContainer;\n@@ -98,0 +99,2 @@\n+        \/\/ This method differs from the super method only by the\n+        \/\/ parameter to the beforeCheckpoint method\n@@ -99,2 +102,28 @@\n-        protected Context<? extends Resource> semanticContext() {\n-            return PriorityContext.this;\n+        protected void invokeBeforeCheckpoint(Resource resource) {\n+            LoggerContainer.debug(\"beforeCheckpoint {0}\", resource);\n+            recordResource(resource);\n+            try {\n+                resource.beforeCheckpoint(PriorityContext.this);\n+            } catch (CheckpointException e) {\n+                recordExceptions(e);\n+            } catch (Exception e) {\n+                Core.recordException(e);\n+            }\n+        }\n+\n+        \/\/ This method differs from the super method only by the\n+        \/\/ parameter to the afterRestore method\n+        @Override\n+        protected void invokeAfterRestore(Resource resource) {\n+            LoggerContainer.debug(\"afterRestore {0}\", resource);\n+            try {\n+                resource.afterRestore(PriorityContext.this);\n+            } catch (RestoreException e) {\n+                \/\/ Print error early in case the restore process gets stuck\n+                LoggerContainer.error(e, \"Failed to restore \" + resource);\n+                recordExceptions(e);\n+            } catch (Exception e) {\n+                \/\/ Print error early in case the restore process gets stuck\n+                LoggerContainer.error(e, \"Failed to restore \" + resource);\n+                Core.recordException(e);\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"}]}