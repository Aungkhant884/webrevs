[{"commit":{"message":"Revert API change, force blocking registration"},"files":[{"filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/CheckpointException.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/RestoreException.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/OrderedContext.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java"},{"filename":"test\/jdk\/jdk\/crac\/ContextOrderTest.java"}],"sha":"868baeaeeb5d26a1f579496e5e58414666299b94"},{"commit":{"message":"Add the missing javadoc"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"}],"sha":"729a45375f77847eac7ff6f416570d58012b0581"},{"commit":{"message":"Updated Global Context javadoc, removed semanticContext()"},"files":[{"filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java"}],"sha":"53ccc062d1ec41247e10c89f14d97ddef1312835"},{"commit":{"message":"Fix javadoc build"},"files":[{"filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"}],"sha":"33226eba4ca76223a8449851fdd0617743a777d9"},{"commit":{"message":"Fix javadoc and minor refactoring"},"files":[{"filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/javax\/crac\/package-info.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/package-info.java"}],"sha":"eafdb84130046d05582ab63a8b9fa3a246cd2fd2"},{"commit":{"message":"Merge branch 'crac' into context_order"},"files":[],"sha":"e95bb71c4826809d952121d1608df0927b5fb1cf"},{"commit":{"message":"More fine-grained synchronization"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/OrderedContext.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java"}],"sha":"1f2c7b39638d93a279c8c2960c482b8422a8ca29"},{"commit":{"message":"Rework context ordering (round 2)\n\n* call afterRestore even if beforeCheckpoint throws\n* registering resource in previous\/running context does not trigger exception immediatelly\n** instead this will be one of the recorded exceptions and the resource has a chance to fire next time\n* we don't guarantee threads not deadlocking when trying to register a resource, though"},"files":[{"filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/javax\/crac\/Resource.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Resource.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/OrderedContext.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/PriorityContext.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKContext.java"},{"filename":"test\/jdk\/jdk\/crac\/ContextOrderTest.java"},{"filename":"test\/jdk\/jdk\/crac\/LazyProps.java"},{"filename":"test\/jdk\/jdk\/crac\/logging.properties"},{"filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java"}],"sha":"f7412f4b2a0d18dd3bee68c53d8476b3820c4b4b"},{"commit":{"message":"Fix docs & package"},"files":[{"filename":"src\/java.base\/share\/classes\/javax\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/javax\/crac\/Resource.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Core.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Resource.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/LoggerContainer.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/jar\/PersistentJarFile.java"}],"sha":"fb7d4ea727cceaf955ed1b0a10a481128c75e301"},{"commit":{"message":"Fix ordering of invocation on Resources\n\n* When Context.beforeCheckpoint throws, invoke Context.afterRestore\n  anyway (otherwise some resources stay in suspended state).\n* Handle Resource.beforeCheckpoint triggering a registration of another\n  resource\n** Do not cause deadlock when registering from another thread\n** Global resource can register JDKResource\n** JDKResource can register resource with higher priority\n** Other registrations are prohibited"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/Resource.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/AbstractContextImpl.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/crac\/impl\/OrderedContext.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKContext.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/jar\/PersistentJarFile.java"},{"filename":"test\/jdk\/jdk\/crac\/ContextOrderTest.java"},{"filename":"test\/jdk\/jdk\/crac\/ResourceTest.java"}],"sha":"e801310e8b5918d195b64ca4ec1448122f773428"}]