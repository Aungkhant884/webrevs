{"files":[{"patch":"@@ -676,50 +676,0 @@\n-void VM_Version::CPUFeatures_init() {\n-  uint64_t       features_expected =   CPU_MAX - 1;\n-  uint64_t glibc_features_expected = GLIBC_MAX - 1;\n-#if !INCLUDE_CPU_FEATURE_ACTIVE && !INCLUDE_LD_SO_LIST_DIAGNOSTICS\n-        features_expected =       _features;\n-  glibc_features_expected = _glibc_features;\n-#endif\n-  assert(!CPUFeatures == FLAG_IS_DEFAULT(CPUFeatures), \"CPUFeatures parsing\");\n-  uint64_t GLIBCFeatures_x64;\n-  uint64_t   CPUFeatures_x64 = CPUFeatures_parse(GLIBCFeatures_x64);\n-  uint64_t       features_missing =   CPUFeatures_x64 & ~      _features;\n-  uint64_t glibc_features_missing = GLIBCFeatures_x64 & ~_glibc_features;\n-  if (features_missing || glibc_features_missing) {\n-    char buf[512];\n-    int res = jio_snprintf(\n-\t\tbuf, sizeof(buf),\n-\t\t\"Specified -XX:CPUFeatures=0x\" UINT64_FORMAT_X \",0x\" UINT64_FORMAT_X\n-\t\t\"; this machine's CPU features are 0x\" UINT64_FORMAT_X \",0x\" UINT64_FORMAT_X\n-\t\t\"; missing features of this CPU are 0x\" UINT64_FORMAT_X \",0x\" UINT64_FORMAT_X \" \",\n-\t\tCPUFeatures_x64, GLIBCFeatures_x64,\n-\t\t_features, _glibc_features,\n-\t\tfeatures_missing, glibc_features_missing);\n-    assert(res > 0, \"not enough temporary space allocated\");\n-    \/\/ insert_features_names() does crash for undefined too high-numbered features.\n-    insert_features_names(buf + res , sizeof(buf) - res ,       features_missing & (  CPU_MAX - 1));\n-    int res2 = res + strlen(buf + res);\n-    insert_features_names(buf + res2, sizeof(buf) - res2, glibc_features_missing & (GLIBC_MAX - 1));\n-    if (buf[res]) {\n-      assert(buf[res] == ',', \"unexpeced VM_Version::insert_features_names separator instead of ','\");\n-      buf[res] = '=';\n-    }\n-    vm_exit_during_initialization(buf);\n-  }\n-\t_features =   CPUFeatures_x64;\n-  _glibc_features = GLIBCFeatures_x64;\n-\n-  if (ShowCPUFeatures) {\n-    if (ignore_glibc_not_using) {\n-      tty->print_cr(\"CPU features are being kept intact as requested by -XX:CPUFeatures=ignore\");\n-    } else {\n-      tty->print_cr(\"CPU features being used are: -XX:CPUFeatures=0x\" UINT64_FORMAT_X \",0x\" UINT64_FORMAT_X, _features, _glibc_features);\n-    }\n-  }\n-\n-  if (!ignore_glibc_not_using) {\n-    glibc_not_using(      features_expected & ~      _features,\n-                    glibc_features_expected & ~_glibc_features);\n-  }\n-}\n-\n@@ -1178,12 +1128,12 @@\n-#define GLIBC_DISABLE2(kind, hotspot, libc) do {                                                                                    \\\n-    assert(!(PASTE_TOKENS(disable_handled_, kind) & PASTE_TOKENS3(kind, _, hotspot)), \"already used \" STR(kind) \"_\" STR(hotspot) ); \\\n-    DEBUG_ONLY(PASTE_TOKENS(disable_handled_, kind) |= PASTE_TOKENS3(kind, _, hotspot));                                            \\\n-    if (PASTE_TOKENS(disable_, kind) & PASTE_TOKENS3(kind, _, hotspot)) {                                                           \\\n-      const char str[] = \",-\" STR(libc);                                                                                            \\\n-      size_t remains = disable_str + sizeof(disable_str) - disable_end;                                                             \\\n-      strncpy(disable_end, str, remains);                                                                                           \\\n-      size_t len = strnlen(disable_end, remains);                                                                                   \\\n-      remains -= len;                                                                                                               \\\n-      assert(remains > 0, \"internal error: disable_str overflow\");                                                                  \\\n-      disable_end += len;                                                                                                           \\\n-    }                                                                                                                               \\\n+#define GLIBC_DISABLE(kind, hotspot_glibc) do {                                                                                                 \\\n+    assert(!(PASTE_TOKENS(disable_handled_, kind) & PASTE_TOKENS3(kind, _, hotspot_glibc)), \"already used \" STR(kind) \"_\" STR(hotspot_glibc) ); \\\n+    DEBUG_ONLY(PASTE_TOKENS(disable_handled_, kind) |= PASTE_TOKENS3(kind, _, hotspot_glibc));                                                  \\\n+    if (PASTE_TOKENS(disable_, kind) & PASTE_TOKENS3(kind, _, hotspot_glibc)) {                                                                 \\\n+      const char str[] = \",-\" STR(hotspot_glibc);                                                                                               \\\n+      size_t remains = disable_str + sizeof(disable_str) - disable_end;                                                                         \\\n+      strncpy(disable_end, str, remains);                                                                                                       \\\n+      size_t len = strnlen(disable_end, remains);                                                                                               \\\n+      remains -= len;                                                                                                                           \\\n+      assert(remains > 0, \"internal error: disable_str overflow\");                                                                              \\\n+      disable_end += len;                                                                                                                       \\\n+    }                                                                                                                                           \\\n@@ -1191,2 +1141,0 @@\n-#define GLIBC_DISABLE(kind, name) GLIBC_DISABLE2(kind, name, name)\n-  GLIBC_DISABLE2(CPU , HT, HTT)\n@@ -1221,0 +1169,1 @@\n+  GLIBC_DISABLE(GLIBC, HTT)\n@@ -1265,0 +1214,1 @@\n+  GLIBC_UNSUPPORTED(CPU  , HT               );\n@@ -1288,1 +1238,1 @@\n-static void nonlibc_tty_print_uint64(uint64_t num) {\n+void VM_Version::nonlibc_tty_print_uint64(uint64_t num) {\n@@ -1302,1 +1252,14 @@\n-void VM_Version::get_processor_features() {\n+void VM_Version::nonlibc_tty_print_uint64_comma_uint64(uint64_t num1, uint64_t num2) {\n+  nonlibc_tty_print_uint64(num1);\n+  static const char comma = ',';\n+  tty->print_raw(&comma, sizeof(comma));\n+  nonlibc_tty_print_uint64(num2);\n+}\n+\n+void VM_Version::nonlibc_tty_print_using_features_cr() {\n+  if (ignore_glibc_not_using) {\n+    tty->print_cr(\"CPU features are being kept intact as requested by -XX:CPUFeatures=ignore\");\n+  } else {\n+    tty->print_cr(\"CPU features being used are: -XX:CPUFeatures=0x\" UINT64_FORMAT_X \",0x\" UINT64_FORMAT_X, _features, _glibc_features);\n+  }\n+}\n@@ -1304,0 +1267,1 @@\n+void VM_Version::get_processor_features_hardware() {\n@@ -1330,12 +1294,0 @@\n-  if (ShowCPUFeatures) {\n-    static const char prefix[] = \"This machine's CPU features are: -XX:CPUFeatures=\";\n-    tty->print_raw(prefix, sizeof(prefix) - 1);\n-    nonlibc_tty_print_uint64(_features);\n-    static const char comma = ',';\n-    tty->print_raw(&comma, sizeof(comma));\n-    nonlibc_tty_print_uint64(_glibc_features);\n-    tty->cr();\n-  }\n-\n-  CPUFeatures_init();\n-\n@@ -1492,0 +1444,9 @@\n+  if (ShowCPUFeatures) {\n+    static const char prefix[] = \"This machine's CPU features are: -XX:CPUFeatures=\";\n+    tty->print_raw(prefix, sizeof(prefix) - 1);\n+    nonlibc_tty_print_uint64_comma_uint64(_features, _glibc_features);\n+    tty->cr();\n+  }\n+}\n+\n+void VM_Version::get_processor_features_hotspot() {\n@@ -2590,1 +2551,81 @@\n-void VM_Version::initialize_features() {\n+\/\/ Print the feature names as \" = feat1, ..., featN\\n\";\n+void VM_Version::fatal_missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n+  static const char part1[] = \"; missing features of this CPU are \";\n+  tty->print_raw(part1, sizeof(part1) - 1);\n+  nonlibc_tty_print_uint64_comma_uint64(features_missing, glibc_features_missing);\n+  static const char part2[] = \" =\";\n+  tty->print_raw(part2, sizeof(part2) - 1);\n+  char buf[512] = \"\";\n+  \/\/ insert_features_names() does crash for undefined too high-numbered features.\n+  insert_features_names(buf, sizeof(buf)          ,       features_missing & (  CPU_MAX - 1));\n+  char *s = buf;\n+  while (*s)\n+    ++s;\n+  insert_features_names(s  , buf + sizeof(buf) - s, glibc_features_missing & (GLIBC_MAX - 1));\n+  while (*s)\n+    ++s;\n+  \/* +1 to skip the first ','. *\/\n+  tty->print_raw(buf + 1, s - (buf + 1));\n+  tty->cr();\n+  vm_exit_during_initialization();\n+}\n+\n+void VM_Version::crac_restore() {\n+  assert(CRaCCheckpointTo != NULL, \"\");\n+\n+  if (ShowCPUFeatures) {\n+    static const char prefix[] = \"This snapshot's stored CPU features are: -XX:CPUFeatures=\";\n+    tty->print_raw(prefix, sizeof(prefix) - 1);\n+    nonlibc_tty_print_uint64_comma_uint64(_features, _glibc_features);\n+    tty->cr();\n+  }\n+\n+  uint64_t       features_saved =       _features;\n+  uint64_t glibc_features_saved = _glibc_features;\n+#define SUPPORTS_SET \\\n+    SUPPORTS(supports_cx8) \\\n+    SUPPORTS(supports_atomic_getset4) \\\n+    SUPPORTS(supports_atomic_getset8) \\\n+    SUPPORTS(supports_atomic_getadd4) \\\n+    SUPPORTS(supports_atomic_getadd8) \\\n+    \/**\/\n+#define SUPPORTS(x) bool x##_saved = Abstract_VM_Version::x();\n+  SUPPORTS_SET\n+#undef SUPPORTS\n+\n+  get_processor_features_hardware();\n+\n+  uint64_t       features_missing =       features_saved & ~      _features;\n+  uint64_t glibc_features_missing = glibc_features_saved & ~_glibc_features;\n+  if (features_missing || glibc_features_missing) {\n+    static const char part1[] = \"You have to specify -XX:CPUFeatures=\";\n+    tty->print_raw(part1, sizeof(part1) - 1);\n+    nonlibc_tty_print_uint64_comma_uint64(_features & features_saved, _glibc_features & glibc_features_saved);\n+    static const char part2[] = \" together with -XX:CRaCCheckpointTo when making a checkpoint file; specified -XX:CRaCRestoreFrom file contains CPU features \";\n+    tty->print_raw(part2, sizeof(part2) - 1);\n+    nonlibc_tty_print_uint64_comma_uint64(features_saved, glibc_features_saved);\n+    fatal_missing_features(features_missing, glibc_features_missing);\n+  }\n+\n+  auto supports_exit = [&](const char *supports, bool file, bool this_cpu) {\n+    char buf[512];\n+    int res = jio_snprintf(\n+                buf, sizeof(buf),\n+                \"Specified -XX:CRaCRestoreFrom file contains feature \\\"%s\\\" value %d while this CPU has value %d\",\n+                supports, file, this_cpu);\n+    assert(res > 0, \"not enough temporary space allocated\");\n+    vm_exit_during_initialization(buf);\n+  };\n+#define SUPPORTS(x)                                           \\\n+  if (x##_saved != Abstract_VM_Version::x()) {                \\\n+    supports_exit( #x , Abstract_VM_Version::x(), x##_saved); \\\n+  }\n+  SUPPORTS_SET\n+#undef SUPPORTS\n+#undef SUPPORTS_SET\n+\n+  if (ShowCPUFeatures)\n+    nonlibc_tty_print_using_features_cr();\n+}\n+\n+void VM_Version::initialize() {\n@@ -2605,2 +2646,3 @@\n-  get_processor_features();\n-}\n+  assert(      _features == 0,       \"_features should be zero at startup\");\n+  assert(_glibc_features == 0, \"_glibc_features should be zero at startup\");\n+  get_processor_features_hardware();\n@@ -2608,2 +2650,36 @@\n-void VM_Version::initialize() {\n-  initialize_features();\n+  assert(!CPUFeatures == FLAG_IS_DEFAULT(CPUFeatures), \"CPUFeatures parsing\");\n+  uint64_t GLIBCFeatures_x64;\n+  uint64_t   CPUFeatures_x64 = CPUFeatures_parse(GLIBCFeatures_x64);\n+  uint64_t       features_missing =   CPUFeatures_x64 & ~      _features;\n+  uint64_t glibc_features_missing = GLIBCFeatures_x64 & ~_glibc_features;\n+  if (features_missing || glibc_features_missing) {\n+    static const char part1[] = \"Specified -XX:CPUFeatures=\";\n+    tty->print_raw(part1, sizeof(part1) - 1);\n+    nonlibc_tty_print_uint64_comma_uint64(CPUFeatures_x64, GLIBCFeatures_x64);\n+    static const char part2[] = \"; this machine's CPU features are \";\n+    tty->print_raw(part2, sizeof(part2) - 1);\n+    nonlibc_tty_print_uint64_comma_uint64(_features, _glibc_features);\n+    fatal_missing_features(features_missing, glibc_features_missing);\n+  }\n+\n+  uint64_t       features_saved =       _features;\n+  uint64_t glibc_features_saved = _glibc_features;\n+\n+        _features =   CPUFeatures_x64;\n+  _glibc_features = GLIBCFeatures_x64;\n+\n+  if (ShowCPUFeatures)\n+    nonlibc_tty_print_using_features_cr();\n+\n+  if (!ignore_glibc_not_using) {\n+    uint64_t       features_expected =   CPU_MAX - 1;\n+    uint64_t glibc_features_expected = GLIBC_MAX - 1;\n+#if !INCLUDE_CPU_FEATURE_ACTIVE && !INCLUDE_LD_SO_LIST_DIAGNOSTICS\n+          features_expected =       features_saved;\n+    glibc_features_expected = glibc_features_saved;\n+#endif\n+    glibc_not_using(      features_expected & ~      _features,\n+                    glibc_features_expected & ~_glibc_features);\n+  }\n+\n+  get_processor_features_hotspot();\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":159,"deletions":83,"binary":false,"changes":242,"status":"modified"},{"patch":"@@ -770,1 +770,2 @@\n-  static void get_processor_features();\n+  static void get_processor_features_hardware();\n+  static void get_processor_features_hotspot();\n@@ -782,0 +783,4 @@\n+  static void nonlibc_tty_print_uint64(uint64_t num);\n+  static void nonlibc_tty_print_uint64_comma_uint64(uint64_t num1, uint64_t num2);\n+  static void nonlibc_tty_print_using_features_cr();\n+  \/*[[noreturn]]*\/ static void fatal_missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n@@ -824,1 +829,1 @@\n-  static void initialize_features();\n+  static void crac_restore();\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -6048,12 +6048,0 @@\n-  uint64_t features_saved = Abstract_VM_Version::features();\n-#define SUPPORTS_SET \\\n-    SUPPORTS(supports_cx8) \\\n-    SUPPORTS(supports_atomic_getset4) \\\n-    SUPPORTS(supports_atomic_getset8) \\\n-    SUPPORTS(supports_atomic_getadd4) \\\n-    SUPPORTS(supports_atomic_getadd8) \\\n-    \/**\/\n-#define SUPPORTS(x) bool x##_saved = Abstract_VM_Version::x();\n-  SUPPORTS_SET\n-#undef SUPPORTS\n-\n@@ -6061,36 +6049,1 @@\n-  StubCodeDesc::thaw();\n-  VM_Version::initialize_features();\n-\n-  \/\/ Abstract_VM_Version::features() may be less than current CPU's features as they have been already masked by the CPUFeatures argument (if it is present).\n-  uint64_t features_missing = features_saved & ~Abstract_VM_Version::features();\n-  if (features_missing) {\n-    char buf[512];\n-    int res = jio_snprintf(\n-                buf, sizeof(buf),\n-                \"You have to specify -XX:CPUFeatures=0x\" UINT64_FORMAT_X \" during -XX:CRaCCheckpointTo making of the checkpoint\"\n-                \"; specified -XX:CRaCRestoreFrom file contains CPU features 0x\" UINT64_FORMAT_X\n-                \"; missing features of this CPU are 0x\" UINT64_FORMAT_X \" \",\n-                Abstract_VM_Version::features() & features_saved,\n-                features_saved, features_missing);\n-    assert(res > 0, \"not enough temporary space allocated\");\n-    VM_Version::insert_features_names(buf + res, sizeof(buf) - res, features_missing);\n-    assert(buf[res] == ',', \"unexpeced VM_Version::insert_features_names separator instead of ','\");\n-    buf[res] = '=';\n-    vm_exit_during_initialization(buf);\n-  }\n-  auto supports_exit = [&](const char *supports, bool file, bool this_cpu) {\n-    char buf[512];\n-    int res = jio_snprintf(\n-                buf, sizeof(buf),\n-                \"Specified -XX:CRaCRestoreFrom file contains feature \\\"%s\\\" value %d while this CPU has value %d\",\n-                supports, file, this_cpu);\n-    assert(res > 0, \"not enough temporary space allocated\");\n-    vm_exit_during_initialization(buf);\n-  };\n-#define SUPPORTS(x)                                           \\\n-  if (x##_saved != Abstract_VM_Version::x()) {                \\\n-    supports_exit( #x , Abstract_VM_Version::x(), x##_saved); \\\n-  }\n-  SUPPORTS_SET\n-#undef SUPPORTS\n-#undef SUPPORTS_SET\n+  VM_Version::crac_restore();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":48,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -306,4 +306,10 @@\n-      int res = jio_snprintf(buf, buflen, \", %s\", features_names[features_names_index]);\n-      assert(res > 0, \"not enough temporary space allocated\");\n-      buf += res;\n-      buflen -= res;\n+      \/\/ Do not use any libc string functions. Our caller VM_Version::fatal_missing_features may have GNU_IFUNC-misconfigured glibc.\n+      if (buflen-- > 0)\n+        *buf++ = ',';\n+      if (buflen-- > 0)\n+        *buf++ = ' ';\n+      for (const char *src = features_names[features_names_index]; *src; ++src)\n+      if (buflen-- > 0)\n+        *buf++ = *src;\n+      assert(buflen > 0, \"not enough temporary space allocated\");\n+      *buf = 0;\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -60,5 +60,0 @@\n-void StubCodeDesc::thaw() {\n-  assert(_frozen, \"repeated thaw operation\");\n-  _frozen = false;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-  static void thaw();\n","filename":"src\/hotspot\/share\/runtime\/stubCodeGenerator.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}