{"files":[{"patch":"@@ -670,0 +670,98 @@\n+#if !INCLUDE_CPU_FEATURE_ACTIVE\n+\n+static int ld_so_name_iterate_phdr(struct dl_phdr_info *info, size_t size, void *data_voidp) {\n+  const char **retval_return = (const char **)data_voidp;\n+  assert(size >= offsetof(struct dl_phdr_info, dlpi_adds), \"missing PHDRs for the java executable\");\n+  assert(strcmp(info->dlpi_name, \"\") == 0, \"Unexpected name of first dl_phdr_info\");\n+  for (size_t phdr_ix = 0; phdr_ix < info->dlpi_phnum; ++phdr_ix) {\n+    const Elf64_Phdr *phdr = info->dlpi_phdr + phdr_ix;\n+    if (phdr->p_type == PT_INTERP) {\n+      *retval_return = (const char *)(phdr->p_vaddr + info->dlpi_addr);\n+      return 42;\n+    }\n+  }\n+  vm_exit_during_initialization(\"PT_INTERP not found for the java executable\");\n+  return -1;\n+}\n+\n+static const char *ld_so_name() {\n+  const char *retval;\n+  int err = dl_iterate_phdr(ld_so_name_iterate_phdr, &retval);\n+  assert(err == 42, \"internal error 42\");\n+  return retval;\n+}\n+\n+#define ARG1 \"--list-diagnostics\"\n+\n+static FILE *popen_r(const char *arg0, pid_t *pid_return) {\n+  char errbuf[512];\n+  union {\n+    int fds[2];\n+    struct {\n+      int readfd, writefd;\n+    };\n+  } fds;\n+  if (pipe(fds.fds)) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Error creating pipe: %m\");\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  pid_t child = fork();\n+  switch (child) {\n+    case -1:\n+      jio_snprintf(errbuf, sizeof(errbuf), \"Error fork-ing: %m\");\n+      vm_exit_during_initialization(errbuf);\n+    case 0:\n+      if (close(fds.readfd)) {\n+        jio_snprintf(errbuf, sizeof(errbuf), \"Error closing read pipe in child: %m\");\n+        vm_exit_during_initialization(errbuf);\n+      }\n+      if (dup2(fds.writefd, STDOUT_FILENO) != STDOUT_FILENO) {\n+        jio_snprintf(errbuf, sizeof(errbuf), \"Error closing preparing write pipe in child: %m\");\n+        vm_exit_during_initialization(errbuf);\n+      }\n+      if (close(fds.writefd)) {\n+        jio_snprintf(errbuf, sizeof(errbuf), \"Error closing write pipe in child: %m\");\n+        vm_exit_during_initialization(errbuf);\n+      }\n+      execl(arg0, arg0, ARG1, NULL);\n+      jio_snprintf(errbuf, sizeof(errbuf), \"Error exec-ing %s \" ARG1 \": %m\", arg0);\n+      \/\/ FIXME: Double vm_exit*()?\n+      vm_exit_during_initialization(errbuf);\n+  }\n+  if (close(fds.writefd)) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Error closing write pipe in parent: %m\");\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  FILE *f = fdopen(fds.readfd, \"r\");\n+  if (f == NULL) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Error converting pipe fd to FILE * in parent for %s \" ARG1 \": %m\", arg0);\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  *pid_return = child;\n+  return f;\n+}\n+\n+static void pclose_r(const char *arg0, FILE *f, pid_t pid) {\n+  char errbuf[512];\n+  if (fclose(f)) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Error closing fdopen-ed %s \" ARG1 \": %m\", arg0);\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  int wstatus;\n+  pid_t waiterr = waitpid(pid, &wstatus, 0);\n+  if (waiterr != pid) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Error waiting on %s \" ARG1 \": %m\", arg0);\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  if (!WIFEXITED(wstatus)) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Child command %s \" ARG1 \" did not properly exit (WIFEXITED): wstatus = %d\", arg0, wstatus);\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  if (WEXITSTATUS(wstatus) != 0) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Child command %s \" ARG1 \" did exit with an error: exit code = %d\", arg0, WEXITSTATUS(wstatus));\n+    vm_exit_during_initialization(errbuf);\n+  }\n+}\n+\n+#endif \/\/ !INCLUDE_CPU_FEATURE_ACTIVE\n+\n@@ -671,1 +769,0 @@\n-#if INCLUDE_CPU_FEATURE_ACTIVE\n@@ -677,0 +774,68 @@\n+#if !INCLUDE_CPU_FEATURE_ACTIVE\n+  \/\/ sysdeps\/x86\/include\/cpu-features.h CPUID_INDEX_14_ECX_0 == 8\n+  const int CPUID_INDEX_CEIL = 8;\n+  \/\/ \/usr\/include\/bits\/platform\/x86.h\n+  enum\n+  {\n+    CPUID_INDEX_1 = 0,\n+    CPUID_INDEX_7,\n+    CPUID_INDEX_80000001,\n+    CPUID_INDEX_D_ECX_1,\n+    CPUID_INDEX_80000007,\n+    CPUID_INDEX_80000008,\n+    CPUID_INDEX_7_ECX_1,\n+    CPUID_INDEX_19,\n+    CPUID_INDEX_14_ECX_0\n+  };\n+  const int index_max = CPUID_INDEX_CEIL + 1;\n+  enum { eax = 0, ebx, ecx, edx, reg_max };\n+  unsigned active[index_max][reg_max] = { 0 };\n+  const char *arg0 = ld_so_name();\n+  pid_t f_child;\n+  FILE *f = popen_r(arg0, &f_child);\n+  if (!f) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Cannot popen %s \" ARG1 \": %m\", arg0);\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  for (;;) {\n+    char line[LINE_MAX];\n+    char *s = fgets(line, sizeof(line), f);\n+    if (!s)\n+      break;\n+    s = line;\n+    \/\/ x86.cpu_features.features[0x0].active[0x2]=0x7ed83203\n+    const char prefix[] = \"x86.cpu_features.features[\";\n+    if (strncmp(s, prefix, sizeof(prefix) - 1) != 0)\n+      continue;\n+    s += sizeof(prefix) - 1;\n+    unsigned long index = strtoul(s, &s, 0);\n+    if (index >= index_max)\n+      continue;\n+    const char mid[] = \"].active[\";\n+    if (strncmp(s, mid, sizeof(mid) - 1) != 0)\n+      continue;\n+    s += sizeof(mid) - 1;\n+    unsigned long reg = strtoul(s, &s, 0);\n+    if (reg >= reg_max)\n+      continue;\n+    if (s[0] != ']' || s[1] != '=')\n+      continue;\n+    s += 2;\n+    unsigned long val = strtoul(s, &s, 0);\n+    if (val > UINT_MAX)\n+      continue;\n+    if (s[0] != '\\n' || s[1] != 0)\n+      continue;\n+    active[index][reg] = val;\n+  }\n+  if (ferror(f)) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"Error reading popen-ed %s \" ARG1 \": %m\", arg0);\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  if (!feof(f)) {\n+    jio_snprintf(errbuf, sizeof(errbuf), \"EOF not reached on popen-ed %s \" ARG1, arg0);\n+    vm_exit_during_initialization(errbuf);\n+  }\n+  pclose_r(arg0, f, f_child);\n+#undef ARG1\n+#endif \/\/ !INCLUDE_CPU_FEATURE_ACTIVE\n@@ -769,5 +934,14 @@\n-#define EXCESSIVE2(kind, hotspot, glibc, hotspot_union, hotspot_field) do {                              \\\n-    EXCESSIVE_HANDLED(kind, hotspot);                                                                    \\\n-    if (PASTE_TOKENS(excessive_, kind) & PASTE_TOKENS3(kind, _, hotspot) && CPU_FEATURE_ACTIVE(glibc)) { \\\n-      PASTE_TOKENS(disable_, kind) |= PASTE_TOKENS3(kind, _, hotspot);                                   \\\n-    }                                                                                                    \\\n+#if INCLUDE_CPU_FEATURE_ACTIVE\n+# define FEATURE_ACTIVE(glibc, hotspot_field, hotspot_union, glibc_index, glibc_reg) CPU_FEATURE_ACTIVE(glibc)\n+#else\n+# define FEATURE_ACTIVE(glibc, hotspot_field, hotspot_union, glibc_index, glibc_reg) ({ \\\n+    hotspot_union u;                                      \\\n+    u.value = active[glibc_index][glibc_reg];             \\\n+    u.bits.hotspot_field != 0;                            \\\n+  })\n+#endif\n+#define EXCESSIVE7(kind, hotspot, glibc, hotspot_field, hotspot_union, glibc_index, glibc_reg) do {                                                        \\\n+    EXCESSIVE_HANDLED(kind, hotspot);                                                                                                                      \\\n+    if (PASTE_TOKENS(excessive_, kind) & PASTE_TOKENS3(kind, _, hotspot) && FEATURE_ACTIVE(glibc, hotspot_field, hotspot_union, glibc_index, glibc_reg)) { \\\n+      PASTE_TOKENS(disable_, kind) |= PASTE_TOKENS3(kind, _, hotspot);                                                                                     \\\n+    }                                                                                                                                                      \\\n@@ -775,30 +949,37 @@\n-#define EXCESSIVE(kind, hotspot, hotspot_union, hotspot_field) EXCESSIVE2(kind, hotspot, hotspot, hotspot_union, hotspot_field)\n-  EXCESSIVE(CPU  , AVX     , StdCpuid1Ecx, avx     );\n-  EXCESSIVE(CPU  , CX8     , StdCpuid1Edx, cmpxchg8);\n-  EXCESSIVE(CPU  , FMA     , StdCpuid1Ecx, fma     );\n-  EXCESSIVE2(CPU , HT, HTT , StdCpuid1Edx, ht      );\n-  EXCESSIVE(CPU  , RTM     , SefCpuid7Ebx, rtm     );\n-  EXCESSIVE(CPU  , AVX2    , SefCpuid7Ebx, avx2    );\n-  EXCESSIVE(CPU  , BMI1    , SefCpuid7Ebx, bmi1    );\n-  EXCESSIVE(CPU  , BMI2    , SefCpuid7Ebx, bmi2    );\n-  EXCESSIVE(CPU  , CMOV    , StdCpuid1Edx, cmov    );\n-  EXCESSIVE(CPU  , ERMS    , SefCpuid7Ebx, erms    );\n-  EXCESSIVE(CPU  , SSE2    , StdCpuid1Edx, sse2    );\n-  EXCESSIVE(CPU  , LZCNT   , ExtCpuid1Ecx, fma4    );\n-  EXCESSIVE(CPU  , SSSE3   , StdCpuid1Ecx, ssse3   );\n-  EXCESSIVE(CPU  , POPCNT  , StdCpuid1Ecx, popcnt  );\n-  EXCESSIVE(CPU  , SSE4_1  , StdCpuid1Ecx, sse4_1  );\n-  EXCESSIVE(CPU  , SSE4_2  , StdCpuid1Ecx, sse4_2  );\n-  EXCESSIVE(CPU  , AVX512F , SefCpuid7Ebx, avx512f );\n-  EXCESSIVE(CPU  , AVX512CD, SefCpuid7Ebx, avx512cd);\n-  EXCESSIVE(CPU  , AVX512BW, SefCpuid7Ebx, avx512bw);\n-  EXCESSIVE(CPU  , AVX512DQ, SefCpuid7Ebx, avx512dq);\n-  EXCESSIVE(CPU  , AVX512ER, SefCpuid7Ebx, avx512er);\n-  EXCESSIVE(CPU  , AVX512PF, SefCpuid7Ebx, avx512pf);\n-  EXCESSIVE(CPU  , AVX512VL, SefCpuid7Ebx, avx512vl);\n-  EXCESSIVE(GLIBC, IBT     , SefCpuid7Edx, ibt     );\n-  EXCESSIVE(GLIBC, FMA4    , ExtCpuid1Ecx, fma4    );\n-  EXCESSIVE(GLIBC, MOVBE   , StdCpuid1Ecx, movbe   );\n-  EXCESSIVE(GLIBC, SHSTK   , SefCpuid7Ecx, shstk   );\n-  EXCESSIVE(GLIBC, XSAVE   , StdCpuid1Ecx, xsave   );\n-  EXCESSIVE(GLIBC, OSXSAVE , StdCpuid1Ecx, osxsave );\n+#define EXCESSIVE5(kind, hotspot, glibc, hotspot_field, def...) EXCESSIVE7(kind, hotspot, glibc, hotspot_field, def)\n+#define EXCESSIVE(kind, hotspotglibc, hotspot_union, def...) EXCESSIVE5(kind, hotspotglibc, hotspotglibc, hotspot_union, def)\n+#define DEF_ExtCpuid1Ecx ExtCpuid1Ecx, CPUID_INDEX_80000001, ecx\n+#define DEF_SefCpuid7Ebx SefCpuid7Ebx, CPUID_INDEX_7       , ebx\n+#define DEF_SefCpuid7Ecx SefCpuid7Ecx, CPUID_INDEX_7       , ecx\n+#define DEF_SefCpuid7Edx SefCpuid7Edx, CPUID_INDEX_7       , edx\n+#define DEF_StdCpuid1Ecx StdCpuid1Ecx, CPUID_INDEX_1       , ecx\n+#define DEF_StdCpuid1Edx StdCpuid1Edx, CPUID_INDEX_1       , edx\n+  EXCESSIVE(CPU  , AVX     , avx     , DEF_StdCpuid1Ecx);\n+  EXCESSIVE(CPU  , CX8     , cmpxchg8, DEF_StdCpuid1Edx);\n+  EXCESSIVE(CPU  , FMA     , fma     , DEF_StdCpuid1Ecx);\n+  EXCESSIVE5(CPU , HT, HTT , ht      , DEF_StdCpuid1Edx);\n+  EXCESSIVE(CPU  , RTM     , rtm     , DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , AVX2    , avx2    , DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , BMI1    , bmi1    , DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , BMI2    , bmi2    , DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , CMOV    , cmov    , DEF_StdCpuid1Edx);\n+  EXCESSIVE(CPU  , ERMS    , erms    , DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , SSE2    , sse2    , DEF_StdCpuid1Edx);\n+  EXCESSIVE(CPU  , LZCNT   , fma4    , DEF_ExtCpuid1Ecx);\n+  EXCESSIVE(CPU  , SSSE3   , ssse3   , DEF_StdCpuid1Ecx);\n+  EXCESSIVE(CPU  , POPCNT  , popcnt  , DEF_StdCpuid1Ecx);\n+  EXCESSIVE(CPU  , SSE4_1  , sse4_1  , DEF_StdCpuid1Ecx);\n+  EXCESSIVE(CPU  , SSE4_2  , sse4_2  , DEF_StdCpuid1Ecx);\n+  EXCESSIVE(CPU  , AVX512F , avx512f , DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , AVX512CD, avx512cd, DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , AVX512BW, avx512bw, DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , AVX512DQ, avx512dq, DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , AVX512ER, avx512er, DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , AVX512PF, avx512pf, DEF_SefCpuid7Ebx);\n+  EXCESSIVE(CPU  , AVX512VL, avx512vl, DEF_SefCpuid7Ebx);\n+  EXCESSIVE(GLIBC, IBT     , ibt     , DEF_SefCpuid7Edx);\n+  EXCESSIVE(GLIBC, FMA4    , fma4    , DEF_ExtCpuid1Ecx);\n+  EXCESSIVE(GLIBC, MOVBE   , movbe   , DEF_StdCpuid1Ecx);\n+  EXCESSIVE(GLIBC, SHSTK   , shstk   , DEF_SefCpuid7Ecx);\n+  EXCESSIVE(GLIBC, XSAVE   , xsave   , DEF_StdCpuid1Ecx);\n+  EXCESSIVE(GLIBC, OSXSAVE , osxsave , DEF_StdCpuid1Ecx);\n@@ -1025,1 +1206,0 @@\n-#endif \/\/ INCLUDE_CPU_FEATURE_ACTIVE\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":217,"deletions":37,"binary":false,"changes":254,"status":"modified"}]}