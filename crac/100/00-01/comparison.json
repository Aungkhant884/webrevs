{"files":[{"patch":"@@ -61,0 +61,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -386,0 +386,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -631,1 +631,1 @@\n-  ignore_glibc_not_using = true;\n+  _ignore_glibc_not_using = true;\n@@ -638,1 +638,1 @@\n-    ignore_glibc_not_using = true;\n+    _ignore_glibc_not_using = true;\n@@ -752,1 +752,2 @@\n-bool VM_Version::ignore_glibc_not_using = false;\n+bool VM_Version::_ignore_glibc_not_using = false;\n+bool VM_Version::_crac_restore_missing_features;\n@@ -1206,1 +1207,1 @@\n-  if (ignore_glibc_not_using) {\n+  if (_ignore_glibc_not_using) {\n@@ -1213,8 +1214,0 @@\n-bool VM_Version::nonlibc_str_equals(const char *a, const char *b) {\n-  while (*a && *b) {\n-    if (*a++ != *b++)\n-      return false;\n-  }\n-  return !*a && !*b;\n-}\n-\n@@ -2503,1 +2496,1 @@\n-void VM_Version::fatal_missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n+void VM_Version::missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n@@ -2524,1 +2517,0 @@\n-  vm_exit_during_initialization();\n@@ -2558,16 +2550,2 @@\n-  if (CPUFeatures) {\n-    if (nonlibc_str_equals(CPUFeatures, \"ignore\")) {\n-      ignore_glibc_not_using = true;\n-    } else {\n-      static const char part1[] = \"Unsupported -XX:CPUFeatures=\";\n-      tty->print_raw(part1, sizeof(part1) - 1);\n-      for (const char *s = CPUFeatures; *s; ++s)\n-        tty->put(*s);\n-      static const char part2[] = \", only -XX:CPUFeatures=ignore is supported during -XX:CRaCRestoreFrom\";\n-      tty->print_raw(part2, sizeof(part2) - 1);\n-      tty->cr();\n-      vm_exit_during_initialization();\n-    }\n-  }\n-\n-  if (!ignore_glibc_not_using && (features_missing || glibc_features_missing)) {\n+  _crac_restore_missing_features = features_missing || glibc_features_missing;\n+  if (_crac_restore_missing_features) {\n@@ -2580,1 +2558,1 @@\n-    fatal_missing_features(features_missing, glibc_features_missing);\n+    missing_features(features_missing, glibc_features_missing);\n@@ -2604,0 +2582,14 @@\n+void VM_Version::crac_restore_finalize() {\n+  if (CPUFeatures) {\n+    if (strcmp(CPUFeatures, \"ignore\") == 0) {\n+      _ignore_glibc_not_using = true;\n+    } else {\n+      tty->print_cr(\"Unsupported -XX:CPUFeatures=%s, only -XX:CPUFeatures=ignore is supported during -XX:CRaCRestoreFrom.\", CPUFeatures);\n+      vm_exit_during_initialization();\n+    }\n+  }\n+  if (_crac_restore_missing_features && !_ignore_glibc_not_using) {\n+    vm_exit_during_initialization();\n+  }\n+}\n+\n@@ -2639,1 +2631,2 @@\n-    fatal_missing_features(features_missing, glibc_features_missing);\n+    missing_features(features_missing, glibc_features_missing);\n+    vm_exit_during_initialization();\n@@ -2652,1 +2645,1 @@\n-  if (!ignore_glibc_not_using) {\n+  if (!_ignore_glibc_not_using) {\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":26,"deletions":33,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -784,2 +784,3 @@\n-  \/\/ C++17: Make ignore_glibc_not_using inline.\n-  static bool ignore_glibc_not_using;\n+  \/\/ C++17: Make _ignore_glibc_not_using inline.\n+  static bool _ignore_glibc_not_using;\n+  static bool _crac_restore_missing_features;\n@@ -790,1 +791,1 @@\n-  \/*[[noreturn]]*\/ static void fatal_missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n+  \/*[[noreturn]]*\/ static void missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n@@ -834,0 +835,1 @@\n+  static void crac_restore_finalize();\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -338,0 +338,3 @@\n+  \/\/ It needs to check CPU features before any other code (such as VM_Crac::read_shm) depends on them.\n+  VM_Version::crac_restore();\n+\n@@ -346,1 +349,1 @@\n-  VM_Version::crac_restore();\n+  VM_Version::crac_restore_finalize();\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}