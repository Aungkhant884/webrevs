{"files":[{"patch":"@@ -61,0 +61,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -386,0 +386,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-  product(ccstr, CPUFeatures, NULL, \"CPU feature set, \"                     \\\n+  product(ccstr, CPUFeatures, NULL, RESTORE_SETTABLE, \"CPU feature set, \"   \\\n@@ -229,0 +229,1 @@\n+      \"-XX:CPUFeatures=ignore will disable the CPU features check; \"        \\\n","filename":"src\/hotspot\/cpu\/x86\/globals_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -631,1 +631,1 @@\n-  ignore_glibc_not_using = true;\n+  _ignore_glibc_not_using = true;\n@@ -638,1 +638,1 @@\n-    ignore_glibc_not_using = true;\n+    _ignore_glibc_not_using = true;\n@@ -752,1 +752,2 @@\n-bool VM_Version::ignore_glibc_not_using = false;\n+bool VM_Version::_ignore_glibc_not_using = false;\n+bool VM_Version::_crac_restore_missing_features;\n@@ -1206,1 +1207,1 @@\n-  if (ignore_glibc_not_using) {\n+  if (_ignore_glibc_not_using) {\n@@ -2495,1 +2496,1 @@\n-void VM_Version::fatal_missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n+void VM_Version::missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n@@ -2513,1 +2514,3 @@\n-  vm_exit_during_initialization();\n+  static const char line2[] = \"If you are sure it will not crash you can override this check by -XX:CPUFeatures=ignore .\";\n+  tty->print_raw(line2, sizeof(line2) - 1);\n+  tty->cr();\n@@ -2517,1 +2520,1 @@\n-  assert(CRaCCheckpointTo != NULL, \"\");\n+  assert(CRaCRestoreFrom != NULL, \"\");\n@@ -2547,1 +2550,2 @@\n-  if (features_missing || glibc_features_missing) {\n+  _crac_restore_missing_features = features_missing || glibc_features_missing;\n+  if (_crac_restore_missing_features) {\n@@ -2554,1 +2558,1 @@\n-    fatal_missing_features(features_missing, glibc_features_missing);\n+    missing_features(features_missing, glibc_features_missing);\n@@ -2578,0 +2582,14 @@\n+void VM_Version::crac_restore_finalize() {\n+  if (CPUFeatures) {\n+    if (strcmp(CPUFeatures, \"ignore\") == 0) {\n+      _ignore_glibc_not_using = true;\n+    } else {\n+      tty->print_cr(\"Unsupported -XX:CPUFeatures=%s, only -XX:CPUFeatures=ignore is supported during -XX:CRaCRestoreFrom.\", CPUFeatures);\n+      vm_exit_during_initialization();\n+    }\n+  }\n+  if (_crac_restore_missing_features && !_ignore_glibc_not_using) {\n+    vm_exit_during_initialization();\n+  }\n+}\n+\n@@ -2613,1 +2631,2 @@\n-    fatal_missing_features(features_missing, glibc_features_missing);\n+    missing_features(features_missing, glibc_features_missing);\n+    vm_exit_during_initialization();\n@@ -2626,1 +2645,1 @@\n-  if (!ignore_glibc_not_using) {\n+  if (!_ignore_glibc_not_using) {\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":30,"deletions":11,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -784,2 +784,3 @@\n-  \/\/ C++17: Make ignore_glibc_not_using inline.\n-  static bool ignore_glibc_not_using;\n+  \/\/ C++17: Make _ignore_glibc_not_using inline.\n+  static bool _ignore_glibc_not_using;\n+  static bool _crac_restore_missing_features;\n@@ -789,1 +790,2 @@\n-  \/*[[noreturn]]*\/ static void fatal_missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n+  static bool nonlibc_str_equals(const char *a, const char *b);\n+  \/*[[noreturn]]*\/ static void missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n@@ -833,0 +835,1 @@\n+  static void crac_restore_finalize();\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -338,0 +338,1 @@\n+  \/\/ It needs to check CPU features before any other code (such as VM_Crac::read_shm) depends on them.\n@@ -346,0 +347,4 @@\n+\n+  \/\/ VM_Crac::read_shm needs to be already called to read RESTORE_SETTABLE parameters.\n+  VM_Version::crac_restore_finalize();\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}