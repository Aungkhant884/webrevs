{"files":[{"patch":"@@ -67,0 +67,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -200,0 +200,2 @@\n+  static void crac_restore() {}\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -410,0 +410,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -236,0 +236,1 @@\n+      \"-XX:CPUFeatures=ignore will disable the CPU features check; \"        \\\n@@ -241,0 +242,4 @@\n+  product(bool, IgnoreCPUFeatures, false, RESTORE_SETTABLE | EXPERIMENTAL,  \\\n+      \"Do not refuse to run after -XX:CRaCRestoreFrom finds out some \"      \\\n+      \"CPU features are missing\")                                           \\\n+                                                                            \\\n","filename":"src\/hotspot\/cpu\/x86\/globals_x86.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -813,1 +813,1 @@\n-  ignore_glibc_not_using = true;\n+  _ignore_glibc_not_using = true;\n@@ -820,1 +820,1 @@\n-    ignore_glibc_not_using = true;\n+    _ignore_glibc_not_using = true;\n@@ -934,1 +934,2 @@\n-bool VM_Version::ignore_glibc_not_using = false;\n+bool VM_Version::_ignore_glibc_not_using = false;\n+bool VM_Version::_crac_restore_missing_features;\n@@ -1388,1 +1389,1 @@\n-  if (ignore_glibc_not_using) {\n+  if (_ignore_glibc_not_using) {\n@@ -2692,1 +2693,1 @@\n-void VM_Version::fatal_missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n+void VM_Version::missing_features(uint64_t features_missing, uint64_t glibc_features_missing) {\n@@ -2710,1 +2711,3 @@\n-  vm_exit_during_initialization();\n+  static const char line2[] = \"If you are sure it will not crash you can override this check by -XX:+UnlockExperimentalVMOptions -XX:+IgnoreCPUFeatures .\";\n+  tty->print_raw(line2, sizeof(line2) - 1);\n+  tty->cr();\n@@ -2744,1 +2747,2 @@\n-  if (features_missing || glibc_features_missing) {\n+  _crac_restore_missing_features = features_missing || glibc_features_missing;\n+  if (_crac_restore_missing_features) {\n@@ -2751,1 +2755,1 @@\n-    fatal_missing_features(features_missing, glibc_features_missing);\n+    missing_features(features_missing, glibc_features_missing);\n@@ -2775,0 +2779,6 @@\n+void VM_Version::crac_restore_finalize() {\n+  if (_crac_restore_missing_features && !IgnoreCPUFeatures) {\n+    vm_exit_during_initialization();\n+  }\n+}\n+\n@@ -2837,1 +2847,2 @@\n-    fatal_missing_features(features_missing, glibc_features_missing);\n+    missing_features(features_missing, glibc_features_missing);\n+    vm_exit_during_initialization();\n@@ -2850,1 +2861,1 @@\n-  if (!ignore_glibc_not_using) {\n+  if (!_ignore_glibc_not_using) {\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -624,2 +624,3 @@\n-  \/\/ C++17: Make ignore_glibc_not_using inline.\n-  static bool ignore_glibc_not_using;\n+  \/\/ C++17: Make _ignore_glibc_not_using inline.\n+  static bool _ignore_glibc_not_using;\n+  static bool _crac_restore_missing_features;\n@@ -629,1 +630,2 @@\n-  \/*[[noreturn]]*\/ static void fatal_missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n+  static bool nonlibc_str_equals(const char *a, const char *b);\n+  \/*[[noreturn]]*\/ static void missing_features(uint64_t features_missing, uint64_t glibc_features_missing);\n@@ -676,0 +678,1 @@\n+  static void crac_restore_finalize();\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+  static void crac_restore_finalize() {}\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -340,0 +340,1 @@\n+  \/\/ It needs to check CPU features before any other code (such as VM_Crac::read_shm) depends on them.\n@@ -348,0 +349,4 @@\n+\n+  \/\/ VM_Crac::read_shm needs to be already called to read RESTORE_SETTABLE parameters.\n+  VM_Version::crac_restore_finalize();\n+\n","filename":"src\/hotspot\/share\/runtime\/crac.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -183,1 +183,2 @@\n-  product(bool, UnlockExperimentalVMOptions, false, EXPERIMENTAL,           \\\n+  product(bool, UnlockExperimentalVMOptions, false,                         \\\n+          EXPERIMENTAL | RESTORE_SETTABLE,                                  \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}