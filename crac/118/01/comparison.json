{"files":[{"patch":"@@ -13,0 +13,1 @@\n+import java.nio.file.Files;\n@@ -14,0 +15,3 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n@@ -17,3 +21,10 @@\n-    private static final String[] CLASSPATH_ENTRIES =\n-        GetPropertyAction.privilegedGetProperty(\"java.class.path\")\n-            .split(File.pathSeparator);\n+    private static final Path[] CLASSPATH_ENTRIES;\n+\n+    static {\n+        String[] items = GetPropertyAction.privilegedGetProperty(\"java.class.path\")\n+                .split(File.pathSeparator);\n+        CLASSPATH_ENTRIES = new Path[items.length];\n+        for (int i = 0; i < items.length; i++) {\n+            CLASSPATH_ENTRIES[i] = Path.of(items[i]);\n+        }\n+    }\n@@ -43,3 +54,8 @@\n-        for (String cp : CLASSPATH_ENTRIES) {\n-            if (cp.equals(path)) {\n-                return true;\n+        Path p = Path.of(path);\n+        for (Path entry : CLASSPATH_ENTRIES) {\n+            try {\n+                if (Files.isSameFile(p, entry)) {\n+                    return true;\n+                }\n+            } catch (IOException e) {\n+                \/\/ ignored\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKFileResource.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import jdk.test.lib.crac.CracTestArg;\n+\n+import java.io.File;\n+import java.io.RandomAccessFile;\n@@ -30,0 +34,3 @@\n+import java.util.stream.Collectors;\n+\n+import static jdk.test.lib.Asserts.*;\n@@ -32,0 +39,5 @@\n+ * This test includes two behaviours:\n+ * 1) inheriting open FD from parent process: this is achieved using EXTRA_FD_WRAPPER\n+ *    - any excess inherited FDs should be closed when JVM starts.\n+ * 2) open files on classpath: these files are ignored, handling is left to CREngine\n+ *\n@@ -41,0 +53,6 @@\n+    @CracTestArg(optional = true, value = 0)\n+    String relativePathToSomeJar;\n+\n+    @CracTestArg(optional = true, value = 1)\n+    String absolutePathToSomeJar;\n+\n@@ -43,0 +61,11 @@\n+        List<Path> jars = Arrays.stream(System.getProperty(\"java.class.path\").split(File.pathSeparator))\n+                .filter(p -> p.endsWith(\".jar\")).map(Path::of).toList();\n+        assertGreaterThanOrEqual(jars.size(), 2); \/\/ usually we have at least javatest.jar and jtreg.jar\n+        assertTrue(jars.stream().allMatch(jar -> jar.toFile().exists()));\n+        Path firstJar = jars.get(0);\n+        Path secondJar = jars.get(1);\n+        assertTrue(secondJar.isAbsolute());\n+        Path cwd = Path.of(System.getProperty(\"user.dir\"));\n+        String relative = cwd.relativize(firstJar).toString();\n+        String absolute = secondJar.toString();\n+\n@@ -44,0 +73,1 @@\n+        builder.classpathEntry(relative).classpathEntry(absolute).args(CracTest.args(relative, absolute));\n@@ -50,2 +80,9 @@\n-        Core.checkpointRestore();\n-        System.out.println(RESTORED_MESSAGE);\n+        String absolute = Path.of(relativePathToSomeJar).toAbsolutePath().toString();\n+\n+        Path cwd = Path.of(System.getProperty(\"user.dir\"));\n+        String relative = cwd.relativize(Path.of(absolutePathToSomeJar)).toString();\n+        try (var file1 = new RandomAccessFile(absolute, \"r\");\n+             var file2 = new RandomAccessFile(relative, \"r\")) {\n+            Core.checkpointRestore();\n+            System.out.println(RESTORED_MESSAGE);\n+        }\n","filename":"test\/jdk\/jdk\/crac\/fileDescriptors\/CheckpointWithOpenFdsTest.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"}]}