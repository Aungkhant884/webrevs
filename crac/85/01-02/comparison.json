{"files":[{"patch":"@@ -6121,9 +6121,4 @@\n-    if (thread->is_Java_thread()) {\n-      ThreadState state = thread->osthread()->get_state();\n-      \/\/ ThreadState::SLEEPING is not used\n-      if (state == ThreadState::CONDVAR_WAIT || state == ThreadState::OBJECT_WAIT) {\n-        JavaThread *jt = (JavaThread *) thread;\n-        \/\/ We want to cause a wakeup but not interrupted exception\n-        jt->interrupt();\n-        jt->osthread()->set_interrupted(false);\n-      }\n+    ThreadState state = thread->osthread()->get_state();\n+    \/\/ Note: ThreadState::SLEEPING is not used\n+    if (state != ThreadState::CONDVAR_WAIT && state != ThreadState::OBJECT_WAIT) {\n+      return; \/\/ No need to unpark running threads\n@@ -6131,0 +6126,6 @@\n+\n+    assert(thread->is_Java_thread(), \"must be called from java_threads_do\");\n+    JavaThread *jt = (JavaThread *) thread;\n+    jt->wakeup_sleep();\n+    jt->parker()->unpark();\n+    jt->_ParkEvent->unpark();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1583,0 +1583,1 @@\n+  void wakeup_sleep() { _SleepEvent->unpark(); }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}