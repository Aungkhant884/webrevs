{"files":[{"patch":"@@ -159,1 +159,3 @@\n-        private final Runnable action;\n+        \/\/ We are setting this to null when the object is cleaned - using a boolean instead would\n+        \/\/ increase object size by 8 bytes.\n+        private Runnable action;\n@@ -188,0 +190,4 @@\n+            synchronized (this) {\n+                action = null;\n+                notifyAll();\n+            }\n@@ -219,0 +225,5 @@\n+                 synchronized (this) {\n+                     while (action != null) {\n+                         wait();\n+                     }\n+                 }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/CleanerImpl.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -131,0 +131,5 @@\n+    static {\n+        \/\/ trigger eager initialization\n+        new FileDispatcherImpl();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/NioSocketImpl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,4 +56,0 @@\n-            \/\/ FIXME: This test can still spuriously fail when this starts running\n-            \/\/ before C\/R, voiding the PhantomCleanableRef.beforeCheckpoint, but\n-            \/\/ does not finish the close before FileDescriptor finds itself not closed\n-            \/\/ and rightfully throws CheckpointOpenFileException.\n","filename":"test\/jdk\/jdk\/crac\/RefQueueTest.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}