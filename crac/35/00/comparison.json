{"files":[{"patch":"@@ -81,0 +81,1 @@\n+import jdk.internal.util.jar.JarFileCRaCSupport;\n@@ -830,9 +831,2 @@\n-                    Method zipBeforeCheckpoint = ZipFile.class.getDeclaredMethod(\"beforeCheckpoint\");\n-                    @SuppressWarnings(\"removal\")\n-                    Void v = AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                        public Void run() {\n-                            zipBeforeCheckpoint.setAccessible(true);\n-                            return null;\n-                        }});\n-                    zipBeforeCheckpoint.invoke(this);\n-                } catch (Throwable e) {\n+                    JarFileCRaCSupport.beforeCheckpoint(this);\n+                } catch (ReflectiveOperationException e) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.reflect.Method;\n@@ -39,0 +40,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -51,0 +54,3 @@\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+import jdk.internal.crac.JDKResource;\n@@ -53,0 +59,1 @@\n+import jdk.internal.util.jar.JarFileCRaCSupport;\n@@ -224,0 +231,1 @@\n+        private final JDKResource resource;\n@@ -239,0 +247,21 @@\n+            this.resource = new JDKResource() {\n+                @Override\n+                public Priority getPriority() {\n+                    return Priority.NORMAL;\n+                }\n+\n+                @Override\n+                public void beforeCheckpoint(Context<? extends Resource> context) {\n+                    try {\n+                        JarFileCRaCSupport.beforeCheckpoint(jf);\n+                    } catch (ReflectiveOperationException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+\n+                @Override\n+                public void afterRestore(Context<? extends Resource> context) {\n+\n+                }\n+            };\n+            jdk.internal.crac.Core.getJDKContext().register(this.resource);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleReferences.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util.jar;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.jar.JarFile;\n+import java.util.zip.ZipFile;\n+\n+public class JarFileCRaCSupport {\n+    public static void beforeCheckpoint(JarFile jarFile) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n+        Method zipBeforeCheckpoint = ZipFile.class.getDeclaredMethod(\"beforeCheckpoint\");\n+        @SuppressWarnings(\"removal\")\n+        Void v = AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+            public Void run() {\n+                zipBeforeCheckpoint.setAccessible(true);\n+                return null;\n+            }});\n+        zipBeforeCheckpoint.invoke(jarFile);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/jar\/JarFileCRaCSupport.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}