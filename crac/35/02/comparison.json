{"files":[{"patch":"@@ -1140,2 +1140,5 @@\n-\n-             }\n+                @Override\n+                public void beforeCheckpoint(ZipFile zip) {\n+                    zip.beforeCheckpoint();\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    public void beforeCheckpoint(ZipFile zip);\n@@ -48,1 +49,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilZipFileAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.Method;\n@@ -48,1 +47,0 @@\n-import java.security.PrivilegedAction;\n@@ -73,1 +71,0 @@\n-import jdk.crac.Context;\n@@ -77,3 +74,0 @@\n-import jdk.internal.crac.Core;\n-import jdk.internal.crac.JDKResource;\n-import jdk.internal.crac.JDKResource.Priority;\n@@ -81,0 +75,1 @@\n+import jdk.internal.util.jar.PersistentJarFile;\n@@ -822,32 +817,0 @@\n-        static class ClassLoaderJarFile extends JarFile implements JDKResource {\n-            public ClassLoaderJarFile (File file, boolean verify, int mode, Runtime.Version version) throws IOException {\n-                super(file, verify, mode, version);\n-            }\n-\n-            @Override\n-            public void beforeCheckpoint(Context<? extends jdk.crac.Resource> context) {\n-                try {\n-                    Method zipBeforeCheckpoint = ZipFile.class.getDeclaredMethod(\"beforeCheckpoint\");\n-                    @SuppressWarnings(\"removal\")\n-                    Void v = AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                        public Void run() {\n-                            zipBeforeCheckpoint.setAccessible(true);\n-                            return null;\n-                        }});\n-                    zipBeforeCheckpoint.invoke(this);\n-                } catch (Throwable e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-\n-            @Override\n-            public void afterRestore(Context<? extends jdk.crac.Resource> context) {\n-                \/\/ do nothing, no fixup required\n-            }\n-\n-            @Override\n-            public Priority getPriority() {\n-                return Priority.NORMAL;\n-            }\n-        }\n-\n@@ -861,4 +824,2 @@\n-                ClassLoaderJarFile clJarFile = new ClassLoaderJarFile(new File(p.getPath()), true, ZipFile.OPEN_READ,\n-                        JarFile.runtimeVersion());\n-                Core.getJDKContext().register(clJarFile);\n-                return checkJar(clJarFile);\n+                return checkJar(new PersistentJarFile(new File(p.getPath()), true, ZipFile.OPEN_READ,\n+                        JarFile.runtimeVersion()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":3,"deletions":42,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.internal.util.jar.PersistentJarFile;\n@@ -227,1 +228,1 @@\n-                return new JarFile(new File(path.toString()),\n+                return new PersistentJarFile(new File(path.toString()),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleReferences.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util.jar;\n+\n+import jdk.crac.Context;\n+import jdk.crac.Resource;\n+import jdk.internal.access.SharedSecrets;\n+import jdk.internal.crac.Core;\n+import jdk.internal.crac.JDKResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.jar.JarFile;\n+\n+public class PersistentJarFile extends JarFile implements JDKResource {\n+\n+    public PersistentJarFile(File file, boolean b, int openRead, Runtime.Version runtimeVersion) throws IOException {\n+        super(file, b, openRead, runtimeVersion);\n+        Core.getJDKContext().register(this);\n+    }\n+\n+    @Override\n+    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n+        SharedSecrets.getJavaUtilZipFileAccess().beforeCheckpoint(this);\n+    }\n+\n+    @Override\n+    public void afterRestore(Context<? extends Resource> context) throws Exception {\n+        \/\/ do nothing, no fixup required\n+    }\n+\n+    @Override\n+    public Priority getPriority() {\n+        return Priority.NORMAL;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/jar\/PersistentJarFile.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}