{"files":[{"patch":"@@ -1140,2 +1140,5 @@\n-\n-             }\n+                @Override\n+                public void beforeCheckpoint(ZipFile zip) {\n+                    zip.beforeCheckpoint();\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    public void beforeCheckpoint(ZipFile zip);\n@@ -48,1 +49,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilZipFileAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -35,3 +36,0 @@\n-import java.lang.reflect.Method;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -39,1 +37,0 @@\n-import java.util.zip.ZipFile;\n@@ -50,8 +47,1 @@\n-        Method zipBeforeCheckpoint = ZipFile.class.getDeclaredMethod(\"beforeCheckpoint\");\n-        @SuppressWarnings(\"removal\")\n-        Void v = AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                zipBeforeCheckpoint.setAccessible(true);\n-                return null;\n-            }});\n-        zipBeforeCheckpoint.invoke(this);\n+        SharedSecrets.getJavaUtilZipFileAccess().beforeCheckpoint(this);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/jar\/PersistentJarFile.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"}]}