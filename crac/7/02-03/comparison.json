{"files":[{"patch":"@@ -32,1 +32,1 @@\n-public class CheckpointException extends Exception {\n+public class CheckpointException extends RuntimeException {\n","filename":"src\/java.base\/share\/classes\/jdk\/crac\/CheckpointException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.crac.CheckpointException;\n@@ -168,5 +169,3 @@\n-            if (state != null) {\n-                digest.update(state);\n-                for (int i = 0; i < state.length; i++) {\n-                    state[i] = 0;\n-                }\n+            \/\/ verify if objLock is already acquired in beforeCheckpoint\n+            if(objLock.getHoldCount() > 1) {\n+                throw new CheckpointException(\"SHA1PRNG object is invalidated\");\n@@ -174,3 +173,1 @@\n-            state = digest.digest(seed);\n-            remCount = 0;\n-            clearStateOnCheckpoint = false;\n+            setSeedImpl(seed);\n@@ -182,0 +179,12 @@\n+    private void setSeedImpl(byte[] seed) {\n+        if (state != null) {\n+            digest.update(state);\n+            for (int i = 0; i < state.length; i++) {\n+                state[i] = 0;\n+            }\n+        }\n+        state = digest.digest(seed);\n+        remCount = 0;\n+        clearStateOnCheckpoint = false;\n+    }\n+\n@@ -244,2 +253,2 @@\n-        private static final SecureRandom seeder;\n-        private ReentrantLock objLock = new ReentrantLock();\n+        private static final SeederHolder seederHolder = new SeederHolder();\n+        private final SecureRandom seeder;\n@@ -247,1 +256,1 @@\n-        static {\n+        private SeederHolder() {\n@@ -256,1 +265,5 @@\n-            jdk.internal.crac.Core.getJDKContext().register(new SeederHolder());\n+            jdk.internal.crac.Core.getJDKContext().register(this);\n+        }\n+\n+        public static SecureRandom getSeeder() {\n+            return seederHolder.seeder;\n@@ -261,1 +274,0 @@\n-            objLock.lock();\n@@ -267,7 +279,3 @@\n-            try {\n-                byte[] b = new byte[DIGEST_SIZE];\n-                SeedGenerator.generateSeed(b);\n-                seeder.engineSetSeed(b);\n-            } finally {\n-                objLock.unlock();\n-            }\n+            byte[] b = new byte[DIGEST_SIZE];\n+            SeedGenerator.generateSeed(b);\n+            seeder.setSeedImpl(b);\n@@ -291,0 +299,4 @@\n+            \/\/ verify if objLock is already acquired in beforeCheckpoint\n+            if(objLock.getHoldCount() > 1) {\n+                throw new CheckpointException(\"SHA1PRNG object is invalidated\");\n+            }\n@@ -297,1 +309,1 @@\n-                SeederHolder.seeder.engineNextBytes(seed);\n+                SeederHolder.getSeeder().engineNextBytes(seed);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SecureRandom.java","additions":33,"deletions":21,"binary":false,"changes":54,"status":"modified"}]}