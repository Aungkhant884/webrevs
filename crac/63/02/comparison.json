{"files":[{"patch":"@@ -439,0 +439,2 @@\n+static char* _crengine_arg_str = NULL;\n+static const char* _crengine_args[32] = { NULL, NULL, NULL };\n@@ -5875,0 +5877,6 @@\n+  \/\/ release possible old copies\n+  os::free((char *) _crengine); \/\/ NULL is allowed\n+  _crengine = NULL;\n+  os::free((char *) _crengine_arg_str);\n+  _crengine_arg_str = NULL;\n+\n@@ -5878,4 +5886,5 @@\n-\n-  if (CREngine[0] == '\/') {\n-    _crengine = CREngine;\n-    return true;\n+  char *exec = os::strdup_check_oom(CREngine);\n+  char *comma = strchr(exec, ',');\n+  if (comma != NULL) {\n+    *comma = '\\0';\n+    _crengine_arg_str = os::strdup_check_oom(comma + 1);\n@@ -5883,10 +5892,16 @@\n-\n-  char path[JVM_MAXPATHLEN];\n-  int pathlen = cr_util_path(path, sizeof(path));\n-  strcat(path + pathlen, \"\/\");\n-  strcat(path + pathlen, CREngine);\n-\n-  struct stat st;\n-  if (0 != stat(path, &st)) {\n-    warning(\"Could not find %s: %s\", path, strerror(errno));\n-    return false;\n+  if (exec[0] == '\/') {\n+    _crengine = exec;\n+  } else {\n+    char path[JVM_MAXPATHLEN];\n+    int pathlen = cr_util_path(path, sizeof(path));\n+    strcat(path + pathlen, \"\/\");\n+    strcat(path + pathlen, exec);\n+\n+    struct stat st;\n+    if (0 != stat(path, &st)) {\n+      warning(\"Could not find %s: %s\", path, strerror(errno));\n+      return false;\n+    }\n+    _crengine = os::strdup_check_oom(path);\n+    \/\/ we have read and duplicated args from exec, now we can release\n+    os::free(exec);\n@@ -5894,0 +5909,1 @@\n+  _crengine_args[0] = _crengine;\n@@ -5895,1 +5911,29 @@\n-  _crengine = os::strdup(path);\n+  size_t next_arg = 2;\n+  if (_crengine_arg_str != NULL) {\n+    char *arg = _crengine_arg_str;\n+    char *target = _crengine_arg_str;\n+    bool escaped = false;\n+    for (char *c = arg; *c != '\\0'; ++c) {\n+      if (next_arg >= ARRAY_SIZE(_crengine_args) - 2) {\n+        warning(\"Too many options to CREngine; cannot proceed with these: %s\", arg);\n+        return false;\n+      }\n+      if (!escaped) {\n+        switch(*c) {\n+        case '\\\\':\n+          escaped = true;\n+          continue; \/\/ for\n+        case ',':\n+          *target++ = '\\0';\n+          _crengine_args[next_arg++] = arg;\n+          arg = target;\n+          continue; \/\/ for\n+        }\n+      }\n+      escaped = false;\n+      *target++ = *c;\n+    }\n+    *target = '\\0';\n+    _crengine_args[next_arg++] = arg;\n+    _crengine_args[next_arg] = NULL;\n+  }\n@@ -5899,0 +5943,11 @@\n+static void add_crengine_arg(const char *arg) {\n+  for (size_t i = 2; i < ARRAY_SIZE(_crengine_args) - 1; ++i) {\n+    if (_crengine_args[i] == NULL) {\n+      _crengine_args[i] = arg;\n+      _crengine_args[i + 1] = NULL;\n+      return;\n+    }\n+  }\n+  ShouldNotReachHere();\n+}\n+\n@@ -5910,2 +5965,4 @@\n-    execl(_crengine, _crengine, \"checkpoint\", CRaCCheckpointTo, NULL);\n-    perror(\"execl\");\n+    _crengine_args[1] = \"checkpoint\";\n+    add_crengine_arg(CRaCCheckpointTo);\n+    execv(_crengine, (char * const*)_crengine_args);\n+    perror(\"execv CREngine checkpoint\");\n@@ -6265,1 +6322,3 @@\n-    execl(_crengine, _crengine, \"restore\", CRaCRestoreFrom, NULL);\n+    _crengine_args[1] = \"restore\";\n+    add_crengine_arg(CRaCRestoreFrom);\n+    execv(_crengine, (char * const*) _crengine_args);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":77,"deletions":18,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2100,3 +2100,0 @@\n-  \/* It is usually not possible to use a different engine for checkpoint *\/ \\\n-  \/* and restore but when we use a non-default engine this must be set   *\/ \\\n-  \/* on restore, too. *\/                                                    \\\n@@ -2104,1 +2101,5 @@\n-      \"Path or name of a program implementing checkpoint\/restore\")          \\\n+      \"Path or name of a program implementing checkpoint\/restore and \"      \\\n+      \"optional extra parameters as a comma-separated list: \"               \\\n+      \"-XX:CREngine=program,--key,value,--anotherkey results in calling \"   \\\n+      \"'program --key value --anotherkey'. Commas used as part of args \"    \\\n+      \"should be escaped with a backslash character ('\\\\').\")               \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include <stdbool.h>\n@@ -36,0 +37,1 @@\n+#include <getopt.h>\n@@ -50,0 +52,3 @@\n+static char *verbosity = NULL; \/\/ default differs for checkpoint and restore\n+static char *log_file = NULL;\n+\n@@ -105,1 +110,0 @@\n-            \"-v4\", \"-o\", \"dump4.log\", \/\/ -D without -W makes criu cd to image dir for logs\n@@ -107,1 +111,6 @@\n-        const char** arg = args + 10;\n+        const char** arg = args + 7;\n+\n+        *arg++ = verbosity != NULL ? verbosity : \"-v4\";\n+        *arg++ = \"-o\";\n+        \/\/ -D without -W makes criu cd to image dir for logs\n+        *arg++ = log_file != NULL ? log_file : \"dump4.log\";\n@@ -195,1 +204,0 @@\n-        \"-v1\"\n@@ -197,1 +205,8 @@\n-    const char** arg = args + 10;\n+    const char** arg = args + 9;\n+\n+    *arg++ = verbosity != NULL ? verbosity : \"-v1\";\n+    if (log_file != NULL) {\n+        *arg++ = \"-o\";\n+        *arg++ = log_file;\n+    }\n+\n@@ -220,0 +235,2 @@\n+    fflush(stderr);\n+\n@@ -329,0 +346,35 @@\n+\/\/ return value is one argument after options\n+static char *parse_options(int argc, char *argv[]) {\n+    optind = 2; \/\/ starting after action\n+    struct option opts[] = {{\n+        .name = \"verbosity\",\n+        .has_arg = 1,\n+        .flag = NULL,\n+        .val = 'v'\n+    }, {\n+        .name = \"log-file\",\n+        .has_arg = 1,\n+        .flag = NULL,\n+        .val = 'o',\n+    }, { NULL, 0, NULL, 0} };\n+    bool processing = true;\n+    do {\n+        switch (getopt_long(argc, argv, \"v:o:\", opts, NULL)) {\n+            case -1:\n+            case '?':\n+                processing = false;\n+                break;\n+            case 'v':\n+                if (asprintf(&verbosity, \"--verbosity=%s\", optarg) < 0) {\n+                    fprintf(stderr, \"Cannot set verbosity level\\n\");\n+                    verbosity = NULL;\n+                }\n+                break;\n+            case 'o':\n+                log_file = optarg;\n+                break;\n+        }\n+    } while (processing);\n+    return optind < argc ? argv[optind] : NULL;\n+}\n+\n@@ -331,2 +383,3 @@\n-    if ((action = argv[1])) {\n-        char* imagedir = argv[2];\n+    if (argc >= 2 && (action = argv[1])) {\n+\n+        char* imagedir = parse_options(argc, argv);\n","filename":"src\/java.base\/unix\/native\/criuengine\/criuengine.c","additions":59,"deletions":6,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.test.lib.crac.CracEngine;\n@@ -44,0 +45,2 @@\n+        \/\/ this is here just to test passing CREngine params\n+        builder.engine(CracEngine.CRIU, \"--verbosity=4\", \"--log-file=\/dev\/null\");\n","filename":"test\/jdk\/jdk\/crac\/VMOptionsTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -12,0 +12,1 @@\n+import java.util.stream.Collectors;\n@@ -38,0 +39,1 @@\n+    String[] engineArgs;\n@@ -74,0 +76,1 @@\n+        other.engineArgs = engineArgs == null ? null : Arrays.copyOf(engineArgs, engineArgs.length);\n@@ -98,2 +101,2 @@\n-    public CracBuilder engine(CracEngine engine) {\n-        assertNull(this.engine); \/\/ set once\n+    public CracBuilder engine(CracEngine engine, String... args) {\n+        assertTrue(this.engine == null || this.engine.equals(engine)); \/\/ allow overwriting args\n@@ -101,0 +104,1 @@\n+        this.engineArgs = args;\n@@ -330,1 +334,3 @@\n-            cmd.add(\"-XX:CREngine=\" + engine.engine);\n+            String engArgs = engineArgs == null ? \"\" : \",\" + Arrays.stream(engineArgs)\n+                    .map(str -> str.replace(\",\", \"\\\\,\")).collect(Collectors.joining(\",\"));\n+            cmd.add(\"-XX:CREngine=\" + engine.engine + engArgs);\n","filename":"test\/lib\/jdk\/test\/lib\/crac\/CracBuilder.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}