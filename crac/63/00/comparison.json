{"files":[{"patch":"@@ -453,0 +453,1 @@\n+static const char* _crengine_args[32] = { NULL, NULL, NULL };\n@@ -5949,2 +5950,6 @@\n-  if (!CREngine) {\n-    return true;\n+  \/\/ release possible old copies\n+  os::free((char *) _crengine); \/\/ NULL is allowed\n+  _crengine = NULL;\n+  for (size_t i = 2; i < ARRAY_SIZE(_crengine_args) && _crengine_args[i] != NULL; ++i) {\n+    os::free((char *) _crengine_args[i]);\n+    _crengine_args[i] = NULL;\n@@ -5953,2 +5958,1 @@\n-  if (CREngine[0] == '\/') {\n-    _crengine = CREngine;\n+  if (!CREngine) {\n@@ -5957,10 +5961,58 @@\n-\n-  char path[JVM_MAXPATHLEN];\n-  int pathlen = cr_util_path(path, sizeof(path));\n-  strcat(path + pathlen, \"\/\");\n-  strcat(path + pathlen, CREngine);\n-\n-  struct stat st;\n-  if (0 != stat(path, &st)) {\n-    warning(\"Could not find %s: %s\", path, strerror(errno));\n-    return false;\n+  char *exec = os::strdup_check_oom(CREngine);\n+  char *comma = strchr(exec, ',');\n+  if (comma != NULL) {\n+    *comma = '\\0';\n+  }\n+  if (exec[0] == '\/') {\n+    _crengine = exec;\n+  } else {\n+    char path[JVM_MAXPATHLEN];\n+    int pathlen = cr_util_path(path, sizeof(path));\n+    strcat(path + pathlen, \"\/\");\n+    strcat(path + pathlen, exec);\n+\n+    struct stat st;\n+    if (0 != stat(path, &st)) {\n+      warning(\"Could not find %s: %s\", path, strerror(errno));\n+      return false;\n+    }\n+    _crengine = os::strdup_check_oom(path);\n+  }\n+  _crengine_args[0] = _crengine;\n+\n+  size_t next_arg = 2;\n+  if (comma != NULL) {\n+    char *arg = comma + 1;\n+    bool done = false;\n+    while (!done && next_arg < ARRAY_SIZE(_crengine_args) - 2) {\n+      comma = strchrnul(arg, ',');\n+      done = *comma == '\\0';\n+      *comma = '\\0';\n+      char *eq = strchrnul(arg, '=');\n+      if (eq < comma) {\n+        *eq = '\\0';\n+      }\n+      size_t alloc_size = strlen(arg) + 3;\n+      char *opt = (char *) os::malloc(alloc_size, mtInternal);\n+      if (opt == NULL) {\n+        vm_exit_out_of_memory(alloc_size, OOM_MALLOC_ERROR, \"compute_crengine\");\n+        return false; \/\/ should not reach here\n+      }\n+      strcpy(opt, \"--\");\n+      strcpy(opt + 2, arg);\n+      _crengine_args[next_arg++] = opt;\n+      if (eq < comma) {\n+        _crengine_args[next_arg++] = os::strdup_check_oom(eq + 1);\n+      }\n+      arg = comma + 1;\n+    }\n+    assert(next_arg < ARRAY_SIZE(_crengine_args), \"incremented by more than 2?\");\n+    _crengine_args[next_arg] = NULL;\n+    if (!done && next_arg > ARRAY_SIZE(_crengine_args) - 2) {\n+      warning(\"Too many options to CREngine; cannot proceed with these: %s\", arg);\n+      return false;\n+    }\n+  }\n+  if (exec != _crengine) {\n+    \/\/ we have read and duplicated args from exec, now we can release\n+    os::free(exec);\n@@ -5968,2 +6020,0 @@\n-\n-  _crengine = os::strdup(path);\n@@ -5973,0 +6023,11 @@\n+static void add_crengine_arg(const char *arg) {\n+  for (size_t i = 2; i < ARRAY_SIZE(_crengine_args) - 1; ++i) {\n+    if (_crengine_args[i] == NULL) {\n+      _crengine_args[i] = arg;\n+      _crengine_args[i + 1] = NULL;\n+      return;\n+    }\n+  }\n+  ShouldNotReachHere();\n+}\n+\n@@ -5984,2 +6045,4 @@\n-    execl(_crengine, _crengine, \"checkpoint\", CRaCCheckpointTo, NULL);\n-    perror(\"execl\");\n+    _crengine_args[1] = \"checkpoint\";\n+    add_crengine_arg(CRaCCheckpointTo);\n+    execv(_crengine, (char * const*)_crengine_args);\n+    perror(\"execv CREngine checkpoint\");\n@@ -6456,1 +6519,3 @@\n-    execl(_crengine, _crengine, \"restore\", CRaCRestoreFrom, NULL);\n+    _crengine_args[1] = \"restore\";\n+    add_crengine_arg(CRaCRestoreFrom);\n+    execv(_crengine, (char * const*) _crengine_args);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":84,"deletions":19,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -2097,1 +2097,4 @@\n-      \"implementing checkpoint\/restore\")                                    \\\n+      \"implementing checkpoint\/restore and optional extra parameters \"      \\\n+      \"as a comma-separated list of key[=value] pairs; \"                    \\\n+      \"-XX:CREngine=program,key=value,anotherkey results in calling \"       \\\n+      \"'program --key value --anotherkey'\")                                 \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include <stdbool.h>\n@@ -36,0 +37,1 @@\n+#include <getopt.h>\n@@ -50,0 +52,3 @@\n+static char *verbosity = NULL; \/\/ default differs for checkpoint and restore\n+static char *log_file = NULL;\n+\n@@ -105,1 +110,0 @@\n-            \"-v4\", \"-o\", \"dump4.log\", \/\/ -D without -W makes criu cd to image dir for logs\n@@ -107,1 +111,6 @@\n-        const char** arg = args + 10;\n+        const char** arg = args + 7;\n+\n+        *arg++ = verbosity != NULL ? verbosity : \"-v4\";\n+        *arg++ = \"-o\";\n+        \/\/ -D without -W makes criu cd to image dir for logs\n+        *arg++ = log_file != NULL ? log_file : \"dump4.log\";\n@@ -195,1 +204,0 @@\n-        \"-v1\"\n@@ -197,1 +205,8 @@\n-    const char** arg = args + 10;\n+    const char** arg = args + 9;\n+\n+    *arg++ = verbosity != NULL ? verbosity : \"-v1\";\n+    if (log_file != NULL) {\n+        *arg++ = \"-o\";\n+        *arg++ = log_file;\n+    }\n+\n@@ -329,0 +344,35 @@\n+\/\/ return value is one argument after options\n+static char *parse_options(int argc, char *argv[]) {\n+    optind = 2; \/\/ starting after action\n+    struct option opts[] = {{\n+        .name = \"verbosity\",\n+        .has_arg = 1,\n+        .flag = NULL,\n+        .val = 'v'\n+    }, {\n+        .name = \"log_file\",\n+        .has_arg = 1,\n+        .flag = NULL,\n+        .val = 'o',\n+    }, { NULL, 0, NULL, 0} };\n+    bool processing = true;\n+    do {\n+        switch (getopt_long(argc, argv, \"v:o:\", opts, NULL)) {\n+            case -1:\n+            case '?':\n+                processing = false;\n+                break;\n+            case 'v':\n+                if (asprintf(&verbosity, \"--verbosity=%s\", optarg) < 0) {\n+                    fprintf(stderr, \"Cannot set verbosity level\\n\");\n+                    verbosity = NULL;\n+                }\n+                break;\n+            case 'o':\n+                log_file = optarg;\n+                break;\n+        }\n+    } while (processing);\n+    return optind < argc ? argv[optind] : NULL;\n+}\n+\n@@ -331,2 +381,3 @@\n-    if ((action = argv[1])) {\n-        char* imagedir = argv[2];\n+    if (argc >= 2 && (action = argv[1])) {\n+\n+        char* imagedir = parse_options(argc, argv);\n","filename":"src\/java.base\/unix\/native\/criuengine\/criuengine.c","additions":57,"deletions":6,"binary":false,"changes":63,"status":"modified"}]}