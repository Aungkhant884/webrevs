{"files":[{"patch":"@@ -89,2 +89,0 @@\n-    private final NativeFileDescriptorResource resource = new NativeFileDescriptorResource(this);\n-\n@@ -108,3 +106,0 @@\n-        resource.add(epfd);\n-        resource.add(sp[0]);\n-        resource.add(sp[1]);\n@@ -135,3 +130,3 @@\n-        try { resource.remove(epfd); FileDispatcherImpl.closeIntFD(epfd); } catch (IOException ioe) { }\n-        try { resource.remove(sp[0]); FileDispatcherImpl.closeIntFD(sp[0]); } catch (IOException ioe) { }\n-        try { resource.remove(sp[1]); FileDispatcherImpl.closeIntFD(sp[1]); } catch (IOException ioe) { }\n+        try { FileDispatcherImpl.closeIntFD(epfd); } catch (IOException ioe) { }\n+        try { FileDispatcherImpl.closeIntFD(sp[0]); } catch (IOException ioe) { }\n+        try { FileDispatcherImpl.closeIntFD(sp[1]); } catch (IOException ioe) { }\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollPort.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -108,1 +108,0 @@\n-    private final NativeFileDescriptorResource resource = new NativeFileDescriptorResource(this);\n@@ -124,1 +123,0 @@\n-        resource.add(epfd);\n@@ -157,1 +155,0 @@\n-                resource.remove(epfd);\n@@ -311,1 +308,0 @@\n-        resource.remove(epfd);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollSelectorImpl.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-    private final NativeFileDescriptorResource resource = new NativeFileDescriptorResource(this);\n@@ -42,1 +41,0 @@\n-        resource.add(efd);\n@@ -58,1 +56,0 @@\n-        resource.remove(efd);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EventFD.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,60 +0,0 @@\n-package sun.nio.ch;\n-\n-import jdk.crac.Context;\n-import jdk.crac.Resource;\n-import jdk.internal.crac.Core;\n-import jdk.internal.crac.JDKContext;\n-import jdk.internal.crac.JDKResource;\n-\n-import java.util.Arrays;\n-\n-class NativeFileDescriptorResource implements JDKResource {\n-    private final Object owner;\n-    private int[] fds = new int[] { -1, -1, -1 };\n-\n-    NativeFileDescriptorResource(Object owner) {\n-        this.owner = owner;\n-        Core.getJDKContext().register(this);\n-    }\n-\n-    public void add(int fd) {\n-        for (int i = 0; i < fds.length; ++i) {\n-            if (fds[i] < 0) {\n-                fds[i] = fd;\n-                return;\n-            }\n-        }\n-        int prevLength = fds.length;\n-        fds = Arrays.copyOf(fds, prevLength * 2);\n-        fds[prevLength] = fd;\n-        Arrays.fill(fds, prevLength + 1, fds.length - 1, -1);\n-    }\n-\n-    public void remove(int fd) {\n-        for (int i = 0; i < fds.length; ++i) {\n-            if (fds[i] == fd) {\n-                fds[i] = -1;\n-                return;\n-            }\n-        }\n-        throw new IllegalArgumentException(\"File descriptor \" + fd + \" not present in \" + Arrays.toString(fds));\n-    }\n-\n-    @Override\n-    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n-        for (int i = 0; i < fds.length; ++i) {\n-            if (fds[i] >= 0) {\n-                ((JDKContext) context).claimNativeFd(fds[i], owner);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void afterRestore(Context<? extends Resource> context) throws Exception {\n-    }\n-\n-    @Override\n-    public Priority getPriority() {\n-        return Priority.FILE_DESCRIPTORS;\n-    }\n-}\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/NativeFileDescriptorResource.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -51,2 +51,0 @@\n-    private WeakHashMap<Object, Integer> nativeFds;\n-\n@@ -88,1 +86,0 @@\n-        nativeFds = new WeakHashMap<>();\n@@ -105,1 +102,1 @@\n-        Map<Integer, Object> fdInfoMap = claimedFds.entrySet().stream()\n+        return claimedFds.entrySet().stream()\n@@ -107,4 +104,0 @@\n-        \/\/ We're using putIfAbsent because sometimes the native FD is eventually used in a FileDescriptor;\n-        \/\/ we don't want to overwrite the information.\n-        nativeFds.forEach((owner, fd) -> fdInfoMap.putIfAbsent(fd, owner));\n-        return fdInfoMap;\n@@ -129,4 +122,0 @@\n-\n-    public void claimNativeFd(int fd, Object resource) {\n-        nativeFds.put(resource, fd);\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKContext.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -70,2 +70,0 @@\n-    private final NativeFileDescriptorResource resource = new NativeFileDescriptorResource(this);\n-\n@@ -82,2 +80,0 @@\n-            resource.add(fd0);\n-            resource.add(fd1);\n@@ -209,1 +205,0 @@\n-        resource.remove(fd0);\n@@ -211,1 +206,0 @@\n-        resource.remove(fd1);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/PollSelectorImpl.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}