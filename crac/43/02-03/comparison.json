{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import jdk.internal.access.JavaIOFileDescriptorAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -63,0 +65,3 @@\n+    private static final JavaIOFileDescriptorAccess fdAccess\n+            = SharedSecrets.getJavaIOFileDescriptorAccess();\n+\n@@ -116,1 +121,1 @@\n-            fd.markClosedByNIO();\n+            fdAccess.markClosed(fd);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollSelectorImpl.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -64,7 +63,0 @@\n-    \/**\n-     * Called by FileDispatcherImpl when the file descriptor is about to be closed natively.\n-     *\/\n-    public void markClosedByNIO() {\n-        resource.closedByNIO = true;\n-    }\n-\n@@ -72,3 +64,0 @@\n-        private static final boolean COLLECT_FD_STACKTRACES =\n-                GetBooleanAction.privilegedGetProperty(JDKContext.COLLECT_FD_STACKTRACES_PROPERTY);\n-\n@@ -81,1 +70,1 @@\n-            if (COLLECT_FD_STACKTRACES) {\n+            if (JDKContext.COLLECT_FD_STACKTRACES) {\n@@ -160,0 +149,5 @@\n+                    @Override\n+                    public void markClosed(FileDescriptor fdo) {\n+                        fdo.resource.closedByNIO = true;\n+                    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileDescriptor.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.access.JavaIOFileDescriptorAccess;\n@@ -89,0 +90,2 @@\n+        private static final JavaIOFileDescriptorAccess fdAccess = SharedSecrets.getJavaIOFileDescriptorAccess();\n+\n@@ -100,1 +103,2 @@\n-                throw new CheckpointOpenFileException(\"RandomAccessFile \" + path + \" left open.\" + JDKContext.COLLECT_FD_STACKTRACES_HINT,\n+                int fdNum = fdAccess.get(fd);\n+                throw new CheckpointOpenFileException(\"RandomAccessFile \" + path + \" left open (file descriptor \" + fdNum + \"). \" + JDKContext.COLLECT_FD_STACKTRACES_HINT,\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    public void markClosed(FileDescriptor fdo);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOFileDescriptorAccess.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import sun.security.action.GetBooleanAction;\n@@ -48,0 +49,3 @@\n+    public static final boolean COLLECT_FD_STACKTRACES =\n+            GetBooleanAction.privilegedGetProperty(JDKContext.COLLECT_FD_STACKTRACES_PROPERTY);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/crac\/JDKContext.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-        fd.markClosedByNIO();\n+        fdAccess.markClosed(fd);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/FileDispatcherImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,2 @@\n+static char* altstack = NULL;\n+\n@@ -72,1 +74,8 @@\n-  static char altstack[SIGSTKSZ];\n+  if (altstack == NULL) {\n+    \/\/ Dynamically allocated in case SIGSTKSZ is not constant\n+    altstack = malloc(SIGSTKSZ);\n+    if (altstack == NULL) {\n+      fprintf(stderr, \"Test ERROR. Unable to malloc altstack space\\n\");\n+      exit(7);\n+    }\n+  }\n","filename":"test\/hotspot\/jtreg\/runtime\/StackGuardPages\/exeinvoke.c","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}