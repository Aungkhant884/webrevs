{"files":[{"patch":"@@ -1618,0 +1618,1 @@\n+  \/\/ and    x u> 0 or u>= 1   to x != 0\n@@ -1620,1 +1621,1 @@\n-      ((_test._test == BoolTest::lt &&\n+      (((_test._test == BoolTest::lt || _test._test == BoolTest::ge) &&\n@@ -1622,1 +1623,1 @@\n-       (_test._test == BoolTest::le &&\n+       ((_test._test == BoolTest::le || _test._test == BoolTest::gt) &&\n@@ -1625,1 +1626,1 @@\n-    return new BoolNode(ncmp, BoolTest::eq);\n+    return new BoolNode(ncmp, _test.is_less() ? BoolTest::eq : BoolTest::ne);\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8290529\n+ * @summary C2: assert(BoolTest(btest).is_canonical()) failure\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation TestUnsignedCompareIntoEqualityNotCanonical\n+ *\/\n+\n+\n+public class TestUnsignedCompareIntoEqualityNotCanonical {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test(0);\n+            test(1);\n+        }\n+    }\n+\n+    private static int test(int x) {\n+        if (Integer.compareUnsigned(0, x) >= 0) {\n+            return 42;\n+        }\n+        return -42;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestUnsignedCompareIntoEqualityNotCanonical.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * bug 8290529\n+ * @summary verify that x <u 1 is transformed to x == 0\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.irTests.CmpUWithZero\n+ *\/\n+\n+public class CmpUWithZero {\n+    static volatile boolean field;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.CMP_I, \"1\" })\n+    @IR(failOn = { IRNode.CMP_U})\n+    public static void test(int x) {\n+        if (Integer.compareUnsigned(x, 1) < 0) {\n+            field = true;\n+        } else {\n+            field = false;\n+        }\n+    }\n+\n+    @Run(test = \"test\")\n+    private void testRunner() {\n+        test(0);\n+        test(42);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/CmpUWithZero.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -174,0 +174,2 @@\n+    public static final String CMP_U = START + \"CmpU\" + MID + END;\n+    public static final String CMP_I = START + \"CmpI\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}