{"files":[{"patch":"@@ -3899,11 +3899,0 @@\n-#ifdef ASSERT\n-bool IdealLoopTree::has_reduction_nodes() const {\n-  for (uint i = 0; i < _body.size(); i++) {\n-    if (_body[i]->is_reduction()) {\n-      return true;\n-    }\n-  }\n-  return false;\n-}\n-#endif \/\/ ASSERT\n-\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -781,5 +781,0 @@\n-#ifdef ASSERT\n-  \/\/ Tell whether the body contains nodes marked as reductions.\n-  bool has_reduction_nodes() const;\n-#endif \/\/ ASSERT\n-\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2419,5 +2419,0 @@\n-  \/\/ Check that the loop to be vectorized does not have inconsistent reduction\n-  \/\/ information, which would likely lead to a miscompilation.\n-  assert(!lpt()->has_reduction_nodes() || cl->is_reduction_loop(),\n-         \"non-reduction loop contains reduction nodes\");\n-\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}