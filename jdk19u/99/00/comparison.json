{"files":[{"patch":"@@ -4148,0 +4148,4 @@\n+        \/\/ if any type is erroneous, the problem is reported elsewhere\n+        if (exprType.isErroneous() || pattType.isErroneous()) {\n+            return false;\n+        }\n@@ -4209,1 +4213,1 @@\n-            expectedRecordTypes = Stream.generate(() -> Type.noType)\n+            expectedRecordTypes = Stream.generate(() -> types.createErrorType(tree.type))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8295447\n+ * @summary NullPointerException with invalid pattern matching construct in constructor call\n+ * @modules jdk.compiler\n+ * @compile\/fail\/ref=T8295447.out -XDrawDiagnostics --enable-preview -source ${jdk.version} T8295447.java\n+ *\/\n+public class T8295447 {\n+    class Foo {\n+        void m(Object o) {\n+            if(o instanceof Foo(int x)) {}\n+        }\n+\n+        Foo(Object o) {\n+            m((o instanceof Foo(int x))? 0 : 1);\n+        }\n+        void m(int i) { }\n+    }\n+\n+    class Base { int i; Base(int j) { i = j; } }\n+    class Sub extends Base {\n+        Sub(Object o) { super(o instanceof java.awt.Point(int x, int y)? x + y: 0); }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8295447.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+T8295447.java:33:29: compiler.err.deconstruction.pattern.only.records: T8295447.Foo\n+T8295447.java:37:29: compiler.err.deconstruction.pattern.only.records: T8295447.Foo\n+T8295447.java:44:44: compiler.err.deconstruction.pattern.only.records: java.awt.Point\n+- compiler.note.preview.filename: T8295447.java, DEFAULT\n+- compiler.note.preview.recompile\n+3 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/T8295447.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"}]}