{"files":[{"patch":"@@ -64,1 +64,1 @@\n-    G1CollectedHeap::heap()->service_thread()->schedule_task(uncommit_task, 0);\n+    G1CollectedHeap::heap()->service_thread()->schedule_task(uncommit_task, UncommitInitialDelayMs);\n@@ -127,3 +127,2 @@\n-    \/\/ No delay, reason to reschedule rather then to loop is to allow\n-    \/\/ other tasks to run without waiting for a full uncommit cycle.\n-    schedule(0);\n+    \/\/ Delay to avoid starving application.\n+    schedule(UncommitTaskDelayMs);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  \/\/ Each execution of the uncommit task is limited to uncommit at most 256M.\n+  \/\/ Each execution of the uncommit task is limited to uncommit at most 128M.\n@@ -36,1 +36,5 @@\n-  static const uint UncommitSizeLimit = 256 * M;\n+  static const uint UncommitSizeLimit = 128 * M;\n+  \/\/ Initial delay in milliseconds after GC before the regions are uncommitted.\n+  static const uint UncommitInitialDelayMs = 100;\n+  \/\/ The delay between two uncommit task executions.\n+  static const uint UncommitTaskDelayMs = 10;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}