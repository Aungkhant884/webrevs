{"files":[{"patch":"@@ -106,0 +106,3 @@\n+        while (nextEvent == ChunkParser.FLUSH_MARKER) {\n+            nextEvent = chunkParser.readEvent();\n+        }\n@@ -254,0 +257,3 @@\n+            while (nextEvent == ChunkParser.FLUSH_MARKER) {\n+                nextEvent = chunkParser.readEvent();\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingFile.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -236,0 +236,8 @@\n+\n+    final protected void onFlush() {\n+       Runnable r = getFlushOperation();\n+       if (r != null) {\n+           r.run();\n+       }\n+    }\n+\n@@ -294,1 +302,1 @@\n-    protected final void emitMetadataEvent(ChunkParser parser) {\n+    protected final void onMetadata(ChunkParser parser) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/AbstractEventStream.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+    public final static RecordedEvent FLUSH_MARKER = JdkJfrConsumer.instance().newRecordedEvent(null, null, 0L, 0L);\n@@ -107,1 +108,0 @@\n-    private Runnable flushOperation;\n@@ -197,0 +197,3 @@\n+        if (event == ChunkParser.FLUSH_MARKER) {\n+            return null;\n+        }\n@@ -256,2 +259,3 @@\n-                    if (flushOperation != null) {\n-                        parseCheckpoint();\n+                    if (CheckPointType.FLUSH.is(parseCheckpointType())) {\n+                        input.position(pos + size);\n+                        return FLUSH_MARKER;\n@@ -270,3 +274,1 @@\n-    private void parseCheckpoint() throws IOException {\n-        \/\/ Content has been parsed previously. This\n-        \/\/ is to trigger flush\n+    private byte parseCheckpointType() throws IOException {\n@@ -276,4 +278,1 @@\n-        byte typeFlags = input.readByte();\n-        if (CheckPointType.FLUSH.is(typeFlags)) {\n-            flushOperation.run();\n-        }\n+        return input.readByte();\n@@ -454,4 +453,0 @@\n-    public void setFlushOperation(Runnable flushOperation) {\n-        this.flushOperation = flushOperation;\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ChunkParser.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-    public final static RecordedEvent FLUSH_MARKER = JdkJfrConsumer.instance().newRecordedEvent(null, null, 0L, 0L);\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/Dispatcher.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-                emitMetadataEvent(currentParser);\n+                onMetadata(currentParser);\n@@ -154,1 +154,0 @@\n-                        currentParser.setFlushOperation(getFlushOperation());\n@@ -224,1 +223,1 @@\n-        emitMetadataEvent(currentParser);\n+        onMetadata(currentParser);\n@@ -227,0 +226,1 @@\n+            onFlush();\n@@ -236,0 +236,1 @@\n+        onFlush();\n@@ -243,1 +244,1 @@\n-                emitMetadataEvent(currentParser);\n+                onMetadata(currentParser);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventDirectoryStream.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.time.Duration;\n@@ -90,1 +91,1 @@\n-            emitMetadataEvent(currentParser);\n+            onMetadata(currentParser);\n@@ -99,1 +100,0 @@\n-            currentParser.setFlushOperation(getFlushOperation());\n@@ -119,13 +119,9 @@\n-        while (true) {\n-            event = currentParser.readEvent();\n-            if (event == Dispatcher.FLUSH_MARKER) {\n-                emitMetadataEvent(currentParser);\n-                dispatchOrdered(c, index);\n-                index = 0;\n-                continue;\n-            }\n-\n-            if (event == null) {\n-                emitMetadataEvent(currentParser);\n-                dispatchOrdered(c, index);\n-                return;\n+        onMetadata(currentParser); \/\/ if events are missing in chunk\n+        while (!currentParser.isChunkFinished()) {\n+            while ((event = currentParser.readStreamingEvent()) != null) {\n+                if (index == cacheSorted.length) {\n+                    RecordedEvent[] tmp = cacheSorted;\n+                    cacheSorted = new RecordedEvent[2 * tmp.length];\n+                    System.arraycopy(tmp, 0, cacheSorted, 0, tmp.length);\n+                }\n+                cacheSorted[index++] = event;\n@@ -133,6 +129,1 @@\n-            if (index == cacheSorted.length) {\n-                RecordedEvent[] tmp = cacheSorted;\n-                cacheSorted = new RecordedEvent[2 * tmp.length];\n-                System.arraycopy(tmp, 0, cacheSorted, 0, tmp.length);\n-            }\n-            cacheSorted[index++] = event;\n+            dispatchOrdered(c, index);\n@@ -143,0 +134,1 @@\n+        onMetadata(currentParser);\n@@ -147,0 +139,1 @@\n+        onFlush();\n@@ -150,0 +143,1 @@\n+        onMetadata(currentParser);\n@@ -151,1 +145,1 @@\n-            RecordedEvent event = currentParser.readEvent();\n+            RecordedEvent event = currentParser.readStreamingEvent();\n@@ -153,5 +147,5 @@\n-                emitMetadataEvent(currentParser);\n-                return;\n-            }\n-            if (event != Dispatcher.FLUSH_MARKER) {\n-                c.dispatch(event);\n+                onFlush();\n+                if (currentParser.isChunkFinished()) {\n+                    return;\n+                }\n+                continue;\n@@ -159,0 +153,2 @@\n+            onMetadata(currentParser);\n+            c.dispatch(event);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventFileStream.java","additions":23,"deletions":27,"binary":false,"changes":50,"status":"modified"}]}