{"files":[{"patch":"@@ -94,2 +94,2 @@\n- * interfaces in a running Java application. An enum type and a record\n- * type are kinds of class; an annotation type is a kind of\n+ * interfaces in a running Java application. An enum class and a record\n+ * class are kinds of class; an annotation interface is a kind of\n@@ -134,1 +134,1 @@\n- * type (or for {@code void}) using a <i>class literal<\/i>.\n+ * class or interface (or for {@code void}) using a <i>class literal<\/i>.\n@@ -162,2 +162,2 @@\n- * All kinds of class, including enum types and record types, may be\n- * hidden classes; all kinds of interface, including annotation types,\n+ * All kinds of class, including enum classes and record classes, may be\n+ * hidden classes; all kinds of interface, including annotation interfaces,\n@@ -297,1 +297,1 @@\n-                if (isInterface()) { \/\/ Note: all annotation types are interfaces\n+                if (isInterface()) { \/\/ Note: all annotation interfaces are interfaces\n@@ -770,2 +770,2 @@\n-     * type.  Note that if this method returns true, {@link #isInterface()}\n-     * would also return true, as all annotation types are also interfaces.\n+     * interface.  Note that if this method returns true, {@link #isInterface()}\n+     * would also return true, as all annotation interfaces are also interfaces.\n@@ -774,1 +774,1 @@\n-     *      type; {@code false} otherwise\n+     *      interface; {@code false} otherwise\n@@ -1301,1 +1301,1 @@\n-     * class is a local or anonymous class immediately enclosed by a type\n+     * class is a local or anonymous class immediately enclosed by a class or interface\n@@ -1459,1 +1459,1 @@\n-     * or anonymous class immediately enclosed by a type declaration,\n+     * or anonymous class immediately enclosed by a class or interface declaration,\n@@ -1653,1 +1653,1 @@\n-     * Return an informative string for the name of this type.\n+     * Return an informative string for the name of this class or interface.\n@@ -1655,1 +1655,1 @@\n-     * @return an informative string for the name of this type\n+     * @return an informative string for the name of this class or interface\n@@ -2374,1 +2374,1 @@\n-     * @jls 8.10 Record Types\n+     * @jls 8.10 Record Classes\n@@ -2395,1 +2395,1 @@\n-     * <p> If this {@code Class} object represents a type that has multiple\n+     * <p> If this {@code Class} object represents a class or interface that has multiple\n@@ -2400,1 +2400,1 @@\n-     * <p> If this {@code Class} object represents a type that has a class\n+     * <p> If this {@code Class} object represents a class or interface that has a class\n@@ -3674,1 +3674,1 @@\n-     * Note that {@link java.lang.Enum} is not itself an enum type.\n+     * Note that {@link java.lang.Enum} is not itself an enum class.\n@@ -3678,1 +3678,1 @@\n-     * and <em>not<\/em> the class of the declaring enum type. The\n+     * and <em>not<\/em> the class of the declaring enum class. The\n@@ -3680,1 +3680,1 @@\n-     * be used to get the class of the enum type declaring the\n+     * be used to get the class of the enum class declaring the\n@@ -3705,1 +3705,1 @@\n-     * <p> Note that class {@link Record} is not a record type and thus invoking\n+     * <p> Note that class {@link Record} is not a record class and thus invoking\n@@ -3709,1 +3709,1 @@\n-     * @jls 8.10 Record Types\n+     * @jls 8.10 Record Classes\n@@ -3733,1 +3733,1 @@\n-     * Class object does not represent an enum type.\n+     * Class object does not represent an enum class.\n@@ -3738,1 +3738,1 @@\n-     *     represent an enum type\n+     *     represent an enum class\n@@ -3748,1 +3748,1 @@\n-     * Class object does not represent an enum type;\n+     * Class object does not represent an enum class;\n@@ -3791,1 +3791,1 @@\n-                    getName() + \" is not an enum type\");\n+                    getName() + \" is not an enum class\");\n@@ -4027,1 +4027,1 @@\n-    \/\/ Annotation types cache their internal (AnnotationType) form\n+    \/\/ Annotation interfaces cache their internal (AnnotationType) form\n@@ -4053,1 +4053,1 @@\n-     * in '...  extends Foo' is distinct from the <em>declaration<\/em> of type\n+     * in '...  extends Foo' is distinct from the <em>declaration<\/em> of class\n@@ -4056,1 +4056,1 @@\n-     * <p> If this {@code Class} object represents a type whose declaration\n+     * <p> If this {@code Class} object represents a class whose declaration\n@@ -4085,1 +4085,1 @@\n-     * <em>declaration<\/em> of type Foo.)\n+     * <em>declaration<\/em> of interface Foo.)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-     * this type represents a nested type. For example, if this type is\n+     * this type represents a nested class or interface. For example, if this type is\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedArrayType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n- * annotation is no longer present in the enum type.\n+ * annotation is no longer present in the enum class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-     *     top-level type, or a local or anonymous class, or a primitive type, or\n+     *     top-level class or interface, or a local or anonymous class, or a primitive type, or\n@@ -58,1 +58,1 @@\n-     *     refers to a non-existent type declaration\n+     *     refers to a non-existent class or interface declaration\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedParameterizedType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-     *     top-level type, or a local or anonymous class, or a primitive type, or\n+     *     top-level class or interface, or a local or anonymous class, or a primitive type, or\n@@ -72,1 +72,1 @@\n-     *     refers to a non-existent type declaration\n+     *     refers to a non-existent class or interface declaration\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-     *              this constructor pertains to an enum type.\n+     *              this constructor pertains to an enum class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-     * an enumerated type; returns {@code false} otherwise.\n+     * an enumerated class; returns {@code false} otherwise.\n@@ -212,1 +212,1 @@\n-     * an enumerated type.\n+     * an enumerated class.\n@@ -261,1 +261,1 @@\n-     *     type declaration\n+     *     class or interface declaration\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-     *     component type refers to a non-existent type declaration\n+     *     component type refers to a non-existent class or interface declaration\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/GenericArrayType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * generic signature information for a type, method or constructor.\n+ * generic signature information for a class or interface, method or constructor.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/GenericSignatureFormatError.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-     *     return type refers to a non-existent type declaration\n+     *     return type refers to a non-existent class or interface declaration\n@@ -287,1 +287,1 @@\n-     *     underlying method's return typed refers to a parameterized\n+     *     underlying method's return type refers to a parameterized\n@@ -606,2 +606,1 @@\n-     * is, a non-static method with a body, declared in an interface\n-     * type.\n+     * is, a non-static method with a body, declared in an interface.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * parameterized type p is created, the generic type declaration that\n+ * parameterized type p is created, the generic class or interface declaration that\n@@ -43,1 +43,1 @@\n- * same generic type declaration and have equal type parameters.\n+ * same generic class or interface declaration and have equal type parameters.\n@@ -60,1 +60,1 @@\n-     *     actual type arguments refers to a non-existent type declaration\n+     *     actual type arguments refers to a non-existent class or interface declaration\n@@ -89,1 +89,1 @@\n-     *     refers to a non-existent type declaration\n+     *     refers to a non-existent class or interface declaration\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ParameterizedType.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -243,2 +243,2 @@\n- * class and the modules of the types referenced by all public method signatures\n- * of a proxy class.  If a superinterface or a referenced type, say {@code T},\n+ * class and the modules of the classes and interfaces referenced by all public method signatures\n+ * of a proxy class.  If a superinterface or a referenced class or interface, say {@code T},\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-     * Return an array of the type names from an array of Classes.\n+     * Return an array of the class and interface names from an array of Classes.\n@@ -209,1 +209,1 @@\n-     * @return the array of class names; or null if there are no classes\n+     * @return the array of class and interface names; or null if classes is empty\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * @jls 8.10 Record Types\n+ * @jls 8.10 Record Classes\n@@ -86,1 +86,1 @@\n-     * Returns a {@code String} that describes the  generic type signature for\n+     * Returns a {@code String} that describes the generic type signature for\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/RecordComponent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}