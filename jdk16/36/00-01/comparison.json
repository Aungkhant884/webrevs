{"files":[{"patch":"@@ -1301,2 +1301,2 @@\n-     * class is a local or anonymous class immediately enclosed by a class or interface\n-     * declaration, instance initializer or static initializer.\n+     * class is a local or anonymous class immediately enclosed by a class or\n+     * interface declaration, instance initializer or static initializer.\n@@ -1459,2 +1459,2 @@\n-     * or anonymous class immediately enclosed by a class or interface declaration,\n-     * instance initializer or static initializer.\n+     * or anonymous class immediately enclosed by a class or\n+     * interface declaration, instance initializer or static initializer.\n@@ -2395,4 +2395,4 @@\n-     * <p> If this {@code Class} object represents a class or interface that has multiple\n-     * declared methods with the same name and parameter types, but different\n-     * return types, then the returned array has a {@code Method} object for\n-     * each such method.\n+     * <p> If this {@code Class} object represents a class or interface that\n+     * has multiple declared methods with the same name and parameter types,\n+     * but different return types, then the returned array has a {@code Method}\n+     * object for each such method.\n@@ -2400,3 +2400,3 @@\n-     * <p> If this {@code Class} object represents a class or interface that has a class\n-     * initialization method {@code <clinit>}, then the returned array does\n-     * <em>not<\/em> have a corresponding {@code Method} object.\n+     * <p> If this {@code Class} object represents a class or interface that\n+     * has a class initialization method {@code <clinit>}, then the returned\n+     * array does <em>not<\/em> have a corresponding {@code Method} object.\n@@ -3705,2 +3705,2 @@\n-     * <p> Note that class {@link Record} is not a record class and thus invoking\n-     * this method on class {@code Record} returns {@code false}.\n+     * <p> Note that class {@link Record} is not a record class and thus\n+     * invoking this method on class {@code Record} returns {@code false}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-     * this type represents a nested class or interface. For example, if this type is\n-     * {@code @TA O<T>.I<S>}, return a representation of {@code @TA O<T>}.\n+     * this type represents a nested class or interface. For example, if this\n+     * type is {@code @TA O<T>.I<S>}, return a representation of {@code @TA O<T>}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedArrayType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-     *     top-level class or interface, or a local or anonymous class, or a primitive type, or\n-     *     void.\n+     *     top-level class or interface, or a local or anonymous class, or\n+     *     a primitive type, or void.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedParameterizedType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-     *     top-level class or interface, or a local or anonymous class, or a primitive type, or\n-     *     void.\n+     *     top-level class or interface, or a local or anonymous class, or\n+     *     a primitive type, or void.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-     * @throws TypeNotPresentException if the underlying array type's\n-     *     component type refers to a non-existent class or interface declaration\n+     * @throws TypeNotPresentException if the underlying array type's component\n+     *     type refers to a non-existent class or interface declaration\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/GenericArrayType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * encountered by a reflective method that needs to interpret the\n- * generic signature information for a class or interface, method or constructor.\n+ * encountered by a reflective method that needs to interpret the generic\n+ * signature information for a class or interface, method or constructor.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/GenericSignatureFormatError.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * parameterized type p is created, the generic class or interface declaration that\n- * p instantiates is resolved, and all type arguments of p are created\n+ * parameterized type p is created, the generic class or interface declaration\n+ * that p instantiates is resolved, and all type arguments of p are created\n@@ -59,2 +59,2 @@\n-     * @throws TypeNotPresentException if any of the\n-     *     actual type arguments refers to a non-existent class or interface declaration\n+     * @throws TypeNotPresentException if any of the actual type arguments\n+     *     refers to a non-existent class or interface declaration\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ParameterizedType.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -243,4 +243,5 @@\n- * class and the modules of the classes and interfaces referenced by all public method signatures\n- * of a proxy class.  If a superinterface or a referenced class or interface, say {@code T},\n- * is in a non-exported package, the {@linkplain Module module} of {@code T} is\n- * updated to export the package of {@code T} to the dynamic module.\n+ * class and the modules of the classes and interfaces referenced by\n+ * all public method signatures of a proxy class.  If a superinterface or\n+ * a referenced class or interface, say {@code T}, is in a non-exported package,\n+ * the {@linkplain Module module} of {@code T} is updated to export the\n+ * package of {@code T} to the dynamic module.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -209,1 +209,2 @@\n-     * @return the array of class and interface names; or null if classes is empty\n+     * @return the array of class and interface names; or null if classes is\n+     * null or empty\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}