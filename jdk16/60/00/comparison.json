{"files":[{"patch":"@@ -79,1 +79,1 @@\n-            \/\/ ignore\n+            throw new IllegalStateException(\"doclint not available\");\n@@ -84,1 +84,5 @@\n-            return false;\n+            \/\/ passively accept all \"plausible\" options\n+            return s.equals(XMSGS_OPTION)\n+                    || s.startsWith(XMSGS_CUSTOM_PREFIX)\n+                    || s.startsWith(XHTML_VERSION_PREFIX)\n+                    || s.startsWith(XCHECK_PACKAGE);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/DocLint.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.Warnings;\n@@ -260,3 +261,6 @@\n-\n-        DocLint.newDocLint().init(this, docLintOpts.toArray(new String[docLintOpts.size()]));\n-        JavaCompiler.instance(context).keepComments = true;\n+        try {\n+            DocLint.newDocLint().init(this, docLintOpts.toArray(new String[docLintOpts.size()]));\n+            JavaCompiler.instance(context).keepComments = true;\n+        } catch (IllegalStateException e) {\n+            Log.instance(context).warning(Warnings.DoclintNotAvailable);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/BasicJavacTask.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2052,0 +2052,3 @@\n+compiler.warn.doclint.not.available=\\\n+    No service provider for doclint is available\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import com.sun.tools.doclint.DocLint;\n@@ -41,0 +40,1 @@\n+import jdk.javadoc.internal.doclint.DocLint;\n@@ -408,1 +408,1 @@\n-                        if (!DocLint.newDocLint().isValidOption(dopt)) {\n+                        if (!(new DocLint()).isValidOption(dopt)) {\n@@ -421,1 +421,1 @@\n-                        if (!DocLint.newDocLint().isValidOption(dopt)) {\n+                        if (!(new DocLint()).isValidOption(dopt)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlOptions.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,0 +113,1 @@\n+compiler.warn.doclint.not.available                     # requires restricted image\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8253996\n+ * @summary Verify doclint behavior when doclint not available\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @run main\/othervm --limit-modules jdk.compiler,jdk.zipfs LimitedImage\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task.Expect;\n+import toolbox.Task.Mode;\n+import toolbox.Task.OutputKind;\n+import toolbox.ToolBox;\n+\n+public class LimitedImage {\n+    public static void main(String... args) throws IOException {\n+        ToolBox tb = new ToolBox();\n+\n+        \/\/showing help should be OK\n+        new JavacTask(tb, Mode.CMDLINE)\n+                .options(\"--help\")\n+                .run().writeAll();\n+\n+        Path testSource = Path.of(\"Test.java\");\n+        tb.writeFile(testSource, \"class Test {}\");\n+\n+        List<String> actualOutput;\n+        List<String> expectedOutput = List.of(\n+                \"- compiler.warn.doclint.not.available\",\n+                \"1 warning\"\n+        );\n+\n+        \/\/check proper diagnostics when zip\/jar FS not present:\n+        System.err.println(\"Test -Xdoclint when doclint not available\");\n+        actualOutput = new JavacTask(tb, Mode.CMDLINE)\n+                .options(\"-XDrawDiagnostics\", \"-Xdoclint\")\n+                .files(testSource)\n+                .outdir(\".\")\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        tb.checkEqual(expectedOutput, actualOutput);\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/doclint\/LimitedImage.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}