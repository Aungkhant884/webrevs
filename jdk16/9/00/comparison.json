{"files":[{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257822\n+ * @summary Verify that zero check is executed before division\/modulo operation.\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroWithSplitIf::test\n+ *                   -XX:+StressGCM -XX:StressSeed=873732072 compiler.loopopts.TestDivZeroWithSplitIf\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestDivZeroWithSplitIf {\n+    public static int iArrFld[] = new int[10];\n+\n+    public static void test() {\n+        int x = 20;\n+        int y = 0;\n+        int z = 10;\n+        for (int i = 9; i < 99; i += 2) {\n+            for (int j = 3; j < 100; j++) {\n+                for (int k = 1; k < 2; k++) {\n+                    try {\n+                        x = (-65229 \/ y); \/\/ Division by zero\n+                        z = (iArrFld[5] \/ 8); \/\/ RangeCheckNode\n+                    } catch (ArithmeticException a_e) {}\n+                    try {\n+                        y = (-38077 \/ y);\n+                        z = (y \/ 9);\n+                    } catch (ArithmeticException a_e) {}\n+                    y = 8;\n+                    z += k;\n+                }\n+            }\n+        }\n+    }\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10; i++) {\n+            test();\n+        }\n+    }\n+}\n+\n","filename":"src\/hotspot\/jtreg\/compiler\/loopopts\/TestDivZeroWithSplitIf.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -1454,0 +1454,1 @@\n+  bool no_dependent_zero_check(Node* n) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-  IdealLoopTree *old_loop = get_loop(dp);\n+  IdealLoopTree* old_loop = get_loop(dp);\n@@ -285,1 +285,2 @@\n-    if (cd->depends_only_on_test()) {\n+    \/\/ Do not rewire Div and Mod nodes which could have a zero divisor to avoid skipping their zero check.\n+    if (cd->depends_only_on_test() && no_dependent_zero_check(cd)) {\n@@ -289,1 +290,1 @@\n-      IdealLoopTree *new_loop = get_loop(get_ctrl(cd));\n+      IdealLoopTree* new_loop = get_loop(get_ctrl(cd));\n@@ -291,2 +292,6 @@\n-        if (!old_loop->_child) old_loop->_body.yank(cd);\n-        if (!new_loop->_child) new_loop->_body.push(cd);\n+        if (!old_loop->_child) {\n+          old_loop->_body.yank(cd);\n+        }\n+        if (!new_loop->_child) {\n+          new_loop->_body.push(cd);\n+        }\n@@ -300,0 +305,19 @@\n+\/\/ Check if the type of a divisor of a Div or Mod node includes zero.\n+bool PhaseIdealLoop::no_dependent_zero_check(Node* n) const {\n+  switch (n->Opcode()) {\n+    case Op_DivI:\n+    case Op_ModI: {\n+      \/\/ Type of divisor includes 0?\n+      const TypeInt* type_divisor = _igvn.type(n->in(2))->is_int();\n+      return (type_divisor->_hi < 0 || type_divisor->_lo > 0);\n+    }\n+    case Op_DivL:\n+    case Op_ModL: {\n+      \/\/ Type of divisor includes 0?\n+      const TypeLong* type_divisor = _igvn.type(n->in(2))->is_long();\n+      return (type_divisor->_hi < 0 || type_divisor->_lo > 0);\n+    }\n+  }\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"}]}