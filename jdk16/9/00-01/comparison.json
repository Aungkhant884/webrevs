{"files":[{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8257822\n- * @summary Verify that zero check is executed before division\/modulo operation.\n- * @requires vm.compiler2.enabled\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroWithSplitIf::test\n- *                   -XX:+StressGCM -XX:StressSeed=873732072 compiler.loopopts.TestDivZeroWithSplitIf\n- *\/\n-\n-package compiler.loopopts;\n-\n-public class TestDivZeroWithSplitIf {\n-    public static int iArrFld[] = new int[10];\n-\n-    public static void test() {\n-        int x = 20;\n-        int y = 0;\n-        int z = 10;\n-        for (int i = 9; i < 99; i += 2) {\n-            for (int j = 3; j < 100; j++) {\n-                for (int k = 1; k < 2; k++) {\n-                    try {\n-                        x = (-65229 \/ y); \/\/ Division by zero\n-                        z = (iArrFld[5] \/ 8); \/\/ RangeCheckNode\n-                    } catch (ArithmeticException a_e) {}\n-                    try {\n-                        y = (-38077 \/ y);\n-                        z = (y \/ 9);\n-                    } catch (ArithmeticException a_e) {}\n-                    y = 8;\n-                    z += k;\n-                }\n-            }\n-        }\n-    }\n-    public static void main(String[] strArr) {\n-        for (int i = 0; i < 10; i++) {\n-            test();\n-        }\n-    }\n-}\n-\n","filename":"src\/hotspot\/jtreg\/compiler\/loopopts\/TestDivZeroWithSplitIf.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8229496\n+ * @bug 8257822\n@@ -30,12 +30,2 @@\n- * @run main\/othervm -Xbatch -XX:LoopUnrollLimit=0\n- *                   -XX:CompileCommand=dontinline,compiler.loopopts.TestDivZeroCheckControl::test*\n- *                   compiler.loopopts.TestDivZeroCheckControl\n- *\/\n-\n-\/*\n- * @test\n- * @summary Verify that zero check is executed before division\/modulo operation.\n- * @requires vm.graal.enabled\n- * @run main\/othervm -Xbatch\n- *                   -XX:CompileCommand=dontinline,compiler.loopopts.TestDivZeroCheckControl::test*\n- *                   compiler.loopopts.TestDivZeroCheckControl\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroWithSplitIf::test\n+ *                   -XX:+StressGCM -XX:StressSeed=873732072 compiler.loopopts.TestDivZeroWithSplitIf\n@@ -46,45 +36,2 @@\n-public class TestDivZeroCheckControl {\n-\n-    public static int test1(int div, int array[]) {\n-        int res = 0;\n-        for (int i = 0; i < 256; i++) {\n-            int j = 0;\n-            do {\n-                array[i] = i;\n-                try {\n-                    res = 1 % div;\n-                } catch (ArithmeticException ex) { }\n-            } while (++j < 9);\n-        }\n-        return res;\n-    }\n-\n-    \/\/ Same as test1 but with division instead of modulo\n-    public static int test2(int div, int array[]) {\n-        int res = 0;\n-        for (int i = 0; i < 256; i++) {\n-            int j = 0;\n-            do {\n-                array[i] = i;\n-                try {\n-                    res = 1 \/ div;\n-                } catch (ArithmeticException ex) { }\n-            } while (++j < 9);\n-        }\n-        return res;\n-    }\n-\n-    \/\/ Same as test1 but with long\n-    public static long test3(long div, int array[]) {\n-        long res = 0;\n-        for (int i = 0; i < 256; i++) {\n-            int j = 0;\n-            do {\n-                array[i] = i;\n-                try {\n-                    res = 1L % div;\n-                } catch (ArithmeticException ex) { }\n-            } while (++j < 9);\n-        }\n-        return res;\n-    }\n+public class TestDivZeroWithSplitIf {\n+    public static int iArrFld[] = new int[10];\n@@ -92,11 +39,19 @@\n-    \/\/ Same as test2 but with long\n-    public static long test4(long div, int array[]) {\n-        long res = 0;\n-        for (int i = 0; i < 256; i++) {\n-            int j = 0;\n-            do {\n-                array[i] = i;\n-                try {\n-                    res = 1L \/ div;\n-                } catch (ArithmeticException ex) { }\n-            } while (++j < 9);\n+    public static void test() {\n+        int x = 20;\n+        int y = 0;\n+        int z = 10;\n+        for (int i = 9; i < 99; i += 2) {\n+            for (int j = 3; j < 100; j++) {\n+                for (int k = 1; k < 2; k++) {\n+                    try {\n+                        x = (-65229 \/ y); \/\/ Division by zero\n+                        z = (iArrFld[5] \/ 8); \/\/ RangeCheckNode\n+                    } catch (ArithmeticException a_e) {}\n+                    try {\n+                        y = (-38077 \/ y);\n+                        z = (y \/ 9);\n+                    } catch (ArithmeticException a_e) {}\n+                    y = 8;\n+                    z += k;\n+                }\n+            }\n@@ -104,1 +59,0 @@\n-        return res;\n@@ -106,8 +60,3 @@\n-\n-    public static void main(String[] args) {\n-        int array[] = new int[256];\n-        for (int i = 0; i < 50_000; ++i) {\n-            test1(0, array);\n-            test2(0, array);\n-            test3(0, array);\n-            test4(0, array);\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10; i++) {\n+            test();\n@@ -117,0 +66,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDivZeroCheckControl.java","additions":29,"deletions":79,"binary":false,"changes":108,"status":"modified"}]}