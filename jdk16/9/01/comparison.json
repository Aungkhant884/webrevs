{"files":[{"patch":"@@ -1454,0 +1454,1 @@\n+  bool no_dependent_zero_check(Node* n) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-  IdealLoopTree *old_loop = get_loop(dp);\n+  IdealLoopTree* old_loop = get_loop(dp);\n@@ -285,1 +285,2 @@\n-    if (cd->depends_only_on_test()) {\n+    \/\/ Do not rewire Div and Mod nodes which could have a zero divisor to avoid skipping their zero check.\n+    if (cd->depends_only_on_test() && no_dependent_zero_check(cd)) {\n@@ -289,1 +290,1 @@\n-      IdealLoopTree *new_loop = get_loop(get_ctrl(cd));\n+      IdealLoopTree* new_loop = get_loop(get_ctrl(cd));\n@@ -291,2 +292,6 @@\n-        if (!old_loop->_child) old_loop->_body.yank(cd);\n-        if (!new_loop->_child) new_loop->_body.push(cd);\n+        if (!old_loop->_child) {\n+          old_loop->_body.yank(cd);\n+        }\n+        if (!new_loop->_child) {\n+          new_loop->_body.push(cd);\n+        }\n@@ -300,0 +305,19 @@\n+\/\/ Check if the type of a divisor of a Div or Mod node includes zero.\n+bool PhaseIdealLoop::no_dependent_zero_check(Node* n) const {\n+  switch (n->Opcode()) {\n+    case Op_DivI:\n+    case Op_ModI: {\n+      \/\/ Type of divisor includes 0?\n+      const TypeInt* type_divisor = _igvn.type(n->in(2))->is_int();\n+      return (type_divisor->_hi < 0 || type_divisor->_lo > 0);\n+    }\n+    case Op_DivL:\n+    case Op_ModL: {\n+      \/\/ Type of divisor includes 0?\n+      const TypeLong* type_divisor = _igvn.type(n->in(2))->is_long();\n+      return (type_divisor->_hi < 0 || type_divisor->_lo > 0);\n+    }\n+  }\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8229496\n+ * @bug 8257822\n@@ -30,12 +30,2 @@\n- * @run main\/othervm -Xbatch -XX:LoopUnrollLimit=0\n- *                   -XX:CompileCommand=dontinline,compiler.loopopts.TestDivZeroCheckControl::test*\n- *                   compiler.loopopts.TestDivZeroCheckControl\n- *\/\n-\n-\/*\n- * @test\n- * @summary Verify that zero check is executed before division\/modulo operation.\n- * @requires vm.graal.enabled\n- * @run main\/othervm -Xbatch\n- *                   -XX:CompileCommand=dontinline,compiler.loopopts.TestDivZeroCheckControl::test*\n- *                   compiler.loopopts.TestDivZeroCheckControl\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroWithSplitIf::test\n+ *                   -XX:+StressGCM -XX:StressSeed=873732072 compiler.loopopts.TestDivZeroWithSplitIf\n@@ -46,45 +36,2 @@\n-public class TestDivZeroCheckControl {\n-\n-    public static int test1(int div, int array[]) {\n-        int res = 0;\n-        for (int i = 0; i < 256; i++) {\n-            int j = 0;\n-            do {\n-                array[i] = i;\n-                try {\n-                    res = 1 % div;\n-                } catch (ArithmeticException ex) { }\n-            } while (++j < 9);\n-        }\n-        return res;\n-    }\n-\n-    \/\/ Same as test1 but with division instead of modulo\n-    public static int test2(int div, int array[]) {\n-        int res = 0;\n-        for (int i = 0; i < 256; i++) {\n-            int j = 0;\n-            do {\n-                array[i] = i;\n-                try {\n-                    res = 1 \/ div;\n-                } catch (ArithmeticException ex) { }\n-            } while (++j < 9);\n-        }\n-        return res;\n-    }\n-\n-    \/\/ Same as test1 but with long\n-    public static long test3(long div, int array[]) {\n-        long res = 0;\n-        for (int i = 0; i < 256; i++) {\n-            int j = 0;\n-            do {\n-                array[i] = i;\n-                try {\n-                    res = 1L % div;\n-                } catch (ArithmeticException ex) { }\n-            } while (++j < 9);\n-        }\n-        return res;\n-    }\n+public class TestDivZeroWithSplitIf {\n+    public static int iArrFld[] = new int[10];\n@@ -92,11 +39,19 @@\n-    \/\/ Same as test2 but with long\n-    public static long test4(long div, int array[]) {\n-        long res = 0;\n-        for (int i = 0; i < 256; i++) {\n-            int j = 0;\n-            do {\n-                array[i] = i;\n-                try {\n-                    res = 1L \/ div;\n-                } catch (ArithmeticException ex) { }\n-            } while (++j < 9);\n+    public static void test() {\n+        int x = 20;\n+        int y = 0;\n+        int z = 10;\n+        for (int i = 9; i < 99; i += 2) {\n+            for (int j = 3; j < 100; j++) {\n+                for (int k = 1; k < 2; k++) {\n+                    try {\n+                        x = (-65229 \/ y); \/\/ Division by zero\n+                        z = (iArrFld[5] \/ 8); \/\/ RangeCheckNode\n+                    } catch (ArithmeticException a_e) {}\n+                    try {\n+                        y = (-38077 \/ y);\n+                        z = (y \/ 9);\n+                    } catch (ArithmeticException a_e) {}\n+                    y = 8;\n+                    z += k;\n+                }\n+            }\n@@ -104,1 +59,0 @@\n-        return res;\n@@ -106,8 +60,3 @@\n-\n-    public static void main(String[] args) {\n-        int array[] = new int[256];\n-        for (int i = 0; i < 50_000; ++i) {\n-            test1(0, array);\n-            test2(0, array);\n-            test3(0, array);\n-            test4(0, array);\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10; i++) {\n+            test();\n@@ -117,0 +66,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDivZeroCheckControl.java","additions":29,"deletions":79,"binary":false,"changes":108,"status":"modified"}]}