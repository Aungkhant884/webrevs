{"files":[{"patch":"@@ -1610,0 +1610,2 @@\n+\n+  bool is_safe_load_ctrl(Node* ctrl);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1432,1 +1432,1 @@\n-        if (!n->is_Load() || late_load_ctrl != n_ctrl) {\n+        if (!n->is_Load() || (late_load_ctrl != n_ctrl && is_safe_load_ctrl(late_load_ctrl))) {\n@@ -1528,0 +1528,7 @@\n+bool PhaseIdealLoop::is_safe_load_ctrl(Node* ctrl) {\n+  if (ctrl->is_Proj() && ctrl->in(0)->is_Call() && ctrl->has_out_with(Op_Catch)) {\n+    return false;\n+  }\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8260709\n+ * @summary C2: assert(false) failed: unscheduable graph\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation TestLoadPinnedAfterAllocate\n+ *\n+ *\/\n+\n+public class TestLoadPinnedAfterAllocate {\n+    private int field;\n+    private static volatile int barrier;\n+    private static Object field2;\n+\n+    public static void main(String[] args) {\n+        final TestLoadPinnedAfterAllocate test = new TestLoadPinnedAfterAllocate();\n+        for (int i = 0; i < 20_000; i++) {\n+            test.test(1, 10);\n+        }\n+    }\n+\n+    private int test(int start, int stop) {\n+        int[] array = new int[10];\n+        for (int j = 0; j < 10; j++) {\n+            barrier = 1;\n+            \/\/ early control for field load below\n+            for (int i = 1; i < 10; i *= 2) {\n+                field2 = array;\n+                array = new int[10];\n+                \/\/ late control for field load below\n+            }\n+        }\n+        int v = field;\n+        array[0] = v;\n+        return v+v;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoadPinnedAfterAllocate.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}