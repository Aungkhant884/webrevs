{"files":[{"patch":"@@ -114,1 +114,1 @@\n-     * Objects.equals(this.c(), r.c()} would return {@code true}.\n+     * Objects.equals(this.c, r.c} would return {@code true}.\n@@ -121,2 +121,1 @@\n-     * PW.valueOf(this.c()).equals(PW.valueOf(r.c()))} would return\n-     * {@code true}.\n+     * PW.compare(this.c, r.c)} would return {@code 0}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Record.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257598\n+ * @summary check that Record::equals uses the fields and not the accessors for the comparison\n+ * @run testng CheckEqualityIsBasedOnFields\n+ *\/\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.*;\n+\n+public class CheckEqualityIsBasedOnFields {\n+    public record R01(boolean x) {\n+        public boolean x() {\n+            return x ? x : !x;\n+        }\n+    }\n+\n+    public record R02(byte x) {\n+        public byte x() {\n+            return (x >= 50) ? (byte)(x - 50) : x;\n+        }\n+    }\n+\n+    public record R03(short x) {\n+        public short x() {\n+            return (x >= 50) ? (short)(x - 50) : x;\n+        }\n+    }\n+\n+    public record R04(char x) {\n+        public char x() {\n+            return (x >= 50) ? (char)(x - 50) : x;\n+        }\n+    }\n+\n+    public record R05(int x) {\n+        public int x() {\n+            return (x >= 50) ? (x - 50) : x;\n+        }\n+    }\n+\n+    public record R06(long x) {\n+        public long x() {\n+            return (x >= 50) ? (long)(x - 50) : x;\n+        }\n+    }\n+\n+    public record R07(float x) {\n+        public float x() {\n+            return (x >= 50) ? (float)(x - 50) : x;\n+        }\n+    }\n+    public record R08(double x) {\n+        public double x() {\n+            return (x >= 50) ? (double)(x - 50) : x;\n+        }\n+    }\n+\n+    public record R09(String x) {\n+        public String x() {\n+            return (x.length() > 1) ? x.substring(0, 1) : x;\n+        }\n+    }\n+\n+    @DataProvider(name = \"recordData\")\n+    public Object[][] recordTypeAndExpectedValue() {\n+        return new Object[][] {\n+                new Object[] { R01.class, boolean.class, new Object[]{true, false} },\n+                new Object[] { R02.class, byte.class, new Object[]{(byte)0, (byte)1, (byte)2, (byte)3, (byte)4, (byte)5,\n+                        (byte)50, (byte)51, (byte)52, (byte)53, (byte)54, (byte)55} },\n+                new Object[] { R03.class, short.class, new Object[]{(short)0, (short)1, (short)2, (short)3, (short)4, (short)5,\n+                        (short)50, (short)51, (short)52, (short)53, (short)54, (short)55} },\n+                new Object[] { R04.class, char.class, new Object[]{(char)0, (char)1, (char)2, (char)3, (char)4, (char)5,\n+                        (char)50, (char)51, (char)52, (char)53, (char)54, (char)55} },\n+                new Object[] { R05.class, int.class, new Object[]{0, 1, 2, 3, 4, 5, 50, 51, 52, 53, 54, 55} },\n+                new Object[] { R06.class, long.class, new Object[]{0L, 1L, 2L, 3L, 4L, 5L, 50L, 51L, 52L, 53L, 54L, 55L} },\n+                new Object[] { R07.class, float.class, new Object[]{(float)0, (float)1, (float)2, (float)3, (float)4, (float)5,\n+                        (float)50, (float)51, (float)52, (float)53, (float)54, (float)55} },\n+                new Object[] { R08.class, double.class, new Object[]{(double)0, (double)1, (double)2, (double)3, (double)4, (double)5,\n+                        (double)50, (double)51, (double)52, (double)53, (double)54, (double)55} },\n+                new Object[] { R09.class, String.class, new Object[]{\"1\", \"2\", \"3\", \"4\", \"5\",\n+                        \"1_\", \"2_\", \"3_\", \"4_\", \"5_\"} },\n+        };\n+    }\n+\n+    @Test(dataProvider = \"recordData\")\n+    public void testEqualsDoesntUseAccessors(Class<?> clazz, Class<?> componentClass, Object[] expectedXValues) throws Exception {\n+        Constructor<?> ctor;\n+        Method getter, equalsMethod;\n+        ctor = clazz.getConstructor(componentClass);\n+        equalsMethod = clazz.getMethod(\"equals\", Object.class);\n+        getter = clazz.getMethod(\"x\");\n+        for (int i = 0; i < expectedXValues.length \/ 2; i++) {\n+            Object rec1 = ctor.newInstance(expectedXValues[i]);\n+            Object rec2 = ctor.newInstance(expectedXValues[i + expectedXValues.length \/ 2]);\n+            System.out.println(rec1.toString());\n+            System.out.println(rec2.toString());\n+            assertFalse((boolean) equalsMethod.invoke(rec1, rec2));\n+            assertNotEquals(expectedXValues[i], expectedXValues[i + expectedXValues.length \/ 2]);\n+            assertEquals(getter.invoke(rec1), getter.invoke(rec2));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/CheckEqualityIsBasedOnFields.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}