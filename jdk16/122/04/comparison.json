{"files":[{"patch":"@@ -2488,1 +2488,0 @@\n-    if (dst->encoding() == src->encoding()) return;\n@@ -2513,1 +2512,0 @@\n-    if (dst->encoding() == src->encoding()) return;\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,0 +171,3 @@\n+  \/\/ Move with zero extension\n+  void movfltz(XMMRegister dst, XMMRegister src) { movss(dst, src); }\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3378,1 +3378,1 @@\n-      case  4: __ movflt ($dst$$XMMRegister, $src$$XMMRegister); break;\n+      case  4: __ movfltz($dst$$XMMRegister, $src$$XMMRegister); break;\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+\/*\n+ * @test\n+ * @bug 8259775\n+ * @summary Incorrect code-gen for VectorReinterpret operation\n+ * @modules jdk.incubator.vector\n+ * @run main\/othervm -Xbatch compiler.vectorapi.VectorReinterpretTest\n+ *\/\n+\n+public class VectorReinterpretTest {\n+    static final VectorSpecies<Byte> SPECIES_128 = ByteVector.SPECIES_128;\n+    static final VectorSpecies<Byte> SPECIES_256 = ByteVector.SPECIES_256;\n+    static final VectorSpecies<Byte> SPECIES_512 = ByteVector.SPECIES_512;\n+\n+    static byte[] a = new byte[64];\n+\n+    private static void test256_128_256() {\n+        ByteVector av = ByteVector.fromArray(SPECIES_256, a, 0);\n+        ByteVector bv = (ByteVector)av.reinterpretShape(SPECIES_128, 0);\n+        ByteVector cv = (ByteVector)bv.reinterpretShape(SPECIES_256, 0);\n+\n+        if (bv.reduceLanes(VectorOperators.ADD) != 16 ||\n+            cv.reduceLanes(VectorOperators.ADD) != 16) {\n+            throw new Error(\"Failed\");\n+        }\n+    }\n+\n+    private static void test512_256_512() {\n+        ByteVector av = ByteVector.fromArray(SPECIES_512, a, 0);\n+        ByteVector bv = (ByteVector)av.reinterpretShape(SPECIES_256, 0);\n+        ByteVector cv = (ByteVector)bv.reinterpretShape(SPECIES_512, 0);\n+\n+        if (bv.reduceLanes(VectorOperators.ADD) != 32 ||\n+            cv.reduceLanes(VectorOperators.ADD) != 32) {\n+            throw new Error(\"Failed\");\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = 1;\n+        }\n+\n+        for (int i = 0; i < 100000; i++) {\n+            test256_128_256();\n+            test512_256_512();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReinterpretTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}