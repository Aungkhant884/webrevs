{"files":[{"patch":"@@ -28,0 +28,5 @@\n+import javax.swing.AbstractAction;\n+import javax.swing.AbstractButton;\n+import javax.swing.ButtonGroup;\n+import javax.swing.ButtonModel;\n+import javax.swing.DefaultButtonModel;\n@@ -29,0 +34,2 @@\n+import javax.swing.JToggleButton;\n+import javax.swing.KeyStroke;\n@@ -33,0 +40,10 @@\n+import java.awt.AWTKeyStroke;\n+import java.awt.Component;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n@@ -34,0 +51,25 @@\n+    private KeyListener keyListener = null;\n+\n+    @SuppressWarnings(\"serial\")\n+    private class SelectPreviousBtn extends AbstractAction {\n+        public SelectPreviousBtn() {\n+            super(\"Previous\");\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            AquaButtonToggleUI.this.selectToggleButton(e, false);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    private class SelectNextBtn extends AbstractAction {\n+        public SelectNextBtn() {\n+            super(\"Next\");\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            AquaButtonToggleUI.this.selectToggleButton(e, true);\n+        }\n+    }\n@@ -43,0 +85,265 @@\n+\n+    private KeyListener createKeyListener() {\n+        if (keyListener == null) {\n+            keyListener = new AquaButtonToggleUI.KeyHandler();\n+        }\n+\n+        return keyListener;\n+    }\n+\n+    private boolean isValidToggleButtonObj(Object obj) {\n+        return ((obj instanceof JToggleButton) &&\n+                ((JToggleButton)obj).isVisible() &&\n+                ((JToggleButton)obj).isEnabled());\n+    }\n+\n+    @Override\n+    protected void installListeners(AbstractButton button) {\n+        super.installListeners(button);\n+\n+        \/\/Only for JToggleButton\n+        if (!(button instanceof JToggleButton))\n+            return;\n+\n+        keyListener = createKeyListener();\n+        button.addKeyListener(keyListener);\n+\n+        button.setFocusTraversalKeysEnabled(false);\n+\n+        button.getActionMap().put(\"Previous\", new SelectPreviousBtn());\n+        button.getActionMap().put(\"Next\", new SelectNextBtn());\n+\n+        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                put(KeyStroke.getKeyStroke(\"UP\"), \"Previous\");\n+        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                put(KeyStroke.getKeyStroke(\"DOWN\"), \"Next\");\n+        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                put(KeyStroke.getKeyStroke(\"LEFT\"), \"Previous\");\n+        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                put(KeyStroke.getKeyStroke(\"RIGHT\"), \"Next\");\n+    }\n+\n+    @Override\n+    protected void uninstallListeners(AbstractButton button) {\n+        super.uninstallListeners(button);\n+\n+        \/\/Only for JToggleButton\n+        if (!(button instanceof JToggleButton))\n+            return;\n+\n+        \/\/Unmap actions from the arrow keys.\n+        button.getActionMap().remove(\"Previous\");\n+        button.getActionMap().remove(\"Next\");\n+\n+        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                remove(KeyStroke.getKeyStroke(\"UP\"));\n+        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                remove(KeyStroke.getKeyStroke(\"DOWN\"));\n+        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                remove(KeyStroke.getKeyStroke(\"LEFT\"));\n+        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                remove(KeyStroke.getKeyStroke(\"RIGHT\"));\n+\n+        if (keyListener != null ) {\n+            button.removeKeyListener(keyListener);\n+            keyListener = null;\n+        }\n+    }\n+\n+    \/**\n+     * Select toggle button based on \"Previous\" or \"Next\" operation\n+     *\n+     * @param event, the event object.\n+     * @param next, indicate if it's next one\n+     *\/\n+    private void selectToggleButton(ActionEvent event, boolean next) {\n+        Object eventSrc = event.getSource();\n+\n+        \/\/Check whether the source is JToggleButton, if so, whether it is visible\n+        if (!isValidToggleButtonObj(eventSrc))\n+            return;\n+\n+        AquaButtonToggleUI.ButtonGroupInfo btnGroupInfo = new AquaButtonToggleUI.ButtonGroupInfo((JToggleButton)eventSrc);\n+        btnGroupInfo.selectNewButton(next);\n+    }\n+\n+    \/**\n+     * ButtonGroupInfo, used to get related info in button group\n+     * for given toggle button.\n+     *\/\n+    private class ButtonGroupInfo {\n+        JToggleButton activeBtn = null;\n+\n+        JToggleButton firstBtn = null;\n+        JToggleButton lastBtn = null;\n+\n+        JToggleButton previousBtn = null;\n+        JToggleButton nextBtn = null;\n+\n+        HashSet<JToggleButton> btnsInGroup = null;\n+        boolean srcFound = false;\n+\n+        public ButtonGroupInfo(JToggleButton btn) {\n+            activeBtn = btn;\n+            btnsInGroup = new HashSet<JToggleButton>();\n+        }\n+\n+        \/\/Check if given object is in the button group\n+        boolean containsInGroup(Object obj) {\n+            return btnsInGroup.contains(obj);\n+        }\n+\n+        \/\/Check if the next object to gain focus belongs\n+        \/\/to the button group or not\n+        Component getFocusTransferBaseComponent(boolean next) {\n+            return firstBtn;\n+        }\n+\n+        boolean getButtonGroupInfo() {\n+            if (activeBtn == null)\n+                return false;\n+\n+            btnsInGroup.clear();\n+\n+            \/\/Get the button model from ths source.\n+            ButtonModel model = activeBtn.getModel();\n+            if (!(model instanceof DefaultButtonModel))\n+                return false;\n+\n+            \/\/ If the button model is DefaultButtonModel, and use it, otherwise return.\n+            DefaultButtonModel bm = (DefaultButtonModel) model;\n+\n+            \/\/get the ButtonGroup of the button from the button model\n+            ButtonGroup group = bm.getGroup();\n+            if (group == null)\n+                return false;\n+\n+            Enumeration<AbstractButton> e = group.getElements();\n+            if (e == null)\n+                return false;\n+\n+            while (e.hasMoreElements()) {\n+                AbstractButton curElement = e.nextElement();\n+                if (!isValidToggleButtonObj(curElement))\n+                    continue;\n+\n+                btnsInGroup.add((JToggleButton) curElement);\n+\n+                \/\/ If firstBtn is not set yet, curElement is that first button\n+                if (null == firstBtn)\n+                    firstBtn = (JToggleButton)curElement;\n+\n+                if (activeBtn == curElement)\n+                    srcFound = true;\n+                else if (!srcFound) {\n+                    \/\/The source has not been yet found and the current element\n+                    \/\/ is the last previousBtn\n+                    previousBtn = (JToggleButton) curElement;\n+                } else if (nextBtn == null) {\n+                    \/\/The source has been found and the current element\n+                    \/\/is the next valid button of the list\n+                    nextBtn = (JToggleButton) curElement;\n+                }\n+\n+                \/\/Set new last \"valid\" JToggleButton of the list\n+                lastBtn = (JToggleButton)curElement;\n+            }\n+\n+            return true;\n+        }\n+\n+        \/**\n+         * Find the new toggle button that focus needs to be\n+         * moved to in the group, select the button\n+         *\n+         * @param next, indicate if it's arrow up\/left or down\/right\n+         *\/\n+        void selectNewButton(boolean next) {\n+            if (!getButtonGroupInfo())\n+                return;\n+\n+            if (srcFound) {\n+                JToggleButton newSelectedBtn = null;\n+                if (next) {\n+                    \/\/Select Next button. Cycle to the first button if the source\n+                    \/\/button is the last of the group.\n+                    newSelectedBtn = (null == nextBtn) ? firstBtn : nextBtn;\n+                } else {\n+                    \/\/Select previous button. Cycle to the last button if the source\n+                    \/\/button is the first button of the group.\n+                    newSelectedBtn = (null == previousBtn) ? lastBtn: previousBtn;\n+                }\n+                if (newSelectedBtn != null && newSelectedBtn != activeBtn) {\n+                    newSelectedBtn.requestFocusInWindow();\n+                    newSelectedBtn.setSelected(true);\n+                }\n+            }\n+        }\n+\n+        \/**\n+         * Find the button group the passed in JToggleButton belongs to, and\n+         * move focus to next component of the last button in the group\n+         * or previous compoennt of first button\n+         *\n+         * @param next, indicate if jump to next component or previous\n+         *\/\n+        void jumpToNextComponent(boolean next) {\n+            if (!getButtonGroupInfo()) {\n+                \/\/In case the button does not belong to any group, it needs\n+                \/\/to be treated as a component\n+                if (activeBtn != null) {\n+                    lastBtn = activeBtn;\n+                    firstBtn = activeBtn;\n+                } else\n+                    return;\n+            }\n+\n+            \/\/If next component in the parent window is not in the button\n+            \/\/group, current active button will be base, otherwise, the base\n+            \/\/ will be first or last button in the button group\n+            Component focusBase = getFocusTransferBaseComponent(next);\n+            if (focusBase != null) {\n+                if (next) {\n+                    KeyboardFocusManager.\n+                            getCurrentKeyboardFocusManager().focusNextComponent(focusBase);\n+                } else {\n+                    KeyboardFocusManager.\n+                            getCurrentKeyboardFocusManager().focusPreviousComponent(focusBase);\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * JToggleButton KeyListener\n+     *\/\n+    private class KeyHandler implements KeyListener {\n+        \/\/This listener checks if the key event is a focus traversal key event\n+        \/\/ on a toggle button, consume the event if so and move the focus\n+        \/\/ to next\/previous component\n+        @Override\n+        public void keyPressed(KeyEvent e) {\n+            AWTKeyStroke stroke = AWTKeyStroke.getAWTKeyStrokeForEvent(e);\n+            if (stroke != null && e.getSource() instanceof JToggleButton) {\n+                JToggleButton source = (JToggleButton) e.getSource();\n+                boolean next = isFocusTraversalKey(source,\n+                        KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, stroke);\n+                if (next || isFocusTraversalKey(source,\n+                        KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, stroke)) {\n+                    e.consume();\n+                    AquaButtonToggleUI.ButtonGroupInfo btnGroupInfo = new AquaButtonToggleUI.ButtonGroupInfo(source);\n+                    btnGroupInfo.jumpToNextComponent(next);\n+                }\n+            }\n+        }\n+\n+        private boolean isFocusTraversalKey(JComponent c, int id,\n+                                            AWTKeyStroke stroke) {\n+            Set<AWTKeyStroke> keys = c.getFocusTraversalKeys(id);\n+            return keys != null && keys.contains(stroke);\n+        }\n+\n+        @Override public void keyReleased(KeyEvent e) {}\n+\n+        @Override public void keyTyped(KeyEvent e) {}\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonToggleUI.java","additions":307,"deletions":0,"binary":false,"changes":307,"status":"modified"},{"patch":"@@ -188,2 +188,1 @@\n-        super.installListeners(b);\n-        AquaButtonListener listener = getAquaButtonListener(b);\n+        final AquaButtonListener listener = createButtonListener(b);\n@@ -195,0 +194,5 @@\n+            b.addMouseListener(listener);\n+            b.addMouseMotionListener(listener);\n+            b.addFocusListener(listener);\n+            b.addPropertyChangeListener(listener);\n+            b.addChangeListener(listener);\n@@ -220,1 +224,0 @@\n-        super.uninstallListeners(b);\n@@ -224,0 +227,6 @@\n+            b.removeMouseListener(listener);\n+            b.removeMouseListener(listener);\n+            b.removeMouseMotionListener(listener);\n+            b.removeFocusListener(listener);\n+            b.removeChangeListener(listener);\n+            b.removePropertyChangeListener(listener);\n@@ -240,17 +249,0 @@\n-    \/**\n-     * Returns the AquaButtonListener for the passed in Button, or null if one\n-     * could not be found.\n-     *\/\n-    private AquaButtonListener getAquaButtonListener(AbstractButton b) {\n-        MouseMotionListener[] listeners = b.getMouseMotionListeners();\n-\n-        if (listeners != null) {\n-            for (MouseMotionListener listener : listeners) {\n-                if (listener instanceof AquaButtonListener) {\n-                    return (AquaButtonListener) listener;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -788,2 +788,4 @@\n-                    btnModel.setPressed(true);\n-                    btnModel.setArmed(true);\n+                    if (newSelectedBtn instanceof JRadioButton) {\n+                        btnModel.setPressed(true);\n+                        btnModel.setArmed(true);\n+                    }\n@@ -792,2 +794,4 @@\n-                    btnModel.setPressed(false);\n-                    btnModel.setArmed(false);\n+                    if (newSelectedBtn instanceof JRadioButton) {\n+                        btnModel.setPressed(false);\n+                        btnModel.setArmed(false);\n+                    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicButtonUI.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javax.swing.AbstractAction;\n@@ -46,0 +47,1 @@\n+import java.awt.event.ActionEvent;\n@@ -52,0 +54,1 @@\n+    private static boolean toggleButtonActionPerformed;\n@@ -79,0 +82,14 @@\n+                toggleButton1.setAction(new AbstractAction() {\n+                    @Override\n+                    public void actionPerformed(ActionEvent e) {\n+                        toggleButtonActionPerformed = true;\n+                    }\n+                });\n+\n+                toggleButton2.setAction(new AbstractAction() {\n+                    @Override\n+                    public void actionPerformed(ActionEvent e) {\n+                        toggleButtonActionPerformed = true;\n+                    }\n+                });\n+\n@@ -130,0 +147,7 @@\n+    private static void checkToggleButtonActionPerformed() {\n+        if (toggleButtonActionPerformed) {\n+            throw new RuntimeException(\"Toggle Button Action should not be\" +\n+                    \"performed\");\n+        }\n+    }\n+\n@@ -184,0 +208,1 @@\n+                checkToggleButtonActionPerformed();\n@@ -187,0 +212,1 @@\n+                checkToggleButtonActionPerformed();\n@@ -190,0 +216,1 @@\n+                checkToggleButtonActionPerformed();\n@@ -193,0 +220,1 @@\n+                checkToggleButtonActionPerformed();\n@@ -217,1 +245,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/ButtonGroup\/TestButtonGroupFocusTraversal.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"}]}