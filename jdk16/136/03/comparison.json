{"files":[{"patch":"@@ -18858,5 +18858,1 @@\n-    if (sh >= 8) {\n-      __ eor(as_FloatRegister($src$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n+    if (sh < 8) {\n@@ -18877,5 +18873,1 @@\n-    if (sh >= 8) {\n-      __ eor(as_FloatRegister($src$$reg), __ T16B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n+    if (sh < 8) {\n@@ -18896,6 +18888,2 @@\n-    if (sh >= 16) {\n-      __ eor(as_FloatRegister($src$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ ushr(as_FloatRegister($dst$$reg), __ T4H,\n+    if (sh < 16) {\n+      __ usra(as_FloatRegister($dst$$reg), __ T4H,\n@@ -18915,5 +18903,1 @@\n-    if (sh >= 16) {\n-      __ eor(as_FloatRegister($src$$reg), __ T16B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n+    if (sh < 16) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,435 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8260585\n+ * @summary AArch64: Wrong code generated for shifting right and accumulating four unsigned short integers.\n+ * @run main\/othervm compiler.c2.TestShiftRightAndAccumulate\n+ *\n+ *\/\n+\n+package compiler.c2;\n+\n+import java.util.Random;\n+import java.util.Arrays;\n+\n+public class TestShiftRightAndAccumulate {\n+    private static final int SMALL_LEN = 16;\n+    private static final int LARGE_LEN = 1000;\n+    private static final int NUM_ITERS = 200000;\n+    private static final int MAX_TESTS = 10;\n+\n+    private static byte[]  bytesA,  bytesB,  bytesC;\n+    private static short[] shortsA, shortsB, shortsC;\n+    private static char[]  charsA,  charsB,  charsC;\n+    private static int[]   intsA,   intsB,   intsC;\n+    private static long[]  longsA,  longsB,  longsC;\n+\n+    private static byte  gBytes[][];\n+    private static short gShorts[][];\n+    private static char  gChars[][];\n+    private static int   gInts[][];\n+    private static long  gLongs[][];\n+\n+    private static Random r = new Random(32781);\n+\n+    public static void main(String args[]) {\n+      test_small();\n+      test_large();\n+      System.out.println(\"Test PASSED\");\n+    }\n+\n+    static void test_small() {\n+        test_init(SMALL_LEN);\n+        for (int i = 0; i < NUM_ITERS; i++) {\n+            test_bytes();\n+            test_shorts();\n+            test_chars();\n+            test_ints();\n+            test_longs();\n+        }\n+    }\n+\n+    static void test_large() {\n+        test_init(LARGE_LEN);\n+        for (int i = 0; i < NUM_ITERS; i++) {\n+            test_bytes();\n+            test_shorts();\n+            test_chars();\n+            test_ints();\n+            test_longs();\n+        }\n+    }\n+\n+    static void test_bytes() {\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >> 1));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[0]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >> 8));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[1]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >> 13));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[2]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >> 19));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[3]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >>> 2));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[4]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >>> 8));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[5]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >>> 13));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[6]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >>> 19));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[7]));\n+    }\n+\n+    static void test_shorts() {\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 7));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[0]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 16));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[1]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 23));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[2]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 35));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[3]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >>> 7));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[4]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >>> 16));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[5]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >>> 23));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[6]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >>> 35));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[7]));\n+    }\n+\n+    static void test_chars() {\n+        for (int i = 0; i < charsC.length; i++) {\n+            charsC[i] = (char) (charsA[i] + (charsB[i] >>> 4));\n+            charsC[i] = (char) (charsC[i] + charsA[i] + charsB[i]);\n+        }\n+        assertTrue(Arrays.equals(charsC, gChars[0]));\n+\n+        for (int i = 0; i < charsC.length; i++) {\n+            charsC[i] = (char) (charsA[i] + (charsB[i] >>> 16));\n+            charsC[i] = (char) (charsC[i] + charsA[i] + charsB[i]);\n+        }\n+        assertTrue(Arrays.equals(charsC, gChars[1]));\n+\n+        for (int i = 0; i < charsC.length; i++) {\n+            charsC[i] = (char) (charsA[i] + (charsB[i] >>> 19));\n+            charsC[i] = (char) (charsC[i] + charsA[i] + charsB[i]);\n+        }\n+        assertTrue(Arrays.equals(charsC, gChars[2]));\n+\n+        for (int i = 0; i < charsC.length; i++) {\n+            charsC[i] = (char) (charsA[i] + (charsB[i] >>> 35));\n+            charsC[i] = (char) (charsC[i] + charsA[i] + charsB[i]);\n+        }\n+        assertTrue(Arrays.equals(charsC, gChars[3]));\n+    }\n+\n+    static void test_ints() {\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >> 19));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[0]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >> 32));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[1]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >> 49));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[2]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >> 67));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[3]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >>> 19));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[4]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >>> 32));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[5]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >>> 49));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[6]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >>> 67));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[7]));\n+    }\n+\n+    static void test_longs() {\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >> 37));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[0]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >> 64));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[1]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >> 93));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[2]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >> 137));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[3]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >>> 37));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[4]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >>> 64));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[5]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >>> 93));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[6]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >>> 137));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[7]));\n+    }\n+\n+    static void test_init(int count) {\n+        bytesA  = new byte[count];\n+        shortsA = new short[count];\n+        charsA  = new char[count];\n+        intsA   = new int[count];\n+        longsA  = new long[count];\n+\n+        bytesB  = new byte[count];\n+        shortsB = new short[count];\n+        charsB  = new char[count];\n+        intsB   = new int[count];\n+        longsB  = new long[count];\n+\n+        bytesC  = new byte[count];\n+        shortsC = new short[count];\n+        charsC  = new char[count];\n+        intsC   = new int[count];\n+        longsC  = new long[count];\n+\n+        gBytes  = new byte[MAX_TESTS][count];\n+        gShorts = new short[MAX_TESTS][count];\n+        gChars  = new char[MAX_TESTS][count];\n+        gInts   = new int[MAX_TESTS][count];\n+        gLongs  = new long[MAX_TESTS][count];\n+\n+        for (int i = 0; i < count; i++) {\n+            bytesA[i]  = (byte) r.nextInt();\n+            shortsA[i] = (short) r.nextInt();\n+            charsA[i]  = (char) r.nextInt();\n+            intsA[i]   = r.nextInt();\n+            longsA[i]  = r.nextLong();\n+\n+            bytesB[i]  = (byte) r.nextInt();\n+            shortsB[i] = (short) r.nextInt();\n+            charsB[i]  = (char) r.nextInt();\n+            intsB[i]   = r.nextInt();\n+            longsB[i]  = r.nextLong();\n+        }\n+\n+        for (int i = 0; i < count; i++) {\n+            gBytes[0][i]  = (byte) (bytesA[i] + (bytesB[i] >> 1));\n+            gBytes[0][i]  = (byte) (gBytes[0][i] + bytesA[i] + bytesB[i]);\n+            gBytes[1][i]  = (byte) (bytesA[i] + (bytesB[i] >> 8));\n+            gBytes[1][i]  = (byte) (gBytes[1][i] + bytesA[i] + bytesB[i]);\n+            gBytes[2][i]  = (byte) (bytesA[i] + (bytesB[i] >> 13));\n+            gBytes[2][i]  = (byte) (gBytes[2][i] + bytesA[i] + bytesB[i]);\n+            gBytes[3][i]  = (byte) (bytesA[i] + (bytesB[i] >> 19));\n+            gBytes[3][i]  = (byte) (gBytes[3][i] + bytesA[i] + bytesB[i]);\n+            gBytes[4][i]  = (byte) (bytesA[i] + (bytesB[i] >>> 2));\n+            gBytes[4][i]  = (byte) (gBytes[4][i] + bytesA[i] + bytesB[i]);\n+            gBytes[5][i]  = (byte) (bytesA[i] + (bytesB[i] >>> 8));\n+            gBytes[5][i]  = (byte) (gBytes[5][i] + bytesA[i] + bytesB[i]);\n+            gBytes[6][i]  = (byte) (bytesA[i] + (bytesB[i] >>> 13));\n+            gBytes[6][i]  = (byte) (gBytes[6][i] + bytesA[i] + bytesB[i]);\n+            gBytes[7][i]  = (byte) (bytesA[i] + (bytesB[i] >>> 19));\n+            gBytes[7][i]  = (byte) (gBytes[7][i] + bytesA[i] + bytesB[i]);\n+\n+            gShorts[0][i]  = (short) (shortsA[i] + (shortsB[i] >> 7));\n+            gShorts[0][i]  = (short) (gShorts[0][i] + shortsA[i] + shortsB[i]);\n+            gShorts[1][i]  = (short) (shortsA[i] + (shortsB[i] >> 16));\n+            gShorts[1][i]  = (short) (gShorts[1][i] + shortsA[i] + shortsB[i]);\n+            gShorts[2][i]  = (short) (shortsA[i] + (shortsB[i] >> 23));\n+            gShorts[2][i]  = (short) (gShorts[2][i] + shortsA[i] + shortsB[i]);\n+            gShorts[3][i]  = (short) (shortsA[i] + (shortsB[i] >> 35));\n+            gShorts[3][i]  = (short) (gShorts[3][i] + shortsA[i] + shortsB[i]);\n+            gShorts[4][i]  = (short) (shortsA[i] + (shortsB[i] >>> 7));\n+            gShorts[4][i]  = (short) (gShorts[4][i] + shortsA[i] + shortsB[i]);\n+            gShorts[5][i]  = (short) (shortsA[i] + (shortsB[i] >>> 16));\n+            gShorts[5][i]  = (short) (gShorts[5][i] + shortsA[i] + shortsB[i]);\n+            gShorts[6][i]  = (short) (shortsA[i] + (shortsB[i] >>> 23));\n+            gShorts[6][i]  = (short) (gShorts[6][i] + shortsA[i] + shortsB[i]);\n+            gShorts[7][i]  = (short) (shortsA[i] + (shortsB[i] >>> 35));\n+            gShorts[7][i]  = (short) (gShorts[7][i] + shortsA[i] + shortsB[i]);\n+\n+            gChars[0][i]  = (char) (charsA[i] + (charsB[i] >>> 4));\n+            gChars[0][i]  = (char) (gChars[0][i] + charsA[i] + charsB[i]);\n+            gChars[1][i]  = (char) (charsA[i] + (charsB[i] >>> 16));\n+            gChars[1][i]  = (char) (gChars[1][i] + charsA[i] + charsB[i]);\n+            gChars[2][i]  = (char) (charsA[i] + (charsB[i] >>> 19));\n+            gChars[2][i]  = (char) (gChars[2][i] + charsA[i] + charsB[i]);\n+            gChars[3][i]  = (char) (charsA[i] + (charsB[i] >>> 35));\n+            gChars[3][i]  = (char) (gChars[3][i] + charsA[i] + charsB[i]);\n+\n+            gInts[0][i]  = intsA[i] + (intsB[i] >> 19);\n+            gInts[0][i]  = gInts[0][i] + intsA[i] + intsB[i];\n+            gInts[1][i]  = intsA[i] + (intsB[i] >> 32);\n+            gInts[1][i]  = gInts[1][i] + intsA[i] + intsB[i];\n+            gInts[2][i]  = intsA[i] + (intsB[i] >> 49);\n+            gInts[2][i]  = gInts[2][i] + intsA[i] + intsB[i];\n+            gInts[3][i]  = intsA[i] + (intsB[i] >> 67);\n+            gInts[3][i]  = gInts[3][i] + intsA[i] + intsB[i];\n+            gInts[4][i]  = intsA[i] + (intsB[i] >>> 19);\n+            gInts[4][i]  = gInts[4][i] + intsA[i] + intsB[i];\n+            gInts[5][i]  = intsA[i] + (intsB[i] >>> 32);\n+            gInts[5][i]  = gInts[5][i] + intsA[i] + intsB[i];\n+            gInts[6][i]  = intsA[i] + (intsB[i] >>> 49);\n+            gInts[6][i]  = gInts[6][i] + intsA[i] + intsB[i];\n+            gInts[7][i]  = intsA[i] + (intsB[i] >>> 67);\n+            gInts[7][i]  = gInts[7][i] + intsA[i] + intsB[i];\n+\n+            gLongs[0][i]  = longsA[i] + (longsB[i] >> 37);\n+            gLongs[0][i]  = gLongs[0][i] + longsA[i] + longsB[i];\n+            gLongs[1][i]  = longsA[i] + (longsB[i] >> 64);\n+            gLongs[1][i]  = gLongs[1][i] + longsA[i] + longsB[i];\n+            gLongs[2][i]  = longsA[i] + (longsB[i] >> 93);\n+            gLongs[2][i]  = gLongs[2][i] + longsA[i] + longsB[i];\n+            gLongs[3][i]  = longsA[i] + (longsB[i] >> 137);\n+            gLongs[3][i]  = gLongs[3][i] + longsA[i] + longsB[i];\n+            gLongs[4][i]  = longsA[i] + (longsB[i] >>> 37);\n+            gLongs[4][i]  = gLongs[4][i] + longsA[i] + longsB[i];\n+            gLongs[5][i]  = longsA[i] + (longsB[i] >>> 64);\n+            gLongs[5][i]  = gLongs[5][i] + longsA[i] + longsB[i];\n+            gLongs[6][i]  = longsA[i] + (longsB[i] >>> 93);\n+            gLongs[6][i]  = gLongs[6][i] + longsA[i] + longsB[i];\n+            gLongs[7][i]  = longsA[i] + (longsB[i] >>> 137);\n+            gLongs[7][i]  = gLongs[7][i] + longsA[i] + longsB[i];\n+        }\n+    }\n+\n+    static void assertTrue(boolean okay) {\n+        if (!okay) {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestShiftRightAndAccumulate.java","additions":435,"deletions":0,"binary":false,"changes":435,"status":"added"}]}