{"files":[{"patch":"@@ -41,0 +41,1 @@\n+    private static final int MAX_TESTS = 10;\n@@ -42,5 +43,11 @@\n-    private static byte[]  bytesA,  bytesB,  bytesC,  bytesD,  bytesE;\n-    private static short[] shortsA, shortsB, shortsC, shortsD, shortsE;\n-    private static char[]  charsA,  charsB,  charsC,  charsD,  charsE;\n-    private static int[]   intsA,   intsB,   intsC,   intsD,   intsE;\n-    private static long[]  longsA,  longsB,  longsC,  longsD,  longsE;\n+    private static byte[]  bytesA,  bytesB,  bytesC;\n+    private static short[] shortsA, shortsB, shortsC;\n+    private static char[]  charsA,  charsB,  charsC;\n+    private static int[]   intsA,   intsB,   intsC;\n+    private static long[]  longsA,  longsB,  longsC;\n+\n+    private static byte  gBytes[][];\n+    private static short gShorts[][];\n+    private static char  gChars[][];\n+    private static int   gInts[][];\n+    private static long  gLongs[][];\n@@ -81,0 +88,19 @@\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[0]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >> 8));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[1]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >> 13));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[2]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >> 19));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n@@ -82,1 +108,1 @@\n-        assertTrue(Arrays.equals(bytesC, bytesD));\n+        assertTrue(Arrays.equals(bytesC, gBytes[3]));\n@@ -85,1 +111,2 @@\n-            bytesC[i] = (byte) (bytesA[i] + (((byte) (bytesB[i] >>> 3))));\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >>> 2));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n@@ -87,1 +114,19 @@\n-        assertTrue(Arrays.equals(bytesC, bytesE));\n+        assertTrue(Arrays.equals(bytesC, gBytes[4]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >>> 8));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[5]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >>> 13));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[6]));\n+\n+        for (int i = 0; i < bytesC.length; i++) {\n+            bytesC[i] = (byte) (bytesA[i] + (bytesB[i] >>> 19));\n+            bytesC[i] = (byte) (bytesC[i] + bytesA[i] + bytesB[i]);\n+        }\n+        assertTrue(Arrays.equals(bytesC, gBytes[7]));\n@@ -92,1 +137,2 @@\n-            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 5));\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 7));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n@@ -94,1 +140,1 @@\n-        assertTrue(Arrays.equals(shortsC, shortsD));\n+        assertTrue(Arrays.equals(shortsC, gShorts[0]));\n@@ -97,1 +143,2 @@\n-            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 7));\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 16));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n@@ -99,1 +146,37 @@\n-        assertTrue(Arrays.equals(shortsC, shortsE));\n+        assertTrue(Arrays.equals(shortsC, gShorts[1]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 23));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[2]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >> 35));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[3]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >>> 7));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[4]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >>> 16));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[5]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >>> 23));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[6]));\n+\n+        for (int i = 0; i < shortsC.length; i++) {\n+            shortsC[i] = (short) (shortsA[i] + (shortsB[i] >>> 35));\n+            shortsC[i] = (short) (shortsC[i] + shortsA[i] + shortsB[i]);\n+        }\n+        assertTrue(Arrays.equals(shortsC, gShorts[7]));\n@@ -105,0 +188,13 @@\n+            charsC[i] = (char) (charsC[i] + charsA[i] + charsB[i]);\n+        }\n+        assertTrue(Arrays.equals(charsC, gChars[0]));\n+\n+        for (int i = 0; i < charsC.length; i++) {\n+            charsC[i] = (char) (charsA[i] + (charsB[i] >>> 16));\n+            charsC[i] = (char) (charsC[i] + charsA[i] + charsB[i]);\n+        }\n+        assertTrue(Arrays.equals(charsC, gChars[1]));\n+\n+        for (int i = 0; i < charsC.length; i++) {\n+            charsC[i] = (char) (charsA[i] + (charsB[i] >>> 19));\n+            charsC[i] = (char) (charsC[i] + charsA[i] + charsB[i]);\n@@ -106,1 +202,7 @@\n-        assertTrue(Arrays.equals(charsC, charsD));\n+        assertTrue(Arrays.equals(charsC, gChars[2]));\n+\n+        for (int i = 0; i < charsC.length; i++) {\n+            charsC[i] = (char) (charsA[i] + (charsB[i] >>> 35));\n+            charsC[i] = (char) (charsC[i] + charsA[i] + charsB[i]);\n+        }\n+        assertTrue(Arrays.equals(charsC, gChars[3]));\n@@ -111,1 +213,26 @@\n-            intsC[i] = intsA[i] + (intsB[i] >> 2);\n+            intsC[i] = (intsA[i] + (intsB[i] >> 19));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[0]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >> 32));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[1]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >> 49));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[2]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >> 67));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[3]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >>> 19));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n@@ -113,1 +240,1 @@\n-        assertTrue(Arrays.equals(intsC, intsD));\n+        assertTrue(Arrays.equals(intsC, gInts[4]));\n@@ -116,1 +243,2 @@\n-            intsC[i] = (intsB[i] >>> 2) + intsA[i];\n+            intsC[i] = (intsA[i] + (intsB[i] >>> 32));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n@@ -118,1 +246,13 @@\n-        assertTrue(Arrays.equals(intsC, intsE));\n+        assertTrue(Arrays.equals(intsC, gInts[5]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >>> 49));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[6]));\n+\n+        for (int i = 0; i < intsC.length; i++) {\n+            intsC[i] = (intsA[i] + (intsB[i] >>> 67));\n+            intsC[i] = (intsC[i] + intsA[i] + intsB[i]);\n+        }\n+        assertTrue(Arrays.equals(intsC, gInts[7]));\n@@ -123,1 +263,26 @@\n-            longsC[i] = longsA[i] + (longsB[i] >> 5);\n+            longsC[i] = (longsA[i] + (longsB[i] >> 37));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[0]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >> 64));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[1]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >> 93));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[2]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >> 137));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[3]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >>> 37));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n@@ -125,1 +290,1 @@\n-        assertTrue(Arrays.equals(longsC, longsD));\n+        assertTrue(Arrays.equals(longsC, gLongs[4]));\n@@ -128,1 +293,2 @@\n-            longsC[i] = (longsB[i] >>> 2) + longsA[i];\n+            longsC[i] = (longsA[i] + (longsB[i] >>> 64));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n@@ -130,1 +296,13 @@\n-        assertTrue(Arrays.equals(longsC, longsE));\n+        assertTrue(Arrays.equals(longsC, gLongs[5]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >>> 93));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[6]));\n+\n+        for (int i = 0; i < longsC.length; i++) {\n+            longsC[i] = (longsA[i] + (longsB[i] >>> 137));\n+            longsC[i] = (longsC[i] + longsA[i] + longsB[i]);\n+        }\n+        assertTrue(Arrays.equals(longsC, gLongs[7]));\n@@ -152,11 +330,5 @@\n-        bytesD  = new byte[count];\n-        shortsD = new short[count];\n-        charsD  = new char[count];\n-        intsD   = new int[count];\n-        longsD  = new long[count];\n-\n-        bytesE  = new byte[count];\n-        shortsE = new short[count];\n-        charsE  = new char[count];\n-        intsE   = new int[count];\n-        longsE  = new long[count];\n+        gBytes  = new byte[MAX_TESTS][count];\n+        gShorts = new short[MAX_TESTS][count];\n+        gChars  = new char[MAX_TESTS][count];\n+        gInts   = new int[MAX_TESTS][count];\n+        gLongs  = new long[MAX_TESTS][count];\n@@ -179,9 +351,76 @@\n-            bytesD[i]  = (byte) (bytesA[i] + (bytesB[i] >> 1));\n-            bytesE[i]  = (byte) (bytesA[i] + (((byte) (bytesB[i] >>> 3))));\n-            shortsD[i] = (short) (shortsA[i] + (shortsB[i] >> 5));\n-            shortsE[i] = (short) (shortsA[i] + (shortsB[i] >> 7));\n-            charsD[i]  = (char) (charsA[i] + (charsB[i] >>> 4));\n-            intsD[i]   = intsA[i] + (intsB[i] >> 2);\n-            intsE[i]   = (intsB[i] >>> 2) + intsA[i];\n-            longsD[i]  = longsA[i] + (longsB[i] >> 5);\n-            longsE[i]  = (longsB[i] >>> 2) + longsA[i];\n+            gBytes[0][i]  = (byte) (bytesA[i] + (bytesB[i] >> 1));\n+            gBytes[0][i]  = (byte) (gBytes[0][i] + bytesA[i] + bytesB[i]);\n+            gBytes[1][i]  = (byte) (bytesA[i] + (bytesB[i] >> 8));\n+            gBytes[1][i]  = (byte) (gBytes[1][i] + bytesA[i] + bytesB[i]);\n+            gBytes[2][i]  = (byte) (bytesA[i] + (bytesB[i] >> 13));\n+            gBytes[2][i]  = (byte) (gBytes[2][i] + bytesA[i] + bytesB[i]);\n+            gBytes[3][i]  = (byte) (bytesA[i] + (bytesB[i] >> 19));\n+            gBytes[3][i]  = (byte) (gBytes[3][i] + bytesA[i] + bytesB[i]);\n+            gBytes[4][i]  = (byte) (bytesA[i] + (bytesB[i] >>> 2));\n+            gBytes[4][i]  = (byte) (gBytes[4][i] + bytesA[i] + bytesB[i]);\n+            gBytes[5][i]  = (byte) (bytesA[i] + (bytesB[i] >>> 8));\n+            gBytes[5][i]  = (byte) (gBytes[5][i] + bytesA[i] + bytesB[i]);\n+            gBytes[6][i]  = (byte) (bytesA[i] + (bytesB[i] >>> 13));\n+            gBytes[6][i]  = (byte) (gBytes[6][i] + bytesA[i] + bytesB[i]);\n+            gBytes[7][i]  = (byte) (bytesA[i] + (bytesB[i] >>> 19));\n+            gBytes[7][i]  = (byte) (gBytes[7][i] + bytesA[i] + bytesB[i]);\n+\n+            gShorts[0][i]  = (short) (shortsA[i] + (shortsB[i] >> 7));\n+            gShorts[0][i]  = (short) (gShorts[0][i] + shortsA[i] + shortsB[i]);\n+            gShorts[1][i]  = (short) (shortsA[i] + (shortsB[i] >> 16));\n+            gShorts[1][i]  = (short) (gShorts[1][i] + shortsA[i] + shortsB[i]);\n+            gShorts[2][i]  = (short) (shortsA[i] + (shortsB[i] >> 23));\n+            gShorts[2][i]  = (short) (gShorts[2][i] + shortsA[i] + shortsB[i]);\n+            gShorts[3][i]  = (short) (shortsA[i] + (shortsB[i] >> 35));\n+            gShorts[3][i]  = (short) (gShorts[3][i] + shortsA[i] + shortsB[i]);\n+            gShorts[4][i]  = (short) (shortsA[i] + (shortsB[i] >>> 7));\n+            gShorts[4][i]  = (short) (gShorts[4][i] + shortsA[i] + shortsB[i]);\n+            gShorts[5][i]  = (short) (shortsA[i] + (shortsB[i] >>> 16));\n+            gShorts[5][i]  = (short) (gShorts[5][i] + shortsA[i] + shortsB[i]);\n+            gShorts[6][i]  = (short) (shortsA[i] + (shortsB[i] >>> 23));\n+            gShorts[6][i]  = (short) (gShorts[6][i] + shortsA[i] + shortsB[i]);\n+            gShorts[7][i]  = (short) (shortsA[i] + (shortsB[i] >>> 35));\n+            gShorts[7][i]  = (short) (gShorts[7][i] + shortsA[i] + shortsB[i]);\n+\n+            gChars[0][i]  = (char) (charsA[i] + (charsB[i] >>> 4));\n+            gChars[0][i]  = (char) (gChars[0][i] + charsA[i] + charsB[i]);\n+            gChars[1][i]  = (char) (charsA[i] + (charsB[i] >>> 16));\n+            gChars[1][i]  = (char) (gChars[1][i] + charsA[i] + charsB[i]);\n+            gChars[2][i]  = (char) (charsA[i] + (charsB[i] >>> 19));\n+            gChars[2][i]  = (char) (gChars[2][i] + charsA[i] + charsB[i]);\n+            gChars[3][i]  = (char) (charsA[i] + (charsB[i] >>> 35));\n+            gChars[3][i]  = (char) (gChars[3][i] + charsA[i] + charsB[i]);\n+\n+            gInts[0][i]  = intsA[i] + (intsB[i] >> 19);\n+            gInts[0][i]  = gInts[0][i] + intsA[i] + intsB[i];\n+            gInts[1][i]  = intsA[i] + (intsB[i] >> 32);\n+            gInts[1][i]  = gInts[1][i] + intsA[i] + intsB[i];\n+            gInts[2][i]  = intsA[i] + (intsB[i] >> 49);\n+            gInts[2][i]  = gInts[2][i] + intsA[i] + intsB[i];\n+            gInts[3][i]  = intsA[i] + (intsB[i] >> 67);\n+            gInts[3][i]  = gInts[3][i] + intsA[i] + intsB[i];\n+            gInts[4][i]  = intsA[i] + (intsB[i] >>> 19);\n+            gInts[4][i]  = gInts[4][i] + intsA[i] + intsB[i];\n+            gInts[5][i]  = intsA[i] + (intsB[i] >>> 32);\n+            gInts[5][i]  = gInts[5][i] + intsA[i] + intsB[i];\n+            gInts[6][i]  = intsA[i] + (intsB[i] >>> 49);\n+            gInts[6][i]  = gInts[6][i] + intsA[i] + intsB[i];\n+            gInts[7][i]  = intsA[i] + (intsB[i] >>> 67);\n+            gInts[7][i]  = gInts[7][i] + intsA[i] + intsB[i];\n+\n+            gLongs[0][i]  = longsA[i] + (longsB[i] >> 37);\n+            gLongs[0][i]  = gLongs[0][i] + longsA[i] + longsB[i];\n+            gLongs[1][i]  = longsA[i] + (longsB[i] >> 64);\n+            gLongs[1][i]  = gLongs[1][i] + longsA[i] + longsB[i];\n+            gLongs[2][i]  = longsA[i] + (longsB[i] >> 93);\n+            gLongs[2][i]  = gLongs[2][i] + longsA[i] + longsB[i];\n+            gLongs[3][i]  = longsA[i] + (longsB[i] >> 137);\n+            gLongs[3][i]  = gLongs[3][i] + longsA[i] + longsB[i];\n+            gLongs[4][i]  = longsA[i] + (longsB[i] >>> 37);\n+            gLongs[4][i]  = gLongs[4][i] + longsA[i] + longsB[i];\n+            gLongs[5][i]  = longsA[i] + (longsB[i] >>> 64);\n+            gLongs[5][i]  = gLongs[5][i] + longsA[i] + longsB[i];\n+            gLongs[6][i]  = longsA[i] + (longsB[i] >>> 93);\n+            gLongs[6][i]  = gLongs[6][i] + longsA[i] + longsB[i];\n+            gLongs[7][i]  = longsA[i] + (longsB[i] >>> 137);\n+            gLongs[7][i]  = gLongs[7][i] + longsA[i] + longsB[i];\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestShiftRightAndAccumulate.java","additions":280,"deletions":41,"binary":false,"changes":321,"status":"modified"}]}