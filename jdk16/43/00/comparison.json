{"files":[{"patch":"@@ -442,1 +442,1 @@\n-    public boolean isLocal() {\n+    public boolean isDirectlyOrIndirectlyLocal() {\n@@ -445,1 +445,1 @@\n-             (owner.kind == TYP && owner.isLocal()));\n+             (owner.kind == TYP && owner.isDirectlyOrIndirectlyLocal()));\n@@ -763,1 +763,1 @@\n-        public boolean isLocal() { return other.isLocal(); }\n+        public boolean isDirectlyOrIndirectlyLocal() { return other.isDirectlyOrIndirectlyLocal(); }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5168,1 +5168,1 @@\n-                if (c.isLocal() && !c.isEnum()) {\n+                if (c.isDirectlyOrIndirectlyLocal() && !c.isEnum()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1219,1 +1219,2 @@\n-            if (sym.owner.kind.matches(KindSelector.VAL_MTH)) {\n+            if (sym.owner.kind.matches(KindSelector.VAL_MTH) ||\n+                    (sym.isDirectlyOrIndirectlyLocal() && (flags & ANNOTATION) != 0)) {\n@@ -1228,1 +1229,1 @@\n-                mask = ((flags & STATIC) != 0) && allowRecords ? ExtendedMemberStaticClassFlags : ExtendedMemberClassFlags;\n+                mask = ((flags & STATIC) != 0) && allowRecords && (flags & ANNOTATION) == 0 ? ExtendedMemberStaticClassFlags : ExtendedMemberClassFlags;\n@@ -2732,1 +2733,1 @@\n-                    sym.isLocal() ||\n+                    sym.isDirectlyOrIndirectlyLocal() ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-        if (!c.isLocal() && uncompleted != null) uncompleted.append(c);\n+        if (!c.isDirectlyOrIndirectlyLocal() && uncompleted != null) uncompleted.append(c);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2907,1 +2907,1 @@\n-                currentTree = tree.sym.isLocal() ? tree : null;\n+                currentTree = tree.sym.isDirectlyOrIndirectlyLocal() ? tree : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1441,1 +1441,1 @@\n-            boolean isLocal = def.isLocal();\n+            boolean isLocal = def.isDirectlyOrIndirectlyLocal();\n@@ -1595,1 +1595,1 @@\n-                        if (((JCVariableDecl)frameStack2.head.tree).sym.isLocal()) {\n+                        if (((JCVariableDecl)frameStack2.head.tree).sym.isDirectlyOrIndirectlyLocal()) {\n@@ -2316,1 +2316,1 @@\n-                          (tree.sym.owner.isLocal() || tree.sym.owner.isInner()));\n+                          (tree.sym.owner.isDirectlyOrIndirectlyLocal() || tree.sym.owner.isInner()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-        if (!c.isLocal()) {\n+        if (!c.isDirectlyOrIndirectlyLocal()) {\n@@ -385,1 +385,1 @@\n-        while (currentOwner.owner.kind.matches(KindSelector.TYP) && currentOwner.isLocal()) {\n+        while (currentOwner.owner.kind.matches(KindSelector.TYP) && currentOwner.isDirectlyOrIndirectlyLocal()) {\n@@ -1052,1 +1052,1 @@\n-        } else if (sym.name == names.init && sym.owner.isLocal()) {\n+        } else if (sym.name == names.init && sym.owner.isDirectlyOrIndirectlyLocal()) {\n@@ -2206,1 +2206,1 @@\n-        if (currentClass.isLocal()) {\n+        if (currentClass.isDirectlyOrIndirectlyLocal()) {\n@@ -2657,1 +2657,1 @@\n-            (currentClass.isInner() || currentClass.isLocal())) {\n+            (currentClass.isInner() || currentClass.isDirectlyOrIndirectlyLocal())) {\n@@ -2797,1 +2797,1 @@\n-        if (c.isLocal()) {\n+        if (c.isDirectlyOrIndirectlyLocal()) {\n@@ -2816,1 +2816,1 @@\n-            } else if (c.isLocal()) {\n+            } else if (c.isDirectlyOrIndirectlyLocal()) {\n@@ -2999,1 +2999,1 @@\n-            if (c.isLocal()) {\n+            if (c.isDirectlyOrIndirectlyLocal()) {\n@@ -3027,1 +3027,1 @@\n-                } else if (c.isLocal() || methName == names._this){\n+                } else if (c.isDirectlyOrIndirectlyLocal() || methName == names._this){\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -524,1 +524,1 @@\n-                if (sym.isLocal()) {\n+                if (sym.isDirectlyOrIndirectlyLocal()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-        if (c.isLocal() || isSynthetic(c))\n+        if (c.isDirectlyOrIndirectlyLocal() || isSynthetic(c))\n@@ -154,1 +154,1 @@\n-        if (c.isLocal() || isSynthetic(c))\n+        if (c.isDirectlyOrIndirectlyLocal() || isSynthetic(c))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/JNIWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1030,0 +1030,104 @@\n+    public void testAnnoInsideLocalOrAnonymous() {\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    public void test() {\n+                        class Local {\n+                            @interface A {}\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    public void test() {\n+                        interface I {\n+                            @interface A {}\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    public void test() {\n+                        record R() {\n+                            @interface A {}\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    public void test() {\n+                        enum E {\n+                            E1;\n+                            @interface A {}\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    public void test() {\n+                        class Local1 {\n+                            class Local2 {\n+                                @interface A {}\n+                            }\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    public void test() {\n+                        class Local {\n+                            interface I {\n+                                @interface A {}\n+                            }\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    public void test() {\n+                        class Local {\n+                            record R() {\n+                                @interface A {}\n+                            }\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    public void test() {\n+                        class Local {\n+                            enum E {\n+                                E1;\n+                                @interface A {}\n+                            }\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+\n+        assertFail(\"compiler.err.annotation.decl.not.allowed.here\",\n+                \"\"\"\n+                class Outer {\n+                    Runnable run = new Runnable() {\n+                        @interface A {}\n+                        public void run() {}\n+                    };\n+                }\n+                \"\"\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"}]}