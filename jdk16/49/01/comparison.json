{"files":[{"patch":"@@ -971,6 +971,2 @@\n-                \/\/ If the unerased parameter type is a type variable whose\n-                \/\/ bound is an intersection (eg. <T extends A & B>) then\n-                \/\/ use the SAM parameter type\n-                if (checkForIntersection && descPTypes.head.getKind() == TypeKind.TYPEVAR) {\n-                    TypeVar tv = (TypeVar) descPTypes.head;\n-                    if (tv.getUpperBound().getKind() == TypeKind.INTERSECTION) {\n+                if (checkForIntersection) {\n+                    if (descPTypes.head.getKind() == TypeKind.INTERSECTION) {\n@@ -979,0 +975,9 @@\n+                    \/\/ If the unerased parameter type is a type variable whose\n+                    \/\/ bound is an intersection (eg. <T extends A & B>) then\n+                    \/\/ use the SAM parameter type\n+                    if (descPTypes.head.getKind() == TypeKind.TYPEVAR) {\n+                        TypeVar tv = (TypeVar) descPTypes.head;\n+                        if (tv.getUpperBound().getKind() == TypeKind.INTERSECTION) {\n+                            parmType = samPTypes.head;\n+                        }\n+                    }\n@@ -2324,1 +2329,1 @@\n-                return types.erasure(types.findDescriptorSymbol(tree.target.tsym).type);\n+                return types.erasure(types.findDescriptorType(tree.target));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8213032\n+ * @summary program fails with LambdaConversionException at execution time\n+ *\/\n+\n+import java.util.stream.*;\n+\n+public class MethodReferenceIntersection4 {\n+    interface I {}\n+    static abstract class C { }\n+    static class A extends C implements I { }\n+    static class B extends C implements I { }\n+\n+    static String f(I i) { return null; }\n+\n+    public static void main(String[] args) {\n+        Stream.of(new A(), new B())\n+                .map(MethodReferenceIntersection4::f)\n+                .forEach(System.out::println);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReferenceExecution\/MethodReferenceIntersection4.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"}]}