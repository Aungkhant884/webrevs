{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,1 +240,2 @@\n-                                              index, segment);\n+                                              index << $LG_BYTES_PER_VALUE$,\n+                                              segment);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8159257\n+ * @bug 8159257 8258955\n@@ -177,0 +177,5 @@\n+                Map.entry(\"bb.asShortBuffer().slice(index,length)\",\n+                          bb -> { var sb = bb.asShortBuffer();\n+                                  sb =  sb.slice(1, sb.limit() - 1);\n+                                  bb.position(bb.position() + 2);\n+                                  return sb; }),\n@@ -276,0 +281,5 @@\n+                Map.entry(\"bb.asCharBuffer().slice(index,length)\",\n+                          bb -> { var cb = bb.asCharBuffer();\n+                                  cb =  cb.slice(1, cb.limit() - 1);\n+                                  bb.position(bb.position() + 2);\n+                                  return cb; }),\n@@ -368,0 +378,5 @@\n+                Map.entry(\"bb.asIntBuffer().slice(index,length)\",\n+                          bb -> { var ib = bb.asIntBuffer();\n+                                  ib =  ib.slice(1, ib.limit() - 1);\n+                                  bb.position(bb.position() + 4);\n+                                  return ib; }),\n@@ -470,0 +485,5 @@\n+                Map.entry(\"bb.asLongBuffer().slice(index,length)\",\n+                          bb -> { var lb = bb.asLongBuffer();\n+                                  lb =  lb.slice(1, lb.limit() - 1);\n+                                  bb.position(bb.position() + 8);\n+                                  return lb; }),\n@@ -578,0 +598,5 @@\n+                Map.entry(\"bb.asFloatBuffer().slice(index,length)\",\n+                        bb -> { var fb = bb.asFloatBuffer();\n+                            fb =  fb.slice(1, fb.limit() - 1);\n+                            bb.position(bb.position() + 4);\n+                            return fb; }),\n@@ -671,0 +696,5 @@\n+                Map.entry(\"bb.asDoubleBuffer().slice(index,length)\",\n+                        bb -> { var db = bb.asDoubleBuffer();\n+                            db =  db.slice(1, db.limit() - 1);\n+                            bb.position(bb.position() + 8);\n+                            return db; }),\n","filename":"test\/jdk\/java\/nio\/Buffer\/ByteBufferViews.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"}]}