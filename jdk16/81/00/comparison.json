{"files":[{"patch":"@@ -48,1 +48,0 @@\n-import jdk.jfr.internal.consumer.JdkJfrConsumer;\n@@ -71,0 +70,16 @@\n+    final static class ChunkConsumer implements Consumer<Long> {\n+\n+        private final Recording recording;\n+\n+        ChunkConsumer(Recording recording) {\n+            this.recording = recording;\n+        }\n+\n+        @Override\n+        public void accept(Long endNanos) {\n+            Instant t = Utils.epochNanosToInstant(endNanos);\n+            PlatformRecording p = PrivateAccess.getInstance().getPlatformRecording(recording);\n+            p.removeBefore(t);\n+        }\n+    }\n+\n@@ -74,0 +89,2 @@\n+    private long maxSize;\n+    private Duration maxAge;\n@@ -250,1 +267,5 @@\n-        recording.setMaxAge(maxAge);\n+        synchronized (directoryStream) {\n+            recording.setMaxAge(maxAge);\n+            this.maxAge = maxAge;\n+            updateOnCompleteHandler();\n+        }\n@@ -273,1 +294,5 @@\n-        recording.setMaxSize(maxSize);\n+        synchronized (directoryStream) {\n+            recording.setMaxSize(maxSize);\n+            this.maxSize = maxSize;\n+            updateOnCompleteHandler();\n+        }\n@@ -323,0 +348,1 @@\n+        directoryStream.setChunkCompleteHandler(null);\n@@ -336,0 +362,1 @@\n+        updateOnCompleteHandler();\n@@ -366,0 +393,1 @@\n+        updateOnCompleteHandler();\n@@ -383,0 +411,9 @@\n+\n+    private void updateOnCompleteHandler() {\n+        if (maxAge != null || maxSize != 0) {\n+            \/\/ User has set a chunk removal policy\n+            directoryStream.setChunkCompleteHandler(null);\n+        } else {\n+            directoryStream.setChunkCompleteHandler(new ChunkConsumer(recording));\n+        }\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingStream.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -491,0 +491,12 @@\n+\n+    public void resetCache() {\n+        LongMap<Parser> ps = this.parsers;\n+        if (ps != null) {\n+            ps.forEach(p -> {\n+                if (p instanceof EventParser) {\n+                    EventParser ep = (EventParser) p;\n+                    ep.resetCache();\n+                }\n+            });\n+        }\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ChunkParser.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -162,0 +162,1 @@\n+                    currentParser.resetCache();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventDirectoryStream.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -105,0 +105,1 @@\n+            currentParser.resetCache();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventFileStream.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}