{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -463,1 +463,0 @@\n-\n@@ -465,0 +464,17 @@\n+  ClassListParser::resolve_indy_impl(class_name_symbol, THREAD);\n+  if (HAS_PENDING_EXCEPTION) {\n+    ResourceMark rm(THREAD);\n+    char* ex_msg = (char*)\"\";\n+    oop message = java_lang_Throwable::message(PENDING_EXCEPTION);\n+    if (message != NULL) {\n+      ex_msg = java_lang_String::as_utf8_string(message);\n+    }\n+    log_warning(cds)(\"resolve_indy for class %s has encountered exception: %s %s\",\n+                     class_name_symbol->as_C_string(),\n+                     PENDING_EXCEPTION->klass()->external_name(),\n+                     ex_msg);\n+    CLEAR_PENDING_EXCEPTION;\n+  }\n+}\n+\n+void ClassListParser::resolve_indy_impl(Symbol* class_name_symbol, TRAPS) {\n@@ -467,1 +483,1 @@\n-  Klass* klass = SystemDictionary::resolve_or_fail(class_name_symbol, class_loader, protection_domain, true, THREAD); \/\/ FIXME should really be just a lookup\n+  Klass* klass = SystemDictionary::resolve_or_fail(class_name_symbol, class_loader, protection_domain, true, CHECK); \/\/ FIXME should really be just a lookup\n@@ -474,2 +490,1 @@\n-    MetaspaceShared::try_link_class(ik, THREAD);\n-    assert(!HAS_PENDING_EXCEPTION, \"unexpected exception\");\n+    MetaspaceShared::try_link_class(ik, CHECK);\n@@ -487,1 +502,1 @@\n-        Handle bsm = bootstrap_specifier.resolve_bsm(THREAD);\n+        Handle bsm = bootstrap_specifier.resolve_bsm(CHECK);\n@@ -492,1 +507,2 @@\n-        if (is_matching_cp_entry(pool, pool_index, THREAD)) {\n+        bool matched = is_matching_cp_entry(pool, pool_index, CHECK);\n+        if (matched) {\n@@ -495,1 +511,1 @@\n-          bool is_done = bootstrap_specifier.resolve_previously_linked_invokedynamic(info, THREAD);\n+          bool is_done = bootstrap_specifier.resolve_previously_linked_invokedynamic(info, CHECK);\n@@ -499,1 +515,1 @@\n-            LinkResolver::resolve_invoke(info, recv, pool, indy_index, Bytecodes::_invokedynamic, THREAD);\n+            LinkResolver::resolve_invoke(info, recv, pool, indy_index, Bytecodes::_invokedynamic, CHECK);\n@@ -503,14 +519,0 @@\n-          if (HAS_PENDING_EXCEPTION) {\n-            ResourceMark rm(THREAD);\n-            tty->print(\"resolve_indy for class %s has\", class_name_symbol->as_C_string());\n-            oop message = java_lang_Throwable::message(PENDING_EXCEPTION);\n-            if (message != NULL) {\n-              char* ex_msg = java_lang_String::as_utf8_string(message);\n-              tty->print_cr(\" exception pending '%s %s'\",\n-                         PENDING_EXCEPTION->klass()->external_name(), ex_msg);\n-            } else {\n-              tty->print_cr(\" exception pending %s \",\n-                         PENDING_EXCEPTION->klass()->external_name());\n-            }\n-            exit(1);\n-          }\n","filename":"src\/hotspot\/share\/classfile\/classListParser.cpp","additions":25,"deletions":23,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,0 +117,1 @@\n+  void resolve_indy_impl(Symbol* class_name_symbol, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/classListParser.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -409,9 +409,8 @@\n-    if (!DynamicDumpSharedSpaces) {\n-      assert(!tag_at(index).is_unresolved_klass_in_error(), \"This must not happen during static dump time\");\n-    } else {\n-      if (tag_at(index).is_unresolved_klass_in_error() ||\n-          tag_at(index).is_method_handle_in_error()    ||\n-          tag_at(index).is_method_type_in_error()      ||\n-          tag_at(index).is_dynamic_constant_in_error()) {\n-        tag_at_put(index, JVM_CONSTANT_UnresolvedClass);\n-      }\n+    if (tag_at(index).is_unresolved_klass_in_error()) {\n+      tag_at_put(index, JVM_CONSTANT_UnresolvedClass);\n+    } else if (tag_at(index).is_method_handle_in_error()) {\n+      tag_at_put(index, JVM_CONSTANT_MethodHandle);\n+    } else if (tag_at(index).is_method_type_in_error()) {\n+      tag_at_put(index, JVM_CONSTANT_MethodType);\n+    } else if (tag_at(index).is_dynamic_constant_in_error()) {\n+      tag_at_put(index, JVM_CONSTANT_Dynamic);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -339,0 +339,1 @@\n+ -runtime\/cds\/appcds\/LambdaWithOldClass.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,2 +47,2 @@\n-    out.shouldHaveExitValue(0);\n-    out.shouldContain( \"is_supported_invokedynamic check failed for cp_index 7\");\n+    out.shouldHaveExitValue(0)\n+       .shouldContain(\"resolve_indy for class WrongBSM has encountered exception: java.lang.NoSuchMethodError\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/BadBSM.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8259275\n+ * @summary VM should not crash during CDS dump and run time when a lambda\n+ *          expression references an old version of class.\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @compile test-classes\/OldClass.jasm\n+ * @compile test-classes\/LambdaWithOldClassApp.java\n+ * @run driver LambdaWithOldClass\n+ *\/\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class LambdaWithOldClass {\n+\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = \"LambdaWithOldClassApp\";\n+        String namePrefix = \"lambdawitholdclass\";\n+        JarBuilder.build(namePrefix, mainClass, \"OldClass\", \"TestInterface\");\n+\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+        String classList = namePrefix + \".list\";\n+        String archiveName = namePrefix + \".jsa\";\n+\n+        \/\/ dump class list\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n+            \"-XX:DumpLoadedClassList=\" + classList,\n+            \"-cp\", appJar,\n+            mainClass);\n+        OutputAnalyzer output = TestCommon.executeAndLog(pb, namePrefix);\n+        output.shouldHaveExitValue(0);\n+\n+        \/\/ create archive with the class list\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n+                       \"-cp\", appJar,\n+                       \"-Xlog:class+load,cds\")\n+            .setArchiveName(archiveName);\n+        CDSTestUtils.createArchiveAndCheck(opts);\n+\n+        \/\/ run with archive\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\")\n+            .setArchiveName(archiveName)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        output = CDSTestUtils.runWithArchive(runOpts);\n+        output.shouldContain(\"[class,load] LambdaWithOldClassApp source: shared objects file\")\n+              .shouldMatch(\".class.load. LambdaWithOldClassApp[$][$]Lambda[$].*\/0x.*source:.*LambdaWithOldClassApp\")\n+              .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithOldClass.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+interface TestInterface {\n+    public void apply(OldClass c);\n+}\n+\n+public class LambdaWithOldClassApp {\n+    public static void main(String args[]) {\n+        doit((c) -> {\n+                System.out.println(\"c = \" + c);\n+            });\n+    }\n+    static void doit(TestInterface i) {\n+        OldClass c = new OldClass();\n+        i.apply(c);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/LambdaWithOldClassApp.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+super class OldClass\n+\tversion 49:0\n+{\n+\n+\n+Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+{\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+}\n+\n+} \/\/ end Class OldClass\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/OldClass.jasm","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"}]}