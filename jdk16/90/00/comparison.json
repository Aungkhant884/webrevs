{"files":[{"patch":"@@ -879,4 +879,3 @@\n-     * @throws IllegalArgumentException if {@code bytesOffset < 0}.\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}.\n-     * @throws UnsupportedOperationException if an unsupported map mode is specified, or if the {@code path} is associated\n-     * with a provider that does not support creating file channels.\n+     * @throws IllegalArgumentException if {@code bytesOffset < 0}, {@code bytesSize < 0}, or if {@code path} is not associated\n+     * with the default file system.\n+     * @throws UnsupportedOperationException if an unsupported map mode is specified.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n@@ -117,2 +119,7 @@\n-        try (FileChannelImpl channelImpl = (FileChannelImpl)FileChannel.open(path, openOptions(mapMode))) {\n-            UnmapperProxy unmapperProxy = channelImpl.mapInternal(mapMode, bytesOffset, bytesSize);\n+        FileSystem fs = path.getFileSystem();\n+        if (fs != FileSystems.getDefault() ||\n+                fs.getClass().getModule() != Object.class.getModule()) {\n+            throw new IllegalArgumentException(\"Unsupported file system\");\n+        }\n+        try (FileChannel channelImpl = FileChannel.open(path, openOptions(mapMode))) {\n+            UnmapperProxy unmapperProxy = ((FileChannelImpl)channelImpl).mapInternal(mapMode, bytesOffset, bytesSize);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *          java.base\/jdk.internal.jrtfs\n@@ -50,0 +51,1 @@\n+import java.net.URI;\n@@ -78,0 +80,1 @@\n+import jdk.internal.jrtfs.JrtFileSystemProvider;\n@@ -494,0 +497,6 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testMapCustomPath() throws IOException {\n+        Path path = new JrtFileSystemProvider().getPath(URI.create(\"JRT:\/\"));\n+        MemorySegment.mapFile(path, 0L, 0L, FileChannel.MapMode.READ_WRITE);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}