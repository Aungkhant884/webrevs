{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n@@ -510,1 +511,4 @@\n-            DocCommentTree docTree = builder.utils.getDocCommentTree(propertyMethod);\n+            Utils utils = builder.utils;\n+            DocCommentTree docTree = utils.hasDocCommentTree(propertyMethod)\n+                    ? utils.getDocCommentTree(propertyMethod)\n+                    : null;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MemberSummaryBuilder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2640,8 +2640,10 @@\n-        CommentHelper ch = getCommentHelper(element);\n-        String tname = tagName != null && tagName.startsWith(\"@\")\n-                ? tagName.substring(1)\n-                : tagName;\n-        for (DocTree dt : getBlockTags(element, kind)) {\n-            if (dt.getKind() == kind) {\n-                if (tname == null || ch.getTagName(dt).equals(tname)) {\n-                    return true;\n+        if (hasDocCommentTree(element)) {\n+            CommentHelper ch = getCommentHelper(element);\n+            String tname = tagName != null && tagName.startsWith(\"@\")\n+                    ? tagName.substring(1)\n+                    : tagName;\n+            for (DocTree dt : getBlockTags(element, kind)) {\n+                if (dt.getKind() == kind) {\n+                    if (tname == null || ch.getTagName(dt).equals(tname)) {\n+                        return true;\n+                    }\n@@ -2688,0 +2690,10 @@\n+    \/**\n+     * Checks whether an element has an associated doc copmment.\n+     * @param element the element\n+     * @return {@code true} if the eleme nt has a comment, and false otherwise\n+     *\/\n+    public boolean hasDocCommentTree(Element element) {\n+        DocCommentInfo info = getDocCommentInfo(element);\n+        return info != null && info.dcTree != null;\n+    }\n+\n@@ -2695,22 +2707,1 @@\n-        DocCommentInfo info = null;\n-\n-        ElementKind kind = element.getKind();\n-        if (kind == ElementKind.PACKAGE || kind == ElementKind.OTHER) {\n-            info = dcTreeCache.get(element); \/\/ local cache\n-            if (info == null && kind == ElementKind.PACKAGE) {\n-                \/\/ package-info.java\n-                info = getDocCommentInfo(element);\n-            }\n-            if (info == null) {\n-                \/\/ package.html or overview.html\n-                info = configuration.cmtUtils.getHtmlCommentInfo(element); \/\/ html source\n-            }\n-        } else {\n-            info = configuration.cmtUtils.getSyntheticCommentInfo(element);\n-            if (info == null) {\n-                info = dcTreeCache.get(element); \/\/ local cache\n-            }\n-            if (info == null) {\n-                info = getDocCommentInfo(element); \/\/ get the real mccoy\n-            }\n-        }\n+        DocCommentInfo info = getDocCommentInfo(element);\n@@ -2741,0 +2732,27 @@\n+        DocCommentInfo info = null;\n+\n+        ElementKind kind = element.getKind();\n+        if (kind == ElementKind.PACKAGE || kind == ElementKind.OTHER) {\n+            info = dcTreeCache.get(element); \/\/ local cache\n+            if (info == null && kind == ElementKind.PACKAGE) {\n+                \/\/ package-info.java\n+                info = getDocCommentInfo0(element);\n+            }\n+            if (info == null) {\n+                \/\/ package.html or overview.html\n+                info = configuration.cmtUtils.getHtmlCommentInfo(element); \/\/ html source\n+            }\n+        } else {\n+            info = configuration.cmtUtils.getSyntheticCommentInfo(element);\n+            if (info == null) {\n+                info = dcTreeCache.get(element); \/\/ local cache\n+            }\n+            if (info == null) {\n+                info = getDocCommentInfo0(element); \/\/ get the real mccoy\n+            }\n+        }\n+\n+        return info;\n+    }\n+\n+    private DocCommentInfo getDocCommentInfo0(Element element) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":48,"deletions":30,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *      8203791 8184205\n+ *      8203791 8184205 8249633\n@@ -36,0 +36,4 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n@@ -369,0 +373,52 @@\n+\n+    \/*\n+     * Verify that no warnings are produced on methods that may have synthesized comments.\n+     *\/\n+    @Test\n+    public void test5() throws IOException {\n+        Path src5 = Files.createDirectories(Path.of(\"src5\").resolve(\"pkg\"));\n+        Files.writeString(src5.resolve(\"MyClass.java\"),\n+                \"\"\"\n+                    package pkg;\n+\n+                    \/\/ The following import not required with --disable-javafx-strict-checks\n+                    \/\/ import javafx.beans.property.*;\n+\n+                    \/**\n+                     * This is my class.\n+                     *\/\n+                    public class MyClass {\n+                        \/**\n+                         * This is my property that enables something\n+                         *\/\n+                         private BooleanProperty something = new SimpleBooleanProperty(false);\n+\n+                         public final boolean isSomething() {\n+                            return something.get();\n+                         }\n+\n+                         public final void setSomething(boolean val) {\n+                            something.set(val);\n+                         }\n+\n+                         public final BooleanProperty somethingProperty() {\n+                            return something;\n+                         }\n+\n+                         \/** Dummy declaration. *\/\n+                         public class BooleanProperty { }\n+                    }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", \"out5\",\n+                \"--javafx\",\n+                \"--disable-javafx-strict-checks\",\n+                \"-Xdoclint:all\",\n+                \"--source-path\", \"src5\",\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(Output.OUT, false,\n+                \"warning\",\n+                \"no comment\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testJavaFX\/TestJavaFX.java","additions":57,"deletions":1,"binary":false,"changes":58,"status":"modified"}]}