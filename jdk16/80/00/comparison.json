{"files":[{"patch":"@@ -1763,2 +1763,2 @@\n-                float lastX = wPrinterJob.getPenX();\n-                float lastY = wPrinterJob.getPenY();\n+                int lastX = wPrinterJob.getPenX();\n+                int lastY = wPrinterJob.getPenY();\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPathGraphics.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -365,4 +365,0 @@\n-    private static final float precisionScale = 1000.0f;\n-    private int graphicsMode;\n-    private double[] worldTransform = new double[6];\n-\n@@ -960,1 +956,0 @@\n-        precisionScaleBegin();\n@@ -966,21 +961,0 @@\n-        precisionScaleEnd();\n-    }\n-\n-    protected float precisionScaleUp(float value) {\n-        return value * precisionScale;\n-    }\n-\n-    protected float precisionScaleDown(float value) {\n-        return value \/ precisionScale;\n-    }\n-\n-    protected void precisionScaleBegin() {\n-        graphicsMode = setAdvancedGraphicsMode();\n-        getWorldTransform(worldTransform);\n-        float invPrecisionScale = 1.0f \/ precisionScale;\n-        scale(invPrecisionScale, invPrecisionScale);\n-    }\n-\n-    protected void precisionScaleEnd() {\n-        setWorldTransform(worldTransform);\n-        setGraphicsMode(graphicsMode);\n@@ -998,2 +972,1 @@\n-        moveTo(getPrintDC(),\n-               precisionScaleUp(x), precisionScaleUp(y));\n+        moveTo(getPrintDC(), x, y);\n@@ -1003,2 +976,1 @@\n-        lineTo(getPrintDC(),\n-               precisionScaleUp(x), precisionScaleUp(y));\n+        lineTo(getPrintDC(), x, y);\n@@ -1011,4 +983,3 @@\n-        polyBezierTo(getPrintDC(),\n-                     precisionScaleUp(control1x), precisionScaleUp(control1y),\n-                     precisionScaleUp(control2x), precisionScaleUp(control2y),\n-                     precisionScaleUp(endX), precisionScaleUp(endY));\n+        polyBezierTo(getPrintDC(),  control1x, control1y,\n+                               control2x, control2y,\n+                               endX, endY);\n@@ -1027,38 +998,0 @@\n-    \/**\n-     * Set the GDI graphics mode to {@code GM_ADVANCED}.\n-     *\/\n-    private int setAdvancedGraphicsMode() {\n-        return setAdvancedGraphicsMode(getPrintDC());\n-    }\n-\n-    \/**\n-     * Set the GDI graphics mode.\n-     * The {@code mode} should\n-     * be one of the following Windows constants:\n-     * {@code GM_COMPATIBLE} or {@code GM_ADVANCED}.\n-     *\/\n-    private int setGraphicsMode(int mode) {\n-        return setGraphicsMode(getPrintDC(), mode);\n-    }\n-\n-    \/**\n-     * Scale the GDI World Transform.\n-     *\/\n-    private void scale(double scaleX, double scaleY) {\n-        scale(getPrintDC(), scaleX, scaleY);\n-    }\n-\n-    \/**\n-     * Get the GDI World Transform.\n-     *\/\n-    private void getWorldTransform(double[] transform) {\n-        getWorldTransform(getPrintDC(), transform);\n-    }\n-\n-    \/**\n-     * Set the GDI World Transform.\n-     *\/\n-    private void setWorldTransform(double[] transform) {\n-        setWorldTransform(getPrintDC(), transform);\n-    }\n-\n@@ -1090,1 +1023,1 @@\n-    protected float getPenX() {\n+    protected int getPenX() {\n@@ -1092,1 +1025,1 @@\n-        return precisionScaleDown(getPenX(getPrintDC()));\n+        return getPenX(getPrintDC());\n@@ -1100,1 +1033,1 @@\n-    protected float getPenY() {\n+    protected int getPenY() {\n@@ -1102,1 +1035,1 @@\n-        return precisionScaleDown(getPenY(getPrintDC()));\n+        return getPenY(getPrintDC());\n@@ -1540,33 +1473,0 @@\n-    \/**\n-     * Set the GDI graphics mode to {@code GM_ADVANCED}\n-     * into the device context {@code printDC}.\n-     *\/\n-    protected native int setAdvancedGraphicsMode(long printDC);\n-\n-    \/**\n-     * Set the GDI graphics mode to {@code GM_ADVANCED}\n-     * into the device context {@code printDC}.\n-     * The {@code mode} should\n-     * be one of the following Windows constants:\n-     * {@code GM_COMPATIBLE} or {@code GM_ADVANCED}.\n-     *\/\n-    protected native int setGraphicsMode(long printDC, int mode);\n-\n-    \/**\n-     * Scale the GDI World Transform\n-     * of the device context {@code printDC}.\n-     *\/\n-    protected native void scale(long printDC, double scaleX, double scaleY);\n-\n-    \/**\n-     * Get the GDI World Transform\n-     * from the device context {@code printDC}.\n-     *\/\n-    protected native void getWorldTransform(long printDC, double[] transform);\n-\n-    \/**\n-     * Set the GDI World Transform\n-     * into the device context {@code printDC}.\n-     *\/\n-    protected native void setWorldTransform(long printDC, double[] transform);\n-\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPrinterJob.java","additions":9,"deletions":109,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -1935,105 +1935,0 @@\n-\/*\n- * Class:     sun_awt_windows_WPrinterJob\n- * Method:    setAdvancedGraphicsMode\n- * Signature: (J)I\n- *\/\n-JNIEXPORT jint JNICALL Java_sun_awt_windows_WPrinterJob_setAdvancedGraphicsMode\n-(JNIEnv *env, jobject self, jlong printDC) {\n-    TRY;\n-\n-    return (jint) ::SetGraphicsMode((HDC)printDC, GM_ADVANCED);\n-\n-    CATCH_BAD_ALLOC_RET(0);\n-}\n-\n-\/*\n- * Class:     sun_awt_windows_WPrinterJob\n- * Method:    setGraphicsMode\n- * Signature: (JI)I\n- *\/\n-JNIEXPORT jint JNICALL Java_sun_awt_windows_WPrinterJob_setGraphicsMode\n-(JNIEnv *env, jobject self, jlong printDC, jint mode) {\n-    TRY;\n-\n-    return (jint) ::SetGraphicsMode((HDC)printDC, mode);\n-\n-    CATCH_BAD_ALLOC_RET(0);\n-}\n-\n-\/*\n- * Class:     sun_awt_windows_WPrinterJob\n- * Method:    scale\n- * Signature: (JDD)V\n- *\/\n-JNIEXPORT void JNICALL Java_sun_awt_windows_WPrinterJob_scale\n-(JNIEnv *env, jobject self, jlong printDC, jdouble scaleX, jdouble scaleY) {\n-    TRY;\n-\n-    XFORM xForm;\n-\n-    xForm.eM11 = (FLOAT) scaleX;\n-    xForm.eM12 = (FLOAT) 0;\n-    xForm.eM21 = (FLOAT) 0;\n-    xForm.eM22 = (FLOAT) scaleY;\n-    xForm.eDx  = (FLOAT) 0;\n-    xForm.eDy  = (FLOAT) 0;\n-\n-    ::ModifyWorldTransform((HDC)printDC, &xForm, MWT_RIGHTMULTIPLY);\n-\n-    CATCH_BAD_ALLOC;\n-}\n-\n-\/*\n- * Class:     sun_awt_windows_WPrinterJob\n- * Method:    getWorldTransform\n- * Signature: (J[D)V\n- *\/\n-JNIEXPORT void JNICALL Java_sun_awt_windows_WPrinterJob_getWorldTransform\n-(JNIEnv* env, jobject self, jlong printDC, jdoubleArray transform) {\n-    TRY;\n-\n-    double elems[6];\n-    XFORM xForm;\n-\n-    ::GetWorldTransform((HDC)printDC, &xForm);\n-\n-    elems[0] = (double) xForm.eM11;\n-    elems[1] = (double) xForm.eM12;\n-    elems[2] = (double) xForm.eM21;\n-    elems[3] = (double) xForm.eM22;\n-    elems[4] = (double) xForm.eDx;\n-    elems[5] = (double) xForm.eDy;\n-\n-    env->SetDoubleArrayRegion(transform, 0, 6, elems);\n-\n-    CATCH_BAD_ALLOC;\n-}\n-\n-\/*\n- * Class:     sun_awt_windows_WPrinterJob\n- * Method:    setWorldTransform\n- * Signature: (J[D)V\n- *\/\n-JNIEXPORT void JNICALL Java_sun_awt_windows_WPrinterJob_setWorldTransform\n-(JNIEnv* env, jobject self, jlong printDC, jdoubleArray transform) {\n-    TRY;\n-\n-    double *elems;\n-    XFORM xForm;\n-\n-    elems = env->GetDoubleArrayElements(transform, 0);\n-\n-    xForm.eM11 = (FLOAT) elems[0];\n-    xForm.eM12 = (FLOAT) elems[1];\n-    xForm.eM21 = (FLOAT) elems[2];\n-    xForm.eM22 = (FLOAT) elems[3];\n-    xForm.eDx  = (FLOAT) elems[4];\n-    xForm.eDy  = (FLOAT) elems[5];\n-\n-    ::SetWorldTransform((HDC)printDC, &xForm);\n-\n-    env->ReleaseDoubleArrayElements(transform, elems, 0);\n-\n-    CATCH_BAD_ALLOC;\n-}\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintJob.cpp","additions":0,"deletions":105,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -1,254 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, BELLSOFT. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8256264\n- * @requires (os.family == \"windows\")\n- * @summary Check that a GlyphVector outline is printed with good quility on low dpi printers\n- * @run main\/othervm\/manual PathPrecisionScaleFactorTest\n- *\/\n-\n-import javax.print.PrintServiceLookup;\n-import javax.swing.*;\n-import java.awt.*;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.font.FontRenderContext;\n-import java.awt.font.GlyphVector;\n-import java.awt.geom.AffineTransform;\n-import java.awt.geom.Rectangle2D;\n-import java.awt.print.PageFormat;\n-import java.awt.print.Printable;\n-import java.awt.print.PrinterException;\n-import java.awt.print.PrinterJob;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-public class PathPrecisionScaleFactorTest {\n-\n-    private static final String DESCRIPTION =\n-            \" 1. Setup 'Microsoft Print to PDF' printer on Windows.\\n\" +\n-                    \" 2. Press Print button to print the text to PDF.\\n\" +\n-                    \" 3. Choose 'Microsoft Print to PDF' on the print dialog and press OK\\n\" +\n-                    \"    Two strings should be printed.\" +\n-                    \"    The first line is printed using drawString() method\" +\n-                    \"    and the second line is printed using filling glyph vector outline.\\n\" +\n-                    \" 3. Open the PDF file, zoom in the text and check that chars on the second line \" +\n-                    \"    (especially 'a' and 's') are not distorted and have the similar quality\" +\n-                    \"     as on the first line.\\n\" +\n-                    \" 4. If so, press PASS button, otherwise press FAIL button.\\n\";\n-\n-    private static final CountDownLatch testEndedSignal = new CountDownLatch(1);\n-    private static final int testTimeout = 300000;\n-    private static volatile String testFailureMsg;\n-    private static volatile boolean testPassed;\n-    private static volatile boolean testFinished;\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        SwingUtilities.invokeLater(() -> createAndShowTestDialog());\n-\n-        try {\n-            if (!testEndedSignal.await(testTimeout, TimeUnit.MILLISECONDS)) {\n-                throw new RuntimeException(String.format(\n-                        \"Test timeout '%d ms' elapsed.\", testTimeout));\n-            }\n-            if (!testPassed) {\n-                String failureMsg = testFailureMsg;\n-                if ((failureMsg != null) && (!failureMsg.trim().isEmpty())) {\n-                    throw new RuntimeException(failureMsg);\n-                } else {\n-                    throw new RuntimeException(\"Test failed.\");\n-                }\n-            }\n-        } catch (InterruptedException ie) {\n-            throw new RuntimeException(ie);\n-        } finally {\n-            testFinished = true;\n-        }\n-    }\n-\n-    private static void pass() {\n-        testPassed = true;\n-        testEndedSignal.countDown();\n-    }\n-\n-    private static void fail(String failureMsg) {\n-        testFailureMsg = failureMsg;\n-        testPassed = false;\n-        testEndedSignal.countDown();\n-    }\n-\n-    private static String convertMillisToTimeStr(int millis) {\n-        if (millis < 0) {\n-            return \"00:00:00\";\n-        }\n-        int hours = millis \/ 3600000;\n-        int minutes = (millis - hours * 3600000) \/ 60000;\n-        int seconds = (millis - hours * 3600000 - minutes * 60000) \/ 1000;\n-        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n-    }\n-\n-    private static void createAndShowTestDialog() {\n-\n-        final JDialog dialog = new JDialog();\n-        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n-        dialog.addWindowListener(new WindowAdapter() {\n-            @Override\n-            public void windowClosing(WindowEvent e) {\n-                dialog.dispose();\n-                fail(\"Main dialog was closed.\");\n-            }\n-        });\n-\n-        final JLabel testTimeoutLabel = new JLabel(String.format(\n-                \"Test timeout: %s\", convertMillisToTimeStr(testTimeout)));\n-        final long startTime = System.currentTimeMillis();\n-        final Timer timer = new Timer(0, null);\n-        timer.setDelay(1000);\n-        timer.addActionListener((e) -> {\n-            int leftTime = testTimeout - (int) (System.currentTimeMillis() - startTime);\n-            if ((leftTime < 0) || testFinished) {\n-                timer.stop();\n-                dialog.dispose();\n-            }\n-            testTimeoutLabel.setText(String.format(\n-                    \"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n-        });\n-        timer.start();\n-\n-        JTextArea textArea = new JTextArea(DESCRIPTION);\n-        textArea.setEditable(false);\n-\n-        final JButton testButton = new JButton(\"Print\");\n-        final JButton passButton = new JButton(\"PASS\");\n-        final JButton failButton = new JButton(\"FAIL\");\n-        testButton.addActionListener((e) -> {\n-            testButton.setEnabled(false);\n-            new Thread(() -> {\n-                try {\n-                    doTest();\n-\n-                    SwingUtilities.invokeLater(() -> {\n-                        passButton.setEnabled(true);\n-                        failButton.setEnabled(true);\n-                    });\n-                } catch (Throwable t) {\n-                    t.printStackTrace();\n-                    dialog.dispose();\n-                    fail(\"Exception occurred in a thread executing the test.\");\n-                }\n-            }).start();\n-        });\n-        passButton.setEnabled(false);\n-        passButton.addActionListener((e) -> {\n-            dialog.dispose();\n-            pass();\n-        });\n-        failButton.setEnabled(false);\n-        failButton.addActionListener((e) -> {\n-            dialog.dispose();\n-            fail(\"TitledBorder label is cut off\");\n-        });\n-\n-        JPanel mainPanel = new JPanel(new BorderLayout());\n-        JPanel labelPanel = new JPanel(new FlowLayout());\n-        labelPanel.add(testTimeoutLabel);\n-        mainPanel.add(labelPanel, BorderLayout.NORTH);\n-        mainPanel.add(textArea, BorderLayout.CENTER);\n-        JPanel buttonPanel = new JPanel(new FlowLayout());\n-        buttonPanel.add(testButton);\n-        buttonPanel.add(passButton);\n-        buttonPanel.add(failButton);\n-        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n-        dialog.add(mainPanel);\n-\n-        dialog.pack();\n-        dialog.setVisible(true);\n-    }\n-\n-    private static void doTest() throws Exception {\n-        SwingUtilities.invokeAndWait(() -> {\n-            try {\n-                new PathPrecisionScaleFactorPrintable();\n-            } catch (PrinterException e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n-    }\n-\n-    private static class PathPrecisionScaleFactorPrintable implements Printable {\n-\n-        PathPrecisionScaleFactorPrintable() throws PrinterException {\n-            PrinterJob job = PrinterJob.getPrinterJob();\n-            job.setPrintService(PrintServiceLookup.lookupDefaultPrintService());\n-            job.setPrintable(this);\n-\n-            if (job.printDialog()) {\n-                job.print();\n-            } else {\n-                throw new RuntimeException(\"Printing was canceled!\");\n-            }\n-        }\n-\n-        void paint(Graphics2D g) {\n-\n-            String text = \"abcdefghijklmnopqrstuvwxyz\";\n-            Font font = new Font(\"Times New Roman\", Font.PLAIN, 8);\n-            drawText(g, font, text);\n-        }\n-\n-        private static void drawText(Graphics2D g, Font font, String text) {\n-\n-            g.setFont(font);\n-            FontRenderContext frc = new FontRenderContext(new AffineTransform(), false, true);\n-\n-            Rectangle clip = g.getClipBounds();\n-            int cx = (int) clip.getCenterX();\n-            int cy = (int) clip.getCenterY();\n-\n-            FontMetrics metrics = g.getFontMetrics();\n-            int w = metrics.stringWidth(text);\n-            int h = metrics.getHeight();\n-\n-            int x = cx - w \/ 2;\n-            int y = cy - h \/ 2;\n-\n-            g.drawString(text + \" [draw string]\", x, y);\n-            GlyphVector gv = font.createGlyphVector(frc, text + \" [glyph vector]\");\n-            g.fill(gv.getOutline(x, y + h));\n-        }\n-\n-        @Override\n-        public int print(Graphics graphics, PageFormat pageFormat, int index) {\n-            if (index == 0) {\n-                paint((Graphics2D) graphics);\n-                return PAGE_EXISTS;\n-            } else {\n-                return NO_SUCH_PAGE;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/print\/PathPrecisionScaleFactor\/PathPrecisionScaleFactorTest.java","additions":0,"deletions":254,"binary":false,"changes":254,"status":"deleted"}]}