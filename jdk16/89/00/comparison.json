{"files":[{"patch":"@@ -1480,1 +1480,5 @@\n-      if( !s->depends_only_on_test() ) {\n+      if (s->depends_only_on_test() && igvn->no_dependent_zero_check(s)) {\n+        \/\/ For control producers.\n+        \/\/ Do not rewire Div and Mod nodes which could have a zero divisor to avoid skipping their zero check.\n+        igvn->replace_input_of(s, 0, data_target); \/\/ Move child to data-target\n+      } else {\n@@ -1484,1 +1488,1 @@\n-        for( l = 0; s->in(l) != ifp; l++ ) { }\n+        for (l = 0; s->in(l) != ifp; l++) { }\n@@ -1486,2 +1490,0 @@\n-      } else {                      \/\/ Else, for control producers,\n-        igvn->replace_input_of(s, 0, data_target); \/\/ Move child to data-target\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1454,1 +1454,0 @@\n-  bool no_dependent_zero_check(Node* n) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -286,1 +286,1 @@\n-    if (cd->depends_only_on_test() && no_dependent_zero_check(cd)) {\n+    if (cd->depends_only_on_test() && _igvn.no_dependent_zero_check(cd)) {\n@@ -305,19 +305,0 @@\n-\/\/ Check if the type of a divisor of a Div or Mod node includes zero.\n-bool PhaseIdealLoop::no_dependent_zero_check(Node* n) const {\n-  switch (n->Opcode()) {\n-    case Op_DivI:\n-    case Op_ModI: {\n-      \/\/ Type of divisor includes 0?\n-      const TypeInt* type_divisor = _igvn.type(n->in(2))->is_int();\n-      return (type_divisor->_hi < 0 || type_divisor->_lo > 0);\n-    }\n-    case Op_DivL:\n-    case Op_ModL: {\n-      \/\/ Type of divisor includes 0?\n-      const TypeLong* type_divisor = _igvn.type(n->in(2))->is_long();\n-      return (type_divisor->_hi < 0 || type_divisor->_lo > 0);\n-    }\n-  }\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1662,0 +1662,19 @@\n+\/\/ Check if the type of a divisor of a Div or Mod node includes zero.\n+bool PhaseIterGVN::no_dependent_zero_check(Node* n) const {\n+  switch (n->Opcode()) {\n+    case Op_DivI:\n+    case Op_ModI: {\n+      \/\/ Type of divisor includes 0?\n+      const TypeInt* type_divisor = type(n->in(2))->is_int();\n+      return (type_divisor->_hi < 0 || type_divisor->_lo > 0);\n+    }\n+    case Op_DivL:\n+    case Op_ModL: {\n+      \/\/ Type of divisor includes 0?\n+      const TypeLong* type_divisor = type(n->in(2))->is_long();\n+      return (type_divisor->_hi < 0 || type_divisor->_lo > 0);\n+    }\n+  }\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -549,0 +549,1 @@\n+  bool no_dependent_zero_check(Node* n) const;\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8259227\n+ * @summary Verify that zero check is executed before division\/modulo operation.\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroDominatedBy::test\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:StressSeed=917280111 compiler.loopopts.TestDivZeroDominatedBy\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestDivZeroDominatedBy {\n+\n+    public static int iFld = 1;\n+    public static int iFld1 = 2;\n+    public static int iFld2 = 3;\n+    public static int iArrFld[] = new int[10];\n+    public static double dFld = 1.0;\n+\n+    public static void test() {\n+        int x = 1;\n+        int y = 2;\n+        int z = 3;\n+\n+        iFld = y;\n+        iArrFld[5] += iFld1;\n+        int i = 1;\n+        do {\n+            for (int j = 0; j < 10; j++) {\n+                iFld2 += iFld2;\n+                iFld1 = iFld2;\n+                int k = 1;\n+                do {\n+                    iArrFld[k] = y;\n+                    z = iFld2;\n+                    dFld = x;\n+                    try {\n+                        y = iArrFld[k];\n+                        iArrFld[8] = 5;\n+                        iFld = (100 \/ z);\n+                    } catch (ArithmeticException a_e) {}\n+                } while (++k < 2);\n+            }\n+        } while (++i < 10);\n+    }\n+\n+    public static void main(String[] strArr) {\n+        test();\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDivZeroDominatedBy.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}