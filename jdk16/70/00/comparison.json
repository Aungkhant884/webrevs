{"files":[{"patch":"@@ -553,1 +553,1 @@\n-            if (!utils.getSerialTrees(te).isEmpty()) {\n+            if (utils.hasDocCommentTree(te) && !utils.getSerialTrees(te).isEmpty()) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/SerializedFormBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2688,0 +2688,10 @@\n+    \/**\n+     * Checks whether an element has an associated doc copmment.\n+     * @param element the element\n+     * @return {@code true} if the eleme nt has a comment, and false otherwise\n+     *\/\n+    public boolean hasDocCommentTree(Element element) {\n+        DocCommentInfo info = getDocCommentInfo(element);\n+        return info != null && info.dcTree != null;\n+    }\n+\n@@ -2695,22 +2705,1 @@\n-        DocCommentInfo info = null;\n-\n-        ElementKind kind = element.getKind();\n-        if (kind == ElementKind.PACKAGE || kind == ElementKind.OTHER) {\n-            info = dcTreeCache.get(element); \/\/ local cache\n-            if (info == null && kind == ElementKind.PACKAGE) {\n-                \/\/ package-info.java\n-                info = getDocCommentInfo(element);\n-            }\n-            if (info == null) {\n-                \/\/ package.html or overview.html\n-                info = configuration.cmtUtils.getHtmlCommentInfo(element); \/\/ html source\n-            }\n-        } else {\n-            info = configuration.cmtUtils.getSyntheticCommentInfo(element);\n-            if (info == null) {\n-                info = dcTreeCache.get(element); \/\/ local cache\n-            }\n-            if (info == null) {\n-                info = getDocCommentInfo(element); \/\/ get the real mccoy\n-            }\n-        }\n+        DocCommentInfo info = getDocCommentInfo(element);\n@@ -2741,0 +2730,27 @@\n+        DocCommentInfo info = null;\n+\n+        ElementKind kind = element.getKind();\n+        if (kind == ElementKind.PACKAGE || kind == ElementKind.OTHER) {\n+            info = dcTreeCache.get(element); \/\/ local cache\n+            if (info == null && kind == ElementKind.PACKAGE) {\n+                \/\/ package-info.java\n+                info = getDocCommentInfo0(element);\n+            }\n+            if (info == null) {\n+                \/\/ package.html or overview.html\n+                info = configuration.cmtUtils.getHtmlCommentInfo(element); \/\/ html source\n+            }\n+        } else {\n+            info = configuration.cmtUtils.getSyntheticCommentInfo(element);\n+            if (info == null) {\n+                info = dcTreeCache.get(element); \/\/ local cache\n+            }\n+            if (info == null) {\n+                info = getDocCommentInfo0(element); \/\/ get the real mccoy\n+            }\n+        }\n+\n+        return info;\n+    }\n+\n+    private DocCommentInfo getDocCommentInfo0(Element element) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":38,"deletions":22,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8251200\n+ * @summary False positive messages about missing comments for serialization\n+ * @library \/tools\/lib ..\/..\/lib\/\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.api\n+ *          jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build javadoc.tester.*\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestSerialMissing\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestSerialMissing extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        TestSerialMissing tester = new TestSerialMissing();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) } );\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testPackagePrivate(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    \/** Module m. *\/\n+                    module m { exports p; }\n+                    \"\"\",\n+                \"\"\"\n+                    package p;\n+                    \/** PUBLIC class. *\/\n+                    public class PUBLIC extends Exception { }\n+                    \"\"\",\n+                \"\"\"\n+                    package p;\n+                    \/\/ no comment: class should not be documented\n+                    class PACKAGE_PRIVATE extends Exception { }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"--module\", \"m\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ should not be any reference to PACKAGE_PRIVATE.java, such as for no comment\n+        checkOutput(Output.OUT, false,\n+                \"PACKAGE_PRIVATE\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSerialMissing\/TestSerialMissing.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}