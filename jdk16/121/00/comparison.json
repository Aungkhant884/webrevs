{"files":[{"patch":"@@ -5023,1 +5023,1 @@\n-              if (worklist.member(in) && is_dominator(early, r_in)) {\n+              if ((worklist.member(in) || in == mem) && is_dominator(early, r_in)) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8259641\n+ * @summary C2: assert(early->dominates(LCA)) failed: early is high enough\n+ *\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestBrokenAntiDependenceWithPhi TestBrokenAntiDependenceWithPhi\n+ *\n+ *\/\n+\n+public class TestBrokenAntiDependenceWithPhi {\n+\n+    int a;\n+    int b;\n+    byte c;\n+\n+    long e(int f, int g, long h) {\n+        int i[] = new int[a];\n+        double j = 2.74886;\n+        long k[][] = new long[a][a];\n+        long l = checkSum(k);\n+        return l;\n+    }\n+\n+    void m() {\n+        int s, o, p[] = new int[a];\n+        double d;\n+        for (d = 5; d < 388; d++) {\n+            e(b, b, 40418347472393L);\n+            for (s = 3; s < 66; ++s)\n+                int1array(a, 9);\n+        }\n+        for (o = 6; o > 2; o--)\n+            p[o] = c;\n+    }\n+\n+    public static void main(String[] q) {\n+        TestBrokenAntiDependenceWithPhi r = new TestBrokenAntiDependenceWithPhi();\n+        try {\n+            r.m();\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+        }\n+    }\n+\n+    public static long checkSum(long[] a) {\n+        long sum = 0;\n+        for (int j = 0; j < a.length; j++) {\n+            sum += (a[j] \/ (j + 1) + a[j] % (j + 1));\n+        }\n+        return sum;\n+    }\n+\n+    public static long checkSum(long[][] a) {\n+        long sum = 0;\n+        for (int j = 0; j < a.length; j++) {\n+            sum += checkSum(a[j]);\n+        }\n+        return sum;\n+    }\n+\n+    public static int[] int1array(int sz, int seed) {\n+        int[] ret = new int[sz];\n+        init(ret, seed);\n+        return ret;\n+    }\n+\n+    public static void init(int[] a, int seed) {\n+        for (int j = 0; j < a.length; j++) {\n+            a[j] = (j % 2 == 0) ? seed + j : seed - j;\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestBrokenAntiDependenceWithPhi.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}