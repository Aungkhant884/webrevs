{"files":[{"patch":"@@ -2462,0 +2462,15 @@\n+  assert(!ctrl->is_Call() || ctrl == n, \"projection expected\");\n+#ifdef ASSERT\n+  if ((ctrl->is_Proj() && ctrl->in(0)->is_Call()) ||\n+          (ctrl->is_Catch() && ctrl->in(0)->in(0)->is_Call())){\n+    CallNode* call = ctrl->is_Proj() ? ctrl->in(0)->as_Call() : ctrl->in(0)->in(0)->as_Call();\n+    int mems = 0;\n+    for (DUIterator_Fast imax, i = call->fast_outs(imax); i < imax; i++) {\n+      Node* u = call->fast_out(i);\n+      if (u->bottom_type() == Type::MEMORY) {\n+        mems++;\n+      }\n+    }\n+    assert(mems <= 1, \"No node right after call if multiple mem projections\");\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -4971,0 +4971,1 @@\n+      Unique_Node_List worklist;\n@@ -4972,3 +4973,1 @@\n-      Node_List worklist;\n-\n-      Node *mem = n->in(MemNode::Memory);\n+      Node* mem = n->in(MemNode::Memory);\n@@ -4979,2 +4978,2 @@\n-      while(worklist.size() != 0 && LCA != early) {\n-        Node* s = worklist.pop();\n+      for (uint i = 0; i < worklist.size() && LCA != early; i++) {\n+        Node* s = worklist.at(i);\n@@ -4982,1 +4981,2 @@\n-            (s->is_CallStaticJava() && s->as_CallStaticJava()->uncommon_trap_request() != 0)) {\n+            (s->is_CallStaticJava() && s->as_CallStaticJava()->uncommon_trap_request() != 0) ||\n+            s->is_Phi()) {\n@@ -4990,1 +4990,1 @@\n-          Node *sctrl = has_ctrl(s) ? get_ctrl(s) : s->in(0);\n+          Node* sctrl = has_ctrl(s) ? get_ctrl(s) : s->in(0);\n@@ -5014,0 +5014,16 @@\n+      \/\/ For Phis only consider Region's inputs that were reached by following the memory edges\n+      if (LCA != early) {\n+        for (uint i = 0; i < worklist.size(); i++) {\n+          Node* s = worklist.at(i);\n+          if (s->is_Phi() && C->can_alias(s->adr_type(), load_alias_idx)) {\n+            Node* r = s->in(0);\n+            for (uint j = 1; j < s->req(); j++) {\n+              Node* in = s->in(j);\n+              Node* r_in = r->in(j);\n+              if (worklist.member(in) && is_dominator(early, r_in)) {\n+                LCA = dom_lca_for_get_late_ctrl(LCA, r_in, n);\n+              }\n+            }\n+          }\n+        }\n+      }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ *\n+ * @run main\/othervm -XX:+UseShenandoahGC TestBadRawMemoryAfterCall\n+ *\n+ *\/\n+\n+public class TestBadRawMemoryAfterCall {\n+    public static void main(String[] args) {\n+        A a = new A();\n+        B b = new B();\n+        C c = new C();\n+        for (int i = 0; i < 20_000; i++) {\n+            test(a);\n+            test(b);\n+            test(c);\n+        }\n+    }\n+\n+    private static Object test(A a) {\n+        if (a.getClass() == A.class) {\n+        }\n+\n+        Object o = null;\n+        try {\n+            a.m();\n+            o = a.getClass();\n+        } catch (Exception e) {\n+\n+        }\n+        return o;\n+    }\n+\n+    private static class A {\n+        void m() throws Exception {\n+            throw new Exception();\n+        }\n+    }\n+    private static class B extends A {\n+        void m() {\n+        }\n+    }\n+    private static class C extends B {\n+        void m() {\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBadRawMemoryAfterCall.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}