{"files":[{"patch":"@@ -710,1 +710,1 @@\n-        if (ownerClass == null) { \/\/ base case\n+        if (ownerClass == null || Modifier.isStatic(c.getModifiers())) { \/\/ base case\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary A receiver type is of the correct shape for nested\/inner classes.\n+ *\/\n+\n+import java.lang.reflect.AnnotatedParameterizedType;\n+import java.lang.reflect.AnnotatedType;\n+\n+public class TestReceiverTypeSort<T> {\n+\n+    public static void main(String[] args) throws Exception {\n+        AnnotatedType nested = Class.forName(TestReceiverTypeSort.class.getTypeName() + \"$Nested\").getMethod(\"method\").getAnnotatedReceiverType();\n+        if (!(nested instanceof AnnotatedParameterizedType)) {\n+            throw new AssertionError();\n+        } else if (!(nested.getAnnotatedOwnerType() instanceof AnnotatedParameterizedType)) {\n+            throw new AssertionError();\n+        }\n+        AnnotatedType inner = Inner.class.getMethod(\"method\").getAnnotatedReceiverType();\n+        if (inner instanceof AnnotatedParameterizedType) {\n+            throw new AssertionError();\n+        } else if (inner.getAnnotatedOwnerType() instanceof AnnotatedParameterizedType) {\n+            throw new AssertionError();\n+        }\n+        AnnotatedType nestedInner = GenericInner.class.getMethod(\"method\").getAnnotatedReceiverType();\n+        if (!(nestedInner instanceof AnnotatedParameterizedType)) {\n+            throw new AssertionError();\n+        } else if (nestedInner.getAnnotatedOwnerType() instanceof AnnotatedParameterizedType) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    public class Nested {\n+        public void method(TestReceiverTypeSort<T>.Nested this) { }\n+    }\n+\n+    public static class Inner {\n+        public void method(TestReceiverTypeSort.Inner this) { }\n+    }\n+\n+    public static class GenericInner<S> {\n+        public void method(TestReceiverTypeSort.GenericInner<S> this) { }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeSort.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}