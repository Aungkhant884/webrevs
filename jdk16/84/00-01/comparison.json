{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm --illegal-access=permit -Dforeign.restricted=permit TestByteBuffer\n+ * @run testng\/othervm -Dforeign.restricted=permit TestByteBuffer\n@@ -47,1 +47,0 @@\n-import java.lang.reflect.Field;\n@@ -82,1 +81,0 @@\n-import sun.nio.ch.FileChannelImpl;\n@@ -140,12 +138,0 @@\n-    static final long ALLOC_GRANULARITY;\n-\n-    static {\n-        try {\n-            Field granularity_field = FileChannelImpl.class.getDeclaredField(\"allocationGranularity\");\n-            granularity_field.setAccessible(true);\n-            ALLOC_GRANULARITY = (long)granularity_field.get(null);\n-        } catch (ReflectiveOperationException ex) {\n-            throw new ExceptionInInitializerError(ex);\n-        }\n-    }\n-\n@@ -488,1 +474,8 @@\n-        int SIZE = 1024;\n+        int SIZE = Byte.MAX_VALUE;\n+\n+        try (MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0, SIZE, FileChannel.MapMode.READ_WRITE)) {\n+            for (byte offset = 0; offset < SIZE; offset++) {\n+                MemoryAccess.setByteAtOffset(segment, offset, offset);\n+            }\n+            MappedMemorySegments.force(segment);\n+        }\n@@ -491,2 +484,2 @@\n-            try (MemorySegment segmentOffset = MemorySegment.mapFile(f.toPath(), offset, SIZE, FileChannel.MapMode.READ_WRITE)) {\n-                assertEquals(segmentOffset.address().toRawLongValue() % ALLOC_GRANULARITY, offset);\n+            try (MemorySegment segment = MemorySegment.mapFile(f.toPath(), offset, SIZE - offset, FileChannel.MapMode.READ_ONLY)) {\n+                assertEquals(MemoryAccess.getByte(segment), offset);\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"}]}