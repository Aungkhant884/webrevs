{"files":[{"patch":"@@ -892,1 +892,1 @@\n-            return address;\n+            return address + pagePosition;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -Dforeign.restricted=permit TestByteBuffer\n+ * @run testng\/othervm --illegal-access=permit -Dforeign.restricted=permit TestByteBuffer\n@@ -47,0 +47,1 @@\n+import java.lang.reflect.Field;\n@@ -81,0 +82,2 @@\n+import sun.nio.ch.FileChannelImpl;\n+\n@@ -137,0 +140,12 @@\n+    static final long ALLOC_GRANULARITY;\n+\n+    static {\n+        try {\n+            Field granularity_field = FileChannelImpl.class.getDeclaredField(\"allocationGranularity\");\n+            granularity_field.setAccessible(true);\n+            ALLOC_GRANULARITY = (long)granularity_field.get(null);\n+        } catch (ReflectiveOperationException ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n@@ -467,0 +482,15 @@\n+    @Test\n+    public void testMapOffset() throws IOException {\n+        File f = new File(\"testMapOffset.out\");\n+        f.createNewFile();\n+        f.deleteOnExit();\n+\n+        int SIZE = 1024;\n+\n+        for (int offset = 0 ; offset < SIZE ; offset++) {\n+            try (MemorySegment segmentOffset = MemorySegment.mapFile(f.toPath(), offset, SIZE, FileChannel.MapMode.READ_WRITE)) {\n+                assertEquals(segmentOffset.address().toRawLongValue() % ALLOC_GRANULARITY, offset);\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}