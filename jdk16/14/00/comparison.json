{"files":[{"patch":"@@ -742,0 +742,6 @@\n+bool InstanceKlass::is_record() const {\n+  return _record_components != NULL &&\n+         is_final() &&\n+         java_super() == SystemDictionary::Record_klass();\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -476,1 +476,1 @@\n-  bool is_record() const { return _record_components != NULL; }\n+  bool is_record() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1854,0 +1854,5 @@\n+\/*\n+ * A class is a record if and only if it is final and a direct subclass\n+ * of java.lang.Record and the presence of `Record` attributes;\n+ * otherwise, it is not a record.\n+ *\/\n@@ -1867,0 +1872,8 @@\n+\/*\n+ * Returns an array representing the `Record` attribute, or NULL if\n+ * the attribute is not present.\n+ *\n+ * Note that this function returns the content of the `Record` attribute\n+ * if present.  A non-record class with the `Record` attribute is not a record\n+ * but this function returns non-null.\n+ *\/\n@@ -1874,19 +1887,15 @@\n-  if (ik->is_record()) {\n-    Array<RecordComponent*>* components = ik->record_components();\n-    assert(components != NULL, \"components should not be NULL\");\n-    {\n-      JvmtiVMObjectAllocEventCollector oam;\n-      constantPoolHandle cp(THREAD, ik->constants());\n-      int length = components->length();\n-      assert(length >= 0, \"unexpected record_components length\");\n-      objArrayOop record_components =\n-        oopFactory::new_objArray(SystemDictionary::RecordComponent_klass(), length, CHECK_NULL);\n-      objArrayHandle components_h (THREAD, record_components);\n-\n-      for (int x = 0; x < length; x++) {\n-        RecordComponent* component = components->at(x);\n-        assert(component != NULL, \"unexpected NULL record component\");\n-        oop component_oop = java_lang_reflect_RecordComponent::create(ik, component, CHECK_NULL);\n-        components_h->obj_at_put(x, component_oop);\n-      }\n-      return (jobjectArray)JNIHandles::make_local(THREAD, components_h());\n+  Array<RecordComponent*>* components = ik->record_components();\n+  if (components != NULL) {\n+    JvmtiVMObjectAllocEventCollector oam;\n+    constantPoolHandle cp(THREAD, ik->constants());\n+    int length = components->length();\n+    assert(length >= 0, \"unexpected record_components length\");\n+    objArrayOop record_components =\n+      oopFactory::new_objArray(SystemDictionary::RecordComponent_klass(), length, CHECK_NULL);\n+    objArrayHandle components_h (THREAD, record_components);\n+\n+    for (int x = 0; x < length; x++) {\n+      RecordComponent* component = components->at(x);\n+      assert(component != NULL, \"unexpected NULL record component\");\n+      oop component_oop = java_lang_reflect_RecordComponent::create(ik, component, CHECK_NULL);\n+      components_h->obj_at_put(x, component_oop);\n@@ -1894,0 +1903,1 @@\n+    return (jobjectArray)JNIHandles::make_local(THREAD, components_h());\n@@ -1896,3 +1906,1 @@\n-  \/\/ Return empty array if ofClass is not a record.\n-  objArrayOop result = oopFactory::new_objArray(SystemDictionary::RecordComponent_klass(), 0, CHECK_NULL);\n-  return (jobjectArray)JNIHandles::make_local(THREAD, result);\n+  return NULL;\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":30,"deletions":22,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2386,5 +2386,1 @@\n-        RecordComponent[] recordComponents = getRecordComponents0();\n-        if (recordComponents == null) {\n-            return new RecordComponent[0];\n-        }\n-        return recordComponents;\n+        return getRecordComponents0();\n@@ -3580,1 +3576,8 @@\n-    private native Class<?>[]   getDeclaredClasses0();\n+    private native Class<?>[]    getDeclaredClasses0();\n+\n+    \/*\n+     * Returns an array representing the Record attribute, or null if not present.\n+     *\n+     * Note that this method may return non-null array on a non-record class\n+     * if the Record attribute is present.\n+     *\/\n@@ -3582,1 +3585,1 @@\n-    private native boolean      isRecord0();\n+    private native boolean       isRecord0();\n@@ -3709,0 +3712,2 @@\n+        \/\/ this superclass and final modifier check is not strictly necessary\n+        \/\/ they are intrinsified and serve as a fast-path check\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"}]}