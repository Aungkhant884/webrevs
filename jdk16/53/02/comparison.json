{"files":[{"patch":"@@ -63,0 +63,1 @@\n+            System.out.println(\"count: \" + count);\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/nativeLibrary\/NativeLibraryTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+    private Object o;\n+\n@@ -38,1 +40,2 @@\n-        cleaner.register(new Object(), () -> cleanerInvoked.countDown());\n+        this.o = new Object();\n+        cleaner.register(o, () -> cleanerInvoked.countDown());\n@@ -41,1 +44,1 @@\n-    private void doit() {\n+    private void doit(int iter) {\n@@ -45,1 +48,1 @@\n-                System.out.println(\"gc \" + i);\n+                System.out.println(\"doit() iter: \" + iter + \", gc \" + i);\n@@ -65,0 +68,2 @@\n+        o = null; \/\/ Keep reference to Object until now, to ensure the Cleaner\n+                  \/\/ doesn't count down the latch before await() is called.\n@@ -67,1 +72,4 @@\n-            doit();\n+            doit(i);\n+            try { Thread.sleep(1000); } catch (InterruptedException e) {\n+                throw new AssertionError(\"unexpected interrupted sleep\", e);\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ForceGC.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"}]}