{"files":[{"patch":"@@ -119,1 +119,0 @@\n-            MemoryScope scope = MemoryScope.createConfined(null, unmapperProxy::unmap, null);\n@@ -124,2 +123,7 @@\n-            return new MappedMemorySegmentImpl(unmapperProxy.address(), unmapperProxy, bytesSize,\n-                    modes, scope);\n+            if (unmapperProxy != null) {\n+                MemoryScope scope = MemoryScope.createConfined(null, unmapperProxy::unmap, null);\n+                return new MappedMemorySegmentImpl(unmapperProxy.address(), unmapperProxy, bytesSize,\n+                        modes, scope);\n+            } else {\n+                return new EmptyMappedMemorySegmentImpl(modes);\n+            }\n@@ -138,0 +142,28 @@\n+\n+    static class EmptyMappedMemorySegmentImpl extends MappedMemorySegmentImpl {\n+\n+        public EmptyMappedMemorySegmentImpl(int modes) {\n+            super(0, null, 0, modes,\n+                    MemoryScope.createConfined(null, MemoryScope.DUMMY_CLEANUP_ACTION, null));\n+        }\n+\n+        @Override\n+        public void load() {\n+            \/\/ do nothing\n+        }\n+\n+        @Override\n+        public void unload() {\n+            \/\/ do nothing\n+        }\n+\n+        @Override\n+        public boolean isLoaded() {\n+            return true;\n+        }\n+\n+        @Override\n+        public void force() {\n+            \/\/ do nothing\n+        }\n+    };\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":35,"deletions":3,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -467,0 +467,1 @@\n+    @Test\n@@ -471,0 +472,1 @@\n+        \/\/RW\n@@ -473,0 +475,16 @@\n+            assertEquals(segment.isMapped(), true);\n+            assertTrue((segment.accessModes() & (READ | WRITE)) == (READ | WRITE));\n+            MappedMemorySegments.force(segment);\n+            MappedMemorySegments.load(segment);\n+            MappedMemorySegments.isLoaded(segment);\n+            MappedMemorySegments.unload(segment);\n+        }\n+        \/\/RO\n+        try (MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0L, 0L, FileChannel.MapMode.READ_ONLY)) {\n+            assertEquals(segment.byteSize(), 0);\n+            assertEquals(segment.isMapped(), true);\n+            assertTrue((segment.accessModes() & (READ | WRITE)) == READ);\n+            MappedMemorySegments.force(segment);\n+            MappedMemorySegments.load(segment);\n+            MappedMemorySegments.isLoaded(segment);\n+            MappedMemorySegments.unload(segment);\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}