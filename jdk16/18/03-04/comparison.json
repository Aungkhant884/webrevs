{"files":[{"patch":"@@ -163,4 +163,0 @@\n-NO_TRANSITION(jlong, jfr_get_string_pool_generation_address(JNIEnv* env, jobject jvm))\n-  return JfrStringPool::generation_address();\n-NO_TRANSITION_END\n-\n@@ -330,2 +326,2 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_add_string_constant(JNIEnv* env, jclass jvm, jlong gen, jlong id, jstring string))\n-  return JfrStringPool::add(gen, id, string, thread);\n+JVM_ENTRY_NO_ENV(jboolean, jfr_add_string_constant(JNIEnv* env, jclass jvm, jlong id, jstring string))\n+  return JfrStringPool::add(id, string, thread);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,3 +123,1 @@\n-jlong JNICALL jfr_get_string_pool_generation_address(JNIEnv* env, jobject jvm);\n-\n-jboolean JNICALL jfr_add_string_constant(JNIEnv* env, jclass jvm, jlong gen, jlong id, jstring string);\n+jboolean JNICALL jfr_add_string_constant(JNIEnv* env, jclass jvm, jlong id, jstring string);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,2 +78,1 @@\n-      (char*)\"getStringPoolGenerationAddress\", (char*)\"()J\",(void*)jfr_get_string_pool_generation_address,\n-      (char*)\"addStringConstant\", (char*)\"(JJLjava\/lang\/String;)Z\", (void*)jfr_add_string_constant,\n+      (char*)\"addStringConstant\", (char*)\"(JLjava\/lang\/String;)Z\", (void*)jfr_add_string_constant,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -317,1 +317,0 @@\n-typedef Content<JfrStringPool, &JfrStringPool::write_at_safepoint> StringPoolSafepoint;\n@@ -319,1 +318,0 @@\n-typedef WriteCheckpointEvent<StringPoolSafepoint> WriteStringPoolSafepoint;\n@@ -333,6 +331,0 @@\n-static u4 write_stringpool_safepoint(JfrStringPool& string_pool, JfrChunkWriter& chunkwriter) {\n-  StringPoolSafepoint sps(string_pool);\n-  WriteStringPoolSafepoint wsps(chunkwriter, sps, TYPE_STRING);\n-  return invoke(wsps);\n-}\n-\n@@ -460,1 +452,1 @@\n-  _string_pool.clear_at_safepoint();\n+  _string_pool.clear();\n@@ -571,1 +563,3 @@\n-  write_stringpool_safepoint(_string_pool, _chunkwriter);\n+  if (_string_pool.is_modified()) {\n+    write_stringpool(_string_pool, _chunkwriter);\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,10 +44,0 @@\n-static int64_t _generation = 1;\n-\n-jlong JfrStringPool::generation_address() {\n-  return (jlong)(&_generation);\n-}\n-\n-inline void inc_generation() {\n-  ++_generation;\n-}\n-\n@@ -144,1 +134,1 @@\n-jboolean JfrStringPool::add(jlong gen, jlong id, jstring string, JavaThread* jt) {\n+jboolean JfrStringPool::add(jlong id, jstring string, JavaThread* jt) {\n@@ -146,3 +136,0 @@\n-  if (_generation != gen) {\n-    return JNI_FALSE;\n-  }\n@@ -212,6 +199,0 @@\n-size_t JfrStringPool::write_at_safepoint() {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"invariant\");\n-  inc_generation();\n-  return write();\n-}\n-\n@@ -229,7 +210,0 @@\n-size_t JfrStringPool::clear_at_safepoint() {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"invariant\");\n-  inc_generation();\n-  return clear();\n-}\n-\n-\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.cpp","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-  size_t write_at_safepoint();\n@@ -51,3 +50,1 @@\n-  size_t clear_at_safepoint();\n-  static jlong generation_address();\n-  static jboolean add(jlong gen, jlong id, jstring string, JavaThread* jt);\n+  static jboolean add(jlong id, jstring string, JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -225,0 +225,4 @@\n+    private void resetStringPool() {\n+        StringPool.reset();       \n+    }\n+\n@@ -276,0 +280,1 @@\n+            resetStringPool();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventWriter.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -487,2 +487,0 @@\n-     * @param generation the generation of this insertion attempt\n-     *\n@@ -495,10 +493,1 @@\n-    public static native boolean addStringConstant(long generation, long id, String s);\n-\n-    \/**\n-     * Gets the address of the string constant pool generation counter.\n-     *\n-     * The generation counter increments on every rotation.\n-     *\n-     * @return The address of the generation counter.\n-     *\/\n-    public native long getStringPoolGenerationAddress();\n+    public static native boolean addStringConstant(long id, String s);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import jdk.internal.misc.Unsafe;\n-\n@@ -33,3 +31,0 @@\n-\n-    private static final Unsafe unsafe = Unsafe.getUnsafe();\n-\n@@ -38,8 +33,4 @@\n-    static final long DO_NOT_POOL = -1;\n-    private static final long generationAddress;\n-    private static final SimpleStringIdPool sp;\n-    static {\n-        generationAddress = JVM.getJVM().getStringPoolGenerationAddress();\n-        sp = new SimpleStringIdPool(getCurrentGeneration());\n-    }\n-    public static long addString(String s) {\n+    private static final long DO_NOT_POOL = -1;\n+    private static final SimpleStringIdPool sp = new SimpleStringIdPool();\n+\n+    static long addString(String s) {\n@@ -48,2 +39,3 @@\n-    private static long getCurrentGeneration() {\n-        return unsafe.getLong(generationAddress);\n+\n+    static void reset() {\n+        sp.reset();\n@@ -51,0 +43,1 @@\n+\n@@ -54,2 +47,0 @@\n-        \/* generation of cached strings *\/\n-        private long poolGen;\n@@ -71,2 +62,1 @@\n-        SimpleStringIdPool(long generation) {\n-            this.poolGen = generation;\n+        SimpleStringIdPool() {\n@@ -75,1 +65,2 @@\n-        private void reset(long generation) {\n+\n+        private void reset() {\n@@ -77,1 +68,0 @@\n-            this.poolGen = generation;\n@@ -80,0 +70,1 @@\n+\n@@ -81,16 +72,3 @@\n-            long currentGen = getCurrentGeneration();\n-            if (poolGen == currentGen) {\n-                \/* At this moment, the pool is associated with the current chunk.\n-                 * If there is a safepoint that rotates the chunk after this point,\n-                 * we have a safety guard in that the EventWriter will be notified,\n-                 * and it will discard the stale id to string association and issue a retry.\n-                 * On retry, the generations are again checked, now they differ,\n-                 * and the cache is reset.\n-                 *\/\n-                Long lsid = this.cache.get(s);\n-                if (lsid != null) {\n-                    return lsid.longValue();\n-                }\n-            } else {\n-                \/* pool is for an old chunk *\/\n-                reset(currentGen);\n+            Long lsid = this.cache.get(s);\n+            if (lsid != null) {\n+                return lsid.longValue();\n@@ -104,1 +82,1 @@\n-                reset(currentGen);\n+                reset();\n@@ -114,1 +92,1 @@\n-                JVM.addStringConstant(poolGen, sid, s);\n+                JVM.addStringConstant(sid, s);\n@@ -119,0 +97,1 @@\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/StringPool.java","additions":19,"deletions":40,"binary":false,"changes":59,"status":"modified"}]}