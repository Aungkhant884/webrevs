{"files":[{"patch":"@@ -163,4 +163,0 @@\n-NO_TRANSITION(jlong, jfr_get_epoch_address(JNIEnv* env, jobject jvm))\n-  return JfrTraceIdEpoch::epoch_address();\n-NO_TRANSITION_END\n-\n@@ -330,2 +326,2 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_add_string_constant(JNIEnv* env, jclass jvm, jboolean epoch, jlong id, jstring string))\n-  return JfrStringPool::add(epoch == JNI_TRUE, id, string, thread) ? JNI_TRUE : JNI_FALSE;\n+JVM_ENTRY_NO_ENV(jboolean, jfr_add_string_constant(JNIEnv* env, jclass jvm, jlong id, jstring string))\n+  return JfrStringPool::add(id, string, thread);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,3 +123,1 @@\n-jlong JNICALL jfr_get_epoch_address(JNIEnv* env, jobject jvm);\n-\n-jboolean JNICALL jfr_add_string_constant(JNIEnv* env, jclass jvm, jboolean epoch, jlong id, jstring string);\n+jboolean JNICALL jfr_add_string_constant(JNIEnv* env, jclass jvm, jlong id, jstring string);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,2 +78,1 @@\n-      (char*)\"getEpochAddress\", (char*)\"()J\",(void*)jfr_get_epoch_address,\n-      (char*)\"addStringConstant\", (char*)\"(ZJLjava\/lang\/String;)Z\", (void*)jfr_add_string_constant,\n+      (char*)\"addStringConstant\", (char*)\"(JLjava\/lang\/String;)Z\", (void*)jfr_add_string_constant,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"jfr\/utilities\/jfrSignal.hpp\"\n@@ -60,16 +61,1 @@\n-static volatile bool constant_pending = false;\n-\n-static bool is_constant_pending() {\n-  if (Atomic::load_acquire(&constant_pending)) {\n-    Atomic::release_store(&constant_pending, false); \/\/ reset\n-    return true;\n-  }\n-  return false;\n-}\n-\n-static void set_constant_pending() {\n-  if (!Atomic::load_acquire(&constant_pending)) {\n-    Atomic::release_store(&constant_pending, true);\n-  }\n-}\n-\n+static JfrSignal _new_checkpoint;\n@@ -234,1 +220,1 @@\n-    set_constant_pending();\n+    _new_checkpoint.signal();\n@@ -477,1 +463,1 @@\n-  if (is_constant_pending()) {\n+  if (_new_checkpoint.is_signaled()) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+JfrSignal JfrTraceIdEpoch::_tag_state;\n@@ -31,1 +32,0 @@\n-volatile bool JfrTraceIdEpoch::_changed_tag_state = false;\n@@ -46,0 +46,1 @@\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdEpoch.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"jfr\/utilities\/jfrSignal.hpp\"\n@@ -57,0 +58,1 @@\n+  static JfrSignal _tag_state;\n@@ -59,1 +61,0 @@\n-  static volatile bool _changed_tag_state;\n@@ -64,8 +65,0 @@\n-  static bool changed_tag_state() {\n-    return Atomic::load_acquire(&_changed_tag_state);\n-  }\n-\n-  static void set_tag_state(bool value) {\n-    Atomic::release_store(&_changed_tag_state, value);\n-  }\n-\n@@ -118,5 +111,1 @@\n-    if (changed_tag_state()) {\n-      set_tag_state(false);\n-      return true;\n-    }\n-    return false;\n+    return _tag_state.is_signaled();\n@@ -126,3 +115,1 @@\n-    if (!changed_tag_state()) {\n-      set_tag_state(true);\n-    }\n+    _tag_state.signal();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdEpoch.hpp","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -317,1 +317,0 @@\n-typedef Content<JfrStringPool, &JfrStringPool::write_at_safepoint> StringPoolSafepoint;\n@@ -319,1 +318,0 @@\n-typedef WriteCheckpointEvent<StringPoolSafepoint> WriteStringPoolSafepoint;\n@@ -333,6 +331,0 @@\n-static u4 write_stringpool_safepoint(JfrStringPool& string_pool, JfrChunkWriter& chunkwriter) {\n-  StringPoolSafepoint sps(string_pool);\n-  WriteStringPoolSafepoint wsps(chunkwriter, sps, TYPE_STRING);\n-  return invoke(wsps);\n-}\n-\n@@ -572,1 +564,1 @@\n-    write_stringpool_safepoint(_string_pool, _chunkwriter);\n+    write_stringpool(_string_pool, _chunkwriter);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"jfr\/utilities\/jfrSignal.hpp\"\n@@ -43,26 +44,1 @@\n-static JfrStringPool* _instance = NULL;\n-static uint64_t store_generation = 0;\n-static uint64_t serialized_generation = 0;\n-\n-inline void set_generation(uint64_t value, uint64_t* const dest) {\n-  assert(dest != NULL, \"invariant\");\n-  Atomic::release_store(dest, value);\n-}\n-\n-static void increment_store_generation() {\n-  const uint64_t current_serialized = Atomic::load_acquire(&serialized_generation);\n-  const uint64_t current_stored = Atomic::load_acquire(&store_generation);\n-  if (current_serialized == current_stored) {\n-    set_generation(current_serialized + 1, &store_generation);\n-  }\n-}\n-\n-static bool increment_serialized_generation() {\n-  const uint64_t current_stored = Atomic::load_acquire(&store_generation);\n-  const uint64_t current_serialized = Atomic::load_acquire(&serialized_generation);\n-  if (current_stored != current_serialized) {\n-    set_generation(current_stored, &serialized_generation);\n-    return true;\n-  }\n-  return false;\n-}\n+static JfrSignal _new_string;\n@@ -71,1 +47,1 @@\n-  return increment_serialized_generation();\n+  return _new_string.is_signaled();\n@@ -74,0 +50,2 @@\n+static JfrStringPool* _instance = NULL;\n+\n@@ -79,2 +57,0 @@\n-  store_generation = 0;\n-  serialized_generation = 0;\n@@ -158,1 +134,1 @@\n-bool JfrStringPool::add(bool epoch, jlong id, jstring string, JavaThread* jt) {\n+jboolean JfrStringPool::add(jlong id, jstring string, JavaThread* jt) {\n@@ -160,4 +136,0 @@\n-  const bool current_epoch = JfrTraceIdEpoch::epoch();\n-  if (current_epoch != epoch) {\n-    return current_epoch;\n-  }\n@@ -170,2 +142,2 @@\n-  increment_store_generation();\n-  return current_epoch;\n+  _new_string.signal();\n+  return JNI_TRUE;\n@@ -227,5 +199,0 @@\n-size_t JfrStringPool::write_at_safepoint() {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"invariant\");\n-  return write();\n-}\n-\n@@ -233,1 +200,0 @@\n-  increment_serialized_generation();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.cpp","additions":8,"deletions":42,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-  static bool add(bool epoch, jlong id, jstring string, JavaThread* jt);\n@@ -50,1 +49,0 @@\n-  size_t write_at_safepoint();\n@@ -52,0 +50,2 @@\n+  static jboolean add(jlong id, jstring string, JavaThread* jt);\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_JFR_UTILITIES_JFRSIGNAL_HPP\n+#define SHARE_JFR_UTILITIES_JFRSIGNAL_HPP\n+\n+#include \"runtime\/atomic.hpp\"\n+\n+class JfrSignal {\n+ private:\n+  mutable volatile bool _signaled;\n+ public:\n+  JfrSignal() : _signaled(false) {}\n+\n+  void signal() const {\n+    if (!Atomic::load_acquire(&_signaled)) {\n+      Atomic::release_store(&_signaled, true);\n+    }\n+  }\n+\n+  bool is_signaled() const {\n+    if (Atomic::load_acquire(&_signaled)) {\n+      Atomic::release_store(&_signaled, false); \/\/ auto-reset\n+      return true;\n+    }\n+    return false;\n+  }\n+};\n+\n+#endif \/\/ SHARE_JFR_UTILITIES_JFRSIGNAL_HPP\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrSignal.hpp","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -225,0 +225,4 @@\n+    private void resetStringPool() {\n+        StringPool.reset();       \n+    }\n+\n@@ -276,0 +280,1 @@\n+            resetStringPool();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventWriter.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -491,1 +491,1 @@\n-     * @return the current epoch of this insertion attempt\n+     * @return true, if the string was successfully added.\n@@ -493,10 +493,1 @@\n-    public static native boolean addStringConstant(boolean epoch, long id, String s);\n-\n-    \/**\n-     * Gets the address of the jboolean epoch.\n-     *\n-     * The epoch alternates every checkpoint.\n-     *\n-     * @return The address of the jboolean.\n-     *\/\n-    public native long getEpochAddress();\n+    public static native boolean addStringConstant(long id, String s);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import jdk.internal.misc.Unsafe;\n-\n@@ -33,3 +31,0 @@\n-\n-    private static final Unsafe unsafe = Unsafe.getUnsafe();\n-\n@@ -38,1 +33,1 @@\n-    private static final long epochAddress;\n+    private static final long DO_NOT_POOL = -1;\n@@ -40,5 +35,2 @@\n-    static {\n-        epochAddress = JVM.getJVM().getEpochAddress();\n-        sp.reset();\n-    }\n-    public static long addString(String s) {\n+\n+    static long addString(String s) {\n@@ -47,2 +39,3 @@\n-    private static boolean getCurrentEpoch() {\n-        return unsafe.getByte(epochAddress) == 1;\n+\n+    static void reset() {\n+        sp.reset();\n@@ -50,0 +43,1 @@\n+\n@@ -53,2 +47,0 @@\n-        \/* epoch of cached strings *\/\n-        private boolean poolEpoch;\n@@ -63,1 +55,0 @@\n-\n@@ -72,4 +63,1 @@\n-            cache = new ConcurrentHashMap<>(MAX_SIZE, 0.75f);\n-        }\n-        void reset() {\n-            reset(getCurrentEpoch());\n+            this.cache = new ConcurrentHashMap<>(MAX_SIZE, 0.75f);\n@@ -77,1 +65,2 @@\n-        private void reset(boolean epoch) {\n+\n+        private void reset() {\n@@ -79,1 +68,0 @@\n-            this.poolEpoch = epoch;\n@@ -82,0 +70,1 @@\n+\n@@ -83,10 +72,3 @@\n-            boolean currentEpoch = getCurrentEpoch();\n-            if (poolEpoch == currentEpoch) {\n-                \/* pool is for current chunk *\/\n-                Long lsid = this.cache.get(s);\n-                if (lsid != null) {\n-                    return lsid.longValue();\n-                }\n-            } else {\n-                \/* pool is for an old chunk *\/\n-                reset(currentEpoch);\n+            Long lsid = this.cache.get(s);\n+            if (lsid != null) {\n+                return lsid.longValue();\n@@ -96,1 +78,1 @@\n-                return -1;\n+                return DO_NOT_POOL;\n@@ -100,1 +82,1 @@\n-                reset(currentEpoch);\n+                reset();\n@@ -109,1 +91,0 @@\n-            boolean currentEpoch;\n@@ -111,1 +92,1 @@\n-                currentEpoch = JVM.addStringConstant(poolEpoch, sid, s);\n+                JVM.addStringConstant(sid, s);\n@@ -114,2 +95,1 @@\n-            \/* did we write in chunk that this pool represent *\/\n-            return currentEpoch == poolEpoch ? sid : -1;\n+            return sid;\n@@ -117,0 +97,1 @@\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/StringPool.java","additions":20,"deletions":39,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -840,1 +840,0 @@\n-jdk\/jfr\/api\/recording\/event\/TestReEnableName.java               8256482 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}