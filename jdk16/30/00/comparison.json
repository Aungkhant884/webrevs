{"files":[{"patch":"@@ -470,0 +470,4 @@\n+    if (SystemDictionaryShared::has_class_failed_verification(ik)) {\n+      \/\/ don't attempt to resolve indy on classes that has previously failed verification\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/classfile\/classListParser.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -339,0 +339,1 @@\n+ -runtime\/cds\/appcds\/LambdaVerificationFailedDuringDump.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Dumping of lambda proxy classes should not crash VM in case the caller class has failed verification.\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @compile test-classes\/BadInvokeDynamic.jcod\n+ * @run driver LambdaVerificationFailedDuringDump\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class LambdaVerificationFailedDuringDump {\n+\n+    public static void main(String[] args) throws Exception {\n+        JarBuilder.build(\"badinvokedynamic\", \"BadInvokeDynamic\");\n+\n+        String appJar = TestCommon.getTestJar(\"badinvokedynamic.jar\");\n+\n+        OutputAnalyzer out = TestCommon.dump(appJar,\n+        TestCommon.list(\"BadInvokeDynamic\",\n+                        \"@lambda-proxy BadInvokeDynamic run ()Ljava\/lang\/Runnable; ()V REF_invokeStatic BadInvokeDynamic lambda$doTest$0 ()V ()V\"));\n+        out.shouldContain(\"Preload Warning: Verification failed for BadInvokeDynamic\")\n+           .shouldContain(\"Skipping BadInvokeDynamic: Failed verification\")\n+           .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaVerificationFailedDuringDump.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ Should get a verifier error at bytecode 15 for JVM_CONSTANT_NameAndType\n+\n+class BadInvokeDynamic {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  51; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #6 #15; \/\/ #1\n+    Field #16 #17; \/\/ #2\n+    String #18; \/\/ #3\n+    Method #19 #20; \/\/ #4\n+    class #21; \/\/ #5\n+    class #22; \/\/ #6\n+    Utf8 \"hello\"; \/\/ #7\n+    Utf8 \"()V\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"main\"; \/\/ #11\n+    Utf8 \"([Ljava\/lang\/String;)V\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"BadInvokeDynamic.java\"; \/\/ #14\n+    NameAndType #7 #8; \/\/ #15\n+    class #23; \/\/ #16\n+    NameAndType #24 #25; \/\/ #17\n+    Utf8 \"Hello World\"; \/\/ #18\n+    class #26; \/\/ #19\n+    NameAndType #27 #28; \/\/ #20\n+    Utf8 \"BadInvokeDynamic\"; \/\/ #21\n+    Utf8 \"java\/lang\/Object\"; \/\/ #22\n+    Utf8 \"java\/lang\/System\"; \/\/ #23\n+    Utf8 \"out\"; \/\/ #24\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #25\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #26\n+    Utf8 \"println\"; \/\/ #27\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #28\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #5;\/\/ this_cpx\n+  #6;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ fields\n+  } \/\/ fields\n+\n+  [] { \/\/ methods\n+    { \/\/ Member\n+      0x0001; \/\/ access\n+      #7; \/\/ name_cpx\n+      #8; \/\/ sig_cpx\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          };\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ LineNumberTable\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member\n+      0x0009; \/\/ access\n+      #11; \/\/ name_cpx\n+      #12; \/\/ sig_cpx\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0xB200021203B60004;\n+            0x033CBA000F840102;\n+            0x840103840104B1;\n+          };\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ LineNumberTable\n+                0  3;\n+                8  4;\n+                10  5;\n+                13  6;\n+                16  7;\n+                19  8;\n+                22  9;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class BadInvokeDynamic\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/BadInvokeDynamic.jcod","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}