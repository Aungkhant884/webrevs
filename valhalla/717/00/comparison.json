{"files":[{"patch":"@@ -2351,1 +2351,1 @@\n-                                      bool is_permits_value_class,\n+                                      bool is_abstract_type,\n@@ -2393,1 +2393,1 @@\n-    verify_legal_method_modifiers(flags, is_interface, is_inline_type, is_permits_value_class, name, CHECK_NULL);\n+    verify_legal_method_modifiers(flags, is_interface, is_inline_type, is_abstract_type, name, CHECK_NULL);\n@@ -2400,1 +2400,1 @@\n-    } else if (!is_inline_type && signature->is_void_method_signature()) {\n+    } else if ((!is_inline_type || is_abstract_type) && signature->is_void_method_signature()) {\n@@ -3014,1 +3014,1 @@\n-                                    bool is_permits_value_class,\n+                                    bool is_abstract_type,\n@@ -3040,1 +3040,1 @@\n-                                    is_permits_value_class,\n+                                    is_abstract_type,\n@@ -4948,1 +4948,1 @@\n-                                                    bool is_permits_value_class,\n+                                                    bool is_abstract_type,\n@@ -5009,2 +5009,2 @@\n-        if (!is_static && !is_inline_type) {\n-          \/\/ OK, an object constructor in a regular class\n+        if (!is_static && (!is_inline_type || is_abstract_type)) {\n+          \/\/ OK, an object constructor in a regular class or an abstract value class\n@@ -5019,1 +5019,1 @@\n-        if ((is_inline_type || is_permits_value_class) && is_synchronized && !is_static) {\n+        if (is_inline_type && is_synchronized && !is_static) {\n@@ -6316,1 +6316,1 @@\n-                is_permits_value_class(),\n+                is_abstract_type(),\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-                       bool is_permits_value_class,\n+                       bool is_abstract_type,\n@@ -300,1 +300,1 @@\n-                     bool is_permits_value_class,\n+                     bool is_abstract_type,\n@@ -513,1 +513,1 @@\n-                                     bool is_permits_value_class,\n+                                     bool is_abstract_type,\n@@ -602,0 +602,1 @@\n+  bool is_abstract_type() const { return _access_flags.is_abstract(); }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2780,0 +2780,1 @@\n+                    break;\n@@ -2782,0 +2783,1 @@\n+                    break;\n@@ -2784,0 +2786,1 @@\n+                    break;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+import static com.sun.tools.javac.code.Flags.ABSTRACT;\n+import static com.sun.tools.javac.code.Flags.VALUE_CLASS;\n@@ -179,1 +181,1 @@\n-            if (constructingValueObject()) {\n+            if (transformToValueFactory()) {\n@@ -244,1 +246,1 @@\n-        if (constructingValueObject()) {\n+        if (transformToValueFactory()) {\n@@ -256,1 +258,1 @@\n-        if (constructingValueObject()) {\n+        if (transformToValueFactory()) {\n@@ -285,1 +287,1 @@\n-        if (constructingValueObject()) {\n+        if (transformToValueFactory()) {\n@@ -295,1 +297,1 @@\n-        if (constructingValueObject()) {\n+        if (transformToValueFactory()) {\n@@ -311,1 +313,1 @@\n-        if (constructingValueObject()) { \/\/ Qualified this would have been lowered already.\n+        if (transformToValueFactory()) { \/\/ Qualified this would have been lowered already.\n@@ -369,2 +371,4 @@\n-    private boolean constructingValueObject() {\n-        return currentClass != null && (currentClass.sym.flags() & Flags.VALUE_CLASS) != 0 && currentMethod != null && currentMethod.sym.isConstructor();\n+    private boolean transformToValueFactory() {\n+        \/\/ We lower any constructors in abstract value classes to <init> methods while a\n+        \/\/ constructor in a concrete value class is lowered into a static value factory method\n+        return currentClass != null && (currentClass.sym.flags() & (ABSTRACT | VALUE_CLASS)) == VALUE_CLASS && currentMethod != null && currentMethod.sym.isConstructor();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransValues.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,1 @@\n-#include \"fdlibm.h\"\n-int signgam = 0;\n+public abstract value class AbstractValueSuper {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/AbstractValueSuper.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"src\/java.base\/share\/native\/libfdlibm\/s_signgam.c","status":"copied"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8288644\n+ * @summary [lw4] Unable to extend a separately compiled abstract value class\n+ * @compile AbstractValueSuper.java ConcreteValue.java\n+ * @compile ConcreteValue.java\n+ * @run main ConcreteValue\n+ *\/\n+\n+public value class ConcreteValue extends AbstractValueSuper {\n+    public static void main(String [] args) {\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConcreteValue.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}