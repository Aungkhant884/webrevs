{"files":[{"patch":"@@ -110,1 +110,1 @@\n-            \/\/ filter static fields and synthetic fields\n+            \/\/ filter static fields\n@@ -112,1 +112,1 @@\n-                .filter(f -> !Modifier.isStatic(f.getModifiers()) && !f.isSynthetic())\n+                .filter(f -> !Modifier.isStatic(f.getModifiers()))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ValueBootstrapMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run main Nest\n+ * @summary Test substitutability of inner class and anonymous class that\n+ * has the enclosing instance and possibly other captured outer locals\n+ *\/\n+\n+public interface Nest {\n+    public static void main(String... args) {\n+        assertEquals(Nest.of(1, null), Nest.of(1, null));\n+        assertNotEquals(Nest.of(1, null), Nest.of(2, null));\n+\n+        Outer n = new Outer(1);\n+        Outer.Inner inner = n.new Inner(10);\n+        Outer n1 = new Outer(1);\n+        Outer n2 = new Outer(2);\n+        assertEquals(n1.new Inner(10), inner);\n+        assertEquals(n2.new Inner(10), new Outer(2).new Inner(10));\n+    }\n+\n+    \/\/ o1.new Inner(1) == o2.new Inner(1) iff o1 == o2\n+    static primitive class Outer {\n+        final int i;\n+        Outer(int i) {\n+            this.i = i;\n+        }\n+\n+        primitive class Inner {\n+            final int ic;\n+            Inner(int ic) {\n+                this.ic = ic;\n+            }\n+        }\n+    }\n+\n+    String toString();\n+\n+    static Nest of(int value, Object next) {\n+        \/\/ anonymous class capturing outer locals\n+        return new primitive Nest() {\n+            public String toString() {\n+                return value + \" -> \" + next;\n+            }\n+        };\n+    }\n+\n+    static void assertEquals(Object o1, Object o2) {\n+        if (o1 != o2) {\n+            throw new RuntimeException(o1 + \" != \" + o2);\n+        }\n+    }\n+    static void assertNotEquals(Object o1, Object o2) {\n+        if (o1 == o2) {\n+            throw new RuntimeException(o1 + \" == \" + o2);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/Nest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -181,1 +181,1 @@\n-        \/\/ filter static fields and synthetic fields\n+        \/\/ filter static fields\n@@ -183,1 +183,1 @@\n-            .filter(f -> !Modifier.isStatic(f.getModifiers()) && !f.isSynthetic())\n+            .filter(f -> !Modifier.isStatic(f.getModifiers()))\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}