{"files":[{"patch":"@@ -4393,1 +4393,1 @@\n-        else if (isSubtypeNoCapture(t, s))\n+        else if (isBoundedBy(t, s, (t1, s1, w) -> isSubtypeNoCapture(t1, s1)))\n@@ -4395,1 +4395,1 @@\n-        else if (isSubtypeNoCapture(s, t))\n+        else if (isBoundedBy(s, t, (s1, t1, w) -> isSubtypeNoCapture(s1, t1)))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -221,1 +221,3 @@\n-            if (!allowBoxing && inferenceContext.asUndetVars(inferenceContext.boundedVars())\n+            if (!allowBoxing &&\n+                    resultInfo == null &&\n+                    inferenceContext.asUndetVars(inferenceContext.boundedVars())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -489,2 +489,1 @@\n-        \/\/ primitive classes don't have subtypes\n-        assertFail(\"compiler.err.not.within.bounds\",\n+        assertOK(\n@@ -504,0 +503,29 @@\n+\n+    public void testInferenceAndTypeSystem() {\n+        assertOK(\n+                \"\"\"\n+                primitive class MyValue {\n+                    MyValue m(U u) {\n+                        return u.getValue(MyValue.class.asValueType());\n+                    }\n+                }\n+\n+                class U {\n+                    <V> V getValue(Class<?> pc) { return null; }\n+                }\n+                \"\"\"\n+        );\n+        assertOK(\n+                \"\"\"\n+                primitive class MyValue {\n+                    void m(U u) {\n+                        MyValue vt = u.makePrivateBuffer(this);\n+                    }\n+                }\n+\n+                class U {\n+                    <V> V makePrivateBuffer(V value) { return null; }\n+                }\n+                \"\"\"\n+        );\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":30,"deletions":2,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+                primitive class Circle extends A implements I {}\n@@ -82,1 +83,1 @@\n-                \"Point\", \"Point.ref\", \"A\", \"I\");\n+                \"Point\", \"Point.ref\", \"Circle\", \"Circle.ref\", \"A\", \"I\");\n@@ -86,0 +87,1 @@\n+        Assert.check(types.lub(typeMap.get(\"Circle\"), typeMap.get(\"I\")).tsym == typeMap.get(\"I\").tsym);\n@@ -87,2 +89,5 @@\n-        \/\/ this is currently failing we need to update the implementation of Types::glb\n-        \/\/Assert.check(types.glb(primitiveType, primitiveRefType).tsym == primitiveType.tsym);\n+        Assert.check(types.glb(typeMap.get(\"Point\"), typeMap.get(\"Point.ref\")).tsym == typeMap.get(\"Point\").tsym);\n+        Assert.check(types.glb(typeMap.get(\"Point\"), typeMap.get(\"I\")).tsym == typeMap.get(\"Point\").tsym);\n+        Assert.check(types.glb(typeMap.get(\"Point.ref\"), typeMap.get(\"I\")).tsym == typeMap.get(\"Point.ref\").tsym);\n+        Assert.check(types.glb(typeMap.get(\"Circle\"), typeMap.get(\"I\")).tsym == typeMap.get(\"Circle\").tsym);\n+        Assert.check(types.glb(typeMap.get(\"Circle.ref\"), typeMap.get(\"I\")).tsym == typeMap.get(\"Circle.ref\").tsym);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTvarsTypeSystemTest.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}