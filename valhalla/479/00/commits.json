[{"commit":{"message":"8264340: [lworld] [AArch64] TestLWorld.java assertion failure in OopFlow::build_oop_map\n\nThis happens reliably in TestLWorld::test9() scenario 0 on AArch64:\n\n  # A fatal error has been detected by the Java Runtime Environment:\n  #\n  # Internal Error (\/mnt\/nicgas01-pc\/valhalla\/src\/hotspot\/share\/opto\/buildOopMap.cpp:360), pid=8866, tid=8882\n  # assert(false) failed: there should be a oop in OopMap instead of a live raw oop at safepoint\n  #\n\nThe crash can also be reproduced on x86 by running with\n-XX:+OptoScheduling (this is the default on AArch64).\n\nThe problem seems to be caused by a CheckCastPP node whose input is a\nraw pointer being scheduled after a SafePoint node such that the raw\npointer is live in a register over the safepoint.\n\nBefore scheduling we have a basic block like:\n\n  R0      73  Phi  ===  15  74  30  [[ 72  71  70  69  68  67  84 ]]  #rawptr:BotPTR !jvms: SchedCrash$MyValue1::setX @ bci:-1 (line 27) SchedCrash::test9 @ bci:25 (line 39)\n  ...\n  R0      84  checkCastPP  ===  11  73  [[ 2 ]] SchedCrash$MyValue1:NotNull:exact *  Oop:SchedCrash$MyValue1:NotNull:exact * !jvms: SchedCrash$MyValue1::<init> @ bci:65 (line 24) SchedCrash$MyValue1::setX @ bci:21 (line 27) SchedCrash::test9 @ bci:25 (line 39)\n  ...\n          6  safePoint  ===  9  0  33  0  0  7  0  78  40  0  140  135  136  139  138  141  [[ 8  4 ]]  !jvms: SchedCrash::test9 @ bci:33 (line 37)\n\nBut after scheduling this is transformed into:\n\n  R0      73  Phi  ===  15  74  30  [[ 72  71  70  69  68  67  84 ]]  #rawptr:BotPTR !jvms: SchedCrash$MyValue1::setX @ bci:-1 (line 27) SchedCrash::test9 @ bci:25 (line 39)\n  ...\n          6  safePoint  ===  9  0  33  0  0  7  0  78  40  0  140  135  136  139  138  141  | 164  [[ 8  4 ]]  !jvms: SchedCrash::test9 @ bci:33 (line 37)\n  ...\n  R0      84  checkCastPP  ===  11  73  | 67  68  69  70  71  72  [[ 2 ]] SchedCrash$MyValue1:NotNull:exact *  Oop:SchedCrash$MyValue1:NotNull:exact * !jvms: SchedCrash$MyValue1::<init> @ bci:65 (line 24) SchedCrash$MyValue1::setX @ bci:21 (line 27) SchedCrash::test9 @ bci:25 (line 39)\n\nWhere R0 is holding the live raw pointer over the safepoint, which\ntriggers the assertion failure.\n\nThe fix here is to add a precedence edge from any CheckCastPP with a raw\npointer input to the following safepoint, which prevents them being\nrearranged. I'm not very familiar with this code so I can't be sure this\nis the correct solution, but the same logic exists in GCM's\nPhaseCFG::schedule_late()."},"files":[{"filename":"src\/hotspot\/share\/opto\/output.cpp"}],"sha":"08df09649ee6d476c994bc4a8d2c39d5a1e3814e"}]