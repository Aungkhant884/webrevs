{"files":[{"patch":"@@ -51,1 +51,1 @@\n-    case T_INLINE_TYPE : i = 10; break;\n+    case T_PRIMITIVE_OBJECT : i = 10; break;\n","filename":"src\/hotspot\/cpu\/aarch64\/abstractInterpreter_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -588,1 +588,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -635,1 +635,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n@@ -702,1 +702,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n@@ -745,1 +745,1 @@\n-    if (src->type() == T_OBJECT || src->type() == T_INLINE_TYPE) {\n+    if (src->type() == T_OBJECT || src->type() == T_PRIMITIVE_OBJECT) {\n@@ -845,1 +845,1 @@\n-    case T_INLINE_TYPE: \/\/ fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ fall through\n@@ -975,1 +975,1 @@\n-  if (addr->base()->type() == T_OBJECT || addr->base()->type() == T_INLINE_TYPE) {\n+  if (addr->base()->type() == T_OBJECT || addr->base()->type() == T_PRIMITIVE_OBJECT) {\n@@ -999,1 +999,1 @@\n-    case T_INLINE_TYPE: \/\/ fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ fall through\n@@ -1264,1 +1264,1 @@\n-  if (UseSlowPath || op->type() == T_INLINE_TYPE ||\n+  if (UseSlowPath || op->type() == T_PRIMITIVE_OBJECT ||\n@@ -2144,1 +2144,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n@@ -2311,1 +2311,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -2348,1 +2348,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -3381,1 +3381,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1212,1 +1212,1 @@\n-    __ allocate_array(reg, len, tmp1, tmp2, tmp3, tmp4, T_INLINE_TYPE, klass_reg, slow_path);\n+    __ allocate_array(reg, len, tmp1, tmp2, tmp3, tmp4, T_PRIMITIVE_OBJECT, klass_reg, slow_path);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -653,1 +653,1 @@\n-    case T_INLINE_TYPE :\n+    case T_PRIMITIVE_OBJECT :\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  assert(type != T_INLINE_TYPE, \"Not supported yet\");\n+  assert(type != T_PRIMITIVE_OBJECT, \"Not supported yet\");\n@@ -91,1 +91,1 @@\n-  assert(type != T_INLINE_TYPE, \"Not supported yet\");\n+  assert(type != T_PRIMITIVE_OBJECT, \"Not supported yet\");\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -782,1 +782,1 @@\n-    cmpw(rscratch1, (u1) T_INLINE_TYPE);\n+    cmpw(rscratch1, (u1) T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4293,1 +4293,1 @@\n-  add(data, data, arrayOopDesc::base_offset_in_bytes(T_INLINE_TYPE));\n+  add(data, data, arrayOopDesc::base_offset_in_bytes(T_PRIMITIVE_OBJECT));\n@@ -5849,1 +5849,1 @@\n-  assert(sig->at(sig_index)._bt == T_INLINE_TYPE, \"should be at end delimiter\");\n+  assert(sig->at(sig_index)._bt == T_PRIMITIVE_OBJECT, \"should be at end delimiter\");\n@@ -5878,1 +5878,1 @@\n-  int index = arrayOopDesc::base_offset_in_bytes(T_OBJECT) + vtarg_index * type2aelembytes(T_INLINE_TYPE);\n+  int index = arrayOopDesc::base_offset_in_bytes(T_OBJECT) + vtarg_index * type2aelembytes(T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -361,1 +361,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -441,1 +441,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -517,1 +517,1 @@\n-       if (bt == T_INLINE_TYPE) {\n+       if (bt == T_PRIMITIVE_OBJECT) {\n@@ -519,1 +519,1 @@\n-         \/\/ T_INLINE_TYPE, followed by the types of the fields of the\n+         \/\/ T_PRIMITIVE_OBJECT, followed by the types of the fields of the\n@@ -524,3 +524,3 @@\n-         \/\/ T_INLINE_TYPE T_INT T_INLINE_TYPE T_INT T_LONG T_VOID (second\n-         \/\/ slot for the T_LONG) T_VOID (inner T_INLINE_TYPE) T_VOID\n-         \/\/ (outer T_INLINE_TYPE)\n+         \/\/ T_PRIMITIVE_OBJECT T_INT T_PRIMITIVE_OBJECT T_INT T_LONG T_VOID (second\n+         \/\/ slot for the T_LONG) T_VOID (inner T_PRIMITIVE_OBJECT) T_VOID\n+         \/\/ (outer T_PRIMITIVE_OBJECT)\n@@ -533,1 +533,1 @@\n-           if (bt == T_INLINE_TYPE) {\n+           if (bt == T_PRIMITIVE_OBJECT) {\n@@ -564,1 +564,1 @@\n-  assert(bt != T_INLINE_TYPE || !InlineTypePassFieldsAsArgs, \"no inline type here\");\n+  assert(bt != T_PRIMITIVE_OBJECT || !InlineTypePassFieldsAsArgs, \"no inline type here\");\n@@ -650,1 +650,1 @@\n-      has_inline_argument = (sig_extended->at(i)._bt == T_INLINE_TYPE);\n+      has_inline_argument = (sig_extended->at(i)._bt == T_PRIMITIVE_OBJECT);\n@@ -712,1 +712,1 @@\n-  \/\/ sig_extended, an inline type argument starts with: T_INLINE_TYPE,\n+  \/\/ sig_extended, an inline type argument starts with: T_PRIMITIVE_OBJECT,\n@@ -715,1 +715,1 @@\n-  \/\/ T_INLINE_TYPE\/T_VOID. next_vt_arg is the next inline type argument:\n+  \/\/ T_PRIMITIVE_OBJECT\/T_VOID. next_vt_arg is the next inline type argument:\n@@ -726,1 +726,1 @@\n-    if (!InlineTypePassFieldsAsArgs || bt != T_INLINE_TYPE) {\n+    if (!InlineTypePassFieldsAsArgs || bt != T_PRIMITIVE_OBJECT) {\n@@ -744,1 +744,1 @@\n-      int index = arrayOopDesc::base_offset_in_bytes(T_OBJECT) + next_vt_arg * type2aelembytes(T_INLINE_TYPE);\n+      int index = arrayOopDesc::base_offset_in_bytes(T_OBJECT) + next_vt_arg * type2aelembytes(T_PRIMITIVE_OBJECT);\n@@ -758,1 +758,1 @@\n-        if (bt == T_INLINE_TYPE) {\n+        if (bt == T_PRIMITIVE_OBJECT) {\n@@ -874,1 +874,1 @@\n-    assert(bt != T_INLINE_TYPE, \"i2c adapter doesn't unpack inline typ args\");\n+    assert(bt != T_PRIMITIVE_OBJECT, \"i2c adapter doesn't unpack inline typ args\");\n@@ -1129,1 +1129,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n@@ -1804,1 +1804,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n@@ -1989,1 +1989,1 @@\n-  case T_INLINE_TYPE:           \/\/ Really a handle\n+  case T_PRIMITIVE_OBJECT:           \/\/ Really a handle\n@@ -3249,1 +3249,1 @@\n-    if (bt == T_INLINE_TYPE) {\n+    if (bt == T_PRIMITIVE_OBJECT) {\n@@ -3296,1 +3296,1 @@\n-    if (bt == T_INLINE_TYPE) {\n+    if (bt == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-    \/\/ T_OBJECT, T_INLINE_TYPE, T_LONG, T_FLOAT or T_DOUBLE is treated as T_INT)\n+    \/\/ T_OBJECT, T_PRIMITIVE_OBJECT, T_LONG, T_FLOAT or T_DOUBLE is treated as T_INT)\n@@ -325,1 +325,1 @@\n-    __ cmp(Rresult_type, (u1)T_INLINE_TYPE);\n+    __ cmp(Rresult_type, (u1)T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -565,1 +565,1 @@\n-  case T_INLINE_TYPE: \/\/ fall through (value types are handled with oops)\n+  case T_PRIMITIVE_OBJECT: \/\/ fall through (value types are handled with oops)\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-    case T_INLINE_TYPE : i = 8; break;\n+    case T_PRIMITIVE_OBJECT : i = 8; break;\n@@ -157,1 +157,1 @@\n-    case T_INLINE_TYPE : i = 10; break;\n+    case T_PRIMITIVE_OBJECT : i = 10; break;\n","filename":"src\/hotspot\/cpu\/x86\/abstractInterpreter_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-    if (const_opr->type() == T_OBJECT || const_opr->type() == T_INLINE_TYPE) {\n+    if (const_opr->type() == T_OBJECT || const_opr->type() == T_PRIMITIVE_OBJECT) {\n@@ -639,1 +639,1 @@\n-    case T_INLINE_TYPE: \/\/ Fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ Fall through\n@@ -730,1 +730,1 @@\n-    case T_INLINE_TYPE: \/\/ Fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ Fall through\n@@ -770,1 +770,1 @@\n-    case T_INLINE_TYPE: \/\/ fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ fall through\n@@ -859,1 +859,1 @@\n-    if (src->type() == T_OBJECT || src->type() == T_INLINE_TYPE) {\n+    if (src->type() == T_OBJECT || src->type() == T_PRIMITIVE_OBJECT) {\n@@ -1045,1 +1045,1 @@\n-    case T_INLINE_TYPE: \/\/ fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ fall through\n@@ -1218,1 +1218,1 @@\n-  if (addr->base()->type() == T_OBJECT || addr->base()->type() == T_INLINE_TYPE) {\n+  if (addr->base()->type() == T_OBJECT || addr->base()->type() == T_PRIMITIVE_OBJECT) {\n@@ -1279,1 +1279,1 @@\n-    case T_INLINE_TYPE: \/\/ fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ fall through\n@@ -1656,1 +1656,1 @@\n-  if (UseSlowPath || op->type() == T_INLINE_TYPE ||\n+  if (UseSlowPath || op->type() == T_PRIMITIVE_OBJECT ||\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1396,1 +1396,1 @@\n-    __ allocate_array(reg, len, tmp1, tmp2, tmp3, tmp4, T_INLINE_TYPE, klass_reg, slow_path);\n+    __ allocate_array(reg, len, tmp1, tmp2, tmp3, tmp4, T_PRIMITIVE_OBJECT, klass_reg, slow_path);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -661,1 +661,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  assert(type != T_INLINE_TYPE, \"Not supported yet\");\n+  assert(type != T_PRIMITIVE_OBJECT, \"Not supported yet\");\n@@ -115,1 +115,1 @@\n-  assert(type != T_INLINE_TYPE, \"Not supported yet\");\n+  assert(type != T_PRIMITIVE_OBJECT, \"Not supported yet\");\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-  assert(type != T_INLINE_TYPE, \"Not supported yet\");\n+  assert(type != T_PRIMITIVE_OBJECT, \"Not supported yet\");\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1184,1 +1184,1 @@\n-    cmpl(rdi, T_INLINE_TYPE);\n+    cmpl(rdi, T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4996,1 +4996,1 @@\n-  lea(data, Address(array, index, Address::times_1, arrayOopDesc::base_offset_in_bytes(T_INLINE_TYPE)));\n+  lea(data, Address(array, index, Address::times_1, arrayOopDesc::base_offset_in_bytes(T_PRIMITIVE_OBJECT)));\n@@ -5740,1 +5740,1 @@\n-  assert(sig->at(sig_index)._bt == T_INLINE_TYPE, \"should be at end delimiter\");\n+  assert(sig->at(sig_index)._bt == T_PRIMITIVE_OBJECT, \"should be at end delimiter\");\n@@ -5765,1 +5765,1 @@\n-  int index = arrayOopDesc::base_offset_in_bytes(T_OBJECT) + vtarg_index * type2aelembytes(T_INLINE_TYPE);\n+  int index = arrayOopDesc::base_offset_in_bytes(T_OBJECT) + vtarg_index * type2aelembytes(T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -485,1 +485,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -1041,1 +1041,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -1625,1 +1625,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n@@ -1797,1 +1797,1 @@\n-  case T_INLINE_TYPE:           \/\/ Really a handle\n+  case T_PRIMITIVE_OBJECT:           \/\/ Really a handle\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -611,1 +611,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -699,1 +699,1 @@\n-      if (bt == T_INLINE_TYPE) {\n+      if (bt == T_PRIMITIVE_OBJECT) {\n@@ -701,1 +701,1 @@\n-        \/\/ T_INLINE_TYPE, followed by the types of the fields of the\n+        \/\/ T_PRIMITIVE_OBJECT, followed by the types of the fields of the\n@@ -706,3 +706,3 @@\n-        \/\/ T_INLINE_TYPE T_INT T_INLINE_TYPE T_INT T_LONG T_VOID (second\n-        \/\/ slot for the T_LONG) T_VOID (inner T_INLINE_TYPE) T_VOID\n-        \/\/ (outer T_INLINE_TYPE)\n+        \/\/ T_PRIMITIVE_OBJECT T_INT T_PRIMITIVE_OBJECT T_INT T_LONG T_VOID (second\n+        \/\/ slot for the T_LONG) T_VOID (inner T_PRIMITIVE_OBJECT) T_VOID\n+        \/\/ (outer T_PRIMITIVE_OBJECT)\n@@ -715,1 +715,1 @@\n-          if (bt == T_INLINE_TYPE) {\n+          if (bt == T_PRIMITIVE_OBJECT) {\n@@ -742,1 +742,1 @@\n-  assert(bt != T_INLINE_TYPE || !InlineTypePassFieldsAsArgs, \"no inline type here\");\n+  assert(bt != T_PRIMITIVE_OBJECT || !InlineTypePassFieldsAsArgs, \"no inline type here\");\n@@ -819,1 +819,1 @@\n-      has_inline_argument = (sig_extended->at(i)._bt == T_INLINE_TYPE);\n+      has_inline_argument = (sig_extended->at(i)._bt == T_PRIMITIVE_OBJECT);\n@@ -882,1 +882,1 @@\n-  \/\/ sig_extended, an inline type argument starts with: T_INLINE_TYPE,\n+  \/\/ sig_extended, an inline type argument starts with: T_PRIMITIVE_OBJECT,\n@@ -885,1 +885,1 @@\n-  \/\/ T_INLINE_TYPE\/T_VOID. next_vt_arg is the next inline type argument:\n+  \/\/ T_PRIMITIVE_OBJECT\/T_VOID. next_vt_arg is the next inline type argument:\n@@ -896,1 +896,1 @@\n-    if (!InlineTypePassFieldsAsArgs || bt != T_INLINE_TYPE) {\n+    if (!InlineTypePassFieldsAsArgs || bt != T_PRIMITIVE_OBJECT) {\n@@ -914,1 +914,1 @@\n-      int index = arrayOopDesc::base_offset_in_bytes(T_OBJECT) + next_vt_arg * type2aelembytes(T_INLINE_TYPE);\n+      int index = arrayOopDesc::base_offset_in_bytes(T_OBJECT) + next_vt_arg * type2aelembytes(T_PRIMITIVE_OBJECT);\n@@ -928,1 +928,1 @@\n-        if (bt == T_INLINE_TYPE) {\n+        if (bt == T_PRIMITIVE_OBJECT) {\n@@ -1082,1 +1082,1 @@\n-    assert(bt != T_INLINE_TYPE, \"i2c adapter doesn't unpack inline type args\");\n+    assert(bt != T_PRIMITIVE_OBJECT, \"i2c adapter doesn't unpack inline type args\");\n@@ -1354,1 +1354,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n@@ -2062,1 +2062,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n@@ -2250,1 +2250,1 @@\n-  case T_INLINE_TYPE:           \/\/ Really a handle\n+  case T_PRIMITIVE_OBJECT:           \/\/ Really a handle\n@@ -4022,1 +4022,1 @@\n-    if (bt == T_INLINE_TYPE) {\n+    if (bt == T_PRIMITIVE_OBJECT) {\n@@ -4062,1 +4062,1 @@\n-    if (bt == T_INLINE_TYPE) {\n+    if (bt == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -345,1 +345,1 @@\n-    \/\/ T_OBJECT, T_INLINE_TYPE, T_LONG, T_FLOAT or T_DOUBLE is treated as T_INT)\n+    \/\/ T_OBJECT, T_PRIMITIVE_OBJECT, T_LONG, T_FLOAT or T_DOUBLE is treated as T_INT)\n@@ -351,1 +351,1 @@\n-    __ cmpl(rbx, T_INLINE_TYPE);\n+    __ cmpl(rbx, T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-  case T_INLINE_TYPE: \/\/ fall through (inline types are handled with oops)\n+  case T_PRIMITIVE_OBJECT: \/\/ fall through (inline types are handled with oops)\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    if (t == T_ARRAY || t == T_INLINE_TYPE) {\n+    if (t == T_ARRAY || t == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -157,1 +157,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n@@ -489,1 +489,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n@@ -681,1 +681,1 @@\n-      case T_INLINE_TYPE: \/\/ fall through\n+      case T_PRIMITIVE_OBJECT: \/\/ fall through\n@@ -787,1 +787,1 @@\n-      case T_INLINE_TYPE: \/\/ fall through\n+      case T_PRIMITIVE_OBJECT: \/\/ fall through\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3144,1 +3144,1 @@\n-    assert(addr->type() != T_INLINE_TYPE, \"not supported yet\");\n+    assert(addr->type() != T_PRIMITIVE_OBJECT, \"not supported yet\");\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-    case T_INLINE_TYPE: return objectType;\n+    case T_PRIMITIVE_OBJECT: return objectType;\n@@ -152,1 +152,1 @@\n-    case T_INLINE_TYPE: \/\/ fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ fall through\n","filename":"src\/hotspot\/share\/c1\/c1_ValueType.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -536,1 +536,1 @@\n-       sym->char_at(1) == JVM_SIGNATURE_INLINE_TYPE )) {\n+       sym->char_at(1) == JVM_SIGNATURE_PRIMITIVE_OBJECT )) {\n@@ -549,1 +549,1 @@\n-      bool null_free_array = sym->is_Q_array_signature() && sym->char_at(1) == JVM_SIGNATURE_INLINE_TYPE;\n+      bool null_free_array = sym->is_Q_array_signature() && sym->char_at(1) == JVM_SIGNATURE_PRIMITIVE_OBJECT;\n@@ -580,1 +580,1 @@\n-  if (i > 0 && sym->char_at(i) == JVM_SIGNATURE_INLINE_TYPE) {\n+  if (i > 0 && sym->char_at(i) == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    ciInstanceKlass(name, loader, protection_domain, T_INLINE_TYPE) {}\n+    ciInstanceKlass(name, loader, protection_domain, T_PRIMITIVE_OBJECT) {}\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    case T_INLINE_TYPE:  \/\/ fall through\n+    case T_PRIMITIVE_OBJECT:  \/\/ fall through\n","filename":"src\/hotspot\/share\/ci\/ciInstance.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -816,1 +816,1 @@\n-    case T_INLINE_TYPE: {\n+    case T_PRIMITIVE_OBJECT: {\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1448,1 +1448,1 @@\n-  if (bt == T_INLINE_TYPE)   return T_OBJECT;\n+  if (bt == T_PRIMITIVE_OBJECT)   return T_OBJECT;\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  _null_free = k->name()->is_Q_array_signature() && k->name()->char_at(1) == JVM_SIGNATURE_INLINE_TYPE;\n+  _null_free = k->name()->is_Q_array_signature() && k->name()->char_at(1) == JVM_SIGNATURE_PRIMITIVE_OBJECT;\n@@ -78,1 +78,1 @@\n-  _null_free = array_name->is_Q_array_signature() && array_name->char_at(1) == JVM_SIGNATURE_INLINE_TYPE;\n+  _null_free = array_name->is_Q_array_signature() && array_name->char_at(1) == JVM_SIGNATURE_PRIMITIVE_OBJECT;\n@@ -123,1 +123,1 @@\n-  assert(base_name_sym->char_at(0) != JVM_SIGNATURE_INLINE_TYPE, \"unloaded array klass element should not have Q-type\");\n+  assert(base_name_sym->char_at(0) != JVM_SIGNATURE_PRIMITIVE_OBJECT, \"unloaded array klass element should not have Q-type\");\n","filename":"src\/hotspot\/share\/ci\/ciObjArrayKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-    if (element_type == T_OBJECT || element_type == T_INLINE_TYPE) {\n+    if (element_type == T_OBJECT || element_type == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1039,1 +1039,1 @@\n-      const char* string_value = bt != T_INLINE_TYPE ? _replay->parse_escaped_string() : NULL;\n+      const char* string_value = bt != T_PRIMITIVE_OBJECT ? _replay->parse_escaped_string() : NULL;\n@@ -1092,1 +1092,1 @@\n-      case T_INLINE_TYPE: {\n+      case T_PRIMITIVE_OBJECT: {\n@@ -1153,1 +1153,1 @@\n-                   field_signature[1] == JVM_SIGNATURE_INLINE_TYPE) {\n+                   field_signature[1] == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n@@ -1241,1 +1241,1 @@\n-    } else if (field_signature[0] == JVM_SIGNATURE_INLINE_TYPE) {\n+    } else if (field_signature[0] == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  _basic_type = k->is_array_klass() ? T_ARRAY : (k->is_inline_klass() ? T_INLINE_TYPE : T_OBJECT);\n+  _basic_type = k->is_array_klass() ? T_ARRAY : (k->is_inline_klass() ? T_PRIMITIVE_OBJECT : T_OBJECT);\n","filename":"src\/hotspot\/share\/ci\/ciType.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -259,1 +259,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1460,1 +1460,1 @@\n-  NONSTATIC_OOP,       \/\/ T_INLINE_TYPE = 14,\n+  NONSTATIC_OOP,       \/\/ T_PRIMITIVE_OBJECT = 14,\n@@ -1481,1 +1481,1 @@\n-  STATIC_OOP,          \/\/ T_INLINE_TYPE = 14,\n+  STATIC_OOP,          \/\/ T_PRIMITIVE_OBJECT = 14,\n@@ -1666,1 +1666,1 @@\n-    fac->update(is_static, type, type == T_INLINE_TYPE);\n+    fac->update(is_static, type, type == T_PRIMITIVE_OBJECT);\n@@ -5188,1 +5188,1 @@\n-    case JVM_SIGNATURE_INLINE_TYPE:\n+    case JVM_SIGNATURE_PRIMITIVE_OBJECT:\n@@ -6550,1 +6550,1 @@\n-      if (Signature::basic_type(fs.signature()) == T_INLINE_TYPE && !fs.access_flags().is_static()) {\n+      if (Signature::basic_type(fs.signature()) == T_PRIMITIVE_OBJECT && !fs.access_flags().is_static()) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-    if (*start == JVM_SIGNATURE_CLASS || *start == JVM_SIGNATURE_INLINE_TYPE) {\n+    if (*start == JVM_SIGNATURE_CLASS || *start == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-      if (type == T_INLINE_TYPE) {\n+      if (type == T_PRIMITIVE_OBJECT) {\n@@ -634,1 +634,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -732,1 +732,1 @@\n-    case T_INLINE_TYPE: {\n+    case T_PRIMITIVE_OBJECT: {\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1156,1 +1156,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    case PlaceholderTable::INLINE_TYPE_FIELD:\n+    case PlaceholderTable::PRIMITIVE_OBJECT_FIELD:\n@@ -105,1 +105,1 @@\n-    case PlaceholderTable::INLINE_TYPE_FIELD:\n+    case PlaceholderTable::PRIMITIVE_OBJECT_FIELD:\n@@ -276,1 +276,1 @@\n-  case PlaceholderTable::INLINE_TYPE_FIELD: return \"INLINE_TYPE_FIELD\";\n+  case PlaceholderTable::PRIMITIVE_OBJECT_FIELD: return \"PRIMITIVE_OBJECT_FIELD\";\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-\/\/ INLINE_TYPE_FIELD: needed to check for inline type fields circularity\n+\/\/ PRIMITIVE_OBJECT_FIELD: needed to check for inline type fields circularity\n@@ -81,1 +81,1 @@\n-    INLINE_TYPE_FIELD = 4          \/\/ inline type fields\n+    PRIMITIVE_OBJECT_FIELD = 4     \/\/ primitive object fields\n","filename":"src\/hotspot\/share\/classfile\/placeholders.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -115,1 +115,1 @@\n-      if (ss.type() == T_INLINE_TYPE) {\n+      if (ss.type() == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -473,1 +473,1 @@\n-      oldprobe->check_seen_thread(THREAD, PlaceholderTable::INLINE_TYPE_FIELD)) {\n+      oldprobe->check_seen_thread(THREAD, PlaceholderTable::PRIMITIVE_OBJECT_FIELD)) {\n@@ -478,1 +478,1 @@\n-                                   PlaceholderTable::INLINE_TYPE_FIELD, NULL, THREAD);\n+                                   PlaceholderTable::PRIMITIVE_OBJECT_FIELD, NULL, THREAD);\n@@ -494,1 +494,1 @@\n-                                    PlaceholderTable::INLINE_TYPE_FIELD, THREAD);\n+                                    PlaceholderTable::PRIMITIVE_OBJECT_FIELD, THREAD);\n@@ -858,1 +858,1 @@\n-    if (t != T_OBJECT && t != T_INLINE_TYPE) {\n+    if (t != T_OBJECT && t != T_PRIMITIVE_OBJECT) {\n@@ -1213,1 +1213,1 @@\n-      if (Signature::basic_type(fs.signature()) == T_INLINE_TYPE) {\n+      if (Signature::basic_type(fs.signature()) == T_PRIMITIVE_OBJECT) {\n@@ -1851,1 +1851,1 @@\n-    if (t != T_OBJECT && t != T_INLINE_TYPE) {\n+    if (t != T_OBJECT && t != T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-    case T_INLINE_TYPE: {\n+    case T_PRIMITIVE_OBJECT: {\n@@ -227,1 +227,1 @@\n-      return (ss.type() == T_INLINE_TYPE) ?\n+      return (ss.type() == T_PRIMITIVE_OBJECT) ?\n","filename":"src\/hotspot\/share\/classfile\/verificationType.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-  bool is_inline_type_array() const { return is_x_array(JVM_SIGNATURE_INLINE_TYPE); }\n+  bool is_inline_type_array() const { return is_x_array(JVM_SIGNATURE_PRIMITIVE_OBJECT); }\n","filename":"src\/hotspot\/share\/classfile\/verificationType.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3110,1 +3110,1 @@\n-    char Q_or_L = component_type.is_inline_type() ? JVM_SIGNATURE_INLINE_TYPE : JVM_SIGNATURE_CLASS;\n+    char Q_or_L = component_type.is_inline_type() ? JVM_SIGNATURE_PRIMITIVE_OBJECT : JVM_SIGNATURE_CLASS;\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/classfile\/verifier.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-  assert(bt == T_OBJECT || bt == T_INLINE_TYPE, \"or we shouldn't be here\");\n+  assert(bt == T_OBJECT || bt == T_PRIMITIVE_OBJECT, \"or we shouldn't be here\");\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1462,1 +1462,1 @@\n-    sig_type = JVM_SIGNATURE_INLINE_TYPE;\n+    sig_type = JVM_SIGNATURE_PRIMITIVE_OBJECT;\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  T_INLINE_TYPE\n+  T_PRIMITIVE_OBJECT\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-      (type == T_INLINE_TYPE) ? _jca->push_oop(next_arg(T_INLINE_TYPE)) : _jca->push_oop(next_arg(T_OBJECT));\n+      (type == T_PRIMITIVE_OBJECT) ? _jca->push_oop(next_arg(T_PRIMITIVE_OBJECT)) : _jca->push_oop(next_arg(T_OBJECT));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -562,1 +562,1 @@\n-  const bool is_inline_type() { return Signature::basic_type(_signature) == T_INLINE_TYPE; }\n+  const bool is_inline_type() { return Signature::basic_type(_signature) == T_PRIMITIVE_OBJECT; }\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-      new_str[idx++] = JVM_SIGNATURE_INLINE_TYPE;\n+      new_str[idx++] = JVM_SIGNATURE_PRIMITIVE_OBJECT;\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    return type == T_DOUBLE || type == T_LONG || type == T_INLINE_TYPE;\n+    return type == T_DOUBLE || type == T_LONG || type == T_PRIMITIVE_OBJECT;\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-  BasicType etype = T_INLINE_TYPE;\n+  BasicType etype = T_PRIMITIVE_OBJECT;\n@@ -209,1 +209,1 @@\n-  max_size -= arrayOopDesc::header_size(T_INLINE_TYPE);\n+  max_size -= arrayOopDesc::header_size(T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-inline void* flatArrayOopDesc::base() const { return arrayOopDesc::base(T_INLINE_TYPE); }\n+inline void* flatArrayOopDesc::base() const { return arrayOopDesc::base(T_PRIMITIVE_OBJECT); }\n","filename":"src\/hotspot\/share\/oops\/flatArrayOop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,2 +224,2 @@\n-\/\/ The list of basic types that is returned starts with a T_INLINE_TYPE\n-\/\/ and ends with an extra T_VOID. T_INLINE_TYPE\/T_VOID pairs are used as\n+\/\/ The list of basic types that is returned starts with a T_PRIMITIVE_OBJECT\n+\/\/ and ends with an extra T_VOID. T_PRIMITIVE_OBJECT\/T_VOID pairs are used as\n@@ -228,1 +228,1 @@\n-\/\/ with a T_INLINE_TYPE and ends with a T_VOID. This is so we can\n+\/\/ with a T_PRIMITIVE_OBJECT and ends with a T_VOID. This is so we can\n@@ -232,1 +232,1 @@\n-\/\/ T_INLINE_TYPE, drop everything until and including the closing\n+\/\/ T_PRIMITIVE_OBJECT, drop everything until and including the closing\n@@ -234,1 +234,1 @@\n-\/\/ types is an argument: drop all T_INLINE_TYPE\/T_VOID from the list).\n+\/\/ types is an argument: drop all T_PRIMITIVE_OBJECT\/T_VOID from the list).\n@@ -237,1 +237,1 @@\n-  SigEntry::add_entry(sig, T_INLINE_TYPE, name(), base_off);\n+  SigEntry::add_entry(sig, T_PRIMITIVE_OBJECT, name(), base_off);\n@@ -247,1 +247,1 @@\n-      if (bt == T_INLINE_TYPE) {\n+      if (bt == T_PRIMITIVE_OBJECT) {\n@@ -259,1 +259,1 @@\n-  assert(sig->at(0)._bt == T_INLINE_TYPE && sig->at(sig->length()-1)._bt == T_VOID, \"broken structure\");\n+  assert(sig->at(0)._bt == T_PRIMITIVE_OBJECT && sig->at(sig->length()-1)._bt == T_VOID, \"broken structure\");\n@@ -359,1 +359,1 @@\n-    if (bt == T_INLINE_TYPE) {\n+    if (bt == T_PRIMITIVE_OBJECT) {\n@@ -387,1 +387,1 @@\n-    if (bt == T_INLINE_TYPE) {\n+    if (bt == T_PRIMITIVE_OBJECT) {\n@@ -411,1 +411,1 @@\n-    if (bt == T_INLINE_TYPE) {\n+    if (bt == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    return InstanceKlass::signature_name_of_carrier(JVM_SIGNATURE_INLINE_TYPE);\n+    return InstanceKlass::signature_name_of_carrier(JVM_SIGNATURE_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-bool InstanceKlass::field_is_null_free_inline_type(int index) const { return Signature::basic_type(field(index)->signature(constants())) == T_INLINE_TYPE; }\n+bool InstanceKlass::field_is_null_free_inline_type(int index) const { return Signature::basic_type(field(index)->signature(constants())) == T_PRIMITIVE_OBJECT; }\n@@ -970,1 +970,1 @@\n-          if (ss.type() == T_INLINE_TYPE) {\n+          if (ss.type() == T_PRIMITIVE_OBJECT) {\n@@ -1321,1 +1321,1 @@\n-      if (Signature::basic_type(fs.signature()) == T_INLINE_TYPE) {\n+      if (Signature::basic_type(fs.signature()) == T_PRIMITIVE_OBJECT) {\n@@ -2697,1 +2697,1 @@\n-      if (Signature::basic_type(fs.signature()) == T_INLINE_TYPE) {\n+      if (Signature::basic_type(fs.signature()) == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -431,1 +431,1 @@\n-    assert((btvalue >= T_BOOLEAN && btvalue <= T_OBJECT) || btvalue == T_INLINE_TYPE, \"sanity\");\n+    assert((btvalue >= T_BOOLEAN && btvalue <= T_OBJECT) || btvalue == T_PRIMITIVE_OBJECT, \"sanity\");\n@@ -452,1 +452,1 @@\n-    assert(layout_helper_element_type(lh) == T_INLINE_TYPE || l2esz <= LogBytesPerLong,\n+    assert(layout_helper_element_type(lh) == T_PRIMITIVE_OBJECT || l2esz <= LogBytesPerLong,\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -882,1 +882,1 @@\n-  if (InlineTypeReturnedAsFields && result_type() == T_INLINE_TYPE) {\n+  if (InlineTypeReturnedAsFields && result_type() == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  return len > 2 && char_at(0) == JVM_SIGNATURE_INLINE_TYPE && char_at(len - 1) == JVM_SIGNATURE_ENDCLASS;\n+  return len > 2 && char_at(0) == JVM_SIGNATURE_PRIMITIVE_OBJECT && char_at(len - 1) == JVM_SIGNATURE_ENDCLASS;\n@@ -129,1 +129,1 @@\n-    if (c == JVM_SIGNATURE_INLINE_TYPE) {\n+    if (c == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n@@ -144,1 +144,1 @@\n-      if (char_at(i) == JVM_SIGNATURE_ENDFUNC && char_at(i+1) == JVM_SIGNATURE_INLINE_TYPE) {\n+      if (char_at(i) == JVM_SIGNATURE_ENDFUNC && char_at(i+1) == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n@@ -153,1 +153,1 @@\n-  if ((char_at(0) == JVM_SIGNATURE_INLINE_TYPE || char_at(0) == JVM_SIGNATURE_CLASS) && ends_with(JVM_SIGNATURE_ENDCLASS)) {\n+  if ((char_at(0) == JVM_SIGNATURE_PRIMITIVE_OBJECT || char_at(0) == JVM_SIGNATURE_CLASS) && ends_with(JVM_SIGNATURE_ENDCLASS)) {\n@@ -168,1 +168,1 @@\n-    if (char_at(0) != JVM_SIGNATURE_INLINE_TYPE && char_at(0) != JVM_SIGNATURE_CLASS) return false;\n+    if (char_at(0) != JVM_SIGNATURE_PRIMITIVE_OBJECT && char_at(0) != JVM_SIGNATURE_CLASS) return false;\n@@ -176,1 +176,1 @@\n-    if (s->char_at(0) != JVM_SIGNATURE_INLINE_TYPE && s->char_at(0) != JVM_SIGNATURE_CLASS) return false;\n+    if (s->char_at(0) != JVM_SIGNATURE_PRIMITIVE_OBJECT && s->char_at(0) != JVM_SIGNATURE_CLASS) return false;\n","filename":"src\/hotspot\/share\/oops\/symbol.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -284,1 +284,1 @@\n-    if (src_elem == T_ARRAY || (src_elem == T_INLINE_TYPE && ary_src->klass()->is_obj_array_klass())) {\n+    if (src_elem == T_ARRAY || (src_elem == T_PRIMITIVE_OBJECT && ary_src->klass()->is_obj_array_klass())) {\n@@ -287,1 +287,1 @@\n-    if (dest_elem == T_ARRAY || (dest_elem == T_INLINE_TYPE && ary_dest->klass()->is_obj_array_klass())) {\n+    if (dest_elem == T_ARRAY || (dest_elem == T_PRIMITIVE_OBJECT && ary_dest->klass()->is_obj_array_klass())) {\n@@ -298,1 +298,1 @@\n-        (src_elem == T_INLINE_TYPE && ary_src->elem()->inline_klass()->contains_oops() &&\n+        (src_elem == T_PRIMITIVE_OBJECT && ary_src->elem()->inline_klass()->contains_oops() &&\n@@ -307,1 +307,1 @@\n-    if (dest_elem == T_INLINE_TYPE) {\n+    if (dest_elem == T_PRIMITIVE_OBJECT) {\n@@ -342,1 +342,1 @@\n-    if (elem == T_ARRAY || (elem == T_INLINE_TYPE && ary_src->klass()->is_obj_array_klass())) {\n+    if (elem == T_ARRAY || (elem == T_PRIMITIVE_OBJECT && ary_src->klass()->is_obj_array_klass())) {\n@@ -348,1 +348,1 @@\n-        (elem == T_INLINE_TYPE && ary_src->elem()->inline_klass()->contains_oops() &&\n+        (elem == T_PRIMITIVE_OBJECT && ary_src->elem()->inline_klass()->contains_oops() &&\n@@ -412,1 +412,1 @@\n-  if (copy_type == T_INLINE_TYPE) {\n+  if (copy_type == T_PRIMITIVE_OBJECT) {\n@@ -422,1 +422,1 @@\n-      if (bt == T_INLINE_TYPE) {\n+      if (bt == T_PRIMITIVE_OBJECT) {\n@@ -551,1 +551,1 @@\n-             (ary_src != NULL && elem == T_INLINE_TYPE && ary_src->klass()->is_obj_array_klass()), \"added control for clone?\");\n+             (ary_src != NULL && elem == T_PRIMITIVE_OBJECT && ary_src->klass()->is_obj_array_klass()), \"added control for clone?\");\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -779,1 +779,1 @@\n-    if (rtype->basic_type() == T_INLINE_TYPE && !peek()->is_InlineTypeBase()) {\n+    if (rtype->basic_type() == T_PRIMITIVE_OBJECT && !peek()->is_InlineTypeBase()) {\n@@ -782,1 +782,1 @@\n-      push_node(T_INLINE_TYPE, retnode);\n+      push_node(T_PRIMITIVE_OBJECT, retnode);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1281,1 +1281,1 @@\n-    case T_INLINE_TYPE : \/\/ fall through\n+    case T_PRIMITIVE_OBJECT : \/\/ fall through\n@@ -1609,1 +1609,1 @@\n-  if (((bt == T_OBJECT || bt == T_INLINE_TYPE) && C->do_escape_analysis()) || C->eliminate_boxing()) {\n+  if (((bt == T_OBJECT || bt == T_PRIMITIVE_OBJECT) && C->do_escape_analysis()) || C->eliminate_boxing()) {\n@@ -1835,1 +1835,1 @@\n-  assert(elembt != T_INLINE_TYPE, \"inline types are not supported by this method\");\n+  assert(elembt != T_PRIMITIVE_OBJECT, \"inline types are not supported by this method\");\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -613,1 +613,1 @@\n-  Node* oop = (vk->is_empty() && vk->is_initialized()) ? default_oop(gvn, vk) : gvn.zerocon(T_INLINE_TYPE);\n+  Node* oop = (vk->is_empty() && vk->is_initialized()) ? default_oop(gvn, vk) : gvn.zerocon(T_PRIMITIVE_OBJECT);\n@@ -626,1 +626,1 @@\n-  Node* oop = vk->is_initialized() ? default_oop(gvn, vk) : gvn.zerocon(T_INLINE_TYPE);\n+  Node* oop = vk->is_initialized() ? default_oop(gvn, vk) : gvn.zerocon(T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-  case vmIntrinsics::_getValue:                 return inline_unsafe_access(!is_store, T_INLINE_TYPE,Relaxed, false);\n+  case vmIntrinsics::_getValue:                 return inline_unsafe_access(!is_store, T_PRIMITIVE_OBJECT,Relaxed, false);\n@@ -345,1 +345,1 @@\n-  case vmIntrinsics::_putValue:                 return inline_unsafe_access( is_store, T_INLINE_TYPE,Relaxed, false);\n+  case vmIntrinsics::_putValue:                 return inline_unsafe_access( is_store, T_PRIMITIVE_OBJECT,Relaxed, false);\n@@ -2280,2 +2280,2 @@\n-      assert(rtype == type || (rtype == T_OBJECT && type == T_INLINE_TYPE), \"getter must return the expected value\");\n-      assert(sig->count() == 2 || (type == T_INLINE_TYPE && sig->count() == 3), \"oop getter has 2 or 3 arguments\");\n+      assert(rtype == type || (rtype == T_OBJECT && type == T_PRIMITIVE_OBJECT), \"getter must return the expected value\");\n+      assert(sig->count() == 2 || (type == T_PRIMITIVE_OBJECT && sig->count() == 3), \"oop getter has 2 or 3 arguments\");\n@@ -2287,1 +2287,1 @@\n-      assert(sig->count() == 3 || (type == T_INLINE_TYPE && sig->count() == 4), \"oop putter has 3 arguments\");\n+      assert(sig->count() == 3 || (type == T_PRIMITIVE_OBJECT && sig->count() == 4), \"oop putter has 3 arguments\");\n@@ -2291,1 +2291,1 @@\n-      assert(vtype == type || (type == T_INLINE_TYPE && vtype == T_OBJECT), \"putter must accept the expected value\");\n+      assert(vtype == type || (type == T_PRIMITIVE_OBJECT && vtype == T_OBJECT), \"putter must accept the expected value\");\n@@ -2315,1 +2315,1 @@\n-  if (type == T_INLINE_TYPE) {\n+  if (type == T_PRIMITIVE_OBJECT) {\n@@ -2345,1 +2345,1 @@\n-          if (bt == T_ARRAY || bt == T_NARROWOOP || (bt == T_INLINE_TYPE && !field->is_flattened())) {\n+          if (bt == T_ARRAY || bt == T_NARROWOOP || (bt == T_PRIMITIVE_OBJECT && !field->is_flattened())) {\n@@ -2348,1 +2348,1 @@\n-          if (bt == type && (bt != T_INLINE_TYPE || field->type() == inline_klass)) {\n+          if (bt == type && (bt != T_PRIMITIVE_OBJECT || field->type() == inline_klass)) {\n@@ -2392,1 +2392,1 @@\n-  Node* val = is_store ? argument(4 + (type == T_INLINE_TYPE ? 1 : 0)) : NULL;\n+  Node* val = is_store ? argument(4 + (type == T_PRIMITIVE_OBJECT ? 1 : 0)) : NULL;\n@@ -2430,2 +2430,2 @@\n-    assert(bt == alias_type->basic_type() || bt == T_INLINE_TYPE, \"should match\");\n-    if (field != NULL && bt == T_INLINE_TYPE && !field->is_flattened()) {\n+    assert(bt == alias_type->basic_type() || bt == T_PRIMITIVE_OBJECT, \"should match\");\n+    if (field != NULL && bt == T_PRIMITIVE_OBJECT && !field->is_flattened()) {\n@@ -2460,1 +2460,1 @@\n-  if (type == T_INLINE_TYPE) {\n+  if (type == T_PRIMITIVE_OBJECT) {\n@@ -2486,1 +2486,1 @@\n-  assert(!mismatched || type == T_INLINE_TYPE || alias_type->adr_type()->is_oopptr(), \"off-heap access can't be mismatched\");\n+  assert(!mismatched || type == T_PRIMITIVE_OBJECT || alias_type->adr_type()->is_oopptr(), \"off-heap access can't be mismatched\");\n@@ -2504,1 +2504,1 @@\n-    } else if (type == T_INLINE_TYPE) {\n+    } else if (type == T_PRIMITIVE_OBJECT) {\n@@ -2528,1 +2528,1 @@\n-      if (type == T_INLINE_TYPE) {\n+      if (type == T_PRIMITIVE_OBJECT) {\n@@ -2581,1 +2581,1 @@\n-    if (type == T_INLINE_TYPE) {\n+    if (type == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -781,1 +781,1 @@\n-        assert(basic_elem_type == T_INLINE_TYPE, \"unexpected element basic type\");\n+        assert(basic_elem_type == T_PRIMITIVE_OBJECT, \"unexpected element basic type\");\n@@ -1037,1 +1037,1 @@\n-        use->isa_InlineType()->set_oop(_igvn.zerocon(T_INLINE_TYPE));\n+        use->isa_InlineType()->set_oop(_igvn.zerocon(T_PRIMITIVE_OBJECT));\n@@ -1041,1 +1041,1 @@\n-        use->isa_InlineTypePtr()->set_oop(_igvn.zerocon(T_INLINE_TYPE));\n+        use->isa_InlineTypePtr()->set_oop(_igvn.zerocon(T_PRIMITIVE_OBJECT));\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -951,1 +951,1 @@\n-  assert(basic_elem_type != T_INLINE_TYPE, \"should have been converted to a basic type copy\");\n+  assert(basic_elem_type != T_PRIMITIVE_OBJECT, \"should have been converted to a basic type copy\");\n@@ -1362,1 +1362,1 @@\n-    if (dest_elem == T_ARRAY || (dest_elem == T_INLINE_TYPE && top_dest->klass()->is_obj_array_klass())) {\n+    if (dest_elem == T_ARRAY || (dest_elem == T_PRIMITIVE_OBJECT && top_dest->klass()->is_obj_array_klass())) {\n@@ -1367,1 +1367,1 @@\n-      dest_elem = T_INLINE_TYPE;\n+      dest_elem = T_PRIMITIVE_OBJECT;\n@@ -1381,1 +1381,1 @@\n-    if (dest_elem == T_INLINE_TYPE) {\n+    if (dest_elem == T_PRIMITIVE_OBJECT) {\n@@ -1434,1 +1434,1 @@\n-  if (src_elem == T_ARRAY || (src_elem == T_INLINE_TYPE && top_src->klass()->is_obj_array_klass())) {\n+  if (src_elem == T_ARRAY || (src_elem == T_PRIMITIVE_OBJECT && top_src->klass()->is_obj_array_klass())) {\n@@ -1437,1 +1437,1 @@\n-  if (dest_elem == T_ARRAY || (dest_elem == T_INLINE_TYPE && top_dest->klass()->is_obj_array_klass())) {\n+  if (dest_elem == T_ARRAY || (dest_elem == T_PRIMITIVE_OBJECT && top_dest->klass()->is_obj_array_klass())) {\n@@ -1468,1 +1468,1 @@\n-         (src_elem == T_INLINE_TYPE && StressReflectiveCode), \"validated but different basic types\");\n+         (src_elem == T_PRIMITIVE_OBJECT && StressReflectiveCode), \"validated but different basic types\");\n@@ -1478,1 +1478,1 @@\n-      (dest_elem == T_INLINE_TYPE && top_dest->elem()->inline_klass()->contains_oops() &&\n+      (dest_elem == T_PRIMITIVE_OBJECT && top_dest->elem()->inline_klass()->contains_oops() &&\n@@ -1509,1 +1509,1 @@\n-  if (dest_elem == T_INLINE_TYPE) {\n+  if (dest_elem == T_PRIMITIVE_OBJECT) {\n@@ -1577,1 +1577,1 @@\n-  if (dest_elem == T_INLINE_TYPE) {\n+  if (dest_elem == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -894,1 +894,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n@@ -1167,1 +1167,1 @@\n-      assert(memory_type() != T_INLINE_TYPE, \"should not be used for inline types\");\n+      assert(memory_type() != T_PRIMITIVE_OBJECT, \"should not be used for inline types\");\n@@ -2699,1 +2699,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-    bt = T_INLINE_TYPE;\n+    bt = T_PRIMITIVE_OBJECT;\n@@ -123,1 +123,1 @@\n-        Node* casted_adr = array_element_address(cast, idx, T_INLINE_TYPE, ary_t->size(), control());\n+        Node* casted_adr = array_element_address(cast, idx, T_PRIMITIVE_OBJECT, ary_t->size(), control());\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -369,1 +369,1 @@\n-  new_vt->set_oop(_gvn.zerocon(T_INLINE_TYPE));\n+  new_vt->set_oop(_gvn.zerocon(T_PRIMITIVE_OBJECT));\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  { Bad,             T_INLINE_TYPE, \"inline:\",      false, Node::NotAMachineReg, relocInfo::none          },  \/\/ InlineType\n+  { Bad,             T_PRIMITIVE_OBJECT, \"inline:\",      false, Node::NotAMachineReg, relocInfo::none          },  \/\/ InlineType\n@@ -272,1 +272,1 @@\n-  case T_INLINE_TYPE: {\n+  case T_PRIMITIVE_OBJECT: {\n@@ -310,1 +310,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -348,1 +348,1 @@\n-    case T_INLINE_TYPE: conbt = T_OBJECT; break;\n+    case T_PRIMITIVE_OBJECT: conbt = T_OBJECT; break;\n@@ -355,1 +355,1 @@\n-    case T_INLINE_TYPE: loadbt = T_OBJECT; break;\n+    case T_PRIMITIVE_OBJECT: loadbt = T_OBJECT; break;\n@@ -660,1 +660,1 @@\n-  TypeAryPtr::_array_body_type[T_INLINE_TYPE] = TypeAryPtr::OOPS;\n+  TypeAryPtr::_array_body_type[T_PRIMITIVE_OBJECT] = TypeAryPtr::OOPS;\n@@ -711,1 +711,1 @@\n-  _const_basic_type[T_INLINE_TYPE] = TypeInstPtr::BOTTOM;\n+  _const_basic_type[T_PRIMITIVE_OBJECT] = TypeInstPtr::BOTTOM;\n@@ -728,1 +728,1 @@\n-  _zero_type[T_INLINE_TYPE] = TypePtr::NULL_PTR;\n+  _zero_type[T_PRIMITIVE_OBJECT] = TypePtr::NULL_PTR;\n@@ -2121,1 +2121,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n@@ -2186,1 +2186,1 @@\n-    case T_INLINE_TYPE: {\n+    case T_PRIMITIVE_OBJECT: {\n@@ -3443,1 +3443,1 @@\n-              \/\/ basic_elem_type = T_INLINE_TYPE;\n+              \/\/ basic_elem_type = T_PRIMITIVE_OBJECT;\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -817,1 +817,1 @@\n-    case T_INLINE_TYPE: push_object(va_arg(_ap, jobject)); break;\n+    case T_PRIMITIVE_OBJECT: push_object(va_arg(_ap, jobject)); break;\n@@ -858,1 +858,1 @@\n-    case T_INLINE_TYPE: push_object((_ap++)->l); break;\n+    case T_PRIMITIVE_OBJECT: push_object((_ap++)->l); break;\n@@ -1008,1 +1008,1 @@\n-    JavaValue jvalue(T_INLINE_TYPE);\n+    JavaValue jvalue(T_PRIMITIVE_OBJECT);\n@@ -1040,1 +1040,1 @@\n-    JavaValue jvalue(T_INLINE_TYPE);\n+    JavaValue jvalue(T_PRIMITIVE_OBJECT);\n@@ -1077,1 +1077,1 @@\n-    JavaValue jvalue(T_INLINE_TYPE);\n+    JavaValue jvalue(T_PRIMITIVE_OBJECT);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-      !(fd.field_type() == T_INLINE_TYPE && ftype == T_OBJECT)) {\n+      !(fd.field_type() == T_PRIMITIVE_OBJECT && ftype == T_OBJECT)) {\n@@ -323,1 +323,1 @@\n-      !(fd.field_type() == T_INLINE_TYPE && ftype == T_OBJECT)) {\n+      !(fd.field_type() == T_PRIMITIVE_OBJECT && ftype == T_OBJECT)) {\n@@ -496,1 +496,1 @@\n-      (name[0] == JVM_SIGNATURE_CLASS || name[0] == JVM_SIGNATURE_INLINE_TYPE) && \/\/ 'L' or 'Q'\n+      (name[0] == JVM_SIGNATURE_CLASS || name[0] == JVM_SIGNATURE_PRIMITIVE_OBJECT) && \/\/ 'L' or 'Q'\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2016,1 +2016,1 @@\n-  if (sig_type == JVM_SIGNATURE_CLASS || sig_type == JVM_SIGNATURE_INLINE_TYPE) {\n+  if (sig_type == JVM_SIGNATURE_CLASS || sig_type == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-       ty_sign[0] == JVM_SIGNATURE_INLINE_TYPE) &&\n+       ty_sign[0] == JVM_SIGNATURE_PRIMITIVE_OBJECT) &&\n@@ -582,1 +582,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n@@ -708,1 +708,1 @@\n-      if (_type == T_OBJECT || _type == T_INLINE_TYPE) {\n+      if (_type == T_OBJECT || _type == T_PRIMITIVE_OBJECT) {\n@@ -727,1 +727,1 @@\n-      case T_INLINE_TYPE: {\n+      case T_PRIMITIVE_OBJECT: {\n@@ -749,1 +749,1 @@\n-        case T_INLINE_TYPE: {\n+        case T_PRIMITIVE_OBJECT: {\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1383,1 +1383,1 @@\n-    if (type == T_INLINE_TYPE) {\n+    if (type == T_PRIMITIVE_OBJECT) {\n@@ -1481,1 +1481,1 @@\n-  int base_offset = arrayOopDesc::base_offset_in_bytes(T_INLINE_TYPE) - InlineKlass::cast(vk)->first_field_offset();\n+  int base_offset = arrayOopDesc::base_offset_in_bytes(T_PRIMITIVE_OBJECT) - InlineKlass::cast(vk)->first_field_offset();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-  if (ft != T_INLINE_TYPE) {\n+  if (ft != T_PRIMITIVE_OBJECT) {\n@@ -200,1 +200,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-inline bool fieldDescriptor::is_inline_type() const { return Signature::basic_type(field()->signature(_cp())) == T_INLINE_TYPE; }\n+inline bool fieldDescriptor::is_inline_type() const { return Signature::basic_type(field()->signature(_cp())) == T_PRIMITIVE_OBJECT; }\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-    case T_INLINE_TYPE: \/\/ fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ fall through\n@@ -168,1 +168,1 @@\n-    case T_INLINE_TYPE: return T_INLINE_TYPE;\n+    case T_PRIMITIVE_OBJECT: return T_PRIMITIVE_OBJECT;\n@@ -411,1 +411,1 @@\n-  if (InlineTypeReturnedAsFields && result->get_type() == T_INLINE_TYPE) {\n+  if (InlineTypeReturnedAsFields && result->get_type() == T_PRIMITIVE_OBJECT) {\n@@ -609,1 +609,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1153,1 +1153,1 @@\n-    rtype = java_lang_Class::is_primary_mirror(return_type_mirror) ? T_OBJECT : T_INLINE_TYPE;\n+    rtype = java_lang_Class::is_primary_mirror(return_type_mirror) ? T_OBJECT : T_PRIMITIVE_OBJECT;\n@@ -1197,1 +1197,1 @@\n-      rtype = T_INLINE_TYPE;\n+      rtype = T_PRIMITIVE_OBJECT;\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -938,1 +938,1 @@\n-    if (return_oop && InlineTypeReturnedAsFields && method->result_type() == T_INLINE_TYPE) {\n+    if (return_oop && InlineTypeReturnedAsFields && method->result_type() == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2469,1 +2469,1 @@\n-          if (bt == T_INLINE_TYPE) {\n+          if (bt == T_PRIMITIVE_OBJECT) {\n@@ -2906,1 +2906,1 @@\n-    if (ss.type() == T_INLINE_TYPE) {\n+    if (ss.type() == T_PRIMITIVE_OBJECT) {\n@@ -2972,1 +2972,1 @@\n-      if (bt == T_INLINE_TYPE) {\n+      if (bt == T_PRIMITIVE_OBJECT) {\n@@ -3636,1 +3636,1 @@\n-    if (ss.type() == T_INLINE_TYPE) {\n+    if (ss.type() == T_PRIMITIVE_OBJECT) {\n@@ -3650,1 +3650,1 @@\n-    if (ss.type() == T_INLINE_TYPE) {\n+    if (ss.type() == T_PRIMITIVE_OBJECT) {\n@@ -3691,1 +3691,1 @@\n-    if (bt == T_INLINE_TYPE) {\n+    if (bt == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n@@ -309,1 +309,1 @@\n-  case JVM_SIGNATURE_INLINE_TYPE:\n+  case JVM_SIGNATURE_PRIMITIVE_OBJECT:\n@@ -567,1 +567,1 @@\n-    case JVM_SIGNATURE_INLINE_TYPE: \/\/ fall through\n+    case JVM_SIGNATURE_PRIMITIVE_OBJECT: \/\/ fall through\n@@ -597,1 +597,1 @@\n-  return (sig->at(i)._bt != T_INLINE_TYPE &&\n+  return (sig->at(i)._bt != T_PRIMITIVE_OBJECT &&\n@@ -621,1 +621,1 @@\n-    if (bt == T_INLINE_TYPE || bt == T_VOID) {\n+    if (bt == T_PRIMITIVE_OBJECT || bt == T_VOID) {\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-    return (signature_char == JVM_SIGNATURE_CLASS) || (signature_char == JVM_SIGNATURE_INLINE_TYPE);\n+    return (signature_char == JVM_SIGNATURE_CLASS) || (signature_char == JVM_SIGNATURE_PRIMITIVE_OBJECT);\n@@ -274,1 +274,1 @@\n-    case T_INLINE_TYPE:  type_name(\"jobject\" ); break;\n+    case T_PRIMITIVE_OBJECT:  type_name(\"jobject\" ); break;\n@@ -412,1 +412,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n@@ -527,1 +527,1 @@\n-    return has_envelope() && (_signature->char_at(_begin) == JVM_SIGNATURE_INLINE_TYPE);\n+    return has_envelope() && (_signature->char_at(_begin) == JVM_SIGNATURE_PRIMITIVE_OBJECT);\n@@ -602,1 +602,1 @@\n-           e1->_bt == T_INLINE_TYPE || e2->_bt == T_INLINE_TYPE || e1->_bt == T_VOID || e2->_bt == T_VOID, \"bad bt\");\n+           e1->_bt == T_PRIMITIVE_OBJECT || e2->_bt == T_PRIMITIVE_OBJECT || e1->_bt == T_VOID || e2->_bt == T_VOID, \"bad bt\");\n@@ -604,1 +604,1 @@\n-      assert(e1->_bt == T_INLINE_TYPE || e1->_bt == T_VOID, \"only ones with duplicate offsets\");\n+      assert(e1->_bt == T_PRIMITIVE_OBJECT || e1->_bt == T_VOID, \"only ones with duplicate offsets\");\n@@ -608,1 +608,1 @@\n-        e2->_bt == T_INLINE_TYPE) {\n+        e2->_bt == T_PRIMITIVE_OBJECT) {\n@@ -611,1 +611,1 @@\n-    if (e1->_bt == T_INLINE_TYPE ||\n+    if (e1->_bt == T_PRIMITIVE_OBJECT ||\n@@ -626,1 +626,1 @@\n-  bool operator()(const SigEntry& entry) { return entry._bt != T_INLINE_TYPE && entry._bt != T_VOID; }\n+  bool operator()(const SigEntry& entry) { return entry._bt != T_PRIMITIVE_OBJECT && entry._bt != T_VOID; }\n","filename":"src\/hotspot\/share\/runtime\/signature.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    assert(_sig->at(_sig_idx)._bt == (step > 0) ? T_INLINE_TYPE : T_VOID, \"should be at inline type delimiter\");\n+    assert(_sig->at(_sig_idx)._bt == (step > 0) ? T_PRIMITIVE_OBJECT : T_VOID, \"should be at inline type delimiter\");\n@@ -54,1 +54,1 @@\n-      if (bt == T_INLINE_TYPE) {\n+      if (bt == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/runtime\/signature_cc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -485,1 +485,1 @@\n-  case T_INLINE_TYPE:\n+  case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-    case T_INLINE_TYPE:\n+    case T_PRIMITIVE_OBJECT:\n","filename":"src\/hotspot\/share\/runtime\/vframe_hp.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1000,1 +1000,1 @@\n-    case JVM_SIGNATURE_INLINE_TYPE: return HPROF_NORMAL_OBJECT;\n+    case JVM_SIGNATURE_PRIMITIVE_OBJECT: return HPROF_NORMAL_OBJECT;\n@@ -1031,1 +1031,1 @@\n-    case JVM_SIGNATURE_INLINE_TYPE:\n+    case JVM_SIGNATURE_PRIMITIVE_OBJECT:\n@@ -1076,1 +1076,1 @@\n-    case JVM_SIGNATURE_INLINE_TYPE: {\n+    case JVM_SIGNATURE_PRIMITIVE_OBJECT: {\n@@ -1484,1 +1484,1 @@\n-  assert((type >= T_BOOLEAN && type <= T_OBJECT) || type == T_INLINE_TYPE, \"invalid array element type\");\n+  assert((type >= T_BOOLEAN && type <= T_OBJECT) || type == T_PRIMITIVE_OBJECT, \"invalid array element type\");\n@@ -1489,1 +1489,1 @@\n-  if (type == T_OBJECT || type == T_INLINE_TYPE) {\n+  if (type == T_OBJECT || type == T_PRIMITIVE_OBJECT) {\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-      case T_INLINE_TYPE:\n+      case T_PRIMITIVE_OBJECT:\n@@ -205,1 +205,1 @@\n-  _type2aelembytes[T_INLINE_TYPE]  = heapOopSize;\n+  _type2aelembytes[T_PRIMITIVE_OBJECT]  = heapOopSize;\n@@ -217,1 +217,1 @@\n-  JVM_SIGNATURE_INLINE_TYPE, JVM_SIGNATURE_VOID,\n+  JVM_SIGNATURE_PRIMITIVE_OBJECT, JVM_SIGNATURE_VOID,\n@@ -271,1 +271,1 @@\n-  T_INLINE_TYPE,           \/\/ T_INLINE_TYPE = 14,\n+  T_PRIMITIVE_OBJECT,      \/\/ T_PRIMITIVE_OBJECT = 14,\n@@ -296,1 +296,1 @@\n-  T_OBJECT,  \/\/ T_INLINE_TYPE = 14,\n+  T_OBJECT,  \/\/ T_PRIMITIVE_OBJECT = 14,\n@@ -321,1 +321,1 @@\n-  T_INLINE_TYPE_aelem_bytes,   \/\/ T_INLINE_TYPE = 14,\n+  T_PRIMITIVE_OBJECT_aelem_bytes, \/\/ T_PRIMITIVE_OBJECT = 14,\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -681,1 +681,1 @@\n-  T_INLINE_TYPE = 14,\n+  T_PRIMITIVE_OBJECT = 14,\n@@ -702,1 +702,1 @@\n-    F(JVM_SIGNATURE_INLINE_TYPE, T_INLINE_TYPE, N) \\\n+    F(JVM_SIGNATURE_PRIMITIVE_OBJECT, T_PRIMITIVE_OBJECT, N) \\\n@@ -728,1 +728,1 @@\n-  return (t == T_OBJECT || t == T_ARRAY || t == T_INLINE_TYPE);\n+  return (t == T_OBJECT || t == T_ARRAY || t == T_PRIMITIVE_OBJECT);\n@@ -782,1 +782,1 @@\n-  T_INLINE_TYPE_size = 1\n+  T_PRIMITIVE_OBJECT_size = 1\n@@ -812,1 +812,1 @@\n-  T_INLINE_TYPE_aelem_bytes = 8,\n+  T_PRIMITIVE_OBJECT_aelem_bytes = 8,\n@@ -816,1 +816,1 @@\n-  T_INLINE_TYPE_aelem_bytes = 4,\n+  T_PRIMITIVE_OBJECT_aelem_bytes = 4,\n@@ -923,1 +923,1 @@\n-    case T_INLINE_TYPE: \/\/ fall through\n+    case T_PRIMITIVE_OBJECT: \/\/ fall through\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-    JVM_SIGNATURE_INLINE_TYPE   = 'Q',\n+    JVM_SIGNATURE_PRIMITIVE_OBJECT = 'Q',\n","filename":"src\/java.base\/share\/native\/include\/classfile_constants.h.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-            case JVM_SIGNATURE_INLINE_TYPE: {\n+            case JVM_SIGNATURE_PRIMITIVE_OBJECT: {\n","filename":"src\/java.base\/share\/native\/libjava\/check_classname.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3727,1 +3727,1 @@\n-          case JVM_SIGNATURE_INLINE_TYPE:\n+          case JVM_SIGNATURE_PRIMITIVE_OBJECT:\n@@ -3733,1 +3733,1 @@\n-            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_INLINE_TYPE) {\n+            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n@@ -3813,1 +3813,1 @@\n-            case JVM_SIGNATURE_INLINE_TYPE: {\n+            case JVM_SIGNATURE_PRIMITIVE_OBJECT: {\n@@ -4196,1 +4196,1 @@\n-          case JVM_SIGNATURE_INLINE_TYPE:\n+          case JVM_SIGNATURE_PRIMITIVE_OBJECT:\n@@ -4204,1 +4204,1 @@\n-            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_INLINE_TYPE) {\n+            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n","filename":"src\/java.base\/share\/native\/libverify\/check_code.c","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}