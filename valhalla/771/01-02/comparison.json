{"files":[{"patch":"@@ -360,1 +360,1 @@\n-        if ((isConstructor() || isValueObjectFactory()) && owner.hasOuterInstance()) {\n+        if (isInitOrVNew() && owner.hasOuterInstance()) {\n@@ -486,1 +486,1 @@\n-        return ((name == name.table.names.vnew && this.type.getReturnType().tsym == this.owner && (flags() & STATIC) == 0));\n+        return name == name.table.names.vnew && this.type.getReturnType().tsym == this.owner;\n@@ -492,1 +492,1 @@\n-        return name.table.names.isInitOrVNew(name) && (flags() & STATIC) == 0;\n+        return name.table.names.isInitOrVNew(name);\n@@ -1998,1 +1998,1 @@\n-                String s = (isConstructor() || isValueObjectFactory())\n+                String s = isInitOrVNew()\n@@ -2254,1 +2254,1 @@\n-            if (isConstructor() || isValueObjectFactory())\n+            if (isInitOrVNew())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -978,1 +978,1 @@\n-                        names.isInitOrVNew(t.name) &&\n+                        !names.isInitOrVNew(t.name) &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -784,1 +784,1 @@\n-                    } else if (s.isValueObjectFactory()) {\n+                    } else if (s.isInitOrVNew()) {\n@@ -795,1 +795,1 @@\n-                                log.error(pos, Errors.SuperNoArgConstructorMustBeEmpty(m, fragment));\n+                            log.error(pos, Errors.SuperNoArgConstructorMustBeEmpty(m, fragment));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+    private final boolean allowValueClasses;\n@@ -84,0 +85,2 @@\n+        Source source = Source.instance(context);\n+        allowValueClasses = Source.Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -180,1 +183,1 @@\n-        if (tree.name == tree.name.table.names.init && enclScope.owner.isValueClass()) {\n+        if (tree.name == tree.name.table.names.init && allowValueClasses && enclScope.owner.isValueClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+    public final boolean allowValueClasses;\n@@ -143,1 +144,0 @@\n-        Target target = Target.instance(context);\n@@ -150,0 +150,1 @@\n+        allowValueClasses = Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -2989,1 +2990,1 @@\n-        Name constructorName = site.tsym.isValueClass() ? names.vnew : names.init;\n+        Name constructorName = allowValueClasses && site.tsym.isValueClass() ? names.vnew : names.init;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-        return currentClass != null && (currentClass.sym.flags() & (ABSTRACT | VALUE_CLASS)) == VALUE_CLASS && currentMethod != null && currentMethod.sym.isValueObjectFactory();\n+        return currentClass != null && (currentClass.sym.flags() & (ABSTRACT | VALUE_CLASS)) == VALUE_CLASS && currentMethod != null && currentMethod.sym.name == names.vnew;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransValues.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,24 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n+ * @test \/nodynamiccopyright\/\n@@ -29,2 +6,2 @@\n- * @compile --source 16 ConsumeValueClassAtLowerLevel.java\n- * @run main ConsumeValueClassAtLowerLevel\n+ * @compile ConsumeValueClassAtLowerLevel.java\n+ * @compile\/fail\/ref=ConsumeValueClassAtLowerLevel.out --source 16 -XDrawDiagnostics ConsumeValueClassAtLowerLevel.java\n@@ -34,10 +11,4 @@\n-    public static void main(String [] args) {\n-\n-        \/* Attempting to instantiate a value\/primitive class in earlier source level should\n-         * result in an InstantiationError since javac's class reader downgrades\n-         * the value class to an identity class if current source level does not\n-         * support value\/primitive class. And so rather than invoke the factory method,\n-         * the source code of earlier vintage would attempt to invoke the constructor\n-         * and so should crash and burn with an InstantiationError.\n-         *\n-         * This behavior is subject to change - see JDK-8282525\n+    void m() {\n+        \/* GenericPoint was compiled with a source that allows value classes but ConsumeValueClassAtLowerLevel was not\n+         * so GenericPoint has a <vnew> initializer but in a source that doesn't allow value classes we look for <ini>\n+         * thus the compiler error in the second compilation of ConsumeValueClassAtLowerLevel.java\n@@ -45,9 +16,1 @@\n-        boolean gotIE = false;\n-        try {\n-            GenericPoint<Integer> gl = new GenericPoint<>(0, 0);\n-        } catch (java.lang.InstantiationError ie) {\n-            gotIE = true;\n-        }\n-        if (!gotIE) {\n-            throw new AssertionError(\"Did not see instantiation error!\");\n-        }\n+        GenericPoint<Integer> gl = new GenericPoint<>(0, 0);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConsumeValueClassAtLowerLevel.java","additions":8,"deletions":45,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+- compiler.warn.source.no.system.modules.path: 16\n+ConsumeValueClassAtLowerLevel.java:16:36: compiler.err.cant.resolve.location.args: kindname.constructor, GenericPoint, , int,int, (compiler.misc.location: kindname.class, GenericPoint<T>, null)\n+1 error\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConsumeValueClassAtLowerLevel.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -67,1 +67,1 @@\n-         \"4: invokestatic  #10                 \/\/ Method \\\"<init>\\\":(II)LValueCreationTest$Point;\",\n+         \"4: invokestatic  #10                 \/\/ Method \\\"<vnew>\\\":(II)LValueCreationTest$Point;\",\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueCreationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}