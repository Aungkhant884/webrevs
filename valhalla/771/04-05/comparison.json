{"files":[{"patch":"@@ -46,0 +46,5 @@\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Fieldref_info;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Methodref_info;\n@@ -47,0 +52,3 @@\n+import com.sun.tools.classfile.Instruction;\n+import com.sun.tools.classfile.Method;\n+\n@@ -742,0 +750,100 @@\n+\n+    public void testCheckVnew() throws Exception {\n+        for (String source : List.of(\n+                \"\"\"\n+                abstract value class A {}\n+                \"\"\",\n+                \"\"\"\n+                value class A {}\n+                \"\"\"\n+        )) {\n+            File dir = assertOK(true, source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                ClassFile classFile = ClassFile.read(fileEntry);\n+                boolean isAbstract = classFile.access_flags.is(Flags.ABSTRACT);\n+                for (Method method : classFile.methods) {\n+                    if (isAbstract) {\n+                        assertTrue(method.getName(classFile.constant_pool).equals(\"<init>\"));\n+                        assertTrue(!method.access_flags.is(Flags.STATIC));\n+                    } else {\n+                        assertTrue(method.getName(classFile.constant_pool).equals(\"<vnew>\"));\n+                        assertTrue(method.access_flags.is(Flags.STATIC));\n+                        assertTrue(!method.access_flags.is(Flags.ABSTRACT));\n+                        assertTrue(method.descriptor.getReturnType(classFile.constant_pool).equals(\"A\"));\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (String source : List.of(\n+                \"\"\"\n+                value class A {\n+                    void FIND_ME() {\n+                        A a = new A();\n+                    }\n+                }\n+                \"\"\"\n+        )) {\n+            File dir = assertOK(true, source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                ClassFile classFile = ClassFile.read(fileEntry);\n+                for (Method method : classFile.methods) {\n+                    if (method.getName(classFile.constant_pool).equals(\"FIND_ME\")) {\n+                        Code_attribute code_attribute = (Code_attribute)method.attributes.get(\"Code\");\n+                        boolean firstInst = true;\n+                        for (Instruction inst: code_attribute.getInstructions()) {\n+                            if (firstInst) {\n+                                assertTrue(inst.getMnemonic().equals(\"invokestatic\"));\n+                                CONSTANT_Methodref_info methodInfo =\n+                                        (CONSTANT_Methodref_info)classFile.constant_pool.get(inst.getUnsignedShort(1));\n+                                assertTrue(methodInfo.getClassInfo().getName().equals(\"A\"));\n+                                assertTrue(methodInfo.getNameAndTypeInfo().getName().equals(\"<vnew>\"));\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        \/\/ checking the aconst_init and withfield instructions\n+        for (String source : List.of(\n+                \"\"\"\n+                value class A {\n+                    int i;\n+                    String s;\n+\n+                    A(int i, String s) {\n+                        this.i = i;\n+                        this.s = s;\n+                    }\n+                }\n+                \"\"\"\n+        )) {\n+            File dir = assertOK(true, source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                ClassFile classFile = ClassFile.read(fileEntry);\n+                for (Method method : classFile.methods) {\n+                    if (method.getName(classFile.constant_pool).equals(\"<vnew>\")) {\n+                        Code_attribute code_attribute = (Code_attribute)method.attributes.get(\"Code\");\n+                        for (Instruction inst: code_attribute.getInstructions()) {\n+                            if (inst.getMnemonic().equals(\"aconst_init\")) {\n+                                CONSTANT_Class_info classInfo =\n+                                        (CONSTANT_Class_info)classFile.constant_pool.get(inst.getUnsignedShort(1));\n+                                assertTrue(classInfo.getName().equals(\"A\"));\n+                            } else if (inst.getMnemonic().equals(\"withfield\")) {\n+                                CONSTANT_Fieldref_info fieldInfo = (CONSTANT_Fieldref_info)classFile.constant_pool.get(inst.getUnsignedShort(1));\n+                                assertTrue(fieldInfo.getClassName().equals(\"A\"));\n+                                ConstantPool.CONSTANT_NameAndType_info nameAndType = fieldInfo.getNameAndTypeInfo();\n+                                if (nameAndType.getName().equals(\"i\")) {\n+                                    assertTrue(nameAndType.getType().equals(\"I\"));\n+                                } else if (nameAndType.getName().equals(\"s\")) {\n+                                    assertTrue(nameAndType.getType().equals(\"Ljava\/lang\/String;\"));\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"modified"}]}