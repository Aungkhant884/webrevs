{"files":[{"patch":"@@ -2440,0 +2440,3 @@\n+            if (tboth->is_inlinetypeptr()) {\n+              ccast = InlineTypeNode::make_from_oop(this, ccast, tboth->exact_klass(true)->as_inline_klass());\n+            }\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -431,0 +431,5 @@\n+    public static final String INLINE_TYPE = PREFIX + \"INLINE_TYPE\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(INLINE_TYPE, \"InlineType\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.internal.misc.Unsafe;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @summary Missing InlineTypeNode re-materialization during type sharpening.\n+ * @library \/test\/lib \/\n+ * @compile --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED TestValueRematDuringTypeSharpening.java\n+ * @run main\/othervm\/timeout=300 --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED compiler.valhalla.inlinetypes.TestValueRematDuringTypeSharpening\n+ *\/\n+\n+abstract class topValue {\n+}\n+\n+value class dummyValue1 extends topValue {\n+   int field;\n+   public dummyValue1(int val) {\n+      field = val;\n+   }\n+}\n+\n+value class dummyValue2 extends topValue {\n+   int field;\n+   public dummyValue2(int val) {\n+      field = val;\n+   }\n+}\n+\n+public class TestValueRematDuringTypeSharpening {\n+\n+   public static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+   @DontInline\n+   public static int getUnsafeFieldValue(topValue obj, int incr) {\n+       return UNSAFE.getInt(obj, 12) + incr;\n+   }\n+\n+   @Test\n+   @IR(phase = {CompilePhase.AFTER_PARSING}, counts = {IRNode.INLINE_TYPE, \" > 0 \"})\n+   public static int test(topValue obj) {\n+       int val = 0;\n+       if (obj.getClass() != dummyValue1.class) {\n+           val += 10;\n+       } else if (obj.getClass() != dummyValue2.class) {\n+           val += 20;\n+       }\n+       return getUnsafeFieldValue(obj, val);\n+   }\n+\n+   @Run(test = {\"test\"}, mode = RunMode.NORMAL)\n+   public static void kernel() {\n+       test(new dummyValue1(10));\n+       test(new dummyValue2(20));\n+   }\n+\n+   public static void main(String [] args) {\n+       TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+       System.out.println(\"PASS\");\n+   }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueRematDuringTypeSharpening.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}