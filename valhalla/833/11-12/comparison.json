{"files":[{"patch":"@@ -68,0 +68,1 @@\n+  int elem_word_count() const               { return type2size[basic_type()]; }\n@@ -70,2 +71,2 @@\n-  bool is_one_word() const                  { return size() == 1; }\n-  bool is_two_word() const                  { return size() == 2; }\n+  bool is_one_word() const                  { return type2size[basic_type()] == 1; }\n+  bool is_two_word() const                  { return type2size[basic_type()] == 2; }\n","filename":"src\/hotspot\/share\/ci\/ciType.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1070,1 +1070,3 @@\n-      int      size  = field->type()->size();\n+      int size = field->is_multifield_base() ?\n+                   (InlineTypeNode::is_multifield_scalarized(field) ? field->type()->elem_word_count() : 1)\n+                   : field->type()->size();\n@@ -1112,1 +1114,3 @@\n-    int      size  = field->type()->size() \/ field->type()->bundle_size();\n+    int size = field->is_multifield_base() ?\n+                 (InlineTypeNode::is_multifield_scalarized(field) ? field->type()->elem_word_count() : 1)\n+                   : field->type()->size();\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,13 @@\n-void InlineTypeNode::expand_input_edges(ciInlineKlass * vk) {\n+bool InlineTypeNode::is_multifield_scalarized(ciField* field) {\n+  int field_count = field->secondary_fields_count();\n+  BasicType bt = field->type()->basic_type();\n+  if (field_count > 1 &&\n+      (!Matcher::match_rule_supported_vector(Op_LoadVector, field_count, bt) ||\n+       !Matcher::match_rule_supported_vector(Op_StoreVector, field_count, bt) ||\n+       !Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), field_count, bt))) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n+void InlineTypeNode::expand_input_edges(ciInlineKlass* vk) {\n@@ -55,1 +67,1 @@\n-  for(int i = 0; i < vk->nof_declared_nonstatic_fields(); i++) {\n+  for (int i = 0; i < vk->nof_declared_nonstatic_fields(); i++) {\n@@ -57,6 +69,2 @@\n-    int field_count = field->secondary_fields_count();\n-    BasicType bt = field->type()->basic_type();\n-    if (field_count > 1 &&\n-        (!Matcher::match_rule_supported_vector(Op_LoadVector, field_count, bt) ||\n-        !Matcher::match_rule_supported_vector(Op_StoreVector, field_count, bt) ||\n-        !Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), field_count, bt))) {\n+    if (is_multifield_scalarized(field)) {\n+      int field_count = field->secondary_fields_count();\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+\n+\n@@ -91,0 +93,2 @@\n+  static bool is_multifield_scalarized(ciField* field);\n+\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2280,1 +2280,1 @@\n- }\n+  }\n@@ -2331,1 +2331,4 @@\n-        if (field != NULL) {\n+        \/\/ Skip over direct field access for VectorPayloadMF* class instancs since\n+        \/\/ multifield is loaded into vector, alternatively we can create a lane\n+        \/\/ extraction logic.\n+        if (field != NULL && !VectorSupport::is_vector_payload_mf(vk)) {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-        return vspecies().dummyVector().shuffleFromBytes(reorder);\n+        return vspecies().dummyVectorMF().shuffleFromBytes(reorder);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractShuffle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-        return dummyVector()\n+        return dummyVectorMF()\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractSpecies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}