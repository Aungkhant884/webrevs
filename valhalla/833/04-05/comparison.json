{"files":[{"patch":"@@ -214,1 +214,1 @@\n-    _type = ciType::make(field_type, _secondary_fields_count);\n+    _type = ciType::make(field_type, fd->secondary_fields_count(fd->index()));\n@@ -247,2 +247,0 @@\n-  _secondary_fields_count = field->_secondary_fields_count;\n-\n@@ -304,1 +302,0 @@\n-  _secondary_fields_count = fd->secondary_fields_count(fd->index());\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-  int              _secondary_fields_count;\n@@ -115,1 +114,1 @@\n-  int secondary_fields_count() { return _secondary_fields_count; } const\n+  int secondary_fields_count() { return type()->bundle_size(); } const\n@@ -192,1 +191,0 @@\n-  bool is_multifield           () const { return _is_multifield; }\n@@ -213,1 +211,1 @@\n-  GrowableArray<ciField*>*   _secondary_fields;\n+  GrowableArray<ciField*>* _secondary_fields;\n","filename":"src\/hotspot\/share\/ci\/ciField.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"ci\/ciField.hpp\"\n@@ -34,1 +35,0 @@\n-#include \"ci\/ciField.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -490,3 +490,0 @@\n-      if (ary_type != NULL) {\n-        decorators |= IS_ARRAY;\n-      }\n@@ -497,0 +494,1 @@\n+        assert(value->bottom_type()->is_vect()->length() == (uint)vec_len, \"\");\n@@ -500,0 +498,3 @@\n+        if (ary_type != NULL) {\n+          decorators |= IS_ARRAY;\n+        }\n@@ -765,0 +766,1 @@\n+  BasicType bt = field_type->basic_type();\n@@ -766,4 +768,3 @@\n-  if (field_type->bundle_size() > 1)  {\n-    int vec_len = field_type->bundle_size();\n-    BasicType bt = field_type->basic_type();\n-    if (Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vec_len, bt)) {\n+  int vec_len = field_type->bundle_size();\n+  if (vec_len > 1 &&\n+      Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vec_len, bt)) {\n@@ -771,3 +772,0 @@\n-    } else {\n-      \/\/ scalar default value to match the bundle size will be returned in subsiquent calls to default_value.\n-    }\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-    Node* alloc_oop  = kit.new_instance(klass_node, NULL, NULL, \/* deoptimize_on_exception *\/ true, vec_box);\n+    Node* alloc_oop  = kit.new_instance(klass_node, NULL, NULL, \/* deoptimize_on_exception *\/ true);\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1395,1 +1395,1 @@\n-      if (!fs.access_flags().is_static() && !fs.is_multifield() && (!skip_internal || !fs.access_flags().is_internal())) {\n+      if (!fs.access_flags().is_static() && (!skip_internal || !fs.access_flags().is_internal())) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}