{"files":[{"patch":"@@ -1182,4 +1182,1 @@\n-#ifndef _LP64\n-    super_call_VM_leaf(StubRoutines::load_inline_type_fields_in_regs());\n-#else\n-    \/\/ Load fields from a buffered value with an inline class specific handler\n+    \/\/ Skip scalarization for vector value objects (concrete vectors and payloads).\n@@ -1188,2 +1185,1 @@\n-    \/\/ Skip scalarization for vector value objects (concrete vectors and payloads).\n-    super_call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::is_vector_value_instance), rdi);\n+    super_call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::skip_value_scalarization), rdi);\n@@ -1193,0 +1189,5 @@\n+\n+#ifndef _LP64\n+    super_call_VM_leaf(StubRoutines::load_inline_type_fields_in_regs());\n+#else\n+    \/\/ Load fields from a buffered value with an inline class specific handler\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  GUARDED_VM_ENTRY(return !VectorSupport::skip_value_scalarization(const_cast<ciInlineKlass*>(this)) && to_InlineKlass()->can_be_passed_as_fields();)\n+  GUARDED_VM_ENTRY(return to_InlineKlass()->can_be_passed_as_fields();)\n@@ -100,1 +100,1 @@\n-  GUARDED_VM_ENTRY(return !VectorSupport::skip_value_scalarization(const_cast<ciInlineKlass*>(this)) && to_InlineKlass()->can_be_returned_as_fields();)\n+  GUARDED_VM_ENTRY(return to_InlineKlass()->can_be_returned_as_fields();)\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2759,4 +2759,0 @@\n-  \/\/ Now that all inlining is over and no PhaseRemoveUseless will run, cut edge from root to loop\n-  \/\/ safepoints\n-  remove_root_to_sfpts_edges(igvn);\n-\n@@ -2776,0 +2772,3 @@\n+  \/\/ Now that all inlining is over and no PhaseRemoveUseless will run, cut edge from root to loop\n+  \/\/ safepoints\n+  remove_root_to_sfpts_edges(igvn);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -507,1 +507,0 @@\n-      const TypeAryPtr* ary_type = kit->gvn().type(base)->isa_aryptr();\n@@ -516,0 +515,1 @@\n+        const TypeAryPtr* ary_type = kit->gvn().type(base)->isa_aryptr();\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2334,1 +2334,1 @@\n-        if (field != NULL && !VectorSupport::is_vector_payload_mf(vk)) {\n+        if (field != NULL && !VectorSupport::is_vector_payload_mf(vk->get_InlineKlass())) {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -924,1 +924,1 @@\n-    if (res->isa_InlineType() && VectorSupport::skip_value_scalarization(res->as_InlineType()->inline_klass())) {\n+    if (res->isa_InlineType() && VectorSupport::skip_value_scalarization(res->as_InlineType()->inline_klass()->get_InlineKlass())) {\n@@ -2360,1 +2360,1 @@\n-      if (VectorSupport::skip_value_scalarization(value->as_InlineType()->inline_klass())) {\n+      if (VectorSupport::skip_value_scalarization(value->as_InlineType()->inline_klass()->get_InlineKlass())) {\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,5 @@\n-  return VectorSupport::is_vector(klass);\n+  return klass->is_subclass_of(ciEnv::current()->vector_Vector_klass());\n+}\n+\n+static bool is_vector_payload_mf(ciKlass* klass) {\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayloadMF_klass());\n@@ -41,1 +45,1 @@\n-  return VectorSupport::is_vector_mask(klass);\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorMask_klass());\n@@ -45,1 +49,1 @@\n-  return VectorSupport::is_vector_shuffle(klass);\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n@@ -319,1 +323,1 @@\n-    Node* result = expand_vbox_node_helper(vec_box, vbox, vect, vec_box->box_type(), vec_box->vec_type());\n+    Node* result = expand_vbox_node_helper(vbox, vect, vec_box->box_type(), vec_box->vec_type());\n@@ -326,2 +330,1 @@\n-Node* PhaseVector::expand_vbox_node_helper(Node* vec_box,\n-                                           Node* vbox,\n+Node* PhaseVector::expand_vbox_node_helper(Node* vbox,\n@@ -335,1 +338,1 @@\n-      Node* new_box = expand_vbox_node_helper(vec_box, vbox->in(i), vect->in(i), box_type, vect_type);\n+      Node* new_box = expand_vbox_node_helper(vbox->in(i), vect->in(i), box_type, vect_type);\n@@ -350,1 +353,1 @@\n-      Node* new_box = expand_vbox_node_helper(vec_box, vbox->in(i), vect, box_type, vect_type);\n+      Node* new_box = expand_vbox_node_helper(vbox->in(i), vect, box_type, vect_type);\n@@ -383,1 +386,1 @@\n-  assert(VectorSupport::is_vector(box_klass), \"\");\n+  assert(is_vector(box_klass), \"\");\n@@ -388,1 +391,1 @@\n-    assert(VectorSupport::is_vector_payload_mf(payload_klass), \"\");\n+    assert(is_vector_payload_mf(payload_klass), \"\");\n@@ -518,35 +521,1 @@\n-\n-    if (vec_val_load == NULL) {\n-      Node* obj = vec_unbox->obj();\n-      const TypeInstPtr* tinst = gvn.type(obj)->isa_instptr();\n-      assert(VectorSupport::is_vector(tinst->instance_klass()), \"\");\n-      ciInlineKlass* box_klass = static_cast<ciInlineKlass*>(tinst->instance_klass());\n-\n-      const TypeVect* vt = vec_unbox->bottom_type()->is_vect();\n-      BasicType bt = vt->element_basic_type();\n-      int num_elem = vt->length();\n-\n-      assert(VectorSupport::is_vector(box_klass), \"\");\n-      ciField* payload_field = box_klass->declared_nonstatic_field_at(0);\n-      int offset = payload_field->offset();\n-      if (!payload_field->is_flattened()) {\n-        ciInlineKlass* payload_klass = static_cast<ciInlineKlass*>(payload_field->type());\n-        assert(VectorSupport::is_vector_payload_mf(payload_klass), \"\");\n-        ciField* mutifield = payload_klass->declared_nonstatic_field_at(0);\n-        offset += mutifield->offset();\n-      }\n-\n-      Node* mem = vec_unbox->mem();\n-      Node* ctrl = vec_unbox->in(0);\n-      Node* vec_adr = gvn.transform(kit.basic_plus_adr(obj, offset));\n-      const TypePtr *adr_type = gvn.type(vec_adr)->isa_ptr();\n-\n-      vec_val_load = LoadVectorNode::make(0,\n-                                          ctrl,\n-                                          mem,\n-                                          vec_adr,\n-                                          adr_type,\n-                                          num_elem,\n-                                          bt);\n-      vec_val_load = gvn.transform(vec_val_load);\n-    }\n+    assert (vec_val_load != NULL, \"\");\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":14,"deletions":45,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"ci\/ciKlass.hpp\"\n@@ -39,2 +40,1 @@\n-  Node* expand_vbox_node_helper(Node* vbox,\n-                                Node* vbox_alloc,\n+  Node* expand_vbox_node_helper(Node* vbox_alloc,\n","filename":"src\/hotspot\/share\/opto\/vector.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,3 +34,11 @@\n-static bool is_vector(ciKlass* kls) { return VectorSupport::is_vector(kls); }\n-static bool is_vector_mask(ciKlass* kls) { return VectorSupport::is_vector_mask(kls); }\n-static bool is_vector_shuffle(ciKlass* kls) { return VectorSupport::is_vector_shuffle(kls); }\n+static bool is_vector(ciKlass* klass) {\n+  return klass->is_subclass_of(ciEnv::current()->vector_Vector_klass());\n+}\n+\n+static bool is_vector_mask(ciKlass* klass) {\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorMask_klass());\n+}\n+\n+static bool is_vector_shuffle(ciKlass* klass) {\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n+}\n@@ -43,1 +51,1 @@\n-  assert(VectorSupport::is_vector(ik), \"not a vector\");\n+  assert(is_vector(ik), \"not a vector\");\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1636,0 +1636,1 @@\n+  assert(n->is_InlineType(), \"\");\n@@ -1642,3 +1643,2 @@\n-  if (n->is_InlineType() &&\n-      !n->is_VectorBox() &&\n-      VectorSupport::is_vector(n->as_InlineType()->inline_klass())) {\n+  if (!n->is_VectorBox() &&\n+      VectorSupport::is_vector(n->as_InlineType()->inline_klass()->get_InlineKlass())) {\n@@ -1698,1 +1698,1 @@\n-      VectorSupport::is_vector(n->as_InlineType()->inline_klass())) {\n+      VectorSupport::is_vector(n->as_InlineType()->inline_klass()->get_InlineKlass())) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,5 +71,0 @@\n-\n-bool VectorSupport::is_vector(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_Vector_klass());\n-}\n-\n@@ -80,4 +75,0 @@\n-bool VectorSupport::is_vector_payload_mf(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayloadMF_klass());\n-}\n-\n@@ -88,4 +79,0 @@\n-bool VectorSupport::is_vector_mask(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorMask_klass());\n-}\n-\n@@ -96,4 +83,0 @@\n-bool VectorSupport::is_vector_shuffle(ciKlass* klass) {\n-  return klass->is_subclass_of(ciEnv::current()->vector_VectorShuffle_klass());\n-}\n-\n@@ -104,4 +87,0 @@\n-bool VectorSupport::skip_value_scalarization(ciKlass* klass) {\n-  return VectorSupport::is_vector(klass) || VectorSupport::is_vector_payload_mf(klass);\n-}\n-\n@@ -402,1 +381,0 @@\n-  int elem_size = type2aelembytes(elem_bt);\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"ci\/ciKlass.hpp\"\n@@ -154,1 +153,0 @@\n-  static bool is_vector(ciKlass* klass);\n@@ -156,1 +154,0 @@\n-  static bool is_vector_payload_mf(ciKlass* klass);\n@@ -158,1 +155,0 @@\n-  static bool is_vector_mask(ciKlass* klass);\n@@ -160,2 +156,0 @@\n-  static bool is_vector_shuffle(ciKlass* klass);\n-  static bool skip_value_scalarization(ciKlass* klass);\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -641,1 +641,1 @@\n-JRT_LEAF(jint, SharedRuntime::is_vector_value_instance(InlineKlass* klass))\n+JRT_LEAF(jint, SharedRuntime::skip_value_scalarization(InlineKlass* klass))\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-  static int is_vector_value_instance(InlineKlass* klass);\n+  static int skip_value_scalarization(InlineKlass* klass);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF128B.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128B.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF128B payload;\n+    private final VectorPayloadMF128B payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF128B)value;\n+        this.payload = (VectorPayloadMF128B)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF256B.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256B.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF256B payload;\n+    private final VectorPayloadMF256B payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF256B)value;\n+        this.payload = (VectorPayloadMF256B)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF512B.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512B.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF512B payload;\n+    private final VectorPayloadMF512B payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF512B)value;\n+        this.payload = (VectorPayloadMF512B)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF64B.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64B.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF64B payload;\n+    private final VectorPayloadMF64B payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF64B)value;\n+        this.payload = (VectorPayloadMF64B)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF128D.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128D.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF128D payload;\n+    private final VectorPayloadMF128D payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF128D)value;\n+        this.payload = (VectorPayloadMF128D)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF256D.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256D.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF256D payload;\n+    private final VectorPayloadMF256D payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF256D)value;\n+        this.payload = (VectorPayloadMF256D)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF512D.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512D.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF512D payload;\n+    private final VectorPayloadMF512D payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF512D)value;\n+        this.payload = (VectorPayloadMF512D)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF64D.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64D.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF64D payload;\n+    private final VectorPayloadMF64D payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF64D)value;\n+        this.payload = (VectorPayloadMF64D)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF128F.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128F.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF128F payload;\n+    private final VectorPayloadMF128F payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF128F)value;\n+        this.payload = (VectorPayloadMF128F)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF256F.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256F.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF256F payload;\n+    private final VectorPayloadMF256F payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF256F)value;\n+        this.payload = (VectorPayloadMF256F)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF512F.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512F.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF512F payload;\n+    private final VectorPayloadMF512F payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF512F)value;\n+        this.payload = (VectorPayloadMF512F)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF64F.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64F.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF64F payload;\n+    private final VectorPayloadMF64F payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF64F)value;\n+        this.payload = (VectorPayloadMF64F)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF128I.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128I.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF128I payload;\n+    private final VectorPayloadMF128I payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF128I)value;\n+        this.payload = (VectorPayloadMF128I)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF256I.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256I.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF256I payload;\n+    private final VectorPayloadMF256I payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF256I)value;\n+        this.payload = (VectorPayloadMF256I)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF512I.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512I.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF512I payload;\n+    private final VectorPayloadMF512I payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF512I)value;\n+        this.payload = (VectorPayloadMF512I)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF64I.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64I.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF64I payload;\n+    private final VectorPayloadMF64I payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF64I)value;\n+        this.payload = (VectorPayloadMF64I)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF128L.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128L.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF128L payload;\n+    private final VectorPayloadMF128L payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF128L)value;\n+        this.payload = (VectorPayloadMF128L)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF256L.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256L.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF256L payload;\n+    private final VectorPayloadMF256L payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF256L)value;\n+        this.payload = (VectorPayloadMF256L)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF512L.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512L.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF512L payload;\n+    private final VectorPayloadMF512L payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF512L)value;\n+        this.payload = (VectorPayloadMF512L)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF64L.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64L.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF64L payload;\n+    private final VectorPayloadMF64L payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF64L)value;\n+        this.payload = (VectorPayloadMF64L)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF128S.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF128S.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF128S payload;\n+    private final VectorPayloadMF128S payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF128S)value;\n+        this.payload = (VectorPayloadMF128S)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF256S.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF256S.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF256S payload;\n+    private final VectorPayloadMF256S payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF256S)value;\n+        this.payload = (VectorPayloadMF256S)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF512S.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF512S.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF512S payload;\n+    private final VectorPayloadMF512S payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF512S)value;\n+        this.payload = (VectorPayloadMF512S)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF64S.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF64S.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF64S payload;\n+    private final VectorPayloadMF64S payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF64S)value;\n+        this.payload = (VectorPayloadMF64S)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorSupport.VectorPayloadMF$bits$$Boxinitials$.class);\n+    static final long MFOFFSET = VectorPayloadMF.multiFieldOffset(VectorPayloadMF$bits$$Boxinitials$.class);\n@@ -60,1 +60,1 @@\n-    private final VectorSupport.VectorPayloadMF$bits$$Boxinitials$ payload;\n+    private final VectorPayloadMF$bits$$Boxinitials$ payload;\n@@ -63,1 +63,1 @@\n-        this.payload = (VectorSupport.VectorPayloadMF$bits$$Boxinitials$)value;\n+        this.payload = (VectorPayloadMF$bits$$Boxinitials$)value;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}