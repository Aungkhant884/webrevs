{"files":[{"patch":"@@ -865,1 +865,5 @@\n-      k = k->array_klass_or_null(ndims);\n+      if (class_name->is_Q_array_signature()) {\n+        k = InlineKlass::cast(k)->null_free_inline_array_klass_or_null(ndims);\n+      } else {\n+        k = k->array_klass_or_null(ndims);\n+      }\n@@ -1888,1 +1892,5 @@\n-      klass = klass->array_klass_or_null(ndims);\n+      if (class_name->is_Q_array_signature()) {\n+        klass = InlineKlass::cast(klass)->null_free_inline_array_klass_or_null(ndims);\n+      } else {\n+        klass = klass->array_klass_or_null(ndims);\n+      }\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-    super_klass = element_super->array_klass_or_null();\n+    super_klass = element_klass->array_klass_or_null();\n@@ -122,1 +122,1 @@\n-        super_klass = element_super->array_klass(CHECK_NULL);\n+        super_klass = element_klass->array_klass(CHECK_NULL);\n@@ -412,0 +412,1 @@\n+  assert(elem_supers->length() > 0, \"Must at least include the PrimitiveObject interface\");\n@@ -414,16 +415,10 @@\n-  if (num_secondaries == 2) {\n-    \/\/ Must share this for correct bootstrapping!\n-    set_secondary_supers(Universe::the_array_interfaces_array());\n-    return NULL;\n-  } else {\n-    GrowableArray<Klass*>* secondaries = new GrowableArray<Klass*>(num_elem_supers+3);\n-    secondaries->push(vmClasses::Cloneable_klass());\n-    secondaries->push(vmClasses::Serializable_klass());\n-    secondaries->push(vmClasses::IdentityObject_klass());\n-    for (int i = 0; i < num_elem_supers; i++) {\n-      Klass* elem_super = (Klass*) elem_supers->at(i);\n-      Klass* array_super = elem_super->array_klass_or_null();\n-      assert(array_super != NULL, \"must already have been created\");\n-      secondaries->push(array_super);\n-    }\n-    return secondaries;\n+  GrowableArray<Klass*>* secondaries = new GrowableArray<Klass*>(num_elem_supers+4);\n+\n+  secondaries->push(vmClasses::Cloneable_klass());\n+  secondaries->push(vmClasses::Serializable_klass());\n+  secondaries->push(vmClasses::IdentityObject_klass());\n+  for (int i = 0; i < num_elem_supers; i++) {\n+    Klass* elem_super = (Klass*) elem_supers->at(i);\n+    Klass* array_super = elem_super->array_klass_or_null();\n+    assert(array_super != NULL, \"must already have been created\");\n+    secondaries->push(array_super);\n@@ -431,0 +426,1 @@\n+  return secondaries;\n","filename":"src\/hotspot\/share\/oops\/flatArrayKlass.cpp","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -71,1 +71,5 @@\n-      super_klass = element_super->array_klass_or_null();\n+      if (null_free) {\n+        super_klass = element_klass->array_klass_or_null();\n+      } else {\n+        super_klass = element_super->array_klass_or_null();\n+      }\n@@ -83,0 +87,5 @@\n+      if (null_free) {\n+        if (element_klass->array_klass_or_null() == NULL) {\n+          supers_exist = false;\n+        }\n+      }\n@@ -88,1 +97,5 @@\n-          super_klass = element_super->array_klass(CHECK_NULL);\n+          if (null_free) {\n+            element_klass->array_klass(CHECK_NULL);\n+          } else {\n+            element_super->array_klass(CHECK_NULL);\n+          }\n@@ -134,0 +147,2 @@\n+  assert(!null_free || name->is_Q_array_signature(), \"sanity check\");\n+\n@@ -188,1 +203,1 @@\n-    if (name()->is_Q_array_signature()) {\n+    if (name()->char_at(1) != JVM_SIGNATURE_ARRAY &&  name()->is_Q_array_signature()) {\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        String arrayClsName = \"[Lruntime.valhalla.inlinetypes.Point$ref;\";\n+        String arrayClsName = \"[Lruntime.valhalla.inlinetypes.Point;\";\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}