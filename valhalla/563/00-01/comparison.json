{"files":[{"patch":"@@ -1916,1 +1916,1 @@\n-InlineTypeBaseNode* PhiNode::push_inline_types_through(PhaseGVN* phase, bool can_reshape, ciInlineKlass* vk, bool not_null) {\n+InlineTypeBaseNode* PhiNode::push_inline_types_through(PhaseGVN* phase, bool can_reshape, ciInlineKlass* vk, bool is_init) {\n@@ -1919,1 +1919,1 @@\n-    vt = InlineTypePtrNode::make_null(*phase, vk)->clone_with_phis(phase, in(0), not_null);\n+    vt = InlineTypePtrNode::make_null(*phase, vk)->clone_with_phis(phase, in(0), is_init);\n@@ -1921,1 +1921,1 @@\n-    vt = InlineTypeNode::make_null(*phase, vk)->clone_with_phis(phase, in(0), not_null);\n+    vt = InlineTypeNode::make_null(*phase, vk)->clone_with_phis(phase, in(0), is_init);\n@@ -1944,1 +1944,1 @@\n-      other = phase->transform(n->as_Phi()->push_inline_types_through(phase, can_reshape, vk, not_null));\n+      other = phase->transform(n->as_Phi()->push_inline_types_through(phase, can_reshape, vk, is_init));\n@@ -2512,1 +2512,2 @@\n-    bool not_null = true;\n+    \/\/ true if all IsInit inputs of all InlineType* nodes are true\n+    bool is_init = true;\n@@ -2527,2 +2528,2 @@\n-          if (phase->type(n->as_InlineTypeBase()->get_oop())->maybe_null()) {\n-            not_null = false;\n+          if (phase->find_int_con(n->as_InlineTypeBase()->get_is_init(), 0) != 1) {\n+            is_init = false;\n@@ -2533,1 +2534,1 @@\n-          not_null = false;\n+          is_init = false;\n@@ -2540,2 +2541,2 @@\n-      assert(!_type->isa_ptr() || _type->maybe_null() || not_null, \"Phi not null but a null input was seen\");\n-      progress = push_inline_types_through(phase, can_reshape, vk, not_null);\n+\/\/      assert(!_type->isa_ptr() || _type->maybe_null() || is_init, \"Phi not null but a possible null was seen\");\n+      progress = push_inline_types_through(phase, can_reshape, vk, is_init);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-  InlineTypeBaseNode* push_inline_types_through(PhaseGVN* phase, bool can_reshape, ciInlineKlass* vk, bool not_null);\n+  InlineTypeBaseNode* push_inline_types_through(PhaseGVN* phase, bool can_reshape, ciInlineKlass* vk, bool is_init);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-InlineTypeBaseNode* InlineTypeBaseNode::clone_with_phis(PhaseGVN* gvn, Node* region, bool not_null) {\n+InlineTypeBaseNode* InlineTypeBaseNode::clone_with_phis(PhaseGVN* gvn, Node* region, bool is_init) {\n@@ -49,3 +49,0 @@\n-  if (not_null) {\n-    phi_type = phi_type->join_speculative(TypePtr::NOTNULL);\n-  }\n@@ -58,5 +55,10 @@\n-  phi_type = Type::get_const_basic_type(T_BOOLEAN);\n-  PhiNode* is_init = PhiNode::make(region, vt->get_is_init(), phi_type);\n-  gvn->set_type(is_init, phi_type);\n-  gvn->record_for_igvn(is_init);\n-  vt->set_req(IsInit, is_init);\n+  Node* is_init_node;\n+  if (is_init) {\n+    is_init_node = gvn->intcon(1);\n+  } else {\n+    phi_type = Type::get_const_basic_type(T_BOOLEAN);\n+    is_init_node = PhiNode::make(region, vt->get_is_init(), phi_type);\n+    gvn->set_type(is_init_node, phi_type);\n+    gvn->record_for_igvn(is_init_node);\n+  }\n+  vt->set_req(IsInit, is_init_node);\n@@ -127,4 +129,9 @@\n-  phi = get_is_init()->as_Phi();\n-  phi->set_req(pnum, other->get_is_init());\n-  if (transform) {\n-    set_req(IsInit, gvn->transform(phi));\n+  Node* is_init = get_is_init();\n+  if (is_init->is_Phi()) {\n+    phi = is_init->as_Phi();\n+    phi->set_req(pnum, other->get_is_init());\n+    if (transform) {\n+      set_req(IsInit, gvn->transform(phi));\n+    }\n+  } else {\n+    assert(is_init->find_int_con(0) == 1, \"only with a non null inline type\");\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":20,"deletions":13,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  InlineTypeBaseNode* clone_with_phis(PhaseGVN* gvn, Node* region, bool not_null = false);\n+  InlineTypeBaseNode* clone_with_phis(PhaseGVN* gvn, Node* region, bool is_init = false);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4123,2 +4123,0 @@\n-\/\/ TODO 8274972\n-\/*\n@@ -4146,1 +4144,0 @@\n-*\/\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}