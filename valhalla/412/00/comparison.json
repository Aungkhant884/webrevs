{"files":[{"patch":"@@ -1421,0 +1421,10 @@\n+  if (UseTypeRestrictions) {\n+    Label not_restricted;\n+    __ get_method(rscratch1);\n+    __ movzwl(rscratch1, Address(rscratch1, Method::flags_offset()));\n+    __ andl(rscratch1, Method::_type_restrictions);\n+    __ jcc(Assembler::zero, not_restricted);\n+    __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::restricted_parameter_checks));\n+    __ bind(not_restricted);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2731,1 +2731,1 @@\n-      __ andl(rscratch1, Method::_restricted_method);\n+      __ andl(rscratch1, Method::_type_restrictions);\n@@ -3325,10 +3325,11 @@\n-  Label notRestricted;\n-  __ movl(rdx, flags);\n-  __ shrl(rdx, ConstantPoolCacheEntry::has_restricted_type_shift);\n-  __ andl(rdx, 0x1);\n-  __ testl(rdx, rdx);\n-  __ jcc(Assembler::zero, notRestricted);\n-\n-  __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::check_restricted_type));\n-  __ get_cache_and_index_at_bcp(cache, index, 1);\n-  load_field_cp_cache_entry(obj, cache, index, off, flags, is_static);\n+  if (UseTypeRestrictions) {\n+    Label notRestricted;\n+    __ movl(rdx, flags);\n+    __ shrl(rdx, ConstantPoolCacheEntry::has_restricted_type_shift);\n+    __ andl(rdx, 0x1);\n+    __ testl(rdx, rdx);\n+    __ jcc(Assembler::zero, notRestricted);\n+\n+    __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::check_restricted_type));\n+    __ get_cache_and_index_at_bcp(cache, index, 1);\n+    load_field_cp_cache_entry(obj, cache, index, off, flags, is_static);\n@@ -3336,1 +3337,2 @@\n-  __ bind(notRestricted);\n+    __ bind(notRestricted);\n+  }\n@@ -3934,13 +3936,0 @@\n-void TemplateTable::restricted_method_check(Register method) {\n-    Label not_restricted;\n-  __ movptr(rscratch1, method);\n-  __ movzwl(rscratch1, Address(rscratch1, Method::flags_offset()));\n-  __ andl(rscratch1, Method::_restricted_method);\n-  __ jcc(Assembler::zero, not_restricted);\n-  __ restore_bcp();\n-  __ push(method);\n-  __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::restricted_parameter_checks));\n-  __ pop(method);\n-  __ bind(not_restricted);\n-}\n-\n@@ -4060,1 +4049,0 @@\n-  restricted_method_check(method);\n@@ -4075,1 +4063,0 @@\n-  restricted_method_check(method);\n@@ -4104,1 +4091,0 @@\n-  restricted_method_check(rbx);\n@@ -4115,1 +4101,0 @@\n-  restricted_method_check(rbx);\n@@ -4178,1 +4163,0 @@\n-  restricted_method_check(rbx);\n@@ -4230,2 +4214,0 @@\n-  restricted_method_check(rbx);\n-\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":14,"deletions":32,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-  static void restricted_method_check(Register method);\n-\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1659,0 +1659,9 @@\n+  if (UseTypeRestrictions) {\n+    if (method()->has_type_restrictions() && method()->restricted_return_value() != NULL) {\n+      CheckCast* c = new CheckCast(method()->restricted_return_value(), x, copy_state_before());\n+      append_split(c);\n+      c->set_incompatible_class_change_check();\n+      c->set_direct_compare(method()->restricted_return_value()->as_instance_klass()->is_final());\n+    }\n+  }\n+\n@@ -3054,0 +3063,1 @@\n+  bool insert_type_restriction_check = method()->has_type_restrictions() && bci == 0;\n@@ -3076,0 +3086,22 @@\n+    if (insert_type_restriction_check) {\n+      ciSignature* sig = method()->signature();\n+      int idx = method()->is_static() ? 0 : 1;\n+      for (int i = 0; i < sig->count(); i++) {\n+        if (method()->restricted_argument_at(i) != NULL) {\n+          ciKlass* restricted_type = method()->restricted_argument_at(i);\n+          CheckCast* c = new CheckCast(restricted_type, state()->local_at(idx), copy_state_before());\n+          append_split(c);\n+          c->set_incompatible_class_change_check();\n+          \/\/ restricted types must be primitive classes\n+          assert(restricted_type->as_instance_klass() != NULL, \"Sanity check\");\n+          assert(restricted_type->as_instance_klass()->is_final(), \"Sanity check\");\n+          c->set_direct_compare(true);\n+          \/\/ Updating argument information\n+          state()->store_local(idx, c);\n+        }\n+        ciType* type = sig->type_at(i);\n+        idx += type->size();\n+      }\n+      insert_type_restriction_check = false;\n+    }\n+\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -754,0 +754,1 @@\n+  virtual void set_declared_type(ciType* type)   { _declared_type = type; }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+  friend class SharedRuntime;\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+  _has_type_restrictions = h_m->has_type_restrictions();\n@@ -154,0 +155,18 @@\n+  if (_has_type_restrictions) {\n+    assert(signature()->count() == h_m()->restricted_num_param(), \"Must match\");\n+    int num_param = h_m()->restricted_num_param();\n+    Arena* arena = CURRENT_ENV->arena();\n+    _restricted_arguments = new (arena) GrowableArray<ciKlass*>(arena, num_param, num_param, NULL);\n+    for (int i = 0; i < num_param; i++) {\n+      if (h_m()->restricted_param_type_at(i) != NULL) {\n+        _restricted_arguments->at_put(i, CURRENT_ENV->get_metadata(h_m()->restricted_param_type_at(i))->as_klass());\n+      } else {\n+        _restricted_arguments->at_put(i, NULL);\n+      }\n+    }\n+    if (h_m()->restricted_return_value() != NULL) {\n+      _restricted_return_value = CURRENT_ENV->get_metadata(h_m()->restricted_return_value())->as_klass();\n+    } else {\n+      _restricted_return_value = NULL;\n+    }\n+  }\n@@ -189,0 +208,1 @@\n+  _has_type_restrictions = false;\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+  GrowableArray<ciKlass*>* _restricted_arguments;\n+  ciKlass*         _restricted_return_value;\n@@ -98,0 +100,1 @@\n+  bool _has_type_restrictions;\n@@ -348,0 +351,1 @@\n+  bool has_type_restrictions  () const           { return _has_type_restrictions; }\n@@ -384,0 +388,11 @@\n+\n+  \/\/ RestrictedMethod support\n+  int restricted_num_param() const {\n+    return _restricted_arguments->length();\n+  }\n+  ciKlass* restricted_argument_at(int index) const {\n+    return _restricted_arguments->at(index);\n+  }\n+  ciKlass* restricted_return_value() const {\n+    return _restricted_return_value;\n+  }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3200,1 +3200,1 @@\n-    m->set_restricted_method(true);\n+    m->set_has_type_restrictions(true);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,3 +539,1 @@\n-  Method* caller = last_frame.method();\n-  constantPoolHandle cph(THREAD, caller->constants());\n-  Method* callee = last_frame.cache_entry()->method_if_resolved(cph);\n+  Method* callee = last_frame.method();\n@@ -543,1 +541,1 @@\n-  if (callee->has_restricted_method()) {\n+  if (callee->has_type_restrictions()) {\n@@ -546,5 +544,2 @@\n-    ArgumentCount args(signature);\n-    int arg_count = args.size();\n-    ResourceArea *area = Thread::current()->resource_area();\n-    int* sizes = NEW_ARENA_ARRAY(area, int, arg_count);\n-    int i = 0;\n+    int arg_idx = 0;\n+    int local_idx = callee->is_static() ? 0 : 1;\n@@ -552,6 +547,1 @@\n-      sizes[i] = parameter_type_word_count(ss.type());\n-      i++;\n-    }\n-    int tos_idx = (int)last_frame.get_frame().interpreter_frame_expression_stack_size() - 3;\n-    for (int i = arg_count - 1; i >=0; --i) {\n-      Klass* k = callee->restricted_param_type_at(i);\n+      Klass* k = callee->restricted_param_type_at(arg_idx);\n@@ -559,1 +549,1 @@\n-        oop arg = *(oop*)last_frame.get_frame().interpreter_frame_expression_stack_at(tos_idx);\n+        oop arg = *(oop*)last_frame.get_frame().interpreter_frame_local_at(local_idx);\n@@ -564,1 +554,2 @@\n-      tos_idx -= sizes[i];\n+      local_idx += parameter_type_word_count(ss.type());\n+      arg_idx++;\n@@ -574,1 +565,1 @@\n-  if (method->constMethod()->has_restricted_method()) {\n+  if (method->constMethod()->has_type_restrictions()) {\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-  assert(has_restricted_method(), \"called only if method has a RestrictedMethod attribute\");\n+  assert(has_type_restrictions(), \"called only if method has a RestrictedMethod attribute\");\n@@ -193,1 +193,1 @@\n-  assert(has_restricted_method(), \"called only if method has a RestrictedMethod attribute\");\n+  assert(has_type_restrictions(), \"called only if method has a RestrictedMethod attribute\");\n@@ -198,1 +198,1 @@\n-  assert(has_restricted_method(), \"called only if method has a RestrictedMethod attribute\");\n+  assert(has_type_restrictions(), \"called only if method has a RestrictedMethod attribute\");\n@@ -205,1 +205,1 @@\n-  if (has_restricted_method()) {\n+  if (has_type_restrictions()) {\n@@ -217,1 +217,1 @@\n-    if (has_restricted_method()) {\n+    if (has_type_restrictions()) {\n@@ -235,1 +235,1 @@\n-      if (has_restricted_method()) {\n+      if (has_type_restrictions()) {\n@@ -257,1 +257,1 @@\n-        if (has_restricted_method()) {\n+        if (has_type_restrictions()) {\n@@ -284,1 +284,1 @@\n-          if (has_restricted_method()) {\n+          if (has_type_restrictions()) {\n@@ -322,1 +322,1 @@\n-    _flags |= _has_restricted_method;\n+    _flags |= _has_type_restrictions;\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-    _has_restricted_method = 0x800\n+    _has_type_restrictions = 0x800\n@@ -366,1 +366,1 @@\n-    assert(has_restricted_method(), \"\");\n+    assert(has_type_restrictions(), \"\");\n@@ -370,1 +370,1 @@\n-    assert(has_restricted_method(), \"\");\n+    assert(has_type_restrictions(), \"\");\n@@ -374,1 +374,1 @@\n-    assert(has_restricted_method(), \"\");\n+    assert(has_type_restrictions(), \"\");\n@@ -449,2 +449,2 @@\n-  bool has_restricted_method() const\n-    { return (_flags & _has_restricted_method) != 0; }\n+  bool has_type_restrictions() const\n+    { return (_flags & _has_type_restrictions) != 0; }\n","filename":"src\/hotspot\/share\/oops\/constMethod.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1037,1 +1037,1 @@\n-      if (m->constMethod()->has_restricted_method()) {\n+      if (m->constMethod()->has_type_restrictions()) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,0 +74,2 @@\n+ friend class SharedRuntime;\n+ friend class TemplateInterpreterGenerator;\n@@ -99,1 +101,1 @@\n-    _restricted_method     = 1 << 12\n+    _type_restrictions     = 1 << 12\n@@ -964,2 +966,2 @@\n-  void set_restricted_method(bool x) {\n-    _flags = x ? (_flags | _restricted_method) : ( _flags & ~_restricted_method);\n+  void set_has_type_restrictions(bool x) {\n+    _flags = x ? (_flags | _type_restrictions) : ( _flags & ~_type_restrictions);\n@@ -968,2 +970,2 @@\n-  bool has_restricted_method() const {\n-    return (_flags & _restricted_method) != 0;\n+  bool has_type_restrictions() const {\n+    return (_flags & _type_restrictions) != 0;\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1624,0 +1624,4 @@\n+  if (caller_is_c1 && callee_method()->has_type_restrictions()) {\n+    jint trap_request = Deoptimization::make_trap_request(Deoptimization::Reason_constraint, Deoptimization::Action_make_not_entrant);\n+    Runtime1::deoptimize(thread, trap_request);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1 -XX:+TraceDeoptimization runtime.valhalla.typerestrictions.RestrictedMethodTest\n@@ -49,0 +50,11 @@\n+  static class Unloaded {\n+    static public primitive class Complex {\n+      double real = 0;\n+            double imaginary = 0;\n+    }\n+\n+    void print(@RestrictedType(\"Qruntime\/valhalla\/typerestrictions\/RestrictedMethodTest$Unloaded$Complex;\") Object o) {\n+            System.out.println(\"print says \"+o);\n+    }\n+}\n+\n@@ -96,1 +108,1 @@\n-  public static void main(String[] args) {\n+  public static void test(int n) {\n@@ -183,0 +195,24 @@\n+    if (n != 0) {\n+      Unloaded ul = new Unloaded();\n+      Unloaded.Complex c = new Unloaded.Complex();\n+      result = null;\n+            ul.print(c);\n+      expectNoError(result);\n+            try {\n+                    ul.print(new String(\"string\"));\n+            } catch (Throwable t) {\n+                    result = t;\n+            }\n+      expectICC(result);\n+    }\n+  }\n+\n+  static public void main(String[] args) {\n+    for (int i = 0; i < 10; i++) {\n+      System.out.println(\"Iteration \"+i);\n+      test(0);\n+    }\n+    for (int i = 10; i < 20; i++) {\n+      System.out.println(\"Iteration \"+i);\n+      test(1);\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/TypeRestrictions\/RestrictedMethodTest.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"}]}