{"files":[{"patch":"@@ -143,2 +143,2 @@\n-     *  i.e one that simply returns (jlO) or merely chains to a super's\n-     *  EMPTYNOARGCONSTR\n+     *  i.e. one that simply returns (jlO) or merely chains to a super's\n+     *  no-arg ctor\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2383,1 +2383,1 @@\n-                                if (m.getParameters().size() > 0) {\n+                                if (m.getParameters().size() > 0 || (m.flags() & EMPTYNOARGCONSTR) == 0) {\n@@ -2385,4 +2385,0 @@\n-                                } else {\n-                                    if ((m.flags() & (GENERATEDCONSTR | EMPTYNOARGCONSTR)) == 0) {\n-                                        return true;\n-                                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-                            if ((m.flags() & (GENERATEDCONSTR | EMPTYNOARGCONSTR)) == 0) {\n+                            if ((m.flags() & EMPTYNOARGCONSTR) == 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-            if (tree.body.stats.size() == 0 || (m.flags() & GENERATEDCONSTR) != 0) {\n-                \/\/ generated constructors do have a super() call, but these are ignored for value classes.\n+            int statsSize = tree.body.stats.size();\n+            if (statsSize == 0) {\n@@ -237,0 +237,8 @@\n+            } else if (statsSize == 1 && TreeInfo.isSuperCall(tree.body.stats.head)) {\n+                JCExpressionStatement exec = (JCExpressionStatement) tree.body.stats.head;\n+                JCMethodInvocation meth = (JCMethodInvocation)exec.expr;\n+                if (meth.args.size() == 0) {\n+                    \/\/ Deem a constructor \"empty\" even if it contains a 'super' call,\n+                    \/\/ as long as it has no argument expressions (to respect common coding style).\n+                    m.flags_field |= EMPTYNOARGCONSTR;\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3,1 +3,0 @@\n-SuperclassConstraints.java:68:15: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassConstraints.SuperWithEmptyNoArgCtor_01(), SuperclassConstraints.I8, SuperclassConstraints.SuperWithEmptyNoArgCtor_01\n@@ -9,1 +8,1 @@\n-8 errors\n+7 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperclassConstraints.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        \/\/ Not ACC_PERMITS_VALUE as it defines a non empty constructor.\n+        \/\/ ACC_PERMITS_VALUE as its constructor is deemed empty due to mere vacuous chaining.\n@@ -90,1 +90,7 @@\n-\n+    static abstract class A10_Alt {\n+        \/\/ Not ACC_PERMITS_VALUE as it defines a non empty constructor.\n+        A10_Alt() {\n+            super();\n+            System.out.println(\"\");\n+        }\n+    }\n@@ -158,0 +164,3 @@\n+        if (!cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should be set!\");\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A10_Alt.class\"));\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PermitsValueTest.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}