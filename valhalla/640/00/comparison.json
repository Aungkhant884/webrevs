{"files":[{"patch":"@@ -205,3 +205,0 @@\n-    private static final int VALUE_CLASS     = 0x00000100;\n-    private static final int PERMITS_VALUE   = 0x00000040;\n-    private static final int PRIMITIVE_CLASS = 0x00000800;\n@@ -628,1 +625,1 @@\n-        return (this.getModifiers() & PRIMITIVE_CLASS) != 0;\n+        return (this.getModifiers() & Modifier.PRIMITIVE) != 0;\n@@ -639,1 +636,1 @@\n-        return (this.getModifiers() & VALUE_CLASS) != 0;\n+        return (this.getModifiers() & Modifier.VALUE) != 0;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * modifiers are represented as integers with distinct bit positions\n+ * modifiers are represented as integers with bit positions\n@@ -164,0 +164,1 @@\n+     * The {@code native} modifier only applies to modifiers of methods.\n@@ -200,0 +201,1 @@\n+     * The {@code strictfp} modifier only applies to modifiers of methods.\n@@ -254,2 +256,7 @@\n-        if ((mod & NATIVE) != 0)        sj.add(\"native\");\n-        if ((mod & STRICT) != 0)        sj.add(\"strictfp\");\n+        if ((mod & NATIVE) != 0)        sj.add(\"native\");   \/\/ ambiguous with value\n+        if ((mod & VALUE) == 0) {\n+            if ((mod & STRICT) != 0)    sj.add(\"strictfp\");\n+        } else {\n+            if ((mod & PRIMITIVE) != 0) sj.add(\"primitive\");\n+            else sj.add(\"value\");\n+        }\n@@ -322,1 +329,1 @@\n-     * modifier.\n+     * modifier when applied to the modifiers of a method.\n@@ -326,0 +333,6 @@\n+    \/**\n+     * The {@code int} value representing the {@code value}\n+     * modifier when applied to the modifiers of a class.\n+     *\/\n+    public static final int VALUE            = 0x00000100;\n+\n@@ -340,1 +353,1 @@\n-     * modifier.\n+     * modifier when applied to the modifiers of a method.\n@@ -344,0 +357,6 @@\n+    \/**\n+     * The {@code int} value representing the {@code primitive}\n+     * modifier when applied to the modifiers of a class.\n+     *\/\n+    public static final int PRIMITIVE        = 0x00000800;\n+\n@@ -377,3 +396,4 @@\n-        Modifier.PUBLIC         | Modifier.PROTECTED    | Modifier.PRIVATE |\n-        Modifier.ABSTRACT       | Modifier.STATIC       | Modifier.FINAL   |\n-        Modifier.STRICT         | Modifier.PERMITS_VALUE;\n+        Modifier.PUBLIC         | Modifier.PROTECTED     | Modifier.PRIVATE |\n+        Modifier.ABSTRACT       | Modifier.STATIC        | Modifier.FINAL   |\n+        \/\/ Modifier.STRICT is obsolete as a class modifier\n+        Modifier.VALUE          | Modifier.PERMITS_VALUE | Modifier.PRIMITIVE;\n@@ -387,1 +407,2 @@\n-        Modifier.ABSTRACT       | Modifier.STATIC       | Modifier.STRICT;\n+        \/\/ Modifier.STRICT is obsolete as a class modifier\n+        Modifier.ABSTRACT       | Modifier.STATIC;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":30,"deletions":9,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4394937 8051382\n+ * @bug 4394937 8051382 8281463\n@@ -28,0 +28,1 @@\n+ * @run testng toStringTest\n@@ -32,1 +33,3 @@\n-public class toStringTest {\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n@@ -34,5 +37,1 @@\n-    static void testString(int test, String expected) {\n-        if(!Modifier.toString(test).equals(expected))\n-            throw new RuntimeException(test +\n-                                          \" yields incorrect toString result\");\n-    }\n+public class toStringTest {\n@@ -40,2 +39,1 @@\n-    public static void main(String [] argv) {\n-        int allMods = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    static final int allMods = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n@@ -44,1 +42,3 @@\n-            Modifier.NATIVE | Modifier.STRICT | Modifier.INTERFACE;\n+            Modifier.NATIVE | Modifier.VALUE  | Modifier.PERMITS_VALUE | Modifier.PRIMITIVE | Modifier.INTERFACE;\n+    String allModsString = \"public protected private abstract static \" +\n+            \"final transient volatile synchronized native primitive interface\";\n@@ -46,2 +46,6 @@\n-        String allModsString = \"public protected private abstract static \" +\n-            \"final transient volatile synchronized native strictfp interface\";\n+    static final int  primitiveMods = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+            Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL |\n+            Modifier.TRANSIENT | Modifier.VOLATILE | Modifier.SYNCHRONIZED |\n+            Modifier.NATIVE | Modifier.VALUE  | Modifier.PERMITS_VALUE | Modifier.PRIMITIVE | Modifier.INTERFACE;\n+    String primitiveModsString = \"public protected private abstract static \" +\n+            \"final transient volatile synchronized native primitive interface\";\n@@ -49,2 +53,6 @@\n-        \/* zero should have an empty string *\/\n-        testString(0, \"\");\n+    static final int  valueMods = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+            Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL |\n+            Modifier.TRANSIENT | Modifier.VOLATILE | Modifier.SYNCHRONIZED |\n+            Modifier.NATIVE | Modifier.VALUE  | Modifier.PERMITS_VALUE | Modifier.INTERFACE;\n+    String valueModsString = \"public protected private abstract static \" +\n+            \"final transient volatile synchronized native value interface\";\n@@ -52,2 +60,10 @@\n-        \/* test to make sure all modifiers print out in the proper order *\/\n-        testString(allMods, allModsString);\n+    @DataProvider(name=\"Modifiers\")\n+    Object[][] modifiers() {\n+        return new Object[][] {\n+                {0, \"\"},\n+                {~0, allModsString},\n+                {allMods, allModsString},\n+                {primitiveMods, primitiveModsString},\n+                {valueMods, valueModsString},\n+        };\n+    }\n@@ -55,2 +71,4 @@\n-        \/* verify no extraneous modifiers are printed *\/\n-        testString(~0, allModsString);\n+    @Test(dataProvider = \"Modifiers\")\n+    void testString(int test, String expected) {\n+        String actual = Modifier.toString(test);\n+        Assert.assertEquals(actual, expected, \"incorrect toString\");\n","filename":"test\/jdk\/java\/lang\/reflect\/Modifier\/toStringTest.java","additions":36,"deletions":18,"binary":false,"changes":54,"status":"modified"}]}