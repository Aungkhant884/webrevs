{"files":[{"patch":"@@ -2324,3 +2324,13 @@\n-            WildcardType wct = (WildcardType) visit(t.wildcard, unused);\n-            if (wct == t.wildcard) {\n-                return t;\n+            if (seen.add(t)) {\n+                try {\n+                    WildcardType wct = (WildcardType) visit(t.wildcard, unused);\n+                    Type ub = t.getUpperBound();\n+                    Type ubProj = visit(ub);\n+                    if (wct == t.wildcard && ubProj == ub) {\n+                        return t;\n+                    } else {\n+                        return new CapturedType(t.tsym.name, t.tsym.owner, ubProj, t.lower, wct);\n+                    }\n+                } finally {\n+                    seen.remove(t);\n+                }\n@@ -2328,1 +2338,2 @@\n-                return new CapturedType(t.tsym.name, t.tsym.owner, t.getUpperBound(), t.lower, wct);\n+                \/\/ cycle\n+                return t;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -288,0 +288,10 @@\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                    \"\"\"\n+                    class Test {\n+                        static primitive class Atom {}\n+                        static class Box<__universal X> {}\n+                        void test(Box<? extends Atom> t1, Box<? extends Atom.ref> t2) {\n+                            t2 = t1;\n+                        }\n+                    }\n+                    \"\"\"),\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}