{"files":[{"patch":"@@ -1154,1 +1154,1 @@\n-                                structuralComparator.visit(t2, s)) {\n+                                structuralComparator.visit(t2, s, true)) {\n@@ -1167,0 +1167,2 @@\n+            boolean topType = true;\n+\n@@ -1169,0 +1171,5 @@\n+            boolean visit(Type t, Type s, boolean topType) {\n+                this.topType = topType;\n+                return super.visit(t, s);\n+            }\n+\n@@ -1171,1 +1178,9 @@\n-                return t.hasTag(s.getTag());\n+                if (topType) {\n+                    return t.hasTag(s.getTag());\n+                } else {\n+                    boolean result = isSameType(t, s);\n+                    if (!result) {\n+                        result = isSameType(t.referenceProjectionOrSelf(), s.referenceProjectionOrSelf());\n+                    }\n+                    return result;\n+                }\n@@ -1184,1 +1199,0 @@\n-                \/\/ If t is an intersection, sup might not be a class type\n@@ -1192,0 +1206,21 @@\n+            @Override\n+            public Boolean visitWildcardType(WildcardType t, Type s) {\n+                return isSameWildcard(t, s)\n+                        || isCaptureOf(s, t)\n+                        || compareWildcardHelper(t, s);\n+            }\n+\n+            boolean compareWildcardHelper(WildcardType t, Type s) {\n+                \/\/ let's remove captured if any\n+                if (s.hasTag(TYPEVAR)) {\n+                    TypeVar v = (TypeVar) s;\n+                    s = v.isCaptured() ? ((CapturedType)v).wildcard : s;\n+                }\n+                if (!s.hasTag(WILDCARD) || ((WildcardType)s).kind != t.kind) return false;\n+                if (t.isExtendsBound()) {\n+                    return visit(wildUpperBound(s), wildUpperBound(t));\n+                } else {\n+                    return visit(wildLowerBound(s), wildLowerBound(t));\n+                }\n+            }\n+\n@@ -1204,0 +1239,5 @@\n+            @Override\n+            public Boolean visitUndetVar(UndetVar t, Type s) {\n+                return isSameType(t, s);\n+            }\n+\n@@ -1220,1 +1260,1 @@\n-                        && compareTypeArgs(ts.head, ss.head)) {\n+                        && visit(ts.head, ss.head, false)) {\n@@ -1226,4 +1266,0 @@\n-\n-            boolean compareTypeArgs(Type t, Type s) {\n-                return typeArgStructComparator.visit(t, s);\n-            }\n@@ -1265,53 +1301,0 @@\n-        private TypeArgStructComparator typeArgStructComparator = new TypeArgStructComparator();\n-        class TypeArgStructComparator extends TypeRelation {\n-\n-            public Boolean visitType(Type t, Type s) {\n-                boolean result = isSameType(t, s);\n-                if (!result) {\n-                    result = isSameType(t.referenceProjectionOrSelf(), s.referenceProjectionOrSelf());\n-                }\n-                return result;\n-            }\n-\n-            @Override\n-            public Boolean visitClassType(ClassType t, Type s) {\n-                return structuralComparator.visitClassType(t, s);\n-            }\n-\n-            @Override\n-            public Boolean visitWildcardType(WildcardType t, Type s) {\n-                return isSameWildcard(t, s)\n-                        || isCaptureOf(s, t)\n-                        || compareWildcardHelper(t, s);\n-            }\n-\n-            boolean compareWildcardHelper(WildcardType t, Type s) {\n-                \/\/ let's remove captured if any\n-                if (s.hasTag(TYPEVAR)) {\n-                    TypeVar v = (TypeVar) s;\n-                    s = v.isCaptured() ? ((CapturedType)v).wildcard : s;\n-                }\n-                if (!s.hasTag(WILDCARD) || ((WildcardType)s).kind != t.kind) return false;\n-                if (t.isExtendsBound()) {\n-                    return structuralComparator.visit(wildUpperBound(s), wildUpperBound(t));\n-                } else {\n-                    return structuralComparator.visit(wildLowerBound(s), wildLowerBound(t));\n-                }\n-            }\n-\n-            @Override\n-            public Boolean visitUndetVar(UndetVar t, Type s) {\n-                return isSameType(t, s);\n-            }\n-\n-            @Override\n-            public Boolean visitTypeVar(TypeVar t, Type s) {\n-                return structuralComparator.visit(t, s);\n-            }\n-\n-            @Override\n-            public Boolean visitErrorType(ErrorType t, Type s) {\n-                return true;\n-            }\n-        }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":44,"deletions":61,"binary":false,"changes":105,"status":"modified"}]}