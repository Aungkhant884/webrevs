{"files":[{"patch":"@@ -1,229 +0,0 @@\n-compiler.err.already.annotated                          # internal compiler error?\n-compiler.err.already.defined.this.unit                  # seems to be masked by compiler.err.duplicate.class\n-compiler.err.bad.functional.intf.anno                   # seems to be masked by compiler.err.annotation.type.not.applicable\n-compiler.err.annotation.value.not.allowable.type        # should be detected in advance by the annotation value visitor\n-compiler.err.cant.read.file                             # (apt.JavaCompiler?)\n-compiler.err.cant.select.static.class.from.param.type\n-compiler.err.dc.unterminated.string                     # cannot happen\n-compiler.err.file.patched.and.msp                       # needs the same dir on --module-source-path and --patch-module\n-compiler.err.illegal.char.for.encoding\n-compiler.err.invalid.repeatable.annotation              # should not happen\n-compiler.err.invalid.repeatable.annotation.invalid.value # \"can't\" happen\n-compiler.err.invalid.repeatable.annotation.multiple.values # can't happen\n-compiler.err.io.exception                               # (javah.JavahTask?)\n-compiler.err.is.preview                                 # difficult to produce reliably despite future changes to java.base\n-compiler.err.limit.code                                 # Code\n-compiler.err.limit.code.too.large.for.try.stmt          # Gen\n-compiler.err.limit.dimensions                           # Gen\n-compiler.err.limit.locals                               # Code\n-compiler.err.limit.parameters                           # Gen\n-compiler.err.limit.pool                                 # Gen,JavaCompiler\n-compiler.err.limit.pool.in.class                        # UNUSED?\n-compiler.err.limit.stack                                # Code\n-compiler.err.limit.string                               # Gen\n-compiler.err.limit.string.overflow                      # JavaCompiler\n-compiler.err.module.non.zero.opens                      # bad class file\n-compiler.err.name.reserved.for.internal.use             # UNUSED\n-compiler.err.no.annotation.member\n-compiler.err.no.encl.instance.of.type.in.scope          # cannot occur; always followed by assert false;\n-compiler.err.no.match.entry                             # UNUSED?\n-compiler.err.not.annotation.type                        # cannot occur given preceding checkType\n-compiler.err.not.def.access.package.cant.access\n-compiler.err.proc.bad.config.file                       # JavacProcessingEnvironment\n-compiler.err.proc.cant.access                           # completion failure\n-compiler.err.proc.cant.access.1                         # completion failure, no stack trace\n-compiler.err.proc.cant.create.loader                    # security exception from service loader\n-compiler.err.proc.no.service                            # JavacProcessingEnvironment: no service loader available\n-compiler.err.proc.processor.bad.option.name             # cannot happen? masked by javac.err.invalid.A.key\n-compiler.err.proc.service.problem                       # JavacProcessingEnvironment: catch Throwable from service loader\n-compiler.err.proc.cant.load.class                       # JavacProcessingEnvironment: cant load the class\/jar file\n-compiler.err.signature.doesnt.match.intf                # UNUSED\n-compiler.err.signature.doesnt.match.supertype           # UNUSED\n-compiler.err.source.cant.overwrite.input.file\n-compiler.err.stack.sim.error\n-compiler.err.type.var.more.than.once                    # UNUSED\n-compiler.err.type.var.more.than.once.in.result          # UNUSED\n-compiler.err.unexpected.type\n-compiler.misc.bad.class.signature                       # bad class file\n-compiler.misc.bad.const.pool.tag                        # bad class file\n-compiler.misc.bad.const.pool.tag.at                     # bad class file\n-compiler.misc.unexpected.const.pool.tag.at              # bad class file\n-compiler.misc.bad.const.pool.index                      # bad class file\n-compiler.misc.bad.constant.range                        # bad class file\n-compiler.misc.bad.constant.value                        # bad class file\n-compiler.misc.bad.enclosing.class                       # bad class file\n-compiler.misc.bad.enclosing.method                      # bad class file\n-compiler.misc.bad.runtime.invisible.param.annotations   # bad class file\n-compiler.misc.bad.signature                             # bad class file\n-compiler.misc.bad.requires.flag                         # bad class file\n-compiler.misc.bad.type.annotation.value\n-compiler.misc.base.membership                           # UNUSED\n-compiler.misc.class.file.not.found                      # ClassReader\n-compiler.misc.class.file.wrong.class\n-compiler.misc.exception.message                         # uncommon completion failure based on a string\n-compiler.misc.fatal.err.cant.locate.ctor                # Resolve, from Lower\n-compiler.misc.fatal.err.cant.locate.field               # Resolve, from Lower\n-compiler.misc.fatal.err.cant.locate.meth                # Resolve, from Lower\n-compiler.misc.fatal.err.cant.close                      # JavaCompiler\n-compiler.misc.feature.not.supported.in.source.plural    # cannot happen (for now)\n-compiler.misc.file.does.not.contain.package\n-compiler.misc.illegal.start.of.class.file\n-compiler.misc.inferred.do.not.conform.to.lower.bounds   # cannot happen?\n-compiler.misc.kindname.annotation\n-compiler.misc.kindname.enum\n-compiler.misc.kindname.package\n-compiler.misc.kindname.static\n-compiler.misc.kindname.type.variable\n-compiler.misc.kindname.type.variable.bound\n-compiler.misc.kindname.value\n-compiler.misc.method.descriptor.invalid                 # bad class file\n-compiler.misc.module.info.definition.expected           # bad class file\n-compiler.misc.module.name.mismatch\n-compiler.misc.module.non.zero.opens                     # bad class file\n-compiler.misc.no.unique.minimal.instance.exists\n-compiler.misc.no.unique.maximal.instance.exists         # cannot happen?\n-compiler.misc.not.def.access.package.cant.access\n-compiler.misc.package.not.visible\n-compiler.misc.resume.abort                              # prompt for a response\n-compiler.misc.source.unavailable                        # DiagnosticSource\n-compiler.misc.token.bad-symbol\n-compiler.misc.token.character\n-compiler.misc.token.double\n-compiler.misc.token.end-of-input\n-compiler.misc.token.float\n-compiler.misc.token.integer\n-compiler.misc.token.long-integer\n-compiler.misc.token.string\n-compiler.misc.type.captureof\n-compiler.misc.type.captureof.1\n-compiler.misc.type.none\n-compiler.misc.type.req.exact\n-compiler.misc.unable.to.access.file                     # ClassFile\n-compiler.misc.undecl.type.var                           # ClassReader\n-compiler.misc.unicode.str.not.supported                 # ClassReader\n-compiler.misc.user.selected.completion.failure          # manual completion failure\n-compiler.misc.malformed.vararg.method                   # ClassReader\n-compiler.misc.version.not.available                     # JavaCompiler; implies build error\n-compiler.misc.where.description.captured\n-compiler.misc.where.typevar.1\n-compiler.misc.wrong.version                             # ClassReader\n-compiler.warn.annotation.method.not.found               # ClassReader\n-compiler.warn.annotation.method.not.found.reason        # ClassReader\n-compiler.warn.big.major.version                         # ClassReader\n-compiler.warn.doclint.not.available                     # requires restricted image\n-compiler.warn.future.attr                               # ClassReader\n-compiler.warn.illegal.char.for.encoding\n-compiler.warn.incubating.modules                        # requires adjusted classfile\n-compiler.warn.invalid.archive.file\n-compiler.warn.is.preview                                # difficult to produce reliably despite future changes to java.base\n-compiler.warn.is.preview.reflective                     # difficult to produce reliably despite future changes to java.base\n-compiler.warn.override.bridge\n-compiler.warn.position.overflow                         # CRTable: caused by files with long lines >= 1024 chars\n-compiler.warn.proc.type.already.exists                  # JavacFiler: just mentioned in TODO\n-compiler.warn.restricted.type.not.allowed.preview       # not produced by the compiler right now\n-compiler.warn.unchecked.assign                          # DEAD, replaced by compiler.misc.unchecked.assign\n-compiler.warn.unchecked.cast.to.type                    # DEAD, replaced by compiler.misc.unchecked.cast.to.type\n-compiler.warn.unexpected.archive.file                   # Paths: zip file with unknown extn\n-compiler.err.no.zipfs.for.archive                       # would need zip\/jar file\n-compiler.warn.unknown.enum.constant                     # in bad class file\n-compiler.warn.unknown.enum.constant.reason              # in bad class file\n-compiler.warn.override.equals.but.not.hashcode          # when a class overrides equals but not hashCode method from Object\n-compiler.warn.file.from.future                          # warning for future modification times on files\n-compiler.err.cant.inherit.from.anon                     # error for subclass of anonymous class\n-compiler.misc.bad.class.file                            # class file is malformed\n-compiler.misc.bad.const.pool.entry                      # constant pool entry has wrong type\n-compiler.warn.access.to.member.from.serializable.lambda # in order to generate it we need to modify a restricted package\n-compiler.warn.invalid.path                              # this warning is generated only in Windows systems\n-compiler.err.invalid.path                               # this error is generated only in Windows systems\n-compiler.note.multiple.elements                         # needs user code\n-compiler.err.preview.feature.disabled.classfile         # preview feature support: needs compilation against classfile\n-compiler.warn.preview.feature.use.classfile             # preview feature support: needs compilation against classfile\n-compiler.note.preview.plural.additional                 # preview feature support: diag test causes intermittent failures (see JDK-8201498)\n-compiler.misc.bad.intersection.target.for.functional.expr  # currently not generated, should be removed?\n-compiler.misc.not.an.intf.component\n-compiler.warn.declared.using.preview                    # after making sealed classes a final feature there is no other\n-                                                        # preview feature but we should keep this key for future use just\n-                                                        # in case\n-\n-# The following module-related messages will have to stay on the not-yet list for various reasons:\n-compiler.warn.locn.unknown.file.on.module.path                # Never issued ATM (short circuited with an if (false))\n-compiler.err.no.output.dir                                    # -d is always specified by test infrastructure\n-compiler.err.output.dir.must.be.specified.with.dash.m.option  # -d is always specified by test infrastructure\n-compiler.warn.outdir.is.in.exploded.module                    # No control over -d specified by test infrastructure\n-compiler.err.invalid.module.specifier                         # Not possible (?)\n-compiler.err.locn.cant.get.module.name.for.jar                # bad binary ? Infer module name failure\n-compiler.misc.anachronistic.module.info                       # requires binaries compiled with EA compilers.\n-compiler.misc.bad.module-info.name                            # bad class file\n-compiler.err.locn.bad.module-info                             # bad class file\n-compiler.err.locn.cant.read.file                              # bad class file\n-compiler.misc.module.info.invalid.super.class                 # bad class file\n-compiler.err.locn.cant.read.directory                         # file system issue\n-compiler.err.locn.invalid.arg.for.xpatch                      # command line option error\n-compiler.misc.unnamed.module                                  # fragment uninteresting in and of itself\n-compiler.misc.kindname.module                                 # fragment uninteresting in and of itself\n-compiler.misc.locn.module_path                                # fragment uninteresting in and of itself\n-compiler.misc.locn.module_source_path                         # fragment uninteresting in and of itself\n-compiler.misc.locn.system_modules                             # fragment uninteresting in and of itself\n-compiler.misc.locn.upgrade_module_path                        # fragment uninteresting in and of itself\n-compiler.misc.inferred.do.not.conform.to.eq.bounds            # hard to generate, could probably be removed\n-\n-# The following are new module-related messages, that need new  examples to be created\n-compiler.err.duplicate.module.on.path\n-compiler.err.locn.module-info.not.allowed.on.patch.path\n-compiler.misc.cant.resolve.modules\n-compiler.misc.file.does.not.contain.module\n-\n-# these keys were in javac.properties and examples are hard to be produced for them\n-# basically because in most cases the compilation ends with an exception\n-compiler.err.bad.value.for.option\n-compiler.err.empty.A.argument\n-compiler.err.error.writing.file\n-compiler.err.file.not.directory\n-compiler.err.file.not.file\n-compiler.err.file.not.found\n-compiler.err.invalid.A.key\n-compiler.err.invalid.flag\n-compiler.err.invalid.profile\n-compiler.err.invalid.source\n-compiler.err.invalid.target\n-compiler.err.multiple.values.for.module.source.path\n-compiler.err.no.source.files.classes\n-compiler.err.no.value.for.option\n-compiler.err.option.not.allowed.with.target\n-compiler.err.option.too.many\n-compiler.err.profile.bootclasspath.conflict\n-compiler.err.release.bootclasspath.conflict\n-compiler.err.repeated.value.for.module.source.path\n-compiler.err.repeated.value.for.patch.module\n-compiler.err.req.arg\n-compiler.err.sourcepath.modulesourcepath.conflict\n-compiler.err.two.class.loaders.1\n-compiler.err.two.class.loaders.2\n-compiler.err.unmatched.quote\n-compiler.err.unsupported.release.version\n-compiler.warn.profile.target.conflict\n-compiler.warn.source.target.conflict\n-compiler.warn.target.default.source.conflict\n-compiler.err.preview.not.latest\n-compiler.err.preview.without.source.or.release\n-\n-compiler.misc.illegal.signature                               # the compiler can now detect more non-denotable types before class writing\n-\n-# Value types\n-compiler.err.cyclic.primitive.class.membership\n-compiler.err.value.class.does.not.support\n-compiler.err.value.class.may.not.extend\n-compiler.err.this.exposed.prematurely\n-compiler.err.value.class.must.not.implement.identity.object\n-compiler.err.concrete.supertype.for.value.class\n-compiler.err.super.class.cannot.be.inner\n-compiler.err.super.class.declares.init.block\n-compiler.err.super.constructor.cannot.take.arguments\n-compiler.err.super.field.not.allowed\n-compiler.err.super.method.cannot.be.synchronized\n-compiler.err.super.no.arg.constructor.must.be.empty\n-compiler.err.generic.parameterization.with.primitive.class\n-compiler.misc.feature.primitive.classes\n-compiler.misc.feature.value.classes\n-compiler.misc.feature.universal.tvars\n-compiler.warn.primitive.value.conversion\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt.orig","additions":0,"deletions":229,"binary":false,"changes":229,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n---- test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt\n-+++ test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt\n-@@ -226,4 +226,3 @@ compiler.err.generic.parameterization.with.primitive.class\n- compiler.misc.feature.primitive.classes\n- compiler.misc.feature.value.classes\n- compiler.misc.feature.universal.tvars\n--compiler.warn.primitive.value.conversion\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt.rej","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"}]}