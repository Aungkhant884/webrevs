{"files":[{"patch":"@@ -1134,1 +1134,1 @@\n-            } else if (isSubtype(t, s, capture, SubtypingRelationKind.REF_VAL_ALLOWED)) {\n+            } else if (isSubtype(t, s, capture)) {\n@@ -1137,1 +1137,1 @@\n-                warn.warn(LintCategory.UNIVERSAL);\n+                warn.warn(LintCategory.UNCHECKED);\n@@ -1334,4 +1334,0 @@\n-        return isSubtype(t, s, capture, SubtypingRelationKind.STRICT);\n-    }\n-\n-    public boolean isSubtype(Type t, Type s, boolean capture, SubtypingRelationKind subtypingKind) {\n@@ -1340,6 +1336,0 @@\n-        if (subtypingKind == SubtypingRelationKind.REF_VAL_ALLOWED && t.hasTag(TYPEVAR) && s.hasTag(TYPEVAR) && t.tsym == s.tsym) {\n-            if (warnStack.head != null && allowUniversalTVars && t.isReferenceProjection() != s.isReferenceProjection()) {\n-                warnStack.head.warn(LintCategory.UNCHECKED);\n-            }\n-            return true;\n-        }\n@@ -1351,1 +1341,1 @@\n-                if (!isSubtype(t, s2, capture, subtypingKind))\n+                if (!isSubtype(t, s2, capture))\n@@ -1364,1 +1354,1 @@\n-                return isSubtype(capture ? capture(t) : t, lower, false, subtypingKind);\n+                return isSubtype(capture ? capture(t) : t, lower, false);\n@@ -1368,1 +1358,1 @@\n-        return isSubtypeRelation.visit(t, s, subtypingKind);\n+        return isSubtypeRelation.visit(t, s);\n@@ -1371,23 +1361,2 @@\n-        enum SubtypingRelationKind {\n-            STRICT,\n-            REF_VAL_ALLOWED\n-        }\n-\n-        SubtypingRelation isSubtypeRelation = new SubtypingRelation();\n-        class SubtypingRelation extends TypeRelation {\n-            SubtypingRelationKind param;\n-\n-            public boolean allowRefValSubtyping() {\n-                return param == SubtypingRelationKind.REF_VAL_ALLOWED;\n-            }\n-\n-            public final Boolean visit(Type t, Type s, SubtypingRelationKind param) {\n-                SubtypingRelationKind prevParam = this.param;\n-                try {\n-                    this.param = param;\n-                    return super.visit(t, s);\n-                } finally {\n-                    this.param = prevParam;\n-                }\n-            }\n-\n+        private TypeRelation isSubtypeRelation = new TypeRelation()\n+        {\n@@ -1407,1 +1376,1 @@\n-                     return isSubtype(t.getUpperBound(), s, false, param);\n+                     return isSubtype(t.getUpperBound(), s, false);\n@@ -1409,3 +1378,0 @@\n-                     if (allowUniversalTVars && allowRefValSubtyping() && s.hasTag(TYPEVAR) && ((TypeVar)s).isValueProjection()) {\n-                         warnStack.head.warn(LintCategory.UNIVERSAL);\n-                     }\n@@ -1502,1 +1468,1 @@\n-        }\n+        };\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":9,"deletions":43,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -608,9 +608,0 @@\n-                \"\"\",\n-                \"\"\"\n-                import java.util.function.*;\n-                class Test<__universal T> {\n-                    T.ref field;\n-                    void foo(T t, Consumer<? super T> action) {\n-                        action.accept(field = t);\n-                    }\n-                }\n@@ -674,0 +665,11 @@\n+        assertFail(\"compiler.err.prob.found.req\",\n+                \"\"\"\n+                import java.util.function.*;\n+                class Test<__universal T> {\n+                    T.ref field;\n+                    void foo(T t, Consumer<? super T> action) {\n+                        action.accept(field = t);\n+                    }\n+                }\n+                \"\"\"\n+        );\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"}]}