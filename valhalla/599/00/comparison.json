{"files":[{"patch":"@@ -484,1 +484,1 @@\n-      if (k->local_interfaces()->at(i) == vmClasses::PrimitiveObject_klass()) {\n+      if (k->local_interfaces()->at(i) == vmClasses::ValueObject_klass()) {\n@@ -494,1 +494,1 @@\n-      if (lookup_class_by_id(_interfaces->at(i)) == vmClasses::PrimitiveObject_klass()) {\n+      if (lookup_class_by_id(_interfaces->at(i)) == vmClasses::ValueObject_klass()) {\n@@ -503,1 +503,1 @@\n-      \/\/ java.lang.IdentityObject or java.lang.PrimitiveObject\n+      \/\/ java.lang.IdentityObject or java.lang.ValueObject\n@@ -741,1 +741,1 @@\n-  if (interface_name == vmSymbols::java_lang_PrimitiveObject()) {\n+  if (interface_name == vmSymbols::java_lang_ValueObject()) {\n@@ -743,2 +743,2 @@\n-    \/\/ java.lang.PrimitiveObject.\n-    return vmClasses::PrimitiveObject_klass();\n+    \/\/ java.lang.ValueObject.\n+    return vmClasses::ValueObject_klass();\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -925,1 +925,1 @@\n-      if (ik->name() == vmSymbols::java_lang_PrimitiveObject()) {\n+      if (ik->name() == vmSymbols::java_lang_ValueObject()) {\n@@ -4489,1 +4489,1 @@\n-    if (length == 1 && result->at(0) == vmClasses::PrimitiveObject_klass()) {\n+    if (length == 1 && result->at(0) == vmClasses::ValueObject_klass()) {\n@@ -5831,1 +5831,1 @@\n-  if (ik->name() == vmSymbols::java_lang_PrimitiveObject()) {\n+  if (ik->name() == vmSymbols::java_lang_ValueObject()) {\n@@ -6409,1 +6409,1 @@\n-                            vmClasses::PrimitiveObject_klass(), THREAD);\n+                            vmClasses::ValueObject_klass(), THREAD);\n@@ -6413,1 +6413,1 @@\n-    _temp_local_interfaces->append(vmClasses::PrimitiveObject_klass());\n+    _temp_local_interfaces->append(vmClasses::ValueObject_klass());\n@@ -6422,1 +6422,1 @@\n-  } else if (itfs_len == 1 && _temp_local_interfaces->at(0) == vmClasses::PrimitiveObject_klass()) {\n+  } else if (itfs_len == 1 && _temp_local_interfaces->at(0) == vmClasses::ValueObject_klass()) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  do_klass(PrimitiveObject_klass,                       java_lang_PrimitiveObject                             ) \\\n+  do_klass(ValueObject_klass,                           java_lang_ValueObject                             ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  template(java_lang_PrimitiveObject,                 \"java\/lang\/PrimitiveObject\")                \\\n+  template(java_lang_ValueObject,                     \"java\/lang\/ValueObject\")                \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -369,1 +369,1 @@\n-          vmClasses::PrimitiveObject_klass(), \"u3\");\n+          vmClasses::ValueObject_klass(), \"u3\");\n@@ -491,1 +491,1 @@\n-    assert(ik->name() == vmSymbols::java_lang_PrimitiveObject(), \"Must be\");\n+    assert(ik->name() == vmSymbols::java_lang_ValueObject(), \"Must be\");\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -906,1 +906,1 @@\n-         (!ik()->has_injected_primitiveObject() || iik != vmClasses::PrimitiveObject_klass())) {\n+         (!ik()->has_injected_primitiveObject() || iik != vmClasses::ValueObject_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -340,2 +340,2 @@\n-  \/\/ Cannot redefine or retransform interface java.lang.PrimitiveObject.\n-  if (k->name() == vmSymbols::java_lang_PrimitiveObject()) {\n+  \/\/ Cannot redefine or retransform interface java.lang.ValueObject.\n+  if (k->name() == vmSymbols::java_lang_ValueObject()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * Every object is either an *identity object* or a *primitive object*. Primitive\n+ * Every object is either an *identity object* or a *value object*. Value\n@@ -55,2 +55,2 @@\n- * A class may implement `IdentityObject` or `PrimitiveObject`, but never both.\n- * Primitive classes always implement `PrimitiveObject`, while all other concrete\n+ * A class may implement `IdentityObject` or `ValueObject`, but never both.\n+ * Value classes always implement `ValueObject`, while all other concrete\n@@ -62,1 +62,1 @@\n- * @since 1.16\n+ * @since 1.18\n","filename":"src\/java.base\/share\/classes\/java\/lang\/IdentityObject.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-\/**\n- * A restricted interface implemented by all primitive objects.\n- *\n- * A primitive object is an instance of a primitive class, lacking identity.\n- *\n- * Every object is either an *identity object* or a *primitive object*. Identity\n- * objects have a unique identity determined for them at instance creation time and\n- * preserved throughout their life.\n- *\n- * Primitive objects do *not* have an identity. Instead, they simply aggregate a\n- * set of immutable field values. The lack of identity enables certain performance\n- * optimizations by Java Virtual Machine implementations.\n- * The following operations have special behavior when applied to primitive\n- * objects:\n- *\n- * - The `==` operator, and the default implementation of the `Object.equals`\n- * method, compare the values of the operands' fields. Primitive objects\n- * created at different points in a program may be `==`.\n- *\n- * - The `System.identityHashCode` method, and the default implementation of the\n- * `Object.hashCode` method, generate a hash code from the hash codes of a\n- * primitive object's fields.\n- *\n- * - The `synchronized` modifier and `synchronized` statement always fail when\n- * applied to a primitive object.\n- *\n- * A class may implement `PrimitiveObject` or `IdentityObject`, but never both.\n- * Primitive classes always implement `PrimitiveObject`, while all other concrete\n- * classes (except `Object`) implicitly implement `IdentityObject`.\n- *\n- * Abstract classes and interfaces may implement or extend this interface if they\n- * wish to guarantee that all instances of the class or interface are primitive\n- * objects.\n- *\n- * @since 1.16\n- *\/\n-\n-public interface PrimitiveObject {\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/PrimitiveObject.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+\/**\n+ * A restricted interface implemented by all value objects.\n+ *\n+ * A value object is an instance of a value class, lacking identity.\n+ *\n+ * Every object is either an *identity object* or a *value object*. Identity\n+ * objects have a unique identity determined for them at instance creation time and\n+ * preserved throughout their life.\n+ *\n+ * value objects do *not* have an identity. Instead, they simply aggregate a\n+ * set of immutable field values. The lack of identity enables certain performance\n+ * optimizations by Java Virtual Machine implementations.\n+ * The following operations have special behavior when applied to value\n+ * objects:\n+ *\n+ * - The `==` operator, and the default implementation of the `Object.equals`\n+ * method, compare the values of the operands' fields. Value objects\n+ * created at different points in a program may be `==`.\n+ *\n+ * - The `System.identityHashCode` method, and the default implementation of the\n+ * `Object.hashCode` method, generate a hash code from the hash codes of a\n+ * value object's fields.\n+ *\n+ * - The `synchronized` modifier and `synchronized` statement always fail when\n+ * applied to a value object.\n+ *\n+ * A class may implement `ValueObject` or `IdentityObject`, but never both.\n+ * Value classes always implement `ValueObject`, while all other concrete\n+ * classes (except `Object`) implicitly implement `IdentityObject`.\n+ *\n+ * Abstract classes and interfaces may implement or extend this interface if they\n+ * wish to guarantee that all instances of the class or interface are value\n+ * objects.\n+ *\n+ * @since 1.18\n+ *\/\n+\n+public interface ValueObject {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ValueObject.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -226,1 +226,1 @@\n-    public final Type primitiveObjectType;\n+    public final Type valueObjectType;\n@@ -612,1 +612,1 @@\n-        primitiveObjectType = enterClass(\"java.lang.PrimitiveObject\");\n+        valueObjectType = enterClass(\"java.lang.ValueObject\");\n@@ -631,1 +631,1 @@\n-        synthesizeEmptyInterfaceIfMissing(primitiveObjectType);\n+        synthesizeEmptyInterfaceIfMissing(valueObjectType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2273,3 +2273,3 @@\n-        } else if (sym == syms.primitiveObjectType.tsym) {\n-            if (t.isReferenceProjection())\n-                return syms.primitiveObjectType;\n+        } else if (sym == syms.valueObjectType.tsym) {\n+            if (t.isValueClass() || t.isReferenceProjection())\n+                return syms.valueObjectType;\n@@ -2343,1 +2343,1 @@\n-            \/* An abstract class can be declared to implement either IdentityObject or PrimitiveObject;\n+            \/* An abstract class can be declared to implement either IdentityObject or ValueObject;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2762,1 +2762,1 @@\n-        boolean implementsPrimitiveObject = types.asSuper(c.referenceProjectionOrSelf(), syms.primitiveObjectType.tsym) != null;\n+        boolean implementsValueObject = types.asSuper(c.referenceProjectionOrSelf(), syms.valueObjectType.tsym) != null;\n@@ -2765,3 +2765,3 @@\n-        } else if (implementsPrimitiveObject && !c.isPrimitiveClass() && !c.isReferenceProjection() && !c.tsym.isInterface() && !c.tsym.isAbstract()) {\n-            log.error(pos, Errors.IdentityClassMustNotImplementPrimitiveObject(c));\n-        } else if (implementsPrimitiveObject && implementsIdentityObject) {\n+        } else if (implementsValueObject && !c.isValueClass() && !c.isReferenceProjection() && !c.tsym.isInterface() && !c.tsym.isAbstract()) {\n+            log.error(pos, Errors.IdentityClassMustNotImplementValueObject(c));\n+        } else if (implementsValueObject && implementsIdentityObject) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3958,2 +3958,2 @@\n-compiler.err.identity.class.must.not.implement.primitive.object=\\\n-    The identity class {0} attempts to implement the incompatible interface PrimitiveObject\n+compiler.err.identity.class.must.not.implement.value.object=\\\n+    The identity class {0} attempts to implement the incompatible interface ValueObject\n@@ -3963,1 +3963,1 @@\n-    The type {0} attempts to implement the mutually incompatible interfaces PrimitiveObject and IdentityObject\n+    The type {0} attempts to implement the mutually incompatible interfaces ValueObject and IdentityObject\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public abstract class AbstractSpecified implements PrimitiveObject {\n+public abstract class AbstractSpecified implements ValueObject {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/AbstractSpecified.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-public interface InterfaceSpecified extends PrimitiveObject {\n+public interface InterfaceSpecified extends ValueObject {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/InterfaceSpecified.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-public primitive class PrimitiveTypeSpecified implements PrimitiveObject {\n+public primitive class PrimitiveTypeSpecified implements ValueObject {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveTypeSpecified.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary test that PrimitiveObject interface is injected correctly\n+ * @summary test that ValueObject interface is injected correctly\n@@ -70,1 +70,1 @@\n-            c.asSubclass(PrimitiveObject.class);\n+            c.asSubclass(ValueObject.class);\n@@ -77,1 +77,1 @@\n-                throw new RuntimeException(\"Type \" + c.getName() + \" is missing PrimitiveObject\");\n+                throw new RuntimeException(\"Type \" + c.getName() + \" is missing ValueObject\");\n@@ -79,1 +79,1 @@\n-                throw new RuntimeException(\"Type \" + c.getName() + \" should not implement PrimitiveObject\");\n+                throw new RuntimeException(\"Type \" + c.getName() + \" should not implement ValueObject\");\n@@ -84,1 +84,1 @@\n-    \/\/ Define classes that implement PrimitiveObject but are invalid supers\n+    \/\/ Define classes that implement ValueObject but are invalid supers\n@@ -96,1 +96,1 @@\n-            .withSuperinterface(\"java\/lang\/PrimitiveObject\");\n+            .withSuperinterface(\"java\/lang\/ValueObject\");\n@@ -104,1 +104,1 @@\n-            .withSuperinterface(\"java\/lang\/PrimitiveObject\");\n+            .withSuperinterface(\"java\/lang\/ValueObject\");\n@@ -112,1 +112,1 @@\n-            .withSuperinterface(\"java\/lang\/PrimitiveObject\");\n+            .withSuperinterface(\"java\/lang\/ValueObject\");\n@@ -119,1 +119,1 @@\n-            .withSuperinterface(\"java\/lang\/PrimitiveObject\");\n+            .withSuperinterface(\"java\/lang\/ValueObject\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/TestPrimitiveObject.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-    primitive class T implements PrimitiveObject { }\n+    primitive class T implements ValueObject { }\n@@ -252,2 +252,2 @@\n-                new Object[]{ point, new Class<?>[] { PrimitiveObject.class }},\n-                new Object[]{ new T(), new Class<?>[] { PrimitiveObject.class }},\n+                new Object[]{ point, new Class<?>[] { ValueObject.class }},\n+                new Object[]{ new T(), new Class<?>[] { ValueObject.class }},\n@@ -265,2 +265,2 @@\n-            assertTrue(PrimitiveObject.class.isAssignableFrom(type));\n-            assertTrue(o instanceof PrimitiveObject);\n+            assertTrue(ValueObject.class.isAssignableFrom(type));\n+            assertTrue(o instanceof ValueObject);\n","filename":"test\/jdk\/valhalla\/valuetypes\/BasicTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/\/ key: compiler.err.identity.class.must.not.implement.primitive.object\n+\/\/ key: compiler.err.identity.class.must.not.implement.value.object\n@@ -27,2 +27,2 @@\n-class Identity implements PrimitiveObject {\n-    abstract class Inner implements IdentityObject, PrimitiveObject {}\n+class Identity implements ValueObject {\n+    abstract class Inner implements IdentityObject, ValueObject {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TopInterfaces.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        if (o instanceof PrimitiveObject)\n+        if (o instanceof ValueObject)\n@@ -46,1 +46,1 @@\n-        if (o instanceof PrimitiveObject)\n+        if (o instanceof ValueObject)\n@@ -53,1 +53,1 @@\n-        if (oa[0] instanceof PrimitiveObject)\n+        if (oa[0] instanceof ValueObject)\n@@ -60,1 +60,1 @@\n-        if (oa[0] instanceof PrimitiveObject)\n+        if (oa[0] instanceof ValueObject)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InstanceOfTopTypeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        if (ca.length != 1 || !ca[0].getCanonicalName().equals(\"java.lang.PrimitiveObject\"))\n+        if (ca.length != 1 || !ca[0].getCanonicalName().equals(\"java.lang.ValueObject\"))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TopInterfaceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        if (!superInterfaces[1].equals(PrimitiveObject.class))\n+        if (!superInterfaces[1].equals(ValueObject.class))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/UnifiedPrimitiveClassNestHostTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+SemanticsViolationsTest.java:12:5: compiler.err.identity.class.must.not.implement.value.object: SemanticsViolationsTest.Subclass\n@@ -16,1 +17,1 @@\n-15 errors\n+16 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/SemanticsViolationsTest.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,1 +4,2 @@\n-3 errors\n+ValueAnnotationTest.java:11:12: compiler.err.identity.class.must.not.implement.value.object: ValueAnnotationTest.Z\n+4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueAnnotationTest.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}