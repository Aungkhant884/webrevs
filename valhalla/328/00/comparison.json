{"files":[{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-import java.lang.annotation.*;\n-import static java.lang.annotation.ElementType.*;\n-\n-\/**\n- * A class annotated {@code @__inline__} is an inline class.\n- * This is a temporary workaround to enable use of inline types\n- * in editors and IDEs that do not yet understand the 'inline' modifier.\n- * @since 1.12\n- *\/\n-@Retention(RetentionPolicy.SOURCE)\n-@Target(value={ElementType.TYPE, ElementType.TYPE_USE})\n-public @interface __inline__ {\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/__inline__.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+import java.lang.annotation.*;\n+import static java.lang.annotation.ElementType.*;\n+\n+\/**\n+ * A class annotated {@code @__primitive__} is a primitive class.\n+ * This is a temporary workaround to enable use of primitive classes\n+ * in editors and IDEs that do not yet understand the 'primitive' modifier.\n+ * @since 1.16\n+ *\/\n+@Retention(RetentionPolicy.SOURCE)\n+@Target(value={ElementType.TYPE, ElementType.TYPE_USE})\n+public @interface __primitive__ {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/__primitive__.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -2678,1 +2678,1 @@\n-        case VALUE:\n+        case PRIMITIVE:\n@@ -3213,1 +3213,1 @@\n-            case VALUE       : flag = Flags.VALUE; break;\n+            case PRIMITIVE   : flag = Flags.VALUE; break;\n@@ -3246,1 +3246,1 @@\n-                    if (name == names.__inline__ || name == names.java_lang___inline__) {\n+                    if (name == names.__primitive__ || name == names.java_lang___primitive__) {\n@@ -3461,1 +3461,1 @@\n-    \/\/ Does the given token signal an inline modifier ? If yes, suitably reclassify token.\n+    \/\/ Does the given token signal a primitive modifier ? If yes, suitably reclassify token.\n@@ -3463,1 +3463,1 @@\n-        if (token.kind != IDENTIFIER || token.name() != names.inline) {\n+        if (token.kind != IDENTIFIER || token.name() != names.primitive) {\n@@ -3492,1 +3492,1 @@\n-            return new Token(VALUE, token.pos, token.endPos, token.comments);\n+            return new Token(PRIMITIVE, token.pos, token.endPos, token.comments);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-        VALUE(), \/\/ a phantom token never returned by the scanner, but can result from a reclassification by the parser.\n+        PRIMITIVE(), \/\/ a phantom token never returned by the scanner, but can result from a reclassification by the parser.\n@@ -249,2 +249,2 @@\n-            case VALUE:\n-                return \"value\";\n+            case PRIMITIVE:\n+                return \"primitive\";\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/Tokens.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    public final Name inline;\n+    public final Name primitive;\n@@ -116,2 +116,2 @@\n-    public final Name __inline__;\n-    public final Name java_lang___inline__;\n+    public final Name __primitive__;\n+    public final Name java_lang___primitive__;\n@@ -288,1 +288,1 @@\n-        inline = fromString(\"inline\");\n+        primitive = fromString(\"primitive\");\n@@ -302,2 +302,2 @@\n-        __inline__ = fromString(\"__inline__\");\n-        java_lang___inline__ = fromString(\"java.lang.__inline__\");\n+        __primitive__ = fromString(\"__primitive__\");\n+        java_lang___primitive__ = fromString(\"java.lang.__primitive__\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-        VALUE(TokenKind.VALUE, 0),\n+        PRIMITIVE(TokenKind.PRIMITIVE, 0),\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/CompletenessAnalyzer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public final inline class MyValue1 extends MyAbstract {\n+public final primitive class MyValue1 extends MyAbstract {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-final inline class MyValue2Inline {\n+final primitive class MyValue2Inline {\n@@ -60,1 +60,1 @@\n-public final inline class MyValue2 extends MyAbstract {\n+public final primitive class MyValue2 extends MyAbstract {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-final inline class MyValue3Inline {\n+final primitive class MyValue3Inline {\n@@ -65,1 +65,1 @@\n-public final inline class MyValue3 extends MyAbstract {\n+public final primitive class MyValue3 extends MyAbstract {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue3.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-final inline class MyValue4 extends MyAbstract {\n+final primitive class MyValue4 extends MyAbstract {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue4.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public final inline class MyValueEmpty extends MyAbstract {\n+public final primitive class MyValueEmpty extends MyAbstract {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValueEmpty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public inline class Point {\n+public primitive class Point {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/Point.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public inline class Rectangle {\n+public primitive class Rectangle {\n@@ -29,1 +29,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/Rectangle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-final inline class SimpleInlineType {\n+final primitive class SimpleInlineType {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/SimpleInlineType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-final inline class MyValue1 {\n+final primitive class MyValue1 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    static inline class ManyOops {\n+    static primitive class ManyOops {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayCopyWithOops.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1868,1 +1868,1 @@\n-    inline static class NotFlattenable {\n+    primitive static class NotFlattenable {\n@@ -2165,1 +2165,1 @@\n-    inline static final class Test91Value {\n+    primitive static final class Test91Value {\n@@ -3017,1 +3017,1 @@\n-    static inline class EmptyContainer {\n+    static primitive class EmptyContainer {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -789,1 +789,1 @@\n-    inline class Test37Value2 {\n+    primitive class Test37Value2 {\n@@ -794,1 +794,1 @@\n-    inline class Test37Value1 {\n+    primitive class Test37Value1 {\n@@ -812,1 +812,1 @@\n-    inline class Test38Value {\n+    primitive class Test38Value {\n@@ -839,1 +839,1 @@\n-    static inline class Test39Value {\n+    static primitive class Test39Value {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-inline final class TestValue1 implements MyInterface {\n+primitive final class TestValue1 implements MyInterface {\n@@ -62,1 +62,1 @@\n-inline final class TestValue2 implements MyInterface {\n+primitive final class TestValue2 implements MyInterface {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBimorphicInlining.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-inline class MyValue {\n+primitive class MyValue {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-    static inline class SimpleValue2 {\n+    static primitive class SimpleValue2 {\n@@ -210,1 +210,1 @@\n-    static inline class Big {\n+    static primitive class Big {\n@@ -243,1 +243,1 @@\n-    static inline class TestValue {\n+    static primitive class TestValue {\n@@ -291,1 +291,1 @@\n-    static inline class EmptyType {}\n+    static primitive class EmptyType {}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    static inline class OtherVal {\n+    static primitive class OtherVal {\n@@ -92,1 +92,1 @@\n-    static inline class MyValue1 implements MyInterface1 {\n+    static primitive class MyValue1 implements MyInterface1 {\n@@ -158,1 +158,1 @@\n-    static inline class MyValue2 implements MyInterface1 {\n+    static primitive class MyValue2 implements MyInterface1 {\n@@ -224,1 +224,1 @@\n-    static inline class MyValue3 implements MyInterface1 {\n+    static primitive class MyValue3 implements MyInterface1 {\n@@ -274,1 +274,1 @@\n-    static inline class MyValue4 implements MyInterface1 {\n+    static primitive class MyValue4 implements MyInterface1 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC2CCalls.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-    inline class TestValue23 {\n+    primitive class TestValue23 {\n@@ -531,1 +531,1 @@\n-    final inline class Test27Value1 {\n+    final primitive class Test27Value1 {\n@@ -544,1 +544,1 @@\n-    final inline class Test27Value2 {\n+    final primitive class Test27Value2 {\n@@ -557,1 +557,1 @@\n-    final inline class Test27Value3 {\n+    final primitive class Test27Value3 {\n@@ -770,1 +770,1 @@\n-    inline class Test37Value {\n+    primitive class Test37Value {\n@@ -805,1 +805,1 @@\n-    static inline class LargeValueWithOops {\n+    static primitive class LargeValueWithOops {\n@@ -838,1 +838,1 @@\n-    static inline class LargeValueWithoutOops {\n+    static primitive class LargeValueWithoutOops {\n@@ -921,1 +921,1 @@\n-    static inline class EmptyContainer {\n+    static primitive class EmptyContainer {\n@@ -935,1 +935,1 @@\n-    static inline class MixedContainer {\n+    static primitive class MixedContainer {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    static inline class Point {\n+    static primitive class Point {\n@@ -231,1 +231,1 @@\n-    static inline class MyImplVal1 implements Intf {\n+    static primitive class MyImplVal1 implements Intf {\n@@ -244,1 +244,1 @@\n-    static inline class MyImplVal2 implements Intf {\n+    static primitive class MyImplVal2 implements Intf {\n@@ -257,1 +257,1 @@\n-    static inline class MyImplVal1X implements Intf {\n+    static primitive class MyImplVal1X implements Intf {\n@@ -270,1 +270,1 @@\n-    static inline class MyImplVal2X implements Intf {\n+    static primitive class MyImplVal2X implements Intf {\n@@ -295,1 +295,1 @@\n-    static inline class FixedPoints {\n+    static primitive class FixedPoints {\n@@ -306,1 +306,1 @@\n-    static inline class FloatPoint {\n+    static primitive class FloatPoint {\n@@ -314,1 +314,1 @@\n-    static inline class DoublePoint {\n+    static primitive class DoublePoint {\n@@ -325,1 +325,1 @@\n-    static inline class EightFloats {\n+    static primitive class EightFloats {\n@@ -355,1 +355,1 @@\n-    static inline class RefPoint implements RefPoint_Access {\n+    static primitive class RefPoint implements RefPoint_Access {\n@@ -444,1 +444,1 @@\n-    static inline class TooBigToReturnAsFields {\n+    static primitive class TooBigToReturnAsFields {\n@@ -2173,1 +2173,1 @@\n-    static inline class Test103Value {\n+    static primitive class Test103Value {\n@@ -2198,1 +2198,1 @@\n-    static inline class Test104Value {\n+    static primitive class Test104Value {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-inline class MyValue {\n+primitive class MyValue {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeadAllocationRemoval.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-final inline class MyValue1 {\n+final primitive class MyValue1 {\n@@ -98,1 +98,1 @@\n-final inline class MyValue2 {\n+final primitive class MyValue2 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-inline class Test0 {\n+primitive class Test0 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayAliasesCardMark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-final inline class MyValue1 {\n+final primitive class MyValue1 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-inline class EmptyValue {\n+primitive class EmptyValue {\n@@ -37,1 +37,1 @@\n-inline class MyValue1 {\n+primitive class MyValue1 {\n@@ -42,1 +42,1 @@\n-inline class MyValue2 {\n+primitive class MyValue2 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -184,2 +184,2 @@\n-    static inline class EmptyType { }\n-    static inline class EmptyContainer {\n+    static primitive class EmptyType { }\n+    static primitive class EmptyContainer {\n@@ -189,1 +189,1 @@\n-    static inline class Container {\n+    static primitive class Container {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGetfieldChains.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-    final inline class Test25Value {\n+    final primitive class Test25Value {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-final inline class MyValue {\n+final primitive class MyValue {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIsSubstitutableReresolution.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    static inline class MyValueWithNative {\n+    static primitive class MyValueWithNative {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestJNICalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1491,1 +1491,1 @@\n-    final inline class Test51Value {\n+    final primitive class Test51Value {\n@@ -1977,1 +1977,1 @@\n-    final inline class Test72Value {\n+    final primitive class Test72Value {\n@@ -2133,1 +2133,1 @@\n-    static inline class Small {\n+    static primitive class Small {\n@@ -2143,1 +2143,1 @@\n-    static inline class Big {\n+    static primitive class Big {\n@@ -2397,1 +2397,1 @@\n-    static inline class Test92Value {\n+    static primitive class Test92Value {\n@@ -2915,1 +2915,1 @@\n-    static inline class LongWrapper implements WrapperInterface {\n+    static primitive class LongWrapper implements WrapperInterface {\n@@ -3170,1 +3170,1 @@\n-    static inline class LongWrapper2 implements WrapperInterface2 {\n+    static primitive class LongWrapper2 implements WrapperInterface2 {\n@@ -3182,1 +3182,1 @@\n-    static inline class InlineWrapper {\n+    static primitive class InlineWrapper {\n@@ -3290,1 +3290,1 @@\n-    static inline class EmptyContainer {\n+    static primitive class EmptyContainer {\n@@ -3294,1 +3294,1 @@\n-    static inline class MixedContainer {\n+    static primitive class MixedContainer {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -372,1 +372,1 @@\n-    inline static class NotFlattenable {\n+    primitive static class NotFlattenable {\n@@ -919,1 +919,1 @@\n-    static inline class Test40Inline extends Test40Abstract { }\n+    static primitive class Test40Inline extends Test40Abstract { }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-inline class MyValue {\n+primitive class MyValue {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNativeClone.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-inline class MyValue implements MyInterface {\n+primitive class MyValue implements MyInterface {\n@@ -72,1 +72,1 @@\n-inline class Test2 {\n+primitive class Test2 {\n@@ -126,1 +126,1 @@\n-inline class Test5 {\n+primitive class Test5 {\n@@ -161,1 +161,1 @@\n-inline class Test7 {\n+primitive class Test7 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNestmateAccess.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-inline class MyValue1 extends MyAbstract {\n+primitive class MyValue1 extends MyAbstract {\n@@ -76,1 +76,1 @@\n-inline class MyValue2 extends MyAbstract {\n+primitive class MyValue2 extends MyAbstract {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2498,1 +2498,1 @@\n-    inline static class Complex {\n+    primitive static class Complex {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-    final inline class Test17Value {\n+    final primitive class Test17Value {\n@@ -587,1 +587,1 @@\n-    final inline class Test21Value {\n+    final primitive class Test21Value {\n@@ -805,1 +805,1 @@\n-    final inline class Test31Value {\n+    final primitive class Test31Value {\n@@ -837,1 +837,1 @@\n-    static inline class Test33Value1 {\n+    static primitive class Test33Value1 {\n@@ -841,1 +841,1 @@\n-    static inline class Test33Value2 {\n+    static primitive class Test33Value2 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-    inline class Test6Value {\n+    primitive class Test6Value {\n@@ -206,1 +206,1 @@\n-    static inline class Test7Value1 {\n+    static primitive class Test7Value1 {\n@@ -215,1 +215,1 @@\n-    static inline class Test7Value2 {\n+    static primitive class Test7Value2 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-inline class MyValue {\n+primitive class MyValue {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOptimizeKlassCmp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-inline class MyValue {\n+primitive class MyValue {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStressReturnBuffering.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-final inline class MyValue1 {\n+final primitive class MyValue1 {\n@@ -61,1 +61,1 @@\n-final inline class MyValue1Box {\n+final primitive class MyValue1Box {\n@@ -69,1 +69,1 @@\n-final inline class MyValue2 {\n+final primitive class MyValue2 {\n@@ -77,1 +77,1 @@\n-final inline class MyValue2Box {\n+final primitive class MyValue2Box {\n@@ -85,1 +85,1 @@\n-final inline class MyValue3 {\n+final primitive class MyValue3 {\n@@ -93,1 +93,1 @@\n-final inline class MyValue3Box {\n+final primitive class MyValue3Box {\n@@ -101,1 +101,1 @@\n-final inline class MyValue4 {\n+final primitive class MyValue4 {\n@@ -109,1 +109,1 @@\n-final inline class MyValue4Box {\n+final primitive class MyValue4Box {\n@@ -117,1 +117,1 @@\n-final inline class MyValue5 {\n+final primitive class MyValue5 {\n@@ -125,1 +125,1 @@\n-final inline class MyValue6 {\n+final primitive class MyValue6 {\n@@ -137,1 +137,1 @@\n-final inline class MyValue6Box {\n+final primitive class MyValue6Box {\n@@ -149,1 +149,1 @@\n-final inline class MyValue7 {\n+final primitive class MyValue7 {\n@@ -157,1 +157,1 @@\n-final inline class MyValue7Box {\n+final primitive class MyValue7Box {\n@@ -165,1 +165,1 @@\n-final inline class MyValue8 {\n+final primitive class MyValue8 {\n@@ -172,1 +172,1 @@\n-final inline class MyValue9 {\n+final primitive class MyValue9 {\n@@ -179,1 +179,1 @@\n-final inline class MyValue10 {\n+final primitive class MyValue10 {\n@@ -183,1 +183,1 @@\n-final inline class MyValue11 {\n+final primitive class MyValue11 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    static final inline class MyValue1 {\n+    static final primitive class MyValue1 {\n@@ -128,1 +128,1 @@\n-    static final inline class MyValue2 {\n+    static final primitive class MyValue2 {\n@@ -177,1 +177,1 @@\n-    static final inline class MyValue3 {\n+    static final primitive class MyValue3 {\n@@ -223,1 +223,1 @@\n-    static final inline class MyValue4 {\n+    static final primitive class MyValue4 {\n@@ -261,1 +261,1 @@\n-    static final inline class MyValue5 {\n+    static final primitive class MyValue5 {\n@@ -311,1 +311,1 @@\n-    static final inline class MyValue6 {\n+    static final primitive class MyValue6 {\n@@ -354,1 +354,1 @@\n-    static final inline class MyValue7 {\n+    static final primitive class MyValue7 {\n@@ -386,1 +386,1 @@\n-    static final inline class MyValue8 {\n+    static final primitive class MyValue8 {\n@@ -427,1 +427,1 @@\n-    static final inline class MyValue9 {\n+    static final primitive class MyValue9 {\n@@ -464,1 +464,1 @@\n-    static final inline class MyValue10 {\n+    static final primitive class MyValue10 {\n@@ -512,1 +512,1 @@\n-    static final inline class MyValue11 {\n+    static final primitive class MyValue11 {\n@@ -552,1 +552,1 @@\n-    static final inline class MyValue12 {\n+    static final primitive class MyValue12 {\n@@ -593,1 +593,1 @@\n-    static final inline class MyValue13 {\n+    static final primitive class MyValue13 {\n@@ -639,1 +639,1 @@\n-    static final inline class MyValue14 {\n+    static final primitive class MyValue14 {\n@@ -685,1 +685,1 @@\n-    static final inline class MyValue15 {\n+    static final primitive class MyValue15 {\n@@ -795,1 +795,1 @@\n-    static final inline class MyValue18 {\n+    static final primitive class MyValue18 {\n@@ -829,1 +829,1 @@\n-    static final inline class MyValue19 {\n+    static final primitive class MyValue19 {\n@@ -867,1 +867,1 @@\n-    static final inline class MyValue20 {\n+    static final primitive class MyValue20 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    static inline class UnresolvedInline {\n+    static primitive class UnresolvedInline {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    static inline class FooValue {\n+    static primitive class FooValue {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithfieldC1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    static inline class MyValue16 {\n+    static primitive class MyValue16 {\n@@ -72,1 +72,1 @@\n-    static inline class MyValue17 {\n+    static primitive class MyValue17 {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/hack\/GetUnresolvedInlineFieldWrongSignature.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    static inline class Point {\n+    static primitive class Point {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CheckcastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline class A {\n+    static primitive class A {\n@@ -46,1 +46,1 @@\n-    static inline class B {\n+    static primitive class B {\n@@ -53,1 +53,1 @@\n-    static inline class C {\n+    static primitive class C {\n@@ -60,1 +60,1 @@\n-    static inline class D {\n+    static primitive class D {\n@@ -71,1 +71,1 @@\n-    static inline class E {\n+    static primitive class E {\n@@ -77,1 +77,1 @@\n-    static inline class F {\n+    static primitive class F {\n@@ -84,1 +84,1 @@\n-    static inline class G {\n+    static primitive class G {\n@@ -89,1 +89,1 @@\n-    static inline class H {\n+    static primitive class H {\n@@ -99,1 +99,1 @@\n-    static inline class I {\n+    static primitive class I {\n@@ -105,1 +105,1 @@\n-    static inline class J {\n+    static primitive class J {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CircularityTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    static inline class InlineClass {\n+    static primitive class InlineClass {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CreationErrorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline class EmptyInline {\n+    static primitive class EmptyInline {\n@@ -46,1 +46,1 @@\n-    static inline class EmptyField {\n+    static primitive class EmptyField {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/EmptyInlineTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline class MyValue {\n+    static primitive class MyValue {\n@@ -44,1 +44,1 @@\n-    static inline class MyValue2 {\n+    static primitive class MyValue2 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Ifacmp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-    static final inline class Composition {\n+    static final primitive class Composition {\n@@ -604,1 +604,1 @@\n-    static final inline class ObjectValue {\n+    static final primitive class ObjectValue {\n@@ -638,1 +638,1 @@\n-    public static final inline class FooValue {\n+    public static final primitive class FooValue {\n@@ -736,1 +736,1 @@\n-    static final inline class BarValue {\n+    static final primitive class BarValue {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-    static final inline class MyInt implements Comparable<MyInt.ref> {\n+    static final primitive class MyInt implements Comparable<MyInt.ref> {\n@@ -280,1 +280,1 @@\n-    static final inline class MyOtherInt implements SomeSecondaryType {\n+    static final primitive class MyOtherInt implements SomeSecondaryType {\n@@ -468,1 +468,1 @@\n-    static final inline class MyPoint {\n+    static final primitive class MyPoint {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    static final inline class StaticSelf {\n+    static final primitive class StaticSelf {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeCreation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    static final inline class LocalDateValue implements LocalDate {\n+    static final primitive class LocalDateValue implements LocalDate {\n@@ -100,1 +100,1 @@\n-    static final inline class LocalTimeValue implements LocalTime {\n+    static final primitive class LocalTimeValue implements LocalTime {\n@@ -128,1 +128,1 @@\n-    static final inline class LocalDateTimeValue implements LocalDateTime {\n+    static final primitive class LocalDateTimeValue implements LocalDateTime {\n@@ -236,4 +236,4 @@\n-    static inline class MyByte  { byte  v = 0; }\n-    static inline class MyShort { short v = 0; }\n-    static inline class MyInt   { int   v = 0; }\n-    static inline class MyLong  { long  v = 0; }\n+    static primitive class MyByte  { byte  v = 0; }\n+    static primitive class MyShort { short v = 0; }\n+    static primitive class MyInt   { int   v = 0; }\n+    static primitive class MyLong  { long  v = 0; }\n@@ -290,5 +290,5 @@\n-    static inline class bbValue { byte b = 0; byte b2 = 0;}\n-    static inline class bsValue { byte b = 0; short s = 0;}\n-    static inline class siValue { short s = 0; int i = 0;}\n-    static inline class ssiValue { short s = 0; short s2 = 0; int i = 0;}\n-    static inline class blValue { byte b = 0; long l = 0; }\n+    static primitive class bbValue { byte b = 0; byte b2 = 0;}\n+    static primitive class bsValue { byte b = 0; short s = 0;}\n+    static primitive class siValue { short s = 0; int i = 0;}\n+    static primitive class ssiValue { short s = 0; short s2 = 0; int i = 0;}\n+    static primitive class blValue { byte b = 0; long l = 0; }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeDensity.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-public inline final class InlineWithJni {\n+public primitive final class InlineWithJni {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineWithJni.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public inline class IntValue {\n+public primitive class IntValue {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/IntValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline final class JumboInline {\n+public primitive final class JumboInline {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/JumboInline.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-public final inline class Long8Inline {\n+public final primitive class Long8Inline {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Long8Inline.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Element1 {\n+public primitive class Element1 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/Element1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-    static final inline class MyInt {\n+    static final primitive class MyInt {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ObjectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public final inline class Person {\n+public final primitive class Person {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Person.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline final class Point {\n+public primitive final class Point {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Point.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    static final inline class Value {\n+    static final primitive class Value {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/QuickeningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    static inline class ClassA {\n+    static primitive class ClassA {\n@@ -50,1 +50,1 @@\n-    static inline class ClassB {\n+    static primitive class ClassB {\n@@ -62,1 +62,1 @@\n-    static inline class ClassC {\n+    static primitive class ClassC {\n@@ -76,1 +76,1 @@\n-    static inline class ClassD {\n+    static primitive class ClassD {\n@@ -89,1 +89,1 @@\n-    static inline class ClassE {\n+    static primitive class ClassE {\n@@ -105,1 +105,1 @@\n-    static inline class ClassF {\n+    static primitive class ClassF {\n@@ -119,1 +119,1 @@\n-    static inline class ClassG {\n+    static primitive class ClassG {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/StaticFieldsTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-inline final class MyValueType {\n+primitive final class MyValueType {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Test8186715.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static inline class MyValue {\n+    static primitive class MyValue {\n@@ -45,1 +45,1 @@\n-    static inline class MyBigValue {\n+    static primitive class MyBigValue {\n@@ -55,1 +55,1 @@\n-    static inline class TestInlineType {\n+    static primitive class TestInlineType {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullability.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    static inline class IntInt {\n+    static primitive class IntInt {\n@@ -86,1 +86,1 @@\n-    static inline class Containee {\n+    static primitive class Containee {\n@@ -96,1 +96,1 @@\n-    static inline class Container {\n+    static primitive class Container {\n@@ -114,1 +114,1 @@\n-    static inline class LongLongLongLong {\n+    static primitive class LongLongLongLong {\n@@ -125,1 +125,1 @@\n-    static inline class BigValue {\n+    static primitive class BigValue {\n@@ -132,1 +132,1 @@\n-    static inline class InlineWithOops {\n+    static primitive class InlineWithOops {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestJNIArrays.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  static inline class Value {\n+  static primitive class Value {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestJNIIsSameObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline final class TestValue1 {\n+public primitive final class TestValue1 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestValue1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline final class TestValue2 {\n+public primitive final class TestValue2 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestValue2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline final class TestValue3 {\n+public primitive final class TestValue3 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestValue3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public inline final class TestValue4 {\n+public primitive final class TestValue4 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestValue4.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    static inline class Value1 {\n+    static primitive class Value1 {\n@@ -54,1 +54,1 @@\n-    static inline class Value2 {\n+    static primitive class Value2 {\n@@ -64,1 +64,1 @@\n-    static inline class Value3 {\n+    static primitive class Value3 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UnsafeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline final class Point {\n+    static primitive final class Point {\n@@ -55,1 +55,1 @@\n-    static inline final class Value {\n+    static primitive final class Value {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VDefaultTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline final class Point {\n+    static primitive final class Point {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VWithFieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    static inline class TPoint {\n+    static primitive class TPoint {\n@@ -179,1 +179,1 @@\n-    static inline class NTPoint implements NT {\n+    static primitive class NTPoint implements NT {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueTearing.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-    inline class MyInt {\n+    primitive class MyInt {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VarArgsArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    static inline class MyValue {\n+    static primitive class MyValue {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VolatileTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    public static final inline class V {\n+    public static final primitive class V {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-public inline class InlineType {\n+public primitive class InlineType {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/InlineType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public inline final class VTAssignability implements II {\n+public primitive final class VTAssignability implements II {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTAssignability.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-public inline final class VTMonitor {\n+public primitive final class VTMonitor {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTMonitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    static inline class SimpleInline {\n+    static primitive class SimpleInline {\n","filename":"test\/jdk\/valhalla\/valuetypes\/InlineConstructorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    static inline class Value {\n+    static primitive class Value {\n","filename":"test\/jdk\/valhalla\/valuetypes\/InlineTypeConversionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline class Pointer<X> {\n+    static primitive class Pointer<X> {\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaConversion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-public final inline class Line {\n+public final primitive class Line {\n","filename":"test\/jdk\/valhalla\/valuetypes\/Line.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-public inline class NonFlattenValue {\n+public primitive class NonFlattenValue {\n","filename":"test\/jdk\/valhalla\/valuetypes\/NonFlattenValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-    static inline class MyValue1 {\n+    static primitive class MyValue1 {\n@@ -237,1 +237,1 @@\n-    static inline class InlineType1 implements Number {\n+    static primitive class InlineType1 implements Number {\n@@ -247,1 +247,1 @@\n-    static inline class InlineType2 implements Number {\n+    static primitive class InlineType2 implements Number {\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-public inline class Point {\n+public primitive class Point {\n","filename":"test\/jdk\/valhalla\/valuetypes\/Point.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-    static inline class ValueTest {\n+    static primitive class ValueTest {\n","filename":"test\/jdk\/valhalla\/valuetypes\/QTypeDescriptorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    static inline class SerializablePoint implements Serializable {\n+    static primitive class SerializablePoint implements Serializable {\n@@ -93,1 +93,1 @@\n-    static inline class ExternalizablePoint implements Externalizable {\n+    static primitive class ExternalizablePoint implements Externalizable {\n@@ -133,1 +133,1 @@\n-    static inline class SerializableFoo implements Serializable {\n+    static primitive class SerializableFoo implements Serializable {\n@@ -155,1 +155,1 @@\n-    static inline class ExternalizableFoo implements Externalizable {\n+    static primitive class ExternalizableFoo implements Externalizable {\n","filename":"test\/jdk\/valhalla\/valuetypes\/Serialization.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    static inline class DefaultConstructor implements Cons {\n+    static primitive class DefaultConstructor implements Cons {\n@@ -46,1 +46,1 @@\n-    static inline class ConstructorWithArgs implements Cons {\n+    static primitive class ConstructorWithArgs implements Cons {\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticInitFactoryTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    static inline class Value {\n+    static primitive class Value {\n","filename":"test\/jdk\/valhalla\/valuetypes\/StreamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    static inline class MyValue {\n+    static primitive class MyValue {\n@@ -135,1 +135,1 @@\n-    static inline class MyValue2 {\n+    static primitive class MyValue2 {\n","filename":"test\/jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    static inline class EmptyInline {\n+    static primitive class EmptyInline {\n@@ -48,1 +48,1 @@\n-    static inline class InlineValue {\n+    static primitive class InlineValue {\n","filename":"test\/jdk\/valhalla\/valuetypes\/UninitializedInlineValueTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-public inline class Value {\n+public primitive class Value {\n@@ -151,1 +151,1 @@\n-    static inline class IntValue implements Number {\n+    static primitive class IntValue implements Number {\n@@ -161,1 +161,1 @@\n-    static inline class ShortValue implements Number {\n+    static primitive class ShortValue implements Number {\n","filename":"test\/jdk\/valhalla\/valuetypes\/Value.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    public static inline class Value {\n+    public static primitive class Value {\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueBootstrapMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -313,2 +313,1 @@\n-            \"java.lang.__value__\",\n-            \"java.lang.__inline__\"\n+            \"java.lang.__primitive__\"\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-inline class InlineBogusOverride {\n+primitive class InlineBogusOverride {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InlineMayNotOverride.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public inline class ProjectionCantBeInstantiated {\n+public primitive class ProjectionCantBeInstantiated {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProjectionCantBeInstantiated.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-final inline class Blah {\n+final primitive class Blah {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueInstanceFieldExpectedHere.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-inline final class ValuesNotSupported {}\n+primitive final class ValuesNotSupported {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValuesNotSupported.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-final inline class Blah {\n+final primitive class Blah {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WithFieldOperatorDisallowed.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        return new inline Function<>() {\n+        return new primitive Function<>() {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/AnonymousValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-        Object o = new inline Comparable<String>() {\n+        Object o = new primitive Comparable<String>() {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/AnonymousValueType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline class VT {\n+    static primitive class VT {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ArrayCreationWithQuestion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public inline class ArrayRelationsTest {\n+public primitive class ArrayRelationsTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ArrayRelationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-inline class MyValue1 {\n+primitive class MyValue1 {\n@@ -40,1 +40,1 @@\n-    inline class MyValue2 {\n+    primitive class MyValue2 {\n@@ -51,1 +51,1 @@\n-inline class MyValue3 {\n+primitive class MyValue3 {\n@@ -58,1 +58,1 @@\n-    inline class MyValue4 {\n+    primitive class MyValue4 {\n@@ -73,1 +73,1 @@\n-inline class MyValue5 implements MyInterface {\n+primitive class MyValue5 implements MyInterface {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/AssortedTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        inline class V<T> {}\n+        primitive class V<T> {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/AttributesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @summary Test that inline types work well with TWR\n+ * @summary Test that primitive classes work well with TWR\n@@ -35,1 +35,1 @@\n-    inline static class Foo implements AutoCloseable {\n+    primitive static class Foo implements AutoCloseable {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/AutoCloseableTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-    inline class I0 extends SuperclassCollections.BadSuper {} \/\/ ERROR: concrete super class\n+    primitive class I0 extends SuperclassCollections.BadSuper {} \/\/ ERROR: concrete super class\n@@ -17,3 +17,3 @@\n-    inline class I3 extends SuperclassCollections.GoodSuper implements SuperclassCollections.GoodSuperInterface {} \/\/ jlO can be indirect super class\n-    inline class I4 extends SuperclassCollections.Integer {}\n-    inline class I5 extends Number {\n+    primitive class I3 extends SuperclassCollections.GoodSuper implements SuperclassCollections.GoodSuperInterface {} \/\/ jlO can be indirect super class\n+    primitive class I4 extends SuperclassCollections.Integer {}\n+    primitive class I5 extends Number {\n@@ -29,1 +29,1 @@\n-    inline class I6 extends SuperclassCollections.SuperWithInstanceField_01 {} \/\/ ERROR:\n+    primitive class I6 extends SuperclassCollections.SuperWithInstanceField_01 {} \/\/ ERROR:\n@@ -31,1 +31,1 @@\n-    inline class I7 extends SuperclassCollections.SuperWithStaticField {} \/\/ OK.\n+    primitive class I7 extends SuperclassCollections.SuperWithStaticField {} \/\/ OK.\n@@ -36,1 +36,1 @@\n-    inline class I8 extends SuperclassCollections.SuperWithEmptyNoArgCtor_02 {}\n+    primitive class I8 extends SuperclassCollections.SuperWithEmptyNoArgCtor_02 {}\n@@ -38,1 +38,1 @@\n-    inline class I9 extends SuperclassCollections.SuperWithNonEmptyNoArgCtor_01 {} \/\/ ERROR:\n+    primitive class I9 extends SuperclassCollections.SuperWithNonEmptyNoArgCtor_01 {} \/\/ ERROR:\n@@ -40,1 +40,1 @@\n-    inline class I10 extends SuperclassCollections.SuperWithArgedCtor_01 {} \/\/ ERROR:\n+    primitive class I10 extends SuperclassCollections.SuperWithArgedCtor_01 {} \/\/ ERROR:\n@@ -42,1 +42,1 @@\n-    inline class I11 extends SuperclassCollections.SuperWithInstanceInit_01 {} \/\/ ERROR:\n+    primitive class I11 extends SuperclassCollections.SuperWithInstanceInit_01 {} \/\/ ERROR:\n@@ -44,1 +44,1 @@\n-    inline class I12 extends SuperclassCollections.SuperWithSynchronizedMethod_1 {} \/\/ ERROR:\n+    primitive class I12 extends SuperclassCollections.SuperWithSynchronizedMethod_1 {} \/\/ ERROR:\n@@ -46,1 +46,1 @@\n-    inline class I13 extends SuperclassCollections.InnerSuper {}\n+    primitive class I13 extends SuperclassCollections.InnerSuper {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/BinarySuperclassConstraints.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,7 +1,7 @@\n-BinarySuperclassConstraints.java:14:12: compiler.err.inline.type.must.not.implement.identity.object: BinarySuperclassConstraints.I0\n-BinarySuperclassConstraints.java:29:12: compiler.err.super.field.not.allowed: x, BinarySuperclassConstraints.I6, SuperclassCollections.SuperWithInstanceField\n-BinarySuperclassConstraints.java:38:12: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassCollections.SuperWithNonEmptyNoArgCtor(), BinarySuperclassConstraints.I9, SuperclassCollections.SuperWithNonEmptyNoArgCtor\n-BinarySuperclassConstraints.java:40:12: compiler.err.super.constructor.cannot.take.arguments: SuperclassCollections.SuperWithArgedCtor(java.lang.String), BinarySuperclassConstraints.I10, SuperclassCollections.SuperWithArgedCtor\n-BinarySuperclassConstraints.java:42:12: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassCollections.SuperWithInstanceInit(), BinarySuperclassConstraints.I11, SuperclassCollections.SuperWithInstanceInit\n-BinarySuperclassConstraints.java:44:12: compiler.err.super.method.cannot.be.synchronized: foo(), BinarySuperclassConstraints.I12, SuperclassCollections.SuperWithSynchronizedMethod\n-BinarySuperclassConstraints.java:46:12: compiler.err.encl.class.required: SuperclassCollections.InnerSuper\n+BinarySuperclassConstraints.java:14:15: compiler.err.inline.type.must.not.implement.identity.object: BinarySuperclassConstraints.I0\n+BinarySuperclassConstraints.java:29:15: compiler.err.super.field.not.allowed: x, BinarySuperclassConstraints.I6, SuperclassCollections.SuperWithInstanceField\n+BinarySuperclassConstraints.java:38:15: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassCollections.SuperWithNonEmptyNoArgCtor(), BinarySuperclassConstraints.I9, SuperclassCollections.SuperWithNonEmptyNoArgCtor\n+BinarySuperclassConstraints.java:40:15: compiler.err.super.constructor.cannot.take.arguments: SuperclassCollections.SuperWithArgedCtor(java.lang.String), BinarySuperclassConstraints.I10, SuperclassCollections.SuperWithArgedCtor\n+BinarySuperclassConstraints.java:42:15: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassCollections.SuperWithInstanceInit(), BinarySuperclassConstraints.I11, SuperclassCollections.SuperWithInstanceInit\n+BinarySuperclassConstraints.java:44:15: compiler.err.super.method.cannot.be.synchronized: foo(), BinarySuperclassConstraints.I12, SuperclassCollections.SuperWithSynchronizedMethod\n+BinarySuperclassConstraints.java:46:15: compiler.err.encl.class.required: SuperclassCollections.InnerSuper\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/BinarySuperclassConstraints.out","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline class VT {\n+    static primitive class VT {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/BoxValCastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class CanonicalCtorTest {\n+public primitive class CanonicalCtorTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CanonicalCtorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    final inline class XX {\n+    final primitive class XX {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CastNullCheckTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,7 +33,7 @@\n-\tstatic inline class Point {\n-\t\tint x;\n-\t\tint y;\n-\t\tPoint() {\n-\t\t\tx = y = 1234; \/\/ Problematic\n-\t\t}\n-\t}\n+    static primitive class Point {\n+        int x;\n+        int y;\n+        Point() {\n+            x = y = 1234; \/\/ Problematic\n+        }\n+    }\n@@ -41,9 +41,9 @@\n-\tstatic inline class LongPoint {\n-\t\tlong x;\n-\t\tlong y;\n-\t\tLongPoint() {\n-\t\t\tx = y = 1234; \/\/ Problematic\n-\t\t}\n-\t}\n-\tpublic static void main(String[] args) {\n-\t\tPoint p = new Point();\n+    static primitive class LongPoint {\n+        long x;\n+        long y;\n+        LongPoint() {\n+            x = y = 1234; \/\/ Problematic\n+        }\n+    }\n+    public static void main(String[] args) {\n+        Point p = new Point();\n@@ -56,1 +56,1 @@\n-\t}\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ChainedAssignmentTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-inline final class Point {\n+primitive final class Point {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckBadSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-final inline class CheckClone {\n-    final inline class InnerValue {\n+final primitive class CheckClone {\n+    final primitive class InnerValue {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckClone.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-final inline class CheckCyclicMembership {\n+final primitive class CheckCyclicMembership {\n@@ -12,1 +12,1 @@\n-    inline final class InnerValue {\n+    primitive final class InnerValue {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckCyclicMembership.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-final inline class CheckExtends extends Object {\n+final primitive class CheckExtends extends Object {\n@@ -10,1 +10,1 @@\n-    static inline class NestedValue extends Nested {}\n+    static primitive class NestedValue extends Nested {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckExtends.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckExtends.java:10:19: compiler.err.inline.type.must.not.implement.identity.object: CheckExtends.NestedValue\n+CheckExtends.java:10:22: compiler.err.inline.type.must.not.implement.identity.object: CheckExtends.NestedValue\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckExtends.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    static inline class Val {\n+    static primitive class Val {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFeatureGate1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public inline class CheckFieldDescriptors {\n+public primitive class CheckFieldDescriptors {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFieldDescriptors.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-inline class CheckFinal { \/\/ implicitly final\n+primitive class CheckFinal { \/\/ implicitly final\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFinal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-final inline class CheckFinalize {\n+final primitive class CheckFinalize {\n@@ -12,1 +12,1 @@\n-    final inline class CheckFinalizeInner { int x = 10; }\n+    final primitive class CheckFinalizeInner { int x = 10; }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFinalize.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-final inline class CheckFlattenableCycles {\n+final primitive class CheckFlattenableCycles {\n@@ -12,1 +12,1 @@\n-    inline final class InnerValue {\n+    primitive final class InnerValue {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFlattenableCycles.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        inline  class Inner {\n+        primitive  class Inner {\n@@ -45,1 +45,1 @@\n-    public inline class ValueOuter {\n+    public primitive class ValueOuter {\n@@ -47,1 +47,1 @@\n-        inline  class Inner {\n+        primitive  class Inner {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFlattenableSyntheticFields.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-final inline class CheckIdentityHash {\n+final primitive class CheckIdentityHash {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckIdentityHash.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-public final inline class CheckIdentityHash01 {\n+public final primitive class CheckIdentityHash01 {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckIdentityHash01.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-            inline  class Inner {\n+            primitive  class Inner {\n@@ -49,1 +49,1 @@\n-    public inline class ValueOuter {\n+    public primitive class ValueOuter {\n@@ -53,1 +53,1 @@\n-            inline class Inner {\n+            primitive class Inner {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckLocalClasses.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-inline final class Point {\n+primitive final class Point {\n@@ -9,2 +9,2 @@\n-    inline interface I { int x = 10; } \/\/ Error\n-    inline abstract class A { int x = 10; } \/\/ Error\n+    primitive interface I { int x = 10; } \/\/ Error\n+    primitive abstract class A { int x = 10; } \/\/ Error\n@@ -17,1 +17,1 @@\n-    inline static final class SinnerValue {\n+    primitive static final class SinnerValue {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckMakeDefault.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-CheckMakeDefault.java:9:12: compiler.err.illegal.combination.of.modifiers: interface, inline\n-CheckMakeDefault.java:10:21: compiler.err.illegal.combination.of.modifiers: abstract, inline\n+CheckMakeDefault.java:9:15: compiler.err.illegal.combination.of.modifiers: interface, inline\n+CheckMakeDefault.java:10:24: compiler.err.illegal.combination.of.modifiers: abstract, inline\n@@ -13,1 +13,1 @@\n-12 errors\n\\ No newline at end of file\n+12 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckMakeDefault.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-    inline final class V {\n+    primitive final class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckMultiDimensionalArrayStore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-final inline class CheckNullAssign {\n+final primitive class CheckNullAssign {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckNullAssign.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-inline final class CheckNullCastable {\n+primitive final class CheckNullCastable {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckNullCastable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-inline class CheckNullWithQuestion {\n+primitive class CheckNullWithQuestion {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckNullWithQuestion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-public inline class CheckObjectMethodsUsage {\n+public primitive class CheckObjectMethodsUsage {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckObjectMethodsUsage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-inline class X {\n+primitive class X {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckQuestionInMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,14 +29,14 @@\n-\tint x = 123;\n-\tpublic class O {\n-\t\tint o = 456;\n-\t\tpublic class M {\n-\t\t\tint m = 789;\n-\t\t\tpublic inline class I {\n-\t\t\t\tint i = 0;\n-\t\t\t\tI() {\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\tString foo() {\n-\t\t\t\t\treturn this.toString();\n-\t\t\t\t}\n-\t\t\t}\n+    int x = 123;\n+    public class O {\n+        int o = 456;\n+        public class M {\n+            int m = 789;\n+            public primitive class I {\n+                int i = 0;\n+                I() {\n+\n+                }\n+                String foo() {\n+                    return this.toString();\n+                }\n+            }\n@@ -46,2 +46,2 @@\n-\t\t}\n-\t}\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSeparateCompile0.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-inline final class CheckStaticFinalAssign {\n+primitive final class CheckStaticFinalAssign {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckStaticFinalAssign.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-public final inline class CheckSync {\n+public final primitive class CheckSync {\n@@ -14,1 +14,1 @@\n-    final inline class Val {\n+    final primitive class Val {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSync.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-inline final class CheckSynchronized {\n+primitive final class CheckSynchronized {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSynchronized.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-inline class V {\n+primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckThisLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -15,2 +15,2 @@\n-   inline int x;\n-   inline int foo() {\n+   primitive int x;\n+   primitive int foo() {\n@@ -18,4 +18,4 @@\n-   inline interface IFace {}\n-   inline @interface Annot {}\n-   inline enum Enum {}\n-   inline abstract class Inner {}\n+   primitive interface IFace {}\n+   primitive @interface Annot {}\n+   primitive enum Enum {}\n+   primitive abstract class Inner {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckValueModifier.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,6 +1,6 @@\n-CheckValueModifier.java:18:11: compiler.err.illegal.combination.of.modifiers: interface, inline\n-CheckValueModifier.java:19:12: compiler.err.illegal.combination.of.modifiers: interface, inline\n-CheckValueModifier.java:20:11: compiler.err.mod.not.allowed.here: inline\n-CheckValueModifier.java:21:20: compiler.err.illegal.combination.of.modifiers: abstract, inline\n-CheckValueModifier.java:15:15: compiler.err.mod.not.allowed.here: inline\n-CheckValueModifier.java:16:15: compiler.err.mod.not.allowed.here: inline\n+CheckValueModifier.java:18:14: compiler.err.illegal.combination.of.modifiers: interface, inline\n+CheckValueModifier.java:19:15: compiler.err.illegal.combination.of.modifiers: interface, inline\n+CheckValueModifier.java:20:14: compiler.err.mod.not.allowed.here: inline\n+CheckValueModifier.java:21:23: compiler.err.illegal.combination.of.modifiers: abstract, inline\n+CheckValueModifier.java:15:18: compiler.err.mod.not.allowed.here: inline\n+CheckValueModifier.java:16:18: compiler.err.mod.not.allowed.here: inline\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckValueModifier.out","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-final inline class ClassLiteralNegativeTest {\n+final primitive class ClassLiteralNegativeTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralNegativeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    public static inline class Foo {\n+    public static primitive class Foo {\n@@ -27,1 +27,1 @@\n-    public static inline class Bar implements I {\n+    public static primitive class Bar implements I {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    static inline class V implements I {\n+    static primitive class V implements I {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    static inline class Point {\n+    static primitive class Point {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CompilerNoBogusAssert.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-inline final class Point {\n+primitive final class Point {\n@@ -53,1 +53,1 @@\n-    static final inline class Value {\n+    static final primitive class Value {\n@@ -61,1 +61,1 @@\n-inline final class PointBug2 {\n+primitive final class PointBug2 {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CompilesJustFine.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    static inline class V {}\n+    static primitive class V {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ConditionalInlineTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    static inline class Node implements I {}\n+    static primitive class Node implements I {}\n@@ -35,1 +35,1 @@\n-    static inline class XNodeWrapper implements I {}\n+    static primitive class XNodeWrapper implements I {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ConditionalTypeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    inline static class Foo extends S implements I<Integer> {\n+    primitive static class Foo extends S implements I<Integer> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ConflictingSuperInterfaceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ConflictingSuperInterfaceTest.java:12:19: compiler.err.cant.inherit.diff.arg: ConflictingSuperInterfaceTest.I, java.lang.Integer, java.lang.String\n+ConflictingSuperInterfaceTest.java:12:22: compiler.err.cant.inherit.diff.arg: ConflictingSuperInterfaceTest.I, java.lang.Integer, java.lang.String\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ConflictingSuperInterfaceTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    static final inline class X {\n+    static final primitive class X {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ConstantPropagationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-    static final inline class V {\n+    static final primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CovariantArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class CtorChain {\n+public primitive class CtorChain {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CtorChain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    static inline class Val {\n+    static primitive class Val {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DefaultNonInlines.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-public inline class DocLintSyntheticsTest {\n+public primitive class DocLintSyntheticsTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DocLintSyntheticsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-public inline class DualPathInnerType  {\n+public primitive class DualPathInnerType  {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DualPathInnerType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-public final inline class EmptyValueTest {\n+public final primitive class EmptyValueTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/EmptyValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    inline static class Foo<V> implements Iterable<V> {\n+    primitive static class Foo<V> implements Iterable<V> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/EnhancedForLoopTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-inline class OptionalInt {\n+primitive class OptionalInt {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ExplicitLambdaWithNullableTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-inline class OptionalInt {\n+primitive class OptionalInt {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ExplicitLambdaWithNullableTypes2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-inline class OptionalInt {\n+primitive class OptionalInt {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ExplicitLambdaWithNullableTypes3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-final inline class Blah {\n+final primitive class Blah {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/FinalFieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    public inline final class V {\n+    public primitive final class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/FlattenableFlagFromClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-    inline final class V {\n+    primitive final class V {\n@@ -12,1 +12,1 @@\n-        inline final class X {\n+        primitive final class X {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/FlattenableNegativeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-   static inline class Entry<E> {\n+   static primitive class Entry<E> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericArrayRegression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    public inline class Value<T> {\n+    public primitive class Value<T> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-inline\n+primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericInlineTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- @__inline__ class Foo implements Comparable<Foo.ref>{\n+ @__primitive__ class Foo implements Comparable<Foo.ref>{\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericsAndValues1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  @__inline__ class CaptureBug {\n+  @__primitive__ class CaptureBug {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericsAndValues2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-@__inline__ class StreamBug {\n+@__primitive__ class StreamBug {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericsAndValues3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-inline class InlineType<E> {\n+primitive class InlineType<E> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericsAndValues4.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-inline class Optional<T> {\n+primitive class Optional<T> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericsAndValues5.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    inline class V {\n+    primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GenericsWithQuestion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -20,3 +20,3 @@\n-        new inline @Annot inline Comparable <String>() {};\n-        int [] ia = new inline int[10];\n-        new inline String(\"Hello\");\n+        new primitive @Annot primitive Comparable <String>() {};\n+        int [] ia = new primitive int[10];\n+        new primitive String(\"Hello\");\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/IllegalByValueTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-IllegalByValueTest.java:20:27: compiler.err.repeated.modifier\n-IllegalByValueTest.java:21:32: compiler.err.mod.not.allowed.here: inline\n+IllegalByValueTest.java:20:30: compiler.err.repeated.modifier\n+IllegalByValueTest.java:21:35: compiler.err.mod.not.allowed.here: inline\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/IllegalByValueTest.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        new @Annot inline @Annot IllegalByValueTest2() {};\n+        new @Annot primitive @Annot IllegalByValueTest2() {};\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/IllegalByValueTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-IllegalByValueTest2.java:19:27: compiler.err.duplicate.annotation.missing.container: IllegalByValueTest2.Annot\n-IllegalByValueTest2.java:19:56: compiler.err.inline.type.must.not.implement.identity.object: compiler.misc.anonymous.class: IllegalByValueTest2\n+IllegalByValueTest2.java:19:30: compiler.err.duplicate.annotation.missing.container: IllegalByValueTest2.Annot\n+IllegalByValueTest2.java:19:59: compiler.err.inline.type.must.not.implement.identity.object: compiler.misc.anonymous.class: IllegalByValueTest2\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/IllegalByValueTest2.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-public inline class InferredValueParameterizationTest {\n+public primitive class InferredValueParameterizationTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InferredValueParameterizationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    @__inline__\n+    @__primitive__\n@@ -12,1 +12,1 @@\n-        new @__inline__ I() {\n+        new @__primitive__ I() {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InlineAnnotationOnAnonymousClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-@__inline__\n+@__primitive__\n@@ -12,1 +12,1 @@\n-@__inline__\n+@__primitive__\n@@ -16,1 +16,1 @@\n-@java.lang.__inline__\n+@java.lang.__primitive__\n@@ -24,1 +24,1 @@\n-@__inline__\n+@__primitive__\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InlineAnnotationTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public inline class InlineClassTest {\n+public primitive class InlineClassTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InlineClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    private inline class Y<U> implements I<U> {\n+    private primitive class Y<U> implements I<U> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InlineDiamondTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    static inline class Inner {\n+    static primitive class Inner {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InnerClassAttributeValuenessTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    final inline class Y {\n+    final primitive class Y {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InnerValueNew.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    static inline class V implements InlineObject {\n+    static primitive class V implements InlineObject {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InstanceOfTopTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-public inline class InstanceofProjectionArray {\n+public primitive class InstanceofProjectionArray {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InstanceofProjectionArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class IntercastTest {\n+public primitive class IntercastTest {\n@@ -35,1 +35,1 @@\n-    static inline class Tuple {\n+    static primitive class Tuple {\n@@ -45,1 +45,1 @@\n-    static inline class Cursor {\n+    static primitive class Cursor {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/IntercastTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class IntercastTest2 {\n+public primitive class IntercastTest2 {\n@@ -35,1 +35,1 @@\n-    static inline class Tuple {\n+    static primitive class Tuple {\n@@ -45,1 +45,1 @@\n-    static inline class Cursor {\n+    static primitive class Cursor {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/IntercastTest2.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        final inline class Y {\n+        final primitive class Y {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/LocalValueNew.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class LookupOnLoxTest {\n+public primitive class LookupOnLoxTest {\n@@ -35,1 +35,1 @@\n-    static inline class Tuple {\n+    static primitive class Tuple {\n@@ -45,1 +45,1 @@\n-    static inline class Cursor {\n+    static primitive class Cursor {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/LookupOnLoxTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class LookupOnLoxTest2 {\n+public primitive class LookupOnLoxTest2 {\n@@ -35,1 +35,1 @@\n-    static inline class Tuple {\n+    static primitive class Tuple {\n@@ -45,1 +45,1 @@\n-    static inline class Cursor {\n+    static primitive class Cursor {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/LookupOnLoxTest2.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    static inline class XNodeWrapper implements I {\n+    static primitive class XNodeWrapper implements I {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/LubWithInlines.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    inline class V {\n+    primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/MiscThisLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-inline public final class MyValue {\n+primitive public final class MyValue {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/MyValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static inline final class V implements I { int x = 0; }\n+    static primitive final class V implements I { int x = 0; }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/NoCrashTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-    static inline class Bar {\n+    static primitive class Bar {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/NoVolatileFields.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    static inline class V {\n+    static primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/OverloadingPhaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    static inline class X {\n+    static primitive class X {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/OverloadingPhaseTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class ParameterizedDefault<E> {\n+public primitive class ParameterizedDefault<E> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ParameterizedDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-inline class Point {\n+primitive class Point {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/Point.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static inline class VT {\n+    static primitive class VT {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ProjectedArrayDotClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-final inline class ProjectionInstantiationTest {\n+final primitive class ProjectionInstantiationTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ProjectionInstantiationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        String code = \"inline class C {\\n\" +\n+        String code = \"primitive class C {\\n\" +\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ProjectionRelationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  inline static class Foo<V> {\n+  primitive static class Foo<V> {\n@@ -57,1 +57,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ProperTypeApplySelectTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-inline class QPoint {\n+primitive class QPoint {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/QPoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-inline class QTypedValue {\n+primitive class QTypedValue {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/QTypedValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-inline class A {\n+primitive class A {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/QualifiedSuperCtor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline  class QualifiedThisTest {\n+public primitive class QualifiedThisTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/QualifiedThisTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public inline class Range<T> {\n+public primitive class Range<T> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/Range.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public inline class RefDotClass {\n+public primitive class RefDotClass {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RefDotClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-inline class Point {\n+primitive class Point {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SeparateCompileTest01.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-\tstatic inline class V {\n+    static primitive class V {\n@@ -40,1 +40,1 @@\n-\t\tV() {\n+        V() {\n@@ -42,1 +42,1 @@\n-\t\t}\n+        }\n@@ -44,1 +44,1 @@\n-\t\tV(int x) {\n+        V(int x) {\n@@ -47,1 +47,1 @@\n-\t\t}\n+        }\n@@ -52,1 +52,1 @@\n-\t}\n+    }\n@@ -54,2 +54,2 @@\n-\tpublic static void main(String[] args) {\n-\t\tV v = new V();\n+    public static void main(String[] args) {\n+        V v = new V();\n@@ -60,1 +60,1 @@\n-\t\tv = new V(8765);\n+        v = new V(8765);\n@@ -65,1 +65,1 @@\n-\t}\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SideEffectTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public inline class SignatureTest<T> implements java.io.Serializable {\n+public primitive class SignatureTest<T> implements java.io.Serializable {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SignatureTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-public inline class SmallSet {\n+public primitive class SmallSet {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SmallSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-public inline class SneakThroSuperCallTest { \n+public primitive class SneakThroSuperCallTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SneakThroSuperCallTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    static inline class MyValue {\n+    static primitive class MyValue {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/StaticSelectedThroughProjection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    public static inline class X {\n+    public static primitive class X {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/StreamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -14,3 +14,3 @@\n-    inline class I0 extends BadSuper {} \/\/ ERROR: concrete super class\n-    inline class I1 extends Object {}   \/\/ OK: concrete jlO can be express-superclass\n-    inline class I2 {} \/\/ OK\n+    primitive class I0 extends BadSuper {} \/\/ ERROR: concrete super class\n+    primitive class I1 extends Object {}   \/\/ OK: concrete jlO can be express-superclass\n+    primitive class I2 {} \/\/ OK\n@@ -21,1 +21,1 @@\n-    inline class I3 extends GoodSuper implements GoodSuperInterface {} \/\/ jlO can be indirect super class\n+    primitive class I3 extends GoodSuper implements GoodSuperInterface {} \/\/ jlO can be indirect super class\n@@ -28,2 +28,2 @@\n-    inline class I4 extends Integer {}\n-    inline class I5 extends Number {\n+    primitive class I4 extends Integer {}\n+    primitive class I5 extends Number {\n@@ -44,1 +44,1 @@\n-    inline class I6 extends SuperWithInstanceField_01 {} \/\/ ERROR:\n+    primitive class I6 extends SuperWithInstanceField_01 {} \/\/ ERROR:\n@@ -50,1 +50,1 @@\n-    inline class I7 extends SuperWithStaticField {} \/\/ OK.\n+    primitive class I7 extends SuperWithStaticField {} \/\/ OK.\n@@ -68,1 +68,1 @@\n-    inline class I8 extends SuperWithEmptyNoArgCtor_02 {}\n+    primitive class I8 extends SuperWithEmptyNoArgCtor_02 {}\n@@ -76,1 +76,1 @@\n-    inline class I9 extends SuperWithNonEmptyNoArgCtor_01 {} \/\/ ERROR:\n+    primitive class I9 extends SuperWithNonEmptyNoArgCtor_01 {} \/\/ ERROR:\n@@ -85,1 +85,1 @@\n-    inline class I10 extends SuperWithArgedCtor_01 {} \/\/ ERROR:\n+    primitive class I10 extends SuperWithArgedCtor_01 {} \/\/ ERROR:\n@@ -98,1 +98,1 @@\n-    inline class I11 extends SuperWithInstanceInit_01 {} \/\/ ERROR:\n+    primitive class I11 extends SuperWithInstanceInit_01 {} \/\/ ERROR:\n@@ -106,1 +106,1 @@\n-    inline class I12 extends SuperWithSynchronizedMethod_1 {} \/\/ ERROR:\n+    primitive class I12 extends SuperWithSynchronizedMethod_1 {} \/\/ ERROR:\n@@ -110,1 +110,1 @@\n-    inline class I13 extends InnerSuper {}\n+    primitive class I13 extends InnerSuper {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperclassConstraints.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1,7 +1,7 @@\n-SuperclassConstraints.java:14:12: compiler.err.inline.type.must.not.implement.identity.object: SuperclassConstraints.I0\n-SuperclassConstraints.java:44:12: compiler.err.super.field.not.allowed: x, SuperclassConstraints.I6, SuperclassConstraints.SuperWithInstanceField\n-SuperclassConstraints.java:76:12: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassConstraints.SuperWithNonEmptyNoArgCtor(), SuperclassConstraints.I9, SuperclassConstraints.SuperWithNonEmptyNoArgCtor\n-SuperclassConstraints.java:85:12: compiler.err.super.constructor.cannot.take.arguments: SuperclassConstraints.SuperWithArgedCtor(java.lang.String), SuperclassConstraints.I10, SuperclassConstraints.SuperWithArgedCtor\n-SuperclassConstraints.java:98:12: compiler.err.super.class.declares.init.block: SuperclassConstraints.I11, SuperclassConstraints.SuperWithInstanceInit\n-SuperclassConstraints.java:106:12: compiler.err.super.method.cannot.be.synchronized: foo(), SuperclassConstraints.I12, SuperclassConstraints.SuperWithSynchronizedMethod\n-SuperclassConstraints.java:110:12: compiler.err.super.class.cannot.be.inner: SuperclassConstraints.I13, SuperclassConstraints.InnerSuper\n+SuperclassConstraints.java:14:15: compiler.err.inline.type.must.not.implement.identity.object: SuperclassConstraints.I0\n+SuperclassConstraints.java:44:15: compiler.err.super.field.not.allowed: x, SuperclassConstraints.I6, SuperclassConstraints.SuperWithInstanceField\n+SuperclassConstraints.java:76:15: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassConstraints.SuperWithNonEmptyNoArgCtor(), SuperclassConstraints.I9, SuperclassConstraints.SuperWithNonEmptyNoArgCtor\n+SuperclassConstraints.java:85:15: compiler.err.super.constructor.cannot.take.arguments: SuperclassConstraints.SuperWithArgedCtor(java.lang.String), SuperclassConstraints.I10, SuperclassConstraints.SuperWithArgedCtor\n+SuperclassConstraints.java:98:15: compiler.err.super.class.declares.init.block: SuperclassConstraints.I11, SuperclassConstraints.SuperWithInstanceInit\n+SuperclassConstraints.java:106:15: compiler.err.super.method.cannot.be.synchronized: foo(), SuperclassConstraints.I12, SuperclassConstraints.SuperWithSynchronizedMethod\n+SuperclassConstraints.java:110:15: compiler.err.super.class.cannot.be.inner: SuperclassConstraints.I13, SuperclassConstraints.InnerSuper\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperclassConstraints.out","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-inline final class TestValue1 {\n+primitive final class TestValue1 {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TestQualifierOnInit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public inline class ThisIsNotAnInstanceField {\n+public primitive class ThisIsNotAnInstanceField {\n@@ -39,1 +39,1 @@\n-    inline class Inner {\n+    primitive class Inner {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ThisIsNotAnInstanceField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-    static inline class V1 implements IdentityObject { int x = 0; }\n-    static inline class V2 implements InlineObject {}\n-    static inline class V3 implements InlineObject, InlineObject  {}\n+    static primitive class V1 implements IdentityObject { int x = 0; }\n+    static primitive class V2 implements InlineObject {}\n+    static primitive class V3 implements InlineObject, InlineObject  {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TopInterfaceNegativeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-TopInterfaceNegativeTest.java:29:39: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)\n+TopInterfaceNegativeTest.java:29:42: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)\n@@ -8,3 +8,3 @@\n-TopInterfaceNegativeTest.java:30:39: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)\n-TopInterfaceNegativeTest.java:30:53: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)\n-TopInterfaceNegativeTest.java:28:19: compiler.err.inline.type.must.not.implement.identity.object: TopInterfaceNegativeTest.V1\n+TopInterfaceNegativeTest.java:30:42: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)\n+TopInterfaceNegativeTest.java:30:56: compiler.err.cant.resolve.location: kindname.class, InlineObject, , , (compiler.misc.location: kindname.class, TopInterfaceNegativeTest, null)\n+TopInterfaceNegativeTest.java:28:22: compiler.err.inline.type.must.not.implement.identity.object: TopInterfaceNegativeTest.V1\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TopInterfaceNegativeTest.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    static inline class V {\n+    static primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TopInterfaceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-final inline class TypeRelationsNegativeTest {\n+final primitive class TypeRelationsNegativeTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TypeRelationsNegativeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public inline class TypeRelationsTest {\n+public primitive class TypeRelationsTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TypeRelationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    public inline class V<@TA @TARR T> {}\n+    public primitive class V<@TA @TARR T> {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/UnannotatedProjection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-public inline class UncheckedDefault<E> {\n+public primitive class UncheckedDefault<E> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/UncheckedDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    inline class V {\n+    primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/UnrelatedThisLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    @__inline__\n+    @__primitive__\n@@ -12,1 +12,1 @@\n-        new @__inline__ I() {\n+        new @__primitive__ I() {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueAnnotationOnAnonymousClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-@__inline__\n+@__primitive__\n@@ -12,1 +12,1 @@\n-@__inline__\n+@__primitive__\n@@ -16,1 +16,1 @@\n-@java.lang.__inline__\n+@java.lang.__primitive__\n@@ -24,1 +24,1 @@\n-@__inline__\n+@__primitive__\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueAnnotationTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class ValueAsEnclosingClass {\n+public primitive class ValueAsEnclosingClass {\n@@ -33,1 +33,1 @@\n-    static inline class V {\n+    static primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueAsEnclosingClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    public static final inline class Value {\n+    public static final primitive class Value {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueBootstrapMethodsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-public inline class ValueConstructorRef {\n+public primitive class ValueConstructorRef {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueConstructorRef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    inline\n+    primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueCreationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-        new inline value() {};\n+        new primitive value() {};\n@@ -14,1 +14,1 @@\n-        inline class value {}\n+        primitive class value {}\n@@ -16,1 +16,1 @@\n-        new inline value() {};\n+        new primitive value() {};\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueModifierTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,2 +3,2 @@\n-ValueModifierTest.java:16:20: compiler.err.cant.inherit.from.final: value\n-ValueModifierTest.java:16:28: compiler.err.concrete.supertype.for.inline.class: compiler.misc.anonymous.class: ValueModifierTest$3, value\n+ValueModifierTest.java:16:23: compiler.err.cant.inherit.from.final: value\n+ValueModifierTest.java:16:31: compiler.err.concrete.supertype.for.inline.class: compiler.misc.anonymous.class: ValueModifierTest$3, value\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueModifierTest.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public inline class ValueNewReadWrite {\n+public primitive class ValueNewReadWrite {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueNewReadWrite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-inline class ValueOverGenericsTest {\n+primitive class ValueOverGenericsTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueOverGenericsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public final inline class ValuesAsRefs {\n+public final primitive class ValuesAsRefs {\n@@ -37,1 +37,1 @@\n-    final inline class I implements java.io.Serializable {\n+    final primitive class I implements java.io.Serializable {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValuesAsRefs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    public static final inline class V {\n+    public static final primitive class V {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldAccessorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-inline final class A {\n+primitive final class A {\n@@ -12,1 +12,1 @@\n-    inline final class B {\n+    primitive final class B {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldNegativeTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    final inline class X {\n+    final primitive class X {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOfExplicitSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-public final inline class WithFieldOfGenericType<E> {\n+public final primitive class WithFieldOfGenericType<E> {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOfGenericType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    final inline class X {\n+    final primitive class X {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOfImplicitThis.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-    public final inline class V { int x = 10; }\n+    public final primitive class V { int x = 10; }\n@@ -13,1 +13,1 @@\n-    public final inline class X {\n+    public final primitive class X {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOperatorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public final inline class WithFieldRuntimeTest {\n+public final primitive class WithFieldRuntimeTest {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldRuntimeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    public static inline class Val1 implements MyInterface {\n+    public static primitive class Val1 implements MyInterface {\n@@ -65,1 +65,1 @@\n-    public static inline class Val2 implements MyInterface {\n+    public static primitive class Val2 implements MyInterface {\n@@ -76,1 +76,1 @@\n-    public static inline class Val3 implements MyInterface {\n+    public static primitive class Val3 implements MyInterface {\n@@ -552,1 +552,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineArray0.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    public static inline class Val1 implements MyInterface {\n+    public static primitive class Val1 implements MyInterface {\n@@ -66,1 +66,1 @@\n-    public static inline class Val2 implements MyInterface {\n+    public static primitive class Val2 implements MyInterface {\n@@ -78,1 +78,1 @@\n-    public static inline class Val3 implements MyInterface {\n+    public static primitive class Val3 implements MyInterface {\n@@ -555,1 +555,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineArray1.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    public static inline class Val1  {\n+    public static primitive class Val1  {\n@@ -61,1 +61,1 @@\n-    public static inline class Val2  {\n+    public static primitive class Val2  {\n@@ -72,1 +72,1 @@\n-    public static inline class Val3  {\n+    public static primitive class Val3  {\n@@ -547,1 +547,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineArrayHashExplicit.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    public static inline class Val1  {\n+    public static primitive class Val1  {\n@@ -57,1 +57,1 @@\n-    public static inline class Val2  {\n+    public static primitive class Val2  {\n@@ -64,1 +64,1 @@\n-    public static inline class Val3  {\n+    public static primitive class Val3  {\n@@ -535,1 +535,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineArrayHashImplicit.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    public static inline class Val1 implements MyInterface {\n+    public static primitive class Val1 implements MyInterface {\n@@ -65,1 +65,1 @@\n-    public static inline class Val2 implements MyInterface {\n+    public static primitive class Val2 implements MyInterface {\n@@ -76,1 +76,1 @@\n-    public static inline class Val3 implements MyInterface {\n+    public static primitive class Val3 implements MyInterface {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineField.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    public static inline class Val1 implements MyInterface {\n+    public static primitive class Val1 implements MyInterface {\n@@ -66,1 +66,1 @@\n-    public static inline class Val2 implements MyInterface {\n+    public static primitive class Val2 implements MyInterface {\n@@ -78,1 +78,1 @@\n-    public static inline class Val3 implements MyInterface {\n+    public static primitive class Val3 implements MyInterface {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineField1.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    public static inline class V {\n+    public static primitive class V {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/invoke\/InlineRec.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-public inline class PrimitiveInt {\n+public primitive class PrimitiveInt {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/PrimitiveInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1098,1 +1098,1 @@\n-    private inline class AListCursor<E> implements InlineCursor<E> {\n+    private primitive class AListCursor<E> implements InlineCursor<E> {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/XArrayList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-    static inline class YNode<K,V> implements Map.Entry<K,V> {\n+    static primitive class YNode<K,V> implements Map.Entry<K,V> {\n@@ -281,1 +281,1 @@\n-    inline class YNodeWrapper implements Map.Entry<K,V> {\n+    primitive class YNodeWrapper implements Map.Entry<K,V> {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/mapprotos\/HashMap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-    static inline class XNode<K,V> implements Map.Entry<K,V> {\n+    static primitive class XNode<K,V> implements Map.Entry<K,V> {\n@@ -393,1 +393,1 @@\n-    inline class XNodeWrapper implements Map.Entry<K,V> {\n+    primitive class XNodeWrapper implements Map.Entry<K,V> {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/sandbox\/corelibs\/mapprotos\/XHashMap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Q128byte implements Int128, ByByte {\n+public primitive class Q128byte implements Int128, ByByte {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q128byte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Q128int implements Int128, ByInt {\n+public primitive class Q128int implements Int128, ByInt {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q128int.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Q128long implements Int128, ByLong {\n+public primitive class Q128long implements Int128, ByLong {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q128long.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Q32byte implements Int32, ByByte {\n+public primitive class Q32byte implements Int32, ByByte {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q32byte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Q32int implements Int32, ByInt {\n+public primitive class Q32int implements Int32, ByInt {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q32int.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Q64byte implements Int64, ByByte {\n+public primitive class Q64byte implements Int64, ByByte {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q64byte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Q64int implements Int64, ByInt {\n+public primitive class Q64int implements Int64, ByInt {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q64int.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class Q64long implements Int64, ByLong {\n+public primitive class Q64long implements Int64, ByLong {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/Q64long.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public inline class QComplex implements Complex {\n+public primitive class QComplex implements Complex {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/QComplex.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-public inline class QOpt<T> implements Opt<T> {\n+public primitive class QOpt<T> implements Opt<T> {\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/types\/QOpt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}