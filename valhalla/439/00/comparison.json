{"files":[{"patch":"@@ -61,1 +61,1 @@\n-        test.run(args, MyValue1.class.asValueType(), MyValue2.class.asValueType(), MyValue2Inline.class.asValueType());\n+        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class);\n@@ -73,4 +73,4 @@\n-        Asserts.assertTrue(test1(MyValue1.class, MyValue1.class), \"test1_2 failed\");\n-        Asserts.assertTrue(test1(MyValue1.class.asValueType(), MyValue1.class.asValueType()), \"test1_3 failed\");\n-        Asserts.assertFalse(test1(MyValue1.class, MyValue1.class.asValueType()), \"test1_4 failed\");\n-        Asserts.assertFalse(test1(MyValue1.class.asValueType(), MyValue1.class), \"test1_5 failed\");\n+        Asserts.assertTrue(test1(MyValue1.ref.class, MyValue1.ref.class), \"test1_2 failed\");\n+        Asserts.assertTrue(test1(MyValue1.class, MyValue1.class), \"test1_3 failed\");\n+        Asserts.assertTrue(test1(MyValue1.ref.class, MyValue1.class), \"test1_4 failed\");\n+        Asserts.assertFalse(test1(MyValue1.class, MyValue1.ref.class), \"test1_5 failed\");\n@@ -78,4 +78,4 @@\n-        Asserts.assertTrue(test1(Object.class, MyValue1.class), \"test1_7 failed\");\n-        Asserts.assertTrue(test1(Object.class, MyValue1.class.asValueType()), \"test1_8 failed\");\n-        Asserts.assertTrue(!test1(MyValue1.class, Object.class), \"test1_9 failed\");\n-        Asserts.assertTrue(!test1(MyValue1.class.asValueType(), Object.class), \"test1_10 failed\");\n+        Asserts.assertTrue(test1(Object.class, MyValue1.ref.class), \"test1_7 failed\");\n+        Asserts.assertTrue(test1(Object.class, MyValue1.class), \"test1_8 failed\");\n+        Asserts.assertTrue(!test1(MyValue1.ref.class, Object.class), \"test1_9 failed\");\n+        Asserts.assertTrue(!test1(MyValue1.class, Object.class), \"test1_10 failed\");\n@@ -88,4 +88,4 @@\n-        boolean check2 = MyValue1.class.isAssignableFrom(MyValue1.class);\n-        boolean check3 = MyValue1.class.asValueType().isAssignableFrom(MyValue1.class.asValueType());\n-        boolean check4 = MyValue1.class.isAssignableFrom(MyValue1.class.asValueType());\n-        boolean check5 = !MyValue1.class.asValueType().isAssignableFrom(MyValue1.class);\n+        boolean check2 = MyValue1.ref.class.isAssignableFrom(MyValue1.ref.class);\n+        boolean check3 = MyValue1.class.isAssignableFrom(MyValue1.class);\n+        boolean check4 = MyValue1.ref.class.isAssignableFrom(MyValue1.class);\n+        boolean check5 = !MyValue1.class.isAssignableFrom(MyValue1.ref.class);\n@@ -93,4 +93,4 @@\n-        boolean check7 = Object.class.isAssignableFrom(MyValue1.class);\n-        boolean check8 = Object.class.isAssignableFrom(MyValue1.class.asValueType());\n-        boolean check9 = !MyValue1.class.isAssignableFrom(Object.class);\n-        boolean check10 = !MyValue1.class.asValueType().isAssignableFrom(Object.class);\n+        boolean check7 = Object.class.isAssignableFrom(MyValue1.ref.class);\n+        boolean check8 = Object.class.isAssignableFrom(MyValue1.class);\n+        boolean check9 = !MyValue1.ref.class.isAssignableFrom(Object.class);\n+        boolean check10 = !MyValue1.class.isAssignableFrom(Object.class);\n@@ -114,2 +114,2 @@\n-        Asserts.assertTrue(test3(MyValue1.class) == MyAbstract.class, \"test3_2 failed\");\n-        Asserts.assertTrue(test3(MyValue1.class.asValueType()) == MyValue1.class, \"test3_3 failed\");\n+        Asserts.assertTrue(test3(MyValue1.ref.class) == MyAbstract.class, \"test3_2 failed\");\n+        Asserts.assertTrue(test3(MyValue1.val.class) == MyValue1.ref.class, \"test3_3 failed\");\n@@ -124,1 +124,1 @@\n-        boolean check2 = (Class<?>)MyValue1.class.getSuperclass() == MyAbstract.class;\n+        boolean check2 = (Class<?>)MyValue1.ref.class.getSuperclass() == MyAbstract.class;\n@@ -126,1 +126,1 @@\n-        boolean check3 = (Class<?>)MyValue1.class.asValueType().getSuperclass() == MyValue1.class;\n+        boolean check3 = (Class<?>)MyValue1.val.class.getSuperclass() == MyValue1.ref.class;\n@@ -172,1 +172,1 @@\n-        Object[] va = test7(MyValue1.class.asValueType(), len);\n+        Object[] va = test7(MyValue1.class, len);\n@@ -187,1 +187,1 @@\n-        boolean result = test8(MyValue1.class.asValueType(), vt);\n+        boolean result = test8(MyValue1.class, vt);\n@@ -189,1 +189,1 @@\n-        result = test8(MyValue1.class, vt);\n+        result = test8(MyValue1.ref.class, vt);\n@@ -201,1 +201,1 @@\n-        boolean result = test9(MyValue2.class.asValueType(), vt);\n+        boolean result = test9(MyValue2.class, vt);\n@@ -203,1 +203,1 @@\n-        result = test9(MyValue2.class, vt);\n+        result = test9(MyValue2.ref.class, vt);\n@@ -216,1 +216,1 @@\n-        Object result = test10(MyValue1.class.asValueType(), vt);\n+        Object result = test10(MyValue1.class, vt);\n@@ -229,1 +229,1 @@\n-            test11(MyValue2.class.asValueType(), vt);\n+            test11(MyValue2.class, vt);\n@@ -237,1 +237,1 @@\n-        return MyValue1.class.asValueType().cast(vt);\n+        return MyValue1.class.cast(vt);\n@@ -249,1 +249,1 @@\n-        return MyValue2.class.asValueType().cast(vt);\n+        return MyValue2.class.cast(vt);\n@@ -265,1 +265,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), len);\n+        Object[] va = (Object[])Array.newInstance(MyValue1.val.class, len);\n@@ -460,1 +460,1 @@\n-          ca[i] = MyValue1.class.asValueType();\n+          ca[i] = MyValue1.val.class;\n@@ -545,1 +545,1 @@\n-            return U.getValue(v, V1_OFFSET, MyValue2.class.asValueType());\n+            return U.getValue(v, V1_OFFSET, MyValue2.val.class);\n@@ -574,1 +574,1 @@\n-            return U.getValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType());\n+            return U.getValue(this, TEST31_VT_OFFSET, MyValue1.val.class);\n@@ -590,1 +590,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), vt);\n+            U.putValue(this, TEST31_VT_OFFSET, MyValue1.val.class, vt);\n@@ -620,1 +620,1 @@\n-            return U.getValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class.asValueType());\n+            return U.getValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.val.class);\n@@ -638,1 +638,1 @@\n-            U.putValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class.asValueType(), vt);\n+            U.putValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.val.class, vt);\n@@ -657,1 +657,1 @@\n-            return U.getValue(o, TEST31_VT_OFFSET, MyValue1.class.asValueType());\n+            return U.getValue(o, TEST31_VT_OFFSET, MyValue1.val.class);\n@@ -674,1 +674,1 @@\n-            return U.getValue(this, offset, MyValue1.class.asValueType());\n+            return U.getValue(this, offset, MyValue1.val.class);\n@@ -691,1 +691,1 @@\n-            U.putValue(o, TEST31_VT_OFFSET, MyValue1.class.asValueType(), vt);\n+            U.putValue(o, TEST31_VT_OFFSET, MyValue1.val.class, vt);\n@@ -710,1 +710,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), o);\n+            U.putValue(this, TEST31_VT_OFFSET, MyValue1.val.class, o);\n@@ -749,1 +749,1 @@\n-        Object[] va = test40(MyValue1.class, len);\n+        Object[] va = test40(MyValue1.ref.class, len);\n@@ -764,1 +764,1 @@\n-        boolean result = test41(MyValue1.class, vt);\n+        boolean result = test41(MyValue1.ref.class, vt);\n@@ -766,1 +766,1 @@\n-        result = test41(MyValue1.class.asValueType(), vt);\n+        result = test41(MyValue1.class, vt);\n@@ -778,1 +778,1 @@\n-        boolean result = test42(MyValue2.class, vt);\n+        boolean result = test42(MyValue2.ref.class, vt);\n@@ -780,1 +780,1 @@\n-        result = test42(MyValue2.class.asValueType(), vt);\n+        result = test42(MyValue2.class, vt);\n@@ -793,1 +793,1 @@\n-        Object result = test43(MyValue1.class, vt);\n+        Object result = test43(MyValue1.ref.class, vt);\n@@ -795,1 +795,1 @@\n-        result = test43(MyValue1.class, null);\n+        result = test43(MyValue1.ref.class, null);\n@@ -808,1 +808,1 @@\n-            test44(MyValue2.class, vt);\n+            test44(MyValue2.ref.class, vt);\n@@ -816,1 +816,1 @@\n-        return MyValue1.class.cast(vt);\n+        return MyValue1.ref.class.cast(vt);\n@@ -830,1 +830,1 @@\n-        return MyValue2.class.cast(vt);\n+        return MyValue2.ref.class.cast(vt);\n@@ -846,1 +846,1 @@\n-        return MyValue1.class.asValueType().cast(vt);\n+        return MyValue1.val.class.cast(vt);\n@@ -869,1 +869,1 @@\n-        Object result = test48(MyValue1.class.asValueType(), vt);\n+        Object result = test48(MyValue1.class, vt);\n@@ -872,1 +872,1 @@\n-            test48(MyValue1.class.asValueType(), null);\n+            test48(MyValue1.class, null);\n@@ -880,1 +880,1 @@\n-        return MyValue1.class.cast(vt);\n+        return MyValue1.ref.class.cast(vt);\n@@ -900,1 +900,1 @@\n-        Object result = test50(MyValue1.class.asValueType(), vt);\n+        Object result = test50(MyValue1.class, vt);\n@@ -902,1 +902,1 @@\n-        result = test50(MyValue1.class, vt);\n+        result = test50(MyValue1.ref.class, vt);\n@@ -911,1 +911,1 @@\n-            test50(MyValue1.class.asValueType(), null);\n+            test50(MyValue1.class, null);\n@@ -925,1 +925,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.class, len);\n+        Object[] va = (Object[])Array.newInstance(MyValue1.ref.class, len);\n@@ -1040,1 +1040,1 @@\n-            return U.getValue(test55_vt, V1_OFFSET, MyValue2.class.asValueType());\n+            return U.getValue(test55_vt, V1_OFFSET, MyValue2.val.class);\n@@ -1054,1 +1054,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), 1);\n+        Object[] va = (Object[])Array.newInstance(MyValue1.val.class, 1);\n@@ -1068,1 +1068,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), 1);\n+        Object[] va = (Object[])Array.newInstance(MyValue1.val.class, 1);\n@@ -1089,1 +1089,1 @@\n-        boolean res = test58(MyValue1.class.asValueType(), MyValue1.class.asValueType());\n+        boolean res = test58(MyValue1.class, MyValue1.class);\n@@ -1091,1 +1091,1 @@\n-        res = test58(Object.class, MyValue1.class.asValueType());\n+        res = test58(Object.class, MyValue1.class);\n@@ -1093,1 +1093,1 @@\n-        res = test58(MyValue1.class.asValueType(), Object.class);\n+        res = test58(MyValue1.class, Object.class);\n@@ -1110,1 +1110,1 @@\n-            test59(MyValue1.class.asValueType());\n+            test59(MyValue1.class);\n@@ -1127,5 +1127,5 @@\n-        Asserts.assertTrue(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), false, false));\n-        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue2.class.asValueType(), false, false));\n-        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), false, true));\n-        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), true, false));\n-        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), true, true));\n+        Asserts.assertTrue(test60(MyValue1.class, MyValue1.class, false, false));\n+        Asserts.assertFalse(test60(MyValue1.class, MyValue2.class, false, false));\n+        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, false, true));\n+        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, true, false));\n+        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, true, true));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":71,"deletions":71,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -1736,1 +1736,1 @@\n-            if (args[i] == null && parameterTypes[0] == MyValue1.class.asValueType()) {\n+            if (args[i] == null && parameterTypes[0] == MyValue1.class) {\n@@ -1758,1 +1758,1 @@\n-                    if (args[j] == null && parameterTypes[1] == MyValue1.class.asValueType()) {\n+                    if (args[j] == null && parameterTypes[1] == MyValue1.class) {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -397,1 +397,1 @@\n-            Class<?> vtClass = Person.class.asValueType();\n+            Class<?> vtClass = Person.class;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-        Class<?> cls = MyInt.class.asValueType();\n+        Class<?> cls = MyInt.class;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,3 +60,3 @@\n-        Method methodARef = getClass().getDeclaredMethod(\"methodA\", MyInt.class.asValueType());\n-        Method methodBRef = getClass().getDeclaredMethod(\"methodB\", MyInt.class.asValueType(), MyInt.class.asValueType());\n-        Method methodCRef = getClass().getDeclaredMethod(\"methodC\", MyInt.class.asValueType(), String.class);\n+        Method methodARef = getClass().getDeclaredMethod(\"methodA\", MyInt.class);\n+        Method methodBRef = getClass().getDeclaredMethod(\"methodB\", MyInt.class, MyInt.class);\n+        Method methodCRef = getClass().getDeclaredMethod(\"methodC\", MyInt.class, String.class);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VarArgsArray.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}