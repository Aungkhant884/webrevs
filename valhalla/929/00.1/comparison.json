{"files":[{"patch":"@@ -1186,0 +1186,8 @@\n+    \/\/ Skip scalarization for vector value objects (concrete vectors and payloads).\n+    load_klass(rdi, rax, rscratch1);\n+    movptr(rscratch1, rax);\n+    super_call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::skip_value_scalarization), rdi);\n+    testptr(rax, rax);\n+    movptr(rax, rscratch1);\n+    jcc(Assembler::notZero, skip);\n+\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -92,0 +92,2 @@\n+  _is_multifield = false;\n+  _is_multifield_base = false;\n@@ -196,1 +198,1 @@\n-ciField::ciField(fieldDescriptor *fd) :\n+ciField::ciField(fieldDescriptor *fd, bool bundled) :\n@@ -207,0 +209,2 @@\n+  initialize_from(fd);\n+\n@@ -212,1 +216,2 @@\n-    _type = ciType::make(field_type);\n+    int bundle_size = bundled ? fd->secondary_fields_count(fd->index()) : 1;\n+    _type = ciType::make(field_type, bundle_size);\n@@ -215,2 +220,0 @@\n-  initialize_from(fd);\n-\n@@ -245,0 +248,2 @@\n+  _is_multifield_base = field->_is_multifield_base;\n+  _is_multifield = field->_is_multifield;\n@@ -298,0 +303,4 @@\n+  _is_multifield_base = fd->is_multifield_base() &&\n+     !ciEnv::is_multifield_scalarized(fd->field_type(), fd->secondary_fields_count(fd->index()));\n+  _is_multifield = fd->is_multifield();\n+\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -43,0 +44,1 @@\n+  friend class ciMultiField;\n@@ -55,0 +57,2 @@\n+  bool             _is_multifield;\n+  bool             _is_multifield_base;\n@@ -63,1 +67,1 @@\n-  ciField(fieldDescriptor* fd);\n+  ciField(fieldDescriptor* fd, bool bundled = false);\n@@ -108,0 +112,4 @@\n+  bool is_multifield() { return _is_multifield; }\n+  bool is_multifield_base() { return _is_multifield_base; }\n+  int secondary_fields_count() { return type()->bundle_size(); }\n+\n@@ -192,0 +200,33 @@\n+class ciMultiField : public ciField {\n+private:\n+  CI_PACKAGE_ACCESS\n+  friend class ciInstanceKlass;\n+\n+  GrowableArray<ciField*>* _secondary_fields;\n+\n+  ciMultiField(ciInstanceKlass* klass, int index, Bytecodes::Code bc) : ciField(klass, index, bc) {}\n+  ciMultiField(fieldDescriptor* fd, bool bundled) : ciField(fd, bundled) {\n+    _is_multifield_base = true;\n+  }\n+  ciMultiField(ciField* field, ciInstanceKlass* holder, int offset, bool is_final) :\n+       ciField(field, holder, offset, is_final) {}\n+public:\n+  void set_secondary_fields(GrowableArray<ciField*>* fields) {\n+    Arena* arena = CURRENT_ENV->arena();\n+    _secondary_fields = new (arena) GrowableArray<ciField*>(arena, fields->length(), 0, nullptr);\n+    for (int i = 0; i < fields->length(); i++) {\n+      ciField* field = fields->at(i);\n+      _secondary_fields->append(new (arena) ciField(field, field->holder(), field->offset_in_bytes(), field->is_final()));\n+    }\n+  }\n+\n+  void add_secondary_fields(GrowableArray<ciField*>* fields) { _secondary_fields = fields; }\n+\n+  GrowableArray<ciField*>* secondary_fields() { return _secondary_fields; }\n+\n+  ciField* secondary_field_at(int i) {\n+    assert(_secondary_fields->length() > i, \"\");\n+    return _secondary_fields->at(i);\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/ci\/ciField.hpp","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ci\/ciEnv.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"ci\/ciField.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -527,1 +527,4 @@\n-GrowableArray<ciField*>* ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray<ciField*>* super_fields, bool is_flat) {\n+\n+\/\/ Generic routine to handle synthetic field population for both static\n+\/\/ and non-static base multifields.\n+ciField* ciInstanceKlass::populate_synthetic_multifields(ciField* field) {\n@@ -529,0 +532,5 @@\n+  if (!field->is_multifield_base()) {\n+    return field;\n+  }\n+  int sec_fields_count = 0;\n+  ciMultiField* mfield = static_cast<ciMultiField*>(field);\n@@ -530,0 +538,29 @@\n+  InstanceKlass* k = get_instanceKlass();\n+\n+  for (JavaFieldStream fs(k); !fs.done(); fs.next()) {\n+    if (fs.offset() == field->offset_in_bytes()) {\n+      assert(mfield == field, \"Duplicate multifield for a given offset\");\n+      fieldDescriptor& fd = fs.field_descriptor();\n+      assert(fd.is_multifield_base(), \"\");\n+      mfield = new (arena) ciMultiField(&fd, true);\n+\n+      sec_fields_count = fd.secondary_fields_count(fd.index()) - 1;\n+      mfield->add_secondary_fields(new (arena) GrowableArray<ciField*>(arena, sec_fields_count, 0, nullptr));\n+      if (sec_fields_count == 0) {\n+        break;\n+      }\n+    } else if (sec_fields_count && fs.is_multifield()) {\n+      fieldDescriptor& fd = fs.field_descriptor();\n+      mfield->secondary_fields()->append(new (arena) ciField(&fd));\n+      sec_fields_count--;\n+      if (sec_fields_count == 0) {\n+        break;\n+      }\n+    }\n+  }\n+\n+  return mfield;\n+}\n+\n+GrowableArray<ciField*>* ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray<ciField*>* super_fields, bool is_flat) {\n+  ASSERT_IN_VM;\n@@ -531,0 +568,1 @@\n+  Arena* arena = CURRENT_ENV->arena();\n@@ -550,0 +588,1 @@\n+  int sec_fields_count = 0;\n@@ -552,0 +591,10 @@\n+    if (fs.is_multifield() && sec_fields_count) {\n+      assert(fields->last()->is_multifield_base(), \"\");\n+      sec_fields_count--;\n+      flen--;\n+      ciMultiField* multifield_base = static_cast<ciMultiField*>(fields->last());\n+      fieldDescriptor& fd = fs.field_descriptor();\n+      multifield_base->secondary_fields()->append(new (arena) ciField(&fd));\n+      continue;\n+    }\n+    assert(!sec_fields_count, \"\");\n@@ -568,1 +617,12 @@\n-        ciField* field = new (arena) ciField(flat_field, this, offset, is_final);\n+        ciField* field = nullptr;\n+        ciType* ftype = flat_field->type();\n+        assert(ftype, \"\");\n+        BasicType bt = ftype->basic_type();\n+        int sec_fields_count = ftype->bundle_size();\n+        bool scalarize_multifield = ciEnv::is_multifield_scalarized(bt, sec_fields_count);\n+        if (flat_field->is_multifield_base() && !scalarize_multifield) {\n+          field = new (arena) ciMultiField(flat_field, this, offset, is_final);\n+          static_cast<ciMultiField*>(field)->set_secondary_fields(static_cast<ciMultiField*>(flat_field)->secondary_fields());\n+        } else {\n+          field = new (arena) ciField(flat_field, this, offset, is_final);\n+        }\n@@ -572,1 +632,13 @@\n-      ciField* field = new (arena) ciField(&fd);\n+      ciField* field = nullptr;\n+      BasicType bt = fd.field_type();\n+      sec_fields_count = fd.secondary_fields_count(fd.index());\n+      bool scalarize_multifield = ciEnv::is_multifield_scalarized(bt, sec_fields_count);\n+      if (fs.is_multifield_base() && !scalarize_multifield) {\n+        field = new (arena) ciMultiField(&fd, true);\n+        GrowableArray<ciField*>* sec_fields = new (arena) GrowableArray<ciField*>(arena, sec_fields_count, 0, nullptr);\n+        static_cast<ciMultiField*>(field)->add_secondary_fields(sec_fields);\n+        sec_fields_count--;\n+      } else {\n+        field = new (arena) ciField(&fd);\n+        sec_fields_count = 0;\n+      }\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":75,"deletions":3,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  friend class ciMultiField;\n@@ -213,0 +214,1 @@\n+  ciField* populate_synthetic_multifields(ciField* field);\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -991,0 +991,1 @@\n+    _jdk_internal_vm_annotation_MultiField,\n@@ -997,0 +998,1 @@\n+  jbyte _multifield_arg;\n@@ -1023,0 +1025,3 @@\n+  void set_multifield_arg(jbyte arg) { _multifield_arg = arg; }\n+  jbyte multifield_arg() const { return _multifield_arg; }\n+\n@@ -1024,0 +1029,1 @@\n+  bool is_multifield_base() const { return has_annotation(_jdk_internal_vm_annotation_MultiField); }\n@@ -1163,0 +1169,3 @@\n+    b_tag_val = 'B',\n+    b_con_off = 7,\n+    b_size = 9,\n@@ -1209,0 +1218,9 @@\n+    } else if (AnnotationCollector::_jdk_internal_vm_annotation_MultiField == id) {\n+      \/\/ TODO: change those assertion into a conditional statement to process the value\n+      assert(count == 1, \"MultiField annotation must have at least one argument\");  \/\/ Is it true?\n+      assert(member == vmSymbols::value_name(), \"Must be\");\n+      assert(b_tag_val == *(abase + tag_off), \"Must be a byte value\");\n+      int arg_index = Bytes::get_Java_u2((address)abase + b_con_off);\n+      int multifield_arg = cp->int_at(arg_index);\n+      assert(((jbyte)multifield_arg) == multifield_arg, \"Must be\");\n+      coll->set_multifield_arg(multifield_arg);\n@@ -1511,1 +1529,7 @@\n-  ResourceMark rm(THREAD);\n+  \/\/ ResourceMark rm(THREAD);\n+  GrowableArray<MultiFieldInfo>* temp_multifield_info = new GrowableArray<MultiFieldInfo>(0); \/\/ could be allocated lazily\n+  GrowableArray<AnnotationArray*>* fields_annotations = nullptr;\n+  GrowableArray<AnnotationArray*>* fields_type_annotations = nullptr;\n+\n+  int field_index = -1;\n+  int inj_multifields = 0;\n@@ -1513,0 +1537,1 @@\n+    field_index++;\n@@ -1558,4 +1583,2 @@\n-        if (_fields_annotations == nullptr) {\n-          _fields_annotations = MetadataFactory::new_array<AnnotationArray*>(\n-                                             _loader_data, length, nullptr,\n-                                             CHECK);\n+        if (fields_annotations == nullptr) {\n+          fields_annotations = new GrowableArray<AnnotationArray*>(length);\n@@ -1563,1 +1586,2 @@\n-        _fields_annotations->at_put(n, parsed_annotations.field_annotations());\n+\n+        fields_annotations->at_put_grow(field_index, parsed_annotations.field_annotations(), nullptr);\n@@ -1567,6 +1591,2 @@\n-        if (_fields_type_annotations == nullptr) {\n-          _fields_type_annotations =\n-            MetadataFactory::new_array<AnnotationArray*>(_loader_data,\n-                                                         length,\n-                                                         nullptr,\n-                                                         CHECK);\n+        if (fields_type_annotations == nullptr) {\n+          fields_type_annotations = new GrowableArray<AnnotationArray*>(length);\n@@ -1574,1 +1594,1 @@\n-        _fields_type_annotations->at_put(n, parsed_annotations.field_type_annotations());\n+        fields_type_annotations->at_put_grow(field_index, parsed_annotations.field_type_annotations(), nullptr);\n@@ -1598,1 +1618,1 @@\n-    fi.set_index(n);\n+    fi.set_index(field_index);\n@@ -1606,1 +1626,43 @@\n-    _temp_field_info->append(fi);\n+\n+    int base_idx = _temp_field_info->append(fi);\n+    assert(base_idx == field_index, \"Must be\");\n+    FieldInfo* const field = _temp_field_info->adr_at(field_index);\n+\n+    if (parsed_annotations.is_multifield_base() && is_java_primitive(cp->basic_type_for_signature_at(signature_index))) {\n+      field->field_flags_addr()->update_multifield_base(true);\n+      char* base_name = cp->symbol_at(name_index)->as_C_string();\n+      for (int i = 1; i < parsed_annotations.multifield_arg(); i++) {\n+        field_index++;\n+        stringStream st;\n+        st.print(\"%s\", base_name);\n+        st.print(\"#\");\n+        st.print(\"%d\", i);\n+        Symbol* inj_name = SymbolTable::new_symbol(st.as_string());\n+        MultiFieldInfo mfi(inj_name, base_idx, i);\n+        int mfi_idx = temp_multifield_info->append(mfi);\n+\n+        const BasicType type = cp->basic_type_for_signature_at(signature_index);\n+        \/\/ Update FieldAllocationCount for this kind of field\n+        fac->update(is_static, type, type == T_PRIMITIVE_OBJECT);\n+\n+        FieldInfo::FieldFlags fflags(0);\n+        \/\/ fflags.update_injected(true);\n+        AccessFlags aflags;\n+        aflags.set_flags(flags);\n+        FieldInfo fi(aflags, (u2)(mfi_idx), (u2)signature_index, 0, fflags);\n+        fi.set_index(field_index);\n+\n+        int inj_idx = _temp_field_info->append(fi);\n+        assert(inj_idx == field_index, \"Must be\");\n+        FieldInfo* const field = _temp_field_info->adr_at(inj_idx);\n+\n+        field->field_flags_addr()->update_multifield(true);\n+        if (fields_annotations != nullptr && fields_annotations->at(base_idx) != nullptr) {\n+          fields_annotations->at_put_grow(field_index, fields_annotations->at(base_idx));\n+        }\n+        if (fields_type_annotations != nullptr && fields_type_annotations->at(base_idx) != nullptr) {\n+          fields_type_annotations->at_put_grow(field_index, fields_type_annotations->at(base_idx));\n+        }\n+        inj_multifields++;\n+      }\n+    }\n@@ -1608,1 +1670,1 @@\n-  assert(_temp_field_info->length() == length, \"Must be\");\n+  assert(_temp_field_info->length() == (length + inj_multifields), \"Must be\");\n@@ -1610,1 +1672,2 @@\n-  int index = length;\n+  *java_fields_count_ptr = *java_fields_count_ptr + inj_multifields;\n+  int index = length + inj_multifields;\n@@ -1638,2 +1701,5 @@\n-      fi.set_index(index);\n-      _temp_field_info->append(fi);\n+      fi.set_index(field_index);\n+\n+      field_index++;\n+      int inj_idx = _temp_field_info->append(fi);\n+      assert(inj_idx == field_index, \"Must be\");\n@@ -1658,2 +1724,5 @@\n-      fi.set_index(index);\n-      _temp_field_info->append(fi);\n+    fi.set_index(index);\n+\n+    field_index++;\n+    int inj_idx = _temp_field_info->append(fi);\n+    assert(inj_idx == field_index, \"Must be\");\n@@ -1679,1 +1748,4 @@\n-    _temp_field_info->append(fi);\n+\n+    field_index++;\n+    int inj_idx = _temp_field_info->append(fi);\n+    assert(inj_idx == field_index, \"Must be\");\n@@ -1692,0 +1764,29 @@\n+  if (temp_multifield_info->length() > 0) {\n+    _multifield_info = MetadataFactory::new_array<MultiFieldInfo>(_loader_data,\n+                                                                  temp_multifield_info->length(),\n+                                                                  CHECK);\n+    for (int i = 0; i < temp_multifield_info->length(); i++) {\n+      _multifield_info->at_put(i, temp_multifield_info->at(i));\n+    }\n+  }\n+\n+  if (fields_annotations != nullptr) {\n+    _fields_annotations = MetadataFactory::new_array<AnnotationArray*>(_loader_data,\n+                                                                       _temp_field_info->length(),\n+                                                                       nullptr,\n+                                                                       CHECK);\n+    for (int i = 0; i < fields_annotations->length(); i++) {\n+      _fields_annotations->at_put(i, fields_annotations->at(i));\n+    }\n+  }\n+\n+  if (fields_type_annotations != nullptr) {\n+     _fields_type_annotations = MetadataFactory::new_array<AnnotationArray*>(_loader_data,\n+                                                                             _temp_field_info->length(),\n+                                                                             nullptr,\n+                                                                             CHECK);\n+    for (int i = 0; i < fields_type_annotations->length(); i++) {\n+      _fields_type_annotations->at_put(i, fields_type_annotations->at(i));\n+    }\n+  }\n+\n@@ -1698,1 +1799,1 @@\n-      NameSigHash name_and_sig(_temp_field_info->adr_at(i)->name(_cp),\n+      NameSigHash name_and_sig(_temp_field_info->adr_at(i)->name(_multifield_info, _cp),\n@@ -2064,0 +2165,5 @@\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_MultiField_signature): {\n+      if (_location != _in_field) break;  \/\/ only allow for fields\n+      if (!privileged)            break;  \/\/ honor privileges\n+      return _jdk_internal_vm_annotation_MultiField;\n+    }\n@@ -3230,0 +3336,1 @@\n+    const Symbol* outer_class_name = nullptr;\n@@ -3231,1 +3338,1 @@\n-      const Symbol* const outer_class_name = cp->klass_name_at(outer_class_info_index);\n+      outer_class_name = cp->klass_name_at(outer_class_info_index);\n@@ -3275,1 +3382,1 @@\n-    verify_legal_class_modifiers(flags, name, false, CHECK_0);\n+    verify_legal_class_modifiers(flags, name, outer_class_name, false, CHECK_0);\n@@ -4118,0 +4225,1 @@\n+  this_klass->set_multifield_info(_multifield_info);\n@@ -4704,0 +4812,14 @@\n+\/\/ utility function to skip over internal jdk primitive classes used to override the need for passing\n+\/\/ an explict JVM flag EnablePrimitiveClasses.\n+bool ClassFileParser::is_jdk_internal_class(const Symbol* outer_class, const char * inner_class) const {\n+  if (outer_class &&\n+      inner_class &&\n+      (vmSymbols::jdk_internal_vm_vector_VectorSupport() == outer_class ||\n+       vmSymbols::jdk_internal_vm_vector_VectorPayloadMF() == outer_class)) {\n+    if (strstr(inner_class, \"VectorPayloadMF\")) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -4706,1 +4828,1 @@\n-void ClassFileParser::verify_legal_class_modifiers(jint flags, const char* name, bool is_Object, TRAPS) const {\n+void ClassFileParser::verify_legal_class_modifiers(jint flags, const char* name, const Symbol* outer_class, bool is_Object, TRAPS) const {\n@@ -4734,1 +4856,1 @@\n-  if (is_primitive_class && !EnablePrimitiveClasses) {\n+  if (is_primitive_class && !is_jdk_internal_class(outer_class, name) && !EnablePrimitiveClasses) {\n@@ -5629,0 +5751,1 @@\n+  assert(nullptr == _multifield_info, \"invariant\");\n@@ -5910,0 +6033,1 @@\n+  _multifield_info(nullptr),\n@@ -5997,0 +6121,1 @@\n+  _multifield_info = nullptr;\n@@ -6015,0 +6140,4 @@\n+  if (_multifield_info != nullptr) {\n+    MetadataFactory::free_array<MultiFieldInfo>(_loader_data, _multifield_info);\n+  }\n+\n@@ -6160,2 +6289,0 @@\n-  verify_legal_class_modifiers(flags, nullptr, is_java_lang_Object, CHECK);\n-\n@@ -6261,0 +6388,3 @@\n+  const Symbol* super_klass_name = _super_class_index ? cp->klass_name_at(_super_class_index) : nullptr;\n+  verify_legal_class_modifiers(flags, _class_name->as_C_string(), super_klass_name, is_java_lang_Object, CHECK);\n+\n@@ -6356,0 +6486,12 @@\n+bool ClassFileParser::is_jdk_internal_class(const Klass* cls) {\n+  while(cls) {\n+    const Symbol* cls_name = cls->name();\n+    if(cls_name == vmSymbols::jdk_internal_vm_vector_VectorPayload() ||\n+       cls_name == vmSymbols::jdk_internal_vm_vector_VectorPayloadMF()) {\n+      return true;\n+    }\n+    cls = cls->super();\n+   }\n+   return false;\n+}\n+\n@@ -6503,1 +6645,1 @@\n-  if (EnablePrimitiveClasses) {\n+  if (EnablePrimitiveClasses || is_jdk_internal_class(_super_klass)) {\n@@ -6534,1 +6676,1 @@\n-      _field_info, _inline_type_field_klasses);\n+      _field_info, _inline_type_field_klasses, _multifield_info);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":173,"deletions":31,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-  _is_reference(false) {\n+  _is_reference(false),\n+  _multifield_index(-1) {\n@@ -56,1 +57,1 @@\n-LayoutRawBlock::LayoutRawBlock(int index, Kind kind, int size, int alignment, bool is_reference) :\n+LayoutRawBlock::LayoutRawBlock(int index, Kind kind, int size, int alignment, bool is_reference, jbyte multifield_index) :\n@@ -65,2 +66,3 @@\n- _is_reference(is_reference) {\n-  assert(kind == REGULAR || kind == FLAT || kind == INHERITED,\n+ _is_reference(is_reference),\n+ _multifield_index(multifield_index) {\n+  assert(kind == REGULAR || kind == FLAT || kind == INHERITED || kind == MULTIFIELD,\n@@ -85,0 +87,1 @@\n+  _multifields(nullptr),\n@@ -90,1 +93,1 @@\n-  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::REGULAR, size, size \/* alignment == size for primitive types *\/, false);\n+  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::REGULAR, size, size \/* alignment == size for primitive types *\/, false, -1);\n@@ -100,1 +103,1 @@\n-  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::REGULAR, size, size \/* alignment == size for oops *\/, true);\n+  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::REGULAR, size, size \/* alignment == size for oops *\/, true, -1);\n@@ -109,1 +112,1 @@\n-  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::FLAT, vk->get_exact_size_in_bytes(), vk->get_alignment(), false);\n+  LayoutRawBlock* block = new LayoutRawBlock(idx, LayoutRawBlock::FLAT, vk->get_exact_size_in_bytes(), vk->get_alignment(), false, -1);\n@@ -118,0 +121,24 @@\n+void FieldGroup::add_multifield(ConstantPool* cp, FieldInfo* field, Array<MultiFieldInfo>* multifield_info, InlineKlass* vk) {\n+  assert(field->is_multifield() || field->is_multifield_base(), \"Must be\");\n+  u2 base = field->multifield_base(multifield_info);\n+  BasicType type = Signature::basic_type(field->signature(cp));\n+  MultiFieldGroup* mfg = NULL;\n+  if (_multifields != NULL) {\n+    for (int i = 0; i < _multifields->length(); i++) {\n+      if (base == _multifields->at(i)->multifield_base()) {\n+        mfg = _multifields->at(i);\n+        break;\n+      }\n+    }\n+  } else {\n+    _multifields = new GrowableArray<MultiFieldGroup*>(INITIAL_LIST_SIZE);\n+  }\n+  if (mfg == NULL) {\n+    mfg = new MultiFieldGroup(base, field->signature(cp));\n+    mfg->add_field(cp, field, vk, multifield_info);\n+    _multifields->append(mfg);\n+  } else {\n+    mfg->add_field(cp, field, vk, multifield_info);\n+  }\n+}\n+\n@@ -125,0 +152,16 @@\n+  if (_multifields != NULL) {\n+    for (int i = 0; i < _multifields->length(); i++) {\n+      int size = _multifields->at(i)->fields()->at(0)->size();\n+      int alignment =  _multifields->at(i)->fields()->at(0)->alignment();\n+      int multialignment = size\/alignment;\n+      if (size % multialignment != 0) multialignment+= alignment;\n+      \/\/ Problem: at this point, multialignment can be a weird number, for instance not a power of two\n+      int multisize = multialignment * alignment * _multifields->at(i)->fields()->length();  \/\/ should be stored\n+      \/\/ True alignment should be adjusted to increase chances to be on a single cache line\n+      int multifield_group_alignment = MIN2(round_up_power_of_2(multisize), HeapWordSize);\n+      _multifields->at(i)->set_group_size(multisize);\n+      _multifields->at(i)->set_group_alignment(multifield_group_alignment);\n+      _multifields->at(i)->fields()->sort(MultiFieldGroup::compare_multifield_index);\n+    }\n+    _multifields->sort(MultiFieldGroup::compare_multifield_groups_inverted);\n+  }\n@@ -141,1 +184,28 @@\n-FieldLayout::FieldLayout(GrowableArray<FieldInfo>* field_info, ConstantPool* cp) :\n+MultiFieldGroup::MultiFieldGroup(u2 base, Symbol* signature) :  _multifield_base(base), _signature(signature), _fields(NULL) { }\n+\n+void MultiFieldGroup::add_field(ConstantPool* cp, FieldInfo* field, InlineKlass* vk, Array<MultiFieldInfo>* multifield_info) {\n+  assert(field->is_multifield() || field->is_multifield_base(), \"Must be\");\n+  assert(field->multifield_base(multifield_info) == multifield_base(), \"multifield base mismatch\");\n+  if (_fields == NULL) {\n+    _fields = new GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n+  } else {\n+    guarantee(field->signature(cp) == signature(), \"multifield signature mismatch\");\n+  }\n+  BasicType type = Signature::basic_type(field->signature(cp));\n+  LayoutRawBlock* block = NULL;\n+  if (type == T_PRIMITIVE_OBJECT) {\n+    block = new LayoutRawBlock(field->index(), LayoutRawBlock::MULTIFIELD, vk->get_exact_size_in_bytes(),\n+                               vk->get_alignment(), false, field->multifield_index(multifield_info));\n+  } else {\n+    int size = type2aelembytes(type);\n+    block = new LayoutRawBlock(field->index(), LayoutRawBlock::MULTIFIELD, size, size, false, field->multifield_index(multifield_info));\n+  }\n+  int cursor = 0;\n+  for (; cursor < _fields->length(); cursor++) {\n+    assert(_fields->at(cursor)->multifield_index() != field->multifield_index(multifield_info), \"multifield index duplicate found\");\n+    if (_fields->at(cursor)->multifield_index() > field->multifield_index(multifield_info)) break;\n+  }\n+  _fields->insert_before(cursor, block);\n+}\n+\n+FieldLayout::FieldLayout(GrowableArray<FieldInfo>* field_info, ConstantPool* cp, Array<MultiFieldInfo>* multifields) :\n@@ -144,0 +214,1 @@\n+  _multifield_info(multifields),\n@@ -187,0 +258,1 @@\n+         && block->kind() != LayoutRawBlock::MULTIFIELD\n@@ -316,0 +388,31 @@\n+void FieldLayout::add_multifield(MultiFieldGroup* multifield_group, LayoutRawBlock* start) {\n+  if (start == NULL) {\n+    start = _start;\n+  }\n+  LayoutRawBlock* candidate = NULL;\n+  if (start == last_block()) {\n+    candidate = last_block();\n+  } else {\n+    candidate = last_block()->prev_block();\n+    while (candidate->kind() != LayoutRawBlock::EMPTY || !candidate->fit(multifield_group->group_size(), multifield_group->group_alignment())) {\n+      if (candidate == start) {\n+        candidate = last_block();\n+        break;\n+      }\n+      candidate = candidate->prev_block();\n+    }\n+    assert(candidate != NULL, \"Candidate must not be null\");\n+    assert(candidate->kind() == LayoutRawBlock::EMPTY, \"Candidate must be an empty block\");\n+  }\n+  if ((candidate->offset() % multifield_group->group_alignment()) != 0) {\n+    int adjustment = multifield_group->group_alignment() - (candidate->offset() % multifield_group->group_alignment());\n+    LayoutRawBlock* adj = new LayoutRawBlock(LayoutRawBlock::EMPTY, adjustment);\n+    insert(candidate, adj);\n+  }\n+  assert(candidate->fit(multifield_group->group_size(), multifield_group->group_alignment()), \"Candidate must be able to store the whole contiguous block\");\n+  for (int i = 0; i < multifield_group->fields()->length(); i++) {\n+    LayoutRawBlock* b = multifield_group->fields()->at(i);\n+    insert_field_block(candidate, b);\n+  }\n+}\n+\n@@ -335,1 +438,1 @@\n-    for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+    for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants(), ik->multifield_info()); !fs.done(); fs.next()) {\n@@ -344,1 +447,1 @@\n-                                   vk->get_alignment(), false);\n+                                   vk->get_alignment(), false, -1);\n@@ -349,1 +452,1 @@\n-        block = new LayoutRawBlock(fs.index(), LayoutRawBlock::INHERITED, size, size, false);\n+        block = new LayoutRawBlock(fs.index(), LayoutRawBlock::INHERITED, size, size, false, -1);\n@@ -473,1 +576,1 @@\n-                         fi->name(_cp)->as_C_string(),\n+                         fi->name(_multifield_info, _cp)->as_C_string(),\n@@ -484,1 +587,1 @@\n-                         fi->name(_cp)->as_C_string(),\n+                         fi->name(_multifield_info, _cp)->as_C_string(),\n@@ -504,1 +607,1 @@\n-          for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants()); !fs.done(); fs.next()) {\n+          for (AllFieldStream fs(ik->fieldinfo_stream(), ik->constants(), ik->multifield_info()); !fs.done(); fs.next()) {\n@@ -516,0 +619,1 @@\n+          }\n@@ -518,0 +622,1 @@\n+        break;\n@@ -519,14 +624,22 @@\n-      break;\n-    }\n-    case LayoutRawBlock::EMPTY:\n-      output->print_cr(\" @%d %d\/1 %s\",\n-                       b->offset(),\n-                       b->size(),\n-                       \"EMPTY\");\n-      break;\n-    case LayoutRawBlock::PADDING:\n-      output->print_cr(\" @%d %d\/1 %s\",\n-                       b->offset(),\n-                       b->size(),\n-                       \"PADDING\");\n-      break;\n+      case LayoutRawBlock::EMPTY:\n+        output->print_cr(\" @%d %d\/1 %s\",\n+                         b->offset(),\n+                         b->size(),\n+                         \"EMPTY\");\n+        break;\n+      case LayoutRawBlock::PADDING:\n+        output->print_cr(\" @%d %d\/1 %s\",\n+                         b->offset(),\n+                         b->size(),\n+                         \"PADDING\");\n+        break;\n+      case LayoutRawBlock::MULTIFIELD:\n+        FieldInfo* fi = _field_info->adr_at(b->field_index());\n+        output->print_cr(\" @%d \\\"%s\\\" %s %d\/%d %s\",\n+                         b->offset(),\n+                         fi->name(_multifield_info, _cp)->as_C_string(),\n+                         fi->signature(_cp)->as_C_string(),\n+                         b->size(),\n+                         b->alignment(),\n+                         \"MULTIFIELD\");\n+        break;\n@@ -540,1 +653,2 @@\n-                                       FieldLayoutInfo* info, Array<InlineKlass*>* inline_type_field_klasses) :\n+                                       FieldLayoutInfo* info, Array<InlineKlass*>* inline_type_field_klasses,\n+                                       Array<MultiFieldInfo>* multifields) :\n@@ -547,0 +661,1 @@\n+  _multifield_info(multifields),\n@@ -578,1 +693,1 @@\n-  _layout = new FieldLayout(_field_info, _constant_pool);\n+  _layout = new FieldLayout(_field_info, _constant_pool, _multifield_info);\n@@ -584,1 +699,1 @@\n-  _static_layout = new FieldLayout(_field_info, _constant_pool);\n+  _static_layout = new FieldLayout(_field_info, _constant_pool, _multifield_info);\n@@ -620,22 +735,21 @@\n-    BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n-    switch(type) {\n-    case T_BYTE:\n-    case T_CHAR:\n-    case T_DOUBLE:\n-    case T_FLOAT:\n-    case T_INT:\n-    case T_LONG:\n-    case T_SHORT:\n-    case T_BOOLEAN:\n-      group->add_primitive_field(idx, type);\n-      break;\n-    case T_OBJECT:\n-    case T_ARRAY:\n-    case T_PRIMITIVE_OBJECT:  \/\/ T_PRIMITIVE_OBJECT is going to me removed, inline types are detected below\n-      if (!fieldinfo.field_flags().is_null_free_inline_type()) {\n-        if (group != _static_fields) _nonstatic_oopmap_count++;\n-        group->add_oop_field(idx);\n-      } else {\n-        _has_inline_type_fields = true;\n-        if (group == _static_fields) {\n-          \/\/ static fields are never flat\n+    bool has_multifield_annotation = false;\n+    if (fieldinfo.is_multifield() || fieldinfo.is_multifield_base()) {\n+      group->add_multifield(_constant_pool, &fieldinfo, _multifield_info);\n+    } else {\n+      BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n+      switch(type) {\n+      case T_BYTE:\n+      case T_CHAR:\n+      case T_DOUBLE:\n+      case T_FLOAT:\n+      case T_INT:\n+      case T_LONG:\n+      case T_SHORT:\n+      case T_BOOLEAN:\n+        group->add_primitive_field(idx, type);\n+        break;\n+      case T_OBJECT:\n+      case T_ARRAY:\n+      case T_PRIMITIVE_OBJECT:  \/\/ T_PRIMITIVE_OBJECT is going to me removed, inline types are detected below\n+        if (!fieldinfo.field_flags().is_null_free_inline_type()) {\n+          if (group != _static_fields) _nonstatic_oopmap_count++;\n@@ -644,27 +758,3 @@\n-          _has_flattening_information = true;\n-          \/\/ Flattening decision to be taken here\n-          \/\/ This code assumes all verification already have been performed\n-          \/\/ (field's type has been loaded and it is an inline klass)\n-          JavaThread* THREAD = JavaThread::current();\n-          Klass* klass =  _inline_type_field_klasses->at(idx);\n-          assert(klass != nullptr, \"Sanity check\");\n-          InlineKlass* vk = InlineKlass::cast(klass);\n-          bool too_big_to_flatten = (InlineFieldMaxFlatSize >= 0 &&\n-                                    (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);\n-          bool too_atomic_to_flatten = vk->is_declared_atomic() || AlwaysAtomicAccesses;\n-          bool too_volatile_to_flatten = fieldinfo.access_flags().is_volatile();\n-          if (vk->is_naturally_atomic()) {\n-            too_atomic_to_flatten = false;\n-            \/\/too_volatile_to_flatten = false; \/\/FIXME\n-            \/\/ Currently, volatile fields are never flat, this could change in the future\n-          }\n-          if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {\n-            group->add_flat_field(idx, vk);\n-            _nonstatic_oopmap_count += vk->nonstatic_oop_map_count();\n-            _field_info->adr_at(idx)->field_flags_addr()->update_flat(true);\n-            if (!vk->is_atomic()) {  \/\/ flat and non-atomic: take note\n-              _has_nonatomic_values = true;\n-              _atomic_field_count--;  \/\/ every other field is atomic but this one\n-            }\n-          } else {\n-            _nonstatic_oopmap_count++;\n+          _has_inline_type_fields = true;\n+          if (group == _static_fields) {\n+            \/\/ static fields are never flat\n@@ -672,0 +762,30 @@\n+          } else {\n+            _has_flattening_information = true;\n+            \/\/ Flattening decision to be taken here\n+            \/\/ This code assumes all verification already have been performed\n+            \/\/ (field's type has been loaded and it is an inline klass)\n+            JavaThread* THREAD = JavaThread::current();\n+            Klass* klass =  _inline_type_field_klasses->at(idx);\n+            assert(klass != nullptr, \"Sanity check\");\n+            InlineKlass* vk = InlineKlass::cast(klass);\n+            bool too_big_to_flatten = (InlineFieldMaxFlatSize >= 0 &&\n+                                      (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);\n+            bool too_atomic_to_flatten = vk->is_declared_atomic() || AlwaysAtomicAccesses;\n+            bool too_volatile_to_flatten = fieldinfo.access_flags().is_volatile();\n+            if (vk->is_naturally_atomic()) {\n+              too_atomic_to_flatten = false;\n+              \/\/too_volatile_to_flatten = false; \/\/FIXME\n+              \/\/ Currently, volatile fields are never flat, this could change in the future\n+            }\n+            if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {\n+              group->add_flat_field(idx, vk);\n+              _nonstatic_oopmap_count += vk->nonstatic_oop_map_count();\n+              _field_info->adr_at(idx)->field_flags_addr()->update_flat(true);\n+              if (!vk->is_atomic()) {  \/\/ flat and non-atomic: take note\n+                _has_nonatomic_values = true;\n+                _atomic_field_count--;  \/\/ every other field is atomic but this one\n+              }\n+            } else {\n+              _nonstatic_oopmap_count++;\n+              group->add_oop_field(idx);\n+            }\n@@ -673,0 +793,3 @@\n+          break;\n+        default:\n+          fatal(\"Something wrong?\");\n@@ -674,3 +797,0 @@\n-      break;\n-    default:\n-      fatal(\"Something wrong?\");\n@@ -714,20 +834,15 @@\n-    assert(group != nullptr, \"invariant\");\n-    BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n-    switch(type) {\n-    case T_BYTE:\n-    case T_CHAR:\n-    case T_DOUBLE:\n-    case T_FLOAT:\n-    case T_INT:\n-    case T_LONG:\n-    case T_SHORT:\n-    case T_BOOLEAN:\n-      if (group != _static_fields) {\n-        field_alignment = type2aelembytes(type); \/\/ alignment == size for primitive types\n-      }\n-      group->add_primitive_field(fieldinfo.index(), type);\n-      break;\n-    case T_OBJECT:\n-    case T_ARRAY:\n-    case T_PRIMITIVE_OBJECT: \/\/ T_PRIMITIVE_OBJECT is going to be removed, online types are detected below\n-      if (!fieldinfo.field_flags().is_null_free_inline_type()) {\n+    bool has_multifield_annotation = false;\n+    if (fieldinfo.is_multifield() || fieldinfo.is_multifield_base()) {\n+      group->add_multifield(_constant_pool, &fieldinfo, _multifield_info);\n+    } else {\n+      assert(group != nullptr, \"invariant\");\n+      BasicType type = Signature::basic_type(fieldinfo.signature(_constant_pool));\n+      switch(type) {\n+      case T_BYTE:\n+      case T_CHAR:\n+      case T_DOUBLE:\n+      case T_FLOAT:\n+      case T_INT:\n+      case T_LONG:\n+      case T_SHORT:\n+      case T_BOOLEAN:\n@@ -735,2 +850,1 @@\n-          _nonstatic_oopmap_count++;\n-          field_alignment = type2aelembytes(type); \/\/ alignment == size for oops\n+          field_alignment = type2aelembytes(type); \/\/ alignment == size for primitive types\n@@ -738,5 +852,10 @@\n-        group->add_oop_field(fieldinfo.index());\n-      } else {\n-        _has_inline_type_fields = true;\n-        if (group == _static_fields) {\n-          \/\/ static fields are never flat\n+        group->add_primitive_field(fieldinfo.index(), type);\n+        break;\n+      case T_OBJECT:\n+      case T_ARRAY:\n+      case T_PRIMITIVE_OBJECT: \/\/ T_PRIMITIVE_OBJECT is going to be removed, online types are detected below\n+        if (!fieldinfo.field_flags().is_null_free_inline_type()) {\n+          if (group != _static_fields) {\n+            _nonstatic_oopmap_count++;\n+            field_alignment = type2aelembytes(type); \/\/ alignment == size for oops\n+          }\n@@ -745,28 +864,3 @@\n-          \/\/ Flattening decision to be taken here\n-          \/\/ This code assumes all verifications have already been performed\n-          \/\/ (field's type has been loaded and it is an inline klass)\n-          JavaThread* THREAD = JavaThread::current();\n-          Klass* klass =  _inline_type_field_klasses->at(fieldinfo.index());\n-          assert(klass != nullptr, \"Sanity check\");\n-          InlineKlass* vk = InlineKlass::cast(klass);\n-          bool too_big_to_flatten = (InlineFieldMaxFlatSize >= 0 &&\n-                                    (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);\n-          bool too_atomic_to_flatten = vk->is_declared_atomic() || AlwaysAtomicAccesses;\n-          bool too_volatile_to_flatten = fieldinfo.access_flags().is_volatile();\n-          if (vk->is_naturally_atomic()) {\n-            too_atomic_to_flatten = false;\n-            \/\/too_volatile_to_flatten = false; \/\/FIXME\n-            \/\/ Currently, volatile fields are never flat, this could change in the future\n-          }\n-          if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {\n-            group->add_flat_field(fieldinfo.index(), vk);\n-            _nonstatic_oopmap_count += vk->nonstatic_oop_map_count();\n-            field_alignment = vk->get_alignment();\n-            _field_info->adr_at(fieldinfo.index())->field_flags_addr()->update_flat(true);\n-            if (!vk->is_atomic()) {  \/\/ flat and non-atomic: take note\n-              _has_nonatomic_values = true;\n-              _atomic_field_count--;  \/\/ every other field is atomic but this one\n-            }\n-          } else {\n-            _nonstatic_oopmap_count++;\n-            field_alignment = type2aelembytes(T_OBJECT);\n+          _has_inline_type_fields = true;\n+          if (group == _static_fields) {\n+            \/\/ static fields are never flat\n@@ -774,0 +868,31 @@\n+          } else {\n+            \/\/ Flattening decision to be taken here\n+            \/\/ This code assumes all verifications have already been performed\n+            \/\/ (field's type has been loaded and it is an inline klass)\n+            JavaThread* THREAD = JavaThread::current();\n+            Klass* klass =  _inline_type_field_klasses->at(fieldinfo.index());\n+            assert(klass != nullptr, \"Sanity check\");\n+            InlineKlass* vk = InlineKlass::cast(klass);\n+            bool too_big_to_flatten = (InlineFieldMaxFlatSize >= 0 &&\n+                                      (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);\n+            bool too_atomic_to_flatten = vk->is_declared_atomic() || AlwaysAtomicAccesses;\n+            bool too_volatile_to_flatten = fieldinfo.access_flags().is_volatile();\n+            if (vk->is_naturally_atomic()) {\n+              too_atomic_to_flatten = false;\n+              \/\/too_volatile_to_flatten = false; \/\/FIXME\n+              \/\/ Currently, volatile fields are never flat, this could change in the future\n+            }\n+            if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {\n+              group->add_flat_field(fieldinfo.index(), vk);\n+              _nonstatic_oopmap_count += vk->nonstatic_oop_map_count();\n+              field_alignment = vk->get_alignment();\n+              _field_info->adr_at(fieldinfo.index())->field_flags_addr()->update_flat(true);\n+              if (!vk->is_atomic()) {  \/\/ flat and non-atomic: take note\n+                _has_nonatomic_values = true;\n+                _atomic_field_count--;  \/\/ every other field is atomic but this one\n+              }\n+            } else {\n+              _nonstatic_oopmap_count++;\n+              field_alignment = type2aelembytes(T_OBJECT);\n+              group->add_oop_field(fieldinfo.index());\n+            }\n@@ -776,0 +901,12 @@\n+        break;\n+      default:\n+        fatal(\"Unexpected BasicType\");\n+      }\n+      if (!fieldinfo.access_flags().is_static() && field_alignment > alignment) alignment = field_alignment;\n+    }\n+  }\n+  _root_group->sort_by_size();\n+  if (_root_group->multifields() != NULL) {\n+    for (int i = 0; i < _root_group->multifields()->length(); i++) {\n+      if (_root_group->multifields()->at(i)->group_alignment() > alignment) {\n+        alignment = _root_group->multifields()->at(i)->group_alignment();\n@@ -777,4 +914,0 @@\n-      break;\n-    default:\n-      fatal(\"Unexpected BasicType\");\n-    if (!fieldinfo.access_flags().is_static() && field_alignment > alignment) alignment = field_alignment;\n@@ -818,0 +951,5 @@\n+  if (_root_group->multifields() != NULL) {\n+    for (int i = 0; i < _root_group->multifields()->length(); i++) {\n+      _layout->add_multifield(_root_group->multifields()->at(i));\n+    }\n+  }\n@@ -827,1 +965,6 @@\n-      _layout->add(cg->big_primitive_fields());\n+      if (cg->multifields() != NULL) {\n+        for (int i = 0; i < cg->multifields()->length(); i++) {\n+          _layout->add_multifield(cg->multifields()->at(i), start);\n+        }\n+      }\n+      _layout->add(cg->big_primitive_fields(), start);\n@@ -839,0 +982,5 @@\n+  if (_static_fields->multifields() != NULL) {\n+    for (int i = 0; i < _static_fields->multifields()->length(); i++) {\n+      _layout->add_multifield(_static_fields->multifields()->at(i));\n+    }\n+  }\n@@ -872,0 +1020,5 @@\n+  if (_root_group->multifields() != NULL) {\n+    for (int i = 0; i < _root_group->multifields()->length(); i++) {\n+      _layout->add_multifield(_root_group->multifields()->at(i));\n+    }\n+  }\n@@ -885,1 +1038,0 @@\n-  _exact_size_in_bytes = _layout->last_block()->offset() - _layout->first_field_block()->offset();\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":296,"deletions":144,"binary":false,"changes":440,"status":"modified"},{"patch":"@@ -61,1 +61,2 @@\n-    INHERITED         \/\/ field(s) inherited from super classes\n+    INHERITED,         \/\/ field(s) inherited from super classes\n+    MULTIFIELD        \/\/ fields part of a multi-field\n@@ -74,0 +75,1 @@\n+  jbyte _multifield_index;\n@@ -77,1 +79,1 @@\n-  LayoutRawBlock(int index, Kind kind, int size, int alignment, bool is_reference = false);\n+  LayoutRawBlock(int index, Kind kind, int size, int alignment, bool is_reference, jbyte multifield_index);\n@@ -96,0 +98,1 @@\n+  jbyte multifield_index() const { return _multifield_index; }\n@@ -123,1 +126,34 @@\n-\/\/ A Field group represents a set of fields that have to be allocated together,\n+class MultiFieldGroup : public ResourceObj {\n+ private:\n+  u2 _multifield_base;\n+  Symbol* _signature;\n+  int _group_size;\n+  int _group_alignment;\n+  GrowableArray<LayoutRawBlock*>* _fields;\n+  \/\/ total size and alignment?\n+\n+  static const int INITIAL_LIST_SIZE = 16;\n+ public:\n+  MultiFieldGroup(u2 base, Symbol* signature);\n+\n+  u2 multifield_base() const { return _multifield_base; }\n+  Symbol* signature() const { return _signature; }\n+  int group_size() const { return _group_size; }\n+  void set_group_size(int size) { _group_size = size; }\n+  int group_alignment() const { return _group_alignment; }\n+  void set_group_alignment(int alignment) { _group_alignment = alignment; }\n+  GrowableArray<LayoutRawBlock*>* fields() const { return _fields; }\n+  void add_field(ConstantPool* cp, FieldInfo* field, InlineKlass* vk, Array<MultiFieldInfo>* multifield_info);\n+  static int compare_multifield_index(LayoutRawBlock** x, LayoutRawBlock** y) {\n+    return (*x)->multifield_index() - (*y)->multifield_index();\n+  }\n+  static int compare_multifield_groups_inverted(MultiFieldGroup** x, MultiFieldGroup** y) {\n+    int diff = (*y)->group_size() - (*x)->group_size();\n+    if (diff == 0) {\n+      diff = (*y)->group_alignment() - (*x)->group_alignment();\n+    }\n+    return diff;\n+  }\n+};\n+\n+\/\/ A FieldGroup represents a set of fields that have to be allocated together,\n@@ -136,0 +172,1 @@\n+  GrowableArray<MultiFieldGroup*>* _multifields;\n@@ -148,0 +185,1 @@\n+  GrowableArray<MultiFieldGroup*>* multifields() const { return _multifields; }\n@@ -154,0 +192,1 @@\n+  void add_multifield(ConstantPool* cp, FieldInfo* field, Array<MultiFieldInfo>* multifield_info, InlineKlass* vk = NULL);\n@@ -181,0 +220,1 @@\n+  Array<MultiFieldInfo>* _multifield_info;\n@@ -186,1 +226,1 @@\n-  FieldLayout(GrowableArray<FieldInfo>* field_info, ConstantPool* cp);\n+  FieldLayout(GrowableArray<FieldInfo>* field_info, ConstantPool* cp, Array<MultiFieldInfo>* multifields);\n@@ -208,0 +248,1 @@\n+  void add_multifield(MultiFieldGroup* multifield, LayoutRawBlock* start = nullptr);\n@@ -248,0 +289,1 @@\n+  Array<MultiFieldInfo>* _multifield_info;\n@@ -266,0 +308,1 @@\n+  MultiFieldGroup* get_or_create_multifield_group(int base);\n@@ -270,1 +313,1 @@\n-                     Array<InlineKlass*>* inline_type_field_klasses);\n+                     Array<InlineKlass*>* inline_type_field_klasses, Array<MultiFieldInfo>* multifields);\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.hpp","additions":48,"deletions":5,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -1739,7 +1739,2 @@\n- private:\n-  static int _payload_offset;\n-  static void set_payload(oop o, oop val);\n-\n-  static void compute_offsets();\n-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n-\n+  static void compute_offsets() { }\n+  static void serialize_offsets(SerializeClosure* f) { }\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+class MultiFieldInfo;\n+\n@@ -57,0 +59,1 @@\n+  friend class FieldStreamBase;\n@@ -82,0 +85,2 @@\n+      _ff_multifield,        \/\/ carry a multifield annotation.\n+      _ff_multifield_base,   \/\/ is a base field of multifield bundle.\n@@ -118,0 +123,2 @@\n+    bool is_multifield() const      { return test_flag(_ff_multifield); }\n+    bool is_multifield_base() const { return test_flag(_ff_multifield_base); }\n@@ -126,0 +133,2 @@\n+    void update_multifield(bool z)       { update_flag(_ff_multifield, z); }\n+    void update_multifield_base(bool z)  { update_flag(_ff_multifield_base, z); }\n@@ -172,1 +181,1 @@\n-  u2 name_index() const                      { return _name_index; }\n+  u2 name_index() const                      { assert(!_field_flags.is_multifield(), \"wrong call\"); return _name_index; }\n@@ -186,0 +195,1 @@\n+  u2 secondary_index() const                 { assert(_field_flags.is_multifield(), \"wrong call\"); return _name_index; }\n@@ -191,0 +201,8 @@\n+  bool is_multifield() const {\n+    return _field_flags.is_multifield();\n+  }\n+\n+  bool is_multifield_base() const {\n+    return _field_flags.is_multifield_base();\n+  }\n+\n@@ -205,1 +223,1 @@\n-  inline Symbol* name(ConstantPool* cp) const;\n+  inline Symbol* name(Array<MultiFieldInfo>* multifield_info, ConstantPool* cp) const;\n@@ -211,0 +229,6 @@\n+  Symbol* get_multifield_name(Array<MultiFieldInfo>* multifield_info) const;\n+\n+  inline u2 multifield_base(Array<MultiFieldInfo>* multifield_info) const;\n+\n+  inline jbyte multifield_index(Array<MultiFieldInfo>* multifield_info) const;\n+\n@@ -215,0 +239,16 @@\n+class MultiFieldInfo : public MetaspaceObj {\n+ private:\n+  Symbol* _name;\n+  u2 _base_index;\n+  jbyte _multifield_index;\n+ public:\n+  MultiFieldInfo() : _name(nullptr), _base_index(0), _multifield_index(-1) {}\n+  MultiFieldInfo(Symbol* name, u2 base, jbyte index) : _name(name), _base_index(base), _multifield_index(index) {}\n+  Symbol* name() const { return _name; }\n+  u2 base_index() const { return _base_index; }\n+  jbyte multifield_index() const { return _multifield_index; }\n+  FieldInfo base_field_info(InstanceKlass* ik);\n+  void metaspace_pointers_do(MetaspaceClosure* it);\n+  MetaspaceObj::Type type() const { return MultiFieldInfoType; }\n+};\n+\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  Array<MultiFieldInfo>* _multifield_info;\n@@ -57,1 +58,1 @@\n-  inline FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants, int start, int limit);\n+  inline FieldStreamBase(const Array<u1>* fieldinfo_stream, ConstantPool* constants, Array<MultiFieldInfo>* multifield_info, int start, int limit);\n@@ -59,1 +60,1 @@\n-  inline FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants);\n+  inline FieldStreamBase(Array<u1>* fieldinfo_stream, ConstantPool* constants, Array<MultiFieldInfo>* multifield_info);\n@@ -94,1 +95,5 @@\n-    return field()->name(_constants());\n+    return field()->name(_multifield_info, _constants());\n+  }\n+\n+  int name_index() const {\n+    return field()->name_index();\n@@ -135,0 +140,18 @@\n+  bool is_multifield() const {\n+    return field()->is_multifield();\n+  }\n+\n+  bool is_multifield_base() const {\n+    return field()->is_multifield_base();\n+  }\n+\n+  u2 multifield_base() const {\n+    assert(field()->is_multifield() || field()->is_multifield_base(), \"Must be\");\n+    return field()->is_multifield() ? _multifield_info->at(field()->secondary_index()).base_index() : index();\n+  }\n+\n+  jbyte multifield_index() const {\n+    assert(field()->is_multifield() || field()->is_multifield_base(), \"Must be\");\n+    return field()->is_multifield() ? _multifield_info->at(field()->secondary_index()).multifield_index() : (jbyte)0;\n+  }\n+\n@@ -150,1 +173,1 @@\n-  JavaFieldStream(const InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), 0, k->java_fields_count()) {}\n+  JavaFieldStream(const InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), k->multifield_info(), 0, k->java_fields_count()) {}\n@@ -177,1 +200,0 @@\n-\n@@ -181,1 +203,1 @@\n-  InternalFieldStream(InstanceKlass* k):      FieldStreamBase(k->fieldinfo_stream(), k->constants(), k->java_fields_count(), 0) {}\n+  InternalFieldStream(InstanceKlass* k): FieldStreamBase(k->fieldinfo_stream(), k->constants(), k->multifield_info(), k->java_fields_count(), 0) {}\n@@ -187,2 +209,2 @@\n-  AllFieldStream(Array<u1>* fieldinfo, ConstantPool* constants): FieldStreamBase(fieldinfo, constants) {}\n-  AllFieldStream(const InstanceKlass* k):      FieldStreamBase(k->fieldinfo_stream(), k->constants()) {}\n+  AllFieldStream(Array<u1>* fieldinfo, ConstantPool* constants, Array<MultiFieldInfo>* multifield_info): FieldStreamBase(fieldinfo, constants, multifield_info) {}\n+  AllFieldStream(const InstanceKlass* k):      FieldStreamBase(k->fieldinfo_stream(), k->constants(), k->multifield_info()) {}\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+#include \"prims\/vectorSupport.hpp\"\n@@ -244,0 +245,1 @@\n+    if (fs.is_multifield()) continue;\n@@ -338,1 +340,2 @@\n-  return InlineTypePassFieldsAsArgs;\n+  return !VectorSupport::skip_value_scalarization(const_cast<InlineKlass*>(this)) &&\n+         InlineTypePassFieldsAsArgs;\n@@ -343,1 +346,3 @@\n-  return InlineTypeReturnedAsFields && (init || return_regs() != nullptr);\n+  return !VectorSupport::skip_value_scalarization(const_cast<InlineKlass*>(this)) &&\n+         InlineTypeReturnedAsFields &&\n+         (init || return_regs() != nullptr);\n@@ -508,0 +513,1 @@\n+#if INCLUDE_CDS\n@@ -546,0 +552,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,0 +136,3 @@\n+\/\/ CDS support\n+\n+#if INCLUDE_CDS\n@@ -140,0 +143,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -170,0 +170,8 @@\n+FieldInfo MultiFieldInfo::base_field_info(InstanceKlass* ik) {\n+  return ik->field(_base_index);\n+}\n+\n+void MultiFieldInfo::metaspace_pointers_do(MetaspaceClosure* it) {\n+  it->push(&_name);\n+}\n+\n@@ -548,0 +556,1 @@\n+  _multifield_info(nullptr),\n@@ -757,0 +766,4 @@\n+  if (_multifield_info != NULL && !_multifield_info->is_shared()) {\n+    MetadataFactory::free_array<MultiFieldInfo>(loader_data, _multifield_info);\n+  }\n+\n@@ -2756,0 +2769,3 @@\n+  if(_multifield_info != NULL) {\n+    it->push(&_multifield_info);\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -141,13 +141,12 @@\n-class InlineKlassFixedBlock {\n-  Array<SigEntry>** _extended_sig;\n-  Array<VMRegPair>** _return_regs;\n-  address* _pack_handler;\n-  address* _pack_handler_jobject;\n-  address* _unpack_handler;\n-  int* _default_value_offset;\n-  ArrayKlass** _null_free_inline_array_klasses;\n-  int _alignment;\n-  int _first_field_offset;\n-  int _exact_size_in_bytes;\n-\n-  friend class InlineKlass;\n+class InlineKlassFixedBlock : public MetaspaceObj {\n+   Array<SigEntry>** _extended_sig;\n+   Array<VMRegPair>** _return_regs;\n+   address* _pack_handler;\n+   address* _pack_handler_jobject;\n+   address* _unpack_handler;\n+   int* _default_value_offset;\n+   ArrayKlass** _null_free_inline_array_klasses;\n+   int _alignment;\n+   int _first_field_offset;\n+   int _exact_size_in_bytes;\n+   friend class InlineKlass;\n@@ -231,0 +230,3 @@\n+  \/\/ Array containing meta-data generated for multifields\n+  Array<MultiFieldInfo>* _multifield_info;\n+\n@@ -303,1 +305,1 @@\n-  const InlineKlassFixedBlock* _adr_inlineklass_fixed_block;\n+  InlineKlassFixedBlock* _adr_inlineklass_fixed_block;\n@@ -440,0 +442,1 @@\n+  friend class MultiFieldInfo;\n@@ -462,0 +465,11 @@\n+  Array<MultiFieldInfo>* multifield_info() const { return _multifield_info; }\n+\n+  MultiFieldInfo multifield_info(int i) const {\n+    guarantee(_multifield_info != NULL, \"Just checking\");\n+    return _multifield_info->at(i);\n+  }\n+  void set_multifield_info(Array<MultiFieldInfo>* array) {\n+    assert(_multifield_info == NULL, \"Must be initialized only once\");\n+    _multifield_info = array;\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":28,"deletions":14,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -797,1 +797,3 @@\n-    if (vt != nullptr) {\n+    \/\/ Upfront buffering for VectorBox may cause problems in sweeping allocation\n+    \/\/ graph pallets if boxes are removed during unbox-box optimization.\n+    if (vt != nullptr && !result->is_VectorBox()) {\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -510,1 +510,1 @@\n-            format_helper(regalloc, st, init_node, \":\", -1, nullptr);\n+            format_helper(regalloc, st, init_node, \":\", -2, nullptr);\n@@ -512,0 +512,5 @@\n+\n+          Node* larval_node = mcall->in(first_ind++);\n+          assert(larval_node != NULL && larval_node->is_Con(), \"is_larval node not found\");\n+          st->print(\" [is_larval\");\n+          format_helper(regalloc, st, larval_node, \":\", -1, NULL);\n@@ -513,1 +518,1 @@\n-        Node* fld_node = mcall->in(first_ind);\n+\n@@ -515,13 +520,6 @@\n-        if (iklass != nullptr) {\n-          st->print(\" [\");\n-          cifield = iklass->nonstatic_field_at(0);\n-          cifield->print_name_on(st);\n-          format_helper(regalloc, st, fld_node, \":\", 0, &scobjs);\n-        } else {\n-          format_helper(regalloc, st, fld_node, \"[\", 0, &scobjs);\n-        }\n-        for (uint j = 1; j < nf; j++) {\n-          fld_node = mcall->in(first_ind+j);\n-          if (iklass != nullptr) {\n-            st->print(\", [\");\n-            cifield = iklass->nonstatic_field_at(j);\n+        uint sec_fields_count = 0;\n+        for (uint j = 0; j < nf; j++) {\n+          Node* fld_node = mcall->in(first_ind + j);\n+          if (iklass != NULL) {\n+            st->print(\" [\");\n+            cifield = iklass->nonstatic_field_at(j - sec_fields_count);\n@@ -530,0 +528,15 @@\n+            sec_fields_count = 0;\n+            if (cifield->is_multifield_base() && !fld_node->bottom_type()->isa_vect()) {\n+              sec_fields_count = cifield->secondary_fields_count() - 1;\n+              for (uint f = 0; f < sec_fields_count; f++) {\n+                st->print(\" [\");\n+                fld_node = mcall->in(first_ind + j + f + 1);\n+                ciField* sec_field = static_cast<ciMultiField*>(cifield)->secondary_field_at(f);\n+                sec_field->print_name_on(st);\n+                format_helper(regalloc, st, fld_node, \":\", j + f + 1, &scobjs);\n+                if (f < sec_fields_count - 1) {\n+                  st->print(\",\");\n+                }\n+              }\n+              j += sec_fields_count;\n+            }\n@@ -531,1 +544,5 @@\n-            format_helper(regalloc, st, fld_node, \", [\", j, &scobjs);\n+            format_helper(regalloc, st, fld_node, \" [\", j, &scobjs);\n+          }\n+\n+          if (j < nf - 1) {\n+            st->print(\",\");\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":33,"deletions":16,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2634,0 +2634,14 @@\n+        \/\/ FIXME: Skipping pushing VectorBox across Phi\n+        \/\/ since they are special type of InlineTypeNode\n+        \/\/ carrying VBA as oop fields.\n+        \/\/ We have a seperate handling for pushing VectorBoxes\n+        \/\/ across PhiNodes in merge_through_phi.\n+        \/\/ In long run we should eliminate VectorBox which is\n+        \/\/ just a light weight wrapper of InlineTypeNode.\n+        \/\/ Only reason to keep VectorBox was to defer buffering\n+        \/\/ to a later stage and associate VBA which carry\n+        \/\/ JVM state to reinitialize GraphKit before buffering.\n+        if (n->is_VectorBox()) {\n+          can_optimize = false;\n+          break;\n+        }\n@@ -2665,1 +2679,1 @@\n-    progress = merge_through_phi(this, phase->is_IterGVN());\n+    progress = merge_through_phi(this, phase);\n@@ -2699,1 +2713,1 @@\n-      } else if (def->Opcode() == Op_VectorBox) { \/\/ leaf\n+      } else if (def->is_InlineType()) { \/\/ leaf\n@@ -2716,1 +2730,2 @@\n-Node* PhiNode::merge_through_phi(Node* root_phi, PhaseIterGVN* igvn) {\n+Node* PhiNode::merge_through_phi(Node* root_phi, PhaseGVN *phase) {\n+  PhaseIterGVN *igvn = phase->is_IterGVN();\n@@ -2762,3 +2777,7 @@\n-  Node* new_vbox_phi = clone_through_phi(root_phi, btype, VectorBoxNode::Box,   igvn);\n-  Node* new_vect_phi = clone_through_phi(root_phi, vtype, VectorBoxNode::Value, igvn);\n-  return new VectorBoxNode(igvn->C, new_vbox_phi, new_vect_phi, btype, vtype);\n+  const Type*        ptype = cached_vbox->field_value(0)->bottom_type();\n+\n+  Node* new_payload_phi = clone_through_phi(root_phi, ptype, InlineTypeNode::get_Values_idx(), igvn);\n+  Node* new_vector_phi = clone_through_phi(new_payload_phi, vtype, InlineTypeNode::get_Values_idx(), igvn);\n+  Node* new_vbox_phi = clone_through_phi(root_phi, btype, InlineTypeNode::get_Oop_idx(), igvn);\n+\n+  return VectorBoxNode::make_box_node(*igvn, phase->C, new_vbox_phi, new_vector_phi, btype, vtype);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2758,10 +2758,0 @@\n-  assert(EnableVectorSupport || !has_vbox_nodes(), \"sanity\");\n-  if (EnableVectorSupport && has_vbox_nodes()) {\n-    TracePhase tp(\"\", &timers[_t_vector]);\n-    PhaseVector pv(igvn);\n-    pv.optimize_vector_boxes();\n-\n-    print_method(PHASE_ITER_GVN_AFTER_VECTOR, 2);\n-  }\n-  assert(!has_vbox_nodes(), \"sanity\");\n-\n@@ -2779,0 +2769,13 @@\n+  \/\/ Process inline type nodes now that all inlining is over\n+  process_inline_types(igvn);\n+\n+  assert(EnableVectorSupport || !has_vbox_nodes(), \"sanity\");\n+  if (EnableVectorSupport && has_vbox_nodes()) {\n+    TracePhase tp(\"\", &timers[_t_vector]);\n+    PhaseVector pv(igvn);\n+    pv.optimize_vector_boxes();\n+\n+    print_method(PHASE_ITER_GVN_AFTER_VECTOR, 2);\n+  }\n+  assert(!has_vbox_nodes(), \"sanity\");\n+\n@@ -2783,3 +2786,0 @@\n-  \/\/ Process inline type nodes now that all inlining is over\n-  process_inline_types(igvn);\n-\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1093,1 +1093,1 @@\n-      int      size  = field->type()->size();\n+      int size = InlineTypeNode::stack_size_for_field(field);\n@@ -1135,1 +1135,1 @@\n-    int      size  = field->type()->size();\n+    int size = InlineTypeNode::stack_size_for_field(field);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,26 @@\n+#include \"opto\/vectornode.hpp\"\n+\n+int  InlineTypeNode::stack_size_for_field(ciField* field) {\n+  return field->is_multifield_base()\n+             ? field->type()->elem_word_count()\n+             : field->type()->size();\n+}\n+\n+bool InlineTypeNode::is_multifield_scalarized(BasicType bt, int vec_len) {\n+  if (!is_java_primitive(bt) ||\n+      !Matcher::match_rule_supported_vector(Op_LoadVector, vec_len, bt)  ||\n+      !Matcher::match_rule_supported_vector(Op_StoreVector, vec_len, bt) ||\n+      !Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vec_len, bt)) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n+bool InlineTypeNode::is_multifield_scalarized(ciField* field) {\n+  if (!field->is_multifield_base()) {\n+    return true;\n+  }\n+  int field_count = field->secondary_fields_count();\n+  BasicType bt = field->type()->basic_type();\n+  return is_multifield_scalarized(bt, field_count);\n+}\n@@ -82,0 +108,4 @@\n+      if (vt->is_multifield_base(i) &&\n+          Matcher::vector_size_supported(type->basic_type(), vt->secondary_fields_count(i))) {\n+        t = TypeVect::make(t, vt->secondary_fields_count(i));\n+      }\n@@ -115,0 +145,1 @@\n+  assert(this->Opcode() == other->Opcode(), \"\");\n@@ -244,0 +275,15 @@\n+int InlineTypeNode::secondary_fields_count(uint index) const {\n+  assert(is_multifield_base(index), \"non-multifield field at index\");\n+  return inline_klass()->declared_nonstatic_field_at(index)->secondary_fields_count();\n+}\n+\n+bool InlineTypeNode::is_multifield(uint index) const {\n+  assert(index < field_count(), \"index out of bounds\");\n+  return inline_klass()->declared_nonstatic_field_at(index)->is_multifield();\n+}\n+\n+bool InlineTypeNode::is_multifield_base(uint index) const {\n+  assert(index < field_count(), \"index out of bounds\");\n+  return inline_klass()->declared_nonstatic_field_at(index)->is_multifield_base();\n+}\n+\n@@ -258,0 +304,8 @@\n+static bool is_vector_payload(ciKlass* klass) {\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayload_klass());\n+}\n+\n+static bool is_vector_payload_mf(ciKlass* klass) {\n+  return klass->is_subclass_of(ciEnv::current()->vector_VectorPayloadMF_klass());\n+}\n+\n@@ -261,0 +315,5 @@\n+  if (is_vector_payload_mf(vk)) {\n+     assert(field_count() == nfields, \"\");\n+  } else if (is_vector_payload(vk)) {\n+     assert(field_value(0)->as_InlineType()->field_count() == nfields, \"\");\n+  }\n@@ -276,0 +335,4 @@\n+\n+  AllocateNode* alloc = AllocateNode::Ideal_allocation(get_oop());\n+  sfpt->add_req(igvn->intcon(alloc && alloc->_larval ? 1 : 0));\n+\n@@ -425,1 +488,1 @@\n-      if (base->is_Con() && !is_array && !mismatched) {\n+      if (base->is_Con() && !is_array && !mismatched && !is_multifield_base(i)) {\n@@ -442,0 +505,1 @@\n+        BasicType bt = type2field[ft->basic_type()];\n@@ -444,1 +508,0 @@\n-        BasicType bt = type2field[ft->basic_type()];\n@@ -447,1 +510,7 @@\n-        value = kit->access_load_at(base, adr, adr_type, val_type, bt, is_array ? (decorators | IS_ARRAY) : decorators);\n+        ciField* field = inline_klass()->get_field_by_offset(field_offset(i), false);\n+        bool load_bundle = !InlineTypeNode::is_multifield_scalarized(field);\n+        if (load_bundle) {\n+          value = kit->gvn().transform(LoadVectorNode::make(0, kit->control(), kit->memory(adr), adr, adr_type, ft->bundle_size(), bt));\n+        } else {\n+          value = kit->access_load_at(base, adr, adr_type, val_type, bt, is_array ? (decorators | IS_ARRAY) : decorators);\n+        }\n@@ -478,0 +547,1 @@\n+  int field_idx = 0;\n@@ -486,1 +556,3 @@\n-      \/\/ Store field value to memory\n+      int vec_len = ft->bundle_size();\n+      BasicType bt = type2field[ft->basic_type()];\n+      const Type* val_type = Type::get_const_type(ft);\n@@ -489,4 +561,8 @@\n-      BasicType bt = type2field[ft->basic_type()];\n-      const Type* val_type = Type::get_const_type(ft);\n-      bool is_array = (kit->gvn().type(base)->isa_aryptr() != nullptr);\n-      kit->access_store_at(base, adr, adr_type, value, val_type, bt, is_array ? (decorators | IS_ARRAY) : decorators);\n+      if (value->bottom_type()->isa_vect()) {\n+        assert(value->bottom_type()->is_vect()->length() == (uint)vec_len, \"\");\n+        Node* store = kit->gvn().transform(StoreVectorNode::make(0, kit->control(), kit->memory(adr), adr, adr_type, value, vec_len));\n+        kit->set_memory(store, adr_type);\n+      } else {\n+        bool is_array = (kit->gvn().type(base)->isa_aryptr() != nullptr);\n+        kit->access_store_at(base, adr, adr_type, value, val_type, bt, is_array ? (decorators | IS_ARRAY) : decorators);\n+      }\n@@ -694,1 +770,1 @@\n-  if (oop->isa_InlineType() && !phase->type(oop)->maybe_null()) {\n+  if (oop->isa_InlineType() && !oop->isa_VectorBox() && !phase->type(oop)->maybe_null()) {\n@@ -755,0 +831,13 @@\n+Node* InlineTypeNode::default_value(PhaseGVN& gvn, ciType* field_type, ciInlineKlass* klass, int index) {\n+  BasicType bt = field_type->basic_type();\n+  int vec_len = field_type->bundle_size();\n+  Node* value = gvn.zerocon(field_type->basic_type());\n+  bool is_multifield_base = klass->declared_nonstatic_field_at(index)->is_multifield_base();\n+  if (is_multifield_base &&\n+      is_java_primitive(bt) &&\n+      Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vec_len, bt)) {\n+      value = gvn.transform(VectorNode::scalar2vector(value, vec_len, Type::get_const_type(field_type), false));\n+  }\n+  return value;\n+}\n+\n@@ -769,1 +858,1 @@\n-    Node* value = gvn.zerocon(ft->basic_type());\n+    Node* value = default_value(gvn, ft, vk, i);\n@@ -806,1 +895,2 @@\n-    if (!gvn->type(value)->is_zero_type()) {\n+    if (!gvn->type(value)->is_zero_type() &&\n+        !VectorNode::is_all_zeros_vector(value)) {\n@@ -1120,1 +1210,20 @@\n-      if (multi->is_Start()) {\n+      ciInlineKlass* ik = inline_klass();\n+      ciField* field = ik->declared_nonstatic_field_at(i);\n+      if (!InlineTypeNode::is_multifield_scalarized(field)) {\n+        Node* not_null_oop =  NULL;\n+        if (multi->is_Call()) {\n+          if (in) {\n+            not_null_oop = multi->as_Call()->in(base_input);\n+          } else {\n+            not_null_oop =  multi->as_Call()->proj_out(TypeFunc::Parms);\n+          }\n+          assert(not_null_oop->bottom_type()->isa_instptr(), \"\");\n+          load(kit, not_null_oop, not_null_oop, ik, visited, \/* holder_offset *\/ 0);\n+          parm = field_value(i);\n+        } else if (multi->is_Start()) {\n+          assert(in, \"return from start?\");\n+          parm = default_value(gvn, type, ik, i);\n+        } else {\n+          assert(false, \"unhandled case\");\n+        }\n+      } else if (multi->is_Start()) {\n@@ -1148,1 +1257,1 @@\n-      base_input += type->size();\n+      base_input += (type->size() \/ type->bundle_size());\n@@ -1216,1 +1325,1 @@\n-    Node* value = gvn.zerocon(ft->basic_type());\n+    Node* value = default_value(gvn, ft, vk, i);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":123,"deletions":14,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"opto\/matcher.hpp\"\n@@ -53,3 +54,0 @@\n-  \/\/ Get the klass defining the field layout of the inline type\n-  ciInlineKlass* inline_klass() const { return type()->inline_klass(); }\n-\n@@ -72,0 +70,3 @@\n+public:\n+  \/\/ Get the klass defining the field layout of the inline type\n+  ciInlineKlass* inline_klass() const { return type()->inline_klass(); }\n@@ -93,0 +94,5 @@\n+  static bool is_multifield_scalarized(ciField* field);\n+  static bool is_multifield_scalarized(BasicType bt, int vec_len);\n+\n+  static int stack_size_for_field(ciField* field);\n+\n@@ -96,0 +102,2 @@\n+  static Node* default_value(PhaseGVN& gvn, ciType* field_type, ciInlineKlass* klass, int index);\n+\n@@ -110,0 +118,4 @@\n+  \/\/ Get indices for inputs.\n+  static int   get_Oop_idx()    { return InlineTypeNode::Oop; }\n+  static int   get_Values_idx() { return InlineTypeNode::Values; }\n+\n@@ -111,2 +123,4 @@\n-  uint          field_count() const { return req() - Values; }\n-  Node*         field_value(uint index) const;\n+  virtual uint  field_count() const { return req() - Values; }\n+  virtual Node* field_value(uint index) const;\n+  uint          field_index(int offset) const;\n+\n@@ -114,2 +128,3 @@\n-  void      set_field_value(uint index, Node* value);\n-  void      set_field_value_by_offset(int offset, Node* value);\n+  void          set_field_value(uint index, Node* value);\n+\n+  void          set_field_value_by_offset(int offset, Node* value);\n@@ -117,1 +132,3 @@\n-  uint          field_index(int offset) const;\n+  bool          is_multifield(uint index) const;\n+  bool          is_multifield_base(uint index) const;\n+  int           secondary_fields_count(uint index) const;\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2312,1 +2312,1 @@\n- }\n+  }\n@@ -2352,0 +2352,8 @@\n+      \/\/ FIXME: Larval bit check is needed to preserve the semantics of value\n+      \/\/ objects which can be mutated only if its _larval bit is set. Since\n+      \/\/ the oop is not always an AllocateNode, we have to find an utility way\n+      \/\/ to check the larval state for all kind of oops.\n+      AllocateNode* alloc = AllocateNode::Ideal_allocation(base);\n+      if (alloc != nullptr) {\n+        assert(alloc->_larval, \"InlineType instance must be in _larval state for unsafe put operation.\\n\");\n+      }\n@@ -2360,0 +2368,5 @@\n+        \/\/ Skip over direct field access for VectorPayloadMF* class instances since\n+        \/\/ multifield is loaded into vector, alternatively we can create a lane\n+        \/\/ extraction logic. Given that unsafe put operations over vector payloads are part\n+        \/\/ of fallback implementation, for the time being suboptimality should not be major\n+        \/\/ concern.\n@@ -2361,1 +2374,1 @@\n-        if (field != nullptr) {\n+        if (field != nullptr && !VectorSupport::is_vector_payload_mf(vk->get_InlineKlass())) {\n@@ -2649,1 +2662,1 @@\n-  if (!vt->is_allocated(&_gvn)) {\n+  if (!vt->is_allocated(&_gvn) || VectorSupport::is_vector_payload_mf(vt->inline_klass()->get_InlineKlass())) {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1246,1 +1246,6 @@\n-  if (base != nullptr && base->is_InlineType() && offset > oopDesc::klass_offset_in_bytes()) {\n+  if (base != nullptr && base->is_InlineType() &&\n+      \/\/ Multifields are loaded into vectors and lane level loads needs\n+      \/\/ an explicit extraction operation.\n+      (bottom_type()->isa_vect() ||\n+       !VectorSupport::is_vector_payload_mf(base->as_InlineType()->inline_klass()->get_InlineKlass())) &&\n+      offset > oopDesc::klass_offset_in_bytes()) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -927,1 +927,8 @@\n-    if (tf()->returns_inline_type_as_fields()) {\n+    if (res->isa_InlineType() && VectorSupport::skip_value_scalarization(res->as_InlineType()->inline_klass()->get_InlineKlass())) {\n+      InlineTypeNode* vt = res->as_InlineType();\n+      \/\/ Prevent returning uninitialized VBA, this will make associated box useless and\n+      \/\/ will be swept by dead code eliminator. Once VBA is expanded and initialized during\n+      \/\/ PhaseVector box users will be tied to newly allocated and initialized objects.\n+      assert(vt->get_is_buffered(), \"\");\n+      ret->add_req(vt->get_is_buffered()->get_int() ? vt->get_oop() : res);\n+    } else if (tf()->returns_inline_type_as_fields()) {\n@@ -1150,1 +1157,1 @@\n-  \/\/ record exit from a method if compiled while Dtrace is turned on.\n+  \/\/ record exit from a method if compiled while Dtrace is returned on.\n@@ -2370,2 +2377,9 @@\n-    if ((tf()->returns_inline_type_as_fields() || (_caller->has_method() && !Compile::current()->inlining_incrementally())) &&\n-        return_type->is_inlinetypeptr()) {\n+    \/\/ Buffer vector return values, for regular inline object caller\n+    \/\/ expects scalarized fields to be passed back.\n+    bool is_vector_value = value->is_InlineType() &&\n+                           VectorSupport::skip_value_scalarization(value->as_InlineType()->inline_klass()->get_InlineKlass());\n+    \/\/ Defer returning VectorBoxAllocation node, they will be expanded and initialized\n+    \/\/ during box expansion and will replace all uses of box.\n+    bool skip_scalarization = is_vector_value && Compile::current()->inlining_incrementally();\n+    if (!is_vector_value && ((tf()->returns_inline_type_as_fields() || (_caller->has_method() && !Compile::current()->inlining_incrementally())) &&\n+        return_type->is_inlinetypeptr())) {\n@@ -2385,1 +2399,2 @@\n-    } else if (value->is_InlineType()) {\n+    } else if (skip_scalarization ||\n+               (value->Opcode() != Op_VectorBox && value->is_InlineType())) {\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"opto\/vectornode.hpp\"\n@@ -342,1 +343,1 @@\n-  int holder_depth = field->type()->size();\n+  int holder_depth = field->type()->size() \/ field->type()->bundle_size();\n@@ -359,1 +360,1 @@\n-    int nargs = 1 + field->type()->size();\n+    int nargs = 1 + field->type()->size() \/ field->type()->bundle_size();\n@@ -368,1 +369,14 @@\n-  new_vt->set_field_value_by_offset(field->offset_in_bytes(), val);\n+\n+  BasicType bt = field->type()->basic_type();\n+  int vec_len = field->secondary_fields_count();\n+  bool scalarize_fields = !field->is_multifield_base() || !is_java_primitive(bt) ||\n+                          !Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vec_len, bt);\n+  if (scalarize_fields) {\n+    for(int i = 0; i < vec_len; i++) {\n+      new_vt->set_field_value_by_offset(field->offset_in_bytes() + i * type2aelembytes(bt), val);\n+    }\n+  } else {\n+    val = _gvn.transform(VectorNode::scalar2vector(val, field->secondary_fields_count(), Type::get_const_type(field->type()), false));\n+    new_vt->set_field_value_by_offset(field->offset_in_bytes(), val);\n+  }\n+\n@@ -372,1 +386,1 @@\n-    int nargs = 1 + field->type()->size();\n+    int nargs = 1 + InlineTypeNode::stack_size_for_field(field);\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1279,8 +1279,0 @@\n-#ifdef COMPILER2\n-        if (EnableVectorSupport && VectorSupport::is_vector(ik)) {\n-          obj = VectorSupport::allocate_vector(ik, fr, reg_map, sv, THREAD);\n-        } else {\n-          obj = ik->allocate_instance(THREAD);\n-        }\n-#else\n-#endif \/\/ COMPILER2\n@@ -1307,0 +1299,8 @@\n+    if (k->is_inline_klass()) {\n+      intptr_t is_larval = StackValue::create_stack_value(fr, reg_map, sv->is_larval())->get_int();\n+      jint larval = (jint)*((jint*)&is_larval);\n+      if (larval == 1) {\n+        obj->set_mark(obj->mark().enter_larval_state());\n+      }\n+    }\n+\n@@ -1511,0 +1511,1 @@\n+  int _secondary_fields_count;\n@@ -1512,1 +1513,1 @@\n-  ReassignedField() : _offset(0), _type(T_ILLEGAL), _klass(nullptr), _is_flat(false) { }\n+  ReassignedField() : _offset(0), _type(T_ILLEGAL), _klass(nullptr), _is_flat(false), _secondary_fields_count(0) { }\n@@ -1519,0 +1520,36 @@\n+static void init_multi_field(oop obj, int offset, BasicType elem_bt, address addr) {\n+  switch (elem_bt) {\n+    case T_BOOLEAN: obj->bool_field_put(offset, *(jboolean*)addr); break;\n+    case T_BYTE:    obj->byte_field_put(offset, *(jbyte*)addr); break;\n+    case T_SHORT:   obj->short_field_put(offset, *(jshort*)addr); break;\n+    case T_INT:     obj->int_field_put(offset, *(jint*)addr); break;\n+    case T_FLOAT:   obj->float_field_put(offset, *(jfloat*)addr); break;\n+    case T_LONG:    obj->long_field_put(offset, *(jlong*)addr); break;\n+    case T_DOUBLE:  obj->double_field_put(offset, *(jdouble*)addr); break;\n+    default: fatal(\"unsupported: %s\", type2name(elem_bt));\n+  }\n+}\n+\n+static void reassign_vectorized_multi_fields(frame* fr, RegisterMap* reg_map, Location location, oop obj, int offset, BasicType elem_bt, int fields_count) {\n+  int elem_size = type2aelembytes(elem_bt);\n+  if (location.is_register()) {\n+    \/\/ Value was in a callee-saved register.\n+    VMReg vreg = VMRegImpl::as_VMReg(location.register_number());\n+\n+    for (int i = 0; i < fields_count; i++) {\n+      int vslot = (i * elem_size) \/ VMRegImpl::stack_slot_size;\n+      int off   = (i * elem_size) % VMRegImpl::stack_slot_size;\n+      address elem_addr = reg_map->location(vreg, vslot) + off; \/\/ assumes little endian element order\n+      int second_offset = offset + i * elem_size;\n+      init_multi_field(obj, second_offset, elem_bt, elem_addr);\n+    }\n+  } else {\n+    \/\/ Value was directly saved on the stack.\n+    address base_addr = ((address)fr->unextended_sp()) + location.stack_offset();\n+    for (int i = 0; i < fields_count; i++) {\n+      int second_offset = offset + i * elem_size;\n+      init_multi_field(obj, second_offset, elem_bt, base_addr + i * elem_size);\n+    }\n+  }\n+}\n+\n@@ -1526,1 +1563,1 @@\n-      if (!fs.access_flags().is_static() && (!skip_internal || !fs.field_flags().is_injected())) {\n+      if (!fs.access_flags().is_static() && !fs.is_multifield() && (!skip_internal || !fs.field_flags().is_injected())) {\n@@ -1530,0 +1567,1 @@\n+        field._secondary_fields_count = fs.is_multifield_base() ? fs.field_descriptor().secondary_fields_count(fs.index()) : 1;\n@@ -1557,19 +1595,35 @@\n-    intptr_t val;\n-    ScopeValue* scope_field = sv->field_at(svIndex);\n-    StackValue* value = StackValue::create_stack_value(fr, reg_map, scope_field);\n-    switch (type) {\n-      case T_OBJECT:\n-      case T_ARRAY:\n-        assert(value->type() == T_OBJECT, \"Agreement.\");\n-        obj->obj_field_put(offset, value->get_obj()());\n-        break;\n-\n-      \/\/ Have to cast to INT (32 bits) pointer to avoid little\/big-endian problem.\n-      case T_INT: case T_FLOAT: { \/\/ 4 bytes.\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        bool big_value = false;\n-        if (i+1 < fields->length() && fields->at(i+1)._type == T_INT) {\n-          if (scope_field->is_location()) {\n-            Location::Type type = ((LocationValue*) scope_field)->location().type();\n-            if (type == Location::dbl || type == Location::lng) {\n-              big_value = true;\n+\n+    int secondary_fields_count = fields->at(i)._secondary_fields_count;\n+    if (sv->field_at(svIndex)->is_location()) {\n+      Location location = sv->field_at(svIndex)->as_LocationValue()->location();\n+      if (location.type() == Location::vector) {\n+        \/\/ Re-assign vectorized multi-fields\n+        reassign_vectorized_multi_fields(fr, reg_map, location, obj, offset, type, secondary_fields_count);\n+        svIndex++;\n+        continue;\n+      }\n+    }\n+\n+    assert(secondary_fields_count <= sv->field_size(), \"\");\n+    for (int j = 0; j < secondary_fields_count; j++) {\n+      intptr_t val;\n+      ScopeValue* scope_field = sv->field_at(svIndex);\n+      StackValue* value = StackValue::create_stack_value(fr, reg_map, scope_field);\n+      int sec_offset = offset + j * type2aelembytes(type);\n+      switch (type) {\n+        case T_OBJECT:\n+        case T_ARRAY:\n+          assert(value->type() == T_OBJECT, \"Agreement.\");\n+          obj->obj_field_put(sec_offset, value->get_obj()());\n+          break;\n+\n+        \/\/ Have to cast to INT (32 bits) pointer to avoid little\/big-endian problem.\n+        case T_INT: case T_FLOAT: { \/\/ 4 bytes.\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          bool big_value = false;\n+          if (i+1 < fields->length() && fields->at(i+1)._type == T_INT) {\n+            if (scope_field->is_location()) {\n+              Location::Type type = ((LocationValue*) scope_field)->location().type();\n+              if (type == Location::dbl || type == Location::lng) {\n+                big_value = true;\n+              }\n@@ -1577,5 +1631,5 @@\n-          }\n-          if (scope_field->is_constant_int()) {\n-            ScopeValue* next_scope_field = sv->field_at(svIndex + 1);\n-            if (next_scope_field->is_constant_long() || next_scope_field->is_constant_double()) {\n-              big_value = true;\n+            if (scope_field->is_constant_int()) {\n+              ScopeValue* next_scope_field = sv->field_at(svIndex + 1);\n+              if (next_scope_field->is_constant_long() || next_scope_field->is_constant_double()) {\n+                big_value = true;\n+              }\n@@ -1584,0 +1638,10 @@\n+\n+          if (big_value) {\n+            i++;\n+            assert(i < fields->length(), \"second T_INT field needed\");\n+            assert(fields->at(i)._type == T_INT, \"T_INT field needed\");\n+          } else {\n+            val = value->get_int();\n+            obj->int_field_put(sec_offset, (jint)*((jint*)&val));\n+            break;\n+          }\n@@ -1585,0 +1649,1 @@\n+          \/* no break *\/\n@@ -1586,7 +1651,9 @@\n-        if (big_value) {\n-          i++;\n-          assert(i < fields->length(), \"second T_INT field needed\");\n-          assert(fields->at(i)._type == T_INT, \"T_INT field needed\");\n-        } else {\n-          val = value->get_int();\n-          obj->int_field_put(offset, (jint)*((jint*)&val));\n+        case T_LONG: case T_DOUBLE: {\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          StackValue* low = StackValue::create_stack_value(fr, reg_map, sv->field_at(++svIndex));\n+  #ifdef _LP64\n+          jlong res = (jlong)low->get_int();\n+  #else\n+          jlong res = jlong_from((jint)value->get_int(), (jint)low->get_int());\n+  #endif\n+          obj->long_field_put(sec_offset, res);\n@@ -1595,19 +1662,5 @@\n-      }\n-        \/* no break *\/\n-\n-      case T_LONG: case T_DOUBLE: {\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        StackValue* low = StackValue::create_stack_value(fr, reg_map, sv->field_at(++svIndex));\n-#ifdef _LP64\n-        jlong res = (jlong)low->get_int();\n-#else\n-        jlong res = jlong_from((jint)value->get_int(), (jint)low->get_int());\n-#endif\n-        obj->long_field_put(offset, res);\n-        break;\n-      }\n-      case T_SHORT:\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        val = value->get_int();\n-        obj->short_field_put(offset, (jshort)*((jint*)&val));\n-        break;\n+        case T_SHORT:\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          val = value->get_int();\n+          obj->short_field_put(sec_offset, (jshort)*((jint*)&val));\n+          break;\n@@ -1616,5 +1669,5 @@\n-      case T_CHAR:\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        val = value->get_int();\n-        obj->char_field_put(offset, (jchar)*((jint*)&val));\n-        break;\n+        case T_CHAR:\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          val = value->get_int();\n+          obj->char_field_put(sec_offset, (jchar)*((jint*)&val));\n+          break;\n@@ -1622,5 +1675,5 @@\n-      case T_BYTE:\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        val = value->get_int();\n-        obj->byte_field_put(offset, (jbyte)*((jint*)&val));\n-        break;\n+        case T_BYTE:\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          val = value->get_int();\n+          obj->byte_field_put(sec_offset, (jbyte)*((jint*)&val));\n+          break;\n@@ -1628,5 +1681,5 @@\n-      case T_BOOLEAN:\n-        assert(value->type() == T_INT, \"Agreement.\");\n-        val = value->get_int();\n-        obj->bool_field_put(offset, (jboolean)*((jint*)&val));\n-        break;\n+        case T_BOOLEAN:\n+          assert(value->type() == T_INT, \"Agreement.\");\n+          val = value->get_int();\n+          obj->bool_field_put(sec_offset, (jboolean)*((jint*)&val));\n+          break;\n@@ -1634,2 +1687,4 @@\n-      default:\n-        ShouldNotReachHere();\n+        default:\n+          ShouldNotReachHere();\n+      }\n+      svIndex++;\n@@ -1637,1 +1692,0 @@\n-    svIndex++;\n@@ -1680,21 +1734,1 @@\n-#ifdef COMPILER2\n-    if (EnableVectorSupport && VectorSupport::is_vector(k)) {\n-      assert(sv->field_size() == 1, \"%s not a vector\", k->name()->as_C_string());\n-      ScopeValue* payload = sv->field_at(0);\n-      if (payload->is_location() &&\n-          payload->as_LocationValue()->location().type() == Location::vector) {\n-#ifndef PRODUCT\n-        if (PrintDeoptimizationDetails) {\n-          tty->print_cr(\"skip field reassignment for this vector - it should be assigned already\");\n-          if (Verbose) {\n-            Handle obj = sv->value();\n-            k->oop_print_on(obj(), tty);\n-          }\n-        }\n-#endif \/\/ !PRODUCT\n-        continue; \/\/ Such vector's value was already restored in VectorSupport::allocate_vector().\n-      }\n-      \/\/ Else fall-through to do assignment for scalar-replaced boxed vector representation\n-      \/\/ which could be restored after vector object allocation.\n-    }\n-#endif \/* !COMPILER2 *\/\n+\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":133,"deletions":99,"binary":false,"changes":232,"status":"modified"},{"patch":"@@ -101,1 +101,2 @@\n-  guarantee(_fieldinfo.name_index() != 0 && _fieldinfo.signature_index() != 0, \"bad constant pool index for fieldDescriptor\");\n+  \/\/ assert to be extended to allow multifield names\n+  guarantee(\/*_fieldinfo.name_index() != 0 &&*\/ _fieldinfo.signature_index() != 0, \"bad constant pool index for fieldDescriptor\");\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -91,0 +91,5 @@\n+  inline bool is_multifield()            const;\n+  inline bool is_multifield_base()       const;\n+  inline u2   multifield_base()          const;\n+  inline jbyte multifield_index()        const;\n+  inline int secondary_fields_count(int base_idx) const;\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  return field().name(_cp());\n+  return field().name(field_holder()->multifield_info(),  _cp());\n@@ -72,0 +72,23 @@\n+inline bool fieldDescriptor::is_multifield() const { return field().is_multifield(); }\n+inline bool fieldDescriptor::is_multifield_base() const { return field().is_multifield_base(); }\n+inline u2   fieldDescriptor::multifield_base() const {\n+  return is_multifield() ? field_holder()->multifield_info(field().secondary_index()).base_index() : index();\n+}\n+inline jbyte fieldDescriptor::multifield_index() const {\n+ return  is_multifield() ? field_holder()->multifield_info(field().secondary_index()).multifield_index() : (jbyte)0;\n+}\n+\n+inline int fieldDescriptor::secondary_fields_count(int base_idx) const {\n+  Array<MultiFieldInfo>* multifield_info = field_holder()->multifield_info();\n+  if (!is_multifield_base() || nullptr == multifield_info) {\n+    return 1;\n+  }\n+  int sec_fields_count = 1;\n+  for (int i = 0; i < multifield_info->length(); i++) {\n+    if (field_holder()->multifield_info(i).base_index() == base_idx) {\n+      sec_fields_count++;\n+    }\n+  }\n+  return  sec_fields_count;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.inline.hpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}