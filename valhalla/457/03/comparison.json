{"files":[{"patch":"@@ -1,860 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.valhalla.inlinetypes;\n-\n-import compiler.whitebox.CompilerWhiteBoxTest;\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.management.InputArguments;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.Utils;\n-import sun.hotspot.WhiteBox;\n-\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Repeatable;\n-import java.lang.invoke.*;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Hashtable;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Stream;\n-import java.util.TreeMap;\n-import java.util.function.BooleanSupplier;\n-\n-\/\/ Mark method as test\n-@Retention(RetentionPolicy.RUNTIME)\n-@Repeatable(Tests.class)\n-@interface Test {\n-    \/\/ Regular expression used to match forbidden IR nodes\n-    \/\/ in the C2 IR emitted for this test.\n-    String failOn() default \"\";\n-    \/\/ Regular expressions used to match and count IR nodes.\n-    String[] match() default { };\n-    int[] matchCount() default { };\n-    int compLevel() default InlineTypeTest.COMP_LEVEL_ANY;\n-    int valid() default 0;\n-}\n-\n-@Retention(RetentionPolicy.RUNTIME)\n-@interface Tests {\n-    Test[] value();\n-}\n-\n-\/\/ Force method inlining during compilation\n-@Retention(RetentionPolicy.RUNTIME)\n-@interface ForceInline { }\n-\n-\/\/ Prevent method inlining during compilation\n-@Retention(RetentionPolicy.RUNTIME)\n-@interface DontInline { }\n-\n-\/\/ Prevent method compilation\n-@Retention(RetentionPolicy.RUNTIME)\n-@interface DontCompile { }\n-\n-\/\/ Force method compilation\n-@Retention(RetentionPolicy.RUNTIME)\n-@interface ForceCompile {\n-    int compLevel() default InlineTypeTest.COMP_LEVEL_ANY;\n-}\n-\n-\/\/ Number of warmup iterations\n-@Retention(RetentionPolicy.RUNTIME)\n-@interface Warmup {\n-    int value();\n-}\n-\n-\/\/ Do not enqueue the test method for compilation immediately after warmup loops have finished. Instead\n-\/\/ let the test method be compiled with on-stack-replacement.\n-@Retention(RetentionPolicy.RUNTIME)\n-@interface OSRCompileOnly {}\n-\n-\/\/ Skip this test temporarily for C1 testing\n-@Retention(RetentionPolicy.RUNTIME)\n-@interface TempSkipForC1 {\n-    String reason() default \"\";\n-}\n-\n-public abstract class InlineTypeTest {\n-    protected static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n-\n-    protected static final int COMP_LEVEL_ANY               = -1;\n-    protected static final int COMP_LEVEL_SIMPLE            =  1;     \/\/ C1\n-    protected static final int COMP_LEVEL_LIMITED_PROFILE   =  2;     \/\/ C1, invocation & backedge counters\n-    protected static final int COMP_LEVEL_FULL_PROFILE      =  3;     \/\/ C1, invocation & backedge counters + mdo\n-    protected static final int COMP_LEVEL_FULL_OPTIMIZATION =  4;     \/\/ C2 or JVMCI\n-\n-    protected static final boolean TieredCompilation = (Boolean)WHITE_BOX.getVMFlag(\"TieredCompilation\");\n-    protected static final long TieredStopAtLevel = (Long)WHITE_BOX.getVMFlag(\"TieredStopAtLevel\");\n-    static final boolean TEST_C1 = TieredCompilation && TieredStopAtLevel < COMP_LEVEL_FULL_OPTIMIZATION;\n-\n-    \/\/ Random test values\n-    public static final int  rI = Utils.getRandomInstance().nextInt() % 1000;\n-    public static final long rL = Utils.getRandomInstance().nextLong() % 1000;\n-    public static final double rD = Utils.getRandomInstance().nextDouble() % 1000;\n-\n-    \/\/ User defined settings\n-    protected static final boolean XCOMP = Platform.isComp();\n-    private static final boolean PRINT_GRAPH = true;\n-    private static final boolean VERBOSE = Boolean.parseBoolean(System.getProperty(\"Verbose\", \"false\"));\n-    private static final boolean PRINT_TIMES = Boolean.parseBoolean(System.getProperty(\"PrintTimes\", \"false\"));\n-    private static final boolean COMPILE_COMMANDS = Boolean.parseBoolean(System.getProperty(\"CompileCommands\", \"true\")) && !XCOMP;\n-    private static       boolean VERIFY_IR = Boolean.parseBoolean(System.getProperty(\"VerifyIR\", \"true\")) && !XCOMP && !TEST_C1 && COMPILE_COMMANDS;\n-    private static final String SCENARIOS = System.getProperty(\"Scenarios\", \"\");\n-    private static final String TESTLIST = System.getProperty(\"Testlist\", \"\");\n-    private static final String EXCLUDELIST = System.getProperty(\"Exclude\", \"\");\n-    private static final int WARMUP = Integer.parseInt(System.getProperty(\"Warmup\", \"251\"));\n-    private static final boolean DUMP_REPLAY = Boolean.parseBoolean(System.getProperty(\"DumpReplay\", \"false\"));\n-    private static final boolean FLIP_C1_C2 = Boolean.parseBoolean(System.getProperty(\"FlipC1C2\", \"false\"));\n-    private static final boolean GC_AFTER = Boolean.parseBoolean(System.getProperty(\"GCAfter\", \"false\"));\n-    private static final int OSR_TEST_TIMEOUT = Integer.parseInt(System.getProperty(\"OSRTestTimeOut\", \"5000\"));\n-    protected static final boolean STRESS_CC = Boolean.parseBoolean(System.getProperty(\"StressCC\", \"false\"));\n-    private static final boolean SHUFFLE_TESTS = Boolean.parseBoolean(System.getProperty(\"ShuffleTests\", \"true\"));\n-    private static final boolean PREFER_CL_FLAGS = Boolean.parseBoolean(System.getProperty(\"PreferCommandLineFlags\", \"false\"));\n-\n-    \/\/ Pre-defined settings\n-    private static final String[] defaultFlags = {\n-        \"-XX:-BackgroundCompilation\"};\n-    private static final String[] compileCommandFlags = {\n-        \"-XX:CompileCommand=quiet\",\n-        \"-XX:CompileCommand=compileonly,java.lang.invoke.*::*\",\n-        \"-XX:CompileCommand=compileonly,java.lang.Long::sum\",\n-        \"-XX:CompileCommand=compileonly,java.lang.Object::<init>\",\n-        \"-XX:CompileCommand=inline,compiler.valhalla.inlinetypes.MyValue*::<init>\",\n-        \"-XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.*::*\"};\n-    private static final String[] printFlags = {\n-        \"-XX:+PrintCompilation\", \"-XX:+PrintIdeal\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintOptoAssembly\"};\n-\n-    protected static final int InlineTypePassFieldsAsArgsOn = 0x1;\n-    protected static final int InlineTypePassFieldsAsArgsOff = 0x2;\n-    protected static final int InlineTypeArrayFlattenOn = 0x4;\n-    protected static final int InlineTypeArrayFlattenOff = 0x8;\n-    protected static final int InlineTypeReturnedAsFieldsOn = 0x10;\n-    protected static final int InlineTypeReturnedAsFieldsOff = 0x20;\n-    protected static final int AlwaysIncrementalInlineOn = 0x40;\n-    protected static final int AlwaysIncrementalInlineOff = 0x80;\n-    protected static final int G1GCOn = 0x100;\n-    protected static final int G1GCOff = 0x200;\n-    protected static final int ZGCOn = 0x400;\n-    protected static final int ZGCOff = 0x800;\n-    protected static final int ArrayLoadStoreProfileOn = 0x1000;\n-    protected static final int ArrayLoadStoreProfileOff = 0x2000;\n-    protected static final int TypeProfileOn = 0x4000;\n-    protected static final int TypeProfileOff = 0x8000;\n-    protected static final int ACmpProfileOn = 0x10000;\n-    protected static final int ACmpProfileOff = 0x20000;\n-    protected static final boolean InlineTypePassFieldsAsArgs = (Boolean)WHITE_BOX.getVMFlag(\"InlineTypePassFieldsAsArgs\");\n-    protected static final boolean InlineTypeArrayFlatten = (WHITE_BOX.getIntxVMFlag(\"FlatArrayElementMaxSize\") == -1);\n-    protected static final boolean InlineTypeReturnedAsFields = (Boolean)WHITE_BOX.getVMFlag(\"InlineTypeReturnedAsFields\");\n-    protected static final boolean AlwaysIncrementalInline = (Boolean)WHITE_BOX.getVMFlag(\"AlwaysIncrementalInline\");\n-    protected static final boolean G1GC = (Boolean)WHITE_BOX.getVMFlag(\"UseG1GC\");\n-    protected static final boolean ZGC = (Boolean)WHITE_BOX.getVMFlag(\"UseZGC\");\n-    protected static final boolean VerifyOops = (Boolean)WHITE_BOX.getVMFlag(\"VerifyOops\");\n-    protected static final boolean UseArrayLoadStoreProfile = (Boolean)WHITE_BOX.getVMFlag(\"UseArrayLoadStoreProfile\");\n-    protected static final long TypeProfileLevel = (Long)WHITE_BOX.getVMFlag(\"TypeProfileLevel\");\n-    protected static final boolean UseACmpProfile = (Boolean)WHITE_BOX.getVMFlag(\"UseACmpProfile\");\n-    protected static final long PerMethodTrapLimit = (Long)WHITE_BOX.getVMFlag(\"PerMethodTrapLimit\");\n-    protected static final boolean ProfileInterpreter = (Boolean)WHITE_BOX.getVMFlag(\"ProfileInterpreter\");\n-\n-    protected static final Hashtable<String, Method> tests = new Hashtable<String, Method>();\n-    protected static final boolean USE_COMPILER = WHITE_BOX.getBooleanVMFlag(\"UseCompiler\");\n-    protected static final boolean PRINT_IDEAL  = WHITE_BOX.getBooleanVMFlag(\"PrintIdeal\");\n-\n-    \/\/ Regular expressions used to match nodes in the PrintIdeal output\n-    protected static final String START = \"(\\\\d+ (.*\";\n-    protected static final String MID = \".*)+ ===.*\";\n-    protected static final String END = \")|\";\n-    \/\/ Generic allocation\n-    protected static final String ALLOC_G  = \"(.*call,static  wrapper for: _new_instance_Java\" + END;\n-    protected static final String ALLOCA_G = \"(.*call,static  wrapper for: _new_array_Java\" + END;\n-    \/\/ Inline type allocation\n-    protected static final String ALLOC  = \"(.*precise klass compiler\/valhalla\/inlinetypes\/MyValue.*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*_new_instance_Java\" + END;\n-    protected static final String ALLOCA = \"(.*precise klass \\\\[(L|Q)compiler\/valhalla\/inlinetypes\/MyValue.*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*_new_array_Java\" + END;\n-    protected static final String LOAD   = START + \"Load(B|S|I|L|F|D|P|N)\" + MID + \"@compiler\/valhalla\/inlinetypes\/MyValue.*\" + END;\n-    protected static final String LOADK  = START + \"LoadK\" + MID + END;\n-    protected static final String STORE  = START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + \"@compiler\/valhalla\/inlinetypes\/MyValue.*\" + END;\n-    protected static final String LOOP   = START + \"Loop\" + MID + \"\" + END;\n-    protected static final String COUNTEDLOOP = START + \"CountedLoop\\\\b\" + MID + \"\" + END;\n-    protected static final String COUNTEDLOOP_MAIN = START + \"CountedLoop\\\\b\" + MID + \"main\" + END;\n-    protected static final String TRAP   = START + \"CallStaticJava\" + MID + \"uncommon_trap.*(unstable_if|predicate)\" + END;\n-    protected static final String LINKTOSTATIC = START + \"CallStaticJava\" + MID + \"linkToStatic\" + END;\n-    protected static final String NPE = START + \"CallStaticJava\" + MID + \"null_check\" + END;\n-    protected static final String CALL = START + \"CallStaticJava\" + MID + END;\n-    protected static final String STORE_INLINE_FIELDS = START + \"CallStaticJava\" + MID + \"store_inline_type_fields\" + END;\n-    protected static final String SCOBJ = \"(.*# ScObj.*\" + END;\n-    protected static final String LOAD_UNKNOWN_INLINE = \"(.*call_leaf,runtime  load_unknown_inline.*\" + END;\n-    protected static final String STORE_UNKNOWN_INLINE = \"(.*call_leaf,runtime  store_unknown_inline.*\" + END;\n-    protected static final String INLINE_ARRAY_NULL_GUARD = \"(.*call,static  wrapper for: uncommon_trap.*reason='null_check' action='none'.*\" + END;\n-    protected static final String INTRINSIC_SLOW_PATH = \"(.*call,static  wrapper for: uncommon_trap.*reason='intrinsic_or_type_checked_inlining'.*\" + END;\n-    protected static final String CLONE_INTRINSIC_SLOW_PATH = \"(.*call,static.*java.lang.Object::clone.*\" + END;\n-    protected static final String CLASS_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*class_check\" + END;\n-    protected static final String NULL_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*null_check\" + END;\n-    protected static final String NULL_ASSERT_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*null_assert\" + END;\n-    protected static final String RANGE_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*range_check\" + END;\n-    protected static final String UNHANDLED_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*unhandled\" + END;\n-    protected static final String PREDICATE_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*predicate\" + END;\n-    protected static final String MEMBAR = START + \"MemBar\" + MID + END;\n-    protected static final String CHECKCAST_ARRAY = \"(cmp.*precise klass \\\\[(L|Q)compiler\/valhalla\/inlinetypes\/MyValue.*\" + END;\n-    protected static final String CHECKCAST_ARRAYCOPY = \"(.*call_leaf_nofp,runtime  checkcast_arraycopy.*\" + END;\n-    protected static final String JLONG_ARRAYCOPY = \"(.*call_leaf_nofp,runtime  jlong_disjoint_arraycopy.*\" + END;\n-    protected static final String FIELD_ACCESS = \"(.*Field: *\" + END;\n-    protected static final String SUBSTITUTABILITY_TEST = START + \"CallStaticJava\" + MID + \"java.lang.invoke.ValueBootstrapMethods::isSubstitutable\" + END;\n-\n-    public static String[] concat(String prefix[], String... extra) {\n-        ArrayList<String> list = new ArrayList<String>();\n-        if (prefix != null) {\n-            for (String s : prefix) {\n-                list.add(s);\n-            }\n-        }\n-        if (extra != null) {\n-            for (String s : extra) {\n-                list.add(s);\n-            }\n-        }\n-\n-        return list.toArray(new String[list.size()]);\n-    }\n-\n-    \/**\n-     * Override getNumScenarios and getVMParameters if you want to run with more than\n-     * the 6 built-in scenarios\n-     *\/\n-    public int getNumScenarios() {\n-        return 6;\n-    }\n-\n-    \/**\n-     * VM parameters for the 5 built-in test scenarios. If your test needs to append\n-     * extra parameters for (some of) these scenarios, override getExtraVMParameters().\n-     *\/\n-    public String[] getVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 0: return new String[] {\n-                \"-XX:-UseACmpProfile\",\n-                \"-XX:+AlwaysIncrementalInline\",\n-                \"-XX:FlatArrayElementMaxOops=5\",\n-                \"-XX:FlatArrayElementMaxSize=-1\",\n-                \"-XX:-UseArrayLoadStoreProfile\",\n-                \"-XX:InlineFieldMaxFlatSize=-1\",\n-                \"-XX:+InlineTypePassFieldsAsArgs\",\n-                \"-XX:+InlineTypeReturnedAsFields\"};\n-        case 1: return new String[] {\n-                \"-XX:-UseACmpProfile\",\n-                \"-XX:-UseCompressedOops\",\n-                \"-XX:FlatArrayElementMaxOops=5\",\n-                \"-XX:FlatArrayElementMaxSize=-1\",\n-                \"-XX:-UseArrayLoadStoreProfile\",\n-                \"-XX:InlineFieldMaxFlatSize=-1\",\n-                \"-XX:-InlineTypePassFieldsAsArgs\",\n-                \"-XX:-InlineTypeReturnedAsFields\"};\n-        case 2: return new String[] {\n-                \"-XX:-UseACmpProfile\",\n-                \"-XX:-UseCompressedOops\",\n-                \"-XX:FlatArrayElementMaxOops=0\",\n-                \"-XX:FlatArrayElementMaxSize=0\",\n-                \"-XX:-UseArrayLoadStoreProfile\",\n-                \"-XX:InlineFieldMaxFlatSize=-1\",\n-                \"-XX:+InlineTypePassFieldsAsArgs\",\n-                \"-XX:+InlineTypeReturnedAsFields\",\n-                \"-XX:+StressInlineTypeReturnedAsFields\"};\n-        case 3: return new String[] {\n-                \"-DVerifyIR=false\",\n-                \"-XX:+AlwaysIncrementalInline\",\n-                \"-XX:FlatArrayElementMaxOops=0\",\n-                \"-XX:FlatArrayElementMaxSize=0\",\n-                \"-XX:InlineFieldMaxFlatSize=0\",\n-                \"-XX:+InlineTypePassFieldsAsArgs\",\n-                \"-XX:+InlineTypeReturnedAsFields\"};\n-        case 4: return new String[] {\n-                \"-DVerifyIR=false\",\n-                \"-XX:FlatArrayElementMaxOops=-1\",\n-                \"-XX:FlatArrayElementMaxSize=-1\",\n-                \"-XX:InlineFieldMaxFlatSize=0\",\n-                \"-XX:+InlineTypePassFieldsAsArgs\",\n-                \"-XX:-InlineTypeReturnedAsFields\",\n-                \"-XX:-ReduceInitialCardMarks\"};\n-        case 5: return new String[] {\n-                \"-XX:-UseACmpProfile\",\n-                \"-XX:+AlwaysIncrementalInline\",\n-                \"-XX:FlatArrayElementMaxOops=5\",\n-                \"-XX:FlatArrayElementMaxSize=-1\",\n-                \"-XX:-UseArrayLoadStoreProfile\",\n-                \"-XX:InlineFieldMaxFlatSize=-1\",\n-                \"-XX:-InlineTypePassFieldsAsArgs\",\n-                \"-XX:-InlineTypeReturnedAsFields\"};\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * Override this method and return a non-null reason if the given scenario should be\n-     * ignored (due to an existing bug, etc).\n-     *\/\n-    String isScenarioIgnored(int scenario) {\n-        return null;\n-    }\n-\n-    \/**\n-     * Override this method to provide extra parameters for selected scenarios\n-     *\/\n-    public String[] getExtraVMParameters(int scenario) {\n-        return null;\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        if (args.length != 1) {\n-            throw new RuntimeException(\"Usage: @run main\/othervm\/timeout=120 -Xbootclasspath\/a:.\" +\n-                                       \" -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\" +\n-                                       \" -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\" +\n-                                       \" compiler.valhalla.inlinetypes.InlineTypeTest <YourTestMainClass>\");\n-        }\n-        String testMainClassName = args[0];\n-        Class testMainClass = Class.forName(testMainClassName);\n-        InlineTypeTest test = (InlineTypeTest)testMainClass.newInstance();\n-        List<String> scenarios = null;\n-        if (!SCENARIOS.isEmpty()) {\n-           scenarios = Arrays.asList(SCENARIOS.split(\",\"));\n-        }\n-        for (int i=0; i<test.getNumScenarios(); i++) {\n-            String reason;\n-            if ((reason = test.isScenarioIgnored(i)) != null) {\n-                System.out.println(\"Scenario #\" + i + \" is ignored: \" + reason);\n-            } else if (scenarios != null && !scenarios.contains(Integer.toString(i))) {\n-                System.out.println(\"Scenario #\" + i + \" is skipped due to -Dscenarios=\" + SCENARIOS);\n-            } else {\n-                System.out.println(\"Scenario #\" + i + \" -------- \");\n-                String[] cmds = new String[0];\n-                if (!PREFER_CL_FLAGS) {\n-                    cmds = InputArguments.getVmInputArgs();\n-                }\n-                cmds = concat(cmds, test.getVMParameters(i));\n-                cmds = concat(cmds, test.getExtraVMParameters(i));\n-                if (PREFER_CL_FLAGS) {\n-                    \/\/ Prefer flags set via the command line over the ones set by the test scenarios\n-                    cmds = concat(cmds, InputArguments.getVmInputArgs());\n-                }\n-                cmds = concat(cmds, testMainClassName);\n-\n-                OutputAnalyzer oa = ProcessTools.executeTestJvm(cmds);\n-                String output = oa.getOutput();\n-                oa.shouldHaveExitValue(0);\n-                System.out.println(output);\n-            }\n-        }\n-    }\n-\n-    \/\/ To exclude test cases, use -DExclude=<case1>,<case2>,...\n-    \/\/ Each case can be just the method name, or can be <class>.<method>. The latter form is useful\n-    \/\/ when you are running several tests at the same time.\n-    \/\/\n-    \/\/ jtreg -DExclude=test12 TestArrays.java\n-    \/\/ jtreg -DExclude=test34 TestLWorld.java\n-    \/\/ -- or --\n-    \/\/ jtreg -DExclude=TestArrays.test12,TestLWorld.test34 TestArrays.java TestLWorld.java\n-    \/\/\n-    private List<String> buildExcludeList() {\n-        List<String> exclude = null;\n-        String classPrefix = getClass().getSimpleName() + \".\";\n-        if (!EXCLUDELIST.isEmpty()) {\n-            exclude = new ArrayList(Arrays.asList(EXCLUDELIST.split(\",\")));\n-            for (int i = exclude.size() - 1; i >= 0; i--) {\n-                String ex = exclude.get(i);\n-                if (ex.indexOf(\".\") > 0) {\n-                    if (ex.startsWith(classPrefix)) {\n-                        ex = ex.substring(classPrefix.length());\n-                        exclude.set(i, ex);\n-                    } else {\n-                        exclude.remove(i);\n-                    }\n-                }\n-            }\n-        }\n-        return exclude;\n-    }\n-\n-    protected InlineTypeTest() {\n-        List<String> list = null;\n-        if (!TESTLIST.isEmpty()) {\n-           list = Arrays.asList(TESTLIST.split(\",\"));\n-        }\n-        List<String> exclude = buildExcludeList();\n-\n-        \/\/ Gather all test methods and put them in Hashtable\n-        for (Method m : getClass().getDeclaredMethods()) {\n-            Test[] annos = m.getAnnotationsByType(Test.class);\n-            if (annos.length != 0 &&\n-                ((list == null || list.contains(m.getName())) && (exclude == null || !exclude.contains(m.getName())))) {\n-                tests.put(getClass().getSimpleName() + \"::\" + m.getName(), m);\n-            } else if (annos.length == 0 && m.getName().startsWith(\"test\")) {\n-                try {\n-                    getClass().getMethod(m.getName() + \"_verifier\", boolean.class);\n-                    throw new RuntimeException(m.getName() + \" has a verifier method but no @Test annotation\");\n-                } catch (NoSuchMethodException e) {\n-                    \/\/ Expected\n-                }\n-            }\n-        }\n-    }\n-\n-    protected void run(String[] args, Class<?>... classes) throws Throwable {\n-        if (args.length == 0) {\n-            \/\/ Spawn a new VM instance\n-            execute_vm();\n-        } else {\n-            \/\/ Execute tests in the VM spawned by the above code.\n-            Asserts.assertTrue(args.length == 1 && args[0].equals(\"run\"), \"must be\");\n-            run(classes);\n-        }\n-    }\n-\n-    private void execute_vm() throws Throwable {\n-        Asserts.assertFalse(tests.isEmpty(), \"no tests to execute\");\n-        String[] vmInputArgs = InputArguments.getVmInputArgs();\n-        for (String arg : vmInputArgs) {\n-            if (arg.startsWith(\"-XX:CompileThreshold\")) {\n-                \/\/ Disable IR verification if non-default CompileThreshold is set\n-                VERIFY_IR = false;\n-            }\n-        }\n-        \/\/ Each VM is launched with flags in this order, so the later ones can override the earlier one:\n-        \/\/     VERIFY_IR flags specified below\n-        \/\/     vmInputArgs, which consists of:\n-        \/\/        @run options\n-        \/\/        getVMParameters()\n-        \/\/        getExtraVMParameters()\n-        \/\/     defaultFlags\n-        \/\/     compileCommandFlags\n-        String cmds[] = null;\n-        if (VERIFY_IR) {\n-            \/\/ Add print flags for IR verification\n-            cmds = concat(cmds, printFlags);\n-            \/\/ Always trap for exception throwing to not confuse IR verification\n-            cmds = concat(cmds, \"-XX:-OmitStackTraceInFastThrow\");\n-        }\n-        cmds = concat(cmds, vmInputArgs);\n-        cmds = concat(cmds, defaultFlags);\n-        if (COMPILE_COMMANDS) {\n-          cmds = concat(cmds, compileCommandFlags);\n-        }\n-\n-        \/\/ Run tests in own process and verify output\n-        cmds = concat(cmds, getClass().getName(), \"run\");\n-        OutputAnalyzer oa = ProcessTools.executeTestJvm(cmds);\n-        \/\/ If ideal graph printing is enabled\/supported, verify output\n-        String output = oa.getOutput();\n-        oa.shouldHaveExitValue(0);\n-        if (VERIFY_IR) {\n-            if (output.contains(\"PrintIdeal enabled\")) {\n-                parseOutput(output);\n-            } else {\n-                System.out.println(output);\n-                System.out.println(\"WARNING: IR verification failed! Running with -Xint, -Xcomp or release build?\");\n-            }\n-        }\n-    }\n-\n-    static final class TestAnnotation {\n-        private final int flag;\n-        private final BooleanSupplier predicate;\n-\n-        private static final TestAnnotation testAnnotations[] = {\n-            new TestAnnotation(InlineTypePassFieldsAsArgsOn, () -> InlineTypePassFieldsAsArgs),\n-            new TestAnnotation(InlineTypePassFieldsAsArgsOff, () -> !InlineTypePassFieldsAsArgs),\n-            new TestAnnotation(InlineTypeArrayFlattenOn, () -> InlineTypeArrayFlatten),\n-            new TestAnnotation(InlineTypeArrayFlattenOff, () -> !InlineTypeArrayFlatten),\n-            new TestAnnotation(InlineTypeReturnedAsFieldsOn, () -> InlineTypeReturnedAsFields),\n-            new TestAnnotation(InlineTypeReturnedAsFieldsOff, () -> !InlineTypeReturnedAsFields),\n-            new TestAnnotation(AlwaysIncrementalInlineOn, () -> AlwaysIncrementalInline),\n-            new TestAnnotation(AlwaysIncrementalInlineOff, () -> !AlwaysIncrementalInline),\n-            new TestAnnotation(G1GCOn, () -> G1GC),\n-            new TestAnnotation(G1GCOff, () -> !G1GC),\n-            new TestAnnotation(ZGCOn, () -> ZGC),\n-            new TestAnnotation(ZGCOff, () -> !ZGC),\n-            new TestAnnotation(ArrayLoadStoreProfileOn, () -> UseArrayLoadStoreProfile),\n-            new TestAnnotation(ArrayLoadStoreProfileOff, () -> !UseArrayLoadStoreProfile),\n-            new TestAnnotation(TypeProfileOn, () -> TypeProfileLevel == 222),\n-            new TestAnnotation(TypeProfileOff, () -> TypeProfileLevel == 0),\n-            new TestAnnotation(ACmpProfileOn, () -> UseACmpProfile),\n-            new TestAnnotation(ACmpProfileOff, () -> !UseACmpProfile),\n-        };\n-\n-        private TestAnnotation(int flag, BooleanSupplier predicate) {\n-            this.flag = flag;\n-            this.predicate = predicate;\n-        }\n-\n-        private boolean match(Test a) {\n-            return (a.valid() & flag) != 0 && predicate.getAsBoolean();\n-        }\n-\n-        static boolean find(Test a) {\n-            Stream<TestAnnotation> s = Arrays.stream(testAnnotations).filter(t -> t.match(a));\n-            long c = s.count();\n-            if (c > 1) {\n-                throw new RuntimeException(\"At most one Test annotation should match\");\n-            }\n-            return c > 0;\n-        }\n-    }\n-\n-    private void parseOutput(String output) throws Exception {\n-        Pattern comp_re = Pattern.compile(\"\\\\n\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+(%| )(s| )(!| )b(n| )\\\\s+\\\\d?\\\\s+\\\\S+\\\\.(?<name>[^.]+::\\\\S+)\\\\s+(?<osr>@ \\\\d+\\\\s+)?[(]\\\\d+ bytes[)]\");\n-        Matcher m = comp_re.matcher(output);\n-        Map<String,String> compilations = new LinkedHashMap<>();\n-        int prev = 0;\n-        String methodName = null;\n-        while (m.find()) {\n-            if (prev == 0) {\n-                \/\/ Print header\n-                System.out.print(output.substring(0, m.start()+1));\n-            } else if (methodName != null) {\n-                compilations.put(methodName, output.substring(prev, m.start()+1));\n-            }\n-            if (m.group(\"osr\") != null) {\n-                methodName = null;\n-            } else {\n-                methodName = m.group(\"name\");\n-            }\n-            prev = m.end();\n-        }\n-        if (prev == 0) {\n-            \/\/ Print header\n-            System.out.print(output);\n-        } else if (methodName != null) {\n-            compilations.put(methodName, output.substring(prev));\n-        }\n-        \/\/ Iterate over compilation output\n-        for (String testName : compilations.keySet()) {\n-            Method test = tests.get(testName);\n-            if (test == null) {\n-                \/\/ Skip helper methods\n-                continue;\n-            }\n-            String graph = compilations.get(testName);\n-            System.out.println(\"\\nGraph for \" + testName + \"\\n\" + graph);\n-            \/\/ Parse graph using regular expressions to determine if it contains forbidden nodes\n-            Test[] annos = test.getAnnotationsByType(Test.class);\n-            Test anno = Arrays.stream(annos).filter(TestAnnotation::find).findFirst().orElse(null);\n-            if (anno == null) {\n-                Object[] res = Arrays.stream(annos).filter(a -> a.valid() == 0).toArray();\n-                if (res.length != 1) {\n-                    throw new RuntimeException(\"Only one Test annotation should match\");\n-                }\n-                anno = (Test)res[0];\n-            }\n-            String regexFail = anno.failOn();\n-            if (!regexFail.isEmpty()) {\n-                Pattern pattern = Pattern.compile(regexFail.substring(0, regexFail.length()-1));\n-                Matcher matcher = pattern.matcher(graph);\n-                boolean found = matcher.find();\n-                Asserts.assertFalse(found, \"Graph for '\" + testName + \"' contains forbidden node:\\n\" + (found ? matcher.group() : \"\"));\n-            }\n-            String[] regexMatch = anno.match();\n-            int[] matchCount = anno.matchCount();\n-            for (int i = 0; i < regexMatch.length; ++i) {\n-                Pattern pattern = Pattern.compile(regexMatch[i].substring(0, regexMatch[i].length()-1));\n-                Matcher matcher = pattern.matcher(graph);\n-                int count = 0;\n-                String nodes = \"\";\n-                while (matcher.find()) {\n-                    count++;\n-                    nodes += matcher.group() + \"\\n\";\n-                }\n-                if (matchCount[i] < 0) {\n-                    Asserts.assertLTE(Math.abs(matchCount[i]), count, \"Graph for '\" + testName + \"' contains different number of match nodes (expected >= \" + Math.abs(matchCount[i]) + \" but got \" + count + \"):\\n\" + nodes);\n-                } else {\n-                    Asserts.assertEQ(matchCount[i], count, \"Graph for '\" + testName + \"' contains different number of match nodes (expected \" + matchCount[i] + \" but got \" + count + \"):\\n\" + nodes);\n-                }\n-            }\n-            tests.remove(testName);\n-            System.out.println(testName + \" passed\");\n-        }\n-        \/\/ Check if all tests were compiled\n-        if (tests.size() != 0) {\n-            for (String name : tests.keySet()) {\n-                System.out.println(\"Test '\" + name + \"' not compiled!\");\n-            }\n-            throw new RuntimeException(\"Not all tests were compiled\");\n-        }\n-    }\n-\n-    private void setup(Class<?> clazz) {\n-        if (XCOMP) {\n-            \/\/ Don't control compilation if -Xcomp is enabled\n-            return;\n-        }\n-        if (DUMP_REPLAY) {\n-            \/\/ Generate replay compilation files\n-            String directive = \"[{ match: \\\"*.*\\\", DumpReplay: true }]\";\n-            if (WHITE_BOX.addCompilerDirective(directive) != 1) {\n-                throw new RuntimeException(\"Failed to add compiler directive\");\n-            }\n-        }\n-\n-        Method[] methods = clazz.getDeclaredMethods();\n-        for (Method m : methods) {\n-            if (m.isAnnotationPresent(Test.class)) {\n-                \/\/ Don't inline tests\n-                WHITE_BOX.testSetDontInlineMethod(m, true);\n-            }\n-            if (m.isAnnotationPresent(DontCompile.class)) {\n-                WHITE_BOX.makeMethodNotCompilable(m, COMP_LEVEL_ANY, true);\n-                WHITE_BOX.makeMethodNotCompilable(m, COMP_LEVEL_ANY, false);\n-                WHITE_BOX.testSetDontInlineMethod(m, true);\n-            }\n-            if (m.isAnnotationPresent(ForceInline.class)) {\n-                Asserts.assertFalse(m.isAnnotationPresent(DontInline.class), \"Method \" + m.getName() + \" has contradicting DontInline annotation\");\n-                WHITE_BOX.testSetForceInlineMethod(m, true);\n-            }\n-            if (m.isAnnotationPresent(DontInline.class)) {\n-                Asserts.assertFalse(m.isAnnotationPresent(ForceInline.class), \"Method \" + m.getName() + \" has contradicting ForceInline annotation\");\n-                WHITE_BOX.testSetDontInlineMethod(m, true);\n-            }\n-            if (STRESS_CC) {\n-                \/\/ Exclude some methods from compilation with C2 to stress test the calling convention\n-                if (Utils.getRandomInstance().nextBoolean()) {\n-                    System.out.println(\"Excluding from C2 compilation: \" + m);\n-                    WHITE_BOX.makeMethodNotCompilable(m, COMP_LEVEL_FULL_OPTIMIZATION, false);\n-                }\n-            }\n-        }\n-        \/\/ Only force compilation now because above annotations affect inlining\n-        for (Method m : methods) {\n-            if (m.isAnnotationPresent(ForceCompile.class)) {\n-                Asserts.assertFalse(m.isAnnotationPresent(DontCompile.class), \"Method \" + m.getName() + \" has contradicting DontCompile annotation\");\n-                int compLevel = getCompLevel(m.getAnnotation(ForceCompile.class));\n-                enqueueMethodForCompilation(m, compLevel);\n-            }\n-        }\n-        \/\/ Compile class initializers\n-        int compLevel = getCompLevel(null);\n-        WHITE_BOX.enqueueInitializerForCompilation(clazz, compLevel);\n-    }\n-\n-    private void run(Class<?>... classes) throws Exception {\n-        if (USE_COMPILER && PRINT_IDEAL && !XCOMP && !STRESS_CC) {\n-            System.out.println(\"PrintIdeal enabled\");\n-        }\n-        System.out.format(\"rI = %d, rL = %d\\n\", rI, rL);\n-\n-        setup(getClass());\n-        for (Class<?> clazz : classes) {\n-            setup(clazz);\n-        }\n-\n-        TreeMap<Long, String> durations = (PRINT_TIMES || VERBOSE) ? new TreeMap<Long, String>() : null;\n-        List<Method> testList = new ArrayList<Method>(tests.values());\n-        if (SHUFFLE_TESTS) {\n-            \/\/ Execute tests in random order (execution sequence affects profiling)\n-            Collections.shuffle(testList, Utils.getRandomInstance());\n-        }\n-        for (Method test : testList) {\n-            if (VERBOSE) {\n-                System.out.println(\"Starting \" + test.getName());\n-            }\n-            TempSkipForC1 c1skip = test.getAnnotation(TempSkipForC1.class);\n-            if (TEST_C1 && c1skip != null) {\n-                System.out.println(\"Skipped \" + test.getName() + \" for C1 testing: \" + c1skip.reason());\n-                continue;\n-            }\n-            long startTime = System.nanoTime();\n-            Method verifier = getClass().getMethod(test.getName() + \"_verifier\", boolean.class);\n-            \/\/ Warmup using verifier method\n-            Warmup anno = test.getAnnotation(Warmup.class);\n-            int warmup = anno == null ? WARMUP : anno.value();\n-            for (int i = 0; i < warmup; ++i) {\n-                verifier.invoke(this, true);\n-            }\n-            boolean osrOnly = (test.getAnnotation(OSRCompileOnly.class) != null);\n-            int compLevel = getCompLevel(test.getAnnotation(Test.class));\n-\n-            \/\/ C1 generates a lot of code when VerifyOops is enabled and may run out of space (for a small\n-            \/\/ number of test cases).\n-            boolean maybeCodeBufferOverflow = (TEST_C1 && VerifyOops);\n-\n-            if (osrOnly) {\n-                long started = System.currentTimeMillis();\n-                boolean stateCleared = false;\n-                for (;;) {\n-                    long elapsed = System.currentTimeMillis() - started;\n-                    int level = WHITE_BOX.getMethodCompilationLevel(test);\n-                    if (maybeCodeBufferOverflow && elapsed > 5000 && (!WHITE_BOX.isMethodCompiled(test, false) || level != compLevel)) {\n-                        System.out.println(\"Temporarily disabling VerifyOops\");\n-                        try {\n-                            WHITE_BOX.setBooleanVMFlag(\"VerifyOops\", false);\n-                            if (!stateCleared) {\n-                                WHITE_BOX.clearMethodState(test);\n-                                stateCleared = true;\n-                            }\n-                            verifier.invoke(this, false);\n-                        } finally {\n-                            WHITE_BOX.setBooleanVMFlag(\"VerifyOops\", true);\n-                            System.out.println(\"Re-enabled VerifyOops\");\n-                        }\n-                    } else {\n-                        verifier.invoke(this, false);\n-                    }\n-\n-                    boolean b = WHITE_BOX.isMethodCompiled(test, false);\n-                    if (VERBOSE) {\n-                        System.out.println(\"Is \" + test.getName() + \" compiled? \" + b);\n-                    }\n-                    if (b || XCOMP || STRESS_CC || !USE_COMPILER) {\n-                        \/\/ Don't control compilation if -Xcomp is enabled, or if compiler is disabled\n-                        break;\n-                    }\n-                    Asserts.assertTrue(OSR_TEST_TIMEOUT < 0 || elapsed < OSR_TEST_TIMEOUT, test + \" not compiled after \" + OSR_TEST_TIMEOUT + \" ms\");\n-                }\n-            } else {\n-                \/\/ Trigger compilation\n-                enqueueMethodForCompilation(test, compLevel);\n-                if (maybeCodeBufferOverflow && !WHITE_BOX.isMethodCompiled(test, false)) {\n-                    \/\/ Let's disable VerifyOops temporarily and retry.\n-                    WHITE_BOX.setBooleanVMFlag(\"VerifyOops\", false);\n-                    WHITE_BOX.clearMethodState(test);\n-                    enqueueMethodForCompilation(test, compLevel);\n-                    WHITE_BOX.setBooleanVMFlag(\"VerifyOops\", true);\n-                }\n-                if (!STRESS_CC && USE_COMPILER) {\n-                    Asserts.assertTrue(WHITE_BOX.isMethodCompiled(test, false), test + \" not compiled\");\n-                    int level = WHITE_BOX.getMethodCompilationLevel(test);\n-                    Asserts.assertEQ(level, compLevel, \"Unexpected compilation level for \" + test);\n-                }\n-                \/\/ Check result\n-                verifier.invoke(this, false);\n-            }\n-            if (PRINT_TIMES || VERBOSE) {\n-                long endTime = System.nanoTime();\n-                long duration = (endTime - startTime);\n-                durations.put(duration, test.getName());\n-                if (VERBOSE) {\n-                    System.out.println(\"Done \" + test.getName() + \": \" + duration + \" ns = \" + (duration \/ 1000000) + \" ms\");\n-                }\n-            }\n-            if (GC_AFTER) {\n-                System.out.println(\"doing GC\");\n-                System.gc();\n-            }\n-        }\n-\n-        \/\/ Print execution times\n-        if (PRINT_TIMES) {\n-          System.out.println(\"\\n\\nTest execution times:\");\n-          for (Map.Entry<Long, String> entry : durations.entrySet()) {\n-              System.out.format(\"%-10s%15d ns\\n\", entry.getValue() + \":\", entry.getKey());\n-          }\n-        }\n-    }\n-\n-    \/\/ Get the appropriate compilation level for a method, according to the\n-    \/\/ given annotation, as well as the current test scenario and VM options.\n-    \/\/\n-    private int getCompLevel(Object annotation) {\n-        int compLevel;\n-        if (annotation == null) {\n-            compLevel = COMP_LEVEL_ANY;\n-        } else if (annotation instanceof Test) {\n-            compLevel = ((Test)annotation).compLevel();\n-        } else {\n-            compLevel = ((ForceCompile)annotation).compLevel();\n-        }\n-\n-        return restrictCompLevel(compLevel);\n-    }\n-\n-    \/\/ Get the appropriate level as permitted by the test scenario and VM options.\n-    private static int restrictCompLevel(int compLevel) {\n-        if (compLevel == COMP_LEVEL_ANY) {\n-            compLevel = COMP_LEVEL_FULL_OPTIMIZATION;\n-        }\n-        if (FLIP_C1_C2) {\n-            \/\/ Effectively treat all (compLevel = C1) as (compLevel = C2), and\n-            \/\/                       (compLevel = C2) as (compLevel = C1).\n-            if (compLevel == COMP_LEVEL_SIMPLE) {\n-                compLevel = COMP_LEVEL_FULL_OPTIMIZATION;\n-            } else if (compLevel == COMP_LEVEL_FULL_OPTIMIZATION) {\n-                compLevel = COMP_LEVEL_SIMPLE;\n-            }\n-        }\n-        if (!TEST_C1 && compLevel < COMP_LEVEL_FULL_OPTIMIZATION) {\n-            compLevel = COMP_LEVEL_FULL_OPTIMIZATION;\n-        }\n-        if (TieredCompilation && compLevel > (int)TieredStopAtLevel) {\n-            compLevel = (int)TieredStopAtLevel;\n-        }\n-        return compLevel;\n-    }\n-\n-    public static void enqueueMethodForCompilation(Method m, int level) {\n-        level = restrictCompLevel(level);\n-        if (VERBOSE) {\n-            System.out.println(\"enqueueMethodForCompilation \" + m + \", level = \" + level);\n-        }\n-        WHITE_BOX.enqueueMethodForCompilation(m, level);\n-    }\n-\n-    enum TriState {\n-        Maybe,\n-        Yes,\n-        No\n-    }\n-\n-    static private TriState compiledByC2(Method m) {\n-        if (!USE_COMPILER || XCOMP || TEST_C1 ||\n-            (STRESS_CC && !WHITE_BOX.isMethodCompilable(m, COMP_LEVEL_FULL_OPTIMIZATION, false))) {\n-            return TriState.Maybe;\n-        }\n-        if (WHITE_BOX.isMethodCompiled(m, false) &&\n-            WHITE_BOX.getMethodCompilationLevel(m, false) >= COMP_LEVEL_FULL_OPTIMIZATION) {\n-            return TriState.Yes;\n-        }\n-        return TriState.No;\n-    }\n-\n-    static boolean isCompiledByC2(Method m) {\n-        return compiledByC2(m) == TriState.Yes;\n-    }\n-\n-    static void assertDeoptimizedByC2(Method m) {\n-        if (compiledByC2(m) == TriState.Yes && PerMethodTrapLimit != 0 && ProfileInterpreter) {\n-            throw new RuntimeException(\"Expected to have deoptimized\");\n-        }\n-    }\n-\n-    static void assertCompiledByC2(Method m) {\n-        if (compiledByC2(m) == TriState.No) {\n-            throw new RuntimeException(\"Expected to be compiled\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypeTest.java","additions":0,"deletions":860,"binary":false,"changes":860,"status":"deleted"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import jdk.test.lib.Utils;\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.TestFramework;\n+\n+public class InlineTypes {\n+    public static final int  rI = Utils.getRandomInstance().nextInt() % 1000;\n+    public static final long rL = Utils.getRandomInstance().nextLong() % 1000;\n+    public static final double rD = Utils.getRandomInstance().nextDouble() % 1000;\n+\n+    public static final Scenario[] DEFAULT_SCENARIOS = {\n+            new Scenario(0,\n+                         \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                         \"-XX:-UseACmpProfile\",\n+                         \"-XX:+AlwaysIncrementalInline\",\n+                         \"-XX:FlatArrayElementMaxOops=5\",\n+                         \"-XX:FlatArrayElementMaxSize=-1\",\n+                         \"-XX:-UseArrayLoadStoreProfile\",\n+                         \"-XX:InlineFieldMaxFlatSize=-1\",\n+                         \"-XX:+InlineTypePassFieldsAsArgs\",\n+                         \"-XX:+InlineTypeReturnedAsFields\"\n+            ),\n+            new Scenario(1,\n+                         \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                         \"-XX:-UseACmpProfile\",\n+                         \"-XX:-UseCompressedOops\",\n+                         \"-XX:FlatArrayElementMaxOops=5\",\n+                         \"-XX:FlatArrayElementMaxSize=-1\",\n+                         \"-XX:-UseArrayLoadStoreProfile\",\n+                         \"-XX:InlineFieldMaxFlatSize=-1\",\n+                         \"-XX:-InlineTypePassFieldsAsArgs\",\n+                         \"-XX:-InlineTypeReturnedAsFields\"\n+            ),\n+            new Scenario(2,\n+                         \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                         \"-XX:-UseACmpProfile\",\n+                         \"-XX:-UseCompressedOops\",\n+                         \"-XX:FlatArrayElementMaxOops=0\",\n+                         \"-XX:FlatArrayElementMaxSize=0\",\n+                         \"-XX:-UseArrayLoadStoreProfile\",\n+                         \"-XX:InlineFieldMaxFlatSize=-1\",\n+                         \"-XX:+InlineTypePassFieldsAsArgs\",\n+                         \"-XX:+InlineTypeReturnedAsFields\",\n+                         \"-XX:+StressInlineTypeReturnedAsFields\"\n+            ),\n+            new Scenario(3,\n+                         \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                         \"-DVerifyIR=false\",\n+                         \"-XX:+AlwaysIncrementalInline\",\n+                         \"-XX:FlatArrayElementMaxOops=0\",\n+                         \"-XX:FlatArrayElementMaxSize=0\",\n+                         \"-XX:InlineFieldMaxFlatSize=0\",\n+                         \"-XX:+InlineTypePassFieldsAsArgs\",\n+                         \"-XX:+InlineTypeReturnedAsFields\"\n+            ),\n+            new Scenario(4,\n+                         \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                         \"-DVerifyIR=false\",\n+                         \"-XX:FlatArrayElementMaxOops=-1\",\n+                         \"-XX:FlatArrayElementMaxSize=-1\",\n+                         \"-XX:InlineFieldMaxFlatSize=0\",\n+                         \"-XX:+InlineTypePassFieldsAsArgs\",\n+                         \"-XX:-InlineTypeReturnedAsFields\",\n+                         \"-XX:-ReduceInitialCardMarks\"\n+            ),\n+            new Scenario(5,\n+                         \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                         \"-XX:-UseACmpProfile\",\n+                         \"-XX:+AlwaysIncrementalInline\",\n+                         \"-XX:FlatArrayElementMaxOops=5\",\n+                         \"-XX:FlatArrayElementMaxSize=-1\",\n+                         \"-XX:-UseArrayLoadStoreProfile\",\n+                         \"-XX:InlineFieldMaxFlatSize=-1\",\n+                         \"-XX:-InlineTypePassFieldsAsArgs\",\n+                         \"-XX:-InlineTypeReturnedAsFields\"\n+            )\n+    };\n+\n+    public static TestFramework getFramework() {\n+        StackWalker walker = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n+        return new TestFramework(walker.getCallerClass()).setDefaultWarmup(251);\n+    }\n+\n+    static class IRNode {\n+        \/\/ Regular expressions used to match nodes in the PrintIdeal output\n+        protected static final String START = \"(\\\\d+ (.*\";\n+        protected static final String MID = \".*)+ ===.*\";\n+        protected static final String END = \")\";\n+        \/\/ Generic allocation\n+        protected static final String ALLOC_G  = \"(.*call,static  wrapper for: _new_instance_Java\" + END;\n+        protected static final String ALLOCA_G = \"(.*call,static  wrapper for: _new_array_Java\" + END;\n+        \/\/ Inline type allocation\n+        protected static final String ALLOC  = \"(.*precise klass compiler\/valhalla\/inlinetypes\/MyValue.*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*_new_instance_Java\" + END;\n+        protected static final String ALLOCA = \"(.*precise klass \\\\[(L|Q)compiler\/valhalla\/inlinetypes\/MyValue.*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*_new_array_Java\" + END;\n+        protected static final String LOAD   = START + \"Load(B|S|I|L|F|D|P|N)\" + MID + \"@compiler\/valhalla\/inlinetypes\/MyValue.*\" + END;\n+        protected static final String LOADK  = START + \"LoadK\" + MID + END;\n+        protected static final String STORE  = START + \"Store(B|C|S|I|L|F|D|P|N)\" + MID + \"@compiler\/valhalla\/inlinetypes\/MyValue.*\" + END;\n+        protected static final String LOOP   = START + \"Loop\" + MID + \"\" + END;\n+        protected static final String COUNTEDLOOP = START + \"CountedLoop\\\\b\" + MID + \"\" + END;\n+        protected static final String COUNTEDLOOP_MAIN = START + \"CountedLoop\\\\b\" + MID + \"main\" + END;\n+        protected static final String TRAP   = START + \"CallStaticJava\" + MID + \"uncommon_trap.*(unstable_if|predicate)\" + END;\n+        protected static final String LINKTOSTATIC = START + \"CallStaticJava\" + MID + \"linkToStatic\" + END;\n+        protected static final String NPE = START + \"CallStaticJava\" + MID + \"null_check\" + END;\n+        protected static final String CALL = START + \"CallStaticJava\" + MID + END;\n+        protected static final String STORE_INLINE_FIELDS = START + \"CallStaticJava\" + MID + \"store_inline_type_fields\" + END;\n+        protected static final String SCOBJ = \"(.*# ScObj.*\" + END;\n+        protected static final String LOAD_UNKNOWN_INLINE = \"(.*call_leaf,runtime  load_unknown_inline.*\" + END;\n+        protected static final String STORE_UNKNOWN_INLINE = \"(.*call_leaf,runtime  store_unknown_inline.*\" + END;\n+        protected static final String INLINE_ARRAY_NULL_GUARD = \"(.*call,static  wrapper for: uncommon_trap.*reason='null_check' action='none'.*\" + END;\n+        protected static final String INTRINSIC_SLOW_PATH = \"(.*call,static  wrapper for: uncommon_trap.*reason='intrinsic_or_type_checked_inlining'.*\" + END;\n+        protected static final String CLONE_INTRINSIC_SLOW_PATH = \"(.*call,static.*java.lang.Object::clone.*\" + END;\n+        protected static final String CLASS_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*class_check\" + END;\n+        protected static final String NULL_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*null_check\" + END;\n+        protected static final String NULL_ASSERT_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*null_assert\" + END;\n+        protected static final String RANGE_CHECK_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*range_check\" + END;\n+        protected static final String UNHANDLED_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*unhandled\" + END;\n+        protected static final String PREDICATE_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*predicate\" + END;\n+        protected static final String MEMBAR = START + \"MemBar\" + MID + END;\n+        protected static final String CHECKCAST_ARRAY = \"(cmp.*precise klass \\\\[(L|Q)compiler\/valhalla\/inlinetypes\/MyValue.*\" + END;\n+        protected static final String CHECKCAST_ARRAYCOPY = \"(.*call_leaf_nofp,runtime  checkcast_arraycopy.*\" + END;\n+        protected static final String JLONG_ARRAYCOPY = \"(.*call_leaf_nofp,runtime  jlong_disjoint_arraycopy.*\" + END;\n+        protected static final String FIELD_ACCESS = \"(.*Field: *\" + END;\n+        protected static final String SUBSTITUTABILITY_TEST = START + \"CallStaticJava\" + MID + \"java.lang.invoke.ValueBootstrapMethods::isSubstitutable\" + END;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypes.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,6 @@\n+import compiler.lib.ir_framework.DontCompile;\n+import compiler.lib.ir_framework.DontInline;\n+import compiler.lib.ir_framework.ForceCompileClassInitializer;\n+import compiler.lib.ir_framework.ForceInline;\n+\n+@ForceCompileClassInitializer\n@@ -28,1 +34,1 @@\n-    static final long sf = InlineTypeTest.rL;\n+    static final long sf = InlineTypes.rL;\n@@ -36,1 +42,1 @@\n-    static final MyValue2 v3 = MyValue2.createWithFieldsInline(InlineTypeTest.rI, InlineTypeTest.rD);\n+    static final MyValue2 v3 = MyValue2.createWithFieldsInline(InlineTypes.rI, InlineTypes.rD);\n@@ -77,2 +83,2 @@\n-        v = setV1(v, MyValue2.createWithFieldsInline(x, y, InlineTypeTest.rD));\n-        v = setV2(v, MyValue2.createWithFieldsInline(x, y, InlineTypeTest.rD+x));\n+        v = setV1(v, MyValue2.createWithFieldsInline(x, y, InlineTypes.rD));\n+        v = setV2(v, MyValue2.createWithFieldsInline(x, y, InlineTypes.rD + x));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue1.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,3 @@\n+import compiler.lib.ir_framework.DontInline;\n+import compiler.lib.ir_framework.ForceInline;\n+\n@@ -91,1 +94,1 @@\n-        v = setV(v, MyValue2Inline.createWithFieldsInline(d, InlineTypeTest.rL));\n+        v = setV(v, MyValue2Inline.createWithFieldsInline(d, InlineTypes.rL));\n@@ -100,1 +103,1 @@\n-        v = setV(v, MyValue2Inline.createWithFieldsInline(d, InlineTypeTest.rL));\n+        v = setV(v, MyValue2Inline.createWithFieldsInline(d, InlineTypes.rL));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue2.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import compiler.lib.ir_framework.DontInline;\n+import compiler.lib.ir_framework.ForceInline;\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue3.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import compiler.lib.ir_framework.ForceInline;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue4.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -27,1 +28,4 @@\n-import java.lang.invoke.*;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n@@ -31,0 +35,3 @@\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.*;\n+\n@@ -35,1 +42,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -37,6 +44,1 @@\n- * @compile TestArrays.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestArrays\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestArrays\n@@ -44,12 +46,0 @@\n-public class TestArrays extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 2: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\"};\n-        case 3: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\", \"-XX:-UncommonNullCast\"};\n-        case 4: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\"};\n-        case 5: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\"};\n-        }\n-        return null;\n-    }\n@@ -57,3 +47,14 @@\n-    public static void main(String[] args) throws Throwable {\n-        TestArrays test = new TestArrays();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class);\n+@ForceCompileClassInitializer\n+public class TestArrays {\n+\n+    public static void main(String[] args) {\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+        scenarios[2].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\", \"-XX:-UncommonNullCast\");\n+        scenarios[4].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\");\n+        scenarios[5].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class, MyValue2.class, MyValue2Inline.class)\n+                   .start();\n@@ -62,1 +63,1 @@\n-    \/\/ Helper methods\n+    \/\/ Helper methods and classes\n@@ -72,0 +73,55 @@\n+    static void verify(Object[] src, Object[] dst) {\n+        if (src instanceof MyInterface[] && dst instanceof MyInterface[]) {\n+            for (int i = 0; i < src.length; ++i) {\n+                Asserts.assertEQ(((MyInterface)src[i]).hash(), ((MyInterface)dst[i]).hash());\n+            }\n+        } else {\n+            for (int i = 0; i < src.length; ++i) {\n+                Asserts.assertEQ(src[i], dst[i]);\n+            }\n+        }\n+    }\n+\n+    static void verify(MyValue1[] src, MyValue1[] dst) {\n+        for (int i = 0; i < src.length; ++i) {\n+            Asserts.assertEQ(src[i].hash(), dst[i].hash());\n+        }\n+    }\n+\n+    static void verify(MyValue1[] src, Object[] dst) {\n+        for (int i = 0; i < src.length; ++i) {\n+            Asserts.assertEQ(src[i].hash(), ((MyInterface)dst[i]).hash());\n+        }\n+    }\n+\n+    static void verify(MyValue2[] src, MyValue2[] dst) {\n+        for (int i = 0; i < src.length; ++i) {\n+            Asserts.assertEQ(src[i].hash(), dst[i].hash());\n+        }\n+    }\n+\n+    static void verify(MyValue2[] src, Object[] dst) {\n+        for (int i = 0; i < src.length; ++i) {\n+            Asserts.assertEQ(src[i].hash(), ((MyInterface)dst[i]).hash());\n+        }\n+    }\n+\n+    static boolean compile_and_run_again_if_deoptimized(RunInfo info) {\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            if (TestFramework.isCompiled(m)) {\n+                TestFramework.compile(m, CompLevel.C2);\n+            }\n+        }\n+        return false;\n+    }\n+\n+    primitive static class NotFlattenable {\n+        private final Object o1 = null;\n+        private final Object o2 = null;\n+        private final Object o3 = null;\n+        private final Object o4 = null;\n+        private final Object o5 = null;\n+        private final Object o6 = null;\n+    }\n+\n@@ -73,2 +129,6 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { ALLOCA }, matchCount = { 1 })\n-    @Test(valid = InlineTypeArrayFlattenOff, match = { ALLOCA }, matchCount = { 1 }, failOn = LOAD)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {ALLOCA, \"= 1\"})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        counts = {ALLOCA, \"= 1\"},\n+        failOn = LOAD)\n@@ -83,2 +143,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -93,1 +153,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -100,2 +161,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -108,1 +169,2 @@\n-    @Test(failOn = ALLOCA)\n+    @Test\n+    @IR(failOn = ALLOCA)\n@@ -118,2 +180,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -136,1 +198,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE, LOOP, TRAP})\n@@ -141,2 +204,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -177,2 +240,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -194,1 +257,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -200,2 +264,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -208,1 +272,2 @@\n-    @Test(failOn = LOAD)\n+    @Test\n+    @IR(failOn = LOAD)\n@@ -213,2 +278,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n@@ -224,1 +289,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n@@ -229,2 +295,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() {\n@@ -238,1 +304,2 @@\n-    @Test(failOn = LOOP)\n+    @Test\n+    @IR(failOn = LOOP)\n@@ -243,2 +310,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n@@ -265,2 +332,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() {\n@@ -290,2 +357,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    public void test11_verifier() {\n@@ -328,2 +395,2 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n+    @Run(test = \"test12\")\n+    public void test12_verifier() {\n@@ -350,2 +417,2 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n+    @Run(test = \"test13\")\n+    public void test13_verifier() {\n@@ -361,2 +428,2 @@\n-    @DontCompile\n-    public void test14_verifier(boolean warmup) {\n+    @Run(test = \"test14\")\n+    public void test14_verifier() {\n@@ -397,2 +464,2 @@\n-    @DontCompile\n-    public void test15_verifier(boolean warmup) {\n+    @Run(test = \"test15\")\n+    public void test15_verifier() {\n@@ -418,2 +485,2 @@\n-    @DontCompile\n-    public void test16_verifier(boolean warmup) {\n+    @Run(test = \"test16\")\n+    public void test16_verifier() {\n@@ -430,2 +497,2 @@\n-    @DontCompile\n-    public void test17_verifier(boolean warmup) {\n+    @Run(test = \"test17\")\n+    public void test17_verifier() {\n@@ -461,2 +528,2 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    public void test18_verifier() {\n@@ -488,2 +555,2 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    public void test19_verifier() {\n@@ -502,2 +569,2 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    public void test20_verifier() {\n@@ -522,2 +589,2 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    public void test21_verifier() {\n@@ -545,2 +612,2 @@\n-    @DontCompile\n-    public void test22_verifier(boolean warmup) {\n+    @Run(test = \"test22\")\n+    public void test22_verifier() {\n@@ -567,2 +634,2 @@\n-    @DontCompile\n-    public void test23_verifier(boolean warmup) {\n+    @Run(test = \"test23\")\n+    public void test23_verifier() {\n@@ -586,2 +653,2 @@\n-    @DontCompile\n-    public void test24_verifier(boolean warmup) {\n+    @Run(test = \"test24\")\n+    public void test24_verifier() {\n@@ -611,2 +678,2 @@\n-    @DontCompile\n-    public void test25_verifier(boolean warmup) {\n+    @Run(test = \"test25\")\n+    public void test25_verifier() {\n@@ -630,2 +697,2 @@\n-    @DontCompile\n-    public void test26_verifier(boolean warmup) {\n+    @Run(test = \"test26\")\n+    public void test26_verifier() {\n@@ -649,2 +716,2 @@\n-    @DontCompile\n-    public void test27_verifier(boolean warmup) {\n+    @Run(test = \"test27\")\n+    public void test27_verifier() {\n@@ -664,2 +731,3 @@\n-    @Test(valid = ZGCOff, failOn = ALLOCA + LOOP + LOAD + TRAP)\n-    @Test(valid = ZGCOn)\n+    @Test\n+    @IR(applyIf = {\"UseZGC\", \"false\"},\n+        failOn = {ALLOCA, LOOP, LOAD, TRAP})\n@@ -673,2 +741,2 @@\n-    @DontCompile\n-    public void test28_verifier(boolean warmup) {\n+    @Run(test = \"test28\")\n+    public void test28_verifier() {\n@@ -683,2 +751,5 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, failOn = ALLOCA + LOOP + LOAD + TRAP)\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = ALLOCA + LOOP + TRAP)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        failOn = {ALLOCA, LOOP, LOAD, TRAP})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = {ALLOCA, LOOP, TRAP})\n@@ -691,2 +762,2 @@\n-    @DontCompile\n-    public void test29_verifier(boolean warmup) {\n+    @Run(test = \"test29\")\n+    public void test29_verifier() {\n@@ -704,1 +775,0 @@\n-    @Warmup(10000)\n@@ -712,2 +782,3 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) {\n+    @Run(test = \"test30\")\n+    @Warmup(10000)\n+    public void test30_verifier(RunInfo info) {\n@@ -718,1 +789,1 @@\n-        MyValue2 v = test30(src, !warmup);\n+        MyValue2 v = test30(src, !info.isWarmUp());\n@@ -722,0 +793,1 @@\n+\n@@ -723,2 +795,3 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n-    public long test31(boolean b, boolean deopt) {\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n+    public long test31(boolean b, boolean deopt, Method m) {\n@@ -733,1 +806,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test31\"));\n+            TestFramework.deoptimize(m);\n@@ -738,2 +811,2 @@\n-    @DontCompile\n-    public void test31_verifier(boolean warmup) {\n+    @Run(test = \"test31\")\n+    public void test31_verifier(RunInfo info) {\n@@ -741,1 +814,1 @@\n-        long result1 = test31(true, !warmup);\n+        long result1 = test31(true, !info.isWarmUp(), info.getTest());\n@@ -743,2 +816,2 @@\n-        MyValue2 v2 = MyValue2.createWithFieldsInline(rI+1, rD+1);\n-        long result2 = test31(false, !warmup);\n+        MyValue2 v2 = MyValue2.createWithFieldsInline(rI + 1, rD + 1);\n+        long result2 = test31(false, !info.isWarmUp(), info.getTest());\n@@ -755,2 +828,2 @@\n-    @DontCompile\n-    public void test32_verifier(boolean warmup) {\n+    @Run(test = \"test32\")\n+    public void test32_verifier() {\n@@ -773,2 +846,2 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) {\n+    @Run(test = \"test33\")\n+    public void test33_verifier() {\n@@ -812,2 +885,2 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n+    @Run(test = \"test34\")\n+    public void test34_verifier(RunInfo info) {\n@@ -826,1 +899,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test34\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -839,50 +912,0 @@\n-    static void verify(Object[] src, Object[] dst) {\n-        if (src instanceof MyInterface[] && dst instanceof MyInterface[]) {\n-            for (int i = 0; i < src.length; ++i) {\n-                Asserts.assertEQ(((MyInterface)src[i]).hash(), ((MyInterface)dst[i]).hash());\n-            }\n-        } else {\n-            for (int i = 0; i < src.length; ++i) {\n-                Asserts.assertEQ(src[i], dst[i]);\n-            }\n-        }\n-    }\n-\n-    static void verify(MyValue1[] src, MyValue1[] dst) {\n-        for (int i = 0; i < src.length; ++i) {\n-            Asserts.assertEQ(src[i].hash(), dst[i].hash());\n-        }\n-    }\n-\n-    static void verify(MyValue1[] src, Object[] dst) {\n-        for (int i = 0; i < src.length; ++i) {\n-            Asserts.assertEQ(src[i].hash(), ((MyInterface)dst[i]).hash());\n-        }\n-    }\n-\n-    static void verify(MyValue2[] src, MyValue2[] dst) {\n-        for (int i = 0; i < src.length; ++i) {\n-            Asserts.assertEQ(src[i].hash(), dst[i].hash());\n-        }\n-    }\n-\n-    static void verify(MyValue2[] src, Object[] dst) {\n-        for (int i = 0; i < src.length; ++i) {\n-            Asserts.assertEQ(src[i].hash(), ((MyInterface)dst[i]).hash());\n-        }\n-    }\n-\n-    static boolean compile_and_run_again_if_deoptimized(boolean warmup, String test) {\n-        if (!warmup) {\n-            Method m = tests.get(test);\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false)) {\n-                if (!InlineTypeArrayFlatten && !XCOMP && !STRESS_CC) {\n-                    throw new RuntimeException(\"Unexpected deoptimization\");\n-                }\n-                enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n@@ -895,2 +918,2 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) {\n+    @Run(test = \"test35\")\n+    public void test35_verifier(RunInfo info) {\n@@ -908,1 +931,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test35\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -919,2 +942,2 @@\n-    @DontCompile\n-    public void test36_verifier(boolean warmup) {\n+    @Run(test = \"test36\")\n+    public void test36_verifier(RunInfo info) {\n@@ -929,1 +952,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test36\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -940,2 +963,2 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) {\n+    @Run(test = \"test37\")\n+    public void test37_verifier(RunInfo info) {\n@@ -950,1 +973,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test37\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -957,1 +980,0 @@\n-    @Warmup(1) \/\/ Avoid early compilation\n@@ -962,2 +984,3 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n+    @Run(test = \"test38\")\n+    @Warmup(1) \/\/ Avoid early compilation\n+    public void test38_verifier(RunInfo info) {\n@@ -972,4 +995,4 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestArrays::test38\");\n-            assertDeoptimizedByC2(m);\n-            enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertDeoptimizedByC2(m);\n+            TestFramework.compile(m, CompLevel.C2);\n@@ -978,3 +1001,1 @@\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+            TestFramework.assertCompiledByC2(m);\n@@ -989,2 +1010,2 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n+    @Run(test = \"test39\")\n+    public void test39_verifier(RunInfo info) {\n@@ -999,1 +1020,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test39\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1006,1 +1027,0 @@\n-    @Warmup(1) \/\/ Avoid early compilation\n@@ -1011,2 +1031,3 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) {\n+    @Run(test = \"test40\")\n+    @Warmup(1) \/\/ Avoid early compilation\n+    public void test40_verifier(RunInfo info) {\n@@ -1021,4 +1042,4 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestArrays::test40\");\n-            assertDeoptimizedByC2(m);\n-            enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertDeoptimizedByC2(m);\n+            TestFramework.compile(m, CompLevel.C2);\n@@ -1027,3 +1048,1 @@\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+            TestFramework.assertCompiledByC2(m);\n@@ -1038,2 +1057,2 @@\n-    @DontCompile\n-    public void test41_verifier(boolean warmup) {\n+    @Run(test = \"test41\")\n+    public void test41_verifier(RunInfo info) {\n@@ -1048,1 +1067,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test41\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1059,2 +1078,2 @@\n-    @DontCompile\n-    public void test42_verifier(boolean warmup) {\n+    @Run(test = \"test42\")\n+    public void test42_verifier(RunInfo info) {\n@@ -1069,5 +1088,2 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestArrays::test42\");\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+        if (!info.isWarmUp()) {\n+            TestFramework.assertCompiledByC2(info.getTest());\n@@ -1083,2 +1099,2 @@\n-    @DontCompile\n-    public void test43_verifier(boolean warmup) {\n+    @Run(test = \"test43\")\n+    public void test43_verifier(RunInfo info) {\n@@ -1092,1 +1108,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test43\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1103,2 +1119,2 @@\n-    @DontCompile\n-    public void test44_verifier(boolean warmup) {\n+    @Run(test = \"test44\")\n+    public void test44_verifier(RunInfo info) {\n@@ -1112,1 +1128,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test44\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1123,2 +1139,2 @@\n-    @DontCompile\n-    public void test45_verifier(boolean warmup) {\n+    @Run(test = \"test45\")\n+    public void test45_verifier(RunInfo info) {\n@@ -1132,1 +1148,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test45\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1139,1 +1155,0 @@\n-    @Warmup(1) \/\/ Avoid early compilation\n@@ -1144,2 +1159,3 @@\n-    @DontCompile\n-    public void test46_verifier(boolean warmup) {\n+    @Run(test = \"test46\")\n+    @Warmup(1) \/\/ Avoid early compilation\n+    public void test46_verifier(RunInfo info) {\n@@ -1153,4 +1169,4 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestArrays::test46\");\n-            assertDeoptimizedByC2(m);\n-            enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertDeoptimizedByC2(m);\n+            TestFramework.compile(m, CompLevel.C2);\n@@ -1159,3 +1175,1 @@\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+            TestFramework.assertCompiledByC2(m);\n@@ -1170,2 +1184,2 @@\n-    @DontCompile\n-    public void test47_verifier(boolean warmup) {\n+    @Run(test = \"test47\")\n+    public void test47_verifier(RunInfo info) {\n@@ -1179,1 +1193,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test47\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1186,1 +1200,0 @@\n-    @Warmup(1) \/\/ Avoid early compilation\n@@ -1191,2 +1204,3 @@\n-    @DontCompile\n-    public void test48_verifier(boolean warmup) {\n+    @Run(test = \"test48\")\n+    @Warmup(1) \/\/ Avoid early compilation\n+    public void test48_verifier(RunInfo info) {\n@@ -1200,4 +1214,4 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestArrays::test48\");\n-            assertDeoptimizedByC2(m);\n-            enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertDeoptimizedByC2(m);\n+            TestFramework.compile(m, CompLevel.C2);\n@@ -1206,3 +1220,1 @@\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+            TestFramework.assertCompiledByC2(m);\n@@ -1217,2 +1229,2 @@\n-    @DontCompile\n-    public void test49_verifier(boolean warmup) {\n+    @Run(test = \"test49\")\n+    public void test49_verifier(RunInfo info) {\n@@ -1226,1 +1238,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test49\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1237,2 +1249,2 @@\n-    @DontCompile\n-    public void test50_verifier(boolean warmup) {\n+    @Run(test = \"test50\")\n+    public void test50_verifier(RunInfo info) {\n@@ -1246,5 +1258,3 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestArrays::test50\");\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -1260,2 +1270,2 @@\n-    @DontCompile\n-    public void test51_verifier(boolean warmup) {\n+    @Run(test = \"test51\")\n+    public void test51_verifier() {\n@@ -1279,2 +1289,2 @@\n-    @DontCompile\n-    public void test52_verifier(boolean warmup) {\n+    @Run(test = \"test52\")\n+    public void test52_verifier() {\n@@ -1294,2 +1304,2 @@\n-    @DontCompile\n-    public void test53_verifier(boolean warmup) {\n+    @Run(test = \"test53\")\n+    public void test53_verifier() {\n@@ -1310,2 +1320,2 @@\n-    @DontCompile\n-    public void test54_verifier(boolean warmup) {\n+    @Run(test = \"test54\")\n+    public void test54_verifier() {\n@@ -1326,2 +1336,2 @@\n-    @DontCompile\n-    public void test55_verifier(boolean warmup) {\n+    @Run(test = \"test55\")\n+    public void test55_verifier() {\n@@ -1343,2 +1353,2 @@\n-    @DontCompile\n-    public void test56_verifier(boolean warmup) {\n+    @Run(test = \"test56\")\n+    public void test56_verifier() {\n@@ -1354,1 +1364,1 @@\n-   @Test\n+    @Test\n@@ -1359,2 +1369,2 @@\n-    @DontCompile\n-    public void test57_verifier(boolean warmup) {\n+    @Run(test = \"test57\")\n+    public void test57_verifier() {\n@@ -1375,2 +1385,2 @@\n-    @DontCompile\n-    public void test58_verifier(boolean warmup) {\n+    @Run(test = \"test58\")\n+    public void test58_verifier(RunInfo info) {\n@@ -1386,1 +1396,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestArrays::test58\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1397,2 +1407,2 @@\n-    @DontCompile\n-    public void test59_verifier(boolean warmup) {\n+    @Run(test = \"test59\")\n+    public void test59_verifier() {\n@@ -1415,2 +1425,2 @@\n-    @DontCompile\n-    public void test60_verifier(boolean warmup) {\n+    @Run(test = \"test60\")\n+    public void test60_verifier() {\n@@ -1433,2 +1443,2 @@\n-    @DontCompile\n-    public void test61_verifier(boolean warmup) {\n+    @Run(test = \"test61\")\n+    public void test61_verifier() {\n@@ -1467,2 +1477,2 @@\n-    @DontCompile\n-    public void test62_verifier(boolean warmup) {\n+    @Run(test = \"test62\")\n+    public void test62_verifier() {\n@@ -1503,2 +1513,2 @@\n-    @DontCompile\n-    public void test63_verifier(boolean warmup) {\n+    @Run(test = \"test63\")\n+    public void test63_verifier() {\n@@ -1524,2 +1534,2 @@\n-    @DontCompile\n-    public void test64_verifier(boolean warmup) {\n+    @Run(test = \"test64\")\n+    public void test64_verifier() {\n@@ -1539,2 +1549,2 @@\n-    @DontCompile\n-    public void test65_verifier(boolean warmup) {\n+    @Run(test = \"test65\")\n+    public void test65_verifier() {\n@@ -1549,1 +1559,2 @@\n-    @Test(match = { ALLOCA }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {ALLOCA, \"= 1\"})\n@@ -1556,2 +1567,2 @@\n-    @DontCompile\n-    public void test66_verifier(boolean warmup) {\n+    @Run(test = \"test66\")\n+    public void test66_verifier() {\n@@ -1571,2 +1582,2 @@\n-    @DontCompile\n-    public void test67_verifier(boolean warmup) {\n+    @Run(test = \"test67\")\n+    public void test67_verifier() {\n@@ -1588,2 +1599,2 @@\n-    @DontCompile\n-    public void test68_verifier(boolean warmup) {\n+    @Run(test = \"test68\")\n+    public void test68_verifier() {\n@@ -1606,2 +1617,2 @@\n-    @DontCompile\n-    public void test69_verifier(boolean warmup) {\n+    @Run(test = \"test69\")\n+    public void test69_verifier() {\n@@ -1629,2 +1640,2 @@\n-    @DontCompile\n-    public void test70_verifier(boolean warmup) {\n+    @Run(test = \"test70\")\n+    public void test70_verifier() {\n@@ -1653,2 +1664,2 @@\n-    @DontCompile\n-    public void test71_verifier(boolean warmup) {\n+    @Run(test = \"test71\")\n+    public void test71_verifier() {\n@@ -1670,2 +1681,2 @@\n-    @DontCompile\n-    public void test72_verifier(boolean warmup) {\n+    @Run(test = \"test72\")\n+    public void test72_verifier() {\n@@ -1689,2 +1700,2 @@\n-    @DontCompile\n-    public void test73_verifier(boolean warmup) {\n+    @Run(test = \"test73\")\n+    public void test73_verifier() {\n@@ -1709,1 +1720,0 @@\n-    @Warmup(0)\n@@ -1714,2 +1724,3 @@\n-    @DontCompile\n-    public void test74_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test74\")\n+    @Warmup(0)\n+    public void test74_verifier() throws Throwable {\n@@ -1742,2 +1753,2 @@\n-    @DontCompile\n-    public void test75_verifier(boolean warmup) {\n+    @Run(test = \"test75\")\n+    public void test75_verifier() {\n@@ -1780,2 +1791,2 @@\n-    @DontCompile\n-    public void test76_verifier(boolean warmup) {\n+    @Run(test = \"test76\")\n+    public void test76_verifier() {\n@@ -1820,2 +1831,2 @@\n-    @DontCompile\n-    public void test77_verifier(boolean warmup) {\n+    @Run(test = \"test77\")\n+    public void test77_verifier() {\n@@ -1840,2 +1851,2 @@\n-    @DontCompile\n-    public void test78_verifier(boolean warmup) {\n+    @Run(test = \"test78\")\n+    public void test78_verifier() {\n@@ -1847,2 +1858,5 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { ALLOC_G, LOAD_UNKNOWN_INLINE }, matchCount = { 1, 1 })\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {ALLOC_G, \"= 1\", LOAD_UNKNOWN_INLINE, \"= 1\"})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE})\n@@ -1855,2 +1869,2 @@\n-    @DontCompile\n-    public void test79_verifier(boolean warmup) {\n+    @Run(test = \"test79\")\n+    public void test79_verifier() {\n@@ -1864,9 +1878,0 @@\n-    primitive static class NotFlattenable {\n-        private final Object o1 = null;\n-        private final Object o2 = null;\n-        private final Object o3 = null;\n-        private final Object o4 = null;\n-        private final Object o5 = null;\n-        private final Object o6 = null;\n-    }\n-\n@@ -1874,2 +1879,5 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { ALLOC_G, LOAD_UNKNOWN_INLINE }, matchCount = { 1, 1 })\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {ALLOC_G, \"= 1\", LOAD_UNKNOWN_INLINE, \"= 1\"})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE})\n@@ -1882,2 +1890,2 @@\n-    @DontCompile\n-    public void test80_verifier(boolean warmup) {\n+    @Run(test = \"test80\")\n+    public void test80_verifier() {\n@@ -1892,1 +1900,2 @@\n-    @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n+    @Test\n+    @IR(failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -1903,2 +1912,2 @@\n-    @DontCompile\n-    public void test81_verifier(boolean warmup) {\n+    @Run(test = \"test81\")\n+    public void test81_verifier() {\n@@ -1921,2 +1930,5 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE)\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE)\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        failOn = {ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE})\n@@ -1930,2 +1942,2 @@\n-    @DontCompile\n-    public void test82_verifier(boolean warmup) {\n+    @Run(test = \"test82\")\n+    public void test82_verifier() {\n@@ -1948,2 +1960,6 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { ALLOC_G, LOAD_UNKNOWN_INLINE }, matchCount = { 1, 1 }, failOn = ALLOCA_G + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {ALLOC_G, \"= 1\", LOAD_UNKNOWN_INLINE, \"= 1\"},\n+        failOn = {ALLOCA_G, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+            failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -1955,2 +1971,2 @@\n-    @DontCompile\n-    public void test83_verifier(boolean warmup) {\n+    @Run(test = \"test83\")\n+    public void test83_verifier() {\n@@ -1967,1 +1983,3 @@\n-    @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE, match = { INLINE_ARRAY_NULL_GUARD }, matchCount = { 1 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n+        counts = {INLINE_ARRAY_NULL_GUARD, \"= 1\"})\n@@ -1974,2 +1992,2 @@\n-    @DontCompile\n-    public void test84_verifier(boolean warmup) {\n+    @Run(test = \"test84\")\n+    public void test84_verifier(RunInfo info) {\n@@ -1984,1 +2002,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -1996,1 +2014,3 @@\n-    @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE, match = { INLINE_ARRAY_NULL_GUARD }, matchCount = { 2 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n+        counts = {INLINE_ARRAY_NULL_GUARD, \"= 2\"})\n@@ -2006,2 +2026,2 @@\n-    @DontCompile\n-    public void test85_verifier(boolean warmup) {\n+    @Run(test = \"test85\")\n+    public void test85_verifier(RunInfo info) {\n@@ -2019,1 +2039,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2031,1 +2051,3 @@\n-    @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE, match = { INLINE_ARRAY_NULL_GUARD }, matchCount = { 2 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n+        counts = {INLINE_ARRAY_NULL_GUARD, \"= 2\"})\n@@ -2041,2 +2063,2 @@\n-    @DontCompile\n-    public void test86_verifier(boolean warmup) {\n+    @Run(test = \"test86\")\n+    public void test86_verifier(RunInfo info) {\n@@ -2049,1 +2071,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2061,1 +2083,3 @@\n-    @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE, match = { INLINE_ARRAY_NULL_GUARD }, matchCount = { 2 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, ALLOCA_G, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE},\n+        counts = {INLINE_ARRAY_NULL_GUARD, \"= 2\"})\n@@ -2071,2 +2095,2 @@\n-    @DontCompile\n-    public void test87_verifier(boolean warmup) {\n+    @Run(test = \"test87\")\n+    public void test87_verifier(RunInfo info) {\n@@ -2079,1 +2103,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2096,2 +2120,2 @@\n-    @DontCompile\n-    public void test88_verifier(boolean warmup) {\n+    @Run(test = \"test88\")\n+    public void test88_verifier(RunInfo info) {\n@@ -2104,1 +2128,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2121,2 +2145,2 @@\n-    @DontCompile\n-    public void test89_verifier(boolean warmup) {\n+    @Run(test = \"test89\")\n+    public void test89_verifier(RunInfo info) {\n@@ -2126,1 +2150,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2156,2 +2180,2 @@\n-    @DontCompile\n-    public void test90_verifier(boolean warmup) {\n+    @Run(test = \"test90\")\n+    public void test90_verifier() {\n@@ -2187,1 +2211,0 @@\n-    @Warmup(0)\n@@ -2198,2 +2221,3 @@\n-    @DontCompile\n-    public void test91_verifier(boolean warmup) {\n+    @Run(test = \"test91\")\n+    @Warmup(0)\n+    public void test91_verifier() {\n@@ -2216,2 +2240,2 @@\n-    @DontCompile\n-    public void test92_verifier(boolean warmup) {\n+    @Run(test = \"test92\")\n+    public void test92_verifier() {\n@@ -2237,1 +2261,0 @@\n-    @Warmup(10000)\n@@ -2246,2 +2269,3 @@\n-    @DontCompile\n-    public void test93_verifier(boolean warmup) {\n+    @Run(test = \"test93\")\n+    @Warmup(10000)\n+    public void test93_verifier(RunInfo info) {\n@@ -2252,1 +2276,1 @@\n-        long res = test93(src, !warmup);\n+        long res = test93(src, !info.isWarmUp());\n@@ -2262,1 +2286,0 @@\n-    @Warmup(10000)\n@@ -2271,2 +2294,3 @@\n-    @DontCompile\n-    public void test94_verifier(boolean warmup) {\n+    @Run(test = \"test94\")\n+    @Warmup(10000)\n+    public void test94_verifier(RunInfo info) {\n@@ -2278,1 +2302,1 @@\n-            long res = test94(src, i, !warmup);\n+            long res = test94(src, i, !info.isWarmUp());\n@@ -2285,1 +2309,2 @@\n-    @Test(failOn = CHECKCAST_ARRAY)\n+    @Test\n+    @IR(failOn = CHECKCAST_ARRAY)\n@@ -2293,2 +2318,2 @@\n-    @DontCompile\n-    public void test95_verifier(boolean warmup) {\n+    @Run(test = \"test95\")\n+    public void test95_verifier() {\n@@ -2312,1 +2337,2 @@\n-    @Test(failOn = CHECKCAST_ARRAY)\n+    @Test\n+    @IR(failOn = CHECKCAST_ARRAY)\n@@ -2321,2 +2347,2 @@\n-    @DontCompile\n-    public void test96_verifier(boolean warmup) {\n+    @Run(test = \"test96\")\n+    public void test96_verifier() {\n@@ -2340,1 +2366,2 @@\n-    @Test(failOn = CHECKCAST_ARRAY)\n+    @Test\n+    @IR(failOn = CHECKCAST_ARRAY)\n@@ -2348,2 +2375,2 @@\n-    @DontCompile\n-    public void test97_verifier(boolean warmup) {\n+    @Run(test = \"test97\")\n+    public void test97_verifier() {\n@@ -2363,2 +2390,3 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, failOn = CHECKCAST_ARRAY)\n-    @Test(valid = InlineTypeArrayFlattenOff)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        failOn = CHECKCAST_ARRAY)\n@@ -2372,2 +2400,2 @@\n-    @DontCompile\n-    public void test98_verifier(boolean warmup) {\n+    @Run(test = \"test98\")\n+    public void test98_verifier() {\n@@ -2391,2 +2419,3 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, failOn = CHECKCAST_ARRAY)\n-    @Test(valid = InlineTypeArrayFlattenOff)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        failOn = CHECKCAST_ARRAY)\n@@ -2401,2 +2430,2 @@\n-    @DontCompile\n-    public void test99_verifier(boolean warmup) {\n+    @Run(test = \"test99\")\n+    public void test99_verifier() {\n@@ -2420,2 +2449,3 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, failOn = CHECKCAST_ARRAY)\n-    @Test(valid = InlineTypeArrayFlattenOff)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        failOn = CHECKCAST_ARRAY)\n@@ -2429,2 +2459,2 @@\n-    @DontCompile\n-    public void test100_verifier(boolean warmup) {\n+    @Run(test = \"test100\")\n+    public void test100_verifier() {\n@@ -2444,1 +2474,2 @@\n-    @Test(match = { CHECKCAST_ARRAY }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = { CHECKCAST_ARRAY, \"= 1\" })\n@@ -2449,2 +2480,2 @@\n-    @DontCompile\n-    public void test101_verifier(boolean warmup) {\n+    @Run(test = \"test101\")\n+    public void test101_verifier() {\n@@ -2482,2 +2513,5 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { INTRINSIC_SLOW_PATH }, matchCount = { 1 })\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = INTRINSIC_SLOW_PATH)\n@@ -2488,2 +2522,2 @@\n-    @DontCompile\n-    public void test102_verifier(boolean warmup) {\n+    @Run(test = \"test102\")\n+    public void test102_verifier() {\n@@ -2495,1 +2529,2 @@\n-    @Test(failOn = INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(failOn = INTRINSIC_SLOW_PATH)\n@@ -2500,2 +2535,2 @@\n-    @DontCompile\n-    public void test103_verifier(boolean warmup) {\n+    @Run(test = \"test103\")\n+    public void test103_verifier() {\n@@ -2507,1 +2542,2 @@\n-    @Test(failOn = INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(failOn = INTRINSIC_SLOW_PATH)\n@@ -2512,2 +2548,2 @@\n-    @DontCompile\n-    public void test104_verifier(boolean warmup) {\n+    @Run(test = \"test104\")\n+    public void test104_verifier() {\n@@ -2519,1 +2555,2 @@\n-    @Test(match = { INTRINSIC_SLOW_PATH }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n@@ -2524,2 +2561,2 @@\n-    @DontCompile\n-    public void test105_verifier(boolean warmup) {\n+    @Run(test = \"test105\")\n+    public void test105_verifier() {\n@@ -2531,1 +2568,2 @@\n-    @Test(match = { INTRINSIC_SLOW_PATH }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n@@ -2536,2 +2574,2 @@\n-    @DontCompile\n-    public void test105_null_verifier(boolean warmup) {\n+    @Run(test = \"test105_null\")\n+    public void test105_null_verifier() {\n@@ -2548,3 +2586,5 @@\n-\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { INTRINSIC_SLOW_PATH }, matchCount = { 1 })\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = INTRINSIC_SLOW_PATH)\n@@ -2555,2 +2595,2 @@\n-    @DontCompile\n-    public void test106_verifier(boolean warmup) {\n+    @Run(test = \"test106\")\n+    public void test106_verifier() {\n@@ -2563,2 +2603,3 @@\n-    @Test(valid = InlineTypeArrayFlattenOn)\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = INTRINSIC_SLOW_PATH)\n@@ -2569,2 +2610,2 @@\n-    @DontCompile\n-    public void test107_verifier(boolean warmup) {\n+    @Run(test = \"test107\")\n+    public void test107_verifier() {\n@@ -2575,1 +2616,2 @@\n-    @Test(failOn = INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(failOn = INTRINSIC_SLOW_PATH)\n@@ -2580,2 +2622,2 @@\n-    @DontCompile\n-    public void test108_verifier(boolean warmup) {\n+    @Run(test = \"test108\")\n+    public void test108_verifier() {\n@@ -2586,1 +2628,2 @@\n-    @Test(match = { INTRINSIC_SLOW_PATH }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n@@ -2591,2 +2634,2 @@\n-    @DontCompile\n-    public void test109_verifier(boolean warmup) {\n+    @Run(test = \"test109\")\n+    public void test109_verifier() {\n@@ -2597,1 +2640,2 @@\n-    @Test(match = { INTRINSIC_SLOW_PATH }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n@@ -2602,2 +2646,2 @@\n-    @DontCompile\n-    public void test109_null_verifier(boolean warmup) {\n+    @Run(test = \"test109_null\")\n+    public void test109_null_verifier() {\n@@ -2613,2 +2657,5 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { INTRINSIC_SLOW_PATH }, matchCount = { 1 })\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n@@ -2619,2 +2666,2 @@\n-    @DontCompile\n-    public void test110_verifier(boolean warmup) {\n+    @Run(test = \"test110\")\n+    public void test110_verifier() {\n@@ -2626,1 +2673,2 @@\n-    @Test(failOn = INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP)\n+    @Test\n+    @IR(failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n@@ -2631,2 +2679,2 @@\n-    @DontCompile\n-    public void test111_verifier(boolean warmup) {\n+    @Run(test = \"test111\")\n+    public void test111_verifier() {\n@@ -2638,1 +2686,2 @@\n-    @Test(failOn = INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP)\n+    @Test\n+    @IR(failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n@@ -2643,2 +2692,2 @@\n-    @DontCompile\n-    public void test112_verifier(boolean warmup) {\n+    @Run(test = \"test112\")\n+    public void test112_verifier() {\n@@ -2650,1 +2699,2 @@\n-    @Test(match = { INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {INTRINSIC_SLOW_PATH + \"|\" + CLASS_CHECK_TRAP, \" = 1\"})\n@@ -2655,2 +2705,2 @@\n-    @DontCompile\n-    public void test113_verifier(boolean warmup) {\n+    @Run(test = \"test113\")\n+    public void test113_verifier() {\n@@ -2662,1 +2712,2 @@\n-    @Test(match = { INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {INTRINSIC_SLOW_PATH + \"|\" + CLASS_CHECK_TRAP, \" = 1\"})\n@@ -2667,2 +2718,2 @@\n-    @DontCompile\n-    public void test113_null_verifier(boolean warmup) {\n+    @Run(test = \"test113_null\")\n+    public void test113_null_verifier() {\n@@ -2680,2 +2731,5 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { INTRINSIC_SLOW_PATH }, matchCount = { 1 })\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {INTRINSIC_SLOW_PATH, \"= 1\"})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n@@ -2686,2 +2740,2 @@\n-    @DontCompile\n-    public void test114_verifier(boolean warmup) {\n+    @Run(test = \"test114\")\n+    public void test114_verifier() {\n@@ -2694,2 +2748,3 @@\n-    @Test(valid = InlineTypeArrayFlattenOn)\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n@@ -2700,2 +2755,2 @@\n-    @DontCompile\n-    public void test115_verifier(boolean warmup) {\n+    @Run(test = \"test115\")\n+    public void test115_verifier() {\n@@ -2706,1 +2761,2 @@\n-    @Test(failOn = INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP)\n+    @Test\n+    @IR(failOn = {INTRINSIC_SLOW_PATH, CLASS_CHECK_TRAP})\n@@ -2711,2 +2767,2 @@\n-    @DontCompile\n-    public void test116_verifier(boolean warmup) {\n+    @Run(test = \"test116\")\n+    public void test116_verifier() {\n@@ -2717,1 +2773,2 @@\n-    @Test(match = { INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {INTRINSIC_SLOW_PATH + \"|\" + CLASS_CHECK_TRAP, \" = 1\"})\n@@ -2722,2 +2779,2 @@\n-    @DontCompile\n-    public void test117_verifier(boolean warmup) {\n+    @Run(test = \"test117\")\n+    public void test117_verifier() {\n@@ -2728,1 +2785,2 @@\n-    @Test(match = { INTRINSIC_SLOW_PATH + CLASS_CHECK_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {INTRINSIC_SLOW_PATH + \"|\" + CLASS_CHECK_TRAP, \" = 1\"})\n@@ -2733,2 +2791,2 @@\n-    @DontCompile\n-    public void test117_null_verifier(boolean warmup) {\n+    @Run(test = \"test117_null\")\n+    public void test117_null_verifier() {\n@@ -2745,1 +2803,3 @@\n-    @Test(match = { CLASS_CHECK_TRAP }, matchCount = { 1 }, failOn = INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(counts = {CLASS_CHECK_TRAP, \"= 1\"},\n+        failOn = INTRINSIC_SLOW_PATH)\n@@ -2750,2 +2810,2 @@\n-    @DontCompile\n-    public void test118_verifier(boolean warmup) {\n+    @Run(test = \"test118\")\n+    public void test118_verifier() {\n@@ -2769,2 +2829,2 @@\n-    @DontCompile\n-    public void test119_verifier(boolean warmup) {\n+    @Run(test = \"test119\")\n+    public void test119_verifier() {\n@@ -2777,1 +2837,3 @@\n-    @Test(match = { CLASS_CHECK_TRAP }, matchCount = { 1 }, failOn = INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(counts = {CLASS_CHECK_TRAP, \"= 1\"},\n+        failOn = INTRINSIC_SLOW_PATH)\n@@ -2782,2 +2844,2 @@\n-    @DontCompile\n-    public void test120_verifier(boolean warmup) {\n+    @Run(test = \"test120\")\n+    public void test120_verifier() {\n@@ -2799,1 +2861,0 @@\n-    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n@@ -2804,2 +2865,3 @@\n-    @DontCompile\n-    public void test121_verifier(boolean warmup) {\n+    @Run(test = \"test121\")\n+    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n+    public void test121_verifier() {\n@@ -2819,1 +2881,0 @@\n-    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n@@ -2824,2 +2885,3 @@\n-    @DontCompile\n-    public void test122_verifier(boolean warmup) {\n+    @Run(test = \"test122\")\n+    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n+    public void test122_verifier() {\n@@ -2839,1 +2901,0 @@\n-    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n@@ -2844,2 +2905,3 @@\n-    @DontCompile\n-    public void test123_verifier(boolean warmup) {\n+    @Run(test = \"test123\")\n+    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n+    public void test123_verifier() {\n@@ -2861,1 +2923,0 @@\n-    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n@@ -2866,2 +2927,3 @@\n-    @DontCompile\n-    public void test124_verifier(boolean warmup) {\n+    @Run(test = \"test124\")\n+    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n+    public void test124_verifier() {\n@@ -2883,1 +2945,0 @@\n-    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n@@ -2888,2 +2949,3 @@\n-    @DontCompile\n-    public void test125_verifier(boolean warmup) {\n+    @Run(test = \"test125\")\n+    @Warmup(10000) \/\/ Make sure we hit too_many_traps for the src <: dst check\n+    public void test125_verifier() {\n@@ -2920,0 +2982,1 @@\n+\n@@ -2921,2 +2984,6 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { JLONG_ARRAYCOPY }, matchCount = { 1 }, failOn = CHECKCAST_ARRAYCOPY + CLONE_INTRINSIC_SLOW_PATH)\n-    @Test(valid = InlineTypeArrayFlattenOff, failOn = CLONE_INTRINSIC_SLOW_PATH)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {JLONG_ARRAYCOPY, \"= 1\"},\n+        failOn = {CHECKCAST_ARRAYCOPY, CLONE_INTRINSIC_SLOW_PATH})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        failOn = CLONE_INTRINSIC_SLOW_PATH)\n@@ -2927,2 +2994,2 @@\n-    @DontCompile\n-    public void test126_verifier(boolean warmup) {\n+    @Run(test = \"test126\")\n+    public void test126_verifier() {\n@@ -2939,2 +3006,2 @@\n-    @DontCompile\n-    public void test127_verifier(boolean warmup) {\n+    @Run(test = \"test127\")\n+    public void test127_verifier() {\n@@ -2956,2 +3023,4 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { JLONG_ARRAYCOPY }, matchCount = { 1 }, failOn = CHECKCAST_ARRAYCOPY)\n-    @Test(valid = InlineTypeArrayFlattenOff)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {JLONG_ARRAYCOPY, \"= 1\"},\n+        failOn = CHECKCAST_ARRAYCOPY)\n@@ -2962,2 +3031,2 @@\n-    @DontCompile\n-    public void test128_verifier(boolean warmup) {\n+    @Run(test = \"test128\")\n+    public void test128_verifier() {\n@@ -2982,2 +3051,2 @@\n-    @DontCompile\n-    public void test129_verifier(boolean warmup) {\n+    @Run(test = \"test129\")\n+    public void test129_verifier() {\n@@ -2999,1 +3068,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOAD + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE})\n@@ -3005,2 +3075,2 @@\n-    @DontCompile\n-    public void test130_verifier(boolean warmup) {\n+    @Run(test = \"test130\")\n+    public void test130_verifier() {\n@@ -3018,1 +3088,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOAD + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE})\n@@ -3024,2 +3095,2 @@\n-    @DontCompile\n-    public void test131_verifier(boolean warmup) {\n+    @Run(test = \"test131\")\n+    public void test131_verifier() {\n@@ -3039,2 +3110,2 @@\n-    @DontCompile\n-    public void test132_verifier(boolean warmup) {\n+    @Run(test = \"test132\")\n+    public void test132_verifier() {\n@@ -3058,2 +3129,2 @@\n-    @DontCompile\n-    public void test133_verifier(boolean warmup) {\n+    @Run(test = \"test133\")\n+    public void test133_verifier() {\n@@ -3071,1 +3142,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOAD + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE})\n@@ -3078,2 +3150,2 @@\n-    @DontCompile\n-    public void test134_verifier(boolean warmup) {\n+    @Run(test = \"test134\")\n+    public void test134_verifier() {\n@@ -3091,2 +3163,2 @@\n-    @DontCompile\n-    public void test135_verifier(boolean warmup) {\n+    @Run(test = \"test135\")\n+    public void test135_verifier() {\n@@ -3120,2 +3192,2 @@\n-    @DontCompile\n-    public void test136_verifier(boolean warmup) {\n+    @Run(test = \"test136\")\n+    public void test136_verifier() {\n@@ -3145,2 +3217,2 @@\n-    @DontCompile\n-    public void test137_verifier(boolean warmup) {\n+    @Run(test = \"test137\")\n+    public void test137_verifier() {\n@@ -3188,2 +3260,2 @@\n-    @DontCompile\n-    public void test138_verifier(boolean warmup) {\n+    @Run(test = \"test138\")\n+    public void test138_verifier() {\n@@ -3210,1 +3282,3 @@\n-    @Test(failOn = ALLOC + ALLOCA + ALLOC_G + ALLOCA_G + LOOP + LOAD + STORE + TRAP + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, ALLOC_G, ALLOCA_G, LOOP, LOAD, STORE, TRAP, LOAD_UNKNOWN_INLINE,\n+                  STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -3222,2 +3296,2 @@\n-    @DontCompile\n-    public void test139_verifier(boolean warmup) {\n+    @Run(test = \"test139\")\n+    public void test139_verifier() {\n@@ -3229,1 +3303,3 @@\n-    @Test(failOn = ALLOC + ALLOCA + ALLOC_G + LOOP + LOAD + STORE + TRAP + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, ALLOC_G, LOOP, LOAD, STORE, TRAP,\n+                  LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -3242,2 +3318,2 @@\n-    @DontCompile\n-    public void test140_verifier(boolean warmup) {\n+    @Run(test = \"test140\")\n+    public void test140_verifier() {\n@@ -3252,1 +3328,0 @@\n-    \/\/ @Test(failOn = ALLOC + ALLOCA + ALLOC_G + ALLOCA_G + LOOP + LOAD + STORE + TRAP + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n@@ -3254,0 +3329,1 @@\n+    \/\/ @IR(failOn = {ALLOC, ALLOCA, ALLOC_G, ALLOCA_G, LOOP, LOAD, STORE, TRAP, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -3265,2 +3341,2 @@\n-    @DontCompile\n-    public void test141_verifier(boolean warmup) {\n+    @Run(test = \"test141\")\n+    public void test141_verifier() {\n@@ -3273,1 +3349,0 @@\n-    \/\/ @Test(failOn = ALLOC + ALLOCA + ALLOC_G + LOOP + LOAD + STORE + TRAP + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n@@ -3275,0 +3350,1 @@\n+    \/\/ @IR(failOn = {ALLOC, ALLOCA, ALLOC_G, LOOP, LOAD, STORE, TRAP, LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -3287,2 +3363,2 @@\n-    @DontCompile\n-    public void test142_verifier(boolean warmup) {\n+    @Run(test = \"test142\")\n+    public void test142_verifier(RunInfo info) {\n@@ -3291,1 +3367,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -3316,1 +3392,0 @@\n-    @Warmup(0)\n@@ -3327,2 +3402,3 @@\n-    @DontCompile\n-    public void test143_verifier(boolean warmup) {\n+    @Run(test = \"test143\")\n+    @Warmup(0)\n+    public void test143_verifier() {\n@@ -3334,1 +3410,0 @@\n-    @Warmup(0)\n@@ -3347,2 +3422,3 @@\n-    @DontCompile\n-    public void test144_verifier(boolean warmup) {\n+    @Run(test = \"test144\")\n+    @Warmup(0)\n+    public void test144_verifier() {\n@@ -3358,2 +3434,2 @@\n-    @DontCompile\n-    public void test145_verifier(boolean warmup) {\n+    @Run(test = \"test145\")\n+    public void test145_verifier() {\n@@ -3366,2 +3442,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE)\n-    @Warmup(50000)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE})\n@@ -3380,2 +3456,3 @@\n-    @DontCompile\n-    public void test146_verifier(boolean warmup) {\n+    @Run(test = \"test146\")\n+    @Warmup(50000)\n+    public void test146_verifier() {\n@@ -3386,2 +3463,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE)\n-    @Warmup(50000)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE})\n@@ -3411,4 +3488,5 @@\n-    @DontCompile\n-    public void test147_verifier(boolean warmup) {\n-        int res = test147(!warmup);\n-        Asserts.assertEquals(res, MyValue2.createWithFieldsInline(rI, rD).x + (warmup ? 0 : 42));\n+    @Run(test = \"test147\")\n+    @Warmup(50000)\n+    public void test147_verifier(RunInfo info) {\n+        int res = test147(!info.isWarmUp());\n+        Asserts.assertEquals(res, MyValue2.createWithFieldsInline(rI, rD).x + (info.isWarmUp() ? 0 : 42));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":630,"deletions":552,"binary":false,"changes":1182,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -28,0 +29,5 @@\n+import java.lang.reflect.Method;\n+\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.*;\n+\n@@ -32,1 +38,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ *\n@@ -34,6 +40,3 @@\n- * @compile TestBasicFunctionality.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestBasicFunctionality\n+ * @library \/test\/lib \/\n+ * @compile InlineTypes.java\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestBasicFunctionality\n@@ -41,10 +44,0 @@\n-public class TestBasicFunctionality extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 2: return new String[] {\"-DVerifyIR=false\"};\n-        case 3: return new String[] {\"-XX:FlatArrayElementMaxSize=0\"};\n-        }\n-        return null;\n-    }\n@@ -52,4 +45,2 @@\n-    public static void main(String[] args) throws Throwable {\n-        TestBasicFunctionality test = new TestBasicFunctionality();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class, MyValue3.class, MyValue3Inline.class);\n-    }\n+@ForceCompileClassInitializer\n+public class TestBasicFunctionality {\n@@ -57,1 +48,14 @@\n-    \/\/ Helper methods\n+    public static void main(String[] args) {\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+        scenarios[2].addFlags(\"-DVerifyIR=false\");\n+        scenarios[3].addFlags(\"-XX:FlatArrayElementMaxSize=0\");\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class,\n+                                     MyValue3.class,\n+                                     MyValue3Inline.class)\n+                   .start();\n+    }\n@@ -67,0 +71,1 @@\n+\n@@ -68,1 +73,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -74,2 +80,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -80,0 +86,1 @@\n+\n@@ -81,1 +88,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -86,2 +94,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -93,0 +101,1 @@\n+\n@@ -94,2 +103,6 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, match = {ALLOC, STORE}, matchCount = {1, 14}, failOn = LOAD + TRAP)\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        counts = {ALLOC, \"= 1\", STORE, \"= 14\"},\n+        failOn = {LOAD, TRAP})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -100,2 +113,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -110,1 +123,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -116,2 +130,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -124,1 +138,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -135,2 +150,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -143,2 +158,6 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = LOAD + TRAP + ALLOC)\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC}, matchCount = {1}, failOn = LOAD + TRAP)\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        failOn = {LOAD, TRAP, ALLOC})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        counts = {ALLOC, \"= 1\"},\n+        failOn = {LOAD, TRAP})\n@@ -151,2 +170,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -159,1 +178,3 @@\n-    @Test(match = {ALLOC}, matchCount = {1}, failOn = LOAD + TRAP)\n+    @Test\n+    @IR(counts = {ALLOC, \"= 1\"},\n+        failOn = {LOAD, TRAP})\n@@ -164,2 +185,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n@@ -171,1 +192,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -182,2 +204,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() {\n@@ -189,2 +211,7 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, match = {LOAD}, matchCount = {14}, failOn = TRAP + ALLOC + STORE)\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC, STORE}, matchCount = {1, 13}, failOn = LOAD + TRAP)\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        counts = {LOAD, \"= 14\"},\n+        failOn = {TRAP, ALLOC, STORE})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        counts = {ALLOC, \"= 1\", STORE, \"= 13\"},\n+        failOn = {LOAD, TRAP})\n@@ -214,2 +241,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n@@ -225,1 +252,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -234,2 +262,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() {\n@@ -241,1 +269,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -250,2 +279,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    public void test11_verifier() {\n@@ -257,1 +286,3 @@\n-    @Test(match = {SCOBJ}, matchCount = {-1 \/* at least 1 *\/}, failOn = LOAD)\n+    @Test\n+    @IR(counts = {SCOBJ, \">= 1\"}, \/\/ at least 1\n+        failOn = LOAD)\n@@ -280,4 +311,4 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n-        long result = test12(warmup);\n-        Asserts.assertEQ(result, warmup ? rL + (1000 * rI) : ((Math.abs(rI) % 10) + 1) * hash());\n+    @Run(test = \"test12\")\n+    public void test12_verifier(RunInfo info) {\n+        long result = test12(info.isWarmUp());\n+        Asserts.assertEQ(result, info.isWarmUp() ? rL + (1000 * rI) : ((Math.abs(rI) % 10) + 1) * hash());\n@@ -310,4 +341,4 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n-        long result = test13(warmup);\n-        Asserts.assertEQ(result, warmup ? rL + (1000 * rI) : ((Math.abs(rI) % 10) + 1) * hash());\n+    @Run(test = \"test13\")\n+    public void test13_verifier(RunInfo info) {\n+        long result = test13(info.isWarmUp());\n+        Asserts.assertEQ(result, info.isWarmUp() ? rL + (1000 * rI) : ((Math.abs(rI) % 10) + 1) * hash());\n@@ -318,2 +349,6 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = (ALLOC + STORE + TRAP), match = {LOAD}, matchCount = {14})\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, failOn = (ALLOC + LOAD + STORE + TRAP))\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        failOn = {ALLOC, STORE, TRAP},\n+        counts = {LOAD, \"= 14\"})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -325,2 +360,2 @@\n-    @DontCompile\n-    public void test14_verifier(boolean b) {\n+    @Run(test = \"test14\")\n+    public void test14_verifier() {\n@@ -333,2 +368,6 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = (LOAD + TRAP + ALLOC))\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, failOn = (LOAD + TRAP), match = {ALLOC}, matchCount = {1})\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        failOn = {LOAD, TRAP, ALLOC})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        failOn = {LOAD, TRAP},\n+        counts = {ALLOC, \"= 1\"})\n@@ -340,2 +379,2 @@\n-    @DontCompile\n-    public void test15_verifier(boolean b) {\n+    @Run(test = \"test15\")\n+    public void test15_verifier() {\n@@ -348,1 +387,2 @@\n-    @Test(failOn = (ALLOC + STORE + TRAP))\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -354,2 +394,2 @@\n-    @DontCompile\n-    public void test16_verifier(boolean b) {\n+    @Run(test = \"test16\")\n+    public void test16_verifier() {\n@@ -362,1 +402,2 @@\n-    @Test(failOn = (ALLOC + LOAD + STORE + TRAP))\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -368,2 +409,2 @@\n-    @DontCompile\n-    public void test17_verifier(boolean b) {\n+    @Run(test = \"test17\")\n+    public void test17_verifier() {\n@@ -377,2 +418,6 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = ALLOC + LOAD + TRAP)\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC}, matchCount = {1}, failOn = LOAD + TRAP)\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        failOn = {ALLOC, LOAD, TRAP})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        counts = {ALLOC, \"= 1\"},\n+        failOn = {LOAD, TRAP})\n@@ -385,2 +430,2 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    public void test18_verifier() {\n@@ -394,2 +439,6 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = ALLOC + LOAD + TRAP)\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC}, matchCount = {1}, failOn = LOAD + TRAP)\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        failOn = {ALLOC, LOAD, TRAP})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        counts = {ALLOC, \"= 1\"},\n+        failOn = {LOAD, TRAP})\n@@ -406,2 +455,2 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    public void test19_verifier() {\n@@ -416,3 +465,7 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = LOAD + ALLOC + STORE)\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC}, matchCount = {1}, failOn = LOAD)\n-    public long test20(boolean deopt) {\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"true\"},\n+        failOn = {LOAD, ALLOC, STORE})\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        counts = {ALLOC, \"= 1\"},\n+        failOn = LOAD)\n+    public long test20(boolean deopt, Method m) {\n@@ -423,1 +476,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test20\"));\n+            TestFramework.deoptimize(m);\n@@ -425,0 +478,1 @@\n+\n@@ -426,1 +480,1 @@\n-                va[1].hashInterpreted() + va[2].hashInterpreted();\n+               va[1].hashInterpreted() + va[2].hashInterpreted();\n@@ -429,2 +483,2 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    public void test20_verifier(RunInfo info) {\n@@ -432,1 +486,1 @@\n-        long result = test20(!warmup);\n+        long result = test20(!info.isWarmUp(), info.getTest());\n@@ -444,1 +498,3 @@\n-    @Test(match = {ALLOC}, matchCount = {1}, failOn = (TRAP))\n+    @Test\n+    @IR(counts = {ALLOC, \"= 1\"},\n+        failOn = TRAP)\n@@ -455,2 +511,2 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    public void test21_verifier() {\n@@ -473,1 +529,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n@@ -479,2 +536,2 @@\n-    @DontCompile\n-    public void test22_verifier(boolean warmup) {\n+    @Run(test = \"test22\")\n+    public void test22_verifier() {\n@@ -486,1 +543,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n@@ -492,2 +550,2 @@\n-    @DontCompile\n-    public void test23_verifier(boolean warmup) {\n+    @Run(test = \"test23\")\n+    public void test23_verifier() {\n@@ -499,1 +557,2 @@\n-    @Test(failOn = ALLOC + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, LOOP, TRAP})\n@@ -506,2 +565,2 @@\n-    @DontCompile\n-    public void test24_verifier(boolean warmup) {\n+    @Run(test = \"test24\")\n+    public void test24_verifier() {\n@@ -513,1 +572,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n@@ -519,2 +579,2 @@\n-    @DontCompile\n-    public void test25_verifier(boolean warmup) {\n+    @Run(test = \"test25\")\n+    public void test25_verifier() {\n@@ -526,1 +586,2 @@\n-    @Test(failOn = ALLOC + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, LOOP, TRAP})\n@@ -533,2 +594,2 @@\n-    @DontCompile\n-    public void test26_verifier(boolean warmup) {\n+    @Run(test = \"test26\")\n+    public void test26_verifier() {\n@@ -544,2 +605,3 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + LOOP)\n-    public void test27(boolean deopt) {\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, LOOP})\n+    public void test27(boolean deopt, Method m) {\n@@ -551,1 +613,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test27\"));\n+            TestFramework.deoptimize(m);\n@@ -555,3 +617,3 @@\n-    @DontCompile\n-    public void test27_verifier(boolean warmup) {\n-        test27(!warmup);\n+    @Run(test = \"test27\")\n+    public void test27_verifier(RunInfo info) {\n+        test27(!info.isWarmUp(), info.getTest());\n@@ -564,1 +626,2 @@\n-    @Test(match = {ALLOC}, matchCount = {1})\n+    @Test\n+    @IR(counts = {ALLOC, \"= 1\"})\n@@ -581,2 +644,2 @@\n-    @DontCompile\n-    public void test28_verifier(boolean warmup) {\n+    @Run(test = \"test28\")\n+    public void test28_verifier() {\n@@ -606,4 +669,4 @@\n-    @DontCompile\n-    public void test29_verifier(boolean warmup) {\n-        MyValue3 vt = test29(warmup);\n-        if (warmup) {\n+    @Run(test = \"test29\")\n+    public void test29_verifier(RunInfo info) {\n+        MyValue3 vt = test29(info.isWarmUp());\n+        if (info.isWarmUp()) {\n@@ -615,1 +678,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, STORE})\n@@ -625,2 +689,2 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) {\n+    @Run(test = \"test30\")\n+    public void test30_verifier() {\n@@ -635,2 +699,3 @@\n-    @Test(valid = InlineTypeReturnedAsFieldsOn)\n-    @Test(valid = InlineTypeReturnedAsFieldsOff, failOn = ALLOC + ALLOCA + STORE)\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        failOn = {ALLOC, ALLOCA, STORE})\n@@ -647,2 +712,2 @@\n-    @DontCompile\n-    public void test31_verifier(boolean warmup) {\n+    @Run(test = \"test31\")\n+    public void test31_verifier() {\n@@ -656,2 +721,3 @@\n-    @Test(valid = InlineTypePassFieldsAsArgsOn)\n-    @Test(valid = InlineTypePassFieldsAsArgsOff, failOn = ALLOC + ALLOCA + STORE)\n+    @Test\n+    @IR(applyIf = {\"InlineTypePassFieldsAsArgs\", \"false\"},\n+        failOn = {ALLOC, ALLOCA, STORE})\n@@ -667,2 +733,2 @@\n-    @DontCompile\n-    public void test32_verifier(boolean warmup) {\n+    @Run(test = \"test32\")\n+    public void test32_verifier() {\n@@ -678,1 +744,1 @@\n-    @Test()\n+    @Test\n@@ -689,2 +755,2 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) {\n+    @Run(test = \"test33\")\n+    public void test33_verifier() {\n@@ -701,1 +767,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE, LOOP, TRAP})\n@@ -717,2 +784,2 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n+    @Run(test = \"test34\")\n+    public void test34_verifier() {\n@@ -732,1 +799,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE, LOOP, TRAP})\n@@ -753,2 +821,2 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) {\n+    @Run(test = \"test35\")\n+    public void test35_verifier() {\n@@ -770,1 +838,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -782,2 +851,2 @@\n-    @DontCompile\n-    public void test36_verifier(boolean warmup) {\n+    @Run(test = \"test36\")\n+    public void test36_verifier() {\n@@ -805,2 +874,2 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) {\n+    @Run(test = \"test37\")\n+    public void test37_verifier() {\n@@ -831,2 +900,2 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n+    @Run(test = \"test38\")\n+    public void test38_verifier() {\n@@ -856,1 +925,0 @@\n-    @Warmup(10)\n@@ -861,15 +929,15 @@\n-            case 0:\n-                test39A1[i][i] = i;\n-                break;\n-            case 1:\n-                for (int j = 0; j < 100; ++j) {\n-                    test39A1[i] = getArray();\n-                    test39Val = new Test39Value(j, test39Val.iFld2);\n-                }\n-                break;\n-            case 2:\n-                for (float f = 142; f > i; f--) {\n-                    test39A2[i + 1] += 3;\n-                }\n-                result += test39Val.iFld1;\n-                break;\n+                case 0:\n+                    test39A1[i][i] = i;\n+                    break;\n+                case 1:\n+                    for (int j = 0; j < 100; ++j) {\n+                        test39A1[i] = getArray();\n+                        test39Val = new Test39Value(j, test39Val.iFld2);\n+                    }\n+                    break;\n+                case 2:\n+                    for (float f = 142; f > i; f--) {\n+                        test39A2[i + 1] += 3;\n+                    }\n+                    result += test39Val.iFld1;\n+                    break;\n@@ -886,2 +954,3 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n+    @Run(test = \"test39\")\n+    @Warmup(10)\n+    public void test39_verifier() {\n@@ -905,4 +974,4 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) {\n-        long result = test40(warmup);\n-        Asserts.assertEQ(result, warmup ? 0 : hash());\n+    @Run(test = \"test40\")\n+    public void test40_verifier(RunInfo info) {\n+        long result = test40(info.isWarmUp());\n+        Asserts.assertEQ(result, info.isWarmUp() ? 0 : hash());\n@@ -910,0 +979,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":248,"deletions":178,"binary":false,"changes":426,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-\n@@ -27,4 +26,4 @@\n-import java.lang.invoke.*;\n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n-\n+import compiler.lib.ir_framework.CompLevel;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.Test;\n@@ -33,0 +32,3 @@\n+import static compiler.valhalla.inlinetypes.InlineTypes.rI;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rL;\n+\n@@ -37,1 +39,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -40,5 +42,1 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestC1\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestC1\n@@ -46,8 +44,0 @@\n-public class TestC1 extends InlineTypeTest {\n-    public static final int C1 = COMP_LEVEL_SIMPLE;\n-    public static final int C2 = COMP_LEVEL_FULL_OPTIMIZATION;\n-\n-    public static void main(String[] args) throws Throwable {\n-        TestC1 test = new TestC1();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class, MyValue3.class, MyValue3Inline.class);\n-    }\n@@ -55,20 +45,12 @@\n-    @Override\n-    public int getNumScenarios() {\n-        return 5;\n-    }\n-\n-    @Override\n-    public String[] getVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 0: return new String[] { \/\/ C1 only\n-                \"-XX:TieredStopAtLevel=1\",\n-                \"-XX:+TieredCompilation\",\n-            };\n-        case 1: return new String[] { \/\/ C2 only. (Make sure the tests are correctly written)\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:-TieredCompilation\",\n-            };\n-        case 2: return new String[] { \/\/ interpreter only\n-                \"-Xint\",\n-            };\n-        case 3: return new String[] {\n+public class TestC1 {\n+    public static void main(String[] args) {\n+        final Scenario[] scenarios = {\n+                \/\/ C1 only\n+                new Scenario(0,\n+                             \"-XX:TieredStopAtLevel=1\", \"-XX:+TieredCompilation\"),\n+                \/\/ C2 only. (Make sure the tests are correctly written)\n+                new Scenario(1,\n+                             \"-XX:TieredStopAtLevel=4\", \"-XX:-TieredCompilation\"),\n+                \/\/ interpreter only\n+                new Scenario(2,\n+                             \"-Xint\"),\n@@ -76,5 +58,2 @@\n-                \"-XX:TieredStopAtLevel=1\",\n-                \"-XX:+TieredCompilation\",\n-                \"-Xcomp\",\n-            };\n-        case 4: return new String[] {\n+                new Scenario(3,\n+                             \"-XX:TieredStopAtLevel=1\", \"-XX:+TieredCompilation\", \"-Xcomp\"),\n@@ -82,6 +61,12 @@\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:-TieredCompilation\",\n-                \"-Xcomp\",\n-            };\n-        }\n-        return null;\n+                new Scenario(4,\n+                             \"-XX:TieredStopAtLevel=4\", \"-XX:-TieredCompilation\", \"-Xcomp\")\n+        };\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class,\n+                                     MyValue3.class,\n+                                     MyValue3Inline.class)\n+                   .start();\n@@ -91,1 +76,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -99,2 +84,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -119,1 +104,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -124,2 +109,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -137,1 +122,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -142,2 +127,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -154,1 +139,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -159,2 +144,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -179,1 +164,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -184,2 +169,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -194,1 +179,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -199,2 +184,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -253,1 +238,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -258,2 +243,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n@@ -270,1 +255,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -275,2 +260,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() {\n@@ -293,1 +278,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -299,2 +284,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n@@ -305,1 +290,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -310,2 +295,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() {\n@@ -317,1 +302,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -322,2 +307,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    public void test11_verifier() {\n@@ -348,1 +333,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -353,2 +338,2 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n+    @Run(test = \"test12\")\n+    public void test12_verifier() {\n@@ -379,1 +364,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":72,"deletions":88,"binary":false,"changes":160,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -28,1 +29,3 @@\n-import java.lang.invoke.*;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n@@ -31,0 +34,3 @@\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.*;\n+\n@@ -35,1 +41,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -37,6 +43,1 @@\n- * @compile TestCallingConvention.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestCallingConvention\n+ * @run driver\/timeout=450 compiler.valhalla.inlinetypes.TestCallingConvention\n@@ -44,12 +45,3 @@\n-public class TestCallingConvention extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 0: return new String[] {\"-Dsun.reflect.inflationThreshold=10000\"}; \/\/ Don't generate bytecodes but call through runtime for reflective calls\n-        case 1: return new String[] {\"-Dsun.reflect.inflationThreshold=10000\"};\n-        case 3: return new String[] {\"-XX:FlatArrayElementMaxSize=0\"};\n-        case 4: return new String[] {\"-XX:-UseTLAB\"};\n-        }\n-        return null;\n-    }\n+\n+@ForceCompileClassInitializer\n+public class TestCallingConvention {\n@@ -76,4 +68,28 @@\n-    public static void main(String[] args) throws Throwable {\n-        TestCallingConvention test = new TestCallingConvention();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class, MyValue3.class, MyValue3Inline.class, MyValue4.class,\n-                 Test27Value1.class, Test27Value2.class, Test27Value3.class, Test37Value.class, EmptyContainer.class, MixedContainer.class);\n+    public static void main(String[] args) {\n+\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+        \/\/ Don't generate bytecodes but call through runtime for reflective calls\n+        scenarios[0].addFlags(\"-Dsun.reflect.inflationThreshold=10000\");\n+        scenarios[1].addFlags(\"-Dsun.reflect.inflationThreshold=10000\");\n+        scenarios[3].addFlags(\"-XX:FlatArrayElementMaxSize=0\");\n+        scenarios[4].addFlags(\"-XX:-UseTLAB\");\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class,\n+                                     MyValue3.class,\n+                                     MyValue3Inline.class,\n+                                     MyValue4.class)\n+                   .start();\n+    }\n+\n+    \/\/ Helper methods and classes\n+\n+    private void deoptimize(String name, Class<?>... params) {\n+        try {\n+            TestFramework.deoptimize(getClass().getDeclaredMethod(name, params));\n+        } catch (NoSuchMethodException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -83,1 +99,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -88,2 +105,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -95,1 +112,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -100,2 +118,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -107,1 +125,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -112,2 +131,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -119,1 +138,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -124,2 +144,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -131,1 +151,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -136,2 +157,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -143,1 +164,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -148,2 +170,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -162,1 +184,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -167,2 +190,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n@@ -179,1 +202,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -184,2 +208,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() {\n@@ -196,1 +220,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -201,2 +226,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n@@ -213,1 +238,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -218,2 +244,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() {\n@@ -230,1 +256,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -235,2 +262,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    public void test11_verifier() {\n@@ -247,1 +274,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -252,2 +280,2 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n+    @Run(test = \"test12\")\n+    public void test12_verifier() {\n@@ -265,1 +293,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test13\"));\n+            deoptimize(\"test13\", MyValue2.class, MyValue1[].class, boolean.class, long.class);\n@@ -270,1 +298,2 @@\n-    @Test(failOn = ALLOC + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, TRAP})\n@@ -275,2 +304,2 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n+    @Run(test = \"test13\")\n+    public void test13_verifier(RunInfo info) {\n@@ -281,1 +310,1 @@\n-        long result = test13(v, va, !warmup, rL);\n+        long result = test13(v, va, !info.isWarmUp(), rL);\n@@ -290,1 +319,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test14\"));\n+            deoptimize(\"test14\", boolean.class);\n@@ -295,1 +324,1 @@\n-    @Test()\n+    @Test\n@@ -300,3 +329,3 @@\n-    @DontCompile\n-    public void test14_verifier(boolean warmup) {\n-        MyValue2 result = test14(!warmup);\n+    @Run(test = \"test14\")\n+    public void test14_verifier(RunInfo info) {\n+        MyValue2 result = test14(!info.isWarmUp());\n@@ -315,2 +344,3 @@\n-    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + LOAD + TRAP)\n-    @Test(valid = InlineTypeReturnedAsFieldsOff)\n+    @Test\n+    @IR(applyIf = {\"InlineTypeReturnedAsFields\", \"true\"},\n+        failOn = {ALLOC, LOAD, TRAP})\n@@ -321,2 +351,2 @@\n-    @DontCompile\n-    public void test15_verifier(boolean warmup) {\n+    @Run(test = \"test15\")\n+    public void test15_verifier() {\n@@ -329,2 +359,3 @@\n-    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + STORE + TRAP)\n-    @Test(valid = InlineTypeReturnedAsFieldsOff)\n+    @Test\n+    @IR(applyIf = {\"InlineTypeReturnedAsFields\", \"true\"},\n+        failOn = {ALLOC, STORE, TRAP})\n@@ -335,2 +366,2 @@\n-    @DontCompile\n-    public void test16_verifier(boolean warmup) {\n+    @Run(test = \"test16\")\n+    public void test16_verifier() {\n@@ -349,2 +380,3 @@\n-    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + LOAD + TRAP)\n-    @Test(valid = InlineTypeReturnedAsFieldsOff)\n+    @Test\n+    @IR(applyIf = {\"InlineTypeReturnedAsFields\", \"true\"},\n+            failOn = {ALLOC, LOAD, TRAP})\n@@ -355,2 +387,2 @@\n-    @DontCompile\n-    public void test17_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test17\")\n+    public void test17_verifier(RunInfo info) throws Exception {\n@@ -358,3 +390,3 @@\n-        if (!warmup && USE_COMPILER && !WHITE_BOX.isMethodCompiled(helper_m, false)) {\n-            enqueueMethodForCompilation(helper_m, COMP_LEVEL_FULL_OPTIMIZATION);\n-            Asserts.assertTrue(WHITE_BOX.isMethodCompiled(helper_m, false), \"test17_comp not compiled\");\n+        if (!info.isWarmUp() && TestFramework.isCompiled(helper_m)) {\n+            TestFramework.compile(helper_m, CompLevel.C2);\n+            TestFramework.assertCompiledByC2(helper_m);\n@@ -362,0 +394,1 @@\n+\n@@ -381,2 +414,2 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    public void test18_verifier() {\n@@ -394,2 +427,2 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    public void test19_verifier() {\n@@ -413,2 +446,2 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test20\")\n+    public void test20_verifier(RunInfo info) throws Exception {\n@@ -416,3 +449,3 @@\n-        if (!warmup && USE_COMPILER && !WHITE_BOX.isMethodCompiled(helper_m, false)) {\n-            enqueueMethodForCompilation(helper_m, COMP_LEVEL_FULL_OPTIMIZATION);\n-            Asserts.assertTrue(WHITE_BOX.isMethodCompiled(helper_m, false), \"test20_comp not compiled\");\n+        if (!info.isWarmUp() && TestFramework.isCompiled(helper_m)) {\n+            TestFramework.compile(helper_m, CompLevel.C2);\n+            TestFramework.assertCompiledByC2(helper_m);\n@@ -439,2 +472,2 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    public void test21_verifier() {\n@@ -453,2 +486,2 @@\n-    @DontCompile\n-    public void test22_verifier(boolean warmup) {\n+    @Run(test = \"test22\")\n+    public void test22_verifier() {\n@@ -482,2 +515,2 @@\n-    @DontCompile\n-    public void test23_verifier(boolean warmup) {\n+    @Run(test = \"test23\")\n+    public void test23_verifier() {\n@@ -502,2 +535,2 @@\n-    @DontCompile\n-    public void test24_verifier(boolean warmup) {\n+    @Run(test = \"test24\")\n+    public void test24_verifier() {\n@@ -523,2 +556,2 @@\n-    @DontCompile\n-    public void test26_verifier(boolean warmup) {\n+    @Run(test = \"test26\")\n+    public void test26_verifier() {\n@@ -576,2 +609,2 @@\n-    @DontCompile\n-    public void test27_verifier(boolean warmup) {\n+    @Run(test = \"test27\")\n+    public void test27_verifier() {\n@@ -588,1 +621,0 @@\n-    @Warmup(0)\n@@ -593,2 +625,3 @@\n-    @DontCompile\n-    public void test28_verifier(boolean warmup) {\n+    @Run(test = \"test28\")\n+    @Warmup(0)\n+    public void test28_verifier() {\n@@ -606,2 +639,2 @@\n-    @DontCompile\n-    public void test29_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test29\")\n+    public void test29_verifier() throws Exception {\n@@ -619,2 +652,2 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test30\")\n+    public void test30_verifier() throws Exception {\n@@ -635,2 +668,2 @@\n-    @DontCompile\n-    public void test31_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test31\")\n+    public void test31_verifier() throws Exception {\n@@ -649,1 +682,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test32\"));\n+            deoptimize(\"test32\", boolean.class);\n@@ -659,3 +692,3 @@\n-    @DontCompile\n-    public void test32_verifier(boolean warmup) throws Throwable {\n-        MyValue2 result = test32(!warmup);\n+    @Run(test = \"test32\")\n+    public void test32_verifier(RunInfo info) throws Throwable {\n+        MyValue2 result = test32(!info.isWarmUp());\n@@ -673,1 +706,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test33\"));\n+            deoptimize(\"test33\", boolean.class);\n@@ -684,3 +717,3 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) throws Throwable {\n-        MyValue2 result = test33(!warmup);\n+    @Run(test = \"test33\")\n+    public void test33_verifier(RunInfo info) throws Throwable {\n+        MyValue2 result = test33(!info.isWarmUp());\n@@ -713,1 +746,0 @@\n-    @Warmup(10000) \/\/ Make sure test34_callee is compiled\n@@ -718,2 +750,3 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n+    @Run(test = \"test34\")\n+    @Warmup(10000) \/\/ Make sure test34_callee is compiled\n+    public void test34_verifier(RunInfo info) {\n@@ -723,1 +756,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -743,2 +776,2 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) {\n+    @Run(test = \"test35\")\n+    public void test35_verifier() {\n@@ -762,2 +795,2 @@\n-    @DontCompile\n-    public void test36_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test36\")\n+    public void test36_verifier() throws Exception {\n@@ -786,2 +819,2 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test37\")\n+    public void test37_verifier() throws Throwable {\n@@ -794,1 +827,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -799,2 +833,2 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n+    @Run(test = \"test38\")\n+    public void test38_verifier() {\n@@ -887,2 +921,2 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n+    @Run(test = \"test39\")\n+    public void test39_verifier() {\n@@ -900,2 +934,2 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) {\n+    @Run(test = \"test40\")\n+    public void test40_verifier() {\n@@ -909,1 +943,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -914,2 +949,2 @@\n-    @DontCompile\n-    public void test41_verifier(boolean warmup) {\n+    @Run(test = \"test41\")\n+    public void test41_verifier() {\n@@ -953,1 +988,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -959,2 +995,2 @@\n-    @DontCompile\n-    public void test42_verifier(boolean warmup) {\n+    @Run(test = \"test42\")\n+    public void test42_verifier() {\n@@ -966,1 +1002,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -971,2 +1008,2 @@\n-    @DontCompile\n-    public void test43_verifier(boolean warmup) {\n+    @Run(test = \"test43\")\n+    public void test43_verifier() {\n@@ -978,1 +1015,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -985,2 +1023,2 @@\n-    @DontCompile\n-    public void test44_verifier(boolean warmup) {\n+    @Run(test = \"test44\")\n+    public void test44_verifier() {\n@@ -992,1 +1030,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -997,2 +1036,2 @@\n-    @DontCompile\n-    public void test45_verifier(boolean warmup) {\n+    @Run(test = \"test45\")\n+    public void test45_verifier() {\n@@ -1004,1 +1043,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -1010,2 +1050,2 @@\n-    @DontCompile\n-    public void test46_verifier(boolean warmup) {\n+    @Run(test = \"test46\")\n+    public void test46_verifier() {\n@@ -1017,1 +1057,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -1022,2 +1063,2 @@\n-    @DontCompile\n-    public void test47_verifier(boolean warmup) {\n+    @Run(test = \"test47\")\n+    public void test47_verifier() {\n@@ -1029,1 +1070,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -1034,2 +1076,2 @@\n-    @DontCompile\n-    public void test48_verifier(boolean warmup) {\n+    @Run(test = \"test48\")\n+    public void test48_verifier() {\n@@ -1058,2 +1100,2 @@\n-    @DontCompile\n-    public void test49_verifier(boolean warmup) {\n+    @Run(test = \"test49\")\n+    public void test49_verifier() {\n@@ -1086,2 +1128,2 @@\n-    @DontCompile\n-    public void test50_verifier(boolean warmup) {\n+    @Run(test = \"test50\")\n+    public void test50_verifier() {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":211,"deletions":169,"binary":false,"changes":380,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import sun.hotspot.WhiteBox;\n+import compiler.lib.ir_framework.*;\n@@ -28,0 +28,4 @@\n+import sun.hotspot.WhiteBox;\n+\n+import static compiler.valhalla.inlinetypes.InlineTypes.rI;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rL;\n@@ -33,1 +37,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -35,6 +39,1 @@\n- * @compile TestCallingConventionC1.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestCallingConventionC1\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestCallingConventionC1\n@@ -42,3 +41,0 @@\n-public class TestCallingConventionC1 extends InlineTypeTest {\n-    public static final int C1 = COMP_LEVEL_SIMPLE;\n-    public static final int C2 = COMP_LEVEL_FULL_OPTIMIZATION;\n@@ -46,4 +42,2 @@\n-    @Override\n-    public int getNumScenarios() {\n-        return 5;\n-    }\n+@ForceCompileClassInitializer\n+public class TestCallingConventionC1 {\n@@ -51,4 +45,2 @@\n-    @Override\n-    public String[] getVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 0: return new String[] {\n+    public static void main(String[] args) {\n+        final Scenario[] scenarios = {\n@@ -56,5 +48,4 @@\n-                \"-XX:CICompilerCount=2\",\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:+TieredCompilation\",\n-            };\n-        case 1: return new String[] {\n+                new Scenario(0,\n+                             \"-XX:CICompilerCount=2\",\n+                             \"-XX:TieredStopAtLevel=4\",\n+                             \"-XX:+TieredCompilation\"),\n@@ -62,7 +53,7 @@\n-                \"-XX:CICompilerCount=2\",\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:+TieredCompilation\",\n-                \"-XX:+StressInlineTypeReturnedAsFields\"\n-            };\n-        case 2: return new String[] {\n-                \/\/ Same as above, but flip all the compLevel=C1 and compLevel=C2, so we test\n+                new Scenario(1,\n+                             \"-XX:CICompilerCount=2\",\n+                             \"-XX:TieredStopAtLevel=4\",\n+                             \"-XX:+TieredCompilation\",\n+                             \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                             \"-XX:+StressInlineTypeReturnedAsFields\"),\n+                \/\/ Same as above, but flip all the compLevel=CompLevel.C1_SIMPLE and compLevel=CompLevel.C2, so we test\n@@ -70,6 +61,5 @@\n-                \"-XX:CICompilerCount=2\",\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:+TieredCompilation\",\n-                \"-DFlipC1C2=true\"\n-            };\n-        case 3: return new String[] {\n+                new Scenario(2,\n+                             \"-XX:CICompilerCount=2\",\n+                             \"-XX:TieredStopAtLevel=4\",\n+                             \"-XX:+TieredCompilation\",\n+                             \"-DFlipC1C2=true\"),\n@@ -77,4 +67,3 @@\n-                \"-XX:TieredStopAtLevel=1\",\n-                \"-XX:+TieredCompilation\",\n-            };\n-        case 4: return new String[] {\n+                new Scenario(3,\n+                             \"-XX:TieredStopAtLevel=1\",\n+                             \"-XX:+TieredCompilation\"),\n@@ -82,6 +71,4 @@\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:-TieredCompilation\",\n-            };\n-        }\n-        return null;\n-    }\n+                new Scenario(4,\n+                             \"-XX:TieredStopAtLevel=4\",\n+                             \"-XX:-TieredCompilation\")\n+        };\n@@ -89,1 +76,0 @@\n-    public static void main(String[] args) throws Throwable {\n@@ -91,21 +77,4 @@\n-        TestCallingConventionC1 test = new TestCallingConventionC1();\n-        test.run(args,\n-                 Point.class,\n-                 Functor.class,\n-                 Functor1.class,\n-                 Functor2.class,\n-                 Functor3.class,\n-                 Functor4.class,\n-                 MyImplPojo0.class,\n-                 MyImplPojo1.class,\n-                 MyImplPojo2.class,\n-                 MyImplPojo3.class,\n-                 MyImplVal1.class,\n-                 MyImplVal2.class,\n-                 MyImplVal1X.class,\n-                 MyImplVal2X.class,\n-                 FixedPoints.class,\n-                 FloatPoint.class,\n-                 RefPoint.class,\n-                 RefPoint_Access_Impl1.class,\n-                 RefPoint_Access_Impl2.class);\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .start();\n@@ -114,0 +83,2 @@\n+    \/\/ Helper methods and classes\n+\n@@ -123,1 +94,0 @@\n-        @DontInline\n@@ -128,1 +98,1 @@\n-        @ForceCompile(compLevel = C1)\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -141,1 +111,0 @@\n-        @DontInline\n@@ -146,0 +115,1 @@\n+\n@@ -148,1 +118,0 @@\n-        @DontInline\n@@ -153,0 +122,1 @@\n+\n@@ -155,1 +125,0 @@\n-        @DontInline\n@@ -160,0 +129,1 @@\n+\n@@ -162,1 +132,0 @@\n-        @DontInline\n@@ -167,0 +136,1 @@\n+\n@@ -169,1 +139,0 @@\n-        @DontInline\n@@ -199,1 +168,1 @@\n-        @DontInline @DontCompile\n+        @DontCompile\n@@ -201,1 +170,1 @@\n-        @DontInline @DontCompile\n+        @DontCompile\n@@ -208,1 +177,2 @@\n-        @DontInline @ForceCompile(compLevel = C1)\n+        @DontInline\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -210,1 +180,3 @@\n-        @DontInline @ForceCompile(compLevel = C1)\n+\n+        @DontInline\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -217,1 +189,2 @@\n-        @DontInline @ForceCompile(compLevel = C2)\n+        @DontInline\n+        @ForceCompile(CompLevel.C2)\n@@ -219,1 +192,3 @@\n-        @DontInline @ForceCompile(compLevel = C2)\n+\n+        @DontInline\n+        @ForceCompile(CompLevel.C2)\n@@ -237,2 +212,3 @@\n-        @DontInline @ForceCompile(compLevel = C1)\n-        public int func1(int a, int b)             { return field + a + b + 300; }\n+        @DontInline\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n+        public int func1(int a, int b) { return field + a + b + 300; }\n@@ -240,1 +216,2 @@\n-        @DontInline @ForceCompile(compLevel = C1)\n+        @DontInline\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -250,1 +227,2 @@\n-        @DontInline @ForceCompile(compLevel = C2)\n+        @DontInline\n+        @ForceCompile(CompLevel.C2)\n@@ -253,1 +231,2 @@\n-        @DontInline @ForceCompile(compLevel = C2)\n+        @DontInline\n+        @ForceCompile(CompLevel.C2)\n@@ -263,1 +242,1 @@\n-        @DontInline @DontCompile\n+        @DontCompile\n@@ -266,1 +245,1 @@\n-        @DontInline @DontCompile\n+        @DontCompile\n@@ -314,0 +293,1 @@\n+\n@@ -368,1 +348,1 @@\n-        @ForceCompile(compLevel = C1)\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -374,1 +354,1 @@\n-        @ForceCompile(compLevel = C1)\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -380,1 +360,1 @@\n-        @ForceCompile(compLevel = C1)\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -393,1 +373,1 @@\n-        @DontInline @DontCompile\n+        @DontCompile\n@@ -398,1 +378,1 @@\n-        @ForceCompile(compLevel = C1)\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -409,0 +389,1 @@\n+\n@@ -410,1 +391,1 @@\n-        @DontInline @DontCompile\n+        @DontCompile\n@@ -415,1 +396,1 @@\n-        @ForceCompile(compLevel = C1)\n+        @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -463,1 +444,0 @@\n-\n@@ -465,1 +445,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -470,1 +450,0 @@\n-    @DontInline\n@@ -476,3 +455,3 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 10;\n+    @Run(test = \"test1\")\n+    public void test1_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 10;\n@@ -485,1 +464,0 @@\n-\n@@ -487,1 +465,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -492,1 +470,0 @@\n-    @DontInline\n@@ -498,3 +475,3 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 10;\n+    @Run(test = \"test2\")\n+    public void test2_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 10;\n@@ -508,1 +485,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -513,3 +490,3 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 100;\n+    @Run(test = \"test3\")\n+    public void test3_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 100;\n@@ -517,1 +494,1 @@\n-            Functor functor = warmup ? functors[0] : getFunctor();\n+            Functor functor = info.isWarmUp() ? functors[0] : getFunctor();\n@@ -524,1 +501,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -529,3 +506,3 @@\n-    @DontCompile\n-    public void test3b_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 100;\n+    @Run(test = \"test3b\")\n+    public void test3b_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 100;\n@@ -533,1 +510,1 @@\n-            Functor functor = warmup ? functors[0] : getFunctor();\n+            Functor functor = info.isWarmUp() ? functors[0] : getFunctor();\n@@ -540,1 +517,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -545,3 +522,3 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 100;\n+    @Run(test = \"test4\")\n+    public void test4_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 100;\n@@ -549,1 +526,1 @@\n-            Functor functor = warmup ? functors[0] : getFunctor();\n+            Functor functor = info.isWarmUp() ? functors[0] : getFunctor();\n@@ -560,1 +537,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -565,2 +542,2 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    public void test20_verifier() {\n@@ -579,1 +556,0 @@\n-    @DontInline\n@@ -584,2 +560,2 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    public void test21_verifier() {\n@@ -597,1 +573,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -603,1 +579,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -608,3 +584,3 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test30\")\n+    public void test30_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -619,1 +595,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -625,1 +601,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -630,3 +606,3 @@\n-    @DontCompile\n-    public void test31_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test31\")\n+    public void test31_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -641,1 +617,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -647,1 +623,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -652,3 +628,3 @@\n-    @DontCompile\n-    public void test32_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test32\")\n+    public void test32_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -663,1 +639,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -668,3 +644,3 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test33\")\n+    public void test33_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -672,1 +648,1 @@\n-            Intf intf = warmup ? intfs[0] : getIntf(i+1);\n+            Intf intf = info.isWarmUp() ? intfs[0] : getIntf(i+1);\n@@ -679,1 +655,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -684,3 +660,3 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test34\")\n+    public void test34_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -688,1 +664,1 @@\n-            Intf intf = warmup ? intfs[0] : getIntf(i+1);\n+            Intf intf = info.isWarmUp() ? intfs[0] : getIntf(i+1);\n@@ -695,1 +671,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -701,1 +677,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -706,3 +682,3 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test35\")\n+    public void test35_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -717,1 +693,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -723,1 +699,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -728,3 +704,3 @@\n-    @DontCompile\n-    public void test36_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test36\")\n+    public void test36_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -739,1 +715,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -745,1 +721,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -750,3 +726,3 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test37\")\n+    public void test37_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -761,1 +737,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -767,1 +743,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -776,3 +752,3 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test38\")\n+    public void test38_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -787,1 +763,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -793,1 +769,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -802,3 +778,3 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test39\")\n+    public void test39_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -813,1 +789,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -819,1 +795,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -824,3 +800,3 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test40\")\n+    public void test40_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -835,1 +811,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -841,1 +817,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -846,3 +822,3 @@\n-    @DontCompile\n-    public void test41_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test41\")\n+    public void test41_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -857,1 +833,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -863,1 +839,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -876,3 +852,3 @@\n-    @DontCompile\n-    public void test42_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test42\")\n+    public void test42_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -887,1 +863,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -893,1 +869,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -901,3 +877,3 @@\n-    @DontCompile\n-    public void test43_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test43\")\n+    public void test43_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -912,1 +888,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -918,1 +894,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -929,3 +905,3 @@\n-    @DontCompile\n-    public void test44_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test44\")\n+    public void test44_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -940,1 +916,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -946,1 +922,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -956,3 +932,3 @@\n-    @DontCompile\n-    public void test45_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test45\")\n+    public void test45_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -967,1 +943,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -973,1 +949,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -985,3 +961,3 @@\n-    @DontCompile\n-    public void test46_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 2;\n+    @Run(test = \"test46\")\n+    public void test46_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 2;\n@@ -1015,1 +991,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1027,1 +1003,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1033,1 +1009,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -1042,3 +1018,3 @@\n-    @DontCompile\n-    public void test47_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test47\")\n+    public void test47_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1053,1 +1029,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1065,1 +1041,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1071,1 +1047,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -1078,3 +1054,3 @@\n-    @DontCompile\n-    public void test48_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test48\")\n+    public void test48_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1090,1 +1066,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1101,1 +1077,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -1107,1 +1083,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -1114,3 +1090,3 @@\n-    @DontCompile\n-    public void test49_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test49\")\n+    public void test49_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1124,1 +1100,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1136,1 +1112,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1142,1 +1118,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -1149,3 +1125,3 @@\n-    @DontCompile\n-    public void test50_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test50\")\n+    public void test50_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1160,1 +1136,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1166,1 +1142,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1171,3 +1147,3 @@\n-    @DontCompile\n-    public void test51_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test51\")\n+    public void test51_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1182,1 +1158,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1188,1 +1164,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1193,3 +1169,3 @@\n-    @DontCompile\n-    public void test52_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test52\")\n+    public void test52_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1204,1 +1180,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1210,1 +1186,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1218,3 +1194,3 @@\n-    @DontCompile\n-    public void test53_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test53\")\n+    public void test53_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1229,1 +1205,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1235,1 +1211,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1244,3 +1220,3 @@\n-    @DontCompile\n-    public void test54_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test54\")\n+    public void test54_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1254,4 +1230,0 @@\n-    static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n-    static final String ScavengeALot = \"ScavengeALot\";\n-\n-\n@@ -1265,2 +1237,0 @@\n-    static class ForceGCMarker implements java.io.Closeable {\n-        static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n@@ -1268,0 +1238,3 @@\n+    static final String ScavengeALot = \"ScavengeALot\";\n+\n+    static class ForceGCMarker implements java.io.Closeable {\n@@ -1269,1 +1242,1 @@\n-            WHITE_BOX.setBooleanVMFlag(ScavengeALot, true);\n+            WhiteBox.getWhiteBox().setBooleanVMFlag(ScavengeALot, true);\n@@ -1272,1 +1245,1 @@\n-            WHITE_BOX.setBooleanVMFlag(ScavengeALot, false);\n+            WhiteBox.getWhiteBox().setBooleanVMFlag(ScavengeALot, false);\n@@ -1281,1 +1254,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1287,1 +1260,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1292,3 +1265,3 @@\n-    @DontCompile\n-    public void test55_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test55\")\n+    public void test55_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1298,1 +1271,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -1307,1 +1280,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1313,1 +1286,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1318,3 +1291,3 @@\n-    @DontCompile\n-    public void test56_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test56\")\n+    public void test56_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1324,1 +1297,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -1332,2 +1305,2 @@\n-    \/\/ C2->Interpreter (same as test56, but test c2i entry instead of C1)\n-    @Test(compLevel = C2)\n+    \/\/ C2->Interpreter (same as test56, but test C2i entry instead of C1)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1338,1 +1311,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -1343,3 +1316,3 @@\n-    @DontCompile\n-    public void test57_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test57\")\n+    public void test57_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1349,1 +1322,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -1358,1 +1331,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1364,1 +1337,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1374,3 +1347,3 @@\n-    @DontCompile\n-    public void test58_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test58\")\n+    public void test58_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1385,1 +1358,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -1394,1 +1367,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1400,1 +1373,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1408,4 +1381,4 @@\n-    @DontCompile\n-    public void test59_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n-        boolean doGC = !warmup;\n+    @Run(test = \"test59\")\n+    public void test59_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n+        boolean doGC = !info.isWarmUp();\n@@ -1422,1 +1395,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1428,1 +1401,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1439,4 +1412,4 @@\n-    @DontCompile\n-    public void test60_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n-        boolean doGC = !warmup;\n+    @Run(test = \"test60\")\n+    public void test60_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n+        boolean doGC = !info.isWarmUp();\n@@ -1453,1 +1426,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1458,3 +1431,3 @@\n-    @DontCompile\n-    public void test61_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test61\")\n+    public void test61_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1471,1 +1444,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1476,3 +1449,3 @@\n-    @DontCompile\n-    public void test62_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test62\")\n+    public void test62_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1483,1 +1456,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -1492,1 +1465,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1497,3 +1470,3 @@\n-    @DontCompile\n-    public void test63_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test63\")\n+    public void test63_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1509,1 +1482,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -1518,1 +1491,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1524,1 +1497,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1529,3 +1502,3 @@\n-    @DontCompile\n-    public void test64_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test64\")\n+    public void test64_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1541,1 +1514,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -1550,1 +1523,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1555,3 +1528,3 @@\n-    @DontCompile\n-    public void test76_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test76\")\n+    public void test76_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1569,1 +1542,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1574,3 +1547,3 @@\n-    @DontCompile\n-    public void test77_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test77\")\n+    public void test77_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -1581,1 +1554,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -1593,1 +1566,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1600,1 +1573,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1605,2 +1578,2 @@\n-    @DontCompile\n-    public void test78_verifier(boolean warmup) {\n+    @Run(test = \"test78\")\n+    public void test78_verifier() {\n@@ -1613,1 +1586,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1620,1 +1593,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1625,2 +1598,2 @@\n-    @DontCompile\n-    public void test79_verifier(boolean warmup) {\n+    @Run(test = \"test79\")\n+    public void test79_verifier() {\n@@ -1633,1 +1606,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1640,1 +1613,1 @@\n-    @ForceCompile(compLevel = C2)\n+    @ForceCompile(CompLevel.C2)\n@@ -1645,2 +1618,2 @@\n-    @DontCompile\n-    public void test80_verifier(boolean warmup) {\n+    @Run(test = \"test80\")\n+    public void test80_verifier() {\n@@ -1653,1 +1626,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1658,2 +1631,2 @@\n-    @DontCompile\n-    public void test81_verifier(boolean warmup) {\n+    @Run(test = \"test81\")\n+    public void test81_verifier() {\n@@ -1669,1 +1642,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1675,1 +1648,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -1680,2 +1653,2 @@\n-    @DontCompile\n-    public void test82_verifier(boolean warmup) {\n+    @Run(test = \"test82\")\n+    public void test82_verifier() {\n@@ -1692,1 +1665,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1699,1 +1672,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1704,2 +1677,2 @@\n-    @DontCompile\n-    public void test83_verifier(boolean warmup) {\n+    @Run(test = \"test83\")\n+    public void test83_verifier() {\n@@ -1712,1 +1685,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1719,1 +1692,1 @@\n-    @ForceCompile(compLevel = C2)\n+    @ForceCompile(CompLevel.C2)\n@@ -1724,2 +1697,2 @@\n-    @DontCompile\n-    public void test84_verifier(boolean warmup) {\n+    @Run(test = \"test84\")\n+    public void test84_verifier() {\n@@ -1732,1 +1705,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1737,2 +1710,2 @@\n-    @DontCompile\n-    public void test85_verifier(boolean warmup) {\n+    @Run(test = \"test85\")\n+    public void test85_verifier() {\n@@ -1745,1 +1718,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1751,1 +1724,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -1756,2 +1729,2 @@\n-    @DontCompile\n-    public void test86_verifier(boolean warmup) {\n+    @Run(test = \"test86\")\n+    public void test86_verifier() {\n@@ -1768,1 +1741,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1774,1 +1747,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1779,2 +1752,2 @@\n-    @DontCompile\n-    public void test87_verifier(boolean warmup) {\n+    @Run(test = \"test87\")\n+    public void test87_verifier() {\n@@ -1786,1 +1759,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1792,1 +1765,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -1797,2 +1770,2 @@\n-    @DontCompile\n-    public void test88_verifier(boolean warmup) {\n+    @Run(test = \"test88\")\n+    public void test88_verifier() {\n@@ -1804,1 +1777,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1810,1 +1783,1 @@\n-    @ForceCompile(compLevel = C2)\n+    @ForceCompile(CompLevel.C2)\n@@ -1815,2 +1788,2 @@\n-    @DontCompile\n-    public void test89_verifier(boolean warmup) {\n+    @Run(test = \"test89\")\n+    public void test89_verifier() {\n@@ -1832,1 +1805,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1842,3 +1815,3 @@\n-    @DontCompile\n-    public void test90_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test90\")\n+    public void test90_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1853,1 +1826,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1863,3 +1836,3 @@\n-    @DontCompile\n-    public void test91_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test91\")\n+    public void test91_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1874,1 +1847,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1884,3 +1857,3 @@\n-    @DontCompile\n-    public void test92_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test92\")\n+    public void test92_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1895,1 +1868,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1905,3 +1878,3 @@\n-    @DontCompile\n-    public void test93_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test93\")\n+    public void test93_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1916,1 +1889,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1926,3 +1899,3 @@\n-    @DontCompile\n-    public void test94_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test94\")\n+    public void test94_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1937,1 +1910,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -1947,3 +1920,3 @@\n-    @DontCompile\n-    public void test95_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test95\")\n+    public void test95_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -1958,1 +1931,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1967,1 +1940,2 @@\n-    @DontInline @ForceCompile(compLevel = C2)\n+    @DontInline\n+    @ForceCompile(CompLevel.C2)\n@@ -1972,3 +1946,3 @@\n-    @DontCompile\n-    public void test96_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20000; \/\/ Do enough iteration to cause GC inside StubRoutines::store_inline_type_fields_to_buf\n+    @Run(test = \"test96\")\n+    public void test96_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20000; \/\/ Do enough iteration to cause GC inside StubRoutines::store_inline_type_fields_to_buf\n@@ -1979,1 +1953,1 @@\n-            RefPoint rp2 = test96(rp1, warmup);\n+            RefPoint rp2 = test96(rp1, info.isWarmUp());\n@@ -1991,1 +1965,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -1996,1 +1970,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -2001,3 +1975,3 @@\n-    @ForceCompile(compLevel = C1)\n-    public void test97_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n+    public void test97_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -2011,2 +1985,7 @@\n-    \/\/ C1->C2  - same as test97, except the callee is compiled by c2.\n-    @Test(compLevel = C2)\n+    @Run(test = \"test97\")\n+    public void run_test97_verifier(RunInfo info) {\n+        test97_verifier(info);\n+    }\n+\n+    \/\/ C1->C2  - same as test97, except the callee is compiled by C2.\n+    @Test(compLevel = CompLevel.C2)\n@@ -2017,1 +1996,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -2022,3 +2001,3 @@\n-    @ForceCompile(compLevel = C1)\n-    public void test98_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n+    public void test98_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -2032,0 +2011,5 @@\n+    @Run(test = \"test98\")\n+    public void run_test98_verifier(RunInfo info) {\n+        test98_verifier(info);\n+    }\n+\n@@ -2033,1 +2017,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -2038,1 +2022,1 @@\n-    @DontInline @DontCompile\n+    @DontCompile\n@@ -2043,3 +2027,3 @@\n-    @ForceCompile(compLevel = C1)\n-    public void test99_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n+    public void test99_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -2053,0 +2037,4 @@\n+    @Run(test = \"test99\")\n+    public void run_test99_verifier(RunInfo info) {\n+        test99_verifier(info);\n+    }\n@@ -2056,1 +2044,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -2062,1 +2050,1 @@\n-    @ForceCompile(compLevel = C1)\n+    @ForceCompile(CompLevel.C1_SIMPLE)\n@@ -2087,3 +2075,3 @@\n-    @DontCompile\n-    public void test100_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 4;\n+    @Run(test = \"test100\")\n+    public void test100_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 4;\n@@ -2095,1 +2083,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -2105,1 +2093,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -2110,1 +2098,2 @@\n-    @ForceCompile(compLevel = C2) @DontInline\n+    @DontInline\n+    @ForceCompile(CompLevel.C2)\n@@ -2115,3 +2104,3 @@\n-    @DontCompile\n-    public void test101_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test101\")\n+    public void test101_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -2123,1 +2112,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -2134,1 +2123,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -2139,1 +2128,1 @@\n-    @DontCompile @DontInline\n+    @DontInline\n@@ -2144,1 +2133,2 @@\n-    @ForceCompile(compLevel = C2) @DontInline\n+    @DontInline\n+    @ForceCompile(CompLevel.C2)\n@@ -2149,3 +2139,3 @@\n-    @DontCompile\n-    public void test102_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 5;\n+    @Run(test = \"test102\")\n+    public void test102_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 5;\n@@ -2157,1 +2147,1 @@\n-            try (ForceGCMarker m = ForceGCMarker.mark(warmup)) {\n+            try (ForceGCMarker m = ForceGCMarker.mark(info.isWarmUp())) {\n@@ -2167,1 +2157,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -2179,3 +2169,3 @@\n-    @DontCompile\n-    public void test103_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test103\")\n+    public void test103_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -2192,1 +2182,1 @@\n-    @Test(compLevel = C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -2219,3 +2209,3 @@\n-    @DontCompile\n-    public void test104_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test104\")\n+    public void test104_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -2232,1 +2222,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -2242,3 +2232,3 @@\n-    @DontCompile\n-    public void test105_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test105\")\n+    public void test105_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -2254,1 +2244,1 @@\n-    @Test(compLevel = C2)\n+    @Test(compLevel = CompLevel.C2)\n@@ -2264,3 +2254,3 @@\n-    @DontCompile\n-    public void test106_verifier(boolean warmup) {\n-        int count = warmup ? 1 : 20;\n+    @Run(test = \"test106\")\n+    public void test106_verifier(RunInfo info) {\n+        int count = info.isWarmUp() ? 1 : 20;\n@@ -2277,1 +2267,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -2283,1 +2273,1 @@\n-    public void test107_verifier(boolean warmup) {\n+    public void test107_verifier() {\n@@ -2305,0 +2295,6 @@\n+    @Run(test = \"test107\")\n+    @Warmup(0)\n+    public void run_test107_verifier() {\n+        test107_verifier();\n+    }\n+\n@@ -2306,1 +2302,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -2312,1 +2308,1 @@\n-    public void test108_verifier(boolean warmup) {\n+    public void test108_verifier() {\n@@ -2334,0 +2330,6 @@\n+    @Run(test = \"test108\")\n+    @Warmup(0)\n+    public void run_test108_verifier() {\n+        test108_verifier();\n+    }\n+\n@@ -2335,1 +2337,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -2341,1 +2343,1 @@\n-    public void test109_verifier(boolean warmup) {\n+    public void test109_verifier() {\n@@ -2362,0 +2364,6 @@\n+\n+    @Run(test = \"test109\")\n+    @Warmup(0)\n+    public void run_test109_verifier() {\n+        test109_verifier();\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":474,"deletions":466,"binary":false,"changes":940,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-\n@@ -27,5 +26,4 @@\n-import java.lang.invoke.*;\n-import java.lang.reflect.Method;\n-import java.nio.file.NoSuchFileException;\n-import java.util.Arrays;\n-\n+import compiler.lib.ir_framework.CompLevel;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.Test;\n@@ -34,0 +32,1 @@\n+\n@@ -38,1 +37,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -40,6 +39,2 @@\n- * @compile TestGetfieldChains.java NamedRectangle.java Rectangle.java Point.java GetfieldChains.jcod\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestGetfieldChains\n+ * @compile GetfieldChains.jcod\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestGetfieldChains\n@@ -48,44 +43,33 @@\n-public class TestGetfieldChains extends InlineTypeTest {\n-    public static final int C1 = COMP_LEVEL_SIMPLE;\n-    public static final int C2 = COMP_LEVEL_FULL_OPTIMIZATION;\n-\n-    public static void main(String[] args) throws Throwable {\n-        TestGetfieldChains test = new TestGetfieldChains();\n-        test.run(args, TestGetfieldChains.class);\n-    }\n-\n-    @Override\n-    public int getNumScenarios() {\n-        return 5;\n-    }\n-\n-    @Override\n-    public String[] getVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 0: return new String[] { \/\/ C1 only\n-                \"-XX:TieredStopAtLevel=1\",\n-                \"-XX:+TieredCompilation\",\n-            };\n-        case 1: return new String[] { \/\/ C2 only. (Make sure the tests are correctly written)\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:-TieredCompilation\",\n-                \"-XX:-OmitStackTraceInFastThrow\",\n-            };\n-        case 2: return new String[] { \/\/ interpreter only\n-                \"-Xint\",\n-            };\n-        case 3: return new String[] {\n-                \/\/ Xcomp Only C1.\n-                \"-XX:TieredStopAtLevel=1\",\n-                \"-XX:+TieredCompilation\",\n-                \"-Xcomp\",\n-            };\n-        case 4: return new String[] {\n-                \/\/ Xcomp Only C2.\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:-TieredCompilation\",\n-                \"-XX:-OmitStackTraceInFastThrow\",\n-                \"-Xcomp\",\n-            };\n-        }\n-        return null;\n+public class TestGetfieldChains {\n+\n+    public static void main(String[] args) {\n+\n+        final Scenario[] scenarios = {\n+                new Scenario(0,\n+                        \/\/ C1 only\n+                        \"-XX:TieredStopAtLevel=1\",\n+                        \"-XX:+TieredCompilation\"),\n+                new Scenario(1,\n+                        \/\/ C2 only. (Make sure the tests are correctly written)\n+                        \"-XX:TieredStopAtLevel=4\",\n+                        \"-XX:-TieredCompilation\",\n+                        \"-XX:-OmitStackTraceInFastThrow\"),\n+                new Scenario(2,\n+                        \/\/ interpreter only\n+                        \"-Xint\"),\n+                new Scenario(3,\n+                        \/\/ Xcomp Only C1.\n+                        \"-XX:TieredStopAtLevel=1\",\n+                        \"-XX:+TieredCompilation\",\n+                        \"-Xcomp\"),\n+                new Scenario(4,\n+                        \/\/ Xcomp Only C2.\n+                        \"-XX:TieredStopAtLevel=4\",\n+                        \"-XX:-TieredCompilation\",\n+                        \"-XX:-OmitStackTraceInFastThrow\",\n+                        \"-Xcomp\")\n+        };\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .start();\n@@ -94,0 +78,1 @@\n+\n@@ -95,1 +80,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -100,2 +85,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -107,1 +92,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -112,2 +97,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -120,1 +105,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -131,2 +116,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -141,1 +126,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -152,2 +137,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -163,1 +148,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -174,2 +159,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -194,1 +179,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -200,2 +185,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -206,1 +191,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -212,2 +197,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGetfieldChains.java","additions":64,"deletions":79,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,4 @@\n+import jdk.internal.misc.Unsafe;\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n@@ -29,1 +33,0 @@\n-import java.util.List;\n@@ -31,2 +34,3 @@\n-import jdk.test.lib.Asserts;\n-import jdk.internal.misc.Unsafe;\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rI;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rL;\n@@ -38,1 +42,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -41,6 +45,1 @@\n- * @compile TestIntrinsics.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestIntrinsics\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestIntrinsics\n@@ -48,7 +47,9 @@\n-public class TestIntrinsics extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 3: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\"};\n-        case 4: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:+UnlockExperimentalVMOptions\", \"-XX:PerMethodSpecTrapLimit=0\", \"-XX:PerMethodTrapLimit=0\"};\n+\n+@ForceCompileClassInitializer\n+public class TestIntrinsics {\n+\n+    public static void main(String[] args) {\n+\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+        for (Scenario scenario: scenarios) {\n+            scenario.addFlags(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n@@ -56,2 +57,2 @@\n-        return null;\n-    }\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\");\n+        scenarios[4].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:+UnlockExperimentalVMOptions\", \"-XX:PerMethodSpecTrapLimit=0\", \"-XX:PerMethodTrapLimit=0\");\n@@ -59,3 +60,6 @@\n-    public static void main(String[] args) throws Throwable {\n-        TestIntrinsics test = new TestIntrinsics();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class);\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class)\n+                   .start();\n@@ -70,2 +74,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -85,1 +89,2 @@\n-    @Test(failOn = LOADK)\n+    @Test\n+    @IR(failOn = {LOADK})\n@@ -100,2 +105,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -111,2 +116,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -120,1 +125,2 @@\n-    @Test(failOn = LOADK)\n+    @Test\n+    @IR(failOn = {LOADK})\n@@ -129,2 +135,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -140,2 +146,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -152,2 +158,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -166,2 +172,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n@@ -182,2 +188,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() {\n@@ -196,2 +202,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n@@ -211,2 +217,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() {\n@@ -223,2 +229,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    public void test11_verifier() {\n@@ -238,2 +244,2 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n+    @Run(test = \"test12\")\n+    public void test12_verifier() {\n@@ -250,2 +256,2 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n+    @Run(test = \"test13\")\n+    public void test13_verifier() {\n@@ -269,2 +275,2 @@\n-    @DontCompile\n-    public void test14_verifier(boolean warmup) {\n+    @Run(test = \"test14\")\n+    public void test14_verifier() {\n@@ -282,2 +288,2 @@\n-    @DontCompile\n-    public void test15_verifier(boolean warmup) {\n+    @Run(test = \"test15\")\n+    public void test15_verifier() {\n@@ -294,2 +300,2 @@\n-    @DontCompile\n-    public void test16_verifier(boolean warmup) {\n+    @Run(test = \"test16\")\n+    public void test16_verifier() {\n@@ -306,2 +312,2 @@\n-    @DontCompile\n-    public void test17_verifier(boolean warmup) {\n+    @Run(test = \"test17\")\n+    public void test17_verifier() {\n@@ -318,2 +324,2 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    public void test18_verifier() {\n@@ -332,2 +338,2 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    public void test19_verifier() {\n@@ -347,2 +353,2 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    public void test20_verifier() {\n@@ -377,1 +383,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -382,2 +389,2 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    public void test21_verifier() {\n@@ -390,1 +397,2 @@\n-    @Test(failOn=CALL_Unsafe + ALLOC)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe, ALLOC})\n@@ -398,2 +406,2 @@\n-    @DontCompile\n-    public void test22_verifier(boolean warmup) {\n+    @Run(test = \"test22\")\n+    public void test22_verifier() {\n@@ -405,1 +413,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -410,2 +419,2 @@\n-    @DontCompile\n-    public void test23_verifier(boolean warmup) {\n+    @Run(test = \"test23\")\n+    public void test23_verifier() {\n@@ -419,1 +428,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -424,2 +434,2 @@\n-    @DontCompile\n-    public void test24_verifier(boolean warmup) {\n+    @Run(test = \"test24\")\n+    public void test24_verifier() {\n@@ -447,2 +457,2 @@\n-    @DontCompile\n-    public void test25_verifier(boolean warmup) {\n+    @Run(test = \"test25\")\n+    public void test25_verifier() {\n@@ -463,2 +473,2 @@\n-    @DontCompile\n-    public void test26_verifier(boolean warmup) {\n+    @Run(test = \"test26\")\n+    public void test26_verifier() {\n@@ -481,1 +491,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -486,2 +497,2 @@\n-    @DontCompile\n-    public void test27_verifier(boolean warmup) {\n+    @Run(test = \"test27\")\n+    public void test27_verifier() {\n@@ -497,1 +508,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -502,2 +514,2 @@\n-    @DontCompile\n-    public void test28_verifier(boolean warmup) {\n+    @Run(test = \"test28\")\n+    public void test28_verifier() {\n@@ -514,1 +526,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -524,2 +537,2 @@\n-    @DontCompile\n-    public void test29_verifier(boolean warmup) {\n+    @Run(test = \"test29\")\n+    public void test29_verifier() {\n@@ -544,1 +557,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -552,2 +566,2 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) {\n+    @Run(test = \"test30\")\n+    public void test30_verifier() {\n@@ -573,1 +587,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -581,2 +596,2 @@\n-    @DontCompile\n-    public void test31_verifier(boolean warmup) {\n+    @Run(test = \"test31\")\n+    public void test31_verifier() {\n@@ -589,1 +604,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -598,2 +614,2 @@\n-    @DontCompile\n-    public void test32_verifier(boolean warmup) {\n+    @Run(test = \"test32\")\n+    public void test32_verifier() {\n@@ -619,1 +635,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -627,2 +644,2 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) {\n+    @Run(test = \"test33\")\n+    public void test33_verifier() {\n@@ -637,1 +654,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -646,2 +664,2 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n+    @Run(test = \"test34\")\n+    public void test34_verifier() {\n@@ -656,1 +674,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -664,2 +683,2 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) {\n+    @Run(test = \"test35\")\n+    public void test35_verifier() {\n@@ -673,1 +692,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -681,2 +701,2 @@\n-    @DontCompile\n-    public void test36_verifier(boolean warmup) {\n+    @Run(test = \"test36\")\n+    public void test36_verifier() {\n@@ -690,1 +710,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -699,2 +720,2 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) {\n+    @Run(test = \"test37\")\n+    public void test37_verifier() {\n@@ -709,1 +730,2 @@\n-    @Test(match = { CALL_Unsafe }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {CALL_Unsafe, \"= 1\"})\n@@ -718,2 +740,2 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n+    @Run(test = \"test38\")\n+    public void test38_verifier() {\n@@ -726,1 +748,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -734,2 +757,2 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n+    @Run(test = \"test39\")\n+    public void test39_verifier() {\n@@ -748,2 +771,2 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) {\n+    @Run(test = \"test40\")\n+    public void test40_verifier() {\n@@ -763,2 +786,2 @@\n-    @DontCompile\n-    public void test41_verifier(boolean warmup) {\n+    @Run(test = \"test41\")\n+    public void test41_verifier() {\n@@ -777,2 +800,2 @@\n-    @DontCompile\n-    public void test42_verifier(boolean warmup) {\n+    @Run(test = \"test42\")\n+    public void test42_verifier() {\n@@ -792,2 +815,2 @@\n-    @DontCompile\n-    public void test43_verifier(boolean warmup) {\n+    @Run(test = \"test43\")\n+    public void test43_verifier() {\n@@ -806,2 +829,2 @@\n-    @DontCompile\n-    public void test44_verifier(boolean warmup) {\n+    @Run(test = \"test44\")\n+    public void test44_verifier() {\n@@ -821,2 +844,2 @@\n-    @DontCompile\n-    public void test45_verifier(boolean warmup) {\n+    @Run(test = \"test45\")\n+    public void test45_verifier() {\n@@ -835,2 +858,2 @@\n-    @DontCompile\n-    public void test46_verifier(boolean warmup) {\n+    @Run(test = \"test46\")\n+    public void test46_verifier() {\n@@ -851,2 +874,2 @@\n-    @DontCompile\n-    public void test47_verifier(boolean warmup) {\n+    @Run(test = \"test47\")\n+    public void test47_verifier() {\n@@ -868,2 +891,2 @@\n-    @DontCompile\n-    public void test48_verifier(boolean warmup) {\n+    @Run(test = \"test48\")\n+    public void test48_verifier() {\n@@ -885,2 +908,2 @@\n-    @DontCompile\n-    public void test49_verifier(boolean warmup) {\n+    @Run(test = \"test49\")\n+    public void test49_verifier() {\n@@ -897,2 +920,2 @@\n-    @DontCompile\n-    public void test50_verifier(boolean warmup) {\n+    @Run(test = \"test50\")\n+    public void test50_verifier() {\n@@ -933,2 +956,2 @@\n-    @DontCompile\n-    public void test51_verifier(boolean warmup) {\n+    @Run(test = \"test51\")\n+    public void test51_verifier() {\n@@ -961,2 +984,2 @@\n-    @DontCompile\n-    public void test52_verifier(boolean warmup) {\n+    @Run(test = \"test52\")\n+    public void test52_verifier() {\n@@ -1005,2 +1028,2 @@\n-    @DontCompile\n-    public void test53_verifier(boolean warmup) {\n+    @Run(test = \"test53\")\n+    public void test53_verifier() {\n@@ -1021,1 +1044,0 @@\n-    @Warmup(10000) \/\/ Fill up the TLAB to trigger slow path allocation\n@@ -1029,2 +1051,3 @@\n-    @DontCompile\n-    public void test54_verifier(boolean warmup) {\n+    @Run(test = \"test54\")\n+    @Warmup(10000) \/\/ Fill up the TLAB to trigger slow path allocation\n+    public void test54_verifier() {\n@@ -1039,1 +1062,2 @@\n-    @Test(failOn=CALL_Unsafe)\n+    @Test\n+    @IR(failOn = {CALL_Unsafe})\n@@ -1047,2 +1071,2 @@\n-    @DontCompile\n-    public void test55_verifier(boolean warmup) {\n+    @Run(test = \"test55\")\n+    public void test55_verifier() {\n@@ -1062,2 +1086,2 @@\n-    @DontCompile\n-    public void test56_verifier(boolean warmup) {\n+    @Run(test = \"test56\")\n+    public void test56_verifier() {\n@@ -1076,2 +1100,2 @@\n-    @DontCompile\n-    public void test57_verifier(boolean warmup) {\n+    @Run(test = \"test57\")\n+    public void test57_verifier() {\n@@ -1089,2 +1113,2 @@\n-    @DontCompile\n-    public void test58_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test58\")\n+    public void test58_verifier() throws Exception {\n@@ -1108,2 +1132,2 @@\n-    @DontCompile\n-    public void test59_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test59\")\n+    public void test59_verifier() throws Exception {\n@@ -1127,2 +1151,2 @@\n-    @DontCompile\n-    public void test60_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test60\")\n+    public void test60_verifier() throws Exception {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":188,"deletions":164,"binary":false,"changes":352,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -28,1 +29,2 @@\n-import java.lang.reflect.Method;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rI;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rL;\n@@ -34,1 +36,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -36,6 +38,1 @@\n- * @compile TestJNICalls.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestJNICalls\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestJNICalls\n@@ -43,6 +40,0 @@\n-public class TestJNICalls extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        return null;\n-    }\n@@ -50,3 +41,10 @@\n-    public static void main(String[] args) throws Throwable {\n-        TestJNICalls test = new TestJNICalls();\n-        test.run(args, MyValue1.class);\n+@ForceCompileClassInitializer\n+public class TestJNICalls {\n+\n+    public static void main(String[] args) {\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class)\n+                   .start();\n@@ -64,1 +62,0 @@\n-    @Warmup(10000) \/\/ Make sure native method is compiled\n@@ -73,2 +70,3 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    @Warmup(10000) \/\/ Make sure native method is compiled\n+    public void test1_verifier() {\n@@ -84,1 +82,0 @@\n-    @Warmup(10000) \/\/ Make sure native method is compiled\n@@ -89,2 +86,3 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    @Warmup(10000) \/\/ Make sure native method is compiled\n+    public void test2_verifier() {\n@@ -108,1 +106,0 @@\n-    @Warmup(10000) \/\/ Make sure native method is compiled\n@@ -113,2 +110,3 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    @Warmup(10000) \/\/ Make sure native method is compiled\n+    public void test3_verifier() {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestJNICalls.java","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -26,1 +26,7 @@\n-import java.lang.invoke.*;\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+import test.java.lang.invoke.lib.InstructionHelper;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n@@ -30,2 +36,2 @@\n-import jdk.test.lib.Asserts;\n-import test.java.lang.invoke.lib.InstructionHelper;\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.*;\n@@ -37,2 +43,1 @@\n- * @library \/test\/lib \/test\/jdk\/lib\/testlibrary\/bytecode \/test\/jdk\/java\/lang\/invoke\/common \/testlibrary \/compiler\/whitebox \/\n- * @build jdk.experimental.bytecode.BasicClassBuilder test.java.lang.invoke.lib.InstructionHelper\n+ * @library \/test\/lib \/test\/jdk\/lib\/testlibrary\/bytecode \/test\/jdk\/java\/lang\/invoke\/common \/\n@@ -40,6 +45,2 @@\n- * @compile TestLWorld.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestLWorld\n+ * @build jdk.experimental.bytecode.BasicClassBuilder test.java.lang.invoke.lib.InstructionHelper\n+ * @run driver\/timeout=450 compiler.valhalla.inlinetypes.TestLWorld\n@@ -47,11 +48,0 @@\n-public class TestLWorld extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 2: return new String[] {\"-DVerifyIR=false\"};\n-        case 3: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\"};\n-        case 4: return new String[] {\"-XX:-MonomorphicArrayCheck\"};\n-        }\n-        return null;\n-    }\n@@ -59,1 +49,4 @@\n-    public static void main(String[] args) throws Throwable {\n+@ForceCompileClassInitializer\n+public class TestLWorld {\n+\n+    public static void main(String[] args) {\n@@ -66,3 +59,13 @@\n-        TestLWorld test = new TestLWorld();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class, MyValue3.class,\n-                 MyValue3Inline.class, Test51Value.class);\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+        scenarios[2].addFlags(\"-DVerifyIR=false\");\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\");\n+        scenarios[4].addFlags(\"-XX:-MonomorphicArrayCheck\");\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class,\n+                                     MyValue3.class,\n+                                     MyValue3Inline.class)\n+                   .start();\n@@ -101,1 +104,1 @@\n-    @Test()\n+    @Test\n@@ -111,2 +114,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -145,1 +148,1 @@\n-    @Test()\n+    @Test\n@@ -169,2 +172,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -178,1 +181,1 @@\n-    @Test()\n+    @Test\n@@ -201,2 +204,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -224,1 +227,1 @@\n-    @Test()\n+    @Test\n@@ -237,2 +240,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -248,2 +251,3 @@\n-    @Test(failOn = ALLOC + STORE + LOOP)\n-    public long test5(MyValue1 arg, boolean deopt) {\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, LOOP})\n+    public long test5(MyValue1 arg, boolean deopt, Method m) {\n@@ -256,1 +260,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test5\"));\n+            TestFramework.deoptimize(m);\n@@ -262,3 +266,3 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n-        long result = test5(valueField1, !warmup);\n+    @Run(test = \"test5\")\n+    public void test5_verifier(RunInfo info) {\n+        long result = test5(valueField1, !info.isWarmUp(), info.getTest());\n@@ -269,1 +273,2 @@\n-    @Test(failOn = LOAD + LOOP)\n+    @Test\n+    @IR(failOn = {LOAD, LOOP})\n@@ -279,2 +284,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -297,2 +302,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n@@ -314,2 +319,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() {\n@@ -331,2 +336,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n@@ -342,1 +347,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE})\n@@ -353,2 +359,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() {\n@@ -381,1 +387,1 @@\n-    @Test()\n+    @Test\n@@ -391,2 +397,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    public void test11_verifier() {\n@@ -414,1 +420,1 @@\n-    @Test()\n+    @Test\n@@ -438,2 +444,2 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n+    @Run(test = \"test12\")\n+    public void test12_verifier() {\n@@ -460,1 +466,1 @@\n-    @Test()\n+    @Test\n@@ -479,2 +485,2 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n+    @Run(test = \"test13\")\n+    public void test13_verifier() {\n@@ -498,1 +504,1 @@\n-    @Test()\n+    @Test\n@@ -511,2 +517,2 @@\n-    @DontCompile\n-    public void test14_verifier(boolean warmup) {\n+    @Run(test = \"test14\")\n+    public void test14_verifier() {\n@@ -522,2 +528,3 @@\n-    @Test(failOn = ALLOC + STORE + LOOP)\n-    public long test15(MyValue1 arg, boolean deopt) {\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, LOOP})\n+    public long test15(MyValue1 arg, boolean deopt, Method m) {\n@@ -530,1 +537,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test15\"));\n+            TestFramework.deoptimize(m);\n@@ -536,3 +543,3 @@\n-    @DontCompile\n-    public void test15_verifier(boolean warmup) {\n-        long result = test15(valueField1, !warmup);\n+    @Run(test = \"test15\")\n+    public void test15_verifier(RunInfo info) {\n+        long result = test15(valueField1, !info.isWarmUp(), info.getTest());\n@@ -543,1 +550,2 @@\n-    @Test(failOn = LOAD + LOOP)\n+    @Test\n+    @IR(failOn = {LOAD, LOOP})\n@@ -553,2 +561,2 @@\n-    @DontCompile\n-    public void test16_verifier(boolean warmup) {\n+    @Run(test = \"test16\")\n+    public void test16_verifier() {\n@@ -571,2 +579,2 @@\n-    @DontCompile\n-    public void test17_verifier(boolean warmup) {\n+    @Run(test = \"test17\")\n+    public void test17_verifier() {\n@@ -585,2 +593,2 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    public void test18_verifier() {\n@@ -603,2 +611,2 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    public void test19_verifier() {\n@@ -619,2 +627,2 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    public void test20_verifier() {\n@@ -641,1 +649,1 @@\n-    @Test()\n+    @Test\n@@ -646,2 +654,2 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    public void test21_verifier() {\n@@ -653,1 +661,1 @@\n-    @Test()\n+    @Test\n@@ -658,2 +666,2 @@\n-    @DontCompile\n-    public void test22Interface_verifier(boolean warmup) {\n+    @Run(test = \"test22Interface\")\n+    public void test22Interface_verifier() {\n@@ -665,1 +673,1 @@\n-    @Test()\n+    @Test\n@@ -670,2 +678,2 @@\n-    @DontCompile\n-    public void test22Abstract_verifier(boolean warmup) {\n+    @Run(test = \"test22Abstract\")\n+    public void test22Abstract_verifier() {\n@@ -682,1 +690,1 @@\n-    @Test()\n+    @Test\n@@ -687,2 +695,2 @@\n-    @DontCompile\n-    public void test23_verifier(boolean warmup) {\n+    @Run(test = \"test23\")\n+    public void test23_verifier() {\n@@ -708,1 +716,1 @@\n-    @Test()\n+    @Test\n@@ -713,2 +721,2 @@\n-    @DontCompile\n-    public void test24_verifier(boolean warmup) {\n+    @Run(test = \"test24\")\n+    public void test24_verifier() {\n@@ -729,1 +737,1 @@\n-    @Test()\n+    @Test\n@@ -734,2 +742,2 @@\n-    @DontCompile\n-    public void test25_verifier(boolean warmup) {\n+    @Run(test = \"test25\")\n+    public void test25_verifier() {\n@@ -751,1 +759,1 @@\n-    @Test()\n+    @Test\n@@ -756,2 +764,2 @@\n-    @DontCompile\n-    public void test26Interface_verifier(boolean warmup) {\n+    @Run(test = \"test26Interface\")\n+    public void test26Interface_verifier() {\n@@ -777,1 +785,1 @@\n-    @Test()\n+    @Test\n@@ -782,2 +790,2 @@\n-    @DontCompile\n-    public void test27Interface_verifier(boolean warmup) {\n+    @Run(test = \"test27Interface\")\n+    public void test27Interface_verifier() {\n@@ -799,1 +807,1 @@\n-    @Test()\n+    @Test\n@@ -804,2 +812,2 @@\n-    @DontCompile\n-    public void test26Abstract_verifier(boolean warmup) {\n+    @Run(test = \"test26Abstract\")\n+    public void test26Abstract_verifier() {\n@@ -825,1 +833,1 @@\n-    @Test()\n+    @Test\n@@ -830,2 +838,2 @@\n-    @DontCompile\n-    public void test27Abstract_verifier(boolean warmup) {\n+    @Run(test = \"test27Abstract\")\n+    public void test27Abstract_verifier() {\n@@ -847,1 +855,1 @@\n-    @Test()\n+    @Test\n@@ -852,2 +860,2 @@\n-    @DontCompile\n-    public void test28_verifier(boolean warmup) {\n+    @Run(test = \"test28\")\n+    public void test28_verifier() {\n@@ -873,1 +881,1 @@\n-    @Test()\n+    @Test\n@@ -878,2 +886,2 @@\n-    @DontCompile\n-    public void test29_verifier(boolean warmup) {\n+    @Run(test = \"test29\")\n+    public void test29_verifier() {\n@@ -895,1 +903,1 @@\n-    @Test()\n+    @Test\n@@ -900,2 +908,2 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) {\n+    @Run(test = \"test30\")\n+    public void test30_verifier() {\n@@ -917,1 +925,1 @@\n-    @Test()\n+    @Test\n@@ -922,2 +930,2 @@\n-    @DontCompile\n-    public void test31Interface_verifier(boolean warmup) {\n+    @Run(test = \"test31Interface\")\n+    public void test31Interface_verifier() {\n@@ -943,1 +951,1 @@\n-    @Test()\n+    @Test\n@@ -948,2 +956,2 @@\n-    @DontCompile\n-    public void test32Interface_verifier(boolean warmup) {\n+    @Run(test = \"test32Interface\")\n+    public void test32Interface_verifier() {\n@@ -965,1 +973,1 @@\n-    @Test()\n+    @Test\n@@ -970,2 +978,2 @@\n-    @DontCompile\n-    public void test31Abstract_verifier(boolean warmup) {\n+    @Run(test = \"test31Abstract\")\n+    public void test31Abstract_verifier() {\n@@ -991,1 +999,1 @@\n-    @Test()\n+    @Test\n@@ -996,2 +1004,2 @@\n-    @DontCompile\n-    public void test32Abstract_verifier(boolean warmup) {\n+    @Run(test = \"test32Abstract\")\n+    public void test32Abstract_verifier() {\n@@ -1013,1 +1021,1 @@\n-    @Test()\n+    @Test\n@@ -1018,2 +1026,2 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) {\n+    @Run(test = \"test33\")\n+    public void test33_verifier() {\n@@ -1037,1 +1045,1 @@\n-    @Test()\n+    @Test\n@@ -1042,2 +1050,2 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n+    @Run(test = \"test34\")\n+    public void test34_verifier() {\n@@ -1068,1 +1076,1 @@\n-    @Test()\n+    @Test\n@@ -1073,2 +1081,2 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test35\")\n+    public void test35_verifier() throws Throwable {\n@@ -1086,1 +1094,1 @@\n-    @Test()\n+    @Test\n@@ -1091,2 +1099,2 @@\n-    @DontCompile\n-    public void test36_verifier(boolean warmup) {\n+    @Run(test = \"test36\")\n+    public void test36_verifier() {\n@@ -1108,1 +1116,1 @@\n-    @Test()\n+    @Test\n@@ -1113,2 +1121,2 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) {\n+    @Run(test = \"test37\")\n+    public void test37_verifier() {\n@@ -1136,1 +1144,1 @@\n-    @Test()\n+    @Test\n@@ -1167,2 +1175,2 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n+    @Run(test = \"test38\")\n+    public void test38_verifier() {\n@@ -1208,1 +1216,1 @@\n-    @Test()\n+    @Test\n@@ -1253,2 +1261,2 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n+    @Run(test = \"test39\")\n+    public void test39_verifier() {\n@@ -1293,1 +1301,1 @@\n-    @Test()\n+    @Test\n@@ -1311,2 +1319,2 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) {\n+    @Run(test = \"test40\")\n+    public void test40_verifier() {\n@@ -1334,1 +1342,1 @@\n-    @Test()\n+    @Test\n@@ -1341,2 +1349,2 @@\n-    @DontCompile\n-    public void test41_verifier(boolean warmup) {\n+    @Run(test = \"test41\")\n+    public void test41_verifier() {\n@@ -1350,1 +1358,1 @@\n-    @Test()\n+    @Test\n@@ -1357,3 +1365,3 @@\n-    @DontCompile\n-    public void test42_verifier(boolean warmup) {\n-        if (!warmup) test42(); \/\/ We need -Xcomp behavior\n+    @Run(test = \"test42\")\n+    public void test42_verifier(RunInfo info) {\n+        if (!info.isWarmUp()) test42(); \/\/ We need -Xcomp behavior\n@@ -1363,2 +1371,2 @@\n-    @Test()\n-    public long test43(boolean deopt) {\n+    @Test\n+    public long test43(boolean deopt, Method m) {\n@@ -1369,1 +1377,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test43\"));\n+            TestFramework.deoptimize(m);\n@@ -1377,3 +1385,3 @@\n-    @DontCompile\n-    public void test43_verifier(boolean warmup) {\n-        test43(!warmup);\n+    @Run(test = \"test43\")\n+    public void test43_verifier(RunInfo info) {\n+        test43(!info.isWarmUp(), info.getTest());\n@@ -1395,1 +1403,1 @@\n-    @Test()\n+    @Test\n@@ -1400,2 +1408,2 @@\n-    @DontCompile\n-    public void test44_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test44\")\n+    public void test44_verifier() throws Throwable {\n@@ -1418,1 +1426,1 @@\n-    @Test()\n+    @Test\n@@ -1423,2 +1431,2 @@\n-    @DontCompile\n-    public void test45_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test45\")\n+    public void test45_verifier() throws Throwable {\n@@ -1442,2 +1450,2 @@\n-    @DontCompile\n-    public void test46_verifier(boolean warmup) {\n+    @Run(test = \"test46\")\n+    public void test46_verifier() {\n@@ -1455,2 +1463,2 @@\n-    @DontCompile\n-    public void test47_verifier(boolean warmup) {\n+    @Run(test = \"test47\")\n+    public void test47_verifier() {\n@@ -1467,2 +1475,2 @@\n-    @DontCompile\n-    public void test48_verifier(boolean warmup) {\n+    @Run(test = \"test48\")\n+    public void test48_verifier() {\n@@ -1479,2 +1487,2 @@\n-    @DontCompile\n-    public void test49_verifier(boolean warmup) {\n+    @Run(test = \"test49\")\n+    public void test49_verifier() {\n@@ -1491,2 +1499,2 @@\n-    @DontCompile\n-    public void test50_verifier(boolean warmup) {\n+    @Run(test = \"test50\")\n+    public void test50_verifier() {\n@@ -1576,1 +1584,1 @@\n-    @Test()\n+    @Test\n@@ -1581,2 +1589,2 @@\n-    @DontCompile\n-    public void test51_verifier(boolean warmup) {\n+    @Run(test = \"test51\")\n+    public void test51_verifier() {\n@@ -1593,1 +1601,1 @@\n-    @Test()\n+    @Test\n@@ -1600,2 +1608,2 @@\n-    @DontCompile\n-    public void test52_verifier(boolean warmup) {\n+    @Run(test = \"test52\")\n+    public void test52_verifier() {\n@@ -1607,1 +1615,1 @@\n-    @Test()\n+    @Test\n@@ -1613,2 +1621,2 @@\n-    @DontCompile\n-    public void test53_verifier(boolean warmup) {\n+    @Run(test = \"test53\")\n+    public void test53_verifier() {\n@@ -1620,1 +1628,1 @@\n-    @Test()\n+    @Test\n@@ -1626,2 +1634,2 @@\n-    @DontCompile\n-    public void test54_verifier(boolean warmup) {\n+    @Run(test = \"test54\")\n+    public void test54_verifier() {\n@@ -1634,1 +1642,1 @@\n-    @Test()\n+    @Test\n@@ -1641,2 +1649,2 @@\n-    @DontCompile\n-    public void test55_verifier(boolean warmup) {\n+    @Run(test = \"test55\")\n+    public void test55_verifier() {\n@@ -1650,1 +1658,1 @@\n-    @Test()\n+    @Test\n@@ -1657,2 +1665,2 @@\n-    @DontCompile\n-    public void test56_verifier(boolean warmup) {\n+    @Run(test = \"test56\")\n+    public void test56_verifier() {\n@@ -1674,1 +1682,1 @@\n-    @Test()\n+    @Test\n@@ -1679,2 +1687,2 @@\n-    @DontCompile\n-    public void test57_verifier(boolean warmup) {\n+    @Run(test = \"test57\")\n+    public void test57_verifier() {\n@@ -1696,1 +1704,1 @@\n-    @Test()\n+    @Test\n@@ -1702,2 +1710,2 @@\n-    @DontCompile\n-    public void test58_verifier(boolean warmup) {\n+    @Run(test = \"test58\")\n+    public void test58_verifier() {\n@@ -1712,1 +1720,1 @@\n-    @Test()\n+    @Test\n@@ -1723,2 +1731,2 @@\n-    @DontCompile\n-    public void test59_verifier(boolean warmup) {\n+    @Run(test = \"test59\")\n+    public void test59_verifier() {\n@@ -1734,1 +1742,1 @@\n-    @Test()\n+    @Test\n@@ -1743,2 +1751,2 @@\n-    @DontCompile\n-    public void test60_verifier(boolean warmup) {\n+    @Run(test = \"test60\")\n+    public void test60_verifier() {\n@@ -1760,1 +1768,1 @@\n-    @Test()\n+    @Test\n@@ -1775,2 +1783,2 @@\n-    @DontCompile\n-    public void test61_verifier(boolean warmup) {\n+    @Run(test = \"test61\")\n+    public void test61_verifier() {\n@@ -1780,1 +1788,1 @@\n-    @Test()\n+    @Test\n@@ -1791,2 +1799,2 @@\n-    @DontCompile\n-    public void test62_verifier(boolean warmup) {\n+    @Run(test = \"test62\")\n+    public void test62_verifier() {\n@@ -1797,1 +1805,1 @@\n-    @Test()\n+    @Test\n@@ -1802,2 +1810,2 @@\n-    @DontCompile\n-    public void test63_verifier(boolean warmup) {\n+    @Run(test = \"test63\")\n+    public void test63_verifier() {\n@@ -1819,1 +1827,1 @@\n-    @Test()\n+    @Test\n@@ -1824,2 +1832,2 @@\n-    @DontCompile\n-    public void test64Interface_verifier(boolean warmup) {\n+    @Run(test = \"test64Interface\")\n+    public void test64Interface_verifier() {\n@@ -1835,1 +1843,1 @@\n-    @Test()\n+    @Test\n@@ -1840,2 +1848,2 @@\n-    @DontCompile\n-    public void test64Abstract_verifier(boolean warmup) {\n+    @Run(test = \"test64Abstract\")\n+    public void test64Abstract_verifier() {\n@@ -1846,1 +1854,1 @@\n-    @Test()\n+    @Test\n@@ -1851,2 +1859,2 @@\n-    @DontCompile\n-    public void test65_verifier(boolean warmup) {\n+    @Run(test = \"test65\")\n+    public void test65_verifier() {\n@@ -1858,1 +1866,1 @@\n-    @Test()\n+    @Test\n@@ -1863,2 +1871,2 @@\n-    @DontCompile\n-    public void test66_verifier(boolean warmup) {\n+    @Run(test = \"test66\")\n+    public void test66_verifier() {\n@@ -1870,1 +1878,1 @@\n-    @Test()\n+    @Test\n@@ -1875,2 +1883,2 @@\n-    @DontCompile\n-    public void test67_verifier(boolean warmup) {\n+    @Run(test = \"test67\")\n+    public void test67_verifier() {\n@@ -1882,1 +1890,1 @@\n-    @Test()\n+    @Test\n@@ -1887,2 +1895,2 @@\n-    @DontCompile\n-    public void test68_verifier(boolean warmup) {\n+    @Run(test = \"test68\")\n+    public void test68_verifier() {\n@@ -1901,1 +1909,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -1910,2 +1919,2 @@\n-    @DontCompile\n-    public void test69_verifier(boolean warmup) {\n+    @Run(test = \"test69\")\n+    public void test69_verifier() {\n@@ -1923,1 +1932,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -1932,2 +1942,2 @@\n-    @DontCompile\n-    public void test70Interface_verifier(boolean warmup) {\n+    @Run(test = \"test70Interface\")\n+    public void test70Interface_verifier() {\n@@ -1945,1 +1955,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -1954,2 +1965,2 @@\n-    @DontCompile\n-    public void test70Abstract_verifier(boolean warmup) {\n+    @Run(test = \"test70Abstract\")\n+    public void test70Abstract_verifier() {\n@@ -1977,2 +1988,2 @@\n-    @DontCompile\n-    public void test71_verifier(boolean warmup) {\n+    @Run(test = \"test71\")\n+    public void test71_verifier() {\n@@ -1995,1 +2006,0 @@\n-    @Warmup(0)\n@@ -2001,2 +2011,3 @@\n-    @DontCompile\n-    public void test72_verifier(boolean warmup) {\n+    @Run(test = \"test72\")\n+    @Warmup(0)\n+    public void test72_verifier() {\n@@ -2013,2 +2024,2 @@\n-    @DontCompile\n-    public void test73_verifier(boolean warmup) {\n+    @Run(test = \"test73\")\n+    public void test73_verifier() {\n@@ -2024,2 +2035,2 @@\n-    @DontCompile\n-    public void test74_verifier(boolean warmup) {\n+    @Run(test = \"test74\")\n+    public void test74_verifier() {\n@@ -2045,2 +2056,2 @@\n-    @DontCompile\n-    public void test75_verifier(boolean warmup) {\n+    @Run(test = \"test75\")\n+    public void test75_verifier() {\n@@ -2061,2 +2072,2 @@\n-    @DontCompile\n-    public void test76_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test76\")\n+    public void test76_verifier() throws Throwable {\n@@ -2084,2 +2095,2 @@\n-    @DontCompile\n-    public void test77_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test77\")\n+    public void test77_verifier() throws Throwable {\n@@ -2107,2 +2118,2 @@\n-    @DontCompile\n-    public void test78_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test78\")\n+    public void test78_verifier() throws Throwable {\n@@ -2127,2 +2138,2 @@\n-    @DontCompile\n-    public void test79_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test79\")\n+    public void test79_verifier() throws Throwable {\n@@ -2172,2 +2183,2 @@\n-    @DontCompile\n-    public void test80_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test80\")\n+    public void test80_verifier() throws Throwable {\n@@ -2183,1 +2194,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE})\n@@ -2197,2 +2209,2 @@\n-    @DontCompile\n-    public void test81_verifier(boolean warmup) {\n+    @Run(test = \"test81\")\n+    public void test81_verifier() {\n@@ -2209,2 +2221,2 @@\n-    @DontCompile\n-    public void test82_verifier(boolean warmup) {\n+    @Run(test = \"test82\")\n+    public void test82_verifier(RunInfo info) {\n@@ -2213,1 +2225,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2224,1 +2236,0 @@\n-    @Warmup(10000)\n@@ -2237,2 +2248,3 @@\n-    @DontCompile\n-    public void test83_verifier(boolean warmup) {\n+    @Run(test = \"test83\")\n+    @Warmup(10000)\n+    public void test83_verifier(RunInfo info) {\n@@ -2242,1 +2254,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2252,3 +2264,1 @@\n-    private void rerun_and_recompile_for(String name, int num, Runnable test) {\n-        Method m = tests.get(name);\n-\n+    private void rerun_and_recompile_for(Method m, int num, Runnable test) {\n@@ -2258,2 +2268,2 @@\n-            if (!WHITE_BOX.isMethodCompiled(m, false)) {\n-                enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+            if (!TestFramework.isCompiled(m)) {\n+                TestFramework.compile(m, CompLevel.C2);\n@@ -2266,2 +2276,2 @@\n-    @Test(match = { COUNTEDLOOP_MAIN }, matchCount = { 2 } )\n-    @Warmup(0)\n+    @Test\n+    @IR(counts = {COUNTEDLOOP_MAIN, \"= 2\"})\n@@ -2274,2 +2284,3 @@\n-    @DontCompile\n-    public void test84_verifier(boolean warmup) {\n+    @Run(test = \"test84\")\n+    @Warmup(0)\n+    public void test84_verifier(RunInfo info) {\n@@ -2279,1 +2290,1 @@\n-        rerun_and_recompile_for(\"TestLWorld::test84\", 10,\n+        rerun_and_recompile_for(info.getTest(), 10,\n@@ -2284,3 +2295,5 @@\n-    @Test(valid = G1GCOn, match = { COUNTEDLOOP, LOAD_UNKNOWN_INLINE }, matchCount = { 2, 1 } )\n-    @Test(valid = G1GCOff, match = { COUNTEDLOOP_MAIN, LOAD_UNKNOWN_INLINE }, matchCount = { 2, 4 } )\n-    @Warmup(0)\n+    @Test\n+    @IR(applyIf = {\"UseG1GC\", \"true\"},\n+        counts = {COUNTEDLOOP, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 1\"})\n+    @IR(applyIf = {\"UseG1GC\", \"false\"},\n+        counts = {COUNTEDLOOP_MAIN, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 4\"})\n@@ -2293,2 +2306,3 @@\n-    @DontCompile\n-    public void test85_verifier(boolean warmup) {\n+    @Run(test = \"test85\")\n+    @Warmup(0)\n+    public void test85_verifier(RunInfo info) {\n@@ -2299,1 +2313,1 @@\n-        rerun_and_recompile_for(\"TestLWorld::test85\", 10,\n+        rerun_and_recompile_for(info.getTest(), 10,\n@@ -2304,3 +2318,5 @@\n-    @Test(valid = G1GCOn, match = { COUNTEDLOOP }, matchCount = { 2 } )\n-    @Test(valid = G1GCOff, match = { COUNTEDLOOP_MAIN }, matchCount = { 2 } )\n-    @Warmup(0)\n+    @Test\n+    @IR(applyIf = {\"UseG1GC\", \"true\"},\n+        counts = {COUNTEDLOOP, \"= 2\"})\n+    @IR(applyIf = {\"UseG1GC\", \"false\"},\n+        counts = {COUNTEDLOOP_MAIN, \"= 2\"})\n@@ -2313,2 +2329,3 @@\n-    @DontCompile\n-    public void test86_verifier(boolean warmup) {\n+    @Run(test = \"test86\")\n+    @Warmup(0)\n+    public void test86_verifier(RunInfo info) {\n@@ -2318,1 +2335,1 @@\n-        rerun_and_recompile_for(\"TestLWorld::test86\", 10,\n+        rerun_and_recompile_for(info.getTest(), 10,\n@@ -2323,2 +2340,2 @@\n-    @Test(match = { COUNTEDLOOP_MAIN }, matchCount = { 2 } )\n-    @Warmup(0)\n+    @Test\n+    @IR(counts = {COUNTEDLOOP_MAIN, \"= 2\"})\n@@ -2331,2 +2348,3 @@\n-    @DontCompile\n-    public void test87_verifier(boolean warmup) {\n+    @Run(test = \"test87\")\n+    @Warmup(0)\n+    public void test87_verifier(RunInfo info) {\n@@ -2337,1 +2355,1 @@\n-        rerun_and_recompile_for(\"TestLWorld::test87\", 10,\n+        rerun_and_recompile_for(info.getTest(), 10,\n@@ -2342,2 +2360,2 @@\n-    @Test(match = { COUNTEDLOOP_MAIN }, matchCount = { 2 } )\n-    @Warmup(0)\n+    @Test\n+    @IR(counts = {COUNTEDLOOP_MAIN, \"= 2\"})\n@@ -2351,2 +2369,3 @@\n-    @DontCompile\n-    public void test88_verifier(boolean warmup) {\n+    @Run(test = \"test88\")\n+    @Warmup(0)\n+    public void test88_verifier(RunInfo info) {\n@@ -2360,1 +2379,1 @@\n-        rerun_and_recompile_for(\"TestLWorld::test88\", 10,\n+        rerun_and_recompile_for(info.getTest(), 10,\n@@ -2371,2 +2390,2 @@\n-    @DontCompile\n-    public void test89_verifier(boolean warmup) {\n+    @Run(test = \"test89\")\n+    public void test89_verifier() {\n@@ -2382,2 +2401,2 @@\n-    @DontCompile\n-    public void test90_verifier(boolean warmup) {\n+    @Run(test = \"test90\")\n+    public void test90_verifier() {\n@@ -2398,2 +2417,2 @@\n-    @DontCompile\n-    public void test91_verifier(boolean warmup) {\n+    @Run(test = \"test91\")\n+    public void test91_verifier() {\n@@ -2411,2 +2430,3 @@\n-    @Warmup(10000)\n-    @Test(match = { CLASS_CHECK_TRAP }, matchCount = { 2 }, failOn = LOAD_UNKNOWN_INLINE + ALLOC_G + MEMBAR)\n+    @Test\n+    @IR(counts = {CLASS_CHECK_TRAP, \"= 2\"},\n+        failOn = {LOAD_UNKNOWN_INLINE, ALLOC_G, MEMBAR})\n@@ -2425,2 +2445,3 @@\n-    @DontCompile\n-    public void test92_verifier(boolean warmup) {\n+    @Run(test = \"test92\")\n+    @Warmup(10000)\n+    public void test92_verifier() {\n@@ -2437,1 +2458,0 @@\n-    @Warmup(10000)\n@@ -2448,3 +2468,4 @@\n-    @DontCompile\n-    public void test93_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test93\")\n+    @Warmup(10000)\n+    public void test93_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -2457,1 +2478,1 @@\n-            Method m = tests.get(\"TestLWorld::test93\");\n+            Method m = info.getTest();\n@@ -2466,4 +2487,5 @@\n-                boolean compiled = isCompiledByC2(m);\n-                Asserts.assertTrue(!USE_COMPILER || XCOMP || STRESS_CC || TEST_C1 || !ProfileInterpreter || compiled || (j != extra-1));\n-                if (!compiled) {\n-                    enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+                boolean compiled = TestFramework.isCompiled(m);\n+                boolean compilationSkipped = info.isCompilationSkipped();\n+                Asserts.assertTrue(compilationSkipped || compiled || (j != extra-1));\n+                if (!compilationSkipped && !compiled) {\n+                    TestFramework.compile(m, CompLevel.ANY);\n@@ -2475,2 +2497,3 @@\n-    @Warmup(10000)\n-    @Test(match = { CLASS_CHECK_TRAP, LOOP }, matchCount = { 2, 1 }, failOn = LOAD_UNKNOWN_INLINE + ALLOC_G + MEMBAR)\n+    @Test\n+    @IR(counts = {CLASS_CHECK_TRAP, \"= 2\", LOOP, \"= 1\"},\n+        failOn = {LOAD_UNKNOWN_INLINE, ALLOC_G, MEMBAR})\n@@ -2486,2 +2509,3 @@\n-    @DontCompile\n-    public void test94_verifier(boolean warmup) {\n+    @Run(test = \"test94\")\n+    @Warmup(10000)\n+    public void test94_verifier() {\n@@ -2497,1 +2521,0 @@\n-    @Warmup(10000)\n@@ -2503,2 +2526,3 @@\n-    @DontCompile\n-    public void test95_verifier(boolean warmup) {\n+    @Run(test = \"test95\")\n+    @Warmup(10000)\n+    public void test95_verifier() {\n@@ -2513,1 +2537,0 @@\n-    @Warmup(10000)\n@@ -2519,2 +2542,3 @@\n-    @DontCompile\n-    public void test96_verifier(boolean warmup) {\n+    @Run(test = \"test96\")\n+    @Warmup(10000)\n+    public void test96_verifier(RunInfo info) {\n@@ -2525,1 +2549,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2553,1 +2577,1 @@\n-    @Test()\n+    @Test\n@@ -2563,2 +2587,2 @@\n-    @DontCompile\n-    public void test97_verifier(boolean warmup) {\n+    @Run(test = \"test97\")\n+    public void test97_verifier() {\n@@ -2586,1 +2610,1 @@\n-    @Test()\n+    @Test\n@@ -2610,2 +2634,2 @@\n-    @DontCompile\n-    public void test98_verifier(boolean warmup) {\n+    @Run(test = \"test98\")\n+    public void test98_verifier() {\n@@ -2632,1 +2656,1 @@\n-    @Test()\n+    @Test\n@@ -2651,2 +2675,2 @@\n-    @DontCompile\n-    public void test99_verifier(boolean warmup) {\n+    @Run(test = \"test99\")\n+    public void test99_verifier() {\n@@ -2670,1 +2694,1 @@\n-    @Test()\n+    @Test\n@@ -2683,2 +2707,2 @@\n-    @DontCompile\n-    public void test100_verifier(boolean warmup) {\n+    @Run(test = \"test100\")\n+    public void test100_verifier() {\n@@ -2694,2 +2718,3 @@\n-    @Test(failOn = ALLOC + STORE + LOOP)\n-    public long test101(MyValue1 arg, boolean deopt) {\n+    @Test\n+    @IR(failOn = {ALLOC, STORE, LOOP})\n+    public long test101(MyValue1 arg, boolean deopt, Method m) {\n@@ -2702,1 +2727,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test101\"));\n+            TestFramework.deoptimize(m);\n@@ -2708,3 +2733,3 @@\n-    @DontCompile\n-    public void test101_verifier(boolean warmup) {\n-        long result = test101(valueField1, !warmup);\n+    @Run(test = \"test101\")\n+    public void test101_verifier(RunInfo info) {\n+        long result = test101(valueField1, !info.isWarmUp(), info.getTest());\n@@ -2715,1 +2740,2 @@\n-    @Test(failOn = LOAD + LOOP)\n+    @Test\n+    @IR(failOn = {LOAD, LOOP})\n@@ -2725,2 +2751,2 @@\n-    @DontCompile\n-    public void test102_verifier(boolean warmup) {\n+    @Run(test = \"test102\")\n+    public void test102_verifier() {\n@@ -2745,1 +2771,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR, ALLOCA_G,\n+                  LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -2750,2 +2778,2 @@\n-    @DontCompile\n-    public void test103_verifier(boolean warmup) {\n+    @Run(test = \"test103\")\n+    public void test103_verifier() {\n@@ -2766,1 +2794,3 @@\n-    @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n+    @Test\n+    @IR(failOn = {ALLOC_G, ALLOCA_G,\n+                  LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -2774,2 +2804,2 @@\n-    @DontCompile\n-    public void test104_verifier(boolean warmup) {\n+    @Run(test = \"test104\")\n+    public void test104_verifier() {\n@@ -2810,1 +2840,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR, ALLOCA_G,\n+                  LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -2815,2 +2847,2 @@\n-    @DontCompile\n-    public void test105_verifier(boolean warmup) {\n+    @Run(test = \"test105\")\n+    public void test105_verifier() {\n@@ -2827,1 +2859,3 @@\n-    @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_INLINE + STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD)\n+    @Test\n+    @IR(failOn = {ALLOC_G, ALLOCA_G,\n+                  LOAD_UNKNOWN_INLINE, STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD})\n@@ -2835,2 +2869,2 @@\n-    @DontCompile\n-    public void test106_verifier(boolean warmup) {\n+    @Run(test = \"test106\")\n+    public void test106_verifier() {\n@@ -2856,3 +2890,7 @@\n-    @Test(valid = G1GCOn, failOn = STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD, match = { COUNTEDLOOP, LOAD_UNKNOWN_INLINE }, matchCount = { 2, 2 } )\n-    @Test(valid = G1GCOff, failOn = STORE_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD, match = { COUNTEDLOOP, LOAD_UNKNOWN_INLINE }, matchCount = { 3, 2 } )\n-    @Warmup(0)\n+    @Test\n+    @IR(applyIf = {\"UseG1GC\", \"true\"},\n+        failOn = {STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD},\n+        counts = {COUNTEDLOOP, \"= 2\", LOAD_UNKNOWN_INLINE, \"= 2\"})\n+    @IR(applyIf = {\"UseG1GC\", \"false\"},\n+        failOn = {STORE_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD},\n+        counts = {COUNTEDLOOP, \"= 3\", LOAD_UNKNOWN_INLINE, \"= 2\"})\n@@ -2866,2 +2904,3 @@\n-    @DontCompile\n-    public void test107_verifier(boolean warmup) {\n+    @Run(test = \"test107\")\n+    @Warmup(0)\n+    public void test107_verifier(RunInfo info) {\n@@ -2873,1 +2912,1 @@\n-        rerun_and_recompile_for(\"TestLWorld::test107\", 10,\n+        rerun_and_recompile_for(info.getTest(), 10,\n@@ -2882,3 +2921,7 @@\n-    @Test(valid = G1GCOn, failOn = LOAD_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD, match = { COUNTEDLOOP, STORE_UNKNOWN_INLINE }, matchCount = { 4, 9 } )\n-    @Test(valid = G1GCOff, failOn = LOAD_UNKNOWN_INLINE + INLINE_ARRAY_NULL_GUARD, match = { COUNTEDLOOP, STORE_UNKNOWN_INLINE }, matchCount = { 4, 12 } )\n-    @Warmup(0)\n+    @Test\n+    @IR(applyIf = {\"UseG1GC\", \"true\"},\n+            failOn = {LOAD_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD},\n+            counts = {COUNTEDLOOP, \"= 4\", STORE_UNKNOWN_INLINE, \"= 9\"})\n+    @IR(applyIf = {\"UseG1GC\", \"false\"},\n+            failOn = {LOAD_UNKNOWN_INLINE, INLINE_ARRAY_NULL_GUARD},\n+            counts = {COUNTEDLOOP, \"= 4\", STORE_UNKNOWN_INLINE, \"= 12\"})\n@@ -2892,2 +2935,3 @@\n-    @DontCompile\n-    public void test108_verifier(boolean warmup) {\n+    @Run(test = \"test108\")\n+    @Warmup(0)\n+    public void test108_verifier(RunInfo info) {\n@@ -2897,1 +2941,1 @@\n-        rerun_and_recompile_for(\"TestLWorld::test108\", 10,\n+        rerun_and_recompile_for(info.getTest(), 10,\n@@ -2922,0 +2966,1 @@\n+    @ForceCompileClassInitializer\n@@ -3018,2 +3063,3 @@\n-    @Warmup(10000) \/\/ Make sure interface calls are inlined\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3028,2 +3074,3 @@\n-    @DontCompile\n-    public void test109_verifier(boolean warmup) {\n+    @Run(test = \"test109\")\n+    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    public void test109_verifier() {\n@@ -3034,2 +3081,3 @@\n-    @Warmup(10000) \/\/ Make sure interface calls are inlined\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3044,2 +3092,3 @@\n-    @DontCompile\n-    public void test109_sharp_verifier(boolean warmup) {\n+    @Run(test = \"test109_sharp\")\n+    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    public void test109_sharp_verifier() {\n@@ -3051,2 +3100,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n-    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3061,2 +3111,3 @@\n-    @DontCompile\n-    public void test110_verifier(boolean warmup) {\n+    @Run(test = \"test110\")\n+    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    public void test110_verifier() {\n@@ -3067,2 +3118,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n-    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3077,2 +3129,3 @@\n-    @DontCompile\n-    public void test110_sharp_verifier(boolean warmup) {\n+    @Run(test = \"test110_sharp\")\n+    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    public void test110_sharp_verifier() {\n@@ -3084,1 +3137,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3093,2 +3148,2 @@\n-    @DontCompile\n-    public void test111_verifier(boolean warmup) {\n+    @Run(test = \"test111\")\n+    public void test111_verifier() {\n@@ -3099,1 +3154,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3108,2 +3165,2 @@\n-    @DontCompile\n-    public void test111_sharp_verifier(boolean warmup) {\n+    @Run(test = \"test111_sharp\")\n+    public void test111_sharp_verifier() {\n@@ -3115,1 +3172,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3124,2 +3183,2 @@\n-    @DontCompile\n-    public void test112_verifier(boolean warmup) {\n+    @Run(test = \"test112\")\n+    public void test112_verifier() {\n@@ -3131,2 +3190,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n-    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3141,2 +3201,3 @@\n-    @DontCompile\n-    public void test113_verifier(boolean warmup) {\n+    @Run(test = \"test113\")\n+    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    public void test113_verifier() {\n@@ -3147,2 +3208,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n-    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3157,2 +3219,3 @@\n-    @DontCompile\n-    public void test113_sharp_verifier(boolean warmup) {\n+    @Run(test = \"test113_sharp\")\n+    @Warmup(10000) \/\/ Make sure interface calls are inlined\n+    public void test113_sharp_verifier() {\n@@ -3214,2 +3277,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n-    @Warmup(10000)\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3224,2 +3288,3 @@\n-    @DontCompile\n-    public void test114_verifier(boolean warmup) {\n+    @Run(test = \"test114\")\n+    @Warmup(10000)\n+    public void test114_verifier() {\n@@ -3231,2 +3296,3 @@\n-    @Test(failOn = ALLOC_G + MEMBAR, match = { PREDICATE_TRAP }, matchCount = { 1 })\n-    @Warmup(10000)\n+    @Test\n+    @IR(failOn = {ALLOC_G, MEMBAR},\n+        counts = {PREDICATE_TRAP, \"= 1\"})\n@@ -3241,2 +3307,3 @@\n-    @DontCompile\n-    public void test115_verifier(boolean warmup) {\n+    @Run(test = \"test115\")\n+    @Warmup(10000)\n+    public void test115_verifier() {\n@@ -3253,1 +3320,2 @@\n-    @Test(failOn = ALLOC + ALLOC_G + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOC_G, LOAD, STORE, TRAP})\n@@ -3261,2 +3329,2 @@\n-    @DontCompile\n-    public void test116_verifier(boolean warmup) {\n+    @Run(test = \"test116\")\n+    public void test116_verifier() {\n@@ -3270,1 +3338,2 @@\n-    @Test(failOn = ALLOC + ALLOC_G)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOC_G})\n@@ -3277,2 +3346,2 @@\n-    @DontCompile\n-    public void test117_verifier(boolean warmup) {\n+    @Run(test = \"test117\")\n+    public void test117_verifier() {\n@@ -3286,1 +3355,2 @@\n-    @Test(failOn = ALLOC + ALLOC_G)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOC_G})\n@@ -3291,2 +3361,2 @@\n-    @DontCompile\n-    public void test118_verifier(boolean warmup) {\n+    @Run(test = \"test118\")\n+    public void test118_verifier() {\n@@ -3308,1 +3378,1 @@\n-    public void test119(boolean deopt) {\n+    public void test119(boolean deopt, Method m) {\n@@ -3314,1 +3384,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test119\"));\n+            TestFramework.deoptimize(m);\n@@ -3321,3 +3391,3 @@\n-    @DontCompile\n-    public void test119_verifier(boolean warmup) {\n-        test119(!warmup);\n+    @Run(test = \"test119\")\n+    public void test119_verifier(RunInfo info) {\n+        test119(!info.isWarmUp(), info.getTest());\n@@ -3327,1 +3397,2 @@\n-    @Test(failOn = ALLOC + ALLOC_G + LOAD + STORE + FIELD_ACCESS + NULL_CHECK_TRAP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOC_G, LOAD, STORE, FIELD_ACCESS, NULL_CHECK_TRAP, TRAP})\n@@ -3334,2 +3405,2 @@\n-    @DontCompile\n-    public void test120_verifier(boolean warmup) {\n+    @Run(test = \"test120\")\n+    public void test120_verifier() {\n@@ -3342,1 +3413,2 @@\n-    @Test(failOn = ALLOC + ALLOC_G + LOAD + STORE + FIELD_ACCESS + NULL_CHECK_TRAP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOC_G, LOAD, STORE, FIELD_ACCESS, NULL_CHECK_TRAP, TRAP})\n@@ -3348,2 +3420,2 @@\n-    @DontCompile\n-    public void test121_verifier(boolean warmup) {\n+    @Run(test = \"test121\")\n+    public void test121_verifier() {\n@@ -3355,1 +3427,1 @@\n-    @Test()\n+    @Test\n@@ -3360,2 +3432,2 @@\n-    @DontCompile\n-    public void test122_verifier(boolean warmup) {\n+    @Run(test = \"test122\")\n+    public void test122_verifier() {\n@@ -3373,1 +3445,1 @@\n-    @Test()\n+    @Test\n@@ -3378,2 +3450,2 @@\n-    @DontCompile\n-    public void test123_verifier(boolean warmup) {\n+    @Run(test = \"test123\")\n+    public void test123_verifier() {\n@@ -3392,1 +3464,2 @@\n-    @Test(failOn = SUBSTITUTABILITY_TEST)\n+    @Test\n+    @IR(failOn = SUBSTITUTABILITY_TEST)\n@@ -3397,2 +3470,2 @@\n-    @DontCompile\n-    public void test124_verifier(boolean warmup) {\n+    @Run(test = \"test124\")\n+    public void test124_verifier() {\n@@ -3404,1 +3477,2 @@\n-    @Test(failOn = SUBSTITUTABILITY_TEST)\n+    @Test\n+    @IR(failOn = {SUBSTITUTABILITY_TEST})\n@@ -3410,2 +3484,2 @@\n-    @DontCompile\n-    public void test125_verifier(boolean warmup) {\n+    @Run(test = \"test125\")\n+    public void test125_verifier() {\n@@ -3417,2 +3491,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE)\n-    @Warmup(10000)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE})\n@@ -3436,2 +3510,3 @@\n-    @DontCompile\n-    public void test126_verifier(boolean warmup) {\n+    @Run(test = \"test126\")\n+    @Warmup(10000)\n+    public void test126_verifier(RunInfo info) {\n@@ -3440,1 +3515,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -3447,2 +3522,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE)\n-    @Warmup(10000)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE})\n@@ -3466,2 +3541,3 @@\n-    @DontCompile\n-    public void test127_verifier(boolean warmup) {\n+    @Run(test = \"test127\")\n+    @Warmup(10000)\n+    public void test127_verifier(RunInfo info) {\n@@ -3470,1 +3546,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -3477,2 +3553,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE)\n-    @Warmup(10000)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE})\n@@ -3496,2 +3572,3 @@\n-    @DontCompile\n-    public void test128_verifier(boolean warmup) {\n+    @Run(test = \"test128\")\n+    @Warmup(10000)\n+    public void test128_verifier(RunInfo info) {\n@@ -3500,1 +3577,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -3507,2 +3584,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE)\n-    @Warmup(10000)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE})\n@@ -3526,2 +3603,3 @@\n-    @DontCompile\n-    public void test129_verifier(boolean warmup) {\n+    @Run(test = \"test129\")\n+    @Warmup(10000)\n+    public void test129_verifier(RunInfo info) {\n@@ -3530,1 +3608,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -3542,1 +3620,1 @@\n-    @Test()\n+    @Test\n@@ -3550,2 +3628,2 @@\n-    @DontCompile\n-    public void test130_verifier(boolean warmup) {\n+    @Run(test = \"test130\")\n+    public void test130_verifier() {\n@@ -3566,1 +3644,1 @@\n-    @Test()\n+    @Test\n@@ -3574,2 +3652,2 @@\n-    @DontCompile\n-    public void test131_verifier(boolean warmup) {\n+    @Run(test = \"test131\")\n+    public void test131_verifier() {\n@@ -3585,2 +3663,1 @@\n-    @Test()\n-    @Warmup(10000)\n+    @Test\n@@ -3601,2 +3678,3 @@\n-    @DontCompile\n-    public void test132_verifier(boolean warmup) {\n+    @Run(test = \"test132\")\n+    @Warmup(10000)\n+    public void test132_verifier() {\n@@ -3612,1 +3690,1 @@\n-    @Test()\n+    @Test\n@@ -3622,2 +3700,2 @@\n-    @DontCompile\n-    public void test133_verifier(boolean warmup) {\n+    @Run(test = \"test133\")\n+    public void test133_verifier() {\n@@ -3634,1 +3712,1 @@\n-    @Test()\n+    @Test\n@@ -3645,2 +3723,2 @@\n-    @DontCompile\n-    public void test134_verifier(boolean warmup) {\n+    @Run(test = \"test134\")\n+    public void test134_verifier() {\n@@ -3656,1 +3734,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + NULL_CHECK_TRAP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n@@ -3662,2 +3741,2 @@\n-    @DontCompile\n-    public void test135_verifier(boolean warmup) {\n+    @Run(test = \"test135\")\n+    public void test135_verifier() {\n@@ -3668,1 +3747,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + NULL_CHECK_TRAP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n@@ -3677,2 +3757,2 @@\n-    @DontCompile\n-    public void test136_verifier(boolean warmup) {\n+    @Run(test = \"test136\")\n+    public void test136_verifier() {\n@@ -3691,1 +3771,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + NULL_CHECK_TRAP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n@@ -3698,2 +3779,2 @@\n-    @DontCompile\n-    public void test137_verifier(boolean warmup) {\n+    @Run(test = \"test137\")\n+    public void test137_verifier() {\n@@ -3704,1 +3785,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + NULL_CHECK_TRAP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, NULL_CHECK_TRAP, TRAP})\n@@ -3715,2 +3797,2 @@\n-    @DontCompile\n-    public void test138_verifier(boolean warmup) {\n+    @Run(test = \"test138\")\n+    public void test138_verifier() {\n@@ -3730,1 +3812,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, TRAP})\n@@ -3736,2 +3819,2 @@\n-    @DontCompile\n-    public void test139_verifier(boolean warmup) {\n+    @Run(test = \"test139\")\n+    public void test139_verifier() {\n@@ -3751,1 +3834,0 @@\n-    @Warmup(0)\n@@ -3757,2 +3839,3 @@\n-    @DontCompile\n-    public void test140_verifier(boolean warmup) {\n+    @Run(test = \"test140\")\n+    @Warmup(0)\n+    public void test140_verifier() {\n@@ -3772,1 +3855,0 @@\n-    @Warmup(0)\n@@ -3778,2 +3860,3 @@\n-    @DontCompile\n-    public void test141_verifier(boolean warmup) {\n+    @Run(test = \"test141\")\n+    @Warmup(0)\n+    public void test141_verifier() {\n@@ -3785,1 +3868,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE})\n@@ -3798,2 +3882,2 @@\n-    @DontCompile\n-    public void test142_verifier(boolean warmup) {\n+    @Run(test = \"test142\")\n+    public void test142_verifier() {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":610,"deletions":526,"binary":false,"changes":1136,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -27,0 +28,2 @@\n+import sun.hotspot.WhiteBox;\n+\n@@ -29,0 +32,3 @@\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.*;\n+\n@@ -33,1 +39,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -35,6 +41,1 @@\n- * @compile TestLWorldProfiling.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI -XX:FlatArrayElementMaxSize=-1\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestLWorldProfiling\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestLWorldProfiling\n@@ -42,44 +43,54 @@\n-public class TestLWorldProfiling extends InlineTypeTest {\n-\n-    static final String[][] scenarios = {\n-        {\"-XX:-UseArrayLoadStoreProfile\",\n-         \"-XX:-UseACmpProfile\",\n-         \"-XX:TypeProfileLevel=0\",\n-         \"-XX:-MonomorphicArrayCheck\" },\n-        { \"-XX:+UseArrayLoadStoreProfile\",\n-          \"-XX:+UseACmpProfile\",\n-          \"-XX:TypeProfileLevel=0\" },\n-        { \"-XX:-UseArrayLoadStoreProfile\",\n-          \"-XX:-UseACmpProfile\",\n-          \"-XX:TypeProfileLevel=222\",\n-          \"-XX:-MonomorphicArrayCheck\" },\n-        { \"-XX:-UseArrayLoadStoreProfile\",\n-          \"-XX:-UseACmpProfile\",\n-          \"-XX:TypeProfileLevel=0\",\n-          \"-XX:-MonomorphicArrayCheck\",\n-          \"-XX:TieredStopAtLevel=4\",\n-          \"-XX:-TieredCompilation\" },\n-        { \"-XX:+UseArrayLoadStoreProfile\",\n-          \"-XX:+UseACmpProfile\",\n-          \"-XX:TypeProfileLevel=0\",\n-          \"-XX:TieredStopAtLevel=4\",\n-          \"-XX:-TieredCompilation\" },\n-        { \"-XX:-UseArrayLoadStoreProfile\",\n-          \"-XX:-UseACmpProfile\",\n-          \"-XX:TypeProfileLevel=222\",\n-          \"-XX:-MonomorphicArrayCheck\",\n-          \"-XX:TieredStopAtLevel=4\",\n-          \"-XX:-TieredCompilation\" }\n-    };\n-\n-    public int getNumScenarios() {\n-        return scenarios.length;\n-    }\n-\n-    public String[] getVMParameters(int scenario) {\n-        return scenarios[scenario];\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        TestLWorldProfiling test = new TestLWorldProfiling();\n-        test.run(args, MyValue1.class, MyValue2.class);\n+\n+@ForceCompileClassInitializer\n+public class TestLWorldProfiling {\n+\n+    public static void main(String[] args) {\n+        final Scenario[] scenarios = {\n+                new Scenario(0,\n+                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:-UseArrayLoadStoreProfile\",\n+                        \"-XX:-UseACmpProfile\",\n+                        \"-XX:TypeProfileLevel=0\",\n+                        \"-XX:-MonomorphicArrayCheck\"),\n+                new Scenario(1,\n+                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:+UseArrayLoadStoreProfile\",\n+                        \"-XX:+UseACmpProfile\",\n+                        \"-XX:TypeProfileLevel=0\"),\n+                new Scenario(2,\n+                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:-UseArrayLoadStoreProfile\",\n+                        \"-XX:-UseACmpProfile\",\n+                        \"-XX:TypeProfileLevel=222\",\n+                        \"-XX:-MonomorphicArrayCheck\"),\n+                new Scenario(3,\n+                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:-UseArrayLoadStoreProfile\",\n+                        \"-XX:-UseACmpProfile\",\n+                        \"-XX:TypeProfileLevel=0\",\n+                        \"-XX:-MonomorphicArrayCheck\",\n+                        \"-XX:TieredStopAtLevel=4\",\n+                        \"-XX:-TieredCompilation\"),\n+                new Scenario(4,\n+                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:+UseArrayLoadStoreProfile\",\n+                        \"-XX:+UseACmpProfile\",\n+                        \"-XX:TypeProfileLevel=0\",\n+                        \"-XX:TieredStopAtLevel=4\",\n+                        \"-XX:-TieredCompilation\"),\n+                new Scenario(5,\n+                        \"-XX:FlatArrayElementMaxSize=-1\",\n+                        \"-XX:-UseArrayLoadStoreProfile\",\n+                        \"-XX:-UseACmpProfile\",\n+                        \"-XX:TypeProfileLevel=222\",\n+                        \"-XX:-MonomorphicArrayCheck\",\n+                        \"-XX:TieredStopAtLevel=4\",\n+                        \"-XX:-TieredCompilation\")\n+        };\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addFlags(\"-XX:+IgnoreUnrecognizedVMOptions\")\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class)\n+                   .start();\n@@ -98,0 +109,10 @@\n+    \/\/ Wrap these variables into helper class because\n+    \/\/ WhiteBox API needs to be initialized by TestFramework first.\n+    static class WBFlags {\n+        static final boolean UseACmpProfile = (Boolean) WhiteBox.getWhiteBox().getVMFlag(\"UseACmpProfile\");\n+        static final boolean TieredCompilation = (Boolean) WhiteBox.getWhiteBox().getVMFlag(\"TieredCompilation\");\n+        static final boolean ProfileInterpreter = (Boolean) WhiteBox.getWhiteBox().getVMFlag(\"ProfileInterpreter\");\n+        static final boolean UseArrayLoadStoreProfile = (Boolean) WhiteBox.getWhiteBox().getVMFlag(\"UseArrayLoadStoreProfile\");\n+        static final long TypeProfileLevel = (Long) WhiteBox.getWhiteBox().getVMFlag(\"TypeProfileLevel\");\n+    }\n+\n@@ -100,4 +121,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, failOn = LOAD_UNKNOWN_INLINE)\n-    @Test(valid = TypeProfileOn, failOn = LOAD_UNKNOWN_INLINE)\n-    @Test(match = { LOAD_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(applyIfOr = {\"UseArrayLoadStoreProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {LOAD_UNKNOWN_INLINE})\n+    @IR(applyIfAnd={\"UseACmpProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {LOAD_UNKNOWN_INLINE, \"= 1\"})\n@@ -108,3 +130,4 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test1\")\n+    @Warmup(10000)\n+    public void test1_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -119,4 +142,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, failOn = LOAD_UNKNOWN_INLINE)\n-    @Test(valid = TypeProfileOn, failOn = LOAD_UNKNOWN_INLINE)\n-    @Test(match = { LOAD_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(applyIfOr = {\"UseArrayLoadStoreProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {LOAD_UNKNOWN_INLINE})\n+    @IR(applyIfAnd = {\"UseArrayLoadStoreProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {LOAD_UNKNOWN_INLINE, \"= 1\"})\n@@ -127,3 +151,4 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test2\")\n+    @Warmup(10000)\n+    public void test2_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -138,2 +163,2 @@\n-    @Warmup(10000)\n-    @Test(match = { LOAD_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {LOAD_UNKNOWN_INLINE, \"= 1\"})\n@@ -144,2 +169,3 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    @Warmup(10000)\n+    public void test3_verifier() {\n@@ -152,3 +178,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, failOn = LOAD_UNKNOWN_INLINE)\n-    @Test(match = { LOAD_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        failOn = {LOAD_UNKNOWN_INLINE})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"false\"},\n+        counts = {LOAD_UNKNOWN_INLINE, \"= 1\"})\n@@ -159,3 +187,4 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test4\")\n+    @Warmup(10000)\n+    public void test4_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -172,2 +201,2 @@\n-    @Warmup(10000)\n-    @Test(match = { LOAD_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {LOAD_UNKNOWN_INLINE, \"= 1\"})\n@@ -178,2 +207,3 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    @Warmup(10000)\n+    public void test5_verifier() {\n@@ -199,4 +229,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, match = { CALL, CLASS_CHECK_TRAP, NULL_CHECK_TRAP, RANGE_CHECK_TRAP }, matchCount = { 3, 1, 1, 1 })\n-    @Test(valid = TypeProfileOn, match = { CALL, CLASS_CHECK_TRAP, NULL_CHECK_TRAP, RANGE_CHECK_TRAP }, matchCount = { 3, 1, 1, 1 })\n-    @Test(match = { CALL, RANGE_CHECK_TRAP, NULL_CHECK_TRAP }, matchCount = { 5, 1, 1 })\n+    @Test\n+    @IR(applyIfOr = {\"UseArrayLoadStoreProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        counts = {CALL, \"= 3\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\", RANGE_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseArrayLoadStoreProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {CALL, \"= 5\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 1\"})\n@@ -209,3 +240,4 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test6\")\n+    @Warmup(10000)\n+    public void test6_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -230,4 +262,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, match = { CALL, CLASS_CHECK_TRAP, NULL_CHECK_TRAP, RANGE_CHECK_TRAP }, matchCount = { 4, 1, 2, 1 })\n-    @Test(valid = TypeProfileOn, match = { CALL, CLASS_CHECK_TRAP, NULL_CHECK_TRAP, RANGE_CHECK_TRAP }, matchCount = { 4, 1, 2, 1 })\n-    @Test(match = { CALL, RANGE_CHECK_TRAP, NULL_CHECK_TRAP }, matchCount = { 6, 1, 2 })\n+    @Test\n+    @IR(applyIfOr = {\"UseArrayLoadStoreProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        counts = {CALL, \"= 4\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 2\", RANGE_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseArrayLoadStoreProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {CALL, \"= 6\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 2\"})\n@@ -240,3 +273,4 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test7\")\n+    @Warmup(10000)\n+    public void test7_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -261,3 +295,7 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, match = { CALL, CLASS_CHECK_TRAP, NULL_CHECK_TRAP, RANGE_CHECK_TRAP, UNHANDLED_TRAP, ALLOC_G }, matchCount = { 6, 1, 2, 1, 1, 1 })\n-    @Test(match = { CALL, RANGE_CHECK_TRAP, NULL_CHECK_TRAP, UNHANDLED_TRAP, ALLOC_G }, matchCount = { 6, 1, 2, 1, 1 })\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        counts = {CALL, \"= 6\", CLASS_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 2\",\n+                  RANGE_CHECK_TRAP, \"= 1\", UNHANDLED_TRAP, \"= 1\", ALLOC_G, \"= 1\"})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"false\"},\n+        counts = {CALL, \"= 6\", RANGE_CHECK_TRAP, \"= 1\", NULL_CHECK_TRAP, \"= 2\",\n+                  UNHANDLED_TRAP, \"= 1\", ALLOC_G, \"= 1\"})\n@@ -270,3 +308,4 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test8\")\n+    @Warmup(10000)\n+    public void test8_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -283,4 +322,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(valid = TypeProfileOn, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(match = { STORE_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(applyIfOr = {\"UseArrayLoadStoreProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {STORE_UNKNOWN_INLINE})\n+    @IR(applyIfAnd = {\"UseArrayLoadStoreProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -291,2 +331,3 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    @Warmup(10000)\n+    public void test9_verifier() {\n@@ -297,4 +338,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(valid = TypeProfileOn, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(match = { STORE_UNKNOWN_INLINE }, matchCount = { 1 })\n+\n+    @Test\n+    @IR(applyIfOr = {\"UseArrayLoadStoreProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {STORE_UNKNOWN_INLINE})\n+    @IR(applyIfAnd = {\"UseArrayLoadStoreProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -305,2 +348,3 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n+    @Run(test = \"test10\")\n+    @Warmup(10000)\n+    public void test10_verifier() {\n@@ -310,2 +354,2 @@\n-    @Warmup(10000)\n-    @Test(match = { STORE_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -316,2 +360,3 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    @Warmup(10000)\n+    public void test11_verifier() {\n@@ -322,3 +367,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(match = { STORE_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        failOn = {STORE_UNKNOWN_INLINE})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"false\"},\n+        counts = {STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -329,2 +376,3 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n+    @Run(test = \"test12\")\n+    @Warmup(10000)\n+    public void test12_verifier() {\n@@ -335,2 +383,2 @@\n-    @Warmup(10000)\n-    @Test(match = { STORE_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -341,2 +389,3 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n+    @Run(test = \"test13\")\n+    @Warmup(10000)\n+    public void test13_verifier() {\n@@ -348,1 +397,0 @@\n-    @Warmup(10000)\n@@ -354,3 +402,4 @@\n-    @DontCompile\n-    public void test14_verifier(boolean warmup) {\n-        if (warmup) {\n+    @Run(test = \"test14\")\n+    @Warmup(10000)\n+    public void test14_verifier(RunInfo info) {\n+        if (info.isWarmUp()) {\n@@ -359,1 +408,1 @@\n-            Method m = tests.get(\"TestLWorldProfiling::test14\");\n+            Method m = info.getTest();\n@@ -363,1 +412,1 @@\n-                if (!WHITE_BOX.isMethodCompiled(m, false)) {\n+                if (!info.isCompilationSkipped() && !TestFramework.isCompiled(m)) {\n@@ -367,1 +416,3 @@\n-            if (deopt && !TieredCompilation && !STRESS_CC && ProfileInterpreter && (UseArrayLoadStoreProfile || TypeProfileLevel == 222)) {\n+\n+            if (deopt && !WBFlags.TieredCompilation && WBFlags.ProfileInterpreter &&\n+                         (WBFlags.UseArrayLoadStoreProfile || WBFlags.TypeProfileLevel == 222)) {\n@@ -387,4 +438,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, match = { NULL_CHECK_TRAP }, matchCount = { 2 }, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(valid = TypeProfileOn, match = { NULL_CHECK_TRAP }, matchCount = { 2 }, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(match = { NULL_CHECK_TRAP, STORE_UNKNOWN_INLINE }, matchCount = { 3, 1 })\n+    @Test\n+    @IR(applyIfOr = {\"UseArrayLoadStoreProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        counts = {NULL_CHECK_TRAP, \"= 2\"},\n+        failOn = {STORE_UNKNOWN_INLINE})\n+    @IR(applyIfAnd = {\"UseArrayLoadStoreProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {NULL_CHECK_TRAP, \"= 3\", STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -395,2 +448,3 @@\n-    @DontCompile\n-    public void test15_verifier(boolean warmup) {\n+    @Run(test = \"test15\")\n+    @Warmup(10000)\n+    public void test15_verifier() {\n@@ -406,3 +460,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, match = { NULL_CHECK_TRAP }, matchCount = { 2 }, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(match = { NULL_CHECK_TRAP, STORE_UNKNOWN_INLINE }, matchCount = { 3, 1 })\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        counts = {NULL_CHECK_TRAP, \"= 2\"},\n+        failOn = {STORE_UNKNOWN_INLINE})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"false\"},\n+        counts = {NULL_CHECK_TRAP, \"= 3\", STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -413,2 +470,3 @@\n-    @DontCompile\n-    public void test16_verifier(boolean warmup) {\n+    @Run(test = \"test16\")\n+    @Warmup(10000)\n+    public void test16_verifier() {\n@@ -425,3 +483,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, match = { NULL_CHECK_TRAP }, matchCount = { 1 }, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(match = { NULL_CHECK_TRAP, STORE_UNKNOWN_INLINE }, matchCount = { 3, 1 })\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        counts = {NULL_CHECK_TRAP, \"= 1\"},\n+        failOn = {STORE_UNKNOWN_INLINE})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"false\"},\n+        counts = {NULL_CHECK_TRAP, \"= 3\", STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -432,2 +493,3 @@\n-    @DontCompile\n-    public void test17_verifier(boolean warmup) {\n+    @Run(test = \"test17\")\n+    @Warmup(10000)\n+    public void test17_verifier() {\n@@ -444,3 +506,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, match = { NULL_CHECK_TRAP }, matchCount = { 1 }, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(match = { NULL_CHECK_TRAP, STORE_UNKNOWN_INLINE }, matchCount = { 3, 1 })\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        counts = {NULL_CHECK_TRAP, \"= 1\"},\n+        failOn = {STORE_UNKNOWN_INLINE})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"false\"},\n+        counts = {NULL_CHECK_TRAP, \"= 3\", STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -453,2 +518,3 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    @Warmup(10000)\n+    public void test18_verifier() {\n@@ -464,3 +530,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, failOn = LOAD_UNKNOWN_INLINE)\n-    @Test(match = { LOAD_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        failOn = {LOAD_UNKNOWN_INLINE})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"false\"},\n+        counts = {LOAD_UNKNOWN_INLINE, \"= 1\"})\n@@ -471,2 +539,3 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    @Warmup(10000)\n+    public void test19_verifier() {\n@@ -479,3 +548,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ArrayLoadStoreProfileOn, failOn = STORE_UNKNOWN_INLINE)\n-    @Test(match = { STORE_UNKNOWN_INLINE }, matchCount = { 1 })\n+    @Test\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"true\"},\n+        failOn = {STORE_UNKNOWN_INLINE})\n+    @IR(applyIf = {\"UseArrayLoadStoreProfile\", \"false\"},\n+        counts = {STORE_UNKNOWN_INLINE, \"= 1\"})\n@@ -486,2 +557,3 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    @Warmup(10000)\n+    public void test20_verifier() {\n@@ -495,2 +567,2 @@\n-    @Warmup(10000)\n-    @Test(failOn = SUBSTITUTABILITY_TEST)\n+    @Test\n+    @IR(failOn = {SUBSTITUTABILITY_TEST})\n@@ -501,2 +573,3 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    @Warmup(10000)\n+    public void test21_verifier() {\n@@ -508,3 +581,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_ASSERT_TRAP }, matchCount = { 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_ASSERT_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -515,2 +591,3 @@\n-    @DontCompile\n-    public void test22_verifier(boolean warmup) {\n+    @Run(test = \"test22\")\n+    @Warmup(10000)\n+    public void test22_verifier(RunInfo info) {\n@@ -519,2 +596,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test22\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -522,2 +600,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test22\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -528,4 +606,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_ASSERT_TRAP }, matchCount = { 1})\n-    @Test(valid = TypeProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_ASSERT_TRAP }, matchCount = { 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIfOr = {\"UseACmpProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_ASSERT_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseACmpProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -536,2 +616,3 @@\n-    @DontCompile\n-    public void test23_verifier(boolean warmup) {\n+    @Run(test = \"test23\")\n+    @Warmup(10000)\n+    public void test23_verifier(RunInfo info) {\n@@ -540,2 +621,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test23\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -543,2 +625,2 @@\n-            if (UseACmpProfile || TypeProfileLevel != 0) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test23\"));\n+            if (WBFlags.UseACmpProfile || WBFlags.TypeProfileLevel != 0) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -549,3 +631,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_ASSERT_TRAP }, matchCount = { 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_ASSERT_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -556,2 +641,3 @@\n-    @DontCompile\n-    public void test24_verifier(boolean warmup) {\n+    @Run(test = \"test24\")\n+    @Warmup(10000)\n+    public void test24_verifier(RunInfo info) {\n@@ -560,2 +646,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test24\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -563,2 +650,2 @@\n-             if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test24\"));\n+             if (WBFlags.UseACmpProfile) {\n+                 TestFramework.assertDeoptimizedByC2(m);\n@@ -569,4 +656,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_ASSERT_TRAP }, matchCount = { 1})\n-    @Test(valid = TypeProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_ASSERT_TRAP }, matchCount = { 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIfOr = {\"UseACmpProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_ASSERT_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseACmpProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -577,2 +666,3 @@\n-    @DontCompile\n-    public void test25_verifier(boolean warmup) {\n+    @Run(test = \"test25\")\n+    @Warmup(10000)\n+    public void test25_verifier(RunInfo info) {\n@@ -581,2 +671,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test25\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -584,2 +675,2 @@\n-            if (UseACmpProfile || TypeProfileLevel != 0) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test25\"));\n+            if (WBFlags.UseACmpProfile || WBFlags.TypeProfileLevel != 0) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -591,4 +682,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(valid = TypeProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIfOr = {\"UseACmpProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_CHECK_TRAP, \"= 1\", CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseACmpProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -599,2 +692,3 @@\n-    @DontCompile\n-    public void test26_verifier(boolean warmup) {\n+    @Run(test = \"test26\")\n+    @Warmup(10000)\n+    public void test26_verifier(RunInfo info) {\n@@ -603,2 +697,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test26\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -608,2 +703,2 @@\n-            if (UseACmpProfile || TypeProfileLevel != 0) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test26\"));\n+            if (WBFlags.UseACmpProfile || WBFlags.TypeProfileLevel != 0) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -614,3 +709,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = { NULL_CHECK_TRAP, \"= 1\", CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -621,2 +719,3 @@\n-    @DontCompile\n-    public void test27_verifier(boolean warmup) {\n+    @Run(test = \"test27\")\n+    @Warmup(10000)\n+    public void test27_verifier(RunInfo info) {\n@@ -625,2 +724,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test27\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -630,2 +730,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test27\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -636,4 +736,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(valid = TypeProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIfOr = {\"UseACmpProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_CHECK_TRAP, \"= 1\", CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseACmpProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -644,2 +746,3 @@\n-    @DontCompile\n-    public void test28_verifier(boolean warmup) {\n+    @Run(test = \"test28\")\n+    @Warmup(10000)\n+    public void test28_verifier(RunInfo info) {\n@@ -648,2 +751,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test28\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -653,2 +757,2 @@\n-            if (UseACmpProfile || TypeProfileLevel != 0) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test28\"));\n+            if (WBFlags.UseACmpProfile || WBFlags.TypeProfileLevel != 0) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -659,3 +763,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_CHECK_TRAP, \"= 1\", CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -666,2 +773,3 @@\n-    @DontCompile\n-    public void test29_verifier(boolean warmup) {\n+    @Run(test = \"test29\")\n+    @Warmup(10000)\n+    public void test29_verifier(RunInfo info) {\n@@ -670,2 +778,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test29\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -675,2 +784,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test29\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -681,4 +790,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST + NULL_CHECK_TRAP, match = { CLASS_CHECK_TRAP }, matchCount = { 1})\n-    @Test(valid = TypeProfileOn, failOn = SUBSTITUTABILITY_TEST + NULL_CHECK_TRAP, match = { CLASS_CHECK_TRAP }, matchCount = { 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIfOr = {\"UseACmpProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {SUBSTITUTABILITY_TEST, NULL_CHECK_TRAP},\n+        counts = {CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseACmpProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -689,2 +800,3 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) {\n+    @Run(test = \"test30\")\n+    @Warmup(10000)\n+    public void test30_verifier(RunInfo info) {\n@@ -694,2 +806,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test30\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -699,2 +812,2 @@\n-            if (UseACmpProfile || TypeProfileLevel != 0) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test30\"));\n+            if (WBFlags.UseACmpProfile || WBFlags.TypeProfileLevel != 0) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -705,3 +818,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST + NULL_CHECK_TRAP)\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST, NULL_CHECK_TRAP})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -712,2 +827,3 @@\n-    @DontCompile\n-    public void test31_verifier(boolean warmup) {\n+    @Run(test = \"test31\")\n+    @Warmup(10000)\n+    public void test31_verifier(RunInfo info) {\n@@ -717,2 +833,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test31\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -722,2 +839,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test31\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -729,3 +846,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_CHECK_TRAP, \"= 1\", CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -736,2 +856,3 @@\n-    @DontCompile\n-    public void test32_verifier(boolean warmup) {\n+    @Run(test = \"test32\")\n+    @Warmup(10000)\n+    public void test32_verifier(RunInfo info) {\n@@ -741,2 +862,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test32\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -746,2 +868,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test32\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -752,3 +874,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_CHECK_TRAP, \"= 1\", CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -759,2 +884,3 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) {\n+    @Run(test = \"test33\")\n+    @Warmup(10000)\n+    public void test33_verifier(RunInfo info) {\n@@ -764,2 +890,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test33\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -769,2 +896,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test33\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -775,3 +902,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_CHECK_TRAP, \"= 1\", CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -782,2 +912,3 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n+    @Run(test = \"test34\")\n+    @Warmup(10000)\n+    public void test34_verifier(RunInfo info) {\n@@ -787,2 +918,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test34\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -792,2 +924,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test34\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -798,3 +930,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { NULL_CHECK_TRAP, CLASS_CHECK_TRAP }, matchCount = { 1, 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {NULL_CHECK_TRAP, \"= 1\", CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -805,2 +940,3 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) {\n+    @Run(test = \"test35\")\n+    @Warmup(10000)\n+    public void test35_verifier(RunInfo info) {\n@@ -810,2 +946,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test35\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -815,2 +952,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test35\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -821,3 +958,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST + NULL_CHECK_TRAP, match = { CLASS_CHECK_TRAP }, matchCount = { 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST, NULL_CHECK_TRAP},\n+        counts = {CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -828,2 +968,3 @@\n-    @DontCompile\n-    public void test36_verifier(boolean warmup) {\n+    @Run(test = \"test36\")\n+    @Warmup(10000)\n+    public void test36_verifier(RunInfo info) {\n@@ -833,2 +974,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test36\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -838,2 +980,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test36\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -844,3 +986,5 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST + NULL_CHECK_TRAP)\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1})\n+    @Test\n+    @IR(applyIf = {\"UseACmpProfile\", \"true\"},\n+        failOn = {SUBSTITUTABILITY_TEST, NULL_CHECK_TRAP})\n+    @IR(applyIf = {\"UseACmpProfile\", \"false\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -851,2 +995,3 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) {\n+    @Run(test = \"test37\")\n+    @Warmup(10000)\n+    public void test37_verifier(RunInfo info) {\n@@ -856,2 +1001,3 @@\n-        if (!warmup) {\n-            assertCompiledByC2(tests.get(\"TestLWorldProfiling::test37\"));\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiledByC2(m);\n@@ -861,2 +1007,2 @@\n-            if (UseACmpProfile) {\n-                assertDeoptimizedByC2(tests.get(\"TestLWorldProfiling::test37\"));\n+            if (WBFlags.UseACmpProfile) {\n+                TestFramework.assertDeoptimizedByC2(m);\n@@ -869,4 +1015,6 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { CLASS_CHECK_TRAP }, matchCount = { 1})\n-    @Test(valid = TypeProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { CLASS_CHECK_TRAP }, matchCount = { 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1 })\n+    @Test\n+    @IR(applyIfOr = {\"UseACmpProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseACmpProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -888,2 +1036,3 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n+    @Run(test = \"test38\")\n+    @Warmup(10000)\n+    public void test38_verifier() {\n@@ -894,4 +1043,7 @@\n-    @Warmup(10000)\n-    @Test(valid = ACmpProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { CLASS_CHECK_TRAP }, matchCount = { 1})\n-    @Test(valid = TypeProfileOn, failOn = SUBSTITUTABILITY_TEST, match = { CLASS_CHECK_TRAP }, matchCount = { 1})\n-    @Test(match = { SUBSTITUTABILITY_TEST }, matchCount = { 1 })\n+\n+    @Test\n+    @IR(applyIfOr = {\"UseACmpProfile\", \"true\", \"TypeProfileLevel\", \"= 222\"},\n+        failOn = {SUBSTITUTABILITY_TEST},\n+        counts = {CLASS_CHECK_TRAP, \"= 1\"})\n+    @IR(applyIfAnd = {\"UseACmpProfile\", \"false\", \"TypeProfileLevel\", \"!= 222\"},\n+        counts = {SUBSTITUTABILITY_TEST, \"= 1\"})\n@@ -913,2 +1065,3 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n+    @Run(test = \"test39\")\n+    @Warmup(10000)\n+    public void test39_verifier() {\n@@ -929,2 +1082,1 @@\n-    @Warmup(10000)\n-    @Test()\n+    @Test\n@@ -935,2 +1087,3 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) {\n+    @Run(test = \"test40\")\n+    @Warmup(10000)\n+    public void test40_verifier(RunInfo info) {\n@@ -940,1 +1093,1 @@\n-        if (warmup) {\n+        if (info.isWarmUp()) {\n@@ -955,2 +1108,1 @@\n-    @Warmup(10000)\n-    @Test()\n+    @Test\n@@ -961,2 +1113,3 @@\n-    @DontCompile\n-    public void test41_verifier(boolean warmup) {\n+    @Run(test = \"test41\")\n+    @Warmup(10000)\n+    public void test41_verifier(RunInfo info) {\n@@ -966,1 +1119,1 @@\n-        if (warmup) {\n+        if (info.isWarmUp()) {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":490,"deletions":337,"binary":false,"changes":827,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,7 @@\n-import java.lang.invoke.*;\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+import sun.hotspot.WhiteBox;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n@@ -29,1 +35,2 @@\n-import jdk.test.lib.Asserts;\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.*;\n@@ -35,1 +42,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -37,6 +44,1 @@\n- * @compile TestMethodHandles.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestMethodHandles\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestMethodHandles\n@@ -44,11 +46,3 @@\n-public class TestMethodHandles extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        \/\/ Prevent inlining through MethodHandle linkTo adapters to stress the calling convention\n-        case 2: return new String[] {\"-DVerifyIR=false\", \"-XX:CompileCommand=dontinline,java.lang.invoke.DirectMethodHandle::internalMemberName\"};\n-        case 4: return new String[] {\"-XX:CompileCommand=dontinline,java.lang.invoke.DirectMethodHandle::internalMemberName\"};\n-        }\n-        return null;\n-    }\n+\n+@ForceCompileClassInitializer\n+public class TestMethodHandles {\n@@ -135,3 +129,16 @@\n-    public static void main(String[] args) throws Throwable {\n-        TestMethodHandles test = new TestMethodHandles();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class, MyValue3.class, MyValue3Inline.class);\n+    public static void main(String[] args) {\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+\n+        \/\/ Prevent inlining through MethodHandle linkTo adapters to stress the calling convention\n+        scenarios[2].addFlags(\"-DVerifyIR=false\",\n+                              \"-XX:CompileCommand=dontinline,java.lang.invoke.DirectMethodHandle::internalMemberName\");\n+        scenarios[4].addFlags(\"-XX:CompileCommand=dontinline,java.lang.invoke.DirectMethodHandle::internalMemberName\");\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class,\n+                                     MyValue3.class,\n+                                     MyValue3Inline.class)\n+                   .start();\n@@ -150,2 +157,5 @@\n-    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + STORE + CALL)\n-    @Test(valid = InlineTypeReturnedAsFieldsOff, match = { ALLOC, STORE }, matchCount = { 1, 14 })\n+    @Test\n+    @IR(applyIf = {\"InlineTypeReturnedAsFields\", \"true\"},\n+        failOn = {ALLOC, STORE, CALL})\n+    @IR(applyIf = {\"InlineTypeReturnedAsFields\", \"false\"},\n+        counts = {ALLOC, \"= 1\", STORE, \"= 14\"})\n@@ -156,2 +166,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() throws Throwable {\n@@ -176,6 +186,7 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) throws Throwable {\n-        Method helper_m = getClass().getDeclaredMethod(\"test2_target\");\n-        if (!warmup && USE_COMPILER && !WHITE_BOX.isMethodCompiled(helper_m, false)) {\n-            enqueueMethodForCompilation(helper_m, COMP_LEVEL_FULL_OPTIMIZATION);\n-            Asserts.assertTrue(WHITE_BOX.isMethodCompiled(helper_m, false), \"test2_target not compiled\");\n+    @Run(test = \"test2\")\n+    public void test2_verifier(RunInfo info) throws Throwable {\n+        if (!info.isWarmUp()) {\n+            Method helper_m = getClass().getDeclaredMethod(\"test2_target\");\n+            if (!TestFramework.isCompiled(helper_m)) {\n+                TestFramework.compile(helper_m, CompLevel.C2);\n+            }\n@@ -201,2 +212,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test3\")\n+    public void test3_verifier(RunInfo info) throws Throwable {\n@@ -206,1 +217,1 @@\n-        WHITE_BOX.testSetDontInlineMethod(m, warmup);\n+        WhiteBox.getWhiteBox().testSetDontInlineMethod(m, info.isWarmUp());\n@@ -231,2 +242,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() throws Throwable {\n@@ -250,2 +261,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() throws Throwable {\n@@ -278,2 +289,3 @@\n-    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + ALLOCA + STORE + STORE_INLINE_FIELDS)\n-    @Test(valid = InlineTypeReturnedAsFieldsOff)\n+    @Test\n+    @IR(applyIf = {\"InlineTypeReturnedAsFields\", \"true\"},\n+        failOn = {ALLOC, ALLOCA, STORE, STORE_INLINE_FIELDS})\n@@ -284,2 +296,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() throws Throwable {\n@@ -317,2 +329,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() throws Throwable {\n@@ -350,2 +362,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() throws Throwable {\n@@ -391,3 +403,4 @@\n-    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + ALLOCA + STORE + STORE_INLINE_FIELDS)\n-    @Test(valid = InlineTypeReturnedAsFieldsOff)\n-    public MyValue3 test9() throws Throwable {\n+    @Test\n+    @IR(applyIf = {\"InlineTypeReturnedAsFields\", \"true\"},\n+        failOn = {ALLOC, ALLOCA, STORE, STORE_INLINE_FIELDS})\n+   public MyValue3 test9() throws Throwable {\n@@ -398,2 +411,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() throws Throwable {\n@@ -446,2 +459,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() throws Throwable {\n@@ -480,1 +493,0 @@\n-    @Warmup(11000)\n@@ -485,2 +497,3 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test11\")\n+    @Warmup(11000)\n+    public void test11_verifier() throws Throwable {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":72,"deletions":59,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import compiler.lib.ir_framework.CompLevel;\n+import compiler.lib.ir_framework.TestFramework;\n@@ -1807,1 +1809,1 @@\n-                InlineTypeTest.enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+                TestFramework.compile(m, CompLevel.ANY);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,6 @@\n+import compiler.lib.ir_framework.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rI;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rL;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rD;\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+\n@@ -34,1 +40,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -36,6 +42,1 @@\n- * @compile TestNullableArrays.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestNullableArrays\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestNullableArrays\n@@ -43,12 +44,0 @@\n-public class TestNullableArrays extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 2: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\"};\n-        case 3: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\"};\n-        case 4: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\"};\n-        case 5: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\"};\n-        }\n-        return null;\n-    }\n@@ -56,3 +45,17 @@\n-    public static void main(String[] args) throws Throwable {\n-        TestNullableArrays test = new TestNullableArrays();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class);\n+@ForceCompileClassInitializer\n+public class TestNullableArrays {\n+\n+    public static void main(String[] args) {\n+\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+        scenarios[2].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\");\n+        scenarios[4].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\");\n+        scenarios[5].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class)\n+                   .start();\n@@ -74,2 +77,6 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, match = { ALLOCA }, matchCount = { 1 })\n-    @Test(valid = InlineTypeArrayFlattenOff, match = { ALLOCA }, matchCount = { 1 }, failOn = LOAD)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        counts = {ALLOCA, \"= 1\"})\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"!= -1\"},\n+        counts = {ALLOCA, \"= 1\"},\n+        failOn = LOAD)\n@@ -87,2 +94,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -100,1 +107,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -107,2 +115,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -115,1 +123,2 @@\n-    @Test(failOn = ALLOCA)\n+    @Test\n+    @IR(failOn = {ALLOCA})\n@@ -128,2 +137,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -147,1 +156,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOAD, STORE, LOOP, TRAP})\n@@ -152,2 +162,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -190,2 +200,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -209,1 +219,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -215,2 +226,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -223,1 +234,2 @@\n-    @Test(failOn = LOAD)\n+    @Test\n+    @IR(failOn = LOAD)\n@@ -228,2 +240,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n@@ -239,1 +251,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, LOAD, STORE, LOOP, TRAP})\n@@ -244,2 +257,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() {\n@@ -253,1 +266,2 @@\n-    @Test(failOn = LOOP)\n+    @Test\n+    @IR(failOn = LOOP)\n@@ -258,2 +272,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n@@ -283,2 +297,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() {\n@@ -316,2 +330,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    public void test11_verifier() {\n@@ -356,2 +370,2 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n+    @Run(test = \"test12\")\n+    public void test12_verifier() {\n@@ -378,2 +392,2 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n+    @Run(test = \"test13\")\n+    public void test13_verifier() {\n@@ -389,2 +403,2 @@\n-    @DontCompile\n-    public void test14_verifier(boolean warmup) {\n+    @Run(test = \"test14\")\n+    public void test14_verifier() {\n@@ -425,2 +439,2 @@\n-    @DontCompile\n-    public void test15_verifier(boolean warmup) {\n+    @Run(test = \"test15\")\n+    public void test15_verifier() {\n@@ -446,2 +460,2 @@\n-    @DontCompile\n-    public void test16_verifier(boolean warmup) {\n+    @Run(test = \"test16\")\n+    public void test16_verifier() {\n@@ -458,2 +472,2 @@\n-    @DontCompile\n-    public void test17_verifier(boolean warmup) {\n+    @Run(test = \"test17\")\n+    public void test17_verifier() {\n@@ -489,2 +503,2 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    public void test18_verifier(RunInfo info) {\n@@ -514,1 +528,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test18\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -536,2 +550,2 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    public void test19_verifier() {\n@@ -551,2 +565,2 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    public void test20_verifier() {\n@@ -595,2 +609,2 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    public void test21_verifier() {\n@@ -642,2 +656,2 @@\n-    @DontCompile\n-    public void test22_verifier(boolean warmup) {\n+    @Run(test = \"test22\")\n+    public void test22_verifier() {\n@@ -672,2 +686,2 @@\n-    @DontCompile\n-    public void test23_verifier(boolean warmup) {\n+    @Run(test = \"test23\")\n+    public void test23_verifier() {\n@@ -699,2 +713,2 @@\n-    @DontCompile\n-    public void test24_verifier(boolean warmup) {\n+    @Run(test = \"test24\")\n+    public void test24_verifier() {\n@@ -743,2 +757,2 @@\n-    @DontCompile\n-    public void test25_verifier(boolean warmup) {\n+    @Run(test = \"test25\")\n+    public void test25_verifier() {\n@@ -782,2 +796,2 @@\n-    @DontCompile\n-    public void test26_verifier(boolean warmup) {\n+    @Run(test = \"test26\")\n+    public void test26_verifier() {\n@@ -821,2 +835,2 @@\n-    @DontCompile\n-    public void test27_verifier(boolean warmup) {\n+    @Run(test = \"test27\")\n+    public void test27_verifier() {\n@@ -857,2 +871,3 @@\n-    @Test(valid = ZGCOff, failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n-    @Test(valid = ZGCOn)\n+    @Test\n+    @IR(applyIf = {\"UseZGC\", \"false\"},\n+        failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -866,2 +881,2 @@\n-    @DontCompile\n-    public void test28_verifier(boolean warmup) {\n+    @Run(test = \"test28\")\n+    public void test28_verifier() {\n@@ -875,1 +890,2 @@\n-    @Test(failOn = ALLOCA + LOOP + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOCA, LOOP, TRAP})\n@@ -882,2 +898,2 @@\n-    @DontCompile\n-    public void test29_verifier(boolean warmup) {\n+    @Run(test = \"test29\")\n+    public void test29_verifier(RunInfo info) {\n@@ -892,1 +908,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -901,1 +917,0 @@\n-    @Warmup(10000)\n@@ -909,2 +924,3 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) {\n+    @Run(test = \"test30\")\n+    @Warmup(10000)\n+    public void test30_verifier(RunInfo info) {\n@@ -917,1 +933,1 @@\n-        MyValue2.ref v = test30(src1, !warmup);\n+        MyValue2.ref v = test30(src1, !info.isWarmUp());\n@@ -919,1 +935,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -929,1 +945,1 @@\n-    public long test31(boolean b, boolean deopt) {\n+    public long test31(boolean b, boolean deopt, Method m) {\n@@ -938,1 +954,1 @@\n-            WHITE_BOX.deoptimizeMethod(tests.get(getClass().getSimpleName() + \"::test31\"));\n+            TestFramework.deoptimize(m);\n@@ -943,2 +959,2 @@\n-    @DontCompile\n-    public void test31_verifier(boolean warmup) {\n+    @Run(test = \"test31\")\n+    public void test31_verifier(RunInfo info) {\n@@ -946,1 +962,1 @@\n-        long result1 = test31(true, !warmup);\n+        long result1 = test31(true, !info.isWarmUp(), info.getTest());\n@@ -949,1 +965,1 @@\n-        long result2 = test31(false, !warmup);\n+        long result2 = test31(false, !info.isWarmUp(), info.getTest());\n@@ -960,2 +976,2 @@\n-    @DontCompile\n-    public void test32_verifier(boolean warmup) {\n+    @Run(test = \"test32\")\n+    public void test32_verifier() {\n@@ -986,2 +1002,2 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) {\n+    @Run(test = \"test33\")\n+    public void test33_verifier() {\n@@ -1023,2 +1039,2 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n+    @Run(test = \"test34\")\n+    public void test34_verifier(RunInfo info) {\n@@ -1030,1 +1046,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test34\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1086,9 +1102,5 @@\n-    static boolean compile_and_run_again_if_deoptimized(boolean warmup, String test) {\n-        if (!warmup) {\n-            Method m = tests.get(test);\n-            if (USE_COMPILER &&  !WHITE_BOX.isMethodCompiled(m, false)) {\n-                if (!InlineTypeArrayFlatten && !XCOMP && !STRESS_CC) {\n-                    throw new RuntimeException(\"Unexpected deoptimization\");\n-                }\n-                enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n-                return true;\n+    static boolean compile_and_run_again_if_deoptimized(RunInfo info) {\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            if (TestFramework.isCompiled(m)) {\n+                TestFramework.compile(m, CompLevel.C2);\n@@ -1106,2 +1118,2 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) {\n+    @Run(test = \"test35\")\n+    public void test35_verifier(RunInfo info) {\n@@ -1116,1 +1128,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test35\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1127,2 +1139,2 @@\n-    @DontCompile\n-    public void test36_verifier(boolean warmup) {\n+    @Run(test = \"test36\")\n+    public void test36_verifier(RunInfo info) {\n@@ -1137,1 +1149,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test36\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1148,2 +1160,2 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) {\n+    @Run(test = \"test37\")\n+    public void test37_verifier(RunInfo info) {\n@@ -1158,1 +1170,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test37\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1165,1 +1177,0 @@\n-    @Warmup(1) \/\/ Avoid early compilation\n@@ -1170,2 +1181,3 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n+    @Run(test = \"test38\")\n+    @Warmup(1) \/\/ Avoid early compilation\n+    public void test38_verifier(RunInfo info) {\n@@ -1180,4 +1192,4 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestNullableArrays::test38\");\n-            assertDeoptimizedByC2(m);\n-            enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertDeoptimizedByC2(m);\n+            TestFramework.compile(m, CompLevel.C2);\n@@ -1186,3 +1198,1 @@\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+            TestFramework.assertCompiled(m);\n@@ -1197,2 +1207,2 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n+    @Run(test = \"test39\")\n+    public void test39_verifier(RunInfo info) {\n@@ -1207,1 +1217,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test39\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1214,1 +1224,0 @@\n-    @Warmup(1) \/\/ Avoid early compilation\n@@ -1219,2 +1228,3 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) {\n+    @Run(test = \"test40\")\n+    @Warmup(1) \/\/ Avoid early compilation\n+    public void test40_verifier(RunInfo info) {\n@@ -1229,4 +1239,4 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestNullableArrays::test40\");\n-            assertDeoptimizedByC2(m);\n-            enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertDeoptimizedByC2(m);\n+            TestFramework.compile(m, CompLevel.C2);\n@@ -1235,3 +1245,1 @@\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+            TestFramework.assertCompiled(m);\n@@ -1246,2 +1254,2 @@\n-    @DontCompile\n-    public void test41_verifier(boolean warmup) {\n+    @Run(test = \"test41\")\n+    public void test41_verifier(RunInfo info) {\n@@ -1256,1 +1264,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test41\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1267,2 +1275,2 @@\n-    @DontCompile\n-    public void test42_verifier(boolean warmup) {\n+    @Run(test = \"test42\")\n+    public void test42_verifier(RunInfo info) {\n@@ -1277,5 +1285,3 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestNullableArrays::test42\");\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiled(m);\n@@ -1291,2 +1297,2 @@\n-    @DontCompile\n-    public void test43_verifier(boolean warmup) {\n+    @Run(test = \"test43\")\n+    public void test43_verifier(RunInfo info) {\n@@ -1300,1 +1306,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test43\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1311,2 +1317,2 @@\n-    @DontCompile\n-    public void test44_verifier(boolean warmup) {\n+    @Run(test = \"test44\")\n+    public void test44_verifier(RunInfo info) {\n@@ -1320,1 +1326,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test44\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1331,2 +1337,2 @@\n-    @DontCompile\n-    public void test45_verifier(boolean warmup) {\n+    @Run(test = \"test45\")\n+    public void test45_verifier(RunInfo info) {\n@@ -1340,1 +1346,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test45\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1347,1 +1353,0 @@\n-    @Warmup(1) \/\/ Avoid early compilation\n@@ -1352,2 +1357,3 @@\n-    @DontCompile\n-    public void test46_verifier(boolean warmup) {\n+    @Run(test = \"test46\")\n+    @Warmup(1) \/\/ Avoid early compilation\n+    public void test46_verifier(RunInfo info) {\n@@ -1361,4 +1367,4 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestNullableArrays::test46\");\n-            assertDeoptimizedByC2(m);\n-            enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertDeoptimizedByC2(m);\n+            TestFramework.compile(m, CompLevel.C2);\n@@ -1367,3 +1373,1 @@\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+            TestFramework.assertCompiled(m);\n@@ -1378,2 +1382,2 @@\n-    @DontCompile\n-    public void test47_verifier(boolean warmup) {\n+    @Run(test = \"test47\")\n+    public void test47_verifier(RunInfo info) {\n@@ -1387,1 +1391,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test47\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1394,1 +1398,0 @@\n-    @Warmup(1) \/\/ Avoid early compilation\n@@ -1399,2 +1402,3 @@\n-    @DontCompile\n-    public void test48_verifier(boolean warmup) {\n+    @Run(test = \"test48\")\n+    @Warmup(1) \/\/ Avoid early compilation\n+    public void test48_verifier(RunInfo info) {\n@@ -1408,4 +1412,4 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestNullableArrays::test48\");\n-            assertDeoptimizedByC2(m);\n-            enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertDeoptimizedByC2(m);\n+            TestFramework.compile(m, CompLevel.C2);\n@@ -1414,3 +1418,1 @@\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+            TestFramework.assertCompiled(m);\n@@ -1425,2 +1427,2 @@\n-    @DontCompile\n-    public void test49_verifier(boolean warmup) {\n+    @Run(test = \"test49\")\n+    public void test49_verifier(RunInfo info) {\n@@ -1434,1 +1436,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test49\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1445,2 +1447,2 @@\n-    @DontCompile\n-    public void test50_verifier(boolean warmup) {\n+    @Run(test = \"test50\")\n+    public void test50_verifier(RunInfo info) {\n@@ -1454,5 +1456,3 @@\n-        if (!warmup) {\n-            Method m = tests.get(\"TestNullableArrays::test50\");\n-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {\n-                throw new RuntimeException(\"unexpected deoptimization\");\n-            }\n+        if (!info.isWarmUp()) {\n+            Method m = info.getTest();\n+            TestFramework.assertCompiled(m);\n@@ -1467,2 +1467,2 @@\n-    @DontCompile\n-    public void test51_verifier(boolean warmup) {\n+    @Run(test = \"test51\")\n+    public void test51_verifier() {\n@@ -1485,2 +1485,2 @@\n-    @DontCompile\n-    public void test52_verifier(boolean warmup) {\n+    @Run(test = \"test52\")\n+    public void test52_verifier() {\n@@ -1499,2 +1499,2 @@\n-    @DontCompile\n-    public void test53_verifier(boolean warmup) {\n+    @Run(test = \"test53\")\n+    public void test53_verifier() {\n@@ -1515,2 +1515,2 @@\n-    @DontCompile\n-    public void test54_verifier(boolean warmup) {\n+    @Run(test = \"test54\")\n+    public void test54_verifier() {\n@@ -1531,2 +1531,2 @@\n-    @DontCompile\n-    public void test55_verifier(boolean warmup) {\n+    @Run(test = \"test55\")\n+    public void test55_verifier() {\n@@ -1547,2 +1547,2 @@\n-    @DontCompile\n-    public void test56_verifier(boolean warmup) {\n+    @Run(test = \"test56\")\n+    public void test56_verifier() {\n@@ -1563,2 +1563,2 @@\n-    @DontCompile\n-    public void test57_verifier(boolean warmup) {\n+    @Run(test = \"test57\")\n+    public void test57_verifier() {\n@@ -1579,2 +1579,2 @@\n-    @DontCompile\n-    public void test58_verifier(boolean warmup) {\n+    @Run(test = \"test58\")\n+    public void test58_verifier(RunInfo info) {\n@@ -1590,1 +1590,1 @@\n-        if (compile_and_run_again_if_deoptimized(warmup, \"TestNullableArrays::test58\")) {\n+        if (compile_and_run_again_if_deoptimized(info)) {\n@@ -1601,2 +1601,2 @@\n-    @DontCompile\n-    public void test59_verifier(boolean warmup) {\n+    @Run(test = \"test59\")\n+    public void test59_verifier() {\n@@ -1619,2 +1619,2 @@\n-    @DontCompile\n-    public void test60_verifier(boolean warmup) {\n+    @Run(test = \"test60\")\n+    public void test60_verifier() {\n@@ -1637,2 +1637,2 @@\n-    @DontCompile\n-    public void test61_verifier(boolean warmup) {\n+    @Run(test = \"test61\")\n+    public void test61_verifier() {\n@@ -1671,2 +1671,2 @@\n-    @DontCompile\n-    public void test62_verifier(boolean warmup) {\n+    @Run(test = \"test62\")\n+    public void test62_verifier() {\n@@ -1707,2 +1707,2 @@\n-    @DontCompile\n-    public void test63_verifier(boolean warmup) {\n+    @Run(test = \"test63\")\n+    public void test63_verifier() {\n@@ -1728,2 +1728,2 @@\n-    @DontCompile\n-    public void test64_verifier(boolean warmup) {\n+    @Run(test = \"test64\")\n+    public void test64_verifier() {\n@@ -1742,2 +1742,2 @@\n-    @DontCompile\n-    public void test65_verifier(boolean warmup) {\n+    @Run(test = \"test65\")\n+    public void test65_verifier() {\n@@ -1751,1 +1751,2 @@\n-    @Test(match = { ALLOCA }, matchCount = { 1 })\n+    @Test\n+    @IR(counts = {ALLOCA, \"= 1\"})\n@@ -1758,2 +1759,2 @@\n-    @DontCompile\n-    public void test66_verifier(boolean warmup) {\n+    @Run(test = \"test66\")\n+    public void test66_verifier() {\n@@ -1773,2 +1774,2 @@\n-    @DontCompile\n-    public void test67_verifier(boolean warmup) {\n+    @Run(test = \"test67\")\n+    public void test67_verifier() {\n@@ -1790,2 +1791,2 @@\n-    @DontCompile\n-    public void test68_verifier(boolean warmup) {\n+    @Run(test = \"test68\")\n+    public void test68_verifier() {\n@@ -1807,2 +1808,2 @@\n-    @DontCompile\n-    public void test69_verifier(boolean warmup) {\n+    @Run(test = \"test69\")\n+    public void test69_verifier() {\n@@ -1830,2 +1831,2 @@\n-    @DontCompile\n-    public void test70_verifier(boolean warmup) {\n+    @Run(test = \"test70\")\n+    public void test70_verifier() {\n@@ -1858,2 +1859,2 @@\n-    @DontCompile\n-    public void test71_verifier(boolean warmup) {\n+    @Run(test = \"test71\")\n+    public void test71_verifier() {\n@@ -1875,2 +1876,2 @@\n-    @DontCompile\n-    public void test72_verifier(boolean warmup) {\n+    @Run(test = \"test72\")\n+    public void test72_verifier() {\n@@ -1894,2 +1895,2 @@\n-    @DontCompile\n-    public void test73_verifier(boolean warmup) {\n+    @Run(test = \"test73\")\n+    public void test73_verifier() {\n@@ -1931,2 +1932,2 @@\n-    @DontCompile\n-    public void test74_verifier(boolean warmup) {\n+    @Run(test = \"test74\")\n+    public void test74_verifier() {\n@@ -1969,2 +1970,2 @@\n-    @DontCompile\n-    public void test75_verifier(boolean warmup) {\n+    @Run(test = \"test75\")\n+    public void test75_verifier() {\n@@ -2006,2 +2007,2 @@\n-    @DontCompile\n-    public void test76_verifier(boolean warmup) {\n+    @Run(test = \"test76\")\n+    public void test76_verifier() {\n@@ -2053,2 +2054,2 @@\n-    @DontCompile\n-    public void test77_verifier(boolean warmup) {\n+    @Run(test = \"test77\")\n+    public void test77_verifier() {\n@@ -2089,2 +2090,2 @@\n-    @DontCompile\n-    public void test78_verifier(boolean warmup) {\n+    @Run(test = \"test78\")\n+    public void test78_verifier() {\n@@ -2118,1 +2119,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -2123,2 +2125,2 @@\n-    @DontCompile\n-    public void test79_verifier(boolean warmup) {\n+    @Run(test = \"test79\")\n+    public void test79_verifier() {\n@@ -2140,1 +2142,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -2145,2 +2148,2 @@\n-    @DontCompile\n-    public void test80_verifier(boolean warmup) {\n+    @Run(test = \"test80\")\n+    public void test80_verifier() {\n@@ -2173,2 +2176,2 @@\n-    @DontCompile\n-    public void test81_verifier(boolean warmup) {\n+    @Run(test = \"test81\")\n+    public void test81_verifier() {\n@@ -2217,2 +2220,2 @@\n-    @DontCompile\n-    public void test82_verifier(boolean warmup) {\n+    @Run(test = \"test82\")\n+    public void test82_verifier() {\n@@ -2240,1 +2243,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, STORE})\n@@ -2246,2 +2250,2 @@\n-    @DontCompile\n-    public void test83_verifier(boolean warmup) {\n+    @Run(test = \"test83\")\n+    public void test83_verifier() {\n@@ -2254,2 +2258,3 @@\n-    @Test(valid = InlineTypeArrayFlattenOn, failOn = ALLOC + LOOP + STORE + TRAP)\n-    @Test(valid = InlineTypeArrayFlattenOff)\n+    @Test\n+    @IR(applyIf = {\"FlatArrayElementMaxSize\", \"= -1\"},\n+        failOn = {ALLOC, LOOP, STORE, TRAP})\n@@ -2263,2 +2268,2 @@\n-    @DontCompile\n-    public void test84_verifier(boolean warmup) {\n+    @Run(test = \"test84\")\n+    public void test84_verifier() {\n@@ -2282,2 +2287,2 @@\n-    @DontCompile\n-    public void test85_verifier(boolean warmup) {\n+    @Run(test = \"test85\")\n+    public void test85_verifier() {\n@@ -2303,2 +2308,2 @@\n-    @DontCompile\n-    public void test86_verifier(boolean warmup) {\n+    @Run(test = \"test86\")\n+    public void test86_verifier() {\n@@ -2334,2 +2339,2 @@\n-    @DontCompile\n-    public void test87_verifier(boolean warmup) {\n+    @Run(test = \"test87\")\n+    public void test87_verifier() {\n@@ -2341,1 +2346,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -2346,2 +2352,2 @@\n-    @DontCompile\n-    public void test88_verifier(boolean warmup) {\n+    @Run(test = \"test88\")\n+    public void test88_verifier() {\n@@ -2363,1 +2369,2 @@\n-    @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)\n+    @Test\n+    @IR(failOn = {ALLOC, ALLOCA, LOOP, LOAD, STORE, TRAP})\n@@ -2368,2 +2375,2 @@\n-    @DontCompile\n-    public void test89_verifier(boolean warmup) {\n+    @Run(test = \"test89\")\n+    public void test89_verifier() {\n@@ -2390,2 +2397,2 @@\n-    @DontCompile\n-    public void test90_verifier(boolean warmup) {\n+    @Run(test = \"test90\")\n+    public void test90_verifier() {\n@@ -2410,2 +2417,2 @@\n-    @DontCompile\n-    public void test91_verifier(boolean warmup) {\n+    @Run(test = \"test91\")\n+    public void test91_verifier() {\n@@ -2431,2 +2438,2 @@\n-    @DontCompile\n-    public void test92_verifier(boolean warmup) {\n+    @Run(test = \"test92\")\n+    public void test92_verifier() {\n@@ -2447,2 +2454,2 @@\n-    @DontCompile\n-    public void test93_verifier(boolean warmup) {\n+    @Run(test = \"test93\")\n+    public void test93_verifier() {\n@@ -2471,2 +2478,2 @@\n-    @DontCompile\n-    public static void test94_verifier(boolean warmup) {\n+    @Run(test = \"test94\")\n+    public static void test94_verifier() {\n@@ -2486,1 +2493,0 @@\n-    @Warmup(0)\n@@ -2491,2 +2497,3 @@\n-    @DontCompile\n-    public void test95_verifier(boolean warmup) {\n+    @Run(test = \"test95\")\n+    @Warmup(0)\n+    public void test95_verifier() {\n@@ -2545,2 +2552,2 @@\n-    @DontCompile\n-    public void test96_verifier(boolean warmup) {\n+    @Run(test = \"test96\")\n+    public void test96_verifier() {\n@@ -2559,1 +2566,2 @@\n-    @Test(failOn = LOAD_UNKNOWN_INLINE)\n+    @Test\n+    @IR(failOn = {LOAD_UNKNOWN_INLINE})\n@@ -2564,2 +2572,2 @@\n-    @DontCompile\n-    public static void test97_verifier(boolean warmup) {\n+    @Run(test = \"test97\")\n+    public static void test97_verifier() {\n@@ -2580,2 +2588,2 @@\n-    @DontCompile\n-    public static void test98_verifier(boolean warmup) {\n+    @Run(test = \"test98\")\n+    public static void test98_verifier(RunInfo info) {\n@@ -2589,1 +2597,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2604,2 +2612,2 @@\n-    @DontCompile\n-    public static void test99_verifier(boolean warmup) {\n+    @Run(test = \"test99\")\n+    public static void test99_verifier(RunInfo info) {\n@@ -2613,1 +2621,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2628,2 +2636,2 @@\n-    @DontCompile\n-    public static void test100_verifier(boolean warmup) {\n+    @Run(test = \"test100\")\n+    public static void test100_verifier(RunInfo info) {\n@@ -2637,1 +2645,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2648,1 +2656,2 @@\n-    @Test(failOn = STORE_UNKNOWN_INLINE)\n+    @Test\n+    @IR(failOn = STORE_UNKNOWN_INLINE)\n@@ -2653,2 +2662,2 @@\n-    @DontCompile\n-    public static void test101_verifier(boolean warmup) {\n+    @Run(test = \"test101\")\n+    public static void test101_verifier() {\n@@ -2669,2 +2678,2 @@\n-    @DontCompile\n-    public static void test102_verifier(boolean warmup) {\n+    @Run(test = \"test102\")\n+    public static void test102_verifier(RunInfo info) {\n@@ -2678,1 +2687,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2695,2 +2704,2 @@\n-    @DontCompile\n-    public static void test103_verifier(boolean warmup) {\n+    @Run(test = \"test103\")\n+    public static void test103_verifier(RunInfo info) {\n@@ -2704,1 +2713,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2720,2 +2729,2 @@\n-    @DontCompile\n-    public static void test104_verifier(boolean warmup) {\n+    @Run(test = \"test104\")\n+    public static void test104_verifier(RunInfo info) {\n@@ -2729,1 +2738,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2744,2 +2753,2 @@\n-    @DontCompile\n-    public static void test105_verifier(boolean warmup) {\n+    @Run(test = \"test105\")\n+    public static void test105_verifier(RunInfo info) {\n@@ -2753,1 +2762,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2778,2 +2787,2 @@\n-    @DontCompile\n-    public static void test106_verifier(boolean warmup) {\n+    @Run(test = \"test106\")\n+    public static void test106_verifier(RunInfo info) {\n@@ -2788,1 +2797,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -2817,2 +2826,2 @@\n-    @DontCompile\n-    public void test107_verifier(boolean warmup) {\n+    @Run(test = \"test107\")\n+    public void test107_verifier() {\n@@ -2823,1 +2832,0 @@\n-    @Warmup(10000)\n@@ -2831,2 +2839,3 @@\n-    @DontCompile\n-    public void test108_verifier(boolean warmup) {\n+    @Run(test = \"test108\")\n+    @Warmup(10000)\n+    public void test108_verifier(RunInfo info) {\n@@ -2834,1 +2843,1 @@\n-        test108(src, !warmup);\n+        test108(src, !info.isWarmUp());\n@@ -2847,2 +2856,2 @@\n-    @DontCompile\n-    public void test109_verifier(boolean warmup) {\n+    @Run(test = \"test109\")\n+    public void test109_verifier() {\n@@ -2862,2 +2871,2 @@\n-    @DontCompile\n-    public void test110_verifier(boolean warmup) {\n+    @Run(test = \"test110\")\n+    public void test110_verifier() {\n@@ -2876,2 +2885,2 @@\n-    @DontCompile\n-    public void test111_verifier(boolean warmup) {\n+    @Run(test = \"test111\")\n+    public void test111_verifier() {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":359,"deletions":350,"binary":false,"changes":709,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,6 @@\n-import java.lang.invoke.*;\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n@@ -29,1 +34,4 @@\n-import jdk.test.lib.Asserts;\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.ALLOC;\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.STORE;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rI;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rL;\n@@ -35,1 +43,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -37,6 +45,1 @@\n- * @compile TestNullableInlineTypes.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestNullableInlineTypes\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestNullableInlineTypes\n@@ -44,10 +47,0 @@\n-public class TestNullableInlineTypes extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 3: return new String[] {\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\"};\n-        case 4: return new String[] {\"-XX:-MonomorphicArrayCheck\"};\n-        }\n-        return null;\n-    }\n@@ -55,3 +48,15 @@\n-    public static void main(String[] args) throws Throwable {\n-        TestNullableInlineTypes test = new TestNullableInlineTypes();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class, Test17Value.class, Test21Value.class);\n+@ForceCompileClassInitializer\n+public class TestNullableInlineTypes {\n+\n+    public static void main(String[] args) {\n+\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\");\n+        scenarios[4].addFlags(\"-XX:-MonomorphicArrayCheck\");\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class)\n+                   .start();\n@@ -98,2 +103,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() throws Throwable {\n@@ -116,2 +121,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -137,2 +142,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -153,2 +158,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -174,2 +179,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -202,2 +207,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -236,2 +241,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() throws Throwable {\n@@ -251,2 +256,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() throws Throwable {\n@@ -268,2 +273,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n@@ -286,2 +291,2 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test10\")\n+    public void test10_verifier() throws Throwable {\n@@ -304,2 +309,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test11\")\n+    public void test11_verifier() throws Throwable {\n@@ -329,2 +334,2 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n+    @Run(test = \"test12\")\n+    public void test12_verifier() {\n@@ -373,2 +378,2 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n+    @Run(test = \"test13\")\n+    public void test13_verifier() {\n@@ -416,2 +421,2 @@\n-    @DontCompile\n-    public void test14_verifier(boolean warmup) {\n+    @Run(test = \"test14\")\n+    public void test14_verifier() {\n@@ -455,2 +460,2 @@\n-    @DontCompile\n-    public void test15_verifier(boolean warmup) {\n+    @Run(test = \"test15\")\n+    public void test15_verifier() {\n@@ -467,1 +472,0 @@\n-    @Warmup(10000) \/\/ Warmup to make sure 'test17_dontinline' is compiled\n@@ -473,2 +477,3 @@\n-    @DontCompile\n-    public void test16_verifier(boolean warmup) throws Exception {\n+    @Run(test = \"test16\")\n+    @Warmup(10000) \/\/ Warmup to make sure 'test17_dontinline' is compiled\n+    public void test16_verifier() throws Exception {\n@@ -499,2 +504,2 @@\n-    @DontCompile\n-    public void test17_verifier(boolean warmup) {\n+    @Run(test = \"test17\")\n+    public void test17_verifier() {\n@@ -522,1 +527,0 @@\n-    @Warmup(11000) \/\/ Make sure lambda forms get compiled\n@@ -528,2 +532,3 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    @Warmup(11000) \/\/ Make sure lambda forms get compiled\n+    public void test18_verifier() {\n@@ -552,1 +557,0 @@\n-    @Warmup(11000) \/\/ Make sure lambda forms get compiled\n@@ -558,2 +562,3 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    @Warmup(11000) \/\/ Make sure lambda forms get compiled\n+    public void test19_verifier() {\n@@ -569,1 +574,0 @@\n-    @Warmup(11000) \/\/ Make sure lambda forms get compiled\n@@ -574,2 +578,3 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    @Warmup(11000) \/\/ Make sure lambda forms get compiled\n+    public void test20_verifier() {\n@@ -621,2 +626,2 @@\n-    @DontCompile\n-    public void test21_verifier(boolean warmup) {\n+    @Run(test = \"test21\")\n+    public void test21_verifier() {\n@@ -636,2 +641,2 @@\n-    @DontCompile\n-    public void test22_verifier(boolean warmup) {\n+    @Run(test = \"test22\")\n+    public void test22_verifier() {\n@@ -651,2 +656,2 @@\n-    @DontCompile\n-    public void test23_verifier(boolean warmup) {\n+    @Run(test = \"test23\")\n+    public void test23_verifier() {\n@@ -670,2 +675,2 @@\n-    @DontCompile\n-    public void test24_verifier(boolean warmup) {\n+    @Run(test = \"test24\")\n+    public void test24_verifier() {\n@@ -685,1 +690,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -693,2 +699,2 @@\n-    @DontCompile\n-    public void test25_verifier(boolean warmup) {\n+    @Run(test = \"test25\")\n+    public void test25_verifier() {\n@@ -702,1 +708,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -707,2 +714,2 @@\n-    @DontCompile\n-    public void test26_verifier(boolean warmup) {\n+    @Run(test = \"test26\")\n+    public void test26_verifier() {\n@@ -714,1 +721,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -719,2 +727,2 @@\n-    @DontCompile\n-    public void test27_verifier(boolean warmup) {\n+    @Run(test = \"test27\")\n+    public void test27_verifier() {\n@@ -741,2 +749,2 @@\n-    @DontCompile\n-    public void test28_verifier(boolean warmup) {\n+    @Run(test = \"test28\")\n+    public void test28_verifier() {\n@@ -773,2 +781,2 @@\n-    @DontCompile\n-    public void test29_verifier(boolean warmup) {\n+    @Run(test = \"test29\")\n+    public void test29_verifier() {\n@@ -798,2 +806,2 @@\n-    @DontCompile\n-    public void test30_verifier(boolean warmup) {\n+    @Run(test = \"test30\")\n+    public void test30_verifier() {\n@@ -819,2 +827,2 @@\n-    @DontCompile\n-    public void test31_verifier(boolean warmup) {\n+    @Run(test = \"test31\")\n+    public void test31_verifier() {\n@@ -831,2 +839,2 @@\n-    @DontCompile\n-    public void test32_verifier(boolean warmup) {\n+    @Run(test = \"test32\")\n+    public void test32_verifier() {\n@@ -856,2 +864,2 @@\n-    @DontCompile\n-    public void test33_verifier(boolean warmup) {\n+    @Run(test = \"test33\")\n+    public void test33_verifier() {\n@@ -873,2 +881,2 @@\n-    @DontCompile\n-    public void test34_verifier(boolean warmup) {\n+    @Run(test = \"test34\")\n+    public void test34_verifier(RunInfo info) {\n@@ -876,1 +884,1 @@\n-        if (!warmup) {\n+        if (!info.isWarmUp()) {\n@@ -895,2 +903,2 @@\n-    @DontCompile\n-    public void test35_verifier(boolean warmup) {\n+    @Run(test = \"test35\")\n+    public void test35_verifier() {\n@@ -903,1 +911,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -914,2 +923,2 @@\n-    @DontCompile\n-    public void test37_verifier(boolean warmup) {\n+    @Run(test = \"test37\")\n+    public void test37_verifier() {\n@@ -924,1 +933,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -933,2 +943,2 @@\n-    @DontCompile\n-    public void test38_verifier(boolean warmup) {\n+    @Run(test = \"test38\")\n+    public void test38_verifier() {\n@@ -943,1 +953,2 @@\n-    @Test(failOn = ALLOC + STORE)\n+    @Test\n+    @IR(failOn = {ALLOC, STORE})\n@@ -952,2 +963,2 @@\n-    @DontCompile\n-    public void test39_verifier(boolean warmup) {\n+    @Run(test = \"test39\")\n+    public void test39_verifier() {\n@@ -961,1 +972,1 @@\n-    @Test()\n+    @Test\n@@ -967,2 +978,2 @@\n-    @DontCompile\n-    public void test40_verifier(boolean warmup) throws Throwable {\n+    @Run(test = \"test40\")\n+    public void test40_verifier() throws Throwable {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":124,"deletions":113,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -27,1 +28,4 @@\n-import java.lang.reflect.Method;\n+\n+import static compiler.valhalla.inlinetypes.InlineTypes.IRNode.*;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rI;\n+import static compiler.valhalla.inlinetypes.InlineTypes.rL;\n@@ -33,1 +37,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -35,6 +39,1 @@\n- * @compile TestOnStackReplacement.java\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestOnStackReplacement\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestOnStackReplacement\n@@ -42,9 +41,3 @@\n-public class TestOnStackReplacement extends InlineTypeTest {\n-    \/\/ Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()\n-    @Override\n-    public String[] getExtraVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 3: return new String[] {\"-XX:FlatArrayElementMaxSize=0\"};\n-        }\n-        return null;\n-    }\n+\n+public class TestOnStackReplacement {\n+\n@@ -53,2 +46,11 @@\n-        TestOnStackReplacement test = new TestOnStackReplacement();\n-        test.run(args, MyValue1.class, MyValue2.class, MyValue2Inline.class, MyValue3.class, MyValue3Inline.class);\n+        Scenario[] scenarios = InlineTypes.DEFAULT_SCENARIOS;\n+        scenarios[3].addFlags(\"-XX:FlatArrayElementMaxSize=0\");\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .addHelperClasses(MyValue1.class,\n+                                     MyValue2.class,\n+                                     MyValue2Inline.class,\n+                                     MyValue3.class,\n+                                     MyValue3Inline.class)\n+                   .start();\n@@ -68,1 +70,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -87,2 +89,3 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    @Warmup(0)\n+    public void test1_verifier() {\n@@ -94,1 +97,2 @@\n-    @Test(failOn = ALLOC + LOAD + STORE) @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n+    @IR(failOn = {ALLOC, LOAD, STORE})\n@@ -107,2 +111,3 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    @Warmup(0)\n+    public void test2_verifier() {\n@@ -113,1 +118,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -128,2 +133,3 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    @Warmup(0)\n+    public void test3_verifier() {\n@@ -144,1 +150,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -155,2 +161,3 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    @Warmup(0)\n+    public void test4_verifier() {\n@@ -164,1 +171,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -174,2 +181,3 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    @Warmup(0)\n+    public void test5_verifier() {\n@@ -192,1 +200,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -200,2 +208,3 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    @Warmup(0)\n+    public void test6_verifier() {\n@@ -249,1 +258,1 @@\n-    @Test() @Warmup(0) @OSRCompileOnly\n+    @Test(compLevel = CompLevel.WAIT_FOR_COMPILATION)\n@@ -257,2 +266,3 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    @Warmup(0)\n+    public void test7_verifier() {\n@@ -276,1 +286,1 @@\n-    @Test() @Warmup(2)\n+    @Test\n@@ -287,2 +297,3 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    @Warmup(2)\n+    public void test8_verifier() {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":55,"deletions":44,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,5 @@\n+\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.RunInfo;\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.Test;\n@@ -27,1 +32,3 @@\n-\/**\n+import static compiler.valhalla.inlinetypes.InlineTypes.rI;\n+\n+\/*\n@@ -30,1 +37,0 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n@@ -32,0 +38,2 @@\n+ * @library \/test\/lib \/\n+ * @requires os.simpleArch == \"x64\"\n@@ -34,6 +42,1 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=120 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               -XX:PerMethodRecompilationCutoff=-1 -XX:PerBytecodeRecompilationCutoff=-1\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField\n@@ -42,1 +45,1 @@\n-public class TestUnloadedInlineTypeField extends InlineTypeTest {\n+public class TestUnloadedInlineTypeField {\n@@ -47,13 +50,0 @@\n-    private static final boolean PREVENT_LOADING = TEST_C1;\n-\n-    public static void main(String[] args) throws Throwable {\n-        TestUnloadedInlineTypeField test = new TestUnloadedInlineTypeField();\n-        test.run(args);\n-    }\n-\n-    static final String[][] scenarios = {\n-        {},\n-        {\"-XX:InlineFieldMaxFlatSize=0\"},\n-        {\"-XX:+PatchALot\"},\n-        {\"-XX:InlineFieldMaxFlatSize=0\", \"-XX:+PatchALot\"}\n-    };\n@@ -61,4 +51,14 @@\n-    @Override\n-    public int getNumScenarios() {\n-        return scenarios.length;\n-    }\n+    public static void main(String[] args) {\n+        final Scenario[] scenarios = {\n+                new Scenario(0),\n+                new Scenario(1, \"-XX:InlineFieldMaxFlatSize=0\"),\n+                new Scenario(2, \"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:-XX:+PatchALot\"),\n+                new Scenario(3,\n+                             \"-XX:InlineFieldMaxFlatSize=0\",\n+                             \"-XX:+IgnoreUnrecognizedVMOptions\",\n+                             \"-XX:+PatchALot\")\n+        };\n+        final String[] CutoffFlags = {\"-XX:PerMethodRecompilationCutoff=-1\", \"-XX:PerBytecodeRecompilationCutoff=-1\"};\n+        for (Scenario s : scenarios) {\n+           s.addFlags(CutoffFlags);\n+        }\n@@ -66,3 +66,3 @@\n-    @Override\n-    public String[] getVMParameters(int scenario) {\n-        return scenarios[scenario];\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .start();\n@@ -110,3 +110,3 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -155,3 +155,3 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -204,3 +204,3 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -248,2 +248,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier(RunInfo info) {\n@@ -251,1 +251,1 @@\n-        if (warmup && PREVENT_LOADING) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -291,3 +291,3 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -337,3 +337,3 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -376,3 +376,3 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -417,3 +417,3 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -454,3 +454,3 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -493,3 +493,3 @@\n-    @DontCompile\n-    public void test10_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test10\")\n+    public void test10_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -540,2 +540,2 @@\n-    @DontCompile\n-    public void test11_verifier(boolean warmup) {\n+    @Run(test = \"test11\")\n+    public void test11_verifier(RunInfo info) {\n@@ -543,1 +543,1 @@\n-        if (warmup && PREVENT_LOADING) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -581,3 +581,3 @@\n-    @DontCompile\n-    public void test12_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test12\")\n+    public void test12_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -620,3 +620,3 @@\n-    @DontCompile\n-    public void test13_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test13\")\n+    public void test13_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -666,3 +666,3 @@\n-    @DontCompile\n-    public void test14_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test14\")\n+    public void test14_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -708,3 +708,3 @@\n-    @DontCompile\n-    public void test15_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test15\")\n+    public void test15_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -745,3 +745,3 @@\n-    @DontCompile\n-    public void test16_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test16\")\n+    public void test16_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -777,3 +777,3 @@\n-    @DontCompile\n-    public void test17_verifier(boolean warmup) {\n-        if (warmup && PREVENT_LOADING) {\n+    @Run(test = \"test17\")\n+    public void test17_verifier(RunInfo info) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -817,2 +817,2 @@\n-    @DontCompile\n-    public void test18_verifier(boolean warmup) {\n+    @Run(test = \"test18\")\n+    public void test18_verifier(RunInfo info) {\n@@ -821,1 +821,1 @@\n-        if (warmup && PREVENT_LOADING) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -851,2 +851,2 @@\n-    @DontCompile\n-    public void test19_verifier(boolean warmup) {\n+    @Run(test = \"test19\")\n+    public void test19_verifier(RunInfo info) {\n@@ -855,1 +855,1 @@\n-        if (warmup && PREVENT_LOADING) {\n+        if (info.isWarmUp() && !info.isC2CompilationEnabled()) {\n@@ -881,2 +881,2 @@\n-    @DontCompile\n-    public void test20_verifier(boolean warmup) {\n+    @Run(test = \"test20\")\n+    public void test20_verifier() {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":89,"deletions":89,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-\n@@ -27,4 +26,0 @@\n-import java.lang.invoke.*;\n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n-\n@@ -32,0 +27,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -37,1 +33,1 @@\n- * @library \/testlibrary \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/\n@@ -40,5 +36,1 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n- *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI\n- *                               compiler.valhalla.inlinetypes.InlineTypeTest\n- *                               compiler.valhalla.inlinetypes.TestWithfieldC1\n+ * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestWithfieldC1\n@@ -46,8 +38,0 @@\n-public class TestWithfieldC1 extends InlineTypeTest {\n-    public static final int C1 = COMP_LEVEL_SIMPLE;\n-    public static final int C2 = COMP_LEVEL_FULL_OPTIMIZATION;\n-\n-    public static void main(String[] args) throws Throwable {\n-        TestWithfieldC1 test = new TestWithfieldC1();\n-        test.run(args, FooValue.class);\n-    }\n@@ -55,33 +39,26 @@\n-    @Override\n-    public int getNumScenarios() {\n-        return 5;\n-    }\n-\n-    @Override\n-    public String[] getVMParameters(int scenario) {\n-        switch (scenario) {\n-        case 0: return new String[] { \/\/ C1 only\n-                \"-XX:TieredStopAtLevel=1\",\n-                \"-XX:+TieredCompilation\",\n-            };\n-        case 1: return new String[] { \/\/ C2 only. (Make sure the tests are correctly written)\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:-TieredCompilation\",\n-            };\n-        case 2: return new String[] { \/\/ interpreter only\n-                \"-Xint\",\n-            };\n-        case 3: return new String[] {\n-                \/\/ Xcomp Only C1.\n-                \"-XX:TieredStopAtLevel=1\",\n-                \"-XX:+TieredCompilation\",\n-                \"-Xcomp\",\n-            };\n-        case 4: return new String[] {\n-                \/\/ Xcomp Only C2.\n-                \"-XX:TieredStopAtLevel=4\",\n-                \"-XX:-TieredCompilation\",\n-                \"-Xcomp\",\n-            };\n-        }\n-        return null;\n+@ForceCompileClassInitializer\n+public class TestWithfieldC1 {\n+\n+    public static void main(String[] args) {\n+        final Scenario[] scenarios = {\n+                new Scenario(0, \/\/ C1 only\n+                        \"-XX:TieredStopAtLevel=1\",\n+                        \"-XX:+TieredCompilation\"),\n+                new Scenario(1, \/\/ C2 only. (Make sure the tests are correctly written)\n+                        \"-XX:TieredStopAtLevel=4\",\n+                        \"-XX:-TieredCompilation\"),\n+                new Scenario(2, \/\/ interpreter only\n+                        \"-Xint\"),\n+                new Scenario(3, \/\/ Xcomp Only C1.\n+                        \"-XX:TieredStopAtLevel=1\",\n+                        \"-XX:+TieredCompilation\",\n+                        \"-Xcomp\"),\n+                new Scenario(4, \/\/ Xcomp Only C2.\n+                        \"-XX:TieredStopAtLevel=4\",\n+                        \"-XX:-TieredCompilation\",\n+                        \"-Xcomp\")\n+        };\n+\n+        InlineTypes.getFramework()\n+                   .addScenarios(scenarios)\n+                   .start();\n@@ -217,1 +194,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -222,2 +199,2 @@\n-    @DontCompile\n-    public void test1_verifier(boolean warmup) {\n+    @Run(test = \"test1\")\n+    public void test1_verifier() {\n@@ -229,1 +206,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -242,2 +219,2 @@\n-    @DontCompile\n-    public void test2_verifier(boolean warmup) {\n+    @Run(test = \"test2\")\n+    public void test2_verifier() {\n@@ -253,1 +230,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -258,2 +235,2 @@\n-    @DontCompile\n-    public void test3_verifier(boolean warmup) {\n+    @Run(test = \"test3\")\n+    public void test3_verifier() {\n@@ -266,1 +243,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -271,2 +248,2 @@\n-    @DontCompile\n-    public void test4_verifier(boolean warmup) {\n+    @Run(test = \"test4\")\n+    public void test4_verifier() {\n@@ -279,1 +256,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -284,2 +261,2 @@\n-    @DontCompile\n-    public void test5_verifier(boolean warmup) {\n+    @Run(test = \"test5\")\n+    public void test5_verifier() {\n@@ -292,1 +269,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -297,2 +274,2 @@\n-    @DontCompile\n-    public void test6_verifier(boolean warmup) {\n+    @Run(test = \"test6\")\n+    public void test6_verifier() {\n@@ -308,1 +285,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -313,2 +290,2 @@\n-    @DontCompile\n-    public void test7_verifier(boolean warmup) {\n+    @Run(test = \"test7\")\n+    public void test7_verifier() {\n@@ -321,1 +298,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -326,2 +303,2 @@\n-    @DontCompile\n-    public void test8_verifier(boolean warmup) {\n+    @Run(test = \"test8\")\n+    public void test8_verifier() {\n@@ -334,1 +311,1 @@\n-    @Test(compLevel=C1)\n+    @Test(compLevel = CompLevel.C1_SIMPLE)\n@@ -353,2 +330,2 @@\n-    @DontCompile\n-    public void test9_verifier(boolean warmup) {\n+    @Run(test = \"test9\")\n+    public void test9_verifier() {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithfieldC1.java","additions":57,"deletions":80,"binary":false,"changes":137,"status":"modified"}]}