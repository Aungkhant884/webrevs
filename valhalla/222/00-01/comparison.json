{"files":[{"patch":"@@ -44,2 +44,2 @@\n- * <p>\n- * In addition, this class provides many methods for\n+ *\n+ * <p>In addition, this class provides many methods for\n@@ -51,0 +51,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Boolean.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,0 +51,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -125,0 +125,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,0 +49,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,0 +48,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,0 +53,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,0 +53,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,6 +84,5 @@\n- * immutable and thread-safe.\n- * Use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on these instances of\n- * {@code ProcessHandle} may have unpredictable results and should be avoided.\n- * Use {@link #equals(Object) equals} or\n- * {@link #compareTo(ProcessHandle) compareTo} methods to compare ProcessHandles.\n+ * immutable and thread-safe. Programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur.\n+ * Use the {@code equals} or {@link #compareTo(ProcessHandle) compareTo} methods\n+ * to compare ProcessHandles.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandle.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -945,5 +945,5 @@\n-     * <p>This is a <a href=\".\/doc-files\/ValueBased.html\">value-based<\/a>\n-     * class; use of identity-sensitive operations (including reference equality\n-     * ({@code ==}), identity hash code, or synchronization) on instances of\n-     * {@code Version} may have unpredictable results and should be avoided.\n-     * <\/p>\n+     * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+     * class; programmers should treat instances that are\n+     * {@linkplain #equals(Object) equal} as interchangeable and should not\n+     * use instances for synchronization, or unpredictable behavior may\n+     * occur.<\/p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,0 +50,6 @@\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-Some classes, such as <code>java.util.Optional<\/code> and\n-<code>java.time.LocalDateTime<\/code>, are <em>value-based<\/em>.  Instances of a\n-value-based class:\n+Some classes, such as <code>java.lang.Integer<\/code> and\n+<code>java.time.LocalDateTime<\/code>, are <em>value-based<\/em>.\n+Value-based classes:\n@@ -38,12 +38,3 @@\n-    <li>are final<\/li>\n-    <li>have only final instance fields (though these may contain references to mutable\n-        objects);<\/li>\n-    <li>extend either <code>Object<\/code> or a hierarchy of abstract classes that\n-        declare no instance fields and have no instance initialization logic<\/li>\n-    <li>do not have (or have deprecated for removal any) accessible constructors,\n-        but are instead instantiated through factory methods which make no\n-        commitment as to the identity of returned instances;<\/li>\n-    <li>expose no identity-sensitive behaviors through their methods, such as by\n-        relying on equality (<code>==<\/code>) between instances, the identity hash\n-        code of an instance, or synchronization on an instances's intrinsic lock;<\/li>\n-    <li>have implementations of <code>equals<\/code>,\n+    <li>declare only final instance fields (though these may contain references\n+        to mutable objects);<\/li>\n+    <li>declare implementations of <code>equals<\/code>,\n@@ -53,4 +44,12 @@\n-    <li>are <em>freely substitutable<\/em> when equal, meaning that interchanging\n-        any two instances <code>x<\/code> and <code>y<\/code> that are equal\n-        according to <code>equals()<\/code> in any computation or method\n-        invocation should produce no visible change in behavior.\n+    <li>have instances that are <em>freely substitutable<\/em> when equal, meaning\n+        that interchanging any two instances <code>x<\/code> and <code>y<\/code> that\n+        are equal according to <code>equals()<\/code> produces no visible change in\n+        the behavior of the class's methods;\n+    <\/li>\n+    <li>perform no synchronization on an instance's intrinsic lock;<\/li>\n+    <li>do not have (or have deprecated any) accessible constructors;<\/li>\n+    <li>may support instance creation through factory methods that do <em>not<\/em>\n+        promise a unique identity for each invocationâ€”in particular, each factory\n+        method must allow for the possibility that if two independently-produced\n+        instances are equal according to <code>equals()<\/code>, they may also be\n+        equal according to <code>==<\/code>;\n@@ -58,0 +57,5 @@\n+    <li>are final;<\/li>\n+    <li>extend either <code>Object<\/code> or a hierarchy of abstract classes that\n+        declare no instance fields or instance initializers and whose constructors\n+        are empty.<\/li>\n+    <li>\n@@ -60,3 +64,2 @@\n-<p>Because the identity of instances produced by factories is unspecified, a program\n-    may experience unpredictable behavior if it attempts to distinguish two\n-    references to equal values of a value-based class, whether directly via reference\n+<p>When two instances of a value-based class are `equal`, a program should not attempt\n+    to distinguish between their identities, whether directly via reference\n@@ -64,5 +67,3 @@\n-    serialization, or any other identity-sensitive mechanism.  Use of such\n-    identity-sensitive operations on instances of value-based classes should be\n-    avoided.<\/p>\n-<p>In particular, synchronization on instances of value-based classes is strongly\n-    discouraged, because the programmer cannot guarantee unique ownership of the\n+    serialization, or any other identity-sensitive mechanism.<\/p>\n+<p>Synchronization on instances of value-based classes is strongly discouraged,\n+    because the programmer cannot usually guarantee unique ownership of the\n","filename":"src\/java.base\/share\/classes\/java\/lang\/doc-files\/ValueBased.html","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n- *\n@@ -123,4 +122,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Duration} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/Duration.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -194,1 +194,0 @@\n- *\n@@ -197,4 +196,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Instant} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -126,1 +126,0 @@\n- *\n@@ -129,4 +128,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code LocalDate} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n- *\n@@ -125,4 +124,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code LocalDateTime} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDateTime.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n- *\n@@ -115,4 +114,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code LocalTime} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalTime.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -114,1 +114,0 @@\n- *\n@@ -117,4 +116,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code MonthDay} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/MonthDay.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -115,1 +115,0 @@\n- *\n@@ -118,4 +117,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OffsetDateTime} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n- *\n@@ -108,4 +107,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OffsetTime} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetTime.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n- *\n@@ -123,4 +122,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Period} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/Period.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n- *\n@@ -125,4 +124,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Year} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/Year.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -118,1 +118,0 @@\n- *\n@@ -121,4 +120,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code YearMonth} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/YearMonth.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -163,1 +163,0 @@\n- *\n@@ -166,4 +165,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ZoneId} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneId.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -117,1 +117,0 @@\n- *\n@@ -120,4 +119,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ZoneOffset} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -145,1 +145,0 @@\n- *\n@@ -148,4 +147,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ZonedDateTime} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n- *\n@@ -109,4 +108,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code HijrahDate} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahDate.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -113,1 +113,0 @@\n- *\n@@ -116,4 +115,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code JapaneseDate} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseDate.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n- *\n@@ -96,4 +95,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code MinguoDate} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/MinguoDate.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n- *\n@@ -96,4 +95,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ThaiBuddhistDate} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistDate.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,4 +34,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code KeyValueHolder} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n","filename":"src\/java.base\/share\/classes\/java\/util\/KeyValueHolder.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -110,4 +110,5 @@\n- * Callers should make no assumptions about the identity of the returned instances.\n- * Factories are free to create new instances or reuse existing ones. Therefore,\n- * identity-sensitive operations on these instances (reference equality ({@code ==}),\n- * identity hash code, and synchronization) are unreliable and should be avoided.\n+ * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+ * as interchangeable and should not use them for synchronization, or\n+ * unpredictable behavior may occur. Callers should make no assumptions\n+ * about the identity of the returned instances. Factories are free to\n+ * create new instances or reuse existing ones.\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -134,4 +134,5 @@\n- * Callers should make no assumptions about the identity of the returned instances.\n- * Factories are free to create new instances or reuse existing ones. Therefore,\n- * identity-sensitive operations on these instances (reference equality ({@code ==}),\n- * identity hash code, and synchronization) are unreliable and should be avoided.\n+ * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+ * as interchangeable and should not use them for synchronization, or\n+ * unpredictable behavior may occur. Callers should make no assumptions\n+ * about the identity of the returned instances. Factories are free to\n+ * create new instances or reuse existing ones.\n@@ -1639,4 +1640,5 @@\n-     * Callers should make no assumptions about the identity of the returned instances.\n-     * This method is free to create new instances or reuse existing ones. Therefore,\n-     * identity-sensitive operations on these instances (reference equality ({@code ==}),\n-     * identity hash code, and synchronization) are unreliable and should be avoided.\n+     * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+     * as interchangeable and should not use them for synchronization, or\n+     * unpredictable behavior may occur. Callers should make no assumptions\n+     * about the identity of the returned instances. This method is free to\n+     * create new instances or reuse existing ones.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Map.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -45,4 +45,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Optional} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Optional.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,4 +44,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OptionalDouble} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalDouble.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,4 +44,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OptionalInt} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalInt.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,4 +44,5 @@\n- * <p>This is a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code OptionalLong} may have unpredictable results and should be avoided.\n+ * <p>This is a <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur.\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalLong.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -85,4 +85,5 @@\n- * Callers should make no assumptions about the identity of the returned instances.\n- * Factories are free to create new instances or reuse existing ones. Therefore,\n- * identity-sensitive operations on these instances (reference equality ({@code ==}),\n- * identity hash code, and synchronization) are unreliable and should be avoided.\n+ * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+ * as interchangeable and should not use them for synchronization, or\n+ * unpredictable behavior may occur. Callers should make no assumptions\n+ * about the identity of the returned instances. Factories are free to\n+ * create new instances or reuse existing ones.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Set.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- *\n@@ -50,4 +49,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code GroupLayout} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/GroupLayout.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemoryLayout} may have unpredictable results and should be avoided. The {@code equals} method should\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. The {@code equals} method should\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemoryAddress} may have unpredictable results and should be avoided. The {@code equals} method should\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. The {@code equals} method should\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,2 +79,2 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemoryLayout} may have unpredictable results and should be avoided. The {@code equals} method should\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. The {@code equals} method should\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemorySegment} may have unpredictable results and should be avoided. The {@code equals} method should\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. The {@code equals} method should\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,4 +41,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code PaddingLayout} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/PaddingLayout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,4 +58,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code SequenceLayout} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SequenceLayout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,4 +43,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ValueLayout} may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -146,4 +146,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances\n- * may have unpredictable results and should be avoided.\n- * The {@code equals} method should be used for comparisons.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. The {@code equals} method should be used for comparisons.\n","filename":"test\/lib\/jdk\/test\/lib\/hexdump\/HexPrinter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}