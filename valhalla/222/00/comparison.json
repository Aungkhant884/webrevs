{"files":[{"patch":"@@ -38,1 +38,2 @@\n-    <li>are final and immutable (though may contain references to mutable\n+    <li>are final<\/li>\n+    <li>have only final instance fields (though these may contain references to mutable\n@@ -40,0 +41,8 @@\n+    <li>extend either <code>Object<\/code> or a hierarchy of abstract classes that\n+        declare no instance fields and have no instance initialization logic<\/li>\n+    <li>do not have (or have deprecated for removal any) accessible constructors,\n+        but are instead instantiated through factory methods which make no\n+        commitment as to the identity of returned instances;<\/li>\n+    <li>expose no identity-sensitive behaviors through their methods, such as by\n+        relying on equality (<code>==<\/code>) between instances, the identity hash\n+        code of an instance, or synchronization on an instances's intrinsic lock;<\/li>\n@@ -44,8 +53,0 @@\n-    <li>make no use of identity-sensitive operations such as reference\n-        equality (<code>==<\/code>) between instances, identity hash code of\n-        instances, or synchronization on an instances's intrinsic lock;<\/li>\n-    <li>are considered equal solely based on <code>equals()<\/code>, not\n-        based on reference equality (<code>==<\/code>);<\/li>\n-    <li>do not have accessible constructors, but are instead instantiated\n-        through factory methods which make no commitment as to the identity\n-        of returned instances;<\/li>\n@@ -59,1 +60,2 @@\n-<p>A program may produce unpredictable results if it attempts to distinguish two\n+<p>Because the identity of instances produced by factories is unspecified, a program\n+    may experience unpredictable behavior if it attempts to distinguish two\n@@ -63,2 +65,5 @@\n-    identity-sensitive operations on instances of value-based classes may have\n-    unpredictable effects and should be avoided.<\/p>\n+    identity-sensitive operations on instances of value-based classes should be\n+    avoided.<\/p>\n+<p>In particular, synchronization on instances of value-based classes is strongly\n+    discouraged, because the programmer cannot guarantee unique ownership of the\n+    associated lock.<\/p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/doc-files\/ValueBased.html","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"}]}