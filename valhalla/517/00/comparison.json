{"files":[{"patch":"@@ -1939,2 +1939,3 @@\n-      for (uint i = 2; i < req(); ++i) {\n-        vt->merge_with(phase, in(i)->as_InlineTypeBase(), i, i == (req()-1));\n+      for (i = 2; i < req(); ++i) {\n+        bool transform = !can_reshape && (i == (req()-1)); \/\/ Transform phis on last merge\n+        vt->merge_with(phase, in(i)->as_InlineTypeBase(), i, transform);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+  gvn->record_for_igvn(oop);\n@@ -58,0 +59,1 @@\n+      gvn->record_for_igvn(value);\n@@ -62,0 +64,1 @@\n+  gvn->record_for_igvn(vt);\n@@ -93,1 +96,0 @@\n-    gvn->record_for_igvn(phi);\n@@ -107,1 +109,0 @@\n-      gvn->record_for_igvn(val1);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3944,0 +3944,19 @@\n+\n+    \/\/ Test merging of buffered default and non-default inline types\n+    @Test\n+    public Object test144(int i) {\n+        if (i == 0) {\n+            return MyValue1.default;\n+        } else if (i == 1) {\n+            return testValue1;\n+        } else {\n+            return MyValue1.default;\n+        }\n+    }\n+\n+    @Run(test = \"test144\")\n+    public void test144_verifier() {\n+        Asserts.assertEquals(test144(0), MyValue1.default);\n+        Asserts.assertEquals(test144(1), testValue1);\n+        Asserts.assertEquals(test144(2), MyValue1.default);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}