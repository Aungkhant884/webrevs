{"files":[{"patch":"@@ -270,1 +270,1 @@\n-  PARANOIA_FLAGS := -implicit:none -Xprefer:source -XDignore.symbol.file=true -XDtolerateObjectInstantiation -encoding ascii\n+  PARANOIA_FLAGS := -implicit:none -Xprefer:source -XDignore.symbol.file=true -encoding ascii\n","filename":"make\/common\/JavaCompilation.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-javac.opts = -XDignore.symbol.file=true -Xlint:all,-deprecation,-exports -XDtolerateObjectInstantiation -Werror -g:source,lines,vars\n+javac.opts = -XDignore.symbol.file=true -Xlint:all,-deprecation,-exports -Werror -g:source,lines,vars\n@@ -30,1 +30,1 @@\n-javac.build.opts = -XDignore.symbol.file=true -Xlint:all,-deprecation,-options -XDtolerateObjectInstantiation -Werror -g:source,lines,vars\n+javac.build.opts = -XDignore.symbol.file=true -Xlint:all,-deprecation,-options -Werror -g:source,lines,vars\n","filename":"make\/langtools\/build.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-public abstract class Object {\n+public class Object {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Object.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,8 +155,6 @@\n-    private static class CacheHolder {\n-        static final Function<Object, Object> CREATE = new Function<>() {\n-            @Override\n-            public Object apply(Object key) {\n-                return new CacheHolder();\n-            }\n-        };\n-    }\n+    private static final Function<Object, Object> CREATE_RESERVATION = new Function<>() {\n+        @Override\n+        public Object apply(Object key) {\n+            return new Object();\n+        }\n+    };\n@@ -185,1 +183,1 @@\n-        Object speciesDataOrReservation = cache.computeIfAbsent(key, CacheHolder.CREATE);\n+        Object speciesDataOrReservation = cache.computeIfAbsent(key, CREATE_RESERVATION);\n@@ -190,1 +188,1 @@\n-        if (speciesDataOrReservation.getClass() == CacheHolder.class) {\n+        if (speciesDataOrReservation.getClass() == Object.class) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-import com.sun.tools.javac.resources.CompilerProperties.Notes;\n@@ -182,1 +181,1 @@\n-        tolerateObjectInstantiation = options.isSet(\"tolerateObjectInstantiation\");\n+\n@@ -234,6 +233,0 @@\n-    \/**\n-     * Switch: warn about use of new Object() ? By default, Yes;\n-     * but not if -XDtolerateObjectInstantiation is in effect\n-     *\/\n-    boolean tolerateObjectInstantiation;\n-\n@@ -2791,3 +2784,0 @@\n-            if (!tolerateObjectInstantiation && clazztype.tsym == syms.objectType.tsym && cdef == null && !tree.classDeclRemoved()) {\n-                log.note(tree.pos(), Notes.CantInstantiateObjectDirectly);\n-            }\n@@ -2850,1 +2840,1 @@\n-                (clazztype.tsym.flags() & (ABSTRACT | INTERFACE)) != 0 && clazztype.tsym != syms.objectType.tsym) { \/\/ tolerate abstract Object\n+                (clazztype.tsym.flags() & (ABSTRACT | INTERFACE)) != 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import com.sun.tools.javac.resources.CompilerProperties.Notes;\n@@ -111,7 +110,0 @@\n-    \/**\n-     * Switch: warn about use of new Object() ? By default, Yes;\n-     * but not if -XDtolerateObjectInstantiation is in effect\n-     *\/\n-    boolean tolerateObjectInstantiation;\n-\n-\n@@ -154,1 +146,0 @@\n-        tolerateObjectInstantiation = options.isSet(\"tolerateObjectInstantiation\");\n@@ -814,6 +805,1 @@\n-            \/* Tolerate an encounter with abstract Object, we will mutate the constructor reference\n-               to an invocation of java.util.Objects.newIdentity downstream.\n-            *\/\n-            if (!tolerateObjectInstantiation && t.tsym == syms.objectType.tsym)\n-                log.note(expr.pos(), Notes.CantInstantiateObjectDirectly);\n-            if ((t.tsym.flags() & (ABSTRACT | INTERFACE)) != 0 && t.tsym != syms.objectType.tsym) {\n+            if ((t.tsym.flags() & (ABSTRACT | INTERFACE)) != 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -524,5 +524,0 @@\n-        if (refSym.isConstructor() && tree.expr.type.tsym == syms.objectType.tsym) {\n-            if (tree.mode == ReferenceMode.NEW && tree.kind == ReferenceKind.TOPLEVEL) {\n-                refSym = rs.resolveInternalMethod(tree, attrEnv, syms.objectsType, names.newIdentity, List.nil(), List.nil());\n-            }\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2879,6 +2879,1 @@\n-        if (tree.clazz.type.tsym == syms.objectType.tsym) {\n-            Assert.check(tree.def == null && tree.encl == null);\n-            result = makeCall(make.Ident(syms.objectsType.tsym), names.newIdentity, List.nil());\n-        } else {\n-            result = tree;\n-        }\n+        result = tree;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4001,3 +4001,0 @@\n-compiler.note.cant.instantiate.object.directly=\\\n-    Object cannot be instantiated directly; a subclass of Object will be instantiated instead, by invoking java.util.Objects.newIdentity()\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private static final Object DELETED = new Object() {};\n+    private static final Object DELETED = new Object();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/IntHashTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-    public final Name newIdentity;\n@@ -293,1 +292,0 @@\n-        newIdentity = fromString(\"newIdentity\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-        final Object lock = new Object() {};\n+        final Object lock = new Object();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/sjavac\/CompileJavaPackages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    static Object obj = new Object() {};\n+    static Object obj = new Object();\n@@ -42,1 +42,1 @@\n-        if (obj.getClass().getSuperclass() == Object.class) {\n+        if (obj.getClass() == Object.class) {\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestGetClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-                                        \"Object[Identity@\" + TestHelper.DUMMY_CLASS_INSTANCE.objectField.hashCode() + \"]\"},\n+                                        \"Object[Object@\" + TestHelper.DUMMY_CLASS_INSTANCE.objectField.hashCode() + \"]\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/ForObjectDataProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        new java.lang.Object() {}.getClass().getSuperclass().cast(hiddenClassObj);\n+        new java.lang.Object().getClass().cast(hiddenClassObj);\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/CastToParentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        java.lang.Object instance = java.util.Objects.newIdentity();\n+        java.lang.Object instance = new java.lang.Object();\n@@ -72,1 +72,1 @@\n-            if (!cce.getMessage().contains(\"class java.lang.Identity cannot be cast to class Derived (java.lang.Identity is in module java.base of loader 'bootstrap'; Derived is in unnamed module of loader 'app')\")) {\n+            if (!cce.getMessage().contains(\"class java.lang.Object cannot be cast to class Derived (java.lang.Object is in module java.base of loader 'bootstrap'; Derived is in unnamed module of loader 'app')\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/CCE_module_msg.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        output.shouldMatch(\"^\\\\s+\\\\d+:\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+java.lang.Identity \" + moduleRegex + \"\\\\s*$\");\n+        output.shouldMatch(\"^\\\\s+\\\\d+:\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+java.lang.Object \" + moduleRegex + \"\\\\s*$\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/ClassHistogramTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    private Object monitor = java.util.Objects.newIdentity();\n-    private final String OBJECT = \"a java.lang.Identity\";\n+    private Object monitor = new Object();;\n+    private final String OBJECT = \"a java.lang.Object\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/tmtools\/jstack\/WaitNotifyThreadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,2 +182,0 @@\n-    private static class TestObject {}\n-\n@@ -188,1 +186,1 @@\n-        Assert.assertEquals(cs.getTarget().invoke(new TestObject(), \"class\"), TestObject.class);\n+        Assert.assertEquals(cs.getTarget().invoke(new Object(), \"class\"), Object.class);\n@@ -196,1 +194,1 @@\n-        Assert.assertNull(cs.getTarget().invoke(new TestObject(), \"DOES_NOT_EXIST\"));\n+        Assert.assertNull(cs.getTarget().invoke(new Object(), \"DOES_NOT_EXIST\"));\n@@ -203,1 +201,1 @@\n-        Assert.assertEquals(cs.getTarget().invoke(new TestObject()), TestObject.class);\n+        Assert.assertEquals(cs.getTarget().invoke(new Object()), Object.class);\n@@ -213,1 +211,1 @@\n-            cs.getTarget().invoke(new TestObject());\n+            cs.getTarget().invoke(new Object());\n","filename":"test\/jdk\/jdk\/dynalink\/BeanLinkerTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -180,2 +180,0 @@\n-    private static class TestObject {}\n-\n@@ -198,1 +196,1 @@\n-        Assert.assertEquals(cs.getTarget().invoke(new TestObject(), \"class\"), TestObject.class);\n+        Assert.assertEquals(cs.getTarget().invoke(new Object(), \"class\"), Object.class);\n@@ -217,1 +215,1 @@\n-        Assert.assertEquals(cs.getTarget().invoke(new TestObject(), \"class\"), TestObject.class);\n+        Assert.assertEquals(cs.getTarget().invoke(new Object(), \"class\"), Object.class);\n@@ -223,1 +221,1 @@\n-        testAutoLoadedLinkerInvoked(new TestObject(), \"toString\");\n+        testAutoLoadedLinkerInvoked(new Object(), \"toString\");\n","filename":"test\/jdk\/jdk\/dynalink\/TrustedDynamicLinkerFactoryTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        assertType(\"new Object() {}.getClass().getSuperclass().getSuperclass() \", \"Class<?>\");\n+        assertType(\"new Object().getClass().getSuperclass() \", \"Class<?>\");\n","filename":"test\/langtools\/jdk\/jshell\/TypeNameTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -512,1 +512,1 @@\n-        assertVarDeclRedefNoInit(\"Object\", \"o\", \"new String()\", IGNORE_VALUE, \"null\");\n+        assertVarDeclRedefNoInit(\"Object\", \"o\", \"new Object()\", IGNORE_VALUE, \"null\");\n","filename":"test\/langtools\/jdk\/jshell\/VariablesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        t.add(new Object() {});\n+        t.add(new Object());\n","filename":"test\/langtools\/tools\/javac\/T6873849.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-            Object exParam1 = new Object() {};\n+            Object exParam1 = new Object();\n@@ -21,1 +21,1 @@\n-                Object exParam1 = new Object() {};\n+                Object exParam1 = new Object();\n@@ -29,1 +29,1 @@\n-            Object exParam2 = new Object() {};\n+            Object exParam2 = new Object();\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/ResourceRedecl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-        Object v2 = new Object() {};\n+        Object v2 = new Object();\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrForVariable3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -18,1 +18,1 @@\n-            Object r = new Object() {};\n+            Object r = new Object();\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrVarRedeclaration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-    String s = (@T(1) @T(2) String) new Object() {};\n+    String s = (@T(1) @T(2) String) new Object();\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/InvalidRepAnnoOnCast.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n-InvalidRepAnnoOnCast.java:19:37: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: java.lang.Object, @InvalidRepAnnoOnCast.T(1),@InvalidRepAnnoOnCast.T(2) java.lang.String)\n-2 errors\n+1 error\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/InvalidRepAnnoOnCast.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    Object e3 = new @DA Object() {};\n+    Object e3 = new @DA Object();\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/arrays\/DeclarationAnnotation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.note.cant.instantiate.object.directly\n-\n-class CantInstantiateObjectDirectly {\n-    { new Object(); }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantInstantiateObjectDirectly.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -16,1 +16,1 @@\n-        Object[] objArray = {new Object() {}};\n+        Object[] objArray = {new Object()};\n","filename":"test\/langtools\/tools\/javac\/generics\/UnsoundInference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-        super(new Object<>() {});\n+        super(new Object<>());\n","filename":"test\/langtools\/tools\/javac\/generics\/diamond\/8065986\/T8065986a.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-        this(new Object<>() {});\n+        this(new Object<>());\n","filename":"test\/langtools\/tools\/javac\/generics\/diamond\/8065986\/T8065986b.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        m(w.get()).take(new Object() {});\n+        m(w.get()).take(new Object());\n","filename":"test\/langtools\/tools\/javac\/generics\/inference\/CaptureLowerBoundDeref.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CaptureLowerBoundDeref.java:22:19: compiler.err.cant.apply.symbol: kindname.method, take, compiler.misc.type.captureof: 1, ?, compiler.misc.anonymous.class: java.lang.Object, kindname.interface, CaptureLowerBoundDeref.K<T>, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: java.lang.Object, compiler.misc.type.captureof: 1, ?))\n+CaptureLowerBoundDeref.java:22:19: compiler.err.cant.apply.symbol: kindname.method, take, compiler.misc.type.captureof: 1, ?, java.lang.Object, kindname.interface, CaptureLowerBoundDeref.K<T>, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: java.lang.Object, compiler.misc.type.captureof: 1, ?))\n","filename":"test\/langtools\/tools\/javac\/generics\/inference\/CaptureLowerBoundDeref.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-        NewBeforeOuterConstructed2 c = new NewBeforeOuterConstructed2(new Object() {});\n+        NewBeforeOuterConstructed2 c = new NewBeforeOuterConstructed2(new Object());\n","filename":"test\/langtools\/tools\/javac\/implicitThis\/NewBeforeOuterConstructed2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-                    \".addComponent(new Object() {})\\n\" +\n+                    \".addComponent(new Object())\\n\" +\n@@ -122,1 +122,1 @@\n-                    \".addComponent(new Object() {})\");\n+                    \".addComponent(new Object())\");\n","filename":"test\/langtools\/tools\/javac\/lambda\/T8031967.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        Object o1 = (SAM)()->new Object() {};\n+        Object o1 = (SAM)()->new Object();\n","filename":"test\/langtools\/tools\/javac\/lambda\/TargetType38.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-TargetType38.java:19:30: compiler.err.prob.found.req: (compiler.misc.incompatible.ret.type.in.lambda: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: java.lang.Object, TargetType38.I))\n+TargetType38.java:19:30: compiler.err.prob.found.req: (compiler.misc.incompatible.ret.type.in.lambda: (compiler.misc.inconvertible.types: java.lang.Object, TargetType38.I))\n","filename":"test\/langtools\/tools\/javac\/lambda\/TargetType38.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    final Object lock = new Object() {};\n+    final Object lock = new Object();\n","filename":"test\/langtools\/tools\/javac\/lambda\/self_initializer\/T8024809\/SelfInitializerInLambdaTesta.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-        m(new A(new Object() {}));\n+        m(new A(new Object()));\n","filename":"test\/langtools\/tools\/javac\/lambda\/speculative\/Main.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    List<X.ref> ls = new Object() {};\n+    List<X.ref> ls = new Object();\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckQuestionInMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckQuestionInMessages.java:12:22: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: java.lang.Object, java.util.List<X.ref>)\n+CheckQuestionInMessages.java:12:22: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, java.util.List<X.ref>)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckQuestionInMessages.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8280456\n- * @summary javac should allow compilation with abstract java.lang.Object class\n- * @compile\/ref=ObjectInstantiationTest.out -XDrawDiagnostics ObjectInstantiationTest.java\n- * @run main ObjectInstantiationTest\n- *\/\n-\n-public class ObjectInstantiationTest {\n-\n-    interface I {\n-        Object getObject();\n-    }\n-\n-    public static void main(String [] args) {\n-\n-        Object o1 = java.util.Objects.newIdentity();\n-        Object o2 = new Object();\n-        Object o3 = foo(Object::new);\n-\n-        if (o1.getClass() != o2.getClass())\n-            throw new AssertionError(\"Unexpected class identity\");\n-        if (o2.getClass() != o3.getClass())\n-            throw new AssertionError(\"Unexpected class identity\");\n-    }\n-\n-    static Object foo(I i) {\n-        return i.getObject();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ObjectInstantiationTest.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-ObjectInstantiationTest.java:41:21: compiler.note.cant.instantiate.object.directly\n-ObjectInstantiationTest.java:42:25: compiler.note.cant.instantiate.object.directly\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ObjectInstantiationTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"}]}