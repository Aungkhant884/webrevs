{"files":[{"patch":"@@ -6459,5 +6459,1 @@\n-  if (_class_name == vmSymbols::java_lang_NonTearable() && _loader_data->class_loader() == NULL) {\n-    \/\/ This is the original source of this condition.\n-    \/\/ It propagates by inheritance, as if testing \"instanceof NonTearable\".\n-    _is_declared_atomic = true;\n-  } else if (*ForceNonTearable != '\\0') {\n+  if (*ForceNonTearable != '\\0') {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-  template(java_lang_NonTearable,                     \"java\/lang\/NonTearable\")                    \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-\/**\n- * A primitive class implements the {@code NonTearable} interface to\n- * request that the JVM take extra care to avoid structure tearing\n- * when loading or storing any value of the class to a field or array\n- * element.  Normally, only fields declared {@code volatile} are\n- * protected against structure tearing, but a class that implements\n- * this marker interface will never have its values torn, even when\n- * they are stored in array elements or in non-{@code volatile}\n- * fields, and even when multiple threads perform racing writes.\n- *\n- * <p> An primitive instance of multiple components is said to be \"torn\"\n- * when two racing threads compete to write those components, and one\n- * thread writes some components while another thread writes other\n- * components, so a subsequent observer will read a hybrid composed,\n- * as if \"out of thin air\", of field values from both racing writes.\n- * Tearing can also occur when the effects of two non-racing writes\n- * are observed by a racing read.  In general, structure tearing\n- * requires a read and two writes (initialization counting as a write)\n- * of a multi-component value, with a race between any two of the\n- * accesses.  The effect can also be described as if the Java memory\n- * model break up primitive classinstance reads and writes into reads and\n- * writes of their various fields, as it does with longs and doubles\n- * (JLS 17.7).\n- *\n- * <p> In extreme cases, the hybrid observed after structure tearing\n- * might be a value which is impossible to construct by normal means.\n- * If data integrity or security depends on proper construction,\n- * the class should be declared as implementing {@code NonTearable}.\n- *\n- * @author  John Rose\n- * @since   (valhalla)\n- *\/\n-public interface NonTearable {\n-    \/\/ TO DO: Finalize name.\n-    \/\/ TO DO: Decide whether and how to restrict this type to\n-    \/\/ primitive classes only, or if not, whether to document its\n-    \/\/ non-effect on identity classes.\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/NonTearable.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-import java.lang.annotation.*;\n-import static java.lang.annotation.ElementType.*;\n-\n-\/**\n- * A class annotated {@code @__primitive__} is a primitive class.\n- * This is a temporary workaround to enable use of primitive classes\n- * in editors and IDEs that do not yet understand the 'primitive' modifier.\n- * @since 1.16\n- *\/\n-@Retention(RetentionPolicy.SOURCE)\n-@Target(value={ElementType.TYPE, ElementType.TYPE_USE})\n-public @interface __primitive__ {\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/__primitive__.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-import java.lang.annotation.*;\n-import static java.lang.annotation.ElementType.*;\n-\n-\/**\n- * A class annotated {@code @__value__} is a value class.\n- * This is a temporary workaround to enable use of value classes\n- * in editors and IDEs that do not yet understand the 'value' modifier.\n- * @since 18\n- *\/\n-@Retention(RetentionPolicy.SOURCE)\n-@Target(value={ElementType.TYPE, ElementType.TYPE_USE})\n-public @interface __value__ {\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/__value__.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -39,0 +39,1 @@\n+ * @ignore Disabled until there is a syntax in the language to make objects\/fields non-tearable\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueTearing.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}