{"files":[{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package runtime.valhalla.inlinetypes;\n-\n-@jdk.incubator.mvt.ValueCapableClass\n-public final class PersonVcc {\n-    final int id;\n-    final String firstName;\n-    final String lastName;\n-\n-    private PersonVcc(int id, String firstName, String lastName) {\n-        this.id = id;\n-        this.firstName = firstName;\n-        this.lastName = lastName;\n-    }\n-\n-    public int getId() { return id; }\n-    public String getFirstName() { return firstName; }\n-    public String getLastName() { return lastName; }\n-\n-    public String toString() {\n-        return getFirstName() + \" \" + getLastName() + \" (id=\" + getId() + \")\";\n-    }\n-\n-    public static PersonVcc create(int id, String firstName, String lastName) {\n-        return new PersonVcc(id, firstName, lastName);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/PersonVcc.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package runtime.valhalla.inlinetypes;\n-\n-@jdk.incubator.mvt.ValueCapableClass\n-public final class ValueCapableClass {\n-\n-    public static final int DEFAULT_X = 11;\n-    public static final short DEFAULT_Y = 13;\n-    public static final short DEFAULT_Z = 15;\n-    public static final String STATIC_FIELD = \"Should be left alone\";\n-\n-    public final int   x;\n-    public final short y;\n-    public final short z;\n-\n-    private ValueCapableClass() {\n-        this(DEFAULT_X, DEFAULT_Y, DEFAULT_Z);\n-    }\n-\n-    private ValueCapableClass(int x, short y, short z) {\n-        this.x = x;\n-        this.y = y;\n-        this.z = z;\n-    }\n-\n-    public int getX() {\n-        return x;\n-    }\n-\n-    public short getY() {\n-        return y;\n-    }\n-\n-    public short getZ() {\n-        return z;\n-    }\n-\n-    public String toString() {\n-        int ax = getX();\n-        short ay = getY();\n-        short az = getZ();\n-        return \"ValueCapableClass x=\" + ax + \" y=\" + ay + \" z=\" + az;\n-    }\n-\n-    public static ValueCapableClass create(int x, short y, short z) {\n-        return new ValueCapableClass(x, y, z);\n-    }\n-\n-    public static ValueCapableClass create() {\n-        return new ValueCapableClass();\n-    }\n-\n-    public static void test() {\n-        ValueCapableClass value = create(4711, (short)7, (short)11);\n-        String s = value.toString();\n-        if ((value.getX() != 4711) || (value.getY() != 7) || value.getZ() != 11) {\n-            throw new IllegalStateException(\"Bad value: \" + s);\n-        }\n-        System.out.println(s);\n-        ValueCapableClass defaultValue = create();\n-        s = defaultValue.toString();\n-        if ((defaultValue.getX() != DEFAULT_X) ||\n-            (defaultValue.getY() != DEFAULT_Y) ||\n-            (defaultValue.getZ() != DEFAULT_Z)) {\n-            throw new IllegalStateException(\"Bad value: \" + s);\n-        }\n-\n-        if (!STATIC_FIELD.equals(\"Should be left alone\")) {\n-            throw new IllegalStateException(\"Bad static field: \" + STATIC_FIELD);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        test();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueCapableClass.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package runtime.valhalla.inlinetypes.verifier;\n-\n-@jdk.incubator.mvt.ValueCapableClass\n-public final class ValueCapableClass {\n-\n-    public static final int DEFAULT_X = 11;\n-    public static final short DEFAULT_Y = 13;\n-    public static final short DEFAULT_Z = 15;\n-    public static final String STATIC_FIELD = \"Should be left alone\";\n-\n-    public final int   x;\n-    public final short y;\n-    public final short z;\n-\n-    private ValueCapableClass() {\n-        this(DEFAULT_X, DEFAULT_Y, DEFAULT_Z);\n-    }\n-\n-    private ValueCapableClass(int x, short y, short z) {\n-        this.x = x;\n-        this.y = y;\n-        this.z = z;\n-    }\n-\n-    public int getX() {\n-        return x;\n-    }\n-\n-    public short getY() {\n-        return y;\n-    }\n-\n-    public short getZ() {\n-        return z;\n-    }\n-\n-    public String toString() {\n-        int ax = getX();\n-        short ay = getY();\n-        short az = getZ();\n-        return \"ValueCapableClass x=\" + ax + \" y=\" + ay + \" z=\" + az;\n-    }\n-\n-    public static ValueCapableClass create(int x, short y, short z) {\n-        return new ValueCapableClass(x, y, z);\n-    }\n-\n-    public static ValueCapableClass create() {\n-        return new ValueCapableClass();\n-    }\n-\n-    public static void test() {\n-        ValueCapableClass value = create(4711, (short)7, (short)11);\n-        String s = value.toString();\n-        if ((value.getX() != 4711) || (value.getY() != 7) || value.getZ() != 11) {\n-            throw new IllegalStateException(\"Bad value: \" + s);\n-        }\n-        System.out.println(s);\n-        ValueCapableClass defaultValue = create();\n-        s = defaultValue.toString();\n-        if ((defaultValue.getX() != DEFAULT_X) ||\n-            (defaultValue.getY() != DEFAULT_Y) ||\n-            (defaultValue.getZ() != DEFAULT_Z)) {\n-            throw new IllegalStateException(\"Bad value: \" + s);\n-        }\n-\n-        if (!STATIC_FIELD.equals(\"Should be left alone\")) {\n-            throw new IllegalStateException(\"Bad static field: \" + STATIC_FIELD);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        test();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/ValueCapableClass.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -132,6 +132,1 @@\n-            if (e.getQualifiedName().contentEquals(\"jdk.incubator.mvt\")) {\n-                \/\/completion of a module with 'requires' directive will fail at this stage.\n-                ((ModuleSymbol) e).completer = Completer.NULL_COMPLETER;\n-            } else {\n-                super.visitModule(e, p);\n-            }\n+            super.visitModule(e, p);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/TestSymtabItems.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}