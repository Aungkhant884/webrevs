{"files":[{"patch":"@@ -2280,1 +2280,1 @@\n-            if (t.hasTag(ARRAY) || t.tsym == syms.objectType.tsym)\n+            if (t.hasTag(ARRAY) || t.tsym == syms.objectType.tsym || !t.hasTag(CLASS))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,1 +178,0 @@\n-        allowValueMemberCycles = options.isSet(\"allowValueMemberCycles\");\n@@ -227,5 +226,0 @@\n-    \/**\n-     * Switch: Allow value type member cycles?\n-     *\/\n-    boolean allowValueMemberCycles;\n-\n@@ -1232,0 +1226,6 @@\n+                    } else if ((env.enclClass.sym.flags() & PRIMITIVE_CLASS) != 0 &&\n+                        (tree.mods.flags & GENERATEDCONSTR) == 0 &&\n+                        TreeInfo.isSuperCall(body.stats.head)) {\n+                        \/\/ primitive constructors are not allowed to call super directly,\n+                        \/\/ but tolerate compiler generated ones\n+                        log.error(tree.body.stats.head.pos(), Errors.CallToSuperNotAllowedInPrimitiveCtor);\n@@ -1833,1 +1833,1 @@\n-        chk.checkRefType(tree.pos(), attribExpr(tree.lock, env), false);\n+        chk.checkIdentityType(tree.pos(), attribExpr(tree.lock, env));\n@@ -2584,6 +2584,0 @@\n-                        case \"hashCode\":\n-                        case \"equals\":\n-                        case \"toString\":\n-                            if (superCallOnValueReceiver)\n-                                log.error(tree.pos(), Errors.PrimitiveClassDoesNotSupport(names.fromString(\"invocation of super.\" + name)));\n-                            break;\n@@ -5258,4 +5252,2 @@\n-                if (!allowValueMemberCycles) {\n-                    if (env != null && env.tree != null && env.tree.hasTag(CLASSDEF))\n-                        chk.checkNonCyclicMembership((JCClassDecl)env.tree);\n-                }\n+                if (env != null && env.tree != null && env.tree.hasTag(CLASSDEF))\n+                    chk.checkNonCyclicMembership((JCClassDecl)env.tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -851,0 +851,26 @@\n+    \/** Check that type is an identity type, i.e. not a primitive type\n+     *  nor its reference projection. When not discernible statically,\n+     *  give it the benefit of doubt and defer to runtime.\n+     *\n+     *  @param pos           Position to be used for error reporting.\n+     *  @param t             The type to be checked.\n+     *\/\n+    Type checkIdentityType(DiagnosticPosition pos, Type t) {\n+\n+        if (t.hasTag(ARRAY))\n+            return t;\n+\n+        if (!t.hasTag(CLASS) || t.isPrimitiveClass() || t.isReferenceProjection())\n+            return typeTagError(pos,\n+                    diags.fragment(Fragments.TypeReqIdentity),\n+                    t);\n+\n+        \/* Not appropriate to check\n+         *     if (types.asSuper(t, syms.identityObjectType.tsym) != null)\n+         * since jlO, interface types and abstract types may fail that check\n+         * at compile time.\n+         *\/\n+\n+        return t;\n+    }\n+\n@@ -2419,2 +2445,1 @@\n-                        Type fieldType = field.sym.type;\n-                        checkNonCyclicMembership((ClassSymbol) fieldType.tsym, field.pos());\n+                        checkNonCyclicMembership((ClassSymbol) field.type.tsym, field.pos());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -684,1 +684,1 @@\n-            final boolean isValueType = (tree.mods.flags & Flags.PRIMITIVE_CLASS) != 0;\n+            final boolean isPrimitiveClass = (tree.mods.flags & Flags.PRIMITIVE_CLASS) != 0;\n@@ -711,0 +711,3 @@\n+                    if (isPrimitiveClass && it.tsym == syms.cloneableType.tsym) {\n+                        log.error(tree, Errors.PrimitiveClassMustNotImplementCloneable(ct));\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2452,0 +2452,3 @@\n+compiler.misc.type.req.identity=\\\n+    a type with identity\n+\n@@ -3823,0 +3826,4 @@\n+# 0: type\n+compiler.err.primitive.class.must.not.implement.cloneable=\\\n+    The primitive class {0} attempts to implement the incompatible interface Cloneable\n+\n@@ -3862,0 +3869,2 @@\n+compiler.err.call.to.super.not.allowed.in.primitive.ctor=\\\n+    call to super not allowed in primitive class constructor\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.primitive.class.must.not.implement.cloneable\n+\n+primitive class Primitive implements Cloneable {\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassMustNotImplementCloneable.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.call.to.super.not.allowed.in.primitive.ctor\n+\n+primitive class SuperNotAllowedInPrimitiveCtor {\n+\n+    SuperNotAllowedInPrimitiveCtor() {\n+        super();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SuperNotAllowedInPrimitiveCtor.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.misc.type.req.identity\n+\/\/ key: compiler.err.type.found.req\n+\n+primitive class TypeReqIdentity {\n+    { synchronized (this) {} }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TypeReqIdentity.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile -XDallowValueMemberCycles -XDrawDiagnostics CheckCyclicMembership.java\n+ *\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckCyclicMembership.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile -XDallowValueMemberCycles -XDrawDiagnostics CheckFlattenableCycles.java\n+ *\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFlattenableCycles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -15,3 +15,0 @@\n-CheckObjectMethodsUsage.java:27:23: compiler.err.primitive.class.does.not.support: invocation of super.hashCode\n-CheckObjectMethodsUsage.java:28:23: compiler.err.primitive.class.does.not.support: invocation of super.toString\n-CheckObjectMethodsUsage.java:29:21: compiler.err.primitive.class.does.not.support: invocation of super.equals\n@@ -20,1 +17,1 @@\n-17 errors\n+14 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckObjectMethodsUsage.out","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @summary Check behavior of synzhronized key word on value instances and methods.\n+ * @summary Check behavior of synzhronized key word on primitive class instances and methods.\n@@ -8,1 +8,1 @@\n-primitive final class CheckSynchronized {\n+primitive final class CheckSynchronized implements java.io.Serializable {\n@@ -15,1 +15,19 @@\n-        synchronized(cs) {    \/\/ <<-- ERROR, no monitor associated with value instance.\n+        synchronized(cs) {    \/\/ <<-- ERROR, no monitor associated with primitive class instance.\n+        }\n+\n+        CheckSynchronized.ref csr = cs;\n+        synchronized(csr) {\n+            \/\/ Error, no identity.\n+        }\n+\n+        synchronized(x) {\n+            \/\/ Error, no identity.\n+        }\n+\n+        Object o = cs;\n+        synchronized(o) {\n+            \/\/ Error BUT not discernible at compile time\n+        }\n+        java.io.Serializable jis = cs;\n+        synchronized(jis) {\n+            \/\/ Error BUT not discernible at compile time\n@@ -18,1 +36,1 @@\n-    int x = 10;\n+    static int x = 10;\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSynchronized.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,3 +2,5 @@\n-CheckSynchronized.java:12:9: compiler.err.type.found.req: CheckSynchronized, (compiler.misc.type.req.ref)\n-CheckSynchronized.java:15:9: compiler.err.type.found.req: CheckSynchronized, (compiler.misc.type.req.ref)\n-3 errors\n+CheckSynchronized.java:12:9: compiler.err.type.found.req: CheckSynchronized, (compiler.misc.type.req.identity)\n+CheckSynchronized.java:15:9: compiler.err.type.found.req: CheckSynchronized, (compiler.misc.type.req.identity)\n+CheckSynchronized.java:19:9: compiler.err.type.found.req: CheckSynchronized.ref, (compiler.misc.type.req.identity)\n+CheckSynchronized.java:23:9: compiler.err.type.found.req: int, (compiler.misc.type.req.identity)\n+5 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSynchronized.out","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8267843\n+ * @summary Check that javac diagnoses `this` being passed around and instance method being invoked before primitive class instance is fully initialized.\n+ * @compile\/fail\/ref=DualNonDuplicateErrors.out -XDrawDiagnostics DualNonDuplicateErrors.java\n+ *\/\n+\n+public primitive class DualNonDuplicateErrors {\n+\n+    int x;\n+\n+    DualNonDuplicateErrors() {\n+        \/\/ The call below should trigger two errors - they are not duplicates really.\n+        \/\/ First one is for `this` being passed around (\"exposed\")\n+        \/\/ Second is for instance method being invoked thereby allowing that method to\n+        \/\/ observe the primitive class instance in a partially initialized state.\n+        foo(this);\n+        x = 10;\n+        foo(this); \/\/ No error here.\n+    }\n+\n+    void foo(DualNonDuplicateErrors x) {\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DualNonDuplicateErrors.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+DualNonDuplicateErrors.java:17:13: compiler.err.this.exposed.prematurely\n+DualNonDuplicateErrors.java:17:12: compiler.err.this.exposed.prematurely\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DualNonDuplicateErrors.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -2,3 +2,1 @@\n-SneakThroSuperCallTest.java:17:30: compiler.err.primitive.class.does.not.support: invocation of super.hashCode\n-SneakThroSuperCallTest.java:21:30: compiler.err.primitive.class.does.not.support: invocation of super.toString\n-3 errors\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SneakThroSuperCallTest.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8267835\n+ * @summary  Javac tolerates vacuous chaining to super constructor from primitive class constructor\n+ * @compile\/fail\/ref=SuperCallInCtor.out -XDrawDiagnostics SuperCallInCtor.java\n+ *\/\n+\n+final class SuperCallInCtor {\n+\n+    primitive class P {\n+       \/\/ generated ctor with super() call is OK.\n+    }\n+\n+    primitive class Q {\n+        Q() {\n+            System.out.println(\"Construct Q\"); \/\/ Ok, no express super();\n+        }\n+\n+        Q(int x) {\n+            this();   \/\/ chaining with this is OK.\n+        }\n+\n+        Q(String s) {\n+            super();  \/\/ Error.\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperCallInCtor.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+SuperCallInCtor.java:24:13: compiler.err.call.to.super.not.allowed.in.primitive.ctor\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperCallInCtor.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267965\n+ * @summary Javac disallows calls to super.{hashCode(), equals(), toString()} on a primitive instance receiver\n+ * @run main SuperHashCodeEqualsToStringTest\n+ *\/\n+\n+public class SuperHashCodeEqualsToStringTest {\n+\n+    static primitive class Prime {\n+\n+        @Override\n+        public int hashCode() {\n+            return super.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            return super.equals(obj);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return super.toString();\n+        }\n+    }\n+\n+    public static void main(String [] args) {\n+\n+        if (new Prime().hashCode() != new Prime().hashCode())\n+            throw new AssertionError(\"Broken\");\n+\n+        if (!new Prime().equals(new Prime()))\n+            throw new AssertionError(\"Broken\");\n+\n+        if (!new Prime().toString().equals(new Prime().toString()))\n+            throw new AssertionError(\"Broken\" + new Prime().toString());\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperHashCodeEqualsToStringTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}