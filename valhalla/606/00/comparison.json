{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-  _is_flattened(false), _known_to_link_with_put(NULL), _known_to_link_with_get(NULL) {\n+  _original_holder(NULL), _is_flattened(false), _known_to_link_with_put(NULL), _known_to_link_with_get(NULL) {\n@@ -243,1 +243,2 @@\n-  _is_null_free = field->is_null_free();\n+  _is_null_free = field->_is_null_free;\n+  _original_holder = (field->_original_holder != NULL) ? field->_original_holder : field->_holder;\n@@ -295,0 +296,1 @@\n+  _original_holder = NULL;\n@@ -378,1 +380,3 @@\n-  ciKlass* type = CURRENT_ENV->get_klass_by_name_impl(_holder, constantPoolHandle(), _signature, false);\n+  \/\/ Use original holder for fields that came in through flattening\n+  ciKlass* accessing_klass = (_original_holder != NULL) ? _original_holder : _holder;\n+  ciKlass* type = CURRENT_ENV->get_klass_by_name_impl(accessing_klass, constantPoolHandle(), _signature, false);\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+  ciInstanceKlass* _original_holder; \/\/ For flattened fields\n","filename":"src\/hotspot\/share\/ci\/ciField.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm TestArrayAccessDeopt\n+ * @run driver TestArrayAccessDeopt\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+\n+import jdk.test.lib.Utils;\n+\n+\/\/ Copy classes into a separate folder to put them on the bootclasspath\n+public class InstallBootstrapClasses {\n+\n+    private static void copyClass(String name) throws IOException {\n+        Path source = Path.of(Utils.TEST_CLASSES).resolve(name);\n+        Path dest = Path.of(\"boot\");\n+        Path target = dest.resolve(name);\n+        Files.createDirectories(dest);\n+        Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        copyClass(ValueOnBootclasspath.class.getSimpleName() + \".class\");\n+        copyClass(MyClass.class.getSimpleName() + \".class\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/InstallBootstrapClasses.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import jdk.test.lib.Asserts;\n+import sun.hotspot.WhiteBox;\n+\n+\/*\n+ * @test\n+ * @key randomness\n+ * @bug 8280006\n+ * @summary Test that field flattening works as expected if primitive classes of\n+ *          holder and field were loaded by different class loaders (bootstrap + app).\n+ * @library \/test\/lib \/\n+ * @requires (os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\")\n+ * @build sun.hotspot.WhiteBox TestBootClassloader InstallBootstrapClasses\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run driver InstallBootstrapClasses\n+ * @run main\/othervm -Xbootclasspath\/a:boot -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -Xbatch -XX:-TieredCompilation -XX:CompileCommand=compileonly,TestBootClassloader::test*\n+ *                   -XX:CompileCommand=inline,*::get* TestBootClassloader\n+ *\/\n+\n+public class TestBootClassloader {\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+    private static final int COMP_LEVEL_FULL_OPTIMIZATION = 4;\n+\n+    static primitive class Wrapper1 {\n+        ValueOnBootclasspath val; \/\/ Type will be loaded by boot classloader\n+\n+        public Wrapper1(ValueOnBootclasspath val) {\n+            this.val = val;\n+        }\n+\n+        Object get() {\n+            return val.get();\n+        }\n+    }\n+\n+    static primitive class Wrapper2 {\n+        Wrapper1 val;\n+\n+        public Wrapper2(Wrapper1 val) {\n+            this.val = val;\n+        }\n+\n+        Object get() {\n+            return val.get();\n+        }\n+    }\n+\n+    static Object test1(Wrapper1 w) {\n+        return w.get();\n+    }\n+\n+    static Object test2(Wrapper2 w) {\n+        return w.get();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Wrapper1 wrapper1 = new Wrapper1(new ValueOnBootclasspath());\n+        Wrapper2 wrapper2 = new Wrapper2(wrapper1);\n+        for (int i = 0; i < 50_000; ++i) {\n+            test1(wrapper1);\n+            test2(wrapper2);\n+        }\n+        Method method = TestBootClassloader.class.getDeclaredMethod(\"test1\", Wrapper1.class.asValueType());\n+        Asserts.assertTrue(WB.isMethodCompilable(method, COMP_LEVEL_FULL_OPTIMIZATION, false), \"Test1 method not compilable\");\n+        Asserts.assertTrue(WB.isMethodCompiled(method), \"Test1 method not compiled\");\n+\n+        method = TestBootClassloader.class.getDeclaredMethod(\"test2\", Wrapper2.class.asValueType());\n+        Asserts.assertTrue(WB.isMethodCompilable(method, COMP_LEVEL_FULL_OPTIMIZATION, false), \"Test2 method not compilable\");\n+        Asserts.assertTrue(WB.isMethodCompiled(method), \"Test2 method not compiled\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/TestBootClassloader.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class MyClass {\n+\n+}\n+\n+\/\/ Loaded by boot classloader\n+public primitive class ValueOnBootclasspath {\n+    private MyClass field = new MyClass();\n+\n+    private MyClass getField() {\n+        return field;\n+    }\n+\n+    public Object get() {\n+        return getField();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/ValueOnBootclasspath.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}