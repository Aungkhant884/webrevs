{"files":[{"patch":"@@ -1946,3 +1946,1 @@\n-        public TVFlavor flavor;\n-\n-        \/** if this type variable is universal then it will also have a link to a pure reference\n+        \/** if this type variable is universal then it could also have a link to a pure reference\n@@ -1955,5 +1953,4 @@\n-        public enum TVFlavor {\n-            REFERENCE,\n-            UNIVERSAL,\n-            REFERENCE_FROM_UNIVERSAL\n-        }\n+        public boolean isReferenceProjection;\n+\n+        \/\/ redundant for now but helpful for debug reasons\n+        public boolean isUniversal;\n@@ -1962,1 +1959,1 @@\n-            this(name, owner, lower, TVFlavor.REFERENCE);\n+            this(name, owner, lower, false, false);\n@@ -1965,1 +1962,1 @@\n-        public TypeVar(Name name, Symbol owner, Type lower, TVFlavor flavor) {\n+        public TypeVar(Name name, Symbol owner, Type lower, boolean isUniversal, boolean isReferenceProjection) {\n@@ -1968,1 +1965,1 @@\n-            tsym = new TypeVariableSymbol(flavor == TVFlavor.UNIVERSAL ? UNIVERSAL : 0, name, this, owner);\n+            tsym = new TypeVariableSymbol(isUniversal ? UNIVERSAL : 0, name, this, owner);\n@@ -1971,1 +1968,2 @@\n-            this.flavor = flavor;\n+            this.isReferenceProjection = isReferenceProjection;\n+            this.isUniversal = isUniversal;\n@@ -1980,1 +1978,1 @@\n-            this(tsym, bound, lower, metadata, TVFlavor.REFERENCE);\n+            this(tsym, bound, lower, metadata, false);\n@@ -1984,1 +1982,1 @@\n-                       TypeMetadata metadata, TVFlavor flavor) {\n+                       TypeMetadata metadata, boolean isReferenceProjection) {\n@@ -1989,1 +1987,2 @@\n-            this.flavor = flavor;\n+            this.isReferenceProjection = isReferenceProjection;\n+            this.isUniversal = (tsym.flags_field & UNIVERSAL) != 0;\n@@ -1994,1 +1993,1 @@\n-            return new TypeVar(tsym, getUpperBound(), lower, md) {\n+            return new TypeVar(tsym, getUpperBound(), lower, md, isReferenceProjection) {\n@@ -2051,8 +2050,0 @@\n-        public TVFlavor getTVFlavor() {\n-            return flavor;\n-        }\n-\n-        public boolean hasUniversalFlavor() {\n-            return flavor == TVFlavor.UNIVERSAL;\n-        }\n-\n@@ -2062,1 +2053,1 @@\n-                    ((TypeVar)t).flavor == TVFlavor.REFERENCE_FROM_UNIVERSAL &&\n+                    ((TypeVar)t).isReferenceProjection() &&\n@@ -2072,1 +2063,1 @@\n-                projection = new TypeVar(tsym, _bound, lower, metadata, TVFlavor.REFERENCE_FROM_UNIVERSAL);\n+                projection = new TypeVar(tsym, _bound, lower, metadata, true);\n@@ -2076,0 +2067,12 @@\n+\n+        public boolean isUniversal() {\n+            return ((tsym.flags_field & UNIVERSAL) != 0);\n+        }\n+\n+        public boolean isReferenceProjection() {\n+            return isReferenceProjection;\n+        }\n+\n+        public boolean isValueProjection() {\n+            return isUniversal() && !isReferenceProjection();\n+        }\n@@ -2095,1 +2098,1 @@\n-            this.flavor = wildcard.bound != null ? wildcard.bound.flavor : TVFlavor.REFERENCE;\n+            this.isReferenceProjection = wildcard.bound != null ? wildcard.bound.isReferenceProjection : false;\n@@ -2106,1 +2109,1 @@\n-            this.flavor = wildcard.bound != null ? wildcard.bound.flavor : TVFlavor.REFERENCE;\n+            this.isReferenceProjection = wildcard.bound != null ? wildcard.bound.isReferenceProjection : false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":31,"deletions":28,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -614,2 +614,2 @@\n-        if (allowUniversalTVars && (s.hasTag(TYPEVAR)) && ((TypeVar)s).hasUniversalFlavor() &&\n-                (t.hasTag(BOT) || t.hasTag(TYPEVAR) && !((TypeVar)t).hasUniversalFlavor())) {\n+        if (allowUniversalTVars && (s.hasTag(TYPEVAR)) && ((TypeVar)s).isValueProjection() &&\n+                (t.hasTag(BOT) || t.hasTag(TYPEVAR) && !((TypeVar)t).isValueProjection())) {\n@@ -1042,1 +1042,1 @@\n-            } else if (t.hasTag(TYPEVAR) && ((TypeVar)t).hasUniversalFlavor()) {\n+            } else if (t.hasTag(TYPEVAR) && ((TypeVar)t).isUniversal()) {\n@@ -1044,1 +1044,1 @@\n-            } else if (s.hasTag(TYPEVAR) && ((TypeVar)s).hasUniversalFlavor()) {\n+            } else if (s.hasTag(TYPEVAR) && ((TypeVar)s).isUniversal()) {\n@@ -1186,1 +1186,1 @@\n-                     if (allowUniversalTVars && s.hasTag(TYPEVAR) && ((TypeVar)s).hasUniversalFlavor()) {\n+                     if (allowUniversalTVars && s.hasTag(TYPEVAR) && ((TypeVar)s).isValueProjection()) {\n@@ -1707,1 +1707,1 @@\n-                    if (allowUniversalTVars && t.hasUniversalFlavor() != other.hasUniversalFlavor() && t.tsym == other.tsym)\n+                    if (allowUniversalTVars && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym)\n@@ -3614,1 +3614,1 @@\n-                        t.flavor == TypeVar.TVFlavor.REFERENCE_FROM_UNIVERSAL &&\n+                        !t.isValueProjection() &&\n@@ -3769,1 +3769,1 @@\n-                TypeVar newTV = new TypeVar(t.tsym, t.getUpperBound(), t.getLowerBound(), t.getMetadata(), t.flavor);\n+                TypeVar newTV = new TypeVar(t.tsym, t.getUpperBound(), t.getLowerBound(), t.getMetadata(), t.isReferenceProjection);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2663,1 +2663,1 @@\n-                boolean qualifierIsUniversal = allowUniversalTVars && qualifier.hasTag(TYPEVAR) && ((TypeVar)qualifier).hasUniversalFlavor();\n+                boolean qualifierIsUniversal = allowUniversalTVars && qualifier.hasTag(TYPEVAR) && ((TypeVar)qualifier).isValueProjection();\n@@ -4600,1 +4600,1 @@\n-                if (allowUniversalTVars && name == names.ref && ((TypeVar)site).hasUniversalFlavor()) {\n+                if (allowUniversalTVars && name == names.ref && ((TypeVar)site).isValueProjection()) {\n@@ -5149,1 +5149,1 @@\n-                argTypes.head = chk.checkRefType(args.head.pos(), argTypes.head, ((TypeVar) t).hasUniversalFlavor());\n+                argTypes.head = chk.checkRefType(args.head.pos(), argTypes.head, ((TypeVar) t).isValueProjection());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-            : new TypeVar(tree.name, env.info.scope.owner, syms.botType, tree.universal ? TypeVar.TVFlavor.UNIVERSAL : TypeVar.TVFlavor.REFERENCE);\n+            : new TypeVar(tree.name, env.info.scope.owner, syms.botType, tree.universal, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1874,1 +1874,1 @@\n-                    sym.type.hasTag(TYPEVAR) && ((Type.TypeVar)sym.type).hasUniversalFlavor());\n+                    sym.type.hasTag(TYPEVAR) && ((Type.TypeVar)sym.type).isValueProjection());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1081,1 +1081,1 @@\n-            TypeParameter(name, Types(types.getBounds(tvar)), List.nil(), tvar.hasUniversalFlavor()).setPos(pos).setType(tvar);\n+            TypeParameter(name, Types(types.getBounds(tvar)), List.nil(), tvar.isValueProjection()).setPos(pos).setType(tvar);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}