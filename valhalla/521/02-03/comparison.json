{"files":[{"patch":"@@ -1953,1 +1953,1 @@\n-        public boolean isReferenceProjection;\n+        protected boolean isReferenceProjection = false;\n@@ -1956,1 +1956,1 @@\n-        public boolean isUniversal;\n+        private boolean isUniversal;\n@@ -1959,1 +1959,1 @@\n-            this(name, owner, lower, false, false);\n+            this(name, owner, lower, false);\n@@ -1962,1 +1962,1 @@\n-        public TypeVar(Name name, Symbol owner, Type lower, boolean isUniversal, boolean isReferenceProjection) {\n+        public TypeVar(Name name, Symbol owner, Type lower, boolean isUniversal) {\n@@ -1968,1 +1968,0 @@\n-            this.isReferenceProjection = isReferenceProjection;\n@@ -1970,0 +1969,3 @@\n+            if (isUniversal && !isReferenceProjection) {\n+                referenceProjection();\n+            }\n@@ -1989,0 +1991,3 @@\n+            if (isUniversal && !isReferenceProjection) {\n+                referenceProjection();\n+            }\n@@ -2017,1 +2022,5 @@\n-        public void setUpperBound(Type bound) { this._bound = bound; }\n+        public void setUpperBound(Type bound) {\n+            this._bound = bound;\n+            if (projection != null)\n+                projection.setUpperBound(bound);\n+        }\n@@ -2050,10 +2059,0 @@\n-        @Override\n-        public Type withTypeVar(Type t) {\n-            if (t.hasTag(TYPEVAR) &&\n-                    ((TypeVar)t).isReferenceProjection() &&\n-                    projection != null) {\n-                return projection;\n-            }\n-            return this;\n-        }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -3610,8 +3610,5 @@\n-                if (t.equalsIgnoreMetadata(from.head)) {\n-                    return to.head.withTypeVar(t);\n-                }\n-                if (allowUniversalTVars &&\n-                        !t.isValueProjection() &&\n-                        from.head.hasTag(TYPEVAR) &&\n-                        ((TypeVar)from.head).projection != null &&\n-                        t.equalsIgnoreMetadata(((TypeVar)from.head).projection)) {\n+                if (t.equalsIgnoreMetadata(from.head) ||\n+                    allowUniversalTVars &&\n+                    !t.isValueProjection() &&\n+                    from.head.hasTag(TYPEVAR) &&\n+                    t.equalsIgnoreMetadata(((TypeVar)from.head).referenceProjection())) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2663,1 +2663,1 @@\n-                boolean qualifierIsUniversal = allowUniversalTVars && qualifier.hasTag(TYPEVAR) && ((TypeVar)qualifier).isValueProjection();\n+                boolean qualifierIsUniversal = allowUniversalTVars && qualifier.hasTag(TYPEVAR) && ((TypeVar)qualifier).isUniversal();\n@@ -4467,2 +4467,1 @@\n-        tree.sym = (allowUniversalTVars && site.getTag() == TYPEVAR && tree.name == names.ref) ?\n-                sym.type.tsym : sym;\n+        tree.sym = sym;\n@@ -4600,9 +4599,2 @@\n-                if (allowUniversalTVars && name == names.ref && ((TypeVar)site).isValueProjection()) {\n-                    TypeVar siteTV = (TypeVar)site;\n-                    if (siteTV.projection == null) {\n-                        TypeVariableSymbol tmpTVarSym = new TypeVariableSymbol(siteTV.tsym.flags(), siteTV.tsym.name, null, siteTV.tsym.owner);\n-                        tmpTVarSym.type = siteTV.referenceProjection();\n-                    }\n-                    TypeVariableSymbol tmpTVarSym = new TypeVariableSymbol(siteTV.tsym.flags(), siteTV.tsym.name, null, siteTV.tsym.owner);\n-                    tmpTVarSym.type = siteTV.referenceProjection();\n-                    return tmpTVarSym;\n+                if (allowUniversalTVars && name == names.ref && ((TypeVar)site).isUniversal()) {\n+                    return ((TypeVar)site).referenceProjection().tsym;\n@@ -5149,1 +5141,1 @@\n-                argTypes.head = chk.checkRefType(args.head.pos(), argTypes.head, ((TypeVar) t).isValueProjection());\n+                argTypes.head = chk.checkRefType(args.head.pos(), argTypes.head, ((TypeVar) t).isUniversal());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-            : new TypeVar(tree.name, env.info.scope.owner, syms.botType, tree.universal, false);\n+            : new TypeVar(tree.name, env.info.scope.owner, syms.botType, tree.universal);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}