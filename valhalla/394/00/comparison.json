{"files":[{"patch":"@@ -104,0 +104,12 @@\n+    \/**\n+     * If true, the ClassWriter will split a primitive class declaration into two class files\n+     * P.ref.class and P.val.class (P.class for pure primitive classes)\n+     *\n+     * This is the default behavior, can be eoverridden with -XDunifiedValRefClass\n+     *\n+     * If false, we emit a single class for a primtive class 'P' and the reference projection and\n+     * value projection types are encoded in descriptors as LP; and QP; resperctively.\n+     *\/\n+\n+    public boolean splitPrimitiveClass;\n+\n@@ -129,0 +141,1 @@\n+        splitPrimitiveClass = options.isUnset(\"unifiedValRefClass\");\n@@ -5356,1 +5369,1 @@\n-            if (ct.isReferenceProjection()) {\n+            if (types.splitPrimitiveClass && ct.isReferenceProjection()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3111,5 +3111,4 @@\n-            \/\/ widening coversion is a NOP for the VM due to subtyping relationship at class file\n-            return tree;\n-        } else {\n-            \/\/ For narrowing conversion, insert a cast which should trigger a null check\n-            return (T) make.TypeCast(type, tree);\n+            \/\/ widening coversion is a NOP for the VM due to subtyping relationship at class file level\n+            \/\/ where we bifurcate a primitive class into two class files.\n+            if (types.splitPrimitiveClass)\n+                return tree;\n@@ -3117,0 +3116,4 @@\n+        \/\/ For narrowing conversion, insert a cast which should trigger a null check\n+        \/\/ For widening conversions, insert a cast if emitting a unified class file.\n+        return (T) make.TypeCast(type, tree);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2690,1 +2690,1 @@\n-                    readClassFileInternal(referenceProjection);\n+                    referenceProjection.complete();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -848,1 +848,1 @@\n-            if (inner.isPrimitiveClass()) {\n+            if (inner.isPrimitiveClass() && types.splitPrimitiveClass) {\n@@ -886,1 +886,1 @@\n-            if (csym.isPrimitiveClass()) {\n+            if (csym.isPrimitiveClass() && types.splitPrimitiveClass) {\n@@ -902,1 +902,1 @@\n-                    if (s.isPrimitiveClass() && s.owner.kind != PCK) {\n+                    if (s.isPrimitiveClass() && types.splitPrimitiveClass && s.owner.kind != PCK) {\n@@ -919,1 +919,1 @@\n-        if (csym.owner.kind != PCK || csym.isPrimitiveClass()) {\n+        if (csym.owner.kind != PCK || (csym.isPrimitiveClass() && types.splitPrimitiveClass)) {\n@@ -922,1 +922,1 @@\n-            if (outerMost.isPrimitiveClass()) {\n+            if (outerMost.isPrimitiveClass() && types.splitPrimitiveClass) {\n@@ -1533,1 +1533,1 @@\n-        if (c.isPrimitiveClass()) {\n+        if (c.isPrimitiveClass() && types.splitPrimitiveClass) {\n@@ -1634,2 +1634,2 @@\n-        Type supertype = c.isPrimitiveClass() ? c.type.referenceProjection() : types.supertype(c.type);\n-        List<Type> interfaces = c.isPrimitiveClass() ? List.nil() : types.interfaces(c.type);\n+        Type supertype = c.isPrimitiveClass() && types.splitPrimitiveClass ? c.type.referenceProjection() : types.supertype(c.type);\n+        List<Type> interfaces = c.isPrimitiveClass() && types.splitPrimitiveClass ? List.nil() : types.interfaces(c.type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -402,0 +402,11 @@\n+    public void emitLdc(LoadableConstant constant, int od) {\n+        if (od <= 255) {\n+            emitop1(ldc1, od, constant);\n+        }\n+        else {\n+            emitop2(ldc2, od, constant);\n+        }\n+    }\n+\n+    \/** Emit a ldc (or ldc_w) instruction, taking into account operand size\n+     *\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2275,1 +2275,1 @@\n-        \/\/ inline widening conversion is a nop, as the VM sees a subtyping relationship.\n+        \/\/ inline widening conversion is a nop when we bifurcate the primitive class, as the VM sees a subtyping relationship.\n@@ -2278,1 +2278,1 @@\n-            (!tree.clazz.type.isReferenceProjection() || !types.isSameType(tree.clazz.type.valueProjection(), tree.expr.type)) &&\n+            (!tree.clazz.type.isReferenceProjection() || !types.splitPrimitiveClass || !types.isSameType(tree.clazz.type.valueProjection(), tree.expr.type)) &&\n@@ -2348,1 +2348,1 @@\n-            code.emitLdc((LoadableConstant)checkDimension(tree.pos(), tree.selected.type));\n+            code.emitLdc((LoadableConstant) tree.selected.type, makeRef(tree.pos(), tree.selected.type, !types.splitPrimitiveClass && tree.selected.type.isPrimitiveClass()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-                    if (ct.isReferenceProjection()) {\n+                    if (types.splitPrimitiveClass && ct.isReferenceProjection()) {\n@@ -517,2 +517,2 @@\n-        signatureGen.assembleSig(t.isPrimitiveClass() ? t.referenceProjection() : types.supertype(t));\n-        if (!t.isPrimitiveClass()) {\n+        signatureGen.assembleSig(t.isPrimitiveClass() && types.splitPrimitiveClass ? t.referenceProjection() : types.supertype(t));\n+        if (!t.isPrimitiveClass() || !types.splitPrimitiveClass) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}