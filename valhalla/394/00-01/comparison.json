{"files":[{"patch":"@@ -1432,0 +1432,8 @@\n+        \/**\n+         * Does `this' symbolize a primitive class that would, under the translation\n+         * scheme in effect be lowered into two class files on a bifurcased basis ??\n+         *\/\n+        public boolean isSplitPrimitiveClass(Types types) {\n+            return types.splitPrimitiveClass && this.isPrimitiveClass();\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -848,1 +848,1 @@\n-            if (inner.isPrimitiveClass() && types.splitPrimitiveClass) {\n+            if (inner.isSplitPrimitiveClass(types)) {\n@@ -886,1 +886,1 @@\n-            if (csym.isPrimitiveClass() && types.splitPrimitiveClass) {\n+            if (csym.isSplitPrimitiveClass(types)) {\n@@ -902,1 +902,1 @@\n-                    if (s.isPrimitiveClass() && types.splitPrimitiveClass && s.owner.kind != PCK) {\n+                    if (s.isSplitPrimitiveClass(types) && s.owner.kind != PCK) {\n@@ -919,1 +919,1 @@\n-        if (csym.owner.kind != PCK || (csym.isPrimitiveClass() && types.splitPrimitiveClass)) {\n+        if (csym.owner.kind != PCK || csym.isSplitPrimitiveClass(types)) {\n@@ -922,1 +922,1 @@\n-            if (outerMost.isPrimitiveClass() && types.splitPrimitiveClass) {\n+            if (outerMost.isSplitPrimitiveClass(types)) {\n@@ -1533,1 +1533,1 @@\n-        if (c.isPrimitiveClass() && types.splitPrimitiveClass) {\n+        if (c.isSplitPrimitiveClass(types)) {\n@@ -1634,2 +1634,2 @@\n-        Type supertype = c.isPrimitiveClass() && types.splitPrimitiveClass ? c.type.referenceProjection() : types.supertype(c.type);\n-        List<Type> interfaces = c.isPrimitiveClass() && types.splitPrimitiveClass ? List.nil() : types.interfaces(c.type);\n+        Type supertype = c.isSplitPrimitiveClass(types) ? c.type.referenceProjection() : types.supertype(c.type);\n+        List<Type> interfaces = c.isSplitPrimitiveClass(types) ? List.nil() : types.interfaces(c.type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}