{"files":[{"patch":"@@ -4872,71 +4872,0 @@\n-\/\/ jdk_internal_vm_jni_SubElementSelector\n-\n-int jdk_internal_vm_jni_SubElementSelector::_arrayElementType_offset;\n-int jdk_internal_vm_jni_SubElementSelector::_subElementType_offset;\n-int jdk_internal_vm_jni_SubElementSelector::_offset_offset;\n-int jdk_internal_vm_jni_SubElementSelector::_isInlined_offset;\n-int jdk_internal_vm_jni_SubElementSelector::_isInlineType_offset;\n-\n-#define SUBELEMENT_SELECTOR_FIELDS_DO(macro) \\\n-  macro(_arrayElementType_offset,  k, \"arrayElementType\", class_signature, false); \\\n-  macro(_subElementType_offset,    k, \"subElementType\",   class_signature, false); \\\n-  macro(_offset_offset,            k, \"offset\",           int_signature,   false); \\\n-  macro(_isInlined_offset,         k, \"isInlined\",        bool_signature,  false); \\\n-  macro(_isInlineType_offset,      k, \"isInlineType\",     bool_signature,  false);\n-\n-void jdk_internal_vm_jni_SubElementSelector::compute_offsets() {\n-  InstanceKlass* k = vmClasses::jdk_internal_vm_jni_SubElementSelector_klass();\n-  SUBELEMENT_SELECTOR_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n-}\n-\n-#if INCLUDE_CDS\n-void jdk_internal_vm_jni_SubElementSelector::serialize_offsets(SerializeClosure* f) {\n-  SUBELEMENT_SELECTOR_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n-}\n-#endif\n-#undef SUBELEMENT_SELECTOR_FIELDS_DO\n-\n-Symbol* jdk_internal_vm_jni_SubElementSelector::symbol() {\n-  return vmSymbols::jdk_internal_vm_jni_SubElementSelector();\n-}\n-\n-oop jdk_internal_vm_jni_SubElementSelector::getArrayElementType(oop obj) {\n-  return obj->obj_field(_arrayElementType_offset);\n-}\n-\n-void jdk_internal_vm_jni_SubElementSelector::setArrayElementType(oop obj, oop type) {\n-  obj->obj_field_put(_arrayElementType_offset, type);\n-}\n-\n-oop jdk_internal_vm_jni_SubElementSelector::getSubElementType(oop obj) {\n-  return obj->obj_field(_subElementType_offset);\n-}\n-\n-void jdk_internal_vm_jni_SubElementSelector::setSubElementType(oop obj, oop type) {\n-  obj->obj_field_put(_subElementType_offset, type);\n-}\n-\n-int jdk_internal_vm_jni_SubElementSelector::getOffset(oop obj) {\n-  return obj->int_field(_offset_offset);\n-}\n-\n-void jdk_internal_vm_jni_SubElementSelector::setOffset(oop obj, int offset) {\n-  obj->int_field_put(_offset_offset, offset);\n-}\n-\n-bool jdk_internal_vm_jni_SubElementSelector::getIsInlined(oop obj) {\n-  return obj->bool_field(_isInlined_offset);\n-}\n-\n-void jdk_internal_vm_jni_SubElementSelector::setIsInlined(oop obj, bool b) {\n-  obj->bool_field_put(_isInlined_offset, b);\n-}\n-\n-bool jdk_internal_vm_jni_SubElementSelector::getIsInlineType(oop obj) {\n-  return obj->bool_field(_isInlineType_offset);\n-}\n-\n-void jdk_internal_vm_jni_SubElementSelector::setIsInlineType(oop obj, bool b) {\n-  obj->bool_field_put(_isInlineType_offset, b);\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":0,"deletions":71,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-  f(jdk_internal_vm_jni_SubElementSelector) \\\n@@ -1714,25 +1713,0 @@\n-class jdk_internal_vm_jni_SubElementSelector : AllStatic {\n- private:\n-  static int _arrayElementType_offset;\n-  static int _subElementType_offset;\n-  static int _offset_offset;\n-  static int _isInlined_offset;\n-  static int _isInlineType_offset;\n- public:\n-  static Symbol* symbol();\n-  static void compute_offsets();\n-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n-\n-  static oop getArrayElementType(oop obj);\n-  static void setArrayElementType(oop obj, oop type);\n-  static oop getSubElementType(oop obj);\n-  static void setSubElementType(oop obj, oop type);\n-  static int getOffset(oop obj);\n-  static void setOffset(oop obj, int offset);\n-  static bool getIsInlined(oop obj);\n-  static void setIsInlined(oop obj, bool b);\n-  static bool getIsInlineType(oop obj);\n-  static void setIsInlineType(oop obj, bool b);\n-};\n-\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -177,1 +177,0 @@\n-  do_klass(jdk_internal_vm_jni_SubElementSelector_klass, jdk_internal_vm_jni_SubElementSelector               ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -714,1 +714,0 @@\n-  template(jdk_internal_vm_jni_SubElementSelector, \"jdk\/internal\/vm\/jni\/SubElementSelector\")                      \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3224,262 +3224,0 @@\n-\n-JNI_ENTRY(void*, jni_GetFlattenedArrayElements(JNIEnv* env, jarray array, jboolean* isCopy))\n-  if (isCopy != NULL) {\n-    *isCopy = JNI_FALSE;\n-  }\n-  arrayOop ar = arrayOop(JNIHandles::resolve_non_null(array));\n-  if (!ar->is_array()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Not an array\");\n-  }\n-  if (!ar->is_flatArray()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Not a flattened array\");\n-  }\n-  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass());\n-  if (vak->contains_oops()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Flattened array contains oops\");\n-  }\n-  oop a = lock_gc_or_pin_object(thread, array);\n-  flatArrayOop vap = flatArrayOop(a);\n-  void* ret = vap->value_at_addr(0, vak->layout_helper());\n-  return ret;\n-JNI_END\n-\n-JNI_ENTRY(void, jni_ReleaseFlattenedArrayElements(JNIEnv* env, jarray array, void* elem, jint mode))\n-  unlock_gc_or_unpin_object(thread, array);\n-JNI_END\n-\n-JNI_ENTRY(jsize, jni_GetFlattenedArrayElementSize(JNIEnv* env, jarray array)) {\n-  arrayOop a = arrayOop(JNIHandles::resolve_non_null(array));\n-  if (!a->is_array()) {\n-    THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), \"Not an array\");\n-  }\n-  if (!a->is_flatArray()) {\n-    THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), \"Not a flattened array\");\n-  }\n-  FlatArrayKlass* vak = FlatArrayKlass::cast(a->klass());\n-  jsize ret = vak->element_byte_size();\n-  return ret;\n-}\n-JNI_END\n-\n-JNI_ENTRY(jclass, jni_GetFlattenedArrayElementClass(JNIEnv* env, jarray array))\n-  arrayOop a = arrayOop(JNIHandles::resolve_non_null(array));\n-  if (!a->is_array()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Not an array\");\n-  }\n-  if (!a->is_flatArray()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Not a flattened array\");\n-  }\n-  FlatArrayKlass* vak = FlatArrayKlass::cast(a->klass());\n-  InlineKlass* vk = vak->element_klass();\n-  return (jclass) JNIHandles::make_local(vk->java_mirror());\n-JNI_END\n-\n-JNI_ENTRY(jsize, jni_GetFieldOffsetInFlattenedLayout(JNIEnv* env, jclass clazz, const char *name, const char *signature, jboolean* is_inlined))\n-  oop mirror = JNIHandles::resolve_non_null(clazz);\n-  Klass* k = java_lang_Class::as_Klass(mirror);\n-  if (!k->is_inline_klass()) {\n-    ResourceMark rm;\n-        THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), err_msg(\"%s has not flattened layout\", k->external_name()));\n-  }\n-  InlineKlass* vk = InlineKlass::cast(k);\n-\n-  TempNewSymbol fieldname = SymbolTable::probe(name, (int)strlen(name));\n-  TempNewSymbol signame = SymbolTable::probe(signature, (int)strlen(signature));\n-  if (fieldname == NULL || signame == NULL) {\n-    ResourceMark rm;\n-    THROW_MSG_0(vmSymbols::java_lang_NoSuchFieldError(), err_msg(\"%s.%s %s\", vk->external_name(), name, signature));\n-  }\n-\n-  assert(vk->is_initialized(), \"If a flattened array has been created, the element klass must have been initialized\");\n-\n-  fieldDescriptor fd;\n-  if (!vk->is_instance_klass() ||\n-      !InstanceKlass::cast(vk)->find_field(fieldname, signame, false, &fd)) {\n-    ResourceMark rm;\n-    THROW_MSG_0(vmSymbols::java_lang_NoSuchFieldError(), err_msg(\"%s.%s %s\", vk->external_name(), name, signature));\n-  }\n-\n-  int offset = fd.offset() - vk->first_field_offset();\n-  if (is_inlined != NULL) {\n-    *is_inlined = fd.is_inlined();\n-  }\n-  return (jsize)offset;\n-JNI_END\n-\n-JNI_ENTRY(jobject, jni_CreateSubElementSelector(JNIEnv* env, jarray array))\n-  oop ar = JNIHandles::resolve_non_null(array);\n-  if (!ar->is_array()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Not an array\");\n-  }\n-  if (!ar->is_flatArray()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Not a flattened array\");\n-  }\n-  flatArrayHandle ar_h(THREAD, flatArrayOop(ar));\n-  Klass* ses_k = SystemDictionary::resolve_or_null(vmSymbols::jdk_internal_vm_jni_SubElementSelector(),\n-        Handle(THREAD, SystemDictionary::java_system_loader()), Handle(), CHECK_NULL);\n-  InstanceKlass* ses_ik = InstanceKlass::cast(ses_k);\n-  ses_ik->initialize(CHECK_NULL);\n-  Klass* elementKlass = ArrayKlass::cast(ar_h()->klass())->element_klass();\n-  oop ses = ses_ik->allocate_instance(CHECK_NULL);\n-  Handle ses_h(THREAD, ses);\n-  jdk_internal_vm_jni_SubElementSelector::setArrayElementType(ses_h(), elementKlass->java_mirror());\n-  jdk_internal_vm_jni_SubElementSelector::setSubElementType(ses_h(), elementKlass->java_mirror());\n-  jdk_internal_vm_jni_SubElementSelector::setOffset(ses_h(), 0);\n-  jdk_internal_vm_jni_SubElementSelector::setIsInlined(ses_h(), true);   \/\/ by definition, top element of a flattened array is inlined\n-  jdk_internal_vm_jni_SubElementSelector::setIsInlineType(ses_h(), true); \/\/ by definition, top element of a flattened array is an inline type\n-  return JNIHandles::make_local(ses_h());\n-JNI_END\n-\n-JNI_ENTRY(jobject, jni_GetSubElementSelector(JNIEnv* env, jobject selector, jfieldID fieldID))\n-  oop slct = JNIHandles::resolve_non_null(selector);\n-  if (slct->klass()->name() != vmSymbols::jdk_internal_vm_jni_SubElementSelector()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Not a SubElementSelector\");\n-  }\n-  jboolean is_inlined = jdk_internal_vm_jni_SubElementSelector::getIsInlined(slct);\n-  if (!is_inlined) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"SubElement is not inlined\");\n-  }\n-  oop semirror = jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct);\n-  Klass* k = java_lang_Class::as_Klass(semirror);\n-  if (!k->is_inline_klass()) {\n-    ResourceMark rm;\n-        THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), err_msg(\"%s is not an inline type\", k->external_name()));\n-  }\n-  InlineKlass* vk = InlineKlass::cast(k);\n-  assert(vk->is_initialized(), \"If a flattened array has been created, the element klass must have been initialized\");\n-  int field_offset = jfieldIDWorkaround::from_instance_jfieldID(vk, fieldID);\n-  fieldDescriptor fd;\n-  if (!vk->find_field_from_offset(field_offset, false, &fd)) {\n-    THROW_NULL(vmSymbols::java_lang_NoSuchFieldError());\n-  }\n-  Handle arrayElementMirror(THREAD, jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct));\n-  \/\/ offset of the SubElement is offset of the original SubElement plus the offset of the field inside the element\n-  int offset = fd.offset() - vk->first_field_offset() + jdk_internal_vm_jni_SubElementSelector::getOffset(slct);\n-  InstanceKlass* sesklass = InstanceKlass::cast(JNIHandles::resolve_non_null(selector)->klass());\n-  oop res = sesklass->allocate_instance(CHECK_NULL);\n-  Handle res_h(THREAD, res);\n-  jdk_internal_vm_jni_SubElementSelector::setArrayElementType(res_h(), arrayElementMirror());\n-  InstanceKlass* holder = fd.field_holder();\n-  BasicType bt = Signature::basic_type(fd.signature());\n-  if (is_java_primitive(bt)) {\n-    jdk_internal_vm_jni_SubElementSelector::setSubElementType(res_h(), java_lang_Class::primitive_mirror(bt));\n-  } else {\n-    Klass* fieldKlass = SystemDictionary::resolve_or_fail(fd.signature(), Handle(THREAD, holder->class_loader()),\n-        Handle(THREAD, holder->protection_domain()), true, CHECK_NULL);\n-    jdk_internal_vm_jni_SubElementSelector::setSubElementType(res_h(),fieldKlass->java_mirror());\n-  }\n-  jdk_internal_vm_jni_SubElementSelector::setOffset(res_h(), offset);\n-  jdk_internal_vm_jni_SubElementSelector::setIsInlined(res_h(), fd.is_inlined());\n-  jdk_internal_vm_jni_SubElementSelector::setIsInlineType(res_h(), fd.is_inline_type());\n-  return JNIHandles::make_local(res_h());\n-JNI_END\n-\n-JNI_ENTRY(jobject, jni_GetObjectSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-  flatArrayOop ar =  (flatArrayOop)JNIHandles::resolve_non_null(array);\n-  oop slct = JNIHandles::resolve_non_null(selector);\n-  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass());\n-  if (jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct) != vak->element_klass()->java_mirror()) {\n-    THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), \"Array\/Selector mismatch\");\n-  }\n-  oop res = NULL;\n-  if (!jdk_internal_vm_jni_SubElementSelector::getIsInlined(slct)) {\n-    int offset = (address)ar->base() - cast_from_oop<address>(ar) + index * vak->element_byte_size()\n-                      + jdk_internal_vm_jni_SubElementSelector::getOffset(slct);\n-    res = HeapAccess<ON_UNKNOWN_OOP_REF>::oop_load_at(ar, offset);\n-  } else {\n-    Handle slct_h(THREAD, slct);\n-    InlineKlass* fieldKlass = InlineKlass::cast(java_lang_Class::as_Klass(jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct)));\n-    res = fieldKlass->allocate_instance_buffer(CHECK_NULL);\n-    \/\/ The array might have been moved by the GC, refreshing the arrayOop\n-    ar =  (flatArrayOop)JNIHandles::resolve_non_null(array);\n-    address addr = (address)ar->value_at_addr(index, vak->layout_helper())\n-              + jdk_internal_vm_jni_SubElementSelector::getOffset(slct_h());\n-    fieldKlass->inline_copy_payload_to_new_oop(addr, res);\n-  }\n-  return JNIHandles::make_local(res);\n-JNI_END\n-\n-JNI_ENTRY(void, jni_SetObjectSubElement(JNIEnv* env, jarray array, jobject selector, int index, jobject value))\n-  flatArrayOop ar =  (flatArrayOop)JNIHandles::resolve_non_null(array);\n-  oop slct = JNIHandles::resolve_non_null(selector);\n-  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass());\n-  if (jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct) != vak->element_klass()->java_mirror()) {\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), \"Array\/Selector mismatch\");\n-  }\n-  oop val = JNIHandles::resolve(value);\n-  if (val == NULL) {\n-    if (jdk_internal_vm_jni_SubElementSelector::getIsInlineType(slct)) {\n-      THROW_MSG(vmSymbols::java_lang_ArrayStoreException(), \"null cannot be stored in a flattened array\");\n-    }\n-  } else {\n-    if (!val->is_a(java_lang_Class::as_Klass(jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct)))) {\n-      THROW_MSG(vmSymbols::java_lang_ArrayStoreException(), \"type mismatch\");\n-    }\n-  }\n-  if (!jdk_internal_vm_jni_SubElementSelector::getIsInlined(slct)) {\n-    int offset = (address)ar->base() - cast_from_oop<address>(ar) + index * vak->element_byte_size()\n-                  + jdk_internal_vm_jni_SubElementSelector::getOffset(slct);\n-    HeapAccess<ON_UNKNOWN_OOP_REF>::oop_store_at(ar, offset, JNIHandles::resolve(value));\n-  } else {\n-    InlineKlass* fieldKlass = InlineKlass::cast(java_lang_Class::as_Klass(jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct)));\n-    address addr = (address)ar->value_at_addr(index, vak->layout_helper())\n-                  + jdk_internal_vm_jni_SubElementSelector::getOffset(slct);\n-    fieldKlass->inline_copy_oop_to_payload(JNIHandles::resolve_non_null(value), addr);\n-  }\n-JNI_END\n-\n-#define DEFINE_GETSUBELEMENT(ElementType,Result,ElementBasicType) \\\n-\\\n-JNI_ENTRY(ElementType, \\\n-          jni_Get##Result##SubElement(JNIEnv *env, jarray array, jobject selector, int index)) \\\n-  flatArrayOop ar = (flatArrayOop)JNIHandles::resolve_non_null(array); \\\n-  oop slct = JNIHandles::resolve_non_null(selector); \\\n-  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass()); \\\n-  if (jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct) != vak->element_klass()->java_mirror()) { \\\n-    THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), \"Array\/Selector mismatch\"); \\\n-  } \\\n-  if (jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct) != java_lang_Class::primitive_mirror(ElementBasicType)) { \\\n-    THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), \"Wrong SubElement type\"); \\\n-  } \\\n-  address addr = (address)ar->value_at_addr(index, vak->layout_helper()) \\\n-               + jdk_internal_vm_jni_SubElementSelector::getOffset(slct); \\\n-  ElementType result = *(ElementType*)addr; \\\n-  return result; \\\n-JNI_END\n-\n-DEFINE_GETSUBELEMENT(jboolean, Boolean,T_BOOLEAN)\n-DEFINE_GETSUBELEMENT(jbyte, Byte, T_BYTE)\n-DEFINE_GETSUBELEMENT(jshort, Short,T_SHORT)\n-DEFINE_GETSUBELEMENT(jchar, Char,T_CHAR)\n-DEFINE_GETSUBELEMENT(jint, Int,T_INT)\n-DEFINE_GETSUBELEMENT(jlong, Long,T_LONG)\n-DEFINE_GETSUBELEMENT(jfloat, Float,T_FLOAT)\n-DEFINE_GETSUBELEMENT(jdouble, Double,T_DOUBLE)\n-\n-#define DEFINE_SETSUBELEMENT(ElementType,Result,ElementBasicType) \\\n-\\\n-JNI_ENTRY(void, \\\n-          jni_Set##Result##SubElement(JNIEnv *env, jarray array, jobject selector, int index, ElementType value)) \\\n-  flatArrayOop ar = (flatArrayOop)JNIHandles::resolve_non_null(array); \\\n-  oop slct = JNIHandles::resolve_non_null(selector); \\\n-  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass()); \\\n-  if (jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct) != vak->element_klass()->java_mirror()) { \\\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), \"Array\/Selector mismatch\"); \\\n-  } \\\n-  if (jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct) != java_lang_Class::primitive_mirror(ElementBasicType)) { \\\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), \"Wrong SubElement type\"); \\\n-  } \\\n-  address addr = (address)ar->value_at_addr(index, vak->layout_helper()) \\\n-               + jdk_internal_vm_jni_SubElementSelector::getOffset(slct); \\\n-  *(ElementType*)addr = value; \\\n-JNI_END\n-\n-DEFINE_SETSUBELEMENT(jboolean, Boolean,T_BOOLEAN)\n-DEFINE_SETSUBELEMENT(jbyte, Byte, T_BYTE)\n-DEFINE_SETSUBELEMENT(jshort, Short,T_SHORT)\n-DEFINE_SETSUBELEMENT(jchar, Char,T_CHAR)\n-DEFINE_SETSUBELEMENT(jint, Int,T_INT)\n-DEFINE_SETSUBELEMENT(jlong, Long,T_LONG)\n-DEFINE_SETSUBELEMENT(jfloat, Float,T_FLOAT)\n-DEFINE_SETSUBELEMENT(jdouble, Double,T_DOUBLE)\n-\n@@ -3771,30 +3509,0 @@\n-    \/\/ Flattened arrays features\n-\n-    jni_GetFlattenedArrayElements,\n-    jni_ReleaseFlattenedArrayElements,\n-    jni_GetFlattenedArrayElementClass,\n-    jni_GetFlattenedArrayElementSize,\n-    jni_GetFieldOffsetInFlattenedLayout,\n-\n-    jni_CreateSubElementSelector,\n-    jni_GetSubElementSelector,\n-    jni_GetObjectSubElement,\n-    jni_SetObjectSubElement,\n-\n-    jni_GetBooleanSubElement,\n-    jni_GetByteSubElement,\n-    jni_GetShortSubElement,\n-    jni_GetCharSubElement,\n-    jni_GetIntSubElement,\n-    jni_GetLongSubElement,\n-    jni_GetFloatSubElement,\n-    jni_GetDoubleSubElement,\n-\n-    jni_SetBooleanSubElement,\n-    jni_SetByteSubElement,\n-    jni_SetShortSubElement,\n-    jni_SetCharSubElement,\n-    jni_SetIntSubElement,\n-    jni_SetLongSubElement,\n-    jni_SetFloatSubElement,\n-    jni_SetDoubleSubElement\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":0,"deletions":292,"binary":false,"changes":292,"status":"modified"},{"patch":"@@ -2024,201 +2024,0 @@\n-JNI_ENTRY_CHECKED(void*,\n-    checked_jni_GetFlattenedArrayElements(JNIEnv* env, jarray array, jboolean* isCopy))\n-    functionEnter(thr);\n-    void* result = UNCHECKED()->GetFlattenedArrayElements(env, array, isCopy);\n-    functionExit(thr);\n-    return result;\n-\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_ReleaseFlattenedArrayElements(JNIEnv* env, jarray array, void* elem, jint mode))\n-    functionEnter(thr);\n-    UNCHECKED()->ReleaseFlattenedArrayElements(env, array, elem, mode);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jclass,\n-    checked_jni_GetFlattenedArrayElementClass(JNIEnv* env, jarray array))\n-    functionEnter(thr);\n-    jclass clazz = UNCHECKED()->GetFlattenedArrayElementClass(env, array);\n-    functionExit(thr);\n-    return clazz;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jsize,\n-    checked_jni_GetFlattenedArrayElementSize(JNIEnv* env, jarray array))\n-    functionEnter(thr);\n-    jsize size = UNCHECKED()->GetFlattenedArrayElementSize(env, array);\n-    functionExit(thr);\n-    return size;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jsize,\n-    checked_jni_GetFieldOffsetInFlattenedLayout(JNIEnv* env, jclass clazz, const char *name, const char *signature, jboolean* isFlattened))\n-    functionEnter(thr);\n-    jsize offset = UNCHECKED()->GetFieldOffsetInFlattenedLayout(env, clazz, name, signature, isFlattened);\n-    functionExit(thr);\n-    return offset;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jobject,\n-    checked_jni_CreateSubElementSelector(JNIEnv* env, jarray array))\n-    functionEnter(thr);\n-    jobject selector = UNCHECKED()->CreateSubElementSelector(env, array);\n-    functionExit(thr);\n-    return selector;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jobject,\n-    checked_jni_GetSubElementSelector(JNIEnv* env, jobject selector, jfieldID fieldID))\n-    functionEnter(thr);\n-    jobject res = UNCHECKED()->GetSubElementSelector(env, selector, fieldID);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jobject,\n-    checked_jni_GetObjectSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jobject res = UNCHECKED()->GetObjectSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetObjectSubElement(JNIEnv* env, jarray array, jobject selector, int index, jobject value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetObjectSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jboolean,\n-    checked_jni_GetBooleanSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jboolean res = UNCHECKED()->GetBooleanSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetBooleanSubElement(JNIEnv* env, jarray array, jobject selector, int index, jboolean value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetBooleanSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jbyte,\n-    checked_jni_GetByteSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jbyte res = UNCHECKED()->GetByteSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetByteSubElement(JNIEnv* env, jarray array, jobject selector, int index, jbyte value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetByteSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jshort,\n-    checked_jni_GetShortSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jshort res = UNCHECKED()->GetShortSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetShortSubElement(JNIEnv* env, jarray array, jobject selector, int index, jshort value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetShortSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jchar,\n-    checked_jni_GetCharSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jchar res = UNCHECKED()->GetCharSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetCharSubElement(JNIEnv* env, jarray array, jobject selector, int index, jchar value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetCharSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jint,\n-    checked_jni_GetIntSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jint res = UNCHECKED()->GetIntSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetIntSubElement(JNIEnv* env, jarray array, jobject selector, int index, jint value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetIntSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jlong,\n-    checked_jni_GetLongSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jlong res = UNCHECKED()->GetLongSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetLongSubElement(JNIEnv* env, jarray array, jobject selector, int index, jlong value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetLongSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jfloat,\n-    checked_jni_GetFloatSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jfloat res = UNCHECKED()->GetFloatSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetFloatSubElement(JNIEnv* env, jarray array, jobject selector, int index, jfloat value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetFloatSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(jdouble,\n-    checked_jni_GetDoubleSubElement(JNIEnv* env, jarray array, jobject selector, int index))\n-    functionEnter(thr);\n-    jdouble res = UNCHECKED()->GetDoubleSubElement(env, array, selector, index);\n-    functionExit(thr);\n-    return res;\n-JNI_END\n-\n-JNI_ENTRY_CHECKED(void,\n-    checked_jni_SetDoubleSubElement(JNIEnv* env, jarray array, jobject selector, int index, jdouble value))\n-    functionEnter(thr);\n-    UNCHECKED()->SetDoubleSubElement(env, array, selector, index, value);\n-    functionExit(thr);\n-    return;\n-JNI_END\n-\n@@ -2512,29 +2311,0 @@\n-    \/\/ Flattened arrays Features\n-    checked_jni_GetFlattenedArrayElements,\n-    checked_jni_ReleaseFlattenedArrayElements,\n-    checked_jni_GetFlattenedArrayElementClass,\n-    checked_jni_GetFlattenedArrayElementSize,\n-    checked_jni_GetFieldOffsetInFlattenedLayout,\n-\n-    checked_jni_CreateSubElementSelector,\n-    checked_jni_GetSubElementSelector,\n-    checked_jni_GetObjectSubElement,\n-    checked_jni_SetObjectSubElement,\n-\n-    checked_jni_GetBooleanSubElement,\n-    checked_jni_GetByteSubElement,\n-    checked_jni_GetShortSubElement,\n-    checked_jni_GetCharSubElement,\n-    checked_jni_GetIntSubElement,\n-    checked_jni_GetLongSubElement,\n-    checked_jni_GetFloatSubElement,\n-    checked_jni_GetDoubleSubElement,\n-\n-    checked_jni_SetBooleanSubElement,\n-    checked_jni_SetByteSubElement,\n-    checked_jni_SetShortSubElement,\n-    checked_jni_SetCharSubElement,\n-    checked_jni_SetIntSubElement,\n-    checked_jni_SetLongSubElement,\n-    checked_jni_SetFloatSubElement,\n-    checked_jni_SetDoubleSubElement\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":0,"deletions":230,"binary":false,"changes":230,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.vm.jni;\n-\n-public \/*inline*\/ class SubElementSelector {\n-    public final Class<?> arrayElementType = null;\n-    public final Class<?> subElementType = null;\n-    public final int offset = -1;\n-    public final boolean isInlined = false;\n-    public final boolean isInlineType = false;\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/jni\/SubElementSelector.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -690,1 +690,1 @@\n-\t\n+\n@@ -779,55 +779,0 @@\n-    \/* Flattened arrays Features *\/\n-    void* (JNICALL *GetFlattenedArrayElements)\n-      (JNIEnv* env, jarray array , jboolean *isCopy);\n-    void (JNICALL *ReleaseFlattenedArrayElements)\n-      (JNIEnv* env, jarray, void* elem, jint mode);\n-    jclass (JNICALL *GetFlattenedArrayElementClass)\n-      (JNIEnv* env, jarray array);\n-    jsize (JNICALL *GetFlattenedArrayElementSize)\n-      (JNIEnv* env, jarray array);\n-    jsize (JNICALL *GetFieldOffsetInFlattenedLayout)\n-      (JNIEnv* env, jclass clazz,  const char *name, const char *signature, jboolean* isFlattened);\n-\n-    jobject (JNICALL *CreateSubElementSelector)\n-      (JNIEnv* env, jarray array);\n-    jobject (JNICALL *GetSubElementSelector)\n-      (JNIEnv* env, jobject selector, jfieldID fieldID);\n-\n-    jobject (JNICALL *GetObjectSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-    void (JNICALL *SetObjectSubElement)\n-    (JNIEnv* env, jarray array, jobject selector, int index, jobject value);\n-\n-    jboolean (JNICALL *GetBooleanSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-    jbyte (JNICALL *GetByteSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-    jshort (JNICALL *GetShortSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-    jchar (JNICALL *GetCharSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-    jint (JNICALL *GetIntSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-    jlong (JNICALL *GetLongSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-    jfloat (JNICALL *GetFloatSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-    jdouble (JNICALL *GetDoubleSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index);\n-\n-    void (JNICALL *SetBooleanSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index, jboolean value);\n-    void (JNICALL *SetByteSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index, jbyte value);\n-    void (JNICALL *SetShortSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index, jshort value);\n-    void (JNICALL *SetCharSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index, jchar value);\n-    void (JNICALL *SetIntSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index, jint value);\n-    void (JNICALL *SetLongSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index, jlong value);\n-    void (JNICALL *SetFloatSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index, jfloat value);\n-    void (JNICALL *SetDoubleSubElement)\n-      (JNIEnv* env, jarray array, jobject selector, int index, jdouble value);\n@@ -1932,85 +1877,0 @@\n-    \/* Flattened arrays Features *\/\n-    void* GetFlattenedArrayElements(jarray array , jboolean *isCopy) {\n-        return functions->GetFlattenedArrayElements(this, array, isCopy);\n-    }\n-  \n-    void ReleaseFlattenedArrayElements(jarray array, void* elem, jint mode) {\n-        return functions->ReleaseFlattenedArrayElements(this, array, elem, mode);\n-    }\n-\n-    jclass GetFlattenedArrayElementClass(jarray array) {\n-        return functions->GetFlattenedArrayElementClass(this, array);\n-    }\n-  \n-    jsize GetFlattenedArrayElementSize(jarray array) {\n-        return functions->GetFlattenedArrayElementSize(this, array);\n-    }\n-    \n-    jsize GetFieldOffsetInFlattenedLayout(jclass clazz,  const char *name, const char *signature, jboolean* isFlattened) {\n-        return functions->GetFieldOffsetInFlattenedLayout(this, clazz, name, signature, isFlattened);\n-    }\n-\n-    jobject CreateSubElementSelector(jarray array) {\n-        return functions->CreateSubElementSelector(this, array);\n-    }\n-    jobject GetSubElementSelector(jobject selector, jfieldID fieldID) {\n-        return functions->GetSubElementSelector(this, selector, fieldID);\n-    }\n-\n-    jobject GetObjectSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetObjectSubElement(this, array, selector, index);\n-    }\n-    void SetObjectSubElement(jarray array, jobject selector, int index, jobject value) {\n-      functions->SetObjectSubElement(this, array, selector, index, value);\n-    }\n-\n-    jboolean GetBooleanSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetBooleanSubElement(this, array, selector, index);\n-    }\n-    jbyte GetByteSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetByteSubElement(this, array, selector, index);\n-    }\n-    jshort GetShortSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetShortSubElement(this, array, selector, index);\n-    }\n-    jchar GetCharSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetCharSubElement(this, array, selector, index);\n-    }\n-    jint GetIntSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetIntSubElement(this, array, selector, index);\n-    }\n-    jlong GetLongSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetLongSubElement(this, array, selector, index);\n-    }\n-    jfloat GetFloatSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetFloatSubElement(this, array, selector, index);\n-    }\n-    jdouble GetDoubleSubElement(jarray array, jobject selector, int index) {\n-        return functions->GetDoubleSubElement(this, array, selector, index);\n-    }\n-\n-    void SetBooleanSubElement(jarray array, jobject selector, int index, jboolean value) {\n-        return functions->SetBooleanSubElement(this, array, selector, index, value);\n-    }\n-    void SetByteSubElement(jarray array, jobject selector, int index, jbyte value) {\n-        return functions->SetByteSubElement(this, array, selector, index, value);\n-    }\n-    void SetShortSubElement(jarray array, jobject selector, int index, jshort value) {\n-        return functions->SetShortSubElement(this, array, selector, index, value);\n-    }\n-    void SetCharSubElement(jarray array, jobject selector, int index, jchar value) {\n-        return functions->SetCharSubElement(this, array, selector, index, value);\n-    }\n-    void SetIntSubElement(jarray array, jobject selector, int index, jint value) {\n-        return functions->SetIntSubElement(this, array, selector, index, value);\n-    }\n-    void SetLongSubElement(jarray array, jobject selector, int index, jlong value) {\n-      return functions->SetLongSubElement(this, array, selector, index, value);\n-    }\n-    void SetFloatSubElement(jarray array, jobject selector, int index, jfloat value) {\n-        return functions->SetFloatSubElement(this, array, selector, index, value);\n-    }\n-    void SetDoubleSubElement(jarray array, jobject selector, int index, jdouble value) {\n-      return functions->SetDoubleSubElement(this, array, selector, index, value);\n-    }\n-  \n","filename":"src\/java.base\/share\/native\/include\/jni.h","additions":1,"deletions":141,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -1,888 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-import jdk.test.lib.Asserts;\n-\n-import java.lang.reflect.*;\n-import java.util.Random;\n-import java.util.Arrays;\n-import java.util.Comparator;\n-\n-import jdk.internal.misc.Unsafe;\n-import jdk.internal.vm.jni.SubElementSelector;\n-\n-\/*\n- * @test\n- * @summary Test flattened arrays accesses through JNI\n- * @modules java.base\/jdk.internal.misc java.base\/jdk.internal.vm.jni\n- * @library \/testlibrary \/test\/lib\n- * @requires (os.simpleArch == \"x64\")\n- * @requires (os.family == \"linux\" | os.family == \"mac\")\n- * @compile -XDallowWithFieldOperator TestJNIArrays.java\n- * @run main\/othervm\/native\/timeout=3000 -XX:FlatArrayElementMaxSize=128\n- *      -XX:InlineFieldMaxFlatSize=128 -XX:+UseCompressedOops TestJNIArrays\n- * @run main\/othervm\/native\/timeout=3000 -XX:FlatArrayElementMaxSize=128\n- *      -XX:InlineFieldMaxFlatSize=128 -XX:-UseCompressedOops TestJNIArrays\n- *\/\n-public class TestJNIArrays {\n-\n-    static final Unsafe U = Unsafe.getUnsafe();\n-\n-    public static final int ARRAY_SIZE = 1024;\n-    static long seed;\n-    static Random random;\n-\n-    static {\n-        seed = System.nanoTime();\n-        System.out.println(\"Seed = \" + seed);\n-        random = new Random(seed);\n-    }\n-\n-    static {\n-        System.loadLibrary(\"TestJNIArrays\");\n-    }\n-\n-    static primitive class IntInt {\n-        int i0;\n-        int i1;\n-\n-        public IntInt(int i0, int i1) {\n-            this.i0 = i0;\n-            this.i1 = i1;\n-        }\n-    }\n-\n-    static class IntIntComparator implements Comparator<IntInt.ref> {\n-        public int compare(IntInt.ref a, IntInt.ref b) {\n-            if (a.i0 < b.i0) return -1;\n-            if (a.i0 > b.i0) return 1;\n-            if (a.i1 < b.i1) return -1;\n-            if (a.i1 > b.i1) return 1;\n-            return 0;\n-        }\n-    }\n-\n-    static primitive class Containee {\n-        float f;\n-        short s;\n-\n-        Containee(float f, short s) {\n-            this.f = f;\n-            this.s = s;\n-        }\n-    }\n-\n-    static primitive class Container {\n-        double d;\n-        Containee c;\n-        byte b;\n-\n-        Container(double d, Containee c, byte b) {\n-            this.d = d ;\n-            this.c = c;\n-            this.b = b;\n-        }\n-\n-        Container setc(Containee c) {\n-            Container res = __WithField(this.c, c);\n-            return res;\n-        }\n-\n-    }\n-\n-    static primitive class LongLongLongLong {\n-        long l0, l1, l2, l3;\n-\n-        public LongLongLongLong(long l0, long l1, long l2, long l3) {\n-            this.l0 = l0;\n-            this.l1 = l1;\n-            this.l2 = l2;\n-            this.l3 = l3;\n-        }\n-    }\n-\n-    static primitive class BigValue {\n-        long l0 = 0, l1 = 0,   l2 = 0, l3 = 0, l4 = 0, l5 = 0, l6 = 0, l7 = 0, l8 = 0, l9 = 0;\n-        long l10 = 0, l11 = 0, l12 = 0, l13 = 0, l14 = 0, l15 = 0, l16 = 0, l17 = 0, l18 = 0, l19 = 0;\n-        long l20 = 0, l21 = 0, l22 = 0, l23 = 0, l24 = 0, l25 = 0, l26 = 0, l27 = 0, l28 = 0, l29 = 0;\n-        long l30 = 0, l31 = 0, l32 = 0, l33 = 0, l34 = 0, l35 = 0, l36 = 0, l37 = 0, l38 = 0, l39 = 0;\n-    }\n-\n-    static primitive class InlineWithOops {\n-        String s = \"bonjour\";\n-        int i = 0;\n-        Containee c = new Containee(2.3f, (short)4);\n-        BigValue b = new BigValue();\n-    }\n-\n-    public static void main(String[] args) {\n-        TestJNIArrays test = new TestJNIArrays();\n-        test.checkGetFlattenedArrayElementSize();\n-        test.checkGetFlattenedArrayElementClass();\n-        test.checkGetFieldOffsetInFlattenedLayout();\n-        test.checkGetFlattenedArrayElements();\n-        test.checkSubElementAPI();\n-        test.checkBehaviors();\n-\n-        \/\/ TODO: move these to micro-benchmark or out of tier1 testing...\n-        \/\/ test.measureInitializationTime(1024 * 1024 * 10 , 1000);\n-        \/\/ test.measureInitializationTime2(1024 * 1024 * 10 , 1000);\n-        \/\/ test.measureUpdateTime2(1024 * 1024 * 10, 1000);\n-        \/\/ test.measureSortingTime(1024 * 1024, 100); \/\/ reduced number of iterations because Java sorting is slow (because of generics?)\n-        \/\/test.measureInitializationTime3(1024 * 1024 * 2 , 10);\n-    }\n-\n-    void checkSubElementAPI() {\n-        Throwable e = null;\n-        InlineWithOops[] arrayWithOops = new InlineWithOops[100];\n-        InlineWithOops v = new InlineWithOops();\n-        for (int i = 0; i < 100; i++) {\n-            arrayWithOops[i] = v;\n-        }\n-        SubElementSelector selector1 = createSubElementSelector(arrayWithOops);\n-        SubElementSelector selector2 = getSubElementSelector(selector1, InlineWithOops.class, \"s\", \"Ljava\/lang\/String;\");\n-        String s = (String) getObjectSubElement(arrayWithOops, selector2, 1);\n-        System.out.println(\"s = \" + s);\n-        Asserts.assertEquals(s.equals(\"bonjour\"), true, \"Wrong string, expecting \\\"bonjour\\\", got \" + s);\n-        SubElementSelector selector3 = getSubElementSelector(selector1, InlineWithOops.class, \"c\", \"QTestJNIArrays$Containee;\");\n-        Containee c = (Containee) getObjectSubElement(arrayWithOops, selector3, 2);\n-        Asserts.assertEquals(c.f, 2.3f, \"Wrong float value: \" + c.f);\n-        Asserts.assertEquals(c.s, (short)4, \"Wrong short value \" + c.s);\n-        setObjectSubElement(arrayWithOops, selector2, 1, \"Hello\");\n-        Asserts.assertEquals(arrayWithOops[1].s.equals(\"Hello\"), true, \"Wrong string, expecting \\\"Hello\\\", got \" + s);\n-        Integer myInteger = new Integer(345);\n-        e = null;\n-        try {\n-            setObjectSubElement(arrayWithOops, selector2, 1, myInteger);\n-        } catch(Throwable t) {\n-            e = t;\n-        }\n-        Asserts.assertNotNull(e, \"An exception should have been thrown\");\n-        Asserts.assertEquals(e.getClass(), java.lang.ArrayStoreException.class, \"Wrong exception type\");\n-        c = new Containee(9.8f, (short)-3);\n-        setObjectSubElement(arrayWithOops, selector3, 2, c);\n-        Asserts.assertEquals(c.f, 9.8f, \"Wrong float value: \" + c.f);\n-        Asserts.assertEquals(c.s, (short)-3, \"Wrong short value \" + c.s);\n-        e = null;\n-        try {\n-            setObjectSubElement(arrayWithOops, selector3, 2, null);\n-        } catch(Throwable t) {\n-            e = t;\n-        }\n-        Asserts.assertNotNull(e, \"An exception should have been thrown\");\n-        Asserts.assertEquals(e.getClass(), java.lang.ArrayStoreException.class, \"Wrong exception type\");\n-        SubElementSelector selector4 = getSubElementSelector(selector3, TestJNIArrays.Containee.class, \"s\", \"S\");\n-        short s2 = getShortSubElement(arrayWithOops, selector4, 3);\n-        Asserts.assertEquals(s2, (short)4, \"Wrong short value \" + s2);\n-        setShortSubElement(arrayWithOops, selector4, 3, (short)7);\n-        Asserts.assertEquals(arrayWithOops[3].c.s, (short)7, \"Wrong short value \" + arrayWithOops[3].c.s);\n-        e = null;\n-        try {\n-            \/\/ should fail because selector4 designates a field with type short, not int\n-            getIntSubElement(arrayWithOops, selector4, 3);\n-        } catch(Throwable t) {\n-            e = t;\n-        }\n-        Asserts.assertNotNull(e, \"An exception should have been thrown\");\n-        Asserts.assertEquals(e.getClass(), java.lang.IllegalArgumentException.class, \"Wrong exception type\");\n-        SubElementSelector selector5 = getSubElementSelector(selector1, InlineWithOops.class, \"b\", \"QTestJNIArrays$BigValue;\");\n-        e = null;\n-        try {\n-            \/\/ Should fail because selector5 designates a non-flattened field\n-            SubElementSelector selector6 = getSubElementSelector(selector5, TestJNIArrays.BigValue.class, \"l0\", \"J\");\n-        } catch(Throwable t) {\n-            e = t;\n-        }\n-        Asserts.assertNotNull(e, \"An exception should have been thrown\");\n-        Asserts.assertEquals(e.getClass(), java.lang.IllegalArgumentException.class, \"Wrong exception type\");\n-        System.gc();\n-    }\n-\n-    void checkGetFlattenedArrayElementSize() {\n-        Throwable exception = null;\n-        try {\n-            Object o = new Object();\n-            GetFlattenedArrayElementSizeWrapper(o);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            int[] array = new int[16];\n-            Object o = array;\n-            GetFlattenedArrayElementSizeWrapper(o);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            GetFlattenedArrayElementSizeWrapper(new String[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            \/\/ Array of BigValue should not be flattened because BigValue is *big*\n-            GetFlattenedArrayElementSizeWrapper(new BigValue[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertTrue(exception instanceof IllegalArgumentException , \"Exception should be a IAE\");\n-        exception = null;\n-        int size = -1;\n-        try {\n-            size = GetFlattenedArrayElementSizeWrapper(new IntInt[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNull(exception, \"No exception should have been thrown\");\n-        Asserts.assertEquals(size, 8, \"Wrong size\");\n-    }\n-\n-    void checkGetFlattenedArrayElementClass() {\n-        Throwable exception = null;\n-        try {\n-            Object o = new Object();\n-            GetFlattenedArrayElementClassWrapper(o);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            int[] array = new int[16];\n-            Object o = array;\n-            GetFlattenedArrayElementClassWrapper(o);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            GetFlattenedArrayElementClassWrapper(new String[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            \/\/ Array of BigValue should not be flattened because BigValue is *big*\n-            GetFlattenedArrayElementClassWrapper(new BigValue[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertTrue(exception instanceof IllegalArgumentException , \"Exception should be a IAE\");\n-        exception = null;\n-        Class c = null;\n-        try {\n-            c = GetFlattenedArrayElementClassWrapper(new IntInt[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNull(exception, \"No exception should have been thrown\");\n-        Asserts.assertEquals(c, IntInt.class, \"Wrong class\");\n-    }\n-\n-    void checkGetFieldOffsetInFlattenedLayout() {\n-        Throwable exception = null;\n-        try {\n-            Object o = new Object();\n-            GetFieldOffsetInFlattenedLayoutWrapper(o.getClass(), \"foo\", \"I\", true);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            int[] array = new int[16];\n-            GetFieldOffsetInFlattenedLayoutWrapper(array.getClass(), \"foo\", \"I\", true);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            String[] array = new String[16];\n-            GetFieldOffsetInFlattenedLayoutWrapper(array.getClass(), \"foo\", \"I\", true);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        Containee ce  = new Containee(3.4f, (short)5);\n-        Container c = new Container(123.876, ce, (byte)7);\n-        Class<?> cclass = c.getClass();\n-        Container[] containerArray = new Container[32];\n-        int elementSize = GetFlattenedArrayElementSizeWrapper(containerArray);\n-        int offset = -1;\n-        try {\n-            offset = GetFieldOffsetInFlattenedLayoutWrapper(cclass, \"d\", \"D\", false);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNull(exception, \"No exception should have been thrown\");\n-        Field f = null;\n-        try {\n-            f = cclass.getDeclaredField(\"d\");\n-        } catch(NoSuchFieldException e) {\n-            e.printStackTrace();\n-            return;\n-        }\n-        Asserts.assertEquals(U.valueHeaderSize(cclass) + offset, U.objectFieldOffset(cclass, f.getName()),\n-                             \"Incorrect offset\");\n-        Asserts.assertLessThan(offset, elementSize, \"Invalid offset\");\n-        exception = null;\n-        try {\n-            \/\/ Field c should be flattened, so last argument is true, no exception expected\n-            GetFieldOffsetInFlattenedLayoutWrapper(cclass, \"c\", \"QTestJNIArrays$Containee;\", true);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNull(exception, \"No exception should have been thrown\");\n-        Asserts.assertLessThan(offset, elementSize, \"Invalid offset\");\n-        exception = null;\n-        try {\n-            \/\/ Field c should be flattened, with last argument being false, exception expected from the wrapper\n-            GetFieldOffsetInFlattenedLayoutWrapper(cclass, \"c\", \"QTestJNIArrays$Containee;\", false);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"Wrapper should have thrown a RuntimeException\");\n-        Asserts.assertEquals(exception.getClass(), RuntimeException.class , \"Wrong exception type\");\n-    }\n-\n-    void checkGetFlattenedArrayElements() {\n-        Throwable exception = null;\n-        Object o = new Object();\n-        try {\n-            GetFlattenedArrayElementsWrapper(o);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        int[] a1 = new int[16];\n-        o = a1;\n-        try {\n-            GetFlattenedArrayElementsWrapper(o);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            GetFlattenedArrayElementsWrapper(new String[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertEquals(exception.getClass(), IllegalArgumentException.class , \"Wrong exception type\");\n-        exception = null;\n-        try {\n-            \/\/ Array of BigValue should not be flattened because BigValue is *big*\n-            GetFlattenedArrayElementsWrapper(new BigValue[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertTrue(exception instanceof IllegalArgumentException , \"Exception should be a IAE\");\n-        exception = null;\n-        try {\n-            \/\/ Direct native access to flattened arrays is not allowed if elements contain oops\n-            GetFlattenedArrayElementsWrapper(new InlineWithOops[16]);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNotNull(exception, \"An IAE should have been thrown\");\n-        Asserts.assertTrue(exception instanceof IllegalArgumentException , \"Exception should be a IAE\");\n-        exception = null;\n-        long addr = 0;\n-        IntInt[] a2 = new IntInt[16];\n-        try {\n-            addr = GetFlattenedArrayElementsWrapper(a2);\n-        } catch(Throwable t) {\n-            exception = t;\n-        }\n-        Asserts.assertNull(exception, \"No exception should have been thrown\");\n-        if (exception == null) {\n-            ReleaseFlattenedArrayElementsWrapper(a2, addr, 0);\n-        }\n-    }\n-\n-    void checkBehaviors() {\n-        System.out.println(\"Check 1\");\n-        IntInt[] array = new IntInt[ARRAY_SIZE];\n-        int value = getIntFieldAtIndex(array, 1, \"i0\", \"I\");\n-        Asserts.assertEquals(value, 0, \"Initial value must be zero\");\n-        printArrayInformation(array);\n-        int i0_value = 42;\n-        int i1_value = -314;\n-        initializeIntIntArrayBuffer(array, i0_value, i1_value);\n-        System.gc();\n-        for (int i = 0; i < array.length; i++) {\n-            Asserts.assertEquals(array[i].i0, i0_value, \"Bad value of i0 at index \" + i);\n-            Asserts.assertEquals(array[i].i1, i1_value, \"Bad value of i1 at index \" + i);\n-        }\n-        System.out.println(\"Check 2\");\n-        array = new IntInt[ARRAY_SIZE];\n-        i0_value = -194;\n-        i1_value = 91;\n-        initializeIntIntArrayFields(array, i0_value, i1_value);\n-        System.gc();\n-        for (int i = 0; i < array.length; i++) {\n-            Asserts.assertEquals(array[i].i0, i0_value, \"Bad value of i0 at index \" + i);\n-            Asserts.assertEquals(array[i].i1, i1_value, \"Bad value of i1 at index \" + i);\n-        }\n-        System.out.println(\"Check 3\");\n-        array = new IntInt[ARRAY_SIZE];\n-        initializeIntIntArrayJava(array, i0_value, i1_value);\n-        System.gc();\n-        for (int i = 0; i < array.length; i++) {\n-            Asserts.assertEquals(array[i].i0, i0_value, \"Bad value of i0 at index \" + i);\n-            Asserts.assertEquals(array[i].i1, i1_value, \"Bad value of i1 at index \" + i);\n-        }\n-        System.out.println(\"Check 4\");\n-        random = new Random(seed);\n-        array = new IntInt[ARRAY_SIZE];\n-        for (int i = 0; i < ARRAY_SIZE; i++) {\n-            array[i] = new IntInt(random.nextInt(), random.nextInt());\n-        }\n-        sortIntIntArray(array);\n-        System.gc();\n-        for (int i = 0; i < array.length - 1; i++) {\n-            Asserts.assertLessThanOrEqual(array[i].i0, array[i+1].i0, \"Incorrect i0 fields ordering at index \" + i);\n-            if (array[i].i0 == array[i+1].i0) {\n-                Asserts.assertLessThanOrEqual(array[i].i1, array[i+1].i1, \"Incorrect i1 fields ordering at index \" + i);\n-            }\n-        }\n-        System.out.println(\"Check 5\");\n-        random = new Random(seed);\n-        array = new IntInt[ARRAY_SIZE];\n-        for (int i = 0; i < ARRAY_SIZE; i++) {\n-            array[i] = new IntInt(random.nextInt(), random.nextInt());\n-        }\n-        Arrays.sort(array, new IntIntComparator());\n-        System.gc();\n-        for (int i = 0; i < array.length - 1; i++) {\n-            Asserts.assertLessThanOrEqual(array[i].i0, array[i+1].i0, \"Incorrect i0 fields ordering at index \" + i);\n-            if (array[i].i0 == array[i+1].i0) {\n-                Asserts.assertLessThanOrEqual(array[i].i1, array[i+1].i1, \"Incorrect i1 fields ordering at index \" + i);\n-            }\n-        }\n-        System.out.println(\"Check 6\");\n-        Container[] array2 = new Container[ARRAY_SIZE];\n-        double d  = 1.23456789;\n-        float f = -987.654321f;\n-        short s = -512;\n-        byte b = 127;\n-        Containee c = new Containee(f,s);\n-        Container c2 = new Container(d, c, b);\n-        initializeContainerArray(array2, d, f, s, b);\n-        System.gc();\n-        for (int i = 0; i < array2.length; i++) {\n-            Asserts.assertEquals(array2[i], c2, \"Incorrect value at index \" + i);\n-            Asserts.assertEquals(array2[i].d, d, \"Incorrect d value at index \" + i);\n-            Asserts.assertEquals(array2[i].c.f, f, \"Incorrect f value at index \" + i);\n-            Asserts.assertEquals(array2[i].c.s, s, \"Incorrect s value at index \" + i);\n-            Asserts.assertEquals(array2[i].b, b, \"Incorrect b value at inde \" +i);\n-        }\n-        System.out.println(\"Check 7\");\n-        f = 19.2837465f;\n-        s = 231;\n-        updateContainerArray(array2, f, s);\n-        System.gc();\n-        for (int i = 0; i < array2.length; i++) {\n-            Asserts.assertEquals(array2[i].d, d, \"Incorrect d value at index \" + i);\n-            Asserts.assertEquals(array2[i].c.f, f, \"Incorrect f value at index \" + i);\n-            Asserts.assertEquals(array2[i].c.s, s, \"Incorrect s value at index \" + i);\n-            Asserts.assertEquals(array2[i].b, b, \"Incorrect b value at inde \" +i);\n-        }\n-        System.out.println(\"Check 8\");\n-        long l0 = 52467923;\n-        long l1= -7854022;\n-        long l2 = 230947485;\n-        long l3 = -752497024;\n-        LongLongLongLong[] array3 = new LongLongLongLong[ARRAY_SIZE\/8];\n-        initializeLongLongLongLongArray(array3, l0, l1, l2, l3);\n-        System.gc();\n-        for (int i = 0; i < array3.length; i++) {\n-            Asserts.assertEquals(array3[i].l0, l0, \"Bad value of l0 at index \" + i);\n-            Asserts.assertEquals(array3[i].l1, l1, \"Bad value of l1 at index \" + i);\n-            Asserts.assertEquals(array3[i].l2, l2, \"Bad value of l2 at index \" + i);\n-            Asserts.assertEquals(array3[i].l3, l3, \"Bad value of l3 at index \" + i);\n-        }\n-    }\n-\n-    void initializeIntIntArrayJava(IntInt[] array, int i0, int i1) {\n-        IntInt ii = new IntInt(i0, i1);\n-        for (int i = 0; i < array.length; i++) {\n-            array[i] = ii;\n-        }\n-    }\n-\n-    void initializeContainerArrayJava(Container[] array, double d, float f, short s, byte b) {\n-        Containee c = new Containee(f,s);\n-        Container c2 = new Container(d, c, b);\n-        for (int i = 0; i < array.length; i++) {\n-            array[i] = c2;\n-        }\n-    }\n-\n-    void updateContainerArrayJava(Container[] array, float f, short s) {\n-        Containee c = new Containee(f, s);\n-        for (int i = 0; i < array.length; i++) {\n-            array[i] = array[i].setc(c);;\n-        }\n-    }\n-\n-    void initializeLongLongLongLongArrayJava(LongLongLongLong[] array, long l0, long l1, long l2, long l3) {\n-        LongLongLongLong llll = new LongLongLongLong(l0, l1, l2, l3);\n-        for (int i = 0; i < array.length; i++) {\n-            array[i] = llll;\n-        }\n-    }\n-\n-    void measureInitializationTime(int array_size, int iterations) {\n-        System.out.println(\"\\nInitialization time for IntInt[]:\");\n-        long[] start = new long[iterations];\n-        long[] end = new long[iterations];\n-\n-\n-        System.out.println(\"\\nJava:\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            initializeIntIntArrayJava(array, 42, -314);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            start[i] = System.nanoTime();\n-            initializeIntIntArrayJava(array, 42, -314);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-\n-        System.out.println(\"\\nNative(memcpy):\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            initializeIntIntArrayBuffer(array, 42, -314);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            start[i] = System.nanoTime();\n-            initializeIntIntArrayBuffer(array, 42, -314);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-\n-\n-        System.out.println(\"\\nNative(fields):\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            initializeIntIntArrayFields(array, 42, -314);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            start[i] = System.nanoTime();\n-            initializeIntIntArrayFields(array, 42, -314);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-    }\n-\n-    void measureInitializationTime2(int array_size, int iterations) {\n-        System.out.println(\"\\nInitialization time for Container[]:\");\n-        long[] start = new long[iterations];\n-        long[] end = new long[iterations];\n-\n-        double d = 0.369852147;\n-        float f = -321.654987f;\n-        short s = -3579;\n-        byte b = 42;\n-\n-        System.out.println(\"\\nJava:\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            Container[] array = new Container[array_size];\n-            initializeContainerArrayJava(array, d, f, s, b);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            Container[] array = new Container[array_size];\n-            start[i] = System.nanoTime();\n-            initializeContainerArrayJava(array, d, f, s, b);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-\n-        System.out.println(\"\\nNative:\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            Container[] array = new Container[array_size];\n-            initializeContainerArray(array, d, f, s, b);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            Container[] array = new Container[array_size];\n-            start[i] = System.nanoTime();\n-            initializeContainerArray(array, d, f, s, b);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-    }\n-\n-    void measureUpdateTime2(int array_size, int iterations) {\n-        System.out.println(\"\\nUpdating Container[]:\");\n-        long[] start = new long[iterations];\n-        long[] end = new long[iterations];\n-\n-        double d = 0.369852147;\n-        float f = -321.654987f;\n-        short s = -3579;\n-        byte b = 42;\n-\n-        Containee c = new Containee(f,s);\n-        Container c2 = new Container(d, c, b);\n-\n-        System.out.println(\"\\nJava:\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            Container[] array = new Container[array_size];\n-            for (int j = 0; j < array.length; j++) {\n-                array[j] = c2;\n-            }\n-            updateContainerArrayJava(array, f, s);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            Container[] array = new Container[array_size];\n-            for (int j = 0; j < array.length; j++) {\n-                array[i] = c2;\n-            }\n-            start[i] = System.nanoTime();\n-            updateContainerArrayJava(array, f, s);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-\n-        System.out.println(\"\\nNative:\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            Container[] array = new Container[array_size];\n-            for (int j = 0; j < array.length; j++) {\n-                array[i] = c2;\n-            }\n-            updateContainerArray(array, f, s);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            Container[] array = new Container[array_size];\n-            for (int j = 0; j < array.length; j++) {\n-                array[i] = c2;\n-            }\n-            start[i] = System.nanoTime();\n-            updateContainerArray(array, f, s);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-    }\n-\n-    void measureSortingTime(int array_size, int iterations) {\n-        System.out.println(\"\\nSorting time:\");\n-        long[] start = new long[iterations];\n-        long[] end = new long[iterations];\n-\n-        random = new Random(seed);\n-        System.out.println(\"\\nJava:\");\n-        IntIntComparator comparator = new IntIntComparator();\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            array = new IntInt[array_size];\n-            for (int j = 0; j < array_size; j++) {\n-                array[j] = new IntInt(random.nextInt(), random.nextInt());\n-            }\n-            Arrays.sort(array, comparator);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            for (int j = 0; j < array_size; j++) {\n-                array[j] = new IntInt(random.nextInt(), random.nextInt());\n-            }\n-            start[i] = System.nanoTime();\n-            Arrays.sort(array, comparator);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-\n-        random = new Random(seed);\n-        System.out.println(\"\\nNative:\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            array = new IntInt[array_size];\n-            for (int j = 0; j < array_size; j++) {\n-                array[j] = new IntInt(random.nextInt(), random.nextInt());\n-            }\n-            sortIntIntArray(array);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            IntInt[] array = new IntInt[array_size];\n-            for (int j = 0; j < array_size; j++) {\n-                array[j] = new IntInt(random.nextInt(), random.nextInt());\n-            }\n-            start[i] = System.nanoTime();\n-            sortIntIntArray(array);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-    }\n-\n-\n-    void measureInitializationTime3(int array_size, int iterations) {\n-        System.out.println(\"\\nInitialization time for LongLongLongLong[]:\");\n-        long[] start = new long[iterations];\n-        long[] end = new long[iterations];\n-\n-        long l0 = 123456;\n-        long l1 = -987654;\n-        long l2 = 192837;\n-        long l3 = -56473829;\n-\n-        System.out.println(\"\\nJava:\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            LongLongLongLong[] array = new LongLongLongLong[array_size];\n-            initializeLongLongLongLongArrayJava(array, l0, l1, l2, l3);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            LongLongLongLong[] array = new LongLongLongLong[array_size];\n-            start[i] = System.nanoTime();\n-            initializeLongLongLongLongArrayJava(array, l0, l1, l2, l3);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-\n-        System.out.println(\"\\nNative:\");\n-        \/\/ Warmup\n-        for (int i = 0; i < 10; i++) {\n-            LongLongLongLong[] array = new LongLongLongLong[array_size];\n-            initializeLongLongLongLongArray(array, l0, l1, l2, l3);\n-        }\n-        \/\/ Measure\n-        for (int i = 0; i < iterations; i++) {\n-            LongLongLongLong[] array = new LongLongLongLong[array_size];\n-            start[i] = System.nanoTime();\n-            initializeLongLongLongLongArray(array, l0, l1, l2, l3);\n-            end[i] = System.nanoTime();\n-        }\n-        \/\/ Results\n-        computeStatistics(start, end);\n-    }\n-\n-    void computeStatistics(long[] start, long[] end) {\n-        int iterations = start.length;\n-        long[] duration = new long[iterations];\n-        long sum = 0;\n-        long min = end[0] - start[0];\n-        long max = min;\n-        double var = 0.0;\n-        for (int i = 0 ; i < iterations; i++) {\n-            duration[i] = end[i] - start[i];\n-            if (duration[i] < min) min = duration[i];\n-            if (duration[i] > max) max = duration[i];\n-            sum += duration[i];\n-            double d = (double) duration[i];\n-            var += Math.pow(d, 2);\n-        }\n-        double avg = (sum\/iterations) \/ 1000;\n-        double std = (Math.sqrt(var\/iterations - Math.pow(sum\/iterations, 2))) \/ 1000;\n-        System.out.println(String.format(\"Avg: %8.2f us\", avg));\n-        System.out.println(String.format(\"Std: %8.2f us\", std));\n-        System.out.println(String.format(\"Min: %8d us\", (min\/1000)));\n-        System.out.println(String.format(\"Max: %8d us\", (max\/1000)));\n-    }\n-\n-    native int GetFlattenedArrayElementSizeWrapper(Object array);\n-    native Class GetFlattenedArrayElementClassWrapper(Object array);\n-    native long GetFlattenedArrayElementsWrapper(Object array);\n-    native void ReleaseFlattenedArrayElementsWrapper(Object array, long addr,int mode);\n-    native int GetFieldOffsetInFlattenedLayoutWrapper(Class klass, String name, String signature, boolean flattened);\n-\n-    native int getIntFieldAtIndex(Object[] array, int index, String fieldName, String FieldSignature);\n-    native void printArrayInformation(Object[] array);\n-\n-    native void initializeIntIntArrayBuffer(Object[] array, int i0, int i1);\n-    native void initializeIntIntArrayFields(Object[] array, int i0, int i1);\n-    native void sortIntIntArray(Object[] array);\n-\n-    native void initializeContainerArray(Object[] array, double d, float f, short s, byte b);\n-    native void updateContainerArray(Object[] array, float f, short s);\n-\n-    native void initializeLongLongLongLongArray(Object[] array, long l0, long l1, long l2, long l3);\n-\n-    native SubElementSelector createSubElementSelector(Object[] array);\n-    native SubElementSelector getSubElementSelector(SubElementSelector selector, Class<?> klass, String name, String signature);\n-    native Object getObjectSubElement(Object[] array, SubElementSelector selector, int index);\n-    native void setObjectSubElement(Object[] array, SubElementSelector selector, int index, Object value);\n-\n-    native short getShortSubElement(Object[] array, SubElementSelector selector, int index);\n-    native void setShortSubElement(Object[] array, SubElementSelector selector, int index, short value);\n-    native int getIntSubElement(Object[] array, SubElementSelector selector, int index);\n-    native void setIntSubElement(Object[] array, SubElementSelector selector, int index, int value);\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestJNIArrays.java","additions":0,"deletions":888,"binary":false,"changes":888,"status":"deleted"},{"patch":"@@ -1,313 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <jni.h>\n-\n-#if !defined(_WIN32) && !defined(_WIN64)\n-\n-JNIEXPORT jint JNICALL\n-Java_TestJNIArrays_GetFlattenedArrayElementSizeWrapper(JNIEnv* env, jobject receiver, jarray array) {\n-  jsize elm_sz = (*env)->GetFlattenedArrayElementSize(env, array);\n-  return (jint)elm_sz;\n-}\n-\n-JNIEXPORT jclass JNICALL\n-Java_TestJNIArrays_GetFlattenedArrayElementClassWrapper(JNIEnv* env, jobject receiver, jarray array) {\n-  jclass elm_class = (*env)->GetFlattenedArrayElementClass(env, array);\n-  return elm_class;\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_TestJNIArrays_GetFieldOffsetInFlattenedLayoutWrapper(JNIEnv* env, jobject receiver, jclass clazz, jstring name, jstring signature, jboolean expectFlattened) {\n-  jboolean flattened;\n-  const char *name_ptr = (*env)->GetStringUTFChars(env, name, NULL);\n-  const char *signature_ptr = (*env)->GetStringUTFChars(env, signature, NULL);\n-  int offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, name_ptr,signature_ptr, &flattened);\n-  (*env)->ReleaseStringUTFChars(env, name, name_ptr);\n-  (*env)->ReleaseStringUTFChars(env, signature, signature_ptr);\n-  if ((*env)->ExceptionCheck(env)) {\n-    return -1;\n-  }\n-  if (flattened != expectFlattened) {\n-    jclass RE = (*env)->FindClass(env, \"java\/lang\/RuntimeException\");\n-    (*env)->ThrowNew(env, RE, \"Flattening mismatch\");\n-    return -1;\n-  }\n-  return offset;\n-}\n-\n-JNIEXPORT jlong JNICALL\n-Java_TestJNIArrays_GetFlattenedArrayElementsWrapper(JNIEnv* env, jobject receiver, jarray array) {\n-  jboolean isCopy;\n-  void* addr = (*env)->GetFlattenedArrayElements(env, array, &isCopy);\n-  return (jlong)addr;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_TestJNIArrays_ReleaseFlattenedArrayElementsWrapper(JNIEnv* env, jobject receiver, jarray array, jlong addr, jint mode) {\n-  (*env)->ReleaseFlattenedArrayElements(env, array, (void*)addr, mode);\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_TestJNIArrays_getIntFieldAtIndex(JNIEnv* env, jobject receiver, jarray array, jint index, jstring name, jstring signature) {\n-  jint array_length = (*env)->GetArrayLength(env, array);\n-  if (index < 0 || index >= array_length) {\n-    jclass AIOOBE = (*env)->FindClass(env, \"java.lang.ArrayIndexOutOfBoundsException\");\n-    (*env)->ThrowNew(env, AIOOBE, \"Bad index\");\n-    return -1;\n-  }\n-  jobject element = (*env)->GetObjectArrayElement(env, array, index);\n-  \/\/ should add protection against null element here (could happen if array is not a flattened array\n-  jclass element_class = (*env)->GetObjectClass(env, element);\n-  const char *name_ptr = (*env)->GetStringUTFChars(env, name, NULL);\n-  const char *signature_ptr = (*env)->GetStringUTFChars(env, signature, NULL);\n-  jfieldID field_id = (*env)->GetFieldID(env, element_class, (const char*)name_ptr, (const char *)signature_ptr);\n-  (*env)->ReleaseStringUTFChars(env, name, name_ptr);\n-  (*env)->ReleaseStringUTFChars(env, signature, signature_ptr);\n-  jint value = (*env)->GetIntField(env, element, field_id);\n-  return value;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_TestJNIArrays_printArrayInformation(JNIEnv* env, jobject receiver, jarray array) {\n-  jsize elm_sz = (*env)->GetFlattenedArrayElementSize(env, array);\n-  void* base = (*env)->GetFlattenedArrayElements(env, array, NULL);\n-  (*env)->ReleaseFlattenedArrayElements(env, array, base, 0);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_TestJNIArrays_initializeIntIntArrayBuffer(JNIEnv* env, jobject receiver, jarray array, int i0, int i1) {\n-  int len = (*env)->GetArrayLength(env, array);\n-  jsize elm_sz = (*env)->GetFlattenedArrayElementSize(env, array);\n-  jclass clazz = (*env)->GetFlattenedArrayElementClass(env, array);\n-  int i0_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"i0\", \"I\", NULL);\n-  int i1_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"i1\", \"I\", NULL);\n-  char* buffer = (char*)malloc(elm_sz);\n-  if (buffer == NULL) {\n-    jclass OOM = (*env)->FindClass(env, \"java\/lang\/OutOfMemoryException\");\n-    (*env)->ThrowNew(env, OOM, \"Malloc failed\");\n-    return;\n-  }\n-  *(int*)(buffer + i0_offset) = i0;\n-  *(int*)(buffer + i1_offset) = i1;\n-  void* base = (void*)(*env)->GetFlattenedArrayElements(env, array, NULL);\n-  for (int i = 0; i < len; i++) {\n-    memcpy((char*)base + i * elm_sz, buffer, elm_sz);\n-  }\n-  (*env)->ReleaseFlattenedArrayElements(env, array, base, 0);\n-  free(buffer);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_TestJNIArrays_initializeIntIntArrayFields(JNIEnv* env, jobject receiver, jarray array, int i0, int i1) {\n-  int len = (*env)->GetArrayLength(env, array);\n-  jsize elm_sz = (*env)->GetFlattenedArrayElementSize(env, array);\n-  jclass clazz = (*env)->GetFlattenedArrayElementClass(env, array);\n-  int i0_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"i0\", \"I\", NULL);\n-  int i1_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"i1\", \"I\", NULL);\n-  void* base = (void*)(*env)->GetFlattenedArrayElements(env, array, NULL);\n-  char* elm_ptr = base;\n-  for (int i = 0; i < len; i++) {\n-    *(int*)(elm_ptr + i0_offset) = i0;\n-    *(int*)(elm_ptr + i1_offset) = i1;\n-    elm_ptr += elm_sz;\n-  }\n-  (*env)->ReleaseFlattenedArrayElements(env, array, base, 0);\n-}\n-\n-struct IntInt_offsets {\n-  int i0_offset;\n-  int i1_offset;\n-};\n-\n-#ifdef __APPLE__\n-static int compare_IntInt(void* offsets, const void* x, const void* y)  {\n-#endif \/\/ __APPLE__\n-#ifdef __linux__\n-static int compare_IntInt(const void* x, const void* y, void* offsets)  {\n-#endif \/\/ __linux__\n-  int i0_offset = ((struct IntInt_offsets*)offsets)->i0_offset;\n-  int x_i0 = *(int*)((char*)x + i0_offset);\n-  int y_i0 = *(int*)((char*)y + i0_offset);\n-  if (x_i0 < y_i0) return -1;\n-  if (x_i0 > y_i0) return 1;\n-  int i1_offset = ((struct IntInt_offsets*)offsets)->i1_offset;\n-  int x_i1 = *(int*)((char*)x + i1_offset);\n-  int y_i1 = *(int*)((char*)y + i1_offset );\n-  if (x_i1 < y_i1) return -1;\n-  if (x_i1 > y_i1) return 1;\n-  return 0;\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_TestJNIArrays_sortIntIntArray(JNIEnv* env, jobject receiver, jarray array) {\n-  int len = (*env)->GetArrayLength(env, array);\n-  jsize elm_sz = (*env)->GetFlattenedArrayElementSize(env, array);\n-  jclass clazz = (*env)->GetFlattenedArrayElementClass(env, array);\n-  struct IntInt_offsets offsets;\n-  offsets.i0_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"i0\", \"I\", NULL);\n-  offsets.i1_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"i1\", \"I\", NULL);\n-  void* base = (void*)(*env)->GetFlattenedArrayElements(env, array, NULL);\n-#ifdef __APPLE__\n-  qsort_r(base, len, elm_sz, (void*) &offsets, compare_IntInt);\n-#endif \/\/ __APPLE__\n-#ifdef __linux__\n-  qsort_r(base, len, elm_sz,  compare_IntInt, (void*) &offsets);\n-#endif \/\/ __linux__\n-  (*env)->ReleaseFlattenedArrayElements(env, array, base, 0);\n-}\n-\n-\n-JNIEXPORT void JNICALL\n-Java_TestJNIArrays_initializeContainerArray(JNIEnv* env, jobject receiver, jarray array,\n-                                            jdouble d, jfloat f, jshort s, jbyte b) {\n-  int len = (*env)->GetArrayLength(env, array);\n-  jsize elm_sz = (*env)->GetFlattenedArrayElementSize(env, array);\n-  jclass clazz = (*env)->GetFlattenedArrayElementClass(env, array);\n-  int d_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"d\", \"D\", NULL);\n-  int b_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"b\", \"B\", NULL);\n-  jboolean flattened;\n-  int c_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"c\", \"QTestJNIArrays$Containee;\", &flattened);\n-  if (!flattened) {\n-    jclass RE = (*env)->FindClass(env, \"java\/lang\/RuntimeException\");\n-    (*env)->ThrowNew(env, RE, \"Incompatible layout\");\n-    return;\n-  }\n-  jclass clazz2 = (*env)->FindClass(env, \"TestJNIArrays$Containee\");\n-  int f_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz2, \"f\", \"F\", NULL);\n-  int s_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz2, \"s\", \"S\", NULL);\n-  f_offset += c_offset;\n-  s_offset += c_offset;\n-  void* base = (void*)(*env)->GetFlattenedArrayElements(env, array, NULL);\n-  char* elm_ptr = base;\n-  for (int i = 0; i < len; i++) {\n-    *(jdouble*)(elm_ptr + d_offset) = d;\n-    *(jfloat*)(elm_ptr + f_offset) = f;\n-    *(jshort*)(elm_ptr + s_offset) = s;\n-    *(jbyte*)(elm_ptr + b_offset) = b;\n-    elm_ptr += elm_sz;\n-  }\n-  (*env)->ReleaseFlattenedArrayElements(env, array, base, 0);\n-}\n-\n-\n-JNIEXPORT void JNICALL\n-Java_TestJNIArrays_updateContainerArray(JNIEnv* env, jobject receiver, jarray array,\n-                                        jfloat f, jshort s) {\n-  int len = (*env)->GetArrayLength(env, array);\n-  jsize elm_sz = (*env)->GetFlattenedArrayElementSize(env, array);\n-  jclass clazz = (*env)->GetFlattenedArrayElementClass(env, array);\n-  jboolean flattened;\n-  int c_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"c\", \"QTestJNIArrays$Containee;\", &flattened);\n-  if (!flattened) {\n-    jclass RE = (*env)->FindClass(env, \"java\/lang\/RuntimeException\");\n-    (*env)->ThrowNew(env, RE, \"Incompatible layout\");\n-    return;\n-  }\n-  jclass clazz2 = (*env)->FindClass(env, \"TestJNIArrays$Containee\");\n-  int f_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz2, \"f\", \"F\", NULL);\n-  int s_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz2, \"s\", \"S\", NULL);\n-  f_offset += c_offset;\n-  s_offset += c_offset;\n-  void* base = (void*)(*env)->GetFlattenedArrayElements(env, array, NULL);\n-  char* elm_ptr = base;\n-  for (int i = 0; i < len; i++) {\n-    *(jfloat*)(elm_ptr + f_offset) = f;\n-    *(jshort*)(elm_ptr + s_offset) = s;\n-    elm_ptr += elm_sz;\n-  }\n-  (*env)->ReleaseFlattenedArrayElements(env, array, base, 0);\n-}\n-\n-\n- JNIEXPORT void JNICALL\n- Java_TestJNIArrays_initializeLongLongLongLongArray(JNIEnv* env, jobject receiver, jarray array, jlong l0, jlong l1, jlong l2, jlong l3) {\n-  int len = (*env)->GetArrayLength(env, array);\n-  jsize elm_sz = (*env)->GetFlattenedArrayElementSize(env, array);\n-  jclass clazz = (*env)->GetFlattenedArrayElementClass(env, array);\n-  int l0_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"l0\", \"J\", NULL);\n-  int l1_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"l1\", \"J\", NULL);\n-  int l2_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"l2\", \"J\", NULL);\n-  int l3_offset = (*env)->GetFieldOffsetInFlattenedLayout(env, clazz, \"l3\", \"J\", NULL);\n-  void* base = (void*)(*env)->GetFlattenedArrayElements(env, array, NULL);\n-  char* elm_ptr = base;\n-  for (int i = 0; i < len; i++) {\n-    *(jlong*)(elm_ptr + l0_offset) = l0;\n-    *(jlong*)(elm_ptr + l1_offset) = l1;\n-    *(jlong*)(elm_ptr + l2_offset) = l2;\n-    *(jlong*)(elm_ptr + l3_offset) = l3;\n-    elm_ptr += elm_sz;\n-  }\n-  (*env)->ReleaseFlattenedArrayElements(env, array, base, 0);\n-}\n-\n-JNIEXPORT jobject JNICALL\n-Java_TestJNIArrays_createSubElementSelector(JNIEnv* env, jobject receiver, jarray array) {\n-  return (*env)->CreateSubElementSelector(env, array);\n-}\n-\n-JNIEXPORT jobject JNICALL\n-  Java_TestJNIArrays_getSubElementSelector(JNIEnv* env, jobject receiver, jobject selector, jclass klass, jstring name, jstring signature) {\n-  const char *name_ptr = (*env)->GetStringUTFChars(env, name, NULL);\n-  const char *signature_ptr = (*env)->GetStringUTFChars(env, signature, NULL);\n-  jfieldID fieldID = (*env)->GetFieldID(env, klass, name_ptr, signature_ptr);\n-  jobject res = (*env)->GetSubElementSelector(env, selector, fieldID);\n-  (*env)->ReleaseStringUTFChars(env, name, name_ptr);\n-  (*env)->ReleaseStringUTFChars(env, signature, signature_ptr);\n-  return res;\n-}\n-\n-JNIEXPORT jobject JNICALL\n-Java_TestJNIArrays_getObjectSubElement(JNIEnv* env, jobject receiver, jarray array, jobject selector, jint index) {\n-  return (*env)->GetObjectSubElement(env, array, selector, index);\n-}\n-\n-JNIEXPORT void JNICALL\n-  Java_TestJNIArrays_setObjectSubElement(JNIEnv* env, jobject receiver, jarray array, jobject selector, jint index, jobject value) {\n-  (*env)->SetObjectSubElement(env, array, selector, index, value);\n-}\n-\n-JNIEXPORT jshort JNICALL\n-Java_TestJNIArrays_getShortSubElement(JNIEnv* env, jobject receiver, jarray array, jobject selector, jint index) {\n-  return (*env)->GetShortSubElement(env, array, selector, index);\n-}\n-\n-JNIEXPORT void JNICALL\n-  Java_TestJNIArrays_setShortSubElement(JNIEnv* env, jobject receiver, jarray array, jobject selector, jint index, short value) {\n-  (*env)->SetShortSubElement(env, array, selector, index, value);\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_TestJNIArrays_getIntSubElement(JNIEnv* env, jobject receiver, jarray array, jobject selector, jint index) {\n-  return (*env)->GetIntSubElement(env, array, selector, index);\n-}\n-\n-JNIEXPORT void JNICALL\n-  Java_TestJNIArrays_setIntSubElement(JNIEnv* env, jobject receiver, jarray array, jobject selector, jint index, jint value) {\n-  (*env)->SetIntSubElement(env, array, selector, index, value);\n-}\n-\n-#endif \/\/ !defined(_WIN32) && !defined(_WIN64)\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/libTestJNIArrays.c","additions":0,"deletions":313,"binary":false,"changes":313,"status":"deleted"}]}