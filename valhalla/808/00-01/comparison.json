{"files":[{"patch":"@@ -97,0 +97,2 @@\n+import static java.lang.reflect.ClassFileFormatVersion.RELEASE_17;\n+\n@@ -1495,0 +1497,1 @@\n+     * The {@code AccessFlags} may depend on the class file format version of the class.\n@@ -1524,0 +1527,2 @@\n+        int accessFlags = (location == AccessFlag.Location.CLASS) ?\n+                getClassAccessFlagsRaw() : getModifiers();\n@@ -1525,5 +1530,5 @@\n-        return AccessFlag.maskToAccessFlags((location == AccessFlag.Location.CLASS) ?\n-                                            getClassAccessFlagsRaw() & (~0x800) :\n-                                            getModifiers() & (~0x800), \/\/ suppress unspecified bit\n-                                            location,\n-                                            cffv);\n+        if (cffv.compareTo(RELEASE_17) >= 0) {\n+            \/\/ For 17 and later ignore unspecified (0x800) access flag\n+            accessFlags &= ~0x0800;\n+        }\n+        return AccessFlag.maskToAccessFlags(accessFlags, location, cffv);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-                return (cffv.compareTo(ClassFileFormatVersion.RELEASE_20) >= 0 &&\n+                return (cffv.compareTo(ClassFileFormatVersion.RELEASE_21) >= 0 &&\n@@ -214,1 +214,1 @@\n-                    return (cffv.compareTo(ClassFileFormatVersion.RELEASE_20) >= 0 &&\n+                    return (cffv.compareTo(ClassFileFormatVersion.RELEASE_21) >= 0 &&\n@@ -283,0 +283,1 @@\n+\n@@ -525,1 +526,1 @@\n-     * positions not support for the location in question\n+     * positions not supported for the location in question\n@@ -559,5 +560,0 @@\n-        if (cffv == ClassFileFormatVersion.latest()) {\n-            \/\/ for the current version use the precomputed locations\n-            return maskToAccessFlags(mask, location);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -217,0 +217,1 @@\n+     * The {@code AccessFlags} may depend on the class file format version of the class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -219,0 +219,2 @@\n+     * The {@code AccessFlags} may depend on the class file format version of the class.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-                               ClassFileFormatVersion.RELEASE_20),\n+                               ClassFileFormatVersion.RELEASE_21),\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/VersionedLocationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}