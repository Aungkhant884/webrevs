{"files":[{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8301720\n+ * @summary Test expected value of SUPER AccessFlag for pre-ValueClass .class file\n+ * @compile -source 20 -target 20 SuperAccessFlagTest.java\n+ * @run main SuperAccessFlagTest\n+ *\/\n+\n+\/\/ Note: cannot use --release 20 because the accessFlags() method is\n+\/\/ not found in release 20; therefore -source and -target are used instead.\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+\/*\n+ * Test expected value of ACC_SUPER access flag on an earlier release.\n+ *\/\n+@ExpectedClassFlags(\"[PUBLIC, SUPER]\")\n+public class SuperAccessFlagTest {\n+    public static void main(String... args) {\n+        checkClass(SuperAccessFlagTest.class);\n+    }\n+\n+    private static void checkClass(Class<?> clazz) {\n+        ExpectedClassFlags expected =\n+                clazz.getAnnotation(ExpectedClassFlags.class);\n+        if (expected != null) {\n+            String actual = clazz.accessFlags().toString();\n+            if (!expected.value().equals(actual)) {\n+                throw new RuntimeException(\"On \" + clazz +\n+                        \" expected \" + expected.value() +\n+                        \" got \" + actual);\n+            }\n+        }\n+    }\n+}\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExpectedClassFlags(\"[INTERFACE, ABSTRACT, ANNOTATION]\")\n+@interface ExpectedClassFlags {\n+    String value();\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/SuperAccessFlagTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}