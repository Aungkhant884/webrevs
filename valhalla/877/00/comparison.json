{"files":[{"patch":"@@ -451,1 +451,2 @@\n-        ConstructorFlags                  = AccessFlags | IMPLICIT,\n+        ConstructorFlags                  = AccessFlags,\n+        ImplicitConstructorFlags          = PUBLIC | IMPLICIT,\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1349,1 +1349,9 @@\n-                } else\n+                } else if ((flags & IMPLICIT) != 0) {\n+                    if ((flags & PUBLIC) == 0) {\n+                        log.error(pos, Errors.ImplicitConstMustBePublic);\n+                    }\n+                    if ((sym.owner.flags_field & VALUE_CLASS) == 0) {\n+                        log.error(pos, Errors.ImplicitConstMustBeDeclaredInValueClass);\n+                    }\n+                    mask = ImplicitConstructorFlags;\n+                } else {\n@@ -1351,0 +1359,1 @@\n+                }\n@@ -1498,7 +1507,1 @@\n-                                ANNOTATION)\n-                && checkDisjoint(pos, flags,\n-                                IMPLICIT,\n-                                PRIVATE)\n-                && checkDisjoint(pos, flags,\n-                                IMPLICIT,\n-                                PROTECTED) ) {\n+                                ANNOTATION) ) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -4125,0 +4125,6 @@\n+compiler.err.implicit.const.must.be.public=\\\n+    implicit constructors must be public\n+\n+compiler.err.implicit.const.must.be.declared.in.value.class=\\\n+    only value classes can declare implicit constructors\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -871,0 +871,93 @@\n+\n+    public void testImplicitConstructor() {\n+        assertOK(\n+                \"\"\"\n+                value class V {\n+                    public implicit V();\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.implicit.const.must.be.public\",\n+                \"\"\"\n+                value class V {\n+                    implicit V();\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.implicit.const.must.be.public\",\n+                \"\"\"\n+                value class V {\n+                    private implicit V();\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.implicit.const.must.be.public\",\n+                \"\"\"\n+                value class V {\n+                    protected implicit V();\n+                }\n+                \"\"\"\n+        );\n+\n+        assertFail(\"compiler.err.already.defined\",\n+                \"\"\"\n+                value class V {\n+                    public implicit V();\n+                    public V() {}\n+                }\n+                \"\"\"\n+        );\n+\n+        assertFail(\"compiler.err.implicit.const.must.be.declared.in.value.class\",\n+                \"\"\"\n+                class V {\n+                    public implicit V();\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n+                \"\"\"\n+                class Outer {\n+                    value class V {\n+                        public implicit V();\n+                    }\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n+                \"\"\"\n+                class Outer {\n+                    new value class V() {\n+                        public implicit V();\n+                    };\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.cyclic.primitive.class.membership\",\n+                \"\"\"\n+                value class V {\n+                    V! v;\n+                    public implicit V();\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.value.class.with.implicit.instance.field.initializer\",\n+                \"\"\"\n+                value class V {\n+                    String s = \"\";\n+                    public implicit V();\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.value.class.with.implicit.declares.init.block\",\n+                \"\"\"\n+                value class V {\n+                    String s;\n+                    {\n+                        s = \"\";\n+                    }\n+                    public implicit V();\n+                }\n+                \"\"\"\n+        );\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"modified"}]}