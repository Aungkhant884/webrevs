{"files":[{"patch":"@@ -487,2 +487,1 @@\n-  int initial_framesize = initial_frame_size_in_bytes();\n-  __ remove_frame(initial_framesize, needs_stack_repair(), initial_framesize - wordSize);\n+  __ remove_frame(initial_frame_size_in_bytes(), needs_stack_repair());\n@@ -550,2 +549,1 @@\n-  int initial_framesize = initial_frame_size_in_bytes();\n-  __ remove_frame(initial_framesize, needs_stack_repair(), initial_framesize - wordSize);\n+  __ remove_frame(initial_frame_size_in_bytes(), needs_stack_repair());\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5358,1 +5358,1 @@\n-    \/\/ Save stack increment (also account for fixed framesize and rbp)\n+    \/\/ Save stack increment just below the saved rbp (also account for fixed framesize and rbp)\n@@ -5360,1 +5360,1 @@\n-    movptr(Address(rsp, C->output()->sp_inc_offset()), sp_inc + framesize + wordSize);\n+    movptr(Address(rsp, framesize - wordSize), sp_inc + framesize + wordSize);\n@@ -5769,1 +5769,1 @@\n-void MacroAssembler::remove_frame(int initial_framesize, bool needs_stack_repair, int sp_inc_offset) {\n+void MacroAssembler::remove_frame(int initial_framesize, bool needs_stack_repair) {\n@@ -5773,1 +5773,2 @@\n-    addq(rsp, Address(rsp, sp_inc_offset));\n+    \/\/ The stack increment resides just below the saved rbp\n+    addq(rsp, Address(rsp, initial_framesize - wordSize));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1775,1 +1775,1 @@\n-  void remove_frame(int initial_framesize, bool needs_stack_repair, int sp_inc_offset);\n+  void remove_frame(int initial_framesize, bool needs_stack_repair);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -978,1 +978,1 @@\n-  __ remove_frame(initial_framesize, C->needs_stack_repair(), C->output()->sp_inc_offset());\n+  __ remove_frame(initial_framesize, C->needs_stack_repair());\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1133,0 +1133,59 @@\n+\n+    \/\/ Test stack repair with stack slots reserved for monitors\n+    private static final Object lock1 = new Object();\n+    private static final Object lock2 = new Object();\n+    private static final Object lock3 = new Object();\n+\n+    @DontInline\n+    static void test51_callee() { }\n+\n+    @Test\n+    public void test51(MyValue1 val) {\n+        synchronized (lock1) {\n+            test51_callee();\n+        }\n+    }\n+\n+    @Run(test = \"test51\")\n+    public void test51_verifier() {\n+        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n+        test51(vt);\n+    }\n+\n+    @DontInline\n+    static void test52_callee() { }\n+\n+    @Test\n+    public void test52(MyValue1 val) {\n+        synchronized (lock1) {\n+            synchronized (lock2) {\n+                test52_callee();\n+            }\n+        }\n+    }\n+\n+    @Run(test = \"test52\")\n+    public void test52_verifier() {\n+        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n+        test52(vt);\n+    }\n+\n+    @DontInline\n+    static void test53_callee() { }\n+\n+    @Test\n+    public void test53(MyValue1 val) {\n+        synchronized (lock1) {\n+            synchronized (lock2) {\n+                synchronized (lock3) {\n+                    test53_callee();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Run(test = \"test53\")\n+    public void test53_verifier() {\n+        MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);\n+        test53(vt);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"}]}