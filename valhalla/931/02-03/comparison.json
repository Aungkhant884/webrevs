{"files":[{"patch":"@@ -2345,7 +2345,1 @@\n-  \/\/ The MaxVectorSize should have been set by detecting SVE max vector register size.\n-  int size = MIN2((UseSVE > 0) ? 256 : 16, (int)MaxVectorSize);\n-  \/\/ Minimum 2 values in vector\n-  if (size < 2*type2aelembytes(bt)) size = 0;\n-  \/\/ But never < 4\n-  if (size < 4) size = 0;\n-  return size;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -2356,1 +2350,1 @@\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -662,1 +662,7 @@\n-  return MaxVectorSize \/ type2aelembytes(bt);\n+ \/\/ The MaxVectorSize should have been set by detecting SVE max vector register size.\n+  int size = MIN2((UseSVE > 0) ? 256 : 16, (int)MaxVectorSize);\n+  \/\/ Minimum 2 values in vector\n+  if (size < 2*type2aelembytes(bt)) size = 0;\n+  \/\/ But never < 4\n+  if (size < 4) size = 0;\n+  return size \/ type2aelembytes(bt);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1048,1 +1048,1 @@\n-  return MaxVectorSize;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -1068,2 +1068,1 @@\n-  assert(is_java_primitive(bt), \"only primitive type vectors\");\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2212,7 +2212,1 @@\n-  if (SuperwordUseVSX) {\n-    assert(MaxVectorSize == 16, \"\");\n-    return 16;\n-  } else {\n-    assert(MaxVectorSize == 8, \"\");\n-    return 8;\n-  }\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -2235,1 +2229,1 @@\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -707,1 +707,9 @@\n-  return MaxVectorSize \/ type2aelembytes(bt);\n+  int size = 0;\n+  if (SuperwordUseVSX) {\n+    assert(MaxVectorSize == 16, \"\");\n+    size = 16;\n+  } else {\n+    assert(MaxVectorSize == 8, \"\");\n+    size = 8;\n+  }\n+  return size \/ type2aelembytes(bt);\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1958,11 +1958,1 @@\n-  if (UseRVV) {\n-    \/\/ The MaxVectorSize should have been set by detecting RVV max vector register size when check UseRVV.\n-    \/\/ MaxVectorSize == VM_Version::_initial_vector_length\n-    int size = MaxVectorSize;\n-    \/\/ Minimum 2 values in vector\n-    if (size < 2 * type2aelembytes(bt)) size = 0;\n-    \/\/ But never < 4\n-    if (size < 4) size = 0;\n-    return size;\n-  }\n-  return 0;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -1973,1 +1963,1 @@\n-  return vector_width_in_bytes(bt) \/ type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -354,1 +354,11 @@\n-  return MaxVectorSize \/ type2aelembytes(bt);\n+  if (UseRVV) {\n+    \/\/ The MaxVectorSize should have been set by detecting RVV max vector register size when check UseRVV.\n+    \/\/ MaxVectorSize == VM_Version::_initial_vector_length\n+    int size = MaxVectorSize;\n+    \/\/ Minimum 2 values in vector\n+    if (size < 2 * type2aelembytes(bt)) size = 0;\n+    \/\/ But never < 4\n+    if (size < 4) size = 0;\n+    return size \/ type2aelembytes(bt);\n+  }\n+  return 0;\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1554,2 +1554,1 @@\n-  assert(MaxVectorSize == 8, \"\");\n-  return 8;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n@@ -1567,1 +1566,1 @@\n-  return vector_width_in_bytes(bt)\/type2aelembytes(bt);\n+  return VM_Version::max_vector_size(bt);\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1519,0 +1519,1 @@\n+  assert(MaxVectorSize == 8, \"\");\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2223,39 +2223,1 @@\n-  assert(is_java_primitive(bt), \"only primitive type vectors\");\n-  if (UseSSE < 2) return 0;\n-  \/\/ SSE2 supports 128bit vectors for all types.\n-  \/\/ AVX2 supports 256bit vectors for all types.\n-  \/\/ AVX2\/EVEX supports 512bit vectors for all types.\n-  int size = (UseAVX > 1) ? (1 << UseAVX) * 8 : 16;\n-  \/\/ AVX1 supports 256bit vectors only for FLOAT and DOUBLE.\n-  if (UseAVX > 0 && (bt == T_FLOAT || bt == T_DOUBLE))\n-    size = (UseAVX > 2) ? 64 : 32;\n-  if (UseAVX > 2 && (bt == T_BYTE || bt == T_SHORT || bt == T_CHAR))\n-    size = (VM_Version::supports_avx512bw()) ? 64 : 32;\n-  \/\/ Use flag to limit vector size.\n-  size = MIN2(size,(int)MaxVectorSize);\n-  \/\/ Minimum 2 values in vector (or 4 for bytes).\n-  switch (bt) {\n-  case T_DOUBLE:\n-  case T_LONG:\n-    if (size < 16) return 0;\n-    break;\n-  case T_FLOAT:\n-  case T_INT:\n-    if (size < 8) return 0;\n-    break;\n-  case T_BOOLEAN:\n-    if (size < 4) return 0;\n-    break;\n-  case T_CHAR:\n-    if (size < 4) return 0;\n-    break;\n-  case T_BYTE:\n-    if (size < 4) return 0;\n-    break;\n-  case T_SHORT:\n-    if (size < 4) return 0;\n-    break;\n-  default:\n-    ShouldNotReachHere();\n-  }\n-  return size;\n+  return max_vector_size(bt) * type2aelembytes(bt);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":39,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-  int size = VM_Version::max_vector_size(T_BYTE);\n+  int size = MAX2(VM_Version::max_vector_size(T_BYTE), 8);\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}