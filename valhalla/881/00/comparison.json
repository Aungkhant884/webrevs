{"files":[{"patch":"@@ -34,0 +34,1 @@\n+\n@@ -234,0 +235,15 @@\n+class MultiFieldInfo : public MetaspaceObj {\n+ private:\n+  Symbol* _name;\n+  u2 _base_index;\n+  jbyte _multifield_index;\n+ public:\n+  MultiFieldInfo() : _name(nullptr), _base_index(0), _multifield_index(-1) {}\n+  MultiFieldInfo(Symbol* name, u2 base, jbyte index) : _name(name), _base_index(base), _multifield_index(index) {}\n+  Symbol* name() const { return _name; }\n+  u2 base_index() const { return _base_index; }\n+  jbyte multifield_index() const { return _multifield_index; }\n+  FieldInfo base_field_info(InstanceKlass* ik);\n+  void metaspace_pointers_do(MetaspaceClosure* it);\n+  MetaspaceObj::Type type() const { return MultiFieldInfoType; }\n+};\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -509,0 +509,1 @@\n+#if INCLUDE_CDS\n@@ -547,0 +548,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,0 +136,3 @@\n+\/\/ CDS support\n+\n+#if INCLUDE_CDS\n@@ -140,0 +143,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -138,16 +138,0 @@\n-class MultiFieldInfo : public MetaspaceObj {\n- private:\n-  Symbol* _name;\n-  u2 _base_index;\n-  jbyte _multifield_index;\n- public:\n-  MultiFieldInfo() : _name(nullptr), _base_index(0), _multifield_index(-1) {}\n-  MultiFieldInfo(Symbol* name, u2 base, jbyte index) : _name(name), _base_index(base), _multifield_index(index) {}\n-  Symbol* name() const { return _name; }\n-  u2 base_index() const { return _base_index; }\n-  jbyte multifield_index() const { return _multifield_index; }\n-  FieldInfo base_field_info(InstanceKlass* ik);\n-  void metaspace_pointers_do(MetaspaceClosure* it);\n-  MetaspaceObj::Type type() const { return MultiFieldInfoType; }\n-};\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -122,0 +122,1 @@\n+#ifdef COMPILER2\n@@ -330,0 +331,1 @@\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+\n+#ifdef COMPILER2\n@@ -43,2 +45,3 @@\n-\n-  static void init_payload_element(typeArrayOop arr, BasicType elem_bt, int index, address addr);\n+  static InstanceKlass* get_vector_payload_klass(BasicType elem_bt, int num_elem);\n+  static Symbol* get_vector_payload_field_signature(BasicType elem_bt, int num_elem);\n+#endif \/\/ COMPILER2\n@@ -146,0 +149,1 @@\n+#ifdef COMPILER2\n@@ -148,3 +152,1 @@\n-\n-  static InstanceKlass* get_vector_payload_klass(BasicType elem_bt, int num_elem);\n-  static Symbol* get_vector_payload_field_signature(BasicType elem_bt, int num_elem);\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -554,2 +554,2 @@\n-JRT_LEAF(jint, SharedRuntime::skip_value_scalarization(InlineKlass* klass))\n-  return (jint)VectorSupport::skip_value_scalarization(klass);\n+JRT_LEAF(int, SharedRuntime::skip_value_scalarization(InlineKlass* klass))\n+  return (int) VectorSupport::skip_value_scalarization(klass);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}