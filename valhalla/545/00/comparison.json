{"files":[{"patch":"@@ -419,0 +419,1 @@\n+            Type thisType = sym.owner.enclClass().asType();\n@@ -420,1 +421,1 @@\n-                    sym.owner.enclClass().asType(),\n+                    thisType.isPrimitiveReferenceType() ? thisType.asValueType() : thisType,\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8273301\n+ * @summary [lworld] Bootstrap of instance-capturing lambda fails for reference favoring primitive types\n+ * @run main CheckRefLambda\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+public primitive class CheckRefLambda.val {\n+\n+    int theInteger;\n+\n+    CheckRefLambda(int newValue) {\n+        theInteger = newValue;\n+    }\n+\n+    public Supplier<CheckRefLambda> makeCopier() {\n+        return () -> new CheckRefLambda(this.theInteger + 1);\n+    }\n+\n+    public static void main(String[] args) {\n+        CheckRefLambda rec = new CheckRefLambda(42);\n+        CheckRefLambda rec2 = rec.makeCopier().get();\n+        if (rec2 != new CheckRefLambda(43)) {\n+            throw new AssertionError(\"Classes should be equal\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RefDefault\/CheckRefLambda.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}