{"files":[{"patch":"@@ -1783,1 +1783,1 @@\n-void GraphBuilder::copy_inline_content(ciInlineKlass* vk, Value src, int src_off, Value dest, int dest_off, ValueStack* state_before) {\n+void GraphBuilder::copy_inline_content(ciInlineKlass* vk, Value src, int src_off, Value dest, int dest_off, ValueStack* state_before, ciField* enclosing_field) {\n@@ -1792,0 +1792,1 @@\n+    store->set_enclosing_field(enclosing_field);\n@@ -2056,1 +2057,1 @@\n-        copy_inline_content(inline_klass, val, inline_klass->first_field_offset(), obj, offset, state_before);\n+        copy_inline_content(inline_klass, val, inline_klass->first_field_offset(), obj, offset, state_before, field);\n@@ -2112,1 +2113,1 @@\n-            copy_inline_content(vk, obj, offset, new_instance, vk->first_field_offset(), state_before);\n+            copy_inline_content(vk, obj, offset, new_instance, vk->first_field_offset(), state_before, field);\n@@ -2133,1 +2134,1 @@\n-      copy_inline_content(vk, val, vk->first_field_offset(), new_instance, offset_modify, state_before);\n+      copy_inline_content(vk, val, vk->first_field_offset(), new_instance, offset_modify, state_before, field_modify);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-  void copy_inline_content(ciInlineKlass* vk, Value src, int src_off, Value dest, int dest_off, ValueStack* state_before);\n+  void copy_inline_content(ciInlineKlass* vk, Value src, int src_off, Value dest, int dest_off, ValueStack* state_before, ciField* encloding_field = NULL);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -419,0 +419,1 @@\n+  , _enclosing_field(NULL)\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -882,0 +882,1 @@\n+  ciField* _enclosing_field;   \/\/ enclosing field (the flattened one) for nested fields\n@@ -891,0 +892,2 @@\n+  ciField* enclosing_field() const               { return _enclosing_field; }\n+  void set_enclosing_field(ciField* field)       { _enclosing_field = field; }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,0 +151,3 @@\n+      if (x->enclosing_field() != NULL) {\n+        kill_field(x->enclosing_field(), true);\n+      }\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2021, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @summary Test value numbering behaves correctly with flattened fields\n+ * @library \/testlibrary \/test\/lib\n+ * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1 -ea\n+ *                   -XX:CompileCommand=compileonly,compiler.valhalla.inlinetypes.TestC1ValueNumbering::*\n+ *                   compiler.valhalla.inlinetypes.TestC1ValueNumbering\n+ *\/\n+\n+public class TestC1ValueNumbering {\n+    static primitive class Point {\n+        int x,y;\n+        public Point() {\n+            x = 0; y = 0;\n+        }\n+        public Point(int x, int y) {\n+            this.x = x; this.y = y;\n+        }\n+    }\n+\n+    Point p;\n+\n+    \/\/ Notes on test 1:\n+    \/\/ 1 - asserts are important create several basic blocks (asserts create branches)\n+    \/\/ 2 - local variables x, y must be read in the same block as the putfield\n+    static void test1() {\n+        Point p = new Point(4,5);\n+        TestC1ValueNumbering test = new TestC1ValueNumbering();\n+        assert test.p.x == 0;\n+        assert test.p.y == 0;\n+        test.p = p;\n+        int x = test.p.x;\n+        int y = test.p.y;\n+        Asserts.assertEQ(x, 4, \"Bad field value\");\n+        Asserts.assertEQ(y, 5, \"Bad field value\");\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10; i++) {\n+            test1();\n+        }\n+    }\n+  }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1ValueNumbering.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}