{"files":[{"patch":"@@ -2890,1 +2890,1 @@\n-                (clazztype.tsym.flags() & (ABSTRACT | INTERFACE)) != 0) {\n+                (clazztype.tsym.flags() & (ABSTRACT | INTERFACE)) != 0 && clazztype.tsym != syms.objectType.tsym) { \/\/ tolerate abstract Object\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.Notes;\n@@ -800,1 +801,6 @@\n-            if ((t.tsym.flags() & (ABSTRACT | INTERFACE)) != 0) {\n+            \/* Tolerate an encounter with abstract Object, we will mutate the constructor reference\n+               to an invocation of java.util.Objects.newIdentity downstream.\n+            *\/\n+            if (t.tsym == syms.objectType.tsym)\n+                log.note(expr.pos(), Notes.CantInstantiateObjectDirectly);\n+            if ((t.tsym.flags() & (ABSTRACT | INTERFACE)) != 0 && t.tsym != syms.objectType.tsym) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -519,0 +519,5 @@\n+        if (refSym.isConstructor() && tree.expr.type.tsym == syms.objectType.tsym) {\n+            if (tree.mode == ReferenceMode.NEW && tree.kind == ReferenceKind.TOPLEVEL) {\n+                refSym = rs.resolveInternalMethod(tree, attrEnv, syms.objectsType, names.newIdentity, List.nil(), List.nil());\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8280456\n+ * @summary javac should allow compilation with abstract java.lang.Object class\n+ * @compile\/ref=ObjectInstantiationTest.out -XDrawDiagnostics ObjectInstantiationTest.java\n+ * @run main ObjectInstantiationTest\n+ *\/\n+\n+public class ObjectInstantiationTest {\n+\n+    interface I {\n+        Object getObject();\n+    }\n+\n+    public static void main(String [] args) {\n+\n+        Object o1 = java.util.Objects.newIdentity();\n+        Object o2 = new Object();\n+        Object o3 = foo(Object::new);\n+\n+        if (o1.getClass() != o2.getClass())\n+            throw new AssertionError(\"Unexpected class identity\");\n+        if (o2.getClass() != o3.getClass())\n+            throw new AssertionError(\"Unexpected class identity\");\n+    }\n+\n+    static Object foo(I i) {\n+        return i.getObject();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ObjectInstantiationTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+ObjectInstantiationTest.java:41:21: compiler.note.cant.instantiate.object.directly\n+ObjectInstantiationTest.java:42:25: compiler.note.cant.instantiate.object.directly\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ObjectInstantiationTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}