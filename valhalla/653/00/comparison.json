{"files":[{"patch":"@@ -42,1 +42,1 @@\n-            this.p1 = this.p2 = Point.createPoint(0, 1);\n+            this.p1 = this.p2 = new Point(0, 1);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassPrintLayoutDcmd.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,2 +32,1 @@\n- * @compile -XDallowWithFieldOperator Point.java JumboInline.java\n- * @compile -XDallowWithFieldOperator FlattenableSemanticTest.java\n+ * @compile Point.java JumboInline.java FlattenableSemanticTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlattenableSemanticTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,2 +41,1 @@\n- * @compile -XDallowWithFieldOperator Person.java\n- * @compile -XDallowWithFieldOperator InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -56,2 +55,1 @@\n- * @compile -XDallowWithFieldOperator Person.java\n- * @compile -XDallowWithFieldOperator InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -71,2 +69,1 @@\n- * @compile -XDallowWithFieldOperator Person.java\n- * @compile -XDallowWithFieldOperator InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -86,2 +83,1 @@\n- * @compile -XDallowWithFieldOperator Person.java\n- * @compile -XDallowWithFieldOperator InlineOops.java\n+ * @compile Person.java InlineOops.java\n@@ -153,10 +149,3 @@\n-        private Composition() {\n-            onePerson   = Person.create(0, null, null);\n-            otherPerson = Person.create(0, null, null);\n-        }\n-\n-        public static Composition create(Person onePerson, Person otherPerson) {\n-            Composition comp = Composition.default;\n-            comp = __WithField(comp.onePerson, onePerson);\n-            comp = __WithField(comp.otherPerson, otherPerson);\n-            return comp;\n+        public Composition(Person onePerson, Person otherPerson) {\n+            this.onePerson = onePerson;\n+            this.otherPerson = otherPerson;\n@@ -195,1 +184,1 @@\n-        Composition composition = Composition.create(couple.onePerson, couple.onePerson);\n+        Composition composition = new Composition(couple.onePerson, couple.onePerson);\n@@ -215,2 +204,2 @@\n-        couple.onePerson = Person.create(0, fn1, ln1);\n-        couple.otherPerson = Person.create(1, fn2, ln2);\n+        couple.onePerson = new Person(0, fn1, ln1);\n+        couple.otherPerson = new Person(1, fn2, ln2);\n@@ -268,1 +257,1 @@\n-        Person anotherPerson = Person.create(someId, TEST_STRING1, TEST_STRING2);\n+        Person anotherPerson = new Person(someId, TEST_STRING1, TEST_STRING2);\n@@ -463,1 +452,1 @@\n-        return Person.create(i, firstName(i), lastName(i));\n+        return new Person(i, firstName(i), lastName(i));\n@@ -471,1 +460,1 @@\n-        return Person.create(0, null, null);\n+        return Person.default;\n@@ -558,16 +547,6 @@\n-        private FooValue() {\n-            id          = 0;\n-            name        = null;\n-            description = null;\n-            timestamp   = 0L;\n-            notes       = null;\n-        }\n-\n-        public static FooValue create(int id, String name, String description, long timestamp, String notes) {\n-            FooValue f = FooValue.default;\n-            f = __WithField(f.id, id);\n-            f = __WithField(f.name, name);\n-            f = __WithField(f.description, description);\n-            f = __WithField(f.timestamp, timestamp);\n-            f = __WithField(f.notes, notes);\n-            return f;\n+        public FooValue(int id, String name, String description, long timestamp, String notes) {\n+            this.id = id;\n+            this.name = name;\n+            this.description = description;\n+            this.timestamp = timestamp;\n+            this.notes = notes;\n@@ -618,1 +597,1 @@\n-            FooValue f = create(4711, name, description, 9876543231L, notes);\n+            FooValue f = new FooValue(4711, name, description, 9876543231L, notes);\n@@ -666,1 +645,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":20,"deletions":42,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -154,4 +154,4 @@\n-        ps[0] = Point.createPoint(1, 2);\n-        ps[1] = Point.createPoint(3, 4);\n-        ps[2] = Point.createPoint(5, 6);\n-        ps[3] = Point.createPoint(7, 8);\n+        ps[0] = new Point(1, 2);\n+        ps[1] = new Point(3, 4);\n+        ps[2] = new Point(5, 6);\n+        ps[3] = new Point(7, 8);\n@@ -160,1 +160,1 @@\n-            ps[ps.length] = Point.createPoint(0, 0);\n+            ps[ps.length] = new Point(0, 0);\n@@ -184,1 +184,1 @@\n-        values[1] = Long8Inline.create(1, 2, 3, 4, 5, 6, 7, 8);\n+        values[1] = new Long8Inline(1, 2, 3, 4, 5, 6, 7, 8);\n@@ -197,1 +197,1 @@\n-        people[0] = Person.create(1, \"First\", \"Last\");\n+        people[0] = new Person(1, \"First\", \"Last\");\n@@ -202,2 +202,2 @@\n-        people[1] = Person.create(2, \"Jane\", \"Wayne\");\n-        people[2] = Person.create(3, \"Bob\", \"Dobalina\");\n+        people[1] = new Person(2, \"Jane\", \"Wayne\");\n+        people[2] = new Person(3, \"Bob\", \"Dobalina\");\n@@ -239,1 +239,1 @@\n-        barray[0][1] = Point.createPoint(1, 2);\n+        barray[0][1] = new Point(1, 2);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDallowWithFieldOperator -XDallowFlattenabilityModifiers InlineTypeCreation.java Point.java Long8Inline.java Person.java\n+ * @compile -XDallowFlattenabilityModifiers InlineTypeCreation.java Point.java Long8Inline.java Person.java\n@@ -48,1 +48,1 @@\n-        Point p = Point.createPoint(1, 2);\n+        Point p = new Point(1, 2);\n@@ -62,1 +62,1 @@\n-        Long8Inline long8Inline = Long8Inline.create(1, 2, 3, 4, 5, 6, 7, 8);\n+        Long8Inline long8Inline = new Long8Inline(1, 2, 3, 4, 5, 6, 7, 8);\n@@ -69,1 +69,1 @@\n-        Person person = Person.create(1, \"John\", \"Smith\");\n+        Person person = new Person(1, \"John\", \"Smith\");\n@@ -77,1 +77,1 @@\n-        static final StaticSelf.ref DEFAULT = create(0);\n+        static final StaticSelf.ref DEFAULT = new StaticSelf(0);\n@@ -80,1 +80,1 @@\n-        private StaticSelf() { f1 = 0; }\n+        public StaticSelf(int f1) { this.f1 = f1; }\n@@ -83,6 +83,0 @@\n-        static StaticSelf create(int f1) {\n-            StaticSelf s = StaticSelf.default;\n-            s = __WithField(s.f1, f1);\n-            return s;\n-        }\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeCreation.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @compile -XDallowWithFieldOperator InlineTypeDensity.java\n+ * @compile InlineTypeDensity.java\n@@ -81,4 +81,4 @@\n-        LocalDateValue() {\n-            year  = 0;\n-            month = 0;\n-            day   = 0;\n+        public LocalDateValue(int year, short month, short day) {\n+            this.year = year;\n+            this.month = month;\n+            this.day = day;\n@@ -91,7 +91,0 @@\n-        public static LocalDateValue create(int year, short month, short day) {\n-            LocalDateValue localDate = LocalDateValue.default;\n-            localDate = __WithField(localDate.year, year);\n-            localDate = __WithField(localDate.month, month);\n-            localDate = __WithField(localDate.day, day);\n-            return localDate;\n-        }\n@@ -106,5 +99,5 @@\n-        LocalTimeValue() {\n-            hour   = 0;\n-            minute = 0;\n-            second = 0;\n-            nano   = 0;\n+        public LocalTimeValue(byte hour, byte minute, byte second, int nano) {\n+            this.hour = hour;\n+            this.minute = minute;\n+            this.second = second;\n+            this.nano = nano;\n@@ -118,8 +111,0 @@\n-        public static LocalTimeValue create(byte hour, byte minute, byte second, int nano) {\n-            LocalTimeValue localTime = LocalTimeValue.default;\n-            localTime = __WithField(localTime.hour, hour);\n-            localTime = __WithField(localTime.minute, minute);\n-            localTime = __WithField(localTime.second, second);\n-            localTime = __WithField(localTime.nano, nano);\n-            return localTime;\n-        }\n@@ -132,4 +117,3 @@\n-        LocalDateTimeValue() {\n-            \/\/ Well this is a little weird...\n-            date = LocalDateValue.create(0, (short)0, (short)0);\n-            time = LocalTimeValue.create((byte)0, (byte)0, (byte)0, 0);\n+        public LocalDateTimeValue(LocalDateValue date, LocalTimeValue time) {\n+            this.date = date;\n+            this.time = time;\n@@ -147,6 +131,0 @@\n-        public static LocalDateTimeValue create(LocalDateValue date, LocalTimeValue time) {\n-            LocalDateTimeValue localDateTime = LocalDateTimeValue.default;\n-            localDateTime = __WithField(localDateTime.date, date);\n-            localDateTime = __WithField(localDateTime.time, time);\n-            return localDateTime;\n-        }\n@@ -319,1 +297,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeDensity.java","additions":13,"deletions":36,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDallowWithFieldOperator Point.java InlineTypeGetField.java\n+ * @compile Point.java InlineTypeGetField.java\n@@ -42,2 +42,2 @@\n-        staticPoint0 = Point.createPoint(358, 406);\n-        staticPoint1 = Point.createPoint(101, 2653);\n+        staticPoint0 = new Point(358, 406);\n+        staticPoint1 = new Point(101, 2653);\n@@ -47,2 +47,2 @@\n-        instancePoint0 = Point.createPoint(1890, 1918);\n-        instancePoint1 = Point.createPoint(91, 102);\n+        instancePoint0 = new Point(1890, 1918);\n+        instancePoint1 = new Point(91, 102);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeGetField.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * @compile -XDallowWithFieldOperator TestValue1.java TestValue2.java TestValue3.java TestValue4.java InlineTypesTest.java\n+ * @compile TestValue1.java TestValue2.java TestValue3.java TestValue4.java InlineTypesTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @compile -XDallowWithFieldOperator InlineWithJni.java\n@@ -42,1 +41,4 @@\n-    private InlineWithJni() { x = 0; }\n+\n+    public InlineWithJni(int x) {\n+        this.x = x;\n+    }\n@@ -47,6 +49,0 @@\n-    public static InlineWithJni createInlineWithJni(int x) {\n-        InlineWithJni v = InlineWithJni.default;\n-        v = __WithField(v.x, x);\n-        return v;\n-    }\n-\n@@ -56,1 +52,1 @@\n-            createInlineWithJni(0).doJniMonitorEnter();\n+            new InlineWithJni(0).doJniMonitorEnter();\n@@ -65,1 +61,1 @@\n-            createInlineWithJni(0).doJniMonitorExit();\n+            new InlineWithJni(0).doJniMonitorExit();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineWithJni.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-public primitive final class JumboInline {\n+public primitive class JumboInline {\n@@ -47,50 +47,21 @@\n-    private JumboInline() {\n-        l0 = 0;\n-        l1 = 0;\n-        l2 = 0;\n-        l3 = 0;\n-        l4 = 0;\n-        l5 = 0;\n-        l6 = 0;\n-        l7 = 0;\n-        l8 = 0;\n-        l9 = 0;\n-        l10 = 0;\n-        l11 = 0;\n-        l12 = 0;\n-        l13 = 0;\n-        l14 = 0;\n-        l15 = 0;\n-        l16 = 0;\n-        l17 = 0;\n-        l18 = 0;\n-        l19 = 0;\n-    }\n-\n-    public static JumboInline createJumboInline() {\n-        JumboInline j = JumboInline.default;\n-        return j;\n-    }\n-\n-    public JumboInline update(long l0, long l1) {\n-        JumboInline j = __WithField(this.l0, l0);\n-        j = __WithField(j.l1, l1);\n-        j = __WithField(j.l2, l0 + l1);\n-        j = __WithField(j.l3, l1 + l2);\n-        j = __WithField(j.l4, l2 + l3);\n-        j = __WithField(j.l5, l3 + l4);\n-        j = __WithField(j.l6, l4 + l5);\n-        j = __WithField(j.l7, l5 + l6);\n-        j = __WithField(j.l8, l6 + l7);\n-        j = __WithField(j.l9, l7 + l8);\n-        j = __WithField(j.l10, l8 + l9);\n-        j = __WithField(j.l11, l9 + l10);\n-        j = __WithField(j.l12, l10 + l11);\n-        j = __WithField(j.l13, l11 + l12);\n-        j = __WithField(j.l14, l12 + l13);\n-        j = __WithField(j.l15, l13 + l14);\n-        j = __WithField(j.l16, l14 + l15);\n-        j = __WithField(j.l17, l15 + l16);\n-        j = __WithField(j.l18, l16 + l17);\n-        j = __WithField(j.l19, l17 + l18);\n-        return j;\n+    public JumboInline(long l0Val, long l1Val) {\n+        l0 = l0Val;\n+        l1 = l1Val;\n+        l2 = l0+l1;\n+        l3 = l1+l2;\n+        l4 = l2+l3;\n+        l5 = l3+l4;\n+        l6 = l4+l5;\n+        l7 = l5+l6;\n+        l8 = l6+l7;\n+        l9 = l7+l8;\n+        l10 = l8+l9;\n+        l11 = l9+l10;\n+        l12 = l10+l11;\n+        l13 = l11+l12;\n+        l14 = l12+l13;\n+        l15 = l13+l14;\n+        l16 = l14+l15;\n+        l17 = l15+l16;\n+        l18 = l16+l17;\n+        l19 = l17+l18;\n@@ -113,4 +84,3 @@\n-                    && l8 == j.l8 && l9 == j.l9 && l10 == j.l10 && l7 == j.l10\n-                    && l11 == j.l11 && l12 == j.l12 && l13 == j.l13 && l4 == j.l14\n-                    && l15 == j.l15 && l16 == j.l16 && l17 == j.l17 && l18 == j.l18\n-                    && l19 == j.l19);\n+                    && l8 == j.l8 && l9 == j.l9 && l10 == j.l10 && l11 == j.l11\n+                    && l12 == j.l12 && l13 == j.l13 && l14 == j.l14 && l15 == j.l15\n+                    && l16 == j.l16 && l17 == j.l17 && l18 == j.l18 && l19 == j.l19);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/JumboInline.java","additions":25,"deletions":55,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    private Long8Inline(long l1, long l2, long l3, long l4, long l5, long l6, long l7, long l8) {\n+    public Long8Inline(long l1, long l2, long l3, long l4, long l5, long l6, long l7, long l8) {\n@@ -59,11 +59,0 @@\n-    public static Long8Inline create(long long1,\n-            long long2,\n-            long long3,\n-            long long4,\n-            long long5,\n-            long long6,\n-            long long7,\n-            long long8) {\n-        return new Long8Inline(long1, long2, long3, long4, long5, long6, long7, long8);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Long8Inline.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @compile -XDallowWithFieldOperator ObjectMethods.java\n+ * @compile ObjectMethods.java\n@@ -47,2 +47,2 @@\n-        MyInt val = MyInt.create(7);\n-        MyInt sameVal = MyInt.create(7);\n+        MyInt val = new MyInt(7);\n+        MyInt sameVal = new MyInt(7);\n@@ -217,6 +217,1 @@\n-        private MyInt() { value = 0; }\n-        public static MyInt create(int v) {\n-            MyInt mi = MyInt.default;\n-            mi = __WithField(mi.value, v);\n-            return mi;\n-        }\n+        public MyInt(int v) { value = v; }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ObjectMethods.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    private Person(int id, String firstName, String lastName) {\n+    public Person(int id, String firstName, String lastName) {\n@@ -45,4 +45,0 @@\n-\n-    static Person create(int id, String firstName, String lastName) {\n-        return new Person(id, firstName, lastName);\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Person.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    private Point(int x, int y) {\n+    public Point(int x, int y) {\n@@ -53,3 +53,0 @@\n-    public static Point createPoint(int x, int y) {\n-        return new Point(x, y);\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Point.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile -XDallowWithFieldOperator Point.java JumboInline.java QuickeningTest.java\n+ * @compile Point.java JumboInline.java QuickeningTest.java\n@@ -65,7 +65,3 @@\n-            nfp = Point.createPoint(0, 0);\n-            fp = Point.createPoint(0, 0);\n-            fj = JumboInline.createJumboInline();\n-        }\n-\n-        public static Value create() {\n-            return Value.default;\n+            nfp = Point.default;\n+            fp = Point.default;\n+            fj = JumboInline.default;\n@@ -95,1 +91,1 @@\n-        Value v = Value.create();\n+        Value v = Value.default;\n@@ -104,2 +100,2 @@\n-        Point p1 = Point.createPoint(16, 47);\n-        Point p2 = Point.createPoint(32, 64);\n+        Point p1 = new Point(16, 47);\n+        Point p2 = new Point(32, 64);\n@@ -107,2 +103,2 @@\n-        JumboInline j1 = JumboInline.createJumboInline().update(4, 5);\n-        JumboInline j2 = JumboInline.createJumboInline().update(7, 9);\n+        JumboInline j1 = new JumboInline(4, 5);\n+        JumboInline j2 = new JumboInline(7, 9);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/QuickeningTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @compile -XDallowWithFieldOperator Test8186715.java\n@@ -49,3 +48,3 @@\n-    private MyValueType() {\n-        i = 0;\n-        j = 0;\n+    private MyValueType(int i, int j) {\n+        this.i = i;\n+        this.j = j;\n@@ -60,2 +59,1 @@\n-            v1 = __WithField(v1.i, 3);\n-            v1 = __WithField(v1.j, 4);\n+            v1 = new MyValueType(3, 4);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Test8186715.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @compile -XDallowWithFieldOperator TestFieldNullability.java\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @run driver org.openjdk.asmtools.JtregDriver jasm -strict TestFieldNullabilityClasses.jasm\n@@ -55,42 +56,1 @@\n-    static primitive class TestInlineType {\n-        final MyValue.ref nullableField;\n-        final MyValue nullfreeField;        \/\/ flattened\n-        final MyValue.ref nullField;           \/\/ src of null\n-        final MyBigValue nullfreeBigField;  \/\/ not flattened\n-        final MyBigValue.ref nullBigField;     \/\/ src of null\n-\n-        public void test() {\n-            Asserts.assertNull(nullField, \"Invalid non null value for uninitialized non flattenable field\");\n-            Asserts.assertNull(nullBigField, \"Invalid non null value for uninitialized non flattenable field\");\n-            boolean NPE = false;\n-            try {\n-                TestInlineType tv = __WithField(this.nullableField, nullField);\n-            } catch(NullPointerException e) {\n-                NPE = true;\n-            }\n-            Asserts.assertFalse(NPE, \"Invalid NPE when assigning null to a non flattenable field\");\n-            try {\n-                TestInlineType tv = __WithField(this.nullfreeField, (MyValue) nullField);\n-            } catch(NullPointerException e) {\n-                NPE = true;\n-            }\n-            Asserts.assertTrue(NPE, \"Missing NPE when assigning null to a flattened field\");\n-            try {\n-                TestInlineType tv = __WithField(this.nullfreeBigField, (MyBigValue) nullBigField);\n-            } catch(NullPointerException e) {\n-                NPE = true;\n-            }\n-            Asserts.assertTrue(NPE, \"Missing NPE when assigning null to a flattenable field\");\n-        }\n-\n-        public TestInlineType() {\n-            nullableField = MyValue.default;\n-            nullfreeField = MyValue.default;\n-            nullField = MyValue.default;           \/\/ fake assignment\n-            nullfreeBigField = MyBigValue.default;\n-            nullBigField = MyBigValue.default;     \/\/ fake assignment\n-\n-        }\n-    }\n-\n-    static class TestClass {\n+    static class TestIdentityClass {\n@@ -102,0 +62,1 @@\n+    }\n@@ -103,22 +64,46 @@\n-        public void test() {\n-            Asserts.assertNull(nullField, \"Invalid non null value for uninitialized non flattenable field\");\n-            Asserts.assertNull(nullBigField, \"Invalid non null value for uninitialized non flattenable field\");\n-            boolean NPE = false;\n-            try {\n-                nullableField = nullField;\n-            } catch(NullPointerException e) {\n-                NPE = true;\n-            }\n-            Asserts.assertFalse(NPE, \"Invalid NPE when assigning null to a non flattenable field\");\n-            try {\n-                this.nullfreeField = (MyValue) nullField;\n-            } catch(NullPointerException e) {\n-                NPE = true;\n-            }\n-            Asserts.assertTrue(NPE, \"Missing NPE when assigning null to a flattened field\");\n-            try {\n-                this.nullfreeBigField = (MyBigValue) nullBigField;\n-            } catch(NullPointerException e) {\n-                NPE = true;\n-            }\n-            Asserts.assertTrue(NPE, \"Missing NPE when assigning null to a flattenable field\");\n+    static void testPrimitiveClass() {\n+        TestPrimitiveClass that = TestPrimitiveClass.default;\n+        Asserts.assertNull(that.nullField, \"Invalid non null value for uninitialized non flattenable field\");\n+        Asserts.assertNull(that.nullBigField, \"Invalid non null value for uninitialized non flattenable field\");\n+        boolean NPE = false;\n+        try {\n+            TestPrimitiveClass tv = that.withNullableField(that.nullField);\n+        } catch(NullPointerException e) {\n+            NPE = true;\n+        }\n+        Asserts.assertFalse(NPE, \"Invalid NPE when assigning null to a non flattenable field\");\n+        try {\n+            TestPrimitiveClass tv = that.withNullfreeField((MyValue) that.nullField);\n+        } catch(NullPointerException e) {\n+            NPE = true;\n+        }\n+        Asserts.assertTrue(NPE, \"Missing NPE when assigning null to a flattened field\");\n+        try {\n+            TestPrimitiveClass tv = that.withNullfreeBigField((MyBigValue) that.nullBigField);\n+        } catch(NullPointerException e) {\n+            NPE = true;\n+        }\n+        Asserts.assertTrue(NPE, \"Missing NPE when assigning null to a flattenable field\");\n+    }\n+\n+    static void testIdentityClass() {\n+        TestIdentityClass that = new TestIdentityClass();\n+        Asserts.assertNull(that.nullField, \"Invalid non null value for uninitialized non flattenable field\");\n+        Asserts.assertNull(that.nullBigField, \"Invalid non null value for uninitialized non flattenable field\");\n+        boolean NPE = false;\n+        try {\n+            that.nullableField = that.nullField;\n+        } catch(NullPointerException e) {\n+            NPE = true;\n+        }\n+        Asserts.assertFalse(NPE, \"Invalid NPE when assigning null to a non flattenable field\");\n+        try {\n+            that.nullfreeField = (MyValue) that.nullField;\n+        } catch(NullPointerException e) {\n+            NPE = true;\n+        }\n+        Asserts.assertTrue(NPE, \"Missing NPE when assigning null to a flattened field\");\n+        try {\n+            that.nullfreeBigField = (MyBigValue) that.nullBigField;\n+        } catch(NullPointerException e) {\n+            NPE = true;\n@@ -126,0 +111,1 @@\n+        Asserts.assertTrue(NPE, \"Missing NPE when assigning null to a flattenable field\");\n@@ -129,5 +115,2 @@\n-        TestClass tc = new TestClass();\n-        tc.test();\n-        TestInlineType tv =\n-            TestInlineType.default;\n-        tv.test();\n+        testIdentityClass();\n+        testPrimitiveClass();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullability.java","additions":53,"deletions":70,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public final primitive value class runtime\/valhalla\/inlinetypes\/TestPrimitiveClass\n+    version 63:0\n+{\n+    final Field nullableField:   \"Lruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyValue;\";\n+    final Field nullfreeField:   \"Qruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyValue;\"; \/\/ flattened\n+    final Field nullField:       \"Lruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyValue;\"; \/\/ src of null\n+    final Field nullfreeBigField:\"Qruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyBigValue;\"; \/\/ not flattened\n+    final Field nullBigField:    \"Lruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyBigValue;\"; \/\/ src of null\n+\n+    public Method withNullableField:\"(Lruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyValue;)Lruntime\/valhalla\/inlinetypes\/TestPrimitiveClass;\"\n+        stack 2\n+    {\n+        aload_0;\n+        aload_1;\n+        withfield nullableField:\"Lruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyValue;\";\n+        areturn;\n+    }\n+\n+    public Method withNullfreeField:\"(Qruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyValue;)Lruntime\/valhalla\/inlinetypes\/TestPrimitiveClass;\"\n+        stack 2\n+    {\n+        aload_0;\n+        aload_1;\n+        withfield nullfreeField:\"Qruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyValue;\";\n+        areturn;\n+    }\n+\n+    public Method withNullfreeBigField:\"(Qruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyBigValue;)Lruntime\/valhalla\/inlinetypes\/TestPrimitiveClass;\"\n+        stack 2\n+    {\n+        aload_0;\n+        aload_1;\n+        withfield nullfreeBigField:\"Qruntime\/valhalla\/inlinetypes\/TestFieldNullability$MyBigValue;\";\n+        areturn;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullabilityClasses.jasm","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -31,2 +31,2 @@\n- * @compile TestFieldTypeMismatchHelper.jasm\n- * @compile TestFieldTypeMismatch.java\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @run driver org.openjdk.asmtools.JtregDriver jasm -strict TestFieldTypeMismatchClasses.jasm\n@@ -36,4 +36,0 @@\n-final class MyValue {\n-    int foo = 42;\n-}\n-\n@@ -45,1 +41,1 @@\n-          TestFieldTypeMismatchHelper t = new TestFieldTypeMismatchHelper();\n+          TestFieldTypeMismatchClass t = new TestFieldTypeMismatchClass();\n@@ -49,1 +45,1 @@\n-                \"Class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchHelper expects class runtime.valhalla.inlinetypes.MyValue to be an inline type, but it is not\");\n+                \"Class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass expects class runtime.valhalla.inlinetypes.MyValue to be an inline type, but it is not\");\n@@ -54,1 +50,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatch.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass version 63:0 {\n+\n+    Field field:\"Qruntime\/valhalla\/inlinetypes\/MyValue;\";\n+\n+    public Method \"<init>\":\"()V\"\n+      stack 1 locals 1\n+    {\n+        aload_0;\n+        invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+\n+    public Method test:\"()V\" stack 2 locals 1 {\n+        aload_0;\n+        aconst_null;\n+        putfield Field field:\"Qruntime\/valhalla\/inlinetypes\/MyValue;\";\n+        return;\n+    }\n+}\n+\n+public final class runtime\/valhalla\/inlinetypes\/MyValue version 63:0 {\n+    Field foo:I = 42;\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClasses.jasm","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchHelper version 63:0 {\n-\n-    Field field:\"Qruntime\/valhalla\/inlinetypes\/MyValue;\";\n-\n-    public Method \"<init>\":\"()V\"\n-      stack 1 locals 1\n-    {\n-        aload_0;\n-        invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n-        return;\n-    }\n-\n-    public Method test:\"()V\" stack 2 locals 1 {\n-        aload_0;\n-        aconst_null;\n-        putfield Field field:\"Qruntime\/valhalla\/inlinetypes\/MyValue;\";\n-        return;\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchHelper.jasm","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile -XDallowWithFieldOperator -XDallowFlattenabilityModifiers Point.java TestInheritedInlineTypeFields.java\n+ * @compile -XDallowFlattenabilityModifiers Point.java TestInheritedInlineTypeFields.java\n@@ -76,1 +76,1 @@\n-        b.p = Point.createPoint(1,2);\n+        b.p = new Point(1,2);\n@@ -85,2 +85,2 @@\n-        g.p1 = Point.createPoint(1,2);\n-        g.p2 = Point.createPoint(3,4);\n+        g.p1 = new Point(1,2);\n+        g.p2 = new Point(3,4);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestInheritedInlineTypeFields.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public primitive final class TestValue1 {\n+public primitive class TestValue1 {\n@@ -38,1 +38,1 @@\n-    private TestValue1() {\n+    public TestValue1() {\n@@ -43,12 +43,3 @@\n-    public static TestValue1 create(int i) {\n-        TestValue1 v = TestValue1.default;\n-        v = __WithField(v.i, i);\n-        v = __WithField(v.name, Integer.valueOf(i).toString());\n-        return v;\n-    }\n-\n-    public static TestValue1 create() {\n-        TestValue1 v = TestValue1.default;\n-        v = __WithField(v.i, (int)System.nanoTime());\n-        v = __WithField(v.name, Integer.valueOf(v.i).toString());\n-        return v;\n+    public TestValue1(int i) {\n+        this.i = i;\n+        name = Integer.valueOf(i).toString();\n@@ -58,1 +49,1 @@\n-        return create();\n+        return new TestValue1();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestValue1.java","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public primitive final class TestValue2 {\n+public primitive class TestValue2 {\n@@ -38,1 +38,1 @@\n-    private TestValue2() {\n+    public TestValue2() {\n@@ -44,14 +44,4 @@\n-    public static TestValue2 create(long l) {\n-        TestValue2 v = TestValue2.default;\n-        v = __WithField(v.l, l);\n-        v = __WithField(v.s, Long.valueOf(l).toString());\n-        v = __WithField(v.d, Double.parseDouble(v.s));\n-        return v;\n-    }\n-\n-    public static TestValue2 create() {\n-        TestValue2 v = TestValue2.default;\n-        v = __WithField(v.l, System.nanoTime());\n-        v = __WithField(v.s, Long.valueOf(v.l).toString());\n-        v = __WithField(v.d, Double.parseDouble(v.s));\n-        return v;\n+    public TestValue2(long l) {\n+        this.l = l;\n+        s = Long.valueOf(l).toString();\n+        d = Double.parseDouble(s);\n@@ -61,1 +51,1 @@\n-        return create();\n+        return new TestValue2();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestValue2.java","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-public primitive final class TestValue3 {\n+public primitive class TestValue3 {\n@@ -37,1 +37,1 @@\n-    private TestValue3() {\n+    public TestValue3() {\n@@ -41,10 +41,2 @@\n-    public static TestValue3 create(byte b) {\n-        TestValue3 v = TestValue3.default;\n-        v = __WithField(v.b, b);\n-        return v;\n-    }\n-\n-    public static TestValue3 create() {\n-        TestValue3 v = TestValue3.default;\n-        v = __WithField(v.b, 123);\n-        return v;\n+    public TestValue3(byte b) {\n+        this.b = b;\n@@ -54,1 +46,1 @@\n-        return create();\n+        return new TestValue3();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestValue3.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-public primitive final class TestValue4 {\n+public primitive class TestValue4 {\n@@ -47,10 +47,2 @@\n-    private TestValue4() {\n-        i = (int)System.nanoTime();\n-        val = Integer.valueOf(i).toString();\n-        l = ((long)i) << Integer.SIZE | i;\n-        s1 = (short)(i & ~Short.MIN_VALUE);\n-        s2 = (short)(i >> Short.SIZE);\n-        b1 = (byte)(i & ~Byte.MIN_VALUE);\n-        b2 = (byte)((i >> Byte.SIZE) & ~Byte.MIN_VALUE);\n-        b3 = (byte)((i >> (2 * Byte.SIZE)) & ~Byte.MIN_VALUE);\n-        b4 = (byte)((i >> (3 * Byte.SIZE)) & ~Byte.MIN_VALUE);\n+    public TestValue4() {\n+        this((int) System.nanoTime());\n@@ -59,4 +51,3 @@\n-    public static TestValue4 create(int i) {\n-        TestValue4 v = TestValue4.default;\n-        v = __WithField(v.i, i);\n-        v = __WithField(v.val, Integer.valueOf(i).toString());\n+    public TestValue4(int i) {\n+        this.i = i;\n+        val = Integer.valueOf(i).toString();\n@@ -66,12 +57,7 @@\n-        v = __WithField(v.l, bf.getLong(0));\n-        v = __WithField(v.s1, bf.getShort(2));\n-        v = __WithField(v.s2, bf.getShort(0));\n-        v = __WithField(v.b1, bf.get(3));\n-        v = __WithField(v.b2, bf.get(2));\n-        v = __WithField(v.b3, bf.get(1));\n-        v = __WithField(v.b4, bf.get(0));\n-        return v;\n-    }\n-\n-    public static TestValue4 create() {\n-        return create((int)System.nanoTime());\n+        l = bf.getLong(0);\n+        s1 = bf.getShort(2);\n+        s2 = bf.getShort(0);\n+        b1 = bf.get(3);\n+        b2 = bf.get(2);\n+        b3 = bf.get(1);\n+        b4 = bf.get(0);\n@@ -81,1 +67,1 @@\n-        return create();\n+        return new TestValue4();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestValue4.java","additions":14,"deletions":28,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDallowWithFieldOperator -XDallowFlattenabilityModifiers Point.java JumboInline.java UninitializedInlineFieldsTest.java\n+ * @compile -XDallowFlattenabilityModifiers Point.java JumboInline.java UninitializedInlineFieldsTest.java\n@@ -55,1 +55,1 @@\n-        UninitializedInlineFieldsTest.staticPoint = Point.createPoint(456, 678);\n+        UninitializedInlineFieldsTest.staticPoint = new Point(456, 678);\n@@ -59,1 +59,1 @@\n-        test.instancePoint = Point.createPoint(123, 345);\n+        test.instancePoint = new Point(123, 345);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UninitializedInlineFieldsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDallowWithFieldOperator Point.java UnsafeTest.java\n+ * @compile Point.java UnsafeTest.java\n@@ -78,1 +78,1 @@\n-        Value1 v1 = new Value1(Point.createPoint(10,10), Point.createPoint(20,20), Point.createPoint(30,30));\n+        Value1 v1 = new Value1(new Point(10,10), new Point(20,20), new Point(30,30));\n@@ -110,1 +110,1 @@\n-                       Point.class, Point.createPoint(100, 100));\n+                       Point.class, new Point(100, 100));\n@@ -115,1 +115,1 @@\n-        assertEquals(v.v.v.point, Point.createPoint(100, 100));\n+        assertEquals(v.v.v.point, new Point(100, 100));\n@@ -120,1 +120,1 @@\n-        Value1 nv1 = new Value1(Point.createPoint(70,70), Point.createPoint(80,80), Point.createPoint(90,90));\n+        Value1 nv1 = new Value1(new Point(70,70), new Point(80,80), new Point(90,90));\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UnsafeTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n- * @compile -XDallowWithFieldOperator Point.java\n- * @compile -XDallowWithFieldOperator -XDallowFlattenabilityModifiers VDefaultTest.java\n+ * @compile Point.java\n+ * @compile -XDallowFlattenabilityModifiers VDefaultTest.java\n@@ -99,1 +99,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VDefaultTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,231 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package runtime.valhalla.inlinetypes;\n-\n-import jdk.test.lib.Asserts;\n-\n-\/*\n- * @test VWithFieldTest\n- * @summary vwithfield bytecode test\n- * @library \/test\/lib\n- * @compile -XDallowWithFieldOperator Point.java\n- * @compile -XDallowWithFieldOperator VWithFieldTest.java\n- * @run main runtime.valhalla.inlinetypes.VWithFieldTest\n- *\/\n-\n-public class VWithFieldTest {\n-\n-    static primitive final class Point {\n-        final private int x;\n-        final private int y;\n-\n-        static Point make(int x, int y) {\n-            Point p = Point.default;\n-            Asserts.assertEquals(p.x, 0, \"invalid x default value\");\n-            Asserts.assertEquals(p.y, 0, \"invalid y default value\");\n-            p = __WithField(p.x, x);\n-            Asserts.assertEquals(p.x, x, \"invalid x value\");\n-            Asserts.assertEquals(p.y, 0, \"invalid y value\");\n-            p = __WithField(p.y, y);\n-            Asserts.assertEquals(p.x, x, \"invalid x value\");\n-            Asserts.assertEquals(p.y, y, \"invalid y value\");\n-            return p;\n-        }\n-\n-        Point () {\n-            x = 0;\n-            y = 0;\n-        }\n-\n-        Point (int x, int y) {\n-            this.x = x;\n-            this.y = y;\n-        }\n-\n-        public int getX() {\n-            return x;\n-        }\n-\n-        static Point setX(Point p, int x) {\n-            p = __WithField(p.x, x);\n-            return p;\n-        }\n-\n-        public int getY() {\n-            return y;\n-        }\n-\n-        static Point setY(Point p, int y) {\n-            p = __WithField(p.y, y);\n-            return p;\n-        }\n-    }\n-\n-    static primitive class TestValue {\n-        boolean z = false;\n-        static boolean[] z_values = new boolean[] { false, true, false};\n-        byte b = 0;\n-        static byte[] b_values = new byte[] { 0, 125, -111};\n-        short s = 0;\n-        static short[] s_values = new short[] { 0, 32654, -31836};\n-        char c = 0;\n-        static char[] c_values = new char[] { 0, 1, 65528};\n-        int i = 0;\n-        static int[] i_values = new int[] { 0, 2137523847, -2037453241};\n-        long l = 0;\n-        static long[] l_values = new long[] { 0, 9123456036854775807L, -9112272036854775507L};\n-        float f = 0.0f;\n-        static float[] f_values = new float[] { 0.0f, 1.52758043e7f, -7.93757e-5f};\n-        double d = 0.0d;\n-        static double[] d_values = new double[] { 0.0d, 3.304786e9d, -0.7548345e-15d};\n-        Object o = null;\n-        static Object[] o_values = new Object[] { null, \"Hello\", \"Duke\"};\n-        Point p = new Point(0, 0);\n-        static Point[] p_values = new Point[] { new Point(0, 0), new Point(-1, 1), new Point(1, -1)};\n-        int[] map = new int[10];\n-\n-        TestValue set_z(int i) {\n-            TestValue t = __WithField(this.z, z_values[i]);\n-            t.map[0] = i;\n-            return t;\n-        }\n-\n-        TestValue set_b(int i) {\n-            TestValue t = __WithField(this.b, b_values[i]);\n-            t.map[1] = i;\n-            return t;\n-        }\n-\n-        TestValue set_s(int i) {\n-            TestValue t = __WithField(this.s, s_values[i]);\n-            t.map[2] = i;\n-            return t;\n-        }\n-\n-        TestValue set_c(int i) {\n-            TestValue t = __WithField(this.c, c_values[i]);\n-            t.map[3] = i;\n-            return t;\n-        }\n-\n-        TestValue set_i(int i) {\n-            TestValue t = __WithField(this.i, i_values[i]);\n-            t.map[4] = i;\n-            return t;\n-        }\n-\n-        TestValue set_l(int i) {\n-            TestValue t = __WithField(this.l, l_values[i]);\n-            t.map[5] = i;\n-            return t;\n-        }\n-\n-        TestValue set_f(int i) {\n-            TestValue t = __WithField(this.f, f_values[i]);\n-            t.map[6] = i;\n-            return t;\n-        }\n-\n-        TestValue set_d(int i) {\n-            TestValue t = __WithField(this.d, d_values[i]);\n-            t.map[7] = i;\n-            return t;\n-        }\n-\n-        TestValue set_o(int i) {\n-            TestValue t = __WithField(this.o, o_values[i]);\n-            t.map[8] = i;\n-            return t;\n-        }\n-\n-        TestValue set_p(int i) {\n-            TestValue t = __WithField(this.p, p_values[i]);\n-            t.map[9] = i;\n-            return t;\n-        }\n-\n-        void verify() {\n-            Asserts.assertEquals(z, z_values[map[0]]);\n-            Asserts.assertEquals(b, b_values[map[1]]);\n-            Asserts.assertEquals(s, s_values[map[2]]);\n-            Asserts.assertEquals(c, c_values[map[3]]);\n-            Asserts.assertEquals(i, i_values[map[4]]);\n-            Asserts.assertEquals(l, l_values[map[5]]);\n-            Asserts.assertEquals(f, f_values[map[6]]);\n-            Asserts.assertEquals(d, d_values[map[7]]);\n-            Asserts.assertEquals(o, o_values[map[8]]);\n-            Asserts.assertEquals(p, p_values[map[9]]);\n-        }\n-\n-        static void test() {\n-            TestValue value = new TestValue();\n-            value.verify();\n-            for (int i = 2; i >= 0; i--) {\n-                value = value.set_z(i);\n-                value.verify();\n-                value = value.set_b(i);\n-                value.verify();\n-                value = value.set_s(i);\n-                value.verify();\n-                value = value.set_c(i);\n-                value.verify();\n-                value = value.set_i(i);\n-                value.verify();\n-                value = value.set_l(i);\n-                value.verify();\n-                value = value.set_f(i);\n-                value.verify();\n-                value = value.set_d(i);\n-                value.verify();\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        creationTest();\n-        creationTest();\n-        witherTest();\n-        witherTest();\n-        TestValue.test();\n-    }\n-\n-    static void creationTest() {\n-        Point p = Point.make(10,20);\n-        Asserts.assertEquals(p.x, 10, \"invalid x value\");\n-        Asserts.assertEquals(p.y, 20, \"invalid y value\");\n-    }\n-\n-    static void witherTest() {\n-        Point p1 = Point.make(2,12);\n-        Asserts.assertEquals(p1.x, 2, \"invalid x value\");\n-        Asserts.assertEquals(p1.y, 12, \"invalid y value\");\n-        Point p2 = Point.setX(p1,3);\n-        Asserts.assertEquals(p2.x, 3, \"invalid x value\");\n-        Asserts.assertEquals(p2.y, 12, \"invalid y value\");\n-        Point p3 = Point.setY(p2, 14);\n-        Asserts.assertEquals(p3.x, 3, \"invalid x value\");\n-        Asserts.assertEquals(p3.y, 14, \"invalid y value\");\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VWithFieldTest.java","additions":0,"deletions":231,"binary":false,"changes":231,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,4 @@\n+package runtime.valhalla.inlinetypes;\n+\n+import jdk.test.lib.Asserts;\n+\n@@ -28,2 +32,4 @@\n- * @compile -XDallowWithFieldOperator WithFieldAccessorTest.java\n- * @run main\/othervm WithFieldAccessorTest\n+ * @library \/test\/lib\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @run driver org.openjdk.asmtools.JtregDriver jasm -strict WithFieldAccessorTestClasses.jasm\n+ * @run main\/othervm runtime.valhalla.inlinetypes.WithFieldAccessorTest\n@@ -32,2 +38,0 @@\n-\/\/ This test is similar to javac's WithFieldAccessorTest but tests nestmate\n-\/\/ access to public, protected, and private final fields in an inline type.\n@@ -36,9 +40,4 @@\n-    public static final primitive class V {\n-        public final char c;\n-        protected final long l;\n-        private final int i;\n-        V() {\n-            this.c = '0';\n-            this.l = 0;\n-            this.i = 0;\n-        }\n+    public static void main(String... args) {\n+        WithFieldOwner start = WithFieldOwner.default;\n+        WithFieldOwner x = start;\n+        x.checkFields((char) 0, 0, 0, 0);\n@@ -46,7 +45,22 @@\n-        public static V make(char c, long l, int i) {\n-            V v = V.default;\n-            v = __WithField(v.c, c);\n-            v = __WithField(v.l, l);\n-            v = __WithField(v.i, i);\n-            return v;\n-        }\n+        x = WithFieldOwner.withC(start, 'a');\n+        x = WithFieldOwner.withL(x, 1);\n+        x = WithFieldOwner.withD(x, 2);\n+        x = WithFieldOwner.withI(x, 3);\n+        x.checkFields('a', 1, 2, 3);\n+\n+        x = WithFieldNestHost.withC(start, 'b');\n+        x = WithFieldNestHost.withL(x, 4);\n+        x = WithFieldNestHost.withD(x, 5);\n+        x = WithFieldNestHost.withI(x, 6);\n+        x.checkFields('b', 4, 5, 6);\n+\n+        x = WithFieldNestmate.withC(start, 'c');\n+        x = WithFieldNestmate.withL(x, 7);\n+        x = WithFieldNestmate.withD(x, 8);\n+        x = WithFieldNestmate.withI(x, 9);\n+        x.checkFields('c', 7, 8, 9);\n+\n+        catchAccessError(() -> WithFieldSamePackage.withC(start, 'd'));\n+        catchAccessError(() -> WithFieldSamePackage.withL(start, 10));\n+        catchAccessError(() -> WithFieldSamePackage.withD(start, 11));\n+        catchAccessError(() -> WithFieldSamePackage.withI(start, 12));\n@@ -55,12 +69,4 @@\n-    public static void main(String... args) throws Throwable {\n-        V v = __WithField(V.make('a', 5, 10).c, 'b');\n-        if (!v.toString().equals(\"WithFieldAccessorTest$V@\" + Integer.toHexString(v.hashCode()))) {\n-            throw new AssertionError(\"Withfield of 'c' didn't work!\" + v.toString());\n-        }\n-        v = __WithField(V.make('a', 5, 10).l, 25);\n-        if (!v.toString().equals(\"WithFieldAccessorTest$V@\" + Integer.toHexString(v.hashCode()))) {\n-            throw new AssertionError(\"Withfield of 'l' didn't work!\" + v.toString());\n-        }\n-        v = __WithField(V.make('a', 5, 10).i, 20);\n-        if (!v.toString().equals(\"WithFieldAccessorTest$V@\" + Integer.toHexString(v.hashCode()))) {\n-            throw new AssertionError(\"Withfield of 'i' didn't work!\" + v.toString());\n+    static void catchAccessError(Runnable r) {\n+        try {\n+            r.run();\n+            Asserts.fail(\"access violation not caught\");\n@@ -68,0 +74,1 @@\n+        catch (IllegalAccessError e)  { \/* expected *\/ }\n@@ -69,0 +76,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTest.java","additions":41,"deletions":33,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -0,0 +1,233 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldOwner\n+    version 63:0\n+{\n+    NestHost runtime\/valhalla\/inlinetypes\/WithFieldNestHost;\n+\n+    public final Field c:C;\n+    protected final Field l:J;\n+    final Field d:D;\n+    private final Field i:I;\n+\n+    public Method checkFields:\"(CJDI)V\" stack 4 {\n+        aload_0;\n+        getfield c:C;\n+        invokestatic java\/lang\/Character.valueOf:\"(C)Ljava\/lang\/Character;\";\n+        iload_1;\n+        invokestatic java\/lang\/Character.valueOf:\"(C)Ljava\/lang\/Character;\";\n+        ldc \"unexpected c value\";\n+        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n+\n+        aload_0;\n+        getfield l:J;\n+        invokestatic java\/lang\/Long.valueOf:\"(J)Ljava\/lang\/Long;\";\n+        lload_2;\n+        invokestatic java\/lang\/Long.valueOf:\"(J)Ljava\/lang\/Long;\";\n+        ldc \"unexpected l value\";\n+        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n+\n+        aload_0;\n+        getfield d:D;\n+        invokestatic java\/lang\/Double.valueOf:\"(D)Ljava\/lang\/Double;\";\n+        dload 4;\n+        invokestatic java\/lang\/Double.valueOf:\"(D)Ljava\/lang\/Double;\";\n+        ldc \"unexpected d value\";\n+        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n+\n+        aload_0;\n+        getfield i:I;\n+        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+        iload 6;\n+        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+        ldc \"unexpected i value\";\n+        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n+\n+        return;\n+    }\n+\n+    public static Method withC:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;C)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 2\n+    {\n+        aload_0;\n+        iload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.c:C;\n+        areturn;\n+    }\n+\n+    public static Method withL:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;J)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 3\n+    {\n+        aload_0;\n+        lload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.l:J;\n+        areturn;\n+    }\n+\n+    public static Method withD:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;D)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 3\n+    {\n+        aload_0;\n+        dload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.d:D;\n+        areturn;\n+    }\n+\n+    public static Method withI:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;I)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 2\n+    {\n+        aload_0;\n+        iload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.i:I;\n+        areturn;\n+    }\n+\n+}\n+\n+public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldNestmate\n+    version 63:0\n+{\n+    NestHost runtime\/valhalla\/inlinetypes\/WithFieldNestHost;\n+\n+    public static Method withC:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;C)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 2\n+    {\n+        aload_0;\n+        iload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.c:C;\n+        areturn;\n+    }\n+\n+    public static Method withL:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;J)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 3\n+    {\n+        aload_0;\n+        lload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.l:J;\n+        areturn;\n+    }\n+\n+    public static Method withD:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;D)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 3\n+    {\n+        aload_0;\n+        dload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.d:D;\n+        areturn;\n+    }\n+\n+    public static Method withI:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;I)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 2\n+    {\n+        aload_0;\n+        iload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.i:I;\n+        areturn;\n+    }\n+\n+}\n+\n+public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldNestHost\n+    version 63:0\n+{\n+    NestMembers runtime\/valhalla\/inlinetypes\/WithFieldOwner, runtime\/valhalla\/inlinetypes\/WithFieldNestmate;\n+\n+    public static Method withC:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;C)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 2\n+    {\n+        aload_0;\n+        iload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.c:C;\n+        areturn;\n+    }\n+\n+    public static Method withL:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;J)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 3\n+    {\n+        aload_0;\n+        lload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.l:J;\n+        areturn;\n+    }\n+\n+    public static Method withD:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;D)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 3\n+    {\n+        aload_0;\n+        dload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.d:D;\n+        areturn;\n+    }\n+\n+    public static Method withI:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;I)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 2\n+    {\n+        aload_0;\n+        iload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.i:I;\n+        areturn;\n+    }\n+}\n+\n+public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldSamePackage\n+    version 63:0\n+{\n+\n+    public static Method withC:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;C)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 2\n+    {\n+        aload_0;\n+        iload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.c:C;\n+        areturn;\n+    }\n+\n+    public static Method withL:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;J)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 3\n+    {\n+        aload_0;\n+        lload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.l:J;\n+        areturn;\n+    }\n+\n+    public static Method withD:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;D)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 3\n+    {\n+        aload_0;\n+        dload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.d:D;\n+        areturn;\n+    }\n+\n+    public static Method withI:\"(Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;I)Qruntime\/valhalla\/inlinetypes\/WithFieldOwner;\"\n+        stack 2\n+    {\n+        aload_0;\n+        iload_1;\n+        withfield runtime\/valhalla\/inlinetypes\/WithFieldOwner.i:I;\n+        areturn;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTestClasses.jasm","additions":233,"deletions":0,"binary":false,"changes":233,"status":"added"},{"patch":"@@ -1,588 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8210351\n- * @summary Check that IllegalAccessError exceptions get thrown if a class that\n- *          is not a nestmate of an inline type tries to write to the inline type's\n- *          final fields.\n- * @compile WithFieldNoAccessTest.jcod\n- * @run main\/othervm WithFieldNoAccessTest\n- *\/\n-\n-\/\/ This test is based on the below Java program.  The only difference is that\n-\/\/ the nestmate attributes have been removed.  So, inline type WithFieldNoAccessTest\n-\/\/ and WithFieldNoAccessTest$V are no longer nestmates.  This should cause\n-\/\/ IllegalAccessError exceptions when WithFieldNoAccessTest tries to write, using\n-\/\/ withfield, to inline type WithFieldNoAccessTest$V's final fields.\n-\/\/\n-\/\/ public class WithFieldNoAccessTest {\n-\/\/\n-\/\/  public static final inline class V {\n-\/\/      public final char c;\n-\/\/      protected final long l;\n-\/\/      private final int i;\n-\/\/      V() {\n-\/\/          this.c = '0';\n-\/\/          this.l = 0;\n-\/\/          this.i = 0;\n-\/\/      }\n-\/\/\n-\/\/      public static V make(char c, long l, int i) {\n-\/\/          V v = V.default;\n-\/\/          v = __WithField(v.c, c);\n-\/\/          v = __WithField(v.l, l);\n-\/\/          v = __WithField(v.i, i);\n-\/\/          return v;\n-\/\/      }\n-\/\/  }\n-\/\/\n-\/\/  public static void main(String... args) throws Throwable {\n-\/\/      try {\n-\/\/          V v = __WithField(V.make('a', 5, 10).c, 'b');\n-\/\/          throw new RuntimeException(\"Failed to throw IllegalAccessError exception for final public field\");\n-\/\/      } catch (java.lang.IllegalAccessError e) {\n-\/\/          if (!e.toString().contains(\"Update to non-static final field WithFieldNoAccessTest$V.c attempted\")) {\n-\/\/              throw new RuntimeException(\"Unexpected IllegalAccessError: \" + e.toString());\n-\/\/          }\n-\/\/      }\n-\/\/\n-\/\/      try {\n-\/\/          V v = __WithField(V.make('a', 5, 10).l, 25);\n-\/\/          throw new RuntimeException(\"Failed to throw IllegalAccessError exception for final protected field\");\n-\/\/      } catch (java.lang.IllegalAccessError e) {\n-\/\/          if (!e.toString().contains(\"Update to non-static final field WithFieldNoAccessTest$V.l attempted\")) {\n-\/\/              throw new RuntimeException(\"Unexpected IllegalAccessError: \" +  e.toString());\n-\/\/          }\n-\/\/      }\n-\/\/\n-\/\/      try {\n-\/\/          V v = __WithField(V.make('a', 5, 10).i, 20);\n-\/\/          throw new RuntimeException(\"Failed to throw IllegalAccessError exception for final private field\");\n-\/\/      } catch (java.lang.IllegalAccessError e) {\n-\/\/          if (!e.toString().contains(\"WithFieldNoAccessTest tried to access private field WithFieldNoAccessTest$V.i\")) {\n-\/\/              throw new RuntimeException(\"Unexpected IllegalAccessError: \" + e.toString());\n-\/\/          }\n-\/\/      }\n-\/\/  }\n-\/\/ }\n-\/\/\n-\n-class WithFieldNoAccessTest$V {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  63; \/\/ version\n-  [58] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #33; \/\/ #1     at 0x0A\n-    Field #1 #34; \/\/ #2     at 0x0D\n-    Field #1 #35; \/\/ #3     at 0x12\n-    Field #1 #36; \/\/ #4     at 0x17\n-    InvokeDynamic 0s #39; \/\/ #5     at 0x1C\n-    InvokeDynamic 0s #40; \/\/ #6     at 0x21\n-    InvokeDynamic 0s #41; \/\/ #7     at 0x26\n-    class #42; \/\/ #8     at 0x2B\n-    Utf8 \"c\"; \/\/ #9     at 0x2E\n-    Utf8 \"C\"; \/\/ #10     at 0x32\n-    Utf8 \"l\"; \/\/ #11     at 0x36\n-    Utf8 \"J\"; \/\/ #12     at 0x3A\n-    Utf8 \"i\"; \/\/ #13     at 0x3E\n-    Utf8 \"I\"; \/\/ #14     at 0x42\n-    Utf8 \"make\"; \/\/ #15     at 0x46\n-    Utf8 \"V\"; \/\/ #16     at 0x4D\n-    Utf8 \"InnerClasses\"; \/\/ #17     at 0x51\n-    Utf8 \"(CJI)QWithFieldNoAccessTest$V;\"; \/\/ #18     at 0x60\n-    Utf8 \"Code\"; \/\/ #19     at 0x81\n-    Utf8 \"LineNumberTable\"; \/\/ #20     at 0x88\n-    Utf8 \"hashCode\"; \/\/ #21     at 0x9A\n-    Utf8 \"()I\"; \/\/ #22     at 0xA5\n-    Utf8 \"equals\"; \/\/ #23     at 0xAB\n-    Utf8 \"(Ljava\/lang\/Object;)Z\"; \/\/ #24     at 0xB4\n-    Utf8 \"toString\"; \/\/ #25     at 0xCC\n-    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #26     at 0xD7\n-    Utf8 \"<init>\"; \/\/ #27     at 0xEE\n-    Utf8 \"()QWithFieldNoAccessTest$V;\"; \/\/ #28     at 0xF7\n-    Utf8 \"SourceFile\"; \/\/ #29     at 0x0115\n-    Utf8 \"WithFieldNoAccessTest.java\"; \/\/ #30     at 0x0122\n-    Utf8 \"NestHost\"; \/\/ #31     at 0x013F\n-    class #43; \/\/ #32     at 0x014A\n-    Utf8 \"WithFieldNoAccessTest$V\"; \/\/ #33     at 0x014D\n-    NameAndType #9 #10; \/\/ #34     at 0x0167\n-    NameAndType #11 #12; \/\/ #35     at 0x016C\n-    NameAndType #13 #14; \/\/ #36     at 0x0171\n-    Utf8 \"BootstrapMethods\"; \/\/ #37     at 0x0176\n-    MethodHandle 6b #44; \/\/ #38     at 0x0189\n-    NameAndType #21 #45; \/\/ #39     at 0x018D\n-    NameAndType #23 #46; \/\/ #40     at 0x0192\n-    NameAndType #25 #47; \/\/ #41     at 0x0197\n-    Utf8 \"java\/lang\/Object\"; \/\/ #42     at 0x019C\n-    Utf8 \"WithFieldNoAccessTest\"; \/\/ #43     at 0x01AF\n-    Method #48 #49; \/\/ #44     at 0x01C7\n-    Utf8 \"(QWithFieldNoAccessTest$V;)I\"; \/\/ #45     at 0x01CC\n-    Utf8 \"(QWithFieldNoAccessTest$V;Ljava\/lang\/Object;)Z\"; \/\/ #46     at 0x01EB\n-    Utf8 \"(QWithFieldNoAccessTest$V;)Ljava\/lang\/String;\"; \/\/ #47     at 0x021C\n-    class #50; \/\/ #48     at 0x024C\n-    NameAndType #51 #54; \/\/ #49     at 0x024F\n-    Utf8 \"java\/lang\/invoke\/ValueBootstrapMethods\"; \/\/ #50     at 0x0254\n-    Utf8 \"makeBootstrapMethod\"; \/\/ #51     at 0x027D\n-    class #56; \/\/ #52     at 0x0293\n-    Utf8 \"Lookup\"; \/\/ #53     at 0x0296\n-    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/CallSite;\"; \/\/ #54     at 0x029F\n-    class #57; \/\/ #55     at 0x0315\n-    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #56     at 0x0318\n-    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #57     at 0x0340\n-  } \/\/ Constant Pool\n-\n-  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n-  #1;\/\/ this_cpx\n-  #8;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [3] { \/\/ fields\n-    { \/\/ Member at 0x036B\n-      0x0011; \/\/ access\n-      #9; \/\/ name_cpx\n-      #10; \/\/ sig_cpx\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    } \/\/ Member\n-    ;\n-    { \/\/ Member at 0x0373\n-      0x0014; \/\/ access\n-      #11; \/\/ name_cpx\n-      #12; \/\/ sig_cpx\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    } \/\/ Member\n-    ;\n-    { \/\/ Member at 0x037B\n-      0x0012; \/\/ access\n-      #13; \/\/ name_cpx\n-      #14; \/\/ sig_cpx\n-      [0] { \/\/ Attributes\n-      } \/\/ Attributes\n-    } \/\/ Member\n-  } \/\/ fields\n-\n-  [5] { \/\/ methods\n-    { \/\/ Member at 0x0385\n-      0x0009; \/\/ access\n-      #15; \/\/ name_cpx\n-      #18; \/\/ sig_cpx\n-      [1] { \/\/ Attributes\n-        Attr(#19, 76) { \/\/ Code at 0x038D\n-          4; \/\/ max_stack\n-          5; \/\/ max_locals\n-          Bytes[36]{\n-            0xCB00013A041A1904;\n-            0x5FCC00023A041F19;\n-            0x045B57CC00033A04;\n-            0x1D19045FCC00043A;\n-            0x041904B0;\n-          };\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#20, 22) { \/\/ LineNumberTable at 0x03C3\n-              [5] { \/\/ LineNumberTable\n-                0  14; \/\/  at 0x03CF\n-                5  15; \/\/  at 0x03D3\n-                14  16; \/\/  at 0x03D7\n-                24  17; \/\/  at 0x03DB\n-                33  18; \/\/  at 0x03DF\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    } \/\/ Member\n-    ;\n-    { \/\/ Member at 0x03DF\n-      0x0011; \/\/ access\n-      #21; \/\/ name_cpx\n-      #22; \/\/ sig_cpx\n-      [1] { \/\/ Attributes\n-        Attr(#19, 31) { \/\/ Code at 0x03E7\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[7]{\n-            0x2ABA00050000AC;\n-          };\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#20, 6) { \/\/ LineNumberTable at 0x0400\n-              [1] { \/\/ LineNumberTable\n-                0  3; \/\/  at 0x040C\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    } \/\/ Member\n-    ;\n-    { \/\/ Member at 0x040C\n-      0x0011; \/\/ access\n-      #23; \/\/ name_cpx\n-      #24; \/\/ sig_cpx\n-      [1] { \/\/ Attributes\n-        Attr(#19, 32) { \/\/ Code at 0x0414\n-          2; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[8]{\n-            0x2A2BBA00060000AC;\n-          };\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#20, 6) { \/\/ LineNumberTable at 0x042E\n-              [1] { \/\/ LineNumberTable\n-                0  3; \/\/  at 0x043A\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    } \/\/ Member\n-    ;\n-    { \/\/ Member at 0x043A\n-      0x0011; \/\/ access\n-      #25; \/\/ name_cpx\n-      #26; \/\/ sig_cpx\n-      [1] { \/\/ Attributes\n-        Attr(#19, 31) { \/\/ Code at 0x0442\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[7]{\n-            0x2ABA00070000B0;\n-          };\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#20, 6) { \/\/ LineNumberTable at 0x045B\n-              [1] { \/\/ LineNumberTable\n-                0  3; \/\/  at 0x0467\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    } \/\/ Member\n-    ;\n-    { \/\/ Member at 0x0467\n-      0x0008; \/\/ access\n-      #27; \/\/ name_cpx\n-      #28; \/\/ sig_cpx\n-      [1] { \/\/ Attributes\n-        Attr(#19, 69) { \/\/ Code at 0x046F\n-          4; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[29]{\n-            0xCB00014B10302A5F;\n-            0xCC00024B092A5B57;\n-            0xCC00034B032A5FCC;\n-            0x00044B2AB0;\n-          };\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#20, 22) { \/\/ LineNumberTable at 0x049E\n-              [5] { \/\/ LineNumberTable\n-                0  7; \/\/  at 0x04AA\n-                4  8; \/\/  at 0x04AE\n-                12  9; \/\/  at 0x04B2\n-                20  10; \/\/  at 0x04B6\n-                27  11; \/\/  at 0x04BA\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    } \/\/ Member\n-  } \/\/ methods\n-\n-  [3] { \/\/ Attributes\n-    Attr(#29, 2) { \/\/ SourceFile at 0x04BC\n-      #30;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#17, 18) { \/\/ InnerClasses at 0x04CC\n-      [2] { \/\/ InnerClasses\n-        #1 #32 #16 281; \/\/  at 0x04DC\n-        #52 #55 #53 25; \/\/  at 0x04E4\n-      }\n-    } \/\/ end InnerClasses\n-    ;\n-    Attr(#37, 6) { \/\/ BootstrapMethods at 0x04E4\n-      [1] { \/\/ bootstrap_methods\n-        {  \/\/  bootstrap_method\n-          #38; \/\/ bootstrap_method_ref\n-          [0] { \/\/ bootstrap_arguments\n-          }  \/\/  bootstrap_arguments\n-        }  \/\/  bootstrap_method\n-      }\n-    } \/\/ end BootstrapMethods\n-  } \/\/ Attributes\n-} \/\/ end class WithFieldNoAccessTest$V\n-\n-\n-class WithFieldNoAccessTest {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  63; \/\/ version\n-  [91] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #23 #39; \/\/ #1     at 0x0A\n-    long 0x0000000000000005;; \/\/ #2     at 0x0F\n-    Method #24 #40; \/\/ #4     at 0x18\n-    Field #24 #41; \/\/ #5     at 0x1D\n-    class #42; \/\/ #6     at 0x22\n-    String #43; \/\/ #7     at 0x25\n-    Method #6 #44; \/\/ #8     at 0x28\n-    class #45; \/\/ #9     at 0x2D\n-    Method #9 #46; \/\/ #10     at 0x30\n-    String #47; \/\/ #11     at 0x35\n-    Method #48 #49; \/\/ #12     at 0x38\n-    InvokeDynamic 0s #53; \/\/ #13     at 0x3D\n-    long 0x0000000000000019;; \/\/ #14     at 0x42\n-    Field #24 #54; \/\/ #16     at 0x4B\n-    String #55; \/\/ #17     at 0x50\n-    String #56; \/\/ #18     at 0x53\n-    Field #24 #57; \/\/ #19     at 0x56\n-    String #58; \/\/ #20     at 0x5B\n-    String #59; \/\/ #21     at 0x5E\n-    class #60; \/\/ #22     at 0x61\n-    class #61; \/\/ #23     at 0x64\n-    class #62; \/\/ #24     at 0x67\n-    Utf8 \"V\"; \/\/ #25     at 0x6A\n-    Utf8 \"InnerClasses\"; \/\/ #26     at 0x6E\n-    Utf8 \"<init>\"; \/\/ #27     at 0x7D\n-    Utf8 \"()V\"; \/\/ #28     at 0x86\n-    Utf8 \"Code\"; \/\/ #29     at 0x8C\n-    Utf8 \"LineNumberTable\"; \/\/ #30     at 0x93\n-    Utf8 \"main\"; \/\/ #31     at 0xA5\n-    Utf8 \"([Ljava\/lang\/String;)V\"; \/\/ #32     at 0xAC\n-    Utf8 \"StackMapTable\"; \/\/ #33     at 0xC5\n-    Utf8 \"Exceptions\"; \/\/ #34     at 0xD5\n-    class #63; \/\/ #35     at 0xE2\n-    Utf8 \"SourceFile\"; \/\/ #36     at 0xE5\n-    Utf8 \"WithFieldNoAccessTest.java\"; \/\/ #37     at 0xF2\n-    Utf8 \"NestMembers\"; \/\/ #38     at 0x010F\n-    NameAndType #27 #28; \/\/ #39     at 0x011D\n-    NameAndType #64 #65; \/\/ #40     at 0x0122\n-    NameAndType #66 #67; \/\/ #41     at 0x0127\n-    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #42     at 0x012C\n-    Utf8 \"Failed to throw IllegalAccessError exception for final public field\"; \/\/ #43     at 0x0149\n-    NameAndType #27 #68; \/\/ #44     at 0x018F\n-    Utf8 \"java\/lang\/IllegalAccessError\"; \/\/ #45     at 0x0194\n-    NameAndType #69 #70; \/\/ #46     at 0x01B3\n-    Utf8 \"Update to non-static final field WithFieldNoAccessTest$V.c attempted\"; \/\/ #47     at 0x01B8\n-    class #71; \/\/ #48     at 0x01FF\n-    NameAndType #72 #73; \/\/ #49     at 0x0202\n-    Utf8 \"BootstrapMethods\"; \/\/ #50     at 0x0207\n-    MethodHandle 6b #74; \/\/ #51     at 0x021A\n-    String #75; \/\/ #52     at 0x021E\n-    NameAndType #76 #77; \/\/ #53     at 0x0221\n-    NameAndType #78 #79; \/\/ #54     at 0x0226\n-    Utf8 \"Failed to throw IllegalAccessError exception for final protected field\"; \/\/ #55     at 0x022B\n-    Utf8 \"Update to non-static final field WithFieldNoAccessTest$V.l attempted\"; \/\/ #56     at 0x0274\n-    NameAndType #80 #81; \/\/ #57     at 0x02BB\n-    Utf8 \"Failed to throw IllegalAccessError exception for final private field\"; \/\/ #58     at 0x02C0\n-    Utf8 \"WithFieldNoAccessTest tried to access private field WithFieldNoAccessTest$V.i\"; \/\/ #59     at 0x0307\n-    Utf8 \"WithFieldNoAccessTest\"; \/\/ #60     at 0x0357\n-    Utf8 \"java\/lang\/Object\"; \/\/ #61     at 0x036F\n-    Utf8 \"WithFieldNoAccessTest$V\"; \/\/ #62     at 0x0382\n-    Utf8 \"java\/lang\/Throwable\"; \/\/ #63     at 0x039C\n-    Utf8 \"make\"; \/\/ #64     at 0x03B2\n-    Utf8 \"(CJI)QWithFieldNoAccessTest$V;\"; \/\/ #65     at 0x03B9\n-    Utf8 \"c\"; \/\/ #66     at 0x03DA\n-    Utf8 \"C\"; \/\/ #67     at 0x03DE\n-    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #68     at 0x03E2\n-    Utf8 \"toString\"; \/\/ #69     at 0x03FA\n-    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #70     at 0x0405\n-    Utf8 \"java\/lang\/String\"; \/\/ #71     at 0x041C\n-    Utf8 \"contains\"; \/\/ #72     at 0x042F\n-    Utf8 \"(Ljava\/lang\/CharSequence;)Z\"; \/\/ #73     at 0x043A\n-    Method #82 #83; \/\/ #74     at 0x0458\n-    Utf8 \"Unexpected IllegalAccessError: \"; \/\/ #75     at 0x045D\n-    Utf8 \"makeConcatWithConstants\"; \/\/ #76     at 0x0480\n-    Utf8 \"(Ljava\/lang\/String;)Ljava\/lang\/String;\"; \/\/ #77     at 0x049A\n-    Utf8 \"l\"; \/\/ #78     at 0x04C3\n-    Utf8 \"J\"; \/\/ #79     at 0x04C7\n-    Utf8 \"i\"; \/\/ #80     at 0x04CB\n-    Utf8 \"I\"; \/\/ #81     at 0x04CF\n-    class #84; \/\/ #82     at 0x04D3\n-    NameAndType #76 #87; \/\/ #83     at 0x04D6\n-    Utf8 \"java\/lang\/invoke\/StringConcatFactory\"; \/\/ #84     at 0x04DB\n-    class #89; \/\/ #85     at 0x0502\n-    Utf8 \"Lookup\"; \/\/ #86     at 0x0505\n-    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"; \/\/ #87     at 0x050E\n-    class #90; \/\/ #88     at 0x05A9\n-    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #89     at 0x05AC\n-    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #90     at 0x05D4\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n-  #22;\/\/ this_cpx\n-  #23;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [0] { \/\/ fields\n-  } \/\/ fields\n-\n-  [2] { \/\/ methods\n-    { \/\/ Member at 0x0601\n-      0x0001; \/\/ access\n-      #27; \/\/ name_cpx\n-      #28; \/\/ sig_cpx\n-      [1] { \/\/ Attributes\n-        Attr(#29, 29) { \/\/ Code at 0x0609\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB70001B1;\n-          };\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#30, 6) { \/\/ LineNumberTable at 0x0620\n-              [1] { \/\/ LineNumberTable\n-                0  1; \/\/  at 0x062C\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    } \/\/ Member\n-    ;\n-    { \/\/ Member at 0x062C\n-      0x0089; \/\/ access\n-      #31; \/\/ name_cpx\n-      #32; \/\/ sig_cpx\n-      [2] { \/\/ Attributes\n-        Attr(#29, 305) { \/\/ Code at 0x0634\n-          6; \/\/ max_stack\n-          2; \/\/ max_locals\n-          Bytes[174]{\n-            0x1062106114000210;\n-            0x0AB800045FCC0005;\n-            0x4CBB0006591207B7;\n-            0x0008BF4C2BB6000A;\n-            0x120BB6000C9A0014;\n-            0xBB0006592BB6000A;\n-            0xBA000D0000B70008;\n-            0xBF14000E10611400;\n-            0x02100AB800045B57;\n-            0xCC00104CBB000659;\n-            0x1211B70008BF4C2B;\n-            0xB6000A1212B6000C;\n-            0x9A0014BB0006592B;\n-            0xB6000ABA000D0000;\n-            0xB70008BF10141061;\n-            0x140002100AB80004;\n-            0x5FCC00134CBB0006;\n-            0x591214B70008BF4C;\n-            0x2BB6000A1215B600;\n-            0x0C9A0014BB000659;\n-            0x2BB6000ABA000D00;\n-            0x00B70008BFB1;\n-          };\n-          [3] { \/\/ Traps\n-            0 27 27 9; \/\/  at 0x06FA\n-            57 86 86 9; \/\/  at 0x0702\n-            116 143 143 9; \/\/  at 0x070A\n-          } \/\/ end Traps\n-          [2] { \/\/ Attributes\n-            Attr(#30, 66) { \/\/ LineNumberTable at 0x070C\n-              [16] { \/\/ LineNumberTable\n-                0  24; \/\/  at 0x0718\n-                17  25; \/\/  at 0x071C\n-                27  26; \/\/  at 0x0720\n-                28  27; \/\/  at 0x0724\n-                40  28; \/\/  at 0x0728\n-                57  33; \/\/  at 0x072C\n-                76  34; \/\/  at 0x0730\n-                86  35; \/\/  at 0x0734\n-                87  36; \/\/  at 0x0738\n-                99  37; \/\/  at 0x073C\n-                116  42; \/\/  at 0x0740\n-                133  43; \/\/  at 0x0744\n-                143  44; \/\/  at 0x0748\n-                144  45; \/\/  at 0x074C\n-                156  46; \/\/  at 0x0750\n-                173  49; \/\/  at 0x0754\n-              }\n-            } \/\/ end LineNumberTable\n-            ;\n-            Attr(#33, 17) { \/\/ StackMapTable at 0x0754\n-              [6] { \/\/\n-                91b, [1]z{7b,9}; \/\/ same_locals_1_stack_item_frame\n-                29b; \/\/ same_frame\n-                92b, [1]z{7b,9}; \/\/ same_locals_1_stack_item_frame\n-                29b; \/\/ same_frame\n-                90b, [1]z{7b,9}; \/\/ same_locals_1_stack_item_frame\n-                29b; \/\/ same_frame\n-              }\n-            } \/\/ end StackMapTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-        ;\n-        Attr(#34, 4) { \/\/ Exceptions at 0x076B\n-          [1] { \/\/ Exceptions\n-            #35; \/\/  at 0x0775\n-          }\n-        } \/\/ end Exceptions\n-      } \/\/ Attributes\n-    } \/\/ Member\n-  } \/\/ methods\n-\n-  [3] { \/\/ Attributes\n-    Attr(#36, 2) { \/\/ SourceFile at 0x0777\n-      #37;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#26, 18) { \/\/ InnerClasses at 0x0789\n-      [2] { \/\/ InnerClasses\n-        #24 #22 #25 281; \/\/  at 0x0799\n-        #85 #88 #86 25; \/\/  at 0x07A1\n-      }\n-    } \/\/ end InnerClasses\n-    ;\n-    Attr(#50, 8) { \/\/ BootstrapMethods at 0x07A1\n-      [1] { \/\/ bootstrap_methods\n-        {  \/\/  bootstrap_method\n-          #51; \/\/ bootstrap_method_ref\n-          [1] { \/\/ bootstrap_arguments\n-            #52; \/\/  at 0x07AF\n-          }  \/\/  bootstrap_arguments\n-        }  \/\/  bootstrap_method\n-      }\n-    } \/\/ end BootstrapMethods\n-  } \/\/ Attributes\n-} \/\/ end class WithFieldNoAccessTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldNoAccessTest.jcod","additions":0,"deletions":588,"binary":false,"changes":588,"status":"deleted"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package runtime.valhalla.inlinetypes;\n+\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @summary withfield bytecode test\n+ * @library \/test\/lib\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @run driver org.openjdk.asmtools.JtregDriver jasm -strict WithFieldTestClasses.jasm\n+ * @compile Point.java\n+ * @run main runtime.valhalla.inlinetypes.WithFieldTest\n+ *\/\n+\n+public class WithFieldTest {\n+\n+    public static void main(String[] args) {\n+        creationTest();\n+        creationTest();\n+        witherTest();\n+        witherTest();\n+        allTypesTest();\n+    }\n+\n+    static void creationTest() {\n+        WithFieldPoint p = WithFieldPoint.make(10,20);\n+        p.checkFields(10, 20);\n+    }\n+\n+    static void witherTest() {\n+        WithFieldPoint p1 = WithFieldPoint.make(2,12);\n+        p1.checkFields(2, 12);\n+        WithFieldPoint p2 = p1.withX(3);\n+        p2.checkFields(3, 12);\n+        WithFieldPoint p3 = p2.withY(14);\n+        p3.checkFields(3, 14);\n+        WithFieldPoint p4 = p1.withY(14);\n+        p4.checkFields(2, 14);\n+        WithFieldPoint p5 = p4.withX(3);\n+        p5.checkFields(3, 14);\n+    }\n+\n+    static boolean[] z_values = new boolean[] { false, true, false};\n+    static byte[] b_values = new byte[] { 0, 125, -111};\n+    static short[] s_values = new short[] { 0, 32654, -31836};\n+    static char[] c_values = new char[] { 0, 1, 65528};\n+    static int[] i_values = new int[] { 0, 2137523847, -2037453241};\n+    static long[] l_values = new long[] { 0, 9123456036854775807L, -9112272036854775507L};\n+    static float[] f_values = new float[] { 0.0f, 1.52758043e7f, -7.93757e-5f};\n+    static double[] d_values = new double[] { 0.0d, 3.304786e9d, -0.7548345e-15d};\n+    static Object[] o_values = new Object[] { null, \"Hello\", \"Duke\"};\n+    static Point[] p_values = new Point[] { new Point(0, 0), new Point(-1, 1), new Point(1, -1)};\n+\n+    static void allTypesTest() {\n+        AllTypes value = AllTypes.default;\n+        int[] map = new int[10];\n+        verifyAllTypes(value, map);\n+        for (int i = 2; i >= 0; i--) {\n+            value = value.set_z(z_values[map[0] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_b(b_values[map[1] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_s(s_values[map[2] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_c(c_values[map[3] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_i(i_values[map[4] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_l(l_values[map[5] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_f(f_values[map[6] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_d(d_values[map[7] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_o(o_values[map[8] = i]);\n+            verifyAllTypes(value, map);\n+            value = value.set_p(p_values[map[9] = i]);\n+            verifyAllTypes(value, map);\n+        }\n+    }\n+\n+    static void verifyAllTypes(AllTypes x, int[] map) {\n+        Asserts.assertEquals(x.z, z_values[map[0]]);\n+        Asserts.assertEquals(x.b, b_values[map[1]]);\n+        Asserts.assertEquals(x.s, s_values[map[2]]);\n+        Asserts.assertEquals(x.c, c_values[map[3]]);\n+        Asserts.assertEquals(x.i, i_values[map[4]]);\n+        Asserts.assertEquals(x.l, l_values[map[5]]);\n+        Asserts.assertEquals(x.f, f_values[map[6]]);\n+        Asserts.assertEquals(x.d, d_values[map[7]]);\n+        Asserts.assertEquals(x.o, o_values[map[8]]);\n+        Asserts.assertEquals(x.p, p_values[map[9]]);\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public final primitive value class runtime\/valhalla\/inlinetypes\/WithFieldPoint\n+    version 63:0\n+{\n+\n+    private final Field x:I;\n+    private final Field y:I;\n+\n+    public static Method make:\"(II)Qruntime\/valhalla\/inlinetypes\/WithFieldPoint;\"\n+        stack 4\n+    {\n+        aconst_init runtime\/valhalla\/inlinetypes\/WithFieldPoint;\n+        dup;\n+        iconst_0;\n+        iconst_0;\n+        invokevirtual checkFields:\"(II)V\";\n+\n+        iload_0;\n+        withfield x:I;\n+        dup;\n+        iload_0;\n+        iconst_0;\n+        invokevirtual checkFields:\"(II)V\";\n+\n+        iload_1;\n+        withfield y:I;\n+        dup;\n+        iload_0;\n+        iload_1;\n+        invokevirtual checkFields:\"(II)V\";\n+\n+        areturn;\n+    }\n+\n+    public Method getX:\"()I\" stack 1 {\n+        aload_0;\n+        getfield x:I;\n+        ireturn;\n+    }\n+\n+    public Method getY:\"()I\" stack 1 {\n+        aload_0;\n+        getfield y:I;\n+        ireturn;\n+    }\n+\n+    public Method withX:\"(I)Qruntime\/valhalla\/inlinetypes\/WithFieldPoint;\" stack 2 {\n+        aload_0;\n+        iload_1;\n+        withfield x:I;\n+        areturn;\n+    }\n+\n+    public Method withY:\"(I)Qruntime\/valhalla\/inlinetypes\/WithFieldPoint;\" stack 2 {\n+        aload_0;\n+        iload_1;\n+        withfield y:I;\n+        areturn;\n+    }\n+\n+    public Method checkFields:\"(II)V\" stack 3 {\n+        aload_0;\n+        getfield x:I;\n+        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+        iload_1;\n+        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+        ldc \"invalid x value\";\n+        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n+\n+        aload_0;\n+        getfield y:I;\n+        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+        iload_2;\n+        invokestatic java\/lang\/Integer.valueOf:\"(I)Ljava\/lang\/Integer;\";\n+        ldc \"invalid y value\";\n+        invokestatic jdk\/test\/lib\/Asserts.assertEquals:\"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/String;)V\";\n+\n+        return;\n+    }\n+\n+}\n+\n+public final primitive value class runtime\/valhalla\/inlinetypes\/AllTypes\n+    version 63:0\n+{\n+\n+    public final Field z:Z;\n+    public final Field b:B;\n+    public final Field s:S;\n+    public final Field c:C;\n+    public final Field i:I;\n+    public final Field l:J;\n+    public final Field f:F;\n+    public final Field d:D;\n+    public final Field o:\"Ljava\/lang\/Object;\";\n+    public final Field p:\"Qruntime\/valhalla\/inlinetypes\/Point;\";\n+\n+    public Method set_z:\"(Z)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n+        aload_0;\n+        iload_1;\n+        withfield z:Z;\n+        areturn;\n+    }\n+\n+    public Method set_b:\"(B)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n+        aload_0;\n+        iload_1;\n+        withfield b:B;\n+        areturn;\n+    }\n+\n+    public Method set_s:\"(S)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n+        aload_0;\n+        iload_1;\n+        withfield s:S;\n+        areturn;\n+    }\n+\n+    public Method set_c:\"(C)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n+        aload_0;\n+        iload_1;\n+        withfield c:C;\n+        areturn;\n+    }\n+\n+    public Method set_i:\"(I)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n+        aload_0;\n+        iload_1;\n+        withfield i:I;\n+        areturn;\n+    }\n+\n+    public Method set_l:\"(J)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 3 {\n+        aload_0;\n+        lload_1;\n+        withfield l:J;\n+        areturn;\n+    }\n+\n+    public Method set_f:\"(F)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n+        aload_0;\n+        fload_1;\n+        withfield f:F;\n+        areturn;\n+    }\n+\n+    public Method set_d:\"(D)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 3 {\n+        aload_0;\n+        dload_1;\n+        withfield d:D;\n+        areturn;\n+    }\n+\n+    public Method set_o:\"(Ljava\/lang\/Object;)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n+        aload_0;\n+        aload_1;\n+        withfield o:\"Ljava\/lang\/Object;\";\n+        areturn;\n+    }\n+\n+    public Method set_p:\"(Qruntime\/valhalla\/inlinetypes\/Point;)Qruntime\/valhalla\/inlinetypes\/AllTypes;\" stack 2 {\n+        aload_0;\n+        aload_1;\n+        withfield p:\"Qruntime\/valhalla\/inlinetypes\/Point;\";\n+        areturn;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldTestClasses.jasm","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n- * @compile -XDallowWithFieldOperator VTAssignability.java\n@@ -40,3 +39,3 @@\n-    private VTAssignability() {\n-        x = 0;\n-        y = 0;\n+    public VTAssignability(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n@@ -64,7 +63,0 @@\n-    public static VTAssignability createVTAssignability(int x, int y) {\n-        VTAssignability p = VTAssignability.default;\n-        p = __WithField(p.x, x);\n-        p = __WithField(p.y, y);\n-        return p;\n-    }\n-\n@@ -72,2 +64,2 @@\n-        VTAssignability a = createVTAssignability(3, 4);\n-        VTAssignability b = createVTAssignability(2, 4);\n+        VTAssignability a = new VTAssignability(3, 4);\n+        VTAssignability b = new VTAssignability(2, 4);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTAssignability.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @compile -XDallowWithFieldOperator VTMonitor.java\n@@ -36,10 +35,3 @@\n-    private VTMonitor() {\n-        x = 0;\n-        y = 0;\n-    }\n-\n-    public static VTMonitor createVTMonitor(int x, int y) {\n-        VTMonitor p = VTMonitor.default;\n-        p = __WithField(p.x, x);\n-        p = __WithField(p.y, y);\n-        return p;\n+    public VTMonitor(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n@@ -49,1 +41,1 @@\n-        Object a = createVTMonitor(3, 4);\n+        Object a = new VTMonitor(3, 4);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTMonitor.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-            System.out.println(\"Throwing \" + e);\n@@ -140,1 +139,0 @@\n-            System.out.printf(\"ran %s, result %s%n\", cmd, success);\n","filename":"test\/lib\/org\/openjdk\/asmtools\/JtregDriver.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}