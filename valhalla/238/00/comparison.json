{"files":[{"patch":"@@ -209,2 +209,8 @@\n-bool oopDesc::is_flatArray()     const { return mark().is_flat_array(); }\n-bool oopDesc::is_nullfreeArray() const { return mark().is_nullfree_array(); }\n+bool oopDesc::is_flatArray() const {\n+  markWord mrk = mark();\n+  return (mrk.is_unlocked()) ? mrk.is_flat_array() : klass()->is_flatArray_klass();\n+}\n+bool oopDesc::is_nullfreeArray() const {\n+  markWord mrk = mark();\n+  return (mrk.is_unlocked()) ? mrk.is_nullfree_array() : klass()->is_null_free_array_klass();\n+}\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -114,1 +114,0 @@\n-\n@@ -118,0 +117,17 @@\n+\n+        \/\/ Locked\/unlocked flat array type checks\n+        points = createSimplePointArray();\n+        Point[] pointsCopy = new Point[points.length];\n+        synchronized (points) {\n+            assertTrue(points instanceof Point[], \"Instance of\");\n+            checkSimplePointArray(points);\n+            System.arraycopy(points, 0, pointsCopy, 0, points.length);\n+            synchronized (pointsCopy) {\n+                assertTrue(pointsCopy instanceof Point[], \"Instance of\");\n+                checkSimplePointArray(pointsCopy);\n+                System.gc();\n+            }\n+            System.gc();\n+        }\n+        assertTrue(pointsCopy instanceof Point[], \"Instance of\");\n+        checkSimplePointArray(pointsCopy);\n@@ -395,0 +411,10 @@\n+\n+\n+        \/\/ Locked\/unlocked flat array type checks\n+        synchronized (srcNulls) {\n+            System.arraycopy(srcNulls, 0, dstNulls, 0, 2);\n+            checkArrayElementsEqual(srcNulls, dstNulls);\n+            System.gc();\n+        }\n+        System.gc();\n+        checkArrayElementsEqual(srcNulls, dstNulls);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"}]}