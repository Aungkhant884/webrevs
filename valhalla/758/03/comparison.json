{"files":[{"patch":"@@ -100,0 +100,1 @@\n+        -XDenablePrimitiveClasses \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/NewClassTree.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source);\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,4 +289,2 @@\n-        allowPrimitiveClasses = (!preview.isPreview(Feature.PRIMITIVE_CLASSES) || preview.isEnabled()) &&\n-                Feature.PRIMITIVE_CLASSES.allowedInSource(source);\n-        allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n-                Feature.VALUE_CLASSES.allowedInSource(source);\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n+        allowValueClasses = Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -492,0 +490,4 @@\n+                if ((char) signature[sigp] == 'Q' && !allowPrimitiveClasses) {\n+                    throw badClassFile(\"bad.class.signature\",\n+                            Convert.utf2string(signature, sigp, 10));\n+                }\n@@ -551,1 +553,1 @@\n-        if (prefix != 'L' && prefix != 'Q')\n+        if (prefix != 'L' && (!allowPrimitiveClasses || prefix != 'Q'))\n@@ -819,9 +821,7 @@\n-                    if (allowPrimitiveClasses) {\n-                        if (sym.isConstructor()  && ((MethodSymbol) sym).type.getParameterTypes().size() == 0) {\n-                            int code_length = buf.getInt(bp + 4);\n-                            if ((code_length == 1 && buf.getByte( bp + 8) == (byte) ByteCodes.return_) ||\n-                                    (code_length == 5 && buf.getByte(bp + 8) == ByteCodes.aload_0 &&\n-                                        buf.getByte( bp + 9) == (byte) ByteCodes.invokespecial &&\n-                                                buf.getByte( bp + 12) == (byte) ByteCodes.return_)) {\n-                                    sym.flags_field |= EMPTYNOARGCONSTR;\n-                            }\n+                    if (sym.isConstructor()  && sym.type.getParameterTypes().size() == 0) {\n+                        int code_length = buf.getInt(bp + 4);\n+                        if ((code_length == 1 && buf.getByte( bp + 8) == (byte) ByteCodes.return_) ||\n+                                (code_length == 5 && buf.getByte(bp + 8) == ByteCodes.aload_0 &&\n+                                    buf.getByte( bp + 9) == (byte) ByteCodes.invokespecial &&\n+                                            buf.getByte( bp + 12) == (byte) ByteCodes.return_)) {\n+                                sym.flags_field |= EMPTYNOARGCONSTR;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -194,4 +194,2 @@\n-        this.allowPrimitiveClasses = (!preview.isPreview(Feature.PRIMITIVE_CLASSES) || preview.isEnabled()) &&\n-                Feature.PRIMITIVE_CLASSES.allowedInSource(source);\n-        this.allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n-                Feature.VALUE_CLASSES.allowedInSource(source);\n+        this.allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && fac.options.isSet(\"enablePrimitiveClasses\");\n+        this.allowValueClasses = Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -3648,2 +3646,0 @@\n-            } else if (shouldWarn) {\n-                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK18));\n@@ -4635,1 +4631,1 @@\n-                checkSourceLevel(Feature.PRIMITIVE_CLASSES);\n+                checkSourceLevel(Feature.VALUE_CLASSES);\n@@ -5159,1 +5155,3 @@\n-        if (preview.isPreview(feature) && !preview.isEnabled()) {\n+        if (feature == Feature.PRIMITIVE_CLASSES && !allowPrimitiveClasses) {\n+            log.error(DiagnosticFlag.SOURCE_LEVEL, pos, feature.error(source.name));\n+        } else if (preview.isPreview(feature) && !preview.isEnabled()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses BlackholeTest.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/BlackholeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses TestArrayAccessDeopt.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses TestArrayCopyWithOops.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayCopyWithOops.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @compile -XDenablePrimitiveClasses TestArrays.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+ * @compile -XDenablePrimitiveClasses TestBasicFunctionality.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @compile -XDenablePrimitiveClasses TestBimorphicInlining.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBimorphicInlining.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @compile -XDenablePrimitiveClasses TestBufferTearing.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearing.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses TestBufferTearingC1.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @compile -XDenablePrimitiveClasses TestC1.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @compile -XDenablePrimitiveClasses TestC1ValueNumbering.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1ValueNumbering.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile TestC2CCalls.java\n+ * @compile -XDenablePrimitiveClasses TestC2CCalls.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC2CCalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+ * @compile -XDenablePrimitiveClasses TestCallingConvention.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @compile -XDenablePrimitiveClasses TestCallingConventionC1.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses TestDeadAllocationRemoval.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeadAllocationRemoval.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @compile -XDenablePrimitiveClasses TestDeoptimizationWhenBuffering.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *\n+ * @compile -XDenablePrimitiveClasses TestFlatArrayAliasesCardMark.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayAliasesCardMark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses TestFlatArrayThreshold.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses TestGenerated.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+ * @compile -XDenablePrimitiveClasses TestGetfieldChains.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGetfieldChains.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ * @compile -XDenablePrimitiveClasses TestIntrinsics.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @compile -XDenablePrimitiveClasses TestIsSubstitutableReresolution.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIsSubstitutableReresolution.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @compile -XDenablePrimitiveClasses TestJNICalls.java\n@@ -41,0 +42,2 @@\n+\/** this test was already failing no relation with the added -XDenablePrimitiveClasses option *\/\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestJNICalls.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n- * @compile MyValue5.jcod\n+ * @compile -XDenablePrimitiveClasses MyValue5.jcod\n+ * @compile -XDenablePrimitiveClasses TestLWorld.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @compile -XDenablePrimitiveClasses TestLWorldProfiling.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+ * @compile -XDenablePrimitiveClasses TestMethodHandles.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses TestNativeClone.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNativeClone.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @compile -XDenablePrimitiveClasses TestNestmateAccess.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNestmateAccess.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile TestNewAcmp.java\n+ * @compile -XDenablePrimitiveClasses TestNewAcmp.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+ * @compile -XDenablePrimitiveClasses TestNullableArrays.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+ * @compile -XDenablePrimitiveClasses TestNullableInlineTypes.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @compile -XDenablePrimitiveClasses TestOnStackReplacement.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile TestOptimizeKlassCmp.java\n+ * @compile -XDenablePrimitiveClasses TestOptimizeKlassCmp.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOptimizeKlassCmp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @compile -XDenablePrimitiveClasses TestSafepointAtPollReturn.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestSafepointAtPollReturn.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses TestStressReturnBuffering.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStressReturnBuffering.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile TestTrivialMethods.java\n+ * @compile -XDenablePrimitiveClasses TestTrivialMethods.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses TestUnexpectedMemBar.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnexpectedMemBar.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses TestUnloadedInlineTypeArray.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n- * @compile hack\/GetUnresolvedInlineFieldWrongSignature.java\n- * @compile TestUnloadedInlineTypeField.java\n+ * @compile -XDenablePrimitiveClasses hack\/GetUnresolvedInlineFieldWrongSignature.java\n+ * @compile -XDenablePrimitiveClasses TestUnloadedInlineTypeField.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses TestUnloadedReturnTypes.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedReturnTypes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses TestUnresolvedDefault.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedDefault.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+ * @compile -XDenablePrimitiveClasses TestValueClasses.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses TestWithSpeculativeTypes.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithSpeculativeTypes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @compile -XDenablePrimitiveClasses TestWithfieldC1.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithfieldC1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,2 @@\n- * @build jdk.test.whitebox.WhiteBox TestBootClassloader InstallBootstrapClasses\n+ * @compile -XDenablePrimitiveClasses ValueOnBootclasspath.java InstallBootstrapClasses.java TestBootClassloader.java\n+ * @build jdk.test.whitebox.WhiteBox\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/TestBootClassloader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile VDefaultTest.java\n+ * @compile -XDenablePrimitiveClasses VDefaultTest.java CheckcastTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CheckcastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile CircularityTest.java\n+ * @compile -XDenablePrimitiveClasses CircularityTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CircularityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses ClassInitializationFailuresTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassInitializationFailuresTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @compile ClassPrintLayoutDcmd.java Point.java\n+ * @compile -XDenablePrimitiveClasses ClassPrintLayoutDcmd.java Point.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassPrintLayoutDcmd.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+ * @compile -XDenablePrimitiveClasses CreationErrorTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CreationErrorTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @compile EmptyInlineTest.java\n+ * @compile -XDenablePrimitiveClasses EmptyInlineTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/EmptyInlineTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile Point.java JumboInline.java FlattenableSemanticTest.java\n+ * @compile -XDenablePrimitiveClasses Point.java JumboInline.java FlattenableSemanticTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlattenableSemanticTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @compile Ifacmp.java\n+ * @compile -XDenablePrimitiveClasses Ifacmp.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Ifacmp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * @compile Person.java InlineOops.java\n+ * @compile -XDenablePrimitiveClasses Person.java InlineOops.java\n@@ -59,1 +59,1 @@\n- * @compile Person.java InlineOops.java\n+ * @compile -XDenablePrimitiveClasses Person.java InlineOops.java\n@@ -74,1 +74,1 @@\n- * @compile Person.java InlineOops.java\n+ * @compile -XDenablePrimitiveClasses Person.java InlineOops.java\n@@ -89,1 +89,1 @@\n- * @compile Person.java InlineOops.java\n+ * @compile -XDenablePrimitiveClasses Person.java InlineOops.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @compile InlineTypeArray.java Point.java Long8Inline.java Person.java\n+ * @compile -XDenablePrimitiveClasses InlineTypeArray.java Point.java Long8Inline.java Person.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDallowFlattenabilityModifiers InlineTypeCreation.java Point.java Long8Inline.java Person.java\n+ * @compile -XDallowFlattenabilityModifiers -XDenablePrimitiveClasses InlineTypeCreation.java Point.java Long8Inline.java Person.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeCreation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @compile InlineTypeDensity.java\n+ * @compile -XDenablePrimitiveClasses InlineTypeDensity.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeDensity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses InlineWithJni.java\n@@ -30,0 +31,4 @@\n+\n+\/** this test was failing already but once fixed it should need the -XDenablePrimitiveClasses option as\n+  * it is defining a primitive class, please remove this comment once the test has been fixed\n+  *\/\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineWithJni.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @compile ObjectMethods.java\n+ * @compile -XDenablePrimitiveClasses ObjectMethods.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ObjectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile Point.java JumboInline.java QuickeningTest.java\n+ * @compile -XDenablePrimitiveClasses Point.java JumboInline.java QuickeningTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/QuickeningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile StaticFieldsTest.java\n+ * @compile -XDenablePrimitiveClasses StaticFieldsTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/StaticFieldsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses Test8186715.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Test8186715.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @compile Point.java TestBytecodeLib.java\n+ * @compile -XDenablePrimitiveClasses Point.java TestBytecodeLib.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestBytecodeLib.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses TestFieldNullability.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullability.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @compile -XDenablePrimitiveClasses TestJNIIsSameObject.java\n@@ -36,0 +37,2 @@\n+\n+\/** test was failing before adding the -XDenablePrimitiveClasses option, but the option should stay as it declares a primitive class  *\/\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestJNIIsSameObject.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDallowFlattenabilityModifiers Point.java JumboInline.java UninitializedInlineFieldsTest.java\n+ * @compile -XDallowFlattenabilityModifiers -XDenablePrimitiveClasses Point.java JumboInline.java UninitializedInlineFieldsTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UninitializedInlineFieldsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile Point.java UnsafeTest.java\n+ * @compile -XDenablePrimitiveClasses Point.java UnsafeTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UnsafeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n- * @compile Point.java\n- * @compile -XDallowFlattenabilityModifiers VDefaultTest.java\n+ * @compile -XDenablePrimitiveClasses Point.java\n+ * @compile -XDallowFlattenabilityModifiers -XDenablePrimitiveClasses VDefaultTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VDefaultTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @compile ValueTearing.java\n+ * @compile -XDenablePrimitiveClasses ValueTearing.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueTearing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @compile VarArgsArray.java NewInstanceFromConstructor.java IntValue.java\n+ * @compile -XDenablePrimitiveClasses VarArgsArray.java NewInstanceFromConstructor.java IntValue.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VarArgsArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses VolatileTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VolatileTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @compile -XDenablePrimitiveClasses WithFieldAccessorTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @compile Point.java\n+ * @compile -XDenablePrimitiveClasses Point.java WithFieldTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @compile -XDenablePrimitiveClasses VTAssignability.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTAssignability.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses VTMonitor.java\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTMonitor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile FieldAccessModify.java\n+ * @compile -XDenablePrimitiveClasses FieldAccessModify.java\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/Valhalla\/FieldAccessModify\/FieldAccessModify.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses HeapDump.java\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/Valhalla\/HeapDump\/HeapDump.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+ * @compile -XDenablePrimitiveClasses GenericStringTest.java\n+ * @run main GenericStringTest\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses RedefinePrimitive.java\n@@ -536,1 +537,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefinePrimitive.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessBoolean.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessBoolean.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessByte.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessByte.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessChar.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessChar.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessDouble.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessDouble.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessFloat.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessFloat.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessInt.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessInt.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessLong.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessLong.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessPoint.java\n@@ -613,0 +614,1 @@\n+                if (!success) weakDelay();\n@@ -614,1 +616,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -616,1 +618,8 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetPlain(recv, Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n+            Point x = (Point) vh.get(recv);\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -623,0 +632,1 @@\n+                if (!success) weakDelay();\n@@ -624,1 +634,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -626,1 +636,8 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetAcquire(recv, Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n+            Point x = (Point) vh.get(recv);\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n@@ -633,0 +650,1 @@\n+                if (!success) weakDelay();\n@@ -634,1 +652,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n+            Point x = (Point) vh.get(recv);\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetRelease(recv, Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n@@ -636,1 +661,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n@@ -643,0 +668,1 @@\n+                if (!success) weakDelay();\n@@ -644,1 +670,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -646,1 +672,8 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point value\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSet(recv, Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSet Point\");\n+            Point x = (Point) vh.get(recv);\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -825,0 +858,1 @@\n+                if (!success) weakDelay();\n@@ -826,1 +860,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n+            Point x = (Point) vh.get();\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetPlain(Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n@@ -828,1 +869,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -835,0 +876,1 @@\n+                if (!success) weakDelay();\n@@ -836,1 +878,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n+            Point x = (Point) vh.get();\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetAcquire(Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n@@ -838,1 +887,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n@@ -845,0 +894,1 @@\n+                if (!success) weakDelay();\n@@ -846,1 +896,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -848,1 +898,8 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetRelease(Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n+            Point x = (Point) vh.get();\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n@@ -855,0 +912,1 @@\n+                if (!success) weakDelay();\n@@ -856,1 +914,8 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n+            Point x = (Point) vh.get();\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSet(Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSet Point\");\n@@ -858,1 +923,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -1040,0 +1105,1 @@\n+                    if (!success) weakDelay();\n@@ -1041,1 +1107,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n+                Point x = (Point) vh.get(array, i);\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetPlain(array, i, Point.getInstance(1,1), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n@@ -1043,1 +1116,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+                assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -1050,0 +1123,1 @@\n+                    if (!success) weakDelay();\n@@ -1051,1 +1125,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n+                Point x = (Point) vh.get(array, i);\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetAcquire(array, i, Point.getInstance(2,2), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n@@ -1053,1 +1134,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n@@ -1060,0 +1141,1 @@\n+                    if (!success) weakDelay();\n@@ -1061,1 +1143,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n+                Point x = (Point) vh.get(array, i);\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetRelease(array, i, Point.getInstance(1,1), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n@@ -1063,1 +1152,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+                assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n@@ -1070,0 +1159,1 @@\n+                    if (!success) weakDelay();\n@@ -1071,1 +1161,8 @@\n-                assertEquals(success, true, \"weakCompareAndSet Point\");\n+                assertEquals(success, true, \"success weakCompareAndSet Point\");\n+                Point x = (Point) vh.get(array, i);\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSet(array, i, Point.getInstance(2,2), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSet Point\");\n@@ -1073,1 +1170,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -1329,0 +1426,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessPoint.java","additions":122,"deletions":24,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessShort.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessShort.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessString.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessString.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessBoolean\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessBoolean.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessBoolean\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessBoolean.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessByte\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessByte.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessByte\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessByte.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessChar\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessChar.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessChar\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessChar.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessDouble\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessDouble.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessDouble\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessDouble.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessFloat\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessFloat.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessFloat\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessFloat.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessInt\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessInt.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessInt\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessInt.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessLong\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessLong.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessLong\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessLong.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=2000 VarHandleTestMethodHandleAccessPoint\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessPoint.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessPoint\n@@ -35,0 +36,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -41,2 +43,0 @@\n-import jdk.internal.value.PrimitiveClass;\n-\n@@ -46,1 +46,1 @@\n-    static final Class<?> type = PrimitiveClass.asValueType(Point.class);\n+    static final Class<?> type = Point.class.asValueType();\n@@ -227,0 +227,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -229,1 +230,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                if (!success) weakDelay();\n@@ -231,1 +233,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -233,1 +235,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n@@ -237,0 +239,8 @@\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -239,1 +249,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                if (!success) weakDelay();\n@@ -241,1 +252,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -243,1 +254,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -247,0 +258,8 @@\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -249,1 +268,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                if (!success) weakDelay();\n@@ -251,1 +271,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n@@ -253,1 +280,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n@@ -258,0 +285,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -259,1 +287,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                if (!success) weakDelay();\n@@ -261,1 +290,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -263,1 +292,8 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSet Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -411,0 +447,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -413,1 +450,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                if (!success) weakDelay();\n@@ -415,1 +453,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n@@ -417,1 +462,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -421,0 +466,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -423,1 +469,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                if (!success) weakDelay();\n@@ -425,1 +472,9 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n@@ -427,1 +482,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n@@ -431,0 +486,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -433,1 +489,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                if (!success) weakDelay();\n@@ -435,1 +492,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -437,1 +494,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n@@ -441,0 +498,8 @@\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -443,1 +508,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                if (!success) weakDelay();\n@@ -445,1 +511,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -447,1 +513,8 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSet Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetRe Point value\");\n@@ -592,0 +665,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -594,1 +668,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    if (!success) weakDelay();\n@@ -596,1 +671,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n+                Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n@@ -598,1 +680,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+                assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -602,0 +684,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -604,1 +687,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    if (!success) weakDelay();\n@@ -606,1 +690,1 @@\n-                assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -608,1 +692,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -612,0 +696,8 @@\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n+                Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n+            }\n+\n+            {\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -614,1 +706,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    if (!success) weakDelay();\n@@ -616,1 +709,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n+                Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n@@ -618,1 +718,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+                assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetAcquire Point value\");\n@@ -622,0 +722,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -624,1 +725,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    if (!success) weakDelay();\n@@ -626,1 +728,8 @@\n-                assertEquals(success, true, \"weakCompareAndSet Point\");\n+                assertEquals(success, true, \"success weakCompareAndSet Point\");\n+                Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSet Point\");\n@@ -628,1 +737,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -721,0 +830,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessPoint.java","additions":150,"deletions":40,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessShort\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessShort.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessShort\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessShort.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessString\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessString.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessString\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessString.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeBoolean.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeBoolean.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeByte.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeByte.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeChar.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeChar.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeDouble.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeDouble.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeFloat.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeFloat.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeInt.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeInt.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeLong.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeLong.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypePoint.java\n@@ -45,2 +46,0 @@\n-import jdk.internal.value.PrimitiveClass;\n-\n@@ -52,1 +51,1 @@\n-    static final Class<?> type = PrimitiveClass.asValueType(Point.class);\n+    static final Class<?> type = Point.class.asValueType();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypePoint.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeShort.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeShort.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeString.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeString.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccess$Type$.java\n@@ -44,0 +45,4 @@\n+#if[Point]\n+import jdk.internal.value.PrimitiveClass;\n+#end[Point]\n+\n@@ -48,1 +53,1 @@\n-    static final Class<?> type = $type$.class.asValueType();\n+    static final Class<?> type = PrimitiveClass.asValueType($type$.class);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestAccess.java.template","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccess$Type$\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccess$Type$.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccess$Type$\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodHandleAccess.java.template","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodType$Type$.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodType.java.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses ArrayElementVarHandleTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/ArrayElementVarHandleTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile --enable-preview --source ${jdk.version} BasicTest.java\n+ * @compile --enable-preview --source ${jdk.version} -XDenablePrimitiveClasses BasicTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/BasicTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @compile -XDenablePrimitiveClasses LambdaConversion.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaConversion.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @compile -XDenablePrimitiveClasses LambdaTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @compile --enable-preview --source ${jdk.version} MHZeroValue.java\n+ * @compile --enable-preview --source ${jdk.version} -XDenablePrimitiveClasses MHZeroValue.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/MHZeroValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses MethodHandleTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @compile -XDenablePrimitiveClasses MethodReference.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodReference.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @compile -XDenablePrimitiveClasses Nest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/Nest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses ObjectMethods.java\n@@ -30,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses ObjectMethods.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses ObjectMethodsViaCondy.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethodsViaCondy.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses PrimitiveTypeConversionTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/PrimitiveTypeConversionTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @compile -XDenablePrimitiveClasses ProxyTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/ProxyTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses QTypeDescriptorTest.java\n@@ -29,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses QTypeDescriptorTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/QTypeDescriptorTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile --enable-preview --source ${jdk.version} Reflection.java\n+ * @compile --enable-preview --source ${jdk.version} -XDenablePrimitiveClasses Reflection.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/Reflection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @build Point Line NonFlattenValue Serialization\n+ * @compile -XDenablePrimitiveClasses Point.java Line.java NonFlattenValue.java Serialization.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/Serialization.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses StaticFactoryMethodHandleTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryMethodHandleTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses StaticFactoryTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @compile StreamTest.java\n+ * @compile -XDenablePrimitiveClasses StreamTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/StreamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses SubstitutabilityTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @compile --enable-preview --source ${jdk.version} UninitializedValueTest.java\n+ * @compile --enable-preview --source ${jdk.version} -XDenablePrimitiveClasses UninitializedValueTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/UninitializedValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @compile -XDenablePrimitiveClasses ValueArray.java\n@@ -28,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses ValueArray.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueArray.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile --enable-preview --source ${jdk.version} Point.java ValueConstantDesc.java\n+ * @compile --enable-preview --source ${jdk.version} -XDenablePrimitiveClasses Point.java ValueConstantDesc.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueConstantDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @compile -XDenablePrimitiveClasses WeakReferenceTest.java\n","filename":"test\/jdk\/valhalla\/valuetypes\/WeakReferenceTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @compile -XDenablePrimitiveClasses TestApisWithProjections.java\n","filename":"test\/langtools\/tools\/javac\/api\/TestApisWithProjections.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenablePrimitiveClasses\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProjectionCantBeInstantiated.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenablePrimitiveClasses\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SuperNotAllowedInPrimitiveCtor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\/\/ options: -XDenablePrimitiveClasses\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TypeReqIdentity.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-\n@@ -40,0 +39,1 @@\n+import java.util.List;\n@@ -147,0 +147,1 @@\n+                .options(\"-XDenablePrimitiveClasses\")\n@@ -153,1 +154,1 @@\n-                .options(\"-Xprint\")\n+                .options(\"-Xprint\", \"-XDenablePrimitiveClasses\")\n@@ -192,1 +193,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/records\/RecordReading.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckClassfileFlagsTest.java:15:9: compiler.err.cant.access: ValueWithInvalidFlags, (compiler.misc.bad.class.file.header: ValueWithInvalidFlags.class, (compiler.misc.bad.access.flags: public final identity primitive))\n+CheckClassfileFlagsTest.java:15:9: compiler.err.cant.access: ValueWithInvalidFlags, (compiler.misc.bad.class.file.header: ValueWithInvalidFlags.class, (compiler.misc.bad.class.signature: QValueWith))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/classfile_flags\/CheckClassfileFlagsTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses AnonymousValue.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AnonymousValue.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses AnonymousValueType.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AnonymousValueType.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile ArrayCreationWithQuestion.java\n+ * @compile -XDenablePrimitiveClasses ArrayCreationWithQuestion.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ArrayCreationWithQuestion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses ArrayRelationsTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ArrayRelationsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile AsSuperTests.java\n+ * @compile -XDenablePrimitiveClasses AsSuperTests.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AsSuperTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile AssortedTests.java\n+ * @compile -XDenablePrimitiveClasses AssortedTests.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AssortedTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses AttributesTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AttributesTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses AutoCloseableTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AutoCloseableTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @compile\/fail\/ref=BinarySuperclassConstraints.out -XDrawDiagnostics -XDdev BinarySuperclassConstraints.java\n+ * @compile\/fail\/ref=BinarySuperclassConstraints.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses BinarySuperclassConstraints.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BinarySuperclassConstraints.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile BogusIncompatibility.java\n- * @compile BogusIncompatibility.java\n+ * @compile -XDenablePrimitiveClasses BogusIncompatibility.java\n+ * @compile -XDenablePrimitiveClasses BogusIncompatibility.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BogusIncompatibility.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile BoxValCastTest.java\n+ * @compile -XDenablePrimitiveClasses BoxValCastTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BoxValCastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses CanonicalCtorTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CanonicalCtorTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,26 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n+ * @test \/nodynamiccopyright\/\n@@ -29,4 +4,2 @@\n- *\n- * @compile Point.java\n- * @compile -source 10 CastNoNullCheckTest.java\n- * @run main CastNoNullCheckTest\n+ * @compile -XDenablePrimitiveClasses Point.java\n+ * @compile\/fail\/ref=CastNoNullCheckTest.out -source 10 -XDrawDiagnostics CastNoNullCheckTest.java\n@@ -36,1 +9,1 @@\n-    public static void main(String... args) {\n+    void m() {\n@@ -38,1 +11,1 @@\n-        Point p = (Point) o; \/\/ No NPE expected.\n+        Point p = (Point) o;\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNoNullCheckTest.java","additions":5,"deletions":32,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+- compiler.warn.source.no.system.modules.path: 10\n+CastNoNullCheckTest.java:11:9: compiler.err.cant.access: Point, (compiler.misc.bad.class.file.header: Point.class, (compiler.misc.bad.class.signature: QPoint;LPo))\n+1 error\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNoNullCheckTest.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -31,2 +31,2 @@\n- * @compile -XDallowWithFieldOperator Point.java\n- * @compile -XDallowWithFieldOperator CastNullCheckTest.java\n+ * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n+ * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses CastNullCheckTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNullCheckTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses ChainedAssignmentTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ChainedAssignmentTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckBadSelector.out -XDrawDiagnostics CheckBadSelector.java\n+ * @compile\/fail\/ref=CheckBadSelector.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckBadSelector.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckBadSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,2 +4,1 @@\n- *\n- * @compile\/fail\/ref=CheckCyclicMembership.out -XDrawDiagnostics CheckCyclicMembership.java\n+ * @compile\/fail\/ref=CheckCyclicMembership.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckCyclicMembership.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckCyclicMembership.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-CheckCyclicMembership.java:13:37: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership.InnerValue\n-CheckCyclicMembership.java:15:33: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership\n-CheckCyclicMembership.java:19:22: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership\n+CheckCyclicMembership.java:12:37: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership.InnerValue\n+CheckCyclicMembership.java:14:33: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership\n+CheckCyclicMembership.java:18:22: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckCyclicMembership.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckExtends.out -XDrawDiagnostics CheckExtends.java\n+ * @compile\/fail\/ref=CheckExtends.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckExtends.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckExtends.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses CheckFieldDescriptors.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFieldDescriptors.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckFinal.out -XDrawDiagnostics CheckFinal.java\n+ * @compile\/fail\/ref=CheckFinal.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFinal.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFinal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDallowWithFieldOperator Point.java\n+ * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckFlattenableCycles.out -XDrawDiagnostics CheckFlattenableCycles.java\n+ * @compile\/fail\/ref=CheckFlattenableCycles.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFlattenableCycles.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableCycles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,2 +5,2 @@\n- * @compile FlattenableFlagFromClass.java\n- * @compile\/fail\/ref=CheckFlattenableFlagFromClass.out -XDrawDiagnostics CheckFlattenableFlagFromClass.java\n+ * @compile -XDenablePrimitiveClasses FlattenableFlagFromClass.java\n+ * @compile\/fail\/ref=CheckFlattenableFlagFromClass.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFlattenableFlagFromClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableFlagFromClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses CheckFlattenableSyntheticFields.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableSyntheticFields.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile CheckIdentityHash.java \n+ * @compile -XDenablePrimitiveClasses CheckIdentityHash.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckIdentityHash.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile CheckIdentityHash01.java \n+ * @compile -XDenablePrimitiveClasses CheckIdentityHash01.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckIdentityHash01.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses CheckLocalClasses.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckLocalClasses.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckMakeDefault.out -XDrawDiagnostics CheckMakeDefault.java\n+ * @compile\/fail\/ref=CheckMakeDefault.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckMakeDefault.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckMakeDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/fail\/ref=CheckMultiDimensionalArrayStore.out -XDrawDiagnostics -XDdev CheckMultiDimensionalArrayStore.java\n+ * @compile\/fail\/ref=CheckMultiDimensionalArrayStore.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses CheckMultiDimensionalArrayStore.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckMultiDimensionalArrayStore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckNullAssign.out -XDrawDiagnostics CheckNullAssign.java\n+ * @compile\/fail\/ref=CheckNullAssign.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckNullAssign.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullAssign.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckNullCastable.out -XDrawDiagnostics CheckNullCastable.java\n+ * @compile\/fail\/ref=CheckNullCastable.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckNullCastable.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullCastable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile CheckNullWithQuestion.java\n+ * @compile -XDenablePrimitiveClasses CheckNullWithQuestion.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullWithQuestion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @compile\/fail\/ref=CheckQuestionInMessages.out -XDrawDiagnostics CheckQuestionInMessages.java\n+ * @compile\/fail\/ref=CheckQuestionInMessages.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckQuestionInMessages.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckQuestionInMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @compile CheckSeparateCompile0.java\n- * @compile CheckSeparateCompile.java\n+ * @compile -XDenablePrimitiveClasses CheckSeparateCompile0.java\n+ * @compile -XDenablePrimitiveClasses CheckSeparateCompile.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSeparateCompile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/fail\/ref=CheckStaticFinalAssign.out -XDrawDiagnostics -XDdev CheckStaticFinalAssign.java\n+ * @compile\/fail\/ref=CheckStaticFinalAssign.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses CheckStaticFinalAssign.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckStaticFinalAssign.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @compile -XDallowWithFieldOperator Point.java\n- * @compile CheckSuperCompileOnly.java\n+ * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n+ * @compile -XDenablePrimitiveClasses CheckSuperCompileOnly.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSuperCompileOnly.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckSynchronized.out -XDrawDiagnostics CheckSynchronized.java\n+ * @compile\/fail\/ref=CheckSynchronized.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckSynchronized.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSynchronized.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckThisLeak.out -XDrawDiagnostics -XDdev CheckThisLeak.java\n+ * @compile\/fail\/ref=CheckThisLeak.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses CheckThisLeak.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckThisLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckValueModifier.out -XDrawDiagnostics CheckValueModifier.java\n+ * @compile\/fail\/ref=CheckValueModifier.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckValueModifier.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckValueModifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ClassLiteralNegativeTest.out -XDrawDiagnostics ClassLiteralNegativeTest.java\n+ * @compile\/fail\/ref=ClassLiteralNegativeTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ClassLiteralNegativeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralNegativeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @compile\/fail\/ref=ClassLiteralTypingNegativeTest.out -XDrawDiagnostics ClassLiteralTypingNegativeTest.java\n+ * @compile\/fail\/ref=ClassLiteralTypingNegativeTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ClassLiteralTypingNegativeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralTypingNegativeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+ * @compile -XDenablePrimitiveClasses ClassLiteralTypingTest.java\n+ * @run main ClassLiteralTypingTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralTypingTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses CompilerNoBogusAssert.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CompilerNoBogusAssert.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile CompilesJustFine.java\n+ * @compile -XDenablePrimitiveClasses CompilesJustFine.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CompilesJustFine.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses ConditionalInlineTypeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConditionalInlineTypeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ConditionalTypeTest.out -XDrawDiagnostics ConditionalTypeTest.java\n+ * @compile\/fail\/ref=ConditionalTypeTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ConditionalTypeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConditionalTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ConflictingSuperInterfaceTest.out -XDrawDiagnostics ConflictingSuperInterfaceTest.java\n+ * @compile\/fail\/ref=ConflictingSuperInterfaceTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ConflictingSuperInterfaceTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConflictingSuperInterfaceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile ConstantPropagationTest.java\n+ * @compile -XDenablePrimitiveClasses ConstantPropagationTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConstantPropagationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @compile -XDallowWithFieldOperator Point.java Rectangle.java\n- * @compile\/fail\/ref=ConsumeUnifiedClass.out -XDrawDiagnostics ConsumeUnifiedClass.java\n+ * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java Rectangle.java\n+ * @compile\/fail\/ref=ConsumeUnifiedClass.out -XDrawDiagnostics -XDenablePrimitiveClasses ConsumeUnifiedClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConsumeUnifiedClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CovariantArrayTest.out -XDrawDiagnostics -XDdev CovariantArrayTest.java\n+ * @compile\/fail\/ref=CovariantArrayTest.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses CovariantArrayTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CovariantArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses CtorChain.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CtorChain.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses DefaultNonInlines.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DefaultNonInlines.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses DefaultOfPrimitiveReference.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DefaultOfPrimitiveReference.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -Xdoclint:all -Werror DocLintSyntheticsTest.java\n+ * @compile -Xdoclint:all -Werror -XDenablePrimitiveClasses DocLintSyntheticsTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DocLintSyntheticsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=DualNonDuplicateErrors.out -XDrawDiagnostics DualNonDuplicateErrors.java\n+ * @compile\/fail\/ref=DualNonDuplicateErrors.out -XDrawDiagnostics -XDenablePrimitiveClasses DualNonDuplicateErrors.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DualNonDuplicateErrors.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=DualPathInnerType.out -XDrawDiagnostics DualPathInnerType.java\n+ * @compile\/fail\/ref=DualPathInnerType.out -XDrawDiagnostics -XDenablePrimitiveClasses DualPathInnerType.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DualPathInnerType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDrawDiagnostics -XDdev EmptyValueTest.java\n+ * @compile -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses EmptyValueTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/EmptyValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses EnhancedForLoopTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/EnhancedForLoopTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile ExplicitLambdaWithNullableTypes.java\n+ * @compile -XDenablePrimitiveClasses ExplicitLambdaWithNullableTypes.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile ExplicitLambdaWithNullableTypes2.java\n+ * @compile -XDenablePrimitiveClasses ExplicitLambdaWithNullableTypes2.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile ExplicitLambdaWithNullableTypes3.java\n+ * @compile -XDenablePrimitiveClasses ExplicitLambdaWithNullableTypes3.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/fail\/ref=FinalFieldTest.out --should-stop=at=FLOW -XDrawDiagnostics  FinalFieldTest.java\n+ * @compile\/fail\/ref=FinalFieldTest.out --should-stop=at=FLOW -XDrawDiagnostics -XDenablePrimitiveClasses FinalFieldTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/FinalFieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=FlattenableNegativeTest.out -XDrawDiagnostics -XDdev FlattenableNegativeTest.java\n+ * @compile\/fail\/ref=FlattenableNegativeTest.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses FlattenableNegativeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/FlattenableNegativeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile GenericArrayRegression.java\n+ * @compile -XDenablePrimitiveClasses -XDenablePrimitiveClasses GenericArrayRegression.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericArrayRegression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=GenericArrayTest.out -Xlint:all -Werror -XDrawDiagnostics -XDdev GenericArrayTest.java\n+ * @compile\/fail\/ref=GenericArrayTest.out -Xlint:all -Werror -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses GenericArrayTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=GenericInlineTest.out -XDrawDiagnostics GenericInlineTest.java\n+ * @compile\/fail\/ref=GenericInlineTest.out -XDrawDiagnostics -XDenablePrimitiveClasses GenericInlineTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericInlineTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile GenericsAndValues1.java\n+ * @compile -XDenablePrimitiveClasses GenericsAndValues1.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile GenericsAndValues2.java\n+ * @compile -XDenablePrimitiveClasses GenericsAndValues2.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile GenericsAndValues3.java\n+ * @compile -XDenablePrimitiveClasses GenericsAndValues3.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile GenericsAndValues4.java\n+ * @compile -XDenablePrimitiveClasses GenericsAndValues4.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues4.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile GenericsAndValues5.java\n+ * @compile -XDenablePrimitiveClasses GenericsAndValues5.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues5.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=GenericsWithQuestion.out -XDrawDiagnostics GenericsWithQuestion.java\n+ * @compile\/fail\/ref=GenericsWithQuestion.out -XDrawDiagnostics -XDenablePrimitiveClasses GenericsWithQuestion.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsWithQuestion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses GetClassTypingTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GetClassTypingTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=IllegalByValueTest.out -XDrawDiagnostics -XDdev IllegalByValueTest.java\n+ * @compile\/fail\/ref=IllegalByValueTest.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses IllegalByValueTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IllegalByValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=IllegalByValueTest2.out -XDrawDiagnostics -XDdev IllegalByValueTest2.java\n+ * @compile\/fail\/ref=IllegalByValueTest2.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses IllegalByValueTest2.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IllegalByValueTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses InferredValueParameterizationTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InferredValueParameterizationTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=InlineAnnotationOnAnonymousClass.out -XDrawDiagnostics InlineAnnotationOnAnonymousClass.java\n+ * @compile\/fail\/ref=InlineAnnotationOnAnonymousClass.out -XDrawDiagnostics -XDenablePrimitiveClasses InlineAnnotationOnAnonymousClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineAnnotationOnAnonymousClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=InlineAnnotationTest.out -XDrawDiagnostics InlineAnnotationTest.java\n+ * @compile\/fail\/ref=InlineAnnotationTest.out -XDrawDiagnostics -XDenablePrimitiveClasses InlineAnnotationTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineAnnotationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses InlineClassTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineClassTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses InlineDiamondTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineDiamondTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses InnerClassAttributeValuenessTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InnerClassAttributeValuenessTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses InnerValueNew.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InnerValueNew.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile InstanceofProjectionArray.java\n+ * @compile -XDenablePrimitiveClasses InstanceofProjectionArray.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InstanceofProjectionArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses IntercastTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IntercastTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses IntercastTest2.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IntercastTest2.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses LocalValueNew.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LocalValueNew.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses LookupOnLoxTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LookupOnLoxTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses LookupOnLoxTest2.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LookupOnLoxTest2.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses LubWithInlines.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LubWithInlines.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=MiscThisLeak.out -XDrawDiagnostics -XDdev MiscThisLeak.java\n+ * @compile\/fail\/ref=MiscThisLeak.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses MiscThisLeak.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/MiscThisLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+ * @compile -XDenablePrimitiveClasses NoCrashTest.java\n+ * @run main NoCrashTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoCrashTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses NoUnnecessaryCast.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoUnnecessaryCast.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=NoVolatileFields.out -XDrawDiagnostics NoVolatileFields.java\n+ * @compile\/fail\/ref=NoVolatileFields.out -XDrawDiagnostics -XDenablePrimitiveClasses NoVolatileFields.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoVolatileFields.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=OverloadingPhaseTest.out -XDrawDiagnostics OverloadingPhaseTest.java\n+ * @compile\/fail\/ref=OverloadingPhaseTest.out -XDrawDiagnostics -XDenablePrimitiveClasses OverloadingPhaseTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/OverloadingPhaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-   @run main OverloadingPhaseTest2\n+ * @compile -XDenablePrimitiveClasses OverloadingPhaseTest2.java\n+ * @run main OverloadingPhaseTest2\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/OverloadingPhaseTest2.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses ParameterizedDefault.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ParameterizedDefault.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile Point.java\n+ * @compile -XDenablePrimitiveClasses Point.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/Point.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses PreloadAttributeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PreloadAttributeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,3 +2,0 @@\n-PrimitiveAsTypeName.java:9:18: compiler.warn.restricted.type.not.allowed.preview: primitive, 18\n-PrimitiveAsTypeName.java:10:9: compiler.warn.restricted.type.not.allowed.preview: primitive, 18\n-PrimitiveAsTypeName.java:11:9: compiler.warn.restricted.type.not.allowed.preview: primitive, 18\n@@ -7,1 +4,1 @@\n-4 warnings\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveAsTypeName.out","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile ProjectedArrayDotClass.java\n+ * @compile -XDenablePrimitiveClasses ProjectedArrayDotClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProjectedArrayDotClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ProjectionInstantiationTest.out -XDrawDiagnostics ProjectionInstantiationTest.java\n+ * @compile\/fail\/ref=ProjectionInstantiationTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ProjectionInstantiationTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProjectionInstantiationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        JavacTask task = (JavacTask) compiler.getTask(out, null, null, List.of(\"-XDinlinesAreIslands\"), null, files, context);\n+        JavacTask task = (JavacTask) compiler.getTask(out, null, null, List.of(\"-XDinlinesAreIslands\", \"-XDenablePrimitiveClasses\"), null, files, context);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProjectionRelationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses ProperTypeApplySelectTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProperTypeApplySelectTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile QPointConsumer.java\n- * @compile QPointConsumer.java\n+ * @compile -XDenablePrimitiveClasses QPointConsumer.java\n+ * @compile -XDenablePrimitiveClasses QPointConsumer.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QPointConsumer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile QTypedValue.java\n+ * @compile -XDenablePrimitiveClasses QTypedValue.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses QualifiedSuperCtor.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QualifiedSuperCtor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses QualifiedThisTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QualifiedThisTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses RefDotClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/RefDotClass.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @compile Range.java\n+ * @compile -XDenablePrimitiveClasses Range.java\n+ * @compile -XDenablePrimitiveClasses SeparateCompileGenerics.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SeparateCompileGenerics.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @compile SeparateCompileTest01.java\n+ * @compile -XDenablePrimitiveClasses SeparateCompileTest01.java\n+ * @compile -XDenablePrimitiveClasses SeparateCompileTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SeparateCompileTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses SideEffectTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SideEffectTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses SignatureTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SignatureTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @compile SmallSetTest.java\n- * @compile SmallSetTest.java\n+ * @compile -XDenablePrimitiveClasses SmallSetTest.java\n+ * @compile -XDenablePrimitiveClasses SmallSetTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SmallSetTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses StaticSelectedThroughProjection.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/StaticSelectedThroughProjection.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses StreamsTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/StreamsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=SuperCallInCtor.out -XDrawDiagnostics SuperCallInCtor.java\n+ * @compile\/fail\/ref=SuperCallInCtor.out -XDrawDiagnostics -XDenablePrimitiveClasses SuperCallInCtor.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperCallInCtor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses SuperHashCodeEqualsToStringTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperHashCodeEqualsToStringTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=SuperclassConstraints.out -XDrawDiagnostics -XDdev SuperclassConstraints.java\n+ * @compile\/fail\/ref=SuperclassConstraints.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses SuperclassConstraints.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperclassConstraints.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile T8279655.java\n+ * @compile -XDenablePrimitiveClasses T8279655.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/T8279655.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile TestQualifierOnInit.java\n+ * @compile -XDenablePrimitiveClasses TestQualifierOnInit.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TestQualifierOnInit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses TestReflectiveMirrors.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TestReflectiveMirrors.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses ThisIsNotAnInstanceField.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ThisIsNotAnInstanceField.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=TypeRelationsNegativeTest.out -XDrawDiagnostics TypeRelationsNegativeTest.java\n+ * @compile\/fail\/ref=TypeRelationsNegativeTest.out -XDrawDiagnostics -XDenablePrimitiveClasses TypeRelationsNegativeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TypeRelationsNegativeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses TypeRelationsTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TypeRelationsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses UnannotatedProjection.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnannotatedProjection.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=UncheckedDefault.out -Xlint:all -Werror -XDrawDiagnostics -XDdev UncheckedDefault.java\n+ * @compile\/fail\/ref=UncheckedDefault.out -Xlint:all -Werror -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses UncheckedDefault.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UncheckedDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses UnifiedPrimitiveClassBytecodeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassBytecodeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses UnifiedPrimitiveClassInnerClassesTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassInnerClassesTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses UnifiedPrimitiveClassNestHostTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassNestHostTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=UnknownTypeDefault.out -Xlint:all -Werror -XDrawDiagnostics -XDdev UnknownTypeDefault.java\n+ * @compile\/fail\/ref=UnknownTypeDefault.out -Xlint:all -Werror -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses UnknownTypeDefault.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnknownTypeDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDrawDiagnostics -XDdev UnrelatedThisLeak.java\n+ * @compile -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses UnrelatedThisLeak.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnrelatedThisLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ValRefTokensNegativeTest.out -XDrawDiagnostics ValRefTokensNegativeTest.java\n+ * @compile\/fail\/ref=ValRefTokensNegativeTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ValRefTokensNegativeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValRefTokensNegativeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses ValRefTokensTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValRefTokensTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ValueAnnotationOnAnonymousClass.out -XDrawDiagnostics ValueAnnotationOnAnonymousClass.java\n+ * @compile\/fail\/ref=ValueAnnotationOnAnonymousClass.out -XDrawDiagnostics -XDenablePrimitiveClasses ValueAnnotationOnAnonymousClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationOnAnonymousClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ValueAnnotationTest.out -XDrawDiagnostics ValueAnnotationTest.java\n+ * @compile\/fail\/ref=ValueAnnotationTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ValueAnnotationTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses ValueAsEnclosingClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAsEnclosingClass.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses ValueBootstrapMethodsTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueBootstrapMethodsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile ValueConstructorRef.java\n+ * @compile -XDenablePrimitiveClasses ValueConstructorRef.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueConstructorRef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile ValueCreationTest.java\n+ * @compile -XDenablePrimitiveClasses ValueCreationTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueCreationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ValueModifierTest.out -XDrawDiagnostics -XDdev ValueModifierTest.java\n+ * @compile\/fail\/ref=ValueModifierTest.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses ValueModifierTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueModifierTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses ValueNewReadWrite.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueNewReadWrite.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/fail\/ref=ValueOverGenericsTest.out -XDrawDiagnostics ValueOverGenericsTest.java\n+ * @compile\/fail\/ref=ValueOverGenericsTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ValueOverGenericsTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueOverGenericsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-   @compile  ValuesAsRefs.java\n+ * @compile -XDenablePrimitiveClasses ValuesAsRefs.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValuesAsRefs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=WithFieldNegativeTests.out -XDrawDiagnostics WithFieldNegativeTests.java\n+ * @compile\/fail\/ref=WithFieldNegativeTests.out -XDrawDiagnostics -XDenablePrimitiveClasses WithFieldNegativeTests.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/WithFieldNegativeTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses WithFieldOfGenericType.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/WithFieldOfGenericType.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @compile WithFieldRuntimeTest.java\n+ * @compile -XDenablePrimitiveClasses WithFieldRuntimeTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/WithFieldRuntimeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses ApplicableAnnotationsOnPrimitiveRecords.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/records\/ApplicableAnnotationsOnPrimitiveRecords.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckMakeDefault.out -XDrawDiagnostics CheckMakeDefault.java\n+ * @compile\/fail\/ref=CheckMakeDefault.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckMakeDefault.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckMakeDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile -XDenablePrimitiveClasses ConstructorRefTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConstructorRefTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile -XDenablePrimitiveClasses PermitsValueTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PermitsValueTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -177,8 +177,15 @@\n-        String[] sources = new String[] {\n-                \"static static class StaticTest {}\",\n-                \"native native class NativeTest {}\",\n-                \"value value primitive class ValueTest {}\",\n-                \"primitive primitive value class PrimitiveTest {}\"\n-        };\n-        for (String source : sources) {\n-            assertFail(\"compiler.err.repeated.modifier\", source);\n+        String[] previousOptions = getCompileOptions();\n+        try {\n+            String[] testOptions = {\"-XDenablePrimitiveClasses\"};\n+            setCompileOptions(testOptions);\n+            String[] sources = new String[] {\n+                    \"static static class StaticTest {}\",\n+                    \"native native class NativeTest {}\",\n+                    \"value value primitive class ValueTest {}\",\n+                    \"primitive primitive value class PrimitiveTest {}\"\n+            };\n+            for (String source : sources) {\n+                assertFail(\"compiler.err.repeated.modifier\", source);\n+            }\n+        } finally {\n+            setCompileOptions(previousOptions);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -4,2 +4,1 @@\n- *\n- * @compile\/fail\/ref=WithFieldNegativeTests.out -XDrawDiagnostics WithFieldNegativeTests.java\n+ * @compile\/fail\/ref=WithFieldNegativeTests.out -XDrawDiagnostics -XDenablePrimitiveClasses WithFieldNegativeTests.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldNegativeTests.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,11 +1,11 @@\n-WithFieldNegativeTests.java:17:14: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:18:14: compiler.err.cant.assign.val.to.final.var: sx\n-WithFieldNegativeTests.java:23:16: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:27:10: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:28:12: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:29:11: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:30:9: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:31:13: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:32:15: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:38:10: compiler.err.cant.assign.val.to.final.var: x\n-WithFieldNegativeTests.java:39:10: compiler.err.cant.assign.val.to.final.var: sx\n+WithFieldNegativeTests.java:16:14: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:17:14: compiler.err.cant.assign.val.to.final.var: sx\n+WithFieldNegativeTests.java:22:16: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:26:10: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:27:12: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:28:11: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:29:9: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:30:13: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:31:15: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:37:10: compiler.err.cant.assign.val.to.final.var: x\n+WithFieldNegativeTests.java:38:10: compiler.err.cant.assign.val.to.final.var: sx\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldNegativeTests.out","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}