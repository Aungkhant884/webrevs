{"files":[{"patch":"@@ -100,0 +100,1 @@\n+        -XDenablePrimitiveClasses \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessBoolean.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessBoolean.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessByte.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessByte.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessChar.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessChar.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessDouble.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessDouble.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessFloat.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessFloat.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessInt.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessInt.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessLong.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessLong.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessPoint.java\n@@ -613,0 +614,1 @@\n+                if (!success) weakDelay();\n@@ -614,1 +616,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -616,1 +618,8 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetPlain(recv, Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n+            Point x = (Point) vh.get(recv);\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -623,0 +632,1 @@\n+                if (!success) weakDelay();\n@@ -624,1 +634,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -626,1 +636,8 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetAcquire(recv, Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n+            Point x = (Point) vh.get(recv);\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n@@ -633,0 +650,1 @@\n+                if (!success) weakDelay();\n@@ -634,1 +652,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n+            Point x = (Point) vh.get(recv);\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetRelease(recv, Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n@@ -636,1 +661,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n@@ -643,0 +668,1 @@\n+                if (!success) weakDelay();\n@@ -644,1 +670,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -646,1 +672,8 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point value\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSet(recv, Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSet Point\");\n+            Point x = (Point) vh.get(recv);\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -825,0 +858,1 @@\n+                if (!success) weakDelay();\n@@ -826,1 +860,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n+            Point x = (Point) vh.get();\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetPlain(Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n@@ -828,1 +869,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -835,0 +876,1 @@\n+                if (!success) weakDelay();\n@@ -836,1 +878,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n+            Point x = (Point) vh.get();\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetAcquire(Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n@@ -838,1 +887,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n@@ -845,0 +894,1 @@\n+                if (!success) weakDelay();\n@@ -846,1 +896,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -848,1 +898,8 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetRelease(Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n+            Point x = (Point) vh.get();\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n@@ -855,0 +912,1 @@\n+                if (!success) weakDelay();\n@@ -856,1 +914,8 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n+            Point x = (Point) vh.get();\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSet(Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSet Point\");\n@@ -858,1 +923,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -1040,0 +1105,1 @@\n+                    if (!success) weakDelay();\n@@ -1041,1 +1107,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n+                Point x = (Point) vh.get(array, i);\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetPlain(array, i, Point.getInstance(1,1), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n@@ -1043,1 +1116,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+                assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -1050,0 +1123,1 @@\n+                    if (!success) weakDelay();\n@@ -1051,1 +1125,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n+                Point x = (Point) vh.get(array, i);\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetAcquire(array, i, Point.getInstance(2,2), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n@@ -1053,1 +1134,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n@@ -1060,0 +1141,1 @@\n+                    if (!success) weakDelay();\n@@ -1061,1 +1143,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n+                Point x = (Point) vh.get(array, i);\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetRelease(array, i, Point.getInstance(1,1), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n@@ -1063,1 +1152,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+                assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n@@ -1070,0 +1159,1 @@\n+                    if (!success) weakDelay();\n@@ -1071,1 +1161,8 @@\n-                assertEquals(success, true, \"weakCompareAndSet Point\");\n+                assertEquals(success, true, \"success weakCompareAndSet Point\");\n+                Point x = (Point) vh.get(array, i);\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSet(array, i, Point.getInstance(2,2), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSet Point\");\n@@ -1073,1 +1170,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -1329,0 +1426,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessPoint.java","additions":122,"deletions":24,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessShort.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessShort.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessString.java\n@@ -44,0 +45,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessString.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessBoolean\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessBoolean.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessBoolean\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessBoolean.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessByte\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessByte.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessByte\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessByte.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessChar\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessChar.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessChar\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessChar.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessDouble\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessDouble.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessDouble\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessDouble.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessFloat\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessFloat.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessFloat\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessFloat.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessInt\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessInt.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessInt\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessInt.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessLong\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessLong.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessLong\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessLong.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=2000 VarHandleTestMethodHandleAccessPoint\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessPoint.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessPoint\n@@ -35,0 +36,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -41,2 +43,0 @@\n-import jdk.internal.value.PrimitiveClass;\n-\n@@ -46,1 +46,1 @@\n-    static final Class<?> type = PrimitiveClass.asValueType(Point.class);\n+    static final Class<?> type = Point.class.asValueType();\n@@ -227,0 +227,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -229,1 +230,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                if (!success) weakDelay();\n@@ -231,1 +233,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -233,1 +235,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n@@ -237,0 +239,8 @@\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -239,1 +249,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                if (!success) weakDelay();\n@@ -241,1 +252,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -243,1 +254,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -247,0 +258,8 @@\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -249,1 +268,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                if (!success) weakDelay();\n@@ -251,1 +271,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n@@ -253,1 +280,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n@@ -258,0 +285,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -259,1 +287,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                if (!success) weakDelay();\n@@ -261,1 +290,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -263,1 +292,8 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSet Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -411,0 +447,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -413,1 +450,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                if (!success) weakDelay();\n@@ -415,1 +453,8 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n@@ -417,1 +462,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -421,0 +466,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -423,1 +469,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                if (!success) weakDelay();\n@@ -425,1 +472,9 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n@@ -427,1 +482,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n@@ -431,0 +486,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -433,1 +489,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                if (!success) weakDelay();\n@@ -435,1 +492,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -437,1 +494,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n@@ -441,0 +498,8 @@\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(Point.getInstance(1,1), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetRelease Point value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -443,1 +508,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                if (!success) weakDelay();\n@@ -445,1 +511,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -447,1 +513,8 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(Point.getInstance(2,2), Point.getInstance(3,3));\n+            assertEquals(success, false, \"failing weakCompareAndSet Point\");\n+            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetRe Point value\");\n@@ -592,0 +665,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -594,1 +668,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    if (!success) weakDelay();\n@@ -596,1 +671,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n+                Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetPlain Point\");\n@@ -598,1 +680,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+                assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetPlain Point value\");\n@@ -602,0 +684,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -604,1 +687,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    if (!success) weakDelay();\n@@ -606,1 +690,1 @@\n-                assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -608,1 +692,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -612,0 +696,8 @@\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n+                Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSetAcquire Point value\");\n+            }\n+\n+            {\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -614,1 +706,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    if (!success) weakDelay();\n@@ -616,1 +709,8 @@\n-                assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n+                Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Point\");\n@@ -618,1 +718,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+                assertEquals(x, Point.getInstance(2,2), \"failing weakCompareAndSetAcquire Point value\");\n@@ -622,0 +722,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -624,1 +725,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    if (!success) weakDelay();\n@@ -626,1 +728,8 @@\n-                assertEquals(success, true, \"weakCompareAndSet Point\");\n+                assertEquals(success, true, \"success weakCompareAndSet Point\");\n+                Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(3,3));\n+                assertEquals(success, false, \"failing weakCompareAndSet Point\");\n@@ -628,1 +737,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"failing weakCompareAndSet Point value\");\n@@ -721,0 +830,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessPoint.java","additions":150,"deletions":40,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessShort\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessShort.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessShort\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessShort.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessString\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccessString.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccessString\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessString.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeBoolean.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeBoolean.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeByte.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeByte.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeChar.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeChar.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeDouble.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeDouble.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeFloat.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeFloat.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeInt.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeInt.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeLong.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeLong.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypePoint.java\n@@ -45,2 +46,0 @@\n-import jdk.internal.value.PrimitiveClass;\n-\n@@ -52,1 +51,1 @@\n-    static final Class<?> type = PrimitiveClass.asValueType(Point.class);\n+    static final Class<?> type = Point.class.asValueType();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypePoint.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeShort.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeShort.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeString.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeString.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+#if[Point]\n+import jdk.internal.value.PrimitiveClass;\n+#end[Point]\n+\n@@ -49,1 +53,1 @@\n-    static final Class<?> type = $type$.class.asValueType();\n+    static final Class<?> type = PrimitiveClass.asValueType($type$.class);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestAccess.java.template","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccess$Type$\n+ * @compile -XDenablePrimitiveClasses    Point.java Value.java VarHandleTestMethodHandleAccess$Type$.java\n+ * @run testng\/othervm -Diters=20000     VarHandleTestMethodHandleAccess$Type$\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodHandleAccess.java.template","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodType$Type$.java\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodType.java.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}