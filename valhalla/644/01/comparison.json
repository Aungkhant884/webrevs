{"files":[{"patch":"@@ -5036,1 +5036,3 @@\n-     * @throws NullPointerException if the {@code type} argument is null\n+     * @throws NullPointerException if the given {@code type} is null, or\n+     *         if the given {@code type} is primitive or a primitive value type\n+     *         and the given value is null\n@@ -5050,1 +5052,1 @@\n-            if (value == null)\n+            if (!type.isPrimitiveValueType() && value == null)\n@@ -5097,3 +5099,4 @@\n-        } else if (type.isValue()) {\n-            \/\/ TBD\n-            throw new UnsupportedOperationException();\n+        } else if (type.isPrimitiveValueType()) {\n+            \/\/ singleton default value\n+            Object value = UNSAFE.uninitializedDefaultValue(type);\n+            return identity(type).bindTo(value);\n@@ -5112,1 +5115,5 @@\n-     * That is, it returns a zero primitive value, a {@code null}, or {@code void}.\n+     * If the requested type is a primitive type or {@code void}, it returns\n+     * a zero primitive value or {@code void}.\n+     * If the requested type is a {@linkplain Class#isPrimitiveValueType() primitive value type},\n+     * it returns a primitive object with the default value.\n+     * If the requested type is a reference type, it returns {@code null}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @compile --enable-preview --source ${jdk.version} MHZeroValue.java\n+ * @run testng\/othervm --enable-preview -XX:InlineFieldMaxFlatSize=128 MHZeroValue\n+ * @run testng\/othervm --enable-preview -XX:InlineFieldMaxFlatSize=0 MHZeroValue\n+ * @summary Test MethodHandles::zero, MethodHandles::empty and MethodHandles::constant\n+ *          on value classes.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import static java.lang.invoke.MethodType.*;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+public class MHZeroValue {\n+    static value class V {\n+        public boolean isEmpty() {\n+            return true;\n+        }\n+    }\n+\n+    static primitive class P {\n+        V empty;\n+        P() {\n+            this.empty = new V();\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] defaultValue() {\n+        return new Object[][] {\n+                \/\/ for any type T, default value is always the same as (new T[1])[0]\n+                new Object[] { int.class,               (new int[1])[0] },\n+                new Object[] { Integer.class,           (new Integer[1])[0] },\n+                new Object[] { P.class.asValueType(),   (new P[1])[0] },\n+                new Object[] { P.class.asPrimaryType(), (new P.ref[1])[0] },\n+                new Object[] { V.class,                 (new V[1])[0] },\n+        };\n+    }\n+    @Test(dataProvider = \"defaultValue\")\n+    public void zero(Class<?> type, Object value) throws Throwable {\n+        MethodHandle mh = MethodHandles.zero(type);\n+        assertEquals(mh.invoke(), value);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] primitives() {\n+        return new Object[][] {\n+                \/\/ int : Integer\n+                new Object[] { int.class,             Integer.class },\n+                \/\/ Point : Point.ref\n+                new Object[] { P.class.asValueType(), P.class.asPrimaryType() },\n+                new Object[] { null,                  V.class },\n+        };\n+    }\n+    @Test(dataProvider = \"primitives\")\n+    public void constant(Class<?> primitiveType, Class<?> refType) throws Throwable {\n+        if (primitiveType != null) {\n+            try {\n+                MethodHandles.constant(primitiveType, null);\n+                fail(\"Expected NPE thrown for \" + primitiveType.getName());\n+            } catch (NullPointerException e) {\n+            }\n+        }\n+\n+        try {\n+            MethodHandles.constant(refType, \"invalid value\");\n+            fail(\"Expected CCE thrown for \" + refType.getName());\n+        } catch (ClassCastException e) {}\n+    }\n+\n+    @DataProvider\n+    public static Object[][] emptyTypes() {\n+        Class<?> pref = P.class.asPrimaryType();\n+        Class<?> pval = P.class.asValueType();\n+        return new Object[][] {\n+                new Object[] { methodType(int.class, int.class, Object.class),     new V(), 0 },\n+                new Object[] { methodType(Integer.class, int.class, Object.class), new P(), null },\n+                new Object[] { methodType(pval, int.class, pref),                  null,    P.default },\n+                new Object[] { methodType(pref, int.class, pval),                  new P(), null },\n+                new Object[] { methodType(V.class, int.class, pval),               new P(), null },\n+                new Object[] { methodType(V.class, int.class, V.class),            new V(), null },\n+        };\n+    }\n+\n+    @Test(dataProvider = \"emptyTypes\")\n+    public void empty(MethodType mtype, Object param, Object value) throws Throwable {\n+        MethodHandle mh = MethodHandles.empty(mtype);\n+        assertEquals(mh.invoke(1, param), value);\n+    }\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/MHZeroValue.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}