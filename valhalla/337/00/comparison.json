{"files":[{"patch":"@@ -210,0 +210,9 @@\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciKlass::prototype_header\n+markWord ciKlass::prototype_header() const {\n+  assert(is_loaded(), \"not loaded\");\n+  GUARDED_VM_ENTRY(\n+    return get_Klass()->prototype_header();\n+  )\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -133,0 +133,2 @@\n+  markWord prototype_header() const;\n+\n","filename":"src\/hotspot\/share\/ci\/ciKlass.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-  if (obj_type->isa_inlinetype() && !obj_type->is_inlinetypeptr()) {\n+  if (obj_type->isa_inlinetype() || obj_type->is_inlinetypeptr()) {\n","filename":"src\/hotspot\/share\/opto\/locknode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2135,3 +2135,11 @@\n-  if (!EnableValhalla) { \/\/ CMH: Fix JDK-8255045\n-    Node* alloc = is_new_object_mark_load(phase);\n-    if (alloc != NULL && !(alloc->Opcode() == Op_Allocate && UseBiasedLocking)) {\n+  Node* alloc = is_new_object_mark_load(phase);\n+  if (alloc != NULL && !(alloc->Opcode() == Op_Allocate && UseBiasedLocking)) {\n+    if (EnableValhalla) {\n+      \/\/ The mark word may contain property bits (inline, flat, null-free)\n+      Node* klass_node = alloc->in(AllocateNode::KlassNode);\n+      const TypeKlassPtr* tkls = phase->type(klass_node)->is_klassptr();\n+      ciKlass* klass = tkls->klass();\n+      if (klass != NULL && klass->is_loaded() && tkls->klass_is_exact()) {\n+        return TypeX::make(klass->prototype_header().value());\n+      }\n+    } else {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1078,0 +1078,55 @@\n+\n+    \/\/ Test unsafe allocation\n+    @Test()\n+    public boolean test58(Class<?> c1, Class<?> c2) throws Exception {\n+        Object obj1 = U.allocateInstance(c1);\n+        Object obj2 = U.allocateInstance(c2);\n+        return obj1 == obj2;\n+    }\n+\n+    @DontCompile\n+    public void test58_verifier(boolean warmup) throws Exception {\n+        boolean res = test58(MyValue1.class, MyValue1.class);\n+        Asserts.assertTrue(res);\n+        res = test58(Object.class, MyValue1.class);\n+        Asserts.assertFalse(res);\n+        res = test58(MyValue1.class, Object.class);\n+        Asserts.assertFalse(res);\n+    }\n+\n+    \/\/ Test synchronization on unsafe inline type allocation\n+    @Test()\n+    public void test59(Class<?> c) throws Exception {\n+        Object obj = U.allocateInstance(c);\n+        synchronized (obj) {\n+\n+        }\n+    }\n+\n+    @DontCompile\n+    public void test59_verifier(boolean warmup) throws Exception {\n+        test59(Integer.class);\n+        try {\n+            test59(MyValue1.class);\n+            throw new RuntimeException(\"test59 failed: synchronization on inline type should not succeed\");\n+        } catch (IllegalMonitorStateException e) {\n+\n+        }\n+    }\n+\n+    \/\/ Test mark word load optimization on unsafe inline type allocation\n+    @Test()\n+    public boolean test60(Class<?> c1, Class<?> c2, boolean b1, boolean b2) throws Exception {\n+        Object obj1 = b1 ? new Object() : U.allocateInstance(c1);\n+        Object obj2 = b2 ? new Object() : U.allocateInstance(c2);\n+        return obj1 == obj2;\n+    }\n+\n+    @DontCompile\n+    public void test60_verifier(boolean warmup) throws Exception {\n+        Asserts.assertTrue(test60(MyValue1.class, MyValue1.class, false, false));\n+        Asserts.assertFalse(test60(MyValue1.class, MyValue2.class, false, false));\n+        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, false, true));\n+        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, true, false));\n+        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, true, true));\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -3626,0 +3626,22 @@\n+\n+    \/\/ Variant with non-scalarized inline type\n+    @Test()\n+    public static void test134(boolean b) {\n+        Object obj = null;\n+        if (b) {\n+            obj = MyValue2.createWithFieldsInline(rI, rD);\n+        }\n+        synchronized (obj) {\n+\n+        }\n+    }\n+\n+    @DontCompile\n+    public void test134_verifier(boolean warmup) {\n+        try {\n+            test134(true);\n+            throw new RuntimeException(\"test134 failed: no exception thrown\");\n+        } catch (IllegalMonitorStateException ex) {\n+            \/\/ Expected\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}