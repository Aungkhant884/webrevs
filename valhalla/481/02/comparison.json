{"files":[{"patch":"@@ -155,6 +155,8 @@\n-    private static final Function<Object, Object> CREATE_RESERVATION = new Function<>() {\n-        @Override\n-        public Object apply(Object key) {\n-            return new Object();\n-        }\n-    };\n+    private static class CacheHolder {\n+        static final Function<Object, Object> CREATE = new Function<>() {\n+            @Override\n+            public Object apply(Object key) {\n+                return new CacheHolder();\n+            }\n+        };\n+    }\n@@ -183,1 +185,1 @@\n-        Object speciesDataOrReservation = cache.computeIfAbsent(key, CREATE_RESERVATION);\n+        Object speciesDataOrReservation = cache.computeIfAbsent(key, CacheHolder.CREATE);\n@@ -188,1 +190,1 @@\n-        if (speciesDataOrReservation.getClass() == Object.class) {\n+        if (speciesDataOrReservation.getClass() == CacheHolder.class) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.Notes;\n@@ -2833,0 +2834,3 @@\n+            if (clazztype.tsym == syms.objectType.tsym && cdef == null && !tree.classDeclRemoved()) {\n+                log.note(tree.pos(), Notes.CantInstantiateObjectDirectly);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2854,1 +2854,6 @@\n-        result = tree;\n+        if (tree.clazz.type.tsym == syms.objectType.tsym) {\n+            Assert.check(tree.def == null && tree.encl == null);\n+            result = makeCall(make.Ident(syms.objectsType.tsym), names.newIdentity, List.nil());\n+        } else {\n+            result = tree;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3906,0 +3906,3 @@\n+\n+compiler.note.cant.instantiate.object.directly=\\\n+    Object cannot be instantiated directly; a subclass of Object will be instantiated instead, by invoking java.util.Objects.newIdentity()\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private static final Object DELETED = new Object();\n+    private static final Object DELETED = new Object() {};\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/IntHashTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+    public final Name newIdentity;\n@@ -284,0 +285,1 @@\n+        newIdentity = fromString(\"newIdentity\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-        final Object lock = new Object();\n+        final Object lock = new Object() {};\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/sjavac\/CompileJavaPackages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    static Object obj = new Object();\n+    static Object obj = new Object() {};\n@@ -42,1 +42,1 @@\n-        if (obj.getClass() == Object.class) {\n+        if (obj.getClass().getSuperclass() == Object.class) {\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestGetClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-                                        \"Object[Object@\" + TestHelper.DUMMY_CLASS_INSTANCE.objectField.hashCode() + \"]\"},\n+                                        \"Object[Objects$1@\" + TestHelper.DUMMY_CLASS_INSTANCE.objectField.hashCode() + \"]\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/ForObjectDataProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        new java.lang.Object().getClass().cast(hiddenClassObj);\n+        new java.lang.Object() {}.getClass().getSuperclass().cast(hiddenClassObj);\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/CastToParentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        java.lang.Object instance = new java.lang.Object();\n+        java.lang.Object instance = java.util.Objects.newIdentity();\n@@ -72,1 +72,1 @@\n-            if (!cce.getMessage().contains(\"class java.lang.Object cannot be cast to class Derived (java.lang.Object is in module java.base of loader 'bootstrap'; Derived is in unnamed module of loader 'app')\")) {\n+            if (!cce.getMessage().contains(\"class java.util.Objects$1 cannot be cast to class Derived (java.util.Objects$1 is in module java.base of loader 'bootstrap'; Derived is in unnamed module of loader 'app')\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/CCE_module_msg.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        output.shouldMatch(\"^\\\\s+\\\\d+:\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+java.lang.Object \" + moduleRegex + \"\\\\s*$\");\n+        output.shouldMatch(\"^\\\\s+\\\\d+:\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+java.util.Objects\\\\$1 \" + moduleRegex + \"\\\\s*$\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/ClassHistogramTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    private Object monitor = new Object();\n-    private final String OBJECT = \"a java.lang.Object\";\n+    private Object monitor = java.util.Objects.newIdentity();\n+    private final String OBJECT = \"a java.util.Objects$1\";\n","filename":"test\/hotspot\/jtreg\/serviceability\/tmtools\/jstack\/WaitNotifyThreadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,0 +182,2 @@\n+    private static class TestObject {}\n+\n@@ -186,1 +188,1 @@\n-        Assert.assertEquals(cs.getTarget().invoke(new Object(), \"class\"), Object.class);\n+        Assert.assertEquals(cs.getTarget().invoke(new TestObject(), \"class\"), TestObject.class);\n@@ -194,1 +196,1 @@\n-        Assert.assertNull(cs.getTarget().invoke(new Object(), \"DOES_NOT_EXIST\"));\n+        Assert.assertNull(cs.getTarget().invoke(new TestObject(), \"DOES_NOT_EXIST\"));\n@@ -201,1 +203,1 @@\n-        Assert.assertEquals(cs.getTarget().invoke(new Object()), Object.class);\n+        Assert.assertEquals(cs.getTarget().invoke(new TestObject()), TestObject.class);\n@@ -211,1 +213,1 @@\n-            cs.getTarget().invoke(new Object());\n+            cs.getTarget().invoke(new TestObject());\n","filename":"test\/jdk\/jdk\/dynalink\/BeanLinkerTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -180,0 +180,2 @@\n+    private static class TestObject {}\n+\n@@ -196,1 +198,1 @@\n-        Assert.assertEquals(cs.getTarget().invoke(new Object(), \"class\"), Object.class);\n+        Assert.assertEquals(cs.getTarget().invoke(new TestObject(), \"class\"), TestObject.class);\n@@ -215,1 +217,1 @@\n-        Assert.assertEquals(cs.getTarget().invoke(new Object(), \"class\"), Object.class);\n+        Assert.assertEquals(cs.getTarget().invoke(new TestObject(), \"class\"), TestObject.class);\n@@ -221,1 +223,1 @@\n-        testAutoLoadedLinkerInvoked(new Object(), \"toString\");\n+        testAutoLoadedLinkerInvoked(new TestObject(), \"toString\");\n","filename":"test\/jdk\/jdk\/dynalink\/TrustedDynamicLinkerFactoryTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        assertType(\"new Object().getClass().getSuperclass() \", \"Class<?>\");\n+        assertType(\"new Object() {}.getClass().getSuperclass().getSuperclass() \", \"Class<?>\");\n","filename":"test\/langtools\/jdk\/jshell\/TypeNameTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -512,1 +512,1 @@\n-        assertVarDeclRedefNoInit(\"Object\", \"o\", \"new Object()\", IGNORE_VALUE, \"null\");\n+        assertVarDeclRedefNoInit(\"Object\", \"o\", \"new String()\", IGNORE_VALUE, \"null\");\n","filename":"test\/langtools\/jdk\/jshell\/VariablesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        t.add(new Object());\n+        t.add(new Object() {});\n","filename":"test\/langtools\/tools\/javac\/T6873849.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-            Object exParam1 = new Object();\n+            Object exParam1 = new Object() {};\n@@ -21,1 +21,1 @@\n-                Object exParam1 = new Object();\n+                Object exParam1 = new Object() {};\n@@ -29,1 +29,1 @@\n-            Object exParam2 = new Object();\n+            Object exParam2 = new Object() {};\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/ResourceRedecl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-        Object v2 = new Object();\n+        Object v2 = new Object() {};\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrForVariable3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -18,1 +18,1 @@\n-            Object r = new Object();\n+            Object r = new Object() {};\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrVarRedeclaration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-    String s = (@T(1) @T(2) String) new Object();\n+    String s = (@T(1) @T(2) String) new Object() {};\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/InvalidRepAnnoOnCast.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n-1 error\n+InvalidRepAnnoOnCast.java:19:37: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: java.lang.Object, @InvalidRepAnnoOnCast.T(1),@InvalidRepAnnoOnCast.T(2) java.lang.String)\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/InvalidRepAnnoOnCast.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    Object e3 = new @DA Object();\n+    Object e3 = new @DA Object() {};\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/arrays\/DeclarationAnnotation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,0 @@\n- *\n@@ -25,1 +24,1 @@\n-public primitive class PrimitiveWithInterface implements InterfaceSpecified {\n+\/\/ key: compiler.note.cant.instantiate.object.directly\n@@ -27,0 +26,2 @@\n+class CantInstantiateObjectDirectly {\n+    { new Object(); }\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantInstantiateObjectDirectly.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveWithInterface.java","status":"copied"},{"patch":"@@ -16,1 +16,1 @@\n-        Object[] objArray = {new Object()};\n+        Object[] objArray = {new Object() {}};\n","filename":"test\/langtools\/tools\/javac\/generics\/UnsoundInference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-        super(new Object<>());\n+        super(new Object<>() {});\n","filename":"test\/langtools\/tools\/javac\/generics\/diamond\/8065986\/T8065986a.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-        this(new Object<>());\n+        this(new Object<>() {});\n","filename":"test\/langtools\/tools\/javac\/generics\/diamond\/8065986\/T8065986b.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-        m(w.get()).take(new Object());\n+        m(w.get()).take(new Object() {});\n","filename":"test\/langtools\/tools\/javac\/generics\/inference\/CaptureLowerBoundDeref.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CaptureLowerBoundDeref.java:22:19: compiler.err.cant.apply.symbol: kindname.method, take, compiler.misc.type.captureof: 1, ?, java.lang.Object, kindname.interface, CaptureLowerBoundDeref.K<T>, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: java.lang.Object, compiler.misc.type.captureof: 1, ?))\n+CaptureLowerBoundDeref.java:22:19: compiler.err.cant.apply.symbol: kindname.method, take, compiler.misc.type.captureof: 1, ?, compiler.misc.anonymous.class: java.lang.Object, kindname.interface, CaptureLowerBoundDeref.K<T>, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: java.lang.Object, compiler.misc.type.captureof: 1, ?))\n","filename":"test\/langtools\/tools\/javac\/generics\/inference\/CaptureLowerBoundDeref.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-        NewBeforeOuterConstructed2 c = new NewBeforeOuterConstructed2(new Object());\n+        NewBeforeOuterConstructed2 c = new NewBeforeOuterConstructed2(new Object() {});\n","filename":"test\/langtools\/tools\/javac\/implicitThis\/NewBeforeOuterConstructed2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-                    \".addComponent(new Object())\\n\" +\n+                    \".addComponent(new Object() {})\\n\" +\n@@ -122,1 +122,1 @@\n-                    \".addComponent(new Object())\");\n+                    \".addComponent(new Object() {})\");\n","filename":"test\/langtools\/tools\/javac\/lambda\/T8031967.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        Object o1 = (SAM)()->new Object();\n+        Object o1 = (SAM)()->new Object() {};\n","filename":"test\/langtools\/tools\/javac\/lambda\/TargetType38.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-TargetType38.java:19:30: compiler.err.prob.found.req: (compiler.misc.incompatible.ret.type.in.lambda: (compiler.misc.inconvertible.types: java.lang.Object, TargetType38.I))\n+TargetType38.java:19:30: compiler.err.prob.found.req: (compiler.misc.incompatible.ret.type.in.lambda: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: java.lang.Object, TargetType38.I))\n","filename":"test\/langtools\/tools\/javac\/lambda\/TargetType38.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    final Object lock = new Object();\n+    final Object lock = new Object() {};\n","filename":"test\/langtools\/tools\/javac\/lambda\/self_initializer\/T8024809\/SelfInitializerInLambdaTesta.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-        m(new A(new Object()));\n+        m(new A(new Object() {}));\n","filename":"test\/langtools\/tools\/javac\/lambda\/speculative\/Main.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-    List<X.ref> ls = new Object();\n+    List<X.ref> ls = new Object() {};\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckQuestionInMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckQuestionInMessages.java:12:22: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, java.util.List<X.ref>)\n+CheckQuestionInMessages.java:12:22: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.anonymous.class: java.lang.Object, java.util.List<X.ref>)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckQuestionInMessages.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}