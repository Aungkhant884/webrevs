{"files":[{"patch":"@@ -125,0 +125,5 @@\n+    \/**\n+     * Flag that marks a value based class.\n+     *\/\n+    public static final long VALUE_BASED = 1L<<19;\n+\n@@ -473,0 +478,1 @@\n+        VALUEBASED(Flags.VALUE_BASED),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -285,0 +285,5 @@\n+        \/**\n+         * Warn about synchronization attempts on instances of @ValueBased classes.\n+         *\/\n+        SYNCHRONIZE(\"synchronize\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -461,0 +461,7 @@\n+    \/**\n+     * Is this a value based class ?\n+     *\/\n+    public boolean isValueBased() {\n+        return (flags() & VALUE_BASED) != 0;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -223,0 +223,1 @@\n+    public final Type valueBasedType;\n@@ -587,0 +588,1 @@\n+        valueBasedType = enterClass(\"jdk.internal.ValueBased\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2015,0 +2015,4 @@\n+    public boolean isValueBased(Type t) {\n+        return t != null && t.tsym != null && t.tsym.isValueBased();\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1740,0 +1740,3 @@\n+        if (env.info.lint.isEnabled(LintCategory.SYNCHRONIZE) && types.isValueBased(tree.lock.type)) {\n+            log.warning(LintCategory.SYNCHRONIZE, tree.pos(), Warnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+        }\n@@ -2421,0 +2424,34 @@\n+            if (localEnv.info.lint.isEnabled(LintCategory.SYNCHRONIZE)) {\n+                final Symbol method = TreeInfo.symbolFor(tree.meth);\n+                if (method != null && method.kind != ERR && method.owner == syms.objectType.tsym) {\n+                    \/\/ Warn about ill conceived attempts to synchronize on instances of value based classes.\n+                    boolean superCallOnValueReceiver = types.isValueBased(env.enclClass.sym.type)\n+                            && (tree.meth.hasTag(SELECT))\n+                            && ((JCFieldAccess)tree.meth).selected.hasTag(IDENT)\n+                            && TreeInfo.name(((JCFieldAccess)tree.meth).selected) == names._super;\n+                    if (types.isValueBased(qualifier) || superCallOnValueReceiver) {\n+                        boolean shouldComplain = false;\n+                        List<Type> parameterTypes = method.type.getParameterTypes();\n+                        int paramSize = parameterTypes.size();\n+                        Name name = method.name;\n+                        switch (name.toString()) {\n+                            case \"wait\":\n+                                if (paramSize == 0\n+                                        || (types.isSameType(parameterTypes.head, syms.longType) &&\n+                                        (paramSize == 1 || (paramSize == 2 && types.isSameType(parameterTypes.tail.head, syms.intType))))) {\n+                                    shouldComplain = true;\n+                                }\n+                                break;\n+                            case \"notify\":\n+                            case \"notifyAll\":\n+                                if (paramSize == 0)\n+                                    shouldComplain = true;\n+                                break;\n+                        }\n+                        if (shouldComplain) {\n+                            log.warning(LintCategory.SYNCHRONIZE, tree.pos(), Warnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+                        }\n+                    }\n+                }\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -3044,0 +3044,2 @@\n+        }  else if (a.annotationType.type.tsym == syms.valueBasedType.tsym) {\n+            s.flags_field |= Flags.VALUE_BASED;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1440,0 +1440,2 @@\n+                } else if (sym.kind == TYP && proxy.type.tsym == syms.valueBasedType.tsym) {\n+                    sym.flags_field |= VALUE_BASED;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3745,0 +3745,4 @@\n+\n+compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class=\\\n+    attempt to synchronize on an instance of a value based class\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -264,0 +264,3 @@\n+javac.opt.Xlint.desc.synchronize=\\\n+    Warn about synchronization attempts on instances of @ValueBased classes.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+\/\/ options: -Xlint:synchronize\n+\n+class AttemptToSynchronizeOnInstanceOfVbc {\n+    void foo(Integer i) {\n+        synchronized(i) {\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AttemptToSynchronizeOnInstanceOfVbc.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=AuxilliaryAbuseOfVbc.out --patch-module java.base=${test.src} -XDrawDiagnostics -Werror -Xlint:synchronize AuxilliaryAbuseOfVbc.java\n+ *\/\n+\n+@jdk.internal.ValueBased\n+class SomeVbc {}\n+\n+public final class AuxilliaryAbuseOfVbc {\n+\n+    void abuseVbc(SomeVbc vbc) throws InterruptedException {\n+\n+        synchronized(this) {           \/\/ OK\n+            synchronized (vbc) {       \/\/ WARN\n+\n+                vbc.wait();           \/\/ WARN\n+                wait();               \/\/ OK\n+                this.wait();          \/\/ OK\n+                super.wait();         \/\/ OK\n+\n+                vbc.notify();         \/\/ WARN\n+                notify();             \/\/ OK\n+                this.notify();        \/\/ OK\n+                super.notify();       \/\/ OK\n+\n+                vbc.notifyAll();      \/\/ WARN\n+                notifyAll();          \/\/ OK\n+                this.notifyAll();     \/\/ OK\n+                super.notifyAll();    \/\/ OK\n+\n+                vbc.wait(10);         \/\/ WARN\n+                wait(10);             \/\/ OK\n+                this.wait(10);        \/\/ OK\n+                super.wait(10);       \/\/ OK\n+\n+                vbc.wait(10L, 10);    \/\/ WARN\n+                wait(10L, 10);        \/\/ OK\n+                this.wait(10L, 10);   \/\/ OK\n+                super.wait(10L, 10);  \/\/ OK\n+\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/AuxilliaryAbuseOfVbc.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+AuxilliaryAbuseOfVbc.java:16:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+AuxilliaryAbuseOfVbc.java:18:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+AuxilliaryAbuseOfVbc.java:23:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+AuxilliaryAbuseOfVbc.java:28:30: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+AuxilliaryAbuseOfVbc.java:33:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+AuxilliaryAbuseOfVbc.java:38:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+1 error\n+6 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/AuxilliaryAbuseOfVbc.out","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:synchronize ExternalAbuseOfVbc.java\n+ * @compile\/ref=LintModeOffAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:-synchronize ExternalAbuseOfVbc.java\n+ *\/\n+\n+public final class ExternalAbuseOfVbc {\n+\n+    final Integer val = Integer.valueOf(42);\n+    final String ref = \"String\";\n+\n+    void abuseVbc() throws InterruptedException {\n+\n+        synchronized(ref) {      \/\/ OK\n+            synchronized (val) { \/\/ WARN\n+\n+                ref.wait();      \/\/ OK\n+                val.wait();      \/\/ WARN\n+\n+                ref.notify();    \/\/ OK\n+                val.notify();    \/\/ WARN\n+\n+                ref.notifyAll(); \/\/ OK\n+                val.notifyAll(); \/\/ WARN\n+\n+                ref.wait(10);    \/\/ OK\n+                val.wait(10);    \/\/ WARN\n+\n+                ref.wait(Integer.valueOf(10)); \/\/ OK\n+                val.wait(Integer.valueOf(10)); \/\/ WARN\n+\n+                ref.wait(Long.valueOf(10));    \/\/ OK\n+                val.wait(Long.valueOf(10));    \/\/ WARN\n+\n+                ref.wait(10L);  \/\/ OK\n+                val.wait(10L);  \/\/ WARN\n+\n+                ref.wait(10L, 10); \/\/ OK\n+                val.wait(10L, 10); \/\/ WARN\n+\n+                ref.wait(Long.valueOf(10), Integer.valueOf(10)); \/\/ OK\n+                val.wait(Long.valueOf(10), Integer.valueOf(10)); \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+ExternalAbuseOfVbc.java:17:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:20:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:23:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:26:30: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:29:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:32:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:35:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:38:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:41:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:44:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+1 error\n+10 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.out","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=JdkInternalAbuseOfVbc.out --patch-module java.base=${test.src} -XDrawDiagnostics -Werror -Xlint:synchronize OwnAbuseOfVbc.java JdkInternalAbuseOfVbc.java\n+ *\/\n+\n+package java.lang;\n+\n+public final class JdkInternalAbuseOfVbc {\n+\n+    final String ref = \"String\";\n+\n+    void abuseVbc(OwnAbuseOfVbc vbc) throws InterruptedException {\n+\n+        synchronized(this) {           \/\/ OK\n+            synchronized (vbc) {     \/\/ WARN\n+\n+                this.wait();           \/\/ OK\n+                vbc.wait();            \/\/ WARN\n+\n+                this.notify();         \/\/ OK\n+                vbc.notify();          \/\/ WARN\n+\n+                this.notifyAll();      \/\/ OK\n+                vbc.notifyAll();       \/\/ WARN\n+\n+                this.wait(10);         \/\/ OK\n+                vbc.wait(10);          \/\/ WARN\n+\n+                this.wait(10L, 10);    \/\/ OK\n+                vbc.wait(10L, 10);     \/\/ WARN\n+\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/JdkInternalAbuseOfVbc.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+OwnAbuseOfVbc.java:17:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:20:21: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:21:26: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:22:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:25:23: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:26:28: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:27:29: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:30:26: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:31:31: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:32:32: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:35:21: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:36:26: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:37:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:40:21: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:41:26: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:42:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+JdkInternalAbuseOfVbc.java:17:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+JdkInternalAbuseOfVbc.java:20:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+JdkInternalAbuseOfVbc.java:23:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+JdkInternalAbuseOfVbc.java:26:30: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+JdkInternalAbuseOfVbc.java:29:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+JdkInternalAbuseOfVbc.java:32:25: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+1 error\n+22 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/JdkInternalAbuseOfVbc.out","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/lint\/LintModeOffAbuseOfVbc.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=OwnAbuseOfVbc.out --patch-module java.base=${test.src} -XDrawDiagnostics -Werror -Xlint:synchronize OwnAbuseOfVbc.java\n+ *\/\n+package java.lang;\n+\n+@jdk.internal.ValueBased\n+public final class OwnAbuseOfVbc {\n+\n+    final String ref = \"String\";\n+\n+    void abuseVbc() throws InterruptedException {\n+\n+        synchronized(ref) {           \/\/ OK\n+            synchronized (this) {     \/\/ WARN\n+\n+                ref.wait();           \/\/ OK\n+                wait();               \/\/ WARN\n+                this.wait();          \/\/ WARN\n+                super.wait();         \/\/ WARN\n+\n+                ref.notify();         \/\/ OK\n+                notify();             \/\/ WARN\n+                this.notify();        \/\/ WARN\n+                super.notify();       \/\/ WARN\n+\n+                ref.notifyAll();      \/\/ OK\n+                notifyAll();          \/\/ WARN\n+                this.notifyAll();     \/\/ WARN\n+                super.notifyAll();    \/\/ WARN\n+\n+                ref.wait(10);         \/\/ OK\n+                wait(10);             \/\/ WARN\n+                this.wait(10);        \/\/ WARN\n+                super.wait(10);       \/\/ WARN\n+\n+                ref.wait(10L, 10);    \/\/ OK\n+                wait(10L, 10);        \/\/ WARN\n+                this.wait(10L, 10);   \/\/ WARN\n+                super.wait(10L, 10);  \/\/ WARN\n+\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/OwnAbuseOfVbc.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+OwnAbuseOfVbc.java:17:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:20:21: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:21:26: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:22:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:25:23: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:26:28: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:27:29: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:30:26: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:31:31: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:32:32: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:35:21: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:36:26: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:37:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:40:21: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:41:26: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+OwnAbuseOfVbc.java:42:27: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+1 error\n+16 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/OwnAbuseOfVbc.out","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"}]}