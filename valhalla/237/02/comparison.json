{"files":[{"patch":"@@ -128,0 +128,1 @@\n+            values.add(LintCategory.SYNCHRONIZATION);\n@@ -285,0 +286,5 @@\n+        \/**\n+         * Warn about synchronization attempts on instances of @ValueBased classes.\n+         *\/\n+        SYNCHRONIZATION(\"synchronization\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -223,0 +223,1 @@\n+    public final Type valueBasedType;\n@@ -587,0 +588,1 @@\n+        valueBasedType = enterClass(\"jdk.internal.ValueBased\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1740,0 +1740,3 @@\n+        if (env.info.lint.isEnabled(LintCategory.SYNCHRONIZATION) && isValueBased(tree.lock.type)) {\n+            log.warning(LintCategory.SYNCHRONIZATION, tree.pos(), Warnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+        }\n@@ -1743,0 +1746,12 @@\n+        \/\/ where\n+        private boolean isValueBased(Type t) {\n+            if (t != null && t.tsym != null) {\n+                for (Attribute.Compound a: t.tsym.getDeclarationAttributes()) {\n+                    if (a.type.tsym == syms.valueBasedType.tsym) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3745,0 +3745,4 @@\n+\n+compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class=\\\n+    attempt to synchronize on an instance of a value-based class\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-    Warn about potentially unsafe vararg methods\n+    Warn about potentially unsafe vararg methods.\n@@ -262,1 +262,4 @@\n-    Warn about use of preview language features\n+    Warn about use of preview language features.\n+\n+javac.opt.Xlint.desc.synchronization=\\\n+    Warn about synchronization attempts on instances of value-based classes.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+\/\/ options: -Xlint:synchronization\n+\n+class AttemptToSynchronizeOnInstanceOfVbc {\n+    void foo(Integer i) {\n+        synchronized(i) {\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AttemptToSynchronizeOnInstanceOfVbc.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint ExternalAbuseOfVbc.java\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:all ExternalAbuseOfVbc.java\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:synchronization ExternalAbuseOfVbc.java\n+ * @compile\/ref=LintModeOffAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:-synchronization ExternalAbuseOfVbc.java\n+ *\/\n+\n+public final class ExternalAbuseOfVbc {\n+\n+    final Integer val = Integer.valueOf(42);\n+    final String ref = \"String\";\n+\n+    void abuseVbc() {\n+        synchronized(ref) {      \/\/ OK\n+            synchronized (val) { \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+ExternalAbuseOfVbc.java:18:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+1 error\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=JdkInternalAbuseOfVbc.out --patch-module java.base=${test.src} -XDrawDiagnostics -Werror -Xlint SomeVbc.java JdkInternalAbuseOfVbc.java\n+ *\/\n+\n+package java.lang;\n+\n+public final class JdkInternalAbuseOfVbc {\n+\n+    public JdkInternalAbuseOfVbc() {}\n+\n+    void abuseVbc(SomeVbc vbc) {\n+\n+        synchronized(this) {           \/\/ OK\n+            synchronized (vbc) {       \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/JdkInternalAbuseOfVbc.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+SomeVbc.java:38:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+SomeVbc.java:49:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+JdkInternalAbuseOfVbc.java:17:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+1 error\n+3 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/JdkInternalAbuseOfVbc.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/lint\/LintModeOffAbuseOfVbc.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+@jdk.internal.ValueBased\n+public final class SomeVbc {\n+\n+    public SomeVbc() {}\n+\n+    final String ref = \"String\";\n+\n+    void abuseVbc() {\n+\n+        synchronized(ref) {           \/\/ OK\n+            synchronized (this) {     \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n+final class AuxilliaryAbuseOfVbc {\n+\n+    void abuseVbc(SomeVbc vbc) {\n+\n+        synchronized(this) {           \/\/ OK\n+            synchronized (vbc) {       \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/SomeVbc.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}