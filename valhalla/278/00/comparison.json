{"files":[{"patch":"@@ -42,1 +42,1 @@\n-@Retention(RetentionPolicy.RUNTIME)\n+@Retention(RetentionPolicy.SOURCE)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/RestrictedType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-                        (enclTr.getKind() == JCTree.Kind.MEMBER_SELECT ||\n+                        ((enclTr.getKind() == JCTree.Kind.MEMBER_SELECT  && !enclTy.isReferenceProjection()) ||  \/\/ .ref is only a pseudo member select.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1273,2 +1273,4 @@\n-                        Assert.check(((ClassSymbol)((ClassType)sym.type).tsym).projection == type.tsym);\n-                        sym.flags_field |= RESTRICTED_FIELD;\n+                        if (types.flattenWithTypeRestrictions) {\n+                            Assert.check(((ClassSymbol)((ClassType)sym.type).tsym).projection == type.tsym);\n+                            sym.flags_field |= RESTRICTED_FIELD;\n+                        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.RestrictedType;\n+\n+class PointBox {\n+\n+    static inline class Point {\n+        public double x;\n+        public double y;\n+        public Point(double x, double y) { this.x = x; this.y = y; }\n+    }\n+\n+    @RestrictedType(\"QPoint;\")\n+    public Object p368;\n+\n+    public static void main(String... args) {\n+        PointBox b = new PointBox();\n+        if (b.p368 != new Point(0,0)) throw new RuntimeException();\n+        b.p368 = new Point(1.0, 2.0);\n+        if (b.p368 != new Point(1.0, 2.0)) throw new RuntimeException();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/PointBox.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257028\n+ * @summary Javac crashes on separate compilation.\n+ * @compile PointBox.java PointBoxTest.java\n+ * @compile PointBoxTest.java\n+ *\/\n+\n+public class PointBoxTest {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 1000; i++) {\n+            test1();\n+            test2();\n+            test3();\n+        }\n+    }\n+\n+    static void test1() {\n+        double x = 0.0D;\n+        for (int i = 0; i < 50000; i++) {\n+            PointBox pb = new PointBox();\n+            x = ((PointBox.Point)(pb.p368)).x;\n+            pb.p368 = new PointBox.Point(2.0, 3.0);\n+        }\n+    }\n+\n+    static void test2() {\n+        for (int i = 0; i < 50000; i++) {\n+            PointBox pb = new PointBox();\n+            pb.p368 = new PointBox.Point(2.0, 3.0);\n+        }\n+    }\n+\n+    static PointBox.Point.ref spoint = new PointBox.Point(1.0, 2.0);\n+\n+    static void test3() {\n+        spoint = null;\n+        for (int i = 0; i < 50000; i++) {\n+            PointBox pb = new PointBox();\n+            pb.p368 = spoint;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/PointBoxTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8255856\n+ * @bug 8255856 8257028\n@@ -30,4 +30,3 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile RestrictedTypeAnnotationCodegenTest.java\n- * @run main\/othervm -Xverify:none RestrictedTypeAnnotationCodegenTest\n- * @modules jdk.compiler\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @compile -XDallowWithFieldOperator Point.java\n+ * @run main RestrictedTypeAnnotationCodegenTest\n@@ -36,3 +35,2 @@\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n@@ -42,6 +40,0 @@\n-final class PointBox {\n-\n-    @RestrictedType(\"QPoint;\") Object p;\n-\n-}\n-\n@@ -50,3 +42,2 @@\n-    public static void main(String [] args) {\n-        new RestrictedTypeAnnotationCodegenTest().run();\n-    }\n+    inline class Point {}\n+    inline class Line {}\n@@ -54,13 +45,2 @@\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"PointBox.class\").toString() };\n-        runCheck(params, new String [] {\n-         \"java.lang.Object p;\",\n-         \"descriptor: Ljava\/lang\/Object;\",\n-         \"RestrictedField: #11                    \/\/ QPoint;\",\n-         \"RuntimeVisibleTypeAnnotations:\",\n-         \"0: #14(#15=s#11): FIELD\",\n-         \"java.lang.invoke.RestrictedType(\",\n-         \"value=\\\"QPoint;\\\"\"\n-         });\n+    @RestrictedType(\"QRestrictedTypeAnnotationCodegenTest$Line;\")\n+    public Object jloFld = null;\n@@ -68,1 +48,2 @@\n-     }\n+    @RestrictedType(\"QRestrictedTypeAnnotationCodegenTest$Point;\")\n+    public Point.ref refProjFld = null;\n@@ -70,3 +51,2 @@\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n+    public static void main(String[] args) throws Exception {\n+        ClassFile cls = ClassFile.read(InlineNestingAttributesTest.class.getResourceAsStream(\"RestrictedTypeAnnotationCodegenTest.class\"));\n@@ -74,11 +54,14 @@\n-        System.out.println(\"Checking javap\");\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        System.out.println(\"Javap = \" + out);\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n+        int goodFlds = 0;\n+        for (Field fld: cls.fields) {\n+            if (fld.getName(cls.constant_pool).equals(\"jloFld\")) {\n+               String desc = fld.descriptor.getValue(cls.constant_pool);\n+               RestrictedField_attribute rfa =\n+                    (RestrictedField_attribute) fld.attributes.get(Attribute.RestrictedField);\n+               if (rfa.getRestrictedType(cls.constant_pool).equals(\"QRestrictedTypeAnnotationCodegenTest$Line;\") && desc.equals(\"Ljava\/lang\/Object;\"))\n+                    goodFlds++;\n+            } else if (fld.getName(cls.constant_pool).equals(\"refProjFld\")) {\n+               String desc = fld.descriptor.getValue(cls.constant_pool);\n+               RestrictedField_attribute rfa =\n+                    (RestrictedField_attribute) fld.attributes.get(Attribute.RestrictedField);\n+               if (rfa.getRestrictedType(cls.constant_pool).equals(\"QRestrictedTypeAnnotationCodegenTest$Point;\") && desc.equals(\"LRestrictedTypeAnnotationCodegenTest$Point$ref;\"))\n+                    goodFlds++;\n@@ -87,3 +70,3 @@\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n+        if (goodFlds != 2) {\n+            throw new AssertionError(\"Lookup for 2 fields failed: Found only \" + goodFlds);\n+        }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RestrictedTypeAnnotationCodegenTest.java","additions":31,"deletions":48,"binary":false,"changes":79,"status":"modified"}]}