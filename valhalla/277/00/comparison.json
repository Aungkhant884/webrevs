{"files":[{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.invoke;\n+\n+import java.lang.annotation.*;\n+import static java.lang.annotation.ElementType.*;\n+\n+\/**\n+ * Annotation to facilitate type-restrictions experiments.\n+ *\n+ * When javac generates code for a field whose type is annotated by @RestrictedType(\"QFoo;\"),\n+ * it generates a RestrictedField attribute pointing to a Utf8 constant representing\n+ * the given String.\n+\n+ * The @RestrictedType annotation supports ad hoc attribute generation,\n+ * for more fine-grained control.\n+ *\n+*\/\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE_USE)\n+public @interface RestrictedType {\n+    \/**\n+     * @return the type descriptor string to be encoded in the RestrictedField attribute as a Utf8 constant\n+     *\/\n+    String value();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/RestrictedType.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -226,0 +226,1 @@\n+    public final Type restrictedTypeType;\n@@ -598,0 +599,1 @@\n+        restrictedTypeType = enterClass(\"java.lang.invoke.RestrictedType\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -977,0 +977,1 @@\n+        int restrictedFieldDescriptor = 0;\n@@ -982,0 +983,9 @@\n+            for (Attribute.Compound anno : v.type.getAnnotationMirrors()) {\n+                if (anno.type.tsym == syms.restrictedTypeType.tsym) {\n+                    Attribute member = anno.member(names.value);\n+                    Assert.check(member.type.tsym == syms.stringType.tsym);\n+                    String utf8 = (String) member.getValue();\n+                    restrictedFieldDescriptor = poolWriter.putName(names.fromString(utf8));\n+                    emitRestrictedField = true;\n+                }\n+            }\n@@ -994,1 +1004,5 @@\n-            databuf.appendChar(poolWriter.putDescriptor(v));\n+            if (types.flattenWithTypeRestrictions && v.type.isValue()) {\n+                databuf.appendChar(poolWriter.putDescriptor(v));\n+            }   else {\n+                databuf.appendChar(restrictedFieldDescriptor);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255856\n+ * @summary Generate RestrictedField attributes from annotations\n+ * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n+ * @compile RestrictedTypeAnnotationCodegenTest.java\n+ * @run main\/othervm -Xverify:none RestrictedTypeAnnotationCodegenTest\n+ * @modules jdk.compiler\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Paths;\n+\n+import java.lang.invoke.RestrictedType;\n+\n+final class PointBox {\n+\n+    @RestrictedType(\"QPoint;\") Object p;\n+\n+}\n+\n+public class RestrictedTypeAnnotationCodegenTest {\n+\n+    public static void main(String [] args) {\n+        new RestrictedTypeAnnotationCodegenTest().run();\n+    }\n+\n+    void run() {\n+        String [] params = new String [] { \"-v\",\n+                                            Paths.get(System.getProperty(\"test.classes\"),\n+                                                \"PointBox.class\").toString() };\n+        runCheck(params, new String [] {\n+         \"java.lang.Object p;\",\n+         \"descriptor: Ljava\/lang\/Object;\",\n+         \"RestrictedField: #11                    \/\/ QPoint;\",\n+         \"RuntimeVisibleTypeAnnotations:\",\n+         \"0: #14(#15=s#11): FIELD\",\n+         \"java.lang.invoke.RestrictedType(\",\n+         \"value=\\\"QPoint;\\\"\"\n+         });\n+\n+     }\n+\n+     void runCheck(String [] params, String [] expectedOut) {\n+        StringWriter s;\n+        String out;\n+\n+        System.out.println(\"Checking javap\");\n+        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n+            com.sun.tools.javap.Main.run(params, pw);\n+            out = s.toString();\n+        }\n+        System.out.println(\"Javap = \" + out);\n+        int errors = 0;\n+        for (String eo: expectedOut) {\n+            if (!out.contains(eo)) {\n+                System.err.println(\"Match not found for string: \" + eo);\n+                errors++;\n+            }\n+        }\n+         if (errors > 0) {\n+             throw new AssertionError(\"Unexpected javap output: \" + out);\n+         }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RestrictedTypeAnnotationCodegenTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}