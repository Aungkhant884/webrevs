{"files":[{"patch":"@@ -633,1 +633,1 @@\n-        klass->class_loader_data()->name()->as_C_string());\n+        klass->class_loader_data()->loader_name());\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package runtime.valhalla.inlinetypes;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.JDKToolFinder;\n+\n+\/*\n+ * @test\n+ * @summary Test the VM.class_print_layout command\n+ * @library \/test\/lib\n+ * @compile ClassPrintLayoutDcmd.java Point.java\n+ * @run main\/othervm runtime.valhalla.inlinetypes.ClassPrintLayoutDcmd\n+ *\/\n+\n+public primitive class ClassPrintLayoutDcmd {\n+    static primitive class Line {\n+        Point p1, p2;\n+        Line() {\n+            this.p1 = this.p2 = Point.createPoint(0, 1);\n+        }\n+    }\n+    static {\n+        try {\n+            Class.forName(Line.class.getName());\n+        } catch(Throwable e) {\n+            throw new RuntimeException(\"failed to find class\");\n+        }\n+    }\n+    static ProcessBuilder pb = new ProcessBuilder();\n+\n+    static void testCmd(String arg, int expectExitCode, String... expectStrings) throws Exception {\n+        \/\/ Grab my own PID\n+        String pid = Long.toString(ProcessTools.getProcessId());\n+\n+        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.class_print_layout\", arg });\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(expectExitCode);\n+        for (String expectString : expectStrings) {\n+            output.shouldContain(expectString);\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        testCmd(\"foo\/bar\", 0, \"\");\n+        testCmd(\"\", 1, \"IllegalArgumentException\", \"mandatory\");\n+        testCmd(\"java\/lang\/Object\", 0, \"java\/lang\/Object\", \"@bootstrap\");\n+        testCmd(\"java\/lang\/Class\", 0, \"java\/lang\/Class\", \"@bootstrap\");\n+        testCmd(\"runtime\/valhalla\/inlinetypes\/ClassPrintLayoutDcmd$Line\", 0, \"@app\", \"p1\", \"p2\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassPrintLayoutDcmd.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}