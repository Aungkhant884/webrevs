{"files":[{"patch":"@@ -1930,0 +1930,28 @@\n+        \/\/ Check if any users are blackholes. If so, rewrite them to use either the\n+        \/\/ allocated box, or individual components, instead of the inline type node\n+        \/\/ that goes away.\n+        for (DUIterator i = vt->outs(); vt->has_out(i); i++) {\n+          if (vt->out(i)->is_Blackhole()) {\n+            BlackholeNode* bh = vt->out(i)->as_Blackhole();\n+\n+            \/\/ Unlink the old input\n+            int idx = bh->find_edge(vt);\n+            assert(idx != -1, \"The edge should be there\");\n+            bh->del_req(idx);\n+            --i;\n+\n+            if (vt->is_allocated(&igvn)) {\n+              \/\/ Already has the allocated instance, blackhole that\n+              bh->add_req(vt->get_oop());\n+            } else {\n+              \/\/ Not allocated yet, blackhole the components\n+              for (uint c = 0; c < vt->field_count(); c++) {\n+                bh->add_req(vt->field_value(c));\n+              }\n+            }\n+\n+            \/\/ Node modified, record for IGVN\n+            igvn.record_for_igvn(bh);\n+          }\n+        }\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1357,1 +1357,3 @@\n-    : MemBarNode(C, alias_idx, precedent) {}\n+    : MemBarNode(C, alias_idx, precedent) {\n+    init_class_id(Class_Blackhole);\n+  }\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -671,0 +671,1 @@\n+        DEFINE_CLASS_ID(Blackhole,        MemBar, 2)\n@@ -848,0 +849,1 @@\n+  DEFINE_CLASS_QUERY(Blackhole)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package runtime.valhalla.inlinetypes;\n+\n+\/*\n+ * @test BlackholeTest\n+ * @summary Check that blackholes work with inline types\n+ * @run main\/othervm\n+ *      -Xbatch\n+ *      -XX:+UnlockExperimentalVMOptions\n+ *      -XX:CompileCommand=blackhole,runtime\/valhalla\/inlinetypes\/BlackholeTest.blackhole\n+ *      runtime.valhalla.inlinetypes.BlackholeTest\n+ *\/\n+\n+public class BlackholeTest {\n+    static primitive class MyValue {\n+        int x = 0;\n+    }\n+\n+    static MyValue v;\n+    static volatile MyValue vv;\n+\n+    public static void main(String[] args) {\n+        for (int c = 0; c < 5; c++) {\n+            testNew();\n+            testDefault();\n+            testField();\n+            testVolatileField();\n+        }\n+    }\n+\n+    private static void testNew() {\n+        for (int c = 0; c < 100000; c++) {\n+            blackhole(new MyValue());\n+        }\n+    }\n+\n+    private static void testDefault() {\n+        for (int c = 0; c < 100000; c++) {\n+            blackhole(MyValue.default);\n+        }\n+    }\n+\n+    private static void testField() {\n+        for (int c = 0; c < 100000; c++) {\n+            blackhole(v);\n+        }\n+    }\n+\n+    private static void testVolatileField() {\n+        for (int c = 0; c < 100000; c++) {\n+            blackhole(vv);\n+        }\n+    }\n+\n+    public static void blackhole(MyValue v) {\n+        \/\/ Should be empty\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/BlackholeTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}