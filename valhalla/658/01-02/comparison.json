{"files":[{"patch":"@@ -58,0 +58,19 @@\n+    enum TestResult {\n+        COMPILE_OK,\n+        COMPILE_WITH_WARNING,\n+        ERROR\n+    }\n+\n+    void testHelper(String[] compilerOptions, String diagsMessage, TestResult testResult, String code) {\n+        setCompileOptions(compilerOptions);\n+        if (testResult != TestResult.COMPILE_OK) {\n+            if (testResult == TestResult.COMPILE_WITH_WARNING) {\n+                assertOKWithWarning(diagsMessage, code);\n+            } else {\n+                assertFail(diagsMessage, code);\n+            }\n+        } else {\n+            assertOK(code);\n+        }\n+    }\n+\n@@ -59,17 +78,46 @@\n-        setCompileOptions(LINT_OPTIONS);\n-        assertOKWithWarning(\"compiler.warn.universal.variable.cannot.be.assigned.null\",\n-                \"\"\"\n-                class Box<__universal T> {\n-                    T t;\n-                    void m() { t = null; }\n-                }\n-                \"\"\"\n-        );\n-        assertOKWithWarning(\"compiler.warn.universal.variable.cannot.be.assigned.null\",\n-                \"\"\"\n-                class Box<__universal T> {\n-                    T m() { return null; }\n-                }\n-                \"\"\"\n-        );\n-        assertOK(\n+        record DiagAndCode(String diag, String code){}\n+        String warning1 = \"compiler.warn.universal.variable.cannot.be.assigned.null\";\n+        for (DiagAndCode diagAndCode : java.util.List.of(\n+                new DiagAndCode(warning1,\n+                    \"\"\"\n+                    class Box<__universal T> {\n+                        T t;\n+                        void m() { t = null; }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(warning1,\n+                    \"\"\"\n+                    class Box<__universal T> {\n+                        T m() { return null; }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(warning1,\n+                    \"\"\"\n+                    class Box<__universal T> {\n+                        T t;\n+                        Box(T t) {\n+                            this.t = t;\n+                        }\n+                        void m() { t = null; }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(\"compiler.warn.universal.variable.cannot.be.assigned.null.2\",\n+                    \"\"\"\n+                    import java.util.function.*;\n+\n+                    class MyMap<__universal K, __universal V> {\n+                        K getKey(K k) { return k; }\n+                        V getValue(V v) { return v; }\n+    \n+                        void m(BiFunction<? super K, ? super V, ? extends V> f, K k1, V v1) {\n+                            K k = getKey(k1);\n+                            V v = getValue(v1);\n+                            v = f.apply(k, v);\n+                        }\n+                    }\n+                    \"\"\") )) {\n+            testHelper(LINT_OPTIONS, diagAndCode.diag, TestResult.COMPILE_WITH_WARNING, diagAndCode.code);\n+            testHelper(EMPTY_OPTIONS, \"\", TestResult.COMPILE_OK, diagAndCode.code);\n+        }\n+\n+        for (String code : java.util.List.of(\n@@ -82,3 +130,1 @@\n-                \"\"\"\n-        );\n-        assertOK(\n+                \"\"\",\n@@ -91,0 +137,1 @@\n+                \"\"\",\n@@ -92,7 +139,3 @@\n-        );\n-        assertOKWithWarning(\"compiler.warn.universal.variable.cannot.be.assigned.null\",\n-                \"\"\"\n-                class Box<__universal T> {\n-                    T t;\n-                    Box(T t) {\n-                        this.t = t;\n+                class C<__universal T> {\n+                    void m(boolean b) {\n+                        T.ref t = b ? null : null;\n@@ -100,1 +143,0 @@\n-                    void m() { t = null; }\n@@ -102,0 +144,1 @@\n+                \"\"\",\n@@ -103,14 +146,3 @@\n-        );\n-\n-        assertOKWithWarning(\"compiler.warn.universal.variable.cannot.be.assigned.null.2\",\n-                \"\"\"\n-                import java.util.function.*;\n-\n-                class MyMap<__universal K, __universal V> {\n-                    K getKey(K k) { return k; }\n-                    V getValue(V v) { return v; }\n-\n-                    void m(BiFunction<? super K, ? super V, ? extends V> f, K k1, V v1) {\n-                        K k = getKey(k1);\n-                        V v = getValue(v1);\n-                        v = f.apply(k, v);\n+                class C {        \n+                    <__universal T> void foo(T.ref[] a) {\n+                        a[0] = null;\n@@ -119,5 +151,1 @@\n-                \"\"\"\n-        );\n-\n-        setCompileOptions(EMPTY_OPTIONS);\n-        assertOK(\n+                \"\"\",\n@@ -127,3 +155,1 @@\n-                \"\"\"\n-        );\n-        assertOK(\n+                \"\"\",\n@@ -133,3 +159,1 @@\n-                \"\"\"\n-        );\n-        assertOK(\n+                \"\"\",\n@@ -140,1 +164,4 @@\n-        );\n+                )) {\n+            testHelper(LINT_OPTIONS, \"\", TestResult.COMPILE_OK, code);\n+            testHelper(EMPTY_OPTIONS, \"\", TestResult.COMPILE_OK, code);\n+        }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":81,"deletions":54,"binary":false,"changes":135,"status":"modified"}]}