{"files":[{"patch":"@@ -580,0 +580,16 @@\n+\n+    \/**\n+     * Allocate an array of a value class type with components that behave in\n+     * the same way as a {@link jdk.internal.vm.annotation.NullRestricted}\n+     * field.\n+     * <p>\n+     * Because these behaviors are not specified by Java SE, arrays created with\n+     * this method should only be used by internal JDK code for experimental\n+     * purposes and should not affect user-observable outcomes.\n+     *\n+     * @throws IllegalArgumentException if {@code componentType} is not a\n+     *         value class type or is not annotated with\n+     *         {@link jdk.internal.vm.annotation.ImplicitlyConstructible}\n+     *\/\n+    public static native Object[] newNullRestrictedArray(Class<?> componentType,\n+                                                         int length);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.*;\n+\n+\/**\n+ * An implicitly-constructible value class is a class that authorizes the JVM\n+ * to create its <em>zero instance<\/em>, where all instance fields are set to\n+ * their default values (0, {@code null}, etc.), without any code execution.\n+ * Any superclasses other than {@code Object} are also expected to be marked\n+ * {@code @ImplicitlyConstructible}.\n+ * <p>\n+ * The HotSpot VM depends on this annotation being present to properly\n+ * initialize {@link NullRestricted} fields and arrays of a value class type.\n+ *\/\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface ImplicitlyConstructible {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/ImplicitlyConstructible.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.*;\n+\n+\/**\n+ * A loosely-consistent value class is a class that is willing to tolerate\n+ * data corruption when fields or arrays storing instances of the class are\n+ * updated under race. Specifically, a value object read from such a field may\n+ * contain combinations of field values that were never set by a previous\n+ * constructor invocation.\n+ * <p>\n+ * Users of a class with this annotation take responsibility for ensuring the\n+ * integrity of their data by avoiding race conditions.\n+ * <p>\n+ * The HotSpot VM uses this annotation to enable non-atomic strategies for\n+ * reading and writing to flattened fields and arrays of the annotated class's\n+ * type.\n+ * <p>\n+ * Because these behaviors are not specified by Java SE, this annotation should\n+ * only be used by internal JDK code for experimental purposes and should not\n+ * affect user-observable outcomes.\n+ *\/\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface LooselyConsistentValue {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/LooselyConsistentValue.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.*;\n+\n+\/**\n+ * A null-restricted field is a field that does not store {@code null}.\n+ * The type of the field is expected to be a value class type with the\n+ * {@link ImplicitlyConstructible} annotation. The initial value of the field\n+ * is the zero instance of the given class, and attempts to write {@code null}\n+ * to the field will throw an exception.\n+ * <p>\n+ * The HotSpot VM uses this annotation to enable flattened encodings for the\n+ * field that would otherwise be impossible.\n+ * <p>\n+ * Because these behaviors are not specified by Java SE, this annotation should\n+ * only be used by internal JDK classes for experimental purposes and should not\n+ * affect user-observable outcomes.\n+ *\/\n+@Target(ElementType.FIELD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface NullRestricted {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/NullRestricted.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}