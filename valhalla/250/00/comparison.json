{"files":[{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-import java.lang.annotation.*;\n-\n-\/**\n- * An informative annotation type used to indicate that a value type existed in a\n- * prior avatar as a <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n- * class. Armed with this information, the compiler may choose to treat with leniency\n- * certain constructs which are erroneous when used with value types, thereby easing the\n- * pain of migration.\n- *\/\n-\n-@Documented\n-@Retention(RetentionPolicy.CLASS)\n-@Target(ElementType.TYPE)\n-public @interface ValueBased {}\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ValueBased.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -142,4 +142,0 @@\n-    \/** Flag is set for a value based class.\n-     *\/\n-    public static final int VALUEBASED       = 1<<19;\n-\n@@ -534,1 +530,0 @@\n-        VALUEBASED(Flags.VALUEBASED),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -225,1 +225,0 @@\n-    public final Type valueBasedType;\n@@ -600,1 +599,0 @@\n-        valueBasedType = enterClass(\"java.lang.ValueBased\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-                    (!t.hasTag(BOT) || isValueBased(s)) && isSubtype(t, s.referenceProjection());\n+                    !t.hasTag(BOT) && isSubtype(t, s.referenceProjection());\n@@ -1014,4 +1014,0 @@\n-    public boolean isValueBased(Type t) {\n-        return allowValueBasedClasses && t != null && t.tsym != null && (t.tsym.flags() & Flags.VALUEBASED) != 0;\n-    }\n-\n@@ -1148,1 +1144,1 @@\n-                         s.hasTag(BOT) || (s.hasTag(CLASS) && (!isValue(s) || isValueBased(s))) ||\n+                         s.hasTag(BOT) || (s.hasTag(CLASS) && !isValue(s)) ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-    private final boolean allowValueBasedClasses;\n@@ -140,1 +139,0 @@\n-        allowValueBasedClasses = options.isSet(\"allowValueBasedClasses\");\n@@ -617,3 +615,0 @@\n-            if (found.hasTag(BOT) && types.isValueBased(req)) {\n-                log.warning(pos, Warnings.SuspiciousMixOfNullWithValueBasedClass(req));\n-            }\n@@ -642,7 +637,0 @@\n-            if (types.isValueBased(req)) {\n-                if (found.hasTag(BOT)) {\n-                    log.warning(pos, Warnings.SuspiciousMixOfNullWithValueBasedClass(req));\n-                } else if (!types.isValueBased(found)) {\n-                    log.warning(pos, Warnings.PotentialNullPollution(found));\n-                }\n-            }\n@@ -3269,7 +3257,0 @@\n-        if (a.annotationType.type.tsym == syms.valueBasedType.tsym) {\n-            if (s.isInterface() || s.isEnum()) {\n-                log.error(a.pos(), Errors.BadValueBasedAnno);\n-            } else if (allowValueBasedClasses) {\n-                s.flags_field |= VALUEBASED;\n-            }\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-import static com.sun.tools.javac.comp.Flow.ThisExposability.DISCOURAGED;\n@@ -1665,1 +1664,0 @@\n-        DISCOURAGED  \/\/ Value based types     - Warning\n@@ -1900,2 +1898,0 @@\n-                    } else {\n-                        log.warning(node, Warnings.ThisExposedPrematurely);\n@@ -2129,3 +2125,1 @@\n-                        if (types.isValueBased(tree.sym.owner.type))\n-                            this.thisExposability = DISCOURAGED;\n-                        else if (types.isValue(tree.sym.owner.type))\n+                        if (types.isValue(tree.sym.owner.type))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -128,4 +128,0 @@\n-    \/** Switch: Should javac recongnize and handle value based classes specially ?\n-     *\/\n-    private boolean allowValueBasedClasses;\n-\n@@ -289,1 +285,0 @@\n-        allowValueBasedClasses = options.isSet(\"allowValueBasedClasses\");\n@@ -1482,2 +1477,0 @@\n-                } else if (allowValueBasedClasses && sym.kind == TYP && proxy.type.tsym == syms.valueBasedType.tsym) {\n-                    sym.flags_field |= VALUEBASED;\n@@ -2792,1 +2785,3 @@\n-            flags |= allowInlineTypes ? VALUE : allowValueBasedClasses ? VALUEBASED : 0;\n+            if (allowInlineTypes) {\n+                flags |= VALUE;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3767,11 +3767,0 @@\n-compiler.err.bad.value.based.anno=\\\n-    Unexpected @ValueBased annotation\n-\n-# 0: type\n-compiler.warn.suspicious.mix.of.null.with.value.based.class=\\\n-    Suspicious mix of null with value based class {0}\n-\n-# 0: type\n-compiler.warn.potential.null.pollution=\\\n-    Potential null pollution from nullable type {0}\n-\n@@ -3784,3 +3773,0 @@\n-compiler.warn.this.exposed.prematurely=\\\n-    value based type instance should not be passed around before being fully initialized\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -209,1 +209,0 @@\n-compiler.warn.potential.null.pollution\n@@ -211,1 +210,0 @@\n-compiler.warn.this.exposed.prematurely\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.bad.value.based.anno\n-\n-@ValueBased\n-interface I {\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/BadValueBasedAnno.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.warn.suspicious.mix.of.null.with.value.based.class\n-\/\/ options: -XDallowValueBasedClasses\n-\n-@ValueBased\n-class I {\n-    I i = null;\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SuspiciousNullMix.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -1,21 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check that improper application of \"@ValueBased\" annotation are caught\n- * @compile\/fail\/ref=BadValueBased.out -XDrawDiagnostics -XDdev BadValueBased.java\n- *\/\n-\n-public class BadValueBased {\n-    @ValueBased \n-    interface X {}\n-\n-    @ValueBased \n-    @interface A {}\n-\n-    @ValueBased\n-    enum E {}\n-\n-    @ValueBased \n-    class Y {\n-        @ValueBased int x;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/BadValueBased.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-BadValueBased.java:8:5: compiler.err.bad.value.based.anno\n-BadValueBased.java:11:5: compiler.err.bad.value.based.anno\n-BadValueBased.java:14:5: compiler.err.bad.value.based.anno\n-BadValueBased.java:19:9: compiler.err.annotation.type.not.applicable\n-4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/BadValueBased.out","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile -XDallowValueBasedClasses -XDallowWithFieldOperator CastNullCheckTest.java\n+ * @compile -XDallowWithFieldOperator CastNullCheckTest.java\n@@ -38,1 +38,0 @@\n-    @ValueBased\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CastNullCheckTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8205910\n- * @summary Complain when `this' of a value class is leaked from constructor before all instance fields are definitely assigned.\n- * @compile\/fail\/ref=CheckThisLeakVBC.out -Werror -XDallowValueBasedClasses -XDrawDiagnostics -XDdev CheckThisLeakVBC.java\n- *\/\n-\n-@ValueBased\n-inline class V {\n-\n-\tprivate final int x, ymx;\n-\n-\tV(int x, int y) {\n-\n-\t\tOK();                       \/\/ OK to call static methods.\n-\t\tthis.OK();                  \/\/ OK to call static methods.\n-\n-\t\tvalidate();                 \/\/ BAD to call instance method DU = {x, ymx}\n-\t\tthis.validate();            \/\/ BAD to call instance method DU = {x, ymx}\n-\t\tV.this.validate();          \/\/ BAD to call instance method DU = {x, ymx}\n-\n-\t\tSystem.out.println(this);   \/\/ BAD to pass `this' as argument DU = {x, ymx}\n-\t\tSystem.out.println(V.this); \/\/ BAD to pass `this' as argument DU = {x, ymx}\n-\n-\t\tV v = this;                 \/\/ BAD to create alias  DU = {x, ymx}\n-\t\tv = V.this;                 \/\/ BAD to create alias  DU = {x, ymx}\n-\n-\t\tymx = y - x;                \/\/ OK, implicit this for field write.\n-\t\tint l = this.ymx;           \/\/ OK, explicit this for DA field read.\n-\n-\t\tOK();                       \/\/ OK to call static methods.\n-\t\tthis.OK();                  \/\/ OK to call static methods.\n-\n-\t\tvalidate();                 \/\/ BAD to call instance method DU = {x}\n-\t\tthis.validate();            \/\/ BAD to call instance method DU = {x}\n-\t\tV.this.validate();          \/\/ BAD to call instance method DU = {x}\n-\n-\t\tSystem.out.println(this);   \/\/ BAD to pass `this' as argument DU = {x}\n-\t\tSystem.out.println(V.this); \/\/ BAD to pass `this' as argument DU = {x}\n-\n-\t\tv = this;                   \/\/ BAD to create alias  DU = {x}\n-\t\tv = V.this;                 \/\/ BAD to create alias  DU = {x}\n-\n-\t\tthis.x = x;\n-\n-        \/\/ ALL fields are assigned now.\n-\n-\t\tOK();                       \/\/ OK to call static methods.\n-\t\tthis.OK();                  \/\/ OK to call static methods.\n-\n-\t\tvalidate();                 \/\/ OK: DU = {}\n-\t\tthis.validate();            \/\/ OK: DU = {}\n-\t\tV.this.validate();          \/\/ OK: DU = {}\n-\n-\t\tSystem.out.println(this);   \/\/ OK: DU = {}\n-\t\tSystem.out.println(V.this); \/\/ OK: DU = {}\n-\n-\t\tv = this;                   \/\/ OK: DU = {}\n-\t\tv = V.this;                 \/\/ OK: DU = {}\n-\t\tassert (this.x > 0);        \/\/ OK: DU = {}\n-\t\tassert (this.y() > 0);      \/\/ OK: DU = {}\n-\t}\n-\n-\tV() { \/\/ non-initial constructor. All, statements below are OK.\n-        this(10, 20);\n-\t\tOK();                       \n-\t\tthis.OK();                  \n-\n-\t\tvalidate();                 \n-\t\tthis.validate();            \n-\t\tV.this.validate();          \n-\n-\t\tSystem.out.println(this);   \n-\t\tSystem.out.println(V.this); \n-\n-\t\tV v = this;                 \n-\t\tv = V.this;                 \n-\n-\t\tint l = this.ymx;           \n-\n-\t\tassert (this.x > 0);        \n-\t\tassert (this.y() > 0);      \n-\t}\n-\n-\tstatic void OK() {\n-\t}\n-\n-\tint x() {\n-\t\treturn x;\n-\t}\n-\n-\tint y() {\n-\t\treturn ymx + x;\n-\t}\n-\n-\tvoid validate() {\n-\t\tassert (x() > 0 && y() > 0);\n-\t}\n-\n-\tpublic static void main(String... av) {\n-\t\tV z = new V(1, 10);\n-\t\tassert (z.x() == 1);\n-\t\tassert (z.y() == 10);\n-\t}\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckThisLeakVBC.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -1,17 +0,0 @@\n-CheckThisLeakVBC.java:18:25: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:19:17: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:20:18: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:22:36: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:23:37: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:25:23: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:26:22: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:34:25: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:35:17: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:36:18: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:38:36: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:39:37: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:41:21: compiler.warn.this.exposed.prematurely\n-CheckThisLeakVBC.java:42:22: compiler.warn.this.exposed.prematurely\n-- compiler.err.warnings.and.werror\n-1 error\n-14 warnings\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckThisLeakVBC.out","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -1,12 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Test that value classes get demoted to value based classes in -source 10 compiles.\n- * @compile -XDallowWithFieldOperator Point.java\n- * @compile\/fail\/ref=DemoteToValueBasedTest.out -XDrawDiagnostics -XDdev DemoteToValueBasedTest.java\n- * @compile\/fail\/ref=DemoteToValueBasedTest10.out --should-stop=at=FLOW -Werror -XDallowValueBasedClasses -XDrawDiagnostics -source 10 -XDdev DemoteToValueBasedTest.java\n- * @compile\/fail\/ref=DemoteToValueBasedTest3.out --should-stop=at=FLOW -Werror -XDrawDiagnostics -source 10 -XDdev DemoteToValueBasedTest.java\n- *\/\n-\n-public class DemoteToValueBasedTest {\n-    Point p = null;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DemoteToValueBasedTest.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-DemoteToValueBasedTest.java:11:15: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, Point)\n-1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DemoteToValueBasedTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-- compiler.warn.source.no.system.modules.path: 10\n-- compiler.err.warnings.and.werror\n-DemoteToValueBasedTest.java:11:15: compiler.warn.suspicious.mix.of.null.with.value.based.class: Point\n-1 error\n-2 warnings\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DemoteToValueBasedTest10.out","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-- compiler.warn.source.no.system.modules.path: 10\n-- compiler.err.warnings.and.werror\n-1 error\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/DemoteToValueBasedTest3.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,16 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check that javac warns on potential null pollution of value based instances.\n- * @compile\/fail\/ref=NullPollutionTest.out -Werror -XDrawDiagnostics -XDallowValueBasedClasses -XDdev NullPollutionTest.java\n- * @compile -Werror -XDrawDiagnostics -XDdev NullPollutionTest.java\n- *\/\n-\n-public class NullPollutionTest {\n-    @ValueBased\n-    public class X {\n-        void foo(X x) {\n-            Object o = null;\n-            x = (X) o;\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/NullPollutionTest.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-NullPollutionTest.java:13:21: compiler.warn.potential.null.pollution: java.lang.Object\n-- compiler.err.warnings.and.werror\n-1 error\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/NullPollutionTest.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,18 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check that javac emits warnings rather than errors for null violation with value based classes.\n- * @compile\/fail\/ref=ValueBasedWarningsTest.out -Werror -XDallowValueBasedClasses -XDrawDiagnostics -XDdev ValueBasedWarningsTest.java\n- * @compile\/fail\/ref=ValueBasedWarningsTest2.out -Werror -XDrawDiagnostics -XDdev ValueBasedWarningsTest.java\n- *\/\n-\n-public class ValueBasedWarningsTest {\n-    @ValueBased\n-    final inline class X {\n-        final int x = 10;\n-        void foo(X x1, X x2) {\n-            x1 = null;\n-            x2 = (X) null;\n-            if (null instanceof X) {}\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueBasedWarningsTest.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-ValueBasedWarningsTest.java:13:18: compiler.warn.suspicious.mix.of.null.with.value.based.class: ValueBasedWarningsTest.X\n-ValueBasedWarningsTest.java:14:22: compiler.warn.suspicious.mix.of.null.with.value.based.class: ValueBasedWarningsTest.X\n-ValueBasedWarningsTest.java:15:17: compiler.warn.suspicious.mix.of.null.with.value.based.class: ValueBasedWarningsTest.X\n-- compiler.err.warnings.and.werror\n-1 error\n-3 warnings\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueBasedWarningsTest.out","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-ValueBasedWarningsTest.java:13:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, ValueBasedWarningsTest.X)\n-ValueBasedWarningsTest.java:14:22: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, ValueBasedWarningsTest.X)\n-ValueBasedWarningsTest.java:15:17: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, ValueBasedWarningsTest.X)\n-3 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueBasedWarningsTest2.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"}]}