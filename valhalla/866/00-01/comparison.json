{"files":[{"patch":"@@ -84,4 +84,0 @@\n-bool VectorSupport::is_vector_shuffle(Klass* klass) {\n-  return klass->is_subclass_of(vmClasses::vector_VectorShuffle_klass());\n-}\n-\n@@ -127,4 +123,2 @@\n-  \/\/ On-heap vector values are represented as primitive class instances with a multi-field payload.\n-  InstanceKlass* payload_kls = get_vector_payload_klass(elem_bt, num_elem);\n-  assert(payload_kls->is_inline_klass(), \"\");\n-  instanceOop obj = InlineKlass::cast(payload_kls)->allocate_instance(THREAD);\n+  assert(ik->is_inline_klass(), \"\");\n+  instanceOop obj = InlineKlass::cast(ik)->allocate_instance(THREAD);\n@@ -134,1 +128,1 @@\n-  Klass* def = payload_kls->find_field(vmSymbols::mfield_name(), vmSymbols::type_signature(elem_bt), false, &fd);\n+  Klass* def = ik->find_field(vmSymbols::mfield_name(), vmSymbols::type_signature(elem_bt), false, &fd);\n@@ -311,1 +305,0 @@\n-  Handle payload_instance = VectorSupport::allocate_vector_payload(ik, num_elem, elem_bt, fr, reg_map, ov, CHECK_NULL);\n@@ -313,1 +306,6 @@\n-  InstanceKlass* payload_class = InstanceKlass::cast(payload_instance()->klass());\n+  \/\/ On-heap vector values are represented as primitive class instances with a multi-field payload.\n+  InstanceKlass* payload_class = get_vector_payload_klass(elem_bt, num_elem);\n+  assert(payload_class->is_inline_klass(), \"\");\n+\n+  Handle payload_instance = VectorSupport::allocate_vector_payload(payload_class, num_elem, elem_bt, fr, reg_map, ov, CHECK_NULL);\n+\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"}]}