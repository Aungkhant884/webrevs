{"files":[{"patch":"@@ -849,0 +849,11 @@\n+     \/** Write out \"Preload\" attribute by enumerating the value classes encountered during this compilation.\n+      *\/\n+     void writeValueClasses() {\n+        int alenIdx = writeAttr(names.Preload);\n+        databuf.appendChar(poolWriter.valueClasses.size());\n+        for (ClassSymbol c : poolWriter.valueClasses) {\n+            databuf.appendChar(poolWriter.putClass(c));\n+        }\n+        endAttr(alenIdx);\n+     }\n+\n@@ -1579,1 +1590,1 @@\n-            case TYP: poolWriter.enterInner((ClassSymbol)sym); break;\n+            case TYP: poolWriter.enterInnerAndValueClass((ClassSymbol)sym); break;\n@@ -1586,1 +1597,1 @@\n-                poolWriter.enterInner(local);\n+                poolWriter.enterInnerAndValueClass(local);\n@@ -1677,0 +1688,5 @@\n+        if (!poolWriter.valueClasses.isEmpty()) {\n+            writeValueClasses();\n+            acount++;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+import java.util.HashSet;\n@@ -97,0 +98,2 @@\n+    HashSet<ClassSymbol> valueClasses = new HashSet<>();\n+\n@@ -238,1 +241,1 @@\n-    void enterInner(ClassSymbol c) {\n+    void enterInnerClass(ClassSymbol c) {\n@@ -244,1 +247,1 @@\n-            enterInner(c.owner.enclClass());\n+            enterInnerClass(c.owner.enclClass());\n@@ -249,0 +252,21 @@\n+    \/** Enter a value class into the `valueClasses' set.\n+     *\/\n+    void enterValueClass(ClassSymbol c) {\n+        if (c.type.isCompound()) {\n+            throw new AssertionError(\"Unexpected intersection type: \" + c.type);\n+        }\n+        c.complete();\n+        if (c.isValueClass()) {\n+            valueClasses.add(c);\n+        }\n+        if (c.owner.enclClass() != null) {\n+            enterValueClass(c.owner.enclClass());\n+        }\n+    }\n+\n+\n+    void enterInnerAndValueClass(ClassSymbol c) {\n+        enterInnerClass(c);\n+        enterValueClass(c);\n+    }\n+\n@@ -334,1 +358,1 @@\n-            enterInner(c);\n+            enterInnerAndValueClass(c);\n@@ -387,1 +411,1 @@\n-                        enterInner((ClassSymbol)ct.tsym);\n+                        enterInnerAndValueClass((ClassSymbol)ct.tsym);\n@@ -526,0 +550,1 @@\n+        valueClasses.clear();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -158,0 +158,1 @@\n+    public final Name Preload;\n@@ -353,0 +354,1 @@\n+        Preload = fromString(\"Preload\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+    public static final String Preload                  = \"Preload\";\n@@ -139,0 +140,1 @@\n+            standardAttributes.put(Preload, Preload_attribute.class);\n@@ -206,0 +208,1 @@\n+        R visitPreload(Preload_attribute attr, P p);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/Attribute.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -757,0 +757,8 @@\n+        @Override\n+        public Void visitPreload(Preload_attribute attr, ClassOutputStream out) {\n+            out.writeShort(attr.value_class_info_index.length);\n+            for (int index: attr.value_class_info_index)\n+                out.writeShort(index);\n+            return null;\n+        }\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/ClassWriter.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.classfile;\n+\n+import java.io.IOException;\n+\n+\/**\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class Preload_attribute extends Attribute {\n+    Preload_attribute(ClassReader cr, int name_index, int length) throws IOException {\n+        super(name_index, length);\n+        number_of_classes = cr.readUnsignedShort();\n+        value_class_info_index = new int[number_of_classes];\n+        for (int i = 0; i < number_of_classes; i++)\n+            value_class_info_index[i] = cr.readUnsignedShort();\n+    }\n+\n+    public <R, D> R accept(Visitor<R, D> visitor, D data) {\n+        return visitor.visitPreload(this, data);\n+    }\n+\n+    public final int number_of_classes;\n+    public final int value_class_info_index[];\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/Preload_attribute.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -83,0 +83,1 @@\n+import com.sun.tools.classfile.Preload_attribute;\n@@ -1115,0 +1116,21 @@\n+    @Override\n+    public Void visitPreload(Preload_attribute attr, Void ignore) {\n+        boolean first = true;\n+        for (int index : attr.value_class_info_index) {\n+            if (first) {\n+                println(\"Classes to be preloaded:\");\n+                indent(+1);\n+                first = false;\n+            }\n+            print(\"#\" + index);\n+            print(\";\");\n+            tab();\n+            print(\"\/\/ value \");\n+            constantWriter.write(index);\n+            println();\n+        }\n+        if (!first)\n+            indent(-1);\n+        return null;\n+    }\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1374,0 +1374,5 @@\n+\n+        @Override\n+        public Void visitPreload(Preload_attribute attr, T p) {\n+            return null;\n+        }\n","filename":"test\/langtools\/lib\/annotations\/annotations\/classfile\/ClassfileInspector.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+    public R visitPreload(Preload_attribute attr, P p) { return null; }\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/AttributeVisitor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+final value class V1 {}\n+final value class V2 {}\n+final value class V3 {}\n+final value class V4 {}\n+final value class V5 {}\n+final value class V6 {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/MultiValues.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8280164\n+ * @summary Check emission of Preload attribute\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @compile MultiValues.java\n+ * @compile -g PreloadAttributeTest.java\n+ * @run main PreloadAttributeTest\n+ *\/\n+\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n+\n+public class PreloadAttributeTest {\n+\n+    static final value class X {\n+        final V1 [] v1 = null; \/\/ field descriptor\n+        V2[] foo() {  \/\/ method descriptor encoding value type\n+            return null;\n+        }\n+        void foo(V3 v3) { \/\/ method descriptor encoding value type\n+        }\n+        void foo(int x) {\n+            V4 [] v4 = null; \/\/ local variable.\n+        }\n+        void goo() {\n+            V5 [] v5 = null;\n+            if (v5 == null) {\n+               V6 [] v61 = null;  \/\/ stack map table.\n+            } else {\n+               V5 [] v52 = null;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ClassFile cls = ClassFile.read(PreloadAttributeTest.class.getResourceAsStream(\"PreloadAttributeTest$X.class\"));\n+\n+        if (cls == null) {\n+            throw new AssertionError(\"Could not locate the class files\");\n+        }\n+\n+        \/* Check emission of Preload attribute *\/\n+        Preload_attribute preloads = (Preload_attribute) cls.attributes.get(Attribute.Preload);\n+        if (preloads == null) {\n+            throw new AssertionError(\"Missing Preload attribute!\");\n+        }\n+        if (preloads.number_of_classes != 6) {\n+            throw new AssertionError(\"Incorrect number of Preload classes\");\n+        }\n+\n+        int mask = 0x3F;\n+        for (int i = 0; i < preloads.number_of_classes; i++) {\n+            CONSTANT_Class_info clsInfo = cls.constant_pool.getClassInfo(\n+                                  preloads.value_class_info_index[i]);\n+            switch (clsInfo.getName()) {\n+                case \"V1\":\n+                    mask &= ~1; break;\n+                case \"V2\":\n+                    mask &= ~2; break;\n+                case \"V3\":\n+                    mask &= ~4; break;\n+                case \"V4\":\n+                    mask &= ~8; break;\n+                case \"V5\":\n+                    mask &= ~16; break;\n+                case \"PreloadAttributeTest$X\":\n+                    mask &= ~32; break;\n+            }\n+        }\n+        if (mask != 0) {\n+          throw new AssertionError(\"Some Preload class entries are missing!\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PreloadAttributeTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}