{"files":[{"patch":"@@ -4086,3 +4086,10 @@\n-        } else if (_major_version >= JAVA_15_VERSION) {\n-          \/\/ Check for PermittedSubclasses tag\n-          if (tag == vmSymbols::tag_permitted_subclasses()) {\n+        } else if (_major_version >= JAVA_16_VERSION) {\n+          if (tag == vmSymbols::tag_record()) {\n+            if (parsed_record_attribute) {\n+              classfile_parse_error(\"Multiple Record attributes in class file %s\", THREAD);\n+              return;\n+            }\n+            parsed_record_attribute = true;\n+            record_attribute_start = cfs->current();\n+            record_attribute_length = attribute_length;\n+          } else if (tag == vmSymbols::tag_permitted_subclasses()) {\n@@ -4103,16 +4110,2 @@\n-            cfs->skip_u1(attribute_length, CHECK);\n-\n-          } else if (_major_version >= JAVA_16_VERSION) {\n-            if (tag == vmSymbols::tag_record()) {\n-              if (parsed_record_attribute) {\n-                classfile_parse_error(\"Multiple Record attributes in class file %s\", THREAD);\n-                return;\n-              }\n-              parsed_record_attribute = true;\n-              record_attribute_start = cfs->current();\n-              record_attribute_length = attribute_length;\n-              }\n-            cfs->skip_u1(attribute_length, CHECK);\n-          } else {\n-            \/\/ Unknown attribute\n-            cfs->skip_u1(attribute_length, CHECK);\n+          \/\/ Skip attribute_length for any attribute where major_verson >= JAVA_16_VERSION\n+          cfs->skip_u1(attribute_length, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1968,2 +1968,2 @@\n-  declare_toplevel_type(BreakpointInfo)                                   \\\n-  declare_toplevel_type(BreakpointInfo*)                                  \\\n+  JVMTI_ONLY(declare_toplevel_type(BreakpointInfo))                       \\\n+  JVMTI_ONLY(declare_toplevel_type(BreakpointInfo*))                      \\\n@@ -2608,9 +2608,9 @@\n-  declare_constant(JVMFlag::DEFAULT)                                      \\\n-  declare_constant(JVMFlag::COMMAND_LINE)                                 \\\n-  declare_constant(JVMFlag::ENVIRON_VAR)                                  \\\n-  declare_constant(JVMFlag::CONFIG_FILE)                                  \\\n-  declare_constant(JVMFlag::MANAGEMENT)                                   \\\n-  declare_constant(JVMFlag::ERGONOMIC)                                    \\\n-  declare_constant(JVMFlag::ATTACH_ON_DEMAND)                             \\\n-  declare_constant(JVMFlag::INTERNAL)                                     \\\n-  declare_constant(JVMFlag::JIMAGE_RESOURCE)                              \\\n+  declare_constant(JVMFlagOrigin::DEFAULT)                                \\\n+  declare_constant(JVMFlagOrigin::COMMAND_LINE)                           \\\n+  declare_constant(JVMFlagOrigin::ENVIRON_VAR)                            \\\n+  declare_constant(JVMFlagOrigin::CONFIG_FILE)                            \\\n+  declare_constant(JVMFlagOrigin::MANAGEMENT)                             \\\n+  declare_constant(JVMFlagOrigin::ERGONOMIC)                              \\\n+  declare_constant(JVMFlagOrigin::ATTACH_ON_DEMAND)                       \\\n+  declare_constant(JVMFlagOrigin::INTERNAL)                               \\\n+  declare_constant(JVMFlagOrigin::JIMAGE_RESOURCE)                        \\\n@@ -2618,1 +2618,1 @@\n-  declare_constant(JVMFlag::ORIG_COMMAND_LINE)\n+  declare_constant(JVMFlag::WAS_SET_ON_COMMAND_LINE)\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -142,4 +142,0 @@\n-    \/** Flag is set for a value based class.\n-     *\/\n-    public static final int VALUEBASED       = 1<<19;\n-\n@@ -539,1 +535,0 @@\n-        VALUEBASED(Flags.VALUEBASED),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -618,1 +618,1 @@\n-                    (!t.hasTag(BOT) || isValueBased(s)) && isSubtype(t, s.referenceProjection());\n+                    !t.hasTag(BOT) && isSubtype(t, s.referenceProjection());\n@@ -1018,4 +1018,0 @@\n-    public boolean isValueBased(Type t) {\n-        return allowValueBasedClasses && t != null && t.tsym != null && (t.tsym.flags() & Flags.VALUEBASED) != 0;\n-    }\n-\n@@ -1152,1 +1148,1 @@\n-                         s.hasTag(BOT) || (s.hasTag(CLASS) && (!isValue(s) || isValueBased(s))) ||\n+                         s.hasTag(BOT) || (s.hasTag(CLASS) && !isValue(s)) ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -128,4 +128,0 @@\n-    \/** Switch: Should javac recongnize and handle value based classes specially ?\n-     *\/\n-    private boolean allowValueBasedClasses;\n-\n@@ -289,1 +285,0 @@\n-        allowValueBasedClasses = options.isSet(\"allowValueBasedClasses\");\n@@ -1495,2 +1490,0 @@\n-                } else if (allowValueBasedClasses && sym.kind == TYP && proxy.type.tsym == syms.valueBasedType.tsym) {\n-                    sym.flags_field |= VALUEBASED;\n@@ -2806,1 +2799,3 @@\n-            flags |= allowInlineTypes ? VALUE : allowValueBasedClasses ? VALUEBASED : 0;\n+            if (allowInlineTypes) {\n+                flags |= VALUE;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}