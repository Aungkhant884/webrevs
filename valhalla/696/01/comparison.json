{"files":[{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang;\n+\n+\n+\/**\n+ * Thrown when an identity object is required but a value object is supplied.\n+ * <p>\n+ * Identity objects are required for synchronization and locking.\n+ * <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">Value-based<\/a>\n+ * objects do not have identity and cannot be used for synchronization or locking.\n+ *\/\n+public class IdentityException extends RuntimeException {\n+    \/**\n+     * Create an IdentityException with no message.\n+     *\/\n+    public IdentityException() {\n+    }\n+\n+    \/**\n+     * Create an IdentityException with the class name and default message.\n+     *\n+     * @param clazz the class of the object\n+     *\/\n+    public IdentityException(Class<?> clazz) {\n+        super(clazz.getName() + \" is not an identity class\");\n+    }\n+\n+    \/**\n+     * Create an IdentityException with a message.\n+     *\n+     * @param  message the detail message; can be {@code null}\n+     *\/\n+    public IdentityException(String message) {\n+        super(message);\n+    }\n+\n+    \/**\n+     * Create an IdentityException with a message and cause.\n+     *\n+     * @param  message the detail message; can be {@code null}\n+     * @param  cause the cause; {@code null} is permitted, and indicates\n+     *               that the cause is nonexistent or unknown.\n+     *\/\n+    public IdentityException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    @java.io.Serial\n+    private static final long serialVersionUID = 1L;\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/IdentityException.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -34,0 +34,2 @@\n+import java.util.Objects;\n+\n@@ -39,0 +41,4 @@\n+ * <p>\n+ * References can only refer to identity objects.\n+ * Attempts to create a reference to a {@linkplain Class#isValue() value object}\n+ * results in an {@link IdentityException}.\n@@ -501,5 +507,2 @@\n-        if (referent != null && referent.getClass().isValue()) {\n-            Class<?> c = referent.getClass();\n-            throw new IllegalArgumentException(\"cannot reference a \" +\n-                    (c.isPrimitiveClass() ? \"primitive class \" : \"value class \") +\n-                    c.getName());\n+        if (referent != null) {\n+            Objects.requireIdentity(referent);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -192,0 +192,60 @@\n+    \/**\n+     * Checks that the specified object reference is an identity object.\n+     *\n+     * @param obj the object reference to check for identity\n+     * @param <T> the type of the reference\n+     * @return {@code obj} if {@code obj} is an identity object\n+     * @throws NullPointerException if {@code obj} is {@code null}\n+     * @throws IdentityException if {@code obj} is not an identity object\n+     * @since Valhalla\n+     *\/\n+    @ForceInline\n+    public static <T> T requireIdentity(T obj) {\n+        Objects.requireNonNull(obj);\n+        var cl = obj.getClass();\n+        if (cl.isValue())\n+            throw new IdentityException(cl);\n+        return obj;\n+    }\n+\n+    \/**\n+     * Checks that the specified object reference is an identity object.\n+     *\n+     * @param obj the object reference to check for identity\n+     * @param message detail message to be used in the event that an\n+     *        {@code IdentityException} is thrown\n+     * @param <T> the type of the reference\n+     * @return {@code obj} if {@code obj} is an identity object\n+     * @throws NullPointerException if {@code obj} is {@code null}\n+     * @throws IdentityException if {@code obj} is not an identity object\n+     * @since Valhalla\n+     *\/\n+    @ForceInline\n+    public static <T> T requireIdentity(T obj, String message) {\n+        Objects.requireNonNull(obj);\n+        if (obj.getClass().isValue())\n+            throw new IdentityException(message);\n+        return obj;\n+    }\n+\n+    \/**\n+     * Checks that the specified object reference is an identity object.\n+     *\n+     * @param obj the object reference to check for identity\n+     * @param messageSupplier supplier of the detail message to be\n+     *        used in the event that an {@code IdentityException} is thrown\n+     * @param <T> the type of the reference\n+     * @return {@code obj} if {@code obj} is an identity object\n+     * @throws NullPointerException if {@code obj} is {@code null}\n+     * @throws IdentityException if {@code obj} is not an identity object\n+     * @since Valhalla\n+     *\/\n+    @ForceInline\n+    public static <T> T requireIdentity(T obj, Supplier<String> messageSupplier) {\n+        Objects.requireNonNull(obj);\n+        if (obj.getClass().isValue())\n+            throw new IdentityException(messageSupplier == null ?\n+                    null : messageSupplier.get());\n+        return obj;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n+    @Test(expectedExceptions = IdentityException.class)\n@@ -46,1 +46,1 @@\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n+    @Test(expectedExceptions = IdentityException.class)\n","filename":"test\/jdk\/valhalla\/valuetypes\/WeakReferenceTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}