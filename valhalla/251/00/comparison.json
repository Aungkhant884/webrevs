{"files":[{"patch":"@@ -107,0 +107,3 @@\n+    \/** enable alternate code generation to faciliate specialization experiments, without restricted field attribute *\/\n+    public boolean flattenWithErasure;\n+\n@@ -133,0 +136,1 @@\n+        flattenWithErasure = options.isSet(\"flattenWithErasure\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -977,2 +977,4 @@\n-        if (types.flattenWithTypeRestrictions && v.type.isValue()) {\n-            emitRestrictedField = true;\n+        if ((types.flattenWithTypeRestrictions || types.flattenWithErasure) && v.type.isValue()) {\n+            if (types.flattenWithTypeRestrictions) {\n+                emitRestrictedField = true;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        if (this.types.flattenWithTypeRestrictions && member.kind == Kind.VAR && member.type.isValue()) {\n+        if ((types.flattenWithTypeRestrictions || types.flattenWithErasure) && member.kind == Kind.VAR && member.type.isValue()) {\n@@ -164,1 +164,1 @@\n-        if (this.types.flattenWithTypeRestrictions && member.kind == Kind.VAR && member.type.isValue()) {\n+        if ((types.flattenWithTypeRestrictions || types.flattenWithErasure) && member.kind == Kind.VAR && member.type.isValue()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Items.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}