{"files":[{"patch":"@@ -1273,1 +1273,1 @@\n-            revision: \"1.13.0+1.0\"\n+            revision: \"1.14.0+1.0\"\n","filename":"make\/conf\/jib-profiles.js","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2293,1 +2293,0 @@\n-  bool ret_value = true;\n@@ -2301,1 +2300,1 @@\n-        ret_value = false;\n+        return false;\n@@ -2307,1 +2306,9 @@\n-        ret_value = false;\n+        return false;\n+      }\n+      break;\n+    case Op_FmaF:\n+    case Op_FmaD:\n+    case Op_FmaVF:\n+    case Op_FmaVD:\n+      if (!UseFMA) {\n+        return false;\n@@ -2312,1 +2319,1 @@\n-  return ret_value; \/\/ Per default match rules are supported.\n+  return true; \/\/ Per default match rules are supported.\n@@ -14362,1 +14369,0 @@\n-  predicate(UseFMA);\n@@ -14368,0 +14374,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14379,1 +14386,0 @@\n-  predicate(UseFMA);\n@@ -14385,0 +14391,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14394,1 +14401,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -14396,2 +14404,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF src3 (Binary (NegF src1) src2)));\n@@ -14403,0 +14409,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14412,1 +14419,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -14414,2 +14422,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD src3 (Binary (NegD src1) src2)));\n@@ -14421,0 +14427,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14430,1 +14437,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -14432,2 +14440,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF (NegF src3) (Binary (NegF src1) src2)));\n@@ -14439,0 +14445,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14448,1 +14455,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -14450,2 +14458,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD (NegD src3) (Binary (NegD src1) src2)));\n@@ -14457,0 +14463,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14468,1 +14475,0 @@\n-  predicate(UseFMA);\n@@ -14474,0 +14480,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -14485,1 +14492,0 @@\n-  predicate(UseFMA);\n@@ -14491,1 +14497,2 @@\n-  \/\/ n.b. insn name should be fnmsubd\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n+    \/\/ n.b. insn name should be fnmsubd\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":28,"deletions":21,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-  IntelJccErratumAlignment(*masm, size);\n+  IntelJccErratumAlignment intel_alignment(*masm, size);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1916,1 +1916,1 @@\n-        log->print_cr(\" at distance %d, %d lines of %d bytes\", (int) AllocatePrefetchDistance, (int) AllocatePrefetchLines, (int) AllocatePrefetchStepSize);\n+        log->print_cr(\" at distance %d, %d lines of %d bytes\", AllocatePrefetchDistance, AllocatePrefetchLines, AllocatePrefetchStepSize);\n@@ -1918,1 +1918,1 @@\n-        log->print_cr(\" at distance %d, one line of %d bytes\", (int) AllocatePrefetchDistance, (int) AllocatePrefetchStepSize);\n+        log->print_cr(\" at distance %d, one line of %d bytes\", AllocatePrefetchDistance, AllocatePrefetchStepSize);\n@@ -3172,1 +3172,1 @@\n-intx VM_Version::allocate_prefetch_distance(bool use_watermark_prefetch) {\n+int VM_Version::allocate_prefetch_distance(bool use_watermark_prefetch) {\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1569,0 +1569,2 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n@@ -3999,1 +4001,0 @@\n-  predicate(UseFMA);\n@@ -4004,0 +4005,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -4011,1 +4013,0 @@\n-  predicate(UseFMA);\n@@ -4016,0 +4017,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9903,0 +9905,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n@@ -9917,0 +9920,1 @@\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -526,1 +526,2 @@\n-    update_class_path_entry_list(current, path, false, false, false);\n+    update_class_path_entry_list(current, path, \/* check_for_duplicates *\/ true,\n+                                 \/* is_boot_append *\/ false, \/* from_class_path_attr *\/ false);\n@@ -671,1 +672,2 @@\n-      update_class_path_entry_list(current, path, false, true, false);\n+      update_class_path_entry_list(current, path, \/* check_for_duplicates *\/ false,\n+                                    \/* is_boot_append *\/ true, \/* from_class_path_attr *\/ false);\n@@ -806,1 +808,1 @@\n-void ClassLoader::add_to_app_classpath_entries(JavaThread* current,\n+bool ClassLoader::add_to_app_classpath_entries(JavaThread* current,\n@@ -816,1 +818,1 @@\n-        return;\n+        return false;\n@@ -835,0 +837,1 @@\n+  return true;\n@@ -857,1 +860,4 @@\n-      add_to_app_classpath_entries(current, new_entry, check_for_duplicates);\n+      if (!add_to_app_classpath_entries(current, new_entry, check_for_duplicates)) {\n+        \/\/ new_entry is not saved, free it now\n+        delete new_entry;\n+      }\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  void notify_allocation(JavaThread* thread);\n+  void notify_allocation();\n@@ -63,1 +63,1 @@\n-  void notify_allocation_dtrace_sampler(JavaThread* thread);\n+  void notify_allocation_dtrace_sampler();\n@@ -73,1 +73,1 @@\n-      _thread(JavaThread::current()),\n+      _thread(JavaThread::cast(allocator._thread)), \/\/ Do not use Allocation in non-JavaThreads.\n@@ -80,0 +80,1 @@\n+    assert(Thread::current() == allocator._thread, \"do not pass MemAllocator across threads\");\n@@ -85,1 +86,1 @@\n-      notify_allocation(_thread);\n+      notify_allocation();\n@@ -159,1 +160,1 @@\n-  JavaThread::cast(_thread)->check_for_valid_safepoint_state();\n+  _thread->check_for_valid_safepoint_state();\n@@ -220,1 +221,1 @@\n-void MemAllocator::Allocation::notify_allocation_dtrace_sampler(JavaThread* thread) {\n+void MemAllocator::Allocation::notify_allocation_dtrace_sampler() {\n@@ -226,1 +227,1 @@\n-      SharedRuntime::dtrace_object_alloc(thread, obj(), word_size);\n+      SharedRuntime::dtrace_object_alloc(_thread, obj(), word_size);\n@@ -231,1 +232,1 @@\n-void MemAllocator::Allocation::notify_allocation(JavaThread* thread) {\n+void MemAllocator::Allocation::notify_allocation() {\n@@ -234,1 +235,1 @@\n-  notify_allocation_dtrace_sampler(thread);\n+  notify_allocation_dtrace_sampler();\n@@ -338,1 +339,1 @@\n-  debug_only(JavaThread::cast(_thread)->check_for_valid_safepoint_state());\n+  debug_only(allocation._thread->check_for_valid_safepoint_state());\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,3 @@\n-  { }\n+  {\n+    assert(_thread == Thread::current(), \"must be\");\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_checkcast); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_checkcast); };\n@@ -289,1 +289,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_instanceof); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_instanceof); };\n@@ -298,1 +298,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_new); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_new); };\n@@ -316,1 +316,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_multianewarray); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_multianewarray); };\n@@ -325,1 +325,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_anewarray); };\n+  u2 index() const   { return get_index_u2(Bytecodes::_anewarray); };\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -579,1 +580,1 @@\n-C2V_VMENTRY_NULL(jobject, lookupType, (JNIEnv* env, jobject, jstring jname, ARGUMENT_PAIR(accessing_klass), jboolean resolve))\n+C2V_VMENTRY_NULL(jobject, lookupType, (JNIEnv* env, jobject, jstring jname, ARGUMENT_PAIR(accessing_klass), jint accessing_klass_loader, jboolean resolve))\n@@ -588,0 +589,12 @@\n+#ifdef ASSERT\n+  const char* val = Arguments::PropertyList_get_value(Arguments::system_properties(), \"test.jvmci.lookupTypeException\");\n+  if (val != nullptr) {\n+    if (strstr(val, \"<trace>\") != nullptr) {\n+      tty->print_cr(\"CompilerToVM.lookupType: %s\", str);\n+    } else if (strstr(val, str) != nullptr) {\n+      THROW_MSG_0(vmSymbols::java_lang_Exception(),\n+                  err_msg(\"lookupTypeException: %s\", str));\n+    }\n+  }\n+#endif\n+\n@@ -596,2 +609,7 @@\n-    \/\/ Use the System class loader\n-    class_loader = Handle(THREAD, SystemDictionary::java_system_loader());\n+    switch (accessing_klass_loader) {\n+      case 0: break; \/\/ class_loader is already null, the boot loader\n+      case 1: class_loader = Handle(THREAD, SystemDictionary::java_platform_loader()); break;\n+      case 2: class_loader = Handle(THREAD, SystemDictionary::java_system_loader()); break;\n+      default:\n+        JVMCI_THROW_MSG_0(InternalError, err_msg(\"Illegal class loader value: %d\", accessing_klass_loader));\n+    }\n@@ -604,1 +622,1 @@\n-      JVMCI_THROW_MSG_NULL(ClassNotFoundException, str);\n+      JVMCI_THROW_MSG_NULL(NoClassDefFoundError, str);\n@@ -1605,0 +1623,8 @@\n+C2V_VMENTRY_0(int, decodeFieldIndexToCPIndex, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint field_index))\n+  constantPoolHandle cp(THREAD, UNPACK_PAIR(ConstantPool, cp));\n+  if (field_index < 0 || field_index >= cp->resolved_field_entries_length()) {\n+    JVMCI_THROW_MSG_0(IllegalStateException, err_msg(\"invalid field index %d\", field_index));\n+  }\n+  return cp->resolved_field_entry_at(field_index)->constant_pool_index();\n+C2V_END\n+\n@@ -3111,1 +3137,1 @@\n-  {CC \"lookupType\",                                   CC \"(\" STRING HS_KLASS2 \"Z)\" HS_RESOLVED_TYPE,                                        FN_PTR(lookupType)},\n+  {CC \"lookupType\",                                   CC \"(\" STRING HS_KLASS2 \"IZ)\" HS_RESOLVED_TYPE,                                       FN_PTR(lookupType)},\n@@ -3128,0 +3154,1 @@\n+  {CC \"decodeFieldIndexToCPIndex\",                    CC \"(\" HS_CONSTANT_POOL2 \"I)I\",                                                       FN_PTR(decodeFieldIndexToCPIndex)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-  nonstatic_field(JavaThread,                  _held_monitor_count,                           int64_t)                               \\\n+  nonstatic_field(JavaThread,                  _held_monitor_count,                           intx)                                  \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,0 +193,4 @@\n+  return C2Compiler::is_intrinsic_supported(id);\n+}\n+\n+bool C2Compiler::is_intrinsic_supported(vmIntrinsics::ID id) {\n@@ -228,0 +232,15 @@\n+  case vmIntrinsics::_electronicCodeBook_encryptAESCrypt:\n+    if (StubRoutines::electronicCodeBook_encryptAESCrypt() == nullptr) return false;\n+    break;\n+  case vmIntrinsics::_electronicCodeBook_decryptAESCrypt:\n+    if (StubRoutines::electronicCodeBook_decryptAESCrypt() == nullptr) return false;\n+    break;\n+  case vmIntrinsics::_galoisCounterMode_AESCrypt:\n+    if (StubRoutines::galoisCounterMode_AESCrypt() == nullptr) return false;\n+    break;\n+  case vmIntrinsics::_bigIntegerRightShiftWorker:\n+    if (StubRoutines::bigIntegerRightShift() == nullptr) return false;\n+    break;\n+  case vmIntrinsics::_bigIntegerLeftShiftWorker:\n+    if (StubRoutines::bigIntegerLeftShift() == nullptr) return false;\n+    break;\n@@ -486,1 +505,1 @@\n-    if (!UseFMA || !Matcher::match_rule_supported(Op_FmaD)) return false;\n+    if (!Matcher::match_rule_supported(Op_FmaD)) return false;\n@@ -489,1 +508,1 @@\n-    if (!UseFMA || !Matcher::match_rule_supported(Op_FmaF)) return false;\n+    if (!Matcher::match_rule_supported(Op_FmaF)) return false;\n@@ -727,3 +746,0 @@\n-  case vmIntrinsics::_electronicCodeBook_encryptAESCrypt:\n-  case vmIntrinsics::_electronicCodeBook_decryptAESCrypt:\n-  case vmIntrinsics::_galoisCounterMode_AESCrypt:\n@@ -742,2 +758,0 @@\n-  case vmIntrinsics::_bigIntegerRightShiftWorker:\n-  case vmIntrinsics::_bigIntegerLeftShiftWorker:\n@@ -763,1 +777,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+#include \"logging\/log.hpp\"\n+#include \"logging\/logLevel.hpp\"\n+#include \"logging\/logMessage.hpp\"\n+#include \"logging\/logStream.hpp\"\n@@ -50,1 +54,9 @@\n-void trace_type_profile(Compile* C, ciMethod *method, int depth, int bci, ciMethod *prof_method, ciKlass *prof_klass, int site_count, int receiver_count) {\n+void print_trace_type_profile(outputStream* out, int depth, ciKlass* prof_klass, int site_count, int receiver_count) {\n+  CompileTask::print_inline_indent(depth, out);\n+  out->print(\" \\\\-> TypeProfile (%d\/%d counts) = \", receiver_count, site_count);\n+  prof_klass->name()->print_symbol_on(out);\n+  out->cr();\n+}\n+\n+void trace_type_profile(Compile* C, ciMethod* method, int depth, int bci, ciMethod* prof_method,\n+                        ciKlass* prof_klass, int site_count, int receiver_count) {\n@@ -62,6 +74,7 @@\n-    CompileTask::print_inline_indent(depth, out);\n-    out->print(\" \\\\-> TypeProfile (%d\/%d counts) = \", receiver_count, site_count);\n-    stringStream ss;\n-    prof_klass->name()->print_symbol_on(&ss);\n-    out->print(\"%s\", ss.freeze());\n-    out->cr();\n+    print_trace_type_profile(out, depth, prof_klass, site_count, receiver_count);\n+  }\n+\n+  LogTarget(Debug, jit, inlining) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    print_trace_type_profile(&ls, depth, prof_klass, site_count, receiver_count);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1734,0 +1734,14 @@\n+\/\/=============================================================================\n+\/\/------------------------------Ideal------------------------------------------\n+Node* FmaNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  \/\/ We canonicalize the node by converting \"(-a)*b+c\" into \"b*(-a)+c\"\n+  \/\/ This reduces the number of rules in the matcher, as we only need to check\n+  \/\/ for negations on the second argument, and not the symmetric case where\n+  \/\/ the first argument is negated.\n+  if (in(1)->is_Neg() && !in(2)->is_Neg()) {\n+    swap_edges(1, 2);\n+    return this;\n+  }\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -135,0 +135,2 @@\n+class NegNode;\n+class NegVNode;\n@@ -733,1 +735,0 @@\n-      DEFINE_CLASS_ID(InlineType, Type, 8)\n@@ -736,1 +737,3 @@\n-      DEFINE_CLASS_ID(Con, Type, 10)\n+        DEFINE_CLASS_ID(NegV, Vector, 8)\n+      DEFINE_CLASS_ID(InlineType, Type, 8)\n+      DEFINE_CLASS_ID(Con, Type, 9)\n@@ -738,1 +741,1 @@\n-      DEFINE_CLASS_ID(SafePointScalarMerge, Type, 9)\n+      DEFINE_CLASS_ID(SafePointScalarMerge, Type, 10)\n@@ -792,0 +795,1 @@\n+    DEFINE_CLASS_ID(Neg,      Node, 19)\n@@ -793,1 +797,1 @@\n-    _max_classes  = ClassMask_LShift\n+    _max_classes  = ClassMask_Neg\n@@ -957,0 +961,2 @@\n+  DEFINE_CLASS_QUERY(Neg)\n+  DEFINE_CLASS_QUERY(NegV)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -455,1 +455,3 @@\n-  NegNode( Node *in1 ) : Node(0,in1) {}\n+  NegNode(Node* in1) : Node(0, in1) {\n+    init_class_id(Class_Neg);\n+  }\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2997,1 +2997,1 @@\n-  if (ret == nullptr) {\n+  if (ret == nullptr && ref_handle.not_null()) {\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1181,1 +1181,1 @@\n-  char quote_c        = 0;\n+  int  quote_c        = 0;\n@@ -1193,1 +1193,1 @@\n-          token[pos++] = c;\n+          token[pos++] = checked_cast<char>(c);\n@@ -1213,1 +1213,1 @@\n-        token[pos++] = c;\n+        token[pos++] = checked_cast<char>(c);\n@@ -1569,1 +1569,1 @@\n-    MaxRAMPercentage = 100.0 \/ MaxRAMFraction;\n+    MaxRAMPercentage = 100.0 \/ (double)MaxRAMFraction;\n@@ -1573,1 +1573,1 @@\n-    MinRAMPercentage = 100.0 \/ MinRAMFraction;\n+    MinRAMPercentage = 100.0 \/ (double)MinRAMFraction;\n@@ -1577,1 +1577,1 @@\n-    InitialRAMPercentage = 100.0 \/ InitialRAMFraction;\n+    InitialRAMPercentage = 100.0 \/ (double)InitialRAMFraction;\n@@ -1583,2 +1583,2 @@\n-    julong reasonable_max = (julong)((phys_mem * MaxRAMPercentage) \/ 100);\n-    const julong reasonable_min = (julong)((phys_mem * MinRAMPercentage) \/ 100);\n+    julong reasonable_max = (julong)(((double)phys_mem * MaxRAMPercentage) \/ 100);\n+    const julong reasonable_min = (julong)(((double)phys_mem * MinRAMPercentage) \/ 100);\n@@ -1668,1 +1668,1 @@\n-      julong reasonable_initial = (julong)((phys_mem * InitialRAMPercentage) \/ 100);\n+      julong reasonable_initial = (julong)(((double)phys_mem * InitialRAMPercentage) \/ 100);\n@@ -1978,4 +1978,4 @@\n-bool Arguments::parse_uintx(const char* value,\n-                            uintx* uintx_arg,\n-                            uintx min_size) {\n-  uintx n;\n+bool Arguments::parse_uint(const char* value,\n+                           uint* uint_arg,\n+                           uint min_size) {\n+  uint n;\n@@ -1986,1 +1986,1 @@\n-    *uintx_arg = n;\n+    *uint_arg = n;\n@@ -2800,2 +2800,2 @@\n-      uintx max_tenuring_thresh = 0;\n-      if (!parse_uintx(tail, &max_tenuring_thresh, 0)) {\n+      uint max_tenuring_thresh = 0;\n+      if (!parse_uint(tail, &max_tenuring_thresh, 0)) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -382,4 +382,4 @@\n-  \/\/ parameter passed and returns the value in uintx_arg.  Returns\n-  \/\/ false otherwise, with uintx_arg undefined.\n-  static bool parse_uintx(const char* value, uintx* uintx_arg,\n-                          uintx min_size);\n+  \/\/ parameter passed and returns the value in uint_arg.  Returns\n+  \/\/ false otherwise, with uint_arg undefined.\n+  static bool parse_uint(const char* value, uint* uintx_arg,\n+                         uint min_size);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-  int result = _caller_adjustment;\n+  intptr_t result = _caller_adjustment;\n@@ -258,1 +258,1 @@\n-  return result;\n+  return checked_cast<int>(result);\n@@ -1115,1 +1115,1 @@\n-      _high = _low + cache->length() - 1;\n+      _high = checked_cast<PrimitiveType>(_low + cache->length() - 1);\n@@ -1134,1 +1134,1 @@\n-      int offset = value - _low;\n+      int offset = checked_cast<int>(value - _low);\n@@ -1751,1 +1751,1 @@\n-  int frame_size = caller.sp() - fr.sp();\n+  int frame_size = pointer_delta_as_int(caller.sp(), fr.sp());\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-  product(uintx, LogEventsBufferEntries, 20, DIAGNOSTIC,                    \\\n+  product(int, LogEventsBufferEntries, 20, DIAGNOSTIC,                      \\\n@@ -729,1 +729,1 @@\n-          \"at one time (minimum is 1024).\")                      \\\n+          \"at one time (minimum is 1024).\")                                 \\\n@@ -732,1 +732,1 @@\n-  product(intx, MonitorUsedDeflationThreshold, 90, DIAGNOSTIC,              \\\n+  product(int, MonitorUsedDeflationThreshold, 90, DIAGNOSTIC,               \\\n@@ -1122,1 +1122,1 @@\n-  develop(intx, FastAllocateSizeLimit, 128*K,                               \\\n+  develop(int, FastAllocateSizeLimit, 128*K,                                \\\n@@ -1255,1 +1255,1 @@\n-  product(intx,  AllocatePrefetchStyle, 1,                                  \\\n+  product(int,  AllocatePrefetchStyle, 1,                                   \\\n@@ -1262,1 +1262,1 @@\n-  product(intx,  AllocatePrefetchDistance, -1,                              \\\n+  product(int,  AllocatePrefetchDistance, -1,                               \\\n@@ -1267,1 +1267,1 @@\n-  product(intx,  AllocatePrefetchLines, 3,                                  \\\n+  product(int,  AllocatePrefetchLines, 3,                                   \\\n@@ -1271,1 +1271,1 @@\n-  product(intx,  AllocateInstancePrefetchLines, 1,                          \\\n+  product(int,  AllocateInstancePrefetchLines, 1,                           \\\n@@ -1276,1 +1276,1 @@\n-  product(intx,  AllocatePrefetchStepSize, 16,                              \\\n+  product(int,  AllocatePrefetchStepSize, 16,                               \\\n@@ -1329,1 +1329,1 @@\n-  develop(intx, StackPrintLimit, 100,                                       \\\n+  develop(int, StackPrintLimit, 100,                                        \\\n@@ -1763,1 +1763,1 @@\n-  product(intx, PerfDataSamplingInterval, 50,                               \\\n+  product(int, PerfDataSamplingInterval, 50,                                \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-  _chunk->next_chop();\n+  Chunk::next_chop(_chunk);\n","filename":"src\/hotspot\/share\/runtime\/handles.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -879,4 +879,4 @@\n-  assert(this->held_monitor_count() == this->jni_monitor_count(),\n-         \"held monitor count should be equal to jni: \" INT64_FORMAT \" != \" INT64_FORMAT,\n-         (int64_t)this->held_monitor_count(), (int64_t)this->jni_monitor_count());\n-  if (CheckJNICalls && this->jni_monitor_count() > 0) {\n+  assert(held_monitor_count() == jni_monitor_count(),\n+         \"held monitor count should be equal to jni: \" INTX_FORMAT \" != \" INTX_FORMAT,\n+         held_monitor_count(), jni_monitor_count());\n+  if (CheckJNICalls && jni_monitor_count() > 0) {\n@@ -1944,1 +1944,1 @@\n-void JavaThread::inc_held_monitor_count(int i, bool jni) {\n+void JavaThread::inc_held_monitor_count(intx i, bool jni) {\n@@ -1946,1 +1946,1 @@\n-  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_held_monitor_count);\n+  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INTX_FORMAT, _held_monitor_count);\n@@ -1949,1 +1949,1 @@\n-    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_jni_monitor_count);\n+    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INTX_FORMAT, _jni_monitor_count);\n@@ -1955,1 +1955,1 @@\n-void JavaThread::dec_held_monitor_count(int i, bool jni) {\n+void JavaThread::dec_held_monitor_count(intx i, bool jni) {\n@@ -1958,1 +1958,1 @@\n-  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_held_monitor_count);\n+  assert(_held_monitor_count >= 0, \"Must always be greater than 0: \" INTX_FORMAT, _held_monitor_count);\n@@ -1961,1 +1961,1 @@\n-    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INT64_FORMAT, (int64_t)_jni_monitor_count);\n+    assert(_jni_monitor_count >= 0, \"Must always be greater than 0: \" INTX_FORMAT, _jni_monitor_count);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -454,0 +454,1 @@\n+\n@@ -455,7 +456,2 @@\n-#ifdef _LP64\n-  int64_t _held_monitor_count;  \/\/ used by continuations for fast lock detection\n-  int64_t _jni_monitor_count;\n-#else\n-  int32_t _held_monitor_count;  \/\/ used by continuations for fast lock detection\n-  int32_t _jni_monitor_count;\n-#endif\n+  intx _held_monitor_count;  \/\/ used by continuations for fast lock detection\n+  intx _jni_monitor_count;\n@@ -603,2 +599,2 @@\n-  void inc_held_monitor_count(int i = 1, bool jni = false);\n-  void dec_held_monitor_count(int i = 1, bool jni = false);\n+  void inc_held_monitor_count(intx i = 1, bool jni = false);\n+  void dec_held_monitor_count(intx i = 1, bool jni = false);\n@@ -606,2 +602,2 @@\n-  int64_t held_monitor_count() { return (int64_t)_held_monitor_count; }\n-  int64_t jni_monitor_count()  { return (int64_t)_jni_monitor_count;  }\n+  intx held_monitor_count() { return _held_monitor_count; }\n+  intx jni_monitor_count()  { return _jni_monitor_count;  }\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-                                             uint64_t iterations) {\n+                                             int iterations) {\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -691,1 +691,1 @@\n-    int catch_pco = ret_pc - cm->code_begin();\n+    int catch_pco = pointer_delta_as_int(ret_pc, cm->code_begin());\n@@ -750,1 +750,1 @@\n-  int catch_pco = ret_pc - nm->code_begin();\n+  int catch_pco = pointer_delta_as_int(ret_pc, nm->code_begin());\n@@ -2389,1 +2389,1 @@\n-  return 100.0 * x \/ MAX2(y, (int64_t)1);\n+  return 100.0 * (double)x \/ (double)MAX2(y, (int64_t)1);\n@@ -2425,2 +2425,2 @@\n-    for (int i = 0; i <= n; i++) { sum += histo[i]; weighted_sum += i*histo[i]; }\n-    if (sum >= 1.0) { \/\/ prevent divide by zero or divide overflow\n+    for (int i = 0; i <= n; i++) { sum += (double)histo[i]; weighted_sum += (double)(i*histo[i]); }\n+    if (sum >= 1) { \/\/ prevent divide by zero or divide overflow\n@@ -2430,2 +2430,2 @@\n-        rest -= histo[i];\n-        tty->print_cr(\"%4d: \" UINT64_FORMAT_W(12) \" (%5.1f%%)\", i, histo[i], histo[i] \/ percent);\n+        rest -= (double)histo[i];\n+        tty->print_cr(\"%4d: \" UINT64_FORMAT_W(12) \" (%5.1f%%)\", i, histo[i], (double)histo[i] \/ percent);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-    return (tem == nullptr ? limit : tem + 1 - base);\n+    return (tem == nullptr ? limit : pointer_delta_as_int(tem + 1, base));\n@@ -353,1 +353,1 @@\n-      return (tem == nullptr ? limit : tem + 1 - base);\n+      return (tem == nullptr ? limit : pointer_delta_as_int(tem + 1, base));\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1204,2 +1204,2 @@\n-    float remainder = (100.0 - MonitorUsedDeflationThreshold) \/ 100.0;\n-    size_t new_ceiling = ceiling + (ceiling * remainder) + 1;\n+    double remainder = (100.0 - MonitorUsedDeflationThreshold) \/ 100.0;\n+    size_t new_ceiling = ceiling + (size_t)((double)ceiling * remainder) + 1;\n@@ -1218,1 +1218,1 @@\n-                               \", monitor_usage=\" SIZE_FORMAT \", threshold=\" INTX_FORMAT,\n+                               \", monitor_usage=\" SIZE_FORMAT \", threshold=%d\",\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -952,3 +952,0 @@\n-     static_field(JDK_Version,                 _current,                                      JDK_Version)                           \\\n-  nonstatic_field(JDK_Version,                 _major,                                        unsigned char)                         \\\n-                                                                                                                                     \\\n@@ -1881,1 +1878,0 @@\n-  declare_toplevel_type(JDK_Version)                                      \\\n@@ -3045,1 +3041,1 @@\n-    int len = end - start + 1;\n+    int len = pointer_delta_as_int(end, start) + 1;\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1358,0 +1358,4 @@\n+template<typename K> int primitive_compare(const K& k0, const K& k1) {\n+  return ((k0 < k1) ? -1 : (k0 == k1) ? 0 : 1);\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n-applications\/ctw\/modules\/jdk_crypto_ec.java 8312194 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import compiler.lib.ir_framework.driver.irmatching.parser.VMInfo;\n@@ -72,0 +73,11 @@\n+ *     <li><p>Vector IR nodes:  The IR node placeholder string contains an additional {@link #VECTOR_PREFIX}.\n+ *                              Using this IR node, one can check for the type and size of a vector. The type must\n+ *                              be directly specified in {@link #vectorNode}. The size can be specified directly with\n+ *                              an additional argument using {@link #VECTOR_SIZE}, followed by a size tag or a comma\n+ *                              separated list of sizes. If the size argument is not given, then a default size of\n+ *                              {@link #VECTOR_SIZE_MAX} is taken, which is the number of elements that can fit in a\n+ *                              vector of the specified type (depends on the VM flag MaxVectorSize and CPU features).\n+ *                              However, when using {@link IR#failOn} or {@link IR#counts()} with comparison {@code <},\n+ *                              or {@code <=} or {@code =0}, the default size is {@link #VECTOR_SIZE_ANY}, allowing any\n+ *                              size. The motivation for these default values is that in most cases one wants to have\n+ *                              vectorization with maximal vector width, or no vectorization of any vector width.\n@@ -83,0 +95,5 @@\n+    \/**\n+     * Prefix for vector IR nodes.\n+     *\/\n+    private static final String VECTOR_PREFIX = PREFIX + \"V#\";\n+\n@@ -93,0 +110,19 @@\n+    public static final String VECTOR_SIZE = \"_@\";\n+    public static final String VECTOR_SIZE_TAG_ANY = \"any\";\n+    public static final String VECTOR_SIZE_TAG_MAX = \"max_for_type\";\n+    public static final String VECTOR_SIZE_ANY = VECTOR_SIZE + VECTOR_SIZE_TAG_ANY; \/\/ default for counts \"=0\" and failOn\n+    public static final String VECTOR_SIZE_MAX = VECTOR_SIZE + VECTOR_SIZE_TAG_MAX; \/\/ default in counts\n+    public static final String VECTOR_SIZE_2   = VECTOR_SIZE + \"2\";\n+    public static final String VECTOR_SIZE_4   = VECTOR_SIZE + \"4\";\n+    public static final String VECTOR_SIZE_8   = VECTOR_SIZE + \"8\";\n+    public static final String VECTOR_SIZE_16  = VECTOR_SIZE + \"16\";\n+    public static final String VECTOR_SIZE_32  = VECTOR_SIZE + \"32\";\n+    public static final String VECTOR_SIZE_64  = VECTOR_SIZE + \"64\";\n+\n+    private static final String TYPE_BYTE   = \"byte\";\n+    private static final String TYPE_CHAR   = \"char\";\n+    private static final String TYPE_SHORT  = \"short\";\n+    private static final String TYPE_INT    = \"int\";\n+    private static final String TYPE_LONG   = \"long\";\n+    private static final String TYPE_FLOAT  = \"float\";\n+    private static final String TYPE_DOUBLE = \"double\";\n@@ -99,0 +135,5 @@\n+    \/**\n+     * Map every vectorNode to a type string.\n+     *\/\n+    private static final Map<String, String> VECTOR_NODE_TYPE = new HashMap<>();\n+\n@@ -102,1 +143,1 @@\n-     * nodes (see class description above).\n+     * nodes, or VECTOR_PREFIX for vector nodes (see class description above).\n@@ -106,1 +147,1 @@\n-     * public static final String IR_NODE = [PREFIX|COMPOSITE_PREFIX] + \"IR_NODE\" + POSTFIX;\n+     * public static final String IR_NODE = [PREFIX|COMPOSITE_PREFIX|VECTOR_PREFIX] + \"IR_NODE\" + POSTFIX;\n@@ -134,1 +175,28 @@\n-    public static final String ABS_V = PREFIX + \"ABS_V\" + POSTFIX;\n+    public static final String ABS_VB = VECTOR_PREFIX + \"ABS_VB\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VB, \"AbsVB\", TYPE_BYTE);\n+    }\n+\n+    \/\/ ABS_VC \/ AbsVC does not exist (char is 2 byte unsigned)\n+\n+    public static final String ABS_VS = VECTOR_PREFIX + \"ABS_VS\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VS, \"AbsVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String ABS_VI = VECTOR_PREFIX + \"ABS_VI\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VI, \"AbsVI\", TYPE_INT);\n+    }\n+\n+    public static final String ABS_VL = VECTOR_PREFIX + \"ABS_VL\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VL, \"AbsVL\", TYPE_LONG);\n+    }\n+\n+    public static final String ABS_VF = VECTOR_PREFIX + \"ABS_VF\" + POSTFIX;\n+    static {\n+        vectorNode(ABS_VF, \"AbsVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String ABS_VD = VECTOR_PREFIX + \"ABS_VD\" + POSTFIX;\n@@ -136,1 +204,1 @@\n-        beforeMatchingNameRegex(ABS_V, \"AbsV(B|S|I|L|F|D)\");\n+        vectorNode(ABS_VD, \"AbsVD\", TYPE_DOUBLE);\n@@ -154,1 +222,1 @@\n-    public static final String ADD_V = PREFIX + \"ADD_V\" + POSTFIX;\n+    public static final String ADD_VD = VECTOR_PREFIX + \"ADD_VD\" + POSTFIX;\n@@ -156,1 +224,1 @@\n-        beforeMatchingNameRegex(ADD_V, \"AddV(B|S|I|L|F|D)\");\n+        vectorNode(ADD_VD, \"AddVD\", TYPE_DOUBLE);\n@@ -159,1 +227,1 @@\n-    public static final String ADD_VD = PREFIX + \"ADD_VD\" + POSTFIX;\n+    public static final String ADD_VI = VECTOR_PREFIX + \"ADD_VI\" + POSTFIX;\n@@ -161,1 +229,1 @@\n-        beforeMatchingNameRegex(ADD_VD, \"AddVD\");\n+        vectorNode(ADD_VI, \"AddVI\", TYPE_INT);\n@@ -164,1 +232,1 @@\n-    public static final String ADD_VI = PREFIX + \"ADD_VI\" + POSTFIX;\n+    public static final String ADD_VF = VECTOR_PREFIX + \"ADD_VF\" + POSTFIX;\n@@ -166,1 +234,1 @@\n-        beforeMatchingNameRegex(ADD_VI, \"AddVI\");\n+        vectorNode(ADD_VF, \"AddVF\", TYPE_FLOAT);\n@@ -169,1 +237,1 @@\n-    public static final String ADD_VF = PREFIX + \"ADD_VF\" + POSTFIX;\n+    public static final String ADD_VB = VECTOR_PREFIX + \"ADD_VB\" + POSTFIX;\n@@ -171,1 +239,11 @@\n-        beforeMatchingNameRegex(ADD_VF, \"AddVF\");\n+        vectorNode(ADD_VB, \"AddVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String ADD_VS = VECTOR_PREFIX + \"ADD_VS\" + POSTFIX;\n+    static {\n+        vectorNode(ADD_VS, \"AddVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String ADD_VL = VECTOR_PREFIX + \"ADD_VL\" + POSTFIX;\n+    static {\n+        vectorNode(ADD_VL, \"AddVL\", TYPE_LONG);\n@@ -238,1 +316,1 @@\n-    public static final String AND_V = PREFIX + \"AND_V\" + POSTFIX;\n+    public static final String AND_VB = VECTOR_PREFIX + \"AND_VB\" + POSTFIX;\n@@ -240,1 +318,21 @@\n-        beforeMatchingNameRegex(AND_V, \"AndV\");\n+        vectorNode(AND_VB, \"AndV\", TYPE_BYTE);\n+    }\n+\n+    public static final String AND_VC = VECTOR_PREFIX + \"AND_VC\" + POSTFIX;\n+    static {\n+        vectorNode(AND_VC, \"AndV\", TYPE_CHAR);\n+    }\n+\n+    public static final String AND_VS = VECTOR_PREFIX + \"AND_VS\" + POSTFIX;\n+    static {\n+        vectorNode(AND_VS, \"AndV\", TYPE_SHORT);\n+    }\n+\n+    public static final String AND_VI = VECTOR_PREFIX + \"AND_VI\" + POSTFIX;\n+    static {\n+        vectorNode(AND_VI, \"AndV\", TYPE_INT);\n+    }\n+\n+    public static final String AND_VL = VECTOR_PREFIX + \"AND_VL\" + POSTFIX;\n+    static {\n+        vectorNode(AND_VL, \"AndV\", TYPE_LONG);\n@@ -389,1 +487,6 @@\n-    public static final String DIV_V = PREFIX + \"DIV_V\" + POSTFIX;\n+    public static final String DIV_VF = VECTOR_PREFIX + \"DIV_VF\" + POSTFIX;\n+    static {\n+        vectorNode(DIV_VF, \"DivVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String DIV_VD = VECTOR_PREFIX + \"DIV_VD\" + POSTFIX;\n@@ -391,1 +494,1 @@\n-        beforeMatchingNameRegex(DIV_V, \"DivV(F|D)\");\n+        vectorNode(DIV_VD, \"DivVD\", TYPE_DOUBLE);\n@@ -421,1 +524,1 @@\n-    public static final String FMA_V = PREFIX + \"FMA_V\" + POSTFIX;\n+    public static final String FMA_VF = VECTOR_PREFIX + \"FMA_VF\" + POSTFIX;\n@@ -423,1 +526,6 @@\n-        beforeMatchingNameRegex(FMA_V, \"FmaV(F|D)\");\n+        vectorNode(FMA_VF, \"FmaVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String FMA_VD = VECTOR_PREFIX + \"FMA_VD\" + POSTFIX;\n+    static {\n+        vectorNode(FMA_VD, \"FmaVD\", TYPE_DOUBLE);\n@@ -590,1 +698,31 @@\n-    public static final String LOAD_VECTOR = PREFIX + \"LOAD_VECTOR\" + POSTFIX;\n+    public static final String LOAD_VECTOR_B = VECTOR_PREFIX + \"LOAD_VECTOR_B\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_B, \"LoadVector\", TYPE_BYTE);\n+    }\n+\n+    public static final String LOAD_VECTOR_C = VECTOR_PREFIX + \"LOAD_VECTOR_C\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_C, \"LoadVector\", TYPE_CHAR);\n+    }\n+\n+    public static final String LOAD_VECTOR_S = VECTOR_PREFIX + \"LOAD_VECTOR_S\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_S, \"LoadVector\", TYPE_SHORT);\n+    }\n+\n+    public static final String LOAD_VECTOR_I = VECTOR_PREFIX + \"LOAD_VECTOR_I\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_I, \"LoadVector\", TYPE_INT);\n+    }\n+\n+    public static final String LOAD_VECTOR_L = VECTOR_PREFIX + \"LOAD_VECTOR_L\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_L, \"LoadVector\", TYPE_LONG);\n+    }\n+\n+    public static final String LOAD_VECTOR_F = VECTOR_PREFIX + \"LOAD_VECTOR_F\" + POSTFIX;\n+    static {\n+        vectorNode(LOAD_VECTOR_F, \"LoadVector\", TYPE_FLOAT);\n+    }\n+\n+    public static final String LOAD_VECTOR_D = VECTOR_PREFIX + \"LOAD_VECTOR_D\" + POSTFIX;\n@@ -592,1 +730,1 @@\n-        beforeMatchingNameRegex(LOAD_VECTOR, \"LoadVector\");\n+        vectorNode(LOAD_VECTOR_D, \"LoadVector\", TYPE_DOUBLE);\n@@ -632,1 +770,1 @@\n-    public static final String LSHIFT_V = PREFIX + \"LSHIFT_V\" + POSTFIX;\n+    public static final String LSHIFT_VB = VECTOR_PREFIX + \"LSHIFT_VB\" + POSTFIX;\n@@ -634,1 +772,21 @@\n-        beforeMatchingNameRegex(LSHIFT_V, \"LShiftV(B|S|I|L)\");\n+        vectorNode(LSHIFT_VB, \"LShiftVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String LSHIFT_VS = VECTOR_PREFIX + \"LSHIFT_VS\" + POSTFIX;\n+    static {\n+        vectorNode(LSHIFT_VS, \"LShiftVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String LSHIFT_VC = VECTOR_PREFIX + \"LSHIFT_VC\" + POSTFIX;\n+    static {\n+        vectorNode(LSHIFT_VC, \"LShiftVS\", TYPE_CHAR); \/\/ using short op with char type\n+    }\n+\n+    public static final String LSHIFT_VI = VECTOR_PREFIX + \"LSHIFT_VI\" + POSTFIX;\n+    static {\n+        vectorNode(LSHIFT_VI, \"LShiftVI\", TYPE_INT);\n+    }\n+\n+    public static final String LSHIFT_VL = VECTOR_PREFIX + \"LSHIFT_VL\" + POSTFIX;\n+    static {\n+        vectorNode(LSHIFT_VL, \"LShiftVL\", TYPE_LONG);\n@@ -677,1 +835,11 @@\n-    public static final String MAX_V = PREFIX + \"MAX_V\" + POSTFIX;\n+    public static final String MAX_VI = VECTOR_PREFIX + \"MAX_VI\" + POSTFIX;\n+    static {\n+        vectorNode(MAX_VI, \"MaxV\", TYPE_INT);\n+    }\n+\n+    public static final String MAX_VF = VECTOR_PREFIX + \"MAX_VF\" + POSTFIX;\n+    static {\n+        vectorNode(MAX_VF, \"MaxV\", TYPE_FLOAT);\n+    }\n+\n+    public static final String MAX_VD = VECTOR_PREFIX + \"MAX_VD\" + POSTFIX;\n@@ -679,1 +847,1 @@\n-        beforeMatchingNameRegex(MAX_V, \"MaxV\");\n+        vectorNode(MAX_VD, \"MaxV\", TYPE_DOUBLE);\n@@ -727,1 +895,6 @@\n-    public static final String MIN_V = PREFIX + \"MIN_V\" + POSTFIX;\n+    public static final String MIN_VI = VECTOR_PREFIX + \"MIN_VI\" + POSTFIX;\n+    static {\n+        vectorNode(MIN_VI, \"MinV\", TYPE_INT);\n+    }\n+\n+    public static final String MIN_VF = VECTOR_PREFIX + \"MIN_VF\" + POSTFIX;\n@@ -729,1 +902,6 @@\n-        beforeMatchingNameRegex(MIN_V, \"MinV\");\n+        vectorNode(MIN_VF, \"MinV\", TYPE_FLOAT);\n+    }\n+\n+    public static final String MIN_VD = VECTOR_PREFIX + \"MIN_VD\" + POSTFIX;\n+    static {\n+        vectorNode(MIN_VD, \"MinV\", TYPE_DOUBLE);\n@@ -757,1 +935,6 @@\n-    public static final String MUL_V = PREFIX + \"MUL_V\" + POSTFIX;\n+    public static final String MUL_VL = VECTOR_PREFIX + \"MUL_VL\" + POSTFIX;\n+    static {\n+        vectorNode(MUL_VL, \"MulVL\", TYPE_LONG);\n+    }\n+\n+    public static final String MUL_VI = VECTOR_PREFIX + \"MUL_VI\" + POSTFIX;\n@@ -759,1 +942,1 @@\n-        beforeMatchingNameRegex(MUL_V, \"MulV(B|S|I|L|F|D)\");\n+        vectorNode(MUL_VI, \"MulVI\", TYPE_INT);\n@@ -762,1 +945,1 @@\n-    public static final String MUL_VL = PREFIX + \"MUL_VL\" + POSTFIX;\n+    public static final String MUL_VF = VECTOR_PREFIX + \"MUL_VF\" + POSTFIX;\n@@ -764,1 +947,1 @@\n-        beforeMatchingNameRegex(MUL_VL, \"MulVL\");\n+        vectorNode(MUL_VF, \"MulVF\", TYPE_FLOAT);\n@@ -767,1 +950,1 @@\n-    public static final String MUL_VI = PREFIX + \"MUL_VI\" + POSTFIX;\n+    public static final String MUL_VD = VECTOR_PREFIX + \"MUL_VD\" + POSTFIX;\n@@ -769,1 +952,1 @@\n-        beforeMatchingNameRegex(MUL_VI, \"MulVI\");\n+        vectorNode(MUL_VD, \"MulVD\", TYPE_DOUBLE);\n@@ -772,1 +955,1 @@\n-    public static final String MUL_VF = PREFIX + \"MUL_VF\" + POSTFIX;\n+    public static final String MUL_VB = VECTOR_PREFIX + \"MUL_VB\" + POSTFIX;\n@@ -774,1 +957,1 @@\n-        beforeMatchingNameRegex(MUL_VF, \"MulVF\");\n+        vectorNode(MUL_VB, \"MulVB\", TYPE_BYTE);\n@@ -777,1 +960,1 @@\n-    public static final String MUL_VD = PREFIX + \"MUL_VD\" + POSTFIX;\n+    public static final String MUL_VS = VECTOR_PREFIX + \"MUL_VS\" + POSTFIX;\n@@ -779,1 +962,1 @@\n-        beforeMatchingNameRegex(MUL_VD, \"MulVD\");\n+        vectorNode(MUL_VS, \"MulVS\", TYPE_SHORT);\n@@ -812,1 +995,1 @@\n-    public static final String NEG_V = PREFIX + \"NEG_V\" + POSTFIX;\n+    public static final String NEG_VF = VECTOR_PREFIX + \"NEG_VF\" + POSTFIX;\n@@ -814,1 +997,6 @@\n-        beforeMatchingNameRegex(NEG_V, \"NegV(F|D)\");\n+        vectorNode(NEG_VF, \"NegVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String NEG_VD = VECTOR_PREFIX + \"NEG_VD\" + POSTFIX;\n+    static {\n+        vectorNode(NEG_VD, \"NegVD\", TYPE_DOUBLE);\n@@ -832,1 +1020,11 @@\n-    public static final String OR_V = PREFIX + \"OR_V\" + POSTFIX;\n+    public static final String OR_VB = VECTOR_PREFIX + \"OR_VB\" + POSTFIX;\n+    static {\n+        vectorNode(OR_VB, \"OrV\", TYPE_BYTE);\n+    }\n+\n+    public static final String OR_VS = VECTOR_PREFIX + \"OR_VS\" + POSTFIX;\n+    static {\n+        vectorNode(OR_VS, \"OrV\", TYPE_SHORT);\n+    }\n+\n+    public static final String OR_VI = VECTOR_PREFIX + \"OR_VI\" + POSTFIX;\n@@ -834,1 +1032,6 @@\n-        beforeMatchingNameRegex(OR_V, \"OrV\");\n+        vectorNode(OR_VI, \"OrV\", TYPE_INT);\n+    }\n+\n+    public static final String OR_VL = VECTOR_PREFIX + \"OR_VL\" + POSTFIX;\n+    static {\n+        vectorNode(OR_VL, \"OrV\", TYPE_LONG);\n@@ -863,1 +1066,1 @@\n-    public static final String POPCOUNT_VI = PREFIX + \"POPCOUNT_VI\" + POSTFIX;\n+    public static final String POPCOUNT_VI = VECTOR_PREFIX + \"POPCOUNT_VI\" + POSTFIX;\n@@ -865,1 +1068,1 @@\n-        superWordNodes(POPCOUNT_VI, \"PopCountVI\");\n+        vectorNode(POPCOUNT_VI, \"PopCountVI\", TYPE_INT);\n@@ -868,1 +1071,1 @@\n-    public static final String POPCOUNT_VL = PREFIX + \"POPCOUNT_VL\" + POSTFIX;\n+    public static final String POPCOUNT_VL = VECTOR_PREFIX + \"POPCOUNT_VL\" + POSTFIX;\n@@ -870,1 +1073,1 @@\n-        superWordNodes(POPCOUNT_VL, \"PopCountVL\");\n+        vectorNode(POPCOUNT_VL, \"PopCountVL\", TYPE_LONG);\n@@ -873,1 +1076,1 @@\n-    public static final String COUNTTRAILINGZEROS_VL = PREFIX + \"COUNTTRAILINGZEROS_VL\" + POSTFIX;\n+    public static final String COUNTTRAILINGZEROS_VL = VECTOR_PREFIX + \"COUNTTRAILINGZEROS_VL\" + POSTFIX;\n@@ -875,1 +1078,1 @@\n-        superWordNodes(COUNTTRAILINGZEROS_VL, \"CountTrailingZerosV\");\n+        vectorNode(COUNTTRAILINGZEROS_VL, \"CountTrailingZerosV\", TYPE_LONG);\n@@ -878,1 +1081,1 @@\n-    public static final String COUNTLEADINGZEROS_VL = PREFIX + \"COUNTLEADINGZEROS_VL\" + POSTFIX;\n+    public static final String COUNTLEADINGZEROS_VL = VECTOR_PREFIX + \"COUNTLEADINGZEROS_VL\" + POSTFIX;\n@@ -880,1 +1083,1 @@\n-        superWordNodes(COUNTLEADINGZEROS_VL, \"CountLeadingZerosV\");\n+        vectorNode(COUNTLEADINGZEROS_VL, \"CountLeadingZerosV\", TYPE_LONG);\n@@ -949,1 +1152,1 @@\n-    public static final String REVERSE_BYTES_V = PREFIX + \"REVERSE_BYTES_V\" + POSTFIX;\n+    public static final String REVERSE_BYTES_VB = VECTOR_PREFIX + \"REVERSE_BYTES_VB\" + POSTFIX;\n@@ -951,1 +1154,16 @@\n-        beforeMatchingNameRegex(REVERSE_BYTES_V, \"ReverseBytesV\");\n+        vectorNode(REVERSE_BYTES_VB, \"ReverseBytesV\", TYPE_BYTE);\n+    }\n+\n+    public static final String REVERSE_BYTES_VS = VECTOR_PREFIX + \"REVERSE_BYTES_VS\" + POSTFIX;\n+    static {\n+        vectorNode(REVERSE_BYTES_VS, \"ReverseBytesV\", TYPE_SHORT);\n+    }\n+\n+    public static final String REVERSE_BYTES_VI = VECTOR_PREFIX + \"REVERSE_BYTES_VI\" + POSTFIX;\n+    static {\n+        vectorNode(REVERSE_BYTES_VI, \"ReverseBytesV\", TYPE_INT);\n+    }\n+\n+    public static final String REVERSE_BYTES_VL = VECTOR_PREFIX + \"REVERSE_BYTES_VL\" + POSTFIX;\n+    static {\n+        vectorNode(REVERSE_BYTES_VL, \"ReverseBytesV\", TYPE_LONG);\n@@ -964,1 +1182,1 @@\n-    public static final String REVERSE_V = PREFIX + \"REVERSE_V\" + POSTFIX;\n+    public static final String REVERSE_VI = VECTOR_PREFIX + \"REVERSE_VI\" + POSTFIX;\n@@ -966,1 +1184,1 @@\n-        beforeMatchingNameRegex(REVERSE_V, \"ReverseV\");\n+        vectorNode(REVERSE_VI, \"ReverseV\", TYPE_INT);\n@@ -969,1 +1187,1 @@\n-    public static final String ROUND_VD = PREFIX + \"ROUND_VD\" + POSTFIX;\n+    public static final String REVERSE_VL = VECTOR_PREFIX + \"REVERSE_VL\" + POSTFIX;\n@@ -971,1 +1189,1 @@\n-        beforeMatchingNameRegex(ROUND_VD, \"RoundVD\");\n+        vectorNode(REVERSE_VL, \"ReverseV\", TYPE_LONG);\n@@ -974,1 +1192,1 @@\n-    public static final String ROUND_VF = PREFIX + \"ROUND_VF\" + POSTFIX;\n+    public static final String ROUND_VD = VECTOR_PREFIX + \"ROUND_VD\" + POSTFIX;\n@@ -976,1 +1194,6 @@\n-        beforeMatchingNameRegex(ROUND_VF, \"RoundVF\");\n+        vectorNode(ROUND_VD, \"RoundVD\", TYPE_LONG);\n+    }\n+\n+    public static final String ROUND_VF = VECTOR_PREFIX + \"ROUND_VF\" + POSTFIX;\n+    static {\n+        vectorNode(ROUND_VF, \"RoundVF\", TYPE_INT);\n@@ -999,1 +1222,1 @@\n-    public static final String ROUND_DOUBLE_MODE_V = PREFIX + \"ROUND_DOUBLE_MODE_V\" + POSTFIX;\n+    public static final String ROUND_DOUBLE_MODE_V = VECTOR_PREFIX + \"ROUND_DOUBLE_MODE_V\" + POSTFIX;\n@@ -1001,1 +1224,1 @@\n-        beforeMatchingNameRegex(ROUND_DOUBLE_MODE_V, \"RoundDoubleModeV\");\n+        vectorNode(ROUND_DOUBLE_MODE_V, \"RoundDoubleModeV\", TYPE_DOUBLE);\n@@ -1019,1 +1242,6 @@\n-    public static final String RSHIFT_VB = PREFIX + \"RSHIFT_VB\" + POSTFIX;\n+    public static final String RSHIFT_VB = VECTOR_PREFIX + \"RSHIFT_VB\" + POSTFIX;\n+    static {\n+        vectorNode(RSHIFT_VB, \"RShiftVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String RSHIFT_VS = VECTOR_PREFIX + \"RSHIFT_VS\" + POSTFIX;\n@@ -1021,1 +1249,1 @@\n-        beforeMatchingNameRegex(RSHIFT_VB, \"RShiftVB\");\n+        vectorNode(RSHIFT_VS, \"RShiftVS\", TYPE_SHORT);\n@@ -1024,1 +1252,1 @@\n-    public static final String RSHIFT_VS = PREFIX + \"RSHIFT_VS\" + POSTFIX;\n+    public static final String RSHIFT_VC = VECTOR_PREFIX + \"RSHIFT_VC\" + POSTFIX;\n@@ -1026,1 +1254,1 @@\n-        beforeMatchingNameRegex(RSHIFT_VS, \"RShiftVS\");\n+        vectorNode(RSHIFT_VC, \"RShiftVS\", TYPE_CHAR); \/\/ short computation with char type\n@@ -1029,1 +1257,1 @@\n-    public static final String RSHIFT_V = PREFIX + \"RSHIFT_V\" + POSTFIX;\n+    public static final String RSHIFT_VI = VECTOR_PREFIX + \"RSHIFT_VI\" + POSTFIX;\n@@ -1031,1 +1259,6 @@\n-        beforeMatchingNameRegex(RSHIFT_V, \"RShiftV(B|S|I|L)\");\n+        vectorNode(RSHIFT_VI, \"RShiftVI\", TYPE_INT);\n+    }\n+\n+    public static final String RSHIFT_VL = VECTOR_PREFIX + \"RSHIFT_VL\" + POSTFIX;\n+    static {\n+        vectorNode(RSHIFT_VL, \"RShiftVL\", TYPE_LONG);\n@@ -1045,1 +1278,6 @@\n-    public static final String SIGNUM_VD = PREFIX + \"SIGNUM_VD\" + POSTFIX;\n+    public static final String SIGNUM_VD = VECTOR_PREFIX + \"SIGNUM_VD\" + POSTFIX;\n+    static {\n+        vectorNode(SIGNUM_VD, \"SignumVD\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String SIGNUM_VF = VECTOR_PREFIX + \"SIGNUM_VF\" + POSTFIX;\n@@ -1047,1 +1285,1 @@\n-        beforeMatchingNameRegex(SIGNUM_VD, \"SignumVD\");\n+        vectorNode(SIGNUM_VF, \"SignumVF\", TYPE_FLOAT);\n@@ -1050,1 +1288,1 @@\n-    public static final String SIGNUM_VF = PREFIX + \"SIGNUM_VF\" + POSTFIX;\n+    public static final String SQRT_VF = VECTOR_PREFIX + \"SQRT_VF\" + POSTFIX;\n@@ -1052,1 +1290,1 @@\n-        beforeMatchingNameRegex(SIGNUM_VF, \"SignumVF\");\n+        vectorNode(SQRT_VF, \"SqrtVF\", TYPE_FLOAT);\n@@ -1055,1 +1293,1 @@\n-    public static final String SQRT_V = PREFIX + \"SQRT_V\" + POSTFIX;\n+    public static final String SQRT_VD = VECTOR_PREFIX + \"SQRT_VD\" + POSTFIX;\n@@ -1057,1 +1295,1 @@\n-        beforeMatchingNameRegex(SQRT_V, \"SqrtV(F|D)\");\n+        vectorNode(SQRT_VD, \"SqrtVD\", TYPE_DOUBLE);\n@@ -1196,1 +1434,1 @@\n-    public static final String SUB_V = PREFIX + \"SUB_V\" + POSTFIX;\n+    public static final String SUB_VB = VECTOR_PREFIX + \"SUB_VB\" + POSTFIX;\n@@ -1198,1 +1436,26 @@\n-        beforeMatchingNameRegex(SUB_V, \"SubV(B|S|I|L|F|D)\");\n+        vectorNode(SUB_VB, \"SubVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String SUB_VS = VECTOR_PREFIX + \"SUB_VS\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VS, \"SubVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String SUB_VI = VECTOR_PREFIX + \"SUB_VI\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VI, \"SubVI\", TYPE_INT);\n+    }\n+\n+    public static final String SUB_VL = VECTOR_PREFIX + \"SUB_VL\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VL, \"SubVL\", TYPE_LONG);\n+    }\n+\n+    public static final String SUB_VF = VECTOR_PREFIX + \"SUB_VF\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VF, \"SubVF\", TYPE_FLOAT);\n+    }\n+\n+    public static final String SUB_VD = VECTOR_PREFIX + \"SUB_VD\" + POSTFIX;\n+    static {\n+        vectorNode(SUB_VD, \"SubVD\", TYPE_DOUBLE);\n@@ -1276,1 +1539,21 @@\n-    public static final String URSHIFT_V = PREFIX + \"URSHIFT_V\" + POSTFIX;\n+    public static final String URSHIFT_VB = VECTOR_PREFIX + \"URSHIFT_VB\" + POSTFIX;\n+    static {\n+        vectorNode(URSHIFT_VB, \"URShiftVB\", TYPE_BYTE);\n+    }\n+\n+    public static final String URSHIFT_VS = VECTOR_PREFIX + \"URSHIFT_VS\" + POSTFIX;\n+    static {\n+        vectorNode(URSHIFT_VS, \"URShiftVS\", TYPE_SHORT);\n+    }\n+\n+    public static final String URSHIFT_VC = VECTOR_PREFIX + \"URSHIFT_VC\" + POSTFIX;\n+    static {\n+        vectorNode(URSHIFT_VC, \"URShiftVS\", TYPE_CHAR); \/\/ short computation with char type\n+    }\n+\n+    public static final String URSHIFT_VI = VECTOR_PREFIX + \"URSHIFT_VI\" + POSTFIX;\n+    static {\n+        vectorNode(URSHIFT_VI, \"URShiftVI\", TYPE_INT);\n+    }\n+\n+    public static final String URSHIFT_VL = VECTOR_PREFIX + \"URSHIFT_VL\" + POSTFIX;\n@@ -1278,1 +1561,1 @@\n-        beforeMatchingNameRegex(URSHIFT_V, \"URShiftV(B|S|I|L)\");\n+        vectorNode(URSHIFT_VL, \"URShiftVL\", TYPE_LONG);\n@@ -1291,1 +1574,16 @@\n-    public static final String VECTOR_BLEND = PREFIX + \"VECTOR_BLEND\" + POSTFIX;\n+    public static final String VECTOR_BLEND_B = VECTOR_PREFIX + \"VECTOR_BLEND_B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_BLEND_B, \"VectorBlend\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_BLEND_F = VECTOR_PREFIX + \"VECTOR_BLEND_F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_BLEND_F, \"VectorBlend\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_BLEND_D = VECTOR_PREFIX + \"VECTOR_BLEND_D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_BLEND_D, \"VectorBlend\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_MASK_CMP_I = VECTOR_PREFIX + \"VECTOR_MASK_CMP_I\" + POSTFIX;\n@@ -1293,1 +1591,1 @@\n-        beforeMatchingNameRegex(VECTOR_BLEND, \"VectorBlend\");\n+        vectorNode(VECTOR_MASK_CMP_I, \"VectorMaskCmp\", TYPE_INT);\n@@ -1296,1 +1594,1 @@\n-    public static final String VECTOR_MASK_CMP = PREFIX + \"VECTOR_MASK_CMP\" + POSTFIX;\n+    public static final String VECTOR_MASK_CMP_L = VECTOR_PREFIX + \"VECTOR_MASK_CMP_L\" + POSTFIX;\n@@ -1298,1 +1596,1 @@\n-        beforeMatchingNameRegex(VECTOR_MASK_CMP, \"VectorMaskCmp\");\n+        vectorNode(VECTOR_MASK_CMP_L, \"VectorMaskCmp\", TYPE_LONG);\n@@ -1301,1 +1599,1 @@\n-    public static final String VECTOR_CAST_B2X = PREFIX + \"VECTOR_CAST_B2X\" + POSTFIX;\n+    public static final String VECTOR_MASK_CMP_F = VECTOR_PREFIX + \"VECTOR_MASK_CMP_F\" + POSTFIX;\n@@ -1303,1 +1601,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_B2X, \"VectorCastB2X\");\n+        vectorNode(VECTOR_MASK_CMP_F, \"VectorMaskCmp\", TYPE_FLOAT);\n@@ -1306,1 +1604,1 @@\n-    public static final String VECTOR_CAST_D2X = PREFIX + \"VECTOR_CAST_D2X\" + POSTFIX;\n+    public static final String VECTOR_MASK_CMP_D = VECTOR_PREFIX + \"VECTOR_MASK_CMP_D\" + POSTFIX;\n@@ -1308,1 +1606,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_D2X, \"VectorCastD2X\");\n+        vectorNode(VECTOR_MASK_CMP_D, \"VectorMaskCmp\", TYPE_DOUBLE);\n@@ -1311,1 +1609,1 @@\n-    public static final String VECTOR_CAST_F2X = PREFIX + \"VECTOR_CAST_F2X\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2S = VECTOR_PREFIX + \"VECTOR_CAST_B2S\" + POSTFIX;\n@@ -1313,1 +1611,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_F2X, \"VectorCastF2X\");\n+        vectorNode(VECTOR_CAST_B2S, \"VectorCastB2X\", TYPE_SHORT);\n@@ -1316,1 +1614,1 @@\n-    public static final String VECTOR_CAST_I2X = PREFIX + \"VECTOR_CAST_I2X\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2I = VECTOR_PREFIX + \"VECTOR_CAST_B2I\" + POSTFIX;\n@@ -1318,1 +1616,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_I2X, \"VectorCastI2X\");\n+        vectorNode(VECTOR_CAST_B2I, \"VectorCastB2X\", TYPE_INT);\n@@ -1321,1 +1619,1 @@\n-    public static final String VECTOR_CAST_L2X = PREFIX + \"VECTOR_CAST_L2X\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2L = VECTOR_PREFIX + \"VECTOR_CAST_B2L\" + POSTFIX;\n@@ -1323,1 +1621,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_L2X, \"VectorCastL2X\");\n+        vectorNode(VECTOR_CAST_B2L, \"VectorCastB2X\", TYPE_LONG);\n@@ -1326,1 +1624,1 @@\n-    public static final String VECTOR_CAST_S2X = PREFIX + \"VECTOR_CAST_S2X\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2F = VECTOR_PREFIX + \"VECTOR_CAST_B2F\" + POSTFIX;\n@@ -1328,1 +1626,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_S2X, \"VectorCastS2X\");\n+        vectorNode(VECTOR_CAST_B2F, \"VectorCastB2X\", TYPE_FLOAT);\n@@ -1331,1 +1629,1 @@\n-    public static final String VECTOR_CAST_F2HF = PREFIX + \"VECTOR_CAST_F2HF\" + POSTFIX;\n+    public static final String VECTOR_CAST_B2D = VECTOR_PREFIX + \"VECTOR_CAST_B2D\" + POSTFIX;\n@@ -1333,1 +1631,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_F2HF, \"VectorCastF2HF\");\n+        vectorNode(VECTOR_CAST_B2D, \"VectorCastB2X\", TYPE_DOUBLE);\n@@ -1336,1 +1634,1 @@\n-    public static final String VECTOR_CAST_HF2F = PREFIX + \"VECTOR_CAST_HF2F\" + POSTFIX;\n+    public static final String VECTOR_CAST_D2B = VECTOR_PREFIX + \"VECTOR_CAST_D2B\" + POSTFIX;\n@@ -1338,1 +1636,131 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_HF2F, \"VectorCastHF2F\");\n+        vectorNode(VECTOR_CAST_D2B, \"VectorCastD2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_D2S = VECTOR_PREFIX + \"VECTOR_CAST_D2S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_D2S, \"VectorCastD2X\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_D2I = VECTOR_PREFIX + \"VECTOR_CAST_D2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_D2I, \"VectorCastD2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_CAST_D2L = VECTOR_PREFIX + \"VECTOR_CAST_D2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_D2L, \"VectorCastD2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_CAST_D2F = VECTOR_PREFIX + \"VECTOR_CAST_D2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_D2F, \"VectorCastD2X\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_CAST_F2B = VECTOR_PREFIX + \"VECTOR_CAST_F2B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2B, \"VectorCastF2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_F2S = VECTOR_PREFIX + \"VECTOR_CAST_F2S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2S, \"VectorCastF2X\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_F2I = VECTOR_PREFIX + \"VECTOR_CAST_F2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2I, \"VectorCastF2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_CAST_F2L = VECTOR_PREFIX + \"VECTOR_CAST_F2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2L, \"VectorCastF2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_CAST_F2D = VECTOR_PREFIX + \"VECTOR_CAST_F2D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2D, \"VectorCastF2X\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_CAST_I2B = VECTOR_PREFIX + \"VECTOR_CAST_I2B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2B, \"VectorCastI2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_I2S = VECTOR_PREFIX + \"VECTOR_CAST_I2S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2S, \"VectorCastI2X\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_I2L = VECTOR_PREFIX + \"VECTOR_CAST_I2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2L, \"VectorCastI2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_CAST_I2F = VECTOR_PREFIX + \"VECTOR_CAST_I2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2F, \"VectorCastI2X\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_CAST_I2D = VECTOR_PREFIX + \"VECTOR_CAST_I2D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_I2D, \"VectorCastI2X\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_CAST_L2B = VECTOR_PREFIX + \"VECTOR_CAST_L2B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2B, \"VectorCastL2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_L2S = VECTOR_PREFIX + \"VECTOR_CAST_L2S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2S, \"VectorCastL2X\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_L2I = VECTOR_PREFIX + \"VECTOR_CAST_L2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2I, \"VectorCastL2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_CAST_L2F = VECTOR_PREFIX + \"VECTOR_CAST_L2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2F, \"VectorCastL2X\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_CAST_L2D = VECTOR_PREFIX + \"VECTOR_CAST_L2D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_L2D, \"VectorCastL2X\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_CAST_S2B = VECTOR_PREFIX + \"VECTOR_CAST_S2B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2B, \"VectorCastS2X\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_CAST_S2I = VECTOR_PREFIX + \"VECTOR_CAST_S2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2I, \"VectorCastS2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_CAST_S2L = VECTOR_PREFIX + \"VECTOR_CAST_S2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2L, \"VectorCastS2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_CAST_S2F = VECTOR_PREFIX + \"VECTOR_CAST_S2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2F, \"VectorCastS2X\", TYPE_FLOAT);\n+    }\n+\n+    public static final String VECTOR_CAST_S2D = VECTOR_PREFIX + \"VECTOR_CAST_S2D\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_S2D, \"VectorCastS2X\", TYPE_DOUBLE);\n+    }\n+\n+    public static final String VECTOR_CAST_F2HF = VECTOR_PREFIX + \"VECTOR_CAST_F2HF\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_F2HF, \"VectorCastF2HF\", TYPE_SHORT);\n+    }\n+\n+    public static final String VECTOR_CAST_HF2F = VECTOR_PREFIX + \"VECTOR_CAST_HF2F\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_CAST_HF2F, \"VectorCastHF2F\", TYPE_FLOAT);\n@@ -1351,1 +1779,1 @@\n-    public static final String VECTOR_UCAST_B2X = PREFIX + \"VECTOR_UCAST_B2X\" + POSTFIX;\n+    public static final String VECTOR_UCAST_B2S = VECTOR_PREFIX + \"VECTOR_UCAST_B2S\" + POSTFIX;\n@@ -1353,1 +1781,1 @@\n-        beforeMatchingNameRegex(VECTOR_UCAST_B2X, \"VectorUCastB2X\");\n+        vectorNode(VECTOR_UCAST_B2S, \"VectorUCastB2X\", TYPE_SHORT);\n@@ -1356,1 +1784,1 @@\n-    public static final String VECTOR_UCAST_I2X = PREFIX + \"VECTOR_UCAST_I2X\" + POSTFIX;\n+    public static final String VECTOR_UCAST_B2I = VECTOR_PREFIX + \"VECTOR_UCAST_B2I\" + POSTFIX;\n@@ -1358,1 +1786,1 @@\n-        beforeMatchingNameRegex(VECTOR_UCAST_I2X, \"VectorUCastI2X\");\n+        vectorNode(VECTOR_UCAST_B2I, \"VectorUCastB2X\", TYPE_INT);\n@@ -1361,1 +1789,1 @@\n-    public static final String VECTOR_UCAST_S2X = PREFIX + \"VECTOR_UCAST_S2X\" + POSTFIX;\n+    public static final String VECTOR_UCAST_B2L = VECTOR_PREFIX + \"VECTOR_UCAST_B2L\" + POSTFIX;\n@@ -1363,1 +1791,16 @@\n-        beforeMatchingNameRegex(VECTOR_UCAST_S2X, \"VectorUCastS2X\");\n+        vectorNode(VECTOR_UCAST_B2L, \"VectorUCastB2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_UCAST_I2L = VECTOR_PREFIX + \"VECTOR_UCAST_I2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_UCAST_I2L, \"VectorUCastI2X\", TYPE_LONG);\n+    }\n+\n+    public static final String VECTOR_UCAST_S2I = VECTOR_PREFIX + \"VECTOR_UCAST_S2I\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_UCAST_S2I, \"VectorUCastS2X\", TYPE_INT);\n+    }\n+\n+    public static final String VECTOR_UCAST_S2L = VECTOR_PREFIX + \"VECTOR_UCAST_S2L\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_UCAST_S2L, \"VectorUCastS2X\", TYPE_LONG);\n@@ -1396,0 +1839,5 @@\n+    public static final String VFMAD_MASKED = PREFIX + \"VFMAD_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMAD_MASKED, \"vfmad_masked\");\n+    }\n+\n@@ -1411,0 +1859,30 @@\n+    public static final String FMSUB = PREFIX + \"FMSUB\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FMSUB, \"msub(F|D)_reg_reg\");\n+    }\n+\n+    public static final String FNMADD = PREFIX + \"FNMADD\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FNMADD, \"mnadd(F|D)_reg_reg\");\n+    }\n+\n+    public static final String FNMSUB = PREFIX + \"FNMSUB\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FNMSUB, \"mnsub(F|D)_reg_reg\");\n+    }\n+\n+    public static final String VFMLA = PREFIX + \"VFMLA\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMLA, \"vfmla\");\n+    }\n+\n+    public static final String VFMLS = PREFIX + \"VFMLS\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMLS, \"vfmls\");\n+    }\n+\n+    public static final String VFNMLA = PREFIX + \"VFNMLA\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFNMLA, \"vfnmla\");\n+    }\n+\n@@ -1511,1 +1989,16 @@\n-    public static final String XOR_V = PREFIX + \"XOR_V\" + POSTFIX;\n+    public static final String XOR_VB = VECTOR_PREFIX + \"XOR_VB\" + POSTFIX;\n+    static {\n+        vectorNode(XOR_VB, \"XorV\", TYPE_BYTE);\n+    }\n+\n+    public static final String XOR_VS = VECTOR_PREFIX + \"XOR_VS\" + POSTFIX;\n+    static {\n+        vectorNode(XOR_VS, \"XorV\", TYPE_SHORT);\n+    }\n+\n+    public static final String XOR_VI = VECTOR_PREFIX + \"XOR_VI\" + POSTFIX;\n+    static {\n+        vectorNode(XOR_VI, \"XorV\", TYPE_INT);\n+    }\n+\n+    public static final String XOR_VL = VECTOR_PREFIX + \"XOR_VL\" + POSTFIX;\n@@ -1513,1 +2006,1 @@\n-        beforeMatchingNameRegex(XOR_V, \"XorV\");\n+        vectorNode(XOR_VL, \"XorV\", TYPE_LONG);\n@@ -1536,1 +2029,6 @@\n-    public static final String COMPRESS_BITSV = PREFIX + \"COMPRESS_BITSV\" + POSTFIX;\n+    public static final String COMPRESS_BITS_VI = VECTOR_PREFIX + \"COMPRESS_BITS_VI\" + POSTFIX;\n+    static {\n+        vectorNode(COMPRESS_BITS_VI, \"CompressBitsV\", TYPE_INT);\n+    }\n+\n+    public static final String COMPRESS_BITS_VL = VECTOR_PREFIX + \"COMPRESS_BITS_VL\" + POSTFIX;\n@@ -1538,1 +2036,1 @@\n-        beforeMatchingNameRegex(COMPRESS_BITSV, \"CompressBitsV\");\n+        vectorNode(COMPRESS_BITS_VL, \"CompressBitsV\", TYPE_LONG);\n@@ -1541,1 +2039,1 @@\n-    public static final String EXPAND_BITSV = PREFIX + \"EXPAND_BITSV\" + POSTFIX;\n+    public static final String EXPAND_BITS_VI = VECTOR_PREFIX + \"EXPAND_BITS_VI\" + POSTFIX;\n@@ -1543,1 +2041,6 @@\n-        beforeMatchingNameRegex(EXPAND_BITSV, \"ExpandBitsV\");\n+        vectorNode(EXPAND_BITS_VI, \"ExpandBitsV\", TYPE_INT);\n+    }\n+\n+    public static final String EXPAND_BITS_VL = VECTOR_PREFIX + \"EXPAND_BITS_VL\" + POSTFIX;\n+    static {\n+        vectorNode(EXPAND_BITS_VL, \"ExpandBitsV\", TYPE_LONG);\n@@ -1645,0 +2148,14 @@\n+    \/**\n+     * Apply {@code irNodeRegex} as regex for the IR vector node name on all machine independent ideal graph phases up to and\n+     * including {@link CompilePhase#BEFORE_MATCHING}. Since this is a vector node, we can also check the vector element\n+     * type {@code typeString} and the vector size (number of elements), {@see VECTOR_SIZE}.\n+     *\/\n+    private static void vectorNode(String irNodePlaceholder, String irNodeRegex, String typeString) {\n+        TestFramework.check(isVectorIRNode(irNodePlaceholder), \"vectorNode: failed prefix check for irNodePlaceholder \"\n+                                                               + irNodePlaceholder + \" -> did you use VECTOR_PREFIX?\");\n+        \/\/ IS_REPLACED is later replaced with the specific type and size of the vector.\n+        String regex = START + irNodeRegex + MID  + IS_REPLACED + END;\n+        IR_NODE_MAPPINGS.put(irNodePlaceholder, new RegexTypeEntry(RegexType.IDEAL_INDEPENDENT, regex));\n+        VECTOR_NODE_TYPE.put(irNodePlaceholder, typeString);\n+    }\n+\n@@ -1760,0 +2277,143 @@\n+    \/**\n+     * Is {@code irVectorNodeString} an IR vector node placeholder string?\n+     *\/\n+    public static boolean isVectorIRNode(String irVectorNodeString) {\n+        return irVectorNodeString.startsWith(VECTOR_PREFIX);\n+    }\n+\n+    \/**\n+     * Is {@code irVectorSizeString} a vector size string?\n+     *\/\n+    public static boolean isVectorSize(String irVectorSizeString) {\n+        return irVectorSizeString.startsWith(VECTOR_SIZE);\n+    }\n+\n+    \/**\n+     * Parse {@code sizeString} and generate a regex pattern to match for the size in the IR dump.\n+     *\/\n+    public static String parseVectorNodeSize(String sizeString, String typeString, VMInfo vmInfo) {\n+        if (sizeString.equals(VECTOR_SIZE_TAG_ANY)) {\n+            return \"\\\\\\\\d+\"; \/\/ match with any number\n+        }\n+        \/\/ Try to parse any tags, convert to comma separated list of ints\n+        sizeString = parseVectorNodeSizeTag(sizeString, typeString, vmInfo);\n+        \/\/ Parse comma separated list of numbers\n+        String[] sizes = sizeString.split(\",\");\n+        String regex = \"\";\n+        for (int i = 0; i < sizes.length; i++) {\n+            int size = 0;\n+            try {\n+                size = Integer.parseInt(sizes[i]);\n+            } catch (NumberFormatException e) {\n+                throw new TestFormatException(\"Vector node has invalid size \\\"\" + sizes[i] + \"\\\", in \\\"\" + sizeString + \"\\\"\");\n+            }\n+            TestFormat.checkNoReport(size > 1, \"Vector node size must be 2 or larger, but got \\\"\" + sizes[i] + \"\\\", in \\\"\" + sizeString + \"\\\"\");\n+            regex += ((i > 0) ? \"|\" : \"\") + size;\n+        }\n+        if (sizes.length > 1) {\n+           regex = \"(\" + regex + \")\";\n+        }\n+        return regex;\n+    }\n+\n+    \/**\n+     * If {@code sizeTagString} is a size tag, return the list of accepted sizes, else return sizeTagString.\n+     *\/\n+    public static String parseVectorNodeSizeTag(String sizeTagString, String typeString, VMInfo vmInfo) {\n+        \/\/ Parse out \"min(a,b,c,...)\"\n+        if (sizeTagString.startsWith(\"min(\") && sizeTagString.endsWith(\")\")) {\n+            return parseVectorNodeSizeTagMin(sizeTagString, typeString, vmInfo);\n+        }\n+\n+        \/\/ Parse individual tags\n+        return switch (sizeTagString) {\n+            case VECTOR_SIZE_TAG_MAX -> String.valueOf(getMaxElementsForType(typeString, vmInfo));\n+            case \"max_byte\"          -> String.valueOf(getMaxElementsForType(TYPE_BYTE, vmInfo));\n+            case \"max_char\"          -> String.valueOf(getMaxElementsForType(TYPE_CHAR, vmInfo));\n+            case \"max_short\"         -> String.valueOf(getMaxElementsForType(TYPE_SHORT, vmInfo));\n+            case \"max_int\"           -> String.valueOf(getMaxElementsForType(TYPE_INT, vmInfo));\n+            case \"max_long\"          -> String.valueOf(getMaxElementsForType(TYPE_LONG, vmInfo));\n+            case \"max_float\"         -> String.valueOf(getMaxElementsForType(TYPE_FLOAT, vmInfo));\n+            case \"max_double\"        -> String.valueOf(getMaxElementsForType(TYPE_DOUBLE, vmInfo));\n+            case \"LoopMaxUnroll\"     -> String.valueOf(vmInfo.getLongValue(\"LoopMaxUnroll\"));\n+            default                  -> sizeTagString;\n+        };\n+    }\n+\n+    \/**\n+     * Parse {@code sizeTagString}, which must be a min-clause.\n+     *\/\n+    public static String parseVectorNodeSizeTagMin(String sizeTagString, String typeString, VMInfo vmInfo) {\n+        String[] tags = sizeTagString.substring(4, sizeTagString.length() - 1).split(\",\");\n+        TestFormat.checkNoReport(tags.length > 1, \"Vector node size \\\"min(...)\\\" must have at least 2 comma separated arguments, got \\\"\" + sizeTagString + \"\\\"\");\n+        int minVal = 1024;\n+        for (int i = 0; i < tags.length; i++) {\n+            String tag = parseVectorNodeSizeTag(tags[i].trim(), typeString, vmInfo);\n+            int tag_val = 0;\n+            try {\n+                tag_val = Integer.parseInt(tag);\n+            } catch (NumberFormatException e) {\n+                throw new TestFormatException(\"Vector node has invalid size in \\\"min(...)\\\", argument \" + i + \", \\\"\" + tag + \"\\\", in \\\"\" + sizeTagString + \"\\\"\");\n+            }\n+            minVal = Math.min(minVal, tag_val);\n+        }\n+        return String.valueOf(minVal);\n+    }\n+\n+    \/**\n+     * Return maximal number of elements that can fit in a vector of the specified type.\n+     *\/\n+    public static long getMaxElementsForType(String typeString, VMInfo vmInfo) {\n+        long maxVectorSize = vmInfo.getLongValue(\"MaxVectorSize\");\n+        TestFormat.checkNoReport(maxVectorSize > 0, \"VMInfo: MaxVectorSize is not larger than zero\");\n+        long maxBytes = maxVectorSize;\n+\n+        if (Platform.isX64() || Platform.isX86()) {\n+            maxBytes = Math.min(maxBytes, getMaxElementsForTypeOnX86(typeString, vmInfo));\n+        }\n+\n+        \/\/ compute elements per vector: vector bytes divided by bytes per element\n+        int bytes = getTypeSizeInBytes(typeString);\n+        return maxBytes \/ bytes;\n+    }\n+\n+    \/**\n+     * Return maximal number of elements that can fit in a vector of the specified type, on x86 \/ x64.\n+     *\/\n+    public static long getMaxElementsForTypeOnX86(String typeString, VMInfo vmInfo) {\n+        \/\/ restrict maxBytes for specific features, see Matcher::vector_width_in_bytes in x86.ad:\n+        boolean avx1 = vmInfo.hasCPUFeature(\"avx\");\n+        boolean avx2 = vmInfo.hasCPUFeature(\"avx2\");\n+        boolean avx512 = vmInfo.hasCPUFeature(\"avx512f\");\n+        boolean avx512bw = vmInfo.hasCPUFeature(\"avx512bw\");\n+        long maxBytes;\n+        if (avx512) {\n+            maxBytes = 64;\n+        } else if (avx2) {\n+            maxBytes = 32;\n+        } else {\n+            maxBytes = 16;\n+        }\n+        if (avx1 && (typeString.equals(TYPE_FLOAT) || typeString.equals(TYPE_DOUBLE))) {\n+            maxBytes = avx512 ? 64 : 32;\n+        }\n+        if (avx512 && (typeString.equals(TYPE_BYTE) || typeString.equals(TYPE_SHORT) || typeString.equals(TYPE_CHAR))) {\n+            maxBytes = avx512bw ? 64 : 32;\n+        }\n+\n+        return maxBytes;\n+    }\n+\n+    \/**\n+     * Return size in bytes of type named by {@code typeString}, return 0 if it does not name a type.\n+     *\/\n+    public static int getTypeSizeInBytes(String typeString) {\n+        return switch (typeString) {\n+            case TYPE_BYTE              -> 1;\n+            case TYPE_CHAR, TYPE_SHORT  -> 2;\n+            case TYPE_INT, TYPE_FLOAT   -> 4;\n+            case TYPE_LONG, TYPE_DOUBLE -> 8;\n+            default                     -> 0;\n+        };\n+    }\n+\n@@ -1769,0 +2429,4 @@\n+        } else if (isVectorIRNode(irNodeString)) {\n+            TestFramework.check(irNodeString.length() > VECTOR_PREFIX.length() + POSTFIX.length(),\n+                                \"Invalid vector node placeholder: \" + irNodeString);\n+            prefixLength = VECTOR_PREFIX.length();\n@@ -1843,0 +2507,7 @@\n+\n+    public static String getVectorNodeType(String irNode) {\n+        String typeString = VECTOR_NODE_TYPE.get(irNode);\n+        String failMsg = \"\\\"\" + irNode + \"\\\" is not a Vector IR node defined in class IRNode\";\n+        TestFormat.check(typeString != null, failMsg);\n+        return typeString;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":777,"deletions":106,"binary":false,"changes":883,"status":"modified"},{"patch":"@@ -273,0 +273,1 @@\n+            VMInfoPrinter.emit();\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -481,2 +481,0 @@\n-java\/lang\/invoke\/MethodHandleProxies\/BasicTest.java              8312482 linux-all\n-java\/lang\/invoke\/MethodHandleProxies\/WrapperHiddenClassTest.java 8312482 linux-all\n@@ -612,0 +610,1 @@\n+sun\/security\/pkcs\/pkcs7\/SignerOrder.java                        8314240 generic-all\n@@ -741,1 +740,0 @@\n-sun\/tools\/jhsdb\/HeapDumpTestWithActiveProcess.java              8313798 generic-aarch64\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}