{"files":[{"patch":"@@ -1782,1 +1782,1 @@\n-  return false;\n+  return true;\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+  _is_transiant_multifield_base = false;\n@@ -171,5 +172,0 @@\n-  int bundle_size = field_desc.secondary_fields_count(field_desc.index());\n-  if (bundle_size > 1) {\n-    _type = ciType::make(field_type, bundle_size);\n-  }\n-\n@@ -203,1 +199,1 @@\n-ciField::ciField(fieldDescriptor *fd) :\n+ciField::ciField(fieldDescriptor *fd, bool bundled) :\n@@ -221,1 +217,2 @@\n-    _type = ciType::make(field_type, fd->secondary_fields_count(fd->index()));\n+    int bundle_size = bundled ? fd->secondary_fields_count(fd->index()) : 1;\n+    _type = ciType::make(field_type, bundle_size);\n@@ -252,1 +249,0 @@\n-  _is_multifield = field->_is_multifield;\n@@ -254,0 +250,1 @@\n+  _is_multifield = field->_is_multifield;\n@@ -307,0 +304,1 @@\n+  _is_multifield_base = false;\n@@ -308,1 +306,1 @@\n-  _is_multifield_base = fd->is_multifield_base();\n+  _is_transiant_multifield_base = fd->is_multifield_base();\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+  bool             _is_transiant_multifield_base;\n@@ -67,1 +68,1 @@\n-  ciField(fieldDescriptor* fd);\n+  ciField(fieldDescriptor* fd, bool bundled = false);\n@@ -114,0 +115,1 @@\n+  bool is_transiant_multifield_base() { return _is_transiant_multifield_base; }\n@@ -208,1 +210,3 @@\n-  ciMultiField(fieldDescriptor* fd) : ciField(fd) {}\n+  ciMultiField(fieldDescriptor* fd, bool bundled) : ciField(fd, bundled) {\n+    _is_multifield_base = true;\n+  }\n@@ -213,6 +217,6 @@\n-     Arena* arena = CURRENT_ENV->arena();\n-     _secondary_fields = new (arena) GrowableArray<ciField*>(arena, fields->length(), 0, nullptr);\n-     for (int i = 0; i < fields->length(); i++) {\n-       ciField* field = fields->at(i);\n-       _secondary_fields->append(new (arena) ciField(field, field->holder(), field->offset_in_bytes(), field->is_final()));\n-     }\n+    Arena* arena = CURRENT_ENV->arena();\n+    _secondary_fields = new (arena) GrowableArray<ciField*>(arena, fields->length(), 0, nullptr);\n+    for (int i = 0; i < fields->length(); i++) {\n+      ciField* field = fields->at(i);\n+      _secondary_fields->append(new (arena) ciField(field, field->holder(), field->offset_in_bytes(), field->is_final()));\n+    }\n","filename":"src\/hotspot\/share\/ci\/ciField.hpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-  if (!field->is_multifield_base()) {\n+  if (!field->is_transiant_multifield_base()) {\n@@ -545,1 +545,2 @@\n-      mfield = new (arena) ciMultiField(&fd);\n+      mfield = new (arena) ciMultiField(&fd, true);\n+\n@@ -636,1 +637,1 @@\n-        field = new (arena) ciMultiField(&fd);\n+        field = new (arena) ciMultiField(&fd, true);\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-  if (f && f->is_multifield_base()) {\n+  if (f && f->is_transiant_multifield_base()) {\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -834,1 +834,1 @@\n-  int is_multifield_base = klass->declared_nonstatic_field_at(index)->is_multifield_base();\n+  bool is_multifield_base = klass->declared_nonstatic_field_at(index)->is_multifield_base();\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}