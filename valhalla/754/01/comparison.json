{"files":[{"patch":"@@ -2544,1 +2544,1 @@\n-        if (c == syms.objectType.tsym)\n+        if (c == syms.objectType.tsym) {\n@@ -2546,0 +2546,6 @@\n+        }\n+        if ((flags & PRIMITIVE_CLASS) != 0) {\n+            if ((flags & (FINAL | PRIMITIVE_CLASS | IDENTITY_TYPE)) != (FINAL | PRIMITIVE_CLASS)) {\n+                throw badClassFile(\"bad.access.flags\", Flags.toString(flags));\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3580,0 +3580,3 @@\n+compiler.misc.bad.access.flags=\\\n+    bad access flags combination: {0}\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+compiler.misc.bad.access.flags                          # bad class file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,17 @@\n+\/* @test \/nodynamiccopyright\/\n+ * @bug 8292883\n+ * @summary [lworld] javac fails to detect class files with invalid access flags\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @library \/tools\/lib\n+ * @build toolbox.ToolBox toolbox.JavacTask toolbox.TestRunner\n+ * @compile ValueWithInvalidFlags.jcod\n+ * @compile\/fail\/ref=CheckClassfileFlagsTest.out -XDrawDiagnostics CheckClassfileFlagsTest.java\n+ *\/\n+\n+public class CheckClassfileFlagsTest {\n+    void m() {\n+        ValueWithInvalidFlags v = new ValueWithInvalidFlags();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/classfile_flags\/CheckClassfileFlagsTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CheckClassfileFlagsTest.java:15:9: compiler.err.cant.access: ValueWithInvalidFlags, (compiler.misc.bad.class.file.header: ValueWithInvalidFlags.class, (compiler.misc.bad.access.flags: public final identity primitive))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/classfile_flags\/CheckClassfileFlagsTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+class ValueWithInvalidFlags {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"ValueWithInvalidFlags\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"i\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"java\/lang\/Object\"; \/\/ #8\n+    Utf8 \"<init>\"; \/\/ #9\n+    Utf8 \"()QValueWithInvalidFlags;\"; \/\/ #10\n+    Utf8 \"Code\"; \/\/ #11\n+    Utf8 \"LineNumberTable\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"ValueWithInvalidFlags.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0831; \/\/ access\n+  #1;\/\/ this_cpx\n+  #7;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #9; \/\/ name_index\n+      #10; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B032A5FCC;\n+            0x00034B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+                4  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueWithInvalidFlags\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/classfile_flags\/ValueWithInvalidFlags.jcod","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}