{"files":[{"patch":"@@ -1401,2 +1401,2 @@\n-                mask = RecordMethodFlags;\n-                \/\/ FIXME: We tolerate synchronized methods in value records\n+                mask = ((sym.owner.flags_field & VALUE_CLASS) != 0 && (flags & Flags.STATIC) == 0) ?\n+                        RecordMethodFlags & ~SYNCHRONIZED : RecordMethodFlags;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,7 @@\n+\n+    primitive record CheckSynchronizedRecord(int x, int y) {\n+        synchronized void foo() { \/\/ <<-- ERROR, no monitor associated with `this'\n+        }\n+        synchronized static void zoo() { \/\/ OK, static method.\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSynchronized.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+CheckSynchronized.java:39:27: compiler.err.mod.not.allowed.here: synchronized\n@@ -6,1 +7,1 @@\n-5 errors\n+6 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSynchronized.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -88,0 +88,5 @@\n+\n+    value record BrokenValue8(int x, int y) {\n+        synchronized void foo() { } \/\/ Error;\n+        synchronized static void soo() {} \/\/ OK.\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/SemanticsViolationsTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+SemanticsViolationsTest.java:90:27: compiler.err.mod.not.allowed.here: synchronized\n@@ -17,1 +18,1 @@\n-16 errors\n+17 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/SemanticsViolationsTest.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}