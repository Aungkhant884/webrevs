{"files":[{"patch":"@@ -873,0 +873,5 @@\n+  if (InlineTypeReturnedAsFields && result_type() == T_INLINE_TYPE) {\n+    \/\/ Don't treat this as (trivial) getter method because the\n+    \/\/ inline type should be returned in a scalarized form.\n+    return false;\n+  }\n@@ -894,0 +899,5 @@\n+  if (has_scalarized_args()) {\n+    \/\/ Don't treat this as (trivial) setter method because the\n+    \/\/ inline type argument should be passed in a scalarized form.\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -890,1 +890,1 @@\n-  bool has_scalarized_args() {\n+  bool has_scalarized_args() const {\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -927,17 +927,10 @@\n-\n-    if (return_oop && InlineTypeReturnedAsFields) {\n-      SignatureStream ss(method->signature());\n-      while (!ss.at_return_type()) {\n-        ss.next();\n-      }\n-      if (ss.type() == T_INLINE_TYPE) {\n-        \/\/ Check if inline type is returned as fields\n-        vk = InlineKlass::returned_inline_klass(map);\n-        if (vk != NULL) {\n-          \/\/ We're at a safepoint at the return of a method that returns\n-          \/\/ multiple values. We must make sure we preserve the oop values\n-          \/\/ across the safepoint.\n-          assert(vk == method->returned_inline_type(thread()), \"bad inline klass\");\n-          vk->save_oop_fields(map, return_values);\n-          return_oop = false;\n-        }\n+    if (return_oop && InlineTypeReturnedAsFields && method->result_type() == T_INLINE_TYPE) {\n+      \/\/ Check if inline type is returned as fields\n+      vk = InlineKlass::returned_inline_klass(map);\n+      if (vk != NULL) {\n+        \/\/ We're at a safepoint at the return of a method that returns\n+        \/\/ multiple values. We must make sure we preserve the oop values\n+        \/\/ across the safepoint.\n+        assert(vk == method->returned_inline_type(thread()), \"bad inline klass\");\n+        vk->save_oop_fields(map, return_values);\n+        return_oop = false;\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2556,8 +2556,4 @@\n-        }\n-        switch (v) {\n-          case T_INT:    st.print(\"I\");    break;\n-          case T_LONG:   long_prev = true; break;\n-          case T_FLOAT:  st.print(\"F\");    break;\n-          case T_DOUBLE: st.print(\"D\");    break;\n-          case T_VOID:   break;\n-          default: ShouldNotReachHere();\n+        } else if (v == T_LONG) {\n+          long_prev = true;\n+        } else if (v != T_VOID){\n+          st.print(\"%c\", type2char((BasicType)v));\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/test\/lib \/test\/lib \/compiler\/whitebox \/\n+ * @library \/test\/lib \/compiler\/whitebox \/\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC2CCalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8275825\n+ * @summary Verify that trivial accessor methods operating on an inline type\n+ *          field are C2 compiled to enable scalarization of the arg\/return value.\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @compile TestTrivialMethods.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ *                   -XX:+InlineTypePassFieldsAsArgs -XX:+InlineTypeReturnedAsFields\n+ *                   -XX:CompileCommand=dontinline,*::getter* -XX:CompileCommand=dontinline,*::setter*\n+ *                   compiler.valhalla.inlinetypes.TestTrivialMethods\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import compiler.whitebox.CompilerWhiteBoxTest;\n+\n+import java.lang.reflect.Method;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+import sun.hotspot.WhiteBox;\n+\n+public class TestTrivialMethods {\n+    public static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    static MyValue3 staticField = MyValue3.create();\n+    MyValue3 field = MyValue3.create();\n+\n+    public MyValue3 getter1() {\n+        return staticField;\n+    }\n+\n+    public static MyValue3 getter2() {\n+        return staticField;\n+    }\n+\n+    public MyValue3 getter3() {\n+        return field;\n+    }\n+\n+    public void setter1(MyValue3 val) {\n+        staticField = val;\n+    }\n+\n+    public static void setter2(MyValue3 val) {\n+        staticField = val;\n+    }\n+\n+    public void setter3(MyValue3 val) {\n+        field = val;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        TestTrivialMethods t = new TestTrivialMethods();\n+        \/\/ Warmup to trigger compilation\n+        for (int i = 0; i < 100_000; ++i) {\n+            t.getter1();\n+            t.getter2();\n+            t.getter3();\n+            t.setter1(staticField);\n+            t.setter2(staticField);\n+            t.setter3(staticField);\n+        }\n+        Method m = TestTrivialMethods.class.getMethod(\"getter1\");\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"getter1 is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"getter2\");\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"getter2 is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"getter3\");\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"getter3 is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"setter1\", MyValue3.class.asValueType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"setter1 is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"setter2\", MyValue3.class.asValueType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"setter2 is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"setter3\", MyValue3.class.asValueType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"setter3 is not C2 compiled\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}