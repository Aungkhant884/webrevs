{"files":[{"patch":"@@ -5415,0 +5415,3 @@\n+  \/\/ The following code is similar to allocate_instance but has some slightly differences,\n+  \/\/ e.g. object size is always not zero, sometimes it's constant; storing klass ptr after\n+  \/\/ allocating is not necessary if vk != NULL, etc. allocate_instance can not aware of these.\n@@ -5416,10 +5419,9 @@\n-\n-  \/\/ Try to allocate a new buffered inline type (from the heap)\n-  if (UseTLAB) {\n-    \/\/ FIXME -- for smaller code, the inline allocation (and the slow case) should be moved inside the pack handler.\n-    if (vk != NULL) {\n-      \/\/ Called from C1, where the return type is statically known.\n-      movptr(rbx, (intptr_t)vk->get_InlineKlass());\n-      jint obj_size = vk->layout_helper();\n-      assert(obj_size != Klass::_lh_neutral_value, \"inline class in return type must have been resolved\");\n-      tlab_allocate(r15_thread, r13, noreg, obj_size, r15_thread, r14, slow_case);\n+  \/\/ 1. Try to allocate a new buffered inline instance either from TLAB or eden space\n+  mov(rscratch1, rax); \/\/ save rax for slow_case since *_allocate may corrupts it when allocation failed\n+  if (vk != NULL) {\n+    \/\/ Called from C1, where the return type is statically known.\n+    movptr(rbx, (intptr_t)vk->get_InlineKlass());\n+    jint obj_size = vk->layout_helper();\n+    assert(obj_size != Klass::_lh_neutral_value, \"inline class in return type must have been resolved\");\n+    if (UseTLAB) {\n+      tlab_allocate(r15_thread, rax, noreg, obj_size, r13, r14, slow_case);\n@@ -5427,5 +5429,1 @@\n-      \/\/ Call from interpreter. RAX contains ((the InlineKlass* of the return type) | 0x01)\n-      mov(rbx, rax);\n-      andptr(rbx, -2);\n-      movl(r14, Address(rbx, Klass::layout_helper_offset()));\n-      tlab_allocate(r15_thread, r13, r14, 0, r15_thread, r14, slow_case);\n+      eden_allocate(r15_thread, rax, noreg, obj_size, r13, slow_case);\n@@ -5433,5 +5431,17 @@\n-    movptr(Address(r13, oopDesc::mark_offset_in_bytes()), (intptr_t)markWord::inline_type_prototype().value());\n-\n-    xorl(rax, rax); \/\/ use zero reg to clear memory (shorter code)\n-    store_klass_gap(r13, rax);  \/\/ zero klass gap for compressed oops\n-\n+  } else {\n+    \/\/ Call from interpreter. RAX contains ((the InlineKlass* of the return type) | 0x01)\n+    mov(rbx, rax);\n+    andptr(rbx, -2);\n+    movl(r14, Address(rbx, Klass::layout_helper_offset()));\n+    if (UseTLAB) {\n+      tlab_allocate(r15_thread, rax, r14, 0, r13, r14, slow_case);\n+    } else {\n+      eden_allocate(r15_thread, rax, r14, 0, r13, slow_case);\n+    }\n+  }\n+  if (UseTLAB || Universe::heap()->supports_inline_contig_alloc()) {\n+    \/\/ 2. Initialize buffered inline instance header\n+    Register buffer_obj = rax;\n+    movptr(Address(buffer_obj, oopDesc::mark_offset_in_bytes()), (intptr_t)markWord::inline_type_prototype().value());\n+    xorl(r13, r13);\n+    store_klass_gap(buffer_obj, r13);\n@@ -5439,2 +5449,2 @@\n-      \/\/ store_klass corrupts rbx, so save it in rax for later use (interpreter case only).\n-      mov(rax, rbx);\n+      \/\/ store_klass corrupts rbx(klass), so save it in r13 for later use (interpreter case only).\n+      mov(r13, rbx);\n@@ -5443,3 +5453,2 @@\n-    store_klass(r13, rbx, tmp_store_klass);  \/\/ klass\n-\n-    \/\/ We have our new buffered inline type, initialize its fields with an inline class specific handler\n+    store_klass(buffer_obj, rbx, tmp_store_klass);\n+    \/\/ 3. Initialize its fields with an inline class specific handler\n@@ -5448,1 +5457,0 @@\n-      mov(rax, r13);\n@@ -5451,1 +5459,1 @@\n-      movptr(rbx, Address(rax, InstanceKlass::adr_inlineklass_fixed_block_offset()));\n+      movptr(rbx, Address(r13, InstanceKlass::adr_inlineklass_fixed_block_offset()));\n@@ -5453,1 +5461,0 @@\n-      mov(rax, r13);\n@@ -5458,1 +5465,0 @@\n-\n@@ -5464,0 +5470,1 @@\n+  mov(rax, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":36,"deletions":29,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+        case 4: return new String[] {\"-XX:-UseTLAB\"};\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}