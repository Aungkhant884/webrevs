{"files":[{"patch":"@@ -2896,1 +2896,1 @@\n-            if (tree.constructor != null && tree.constructor.kind == MTH)\n+            if (tree.constructor != null && tree.constructor.kind == MTH) {\n@@ -2901,0 +2901,1 @@\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1901,0 +1901,4 @@\n+        setNullMarker(exp, token);\n+    }\n+\n+    void setNullMarker(JCExpression exp, Token tk) {\n@@ -1902,1 +1906,1 @@\n-                token.kind == QUES ?\n+                tk.kind == QUES ?\n@@ -2051,2 +2055,4 @@\n-                            peekToken(lookahead, EMOTIONAL_QUALIFIER, COMMA)) {\n-                        \/\/ Identifier, '!'\/'?', '<'\/','\/'>' -> it's a type, skip the emotional anno and continue\n+                            peekToken(lookahead, EMOTIONAL_QUALIFIER, COMMA) ||\n+                            peekToken(lookahead, EMOTIONAL_QUALIFIER, LBRACKET) ) {\n+                        \/\/ Identifier, '!'\/'?', '<'\/','\/'>' or\n+                        \/\/ Identifier, '!'\/'?', '[' -> it's a type, skip the emotional anno and continue\n@@ -2077,0 +2083,1 @@\n+                            peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER, RPAREN) ||\n@@ -2079,0 +2086,1 @@\n+                        \/\/ '[', ']', '!', ')' -> cast\n@@ -2081,0 +2089,6 @@\n+                    } else if (peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER)) {\n+                        \/\/consume the ']' and the '!' and skip\n+                        type = true;\n+                        lookahead++;\n+                        lookahead++;\n+                        break;\n@@ -2502,0 +2516,6 @@\n+        } else if (EMOTIONAL_QUALIFIER.test(token.kind) && peekToken(LBRACKET)) {\n+            Token nullMarker = token;\n+            nextToken();\n+            int pos = token.pos;\n+            nextToken();\n+            t = bracketsOptCont(t, pos, nextLevelAnnotations, nullMarker);\n@@ -2524,0 +2544,5 @@\n+        return bracketsOptCont(t, pos, annotations, null);\n+    }\n+\n+    private JCExpression bracketsOptCont(JCExpression t, int pos,\n+                                         List<JCAnnotation> annotations, Token nullMarker) {\n@@ -2527,0 +2552,3 @@\n+        if (nullMarker != null) {\n+            setNullMarker(t, nullMarker);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -649,0 +649,20 @@\n+                                \"\"),\n+                        new DiagAndCode(\n+                                \"\"\"\n+                                class Test {\n+                                    void m(Test t1, Test[] t2, Test[][] t3, Test[][][] t4) {\n+                                        Test! l1 = (Test!) t1;\n+                                        Test![] l2 = (Test![]) t2;\n+                                        Test![][] l3 = (Test![][]) t3;\n+                                        Test![][][] l4 = (Test![][][]) t4;\n+\n+                                        Test[]! l5 = (Test[]!) t2;\n+                                        Test[][]! l6 = (Test[][]!) t3;\n+                                        Test[][][]! l7 = (Test[][][]!) t4;\n+\n+                                        Test[]![]! l8 = (Test[]![]!) t3;\n+                                        Test[]![]![]! l9 = (Test[]![]![]!) t4;\n+                                    }\n+                                }\n+                                \"\"\",\n+                                Result.Clean,\n","filename":"test\/langtools\/tools\/javac\/bang\/BangTypesCompilationTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}