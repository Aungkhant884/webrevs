{"files":[{"patch":"@@ -891,4 +891,0 @@\n-     * object represents the {@linkplain #isPrimaryType() reference type}\n-     * of a {@linkplain #isPrimitiveClass() primitive class}, this method\n-     * return {@code true} if the specified {@code Class} parameter represents\n-     * the same primitive class. If this {@code Class}\n@@ -903,3 +899,3 @@\n-     * or via a widening reference conversion or via a primitive widening\n-     * conversion. See <cite>The Java Language Specification<\/cite>,\n-     * sections {@jls 5.1.1} and {@jls 5.1.4}, for details.\n+     * or via a widening reference conversion. See <cite>The Java Language\n+     * Specification<\/cite>, sections {@jls 5.1.1} and {@jls 5.1.4},\n+     * for details.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n- * Subclasses of {@code java.lang.Object} can be either {@linkplain Class#isIdentity() identity classes}\n- * or {@linkplain Class#isValue value classes}.\n+ * Subclasses of {@code java.lang.Object} can be either {@linkplain Class#isIdentity()\n+ * identity classes} or {@linkplain Class#isValue value classes}.\n@@ -253,2 +253,1 @@\n-     * If this object is an instance of an identity class, then\n-     * the {@code toString} method for class {@code Object}\n+     * The {@code toString} method for class {@code Object}\n@@ -264,6 +263,0 @@\n-     * <p>\n-     * If this object is an instance of a primitive class, then\n-     * the {@code toString} method returns a string which contains\n-     * the name of the primitive class, and string representations of\n-     * all its fields.  The precise format produced by this method\n-     * is unspecified and subject to change.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Object.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -68,2 +68,1 @@\n-     * {@link ConstantDescs}; to create a descriptor for a primitive value type,\n-     * use {@link #ofDescriptor(String)}).\n+     * {@link ConstantDescs}).\n@@ -141,2 +140,1 @@\n-     * ({@code \"J\", \"I\", \"C\", \"S\", \"B\", \"D\", \"F\", \"Z\", \"V\"}),\n-     * or the letter {@code \"L\"} or {@code \"Q\"} followed\n+     * ({@code \"J\", \"I\", \"C\", \"S\", \"B\", \"D\", \"F\", \"Z\", \"V\"}), or the letter {@code \"L\"}, followed\n@@ -146,3 +144,2 @@\n-     * valid type descriptor strings include {@code \"Ljava\/lang\/String;\"},\n-     * {@code \"QPoint;}, {@code \"I\"}, {@code \"[I\"}, {@code \"V\"},\n-     * {@code \"[Ljava\/lang\/String;\"}, {@code \"[LPoint;\"}, {@code \"[[QPoint;} etc.\n+     * valid type descriptor strings include {@code \"Ljava\/lang\/String;\"}, {@code \"I\"},\n+     * {@code \"[I\"}, {@code \"V\"}, {@code \"[Ljava\/lang\/String;\"}, etc.\n@@ -304,11 +301,0 @@\n-    \/**\n-     * Returns whether this {@linkplain ClassDesc} describes a\n-     * {@linkplain Class#isPrimitiveValueType() primitive value type}.\n-     *\n-     * @return whether this {@linkplain ClassDesc} describes a primitive value type.\n-     * @since Valhalla\n-     *\/\n-    default boolean isPrimitiveValueType() {\n-        return descriptorString().startsWith(\"Q\");\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2752,5 +2752,0 @@\n-         * @apiNote\n-         * This method does not find a static {@code <init>} factory method as it is invoked\n-         * via {@code invokestatic} bytecode as opposed to {@code invokespecial} for an\n-         * object constructor.  To look up static {@code <init>} factory method, use\n-         * the {@link #findStatic(Class, String, MethodType) findStatic} method.\n@@ -4338,3 +4333,1 @@\n-     * is {@code null} or if the array's element type is a {@link Class#isPrimitiveValueType()\n-     * a primitive value type} and attempts to set {@code null} in the\n-     * array element.  An {@code ArrayIndexOutOfBoundsException} will be\n+     * is {@code null} and an {@code ArrayIndexOutOfBoundsException} will be\n@@ -5053,3 +5046,1 @@\n-     * @throws NullPointerException if the given {@code type} is null, or\n-     *         if the given {@code type} is primitive or a primitive value type\n-     *         and the given value is null\n+     * @throws NullPointerException if the {@code type} argument is null\n@@ -5132,5 +5123,1 @@\n-     * If the requested type is a primitive type or {@code void}, it returns\n-     * a zero primitive value or {@code void}.\n-     * If the requested type is a {@linkplain Class#isPrimitiveValueType() primitive value type},\n-     * it returns a primitive object with the default value.\n-     * If the requested type is a reference type, it returns {@code null}.\n+     * That is, it returns a zero primitive value, a {@code null}, or {@code void}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-     * @throws IllegalArgumentException if the referent is an instance of an\n+     * @throws IdentityException if the referent is an instance of an\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/PhantomReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-     * @throws IllegalArgumentException if the referent is an instance of a\n+     * @throws IdentityException if the referent is an instance of a\n@@ -103,1 +103,1 @@\n-     * @throws IllegalArgumentException if the referent is an instance of a\n+     * @throws IdentityException if the referent is an instance of a\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/SoftReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-     * @throws IllegalArgumentException if the referent is an instance of a\n+     * @throws IdentityException if the referent is an instance of a\n@@ -74,1 +74,1 @@\n-     * @throws IllegalArgumentException if the referent is an instance of a\n+     * @throws IdentityException if the referent is an instance of a\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/WeakReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-        if (Modifier.isAbstract(declaringClass.getModifiers()) && declaringClass != Object.class) {\n+        if (Modifier.isAbstract(declaringClass.getModifiers())) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import java.lang.constant.ClassDesc;\n+\n@@ -148,0 +150,11 @@\n+\n+    \/**\n+     * Returns whether this {@linkplain ClassDesc} describes a\n+     * {@linkplain #isPrimitiveValueType(Class)}  primitive value type}.\n+     *\n+     * @return whether this {@linkplain ClassDesc} describes a primitive value type.\n+     * @since Valhalla\n+     *\/\n+    public static boolean isPrimitiveValueClassDesc(ClassDesc classDesc) {\n+        return classDesc.descriptorString().startsWith(\"Q\");\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/PrimitiveClass.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-                    Modifier.isPublic(c.getModifiers());\n+                Modifier.isPublic(c.getModifiers());\n@@ -104,2 +104,2 @@\n-                            String.format(\"Expected InaccessibleObjectException is not thrown \"\n-                                    + \"for field %s in class %s%n\", f.getName(), c.getName()));\n+                        String.format(\"Expected InaccessibleObjectException is not thrown \"\n+                                      + \"for field %s in class %s%n\", f.getName(), c.getName()));\n@@ -279,1 +279,1 @@\n-                        .iterator();\n+                    .iterator();\n@@ -295,3 +295,3 @@\n-                    .map(mref -> mref.descriptor().name())\n-                    .filter(mn -> !mods.contains(mn))\n-                    .collect(Collectors.toSet());\n+                               .map(mref -> mref.descriptor().name())\n+                               .filter(mn -> !mods.contains(mn))\n+                               .collect(Collectors.toSet());\n","filename":"test\/jdk\/java\/lang\/Class\/getDeclaredField\/FieldSetAccessibleTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/instrument\/IsModifiableClassAgent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -351,2 +351,2 @@\n-        assertTrue(intfs.length == 1 || intfs.length == 2);\n-        assertTrue(intfs[0] == HiddenTest.class || (intfs.length == 2 && intfs[1] == HiddenTest.class));\n+        assertTrue(intfs.length == 1);\n+        assertTrue(intfs[0] == HiddenTest.class);\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/BasicTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        assertTrue(cd.isPrimitiveValueType() == PrimitiveClass.isPrimitiveValueType(type));\n+        assertTrue(PrimitiveClass.isPrimitiveValueClassDesc(cd) == PrimitiveClass.isPrimitiveValueType(type));\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueConstantDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}