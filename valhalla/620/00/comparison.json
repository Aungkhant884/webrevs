{"files":[{"patch":"@@ -881,4 +881,0 @@\n-    \/\/ Do not let reads from the destination float above the arraycopy.\n-    \/\/ Since we cannot type the arrays, we don't know which slices\n-    \/\/ might be affected.  We could restrict this barrier only to those\n-    \/\/ memory slices which pertain to array elements--but don't bother.\n@@ -1375,4 +1371,0 @@\n-    Node* mem = ac->in(TypeFunc::Memory);\n-    merge_mem = MergeMemNode::make(mem);\n-    transform_later(merge_mem);\n-\n@@ -1387,0 +1379,1 @@\n+    Node* mem = ac->in(TypeFunc::Memory);\n@@ -1403,0 +1396,3 @@\n+    merge_mem = MergeMemNode::make(mem);\n+    transform_later(merge_mem);\n+\n@@ -1513,0 +1509,5 @@\n+  if (dest_elem == T_INLINE_TYPE) {\n+    \/\/ Copy to a flat array modifies multiple memory slices. Conservatively insert a barrier\n+    \/\/ on all slices to prevent writes into the source from floating below the arraycopy.\n+    insert_mem_bar(&ctrl, &mem, Op_MemBarCPUOrder);\n+  }\n@@ -1577,3 +1578,0 @@\n-    \/\/ Copy to a flat array modifies multiple memory slices. Conservatively insert a barrier\n-    \/\/ on all slices to prevent writes into the source from floating below the arraycopy.\n-    insert_mem_bar(&ctrl, &mem, Op_MemBarCPUOrder);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -5191,4 +5191,1 @@\n-        if (field == NULL) {\n-          \/\/ This may happen with nested AddP(base, AddP(base, base, offset), longcon(16))\n-          return add_offset(offset);\n-        } else {\n+        if (field != NULL) {\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1436,1 +1436,1 @@\n-    public void test71_verifier(RunInfo info) {\n+    public void test71_verifier() {\n@@ -1460,1 +1460,1 @@\n-    public void test72_verifier(RunInfo info) {\n+    public void test72_verifier() {\n@@ -1487,1 +1487,1 @@\n-    public void test73_verifier(RunInfo info) {\n+    public void test73_verifier() {\n@@ -1491,0 +1491,66 @@\n+\n+    static primitive class EmptyInline {\n+\n+    }\n+\n+    static primitive class ByteInline {\n+        byte x = 0;\n+    }\n+\n+    @Test\n+    public void test74(EmptyInline[] emptyArray) {\n+        System.arraycopy(emptyArray, 0, emptyArray, 10, 10);\n+        System.arraycopy(emptyArray, 0, emptyArray, 20, 10);\n+    }\n+\n+    @Run(test = \"test74\")\n+    public void test74_verifier() {\n+        EmptyInline[] emptyArray = new EmptyInline[100];\n+        test74(emptyArray);\n+        for (EmptyInline empty : emptyArray) {\n+            Asserts.assertEQ(empty, EmptyInline.default);\n+        }\n+    }\n+\n+    @Test\n+    public void test75(EmptyInline[] emptyArray) {\n+        System.arraycopy(emptyArray, 0, emptyArray, 10, 10);\n+    }\n+\n+    @Run(test = \"test75\")\n+    public void test75_verifier() {\n+        EmptyInline[] emptyArray = new EmptyInline[100];\n+        test75(emptyArray);\n+        for (EmptyInline empty : emptyArray) {\n+            Asserts.assertEQ(empty, EmptyInline.default);\n+        }\n+    }\n+\n+    @Test\n+    public void test76(ByteInline[] byteArray) {\n+        System.arraycopy(byteArray, 0, byteArray, 10, 10);\n+        System.arraycopy(byteArray, 0, byteArray, 20, 10);\n+    }\n+\n+    @Run(test = \"test76\")\n+    public void test76_verifier() {\n+        ByteInline[] byteArray = new ByteInline[100];\n+        test76(byteArray);\n+        for (ByteInline b : byteArray) {\n+            Asserts.assertEQ(b, ByteInline.default);\n+        }\n+    }\n+\n+    @Test\n+    public void test77(ByteInline[] byteArray) {\n+        System.arraycopy(byteArray, 0, byteArray, 10, 10);\n+    }\n+\n+    @Run(test = \"test77\")\n+    public void test77_verifier() {\n+        ByteInline[] byteArray = new ByteInline[100];\n+        test77(byteArray);\n+        for (ByteInline b : byteArray) {\n+            Asserts.assertEQ(b, ByteInline.default);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":69,"deletions":3,"binary":false,"changes":72,"status":"modified"}]}