{"files":[{"patch":"@@ -307,2 +307,1 @@\n-      ciFlatArrayKlass* vak = ary_src->klass()->as_flat_array_klass();\n-      shift = vak->log2_element_size();\n+      shift = ary_src->flat_log_elem_size();\n@@ -420,2 +419,1 @@\n-    ciFlatArrayKlass* vak = atp_src->klass()->as_flat_array_klass();\n-    ciInlineKlass* vk = vak->element_klass()->as_inline_klass();\n+    ciInlineKlass* vk = atp_src->elem()->inline_klass();\n@@ -425,1 +423,1 @@\n-      Node* off  = kit.MakeConX(off_in_vt + i * vak->element_byte_size());\n+      Node* off  = kit.MakeConX(off_in_vt + i * atp_src->flat_elem_size());\n@@ -830,4 +828,1 @@\n-  uint elemsize = type2aelembytes(ary_elem);\n-  if (ary_t->klass()->is_flat_array_klass()) {\n-    elemsize = ary_t->klass()->as_flat_array_klass()->element_byte_size();\n-  }\n+  uint elemsize = ary_t->is_flat() ? ary_t->flat_elem_size() : type2aelembytes(ary_elem);\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -4858,8 +4858,0 @@\n-  \/\/ Do not fold the subtype check to an array klass pointer comparison for [V? arrays.\n-  \/\/ [QMyValue is a subtype of [LMyValue but the klass for [QMyValue is not equal to\n-  \/\/ the klass for [LMyValue. Perform a full test.\n-  if (superk->isa_aryklassptr() && !superk->is_aryklassptr()->is_null_free() &&\n-      superk->is_aryklassptr()->elem()->isa_klassptr() && superk->is_aryklassptr()->elem()->is_klassptr()->klass()->is_inlinetype()) {\n-    return SSC_full_test;\n-  }\n-\n@@ -4870,0 +4862,8 @@\n+\n+    \/\/ Do not fold the subtype check to an array klass pointer comparison for [V? arrays.\n+    \/\/ [QMyValue is a subtype of [LMyValue but the klass for [QMyValue is not equal to\n+    \/\/ the klass for [LMyValue. Perform a full test.\n+    if (!superk->is_aryklassptr()->is_null_free() && superk->is_aryklassptr()->elem()->isa_instklassptr() &&\n+        superk->is_aryklassptr()->elem()->is_instklassptr()->instance_klass()->is_inlinetype()) {\n+      return SSC_full_test;\n+    }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1818,6 +1818,2 @@\n-  uint shift  = exact_log2(type2aelembytes(elembt));\n-  ciKlass* arytype_klass = _gvn.type(ary)->is_aryptr()->klass();\n-  if (arytype_klass != NULL && arytype_klass->is_flat_array_klass()) {\n-    ciFlatArrayKlass* vak = arytype_klass->as_flat_array_klass();\n-    shift = vak->log2_element_size();\n-  }\n+  const TypeAryPtr* arytype = _gvn.type(ary)->is_aryptr();\n+  uint shift = arytype->is_flat() ? arytype->flat_log_elem_size() : exact_log2(type2aelembytes(elembt));\n@@ -3875,2 +3871,2 @@\n-    ciKlass* klass = inst_klass->klass();\n-    if (UseFlatArray && !xklass && klass->is_obj_array_klass() && !klass->as_obj_array_klass()->is_elem_null_free()) {\n+    const TypeAryPtr* ary_type = inst_klass->as_instance_type()->isa_aryptr();\n+    if (UseFlatArray && !xklass && ary_type != NULL && !ary_type->is_null_free()) {\n@@ -3878,2 +3874,2 @@\n-      ciKlass* elem = klass->as_obj_array_klass()->element_klass();\n-      can_be_flattened = elem->can_be_inline_klass() && (!elem->is_inlinetype() || elem->flatten_array());\n+      const TypeOopPtr* elem = ary_type->elem()->make_oopptr();\n+      can_be_flattened = ary_type->can_be_inline_array() && (!elem->is_inlinetypeptr() || elem->inline_klass()->flatten_array());\n@@ -3881,1 +3877,1 @@\n-    if (!can_be_flattened && (xklass || klass->is_array_klass())) {\n+    if (!can_be_flattened && (xklass || inst_klass->isa_aryklassptr())) {\n@@ -3883,2 +3879,2 @@\n-      if (klass->is_flat_array_klass()) {\n-        lhelper = klass->layout_helper();\n+      if (inst_klass->is_flat()) {\n+        lhelper = ary_type->flat_layout_helper();\n@@ -3886,1 +3882,1 @@\n-        BasicType elem = inst_klass->as_instance_type()->isa_aryptr()->elem()->array_element_basic_type();\n+        BasicType elem = ary_type->elem()->array_element_basic_type();\n@@ -3965,1 +3961,1 @@\n-      if (arytype->klass()->is_flat_array_klass()) {\n+      if (arytype->is_flat()) {\n@@ -3972,2 +3968,1 @@\n-        ciFlatArrayKlass* vak = arytype->klass()->as_flat_array_klass();\n-        ciInlineKlass* vk = vak->element_klass()->as_inline_klass();\n+        ciInlineKlass* vk = arytype->elem()->inline_klass();\n@@ -4293,5 +4288,3 @@\n-    if (ary_ptr->klass()->as_array_klass()->is_elem_null_free()) {\n-      ciInlineKlass* vk = ary_ptr->klass()->as_array_klass()->element_klass()->as_inline_klass();\n-      if (!vk->flatten_array()) {\n-        default_value = InlineTypeNode::default_oop(gvn(), vk);\n-      }\n+    if (ary_ptr->is_null_free() && !ary_ptr->is_flat()) {\n+      ciInlineKlass* vk = ary_ptr->elem()->make_oopptr()->inline_klass();\n+      default_value = InlineTypeNode::default_oop(gvn(), vk);\n@@ -4299,1 +4292,1 @@\n-  } else if (ary_klass->klass()->can_be_inline_array_klass()) {\n+  } else if (ary_type->can_be_inline_array()) {\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":16,"deletions":23,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2990,3 +2990,3 @@\n-  ciKlass* klass = _gvn.type(kls)->is_klassptr()->klass();\n-  if (klass->is_inlinetype()) {\n-    obj = InlineTypeNode::make_default(_gvn, klass->as_inline_klass())->buffer(this);\n+  const TypeInstKlassPtr* tkls = _gvn.type(kls)->isa_instklassptr();\n+  if (tkls != NULL && tkls->instance_klass()->is_inlinetype()) {\n+    obj = InlineTypeNode::make_default(_gvn, tkls->instance_klass()->as_inline_klass())->buffer(this);\n@@ -4290,1 +4290,1 @@\n-    ciKlass* klass = _gvn.type(klass_node)->is_klassptr()->klass();\n+    const TypeKlassPtr* tklass = _gvn.type(klass_node)->is_klassptr();\n@@ -4295,1 +4295,1 @@\n-                        klass->can_be_inline_array_klass() && (!klass->is_flat_array_klass() || klass->as_flat_array_klass()->element_klass()->as_inline_klass()->contains_oops());\n+                        tklass->can_be_inline_array() && (!tklass->is_flat() || tklass->is_aryklassptr()->elem()->is_instklassptr()->instance_klass()->as_inline_klass()->contains_oops());\n@@ -4336,1 +4336,1 @@\n-                 ((!klass->is_flat_array_klass() && klass->can_be_inline_array_klass()) || !can_validate)) {\n+                 ((!tklass->is_flat() && tklass->can_be_inline_array()) || !can_validate)) {\n@@ -5081,1 +5081,1 @@\n-          obj_type->klass()->can_be_inline_array_klass() &&\n+          obj_type->can_be_inline_array() &&\n@@ -5602,1 +5602,1 @@\n-          top_dest = TypeOopPtr::make_from_klass(top_src->klass())->isa_aryptr();\n+          top_dest = top_src->cast_to_exactness(false);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -298,2 +298,1 @@\n-      const TypePtr* adr_type = _igvn.type(base)->is_ptr();\n-      assert(adr_type->isa_aryptr(), \"only arrays here\");\n+      const TypeAryPtr* adr_type = _igvn.type(base)->is_aryptr();\n@@ -301,2 +300,1 @@\n-        ciFlatArrayKlass* vak = adr_type->is_aryptr()->klass()->as_flat_array_klass();\n-        shift = vak->log2_element_size();\n+        shift = adr_type->flat_log_elem_size();\n@@ -307,1 +305,1 @@\n-        adr_type = _igvn.type(adr)->is_ptr();\n+        adr_type = _igvn.type(adr)->is_aryptr();\n@@ -311,1 +309,1 @@\n-          return value_from_mem(ac->in(TypeFunc::Memory), ctl, ft, ftype, adr_type->isa_oopptr(), alloc);\n+          return value_from_mem(ac->in(TypeFunc::Memory), ctl, ft, ftype, adr_type, alloc);\n@@ -330,1 +328,1 @@\n-        adr_type = adr_type->is_aryptr()->add_field_offset_and_offset(offset)->add_offset(Type::OffsetBot);\n+        adr_type = adr_type->add_field_offset_and_offset(offset)->add_offset(Type::OffsetBot)->is_aryptr();\n@@ -790,1 +788,1 @@\n-        element_size = res_type->is_aryptr()->klass()->as_flat_array_klass()->element_byte_size();\n+        element_size = res_type->is_aryptr()->flat_elem_size();\n@@ -1144,1 +1142,2 @@\n-  bool inline_alloc = tklass->klass()->is_inlinetype();\n+  bool inline_alloc = tklass->isa_instklassptr() &&\n+                      tklass->is_instklassptr()->instance_klass()->is_inlinetype();\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -216,2 +216,0 @@\n-  bool can_try_zeroing_elimination(AllocateArrayNode* alloc, Node* src, Node* dest) const;\n-\n","filename":"src\/hotspot\/share\/opto\/macro.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -363,19 +363,0 @@\n-bool PhaseMacroExpand::can_try_zeroing_elimination(AllocateArrayNode* alloc,\n-                                                   Node* src,\n-                                                   Node* dest) const {\n-  const TypeAryPtr* top_dest = _igvn.type(dest)->isa_aryptr();\n-\n-  if (top_dest != NULL) {\n-    if (top_dest->klass() == NULL) {\n-      return false;\n-    }\n-  }\n-\n-  return ReduceBulkZeroing\n-    && !(UseTLAB && ZeroTLAB) \/\/ pointless if already zeroed\n-    && !src->eqv_uncast(dest)\n-    && alloc != NULL\n-    && _igvn.find_int_con(alloc->in(AllocateNode::ALength), 1) > 0\n-    && alloc->maybe_set_complete(&_igvn);\n-}\n-\n@@ -1310,1 +1291,1 @@\n-  int elem_size = top_dest->klass()->as_flat_array_klass()->element_byte_size();\n+  int elem_size = top_dest->flat_elem_size();\n@@ -1359,2 +1340,2 @@\n-    if (top_dest != NULL && top_dest->klass() != NULL) {\n-      dest_elem = top_dest->klass()->as_array_klass()->element_type()->basic_type();\n+    if (top_dest != NULL && top_dest->elem() != Type::BOTTOM) {\n+      dest_elem = top_dest->elem()->array_element_basic_type();\n@@ -1362,1 +1343,1 @@\n-    if (dest_elem == T_ARRAY || (dest_elem == T_PRIMITIVE_OBJECT && top_dest->klass()->is_obj_array_klass())) {\n+    if (dest_elem == T_ARRAY || dest_elem == T_NARROWOOP || (dest_elem == T_PRIMITIVE_OBJECT && !top_dest->is_flat())) {\n@@ -1434,1 +1415,1 @@\n-  if (src_elem == T_ARRAY || src_elem == T_NARROWOOP || (src_elem == T_PRIMITIVE_OBJECT && top_src->klass()->is_obj_array_klass())) {\n+  if (src_elem == T_ARRAY || src_elem == T_NARROWOOP || (src_elem == T_PRIMITIVE_OBJECT && !top_src->is_flat())) {\n@@ -1437,1 +1418,1 @@\n-  if (dest_elem == T_ARRAY || dest_elem == T_NARROWOOP || (dest_elem == T_PRIMITIVE_OBJECT && top_dest->klass()->is_obj_array_klass())) {\n+  if (dest_elem == T_ARRAY || dest_elem == T_NARROWOOP || (dest_elem == T_PRIMITIVE_OBJECT && !top_dest->is_flat())) {\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":6,"deletions":25,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1003,5 +1003,1 @@\n-      uint shift  = exact_log2(type2aelembytes(ary_elem));\n-      if (ary_t->klass()->is_flat_array_klass()) {\n-        ciFlatArrayKlass* vak = ary_t->klass()->as_flat_array_klass();\n-        shift = vak->log2_element_size();\n-      }\n+      uint shift  = ary_t->is_flat() ? ary_t->flat_log_elem_size() : exact_log2(type2aelembytes(ary_elem));\n@@ -2062,0 +2058,2 @@\n+        \/\/ TODO fix with JDK-8293172\n+        \/*\n@@ -2068,0 +2066,1 @@\n+        *\/\n@@ -2179,3 +2178,2 @@\n-      ciKlass* klass = tkls->klass();\n-      if (klass != NULL && klass->is_loaded() && tkls->klass_is_exact()) {\n-        return TypeX::make(klass->prototype_header().value());\n+      if (tkls->is_loaded() && tkls->klass_is_exact()) {\n+        return TypeX::make(tkls->exact_klass()->prototype_header().value());\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -4827,0 +4827,12 @@\n+jint TypeAryPtr::flat_layout_helper() const {\n+  return klass()->as_flat_array_klass()->layout_helper();\n+}\n+\n+int TypeAryPtr::flat_elem_size() const {\n+  return klass()->as_flat_array_klass()->element_byte_size();\n+}\n+\n+int TypeAryPtr::flat_log_elem_size() const {\n+  return klass()->as_flat_array_klass()->log2_element_size();\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1186,0 +1186,1 @@\n+  virtual ciKlass* klass() const { return _klass; }\n@@ -1188,2 +1189,0 @@\n-  \/\/ TODO Tobias\n-  virtual ciKlass* klass() const { return _klass; }\n@@ -1248,0 +1247,1 @@\n+  bool can_be_inline_array() const { return (_klass == NULL || _klass->can_be_inline_array_klass()); }\n@@ -1428,2 +1428,0 @@\n-public:\n-  \/\/ TODO Tobias\n@@ -1432,0 +1430,1 @@\n+public:\n@@ -1498,0 +1497,3 @@\n+  jint flat_layout_helper() const;\n+  int flat_elem_size() const;\n+  int flat_log_elem_size() const;\n@@ -1603,2 +1605,0 @@\n-public:\n-  \/\/ TODO Tobias\n@@ -1607,0 +1607,1 @@\n+public:\n@@ -1642,0 +1643,2 @@\n+\n+  bool can_be_inline_array() const { return (_klass == NULL || _klass->can_be_inline_array_klass()); }\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}