{"files":[{"patch":"@@ -1780,1 +1780,0 @@\n-  assert(vk->nof_nonstatic_fields() > 0, \"Empty inline type access should be removed\");\n@@ -1887,1 +1886,2 @@\n-        if (field->is_null_free() && field->type()->is_loaded() && field->type()->as_inline_klass()->is_empty()) {\n+        if (field->is_null_free() && field->type()->as_instance_klass()->is_initialized()\n+            && field->type()->as_inline_klass()->is_empty()) {\n@@ -1989,1 +1989,1 @@\n-            if (inline_klass->is_empty()) {\n+            if (inline_klass->is_initialized() && inline_klass->is_empty()) {\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1742,1 +1742,3 @@\n-    assert(field->type()->as_inline_klass()->is_loaded(), \"Must be\");\n+    assert(field->type()->is_loaded(), \"Must be\");\n+    assert(field->type()->is_inlinetype(), \"Must be if loaded\");\n+    assert(field->type()->as_inline_klass()->is_initialized(), \"Must be\");\n@@ -2324,0 +2326,1 @@\n+             x->array()->declared_type()->as_flat_array_klass()->element_klass()->as_inline_klass()->is_initialized() &&\n@@ -2328,0 +2331,1 @@\n+    assert(elem_klass->is_initialized(), \"Must be\");\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5501,7 +5501,0 @@\n-\n-  if (ik->is_inline_klass()) {\n-    InlineKlass* vk = InlineKlass::cast(ik);\n-    oop val = ik->allocate_instance(CHECK_NULL);\n-    vk->set_default_value(val);\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1236,0 +1236,19 @@\n+  \/\/ Pre-allocating an instance of the default value\n+  if (is_inline_klass()) {\n+      InlineKlass* vk = InlineKlass::cast(this);\n+      oop val = vk->allocate_instance(THREAD);\n+      if (HAS_PENDING_EXCEPTION) {\n+          Handle e(THREAD, PENDING_EXCEPTION);\n+          CLEAR_PENDING_EXCEPTION;\n+          {\n+              EXCEPTION_MARK;\n+              add_initialization_error(THREAD, e);\n+              \/\/ Locks object, set state, and notify all waiting threads\n+              set_initialization_state_and_notify(initialization_error, THREAD);\n+              CLEAR_PENDING_EXCEPTION;\n+          }\n+          THROW_OOP(e());\n+      }\n+      vk->set_default_value(val);\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}