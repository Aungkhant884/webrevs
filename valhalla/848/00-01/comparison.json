{"files":[{"patch":"@@ -39,2 +39,2 @@\n- * The {@code Float16} class wraps 16 bit Half precision floating point\n- * value in FP16 format held inside a short storage.\n+ * The {@code Float16} is a primitive value class holding 16-bit data in IEEE 754 binary16 format\n+ * {@code Float16} contains a single field whose type is {@code short}.\n@@ -42,2 +42,5 @@\n- * <p>In addition, this class provides methods to match the\n- * functionality of various single precision floating point operations.\n+ * Binary16 Format:\n+ *   S EEEEE  MMMMMMMMMM\n+ *   Sign        - 1 bit\n+ *   Exponent    - 5 bits\n+ *   Significand - 10 bits\n@@ -45,2 +48,5 @@\n- * @author  Lee Boynton\n- * @since 20.0\n+ * <p>This is a <a href=\"https:\/\/openjdk.org\/jeps\/401\">primitive value class<\/a> and its objects are\n+ * identity-less non-nullable value objects.\n+ *\n+ * @author Jatin Bhateja\n+ * @since 20.00\n@@ -48,0 +54,1 @@\n+\n@@ -52,7 +59,2 @@\n-   * Returns a {@code Float16} instance representing the specified\n-   * {@code short} value.\n-   * If a new {@code Float16} instance is not required, this method\n-   * should generally be used in preference to the constructor\n-   * {@link #Float16(short)}, as this method is likely to yield\n-   * significantly better space and time performance by caching\n-   * frequently requested values.\n+   * Returns a {@code Float16} instance wrapping IEEE 754 binary16\n+   * encoded {@code short} value.\n@@ -68,7 +70,2 @@\n-   * Returns a {@code Float16} instance representing the specified\n-   * {@code short} value.\n-   * If a new {@code Float16} instance is not required, this method\n-   * should generally be used in preference to the constructor\n-   * {@link #Float16(short)}, as this method is likely to yield\n-   * significantly better space and time performance by caching\n-   * frequently requested values.\n+   * Returns a {@code Float16} instance wrapping IEEE 754 binary16\n+   * encoded {@code short} value.\n@@ -106,1049 +103,0 @@\n-\n-\/\/FIXME: Add other methods in Float16 to match the operation coverage of\n-\/\/ single precision floating point {@code Float}\n-\/\/public final class Float16 extends Number\n-\/\/        implements Comparable<Float16>, Constable, ConstantDesc {\n-\/\/    \/**\n-\/\/     * A constant holding the positive infinity of type\n-\/\/     * {@code float}. It is equal to the value returned by\n-\/\/     * {@code Float.intBitsToFloat(0x7f800000)}.\n-\/\/     *\/\n-\/\/    public static final short POSITIVE_INFINITY = (short)0x7c00;\n-\/\/\n-\/\/    \/**\n-\/\/     * A constant holding the negative infinity of type\n-\/\/     * {@code float}. It is equal to the value returned by\n-\/\/     * {@code Float.intBitsToFloat(0xff800000)}.\n-\/\/     *\/\n-\/\/    public static final short NEGATIVE_INFINITY = (short)0xfc00;\n-\/\/\n-\/\/    \/**\n-\/\/     * A constant holding a Not-a-Number (NaN) value of type\n-\/\/     * {@code float}.  It is equivalent to the value returned by\n-\/\/     * {@code Float.intBitsToFloat(0x7fc00000)}.\n-\/\/     *\/\n-\/\/    public static final short NaN = (short)0x7e00;\n-\/\/\n-\/\/    \/**\n-\/\/     * A constant holding the largest positive finite value of type\n-\/\/     * {@code float}, (2-2<sup>-9<\/sup>)&middot;2<sup>15<\/sup>.\n-\/\/     * It is equal to the hexadecimal floating-point literal\n-\/\/     * {@code 0x1.ffcP+15f} and also equal to\n-\/\/     * {@code Float.intBitsToFloat(0x7c3ff)}.\n-\/\/     *\/\n-\/\/    public static final short MAX_VALUE = (short)0x7c3ff; \/\/ 65504.0\n-\/\/\n-\/\/    \/**\n-\/\/     * A constant holding the smallest positive normal value of type\n-\/\/     * {@code float}, 2<sup>-126<\/sup>.  It is equal to the\n-\/\/     * hexadecimal floating-point literal {@code 0x1.0p-126f} and also\n-\/\/     * equal to {@code Float.intBitsToFloat(0x00800000)}.\n-\/\/     *\n-\/\/     * @since 1.6\n-\/\/     *\/\n-\/\/    \/\/public static final short MIN_NORMAL = 0x1.0p-14f; \/\/ 6.103515625E-5f\n-\/\/\n-\/\/    \/**\n-\/\/     * A constant holding the smallest positive nonzero value of type\n-\/\/     * {@code float}, 2<sup>-149<\/sup>. It is equal to the\n-\/\/     * hexadecimal floating-point literal {@code 0x0.000002P-126f}\n-\/\/     * and also equal to {@code Float.intBitsToFloat(0x1)}.\n-\/\/     *\/\n-\/\/    public static final short MIN_VALUE = (short)0x0002; \/\/ 6.103515625E-5f\n-\/\/\n-\/\/    \/**\n-\/\/     * The number of bits used to represent a {@code float} value.\n-\/\/     *\n-\/\/     * @since 1.5\n-\/\/     *\/\n-\/\/    public static final int SIZE = 16;\n-\/\/\n-\/\/    \/**\n-\/\/     * The number of bits in the significand of a {@code float} value.\n-\/\/     * This is the parameter N in section {@jls 4.2.3} of\n-\/\/     * <cite>The Java Language Specification<\/cite>.\n-\/\/     *\n-\/\/     * @since 19\n-\/\/     *\/\n-\/\/    public static final int PRECISION = 10;\n-\/\/\n-\/\/    \/**\n-\/\/     * Maximum exponent a finite {@code float} variable may have.  It\n-\/\/     * is equal to the value returned by {@code\n-\/\/     * Math.getExponent(Float.MAX_VALUE)}.\n-\/\/     *\n-\/\/     * @since 1.6\n-\/\/     *\/\n-\/\/    public static final int MAX_EXPONENT = (1 << (SIZE - PRECISION - 1)) - 1; \/\/ 15\n-\/\/\n-\/\/    \/**\n-\/\/     * Minimum exponent a normalized {@code float} variable may have.\n-\/\/     * It is equal to the value returned by {@code\n-\/\/     * Math.getExponent(Float.MIN_NORMAL)}.\n-\/\/     *\n-\/\/     * @since 1.6\n-\/\/     *\/\n-\/\/    public static final int MIN_EXPONENT = 1 - MAX_EXPONENT; \/\/ -14\n-\/\/\n-\/\/    \/**\n-\/\/     * The number of bytes used to represent a {@code float} value.\n-\/\/     *\n-\/\/     * @since 1.8\n-\/\/     *\/\n-\/\/    public static final int BYTES = SIZE \/ Byte.SIZE;\n-\/\/\n-\/\/    \/**\n-\/\/     * The {@code Class} instance representing the primitive type\n-\/\/     * {@code float}.\n-\/\/     *\n-\/\/     * @since 1.1\n-\/\/     *\/\n-\/\/    @SuppressWarnings(\"unchecked\")\n-\/\/    public static final Class<Short> TYPE = (Class<Short>) Class.getPrimitiveClass(\"short\");\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a string representation of the {@code float}\n-\/\/     * argument. All characters mentioned below are ASCII characters.\n-\/\/     * <ul>\n-\/\/     * <li>If the argument is NaN, the result is the string\n-\/\/     * \"{@code NaN}\".\n-\/\/     * <li>Otherwise, the result is a string that represents the sign and\n-\/\/     *     magnitude (absolute value) of the argument. If the sign is\n-\/\/     *     negative, the first character of the result is\n-\/\/     *     '{@code -}' ({@code '\\u005Cu002D'}); if the sign is\n-\/\/     *     positive, no sign character appears in the result. As for\n-\/\/     *     the magnitude <i>m<\/i>:\n-\/\/     * <ul>\n-\/\/     * <li>If <i>m<\/i> is infinity, it is represented by the characters\n-\/\/     *     {@code \"Infinity\"}; thus, positive infinity produces\n-\/\/     *     the result {@code \"Infinity\"} and negative infinity\n-\/\/     *     produces the result {@code \"-Infinity\"}.\n-\/\/     * <li>If <i>m<\/i> is zero, it is represented by the characters\n-\/\/     *     {@code \"0.0\"}; thus, negative zero produces the result\n-\/\/     *     {@code \"-0.0\"} and positive zero produces the result\n-\/\/     *     {@code \"0.0\"}.\n-\/\/     *\n-\/\/     * <li> Otherwise <i>m<\/i> is positive and finite.\n-\/\/     * It is converted to a string in two stages:\n-\/\/     * <ul>\n-\/\/     * <li> <em>Selection of a decimal<\/em>:\n-\/\/     * A well-defined decimal <i>d<\/i><sub><i>m<\/i><\/sub>\n-\/\/     * is selected to represent <i>m<\/i>.\n-\/\/     * This decimal is (almost always) the <em>shortest<\/em> one that\n-\/\/     * rounds to <i>m<\/i> according to the round to nearest\n-\/\/     * rounding policy of IEEE 754 floating-point arithmetic.\n-\/\/     * <li> <em>Formatting as a string<\/em>:\n-\/\/     * The decimal <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as a string,\n-\/\/     * either in plain or in computerized scientific notation,\n-\/\/     * depending on its value.\n-\/\/     * <\/ul>\n-\/\/     * <\/ul>\n-\/\/     * <\/ul>\n-\/\/     *\n-\/\/     * <p>A <em>decimal<\/em> is a number of the form\n-\/\/     * <i>s<\/i>&times;10<sup><i>i<\/i><\/sup>\n-\/\/     * for some (unique) integers <i>s<\/i> &gt; 0 and <i>i<\/i> such that\n-\/\/     * <i>s<\/i> is not a multiple of 10.\n-\/\/     * These integers are the <em>significand<\/em> and\n-\/\/     * the <em>exponent<\/em>, respectively, of the decimal.\n-\/\/     * The <em>length<\/em> of the decimal is the (unique)\n-\/\/     * positive integer <i>n<\/i> meeting\n-\/\/     * 10<sup><i>n<\/i>-1<\/sup> &le; <i>s<\/i> &lt; 10<sup><i>n<\/i><\/sup>.\n-\/\/     *\n-\/\/     * <p>The decimal <i>d<\/i><sub><i>m<\/i><\/sub> for a finite positive <i>m<\/i>\n-\/\/     * is defined as follows:\n-\/\/     * <ul>\n-\/\/     * <li>Let <i>R<\/i> be the set of all decimals that round to <i>m<\/i>\n-\/\/     * according to the usual <em>round to nearest<\/em> rounding policy of\n-\/\/     * IEEE 754 floating-point arithmetic.\n-\/\/     * <li>Let <i>p<\/i> be the minimal length over all decimals in <i>R<\/i>.\n-\/\/     * <li>When <i>p<\/i> &ge; 2, let <i>T<\/i> be the set of all decimals\n-\/\/     * in <i>R<\/i> with length <i>p<\/i>.\n-\/\/     * Otherwise, let <i>T<\/i> be the set of all decimals\n-\/\/     * in <i>R<\/i> with length 1 or 2.\n-\/\/     * <li>Define <i>d<\/i><sub><i>m<\/i><\/sub> as the decimal in <i>T<\/i>\n-\/\/     * that is closest to <i>m<\/i>.\n-\/\/     * Or if there are two such decimals in <i>T<\/i>,\n-\/\/     * select the one with the even significand.\n-\/\/     * <\/ul>\n-\/\/     *\n-\/\/     * <p>The (uniquely) selected decimal <i>d<\/i><sub><i>m<\/i><\/sub>\n-\/\/     * is then formatted.\n-\/\/     * Let <i>s<\/i>, <i>i<\/i> and <i>n<\/i> be the significand, exponent and\n-\/\/     * length of <i>d<\/i><sub><i>m<\/i><\/sub>, respectively.\n-\/\/     * Further, let <i>e<\/i> = <i>n<\/i> + <i>i<\/i> - 1 and let\n-\/\/     * <i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub>\n-\/\/     * be the usual decimal expansion of <i>s<\/i>.\n-\/\/     * Note that <i>s<\/i><sub>1<\/sub> &ne; 0\n-\/\/     * and <i>s<\/i><sub><i>n<\/i><\/sub> &ne; 0.\n-\/\/     * Below, the decimal point {@code '.'} is {@code '\\u005Cu002E'}\n-\/\/     * and the exponent indicator {@code 'E'} is {@code '\\u005Cu0045'}.\n-\/\/     * <ul>\n-\/\/     * <li>Case -3 &le; <i>e<\/i> &lt; 0:\n-\/\/     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n-\/\/     * <code>0.0<\/code>&hellip;<code>0<\/code><!--\n-\/\/     * --><i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub>,\n-\/\/     * where there are exactly -(<i>n<\/i> + <i>i<\/i>) zeroes between\n-\/\/     * the decimal point and <i>s<\/i><sub>1<\/sub>.\n-\/\/     * For example, 123 &times; 10<sup>-4<\/sup> is formatted as\n-\/\/     * {@code 0.0123}.\n-\/\/     * <li>Case 0 &le; <i>e<\/i> &lt; 7:\n-\/\/     * <ul>\n-\/\/     * <li>Subcase <i>i<\/i> &ge; 0:\n-\/\/     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n-\/\/     * <i>s<\/i><sub>1<\/sub>&hellip;<i>s<\/i><sub><i>n<\/i><\/sub><!--\n-\/\/     * --><code>0<\/code>&hellip;<code>0.0<\/code>,\n-\/\/     * where there are exactly <i>i<\/i> zeroes\n-\/\/     * between <i>s<\/i><sub><i>n<\/i><\/sub> and the decimal point.\n-\/\/     * For example, 123 &times; 10<sup>2<\/sup> is formatted as\n-\/\/     * {@code 12300.0}.\n-\/\/     * <li>Subcase <i>i<\/i> &lt; 0:\n-\/\/     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n-\/\/     * <i>s<\/i><sub>1<\/sub>&hellip;<!--\n-\/\/     * --><i>s<\/i><sub><i>n<\/i>+<i>i<\/i><\/sub><code>.<\/code><!--\n-\/\/     * --><i>s<\/i><sub><i>n<\/i>+<i>i<\/i>+1<\/sub>&hellip;<!--\n-\/\/     * --><i>s<\/i><sub><i>n<\/i><\/sub>,\n-\/\/     * where there are exactly -<i>i<\/i> digits to the right of\n-\/\/     * the decimal point.\n-\/\/     * For example, 123 &times; 10<sup>-1<\/sup> is formatted as\n-\/\/     * {@code 12.3}.\n-\/\/     * <\/ul>\n-\/\/     * <li>Case <i>e<\/i> &lt; -3 or <i>e<\/i> &ge; 7:\n-\/\/     * computerized scientific notation is used to format\n-\/\/     * <i>d<\/i><sub><i>m<\/i><\/sub>.\n-\/\/     * Here <i>e<\/i> is formatted as by {@link Integer#toString(int)}.\n-\/\/     * <ul>\n-\/\/     * <li>Subcase <i>n<\/i> = 1:\n-\/\/     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n-\/\/     * <i>s<\/i><sub>1<\/sub><code>.0E<\/code><i>e<\/i>.\n-\/\/     * For example, 1 &times; 10<sup>23<\/sup> is formatted as\n-\/\/     * {@code 1.0E23}.\n-\/\/     * <li>Subcase <i>n<\/i> &gt; 1:\n-\/\/     * <i>d<\/i><sub><i>m<\/i><\/sub> is formatted as\n-\/\/     * <i>s<\/i><sub>1<\/sub><code>.<\/code><i>s<\/i><sub>2<\/sub><!--\n-\/\/     * -->&hellip;<i>s<\/i><sub><i>n<\/i><\/sub><code>E<\/code><i>e<\/i>.\n-\/\/     * For example, 123 &times; 10<sup>-21<\/sup> is formatted as\n-\/\/     * {@code 1.23E-19}.\n-\/\/     * <\/ul>\n-\/\/     * <\/ul>\n-\/\/     *\n-\/\/     * <p>To create localized string representations of a floating-point\n-\/\/     * value, use subclasses of {@link java.text.NumberFormat}.\n-\/\/     *\n-\/\/     * @param   f   the {@code float} to be converted.\n-\/\/     * @return a string representation of the argument.\n-\/\/     *\/\n-\/\/    @Override\n-\/\/    public String toString(Float16 value) {\n-\/\/        return Short.toString(value.value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a hexadecimal string representation of the\n-\/\/     * {@code float} argument. All characters mentioned below are\n-\/\/     * ASCII characters.\n-\/\/     *\n-\/\/     * <ul>\n-\/\/     * <li>If the argument is NaN, the result is the string\n-\/\/     *     \"{@code NaN}\".\n-\/\/     * <li>Otherwise, the result is a string that represents the sign and\n-\/\/     * magnitude (absolute value) of the argument. If the sign is negative,\n-\/\/     * the first character of the result is '{@code -}'\n-\/\/     * ({@code '\\u005Cu002D'}); if the sign is positive, no sign character\n-\/\/     * appears in the result. As for the magnitude <i>m<\/i>:\n-\/\/     *\n-\/\/     * <ul>\n-\/\/     * <li>If <i>m<\/i> is infinity, it is represented by the string\n-\/\/     * {@code \"Infinity\"}; thus, positive infinity produces the\n-\/\/     * result {@code \"Infinity\"} and negative infinity produces\n-\/\/     * the result {@code \"-Infinity\"}.\n-\/\/     *\n-\/\/     * <li>If <i>m<\/i> is zero, it is represented by the string\n-\/\/     * {@code \"0x0.0p0\"}; thus, negative zero produces the result\n-\/\/     * {@code \"-0x0.0p0\"} and positive zero produces the result\n-\/\/     * {@code \"0x0.0p0\"}.\n-\/\/     *\n-\/\/     * <li>If <i>m<\/i> is a {@code float} value with a\n-\/\/     * normalized representation, substrings are used to represent the\n-\/\/     * significand and exponent fields.  The significand is\n-\/\/     * represented by the characters {@code \"0x1.\"}\n-\/\/     * followed by a lowercase hexadecimal representation of the rest\n-\/\/     * of the significand as a fraction.  Trailing zeros in the\n-\/\/     * hexadecimal representation are removed unless all the digits\n-\/\/     * are zero, in which case a single zero is used. Next, the\n-\/\/     * exponent is represented by {@code \"p\"} followed\n-\/\/     * by a decimal string of the unbiased exponent as if produced by\n-\/\/     * a call to {@link Integer#toString(int) Integer.toString} on the\n-\/\/     * exponent value.\n-\/\/     *\n-\/\/     * <li>If <i>m<\/i> is a {@code float} value with a subnormal\n-\/\/     * representation, the significand is represented by the\n-\/\/     * characters {@code \"0x0.\"} followed by a\n-\/\/     * hexadecimal representation of the rest of the significand as a\n-\/\/     * fraction.  Trailing zeros in the hexadecimal representation are\n-\/\/     * removed. Next, the exponent is represented by\n-\/\/     * {@code \"p-126\"}.  Note that there must be at\n-\/\/     * least one nonzero digit in a subnormal significand.\n-\/\/     *\n-\/\/     * <\/ul>\n-\/\/     *\n-\/\/     * <\/ul>\n-\/\/     *\n-\/\/     * <table class=\"striped\">\n-\/\/     * <caption>Examples<\/caption>\n-\/\/     * <thead>\n-\/\/     * <tr><th scope=\"col\">Floating-point Value<\/th><th scope=\"col\">Hexadecimal String<\/th>\n-\/\/     * <\/thead>\n-\/\/     * <tbody>\n-\/\/     * <tr><th scope=\"row\">{@code 1.0}<\/th> <td>{@code 0x1.0p0}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code -1.0}<\/th>        <td>{@code -0x1.0p0}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code 2.0}<\/th> <td>{@code 0x1.0p1}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code 3.0}<\/th> <td>{@code 0x1.8p1}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code 0.5}<\/th> <td>{@code 0x1.0p-1}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code 0.25}<\/th>        <td>{@code 0x1.0p-2}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code Float.MAX_VALUE}<\/th>\n-\/\/     *     <td>{@code 0x1.fffffep127}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code Minimum Normal Value}<\/th>\n-\/\/     *     <td>{@code 0x1.0p-126}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code Maximum Subnormal Value}<\/th>\n-\/\/     *     <td>{@code 0x0.fffffep-126}<\/td>\n-\/\/     * <tr><th scope=\"row\">{@code Float.MIN_VALUE}<\/th>\n-\/\/     *     <td>{@code 0x0.000002p-126}<\/td>\n-\/\/     * <\/tbody>\n-\/\/     * <\/table>\n-\/\/     * @param   f   the {@code float} to be converted.\n-\/\/     * @return a hex string representation of the argument.\n-\/\/     * @since 1.5\n-\/\/     * @author Joseph D. Darcy\n-\/\/     *\/\n-\/\/    public static String toHexString(short f) {\n-\/\/        return \"fp16:\" + value;\n-\/\/\/\/\n-\/\/\/\/        if (Math.abs(f) < Float.MIN_NORMAL\n-\/\/\/\/            &&  f != 0.0f ) {\/\/ float subnormal\n-\/\/\/\/            \/\/ Adjust exponent to create subnormal double, then\n-\/\/\/\/            \/\/ replace subnormal double exponent with subnormal float\n-\/\/\/\/            \/\/ exponent\n-\/\/\/\/            String s = Double.toHexString(Math.scalb((double)f,\n-\/\/\/\/                                                     \/* -1022+126 *\/\n-\/\/\/\/                                                     Double.MIN_EXPONENT-\n-\/\/\/\/                                                     Float.MIN_EXPONENT));\n-\/\/\/\/            return s.replaceFirst(\"p-1022$\", \"p-126\");\n-\/\/\/\/        }\n-\/\/\/\/        else \/\/ double string will be the same as float string\n-\/\/\/\/            return Double.toHexString(f);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a {@code Float} object holding the\n-\/\/     * {@code float} value represented by the argument string\n-\/\/     * {@code s}.\n-\/\/     *\n-\/\/     * <p>If {@code s} is {@code null}, then a\n-\/\/     * {@code NullPointerException} is thrown.\n-\/\/     *\n-\/\/     * <p>Leading and trailing whitespace characters in {@code s}\n-\/\/     * are ignored.  Whitespace is removed as if by the {@link\n-\/\/     * String#trim} method; that is, both ASCII space and control\n-\/\/     * characters are removed. The rest of {@code s} should\n-\/\/     * constitute a <i>FloatValue<\/i> as described by the lexical\n-\/\/     * syntax rules:\n-\/\/     *\n-\/\/     * <blockquote>\n-\/\/     * <dl>\n-\/\/     * <dt><i>FloatValue:<\/i>\n-\/\/     * <dd><i>Sign<sub>opt<\/sub><\/i> {@code NaN}\n-\/\/     * <dd><i>Sign<sub>opt<\/sub><\/i> {@code Infinity}\n-\/\/     * <dd><i>Sign<sub>opt<\/sub> FloatingPointLiteral<\/i>\n-\/\/     * <dd><i>Sign<sub>opt<\/sub> HexFloatingPointLiteral<\/i>\n-\/\/     * <dd><i>SignedInteger<\/i>\n-\/\/     * <\/dl>\n-\/\/     *\n-\/\/     * <dl>\n-\/\/     * <dt><i>HexFloatingPointLiteral<\/i>:\n-\/\/     * <dd> <i>HexSignificand BinaryExponent FloatTypeSuffix<sub>opt<\/sub><\/i>\n-\/\/     * <\/dl>\n-\/\/     *\n-\/\/     * <dl>\n-\/\/     * <dt><i>HexSignificand:<\/i>\n-\/\/     * <dd><i>HexNumeral<\/i>\n-\/\/     * <dd><i>HexNumeral<\/i> {@code .}\n-\/\/     * <dd>{@code 0x} <i>HexDigits<sub>opt<\/sub>\n-\/\/     *     <\/i>{@code .}<i> HexDigits<\/i>\n-\/\/     * <dd>{@code 0X}<i> HexDigits<sub>opt<\/sub>\n-\/\/     *     <\/i>{@code .} <i>HexDigits<\/i>\n-\/\/     * <\/dl>\n-\/\/     *\n-\/\/     * <dl>\n-\/\/     * <dt><i>BinaryExponent:<\/i>\n-\/\/     * <dd><i>BinaryExponentIndicator SignedInteger<\/i>\n-\/\/     * <\/dl>\n-\/\/     *\n-\/\/     * <dl>\n-\/\/     * <dt><i>BinaryExponentIndicator:<\/i>\n-\/\/     * <dd>{@code p}\n-\/\/     * <dd>{@code P}\n-\/\/     * <\/dl>\n-\/\/     *\n-\/\/     * <\/blockquote>\n-\/\/     *\n-\/\/     * where <i>Sign<\/i>, <i>FloatingPointLiteral<\/i>,\n-\/\/     * <i>HexNumeral<\/i>, <i>HexDigits<\/i>, <i>SignedInteger<\/i> and\n-\/\/     * <i>FloatTypeSuffix<\/i> are as defined in the lexical structure\n-\/\/     * sections of\n-\/\/     * <cite>The Java Language Specification<\/cite>,\n-\/\/     * except that underscores are not accepted between digits.\n-\/\/     * If {@code s} does not have the form of\n-\/\/     * a <i>FloatValue<\/i>, then a {@code NumberFormatException}\n-\/\/     * is thrown. Otherwise, {@code s} is regarded as\n-\/\/     * representing an exact decimal value in the usual\n-\/\/     * \"computerized scientific notation\" or as an exact\n-\/\/     * hexadecimal value; this exact numerical value is then\n-\/\/     * conceptually converted to an \"infinitely precise\"\n-\/\/     * binary value that is then rounded to type {@code float}\n-\/\/     * by the usual round-to-nearest rule of IEEE 754 floating-point\n-\/\/     * arithmetic, which includes preserving the sign of a zero\n-\/\/     * value.\n-\/\/     *\n-\/\/     * Note that the round-to-nearest rule also implies overflow and\n-\/\/     * underflow behaviour; if the exact value of {@code s} is large\n-\/\/     * enough in magnitude (greater than or equal to ({@link\n-\/\/     * #MAX_VALUE} + {@link Math#ulp(float) ulp(MAX_VALUE)}\/2),\n-\/\/     * rounding to {@code float} will result in an infinity and if the\n-\/\/     * exact value of {@code s} is small enough in magnitude (less\n-\/\/     * than or equal to {@link #MIN_VALUE}\/2), rounding to float will\n-\/\/     * result in a zero.\n-\/\/     *\n-\/\/     * Finally, after rounding a {@code Float} object representing\n-\/\/     * this {@code float} value is returned.\n-\/\/     *\n-\/\/     * <p>To interpret localized string representations of a\n-\/\/     * floating-point value, use subclasses of {@link\n-\/\/     * java.text.NumberFormat}.\n-\/\/     *\n-\/\/     * <p>Note that trailing format specifiers, specifiers that\n-\/\/     * determine the type of a floating-point literal\n-\/\/     * ({@code 1.0f} is a {@code float} value;\n-\/\/     * {@code 1.0d} is a {@code double} value), do\n-\/\/     * <em>not<\/em> influence the results of this method.  In other\n-\/\/     * words, the numerical value of the input string is converted\n-\/\/     * directly to the target floating-point type.  In general, the\n-\/\/     * two-step sequence of conversions, string to {@code double}\n-\/\/     * followed by {@code double} to {@code float}, is\n-\/\/     * <em>not<\/em> equivalent to converting a string directly to\n-\/\/     * {@code float}.  For example, if first converted to an\n-\/\/     * intermediate {@code double} and then to\n-\/\/     * {@code float}, the string<br>\n-\/\/     * {@code \"1.00000017881393421514957253748434595763683319091796875001d\"}<br>\n-\/\/     * results in the {@code float} value\n-\/\/     * {@code 1.0000002f}; if the string is converted directly to\n-\/\/     * {@code float}, <code>1.000000<b>1<\/b>f<\/code> results.\n-\/\/     *\n-\/\/     * <p>To avoid calling this method on an invalid string and having\n-\/\/     * a {@code NumberFormatException} be thrown, the documentation\n-\/\/     * for {@link Double#valueOf Double.valueOf} lists a regular\n-\/\/     * expression which can be used to screen the input.\n-\/\/     *\n-\/\/     * @param   s   the string to be parsed.\n-\/\/     * @return  a {@code Float} object holding the value\n-\/\/     *          represented by the {@code String} argument.\n-\/\/     * @throws  NumberFormatException  if the string does not contain a\n-\/\/     *          parsable number.\n-\/\/     *\/\n-\/\/    public static Float16 valueOf(String s) throws NumberFormatException {\n-\/\/        return new Float16(parseShort(s));\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a {@code Float} instance representing the specified\n-\/\/     * {@code float} value.\n-\/\/     * If a new {@code Float} instance is not required, this method\n-\/\/     * should generally be used in preference to the constructor\n-\/\/     * {@link #Float(float)}, as this method is likely to yield\n-\/\/     * significantly better space and time performance by caching\n-\/\/     * frequently requested values.\n-\/\/     *\n-\/\/     * @param  f a float value.\n-\/\/     * @return a {@code Float} instance representing {@code f}.\n-\/\/     * @since  1.5\n-\/\/     *\/\n-\/\/    @IntrinsicCandidate\n-\/\/    public static Float16 valueOf(short f) {\n-\/\/        return new Float16(f);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a new {@code float} initialized to the value\n-\/\/     * represented by the specified {@code String}, as performed\n-\/\/     * by the {@code valueOf} method of class {@code Float}.\n-\/\/     *\n-\/\/     * @param  s the string to be parsed.\n-\/\/     * @return the {@code float} value represented by the string\n-\/\/     *         argument.\n-\/\/     * @throws NullPointerException  if the string is null\n-\/\/     * @throws NumberFormatException if the string does not contain a\n-\/\/     *               parsable {@code float}.\n-\/\/     * @see    java.lang.Float#valueOf(String)\n-\/\/     * @since 1.2\n-\/\/     *\/\n-\/\/    public static short parseFloat16(String s) throws NumberFormatException {\n-\/\/        return Short.parseShort(s);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns {@code true} if the specified number is a\n-\/\/     * Not-a-Number (NaN) value, {@code false} otherwise.\n-\/\/     *\n-\/\/     * @apiNote\n-\/\/     * This method corresponds to the isNaN operation defined in IEEE\n-\/\/     * 754.\n-\/\/     *\n-\/\/     * @param   v   the value to be tested.\n-\/\/     * @return  {@code true} if the argument is NaN;\n-\/\/     *          {@code false} otherwise.\n-\/\/     *\/\n-\/\/    public static boolean isNaN(Float16 v) {\n-\/\/        return Float.float16ToFloat(v).isNaN();\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns {@code true} if the specified number is infinitely\n-\/\/     * large in magnitude, {@code false} otherwise.\n-\/\/     *\n-\/\/     * @apiNote\n-\/\/     * This method corresponds to the isInfinite operation defined in\n-\/\/     * IEEE 754.\n-\/\/     *\n-\/\/     * @param   v   the value to be tested.\n-\/\/     * @return  {@code true} if the argument is positive infinity or\n-\/\/     *          negative infinity; {@code false} otherwise.\n-\/\/     *\/\n-\/\/    @IntrinsicCandidate\n-\/\/    public static boolean isInfinite(Float16 v) {\n-\/\/        return Float.float16ToFloat(v).isInfinite();\n-\/\/    }\n-\/\/\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns {@code true} if the argument is a finite floating-point\n-\/\/     * value; returns {@code false} otherwise (for NaN and infinity\n-\/\/     * arguments).\n-\/\/     *\n-\/\/     * @apiNote\n-\/\/     * This method corresponds to the isFinite operation defined in\n-\/\/     * IEEE 754.\n-\/\/     *\n-\/\/     * @param f the {@code float} value to be tested\n-\/\/     * @return {@code true} if the argument is a finite\n-\/\/     * floating-point value, {@code false} otherwise.\n-\/\/     * @since 1.8\n-\/\/     *\/\n-\/\/     @IntrinsicCandidate\n-\/\/     public static boolean isFinite(Float16 f) {\n-\/\/        return Float.float16ToFloat(f).isFinite();\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * The value of the Float.\n-\/\/     *\n-\/\/     * @serial\n-\/\/     *\/\n-\/\/    private final short value;\n-\/\/\n-\/\/    \/**\n-\/\/     * Constructs a newly allocated {@code Float} object that\n-\/\/     * represents the primitive {@code float} argument.\n-\/\/     *\n-\/\/     * @param   value   the value to be represented by the {@code Float}.\n-\/\/     *\n-\/\/     * @deprecated\n-\/\/     * It is rarely appropriate to use this constructor. The static factory\n-\/\/     * {@link #valueOf(float)} is generally a better choice, as it is\n-\/\/     * likely to yield significantly better space and time performance.\n-\/\/     *\/\n-\/\/    @Deprecated(since=\"9\", forRemoval = true)\n-\/\/    public Float16(short value) {\n-\/\/        this.value = value;\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Constructs a newly allocated {@code Float} object that\n-\/\/     * represents the floating-point value of type {@code float}\n-\/\/     * represented by the string. The string is converted to a\n-\/\/     * {@code float} value as if by the {@code valueOf} method.\n-\/\/     *\n-\/\/     * @param   s   a string to be converted to a {@code Float}.\n-\/\/     * @throws      NumberFormatException if the string does not contain a\n-\/\/     *              parsable number.\n-\/\/     *\n-\/\/     * @deprecated\n-\/\/     * It is rarely appropriate to use this constructor.\n-\/\/     * Use {@link #parseFloat(String)} to convert a string to a\n-\/\/     * {@code float} primitive, or use {@link #valueOf(String)}\n-\/\/     * to convert a string to a {@code Float} object.\n-\/\/     *\/\n-\/\/    @Deprecated(since=\"9\", forRemoval = true)\n-\/\/    public Float16(String s) throws NumberFormatException {\n-\/\/        value = Short.parseShort(s);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns {@code true} if this {@code Float} value is a\n-\/\/     * Not-a-Number (NaN), {@code false} otherwise.\n-\/\/     *\n-\/\/     * @return  {@code true} if the value represented by this object is\n-\/\/     *          NaN; {@code false} otherwise.\n-\/\/     *\/\n-\/\/    public boolean isNaN() {\n-\/\/        return isNaN(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns {@code true} if this {@code Float} value is\n-\/\/     * infinitely large in magnitude, {@code false} otherwise.\n-\/\/     *\n-\/\/     * @return  {@code true} if the value represented by this object is\n-\/\/     *          positive infinity or negative infinity;\n-\/\/     *          {@code false} otherwise.\n-\/\/     *\/\n-\/\/    public boolean isInfinite() {\n-\/\/        return isInfinite(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a string representation of this {@code Float} object.\n-\/\/     * The primitive {@code float} value represented by this object\n-\/\/     * is converted to a {@code String} exactly as if by the method\n-\/\/     * {@code toString} of one argument.\n-\/\/     *\n-\/\/     * @return  a {@code String} representation of this object.\n-\/\/     * @see java.lang.Float#toString(float)\n-\/\/     *\/\n-\/\/    public String toString() {\n-\/\/        return Short.toString(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns the value of this {@code Float} as a {@code byte} after\n-\/\/     * a narrowing primitive conversion.\n-\/\/     *\n-\/\/     * @return  the {@code float} value represented by this object\n-\/\/     *          converted to type {@code byte}\n-\/\/     * @jls 5.1.3 Narrowing Primitive Conversion\n-\/\/     *\/\n-\/\/    public byte byteValue() {\n-\/\/        return (byte)Float.float16ToFloat(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns the value of this {@code Float} as a {@code short}\n-\/\/     * after a narrowing primitive conversion.\n-\/\/     *\n-\/\/     * @return  the {@code float} value represented by this object\n-\/\/     *          converted to type {@code short}\n-\/\/     * @jls 5.1.3 Narrowing Primitive Conversion\n-\/\/     * @since 1.1\n-\/\/     *\/\n-\/\/    public short shortValue() {\n-\/\/        return (short)Float.float16ToFloat(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns the value of this {@code Float} as an {@code int} after\n-\/\/     * a narrowing primitive conversion.\n-\/\/     *\n-\/\/     * @return  the {@code float} value represented by this object\n-\/\/     *          converted to type {@code int}\n-\/\/     * @jls 5.1.3 Narrowing Primitive Conversion\n-\/\/     *\/\n-\/\/    public int intValue() {\n-\/\/        return (int)Float.float16ToFloat(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns value of this {@code Float} as a {@code long} after a\n-\/\/     * narrowing primitive conversion.\n-\/\/     *\n-\/\/     * @return  the {@code float} value represented by this object\n-\/\/     *          converted to type {@code long}\n-\/\/     * @jls 5.1.3 Narrowing Primitive Conversion\n-\/\/     *\/\n-\/\/    public long longValue() {\n-\/\/        return (long)Float.float16ToFloat(value);\n-\/\/    }\n-\/\/\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns the {@code float} value of this {@code Float} object.\n-\/\/     *\n-\/\/     * @return the {@code float} value represented by this object\n-\/\/     *\/\n-\/\/    @IntrinsicCandidate\n-\/\/    public float floatValue() {\n-\/\/        return Float.float16ToFloat(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns the value of this {@code Float} as a {@code double}\n-\/\/     * after a widening primitive conversion.\n-\/\/     *\n-\/\/     * @apiNote\n-\/\/     * This method corresponds to the convertFormat operation defined\n-\/\/     * in IEEE 754.\n-\/\/     *\n-\/\/     * @return the {@code float} value represented by this\n-\/\/     *         object converted to type {@code double}\n-\/\/     * @jls 5.1.2 Widening Primitive Conversion\n-\/\/     *\/\n-\/\/    public double doubleValue() {\n-\/\/        return (double)Float.float16ToFloat(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a hash code for this {@code Float} object. The\n-\/\/     * result is the integer bit representation, exactly as produced\n-\/\/     * by the method {@link #floatToIntBits(float)}, of the primitive\n-\/\/     * {@code float} value represented by this {@code Float}\n-\/\/     * object.\n-\/\/     *\n-\/\/     * @return a hash code value for this object.\n-\/\/     *\/\n-\/\/    @Override\n-\/\/    public int hashCode() {\n-\/\/        return Short.hashCode(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a hash code for a {@code float} value; compatible with\n-\/\/     * {@code Float.hashCode()}.\n-\/\/     *\n-\/\/     * @param value the value to hash\n-\/\/     * @return a hash code value for a {@code float} value.\n-\/\/     * @since 1.8\n-\/\/     *\/\n-\/\/    public static int hashCode(short value) {\n-\/\/        return Short.hashCode(value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Compares this object against the specified object.  The result\n-\/\/     * is {@code true} if and only if the argument is not\n-\/\/     * {@code null} and is a {@code Float} object that\n-\/\/     * represents a {@code float} with the same value as the\n-\/\/     * {@code float} represented by this object. For this\n-\/\/     * purpose, two {@code float} values are considered to be the\n-\/\/     * same if and only if the method {@link #floatToIntBits(float)}\n-\/\/     * returns the identical {@code int} value when applied to\n-\/\/     * each.\n-\/\/     *\n-\/\/     * @apiNote\n-\/\/     * This method is defined in terms of {@link\n-\/\/     * #floatToIntBits(float)} rather than the {@code ==} operator on\n-\/\/     * {@code float} values since the {@code ==} operator does\n-\/\/     * <em>not<\/em> define an equivalence relation and to satisfy the\n-\/\/     * {@linkplain Object#equals equals contract} an equivalence\n-\/\/     * relation must be implemented; see <a\n-\/\/     * href=\"Double.html#equivalenceRelation\">this discussion<\/a> for\n-\/\/     * details of floating-point equality and equivalence.\n-\/\/     *\n-\/\/     * @param obj the object to be compared\n-\/\/     * @return  {@code true} if the objects are the same;\n-\/\/     *          {@code false} otherwise.\n-\/\/     * @see java.lang.Float#floatToIntBits(float)\n-\/\/     * @jls 15.21.1 Numerical Equality Operators == and !=\n-\/\/     *\/\n-\/\/    public boolean equals(Object obj) {\n-\/\/        return (obj instanceof Float16)\n-\/\/               && ((Float16)obj).value == value;\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a representation of the specified floating-point value\n-\/\/     * according to the IEEE 754 floating-point \"single format\" bit\n-\/\/     * layout.\n-\/\/     *\n-\/\/     * <p>Bit 31 (the bit that is selected by the mask\n-\/\/     * {@code 0x80000000}) represents the sign of the floating-point\n-\/\/     * number.\n-\/\/     * Bits 30-23 (the bits that are selected by the mask\n-\/\/     * {@code 0x7f800000}) represent the exponent.\n-\/\/     * Bits 22-0 (the bits that are selected by the mask\n-\/\/     * {@code 0x007fffff}) represent the significand (sometimes called\n-\/\/     * the mantissa) of the floating-point number.\n-\/\/     *\n-\/\/     * <p>If the argument is positive infinity, the result is\n-\/\/     * {@code 0x7f800000}.\n-\/\/     *\n-\/\/     * <p>If the argument is negative infinity, the result is\n-\/\/     * {@code 0xff800000}.\n-\/\/     *\n-\/\/     * <p>If the argument is NaN, the result is {@code 0x7fc00000}.\n-\/\/     *\n-\/\/     * <p>In all cases, the result is an integer that, when given to the\n-\/\/     * {@link #intBitsToFloat(int)} method, will produce a floating-point\n-\/\/     * value the same as the argument to {@code floatToIntBits}\n-\/\/     * (except all NaN values are collapsed to a single\n-\/\/     * \"canonical\" NaN value).\n-\/\/     *\n-\/\/     * @param   value   a floating-point number.\n-\/\/     * @return the bits that represent the floating-point number.\n-\/\/     *\/\n-\/\/    @IntrinsicCandidate\n-\/\/    public static int float16ToIntBits(short value) {\n-\/\/        if (!isNaN(value)) {\n-\/\/            return value;\n-\/\/        }\n-\/\/        return NaN;\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns a representation of the specified floating-point value\n-\/\/     * according to the IEEE 754 floating-point \"single format\" bit\n-\/\/     * layout, preserving Not-a-Number (NaN) values.\n-\/\/     *\n-\/\/     * <p>Bit 31 (the bit that is selected by the mask\n-\/\/     * {@code 0x80000000}) represents the sign of the floating-point\n-\/\/     * number.\n-\/\/     * Bits 30-23 (the bits that are selected by the mask\n-\/\/     * {@code 0x7f800000}) represent the exponent.\n-\/\/     * Bits 22-0 (the bits that are selected by the mask\n-\/\/     * {@code 0x007fffff}) represent the significand (sometimes called\n-\/\/     * the mantissa) of the floating-point number.\n-\/\/     *\n-\/\/     * <p>If the argument is positive infinity, the result is\n-\/\/     * {@code 0x7f800000}.\n-\/\/     *\n-\/\/     * <p>If the argument is negative infinity, the result is\n-\/\/     * {@code 0xff800000}.\n-\/\/     *\n-\/\/     * <p>If the argument is NaN, the result is the integer representing\n-\/\/     * the actual NaN value.  Unlike the {@code floatToIntBits}\n-\/\/     * method, {@code floatToRawIntBits} does not collapse all the\n-\/\/     * bit patterns encoding a NaN to a single \"canonical\"\n-\/\/     * NaN value.\n-\/\/     *\n-\/\/     * <p>In all cases, the result is an integer that, when given to the\n-\/\/     * {@link #intBitsToFloat(int)} method, will produce a\n-\/\/     * floating-point value the same as the argument to\n-\/\/     * {@code floatToRawIntBits}.\n-\/\/     *\n-\/\/     * @param   value   a floating-point number.\n-\/\/     * @return the bits that represent the floating-point number.\n-\/\/     * @since 1.3\n-\/\/     *\/\n-\/\/    \/\/@IntrinsicCandidate\n-\/\/    \/\/public static native int floatToRawIntBits(float value);\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns the {@code float} value corresponding to a given\n-\/\/     * bit representation.\n-\/\/     * The argument is considered to be a representation of a\n-\/\/     * floating-point value according to the IEEE 754 floating-point\n-\/\/     * \"single format\" bit layout.\n-\/\/     *\n-\/\/     * <p>If the argument is {@code 0x7f800000}, the result is positive\n-\/\/     * infinity.\n-\/\/     *\n-\/\/     * <p>If the argument is {@code 0xff800000}, the result is negative\n-\/\/     * infinity.\n-\/\/     *\n-\/\/     * <p>If the argument is any value in the range\n-\/\/     * {@code 0x7f800001} through {@code 0x7fffffff} or in\n-\/\/     * the range {@code 0xff800001} through\n-\/\/     * {@code 0xffffffff}, the result is a NaN.  No IEEE 754\n-\/\/     * floating-point operation provided by Java can distinguish\n-\/\/     * between two NaN values of the same type with different bit\n-\/\/     * patterns.  Distinct values of NaN are only distinguishable by\n-\/\/     * use of the {@code Float.floatToRawIntBits} method.\n-\/\/     *\n-\/\/     * <p>In all other cases, let <i>s<\/i>, <i>e<\/i>, and <i>m<\/i> be three\n-\/\/     * values that can be computed from the argument:\n-\/\/     *\n-\/\/     * {@snippet lang=\"java\" :\n-\/\/     * int s = ((bits >> 31) == 0) ? 1 : -1;\n-\/\/     * int e = ((bits >> 23) & 0xff);\n-\/\/     * int m = (e == 0) ?\n-\/\/     *                 (bits & 0x7fffff) << 1 :\n-\/\/     *                 (bits & 0x7fffff) | 0x800000;\n-\/\/     * }\n-\/\/     *\n-\/\/     * Then the floating-point result equals the value of the mathematical\n-\/\/     * expression <i>s<\/i>&middot;<i>m<\/i>&middot;2<sup><i>e<\/i>-150<\/sup>.\n-\/\/     *\n-\/\/     * <p>Note that this method may not be able to return a\n-\/\/     * {@code float} NaN with exactly same bit pattern as the\n-\/\/     * {@code int} argument.  IEEE 754 distinguishes between two\n-\/\/     * kinds of NaNs, quiet NaNs and <i>signaling NaNs<\/i>.  The\n-\/\/     * differences between the two kinds of NaN are generally not\n-\/\/     * visible in Java.  Arithmetic operations on signaling NaNs turn\n-\/\/     * them into quiet NaNs with a different, but often similar, bit\n-\/\/     * pattern.  However, on some processors merely copying a\n-\/\/     * signaling NaN also performs that conversion.  In particular,\n-\/\/     * copying a signaling NaN to return it to the calling method may\n-\/\/     * perform this conversion.  So {@code intBitsToFloat} may\n-\/\/     * not be able to return a {@code float} with a signaling NaN\n-\/\/     * bit pattern.  Consequently, for some {@code int} values,\n-\/\/     * {@code floatToRawIntBits(intBitsToFloat(start))} may\n-\/\/     * <i>not<\/i> equal {@code start}.  Moreover, which\n-\/\/     * particular bit patterns represent signaling NaNs is platform\n-\/\/     * dependent; although all NaN bit patterns, quiet or signaling,\n-\/\/     * must be in the NaN range identified above.\n-\/\/     *\n-\/\/     * @param   bits   an integer.\n-\/\/     * @return  the {@code float} floating-point value with the same bit\n-\/\/     *          pattern.\n-\/\/     *\/\n-\/\/    \/\/@IntrinsicCandidate\n-\/\/    \/\/public static native float intBitsToFloat(int bits);\n-\/\/\n-\/\/\n-\/\/    public short float16ToRawShortBits() { return value; }\n-\/\/\n-\/\/    \/**\n-\/\/     * Compares two {@code Float} objects numerically.\n-\/\/     *\n-\/\/     * This method imposes a total order on {@code Float} objects\n-\/\/     * with two differences compared to the incomplete order defined by\n-\/\/     * the Java language numerical comparison operators ({@code <, <=,\n-\/\/     * ==, >=, >}) on {@code float} values.\n-\/\/     *\n-\/\/     * <ul><li> A NaN is <em>unordered<\/em> with respect to other\n-\/\/     *          values and unequal to itself under the comparison\n-\/\/     *          operators.  This method chooses to define {@code\n-\/\/     *          Float.NaN} to be equal to itself and greater than all\n-\/\/     *          other {@code double} values (including {@code\n-\/\/     *          Float.POSITIVE_INFINITY}).\n-\/\/     *\n-\/\/     *      <li> Positive zero and negative zero compare equal\n-\/\/     *      numerically, but are distinct and distinguishable values.\n-\/\/     *      This method chooses to define positive zero ({@code +0.0f}),\n-\/\/     *      to be greater than negative zero ({@code -0.0f}).\n-\/\/     * <\/ul>\n-\/\/     *\n-\/\/     * This ensures that the <i>natural ordering<\/i> of {@code Float}\n-\/\/     * objects imposed by this method is <i>consistent with\n-\/\/     * equals<\/i>; see <a href=\"Double.html#equivalenceRelation\">this\n-\/\/     * discussion<\/a> for details of floating-point comparison and\n-\/\/     * ordering.\n-\/\/     *\n-\/\/     *\n-\/\/     * @param   anotherFloat   the {@code Float} to be compared.\n-\/\/     * @return  the value {@code 0} if {@code anotherFloat} is\n-\/\/     *          numerically equal to this {@code Float}; a value\n-\/\/     *          less than {@code 0} if this {@code Float}\n-\/\/     *          is numerically less than {@code anotherFloat};\n-\/\/     *          and a value greater than {@code 0} if this\n-\/\/     *          {@code Float} is numerically greater than\n-\/\/     *          {@code anotherFloat}.\n-\/\/     *\n-\/\/     * @jls 15.20.1 Numerical Comparison Operators {@code <}, {@code <=}, {@code >}, and {@code >=}\n-\/\/     * @since   1.2\n-\/\/     *\/\n-\/\/    public int compareTo(Float16 anotherFloat) {\n-\/\/        return Float16.compare(value, anotherFloat.value);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Compares the two specified {@code float} values. The sign\n-\/\/     * of the integer value returned is the same as that of the\n-\/\/     * integer that would be returned by the call:\n-\/\/     * <pre>\n-\/\/     *    Float.valueOf(f1).compareTo(Float.valueOf(f2))\n-\/\/     * <\/pre>\n-\/\/     *\n-\/\/     * @param   f1        the first {@code float} to compare.\n-\/\/     * @param   f2        the second {@code float} to compare.\n-\/\/     * @return  the value {@code 0} if {@code f1} is\n-\/\/     *          numerically equal to {@code f2}; a value less than\n-\/\/     *          {@code 0} if {@code f1} is numerically less than\n-\/\/     *          {@code f2}; and a value greater than {@code 0}\n-\/\/     *          if {@code f1} is numerically greater than\n-\/\/     *          {@code f2}.\n-\/\/     * @since 1.4\n-\/\/     *\/\n-\/\/    public static int compare(Float16 f1, Float16 f2) {\n-\/\/        return Float.compare(Float.float16ToFloat(f1.float16ToRawShortBits()), Float.float16ToFloat(f2.float16ToRawShortBits()));\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Adds two {@code float} values together as per the + operator.\n-\/\/     *\n-\/\/     * @apiNote This method corresponds to the addition operation\n-\/\/     * defined in IEEE 754.\n-\/\/     *\n-\/\/     * @param a the first operand\n-\/\/     * @param b the second operand\n-\/\/     * @return the sum of {@code a} and {@code b}\n-\/\/     * @jls 4.2.4 Floating-Point Operations\n-\/\/     * @see java.util.function.BinaryOperator\n-\/\/     * @since 1.8\n-\/\/     *\/\n-\/\/    public static Float16 sum(Float16 a, Float16 b) {\n-\/\/        return Float.floatToFloat16(Float.float16ToFloat(a.float16ToRawShortBits()) + Float.float16ToFloat(b.float16ToRawShortBits()));\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns the greater of two {@code float} values\n-\/\/     * as if by calling {@link Math#max(float, float) Math.max}.\n-\/\/     *\n-\/\/     * @apiNote\n-\/\/     * This method corresponds to the maximum operation defined in\n-\/\/     * IEEE 754.\n-\/\/     *\n-\/\/     * @param a the first operand\n-\/\/     * @param b the second operand\n-\/\/     * @return the greater of {@code a} and {@code b}\n-\/\/     * @see java.util.function.BinaryOperator\n-\/\/     * @since 1.8\n-\/\/     *\/\n-\/\/    public static Float16 max(Float16 a, Float16 b) {\n-\/\/        return Float.float16ToFloat(Math.max(Float.float16ToFloat(a.float16ToRawShortBits()), Float.float16ToFloat(b.float16ToRawShortBits())));\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns the smaller of two {@code float} values\n-\/\/     * as if by calling {@link Math#min(float, float) Math.min}.\n-\/\/     *\n-\/\/     * @apiNote\n-\/\/     * This method corresponds to the minimum operation defined in\n-\/\/     * IEEE 754.\n-\/\/     *\n-\/\/     * @param a the first operand\n-\/\/     * @param b the second operand\n-\/\/     * @return the smaller of {@code a} and {@code b}\n-\/\/     * @see java.util.function.BinaryOperator\n-\/\/     * @since 1.8\n-\/\/     *\/\n-\/\/    public static Float16 min(Float16 a, Float16 b) {\n-\/\/        return Float.float16ToFloat(Math.min(Float.float16ToFloat(a.float16ToRawShortBits()), Float.float16ToFloat(b.float16ToRawShortBits)));\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Returns an {@link Optional} containing the nominal descriptor for this\n-\/\/     * instance, which is the instance itself.\n-\/\/     *\n-\/\/     * @return an {@link Optional} describing the {@linkplain Float} instance\n-\/\/     * @since 12\n-\/\/     *\/\n-\/\/    @Override\n-\/\/    public Optional<Float16> describeConstable() {\n-\/\/        return Optional.of(this);\n-\/\/    }\n-\/\/\n-\/\/    \/**\n-\/\/     * Resolves this instance as a {@link ConstantDesc}, the result of which is\n-\/\/     * the instance itself.\n-\/\/     *\n-\/\/     * @param lookup ignored\n-\/\/     * @return the {@linkplain Float} instance\n-\/\/     * @since 12\n-\/\/     *\/\n-\/\/    @Override\n-\/\/    public Float resolveConstantDesc(MethodHandles.Lookup lookup) {\n-\/\/        return this;\n-\/\/    }\n-\/\/\n-\/\/    \/** use serialVersionUID from JDK 1.0.2 for interoperability *\/\n-\/\/    @java.io.Serial\n-\/\/    private static final long serialVersionUID = -2671257302660747028L;\n-\/\/}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float16.java","additions":17,"deletions":1069,"binary":false,"changes":1086,"status":"modified"}]}