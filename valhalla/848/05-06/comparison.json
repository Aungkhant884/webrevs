{"files":[{"patch":"@@ -7330,0 +7330,8 @@\n+void Assembler::evaddph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx512_fp16(), \"requires AVX512-FP16\");\n+  InstructionAttr attributes(vector_len, false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x58, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2402,0 +2402,1 @@\n+  void evaddph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -952,0 +952,1 @@\n+    _features &= ~CPU_AVX512_FP16;\n@@ -985,0 +986,1 @@\n+      _features &= ~CPU_AVX512_FP16;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1732,0 +1732,5 @@\n+    case Op_AddVHF:\n+      if (!VM_Version::supports_avx512_fp16()) {\n+        return false;\n+      }\n+      break;\n@@ -10189,0 +10194,11 @@\n+\n+instruct vaddVHF (vec dst, vec src1, vec src2)\n+%{\n+  match(Set dst (AddVHF src1 src2));\n+  format %{ \"vaddph $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    __ evaddph($dst$$XMMRegister, $src1$$XMMRegister, $src2$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -4204,1 +4204,1 @@\n-    \"AddVB\",\"AddVS\",\"AddVI\",\"AddVL\",\"AddVF\",\"AddVD\",\n+    \"AddVB\",\"AddVHF\", \"AddVS\",\"AddVI\",\"AddVL\",\"AddVF\",\"AddVD\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -545,0 +545,3 @@\n+  if (vmSymbols::java_lang_Float16() == name()) {\n+    EnablePrimitiveClasses = true;\n+  }\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -377,0 +377,1 @@\n+macro(AddVHF)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2906,0 +2906,7 @@\n+      } else if (opc == Op_ReinterpretS2HF || opc == Op_ReinterpretHF2S) {\n+        assert(n->req() == 2, \"only one input expected\");\n+        BasicType bt = velt_basic_type(n);\n+        const TypeVect* vt = TypeVect::make(bt, vlen);\n+        Node* in = vector_opd(p, 1);\n+        vn = VectorReinterpretNode::make(in, vt, vt);\n+        vlen_in_bytes = vn->as_Vector()->length_in_bytes();\n@@ -3761,0 +3768,3 @@\n+  if (VectorNode::is_float16_node(n->Opcode())) {\n+    return TypeInt::SHORT;\n+  }\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  case Op_AddHF: return (bt == T_SHORT ? Op_AddVHF : 0);\n@@ -270,0 +271,3 @@\n+  case Op_ReinterpretS2HF:\n+  case Op_ReinterpretHF2S:\n+    return Op_VectorReinterpret;\n@@ -608,0 +612,10 @@\n+bool VectorNode::is_float16_node(int opc) {\n+  switch (opc) {\n+  case Op_AddHF:\n+  case Op_ReinterpretS2HF:\n+     return true;\n+  default:\n+     return false;\n+  }\n+}\n+\n@@ -677,1 +691,1 @@\n-  case Op_AddI: case Op_AddL: case Op_AddF: case Op_AddD:\n+  case Op_AddI: case Op_AddHF: case Op_AddL: case Op_AddF: case Op_AddD:\n@@ -735,0 +749,1 @@\n+  case Op_AddVHF: return new AddVHFNode(n1, n2, vt);\n@@ -1736,0 +1751,4 @@\n+VectorNode* VectorReinterpretNode::make(Node* n, const TypeVect* dst_vt, const TypeVect* src_vt) {\n+  return new VectorReinterpretNode(n, dst_vt, src_vt);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -109,0 +109,2 @@\n+  static bool is_float16_node(int opc);\n+\n@@ -189,0 +191,8 @@\n+\/\/------------------------------AddVHFNode--------------------------------------\n+\/\/ Vector add float\n+class AddVHFNode : public VectorNode {\n+public:\n+  AddVHFNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1, in2, vt) {}\n+  virtual int Opcode() const;\n+};\n+\n@@ -1547,0 +1557,2 @@\n+\n+  static VectorNode* make(Node* n, const TypeVect* dst_vt, const TypeVect* src_vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1408,0 +1408,1 @@\n+  declare_c2_type(AddHFNode, AddNode)                                     \\\n@@ -1426,0 +1427,2 @@\n+  declare_c2_type(ReinterpretS2HFNode, Node)                              \\\n+  declare_c2_type(ReinterpretHF2SNode, Node)                              \\\n@@ -1683,0 +1686,1 @@\n+  declare_c2_type(AddVHFNode, VectorNode)                                 \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,0 +179,5 @@\n+    public static final String ADD_VHF = PREFIX + \"ADD_VHF\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(ADD_VHF, \"AddVHF\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test vectorization of Float16.sum operation.\n+* @requires vm.compiler2.enabled\n+* @library \/test\/lib \/\n+* @compile -XDenablePrimitiveClasses TestFloat16VectorSum.java\n+* @run driver compiler.vectorization.TestFloat16VectorSum\n+*\/\n+\n+package compiler.vectorization;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+\n+public class TestFloat16VectorSum {\n+    private Float16[] input;\n+    private Float16[] output;\n+    private static final int LEN = 2048;\n+    private Random rng;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestFloat16VectorSum.class);\n+    }\n+\n+    public TestFloat16VectorSum() {\n+        input  = new Float16[LEN];\n+        output = new Float16[LEN];\n+        rng = new Random(42);\n+        for (int i = 0; i < LEN; ++i) {\n+            input[i] = Float16.valueOf(Float.floatToFloat16(rng.nextFloat()));\n+        }\n+    }\n+\n+    @Test\n+    @Warmup(10000)\n+    @IR(applyIfCPUFeature = {\"avx512_fp16\" , \"true\"}, counts = {IRNode.ADD_VHF, \" >= 1\"})\n+    public void vectorSumFloat16() {\n+        for (int i = 0; i < LEN; ++i) {\n+            output[i] = Float16.sum(input[i], input[i]);\n+        }\n+        checkResult();\n+    }\n+\n+    public void checkResult() {\n+        for (int i = 0; i < LEN; ++i) {\n+            Float16 expected = Float16.sum(input[i], input[i]);\n+            if (output[i].float16ToRawShortBits() != expected.float16ToRawShortBits()) {\n+                throw new RuntimeException(\"Invalid result: output[\" + i + \"] = \" + output[i].float16ToRawShortBits() + \" != \" + expected.float16ToRawShortBits());\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloat16VectorSum.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}