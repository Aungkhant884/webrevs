{"files":[{"patch":"@@ -200,3 +200,3 @@\n-  do_intrinsic(_add_float16,              java_lang_Float16,      add_name,           floa16_float16_signature,  F_R)   \\\n-   do_name(add_name,    \"add\")                                                                                          \\\n-   do_signature(floa16_float16_signature, \"(Qjava\/lang\/Float16;)Qjava\/lang\/Float16;\")                                   \\\n+  do_intrinsic(_sum_float16,              java_lang_Float16,      sum_name,           floa16_float16_signature,  F_S)   \\\n+   do_name(sum_name, \"sum\")                                                                                             \\\n+   do_signature(floa16_float16_signature, \"(Qjava\/lang\/Float16;Qjava\/lang\/Float16;)Qjava\/lang\/Float16;\")                \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-\/\/ Add 2 floats\n+\/\/ Add 2 half-precision floats\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -752,1 +752,1 @@\n-  case vmIntrinsics::_add_float16:\n+  case vmIntrinsics::_sum_float16:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  ReinterpretS2HFNode( Node *in1 ) : Node(0,in1) {}\n+  ReinterpretS2HFNode(Node* in1) : Node(0, in1) {}\n@@ -180,1 +180,1 @@\n-  virtual const Type *bottom_type() const { return Type::FLOAT; }\n+  virtual const Type* bottom_type() const { return Type::FLOAT; }\n@@ -191,1 +191,1 @@\n-  virtual const Type *bottom_type() const { return TypeInt::SHORT; }\n+  virtual const Type* bottom_type() const { return TypeInt::SHORT; }\n","filename":"src\/hotspot\/share\/opto\/convertnode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -547,1 +547,1 @@\n-  case vmIntrinsics::_add_float16:              return inline_fp16_operations(intrinsic_id());\n+  case vmIntrinsics::_sum_float16:              return inline_fp16_operations(intrinsic_id());\n@@ -4900,1 +4900,1 @@\n-  Node* result = NULL;\n+  Node* result = nullptr;\n@@ -4909,1 +4909,1 @@\n-  case vmIntrinsics::_add_float16:   result = _gvn.transform(new AddHFNode(fld1, fld2)); break;\n+  case vmIntrinsics::_sum_float16:   result = _gvn.transform(new AddHFNode(fld1, fld2)); break;\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,25 +57,2 @@\n-public primitive class Float16 {\n-   private final short value;\n-\n-  \/**\n-   * Returns a {@code Float16} instance wrapping IEEE 754 binary16\n-   * encoded {@code short} value.\n-   *\n-   * @param  value a short value.\n-   * @since  20\n-   *\/\n-   public Float16 (short value ) {\n-       this.value = value;\n-   }\n-\n-  \/**\n-   * Returns a {@code Float16} instance wrapping IEEE 754 binary16\n-   * encoded {@code short} value.\n-   *\n-   * @param  value a short value.\n-   * @return a {@code Float16} instance representing {@code value}.\n-   * @since  20\n-   *\/\n-   public static Float16 valueOf(short value) {\n-      return new Float16(value);\n-   }\n+public primitive class Float16 extends Number {\n+    private final short value;\n@@ -84,4 +61,2 @@\n-    * Adds two {@code Float16} values together as per the + operator semantics.\n-    *\n-    * @apiNote This method corresponds to the addition operation\n-    * defined in IEEE 754.\n+    * Returns a {@code Float16} instance wrapping IEEE 754 binary16\n+    * encoded {@code short} value.\n@@ -89,3 +64,2 @@\n-    * @param value the first operand\n-    * @return sum of receiver and {@code value)}.\n-    * @since 20\n+    * @param  value a short value.\n+    * @since  20\n@@ -93,4 +67,3 @@\n-   @IntrinsicCandidate\n-   public Float16 add(Float16 value) {\n-      return Float16.valueOf(Float.floatToFloat16(Float.float16ToFloat(this.value) + Float.float16ToFloat(value.value)));\n-   }\n+    private Float16 (short value ) {\n+        this.value = value;\n+    }\n@@ -99,3 +72,6 @@\n-    * Return raw short value.\n-    * @return raw short value {@code value)}.\n-    * @since 20\n+    * Returns a {@code Float16} instance wrapping IEEE 754 binary16\n+    * encoded {@code short} value.\n+    *\n+    * @param  value a short value.\n+    * @return a {@code Float16} instance representing {@code value}.\n+    * @since  20\n@@ -103,1 +79,101 @@\n-   public short float16ToRawShortBits() { return value; }\n+    public static Float16 valueOf(short value) {\n+       return new Float16(value);\n+    }\n+\n+    \/**\n+     * Returns the value of this {@code Float16} as a {@code byte} after\n+     * a narrowing primitive conversion.\n+     *\n+     * @return  the binary16 encoded {@code short} value represented by this object\n+     *          converted to type {@code byte}\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     *\/\n+    public byte byteValue() {\n+        return (byte)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns the value of this {@code Float16} as a {@code short}\n+     * after a narrowing primitive conversion.\n+     *\n+     * @return  the binary16 encoded {@code short} value represented by this object\n+     *          converted to type {@code short}\n+     * @jls 5.1.3 Narrowing Primitive Conversion\n+     * @since 1.1\n+     *\/\n+    public short shortValue() {\n+        return (short)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns the value of this {@code Float16} as an {@code int} after\n+     * a widening primitive conversion.\n+     *\n+     * @return  the binary16 encoded {@code short} value represented by this object\n+     *          converted to type {@code int}\n+     * @jls 5.1.3 Widening Primitive Conversion\n+     *\/\n+    public int intValue() {\n+        return (int)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns value of this {@code Float16} as a {@code long} after a\n+     * widening conversion.\n+     *\n+     * @return  the binary16 encoded {@code short} value represented by this object\n+     *          converted to type {@code long}\n+     * @jls 5.1.3 Widening Primitive Conversion\n+     *\/\n+    public long longValue() {\n+        return (long)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns the {@code float} value of this {@code Float16} object.\n+     *\n+     * @return the binary16 encoded {@code short} value represented by this object\n+     *         converted to type {@code float}\n+     *\/\n+    public float floatValue() {\n+        return Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Returns the value of this {@code Float16} as a {@code double}\n+     * after a widening primitive conversion.\n+     *\n+     * @apiNote\n+     * This method corresponds to the convertFormat operation defined\n+     * in IEEE 754.\n+     *\n+     * @return the binary16 encoded {@code short} value represented by this\n+     *         object converted to type {@code double}\n+     * @jls 5.1.2 Widening Primitive Conversion\n+     *\/\n+    public double doubleValue() {\n+        return (double)Float.float16ToFloat(value);\n+    }\n+\n+    \/**\n+     * Adds two {@code Float16} values together as per the + operator semantics.\n+     *\n+     * @apiNote This method corresponds to the addition operation\n+     * defined in IEEE 754.\n+     *\n+     * @param a the first operand\n+     * @param b the second operand\n+     * @return the sum of {@code a} and {@code b}\n+     * @since 20\n+     *\/\n+    @IntrinsicCandidate\n+    public static Float16 sum(Float16 a, Float16 b) {\n+       return Float16.valueOf(Float.floatToFloat16(Float.float16ToFloat(a.float16ToRawShortBits()) + Float.float16ToFloat(b.float16ToRawShortBits())));\n+    }\n+\n+    \/**\n+     * Return raw short value.\n+     * @return raw binary16 encoded {@code short} value represented by this object.\n+     * @since 20\n+     *\/\n+    public short float16ToRawShortBits() { return value; }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float16.java","additions":116,"deletions":40,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        Float16 res = new Float16((short)0);\n+        Float16 res = Float16.valueOf((short)0);\n@@ -62,1 +62,1 @@\n-            res = res.add(Float16.valueOf(src[i]));\n+            res = Float16.sum(res, Float16.valueOf(src[i]));\n@@ -75,1 +75,1 @@\n-        res = hf0.add(hf1).add(hf2).add(hf3).add(hf4).float16ToRawShortBits();\n+        res = Float16.sum(Float16.sum(Float16.sum(Float16.sum(hf0, hf1), hf2), hf3), hf4).float16ToRawShortBits();\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/TestFP16ScalarAdd.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        return hf0.add(hf1).add(hf2).add(hf3).add(hf4).float16ToRawShortBits();\n+        return Float16.sum(Float16.sum(Float16.sum(Float16.sum(hf0, hf1), hf2), hf3), hf4).float16ToRawShortBits();\n@@ -78,1 +78,1 @@\n-            res = res.add(Float16.valueOf(arr[i]));\n+            res = Float16.sum(res, Float16.valueOf(arr[i]));\n","filename":"test\/jdk\/java\/lang\/Float16\/FP16ReductionOperations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-        Float16 obj1 = new Float16((short)val1);\n-        Float16 obj2 = new Float16((short)val2);\n+        Float16 obj1 = Float16.valueOf(val1);\n+        Float16 obj2 = Float16.valueOf(val2);\n@@ -42,1 +42,1 @@\n-            case '+' : return obj1.add(obj2).float16ToRawShortBits();\n+            case '+' : return Float16.sum(obj1, obj2).float16ToRawShortBits();\n","filename":"test\/jdk\/java\/lang\/Float16\/FP16ScalarOperations.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}