{"files":[{"patch":"@@ -4707,0 +4707,7 @@\n+bool ClassFileParser::is_jdk_internal_class_sig(const char* sig) const {\n+  if (strstr(sig, vmSymbols::java_lang_Float16_signature()->as_C_string())) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n@@ -5169,1 +5176,1 @@\n-      if ( (_major_version < 51 \/* CONSTANT_CLASS_DESCRIPTORS *\/ ) || (!EnablePrimitiveClasses)) {\n+      if ( (_major_version < 51 \/* CONSTANT_CLASS_DESCRIPTORS *\/ ) || (!EnablePrimitiveClasses && !is_jdk_internal_class_sig(signature))) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -222,0 +222,2 @@\n+  bool is_jdk_internal_class_sig(const char* sig) const;\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+  template(java_lang_Float16_signature,               \"Qjava\/lang\/Float16;\")                      \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -870,0 +870,8 @@\n+Node* ReinterpretS2HFNode::Identity(PhaseGVN* phase) {\n+  if (in(1)->Opcode() == Op_ReinterpretHF2S) {\n+     assert(in(1)->in(1)->bottom_type()->isa_float(), \"\");\n+     return in(1)->in(1);\n+  }\n+  return this;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -182,0 +182,1 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/convertnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+\/\/ Currently Float16 is a primitive class but in future will be aligned with\n+\/\/ Enhanced Primitive Boxes described by JEP-402 (https:\/\/openjdk.org\/jeps\/402)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float16.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @bug     8308363\n+* @summary Validate compiler IR for FP16 scalar operations.\n+* @requires vm.compiler2.enabled\n+* @library \/test\/lib \/\n+* @compile -XDenablePrimitiveClasses TestFP16ScalarAdd.java\n+* @run driver compiler.vectorization.TestFP16ScalarAdd\n+*\/\n+\n+package compiler.vectorization;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+public class TestFP16ScalarAdd {\n+    private static final int count = 1024;\n+\n+    private short[] src;\n+    private short[] dst;\n+    private short res;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestFP16ScalarAdd.class);\n+    }\n+\n+    public TestFP16ScalarAdd() {\n+        src = new short[count];\n+        dst = new short[count];\n+        for (int i = 0; i < count; i++) {\n+            src[i] = Float.floatToFloat16(i);\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeature = {\"avx512_fp16\", \"true\"}, counts = {IRNode.ADD_HF, \"> 0\", IRNode.REINTERPRET_S2HF, \"> 0\", IRNode.REINTERPRET_HF2S, \"> 0\"})\n+    public void test1() {\n+        Float16 res = new Float16((short)0);\n+        for (int i = 0; i < count; i++) {\n+            res = res.add(Float16.valueOf(src[i]));\n+            dst[i] = res.float16ToRawShortBits();\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeature = {\"avx512_fp16\", \"true\"}, failOn = {IRNode.ADD_HF, IRNode.REINTERPRET_S2HF, IRNode.REINTERPRET_HF2S})\n+    public void test2() {\n+        Float16 hf0 = Float16.valueOf((short)0);\n+        Float16 hf1 = Float16.valueOf((short)15360);\n+        Float16 hf2 = Float16.valueOf((short)16384);\n+        Float16 hf3 = Float16.valueOf((short)16896);\n+        Float16 hf4 = Float16.valueOf((short)17408);\n+        res = hf0.add(hf1).add(hf2).add(hf3).add(hf4).float16ToRawShortBits();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/TestFP16ScalarAdd.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -154,0 +154,5 @@\n+    public static final String ADD_HF = PREFIX + \"ADD_HF\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(ADD_HF, \"AddHF\");\n+    }\n+\n@@ -896,0 +901,10 @@\n+    public static final String REINTERPRET_S2HF = PREFIX + \"REINTERPRET_S2HF\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(REINTERPRET_S2HF, \"ReinterpretS2HF\");\n+    }\n+\n+    public static final String REINTERPRET_HF2S = PREFIX + \"REINTERPRET_HF2S\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(REINTERPRET_HF2S, \"ReinterpretHF2S\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+        \"avx512_fp16\",\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8308363\n+ * @summary Test FP16 reduction operations.\n+ * @compile -XDenablePrimitiveClasses FP16ReductionOperations.java\n+ * @run main\/othervm -XX:+EnablePrimitiveClasses -XX:-TieredCompilation -Xbatch FP16ReductionOperations\n+ *\/\n+\n+import java.util.Random;\n+\n+public class FP16ReductionOperations {\n+\n+    public static Random r = new Random(1024);\n+\n+    public static short test_reduction_add_constants() {\n+        Float16 hf0 = Float16.valueOf((short)0);\n+        Float16 hf1 = Float16.valueOf((short)15360);\n+        Float16 hf2 = Float16.valueOf((short)16384);\n+        Float16 hf3 = Float16.valueOf((short)16896);\n+        Float16 hf4 = Float16.valueOf((short)17408);\n+        return hf0.add(hf1).add(hf2).add(hf3).add(hf4).float16ToRawShortBits();\n+    }\n+\n+    public static short expected_reduction_add_constants() {\n+        Float16 hf0 = Float16.valueOf((short)0);\n+        Float16 hf1 = Float16.valueOf((short)15360);\n+        Float16 hf2 = Float16.valueOf((short)16384);\n+        Float16 hf3 = Float16.valueOf((short)16896);\n+        Float16 hf4 = Float16.valueOf((short)17408);\n+        return Float.floatToFloat16(Float.float16ToFloat(hf0.float16ToRawShortBits()) +\n+                                    Float.float16ToFloat(hf1.float16ToRawShortBits()) +\n+                                    Float.float16ToFloat(hf2.float16ToRawShortBits()) +\n+                                    Float.float16ToFloat(hf3.float16ToRawShortBits()) +\n+                                    Float.float16ToFloat(hf4.float16ToRawShortBits()));\n+    }\n+\n+    public static void test_reduction_constants(char oper) {\n+        short actual = 0;\n+        short expected = 0;\n+        switch(oper) {\n+            case '+' ->  {\n+                             actual = test_reduction_add_constants();\n+                             expected = expected_reduction_add_constants();\n+                         }\n+            default  ->  throw new AssertionError(\"Unsupported Operation.\");\n+        }\n+        if (actual != expected) {\n+            throw new AssertionError(\"Result mismatch!, expected = \" + expected + \" actual = \" + actual);\n+        }\n+    }\n+\n+    public static short test_reduction_add(short [] arr) {\n+        Float16 res = Float16.valueOf((short)0);\n+        for (int i = 0; i < arr.length; i++) {\n+            res = res.add(Float16.valueOf(arr[i]));\n+        }\n+        return res.float16ToRawShortBits();\n+    }\n+\n+    public static short expected_reduction_add(short [] arr) {\n+        short res = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float.floatToFloat16(Float.float16ToFloat(res) + Float.float16ToFloat(arr[i]));\n+        }\n+        return res;\n+    }\n+\n+    public static void test_reduction(char oper, short [] arr) {\n+        short actual = 0;\n+        short expected = 0;\n+        switch(oper) {\n+            case '+' ->  {\n+                             actual = test_reduction_add(arr);\n+                             expected = expected_reduction_add(arr);\n+                         }\n+            default  ->  throw new AssertionError(\"Unsupported Operation.\");\n+        }\n+        if (actual != expected) {\n+            throw new AssertionError(\"Result mismatch!, expected = \" + expected + \" actual = \" + actual);\n+        }\n+    }\n+\n+    public static short [] get_fp16_array(int size) {\n+        short [] arr = new short[size];\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = Float.floatToFloat16(r.nextFloat());\n+        }\n+        return arr;\n+    }\n+\n+    public static void main(String [] args) {\n+        int res = 0;\n+        short [] input = get_fp16_array(1024);\n+        short [] special_values = {\n+              32256,          \/\/ NAN\n+              31744,          \/\/ +Inf\n+              (short)-1024,   \/\/ -Inf\n+              0,              \/\/ +0.0\n+              (short)-32768,  \/\/ -0.0\n+        };\n+        for (int i = 0;  i < 1000; i++) {\n+            test_reduction('+', input);\n+            test_reduction('+', special_values);\n+            test_reduction_constants('+');\n+        }\n+        System.out.println(\"PASS\");\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Float16\/FP16ReductionOperations.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -36,1 +36,1 @@\n-   public static Random r = new Random(1024);\n+    public static Random r = new Random(1024);\n","filename":"test\/jdk\/java\/lang\/Float16\/FP16ScalarOperations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}