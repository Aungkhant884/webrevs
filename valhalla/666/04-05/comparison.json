{"files":[{"patch":"@@ -1124,1 +1124,1 @@\n-            } else if (isSubtype(t, s, capture, refValSubtypingRelation)) {\n+            } else if (isSubtype(t, s, capture, SubtypingRelationKind.REF_VAL_ALLOWED)) {\n@@ -1178,1 +1178,1 @@\n-        return isSubtype(t, s, capture, isSubtypeRelation);\n+        return isSubtype(t, s, capture, SubtypingRelationKind.STRICT);\n@@ -1181,1 +1181,1 @@\n-    public boolean isSubtype(Type t, Type s, boolean capture, SubtypingRelation typeRelations) {\n+    public boolean isSubtype(Type t, Type s, boolean capture, SubtypingRelationKind subtypingKind) {\n@@ -1184,1 +1184,1 @@\n-        if (typeRelations.allowRefValSubtyping() && t.hasTag(TYPEVAR) && s.hasTag(TYPEVAR) && t.tsym == s.tsym) {\n+        if (subtypingKind == SubtypingRelationKind.REF_VAL_ALLOWED && t.hasTag(TYPEVAR) && s.hasTag(TYPEVAR) && t.tsym == s.tsym) {\n@@ -1195,1 +1195,1 @@\n-                if (!isSubtype(t, s2, capture, typeRelations))\n+                if (!isSubtype(t, s2, capture, subtypingKind))\n@@ -1208,1 +1208,1 @@\n-                return isSubtype(capture ? capture(t) : t, lower, false, typeRelations);\n+                return isSubtype(capture ? capture(t) : t, lower, false, subtypingKind);\n@@ -1212,1 +1212,1 @@\n-        return typeRelations.visit(t, s);\n+        return isSubtypeRelation.visit(t, s, subtypingKind);\n@@ -1215,4 +1215,16 @@\n-        SubtypingRelation isSubtypeRelation = new SubtypingRelation();\n-        class SubtypingRelation extends TypeRelation {\n-            public boolean allowRefValSubtyping() {\n-                return false;\n+        enum SubtypingRelationKind {\n+            STRICT,\n+            REF_VAL_ALLOWED\n+        }\n+\n+        public abstract static class ParameterizedTypeRelation<P> extends TypeRelation {\n+            P param;\n+\n+            public final Boolean visit(Type t, Type s, P param) {\n+                P prevParam = this.param;\n+                try {\n+                    this.param = param;\n+                    return visit(t, s);\n+                } finally {\n+                    this.param = prevParam;\n+                }\n@@ -1220,0 +1232,1 @@\n+        }\n@@ -1221,2 +1234,4 @@\n-            TypeRelation containmentRelation() {\n-                return containsType;\n+        SubtypingRelation isSubtypeRelation = new SubtypingRelation();\n+        class SubtypingRelation extends ParameterizedTypeRelation<SubtypingRelationKind> {\n+            public boolean allowRefValSubtyping() {\n+                return param == SubtypingRelationKind.REF_VAL_ALLOWED;\n@@ -1238,1 +1253,1 @@\n-                     return isSubtype(t.getUpperBound(), s, false, this);\n+                     return isSubtype(t.getUpperBound(), s, false, param);\n@@ -1240,0 +1255,3 @@\n+                     if (allowUniversalTVars && allowRefValSubtyping() && s.hasTag(TYPEVAR) && ((TypeVar)s).isValueProjection()) {\n+                         warnStack.head.warn(LintCategory.UNIVERSAL);\n+                     }\n@@ -1258,1 +1276,1 @@\n-                                            s.getTypeArguments(), containmentRelation());\n+                                            s.getTypeArguments(), param);\n@@ -1264,1 +1282,1 @@\n-                                        rewriteSupers(s).getTypeArguments(), containmentRelation());\n+                                        rewriteSupers(s).getTypeArguments(), param);\n@@ -1365,21 +1383,0 @@\n-        RefValSubtypingRelation refValSubtypingRelation = new RefValSubtypingRelation();\n-        class RefValSubtypingRelation extends SubtypingRelation {\n-            public boolean allowRefValSubtyping() {\n-                return true;\n-            }\n-\n-            TypeRelation containmentRelation() {\n-                return refValContainsType;\n-            }\n-\n-            @Override\n-            public Boolean visitType(Type t, Type s) {\n-                if (t.getTag() == BOT) {\n-                    if (allowUniversalTVars && s.hasTag(TYPEVAR) && ((TypeVar)s).isValueProjection()) {\n-                        warnStack.head.warn(LintCategory.UNIVERSAL);\n-                    }\n-                }\n-                return super.visitType(t, s);\n-            }\n-        }\n-\n@@ -1492,1 +1489,1 @@\n-        return isSameType(t, s, containsType);\n+        return isSameType(t, s, SubtypingRelationKind.STRICT);\n@@ -1495,3 +1492,2 @@\n-    public boolean isSameType(Type t, Type s, ContainsType containmentRelation) {\n-        isSameTypeVisitor.setContainmentRel(containmentRelation);\n-        return isSameTypeVisitor.visit(t, s);\n+    public boolean isSameType(Type t, Type s, SubtypingRelationKind subtypingKind) {\n+        return isSameTypeVisitor.visit(t, s, subtypingKind);\n@@ -1500,1 +1496,0 @@\n-\n@@ -1506,7 +1501,1 @@\n-        class SameTypeVisitor extends TypeRelation {\n-            ContainsType containmentRel = containsType;\n-\n-            public void setContainmentRel(ContainsType containmentRel) {\n-                this.containmentRel = containmentRel;\n-            }\n-\n+        class SameTypeVisitor extends ParameterizedTypeRelation<SubtypingRelationKind> {\n@@ -1588,1 +1577,1 @@\n-                    && containsTypeEquivalent(t.getTypeArguments(), s.getTypeArguments(), containmentRel);\n+                    && containsTypeEquivalent(t.getTypeArguments(), s.getTypeArguments(), param);\n@@ -1691,1 +1680,1 @@\n-        return containsType(ts, ss, containsType);\n+        return containsType(ts, ss, SubtypingRelationKind.STRICT);\n@@ -1694,1 +1683,1 @@\n-    boolean containsType(List<Type> ts, List<Type> ss, TypeRelation containmentRelation) {\n+    boolean containsType(List<Type> ts, List<Type> ss, SubtypingRelationKind subtypingKind) {\n@@ -1696,1 +1685,1 @@\n-                && containsType(ts.head, ss.head, containmentRelation)) {\n+                && containsType(ts.head, ss.head, subtypingKind)) {\n@@ -1729,1 +1718,1 @@\n-        return containsType(t, s, containsType);\n+        return containsType(t, s, SubtypingRelationKind.STRICT);\n@@ -1732,2 +1721,2 @@\n-    public boolean containsType(Type t, Type s, TypeRelation containmentRelation) {\n-        return containmentRelation.visit(t, s);\n+    public boolean containsType(Type t, Type s, SubtypingRelationKind subtypingKind) {\n+        return containsType.visit(t, s, subtypingKind);\n@@ -1737,1 +1726,1 @@\n-        class ContainsType extends TypeRelation {\n+        class ContainsType extends ParameterizedTypeRelation<SubtypingRelationKind> {\n@@ -1743,1 +1732,9 @@\n-                    return isSameType(t, s);\n+                    boolean result = isSameType(t, s, param);\n+                    \/\/ the order in the condition below matters\n+                    if (param == SubtypingRelationKind.REF_VAL_ALLOWED &&  warnStack.head != null && allowUniversalTVars && !result) {\n+                        result = isSameType(t.referenceProjectionOrSelf(), s.referenceProjectionOrSelf());\n+                        if (result) {\n+                            warnStack.head.warn(LintCategory.UNCHECKED);\n+                        }\n+                    }\n+                    return result;\n@@ -1779,1 +1776,1 @@\n-                                (t1, s1, w) -> isSubtype(t1, s1, false, refValSubtypingRelation))) &&\n+                                (t1, s1, w) -> isSubtype(t1, s1, false, SubtypingRelationKind.REF_VAL_ALLOWED))) &&\n@@ -1781,1 +1778,1 @@\n-                                (t1, s1, w) -> isSubtype(t1, s1, false, refValSubtypingRelation))));\n+                                (t1, s1, w) -> isSubtype(t1, s1, false, SubtypingRelationKind.REF_VAL_ALLOWED))));\n@@ -1794,25 +1791,0 @@\n-            @Override\n-            public Boolean visitErrorType(ErrorType t, Type s) {\n-                return true;\n-            }\n-        }\n-\n-        private RefValContainsType refValContainsType = new RefValContainsType();\n-        class RefValContainsType extends ContainsType {\n-\n-            public Boolean visitType(Type t, Type s) {\n-                if (s.isPartial())\n-                    return containedBy(s, t);\n-                else {\n-                    boolean result = isSameType(t, s, this);\n-                    \/\/ the order in the condition below matters\n-                    if (warnStack.head != null && allowUniversalTVars && !result) {\n-                        result = isSameType(t.referenceProjectionOrSelf(), s.referenceProjectionOrSelf());\n-                        if (result) {\n-                            warnStack.head.warn(LintCategory.UNCHECKED);\n-                        }\n-                    }\n-                    return result;\n-                }\n-            }\n-\n@@ -1823,1 +1795,3 @@\n-                    if (allowUniversalTVars && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym) {\n+                    if (allowUniversalTVars\n+                            && param == SubtypingRelationKind.REF_VAL_ALLOWED\n+                            && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym) {\n@@ -1832,0 +1806,5 @@\n+\n+            @Override\n+            public Boolean visitErrorType(ErrorType t, Type s) {\n+                return true;\n+            }\n@@ -1848,1 +1827,1 @@\n-        return containsTypeEquivalent(ts, ss, containsType);\n+        return containsTypeEquivalent(ts, ss, SubtypingRelationKind.STRICT);\n@@ -1851,1 +1830,1 @@\n-    public boolean containsTypeEquivalent(List<Type> ts, List<Type> ss, TypeRelation containmentRelation) {\n+    public boolean containsTypeEquivalent(List<Type> ts, List<Type> ss, SubtypingRelationKind subtypingKind) {\n@@ -1853,1 +1832,1 @@\n-                && containsTypeEquivalent(ts.head, ss.head, containmentRelation)) {\n+                && containsTypeEquivalent(ts.head, ss.head, subtypingKind)) {\n@@ -3656,1 +3635,1 @@\n-                    && containsTypeEquivalent(t.argtypes, s.getParameterTypes(), refValContainsType);\n+                    && containsTypeEquivalent(t.argtypes, s.getParameterTypes(), SubtypingRelationKind.REF_VAL_ALLOWED);\n@@ -4951,1 +4930,1 @@\n-        return containsTypeEquivalent(t, s, refValContainsType);\n+        return containsTypeEquivalent(t, s, SubtypingRelationKind.REF_VAL_ALLOWED);\n@@ -4954,1 +4933,1 @@\n-    private boolean containsTypeEquivalent(Type t, Type s, TypeRelation containmentRelation) {\n+    private boolean containsTypeEquivalent(Type t, Type s, SubtypingRelationKind subtypingKind) {\n@@ -4956,1 +4935,1 @@\n-                containsType(t, s, containmentRelation) && containsType(s, t, containmentRelation);\n+                containsType(t, s, subtypingKind) && containsType(s, t, subtypingKind);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":72,"deletions":93,"binary":false,"changes":165,"status":"modified"}]}