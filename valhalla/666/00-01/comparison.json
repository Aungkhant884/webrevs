{"files":[{"patch":"@@ -1181,0 +1181,4 @@\n+            \/\/ warnStack.head is != null if we are checking for an assignment\n+            if (warnStack.head != null && allowUniversalTVars && t.isReferenceProjection() != s.isReferenceProjection()) {\n+                warnStack.head.warn(LintCategory.UNCHECKED);\n+            }\n@@ -1204,1 +1208,2 @@\n-        return isSubtype.visit(capture ? capture(t) : t, s);\n+        t = capture ? capture(t) : t;\n+        return isSubtype.visit(t, s);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -183,0 +183,84 @@\n+                    \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                    \"\"\"\n+                    interface MyFunction<__universal T, __universal R> {\n+                        R apply(T t);\n+                    }\n+                    primitive class Point {}\n+                    class Color {\n+                        static Color gray() { return new Color(); }\n+                    }\n+                    class Test {\n+                        void plot(MyFunction<Point.ref, Color> f) {}\n+                        void m() {\n+                            MyFunction<Point, Color> gradient = p -> Color.gray();\n+                            plot(gradient);\n+                        }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                    \"\"\"\n+                    interface MyFunction<__universal T, __universal R> {\n+                        R apply(T t);\n+                    }\n+                    primitive class Point {}\n+                    class Color {\n+                        static Color gray() { return new Color(); }\n+                    }\n+                    class Test {\n+                        void plot(MyFunction<Point, Color> f) {}\n+                        void m() {\n+                            MyFunction<Point.ref, Color> gradient = p -> Color.gray();\n+                            plot(gradient);\n+                        }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                    \"\"\"\n+                    interface MySupplier<__universal S> {\n+                        S get();\n+                    }\n+                    class Test<__universal T> {\n+                        void m() {\n+                            MySupplier<? extends T.ref> factory = nullFactory();\n+                        }\n+                        MySupplier<? extends T> nullFactory() { return () -> null; }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                    \"\"\"\n+                    interface MySupplier<__universal S> {\n+                        S get();\n+                    }\n+                    class Test<__universal T> {\n+                        void m() {\n+                            MySupplier<? extends T> factory = nullFactory();\n+                        }\n+                        MySupplier<? extends T.ref> nullFactory() { return () -> null; }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                    \"\"\"\n+                    interface MySet<__universal E> {}\n+                    interface MyMap<__universal K, __universal V> {\n+                        interface Entry<__universal K, __universal V> {}\n+                    }\n+                    class Test<__universal T> {\n+                        MySet<MyMap.Entry<String, T.ref>> allEntries() { return null; }\n+                        void m() {\n+                            MySet<MyMap.Entry<String, T>> entries = allEntries();\n+                        }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                    \"\"\"\n+                    interface MySet<__universal E> {}\n+                    interface MyMap<__universal K, __universal V> {\n+                        interface Entry<__universal K, __universal V> {}\n+                    }\n+                    class Test<__universal T> {\n+                        MySet<MyMap.Entry<String, T>> allEntries() { return null; }\n+                        void m() {\n+                            MySet<MyMap.Entry<String, T.ref>> entries = allEntries();\n+                        }\n+                    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"modified"}]}