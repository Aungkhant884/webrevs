{"files":[{"patch":"@@ -226,1 +226,1 @@\n-        INLINE_TYPES(JDK17, Fragments.FeatureInlineType, DiagKind.NORMAL),\n+        PRIMITIVE_CLASSES(JDK17, Fragments.FeaturePrimitiveClasses, DiagKind.NORMAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-        allowInlineTypes = Feature.INLINE_TYPES.allowedInSource(source);\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source);\n@@ -204,1 +204,1 @@\n-    \/** Switch: allow inline types?\n+    \/** Switch: allow primitive classes ?\n@@ -206,1 +206,1 @@\n-    boolean allowInlineTypes;\n+    boolean allowPrimitiveClasses;\n@@ -1532,1 +1532,1 @@\n-                    log.error(tree.field.pos(), Errors.ValueInstanceFieldExpectedHere);\n+                    log.error(tree.field.pos(), Errors.PrimitiveClassInstanceFieldExpectedHere);\n@@ -2564,1 +2564,1 @@\n-                                log.error(tree.pos(), Errors.ValueDoesNotSupport(name));\n+                                log.error(tree.pos(), Errors.PrimitiveClassDoesNotSupport(name));\n@@ -2572,1 +2572,1 @@\n-                                log.error(tree.pos(), Errors.ValueDoesNotSupport(name));\n+                                log.error(tree.pos(), Errors.PrimitiveClassDoesNotSupport(name));\n@@ -2578,1 +2578,1 @@\n-                                log.error(tree.pos(), Errors.ValueDoesNotSupport(names.fromString(\"invocation of super.\" + name)));\n+                                log.error(tree.pos(), Errors.PrimitiveClassDoesNotSupport(names.fromString(\"invocation of super.\" + name)));\n@@ -4259,1 +4259,1 @@\n-            if (tree.name == names._default && !allowInlineTypes) {\n+            if (tree.name == names._default && !allowPrimitiveClasses) {\n@@ -4261,1 +4261,1 @@\n-                        Feature.INLINE_TYPES.error(sourceName));\n+                        Feature.PRIMITIVE_CLASSES.error(sourceName));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -747,1 +747,1 @@\n-                log.error(pos, Errors.ConcreteSupertypeForInlineClass(c, st));\n+                log.error(pos, Errors.ConcreteSupertypeForPrimitiveClass(c, st));\n@@ -921,1 +921,1 @@\n-                    log.error(pos, Errors.GenericParameterizationWithValueType(t));\n+                    log.error(pos, Errors.GenericParameterizationWithPrimitiveClass(t));\n@@ -1965,1 +1965,1 @@\n-                        Errors.InlineClassMayNotOverride(m.name));\n+                        Errors.PrimitiveClassMayNotOverride(m.name));\n@@ -2432,1 +2432,1 @@\n-            log.error(pos, Errors.CyclicValueTypeMembership(c));\n+            log.error(pos, Errors.CyclicPrimitiveClassMembership(c));\n@@ -2699,1 +2699,1 @@\n-            log.error(pos, Errors.InlineTypeMustNotImplementIdentityObject(c));\n+            log.error(pos, Errors.PrimitiveClassMustNotImplementIdentityObject(c));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-    \/** Switch: allow inline types.\n+    \/** Switch: allow primitive classes.\n@@ -110,1 +110,1 @@\n-    boolean allowInlineTypes;\n+    boolean allowPrimitiveClasses;\n@@ -279,1 +279,1 @@\n-        allowInlineTypes = Feature.INLINE_TYPES.allowedInSource(source);\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source);\n@@ -816,1 +816,1 @@\n-                    if (allowInlineTypes) {\n+                    if (allowPrimitiveClasses) {\n@@ -2509,1 +2509,1 @@\n-        if (allowInlineTypes && name.toString().endsWith(\"$ref\")) {\n+        if (allowPrimitiveClasses && name.toString().endsWith(\"$ref\")) {\n@@ -2802,1 +2802,1 @@\n-            if (allowInlineTypes) {\n+            if (allowPrimitiveClasses) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3491,1 +3491,1 @@\n-            checkSourceLevel(Feature.INLINE_TYPES);\n+            checkSourceLevel(Feature.PRIMITIVE_CLASSES);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -399,4 +399,0 @@\n-# 0: symbol\n-compiler.err.cyclic.value.type.membership=\\\n-    cyclic inline type membership involving {0}\n-\n@@ -1782,3 +1778,0 @@\n-compiler.warn.get.class.compared.with.interface=\\\n-    return value of getClass() can never equal the class literal of an interface\n-\n@@ -2962,3 +2955,0 @@\n-compiler.misc.feature.inline.type=\\\n-    inline type\n-\n@@ -3795,0 +3785,10 @@\n+compiler.misc.feature.primitive.classes=\\\n+    primitive classes\n+\n+# 0: symbol\n+compiler.err.cyclic.primitive.class.membership=\\\n+    cyclic primitive class membership involving {0}\n+\n+compiler.warn.get.class.compared.with.interface=\\\n+    return value of getClass() can never equal the class literal of an interface\n+\n@@ -3796,2 +3796,2 @@\n-compiler.err.inline.class.may.not.override=\\\n-    Inline classes may not override the method {0} from Object\n+compiler.err.primitive.class.may.not.override=\\\n+    primitive classes may not override the method {0} from Object\n@@ -3800,2 +3800,2 @@\n-compiler.err.value.does.not.support=\\\n-    Inline types do not support {0}\n+compiler.err.primitive.class.does.not.support=\\\n+    primitive classes do not support {0}\n@@ -3803,2 +3803,2 @@\n-compiler.err.value.may.not.extend=\\\n-    Inline type may not extend another inline type or class\n+compiler.err.primitive.class.may.not.extend=\\\n+    inappropriate super class declaration for a primitive class\n@@ -3806,2 +3806,2 @@\n-compiler.err.value.instance.field.expected.here=\\\n-    withfield operator requires an instance field of an inline class here\n+compiler.err.primitive.class.instance.field.expected.here=\\\n+    withfield operator requires an instance field of a primitive class here\n@@ -3813,1 +3813,1 @@\n-    Inine type instance should not be passed around before being fully initialized\n+    primitive class instance should not be passed around before being fully initialized\n@@ -3816,2 +3816,2 @@\n-compiler.err.generic.parameterization.with.value.type=\\\n-    Inferred type {0} involves generic parameterization by an inline type\n+compiler.err.generic.parameterization.with.primitive.class=\\\n+    Inferred type {0} involves generic parameterization by a primitive class\n@@ -3820,2 +3820,2 @@\n-compiler.err.inline.type.must.not.implement.identity.object=\\\n-    The inline type {0} attempts to implement the incompatible interface IdentityObject\n+compiler.err.primitive.class.must.not.implement.identity.object=\\\n+    The primitive class {0} attempts to implement the incompatible interface IdentityObject\n@@ -3824,2 +3824,2 @@\n-compiler.err.concrete.supertype.for.inline.class=\\\n-    The concrete class {1} is not allowed to be a super class of the inline class {0} either directly or indirectly\n+compiler.err.concrete.supertype.for.primitive.class=\\\n+    The concrete class {1} is not allowed to be a super class of the primitive class {0} either directly or indirectly\n@@ -3829,1 +3829,1 @@\n-    The method {0} in the super class {2} of the inline type {1} is synchronized. This is disallowed\n+    The method {0} in the super class {2} of the primitive class {1} is synchronized. This is disallowed\n@@ -3833,1 +3833,1 @@\n-    The super class {2} of the inline type {1} defines a constructor {0} that takes arguments. This is disallowed\n+    The super class {2} of the primitive class {1} defines a constructor {0} that takes arguments. This is disallowed\n@@ -3837,1 +3837,1 @@\n-    The super class {2} of the inline type {1} defines an instance field {0}. This is disallowed\n+    The super class {2} of the primitive class {1} defines an instance field {0}. This is disallowed\n@@ -3841,1 +3841,1 @@\n-    The super class {2} of the inline type {1} defines a nonempty no-arg constructor {0}. This is disallowed\n+    The super class {2} of the primitive class {1} defines a nonempty no-arg constructor {0}. This is disallowed\n@@ -3845,1 +3845,1 @@\n-    The super class {1} of the inline class {0} declares one or more non-empty instance initializer blocks. This is disallowed.\n+    The super class {1} of the primitive class {0} declares one or more non-empty instance initializer blocks. This is disallowed.\n@@ -3849,1 +3849,1 @@\n-    The super class {1} of the inline class {0} is an inner class. This is disallowed.\n+    The super class {1} of the primitive class {0} is an inner class. This is disallowed.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -208,3 +208,3 @@\n-compiler.err.cyclic.value.type.membership\n-compiler.err.value.does.not.support\n-compiler.err.value.may.not.extend\n+compiler.err.cyclic.primitive.class.membership\n+compiler.err.primitive.class.does.not.support\n+compiler.err.primitive.class.may.not.extend\n@@ -212,2 +212,2 @@\n-compiler.err.inline.type.must.not.implement.identity.object\n-compiler.err.concrete.supertype.for.inline.class\n+compiler.err.primitive.class.must.not.implement.identity.object\n+compiler.err.concrete.supertype.for.primitive.class\n@@ -220,1 +220,1 @@\n-compiler.err.generic.parameterization.with.value.type\n+compiler.err.generic.parameterization.with.primitive.class\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\/\/ key: compiler.err.value.instance.field.expected.here\n+\/\/ key: compiler.err.primitive.class.instance.field.expected.here\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassInstanceFieldExpectedHere.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueInstanceFieldExpectedHere.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-\/\/ key: compiler.err.inline.class.may.not.override\n+\/\/ key: compiler.err.primitive.class.may.not.override\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassMayNotOverride.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/InlineMayNotOverride.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-\/\/ key: compiler.misc.feature.inline.type\n+\/\/ key: compiler.misc.feature.primitive.classes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassNotSupported.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValuesNotSupported.java","status":"renamed"},{"patch":"@@ -1,1 +1,1 @@\n-BinarySuperclassConstraints.java:14:15: compiler.err.inline.type.must.not.implement.identity.object: BinarySuperclassConstraints.I0\n+BinarySuperclassConstraints.java:14:15: compiler.err.primitive.class.must.not.implement.identity.object: BinarySuperclassConstraints.I0\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/BinarySuperclassConstraints.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,5 +1,5 @@\n-CheckClone.java:11:21: compiler.err.value.does.not.support: clone\n-CheckClone.java:12:18: compiler.err.value.does.not.support: clone\n-CheckClone.java:16:16: compiler.err.value.does.not.support: clone\n-CheckClone.java:17:14: compiler.err.value.does.not.support: clone\n-CheckClone.java:20:22: compiler.err.inline.class.may.not.override: clone\n+CheckClone.java:11:21: compiler.err.primitive.class.does.not.support: clone\n+CheckClone.java:12:18: compiler.err.primitive.class.does.not.support: clone\n+CheckClone.java:16:16: compiler.err.primitive.class.does.not.support: clone\n+CheckClone.java:17:14: compiler.err.primitive.class.does.not.support: clone\n+CheckClone.java:20:22: compiler.err.primitive.class.may.not.override: clone\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckClone.out","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-CheckCyclicMembership.java:13:37: compiler.err.cyclic.value.type.membership: CheckCyclicMembership.InnerValue\n-CheckCyclicMembership.java:15:33: compiler.err.cyclic.value.type.membership: CheckCyclicMembership\n-CheckCyclicMembership.java:19:22: compiler.err.cyclic.value.type.membership: CheckCyclicMembership\n+CheckCyclicMembership.java:13:37: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership.InnerValue\n+CheckCyclicMembership.java:15:33: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership\n+CheckCyclicMembership.java:19:22: compiler.err.cyclic.primitive.class.membership: CheckCyclicMembership\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckCyclicMembership.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckExtends.java:10:22: compiler.err.inline.type.must.not.implement.identity.object: CheckExtends.NestedValue\n+CheckExtends.java:10:22: compiler.err.primitive.class.must.not.implement.identity.object: CheckExtends.NestedValue\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckExtends.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckFeatureGate1.java:10:12: compiler.err.feature.not.supported.in.source: (compiler.misc.feature.inline.type), 13, 17\n+CheckFeatureGate1.java:10:12: compiler.err.feature.not.supported.in.source: (compiler.misc.feature.primitive.classes), 13, 17\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFeatureGate1.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckFeatureGate2.java:11:17: compiler.err.feature.not.supported.in.source: (compiler.misc.feature.inline.type), 13, 17\n+CheckFeatureGate2.java:11:17: compiler.err.feature.not.supported.in.source: (compiler.misc.feature.primitive.classes), 13, 17\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFeatureGate2.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-CheckFinal.java:19:42: compiler.err.concrete.supertype.for.inline.class: compiler.misc.anonymous.class: CheckFinal$1, CheckFinal\n+CheckFinal.java:19:42: compiler.err.concrete.supertype.for.primitive.class: compiler.misc.anonymous.class: CheckFinal$1, CheckFinal\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFinal.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckFinalize.java:10:20: compiler.err.inline.class.may.not.override: finalize\n+CheckFinalize.java:10:20: compiler.err.primitive.class.may.not.override: finalize\n@@ -3,2 +3,2 @@\n-CheckFinalize.java:15:21: compiler.err.value.does.not.support: finalize\n-CheckFinalize.java:16:20: compiler.err.value.does.not.support: finalize\n+CheckFinalize.java:15:21: compiler.err.primitive.class.does.not.support: finalize\n+CheckFinalize.java:16:20: compiler.err.primitive.class.does.not.support: finalize\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFinalize.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-CheckFlattenableCycles.java:13:42: compiler.err.cyclic.value.type.membership: CheckFlattenableCycles.InnerValue\n-CheckFlattenableCycles.java:15:34: compiler.err.cyclic.value.type.membership: CheckFlattenableCycles\n-CheckFlattenableCycles.java:19:26: compiler.err.cyclic.value.type.membership: CheckFlattenableCycles\n+CheckFlattenableCycles.java:13:42: compiler.err.cyclic.primitive.class.membership: CheckFlattenableCycles.InnerValue\n+CheckFlattenableCycles.java:15:34: compiler.err.cyclic.primitive.class.membership: CheckFlattenableCycles\n+CheckFlattenableCycles.java:19:26: compiler.err.cyclic.primitive.class.membership: CheckFlattenableCycles\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFlattenableCycles.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,17 +1,17 @@\n-CheckObjectMethodsUsage.java:11:17: compiler.err.inline.class.may.not.override: finalize\n-CheckObjectMethodsUsage.java:12:19: compiler.err.inline.class.may.not.override: clone\n-CheckObjectMethodsUsage.java:15:23: compiler.err.value.does.not.support: finalize\n-CheckObjectMethodsUsage.java:16:13: compiler.err.value.does.not.support: wait\n-CheckObjectMethodsUsage.java:17:19: compiler.err.value.does.not.support: wait\n-CheckObjectMethodsUsage.java:18:13: compiler.err.value.does.not.support: wait\n-CheckObjectMethodsUsage.java:19:19: compiler.err.value.does.not.support: wait\n-CheckObjectMethodsUsage.java:20:13: compiler.err.value.does.not.support: wait\n-CheckObjectMethodsUsage.java:21:19: compiler.err.value.does.not.support: wait\n-CheckObjectMethodsUsage.java:22:15: compiler.err.value.does.not.support: notify\n-CheckObjectMethodsUsage.java:23:21: compiler.err.value.does.not.support: notify\n-CheckObjectMethodsUsage.java:24:18: compiler.err.value.does.not.support: notifyAll\n-CheckObjectMethodsUsage.java:25:24: compiler.err.value.does.not.support: notifyAll\n-CheckObjectMethodsUsage.java:26:20: compiler.err.value.does.not.support: clone\n-CheckObjectMethodsUsage.java:27:23: compiler.err.value.does.not.support: invocation of super.hashCode\n-CheckObjectMethodsUsage.java:28:23: compiler.err.value.does.not.support: invocation of super.toString\n-CheckObjectMethodsUsage.java:29:21: compiler.err.value.does.not.support: invocation of super.equals\n+CheckObjectMethodsUsage.java:11:17: compiler.err.primitive.class.may.not.override: finalize\n+CheckObjectMethodsUsage.java:12:19: compiler.err.primitive.class.may.not.override: clone\n+CheckObjectMethodsUsage.java:15:23: compiler.err.primitive.class.does.not.support: finalize\n+CheckObjectMethodsUsage.java:16:13: compiler.err.primitive.class.does.not.support: wait\n+CheckObjectMethodsUsage.java:17:19: compiler.err.primitive.class.does.not.support: wait\n+CheckObjectMethodsUsage.java:18:13: compiler.err.primitive.class.does.not.support: wait\n+CheckObjectMethodsUsage.java:19:19: compiler.err.primitive.class.does.not.support: wait\n+CheckObjectMethodsUsage.java:20:13: compiler.err.primitive.class.does.not.support: wait\n+CheckObjectMethodsUsage.java:21:19: compiler.err.primitive.class.does.not.support: wait\n+CheckObjectMethodsUsage.java:22:15: compiler.err.primitive.class.does.not.support: notify\n+CheckObjectMethodsUsage.java:23:21: compiler.err.primitive.class.does.not.support: notify\n+CheckObjectMethodsUsage.java:24:18: compiler.err.primitive.class.does.not.support: notifyAll\n+CheckObjectMethodsUsage.java:25:24: compiler.err.primitive.class.does.not.support: notifyAll\n+CheckObjectMethodsUsage.java:26:20: compiler.err.primitive.class.does.not.support: clone\n+CheckObjectMethodsUsage.java:27:23: compiler.err.primitive.class.does.not.support: invocation of super.hashCode\n+CheckObjectMethodsUsage.java:28:23: compiler.err.primitive.class.does.not.support: invocation of super.toString\n+CheckObjectMethodsUsage.java:29:21: compiler.err.primitive.class.does.not.support: invocation of super.equals\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckObjectMethodsUsage.out","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,9 +1,9 @@\n-CheckSync.java:18:17: compiler.err.value.does.not.support: wait\n-CheckSync.java:19:17: compiler.err.value.does.not.support: wait\n-CheckSync.java:20:17: compiler.err.value.does.not.support: wait\n-CheckSync.java:21:19: compiler.err.value.does.not.support: notify\n-CheckSync.java:22:22: compiler.err.value.does.not.support: notifyAll\n-CheckSync.java:23:21: compiler.err.value.does.not.support: finalize\n-CheckSync.java:24:18: compiler.err.value.does.not.support: clone\n-CheckSync.java:32:17: compiler.err.value.does.not.support: wait\n-CheckSync.java:33:17: compiler.err.value.does.not.support: wait\n+CheckSync.java:18:17: compiler.err.primitive.class.does.not.support: wait\n+CheckSync.java:19:17: compiler.err.primitive.class.does.not.support: wait\n+CheckSync.java:20:17: compiler.err.primitive.class.does.not.support: wait\n+CheckSync.java:21:19: compiler.err.primitive.class.does.not.support: notify\n+CheckSync.java:22:22: compiler.err.primitive.class.does.not.support: notifyAll\n+CheckSync.java:23:21: compiler.err.primitive.class.does.not.support: finalize\n+CheckSync.java:24:18: compiler.err.primitive.class.does.not.support: clone\n+CheckSync.java:32:17: compiler.err.primitive.class.does.not.support: wait\n+CheckSync.java:33:17: compiler.err.primitive.class.does.not.support: wait\n@@ -11,1 +11,1 @@\n-CheckSync.java:34:17: compiler.err.value.does.not.support: wait\n+CheckSync.java:34:17: compiler.err.primitive.class.does.not.support: wait\n@@ -13,5 +13,5 @@\n-CheckSync.java:35:17: compiler.err.value.does.not.support: wait\n-CheckSync.java:36:17: compiler.err.value.does.not.support: wait\n-CheckSync.java:37:17: compiler.err.value.does.not.support: wait\n-CheckSync.java:38:19: compiler.err.value.does.not.support: notify\n-CheckSync.java:39:22: compiler.err.value.does.not.support: notifyAll\n+CheckSync.java:35:17: compiler.err.primitive.class.does.not.support: wait\n+CheckSync.java:36:17: compiler.err.primitive.class.does.not.support: wait\n+CheckSync.java:37:17: compiler.err.primitive.class.does.not.support: wait\n+CheckSync.java:38:19: compiler.err.primitive.class.does.not.support: notify\n+CheckSync.java:39:22: compiler.err.primitive.class.does.not.support: notifyAll\n@@ -21,1 +21,1 @@\n-2 warnings\n\\ No newline at end of file\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSync.out","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-IllegalByValueTest2.java:19:59: compiler.err.inline.type.must.not.implement.identity.object: compiler.misc.anonymous.class: IllegalByValueTest2\n+IllegalByValueTest2.java:19:59: compiler.err.primitive.class.must.not.implement.identity.object: compiler.misc.anonymous.class: IllegalByValueTest2\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/IllegalByValueTest2.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-SneakThroSuperCallTest.java:13:21: compiler.err.value.does.not.support: notify\n-SneakThroSuperCallTest.java:17:30: compiler.err.value.does.not.support: invocation of super.hashCode\n-SneakThroSuperCallTest.java:21:30: compiler.err.value.does.not.support: invocation of super.toString\n+SneakThroSuperCallTest.java:13:21: compiler.err.primitive.class.does.not.support: notify\n+SneakThroSuperCallTest.java:17:30: compiler.err.primitive.class.does.not.support: invocation of super.hashCode\n+SneakThroSuperCallTest.java:21:30: compiler.err.primitive.class.does.not.support: invocation of super.toString\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SneakThroSuperCallTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-SuperclassConstraints.java:14:15: compiler.err.inline.type.must.not.implement.identity.object: SuperclassConstraints.I0\n+SuperclassConstraints.java:14:15: compiler.err.primitive.class.must.not.implement.identity.object: SuperclassConstraints.I0\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperclassConstraints.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-TopInterfaceNegativeTest.java:28:22: compiler.err.inline.type.must.not.implement.identity.object: TopInterfaceNegativeTest.V1\n+TopInterfaceNegativeTest.java:28:22: compiler.err.primitive.class.must.not.implement.identity.object: TopInterfaceNegativeTest.V1\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TopInterfaceNegativeTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-ValueModifierTest.java:15:21: compiler.err.concrete.supertype.for.inline.class: compiler.misc.anonymous.class: ValueModifierTest$2, value\n+ValueModifierTest.java:15:21: compiler.err.concrete.supertype.for.primitive.class: compiler.misc.anonymous.class: ValueModifierTest$2, value\n@@ -4,1 +4,1 @@\n-ValueModifierTest.java:16:31: compiler.err.concrete.supertype.for.inline.class: compiler.misc.anonymous.class: ValueModifierTest$3, value\n+ValueModifierTest.java:16:31: compiler.err.concrete.supertype.for.primitive.class: compiler.misc.anonymous.class: ValueModifierTest$3, value\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueModifierTest.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,3 +2,3 @@\n-WithFieldOperatorTest.java:26:33: compiler.err.value.instance.field.expected.here\n-WithFieldOperatorTest.java:27:33: compiler.err.value.instance.field.expected.here\n-WithFieldOperatorTest.java:28:29: compiler.err.value.instance.field.expected.here\n+WithFieldOperatorTest.java:26:33: compiler.err.primitive.class.instance.field.expected.here\n+WithFieldOperatorTest.java:27:33: compiler.err.primitive.class.instance.field.expected.here\n+WithFieldOperatorTest.java:28:29: compiler.err.primitive.class.instance.field.expected.here\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOperatorTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}