{"files":[{"patch":"@@ -79,13 +79,0 @@\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    private static int cmp_Id(IdentityObject[] objects1, IdentityObject[] objects2) {\n-        int s = 0;\n-        for (int i = 0; i < SIZE; i++) {\n-            if (objects1[i] == objects2[i]) {\n-                s += 1;\n-            } else {\n-                s -= 1;\n-            }\n-        }\n-        return s;\n-    }\n-\n@@ -162,35 +149,0 @@\n-    @Benchmark\n-    @OperationsPerInvocation(SIZE)\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    public int Id_equals000(IdState00 st) {\n-        return cmp_Id(st.arr1, st.arr2);\n-    }\n-\n-    @Benchmark\n-    @OperationsPerInvocation(SIZE)\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    public int Id_equals025(IdState25 st) {\n-        return cmp_Id(st.arr1, st.arr2);\n-    }\n-\n-    @Benchmark\n-    @OperationsPerInvocation(SIZE)\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    public int Id_equals050(IdState50 st) {\n-        return cmp_Id(st.arr1, st.arr2);\n-    }\n-\n-    @Benchmark\n-    @OperationsPerInvocation(SIZE)\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    public int Id_equals075(IdState75 st) {\n-        return cmp_Id(st.arr1, st.arr2);\n-    }\n-\n-    @Benchmark\n-    @OperationsPerInvocation(SIZE)\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    public int Id_equals100(IdState100 st) {\n-        return cmp_Id(st.arr1, st.arr2);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/acmp\/array\/IdentityIsCmpBranch.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -84,5 +84,0 @@\n-    @State(Scope.Thread)\n-    public abstract static class IdState {\n-        IdentityObject[] arr1, arr2;\n-    }\n-\n@@ -183,45 +178,0 @@\n-    public static class IdState00 extends IdState {\n-        @Setup\n-        public void setup() {\n-            arr1 = new IdentityObject[SIZE];\n-            arr2 = new IdentityObject[SIZE];\n-            populate(arr1, arr2, 0);\n-        }\n-    }\n-\n-    public static class IdState25 extends IdState {\n-        @Setup\n-        public void setup() {\n-            arr1 = new IdentityObject[SIZE];\n-            arr2 = new IdentityObject[SIZE];\n-            populate(arr1, arr2, 25);\n-        }\n-    }\n-\n-    public static class IdState50 extends IdState {\n-        @Setup\n-        public void setup() {\n-            arr1 = new IdentityObject[SIZE];\n-            arr2 = new IdentityObject[SIZE];\n-            populate(arr1, arr2, 50);\n-        }\n-    }\n-\n-    public static class IdState75 extends IdState {\n-        @Setup\n-        public void setup() {\n-            arr1 = new IdentityObject[SIZE];\n-            arr2 = new IdentityObject[SIZE];\n-            populate(arr1, arr2, 75);\n-        }\n-    }\n-\n-    public static class IdState100 extends IdState {\n-        @Setup\n-        public void setup() {\n-            arr1 = new IdentityObject[SIZE];\n-            arr2 = new IdentityObject[SIZE];\n-            populate(arr1, arr2, 100);\n-        }\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/valhalla\/acmp\/array\/StatesR64long.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"}]}