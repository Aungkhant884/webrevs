{"files":[{"patch":"@@ -326,0 +326,4 @@\n+\n+  \/\/ Ensure the stores to copy the inline field contents are visible\n+  \/\/ before any subsequent store that publishes this reference.\n+  membar(Assembler::StoreStore);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1026,0 +1026,1 @@\n+  bool need_membar = false;\n@@ -1062,0 +1063,4 @@\n+        \/\/ The LoadIndexed node will initialise this instance by copying from\n+        \/\/ the flattened field.  Ensure these stores are visible before any\n+        \/\/ subsequent store that publishes this reference.\n+        need_membar = true;\n@@ -1074,0 +1079,3 @@\n+  if (need_membar) {\n+    append(new MemBar(lir_membar_storestore));\n+  }\n@@ -1620,1 +1628,1 @@\n-  if (method()->is_object_constructor() &&\n+  if ((method()->is_object_constructor() || method()->is_static_init_factory()) &&\n@@ -1978,0 +1986,1 @@\n+            bool need_membar = false;\n@@ -1994,0 +2003,1 @@\n+              need_membar = true;\n@@ -2007,0 +2017,7 @@\n+              need_membar = true;\n+            }\n+            if (need_membar) {\n+              \/\/ If we allocated a new instance ensure the stores to copy the\n+              \/\/ field contents are visible before any subsequent store that\n+              \/\/ publishes this reference.\n+              append(new MemBar(lir_membar_storestore));\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+\/**\n+ * @test TestBufferTearingC1\n+ * @key randomness\n+ * @summary Additional tests for C1 missing barriers when buffering inline types.\n+ * @run main\/othervm -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   compiler.valhalla.inlinetypes.TestBufferTearingC1\n+ *\/\n+\n+primitive class Point {\n+    public final int x, y;\n+\n+    public Point(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n+    }\n+}\n+\n+primitive class Rect {\n+    public final Point a, b;\n+\n+    public Rect(Point a, Point b) {\n+        this.a = a;\n+        this.b = b;\n+    }\n+}\n+\n+public class TestBufferTearingC1 {\n+\n+    public static Point[] points = new Point[] { new Point(1, 1) };\n+    public static Rect rect = new Rect(new Point(1, 1), new Point(2, 2));\n+    public static Rect[] rects = new Rect[] { rect };\n+\n+    public static Object ref1 = points[0];\n+    public static Object ref2 = rect.a;\n+    public static Object ref3 = rects[0].a;\n+\n+    static volatile boolean running = true;\n+\n+    public static void writeRefs(int iter) {\n+        ref1 = points[0];    \/\/ Indexed load of flattened array\n+        ref2 = rect.a;       \/\/ Load from flattened field\n+        ref3 = rects[0].a;   \/\/ Indexed load (delayed) followed by flattened field access\n+\n+        points[0] = new Point(iter, iter);\n+        rect = new Rect(new Point(iter, iter), new Point(iter + 1, iter + 1));\n+        rects[0] = rect;\n+    }\n+\n+    private static void checkMissingBarrier() {\n+        while (running) {\n+            \/\/ Each refN holds a \"buffered\" reference created when reading a\n+            \/\/ flattened field or array element.  It should not be possible to\n+            \/\/ read through this reference and see the intermediate\n+            \/\/ zero-initialised state of the object (i.e. there should be a\n+            \/\/ store-store barrier after copying the flattened field contents\n+            \/\/ before the store that publishes it).\n+\n+            if (((Point)ref1).x == 0 || ((Point)ref1).y == 0) {\n+                throw new IllegalStateException();\n+            }\n+\n+            if (((Point)ref2).x == 0 || ((Point)ref2).y == 0) {\n+                throw new IllegalStateException();\n+            }\n+\n+            if (((Point)ref3).x == 0 || ((Point)ref3).y == 0) {\n+                throw new IllegalStateException();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        Thread[] threads = new Thread[10];\n+        for (int i = 0; i < 10; i++) {\n+            threads[i] = new Thread(TestBufferTearingC1::checkMissingBarrier);\n+            threads[i].start();\n+        }\n+\n+        for (int i = 1; i < 1_000_000; i++) {\n+            writeRefs(i);\n+        }\n+\n+        running = false;\n+\n+        for (int i = 0; i < 10; i++) {\n+            threads[i].join();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}