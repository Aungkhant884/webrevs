{"files":[{"patch":"@@ -326,0 +326,4 @@\n+\n+  \/\/ Ensure the stores to copy the inline field contents are visible\n+  \/\/ before any subsequent store that publishes this reference.\n+  membar(Assembler::StoreStore);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1986,0 +1986,1 @@\n+            bool need_membar = false;\n@@ -2002,0 +2003,1 @@\n+              need_membar = true;\n@@ -2015,2 +2017,6 @@\n-              \/\/ Ensure the stores to copy the field contents are visible\n-              \/\/ before any subsequent store that publishes this reference.\n+              need_membar = true;\n+            }\n+            if (need_membar) {\n+              \/\/ If we allocated a new instance ensure the stores to copy the\n+              \/\/ field contents are visible before any subsequent store that\n+              \/\/ publishes this reference.\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,4 +31,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=0\n- *                   -XX:TieredStopAtLevel=1\n- *                   compiler.valhalla.inlinetypes.TestBufferTearingC1\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n@@ -60,1 +57,6 @@\n-    public static Point point = new Point(1, 1);\n+    public static Rect rect = new Rect(new Point(1, 1), new Point(2, 2));\n+    public static Rect[] rects = new Rect[] { rect };\n+\n+    public static Object ref1 = points[0];\n+    public static Object ref2 = rect.a;\n+    public static Object ref3 = rects[0].a;\n@@ -64,4 +66,8 @@\n-    public static void writePoint(int iter) {\n-        Rect r = new Rect(new Point(iter, iter), new Point(iter + 1, iter + 1));\n-        point = points[0];  \/\/ Indexed load of flattened array (when FlatArrayElementMaxSize != 0)\n-        points[0] = r.a;    \/\/ Load from flattened field (when InlineFieldMaxFlatSize != 0)\n+    public static void writeRefs(int iter) {\n+        ref1 = points[0];    \/\/ Indexed load of flattened array\n+        ref2 = rect.a;       \/\/ Load from flattened field\n+        ref3 = rects[0].a;   \/\/ Indexed load (delayed) followed by flattened field access\n+\n+        points[0] = new Point(iter, iter);\n+        rect = new Rect(new Point(iter, iter), new Point(iter + 1, iter + 1));\n+        rects[0] = rect;\n@@ -72,8 +78,12 @@\n-            \/\/ When FlatArrayElementMaxSize == 0 the \"buffered\" reference\n-            \/\/ created by the load from the flattened field `r.a' will be\n-            \/\/ stored directly in the array at `points[0]'.  It should not be\n-            \/\/ possible to read through this reference and see the\n-            \/\/ intermediate zero-initialised state of the object (i.e. there\n-            \/\/ should be a store-store barrier after copying the flattened\n-            \/\/ field contents before the store that publishes it).\n-            if (points[0].x == 0 || points[0].y == 0) {\n+            \/\/ Each refN holds a \"buffered\" reference created when reading a\n+            \/\/ flattened field or array element.  It should not be possible to\n+            \/\/ read through this reference and see the intermediate\n+            \/\/ zero-initialised state of the object (i.e. there should be a\n+            \/\/ store-store barrier after copying the flattened field contents\n+            \/\/ before the store that publishes it).\n+\n+            if (((Point)ref1).x == 0 || ((Point)ref1).y == 0) {\n+                throw new IllegalStateException();\n+            }\n+\n+            if (((Point)ref2).x == 0 || ((Point)ref2).y == 0) {\n@@ -83,6 +93,1 @@\n-            \/\/ Similarly, when InlineFieldMaxFlatSize == 0 the buffered\n-            \/\/ reference created by the indexed load from the flattened array\n-            \/\/ `points[0]' will be stored directly in the field `points'.  It\n-            \/\/ should not be possible to read through this reference and see\n-            \/\/ the intermediate zero-initialised state of the object.\n-            if (point.x == 0 || point.y == 0) {\n+            if (((Point)ref3).x == 0 || ((Point)ref3).y == 0) {\n@@ -102,1 +107,1 @@\n-            writePoint(i);\n+            writeRefs(i);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":29,"deletions":24,"binary":false,"changes":53,"status":"modified"}]}