{"files":[{"patch":"@@ -880,1 +880,1 @@\n-  if (InlineTypeReturnedAsFields && result_type() == T_PRIMITIVE_OBJECT) {\n+  if (has_scalarized_return()) {\n@@ -921,1 +921,2 @@\n-          Bytecodes::is_return(java_code_at(last_index)));\n+          Bytecodes::is_return(java_code_at(last_index)) &&\n+          !has_scalarized_args());\n@@ -1269,0 +1270,3 @@\n+  if (InlineTypeReturnedAsFields && returns_inline_type(THREAD)) {\n+    set_has_scalarized_return(true);\n+  }\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -95,3 +95,4 @@\n-    _c1_needs_stack_repair = 1 << 8,\n-    _c2_needs_stack_repair = 1 << 9,\n-    _scoped                = 1 << 10\n+    _scalarized_return     = 1 << 8,\n+    _c1_needs_stack_repair = 1 << 9,\n+    _c2_needs_stack_repair = 1 << 10,\n+    _scoped                = 1 << 11\n@@ -905,0 +906,8 @@\n+  bool has_scalarized_return() const {\n+    return (_flags & _scalarized_return) != 0;\n+  }\n+\n+  void set_has_scalarized_return(bool x) {\n+    _flags = x ? (_flags | _scalarized_return) : (_flags & ~_scalarized_return);\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8275825\n+ * @bug 8275825 8289686\n@@ -54,0 +54,1 @@\n+    static MyValue3.ref staticFieldRef = MyValue3.create();\n@@ -55,0 +56,2 @@\n+    MyValue3.ref fieldRef = MyValue3.create();\n+    Object objField = null;\n@@ -68,0 +71,28 @@\n+    public Object getter4(MyValue3 unusedArg) {\n+        return objField;\n+    }\n+\n+    public int constantGetter(MyValue3 unusedArg) {\n+        return 0;\n+    }\n+\n+    public MyValue3.ref getter1Ref() {\n+        return staticFieldRef;\n+    }\n+\n+    public static MyValue3.ref getter2Ref() {\n+        return staticFieldRef;\n+    }\n+\n+    public MyValue3.ref getter3Ref() {\n+        return fieldRef;\n+    }\n+\n+    public Object getter4Ref(MyValue3.ref unusedArg) {\n+        return objField;\n+    }\n+\n+    public int constantGetterRef(MyValue3.ref unusedArg) {\n+        return 0;\n+    }\n+\n@@ -80,0 +111,12 @@\n+    public void setter1Ref(MyValue3.ref val) {\n+        staticFieldRef = val;\n+    }\n+\n+    public static void setter2Ref(MyValue3.ref val) {\n+        staticFieldRef = val;\n+    }\n+\n+    public void setter3Ref(MyValue3.ref val) {\n+        fieldRef = val;\n+    }\n+\n@@ -87,0 +130,8 @@\n+            t.getter4(staticField);\n+            t.constantGetter(staticField);\n+            t.getter1Ref();\n+            t.getter2Ref();\n+            t.getter3Ref();\n+            t.getter3Ref();\n+            t.getter4Ref(null);\n+            t.constantGetterRef(null);\n@@ -90,0 +141,3 @@\n+            t.setter1Ref(staticField);\n+            t.setter2Ref(staticField);\n+            t.setter3Ref(staticField);\n@@ -97,0 +151,14 @@\n+        m = TestTrivialMethods.class.getMethod(\"getter4\", MyValue3.class.asValueType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"getter4 is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"constantGetter\", MyValue3.class.asValueType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"constantGetter is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"getter1Ref\");\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"getter1Ref is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"getter2Ref\");\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"getter2Ref is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"getter3Ref\");\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"getter3Ref is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"getter4Ref\", MyValue3.class.asPrimaryType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"getter4Ref is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"constantGetterRef\", MyValue3.class.asPrimaryType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"constantGetterRef is not C2 compiled\");\n@@ -103,0 +171,6 @@\n+        m = TestTrivialMethods.class.getMethod(\"setter1Ref\", MyValue3.class.asPrimaryType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"setter1Ref is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"setter2Ref\", MyValue3.class.asPrimaryType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"setter2Ref is not C2 compiled\");\n+        m = TestTrivialMethods.class.getMethod(\"setter3Ref\", MyValue3.class.asPrimaryType());\n+        Asserts.assertEQ(WHITE_BOX.getMethodCompilationLevel(m, false), CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION, \"setter3Ref is not C2 compiled\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":76,"deletions":2,"binary":false,"changes":78,"status":"modified"}]}