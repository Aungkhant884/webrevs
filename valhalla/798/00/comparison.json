{"files":[{"patch":"@@ -703,1 +703,1 @@\n-            if (isStatic()) {  \/\/ a static init factory, not a true constructor\n+            if (isStatic()) {  \/\/ a value class static factory, not a true constructor\n@@ -705,1 +705,0 @@\n-                \/\/ FIXME: If it's a hidden class, this sig won't work.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @compile ValueImpl.jcod\n+ * @run testng\/othervm HiddenValueClass\n+ * @summary a hidden value class can only be defined without \"<vnew>\" static\n+ *          factory method.  It will have to provide a different instance creation.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import static java.lang.invoke.MethodType.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.Utils;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+public class HiddenValueClass {\n+\n+    value class Impl implements Runnable {\n+        public void run() {}\n+    }\n+\n+    private static final Path CLASSES_DIR = Paths.get(Utils.TEST_CLASSES);\n+\n+    \/*\n+     * ClassFormatError when defining HiddenValueClass$Impl as a hidden class\n+     * as it defines \"<vnew>()LHiddenValueClass$Impl;\" which is illegal.\n+     *\n+     * A hidden class cannot have \"<vnew>\" factory method since it cannot\n+     * be named.\n+     *\/\n+    @Test\n+    public void illegalHiddenValueClass() throws Throwable {\n+        byte[] bytes = Files.readAllBytes(CLASSES_DIR.resolve(\"HiddenValueClass$Impl.class\"));\n+        assertThrows(ClassFormatError.class, () -> MethodHandles.lookup().defineHiddenClass(bytes, false));\n+    }\n+\n+    \/*\n+     * ValueImpl is a value class without \"<vnew>\" method but instead\n+     * a special factory method named \"$make\" (no bracket) with\n+     * \"()java\/lang\/Runnable;\" descriptor defined.\n+     *\/\n+    @Test\n+    public void hiddenValueClassWithMakeFactory() throws Throwable {\n+        byte[] bytes = Files.readAllBytes(CLASSES_DIR.resolve(\"ValueImpl.class\"));\n+        Lookup lookup = MethodHandles.lookup().defineHiddenClass(bytes, false);\n+        MethodHandle mh = lookup.findStatic(lookup.lookupClass(), \"$make\", methodType(Runnable.class));\n+        Runnable r = (Runnable)mh.invokeExact();\n+        r.run();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/HiddenValueClass.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/\/ Generated from this source:\n+\/\/\n+\/\/ value class ValueImpl implements Runnable {\n+\/\/     public void run() {\n+\/\/         System.out.println(\"ValueImpl::run\");\n+\/\/     }\n+\/\/ }\n+\/\/\n+\/\/ then modified \"<vnew>()LValueImpl;\" to \"$make()Ljava\/lang\/Runnable;\"\n+\n+class ValueImpl {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [29] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1     at 0x0A\n+    Utf8 \"ValueImpl\"; \/\/ #2     at 0x0D\n+    Field #4 #5; \/\/ #3     at 0x19\n+    class #6; \/\/ #4     at 0x1E\n+    NameAndType #7 #8; \/\/ #5     at 0x21\n+    Utf8 \"java\/lang\/System\"; \/\/ #6     at 0x26\n+    Utf8 \"out\"; \/\/ #7     at 0x39\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #8     at 0x3F\n+    String #10; \/\/ #9     at 0x57\n+    Utf8 \"ValueImpl::run\"; \/\/ #10     at 0x5A\n+    Method #12 #13; \/\/ #11     at 0x6B\n+    class #14; \/\/ #12     at 0x70\n+    NameAndType #15 #16; \/\/ #13     at 0x73\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #14     at 0x78\n+    Utf8 \"println\"; \/\/ #15     at 0x8E\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #16     at 0x98\n+    class #18; \/\/ #17     at 0xB0\n+    Utf8 \"java\/lang\/Object\"; \/\/ #18     at 0xB3\n+    class #20; \/\/ #19     at 0xC6\n+    Utf8 \"java\/lang\/Runnable\"; \/\/ #20     at 0xC9\n+    Utf8 \"run\"; \/\/ #21     at 0xDE\n+    Utf8 \"()V\"; \/\/ #22     at 0xE4\n+    Utf8 \"Code\"; \/\/ #23     at 0xEA\n+    Utf8 \"LineNumberTable\"; \/\/ #24     at 0xF1\n+    Utf8 \"$make\"; \/\/ #25     at 0x0103\n+    Utf8 \"()Ljava\/lang\/Runnable;\"; \/\/ #26     at 0x010C\n+    Utf8 \"SourceFile\"; \/\/ #27     at 0x011C\n+    Utf8 \"ValueImpl.java\"; \/\/ #28     at 0x0129\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access [ ACC_FINAL ]\n+  #1;\/\/ this_cpx\n+  #17;\/\/ super_cpx\n+\n+  [1] { \/\/ Interfaces\n+    #19;\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ fields\n+  } \/\/ fields\n+\n+  [2] { \/\/ methods\n+    { \/\/ Member at 0x0148\n+      0x0001; \/\/ access\n+      #21; \/\/ name_cpx\n+      #22; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#23, 37) { \/\/ Code at 0x0150\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[9]{\n+            0xB200031209B6000B;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#24, 10) { \/\/ LineNumberTable at 0x016B\n+              [2] { \/\/ LineNumberTable\n+                0  3; \/\/  at 0x0177\n+                8  4; \/\/  at 0x017B\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x017B\n+      0x0008; \/\/ access\n+      #25; \/\/ name_cpx\n+      #26; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#23, 30) { \/\/ Code at 0x0183\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[6]{\n+            0xCB00014B2AB0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#24, 6) { \/\/ LineNumberTable at 0x019B\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x01A7\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#27, 2) { \/\/ SourceFile at 0x01A9\n+      #28;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueImpl\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/ValueImpl.jcod","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}