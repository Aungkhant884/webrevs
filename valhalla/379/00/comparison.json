{"files":[{"patch":"@@ -248,2 +248,2 @@\n-    bool return_oop = false; \/\/ This flag will be ignored since it used only for C2 with escape analysis.\n-    bool return_vt = false;\n+    bool return_oop = false;\n+    bool return_scalarized = false;\n@@ -252,1 +252,1 @@\n-      return_vt = true;\n+      return_scalarized = true;\n@@ -259,1 +259,1 @@\n-                             reexecute, rethrow_exception, is_method_handle_invoke, is_opt_native, return_oop, return_vt,\n+                             reexecute, rethrow_exception, is_method_handle_invoke, is_opt_native, return_oop, return_scalarized,\n","filename":"src\/hotspot\/share\/c1\/c1_IR.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1077,27 +1077,7 @@\n-  if (InlineTypeReturnedAsFields) {\n-    if (method()->signature()->maybe_returns_inline_type()) {\n-      ciType* return_type = method()->return_type();\n-      if (return_type->is_inlinetype()) {\n-        ciInlineKlass* vk = return_type->as_inline_klass();\n-        if (vk->can_be_returned_as_fields()) {\n-          if (vk_ret != NULL) {\n-            *vk_ret = vk;\n-          }\n-          return true;\n-        }\n-      } else {\n-        assert(return_type->is_instance_klass() && !return_type->as_instance_klass()->is_loaded(), \"must be\");\n-        if (vk_ret != NULL) {\n-          *vk_ret = NULL;\n-        }\n-        return true;\n-      }\n-    } else if (is_method_handle_invoke()) {\n-      BasicType bt = method()->return_type()->basic_type();\n-      if (bt == T_OBJECT || bt == T_INLINE_TYPE) {\n-        \/\/ An inline type might be returned from the call but we don't know its\n-        \/\/ type. Either we get a buffered inline type (and nothing needs to be done)\n-        \/\/ or one of the inlines being returned is the klass of the inline type\n-        \/\/ (RAX on x64, with LSB set to 1) and we need to allocate an inline\n-        \/\/ type instance of that type and initialize it with other values being\n-        \/\/ returned (in other registers).\n+  if (InlineTypeReturnedAsFields &&\n+      (method()->signature()->returns_inline_type() ||\n+       method()->is_method_handle_intrinsic())) {\n+    ciType* return_type = method()->return_type();\n+    if (return_type->is_inlinetype()) {\n+      ciInlineKlass* vk = return_type->as_inline_klass();\n+      if (vk->can_be_returned_as_fields()) {\n@@ -1105,1 +1085,1 @@\n-          *vk_ret = NULL;\n+          *vk_ret = vk;\n@@ -1109,0 +1089,10 @@\n+    } else if (return_type->is_instance_klass()) {\n+      \/\/ An inline type might be returned from the call but we don't know its\n+      \/\/ type. Either we get a buffered inline type (and nothing needs to be done)\n+      \/\/ or one of the inlines being returned is the klass of the inline type\n+      \/\/ (RAX on x64, with LSB set to 1) and we need to allocate an inline\n+      \/\/ type instance of that type and initialize it with other values being\n+      \/\/ returned (in other registers).\n+      assert(!return_type->as_instance_klass()->is_loaded() ||\n+             method()->is_method_handle_intrinsic(), \"unexpected return type\");\n+      return true;\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":18,"deletions":28,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -334,1 +334,0 @@\n-\n@@ -344,1 +343,0 @@\n-\n@@ -490,1 +488,1 @@\n-  ciInlineKlass* vk;\n+  ciInlineKlass* vk = NULL;\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,13 +74,3 @@\n-\/\/ ciSignature::maybe_returns_inline_type\n-\/\/\n-\/\/ True if we statically know that the return value is never null, or\n-\/\/ if the return type has a Q signature but is not yet loaded, in which case\n-\/\/ it could be a never-null type.\n-bool ciSignature::maybe_returns_inline_type() const {\n-  ciType* ret_type = return_type();\n-  if (ret_type->is_inlinetype()) {\n-    return true;\n-  } else if (ret_type->is_instance_klass() && !ret_type->as_instance_klass()->is_loaded()) {\n-    GUARDED_VM_ENTRY(if (get_symbol()->is_Q_method_signature()) { return true; })\n-  }\n-  return false;\n+\/\/ ciSignature::returns_inline_type\n+bool ciSignature::returns_inline_type() const {\n+  GUARDED_VM_ENTRY(return get_symbol()->is_Q_method_signature();)\n","filename":"src\/hotspot\/share\/ci\/ciSignature.cpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  bool      maybe_returns_inline_type() const;\n+  bool      returns_inline_type() const;\n","filename":"src\/hotspot\/share\/ci\/ciSignature.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-                                              bool        return_vt,\n+                                              bool        return_scalarized,\n@@ -312,1 +312,1 @@\n-  last_pd->set_return_vt(return_vt);\n+  last_pd->set_return_scalarized(return_scalarized);\n","filename":"src\/hotspot\/share\/code\/debugInfoRec.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-                      bool        return_vt  = false,\n+                      bool        return_scalarized = false,\n","filename":"src\/hotspot\/share\/code\/debugInfoRec.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3385,1 +3385,1 @@\n-      st->print(\" {reexecute=%d rethrow=%d return_oop=%d return_vt=%d}\", sd->should_reexecute(), sd->rethrow_exception(), sd->return_oop(), sd->return_vt());\n+      st->print(\" {reexecute=%d rethrow=%d return_oop=%d return_scalarized=%d}\", sd->should_reexecute(), sd->rethrow_exception(), sd->return_oop(), sd->return_scalarized());\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    PCDESC_return_vt                 = 1 << 7\n+    PCDESC_return_scalarized         = 1 << 7\n@@ -99,2 +99,2 @@\n-  bool     return_vt()                     const { return (_flags & PCDESC_return_vt) != 0;     }\n-  void set_return_vt(bool z)                     { set_flag(PCDESC_return_vt, z); }\n+  bool     return_scalarized()             const { return (_flags & PCDESC_return_scalarized) != 0; }\n+  void set_return_scalarized(bool z)             { set_flag(PCDESC_return_scalarized, z); }\n","filename":"src\/hotspot\/share\/code\/pcDesc.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  _return_vt     = pd->return_vt();\n+  _return_scalarized = pd->return_scalarized();\n@@ -57,1 +57,1 @@\n-  _return_vt     = false;\n+  _return_scalarized = false;\n","filename":"src\/hotspot\/share\/code\/scopeDesc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  bool return_vt()        const { return _return_vt; }\n+  bool return_scalarized() const { return _return_scalarized; }\n@@ -112,1 +112,1 @@\n-  bool          _return_vt;\n+  bool          _return_scalarized;\n","filename":"src\/hotspot\/share\/code\/scopeDesc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -960,1 +960,3 @@\n-      phase->is_IterGVN()->replace_node(this, get_oop());\n+      PhaseIterGVN* igvn = phase->is_IterGVN();\n+      igvn->_worklist.push(this);\n+      igvn->replace_in_uses(this, get_oop());\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -728,1 +728,1 @@\n-bool MachCallNode::returns_vt() const {\n+bool MachCallNode::returns_scalarized() const {\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -948,1 +948,1 @@\n-  bool returns_vt() const;\n+  bool returns_scalarized() const;\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1052,1 +1052,1 @@\n-  bool return_vt = false;\n+  bool return_scalarized = false;\n@@ -1075,1 +1075,1 @@\n-    if (mcall->returns_pointer() || mcall->returns_vt()) {\n+    if (mcall->returns_pointer() || mcall->returns_scalarized()) {\n@@ -1078,2 +1078,2 @@\n-    if (mcall->returns_vt()) {\n-      return_vt = true;\n+    if (mcall->returns_scalarized()) {\n+      return_scalarized = true;\n@@ -1205,1 +1205,1 @@\n-      return_vt,\n+      return_scalarized,\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-  if (save_oop_result && scope->return_vt()) {\n+  if (save_oop_result && scope->return_scalarized()) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}