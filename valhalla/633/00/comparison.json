{"files":[{"patch":"@@ -5773,9 +5773,4 @@\n-  Register tmp1 = r10, tmp2 = r11;\n-  Register fromReg;\n-  if (from->is_reg()) {\n-    fromReg = from->as_Register();\n-  } else {\n-    int st_off = from->reg2stack() * VMRegImpl::stack_slot_size;\n-    ldr(tmp1, Address(sp, st_off));\n-    fromReg = tmp1;\n-  }\n+#ifdef ASSERT\n+  bool progress = false;\n+  const int start_offset = offset();\n+#endif\n@@ -5783,0 +5778,2 @@\n+  Register tmp1 = r10, tmp2 = r11;\n+  Register fromReg = noreg;\n@@ -5792,1 +5789,0 @@\n-    Address fromAddr = Address(fromReg, off);\n@@ -5803,3 +5799,0 @@\n-    } else {\n-      assert(reg_state[idx] == reg_writable, \"must be writable\");\n-      reg_state[idx] = reg_written;\n@@ -5807,0 +5800,3 @@\n+    assert(reg_state[idx] == reg_writable, \"must be writable\");\n+    reg_state[idx] = reg_written;\n+    DEBUG_ONLY(progress = true);\n@@ -5808,0 +5804,10 @@\n+    if (fromReg == noreg) {\n+      if (from->is_reg()) {\n+        fromReg = from->as_Register();\n+      } else {\n+        int st_off = from->reg2stack() * VMRegImpl::stack_slot_size;\n+        ldr(tmp1, Address(sp, st_off));\n+        fromReg = tmp1;\n+      }\n+    }\n+    Address fromAddr = Address(fromReg, off);\n@@ -5835,0 +5841,1 @@\n+  assert(progress || (start_offset == offset()), \"should not emit code\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":20,"deletions":13,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -5666,8 +5666,4 @@\n-  Register fromReg;\n-  if (from->is_reg()) {\n-    fromReg = from->as_Register();\n-  } else {\n-    int st_off = from->reg2stack() * VMRegImpl::stack_slot_size + wordSize;\n-    movq(r10, Address(rsp, st_off));\n-    fromReg = r10;\n-  }\n+#ifdef ASSERT\n+  bool progress = false;\n+  const int start_offset = offset();\n+#endif\n@@ -5675,0 +5671,1 @@\n+  Register fromReg = noreg;\n@@ -5684,1 +5681,0 @@\n-    Address fromAddr = Address(fromReg, off);\n@@ -5688,5 +5684,5 @@\n-     if (idx != from->value()) {\n-       mark_done = false;\n-     }\n-     done = false;\n-     continue;\n+      if (idx != from->value()) {\n+        mark_done = false;\n+      }\n+      done = false;\n+      continue;\n@@ -5695,3 +5691,0 @@\n-    } else {\n-      assert(reg_state[idx] == reg_writable, \"must be writable\");\n-      reg_state[idx] = reg_written;\n@@ -5699,0 +5692,3 @@\n+    assert(reg_state[idx] == reg_writable, \"must be writable\");\n+    reg_state[idx] = reg_written;\n+    DEBUG_ONLY(progress = true);\n@@ -5700,0 +5696,10 @@\n+    if (fromReg == noreg) {\n+      if (from->is_reg()) {\n+        fromReg = from->as_Register();\n+      } else {\n+        int st_off = from->reg2stack() * VMRegImpl::stack_slot_size + wordSize;\n+        movq(r10, Address(rsp, st_off));\n+        fromReg = r10;\n+      }\n+    }\n+    Address fromAddr = Address(fromReg, off);\n@@ -5727,0 +5733,1 @@\n+  assert(progress || (start_offset == offset()), \"should not emit code\");\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -77,3 +77,0 @@\n-# Valhalla\n-compiler\/valhalla\/inlinetypes\/TestCallingConvention.java 8281325 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}