{"files":[{"patch":"@@ -685,9 +685,1 @@\n-void BarrierSetC2::clone(GraphKit* kit, Node* src_base, Node* dst_base, Node* countx, bool is_array) const {\n-#ifdef ASSERT\n-  intptr_t src_offset;\n-  Node* src = AddPNode::Ideal_base_and_offset(src_base, &kit->gvn(), src_offset);\n-  intptr_t dst_offset;\n-  Node* dst = AddPNode::Ideal_base_and_offset(dst_base, &kit->gvn(), dst_offset);\n-  assert(src == NULL || (src_offset % BytesPerLong == 0), \"expect 8 bytes alignment\");\n-  assert(dst == NULL || (dst_offset % BytesPerLong == 0), \"expect 8 bytes alignment\");\n-#endif\n+void BarrierSetC2::clone(GraphKit* kit, Node* src_base, Node* dst_base, Node* size, bool is_array) const {\n@@ -695,0 +687,1 @@\n+  Node* payload_size = size;\n@@ -696,1 +689,3 @@\n-  ArrayCopyNode* ac = ArrayCopyNode::make(kit, false, src_base, offset, dst_base, offset, countx, true, false);\n+  payload_size = kit->gvn().transform(new SubXNode(payload_size, offset));\n+  payload_size = kit->gvn().transform(new URShiftXNode(payload_size, kit->intcon(LogBytesPerLong)));\n+  ArrayCopyNode* ac = ArrayCopyNode::make(kit, false, src_base, offset, dst_base, offset, payload_size, true, false);\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -245,1 +245,1 @@\n-  virtual void clone(GraphKit* kit, Node* src_base, Node* dst_base, Node* countx, bool is_array) const;\n+  virtual void clone(GraphKit* kit, Node* src_base, Node* dst_base, Node* size, bool is_array) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,2 +128,2 @@\n-void CardTableBarrierSetC2::clone(GraphKit* kit, Node* src_base, Node* dst_base, Node* countx, bool is_array) const {\n-  BarrierSetC2::clone(kit, src_base, dst_base, countx, is_array);\n+void CardTableBarrierSetC2::clone(GraphKit* kit, Node* src, Node* dst, Node* size, bool is_array) const {\n+  BarrierSetC2::clone(kit, src, dst, size, is_array);\n@@ -144,1 +144,1 @@\n-                 dst_base,\n+                 dst,\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  virtual void clone(GraphKit* kit, Node* src_base, Node* dst_base, Node* countx, bool is_array) const;\n+  virtual void clone(GraphKit* kit, Node* src, Node* dst, Node* size, bool is_array) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1766,2 +1766,2 @@\n-void GraphKit::access_clone(Node* src_base, Node* dst_base, Node* countx, bool is_array) {\n-  return _barrier_set->clone(this, src_base, dst_base, countx, is_array);\n+void GraphKit::access_clone(Node* src, Node* dst, Node* size, bool is_array) {\n+  return _barrier_set->clone(this, src, dst, size, is_array);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -660,1 +660,1 @@\n-  void access_clone(Node* src_base, Node* dst_base, Node* countx, bool is_array);\n+  void access_clone(Node* src, Node* dst, Node* size, bool is_array);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4432,8 +4432,1 @@\n-  \/\/ Exclude the header but include array length to copy by 8 bytes words.\n-  \/\/ Can't use base_offset_in_bytes(bt) since basic type is unknown.\n-  int base_off = BarrierSetC2::arraycopy_payload_base_offset(is_array);\n-  Node* countx = size;\n-  countx = _gvn.transform(new SubXNode(countx, MakeConX(base_off)));\n-  countx = _gvn.transform(new URShiftXNode(countx, intcon(LogBytesPerLong)));\n-\n-  access_clone(obj, alloc_obj, countx, is_array);\n+  access_clone(obj, alloc_obj, size, is_array);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4262,1 +4262,1 @@\n-    } else if(!tinst_xk && this_klass->is_subtype_of(tinst_klass) && (!tinst_flatten_array || this_flatten_array)) {\n+    } else if (!tinst_xk && this_klass->is_subtype_of(tinst_klass) && (!tinst_flatten_array || this_flatten_array)) {\n@@ -4266,1 +4266,1 @@\n-    } else if(!this_xk && tinst_klass->is_subtype_of(this_klass) && (!this_flatten_array || tinst_flatten_array)) {\n+    } else if (!this_xk && tinst_klass->is_subtype_of(this_klass) && (!this_flatten_array || tinst_flatten_array)) {\n@@ -4322,1 +4322,1 @@\n-    return make(ptr, k, false, NULL, off, false, instance_id, speculative, depth);\n+    return make(ptr, k, false, NULL, off, flatten_array() && tinst->flatten_array(), instance_id, speculative, depth);\n@@ -5780,1 +5780,1 @@\n-    return make(ptr, k, off, false, is_not_flat, is_not_null_free);\n+    return make(ptr, k, off, this->flatten_array() && tkls->flatten_array(), is_not_flat, is_not_null_free);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}