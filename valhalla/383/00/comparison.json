{"files":[{"patch":"@@ -649,2 +649,1 @@\n-  if (x->klass()->is_loaded() && !x->klass()->is_inlinetype()) {\n-    \/\/ Don't canonicalize for non-nullable types -- we need to throw NPE.\n+  if (x->klass()->is_loaded()) {\n@@ -662,0 +661,1 @@\n+        assert(!x->klass()->is_inlinetype() || x->klass() == klass, \"Inline klasses can't have subtypes\");\n@@ -666,2 +666,2 @@\n-    \/\/ checkcast of null returns null\n-    if (obj->as_Constant() && obj->type()->as_ObjectType()->constant_value()->is_null_object()) {\n+    \/\/ checkcast of null returns null for non-inline klasses\n+    if (!x->klass()->is_inlinetype() && obj->as_Constant() && obj->type()->as_ObjectType()->constant_value()->is_null_object()) {\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2046,2 +2046,1 @@\n-void GraphBuilder::withfield(int field_index)\n-{\n+void GraphBuilder::withfield(int field_index) {\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -959,0 +959,17 @@\n+\n+    \/\/ Test NPE when casting constant null to inline type\n+    @Test()\n+    public MyValue1 test40() throws Throwable {\n+        Object NULL = null;\n+        return (MyValue1)NULL;\n+    }\n+\n+    @DontCompile\n+    public void test40_verifier(boolean warmup) throws Throwable {\n+        try {\n+            test40();\n+            throw new RuntimeException(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+            \/\/ Expected\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-package compiler.valhalla.inlinetypes;\n+package runtime.valhalla.inlinetypes;\n@@ -33,1 +33,1 @@\n- * @run main\/othervm compiler.valhalla.inlinetypes.TestFieldTypeMismatch\n+ * @run main\/othervm runtime.valhalla.inlinetypes.TestFieldTypeMismatch\n@@ -49,1 +49,1 @@\n-                \"Class compiler\/valhalla\/inlinetypes\/TestFieldTypeMismatchHelper expects class compiler.valhalla.inlinetypes.MyValue to be an inline type, but it is not\");\n+                \"Class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchHelper expects class runtime.valhalla.inlinetypes.MyValue to be an inline type, but it is not\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatch.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public class compiler\/valhalla\/inlinetypes\/TestFieldTypeMismatchHelper version 61:0 {\n+public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchHelper version 61:0 {\n@@ -27,1 +27,1 @@\n-    Field field:\"Qcompiler\/valhalla\/inlinetypes\/MyValue;\";\n+    Field field:\"Qruntime\/valhalla\/inlinetypes\/MyValue;\";\n@@ -40,1 +40,1 @@\n-        putfield Field field:\"Qcompiler\/valhalla\/inlinetypes\/MyValue;\";\n+        putfield Field field:\"Qruntime\/valhalla\/inlinetypes\/MyValue;\";\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchHelper.jasm","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}