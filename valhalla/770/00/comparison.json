{"files":[{"patch":"@@ -645,1 +645,1 @@\n-        return (this.getModifiers() & Modifier.IDENTITY) != 0;\n+        return isArray() || (this.getModifiers() & Modifier.IDENTITY) != 0;\n@@ -654,1 +654,1 @@\n-        return (this.getModifiers() & Modifier.VALUE) != 0;\n+        return !isArray() && (this.getModifiers() & Modifier.VALUE) != 0;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,6 @@\n+ * <p>\n+ * Subclasses of {@code java.lang.Object} can be either identity classes or value classes.\n+ * The class {@code Object} itself is neither an identity class nor a value class.\n+ * See {@jls The Java Language Specification  8.1.1.5 identity and value Classes}.\n+ * An Instance can be created with {@code new Object()}, those instances are\n+ * {@link Objects#isIdentityObject(Object) an identity object}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Object.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.misc.ValhallaFeatures;\n@@ -192,0 +193,11 @@\n+   \/**\n+     * {@return {@code true} if the object is an identity object, otherwise {@code false}}\n+     * @param o an object\n+     *\/\n+\/\/    @IntrinsicCandidate\n+    public static boolean isIdentityObject(Object o) {\n+        return o.getClass().isIdentity() ||\n+                o.getClass() == Object.class ||\n+                !ValhallaFeatures.isEnabled(); \/\/ Before Valhalla all objects are identity objects.\n+    }\n+\n@@ -205,3 +217,2 @@\n-        var cl = obj.getClass();\n-        if (cl.isValue())\n-            throw new IdentityException(cl);\n+        if (!isIdentityObject(obj))\n+            throw new IdentityException(obj.getClass());\n@@ -226,1 +237,1 @@\n-        if (obj.getClass().isValue())\n+        if (!isIdentityObject(obj))\n@@ -246,1 +257,1 @@\n-        if (obj.getClass().isValue())\n+        if (!isIdentityObject(obj))\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Objects;\n@@ -72,0 +73,25 @@\n+\n+    @DataProvider(name=\"Identities\")\n+    Object[][] identitiesData() {\n+        return new Object[][]{\n+                {new Object(), true},\n+                {\"String\", true},\n+                {String.class, true},\n+                {Object.class, true},\n+                {new ValueType1(1), false},\n+                {new ValueType2(2), false},\n+                {new PrimitiveRecord(1, \"A\"), false},\n+                {new ValueRecord(1,\"B\"), false},\n+                {new int[0], true},  \/\/ arrays of primitives classes are identity objects\n+                {new Object[0], true},  \/\/ arrays of identity classes are identity objects\n+                {new String[0], true},  \/\/ arrays of identity classes are identity objects\n+                {new ValueType1[0], true},  \/\/ arrays of value classes are identity objects\n+        };\n+    }\n+\n+    @Test(dataProvider=\"Identities\")\n+    void identityTests(Object obj, boolean expected) {\n+        var actual = Objects.isIdentityObject(obj);\n+        assertEquals(expected, actual, \"Objects.isIdentityObject unexpected\");\n+    }\n+\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import org.junit.*;\n+import static org.junit.Assert.*;\n+\n@@ -32,3 +35,3 @@\n- * @run main\/othervm ValhallaFeaturesTest true\n- * @run main\/othervm -XX:+EnableValhalla ValhallaFeaturesTest true\n- * @run main\/othervm -XX:-EnableValhalla ValhallaFeaturesTest false\n+ * @run junit\/othervm -Dexpected=true ValhallaFeaturesTest\n+ * @run junit\/othervm -XX:+EnableValhalla -Dexpected=true ValhallaFeaturesTest\n+ * @run junit\/othervm -XX:-EnableValhalla -Dexpected=false ValhallaFeaturesTest\n@@ -39,2 +42,5 @@\n-    public static void main(String[] args) {\n-        boolean expected = args.length > 0 ? args[0].equalsIgnoreCase(\"true\") : false;\n+    \/\/ Save the expected enable from the command line -Dexpected\n+    private static boolean expected = Boolean.getBoolean(\"expected\");\n+\n+    @Test\n+    public void checkEnable() {\n@@ -43,3 +49,2 @@\n-        if (expected != enabled) {\n-            throw new RuntimeException(\"expected: \" + expected + \", actual: \" + enabled);\n-        }\n+        assertEquals(\"EnableValhalla Flag\", expected, enabled);\n+    }\n@@ -47,1 +52,4 @@\n-        try {\n+    @Test\n+    public void checkEnsure() {\n+        if (expected) {\n+            \/\/ Throwing an exception is an error\n@@ -49,7 +57,3 @@\n-            if (!enabled) {\n-                throw new RuntimeException(\"ensureValhallaEnabled should have thrown UOE\");\n-            }\n-        } catch (UnsupportedOperationException uoe) {\n-            if (enabled) {\n-                throw new RuntimeException(\"UnsupportedOperationException not expected\", uoe);\n-            }\n+        } else {\n+            assertThrows(\"EnableValhalla Flag\", UnsupportedOperationException.class,\n+                    () -> ValhallaFeatures.ensureValhallaEnabled());\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValhallaFeaturesTest.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"}]}