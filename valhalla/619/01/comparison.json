{"files":[{"patch":"@@ -1193,1 +1193,1 @@\n-            } else if (cl.isPrimitiveClass()) {\n+            } else if (cl.isValue()) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -507,1 +507,0 @@\n-        boolean isPrimitiveClass = cl.isPrimitiveClass();\n@@ -579,2 +578,2 @@\n-            } else if (isPrimitiveClass && writeReplaceMethod == null) {\n-                deserializeEx = new ExceptionInfo(name, \"primitive class\");\n+            } else if (cl.isValue() && writeReplaceMethod == null) {\n+                deserializeEx = new ExceptionInfo(name, cl.isPrimitiveClass() ? \"primitive class\" : \"value class\");\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -205,0 +205,2 @@\n+    private static final int VALUE_CLASS     = 0x00000100;\n+    private static final int PERMITS_VALUE   = 0x00000040;\n@@ -241,0 +243,3 @@\n+        if (isValue()) {\n+            s = \"value \";\n+        }\n@@ -310,2 +315,2 @@\n-                if (isPrimitiveClass()) {\n-                    sb.append(\"primitive \");\n+                if (isValue()) {\n+                    sb.append(isPrimitiveClass() ? \"primitive\" : \"value\");\n@@ -608,1 +613,1 @@\n-     * {@linkplain #isValueType() secondary type} representing\n+     * {@linkplain #isPrimitiveValueType() secondary type} representing\n@@ -613,0 +618,2 @@\n+     * <p>\n+     * A primitive class is a {@linkplain #isValue() value class}.\n@@ -615,0 +622,1 @@\n+     * @see #isValue()\n@@ -623,0 +631,11 @@\n+    \/**\n+     * Returns {@code true} if this class is a value class.\n+     *\n+     * @return {@code true} if this class is a value class;\n+     * otherwise {@code false}\n+     * @since Valhalla\n+     *\/\n+    public boolean isValue() {\n+        return (this.getModifiers() & VALUE_CLASS) != 0;\n+    }\n+\n@@ -653,1 +672,1 @@\n-     * @return the {@code Class} representing the {@linkplain #isValueType()\n+     * @return the {@code Class} representing the {@linkplain #isPrimitiveValueType()\n@@ -697,2 +716,2 @@\n-     * @return {@code true} if this {@code Class} object represents the\n-     * value type of a primitive class\n+     * @return {@code true} if this {@code Class} object represents\n+     * the value type of a primitive class\n@@ -701,1 +720,1 @@\n-    public boolean isValueType() {\n+    public boolean isPrimitiveValueType() {\n@@ -4051,1 +4070,1 @@\n-     * @throws NullPointerException if this class is an {@linkplain #isValueType()\n+     * @throws NullPointerException if this class is an {@linkplain #isPrimitiveValueType()\n@@ -4059,1 +4078,1 @@\n-        if (isValueType() && obj == null)\n+        if (isPrimitiveValueType() && obj == null)\n@@ -4573,1 +4592,1 @@\n-        char typeDesc = isValueType() ? 'Q' : 'L';\n+        char typeDesc = isPrimitiveValueType() ? 'Q' : 'L';\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-\n+ *\n@@ -62,1 +62,1 @@\n- * @since 1.18\n+ * @since Valhalla\n","filename":"src\/java.base\/share\/classes\/java\/lang\/IdentityObject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * @since 1.18\n+ * @since Valhalla\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ValueObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -263,1 +263,1 @@\n-     * {@linkplain Class#isValueType() primitive value type}.\n+     * {@linkplain Class#isPrimitiveValueType() primitive value type}.\n@@ -268,1 +268,1 @@\n-    default boolean isValueType() {\n+    default boolean isPrimitiveValueType() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -404,1 +404,1 @@\n-        if (fromType.isPrimitiveClass() && toType.isPrimitiveClass()) {\n+        if (fromType.isValue() && toType.isValue()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        assert(ctor.isObjectConstructor() && !ctor.getDeclaringClass().isPrimitiveClass()) : ctor;\n+        assert(ctor.isObjectConstructor() && !ctor.getDeclaringClass().isValue()) : ctor;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-        assert(!clazz.isPrimitiveClass() || !isField() || Modifier.isFinal(flags));\n+        assert(!clazz.isValue() || !isField() || Modifier.isFinal(flags));\n@@ -482,1 +482,1 @@\n-            return type.isValueType();\n+            return type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import java.lang.reflect.ReflectPermission;\n@@ -4321,1 +4320,1 @@\n-     * is {@code null} or if the array's element type is a {@link Class#isValueType()\n+     * is {@code null} or if the array's element type is a {@link Class#isPrimitiveValueType()\n@@ -5097,1 +5096,2 @@\n-        } else if (type.isPrimitiveClass()) {\n+        } else if (type.isValue()) {\n+            \/\/ TBD\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -226,2 +226,2 @@\n-            \/\/ the redundant componentType.isValue() check is there to\n-            \/\/ minimize the performance impact to non-value array.\n+            \/\/ the redundant componentType.isPrimitiveValueType() check is\n+            \/\/ there to minimize the performance impact to non-value array.\n@@ -229,2 +229,1 @@\n-\n-            return maybeAdapt(componentType.isValueType() && UNSAFE.isFlattenedArray(arrayClass)\n+            return maybeAdapt(componentType.isPrimitiveValueType() && UNSAFE.isFlattenedArray(arrayClass)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-            if (handle.fieldType.isValueType())\n+            if (handle.fieldType.isPrimitiveValueType())\n@@ -504,1 +504,1 @@\n-            if (handle.fieldType.isValueType())\n+            if (handle.fieldType.isPrimitiveValueType())\n@@ -747,1 +747,1 @@\n-        assert componentType.isValueType() && UNSAFE.isFlattenedArray(arrayClass);\n+        assert componentType.isPrimitiveValueType() && UNSAFE.isFlattenedArray(arrayClass);\n@@ -806,1 +806,1 @@\n-            if (handle.componentType.isValueType())\n+            if (handle.componentType.isPrimitiveValueType())\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,3 @@\n- * The referent must not be an instance of a primitive class; such a value\n- * can never have another reference to it and cannot be held in a reference type.\n+ * The referent must not be an instance of a {@linkplain Class#isValue()\n+ * value class}; such a value can never have another reference to it\n+ * and cannot be held in a reference type.\n@@ -93,1 +94,1 @@\n-     *         {@link Class#isPrimitiveClass() primitive class}\n+     *         {@link Class#isValue() value class}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/PhantomReference.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -500,3 +500,5 @@\n-        if (referent != null && referent.getClass().isPrimitiveClass()) {\n-            throw new IllegalArgumentException(\"cannot reference a primitive type: \" +\n-                    referent.getClass().getName());\n+        if (referent != null && referent.getClass().isValue()) {\n+            Class<?> c = referent.getClass();\n+            throw new IllegalArgumentException(\"cannot reference a \" +\n+                    (c.isPrimitiveClass() ? \"primitive class \" : \"value class \") +\n+                    c.getName());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n- * The referent must not be an instance of a primitive class; such a value\n- * can never have another reference to it and cannot be held in a reference type.\n+ * The referent must not be an instance of a {@linkplain Class#isValue()\n+ * value class}; such a value can never have another reference to it\n+ * and cannot be held in a reference type.\n@@ -87,1 +88,1 @@\n-     *         {@link Class#isPrimitiveClass() primitive class}\n+     *         {@link Class#isValue() value class}\n@@ -102,1 +103,1 @@\n-     *         {@link Class#isPrimitiveClass() primitive class}\n+     *         {@link Class#isValue() value class}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/SoftReference.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n- * The referent must not be an instance of a primitive class; such a value\n- * can never have another reference to it and cannot be held in a reference type.\n+ * The referent must not be an instance of a {@linkplain Class#isValue()\n+ * value class}; such a value can never have another reference to it\n+ * and cannot be held in a reference type.\n@@ -59,1 +60,1 @@\n-     *         {@link Class#isPrimitiveClass() primitive class}\n+     *         {@link Class#isValue() value class}\n@@ -73,1 +74,1 @@\n-     *         {@link Class#isPrimitiveClass() primitive class}\n+     *         {@link Class#isValue() value class}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/WeakReference.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-     * <li>fields declared in a {@linkplain Class#isPrimitiveClass() primitive class}<\/li>\n+     * <li>fields declared in a {@linkplain Class#isValue() value class}<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessibleObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -770,2 +770,2 @@\n-     * <li>the field's declaring class is not a {@linkplain Class#isPrimitiveClass()\n-     *     primitive class}; and<\/li>\n+     * <li>the field's declaring class is not a {@linkplain Class#isValue()\n+     *     value class}; and<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -869,1 +869,1 @@\n-                if (type.isValueType()) {\n+                if (type.isPrimitiveValueType()) {\n@@ -934,1 +934,1 @@\n-            if (cl.isValueType()) {\n+            if (cl.isPrimitiveValueType()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-            assert type.isValueType();\n+            assert type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n@@ -139,1 +139,1 @@\n-                                 guardWithTest(IS_SAME_PRIMITIVE_CLASS.asType(mt),\n+                                 guardWithTest(IS_SAME_VALUE_CLASS.asType(mt),\n@@ -145,1 +145,1 @@\n-            assert type.isValueType();\n+            assert type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n@@ -180,1 +180,1 @@\n-            return a.getClass().isPrimitiveClass() ? valueEq(a, b) : (a == b);\n+            return a.getClass().isValue() ? valueEq(a, b) : (a == b);\n@@ -187,1 +187,1 @@\n-            assert a != null && b != null && isSamePrimitiveClass(a, b);\n+            assert a != null && b != null && isSameValueClass(a, b);\n@@ -189,1 +189,4 @@\n-                Class<?> type = a.getClass().asValueType();\n+                Class<?> type = a.getClass();\n+                if (type.isPrimitiveClass()) {\n+                    type = type.asValueType();\n+                }\n@@ -212,1 +215,1 @@\n-        private static boolean isSamePrimitiveClass(Object a, Object b) {\n+        private static boolean isSameValueClass(Object a, Object b) {\n@@ -215,1 +218,1 @@\n-            return a.getClass().isPrimitiveClass() && a.getClass() == b.getClass();\n+            return a.getClass().isValue() && a.getClass() == b.getClass();\n@@ -236,2 +239,2 @@\n-        private static final MethodHandle IS_SAME_PRIMITIVE_CLASS =\n-            findStatic(\"isSamePrimitiveClass\", methodType(boolean.class, Object.class, Object.class));\n+        private static final MethodHandle IS_SAME_VALUE_CLASS =\n+            findStatic(\"isSameValueClass\", methodType(boolean.class, Object.class, Object.class));\n@@ -416,1 +419,1 @@\n-        if (type.isValueType())\n+        if (type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass())) {\n@@ -418,1 +421,1 @@\n-\n+        }\n@@ -425,1 +428,1 @@\n-            return MethodHandleBuilder.primitiveTypeEquals(type.asValueType());\n+            return MethodHandleBuilder.primitiveTypeEquals(type);\n@@ -435,0 +438,1 @@\n+        Class<?> c = o.getClass();\n@@ -438,3 +442,3 @@\n-            if (!o.getClass().isPrimitiveClass())\n-                throw new InternalError(\"must be primitive type: \" + o.getClass().getName());\n-            Class<?> type = o.getClass().asValueType();\n+            if (!c.isValue())\n+                throw new InternalError(\"must be value or primitive class: \" + c.getName());\n+            Class<?> type = c.isPrimitiveClass() ? c.asValueType() : c;\n@@ -452,1 +456,1 @@\n-            return MethodHandleBuilder.primitiveTypeHashCode(type.asValueType());\n+            return MethodHandleBuilder.primitiveTypeHashCode(type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/PrimitiveObjectMethods.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-        if (ref == null && pc.isValueType()) {\n+        if (ref == null && pc.isPrimitiveValueType()) {\n@@ -282,1 +282,1 @@\n-        if (ref == null && pc.isValueType()) {\n+        if (ref == null && pc.isPrimitiveValueType()) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        boolean isStaticFactory = declaringClass.isPrimitiveClass();\n+        boolean isStaticFactory = declaringClass.isValue();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodAccessorGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-        assertTrue(cls.isValueType());\n+        assertTrue(cls.isPrimitiveValueType());\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-                return aClass != null && aClass.isValueType();\n+                return aClass != null && aClass.isPrimitiveValueType();\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,0 +74,7 @@\n+    static value class Value {\n+        int v;\n+        Value(int v) {\n+            this.v = v;\n+        }\n+    }\n+\n@@ -80,0 +87,1 @@\n+            new Object[] { Value.class, Value.class.asPrimaryType()},\n@@ -98,0 +106,1 @@\n+                new Object[] { Value.class, true},\n@@ -121,1 +130,1 @@\n-        assertFalse(refType.isValueType());\n+        assertFalse(refType.isPrimitiveValueType());\n@@ -123,1 +132,1 @@\n-        assertTrue(valType.isValueType());\n+        assertTrue(valType.isPrimitiveValueType());\n@@ -172,0 +181,2 @@\n+                new Object[] { \"BasicTest$Value\", Value.class},\n+                new Object[] { \"[LBasicTest$Value;\", Value[].class},\n@@ -237,4 +248,13 @@\n-    @Test\n-    public void testConstructor() throws ReflectiveOperationException {\n-        Constructor<?> ctor = Point.class.getDeclaredConstructor(int.class, int.class);\n-        assertTrue(ctor.getDeclaringClass() == Point.class.asPrimaryType());\n+    @DataProvider(name=\"ctors\")\n+    static Object[][] ctors() {\n+        return new Object[][]{\n+                new Object[] { Point.class, new Class<?>[] { int.class, int.class}, new Object[] { 10, 10 }},\n+                new Object[] { Value.class, new Class<?>[] { int.class }, new Object[] { 20 }},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"ctors\")\n+    public void testConstructor(Class<?> c, Class<?>[] paramTypes, Object[] params) throws ReflectiveOperationException {\n+        Constructor<?> ctor = c.getDeclaredConstructor(paramTypes);\n+        assertTrue(ctor.getDeclaringClass() == c.asPrimaryType());\n+        Object o = ctor.newInstance(params);\n@@ -250,0 +270,1 @@\n+        Value value = new Value(10);\n@@ -257,0 +278,1 @@\n+                new Object[]{ value, new Class<?>[] { ValueObject.class }},\n@@ -264,1 +286,1 @@\n-        if (type.isPrimitiveClass()) {\n+        if (type.isValueClass()) {\n@@ -285,0 +307,1 @@\n+                            Value.class,\n","filename":"test\/jdk\/valhalla\/valuetypes\/BasicTest.java","additions":30,"deletions":7,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-            assertFalse(elementType.isValueType(), \"should fail to set a primitive class array element to null\");\n+            assertFalse(elementType.isPrimitiveValueType(), \"should fail to set a primitive class array element to null\");\n@@ -151,1 +151,1 @@\n-            assertTrue(elementType.isValueType(), \"should only fail to set a primitive class array element to null\");\n+            assertTrue(elementType.isPrimitiveValueType(), \"should only fail to set a primitive class array element to null\");\n@@ -233,1 +233,1 @@\n-        assertTrue(f.getType().isValueType() == isValue);\n+        assertTrue(f.getType().isPrimitiveValueType() == isValue);\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+\n@@ -73,0 +74,4 @@\n+            new Object[] { new ValueOptional(p1), new ValueOptional(p1)},\n+            new Object[] { new ValueOptional(p1), new ValueOptional(Point.makePoint(10, 10))},\n+            new Object[] { new ValueOptional(list), new ValueOptional(list)},\n+            new Object[] { new ValueOptional(null), new ValueOptional(null)},\n@@ -106,0 +111,2 @@\n+            new Object[] { new ValueOptional(point), new ValueOptional(mpath)},\n+            new Object[] { new ValueOptional(Value.Number.intValue(1)), new ValueOptional(Value.Number.shortValue((short)1))},\n","filename":"test\/jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-        sb.append(c.isValueType() ? \"Q\" : \"L\").append(c.getName()).append(\";\");\n+        sb.append(c.isPrimitiveValueType() ? \"Q\" : \"L\").append(c.getName()).append(\";\");\n@@ -145,1 +145,1 @@\n-        if (!componentType.isValueType()) {\n+        if (!componentType.isPrimitiveValueType()) {\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        assertTrue(cd.isValueType() == type.isValueType());\n+        assertTrue(cd.isPrimitiveValueType() == type.isPrimitiveValueType());\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueConstantDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public value class ValueOptional {\n+    private Object o;\n+    public ValueOptional(Object o) {\n+        this.o = o;\n+    }\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueOptional.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"}]}