{"files":[{"patch":"@@ -1193,1 +1193,1 @@\n-            } else if (cl.isValueClass()) {\n+            } else if (cl.isValue()) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-            } else if (cl.isValueClass() && writeReplaceMethod == null) {\n+            } else if (cl.isValue() && writeReplaceMethod == null) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-        if (isValueClass()) {\n+        if (isValue()) {\n@@ -315,1 +315,1 @@\n-                if (isValueClass()) {\n+                if (isValue()) {\n@@ -619,1 +619,1 @@\n-     * A primitive class is a {@linkplain #isValueClass() value class}.\n+     * A primitive class is a {@linkplain #isValue() value class}.\n@@ -622,1 +622,1 @@\n-     * @see #isValueClass()\n+     * @see #isValue()\n@@ -638,1 +638,1 @@\n-    public boolean isValueClass() {\n+    public boolean isValue() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -404,1 +404,1 @@\n-        if (fromType.isValueClass() && toType.isValueClass()) {\n+        if (fromType.isValue() && toType.isValue()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        assert(ctor.isObjectConstructor() && !ctor.getDeclaringClass().isValueClass()) : ctor;\n+        assert(ctor.isObjectConstructor() && !ctor.getDeclaringClass().isValue()) : ctor;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-        assert(!clazz.isValueClass() || !isField() || Modifier.isFinal(flags));\n+        assert(!clazz.isValue() || !isField() || Modifier.isFinal(flags));\n@@ -482,1 +482,1 @@\n-            return type.isPrimitiveValueType() || (type.isValueClass() && !type.isPrimitiveClass());\n+            return type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5096,1 +5096,1 @@\n-        } else if (type.isValueClass()) {\n+        } else if (type.isValue()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * The referent must not be an instance of a {@linkplain Class#isValueClass()\n+ * The referent must not be an instance of a {@linkplain Class#isValue()\n@@ -94,1 +94,1 @@\n-     *         {@link Class#isValueClass() value class}\n+     *         {@link Class#isValue() value class}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/PhantomReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-        if (referent != null && referent.getClass().isValueClass()) {\n+        if (referent != null && referent.getClass().isValue()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * The referent must not be an instance of a {@linkplain Class#isValueClass()\n+ * The referent must not be an instance of a {@linkplain Class#isValue()\n@@ -88,1 +88,1 @@\n-     *         {@link Class#isValueClass() value class}\n+     *         {@link Class#isValue() value class}\n@@ -103,1 +103,1 @@\n-     *         {@link Class#isValueClass() value class}\n+     *         {@link Class#isValue() value class}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/SoftReference.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * The referent must not be an instance of a {@linkplain Class#isValueClass()\n+ * The referent must not be an instance of a {@linkplain Class#isValue()\n@@ -60,1 +60,1 @@\n-     *         {@link Class#isValueClass() value class}\n+     *         {@link Class#isValue() value class}\n@@ -74,1 +74,1 @@\n-     *         {@link Class#isValueClass() value class}\n+     *         {@link Class#isValue() value class}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/WeakReference.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-     * <li>fields declared in a {@linkplain Class#isValueClass() value class}<\/li>\n+     * <li>fields declared in a {@linkplain Class#isValue() value class}<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessibleObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -770,1 +770,1 @@\n-     * <li>the field's declaring class is not a {@linkplain Class#isValueClass()\n+     * <li>the field's declaring class is not a {@linkplain Class#isValue()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-            assert type.isPrimitiveValueType() || (type.isValueClass() && !type.isPrimitiveClass());\n+            assert type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n@@ -145,1 +145,1 @@\n-            assert type.isPrimitiveValueType() || (type.isValueClass() && !type.isPrimitiveClass());\n+            assert type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n@@ -180,1 +180,1 @@\n-            return a.getClass().isValueClass() ? valueEq(a, b) : (a == b);\n+            return a.getClass().isValue() ? valueEq(a, b) : (a == b);\n@@ -218,1 +218,1 @@\n-            return a.getClass().isValueClass() && a.getClass() == b.getClass();\n+            return a.getClass().isValue() && a.getClass() == b.getClass();\n@@ -419,1 +419,1 @@\n-        if (type.isPrimitiveValueType() || (type.isValueClass() && !type.isPrimitiveClass())) {\n+        if (type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass())) {\n@@ -442,1 +442,1 @@\n-            if (!c.isValueClass())\n+            if (!c.isValue())\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/PrimitiveObjectMethods.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        boolean isStaticFactory = declaringClass.isValueClass();\n+        boolean isStaticFactory = declaringClass.isValue();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodAccessorGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}