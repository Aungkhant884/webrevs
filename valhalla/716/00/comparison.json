{"files":[{"patch":"@@ -1209,0 +1209,13 @@\n+            \/\/ where\n+                boolean compareTypeArgsRecursive(Type t, Type s) {\n+                    return compareTypeArgs(t.getTypeArguments(), s.getTypeArguments());\n+                }\n+\n+                boolean compareTypeArgs(List<Type> ts, List<Type> ss) {\n+                    while (ts.nonEmpty() && ss.nonEmpty()\n+                            && visit(ts.head, ss.head, false)) {\n+                        ts = ts.tail;\n+                        ss = ss.tail;\n+                    }\n+                    return ts.isEmpty() && ss.isEmpty();\n+                }\n@@ -1217,11 +1230,13 @@\n-            boolean compareWildcardHelper(WildcardType t, Type s) {\n-                \/\/ let's remove captured if any\n-                if (s.hasTag(TYPEVAR)) {\n-                    TypeVar v = (TypeVar) s;\n-                    s = v.isCaptured() ? ((CapturedType)v).wildcard : s;\n-                }\n-                if (!s.hasTag(WILDCARD) || ((WildcardType)s).kind != t.kind) return false;\n-                if (t.isExtendsBound()) {\n-                    return visit(wildUpperBound(s), wildUpperBound(t));\n-                } else {\n-                    return visit(wildLowerBound(s), wildLowerBound(t));\n+            \/\/ where\n+                boolean compareWildcardHelper(WildcardType t, Type s) {\n+                    \/\/ let's remove captured if any\n+                    if (s.hasTag(TYPEVAR)) {\n+                        TypeVar v = (TypeVar) s;\n+                        s = v.isCaptured() ? ((CapturedType)v).wildcard : s;\n+                    }\n+                    if (!s.hasTag(WILDCARD) || ((WildcardType)s).kind != t.kind) return false;\n+                    if (t.isExtendsBound()) {\n+                        return visit(wildUpperBound(s), wildUpperBound(t));\n+                    } else {\n+                        return visit(wildLowerBound(s), wildLowerBound(t));\n+                    }\n@@ -1229,1 +1244,0 @@\n-            }\n@@ -1247,56 +1261,0 @@\n-\n-            public boolean compareTypeArgsRecursive(Type t, Type s) {\n-                TypePair pair = new TypePair(t, s);\n-                if (cache.add(pair)) {\n-                    try {\n-                        return compareTypeArgs(t.getTypeArguments(), s.getTypeArguments());\n-                    } finally {\n-                        cache.remove(pair);\n-                    }\n-                } else {\n-                    return compareTypeArgs(t.getTypeArguments(),\n-                            rewriteSupers(s).getTypeArguments());\n-                }\n-            }\n-\n-            boolean compareTypeArgs(List<Type> ts, List<Type> ss) {\n-                while (ts.nonEmpty() && ss.nonEmpty()\n-                        && visit(ts.head, ss.head, false)) {\n-                    ts = ts.tail;\n-                    ss = ss.tail;\n-                }\n-                return ts.isEmpty() && ss.isEmpty();\n-            }\n-        }\n-\n-        Type rewriteSupers(Type t) {\n-            if (!t.isParameterized())\n-                return t;\n-            ListBuffer<Type> from = new ListBuffer<>();\n-            ListBuffer<Type> to = new ListBuffer<>();\n-            adaptSelf(t, from, to);\n-            if (from.isEmpty())\n-                return t;\n-            ListBuffer<Type> rewrite = new ListBuffer<>();\n-            boolean changed = false;\n-            for (Type orig : to.toList()) {\n-                Type s = rewriteSupers(orig);\n-                if (s.isSuperBound() && !s.isExtendsBound()) {\n-                    s = new WildcardType(syms.objectType,\n-                            BoundKind.UNBOUND,\n-                            syms.boundClass,\n-                            s.getMetadata());\n-                    changed = true;\n-                } else if (s != orig) {\n-                    s = new WildcardType(wildUpperBound(s),\n-                            BoundKind.EXTENDS,\n-                            syms.boundClass,\n-                            s.getMetadata());\n-                    changed = true;\n-                }\n-                rewrite.append(s);\n-            }\n-            if (changed)\n-                return subst(t.tsym.type, from.toList(), rewrite.toList());\n-            else\n-                return t;\n@@ -1410,0 +1368,33 @@\n+            Type rewriteSupers(Type t) {\n+                if (!t.isParameterized())\n+                    return t;\n+                ListBuffer<Type> from = new ListBuffer<>();\n+                ListBuffer<Type> to = new ListBuffer<>();\n+                adaptSelf(t, from, to);\n+                if (from.isEmpty())\n+                    return t;\n+                ListBuffer<Type> rewrite = new ListBuffer<>();\n+                boolean changed = false;\n+                for (Type orig : to.toList()) {\n+                    Type s = rewriteSupers(orig);\n+                    if (s.isSuperBound() && !s.isExtendsBound()) {\n+                        s = new WildcardType(syms.objectType,\n+                                BoundKind.UNBOUND,\n+                                syms.boundClass,\n+                                s.getMetadata());\n+                        changed = true;\n+                    } else if (s != orig) {\n+                        s = new WildcardType(wildUpperBound(s),\n+                                BoundKind.EXTENDS,\n+                                syms.boundClass,\n+                                s.getMetadata());\n+                        changed = true;\n+                    }\n+                    rewrite.append(s);\n+                }\n+                if (changed)\n+                    return subst(t.tsym.type, from.toList(), rewrite.toList());\n+                else\n+                    return t;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":59,"deletions":68,"binary":false,"changes":127,"status":"modified"}]}