{"files":[{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+import java.lang.annotation.*;\n+import static java.lang.annotation.ElementType.*;\n+\n+\/**\n+ * A class annotated {@code @__value__} is a value class.\n+ * This is a temporary workaround to enable use of value classes\n+ * in editors and IDEs that do not yet understand the 'value' modifier.\n+ * @since 18\n+ *\/\n+@Retention(RetentionPolicy.SOURCE)\n+@Target(value={ElementType.TYPE, ElementType.TYPE_USE})\n+public @interface __value__ {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/__value__.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -66,5 +66,0 @@\n-    \/**\n-     * The modifier {@code primitive}\n-     * @since 1.17\n-     *\/\n-    PRIMITIVE,\n@@ -89,0 +84,13 @@\n+\n+    \/**\n+     * The modifier {@code primitive}\n+     * @since 18\n+     *\/\n+    PRIMITIVE,\n+\n+    \/**\n+     * The modifier {@code value}\n+     * @since 18\n+     *\/\n+    VALUE,\n+\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/Modifier.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+    public static final int ACC_VALUE    = 0x0100;\n@@ -151,3 +152,2 @@\n-    \/** Flag bit 21 is available. (used earlier to tag compiler-generated abstract methods that implement\n-     *  an interface method (Miranda methods)).\n-     *\/\n+    \/** Marks a type as a value class *\/\n+    public static final int VALUE_CLASS  = 1<<21;\n@@ -419,1 +419,1 @@\n-        LocalClassFlags                   = FINAL | ABSTRACT | ENUM | SYNTHETIC  | ACC_PRIMITIVE,\n+        LocalClassFlags                   = FINAL | ABSTRACT | ENUM | SYNTHETIC  | ACC_PRIMITIVE | ACC_VALUE,\n@@ -434,7 +434,7 @@\n-        ExtendedStandardFlags             = (long)StandardFlags | DEFAULT | SEALED | NON_SEALED | PRIMITIVE_CLASS,\n-        ExtendedMemberClassFlags          = (long)MemberClassFlags | SEALED | NON_SEALED | PRIMITIVE_CLASS,\n-        ExtendedMemberStaticClassFlags    = (long) MemberStaticClassFlags | SEALED | NON_SEALED | PRIMITIVE_CLASS,\n-        ExtendedClassFlags                = (long)ClassFlags | SEALED | NON_SEALED | PRIMITIVE_CLASS,\n-        ExtendedLocalClassFlags           = (long) LocalClassFlags | PRIMITIVE_CLASS,\n-        ExtendedStaticLocalClassFlags     = (long) StaticLocalClassFlags | PRIMITIVE_CLASS,\n-        ModifierFlags                     = ((long)StandardFlags & ~INTERFACE) | DEFAULT | SEALED | NON_SEALED | PRIMITIVE_CLASS,\n+        ExtendedStandardFlags             = (long)StandardFlags | DEFAULT | SEALED | NON_SEALED | PRIMITIVE_CLASS | VALUE_CLASS,\n+        ExtendedMemberClassFlags          = (long)MemberClassFlags | SEALED | NON_SEALED | PRIMITIVE_CLASS | VALUE_CLASS,\n+        ExtendedMemberStaticClassFlags    = (long) MemberStaticClassFlags | SEALED | NON_SEALED | PRIMITIVE_CLASS | VALUE_CLASS,\n+        ExtendedClassFlags                = (long)ClassFlags | SEALED | NON_SEALED | PRIMITIVE_CLASS | VALUE_CLASS,\n+        ExtendedLocalClassFlags           = (long) LocalClassFlags | PRIMITIVE_CLASS | VALUE_CLASS,\n+        ExtendedStaticLocalClassFlags     = (long) StaticLocalClassFlags | PRIMITIVE_CLASS | VALUE_CLASS,\n+        ModifierFlags                     = ((long)StandardFlags & ~INTERFACE) | DEFAULT | SEALED | NON_SEALED | PRIMITIVE_CLASS | VALUE_CLASS,\n@@ -467,0 +467,1 @@\n+            if (0 != (flags & VALUE_CLASS))     modifiers.add(Modifier.VALUE);\n@@ -514,0 +515,1 @@\n+        VALUE(Flags.VALUE_CLASS),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -232,1 +232,0 @@\n-        PRIMITIVE_CLASSES(JDK17, Fragments.FeaturePrimitiveClasses, DiagKind.NORMAL),\n@@ -237,0 +236,2 @@\n+        PRIMITIVE_CLASSES(JDK18, Fragments.FeaturePrimitiveClasses, DiagKind.PLURAL),\n+        VALUE_CLASSES(JDK18, Fragments.FeatureValueClasses, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -113,0 +113,4 @@\n+    \/** Switch: allow value classes.\n+     *\/\n+    boolean allowValueClasses;\n+\n@@ -285,1 +289,4 @@\n-        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source);\n+        allowPrimitiveClasses = (!preview.isPreview(Feature.PRIMITIVE_CLASSES) || preview.isEnabled()) &&\n+                Feature.PRIMITIVE_CLASSES.allowedInSource(source);\n+        allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -2792,0 +2799,6 @@\n+        if ((flags & ACC_VALUE) != 0) {\n+            flags &= ~ACC_VALUE;\n+            if (allowValueClasses) {\n+                flags |= VALUE_CLASS;\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1722,0 +1722,2 @@\n+        if ((flags & VALUE_CLASS) != 0)\n+            result |= ACC_VALUE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,0 +197,2 @@\n+        this.allowValueClasses = (!preview.isPreview(Feature.VALUE_CLASSES) || preview.isEnabled()) &&\n+                Feature.VALUE_CLASSES.allowedInSource(source);\n@@ -242,0 +244,4 @@\n+    \/** Switch: are value classes allowed in this source level?\n+     *\/\n+    boolean allowValueClasses;\n+\n@@ -2374,1 +2380,1 @@\n-                long badModifiers = (mods.flags & Flags.PRIMITIVE_CLASS) != 0 ? mods.flags & ~Flags.FINAL : mods.flags;\n+                long badModifiers = (mods.flags & (Flags.PRIMITIVE_CLASS | Flags.VALUE_CLASS)) != 0 ? mods.flags & ~Flags.FINAL : mods.flags;\n@@ -2445,1 +2451,1 @@\n-            long badModifiers = mods.flags & ~(Flags.PRIMITIVE_CLASS | Flags.FINAL);\n+            long badModifiers = mods.flags & ~(Flags.PRIMITIVE_CLASS | Flags.VALUE_CLASS | Flags.FINAL);\n@@ -2454,1 +2460,1 @@\n-                badModifiers = (mods.flags & Flags.PRIMITIVE_CLASS) != 0 ? mods.flags & ~Flags.FINAL : mods.flags;\n+                badModifiers = (mods.flags & (Flags.PRIMITIVE_CLASS | Flags.VALUE_CLASS)) != 0 ? mods.flags & ~Flags.FINAL : mods.flags;\n@@ -2805,1 +2811,1 @@\n-        if (isPrimitiveModifier()) {\n+        if ((isPrimitiveModifier() && allowPrimitiveClasses) || isValueModifier() && allowValueClasses) {\n@@ -3349,0 +3355,4 @@\n+                if (isValueModifier()) {\n+                    flag = Flags.VALUE_CLASS;\n+                    break;\n+                }\n@@ -3365,0 +3375,2 @@\n+                    } else if (name == names.__value__ || name == names.java_lang___value__) {\n+                        flag = Flags.VALUE_CLASS;\n@@ -3389,0 +3401,5 @@\n+        \/\/ Force value classes to be automatically final.\n+        if ((flags & (Flags.VALUE_CLASS | Flags.ABSTRACT | Flags.INTERFACE | Flags.ENUM)) == Flags.VALUE_CLASS) {\n+            flags |= Flags.FINAL;\n+        }\n+\n@@ -3615,1 +3632,1 @@\n-                return Source.JDK17;\n+                return Source.JDK18;\n@@ -3617,1 +3634,8 @@\n-                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK17));\n+                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK18));\n+            }\n+        }\n+        if (name == names.value) {\n+            if (allowValueClasses) {\n+                return Source.JDK18;\n+            } else if (shouldWarn) {\n+                log.warning(pos, Warnings.RestrictedTypeNotAllowedPreview(name, Source.JDK18));\n@@ -4511,1 +4535,2 @@\n-        if (allowPrimitiveClasses && token.kind == IDENTIFIER && token.name() == names.primitive) {\n+        if (token.kind == IDENTIFIER && token.name() == names.primitive) {\n+            boolean isPrimitiveModifier = false;\n@@ -4518,3 +4543,36 @@\n-                case CLASS: case INTERFACE: case ENUM: case IDENTIFIER: \/\/ new primitive Comparable() {}\n-                    checkSourceLevel(Feature.PRIMITIVE_CLASSES);\n-                    return true;\n+                case CLASS: case INTERFACE: case ENUM:\n+                    isPrimitiveModifier = true;\n+                    break;\n+                case IDENTIFIER: \/\/ primitive record R || new primitive Comparable() {}\n+                    if (next.name() == names.record || (mode & EXPR) != 0)\n+                        isPrimitiveModifier = true;\n+                    break;\n+            }\n+            if (isPrimitiveModifier) {\n+                checkSourceLevel(Feature.PRIMITIVE_CLASSES);\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    protected boolean isValueModifier() {\n+        if (token.kind == IDENTIFIER && token.name() == names.value) {\n+            boolean isValueModifier = false;\n+            Token next = S.token(1);\n+            switch (next.kind) {\n+                case PRIVATE: case PROTECTED: case PUBLIC: case STATIC: case TRANSIENT:\n+                case FINAL: case ABSTRACT: case NATIVE: case VOLATILE: case SYNCHRONIZED:\n+                case STRICTFP: case MONKEYS_AT: case DEFAULT: case BYTE: case SHORT:\n+                case CHAR: case INT: case LONG: case FLOAT: case DOUBLE: case BOOLEAN: case VOID:\n+                case CLASS: case INTERFACE: case ENUM:\n+                    isValueModifier = true;\n+                    break;\n+                case IDENTIFIER: \/\/ value record R || new value Comparable() {} ??\n+                    if (next.name() == names.record || (mode & EXPR) != 0)\n+                        isValueModifier = true;\n+                    break;\n+            }\n+            if (isValueModifier) {\n+                checkSourceLevel(Feature.VALUE_CLASSES);\n+                return true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":68,"deletions":10,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -3915,0 +3915,3 @@\n+compiler.misc.feature.value.classes=\\\n+    value classes\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -119,0 +119,2 @@\n+    public final Name __value__;\n+    public final Name java_lang___value__;\n@@ -312,0 +314,2 @@\n+        __value__ = fromString(\"__value__\");\n+        java_lang___value__ = fromString(\"java.lang.__value__\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    public static final int ACC_VALUE         = 0x0100; \/\/                      class\n@@ -86,1 +87,1 @@\n-        ACC_PUBLIC, ACC_FINAL, ACC_ABSTRACT, ACC_PRIMITIVE\n+        ACC_PUBLIC, ACC_FINAL, ACC_ABSTRACT, ACC_PRIMITIVE, ACC_VALUE\n@@ -91,1 +92,1 @@\n-        ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_PRIMITIVE\n+        ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_PRIMITIVE, ACC_VALUE\n@@ -105,1 +106,1 @@\n-        ACC_ABSTRACT, ACC_PRIMITIVE\n+        ACC_ABSTRACT, ACC_PRIMITIVE, ACC_VALUE\n@@ -110,1 +111,1 @@\n-        ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_PRIMITIVE\n+        ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_PRIMITIVE, ACC_VALUE\n@@ -207,2 +208,2 @@\n-            case ACC_NATIVE:\n-                return \"native\";\n+            case 0x100:\n+                return (t == Kind.Class || t == Kind.InnerClass) ? \"value\" : \"native\";\n@@ -238,2 +239,2 @@\n-        case ACC_NATIVE:\n-            return \"ACC_NATIVE\";\n+        case 0x100:\n+            return (t == Kind.Class || t == Kind.InnerClass) ? \"ACC_VALUE\" : \"ACC_NATIVE\";\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/AccessFlags.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -313,1 +313,2 @@\n-            \"java.lang.__primitive__\"\n+            \"java.lang.__primitive__\",\n+            \"java.lang.__value__\"\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -225,0 +225,1 @@\n+compiler.misc.feature.value.classes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,2 +1,1 @@\n-CheckFeatureGate1.java:10:12: compiler.warn.restricted.type.not.allowed.preview: primitive, 17\n-CheckFeatureGate1.java:10:21: compiler.err.expected: token.identifier\n+CheckFeatureGate1.java:10:12: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.primitive.classes), 13, 18\n@@ -4,1 +3,0 @@\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFeatureGate1.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckFeatureGate2.java:11:17: compiler.err.feature.not.supported.in.source: (compiler.misc.feature.primitive.classes), 13, 17\n+CheckFeatureGate2.java:11:17: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.primitive.classes), 13, 18\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFeatureGate2.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,0 +12,1 @@\n+        Object o = new primitive primitive() {};\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/PrimitiveAsTypeName.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,4 +2,4 @@\n-PrimitiveAsTypeName.java:9:18: compiler.warn.restricted.type.not.allowed.preview: primitive, 17\n-PrimitiveAsTypeName.java:10:9: compiler.warn.restricted.type.not.allowed.preview: primitive, 17\n-PrimitiveAsTypeName.java:11:9: compiler.warn.restricted.type.not.allowed.preview: primitive, 17\n-PrimitiveAsTypeName.java:11:31: compiler.err.missing.ret.stmt\n+PrimitiveAsTypeName.java:9:18: compiler.warn.restricted.type.not.allowed.preview: primitive, 18\n+PrimitiveAsTypeName.java:10:9: compiler.warn.restricted.type.not.allowed.preview: primitive, 18\n+PrimitiveAsTypeName.java:11:9: compiler.warn.restricted.type.not.allowed.preview: primitive, 18\n+PrimitiveAsTypeName.java:12:24: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.primitive.classes), 16, 18\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/PrimitiveAsTypeName.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-    interface value {}\n+    interface Value {}\n@@ -11,1 +11,1 @@\n-        new primitive value() {};\n+        new primitive Value() {};\n@@ -14,4 +14,4 @@\n-        primitive class value {}\n-        new value() {};\n-        new primitive value() {};\n-        new value();\n+        primitive class Value {}\n+        new Value() {};\n+        new primitive Value() {};\n+        new Value();\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueModifierTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-ValueModifierTest.java:15:13: compiler.err.cant.inherit.from.final: value\n-ValueModifierTest.java:16:23: compiler.err.cant.inherit.from.final: value\n-ValueModifierTest.java:16:31: compiler.err.concrete.supertype.for.primitive.class: compiler.misc.anonymous.class: ValueModifierTest$3, value\n+ValueModifierTest.java:15:13: compiler.err.cant.inherit.from.final: Value\n+ValueModifierTest.java:16:23: compiler.err.cant.inherit.from.final: Value\n+ValueModifierTest.java:16:31: compiler.err.concrete.supertype.for.primitive.class: compiler.misc.anonymous.class: ValueModifierTest$3, Value\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueModifierTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,13 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8279368\n+ * @summary Add parser support for value classes\n+ * @compile\/fail\/ref=CheckFeatureSourceLevel.out --release=13 -XDrawDiagnostics CheckFeatureSourceLevel.java\n+ *\/\n+\n+public class CheckFeatureSourceLevel {\n+\n+    static value class Value {\n+        public int v = 42;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckFeatureSourceLevel.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CheckFeatureSourceLevel.java:10:12: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.value.classes), 13, 18\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckFeatureSourceLevel.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8279368\n+ * @summary Add parser support for declaration of value classes\n+ * @compile Substring.java\n+ *\/\n+\n+public value class Substring implements CharSequence {\n+    private String str;\n+    private int start;\n+    private int end;\n+\n+    public Substring(String str, int start, int end) {\n+        checkBounds(start, end, str.length());\n+        this.str = str;\n+        this.start = start;\n+        this.end = end;\n+    }\n+\n+    public int length() {\n+        return end - start;\n+    }\n+\n+    public char charAt(int i) {\n+        checkBounds(0, i, length());\n+        return str.charAt(start + i);\n+    }\n+\n+    public Substring subSequence(int s, int e) {\n+        checkBounds(s, e, length());\n+        return new Substring(str, start + s, start + e);\n+    }\n+\n+    public String toString() {\n+        return str.substring(start, end);\n+    }\n+\n+    private static void checkBounds(int start, int end, int length) {\n+        if (start < 0 || end < start || length < end)\n+            throw new IndexOutOfBoundsException();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/Substring.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8279368\n+ * @summary Test that value classes can be declared using annotations instead of modifiers\n+ * @compile\/fail\/ref=ValueAnnotationTest.out -XDrawDiagnostics -XDdev ValueAnnotationTest.java\n+ *\/\n+\n+public class ValueAnnotationTest {\n+    @__value__ public class X {}\n+    @java.lang.__value__  public class Y extends X {}\n+    public class Z extends Y {}\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueAnnotationTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+ValueAnnotationTest.java:10:50: compiler.err.cant.inherit.from.final: ValueAnnotationTest.X\n+ValueAnnotationTest.java:11:28: compiler.err.cant.inherit.from.final: ValueAnnotationTest.Y\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueAnnotationTest.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}