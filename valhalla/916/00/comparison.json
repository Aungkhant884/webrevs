{"files":[{"patch":"@@ -1156,3 +1156,1 @@\n-            return isPrimitive() ?\n-                    addMetadata(new ConstantValue(constValue)) :\n-                    addMetadata(new ConstantValue(constValue)).addMetadata(new TypeMetadata.NullMarker(NullMarker.NOT_NULL));\n+            return addMetadata(new ConstantValue(constValue));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1348,0 +1348,11 @@\n+            Type elemOrType = result;\n+            while (!elemOrType.hasTag(ERROR) && types.elemtype(elemOrType) != null) {\n+                elemOrType = types.elemtype(elemOrType);\n+            }\n+            if ((result.isNonNullable() || elemOrType.isNonNullable()) && (!elemOrType.isValueClass() || !elemOrType.hasImplicitConstructor())) {\n+                log.error(tree.pos(),\n+                        types.elemtype(result) == null?\n+                                Errors.TypeCantBeNullRestricted(result) :\n+                                Errors.TypeCantBeNullRestricted2(result)\n+                );\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4167,1 +4167,1 @@\n-### bang types\n+### null-restricted types\n@@ -4172,0 +4172,10 @@\n+# 0: type\n+compiler.err.type.cant.be.null.restricted=\\\n+    type: {0}, cannot be a null restricted type\\n\\\n+    it must be a value class with an implicit constructor\n+\n+# 0: type\n+compiler.err.type.cant.be.null.restricted.2=\\\n+    type: {0}, cannot be a null restricted type\\n\\\n+    its element type must be a value class with an implicit constructor\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        return \"void eqtestObject(String! s) { if (s == new @TA String()); }\";\n+        return \"void eqtestObject(String s) { if (s == new @TA String()); }\";\n@@ -71,1 +71,1 @@\n-        return \"void eqtestObjectGeneric(ArrayList!<String> as) { if (as == new @TA ArrayList<@TB String >()); }\";\n+        return \"void eqtestObjectGeneric(ArrayList<String> as) { if (as == new @TA ArrayList<@TB String >()); }\";\n@@ -168,1 +168,1 @@\n-        return \"void eqtestObject(String! s) { if (s == new @RTA @RTA String()); }\";\n+        return \"void eqtestObject(String s) { if (s == new @RTA @RTA String()); }\";\n@@ -175,1 +175,1 @@\n-        return \"void eqtestObjectGeneric(ArrayList!<String> as) { if (as == new @RTA @RTA ArrayList<@RTB @RTB String >()); }\";\n+        return \"void eqtestObjectGeneric(ArrayList<String> as) { if (as == new @RTA @RTA ArrayList<@RTB @RTB String >()); }\";\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NewObjects.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.type.cant.be.null.restricted\n+\/\/ key: compiler.err.type.cant.be.null.restricted.2\n+\n+public class CantBeNonNullableType {\n+    String! s;\n+    String[]! sa;\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantBeNonNullableType.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -129,0 +129,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -130,1 +131,1 @@\n-                                    String! s = null;\n+                                    Point! s = null;\n@@ -137,0 +138,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -138,1 +140,1 @@\n-                                    String[]! s = null;\n+                                    Point[]! s = null;\n@@ -143,1 +145,1 @@\n-                        new DiagAndCode(\n+                        \/*new DiagAndCode(\n@@ -154,1 +156,1 @@\n-                                \"compiler.err.prob.found.req\"),\n+                                \"compiler.err.prob.found.req\"),*\/\n@@ -157,1 +159,1 @@\n-                                value class Point {}\n+                                value class Point { public implicit Point(); }\n@@ -159,1 +161,1 @@\n-                                    void add(T! e) {}\n+                                    void add(T e) {}\n@@ -178,0 +180,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -179,1 +182,1 @@\n-                                    String! s;\n+                                    Point! s;\n@@ -186,0 +189,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -187,1 +191,1 @@\n-                                    String[]! s;\n+                                    Point[]! s;\n@@ -194,0 +198,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -195,1 +200,1 @@\n-                                    String![]! s;\n+                                    Point![]! s;\n@@ -202,0 +207,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -203,1 +209,1 @@\n-                                    String![]![]! s;\n+                                    Point![]![]! s;\n@@ -210,0 +216,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -211,1 +218,1 @@\n-                                    String[][]! s;\n+                                    Point[][]! s;\n@@ -218,0 +225,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -219,1 +227,1 @@\n-                                    String[][][]! s;\n+                                    Point[][][]! s;\n@@ -233,0 +241,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -234,1 +243,1 @@\n-                                    void m(String! s1, String s3) {\n+                                    void m(Point! s1, Point s3) {\n@@ -242,1 +251,1 @@\n-                        new DiagAndCode(\n+                        \/*new DiagAndCode(\n@@ -252,1 +261,1 @@\n-                                1),\n+                                1),*\/\n@@ -255,0 +264,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -256,1 +266,1 @@\n-                                    void m(String! s1, String s3) {\n+                                    void m(Point! s1, Point s3) {\n@@ -263,0 +273,1 @@\n+                        \/*\n@@ -281,0 +292,1 @@\n+                        *\/\n@@ -286,0 +298,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -287,1 +300,1 @@\n-                                    void test(List<? extends String!> ls1, List<? extends String> ls3) {\n+                                    void test(List<? extends Point!> ls1, List<? extends Point> ls3) {\n@@ -415,0 +428,1 @@\n+                                    static value class Point { public implicit Point(); }\n@@ -416,1 +430,1 @@\n-                                    private <Z> Z! make_box_uni(Z!... bs) {\n+                                    private <Z> Z make_box_uni(Z... bs) {\n@@ -419,2 +433,2 @@\n-                                    void test(Box<String!> bref, Box<String> bval) {\n-                                        Box<? extends String!> res = make_box_uni(bref, bval);\n+                                    void test(Box<Point!> bref, Box<Point> bval) {\n+                                        Box<? extends Point!> res = make_box_uni(bref, bval);\n@@ -457,32 +471,0 @@\n-                        new DiagAndCode(\n-                                \"\"\"\n-                                class Test {\n-                                    void m() {\n-                                        String! s = \"abc\"; \/\/ literals are always null restricted\n-                                    }\n-                                }\n-                                \"\"\",\n-                                Result.Clean,\n-                                \"\"),\n-                        new DiagAndCode(\n-                                \"\"\"\n-                                class Foo {\n-                                    void m() {\n-                                        Foo! f = new Foo();\n-                                    }\n-                                }\n-                                \"\"\",\n-                                Result.Clean,\n-                                \"\"),\n-                        new DiagAndCode(\n-                                \"\"\"\n-                                import java.util.*;\n-                                class Foo {\n-                                     void m(List<? super String!> ls1) {}\n-                                     void test(List<? super String!> ls2) {\n-                                         m(ls2);\n-                                     }\n-                                }\n-                                \"\"\",\n-                                Result.Clean,\n-                                \"\"),\n@@ -492,1 +474,1 @@\n-                                value class Point implements Shape {}\n+                                value class Point implements Shape { public implicit Point(); }\n@@ -506,1 +488,1 @@\n-                                value class Point implements Shape {}\n+                                value class Point implements Shape { public implicit Point(); }\n@@ -509,1 +491,1 @@\n-                                    void m(Box<Shape!> lp) {\n+                                    void m(Box<Shape> lp) {\n@@ -547,1 +529,1 @@\n-                                    void set(T! arg) { x = arg; }\n+                                    void set(T arg) { x = arg; }\n@@ -556,1 +538,1 @@\n-                                    static <E> MyList<E!> of(E! e1) {\n+                                    static <E> MyList<E> of(E e1) {\n@@ -570,1 +552,1 @@\n-                                value class Point {}\n+                                value class Point { public implicit Point(); }\n@@ -573,1 +555,1 @@\n-                                    static <E> MyList<E!> of(E! e1) {\n+                                    static <E> MyList<E> of(E e1) {\n@@ -589,1 +571,1 @@\n-                                    void foo(T! t) {\n+                                    void foo(T t) {\n@@ -652,1 +634,2 @@\n-                                class Test {\n+                                value class Test {\n+                                    public implicit Test();\n@@ -691,0 +674,1 @@\n+                                value class Point { public implicit Point(); }\n@@ -692,1 +676,1 @@\n-                                    abstract String lookup(String! arg);\n+                                    abstract String lookup(Point! arg);\n@@ -696,1 +680,1 @@\n-                                    abstract String lookup(String arg);\n+                                    abstract String lookup(Point arg);\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityCompilationTests.java","additions":47,"deletions":63,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+    static value class Point { public implicit Point(); }\n+    static value class Shape { public implicit Shape(); }\n@@ -38,1 +40,1 @@\n-    Object! o2;\n+    Point! o2;\n@@ -41,1 +43,1 @@\n-    void m2(Object! o) { }\n+    void m2(Point! o) { }\n@@ -44,1 +46,1 @@\n-    Object! m2() { return new Object(); }\n+    Point! m2() { return new Point(); }\n@@ -48,1 +50,1 @@\n-        Object! o2;\n+        Point! o2;\n@@ -52,1 +54,1 @@\n-    Consumer<Object!> co2;\n+    Consumer<Point!> co2;\n@@ -55,1 +57,1 @@\n-    void m4(Consumer<Object!> co) { }\n+    void m4(Consumer<Point!> co) { }\n@@ -58,1 +60,1 @@\n-    Consumer<Object!> m4() { return null; }\n+    Consumer<Point!> m4() { return null; }\n@@ -62,1 +64,1 @@\n-        Consumer<Object!> co2;\n+        Consumer<Point!> co2;\n@@ -67,1 +69,1 @@\n-        Consumer<Object!> co2 = (Object! co) -> {};\n+        Consumer<Point!> co2 = (Point! co) -> {};\n@@ -71,3 +73,3 @@\n-        Consumer<Consumer<Object!>> co2 = (Consumer<Object!> co) -> {};\n-        Consumer<Function<Object!, Object!>> co3 = (Function<Object!, Object!> co) -> {};\n-        Consumer<Consumer<Consumer<Consumer<Object!>>>> co6 = (Consumer<Consumer<Consumer<Object!>>> co) -> {};\n+        Consumer<Consumer<Point!>> co2 = (Consumer<Point!> co) -> {};\n+        Consumer<Function<Point!, Point!>> co3 = (Function<Point!, Point!> co) -> {};\n+        Consumer<Consumer<Consumer<Consumer<Point!>>>> co6 = (Consumer<Consumer<Consumer<Point!>>> co) -> {};\n@@ -80,2 +82,2 @@\n-            case Integer! i -> throw new AssertionError();\n-            case String! s -> throw new AssertionError();\n+            case Point! i -> throw new AssertionError();\n+            case Shape! s -> throw new AssertionError();\n@@ -87,1 +89,1 @@\n-    final class A implements I<Integer> { }\n+    final class A implements I<Point> { }\n@@ -91,1 +93,1 @@\n-            case I<Integer!> i -> { }\n+            case I<Point!> i -> { }\n@@ -96,1 +98,1 @@\n-    final class A2 implements I2<I<Integer>> { }\n+    final class A2 implements I2<I<Point>> { }\n@@ -100,1 +102,1 @@\n-            case I2<I<Integer!>> i -> { }\n+            case I2<I<Point!>> i -> { }\n@@ -105,1 +107,1 @@\n-    final class A3 implements I3<I2<I<Integer>>> { }\n+    final class A3 implements I3<I2<I<Point>>> { }\n@@ -109,1 +111,1 @@\n-            case I3<I2<I<Integer!>>> i -> { }\n+            case I3<I2<I<Point!>>> i -> { }\n@@ -119,1 +121,1 @@\n-            case R!(I<Integer!> i) -> { }\n+            case R!(I<Point!> i) -> { }\n@@ -127,1 +129,1 @@\n-            case R2!(I2<I<Integer!>> i) -> { }\n+            case R2!(I2<I<Point!>> i) -> { }\n@@ -135,1 +137,1 @@\n-            case R3!(I3<I2<I<Integer!>>> i) -> { }\n+            case R3!(I3<I2<I<Point!>>> i) -> { }\n@@ -142,1 +144,1 @@\n-        boolean r2 = o instanceof String!;\n+        boolean r2 = o instanceof Point!;\n@@ -146,1 +148,1 @@\n-        boolean r2 = r instanceof R(I<Integer!> i);\n+        boolean r2 = r instanceof R(I<Point!> i);\n@@ -150,1 +152,1 @@\n-        String! s2 = (String!)o;\n+        Point! s2 = (Point!)o;\n@@ -154,1 +156,1 @@\n-        I<Integer!> i2 = (I<Integer!>)a;\n+        I<Point!> i2 = (I<Point!>)a;\n@@ -156,1 +158,1 @@\n-\n+\/*\n@@ -158,1 +160,1 @@\n-        I!<Integer!> i2 = (I!<Integer!>)a;\n+        I<Point!> i2 = (I<Point!>)a;\n@@ -160,1 +162,1 @@\n-\n+*\/\n@@ -163,2 +165,2 @@\n-    Object![]![]![]! oarr;\n-    Function!<Object![]![]!, Function<Object![]![]!, Object![]![]!>>[]![]! garr;\n+    Point![]![]![]! oarr;\n+    Function<Point![]![]!, Function<Point![]![]!, Point![]![]!>>[][] garr;\n@@ -167,2 +169,2 @@\n-        String s1 = o instanceof String ? (String)o : null;\n-        String s2 = o instanceof String! ? (String)o : null;\n+        Point s1 = o instanceof Point ? (Point)o : null;\n+        Point s2 = o instanceof Point! ? (Point)o : null;\n@@ -172,2 +174,2 @@\n-        String s1 = o instanceof String ? \"\" : null;\n-        String s2 = o instanceof String! ? \"\" : null;\n+        Point s1 = o instanceof Point ? null : null;\n+        Point s2 = o instanceof Point! ? null : null;\n@@ -178,1 +180,1 @@\n-            case String! s -> { }\n+            case Point! s -> { }\n@@ -185,1 +187,1 @@\n-            case String! s: { }\n+            case Point! s: { }\n@@ -191,1 +193,1 @@\n-        boolean x2 = a instanceof String! && b;\n+        boolean x2 = a instanceof Point! && b;\n@@ -195,1 +197,1 @@\n-        boolean x2 = a instanceof String! s && b;\n+        boolean x2 = a instanceof Point! s && b;\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityParsingTest.java","additions":42,"deletions":40,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+                value class Point { public implicit Point(); }\n@@ -82,2 +83,2 @@\n-                        String s = null;\n-                        String! o = s; \/\/ NPE at runtime, variable initialization\n+                        Point s = null;\n+                        Point! o = s; \/\/ NPE at runtime, variable initialization\n@@ -88,0 +89,1 @@\n+                value class Point { public implicit Point(); }\n@@ -90,2 +92,2 @@\n-                        String s = null;\n-                        String! o;\n+                        Point s = null;\n+                        Point! o;\n@@ -97,0 +99,1 @@\n+                value class Point { public implicit Point(); }\n@@ -99,2 +102,2 @@\n-                        String s = null;\n-                        String![] sr = new String![10];\n+                        Point s = null;\n+                        Point![] sr = new Point![10];\n@@ -106,0 +109,1 @@\n+                value class Point { public implicit Point(); }\n@@ -107,1 +111,1 @@\n-                    static String id(String! arg) { return arg; }\n+                    static Point id(Point! arg) { return arg; }\n@@ -109,1 +113,1 @@\n-                        String s = null;\n+                        Point s = null;\n@@ -115,0 +119,1 @@\n+                value class Point { public implicit Point(); }\n@@ -117,2 +122,2 @@\n-                        String s = null;\n-                        Object o = (String!) s; \/\/ NPE, cast\n+                        Point s = null;\n+                        Object o = (Point!) s; \/\/ NPE, cast\n","filename":"test\/langtools\/tools\/javac\/nullability\/RuntimeNullChecks.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-            checkCorrectException(check::enumValue, \"java.lang.String!\");\n+            checkCorrectException(check::enumValue, \"java.lang.String\");\n","filename":"test\/langtools\/tools\/javac\/processing\/errors\/EnsureAnnotationTypeMismatchException\/Processor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    void foo(FlattenableFlagFromClass! f) {\n+    void foo(FlattenableFlagFromClass f) {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableFlagFromClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+    public implicit OptionalInt();\n+\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes2.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,8 +38,8 @@\n-    public value class P1 {}\n-    public value class P2 {}\n-    public value class P3 {}\n-    public value class P4 {}\n-    public value class P5 {}\n-    public value class P6 {}\n-    public value class P7 {}\n-    public value class P8 {}\n+    public static value class P1 { public implicit P1(); }\n+    public static value class P2 { public implicit P2(); }\n+    public static value class P3 { public implicit P3(); }\n+    public static value class P4 { public implicit P4(); }\n+    public static value class P5 { public implicit P5(); }\n+    public static value class P6 { public implicit P6(); }\n+    public static value class P7 { public implicit P7(); }\n+    public static value class P8 { public implicit P8(); }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PreloadAttributeTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        ValueConstructorRef! x = (ValueConstructorRef) sx.get();\n+        ValueConstructorRef x = (ValueConstructorRef) sx.get();\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueConstructorRef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1010,0 +1010,4 @@\n+                value class V0 {\n+                    public implicit V0();\n+                }\n+\n@@ -1011,2 +1015,2 @@\n-                    String! f1;\n-                    String f2;\n+                    V0! f1;\n+                    V0 f2;\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}