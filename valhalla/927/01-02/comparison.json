{"files":[{"patch":"@@ -1711,1 +1711,1 @@\n-        public MethodSymbol getImplicitConstructor() {\n+        private MethodSymbol getImplicitConstructor() {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1290,1 +1290,1 @@\n-            return tsym != null && tsym.kind == TYP && ((ClassSymbol)tsym).getImplicitConstructor() != null;\n+            return tsym != null && tsym.kind == TYP && ((ClassSymbol)tsym).hasImplicitConstructor();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2812,1 +2812,1 @@\n-            if (!cIsValue || ((ClassSymbol)c.tsym).getImplicitConstructor() == null) {\n+            if (!cIsValue || !((ClassSymbol)c.tsym).hasImplicitConstructor()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -961,1 +961,1 @@\n-        if (csym.isValueClass() && csym.getImplicitConstructor() != null) {\n+        if (csym.isValueClass() && csym.hasImplicitConstructor()) {\n@@ -1824,1 +1824,1 @@\n-            if (csym.isValueClass() && csym.getImplicitConstructor() != null) {\n+            if (csym.isValueClass() && csym.hasImplicitConstructor()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -240,0 +240,3 @@\n+compiler.misc.attribute.must.be.unique                                   # bad class file\n+compiler.misc.attribute.not.applicable.to.field.type                     # bad class file\n+compiler.misc.attribute.only.applicable.to.fields                        # bad class file\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -12,1 +12,0 @@\n-        f.va = null; \/\/f.va[0] = null; \/\/ Error.  we currently can't represent that elements inside an array are non-nullable\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableFlagFromClass.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n-CheckFlattenableFlagFromClass.java:12:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableFlagFromClass.V[])\n-2 errors\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableFlagFromClass.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-    public V[]! va;\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/FlattenableFlagFromClass.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}