{"files":[{"patch":"@@ -1350,0 +1350,2 @@\n+        private boolean hasImplicitConstructor = false;\n+\n@@ -1694,0 +1696,15 @@\n+        public boolean hasImplicitConstructor() {\n+            if (hasImplicitConstructor) {\n+                return true;\n+            } else {\n+                if (getImplicitConstructor() != null) {\n+                    hasImplicitConstructor = true;\n+                }\n+                return hasImplicitConstructor;\n+            }\n+        }\n+\n+        public void implicitConstructorFound() {\n+            hasImplicitConstructor = true;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -138,4 +138,0 @@\n-    \/** Switch: does this value class has an implicit constructor\n-     *\/\n-    public boolean hasImplicitConstructor;\n-\n@@ -1353,1 +1349,1 @@\n-            new AttributeReader(names.ImplicitCreation, V63, CLASS_ATTRIBUTE) {\n+            new AttributeReader(names.ImplicitCreation, V66, CLASS_ATTRIBUTE) {\n@@ -1359,0 +1355,3 @@\n+                    if (((ClassSymbol)sym).hasImplicitConstructor()) { \/\/ there can only be one per class\n+                        throw badClassFile(\"attribute.must.be.unique\", names.ImplicitCreation);\n+                    }\n@@ -1361,1 +1360,1 @@\n-                        hasImplicitConstructor = true;\n+                        ((ClassSymbol)sym).implicitConstructorFound();\n@@ -1365,1 +1364,1 @@\n-            new AttributeReader(names.NullRestricted, V63, MEMBER_ATTRIBUTE) {\n+            new AttributeReader(names.NullRestricted, V66, MEMBER_ATTRIBUTE) {\n@@ -1371,0 +1370,9 @@\n+                    if (sym.kind != VAR) {\n+                        throw badClassFile(\"attribute.only.applicable.to.fields\", names.NullRestricted);\n+                    }\n+                    if (sym.type.isPrimitive() || sym.type.hasTag(TypeTag.ARRAY)) {\n+                        throw badClassFile(\"attribute.not.applicable.to.field.type\", names.NullRestricted, sym.type);\n+                    }\n+                    if (sym.type.isNonNullable()) {\n+                        throw badClassFile(\"attribute.must.be.unique\", names.NullRestricted);\n+                    }\n@@ -2383,1 +2391,1 @@\n-            if (hasImplicitConstructor && type.getParameterTypes().size() == 0) {\n+            if (((ClassSymbol)currentOwner).hasImplicitConstructor() && type.getParameterTypes().size() == 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -4194,0 +4194,12 @@\n+# 0: name\n+compiler.misc.attribute.must.be.unique=\\\n+    attribute {0} must be unique\n+\n+# 0: name\n+compiler.misc.attribute.only.applicable.to.fields=\\\n+    attribute {0} is only applicable to fields\n+\n+# 0: name, 1: type\n+compiler.misc.attribute.not.applicable.to.field.type=\\\n+    attribute {0} is not applicable to {1}\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -998,1 +998,3 @@\n-    private Attribute findAttributeOrFail(Attributes attributes, Class<? extends Attribute> attrClass) {\n+    private Attribute findAttributeOrFail(Attributes attributes, Class<? extends Attribute> attrClass, int numberOfAttributes) {\n+        int attrCount = 0;\n+        Attribute result = null;\n@@ -1001,1 +1003,4 @@\n-                return attribute;\n+                attrCount++;\n+                if (result == null) {\n+                    result = attribute;\n+                }\n@@ -1004,1 +1009,3 @@\n-        throw new AssertionError(\"attribute not found\");\n+        if (attrCount == 0) throw new AssertionError(\"attribute not found\");\n+        if (attrCount != numberOfAttributes) throw new AssertionError(\"incorrect number of attributes found\");\n+        return result;\n@@ -1031,1 +1038,1 @@\n-        findAttributeOrFail(field1.attributes, NullRestricted_attribute.class);\n+        findAttributeOrFail(field1.attributes, NullRestricted_attribute.class, 1);\n@@ -1034,1 +1041,1 @@\n-            findAttributeOrFail(field2.attributes, NullRestricted_attribute.class);\n+            findAttributeOrFail(field2.attributes, NullRestricted_attribute.class, 1);\n@@ -1039,1 +1046,1 @@\n-        findAttributeOrFail(classFile.attributes, ImplicitCreation_attribute.class);\n+        findAttributeOrFail(classFile.attributes, ImplicitCreation_attribute.class, 1);\n@@ -1043,1 +1050,1 @@\n-            findAttributeOrFail(classFile.attributes, ImplicitCreation_attribute.class);\n+            findAttributeOrFail(classFile.attributes, ImplicitCreation_attribute.class, 1);\n@@ -1053,1 +1060,1 @@\n-                class V implements LooselyConsistentValue {}\n+                class V implements LooselyConsistentValue {} \/\/ not a value class\n@@ -1058,1 +1065,1 @@\n-                value class V implements LooselyConsistentValue {}\n+                value class V implements LooselyConsistentValue {} \/\/ no implicit constructor\n@@ -1063,1 +1070,8 @@\n-                abstract class V implements LooselyConsistentValue {}\n+                abstract class V implements LooselyConsistentValue {}  \/\/ not concrete value class\n+                \"\"\"\n+        );\n+        assertOK(\n+                \"\"\"\n+                value class V implements LooselyConsistentValue { \/\/ concrete value class with implicit constructor\n+                    public implicit V();\n+                }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/class_flags\/CheckClassfileFlagsTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/lworld-values\/classfile_flags\/CheckClassfileFlagsTest.java","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/class_flags\/CheckClassfileFlagsTest.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/lworld-values\/classfile_flags\/CheckClassfileFlagsTest.out","status":"renamed"},{"patch":"","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/class_flags\/ValueWithInvalidFlags.jcod","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/lworld-values\/classfile_flags\/ValueWithInvalidFlags.jcod","status":"renamed"},{"patch":"@@ -0,0 +1,15 @@\n+\/* @test \/nodynamiccopyright\/\n+ * @summary [lw5] check that there can only be one ImplicitCreation attribute\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @library \/tools\/lib\n+ * @compile DuplicateImplicitCreationAttr.jcod\n+ * @compile\/fail\/ref=CheckImplicitCreationAttrIsUnique.out -XDrawDiagnostics CheckImplicitCreationAttrIsUnique.java\n+ *\/\n+\n+public class CheckImplicitCreationAttrIsUnique {\n+    void m() {\n+        DuplicateImplicitCreationAttr v = new DuplicateImplicitCreationAttr();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/implicit_creation_attr\/CheckImplicitCreationAttrIsUnique.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CheckImplicitCreationAttrIsUnique.java:13:9: compiler.err.cant.access: DuplicateImplicitCreationAttr, (compiler.misc.bad.class.file.header: DuplicateImplicitCreationAttr.class, (compiler.misc.attribute.must.be.unique: ImplicitCreation))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/implicit_creation_attr\/CheckImplicitCreationAttrIsUnique.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+class DuplicateImplicitCreationAttr {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"DuplicateImplicitCreationAttr\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<vnew>\"; \/\/ #5\n+    Utf8 \"()LDuplicateImplicitCreationAttr;\"; \/\/ #6\n+    Utf8 \"Code\"; \/\/ #7\n+    Utf8 \"LineNumberTable\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"DuplicateImplicitCreationAttr.java\"; \/\/ #10\n+    Utf8 \"ImplicitCreation\"; \/\/ #11\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#8) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+                4  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#11) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+    ;\n+    Attr(#11) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+  } \/\/ Attributes\n+} \/\/ end class DuplicateImplicitCreationAttr\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/implicit_creation_attr\/DuplicateImplicitCreationAttr.jcod","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+\/* @test \/nodynamiccopyright\/\n+ * @summary [lw5] check that there can only be one NullRestricted attribute\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @library \/tools\/lib\n+ * @compile ValueClass.jcod DuplicateNullRestrictedAttr.jcod\n+ * @compile\/fail\/ref=CheckNullRestrictedAttrIsUnique.out -XDrawDiagnostics CheckNullRestrictedAttrIsUnique.java\n+ *\/\n+\n+public class CheckNullRestrictedAttrIsUnique {\n+    void m() {\n+        DuplicateNullRestrictedAttr v = new DuplicateNullRestrictedAttr();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/attr_is_unique\/CheckNullRestrictedAttrIsUnique.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CheckNullRestrictedAttrIsUnique.java:13:9: compiler.err.cant.access: DuplicateNullRestrictedAttr, (compiler.misc.bad.class.file.header: DuplicateNullRestrictedAttr.class, (compiler.misc.attribute.must.be.unique: NullRestricted))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/attr_is_unique\/CheckNullRestrictedAttrIsUnique.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+class DuplicateNullRestrictedAttr {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"DuplicateNullRestrictedAttr\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"field\"; \/\/ #5\n+    Utf8 \"LValueClass;\"; \/\/ #6\n+    Utf8 \"NullRestricted\"; \/\/ #7\n+    Utf8 \"<vnew>\"; \/\/ #8\n+    Utf8 \"()LDuplicateNullRestrictedAttr;\"; \/\/ #9\n+    Utf8 \"Code\"; \/\/ #10\n+    Utf8 \"LineNumberTable\"; \/\/ #11\n+    Utf8 \"SourceFile\"; \/\/ #12\n+    Utf8 \"DuplicateNullRestrictedAttr.java\"; \/\/ #13\n+    Utf8 \"ImplicitCreation\"; \/\/ #14\n+    Utf8 \"Preload\"; \/\/ #15\n+    class #17; \/\/ #16\n+    Utf8 \"ValueClass\"; \/\/ #17\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ NullRestricted\n+        } \/\/ end NullRestricted\n+        ;\n+        Attr(#7) { \/\/ NullRestricted\n+        } \/\/ end NullRestricted\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #8; \/\/ name_index\n+      #9; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#10) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#11) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  7;\n+                4  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#12) { \/\/ SourceFile\n+      #13;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#14) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+    ;\n+    Attr(#15) { \/\/ Preload\n+      0x00010010;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class DuplicateNullRestrictedAttr\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/attr_is_unique\/DuplicateNullRestrictedAttr.jcod","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+class ValueClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"ValueClass\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<vnew>\"; \/\/ #5\n+    Utf8 \"()LValueClass;\"; \/\/ #6\n+    Utf8 \"Code\"; \/\/ #7\n+    Utf8 \"LineNumberTable\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"DuplicateNullRestrictedAttr.java\"; \/\/ #10\n+    Utf8 \"ImplicitCreation\"; \/\/ #11\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#8) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+                4  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#11) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+  } \/\/ Attributes\n+} \/\/ end class ValueClass\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/attr_is_unique\/ValueClass.jcod","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+\/* @test \/nodynamiccopyright\/\n+ * @summary [lw5] check that there can only be one NullRestricted attribute\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @library \/tools\/lib\n+ * @compile NullRestrictedOnPrimitive.jcod\n+ * @compile\/fail\/ref=CheckFieldTypeTest.out -XDrawDiagnostics CheckFieldTypeTest.java\n+ *\/\n+\n+public class CheckFieldTypeTest {\n+    void m() {\n+        NullRestrictedOnPrimitive v = new NullRestrictedOnPrimitive();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/check_field_type\/CheckFieldTypeTest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CheckFieldTypeTest.java:13:9: compiler.err.cant.access: NullRestrictedOnPrimitive, (compiler.misc.bad.class.file.header: NullRestrictedOnPrimitive.class, (compiler.misc.attribute.not.applicable.to.field.type: NullRestricted, int))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/check_field_type\/CheckFieldTypeTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+\/* @test \/nodynamiccopyright\/\n+ * @summary [lw5] check that there can only be one NullRestricted attribute\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @library \/tools\/lib\n+ * @compile NullRestrictedOnArray.jcod\n+ * @compile\/fail\/ref=CheckFieldTypeTest2.out -XDrawDiagnostics CheckFieldTypeTest2.java\n+ *\/\n+\n+public class CheckFieldTypeTest2 {\n+    void m() {\n+        NullRestrictedOnArray v = new NullRestrictedOnArray();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/check_field_type\/CheckFieldTypeTest2.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CheckFieldTypeTest2.java:13:9: compiler.err.cant.access: NullRestrictedOnArray, (compiler.misc.bad.class.file.header: NullRestrictedOnArray.class, (compiler.misc.attribute.not.applicable.to.field.type: NullRestricted, java.lang.String[]))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/check_field_type\/CheckFieldTypeTest2.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+class NullRestrictedOnArray {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"NullRestrictedOnArray\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"arr\"; \/\/ #5\n+    Utf8 \"[Ljava\/lang\/String;\"; \/\/ #6\n+    Utf8 \"<vnew>\"; \/\/ #7\n+    Utf8 \"()LNullRestrictedOnArray;\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"NullRestrictedOnArray.java\"; \/\/ #12\n+    Utf8 \"ImplicitCreation\"; \/\/ #13\n+    Utf8 \"NullRestricted\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ NullRestricted\n+        } \/\/ end NullRestricted\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #7; \/\/ name_index\n+      #8; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+                4  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#13) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+  } \/\/ Attributes\n+} \/\/ end class NullRestrictedOnArray\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/check_field_type\/NullRestrictedOnArray.jcod","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+class NullRestrictedOnPrimitive {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"NullRestrictedOnPrimitive\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"i\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    Utf8 \"<vnew>\"; \/\/ #7\n+    Utf8 \"()LNullRestrictedOnPrimitive;\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"NullRestrictedOnPrimitive.java\"; \/\/ #12\n+    Utf8 \"ImplicitCreation\"; \/\/ #13\n+    Utf8 \"NullRestricted\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ NullRestricted\n+        } \/\/ end NullRestricted\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #7; \/\/ name_index\n+      #8; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  8;\n+                4  5;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#13) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+  } \/\/ Attributes\n+} \/\/ end class NullRestrictedOnPrimitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/check_field_type\/NullRestrictedOnPrimitive.jcod","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+\/* @test \/nodynamiccopyright\/\n+ * @summary [lw5] check that there can only be one NullRestricted attribute\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @library \/tools\/lib\n+ * @compile NullRestrictedOnMethod.jcod\n+ * @compile\/fail\/ref=NullRestrictedAttrOnlyOnFields.out -XDrawDiagnostics NullRestrictedAttrOnlyOnFields.java\n+ *\/\n+\n+public class NullRestrictedAttrOnlyOnFields {\n+    void m() {\n+        NullRestrictedOnMethod v = new NullRestrictedOnMethod();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/only_on_fields\/NullRestrictedAttrOnlyOnFields.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+NullRestrictedAttrOnlyOnFields.java:13:9: compiler.err.cant.access: NullRestrictedOnMethod, (compiler.misc.bad.class.file.header: NullRestrictedOnMethod.class, (compiler.misc.attribute.only.applicable.to.fields: NullRestricted))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/only_on_fields\/NullRestrictedAttrOnlyOnFields.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+class NullRestrictedOnMethod {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [20] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1     at 0x0A\n+    Utf8 \"NullRestrictedOnMethod\"; \/\/ #2     at 0x0D\n+    class #4; \/\/ #3     at 0x26\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x29\n+    Utf8 \"field\"; \/\/ #5     at 0x3C\n+    Utf8 \"LValueClass2;\"; \/\/ #6     at 0x44\n+    Utf8 \"NullRestricted\"; \/\/ #7     at 0x54\n+    Utf8 \"foo\"; \/\/ #8     at 0x65\n+    Utf8 \"()V\"; \/\/ #9     at 0x6B\n+    Utf8 \"Code\"; \/\/ #10     at 0x71\n+    Utf8 \"LineNumberTable\"; \/\/ #11     at 0x78\n+    Utf8 \"<vnew>\"; \/\/ #12     at 0x8A\n+    Utf8 \"()LNullRestrictedOnMethod;\"; \/\/ #13     at 0x93\n+    Utf8 \"SourceFile\"; \/\/ #14     at 0xB0\n+    Utf8 \"NullRestrictedOnMethod.java\"; \/\/ #15     at 0xBD\n+    Utf8 \"ImplicitCreation\"; \/\/ #16     at 0xDB\n+    Utf8 \"Preload\"; \/\/ #17     at 0xEE\n+    class #19; \/\/ #18     at 0xF8\n+    Utf8 \"ValueClass2\"; \/\/ #19     at 0xFB\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access [ ACC_FINAL ]\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x0113\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index       : field\n+      #6; \/\/ descriptor_index : LValueClass2;\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x0123\n+      0x0000; \/\/ access\n+      #8; \/\/ name_index       : foo\n+      #9; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#10, 25) { \/\/ Code at 0x012B\n+          0; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[1]{\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#11, 6) { \/\/ LineNumberTable at 0x013E\n+              [1] { \/\/ line_number_table\n+                0  9; \/\/  at 0x014A\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x014A\n+      0x0009; \/\/ access\n+      #12; \/\/ name_index       : <vnew>\n+      #13; \/\/ descriptor_index : ()LNullRestrictedOnMethod;\n+      [2] { \/\/ Attributes\n+        Attr(#10, 34) { \/\/ Code at 0x0152\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[6]{\n+            0xCB00014B2AB0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#11, 10) { \/\/ LineNumberTable at 0x016A\n+              [2] { \/\/ line_number_table\n+                0  7; \/\/  at 0x0176\n+                4  2; \/\/  at 0x017A\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+        ;\n+        Attr(#7, 0) { \/\/ NullRestricted at 0x011B\n+        } \/\/ end NullRestricted\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [3] { \/\/ Attributes\n+    Attr(#14, 2) { \/\/ SourceFile at 0x017C\n+      #15;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#16, 2) { \/\/ ImplicitCreation at 0x0184\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+    ;\n+    Attr(#17, 4) { \/\/ Preload at 0x018C\n+      0x00010012;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class NullRestrictedOnMethod\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/only_on_fields\/NullRestrictedOnMethod.jcod","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+class ValueClass2 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [12] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1     at 0x0A\n+    Utf8 \"ValueClass2\"; \/\/ #2     at 0x0D\n+    class #4; \/\/ #3     at 0x1B\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x1E\n+    Utf8 \"<vnew>\"; \/\/ #5     at 0x31\n+    Utf8 \"()LValueClass2;\"; \/\/ #6     at 0x3A\n+    Utf8 \"Code\"; \/\/ #7     at 0x4C\n+    Utf8 \"LineNumberTable\"; \/\/ #8     at 0x53\n+    Utf8 \"SourceFile\"; \/\/ #9     at 0x65\n+    Utf8 \"NullRestrictedOnMethod.java\"; \/\/ #10     at 0x72\n+    Utf8 \"ImplicitCreation\"; \/\/ #11     at 0x90\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access [ ACC_FINAL ]\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [1] { \/\/ Methods\n+    {  \/\/ method at 0xAF\n+      0x0009; \/\/ access\n+      #5; \/\/ name_index       : <vnew>\n+      #6; \/\/ descriptor_index : ()LValueClass2;\n+      [1] { \/\/ Attributes\n+        Attr(#7, 34) { \/\/ Code at 0xB7\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[6]{\n+            0xCB00014B2AB0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#8, 10) { \/\/ LineNumberTable at 0xCF\n+              [2] { \/\/ line_number_table\n+                0  2; \/\/  at 0xDB\n+                4  1; \/\/  at 0xDF\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [2] { \/\/ Attributes\n+    Attr(#9, 2) { \/\/ SourceFile at 0xE1\n+      #10;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#11, 2) { \/\/ ImplicitCreation at 0xE9\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+  } \/\/ Attributes\n+} \/\/ end class ValueClass2\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/only_on_fields\/ValueClass2.jcod","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,20 @@\n+\/* @test \/nodynamiccopyright\/\n+ * @summary [lw5] check that there can only be one NullRestricted attribute\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @library \/tools\/lib\n+ * @ignore\n+ * @compile ValueClass.jcod NullRestrictedOnValueClass.jcod\n+ * @compile\/fail\/ref=NullRestrictedAttrOnValueClassNoImplicitConst.out -XDrawDiagnostics NullRestrictedAttrOnValueClassNoImplicitConst.java\n+ *\/\n+\n+ \/* testing if a value class has an implicit constructor or not would imply loading the class if it is not loaded, this could provoke\n+  * altering the class loading order, not sure if this is worthy. Basically the assertion in the JVMS is:\n+  * `The descriptor_index of the field should name a value class that has an ImplicitCreation attribute with its ACC_DEFAULT flag is set`\n+  *\/\n+public class NullRestrictedAttrOnValueClassNoImplicitConst {\n+    void m() {\n+        NullRestrictedOnValueClass v = new NullRestrictedOnValueClass();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/value_class_no_implicit_const\/NullRestrictedAttrOnValueClassNoImplicitConst.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/value_class_no_implicit_const\/NullRestrictedAttrOnValueClassNoImplicitConst.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,85 @@\n+class NullRestrictedOnValueClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"NullRestrictedOnValueClass\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"field\"; \/\/ #5\n+    Utf8 \"LValueClass;\"; \/\/ #6\n+    Utf8 \"NullRestricted\"; \/\/ #7\n+    Utf8 \"<vnew>\"; \/\/ #8\n+    Utf8 \"()LNullRestrictedOnValueClass;\"; \/\/ #9\n+    Utf8 \"Code\"; \/\/ #10\n+    Utf8 \"LineNumberTable\"; \/\/ #11\n+    Utf8 \"SourceFile\"; \/\/ #12\n+    Utf8 \"NullRestrictedOnValueClass.java\"; \/\/ #13\n+    Utf8 \"ImplicitCreation\"; \/\/ #14\n+    Utf8 \"Preload\"; \/\/ #15\n+    class #17; \/\/ #16\n+    Utf8 \"ValueClass\"; \/\/ #17\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ NullRestricted\n+        } \/\/ end NullRestricted\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #8; \/\/ name_index\n+      #9; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#10) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#11) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  7;\n+                4  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#12) { \/\/ SourceFile\n+      #13;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#14) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+    ;\n+    Attr(#15) { \/\/ Preload\n+      0x00010010;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class NullRestrictedOnValueClass\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/value_class_no_implicit_const\/NullRestrictedOnValueClass.jcod","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+class ValueClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"ValueClass\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<vnew>\"; \/\/ #5\n+    Utf8 \"()LValueClass;\"; \/\/ #6\n+    Utf8 \"Code\"; \/\/ #7\n+    Utf8 \"LineNumberTable\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"NullRestrictedOnValueClass.java\"; \/\/ #10\n+    Utf8 \"ImplicitCreation\"; \/\/ #11\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#8) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+                4  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#11) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+  } \/\/ Attributes\n+} \/\/ end class ValueClass\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/classfile\/null_restricted_attr\/value_class_no_implicit_const\/ValueClass.jcod","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}