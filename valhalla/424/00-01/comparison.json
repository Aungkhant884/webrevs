{"files":[{"patch":"@@ -341,2 +341,4 @@\n-                            fieldAccess.selected =\n-                                    make.TypeCast(types.erasure(selectedType.valueProjection()), fieldAccess.selected);\n+                            if (types.splitPrimitiveClass) {\n+                                fieldAccess.selected =\n+                                        make.TypeCast(types.erasure(selectedType.valueProjection()), fieldAccess.selected);\n+                            } \/\/ else members of Foo can be accessed via LFoo or QFoo at the VM level without a cast.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransValues.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267542\n+ * @summary Verify that necessary checkcasts are generated while acessing an instance\n+ *          field\/method through a reference projection.\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @compile CheckNeededCastInMemberAccess.java\n+ * @run main CheckNeededCastInMemberAccess\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.Code_attribute.InvalidIndex;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPoolException;\n+import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n+import com.sun.tools.classfile.Instruction;\n+import com.sun.tools.classfile.Method;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class CheckNeededCastInMemberAccess {\n+\n+    static primitive class Point {\n+        int x = 0, y = 0;\n+        void foo() {\n+            Point p0 = new Point();\n+            int x0 = p0.x;\n+            p0.foo();\n+            Point.ref p1 = null;\n+            int x1 = p1.x;\n+            p1.foo();\n+        }\n+    }\n+\n+    public static void main(String[] args)\n+            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+        new CheckNeededCastInMemberAccess()\n+                .checkClassFile(new File(System.getProperty(\"test.classes\", \".\"),\n+                    CheckNeededCastInMemberAccess.Point.class.getName() + \".class\"));\n+    }\n+\n+    void checkClassFile(File file)\n+            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+        ClassFile classFile = ClassFile.read(file);\n+        ConstantPool constantPool = classFile.constant_pool;\n+\n+        Method method = Arrays.stream(classFile.methods)\n+                              .filter(m -> getName(m, constantPool)\n+                                               .equals(\"foo\"))\n+                              .findAny()\n+                              .get();\n+        String expectedInstructions = \"\"\"\n+                                    invokestatic\n+                                    astore_1\n+                                    aload_1\n+                                    getfield\n+                                    istore_2\n+                                    aload_1\n+                                    invokevirtual\n+                                    aconst_null\n+                                    astore_3\n+                                    aload_3\n+                                    checkcast\n+                                    getfield\n+                                    istore\n+                                    aload_3\n+                                    checkcast\n+                                    invokevirtual\n+                                    return\n+                                      \"\"\";\n+        Code_attribute code = (Code_attribute) method.attributes\n+                .get(Attribute.Code);\n+        String actualInstructions = printCode(code);\n+        if (!expectedInstructions.equals(actualInstructions)) {\n+            throw new AssertionError(\"Unexpected instructions found:\\n\" +\n+                                     actualInstructions);\n+        }\n+    }\n+\n+    String printCode(Code_attribute code) {\n+        return StreamSupport.stream(code.getInstructions().spliterator(), false)\n+                            .map(Instruction::getMnemonic)\n+                            .collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n+    }\n+\n+    String getName(Method m, ConstantPool constantPool) {\n+        try {\n+            return m.getName(constantPool);\n+        } catch (ConstantPoolException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckNeededCastInMemberAccess.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267542\n+ * @summary Verify there are no unnecessary checkcasts generated while acessing an instance\n+ *          field\/method through a reference projection.\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @compile -XDunifiedValRefClass NoUnnecessaryCast.java\n+ * @run main NoUnnecessaryCast\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.Code_attribute.InvalidIndex;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPoolException;\n+import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n+import com.sun.tools.classfile.Instruction;\n+import com.sun.tools.classfile.Method;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class NoUnnecessaryCast {\n+\n+    static primitive class Point {\n+        int x = 0, y = 0;\n+        void foo() {\n+            Point p0 = new Point();\n+            int x0 = p0.x;\n+            p0.foo();\n+            Point.ref p1 = null;\n+            int x1 = p1.x;\n+            p1.foo();\n+        }\n+    }\n+\n+    public static void main(String[] args)\n+            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+        new NoUnnecessaryCast()\n+                .checkClassFile(new File(System.getProperty(\"test.classes\", \".\"),\n+                    NoUnnecessaryCast.Point.class.getName() + \".class\"));\n+    }\n+\n+    void checkClassFile(File file)\n+            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+        ClassFile classFile = ClassFile.read(file);\n+        ConstantPool constantPool = classFile.constant_pool;\n+\n+        Method method = Arrays.stream(classFile.methods)\n+                              .filter(m -> getName(m, constantPool)\n+                                               .equals(\"foo\"))\n+                              .findAny()\n+                              .get();\n+        String expectedInstructions = \"\"\"\n+                                    invokestatic\n+                                    astore_1\n+                                    aload_1\n+                                    getfield\n+                                    istore_2\n+                                    aload_1\n+                                    invokevirtual\n+                                    aconst_null\n+                                    astore_3\n+                                    aload_3\n+                                    getfield\n+                                    istore\n+                                    aload_3\n+                                    invokevirtual\n+                                    return\n+                                      \"\"\";\n+        Code_attribute code = (Code_attribute) method.attributes\n+                .get(Attribute.Code);\n+        String actualInstructions = printCode(code);\n+        if (!expectedInstructions.equals(actualInstructions)) {\n+            throw new AssertionError(\"Unexpected instructions found:\\n\" +\n+                                     actualInstructions);\n+        }\n+    }\n+\n+    String printCode(Code_attribute code) {\n+        return StreamSupport.stream(code.getInstructions().spliterator(), false)\n+                            .map(Instruction::getMnemonic)\n+                            .collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n+    }\n+\n+    String getName(Method m, ConstantPool constantPool) {\n+        try {\n+            return m.getName(constantPool);\n+        } catch (ConstantPoolException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/NoUnnecessaryCast.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}