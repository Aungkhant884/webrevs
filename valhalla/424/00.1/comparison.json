{"files":[{"patch":"@@ -3015,1 +3015,1 @@\n-        Label is_inline_type, uninitialized;\n+        Label is_null_free_inline_type, uninitialized;\n@@ -3017,2 +3017,2 @@\n-        __ test_field_is_inline_type(flags2, rscratch1, is_inline_type);\n-          \/\/ field is not an inline type\n+        __ test_field_is_null_free_inline_type(flags2, rscratch1, is_null_free_inline_type);\n+          \/\/ field is not a null free inline type\n@@ -3021,2 +3021,2 @@\n-        \/\/ field is an inline type, must not return null even if uninitialized\n-        __ bind(is_inline_type);\n+        \/\/ field is a null free inline type, must not return null even if uninitialized\n+        __ bind(is_null_free_inline_type);\n@@ -3049,1 +3049,1 @@\n-        __ test_field_is_inline_type(flags2, rscratch1, is_inline_type);\n+        __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n@@ -3051,1 +3051,1 @@\n-      \/\/ field is not an inline type\n+      \/\/ field is not a null free inline type\n@@ -3402,1 +3402,1 @@\n-          __ test_field_is_not_inline_type(flags2, rscratch1, is_inline_type);\n+          __ test_field_is_not_null_free_inline_type(flags2, rscratch1, is_inline_type);\n@@ -3411,1 +3411,1 @@\n-          __ test_field_is_inline_type(flags2, rscratch1, is_inline_type);\n+          __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5882,1 +5882,1 @@\n-      if (ik->field_is_inline_type(i)) {\n+      if (ik->field_is_null_free_inline_type(i)) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-bool InstanceKlass::field_is_inline_type(int index) const { return Signature::basic_type(field(index)->signature(constants())) == T_INLINE_TYPE; }\n+bool InstanceKlass::field_is_null_free_inline_type(int index) const { return Signature::basic_type(field(index)->signature(constants())) == T_INLINE_TYPE; }\n@@ -1577,1 +1577,2 @@\n-        ObjArrayKlass* k = ObjArrayKlass::allocate_objArray_klass(class_loader_data(), 1, this, CHECK_NULL);\n+        ObjArrayKlass* k = ObjArrayKlass::allocate_objArray_klass(class_loader_data(), 1, this,\n+                                                                  false, false, CHECK_NULL);\n@@ -2894,1 +2895,1 @@\n-  dest[dest_index++] = is_inline_klass() ? JVM_SIGNATURE_INLINE_TYPE : JVM_SIGNATURE_CLASS;\n+  dest[dest_index++] = JVM_SIGNATURE_CLASS;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-        splitPrimitiveClass = options.isUnset(\"unifiedValRefClass\");\n+        splitPrimitiveClass = false ; \/\/ options.isUnset(\"unifiedValRefClass\"); \/\/ Temporarely forcing the default\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}