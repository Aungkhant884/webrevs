{"files":[{"patch":"@@ -3014,28 +3014,5 @@\n-      Label is_null_free_inline_type, uninitialized;\n-      \/\/ Issue below if the static field has not been initialized yet\n-      __ test_field_is_null_free_inline_type(flags2, rscratch1, is_null_free_inline_type);\n-        \/\/ field is not a null free inline type\n-        __ push(atos);\n-        __ jmp(Done);\n-      \/\/ field is a null free inline type, must not return null even if uninitialized\n-      __ bind(is_null_free_inline_type);\n-        __ testptr(rax, rax);\n-        __ jcc(Assembler::zero, uninitialized);\n-          __ push(atos);\n-          __ jmp(Done);\n-        __ bind(uninitialized);\n-          __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n-#ifdef _LP64\n-          Label slow_case, finish;\n-          __ cmpb(Address(rcx, InstanceKlass::init_state_offset()), InstanceKlass::fully_initialized);\n-          __ jcc(Assembler::notEqual, slow_case);\n-        __ get_default_value_oop(rcx, off, rax);\n-        __ jmp(finish);\n-        __ bind(slow_case);\n-#endif \/\/ LP64\n-          __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_inline_type_field),\n-                 obj, flags2);\n-#ifdef _LP64\n-          __ bind(finish);\n-#endif \/\/ _LP64\n-          __ verify_oop(rax);\n+      if (EnableValhalla) {\n+        Label is_null_free_inline_type, uninitialized;\n+        \/\/ Issue below if the static field has not been initialized yet\n+        __ test_field_is_null_free_inline_type(flags2, rscratch1, is_null_free_inline_type);\n+          \/\/ field is not a null free inline type\n@@ -3044,0 +3021,25 @@\n+        \/\/ field is a null free inline type, must not return null even if uninitialized\n+        __ bind(is_null_free_inline_type);\n+           __ testptr(rax, rax);\n+          __ jcc(Assembler::zero, uninitialized);\n+            __ push(atos);\n+            __ jmp(Done);\n+          __ bind(uninitialized);\n+            __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n+  #ifdef _LP64\n+            Label slow_case, finish;\n+            __ cmpb(Address(rcx, InstanceKlass::init_state_offset()), InstanceKlass::fully_initialized);\n+            __ jcc(Assembler::notEqual, slow_case);\n+          __ get_default_value_oop(rcx, off, rax);\n+          __ jmp(finish);\n+          __ bind(slow_case);\n+  #endif \/\/ LP64\n+            __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_inline_type_field),\n+                  obj, flags2);\n+  #ifdef _LP64\n+            __ bind(finish);\n+  #endif \/\/ _LP64\n+      }\n+        __ verify_oop(rax);\n+        __ push(atos);\n+        __ jmp(Done);\n@@ -3046,5 +3048,37 @@\n-      __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n-        \/\/ field is not an inline type\n-        pop_and_check_object(obj);\n-        __ load_heap_oop(rax, field);\n-        __ push(atos);\n+      if (EnableValhalla) {\n+        __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n+      }\n+      \/\/ field is not a null free inline type\n+      pop_and_check_object(obj);\n+      __ load_heap_oop(rax, field);\n+      __ push(atos);\n+      if (rc == may_rewrite) {\n+        patch_bytecode(Bytecodes::_fast_agetfield, bc, rbx);\n+      }\n+      __ jmp(Done);\n+      if (EnableValhalla) {\n+        __ bind(is_inline_type);\n+          __ test_field_is_inlined(flags2, rscratch1, is_inlined);\n+            \/\/ field is not inlined\n+            __ movptr(rax, rcx);  \/\/ small dance required to preserve the klass_holder somewhere\n+            pop_and_check_object(obj);\n+            __ push(rax);\n+            __ load_heap_oop(rax, field);\n+            __ pop(rcx);\n+            __ testptr(rax, rax);\n+            __ jcc(Assembler::notZero, nonnull);\n+              __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n+              __ get_inline_type_field_klass(rcx, flags2, rbx);\n+              __ get_default_value_oop(rbx, rcx, rax);\n+            __ bind(nonnull);\n+            __ verify_oop(rax);\n+            __ push(atos);\n+            __ jmp(rewrite_inline);\n+          __ bind(is_inlined);\n+          \/\/ field is inlined\n+            __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n+            pop_and_check_object(rax);\n+            __ read_inlined_field(rcx, flags2, rbx, rax);\n+            __ verify_oop(rax);\n+            __ push(atos);\n+        __ bind(rewrite_inline);\n@@ -3052,1 +3086,1 @@\n-          patch_bytecode(Bytecodes::_fast_agetfield, bc, rbx);\n+          patch_bytecode(Bytecodes::_fast_qgetfield, bc, rbx);\n@@ -3055,27 +3089,0 @@\n-      __ bind(is_inline_type);\n-        __ test_field_is_inlined(flags2, rscratch1, is_inlined);\n-          \/\/ field is not inlined\n-          __ movptr(rax, rcx);  \/\/ small dance required to preserve the klass_holder somewhere\n-          pop_and_check_object(obj);\n-          __ push(rax);\n-          __ load_heap_oop(rax, field);\n-          __ pop(rcx);\n-          __ testptr(rax, rax);\n-          __ jcc(Assembler::notZero, nonnull);\n-            __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n-            __ get_inline_type_field_klass(rcx, flags2, rbx);\n-            __ get_default_value_oop(rbx, rcx, rax);\n-          __ bind(nonnull);\n-          __ verify_oop(rax);\n-          __ push(atos);\n-          __ jmp(rewrite_inline);\n-        __ bind(is_inlined);\n-        \/\/ field is inlined\n-          __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n-          pop_and_check_object(rax);\n-          __ read_inlined_field(rcx, flags2, rbx, rax);\n-          __ verify_oop(rax);\n-          __ push(atos);\n-      __ bind(rewrite_inline);\n-      if (rc == may_rewrite) {\n-        patch_bytecode(Bytecodes::_fast_qgetfield, bc, rbx);\n@@ -3083,1 +3090,0 @@\n-      __ jmp(Done);\n@@ -3395,3 +3401,5 @@\n-        __ test_field_is_not_null_free_inline_type(flags2, rscratch1, is_inline_type);\n-        __ null_check(rax);\n-        __ bind(is_inline_type);\n+        if (EnableValhalla) {\n+          __ test_field_is_not_null_free_inline_type(flags2, rscratch1, is_inline_type);\n+          __ null_check(rax);\n+          __ bind(is_inline_type);\n+        }\n@@ -3402,1 +3410,3 @@\n-        __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n+        if (EnableValhalla) {\n+          __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n+        }\n@@ -3412,20 +3422,23 @@\n-        \/\/ Implementation of the inline type semantic\n-        __ bind(is_inline_type);\n-        __ null_check(rax);\n-        __ test_field_is_inlined(flags2, rscratch1, is_inlined);\n-        \/\/ field is not inlined\n-        pop_and_check_object(obj);\n-        \/\/ Store into the field\n-        do_oop_store(_masm, field, rax);\n-        __ jmp(rewrite_inline);\n-        __ bind(is_inlined);\n-        \/\/ field is inlined\n-        pop_and_check_object(obj);\n-        assert_different_registers(rax, rdx, obj, off);\n-        __ load_klass(rdx, rax, rscratch1);\n-        __ data_for_oop(rax, rax, rdx);\n-        __ addptr(obj, off);\n-        __ access_value_copy(IN_HEAP, rax, obj, rdx);\n-        __ bind(rewrite_inline);\n-        if (rc == may_rewrite) {\n-          patch_bytecode(Bytecodes::_fast_qputfield, bc, rbx, true, byte_no);\n+        if (EnableValhalla) {\n+          \/\/ Implementation of the inline type semantic\n+          __ bind(is_inline_type);\n+          __ null_check(rax);\n+          __ test_field_is_inlined(flags2, rscratch1, is_inlined);\n+          \/\/ field is not inlined\n+          pop_and_check_object(obj);\n+          \/\/ Store into the field\n+          do_oop_store(_masm, field, rax);\n+          __ jmp(rewrite_inline);\n+          __ bind(is_inlined);\n+          \/\/ field is inlined\n+          pop_and_check_object(obj);\n+          assert_different_registers(rax, rdx, obj, off);\n+          __ load_klass(rdx, rax, rscratch1);\n+          __ data_for_oop(rax, rax, rdx);\n+          __ addptr(obj, off);\n+          __ access_value_copy(IN_HEAP, rax, obj, rdx);\n+          __ bind(rewrite_inline);\n+          if (rc == may_rewrite) {\n+            patch_bytecode(Bytecodes::_fast_qputfield, bc, rbx, true, byte_no);\n+          }\n+          __ jmp(Done);\n@@ -3433,1 +3446,0 @@\n-        __ jmp(Done);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":99,"deletions":87,"binary":false,"changes":186,"status":"modified"},{"patch":"@@ -6627,1 +6627,1 @@\n-  if (!is_inline_type() && invalid_inline_super() && (_super_klass == NULL || !_super_klass->invalid_inline_super())\n+  if (EnableValhalla && !is_inline_type() && invalid_inline_super() && (_super_klass == NULL || !_super_klass->invalid_inline_super())\n@@ -6694,14 +6694,16 @@\n-  for (AllFieldStream fs(_fields, cp); !fs.done(); fs.next()) {\n-    if (Signature::basic_type(fs.signature()) == T_INLINE_TYPE && !fs.access_flags().is_static()) {\n-      \/\/ Pre-load inline class\n-      Klass* klass = SystemDictionary::resolve_inline_type_field_or_fail(&fs,\n-          Handle(THREAD, _loader_data->class_loader()),\n-          _protection_domain, true, CHECK);\n-      assert(klass != NULL, \"Sanity check\");\n-      if (!klass->access_flags().is_inline_type()) {\n-        assert(klass->is_instance_klass(), \"Sanity check\");\n-        ResourceMark rm(THREAD);\n-          THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n-                    err_msg(\"Class %s expects class %s to be an inline type, but it is not\",\n-                    _class_name->as_C_string(),\n-                    InstanceKlass::cast(klass)->external_name()));\n+  if (EnableValhalla) {\n+    for (AllFieldStream fs(_fields, cp); !fs.done(); fs.next()) {\n+      if (Signature::basic_type(fs.signature()) == T_INLINE_TYPE && !fs.access_flags().is_static()) {\n+        \/\/ Pre-load inline class\n+        Klass* klass = SystemDictionary::resolve_inline_type_field_or_fail(&fs,\n+            Handle(THREAD, _loader_data->class_loader()),\n+            _protection_domain, true, CHECK);\n+        assert(klass != NULL, \"Sanity check\");\n+        if (!klass->access_flags().is_inline_type()) {\n+          assert(klass->is_instance_klass(), \"Sanity check\");\n+          ResourceMark rm(THREAD);\n+            THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                      err_msg(\"Class %s expects class %s to be an inline type, but it is not\",\n+                      _class_name->as_C_string(),\n+                      InstanceKlass::cast(klass)->external_name()));\n+        }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1115,0 +1115,1 @@\n+    case Bytecodes::_checkcast:\n@@ -1437,0 +1438,5 @@\n+    case Bytecodes::_checkcast: {\n+        int cp_index = Bytes::get_Java_u2(code_base + pos);\n+        ConstantPool* cp = _method->constants();\n+        os->print(\"Cannot cast to null-free type \\\"%s\\\"\", cp->klass_at_noresolve(cp_index)->as_C_string());\n+      } break;\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -999,1 +999,1 @@\n-  {\n+  if (EnableValhalla) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1219,1 +1219,1 @@\n-                                  classType.tsym, classType.getMetadata(), classType.isReferenceProjection()) {\n+                                  classType.tsym, classType.getMetadata(), classType.getFlavor()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -1346,1 +1347,1 @@\n-                new ClassType(Type.noType, null, null),\n+                new ClassType(Type.noType, null, null, TypeMetadata.EMPTY, Flavor.X_Typeof_X),\n@@ -1384,1 +1385,1 @@\n-                                              type.isReferenceProjection());\n+                                              type.getFlavor());\n@@ -1453,0 +1454,8 @@\n+            } finally {\n+                if (this.type != null && this.type.hasTag(CLASS)) {\n+                    ClassType ct = (ClassType) this.type;\n+                    ct.flavor = ct.flavor.metamorphose((this.flags_field & PRIMITIVE_CLASS) != 0);\n+                    if (this.erasure_field != null && this.erasure_field.hasTag(CLASS)) {\n+                        ((ClassType) this.erasure_field).flavor = ct.flavor;\n+                    }\n+                }\n@@ -1630,0 +1639,1 @@\n+                classType.flavor = Flavor.X_Typeof_X;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -243,0 +244,8 @@\n+    \/**\n+     * Return the `flavor' associated with a ClassType.\n+     * @see ClassType.Flavor\n+     *\/\n+    public Flavor getFlavor() {\n+        throw new AssertionError(\"Unexpected call to getFlavor() on a Type that is not a ClassType: \" + this);\n+    }\n+\n@@ -289,1 +298,1 @@\n-            else return new ClassType(outer1, typarams1, t.tsym, t.metadata, t.isReferenceProjection()) {\n+            else return new ClassType(outer1, typarams1, t.tsym, t.metadata, t.getFlavor()) {\n@@ -1020,0 +1029,79 @@\n+        \/**\n+         * The 'flavor' of a ClassType indicates its reference\/primitive projectionness\n+         * viewed against the default nature of the associated class.\n+         *\/\n+        public enum Flavor {\n+\n+            \/**\n+             * Classic reference type. Also reference projection type of a reference-favoring aka\n+             * reference-default primitive class type\n+             *\/\n+            L_TypeOf_L,\n+\n+            \/**\n+             * Reference projection type of a primitive-favoring aka primitive-default\n+             * plain vanilla primitive class type,\n+             *\/\n+            L_TypeOf_Q,\n+\n+            \/**\n+             * Value projection type of a primitive-favoring aka primitive-default\n+             * plain vanilla primitive class type,\n+             *\/\n+            Q_TypeOf_Q,\n+\n+            \/**\n+             * Value projection type of a reference-favoring aka\n+             * reference-default primitive class type\n+             *\/\n+            Q_TypeOf_L,\n+\n+            \/**\n+             * Reference projection type of a class type of an as yet unknown default provenance, 'X' will be\n+             * discovered to be 'L' or 'Q' in \"due course\" and mutated suitably.\n+             *\/\n+            L_TypeOf_X,\n+\n+            \/**\n+             * Value projection type of a class type of an as yet unknown default provenance, 'X' will be\n+             * discovered to be 'L' or 'Q' in \"due course\" and mutated suitably.\n+             *\/\n+            Q_TypeOf_X,\n+\n+            \/**\n+             *  As yet unknown projection type of an as yet unknown default provenance class.\n+             *\/\n+            X_Typeof_X,\n+\n+            \/**\n+             *  An error type - we don't care to discriminate them any further.\n+             *\/\n+             E_Typeof_X;\n+\n+            \/\/ We don't seem to need X_Typeof_L or X_Typeof_Q so far.\n+\n+            \/\/ Transform a larval form into a more evolved form\n+            public Flavor metamorphose(boolean isPrimtiveClass) {\n+\n+                switch (this) {\n+\n+                    case E_Typeof_X:  \/\/ stunted form\n+                    case L_TypeOf_L:\n+                    case L_TypeOf_Q:\n+                    case Q_TypeOf_L:\n+                    case Q_TypeOf_Q:\n+                            \/\/ These are fully evolved sealed forms or stunted - no futher transformation\n+                            return this;\n+                    case L_TypeOf_X:\n+                            return isPrimtiveClass ? L_TypeOf_Q : L_TypeOf_L;\n+                    case Q_TypeOf_X:\n+                            return isPrimtiveClass ? Q_TypeOf_Q : Q_TypeOf_L;\n+                    case X_Typeof_X:\n+                            \/\/ TODO: Discriminate between ref-val defaultness\n+                            return isPrimtiveClass ? Q_TypeOf_Q : L_TypeOf_L;\n+                    default:\n+                            throw new AssertionError(\"Unexpected class type flavor\");\n+                }\n+            }\n+        }\n+\n@@ -1053,1 +1141,1 @@\n-        \/** Is this class type a reference projection of a primitive class type ?\n+        \/** Is this L of default {L, Q, X} or Q of default {L, Q, X} ?\n@@ -1055,1 +1143,1 @@\n-        private boolean isReferenceProjection;\n+        public Flavor flavor;\n@@ -1057,0 +1145,4 @@\n+        \/*\n+         * Use of this constructor is kinda sorta deprecated, use the other constructor\n+         * that forces the call site to consider and include the class type flavor.\n+         *\/\n@@ -1058,1 +1150,1 @@\n-            this(outer, typarams, tsym, TypeMetadata.EMPTY, false);\n+            this(outer, typarams, tsym, TypeMetadata.EMPTY, Flavor.L_TypeOf_L);\n@@ -1062,6 +1154,1 @@\n-                         TypeMetadata metadata) {\n-            this(outer, typarams, tsym, metadata, false);\n-        }\n-\n-        public ClassType(Type outer, List<Type> typarams, TypeSymbol tsym,\n-                         TypeMetadata metadata, boolean isReferenceProjection) {\n+                         TypeMetadata metadata, Flavor flavor) {\n@@ -1069,1 +1156,1 @@\n-            this.outer_field = outer != null && outer.isReferenceProjection() ? outer.valueProjection() : outer;\n+            this.outer_field = outer;\n@@ -1074,1 +1161,1 @@\n-            this.isReferenceProjection = isReferenceProjection;\n+            this.flavor = flavor;\n@@ -1083,1 +1170,1 @@\n-            return new ClassType(outer_field, typarams_field, tsym, md, isReferenceProjection) {\n+            return new ClassType(outer_field, typarams_field, tsym, md, flavor) {\n@@ -1101,1 +1188,1 @@\n-            return new ClassType(getEnclosingType(), typarams_field, tsym, metadata, isReferenceProjection) {\n+            return new ClassType(getEnclosingType(), typarams_field, tsym, metadata, flavor) {\n@@ -1128,0 +1215,6 @@\n+            boolean isReferenceProjection;\n+            try {\n+                isReferenceProjection = isReferenceProjection();\n+            } catch (CompletionFailure cf) {\n+                isReferenceProjection = false; \/\/ handle missing types gracefully.\n+            }\n@@ -1174,0 +1267,4 @@\n+        public Flavor getFlavor() {\n+            return flavor;\n+        }\n+\n@@ -1190,0 +1287,3 @@\n+            if (outer_field != null && outer_field.isReferenceProjection()) {\n+                outer_field = outer_field.valueProjection();\n+            }\n@@ -1194,1 +1294,1 @@\n-            outer_field = outer != null && outer.isReferenceProjection() ? outer.valueProjection() : outer;\n+            outer_field = outer;\n@@ -1223,1 +1323,1 @@\n-            return !isReferenceProjection && tsym != null && tsym.isPrimitiveClass();\n+            return !isReferenceProjection() && tsym != null && tsym.isPrimitiveClass();\n@@ -1228,1 +1328,7 @@\n-            return isReferenceProjection;\n+            \/\/ gaurd against over-eager and\/or inopportune completion\n+            if (tsym != null) {\n+                if (flavor == Flavor.L_TypeOf_X || tsym.isCompleted()) {\n+                    flavor = flavor.metamorphose(tsym.isPrimitiveClass());\n+                }\n+            }\n+            return flavor == Flavor.L_TypeOf_Q;\n@@ -1239,1 +1345,1 @@\n-            projection = new ClassType(outer_field, typarams_field, tsym, getMetadata(), false);\n+            projection = new ClassType(outer_field, typarams_field, tsym, getMetadata(), Flavor.Q_TypeOf_Q);\n@@ -1259,1 +1365,1 @@\n-            projection = new ClassType(outer_field, typarams_field, tsym, getMetadata(), true);\n+            projection = new ClassType(outer_field, typarams_field, tsym, getMetadata(), Flavor.L_TypeOf_Q);\n@@ -1317,1 +1423,1 @@\n-            super(outer, List.nil(), tsym, metadata, false);\n+            super(outer, List.nil(), tsym, metadata, tsym.type.getFlavor());\n@@ -2482,2 +2588,1 @@\n-            super(noType, List.nil(), null);\n-            this.tsym = tsym;\n+            super(noType, List.nil(), tsym, TypeMetadata.EMPTY, Flavor.E_Typeof_X);\n@@ -2488,2 +2593,2 @@\n-                          TypeMetadata metadata) {\n-            super(noType, List.nil(), null, metadata);\n+                          TypeMetadata metadata, Flavor flavor) {\n+            super(noType, List.nil(), null, metadata, flavor);\n@@ -2496,1 +2601,1 @@\n-            return new ErrorType(originalType, tsym, md) {\n+            return new ErrorType(originalType, tsym, md, getFlavor()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":130,"deletions":25,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -630,1 +630,1 @@\n-                                                      t.getMetadata(), t.isReferenceProjection());\n+                                                      t.getMetadata(), t.getFlavor());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-                else return new ClassType(outer1, typarams1.toList(), t.tsym, t.getMetadata(), t.isReferenceProjection()) {\n+                else return new ClassType(outer1, typarams1.toList(), t.tsym, t.getMetadata(), t.getFlavor()) {\n@@ -1028,1 +1028,1 @@\n-        return t != null && !t.isReferenceProjection() && t.tsym != null && (t.tsym.flags_field & Flags.PRIMITIVE_CLASS) != 0;\n+        return t != null && t.isPrimitiveClass();\n@@ -2581,1 +2581,1 @@\n-                if (t.isReferenceProjection()) {\n+                if (erased.hasTag(CLASS) && t.flavor != erased.getFlavor()) {\n@@ -2584,1 +2584,1 @@\n-                            erased.getMetadata(), true);\n+                            erased.getMetadata(), t.flavor);\n@@ -2648,2 +2648,0 @@\n-        if (isPrimitiveClass(bounds.head))\n-            flags |= PRIMITIVE_CLASS;\n@@ -2921,1 +2919,1 @@\n-                                         t.getMetadata(), t.isReferenceProjection());\n+                                         t.getMetadata(), t.getFlavor());\n@@ -4048,1 +4046,1 @@\n-                                 class1.tsym);\n+                                 class1.tsym, TypeMetadata.EMPTY, class1.getFlavor());\n@@ -4607,1 +4605,1 @@\n-                                 cls.getMetadata(), cls.isReferenceProjection());\n+                                 cls.getMetadata(), cls.getFlavor());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -2622,1 +2623,1 @@\n-                        restype.isReferenceProjection());\n+                        restype.getFlavor());\n@@ -2824,1 +2825,1 @@\n-                                               clazztype.isReferenceProjection());\n+                                               clazztype.getFlavor());\n@@ -4549,0 +4550,1 @@\n+                    Assert.check(owntype.getFlavor() != Flavor.X_Typeof_X);\n@@ -4556,1 +4558,1 @@\n-                        owntype = new ClassType(owntype.getEnclosingType(), owntype.getTypeArguments(), (TypeSymbol)sym, owntype.getMetadata(), true);\n+                        owntype = new ClassType(owntype.getEnclosingType(), owntype.getTypeArguments(), (TypeSymbol)sym, owntype.getMetadata(), Flavor.L_TypeOf_Q);\n@@ -4586,1 +4588,1 @@\n-                                owntype.getMetadata(), owntype.isReferenceProjection());\n+                                owntype.getMetadata(), owntype.getFlavor());\n@@ -4997,1 +4999,1 @@\n-                                        clazztype.getMetadata(), clazztype.isReferenceProjection());\n+                                        clazztype.getMetadata(), clazztype.getFlavor());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -477,0 +478,2 @@\n+        ct.flavor = ct.flavor.metamorphose((c.flags_field & PRIMITIVE_CLASS) != 0);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3725,1 +3725,1 @@\n-                this.site = new ClassType(site.getEnclosingType(), site.tsym.type.getTypeArguments(), site.tsym, site.getMetadata(), site.isReferenceProjection());\n+                this.site = new ClassType(site.getEnclosingType(), site.tsym.type.getTypeArguments(), site.tsym, site.getMetadata(), site.getFlavor());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -73,0 +74,2 @@\n+import static com.sun.tools.javac.code.Type.ClassType.Flavor.L_TypeOf_Q;\n+import static com.sun.tools.javac.code.Type.ClassType.Flavor.Q_TypeOf_Q;\n@@ -538,1 +541,2 @@\n-        if (signature[sigp] != 'L' && signature[sigp] != 'Q')\n+        byte prefix = signature[sigp];\n+        if (prefix != 'L' && prefix != 'Q')\n@@ -544,1 +548,1 @@\n-        boolean requireProjection;\n+        ClassType.Flavor flavor;\n@@ -557,1 +561,2 @@\n-                    requireProjection = true;\n+                    Assert.check(prefix == 'L');\n+                    flavor = L_TypeOf_Q;\n@@ -559,1 +564,2 @@\n-                    requireProjection = false;\n+                    \/\/ We are seeing QFoo; or LFoo; The name itself does not shine any light on default val-refness\n+                    flavor = prefix == 'L' ? Flavor.L_TypeOf_X : Flavor.Q_TypeOf_X;\n@@ -561,1 +567,1 @@\n-                ClassSymbol t = enterClass(name);\n+                ClassSymbol t = flavor == L_TypeOf_Q ? enterPrimitiveClass(name) : enterClass(name);\n@@ -563,3 +569,10 @@\n-                    return (outer == Type.noType) ?\n-                            requireProjection ? t.erasure(types).referenceProjection() : t.erasure(types) :\n-                        new ClassType(outer, List.nil(), t, TypeMetadata.EMPTY, requireProjection);\n+                    if (outer == Type.noType) {\n+                        ClassType et = (ClassType) t.erasure(types);\n+                        if (flavor == L_TypeOf_Q) {\n+                            return et.referenceProjection();\n+                        } else {\n+                            \/\/ Todo: This spews out more objects than before, i.e no reuse with identical flavor\n+                            return new ClassType(et.getEnclosingType(), List.nil(), et.tsym, et.getMetadata(), flavor);\n+                        }\n+                    }\n+                    return new ClassType(outer, List.nil(), t, TypeMetadata.EMPTY, flavor);\n@@ -577,1 +590,2 @@\n-                    requireProjection = true;\n+                    Assert.check(prefix == 'L');\n+                    flavor = L_TypeOf_Q;\n@@ -579,1 +593,2 @@\n-                    requireProjection = false;\n+                    \/\/ We are seeing QFoo; or LFoo; The name itself does not shine any light on default val-refness\n+                    flavor = prefix == 'L' ? Flavor.L_TypeOf_X : Flavor.Q_TypeOf_X;\n@@ -581,2 +596,2 @@\n-                ClassSymbol t = enterClass(name);\n-                outer = new ClassType(outer, sigToTypes('>'), t, TypeMetadata.EMPTY, requireProjection) {\n+                ClassSymbol t = flavor == L_TypeOf_Q ? enterPrimitiveClass(name) : enterClass(name);\n+                outer = new ClassType(outer, sigToTypes('>'), t, TypeMetadata.EMPTY, flavor) {\n@@ -647,1 +662,2 @@\n-                        requireProjection = true;\n+                        Assert.check(prefix == 'L');\n+                        flavor = L_TypeOf_Q;\n@@ -649,1 +665,2 @@\n-                        requireProjection = false;\n+                        \/\/ We are seeing QFoo; or LFoo; The name itself does not shine any light on default val-refness\n+                        flavor = prefix == 'L' ? Flavor.L_TypeOf_X : Flavor.Q_TypeOf_X;\n@@ -651,2 +668,2 @@\n-                    t = enterClass(name);\n-                    outer = new ClassType(outer, List.nil(), t, TypeMetadata.EMPTY, requireProjection);\n+                    t = flavor == L_TypeOf_Q ? enterPrimitiveClass(name) : enterClass(name);\n+                    outer = new ClassType(outer, List.nil(), t, TypeMetadata.EMPTY, flavor);\n@@ -2507,0 +2524,19 @@\n+    \/**\n+     * Special routine to enter a class that we conclude must be a primitive class from naming convention\n+     * E.g, if we see LFoo$ref in descriptors, we discern that to be the reference projection of the primitive\n+     * class Foo\n+     *\/\n+    protected ClassSymbol enterPrimitiveClass(Name name) {\n+        ClassSymbol c = enterClass(name);\n+        noticePrimitiveClass(c);\n+        return c;\n+    }\n+\n+    private void noticePrimitiveClass(ClassSymbol c) {\n+        ClassType ct = (ClassType) c.type;\n+        ct.flavor = ct.flavor.metamorphose(true);\n+        if (c.erasure_field != null) {\n+            ((ClassType) c.erasure_field).flavor = ct.flavor;\n+        }\n+    }\n+\n@@ -2616,0 +2652,3 @@\n+                if ((flags & PRIMITIVE_CLASS) != 0) {\n+                    noticePrimitiveClass(member); \/\/ Do we care to do this ?\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":55,"deletions":16,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -1546,1 +1547,5 @@\n-            projectedType = new ClassType(ct.getEnclosingType(), ct.typarams_field, null, ct.getMetadata(), false);\n+            \/* Note, the class type associated with the Primitive$ref.class is NOT a reference projection type. A reference projection\n+             * type gets created by using Primitive.ref notation in the source file or while reading in a descriptor of such a type\n+             * from the class file. Here we are generating the Primitive$ref.class for the VM's benefit and it is a reference class.\n+             *\/\n+            projectedType = new ClassType(ct.getEnclosingType(), ct.typarams_field, null, ct.getMetadata(), Flavor.L_TypeOf_L);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -341,2 +341,4 @@\n-                            fieldAccess.selected =\n-                                    make.TypeCast(types.erasure(selectedType.valueProjection()), fieldAccess.selected);\n+                            if (types.splitPrimitiveClass) {\n+                                fieldAccess.selected =\n+                                        make.TypeCast(types.erasure(selectedType.valueProjection()), fieldAccess.selected);\n+                            } \/\/ else members of Foo can be accessed via LFoo or QFoo at the VM level without a cast.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransValues.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-            return (DeclaredType) new Type.ClassType(outer, targs.toList(), sym);\n+            return (DeclaredType) new Type.ClassType(outer, targs.toList(), sym, TypeMetadata.EMPTY, sym.type.getFlavor());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import com.sun.tools.javac.code.Type.ClassType.Flavor;\n@@ -1346,1 +1347,1 @@\n-                            cs.type = new ClassType(cs.type.getEnclosingType(), null, cs);\n+                            cs.type = new ClassType(cs.type.getEnclosingType(), null, cs, TypeMetadata.EMPTY, Flavor.X_Typeof_X);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267542\n+ * @summary Verify that necessary checkcasts are generated while acessing an instance\n+ *          field\/method through a reference projection.\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @compile CheckNeededCastInMemberAccess.java\n+ * @run main CheckNeededCastInMemberAccess\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.Code_attribute.InvalidIndex;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPoolException;\n+import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n+import com.sun.tools.classfile.Instruction;\n+import com.sun.tools.classfile.Method;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class CheckNeededCastInMemberAccess {\n+\n+    static primitive class Point {\n+        int x = 0, y = 0;\n+        void foo() {\n+            Point p0 = new Point();\n+            int x0 = p0.x;\n+            p0.foo();\n+            Point.ref p1 = null;\n+            int x1 = p1.x;\n+            p1.foo();\n+        }\n+    }\n+\n+    public static void main(String[] args)\n+            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+        new CheckNeededCastInMemberAccess()\n+                .checkClassFile(new File(System.getProperty(\"test.classes\", \".\"),\n+                    CheckNeededCastInMemberAccess.Point.class.getName() + \".class\"));\n+    }\n+\n+    void checkClassFile(File file)\n+            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+        ClassFile classFile = ClassFile.read(file);\n+        ConstantPool constantPool = classFile.constant_pool;\n+\n+        Method method = Arrays.stream(classFile.methods)\n+                              .filter(m -> getName(m, constantPool)\n+                                               .equals(\"foo\"))\n+                              .findAny()\n+                              .get();\n+        String expectedInstructions = \"\"\"\n+                                    invokestatic\n+                                    astore_1\n+                                    aload_1\n+                                    getfield\n+                                    istore_2\n+                                    aload_1\n+                                    invokevirtual\n+                                    aconst_null\n+                                    astore_3\n+                                    aload_3\n+                                    checkcast\n+                                    getfield\n+                                    istore\n+                                    aload_3\n+                                    checkcast\n+                                    invokevirtual\n+                                    return\n+                                      \"\"\";\n+        Code_attribute code = (Code_attribute) method.attributes\n+                .get(Attribute.Code);\n+        String actualInstructions = printCode(code);\n+        if (!expectedInstructions.equals(actualInstructions)) {\n+            throw new AssertionError(\"Unexpected instructions found:\\n\" +\n+                                     actualInstructions);\n+        }\n+    }\n+\n+    String printCode(Code_attribute code) {\n+        return StreamSupport.stream(code.getInstructions().spliterator(), false)\n+                            .map(Instruction::getMnemonic)\n+                            .collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n+    }\n+\n+    String getName(Method m, ConstantPool constantPool) {\n+        try {\n+            return m.getName(constantPool);\n+        } catch (ConstantPoolException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckNeededCastInMemberAccess.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266466\n+ * @summary Enhance javac to consume unified primitive class files\n+ * @compile -XDunifiedValRefClass -XDallowWithFieldOperator Point.java Rectangle.java\n+ * @compile\/fail\/ref=ConsumeUnifiedClass.out -XDrawDiagnostics ConsumeUnifiedClass.java\n+ *\/\n+\n+public primitive class ConsumeUnifiedClass {\n+    public static void main(String [] args) {\n+        Rectangle r = new Rectangle(null, null); \/\/ Check method type decoding, should error\n+        r = Rectangle.from(null, null); \/\/ OK.\n+        Rectangle.origin = null; \/\/ Check field type decoding, should error\n+        Rectangle.origin = Point.makePoint(0, 0); \/\/ OK\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ConsumeUnifiedClass.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+ConsumeUnifiedClass.java:36:23: compiler.err.cant.apply.symbol: kindname.constructor, Rectangle, Point,Point, compiler.misc.type.null,compiler.misc.type.null, kindname.class, Rectangle, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: compiler.misc.type.null, Point))\n+ConsumeUnifiedClass.java:38:28: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, Point)\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ConsumeUnifiedClass.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267542\n+ * @summary Verify there are no unnecessary checkcasts generated while acessing an instance\n+ *          field\/method through a reference projection.\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @compile -XDunifiedValRefClass NoUnnecessaryCast.java\n+ * @run main NoUnnecessaryCast\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.Code_attribute.InvalidIndex;\n+import com.sun.tools.classfile.ConstantPool;\n+import com.sun.tools.classfile.ConstantPoolException;\n+import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n+import com.sun.tools.classfile.Instruction;\n+import com.sun.tools.classfile.Method;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class NoUnnecessaryCast {\n+\n+    static primitive class Point {\n+        int x = 0, y = 0;\n+        void foo() {\n+            Point p0 = new Point();\n+            int x0 = p0.x;\n+            p0.foo();\n+            Point.ref p1 = null;\n+            int x1 = p1.x;\n+            p1.foo();\n+        }\n+    }\n+\n+    public static void main(String[] args)\n+            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+        new NoUnnecessaryCast()\n+                .checkClassFile(new File(System.getProperty(\"test.classes\", \".\"),\n+                    NoUnnecessaryCast.Point.class.getName() + \".class\"));\n+    }\n+\n+    void checkClassFile(File file)\n+            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+        ClassFile classFile = ClassFile.read(file);\n+        ConstantPool constantPool = classFile.constant_pool;\n+\n+        Method method = Arrays.stream(classFile.methods)\n+                              .filter(m -> getName(m, constantPool)\n+                                               .equals(\"foo\"))\n+                              .findAny()\n+                              .get();\n+        String expectedInstructions = \"\"\"\n+                                    invokestatic\n+                                    astore_1\n+                                    aload_1\n+                                    getfield\n+                                    istore_2\n+                                    aload_1\n+                                    invokevirtual\n+                                    aconst_null\n+                                    astore_3\n+                                    aload_3\n+                                    getfield\n+                                    istore\n+                                    aload_3\n+                                    invokevirtual\n+                                    return\n+                                      \"\"\";\n+        Code_attribute code = (Code_attribute) method.attributes\n+                .get(Attribute.Code);\n+        String actualInstructions = printCode(code);\n+        if (!expectedInstructions.equals(actualInstructions)) {\n+            throw new AssertionError(\"Unexpected instructions found:\\n\" +\n+                                     actualInstructions);\n+        }\n+    }\n+\n+    String printCode(Code_attribute code) {\n+        return StreamSupport.stream(code.getInstructions().spliterator(), false)\n+                            .map(Instruction::getMnemonic)\n+                            .collect(Collectors.joining(\"\\n\", \"\", \"\\n\"));\n+    }\n+\n+    String getName(Method m, ConstantPool constantPool) {\n+        try {\n+            return m.getName(constantPool);\n+        } catch (ConstantPoolException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/NoUnnecessaryCast.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public primitive class Rectangle {\n+\n+    Point topLeft, bottomRight;\n+\n+    static Point origin;\n+\n+    static Rectangle from (Point.ref topLeft, Point.ref bottomRight) {\n+        return new Rectangle(topLeft, bottomRight);\n+    }\n+\n+    Rectangle (Point topLeft, Point bottomRight) {\n+        this.topLeft = topLeft;\n+        this.bottomRight = bottomRight;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/Rectangle.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"}]}