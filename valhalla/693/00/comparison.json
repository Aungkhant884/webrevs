{"files":[{"patch":"@@ -3795,3 +3795,0 @@\n-  __ ldrw(rscratch1, Address(r4, Klass::access_flags_offset()));\n-  __ tbz(rscratch1, exact_log2(JVM_ACC_ABSTRACT), slow_case);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4311,4 +4311,0 @@\n-  __ movl(rdx, Address(rcx, Klass::access_flags_offset()));\n-  __ testl(rdx, JVM_ACC_ABSTRACT);\n-  __ jcc(Assembler::notZero, slow_case);\n-\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2571,5 +2571,1 @@\n-  ciKlass* ik = klass;\n-  if (ik == compilation()->env()->Object_klass() && compilation()->env()->Object_klass()->is_abstract()) {\n-    ik = compilation()->env()->Identity_klass();\n-  }\n-  NewInstance* new_instance = new NewInstance(ik->as_instance_klass(), state_before, stream()->is_unresolved_klass());\n+  NewInstance* new_instance = new NewInstance(klass->as_instance_klass(), state_before, stream()->is_unresolved_klass());\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -472,1 +472,1 @@\n-  int expected_num_interfaces = actual_num_interfaces, i;\n+  int expected_num_interfaces = actual_num_interfaces;\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -844,5 +844,0 @@\n-\n-  if (klass == outer()->env()->Object_klass() && outer()->env()->Object_klass()->is_abstract()) {\n-    klass = outer()->env()->Identity_klass();\n-  }\n-\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -187,2 +187,0 @@\n-  do_klass(Identity_klass,                              java_lang_Identity                                    ) \\\n-                                                                                                                \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,1 +146,0 @@\n-  template(java_lang_Identity,                        \"java\/lang\/Identity\")                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -228,8 +228,0 @@\n-  if (klass->is_abstract()) {\n-    if (klass == vmClasses::Object_klass()) {\n-      klass = vmClasses::Identity_klass();\n-    } else {\n-      THROW(vmSymbols::java_lang_InstantiationError());\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -422,6 +422,1 @@\n-      oop dummy;\n-      if(vmClasses::Object_klass()->is_abstract()) {\n-        dummy = vmClasses::Identity_klass()->allocate_instance(CHECK);\n-      } else {\n-        dummy = vmClasses::Object_klass()->allocate_instance(CHECK);\n-      }\n+      oop dummy = vmClasses::Object_klass()->allocate_instance(CHECK);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3004,15 +3004,0 @@\n-  bool object_check = C->env()->Object_klass()->is_abstract();\n-\n-  IdealKit ideal(this);\n-#define __ ideal.\n-  IdealVariable result(ideal); __ declarations_done();\n-\n-  if (object_check) {\n-    __ if_then(kls, BoolTest::eq, makecon(TypeKlassPtr::make(C->env()->Object_klass())));\n-    sync_kit(ideal);\n-    Node* obj = new_instance(makecon(TypeKlassPtr::make(C->env()->Identity_klass())));\n-    ideal.sync_kit(this);\n-    ideal.set(result, obj);\n-    __ else_();\n-    sync_kit(ideal);\n-  }\n@@ -3039,7 +3024,0 @@\n-  if (object_check) {\n-    ideal.sync_kit(this);\n-    ideal.set(result, obj);\n-    __ end_if();\n-    final_sync(ideal);\n-    obj = ideal.value(result);\n-  }\n@@ -3047,1 +3025,0 @@\n-#undef __\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -289,4 +289,0 @@\n-  if (klass == C->env()->Object_klass() && C->env()->Object_klass()->is_abstract()) {\n-    klass = C->env()->Identity_klass();\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1002,5 +1002,1 @@\n-    Klass* ik = k;\n-    if (ik == vmClasses::Object_klass() && vmClasses::Object_klass()->is_abstract()) {\n-      ik = vmClasses::Identity_klass();\n-    }\n-    instanceOop i = InstanceKlass::allocate_instance(k->java_mirror(), CHECK_NULL);\n+    instanceOop i = InstanceKlass::allocate_instance(clazzoop, CHECK_NULL);\n@@ -1038,5 +1034,1 @@\n-    Klass* ik = k;\n-    if (ik == vmClasses::Object_klass() && vmClasses::Object_klass()->is_abstract()) {\n-      ik = vmClasses::Identity_klass();\n-    }\n-    instanceOop i = InstanceKlass::allocate_instance(ik->java_mirror(), CHECK_NULL);\n+    instanceOop i = InstanceKlass::allocate_instance(clazzoop, CHECK_NULL);\n@@ -1074,5 +1066,1 @@\n-     Klass* ik = k;\n-    if (ik == vmClasses::Object_klass() && vmClasses::Object_klass()->is_abstract()) {\n-      ik = vmClasses::Identity_klass();\n-    }\n-    instanceOop i = InstanceKlass::allocate_instance(ik->java_mirror(), CHECK_NULL);\n+    instanceOop i = InstanceKlass::allocate_instance(clazzoop, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -466,5 +466,0 @@\n-  oop mirror = JNIHandles::resolve_non_null(cls);\n-  InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(mirror));\n-  if (k == vmClasses::Object_klass() && vmClasses::Object_klass()->is_abstract()) {\n-    k = vmClasses::Identity_klass();\n-  }\n@@ -472,1 +467,1 @@\n-  instanceOop i = InstanceKlass::allocate_instance(k->java_mirror(), CHECK_NULL);\n+  instanceOop i = InstanceKlass::allocate_instance(JNIHandles::resolve_non_null(cls), CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1204,5 +1204,1 @@\n-  InstanceKlass* ik = klass;\n-  if (klass == vmClasses::Object_klass() && vmClasses::Object_klass()->is_abstract()) {\n-    ik = vmClasses::Identity_klass();\n-  }\n-  Handle receiver = ik->allocate_instance_handle(CHECK_NULL);\n+  Handle receiver = klass->allocate_instance_handle(CHECK_NULL);\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-\/**  A class with no other purpose than providing instances with identity\n- * to be used as synchronization point.\n- * When the bytecode {@code new} is executed with {@code java.lang.Object} in\n- * argument, an instance of this class is allocated and a reference to it is\n- * pushed on the stack.\n- *\/\n-public final class Identity {\n-\n-  \/** Create a new instance with an identity *\/\n-  public Identity() { }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Identity.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -536,1 +536,1 @@\n-        return new Identity();\n+        return new Object() {};\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-        TestFramework.runWithFlags(\"-XX:CompileCommand=inline,java.util.Objects::newIdentity\", \"-XX:+UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=1000\", \"-XX:LoopMaxUnroll=1\", \"-XX:-RangeCheckElimination\");\n-        TestFramework.runWithFlags(\"-XX:CompileCommand=inline,java.util.Objects::newIdentity\", \"-XX:+UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=1000\", \"-XX:LoopMaxUnroll=1\", \"-XX:-RangeCheckElimination\", \"-XX:-PartialPeelLoop\");\n+        TestFramework.runWithFlags(\"-XX:+UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=1000\", \"-XX:LoopMaxUnroll=1\", \"-XX:-RangeCheckElimination\");\n+        TestFramework.runWithFlags(\"-XX:+UseCountedLoopSafepoints\", \"-XX:LoopStripMiningIter=1000\", \"-XX:LoopMaxUnroll=1\", \"-XX:-RangeCheckElimination\", \"-XX:-PartialPeelLoop\");\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestStripMiningDropsSafepoint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-java.lang.Identity\n+java.lang.Object\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/t\/t058\/t058.gold","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-java.lang.Identity\n+java.lang.Object\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/t\/t062\/t062.gold","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        java.security.Identity i1=new MyIdentity(\"identity\",\n+        Identity i1=new MyIdentity(\"identity\",\n@@ -39,1 +39,1 @@\n-        java.security.Identity i2=new MyIdentity(\"identity\",\n+        Identity i2=new MyIdentity(\"identity\",\n@@ -41,1 +41,1 @@\n-        java.security.Identity i3=new MyIdentity(\"identity\",\n+        Identity i3=new MyIdentity(\"identity\",\n@@ -69,1 +69,1 @@\n-class MyIdentity extends java.security.Identity {\n+class MyIdentity extends Identity {\n@@ -127,1 +127,1 @@\n-    public java.security.Identity getIdentity(String name) {\n+    public Identity getIdentity(String name) {\n@@ -131,1 +131,1 @@\n-    public java.security.Identity getIdentity(PublicKey key) {\n+    public Identity getIdentity(PublicKey key) {\n@@ -135,1 +135,1 @@\n-    public void addIdentity(java.security.Identity identity)  {\n+    public void addIdentity(Identity identity)  {\n@@ -138,1 +138,1 @@\n-    public void removeIdentity(java.security.Identity identity)  {\n+    public void removeIdentity(Identity identity)  {\n","filename":"test\/jdk\/java\/security\/Identity\/EqualsHashCodeContract.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}