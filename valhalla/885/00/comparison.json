{"files":[{"patch":"@@ -76,7 +76,1 @@\n-            Class<?> clazz = lookup.findClass(internalToBinary(descriptor.substring(depth + 1, descriptor.length() - 1)));\n-            if (isValue) {\n-                if (!PrimitiveClass.isPrimitiveClass(clazz)) {\n-                    throw new LinkageError(clazz.getName() + \" is not a primitive class\");\n-                }\n-                clazz = PrimitiveClass.asValueType(clazz);\n-            }\n+            Class<?> clazz = findClass(lookup, internalToBinary(descriptor.substring(depth + 1, descriptor.length() - 1)));\n@@ -87,1 +81,12 @@\n-        return lookup.findClass(internalToBinary(dropFirstAndLastChar(descriptor)));\n+        return findClass(lookup, internalToBinary(dropFirstAndLastChar(descriptor)));\n+    }\n+\n+    private Class<?> findClass(MethodHandles.Lookup lookup, String name) throws ReflectiveOperationException {\n+        Class<?> c = lookup.findClass(name);\n+        if (isValue) {\n+            if (!PrimitiveClass.isPrimitiveClass(c)) {\n+                throw new LinkageError(c.getName() + \" is not a primitive class\");\n+            }\n+            return PrimitiveClass.asValueType(c);\n+        }\n+        return c;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDescImpl.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -770,1 +770,0 @@\n-valhalla\/valuetypes\/ValueConstantDesc.java                      8310651 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}