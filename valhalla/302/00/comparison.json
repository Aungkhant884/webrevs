{"files":[{"patch":"@@ -132,4 +132,0 @@\n-Array<SigEntry>* ciInlineKlass::extended_sig() const {\n-  GUARDED_VM_ENTRY(return get_InlineKlass()->extended_sig();)\n-}\n-\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-  Array<SigEntry>* extended_sig() const;\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3180,16 +3180,15 @@\n-  {\n-    const CompiledEntrySignature* ces = _nmethod_to_print_ces;\n-    const GrowableArray<SigEntry>* sig_cc;\n-    const VMRegPair* regs;\n-    if (block_begin == verified_entry_point()) {\n-      sig_cc = &ces->sig_cc();\n-      regs = ces->regs_cc();\n-    } else if (block_begin == verified_inline_entry_point()) {\n-      sig_cc = &ces->sig();\n-      regs = ces->regs();\n-    } else if (block_begin == verified_inline_ro_entry_point()) {\n-      sig_cc = &ces->sig_cc_ro();\n-      regs = ces->regs_cc_ro();\n-    } else {\n-      return;\n-    }\n+  const CompiledEntrySignature* ces = _nmethod_to_print_ces;\n+  const GrowableArray<SigEntry>* sig_cc;\n+  const VMRegPair* regs;\n+  if (block_begin == verified_entry_point()) {\n+    sig_cc = &ces->sig_cc();\n+    regs = ces->regs_cc();\n+  } else if (block_begin == verified_inline_entry_point()) {\n+    sig_cc = &ces->sig();\n+    regs = ces->regs();\n+  } else if (block_begin == verified_inline_ro_entry_point()) {\n+    sig_cc = &ces->sig_cc_ro();\n+    regs = ces->regs_cc_ro();\n+  } else {\n+    return;\n+  }\n@@ -3197,11 +3196,27 @@\n-    ResourceMark rm;\n-    int sizeargs = 0;\n-    BasicType* sig_bt = NEW_RESOURCE_ARRAY(BasicType, 256);\n-    TempNewSymbol sig = SigEntry::create_symbol(sig_cc);\n-    for (SignatureStream ss(sig); !ss.at_return_type(); ss.next()) {\n-      BasicType t = ss.type();\n-      sig_bt[sizeargs++] = t;\n-      if (type2size[t] == 2) {\n-        sig_bt[sizeargs++] = T_VOID;\n-      } else {\n-        assert(type2size[t] == 1, \"size is 1 or 2\");\n+  bool has_this = !m->is_static();\n+  if (ces->has_inline_recv() && block_begin == verified_entry_point()) {\n+    \/\/ <this> argument is scalarized for verified_entry_point()\n+    has_this = false;\n+  }\n+  const char* spname = \"sp\"; \/\/ make arch-specific?\n+  int stack_slot_offset = this->frame_size() * wordSize;\n+  int tab1 = 14, tab2 = 24;\n+  int sig_index = 0;\n+  int arg_index = has_this ? -1 : 0;\n+  bool did_old_sp = false;\n+  for (ExtendedSignature sig = ExtendedSignature(sig_cc, SigEntryFilter()); !sig.at_end(); ++sig) {\n+    bool at_this = (arg_index == -1);\n+    bool at_old_sp = false;\n+    BasicType t = (*sig)._bt;\n+    if (at_this) {\n+      stream->print(\"  # this: \");\n+    } else {\n+      stream->print(\"  # parm%d: \", arg_index);\n+    }\n+    stream->move_to(tab1);\n+    VMReg fst = regs[sig_index].first();\n+    VMReg snd = regs[sig_index].second();\n+    if (fst->is_reg()) {\n+      stream->print(\"%s\", fst->name());\n+      if (snd->is_valid())  {\n+        stream->print(\":%s\", snd->name());\n@@ -3209,0 +3224,6 @@\n+    } else if (fst->is_stack()) {\n+      int offset = fst->reg2stack() * VMRegImpl::stack_slot_size + stack_slot_offset;\n+      if (offset == stack_slot_offset)  at_old_sp = true;\n+      stream->print(\"[%s+0x%x]\", spname, offset);\n+    } else {\n+      stream->print(\"reg%d:%d??\", (int)(intptr_t)fst, (int)(intptr_t)snd);\n@@ -3210,54 +3231,11 @@\n-    bool has_this = !m->is_static();\n-    if (ces->has_inline_recv() && block_begin == verified_entry_point()) {\n-      \/\/ <this> argument is scalarized for verified_entry_point()\n-      has_this = false;\n-    }\n-    const char* spname = \"sp\"; \/\/ make arch-specific?\n-    int stack_slot_offset = this->frame_size() * wordSize;\n-    int tab1 = 14, tab2 = 24;\n-    int sig_index = 0;\n-    int arg_index = has_this ? -1 : 0;\n-    bool did_old_sp = false;\n-    for (SignatureStream ss(sig); !ss.at_return_type(); ) {\n-      bool at_this = (arg_index == -1);\n-      bool at_old_sp = false;\n-      BasicType t = ss.type();\n-      assert(t == sig_bt[sig_index], \"sigs in sync\");\n-      if (at_this) {\n-        stream->print(\"  # this: \");\n-      } else {\n-        stream->print(\"  # parm%d: \", arg_index);\n-      }\n-      stream->move_to(tab1);\n-      VMReg fst = regs[sig_index].first();\n-      VMReg snd = regs[sig_index].second();\n-      if (fst->is_reg()) {\n-        stream->print(\"%s\", fst->name());\n-        if (snd->is_valid())  {\n-          stream->print(\":%s\", snd->name());\n-        }\n-      } else if (fst->is_stack()) {\n-        int offset = fst->reg2stack() * VMRegImpl::stack_slot_size + stack_slot_offset;\n-        if (offset == stack_slot_offset)  at_old_sp = true;\n-        stream->print(\"[%s+0x%x]\", spname, offset);\n-      } else {\n-        stream->print(\"reg%d:%d??\", (int)(intptr_t)fst, (int)(intptr_t)snd);\n-      }\n-      stream->print(\" \");\n-      stream->move_to(tab2);\n-      stream->print(\"= \");\n-      if (at_this) {\n-        m->method_holder()->print_value_on(stream);\n-      } else {\n-        bool did_name = false;\n-        if (ss.is_reference()) {\n-          Symbol* name = ss.as_symbol();\n-          name->print_value_on(stream);\n-          did_name = true;\n-        }\n-        if (!did_name)\n-          stream->print(\"%s\", type2name(t));\n-      }\n-      if (at_old_sp) {\n-        stream->print(\"  (%s of caller)\", spname);\n-        did_old_sp = true;\n+    stream->print(\" \");\n+    stream->move_to(tab2);\n+    stream->print(\"= \");\n+    if (at_this) {\n+      m->method_holder()->print_value_on(stream);\n+    } else {\n+      bool did_name = false;\n+      if (is_reference_type(t)) {\n+        Symbol* name = (*sig)._symbol;\n+        name->print_value_on(stream);\n+        did_name = true;\n@@ -3265,9 +3243,4 @@\n-      stream->cr();\n-      sig_index += type2size[t];\n-      arg_index += 1;\n-      ss.next();\n-    }\n-    if (!did_old_sp) {\n-      stream->print(\"  # \");\n-      stream->move_to(tab1);\n-      stream->print(\"[%s+0x%x]\", spname, stack_slot_offset);\n+      if (!did_name)\n+        stream->print(\"%s\", type2name(t));\n+    }\n+    if (at_old_sp) {\n@@ -3275,1 +3248,1 @@\n-      stream->cr();\n+      did_old_sp = true;\n@@ -3277,0 +3250,10 @@\n+    stream->cr();\n+    sig_index += type2size[t];\n+    arg_index += 1;\n+  }\n+  if (!did_old_sp) {\n+    stream->print(\"  # \");\n+    stream->move_to(tab1);\n+    stream->print(\"[%s+0x%x]\", spname, stack_slot_offset);\n+    stream->print(\"  (%s of caller)\", spname);\n+    stream->cr();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":74,"deletions":91,"binary":false,"changes":165,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-  SigEntry::add_entry(sig, T_INLINE_TYPE, base_off);\n+  SigEntry::add_entry(sig, T_INLINE_TYPE, name(), base_off);\n@@ -253,1 +253,1 @@\n-      SigEntry::add_entry(sig, bt, offset);\n+      SigEntry::add_entry(sig, bt, fs.signature(), offset);\n@@ -258,1 +258,1 @@\n-  SigEntry::add_entry(sig, T_VOID, offset);\n+  SigEntry::add_entry(sig, T_VOID, name(), offset);\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -448,2 +448,1 @@\n-    const TypeTuple *domain_sig = call->_tf->domain_sig();\n-    ExtendedSignature sig_cc = ExtendedSignature(method()->get_sig_cc(), SigEntryFilter());\n+    const TypeTuple* domain_sig = call->_tf->domain_sig();\n@@ -460,1 +459,1 @@\n-        InlineTypeNode* vt = InlineTypeNode::make_from_multi(&arg_kit, call, sig_cc, t->inline_klass(), j, true);\n+        InlineTypeNode* vt = InlineTypeNode::make_from_multi(&arg_kit, call, t->inline_klass(), j, true);\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1815,1 +1815,0 @@\n-  ExtendedSignature sig_cc = ExtendedSignature(call->method()->get_sig_cc(), SigEntryFilter());\n@@ -1823,1 +1822,1 @@\n-      vt->pass_fields(this, call, sig_cc, idx);\n+      vt->pass_fields(this, call, idx);\n@@ -1895,4 +1894,0 @@\n-    const Array<SigEntry>* sig_array = vk->extended_sig();\n-    GrowableArray<SigEntry> sig = GrowableArray<SigEntry>(sig_array->length());\n-    sig.appendAll(sig_array);\n-    ExtendedSignature sig_cc = ExtendedSignature(&sig, SigEntryFilter());\n@@ -1900,1 +1895,1 @@\n-    ret = InlineTypeNode::make_from_multi(this, call, sig_cc, vk, base_input, false);\n+    ret = InlineTypeNode::make_from_multi(this, call, vk, base_input, false);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -607,1 +607,1 @@\n-InlineTypeNode* InlineTypeNode::make_from_multi(GraphKit* kit, MultiNode* multi, ExtendedSignature& sig, ciInlineKlass* vk, uint& base_input, bool in) {\n+InlineTypeNode* InlineTypeNode::make_from_multi(GraphKit* kit, MultiNode* multi, ciInlineKlass* vk, uint& base_input, bool in) {\n@@ -609,1 +609,1 @@\n-  vt->initialize_fields(kit, multi, sig, base_input, in);\n+  vt->initialize_fields(kit, multi, base_input, in);\n@@ -716,1 +716,1 @@\n-void InlineTypeNode::pass_fields(GraphKit* kit, Node* n, ExtendedSignature& sig, uint& base_input) {\n+void InlineTypeNode::pass_fields(GraphKit* kit, Node* n, uint& base_input) {\n@@ -725,1 +725,1 @@\n-      vt->pass_fields(kit, n, sig, base_input);\n+      vt->pass_fields(kit, n, base_input);\n@@ -743,1 +743,1 @@\n-void InlineTypeNode::initialize_fields(GraphKit* kit, MultiNode* multi, ExtendedSignature& sig, uint& base_input, bool in) {\n+void InlineTypeNode::initialize_fields(GraphKit* kit, MultiNode* multi, uint& base_input, bool in) {\n@@ -751,1 +751,1 @@\n-      vt->initialize_fields(kit, multi, sig, base_input, in);\n+      vt->initialize_fields(kit, multi, base_input, in);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  static InlineTypeNode* make_from_multi(GraphKit* kit, MultiNode* multi, ExtendedSignature& sig, ciInlineKlass* vk, uint& base_input, bool in);\n+  static InlineTypeNode* make_from_multi(GraphKit* kit, MultiNode* multi, ciInlineKlass* vk, uint& base_input, bool in);\n@@ -142,1 +142,1 @@\n-  void pass_fields(GraphKit* kit, Node* n, ExtendedSignature& sig, uint& base_input);\n+  void pass_fields(GraphKit* kit, Node* n, uint& base_input);\n@@ -144,1 +144,1 @@\n-  void initialize_fields(GraphKit* kit, MultiNode* multi, ExtendedSignature& sig, uint& base_input, bool in);\n+  void initialize_fields(GraphKit* kit, MultiNode* multi, uint& base_input, bool in);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -865,1 +865,0 @@\n-  ExtendedSignature sig_cc = ExtendedSignature(method()->get_sig_cc(), SigEntryFilter());\n@@ -877,1 +876,1 @@\n-      parm = InlineTypeNode::make_from_multi(&kit, start, sig_cc, t->inline_klass(), j, true);\n+      parm = InlineTypeNode::make_from_multi(&kit, start, t->inline_klass(), j, true);\n@@ -934,6 +933,2 @@\n-      const Array<SigEntry>* sig_array = vt->type()->inline_klass()->extended_sig();\n-      GrowableArray<SigEntry> sig = GrowableArray<SigEntry>(sig_array->length());\n-      sig.appendAll(sig_array);\n-      ExtendedSignature sig_cc = ExtendedSignature(&sig, SigEntryFilter());\n-      uint idx = TypeFunc::Parms+1;\n-      vt->pass_fields(&kit, ret, sig_cc, idx);\n+      uint idx = TypeFunc::Parms + 1;\n+      vt->pass_fields(&kit, ret, idx);\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2053,1 +2053,0 @@\n-      ExtendedSignature sig = ExtendedSignature(NULL, SigEntryFilter());\n@@ -2070,2 +2069,0 @@\n-  ExtendedSignature sig_cc = ExtendedSignature(vt_fields_as_args ? method->get_sig_cc() : NULL, SigEntryFilter());\n-\n@@ -2074,1 +2071,2 @@\n-    for (arg_cnt = 0; !sig_cc.at_end(); ++sig_cc) {\n+    arg_cnt = 0;\n+    for (ExtendedSignature sig_cc = ExtendedSignature(method->get_sig_cc(), SigEntryFilter()); !sig_cc.at_end(); ++sig_cc) {\n@@ -2077,1 +2075,0 @@\n-    sig_cc = ExtendedSignature(method->get_sig_cc(), SigEntryFilter());\n@@ -2088,3 +2085,0 @@\n-      if (vt_fields_as_args) {\n-        ++sig_cc;\n-      }\n@@ -2098,1 +2092,0 @@\n-    bool is_flattened = false;\n@@ -2123,1 +2116,0 @@\n-        is_flattened = true;\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2771,1 +2771,1 @@\n-      SigEntry::add_entry(sig_cc, T_OBJECT);\n+      SigEntry::add_entry(sig_cc, T_OBJECT, holder->name());\n@@ -2774,1 +2774,0 @@\n-  Thread* THREAD = Thread::current();\n@@ -2781,1 +2780,1 @@\n-        SigEntry::add_entry(sig_cc, T_OBJECT);\n+        SigEntry::add_entry(sig_cc, T_OBJECT, ss.as_symbol());\n@@ -2784,1 +2783,1 @@\n-      SigEntry::add_entry(sig_cc, ss.type());\n+      SigEntry::add_entry(sig_cc, ss.type(), ss.as_symbol());\n@@ -2838,1 +2837,1 @@\n-    SigEntry::add_entry(_sig, T_OBJECT);\n+    SigEntry::add_entry(_sig, T_OBJECT, _method->name());\n@@ -2848,1 +2847,1 @@\n-    SigEntry::add_entry(_sig, bt);\n+    SigEntry::add_entry(_sig, bt, ss.as_symbol());\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -579,2 +579,2 @@\n-void SigEntry::add_entry(GrowableArray<SigEntry>* sig, BasicType bt, int offset) {\n-  sig->append(SigEntry(bt, offset));\n+void SigEntry::add_entry(GrowableArray<SigEntry>* sig, BasicType bt, Symbol* symbol, int offset) {\n+  sig->append(SigEntry(bt, offset, symbol));\n@@ -582,1 +582,1 @@\n-    sig->append(SigEntry(T_VOID, offset)); \/\/ Longs and doubles take two stack slots\n+    sig->append(SigEntry(T_VOID, offset, symbol)); \/\/ Longs and doubles take two stack slots\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -577,0 +577,1 @@\n+  Symbol* _symbol;\n@@ -579,4 +580,1 @@\n-    : _bt(T_ILLEGAL), _offset(-1) {\n-  }\n-  SigEntry(BasicType bt, int offset)\n-    : _bt(bt), _offset(offset) {}\n+    : _bt(T_ILLEGAL), _offset(-1), _symbol(NULL) {}\n@@ -584,2 +582,2 @@\n-  SigEntry(BasicType bt)\n-    : _bt(bt), _offset(-1) {}\n+  SigEntry(BasicType bt, int offset, Symbol* symbol)\n+    : _bt(bt), _offset(offset), _symbol(symbol) {}\n@@ -609,1 +607,1 @@\n-  static void add_entry(GrowableArray<SigEntry>* sig, BasicType bt, int offset = -1);\n+  static void add_entry(GrowableArray<SigEntry>* sig, BasicType bt, Symbol* symbol, int offset = -1);\n","filename":"src\/hotspot\/share\/runtime\/signature.hpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}