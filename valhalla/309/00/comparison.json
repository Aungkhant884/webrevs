{"files":[{"patch":"@@ -1065,6 +1065,6 @@\n-  }\n-  if (profile_array_accesses() && is_reference_type(type) && !array->is_loaded_flattened_array()) {\n-    compilation()->set_would_profile(true);\n-    load_indexed->set_should_profile(true);\n-    load_indexed->set_profiled_method(method());\n-    load_indexed->set_profiled_bci(bci());\n+    if (profile_array_accesses() && is_reference_type(type)) {\n+      compilation()->set_would_profile(true);\n+      load_indexed->set_should_profile(true);\n+      load_indexed->set_profiled_method(method());\n+      load_indexed->set_profiled_bci(bci());\n+    }\n@@ -1073,1 +1073,1 @@\n-  assert(!(profile_array_accesses() && is_reference_type(type)) || load_indexed == result, \"should not be optimized out\");\n+  assert(!load_indexed->should_profile() || load_indexed == result, \"should not be optimized out\");\n@@ -1115,1 +1115,1 @@\n-  if (profile_array_accesses() && is_reference_type(type)) {\n+  if (profile_array_accesses() && is_reference_type(type) && !array->is_loaded_flattened_array()) {\n@@ -1124,1 +1124,0 @@\n-\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1908,9 +1908,12 @@\n-    ciMethodData* md = NULL;\n-    ciArrayLoadStoreData* load_store = NULL;\n-    profile_array_type(x, md, load_store);\n-    if (is_loaded_flattened_array) {\n-      int flag = ArrayLoadStoreData::flat_array_byte_constant() | ArrayLoadStoreData::null_free_array_byte_constant();\n-      assert(md != NULL, \"should have been initialized\");\n-      profile_flags(md, load_store, flag);\n-    } else if (x->array()->maybe_null_free_array()) {\n-      profile_null_free_array(array, md, load_store);\n+    if (x->array()->is_loaded_flattened_array()) {\n+      \/\/ No need to profile a store to a flattened array of known type. This can happen if\n+      \/\/ the type only became known after optimizations (for example, after the PhiSimplifier).\n+      x->set_should_profile(false);\n+    } else {\n+      ciMethodData* md = NULL;\n+      ciArrayLoadStoreData* load_store = NULL;\n+      profile_array_type(x, md, load_store);\n+      if (x->array()->maybe_null_free_array()) {\n+        profile_null_free_array(array, md, load_store);\n+      }\n+      profile_element_type(x->value(), md, load_store);\n@@ -1918,1 +1921,0 @@\n-    profile_element_type(x->value(), md, load_store);\n@@ -2280,1 +2282,7 @@\n-    profile_array_type(x, md, load_store);\n+    if (x->array()->is_loaded_flattened_array()) {\n+      \/\/ No need to profile a load from a flattened array of known type. This can happen if\n+      \/\/ the type only became known after optimizations (for example, after the PhiSimplifier).\n+      x->set_should_profile(false);\n+    } else {\n+      profile_array_type(x, md, load_store);\n+    }\n@@ -2287,1 +2295,0 @@\n-    \/\/ LIR_Opr obj = x->vt()->operand();\n@@ -2294,6 +2301,0 @@\n-    element = x->vt();\n-    if (x->should_profile()) {\n-      fatal(\"Loaded flattened array should not be profiled\");\n-      int flag = ArrayLoadStoreData::flat_array_byte_constant() | ArrayLoadStoreData::null_free_array_byte_constant();\n-      profile_flags(md, load_store, flag);\n-    }\n@@ -2306,1 +2307,0 @@\n-    assert(!x->should_profile(), \"Loaded flattened array should not be profiled\");\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8260034\n+ * @summary Generated inline type tests.\n+ * @run main\/othervm -Xbatch compiler.valhalla.inlinetypes.TestGenerated\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+inline class EmptyValue {\n+\n+}\n+\n+inline class MyValue1 {\n+    int x = 42;\n+}\n+\n+public class TestGenerated {\n+    EmptyValue f1 = new EmptyValue();\n+    EmptyValue f2 = new EmptyValue();\n+\n+    void test1(EmptyValue[] array) {\n+        for (int i = 0; i < 10; ++i) {\n+            f1 = array[0];\n+            f2 = array[0];\n+        }\n+    }\n+\n+    MyValue1 test2(MyValue1[] array) {\n+        MyValue1 res = MyValue1.default;\n+        for (int i = 0; i < array.length; ++i) {\n+            res = array[i];\n+        }\n+        for (int i = 0; i < 1000; ++i) {\n+\n+        }\n+        return res;\n+    }\n+\n+    void test3(MyValue1[] array) {\n+        for (int i = 0; i < array.length; ++i) {\n+            array[i] = MyValue1.default;\n+        }\n+        for (int i = 0; i < 1000; ++i) {\n+\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestGenerated t = new TestGenerated();\n+        EmptyValue[] array1 = { new EmptyValue() };\n+        MyValue1[] array2 = new MyValue1[10];\n+\n+        for (int i = 0; i < 50_000; ++i) {\n+            t.test1(array1);\n+            t.test2(array2);\n+            t.test3(array2);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}