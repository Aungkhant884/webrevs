{"files":[{"patch":"@@ -54,0 +54,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties.Warnings;\n@@ -614,2 +615,2 @@\n-        if (allowUniversalTVars && (s.hasTag(TYPEVAR)) && ((TypeVar)s).isValueProjection() &&\n-                (t.hasTag(BOT) || t.hasTag(TYPEVAR) && !((TypeVar)t).isValueProjection())) {\n+        if (allowUniversalTVars && ((s.hasTag(TYPEVAR)) && ((TypeVar)s).isValueProjection() &&\n+                (t.hasTag(BOT) || t.hasTag(TYPEVAR) && !((TypeVar)t).isValueProjection()))) {\n@@ -619,0 +620,4 @@\n+        if (allowUniversalTVars && (s.isPrimitiveClass() && !t.isPrimitiveClass())) {\n+            chk.warnValueConversion(warn.pos(), Warnings.PrimitiveValueConversion);\n+            return true;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -283,0 +283,5 @@\n+            log.warning(LintCategory.UNIVERSAL, pos, warnKey);\n+    }\n+\n+    public void warnValueConversion(DiagnosticPosition pos, Warning warnKey) {\n+        if (lint.isEnabled(LintCategory.UNIVERSAL))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3926,1 +3926,4 @@\n-    variables of type universal type variable cannot be assigned null\n\\ No newline at end of file\n+    variables of type universal type variable cannot be assigned null\n+\n+compiler.warn.primitive.value.conversion=\\\n+    primitive value conversion\n\\ No newline at end of file\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -421,0 +421,15 @@\n+    public void testPrimitiveValueConversion() {\n+        setCompileOptions(LINT_OPTIONS);\n+        assertOKWithWarning(\"compiler.warn.primitive.value.conversion\",\n+                \"\"\"\n+                primitive class Point {}\n+\n+                class Test {\n+                    void m() {\n+                        Point.ref pr = null;\n+                        Point p = pr;\n+                    }\n+                }\n+                \"\"\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}