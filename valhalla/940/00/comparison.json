{"files":[{"patch":"@@ -104,0 +104,2 @@\n+    private boolean allowNullRestrictedTypes;\n+\n@@ -131,0 +133,1 @@\n+        allowNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n@@ -1112,1 +1115,3 @@\n-            new NullabilityComparator((t1, t2) -> hasNarrowerNullability(t1, t2)).visit(s, t);\n+            if (allowNullRestrictedTypes) {\n+                new NullabilityComparator((t1, t2) -> hasNarrowerNullability(t1, t2)).visit(s, t);\n+            }\n@@ -1231,1 +1236,1 @@\n-                if (result) {\n+                if (result && allowNullRestrictedTypes) {\n@@ -1515,1 +1520,1 @@\n-                if (equal) {\n+                if (equal && allowNullRestrictedTypes) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -187,0 +187,1 @@\n+        allowNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n@@ -220,0 +221,4 @@\n+    \/** Are null-restricted types allowed\n+     *\/\n+    private final boolean allowNullRestrictedTypes;\n+\n@@ -735,1 +740,2 @@\n-        if (tree instanceof JCNullableTypeExpression nullableTypeExpression &&\n+        if (allowNullRestrictedTypes &&\n+                tree instanceof JCNullableTypeExpression nullableTypeExpression &&\n@@ -1175,1 +1181,1 @@\n-            if (tree.sym.isImplicitConstructor()) {\n+            if (allowNullRestrictedTypes && tree.sym.isImplicitConstructor()) {\n@@ -1348,10 +1354,12 @@\n-            Type elemOrType = result;\n-            while (!elemOrType.hasTag(ERROR) && types.elemtype(elemOrType) != null) {\n-                elemOrType = types.elemtype(elemOrType);\n-            }\n-            if ((result.isNonNullable() || elemOrType.isNonNullable()) && (!elemOrType.isValueClass() || !elemOrType.hasImplicitConstructor())) {\n-                log.error(tree.pos(),\n-                        types.elemtype(result) == null?\n-                                Errors.TypeCantBeNullRestricted(result) :\n-                                Errors.TypeCantBeNullRestricted2(result)\n-                );\n+            if (allowNullRestrictedTypes) {\n+                Type elemOrType = result;\n+                while (!elemOrType.hasTag(ERROR) && types.elemtype(elemOrType) != null) {\n+                    elemOrType = types.elemtype(elemOrType);\n+                }\n+                if ((result.isNonNullable() || elemOrType.isNonNullable()) && (!elemOrType.isValueClass() || !elemOrType.hasImplicitConstructor())) {\n+                    log.error(tree.pos(),\n+                            types.elemtype(result) == null?\n+                                    Errors.TypeCantBeNullRestricted(result) :\n+                                    Errors.TypeCantBeNullRestricted2(result)\n+                    );\n+                }\n@@ -2949,1 +2957,1 @@\n-                if (owntype.getMetadata(TypeMetadata.NullMarker.class) == null) {\n+                if (allowNullRestrictedTypes && owntype.getMetadata(TypeMetadata.NullMarker.class) == null) {\n@@ -5462,1 +5470,2 @@\n-                if (env != null && env.tree != null && env.tree.hasTag(CLASSDEF) && TreeInfo.getImplicitConstructor(((JCClassDecl)env.tree).defs) != null)\n+                if (allowNullRestrictedTypes &&\n+                        env != null && env.tree != null && env.tree.hasTag(CLASSDEF) && TreeInfo.getImplicitConstructor(((JCClassDecl)env.tree).defs) != null)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -185,0 +185,1 @@\n+        allowNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n@@ -231,0 +232,4 @@\n+\n+    \/** Are null-restricted types allowed\n+     *\/\n+    private final boolean allowNullRestrictedTypes;\n@@ -301,1 +306,1 @@\n-        if (lint.isEnabled(LintCategory.NULL)) {\n+        if (allowNullRestrictedTypes && lint.isEnabled(LintCategory.NULL)) {\n@@ -840,16 +845,18 @@\n-        JCMethodDecl implicitConstructor = TreeInfo.getImplicitConstructor(classDecl.defs);\n-        if (implicitConstructor != null) {\n-            Type encl = c.type.getEnclosingType();\n-            if (encl != null && encl.hasTag(CLASS)) {\n-                log.error(classDecl.pos(), Errors.ValueClassWithImplicitCannotBeInner(c));\n-            }\n-            if ((c.flags() & HASINITBLOCK) != 0) {\n-                log.error(classDecl.pos(), Errors.ValueClassWithImplicitDeclaresInitBlock(c));\n-            }\n-            for (Symbol s : c.members().getSymbols(NON_RECURSIVE)) {\n-                switch (s.kind) {\n-                    case VAR:\n-                        if ((s.flags() & STATIC) == 0 & (s.flags() & HASINIT) != 0) {\n-                            log.error(classDecl.pos(), Errors.ValueClassWithImplicitInstanceFieldInitializer(c));\n-                        }\n-                        break;\n+        if (allowNullRestrictedTypes) {\n+            JCMethodDecl implicitConstructor = TreeInfo.getImplicitConstructor(classDecl.defs);\n+            if (implicitConstructor != null) {\n+                Type encl = c.type.getEnclosingType();\n+                if (encl != null && encl.hasTag(CLASS)) {\n+                    log.error(classDecl.pos(), Errors.ValueClassWithImplicitCannotBeInner(c));\n+                }\n+                if ((c.flags() & HASINITBLOCK) != 0) {\n+                    log.error(classDecl.pos(), Errors.ValueClassWithImplicitDeclaresInitBlock(c));\n+                }\n+                for (Symbol s : c.members().getSymbols(NON_RECURSIVE)) {\n+                    switch (s.kind) {\n+                        case VAR:\n+                            if ((s.flags() & STATIC) == 0 & (s.flags() & HASINIT) != 0) {\n+                                log.error(classDecl.pos(), Errors.ValueClassWithImplicitInstanceFieldInitializer(c));\n+                            }\n+                            break;\n+                    }\n@@ -2805,1 +2812,1 @@\n-            implementsLooselyConsistentValue = allowValueClasses ? types.asSuper(c, syms.looselyConsistentValueType.tsym) != null : false;\n+            implementsLooselyConsistentValue = allowValueClasses && allowNullRestrictedTypes ? types.asSuper(c, syms.looselyConsistentValueType.tsym) != null : false;\n@@ -4461,9 +4468,11 @@\n-            boolean warned = this.warned;\n-            super.warn(lint);\n-            if (warned) return; \/\/ suppress redundant diagnostics\n-            switch (lint) {\n-                case NULL:\n-                    Check.this.warnNullableTypes(pos(), Warnings.UncheckedNullnessConversion);\n-                    break;\n-                default:\n-                    throw new AssertionError(\"Unexpected lint: \" + lint);\n+            if (allowNullRestrictedTypes) {\n+                boolean warned = this.warned;\n+                super.warn(lint);\n+                if (warned) return; \/\/ suppress redundant diagnostics\n+                switch (lint) {\n+                    case NULL:\n+                        Check.this.warnNullableTypes(pos(), Warnings.UncheckedNullnessConversion);\n+                        break;\n+                    default:\n+                        throw new AssertionError(\"Unexpected lint: \" + lint);\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":36,"deletions":27,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+    private final boolean allowNullRestrictedTypes;\n@@ -138,0 +139,1 @@\n+        allowNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n@@ -4199,1 +4201,1 @@\n-        if (emitQDesc || tree.elemtype == null || !originalElemType.type.isNonNullable()) {\n+        if (emitQDesc || !allowNullRestrictedTypes || tree.elemtype == null || !originalElemType.type.isNonNullable()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,0 +88,4 @@\n+    \/** Switch: are null-restricted types allowed\n+     *\/\n+    private boolean allowNullRestrictedTypes;\n+\n@@ -201,0 +205,1 @@\n+        allowNullRestrictedTypes = options.isSet(\"enableNullRestrictedTypes\");\n@@ -961,1 +966,1 @@\n-        if (csym.isValueClass() && csym.hasImplicitConstructor()) {\n+        if (allowNullRestrictedTypes && csym.isValueClass() && csym.hasImplicitConstructor()) {\n@@ -974,1 +979,1 @@\n-        if (sym.kind == VAR && sym.type.isNonNullable() && !sym.type.hasTag(ARRAY)) {\n+        if (allowNullRestrictedTypes && sym.kind == VAR && sym.type.isNonNullable() && !sym.type.hasTag(ARRAY)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -198,0 +198,1 @@\n+        this.allowNullRestrictedTypes = fac.options.isSet(\"enableNullRestrictedTypes\");\n@@ -222,0 +223,1 @@\n+        this.allowNullRestrictedTypes = parser.allowNullRestrictedTypes;\n@@ -267,0 +269,4 @@\n+    \/** Switch: are null-restricted types allowed?\n+     *\/\n+    boolean allowNullRestrictedTypes;\n+\n@@ -719,1 +725,1 @@\n-        if (EMOTIONAL_QUALIFIER.test(token.kind)) {\n+        if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n@@ -1160,1 +1166,1 @@\n-                    if (token.kind == QUES && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                    if (allowNullRestrictedTypes && token.kind == QUES && EMOTIONAL_QUALIFIER.test(token.kind)) {\n@@ -1501,1 +1507,1 @@\n-                if (EMOTIONAL_QUALIFIER.test(token.kind) && (peekToken(LBRACKET) || peekToken(LT))) {\n+                if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && (peekToken(LBRACKET) || peekToken(LT))) {\n@@ -1526,1 +1532,1 @@\n-                            if (EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                            if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind)) {\n@@ -1670,1 +1676,1 @@\n-            if (EMOTIONAL_QUALIFIER.test(token.kind) && (token.kind == QUES || token.kind == BANG || (token.kind == STAR))) {\n+            if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && (token.kind == QUES || token.kind == BANG || (token.kind == STAR))) {\n@@ -1796,1 +1802,1 @@\n-            if (isMode(TYPE) && typeArgs == null && EMOTIONAL_QUALIFIER.test(token.kind) &&\n+            if (allowNullRestrictedTypes && isMode(TYPE) && typeArgs == null && EMOTIONAL_QUALIFIER.test(token.kind) &&\n@@ -1810,1 +1816,1 @@\n-                        if (isMode(TYPE) && EMOTIONAL_QUALIFIER.test(token.kind)) {\n+                        if (allowNullRestrictedTypes && isMode(TYPE) && EMOTIONAL_QUALIFIER.test(token.kind)) {\n@@ -2044,2 +2050,2 @@\n-                    } else if (peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, COMMA) ||\n-                            peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, RPAREN, ARROW)) {\n+                    } else if (allowNullRestrictedTypes && (peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, COMMA) ||\n+                            peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, RPAREN, ARROW))) {\n@@ -2048,1 +2054,1 @@\n-                    } else if (peekToken(lookahead, EMOTIONAL_QUALIFIER, RPAREN)) {\n+                    } else if (allowNullRestrictedTypes && peekToken(lookahead, EMOTIONAL_QUALIFIER, RPAREN)) {\n@@ -2051,1 +2057,1 @@\n-                    } else if (peekToken(lookahead, EMOTIONAL_QUALIFIER, GENERIC_TYPE_END) ||\n+                    } else if (allowNullRestrictedTypes && (peekToken(lookahead, EMOTIONAL_QUALIFIER, GENERIC_TYPE_END) ||\n@@ -2054,1 +2060,1 @@\n-                            peekToken(lookahead, EMOTIONAL_QUALIFIER, LBRACKET) ) {\n+                            peekToken(lookahead, EMOTIONAL_QUALIFIER, LBRACKET)) ) {\n@@ -2081,1 +2087,1 @@\n-                            peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER, RPAREN) ||\n+                            (allowNullRestrictedTypes && peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER, RPAREN)) ||\n@@ -2087,1 +2093,1 @@\n-                    } else if (peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER)) {\n+                    } else if (allowNullRestrictedTypes && peekToken(lookahead, RBRACKET, EMOTIONAL_QUALIFIER)) {\n@@ -2111,1 +2117,1 @@\n-                                peekToken(lookahead, EMOTIONAL_QUALIFIER, RPAREN) ||\n+                                (allowNullRestrictedTypes && peekToken(lookahead, EMOTIONAL_QUALIFIER, RPAREN)) ||\n@@ -2514,1 +2520,1 @@\n-        } else if (EMOTIONAL_QUALIFIER.test(token.kind) && peekToken(LBRACKET)) {\n+        } else if (allowNullRestrictedTypes && EMOTIONAL_QUALIFIER.test(token.kind) && peekToken(LBRACKET)) {\n@@ -3474,2 +3480,2 @@\n-                    } else if (typeDepth == 0 &&\n-                            (peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, COMMA) ||\n+                    } else if (typeDepth == 0 && allowNullRestrictedTypes &&\n+                            ((peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, COMMA) ||\n@@ -3477,1 +3483,1 @@\n-                            peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, COLON))) {\n+                            peekToken(lookahead, EMOTIONAL_QUALIFIER, LAX_IDENTIFIER, COLON))) ) {\n@@ -3480,1 +3486,2 @@\n-                    } else if (peekToken(lookahead, EMOTIONAL_QUALIFIER, GENERIC_TYPE_END) ||\n+                    } else if ( allowNullRestrictedTypes &&\n+                            (peekToken(lookahead, EMOTIONAL_QUALIFIER, GENERIC_TYPE_END) ||\n@@ -3482,1 +3489,1 @@\n-                            peekToken(lookahead, EMOTIONAL_QUALIFIER, COMMA)) {\n+                            peekToken(lookahead, EMOTIONAL_QUALIFIER, COMMA)) ) {\n@@ -3501,1 +3508,1 @@\n-                    if (!peekToken(lookahead, LPAREN)) break;\n+                    if (allowNullRestrictedTypes && !peekToken(lookahead, LPAREN)) break;\n@@ -3684,1 +3691,1 @@\n-                if (isImplicitModifier()) {\n+                if (allowNullRestrictedTypes && isImplicitModifier()) {\n@@ -3967,1 +3974,1 @@\n-            if (allowValueClasses) {\n+            if (allowNullRestrictedTypes && allowValueClasses) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":31,"deletions":24,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+                \"-XDenableNullRestrictedTypes\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testValueClasses\/TestValueClasses.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\/\/ options: -XDenableNullRestrictedTypes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantBeNonNullableType.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenableNullRestrictedTypes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantImplementInterface.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenableNullRestrictedTypes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitConstructorWithBody.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenableNullRestrictedTypes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitMustBeInValueClass.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenableNullRestrictedTypes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitMustBePublic.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenableNullRestrictedTypes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCannotBeInner.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenableNullRestrictedTypes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCantDeclareInitBlock.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: -XDenableNullRestrictedTypes\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCantHaveFieldInit.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile NullabilityParsingTest.java\n+ * @compile -XDenableNullRestrictedTypes NullabilityParsingTest.java\n","filename":"test\/langtools\/tools\/javac\/nullability\/NullabilityParsingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-    public void TestValueClassesProcessor(Path base) throws Exception {\n+    public void testValueClassesProcessor(Path base) throws Exception {\n@@ -130,1 +130,1 @@\n-                            \"-XDrawDiagnostics\")\n+                            \"-XDenableNullRestrictedTypes\", \"-XDrawDiagnostics\")\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestValueClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDemitQDesc AsSuperTests.java\n+ * @compile -XDemitQDesc -XDenableNullRestrictedTypes AsSuperTests.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AsSuperTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDemitQDesc AssortedTests.java\n+ * @compile -XDemitQDesc -XDenableNullRestrictedTypes AssortedTests.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AssortedTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDemitQDesc AttributesTest.java\n+ * @compile -XDemitQDesc -XDenableNullRestrictedTypes AttributesTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AttributesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile -XDemitQDesc BogusIncompatibility.java\n- * @compile -XDemitQDesc BogusIncompatibility.java\n+ * @compile -XDemitQDesc -XDenableNullRestrictedTypes BogusIncompatibility.java\n+ * @compile -XDemitQDesc -XDenableNullRestrictedTypes BogusIncompatibility.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BogusIncompatibility.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes Point.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNoNullCheckTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses CastNullCheckTest.java\n+ * @compile -XDenablePrimitiveClasses Point.java\n+ * @compile -XDenablePrimitiveClasses CastNullCheckTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNullCheckTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckBadSelector.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckBadSelector.java\n+ * @compile\/fail\/ref=CheckBadSelector.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckBadSelector.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckBadSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/fail\/ref=CheckCyclicMembership.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckCyclicMembership.java\n+ * @compile\/fail\/ref=CheckCyclicMembership.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckCyclicMembership.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckCyclicMembership.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckFinal.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFinal.java\n+ * @compile\/fail\/ref=CheckFinal.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckFinal.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFinal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes Point.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckFlattenableCycles.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFlattenableCycles.java\n+ * @compile\/fail\/ref=CheckFlattenableCycles.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckFlattenableCycles.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableCycles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,2 +5,2 @@\n- * @compile -XDenablePrimitiveClasses FlattenableFlagFromClass.java\n- * @compile\/fail\/ref=CheckFlattenableFlagFromClass.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckFlattenableFlagFromClass.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes FlattenableFlagFromClass.java\n+ * @compile\/fail\/ref=CheckFlattenableFlagFromClass.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckFlattenableFlagFromClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableFlagFromClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDenablePrimitiveClasses CheckFlattenableSyntheticFields.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckFlattenableSyntheticFields.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableSyntheticFields.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDenablePrimitiveClasses CheckIdentityHash.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckIdentityHash.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckIdentityHash.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDenablePrimitiveClasses CheckIdentityHash01.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckIdentityHash01.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckIdentityHash01.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile -XDenablePrimitiveClasses CheckLocalClasses.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckLocalClasses.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckLocalClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckMakeDefault.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckMakeDefault.java\n+ * @compile\/fail\/ref=CheckMakeDefault.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckMakeDefault.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckMakeDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/fail\/ref=CheckMultiDimensionalArrayStore.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses CheckMultiDimensionalArrayStore.java\n+ * @compile\/fail\/ref=CheckMultiDimensionalArrayStore.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckMultiDimensionalArrayStore.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckMultiDimensionalArrayStore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckNullAssign.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckNullAssign.java\n+ * @compile\/fail\/ref=CheckNullAssign.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckNullAssign.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullAssign.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckNullCastable.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckNullCastable.java\n+ * @compile\/fail\/ref=CheckNullCastable.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckNullCastable.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullCastable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDenablePrimitiveClasses CheckNullWithQuestion.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckNullWithQuestion.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckNullWithQuestion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * @compile\/fail\/ref=CheckQuestionInMessages.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckQuestionInMessages.java\n+ * @compile\/fail\/ref=CheckQuestionInMessages.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckQuestionInMessages.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckQuestionInMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/fail\/ref=CheckStaticFinalAssign.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses CheckStaticFinalAssign.java\n+ * @compile\/fail\/ref=CheckStaticFinalAssign.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckStaticFinalAssign.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckStaticFinalAssign.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java\n- * @compile -XDenablePrimitiveClasses CheckSuperCompileOnly.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes Point.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CheckSuperCompileOnly.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSuperCompileOnly.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDenablePrimitiveClasses CompilesJustFine.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes CompilesJustFine.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CompilesJustFine.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDenablePrimitiveClasses ConstantPropagationTest.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes ConstantPropagationTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConstantPropagationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n- * @compile\/fail\/ref=ConsumeUnifiedClass.out -XDrawDiagnostics -XDenablePrimitiveClasses Point.java Rectangle.java ConsumeUnifiedClass.java\n- * @compile -XDallowWithFieldOperator -XDenablePrimitiveClasses Point.java Rectangle.java\n- * @compile\/fail\/ref=ConsumeUnifiedClass2.out -XDrawDiagnostics -XDenablePrimitiveClasses ConsumeUnifiedClass.java\n+ * @compile\/fail\/ref=ConsumeUnifiedClass.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes Point.java Rectangle.java ConsumeUnifiedClass.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes Point.java Rectangle.java\n+ * @compile\/fail\/ref=ConsumeUnifiedClass2.out -XDrawDiagnostics -XDenablePrimitiveClasses -XDenableNullRestrictedTypes ConsumeUnifiedClass.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConsumeUnifiedClass.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes Point.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/Point.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile -XDenablePrimitiveClasses QPointConsumer.java\n- * @compile -XDenablePrimitiveClasses QPointConsumer.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes QPointConsumer.java\n+ * @compile -XDenablePrimitiveClasses -XDenableNullRestrictedTypes QPointConsumer.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QPointConsumer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @compile -XDenableNullRestrictedTypes ArrayCreationWithQuestion.java\n+ * @run main ArrayCreationWithQuestion\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ArrayCreationWithQuestion.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -778,44 +778,39 @@\n-        assertOK(\n-                \"\"\"\n-                value class V {\n-                    public implicit V();\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.implicit.const.must.be.public\",\n-                \"\"\"\n-                value class V {\n-                    implicit V();\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.implicit.const.cant.have.body\",\n-                \"\"\"\n-                value class V {\n-                    public implicit V() {}\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.implicit.const.must.be.public\",\n-                \"\"\"\n-                value class V {\n-                    private implicit V();\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.implicit.const.must.be.public\",\n-                \"\"\"\n-                value class V {\n-                    protected implicit V();\n-                }\n-                \"\"\"\n-        );\n-\n-        assertFail(\"compiler.err.already.defined\",\n-                \"\"\"\n-                value class V {\n-                    public implicit V();\n-                    public V() {}\n-                }\n-                \"\"\"\n-        );\n+        String[] previousOptions = getCompileOptions();\n+        try {\n+            String[] testOptions = {\"-XDenableNullRestrictedTypes\"};\n+            setCompileOptions(testOptions);\n+            assertOK(\n+                    \"\"\"\n+                    value class V {\n+                        public implicit V();\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.implicit.const.must.be.public\",\n+                    \"\"\"\n+                    value class V {\n+                        implicit V();\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.implicit.const.cant.have.body\",\n+                    \"\"\"\n+                    value class V {\n+                        public implicit V() {}\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.implicit.const.must.be.public\",\n+                    \"\"\"\n+                    value class V {\n+                        private implicit V();\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.implicit.const.must.be.public\",\n+                    \"\"\"\n+                    value class V {\n+                        protected implicit V();\n+                    }\n+                    \"\"\"\n+            );\n@@ -823,10 +818,2 @@\n-        assertFail(\"compiler.err.implicit.const.must.be.declared.in.value.class\",\n-                \"\"\"\n-                class V {\n-                    public implicit V();\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n-                \"\"\"\n-                class Outer {\n+            assertFail(\"compiler.err.already.defined\",\n+                    \"\"\"\n@@ -835,0 +822,1 @@\n+                        public V() {}\n@@ -836,7 +824,6 @@\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n-                \"\"\"\n-                class Outer {\n-                    new value class V() {\n+                    \"\"\"\n+            );\n+\n+            assertFail(\"compiler.err.implicit.const.must.be.declared.in.value.class\",\n+                    \"\"\"\n+                    class V {\n@@ -844,8 +831,6 @@\n-                    };\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n-                \"\"\"\n-                class Outer {\n-                    void m() {\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n+                    \"\"\"\n+                    class Outer {\n@@ -856,25 +841,8 @@\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.cyclic.primitive.class.membership\",\n-                \"\"\"\n-                value class V {\n-                    V! v;\n-                    public implicit V();\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.value.class.with.implicit.instance.field.initializer\",\n-                \"\"\"\n-                value class V {\n-                    String s = \"\";\n-                    public implicit V();\n-                }\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.value.class.with.implicit.declares.init.block\",\n-                \"\"\"\n-                value class V {\n-                    String s;\n-                    {\n-                        s = \"\";\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n+                    \"\"\"\n+                    class Outer {\n+                        new value class V() {\n+                            public implicit V();\n+                        };\n@@ -882,4 +850,43 @@\n-                    public implicit V();\n-                }\n-                \"\"\"\n-        );\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n+                    \"\"\"\n+                    class Outer {\n+                        void m() {\n+                            value class V {\n+                                public implicit V();\n+                            }\n+                        }\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.cyclic.primitive.class.membership\",\n+                    \"\"\"\n+                    value class V {\n+                        V! v;\n+                        public implicit V();\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.value.class.with.implicit.instance.field.initializer\",\n+                    \"\"\"\n+                    value class V {\n+                        String s = \"\";\n+                        public implicit V();\n+                    }\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.value.class.with.implicit.declares.init.block\",\n+                    \"\"\"\n+                    value class V {\n+                        String s;\n+                        {\n+                            s = \"\";\n+                        }\n+                        public implicit V();\n+                    }\n+                    \"\"\"\n+            );\n+        } finally {\n+            setCompileOptions(previousOptions);\n+        }\n@@ -922,12 +929,9 @@\n-        String code =\n-                \"\"\"\n-                value class V0 {\n-                    public implicit V0();\n-                }\n-\n-                value class V1 {\n-                    V0! f1;\n-                    V0 f2;\n-                    V0[]! f3;\n-                    public implicit V1();\n-                }\n+        String[] previousOptions = getCompileOptions();\n+        try {\n+            String[] testOptions = {\"-XDenableNullRestrictedTypes\"};\n+            setCompileOptions(testOptions);\n+            String code =\n+                    \"\"\"\n+                    value class V0 {\n+                        public implicit V0();\n+                    }\n@@ -935,4 +939,6 @@\n-                value class V2 {\n-                    public V2() {}\n-                }\n-                \"\"\";\n+                    value class V1 {\n+                        V0! f1;\n+                        V0 f2;\n+                        V0[]! f3;\n+                        public implicit V1();\n+                    }\n@@ -940,1 +946,4 @@\n-        File dir = assertOK(true, code);\n+                    value class V2 {\n+                        public V2() {}\n+                    }\n+                    \"\"\";\n@@ -942,2 +951,1 @@\n-        \/\/ test for V1\n-        ClassFile classFile = ClassFile.read(findClassFileOrFail(dir, \"V1.class\"));\n+            File dir = assertOK(true, code);\n@@ -945,12 +953,2 @@\n-        Field field1 = classFile.fields[0];\n-        findAttributeOrFail(field1.attributes, NullRestricted_attribute.class, 1);\n-        Field field2 = classFile.fields[1];\n-        try {\n-            findAttributeOrFail(field2.attributes, NullRestricted_attribute.class, 1);\n-            throw new AssertionError(\"NullRestricted attribute shouldn't be here\");\n-        } catch (Throwable t) {\n-            \/\/ good\n-        }\n-        Field field3 = classFile.fields[2];\n-        checkAttributeNotPresent(field3.attributes, NullRestricted_attribute.class);\n-        findAttributeOrFail(classFile.attributes, ImplicitCreation_attribute.class, 1);\n+            \/\/ test for V1\n+            ClassFile classFile = ClassFile.read(findClassFileOrFail(dir, \"V1.class\"));\n@@ -958,2 +956,11 @@\n-        classFile = ClassFile.read(findClassFileOrFail(dir, \"V2.class\"));\n-        try {\n+            Field field1 = classFile.fields[0];\n+            findAttributeOrFail(field1.attributes, NullRestricted_attribute.class, 1);\n+            Field field2 = classFile.fields[1];\n+            try {\n+                findAttributeOrFail(field2.attributes, NullRestricted_attribute.class, 1);\n+                throw new AssertionError(\"NullRestricted attribute shouldn't be here\");\n+            } catch (Throwable t) {\n+                \/\/ good\n+            }\n+            Field field3 = classFile.fields[2];\n+            checkAttributeNotPresent(field3.attributes, NullRestricted_attribute.class);\n@@ -961,3 +968,10 @@\n-            throw new AssertionError(\"ImplicitCreation attribute shouldn't be here\");\n-        } catch (Throwable t) {\n-            \/\/ good\n+\n+            classFile = ClassFile.read(findClassFileOrFail(dir, \"V2.class\"));\n+            try {\n+                findAttributeOrFail(classFile.attributes, ImplicitCreation_attribute.class, 1);\n+                throw new AssertionError(\"ImplicitCreation attribute shouldn't be here\");\n+            } catch (Throwable t) {\n+                \/\/ good\n+            }\n+        } finally {\n+            setCompileOptions(previousOptions);\n@@ -968,22 +982,29 @@\n-        assertFail(\"compiler.err.cant.implement.interface\",\n-                \"\"\"\n-                class V implements LooselyConsistentValue {} \/\/ not a value class\n-                \"\"\"\n-        );\n-        assertFail(\"compiler.err.cant.implement.interface\",\n-                \"\"\"\n-                value class V implements LooselyConsistentValue {} \/\/ no implicit constructor\n-                \"\"\"\n-        );\n-        assertOK(\n-                \"\"\"\n-                abstract class V implements LooselyConsistentValue {}  \/\/ not concrete value class\n-                \"\"\"\n-        );\n-        assertOK(\n-                \"\"\"\n-                value class V implements LooselyConsistentValue { \/\/ concrete value class with implicit constructor\n-                    public implicit V();\n-                }\n-                \"\"\"\n-        );\n+        String[] previousOptions = getCompileOptions();\n+        try {\n+            String[] testOptions = {\"-XDenableNullRestrictedTypes\"};\n+            setCompileOptions(testOptions);\n+            assertFail(\"compiler.err.cant.implement.interface\",\n+                    \"\"\"\n+                    class V implements LooselyConsistentValue {} \/\/ not a value class\n+                    \"\"\"\n+            );\n+            assertFail(\"compiler.err.cant.implement.interface\",\n+                    \"\"\"\n+                    value class V implements LooselyConsistentValue {} \/\/ no implicit constructor\n+                    \"\"\"\n+            );\n+            assertOK(\n+                    \"\"\"\n+                    abstract class V implements LooselyConsistentValue {}  \/\/ not concrete value class\n+                    \"\"\"\n+            );\n+            assertOK(\n+                    \"\"\"\n+                    value class V implements LooselyConsistentValue { \/\/ concrete value class with implicit constructor\n+                        public implicit V();\n+                    }\n+                    \"\"\"\n+            );\n+        } finally {\n+            setCompileOptions(previousOptions);\n+        }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":177,"deletions":156,"binary":false,"changes":333,"status":"modified"}]}