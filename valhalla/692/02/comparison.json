{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,3 +45,0 @@\n-     *\n-     * @apiNote {@link Objects#newIdentity java.util.Objects.newIdentity()}\n-     * should be used instead of {@code new Object()}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Object.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -527,11 +527,0 @@\n-    \/**\n-     * {@return a new instance of an unspecified class}\n-     * The object has a unique identity; no other references to it exist.\n-     * It can be used for synchronization, or where a placeholder Object is needed.\n-     * Use this method to avoid relying on the {@linkplain Object#Object() Object constructor}.\n-     *\n-     * @since 17\n-     *\/\n-    public static Object newIdentity() {\n-        return new Object() {};\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-        errors += testNewIdentity();\n@@ -310,15 +309,0 @@\n-\n-    private static int testNewIdentity() {\n-        int errors = 0;\n-\n-        Object o1 = Objects.newIdentity();\n-        Object o2 = Objects.newIdentity();\n-\n-        if (o1 == null || o2 == null)\n-            errors += 1;\n-\n-        if (o1 == o2)\n-            errors += 1;\n-\n-        return errors;\n-    }\n","filename":"test\/jdk\/java\/util\/Objects\/BasicObjectsTest.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,4 +91,1 @@\n-        \/\/ java.lang.Object is an abstract class.  For compatibility reason,\n-        \/\/ newInstance is supported on Object.class and returns a new Identity instance.\n-        Class<?> expectedType = type == Object.class ? Identity.class : type;\n-        Assert.assertEquals(o.getClass(), expectedType, \"Instance is wrong type\");\n+        Assert.assertEquals(o.getClass(), type, \"Instance is wrong type\");\n","filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -277,1 +277,1 @@\n-                new Object[]{ Objects.newIdentity(), empty_intfs },\n+                new Object[]{ new Object(), empty_intfs },\n","filename":"test\/jdk\/valhalla\/valuetypes\/BasicTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        assertTrue(o.getClass() == Identity.class);\n+        assertTrue(o.getClass() == Object.class);\n@@ -50,1 +50,1 @@\n-        assertTrue(o.getClass() == Identity.class);\n+        assertTrue(o.getClass() == Object.class);\n@@ -58,1 +58,1 @@\n-        assertTrue(o.getClass() == Identity.class);\n+        assertTrue(o.getClass() == Object.class);\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectNewInstance.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-    static final Object STATIC_FIELD = Objects.newIdentity();\n+    static final Object STATIC_FIELD = new Object();\n","filename":"test\/jdk\/valhalla\/valuetypes\/Point.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}