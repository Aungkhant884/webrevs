{"files":[{"patch":"@@ -4561,5 +4561,3 @@\n-    \/\/ The JVMS says that super classes for value types must have the ACC_PERMITS_VALUE\n-    \/\/ flag set.  However, since java.lang.Object has not yet been changed into an abstract\n-    \/\/ class, it cannot have its ACC_PERMITS_VALUE flag set.  But, java.lang.Object must\n-    \/\/ still be allowed to be a direct super class for a value classes.  So, it is treated\n-    \/\/ as a special case for now.\n+    \/\/ The JVMS says that super classes for value types must not have the ACC_IDENTITY\n+    \/\/ flag set. But, java.lang.Object must still be allowed to be a direct super class\n+    \/\/ for a value classes.  So, it is treated as a special case for now.\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -207,1 +207,0 @@\n-    private static final int PERMITS_VALUE   = 0x00000100;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -73,1 +73,0 @@\n-#define JVM_ACC_PERMITS_VALUE_BIT 6\n","filename":"src\/java.base\/share\/native\/include\/classfile_constants.h.template","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-\/\/ because ACC_PERMITS_VALUE was removed from its class access flags.\n+\/\/ because ACC_IDENTITY is set in its class access flags.\n@@ -78,1 +78,1 @@\n-  0x0421; \/\/ access [ ACC_PUBLIC ACC_SUPER ACC_ABSTRACT ]\n+  0x0421; \/\/ access [ ACC_PUBLIC ACC_IDENTITY ACC_ABSTRACT ]\n@@ -180,1 +180,1 @@\n-\/\/ that does not have access flag ACC_PERMIT_VALUES set.\n+\/\/ that has access flag ACC_IDENTITY set.\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCICCETests.jcod","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary test class access rules for classes that have ACC_PERMITS_VALUE set.\n+ * @summary test class access rules for abstract classes that have ACC_VALUE set.\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_CFETest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @summary test that ACC_PERMITS_VALUE must be set for the super class of\n- *          a value class (unless the super is java.lang.Object);\n+ * @summary test that a value class cannot sub-class an identity class\n@@ -48,4 +47,0 @@\n-\n-        \/\/ Test has to be re-think now that ACC_PERMITS_VALUE has been removed\n-        \/\/ and the model has changed to ACC_VALUE\/ACC_IDENTITY modifiers\n-        \/\/ Test illegal class that has both ACC_VALUE and ACC_PERMITS_VALUE set.\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_ICCETest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        check(getclmdf006c.class, Modifier.ABSTRACT | Modifier.PERMITS_VALUE);\n+        check(getclmdf006c.class, Modifier.ABSTRACT);\n@@ -72,2 +72,1 @@\n-        check(Inner12.class, Modifier.STATIC | Modifier.ABSTRACT |\n-                             Modifier.PERMITS_VALUE);\n+        check(Inner12.class, Modifier.STATIC | Modifier.ABSTRACT);\n@@ -78,1 +77,1 @@\n-                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);\n+                             Modifier.ABSTRACT);\n@@ -83,1 +82,1 @@\n-                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);\n+                             Modifier.ABSTRACT);\n@@ -88,1 +87,1 @@\n-                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);\n+                             Modifier.ABSTRACT);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassModifiers\/getclmdf006.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#define ACC_PERMITS_VALUE    0x0040\n@@ -86,1 +85,0 @@\n-    if (mod & ACC_PERMITS_VALUE) printf(\" PERMITS_VALUE\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassModifiers\/getclmdf006\/getclmdf006.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -407,1 +407,0 @@\n-        PERMITS_VALUE      (201, \"PERMITS_VALUE\", \"permits_value\", EnumSet.of(TokenType.MODIFIER, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/JasmTokens.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-                                             ACC_VALUE | ACC_PERMITS_VALUE | ACC_PRIMITIVE;\n+                                             ACC_VALUE | ACC_PRIMITIVE;\n@@ -67,1 +67,1 @@\n-                                             ACC_VALUE | ACC_PERMITS_VALUE | ACC_PRIMITIVE;\n+                                             ACC_VALUE | ACC_PRIMITIVE;\n@@ -227,4 +227,0 @@\n-    public static boolean isPermitsValue(int mod) {\n-        return (mod & ACC_PERMITS_VALUE) != 0;\n-    }\n-\n@@ -431,3 +427,0 @@\n-        if (context.isOneOf(CF_Context.CTX_CLASS, CF_Context.CTX_INNERCLASS) && isPermitsValue(mod)) {\n-            sb.append(Token.PERMITS_VALUE.parseKey() + \" \");\n-        }\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/Modifiers.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -353,1 +353,0 @@\n-            case PERMITS_VALUE:\n@@ -530,1 +529,0 @@\n-            case PERMITS_VALUE:\n@@ -723,3 +721,0 @@\n-                case PERMITS_VALUE:\n-                    nextmod = ACC_PERMITS_VALUE;\n-                    break;\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/Parser.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-    int ACC_PERMITS_VALUE = 0x0100; \/\/ class, inner\n@@ -74,1 +73,0 @@\n-                        put(ACC_PERMITS_VALUE,\"permits_value\");\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/RuntimeConstants.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}