{"files":[{"patch":"@@ -3838,6 +3838,0 @@\n-bool ClassFileParser::supports_records() {\n-  return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&\n-         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&\n-         Arguments::enable_preview();\n-}\n-\n@@ -4091,8 +4085,7 @@\n-        } else if (_major_version >= JAVA_14_VERSION) {\n-          if (tag == vmSymbols::tag_record()) {\n-            \/\/ Skip over Record attribute if not supported or if super class is\n-            \/\/ not java.lang.Record.\n-            if (supports_records() &&\n-                cp->klass_name_at(_super_class_index) == vmSymbols::java_lang_Record()) {\n-              if (parsed_record_attribute) {\n-                classfile_parse_error(\"Multiple Record attributes in class file %s\", THREAD);\n+\n+        } else if (_major_version >= JAVA_15_VERSION) {\n+          \/\/ Check for PermittedSubclasses tag\n+          if (tag == vmSymbols::tag_permitted_subclasses()) {\n+            if (supports_sealed_types()) {\n+              if (parsed_permitted_subclasses_attribute) {\n+                classfile_parse_error(\"Multiple PermittedSubclasses attributes in class file %s\", CHECK);\n@@ -4101,3 +4094,15 @@\n-              \/\/ Check that class is final and not abstract.\n-              if (!_access_flags.is_final() || _access_flags.is_abstract()) {\n-                classfile_parse_error(\"Record attribute in non-final or abstract class file %s\", THREAD);\n+              \/\/ Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.\n+              if (_access_flags.is_final()) {\n+                classfile_parse_error(\"PermittedSubclasses attribute in final class file %s\", CHECK);\n+                return;\n+              }\n+              parsed_permitted_subclasses_attribute = true;\n+              permitted_subclasses_attribute_start = cfs->current();\n+              permitted_subclasses_attribute_length = attribute_length;\n+            }\n+            cfs->skip_u1(attribute_length, CHECK);\n+\n+          } else if (_major_version >= JAVA_16_VERSION) {\n+            if (tag == vmSymbols::tag_record()) {\n+              if (parsed_record_attribute) {\n+                classfile_parse_error(\"Multiple Record attributes in class file %s\", THREAD);\n@@ -4109,37 +4114,0 @@\n-            } else if (log_is_enabled(Info, class, record)) {\n-              \/\/ Log why the Record attribute was ignored.  Note that if the\n-              \/\/ class file version is JVM_CLASSFILE_MAJOR_VERSION.65535 and\n-              \/\/ --enable-preview wasn't specified then a java.lang.UnsupportedClassVersionError\n-              \/\/ exception would have been thrown.\n-              ResourceMark rm(THREAD);\n-              if (supports_records()) {\n-                log_info(class, record)(\n-                  \"Ignoring Record attribute in class %s because super type is not java.lang.Record\",\n-                  _class_name->as_C_string());\n-              } else {\n-                log_info(class, record)(\n-                  \"Ignoring Record attribute in class %s because class file version is not %d.65535\",\n-                   _class_name->as_C_string(), JVM_CLASSFILE_MAJOR_VERSION);\n-            }\n-          } else if (_major_version >= JAVA_15_VERSION) {\n-            \/\/ Check for PermittedSubclasses tag\n-            if (tag == vmSymbols::tag_permitted_subclasses()) {\n-              if (supports_sealed_types()) {\n-                if (parsed_permitted_subclasses_attribute) {\n-                  classfile_parse_error(\"Multiple PermittedSubclasses attributes in class file %s\", THREAD);\n-                  return;\n-                }\n-                \/\/ Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.\n-                if (_access_flags.is_final()) {\n-                  classfile_parse_error(\"PermittedSubclasses attribute in final class file %s\", THREAD);\n-                  return;\n-                }\n-                parsed_permitted_subclasses_attribute = true;\n-                permitted_subclasses_attribute_start = cfs->current();\n-                permitted_subclasses_attribute_length = attribute_length;\n-              }\n-              cfs->skip_u1(attribute_length, CHECK);\n-            } else {\n-              \/\/ Unknown attribute\n-              cfs->skip_u1(attribute_length, CHECK);\n-            }\n@@ -4681,7 +4649,1 @@\n-      ResourceMark rm(THREAD);\n-      Exceptions::fthrow(\n-        THREAD_AND_LOCATION,\n-        vmSymbols::java_lang_VerifyError(),\n-        \"class %s cannot inherit from final class %s\",\n-        this_klass->external_name(),\n-        super_ik->external_name());\n+      classfile_icce_error(\"class %s cannot inherit from final class %s\", super_ik, THREAD);\n@@ -4832,9 +4794,6 @@\n-              Exceptions::fthrow(THREAD_AND_LOCATION,\n-                                 vmSymbols::java_lang_VerifyError(),\n-                                 \"class %s overrides final method %s.%s%s\",\n-                                 this_klass->external_name(),\n-                                 super_m->method_holder()->external_name(),\n-                                 name->as_C_string(),\n-                                 signature->as_C_string()\n-                                 );\n-              return;\n+              THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                        err_msg(\"class %s overrides final method %s.%s%s\",\n+                                this_klass->external_name(),\n+                                super_m->method_holder()->external_name(),\n+                                name->as_C_string(),\n+                                signature->as_C_string()));\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":29,"deletions":70,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -152,0 +152,1 @@\n+  template(java_version_name,                         \"java_version\")                             \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1445,4 +1445,1 @@\n-JRT_ENTRY(void, InterpreterRuntime::at_unwind(JavaThread* thread))\n-  \/\/ JRT_END does an implicit safepoint check, hence we are guaranteed to block\n-  \/\/ if this is called during a safepoint\n-\n+JRT_LEAF(void, InterpreterRuntime::at_unwind(JavaThread* thread))\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -284,2 +284,1 @@\n-        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n-                Feature.RECORDS.allowedInSource(source);\n+        allowRecords = Feature.RECORDS.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}