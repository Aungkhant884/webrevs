{"files":[{"patch":"@@ -11543,1 +11543,1 @@\n-instruct rep_stos_evex(eCXRegI cnt, eDIRegP base, regD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{\n+instruct rep_stos_evex(eCXRegI cnt, eDIRegP base, legRegD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{\n@@ -11654,1 +11654,1 @@\n-instruct rep_stos_large_evex(eCXRegI cnt, eDIRegP base, regD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{\n+instruct rep_stos_large_evex(eCXRegI cnt, eDIRegP base, legRegD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -11190,1 +11190,1 @@\n-instruct rep_stos_evex(rcx_RegL cnt, rdi_RegP base, regD tmp, kReg ktmp, rax_RegL val,\n+instruct rep_stos_evex(rcx_RegL cnt, rdi_RegP base, legRegD tmp, kReg ktmp, rax_RegL val,\n@@ -11250,1 +11250,1 @@\n-instruct rep_stos_evex_word_copy(rcx_RegL cnt, rdi_RegP base, regD tmp, kReg ktmp, rax_RegL val,\n+instruct rep_stos_evex_word_copy(rcx_RegL cnt, rdi_RegP base, legRegD tmp, kReg ktmp, rax_RegL val,\n@@ -11407,1 +11407,1 @@\n-instruct rep_stos_large_evex(rcx_RegL cnt, rdi_RegP base, regD tmp, kReg ktmp, rax_RegL val,\n+instruct rep_stos_large_evex(rcx_RegL cnt, rdi_RegP base, legRegD tmp, kReg ktmp, rax_RegL val,\n@@ -11457,1 +11457,1 @@\n-instruct rep_stos_large_evex_word_copy(rcx_RegL cnt, rdi_RegP base, regD tmp, kReg ktmp, rax_RegL val,\n+instruct rep_stos_large_evex_word_copy(rcx_RegL cnt, rdi_RegP base, legRegD tmp, kReg ktmp, rax_RegL val,\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -640,1 +640,4 @@\n-    if (type->unwrap() != klass && klass->is_loaded() && type->unwrap()->is_subtype_of(klass)) {\n+    null_free |= type->is_null_free();\n+    type = type->unwrap();\n+    if (type->is_loaded() && klass->is_loaded() &&\n+        type != klass && type->is_subtype_of(klass)) {\n@@ -642,1 +645,1 @@\n-      klass = type->unwrap()->as_klass();\n+      klass = type->as_klass();\n@@ -644,1 +647,1 @@\n-    if (klass->is_inlinetype() && (null_free || type->is_null_free())) {\n+    if (klass->is_inlinetype() && null_free) {\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-      \/\/ barriers are applied to parts of the header.\n+      \/\/ barriers are applied to parts of the header. Also adjust the length accordingly.\n@@ -308,5 +308,8 @@\n-      assert((src_offset->get_long() == arrayOopDesc::base_offset_in_bytes(T_OBJECT) && UseCompressedClassPointers) ||\n-             (src_offset->get_long() == arrayOopDesc::length_offset_in_bytes() && !UseCompressedClassPointers),\n-             \"unexpected offset for object array clone\");\n-      src_offset = phase->longcon(arrayOopDesc::base_offset_in_bytes(T_OBJECT));\n-      dest_offset = src_offset;\n+      jlong offset = src_offset->get_long();\n+      if (offset != arrayOopDesc::base_offset_in_bytes(T_OBJECT)) {\n+        assert(!UseCompressedClassPointers, \"should only happen without compressed class pointers\");\n+        assert((arrayOopDesc::base_offset_in_bytes(T_OBJECT) - offset) == BytesPerLong, \"unexpected offset\");\n+        length = phase->transform_later(new SubXNode(length, phase->longcon(1))); \/\/ Size is in longs\n+        src_offset = phase->longcon(arrayOopDesc::base_offset_in_bytes(T_OBJECT));\n+        dest_offset = src_offset;\n+      }\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+\n+compiler\/valhalla\/inlinetypes\/TestNativeClone.java            8270098   generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-zgc.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,1 +147,0 @@\n-compiler\/valhalla\/inlinetypes\/TestNativeClone.java 8270098 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}