{"files":[{"patch":"@@ -331,4 +331,2 @@\n-        }\n-        String s;\n-        if (longform) {\n-             s =  sym.getQualifiedName().toString();\n+        } else if (longform) {\n+            return sym.getQualifiedName().toString();\n@@ -336,1 +334,1 @@\n-            s =  sym.name.toString();\n+            return sym.name.toString();\n@@ -338,2 +336,0 @@\n-\n-        return s;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Printer.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1392,1 +1392,1 @@\n-\n+            else\n@@ -2179,1 +2179,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -650,3 +650,1 @@\n-        arrayClassType.interfaces_field =\n-                List.of(cloneableType, serializableType);\n-\n+        arrayClassType.interfaces_field = List.of(cloneableType, serializableType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1299,4 +1299,2 @@\n-                }\n-                String s;\n-                if (longform) {\n-                    s =  sym.getQualifiedName().toString();\n+                } else if (longform) {\n+                    return sym.getQualifiedName().toString();\n@@ -1304,1 +1302,1 @@\n-                    s = sym.name.toString();\n+                    return sym.name.toString();\n@@ -1306,1 +1304,0 @@\n-                return s;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1930,5 +1930,1 @@\n-                        Type et = elemtype(t);\n-                        Type es = elemtype(s);\n-                        if (!visit(et, es))\n-                            return false;\n-                        return true;\n+                        return visit(elemtype(t), elemtype(s));\n@@ -2631,1 +2627,0 @@\n-        long flags = ABSTRACT | PUBLIC | SYNTHETIC | COMPOUND | ACYCLIC;\n@@ -2633,1 +2628,1 @@\n-            new ClassSymbol(flags,\n+            new ClassSymbol(ABSTRACT|PUBLIC|SYNTHETIC|COMPOUND|ACYCLIC,\n@@ -4096,0 +4091,1 @@\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2793,5 +2793,7 @@\n-            if (clazz.hasTag(SELECT)) {\n-                JCFieldAccess fieldAccess = (JCFieldAccess) clazz;\n-                if (allowPrimitiveClasses && fieldAccess.selected.type.isPrimitiveClass() &&\n-                        (fieldAccess.name == names.ref || fieldAccess.name == names.val)) {\n-                    log.error(tree.pos(), Errors.ProjectionCantBeInstantiated);\n+            if (allowPrimitiveClasses) {\n+                if (clazz.hasTag(SELECT)) {\n+                    JCFieldAccess fieldAccess = (JCFieldAccess) clazz;\n+                    if (fieldAccess.selected.type.isPrimitiveClass() &&\n+                            (fieldAccess.name == names.ref || fieldAccess.name == names.val)) {\n+                        log.error(tree.pos(), Errors.ProjectionCantBeInstantiated);\n+                    }\n@@ -2979,1 +2981,3 @@\n-                    chk.checkParameterizationByPrimitiveClass(tree, clazztype);\n+                    if (allowPrimitiveClasses) {\n+                        chk.checkParameterizationByPrimitiveClass(tree, clazztype);\n+                    }\n@@ -4070,1 +4074,3 @@\n-                chk.checkForSuspectClassLiteralComparison(tree, left, right);\n+                if (allowPrimitiveClasses) {\n+                    chk.checkForSuspectClassLiteralComparison(tree, left, right);\n+                }\n@@ -4412,1 +4418,0 @@\n-\n@@ -5027,2 +5032,4 @@\n-\n-        Symbol sym = switch (site.getTag()) {\n+        if (!allowPrimitiveClasses) {\n+            result = types.createErrorType(names._default, site.tsym, site);\n+        } else {\n+            Symbol sym = switch (site.getTag()) {\n@@ -5037,1 +5044,1 @@\n-        };\n+            };\n@@ -5039,2 +5046,4 @@\n-        if (site.hasTag(TYPEVAR) && sym.kind != ERR) {\n-            site = types.skipTypeVars(site, true);\n+            if (site.hasTag(TYPEVAR) && sym.kind != ERR) {\n+                site = types.skipTypeVars(site, true);\n+            }\n+            result = checkId(tree, site, sym, env, resultInfo);\n@@ -5042,1 +5051,0 @@\n-        result = checkId(tree, site, sym, env, resultInfo);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -146,0 +146,1 @@\n+\n@@ -515,1 +516,1 @@\n-    \/* *************************************************************************\n+\/* *************************************************************************\n@@ -622,1 +623,1 @@\n-            if (found.hasTag(CLASS)) {\n+            if (allowPrimitiveClasses && found.hasTag(CLASS)) {\n@@ -1147,1 +1148,1 @@\n-        if (varType.hasTag(CLASS)) {\n+        if (allowPrimitiveClasses && varType.hasTag(CLASS)) {\n@@ -1153,0 +1154,1 @@\n+    \/* it is necessary to confirm if the code below is experimental or not, and thus can be removed *\/\n@@ -2516,8 +2518,10 @@\n-        Assert.check((tree.sym.flags_field & LOCKED) == 0);\n-        try {\n-            tree.sym.flags_field |= LOCKED;\n-            for (List<? extends JCTree> l = tree.defs; l.nonEmpty(); l = l.tail) {\n-                if (l.head.hasTag(VARDEF)) {\n-                    JCVariableDecl field = (JCVariableDecl) l.head;\n-                    if (cyclePossible(field.sym)) {\n-                        checkNonCyclicMembership((ClassSymbol) field.type.tsym, field.pos());\n+        if (allowPrimitiveClasses) {\n+            Assert.check((tree.sym.flags_field & LOCKED) == 0);\n+            try {\n+                tree.sym.flags_field |= LOCKED;\n+                for (List<? extends JCTree> l = tree.defs; l.nonEmpty(); l = l.tail) {\n+                    if (l.head.hasTag(VARDEF)) {\n+                        JCVariableDecl field = (JCVariableDecl) l.head;\n+                        if (cyclePossible(field.sym)) {\n+                            checkNonCyclicMembership((ClassSymbol) field.type.tsym, field.pos());\n+                        }\n@@ -2526,0 +2530,2 @@\n+            } finally {\n+                tree.sym.flags_field &= ~LOCKED;\n@@ -2527,2 +2533,0 @@\n-        } finally {\n-            tree.sym.flags_field &= ~LOCKED;\n@@ -2530,1 +2534,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -508,1 +508,3 @@\n-        ct.flavor = ct.flavor.metamorphose((c.flags_field & PRIMITIVE_CLASS) != 0);\n+        if (allowPrimitiveClasses) {\n+            ct.flavor = ct.flavor.metamorphose((c.flags_field & PRIMITIVE_CLASS) != 0);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1147,1 +1147,1 @@\n-                boolean requireReferenceProjection =\n+                boolean requireReferenceProjection = allowPrimitiveClasses &&\n@@ -1477,1 +1477,0 @@\n-            final Type type = v.erasure(types);\n@@ -1479,1 +1478,1 @@\n-                flags, proxyName, type, owner);\n+                flags, proxyName, v.erasure(types), owner);\n@@ -1546,3 +1545,1 @@\n-        Type target = types.erasure(owner.enclClass().type.getEnclosingType());\n-        long flags = FINAL | SYNTHETIC;\n-        VarSymbol outerThis = makeOuterThisVarSymbol(owner, flags);\n+        VarSymbol outerThis = makeOuterThisVarSymbol(owner, FINAL | SYNTHETIC);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -420,11 +420,13 @@\n-        if (sym.kind == MTH || sym.kind == VAR) {\n-            \/* If any primitive class types are involved, ask the same question in the reference universe,\n-               where the hierarchy is navigable\n-            *\/\n-            if (allowPrimitiveClasses && site.isPrimitiveClass())\n-                site = site.referenceProjection();\n-        } else if (sym.kind == TYP) {\n-            \/\/ A type is accessible in a reference projection if it was\n-            \/\/ accessible in the value projection.\n-            if (site.isReferenceProjection())\n-                site = site.valueProjection();\n+        if (allowPrimitiveClasses) {\n+            if (sym.kind == MTH || sym.kind == VAR) {\n+                \/* If any primitive class types are involved, ask the same question in the reference universe,\n+                   where the hierarchy is navigable\n+                *\/\n+                if (site.isPrimitiveClass())\n+                    site = site.referenceProjection();\n+            } else if (sym.kind == TYP) {\n+                \/\/ A type is accessible in a reference projection if it was\n+                \/\/ accessible in the value projection.\n+                if (site.isReferenceProjection())\n+                    site = site.valueProjection();\n+            }\n@@ -489,1 +491,1 @@\n-        if (allowPrimitiveClasses && site.isPrimitiveClass())\n+        if (allowPrimitiveClasses && site.isPrimitiveClass()) {\n@@ -491,0 +493,1 @@\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -823,1 +823,1 @@\n-                        if ((code_length == 1 && buf.getByte( bp + 8) == (byte) ByteCodes.return_) ||\n+                        if ((code_length == 1 && buf.getByte(bp + 8) == (byte) ByteCodes.return_) ||\n@@ -825,2 +825,2 @@\n-                                    buf.getByte( bp + 9) == (byte) ByteCodes.invokespecial &&\n-                                            buf.getByte( bp + 12) == (byte) ByteCodes.return_)) {\n+                                    buf.getByte(bp + 9) == (byte) ByteCodes.invokespecial &&\n+                                            buf.getByte(bp + 12) == (byte) ByteCodes.return_)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}