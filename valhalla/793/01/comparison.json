{"files":[{"patch":"@@ -98,0 +98,2 @@\n+    private final boolean allowPrimitiveClasses;\n+\n@@ -283,1 +285,1 @@\n-                    if (type.isPrimitiveClass()) {\n+                    if (allowPrimitiveClasses && type.isPrimitiveClass()) {\n@@ -668,1 +670,2 @@\n-\n+        Options options = Options.instance(context);\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    final boolean allowValueBasedClasses;\n+    final boolean allowPrimitiveClasses;\n@@ -123,1 +123,1 @@\n-        allowValueBasedClasses = options.isSet(\"allowValueBasedClasses\");\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -604,6 +604,8 @@\n-        boolean tValue = t.isPrimitiveClass();\n-        boolean sValue = s.isPrimitiveClass();\n-        if (tValue != sValue) {\n-            return tValue ?\n-                    isSubtype(t.referenceProjection(), s) :\n-                    !t.hasTag(BOT) && isSubtype(t, s.referenceProjection());\n+        if (allowPrimitiveClasses) {\n+            boolean tValue = t.isPrimitiveClass();\n+            boolean sValue = s.isPrimitiveClass();\n+            if (tValue != sValue) {\n+                return tValue ?\n+                        isSubtype(t.referenceProjection(), s) :\n+                        !t.hasTag(BOT) && isSubtype(t, s.referenceProjection());\n+            }\n@@ -1052,4 +1054,6 @@\n-                    if (et.isPrimitiveClass()) {\n-                        et = et.referenceProjection();\n-                        if (es.isPrimitiveClass())\n-                            es = es.referenceProjection();  \/\/ V <: V, surely\n+                    if (allowPrimitiveClasses) {\n+                        if (et.isPrimitiveClass()) {\n+                            et = et.referenceProjection();\n+                            if (es.isPrimitiveClass())\n+                                es = es.referenceProjection();  \/\/ V <: V, surely\n+                        }\n@@ -1156,1 +1160,1 @@\n-                         s.hasTag(BOT) || (s.hasTag(CLASS) && !s.isPrimitiveClass()) ||\n+                         s.hasTag(BOT) || (s.hasTag(CLASS) && (!allowPrimitiveClasses || !s.isPrimitiveClass())) ||\n@@ -1239,1 +1243,1 @@\n-                        if (et.isPrimitiveClass()) {\n+                        if (allowPrimitiveClasses && et.isPrimitiveClass()) {\n@@ -1792,1 +1796,1 @@\n-                if (s.hasTag(ERROR) || (s.hasTag(BOT) && !t.isPrimitiveClass()))\n+                if (s.hasTag(ERROR) || (s.hasTag(BOT) && (!allowPrimitiveClasses || !t.isPrimitiveClass())))\n@@ -1811,7 +1815,9 @@\n-                    if (t.isPrimitiveClass()) {\n-                        \/\/ (s) Value ? == (s) Value.ref\n-                        t = t.referenceProjection();\n-                    }\n-                    if (s.isPrimitiveClass()) {\n-                        \/\/ (Value) t ? == (Value.ref) t\n-                        s = s.referenceProjection();\n+                    if (allowPrimitiveClasses) {\n+                        if (t.isPrimitiveClass()) {\n+                            \/\/ (s) Value ? == (s) Value.ref\n+                            t = t.referenceProjection();\n+                        }\n+                        if (s.isPrimitiveClass()) {\n+                            \/\/ (Value) t ? == (Value.ref) t\n+                            s = s.referenceProjection();\n+                        }\n@@ -2258,1 +2264,1 @@\n-        if (t.isPrimitiveClass()) {\n+        if (allowPrimitiveClasses && t.isPrimitiveClass()) {\n@@ -2401,1 +2407,1 @@\n-        if (t.isPrimitiveClass())\n+        if (allowPrimitiveClasses && t.isPrimitiveClass())\n@@ -5251,1 +5257,1 @@\n-                    if (type.isPrimitiveClass())\n+                    if (types.allowPrimitiveClasses && type.isPrimitiveClass())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":31,"deletions":25,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2171,1 +2171,1 @@\n-                                 .map(t -> chk.checkNonVoid(posIt.next(), t.isPrimitiveClass() ? t.referenceProjection() : t))\n+                                 .map(t -> chk.checkNonVoid(posIt.next(), allowPrimitiveClasses && t.isPrimitiveClass() ? t.referenceProjection() : t))\n@@ -2615,1 +2615,1 @@\n-                Type wcb = types.erasure(qualifierType.isPrimitiveClass() ?\n+                Type wcb = types.erasure(allowPrimitiveClasses && qualifierType.isPrimitiveClass() ?\n@@ -2795,1 +2795,1 @@\n-                if (fieldAccess.selected.type.isPrimitiveClass() &&\n+                if (allowPrimitiveClasses && fieldAccess.selected.type.isPrimitiveClass() &&\n@@ -3053,1 +3053,1 @@\n-        if (arg.type.isPrimitiveClass())\n+        if (allowPrimitiveClasses && arg.type.isPrimitiveClass())\n@@ -4383,1 +4383,1 @@\n-        if (tree.name == names._class && site.isPrimitiveClass()) {\n+        if (allowPrimitiveClasses && tree.name == names._class && site.isPrimitiveClass()) {\n@@ -4552,1 +4552,1 @@\n-                } else if (site.isPrimitiveClass() && isType(location) && resultInfo.pkind.contains(KindSelector.TYP) && (name == names.ref || name == names.val)) {\n+                } else if (allowPrimitiveClasses && site.isPrimitiveClass() && isType(location) && resultInfo.pkind.contains(KindSelector.TYP) && (name == names.ref || name == names.val)) {\n@@ -4660,1 +4660,3 @@\n-                    Assert.check(owntype.getFlavor() != Flavor.X_Typeof_X);\n+                    if (allowPrimitiveClasses) {\n+                        Assert.check(owntype.getFlavor() != Flavor.X_Typeof_X);\n+                    }\n@@ -4667,1 +4669,1 @@\n-                    if (owntype.isPrimitiveClass() && tree.hasTag(SELECT) && ((JCFieldAccess) tree).name == names.ref) {\n+                    if (allowPrimitiveClasses && owntype.isPrimitiveClass() && tree.hasTag(SELECT) && ((JCFieldAccess) tree).name == names.ref) {\n@@ -5377,1 +5379,1 @@\n-            if (c.type.isPrimitiveClass()) {\n+            if (allowPrimitiveClasses && c.type.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -171,0 +171,1 @@\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -214,0 +215,4 @@\n+    \/** Are primitive classes allowed\n+     *\/\n+    private final boolean allowPrimitiveClasses;\n+\n@@ -817,1 +822,1 @@\n-                    if (fieldAccess.selected.type.isPrimitiveClass() &&\n+                    if (allowPrimitiveClasses && fieldAccess.selected.type.isPrimitiveClass() &&\n@@ -861,1 +866,1 @@\n-        if (t.isReference() && (primitiveClassOK || !t.isPrimitiveClass()))\n+        if (t.isReference() && (!allowPrimitiveClasses || primitiveClassOK || !t.isPrimitiveClass()))\n@@ -962,1 +967,1 @@\n-                if (targ.isPrimitiveClass()) {\n+                if (allowPrimitiveClasses && targ.isPrimitiveClass()) {\n@@ -2544,1 +2549,1 @@\n-            return (symbol.flags() & STATIC) == 0 && symbol.type.isPrimitiveClass();\n+            return (symbol.flags() & STATIC) == 0 && allowPrimitiveClasses && symbol.type.isPrimitiveClass();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -108,0 +108,1 @@\n+    boolean allowPrimitiveClasses;\n@@ -147,0 +148,2 @@\n+        Source source = Source.instance(context);\n+        allowPrimitiveClasses = Source.Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -525,1 +528,1 @@\n-        if (ct.isPrimitiveClass()) {\n+        if (allowPrimitiveClasses && ct.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+    private final boolean allowPrimitiveClasses;\n@@ -127,0 +128,2 @@\n+        Source source = Source.instance(context);\n+        allowPrimitiveClasses = Source.Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -3141,1 +3144,0 @@\n-\n@@ -3144,2 +3146,0 @@\n-\n-\n@@ -4147,1 +4147,1 @@\n-        if (needPrimaryMirror && tree.selected.type.isPrimitiveClass()) {\n+        if (needPrimaryMirror && allowPrimitiveClasses && tree.selected.type.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+    final boolean allowPrimitiveClasses;\n@@ -150,0 +151,1 @@\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -422,1 +424,1 @@\n-            if (site.isPrimitiveClass())\n+            if (allowPrimitiveClasses && site.isPrimitiveClass())\n@@ -487,1 +489,1 @@\n-        if (site.isPrimitiveClass())\n+        if (allowPrimitiveClasses && site.isPrimitiveClass())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,0 +113,2 @@\n+    private boolean allowPrimitiveClasses;\n+\n@@ -197,0 +199,2 @@\n+        Source source = Source.instance(context);\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -1259,1 +1263,1 @@\n-                databuf.appendChar(t.isPrimitiveClass() ? poolWriter.putClass(new ConstantPoolQType(types.erasure(t), types)) : poolWriter.putClass(types.erasure(t)));\n+                databuf.appendChar(allowPrimitiveClasses && t.isPrimitiveClass() ? poolWriter.putClass(new ConstantPoolQType(types.erasure(t), types)) : poolWriter.putClass(types.erasure(t)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -185,0 +185,1 @@\n+    private boolean allowPrimitiveClasses;\n@@ -198,1 +199,2 @@\n-                PoolWriter poolWriter) {\n+                PoolWriter poolWriter,\n+                boolean allowPrimitiveClasses) {\n@@ -220,0 +222,1 @@\n+        this.allowPrimitiveClasses = allowPrimitiveClasses;\n@@ -1783,2 +1786,6 @@\n-                Assert.check(types.isSubtype(types.erasure(old), types.erasure(t)) ||\n-                        (old.isPrimitiveClass() != t.isPrimitiveClass() && types.isConvertible(types.erasure(old), types.erasure(t))));\n+                if (!allowPrimitiveClasses) {\n+                    Assert.check(types.isSubtype(types.erasure(old), types.erasure(t)));\n+                } else {\n+                    Assert.check(types.isSubtype(types.erasure(old), types.erasure(t)) ||\n+                            (old.isPrimitiveClass() != t.isPrimitiveClass() && types.isConvertible(types.erasure(old), types.erasure(t))));\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+        Source source = Source.instance(context);\n+        allowPrimitiveClasses = Source.Feature.PRIMITIVE_CLASSES.allowedInSource(source) && options.isSet(\"enablePrimitiveClasses\");\n@@ -184,0 +186,2 @@\n+    boolean allowPrimitiveClasses;\n+\n@@ -1064,1 +1068,2 @@\n-                                        poolWriter);\n+                                        poolWriter,\n+                                        allowPrimitiveClasses);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}