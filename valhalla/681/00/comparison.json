{"files":[{"patch":"@@ -2482,1 +2482,1 @@\n-        \/** Access codes for dereferencing, assignment, withfield\n+        \/** Access codes for dereferencing, assignment,\n@@ -2502,2 +2502,1 @@\n-            WITHFIELD(12, Tag.WITHFIELD),\n-            FIRSTASGOP(14, Tag.NO_TAG);\n+            FIRSTASGOP(12, Tag.NO_TAG);\n@@ -2536,2 +2535,0 @@\n-                    case WITHFIELD:\n-                        return AccessCode.WITHFIELD.code;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -336,11 +336,1 @@\n-                boolean complain = true;\n-                \/* Allow updates to instance fields of primitive classes by any method in the same nest via the\n-                   withfield operator -This does not result in mutation of final fields; the code generator\n-                   would implement `copy on write' semantics via the opcode `withfield'.\n-                *\/\n-                if (env.info.inWithField && v.getKind() == ElementKind.FIELD && (v.flags() & STATIC) == 0 && v.owner.type.isValueClass()) {\n-                    if (env.enclClass.sym.outermostClass() == v.owner.outermostClass())\n-                        complain = false;\n-                }\n-                if (complain)\n-                    log.error(pos, Errors.CantAssignValToFinalVar(v));\n+                log.error(pos, Errors.CantAssignValToFinalVar(v));\n@@ -1526,33 +1516,0 @@\n-    public void visitWithField(JCWithField tree) {\n-        boolean inWithField = env.info.inWithField;\n-        try {\n-            env.info.inWithField = true;\n-            Type fieldtype = attribTree(tree.field, env.dup(tree), varAssignmentInfo);\n-            attribExpr(tree.value, env, fieldtype);\n-            Type capturedType = syms.errType;\n-            if (tree.field.type != null && !tree.field.type.isErroneous()) {\n-                final Symbol sym = TreeInfo.symbol(tree.field);\n-                if (sym == null || sym.kind != VAR || sym.owner.kind != TYP ||\n-                        (sym.flags() & STATIC) != 0 || !sym.owner.type.isValueClass()) {\n-                    log.error(tree.field.pos(), Errors.ValueClassInstanceFieldExpectedHere);\n-                } else {\n-                    Type ownType = sym.owner.type;\n-                    switch(tree.field.getTag()) {\n-                        case IDENT:\n-                            JCIdent ident = (JCIdent) tree.field;\n-                            ownType = ident.sym.owner.type;\n-                            break;\n-                        case SELECT:\n-                            JCFieldAccess fieldAccess = (JCFieldAccess) tree.field;\n-                            ownType = fieldAccess.selected.type;\n-                            break;\n-                    }\n-                    capturedType = capture(ownType);\n-                }\n-            }\n-            result = check(tree, capturedType, KindSelector.VAL, resultInfo);\n-        } finally {\n-            env.info.inWithField = inWithField;\n-        }\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":44,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -91,5 +91,0 @@\n-    \/**\n-     *  Is this an attribution environment for a withfield operation ?\n-     *\/\n-    boolean inWithField = false;\n-\n@@ -155,1 +150,0 @@\n-        info.inWithField = inWithField;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrContext.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -877,3 +877,0 @@\n-        else if (enclOp.hasTag(WITHFIELD) &&\n-                tree == TreeInfo.skipParens(((JCWithField) enclOp).field))\n-            return AccessCode.WITHFIELD.code;\n@@ -990,1 +987,1 @@\n-            } else if (acode == AccessCode.ASSIGN.code || acode == AccessCode.WITHFIELD.code)\n+            } else if (acode == AccessCode.ASSIGN.code)\n@@ -994,1 +991,1 @@\n-            restype = acode == AccessCode.WITHFIELD.code ? vsym.owner.erasure(types) : vsym.erasure(types);\n+            restype = vsym.erasure(types);\n@@ -1372,3 +1369,0 @@\n-            case WITHFIELD:\n-                expr = make.WithField(ref, args.head);\n-                break;\n@@ -1380,1 +1374,1 @@\n-            stat = make.Return(expr.setType(aCode == AccessCode.WITHFIELD ? sym.owner.type : sym.type));\n+            stat = make.Return(expr.setType(sym.type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -191,1 +191,0 @@\n-        this.allowWithFieldOperator = fac.options.isSet(\"allowWithFieldOperator\");\n@@ -215,4 +214,0 @@\n-    \/** Switch: should we allow withField operator at source level ?\n-    *\/\n-    boolean allowWithFieldOperator;\n-\n@@ -1211,15 +1206,0 @@\n-        case WITHFIELD:\n-            if (!allowWithFieldOperator) {\n-                log.error(pos, Errors.WithFieldOperatorDisallowed);\n-            }\n-            if (typeArgs == null && (mode & EXPR) != 0) {\n-                nextToken();\n-                accept(LPAREN);\n-                mode = EXPR;\n-                t = term();\n-                accept(COMMA);\n-                mode = EXPR;\n-                JCExpression v = term();\n-                accept(RPAREN);\n-                return F.at(pos).WithField(t, v);\n-            } else return illegal();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -148,1 +148,0 @@\n-        WITHFIELD(\"__WithField\"),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/Tokens.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3943,6 +3943,0 @@\n-compiler.err.value.class.instance.field.expected.here=\\\n-    withfield operator requires an instance field of a value class here\n-\n-compiler.err.with.field.operator.disallowed=\\\n-    WithField operator is allowed only with -XDallowWithFieldOperator\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -263,1 +263,0 @@\n-        WITHFIELD(TokenKind.WITHFIELD, XEXPR),  \/\/  withfield\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/CompletenessAnalyzer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ options: -XDallowWithFieldOperator\n-\/\/ key: compiler.err.value.class.instance.field.expected.here\n-\n-final primitive class Blah {\n-    final int x;\n-    static int si;\n-    Blah() {\n-        x = 10;\n-        Blah b = __WithField(this.si, 10);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassInstanceFieldExpectedHere.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.with.field.operator.disallowed\n-\n-final primitive class Blah {\n-    final int x;\n-    Blah() {\n-        Blah b = __WithField(x, 10);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WithFieldOperatorDisallowed.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -30,2 +30,2 @@\n- * @compile -XDallowWithFieldOperator Point.java\n- * @compile -source 10 -XDallowWithFieldOperator CastNoNullCheckTest.java\n+ * @compile Point.java\n+ * @compile -source 10 CastNoNullCheckTest.java\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CastNoNullCheckTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckMakeDefault.out -XDallowWithFieldOperator -XDrawDiagnostics CheckMakeDefault.java\n+ * @compile\/fail\/ref=CheckMakeDefault.out -XDrawDiagnostics CheckMakeDefault.java\n@@ -44,4 +44,1 @@\n-       p = Point.default;\n-       p = __WithField(p.x, x);\n-       p = __WithField(p.y, y);\n-       return p;\n+       return new Point(x, y);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckMakeDefault.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDallowWithFieldOperator CompilesJustFine.java\n+ * @compile CompilesJustFine.java\n@@ -65,3 +65,3 @@\n-    PointBug2() {\n-        x = 0;\n-        y = 0;\n+    PointBug2(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n@@ -71,4 +71,1 @@\n-        PointBug2 p = PointBug2.default;\n-        p = __WithField(p.x, x);\n-        p = __WithField(p.y, y);\n-        return p;\n+        return new PointBug2(x, y);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CompilesJustFine.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDallowWithFieldOperator ExplicitLambdaWithNullableTypes.java\n+ * @compile ExplicitLambdaWithNullableTypes.java\n@@ -40,2 +40,2 @@\n-    private boolean isPresent = false;\n-    private int v = 0;\n+    private boolean isPresent;\n+    private int v;\n@@ -47,0 +47,5 @@\n+    public OptionalInt(int val) {\n+        this.v = val;\n+        this.isPresent = true;\n+    }\n+\n@@ -48,4 +53,1 @@\n-        OptionalInt self = OptionalInt.default;\n-        self = __WithField(self.v, val);\n-        self = __WithField(self.isPresent, true);\n-        return self;\n+        return new OptionalInt(val);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ExplicitLambdaWithNullableTypes.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDallowWithFieldOperator ExplicitLambdaWithNullableTypes2.java\n+ * @compile ExplicitLambdaWithNullableTypes2.java\n@@ -41,2 +41,2 @@\n-    private boolean isPresent = false;\n-    private int v = 0;\n+    private boolean isPresent;\n+    private int v;\n@@ -48,0 +48,5 @@\n+    public OptionalInt(int val) {\n+        this.v = val;\n+        this.isPresent = true;\n+    }\n+\n@@ -49,4 +54,1 @@\n-        OptionalInt self = OptionalInt.default;\n-        self = __WithField(self.v, val);\n-        self = __WithField(self.isPresent, true);\n-        return self;\n+        return new OptionalInt(val);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ExplicitLambdaWithNullableTypes2.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDallowWithFieldOperator ExplicitLambdaWithNullableTypes3.java\n+ * @compile ExplicitLambdaWithNullableTypes3.java\n@@ -41,2 +41,2 @@\n-    private boolean isPresent = false;\n-    private int v = 0;\n+    private boolean isPresent;\n+    private int v;\n@@ -48,0 +48,5 @@\n+    public OptionalInt(int val) {\n+        this.v = val;\n+        this.isPresent = true;\n+    }\n+\n@@ -49,4 +54,1 @@\n-        OptionalInt self = OptionalInt.default;\n-        self = __WithField(self.v, val);\n-        self = __WithField(self.isPresent, true);\n-        return self;\n+        return new OptionalInt(val);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ExplicitLambdaWithNullableTypes3.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -4,2 +4,2 @@\n- * @summary Test Javac's treatment of null assignment to value instances\n- * @compile\/fail\/ref=FlattenableNegativeTest.out -XDallowWithFieldOperator -XDrawDiagnostics -XDdev FlattenableNegativeTest.java\n+ * @summary Test Javac's treatment of null assignment to primitive class instances\n+ * @compile\/fail\/ref=FlattenableNegativeTest.out -XDrawDiagnostics -XDdev FlattenableNegativeTest.java\n@@ -17,1 +17,1 @@\n-                x = __WithField(x.v, null);  \/\/ Error: withfield attempt is illegal.\n+                x.v = null;  \/\/ Error: illegal.\n@@ -22,1 +22,1 @@\n-            x = __WithField(x.v, null); \/\/ withfield attempt is illegal\n+            x.v = null; \/\/ illegal\n@@ -31,1 +31,1 @@\n-                x = __WithField(x.v, null); \/\/ illegal withfield attempt\n+                x.v = null; \/\/ illegal\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/FlattenableNegativeTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,2 +2,4 @@\n-FlattenableNegativeTest.java:17:38: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableNegativeTest.V)\n-FlattenableNegativeTest.java:22:34: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableNegativeTest.V)\n+FlattenableNegativeTest.java:17:18: compiler.err.cant.assign.val.to.final.var: v\n+FlattenableNegativeTest.java:17:23: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableNegativeTest.V)\n+FlattenableNegativeTest.java:22:14: compiler.err.cant.assign.val.to.final.var: v\n+FlattenableNegativeTest.java:22:19: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableNegativeTest.V)\n@@ -6,1 +8,2 @@\n-FlattenableNegativeTest.java:31:38: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableNegativeTest.V)\n+FlattenableNegativeTest.java:31:18: compiler.err.cant.assign.val.to.final.var: v\n+FlattenableNegativeTest.java:31:23: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, FlattenableNegativeTest.V)\n@@ -10,1 +13,1 @@\n-9 errors\n+12 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/FlattenableNegativeTest.out","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile -XDallowWithFieldOperator Point.java\n+ * @compile Point.java\n@@ -38,3 +38,3 @@\n-    Point () {\n-        x = 10;\n-        y = 20;\n+    public Point (int x, int y) {\n+        this.x = x;\n+        this.y = y;\n@@ -43,4 +43,1 @@\n-        Point p = Point.default;\n-        p = __WithField(p.x, x);\n-        p = __WithField(p.y, y);\n-        return p;\n+        return new Point(x, y);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/Point.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8206147\n- * @summary WithField operation on a private inner field should be enclosed in a suitable accessor method.\n- * @compile -XDallowWithFieldOperator WithFieldAccessorTest.java\n- * @run main\/othervm WithFieldAccessorTest\n- *\/\n-\n-public class WithFieldAccessorTest {\n-\n-    public static final primitive class V {\n-        private final int i;\n-        V() {\n-            this.i = 0;\n-        }\n-\n-        public static V make(int i) {\n-            V v = V.default;\n-            v = __WithField(v.i, i);\n-            return v;\n-        }\n-    }\n-\n-    public static void main(String... args) throws Throwable {\n-        V v = __WithField(V.make(10).i, 20);\n-        if (v.i != 20)\n-            throw new AssertionError(\"Withfield didn't work!\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldAccessorTest.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check code generation for value creation ops\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDallowWithFieldOperator WithFieldOfExplicitSelector.java\n- * @run main\/othervm -Xverify:none WithFieldOfExplicitSelector\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class WithFieldOfExplicitSelector {\n-\n-    final primitive class X {\n-\n-        final int i;\n-\n-        X() {\n-            i = 10;\n-        }\n-\n-        X getX(int i, Integer in) {\n-            X xl = __WithField(this.i, i);\n-            xl = __WithField(xl.i, in);\n-            return xl;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new WithFieldOfExplicitSelector().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"WithFieldOfExplicitSelector$X.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-         \"0: iload_1\",\n-         \"1: aload_0\",\n-         \"2: swap\",\n-         \"3: withfield     #3                  \/\/ Field i:I\",\n-         \"6: astore_3\",\n-         \"7: aload_2\",\n-         \"8: invokevirtual #7                  \/\/ Method java\/lang\/Integer.intValue:()I\",\n-        \"11: aload_3\",\n-        \"12: swap\",\n-        \"13: withfield     #3                  \/\/ Field i:I\",\n-        \"16: astore_3\",\n-        \"17: aload_3\",\n-        \"18: areturn\"\n-         });\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOfExplicitSelector.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDrawDiagnostics -XDdev -XDallowWithFieldOperator WithFieldOfGenericType.java\n- * @run main\/othervm WithFieldOfGenericType\n+ * @run main WithFieldOfGenericType\n@@ -36,3 +35,1 @@\n-    WithFieldOfGenericType<E> bug = WithFieldOfGenericType.default;\n-    bug = __WithField(bug.value, true);\n-    return bug;\n+    return new WithFieldOfGenericType<>(true);\n@@ -41,3 +38,2 @@\n-  private WithFieldOfGenericType() {\n-    value = false;\n-    throw new AssertionError();\n+  private WithFieldOfGenericType(boolean value) {\n+    this.value = value;\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOfGenericType.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check code generation for value creation ops\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDallowWithFieldOperator WithFieldOfImplicitThis.java\n- * @run main\/othervm -Xverify:none WithFieldOfImplicitThis\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class WithFieldOfImplicitThis {\n-\n-    final primitive class X {\n-\n-        final int x;\n-\n-        X() {\n-            x = 10;\n-        }\n-\n-        X getX(Integer xVal, int xi) {\n-            X xl = X.default;\n-            xl = __WithField(x, xi);\n-            xl = __WithField(x, xVal);\n-            return xl;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new WithFieldOfImplicitThis().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"WithFieldOfImplicitThis$X.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-         \"0: aconst_init   #1                  \/\/ class WithFieldOfImplicitThis$X\",\n-         \"3: astore_3\",\n-         \"4: aload_0\",\n-         \"5: iload_2\",\n-         \"6: withfield     #3                  \/\/ Field x:I\",\n-         \"9: astore_3\",\n-        \"10: aload_0\",\n-        \"11: aload_1\",\n-        \"12: invokevirtual #7                  \/\/ Method java\/lang\/Integer.intValue:()I\",\n-        \"15: withfield     #3                  \/\/ Field x:I\",\n-        \"18: astore_3\",\n-        \"19: aload_3\",\n-        \"20: areturn\"\n-         });\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOfImplicitThis.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Verify that various errors related to __WithField operator are caught.\n- * @compile\/fail\/ref=WithFieldOperatorTest.out -XDallowWithFieldOperator -XDrawDiagnostics -XDdev WithFieldOperatorTest.java\n- *\/\n-\n-public class WithFieldOperatorTest {\n-    static int xs;\n-    int ifld;\n-    class Y {}\n-    public final primitive class V { int x = 10; }\n-\n-    public final primitive class X {\n-\n-        final int x;\n-        final V v;\n-\n-        X() {\n-            x = 10;\n-            v = V.default;\n-        }\n-\n-        X getX(int xVal, WithFieldOperatorTest wfot) {\n-            X x = X.default;\n-            x = __WithField(new Y(), null);  \/\/ not a variable at all.\n-            x = __WithField(wfot.xs, 10); \/\/ not an instance field.\n-            x = __WithField(wfot.ifld, 10); \/\/ not a field of value type\n-            x = __WithField(xVal, xVal); \/\/ not a field\n-            x = __WithField(this, this); \/\/ not a field\n-            x = __WithField(X.this, this); \/\/ not a field\n-            x = __WithField(x.x, 12.0); \/\/ float cannot be assigned to int\n-            x = __WithField(x.v, null); \/\/ null cannot be assigned to primitive class instance\n-            return x;\n-        }\n-    }\n-}\n-\n-class WithFieldOperatorTest_aux {\n-    void foo(WithFieldOperatorTest.X x) {\n-        x = __WithField(x.x, 10); \/\/ outside the nest\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOperatorTest.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,10 +0,0 @@\n-WithFieldOperatorTest.java:25:29: compiler.err.unexpected.type: kindname.variable, kindname.value\n-WithFieldOperatorTest.java:26:33: compiler.err.value.class.instance.field.expected.here\n-WithFieldOperatorTest.java:27:33: compiler.err.value.class.instance.field.expected.here\n-WithFieldOperatorTest.java:28:29: compiler.err.value.class.instance.field.expected.here\n-WithFieldOperatorTest.java:29:29: compiler.err.cant.assign.val.to.this\n-WithFieldOperatorTest.java:30:30: compiler.err.cant.assign.val.to.this\n-WithFieldOperatorTest.java:31:34: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: double, int)\n-WithFieldOperatorTest.java:32:34: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, WithFieldOperatorTest.V)\n-WithFieldOperatorTest.java:40:26: compiler.err.cant.assign.val.to.final.var: x\n-9 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOperatorTest.out","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -27,1 +27,1 @@\n- * @compile -XDallowWithFieldOperator WithFieldRuntimeTest.java\n+ * @compile WithFieldRuntimeTest.java\n@@ -33,1 +33,5 @@\n-    final int x = 10;\n+    final int x;\n+\n+    WithFieldRuntimeTest(int x) {\n+        this.x = x;\n+    }\n@@ -38,1 +42,1 @@\n-        x = __WithField(x.x, 20);\n+        x = new WithFieldRuntimeTest(20);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldRuntimeTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CheckMakeDefault.out -XDallowWithFieldOperator -XDrawDiagnostics CheckMakeDefault.java\n+ * @compile\/fail\/ref=CheckMakeDefault.out -XDrawDiagnostics CheckMakeDefault.java\n@@ -44,4 +44,1 @@\n-       p = Point.default;\n-       p = __WithField(p.x, x);\n-       p = __WithField(p.y, y);\n-       return p;\n+       return new Point(x, y);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckMakeDefault.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile -XDallowWithFieldOperator -XDrawDiagnostics -XDdev FlattenableTest.java\n+ * @compile -XDrawDiagnostics -XDdev FlattenableTest.java\n@@ -13,2 +13,12 @@\n-            final V v = null;  \/\/ OK: initialization for value classes\n-            final V v2 = v;    \/\/ OK, null not constant propagated.\n+            final V v;\n+            final V v2;\n+\n+            X() {\n+                this.v = null;\n+                this.v2 = v;    \/\/ OK, null not constant propagated.\n+            }\n+\n+            X(V v) {\n+                this.v = v;\n+                this.v2 = v;\n+            }\n@@ -17,1 +27,1 @@\n-                x = __WithField(x.v, null);  \/\/ OK: withfield is permitted here.\n+                x = new X(null);  \/\/ OK\n@@ -22,1 +32,1 @@\n-            x = __WithField(x.v, null); \/\/ OK: withfield is permitted here.\n+            x = new X(null); \/\/ OK\n@@ -31,1 +41,1 @@\n-                x = __WithField(x.v, null); \/\/ OK: withfield is permitted here.\n+                x = new X(null); \/\/ OK\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/FlattenableTest.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8206147\n- * @summary WithField operation on a private inner field should be enclosed in a suitable accessor method.\n- * @compile -XDallowWithFieldOperator WithFieldAccessorTest.java\n- * @run main\/othervm WithFieldAccessorTest\n- *\/\n-\n-public class WithFieldAccessorTest {\n-\n-    public static final value class V {\n-        private final int i;\n-        V() {\n-            this.i = 0;\n-        }\n-\n-        public static V make(int i) {\n-            V v = V.default;\n-            v = __WithField(v.i, i);\n-            return v;\n-        }\n-    }\n-\n-    public static void main(String... args) throws Throwable {\n-        V v = __WithField(V.make(10).i, 20);\n-        if (v.i != 20)\n-            throw new AssertionError(\"Withfield didn't work!\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldAccessorTest.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check code generation for value creation ops\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDallowWithFieldOperator WithFieldOfExplicitSelector.java\n- * @run main\/othervm -Xverify:none WithFieldOfExplicitSelector\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class WithFieldOfExplicitSelector {\n-\n-    final value class X {\n-\n-        final int i;\n-\n-        X() {\n-            i = 10;\n-        }\n-\n-        X getX(int i, Integer in) {\n-            X xl = __WithField(this.i, i);\n-            xl = __WithField(xl.i, in);\n-            return xl;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new WithFieldOfExplicitSelector().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"WithFieldOfExplicitSelector$X.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-         \"0: iload_1\",\n-         \"1: aload_0\",\n-         \"2: swap\",\n-         \"3: withfield     #3                  \/\/ Field i:I\",\n-         \"6: astore_3\",\n-         \"7: aload_2\",\n-         \"8: invokevirtual #7                  \/\/ Method java\/lang\/Integer.intValue:()I\",\n-        \"11: aload_3\",\n-        \"12: swap\",\n-        \"13: withfield     #3                  \/\/ Field i:I\",\n-        \"16: astore_3\",\n-        \"17: aload_3\",\n-        \"18: areturn\"\n-         });\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOfExplicitSelector.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile -XDrawDiagnostics -XDdev -XDallowWithFieldOperator WithFieldOfGenericType.java\n+ * @compile -XDrawDiagnostics -XDdev WithFieldOfGenericType.java\n@@ -36,3 +36,1 @@\n-    WithFieldOfGenericType<E> bug = WithFieldOfGenericType.default;\n-    bug = __WithField(bug.value, true);\n-    return bug;\n+    return new WithFieldOfGenericType<>(true);\n@@ -41,3 +39,2 @@\n-  private WithFieldOfGenericType() {\n-    value = false;\n-    throw new AssertionError();\n+  private WithFieldOfGenericType(boolean value) {\n+    this.value = value;\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOfGenericType.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Check code generation for value creation ops\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDallowWithFieldOperator WithFieldOfImplicitThis.java\n- * @run main\/othervm -Xverify:none WithFieldOfImplicitThis\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class WithFieldOfImplicitThis {\n-\n-    final value class X {\n-\n-        final int x;\n-\n-        X() {\n-            x = 10;\n-        }\n-\n-        X getX(Integer xVal, int xi) {\n-            X xl = X.default;\n-            xl = __WithField(x, xi);\n-            xl = __WithField(x, xVal);\n-            return xl;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        new WithFieldOfImplicitThis().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"WithFieldOfImplicitThis$X.class\").toString() };\n-        runCheck(params, new String [] {\n-\n-         \"0: aconst_init   #1                  \/\/ class WithFieldOfImplicitThis$X\",\n-         \"3: astore_3\",\n-         \"4: aload_0\",\n-         \"5: iload_2\",\n-         \"6: withfield     #3                  \/\/ Field x:I\",\n-         \"9: astore_3\",\n-        \"10: aload_0\",\n-        \"11: aload_1\",\n-        \"12: invokevirtual #7                  \/\/ Method java\/lang\/Integer.intValue:()I\",\n-        \"15: withfield     #3                  \/\/ Field x:I\",\n-        \"18: astore_3\",\n-        \"19: aload_3\",\n-        \"20: areturn\"\n-         });\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOfImplicitThis.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Verify that various errors related to __WithField operator are caught.\n- * @compile\/fail\/ref=WithFieldOperatorTest.out -XDallowWithFieldOperator -XDrawDiagnostics -XDdev WithFieldOperatorTest.java\n- *\/\n-\n-public class WithFieldOperatorTest {\n-    static int xs;\n-    int ifld;\n-    class Y {}\n-    public final value class V { int x = 10; }\n-\n-    public final value class X {\n-\n-        final int x;\n-        final V v;\n-\n-        X() {\n-            x = 10;\n-            v = V.default;\n-        }\n-\n-        X getX(int xVal, WithFieldOperatorTest wfot) {\n-            X x = X.default;\n-            x = __WithField(new Y(), null);  \/\/ not a variable at all.\n-            x = __WithField(wfot.xs, 10); \/\/ not an instance field.\n-            x = __WithField(wfot.ifld, 10); \/\/ not a field of value type\n-            x = __WithField(xVal, xVal); \/\/ not a field\n-            x = __WithField(this, this); \/\/ not a field\n-            x = __WithField(X.this, this); \/\/ not a field\n-            x = __WithField(x.x, 12.0); \/\/ float cannot be assigned to int\n-            x = __WithField(x.v, null);\n-            return x;\n-        }\n-    }\n-}\n-\n-class WithFieldOperatorTest_aux {\n-    void foo(WithFieldOperatorTest.X x) {\n-        x = __WithField(x.x, 10); \/\/ outside the nest\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOperatorTest.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-WithFieldOperatorTest.java:25:29: compiler.err.unexpected.type: kindname.variable, kindname.value\n-WithFieldOperatorTest.java:26:33: compiler.err.value.class.instance.field.expected.here\n-WithFieldOperatorTest.java:27:33: compiler.err.value.class.instance.field.expected.here\n-WithFieldOperatorTest.java:28:29: compiler.err.value.class.instance.field.expected.here\n-WithFieldOperatorTest.java:29:29: compiler.err.cant.assign.val.to.this\n-WithFieldOperatorTest.java:30:30: compiler.err.cant.assign.val.to.this\n-WithFieldOperatorTest.java:31:34: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: double, int)\n-WithFieldOperatorTest.java:40:26: compiler.err.cant.assign.val.to.final.var: x\n-8 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOperatorTest.out","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"}]}