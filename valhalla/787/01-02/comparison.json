{"files":[{"patch":"@@ -108,1 +108,1 @@\n-         * do the substitutability test if they are of a value type.\n+         * do the substitutability test if they are of a value class.\n@@ -121,1 +121,1 @@\n-         * of the given value class are substitutable.\n+         * are substitutable.\n@@ -124,1 +124,3 @@\n-            assert isValueType(type);\n+            \/\/ ensure the reference type of a primitive class not used in the method handle\n+            assert isValueClass(type) || PrimitiveClass.isPrimitiveValueType(type);\n+\n@@ -145,0 +147,3 @@\n+        \/*\n+         * Produces a MethodHandle that computes the hash code for a value object.\n+         *\/\n@@ -146,1 +151,3 @@\n-            assert isValueType(type);\n+            \/\/ ensure the reference type of a primitive class not used in the method handle\n+            assert isValueClass(type) || PrimitiveClass.isPrimitiveValueType(type);\n+\n@@ -160,4 +167,3 @@\n-                \/\/ For basic primitive types or reference types, this calls Objects::hashCode.\n-                \/\/ If the instance is of value type and the hashCode method is not\n-                \/\/ overridden, VM will call valueObjectHashCode to compute the\n-                \/\/ hash code.\n+                \/\/ For primitive types or reference types, this calls Objects::hashCode.\n+                \/\/ For value objects and the hashCode method is not overridden,\n+                \/\/ VM will call valueObjectHashCode to compute the hash code.\n@@ -276,1 +282,1 @@\n-         * the default hashcode for value types will vary between JVM runs.\n+         * the default hashcode for value classes will vary between JVM runs.\n@@ -402,1 +408,1 @@\n-     * <li>If {@code T} is a value type, this method returns\n+     * <li>If {@code T} is a value class, this method returns\n@@ -421,1 +427,1 @@\n-        if (isValueType(type)) {\n+        if (isValueClass(type) || PrimitiveClass.isPrimitiveValueType(type)) {\n@@ -427,1 +433,1 @@\n-    \/\/ store the method handle for value types in ClassValue\n+    \/\/ store the method handle for value classes in ClassValue\n@@ -458,8 +464,1 @@\n-     * Returns true if the given type is a value type.\n-     *\n-     * If the given type represents a primitive class, this method returns\n-     * true if the given type is a primitive type.  If the given type\n-     * is a primitive class reference type, this method returns false.\n-     *\n-     * If the given type represents a basic primitive type, this method\n-     * returns false.\n+     * Returns true if the given type is a value class.\n@@ -467,4 +466,2 @@\n-    private static boolean isValueType(Class<?> type) {\n-        if (!type.isValue()) return false;\n-\n-        return !PrimitiveClass.isPrimitiveClass(type) || PrimitiveClass.isPrimitiveValueType(type);\n+    private static boolean isValueClass(Class<?> type) {\n+        return type.isValue() && !PrimitiveClass.isPrimitiveClass(type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ValueObjectMethods.java","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"}]}