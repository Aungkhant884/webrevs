{"files":[{"patch":"@@ -663,0 +663,1 @@\n+c075a286cc7df767cce28e8057d6ec5051786490 jdk-16+9\n","filename":".hgtags","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1011,0 +1011,3 @@\n+  void fast_md5(Register buf, Address state, Address ofs, Address limit,\n+                bool multi_block);\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3664,0 +3664,37 @@\n+  \/\/ ofs and limit are use for multi-block byte array.\n+  \/\/ int com.sun.security.provider.MD5.implCompress(byte[] b, int ofs)\n+  address generate_md5_implCompress(bool multi_block, const char *name) {\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, \"StubRoutines\", name);\n+    address start = __ pc();\n+\n+    const Register buf_param = r15;\n+    const Address state_param(rsp, 0 * wordSize);\n+    const Address ofs_param  (rsp, 1 * wordSize    );\n+    const Address limit_param(rsp, 1 * wordSize + 4);\n+\n+    __ enter();\n+    __ push(rbx);\n+    __ push(rdi);\n+    __ push(rsi);\n+    __ push(r15);\n+    __ subptr(rsp, 2 * wordSize);\n+\n+    __ movptr(buf_param, c_rarg0);\n+    __ movptr(state_param, c_rarg1);\n+    if (multi_block) {\n+      __ movl(ofs_param, c_rarg2);\n+      __ movl(limit_param, c_rarg3);\n+    }\n+    __ fast_md5(buf_param, state_param, ofs_param, limit_param, multi_block);\n+\n+    __ addptr(rsp, 2 * wordSize);\n+    __ pop(r15);\n+    __ pop(rsi);\n+    __ pop(rdi);\n+    __ pop(rbx);\n+    __ leave();\n+    __ ret(0);\n+    return start;\n+  }\n+\n@@ -6488,0 +6525,4 @@\n+    if (UseMD5Intrinsics) {\n+      StubRoutines::_md5_implCompress = generate_md5_implCompress(false, \"md5_implCompress\");\n+      StubRoutines::_md5_implCompressMB = generate_md5_implCompress(true, \"md5_implCompressMB\");\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -948,0 +948,4 @@\n+  if (FLAG_IS_DEFAULT(UseMD5Intrinsics)) {\n+    UseMD5Intrinsics = true;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -458,1 +458,1 @@\n-    return 3;\n+    return 4;\n@@ -706,0 +706,3 @@\n+  case vmIntrinsics::_md5_implCompress:\n+    if (!UseMD5Intrinsics) return true;\n+    break;\n@@ -716,1 +719,1 @@\n-    if (!(UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics)) return true;\n+    if (!(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics)) return true;\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1058,0 +1058,6 @@\n+  \/* support for sun.security.provider.MD5 *\/                                                                           \\\n+  do_class(sun_security_provider_md5,                              \"sun\/security\/provider\/MD5\")                         \\\n+  do_intrinsic(_md5_implCompress, sun_security_provider_md5, implCompress_name, implCompress_signature, F_R)            \\\n+   do_name(     implCompress_name,                                 \"implCompress0\")                                     \\\n+   do_signature(implCompress_signature,                            \"([BI)V\")                                            \\\n+                                                                                                                        \\\n@@ -1061,2 +1067,0 @@\n-   do_name(     implCompress_name,                                 \"implCompress0\")                                     \\\n-   do_signature(implCompress_signature,                            \"([BI)V\")                                            \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -627,0 +627,1 @@\n+  case vmIntrinsics::_md5_implCompress:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1026,0 +1026,2 @@\n+                  strcmp(call->as_CallLeaf()->_name, \"md5_implCompress\") == 0 ||\n+                  strcmp(call->as_CallLeaf()->_name, \"md5_implCompressMB\") == 0 ||\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -336,1 +336,1 @@\n-  bool inline_sha_implCompress(vmIntrinsics::ID id);\n+  bool inline_digestBase_implCompress(vmIntrinsics::ID id);\n@@ -338,5 +338,5 @@\n-  bool inline_sha_implCompressMB(Node* digestBaseObj, ciInstanceKlass* instklass_SHA,\n-                                 bool long_state, address stubAddr, const char *stubName,\n-                                 Node* src_start, Node* ofs, Node* limit);\n-  Node* get_state_from_sha_object(Node *sha_object);\n-  Node* get_state_from_sha5_object(Node *sha_object);\n+  bool inline_digestBase_implCompressMB(Node* digestBaseObj, ciInstanceKlass* instklass,\n+                                        bool long_state, address stubAddr, const char *stubName,\n+                                        Node* src_start, Node* ofs, Node* limit);\n+  Node* get_state_from_digest_object(Node *digestBase_object);\n+  Node* get_long_state_from_digest_object(Node *digestBase_object);\n@@ -861,0 +861,1 @@\n+  case vmIntrinsics::_md5_implCompress:\n@@ -864,1 +865,1 @@\n-    return inline_sha_implCompress(intrinsic_id());\n+    return inline_digestBase_implCompress(intrinsic_id());\n@@ -6760,1 +6761,4 @@\n-\/\/------------------------------inline_sha_implCompress-----------------------\n+\/\/------------------------------inline_digestBase_implCompress-----------------------\n+\/\/\n+\/\/ Calculate MD5 for single-block byte[] array.\n+\/\/ void com.sun.security.provider.MD5.implCompress(byte[] buf, int ofs)\n@@ -6771,1 +6775,1 @@\n-bool LibraryCallKit::inline_sha_implCompress(vmIntrinsics::ID id) {\n+bool LibraryCallKit::inline_digestBase_implCompress(vmIntrinsics::ID id) {\n@@ -6774,3 +6778,3 @@\n-  Node* sha_obj = argument(0);\n-  Node* src     = argument(1); \/\/ type oop\n-  Node* ofs     = argument(2); \/\/ type int\n+  Node* digestBase_obj = argument(0);\n+  Node* src            = argument(1); \/\/ type oop\n+  Node* ofs            = argument(2); \/\/ type int\n@@ -6797,0 +6801,6 @@\n+  case vmIntrinsics::_md5_implCompress:\n+    assert(UseMD5Intrinsics, \"need MD5 instruction support\");\n+    state = get_state_from_digest_object(digestBase_obj);\n+    stubAddr = StubRoutines::md5_implCompress();\n+    stubName = \"md5_implCompress\";\n+    break;\n@@ -6799,1 +6809,1 @@\n-    state = get_state_from_sha_object(sha_obj);\n+    state = get_state_from_digest_object(digestBase_obj);\n@@ -6805,1 +6815,1 @@\n-    state = get_state_from_sha_object(sha_obj);\n+    state = get_state_from_digest_object(digestBase_obj);\n@@ -6811,1 +6821,1 @@\n-    state = get_state_from_sha5_object(sha_obj);\n+    state = get_long_state_from_digest_object(digestBase_obj);\n@@ -6825,1 +6835,1 @@\n-  Node* call = make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::sha_implCompress_Type(),\n+  Node* call = make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::digestBase_implCompress_Type(),\n@@ -6834,1 +6844,1 @@\n-\/\/ Calculate SHA\/SHA2\/SHA5 for multi-block byte[] array.\n+\/\/ Calculate MD5\/SHA\/SHA2\/SHA5 for multi-block byte[] array.\n@@ -6838,3 +6848,3 @@\n-  assert(UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics,\n-         \"need SHA1\/SHA256\/SHA512 instruction support\");\n-  assert((uint)predicate < 3, \"sanity\");\n+  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics,\n+         \"need MD5\/SHA1\/SHA256\/SHA512 instruction support\");\n+  assert((uint)predicate < 4, \"sanity\");\n@@ -6863,1 +6873,1 @@\n-  const char* klass_SHA_name = NULL;\n+  const char* klass_digestBase_name = NULL;\n@@ -6870,0 +6880,7 @@\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_md5_implCompress)) {\n+      klass_digestBase_name = \"sun\/security\/provider\/MD5\";\n+      stub_name = \"md5_implCompressMB\";\n+      stub_addr = StubRoutines::md5_implCompressMB();\n+    }\n+    break;\n+  case 1:\n@@ -6871,1 +6888,1 @@\n-      klass_SHA_name = \"sun\/security\/provider\/SHA\";\n+      klass_digestBase_name = \"sun\/security\/provider\/SHA\";\n@@ -6876,1 +6893,1 @@\n-  case 1:\n+  case 2:\n@@ -6878,1 +6895,1 @@\n-      klass_SHA_name = \"sun\/security\/provider\/SHA2\";\n+      klass_digestBase_name = \"sun\/security\/provider\/SHA2\";\n@@ -6883,1 +6900,1 @@\n-  case 2:\n+  case 3:\n@@ -6885,1 +6902,1 @@\n-      klass_SHA_name = \"sun\/security\/provider\/SHA5\";\n+      klass_digestBase_name = \"sun\/security\/provider\/SHA5\";\n@@ -6892,1 +6909,1 @@\n-    fatal(\"unknown SHA intrinsic predicate: %d\", predicate);\n+    fatal(\"unknown DigestBase intrinsic predicate: %d\", predicate);\n@@ -6894,1 +6911,1 @@\n-  if (klass_SHA_name != NULL) {\n+  if (klass_digestBase_name != NULL) {\n@@ -6903,4 +6920,4 @@\n-    ciKlass* klass_SHA = tinst->klass()->as_instance_klass()->find_klass(ciSymbol::make(klass_SHA_name));\n-    assert(klass_SHA->is_loaded(), \"predicate checks that this class is loaded\");\n-    ciInstanceKlass* instklass_SHA = klass_SHA->as_instance_klass();\n-    return inline_sha_implCompressMB(digestBase_obj, instklass_SHA, long_state, stub_addr, stub_name, src_start, ofs, limit);\n+    ciKlass* klass_digestBase = tinst->klass()->as_instance_klass()->find_klass(ciSymbol::make(klass_digestBase_name));\n+    assert(klass_digestBase->is_loaded(), \"predicate checks that this class is loaded\");\n+    ciInstanceKlass* instklass_digestBase = klass_digestBase->as_instance_klass();\n+    return inline_digestBase_implCompressMB(digestBase_obj, instklass_digestBase, long_state, stub_addr, stub_name, src_start, ofs, limit);\n@@ -6910,5 +6927,6 @@\n-\/\/------------------------------inline_sha_implCompressMB-----------------------\n-bool LibraryCallKit::inline_sha_implCompressMB(Node* digestBase_obj, ciInstanceKlass* instklass_SHA,\n-                                               bool long_state, address stubAddr, const char *stubName,\n-                                               Node* src_start, Node* ofs, Node* limit) {\n-  const TypeKlassPtr* aklass = TypeKlassPtr::make(instklass_SHA);\n+\n+\/\/------------------------------inline_digestBase_implCompressMB-----------------------\n+bool LibraryCallKit::inline_digestBase_implCompressMB(Node* digestBase_obj, ciInstanceKlass* instklass_digestBase,\n+                                                      bool long_state, address stubAddr, const char *stubName,\n+                                                      Node* src_start, Node* ofs, Node* limit) {\n+  const TypeKlassPtr* aklass = TypeKlassPtr::make(instklass_digestBase);\n@@ -6916,2 +6934,2 @@\n-  Node* sha_obj = new CheckCastPPNode(control(), digestBase_obj, xtype);\n-  sha_obj = _gvn.transform(sha_obj);\n+  Node* digest_obj = new CheckCastPPNode(control(), digestBase_obj, xtype);\n+  digest_obj = _gvn.transform(digest_obj);\n@@ -6921,1 +6939,1 @@\n-    state = get_state_from_sha5_object(sha_obj);\n+    state = get_long_state_from_digest_object(digest_obj);\n@@ -6923,1 +6941,1 @@\n-    state = get_state_from_sha_object(sha_obj);\n+    state = get_state_from_digest_object(digest_obj);\n@@ -6939,5 +6957,5 @@\n-\/\/------------------------------get_state_from_sha_object-----------------------\n-Node * LibraryCallKit::get_state_from_sha_object(Node *sha_object) {\n-  Node* sha_state = load_field_from_object(sha_object, \"state\", \"[I\", \/*is_exact*\/ false);\n-  assert (sha_state != NULL, \"wrong version of sun.security.provider.SHA\/SHA2\");\n-  if (sha_state == NULL) return (Node *) NULL;\n+\/\/------------------------------get_state_from_digest_object-----------------------\n+Node * LibraryCallKit::get_state_from_digest_object(Node *digest_object) {\n+  Node* digest_state = load_field_from_object(digest_object, \"state\", \"[I\", \/*is_exact*\/ false);\n+  assert (digest_state != NULL, \"wrong version of sun.security.provider.MD5\/SHA\/SHA2\");\n+  if (digest_state == NULL) return (Node *) NULL;\n@@ -6946,1 +6964,1 @@\n-  Node* state = array_element_address(sha_state, intcon(0), T_INT);\n+  Node* state = array_element_address(digest_state, intcon(0), T_INT);\n@@ -6950,5 +6968,5 @@\n-\/\/------------------------------get_state_from_sha5_object-----------------------\n-Node * LibraryCallKit::get_state_from_sha5_object(Node *sha_object) {\n-  Node* sha_state = load_field_from_object(sha_object, \"state\", \"[J\", \/*is_exact*\/ false);\n-  assert (sha_state != NULL, \"wrong version of sun.security.provider.SHA5\");\n-  if (sha_state == NULL) return (Node *) NULL;\n+\/\/------------------------------get_long_state_from_digest_object-----------------------\n+Node * LibraryCallKit::get_long_state_from_digest_object(Node *digest_object) {\n+  Node* digest_state = load_field_from_object(digest_object, \"state\", \"[J\", \/*is_exact*\/ false);\n+  assert (digest_state != NULL, \"wrong version of sun.security.provider.SHA5\");\n+  if (digest_state == NULL) return (Node *) NULL;\n@@ -6957,1 +6975,1 @@\n-  Node* state = array_element_address(sha_state, intcon(0), T_LONG);\n+  Node* state = array_element_address(digest_state, intcon(0), T_LONG);\n@@ -6964,1 +6982,1 @@\n-\/\/    if (digestBaseObj instanceof SHA\/SHA2\/SHA5) do_intrinsic, else do_javapath\n+\/\/    if (digestBaseObj instanceof MD5\/SHA\/SHA2\/SHA5) do_intrinsic, else do_javapath\n@@ -6967,3 +6985,3 @@\n-  assert(UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics,\n-         \"need SHA1\/SHA256\/SHA512 instruction support\");\n-  assert((uint)predicate < 3, \"sanity\");\n+  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics,\n+         \"need MD5\/SHA1\/SHA256\/SHA512 instruction support\");\n+  assert((uint)predicate < 4, \"sanity\");\n@@ -6979,1 +6997,1 @@\n-  const char* klass_SHA_name = NULL;\n+  const char* klass_name = NULL;\n@@ -6982,0 +7000,6 @@\n+    if (UseMD5Intrinsics) {\n+      \/\/ we want to do an instanceof comparison against the MD5 class\n+      klass_name = \"sun\/security\/provider\/MD5\";\n+    }\n+    break;\n+  case 1:\n@@ -6984,1 +7008,1 @@\n-      klass_SHA_name = \"sun\/security\/provider\/SHA\";\n+      klass_name = \"sun\/security\/provider\/SHA\";\n@@ -6987,1 +7011,1 @@\n-  case 1:\n+  case 2:\n@@ -6990,1 +7014,1 @@\n-      klass_SHA_name = \"sun\/security\/provider\/SHA2\";\n+      klass_name = \"sun\/security\/provider\/SHA2\";\n@@ -6993,1 +7017,1 @@\n-  case 2:\n+  case 3:\n@@ -6996,1 +7020,1 @@\n-      klass_SHA_name = \"sun\/security\/provider\/SHA5\";\n+      klass_name = \"sun\/security\/provider\/SHA5\";\n@@ -7003,3 +7027,3 @@\n-  ciKlass* klass_SHA = NULL;\n-  if (klass_SHA_name != NULL) {\n-    klass_SHA = tinst->klass()->as_instance_klass()->find_klass(ciSymbol::make(klass_SHA_name));\n+  ciKlass* klass = NULL;\n+  if (klass_name != NULL) {\n+    klass = tinst->klass()->as_instance_klass()->find_klass(ciSymbol::make(klass_name));\n@@ -7007,2 +7031,2 @@\n-  if ((klass_SHA == NULL) || !klass_SHA->is_loaded()) {\n-    \/\/ if none of SHA\/SHA2\/SHA5 is loaded, we never take the intrinsic fast path\n+  if ((klass == NULL) || !klass->is_loaded()) {\n+    \/\/ if none of MD5\/SHA\/SHA2\/SHA5 is loaded, we never take the intrinsic fast path\n@@ -7013,1 +7037,1 @@\n-  ciInstanceKlass* instklass_SHA = klass_SHA->as_instance_klass();\n+  ciInstanceKlass* instklass = klass->as_instance_klass();\n@@ -7015,2 +7039,2 @@\n-  Node* instofSHA = gen_instanceof(digestBaseObj, makecon(TypeKlassPtr::make(instklass_SHA)));\n-  Node* cmp_instof = _gvn.transform(new CmpINode(instofSHA, intcon(1)));\n+  Node* instof = gen_instanceof(digestBaseObj, makecon(TypeKlassPtr::make(instklass)));\n+  Node* cmp_instof = _gvn.transform(new CmpINode(instof, intcon(1)));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":95,"deletions":71,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -969,1 +969,1 @@\n-const TypeFunc* OptoRuntime::sha_implCompress_Type() {\n+const TypeFunc* OptoRuntime::digestBase_implCompress_Type() {\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -281,1 +281,1 @@\n-  static const TypeFunc* sha_implCompress_Type();\n+  static const TypeFunc* digestBase_implCompress_Type();\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -326,0 +326,3 @@\n+  diagnostic(bool, UseMD5Intrinsics, false,                                 \\\n+          \"Use intrinsics for MD5 crypto hash function\")                    \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -141,0 +141,2 @@\n+address StubRoutines::_md5_implCompress      = NULL;\n+address StubRoutines::_md5_implCompressMB    = NULL;\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,0 +223,2 @@\n+  static address _md5_implCompress;\n+  static address _md5_implCompressMB;\n@@ -403,0 +405,2 @@\n+  static address md5_implCompress()      { return _md5_implCompress; }\n+  static address md5_implCompressMB()    { return _md5_implCompressMB; }\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -432,0 +432,5 @@\n+        if (isJDK16OrHigher()) {\n+            add(toBeInvestigated,\n+                            \"sun\/security\/provider\/MD5.implCompress0([BI)V\");\n+        }\n+\n@@ -602,0 +607,8 @@\n+    private static boolean isJDK15OrHigher() {\n+        return JavaVersionUtil.JAVA_SPEC >= 15;\n+    }\n+\n+    private static boolean isJDK16OrHigher() {\n+        return JavaVersionUtil.JAVA_SPEC >= 16;\n+    }\n+\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot.test\/src\/org\/graalvm\/compiler\/hotspot\/test\/CheckGraalIntrinsics.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}