{"files":[{"patch":"@@ -151,1 +151,5 @@\n-        return new StaticItem(member);\n+        if (this.types.flattenWithTypeRestrictions && member.kind == Kind.VAR && member.type.isValue()) {\n+            return new StaticItem(getFlattenedField(member));\n+        } else {\n+            return new StaticItem(member);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Items.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8253760\n+ * @summary [type-restrictions] Static inline fields are not \"erased\" to the ref type\n+ * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n+ * @compile -XDflattenWithTypeRestrictions RestrictedStaticFieldCodegenTest.java\n+ * @run main\/othervm -Xverify:none RestrictedStaticFieldCodegenTest\n+ * @modules jdk.compiler\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Paths;\n+\n+class PointBox {\n+\n+    static inline class Point {\n+        public double x;\n+        public double y;\n+        public Point(double x, double y) { this.x = x; this.y = y; }\n+    }\n+\n+    public static Point p;\n+\n+    public static void main(String... args) {\n+        if (p != new Point(0,0)) throw new RuntimeException();\n+        p = new Point(1.0, 2.0);\n+        if (p != new Point(1.0, 2.0)) throw new RuntimeException();\n+    }\n+}\n+\n+public class RestrictedStaticFieldCodegenTest {\n+\n+    public static void main(String [] args) {\n+        new RestrictedStaticFieldCodegenTest().run();\n+    }\n+\n+    void run() {\n+        String [] params = new String [] { \"-v\",\n+                                            Paths.get(System.getProperty(\"test.classes\"),\n+                                                \"PointBox.class\").toString() };\n+        runCheck(params, new String [] {\n+\n+         \"public static PointBox$Point$ref p;\",\n+         \"descriptor: LPointBox$Point$ref;\",\n+         \"RestrictedField: #24                    \/\/ QPointBox$Point;\",\n+         \" 0: getstatic     #7                  \/\/ Field p:LPointBox$Point$ref;\",\n+         \"26: putstatic     #7                  \/\/ Field p:LPointBox$Point$ref;\",\n+         \"29: getstatic     #7                  \/\/ Field p:LPointBox$Point$ref;\",\n+         });\n+\n+     }\n+\n+     void runCheck(String [] params, String [] expectedOut) {\n+        StringWriter s;\n+        String out;\n+\n+        System.out.println(\"Checking javap\");\n+        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n+            com.sun.tools.javap.Main.run(params, pw);\n+            out = s.toString();\n+        }\n+        System.out.println(\"Javap = \" + out);\n+        int errors = 0;\n+        for (String eo: expectedOut) {\n+            if (!out.contains(eo)) {\n+                System.err.println(\"Match not found for string: \" + eo);\n+                errors++;\n+            }\n+        }\n+         if (errors > 0) {\n+             throw new AssertionError(\"Unexpected javap output: \" + out);\n+         }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RestrictedStaticFieldCodegenTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}