{"files":[{"patch":"@@ -146,4 +146,5 @@\n-  assert(!EnableValhalla || !p->mark().is_inline_type(),\n-         \"this object should never have been locked\");\n-  unsigned hash = (unsigned)p->identity_hash();\n-  return hash;\n+  \/\/ We are at a safepoint, so the object won't move. It's OK to use its\n+  \/\/ address as the hashcode.\n+  \/\/ We can't use p->identity_hash() as it's not available for primitive oops.\n+  assert_at_safepoint();\n+  return (unsigned)(p2i(p) >> LogBytesPerWord);\n@@ -283,3 +284,4 @@\n-    int hash_original = obj->identity_hash();\n-    archived_oop->set_mark(archived_oop->klass()->prototype_header().copy_set_hash(hash_original));\n-    assert(archived_oop->mark().is_unlocked(), \"sanity\");\n+    if (!(EnableValhalla && obj->mark().is_inline_type())) {\n+      int hash_original = obj->identity_hash();\n+      archived_oop->set_mark(archived_oop->klass()->prototype_header().copy_set_hash(hash_original));\n+      assert(archived_oop->mark().is_unlocked(), \"sanity\");\n@@ -287,2 +289,3 @@\n-    DEBUG_ONLY(int hash_archived = archived_oop->identity_hash());\n-    assert(hash_original == hash_archived, \"Different hash codes: original %x, archived %x\", hash_original, hash_archived);\n+      DEBUG_ONLY(int hash_archived = archived_oop->identity_hash());\n+      assert(hash_original == hash_archived, \"Different hash codes: original %x, archived %x\", hash_original, hash_archived);\n+    }\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"}]}