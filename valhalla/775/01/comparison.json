{"files":[{"patch":"@@ -1515,0 +1515,1 @@\n+        \/\/ Arrays are identity classes but not reflected in modifiers\n@@ -1519,3 +1520,4 @@\n-        return AccessFlag.maskToAccessFlags((location == AccessFlag.Location.CLASS) ?\n-                                            getClassAccessFlagsRaw() :\n-                                            getModifiers(),\n+        final int mask = ((location == AccessFlag.Location.CLASS) ?\n+                getClassAccessFlagsRaw() : getModifiers()) |\n+                (isArray() ? Modifier.IDENTITY : 0);\n+        return AccessFlag.maskToAccessFlags(mask & (~0x800),  \/\/ suppress unspecified bit\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -164,0 +164,12 @@\n+            \/\/ Verify IDENTITY, ABSTRACT, and FINAL access flags\n+            Set<AccessFlag> expected = new HashSet<>(4);\n+            expected.add(AccessFlag.ABSTRACT);\n+            expected.add(AccessFlag.FINAL);\n+            expected.add(AccessFlag.IDENTITY);\n+            if (accessLevel != null)\n+                expected.add(accessLevel);\n+            if (!expected.equals(arrayClass.accessFlags())) {\n+                throw new RuntimeException(\"Unexpected access flags for array: \" + accessClass +\n+                        \": actual: \" + arrayClass.accessFlags() +\n+                        \", expected: \" + expected);\n+            }\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -77,12 +78,12 @@\n-                {new Object(), true},\n-                {\"String\", true},\n-                {String.class, true},\n-                {Object.class, true},\n-                {new ValueType1(1), false},\n-                {new ValueType2(2), false},\n-                {new PrimitiveRecord(1, \"A\"), false},\n-                {new ValueRecord(1,\"B\"), false},\n-                {new int[0], true},  \/\/ arrays of primitive classes are identity objects\n-                {new Object[0], true},  \/\/ arrays of identity classes are identity objects\n-                {new String[0], true},  \/\/ arrays of identity classes are identity objects\n-                {new ValueType1[0], true},  \/\/ arrays of value classes are identity objects\n+                {new Object(), false, false},\n+                {\"String\", true, false},\n+                {String.class, true, false},\n+                {Object.class, true, false},\n+                {new ValueType1(1), false, true},\n+                {new ValueType2(2), false, true},\n+                {new PrimitiveRecord(1, \"A\"), false, true},\n+                {new ValueRecord(1,\"B\"), false, true},\n+                {new int[0], true, false},  \/\/ arrays of primitive classes are identity objects\n+                {new Object[0], true, false},  \/\/ arrays of identity classes are identity objects\n+                {new String[0], true, false},  \/\/ arrays of identity classes are identity objects\n+                {new ValueType1[0], true, false},  \/\/ arrays of value classes are identity objects\n@@ -93,3 +94,18 @@\n-    void identityTests(Object obj, boolean expected) {\n-        var actual = Objects.isIdentityObject(obj);\n-        assertEquals(expected, actual, \"Objects.isIdentityObject unexpected\");\n+    void identityTests(Object obj, boolean identityClass, boolean valueClass) {\n+        Class<?> clazz = obj.getClass();\n+\n+        if (clazz == Object.class) {\n+            assertTrue(Objects.isIdentityObject(obj), \"Objects.isIdentityObject()\");\n+        } else {\n+            assertEquals(Objects.isIdentityObject(obj), identityClass, \"Objects.isIdentityObject()\");\n+        }\n+\n+        assertEquals(clazz.isIdentity(), identityClass, \"Class.isIdentity()\");\n+\n+        assertEquals(clazz.isValue(), valueClass, \"Class.isValue()\");\n+\n+        assertEquals(clazz.accessFlags().contains(AccessFlag.IDENTITY),\n+                identityClass, \"AccessFlag.IDENTITY\");\n+\n+        assertEquals(clazz.accessFlags().contains(AccessFlag.VALUE),\n+                valueClass, \"AccessFlag.VALUE\");\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":31,"deletions":15,"binary":false,"changes":46,"status":"modified"}]}