{"files":[{"patch":"@@ -1520,2 +1520,2 @@\n-                                            getClassAccessFlagsRaw() :\n-                                            getModifiers(),\n+                                            getClassAccessFlagsRaw() & (~0x800) :\n+                                            getModifiers() & (~0x800), \/\/ suppress unspecified bit\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+            TestIdentityInterface.class,\n+            TestValueInterface.class,\n@@ -164,0 +166,12 @@\n+            \/\/ Verify IDENTITY, ABSTRACT, FINAL, and access mode\n+            Set<AccessFlag> expected = new HashSet<>(4);\n+            expected.add(AccessFlag.ABSTRACT);\n+            expected.add(AccessFlag.FINAL);\n+\/\/            expected.add(AccessFlag.IDENTITY);  \/\/ NYI Pending: JDK-8294866\n+            if (accessLevel != null)\n+                expected.add(accessLevel);\n+            if (!expected.equals(arrayClass.accessFlags())) {\n+                throw new RuntimeException(\"Unexpected access flags for array: \" + accessClass +\n+                        \": actual: \" + arrayClass.accessFlags() +\n+                        \", expected: \" + expected);\n+            }\n@@ -172,0 +186,1 @@\n+    \/\/ Include cases for classes with identity, value modifier, or no modifier.\n@@ -175,0 +190,5 @@\n+    @ExpectedClassFlags(\"[PUBLIC, STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n+    public      identity interface PublicIdentityInterface {}\n+    @ExpectedClassFlags(\"[PUBLIC, STATIC, VALUE, INTERFACE, ABSTRACT]\")\n+    public      value interface PublicValueInterface {}\n+\n@@ -177,0 +197,5 @@\n+    @ExpectedClassFlags(\"[PROTECTED, STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n+    protected   identity interface ProtectedIdentityInterface {}\n+    @ExpectedClassFlags(\"[PROTECTED, STATIC, VALUE, INTERFACE, ABSTRACT]\")\n+    protected   value interface ProtectedValueInterface {}\n+\n@@ -179,0 +204,5 @@\n+    @ExpectedClassFlags(\"[PRIVATE, STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n+    private     identity interface PrivateIdentityInterface {}\n+    @ExpectedClassFlags(\"[PRIVATE, STATIC, VALUE, INTERFACE, ABSTRACT]\")\n+    private     value interface PrivateValueInterface {}\n+\n@@ -181,0 +211,4 @@\n+    @ExpectedClassFlags(\"[STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n+    \/*package*\/ identity interface PackageIdentityInterface {}\n+    @ExpectedClassFlags(\"[STATIC, VALUE, INTERFACE, ABSTRACT]\")\n+    \/*package*\/ value interface PackageValueInterface {}\n@@ -184,0 +218,2 @@\n+    @ExpectedClassFlags(\"[FINAL, IDENTITY]\")\n+    \/*package*\/ final identity class TestFinalIdentityClass {}\n@@ -187,0 +223,2 @@\n+    @ExpectedClassFlags(\"[IDENTITY, ABSTRACT]\")\n+    \/*package*\/ abstract identity class TestAbstractIdentityClass {}\n@@ -209,0 +247,2 @@\n+    @ExpectedClassFlags(\"[PRIVATE, IDENTITY, ABSTRACT]\")\n+    private abstract identity class IdentityFoo {}\n@@ -212,0 +252,4 @@\n+    @ExpectedClassFlags(\"[STATIC, IDENTITY, INTERFACE, ABSTRACT]\")\n+    identity interface StaticTestIdentityInterface {}\n+    @ExpectedClassFlags(\"[STATIC, VALUE, INTERFACE, ABSTRACT]\")\n+    value interface StaticTestValueInterface {}\n@@ -222,0 +266,4 @@\n+@ExpectedClassFlags(\"[SUPER, IDENTITY, INTERFACE, ABSTRACT]\")\n+identity interface TestIdentityInterface {}\n+@ExpectedClassFlags(\"[VALUE, INTERFACE, ABSTRACT]\")\n+value interface TestValueInterface {}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -77,12 +78,12 @@\n-                {new Object(), true},\n-                {\"String\", true},\n-                {String.class, true},\n-                {Object.class, true},\n-                {new ValueType1(1), false},\n-                {new ValueType2(2), false},\n-                {new PrimitiveRecord(1, \"A\"), false},\n-                {new ValueRecord(1,\"B\"), false},\n-                {new int[0], true},  \/\/ arrays of primitive classes are identity objects\n-                {new Object[0], true},  \/\/ arrays of identity classes are identity objects\n-                {new String[0], true},  \/\/ arrays of identity classes are identity objects\n-                {new ValueType1[0], true},  \/\/ arrays of value classes are identity objects\n+                {new Object(), false, false},\n+                {\"String\", true, false},\n+                {String.class, true, false},\n+                {Object.class, true, false},\n+                {new ValueType1(1), false, true},\n+                {new ValueType2(2), false, true},\n+                {new PrimitiveRecord(1, \"A\"), false, true},\n+                {new ValueRecord(1,\"B\"), false, true},\n+                {new int[0], true, false},  \/\/ arrays of primitive classes are identity objects\n+                {new Object[0], true, false},  \/\/ arrays of identity classes are identity objects\n+                {new String[0], true, false},  \/\/ arrays of identity classes are identity objects\n+                {new ValueType1[0], true, false},  \/\/ arrays of value classes are identity objects\n@@ -93,3 +94,19 @@\n-    void identityTests(Object obj, boolean expected) {\n-        var actual = Objects.isIdentityObject(obj);\n-        assertEquals(expected, actual, \"Objects.isIdentityObject unexpected\");\n+    void identityTests(Object obj, boolean identityClass, boolean valueClass) {\n+        Class<?> clazz = obj.getClass();\n+\n+        if (clazz == Object.class) {\n+            assertTrue(Objects.isIdentityObject(obj), \"Objects.isIdentityObject()\");\n+        } else {\n+            assertEquals(Objects.isIdentityObject(obj), identityClass, \"Objects.isIdentityObject()\");\n+        }\n+\n+        assertEquals(clazz.isIdentity(), identityClass, \"Class.isIdentity()\");\n+\n+        assertEquals(clazz.isValue(), valueClass, \"Class.isValue()\");\n+\n+        \/\/ JDK-8294866: Not yet implemented checks of AccessFlags for the array class\n+\/\/        assertEquals(clazz.accessFlags().contains(AccessFlag.IDENTITY),\n+\/\/                identityClass, \"AccessFlag.IDENTITY\");\n+\/\/\n+\/\/        assertEquals(clazz.accessFlags().contains(AccessFlag.VALUE),\n+\/\/                valueClass, \"AccessFlag.VALUE\");\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":32,"deletions":15,"binary":false,"changes":47,"status":"modified"}]}