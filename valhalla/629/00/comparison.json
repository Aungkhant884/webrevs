{"files":[{"patch":"@@ -2344,1 +2344,1 @@\n-                          (tree.sym.owner.isDirectlyOrIndirectlyLocal() || tree.sym.owner.isInner() || tree.sym.owner.isPrimitiveClass()));\n+                          (tree.sym.owner.isDirectlyOrIndirectlyLocal() || tree.sym.owner.isInner() || tree.sym.owner.isValueClass()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281166\n+ * @summary javac should generate BSM to invoke the static factory for value class\n+ * @run main ConstructorRefTest\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+public class ConstructorRefTest {\n+\n+    public static value class V {\n+\n+        final int x;\n+        final int y;\n+\n+        V() {\n+            x = 1234;\n+            y = 5678;\n+        }\n+    }\n+\n+    public static primitive class P {\n+\n+        final int x;\n+        final int y;\n+\n+        P() {\n+            x = 1234;\n+            y = 5678;\n+        }\n+    }\n+\n+    public static void main(String [] args) {\n+\n+        Supplier<P.ref> sxp = P::new;\n+        P p = (P) sxp.get();\n+        if (p.x != 1234 || p.y != 5678)\n+            throw new AssertionError(p);\n+\n+        Supplier<V> sxv = V::new;\n+        V v = (V) sxv.get();\n+        if (v.x != 1234 || v.y != 5678)\n+            throw new AssertionError(v);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConstructorRefTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}