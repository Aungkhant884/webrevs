{"files":[{"patch":"@@ -41,1 +41,0 @@\n- * @compile -XDallowWithFieldOperator TestC1.java\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,3 @@\n- * @compile -XDallowWithFieldOperator TestDeoptimizationWhenBuffering.java\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver org.openjdk.asmtools.JtregDriver jasm -strict TestDeoptimizationWhenBufferingClasses.jasm\n@@ -77,29 +79,0 @@\n-final primitive class MyValue1 {\n-    static int cnt = 0;\n-    final int x;\n-    final MyValue2 vtField1;\n-    final MyValue2.ref vtField2;\n-\n-    public MyValue1() {\n-        this.x = ++cnt;\n-        this.vtField1 = new MyValue2();\n-        this.vtField2 = new MyValue2();\n-    }\n-\n-    public int hash() {\n-        return x + vtField1.x + vtField2.x;\n-    }\n-\n-    public MyValue1 testWithField(int x) {\n-        return __WithField(this.x, x);\n-    }\n-}\n-\n-final primitive class MyValue2 {\n-    static int cnt = 0;\n-    final int x;\n-    public MyValue2() {\n-        this.x = ++cnt;\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":3,"deletions":30,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public final primitive value class compiler\/valhalla\/inlinetypes\/MyValue1\n+    version 63:0\n+{\n+    static Field cnt:I;\n+    final Field x:I;\n+    final Field vtField1:\"Qcompiler\/valhalla\/inlinetypes\/MyValue2;\";\n+    final Field vtField2:\"Lcompiler\/valhalla\/inlinetypes\/MyValue2;\";\n+    \n+    public static Method <init>:\"()Qcompiler\/valhalla\/inlinetypes\/MyValue1;\" stack 2 {\n+        getstatic cnt:I;\n+        iconst_1;\n+        iadd;\n+        putstatic cnt:I;\n+        \n+        aconst_init compiler\/valhalla\/inlinetypes\/MyValue1;\n+        \n+        getstatic cnt:I;\n+        withfield x:I;\n+        \n+        invokestatic compiler\/valhalla\/inlinetypes\/MyValue2.<init>:\"()Qcompiler\/valhalla\/inlinetypes\/MyValue2;\";\n+        withfield vtField1:\"Qcompiler\/valhalla\/inlinetypes\/MyValue2;\";\n+        \n+        invokestatic compiler\/valhalla\/inlinetypes\/MyValue2.<init>:\"()Qcompiler\/valhalla\/inlinetypes\/MyValue2;\";\n+        withfield vtField2:\"Lcompiler\/valhalla\/inlinetypes\/MyValue2;\";\n+        \n+        areturn;\n+    }\n+\n+    public Method hash:\"()I\" stack 2 {\n+        aload_0;\n+        getfield x:I;\n+        \n+        aload_0;\n+        getfield vtField1:\"Qcompiler\/valhalla\/inlinetypes\/MyValue2;\";\n+        getfield compiler\/valhalla\/inlinetypes\/MyValue2.x:I;\n+        iadd;\n+        \n+        aload_0;\n+        getfield vtField2:\"Lcompiler\/valhalla\/inlinetypes\/MyValue2;\";\n+        getfield compiler\/valhalla\/inlinetypes\/MyValue2.x:I;\n+        iadd;\n+        \n+        ireturn;\n+    }\n+\n+    public Method testWithField:\"(I)Qcompiler\/valhalla\/inlinetypes\/MyValue1;\" stack 2 {\n+        aload_0;\n+        iload_1;\n+        withfield x:I;\n+        areturn;\n+    }\n+\n+}\n+\n+public final primitive value class compiler\/valhalla\/inlinetypes\/MyValue2\n+    version 63:0\n+{\n+    static Field cnt:I;\n+    final Field x:I;\n+    \n+    public static Method <init>:\"()Qcompiler\/valhalla\/inlinetypes\/MyValue2;\" stack 2 {\n+        getstatic cnt:I;\n+        iconst_1;\n+        iadd;\n+        putstatic cnt:I;\n+        \n+        aconst_init compiler\/valhalla\/inlinetypes\/MyValue2;\n+        \n+        getstatic cnt:I;\n+        withfield x:I;\n+        \n+        areturn;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBufferingClasses.jasm","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,2 @@\n- * @compile -XDallowWithFieldOperator TestWithfieldC1.java\n+ * @build org.openjdk.asmtools.* org.openjdk.asmtools.jasm.*\n+ * @run driver org.openjdk.asmtools.JtregDriver jasm -strict TestWithfieldC1Classes.jasm\n@@ -78,108 +79,0 @@\n-    static primitive class FooValue {\n-        public int x = 0, y = 0;\n-\n-        @ForceInline\n-        static FooValue test1() {\n-            FooValue v = FooValue.default;\n-\n-            v = __WithField(v.x, 1);\n-            v = __WithField(v.y, 1);\n-            foo_static = v;\n-\n-            v = __WithField(v.x, 2);\n-            v = __WithField(v.y, 2);\n-            return v;\n-        }\n-\n-        @ForceInline\n-        static FooValue test3() {\n-            FooValue v = FooValue.default;\n-\n-            v = __WithField(v.x, 1);\n-            v = __WithField(v.y, 1);\n-            set_foo_static_if_null(v);\n-\n-            v = __WithField(v.x, 2);\n-            v = __WithField(v.y, 2);\n-            return v;\n-        }\n-\n-        @ForceInline\n-        static FooValue test4() {\n-            FooValue v = FooValue.default;\n-            for (int i=1; i<=2; i++) {\n-                v = __WithField(v.x, i);\n-                v = __WithField(v.y, i);\n-                set_foo_static_if_null(v);\n-            }\n-\n-            return v;\n-        }\n-\n-        @ForceInline\n-        static FooValue test5() {\n-            FooValue v1 = FooValue.default;\n-            FooValue v2 = FooValue.default;\n-            v2 = v1;\n-\n-            v1 = __WithField(v1.x, 1);\n-            v1 = __WithField(v1.y, 1);\n-            set_foo_static_if_null(v1);\n-\n-            v2 = __WithField(v2.x, 2);\n-            v2 = __WithField(v2.y, 2);\n-\n-            return v2;\n-        }\n-\n-        @ForceInline\n-        static FooValue test6() {\n-            FooValue v = FooValue.default;\n-\n-            v = __WithField(v.x, 1);\n-            v = __WithField(v.y, 1);\n-            foo_static_arr[0] = v;\n-\n-            v = __WithField(v.x, 2);\n-            v = __WithField(v.y, 2);\n-            return v;\n-        }\n-\n-\n-        @ForceInline\n-        static FooValue test7() {\n-            FooValue v1 = FooValue.default;\n-            FooValue v2 = FooValue.default;\n-            v2 = v1;\n-\n-            v1 = __WithField(v1.x, 1);\n-            v1 = __WithField(v1.y, 1);\n-\n-            v2 = __WithField(v2.x, 2);\n-            v2 = __WithField(v2.y, 2);\n-\n-            return v1;\n-        }\n-\n-        @ForceInline\n-        static FooValue test8() {\n-            FooValue v1 = FooValue.default;\n-\n-            v1 = __WithField(v1.x, 1);\n-            v1 = __WithField(v1.y, 1);\n-\n-            v1.non_static_method();\n-\n-            v1 = __WithField(v1.x, 2);\n-            v1 = __WithField(v1.y, 2);\n-\n-            return v1;\n-        }\n-\n-\n-        @DontInline\n-        private void non_static_method() {\n-            set_foo_static_if_null(this);\n-        }\n-    }\n-\n@@ -208,9 +101,1 @@\n-        FooValue v = FooValue.default;\n-\n-        v = __WithField(v.x, 1);\n-        v = __WithField(v.y, 1);\n-        foo_instance = v;\n-\n-        v = __WithField(v.x, 2);\n-        v = __WithField(v.y, 2);\n-        return v;\n+        return FooValue.test2(this);\n@@ -313,15 +198,1 @@\n-        FooValue v = FooValue.default;\n-\n-        v = __WithField(v.x, 1);\n-        v = __WithField(v.y, 1);\n-\n-        FooValue v2 = v;\n-\n-        v = __WithField(v.x, 2);\n-        v = __WithField(v.y, 2);\n-\n-        v2 = __WithField(v2.x, 3);\n-        v2 = __WithField(v2.y, 3);\n-\n-        foo_instance = v2;\n-        return v;\n+        return FooValue.test9(this);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithfieldC1.java","additions":5,"deletions":134,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package compiler\/valhalla\/inlinetypes;\n+\n+public final primitive value class FooValue\n+    version 63:0\n+{\n+    public final Field x:I;\n+    public final Field y:I;\n+\n+    \/\/ escape with putstatic\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test1:\"()Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 2 locals 1 {\n+        aconst_init FooValue; astore_0;\n+        aload_0; iconst_1; withfield x:I; astore_0;\n+        aload_0; iconst_1; withfield y:I; astore_0;\n+        \n+        aload_0; putstatic TestWithfieldC1.foo_static:\"Lcompiler\/valhalla\/inlinetypes\/FooValue;\";\n+        \n+        aload_0; iconst_2; withfield x:I; astore_0;\n+        aload_0; iconst_2; withfield y:I; astore_0;\n+        \n+        aload_0; areturn;\n+    }\n+\n+    \/\/ escape with putfield\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test2:\"(Lcompiler\/valhalla\/inlinetypes\/TestWithfieldC1;)Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 2 locals 2 {\n+        aconst_init FooValue; astore_1;\n+        aload_1; iconst_1; withfield FooValue.x:I; astore_1;\n+        aload_1; iconst_1; withfield FooValue.y:I; astore_1;\n+        \n+        aload_0; aload_1; putfield TestWithfieldC1.foo_instance:\"Lcompiler\/valhalla\/inlinetypes\/FooValue;\";\n+        \n+        aload_1; iconst_2; withfield x:I; astore_1;\n+        aload_1; iconst_2; withfield y:I; astore_1;\n+        \n+        aload_1; areturn;\n+    }\n+\n+    \/\/ escape with function call\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test3:\"()Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 2 locals 1 {\n+        aconst_init FooValue; astore_0;\n+        aload_0; iconst_1; withfield x:I; astore_0;\n+        aload_0; iconst_1; withfield y:I; astore_0;\n+        \n+        aload_0; invokestatic TestWithfieldC1.set_foo_static_if_null:\"(Qcompiler\/valhalla\/inlinetypes\/FooValue;)V\";\n+        \n+        aload_0; iconst_2; withfield x:I; astore_0;\n+        aload_0; iconst_2; withfield y:I; astore_0;\n+        \n+        aload_0; areturn;\n+    }\n+\n+    \/\/ escape and then branch backwards\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test4:\"()Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 2 locals 2 {\n+        aconst_init FooValue; astore_0;\n+        iconst_1; istore_1;\n+        \n+        loop: stack_frame_type append; locals_map class \"Qcompiler\/valhalla\/inlinetypes\/FooValue;\", int;\n+            \/\/ iterate two times\n+            iload_1; iconst_2; if_icmpgt end;\n+            \n+            aload_0; iload_1; withfield x:I; astore_0;\n+            aload_0; iload_1; withfield y:I; astore_0;\n+            \n+            aload_0; invokestatic TestWithfieldC1.set_foo_static_if_null:\"(Qcompiler\/valhalla\/inlinetypes\/FooValue;)V\";\n+            \n+            iinc 1,1; goto loop;\n+        \n+        end: stack_frame_type same;\n+            aload_0; areturn;\n+    }\n+\n+    \/\/ escape using a different local variable\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test5:\"()Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 2 locals 2 {\n+        aconst_init FooValue; astore_0;\n+        aconst_init FooValue; astore_1;\n+        aload_0; astore_1;\n+        \n+        aload_0; iconst_1; withfield x:I; astore_0;\n+        aload_0; iconst_1; withfield y:I; astore_0;\n+        \n+        aload_0; invokestatic TestWithfieldC1.set_foo_static_if_null:\"(Qcompiler\/valhalla\/inlinetypes\/FooValue;)V\";\n+        \n+        aload_1; iconst_2; withfield x:I; astore_1;\n+        aload_1; iconst_2; withfield y:I; astore_1;\n+        \n+        aload_1; areturn;\n+    }\n+    \n+    \/\/ escape using aastore\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test6:\"()Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 3 locals 1 {\n+        aconst_init FooValue; astore_0;\n+        aload_0; iconst_1; withfield x:I; astore_0;\n+        aload_0; iconst_1; withfield y:I; astore_0;\n+        \n+        getstatic TestWithfieldC1.foo_static_arr:\"[Lcompiler\/valhalla\/inlinetypes\/FooValue;\";\n+        iconst_0; aload_0; aastore;\n+        \n+        aload_0; iconst_2; withfield x:I; astore_0;\n+        aload_0; iconst_2; withfield y:I; astore_0;\n+        \n+        aload_0; areturn;\n+    }\n+\n+    \/\/ Copying a value into different local slots -- disable withfield optimization\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test7:\"()Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 2 locals 2 {\n+        aconst_init FooValue; astore_0;\n+        aconst_init FooValue; astore_1;\n+        aload_0; astore_1;\n+        \n+        aload_0; iconst_1; withfield x:I; astore_0;\n+        aload_0; iconst_1; withfield y:I; astore_0;\n+        \n+        aload_1; iconst_2; withfield x:I; astore_1;\n+        aload_1; iconst_2; withfield y:I; astore_1;\n+        \n+        aload_0; areturn;\n+    }\n+\n+    \/\/ escape by invoking non-static method\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test8:\"()Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 2 locals 1 {\n+        aconst_init FooValue; astore_0;\n+        aload_0; iconst_1; withfield x:I; astore_0;\n+        aload_0; iconst_1; withfield y:I; astore_0;\n+        \n+        aload_0; invokevirtual non_static_method:\"()V\";\n+        \n+        aload_0; iconst_2; withfield x:I; astore_0;\n+        aload_0; iconst_2; withfield y:I; astore_0;\n+        \n+        aload_0; areturn;\n+    }\n+    \n+    @+compiler\/lib\/ir_framework\/DontInline{}\n+    private Method non_static_method:\"()V\" stack 1 {\n+        aload_0;\n+        invokestatic TestWithfieldC1.set_foo_static_if_null:\"(Qcompiler\/valhalla\/inlinetypes\/FooValue;)V\";\n+        return;\n+    }\n+    \n+    \/\/ duplicate reference with local variables\n+    @+compiler\/lib\/ir_framework\/ForceInline{}\n+    static Method test9:\"(Lcompiler\/valhalla\/inlinetypes\/TestWithfieldC1;)Qcompiler\/valhalla\/inlinetypes\/FooValue;\" stack 2 locals 3 {\n+        aconst_init FooValue; astore_1;\n+        aload_1; iconst_1; withfield x:I; astore_1;\n+        aload_1; iconst_1; withfield y:I; astore_1;\n+        \n+        aload_1; astore_2;\n+        \n+        aload_1; iconst_2; withfield x:I; astore_1;\n+        aload_1; iconst_2; withfield y:I; astore_1;\n+        \n+        aload_2; iconst_3; withfield x:I; astore_2;\n+        aload_2; iconst_3; withfield y:I; astore_2;\n+        \n+        aload_0; aload_2; putfield TestWithfieldC1.foo_instance:\"Lcompiler\/valhalla\/inlinetypes\/FooValue;\";\n+\n+        aload_1; areturn;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithfieldC1Classes.jasm","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"}]}