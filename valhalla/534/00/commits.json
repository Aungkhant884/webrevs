[{"commit":{"message":"8272566: [lworld] [AArch64] G1 write barrier slow path needs to save more registers\n\nWe call MacroAssembler::store_heap_oop() when packing inline type\narguments in C1's scalarised entry point and that in turn uses the\ninterpreter's barrier set assembler for the write barrier.  With G1GC\nthis can call into the runtime on the slow path, but it doesn't preserve\nthe call-clobbered registers, which include the Java argument registers.\n\nThis was fixed on x86 in JDK-8242210 and JDK-8251398 but I missed that\nwhen I updated the AArch64 port earlier in the year.  I haven't actually\nseen any failures caused by this, but from looking at the generated\nassembly it's certainly possible.\n\nThis patch saves only the argument registers, and only if Valhalla is\nenabled (unlike x86 which saves all registers unconditionally).  There\nare 32 caller-saved registers on AArch64 so I wanted to avoid generating\nmany additional store\/load instructions."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"}],"sha":"2054c0424cb9d3e28bc734f23da5d83acdf77caa"}]