{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\n@@ -32,1 +31,1 @@\n-* @run main\/othervm  runtime.valhalla.inlinetypes.ClassInitializationFailuresTest\n+* @run main runtime.valhalla.inlinetypes.ClassInitializationFailuresTest\n@@ -36,10 +35,10 @@\n-\n-  static boolean failingInitialization = true;\n-  static Object bo = null;\n-\n-  static primitive class BadOne {\n-    int i = 0;\n-    static {\n-      if (ClassInitializationFailuresTest.failingInitialization) {\n-        throw new RuntimeException(\"Failing initialization\");\n-      }\n+    static boolean failingInitialization = true;\n+    static Object bo = null;\n+\n+    static primitive class BadOne {\n+        int i = 0;\n+        static {\n+        if (ClassInitializationFailuresTest.failingInitialization) {\n+            throw new RuntimeException(\"Failing initialization\");\n+        }\n+        }\n@@ -47,1 +46,0 @@\n-  }\n@@ -49,30 +47,2 @@\n-  static primitive class TestClass1 {\n-    BadOne badField = new BadOne();\n-  }\n-\n-  \/\/ Test handling of errors during the initialization of a primitive class\n-  \/\/ Initialization of TestClass1 triggers the initialization of classes\n-  \/\/ of all its primitive class typed fields, in this case BadOne\n-  \/\/ Static initializer of BadOne throws an exception, so BadOne's initialization\n-  \/\/ fails, which must caused the initialization of TestClass1 to fail too\n-  \/\/ First attempt to instantiate TestClass1 must fail with an ExceptionInInitializerError\n-  \/\/ because an exception has been thrown during the initialization process\n-  \/\/ Second attempt to instantiate TestClass1 must fail with a NoClassDefFoundError\n-  \/\/ because TestClass1 must already be in a faile initialization state (so no new\n-  \/\/ attempt to initialize the class)\n-  static void testClassInitialization() {\n-    Throwable e = null;\n-    try {\n-      TestClass1 t1 = new TestClass1();\n-    } catch(Throwable t) {\n-      e = t;\n-    }\n-    Asserts.assertNotNull(e, \"Exception should have been thrown\");\n-    Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n-    Asserts.assertTrue(e.getCause().getClass() == RuntimeException.class, \"Must be the exception thown in the static initializer of BadOne\");\n-    \/\/ Second attempt because it doesn't fail the same way\n-    e = null;\n-    try {\n-      TestClass1 t1 = new TestClass1();\n-    } catch(Throwable t) {\n-      e = t;\n+    static primitive class TestClass1 {\n+        BadOne badField = new BadOne();\n@@ -80,4 +50,0 @@\n-    Asserts.assertNotNull(e, \"Error should have been thrown\");\n-    Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n-    Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n-  }\n@@ -85,6 +51,30 @@\n-  static primitive class BadTwo {\n-    int i = 0;\n-    static {\n-      if (ClassInitializationFailuresTest.failingInitialization) {\n-        throw new RuntimeException(\"Failing initialization\");\n-      }\n+    \/\/ Test handling of errors during the initialization of a primitive class\n+    \/\/ Initialization of TestClass1 triggers the initialization of classes\n+    \/\/ of all its primitive class typed fields, in this case BadOne\n+    \/\/ Static initializer of BadOne throws an exception, so BadOne's initialization\n+    \/\/ fails, which must caused the initialization of TestClass1 to fail too\n+    \/\/ First attempt to instantiate TestClass1 must fail with an ExceptionInInitializerError\n+    \/\/ because an exception has been thrown during the initialization process\n+    \/\/ Second attempt to instantiate TestClass1 must fail with a NoClassDefFoundError\n+    \/\/ because TestClass1 must already be in a failed initialization state (so no new\n+    \/\/ attempt to initialize the class)\n+    static void testClassInitialization() {\n+        Throwable e = null;\n+        try {\n+        TestClass1 t1 = new TestClass1();\n+        } catch(Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Exception should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n+        Asserts.assertTrue(e.getCause().getClass() == RuntimeException.class, \"Must be the exception thown in the static initializer of BadOne\");\n+        \/\/ Second attempt because it doesn't fail the same way\n+        e = null;\n+        try {\n+        TestClass1 t1 = new TestClass1();\n+        } catch(Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n+        Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n@@ -92,1 +82,0 @@\n-  }\n@@ -94,6 +83,7 @@\n-  static primitive class BadThree {\n-    int i = 0;\n-    static {\n-      if (ClassInitializationFailuresTest.failingInitialization) {\n-        throw new RuntimeException(\"Failing initialization\");\n-      }\n+    static primitive class BadTwo {\n+        int i = 0;\n+        static {\n+        if (ClassInitializationFailuresTest.failingInitialization) {\n+            throw new RuntimeException(\"Failing initialization\");\n+        }\n+        }\n@@ -101,1 +91,0 @@\n-  }\n@@ -103,16 +92,7 @@\n-  \/\/ Same test as above, but for arrays of primitive objects\n-  static void testArrayInitialization() {\n-    \/\/ Testing anewarray when the primitive element class fails to initialize properly\n-    Throwable e = null;\n-    try {\n-      BadTwo[] array = new BadTwo[10];\n-    } catch(Throwable t) {\n-      e = t;\n-    }\n-    Asserts.assertNotNull(e, \"Error should have been thrown\");\n-    Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \" Must be an ExceptionInInitializerError\");\n-    \/\/ Second attempt because it doesn't fail the same way\n-    try {\n-      BadTwo[] array = new BadTwo[10];\n-    } catch(Throwable t) {\n-      e = t;\n+    static primitive class BadThree {\n+        int i = 0;\n+        static {\n+        if (ClassInitializationFailuresTest.failingInitialization) {\n+            throw new RuntimeException(\"Failing initialization\");\n+        }\n+        }\n@@ -120,21 +100,0 @@\n-    Asserts.assertNotNull(e, \"Error should have been thrown\");\n-    Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n-    Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n-    \/\/ Testing multianewarray when the primitive element class fails to initialize properly\n-    try {\n-      BadThree[][] array = new BadThree[10][20];\n-    } catch(Throwable t) {\n-      e = t;\n-    }\n-    Asserts.assertNotNull(e, \"Error should have been thrown\");\n-    Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \" Must be an ExceptionInInitializerError\");\n-    \/\/ Second attempt because it doesn't fail the same way\n-    try {\n-      BadThree[][][] array = new BadThree[10][30][10];\n-    } catch(Throwable t) {\n-      e = t;\n-    }\n-    Asserts.assertNotNull(e, \"Error should have been thrown\");\n-    Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n-    Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n-  }\n@@ -142,8 +101,37 @@\n-  static primitive class BadFour {\n-    int i = 0;\n-    static BadFour[] array;\n-    static {\n-      array = new BadFour[10];\n-      if (ClassInitializationFailuresTest.failingInitialization) {\n-        throw new RuntimeException(\"Failing initialization\");\n-      }\n+    \/\/ Same test as above, but for arrays of primitive objects\n+    static void testArrayInitialization() {\n+        \/\/ Testing anewarray when the primitive element class fails to initialize properly\n+        Throwable e = null;\n+        try {\n+        BadTwo[] array = new BadTwo[10];\n+        } catch(Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \" Must be an ExceptionInInitializerError\");\n+        \/\/ Second attempt because it doesn't fail the same way\n+        try {\n+        BadTwo[] array = new BadTwo[10];\n+        } catch(Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n+        Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n+        \/\/ Testing multianewarray when the primitive element class fails to initialize properly\n+        try {\n+        BadThree[][] array = new BadThree[10][20];\n+        } catch(Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \" Must be an ExceptionInInitializerError\");\n+        \/\/ Second attempt because it doesn't fail the same way\n+        try {\n+        BadThree[][][] array = new BadThree[10][30][10];\n+        } catch(Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n+        Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n@@ -151,1 +139,0 @@\n-  }\n@@ -153,18 +140,9 @@\n-  \/\/ Even if a primitive class fails to initialize property, some instances\n-  \/\/ of this class can escape and be accessible. The JVM must be able to\n-  \/\/ deal with those instances without crashes. The test below checks that\n-  \/\/ escaped values stored in an array are handled correctly\n-  static void testEscapedValueInArray() {\n-    Throwable e = null;\n-    try {\n-      BadFour bt = new BadFour();\n-    } catch (Throwable t) {\n-      e = t;\n-    }\n-    Asserts.assertNotNull(e, \"Error must have been thrown\");\n-    Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \" Must be an ExceptionInInitializerError\");\n-    e = null;\n-    try {\n-      BadFour t = BadFour.array[0];\n-    } catch(Throwable t) {\n-      e = t;\n+    static primitive class BadFour {\n+        int i = 0;\n+        static BadFour[] array;\n+        static {\n+        array = new BadFour[10];\n+        if (ClassInitializationFailuresTest.failingInitialization) {\n+            throw new RuntimeException(\"Failing initialization\");\n+        }\n+        }\n@@ -172,4 +150,0 @@\n-    Asserts.assertNotNull(e, \"Error should have been thrown\");\n-    Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n-    Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n-  }\n@@ -177,7 +151,22 @@\n-  static primitive class BadFive {\n-    int i = 0;\n-    static {\n-      ClassInitializationFailuresTest.bo = new BadSix();\n-      if (ClassInitializationFailuresTest.failingInitialization) {\n-        throw new RuntimeException(\"Failing initialization\");\n-      }\n+    \/\/ Even if a primitive class fails to initialize properly, some instances\n+    \/\/ of this class can escape and be accessible. The JVM must be able to\n+    \/\/ deal with those instances without crashes. The test below checks that\n+    \/\/ escaped values stored in an array are handled correctly\n+    static void testEscapedValueInArray() {\n+        Throwable e = null;\n+        try {\n+        BadFour bt = new BadFour();\n+        } catch (Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error must have been thrown\");\n+        Asserts.assertTrue(e.getClass() == ExceptionInInitializerError.class, \" Must be an ExceptionInInitializerError\");\n+        e = null;\n+        try {\n+        BadFour t = BadFour.array[0];\n+        } catch(Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error should have been thrown\");\n+        Asserts.assertTrue(e.getClass() == NoClassDefFoundError.class, \"Must be a NoClassDefFoundError\");\n+        Asserts.assertTrue(e.getCause().getClass() == ExceptionInInitializerError.class, \"Must be an ExceptionInInitializerError\");\n@@ -185,1 +174,0 @@\n-  }\n@@ -187,3 +175,9 @@\n-  static class BadSix {\n-    BadFive bf = new BadFive();\n-  }\n+    static primitive class BadFive {\n+        int i = 0;\n+        static {\n+        ClassInitializationFailuresTest.bo = new BadSix();\n+        if (ClassInitializationFailuresTest.failingInitialization) {\n+            throw new RuntimeException(\"Failing initialization\");\n+        }\n+        }\n+    }\n@@ -191,7 +185,2 @@\n-  \/\/ Same test as above, but escaped values are stored in an object\n-  static void testEscapedValueInObject() {\n-    Throwable e = null;\n-    try {\n-      BadSix bt = new BadSix();\n-    } catch (Throwable t) {\n-      e = t;\n+    static class BadSix {\n+        BadFive bf = new BadFive();\n@@ -199,4 +188,0 @@\n-    Asserts.assertNotNull(e, \"Error must have been thrown\");\n-    Asserts.assertNotNull(ClassInitializationFailuresTest.bo, \"bo object should have been set\");\n-    BadFive bf = ((BadSix)ClassInitializationFailuresTest.bo).bf;\n-  }\n@@ -204,6 +189,12 @@\n-  public static void main(String[] args) {\n-    testClassInitialization();\n-    testArrayInitialization();\n-    testEscapedValueInArray();\n-    testEscapedValueInObject();\n-  }\n+    \/\/ Same test as above, but escaped values are stored in an object\n+    static void testEscapedValueInObject() {\n+        Throwable e = null;\n+        try {\n+        BadSix bt = new BadSix();\n+        } catch (Throwable t) {\n+        e = t;\n+        }\n+        Asserts.assertNotNull(e, \"Error must have been thrown\");\n+        Asserts.assertNotNull(ClassInitializationFailuresTest.bo, \"bo object should have been set\");\n+        BadFive bf = ((BadSix)ClassInitializationFailuresTest.bo).bf;\n+    }\n@@ -211,0 +202,6 @@\n+    public static void main(String[] args) {\n+        testClassInitialization();\n+        testArrayInitialization();\n+        testEscapedValueInArray();\n+        testEscapedValueInObject();\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassInitializationFailuresTest.java","additions":155,"deletions":158,"binary":false,"changes":313,"status":"modified"}]}