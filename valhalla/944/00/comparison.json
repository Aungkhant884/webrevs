{"files":[{"patch":"@@ -2000,2 +2000,2 @@\n-InlineTypeNode* PhiNode::push_inline_types_through(PhaseGVN* phase, bool can_reshape, ciInlineKlass* vk, bool is_init) {\n-  InlineTypeNode* vt = InlineTypeNode::make_null(*phase, vk)->clone_with_phis(phase, in(0), is_init);\n+InlineTypeNode* PhiNode::push_inline_types_through(PhaseGVN* phase, bool can_reshape, ciInlineKlass* vk) {\n+  InlineTypeNode* vt = InlineTypeNode::make_null(*phase, vk)->clone_with_phis(phase, in(0), !_type->maybe_null());\n@@ -2027,1 +2027,1 @@\n-      n = phase->transform(n->as_Phi()->push_inline_types_through(phase, can_reshape, vk, is_init));\n+      n = phase->transform(n->as_Phi()->push_inline_types_through(phase, can_reshape, vk));\n@@ -2597,2 +2597,0 @@\n-    \/\/ true if all IsInit inputs of all InlineType* nodes are true\n-    bool is_init = true;\n@@ -2636,3 +2634,0 @@\n-          if (phase->find_int_con(n->as_InlineType()->get_is_init(), 0) != 1) {\n-            is_init = false;\n-          }\n@@ -2641,3 +2636,1 @@\n-        } else if (t->is_zero_type()) {\n-          is_init = false;\n-        } else {\n+        } else if (!t->is_zero_type()) {\n@@ -2657,3 +2650,1 @@\n-\/\/ TODO 8302217\n-\/\/      assert(!_type->isa_ptr() || _type->maybe_null() || is_init, \"Phi not null but a possible null was seen\");\n-      return push_inline_types_through(phase, can_reshape, vk, is_init);\n+      return push_inline_types_through(phase, can_reshape, vk);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-  InlineTypeNode* push_inline_types_through(PhaseGVN* phase, bool can_reshape, ciInlineKlass* vk, bool is_init);\n+  InlineTypeNode* push_inline_types_through(PhaseGVN* phase, bool can_reshape, ciInlineKlass* vk);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}