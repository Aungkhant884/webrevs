{"files":[{"patch":"@@ -54,0 +54,1 @@\n+@jdk.internal.ValueBased\n@@ -101,1 +102,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -121,1 +122,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Boolean.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+@jdk.internal.ValueBased\n@@ -340,1 +341,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -363,1 +364,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -132,0 +132,1 @@\n+@jdk.internal.ValueBased\n@@ -8504,1 +8505,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+@jdk.internal.ValueBased\n@@ -608,1 +609,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -629,1 +630,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+@jdk.internal.ValueBased\n@@ -521,1 +522,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -537,1 +538,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -558,1 +559,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+@jdk.internal.ValueBased\n@@ -1088,1 +1089,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -1110,1 +1111,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+@jdk.internal.ValueBased\n@@ -1319,1 +1320,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -1342,1 +1343,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandle.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandleImpl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -952,0 +952,1 @@\n+    @jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+@jdk.internal.ValueBased\n@@ -345,1 +346,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n@@ -368,1 +369,1 @@\n-    @Deprecated(since=\"9\")\n+    @Deprecated(since=\"9\", forRemoval = true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -776,1 +776,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Duration.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -207,0 +207,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -135,0 +135,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDateTime.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -125,0 +125,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalTime.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -127,0 +127,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/MonthDay.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -118,0 +118,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetTime.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Period.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -135,0 +135,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Year.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/YearMonth.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -178,0 +178,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneId.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -164,0 +164,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -119,0 +119,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahDate.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseDate.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/MinguoDate.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-import java.util.Arrays;\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistChronology.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ThaiBuddhistDate.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n- * This is immutable and thread-safe enum.\n+ * This is an immutable and thread-safe enum.\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/TextStyle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/KeyValueHolder.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/Optional.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalDouble.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalInt.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/OptionalLong.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+\n+\/**\n+ * Indicates the API declaration in question is associated with a Value Based class.\n+ * References to <a href=\"..\/lang\/doc-files\/ValueBased.html\">value-based classes<\/a>\n+ * should produce warnings about behavior that is inconsistent with value based semantics.\n+ *\n+ * @since 16\n+ *\/\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(value={TYPE})\n+public @interface ValueBased {\n+}\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ValueBased.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -261,1 +261,4 @@\n-            Object $result = ref.invoke(this, $method_fetchNotifications_7, new java.lang.Object[]{new java.lang.Long($param_long_1), new java.lang.Integer($param_int_2), new java.lang.Long($param_long_3)}, -5037523307973544478L);\n+            Object $result = ref.invoke(this, $method_fetchNotifications_7,\n+                    new java.lang.Object[]{java.lang.Long.valueOf($param_long_1),\n+                            java.lang.Integer.valueOf($param_int_2),\n+                            java.lang.Long.valueOf($param_long_3)}, -5037523307973544478L);\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnectionImpl_Stub.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4016,1 +4016,2 @@\n-                reportSchemaError(\"src-redefine.7.1\", new Object []{new Integer(attGroupRefsCount)}, child);\n+                reportSchemaError(\"src-redefine.7.1\",\n+                        new Object []{Integer.valueOf(attGroupRefsCount)}, child);\n@@ -4032,1 +4033,1 @@\n-                reportSchemaError(\"src-redefine.6.1.1\", new Object []{new Integer(groupRefsCount)}, child);\n+                reportSchemaError(\"src-redefine.6.1.1\", new Object []{Integer.valueOf(groupRefsCount)}, child);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/traversers\/XSDHandler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -441,2 +441,2 @@\n-            _byName.put( name, new Integer( value ) );\n-            _byChar.put( new Integer( value ), name );\n+            _byName.put( name, Integer.valueOf( value ) );\n+            _byChar.put( Integer.valueOf( value ), name );\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serialize\/HTMLdtd.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+            values.add(LintCategory.SYNCHRONIZATION);\n@@ -285,0 +286,5 @@\n+        \/**\n+         * Warn about synchronization attempts on instances of @ValueBased classes.\n+         *\/\n+        SYNCHRONIZATION(\"synchronization\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -223,0 +223,1 @@\n+    public final Type valueBasedType;\n@@ -587,0 +588,1 @@\n+        valueBasedType = enterClass(\"jdk.internal.ValueBased\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1738,0 +1738,3 @@\n+        if (env.info.lint.isEnabled(LintCategory.SYNCHRONIZATION) && isValueBased(tree.lock.type)) {\n+            log.warning(LintCategory.SYNCHRONIZATION, tree.pos(), Warnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+        }\n@@ -1741,0 +1744,12 @@\n+        \/\/ where\n+        private boolean isValueBased(Type t) {\n+            if (t != null && t.tsym != null) {\n+                for (Attribute.Compound a: t.tsym.getDeclarationAttributes()) {\n+                    if (a.type.tsym == syms.valueBasedType.tsym) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3739,0 +3739,4 @@\n+\n+compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class=\\\n+    attempt to synchronize on an instance of a value-based class\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-    Warn about potentially unsafe vararg methods\n+    Warn about potentially unsafe vararg methods.\n@@ -262,1 +262,4 @@\n-    Warn about use of preview language features\n+    Warn about use of preview language features.\n+\n+javac.opt.Xlint.desc.synchronization=\\\n+    Warn about synchronization attempts on instances of value-based classes.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/jdk.internal.vm.compiler.collections.test\/src\/jdk\/internal\/vm\/compiler\/collections\/test\/EconomicMapImplTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/jdk.internal.vm.compiler.collections.test\/src\/jdk\/internal\/vm\/compiler\/collections\/test\/EconomicSetTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n@@ -92,1 +92,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n@@ -116,1 +116,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n@@ -338,1 +338,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core.test\/src\/org\/graalvm\/compiler\/core\/test\/ea\/EscapeAnalysisTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -56,1 +56,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -68,1 +68,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -80,1 +80,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -91,1 +91,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -103,1 +103,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -136,1 +136,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -151,1 +151,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -168,1 +168,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -186,1 +186,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -202,1 +202,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -223,1 +223,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -242,1 +242,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core.test\/src\/org\/graalvm\/compiler\/core\/test\/ea\/PEAAssertionsTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    @SuppressWarnings(\"deprecation\")\n+    @SuppressWarnings({\"deprecation\", \"removal\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core.test\/src\/org\/graalvm\/compiler\/core\/test\/ea\/PartialEscapeAnalysisTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n@@ -145,1 +145,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core.test\/src\/org\/graalvm\/compiler\/core\/test\/tutorial\/StaticAnalysisTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-                sentinel = type.cast(new Boolean(false));\n+                sentinel = type.cast(false);\n@@ -391,1 +391,1 @@\n-                sentinel = type.cast(new Byte((byte) 123));\n+                sentinel = type.cast((byte) 123);\n@@ -393,1 +393,1 @@\n-                sentinel = type.cast(new Integer(1234567890));\n+                sentinel = type.cast(1234567890);\n@@ -395,1 +395,1 @@\n-                sentinel = type.cast(new Long(1234567890987654321L));\n+                sentinel = type.cast(1234567890987654321L);\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/GraalHotSpotVMConfigAccess.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    @SuppressWarnings({\"deprecation\", \"unused\"})\n+    @SuppressWarnings({\"deprecation\", \"removal\", \"unused\"})\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.jtt\/src\/org\/graalvm\/compiler\/jtt\/hotpath\/HP_allocate02.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.List;\n+\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @bug 8252180\n+ * @summary Test the primitive wrappers constructors are deprecated for removal\n+ * @run testng WrappersTest\n+ *\/\n+\n+@Test\n+public class WrappersTest {\n+\n+    @Test\n+    void checkForDeprecated() {\n+        List<Class<?>> classes =\n+                List.of(Byte.class,\n+                        Short.class,\n+                        Integer.class,\n+                        Long.class,\n+                        Float.class,\n+                        Double.class,\n+                        Character.class,\n+                        Boolean.class);\n+        for (Class<?> cl : classes) {\n+            for (Constructor<?> cons : cl.getConstructors()) {\n+                Deprecated dep = cons.getAnnotation(Deprecated.class);\n+                assertNotNull(dep, \"Missing @Deprecated annotation\");\n+                System.out.println(cons + \": \" + dep);\n+                assertTrue(dep.forRemoval(), cl.toString() + \" deprecated for removal: \");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/WrappersTest.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+\/\/ options: -Xlint:synchronization\n+\n+class AttemptToSynchronizeOnInstanceOfVbc {\n+    void foo(Integer i) {\n+        synchronized(i) {\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AttemptToSynchronizeOnInstanceOfVbc.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint ExternalAbuseOfVbc.java\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:all ExternalAbuseOfVbc.java\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:synchronization ExternalAbuseOfVbc.java\n+ * @compile\/ref=LintModeOffAbuseOfVbc.out -XDrawDiagnostics -Werror -Xlint:-synchronization ExternalAbuseOfVbc.java\n+ *\/\n+\n+public final class ExternalAbuseOfVbc {\n+\n+    final Integer val = Integer.valueOf(42);\n+    final String ref = \"String\";\n+\n+    void abuseVbc() {\n+        synchronized(ref) {      \/\/ OK\n+            synchronized (val) { \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+ExternalAbuseOfVbc.java:18:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+1 error\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8254274\n+ * @summary lint should warn when an instance of a value based class is synchronized upon\n+ * @compile\/fail\/ref=JdkInternalAbuseOfVbc.out --patch-module java.base=${test.src} -XDrawDiagnostics -Werror -Xlint SomeVbc.java JdkInternalAbuseOfVbc.java\n+ *\/\n+\n+package java.lang;\n+\n+public final class JdkInternalAbuseOfVbc {\n+\n+    public JdkInternalAbuseOfVbc() {}\n+\n+    void abuseVbc(SomeVbc vbc) {\n+\n+        synchronized(this) {           \/\/ OK\n+            synchronized (vbc) {       \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/JdkInternalAbuseOfVbc.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+SomeVbc.java:38:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+- compiler.err.warnings.and.werror\n+SomeVbc.java:49:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+JdkInternalAbuseOfVbc.java:17:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+1 error\n+3 warnings\n","filename":"test\/langtools\/tools\/javac\/lint\/JdkInternalAbuseOfVbc.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/lint\/LintModeOffAbuseOfVbc.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+@jdk.internal.ValueBased\n+public final class SomeVbc {\n+\n+    public SomeVbc() {}\n+\n+    final String ref = \"String\";\n+\n+    void abuseVbc() {\n+\n+        synchronized(ref) {           \/\/ OK\n+            synchronized (this) {     \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n+final class AuxilliaryAbuseOfVbc {\n+\n+    void abuseVbc(SomeVbc vbc) {\n+\n+        synchronized(this) {           \/\/ OK\n+            synchronized (vbc) {       \/\/ WARN\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/langtools\/tools\/javac\/lint\/SomeVbc.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}