{"files":[{"patch":"@@ -4789,2 +4789,0 @@\n-  assert(supports_inline_types() || !is_value_class, \"JVM_ACC_VALUE should not be set\");\n-  assert(supports_inline_types() || !is_primitive_class, \"JVM_ACC_PRIMITIVE should not be set\");\n@@ -4835,1 +4833,1 @@\n-      (is_interface && major_gte_1_5 && ((is_super && !supports_inline_types()) || is_enum)) ||   \/\/  ACC_SUPER (now ACC_IDENTITY) was illegal for interfaces\n+      (is_interface && major_gte_1_5 && ((is_super && (!EnableValhalla || !supports_inline_types())) || is_enum)) ||   \/\/  ACC_SUPER (now ACC_IDENTITY) was illegal for interfaces\n@@ -4839,2 +4837,2 @@\n-      (supports_inline_types() && !is_module && !is_abstract && !is_Object && !(is_identity_class || is_value_class) && !is_inner_class) ||\n-      (supports_inline_types() && is_primitive_class && (!is_value_class || !is_final || is_interface || is_abstract))) {\n+      (EnableValhalla && supports_inline_types() && !is_module && !is_abstract && !is_Object && !(is_identity_class || is_value_class) && !is_inner_class) ||\n+      (EnablePrimitiveClasses && supports_inline_types() && is_primitive_class && (!is_value_class || !is_final || is_interface || is_abstract))) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-        TestCommon.run(\"-Xint\", \"-cp\", appJar,  mainClass)\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-Xint\", \"-cp\", appJar,  mainClass)\n@@ -51,1 +52,2 @@\n-        TestCommon.run(\"-cp\", appJar,  mainClass)\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-cp\", appJar,  mainClass)\n@@ -56,1 +58,2 @@\n-        TestCommon.run(\"-Xcomp\", compFlag,\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-Xcomp\", compFlag,\n@@ -60,1 +63,2 @@\n-        TestCommon.run(\"-Xcomp\", compFlag,\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-Xcomp\", compFlag,\n@@ -67,1 +71,2 @@\n-        TestCommon.run(\"-Xcomp\", compFlag,\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-Xcomp\", compFlag,\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/HelloInlineClassTest.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+                    \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        TestCommon.dumpBaseArchive(baseArchiveName, unlockArg, logArg)\n+        TestCommon.dumpBaseArchive(baseArchiveName, \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", unlockArg, logArg)\n@@ -101,0 +101,1 @@\n+              \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -112,0 +113,1 @@\n+             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveRelocationTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. HelloDynamicInlineClass\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. HelloDynamicInlineClass\n@@ -63,0 +63,2 @@\n+             \"-XX:+EnableValhalla\",\n+             \"-XX:+EnablePrimitiveClasses\",\n@@ -70,0 +72,2 @@\n+            \"-XX:+EnableValhalla\",\n+            \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicInlineClass.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+        } catch (Throwable t) {\n+            throw new RuntimeException( \"Wrong Exeception, message: \" + t.getMessage(), t);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/BadACCValue.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}