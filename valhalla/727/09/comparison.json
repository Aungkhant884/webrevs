{"files":[{"patch":"@@ -1171,1 +1171,1 @@\n-  if (EnableValhalla) {\n+  if (EnablePrimitiveClasses) {\n@@ -1188,1 +1188,1 @@\n-  if (EnableValhalla) {\n+  if (UseFlatArray) {\n@@ -2612,1 +2612,1 @@\n-  if (!EnableValhalla) {\n+  if (!EnablePrimitiveClasses) {\n@@ -2920,1 +2920,1 @@\n-     if (!EnableValhalla) {\n+     if (!EnablePrimitiveClasses) {\n@@ -3920,1 +3920,1 @@\n-  if (EnableValhalla) {\n+  if (EnablePrimitiveClasses) {\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1189,1 +1189,1 @@\n-  if (EnableValhalla) {\n+  if (EnablePrimitiveClasses) {\n@@ -1205,1 +1205,1 @@\n-  if (EnableValhalla) {\n+  if (UseFlatArray) {\n@@ -2981,1 +2981,1 @@\n-  if (!EnableValhalla) {\n+  if (!EnablePrimitiveClasses) {\n@@ -2992,5 +2992,10 @@\n-      if (EnableValhalla) {\n-        Label is_null_free_inline_type, uninitialized;\n-        \/\/ Issue below if the static field has not been initialized yet\n-        __ test_field_is_null_free_inline_type(flags2, rscratch1, is_null_free_inline_type);\n-          \/\/ field is not a null free inline type\n+      Label is_null_free_inline_type, uninitialized;\n+      \/\/ Issue below if the static field has not been initialized yet\n+      __ test_field_is_null_free_inline_type(flags2, rscratch1, is_null_free_inline_type);\n+        \/\/ field is not a null free inline type\n+        __ push(atos);\n+        __ jmp(Done);\n+      \/\/ field is a null free inline type, must not return null even if uninitialized\n+      __ bind(is_null_free_inline_type);\n+          __ testptr(rax, rax);\n+        __ jcc(Assembler::zero, uninitialized);\n@@ -2999,21 +3004,15 @@\n-        \/\/ field is a null free inline type, must not return null even if uninitialized\n-        __ bind(is_null_free_inline_type);\n-           __ testptr(rax, rax);\n-          __ jcc(Assembler::zero, uninitialized);\n-            __ push(atos);\n-            __ jmp(Done);\n-          __ bind(uninitialized);\n-            __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n-  #ifdef _LP64\n-            Label slow_case, finish;\n-            __ movptr(rbx, Address(obj, java_lang_Class::klass_offset()));\n-            __ cmpb(Address(rbx, InstanceKlass::init_state_offset()), InstanceKlass::fully_initialized);\n-            __ jcc(Assembler::notEqual, slow_case);\n-          __ get_default_value_oop(rbx, rscratch1, rax);\n-          __ jmp(finish);\n-          __ bind(slow_case);\n-  #endif \/\/ LP64\n-            __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_inline_type_field),\n-                  obj, flags2);\n-  #ifdef _LP64\n-            __ bind(finish);\n+        __ bind(uninitialized);\n+          __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n+#ifdef _LP64\n+          Label slow_case, finish;\n+          __ movptr(rbx, Address(obj, java_lang_Class::klass_offset()));\n+          __ cmpb(Address(rbx, InstanceKlass::init_state_offset()), InstanceKlass::fully_initialized);\n+          __ jcc(Assembler::notEqual, slow_case);\n+        __ get_default_value_oop(rbx, rscratch1, rax);\n+        __ jmp(finish);\n+        __ bind(slow_case);\n+#endif \/\/ LP64\n+          __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_inline_type_field),\n+                obj, flags2);\n+#ifdef _LP64\n+          __ bind(finish);\n@@ -3021,1 +3020,0 @@\n-      }\n@@ -3027,3 +3025,1 @@\n-      if (EnableValhalla) {\n-        __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n-      }\n+      __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n@@ -3038,20 +3034,10 @@\n-      if (EnableValhalla) {\n-        __ bind(is_inline_type);\n-          __ test_field_is_inlined(flags2, rscratch1, is_inlined);\n-            \/\/ field is not inlined\n-            __ movptr(rax, rcx);  \/\/ small dance required to preserve the klass_holder somewhere\n-            pop_and_check_object(obj);\n-            __ push(rax);\n-            __ load_heap_oop(rax, field);\n-            __ pop(rcx);\n-            __ testptr(rax, rax);\n-            __ jcc(Assembler::notZero, nonnull);\n-              __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n-              __ get_inline_type_field_klass(rcx, flags2, rbx);\n-              __ get_default_value_oop(rbx, rcx, rax);\n-            __ bind(nonnull);\n-            __ verify_oop(rax);\n-            __ push(atos);\n-            __ jmp(rewrite_inline);\n-          __ bind(is_inlined);\n-          \/\/ field is inlined\n+      __ bind(is_inline_type);\n+        __ test_field_is_inlined(flags2, rscratch1, is_inlined);\n+          \/\/ field is not inlined\n+          __ movptr(rax, rcx);  \/\/ small dance required to preserve the klass_holder somewhere\n+          pop_and_check_object(obj);\n+          __ push(rax);\n+          __ load_heap_oop(rax, field);\n+          __ pop(rcx);\n+          __ testptr(rax, rax);\n+          __ jcc(Assembler::notZero, nonnull);\n@@ -3059,9 +3045,16 @@\n-            pop_and_check_object(rax);\n-            __ read_inlined_field(rcx, flags2, rbx, rax);\n-            __ verify_oop(rax);\n-            __ push(atos);\n-        __ bind(rewrite_inline);\n-        if (rc == may_rewrite) {\n-          patch_bytecode(Bytecodes::_fast_qgetfield, bc, rbx);\n-        }\n-        __ jmp(Done);\n+            __ get_inline_type_field_klass(rcx, flags2, rbx);\n+            __ get_default_value_oop(rbx, rcx, rax);\n+          __ bind(nonnull);\n+          __ verify_oop(rax);\n+          __ push(atos);\n+          __ jmp(rewrite_inline);\n+        __ bind(is_inlined);\n+        \/\/ field is inlined\n+          __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);\n+          pop_and_check_object(rax);\n+          __ read_inlined_field(rcx, flags2, rbx, rax);\n+          __ verify_oop(rax);\n+          __ push(atos);\n+      __ bind(rewrite_inline);\n+      if (rc == may_rewrite) {\n+        patch_bytecode(Bytecodes::_fast_qgetfield, bc, rbx);\n@@ -3069,0 +3062,1 @@\n+        __ jmp(Done);\n@@ -3374,1 +3368,1 @@\n-    if (!EnableValhalla) {\n+    if (!EnablePrimitiveClasses) {\n@@ -3387,5 +3381,3 @@\n-        if (EnableValhalla) {\n-          __ test_field_is_not_null_free_inline_type(flags2, rscratch1, is_inline_type);\n-          __ null_check(rax);\n-          __ bind(is_inline_type);\n-        }\n+        __ test_field_is_not_null_free_inline_type(flags2, rscratch1, is_inline_type);\n+        __ null_check(rax);\n+        __ bind(is_inline_type);\n@@ -3396,3 +3388,1 @@\n-        if (EnableValhalla) {\n-          __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n-        }\n+        __ test_field_is_null_free_inline_type(flags2, rscratch1, is_inline_type);\n@@ -3408,23 +3398,20 @@\n-        if (EnableValhalla) {\n-          \/\/ Implementation of the inline type semantic\n-          __ bind(is_inline_type);\n-          __ null_check(rax);\n-          __ test_field_is_inlined(flags2, rscratch1, is_inlined);\n-          \/\/ field is not inlined\n-          pop_and_check_object(obj);\n-          \/\/ Store into the field\n-          do_oop_store(_masm, field, rax);\n-          __ jmp(rewrite_inline);\n-          __ bind(is_inlined);\n-          \/\/ field is inlined\n-          pop_and_check_object(obj);\n-          assert_different_registers(rax, rdx, obj, off);\n-          __ load_klass(rdx, rax, rscratch1);\n-          __ data_for_oop(rax, rax, rdx);\n-          __ addptr(obj, off);\n-          __ access_value_copy(IN_HEAP, rax, obj, rdx);\n-          __ bind(rewrite_inline);\n-          if (rc == may_rewrite) {\n-            patch_bytecode(Bytecodes::_fast_qputfield, bc, rbx, true, byte_no);\n-          }\n-          __ jmp(Done);\n+        \/\/ Implementation of the inline type semantic\n+        __ bind(is_inline_type);\n+        __ null_check(rax);\n+        __ test_field_is_inlined(flags2, rscratch1, is_inlined);\n+        \/\/ field is not inlined\n+        pop_and_check_object(obj);\n+        \/\/ Store into the field\n+        do_oop_store(_masm, field, rax);\n+        __ jmp(rewrite_inline);\n+        __ bind(is_inlined);\n+        \/\/ field is inlined\n+        pop_and_check_object(obj);\n+        assert_different_registers(rax, rdx, obj, off);\n+        __ load_klass(rdx, rax, rscratch1);\n+        __ data_for_oop(rax, rax, rdx);\n+        __ addptr(obj, off);\n+        __ access_value_copy(IN_HEAP, rax, obj, rdx);\n+        __ bind(rewrite_inline);\n+        if (rc == may_rewrite) {\n+          patch_bytecode(Bytecodes::_fast_qputfield, bc, rbx, true, byte_no);\n@@ -3432,0 +3419,1 @@\n+        __ jmp(Done);\n@@ -4467,1 +4455,1 @@\n-  if (EnableValhalla) {\n+  if (EnablePrimitiveClasses) {\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":83,"deletions":95,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -3328,1 +3328,1 @@\n-    \/\/ JVM_ACC_VALUE, JVM_ACC_PRIMITIVE, and JVM_ACC_IDENTITY are defined for class file version 62 and later\n+    \/\/ JVM_ACC_VALUE, JVM_ACC_PRIMITIVE, and JVM_ACC_IDENTITY are defined depending on version and feature flag\n@@ -4789,2 +4789,0 @@\n-  assert(supports_inline_types() || !is_value_class, \"JVM_ACC_VALUE should not be set\");\n-  assert(supports_inline_types() || !is_primitive_class, \"JVM_ACC_PRIMITIVE should not be set\");\n@@ -4801,3 +4799,1 @@\n-  if (!EnableValhalla) {\n-    if (is_value_class || is_primitive_class) {\n-      const char* bad_flag = is_primitive_class ? \"ACC_PRIMITIVE\" : \"ACC_VALUE\";\n+  if (is_value_class && !EnableValhalla) {\n@@ -4808,2 +4804,13 @@\n-        \"Class modifier %s in class %s requires option -XX:+EnableValhalla\",\n-        bad_flag, _class_name->as_C_string()\n+        \"Class modifier ACC_VALUE in class %s requires option -XX:+EnableValhalla\",\n+        _class_name->as_C_string()\n+      );\n+    return;\n+  }\n+\n+  if (is_primitive_class && !EnablePrimitiveClasses) {\n+      ResourceMark rm(THREAD);\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_ClassFormatError(),\n+        \"Class modifier ACC_PRIMITIVE in class %s requires option -XX:+EnablePrimitiveClasses\",\n+        _class_name->as_C_string()\n@@ -4811,1 +4818,0 @@\n-    }\n@@ -4827,1 +4833,1 @@\n-      (is_interface && major_gte_1_5 && ((is_super && !supports_inline_types()) || is_enum)) ||   \/\/  ACC_SUPER (now ACC_IDENTITY) was illegal for interfaces\n+      (is_interface && major_gte_1_5 && ((is_super && (!EnableValhalla || !supports_inline_types())) || is_enum)) ||   \/\/  ACC_SUPER (now ACC_IDENTITY) was illegal for interfaces\n@@ -4831,2 +4837,2 @@\n-      (supports_inline_types() && !is_module && !is_abstract && !is_Object && !(is_identity_class || is_value_class) && !is_inner_class) ||\n-      (supports_inline_types() && is_primitive_class && (!is_value_class || !is_final || is_interface || is_abstract))) {\n+      (EnableValhalla && supports_inline_types() && !is_module && !is_abstract && !is_Object && !(is_identity_class || is_value_class) && !is_inner_class) ||\n+      (EnablePrimitiveClasses && supports_inline_types() && is_primitive_class && (!is_value_class || !is_final || is_interface || is_abstract))) {\n@@ -5229,1 +5235,1 @@\n-      if (_major_version < 51 \/* CONSTANT_CLASS_DESCRIPTORS *\/ ) {\n+      if ( (_major_version < 51 \/* CONSTANT_CLASS_DESCRIPTORS *\/ ) || (!EnablePrimitiveClasses)) {\n@@ -5231,1 +5237,1 @@\n-                              \"in descriptor in class file %s\",\n+                              \"in descriptor in class file %s, requires option -XX:+EnablePrimitiveClasses\",\n@@ -5405,1 +5411,1 @@\n-  if (!supports_inline_types() && (signature->is_Q_signature() || signature->is_Q_array_signature())) {\n+  if ((!supports_inline_types() || !EnablePrimitiveClasses) && (signature->is_Q_signature() || signature->is_Q_array_signature())) {\n@@ -6177,1 +6183,1 @@\n-  \/\/ JVM_ACC_VALUE and JVM_ACC_PRIMITIVE are defined for class file version 55 and later\n+  \/\/ Are JVM_ACC_VALUE and JVM_ACC_PRIMITIVE support (version and feature check)\n@@ -6550,1 +6556,1 @@\n-  if (EnableValhalla) {\n+  if (EnablePrimitiveClasses) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -682,1 +682,1 @@\n-         !Signature::has_envelope(name), \"invalid class name\");\n+         !Signature::has_envelope(name), \"invalid class name: %s\", name == NULL ? \"NULL\" : name->as_C_string());\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -917,17 +917,7 @@\n-    for (int i = 0; i < methods()->length(); i++) {\n-      Method* m = methods()->at(i);\n-      for (SignatureStream ss(m->signature()); !ss.is_done(); ss.next()) {\n-        if (ss.is_reference()) {\n-          if (ss.is_array()) {\n-            continue;\n-          }\n-          if (ss.type() == T_PRIMITIVE_OBJECT) {\n-            Symbol* symb = ss.as_symbol();\n-            if (symb == name()) continue;\n-            oop loader = class_loader();\n-            oop protection_domain = this->protection_domain();\n-            Klass* klass = SystemDictionary::resolve_or_fail(symb,\n-                                                             Handle(THREAD, loader), Handle(THREAD, protection_domain), true,\n-                                                             CHECK_false);\n-            if (klass == NULL) {\n-              THROW_(vmSymbols::java_lang_LinkageError(), false);\n+    if (EnablePrimitiveClasses) {\n+      for (int i = 0; i < methods()->length(); i++) {\n+        Method* m = methods()->at(i);\n+        for (SignatureStream ss(m->signature()); !ss.is_done(); ss.next()) {\n+          if (ss.is_reference()) {\n+            if (ss.is_array()) {\n+              continue;\n@@ -935,6 +925,18 @@\n-            if (!klass->is_inline_klass()) {\n-              Exceptions::fthrow(\n-                THREAD_AND_LOCATION,\n-                vmSymbols::java_lang_IncompatibleClassChangeError(),\n-                \"class %s is not an inline type\",\n-                klass->external_name());\n+            if (ss.type() == T_PRIMITIVE_OBJECT) {\n+              Symbol* symb = ss.as_symbol();\n+              if (symb == name()) continue;\n+              oop loader = class_loader();\n+              oop protection_domain = this->protection_domain();\n+              Klass* klass = SystemDictionary::resolve_or_fail(symb,\n+                                                              Handle(THREAD, loader), Handle(THREAD, protection_domain), true,\n+                                                              CHECK_false);\n+              if (klass == NULL) {\n+                THROW_(vmSymbols::java_lang_LinkageError(), false);\n+              }\n+              if (!klass->is_inline_klass()) {\n+                Exceptions::fthrow(\n+                  THREAD_AND_LOCATION,\n+                  vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                  \"class %s is not an inline type\",\n+                  klass->external_name());\n+              }\n@@ -1265,1 +1267,1 @@\n-  if (EnableValhalla) {\n+  if (EnablePrimitiveClasses) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-  if (EnableValhalla) {\n+  if (UseFlatArray) {\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3036,0 +3036,4 @@\n+  if (!EnableValhalla) {\n+    EnablePrimitiveClasses = false;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2000,0 +2000,3 @@\n+  product(bool, EnablePrimitiveClasses, false,                              \\\n+          \"Enable experimental Valhalla primitive classes\")                 \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1303,1 +1303,1 @@\n-#define UseFlatArray (EnableValhalla && (FlatArrayElementMaxSize != 0))\n+#define UseFlatArray (EnablePrimitiveClasses && (FlatArrayElementMaxSize != 0))\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/BlackholeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+                         \"-XX:+EnableValhalla\",\n+                         \"-XX:+EnablePrimitiveClasses\",\n@@ -49,0 +51,2 @@\n+                         \"-XX:+EnableValhalla\",\n+                         \"-XX:+EnablePrimitiveClasses\",\n@@ -61,0 +65,2 @@\n+                         \"-XX:+EnableValhalla\",\n+                         \"-XX:+EnablePrimitiveClasses\",\n@@ -74,0 +80,2 @@\n+                         \"-XX:+EnableValhalla\",\n+                         \"-XX:+EnablePrimitiveClasses\",\n@@ -85,0 +93,2 @@\n+                         \"-XX:+EnableValhalla\",\n+                         \"-XX:+EnablePrimitiveClasses\",\n@@ -96,0 +106,2 @@\n+                         \"-XX:+EnableValhalla\",\n+                         \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypes.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run driver TestArrayAccessDeopt\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TestArrayAccessDeopt\n@@ -90,1 +90,2 @@\n-            String[] arg = {\"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,TestArrayAccessDeopt::test*\", \"-XX:-UseArrayLoadStoreProfile\",\n+            String[] arg = {\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                            \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,TestArrayAccessDeopt::test*\", \"-XX:-UseArrayLoadStoreProfile\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @run main\/othervm -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestArrayCopyWithOops::test*\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestArrayCopyWithOops::test*\n@@ -34,1 +35,2 @@\n- * @run main\/othervm -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestArrayCopyWithOops::test*\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestArrayCopyWithOops::test*\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayCopyWithOops.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestArrays\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestArrays\n@@ -53,4 +53,4 @@\n-        scenarios[2].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n-        scenarios[3].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\", \"-XX:-UncommonNullCast\");\n-        scenarios[4].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\");\n-        scenarios[5].addFlags(\"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n+        scenarios[2].addFlags(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n+        scenarios[3].addFlags(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", \"-XX:-MonomorphicArrayCheck\", \"-XX:FlatArrayElementMaxSize=-1\", \"-XX:-UncommonNullCast\");\n+        scenarios[4].addFlags(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\");\n+        scenarios[5].addFlags(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", \"-XX:-MonomorphicArrayCheck\", \"-XX:-UncommonNullCast\", \"-XX:+StressArrayCopyMacroNode\");\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestBasicFunctionality\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestBasicFunctionality\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm -Xbatch -XX:TypeProfileLevel=222\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch -XX:TypeProfileLevel=222\n@@ -40,1 +40,1 @@\n- * @run main\/othervm -Xbatch -XX:TypeProfileLevel=222\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch -XX:TypeProfileLevel=222\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBimorphicInlining.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,2 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n@@ -45,1 +46,2 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n@@ -49,1 +51,2 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n@@ -53,1 +56,2 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:InlineFieldMaxFlatSize=0 -XX:FlatArrayElementMaxSize=0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearing.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:InlineFieldMaxFlatSize=-1 -XX:FlatArrayElementMaxSize=-1\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearingC1.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestC1\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestC1\n@@ -50,0 +50,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -53,0 +54,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -56,0 +58,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -59,0 +62,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -62,0 +66,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1 -ea\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xcomp -XX:TieredStopAtLevel=1 -ea\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1ValueNumbering.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -33,1 +34,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -38,1 +40,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -43,1 +46,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -48,1 +52,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC2CCalls.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @run driver\/timeout=450 compiler.valhalla.inlinetypes.TestCallingConvention\n+ * @run main\/othervm\/timeout=450 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestCallingConvention\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestCallingConventionC1\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestCallingConventionC1\n@@ -50,0 +50,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -55,0 +56,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -63,0 +65,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -69,0 +72,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -73,0 +77,1 @@\n+                             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xbatch TestDeadAllocationRemoval\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch TestDeadAllocationRemoval\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeadAllocationRemoval.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -48,1 +49,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -51,1 +53,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -56,1 +59,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -61,1 +65,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -66,1 +71,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -71,1 +77,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -76,1 +83,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -XX:-BackgroundCompilation TestFlatArrayAliasesCardMark\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:-BackgroundCompilation TestFlatArrayAliasesCardMark\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayAliasesCardMark.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n- * @run main\/othervm -Xbatch TestFlatArrayThreshold\n- * @run main\/othervm -XX:FlatArrayElementMaxOops=1 -Xbatch TestFlatArrayThreshold\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=1 -Xbatch TestFlatArrayThreshold\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch TestFlatArrayThreshold\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxOops=1 -Xbatch TestFlatArrayThreshold\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxSize=1 -Xbatch TestFlatArrayThreshold\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestFlatArrayThreshold.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xbatch\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xbatch -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch -XX:FlatArrayElementMaxSize=0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestGetfieldChains\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestGetfieldChains\n@@ -51,0 +51,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -55,0 +56,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -60,0 +62,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -63,0 +66,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -68,0 +72,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGetfieldChains.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestIntrinsics\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestIntrinsics\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n- * @run main\/othervm -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestIsSubstitutableReresolution::test\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestIsSubstitutableReresolution::test\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIsSubstitutableReresolution.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestJNICalls\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestJNICalls\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestJNICalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * @run driver\/timeout=450 compiler.valhalla.inlinetypes.TestLWorld\n+ * @run main\/othervm\/timeout=450 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestLWorld\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestLWorldProfiling\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestLWorldProfiling\n@@ -51,0 +51,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -57,0 +58,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -62,0 +64,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -68,0 +71,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -76,0 +80,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -83,0 +88,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,TestLoopUnswitchingWithFlatArrayCheck::test TestLoopUnswitchingWithFlatArrayCheck\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xcomp -XX:CompileCommand=compileonly,TestLoopUnswitchingWithFlatArrayCheck::test TestLoopUnswitchingWithFlatArrayCheck\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLoopUnswitchingWithFlatArrayCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestMethodHandles\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestMethodHandles\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xbatch -XX:-UseTypeProfile\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch -XX:-UseTypeProfile\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNativeClone.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm -Xcomp\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xcomp\n@@ -36,1 +36,1 @@\n- * @run main\/othervm -Xcomp -XX:TieredStopAtLevel=1\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xcomp -XX:TieredStopAtLevel=1\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNestmateAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * @run main\/othervm\/timeout=300 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                               -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -1873,0 +1874,2 @@\n+            \"-XX:+EnableValhalla\",\n+            \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestNullableArrays\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestNullableArrays\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableArrays.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestNullableInlineTypes\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestNullableInlineTypes\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestOnStackReplacement\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestOnStackReplacement\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOnStackReplacement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xbatch compiler.valhalla.inlinetypes.TestOptimizeKlassCmp\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch compiler.valhalla.inlinetypes.TestOptimizeKlassCmp\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestOptimizeKlassCmp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @run main\/othervm -XX:CompileCommand=dontinline,TestSafepointAtPollReturn::test* -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:CompileCommand=dontinline,TestSafepointAtPollReturn::test* -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestSafepointAtPollReturn.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * @run main\/othervm -XX:CompileCommand=exclude,compiler.valhalla.inlinetypes.TestStressReturnBuffering::caller -Xmx4m\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:CompileCommand=exclude,compiler.valhalla.inlinetypes.TestStressReturnBuffering::caller -Xmx4m\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestStressReturnBuffering.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n@@ -35,1 +36,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n@@ -40,1 +42,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnexpectedMemBar.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @run main\/othervm -XX:CompileCommand=compileonly,*::<init> -Xcomp -XX:-TieredCompilation\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses\n+ *                   -XX:CompileCommand=compileonly,*::<init> -Xcomp -XX:-TieredCompilation\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUninitializedValueClass.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @run main\/othervm -Xcomp\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xcomp\n@@ -33,1 +34,2 @@\n- * @run main\/othervm -Xcomp -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xcomp -XX:FlatArrayElementMaxSize=0\n@@ -36,1 +38,2 @@\n- * @run main\/othervm -Xcomp\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xcomp\n@@ -38,1 +41,2 @@\n- * @run main\/othervm -Xcomp -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xcomp -XX:FlatArrayElementMaxSize=0\n@@ -40,1 +44,2 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xcomp -XX:-TieredCompilation\n@@ -43,1 +48,2 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n@@ -46,1 +52,2 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xcomp -XX:-TieredCompilation\n@@ -48,1 +55,2 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xcomp -XX:-TieredCompilation -XX:FlatArrayElementMaxSize=0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeArray.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestUnloadedInlineTypeField\n@@ -56,1 +56,2 @@\n-        final String[] flags = {\/\/ Prevent IR Test Framework from loading classes\n+        final String[] flags = { \"-XX:+EnableValhalla\" ,\"-XX:+EnablePrimitiveClasses\",\n+                                \/\/ Prevent IR Test Framework from loading classes\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedReturnTypes.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,TestUnresolvedDefault::test TestUnresolvedDefault\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xcomp -XX:CompileCommand=compileonly,TestUnresolvedDefault::test TestUnresolvedDefault\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm TestUnresolvedInlineClass\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TestUnresolvedInlineClass\n@@ -54,1 +54,1 @@\n-            String[] arg = {\"-XX:+InlineTypePassFieldsAsArgs\", \"TestUnresolvedInlineClass\", \"run\"};\n+            String[] arg = {\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", \"-XX:+InlineTypePassFieldsAsArgs\", \"TestUnresolvedInlineClass\", \"run\"};\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedInlineClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestValueClasses\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestValueClasses\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @run main\/othervm -XX:CompileCommand=dontinline,TestWithSpeculativeTypes::*\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:CompileCommand=dontinline,TestWithSpeculativeTypes::*\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithSpeculativeTypes.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run driver\/timeout=300 compiler.valhalla.inlinetypes.TestWithfieldC1\n+ * @run main\/othervm\/timeout=300 -XX:+EnableValhalla -XX:+EnablePrimitiveClasses compiler.valhalla.inlinetypes.TestWithfieldC1\n@@ -47,0 +47,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -50,0 +51,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -53,0 +55,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -55,0 +58,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -59,0 +63,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithfieldC1.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,2 +42,3 @@\n- * @run driver InstallBootstrapClasses\n- * @run main\/othervm -Xbootclasspath\/a:boot -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InstallBootstrapClasses\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xbootclasspath\/a:boot -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/TestBootClassloader.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run driver HelloInlineClassTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses HelloInlineClassTest\n@@ -48,1 +48,2 @@\n-        TestCommon.run(\"-Xint\", \"-cp\", appJar,  mainClass)\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-Xint\", \"-cp\", appJar,  mainClass)\n@@ -51,1 +52,2 @@\n-        TestCommon.run(\"-cp\", appJar,  mainClass)\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-cp\", appJar,  mainClass)\n@@ -56,1 +58,2 @@\n-        TestCommon.run(\"-Xcomp\", compFlag,\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-Xcomp\", compFlag,\n@@ -60,1 +63,2 @@\n-        TestCommon.run(\"-Xcomp\", compFlag,\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-Xcomp\", compFlag,\n@@ -67,1 +71,2 @@\n-        TestCommon.run(\"-Xcomp\", compFlag,\n+        TestCommon.run(\"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n+                       \"-Xcomp\", compFlag,\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/HelloInlineClassTest.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+                    \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/RewriteBytecodesInlineTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. DynamicArchiveRelocationTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. DynamicArchiveRelocationTest\n@@ -95,1 +95,1 @@\n-        TestCommon.dumpBaseArchive(baseArchiveName, unlockArg, logArg)\n+        TestCommon.dumpBaseArchive(baseArchiveName, \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\", unlockArg, logArg)\n@@ -101,0 +101,1 @@\n+              \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n@@ -112,0 +113,1 @@\n+             \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveRelocationTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. HelloDynamicInlineClass\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. HelloDynamicInlineClass\n@@ -63,0 +63,2 @@\n+             \"-XX:+EnableValhalla\",\n+             \"-XX:+EnablePrimitiveClasses\",\n@@ -70,0 +72,2 @@\n+            \"-XX:+EnableValhalla\",\n+            \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/HelloDynamicInlineClass.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main runtime.valhalla.inlinetypes.CheckcastTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.CheckcastTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CheckcastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main runtime.valhalla.inlinetypes.CircularityTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.CircularityTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CircularityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,3 +31,2 @@\n- * @compile -XDenablePrimitiveClasses ClassInitializationFailuresTest.java\n-* @run main runtime.valhalla.inlinetypes.ClassInitializationFailuresTest\n-\n+* @compile -XDenablePrimitiveClasses ClassInitializationFailuresTest.java\n+* @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.ClassInitializationFailuresTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassInitializationFailuresTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.ClassPrintLayoutDcmd\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.ClassPrintLayoutDcmd\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ClassPrintLayoutDcmd.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * @run main\/othervm -Xmx128m\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xmx128m\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CreationErrorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=128 runtime.valhalla.inlinetypes.EmptyInlineTest\n-\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=128 runtime.valhalla.inlinetypes.EmptyInlineTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/EmptyInlineTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.FlattenableSemanticTest\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.FlattenableSemanticTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.FlattenableSemanticTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.FlattenableSemanticTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/FlattenableSemanticTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main HiddenInlineClassTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses HiddenInlineClassTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/HiddenInlineClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm -Xms16m -Xmx16m -XX:+UseSerialGC\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xms16m -Xmx16m -XX:+UseSerialGC\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Ifacmp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n- * @run main\/othervm -XX:+UseSerialGC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UseSerialGC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n@@ -62,1 +63,2 @@\n- * @run main\/othervm -XX:+UseG1GC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UseG1GC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n@@ -77,1 +79,2 @@\n- * @run main\/othervm -XX:+UseParallelGC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UseParallelGC -Xmx128m -XX:InlineFieldMaxFlatSize=128\n@@ -92,1 +95,2 @@\n- * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx128m\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx128m\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,3 +41,3 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1 runtime.valhalla.inlinetypes.InlineTypeArray\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=0  runtime.valhalla.inlinetypes.InlineTypeArray\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxSize=-1 runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxSize=0  runtime.valhalla.inlinetypes.InlineTypeArray\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.InlineTypeArray\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main runtime.valhalla.inlinetypes.InlineTypeCreation\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.InlineTypeCreation\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeCreation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1 -XX:+UseCompressedOops\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:FlatArrayElementMaxSize=-1 -XX:+UseCompressedOops\n@@ -39,1 +40,2 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1 -XX:-UseCompressedOops\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:FlatArrayElementMaxSize=-1 -XX:-UseCompressedOops\n@@ -42,1 +44,2 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:FlatArrayElementMaxSize=-1\n@@ -45,1 +48,2 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:FlatArrayElementMaxSize=-1\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeDensity.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main runtime.valhalla.inlinetypes.InlineTypeGetField\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.InlineTypeGetField\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeGetField.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n- * @run main\/othervm -Xmx128m -XX:+ExplicitGCInvokesConcurrent\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xmx128m -XX:+ExplicitGCInvokesConcurrent\n@@ -58,1 +59,2 @@\n- * @run main\/othervm -Xmx128m -XX:+ExplicitGCInvokesConcurrent\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -Xmx128m -XX:+ExplicitGCInvokesConcurrent\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypesTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses InlineWithJni.java\n- * @run main\/native runtime.valhalla.inlinetypes.InlineWithJni\n+ * @run main\/othervm\/native -XX:+EnableValhalla -XX:-EnablePrimitiveClasses runtime.valhalla.inlinetypes.InlineWithJni\n@@ -31,5 +30,1 @@\n-\n-\/** this test was failing already but once fixed it should need the -XDenablePrimitiveClasses option as\n-  * it is defining a primitive class, please remove this comment once the test has been fixed\n-  *\/\n-public primitive final class InlineWithJni {\n+public value class InlineWithJni {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineWithJni.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm MultiANewArrayTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses MultiANewArrayTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/MultiANewArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,4 +35,4 @@\n- * @compile -XDenablePrimitiveClasses ObjectMethods.java\n- * @run main\/othervm -XX:+UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods\n- * @run main\/othervm -XX:-UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods\n- * @run main\/othervm -noverify runtime.valhalla.inlinetypes.ObjectMethods noverify\n+ * @compile ObjectMethods.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses -XX:+UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses -XX:-UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses -noverify runtime.valhalla.inlinetypes.ObjectMethods noverify\n@@ -59,1 +59,1 @@\n-        checkGetClass(val, MyInt.ref.class);\n+        checkGetClass(val, MyInt.class);\n@@ -216,2 +216,2 @@\n-    static final primitive class MyInt {\n-        final int value;\n+    static value class MyInt {\n+        int value;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ObjectMethods.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main runtime.valhalla.inlinetypes.QuickeningTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.QuickeningTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/QuickeningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main runtime.valhalla.inlinetypes.StaticFieldsTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.StaticFieldsTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/StaticFieldsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main runtime.valhalla.inlinetypes.Test8186715\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.Test8186715\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Test8186715.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.TestBytecodeLib\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.TestBytecodeLib\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestBytecodeLib.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xmx128m -XX:InlineFieldMaxFlatSize=32\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xmx128m -XX:InlineFieldMaxFlatSize=32\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullability.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.TestFieldTypeMismatch\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.TestFieldTypeMismatch\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.TestInheritedInlineTypeFields\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.TestInheritedInlineTypeFields\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestInheritedInlineTypeFields.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm\/native TestJNIIsSameObject\n+ * @run main\/othervm\/native -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TestJNIIsSameObject\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestJNIIsSameObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.UninitializedInlineFieldsTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.UninitializedInlineFieldsTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UninitializedInlineFieldsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=-1 runtime.valhalla.inlinetypes.UnsafeTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxSize=-1 -XX:InlineFieldMaxFlatSize=-1 runtime.valhalla.inlinetypes.UnsafeTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/UnsafeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main runtime.valhalla.inlinetypes.VDefaultTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.VDefaultTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VDefaultTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+        Collections.addAll(argsList, \"-XX:+EnableValhalla\", \"-XX:-EnablePrimitiveClasses\");\n@@ -46,1 +47,1 @@\n-    static void checkFor(ProcessBuilder pb, String... outputStrings) throws Exception {\n+    static void checkFor(ProcessBuilder pb, String expected) throws Exception {\n@@ -48,3 +49,0 @@\n-        for (String s: outputStrings) {\n-            out.shouldContain(s);\n-        }\n@@ -52,0 +50,1 @@\n+        out.shouldContain(expected);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n@@ -49,1 +50,2 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=*\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=*\n@@ -53,1 +55,2 @@\n- * @run main\/othervm -DSTEP_COUNT=10000000 -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -DSTEP_COUNT=10000000 -XX:InlineFieldMaxFlatSize=128 -XX:FlatArrayElementMaxSize=-1\n@@ -56,1 +59,2 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n@@ -60,1 +64,2 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=\n@@ -64,1 +69,2 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=*\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=*\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValueTearing.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @run main runtime.valhalla.inlinetypes.VarArgsArray\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.VarArgsArray\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VarArgsArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -XX:InlineFieldMaxFlatSize=128 runtime.valhalla.inlinetypes.VolatileTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=128 runtime.valhalla.inlinetypes.VolatileTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VolatileTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm runtime.valhalla.inlinetypes.WithFieldAccessorTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.WithFieldAccessorTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main runtime.valhalla.inlinetypes.WithFieldTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses runtime.valhalla.inlinetypes.WithFieldTest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla -Xverify:remote ACC_CFETest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses -Xverify:remote ACC_CFETest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_CFETest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -XX:+EnableValhalla ACC_ICCETest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses ACC_ICCETest\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_ICCETest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @summary test that if a class file has ACC_PRIMITIVE set then it must be run\n- *          with option -XX:+EnableValhalla.\n+ * @summary test that if a class file has ACC_VALUE or ACC_PRIMITIVE set then it must be run\n+ *          with option -XX:+ÉnableValhalla or -XX:+EnablePrimitiveClasses respectively.\n@@ -29,1 +29,2 @@\n- * @run main\/othervm -XX:-EnableValhalla BadACCValue\n+ * @run main\/othervm -XX:-EnableValhalla -XX:-EnablePrimitiveClasses BadACCValue ACC_VALUE\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses BadACCValue ACC_PRIMIITVE\n@@ -35,1 +36,1 @@\n-        System.out.println(\"Testing: \" + test_name);\n+        System.out.println(\"Testing: \" + test_name + \" Expecting CFE with message: \" + message);\n@@ -38,0 +39,1 @@\n+            throw new RuntimeException(\"Managed to load primitive class with -XX:-EnablePrimitiveClasses\");\n@@ -42,0 +44,2 @@\n+        } catch (Throwable t) {\n+            throw new RuntimeException( \"Wrong Exeception, message: \" + t.getMessage(), t);\n@@ -46,4 +50,5 @@\n-\n-        \/\/ Test ACC_PRIMITIVE causes a CFE unless -XX:+EnableValhalla is specified.\n-        runTest(\"ValueFieldNotFinal\",\n-                \"Class modifier ACC_PRIMITIVE in class ValueFieldNotFinal requires option -XX:+EnableValhalla\");\n+        \/\/ Test correct error message for disabled Valhalla features\n+        String message = args[0].equals(\"ACC_VALUE\") ?\n+            \"Class modifier ACC_VALUE in class ValueFieldNotFinal requires option -XX:+EnableValhalla\" :\n+            \"Class modifier ACC_PRIMITIVE in class ValueFieldNotFinal requires option -XX:+EnablePrimitiveClasses\";\n+        runTest(\"ValueFieldNotFinal\", message);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/BadACCValue.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:remote BadInlineTypes\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:remote BadInlineTypes\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/BadInlineTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test PrimitiveUsers\n+ * @summary test that if a class file uses primitive classes, -XX:+EnablePrimitiveClasses must be set.\n+ * @compile PrimitiveUsers.jcod\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses PrimitiveUsers true\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses PrimitiveUsers false\n+ *\/\n+\n+public class PrimitiveUsers {\n+\n+    static final String[][] TEST_CASE_ERROR = {\n+        { \"PrimitiveUsersField\",         \"Field \\\"p\\\" in class PrimitiveUsersField has illegal signature \\\"QMyPrimitive;\\\"\" },\n+        { \"PrimitiveUsersStaticQArg\",    \"Class name contains illegal Q-signature in descriptor in class file PrimitiveUsersStaticQArg, requires option -XX:+EnablePrimitiveClasses\" },\n+        { \"PrimitiveUsersStaticQReturn\", \"Class name contains illegal Q-signature in descriptor in class file PrimitiveUsersStaticQReturn, requires option -XX:+EnablePrimitiveClasses\" },\n+        { \"PrimitiveUsersQArg\",    \"Class name contains illegal Q-signature in descriptor in class file PrimitiveUsersQArg, requires option -XX:+EnablePrimitiveClasses\" },\n+        { \"PrimitiveUsersQReturn\", \"Class name contains illegal Q-signature in descriptor in class file PrimitiveUsersQReturn, requires option -XX:+EnablePrimitiveClasses\" }\n+    };\n+\n+    public static void testLoadCasesEnabled() throws Throwable {\n+        for (String[] caseAndError : TEST_CASE_ERROR) {\n+            Class.forName(caseAndError[0]);\n+        }\n+    }\n+\n+    public static void testLoadCasesDisabled() throws Throwable {\n+        for (String[] caseAndError : TEST_CASE_ERROR) {\n+            try {\n+                Class.forName(caseAndError[0]);\n+                throw new RuntimeException(\"Test case \" + caseAndError[0] + \" loaded with out failure\");\n+            } catch (Throwable t) {\n+                if (!(t instanceof ClassFormatError)) {\n+                    t.printStackTrace();\n+                    throw t;\n+                }\n+                if (!t.getMessage().equals(caseAndError[1])) {\n+                    t.printStackTrace();\n+                    throw new RuntimeException(\"Wrong CFE error: \" +  t.getMessage() + \" expected: \" + caseAndError[1]);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        if (args[0].equals(\"true\")) {\n+            testLoadCasesEnabled();\n+        } else {\n+            \/\/ Test correct error message for disabled primitive class feature\n+            testLoadCasesDisabled();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/PrimitiveUsers.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,588 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+ These test classes contains variations of Q-type signature uses which should\n+ only work with +EnablePrimitiveClasses\n+\n+ The original source with all the illegal cases looks like this, then below\n+ are classes with a single aspect declared (for each line in the prototype\n+ class listed)\n+\n+ public class PrimitiveUsers {\n+    MyPrimitive p;\n+    public static void staticCheckQArg(MyPrimitive p) {}\n+    public static MyPrimitive staticCheckQReturn() { return MyPrimitive.default; }\n+    public void checkQArg(MyPrimitive p) {}\n+    public MyPrimitive checkQReturn() { return MyPrimitive.default; }\n+ }\n+*\/\n+\n+\/\/ Use Q-signature field...\n+\n+class PrimitiveUsersField {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"PrimitiveUsersField\"; \/\/ #8\n+    Utf8 \"p\"; \/\/ #9\n+    Utf8 \"QMyPrimitive;\"; \/\/ #10\n+    Utf8 \"Code\"; \/\/ #11\n+    Utf8 \"LineNumberTable\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"PrimitiveUsersField.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #9; \/\/ name_index\n+      #10; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class PrimitiveUsersField\n+\n+\n+\/\/ Static method q-sig in arg\n+\n+class PrimitiveUsersStaticQArg {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"PrimitiveUsersStaticQArg\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"staticCheckQArg\"; \/\/ #11\n+    Utf8 \"(QMyPrimitive;)V\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"PrimitiveUsersStaticQArg.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          0; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  4;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class PrimitiveUsersStaticQArg\n+\n+\/\/ Static method q-sig in return\n+\n+class PrimitiveUsersStaticQReturn {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"MyPrimitive\"; \/\/ #8\n+    class #10; \/\/ #9\n+    Utf8 \"PrimitiveUsersStaticQReturn\"; \/\/ #10\n+    Utf8 \"Code\"; \/\/ #11\n+    Utf8 \"LineNumberTable\"; \/\/ #12\n+    Utf8 \"staticCheckQReturn\"; \/\/ #13\n+    Utf8 \"()QMyPrimitive;\"; \/\/ #14\n+    Utf8 \"SourceFile\"; \/\/ #15\n+    Utf8 \"PrimitiveUsersStaticQReturn.java\"; \/\/ #16\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #9;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #13; \/\/ name_index\n+      #14; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0xCB0007B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  5;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#15) { \/\/ SourceFile\n+      #16;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class PrimitiveUsersStaticQReturn\n+\n+\/\/ Method with q-sig in arg\n+\n+class PrimitiveUsersQArg {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"PrimitiveUsersQArg\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"checkQArg\"; \/\/ #11\n+    Utf8 \"(QMyPrimitive;)V\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"PrimitiveUsersQArg.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          0; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  6;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class PrimitiveUsersQArg\n+\n+\/\/ Method with q-sig in return\n+\n+class PrimitiveUsersQReturn {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"MyPrimitive\"; \/\/ #8\n+    class #10; \/\/ #9\n+    Utf8 \"PrimitiveUsersQReturn\"; \/\/ #10\n+    Utf8 \"Code\"; \/\/ #11\n+    Utf8 \"LineNumberTable\"; \/\/ #12\n+    Utf8 \"checkQReturn\"; \/\/ #13\n+    Utf8 \"()QMyPrimitive;\"; \/\/ #14\n+    Utf8 \"SourceFile\"; \/\/ #15\n+    Utf8 \"PrimitiveUsersQReturn.java\"; \/\/ #16\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #9;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #13; \/\/ name_index\n+      #14; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB0007B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  7;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#15) { \/\/ SourceFile\n+      #16;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class PrimitiveUsersQReturn\n+\n+\n+\/\/ Legal primitive class MyPrimitive for enabled use cases\n+\n+class MyPrimitive {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"MyPrimitive\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"(I)QMyPrimitive;\"; \/\/ #6\n+    Field #2 #8; \/\/ #7\n+    NameAndType #9 #10; \/\/ #8\n+    Utf8 \"id\"; \/\/ #9\n+    Utf8 \"I\"; \/\/ #10\n+    class #12; \/\/ #11\n+    Utf8 \"java\/lang\/Object\"; \/\/ #12\n+    Utf8 \"()QMyPrimitive;\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"SourceFile\"; \/\/ #16\n+    Utf8 \"MyPrimitive.java\"; \/\/ #17\n+  } \/\/ Constant Pool\n+\n+  0x0851; \/\/ access\n+  #2;\/\/ this_cpx\n+  #11;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #9; \/\/ name_index\n+      #10; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #5; \/\/ name_index\n+      #13; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x03B800014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  6;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00024C1A2B5FCC;\n+            0x00074C2BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  7;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#16) { \/\/ SourceFile\n+      #17;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyPrimitive\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/PrimitiveUsers.jcod","additions":588,"deletions":0,"binary":false,"changes":588,"status":"added"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm -verify TestClassModifiers\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses -verify TestClassModifiers\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/TestClassModifiers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -verify TestSuperClasses\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -verify TestSuperClasses\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testSupers\/TestSuperClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm -Xverify:remote VTAssignability\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:remote VTAssignability\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTAssignability.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:remote VTMonitor\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:remote VTMonitor\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VTMonitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -verify VerifierInlineTypes\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -verify VerifierInlineTypes\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VerifierInlineTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xverify:remote RunWithfieldTests\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:remote RunWithfieldTests\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/withfieldTests\/RunWithfieldTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm\/native -agentlib:FieldAccessModify FieldAccessModify\n+ * @run main\/othervm\/native -agentlib:FieldAccessModify -XX:+EnableValhalla -XX:+EnablePrimitiveClasses FieldAccessModify\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/Valhalla\/FieldAccessModify\/FieldAccessModify.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main HeapDump\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses HeapDump\n@@ -164,1 +164,1 @@\n-            LingeredApp.startApp(theApp\/*, \"-XX:+PrintInlineLayout\"*\/);\n+            LingeredApp.startApp(theApp, \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\"\/*, \"-XX:+PrintInlineLayout\"*\/);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/Valhalla\/HeapDump\/HeapDump.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main GenericStringTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses GenericStringTest\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run driver RedefinePrimitive master\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses RedefinePrimitive master\n@@ -309,0 +309,1 @@\n+                        \"-XX:+EnableValhalla\", \"-XX:+EnablePrimitiveClasses\",\n","filename":"test\/jdk\/java\/lang\/instrument\/valhalla\/RedefinePrimitive.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessBoolean.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessBoolean\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessBoolean\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessBoolean\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessBoolean\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessBoolean.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessBoolean\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessBoolean\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessBoolean\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessBoolean\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessBoolean.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessByte.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessByte\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessByte\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessByte\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessByte\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessByte.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessByte\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessByte\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessByte\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessByte\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessByte.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessChar.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessChar\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessChar\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessChar\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessChar\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessChar.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessChar\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessChar\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessChar\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessChar\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessChar.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessDouble.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessDouble\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessDouble\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessDouble\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessDouble\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessDouble.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessDouble\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessDouble\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessDouble\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessDouble\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessDouble.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessFloat.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessFloat\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessFloat\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessFloat\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessFloat\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessFloat.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessFloat\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessFloat\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessFloat\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessFloat\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessFloat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessInt.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessInt\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessInt\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessInt\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessInt\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessInt.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessInt\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessInt\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessInt\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessInt\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessInt.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessLong.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessLong\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessLong\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessLong\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessLong\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessLong.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessLong\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessLong\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessLong\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessLong\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessLong.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessPoint.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessPoint\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessPoint\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessPoint\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessPoint\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessPoint.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessPoint\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessPoint\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessPoint\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessPoint\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessPoint.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessShort.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessShort\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessShort\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessShort\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessShort\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessShort.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessShort\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessShort\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessShort\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessShort\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessShort.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccessString.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessString\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessString\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccessString\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessString\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessString.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessString\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessString\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessString\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessString\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessString.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessBoolean\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessBoolean\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessBoolean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessByte\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessByte\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessChar\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessChar\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessDouble\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessDouble\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessFloat\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessFloat\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessInt\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessInt\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessLong\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessLong\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=2000 VarHandleTestMethodHandleAccessPoint\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessPoint\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessPoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessShort\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessShort\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessString\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessString\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeBoolean.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeBoolean.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeByte.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeByte.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeChar.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeChar.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeDouble.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeDouble.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeFloat.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeFloat.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeInt.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeInt.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeLong.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeLong.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,5 +30,5 @@\n- * @run testng\/othervm VarHandleTestMethodTypePoint\n- * @run testng\/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestMethodTypePoint\n- * @run testng\/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=false VarHandleTestMethodTypePoint\n- * @run testng\/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestMethodTypePoint\n- *\/\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses VarHandleTestMethodTypePoint\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestMethodTypePoint\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=false VarHandleTestMethodTypePoint\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestMethodTypePoint\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypePoint.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeShort.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeShort.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeString.java\n@@ -34,1 +33,1 @@\n- *\/\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeString.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n- * @compile -XDenablePrimitiveClasses                        Point.java Value.java VarHandleTestAccess$Type$.java\n- * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccess$Type$\n- * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccess$Type$\n- * @run testng\/othervm -Diters=20000                         VarHandleTestAccess$Type$\n- * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccess$Type$\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccess$Type$.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccess$Type$\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccess$Type$\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccess$Type$\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccess$Type$\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestAccess.java.template","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,5 +29,1 @@\n-#if[Point]\n- * @run testng\/othervm -Diters=2000 VarHandleTestMethodHandleAccess$Type$\n-#else[Point]\n- * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccess$Type$\n-#end[Point]\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccess$Type$\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodHandleAccess.java.template","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#if[Point]\n@@ -30,0 +31,5 @@\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses VarHandleTestMethodType$Type$\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestMethodType$Type$\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=false VarHandleTestMethodType$Type$\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestMethodType$Type$\n+#else[Point]\n@@ -34,1 +40,2 @@\n- *\/\n+#end[Point]\n+*\/\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodType.java.template","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @run testng\/othervm -XX:FlatArrayElementMaxSize=-1 ArrayElementVarHandleTest\n- * @run testng\/othervm -XX:FlatArrayElementMaxSize=0  ArrayElementVarHandleTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxSize=-1 ArrayElementVarHandleTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxSize=0  ArrayElementVarHandleTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/ArrayElementVarHandleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm --enable-preview BasicTest\n+ * @run testng\/othervm --enable-preview -XX:+EnableValhalla -XX:+EnablePrimitiveClasses BasicTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/BasicTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm LambdaConversion\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LambdaConversion\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaConversion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm LambdaTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LambdaTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @run testng\/othervm --enable-preview -XX:InlineFieldMaxFlatSize=128 MHZeroValue\n- * @run testng\/othervm --enable-preview -XX:InlineFieldMaxFlatSize=0 MHZeroValue\n+ * @run testng\/othervm --enable-preview -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=128 MHZeroValue\n+ * @run testng\/othervm --enable-preview -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=0 MHZeroValue\n","filename":"test\/jdk\/valhalla\/valuetypes\/MHZeroValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm MethodHandleTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses MethodHandleTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run main MethodReference\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses MethodReference\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run main Nest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses Nest\n","filename":"test\/jdk\/valhalla\/valuetypes\/Nest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm -Dvalue.bsm.salt=1 ObjectMethods\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Dvalue.bsm.salt=1 ObjectMethods\n@@ -32,1 +32,1 @@\n- * @run testng\/othervm -Dvalue.bsm.salt=1 -XX:InlineFieldMaxFlatSize=0 ObjectMethods\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Dvalue.bsm.salt=1 -XX:InlineFieldMaxFlatSize=0 ObjectMethods\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm ObjectMethodsViaCondy\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ObjectMethodsViaCondy\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethodsViaCondy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,2 @@\n- * @run testng\/othervm ObjectNewInstance\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ObjectNewInstance\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:-EnablePrimitiveClasses ObjectNewInstance\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectNewInstance.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm PrimitiveTypeConversionTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses PrimitiveTypeConversionTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/PrimitiveTypeConversionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm ProxyTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ProxyTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/ProxyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm QTypeDescriptorTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses QTypeDescriptorTest\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm -Dsun.reflect.noInflation=true QTypeDescriptorTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Dsun.reflect.noInflation=true QTypeDescriptorTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/QTypeDescriptorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm --enable-preview Reflection\n+ * @run testng\/othervm --enable-preview -XX:+EnableValhalla -XX:+EnablePrimitiveClasses Reflection\n","filename":"test\/jdk\/valhalla\/valuetypes\/Reflection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm Serialization\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses Serialization\n","filename":"test\/jdk\/valhalla\/valuetypes\/Serialization.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm StaticFactoryMethodHandleTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses StaticFactoryMethodHandleTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryMethodHandleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng\/othervm StaticFactoryTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses StaticFactoryTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng StreamTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses StreamTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/StreamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run testng SubstitutabilityTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SubstitutabilityTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- * @run testng\/othervm --enable-preview -XX:InlineFieldMaxFlatSize=128 UninitializedValueTest\n- * @run testng\/othervm --enable-preview -XX:InlineFieldMaxFlatSize=0 UninitializedValueTest\n+ * @run testng\/othervm --enable-preview -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=128 UninitializedValueTest\n+ * @compile --enable-preview --source ${jdk.version} -XDenablePrimitiveClasses UninitializedValueTest.java\n+ * @run testng\/othervm --enable-preview -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:InlineFieldMaxFlatSize=0 UninitializedValueTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/UninitializedValueTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm -XX:FlatArrayElementMaxSize=-1 ValueArray\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxSize=-1 ValueArray\n@@ -30,1 +30,1 @@\n- * @run testng\/othervm -XX:FlatArrayElementMaxSize=0  ValueArray\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -XX:FlatArrayElementMaxSize=0  ValueArray\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm --enable-preview ValueConstantDesc\n+ * @run testng\/othervm --enable-preview -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueConstantDesc\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueConstantDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run testng\/othervm WeakReferenceTest\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses WeakReferenceTest\n","filename":"test\/jdk\/valhalla\/valuetypes\/WeakReferenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm AnonymousValue\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses AnonymousValue\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AnonymousValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:none AnonymousValueType\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:none AnonymousValueType\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AnonymousValueType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xverify:none ArrayCreationWithQuestion\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ArrayCreationWithQuestion\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ArrayCreationWithQuestion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm ArrayRelationsTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ArrayRelationsTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ArrayRelationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main AttributesTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses AttributesTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AttributesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main AutoCloseableTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses AutoCloseableTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AutoCloseableTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xverify:none BoxValCastTest\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses BoxValCastTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BoxValCastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -ea CanonicalCtorTest\n+ * @run main\/othervm -ea -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CanonicalCtorTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CanonicalCtorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main\/othervm CastNullCheckTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CastNullCheckTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CastNullCheckTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ChainedAssignmentTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ChainedAssignmentTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ChainedAssignmentTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm CheckFieldDescriptors\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CheckFieldDescriptors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFieldDescriptors.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm CheckFlattenableSyntheticFields\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CheckFlattenableSyntheticFields\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFlattenableSyntheticFields.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm CheckLocalClasses\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CheckLocalClasses\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckLocalClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -XX:+EnableValhalla CheckSeparateCompile\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CheckSeparateCompile\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckSeparateCompile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main ClassLiteralTypingTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ClassLiteralTypingTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralTypingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm CompilerNoBogusAssert\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CompilerNoBogusAssert\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CompilerNoBogusAssert.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main ConditionalInlineTypeTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ConditionalInlineTypeTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConditionalInlineTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:none ConstantPropagationTest\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ConstantPropagationTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConstantPropagationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm CtorChain\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CtorChain\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CtorChain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Dtest.compiler.opts=-release=13 DefaultNonInlines\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Dtest.compiler.opts=-release=13 DefaultNonInlines\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DefaultNonInlines.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main DefaultOfPrimitiveReference\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses DefaultOfPrimitiveReference\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DefaultOfPrimitiveReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main EnhancedForLoopTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses EnhancedForLoopTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/EnhancedForLoopTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ExplicitLambdaWithNullableTypes\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ExplicitLambdaWithNullableTypes\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ExplicitLambdaWithNullableTypes2\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ExplicitLambdaWithNullableTypes2\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ExplicitLambdaWithNullableTypes3\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ExplicitLambdaWithNullableTypes3\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ExplicitLambdaWithNullableTypes3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm GenericArrayRegression\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses GenericArrayRegression\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericArrayRegression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm GenericsAndValues5\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses GenericsAndValues5\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsAndValues5.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main GetClassTypingTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses GetClassTypingTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GetClassTypingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main InferredValueParameterizationTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InferredValueParameterizationTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InferredValueParameterizationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm InlineClassTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InlineClassTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main InlineDiamondTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InlineDiamondTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineDiamondTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm InnerClassAttributeValuenessTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InnerClassAttributeValuenessTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InnerClassAttributeValuenessTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm InnerValueNew\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses InnerValueNew\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InnerValueNew.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:none IntercastTest\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses IntercastTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IntercastTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:none IntercastTest2\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses IntercastTest2\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IntercastTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm LocalValueNew\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LocalValueNew\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LocalValueNew.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:none LookupOnLoxTest\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LookupOnLoxTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LookupOnLoxTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:none LookupOnLoxTest2\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LookupOnLoxTest2\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LookupOnLoxTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main LubWithInlines\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses LubWithInlines\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/LubWithInlines.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main NoCrashTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses NoCrashTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoCrashTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main NoUnnecessaryCast\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses NoUnnecessaryCast\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoUnnecessaryCast.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main OverloadingPhaseTest2\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses OverloadingPhaseTest2\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/OverloadingPhaseTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ParameterizedDefault\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ParameterizedDefault\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ParameterizedDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main PreloadAttributeTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses PreloadAttributeTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PreloadAttributeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xverify:none ProjectedArrayDotClass\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ProjectedArrayDotClass\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProjectedArrayDotClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main ProperTypeApplySelectTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ProperTypeApplySelectTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProperTypeApplySelectTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm QualifiedSuperCtor\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses QualifiedSuperCtor\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QualifiedSuperCtor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm QualifiedThisTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses QualifiedThisTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/QualifiedThisTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main RefDotClass\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses RefDotClass\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/RefDotClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main SeparateCompileGenerics\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SeparateCompileGenerics\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SeparateCompileGenerics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main SeparateCompileTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SeparateCompileTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SeparateCompileTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm SideEffectTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SideEffectTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SideEffectTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main SignatureTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SignatureTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SignatureTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main SmallSetTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SmallSetTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SmallSetTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main StaticSelectedThroughProjection\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses StaticSelectedThroughProjection\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/StaticSelectedThroughProjection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main StreamsTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses StreamsTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/StreamsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main SuperHashCodeEqualsToStringTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses SuperHashCodeEqualsToStringTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperHashCodeEqualsToStringTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm TestQualifierOnInit\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TestQualifierOnInit\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TestQualifierOnInit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main TestReflectiveMirrors\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TestReflectiveMirrors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TestReflectiveMirrors.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main ThisIsNotAnInstanceField\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ThisIsNotAnInstanceField\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ThisIsNotAnInstanceField.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm TypeRelationsTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses TypeRelationsTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TypeRelationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main UnannotatedProjection\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses UnannotatedProjection\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnannotatedProjection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main UnifiedPrimitiveClassBytecodeTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses UnifiedPrimitiveClassBytecodeTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassBytecodeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main UnifiedPrimitiveClassInnerClassesTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses UnifiedPrimitiveClassInnerClassesTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassInnerClassesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main UnifiedPrimitiveClassNestHostTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses UnifiedPrimitiveClassNestHostTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnifiedPrimitiveClassNestHostTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main ValRefTokensTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValRefTokensTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValRefTokensTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ValueAsEnclosingClass\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueAsEnclosingClass\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAsEnclosingClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Dvalue.bsm.salt=1 ValueBootstrapMethodsTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Dvalue.bsm.salt=1 ValueBootstrapMethodsTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueBootstrapMethodsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ValueConstructorRef\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueConstructorRef\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueConstructorRef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xverify:none ValueCreationTest\n+ * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueCreationTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueCreationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ValueNewReadWrite\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValueNewReadWrite\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueNewReadWrite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm ValuesAsRefs\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ValuesAsRefs\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValuesAsRefs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main WithFieldOfGenericType\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses WithFieldOfGenericType\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/WithFieldOfGenericType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm WithFieldRuntimeTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses WithFieldRuntimeTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/WithFieldRuntimeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main ApplicableAnnotationsOnPrimitiveRecords\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ApplicableAnnotationsOnPrimitiveRecords\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/records\/ApplicableAnnotationsOnPrimitiveRecords.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main ConstructorRefTest\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ConstructorRefTest\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConstructorRefTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}