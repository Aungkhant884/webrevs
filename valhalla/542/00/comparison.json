{"files":[{"patch":"@@ -1018,1 +1018,3 @@\n-        if (target.hasMethodParameters() && (options.isSet(PARAMETERS) || m.isConstructor() && (m.flags_field & RECORD) != 0)) {\n+        if (target.hasMethodParameters() && (options.isSet(PARAMETERS)\n+                        || m.isConstructor() && (m.flags_field & RECORD) != 0\n+                        || m.isPrimitiveObjectFactory() && (m.flags_field & RECORD) != 0)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -400,0 +400,1 @@\n+        factory.params = init.params;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransPrimitiveClass.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @summary [lworld] test for equal treatment of annotations on primitive records (copy of ApplicableAnnotationsOnRecords)\n+ * @bug 8273018\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @run main ApplicableAnnotationsOnPrimitiveRecords\n+ *\/\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.javac.util.Assert;\n+import java.lang.annotation.*;\n+import java.io.InputStream;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.FIELD})\n+@interface FieldAnnotation {\n+}\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.METHOD})\n+@interface MethodAnnotation {\n+}\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.PARAMETER})\n+@interface ParameterAnnotation {\n+}\n+\n+public primitive record ApplicableAnnotationsOnPrimitiveRecords(@FieldAnnotation @MethodAnnotation @ParameterAnnotation String s, @FieldAnnotation @MethodAnnotation @ParameterAnnotation int i) {\n+\n+    public static void main(String... args) throws Exception {\n+        try ( InputStream in = ApplicableAnnotationsOnPrimitiveRecords.class.getResourceAsStream(\"ApplicableAnnotationsOnPrimitiveRecords.class\")) {\n+            ClassFile cf = ClassFile.read(in);\n+            Assert.check(cf.methods.length > 5);\n+            for (Method m : cf.methods) {\n+                String methodName = m.getName(cf.constant_pool);\n+                if (methodName.equals(\"toString\") || methodName.equals(\"hashCode\") || methodName.equals(\"equals\") || methodName.equals(\"main\")) {\n+                    \/\/ ignore\n+                } else if (methodName.equals(\"<init>\")) {\n+                    var paAnnos = ((RuntimeVisibleParameterAnnotations_attribute) m.attributes.get(Attribute.RuntimeVisibleParameterAnnotations)).parameter_annotations;\n+                    Assert.check(paAnnos != null && paAnnos.length > 0);\n+                    for (var pa : paAnnos) {\n+                        Assert.check(pa.length == 1);\n+                        Assert.check(cf.constant_pool.getUTF8Value(pa[0].type_index).equals(\"LParameterAnnotation;\"));\n+                    }\n+                } else {\n+                    var annos = ((RuntimeAnnotations_attribute) m.attributes.get(Attribute.RuntimeVisibleAnnotations)).annotations;\n+                    Assert.check(annos.length == 1);\n+                    Assert.check(cf.constant_pool.getUTF8Value(annos[0].type_index).equals(\"LMethodAnnotation;\"));\n+                }\n+            }\n+            Assert.check(cf.fields.length > 0);\n+            for (Field field : cf.fields) {\n+                var annos = ((RuntimeAnnotations_attribute) field.attributes.get(Attribute.RuntimeVisibleAnnotations)).annotations;\n+                Assert.check(annos.length == 1);\n+                Assert.check(cf.constant_pool.getUTF8Value(annos[0].type_index).equals(\"LFieldAnnotation;\"));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/records\/ApplicableAnnotationsOnPrimitiveRecords.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @summary [lworld] test for equal treatment of primitive records from reflection\n+ * @bug 8273202\n+ * @run main ParametersOnPrimitiveRecords\n+ *\/\n+import java.lang.reflect.Parameter;\n+\n+public class ParametersOnPrimitiveRecords {\n+\n+    public record Simple(int i, String s) {\n+    }\n+\n+    public primitive record PrimitiveSimple(int i, String s) {\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        checkSimpleRecordClass(Simple.class);\n+        checkSimpleRecordClass(PrimitiveSimple.class);\n+    }\n+\n+    private static void checkSimpleRecordClass(Class<? extends Record> recordClass) throws Throwable {\n+        \/\/ Test that a class can be introspected and constructed.\n+        \/\/ If it's a primitive class, it will be wrapped in a .ref flavour implicitly.\n+        var r1 = checkAndConstructRecord(recordClass);\n+        var r2 = checkAndConstructRecord(recordClass);\n+        if (! r1.equals(r2)) {\n+            throw new AssertionError(recordClass.getCanonicalName() + \": \" + r1 + \" should be equal to \" + r2);\n+        }\n+    }\n+\n+    private static Object checkAndConstructRecord(Class<? extends Record> recordClass) throws Throwable {\n+        var className = recordClass.getCanonicalName();\n+        if (recordClass.getConstructors().length != 1) {\n+            throw new AssertionError(className\n+                    + \": Expected 1 constructor, got \" + recordClass.getConstructors().length);\n+        }\n+        var ctor = recordClass.getConstructors()[0];\n+        var parameters = ctor.getParameters();\n+        if (parameters.length != 2) {\n+            throw new AssertionError(className + \": Expected 2 parameters on <init>\");\n+        }\n+        checkParamName(className, parameters, 0, \"i\");\n+        checkParamName(className, parameters, 1, \"s\");\n+        return ctor.newInstance(123, \"One two three\");\n+    }\n+\n+    private static void checkParamName(String className, Parameter[] parameters, int position, String name) throws AssertionError {\n+        if (! parameters[0].getName().equals(\"i\")) {\n+            throw new AssertionError(\n+                    \"%s: Parameter %d should be '%s' but was '%s'\".formatted(\n+                            className,\n+                            position,\n+                            name,\n+                            parameters[position].getName()));\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/records\/ParametersOnPrimitiveRecords.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}