{"files":[{"patch":"@@ -120,0 +120,1 @@\n+    public static final int ACC_PERMITS_VALUE = 0x0040;\n@@ -147,0 +148,5 @@\n+    \/** Flag is set for an abstract class that meets the various needs\n+     *  that qualify it to be the super class of a value\/primitive class\n+     *\/\n+    public static final int PERMITS_VALUE            = 1<<19;\n+\n@@ -419,1 +425,1 @@\n-        LocalClassFlags                   = FINAL | ABSTRACT | ENUM | SYNTHETIC  | ACC_PRIMITIVE | ACC_VALUE,\n+        LocalClassFlags                   = FINAL | ABSTRACT | ENUM | SYNTHETIC  | ACC_PRIMITIVE | ACC_VALUE | ACC_PERMITS_VALUE,\n@@ -511,0 +517,1 @@\n+        PERMITS_VALUE(Flags.PERMITS_VALUE),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2345,1 +2345,1 @@\n-             * a synchronized method, it implicitly implements IdentityObject.\n+             * a synchronized instance method, it implicitly implements IdentityObject.\n@@ -2379,1 +2379,1 @@\n-                            if ((s.flags() & SYNCHRONIZED) != 0) {\n+                            if ((s.flags() & (SYNCHRONIZED | STATIC)) == SYNCHRONIZED) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1255,6 +1255,0 @@\n-                if (m.isConstructor() && m.type.getParameterTypes().size() == 0) {\n-                    if ((owner.type == syms.objectType) ||\n-                            (tree.body.stats.size() == 1 && TreeInfo.getConstructorInvocationName(tree.body.stats, names, false) == names._super)) {\n-                        m.flags_field |= EMPTYNOARGCONSTR;\n-                    }\n-                }\n@@ -1458,5 +1452,1 @@\n-            if ((tree.flags & STATIC) != 0)\n-                localEnv.info.staticLevel++;\n-            else if (tree.stats.size() > 0)\n-                env.info.scope.owner.flags_field |= HASINITBLOCK;\n-\n+            if ((tree.flags & STATIC) != 0) localEnv.info.staticLevel++;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -761,0 +761,4 @@\n+            if ((st.tsym.flags() & PERMITS_VALUE) != 0) {\n+                return;\n+            }\n+            \/\/ We have an unsuitable abstract super class, find out why exactly and complain\n@@ -1472,0 +1476,2 @@\n+            \/\/ ACC_PERMITS_VALUE a legal class flag, but not a legal class modifier\n+            mask &= ~ACC_PERMITS_VALUE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -232,0 +232,7 @@\n+\n+        if (m.isConstructor() && m.type.getParameterTypes().size() == 0) {\n+            if (tree.body.stats.size() == 0 || (m.flags() & GENERATEDCONSTR) != 0) {\n+                \/\/ generated constructors do have a super() call, but these are ignored for value classes.\n+                m.flags_field |= EMPTYNOARGCONSTR;\n+            }\n+        }\n@@ -252,0 +259,6 @@\n+    @Override\n+    public void visitBlock(JCBlock tree) {\n+        if ((tree.flags & STATIC) == 0 && tree.stats.size() > 0)\n+            env.info.scope.owner.flags_field |= HASINITBLOCK;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1096,0 +1096,8 @@\n+\n+            if (tree.sym != syms.objectType.tsym) {\n+                if ((tree.sym.flags() & (ABSTRACT | INTERFACE)) == ABSTRACT) {\n+                    if (types.asSuper(tree.sym.type, syms.identityObjectType.tsym) == null) {\n+                        tree.sym.flags_field |= PERMITS_VALUE;\n+                    }\n+                }\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2805,0 +2805,4 @@\n+        if ((flags & ACC_PERMITS_VALUE) != 0) {\n+            flags &= ~ACC_PERMITS_VALUE;\n+            flags |= PERMITS_VALUE;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -222,0 +222,6 @@\n+    \/** Return flags as a string, separated by \" \".\n+     *\/\n+    public static String classFlagNames(long flags) {\n+        return flagNames(flags).replace(\"VOLATILE\", \"PERMITS_VALUE\");\n+    }\n+\n@@ -837,1 +843,1 @@\n-                pw.println(\"---\" + flagNames(flags));\n+                pw.println(\"---\" + classFlagNames(flags));\n@@ -1569,1 +1575,1 @@\n-            pw.println(\"---\" + flagNames(flags));\n+            pw.println(\"---\" + classFlagNames(flags));\n@@ -1740,0 +1746,2 @@\n+        if ((flags & PERMITS_VALUE) != 0)\n+            result |= ACC_PERMITS_VALUE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    public static final int ACC_PERMITS_VALUE = 0x0040; \/\/  (non inner abstract) class\n@@ -92,1 +93,1 @@\n-        ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_PRIMITIVE, ACC_VALUE\n+        ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_PRIMITIVE, ACC_VALUE, ACC_PERMITS_VALUE\n@@ -236,1 +237,1 @@\n-            return (t == Kind.Field ? \"ACC_VOLATILE\" : \"ACC_BRIDGE\");\n+            return (t == Kind.Field ? \"ACC_VOLATILE\" : t == Kind.Method ? \"ACC_BRIDGE\" : \"ACC_PERMITS_VALUE\");\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/AccessFlags.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n---- SUPER ABSTRACT\n+--- SUPER PERMITS_VALUE ABSTRACT\n@@ -50,1 +50,1 @@\n---- STATIC ABSTRACT\n+--- STATIC PERMITS_VALUE ABSTRACT\n@@ -58,1 +58,1 @@\n---- SUPER ABSTRACT\n+--- SUPER PERMITS_VALUE ABSTRACT\n@@ -60,1 +60,1 @@\n---- PRIVATE STATIC ABSTRACT\n+--- PRIVATE STATIC PERMITS_VALUE ABSTRACT\n@@ -108,1 +108,1 @@\n---- PUBLIC SUPER ABSTRACT\n+--- PUBLIC SUPER PERMITS_VALUE ABSTRACT\n@@ -110,1 +110,1 @@\n---- PROTECTED STATIC ABSTRACT\n+--- PROTECTED STATIC PERMITS_VALUE ABSTRACT\n@@ -118,1 +118,1 @@\n---- PUBLIC SUPER ABSTRACT\n+--- PUBLIC SUPER PERMITS_VALUE ABSTRACT\n@@ -120,1 +120,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -237,1 +237,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -241,1 +241,1 @@\n---- PROTECTED STATIC ABSTRACT\n+--- PROTECTED STATIC PERMITS_VALUE ABSTRACT\n@@ -261,1 +261,1 @@\n---- PRIVATE STATIC ABSTRACT\n+--- PRIVATE STATIC PERMITS_VALUE ABSTRACT\n@@ -265,1 +265,1 @@\n---- STATIC ABSTRACT\n+--- STATIC PERMITS_VALUE ABSTRACT\n@@ -326,1 +326,1 @@\n---- PUBLIC SUPER ABSTRACT\n+--- PUBLIC SUPER PERMITS_VALUE ABSTRACT\n@@ -328,1 +328,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -331,1 +331,1 @@\n---- PUBLIC SUPER ABSTRACT\n+--- PUBLIC SUPER PERMITS_VALUE ABSTRACT\n@@ -333,1 +333,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -336,1 +336,1 @@\n---- PUBLIC SUPER ABSTRACT\n+--- PUBLIC SUPER PERMITS_VALUE ABSTRACT\n@@ -338,1 +338,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -341,1 +341,1 @@\n---- PUBLIC SUPER ABSTRACT\n+--- PUBLIC SUPER PERMITS_VALUE ABSTRACT\n@@ -343,1 +343,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -404,1 +404,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -406,1 +406,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -408,1 +408,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n@@ -410,1 +410,1 @@\n---- PUBLIC STATIC ABSTRACT\n+--- PUBLIC STATIC PERMITS_VALUE ABSTRACT\n","filename":"test\/langtools\/tools\/javac\/ClassFileModifiers\/ClassModifiers.out","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        setPrefix(\"class Anonymous {} {new Anonymous() {\");\n+        setPrefix(\"class Anonymous { int f; } {new Anonymous() {\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInAnonymousClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            sb.append(\"class Local {\");\n+            sb.append(\"class Local { int f; \");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInLocalClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -283,0 +283,2 @@\n+            if (outerClassType == ClassType.CLASS && outerMod.contains(Modifier.ABSTRACT))\n+                sb.append(\"int f;\\n\");\n@@ -293,0 +295,2 @@\n+                String instField = innerClassType == ClassType.CLASS && innerMod.contains(Modifier.ABSTRACT) ?\n+                                                \"int f; \" : \"\"; \/\/ inhibit PERMITS_VALUE\n@@ -294,1 +298,1 @@\n-                sb.append(String.format(\"%s A%d {%s}\\n\", innerClassType, count, privateConstructor));\n+                sb.append(String.format(\"%s A%d { %s %s}\\n\", innerClassType, count, instField, privateConstructor));\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTestBase.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+ * @ignore\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/OverwriteBetweenCompilations.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+SuperclassConstraints.java:68:15: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassConstraints.SuperWithEmptyNoArgCtor_01(), SuperclassConstraints.I8, SuperclassConstraints.SuperWithEmptyNoArgCtor_01\n@@ -8,1 +9,1 @@\n-7 errors\n+8 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperclassConstraints.out","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8280194\n+ * @summary Abstract classes that allow value subclasses should be marked ACC_PERMITS_VALUE (0x0040)\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @run main PermitsValueTest\n+ *\/\n+\n+import com.sun.tools.classfile.*;\n+\n+public class PermitsValueTest {\n+\n+    static abstract class A0 extends PermitsValueTest {\n+       \/\/ Not ACC_PERMITS_VALUE as it extends an identity class.\n+    }\n+\n+    static abstract class A1 implements IdentityObject {\n+       \/\/ Not ACC_PERMITS_VALUE as it implements IdentityObject\n+    }\n+\n+    static abstract class A2 {\n+        int f; \/\/ Not ACC_PERMITS_VALUE as it declares an instance field.\n+    }\n+\n+    static abstract class A3 extends A2 {\n+        \/\/ Not ACC_PERMITS_VALUE as it extends an implicit identity class.\n+    }\n+\n+    static abstract class A4 {\n+        \/\/ Not ACC_PERMITS_VALUE as it declares a non-empty initializer block.\n+        {\n+            System.out.println(\"initializer block\");\n+        }\n+    }\n+\n+    static abstract class A5 extends A4 {\n+        \/\/ Not ACC_PERMITS_VALUE as it extends an implicit identity class.\n+    }\n+\n+    static abstract class A6 {\n+        \/\/ Not ACC_PERMITS_VALUE as declares a synchronized method.\n+        synchronized void foo() {\n+        }\n+    }\n+\n+    static abstract class A7 extends A6 {\n+        \/\/ Not ACC_PERMITS_VALUE as it extends an implicit identity class.\n+    }\n+\n+    abstract class A8 {\n+        \/\/ Not ACC_PERMITS_VALUE as it is an inner class\n+    }\n+\n+    static abstract class A9 {\n+        \/\/ Not ACC_PERMITS_VALUE as it defines a arg'ed constructor.\n+        A9(int x) {}\n+    }\n+\n+    static abstract class A10 {\n+        \/\/ Not ACC_PERMITS_VALUE as it defines a non empty constructor.\n+        A10() {\n+            super();\n+        }\n+    }\n+\n+    static abstract class A11 { \/\/ Permits value.\n+        static int f; \/\/ static field is OK.\n+        static {\n+            System.out.println(\"Static initializer block is OK\");\n+        }\n+        A11() {\n+            \/\/ empty constructor is OK.\n+        }\n+        static synchronized void foo() {\n+            \/\/ static method may be synchronized.\n+        }\n+        {\n+            \/\/ empty init block is OK.\n+        }\n+    }\n+\n+    static abstract class A12 extends A11 implements ValueObject {\n+        \/\/ Permits value\n+    }\n+\n+    static abstract class A13 extends A12 {\n+        \/\/ Permits value\n+    }\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        ClassFile cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A0.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A1.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A2.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A3.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A4.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A5.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A6.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A7.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A8.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A9.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A10.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should not be set!\");\n+\n+\n+        \/\/ The following are all proper ACC_PERMITS_VALUE classes\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A11.class\"));\n+        if (!cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A12.class\"));\n+        if (!cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should be set!\");\n+\n+        cls = ClassFile.read(PermitsValueTest.class.getResourceAsStream(\"PermitsValueTest$A13.class\"));\n+        if (!cls.access_flags.is(AccessFlags.ACC_PERMITS_VALUE))\n+            throw new Exception(\"ACC_PERMITS_VALUE flag should be set!\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/PermitsValueTest.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}