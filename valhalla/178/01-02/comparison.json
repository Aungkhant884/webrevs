{"files":[{"patch":"@@ -2644,1 +2644,1 @@\n-    \/\/ Handle objArrays (including non-flat, null-free inline type arrays) completely differently...\n+    \/\/ Handle objArrays completely differently...\n@@ -2647,1 +2647,1 @@\n-    __ jcc(Assembler::greaterEqual, L_objArray);\n+    __ jcc(Assembler::equal, L_objArray);\n@@ -2657,1 +2657,1 @@\n-    \/\/ Check for flat inline type array\n+    \/\/ Check for flat inline type array -> return -1\n@@ -2661,0 +2661,4 @@\n+    \/\/ Check for null-free (non-flat) inline type array -> handle as object array\n+    __ testl(rax_lh, Klass::_lh_null_free_bit_inplace);\n+    __ jcc(Assembler::notZero, L_objArray);\n+\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2987,0 +2987,22 @@\n+\n+    \/\/ Arraycopy with non-array src\/dst\n+    @Test\n+    public void test129(Object src, Object dst, int len) {\n+        System.arraycopy(src, 0, dst, 0, len);\n+    }\n+\n+    @DontCompile\n+    public void test129_verifier(boolean warmup) {\n+        try {\n+            test129(new Object(), new Object[0], 0);\n+            throw new RuntimeException(\"ArrayStoreException expected\");\n+        } catch (ArrayStoreException e) {\n+            \/\/ expected\n+        }\n+        try {\n+            test129(new Object[0], new Object(), 0);\n+            throw new RuntimeException(\"ArrayStoreException expected\");\n+        } catch (ArrayStoreException e) {\n+            \/\/ expected\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}