{"files":[{"patch":"@@ -3896,1 +3896,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -3899,1 +3899,1 @@\n-      __ tstw(tmp, JVM_ACC_IS_BOX_CLASS);\n+      __ tstw(tmp, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -749,1 +749,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -752,1 +752,1 @@\n-      tstw(tmp, JVM_ACC_IS_BOX_CLASS);\n+      tstw(tmp, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -111,1 +111,1 @@\n-    testbitdi(CCR0, R0, Rscratch, exact_log2(JVM_ACC_IS_BOX_CLASS));\n+    testbitdi(CCR0, R0, Rscratch, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -913,1 +913,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -916,1 +916,1 @@\n-      testbitdi(CCR0, R0, tmp, exact_log2(JVM_ACC_IS_BOX_CLASS));\n+      testbitdi(CCR0, R0, tmp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2821,1 +2821,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -2824,1 +2824,1 @@\n-    testbitdi(flag, R0, temp, exact_log2(JVM_ACC_IS_BOX_CLASS));\n+    testbitdi(flag, R0, temp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1002,1 +1002,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -1004,1 +1004,1 @@\n-    testbit(Address(Z_R1_scratch, Klass::access_flags_offset()), exact_log2(JVM_ACC_IS_BOX_CLASS));\n+    testbit(Address(Z_R1_scratch, Klass::access_flags_offset()), exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+  if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -491,1 +491,1 @@\n-    testl(tmpReg, JVM_ACC_IS_BOX_CLASS);\n+    testl(tmpReg, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1222,1 +1222,1 @@\n-    if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n+    if (DiagnoseSyncOnValueBasedClasses != 0) {\n@@ -1225,1 +1225,1 @@\n-      testl(tmp_reg, JVM_ACC_IS_BOX_CLASS);\n+      testl(tmp_reg, JVM_ACC_IS_VALUE_BASED_CLASS);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1094,0 +1094,1 @@\n+    _jdk_internal_ValueBased,\n@@ -2150,0 +2151,5 @@\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_ValueBased_signature): {\n+      if (_location != _in_class)   break;  \/\/ only allow for classes\n+      if (!privileged)              break;  \/\/ only allow in priviledged code\n+      return _jdk_internal_ValueBased;\n+    }\n@@ -2193,1 +2199,10 @@\n-  ik->set_is_contended(is_contended());\n+  if (has_annotation(_jdk_internal_vm_annotation_Contended)) {\n+    ik->set_is_contended(is_contended());\n+  }\n+  if (has_annotation(_jdk_internal_ValueBased)) {\n+    ik->set_has_value_based_class_annotation();\n+    if (DiagnoseSyncOnValueBasedClasses) {\n+      ik->set_is_value_based();\n+      ik->set_prototype_header(markWord::prototype());\n+    }\n+  }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2145,8 +2145,0 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0) {\n-    for (int i = T_BOOLEAN; i < T_LONG + 1; i++) {\n-      assert(_box_klasses[i] != NULL, \"NULL box class\");\n-      _box_klasses[i]->set_is_box();\n-      _box_klasses[i]->set_prototype_header(markWord::prototype());\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -252,0 +252,1 @@\n+  template(jdk_internal_ValueBased_signature,                                \"Ljdk\/internal\/ValueBased;\") \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-  <Event name=\"SyncOnPrimitiveWrapper\" category=\"Java Virtual Machine, Diagnostics\" label=\"Primitive Wrapper Synchronization\" thread=\"true\" stackTrace=\"true\" startTime=\"false\" experimental=\"true\">\n-    <Field type=\"Class\" name=\"boxClass\" label=\"Boxing Class\" \/>\n+  <Event name=\"SyncOnValueBasedClass\" category=\"Java Virtual Machine, Diagnostics\" label=\"Value Based Class Synchronization\" thread=\"true\" stackTrace=\"true\" startTime=\"false\" experimental=\"true\">\n+    <Field type=\"Class\" name=\"valueBasedClass\" label=\"Value Based Class\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2603,0 +2603,6 @@\n+\n+  \/\/ Initialize @ValueBased class annotation\n+  if (DiagnoseSyncOnValueBasedClasses && has_value_based_class_annotation()) {\n+    set_is_value_based();\n+    set_prototype_header(markWord::prototype());\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4240,3 +4240,3 @@\n-  if (FLAG_IS_CMDLINE(DiagnoseSyncOnPrimitiveWrappers)) {\n-    if (DiagnoseSyncOnPrimitiveWrappers == ObjectSynchronizer::LOG_WARNING && !log_is_enabled(Info, primitivewrappers)) {\n-      LogConfiguration::configure_stdout(LogLevel::Info, true, LOG_TAGS(primitivewrappers));\n+  if (FLAG_IS_CMDLINE(DiagnoseSyncOnValueBasedClasses)) {\n+    if (DiagnoseSyncOnValueBasedClasses == ObjectSynchronizer::LOG_WARNING && !log_is_enabled(Info, valuebasedclasses)) {\n+      LogConfiguration::configure_stdout(LogLevel::Info, true, LOG_TAGS(valuebasedclasses));\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -854,1 +854,1 @@\n-  product(intx, DiagnoseSyncOnPrimitiveWrappers, 0, DIAGNOSTIC,             \\\n+  product(intx, DiagnoseSyncOnValueBasedClasses, 0, DIAGNOSTIC,             \\\n@@ -856,1 +856,1 @@\n-             \"primitive wrappers. Modes: \"                                  \\\n+             \"value based classes. Modes: \"                                 \\\n@@ -860,1 +860,1 @@\n-             \"   -Xlog:primitivewrappers. If JFR is running it will \"       \\\n+             \"   -Xlog:valuebasedclasses. If JFR is running it will \"       \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -336,1 +336,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0 && obj->klass()->is_box()) {\n+  if (obj->klass()->is_value_based()) {\n@@ -390,2 +390,2 @@\n-\/\/ Handle notifications when synchronizing on primitive wrappers\n-void ObjectSynchronizer::handle_sync_on_primitive_wrapper(Handle obj, Thread* current) {\n+\/\/ Handle notifications when synchronizing on value based classes\n+void ObjectSynchronizer::handle_sync_on_value_based_class(Handle obj, Thread* current) {\n@@ -395,1 +395,6 @@\n-  if (last_frame.is_interpreted_frame()) {\n+  bool bcp_was_adjusted = false;\n+  \/\/ Don't decrement bcp if it points to the frame's first instruction.  This happens when\n+  \/\/ handle_sync_on_value_based_class() is called because of a synchronized method.  There\n+  \/\/ is no actual monitorenter instruction in the byte code in this case.\n+  if (last_frame.is_interpreted_frame() &&\n+      (last_frame.interpreter_frame_method()->code_base() < last_frame.interpreter_frame_bcp())) {\n@@ -398,0 +403,1 @@\n+    bcp_was_adjusted = true;\n@@ -400,1 +406,1 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers == FATAL_EXIT) {\n+  if (DiagnoseSyncOnValueBasedClasses == FATAL_EXIT) {\n@@ -411,1 +417,1 @@\n-    assert(DiagnoseSyncOnPrimitiveWrappers == LOG_WARNING, \"invalid value for DiagnoseSyncOnPrimitiveWrappers\");\n+    assert(DiagnoseSyncOnValueBasedClasses == LOG_WARNING, \"invalid value for DiagnoseSyncOnValueBasedClasses\");\n@@ -413,1 +419,1 @@\n-    Log(primitivewrappers) pwlog;\n+    Log(valuebasedclasses) vblog;\n@@ -415,1 +421,1 @@\n-    pwlog.info(\"Synchronizing on object \" INTPTR_FORMAT \" of klass %s\", p2i(obj()), obj->klass()->external_name());\n+    vblog.info(\"Synchronizing on object \" INTPTR_FORMAT \" of klass %s\", p2i(obj()), obj->klass()->external_name());\n@@ -417,1 +423,1 @@\n-      LogStream info_stream(pwlog.info());\n+      LogStream info_stream(vblog.info());\n@@ -420,1 +426,1 @@\n-      pwlog.info(\"Cannot find the last Java frame\");\n+      vblog.info(\"Cannot find the last Java frame\");\n@@ -423,1 +429,1 @@\n-    EventSyncOnPrimitiveWrapper event;\n+    EventSyncOnValueBasedClass event;\n@@ -425,1 +431,1 @@\n-      event.set_boxClass(obj->klass());\n+      event.set_valueBasedClass(obj->klass());\n@@ -430,1 +436,1 @@\n-  if (last_frame.is_interpreted_frame()) {\n+  if (bcp_was_adjusted) {\n@@ -442,2 +448,2 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0 && obj->klass()->is_box()) {\n-    handle_sync_on_primitive_wrapper(obj, THREAD);\n+  if (obj->klass()->is_value_based()) {\n+    handle_sync_on_value_based_class(obj, THREAD);\n@@ -589,2 +595,2 @@\n-  if (DiagnoseSyncOnPrimitiveWrappers != 0 && obj->klass()->is_box()) {\n-    handle_sync_on_primitive_wrapper(obj, THREAD);\n+  if (obj->klass()->is_value_based()) {\n+    handle_sync_on_value_based_class(obj, THREAD);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-  static void handle_sync_on_primitive_wrapper(Handle obj, Thread* current);\n+  static void handle_sync_on_value_based_class(Handle obj, Thread* current);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n- *\n@@ -123,3 +122,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code Period} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n@@ -133,0 +133,1 @@\n+@jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/time\/Period.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    @jdk.internal.ValueBased\n@@ -250,0 +251,1 @@\n+    @jdk.internal.ValueBased\n@@ -543,0 +545,1 @@\n+    @jdk.internal.ValueBased\n@@ -649,0 +652,1 @@\n+    @jdk.internal.ValueBased\n@@ -740,0 +744,1 @@\n+    @jdk.internal.ValueBased\n@@ -767,0 +772,1 @@\n+    @jdk.internal.ValueBased\n@@ -892,0 +898,1 @@\n+    @jdk.internal.ValueBased\n@@ -1058,0 +1065,1 @@\n+    @jdk.internal.ValueBased\n@@ -1088,0 +1096,1 @@\n+    @jdk.internal.ValueBased\n@@ -1154,0 +1163,1 @@\n+    @jdk.internal.ValueBased\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -110,4 +110,6 @@\n- * Callers should make no assumptions about the identity of the returned instances.\n- * Factories are free to create new instances or reuse existing ones. Therefore,\n- * identity-sensitive operations on these instances (reference equality ({@code ==}),\n- * identity hash code, and synchronization) are unreliable and should be avoided.\n+ * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n+ * as interchangeable and should not use them for synchronization, or\n+ * unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. Callers should make no assumptions about the\n+ * identity of the returned instances. Factories are free to\n+ * create new instances or reuse existing ones.\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1743,0 +1743,3 @@\n+        if (env.info.lint.isEnabled(LintCategory.SYNCHRONIZATION) && isValueBased(tree.lock.type)) {\n+            log.warning(LintCategory.SYNCHRONIZATION, tree.pos(), Warnings.AttemptToSynchronizeOnInstanceOfValueBasedClass);\n+        }\n@@ -1746,0 +1749,12 @@\n+        \/\/ where\n+        private boolean isValueBased(Type t) {\n+            if (t != null && t.tsym != null) {\n+                for (Attribute.Compound a: t.tsym.getDeclarationAttributes()) {\n+                    if (a.type.tsym == syms.valueBasedType.tsym) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- *\n@@ -50,3 +49,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code GroupLayout} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/GroupLayout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,3 +43,3 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemoryAddress} may have unpredictable results and should be avoided. The {@code equals} method should\n- * be used for comparisons.\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,3 +80,3 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemoryLayout} may have unpredictable results and should be avoided. The {@code equals} method should\n- * be used for comparisons.\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,3 +53,3 @@\n- * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on\n- * instances of {@code MemorySegment} may have unpredictable results and should be avoided. The {@code equals} method should\n- * be used for comparisons.\n+ * programmers should treat instances that are {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may occur. For example, in a future release,\n+ * synchronization may fail. The {@code equals} method should be used for comparisons.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,3 +41,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code PaddingLayout} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/PaddingLayout.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,3 +58,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code SequenceLayout} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SequenceLayout.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,3 +43,4 @@\n- * class; use of identity-sensitive operations (including reference equality\n- * ({@code ==}), identity hash code, or synchronization) on instances of\n- * {@code ValueLayout} may have unpredictable results and should be avoided.\n+ * class; programmers should treat instances that are\n+ * {@linkplain #equals(Object) equal} as interchangeable and should not\n+ * use instances for synchronization, or unpredictable behavior may\n+ * occur. For example, in a future release, synchronization may fail.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}