{"files":[{"patch":"@@ -332,1 +332,1 @@\n-                if (env.info.inWithField && v.getKind() == ElementKind.FIELD && (v.flags() & STATIC) == 0 && v.owner.type.isPrimitiveClass()) {\n+                if (env.info.inWithField && v.getKind() == ElementKind.FIELD && (v.flags() & STATIC) == 0 && v.owner.type.isValueClass()) {\n@@ -1334,1 +1334,1 @@\n-                if ((v.flags_field & FINAL) == 0 || ((v.flags_field & STATIC) == 0 && v.owner.isPrimitiveClass()) ||\n+                if ((v.flags_field & FINAL) == 0 || ((v.flags_field & STATIC) == 0 && (v.owner.isPrimitiveClass() || v.owner.isValueClass())) ||\n@@ -1537,2 +1537,2 @@\n-                        (sym.flags() & STATIC) != 0 || !sym.owner.type.isPrimitiveClass()) {\n-                    log.error(tree.field.pos(), Errors.PrimitiveClassInstanceFieldExpectedHere);\n+                        (sym.flags() & STATIC) != 0 || !sym.owner.type.isValueClass()) {\n+                    log.error(tree.field.pos(), Errors.ValueClassInstanceFieldExpectedHere);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-            if ((v.flags_field & FINAL) != 0 && ((v.flags_field & STATIC) != 0 || !v.owner.isPrimitiveClass()) &&\n+            if ((v.flags_field & FINAL) != 0 && ((v.flags_field & STATIC) != 0 || !v.owner.isValueClass()) &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3940,2 +3940,2 @@\n-compiler.err.primitive.class.instance.field.expected.here=\\\n-    withfield operator requires an instance field of a primitive class here\n+compiler.err.value.class.instance.field.expected.here=\\\n+    withfield operator requires an instance field of a value class here\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-\/\/ key: compiler.err.primitive.class.instance.field.expected.here\n+\/\/ key: compiler.err.value.class.instance.field.expected.here\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassInstanceFieldExpectedHere.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-            x = __WithField(x.v, null); \/\/ null cannot be assigned to value\n+            x = __WithField(x.v, null); \/\/ null cannot be assigned to primitive class instance\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOperatorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,3 +2,3 @@\n-WithFieldOperatorTest.java:26:33: compiler.err.primitive.class.instance.field.expected.here\n-WithFieldOperatorTest.java:27:33: compiler.err.primitive.class.instance.field.expected.here\n-WithFieldOperatorTest.java:28:29: compiler.err.primitive.class.instance.field.expected.here\n+WithFieldOperatorTest.java:26:33: compiler.err.value.class.instance.field.expected.here\n+WithFieldOperatorTest.java:27:33: compiler.err.value.class.instance.field.expected.here\n+WithFieldOperatorTest.java:28:29: compiler.err.value.class.instance.field.expected.here\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOperatorTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @summary Check various semantic constraints on value creation via default\n+ *\n+ * @compile\/fail\/ref=CheckMakeDefault.out -XDallowWithFieldOperator -XDrawDiagnostics CheckMakeDefault.java\n+ *\/\n+value final class Point {\n+\n+    value interface I { int x = 10; } \/\/ Error\n+    value abstract class A { int x = 10; } \/\/ Error\n+    static final class Sinner {\n+        static Sinner make() {\n+            return Sinner.default;\n+        }\n+    }\n+\n+    value static final class SinnerValue {\n+        static SinnerValue make() {\n+            return SinnerValue.default;\n+        } int x = 10;\n+    }\n+\n+    final int x;\n+    final int y;\n+\n+    final int nonbool = boolean.default;\n+    final boolean nonbyte = byte.default;\n+    final boolean nonchar = char.default;\n+    final boolean nonint = int.default;\n+    final boolean nonshort = short.default;\n+    final boolean nonlong = long.default;\n+    final boolean nonfloat = float.default;\n+    final boolean nondouble = double.default;\n+    final int nonString = String.default;\n+    final int nonbyteArray = byte[].default;\n+\n+    Point() {}\n+    Point (int x, int y) {}\n+\n+    static Point make(int x, int y) {\n+       Point p = Point.default;\n+       String s = String.default;\n+       Object o = SinnerValue.default;\n+       p = Point.default;\n+       p = __WithField(p.x, x);\n+       p = __WithField(p.y, y);\n+       return p;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckMakeDefault.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+CheckMakeDefault.java:9:11: compiler.err.illegal.combination.of.modifiers: interface, value\n+CheckMakeDefault.java:10:20: compiler.err.illegal.combination.of.modifiers: abstract, value\n+CheckMakeDefault.java:26:32: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: boolean, int)\n+CheckMakeDefault.java:27:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: byte, boolean)\n+CheckMakeDefault.java:28:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: char, boolean)\n+CheckMakeDefault.java:29:31: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, boolean)\n+CheckMakeDefault.java:30:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: short, boolean)\n+CheckMakeDefault.java:31:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: long, boolean)\n+CheckMakeDefault.java:32:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: float, boolean)\n+CheckMakeDefault.java:33:37: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: double, boolean)\n+CheckMakeDefault.java:34:33: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, int)\n+CheckMakeDefault.java:35:36: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: byte[], int)\n+12 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckMakeDefault.out","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Check constant propagation behavior\n+ * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n+ * @compile ConstantPropagationTest.java\n+ * @run main\/othervm -Xverify:none ConstantPropagationTest\n+ * @modules jdk.compiler\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Paths;\n+\n+public class ConstantPropagationTest {\n+\n+    static final value class X {\n+        static final int sfif = 8888;\n+        final int ifif = 9999;\n+        static void foo(X x) {\n+            System.out.println(sfif);\n+            System.out.println(x.ifif);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new ConstantPropagationTest().run();\n+    }\n+\n+    void run() {\n+        String [] params = new String [] { \"-v\",\n+                                            Paths.get(System.getProperty(\"test.classes\"),\n+                                                \"ConstantPropagationTest$X.class\").toString() };\n+        runCheck(params, new String [] {\n+\n+         \"ConstantValue: int 8888\",\n+         \"3: sipush        8888\",\n+         }, new String [] {\n+         \"ConstantValue: int 9999\"\n+         });\n+\n+     }\n+\n+     void runCheck(String [] params, String [] expectedOut, String [] unexpectedOut) {\n+        StringWriter s;\n+        String out;\n+\n+        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n+            com.sun.tools.javap.Main.run(params, pw);\n+            out = s.toString();\n+        }\n+        int errors = 0;\n+        for (String eo: expectedOut) {\n+            if (!out.contains(eo)) {\n+                System.err.println(\"Match not found for string: \" + eo);\n+                errors++;\n+            }\n+        }\n+        for (String eo: unexpectedOut) {\n+            if (out.contains(eo)) {\n+                System.err.println(\"Unexpected output found for string: \" + eo);\n+                errors++;\n+            }\n+        }\n+        if (errors > 0) {\n+             throw new AssertionError(\"Unexpected javap output: \" + out);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ConstantPropagationTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8197911\n+ * @summary Test Javac's treatment of null assignment to value instances\n+ * @compile -XDallowWithFieldOperator -XDrawDiagnostics -XDdev FlattenableTest.java\n+ *\/\n+\n+public class FlattenableTest {\n+    value final class V {\n+        final int x = 10;\n+\n+        value final class X {\n+            final V v = null;  \/\/ OK: initialization for value classes\n+            final V v2 = v;    \/\/ OK, null not constant propagated.\n+\n+            V foo(X x) {\n+                x = __WithField(x.v, null);  \/\/ OK: withfield is permitted here.\n+                return x.v;\n+            }\n+        }\n+        V foo(X x) {\n+            x = __WithField(x.v, null); \/\/ OK: withfield is permitted here.\n+            return x.v;\n+        }\n+\n+        class Y {\n+            V v;\n+            V [] va = { null }; \/\/ OK: array initialization\n+            V [] va2 = new V[] { null }; \/\/ OK: array initialization\n+            void foo(X x) {\n+                x = __WithField(x.v, null); \/\/ OK: withfield is permitted here.\n+                v = null; \/\/ legal assignment.\n+                va[0] = null; \/\/ legal.\n+                va = new V[] { null }; \/\/ legal\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/FlattenableTest.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8206147\n+ * @summary WithField operation on a private inner field should be enclosed in a suitable accessor method.\n+ * @compile -XDallowWithFieldOperator WithFieldAccessorTest.java\n+ * @run main\/othervm WithFieldAccessorTest\n+ *\/\n+\n+public class WithFieldAccessorTest {\n+\n+    public static final value class V {\n+        private final int i;\n+        V() {\n+            this.i = 0;\n+        }\n+\n+        public static V make(int i) {\n+            V v = V.default;\n+            v = __WithField(v.i, i);\n+            return v;\n+        }\n+    }\n+\n+    public static void main(String... args) throws Throwable {\n+        V v = __WithField(V.make(10).i, 20);\n+        if (v.i != 20)\n+            throw new AssertionError(\"Withfield didn't work!\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldAccessorTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @summary Check various withfield constrains\n+ *\n+ * @compile\/fail\/ref=WithFieldNegativeTests.out -XDrawDiagnostics WithFieldNegativeTests.java\n+ *\/\n+\n+value final class A {\n+    final int x = 10;\n+    static final int sx = 10;\n+\n+    value final class B {\n+\n+        final A a = A.default;\n+\n+        void foo(A a) {\n+            a.x = 100;\n+            a.sx = 100;\n+        }\n+    }\n+\n+    void withfield(B b) {\n+            b.a.x = 11;\n+    }\n+\n+    void foo(A a, final A fa) {\n+        a.x = 100;\n+        (a).x = 100;\n+        fa.x = 100;\n+        x = 100;\n+        this.x = 100;\n+        A.this.x = 100;\n+    }\n+}\n+\n+class C {\n+    void foo(A a) {\n+        a.x = 100;\n+        a.sx = 100;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldNegativeTests.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldNegativeTests.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldNegativeTests.out","status":"copied"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Check code generation for value creation ops\n+ * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n+ * @compile -XDallowWithFieldOperator WithFieldOfExplicitSelector.java\n+ * @run main\/othervm -Xverify:none WithFieldOfExplicitSelector\n+ * @modules jdk.compiler\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Paths;\n+\n+public class WithFieldOfExplicitSelector {\n+\n+    final value class X {\n+\n+        final int i;\n+\n+        X() {\n+            i = 10;\n+        }\n+\n+        X getX(int i, Integer in) {\n+            X xl = __WithField(this.i, i);\n+            xl = __WithField(xl.i, in);\n+            return xl;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new WithFieldOfExplicitSelector().run();\n+    }\n+\n+    void run() {\n+        String [] params = new String [] { \"-v\",\n+                                            Paths.get(System.getProperty(\"test.classes\"),\n+                                                \"WithFieldOfExplicitSelector$X.class\").toString() };\n+        runCheck(params, new String [] {\n+\n+         \"0: iload_1\",\n+         \"1: aload_0\",\n+         \"2: swap\",\n+         \"3: withfield     #7                  \/\/ Field i:I\",\n+         \"6: astore_3\",\n+         \"7: aload_2\",\n+         \"8: invokevirtual #11                 \/\/ Method java\/lang\/Integer.intValue:()I\",\n+        \"11: aload_3\",\n+        \"12: swap\",\n+        \"13: withfield     #7                  \/\/ Field i:I\",\n+        \"16: astore_3\",\n+        \"17: aload_3\",\n+        \"18: areturn\"\n+         });\n+     }\n+\n+     void runCheck(String [] params, String [] expectedOut) {\n+        StringWriter s;\n+        String out;\n+\n+        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n+            com.sun.tools.javap.Main.run(params, pw);\n+            out = s.toString();\n+        }\n+        int errors = 0;\n+        for (String eo: expectedOut) {\n+            if (!out.contains(eo)) {\n+                System.err.println(\"Match not found for string: \" + eo);\n+                errors++;\n+            }\n+        }\n+         if (errors > 0) {\n+             throw new AssertionError(\"Unexpected javap output: \" + out);\n+         }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOfExplicitSelector.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8205686 8215109\n+ * @summary __WithField seems to have trouble if the value type is a generic type.\n+ * @compile -XDrawDiagnostics -XDdev -XDallowWithFieldOperator WithFieldOfGenericType.java\n+ * @run main\/othervm WithFieldOfGenericType\n+ *\/\n+\n+public final value class WithFieldOfGenericType<E> {\n+  private final boolean value;\n+\n+  public static <E> WithFieldOfGenericType<E> create() {\n+    WithFieldOfGenericType<E> bug = WithFieldOfGenericType.default;\n+    bug = __WithField(bug.value, true);\n+    return bug;\n+  }\n+\n+  private WithFieldOfGenericType() {\n+    value = false;\n+    throw new AssertionError();\n+  }\n+\n+  public static void main(String[] args) {\n+     WithFieldOfGenericType<String> w = create();\n+     if (w.value != true)\n+        throw new AssertionError(\"Withfield didn't work!\");\n+  }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOfGenericType.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Check code generation for value creation ops\n+ * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n+ * @compile -XDallowWithFieldOperator WithFieldOfImplicitThis.java\n+ * @run main\/othervm -Xverify:none WithFieldOfImplicitThis\n+ * @modules jdk.compiler\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Paths;\n+\n+public class WithFieldOfImplicitThis {\n+\n+    final value class X {\n+\n+        final int x;\n+\n+        X() {\n+            x = 10;\n+        }\n+\n+        X getX(Integer xVal, int xi) {\n+            X xl = X.default;\n+            xl = __WithField(x, xi);\n+            xl = __WithField(x, xVal);\n+            return xl;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new WithFieldOfImplicitThis().run();\n+    }\n+\n+    void run() {\n+        String [] params = new String [] { \"-v\",\n+                                            Paths.get(System.getProperty(\"test.classes\"),\n+                                                \"WithFieldOfImplicitThis$X.class\").toString() };\n+        runCheck(params, new String [] {\n+\n+         \"0: aconst_init   #1                  \/\/ class WithFieldOfImplicitThis$X\",\n+         \"3: astore_3\",\n+         \"4: aload_0\",\n+         \"5: iload_2\",\n+         \"6: withfield     #7                  \/\/ Field x:I\",\n+         \"9: astore_3\",\n+        \"10: aload_0\",\n+        \"11: aload_1\",\n+        \"12: invokevirtual #11                 \/\/ Method java\/lang\/Integer.intValue:()I\",\n+        \"15: withfield     #7                  \/\/ Field x:I\",\n+        \"18: astore_3\",\n+        \"19: aload_3\",\n+        \"20: areturn\"\n+         });\n+     }\n+\n+     void runCheck(String [] params, String [] expectedOut) {\n+        StringWriter s;\n+        String out;\n+\n+        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n+            com.sun.tools.javap.Main.run(params, pw);\n+            out = s.toString();\n+        }\n+        int errors = 0;\n+        for (String eo: expectedOut) {\n+            if (!out.contains(eo)) {\n+                System.err.println(\"Match not found for string: \" + eo);\n+                errors++;\n+            }\n+        }\n+         if (errors > 0) {\n+             throw new AssertionError(\"Unexpected javap output: \" + out);\n+         }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOfImplicitThis.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @summary Verify that various errors related to __WithField operator are caught.\n+ * @compile\/fail\/ref=WithFieldOperatorTest.out -XDallowWithFieldOperator -XDrawDiagnostics -XDdev WithFieldOperatorTest.java\n+ *\/\n+\n+public class WithFieldOperatorTest {\n+    static int xs;\n+    int ifld;\n+    class Y {}\n+    public final value class V { int x = 10; }\n+\n+    public final value class X {\n+\n+        final int x;\n+        final V v;\n+\n+        X() {\n+            x = 10;\n+            v = V.default;\n+        }\n+\n+        X getX(int xVal, WithFieldOperatorTest wfot) {\n+            X x = X.default;\n+            x = __WithField(new Y(), null);  \/\/ not a variable at all.\n+            x = __WithField(wfot.xs, 10); \/\/ not an instance field.\n+            x = __WithField(wfot.ifld, 10); \/\/ not a field of value type\n+            x = __WithField(xVal, xVal); \/\/ not a field\n+            x = __WithField(this, this); \/\/ not a field\n+            x = __WithField(X.this, this); \/\/ not a field\n+            x = __WithField(x.x, 12.0); \/\/ float cannot be assigned to int\n+            x = __WithField(x.v, null);\n+            return x;\n+        }\n+    }\n+}\n+\n+class WithFieldOperatorTest_aux {\n+    void foo(WithFieldOperatorTest.X x) {\n+        x = __WithField(x.x, 10); \/\/ outside the nest\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOperatorTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+WithFieldOperatorTest.java:25:29: compiler.err.unexpected.type: kindname.variable, kindname.value\n+WithFieldOperatorTest.java:26:33: compiler.err.value.class.instance.field.expected.here\n+WithFieldOperatorTest.java:27:33: compiler.err.value.class.instance.field.expected.here\n+WithFieldOperatorTest.java:28:29: compiler.err.value.class.instance.field.expected.here\n+WithFieldOperatorTest.java:29:29: compiler.err.cant.assign.val.to.this\n+WithFieldOperatorTest.java:30:30: compiler.err.cant.assign.val.to.this\n+WithFieldOperatorTest.java:31:34: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: double, int)\n+WithFieldOperatorTest.java:40:26: compiler.err.cant.assign.val.to.final.var: x\n+8 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/WithFieldOperatorTest.out","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"}]}