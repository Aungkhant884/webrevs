{"files":[{"patch":"@@ -67,2 +67,2 @@\n-     * The modifier {@code value}\n-     * @since 1.11\n+     * The modifier {@code primitive}\n+     * @since 1.17\n@@ -70,1 +70,1 @@\n-    VALUE,\n+    PRIMITIVE,\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/Modifier.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -101,2 +101,2 @@\n-    \/** Marks a type as a value-type *\/\n-    public static final int VALUE        = 1<<16;\n+    \/** Marks a type as a primitive class *\/\n+    public static final int PRIMITIVE_CLASS  = 1<<16;\n@@ -113,1 +113,1 @@\n-    public static final int ACC_INLINE   = 0x0100;\n+    public static final int ACC_PRIMITIVE = 0x0100;\n@@ -404,1 +404,1 @@\n-        LocalClassFlags                   = FINAL | ABSTRACT | STRICTFP | ENUM | SYNTHETIC  | VALUE,\n+        LocalClassFlags                   = FINAL | ABSTRACT | STRICTFP | ENUM | SYNTHETIC  | PRIMITIVE_CLASS,\n@@ -419,1 +419,1 @@\n-        ExtendedStandardFlags             = (long)StandardFlags | DEFAULT | SEALED | NON_SEALED | VALUE,\n+        ExtendedStandardFlags             = (long)StandardFlags | DEFAULT | SEALED | NON_SEALED | PRIMITIVE_CLASS,\n@@ -450,1 +450,1 @@\n-            if (0 != (flags & VALUE))     modifiers.add(Modifier.VALUE);\n+            if (0 != (flags & PRIMITIVE_CLASS))     modifiers.add(Modifier.PRIMITIVE);\n@@ -497,1 +497,1 @@\n-        INLINE(Flags.VALUE),\n+        PRIMITIVE(Flags.PRIMITIVE_CLASS),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -417,2 +417,2 @@\n-    public boolean isValue() {\n-        return (flags() & VALUE) != 0;\n+    public boolean isPrimitiveClass() {\n+        return (flags() & PRIMITIVE_CLASS) != 0;\n@@ -1668,1 +1668,1 @@\n-            return projection != null && projection.isValue();\n+            return projection != null && projection.isPrimitiveClass();\n@@ -1678,1 +1678,1 @@\n-            if (!isValue())\n+            if (!isPrimitiveClass())\n@@ -1695,1 +1695,1 @@\n-            long projectionFlags = (this.flags() & ~(VALUE | UNATTRIBUTED | FINAL)) | SEALED;\n+            long projectionFlags = (this.flags() & ~(PRIMITIVE_CLASS | UNATTRIBUTED | FINAL)) | SEALED;\n@@ -1843,1 +1843,1 @@\n-            return this.owner.isValue() ?\n+            return this.owner.isPrimitiveClass() ?\n@@ -1850,1 +1850,1 @@\n-            return  projection != null ? projection.owner.isValue() ? projection : null: null;\n+            return  projection != null ? projection.owner.isPrimitiveClass() ? projection : null: null;\n@@ -2209,1 +2209,1 @@\n-            if (origin.isValue())\n+            if (origin.isPrimitiveClass())\n@@ -2212,1 +2212,1 @@\n-            if (this.owner.isValue()) {\n+            if (this.owner.isPrimitiveClass()) {\n@@ -2275,1 +2275,1 @@\n-            if (clazz.isValue())\n+            if (clazz.isPrimitiveClass())\n@@ -2277,1 +2277,1 @@\n-            if (this.owner.isValue())\n+            if (this.owner.isPrimitiveClass())\n@@ -2296,1 +2296,1 @@\n-            return this.owner.isValue() ?\n+            return this.owner.isPrimitiveClass() ?\n@@ -2303,1 +2303,1 @@\n-            return  projection != null ? projection.owner.isValue() ? projection : null : null;\n+            return  projection != null ? projection.owner.isPrimitiveClass() ? projection : null : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-                    if (type.isValue()) {\n+                    if (type.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-    public boolean isValue() {\n+    public boolean isPrimitiveClass() {\n@@ -1198,2 +1198,2 @@\n-        public boolean isValue() {\n-            return tsym != null && tsym.isValue();\n+        public boolean isPrimitiveClass() {\n+            return tsym != null && tsym.isPrimitiveClass();\n@@ -1232,1 +1232,1 @@\n-            if (!isValue() || projection != null)\n+            if (!isPrimitiveClass() || projection != null)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -609,2 +609,2 @@\n-        boolean tValue = t.isValue();\n-        boolean sValue = s.isValue();\n+        boolean tValue = t.isPrimitiveClass();\n+        boolean sValue = s.isPrimitiveClass();\n@@ -1010,2 +1010,2 @@\n-    public boolean isValue(Type t) {\n-        return t != null && t.tsym != null && (t.tsym.flags_field & Flags.VALUE) != 0;\n+    public boolean isPrimitiveClass(Type t) {\n+        return t != null && t.tsym != null && (t.tsym.flags_field & Flags.PRIMITIVE_CLASS) != 0;\n@@ -1040,1 +1040,1 @@\n-                    if (isValue(et)) {\n+                    if (isPrimitiveClass(et)) {\n@@ -1042,1 +1042,1 @@\n-                        if (isValue(es))\n+                        if (isPrimitiveClass(es))\n@@ -1144,1 +1144,1 @@\n-                         s.hasTag(BOT) || (s.hasTag(CLASS) && !isValue(s)) ||\n+                         s.hasTag(BOT) || (s.hasTag(CLASS) && !isPrimitiveClass(s)) ||\n@@ -1226,1 +1226,1 @@\n-                        if (isValue(et)) {\n+                        if (isPrimitiveClass(et)) {\n@@ -1228,1 +1228,1 @@\n-                            if (isValue(es))\n+                            if (isPrimitiveClass(es))\n@@ -1721,1 +1721,1 @@\n-                (ss.isValue() && ss.referenceProjection() == ts)) {\n+                (ss.isPrimitiveClass() && ss.referenceProjection() == ts)) {\n@@ -1779,1 +1779,1 @@\n-                if (s.hasTag(ERROR) || (s.hasTag(BOT) && !isValue(t)))\n+                if (s.hasTag(ERROR) || (s.hasTag(BOT) && !isPrimitiveClass(t)))\n@@ -1798,1 +1798,1 @@\n-                    if (isValue(t)) {\n+                    if (isPrimitiveClass(t)) {\n@@ -1802,1 +1802,1 @@\n-                    if (isValue(s)) {\n+                    if (isPrimitiveClass(s)) {\n@@ -2238,1 +2238,1 @@\n-            t = t.isValue() ? t.referenceProjection() : t;\n+            t = t.isPrimitiveClass() ? t.referenceProjection() : t;\n@@ -2241,1 +2241,1 @@\n-            if (!isValue(t))\n+            if (!isPrimitiveClass(t))\n@@ -2246,1 +2246,1 @@\n-            if (t.isValue() || t.tsym == syms.objectType.tsym)\n+            if (t.isPrimitiveClass() || t.tsym == syms.objectType.tsym)\n@@ -2271,1 +2271,1 @@\n-                if (isValue(t))\n+                if (isPrimitiveClass(t))\n@@ -2393,1 +2393,1 @@\n-        if (t.isValue())\n+        if (t.isPrimitiveClass())\n@@ -2396,1 +2396,1 @@\n-        if (sym.owner.isValue())\n+        if (sym.owner.isPrimitiveClass())\n@@ -2610,2 +2610,2 @@\n-        if (isValue(bounds.head))\n-            flags |= VALUE;\n+        if (isPrimitiveClass(bounds.head))\n+            flags |= PRIMITIVE_CLASS;\n@@ -5248,1 +5248,1 @@\n-                    if (types.isValue(type))\n+                    if (types.isPrimitiveClass(type))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-                if (env.info.inWithField && v.getKind() == ElementKind.FIELD && (v.flags() & STATIC) == 0 && types.isValue(v.owner.type)) {\n+                if (env.info.inWithField && v.getKind() == ElementKind.FIELD && (v.flags() & STATIC) == 0 && types.isPrimitiveClass(v.owner.type)) {\n@@ -994,2 +994,2 @@\n-                if (env.tree.hasTag(NEWCLASS) && types.isValue(c.getSuperclass())) {\n-                    c.flags_field |= VALUE; \/\/ avoid further secondary errors.\n+                if (env.tree.hasTag(NEWCLASS) && types.isPrimitiveClass(c.getSuperclass())) {\n+                    c.flags_field |= PRIMITIVE_CLASS; \/\/ avoid further secondary errors.\n@@ -1328,1 +1328,1 @@\n-                if ((v.flags_field & FINAL) == 0 || ((v.flags_field & STATIC) == 0 && types.isValue(v.owner.type)) ||\n+                if ((v.flags_field & FINAL) == 0 || ((v.flags_field & STATIC) == 0 && types.isPrimitiveClass(v.owner.type)) ||\n@@ -1531,1 +1531,1 @@\n-                        (sym.flags() & STATIC) != 0 || !types.isValue(sym.owner.type)) {\n+                        (sym.flags() & STATIC) != 0 || !types.isPrimitiveClass(sym.owner.type)) {\n@@ -2124,1 +2124,1 @@\n-                                 .map(t -> chk.checkNonVoid(posIt.next(), t.isValue() ? t.referenceProjection() : t))\n+                                 .map(t -> chk.checkNonVoid(posIt.next(), t.isPrimitiveClass() ? t.referenceProjection() : t))\n@@ -2552,1 +2552,1 @@\n-                boolean superCallOnValueReceiver = types.isValue(env.enclClass.sym.type)\n+                boolean superCallOnValueReceiver = types.isPrimitiveClass(env.enclClass.sym.type)\n@@ -2556,1 +2556,1 @@\n-                if (types.isValue(qualifier) || superCallOnValueReceiver) {\n+                if (types.isPrimitiveClass(qualifier) || superCallOnValueReceiver) {\n@@ -2601,1 +2601,1 @@\n-                if (qualifierType.isValue()) {\n+                if (qualifierType.isPrimitiveClass()) {\n@@ -2784,1 +2784,1 @@\n-                if (fieldAccess.selected.type.isValue() &&\n+                if (fieldAccess.selected.type.isPrimitiveClass() &&\n@@ -3034,1 +3034,1 @@\n-        if (types.isValue(arg.type))\n+        if (types.isPrimitiveClass(arg.type))\n@@ -4438,1 +4438,1 @@\n-                } else if (name == names.ref && site.isValue() && resultInfo.pkind.contains(KindSelector.TYP)) {\n+                } else if (name == names.ref && site.isPrimitiveClass() && resultInfo.pkind.contains(KindSelector.TYP)) {\n@@ -4440,1 +4440,1 @@\n-                } else if (name == names.val && site.isValue() && resultInfo.pkind.contains(KindSelector.TYP)) {\n+                } else if (name == names.val && site.isPrimitiveClass() && resultInfo.pkind.contains(KindSelector.TYP)) {\n@@ -5094,1 +5094,1 @@\n-                make.Modifiers(PUBLIC | ABSTRACT | (extending != null && TreeInfo.symbol(extending).isValue() ? VALUE : 0)),\n+                make.Modifiers(PUBLIC | ABSTRACT | (extending != null && TreeInfo.symbol(extending).isPrimitiveClass() ? PRIMITIVE_CLASS : 0)),\n@@ -5224,1 +5224,1 @@\n-            if (types.isValue(c.type)) {\n+            if (types.isPrimitiveClass(c.type)) {\n@@ -5396,1 +5396,1 @@\n-                if ((c.flags() & (VALUE | ABSTRACT)) == VALUE) { \/\/ for non-intersection, concrete values.\n+                if ((c.flags() & (PRIMITIVE_CLASS | ABSTRACT)) == PRIMITIVE_CLASS) { \/\/ for non-intersection, concrete values.\n@@ -5400,1 +5400,1 @@\n-                        chk.checkConstraintsOfInlineSuper(env.tree.pos(), c);\n+                        chk.checkSuperConstraintsOfPrimitiveClass(env.tree.pos(), c);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -740,1 +740,1 @@\n-    void checkConstraintsOfInlineSuper(DiagnosticPosition pos, ClassSymbol c) {\n+    void checkSuperConstraintsOfPrimitiveClass(DiagnosticPosition pos, ClassSymbol c) {\n@@ -798,1 +798,1 @@\n-                    if (fieldAccess.selected.type.isValue() &&\n+                    if (fieldAccess.selected.type.isPrimitiveClass() &&\n@@ -842,1 +842,1 @@\n-        if (t.isReference() && (valueOK || !types.isValue(t)))\n+        if (t.isReference() && (valueOK || !types.isPrimitiveClass(t)))\n@@ -920,1 +920,1 @@\n-                if (types.isValue(targ)) {\n+                if (types.isPrimitiveClass(targ)) {\n@@ -1336,1 +1336,1 @@\n-                if (types.isValue(sym.owner.type) && (flags & STATIC) == 0) {\n+                if (types.isPrimitiveClass(sym.owner.type) && (flags & STATIC) == 0) {\n@@ -1368,1 +1368,1 @@\n-                mask = ((sym.owner.flags_field & VALUE) != 0 && (flags & Flags.STATIC) == 0) ?\n+                mask = ((sym.owner.flags_field & PRIMITIVE_CLASS) != 0 && (flags & Flags.STATIC) == 0) ?\n@@ -1404,1 +1404,1 @@\n-                mask &= ~(ABSTRACT | FINAL | SEALED | NON_SEALED | VALUE);\n+                mask &= ~(ABSTRACT | FINAL | SEALED | NON_SEALED | PRIMITIVE_CLASS);\n@@ -1442,1 +1442,1 @@\n-                               FINAL | NATIVE | SYNCHRONIZED | VALUE)\n+                               FINAL | NATIVE | SYNCHRONIZED | PRIMITIVE_CLASS)\n@@ -1962,1 +1962,1 @@\n-        if (origin.isValue() && other.owner == syms.objectType.tsym && m.type.getParameterTypes().size() == 0) {\n+        if (origin.isPrimitiveClass() && other.owner == syms.objectType.tsym && m.type.getParameterTypes().size() == 0) {\n@@ -2284,1 +2284,1 @@\n-                        (!m.owner.isValue() || (tree.body.flags & SYNTHETIC) == 0));\n+                        (!m.owner.isPrimitiveClass() || (tree.body.flags & SYNTHETIC) == 0));\n@@ -2446,1 +2446,1 @@\n-            return (symbol.flags() & STATIC) == 0 && types.isValue(symbol.type);\n+            return (symbol.flags() & STATIC) == 0 && types.isPrimitiveClass(symbol.type);\n@@ -2698,1 +2698,1 @@\n-        if (c.isValue() && types.asSuper(c, syms.identityObjectType.tsym, true) != null) {\n+        if (c.isPrimitiveClass() && types.asSuper(c, syms.identityObjectType.tsym, true) != null) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -499,1 +499,1 @@\n-        if (ct.isValue()) {\n+        if (ct.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2127,1 +2127,1 @@\n-                        if (types.isValue(tree.sym.owner.type))\n+                        if (types.isPrimitiveClass(tree.sym.owner.type))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2343,1 +2343,1 @@\n-                          (tree.sym.owner.isDirectlyOrIndirectlyLocal() || tree.sym.owner.isInner() || tree.sym.owner.isValue()));\n+                          (tree.sym.owner.isDirectlyOrIndirectlyLocal() || tree.sym.owner.isInner() || tree.sym.owner.isPrimitiveClass()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2103,1 +2103,1 @@\n-                applyInlineConversionsAsNeeded(boxIfNeeded(translate(tree), type), type);\n+                applyPrimitiveConversionsAsNeeded(boxIfNeeded(translate(tree), type), type);\n@@ -3100,1 +3100,1 @@\n-    \/** Apply inline widening\/narrowing conversions as needed *\/\n+    \/** Apply primitive value\/reference conversions as needed *\/\n@@ -3102,3 +3102,3 @@\n-    <T extends JCExpression> T applyInlineConversionsAsNeeded(T tree, Type type) {\n-        boolean haveValue = tree.type.isValue();\n-        if (haveValue == type.isValue())\n+    <T extends JCExpression> T applyPrimitiveConversionsAsNeeded(T tree, Type type) {\n+        boolean haveValue = tree.type.isPrimitiveClass();\n+        if (haveValue == type.isPrimitiveClass())\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-            ClassSymbol refProjection = m.owner.isValue() ? (ClassSymbol) m.owner.referenceProjection() : null;\n+            ClassSymbol refProjection = m.owner.isPrimitiveClass() ? (ClassSymbol) m.owner.referenceProjection() : null;\n@@ -303,1 +303,1 @@\n-            if ((v.flags_field & FINAL) != 0 && ((v.flags_field & STATIC) != 0 || !types.isValue(v.owner.type)) &&\n+            if ((v.flags_field & FINAL) != 0 && ((v.flags_field & STATIC) != 0 || !types.isPrimitiveClass(v.owner.type)) &&\n@@ -312,1 +312,1 @@\n-            ClassSymbol refProjection =  v.owner.isValue() ? (ClassSymbol) v.owner.referenceProjection() : null;\n+            ClassSymbol refProjection =  v.owner.isPrimitiveClass() ? (ClassSymbol) v.owner.referenceProjection() : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -421,1 +421,1 @@\n-            if (site.isValue())\n+            if (site.isPrimitiveClass())\n@@ -423,1 +423,1 @@\n-            if (sym.owner.isValue())\n+            if (sym.owner.isPrimitiveClass())\n@@ -425,1 +425,1 @@\n-            if (env.enclClass.sym.isValue())\n+            if (env.enclClass.sym.isPrimitiveClass())\n@@ -490,1 +490,1 @@\n-        if (site.isValue())\n+        if (site.isPrimitiveClass())\n@@ -492,1 +492,1 @@\n-        if (sym.owner.isValue())\n+        if (sym.owner.isPrimitiveClass())\n@@ -3066,1 +3066,1 @@\n-                    ClassSymbol refProjection = newConstr.owner.isValue() ?\n+                    ClassSymbol refProjection = newConstr.owner.isPrimitiveClass() ?\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-        ClassSymbol refProjection = origin.isValue() ? origin.referenceProjection() : null;\n+        ClassSymbol refProjection = origin.isPrimitiveClass() ? origin.referenceProjection() : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -684,1 +684,1 @@\n-            final boolean isValueType = (tree.mods.flags & Flags.VALUE) != 0;\n+            final boolean isValueType = (tree.mods.flags & Flags.PRIMITIVE_CLASS) != 0;\n@@ -736,1 +736,1 @@\n-            if (ct.isValue()) {\n+            if (ct.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-        ClassSymbol refProjection =  c.isValue() ? c.referenceProjection() : null;\n+        ClassSymbol refProjection =  c.isPrimitiveClass() ? c.referenceProjection() : null;\n@@ -1007,1 +1007,1 @@\n-                        if (sym.kind == MTH  && sym.name == names.init && sym.owner.isValue()) {\n+                        if (sym.kind == MTH  && sym.name == names.init && sym.owner.isPrimitiveClass()) {\n@@ -2680,1 +2680,1 @@\n-        if (c.isValue()) {\n+        if (c.isPrimitiveClass()) {\n@@ -2800,2 +2800,2 @@\n-        if ((flags & ACC_INLINE) != 0) {\n-            flags &= ~ACC_INLINE;\n+        if ((flags & ACC_PRIMITIVE) != 0) {\n+            flags &= ~ACC_PRIMITIVE;\n@@ -2803,1 +2803,1 @@\n-                flags |= VALUE;\n+                flags |= PRIMITIVE_CLASS;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -871,1 +871,1 @@\n-            if (csym.isValue()) {\n+            if (csym.isPrimitiveClass()) {\n@@ -897,1 +897,1 @@\n-        if (csym.owner.kind != PCK || csym.isValue()) {\n+        if (csym.owner.kind != PCK || csym.isPrimitiveClass()) {\n@@ -900,1 +900,1 @@\n-            if (outerMost.isValue()) {\n+            if (outerMost.isPrimitiveClass()) {\n@@ -915,1 +915,1 @@\n-            if (csym.isValue()) {\n+            if (csym.isPrimitiveClass()) {\n@@ -1248,1 +1248,1 @@\n-                databuf.appendChar(types.isValue(t) ? poolWriter.putClass(new ConstantPoolQType(types.erasure(t), types)) : poolWriter.putClass(types.erasure(t)));\n+                databuf.appendChar(types.isPrimitiveClass(t) ? poolWriter.putClass(new ConstantPoolQType(types.erasure(t), types)) : poolWriter.putClass(types.erasure(t)));\n@@ -1513,1 +1513,1 @@\n-        if (c.isValue()) {\n+        if (c.isPrimitiveClass()) {\n@@ -1565,2 +1565,2 @@\n-        Type supertype = c.isValue() ? c.type.referenceProjection() : types.supertype(c.type);\n-        List<Type> interfaces = c.isValue() ? List.nil() : types.interfaces(c.type);\n+        Type supertype = c.isPrimitiveClass() ? c.type.referenceProjection() : types.supertype(c.type);\n+        List<Type> interfaces = c.isPrimitiveClass() ? List.nil() : types.interfaces(c.type);\n@@ -1575,1 +1575,1 @@\n-            flags = flags & (ClassFlags | ACC_INLINE) & ~STRICTFP;\n+            flags = flags & (ClassFlags | ACC_PRIMITIVE) & ~STRICTFP;\n@@ -1752,2 +1752,2 @@\n-        if ((flags & VALUE) != 0)\n-            result |= ACC_INLINE;\n+        if ((flags & PRIMITIVE_CLASS) != 0)\n+            result |= ACC_PRIMITIVE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1785,1 +1785,1 @@\n-                        (old.isValue() != t.isValue() && types.isConvertible(types.erasure(old), types.erasure(t))));\n+                        (old.isPrimitiveClass() != t.isPrimitiveClass() && types.isConvertible(types.erasure(old), types.erasure(t))));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2049,1 +2049,1 @@\n-                code.emitAnewarray(makeRef(pos, elemtype, types.isValue(elemtype)), type);\n+                code.emitAnewarray(makeRef(pos, elemtype, types.isPrimitiveClass(elemtype)), type);\n@@ -2281,1 +2281,1 @@\n-            if (types.isValue(tree.clazz.type)) {\n+            if (types.isPrimitiveClass(tree.clazz.type)) {\n@@ -2352,1 +2352,1 @@\n-            if (tree.type.asElement().isValue()) {\n+            if (tree.type.asElement().isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -511,2 +511,2 @@\n-        signatureGen.assembleSig(t.isValue() ? t.referenceProjection() : types.supertype(t));\n-        if (!t.isValue()) {\n+        signatureGen.assembleSig(t.isPrimitiveClass() ? t.referenceProjection() : types.supertype(t));\n+        if (!t.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -367,1 +367,1 @@\n-        if (types.isValue(tree.clazz.type)) {\n+        if (types.isPrimitiveClass(tree.clazz.type)) {\n@@ -388,1 +388,1 @@\n-        return currentClass != null && (currentClass.sym.flags() & Flags.VALUE) != 0 && currentMethod != null && currentMethod.sym.isConstructor();\n+        return currentClass != null && (currentClass.sym.flags() & Flags.PRIMITIVE_CLASS) != 0 && currentMethod != null && currentMethod.sym.isConstructor();\n@@ -400,1 +400,1 @@\n-        Assert.check(types.isValue(init.owner.type));\n+        Assert.check(types.isPrimitiveClass(init.owner.type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransValues.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2334,1 +2334,1 @@\n-                long badModifiers = (mods.flags & Flags.VALUE) != 0 ? mods.flags & ~Flags.FINAL : mods.flags;\n+                long badModifiers = (mods.flags & Flags.PRIMITIVE_CLASS) != 0 ? mods.flags & ~Flags.FINAL : mods.flags;\n@@ -2405,1 +2405,1 @@\n-            long badModifiers = mods.flags & ~(Flags.VALUE | Flags.FINAL);\n+            long badModifiers = mods.flags & ~(Flags.PRIMITIVE_CLASS | Flags.FINAL);\n@@ -2414,1 +2414,1 @@\n-                badModifiers = (mods.flags & Flags.VALUE) != 0 ? mods.flags & ~Flags.FINAL : mods.flags;\n+                badModifiers = (mods.flags & Flags.PRIMITIVE_CLASS) != 0 ? mods.flags & ~Flags.FINAL : mods.flags;\n@@ -3213,1 +3213,1 @@\n-            case PRIMITIVE   : flag = Flags.VALUE; break;\n+            case PRIMITIVE   : flag = Flags.PRIMITIVE_CLASS; break;\n@@ -3247,1 +3247,1 @@\n-                        flag = Flags.VALUE;\n+                        flag = Flags.PRIMITIVE_CLASS;\n@@ -3268,1 +3268,1 @@\n-        if ((flags & (Flags.VALUE | Flags.ABSTRACT | Flags.INTERFACE | Flags.ENUM)) == Flags.VALUE) {\n+        if ((flags & (Flags.PRIMITIVE_CLASS | Flags.ABSTRACT | Flags.INTERFACE | Flags.ENUM)) == Flags.PRIMITIVE_CLASS) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    public static final int ACC_INLINE        = 0x0100; \/\/ class\n+    public static final int ACC_PRIMITIVE     = 0x0100; \/\/ class\n@@ -86,1 +86,1 @@\n-        ACC_PUBLIC, ACC_FINAL, ACC_ABSTRACT, ACC_INLINE\n+        ACC_PUBLIC, ACC_FINAL, ACC_ABSTRACT, ACC_PRIMITIVE\n@@ -91,1 +91,1 @@\n-        ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_INLINE\n+        ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_MODULE, ACC_PRIMITIVE\n@@ -105,1 +105,1 @@\n-        ACC_ABSTRACT, ACC_INLINE\n+        ACC_ABSTRACT, ACC_PRIMITIVE\n@@ -110,1 +110,1 @@\n-        ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_INLINE\n+        ACC_INTERFACE, ACC_ABSTRACT, ACC_SYNTHETIC, ACC_ANNOTATION, ACC_ENUM, ACC_PRIMITIVE\n@@ -239,1 +239,1 @@\n-            return (t == Kind.Class || t == Kind.InnerClass) ? \"ACC_INLINE\" : \"ACC_NATIVE\";\n+            return (t == Kind.Class || t == Kind.InnerClass) ? \"ACC_PRIMITIVE\" : \"ACC_NATIVE\";\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/AccessFlags.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))\n+        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))\n+        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n@@ -66,1 +66,1 @@\n-        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))\n+        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFlattenableSyntheticFields.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))\n+        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n@@ -74,1 +74,1 @@\n-        if (!cls.access_flags.is(AccessFlags.ACC_INLINE))\n+        if (!cls.access_flags.is(AccessFlags.ACC_PRIMITIVE))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckLocalClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-CheckMakeDefault.java:9:15: compiler.err.illegal.combination.of.modifiers: interface, inline\n-CheckMakeDefault.java:10:24: compiler.err.illegal.combination.of.modifiers: abstract, inline\n+CheckMakeDefault.java:9:15: compiler.err.illegal.combination.of.modifiers: interface, primitive\n+CheckMakeDefault.java:10:24: compiler.err.illegal.combination.of.modifiers: abstract, primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckMakeDefault.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,6 +1,6 @@\n-CheckValueModifier.java:18:14: compiler.err.illegal.combination.of.modifiers: interface, inline\n-CheckValueModifier.java:19:15: compiler.err.illegal.combination.of.modifiers: interface, inline\n-CheckValueModifier.java:20:14: compiler.err.mod.not.allowed.here: inline\n-CheckValueModifier.java:21:23: compiler.err.illegal.combination.of.modifiers: abstract, inline\n-CheckValueModifier.java:15:18: compiler.err.mod.not.allowed.here: inline\n-CheckValueModifier.java:16:18: compiler.err.mod.not.allowed.here: inline\n+CheckValueModifier.java:18:14: compiler.err.illegal.combination.of.modifiers: interface, primitive\n+CheckValueModifier.java:19:15: compiler.err.illegal.combination.of.modifiers: interface, primitive\n+CheckValueModifier.java:20:14: compiler.err.mod.not.allowed.here: primitive\n+CheckValueModifier.java:21:23: compiler.err.illegal.combination.of.modifiers: abstract, primitive\n+CheckValueModifier.java:15:18: compiler.err.mod.not.allowed.here: primitive\n+CheckValueModifier.java:16:18: compiler.err.mod.not.allowed.here: primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckValueModifier.out","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-IllegalByValueTest.java:21:35: compiler.err.mod.not.allowed.here: inline\n-IllegalByValueTest.java:22:9: compiler.err.mod.not.allowed.here: inline\n+IllegalByValueTest.java:21:35: compiler.err.mod.not.allowed.here: primitive\n+IllegalByValueTest.java:22:9: compiler.err.mod.not.allowed.here: primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/IllegalByValueTest.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-InlineAnnotationOnAnonymousClass.java:11:24: compiler.err.mod.not.allowed.here: inline\n+InlineAnnotationOnAnonymousClass.java:11:24: compiler.err.mod.not.allowed.here: primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InlineAnnotationOnAnonymousClass.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-InlineAnnotationTest.java:25:1: compiler.err.illegal.combination.of.modifiers: interface, inline\n+InlineAnnotationTest.java:25:1: compiler.err.illegal.combination.of.modifiers: interface, primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InlineAnnotationTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        if ((Inner.class.getModifiers() & AccessFlags.ACC_INLINE) == 0)\n+        if ((Inner.class.getModifiers() & AccessFlags.ACC_PRIMITIVE) == 0)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InnerClassAttributeValuenessTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-              \"  flags: (0x0130) ACC_FINAL, ACC_SUPER, ACC_INLINE\",\n+              \"  flags: (0x0130) ACC_FINAL, ACC_SUPER, ACC_PRIMITIVE\",\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/QTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ValueAnnotationOnAnonymousClass.java:11:24: compiler.err.mod.not.allowed.here: inline\n+ValueAnnotationOnAnonymousClass.java:11:24: compiler.err.mod.not.allowed.here: primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueAnnotationOnAnonymousClass.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ValueAnnotationTest.java:25:1: compiler.err.illegal.combination.of.modifiers: interface, inline\n+ValueAnnotationTest.java:25:1: compiler.err.illegal.combination.of.modifiers: interface, primitive\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueAnnotationTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}