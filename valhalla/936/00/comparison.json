{"files":[{"patch":"@@ -3295,2 +3295,1 @@\n-  resolve_cache_and_index(f2_byte, cache, index, sizeof(u2));\n-  __ load_field_entry(cache, index);\n+  resolve_cache_and_index_for_field(f2_byte, cache, index);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -275,0 +275,1 @@\n+  assert(entry->is_valid(), \"Invalid ResolvedFieldEntry\");\n@@ -399,0 +400,1 @@\n+  assert(entry->is_valid(), \"Invalid ResolvedFieldEntry\");\n@@ -1431,0 +1433,1 @@\n+  assert(entry->is_valid(), \"Invalid ResolvedFieldEntry\");\n@@ -1455,0 +1458,1 @@\n+  assert(entry->is_valid(), \"Invalid ResolvedFieldEntry\");\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+#include \"interpreter\/bytecodes.hpp\"\n+#include \"oops\/instanceOop.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -48,0 +51,9 @@\n+bool ResolvedFieldEntry::is_valid() const {\n+  return field_holder()->is_instance_klass() &&\n+    field_offset() >= instanceOopDesc::base_offset_in_bytes() && field_offset() < 0x7fffffff &&\n+    as_BasicType((TosState)tos_state()) != T_ILLEGAL &&\n+    _flags < (1 << (max_flag_shift + 1)) &&\n+    (get_code() == 0 || get_code() == Bytecodes::_getstatic || get_code() == Bytecodes::_getfield) &&\n+    (put_code() == 0 || put_code() == Bytecodes::_putstatic || put_code() == Bytecodes::_putfield || put_code() == Bytecodes::_withfield);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+      max_flag_shift = is_null_free_inline_type_shift,\n@@ -139,0 +140,1 @@\n+    assert(is_valid(), \"invalid\");\n@@ -153,0 +155,2 @@\n+  \/\/ Debug help\n+  bool is_valid() const;\n","filename":"src\/hotspot\/share\/oops\/resolvedFieldEntry.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,10 +75,0 @@\n-compiler\/valhalla\/inlinetypes\/TestArrays.java 8313667 generic-all\n-compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java 8317140 linux-x64\n-compiler\/valhalla\/inlinetypes\/TestCallingConvention.java 8317142 generic-all\n-compiler\/valhalla\/inlinetypes\/TestCallingConventionC1.java 8317143 generic-all\n-compiler\/valhalla\/inlinetypes\/TestC1.java 8317143 generic-all\n-compiler\/valhalla\/inlinetypes\/TestLWorld.java 8317145 linux-x64,windows-x64\n-compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java 8317146 linux-x64\n-compiler\/valhalla\/inlinetypes\/TestNullableArrays.java 8317147 linux-x64\n-compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java 8317148 linux-x64\n-compiler\/valhalla\/inlinetypes\/TestValueClasses.java 8317149 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}