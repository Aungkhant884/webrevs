{"files":[{"patch":"@@ -701,18 +701,16 @@\n-      int ind = 1;\n-      if (!this_region->in(ind)->is_IfFalse()) {\n-        ind = 2;\n-      }\n-      if (this_region->in(ind)->is_IfFalse() &&\n-          this_region->in(ind)->in(0)->Opcode() == Op_If) {\n-        Node* bol = this_region->in(ind)->in(0)->in(1);\n-        assert(bol->is_Bool(), \"\");\n-        cmpx = bol->in(1);\n-        if (bol->as_Bool()->_test._test == BoolTest::ne &&\n-            cmpx->is_Cmp() && cmpx->in(2) == igvn->intcon(0) &&\n-            cmpx->in(1)->is_Load()) {\n-          Node* adr = cmpx->in(1)->as_Load()->in(MemNode::Address);\n-          const int marking_offset = in_bytes(G1ThreadLocalData::satb_mark_queue_active_offset());\n-          if (adr->is_AddP() && adr->in(AddPNode::Base) == igvn->C->top() &&\n-              adr->in(AddPNode::Address)->Opcode() == Op_ThreadLocal &&\n-              adr->in(AddPNode::Offset) == igvn->MakeConX(marking_offset)) {\n-            igvn->replace_node(cmpx, igvn->makecon(TypeInt::CC_EQ));\n+      for (int i = 1; i < 3; ++i) {\n+        if (this_region->in(i)->is_IfFalse() &&\n+            this_region->in(i)->in(0)->is_If() &&\n+            this_region->in(i)->in(0)->in(1)->is_Bool()) {\n+          Node* bol = this_region->in(i)->in(0)->in(1);\n+          cmpx = bol->in(1);\n+          if (bol->as_Bool()->_test._test == BoolTest::ne &&\n+              cmpx->is_Cmp() && cmpx->in(2) == igvn->intcon(0) &&\n+              cmpx->in(1)->is_Load()) {\n+            Node* adr = cmpx->in(1)->as_Load()->in(MemNode::Address);\n+            const int marking_offset = in_bytes(G1ThreadLocalData::satb_mark_queue_active_offset());\n+            if (adr->is_AddP() && adr->in(AddPNode::Base) == igvn->C->top() &&\n+                adr->in(AddPNode::Address)->Opcode() == Op_ThreadLocal &&\n+                adr->in(AddPNode::Offset) == igvn->MakeConX(marking_offset)) {\n+              igvn->replace_node(cmpx, igvn->makecon(TypeInt::CC_EQ));\n+            }\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -173,10 +173,16 @@\n-  Node *shift = node->unique_out();\n-  Node *addp = shift->unique_out();\n-  for (DUIterator_Last jmin, j = addp->last_outs(jmin); j >= jmin; --j) {\n-    Node *mem = addp->last_out(j);\n-    if (UseCondCardMark && mem->is_Load()) {\n-      assert(mem->Opcode() == Op_LoadB, \"unexpected code shape\");\n-      \/\/ The load is checking if the card has been written so\n-      \/\/ replace it with zero to fold the test.\n-      igvn->replace_node(mem, igvn->intcon(0));\n-      continue;\n+  for (DUIterator_Last imin, i = node->last_outs(imin); i >= imin; --i) {\n+    Node* shift = node->last_out(i);\n+    for (DUIterator_Last jmin, j = shift->last_outs(jmin); j >= jmin; --j) {\n+      Node* addp = shift->last_out(j);\n+      for (DUIterator_Last kmin, k = addp->last_outs(kmin); k >= kmin; --k) {\n+        Node* mem = addp->last_out(k);\n+        if (UseCondCardMark && mem->is_Load()) {\n+          assert(mem->Opcode() == Op_LoadB, \"unexpected code shape\");\n+          \/\/ The load is checking if the card has been written so\n+          \/\/ replace it with zero to fold the test.\n+          igvn->replace_node(mem, igvn->intcon(0));\n+          continue;\n+        }\n+        assert(mem->is_Store(), \"store required\");\n+        igvn->replace_node(mem, mem->in(MemNode::Memory));\n+      }\n@@ -184,2 +190,0 @@\n-    assert(mem->is_Store(), \"store required\");\n-    igvn->replace_node(mem, mem->in(MemNode::Memory));\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"}]}