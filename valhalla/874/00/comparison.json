{"files":[{"patch":"@@ -2540,1 +2540,1 @@\n-            return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass();\n+            return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass() && symbol.type.isNonNullable();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+import com.sun.tools.javac.tree.JCTree;\n@@ -1357,1 +1358,1 @@\n-                    \/\/ here we could put the nullness annotation into the field's type\n+                    sym.type = sym.type.asNullMarked(JCTree.JCNullableTypeExpression.NullMarker.NOT_NULL);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -971,1 +971,1 @@\n-        if (sym.kind == VAR && sym.owner.isValueClass() \/* && sym.type.isNonNullable() *\/) {\n+        if (sym.kind == VAR && sym.type.isNonNullable()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4033,1 +4033,1 @@\n-    cyclic primitive class membership involving {0}\n+    cyclic value class membership involving {0}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}