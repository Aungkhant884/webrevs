{"files":[{"patch":"@@ -67,1 +67,1 @@\n-    public final static int JAVA_MAGIC = 0xCAFEBABE;\n+    public static final int JAVA_MAGIC = 0xCAFEBABE;\n@@ -70,20 +70,20 @@\n-    public final static int CONSTANT_Utf8 = 1;\n-    public final static int CONSTANT_Unicode = 2;\n-    public final static int CONSTANT_Integer = 3;\n-    public final static int CONSTANT_Float = 4;\n-    public final static int CONSTANT_Long = 5;\n-    public final static int CONSTANT_Double = 6;\n-    public final static int CONSTANT_Class = 7;\n-    public final static int CONSTANT_String = 8;\n-    public final static int CONSTANT_Fieldref = 9;\n-    public final static int CONSTANT_Methodref = 10;\n-    public final static int CONSTANT_InterfaceMethodref = 11;\n-    public final static int CONSTANT_NameandType = 12;\n-    public final static int CONSTANT_MethodHandle = 15;\n-    public final static int CONSTANT_MethodType = 16;\n-    public final static int CONSTANT_Dynamic = 17;\n-    public final static int CONSTANT_InvokeDynamic = 18;\n-    public final static int CONSTANT_Module = 19;\n-    public final static int CONSTANT_Package = 20;\n-    public final static int CONSTANT_Parameter = 21;\n-    public final static int CONSTANT_Linkage = 22;\n+    public static final int CONSTANT_Utf8 = 1;\n+    public static final int CONSTANT_Unicode = 2;\n+    public static final int CONSTANT_Integer = 3;\n+    public static final int CONSTANT_Float = 4;\n+    public static final int CONSTANT_Long = 5;\n+    public static final int CONSTANT_Double = 6;\n+    public static final int CONSTANT_Class = 7;\n+    public static final int CONSTANT_String = 8;\n+    public static final int CONSTANT_Fieldref = 9;\n+    public static final int CONSTANT_Methodref = 10;\n+    public static final int CONSTANT_InterfaceMethodref = 11;\n+    public static final int CONSTANT_NameandType = 12;\n+    public static final int CONSTANT_MethodHandle = 15;\n+    public static final int CONSTANT_MethodType = 16;\n+    public static final int CONSTANT_Dynamic = 17;\n+    public static final int CONSTANT_InvokeDynamic = 18;\n+    public static final int CONSTANT_Module = 19;\n+    public static final int CONSTANT_Package = 20;\n+    public static final int CONSTANT_Parameter = 21;\n+    public static final int CONSTANT_Linkage = 22;\n@@ -91,9 +91,9 @@\n-    public final static int REF_getField = 1;\n-    public final static int REF_getStatic = 2;\n-    public final static int REF_putField = 3;\n-    public final static int REF_putStatic = 4;\n-    public final static int REF_invokeVirtual = 5;\n-    public final static int REF_invokeStatic = 6;\n-    public final static int REF_invokeSpecial = 7;\n-    public final static int REF_newInvokeSpecial = 8;\n-    public final static int REF_invokeInterface = 9;\n+    public static final int REF_getField = 1;\n+    public static final int REF_getStatic = 2;\n+    public static final int REF_putField = 3;\n+    public static final int REF_putStatic = 4;\n+    public static final int REF_invokeVirtual = 5;\n+    public static final int REF_invokeStatic = 6;\n+    public static final int REF_invokeSpecial = 7;\n+    public static final int REF_newInvokeSpecial = 8;\n+    public static final int REF_invokeInterface = 9;\n@@ -101,5 +101,5 @@\n-    public final static int MAX_PARAMETERS = 0xff;\n-    public final static int MAX_DIMENSIONS = 0xff;\n-    public final static int MAX_CODE = 0xffff;\n-    public final static int MAX_LOCALS = 0xffff;\n-    public final static int MAX_STACK = 0xffff;\n+    public static final int MAX_PARAMETERS = 0xff;\n+    public static final int MAX_DIMENSIONS = 0xff;\n+    public static final int MAX_CODE = 0xffff;\n+    public static final int MAX_LOCALS = 0xffff;\n+    public static final int MAX_STACK = 0xffff;\n@@ -107,1 +107,1 @@\n-    public final static int PREVIEW_MINOR_VERSION = 0xffff;\n+    public static final int PREVIEW_MINOR_VERSION = 0xffff;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassFile.java","additions":36,"deletions":36,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -300,2 +300,1 @@\n-        ClassSymbol refProjection =  c.isPrimitiveClass() ? c.referenceProjection() : null;\n-        if ((sym.flags_field & (SYNTHETIC|BRIDGE)) != SYNTHETIC || sym.name.startsWith(names.lambda)) {\n+        if ((sym.flags_field & (SYNTHETIC|BRIDGE)) != SYNTHETIC || sym.name.startsWith(names.lambda))\n@@ -303,20 +302,0 @@\n-            if (refProjection != null) {\n-                Symbol clone = null;\n-                if (sym.kind == MTH) {\n-                    MethodSymbol valMethod = (MethodSymbol)sym;\n-                    MethodSymbol refMethod = valMethod.clone(refProjection);\n-                    valMethod.projection = refMethod;\n-                    refMethod.projection = valMethod;\n-                    clone = refMethod;\n-                } else if (sym.kind == VAR) {\n-                    VarSymbol valVar = (VarSymbol)sym;\n-                    VarSymbol refVar = valVar.clone(refProjection);\n-                    valVar.projection = refVar;\n-                    refVar.projection = valVar;\n-                    clone = refVar;\n-                }\n-                if (clone != null) {\n-                    refProjection.members_field.enter(clone);\n-                }\n-            }\n-        }\n@@ -564,0 +543,2 @@\n+        Name name;\n+        boolean requireProjection;\n@@ -571,4 +552,10 @@\n-                ClassSymbol t = enterClass(names.fromUtf(signatureBuffer,\n-                                                         startSbp,\n-                                                         sbp - startSbp));\n-\n+                name = names.fromUtf(signatureBuffer,\n+                        startSbp,\n+                        sbp - startSbp);\n+                if (allowPrimitiveClasses && name.toString().endsWith(\"$ref\")) {\n+                    name = name.subName(0, name.length() - 4);\n+                    requireProjection = true;\n+                } else {\n+                    requireProjection = false;\n+                }\n+                ClassSymbol t = enterClass(name);\n@@ -577,2 +564,2 @@\n-                            t.erasure(types) :\n-                        new ClassType(outer, List.nil(), t);\n+                            requireProjection ? t.erasure(types).referenceProjection() : t.erasure(types) :\n+                        new ClassType(outer, List.nil(), t, TypeMetadata.EMPTY, requireProjection);\n@@ -585,4 +572,11 @@\n-                ClassSymbol t = enterClass(names.fromUtf(signatureBuffer,\n-                                                         startSbp,\n-                                                         sbp - startSbp));\n-                outer = new ClassType(outer, sigToTypes('>'), t) {\n+                name = names.fromUtf(signatureBuffer,\n+                        startSbp,\n+                        sbp - startSbp);\n+                if (allowPrimitiveClasses && name.toString().endsWith(\"$ref\")) {\n+                    name = name.subName(0, name.length() - 4);\n+                    requireProjection = true;\n+                } else {\n+                    requireProjection = false;\n+                }\n+                ClassSymbol t = enterClass(name);\n+                outer = new ClassType(outer, sigToTypes('>'), t, TypeMetadata.EMPTY, requireProjection) {\n@@ -648,4 +642,11 @@\n-                    t = enterClass(names.fromUtf(signatureBuffer,\n-                                                 startSbp,\n-                                                 sbp - startSbp));\n-                    outer = new ClassType(outer, List.nil(), t);\n+                    name = names.fromUtf(signatureBuffer,\n+                            startSbp,\n+                            sbp - startSbp);\n+                    if (allowPrimitiveClasses && name.toString().endsWith(\"$ref\")) {\n+                        name = name.subName(0, name.length() - 4);\n+                        requireProjection = true;\n+                    } else {\n+                        requireProjection = false;\n+                    }\n+                    t = enterClass(name);\n+                    outer = new ClassType(outer, List.nil(), t, TypeMetadata.EMPTY, requireProjection);\n@@ -2520,4 +2521,0 @@\n-        if (allowPrimitiveClasses && name.toString().endsWith(\"$ref\")) {\n-            ClassSymbol v = syms.enterClass(currentModule, name.subName(0, name.length() - 4));\n-            return v.referenceProjection();\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":37,"deletions":40,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import com.sun.tools.javac.code.Scope.WriteableScope;\n@@ -241,1 +242,1 @@\n-        private final static String[] flagName = {\n+        private static final String[] flagName = {\n@@ -831,1 +832,2 @@\n-    \/** Write \"inner classes\" attribute.\n+    \/** Write \"inner classes\" attribute. If a primitive class happens to be an inner class,\n+     *  the reference projection class will also be an inner class.\n@@ -835,1 +837,2 @@\n-        databuf.appendChar(poolWriter.innerClasses.size());\n+        int icCountIdx = beginAttrs();\n+        int icCount = 0;\n@@ -852,0 +855,11 @@\n+            icCount++;\n+            if (inner.isPrimitiveClass()) {\n+                databuf.appendChar(poolWriter.putClass(inner.type.referenceProjection()));\n+                databuf.appendChar(\n+                        inner.owner.kind == TYP && !inner.name.isEmpty() ? poolWriter.putClass((ClassSymbol)inner.owner) : 0);\n+                databuf.appendChar(\n+                        !inner.name.isEmpty() ? poolWriter.putName(inner.name.append('$', names.ref)) : 0);\n+                flags = (char) ((flags & ~(ACC_PRIMITIVE | FINAL)) | ABSTRACT);\n+                databuf.appendChar(flags);\n+                icCount++;\n+            }\n@@ -853,0 +867,1 @@\n+        endAttrs(icCountIdx, icCount);\n@@ -914,1 +929,2 @@\n-                databuf.appendChar(nestedUnique.size());\n+                int nmcIdx = beginAttrs();\n+                int nmc = 0;\n@@ -917,0 +933,5 @@\n+                    nmc++;\n+                    if (s.isPrimitiveClass() && s.owner.kind != PCK) {\n+                        databuf.appendChar(poolWriter.putClass(s.type.referenceProjection()));\n+                        nmc++;\n+                    }\n@@ -918,0 +939,1 @@\n+                endAttrs(nmcIdx, nmc);\n@@ -933,1 +955,3 @@\n-                outerMost = outerMost.referenceProjection();\n+                databuf.appendChar(poolWriter.putClass(outerMost.type.referenceProjection()));\n+            } else {\n+                databuf.appendChar(poolWriter.putClass(outerMost));\n@@ -935,1 +959,0 @@\n-            databuf.appendChar(poolWriter.putClass(outerMost));\n@@ -947,3 +970,0 @@\n-            if (csym.isPrimitiveClass()) {\n-                seen.add(csym.referenceProjection());\n-            }\n@@ -1546,3 +1566,1 @@\n-            ClassSymbol refProjection = c.referenceProjection();\n-            refProjection.flags_field = (refProjection.flags_field & ~FINAL) | ABSTRACT;\n-            writeClassInternal(refProjection);\n+            writeClassInternal(getReferenceProjection(c));\n@@ -1553,0 +1571,51 @@\n+        \/\/ where\n+        private static ClassSymbol getReferenceProjection(ClassSymbol c) {\n+\n+            ClassSymbol projection;\n+            ClassType projectedType;\n+\n+            ClassType ct = (ClassType) c.type;\n+            projectedType = new ClassType(ct.getEnclosingType(), ct.typarams_field, null, ct.getMetadata(), false);\n+            projectedType.allparams_field = ct.allparams_field;\n+            projectedType.supertype_field = ct.supertype_field;\n+\n+            projectedType.interfaces_field = ct.interfaces_field;\n+            projectedType.all_interfaces_field = ct.all_interfaces_field;\n+            projectedType.projection = null;\n+\n+            Name projectionName = c.name.append('$', c.name.table.names.ref);\n+            long projectionFlags = (c.flags() & ~(PRIMITIVE_CLASS | UNATTRIBUTED | FINAL)) | (ABSTRACT | SEALED);\n+\n+            projection = new ClassSymbol(projectionFlags, projectionName, projectedType, c.owner) {\n+                @Override\n+                public boolean isReferenceProjection() {\n+                    return true;\n+                }\n+\n+                @Override\n+                public ClassSymbol valueProjection() {\n+                    return c;\n+                }\n+            };\n+            projection.members_field = WriteableScope.create(projection);\n+            for (Symbol s : c.members().getSymbols(s->(s.kind == MTH || s.kind == VAR), NON_RECURSIVE)) {\n+                Symbol clone = null;\n+                if (s.kind == MTH) {\n+                    MethodSymbol valMethod = (MethodSymbol)s;\n+                    MethodSymbol refMethod = valMethod.clone(projection);\n+                    clone = refMethod;\n+                } else if (s.kind == VAR) {\n+                    VarSymbol valVar = (VarSymbol)s;\n+                    VarSymbol refVar = valVar.clone(projection);\n+                    clone = refVar;\n+                }\n+                projection.members_field.enter(clone);\n+            }\n+            projection.completer = Completer.NULL_COMPLETER;\n+            projection.sourcefile = c.sourcefile;\n+            projection.flatname = c.flatname.append('$', c.name.table.names.ref);\n+            projection.permitted = List.of(c);\n+            projectedType.tsym = projection;\n+            return projection;\n+        }\n+\n@@ -1625,1 +1694,1 @@\n-        databuf.appendChar(supertype.hasTag(CLASS) ? poolWriter.putClass((ClassSymbol)supertype.tsym) : 0);\n+        databuf.appendChar(supertype.hasTag(CLASS) ? poolWriter.putClass(supertype) : 0);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":82,"deletions":13,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2255,1 +2255,1 @@\n-        private final static String[] mnem = new String[ByteCodeCount];\n+        private static final String[] mnem = new String[ByteCodeCount];\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2278,2 +2278,2 @@\n-            (!tree.clazz.type.tsym.isReferenceProjection() || tree.clazz.type.tsym.valueProjection() != tree.expr.type.tsym) &&\n-           types.asSuper(tree.expr.type, tree.clazz.type.tsym) == null) {\n+            (!tree.clazz.type.isReferenceProjection() || !types.isSameType(tree.clazz.type.valueProjection(), tree.expr.type)) &&\n+           !types.isSubtype(tree.expr.type, tree.clazz.type)) {\n@@ -2351,10 +2351,0 @@\n-        } else if (tree.name == names._default) {\n-            if (tree.type.asElement().isPrimitiveClass()) {\n-                code.emitop2(defaultvalue, checkDimension(tree.pos(), tree.type), PoolWriter::putClass);\n-            } else if (tree.type.isReference()) {\n-                code.emitop0(aconst_null);\n-            } else {\n-                code.emitop0(zero(Code.typecode(tree.type)));\n-            }\n-            result = items.makeStackItem(tree.type);\n-            return;\n@@ -2417,0 +2407,12 @@\n+    public void visitDefaultValue(JCDefaultValue tree) {\n+        if (tree.type.asElement().isPrimitiveClass()) {\n+            code.emitop2(defaultvalue, checkDimension(tree.pos(), tree.type), PoolWriter::putClass);\n+        } else if (tree.type.isReference()) {\n+            code.emitop0(aconst_null);\n+        } else {\n+            code.emitop0(zero(Code.typecode(tree.type)));\n+        }\n+        result = items.makeStackItem(tree.type);\n+        return;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -339,0 +339,3 @@\n+        if (c.isReferenceProjection()) {\n+            c = c.valueProjection();\n+        }\n@@ -484,0 +487,3 @@\n+                    if (ct.isReferenceProjection()) {\n+                        name = name.append('$', names.ref);\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}