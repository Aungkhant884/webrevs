{"files":[{"patch":"@@ -88,0 +88,2 @@\n+    public static final int CONSTANT_Parameter = 21;\n+    public static final int CONSTANT_Linkage = 22;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassFile.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1281,0 +1281,11 @@\n+            new AttributeReader(names.Parametric, V61, CLASS_OR_MEMBER_ATTRIBUTE) {\n+                @Override\n+                protected boolean accepts(AttributeKind kind) {\n+                    return super.accepts(kind);\n+                }\n+                protected void read(Symbol sym, int attrLen) {\n+                    \/\/ just read the info, nothing to do for now\n+                    nextChar();\n+                    nextChar();\n+                }\n+            },\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -112,0 +112,2 @@\n+    private boolean supportParametricVM;\n+\n@@ -196,0 +198,2 @@\n+\n+        supportParametricVM = options.isSet(\"supportParametricVM\");\n@@ -377,0 +381,4 @@\n+        if (supportParametricVM && sym.attribute(syms.parametricType.tsym) != null) {\n+            writeParametricAttribute(sym);\n+            acount++;\n+        }\n@@ -880,0 +888,24 @@\n+    int writeParametricAttribute(Symbol sym) {\n+        int alenIdx = writeAttr(names.Parametric);\n+        int kind = 1; \/\/ the default\n+        Attribute.Compound c = sym.attribute(syms.parametricType.tsym);\n+        \/\/ let's extract the id from the annotation\n+        Attribute idValue = c.member(names.id);\n+\n+        \/\/ now, let's extract the kind from the annotation\n+        Attribute value = c.member(names.kind);\n+        if (value != null && value instanceof Attribute.Enum) {\n+            Name kindName = ((Attribute.Enum)value).value.name;\n+            kind = switch (kindName.toString()) {\n+                case \"CLASS\" -> 1;\n+                case \"METHOD_ONLY\" -> 2;\n+                case \"METHOD_AND_CLASS\" -> 3;\n+                default -> throw new AssertionError(\"unexpected kind\");\n+            };\n+        }\n+        databuf.appendChar(poolWriter.putParameter(idValue.getValue().toString(), kind));\n+        databuf.appendChar(0);\n+        endAttr(alenIdx);\n+        return 1;\n+    }\n+\n@@ -1782,0 +1814,5 @@\n+        if (supportParametricVM && c.attribute(syms.parametricType.tsym) != null) {\n+            writeParametricAttribute(c);\n+            acount++;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -220,0 +220,1 @@\n+        this.poolWriter.currentMethSymbol = meth;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-        poolWriter = new PoolWriter(types, names);\n+        poolWriter = new PoolWriter(types, names, syms, log, options.isSet(\"supportParametricVM\"));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.tools.javac.code.Attribute;\n@@ -35,0 +36,1 @@\n+import com.sun.tools.javac.code.Symtab;\n@@ -40,0 +42,1 @@\n+import com.sun.tools.javac.jvm.PoolConstant.Linkage;\n@@ -45,0 +48,2 @@\n+import com.sun.tools.javac.jvm.PoolConstant.Parameter;\n+import com.sun.tools.javac.util.Assert;\n@@ -47,0 +52,1 @@\n+import com.sun.tools.javac.util.Log;\n@@ -54,0 +60,1 @@\n+import java.util.HashSet;\n@@ -57,0 +64,1 @@\n+import java.util.Set;\n@@ -88,0 +96,6 @@\n+    private final Symtab syms;\n+\n+    private final Log log;\n+\n+    private final boolean supportParametricVM;\n+\n@@ -100,1 +114,4 @@\n-    public PoolWriter(Types types, Names names) {\n+    \/\/ current symbol for which the code is being generated\n+    Symbol.MethodSymbol currentMethSymbol;\n+\n+    public PoolWriter(Types types, Names names, Symtab syms, Log log, boolean supportParametricVM) {\n@@ -103,0 +120,2 @@\n+        this.syms = syms;\n+        this.log = log;\n@@ -105,0 +124,1 @@\n+        this.supportParametricVM = supportParametricVM;\n@@ -111,1 +131,1 @@\n-        return putClass(csym.type);\n+        return pool.writeIfNeeded(wrapWithLinkageIfNeeded(types.erasure(csym.type), csym.attribute(syms.parametricType.tsym)));\n@@ -119,1 +139,1 @@\n-        return pool.writeIfNeeded(types.erasure(t));\n+        return pool.writeIfNeeded(wrapWithLinkageIfNeeded(types.erasure(t), t.tsym.attribute(syms.parametricType.tsym)));\n@@ -127,0 +147,1 @@\n+        \/\/ still need to check here if linkage is necessary\n@@ -130,0 +151,2 @@\n+    Set<Object> referencesBeingLinked = new HashSet<>();\n+\n@@ -134,1 +157,1 @@\n-        return pool.writeIfNeeded(s);\n+        return pool.writeIfNeeded(wrapWithLinkageIfNeeded(s, s.attribute(syms.parametricType.tsym)));\n@@ -137,0 +160,76 @@\n+    \/\/ where\n+        boolean enclMethodHasLinkageAnno() {\n+            return currentMethSymbol != null && (currentMethSymbol.attribute(syms.linkageMethodType.tsym) != null ||\n+                    currentMethSymbol.attribute(syms.linkageClassType.tsym) != null);\n+        }\n+\n+        \/* this method will try to generate a Linkage that will eventually be written into the constant pool\n+         * if it can't find all the needed information it will bail out, and return -1, to inform the caller\n+         * to generate the corresponding legacy entry. If successful it will return the index of the corresponding\n+         * Linkage_info constant in the constant pool\n+         *\/\n+        PoolConstant wrapWithLinkageIfNeeded(PoolConstant poolConstant, Attribute.Compound parametricAnno) {\n+            \/\/ the referred element is parametric\n+            if (!supportParametricVM ||\n+                    parametricAnno == null ||\n+                    !enclMethodHasLinkageAnno() ||\n+                    referencesBeingLinked.contains(poolConstant)) {\n+                return poolConstant;\n+            }\n+            Name kindName = names.CLASS;\n+            Attribute value = parametricAnno.member(names.kind);\n+            if (value != null && value instanceof Attribute.Enum) {\n+                kindName = ((Attribute.Enum)value).value.name;\n+            }\n+\n+            \/\/ let's find out if the enclosing method has any linkage annotations\n+            String linkageMethodValueStr = null;\n+            Attribute.Compound linkageMethodAnno = currentMethSymbol.attribute(syms.linkageMethodType.tsym);\n+            if (linkageMethodAnno != null) {\n+                Attribute linkageMethodValue = linkageMethodAnno.member(names.value);\n+                if (linkageMethodValue != null && linkageMethodValue instanceof Attribute.Constant) {\n+                    linkageMethodValueStr = linkageMethodValue.getValue().toString();\n+                }\n+                if (linkageMethodValueStr == null) {\n+                    log.printRawLines(\"LinkageMethod annotation without value\");\n+                    return poolConstant;\n+                }\n+            }\n+            String linkageClassValueStr = null;\n+            Attribute.Compound linkageClassAnno = currentMethSymbol.attribute(syms.linkageClassType.tsym);\n+            if (linkageClassAnno != null) {\n+                Attribute linkageClassValue = linkageClassAnno.member(names.value);\n+                if (linkageClassValue != null && linkageClassValue instanceof Attribute.Constant) {\n+                    linkageClassValueStr = linkageClassValue.getValue().toString();\n+                }\n+                if (linkageClassValueStr == null) {\n+                    log.printRawLines(\"LinkageClass annotation without value\");\n+                    return poolConstant;\n+                }\n+            }\n+            if (kindName == names.METHOD_ONLY) {\n+                if (linkageMethodValueStr == null) {\n+                    \/\/ bail out\n+                    return poolConstant;\n+                }\n+                referencesBeingLinked.add(poolConstant);\n+                return new Linkage(linkageMethodValueStr, poolConstant, false);\n+            } else if (kindName == names.CLASS) {\n+                if (linkageClassValueStr == null) {\n+                    \/\/ bail out\n+                    return poolConstant;\n+                }\n+                referencesBeingLinked.add(poolConstant);\n+                return new Linkage(linkageClassValueStr, poolConstant, poolConstant instanceof Type);\n+            } else if (kindName == names.METHOD_AND_CLASS) {\n+                if (linkageMethodValueStr == null) {\n+                    \/\/ bail out\n+                    return poolConstant;\n+                }\n+                referencesBeingLinked.add(poolConstant);\n+                return new Linkage(linkageMethodValueStr, poolConstant, poolConstant instanceof Type);\n+            }\n+            log.printRawLines(\"could not generate Linkage_info constant\");\n+            return poolConstant;\n+        }\n+\n@@ -215,0 +314,7 @@\n+    \/**\n+     * Puts a parameter into the pool and returns its index.\n+     *\/\n+    int putParameter(String id, int kind) {\n+        return pool.writeIfNeeded(new Parameter(id, kind));\n+    }\n+\n@@ -389,0 +495,3 @@\n+                    if (referencesBeingLinked.contains(c)) {\n+                        referencesBeingLinked.remove(c);\n+                    }\n@@ -410,0 +519,3 @@\n+                    if (referencesBeingLinked.contains(c)) {\n+                        referencesBeingLinked.remove(c);\n+                    }\n@@ -484,0 +596,18 @@\n+                case ClassFile.CONSTANT_Parameter: {\n+                    Parameter p = (Parameter) c;\n+                    poolbuf.appendByte(tag);\n+                    poolbuf.appendByte(p.kind);\n+                    poolbuf.appendChar(0);\n+                    break;\n+                }\n+                case ClassFile.CONSTANT_Linkage: {\n+                    Linkage l = (Linkage) c;\n+                    poolbuf.appendByte(tag);\n+                    poolbuf.appendChar(putConstant(l.parameter));\n+                    if (l.hasClassReference()) {\n+                        poolbuf.appendChar(putClass((Type)l.reference));\n+                    } else {\n+                        poolbuf.appendChar(putMember((Symbol)l.reference));\n+                    }\n+                    break;\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":134,"deletions":4,"binary":false,"changes":138,"status":"modified"}]}