{"files":[{"patch":"@@ -3251,1 +3251,0 @@\n-    (Constant INLINE_OBJECT = 'Q' \"'Q' - an inline object (objectID size).\")\n","filename":"make\/data\/jdwp\/jdwp.spec","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -145,2 +145,1 @@\n-                tag == JDWP.Tag.OBJECT ||\n-                tag == JDWP.Tag.INLINE_OBJECT;\n+                tag == JDWP.Tag.OBJECT;\n@@ -226,1 +225,0 @@\n-            case (JDWP.Tag.INLINE_OBJECT):\n@@ -270,1 +268,0 @@\n-            case (JDWP.Tag.INLINE_OBJECT):\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/JNITypeParser.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -79,4 +79,0 @@\n-    private boolean isInlineType() {\n-        return referenceType().signature().startsWith(\"Q\");\n-    }\n-\n@@ -152,19 +148,0 @@\n-    \/\/ The isSubstitutable() method must perform the same comparison on\n-    \/\/ remote inline objects as the one performed ValueBootstrapMethods.isSubstitutable()\n-    \/\/ on local instances.\n-    private boolean isSubstitutable(ObjectReferenceImpl other) {\n-        if (referenceType() != other.referenceType()) return false;\n-        List<Field> fields = referenceType().fields();\n-        for (Field f : fields) {\n-            if (f.isStatic()) {\n-                fields.remove(f);\n-            }\n-        }\n-        Map<Field,Value> thisFields = getValues(fields);\n-        Map<Field,Value> otherFields = other.getValues(fields);\n-        for (Field f : fields) {\n-            if (!thisFields.get(f).equals(otherFields.get(f))) return false;\n-        }\n-        return true;\n-    }\n-\n@@ -174,6 +151,2 @@\n-            if (isInlineType()) {\n-                return isSubstitutable(other);\n-            } else {\n-                return (ref() == other.ref()) &&\n-                        super.equals(obj);\n-            }\n+            return (ref() == other.ref()) &&\n+                    super.equals(obj);\n@@ -500,3 +473,0 @@\n-        if (isInlineType()) {\n-            throw new UnsupportedOperationException(\"Inline types cannot have unique IDs\");\n-        }\n@@ -645,5 +615,1 @@\n-        if (isInlineType()) {\n-            return \"instance of \" + referenceType().name();\n-        } else {\n-            return \"instance of \" + referenceType().name() + \"(id=\" + uniqueID() + \")\";\n-        }\n+        return \"instance of \" + referenceType().name() + \"(id=\" + uniqueID() + \")\";\n@@ -653,5 +619,1 @@\n-        if (isInlineType()) {\n-            return JDWP.Tag.INLINE_OBJECT;\n-        } else {\n-            return JDWP.Tag.OBJECT;\n-        }\n+        return JDWP.Tag.OBJECT;\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/ObjectReferenceImpl.java","additions":4,"deletions":42,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -653,1 +653,0 @@\n-               (tag == JDWP.Tag.INLINE_OBJECT) ||\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/PacketStream.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,3 +47,0 @@\n-            if (destination.signature().charAt(0) == 'Q') {\n-                throw new InvalidTypeException(\"Can't set an inline type to null\");\n-            }\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/ValueImpl.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -318,8 +318,0 @@\n-    private static boolean isReferenceArray(String signature) {\n-        int i = signature.lastIndexOf('[');\n-        if (i > -1 && signature.charAt(i+1) == 'L') {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n@@ -339,18 +331,0 @@\n-        \/\/ HACK: add second request to cover the case where className\n-        \/\/ is the name of an inline type. This is done only if the\n-        \/\/ first signature is either a reference type or an array\n-        \/\/ of a reference type.\n-        if (signature.length() > 1 &&\n-                (signature.charAt(0) == 'L' || isReferenceArray((signature)))) {\n-            List<ReferenceType> listInlineTypes;\n-            signature = signature.replaceFirst(\"L\", \"Q\");\n-            if (retrievedAllTypes) {\n-                listInlineTypes = findReferenceTypes(signature);\n-            } else {\n-                listInlineTypes = retrieveClassesBySignature(signature);\n-            }\n-            if (!listInlineTypes.isEmpty()) {\n-                list.addAll(listInlineTypes);\n-            }\n-        }\n-\n@@ -1429,1 +1403,0 @@\n-                case JDWP.Tag.INLINE_OBJECT:\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/VirtualMachineImpl.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -338,1 +338,1 @@\n-    if (typeKey == JDWP_TAG(OBJECT) || typeKey == JDWP_TAG(INLINE_OBJECT)) {\n+    if (typeKey == JDWP_TAG(OBJECT)) {\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/outStream.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-               JDWP_Tag_INLINE_OBJECT == typeKey || \\\n@@ -51,1 +50,1 @@\n-    return (typeKey == JDWP_TAG(OBJECT)) || (typeKey == JDWP_TAG(ARRAY)) || (typeKey == JDWP_TAG(INLINE_OBJECT));\n+    return (typeKey == JDWP_TAG(OBJECT)) || (typeKey == JDWP_TAG(ARRAY));\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/signature.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -300,1 +300,0 @@\n-           (tag == JDWP_TAG(INLINE_OBJECT)) ||\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/util.c","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -109,2 +109,2 @@\n-    valhalla \\\n-    com\/sun\/jdi\/JdbInlineTypesTest.java\n+    valhalla \n+\n","filename":"test\/jdk\/TEST.groups","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,161 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary test interacting with inline types through jdb\n- *\n- * @library \/test\/lib\n- * @compile -g JdbInlineTypesTest.java\n- * @run main\/othervm JdbInlineTypesTest\n- *\/\n-\n-import lib.jdb.JdbCommand;\n-import lib.jdb.JdbTest;\n-\n-import java.util.*;\n-import java.net.URLClassLoader;\n-import java.net.URL;\n-\n-class JdbInlineTypesTestTarg {\n-    static MyValue static_v = new MyValue(16,'s', (byte)3, (byte)(byte)9);\n-\n-    static primitive class SmallValue {\n-        byte b0,b1;\n-\n-        public SmallValue(byte b0, byte b1) {\n-            this.b0 = b0;\n-            this.b1 = b1;\n-        }\n-    }\n-\n-    static primitive class MyValue {\n-        int a;\n-        char b;\n-        SmallValue small;\n-\n-        public MyValue(int a, char b, byte b0, byte b1) {\n-            this.a = a;\n-            this.b = b;\n-            this.small = new SmallValue(b0, b1);\n-        }\n-    }\n-\n-    public static class ObjectContainer {\n-        int i;\n-        MyValue value;\n-    }\n-\n-    public static void bkpt() {\n-        MyValue v = new MyValue(12,'c', (byte)5, (byte)(byte)7);\n-        Object b = new Object();\n-        b = v;\n-        Object o = new Object();\n-        MyValue v2 = new MyValue(12,'c', (byte)5, (byte)7);\n-        MyValue v3 = new MyValue(11,'c', (byte)5, (byte)7);\n-        ObjectContainer oc = new ObjectContainer();\n-        MyValue[] array = new MyValue[10];\n-        System.out.println(\"v == v \" + (b == b));\n-        int i = 0;     \/\/@1 breakpoint\n-    }\n-\n-    public static void main(String[] args) {\n-        bkpt();\n-    }\n-}\n-\n-public class JdbInlineTypesTest extends JdbTest {\n-    public static void main(String argv[]) {\n-        new JdbInlineTypesTest().run();\n-    }\n-\n-    private JdbInlineTypesTest() {\n-        super(DEBUGGEE_CLASS);\n-    }\n-\n-    private static final String DEBUGGEE_CLASS = JdbInlineTypesTestTarg.class.getName();\n-\n-    @Override\n-    protected void runCases() {\n-        setBreakpointsFromTestSource(\"JdbInlineTypesTest.java\", 1);\n-        \/\/ Run to breakpoint #1\n-        execCommand(JdbCommand.run())\n-            .shouldContain(\"Breakpoint hit\");\n-\n-        \/\/ Printing a local variable containing an instance of an inline type\n-        execCommand(JdbCommand.print(\"v\"))\n-            .shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=12 b=c small=[JdbInlineTypesTestTarg$SmallValue b0=5 b1=7]]\\\"\");\n-\n-        \/\/ Printing an instance of an inline type stored in a local variable of type Object\n-        execCommand(JdbCommand.print(\"b\"))\n-            .shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=12 b=c small=[JdbInlineTypesTestTarg$SmallValue b0=5 b1=7]]\\\"\");\n-\n-        \/\/ Trying to set a local variable containing an instance of an inline types to null\n-        execCommand(JdbCommand.set(\"v\", \"null\")).shouldContain(\"Can't set an inline type to null\");\n-\n-        \/\/ Storing an instance of an inline type into a local variable of type Object\n-        execCommand(JdbCommand.set(\"o\", \"v\")).shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=12 b=c small=[JdbInlineTypesTestTarg$SmallValue b0=5 b1=7]]\\\"\");\n-\n-        \/\/ Printing a field of an instance of an inline type\n-        execCommand(JdbCommand.print(\"v.a\")).shouldContain(\" = 12\");\n-\n-        \/\/ Print a flattened field of an instance of an inline type\n-        execCommand(JdbCommand.print(\"v.small\")).shouldContain(\" = \\\"[JdbInlineTypesTestTarg$SmallValue b0=5 b1=7]\\\"\");\n-\n-        \/\/ Print a flattened field of an instance of an identity class\n-        \/\/ Note field b has a not printible value (character 0);\n-        execCommand(JdbCommand.print(\"oc.value\")).shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=0 b=\\u0000 small=[JdbInlineTypesTestTarg$SmallValue b0=0 b1=0]]\\\"\");\n-\n-        \/\/ Updating a flattened field of an instance of an identity class\n-        execCommand(JdbCommand.set(\"oc.value\", \"v\")).shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=12 b=c small=[JdbInlineTypesTestTarg$SmallValue b0=5 b1=7]]\\\"\");\n-\n-        \/\/ Trying set a flattened field to null\n-        execCommand(JdbCommand.set(\"oc.value\", \"null\")).shouldContain(\"Can't set an inline type to null\");\n-\n-        \/\/ Print a static inline field\n-        execCommand(JdbCommand.print(\"JdbInlineTypesTestTarg.static_v\"))\n-            .shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=16 b=s small=[JdbInlineTypesTestTarg$SmallValue b0=3 b1=9]]\\\"\");\n-\n-        \/\/ Updating a static inline field\n-        execCommand(JdbCommand.set(\"JdbInlineTypesTestTarg.static_v\", \"v\")).shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=12 b=c small=[JdbInlineTypesTestTarg$SmallValue b0=5 b1=7]]\\\"\");\n-\n-        \/\/ Trying set a inline field to null\n-        execCommand(JdbCommand.set(\"JdbInlineTypesTestTarg.static_v\", \"null\")).shouldContain(\"Can't set an inline type to null\");\n-\n-        \/\/ Printing an element of an inline type array\n-        execCommand(JdbCommand.print(\"array[0]\")).shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=0 b=\\u0000 small=[JdbInlineTypesTestTarg$SmallValue b0=0 b1=0]]\\\"\");\n-\n-        \/\/ Setting an element of an inline type array\n-        execCommand(JdbCommand.set(\"array[0]\", \"v\")).shouldContain(\" = \\\"[JdbInlineTypesTestTarg$MyValue a=12 b=c small=[JdbInlineTypesTestTarg$SmallValue b0=5 b1=7]]\\\"\");\n-\n-        \/\/ Trying to set an element of an inline type array to null\n-        execCommand(JdbCommand.set(\"array[1]\", \"null\")).shouldContain(\"Can't set an inline type to null\");\n-\n-        \/\/ Testing substitutability test\n-        execCommand(JdbCommand.print(\"v == v2\")).shouldContain(\" = true\");\n-        execCommand(JdbCommand.print(\"v == v3\")).shouldContain(\" = false\");\n-\n-        \/\/ Testing inline type instance creation\n-        execCommand(JdbCommand.print(\"new JdbInlineTypesTestTarg$SmallValue(42,64)\")).shouldContain(\" = \\\"[JdbInlineTypesTestTarg$SmallValue b0=42 b1=64]\\\"\");\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbInlineTypesTest.java","additions":0,"deletions":161,"binary":false,"changes":161,"status":"deleted"}]}