{"files":[{"patch":"@@ -493,0 +493,1 @@\n+            if (0 != (flags & IDENTITY_TYPE))   modifiers.add(Modifier.IDENTITY);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -483,0 +483,4 @@\n+            case CLASS:\n+                modifiers.remove(Modifier.IDENTITY);\n+                break;\n+\n@@ -486,0 +490,1 @@\n+                modifiers.remove(Modifier.IDENTITY);\n@@ -492,0 +497,1 @@\n+                modifiers.remove(Modifier.IDENTITY);\n@@ -496,0 +502,1 @@\n+                modifiers.remove(Modifier.IDENTITY);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4116,3 +4116,0 @@\n-compiler.err.projection.cant.be.instantiated=\\\n-    Illegal attempt to instantiate a projection type\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -287,0 +287,8 @@\n+                void addValue(TypeElement e) {\n+                    if (e.getModifiers().contains(Modifier.VALUE)) {\n+                        list.add(\"value\");\n+                    } else if (e.getModifiers().contains(Modifier.IDENTITY)) {\n+                        list.add(\"identity\");\n+                    }\n+                }\n+\n@@ -298,0 +306,1 @@\n+                    addValue(e);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">DeprecatedClassByAnnotation<\/span>\n+                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">DeprecatedClassByAnnotation<\/span>\n@@ -140,1 +140,1 @@\n-                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">TestClass<\/span>\n+                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">TestClass<\/span>\n@@ -238,1 +238,1 @@\n-                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">TestError<\/span>\n+                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">TestError<\/span>\n@@ -249,1 +249,1 @@\n-                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">TestException<\/span>\n+                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">TestException<\/span>\n@@ -260,1 +260,1 @@\n-                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">TestInterface<\/span>\n+                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">TestInterface<\/span>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDeprecatedDocs\/TestDeprecatedDocs.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public static class <\/span><\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public static identity class <\/span><\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHiddenTag\/TestHiddenTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-label\">C1<\/span>\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">C1<\/span>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHtmlDefinitionListTag\/TestHtmlDefinitionListTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n@@ -185,1 +185,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHtmlTag\/TestHtmlTag.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public static class <\/span><\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public static identity class <\/span><\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testInterface\/TestInterface.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n@@ -191,1 +191,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLinkOption\/TestLinkOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1358,1 +1358,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testModules\/TestModules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n@@ -543,1 +543,1 @@\n-                    <\/span><span class=\"modifiers\">public class <\/span><span class=\"element-name type-name-l\\\n+                    <\/span><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-l\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNewLanguageFeatures\/TestNewLanguageFeatures.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n@@ -267,1 +267,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testOptions\/TestOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public class <\/span><span cl\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span cl\\\n@@ -239,1 +239,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">class <\/span><span class=\"el\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">identity class <\/span><span class=\"el\\\n@@ -244,1 +244,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\"> class <\/span><span class=\"el\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">class <\/span><span class=\"el\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPrivateClasses\/TestPrivateClasses.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n+                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n@@ -97,1 +97,1 @@\n-                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n+                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n@@ -118,1 +118,1 @@\n-                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n+                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n@@ -143,1 +143,1 @@\n-                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n+                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R<\/span>\"\"\",\n@@ -174,1 +174,1 @@\n-                    <span class=\"modifiers\">public record <\/span><span class=\"element-name type-name-label\">R&lt;T&gt;<\/span>\"\"\",\n+                    <span class=\"modifiers\">public identity record <\/span><span class=\"element-name type-name-label\">R&lt;T&gt;<\/span>\"\"\",\n@@ -472,1 +472,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">public record <\/span><span c\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public identity record <\/span><span c\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordTypes\/TestRecordTypes.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -97,1 +97,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -102,1 +102,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public non-sealed class <\/span><span class=\"element-name type-name-label\">B<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public non-sealed identity class <\/span><span class=\"element-name type-name-label\">B<\/span>\n@@ -144,1 +144,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -192,1 +192,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -215,1 +215,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -238,1 +238,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -263,1 +263,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -288,1 +288,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -312,1 +312,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n@@ -336,1 +336,1 @@\n-                <div class=\"type-signature\"><span class=\"modifiers\">public sealed class <\/span><span class=\"element-name type-name-label\">A<\/span>\n+                <div class=\"type-signature\"><span class=\"modifiers\">public sealed identity class <\/span><span class=\"element-name type-name-label\">A<\/span>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSealedTypes\/TestSealedTypes.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">class <\/span><span class=\"el\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">identity class <\/span><span class=\"el\\\n@@ -95,1 +95,1 @@\n-                    <div class=\"type-signature\"><span class=\"modifiers\">class <\/span><span class=\"el\\\n+                    <div class=\"type-signature\"><span class=\"modifiers\">identity class <\/span><span class=\"el\\\n@@ -469,1 +469,1 @@\n-                    <\/span><span class=\"modifiers\">class <\/span><span class=\"element-name type-name-\\\n+                    <\/span><span class=\"modifiers\">identity class <\/span><span class=\"element-name type-name-\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTypeAnnotations\/TestTypeAnnotations.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-                    public class <\/span><span class=\"element-name\"><a href=\"..\/src-html\/pkg\/ClassUse\\\n+                    public identity class <\/span><span class=\"element-name\"><a href=\"..\/src-html\/pkg\/ClassUse\\\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTypeParams\/TestTypeParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8308590\n+ * @summary  value classes\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestValueClasses\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestValueClasses extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestValueClasses();\n+        tester.runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testValueClassModifiers(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"package p; public value class ValueClass {}\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/ValueClass.html\", true,\n+                \"\"\"\n+                <div class=\"type-signature\"><span class=\"modifiers\">public value final class <\/span><span class=\"element-name type-name-label\">ValueClass<\/span>\n+                \"\"\");\n+    }\n+\n+    @Test\n+    public void testIdentityClassModifiers(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"package p; public identity class IdentityClass {}\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/IdentityClass.html\", true,\n+                \"\"\"\n+                <div class=\"type-signature\"><span class=\"modifiers\">public identity class <\/span><span class=\"element-name type-name-label\">IdentityClass<\/span>\n+                \"\"\");\n+    }\n+\n+    @Test\n+    public void testValueInterfaceModifiers(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"package p; public value interface ValueInterface {}\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/ValueInterface.html\", true,\n+                \"\"\"\n+                <div class=\"type-signature\"><span class=\"modifiers\">public value interface <\/span><span class=\"element-name type-name-label\">ValueInterface<\/span><\/div>\n+                \"\"\");\n+    }\n+\n+    @Test\n+    public void testIdentityInterfaceModifiers(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"package p; public identity interface IdentityInterface {}\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/IdentityInterface.html\", true,\n+                \"\"\"\n+                <div class=\"type-signature\"><span class=\"modifiers\">public identity interface <\/span><span class=\"element-name type-name-label\">IdentityInterface<\/span><\/div>\n+                \"\"\");\n+    }\n+\n+    @Test\n+    public void testImplicitConstModifiers(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                package p;\n+\n+                public value class ValueClassWithImplicitConst {\n+                    public implicit ValueClassWithImplicitConst();\n+                }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/ValueClassWithImplicitConst.html\", true,\n+                \"\"\"\n+                <div class=\"member-signature\"><span class=\"modifiers\">public implicit<\/span>&nbsp;<span class=\"element-name\">ValueClassWithImplicitConst<\/span>()<\/div>\n+                \"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testValueClasses\/TestValueClasses.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -24,0 +24,1 @@\n+\/\/ key: compiler.err.cant.implement.non.atomic\n@@ -25,5 +26,1 @@\n-\/**\n- * Exemplar unnamed class.\n- *\/\n-public void main() {\n-    System.out.println(\"Hello, world.\");\n+class CantImplementNonAtomic implements NonAtomic {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantImplementNonAtomic.java","additions":2,"deletions":5,"binary":false,"changes":7,"previous_filename":"test\/jdk\/java\/lang\/Class\/UnnamedClass\/Unnamed.java","status":"copied"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.implicit.const.cant.have.body\n+\n+value class ImplicitConstructorWithBody {\n+    public implicit ImplicitConstructorWithBody() {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitConstructorWithBody.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.implicit.const.must.be.declared.in.value.class\n+\n+class ImplicitMustBeInValueClass {\n+    public implicit ImplicitMustBeInValueClass();\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitMustBeInValueClass.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.implicit.const.must.be.public\n+\n+value class ImplicitMustBePublic {\n+    implicit ImplicitMustBePublic();\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ImplicitMustBePublic.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -25,1 +25,0 @@\n-\/\/ options: -XDenablePrimitiveClasses\n@@ -27,3 +26,2 @@\n-primitive class SuperNotAllowedInPrimitiveCtor {\n-\n-    SuperNotAllowedInPrimitiveCtor() {\n+value class SuperNotAllowedInValueClassCtor {\n+    SuperNotAllowedInValueClassCtor() {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SuperNotAllowedInPrimitiveCtor.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-\/\/ options: -XDenablePrimitiveClasses\n@@ -28,1 +27,1 @@\n-primitive class TypeReqIdentity {\n+value class TypeReqIdentity {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TypeReqIdentity.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.value.class.with.implicit.cannot.be.inner\n+\n+class ValueClassWithImplicitCannotBeInner {\n+    value class V {\n+        public implicit V();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCannotBeInner.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.value.class.with.implicit.declares.init.block\n+\n+value class ValueClassWithImplicitCantDeclareInitBlock {\n+    int i;\n+    {\n+        i = 0;\n+    }\n+    public implicit ValueClassWithImplicitCantDeclareInitBlock();\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCantDeclareInitBlock.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.value.class.with.implicit.instance.field.initializer\n+\n+value class ValueClassWithImplicitCantHaveFieldInit {\n+    int i = 0;\n+    public implicit ValueClassWithImplicitCantHaveFieldInit ();\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ValueClassWithImplicitCantHaveFieldInit.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -119,1 +119,1 @@\n-                \"- compiler.note.proc.messager: visiting: NonSealedClass1 Modifiers: [non-sealed]\",\n+                \"- compiler.note.proc.messager: visiting: NonSealedClass1 Modifiers: [non-sealed, identity]\",\n@@ -121,1 +121,1 @@\n-                \"- compiler.note.proc.messager: visiting: SealedClass Modifiers: [sealed]\",\n+                \"- compiler.note.proc.messager: visiting: SealedClass Modifiers: [sealed, identity]\",\n@@ -125,1 +125,1 @@\n-                \"- compiler.note.proc.messager: visiting: FinalClass Modifiers: [final]\",\n+                \"- compiler.note.proc.messager: visiting: FinalClass Modifiers: [identity, final]\",\n@@ -127,1 +127,1 @@\n-                \"- compiler.note.proc.messager: visiting: NonSealedClass2 Modifiers: [non-sealed]\",\n+                \"- compiler.note.proc.messager: visiting: NonSealedClass2 Modifiers: [non-sealed, identity]\",\n@@ -129,1 +129,1 @@\n-                \"- compiler.note.proc.messager: visiting: ClassOutOfSealedHierarchy Modifiers: []\",\n+                \"- compiler.note.proc.messager: visiting: ClassOutOfSealedHierarchy Modifiers: [identity]\",\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestSealed.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308590\n+ * @summary Test basic modeling for value classes\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *     jdk.compiler\/com.sun.tools.javac.api\n+ *     jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask JavacTestingAbstractProcessor\n+ * @run main TestValueClasses\n+ *\/\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+\n+import javax.annotation.processing.*;\n+import javax.lang.model.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.type.*;\n+import javax.lang.model.util.*;\n+import java.time.*;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Mode;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class TestValueClasses extends TestRunner {\n+\n+    protected ToolBox tb;\n+\n+    TestValueClasses() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new TestValueClasses().runTests();\n+    }\n+\n+    \/**\n+     * Run all methods annotated with @Test, and throw an exception if any\n+     * errors are reported..\n+     *\n+     * @throws Exception if any errors occurred\n+     *\/\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws IOException {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    void checkOutputContains(String log, String... expect) throws Exception {\n+        for (String e : expect) {\n+            if (!log.contains(e)) {\n+                throw new Exception(\"expected output not found: \" + e);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void TestValueClassesProcessor(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path r = src.resolve(\"Test\");\n+\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        tb.writeJavaFiles(r,\n+                \"\"\"\n+                value interface ValueInterface {}\n+\n+                identity interface IdentityInterface {}\n+\n+                value class ValueClass {}\n+\n+                identity class IdentityClass {}\n+\n+                value class ValueClassWithImplicitConst {\n+                    public implicit ValueClassWithImplicitConst();\n+                }\n+                \"\"\"\n+        );\n+\n+        List<String> expected = List.of(\n+                \"- compiler.note.proc.messager: visiting: ValueInterface Modifiers: [abstract, value]\",\n+                \"- compiler.note.proc.messager: visiting: IdentityInterface Modifiers: [abstract, identity]\",\n+                \"- compiler.note.proc.messager: visiting: ValueClass Modifiers: [value, final]\",\n+                \"- compiler.note.proc.messager:     constructor modifiers: []\",\n+                \"- compiler.note.proc.messager: visiting: IdentityClass Modifiers: [identity]\",\n+                \"- compiler.note.proc.messager:     constructor modifiers: []\",\n+                \"- compiler.note.proc.messager: visiting: ValueClassWithImplicitConst Modifiers: [value, final]\",\n+                \"- compiler.note.proc.messager:     constructor modifiers: [public, implicit]\"\n+        );\n+\n+        for (Mode mode : new Mode[] {Mode.API}) {\n+            List<String> log = new JavacTask(tb, mode)\n+                    .options(\"-processor\", ValueClassesProcessor.class.getName(),\n+                            \"-XDrawDiagnostics\")\n+                    .files(findJavaFiles(src))\n+                    .outdir(classes)\n+                    .run()\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+\n+            System.out.println(\"log:\" +log);\n+\n+            if (!expected.equals(log)) {\n+                if (expected.size() == log.size()) {\n+                    for (int i = 0; i < expected.size(); i++) {\n+                        if (!expected.get(i).equals(log.get(i))) {\n+                            System.err.println(\"failing at line \" + (i + 1));\n+                            System.err.println(\"    expecting \" + expected.get(i));\n+                            System.err.println(\"    found \" + log.get(i));\n+                        }\n+                    }\n+                } else {\n+                    System.err.println(\"expected and log lists differ in length\");\n+                }\n+                throw new AssertionError(\"Unexpected output: \" + log);\n+            }\n+        }\n+    }\n+\n+    public static final class ValueClassesProcessor extends JavacTestingAbstractProcessor {\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            if (!roundEnv.processingOver()) {\n+                Messager messager = processingEnv.getMessager();\n+                ElementScanner scanner = new ValueClassesScanner(messager);\n+                for(Element rootElement : roundEnv.getRootElements()) {\n+                    scanner.visit(rootElement);\n+                }\n+            }\n+            return true;\n+        }\n+\n+        class ValueClassesScanner extends ElementScanner<Void, Void> {\n+\n+            Messager messager;\n+\n+            public ValueClassesScanner(Messager messager) {\n+                this.messager = messager;\n+            }\n+\n+            @Override\n+            public Void visitType(TypeElement element, Void p) {\n+                messager.printNote(\"visiting: \" + element.getSimpleName() + \" Modifiers: \" + element.getModifiers());\n+                List<? extends Element> enclosedElements = element.getEnclosedElements();\n+                for (Element elem : enclosedElements) {\n+                    System.out.println(\"visiting \" + elem.getSimpleName());\n+                    switch (elem.getSimpleName().toString()) {\n+                        case \"<vnew>\": case \"<init>\":\n+                            messager.printNote(\"    constructor modifiers: \" + elem.getModifiers());\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                }\n+                return super.visitType(element, p);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestValueClasses.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"},{"patch":"@@ -129,64 +129,0 @@\n-\n-    @Test\n-    public void testPrimitiveRecordClassFileReading(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-\n-        tb.writeJavaFiles(src,\n-                           \"\"\"\n-                           public primitive record R(int i, @A long j, java.util.List<String> l) {}\n-                           \"\"\",\n-                           \"\"\"\n-                           public @interface A {}\n-                           \"\"\");\n-\n-        Path out = base.resolve(\"out\");\n-        Files.createDirectories(out);\n-\n-        new JavacTask(tb)\n-                .outdir(out)\n-                .options(\"-XDenablePrimitiveClasses\")\n-                .files(findJavaFiles(src))\n-                .run();\n-\n-        \/\/read the class file back, to verify javac's ClassReader\n-        \/\/reads the Record attribute properly:\n-        String output = new JavacTask(tb)\n-                .options(\"-Xprint\", \"-XDenablePrimitiveClasses\")\n-                .classpath(out.toString())\n-                .classes(\"R\")\n-                .run()\n-                .writeAll()\n-                .getOutput(Task.OutputKind.STDOUT)\n-                .replaceAll(\"\\\\R\", \"\\n\");\n-\n-        String expected =\n-                \"\"\"\n-                \\n\\\n-                public primitive value record R(int i, @A long j, java.util.List<java.lang.String> l) {\n-                  private final int i;\n-                  @A\n-                  private final long j;\n-                  private final java.util.List<java.lang.String> l;\n-                \\n\\\n-                  public final java.lang.String toString();\n-                \\n\\\n-                  public final int hashCode();\n-                \\n\\\n-                  public final boolean equals(java.lang.Object arg0);\n-                \\n\\\n-                  public int i();\n-                \\n\\\n-                  @A\n-                  public long j();\n-                \\n\\\n-                  public java.util.List<java.lang.String> l();\n-                \\n\\\n-                  public R(int i,\n-                    @A long j,\n-                    java.util.List<java.lang.String> l);\n-                }\n-                \"\"\";\n-        if (!Objects.equals(expected, output)) {\n-            throw new AssertionError(\"Unexpected output: \" + output);\n-        }\n-    }\n","filename":"test\/langtools\/tools\/javac\/records\/RecordReading.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+import com.sun.tools.javac.util.Assert;\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.Attributes;\n@@ -51,0 +55,2 @@\n+import com.sun.tools.classfile.ImplicitCreation_attribute;\n+import com.sun.tools.classfile.NullRestricted_attribute;\n@@ -887,0 +893,7 @@\n+        assertFail(\"compiler.err.implicit.const.cant.have.body\",\n+                \"\"\"\n+                value class V {\n+                    public implicit V() {}\n+                }\n+                \"\"\"\n+        );\n@@ -936,0 +949,11 @@\n+        assertFail(\"compiler.err.value.class.with.implicit.cannot.be.inner\",\n+                \"\"\"\n+                class Outer {\n+                    void m() {\n+                        value class V {\n+                            public implicit V();\n+                        }\n+                    }\n+                }\n+                \"\"\"\n+        );\n@@ -964,0 +988,75 @@\n+\n+    private File findClassFileOrFail(File dir, String name) {\n+        for (final File fileEntry : dir.listFiles()) {\n+            if (fileEntry.getName().equals(name)) {\n+                return fileEntry;\n+            }\n+        }\n+        throw new AssertionError(\"file not found\");\n+    }\n+\n+    private Attribute findAttributeOrFail(Attributes attributes, Class<? extends Attribute> attrClass) {\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getClass() == attrClass) {\n+                return attribute;\n+            }\n+        }\n+        throw new AssertionError(\"attribute not found\");\n+    }\n+\n+    public void testClassAttributes() throws Exception {\n+        String code =\n+                \"\"\"\n+                value class V1 {\n+                    String! f1;\n+                    String f2;\n+                    public implicit V1();\n+                }\n+\n+                value class V2 {\n+                    public V2() {}\n+                }\n+                \"\"\";\n+\n+        File dir = assertOK(true, code);\n+\n+        \/\/ test for V1\n+        ClassFile classFile = ClassFile.read(findClassFileOrFail(dir, \"V1.class\"));\n+\n+        Field field1 = classFile.fields[0];\n+        findAttributeOrFail(field1.attributes, NullRestricted_attribute.class);\n+        Field field2 = classFile.fields[1];\n+        try {\n+            findAttributeOrFail(field2.attributes, NullRestricted_attribute.class);\n+            throw new AssertionError(\"NullRestricted attribute shouldn't be here\");\n+        } catch (Throwable t) {\n+            \/\/ good\n+        }\n+        findAttributeOrFail(classFile.attributes, ImplicitCreation_attribute.class);\n+\n+        classFile = ClassFile.read(findClassFileOrFail(dir, \"V2.class\"));\n+        try {\n+            findAttributeOrFail(classFile.attributes, ImplicitCreation_attribute.class);\n+            throw new AssertionError(\"ImplicitCreation attribute shouldn't be here\");\n+        } catch (Throwable t) {\n+            \/\/ good\n+        }\n+    }\n+\n+    public void testImplementingNonAtomic() {\n+        assertFail(\"compiler.err.cant.implement.non.atomic\",\n+                \"\"\"\n+                class V implements NonAtomic {}\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.cant.implement.non.atomic\",\n+                \"\"\"\n+                value class V implements NonAtomic {}\n+                \"\"\"\n+        );\n+        assertOK(\n+                \"\"\"\n+                abstract class V implements NonAtomic {}\n+                \"\"\"\n+        );\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"modified"}]}