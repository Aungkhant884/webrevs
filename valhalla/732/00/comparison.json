{"files":[{"patch":"@@ -2609,29 +2609,0 @@\n-            final Symbol symbol = TreeInfo.symbol(tree.meth);\n-            if (symbol != null) {\n-                \/* Is this an ill-conceived attempt to invoke jlO methods not available on value class types ??\n-                 *\/\n-                boolean superCallOnValueReceiver = env.enclClass.sym.type.isValueClass()\n-                        && (tree.meth.hasTag(SELECT))\n-                        && ((JCFieldAccess)tree.meth).selected.hasTag(IDENT)\n-                        && TreeInfo.name(((JCFieldAccess)tree.meth).selected) == names._super;\n-                if (qualifier.isValueClass() || superCallOnValueReceiver) {\n-                    int argSize = argtypes.size();\n-                    Name name = symbol.name;\n-                    switch (name.toString()) {\n-                        case \"wait\":\n-                            if (argSize == 0\n-                                    || (types.isConvertible(argtypes.head, syms.longType) &&\n-                                    (argSize == 1 || (argSize == 2 && types.isConvertible(argtypes.tail.head, syms.intType))))) {\n-                                log.error(tree.pos(), Errors.ValueClassDoesNotSupport(name));\n-                            }\n-                            break;\n-                        case \"notify\":\n-                        case \"notifyAll\":\n-                        case \"finalize\":\n-                            if (argSize == 0)\n-                                log.error(tree.pos(), Errors.ValueClassDoesNotSupport(name));\n-                            break;\n-                    }\n-                }\n-            }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2046,9 +2046,0 @@\n-        if (origin.isValueClass() && other.owner == syms.objectType.tsym && m.type.getParameterTypes().size() == 0) {\n-            if (m.name == names.finalize) {\n-                log.error(TreeInfo.diagnosticPositionFor(m, tree),\n-                        Errors.ValueClassMayNotOverride(m.name));\n-                m.flags_field |= BAD_OVERRIDE;\n-                return;\n-            }\n-        }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3934,4 +3934,0 @@\n-# 0: name (of method)\n-compiler.err.value.class.may.not.override=\\\n-    value classes may not override the method {0} from Object\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.value.class.may.not.override\n-\n-primitive class InlineBogusOverride {\n-    int x = 42;\n-    public void finalize() {}\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassMayNotOverride.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Value types do not support finalize\n- *\n- * @compile\/fail\/ref=CheckFinalize.out -XDrawDiagnostics CheckFinalize.java\n- *\/\n-\n-final primitive class CheckFinalize {\n-    @Override\n-    protected void finalize() {}\n-\n-    final primitive class CheckFinalizeInner { int x = 10; }\n-\n-    void foo(CheckFinalizeInner cfi, CheckFinalize cf) {\n-        cfi.finalize();          \/\/ Error\n-        cf.finalize();           \/\/ Error.\n-    }\n-    int x = 10;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFinalize.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-CheckFinalize.java:10:20: compiler.err.value.class.may.not.override: finalize\n-CheckFinalize.java:15:12: compiler.err.report.access: finalize(), protected, java.lang.Object\n-CheckFinalize.java:15:12: compiler.warn.has.been.deprecated.for.removal: finalize(), java.lang.Object\n-CheckFinalize.java:15:21: compiler.err.value.class.does.not.support: finalize\n-CheckFinalize.java:16:20: compiler.err.value.class.does.not.support: finalize\n-4 errors\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckFinalize.out","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8237066\n- * @summary  Adjust inline type's interactions with jlO methods per latest spec\n- * @compile\/fail\/ref=CheckObjectMethodsUsage.out -XDrawDiagnostics CheckObjectMethodsUsage.java\n- *\/\n-\n-public primitive class CheckObjectMethodsUsage {\n-    int x = 42;\n-\n-    public void finalize() {}\n-    public Object clone() {}\n-\n-    void testObjectMethods() {\n-        super.finalize();\n-        wait(0L, 0);\n-        super.wait(0L, 0);\n-        wait(0L);\n-        super.wait(0L);\n-        wait();\n-        super.wait();\n-        notify();\n-        super.notify();\n-        notifyAll();\n-        super.notifyAll();\n-        super.clone();\n-        super.hashCode();\n-        super.toString();\n-        super.equals(this);\n-        super.getClass();\n-    }\n-    public static void main(String [] args) {\n-        new CheckObjectMethodsUsage().testObjectMethods();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckObjectMethodsUsage.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-CheckObjectMethodsUsage.java:11:17: compiler.err.value.class.may.not.override: finalize\n-CheckObjectMethodsUsage.java:15:14: compiler.warn.has.been.deprecated.for.removal: finalize(), java.lang.Object\n-CheckObjectMethodsUsage.java:15:23: compiler.err.value.class.does.not.support: finalize\n-CheckObjectMethodsUsage.java:16:13: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:17:19: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:18:13: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:19:19: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:20:13: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:21:19: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:22:15: compiler.err.value.class.does.not.support: notify\n-CheckObjectMethodsUsage.java:23:21: compiler.err.value.class.does.not.support: notify\n-CheckObjectMethodsUsage.java:24:18: compiler.err.value.class.does.not.support: notifyAll\n-CheckObjectMethodsUsage.java:25:24: compiler.err.value.class.does.not.support: notifyAll\n-12 errors\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckObjectMethodsUsage.out","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary May not synchronize on value types\n- *\n- * @compile\/fail\/ref=CheckSync.out -XDrawDiagnostics CheckSync.java\n- *\/\n-\n-\/* Note: ATM, value types do not have jlO in their lineage. So they anyway\n-   cannot synchronize using the methods declared on jlO.\n-*\/\n-\n-public final primitive class CheckSync {\n-\n-    final primitive class Val {\n-        int x = 10;\n-        void foo() {\n-            \/\/ All calls below are bad.\n-            wait();\n-            wait(10);\n-            wait(10, 10);\n-            notify();\n-            notifyAll();\n-            finalize();\n-        }\n-    }\n-\n-    final Val val = Val.default;\n-\n-    void test() throws InterruptedException {\n-        \/\/ All calls below are bad.\n-        val.wait();\n-        val.wait(10);\n-        val.wait(new Integer(10));\n-        val.wait(new Long(10));\n-        val.wait(10L);\n-        val.wait(10L, 10);\n-        val.notify();\n-        val.notifyAll();\n-    }\n-    int x = 10;\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSync.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-CheckSync.java:18:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:19:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:20:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:21:19: compiler.err.value.class.does.not.support: notify\n-CheckSync.java:22:22: compiler.err.value.class.does.not.support: notifyAll\n-CheckSync.java:23:13: compiler.warn.has.been.deprecated.for.removal: finalize(), java.lang.Object\n-CheckSync.java:23:21: compiler.err.value.class.does.not.support: finalize\n-CheckSync.java:31:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:32:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:33:18: compiler.warn.has.been.deprecated.for.removal: java.lang.Integer(int), java.lang.Integer\n-CheckSync.java:33:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:34:18: compiler.warn.has.been.deprecated.for.removal: java.lang.Long(long), java.lang.Long\n-CheckSync.java:34:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:35:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:36:17: compiler.err.value.class.does.not.support: wait\n-CheckSync.java:37:19: compiler.err.value.class.does.not.support: notify\n-CheckSync.java:38:22: compiler.err.value.class.does.not.support: notifyAll\n-14 errors\n-3 warnings\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSync.out","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8210310\n- * @summary Javac allows invocation of identity sensitive jlO methods on values via super.\n- * @compile\/fail\/ref=SneakThroSuperCallTest.out -XDrawDiagnostics -XDdev SneakThroSuperCallTest.java\n- *\/\n-\n-public primitive class SneakThroSuperCallTest {\n-\n-    int x = 10;\n-\n-    void foo() {\n-        super.notify();\n-    }\n-\n-    public int hashCode() {\n-        return super.hashCode();\n-    }\n-\n-    public String toString () {\n-        return super.toString();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SneakThroSuperCallTest.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-SneakThroSuperCallTest.java:13:21: compiler.err.value.class.does.not.support: notify\n-1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SneakThroSuperCallTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8237066 8281013\n- * @summary  Adjust value type's interactions with jlO methods per latest spec\n- * @compile\/fail\/ref=CheckObjectMethodsUsage.out -XDrawDiagnostics CheckObjectMethodsUsage.java\n- *\/\n-\n-public value class CheckObjectMethodsUsage {\n-\n-\n-    public void finalize() {}\n-    public Object clone() {}\n-\n-    void testObjectMethods() {\n-        super.finalize();\n-        wait(0L, 0);\n-        super.wait(0L, 0);\n-        wait(0L);\n-        super.wait(0L);\n-        wait();\n-        super.wait();\n-        notify();\n-        super.notify();\n-        notifyAll();\n-        super.notifyAll();\n-        super.clone();\n-        super.hashCode();\n-        super.toString();\n-        super.equals(this);\n-        super.getClass();\n-    }\n-    public static void main(String [] args) {\n-        new CheckObjectMethodsUsage().testObjectMethods();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckObjectMethodsUsage.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-CheckObjectMethodsUsage.java:11:17: compiler.err.value.class.may.not.override: finalize\n-CheckObjectMethodsUsage.java:15:14: compiler.warn.has.been.deprecated.for.removal: finalize(), java.lang.Object\n-CheckObjectMethodsUsage.java:15:23: compiler.err.value.class.does.not.support: finalize\n-CheckObjectMethodsUsage.java:16:13: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:17:19: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:18:13: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:19:19: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:20:13: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:21:19: compiler.err.value.class.does.not.support: wait\n-CheckObjectMethodsUsage.java:22:15: compiler.err.value.class.does.not.support: notify\n-CheckObjectMethodsUsage.java:23:21: compiler.err.value.class.does.not.support: notify\n-CheckObjectMethodsUsage.java:24:18: compiler.err.value.class.does.not.support: notifyAll\n-CheckObjectMethodsUsage.java:25:24: compiler.err.value.class.does.not.support: notifyAll\n-12 errors\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckObjectMethodsUsage.out","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -13,1 +13,1 @@\n-SemanticsViolationsTest.java:72:21: compiler.err.value.class.may.not.override: finalize\n+SemanticsViolationsTest.java:72:21: compiler.warn.has.been.deprecated.for.removal: finalize(), java.lang.Object\n@@ -20,1 +20,2 @@\n-19 errors\n+18 errors\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/SemanticsViolationsTest.out","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}