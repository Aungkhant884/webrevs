{"files":[{"patch":"@@ -55,1 +55,0 @@\n-import com.sun.tools.javac.code.Type.WildcardType;\n@@ -69,1 +68,0 @@\n-import com.sun.tools.javac.util.Options;\n@@ -252,1 +250,1 @@\n-    public final Type nonAtomicType;\n+    public final Type looselyConsistentValueType;\n@@ -653,1 +651,1 @@\n-        nonAtomicType = enterClass(\"java.lang.NonAtomic\");\n+        looselyConsistentValueType = enterClass(\"java.lang.LooselyConsistentValue\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2803,1 +2803,1 @@\n-        boolean implementsNonAtomic = false;\n+        boolean implementsLooselyConsistentValue = false;\n@@ -2805,1 +2805,1 @@\n-            implementsNonAtomic = allowValueClasses ? types.asSuper(c, syms.nonAtomicType.tsym) != null : false;\n+            implementsLooselyConsistentValue = allowValueClasses ? types.asSuper(c, syms.looselyConsistentValueType.tsym) != null : false;\n@@ -2811,1 +2811,1 @@\n-        if (c.getKind() == TypeKind.DECLARED && implementsNonAtomic && !c.tsym.isAbstract()) {\n+        if (c.getKind() == TypeKind.DECLARED && implementsLooselyConsistentValue && !c.tsym.isAbstract()) {\n@@ -2813,1 +2813,1 @@\n-                log.error(pos, Errors.CantImplementNonAtomic(c.tsym));\n+                log.error(pos, Errors.CantImplementInterface(c.tsym));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-import com.sun.tools.javac.code.Scope.WriteableScope;\n-import com.sun.tools.javac.code.Source.Feature;\n@@ -965,1 +963,1 @@\n-            int flags = ACC_DEFAULT | (csym.isSubClass(syms.nonAtomicType.tsym, types) ? ACC_NON_ATOMIC : 0);\n+            int flags = ACC_DEFAULT | (csym.isSubClass(syms.looselyConsistentValueType.tsym, types) ? ACC_NON_ATOMIC : 0);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4150,2 +4150,2 @@\n-compiler.err.cant.implement.non.atomic=\\\n-    class {0} cannot implement NonAtomic interface. Concrete classes implementing this interface must:\\n\\\n+compiler.err.cant.implement.interface=\\\n+    class {0} cannot implement LooselyConsistentValue interface. Concrete classes implementing this interface must:\\n\\\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/\/ key: compiler.err.cant.implement.non.atomic\n+\/\/ key: compiler.err.cant.implement.interface\n@@ -26,1 +26,1 @@\n-class CantImplementNonAtomic implements NonAtomic {\n+class CantImplementInterface implements LooselyConsistentValue {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantImplementInterface.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantImplementNonAtomic.java","status":"renamed"},{"patch":"@@ -1050,2 +1050,2 @@\n-    public void testImplementingNonAtomic() {\n-        assertFail(\"compiler.err.cant.implement.non.atomic\",\n+    public void testImplementingLooselyConsistentValue() {\n+        assertFail(\"compiler.err.cant.implement.interface\",\n@@ -1053,1 +1053,1 @@\n-                class V implements NonAtomic {}\n+                class V implements LooselyConsistentValue {}\n@@ -1056,1 +1056,1 @@\n-        assertFail(\"compiler.err.cant.implement.non.atomic\",\n+        assertFail(\"compiler.err.cant.implement.interface\",\n@@ -1058,1 +1058,1 @@\n-                value class V implements NonAtomic {}\n+                value class V implements LooselyConsistentValue {}\n@@ -1063,1 +1063,1 @@\n-                abstract class V implements NonAtomic {}\n+                abstract class V implements LooselyConsistentValue {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}