{"files":[{"patch":"@@ -8730,31 +8730,0 @@\n-instruct castN2I(iRegINoSp dst, iRegN src) %{\n-  match(Set dst (CastN2I src));\n-\n-  ins_cost(INSN_COST);\n-  format %{ \"movw $dst, $src\\t# compressed ptr -> int\" %}\n-\n-  ins_encode %{\n-    if ($dst$$reg != $src$$reg) {\n-      __ movw(as_Register($dst$$reg), as_Register($src$$reg));\n-    }\n-  %}\n-\n-  ins_pipe(ialu_reg);\n-%}\n-\n-instruct castI2N(iRegNNoSp dst, iRegI src) %{\n-  match(Set dst (CastI2N src));\n-\n-  ins_cost(INSN_COST);\n-  format %{ \"movw $dst, $src\\t# int -> compressed ptr\" %}\n-\n-  ins_encode %{\n-    if ($dst$$reg != $src$$reg) {\n-      __ movw(as_Register($dst$$reg), as_Register($src$$reg));\n-    }\n-  %}\n-\n-  ins_pipe(ialu_reg);\n-%}\n-\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -6662,27 +6662,0 @@\n-instruct castN2I(rRegI dst, rRegN src)\n-%{\n-  match(Set dst (CastN2I src));\n-\n-  format %{ \"movl    $dst, $src\\t# compressed ptr -> int\" %}\n-  ins_encode %{\n-    if ($dst$$reg != $src$$reg) {\n-      __ movl($dst$$Register, $src$$Register);\n-    }\n-  %}\n-  ins_pipe(ialu_reg_reg); \/\/ XXX\n-%}\n-\n-instruct castI2N(rRegN dst, rRegI src)\n-%{\n-  match(Set dst (CastI2N src));\n-\n-  format %{ \"movl    $dst, $src\\t# int -> compressed ptr\" %}\n-  ins_encode %{\n-    if ($dst$$reg != $src$$reg) {\n-      __ movl($dst$$Register, $src$$Register);\n-    }\n-  %}\n-  ins_pipe(ialu_reg_reg); \/\/ XXX\n-%}\n-\n-\n@@ -11515,11 +11488,0 @@\n-\/\/ Fold array properties check\n-instruct testI_mem_imm(rFlagsReg cr, memory mem, immI con, immI0 zero)\n-%{\n-  match(Set cr (CmpI (AndI (CastN2I (LoadNKlass mem)) con) zero));\n-\n-  format %{ \"testl   $mem, $con\" %}\n-  opcode(0xF7, 0x00);\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con32(con));\n-  ins_pipe(ialu_mem_imm);\n-%}\n-\n@@ -11835,11 +11797,0 @@\n-  ins_pipe(ialu_cr_reg_mem);\n-%}\n-\n-\/\/ Fold array properties check\n-instruct testL_reg_mem3(rFlagsReg cr, memory mem, rRegL src, immL0 zero)\n-%{\n-  match(Set cr (CmpL (AndL (CastP2X (LoadKlass mem)) src) zero));\n-\n-  format %{ \"testq   $src, $mem\\t# test array properties\" %}\n-  opcode(0x85);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -766,1 +766,0 @@\n-       !strcmp(_matrule->_rChild->_opType,\"CastI2N\")      ||  \/\/ new result type\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -152,19 +152,0 @@\n-\/\/ convert between a 32 bit integer and a compressed pointer\n-class CastI2NNode : public TypeNode {\n-  public:\n-  CastI2NNode(Node *n, const Type *t) : TypeNode(t, 2) {\n-    init_req(1, n);\n-  }\n-  virtual int Opcode() const;\n-  virtual uint ideal_reg() const { return Op_RegN; }\n-};\n-\n-class CastN2INode : public Node {\n-  public:\n-  CastN2INode(Node *n) : Node(NULL, n) {}\n-  virtual int Opcode() const;\n-  virtual uint ideal_reg() const { return Op_RegI; }\n-  virtual const Type *bottom_type() const { return TypeInt::INT; }\n-};\n-\n-\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -66,2 +66,0 @@\n-macro(CastI2N)\n-macro(CastN2I)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1579,1 +1579,0 @@\n-  declare_c2_type(CastI2NNode, TypeNode)                                  \\\n@@ -1583,1 +1582,0 @@\n-  declare_c2_type(CastN2INode, Node)                                      \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}