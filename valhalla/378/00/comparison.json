{"files":[{"patch":"@@ -276,7 +276,6 @@\n-    if (field_is_flattened(i)) {\n-      if (ft->as_inline_klass()->is_empty()) {\n-        value = InlineTypeNode::make_default(kit->gvn(), ft->as_inline_klass());\n-      } else {\n-        \/\/ Recursively load the flattened inline type field\n-        value = InlineTypeNode::make_from_flattened(kit, ft->as_inline_klass(), base, ptr, holder, offset, decorators);\n-      }\n+    if (ft->is_inlinetype() && ft->as_inline_klass()->is_empty()) {\n+      \/\/ Loading from a field of an empty inline type. Just return the default instance.\n+      value = InlineTypeNode::make_default(kit->gvn(), ft->as_inline_klass());\n+    } else if (field_is_flattened(i)) {\n+      \/\/ Recursively load the flattened inline type field\n+      value = InlineTypeNode::make_from_flattened(kit, ft->as_inline_klass(), base, ptr, holder, offset, decorators);\n@@ -692,7 +691,7 @@\n-      if (field_is_flattened(i)) {\n-        if (!vt->inline_klass()->is_empty()) {\n-          \/\/ Check inline type field load recursively\n-          base = vt->is_loaded(phase, vk, base, offset - vt->inline_klass()->first_field_offset());\n-          if (base == NULL) {\n-            return NULL;\n-          }\n+      if (vt->inline_klass()->is_empty()) {\n+        continue;\n+      } else if (field_is_flattened(i)) {\n+        \/\/ Check inline type field load recursively\n+        base = vt->is_loaded(phase, vk, base, offset - vt->inline_klass()->first_field_offset());\n+        if (base == NULL) {\n+          return NULL;\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -3714,0 +3714,21 @@\n+\n+    static primitive class Test139Value {\n+        Object obj = null;\n+        MyValueEmpty empty = MyValueEmpty.default;\n+    }\n+\n+    static primitive class Test139Wrapper {\n+        Test139Value value = Test139Value.default;\n+    }\n+\n+    @Test(failOn = ALLOC + LOAD + STORE + TRAP)\n+    public MyValueEmpty test139() {\n+        Test139Wrapper w = new Test139Wrapper();\n+        return w.value.empty;\n+    }\n+\n+    @DontCompile\n+    public void test139_verifier(boolean warmup) {\n+        MyValueEmpty empty = test139();\n+        Asserts.assertEquals(empty, MyValueEmpty.default);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}