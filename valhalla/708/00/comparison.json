{"files":[{"patch":"@@ -755,1 +755,1 @@\n-            if  (st.tsym == syms.objectType.tsym || st.isInterface())\n+            if  (st.tsym == syms.objectType.tsym || st.tsym == syms.recordType.tsym || st.isInterface())\n@@ -788,2 +788,7 @@\n-                        } else {\n-                            if ((m.flags() & EMPTYNOARGCONSTR) == 0) {\n+                        } else if (m.getTypeParameters().size() > 0) {\n+                            log.error(pos, Errors.SuperConstructorCannotBeGeneric(m, fragment));\n+                        } else if (m.type.getThrownTypes().size() > 0) {\n+                            log.error(pos, Errors.SuperConstructorCannotThrow(m, fragment));\n+                        } else if (protection(m.flags()) > protection(m.owner.flags())) {\n+                            log.error(pos, Errors.SuperConstructorAccessRestricted(m, fragment));\n+                        } else if ((m.flags() & EMPTYNOARGCONSTR) == 0) {\n@@ -791,1 +796,0 @@\n-                            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1103,1 +1103,1 @@\n-            if (tree.sym != syms.objectType.tsym) {\n+            if (tree.sym != syms.objectType.tsym && tree.sym != syms.recordType.tsym) {\n@@ -1144,1 +1144,5 @@\n-                                if (m.getParameters().size() > 0 || (m.flags() & EMPTYNOARGCONSTR) == 0) {\n+                                if (m.getParameters().size() > 0\n+                                        || m.getTypeParameters().size() > 0\n+                                        || m.type.getThrownTypes().nonEmpty()\n+                                        || (m.flags() & EMPTYNOARGCONSTR) == 0\n+                                        || (Check.protection(m.flags()) > Check.protection(m.owner.flags()))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3976,0 +3976,12 @@\n+# 0: symbol, 1: message segment\n+compiler.err.super.constructor.cannot.be.generic=\\\n+    {1} defines a generic constructor {0}. This is disallowed\n+\n+# 0: symbol, 1: message segment\n+compiler.err.super.constructor.cannot.throw=\\\n+    {1} defines a constructor {0} that throws an exception. This is disallowed\n+\n+# 0: symbol, 1: message segment\n+compiler.err.super.constructor.access.restricted=\\\n+    {1} defines a constructor {0} with a weaker access privilege than the declaring class. This is disallowed\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -221,0 +221,3 @@\n+compiler.err.super.constructor.access.restricted\n+compiler.err.super.constructor.cannot.be.generic\n+compiler.err.super.constructor.cannot.throw\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        SuperWithEmptyNoArgCtor() {\n+        public SuperWithEmptyNoArgCtor() {\n@@ -52,1 +52,1 @@\n-        SuperWithEmptyNoArgCtor_01() {\n+        public SuperWithEmptyNoArgCtor_01() {\n@@ -61,1 +61,1 @@\n-        SuperWithNonEmptyNoArgCtor() {\n+        public SuperWithNonEmptyNoArgCtor() {\n@@ -68,2 +68,2 @@\n-        SuperWithArgedCtor() {}\n-        SuperWithArgedCtor(String s) {\n+        public SuperWithArgedCtor() {}\n+        public SuperWithArgedCtor(String s) {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/SuperclassCollections.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8287763\n+ * @summary [lw4] Javac does not implement the spec for non-trivial constructors in toto\n+ * @compile\/fail\/ref=NontrivialConstructor.out -XDrawDiagnostics -XDdev NontrivialConstructor.java\n+ *\/\n+\n+public class NontrivialConstructor {\n+\n+    abstract static value class I0 {\n+        public I0() { \/\/ trivial ctor.\n+        }\n+    }\n+\n+    abstract static value class I1 {\n+        private I1() {} \/\/ non-trivial, more restrictive access than the class.\n+    }\n+\n+    abstract static value class I2 {\n+        public I2(int x) {} \/\/ non-trivial ctor as it declares formal parameters.\n+    }\n+\n+    abstract static value class I3 {\n+        <T> I3() {} \/\/ non trivial as it declares type parameters.\n+    }\n+\n+\n+    abstract static value class I4 {\n+        I4() throws Exception {} \/\/ non-trivial as it throws\n+    }\n+\n+    abstract static value class I5 {\n+        I5() {\n+            System.out.println(\"\");\n+        } \/\/ non-trivial as it has a body.\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NontrivialConstructor.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+NontrivialConstructor.java:15:27: compiler.err.super.constructor.access.restricted: NontrivialConstructor.I1(), (compiler.misc.abstract.value.class: NontrivialConstructor.I1)\n+NontrivialConstructor.java:19:27: compiler.err.super.constructor.cannot.take.arguments: NontrivialConstructor.I2(int), (compiler.misc.abstract.value.class: NontrivialConstructor.I2)\n+NontrivialConstructor.java:23:27: compiler.err.super.constructor.cannot.be.generic: <T>NontrivialConstructor.I3(), (compiler.misc.abstract.value.class: NontrivialConstructor.I3)\n+NontrivialConstructor.java:28:27: compiler.err.super.constructor.cannot.throw: NontrivialConstructor.I4(), (compiler.misc.abstract.value.class: NontrivialConstructor.I4)\n+NontrivialConstructor.java:32:27: compiler.err.super.no.arg.constructor.must.be.empty: NontrivialConstructor.I5(), (compiler.misc.abstract.value.class: NontrivialConstructor.I5)\n+5 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NontrivialConstructor.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8287763\n+ * @summary [lw4] Javac does not implement the spec for non-trivial constructors in toto\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @run main NontrivialCtorInducedIdentity\n+ *\/\n+\n+import com.sun.tools.classfile.*;\n+\n+public class NontrivialCtorInducedIdentity {\n+\n+    public static abstract class A0 { \/\/ Trivial constructor - no induced identity.\n+        public A0() {\n+            super();\n+        }\n+    }\n+\n+    public static abstract class A1 {\n+        private A1() {} \/\/ restricted constructor\n+    }\n+\n+    public static abstract class A2 {\n+        public <T> A2() {} \/\/ generic constructor\n+    }\n+\n+    public static abstract class A3 {\n+        public A3() throws RuntimeException {} \/\/ throws\n+    }\n+\n+    public static abstract class A4 {\n+        public A4(int x) {} \/\/ not no-arg\n+    }\n+\n+    public static abstract class A5 {\n+        public A5() {\n+            System.out.println(\"Bodied constructor\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ClassFile cls = ClassFile.read(NontrivialCtorInducedIdentity.class.getResourceAsStream(\"NontrivialCtorInducedIdentity$A0.class\"));\n+        if (cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should NOT be set!\");\n+\n+        cls = ClassFile.read(NontrivialCtorInducedIdentity.class.getResourceAsStream(\"NontrivialCtorInducedIdentity$A1.class\"));\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n+\n+        cls = ClassFile.read(NontrivialCtorInducedIdentity.class.getResourceAsStream(\"NontrivialCtorInducedIdentity$A2.class\"));\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n+\n+        cls = ClassFile.read(NontrivialCtorInducedIdentity.class.getResourceAsStream(\"NontrivialCtorInducedIdentity$A3.class\"));\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n+\n+        cls = ClassFile.read(NontrivialCtorInducedIdentity.class.getResourceAsStream(\"NontrivialCtorInducedIdentity$A4.class\"));\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n+\n+        cls = ClassFile.read(NontrivialCtorInducedIdentity.class.getResourceAsStream(\"NontrivialCtorInducedIdentity$A5.class\"));\n+        if (!cls.access_flags.is(AccessFlags.ACC_IDENTITY))\n+            throw new Exception(\"ACC_IDENTITY flag should be set!\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/NontrivialCtorInducedIdentity.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}