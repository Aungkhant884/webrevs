{"files":[{"patch":"@@ -1358,1 +1358,1 @@\n-  andr(temp_reg, temp_reg, JVM_ACC_INLINE);\n+  andr(temp_reg, temp_reg, JVM_ACC_VALUE);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3811,1 +3811,1 @@\n-void TemplateTable::defaultvalue() {\n+void TemplateTable::aconst_init() {\n@@ -3815,1 +3815,1 @@\n-  call_VM(r0, CAST_FROM_FN_PTR(address, InterpreterRuntime::defaultvalue),\n+  call_VM(r0, CAST_FROM_FN_PTR(address, InterpreterRuntime::aconst_init),\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2747,1 +2747,1 @@\n-  testl(temp_reg, JVM_ACC_INLINE);\n+  testl(temp_reg, JVM_ACC_VALUE);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4329,1 +4329,1 @@\n-void TemplateTable::defaultvalue() {\n+void TemplateTable::aconst_init() {\n@@ -4352,1 +4352,1 @@\n-  \/\/ in the future, defaultvalue will just return null instead of throwing an exception\n+  \/\/ in the future, aconst_init will just return null instead of throwing an exception\n@@ -4373,1 +4373,1 @@\n-  call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::defaultvalue),\n+  call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::aconst_init),\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3270,1 +3270,1 @@\n-      case Bytecodes::_defaultvalue   : default_value(s.get_index_u2()); break;\n+      case Bytecodes::_aconst_init   : default_value(s.get_index_u2()); break;\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-      case Bytecodes::_defaultvalue:\n+      case Bytecodes::_aconst_init:\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2374,1 +2374,1 @@\n-  \/\/ This happens only when a class X uses the withfield\/defaultvalue bytecode\n+  \/\/ This happens only when a class X uses the withfield\/aconst_init bytecode\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1122,3 +1122,3 @@\n-      case Bytecodes::_defaultvalue:\n-        { Bytecode_defaultvalue bdefaultvalue(caller_method(), caller_method->bcp_from(bci));\n-          k = caller_method->constants()->klass_at(bdefaultvalue.index(), CHECK);\n+      case Bytecodes::_aconst_init:\n+        { Bytecode_aconst_init baconst_init(caller_method(), caller_method->bcp_from(bci));\n+          k = caller_method->constants()->klass_at(baconst_init.index(), CHECK);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -945,1 +945,1 @@\n-      case Bytecodes::_defaultvalue:\n+      case Bytecodes::_aconst_init:\n","filename":"src\/hotspot\/share\/ci\/bcEscapeAnalyzer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  case Bytecodes::_defaultvalue:\n+  case Bytecodes::_aconst_init:\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -849,2 +849,2 @@\n-\/\/ ciTypeFlow::StateVector::do_defaultvalue\n-void ciTypeFlow::StateVector::do_defaultvalue(ciBytecodeStream* str) {\n+\/\/ ciTypeFlow::StateVector::do_aconst_init\n+void ciTypeFlow::StateVector::do_aconst_init(ciBytecodeStream* str) {\n@@ -1547,1 +1547,1 @@\n-  case Bytecodes::_defaultvalue: do_defaultvalue(str);              break;\n+  case Bytecodes::_aconst_init: do_aconst_init(str);              break;\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-    void do_defaultvalue(ciBytecodeStream* str);\n+    void do_aconst_init(ciBytecodeStream* str);\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3322,1 +3322,1 @@\n-    \/\/ JVM_ACC_INLINE is defined for class file version 55 and later\n+    \/\/ JVM_ACC_VALUE and JVM_ACC_PRIMITIVE are defined for class file version 55 and later\n@@ -3324,1 +3324,1 @@\n-      recognized_modifiers |= JVM_ACC_INLINE | JVM_ACC_VALUE;\n+      recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE;\n@@ -4706,1 +4706,2 @@\n-  const bool is_inline_type = (flags & JVM_ACC_INLINE) != 0;\n+  const bool is_value_class = (flags & JVM_ACC_VALUE) != 0;\n+  const bool is_primitive_class = (flags & JVM_ACC_PRIMITIVE) != 0;\n@@ -4708,1 +4709,2 @@\n-  assert(supports_inline_types() || !is_inline_type, \"JVM_ACC_INLINE should not be set\");\n+  assert(supports_inline_types() || !is_value_class, \"JVM_ACC_VALUE should not be set\");\n+  assert(supports_inline_types() || !is_primitive_class, \"JVM_ACC_PRIMITIVE should not be set\");\n@@ -4719,8 +4721,11 @@\n-  if (is_inline_type && !EnableValhalla) {\n-    ResourceMark rm(THREAD);\n-    Exceptions::fthrow(\n-      THREAD_AND_LOCATION,\n-      vmSymbols::java_lang_ClassFormatError(),\n-      \"Class modifier ACC_INLINE in class %s requires option -XX:+EnableValhalla\",\n-      _class_name->as_C_string()\n-    );\n+  if (!EnableValhalla) {\n+    if (is_value_class || is_primitive_class) {\n+      const char* bad_flag = is_primitive_class ? \"ACC_PRIMITIVE\" : \"ACC_VALUE\";\n+      ResourceMark rm(THREAD);\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_ClassFormatError(),\n+        \"Class modifier %s in class %s requires option -XX:+EnableValhalla\",\n+        bad_flag, _class_name->as_C_string()\n+      );\n+    }\n@@ -4745,1 +4750,2 @@\n-      (is_inline_type && (is_interface || is_abstract || is_enum || !is_final))) {\n+      (is_value_class && (is_interface || is_abstract || is_enum || !is_final)) ||\n+      (is_primitive_class && !is_value_class)) {\n@@ -4748,1 +4754,2 @@\n-    if (is_inline_type)  class_note = \" (an inline class)\";\n+    if (is_value_class)  class_note = \" (a value class)\";\n+    if (is_primitive_class)  class_note = \" (a primitive class)\";\n@@ -6114,1 +6121,1 @@\n-  \/\/ JVM_ACC_INLINE is defined for class file version 55 and later\n+  \/\/ JVM_ACC_VALUE and JVM_ACC_PRIMITIVE are defined for class file version 55 and later\n@@ -6116,1 +6123,1 @@\n-    recognized_modifiers |= JVM_ACC_INLINE | JVM_ACC_VALUE;\n+    recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE;\n@@ -6479,1 +6486,1 @@\n-        if (!klass->access_flags().is_inline_type()) {\n+        if (!klass->access_flags().is_value_class()) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -595,1 +595,1 @@\n-  bool is_inline_type() const { return _access_flags.is_inline_type(); }\n+  bool is_inline_type() const { return _access_flags.is_value_class(); }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  if (this_class->access_flags().is_inline_type()) return false;\n+  if (this_class->access_flags().is_value_class()) return false;\n","filename":"src\/hotspot\/share\/classfile\/verificationType.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1755,1 +1755,1 @@\n-        case Bytecodes::_defaultvalue :\n+        case Bytecodes::_aconst_init :\n@@ -1759,1 +1759,1 @@\n-              \"defaultvalue not supported by this class file version (%d.%d), class %s\",\n+              \"aconst_init not supported by this class file version (%d.%d), class %s\",\n@@ -1769,1 +1769,1 @@\n-                \"Illegal defaultvalue instruction\");\n+                \"Illegal aconst_init instruction\");\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-    case Bytecodes::_defaultvalue:\n+    case Bytecodes::_aconst_init:\n","filename":"src\/hotspot\/share\/compiler\/methodLiveness.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -297,1 +297,1 @@\n-class Bytecode_defaultvalue: public Bytecode {\n+class Bytecode_aconst_init: public Bytecode {\n@@ -299,2 +299,2 @@\n-  Bytecode_defaultvalue(Method* method, address bcp): Bytecode(method, bcp) { verify(); }\n-  void verify() const { assert(java_code() == Bytecodes::_defaultvalue, \"check defaultvalue\"); }\n+  Bytecode_aconst_init(Method* method, address bcp): Bytecode(method, bcp) { verify(); }\n+  void verify() const { assert(java_code() == Bytecodes::_aconst_init, \"check aconst_init\"); }\n@@ -303,1 +303,1 @@\n-  long index() const   { return get_index_u2(Bytecodes::_defaultvalue); };\n+  long index() const   { return get_index_u2(Bytecodes::_aconst_init); };\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -573,1 +573,1 @@\n-    case Bytecodes::_defaultvalue:\n+    case Bytecodes::_aconst_init:\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-  def(_defaultvalue        , \"defaultvalue\"        , \"bkk\"  , NULL    , T_OBJECT ,  1, true);\n+  def(_aconst_init        , \"aconst_init\"        , \"bkk\"  , NULL    , T_OBJECT ,  1, true);\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-    _defaultvalue         = 203, \/\/ 0xcb\n+    _aconst_init          = 203, \/\/ 0xcb\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -256,1 +256,1 @@\n-JRT_ENTRY(void, InterpreterRuntime::defaultvalue(JavaThread* current, ConstantPool* pool, int index))\n+JRT_ENTRY(void, InterpreterRuntime::aconst_init(JavaThread* current, ConstantPool* pool, int index))\n@@ -261,1 +261,1 @@\n-    \/\/ in the future, defaultvalue will just return null instead of throwing an exception\n+    \/\/ in the future, aconst_init will just return null instead of throwing an exception\n@@ -264,1 +264,1 @@\n-  assert(k->is_inline_klass(), \"defaultvalue argument must be the inline type class\");\n+  assert(k->is_inline_klass(), \"aconst_init argument must be the inline type class\");\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  static void    defaultvalue  (JavaThread* current, ConstantPool* pool, int index);\n+  static void    aconst_init  (JavaThread* current, ConstantPool* pool, int index);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -440,1 +440,1 @@\n-  def(Bytecodes::_defaultvalue        , ubcp|____|clvm|____, vtos, atos, defaultvalue        , _            );\n+  def(Bytecodes::_aconst_init         , ubcp|____|clvm|____, vtos, atos, aconst_init        , _            );\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-  static void defaultvalue();\n+  static void aconst_init();\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1382,1 +1382,1 @@\n-    case Bytecodes::_defaultvalue:      ppush1(CellTypeState::make_line_ref(itr->bci())); break;\n+    case Bytecodes::_aconst_init:      ppush1(CellTypeState::make_line_ref(itr->bci())); break;\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+  bool is_null_free() const { return access_flags().is_primitive_class(); }\n","filename":"src\/hotspot\/share\/oops\/inlineKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -522,1 +522,1 @@\n-  void do_defaultvalue();\n+  void do_aconst_init();\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3469,2 +3469,2 @@\n-  case Bytecodes::_defaultvalue:\n-    do_defaultvalue();\n+  case Bytecodes::_aconst_init:\n+    do_aconst_init();\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -324,2 +324,2 @@\n-\/\/------------------------------do_defaultvalue---------------------------------\n-void Parse::do_defaultvalue() {\n+\/\/------------------------------do_aconst_init---------------------------------\n+void Parse::do_aconst_init() {\n@@ -328,1 +328,1 @@\n-  assert(will_link && !iter().is_unresolved_klass(), \"defaultvalue: typeflow responsibility\");\n+  assert(will_link && !iter().is_unresolved_klass(), \"aconst_init: typeflow responsibility\");\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -886,1 +886,1 @@\n-  write_u2(ik()->access_flags().get_flags() & (JVM_RECOGNIZED_CLASS_MODIFIERS | JVM_ACC_INLINE | JVM_ACC_VALUE));\n+  write_u2(ik()->access_flags().get_flags() & (JVM_RECOGNIZED_CLASS_MODIFIERS | JVM_ACC_PRIMITIVE | JVM_ACC_VALUE));\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2244,1 +2244,1 @@\n-      case Bytecodes::_defaultvalue   : \/\/ fall through\n+      case Bytecodes::_aconst_init   : \/\/ fall through\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,2 @@\n-  bool is_inline_type () const         { return (_flags & JVM_ACC_INLINE      ) != 0; }\n+  bool is_value_class () const         { return (_flags & JVM_ACC_VALUE       ) != 0; }\n+  bool is_primitive_class () const     { return (_flags & JVM_ACC_PRIMITIVE   ) != 0; }\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    JVM_ACC_INLINE        = 0x0800,\n+    JVM_ACC_PRIMITIVE     = 0x0800,\n","filename":"src\/java.base\/share\/native\/include\/classfile_constants.h.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -414,1 +414,1 @@\n-  0x0831; \/\/ access\n+  0x0931; \/\/ access\n@@ -618,1 +618,1 @@\n-  0x0831; \/\/ access\n+  0x0931; \/\/ access\n@@ -822,1 +822,1 @@\n-  0x0831; \/\/ access\n+  0x0931; \/\/ access\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/GetfieldChains.jcod","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_SUPER ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/HiddenPoint.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldNoAccessTest.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                \"Class modifier ACC_INLINE in class ValueFieldNotFinal requires option -XX:+EnableValhalla\");\n+                \"Class modifier ACC_PRIMITIVE in class ValueFieldNotFinal requires option -XX:+EnableValhalla\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/BadACCValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-  0x04830; \/\/ access [  ACC_PRIMITIVE ACC_ENUM(bad) ACC_SUPER ACC_FINAL ]\n+  0x04930; \/\/ access [  ACC_VALUE ACC_PRIMITIVE ACC_ENUM(bad) ACC_SUPER ACC_FINAL ]\n@@ -395,1 +395,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -676,1 +676,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -946,1 +946,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -1224,1 +1224,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -1539,1 +1539,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -1817,1 +1817,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -2089,1 +2089,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/cfpTests.jcod","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -357,1 +357,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -617,1 +617,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -876,1 +876,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -1137,1 +1137,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -1399,1 +1399,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -1661,1 +1661,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -1921,1 +1921,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testSupers\/InlineClassWithBadSupers.jcod","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        runTestFormatError(\"defValBadMajorVersion\", \"defaultvalue not supported by this class file version\");\n+        runTestFormatError(\"defValBadMajorVersion\", \"aconst_init not supported by this class file version\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VerifierInlineTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -195,1 +195,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -258,1 +258,1 @@\n-\/\/ The constant pool index of a defaultvalue opcode (0xCB) in the Code\n+\/\/ The constant pool index of a aconst_init opcode (0xCB) in the Code\n@@ -296,1 +296,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -390,1 +390,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -481,1 +481,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -571,1 +571,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -669,1 +669,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -763,1 +763,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -880,1 +880,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -1086,1 +1086,1 @@\n-  0x0830; \/\/ access [ ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0930; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n@@ -1303,1 +1303,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_VALUE ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/verifierTests.jcod","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}