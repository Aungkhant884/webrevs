{"files":[{"patch":"@@ -948,3 +948,0 @@\n-static nmethod* _nmethod_to_print = NULL;\n-static const CompiledEntrySignature* _nmethod_to_print_ces = NULL;\n-\n@@ -954,6 +951,0 @@\n-  ResourceMark rm;\n-  CompiledEntrySignature ces(method());\n-  ces.compute_calling_conventions();\n-  \/\/ ces.compute_calling_conventions() needs to grab the ProtectionDomainSet_lock, so we\n-  \/\/ can't do that (inside nmethod::print_entry_parameters) while holding the ttyLocker.\n-  \/\/ Hence we have do compute it here and pass via a global. Yuck.\n@@ -961,3 +952,0 @@\n-  assert(_nmethod_to_print == NULL && _nmethod_to_print_ces == NULL, \"no nesting\");\n-  _nmethod_to_print = this;\n-  _nmethod_to_print_ces = &ces;\n@@ -1043,3 +1031,0 @@\n-\n-  _nmethod_to_print = NULL;\n-  _nmethod_to_print_ces = NULL;\n@@ -3211,3 +3196,0 @@\n-  if (_nmethod_to_print != this) {\n-    return;\n-  }\n@@ -3230,1 +3212,2 @@\n-  const CompiledEntrySignature* ces = _nmethod_to_print_ces;\n+  CompiledEntrySignature ces(m);\n+  ces.compute_calling_conventions();\n@@ -3234,2 +3217,2 @@\n-    sig_cc = &ces->sig_cc();\n-    regs = ces->regs_cc();\n+    sig_cc = &ces.sig_cc();\n+    regs = ces.regs_cc();\n@@ -3237,2 +3220,2 @@\n-    sig_cc = &ces->sig();\n-    regs = ces->regs();\n+    sig_cc = &ces.sig();\n+    regs = ces.regs();\n@@ -3240,2 +3223,2 @@\n-    sig_cc = &ces->sig_cc_ro();\n-    regs = ces->regs_cc_ro();\n+    sig_cc = &ces.sig_cc_ro();\n+    regs = ces.regs_cc_ro();\n@@ -3247,1 +3230,1 @@\n-  if (ces->has_inline_recv() && block_begin == verified_entry_point()) {\n+  if (ces.has_inline_recv() && block_begin == verified_entry_point()) {\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":9,"deletions":26,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-        Matcher matcher = Pattern.compile(\"\\\\[MachCode\\\\]\\\\s*\\\\[Verified Entry Point\\\\]\\\\s*  # \\\\{method\\\\} \\\\{[^}]*\\\\} '([^']+)' '([^']+)' in '([^']+)'\", Pattern.DOTALL).matcher(hsErr);\n+        Matcher matcher = Pattern.compile(\"\\\\[MachCode\\\\]\\\\s[^{]+\\\\{method\\\\} \\\\{[^}]*\\\\} '([^']+)' '([^']+)' in '([^']+)'\", Pattern.DOTALL).matcher(hsErr);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/MachCodeFramesInErrorFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}