{"files":[{"patch":"@@ -614,1 +614,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -616,1 +616,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n@@ -624,1 +624,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -626,1 +626,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -634,1 +634,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -636,1 +636,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n@@ -644,1 +644,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -646,1 +646,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point value\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point value\");\n@@ -826,1 +826,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -828,1 +828,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n@@ -836,1 +836,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -838,1 +838,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -846,1 +846,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -848,1 +848,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n@@ -856,1 +856,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -858,1 +858,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n@@ -1041,1 +1041,1 @@\n-                assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -1043,1 +1043,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n@@ -1051,1 +1051,1 @@\n-                assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -1053,1 +1053,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -1061,1 +1061,1 @@\n-                assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -1063,1 +1063,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n@@ -1071,1 +1071,1 @@\n-                assertEquals(success, true, \"weakCompareAndSet Point\");\n+                assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -1073,1 +1073,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n@@ -1329,0 +1329,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessPoint.java","additions":25,"deletions":24,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -227,0 +228,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -229,1 +231,1 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n@@ -231,1 +233,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -233,1 +235,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n@@ -237,0 +239,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -239,1 +242,1 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n@@ -241,1 +244,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -243,1 +246,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -247,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -249,1 +253,1 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(1,1), Point.getInstance(2,2));\n@@ -251,1 +255,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -253,1 +257,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n@@ -258,0 +262,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -259,1 +264,1 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(recv, Point.getInstance(2,2), Point.getInstance(1,1));\n@@ -261,1 +266,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -263,1 +268,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n@@ -411,0 +416,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -413,1 +419,1 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n@@ -415,1 +421,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -417,1 +423,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n@@ -421,0 +427,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -423,1 +430,1 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n@@ -425,1 +432,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -427,1 +434,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -431,0 +438,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -433,1 +441,1 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n+                success = (boolean) mh.invokeExact(Point.getInstance(1,1), Point.getInstance(2,2));\n@@ -435,1 +443,1 @@\n-            assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -437,1 +445,1 @@\n-            assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+            assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n@@ -441,0 +449,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -443,1 +452,1 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n+                success = (boolean) mh.invokeExact(Point.getInstance(2,2), Point.getInstance(1,1));\n@@ -445,1 +454,1 @@\n-            assertEquals(success, true, \"weakCompareAndSet Point\");\n+            assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -447,1 +456,1 @@\n-            assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+            assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n@@ -592,0 +601,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -594,1 +604,1 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n@@ -596,1 +606,1 @@\n-                assertEquals(success, true, \"weakCompareAndSetPlain Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetPlain Point\");\n@@ -598,1 +608,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetPlain Point value\");\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetPlain Point value\");\n@@ -602,0 +612,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -604,1 +615,1 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n@@ -606,1 +617,1 @@\n-                assertEquals(success, true, \"weakCompareAndSetAcquire Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetAcquire Point\");\n@@ -608,1 +619,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSetAcquire Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSetAcquire Point\");\n@@ -612,0 +623,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -614,1 +626,1 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(1,1), Point.getInstance(2,2));\n@@ -616,1 +628,1 @@\n-                assertEquals(success, true, \"weakCompareAndSetRelease Point\");\n+                assertEquals(success, true, \"success weakCompareAndSetRelease Point\");\n@@ -618,1 +630,1 @@\n-                assertEquals(x, Point.getInstance(2,2), \"weakCompareAndSetRelease Point\");\n+                assertEquals(x, Point.getInstance(2,2), \"success weakCompareAndSetRelease Point\");\n@@ -622,0 +634,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -624,1 +637,1 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n+                    success = (boolean) mh.invokeExact(array, i, Point.getInstance(2,2), Point.getInstance(1,1));\n@@ -626,1 +639,1 @@\n-                assertEquals(success, true, \"weakCompareAndSet Point\");\n+                assertEquals(success, true, \"success weakCompareAndSet Point\");\n@@ -628,1 +641,1 @@\n-                assertEquals(x, Point.getInstance(1,1), \"weakCompareAndSet Point\");\n+                assertEquals(x, Point.getInstance(1,1), \"success weakCompareAndSet Point\");\n@@ -721,0 +734,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessPoint.java","additions":50,"deletions":36,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypePoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+#if[Point]\n+import jdk.internal.value.PrimitiveClass;\n+\n+#end[Point]\n@@ -48,1 +52,1 @@\n-    static final Class<?> type = $type$.class.asValueType();\n+    static final Class<?> type = PrimitiveClass.asValueType($type$.class);\n@@ -766,0 +770,1 @@\n+#if[!PrimitiveClass]\n@@ -767,0 +772,1 @@\n+#end[PrimitiveClass]\n@@ -773,0 +779,1 @@\n+#if[!PrimitiveClass]\n@@ -780,0 +787,1 @@\n+#end[PrimitiveClass]\n@@ -784,0 +792,1 @@\n+#if[!PrimitiveClass]\n@@ -785,0 +794,1 @@\n+#end[PrimitiveClass]\n@@ -791,0 +801,1 @@\n+#if[!PrimitiveClass]\n@@ -798,0 +809,1 @@\n+#end[PrimitiveClass]\n@@ -802,0 +814,1 @@\n+#if[!PrimitiveClass]\n@@ -803,0 +816,1 @@\n+#end[PrimitiveClass]\n@@ -809,0 +823,1 @@\n+#if[!PrimitiveClass]\n@@ -816,0 +831,1 @@\n+#end[PrimitiveClass]\n@@ -820,0 +836,1 @@\n+#if[!PrimitiveClass]\n@@ -821,0 +838,1 @@\n+#end[PrimitiveClass]\n@@ -827,0 +845,1 @@\n+#if[!PrimitiveClass]\n@@ -834,0 +853,1 @@\n+#end[PrimitiveClass]\n@@ -1175,0 +1195,1 @@\n+#if[!PrimitiveClass]\n@@ -1176,0 +1197,1 @@\n+#end[PrimitiveClass]\n@@ -1182,0 +1204,1 @@\n+#if[!PrimitiveClass]\n@@ -1189,0 +1212,1 @@\n+#end[PrimitiveClass]\n@@ -1193,0 +1217,1 @@\n+#if[!PrimitiveClass]\n@@ -1194,0 +1219,1 @@\n+#end[PrimitiveClass]\n@@ -1200,0 +1226,1 @@\n+#if[!PrimitiveClass]\n@@ -1207,0 +1234,1 @@\n+#end[PrimitiveClass]\n@@ -1211,0 +1239,1 @@\n+#if[!PrimitiveClass]\n@@ -1212,0 +1241,1 @@\n+#end[PrimitiveClass]\n@@ -1218,0 +1248,1 @@\n+#if[!PrimitiveClass]\n@@ -1225,0 +1256,1 @@\n+#end[PrimitiveClass]\n@@ -1229,0 +1261,1 @@\n+#if[!PrimitiveClass]\n@@ -1230,0 +1263,1 @@\n+#end[PrimitiveClass]\n@@ -1236,0 +1270,1 @@\n+#if[!PrimitiveClass]\n@@ -1243,0 +1278,1 @@\n+#end[PrimitiveClass]\n@@ -1587,0 +1623,1 @@\n+#if[!PrimitiveClass]\n@@ -1588,0 +1625,1 @@\n+#end[PrimitiveClass]\n@@ -1594,0 +1632,1 @@\n+#if[!PrimitiveClass]\n@@ -1601,0 +1640,1 @@\n+#end[PrimitiveClass]\n@@ -1605,0 +1645,1 @@\n+#if[!PrimitiveClass]\n@@ -1606,0 +1647,1 @@\n+#end[PrimitiveClass]\n@@ -1612,0 +1654,1 @@\n+#if[!PrimitiveClass]\n@@ -1619,0 +1662,1 @@\n+#end[PrimitiveClass]\n@@ -1623,0 +1667,1 @@\n+#if[!PrimitiveClass]\n@@ -1624,0 +1669,1 @@\n+#end[PrimitiveClass]\n@@ -1630,0 +1676,1 @@\n+#if[!PrimitiveClass]\n@@ -1637,0 +1684,1 @@\n+#end[PrimitiveClass]\n@@ -1641,0 +1689,1 @@\n+#if[!PrimitiveClass]\n@@ -1642,0 +1691,1 @@\n+#end[PrimitiveClass]\n@@ -1648,0 +1698,1 @@\n+#if[!PrimitiveClass]\n@@ -1655,0 +1706,1 @@\n+#end[PrimitiveClass]\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestAccess.java.template","additions":53,"deletions":1,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+#if[Point]\n+ * @run testng\/othervm -Diters=2000 VarHandleTestMethodHandleAccess$Type$\n+#else[Point]\n@@ -29,0 +32,1 @@\n+#end[Point]\n@@ -42,0 +46,4 @@\n+#if[Point]\n+import jdk.internal.value.PrimitiveClass;\n+\n+#end[Point]\n@@ -46,1 +54,1 @@\n-    static final Class<?> type = $type$.class.asValueType();\n+    static final Class<?> type = PrimitiveClass.asValueType($type$.class);\n@@ -241,0 +249,1 @@\n+#if[!PrimitiveClass]\n@@ -242,0 +251,1 @@\n+#end[PrimitiveClass]\n@@ -248,0 +258,1 @@\n+#if[!PrimitiveClass]\n@@ -255,0 +266,1 @@\n+#end[PrimitiveClass]\n@@ -260,0 +272,1 @@\n+#if[!PrimitiveClass]\n@@ -261,0 +274,1 @@\n+#end[PrimitiveClass]\n@@ -267,0 +281,1 @@\n+#if[!PrimitiveClass]\n@@ -274,0 +289,1 @@\n+#end[PrimitiveClass]\n@@ -279,0 +295,1 @@\n+#if[!PrimitiveClass]\n@@ -280,0 +297,1 @@\n+#end[PrimitiveClass]\n@@ -286,0 +304,1 @@\n+#if[!PrimitiveClass]\n@@ -293,0 +312,1 @@\n+#end[PrimitiveClass]\n@@ -298,0 +318,1 @@\n+#if[!PrimitiveClass]\n@@ -299,0 +320,1 @@\n+#end[PrimitiveClass]\n@@ -305,0 +327,1 @@\n+#if[!PrimitiveClass]\n@@ -312,0 +335,1 @@\n+#end[PrimitiveClass]\n@@ -625,0 +649,1 @@\n+#if[!PrimitiveClass]\n@@ -626,0 +651,1 @@\n+#end[PrimitiveClass]\n@@ -632,0 +658,1 @@\n+#if[!PrimitiveClass]\n@@ -639,0 +666,1 @@\n+#end[PrimitiveClass]\n@@ -644,0 +672,1 @@\n+#if[!PrimitiveClass]\n@@ -645,0 +674,1 @@\n+#end[PrimitiveClass]\n@@ -651,0 +681,1 @@\n+#if[!PrimitiveClass]\n@@ -659,0 +690,1 @@\n+#end[PrimitiveClass]\n@@ -664,0 +696,1 @@\n+#if[!PrimitiveClass]\n@@ -665,0 +698,1 @@\n+#end[PrimitiveClass]\n@@ -671,0 +705,1 @@\n+#if[!PrimitiveClass]\n@@ -678,0 +713,1 @@\n+#end[PrimitiveClass]\n@@ -683,0 +719,1 @@\n+#if[!PrimitiveClass]\n@@ -684,0 +721,1 @@\n+#end[PrimitiveClass]\n@@ -690,0 +728,1 @@\n+#if[!PrimitiveClass]\n@@ -697,0 +736,1 @@\n+#end[PrimitiveClass]\n@@ -982,0 +1022,1 @@\n+#if[!PrimitiveClass]\n@@ -983,0 +1024,1 @@\n+#end[PrimitiveClass]\n@@ -989,0 +1031,1 @@\n+#if[!PrimitiveClass]\n@@ -996,0 +1039,1 @@\n+#end[PrimitiveClass]\n@@ -1001,0 +1045,1 @@\n+#if[!PrimitiveClass]\n@@ -1002,0 +1047,1 @@\n+#end[PrimitiveClass]\n@@ -1008,0 +1054,1 @@\n+#if[!PrimitiveClass]\n@@ -1015,0 +1062,1 @@\n+#end[PrimitiveClass]\n@@ -1020,0 +1068,1 @@\n+#if[!PrimitiveClass]\n@@ -1021,0 +1070,1 @@\n+#end[PrimitiveClass]\n@@ -1027,0 +1077,1 @@\n+#if[!PrimitiveClass]\n@@ -1034,0 +1085,1 @@\n+#end[PrimitiveClass]\n@@ -1039,0 +1091,1 @@\n+#if[!PrimitiveClass]\n@@ -1040,0 +1093,1 @@\n+#end[PrimitiveClass]\n@@ -1046,0 +1100,1 @@\n+#if[!PrimitiveClass]\n@@ -1053,0 +1108,1 @@\n+#end[PrimitiveClass]\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodHandleAccess.java.template","additions":57,"deletions":1,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+#if[Point]\n+import jdk.internal.value.PrimitiveClass;\n+\n+#end[Point]\n@@ -51,1 +55,1 @@\n-    static final Class<?> type = $type$.class.asValueType();\n+    static final Class<?> type = PrimitiveClass.asValueType($type$.class);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodType.java.template","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,6 @@\n+  case $type in\n+    Point)\n+      args=\"$args -KPrimitiveClass\"\n+      ;;\n+  esac\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/generate-vh-tests.sh","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}