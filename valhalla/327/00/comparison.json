{"files":[{"patch":"@@ -1817,1 +1817,1 @@\n-  InstanceKlass* klass = InstanceKlass::cast(aoop->klass());\n+  InstanceKlass* klass = InstanceKlass::cast(ih->klass());\n@@ -1829,2 +1829,2 @@\n-  objArrayOop result_array =\n-      oopFactory::new_objArray(vmClasses::Object_klass(), oop_count, CHECK_NULL);\n+  objArrayHandle result_array =\n+      oopFactory::new_objArray_handle(vmClasses::Object_klass(), oop_count, CHECK_NULL);\n@@ -1832,1 +1832,0 @@\n-  instanceOop ioop = ih();\n@@ -1837,1 +1836,1 @@\n-      result_array->obj_at_put(index++, ioop->obj_field(offset));\n+      result_array->obj_at_put(index++, ih->obj_field(offset));\n@@ -1842,1 +1841,1 @@\n-  return (jobjectArray)JNIHandles::make_local(THREAD, result_array);\n+  return (jobjectArray)JNIHandles::make_local(THREAD, result_array());\n@@ -1849,3 +1848,3 @@\n-  objArrayOop create_results(TRAPS) {\n-    objArrayOop result_array =\n-        oopFactory::new_objArray(vmClasses::Object_klass(), array->length(), CHECK_NULL);\n+  jobjectArray create_jni_result(JNIEnv* env, TRAPS) {\n+    objArrayHandle result_array =\n+        oopFactory::new_objArray_handle(vmClasses::Object_klass(), array->length(), CHECK_NULL);\n@@ -1855,5 +1854,1 @@\n-    return result_array;\n-  }\n-\n-  jobjectArray create_jni_result(JNIEnv* env, TRAPS) {\n-    return (jobjectArray)JNIHandles::make_local(THREAD, create_results(THREAD));\n+    return (jobjectArray)JNIHandles::make_local(THREAD, result_array());\n@@ -1863,0 +1858,1 @@\n+    Handle oh = Handle(Thread::current(), o);\n@@ -1864,2 +1860,2 @@\n-    if (o != NULL && o->is_inline_type()) {\n-      o->oop_iterate(this);\n+    if (oh != NULL && oh->is_inline_type()) {\n+      oh->oop_iterate(this);\n@@ -1867,1 +1863,1 @@\n-      array->append(Handle(Thread::current(), o));\n+      array->append(oh);\n@@ -1871,2 +1867,2 @@\n-  void do_oop(oop* o) { add_oop(*o); }\n-  void do_oop(narrowOop* v) { add_oop(CompressedOops::decode(*v)); }\n+  void do_oop(oop* o) { add_oop(HeapAccess<>::oop_load(o)); }\n+  void do_oop(narrowOop* v) { add_oop(HeapAccess<>::oop_load(v)); }\n@@ -1877,1 +1873,2 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(thread);\n+  Handle objh(thread, JNIHandles::resolve(thing));\n@@ -1881,3 +1878,1 @@\n-\n-  JNIHandles::resolve(thing)->oop_iterate(&collectOops);\n-\n+  objh->oop_iterate(&collectOops);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":18,"deletions":23,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -301,8 +301,8 @@\n-        \/\/assertTrue(objects.length == 5, \"Number of frame oops incorrect = \" + objects.length);\n-        \/\/assertTrue(objects[0] == couple, \"Bad oop 0\");\n-        \/\/assertTrue(objects[1] == fn1, \"Bad oop 1\");\n-        \/\/assertTrue(objects[2] == ln1, \"Bad oop 2\");\n-        \/\/assertTrue(objects[3] == TEST_STRING1, \"Bad oop 3\");\n-        \/\/assertTrue(objects[4] == TEST_STRING2, \"Bad oop 4\");\n-\n-        \/\/testFrameOopsVBytecodes();\n+        assertTrue(objects.length == 5, \"Number of frame oops incorrect = \" + objects.length);\n+        assertTrue(objects[0] == couple, \"Bad oop 0\");\n+        assertTrue(objects[1] == fn1, \"Bad oop 1\");\n+        assertTrue(objects[2] == ln1, \"Bad oop 2\");\n+        assertTrue(objects[3] == TEST_STRING1, \"Bad oop 3\");\n+        assertTrue(objects[4] == TEST_STRING2, \"Bad oop 4\");\n+\n+        testFrameOopsVBytecodes();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}