{"files":[{"patch":"@@ -79,1 +79,2 @@\n-  _primitive_fields(NULL),\n+  _small_primitive_fields(NULL),\n+  _big_primitive_fields(NULL),\n@@ -81,1 +82,0 @@\n-  _inlined_fields(NULL),\n@@ -88,2 +88,4 @@\n-  if (_primitive_fields == NULL) {\n-    _primitive_fields = new(ResourceObj::RESOURCE_AREA, mtInternal) GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n+  if (size >= oopSize) {\n+    add_to_big_primitive_list(block);\n+  } else {\n+    add_to_small_primitive_list(block);\n@@ -91,1 +93,0 @@\n-  _primitive_fields->append(block);\n@@ -105,1 +106,0 @@\n-  \/\/ _inlined_fields list might be merged with the _primitive_fields list in the future\n@@ -108,2 +108,4 @@\n-  if (_inlined_fields == NULL) {\n-    _inlined_fields = new(ResourceObj::RESOURCE_AREA, mtInternal) GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n+  if (block->size() >= oopSize) {\n+    add_to_big_primitive_list(block);\n+  } else {\n+    add_to_small_primitive_list(block);\n@@ -111,1 +113,0 @@\n-  _inlined_fields->append(block);\n@@ -115,2 +116,11 @@\n-  if (_primitive_fields != NULL) {\n-    _primitive_fields->sort(LayoutRawBlock::compare_size_inverted);\n+  if (_small_primitive_fields != NULL) {\n+    _small_primitive_fields->sort(LayoutRawBlock::compare_size_inverted);\n+  }\n+  if (_big_primitive_fields != NULL) {\n+    _big_primitive_fields->sort(LayoutRawBlock::compare_size_inverted);\n+  }\n+}\n+\n+void FieldGroup::add_to_small_primitive_list(LayoutRawBlock* block) {\n+  if (_small_primitive_fields == NULL) {\n+    _small_primitive_fields = new(ResourceObj::RESOURCE_AREA, mtInternal) GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n@@ -118,2 +128,6 @@\n-  if (_inlined_fields != NULL) {\n-    _inlined_fields->sort(LayoutRawBlock::compare_size_inverted);\n+  _small_primitive_fields->append(block);\n+}\n+\n+void FieldGroup::add_to_big_primitive_list(LayoutRawBlock* block) {\n+  if (_big_primitive_fields == NULL) {\n+    _big_primitive_fields = new(ResourceObj::RESOURCE_AREA, mtInternal) GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n@@ -121,0 +135,1 @@\n+  _big_primitive_fields->append(block);\n@@ -786,7 +801,4 @@\n- *   - inlined fields are allocated first (because they have potentially the\n- *     least regular shapes, and are more likely to create empty slots between them,\n- *     which can then be used to allocation primitive or oop fields). Allocation is\n- *     performed from the biggest to the smallest field.\n- *   - then primitive fields (from the biggest to the smallest)\n- *   - then oop fields are allocated contiguously (to reduce the number of oopmaps\n- *     and reduce the work of the GC).\n+ *   - primitive fields (both primitive types and flattened inline types) are allocated\n+ *     first, from the biggest to the smallest\n+ *   - then oop fields are allocated (to increase chances to have contiguous oops and\n+ *     a simpler oopmap).\n@@ -805,2 +817,2 @@\n-  _layout->add(_root_group->inlined_fields());\n-  _layout->add(_root_group->primitive_fields());\n+  _layout->add(_root_group->big_primitive_fields());\n+  _layout->add(_root_group->small_primitive_fields());\n@@ -814,2 +826,2 @@\n-      _layout->add(_root_group->inlined_fields());\n-      _layout->add(cg->primitive_fields(), start);\n+      _layout->add(cg->big_primitive_fields());\n+      _layout->add(cg->small_primitive_fields(), start);\n@@ -824,1 +836,1 @@\n-  _static_layout->add(_static_fields->inlined_fields());\n+  \/\/ Warning: IntanceMirrorKlass expects static oops to be allocated first\n@@ -826,1 +838,2 @@\n-  _static_layout->add(_static_fields->primitive_fields());\n+  _static_layout->add(_static_fields->big_primitive_fields());\n+  _static_layout->add(_static_fields->small_primitive_fields());\n@@ -838,7 +851,4 @@\n- *   - inlined fields are allocated first (because they have potentially the\n- *     least regular shapes, and are more likely to create empty slots between them,\n- *     which can then be used to allocation primitive or oop fields). Allocation is\n- *     performed from the biggest to the smallest field.\n- *   - then oop fields are allocated contiguously (to reduce the number of oopmaps\n- *     and reduce the work of the GC)\n- *   - then primitive fields (from the biggest to the smallest)\n+ *   - big primitive fields (primitive types and flattened inline type smaller\n+ *     than an oop) are allocated first (from the biggest to the smallest)\n+ *   - then oop fields\n+ *   - then small primitive fields (from the biggest to the smallest)\n@@ -861,1 +871,1 @@\n-  _layout->add(_root_group->inlined_fields());\n+  _layout->add(_root_group->big_primitive_fields());\n@@ -863,1 +873,1 @@\n-  _layout->add(_root_group->primitive_fields());\n+  _layout->add(_root_group->small_primitive_fields());\n@@ -876,1 +886,1 @@\n-  _static_layout->add(_static_fields->inlined_fields());\n+  \/\/ Warning:: InstanceMirrorKlass expects static oops to be allocated first\n@@ -878,2 +888,2 @@\n-  _static_layout->add(_static_fields->primitive_fields());\n-\n+  _static_layout->add(_static_fields->big_primitive_fields());\n+  _static_layout->add(_static_fields->small_primitive_fields());\n@@ -895,0 +905,26 @@\n+void FieldLayoutBuilder::register_embedded_oops_from_list(OopMapBlocksBuilder* nonstatic_oop_maps, GrowableArray<LayoutRawBlock*>* list) {\n+  if (list != NULL) {\n+    for (int i = 0; i < list->length(); i++) {\n+      LayoutRawBlock* f = list->at(i);\n+      if (f->kind() == LayoutRawBlock::INLINED) {\n+        InlineKlass* vk = f->inline_klass();\n+        assert(vk != NULL, \"Should have been initialized\");\n+        if (vk->contains_oops()) {\n+          add_inlined_field_oopmap(nonstatic_oop_maps, vk, f->offset());\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+void FieldLayoutBuilder::register_embedded_oops(OopMapBlocksBuilder* nonstatic_oop_maps, FieldGroup* group) {\n+  if (group->oop_fields() != NULL) {\n+    for (int i = 0; i < group->oop_fields()->length(); i++) {\n+      LayoutRawBlock* b = group->oop_fields()->at(i);\n+      nonstatic_oop_maps->add(b->offset(), 1);\n+    }\n+  }\n+  register_embedded_oops_from_list(nonstatic_oop_maps, group->big_primitive_fields());\n+  register_embedded_oops_from_list(nonstatic_oop_maps, group->small_primitive_fields());\n+}\n+\n@@ -899,1 +935,0 @@\n-\n@@ -906,20 +941,1 @@\n-\n-  if (_root_group->oop_fields() != NULL) {\n-    for (int i = 0; i < _root_group->oop_fields()->length(); i++) {\n-      LayoutRawBlock* b = _root_group->oop_fields()->at(i);\n-      nonstatic_oop_maps->add(b->offset(), 1);\n-    }\n-  }\n-\n-  GrowableArray<LayoutRawBlock*>* ff = _root_group->inlined_fields();\n-  if (ff != NULL) {\n-    for (int i = 0; i < ff->length(); i++) {\n-      LayoutRawBlock* f = ff->at(i);\n-      InlineKlass* vk = f->inline_klass();\n-      assert(vk != NULL, \"Should have been initialized\");\n-      if (vk->contains_oops()) {\n-        add_inlined_field_oopmap(nonstatic_oop_maps, vk, f->offset());\n-      }\n-    }\n-  }\n-\n+  register_embedded_oops(nonstatic_oop_maps, _root_group);\n@@ -931,1 +947,1 @@\n-        nonstatic_oop_maps->add(cg->oop_fields()->at(0)->offset(), cg->oop_count());\n+        register_embedded_oops(nonstatic_oop_maps, cg);\n@@ -935,1 +951,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":76,"deletions":61,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -133,1 +133,2 @@\n-  GrowableArray<LayoutRawBlock*>* _primitive_fields;\n+  GrowableArray<LayoutRawBlock*>* _small_primitive_fields;\n+  GrowableArray<LayoutRawBlock*>* _big_primitive_fields;\n@@ -135,1 +136,0 @@\n-  GrowableArray<LayoutRawBlock*>* _inlined_fields;\n@@ -145,1 +145,2 @@\n-  GrowableArray<LayoutRawBlock*>* primitive_fields() const { return _primitive_fields; }\n+  GrowableArray<LayoutRawBlock*>* small_primitive_fields() const { return _small_primitive_fields; }\n+  GrowableArray<LayoutRawBlock*>* big_primitive_fields() const { return _big_primitive_fields; }\n@@ -147,1 +148,0 @@\n-  GrowableArray<LayoutRawBlock*>* inlined_fields() const { return _inlined_fields; }\n@@ -156,0 +156,3 @@\n+ private:\n+  void add_to_small_primitive_list(LayoutRawBlock* block);\n+  void add_to_big_primitive_list(LayoutRawBlock* block);\n@@ -296,0 +299,2 @@\n+  void register_embedded_oops_from_list(OopMapBlocksBuilder* nonstatic_oop_maps, GrowableArray<LayoutRawBlock*>* list);\n+  void register_embedded_oops(OopMapBlocksBuilder* nonstatic_oop_maps, FieldGroup* group);\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}