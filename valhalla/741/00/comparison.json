{"files":[{"patch":"@@ -35,0 +35,2 @@\n+ *     jdk.compiler\/com.sun.tools.javac.code\n+ *     jdk.jdeps\/com.sun.tools.classfile\n@@ -39,2 +41,0 @@\n-import java.lang.constant.ClassDesc;\n-\n@@ -43,6 +43,0 @@\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-import java.util.ArrayList;\n@@ -50,9 +44,0 @@\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import javax.annotation.processing.AbstractProcessor;\n-import javax.annotation.processing.RoundEnvironment;\n-import javax.annotation.processing.SupportedAnnotationTypes;\n-\n-import javax.lang.model.element.TypeElement;\n-import javax.lang.model.SourceVersion;\n@@ -60,1 +45,2 @@\n-import com.sun.tools.javac.util.Assert;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.javac.code.Flags;\n@@ -62,1 +48,0 @@\n-import static org.testng.Assert.assertEquals;\n@@ -64,1 +49,0 @@\n-import static org.testng.Assert.fail;\n@@ -66,0 +50,1 @@\n+\n@@ -69,3 +54,0 @@\n-import toolbox.JavacTask;\n-import toolbox.Task;\n-import toolbox.Task.OutputKind;\n@@ -506,1 +488,1 @@\n-    public void testMutuallyIncompatibleSupers() {\n+    public void testSupers() {\n@@ -535,0 +517,7 @@\n+        assertFail(\"compiler.err.identity.type.has.value.super.type\",\n+                \"\"\"\n+                value interface I {}\n+                class Test {\n+                    I i = new I() {};\n+                }\n+                \"\"\");\n@@ -578,0 +567,30 @@\n+\n+    public void testCheckThatAnonymousIsIdentity() throws Exception {\n+        for (String source : List.of(\n+                \"\"\"\n+                interface I {}\n+                class Test {\n+                    I i = new I() {};\n+                }\n+                \"\"\",\n+                \"\"\"\n+                class C {}\n+                class Test {\n+                    C c = new C() {};\n+                }\n+                \"\"\",\n+                \"\"\"\n+                class Test {\n+                    Object o = new Object() {};\n+                }\n+                \"\"\"\n+        )) {\n+            File dir = assertOK(true, source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                if (fileEntry.getName().contains(\"$\")) {\n+                    ClassFile classFile = ClassFile.read(fileEntry);\n+                    assertTrue(classFile.access_flags.flags == Flags.ACC_IDENTITY);\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":43,"deletions":24,"binary":false,"changes":67,"status":"modified"}]}