{"files":[{"patch":"@@ -109,1 +109,3 @@\n-    static boolean USE_COMPILER = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompiler\");\n+    static WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    static boolean USE_COMPILER = WB.getBooleanVMFlag(\"UseCompiler\");\n@@ -202,1 +204,1 @@\n-        Object[] objects = WhiteBox.getWhiteBox().getObjectsViaKlassOopMaps(new Couple());\n+        Object[] objects = WB.getObjectsViaKlassOopMaps(new Couple());\n@@ -215,1 +217,1 @@\n-        objects = WhiteBox.getWhiteBox().getObjectsViaKlassOopMaps(couple);\n+        objects = WB.getObjectsViaKlassOopMaps(couple);\n@@ -222,1 +224,1 @@\n-        objects = WhiteBox.getWhiteBox().getObjectsViaOopIterator(couple);\n+        objects = WB.getObjectsViaOopIterator(couple);\n@@ -230,1 +232,1 @@\n-        objects = WhiteBox.getWhiteBox().getObjectsViaOopIterator(createPeople());\n+        objects = WB.getObjectsViaOopIterator(createPeople());\n@@ -254,1 +256,1 @@\n-        Object[] oopMap = WhiteBox.getWhiteBox().getObjectsViaFrameOopIterator(2);\n+        Object[] oopMap = WB.getObjectsViaFrameOopIterator(2);\n@@ -375,5 +377,3 @@\n-    static void submitNewWork(ForkJoinPool fjPool, int size) {\n-        for (int i = 0; i < size; i++) {\n-            for (int j = 0; j < 100; j++) {\n-                fjPool.execute(InlineOops::testValues);\n-            }\n+    static void submitNewWork(ForkJoinPool fjPool) {\n+        for (int j = 0; j < 100; j++) {\n+            fjPool.execute(InlineOops::testValues);\n@@ -395,2 +395,1 @@\n-            int nofThreads = 7;\n-            int workSize = nofThreads * 10;\n+            int nofThreads = 1;\n@@ -406,0 +405,1 @@\n+            \/\/ Setup some background work, where GC roots are stack local only, short lifetimes...\n@@ -408,12 +408,6 @@\n-            \/\/ submit work until we see some GC\n-            Reference ref = createRef();\n-            submitNewWork(fjPool, workSize);\n-            while (ref.get() != null) {\n-                if (fjPool.hasQueuedSubmissions()) {\n-                    sleepNoThrow(1L);\n-                }\n-                else {\n-                    workSize *= 2; \/\/ Grow the submission size\n-                    submitNewWork(fjPool, workSize);\n-                }\n-            }\n+            \/\/ Work on this stack's long and medium lived objects\n+            for (int nofActiveGc = 0; nofActiveGc < MIN_ACTIVE_GC_COUNT; nofActiveGc++) {\n+                \/\/ Medium lifetime, check and renew\n+                if (nofActiveGc % MED_ACTIVE_GC_COUNT == 0) {\n+                    validateLongLived(medLivedObjects);\n+                    validatePeople(medLivedPeople);\n@@ -421,14 +415,2 @@\n-            \/\/ Keep working and actively GC, until MIN_ACTIVE_GC_COUNT\n-            int nofActiveGc = 1;\n-            ref = createRef();\n-            while (nofActiveGc < MIN_ACTIVE_GC_COUNT) {\n-                if (ref.get() == null) {\n-                    nofActiveGc++;\n-                    ref = createRef();\n-                    if (nofActiveGc % MED_ACTIVE_GC_COUNT == 0) {\n-                        validateLongLived(medLivedObjects);\n-                        validatePeople(medLivedPeople);\n-\n-                        medLivedObjects = createLongLived();\n-                        medLivedPeople = createPeople();\n-                    }\n+                    medLivedObjects = createLongLived();\n+                    medLivedPeople = createPeople();\n@@ -436,6 +418,3 @@\n-                else if (fjPool.hasQueuedSubmissions()) {\n-                    sleepNoThrow((long) Utils.getRandomInstance().nextInt(1000));\n-                    doGc();\n-                }\n-                else {\n-                    submitNewWork(fjPool, workSize);\n+                \/\/ More short lived background, if needed\n+                if (!fjPool.hasQueuedSubmissions()) {\n+                    submitNewWork(fjPool);\n@@ -443,0 +422,2 @@\n+                \/\/ Forced, synchronous GC\n+                doGc();\n@@ -444,0 +425,1 @@\n+\n@@ -465,9 +447,1 @@\n-        \/\/ Create Reference, wait until it clears...\n-        Reference ref = createRef();\n-        while (ref.get() != null) {\n-            System.gc();\n-        }\n-    }\n-\n-    static Reference createRef() {\n-        return new WeakReference<Object>(new Object(), REFQ);\n+        WB.fullGC();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":28,"deletions":54,"binary":false,"changes":82,"status":"modified"}]}