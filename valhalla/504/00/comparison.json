{"files":[{"patch":"@@ -158,0 +158,4 @@\n+ciInstance* ciInlineKlass::ref_mirror() {\n+  GUARDED_VM_ENTRY(return CURRENT_ENV->get_instance(to_InlineKlass()->ref_mirror());)\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+  ciInstance* ref_mirror();\n","filename":"src\/hotspot\/share\/ci\/ciInlineKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -238,0 +238,2 @@\n+  case vmIntrinsics::_asPrimaryType:\n+  case vmIntrinsics::_asValueType:\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -240,0 +240,4 @@\n+  do_intrinsic(_asPrimaryType,            java_lang_Class,        asPrimaryType_name, void_class_signature,      F_R)   \\\n+   do_name(     asPrimaryType_name,                              \"asPrimaryType\")                                       \\\n+  do_intrinsic(_asValueType,              java_lang_Class,        asValueType_name, void_class_signature,        F_R)   \\\n+   do_name(     asValueType_name,                                \"asValueType\")                                         \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -621,0 +621,2 @@\n+  case vmIntrinsics::_asPrimaryType:\n+  case vmIntrinsics::_asValueType:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -515,0 +515,3 @@\n+  case vmIntrinsics::_asPrimaryType:\n+  case vmIntrinsics::_asValueType:              return inline_primitive_Class_conversion(intrinsic_id());\n+\n@@ -3344,0 +3347,29 @@\n+\/\/-------------------------inline_primitive_Class_conversion-------------------\n+\/\/ public Class<T> java.lang.Class.asPrimaryType();\n+\/\/ public Class<T> java.lang.Class.asValueType()\n+bool LibraryCallKit::inline_primitive_Class_conversion(vmIntrinsics::ID id) {\n+  Node* mirror = argument(0); \/\/ Receiver Class\n+  const TypeInstPtr* mirror_con = _gvn.type(mirror)->isa_instptr();\n+  if (mirror_con == NULL) {\n+    return false;\n+  }\n+\n+  bool is_val_mirror = true;\n+  ciType* tm = mirror_con->java_mirror_type(&is_val_mirror);\n+  if (tm != NULL) {\n+    Node* result = mirror;\n+    if (id == vmIntrinsics::_asPrimaryType && is_val_mirror) {\n+      result = _gvn.makecon(TypeInstPtr::make(tm->as_inline_klass()->ref_mirror()));\n+    } else if (id == vmIntrinsics::_asValueType) {\n+      if (!tm->is_inlinetype()) {\n+        return false; \/\/ Throw UnsupportedOperationException\n+      } else if (!is_val_mirror) {\n+        result = _gvn.makecon(TypeInstPtr::make(tm->as_inline_klass()->val_mirror()));\n+      }\n+    }\n+    set_result(result);\n+    return true;\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -273,0 +273,1 @@\n+  bool inline_primitive_Class_conversion(vmIntrinsics::ID id);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -599,0 +599,1 @@\n+    @IntrinsicCandidate\n@@ -616,0 +617,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        Asserts.assertTrue(test1(MyValue1.ref.class, MyValue1.ref.class), \"test1_2 failed\");\n+        Asserts.assertTrue(test1(MyValue1.class.asPrimaryType(), MyValue1.class.asPrimaryType()), \"test1_2 failed\");\n@@ -79,2 +79,2 @@\n-        Asserts.assertTrue(test1(MyValue1.ref.class, MyValue1.class.asValueType()), \"test1_4 failed\");\n-        Asserts.assertFalse(test1(MyValue1.class.asValueType(), MyValue1.ref.class), \"test1_5 failed\");\n+        Asserts.assertTrue(test1(MyValue1.class.asPrimaryType(), MyValue1.class.asValueType()), \"test1_4 failed\");\n+        Asserts.assertFalse(test1(MyValue1.class.asValueType(), MyValue1.class.asPrimaryType()), \"test1_5 failed\");\n@@ -82,1 +82,1 @@\n-        Asserts.assertTrue(test1(Object.class, MyValue1.ref.class), \"test1_7 failed\");\n+        Asserts.assertTrue(test1(Object.class, MyValue1.class.asPrimaryType()), \"test1_7 failed\");\n@@ -84,1 +84,1 @@\n-        Asserts.assertTrue(!test1(MyValue1.ref.class, Object.class), \"test1_9 failed\");\n+        Asserts.assertTrue(!test1(MyValue1.class.asPrimaryType(), Object.class), \"test1_9 failed\");\n@@ -93,1 +93,1 @@\n-        boolean check2 = MyValue1.ref.class.isAssignableFrom(MyValue1.ref.class);\n+        boolean check2 = MyValue1.class.asPrimaryType().isAssignableFrom(MyValue1.class.asPrimaryType());\n@@ -95,2 +95,2 @@\n-        boolean check4 = MyValue1.ref.class.isAssignableFrom(MyValue1.class.asValueType());\n-        boolean check5 = !MyValue1.class.asValueType().isAssignableFrom(MyValue1.ref.class);\n+        boolean check4 = MyValue1.class.asPrimaryType().isAssignableFrom(MyValue1.class.asValueType());\n+        boolean check5 = !MyValue1.class.asValueType().isAssignableFrom(MyValue1.class.asPrimaryType());\n@@ -98,1 +98,1 @@\n-        boolean check7 = Object.class.isAssignableFrom(MyValue1.ref.class);\n+        boolean check7 = Object.class.isAssignableFrom(MyValue1.class.asPrimaryType());\n@@ -100,1 +100,1 @@\n-        boolean check9 = !MyValue1.ref.class.isAssignableFrom(Object.class);\n+        boolean check9 = !MyValue1.class.asPrimaryType().isAssignableFrom(Object.class);\n@@ -119,2 +119,2 @@\n-        Asserts.assertTrue(test3(MyValue1.ref.class) == MyAbstract.class, \"test3_2 failed\");\n-        Asserts.assertTrue(test3(MyValue1.val.class) == MyAbstract.class, \"test3_3 failed\");\n+        Asserts.assertTrue(test3(MyValue1.class.asPrimaryType()) == MyAbstract.class, \"test3_2 failed\");\n+        Asserts.assertTrue(test3(MyValue1.class.asValueType()) == MyAbstract.class, \"test3_3 failed\");\n@@ -129,2 +129,2 @@\n-        boolean check2 = MyValue1.ref.class.getSuperclass() == MyAbstract.class;\n-        boolean check3 = MyValue1.val.class.getSuperclass() == MyAbstract.class;\n+        boolean check2 = MyValue1.class.asPrimaryType().getSuperclass() == MyAbstract.class;\n+        boolean check3 = MyValue1.class.asValueType().getSuperclass() == MyAbstract.class;\n@@ -193,1 +193,1 @@\n-        result = test8(MyValue1.ref.class, vt);\n+        result = test8(MyValue1.class.asPrimaryType(), vt);\n@@ -207,1 +207,1 @@\n-        result = test9(MyValue2.ref.class, vt);\n+        result = test9(MyValue2.class.asPrimaryType(), vt);\n@@ -269,1 +269,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.val.class, len);\n+        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), len);\n@@ -468,1 +468,1 @@\n-          ca[i] = MyValue1.val.class;\n+          ca[i] = MyValue1.class.asValueType();\n@@ -561,1 +561,1 @@\n-            return U.getValue(v, V1_OFFSET, MyValue2.val.class);\n+            return U.getValue(v, V1_OFFSET, MyValue2.class.asValueType());\n@@ -591,1 +591,1 @@\n-            return U.getValue(this, TEST31_VT_OFFSET, MyValue1.val.class);\n+            return U.getValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType());\n@@ -608,1 +608,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.val.class, vt);\n+            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), vt);\n@@ -639,1 +639,1 @@\n-            return U.getValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.val.class);\n+            return U.getValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class.asValueType());\n@@ -658,1 +658,1 @@\n-            U.putValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.val.class, vt);\n+            U.putValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class.asValueType(), vt);\n@@ -678,1 +678,1 @@\n-            return U.getValue(o, TEST31_VT_OFFSET, MyValue1.val.class);\n+            return U.getValue(o, TEST31_VT_OFFSET, MyValue1.class.asValueType());\n@@ -696,1 +696,1 @@\n-            return U.getValue(this, offset, MyValue1.val.class);\n+            return U.getValue(this, offset, MyValue1.class.asValueType());\n@@ -714,1 +714,1 @@\n-            U.putValue(o, TEST31_VT_OFFSET, MyValue1.val.class, vt);\n+            U.putValue(o, TEST31_VT_OFFSET, MyValue1.class.asValueType(), vt);\n@@ -734,1 +734,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.val.class, o);\n+            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), o);\n@@ -774,1 +774,1 @@\n-        Object[] va = test40(MyValue1.ref.class, len);\n+        Object[] va = test40(MyValue1.class.asPrimaryType(), len);\n@@ -789,1 +789,1 @@\n-        boolean result = test41(MyValue1.ref.class, vt);\n+        boolean result = test41(MyValue1.class.asPrimaryType(), vt);\n@@ -803,1 +803,1 @@\n-        boolean result = test42(MyValue2.ref.class, vt);\n+        boolean result = test42(MyValue2.class.asPrimaryType(), vt);\n@@ -805,1 +805,1 @@\n-        result = test42(MyValue2.class, vt);\n+        result = test42(MyValue2.class.asValueType(), vt);\n@@ -818,1 +818,1 @@\n-        Object result = test43(MyValue1.ref.class, vt);\n+        Object result = test43(MyValue1.class.asPrimaryType(), vt);\n@@ -820,1 +820,1 @@\n-        result = test43(MyValue1.ref.class, null);\n+        result = test43(MyValue1.class.asPrimaryType(), null);\n@@ -833,1 +833,1 @@\n-            test44(MyValue2.ref.class, vt);\n+            test44(MyValue2.class.asPrimaryType(), vt);\n@@ -841,1 +841,1 @@\n-        return MyValue1.ref.class.cast(vt);\n+        return MyValue1.class.asPrimaryType().cast(vt);\n@@ -855,1 +855,1 @@\n-        return MyValue2.ref.class.cast(vt);\n+        return MyValue2.class.asPrimaryType().cast(vt);\n@@ -871,1 +871,1 @@\n-        return MyValue1.val.class.cast(vt);\n+        return MyValue1.class.asValueType().cast(vt);\n@@ -905,1 +905,1 @@\n-        return MyValue1.ref.class.cast(vt);\n+        return MyValue1.class.asPrimaryType().cast(vt);\n@@ -927,1 +927,1 @@\n-        result = test50(MyValue1.ref.class, vt);\n+        result = test50(MyValue1.class.asPrimaryType(), vt);\n@@ -950,1 +950,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.ref.class, len);\n+        Object[] va = (Object[])Array.newInstance(MyValue1.class.asPrimaryType(), len);\n@@ -1066,1 +1066,1 @@\n-            return U.getValue(test55_vt, V1_OFFSET, MyValue2.val.class);\n+            return U.getValue(test55_vt, V1_OFFSET, MyValue2.class.asValueType());\n@@ -1080,1 +1080,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.val.class, 1);\n+        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), 1);\n@@ -1094,1 +1094,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.val.class, 1);\n+        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), 1);\n@@ -1159,0 +1159,37 @@\n+\n+    \/\/ Test asPrimaryType intrinsic with non-value mirror\n+    @Test()\n+    public Class<?> test61(Class<?> c) {\n+        if (c.asPrimaryType() != Integer.class) {\n+            throw new RuntimeException(\"Unexpected class\");\n+        }\n+        return Integer.class.asPrimaryType();\n+    }\n+\n+    @Run(test = \"test61\")\n+    public void test61_verifier() {\n+        Class<?> result = test61(Integer.class);\n+        Asserts.assertEQ(result, Integer.class);\n+    }\n+\n+    \/\/ Test asValueType intrinsic with non-value mirror\n+    @Test()\n+    public Class<?> test62(Class<?> c) {\n+        try {\n+            c.asValueType();\n+            throw new RuntimeException(\"No exception thrown\");\n+        } catch (UnsupportedOperationException ex) {\n+            \/\/ Expected\n+        }\n+        return Integer.class.asValueType();\n+    }\n+\n+    @Run(test = \"test62\")\n+    public void test62_verifier() {\n+        try {\n+            test62(Integer.class);\n+            throw new RuntimeException(\"No exception thrown\");\n+        } catch (UnsupportedOperationException ex) {\n+            \/\/ Expected\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":80,"deletions":43,"binary":false,"changes":123,"status":"modified"}]}