{"files":[{"patch":"@@ -772,2 +772,4 @@\n-            } else if (abstracts.size() == 1) {\n-                return new FunctionDescriptor(abstracts.first());\n+            }\n+            FunctionDescriptor descRes;\n+            if (abstracts.size() == 1) {\n+                descRes = new FunctionDescriptor(abstracts.first());\n@@ -775,1 +777,1 @@\n-                FunctionDescriptor descRes = mergeDescriptors(origin, abstracts.toList());\n+                descRes = mergeDescriptors(origin, abstracts.toList());\n@@ -794,1 +796,0 @@\n-                return descRes;\n@@ -796,0 +797,7 @@\n+            \/\/ Not functional if extending either of the top interface types.\n+            Type topInferface;\n+            if ((topInferface = asSuper(origin.type, syms.identityObjectType.tsym)) != null ||\n+                    (topInferface = asSuper(origin.type, syms.valueObjectType.tsym)) != null) {\n+                throw failure(\"not.a.functional.intf.1\", origin, diags.fragment(Fragments.MayNotExtendTopInterfaceType(topInferface)));\n+            }\n+            return descRes;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -263,0 +263,4 @@\n+# 0: type\n+compiler.misc.may.not.extend.top.interface.type=\\\n+    since it extends {0}\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.bad.functional.intf.anno.1\n+\/\/ key: compiler.misc.not.a.functional.intf.1\n+\/\/ key: compiler.misc.may.not.extend.top.interface.type\n+\n+@FunctionalInterface\n+interface I extends ValueObject {\n+    void m();\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/MayNotExtendTopInterfaceType.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8279901\n+ * @summary Javac should verify\/ensure that a Functional interface implements neither IdentityObject nor ValueObject\n+ * @compile\/fail\/ref=FunctionalInterfaceTest.out -XDrawDiagnostics -XDdev FunctionalInterfaceTest.java\n+ *\/\n+\n+public class FunctionalInterfaceTest {\n+\n+    @FunctionalInterface\n+    interface I extends IdentityObject  { \/\/ Error\n+        void m();\n+    }\n+\n+    @FunctionalInterface\n+    interface J extends I  {} \/\/ Error.\n+\n+    @FunctionalInterface\n+    interface K extends ValueObject  { \/\/ Error\n+        void m();\n+    }\n+\n+    interface L extends IdentityObject {\n+        void m();\n+    }\n+\n+    interface M extends ValueObject {\n+        void m();\n+    }\n+\n+    void foo() {\n+        var t = (L) () -> {}; \/\/ Error\n+        var u = (M) () -> {}; \/\/ Error\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/FunctionalInterfaceTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+FunctionalInterfaceTest.java:10:5: compiler.err.bad.functional.intf.anno.1: (compiler.misc.not.a.functional.intf.1: FunctionalInterfaceTest.I, (compiler.misc.may.not.extend.top.interface.type: java.lang.IdentityObject))\n+FunctionalInterfaceTest.java:15:5: compiler.err.bad.functional.intf.anno.1: (compiler.misc.not.a.functional.intf.1: FunctionalInterfaceTest.J, (compiler.misc.may.not.extend.top.interface.type: java.lang.IdentityObject))\n+FunctionalInterfaceTest.java:18:5: compiler.err.bad.functional.intf.anno.1: (compiler.misc.not.a.functional.intf.1: FunctionalInterfaceTest.K, (compiler.misc.may.not.extend.top.interface.type: java.lang.ValueObject))\n+FunctionalInterfaceTest.java:32:21: compiler.err.prob.found.req: (compiler.misc.not.a.functional.intf.1: FunctionalInterfaceTest.L, (compiler.misc.may.not.extend.top.interface.type: java.lang.IdentityObject))\n+FunctionalInterfaceTest.java:33:21: compiler.err.prob.found.req: (compiler.misc.not.a.functional.intf.1: FunctionalInterfaceTest.M, (compiler.misc.may.not.extend.top.interface.type: java.lang.ValueObject))\n+5 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/FunctionalInterfaceTest.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"}]}