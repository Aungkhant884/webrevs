{"files":[{"patch":"@@ -1,3 +0,0 @@\n-public abstract class AbstractTypeImplementingIdentityObject implements IdentityObject {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/AbstractTypeImplementingIdentityObject.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-public abstract class AbstractTypeWithNonstaticFields {\n-    int i;\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/AbstractTypeWithNonstaticFields.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-public abstract class AbstractTypeWithStaticFields {\n-    static int i;\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/AbstractTypeWithStaticFields.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-public abstract class AbstractTypeWithSynchronizedNonstaticMethod {\n-    synchronized int getInt() {\n-        return 42;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/AbstractTypeWithSynchronizedNonstaticMethod.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-public abstract class AbstractTypeWithSynchronizedStaticMethod {\n-    static synchronized int getInt() {\n-        return 42;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/AbstractTypeWithSynchronizedStaticMethod.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-class IdentityType {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  63; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"IdentityType\"; \/\/ #8\n-    Utf8 \"Code\"; \/\/ #9\n-    Utf8 \"LineNumberTable\"; \/\/ #10\n-    Utf8 \"SourceFile\"; \/\/ #11\n-    Utf8 \"IdentityType.java\"; \/\/ #12\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access\n-  #7;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#9) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x2AB70001B1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#10) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  1;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#11) { \/\/ SourceFile\n-      #12;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class IdentityType\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/IdentityType.jcod","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-public class IdentityTypeImplementingIdentityObject implements IdentityObject{\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/IdentityTypeImplementingIdentityObject.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-public primitive class InlineType {\n-    int i = 0;\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/InlineType.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-public interface Interface {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/Interface.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-public interface InterfaceExtendingIdentityObject extends IdentityObject {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/InterfaceExtendingIdentityObject.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/*\n- * @test\n- * @summary test that IdentityObject interface is injected correctly\n- * @compile IdentityType.jcod\n- * @compile Interface.java InterfaceExtendingIdentityObject.java\n- * @compile AbstractTypeImplementingIdentityObject.java\n- * @compile AbstractTypeWithNonstaticFields.java AbstractTypeWithStaticFields.java\n- * @compile AbstractTypeWithSynchronizedNonstaticMethod.java AbstractTypeWithSynchronizedStaticMethod.java\n- * @compile InlineType.java IdentityTypeImplementingIdentityObject.java\n- * @compile TestIdentityObject.java\n- * @run main\/othervm -verify TestIdentityObject\n- *\/\n-\n-public class TestIdentityObject {\n-    static void checkIdentityObject(Class c, boolean subtype) {\n-        boolean s;\n-        try {\n-            c.asSubclass(IdentityObject.class);\n-            s = true;\n-        } catch(ClassCastException e) {\n-            s = false;\n-        }\n-        if (subtype != s) {\n-            if (subtype) {\n-                throw new RuntimeException(\"Type \" + c.getName() + \" is missing IdentityObject\");\n-            } else {\n-                throw new RuntimeException(\"Type \" + c.getName() + \" should not implements IdentityObject\");\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        checkIdentityObject(InlineType.class, false);\n-        checkIdentityObject(IdentityType.class, true);\n-        checkIdentityObject(IdentityTypeImplementingIdentityObject.class, true);\n-        checkIdentityObject(Interface.class, false);\n-        checkIdentityObject(InterfaceExtendingIdentityObject.class, true);\n-        checkIdentityObject(AbstractTypeImplementingIdentityObject.class, true);\n-        checkIdentityObject(AbstractTypeWithNonstaticFields.class, true);\n-        checkIdentityObject(AbstractTypeWithStaticFields.class, false);\n-        checkIdentityObject(AbstractTypeWithSynchronizedNonstaticMethod.class, true);\n-        checkIdentityObject(AbstractTypeWithSynchronizedStaticMethod.class, false);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/identityObject\/TestIdentityObject.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-public abstract class AbstractSpecified implements ValueObject {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/AbstractSpecified.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-public interface InterfaceSpecified extends ValueObject {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/InterfaceSpecified.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-public primitive class PrimitiveType {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveType.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-public primitive class PrimitiveTypeSpecified implements ValueObject {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveTypeSpecified.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-public primitive class PrimitiveWithInterface implements InterfaceSpecified {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveWithInterface.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-public primitive class PrimitiveWithSuper extends AbstractSpecified {\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveWithSuper.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,131 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/*\n- * @test\n- * @summary test that ValueObject interface is injected correctly\n- * @library \/test\/lib \/test\/jdk\/lib\/testlibrary\/bytecode \/test\/jdk\/java\/lang\/invoke\/common\n- * @build jdk.experimental.bytecode.BasicClassBuilder\n- * @compile TestPrimitiveObject.java\n- * @compile PrimitiveType.java PrimitiveTypeSpecified.java\n- * @compile AbstractSpecified.java InterfaceSpecified.java\n- * @compile PrimitiveWithSuper.java PrimitiveWithInterface.java\n- * @run main\/othervm -verify TestPrimitiveObject\n- *\/\n-\n-import java.lang.invoke.*;\n-import jdk.experimental.bytecode.*;\n-\n-public class TestPrimitiveObject {\n-\n-    public static void main(String[] args) {\n-        checkNegativePrimitiveObjects();\n-        checkPositivePrimitiveObjects();\n-        checkIcceOnInvalidSupers();\n-    }\n-\n-    static void checkNegativePrimitiveObjects() {\n-        Class[] clazzes = new Class[] {\n-            String.class, Comparable.class, Number.class\n-        };\n-        for (Class clazz : clazzes) {\n-            checkPrimitiveObject(clazz, false);\n-        }\n-    }\n-\n-    static void checkPositivePrimitiveObjects() {\n-        Class[] clazzes = new Class[] {\n-            PrimitiveType.class, PrimitiveTypeSpecified.class,\n-            AbstractSpecified.class, InterfaceSpecified.class,\n-            PrimitiveWithSuper.class, PrimitiveWithInterface.class\n-        };\n-        for (Class clazz : clazzes) {\n-            checkPrimitiveObject(clazz, true);\n-        }\n-    }\n-\n-    static void checkPrimitiveObject(Class c, boolean subtype) {\n-        boolean s;\n-        try {\n-            c.asSubclass(ValueObject.class);\n-            s = true;\n-        } catch(ClassCastException e) {\n-            s = false;\n-        }\n-        if (subtype != s) {\n-            if (subtype) {\n-                throw new RuntimeException(\"Type \" + c.getName() + \" is missing ValueObject\");\n-            } else {\n-                throw new RuntimeException(\"Type \" + c.getName() + \" should not implement ValueObject\");\n-            }\n-        }\n-    }\n-\n-    \/\/ Define classes that implement ValueObject but are invalid supers\n-    static void checkIcceOnInvalidSupers() {\n-        MethodHandles.Lookup mhLookup = MethodHandles.lookup();\n-        checkIcce(mhLookup, createClass().build());\n-        checkIcce(mhLookup, createAbstractWithField().build());\n-        checkIcce(mhLookup, createAbstractIdentity().build());\n-        checkIcce(mhLookup, createIdentity().build());\n-    }\n-\n-    static ClassBuilder createClass() {\n-        return new BasicClassBuilder(\"ANormalClass\", 63, 0)\n-            .withSuperclass(\"java\/lang\/Object\")\n-            .withSuperinterface(\"java\/lang\/ValueObject\");\n-    }\n-\n-    static ClassBuilder createAbstractWithField() {\n-        return new BasicClassBuilder(\"AbstractWithField\", 63, 0)\n-            .withSuperclass(\"java\/lang\/Object\")\n-            .withFlags(Flag.ACC_ABSTRACT)\n-            .withField(\"aFieldWhichIsIllegalAsAnAbstractSuperToPrimitiveObject\", \"I\")\n-            .withSuperinterface(\"java\/lang\/ValueObject\");\n-    }\n-\n-    static ClassBuilder createAbstractIdentity() {\n-        return new BasicClassBuilder(\"AbstractIdentity\", 63, 0)\n-            .withSuperclass(\"java\/lang\/Object\")\n-            .withFlags(Flag.ACC_ABSTRACT)\n-            .withSuperinterface(\"java\/lang\/IdentityObject\")\n-            .withSuperinterface(\"java\/lang\/ValueObject\");\n-    }\n-\n-  static ClassBuilder createIdentity() {\n-        return new BasicClassBuilder(\"Identity\", 63, 0)\n-            .withSuperclass(\"java\/lang\/Object\")\n-            .withSuperinterface(\"java\/lang\/IdentityObject\")\n-            .withSuperinterface(\"java\/lang\/ValueObject\");\n-    }\n-\n-    static void checkIcce(MethodHandles.Lookup mhLookup, byte[] clazzBytes) {\n-        try {\n-            mhLookup.defineClass(clazzBytes);\n-            throw new RuntimeException(\"Expected IncompatibleClassChangeError\");\n-        }\n-        catch (IllegalAccessException ill) { throw new RuntimeException(ill); }\n-        catch (IncompatibleClassChangeError icce) { System.out.println(icce); }\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/TestPrimitiveObject.java","additions":0,"deletions":131,"binary":false,"changes":131,"status":"deleted"}]}