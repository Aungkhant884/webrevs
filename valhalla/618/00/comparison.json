{"files":[{"patch":"@@ -539,1 +539,1 @@\n-    \/\/ Test defaultvalue\n+    \/\/ Test aconst_init\n@@ -553,1 +553,1 @@\n-    \/\/ Test defaultvalue\n+    \/\/ Test aconst_init\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBasicFunctionality.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -724,1 +724,1 @@\n-    \/\/ Defaultvalue with type which is not an inline type\n+    \/\/ aconst_init with type which is not an inline type\n@@ -760,1 +760,1 @@\n-    \/\/ Same as test16 but with unloaded type at defaultvalue\n+    \/\/ Same as test16 but with unloaded type at aconst_init\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test correct handling of defaultvalue bytecode with unresolved inline class.\n+ * @summary Test correct handling of aconst_init bytecode with unresolved inline class.\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnresolvedDefault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    \/\/ Note: this test might become obsolete if defaultvalue is extended to accept identity classes\n+    \/\/ Note: this test might become obsolete if aconst_init is extended to accept identity classes\n@@ -96,1 +96,1 @@\n-        MethodHandle testDefaultvalueOnIdentityClass = InstructionHelper.loadCode(\n+        MethodHandle testAconstInitOnIdentityClass = InstructionHelper.loadCode(\n@@ -98,1 +98,1 @@\n-                \"testDefaultValueOnIdentityClass\",\n+                \"testAconstInitOnIdentityClass\",\n@@ -101,1 +101,1 @@\n-                    CODE.defaultvalue(IdentityClass.class)\n+                    CODE.aconst_init(IdentityClass.class)\n@@ -107,1 +107,1 @@\n-            boolean result = (boolean) testDefaultvalueOnIdentityClass.invokeExact();\n+            boolean result = (boolean) testAconstInitOnIdentityClass.invokeExact();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CreationErrorTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-     * Just some check sanity checks with defaultvalue, withfield, astore and aload\n+     * Just some check sanity checks with aconst_init, withfield, astore and aload\n@@ -588,1 +588,1 @@\n-                            .defaultvalue(FooValue.class.asValueType())\n+                            .aconst_init(FooValue.class.asValueType())\n@@ -598,1 +598,1 @@\n-                            .defaultvalue(FooValue.class.asValueType())\n+                            .aconst_init(FooValue.class.asValueType())\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-                    .defaultvalue(inlineClass)\n+                    .aconst_init(inlineClass)\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-                .defaultvalue(Point.class)\n+                .aconst_init(Point.class)\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestBytecodeLib.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        \/\/ Test that a defaultvalue opcode with an out of bounds cp index causes a VerifyError.\n+        \/\/ Test that a aconst_init opcode with an out of bounds cp index causes a VerifyError.\n@@ -70,1 +70,1 @@\n-        \/\/ contains a defaultvalue opcode.\n+        \/\/ contains a aconst_init opcode.\n@@ -73,1 +73,1 @@\n-        \/\/ Test VerifyError is thrown if a defaultvalue's cp entry is not a class.\n+        \/\/ Test VerifyError is thrown if a aconst_init's cp entry is not a class.\n@@ -93,1 +93,1 @@\n-        \/\/ Test VerifyError is thrown if a defaultvalue's cp entry is not an inline type.\n+        \/\/ Test VerifyError is thrown if a aconst_init's cp entry is not an inline type.\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/VerifierInlineTypes.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-\/\/         0: defaultvalue  #3                  \/\/ class Value\n+\/\/         0: aconst_init   #3                  \/\/ class Value\n@@ -56,1 +56,1 @@\n-\/\/ The constant pool index of the defaultvalue opcode (0xCB) in the Code\n+\/\/ The constant pool index of the aconst_init opcode (0xCB) in the Code\n@@ -129,1 +129,1 @@\n-            0xCB00934C2B1ACC00; \/\/ Changed CP index from 3 to 0x93 for opcode 0xCB (defaultvalue)\n+            0xCB00934C2B1ACC00; \/\/ Changed CP index from 3 to 0x93 for opcode 0xCB (aconst_init)\n@@ -158,1 +158,1 @@\n-\/\/ defaultvalue opcode (0xCB), this should cause a ClassFormatError\n+\/\/ aconst_init opcode (0xCB), this should cause a ClassFormatError\n@@ -331,1 +331,1 @@\n-            0xCB00024C2B1ACC00; \/\/ Changed CP index from 3 to 2 for opcode 0xCB (defaultvalue)\n+            0xCB00024C2B1ACC00; \/\/ Changed CP index from 3 to 2 for opcode 0xCB (aconst_init)\n@@ -822,1 +822,1 @@\n-\/\/ The cp entry for the defaultvalue opcode was changed to a reference that\n+\/\/ The cp entry for the aconst_init opcode was changed to a reference that\n@@ -824,1 +824,1 @@\n-\/\/ This should cause a VerifyError because the cp entry for opcode defaultvalue\n+\/\/ This should cause a VerifyError because the cp entry for opcode aconst_init\n@@ -907,1 +907,1 @@\n-            0xCB00044C1A2B5FCC; \/\/ Changed defaultvalue's cp index at byte 3 from 3 to 4.\n+            0xCB00044C1A2B5FCC; \/\/ Changed aconst_init's cp index at byte 3 from 3 to 4.\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/verifierTests.jcod","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -158,2 +158,2 @@\n-    public C defaultvalue(S clazz) {\n-        emitOp(Opcode.DEFAULTVALUE, clazz);\n+    public C aconst_init(S clazz) {\n+        emitOp(Opcode.ACONST_INIT, clazz);\n","filename":"test\/jdk\/lib\/testlibrary\/bytecode\/jdk\/experimental\/bytecode\/CodeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-    DEFAULTVALUE(203),\n+    ACONST_INIT(203),\n","filename":"test\/jdk\/lib\/testlibrary\/bytecode\/jdk\/experimental\/bytecode\/Opcode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -734,1 +734,1 @@\n-            case DEFAULTVALUE:\n+            case ACONST_INIT:\n","filename":"test\/jdk\/lib\/testlibrary\/bytecode\/jdk\/experimental\/bytecode\/TypedCodeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}