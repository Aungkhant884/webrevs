{"files":[{"patch":"@@ -169,10 +169,0 @@\n-bool InstanceKlass::is_preload_class(Symbol* name) const {\n-  for (int i = 0; i < _preload_classes->length(); i++) {\n-    Symbol* class_name = _constants->klass_at_noresolve(_preload_classes->at(i));\n-    if (class_name == name) {\n-      return true;\n-    }\n-  }\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -553,1 +553,0 @@\n-  bool is_preload_class(Symbol* name) const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2854,1 +2854,4 @@\n-    if (!method->is_static() && (!InlineTypePassFieldsAsArgs || !method->method_holder()->is_inline_klass())) {\n+    if (!method->is_static()) {\n+      if (InlineTypePassFieldsAsArgs && method->method_holder()->is_inline_klass()) {\n+        return NULL;\n+      }\n@@ -2861,1 +2864,2 @@\n-          if (method->method_holder()->is_preload_class(ss.as_symbol())) {\n+          InlineKlass* vk = ss.as_inline_klass(method->method_holder());\n+          if (vk != NULL) {\n@@ -2882,1 +2886,2 @@\n-          if (method->method_holder()->is_preload_class(ss.as_symbol())) {\n+          InlineKlass* vk = ss.as_inline_klass(method->method_holder());\n+          if (vk != NULL) {\n@@ -2975,2 +2980,1 @@\n-        if (vk != NULL && (bt == T_PRIMITIVE_OBJECT || holder->is_preload_class(vk->name())) &&\n-            vk->can_be_passed_as_fields() && (init || _method->is_scalarized_arg(arg_num))) {\n+        if (vk != NULL && vk->can_be_passed_as_fields() && (init || _method->is_scalarized_arg(arg_num))) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -175,0 +175,5 @@\n+\n+    @DontInline\n+    void dontInline(MyValueClass1 arg) {\n+\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValueClass1.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2690,1 +2690,1 @@\n-        failOn = {ALLOC_G})\n+        counts = {ALLOC_G, \" = 1\"}) \/\/ 1 Object allocation\n@@ -2692,1 +2692,1 @@\n-        counts = {ALLOC_G, \" = 1\"})\n+        counts = {ALLOC_G, \" = 2\"}) \/\/ 1 MyValue3 allocation + 1 Object allocation\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -539,0 +539,1 @@\n+        vt.dontInline(vt);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}