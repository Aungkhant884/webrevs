{"files":[{"patch":"@@ -878,2 +878,11 @@\n-    Type checkIdentityType(DiagnosticPosition pos, Type t) {\n-\n+    void checkIdentityType(DiagnosticPosition pos, Type t) {\n+        if (t.hasTag(TYPEVAR)) {\n+            t = types.skipTypeVars(t, false);\n+        }\n+        if (t.isIntersection()) {\n+            IntersectionClassType ict = (IntersectionClassType)t;\n+            for (Type component : ict.getExplicitComponents()) {\n+                checkIdentityType(pos, component);\n+            }\n+            return;\n+        }\n@@ -881,5 +890,1 @@\n-            return typeTagError(pos,\n-                    diags.fragment(Fragments.TypeReqIdentity),\n-                    t);\n-\n-        return t;\n+            typeTagError(pos, diags.fragment(Fragments.TypeReqIdentity), t);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -93,0 +93,21 @@\n+\n+    \/\/ another set of test cases considering type variables and intersections\n+    interface I {}\n+\n+    value interface VI extends I {}\n+\n+    class C {}\n+\n+    value class VC<T extends VC> {\n+        void m(T t) {\n+            synchronized(t) {} \/\/ error\n+        }\n+\n+        void foo(Object o) {\n+            synchronized ((VC & I)o) {} \/\/ error\n+        }\n+\n+        void bar(Object o) {\n+            synchronized ((I & VI)o) {} \/\/ error\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/SemanticsViolationsTest.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -14,0 +14,3 @@\n+SemanticsViolationsTest.java:103:13: compiler.err.type.found.req: SemanticsViolationsTest.VC, (compiler.misc.type.req.identity)\n+SemanticsViolationsTest.java:107:13: compiler.err.type.found.req: SemanticsViolationsTest.VC, (compiler.misc.type.req.identity)\n+SemanticsViolationsTest.java:111:13: compiler.err.type.found.req: SemanticsViolationsTest.VI, (compiler.misc.type.req.identity)\n@@ -17,1 +20,1 @@\n-16 errors\n+19 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/SemanticsViolationsTest.out","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}