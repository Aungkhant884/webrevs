{"files":[{"patch":"@@ -55,1 +55,1 @@\n-    vklass->inline_copy_payload_to_new_oop(vah->value_at_addr(index, vaklass->layout_helper()) ,buf);\n+    vklass->inline_copy_payload_to_new_oop(vah->value_at_addr(index, vaklass->layout_helper()), buf);\n@@ -63,6 +63,2 @@\n-  if (vklass->is_empty_inline_type()) {\n-    return; \/\/ Assumes dst was a new and clean buffer (OptoRuntime::load_unknown_inline())\n-  } else {\n-    void* src = value_at_addr(index, vaklass->layout_helper());\n-    return vklass->inline_copy_payload_to_new_oop(src ,dst);\n-  }\n+  void* src = value_at_addr(index, vaklass->layout_helper());\n+  return vklass->inline_copy_payload_to_new_oop(src, dst);\n","filename":"src\/hotspot\/share\/oops\/flatArrayOop.inline.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1335,4 +1335,0 @@\n-  if (svIndex >= sv->field_size()) {\n-    \/\/ No fields left to re-assign.\n-    return svIndex;\n-  }\n@@ -1348,7 +1344,6 @@\n-          field._type = T_OBJECT;\n-        }\n-        if (fs.is_inlined()) {\n-          \/\/ Resolve klass of flattened inline type field\n-          Klass* vk = klass->get_inline_type_field_klass(fs.index());\n-          field._klass = InlineKlass::cast(vk);\n-          field._type = T_INLINE_TYPE;\n+          if (fs.is_inlined()) {\n+            \/\/ Resolve klass of flattened inline type field\n+            field._klass = InlineKlass::cast(klass->get_inline_type_field_klass(fs.index()));\n+          } else {\n+            field._type = T_OBJECT;\n+          }\n@@ -1363,0 +1358,11 @@\n+    BasicType type = fields->at(i)._type;\n+    int offset = base_offset + fields->at(i)._offset;\n+    \/\/ Check for flattened inline type field before accessing the ScopeValue because it might not have any fields\n+    if (type == T_INLINE_TYPE) {\n+      \/\/ Recursively re-assign flattened inline type fields\n+      InstanceKlass* vk = fields->at(i)._klass;\n+      assert(vk != NULL, \"must be resolved\");\n+      offset -= InlineKlass::cast(vk)->first_field_offset(); \/\/ Adjust offset to omit oop header\n+      svIndex = reassign_fields_by_klass(vk, fr, reg_map, sv, svIndex, obj, skip_internal, offset, CHECK_0);\n+      continue; \/\/ Continue because we don't need to increment svIndex\n+    }\n@@ -1366,2 +1372,0 @@\n-    int offset = base_offset + fields->at(i)._offset;\n-    BasicType type = fields->at(i)._type;\n@@ -1375,9 +1379,0 @@\n-      case T_INLINE_TYPE: {\n-        \/\/ Recursively re-assign flattened inline type fields\n-        InstanceKlass* vk = fields->at(i)._klass;\n-        assert(vk != NULL, \"must be resolved\");\n-        offset -= InlineKlass::cast(vk)->first_field_offset(); \/\/ Adjust offset to omit oop header\n-        svIndex = reassign_fields_by_klass(vk, fr, reg_map, sv, svIndex, obj, skip_internal, offset, CHECK_0);\n-        continue; \/\/ Continue because we don't need to increment svIndex\n-      }\n-\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":17,"deletions":22,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -3021,2 +3021,0 @@\n-    \/\/ TODO disabled until JDK-8253893 is fixed\n-\/*\n@@ -3037,1 +3035,0 @@\n-*\/\n@@ -3058,2 +3055,0 @@\n-    \/\/ TODO disabled until JDK-8253893 is fixed\n-\/*\n@@ -3078,1 +3073,0 @@\n-*\/\n@@ -3361,0 +3355,13 @@\n+\n+    \/\/ Test that array load slow path correctly initializes non-flattened field of empty inline type\n+    @Test()\n+    public Object test145(Object[] array) {\n+        return array[0];\n+    }\n+\n+    @DontCompile\n+    public void test145_verifier(boolean warmup) {\n+        Object[] array = new EmptyContainer[1];\n+        EmptyContainer empty = (EmptyContainer)test145(array);\n+        Asserts.assertEquals(empty, EmptyContainer.default);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrays.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -3304,3 +3304,2 @@\n-\/\/ TODO disabled until JDK-8253893 is fixed\n-\/\/        EmptyContainer[] array2 = new EmptyContainer[]{EmptyContainer.default};\n-\/\/        MixedContainer[] array3 = new MixedContainer[]{MixedContainer.default};\n+        EmptyContainer[] array2 = new EmptyContainer[]{EmptyContainer.default};\n+        MixedContainer[] array3 = new MixedContainer[]{MixedContainer.default};\n@@ -3312,3 +3311,2 @@\n-\/\/ TODO disabled until JDK-8253893 is fixed\n-\/\/        Asserts.assertEquals(array2[0], EmptyContainer.default);\n-\/\/        Asserts.assertEquals(array3[0], MixedContainer.default);\n+        Asserts.assertEquals(array2[0], EmptyContainer.default);\n+        Asserts.assertEquals(array3[0], MixedContainer.default);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}