{"files":[{"patch":"@@ -964,1 +964,0 @@\n-                                       bool is_inline_type,\n@@ -1020,1 +1019,1 @@\n-      if (is_inline_type && ik->invalid_inline_super()) {\n+      if (is_inline_type() && ik->invalid_inline_super()) {\n@@ -1041,0 +1040,5 @@\n+      if (ik->name() == vmSymbols::java_lang_PrimitiveObject()) {\n+        \/\/ further checks for \"is_invalid_super_for_inline_type()\" needed later\n+        \/\/ needs field parsing, delay unitl post_process_parse_stream()\n+        _implements_primitiveObject = true;\n+      }\n@@ -4710,0 +4714,3 @@\n+    if (length == 1 && result->at(0) == vmClasses::PrimitiveObject_klass()) {\n+      return Universe::the_single_PrimitiveObject_klass_array();\n+    }\n@@ -5828,0 +5835,3 @@\n+  if (_has_injected_primitiveObject) {\n+    ik->set_has_injected_primitiveObject();\n+  }\n@@ -6084,0 +6094,3 @@\n+  \/\/ the common single interface arrays need setup here to provide the\n+  \/\/ correct answer to \"compute_transitive_interfaces()\", during\n+  \/\/ \"SystemDictionary::initialize()\"\n@@ -6087,0 +6100,3 @@\n+  if (ik->name() == vmSymbols::java_lang_PrimitiveObject()) {\n+    Universe::initialize_the_single_PrimitiveObject_klass_array(ik, CHECK);\n+  }\n@@ -6240,0 +6256,2 @@\n+  _implements_primitiveObject(false),\n+  _has_injected_primitiveObject(false),\n@@ -6584,1 +6602,0 @@\n-                   is_inline_type(),\n@@ -6732,7 +6749,1 @@\n-        ResourceMark rm(THREAD);\n-        Exceptions::fthrow(\n-          THREAD_AND_LOCATION,\n-          vmSymbols::java_lang_IncompatibleClassChangeError(),\n-          \"inline class %s has an invalid super class %s\",\n-          _class_name->as_klass_external_name(),\n-          _super_klass->external_name());\n+        classfile_icce_error(\"inline class %s has an invalid super class %s\", _super_klass, THREAD);\n@@ -6770,0 +6781,12 @@\n+  \/\/ Check if declared as PrimitiveObject...else add if needed\n+  if (_implements_primitiveObject) {\n+    if (!is_inline_type() && invalid_inline_super()) {\n+      classfile_icce_error(\"class %s can not implement %s, neither valid inline classes or valid supertype\",\n+                            vmClasses::PrimitiveObject_klass(), THREAD);\n+      return;\n+    }\n+  } else if (is_inline_type()) {\n+    _temp_local_interfaces->append(vmClasses::PrimitiveObject_klass());\n+    _has_injected_primitiveObject = true;\n+  }\n+\n@@ -6775,0 +6798,2 @@\n+  } else if (itfs_len == 1 && _temp_local_interfaces->at(0) == vmClasses::PrimitiveObject_klass()) {\n+    _local_interfaces = Universe::the_single_PrimitiveObject_klass_array();\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":35,"deletions":10,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -217,0 +217,2 @@\n+  bool _implements_primitiveObject;\n+  bool _has_injected_primitiveObject;\n@@ -268,1 +270,0 @@\n-                        bool is_inline_type,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+  template(java_lang_PrimitiveObject,                 \"java\/lang\/PrimitiveObject\")                \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -641,1 +641,2 @@\n-        ti != Universe::the_single_IdentityObject_klass_array()) {\n+        ti != Universe::the_single_IdentityObject_klass_array() &&\n+        ti != Universe::the_single_PrimitiveObject_klass_array()) {\n@@ -649,1 +650,2 @@\n-      local_interfaces != Universe::the_single_IdentityObject_klass_array()) {\n+      local_interfaces != Universe::the_single_IdentityObject_klass_array() &&\n+      local_interfaces != Universe::the_single_PrimitiveObject_klass_array()) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -297,1 +297,2 @@\n-    _misc_has_restricted_fields               = 1 << 23  \/\/ class has fields with type restrictions\n+    _misc_has_injected_primitiveObject        = 1 << 23, \/\/ PrimitiveObject has been injected by the JVM\n+    _misc_has_restricted_fields               = 1 << 24  \/\/ class has fields with type restrictions\n@@ -488,0 +489,8 @@\n+  bool has_injected_primitiveObject() const {\n+    return (_misc_flags & _misc_has_injected_primitiveObject);\n+  }\n+\n+  void set_has_injected_primitiveObject() {\n+    _misc_flags |= _misc_has_injected_primitiveObject;\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -226,0 +226,1 @@\n+    public final Type primitiveObjectType;\n@@ -603,0 +604,1 @@\n+        primitiveObjectType = enterClass(\"java.lang.PrimitiveObject\");\n@@ -612,0 +614,1 @@\n+        synthesizeEmptyInterfaceIfMissing(primitiveObjectType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2248,1 +2248,1 @@\n-        if (sym.type == syms.identityObjectType) {\n+        if (sym == syms.identityObjectType.tsym) {\n@@ -2257,0 +2257,6 @@\n+        } else if (sym == syms.primitiveObjectType.tsym) {\n+            if (t.isPrimitiveClass() || t.isReferenceProjection())\n+                return syms.primitiveObjectType;\n+            if (t.hasTag(ARRAY) || t.tsym == syms.objectType.tsym)\n+                return null;\n+            \/\/ else fall through and look for explicit coded super interface\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}