{"files":[{"patch":"@@ -2726,10 +2726,12 @@\n-  if (_desc->bytecode() == Bytecodes::_areturn) {  \/\/ or should the test be state == atos ?\n-    Label not_restricted;\n-    __ get_method(rscratch1);\n-    __ movzwl(rscratch1, Address(rscratch1, Method::flags_offset()));\n-    __ andl(rscratch1, Method::_restricted_method);\n-    __ jcc(Assembler::zero, not_restricted);\n-    Register robj = LP64_ONLY(c_rarg1) NOT_LP64(rax);\n-    __ movptr(robj, aaddress(0));\n-    __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::restricted_return_value_check), robj);\n-    __ bind(not_restricted);\n+  if (UseTypeRestrictions) {\n+    if (_desc->bytecode() == Bytecodes::_areturn) {  \/\/ or should the test be state == atos ?\n+      Label not_restricted;\n+      __ get_method(rscratch1);\n+      __ movzwl(rscratch1, Address(rscratch1, Method::flags_offset()));\n+      __ andl(rscratch1, Method::_restricted_method);\n+      __ jcc(Assembler::zero, not_restricted);\n+      Register robj = LP64_ONLY(c_rarg1) NOT_LP64(rax);\n+      __ movptr(robj, aaddress(0));\n+      __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::restricted_return_value_check), robj);\n+      __ bind(not_restricted);\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1527,3 +1527,5 @@\n-            *restricted_field_info = type_index;\n-            *has_restricted_type = true;\n-            set_has_restricted_fields();\n+            if (UseTypeRestrictions) {\n+              *restricted_field_info = type_index;\n+              *has_restricted_type = true;\n+              set_has_restricted_fields();\n+            }\n@@ -3036,9 +3038,3 @@\n-        \/\/ RestrictedMethod_attribute {\n-        \/\/   u2 name_index;\n-        \/\/   u4 length;\n-        \/\/   u1 num_params;\n-        \/\/   u2 restricted_param_type[num_params];\n-        \/\/   u2 restricted_return_type;\n-        \/\/ }\n-\n-        has_restricted_method_attribute = true;\n+        if (UseTypeRestrictions) {\n+          has_restricted_method_attribute = true;\n+        }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2130,0 +2130,2 @@\n+  product(bool, UseTypeRestrictions, true,                                  \\\n+          \"Use type restrictions information\")                              \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            x = st.p.x;\n+            x = ((SimpleTest.Point)st.p).x;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/TypeRestrictions\/IncompleteKnowledgeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.lang.invoke.RestrictedType;\n@@ -43,1 +44,2 @@\n-    public Point p;\n+    @RestrictedType(\"Qruntime\/valhalla\/typerestrictions\/SimpleTest$Point;\")\n+    public Object p;\n@@ -47,1 +49,2 @@\n-        if (b.p != new Point(0,0)) throw new RuntimeException();\n+        boolean diff = b.p == new Point(0,0);\n+        Asserts.assertTrue(diff, \"Must be identical\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/TypeRestrictions\/SimpleTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}