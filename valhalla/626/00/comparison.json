{"files":[{"patch":"@@ -3756,0 +3756,2 @@\n+  \/\/ Set _preload_classes attribute to default sentinel\n+  _preload_classes = Universe::the_empty_short_array();\n@@ -6093,1 +6095,1 @@\n-  if (_preload_classes != NULL) {\n+  if (_preload_classes != NULL && _preload_classes != Universe::the_empty_short_array()) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -728,0 +728,6 @@\n+  if (preload_classes() != NULL &&\n+      preload_classes() != Universe::the_empty_short_array() &&\n+      !preload_classes()->is_shared()) {\n+    MetadataFactory::free_array<jushort>(loader_data, preload_classes());\n+  }\n+\n@@ -965,1 +971,1 @@\n-\n+            if (symb == name()) continue;\n@@ -988,0 +994,1 @@\n+        if (constants()->tag_at(preload_classes()->at(i)).is_klass()) continue;\n@@ -989,0 +996,1 @@\n+        if (class_name == name()) continue;\n@@ -2634,0 +2642,1 @@\n+  it->push(&_preload_classes);\n@@ -3718,0 +3727,1 @@\n+  st->print(BULLET\"preload classes:     \"); preload_classes()->print_value_on(st); st->cr();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -352,1 +352,1 @@\n-  const Array<u2>* _preload_classes;\n+  Array<u2>* _preload_classes;\n@@ -491,4 +491,0 @@\n-  bool has_preload_attribute() const {\n-    return _preload_classes != NULL;\n-  }\n-\n@@ -569,1 +565,1 @@\n-  const Array<u2>* preload_classes() const { return _preload_classes; }\n+  Array<u2>* preload_classes() const { return _preload_classes; }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -920,0 +920,12 @@\n+static jvmtiError check_preload_attribute(InstanceKlass* the_class,\n+                                          InstanceKlass* scratch_class) {\n+  Thread* thread = Thread::current();\n+  ResourceMark rm(thread);\n+\n+  \/\/ Check whether the class Preload attribute has been changed.\n+  return check_attribute_arrays(\"Preload\",\n+                                the_class, scratch_class,\n+                                the_class->preload_classes(),\n+                                scratch_class->preload_classes());\n+}\n+\n@@ -999,0 +1011,6 @@\n+  \/\/ Check whether the Preload attribute has been changed.\n+  err = check_preload_attribute(the_class, scratch_class);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return err;\n+  }\n+\n@@ -1964,0 +1982,6 @@\n+  \/\/ rewrite constant pool references in the Preload attribute:\n+  if (!rewrite_cp_refs_in_preload_attribute(scratch_class)) {\n+    \/\/ propagate failure back to caller\n+    return false;\n+  }\n+\n@@ -2112,0 +2136,13 @@\n+\/\/ Rewrite constant pool references in the Preload attribute.\n+bool VM_RedefineClasses::rewrite_cp_refs_in_preload_attribute(\n+       InstanceKlass* scratch_class) {\n+\n+  Array<u2>* preload_classes = scratch_class->preload_classes();\n+  assert(preload_classes != NULL, \"unexpected null preload_classes\");\n+  for (int i = 0; i < preload_classes->length(); i++) {\n+    u2 cp_index = preload_classes->at(i);\n+    preload_classes->at_put(i, find_new_index(cp_index));\n+  }\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -475,0 +475,1 @@\n+  bool rewrite_cp_refs_in_preload_attribute(InstanceKlass* scratch_class);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}