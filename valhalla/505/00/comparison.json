{"files":[{"patch":"@@ -2694,9 +2694,4 @@\n-                \/\/ Temporary treatment for primitive classes: Given a primitive class V that implements\n-                \/\/ I1, I2, ... In, v.getClass() is typed to be Class<? extends Object & I1 & I2 .. & In>\n-                Type wcb;\n-                if (qualifierType.isPrimitiveClass()) {\n-                    List<Type> bounds = List.of(syms.objectType).appendList(((ClassSymbol) qualifierType.tsym).getInterfaces());\n-                    wcb = bounds.size() > 1 ? types.makeIntersectionType(bounds) : syms.objectType;\n-                } else {\n-                    wcb = types.erasure(qualifierType);\n-                }\n+                \/\/ Special treatment for primitive classes: Given an expression v of type V where\n+                \/\/ V is a primitive class, v.getClass() is typed to be Class<? extends |V.ref|>\n+                Type wcb = types.erasure(qualifierType.isPrimitiveClass() ?\n+                                                qualifierType.referenceProjection() : qualifierType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n-            cFooRef = new Foo().getClass(); \/\/ Error\n+            cFooRef = new Foo().getClass(); \/\/ OK.\n@@ -19,1 +19,1 @@\n-            cFooRef = xv.getClass(); \/\/ Error\n+            cFooRef = xv.getClass(); \/\/ OK.\n@@ -32,1 +32,1 @@\n-            cBarRef = new Bar().getClass(); \/\/ Error\n+            cBarRef = new Bar().getClass(); \/\/ OK.\n@@ -36,1 +36,1 @@\n-            cBarRef = xv.getClass(); \/\/ Error\n+            cBarRef = xv.getClass(); \/\/ OK\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n-ClassLiteralTypingNegativeTest.java:15:41: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n@@ -4,1 +3,0 @@\n-ClassLiteralTypingNegativeTest.java:19:34: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n@@ -6,1 +4,0 @@\n-ClassLiteralTypingNegativeTest.java:32:41: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n@@ -8,2 +5,1 @@\n-ClassLiteralTypingNegativeTest.java:36:34: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n-8 errors\n+4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.out","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271389\n+ * @summary [lworld] Improve typing of primitiveObject.getClass()\n+ * @run main GetClassTypingTest\n+ *\/\n+\n+public class GetClassTypingTest {\n+\n+    static primitive class Primitive {}\n+\n+    static void foo(Class<? extends Primitive.ref> c) {}\n+\n+    public static void main(String [] args) {\n+       foo(new Primitive().getClass());\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/GetClassTypingTest.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -15,1 +15,1 @@\n-            cFooRef = ((Foo.val) new Foo()).getClass(); \/\/ Error\n+            cFooRef = ((Foo.val) new Foo()).getClass(); \/\/ OK\n@@ -19,1 +19,1 @@\n-            cFooRef = xv.getClass(); \/\/ Error\n+            cFooRef = xv.getClass(); \/\/ OK\n@@ -32,1 +32,1 @@\n-            cBarRef = ((Bar.val) new Bar()).getClass(); \/\/ Error\n+            cBarRef = ((Bar.val) new Bar()).getClass(); \/\/ OK\n@@ -36,1 +36,1 @@\n-            cBarRef = xv.getClass(); \/\/ Error\n+            cBarRef = xv.getClass(); \/\/ OK.\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RefDefault\/ClassLiteralTypingNegativeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n-ClassLiteralTypingNegativeTest.java:15:53: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo>)\n@@ -4,1 +3,0 @@\n-ClassLiteralTypingNegativeTest.java:19:34: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo>)\n@@ -6,1 +4,0 @@\n-ClassLiteralTypingNegativeTest.java:32:53: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar>)\n@@ -8,2 +5,1 @@\n-ClassLiteralTypingNegativeTest.java:36:34: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar>)\n-8 errors\n+4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RefDefault\/ClassLiteralTypingNegativeTest.out","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}