{"files":[{"patch":"@@ -2574,1 +2574,1 @@\n-        if (n->is_InlineType() && (vk == NULL || vk == t->inline_klass())) {\n+        if (n->is_InlineType() && !n->is_VectorBox() && (vk == NULL || vk == t->inline_klass())) {\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-    Node* result = expand_vbox_node_helper(vec_box, vbox, vect, vec_box->box_type(), vec_box->vec_type());\n+    Node* result = expand_vbox_node_helper(vbox, vect, vec_box->box_type(), vec_box->vec_type());\n@@ -244,2 +244,1 @@\n-Node* PhaseVector::expand_vbox_node_helper(VectorBoxNode* vec_box,\n-                                           Node* vbox,\n+Node* PhaseVector::expand_vbox_node_helper(Node* vbox,\n@@ -253,1 +252,1 @@\n-      Node* new_box = expand_vbox_node_helper(vec_box, vbox->in(i), vect->in(i), box_type, vect_type);\n+      Node* new_box = expand_vbox_node_helper(vbox->in(i), vect->in(i), box_type, vect_type);\n@@ -268,1 +267,1 @@\n-      Node* new_box = expand_vbox_node_helper(vec_box, vbox->in(i), vect, box_type, vect_type);\n+      Node* new_box = expand_vbox_node_helper(vbox->in(i), vect, box_type, vect_type);\n@@ -275,1 +274,1 @@\n-    return expand_vbox_alloc_node(vec_box, vbox_alloc, box_type, vect_type);\n+    return expand_vbox_alloc_node(vbox_alloc, vect, box_type, vect_type);\n@@ -283,2 +282,2 @@\n-Node* PhaseVector::expand_vbox_alloc_node(VectorBoxNode* vec_box,\n-                                          VectorBoxAllocateNode* vbox_alloc,\n+Node* PhaseVector::expand_vbox_alloc_node(VectorBoxAllocateNode* vbox_alloc,\n+                                          Node* vect,\n@@ -289,0 +288,1 @@\n+  PhaseGVN& gvn = kit.gvn();\n@@ -291,4 +291,18 @@\n-  const TypeKlassPtr* klass_type = box_type->as_klass_type();\n-  Node* klass_node = kit.makecon(klass_type);\n-  Node* buffer_mem = kit.new_instance(klass_node, NULL, NULL, \/* deoptimize_on_exception *\/ true);\n-  vec_box->store(&kit, buffer_mem, buffer_mem, vk);\n+\n+  \/\/ Re-generate an InlineTypeNode to represent the payload field. This is necessary\n+  \/\/ in case the input \"vect\" is not the original vector value when creating the\n+  \/\/ VectorBox (e.g. original vector value is a PhiNode).\n+  ciInlineKlass* payload = vk->declared_nonstatic_field_at(0)->type()->as_inline_klass();\n+  Node* payload_value = InlineTypeNode::make_uninitialized(gvn, payload, true);\n+  payload_value->as_InlineType()->set_field_value(0, vect);\n+  payload_value = gvn.transform(payload_value);\n+\n+  \/\/ Re-generate an InlineTypeNode to represent the vector object. New a buffer\n+  \/\/ and save its field value to the buffer.\n+  InlineTypeNode* vector = InlineTypeNode::make_uninitialized(gvn, vk, false);\n+  vector->set_field_value(0, payload_value);\n+  vector = gvn.transform(vector)->as_InlineType();\n+\n+  Node* klass_node = kit.makecon(TypeKlassPtr::make(vk));\n+  Node* alloc_oop  = kit.new_instance(klass_node, NULL, NULL, \/* deoptimize_on_exception *\/ true, vector);\n+  vector->store(&kit, alloc_oop, alloc_oop, vk);\n@@ -298,1 +312,1 @@\n-  kit.replace_call(vbox_alloc, buffer_mem, true);\n+  kit.replace_call(vbox_alloc, alloc_oop, true);\n@@ -300,1 +314,1 @@\n-  return buffer_mem;\n+  return alloc_oop;\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":28,"deletions":14,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n-  Node* expand_vbox_node_helper(VectorBoxNode* vec_box,\n-                                Node* vbox_alloc,\n+  Node* expand_vbox_node_helper(Node* vbox_alloc,\n@@ -46,2 +45,2 @@\n-  Node* expand_vbox_alloc_node(VectorBoxNode* vec_box,\n-                               VectorBoxAllocateNode* vbox_alloc,\n+  Node* expand_vbox_alloc_node(VectorBoxAllocateNode* vbox_alloc,\n+                               Node* vect,\n","filename":"src\/hotspot\/share\/opto\/vector.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}