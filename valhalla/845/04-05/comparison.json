{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2560,1 +2560,11 @@\n-        if (n == NULL) {\n+        \/\/ FIXME: Skipping pushing VectorBox across Phi\n+        \/\/ since they are special type of InlineTypeNode\n+        \/\/ carrying VBA as oop fields.\n+        \/\/ We have a seperate handling for pushing VectorBoxes\n+        \/\/ across PhiNodes in merge_through_phi.\n+        \/\/ In long run we should eliminate VectorBox which is\n+        \/\/ just a light weight wrapper of InlineTypeNode.\n+        \/\/ Only reason to keep VectorBox was to defer buffering\n+        \/\/ to a later stage and associate VBA which carry\n+        \/\/ JVM state to reinitialize GraphKit before buffering.\n+        if (n == NULL || n->Opcode() == Op_VectorBox) {\n@@ -2574,1 +2584,1 @@\n-        if (n->is_InlineType() && !n->is_VectorBox() && (vk == NULL || vk == t->inline_klass())) {\n+        if (n->is_InlineType() && (vk == NULL || vk == t->inline_klass())) {\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -154,0 +154,1 @@\n+  assert(this->Opcode() == other->Opcode(), \"\");\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2320,0 +2320,4 @@\n+      \/\/ FIXME: Larval bit check is needed to preserve the semantics of value\n+      \/\/ objects which can be mutated only if its _larval bit is set. Since\n+      \/\/ the oop is not always an AllocateNode, we have to find an utility way\n+      \/\/ to check the larval state for all kind of oops.\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}