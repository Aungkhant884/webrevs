{"files":[{"patch":"@@ -2039,7 +2039,2 @@\n-  {\n-    __ cmpptr(left, (int32_t)NULL_WORD);\n-    __ jcc(Assembler::equal, L_oops_not_equal);\n-\n-    __ cmpptr(right, (int32_t)NULL_WORD);\n-    __ jcc(Assembler::equal, L_oops_not_equal);\n-  }\n+  __ testptr(left, right);\n+  __ jcc(Assembler::zero, L_oops_not_equal);\n@@ -2057,2 +2052,2 @@\n-    __ andl(tmp1, Address(left, oopDesc::mark_offset_in_bytes()));\n-    __ andl(tmp1, Address(right, oopDesc::mark_offset_in_bytes()));\n+    __ andptr(tmp1, Address(left, oopDesc::mark_offset_in_bytes()));\n+    __ andptr(tmp1, Address(right, oopDesc::mark_offset_in_bytes()));\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -745,1 +745,2 @@\n-  void andptr(Register src1, Register src2) { LP64_ONLY(andq(src1, src2)) NOT_LP64(andl(src1, src2)) ; }\n+  void andptr(Register dst, Register src) { LP64_ONLY(andq(dst, src)) NOT_LP64(andl(dst, src)) ; }\n+  void andptr(Register dst, Address src) { LP64_ONLY(andq(dst, src)) NOT_LP64(andl(dst, src)) ; }\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}