{"files":[{"patch":"@@ -500,9 +500,23 @@\n-  ciMethod* method = compilation()->method();\n-  if (InlineTypeReturnedAsFields && method->return_type()->is_inlinetype()) {\n-    ciInlineKlass* vk = method->return_type()->as_inline_klass();\n-    if (vk->can_be_returned_as_fields()) {\n-      address unpack_handler = vk->unpack_handler();\n-      assert(unpack_handler != NULL, \"must be\");\n-      __ far_call(RuntimeAddress(unpack_handler));\n-      \/\/ At this point, r0 points to the value object (for interpreter or C1 caller).\n-      \/\/ The fields of the object are copied into registers (for C2 caller).\n+  if (InlineTypeReturnedAsFields) {\n+    \/\/ Check if we are returning an non-null inline type and load its fields into registers\n+    ciType* return_type = compilation()->method()->return_type();\n+    if (return_type->is_inlinetype()) {\n+      ciInlineKlass* vk = return_type->as_inline_klass();\n+      if (vk->can_be_returned_as_fields()) {\n+        address unpack_handler = vk->unpack_handler();\n+        assert(unpack_handler != NULL, \"must be\");\n+        __ far_call(RuntimeAddress(unpack_handler));\n+      }\n+    } else if (return_type->is_instance_klass() && (!return_type->is_loaded() || StressCallingConvention)) {\n+      Label skip;\n+      __ test_oop_is_not_inline_type(r0, rscratch2, skip);\n+\n+      \/\/ Load fields from a buffered value with an inline class specific handler\n+      __ load_klass(rscratch1 \/*dst*\/, r0 \/*src*\/);\n+      __ ldr(rscratch1, Address(rscratch1, InstanceKlass::adr_inlineklass_fixed_block_offset()));\n+      __ ldr(rscratch1, Address(rscratch1, InlineKlass::unpack_handler_offset()));\n+      \/\/ Unpack handler can be null if inline type is not scalarizable in returns\n+      __ cbz(rscratch1, skip);\n+      __ blr(rscratch1);\n+\n+      __ bind(skip);\n@@ -510,0 +524,2 @@\n+    \/\/ At this point, r0 points to the value object (for interpreter or C1 caller).\n+    \/\/ The fields of the object are copied into registers (for C2 caller).\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -364,2 +364,2 @@\n-  GrowableArray<SigEntry>* sig    = &ces->sig();\n-  GrowableArray<SigEntry>* sig_cc = is_inline_ro_entry ? &ces->sig_cc_ro() : &ces->sig_cc();\n+  GrowableArray<SigEntry>* sig    = ces->sig();\n+  GrowableArray<SigEntry>* sig_cc = is_inline_ro_entry ? ces->sig_cc_ro() : ces->sig_cc();\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -780,1 +780,0 @@\n-\n@@ -795,2 +794,2 @@\n-    if (StressInlineTypeReturnedAsFields) {\n-      \/\/ TODO 8284443 Enable this for value class returns (L-type descriptor)\n+    \/\/ TODO 8284443 Enable\n+    if (StressCallingConvention && false) {\n@@ -799,4 +798,3 @@\n-      ldr(rscratch1, Address(rscratch1, Method::const_offset()));\n-      ldrb(rscratch1, Address(rscratch1, ConstMethod::result_type_offset()));\n-      cmpw(rscratch1, (u1) T_PRIMITIVE_OBJECT);\n-      br(Assembler::NE, skip_stress);\n+      ldrw(rscratch1, Address(rscratch1, Method::flags_offset()));\n+      tstw(rscratch1, Method::scalarized_return_flag());\n+      br(Assembler::EQ, skip_stress);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -521,14 +521,27 @@\n-\n-  ciMethod* method = compilation()->method();\n-  if (InlineTypeReturnedAsFields && method->return_type()->is_inlinetype()) {\n-    ciInlineKlass* vk = method->return_type()->as_inline_klass();\n-    if (vk->can_be_returned_as_fields()) {\n-#ifndef _LP64\n-      Unimplemented();\n-#else\n-      address unpack_handler = vk->unpack_handler();\n-      assert(unpack_handler != NULL, \"must be\");\n-      __ call(RuntimeAddress(unpack_handler));\n-      \/\/ At this point, rax points to the value object (for interpreter or C1 caller).\n-      \/\/ The fields of the object are copied into registers (for C2 caller).\n-#endif\n+  if (InlineTypeReturnedAsFields) {\n+  #ifndef _LP64\n+     Unimplemented();\n+  #endif\n+    \/\/ Check if we are returning an non-null inline type and load its fields into registers\n+    ciType* return_type = compilation()->method()->return_type();\n+    if (return_type->is_inlinetype()) {\n+      ciInlineKlass* vk = return_type->as_inline_klass();\n+      if (vk->can_be_returned_as_fields()) {\n+        address unpack_handler = vk->unpack_handler();\n+        assert(unpack_handler != NULL, \"must be\");\n+        __ call(RuntimeAddress(unpack_handler));\n+      }\n+    } else if (return_type->is_instance_klass() && (!return_type->is_loaded() || StressCallingConvention)) {\n+      Label skip;\n+      __ test_oop_is_not_inline_type(rax, rscratch1, skip);\n+\n+      \/\/ Load fields from a buffered value with an inline class specific handler\n+      __ load_klass(rdi, rax, rscratch1);\n+      __ movptr(rdi, Address(rdi, InstanceKlass::adr_inlineklass_fixed_block_offset()));\n+      __ movptr(rdi, Address(rdi, InlineKlass::unpack_handler_offset()));\n+      \/\/ Unpack handler can be null if inline type is not scalarizable in returns\n+      __ testptr(rdi, rdi);\n+      __ jcc(Assembler::zero, skip);\n+      __ call(rdi);\n+\n+      __ bind(skip);\n@@ -536,0 +549,2 @@\n+    \/\/ At this point, rax points to the value object (for interpreter or C1 caller).\n+    \/\/ The fields of the object are copied into registers (for C2 caller).\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -382,2 +382,2 @@\n-  GrowableArray<SigEntry>* sig    = &ces->sig();\n-  GrowableArray<SigEntry>* sig_cc = is_inline_ro_entry ? &ces->sig_cc_ro() : &ces->sig_cc();\n+  GrowableArray<SigEntry>* sig    = ces->sig();\n+  GrowableArray<SigEntry>* sig_cc = is_inline_ro_entry ? ces->sig_cc_ro() : ces->sig_cc();\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1195,2 +1195,2 @@\n-    if (StressInlineTypeReturnedAsFields) {\n-      \/\/ TODO 8284443 Enable this for value class returns (L-type descriptor)\n+    \/\/ TODO 8284443 Enable\n+    if (StressCallingConvention && false) {\n@@ -1199,4 +1199,3 @@\n-      movptr(rscratch1, Address(rscratch1, Method::const_offset()));\n-      load_unsigned_byte(rscratch1, Address(rscratch1, ConstMethod::result_type_offset()));\n-      cmpl(rscratch1, T_PRIMITIVE_OBJECT);\n-      jcc(Assembler::notEqual, skip_stress);\n+      movl(rscratch1, Address(rscratch1, Method::flags_offset()));\n+      testl(rcx, Method::scalarized_return_flag());\n+      jcc(Assembler::zero, skip_stress);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -601,0 +601,1 @@\n+    \/\/ TODO 8284443 Should only be computed once\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1098,2 +1098,2 @@\n-               (method()->is_method_handle_intrinsic() ||\n-                (!return_type->is_loaded() && !method()->holder()->is_loaded()))) {\n+               (method()->is_method_handle_intrinsic() || !return_type->is_loaded() ||\n+                StressCallingConvention)) {\n@@ -1101,7 +1101,7 @@\n-      \/\/ This can happen with method handle intrinsics or when both the return type\n-      \/\/ and the method holder are unloaded (and therefore the preload logic did not\n-      \/\/ get a chance to load the return type). If an inline type is returned, we\n-      \/\/ either get an oop to a buffer and nothing needs to be done or one of the\n-      \/\/ values being returned is the klass of the inline type (RAX on x64, with LSB\n-      \/\/ set to 1) and we need to allocate an inline type instance of that type and\n-      \/\/ initialize it with other values being returned (in other registers).\n+      \/\/ This can happen with method handle intrinsics or when the return type is\n+      \/\/ not loaded (method holder is not loaded or preload attribute is missing).\n+      \/\/ If an inline type is returned, we either get an oop to a buffer and nothing\n+      \/\/ needs to be done or one of the values being returned is the klass of the\n+      \/\/ inline type (RAX on x64, with LSB set to 1) and we need to allocate an inline\n+      \/\/ type instance of that type and initialize it with the fields values being\n+      \/\/ returned in other registers.\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -770,1 +770,11 @@\n-        do_null_assert(return_type->as_klass());\n+        if (InlineTypeReturnedAsFields) {\n+          \/\/ Return might be in scalarized form but we can't handle it because we\n+          \/\/ don't know the type. This can happen due to a missing preload attribute.\n+          \/\/ TODO 8284443 Use PhaseMacroExpand::expand_mh_intrinsic_return for this\n+          trap(str, NULL,\n+               Deoptimization::make_trap_request\n+               (Deoptimization::Reason_uninitialized,\n+                Deoptimization::Action_reinterpret));\n+        } else {\n+          do_null_assert(return_type->as_klass());\n+        }\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -637,0 +637,1 @@\n+  assert(!m->mismatch(), \"Mismatch for static call\");\n@@ -652,1 +653,0 @@\n-\n","filename":"src\/hotspot\/share\/code\/compiledIC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1705,1 +1705,2 @@\n-      || m->number_of_breakpoints() > 0) {\n+      || m->number_of_breakpoints() > 0\n+      || m->mismatch()) {\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3068,1 +3068,1 @@\n-  ces.compute_calling_conventions();\n+  ces.compute_calling_conventions(false);\n@@ -3072,1 +3072,1 @@\n-    sig_cc = &ces.sig_cc();\n+    sig_cc = ces.sig_cc();\n@@ -3075,1 +3075,1 @@\n-    sig_cc = &ces.sig();\n+    sig_cc = ces.sig();\n@@ -3078,1 +3078,1 @@\n-    sig_cc = &ces.sig_cc_ro();\n+    sig_cc = ces.sig_cc_ro();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+    _mismatch               = 1 << 14\n@@ -934,0 +935,4 @@\n+  static u2 scalarized_return_flag() {\n+    return _scalarized_return;\n+  }\n+\n@@ -936,1 +941,1 @@\n-  bool c1_needs_stack_repair() {\n+  bool c1_needs_stack_repair() const {\n@@ -940,1 +945,1 @@\n-  bool c2_needs_stack_repair() {\n+  bool c2_needs_stack_repair() const {\n@@ -952,0 +957,8 @@\n+  bool mismatch() const {\n+    return (_flags & _mismatch) != 0;\n+  }\n+\n+  void set_mismatch(bool x) {\n+    _flags = x ? (_flags | _mismatch) : (_flags & ~_mismatch);\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -713,1 +713,1 @@\n-      if (t->is_inlinetypeptr() && method()->is_scalarized_arg(arg_num)) {\n+      if (t->is_inlinetypeptr() && !method()->get_Method()->mismatch() && method()->is_scalarized_arg(arg_num)) {\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -779,1 +779,1 @@\n-    if (rtype->basic_type() == T_PRIMITIVE_OBJECT && !peek()->is_InlineType()) {\n+    if (rtype->is_inlinetype() && !peek()->is_InlineType()) {\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1839,1 +1839,2 @@\n-    if (t->is_inlinetypeptr() && call->method()->is_scalarized_arg(arg_num)) {\n+    \/\/ TODO 8284443 A static call to a mismatched method should still be scalarized\n+    if (t->is_inlinetypeptr() && !call->method()->get_Method()->mismatch() && call->method()->is_scalarized_arg(arg_num)) {\n@@ -1851,0 +1852,3 @@\n+      \/\/ Register an evol dependency on the callee method to make sure that this method is deoptimized and\n+      \/\/ re-compiled with a non-scalarized calling convention if the callee method is later marked as mismatched.\n+      C->dependencies()->assert_evol_method(call->method());\n@@ -1926,0 +1930,3 @@\n+    if (call->method()->return_type()->is_inlinetype()) {\n+      ret = InlineTypeNode::make_from_oop(this, ret, call->method()->return_type()->as_inline_klass(), call->method()->signature()->returns_null_free_inline_type());\n+    }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -706,0 +706,4 @@\n+      if (inp->isa_InlineType()) {\n+        \/\/ TODO 8302217 This prevents PhiNode::push_inline_types_through\n+        return NULL;\n+      }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2455,1 +2455,1 @@\n-\/\/ or one of the inlines being returned is the klass of the inline type\n+\/\/ or one of the values being returned is the klass of the inline type\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -924,1 +924,1 @@\n-      if (vt->is_allocated(&kit.gvn()) && !StressInlineTypeReturnedAsFields) {\n+      if (vt->is_allocated(&kit.gvn()) && !StressCallingConvention) {\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6934,0 +6934,4 @@\n+  \/\/ Fall back to the non-scalarized calling convention when compiling a call via a mismatching method\n+  if (method != C->method() && method->get_Method()->mismatch()) {\n+    has_scalar_args = false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2005,2 +2005,2 @@\n-  develop(bool, StressInlineTypeReturnedAsFields, false,                    \\\n-          \"Stress return of fields instead of an inline type reference\")    \\\n+  develop(bool, StressCallingConvention, false,                             \\\n+          \"Stress the scalarized calling convention.\")                      \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1270,5 +1270,0 @@\n-    bool caller_is_c1 = false;\n-\n-    if (callerFrame.is_compiled_frame()) {\n-      caller_is_c1 = callerFrame.cb()->is_compiled_by_c1();\n-    }\n@@ -1283,0 +1278,1 @@\n+    bool caller_is_c1 = callerFrame.is_compiled_frame() && callerFrame.cb()->is_compiled_by_c1();\n@@ -1286,0 +1282,1 @@\n+      assert(!callee->mismatch(), \"calls with inline type receivers should never mismatch\");\n@@ -1341,1 +1338,1 @@\n-methodHandle SharedRuntime::find_callee_method(TRAPS) {\n+methodHandle SharedRuntime::find_callee_method(bool is_optimized, bool& caller_is_c1, TRAPS) {\n@@ -1367,0 +1364,4 @@\n+    \/\/ Calls via mismatching methods are always non-scalarized\n+    if (callinfo.resolved_method()->mismatch() && !is_optimized) {\n+      caller_is_c1 = true;\n+    }\n@@ -1374,1 +1375,1 @@\n-methodHandle SharedRuntime::resolve_helper(bool is_virtual, bool is_optimized, bool* caller_is_c1, TRAPS) {\n+methodHandle SharedRuntime::resolve_helper(bool is_virtual, bool is_optimized, bool& caller_is_c1, TRAPS) {\n@@ -1401,1 +1402,1 @@\n-                                                CompiledMethod* caller_nm, bool is_virtual, bool is_optimized,\n+                                                CompiledMethod* caller_nm, bool is_virtual, bool is_optimized, bool& caller_is_c1,\n@@ -1423,1 +1424,0 @@\n-  bool caller_is_c1 = caller_nm->is_compiled_by_c1();\n@@ -1493,1 +1493,1 @@\n-methodHandle SharedRuntime::resolve_sub_helper(bool is_virtual, bool is_optimized, bool* caller_is_c1, TRAPS) {\n+methodHandle SharedRuntime::resolve_sub_helper(bool is_virtual, bool is_optimized, bool& caller_is_c1, TRAPS) {\n@@ -1505,1 +1505,0 @@\n-  *caller_is_c1 = caller_nm->is_compiled_by_c1();\n@@ -1514,0 +1513,4 @@\n+  \/\/ Calls via mismatching methods are always non-scalarized\n+  if (caller_nm->is_compiled_by_c1() || (call_info.resolved_method()->mismatch() && !is_optimized)) {\n+    caller_is_c1 = true;\n+  }\n@@ -1578,1 +1581,1 @@\n-                                                  is_virtual, is_optimized, receiver,\n+                                                  is_virtual, is_optimized, caller_is_c1, receiver,\n@@ -1713,1 +1716,1 @@\n-  bool caller_is_c1;\n+  bool caller_is_c1 = false;\n@@ -1716,1 +1719,1 @@\n-    callee_method = SharedRuntime::resolve_helper(false, false, &caller_is_c1, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(false, false, caller_is_c1, CHECK_NULL);\n@@ -1754,1 +1757,1 @@\n-  bool caller_is_c1;\n+  bool caller_is_c1 = false;\n@@ -1756,1 +1759,1 @@\n-    callee_method = SharedRuntime::resolve_helper(true, false, &caller_is_c1, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(true, false, caller_is_c1, CHECK_NULL);\n@@ -1771,1 +1774,1 @@\n-  bool caller_is_c1;\n+  bool caller_is_c1 = false;\n@@ -1773,1 +1776,1 @@\n-    callee_method = SharedRuntime::resolve_helper(true, true, &caller_is_c1, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(true, true, caller_is_c1, CHECK_NULL);\n@@ -1840,1 +1843,1 @@\n-                                            caller_nm->is_compiled_by_c1(),\n+                                            caller_is_c1,\n@@ -1946,1 +1949,4 @@\n-  caller_is_c1 = caller_nm->is_compiled_by_c1();\n+  \/\/ Calls via mismatching methods are always non-scalarized\n+  if (caller_nm->is_compiled_by_c1() || call_info.resolved_method()->mismatch()) {\n+    caller_is_c1 = true;\n+  }\n@@ -2076,1 +2082,1 @@\n-  methodHandle callee_method = find_callee_method(CHECK_(methodHandle()));\n+  methodHandle callee_method = find_callee_method(is_optimized, caller_is_c1, CHECK_(methodHandle()));\n@@ -2873,1 +2879,1 @@\n-    SigEntry::add_entry(&obj_args.sig(), T_OBJECT, NULL);\n+    SigEntry::add_entry(obj_args.sig(), T_OBJECT, NULL);\n@@ -2878,1 +2884,1 @@\n-    SigEntry::add_entry(&int_args.sig(), T_INT, NULL);\n+    SigEntry::add_entry(int_args.sig(), T_INT, NULL);\n@@ -2883,2 +2889,2 @@\n-    SigEntry::add_entry(&obj_int_args.sig(), T_OBJECT, NULL);\n-    SigEntry::add_entry(&obj_int_args.sig(), T_INT, NULL);\n+    SigEntry::add_entry(obj_int_args.sig(), T_OBJECT, NULL);\n+    SigEntry::add_entry(obj_int_args.sig(), T_INT, NULL);\n@@ -2889,2 +2895,2 @@\n-    SigEntry::add_entry(&obj_obj_args.sig(), T_OBJECT, NULL);\n-    SigEntry::add_entry(&obj_obj_args.sig(), T_OBJECT, NULL);\n+    SigEntry::add_entry(obj_obj_args.sig(), T_OBJECT, NULL);\n+    SigEntry::add_entry(obj_obj_args.sig(), T_OBJECT, NULL);\n@@ -2986,1 +2992,1 @@\n-  _c1_needs_stack_repair(false), _c2_needs_stack_repair(false) {\n+  _c1_needs_stack_repair(false), _c2_needs_stack_repair(false), _supers(nullptr) {\n@@ -3031,0 +3037,44 @@\n+\/\/ Returns all super methods (transitive) in classes and interfaces that are overridden by the current method.\n+GrowableArray<Method*>* CompiledEntrySignature::get_supers() {\n+  if (_supers != nullptr) {\n+    return _supers;\n+  }\n+  _supers = new GrowableArray<Method*>();\n+  \/\/ Skip private, static, and <init> methods\n+  if (_method->is_private() || _method->is_static() || _method->is_object_constructor()) {\n+    return _supers;\n+  }\n+  Symbol* name = _method->name();\n+  Symbol* signature = _method->signature();\n+  const Klass* holder = _method->method_holder()->super();\n+  Symbol* holder_name = holder->name();\n+  ThreadInVMfromUnknown tiv;\n+  JavaThread* current = JavaThread::current();\n+  HandleMark hm(current);\n+  Handle loader(current, _method->method_holder()->class_loader());\n+\n+  \/\/ Walk up the class hierarchy and search for super methods\n+  while (holder != NULL) {\n+    Method* super_method = holder->lookup_method(name, signature);\n+    if (super_method == NULL) {\n+      break;\n+    }\n+    if (!super_method->is_static() && !super_method->is_private() &&\n+        (!super_method->is_package_private() ||\n+         super_method->method_holder()->is_same_class_package(loader(), holder_name))) {\n+      _supers->push(super_method);\n+    }\n+    holder = super_method->method_holder()->super();\n+  }\n+  \/\/ Search interfaces for super methods\n+  Array<InstanceKlass*>* interfaces = _method->method_holder()->transitive_interfaces();\n+  for (int i = 0; i < interfaces->length(); ++i) {\n+    Method* m = interfaces->at(i)->lookup_method(name, signature);\n+    if (m != NULL && !m->is_static() && m->is_public()) {\n+      _supers->push(m);\n+    }\n+  }\n+  return _supers;\n+}\n+\n+\/\/ Iterate over arguments and compute scalarized and non-scalarized signatures\n@@ -3032,1 +3082,0 @@\n-  \/\/ Iterate over arguments and compute scalarized and non-scalarized signatures\n@@ -3055,1 +3104,0 @@\n-        \/\/ TODO 8301007 Mismatch handling, we need to check parent method args (look at klassVtable::needs_new_vtable_entry)\n@@ -3057,10 +3105,54 @@\n-          _num_inline_args++;\n-          has_scalarized = true;\n-          int last = _sig_cc->length();\n-          int last_ro = _sig_cc_ro->length();\n-          _sig_cc->appendAll(vk->extended_sig());\n-          _sig_cc_ro->appendAll(vk->extended_sig());\n-          if (bt == T_OBJECT) {\n-            \/\/ Nullable inline type argument, insert InlineTypeNode::IsInit field right after T_PRIMITIVE_OBJECT\n-            _sig_cc->insert_before(last+1, SigEntry(T_BOOLEAN, -1, NULL));\n-            _sig_cc_ro->insert_before(last_ro+1, SigEntry(T_BOOLEAN, -1, NULL));\n+          \/\/ Check for a calling convention mismatch with super method(s)\n+          bool scalar_super = false;\n+          bool non_scalar_super = false;\n+          GrowableArray<Method*>* supers = get_supers();\n+          for (int i = 0; i < supers->length(); ++i) {\n+            Method* super_method = supers->at(i);\n+            if (super_method->is_scalarized_arg(arg_num)) {\n+              scalar_super = true;\n+            } else {\n+              non_scalar_super = true;\n+            }\n+          }\n+#ifdef ASSERT\n+          \/\/ Randomly enable below code paths for stress testing\n+          bool stress = init && StressCallingConvention;\n+          if (stress && (os::random() & 1) == 1) {\n+            non_scalar_super = true;\n+            if ((os::random() & 1) == 1) {\n+              scalar_super = true;\n+            }\n+          }\n+#endif\n+          if (non_scalar_super) {\n+            \/\/ Found a super method with a non-scalarized argument. Fall back to the non-scalarized calling convention.\n+            if (scalar_super) {\n+              \/\/ Found non-scalar *and* scalar super methods. We can't handle both.\n+              \/\/ Mark the scalar method as mismatch and re-compile call sites to use non-scalarized calling convention.\n+              for (int i = 0; i < supers->length(); ++i) {\n+                Method* super_method = supers->at(i);\n+                if (super_method->is_scalarized_arg(arg_num) debug_only(|| (stress && (os::random() & 1) == 1))) {\n+                  super_method->set_mismatch(true);\n+                  MutexLocker ml(Compile_lock, Mutex::_safepoint_check_flag);\n+                  JavaThread* thread = JavaThread::current();\n+                  HandleMark hm(thread);\n+                  methodHandle mh(thread, super_method);\n+                  CodeCache::flush_dependents_on_method(mh);\n+                }\n+              }\n+            }\n+            \/\/ Fall back to non-scalarized calling convention\n+            SigEntry::add_entry(_sig_cc, T_OBJECT, ss.as_symbol());\n+            SigEntry::add_entry(_sig_cc_ro, T_OBJECT, ss.as_symbol());\n+          } else {\n+            _num_inline_args++;\n+            has_scalarized = true;\n+            int last = _sig_cc->length();\n+            int last_ro = _sig_cc_ro->length();\n+            _sig_cc->appendAll(vk->extended_sig());\n+            _sig_cc_ro->appendAll(vk->extended_sig());\n+            if (bt == T_OBJECT) {\n+              \/\/ Nullable inline type argument, insert InlineTypeNode::IsInit field right after T_PRIMITIVE_OBJECT\n+              _sig_cc->insert_before(last+1, SigEntry(T_BOOLEAN, -1, NULL));\n+              _sig_cc_ro->insert_before(last_ro+1, SigEntry(T_BOOLEAN, -1, NULL));\n+            }\n@@ -3152,2 +3244,2 @@\n-      GrowableArray<SigEntry>* heap_sig = new (mtInternal) GrowableArray<SigEntry>(ces.sig_cc_ro().length(), mtInternal);\n-      heap_sig->appendAll(&ces.sig_cc_ro());\n+      GrowableArray<SigEntry>* heap_sig = new (mtInternal) GrowableArray<SigEntry>(ces.sig_cc_ro()->length(), mtInternal);\n+      heap_sig->appendAll(ces.sig_cc_ro());\n@@ -3159,1 +3251,1 @@\n-    entry = lookup(&ces.sig_cc(), ces.has_inline_recv());\n+    entry = lookup(ces.sig_cc(), ces.has_inline_recv());\n@@ -3202,1 +3294,1 @@\n-  AdapterFingerPrint* fingerprint = new AdapterFingerPrint(&ces.sig_cc(), ces.has_inline_recv());\n+  AdapterFingerPrint* fingerprint = new AdapterFingerPrint(ces.sig_cc(), ces.has_inline_recv());\n@@ -3206,1 +3298,1 @@\n-                                                &ces.sig(),\n+                                                ces.sig(),\n@@ -3208,1 +3300,1 @@\n-                                                &ces.sig_cc(),\n+                                                ces.sig_cc(),\n@@ -3210,1 +3302,1 @@\n-                                                &ces.sig_cc_ro(),\n+                                                ces.sig_cc_ro(),\n@@ -3218,2 +3310,2 @@\n-    GrowableArray<SigEntry>* heap_sig = new (mtInternal) GrowableArray<SigEntry>(ces.sig_cc().length(), mtInternal);\n-    heap_sig->appendAll(&ces.sig_cc());\n+    GrowableArray<SigEntry>* heap_sig = new (mtInternal) GrowableArray<SigEntry>(ces.sig_cc()->length(), mtInternal);\n+    heap_sig->appendAll(ces.sig_cc());\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":141,"deletions":49,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-                                          CompiledMethod* caller_nm, bool is_virtual, bool is_optimized,\n+                                          CompiledMethod* caller_nm, bool is_virtual, bool is_optimized, bool& caller_is_c1,\n@@ -55,1 +55,1 @@\n-  static methodHandle resolve_sub_helper(bool is_virtual, bool is_optimized, bool* caller_is_c1, TRAPS);\n+  static methodHandle resolve_sub_helper(bool is_virtual, bool is_optimized, bool& caller_is_c1, TRAPS);\n@@ -323,1 +323,1 @@\n-  static methodHandle resolve_helper(bool is_virtual, bool is_optimized, bool* caller_is_c1, TRAPS);\n+  static methodHandle resolve_helper(bool is_virtual, bool is_optimized, bool& caller_is_c1, TRAPS);\n@@ -344,1 +344,1 @@\n-  static methodHandle find_callee_method(TRAPS);\n+  static methodHandle find_callee_method(bool is_optimized, bool& caller_is_c1, TRAPS);\n@@ -760,3 +760,3 @@\n-  GrowableArray<SigEntry> *_sig;\n-  GrowableArray<SigEntry> *_sig_cc;\n-  GrowableArray<SigEntry> *_sig_cc_ro;\n+  GrowableArray<SigEntry>* _sig;\n+  GrowableArray<SigEntry>* _sig_cc;\n+  GrowableArray<SigEntry>* _sig_cc_ro;\n@@ -774,0 +774,2 @@\n+  GrowableArray<Method*>* _supers;\n+\n@@ -778,1 +780,1 @@\n-  GrowableArray<SigEntry>& sig()       const { return *_sig; }\n+  GrowableArray<SigEntry>* sig()       const { return _sig; }\n@@ -781,1 +783,1 @@\n-  GrowableArray<SigEntry>& sig_cc()    const { return *_sig_cc; }\n+  GrowableArray<SigEntry>* sig_cc()    const { return _sig_cc; }\n@@ -784,1 +786,1 @@\n-  GrowableArray<SigEntry>& sig_cc_ro() const { return *_sig_cc_ro; }\n+  GrowableArray<SigEntry>* sig_cc_ro() const { return _sig_cc_ro; }\n@@ -802,0 +804,2 @@\n+  GrowableArray<Method*>* get_supers();\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -507,1 +507,1 @@\n-  ThreadInVMfromUnknown __tiv;\n+  ThreadInVMfromUnknown tiv;\n@@ -509,0 +509,1 @@\n+  HandleMark hm(THREAD);\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -189,0 +189,1 @@\n+            \"-XX:-InlineTypeReturnedAsFields\", \/\/ TODO Remove this once 8284443 fixed handling of unloaded return types\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/unloaded\/TestInlineUnloaded.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+        commandLineNormal.add(\"-XX:-InlineTypeReturnedAsFields\"); \/\/ TODO Remove this once 8284443 fixed handling of unloaded return types\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestInliningProtectionDomain.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,209 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8301007\n+ * @key randomness\n+ * @summary Verify that mismatches of the preload attribute are properly handled in the calling convention.\n+ * @library \/test\/lib \/compiler\/whitebox \/\n+ * @compile -XDenablePrimitiveClasses TestMismatchHandling.jcod TestMismatchHandling.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-Inline -XX:-InlineAccessors -XX:-UseBimorphicInlining -XX:-UseCHA -XX:-UseTypeProfile\n+ *                   -XX:CompileCommand=compileonly,TestMismatchHandling::test*\n+ *                   TestMismatchHandling\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-Inline -XX:-InlineAccessors -XX:-UseBimorphicInlining -XX:-UseCHA -XX:-UseTypeProfile\n+ *                   -XX:CompileCommand=compileonly,*::method\n+ *                   TestMismatchHandling\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-Inline -XX:-InlineAccessors -XX:-UseBimorphicInlining -XX:-UseCHA -XX:-UseTypeProfile\n+ *                   TestMismatchHandling\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-Inline -XX:-InlineAccessors -XX:-UseBimorphicInlining -XX:-UseCHA -XX:-UseTypeProfile\n+ *                   -XX:-InlineTypePassFieldsAsArgs\n+ *                   TestMismatchHandling\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-Inline -XX:-InlineAccessors -XX:-UseBimorphicInlining -XX:-UseCHA -XX:-UseTypeProfile\n+ *                   -XX:-InlineTypeReturnedAsFields\n+ *                   TestMismatchHandling\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:+DeoptimizeNMethodBarriersALot\n+ *                   TestMismatchHandling\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   TestMismatchHandling\n+ *\/\n+\n+\/\/ ##################################### WARNING ######################################\n+\/\/ Use below script to re-generate TestMismatchHandling.jcod, don't modify it manually.\n+\/\/ Be careful when changing anything (even the order) in this test and related files.\n+\/\/ ##################################### WARNING ######################################\n+\n+\/*\n+  #!\/bin\/bash\n+  export PATH=\/oracle\/valhalla\/build\/fastdebug\/jdk\/bin\/:$PATH\n+  ASMTOOLS=\/oracle\/valhalla\/open\/test\/lib\n+\n+  # With preload attribute\n+  javac TestMismatchHandlingGenerator.java\n+  java -cp $ASMTOOLS org.openjdk.asmtools.Main jdec MyValue1.class MyValue2.class MyValue3.class MyValue4.class MyValue5.class MyValue6.class MyValue7.class Verifiable.class B.class I3.class I4.class E.class G.class J.class K.class L.class P.class Q.class R.class S.class TestMismatchHandlingHelper.class > TestMismatchHandling.jcod\n+\n+  # Without preload attribute\n+  sed -i 's\/value class MyValue\/class MyValue\/g' TestMismatchHandlingGenerator.java\n+  javac TestMismatchHandlingGenerator.java\n+  java -cp $ASMTOOLS org.openjdk.asmtools.Main jdec A.class C.class I1.class I2.class D.class F.class H.class I5.class M.class N.class O.class I6.class P.class >> TestMismatchHandling.jcod\n+\n+  sed -i 's\/class MyValue\/value class MyValue\/g' TestMismatchHandlingGenerator.java\n+*\/\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class TestMismatchHandling {\n+    public static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    public static void main(String[] args) throws Exception {\n+        M m = new M();\n+        \/\/ Make sure M::method is C1 compiled once with unloaded MyValue4 and not re-compiled\n+        for (int i = 0; i < 1000; ++i) {\n+            TestMismatchHandlingHelper.test4(m, true);\n+        }\n+        Method disable = M.class.getDeclaredMethod(\"method\", boolean.class);\n+        WHITE_BOX.makeMethodNotCompilable(disable, 1, false);\n+        WHITE_BOX.makeMethodNotCompilable(disable, 2, false);\n+        WHITE_BOX.makeMethodNotCompilable(disable, 3, false);\n+        WHITE_BOX.makeMethodNotCompilable(disable, 4, false);\n+\n+        \/\/ Sometimes, exclude some methods from compilation with C2 to stress test the calling convention\n+        \/\/ WARNING: This triggers class loading of argument\/return types of all methods!\n+        if (Utils.getRandomInstance().nextBoolean()) {\n+            ArrayList<Method> methods = new ArrayList<Method>();\n+            Collections.addAll(methods, TestMismatchHandlingHelper.class.getDeclaredMethods());\n+            Collections.addAll(methods, A.class.getDeclaredMethods());\n+            Collections.addAll(methods, B.class.getDeclaredMethods());\n+            Collections.addAll(methods, C.class.getDeclaredMethods());\n+            Collections.addAll(methods, E.class.getDeclaredMethods());\n+            Collections.addAll(methods, F.class.getDeclaredMethods());\n+            Collections.addAll(methods, G.class.getDeclaredMethods());\n+            Collections.addAll(methods, H.class.getDeclaredMethods());\n+            Collections.addAll(methods, J.class.getDeclaredMethods());\n+            Collections.addAll(methods, K.class.getDeclaredMethods());\n+            Collections.addAll(methods, L.class.getDeclaredMethods());\n+            \/\/ Don't do this because it would load MyValue5\n+            \/\/ Collections.addAll(methods, N.class.getDeclaredMethods());\n+            System.out.println(\"Excluding methods from C2 compilation:\");\n+            for (Method method : methods) {\n+                if (Utils.getRandomInstance().nextBoolean()) {\n+                    System.out.println(method);\n+                    WHITE_BOX.makeMethodNotCompilable(method, 4, false);\n+                }\n+            }\n+        }\n+\n+        A a = new A();\n+        B b = new B();\n+        C c = new C();\n+        D d = new D();\n+        E e = new E();\n+        H h = new H();\n+        J j = new J();\n+        K k = new K();\n+        N n = new N();\n+        O o = new O();\n+        P p = new P();\n+        Q q = new Q();\n+        R r = new R();\n+\n+        \/\/ Warmup\n+        for (int i = 0; i < 50_000; ++i) {\n+            TestMismatchHandlingHelper.test1(a, a, a, b, c, b, b, c);\n+            TestMismatchHandlingHelper.test1(b, a, a, b, c, b, b, c);\n+            TestMismatchHandlingHelper.test1(c, b, a, b, c, c, b, c);\n+            TestMismatchHandlingHelper.test2(d, d, d, d, d, d,  d, d, d, d, d, d,  e, e, e, e, e, e,  e, e, e, e, e, e,  d, e);\n+            TestMismatchHandlingHelper.test2(d, d, d, d, d, d,  d, d, d, d, d, d,  e, e, e, e, e, e,  e, e, e, e, e, e,  d, e);\n+            TestMismatchHandlingHelper.test3(h, h, h,  j, k, j, k, j,  h, k);\n+            TestMismatchHandlingHelper.test3(h, h, h,  j, k, j, k, k,  h, k);\n+            TestMismatchHandlingHelper.test4(m, true);\n+            TestMismatchHandlingHelper.test5(n, true);\n+            TestMismatchHandlingHelper.test7(o, true);\n+            TestMismatchHandlingHelper.test8(p, p, p,  q, r, q, r, q,  p, r);\n+            TestMismatchHandlingHelper.test8(p, p, p,  q, r, q, r, r,  p, r);\n+        }\n+\n+        \/\/ Only load these now\n+        F f = new F();\n+        G g = new G();\n+        L l = new L();\n+        S s = new S();\n+\n+        for (int i = 0; i < 50_000; ++i) {\n+            TestMismatchHandlingHelper.test1(a, a, a, b, c, b, b, c);\n+            TestMismatchHandlingHelper.test1(b, a, a, b, c, b, b, c);\n+            TestMismatchHandlingHelper.test1(c, b, a, b, c, c, b, c);\n+            TestMismatchHandlingHelper.test2(d, f, g, d, f, d,  d, f, g, d, f, d,  e, f, g, e, f, g,  e, f, g, e, f, g,  d, e);\n+            TestMismatchHandlingHelper.test2(d, f, g, d, f, f,  d, f, g, d, f, f,  e, f, g, e, f, f,  e, f, g, e, f, f,  d, e);\n+            TestMismatchHandlingHelper.test2(d, f, g, f, g, g,  d, f, g, f, g, g,  e, f, g, f, g, g,  e, f, g, f, g, g,  d, e);\n+            TestMismatchHandlingHelper.test3(h, l, h,  j, k, j, k, j,  h, k);\n+            TestMismatchHandlingHelper.test3(h, l, h,  j, k, k, k, k,  h, k);\n+            TestMismatchHandlingHelper.test3(h, l, l,  j, k, k, l, l,  h, l);\n+            TestMismatchHandlingHelper.test4(m, false);\n+            TestMismatchHandlingHelper.test5(n, false);\n+            TestMismatchHandlingHelper.test6(f, g, l);\n+            TestMismatchHandlingHelper.test7TriggerCalleeCompilation(o);\n+            TestMismatchHandlingHelper.test8(p, s, p,  q, r, q, r, q,  p, r);\n+            TestMismatchHandlingHelper.test8(p, s, p,  q, r, r, r, r,  p, r);\n+            TestMismatchHandlingHelper.test8(p, s, s,  q, r, r, s, s,  p, s);\n+        }\n+        TestMismatchHandlingHelper.test7(o, false).verify();\n+\n+        switch (Utils.getRandomInstance().nextInt() % 3) {\n+        case 0:\n+            TestMismatchHandlingHelper.test2(d, d, d, d, d, d,  d, d, d, d, d, d,  e, e, e, e, e, e,  e, e, e, e, e, e,  d, e);\n+            TestMismatchHandlingHelper.test3(l, h, l,  k, l, l, j, j,  h, l);\n+            TestMismatchHandlingHelper.test8(s, p, s,  r, s, s, q, q,  p, s);\n+            break;\n+        case 1:\n+            TestMismatchHandlingHelper.test2(f, f, f, f, f, f,  f, f, f, f, f, f,  f, f, f, f, f, f,  f, f, f, f, f, f,  d, e);\n+            TestMismatchHandlingHelper.test3(l, h, l,  l, j, j, k, l,  h, l);\n+            TestMismatchHandlingHelper.test8(s, p, s,  s, q, q, r, s,  p, s);\n+            break;\n+        case 2:\n+            TestMismatchHandlingHelper.test2(g, g, g, g, g, g,  g, g, g, g, g, g,  g, g, g, g, g, g,  g, g, g, g, g, g,  d, e);\n+            TestMismatchHandlingHelper.test3(l, h, l,  j, k, k, l, j,  h, l);\n+            TestMismatchHandlingHelper.test8(s, p, s,  q, r, r, s, q,  p, s);\n+            break;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.java","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"},{"patch":"@@ -0,0 +1,3812 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ ##################################### WARNING ########################################\n+\/\/ Generated file, don't modify manually. See TestMismatchHandling.java for instructions.\n+\/\/ ##################################### WARNING ########################################\n+\n+class MyValue1 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue1\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #8\n+    String #10; \/\/ #9\n+    Utf8 \"Verification failed\"; \/\/ #10\n+    Method #7 #12; \/\/ #11\n+    NameAndType #13 #14; \/\/ #12\n+    Utf8 \"<init>\"; \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #14\n+    class #16; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"verify\"; \/\/ #17\n+    Utf8 \"()V\"; \/\/ #18\n+    Utf8 \"Code\"; \/\/ #19\n+    Utf8 \"LineNumberTable\"; \/\/ #20\n+    Utf8 \"StackMapTable\"; \/\/ #21\n+    Utf8 \"<vnew>\"; \/\/ #22\n+    Utf8 \"()LMyValue1;\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #15;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40003102A9F00;\n+            0x0DBB0007591209B7;\n+            0x000BBFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  28;\n+                9  29;\n+                19  31;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#21) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #22; \/\/ name_index\n+      #23; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B102A2A5F;\n+            0xCC00034B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  24;\n+                4  25;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue1\n+class MyValue2 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue2\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #8\n+    String #10; \/\/ #9\n+    Utf8 \"Verification failed\"; \/\/ #10\n+    Method #7 #12; \/\/ #11\n+    NameAndType #13 #14; \/\/ #12\n+    Utf8 \"<init>\"; \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #14\n+    class #16; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"verify\"; \/\/ #17\n+    Utf8 \"()V\"; \/\/ #18\n+    Utf8 \"Code\"; \/\/ #19\n+    Utf8 \"LineNumberTable\"; \/\/ #20\n+    Utf8 \"StackMapTable\"; \/\/ #21\n+    Utf8 \"<vnew>\"; \/\/ #22\n+    Utf8 \"()LMyValue2;\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #15;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40003102A9F00;\n+            0x0DBB0007591209B7;\n+            0x000BBFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  38;\n+                9  39;\n+                19  41;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#21) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #22; \/\/ name_index\n+      #23; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B102A2A5F;\n+            0xCC00034B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  34;\n+                4  35;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue2\n+class MyValue3 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue3\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #8\n+    String #10; \/\/ #9\n+    Utf8 \"Verification failed\"; \/\/ #10\n+    Method #7 #12; \/\/ #11\n+    NameAndType #13 #14; \/\/ #12\n+    Utf8 \"<init>\"; \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #14\n+    class #16; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"verify\"; \/\/ #17\n+    Utf8 \"()V\"; \/\/ #18\n+    Utf8 \"Code\"; \/\/ #19\n+    Utf8 \"LineNumberTable\"; \/\/ #20\n+    Utf8 \"StackMapTable\"; \/\/ #21\n+    Utf8 \"<vnew>\"; \/\/ #22\n+    Utf8 \"()LMyValue3;\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #15;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40003102A9F00;\n+            0x0DBB0007591209B7;\n+            0x000BBFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  48;\n+                9  49;\n+                19  51;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#21) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #22; \/\/ name_index\n+      #23; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B102A2A5F;\n+            0xCC00034B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  44;\n+                4  45;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue3\n+class MyValue4 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue4\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #8\n+    String #10; \/\/ #9\n+    Utf8 \"Verification failed\"; \/\/ #10\n+    Method #7 #12; \/\/ #11\n+    NameAndType #13 #14; \/\/ #12\n+    Utf8 \"<init>\"; \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #14\n+    Method #1 #16; \/\/ #15\n+    NameAndType #17 #18; \/\/ #16\n+    Utf8 \"<vnew>\"; \/\/ #17\n+    Utf8 \"()LMyValue4;\"; \/\/ #18\n+    class #20; \/\/ #19\n+    Utf8 \"java\/lang\/Object\"; \/\/ #20\n+    Utf8 \"verify\"; \/\/ #21\n+    Utf8 \"()V\"; \/\/ #22\n+    Utf8 \"Code\"; \/\/ #23\n+    Utf8 \"LineNumberTable\"; \/\/ #24\n+    Utf8 \"StackMapTable\"; \/\/ #25\n+    Utf8 \"make\"; \/\/ #26\n+    Utf8 \"SourceFile\"; \/\/ #27\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #28\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #19;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #21; \/\/ name_index\n+      #22; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40003102A9F00;\n+            0x0DBB0007591209B7;\n+            0x000BBFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  58;\n+                9  59;\n+                19  61;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#25) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #26; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0xB8000FB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  64;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#23) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B102A2A5F;\n+            0xCC00034B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#24) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  54;\n+                4  55;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#27) { \/\/ SourceFile\n+      #28;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue4\n+class MyValue5 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue5\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #8\n+    String #10; \/\/ #9\n+    Utf8 \"Verification failed\"; \/\/ #10\n+    Method #7 #12; \/\/ #11\n+    NameAndType #13 #14; \/\/ #12\n+    Utf8 \"<init>\"; \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #14\n+    Method #1 #16; \/\/ #15\n+    NameAndType #17 #18; \/\/ #16\n+    Utf8 \"<vnew>\"; \/\/ #17\n+    Utf8 \"()LMyValue5;\"; \/\/ #18\n+    class #20; \/\/ #19\n+    Utf8 \"java\/lang\/Object\"; \/\/ #20\n+    class #22; \/\/ #21\n+    Utf8 \"Verifiable\"; \/\/ #22\n+    Utf8 \"verify\"; \/\/ #23\n+    Utf8 \"()V\"; \/\/ #24\n+    Utf8 \"Code\"; \/\/ #25\n+    Utf8 \"LineNumberTable\"; \/\/ #26\n+    Utf8 \"StackMapTable\"; \/\/ #27\n+    Utf8 \"make\"; \/\/ #28\n+    Utf8 \"SourceFile\"; \/\/ #29\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #30\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #19;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #21;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #23; \/\/ name_index\n+      #24; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#25) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40003102A9F00;\n+            0x0DBB0007591209B7;\n+            0x000BBFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#26) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  77;\n+                9  78;\n+                19  80;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#27) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #28; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#25) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0xB8000FB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#26) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  83;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#25) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B102A2A5F;\n+            0xCC00034B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#26) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  72;\n+                4  73;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#29) { \/\/ SourceFile\n+      #30;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue5\n+class MyValue6 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue6\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #8\n+    String #10; \/\/ #9\n+    Utf8 \"Verification failed\"; \/\/ #10\n+    Method #7 #12; \/\/ #11\n+    NameAndType #13 #14; \/\/ #12\n+    Utf8 \"<init>\"; \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #14\n+    Method #1 #16; \/\/ #15\n+    NameAndType #17 #18; \/\/ #16\n+    Utf8 \"<vnew>\"; \/\/ #17\n+    Utf8 \"()LMyValue6;\"; \/\/ #18\n+    class #20; \/\/ #19\n+    Utf8 \"java\/lang\/Object\"; \/\/ #20\n+    class #22; \/\/ #21\n+    Utf8 \"Verifiable\"; \/\/ #22\n+    Utf8 \"verify\"; \/\/ #23\n+    Utf8 \"()V\"; \/\/ #24\n+    Utf8 \"Code\"; \/\/ #25\n+    Utf8 \"LineNumberTable\"; \/\/ #26\n+    Utf8 \"StackMapTable\"; \/\/ #27\n+    Utf8 \"make\"; \/\/ #28\n+    Utf8 \"SourceFile\"; \/\/ #29\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #30\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #19;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #21;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #23; \/\/ name_index\n+      #24; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#25) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40003102A9F00;\n+            0x0DBB0007591209B7;\n+            0x000BBFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#26) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  92;\n+                9  93;\n+                19  95;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#27) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #28; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#25) { \/\/ Code\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[]{\n+            0xB8000FB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#26) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  98;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#25) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B102A2A5F;\n+            0xCC00034B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#26) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  87;\n+                4  88;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#29) { \/\/ SourceFile\n+      #30;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue6\n+class MyValue7 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"MyValue7\"; \/\/ #2\n+    Field #1 #4; \/\/ #3\n+    NameAndType #5 #6; \/\/ #4\n+    Utf8 \"x\"; \/\/ #5\n+    Utf8 \"I\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #8\n+    String #10; \/\/ #9\n+    Utf8 \"Verification failed\"; \/\/ #10\n+    Method #7 #12; \/\/ #11\n+    NameAndType #13 #14; \/\/ #12\n+    Utf8 \"<init>\"; \/\/ #13\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #14\n+    class #16; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #16\n+    Utf8 \"verify\"; \/\/ #17\n+    Utf8 \"()V\"; \/\/ #18\n+    Utf8 \"Code\"; \/\/ #19\n+    Utf8 \"LineNumberTable\"; \/\/ #20\n+    Utf8 \"StackMapTable\"; \/\/ #21\n+    Utf8 \"<vnew>\"; \/\/ #22\n+    Utf8 \"()LMyValue7;\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #15;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          3; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB40003102A9F00;\n+            0x0DBB0007591209B7;\n+            0x000BBFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  106;\n+                9  107;\n+                19  109;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#21) { \/\/ StackMapTable\n+              [] { \/\/ \n+                19b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #22; \/\/ name_index\n+      #23; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B102A2A5F;\n+            0xCC00034B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  102;\n+                4  103;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class MyValue7\n+class Verifiable {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"Verifiable\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"verify\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Utf8 \"SourceFile\"; \/\/ #7\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #8\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#7) { \/\/ SourceFile\n+      #8;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class Verifiable\n+file \"B.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"A\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"B\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+    Utf8 \"Preload\"; \/\/ #20\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  119;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  122;\n+                4  123;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#20) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class B\n+class I3 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I3\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"method\"; \/\/ #5\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #6\n+    Utf8 \"SourceFile\"; \/\/ #7\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #8\n+    Utf8 \"Preload\"; \/\/ #9\n+    class #11; \/\/ #10\n+    Utf8 \"MyValue2\"; \/\/ #11\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#7) { \/\/ SourceFile\n+      #8;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#9) { \/\/ Preload\n+      [] { \/\/ classes\n+        #10;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class I3\n+class I4 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I4\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    class #6; \/\/ #5\n+    Utf8 \"I3\"; \/\/ #6\n+    Utf8 \"method\"; \/\/ #7\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #10\n+    Utf8 \"Preload\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"MyValue2\"; \/\/ #13\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #5;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #7; \/\/ name_index\n+      #8; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#11) { \/\/ Preload\n+      [] { \/\/ classes\n+        #12;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class I4\n+class E {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"E\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I4\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+    Utf8 \"Preload\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  160;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  163;\n+                4  164;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#22) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class E\n+class G {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"G\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I2\"; \/\/ #15\n+    class #17; \/\/ #16\n+    Utf8 \"I4\"; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"method\"; \/\/ #20\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #23\n+    Utf8 \"Preload\"; \/\/ #24\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+    #16;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  177;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  180;\n+                4  181;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#24) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class G\n+class J {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"J\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+    Utf8 \"Preload\"; \/\/ #20\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  197;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  199;\n+                4  200;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#20) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class J\n+class K {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"J\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"K\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+    Utf8 \"Preload\"; \/\/ #20\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  204;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  207;\n+                4  208;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#20) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class K\n+file \"L.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"K\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"L\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I5\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+    Utf8 \"Preload\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  212;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  215;\n+                4  216;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#22) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class L\n+class P {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"P\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+    Utf8 \"Preload\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  263;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  266;\n+                4  267;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#22) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class P\n+class Q {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"Q\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+    Utf8 \"Preload\"; \/\/ #20\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  271;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  273;\n+                4  274;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#20) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class Q\n+class R {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"Q\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"R\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+    Utf8 \"Preload\"; \/\/ #20\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  278;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  281;\n+                4  282;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#20) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class R\n+class S {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"R\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"S\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+    Utf8 \"Preload\"; \/\/ #22\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  286;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  289;\n+                4  290;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#22) { \/\/ Preload\n+      [] { \/\/ classes\n+        #8;\n+      }\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class S\n+class TestMismatchHandlingHelper {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"<vnew>\"; \/\/ #11\n+    Utf8 \"()LMyValue1;\"; \/\/ #12\n+    Method #14 #15; \/\/ #13\n+    class #16; \/\/ #14\n+    NameAndType #17 #18; \/\/ #15\n+    Utf8 \"A\"; \/\/ #16\n+    Utf8 \"method\"; \/\/ #17\n+    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #18\n+    Method #8 #20; \/\/ #19\n+    NameAndType #21 #6; \/\/ #20\n+    Utf8 \"verify\"; \/\/ #21\n+    Method #23 #15; \/\/ #22\n+    class #24; \/\/ #23\n+    Utf8 \"B\"; \/\/ #24\n+    Method #26 #15; \/\/ #25\n+    class #27; \/\/ #26\n+    Utf8 \"C\"; \/\/ #27\n+    Method #29 #30; \/\/ #28\n+    class #31; \/\/ #29\n+    NameAndType #11 #32; \/\/ #30\n+    Utf8 \"MyValue2\"; \/\/ #31\n+    Utf8 \"()LMyValue2;\"; \/\/ #32\n+    InterfaceMethod #34 #35; \/\/ #33\n+    class #36; \/\/ #34\n+    NameAndType #17 #37; \/\/ #35\n+    Utf8 \"I1\"; \/\/ #36\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #37\n+    Method #29 #20; \/\/ #38\n+    InterfaceMethod #40 #35; \/\/ #39\n+    class #41; \/\/ #40\n+    Utf8 \"I2\"; \/\/ #41\n+    Method #43 #35; \/\/ #42\n+    class #44; \/\/ #43\n+    Utf8 \"D\"; \/\/ #44\n+    InterfaceMethod #46 #35; \/\/ #45\n+    class #47; \/\/ #46\n+    Utf8 \"I3\"; \/\/ #47\n+    InterfaceMethod #49 #35; \/\/ #48\n+    class #50; \/\/ #49\n+    Utf8 \"I4\"; \/\/ #50\n+    Method #52 #35; \/\/ #51\n+    class #53; \/\/ #52\n+    Utf8 \"E\"; \/\/ #53\n+    Method #55 #56; \/\/ #54\n+    class #57; \/\/ #55\n+    NameAndType #11 #58; \/\/ #56\n+    Utf8 \"MyValue3\"; \/\/ #57\n+    Utf8 \"()LMyValue3;\"; \/\/ #58\n+    InterfaceMethod #60 #61; \/\/ #59\n+    class #62; \/\/ #60\n+    NameAndType #17 #63; \/\/ #61\n+    Utf8 \"I5\"; \/\/ #62\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #63\n+    Method #55 #20; \/\/ #64\n+    Method #66 #61; \/\/ #65\n+    class #67; \/\/ #66\n+    Utf8 \"H\"; \/\/ #67\n+    Method #69 #61; \/\/ #68\n+    class #70; \/\/ #69\n+    Utf8 \"J\"; \/\/ #70\n+    Method #72 #61; \/\/ #71\n+    class #73; \/\/ #72\n+    Utf8 \"K\"; \/\/ #73\n+    Method #75 #76; \/\/ #74\n+    class #77; \/\/ #75\n+    NameAndType #17 #78; \/\/ #76\n+    Utf8 \"M\"; \/\/ #77\n+    Utf8 \"(Z)LMyValue4;\"; \/\/ #78\n+    Field #80 #81; \/\/ #79\n+    class #82; \/\/ #80\n+    NameAndType #83 #84; \/\/ #81\n+    Utf8 \"MyValue4\"; \/\/ #82\n+    Utf8 \"x\"; \/\/ #83\n+    Utf8 \"I\"; \/\/ #84\n+    class #86; \/\/ #85\n+    Utf8 \"java\/lang\/RuntimeException\"; \/\/ #86\n+    String #88; \/\/ #87\n+    Utf8 \"Verification failed\"; \/\/ #88\n+    Method #85 #90; \/\/ #89\n+    NameAndType #5 #91; \/\/ #90\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #91\n+    Method #93 #94; \/\/ #92\n+    class #95; \/\/ #93\n+    NameAndType #17 #96; \/\/ #94\n+    Utf8 \"N\"; \/\/ #95\n+    Utf8 \"(Z)LMyValue5;\"; \/\/ #96\n+    InterfaceMethod #98 #20; \/\/ #97\n+    class #99; \/\/ #98\n+    Utf8 \"Verifiable\"; \/\/ #99\n+    Method #101 #35; \/\/ #100\n+    class #102; \/\/ #101\n+    Utf8 \"F\"; \/\/ #102\n+    Method #104 #35; \/\/ #103\n+    class #105; \/\/ #104\n+    Utf8 \"G\"; \/\/ #105\n+    Method #107 #61; \/\/ #106\n+    class #108; \/\/ #107\n+    Utf8 \"L\"; \/\/ #108\n+    Method #110 #111; \/\/ #109\n+    class #112; \/\/ #110\n+    NameAndType #17 #113; \/\/ #111\n+    Utf8 \"O\"; \/\/ #112\n+    Utf8 \"(Z)LMyValue6;\"; \/\/ #113\n+    Method #115 #20; \/\/ #114\n+    class #116; \/\/ #115\n+    Utf8 \"MyValue6\"; \/\/ #116\n+    Method #118 #119; \/\/ #117\n+    class #120; \/\/ #118\n+    NameAndType #11 #121; \/\/ #119\n+    Utf8 \"MyValue7\"; \/\/ #120\n+    Utf8 \"()LMyValue7;\"; \/\/ #121\n+    InterfaceMethod #123 #124; \/\/ #122\n+    class #125; \/\/ #123\n+    NameAndType #17 #126; \/\/ #124\n+    Utf8 \"I6\"; \/\/ #125\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #126\n+    Method #118 #20; \/\/ #127\n+    Method #129 #124; \/\/ #128\n+    class #130; \/\/ #129\n+    Utf8 \"P\"; \/\/ #130\n+    Method #132 #124; \/\/ #131\n+    class #133; \/\/ #132\n+    Utf8 \"Q\"; \/\/ #133\n+    Method #135 #124; \/\/ #134\n+    class #136; \/\/ #135\n+    Utf8 \"R\"; \/\/ #136\n+    class #138; \/\/ #137\n+    Utf8 \"TestMismatchHandlingHelper\"; \/\/ #138\n+    Utf8 \"Code\"; \/\/ #139\n+    Utf8 \"LineNumberTable\"; \/\/ #140\n+    Utf8 \"test1\"; \/\/ #141\n+    Utf8 \"(LA;LA;LA;LA;LA;LB;LB;LC;)V\"; \/\/ #142\n+    Utf8 \"test2\"; \/\/ #143\n+    Utf8 \"(LI1;LI1;LI1;LI1;LI1;LI1;LI2;LI2;LI2;LI2;LI2;LI2;LI3;LI3;LI3;LI3;LI3;LI3;LI4;LI4;LI4;LI4;LI4;LI4;LD;LE;)V\"; \/\/ #144\n+    Utf8 \"test3\"; \/\/ #145\n+    Utf8 \"(LI5;LI5;LI5;LJ;LJ;LJ;LJ;LJ;LH;LK;)V\"; \/\/ #146\n+    Utf8 \"test4\"; \/\/ #147\n+    Utf8 \"(LM;Z)V\"; \/\/ #148\n+    Utf8 \"StackMapTable\"; \/\/ #149\n+    Utf8 \"test5\"; \/\/ #150\n+    Utf8 \"(LN;Z)V\"; \/\/ #151\n+    Utf8 \"test6\"; \/\/ #152\n+    Utf8 \"(LF;LG;LL;)V\"; \/\/ #153\n+    Utf8 \"test7\"; \/\/ #154\n+    Utf8 \"(LO;Z)LVerifiable;\"; \/\/ #155\n+    Utf8 \"test7TriggerCalleeCompilation\"; \/\/ #156\n+    Utf8 \"(LO;)V\"; \/\/ #157\n+    Utf8 \"test8\"; \/\/ #158\n+    Utf8 \"(LI6;LI6;LI6;LQ;LQ;LQ;LQ;LQ;LP;LR;)V\"; \/\/ #159\n+    Utf8 \"SourceFile\"; \/\/ #160\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #161\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #137;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  294;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #141; \/\/ name_index\n+      #142; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          2; \/\/ max_stack\n+          8; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB80007B6000DB6;\n+            0x00132BB80007B600;\n+            0x0DB600132CB80007;\n+            0xB6000DB600132DB8;\n+            0x0007B6000DB60013;\n+            0x1904B80007B6000D;\n+            0xB600131905B80007;\n+            0xB60016B600131906;\n+            0xB80007B60016B600;\n+            0x131907B80007B600;\n+            0x19B60013B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  300;\n+                10  301;\n+                20  302;\n+                30  303;\n+                40  304;\n+                51  306;\n+                62  307;\n+                73  308;\n+                84  309;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #143; \/\/ name_index\n+      #144; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          2; \/\/ max_stack\n+          26; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB8001CB9002102;\n+            0x00B600262BB8001C;\n+            0xB900210200B60026;\n+            0x2CB8001CB9002102;\n+            0x00B600262DB8001C;\n+            0xB900210200B60026;\n+            0x1904B8001CB90021;\n+            0x0200B600261905B8;\n+            0x001CB900210200B6;\n+            0x00261906B8001CB9;\n+            0x00270200B6002619;\n+            0x07B8001CB9002702;\n+            0x00B600261908B800;\n+            0x1CB900270200B600;\n+            0x261909B8001CB900;\n+            0x270200B60026190A;\n+            0xB8001CB900270200;\n+            0xB60026190BB8001C;\n+            0xB900270200B60026;\n+            0x1918B8001CB6002A;\n+            0xB60026190CB8001C;\n+            0xB9002D0200B60026;\n+            0x190DB8001CB9002D;\n+            0x0200B60026190EB8;\n+            0x001CB9002D0200B6;\n+            0x0026190FB8001CB9;\n+            0x002D0200B6002619;\n+            0x10B8001CB9002D02;\n+            0x00B600261911B800;\n+            0x1CB9002D0200B600;\n+            0x261912B8001CB900;\n+            0x300200B600261913;\n+            0xB8001CB900300200;\n+            0xB600261914B8001C;\n+            0xB900300200B60026;\n+            0x1915B8001CB90030;\n+            0x0200B600261916B8;\n+            0x001CB900300200B6;\n+            0x00261917B8001CB9;\n+            0x00300200B6002619;\n+            0x19B8001CB60033B6;\n+            0x0026B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  318;\n+                12  319;\n+                24  320;\n+                36  321;\n+                48  322;\n+                61  323;\n+                74  324;\n+                87  325;\n+                100  326;\n+                113  327;\n+                126  328;\n+                139  329;\n+                152  330;\n+                163  332;\n+                176  333;\n+                189  334;\n+                202  335;\n+                215  336;\n+                228  337;\n+                241  338;\n+                254  339;\n+                267  340;\n+                280  341;\n+                293  342;\n+                306  343;\n+                319  344;\n+                330  345;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #145; \/\/ name_index\n+      #146; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          2; \/\/ max_stack\n+          10; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB80036B9003B02;\n+            0x00B600402BB80036;\n+            0xB9003B0200B60040;\n+            0x2CB80036B9003B02;\n+            0x00B600401908B800;\n+            0x36B60041B600402D;\n+            0xB80036B60044B600;\n+            0x401904B80036B600;\n+            0x44B600401905B800;\n+            0x36B60044B6004019;\n+            0x06B80036B60044B6;\n+            0x00401907B80036B6;\n+            0x0044B600401909B8;\n+            0x0036B60047B60040;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  353;\n+                12  354;\n+                24  355;\n+                36  356;\n+                47  358;\n+                57  359;\n+                68  360;\n+                79  361;\n+                90  362;\n+                101  363;\n+                112  364;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #147; \/\/ name_index\n+      #148; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          3; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x1B99000C2A1BB600;\n+            0x4A57A7001A2A1BB6;\n+            0x004AB4004F102A9F;\n+            0x000DBB0055591257;\n+            0xB70059BFB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  369;\n+                4  370;\n+                13  372;\n+                26  373;\n+                36  376;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#149) { \/\/ StackMapTable\n+              [] { \/\/ \n+                13b; \/\/ same_frame\n+                22b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #150; \/\/ name_index\n+      #151; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          2; \/\/ max_stack\n+          3; \/\/ max_locals\n+          Bytes[]{\n+            0x2A1BB6005C4D1B9A;\n+            0x00092CB900610100;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  381;\n+                6  382;\n+                10  383;\n+                16  385;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#149) { \/\/ StackMapTable\n+              [] { \/\/ \n+                252b, 16, []z{O,98}; \/\/ append_frame 1\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #152; \/\/ name_index\n+      #153; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          2; \/\/ max_stack\n+          3; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB8001CB6006457;\n+            0x2BB8001CB6006757;\n+            0x2CB80036B6006A57;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  389;\n+                8  390;\n+                16  391;\n+                24  392;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #154; \/\/ name_index\n+      #155; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2A1BB6006DB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  397;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #156; \/\/ name_index\n+      #157; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2A04B6006D572A03;\n+            0xB6006DB60072B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  401;\n+                6  402;\n+                14  403;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #158; \/\/ name_index\n+      #159; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#139) { \/\/ Code\n+          2; \/\/ max_stack\n+          10; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB80075B9007A02;\n+            0x00B6007F2BB80075;\n+            0xB9007A0200B6007F;\n+            0x2CB80075B9007A02;\n+            0x00B6007F1908B800;\n+            0x75B60080B6007F2D;\n+            0xB80075B60083B600;\n+            0x7F1904B80075B600;\n+            0x83B6007F1905B800;\n+            0x75B60083B6007F19;\n+            0x06B80075B60083B6;\n+            0x007F1907B80075B6;\n+            0x0083B6007F1909B8;\n+            0x0075B60086B6007F;\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#140) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  412;\n+                12  413;\n+                24  414;\n+                36  415;\n+                47  417;\n+                57  418;\n+                68  419;\n+                79  420;\n+                90  421;\n+                101  422;\n+                112  423;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#160) { \/\/ SourceFile\n+      #161;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class TestMismatchHandlingHelper\n+class A {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"A\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  112;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  114;\n+                4  115;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class A\n+class C {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"B\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue1\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"C\"; \/\/ #13\n+    Utf8 \"Code\"; \/\/ #14\n+    Utf8 \"LineNumberTable\"; \/\/ #15\n+    Utf8 \"method\"; \/\/ #16\n+    Utf8 \"(LMyValue1;)LMyValue1;\"; \/\/ #17\n+    Utf8 \"SourceFile\"; \/\/ #18\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #19\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  127;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #16; \/\/ name_index\n+      #17; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#14) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#15) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  130;\n+                4  131;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#18) { \/\/ SourceFile\n+      #19;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class C\n+class I1 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I1\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"method\"; \/\/ #5\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #6\n+    Utf8 \"SourceFile\"; \/\/ #7\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #8\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#7) { \/\/ SourceFile\n+      #8;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I1\n+class I2 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I2\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    class #6; \/\/ #5\n+    Utf8 \"I1\"; \/\/ #6\n+    Utf8 \"method\"; \/\/ #7\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #10\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #5;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #7; \/\/ name_index\n+      #8; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I2\n+file \"D.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"D\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I2\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  152;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  155;\n+                4  156;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class D\n+file \"F.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue2\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"F\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I2\"; \/\/ #15\n+    class #17; \/\/ #16\n+    Utf8 \"I4\"; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"method\"; \/\/ #20\n+    Utf8 \"(LMyValue2;)LMyValue2;\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #23\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+    #16;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  169;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  172;\n+                4  173;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class F\n+class H {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue3\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"H\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I5\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  189;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  192;\n+                4  193;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class H\n+class I5 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I5\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"method\"; \/\/ #5\n+    Utf8 \"(LMyValue3;)LMyValue3;\"; \/\/ #6\n+    Utf8 \"SourceFile\"; \/\/ #7\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #8\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0401; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#7) { \/\/ SourceFile\n+      #8;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I5\n+class M {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Field #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"M\"; \/\/ #10\n+    Utf8 \"val\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    Method #14 #15; \/\/ #13\n+    class #16; \/\/ #14\n+    NameAndType #17 #18; \/\/ #15\n+    Utf8 \"MyValue4\"; \/\/ #16\n+    Utf8 \"make\"; \/\/ #17\n+    Utf8 \"()LMyValue4;\"; \/\/ #18\n+    Utf8 \"Code\"; \/\/ #19\n+    Utf8 \"LineNumberTable\"; \/\/ #20\n+    Utf8 \"method\"; \/\/ #21\n+    Utf8 \"(Z)LMyValue4;\"; \/\/ #22\n+    Utf8 \"StackMapTable\"; \/\/ #23\n+    Utf8 \"SourceFile\"; \/\/ #24\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #25\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB700012A03B500;\n+            0x07B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  220;\n+                4  221;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #21; \/\/ name_index\n+      #22; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#19) { \/\/ Code\n+          3; \/\/ max_stack\n+          4; \/\/ max_locals\n+          Bytes[]{\n+            0x1B99000501B0B800;\n+            0x0D4D033E1D100AA2;\n+            0x00132A59B4000704;\n+            0x60B50007840301A7;\n+            0xFFED2CB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#20) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  224;\n+                4  225;\n+                6  227;\n+                10  229;\n+                18  230;\n+                28  229;\n+                34  232;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#23) { \/\/ StackMapTable\n+              [] { \/\/ \n+                6b; \/\/ same_frame\n+                253b, 5, []z{O,14; I}; \/\/ append_frame 2\n+                250b, 21; \/\/ chop_frame 1\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#24) { \/\/ SourceFile\n+      #25;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class M\n+file \"N.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue5\"; \/\/ #10\n+    Utf8 \"make\"; \/\/ #11\n+    Utf8 \"()LMyValue5;\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"N\"; \/\/ #14\n+    Utf8 \"Code\"; \/\/ #15\n+    Utf8 \"LineNumberTable\"; \/\/ #16\n+    Utf8 \"method\"; \/\/ #17\n+    Utf8 \"(Z)LMyValue5;\"; \/\/ #18\n+    Utf8 \"StackMapTable\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #13;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#15) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#16) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  237;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#15) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x1B99000501B0B800;\n+            0x07B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#16) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  239;\n+                4  240;\n+                6  242;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#19) { \/\/ StackMapTable\n+              [] { \/\/ \n+                6b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class N\n+file \"O.class\" {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #12; \/\/ #9\n+    Utf8 \"MyValue6\"; \/\/ #10\n+    Utf8 \"make\"; \/\/ #11\n+    Utf8 \"()LMyValue6;\"; \/\/ #12\n+    class #14; \/\/ #13\n+    Utf8 \"O\"; \/\/ #14\n+    Utf8 \"Code\"; \/\/ #15\n+    Utf8 \"LineNumberTable\"; \/\/ #16\n+    Utf8 \"method\"; \/\/ #17\n+    Utf8 \"(Z)LMyValue6;\"; \/\/ #18\n+    Utf8 \"StackMapTable\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #13;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#15) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#16) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  247;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #17; \/\/ name_index\n+      #18; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#15) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x1B99000501B0B800;\n+            0x07B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#16) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  249;\n+                4  250;\n+                6  252;\n+              }\n+            } \/\/ end LineNumberTable\n+            ;\n+            Attr(#19) { \/\/ StackMapTable\n+              [] { \/\/ \n+                6b; \/\/ same_frame\n+              }\n+            } \/\/ end StackMapTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class O\n+class I6 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"I6\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"method\"; \/\/ #5\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #6\n+    Utf8 \"Code\"; \/\/ #7\n+    Utf8 \"LineNumberTable\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #10\n+  } \/\/ Constant Pool\n+\n+  0x0600; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x01B0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#8) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  259;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class I6\n+class P {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  65; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    Method #8 #9; \/\/ #7\n+    class #10; \/\/ #8\n+    NameAndType #11 #6; \/\/ #9\n+    Utf8 \"MyValue7\"; \/\/ #10\n+    Utf8 \"verify\"; \/\/ #11\n+    class #13; \/\/ #12\n+    Utf8 \"P\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"I6\"; \/\/ #15\n+    Utf8 \"Code\"; \/\/ #16\n+    Utf8 \"LineNumberTable\"; \/\/ #17\n+    Utf8 \"method\"; \/\/ #18\n+    Utf8 \"(LMyValue7;)LMyValue7;\"; \/\/ #19\n+    Utf8 \"SourceFile\"; \/\/ #20\n+    Utf8 \"TestMismatchHandlingGenerator.java\"; \/\/ #21\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #12;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #14;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  263;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #18; \/\/ name_index\n+      #19; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#16) { \/\/ Code\n+          1; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2BB600072BB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#17) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  266;\n+                4  267;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#20) { \/\/ SourceFile\n+      #21;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class P\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.jcod","additions":3812,"deletions":0,"binary":false,"changes":3812,"status":"added"},{"patch":"@@ -0,0 +1,424 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+value class MyValue1 {\n+    int x = 42;\n+\n+    void verify() {\n+        if (x != 42) {\n+            throw new RuntimeException(\"Verification failed\");\n+        }\n+    }\n+}\n+\n+value class MyValue2 {\n+    int x = 42;\n+\n+    void verify() {\n+        if (x != 42) {\n+            throw new RuntimeException(\"Verification failed\");\n+        }\n+    }\n+}\n+\n+value class MyValue3 {\n+    int x = 42;\n+\n+    void verify() {\n+        if (x != 42) {\n+            throw new RuntimeException(\"Verification failed\");\n+        }\n+    }\n+}\n+\n+value class MyValue4 {\n+    int x = 42;\n+\n+    public void verify() {\n+        if (x != 42) {\n+            throw new RuntimeException(\"Verification failed\");\n+        }\n+    }\n+\n+    static MyValue4 make() {\n+        return new MyValue4();\n+    }\n+}\n+\n+interface Verifiable {\n+    public void verify();\n+}\n+\n+value class MyValue5 implements Verifiable {\n+    int x = 42;\n+\n+    @Override\n+    public void verify() {\n+        if (x != 42) {\n+            throw new RuntimeException(\"Verification failed\");\n+        }\n+    }\n+\n+    static MyValue5 make() {\n+        return new MyValue5();\n+    }\n+}\n+\n+value class MyValue6 implements Verifiable {\n+    int x = 42;\n+\n+    @Override\n+    public void verify() {\n+        if (x != 42) {\n+            throw new RuntimeException(\"Verification failed\");\n+        }\n+    }\n+\n+    static MyValue6 make() {\n+        return new MyValue6();\n+    }\n+}\n+\n+value class MyValue7 {\n+    int x = 42;\n+\n+    void verify() {\n+        if (x != 42) {\n+            throw new RuntimeException(\"Verification failed\");\n+        }\n+    }\n+}\n+\n+class A {\n+    public MyValue1 method(MyValue1 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class B extends A {\n+    @Override\n+    public MyValue1 method(MyValue1 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class C extends B {\n+    @Override\n+    public MyValue1 method(MyValue1 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+interface I1 {\n+    public MyValue2 method(MyValue2 arg);\n+}\n+\n+interface I2 extends I1 {\n+    public MyValue2 method(MyValue2 arg);\n+}\n+\n+interface I3 {\n+    public MyValue2 method(MyValue2 arg);\n+}\n+\n+interface I4 extends I3 {\n+    public MyValue2 method(MyValue2 arg);\n+}\n+\n+\n+class D implements I2 {\n+    @Override\n+    public MyValue2 method(MyValue2 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class E implements I4 {\n+    @Override\n+    public MyValue2 method(MyValue2 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+\n+class F implements I2, I4 {\n+    @Override\n+    public MyValue2 method(MyValue2 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class G implements I2, I4 {\n+    @Override\n+    public MyValue2 method(MyValue2 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+interface I5 {\n+    public MyValue3 method(MyValue3 arg);\n+}\n+\n+class H implements I5 {\n+    @Override\n+    public MyValue3 method(MyValue3 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class J {\n+    public MyValue3 method(MyValue3 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class K extends J {\n+    @Override\n+    public MyValue3 method(MyValue3 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class L extends K implements I5 {\n+    @Override\n+    public MyValue3 method(MyValue3 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class M {\n+    int val = 0;\n+\n+    public MyValue4 method(boolean warmup) {\n+        if (warmup) {\n+            return null;\n+        } else {\n+            MyValue4 res = MyValue4.make();\n+            \/\/ Do something here to \"corrupt\" registers\n+            for (int i = 0; i < 10; ++i) {\n+                val++;\n+            }\n+            return res;\n+        }\n+    }\n+}\n+\n+class N {\n+    public MyValue5 method(boolean warmup) {\n+        if (warmup) {\n+            return null;\n+        } else {\n+            return MyValue5.make();\n+        }\n+    }\n+}\n+\n+class O {\n+    public MyValue6 method(boolean warmup) {\n+        if (warmup) {\n+            return null;\n+        } else {\n+            return MyValue6.make();\n+        }\n+    }\n+}\n+\n+interface I6 {\n+    default MyValue7 method(MyValue7 arg) {\n+        return null;\n+    }\n+}\n+\n+class P implements I6 {\n+    @Override\n+    public MyValue7 method(MyValue7 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class Q {\n+    MyValue7 method(MyValue7 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class R extends Q {\n+    @Override\n+    MyValue7 method(MyValue7 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class S extends R implements I6 {\n+    @Override\n+    public MyValue7 method(MyValue7 arg) {\n+        arg.verify();\n+        return arg;\n+    }\n+}\n+\n+class TestMismatchHandlingHelper {\n+    \/\/ * = has preload attribute for MyValue*\n+\n+    \/\/ With C <: B* <: A\n+    public static void test1(A a1, A a2, A a3, A a4, A a5, B b1, B b2, C c) {\n+        \/\/ Non-scalarized virtual call site, mismatching on B\n+        a1.method(new MyValue1()).verify();\n+        a2.method(new MyValue1()).verify();\n+        a3.method(new MyValue1()).verify();\n+        a4.method(new MyValue1()).verify();\n+        a5.method(new MyValue1()).verify();\n+        \/\/ Scalarized virtual call sites, mismatching on C\n+        b1.method(new MyValue1()).verify();\n+        b2.method(new MyValue1()).verify();\n+        c.method(new MyValue1()).verify();\n+    }\n+\n+    \/\/ D  <: I2  <: I1\n+    \/\/ E* <: I4* <: I3*\n+    \/\/ Loaded later, combine both hierachies and introduce a mismatch:\n+    \/\/ F  <: I2, I4*\n+    \/\/ G* <: I2, I4*\n+    public static void test2(I1 i11, I1 i12, I1 i13, I1 i14, I1 i15, I1 i16, I2 i21, I2 i22, I2 i23, I2 i24, I2 i25, I2 i26, I3 i31, I3 i32, I3 i33, I3 i34, I3 i35, I3 i36, I4 i41, I4 i42, I4 i43, I4 i44, I4 i45, I4 i46, D d, E e) {\n+        \/\/ Non-scalarized virtual call sites, mismatching on E\n+        i11.method(new MyValue2()).verify();\n+        i12.method(new MyValue2()).verify();\n+        i13.method(new MyValue2()).verify();\n+        i14.method(new MyValue2()).verify();\n+        i15.method(new MyValue2()).verify();\n+        i16.method(new MyValue2()).verify();\n+        i21.method(new MyValue2()).verify();\n+        i22.method(new MyValue2()).verify();\n+        i23.method(new MyValue2()).verify();\n+        i24.method(new MyValue2()).verify();\n+        i25.method(new MyValue2()).verify();\n+        i26.method(new MyValue2()).verify();\n+        d.method(new MyValue2()).verify();\n+        \/\/ Scalarized virtual call sites, mismatching on D\n+        i31.method(new MyValue2()).verify();\n+        i32.method(new MyValue2()).verify();\n+        i33.method(new MyValue2()).verify();\n+        i34.method(new MyValue2()).verify();\n+        i35.method(new MyValue2()).verify();\n+        i36.method(new MyValue2()).verify();\n+        i41.method(new MyValue2()).verify();\n+        i42.method(new MyValue2()).verify();\n+        i43.method(new MyValue2()).verify();\n+        i44.method(new MyValue2()).verify();\n+        i45.method(new MyValue2()).verify();\n+        i46.method(new MyValue2()).verify();\n+        e.method(new MyValue2()).verify();\n+    }\n+\n+    \/\/ H  <: I5\n+    \/\/ K* <: J*\n+    \/\/ Loaded later, combines both hierachies and introduces a mismatch:\n+    \/\/ L* <: K*, I5\n+    public static void test3(I5 i51, I5 i52, I5 i53, J j1, J j2, J j3, J j4, J j5, H h, K k) {\n+        \/\/ Non-scalarized virtual call sites, mismatching on L\n+        i51.method(new MyValue3()).verify();\n+        i52.method(new MyValue3()).verify();\n+        i53.method(new MyValue3()).verify();\n+        h.method(new MyValue3()).verify();\n+        \/\/ Scalarized virtual call sites\n+        j1.method(new MyValue3()).verify();\n+        j2.method(new MyValue3()).verify();\n+        j3.method(new MyValue3()).verify();\n+        j4.method(new MyValue3()).verify();\n+        j5.method(new MyValue3()).verify();\n+        k.method(new MyValue3()).verify();\n+    }\n+\n+    \/\/ Test that a C1 compiled method returns in scalarized form if the method holder class M\n+    \/\/ is loaded but the value class return type is not due to a missing preload attribute.\n+    public static void test4(M m, boolean warmup) {\n+        if (warmup) {\n+            m.method(warmup);\n+        } else {\n+            if (m.method(warmup).x != 42) {\n+                throw new RuntimeException(\"Verification failed\");\n+            }\n+        }\n+    }\n+\n+    \/\/ Test that C1 correctly handles scalarized returns at calls if the method holder class N\n+    \/\/ is loaded but the value class return type is not due to a missing preload attribute.\n+    public static void test5(N n, boolean warmup) {\n+        Verifiable res = n.method(warmup);\n+        if (!warmup) {\n+            res.verify();\n+        }\n+    }\n+\n+    \/\/ Test direct calls\n+    public static void test6(F f, G g, L l) {\n+        f.method(new MyValue2());\n+        g.method(new MyValue2());\n+        l.method(new MyValue3());\n+    }\n+\n+    \/\/ Test scalarized return from C2 compiled callee to C2 compiled caller with an unloaded\n+    \/\/ return type at caller compile time due to a missing preload attribute.\n+    public static Verifiable test7(O o, boolean warmup) {\n+        return o.method(warmup);\n+    }\n+\n+    public static void test7TriggerCalleeCompilation(O o) {\n+        o.method(true);\n+        o.method(false).verify();\n+    }\n+\n+    \/\/ Same as test3 but with default method in interface and package private methods\n+    \/\/ P  <: I6\n+    \/\/ R* <: Q*\n+    \/\/ Loaded later, combines both hierachies and introduces a mismatch:\n+    \/\/ S* <: R*, I6\n+    public static void test8(I6 i61, I6 i62, I6 i63, Q q1, Q q2, Q q3, Q q4, Q q5, P p, R r) {\n+        \/\/ Non-scalarized virtual call sites, mismatching on S\n+        i61.method(new MyValue7()).verify();\n+        i62.method(new MyValue7()).verify();\n+        i63.method(new MyValue7()).verify();\n+        p.method(new MyValue7()).verify();\n+        \/\/ Scalarized virtual call sites\n+        q1.method(new MyValue7()).verify();\n+        q2.method(new MyValue7()).verify();\n+        q3.method(new MyValue7()).verify();\n+        q4.method(new MyValue7()).verify();\n+        q5.method(new MyValue7()).verify();\n+        r.method(new MyValue7()).verify();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandlingGenerator.java","additions":424,"deletions":0,"binary":false,"changes":424,"status":"added"},{"patch":"@@ -37,0 +37,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:-StressCallingConvention\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}