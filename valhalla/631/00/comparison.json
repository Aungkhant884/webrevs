{"files":[{"patch":"@@ -271,1 +271,1 @@\n-            if (!implClass.isAssignableFrom(receiverClass)) {\n+            if (!implClass.asPrimaryType().isAssignableFrom(receiverClass.asPrimaryType())) {\n@@ -274,1 +274,1 @@\n-                                      receiverClass, implClass));\n+                                      receiverClass.descriptorString(), implClass.descriptorString()));\n@@ -324,1 +324,1 @@\n-            if (!descriptorParamType.isAssignableFrom(dynamicParamType)) {\n+            if (!descriptorParamType.asPrimaryType().isAssignableFrom(dynamicParamType.asPrimaryType())) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2286,8 +2286,0 @@\n-            \/* Workaround to BootstrapMethodError. This workaround should not be required in the unified\n-               class generation model, but seems to be required ...\n-               Todo: Investigate to see if a defect should be reported against runtime lambda machinery\n-            *\/\n-            boolean receiverIsReferenceProjection() {\n-                return tree.getQualifierExpression().type.isReferenceProjection();\n-            }\n-\n@@ -2346,1 +2338,0 @@\n-                        receiverIsReferenceProjection() ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}