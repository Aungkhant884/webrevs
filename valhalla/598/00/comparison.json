{"files":[{"patch":"@@ -3447,3 +3447,1 @@\n-        if (cast_obj != NULL &&\n-            \/\/ A value that's sometimes null is not something we can optimize well\n-            !(cast_obj->is_InlineType() && null_ctl != top())) {\n+        if (cast_obj != NULL) {\n@@ -3617,7 +3615,0 @@\n-      if (cast_obj != NULL && cast_obj->is_InlineType()) {\n-        if (null_ctl != top()) {\n-          cast_obj = NULL; \/\/ A value that's sometimes null is not something we can optimize well\n-        } else {\n-          return cast_obj;\n-        }\n-      }\n@@ -3720,1 +3711,1 @@\n-        if (vt->isa_InlineType() && C->inlining_incrementally()) {\n+        if (vt->is_InlineType() && C->inlining_incrementally()) {\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -194,2 +194,1 @@\n-  if (recursive && value->is_InlineType()) {\n-    InlineTypeNode* vt = value->as_InlineType();\n+  if (recursive && value->is_InlineTypeBase()) {\n@@ -198,0 +197,1 @@\n+      InlineTypeBaseNode* vt = value->as_InlineTypeBase();\n@@ -202,1 +202,1 @@\n-      return vt;\n+      return value;\n@@ -578,1 +578,1 @@\n-     InlineTypeNode* value = field_value(i)->isa_InlineType();\n+     Node* value = field_value(i);\n@@ -581,2 +581,2 @@\n-       vt->set_field_value(i, value->allocate_fields(kit));\n-     } else if (value != NULL) {\n+       vt->set_field_value(i, value->as_InlineTypeBase()->allocate_fields(kit));\n+     } else if (value->is_InlineType()) {\n@@ -584,1 +584,1 @@\n-       vt->set_field_value(i, value->buffer(kit));\n+       vt->set_field_value(i, value->as_InlineType()->buffer(kit));\n@@ -899,2 +899,1 @@\n-      InlineTypeNode* vt = arg->as_InlineType();\n-      vt->pass_fields(kit, n, base_input);\n+      arg->as_InlineTypeBase()->pass_fields(kit, n, base_input);\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4146,0 +4146,139 @@\n+\n+    static interface MyInterface2 {\n+        public int val();\n+    }\n+\n+    static abstract class MyAbstract2 implements MyInterface2 {\n+\n+    }\n+\n+    static class MyClass152 extends MyAbstract2 {\n+        private int val;\n+\n+        @ForceInline\n+        public MyClass152(int val) {\n+            this.val = val;\n+        }\n+\n+        @Override\n+        public int val() {\n+            return val;\n+        }\n+    }\n+\n+    static primitive class MyValue152 extends MyAbstract2 {\n+        private int unused = 0; \/\/ Make sure sub-offset of val is field non-zero\n+        private int val;\n+\n+        @ForceInline\n+        public MyValue152(int val) {\n+            this.val = val;\n+        }\n+\n+        @Override\n+        public int val() {\n+            return val;\n+        }\n+    }\n+\n+    static primitive class MyWrapper152 {\n+        private int unused = 0; \/\/ Make sure sub-offset of val field is non-zero\n+        MyValue152 val;\n+\n+        @ForceInline\n+        public MyWrapper152(MyInterface2 val) {\n+            this.val = (MyValue152)val;\n+        }\n+    }\n+\n+    \/\/ Test that checkcast with speculative type does not break scalarization in return\n+    @Test\n+    public MyWrapper152 test152(MyInterface2 val) {\n+        return new MyWrapper152(val);\n+    }\n+\n+    @Run(test = \"test152\")\n+    @Warmup(10000) \/\/ Make sure profile information is available at cast\n+    public void test152_verifier() {\n+        MyClass152 unused = new MyClass152(rI);\n+        MyValue152 val = new MyValue152(rI);\n+        Asserts.assertEquals(test152(val).val, val);\n+    }\n+\n+    @DontInline\n+    static void test153_helper(MyWrapper152 arg) {\n+\n+    }\n+\n+    \/\/ Test that checkcast with speculative type does not prevent scalarization in args\n+    @Test\n+    public void test153(MyInterface2 val) {\n+        test153_helper(new MyWrapper152(val));\n+    }\n+\n+    @Run(test = \"test153\")\n+    @Warmup(10000) \/\/ Make sure profile information is available at cast\n+    public void test153_verifier() {\n+        MyClass152 unused = new MyClass152(rI);\n+        MyValue152 val = new MyValue152(rI);\n+        test153(val);\n+    }\n+\n+    \/\/ Test that checkcast with speculative type enables scalarization\n+    @Test\n+    @IR(failOn = {ALLOC_G, STORE})\n+    public int test154(Method m, MyInterface2 val, boolean b1, boolean b2) {\n+        MyInterface2 obj = new MyValue152(rI);\n+        if (b1) {\n+            \/\/ Speculative cast to MyValue152 enables scalarization\n+            obj = (MyAbstract2)val;\n+        }\n+        if (b2) {\n+            \/\/ Uncommon trap\n+            TestFramework.deoptimize(m);\n+            return obj.val();\n+        }\n+        return -1;\n+    }\n+\n+    @Run(test = \"test154\")\n+    @Warmup(10000) \/\/ Make sure profile information is available at cast\n+    public void test154_verifier(RunInfo info) {\n+        MyClass152 unused = new MyClass152(rI);\n+        MyValue152 val = new MyValue152(rI);\n+        Asserts.assertEquals(test154(info.getTest(), val, false, false), -1);\n+        Asserts.assertEquals(test154(info.getTest(), val, true, false), -1);\n+        if (!info.isWarmUp()) {\n+            Asserts.assertEquals(test154(info.getTest(), val, false, true), rI);\n+        }\n+    }\n+\n+    \/\/ Same as test154 but with null val\n+    @Test\n+    @IR(failOn = {ALLOC_G, STORE})\n+    public int test155(Method m, MyInterface2 val, boolean b1, boolean b2) {\n+        MyInterface2 obj = new MyValue152(rI);\n+        if (b1) {\n+            \/\/ Speculative cast to MyValue152 enables scalarization\n+            obj = (MyAbstract2)val;\n+        }\n+        if (b2) {\n+            \/\/ Uncommon trap\n+            TestFramework.deoptimize(m);\n+            return obj.val();\n+        }\n+        return -1;\n+    }\n+\n+    @Run(test = \"test155\")\n+    @Warmup(10000) \/\/ Make sure profile information is available at cast\n+    public void test155_verifier(RunInfo info) {\n+        MyClass152 unused = new MyClass152(rI);\n+        MyValue152 val = new MyValue152(rI);\n+        Asserts.assertEquals(test155(info.getTest(), val, false, false), -1);\n+        Asserts.assertEquals(test155(info.getTest(), val, true, false), -1);\n+        Asserts.assertEquals(test155(info.getTest(), null, true, false), -1);\n+        if (!info.isWarmUp()) {\n+            Asserts.assertEquals(test155(info.getTest(), val, false, true), rI);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"modified"}]}