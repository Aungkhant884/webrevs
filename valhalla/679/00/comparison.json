{"files":[{"patch":"@@ -186,1 +186,1 @@\n-        if (Modifier.isAbstract(declaringClass.getModifiers())) {\n+        if (Modifier.isAbstract(declaringClass.getModifiers()) && declaringClass != Object.class) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run testng\/othervm ObjectNewInstance\n+ * @summary Method handle and core reflection to invoke on the constructor of\n+ *          java.lang.Object (abstract class) should return an Identity instance\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Constructor;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+public class ObjectNewInstance {\n+    @Test\n+    public void classNewInstance() throws ReflectiveOperationException {\n+        Object o = Object.class.newInstance();\n+        assertTrue(o.getClass() == Identity.class);\n+    }\n+\n+    @Test\n+    public void constructorNewInstance() throws ReflectiveOperationException {\n+        Constructor<Object> ctor = Object.class.getDeclaredConstructor();\n+        Object o = ctor.newInstance();\n+        assertTrue(o.getClass() == Identity.class);\n+    }\n+\n+    @Test\n+    public void methodHandle() throws Throwable {\n+        MethodHandle mh = MethodHandles.publicLookup()\n+                                       .findConstructor(Object.class, MethodType.methodType(void.class));\n+        Object o = mh.invokeExact();\n+        assertTrue(o.getClass() == Identity.class);\n+    }\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectNewInstance.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}