{"files":[{"patch":"@@ -1633,1 +1633,1 @@\n-    __ tst(tmp, markWord::nullfree_array_bit_in_place);\n+    __ tst(tmp, markWord::null_free_array_bit_in_place);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1597,1 +1597,1 @@\n-  test_oop_prototype_bit(oop, temp_reg, markWord::nullfree_array_bit_in_place, true, is_null_free_array);\n+  test_oop_prototype_bit(oop, temp_reg, markWord::null_free_array_bit_in_place, true, is_null_free_array);\n@@ -1601,1 +1601,1 @@\n-  test_oop_prototype_bit(oop, temp_reg, markWord::nullfree_array_bit_in_place, false, is_non_null_free_array);\n+  test_oop_prototype_bit(oop, temp_reg, markWord::null_free_array_bit_in_place, false, is_non_null_free_array);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2033,1 +2033,1 @@\n-    __ testl(tmp, markWord::nullfree_array_bit_in_place);\n+    __ testl(tmp, markWord::null_free_array_bit_in_place);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2807,1 +2807,1 @@\n-  test_oop_prototype_bit(oop, temp_reg, markWord::nullfree_array_bit_in_place, true, is_null_free_array);\n+  test_oop_prototype_bit(oop, temp_reg, markWord::null_free_array_bit_in_place, true, is_null_free_array);\n@@ -2817,1 +2817,1 @@\n-  test_oop_prototype_bit(oop, temp_reg, markWord::nullfree_array_bit_in_place, false, is_non_null_free_array);\n+  test_oop_prototype_bit(oop, temp_reg, markWord::null_free_array_bit_in_place, false, is_non_null_free_array);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-  assert(oop == NULL || oop->is_nullfreeArray(), \"sanity\");\n+  assert(oop == NULL || oop->is_null_free_array(), \"sanity\");\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-\/\/  unused:1 | <-- hash:31 -->| unused:22 larval:1 age:4 flat_array:1 nullfree_array:1 inline_type:1 lock:2\n+\/\/  unused:1 | <-- hash:31 -->| unused:22 larval:1 age:4 flat_array:1 null_free_array:1 inline_type:1 lock:2\n@@ -142,1 +142,1 @@\n-\/\/  The \"fast\" static type bits (flat_array, nullfree_array, and inline_type)\n+\/\/  The \"fast\" static type bits (flat_array, null_free_array, and inline_type)\n@@ -202,1 +202,1 @@\n-  static const int nullfree_array_bits            = LP64_ONLY(1) NOT_LP64(0);\n+  static const int null_free_array_bits           = LP64_ONLY(1) NOT_LP64(0);\n@@ -207,1 +207,1 @@\n-  static const int max_hash_bits                  = BitsPerWord - age_bits - lock_bits - inline_type_bits - larval_bits - flat_array_bits - nullfree_array_bits;\n+  static const int max_hash_bits                  = BitsPerWord - age_bits - lock_bits - inline_type_bits - larval_bits - flat_array_bits - null_free_array_bits;\n@@ -217,2 +217,2 @@\n-  static const int nullfree_array_shift           = inline_type_shift + inline_type_bits;\n-  static const int flat_array_shift               = nullfree_array_shift + nullfree_array_bits;\n+  static const int null_free_array_shift          = inline_type_shift + inline_type_bits;\n+  static const int flat_array_shift               = null_free_array_shift + null_free_array_bits;\n@@ -233,3 +233,3 @@\n-  static const uintptr_t nullfree_array_mask      = right_n_bits(nullfree_array_bits);\n-  static const uintptr_t nullfree_array_mask_in_place = (nullfree_array_mask << nullfree_array_shift) | lock_mask_in_place;\n-  static const uintptr_t nullfree_array_bit_in_place = (1 << nullfree_array_shift);\n+  static const uintptr_t null_free_array_mask     = right_n_bits(null_free_array_bits);\n+  static const uintptr_t null_free_array_mask_in_place = (null_free_array_mask << null_free_array_shift) | lock_mask_in_place;\n+  static const uintptr_t null_free_array_bit_in_place  = (1 << null_free_array_shift);\n@@ -237,1 +237,1 @@\n-  static const uintptr_t flat_array_mask_in_place = (flat_array_mask << flat_array_shift) | nullfree_array_mask_in_place | lock_mask_in_place;\n+  static const uintptr_t flat_array_mask_in_place = (flat_array_mask << flat_array_shift) | null_free_array_mask_in_place | lock_mask_in_place;\n@@ -263,3 +263,3 @@\n-  static const uintptr_t nullfree_array_pattern   = nullfree_array_bit_in_place | unlocked_value;\n-  static const uintptr_t flat_array_pattern       = flat_array_bit_in_place | nullfree_array_pattern;\n-  static const uintptr_t static_prototype_mask    = LP64_ONLY(right_n_bits(inline_type_bits + flat_array_bits + nullfree_array_bits)) NOT_LP64(right_n_bits(inline_type_bits));\n+  static const uintptr_t null_free_array_pattern  = null_free_array_bit_in_place | unlocked_value;\n+  static const uintptr_t flat_array_pattern       = flat_array_bit_in_place | null_free_array_pattern;\n+  static const uintptr_t static_prototype_mask    = LP64_ONLY(right_n_bits(inline_type_bits + flat_array_bits + null_free_array_bits)) NOT_LP64(right_n_bits(inline_type_bits));\n@@ -474,2 +474,2 @@\n-  bool is_nullfree_array() const {\n-    return (mask_bits(value(), nullfree_array_mask_in_place) == nullfree_array_pattern);\n+  bool is_null_free_array() const {\n+    return (mask_bits(value(), null_free_array_mask_in_place) == null_free_array_pattern);\n@@ -492,2 +492,2 @@\n-  static markWord nullfree_array_prototype() {\n-    return markWord(nullfree_array_pattern);\n+  static markWord null_free_array_prototype() {\n+    return markWord(null_free_array_pattern);\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-         prototype_header.is_nullfree_array(), \"corrupt prototype header\");\n+         prototype_header.is_null_free_array(), \"corrupt prototype header\");\n","filename":"src\/hotspot\/share\/oops\/markWord.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,2 +165,2 @@\n-    set_prototype_header(markWord::nullfree_array_prototype());\n-    assert(prototype_header().is_nullfree_array(), \"sanity\");\n+    set_prototype_header(markWord::null_free_array_prototype());\n+    assert(prototype_header().is_null_free_array(), \"sanity\");\n@@ -546,1 +546,1 @@\n-  guarantee(obj->is_nullfreeArray() || (!is_null_free_array_klass()), \"null-free klass but not object\");\n+  guarantee(obj->is_null_free_array() || (!is_null_free_array_klass()), \"null-free klass but not object\");\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -140,1 +140,0 @@\n-bool oopDesc::is_value_noinline()             const { return is_inline_type();         }\n@@ -142,1 +141,1 @@\n-bool oopDesc::is_nullfreeArray_noinline()     const { return is_nullfreeArray();       }\n+bool oopDesc::is_null_free_array_noinline()   const { return is_null_free_array();     }\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  inline bool is_nullfreeArray()       const;\n+  inline bool is_null_free_array()     const;\n@@ -125,1 +125,0 @@\n-  bool is_value_noinline()             const;\n@@ -127,1 +126,1 @@\n-  bool is_nullfreeArray_noinline()     const;\n+  bool is_null_free_array_noinline()   const;\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-bool oopDesc::is_nullfreeArray() const {\n+bool oopDesc::is_null_free_array() const {\n@@ -216,1 +216,1 @@\n-  return (mrk.is_unlocked()) ? mrk.is_nullfree_array() : klass()->is_null_free_array_klass();\n+  return (mrk.is_unlocked()) ? mrk.is_null_free_array() : klass()->is_null_free_array_klass();\n@@ -219,2 +219,2 @@\n-bool oopDesc::is_flatArray()     const { return klass()->is_flatArray_klass(); }\n-bool oopDesc::is_nullfreeArray() const { return klass()->is_null_free_array_klass(); }\n+bool oopDesc::is_flatArray()       const { return klass()->is_flatArray_klass(); }\n+bool oopDesc::is_null_free_array() const { return klass()->is_null_free_array_klass(); }\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-  EXPECT_FALSE(mark.is_nullfree_array());\n+  EXPECT_FALSE(mark.is_null_free_array());\n@@ -186,1 +186,1 @@\n-  EXPECT_FALSE(mark.is_nullfree_array());\n+  EXPECT_FALSE(mark.is_null_free_array());\n@@ -219,1 +219,1 @@\n-  EXPECT_TRUE(mark.is_nullfree_array());\n+  EXPECT_TRUE(mark.is_null_free_array());\n@@ -237,1 +237,1 @@\n-static void assert_nullfree_array_type(markWord mark) {\n+static void assert_null_free_array_type(markWord mark) {\n@@ -241,1 +241,1 @@\n-  EXPECT_TRUE(mark.is_nullfree_array());\n+  EXPECT_TRUE(mark.is_null_free_array());\n@@ -244,2 +244,2 @@\n-TEST_VM(markWord, nullfree_array_prototype) {\n-  markWord mark = markWord::nullfree_array_prototype();\n+TEST_VM(markWord, null_free_array_prototype) {\n+  markWord mark = markWord::null_free_array_prototype();\n@@ -249,1 +249,1 @@\n-  assert_nullfree_array_type(mark);\n+  assert_null_free_array_type(mark);\n@@ -256,1 +256,1 @@\n-  assert_nullfree_array_type(mark);\n+  assert_null_free_array_type(mark);\n","filename":"test\/hotspot\/gtest\/oops\/test_markWord.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}