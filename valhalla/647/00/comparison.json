{"files":[{"patch":"@@ -61,0 +61,2 @@\n+    private PreloadAttr preloadAttr;\n+\n@@ -319,0 +321,4 @@\n+    public void addPreloads(List<ConstantPool.ConstCell> classes) {\n+        env.traceln(\"addPreloads\");\n+        preloadAttr = new PreloadAttr(this, classes);\n+    }\n@@ -464,0 +470,2 @@\n+            if (preloadAttributeExists())\n+                attrs.add(preloadAttr);\n@@ -522,0 +530,2 @@\n+    public boolean preloadAttributeExists() { return preloadAttr != null; }\n+\n@@ -641,1 +651,0 @@\n-\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/ClassData.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -403,1 +403,8 @@\n-                EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD);\n+                EnumSet.of(TokenType.TYPE_PATH_KIND, TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n+\n+        \/\/ Valhalla\n+        VALUE              (200, \"VALUE\",     \"value\",     EnumSet.of(TokenType.MODIFIER, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n+        PERMITS_VALUE      (201, \"PERMITS_VALUE\", \"permits_value\", EnumSet.of(TokenType.MODIFIER, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n+        PRIMITIVE          (202, \"PRIMITIVE\", \"primitive\", EnumSet.of(TokenType.MODIFIER, TokenType.MODULE_NAME ), KeywordType.KEYWORD),\n+        PRELOAD            (203, \"PRELOAD\",    \"Preload\",  EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD);\n+\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/JasmTokens.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-                                             MM_ATTR    |  ACC_MODULE ;\n+                                             MM_ATTR    |  ACC_MODULE |\n+                                             ACC_VALUE | ACC_PERMITS_VALUE | ACC_PRIMITIVE;\n@@ -65,1 +66,2 @@\n-                                             ACC_ABSTRACT | ACC_SYNTHETIC | ACC_ANNOTATION | ACC_ENUM  | MM_ATTR ;\n+                                             ACC_ABSTRACT | ACC_SYNTHETIC | ACC_ANNOTATION | ACC_ENUM  | MM_ATTR |\n+                                             ACC_VALUE | ACC_PERMITS_VALUE | ACC_PRIMITIVE;\n@@ -221,0 +223,12 @@\n+    public static boolean isValue(int mod) {\n+        return (mod & ACC_VALUE) != 0;\n+    }\n+\n+    public static boolean isPermitsValue(int mod) {\n+        return (mod & ACC_PERMITS_VALUE) != 0;\n+    }\n+\n+    public static boolean isPrimitive(int mod) {\n+        return (mod & ACC_PRIMITIVE) != 0;\n+    }\n+\n@@ -408,0 +422,3 @@\n+            if (isStrict(mod)) {\n+                sb.append(Token.STRICT.parseKey() + \" \");\n+            }\n@@ -414,0 +431,3 @@\n+        if (context.isOneOf(CF_Context.CTX_CLASS, CF_Context.CTX_INNERCLASS) && isPermitsValue(mod)) {\n+            sb.append(Token.PERMITS_VALUE.parseKey() + \" \");\n+        }\n@@ -423,3 +443,0 @@\n-        if (isStrict(mod)) {\n-            sb.append(Token.STRICT.parseKey() + \" \");\n-        }\n@@ -438,0 +455,6 @@\n+        if (context.isOneOf(CF_Context.CTX_CLASS, CF_Context.CTX_INNERCLASS) && isPrimitive(mod)) {\n+            sb.append(Token.PRIMITIVE.parseKey() + \" \");\n+        }\n+        if (context.isOneOf(CF_Context.CTX_CLASS, CF_Context.CTX_INNERCLASS) && isValue(mod)) {\n+            sb.append(Token.VALUE.parseKey() + \" \");\n+        }\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/Modifiers.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -324,1 +324,3 @@\n-\/\/    opc_bytecode 202            (202, \"bytecode 202\", 1),\n+    opc_aconst_init         (203, \"aconst_init\", 3),\n+    opc_withfield           (204, \"withfield\", 3),\n+\n@@ -326,9 +328,9 @@\n-    opc_bytecode            (203, \"bytecode\", 1),\n-    opc_try                 (204, \"try\", 0),\n-    opc_endtry              (205, \"endtry\", 0),\n-    opc_catch               (206, \"catch\", 0),\n-    opc_var                 (207, \"var\", 0),\n-    opc_endvar              (208, \"endvar\", 0),\n-    opc_locals_map          (209, \"locals_map\", 0),\n-    opc_stack_map           (210, \"stack_map\", 0),\n-    opc_stack_frame_type    (211, \"stack_frame_type\", 0),\n+    opc_bytecode            (210, \"bytecode\", 1),\n+    opc_try                 (211, \"try\", 0),\n+    opc_endtry              (212, \"endtry\", 0),\n+    opc_catch               (213, \"catch\", 0),\n+    opc_var                 (214, \"var\", 0),\n+    opc_endvar              (215, \"endvar\", 0),\n+    opc_locals_map          (216, \"locals_map\", 0),\n+    opc_stack_map           (217, \"stack_map\", 0),\n+    opc_stack_frame_type    (218, \"stack_frame_type\", 0),\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/OpcodeTables.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -352,0 +352,3 @@\n+            case VALUE:\n+            case PERMITS_VALUE:\n+            case PRIMITIVE:\n@@ -526,0 +529,3 @@\n+            case VALUE:\n+            case PERMITS_VALUE:\n+            case PRIMITIVE:\n@@ -714,0 +720,9 @@\n+                case VALUE:\n+                    nextmod = ACC_VALUE;\n+                    break;\n+                case PERMITS_VALUE:\n+                    nextmod = ACC_PERMITS_VALUE;\n+                    break;\n+                case PRIMITIVE:\n+                    nextmod = ACC_PRIMITIVE;\n+                    break;\n@@ -834,0 +849,1 @@\n+                    case 'Q':\n@@ -869,1 +885,2 @@\n-        boolean is_init = name.equals(\"<init>\");\n+        boolean is_init = name.equals(\"<init>\")\n+            && !Modifiers.isStatic(mod); \/\/ TODO: not a good way to detect factories...\n@@ -1007,1 +1024,2 @@\n-     * Parse a list of classes belonging to the [NestMembers | PermittedSubclasses]  entry\n+     * Parse a list of classes belonging to the\n+     * [NestMembers | PermittedSubclasses | Preload]  entry\n@@ -1814,0 +1832,8 @@\n+                case PRELOAD:\n+                    if (cd.preloadAttributeExists()) {\n+                        env.error(scanner.pos, \"extra.preload.attribute\");\n+                        throw new Scanner.SyntaxError();\n+                    }\n+                    scanner.scan();\n+                    parseClasses(list -> cd.addPreloads(list));\n+                    break;\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/Parser.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -244,0 +244,1 @@\n+                    case opc_aconst_init:\n@@ -264,0 +265,1 @@\n+                    case opc_withfield:\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/ParserInstr.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jasm;\n+\n+import java.util.List;\n+\n+public class PreloadAttr extends ClassArrayAttr {\n+    public PreloadAttr(ClassData cdata, List<ConstantPool.ConstCell> classes) {\n+        super(Tables.AttrTag.ATT_Preload.parsekey(), cdata, classes);\n+    }\n+}\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/PreloadAttr.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -45,0 +45,1 @@\n+    int ACC_PERMITS_VALUE = 0x0040; \/\/ class, inner\n@@ -49,0 +50,1 @@\n+    int ACC_VALUE         = 0x0100; \/\/ class, inner\n@@ -52,0 +54,1 @@\n+    int ACC_PRIMITIVE     = 0x0800; \/\/ class, inner\n@@ -71,0 +74,1 @@\n+                        put(ACC_PERMITS_VALUE,\"permits_value\");\n@@ -75,0 +79,1 @@\n+                        put(ACC_VALUE        ,\"value\");\n@@ -78,0 +83,1 @@\n+                        put(ACC_PRIMITIVE    ,\"primitive\");\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/RuntimeConstants.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -238,1 +238,2 @@\n-        ATT_PermittedSubclasses                       (35, \"ATT_PermittedSubclasses\", \"PermittedSubclasses\");\n+        ATT_PermittedSubclasses                     (35, \"ATT_PermittedSubclasses\", \"PermittedSubclasses\"),\n+        ATT_Preload                                 (36, \"ATT_Preload\", \"Preload\");\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/Tables.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-err.field.expected=Field, Method, NestMembers, NestHost or Record declaration expected.\n+err.field.expected=Class member declaration expected.\n@@ -84,0 +84,1 @@\n+err.extra.preload.attribute=There may be at most one Preload attribute.\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jasm\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1018,0 +1018,2 @@\n+                    \/\/ Preload attribute has same format\n+                case ATT_Preload:\n@@ -1291,1 +1293,0 @@\n-\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jdec\/ClassData.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -102,0 +102,2 @@\n+    protected PreloadData preloadData;\n+\n@@ -235,0 +237,3 @@\n+            case ATT_Preload:\n+                preloadData = new PreloadData(this).read(in, attrlen);\n+                break;\n@@ -470,0 +475,6 @@\n+\n+            \/\/ Print Preload attribute\n+            if (preloadData != null) {\n+                preloadData.print();\n+            }\n+\n@@ -529,1 +540,0 @@\n-\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jdis\/ClassData.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-        if (opcode.value() > Opcode.opc_jsr_w.value()) {\n+        if (opcode.value() >= Opcode.opc_bytecode.value()) {\n@@ -541,0 +541,1 @@\n+            case opc_aconst_init:\n@@ -545,0 +546,1 @@\n+            case opc_withfield:\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jdis\/CodeData.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.asmtools.jdis;\n+\n+import org.openjdk.asmtools.jasm.JasmTokens;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+\n+public class PreloadData extends ClassArrayData {\n+    public PreloadData(ClassData cls) {\n+        super(cls, JasmTokens.Token.PRELOAD.parseKey());\n+    }\n+\n+    public PreloadData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {\n+        return (PreloadData) super.read(in, attribute_length);\n+    }\n+}\n","filename":"test\/lib\/org\/openjdk\/asmtools\/jdis\/PreloadData.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}