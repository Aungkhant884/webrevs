{"files":[{"patch":"@@ -2179,0 +2179,6 @@\n+  \/\/ Check for equality before potentially allocating\n+  if (left == right) {\n+    do_if(btest, makecon(TypeInt::CC_EQ));\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3648,0 +3648,66 @@\n+\n+    \/\/ Test that acmp of the same inline object is removed\n+    @Test(failOn = ALLOC + LOAD + STORE + NULL_CHECK_TRAP + TRAP)\n+    public static boolean test135() {\n+        MyValue1 val = MyValue1.createWithFieldsInline(rI, rL);\n+        return val == val;\n+    }\n+\n+    @DontCompile\n+    public void test135_verifier(boolean warmup) {\n+        Asserts.assertTrue(test135());\n+    }\n+\n+    \/\/ Same as test135 but with .ref\n+    @Test(failOn = ALLOC + LOAD + STORE + NULL_CHECK_TRAP + TRAP)\n+    public static boolean test136(boolean b) {\n+        MyValue1.ref val = MyValue1.createWithFieldsInline(rI, rL);\n+        if (b) {\n+            val = null;\n+        }\n+        return val == val;\n+    }\n+\n+    @DontCompile\n+    public void test136_verifier(boolean warmup) {\n+        Asserts.assertTrue(test136(false));\n+        Asserts.assertTrue(test136(true));\n+    }\n+\n+    static final primitive class SimpleInlineType {\n+        final int x;\n+        public SimpleInlineType(int x) {\n+            this.x = x;\n+        }\n+    }\n+\n+    \/\/ Test that acmp of different inline objects with same content is removed\n+    @Test(failOn = ALLOC + LOAD + STORE + NULL_CHECK_TRAP + TRAP)\n+    public static boolean test137(int i) {\n+        SimpleInlineType val1 = new SimpleInlineType(i);\n+        SimpleInlineType val2 = new SimpleInlineType(i);\n+        return val1 == val2;\n+    }\n+\n+    @DontCompile\n+    public void test137_verifier(boolean warmup) {\n+        Asserts.assertTrue(test137(rI));\n+    }\n+\n+    \/\/ Same as test137 but with .ref\n+    @Test(failOn = ALLOC + LOAD + STORE + NULL_CHECK_TRAP + TRAP)\n+    public static boolean test138(int i, boolean b) {\n+        SimpleInlineType.ref val1 = new SimpleInlineType(i);\n+        SimpleInlineType.ref val2 = new SimpleInlineType(i);\n+        if (b) {\n+            val1 = null;\n+            val2 = null;\n+        }\n+        return val1 == val2;\n+    }\n+\n+    @DontCompile\n+    public void test138_verifier(boolean warmup) {\n+        Asserts.assertTrue(test138(rI, false));\n+        Asserts.assertTrue(test138(rI, true));\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -176,0 +176,1 @@\n+            System.gc();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Ifacmp.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}