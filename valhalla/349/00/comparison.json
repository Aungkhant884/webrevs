{"files":[{"patch":"@@ -964,1 +964,0 @@\n-                                       bool is_inline_type,\n@@ -1020,1 +1019,1 @@\n-      if (is_inline_type && ik->invalid_inline_super()) {\n+      if (is_inline_type() && ik->invalid_inline_super()) {\n@@ -1041,0 +1040,5 @@\n+      if (ik->name() == vmSymbols::java_lang_PrimitiveObject()) {\n+        \/\/ further checks for \"is_invalid_super_for_inline_type()\" needed later\n+        \/\/ needs field parsing, delay unitl post_process_parse_stream()\n+        _implements_primitiveObject = true;\n+      }\n@@ -4604,0 +4608,3 @@\n+    if (length == 1 && result->at(0) == vmClasses::PrimitiveObject_klass()) {\n+      return Universe::the_single_PrimitiveObject_klass_array();\n+    }\n@@ -5722,0 +5729,3 @@\n+  if (_has_injected_primitiveObject) {\n+    ik->set_has_injected_primitiveObject();\n+  }\n@@ -5970,0 +5980,3 @@\n+  \/\/ the common single interface arrays need setup here to provide the\n+  \/\/ correct answer to \"compute_transitive_interfaces()\", during\n+  \/\/ \"SystemDictionary::initialize()\"\n@@ -5973,0 +5986,3 @@\n+  if (ik->name() == vmSymbols::java_lang_PrimitiveObject()) {\n+    Universe::initialize_the_single_PrimitiveObject_klass_array(ik, CHECK);\n+  }\n@@ -6125,0 +6141,2 @@\n+  _implements_primitiveObject(false),\n+  _has_injected_primitiveObject(false),\n@@ -6468,1 +6486,0 @@\n-                   is_inline_type(),\n@@ -6616,7 +6633,1 @@\n-        ResourceMark rm(THREAD);\n-        Exceptions::fthrow(\n-          THREAD_AND_LOCATION,\n-          vmSymbols::java_lang_IncompatibleClassChangeError(),\n-          \"inline class %s has an invalid super class %s\",\n-          _class_name->as_klass_external_name(),\n-          _super_klass->external_name());\n+        classfile_icce_error(\"inline class %s has an invalid super class %s\", _super_klass, THREAD);\n@@ -6654,0 +6665,12 @@\n+  \/\/ Check if declared as PrimitiveObject...else add if needed\n+  if (_implements_primitiveObject) {\n+    if (!is_inline_type() && invalid_inline_super()) {\n+      classfile_icce_error(\"class %s can not implement %s, neither valid inline classes or valid supertype\",\n+                            vmClasses::PrimitiveObject_klass(), THREAD);\n+      return;\n+    }\n+  } else if (is_inline_type()) {\n+    _temp_local_interfaces->append(vmClasses::PrimitiveObject_klass());\n+    _has_injected_primitiveObject = true;\n+  }\n+\n@@ -6659,0 +6682,2 @@\n+  } else if (itfs_len == 1 && _temp_local_interfaces->at(0) == vmClasses::PrimitiveObject_klass()) {\n+    _local_interfaces = Universe::the_single_PrimitiveObject_klass_array();\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":35,"deletions":10,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -216,0 +216,2 @@\n+  bool _implements_primitiveObject;\n+  bool _has_injected_primitiveObject;\n@@ -266,1 +268,0 @@\n-                        bool is_inline_type,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -403,0 +403,2 @@\n+    bool primitive_object_implemented = false;\n+    bool primitive_object_specified = false;\n@@ -408,0 +410,4 @@\n+      if (k->local_interfaces()->at(i) == vmClasses::PrimitiveObject_klass()) {\n+        primitive_object_implemented = true;\n+        break;\n+      }\n@@ -414,0 +420,4 @@\n+      if (lookup_class_by_id(_interfaces->at(i)) == vmClasses::PrimitiveObject_klass()) {\n+        primitive_object_specified = true;\n+        break;\n+      }\n@@ -417,1 +427,2 @@\n-    if (identity_object_implemented  && !identity_object_specified) {\n+    if ( (identity_object_implemented  && !identity_object_specified) ||\n+         (primitive_object_implemented && !primitive_object_specified) ){\n@@ -419,1 +430,1 @@\n-      \/\/ java.lang.IdentityObject.\n+      \/\/ java.lang.IdentityObject or java.lang.PrimitiveObject\n@@ -422,1 +433,0 @@\n-\n@@ -687,0 +697,5 @@\n+  if (interface_name == vmSymbols::java_lang_PrimitiveObject()) {\n+    \/\/ Backwards compatibility -- older classlists do not know about\n+    \/\/ java.lang.PrimitiveObject.\n+    return vmClasses::PrimitiveObject_klass();\n+  }\n","filename":"src\/hotspot\/share\/classfile\/classListParser.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+  do_klass(PrimitiveObject_klass,                       java_lang_PrimitiveObject                             ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+  template(java_lang_PrimitiveObject,                 \"java\/lang\/PrimitiveObject\")                \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+Array<InstanceKlass*>* Universe::_the_single_PrimitiveObject_klass_array = NULL;\n@@ -224,0 +225,1 @@\n+  it->push(&_the_single_PrimitiveObject_klass_array);\n@@ -275,0 +277,1 @@\n+  f->do_ptr((void**)&_the_single_PrimitiveObject_klass_array);\n@@ -363,0 +366,2 @@\n+      assert(_the_single_PrimitiveObject_klass_array->at(0) ==\n+          vmClasses::PrimitiveObject_klass(), \"u3\");\n@@ -480,1 +485,10 @@\n-  }\n+}\n+\n+void Universe::initialize_the_single_PrimitiveObject_klass_array(InstanceKlass* ik, TRAPS) {\n+    assert(_the_single_PrimitiveObject_klass_array == NULL, \"Must not be initialized twice\");\n+    assert(ik->name() == vmSymbols::java_lang_PrimitiveObject(), \"Must be\");\n+    Array<InstanceKlass*>* array = MetadataFactory::new_array<InstanceKlass*>(ik->class_loader_data(), 1, NULL, CHECK);\n+    array->at_put(0, ik);\n+    _the_single_PrimitiveObject_klass_array = array;\n+}\n+\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -126,1 +126,2 @@\n-  static Array<InstanceKlass*>* _the_single_IdentityObject_klass_array;\n+  static Array<InstanceKlass*>* _the_single_IdentityObject_klass_array;  \/\/ Common single interface array for IdentityObjects\n+  static Array<InstanceKlass*>* _the_single_PrimitiveObject_klass_array; \/\/ Common single interface array for PrimitiveObjects\n@@ -299,0 +300,6 @@\n+  static Array<InstanceKlass*>*  the_single_PrimitiveObject_klass_array() {\n+    assert(_the_single_PrimitiveObject_klass_array != NULL, \"Must be initialized before use\");\n+    assert(_the_single_PrimitiveObject_klass_array->length() == 1, \"Sanity check\");\n+    return _the_single_PrimitiveObject_klass_array;\n+  }\n+  static void initialize_the_single_PrimitiveObject_klass_array(InstanceKlass* ik, TRAPS);\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -636,1 +636,2 @@\n-        ti != Universe::the_single_IdentityObject_klass_array()) {\n+        ti != Universe::the_single_IdentityObject_klass_array() &&\n+        ti != Universe::the_single_PrimitiveObject_klass_array()) {\n@@ -644,1 +645,2 @@\n-      local_interfaces != Universe::the_single_IdentityObject_klass_array()) {\n+      local_interfaces != Universe::the_single_IdentityObject_klass_array() &&\n+      local_interfaces != Universe::the_single_PrimitiveObject_klass_array()) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -295,1 +295,2 @@\n-    _misc_has_injected_identityObject         = 1 << 22  \/\/ IdentityObject has been injected by the JVM\n+    _misc_has_injected_identityObject         = 1 << 22, \/\/ IdentityObject has been injected by the JVM\n+    _misc_has_injected_primitiveObject        = 1 << 23  \/\/ PrimitiveObject has been injected by the JVM\n@@ -486,0 +487,8 @@\n+  bool has_injected_primitiveObject() const {\n+    return (_misc_flags & _misc_has_injected_primitiveObject);\n+  }\n+\n+  void set_has_injected_primitiveObject() {\n+    _misc_flags |= _misc_has_injected_primitiveObject;\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -899,1 +899,3 @@\n-  write_u2(num_interfaces - (ik()->has_injected_identityObject() ? 1 : 0) );\n+  write_u2(num_interfaces -\n+           (ik()->has_injected_identityObject() || ik()->has_injected_primitiveObject() ? 1 : 0));\n+\n@@ -903,1 +905,2 @@\n-    if (!ik()->has_injected_identityObject() || iik != vmClasses::IdentityObject_klass()) {\n+    if ( (!ik()->has_injected_identityObject() || iik != vmClasses::IdentityObject_klass()) &&\n+         (!ik()->has_injected_primitiveObject() || iik != vmClasses::PrimitiveObject_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -341,0 +341,4 @@\n+  \/\/ Cannot redefine or retransform interface java.lang.PrimitiveObject.\n+  if (k->name() == vmSymbols::java_lang_PrimitiveObject()) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public abstract class AbstractSpecified implements PrimitiveObject {\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/AbstractSpecified.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public interface InterfaceSpecified extends PrimitiveObject {\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/InterfaceSpecified.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public primitive class PrimitiveType {\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveType.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public primitive class PrimitiveTypeSpecified implements PrimitiveObject {\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveTypeSpecified.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public primitive class PrimitiveWithInterface implements InterfaceSpecified {\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveWithInterface.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public primitive class PrimitiveWithSuper extends AbstractSpecified {\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/PrimitiveWithSuper.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @summary test that PrimitiveObject interface is injected correctly\n+ * @library \/test\/lib \/test\/jdk\/lib\/testlibrary\/bytecode \/test\/jdk\/java\/lang\/invoke\/common\n+ * @build jdk.experimental.bytecode.BasicClassBuilder\n+ * @compile TestPrimitiveObject.java\n+ * @compile PrimitiveType.java PrimitiveTypeSpecified.java\n+ * @compile AbstractSpecified.java InterfaceSpecified.java\n+ * @compile PrimitiveWithSuper.java PrimitiveWithInterface.java\n+ * @run main\/othervm -verify TestPrimitiveObject\n+ *\/\n+\n+import java.lang.invoke.*;\n+import jdk.experimental.bytecode.*;\n+\n+public class TestPrimitiveObject {\n+\n+    public static void main(String[] args) {\n+        checkNegativePrimitiveObjects();\n+        checkPositivePrimitiveObjects();\n+        checkIcceOnInvalidSupers();\n+    }\n+\n+    static void checkNegativePrimitiveObjects() {\n+        Class[] clazzes = new Class[] {\n+            String.class, Comparable.class, Number.class\n+        };\n+        for (Class clazz : clazzes) {\n+            checkPrimitiveObject(clazz, false);\n+        }\n+    }\n+\n+    static void checkPositivePrimitiveObjects() {\n+        Class[] clazzes = new Class[] {\n+            PrimitiveType.class, PrimitiveTypeSpecified.class,\n+            AbstractSpecified.class, InterfaceSpecified.class,\n+            PrimitiveWithSuper.class, PrimitiveWithInterface.class\n+        };\n+        for (Class clazz : clazzes) {\n+            checkPrimitiveObject(clazz, true);\n+        }\n+    }\n+\n+    static void checkPrimitiveObject(Class c, boolean subtype) {\n+        boolean s;\n+        try {\n+            c.asSubclass(PrimitiveObject.class);\n+            s = true;\n+        } catch(ClassCastException e) {\n+            s = false;\n+        }\n+        if (subtype != s) {\n+            if (subtype) {\n+                throw new RuntimeException(\"Type \" + c.getName() + \" is missing PrimitiveObject\");\n+            } else {\n+                throw new RuntimeException(\"Type \" + c.getName() + \" should not implement PrimitiveObject\");\n+            }\n+        }\n+    }\n+\n+    \/\/ Define classes that implement PrimitiveObject but are invalid supers\n+    static void checkIcceOnInvalidSupers() {\n+        MethodHandles.Lookup mhLookup = MethodHandles.lookup();\n+        checkIcce(mhLookup, createClass().build());\n+        checkIcce(mhLookup, createAbstractWithField().build());\n+        checkIcce(mhLookup, createAbstractIdentity().build());\n+        checkIcce(mhLookup, createIdentity().build());\n+    }\n+\n+    static ClassBuilder createClass() {\n+        return new BasicClassBuilder(\"ANormalClass\", 61, 0)\n+            .withSuperclass(\"java\/lang\/Object\")\n+            .withSuperinterface(\"java\/lang\/PrimitiveObject\");\n+    }\n+\n+    static ClassBuilder createAbstractWithField() {\n+        return new BasicClassBuilder(\"AbstractWithField\", 61, 0)\n+            .withSuperclass(\"java\/lang\/Object\")\n+            .withFlags(Flag.ACC_ABSTRACT)\n+            .withField(\"aFieldWhichIsIllegalAsAnAbstractSuperToPrimitiveObject\", \"I\")\n+            .withSuperinterface(\"java\/lang\/PrimitiveObject\");\n+    }\n+\n+    static ClassBuilder createAbstractIdentity() {\n+        return new BasicClassBuilder(\"AbstractIdentity\", 61, 0)\n+            .withSuperclass(\"java\/lang\/Object\")\n+            .withFlags(Flag.ACC_ABSTRACT)\n+            .withSuperinterface(\"java\/lang\/IdentityObject\")\n+            .withSuperinterface(\"java\/lang\/PrimitiveObject\");\n+    }\n+\n+  static ClassBuilder createIdentity() {\n+        return new BasicClassBuilder(\"Identity\", 61, 0)\n+            .withSuperclass(\"java\/lang\/Object\")\n+            .withSuperinterface(\"java\/lang\/IdentityObject\")\n+            .withSuperinterface(\"java\/lang\/PrimitiveObject\");\n+    }\n+\n+    static void checkIcce(MethodHandles.Lookup mhLookup, byte[] clazzBytes) {\n+        try {\n+            mhLookup.defineClass(clazzBytes);\n+            throw new RuntimeException(\"Expected IncompatibleClassChangeError\");\n+        }\n+        catch (IllegalAccessException ill) { throw new RuntimeException(ill); }\n+        catch (IncompatibleClassChangeError icce) { System.out.println(icce); }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/primitiveObject\/TestPrimitiveObject.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -61,2 +61,2 @@\n-            points++;\n-        if (points != 4)\n+            points++; \/\/ 6\n+        if (points != 6)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InstanceOfTopTypeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        if (ca.length != 0)\n+        if (ca.length != 1 || !ca[0].getCanonicalName().equals(\"java.lang.PrimitiveObject\"))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TopInterfaceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}