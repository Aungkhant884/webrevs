{"files":[{"patch":"@@ -34,0 +34,1 @@\n+                                        JVM_ACC_INLINE | \\\n","filename":"src\/hotspot\/share\/include\/jvm_constants.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1003,0 +1003,1 @@\n+      case Bytecodes::_withfield       :  \/\/ fall through\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274800\n+ * @library \/test\/lib\n+ * @summary [lworld] Primitive classes can't be retransformed\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules java.instrument\n+ * @requires vm.jvmti\n+ * @requires vm.flagless\n+ * @run driver RedefinePrimitive buildagent\n+ * @run driver\/timeout=6000 RedefinePrimitive runtest\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.lang.RuntimeException;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.security.ProtectionDomain;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.util.spi.ToolProvider;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class RedefinePrimitive {\n+\n+    private static final ToolProvider JAR = ToolProvider.findFirst(\"jar\")\n+        .orElseThrow(() -> new RuntimeException(\"ToolProvider for jar not found\"));\n+\n+    static primitive class PrimitiveTester {\n+        public PrimitiveTester(int x, String y, long z) {\n+            this.x = x;\n+            this.y = y;\n+            this.z = z;\n+        }\n+        public int x;\n+        public String y;\n+        public long z;\n+    }\n+\n+    static class LoggingTransformer implements ClassFileTransformer {\n+\n+        public LoggingTransformer() {}\n+\n+        static int fileNumber=0;\n+\n+        public byte[] transform(ClassLoader loader, String className,\n+                                Class classBeingRedefined, ProtectionDomain protectionDomain,\n+                                byte[] classfileBuffer) throws IllegalClassFormatException {\n+            return null;\n+        }\n+    }\n+\n+    public static void premain(String agentArgs, Instrumentation inst) throws Exception {\n+        LoggingTransformer t = new LoggingTransformer();\n+        inst.addTransformer(t, true);\n+        {\n+            Class demoClass = Class.forName(\"RedefinePrimitive$PrimitiveTester\");\n+            inst.retransformClasses(demoClass);\n+        }\n+    }\n+\n+    private static void buildAgent() {\n+        try {\n+            System.err.println(\"*** Calling ClassFileInstaller.main(\\\"RedefinePrimitive\\\");\");\n+            ClassFileInstaller.main(\"RedefinePrimitive\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not write agent classfile\", e);\n+        }\n+\n+        try {\n+            PrintWriter pw = new PrintWriter(\"MANIFEST.MF\");\n+            pw.println(\"Premain-Class: RedefinePrimitive\");\n+            pw.println(\"Agent-Class: RedefinePrimitive\");\n+            pw.println(\"Can-Redefine-Classes: true\");\n+            pw.println(\"Can-Retransform-Classes: true\");\n+            pw.close();\n+        } catch (FileNotFoundException e) {\n+            throw new RuntimeException(\"Could not write manifest file for the agent\", e);\n+        }\n+\n+        if (JAR.run(System.out, System.err, \"-cmf\", \"MANIFEST.MF\", \"redefineagent.jar\", \"RedefinePrimitive.class\") != 0) {\n+            throw new RuntimeException(\"Could not write the agent jar file\");\n+        }\n+    }\n+\n+    public static void main(String argv[]) throws Exception {\n+        if (argv.length == 1 && argv[0].equals(\"buildagent\")) {\n+            buildAgent();\n+            return;\n+        }\n+        if (argv.length == 1 && argv[0].equals(\"runtest\")) {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:MetaspaceSize=12m\",\n+                \"-XX:MaxMetaspaceSize=12m\",\n+                \"-javaagent:redefineagent.jar\",\n+                \"RedefinePrimitive\");\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldNotContain(\"processing of -javaagent failed\");\n+            output.shouldHaveExitValue(0);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/RedefinePrimitive.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}