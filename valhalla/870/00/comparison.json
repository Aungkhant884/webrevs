{"files":[{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8212175\n- * @summary Trouble creating an anonymous value class with diamond syntax\n- * @ignore\n- * @compile -XDenablePrimitiveClasses AnonymousValue.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses AnonymousValue\n- *\/\n-\n-import java.util.function.Function;\n-\n-public class AnonymousValue {\n-\t static Function<String, String> capitalizer() {\n-        return new primitive Function<>() {\n-            int x = 10;\n-\t\t\t@Override\n-\t\t\tpublic String apply(String t) {\n-\t\t\t\treturn t.toUpperCase();\n-\t\t\t}\n-        };\n-\t }\n-     public static void main(String[] args) {\n-\t\t if (!capitalizer().apply(\"blah\").equals(\"BLAH\"))\n-            throw new AssertionError(\"Failed\");\n-\t }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AnonymousValue.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8209400 8215246\n- * @summary Allow anonymous classes to be value types\n- * @ignore\n- * @compile -XDenablePrimitiveClasses AnonymousValueType.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xverify:none AnonymousValueType\n- *\/\n-\n-\n-public class AnonymousValueType {\n-    public static void main(String[] args) {\n-        Object o = new primitive Comparable<String>() {\n-            int x = 10;\n-            @Override\n-            public int compareTo(String o) {\n-                return 0;\n-            }\n-        };\n-        if (!o.toString().equals(\"AnonymousValueType$1@\" + Integer.toHexString(o.hashCode())))\n-            throw new AssertionError(\"Broken\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AnonymousValueType.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222634\n- * @summary Check array creation with V and V.ref\n- * @ignore\n- * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n- * @compile -XDenablePrimitiveClasses ArrayCreationWithQuestion.java\n- * @run main\/othervm -Xverify:none -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ArrayCreationWithQuestion\n- * @modules jdk.compiler\n- *\/\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.nio.file.Paths;\n-\n-public class ArrayCreationWithQuestion {\n-\n-    static primitive class VT {\n-        VT.ref[] a1 = new VT.ref[42];\n-        VT.ref[] a2 = new VT.ref[42];\n-        VT[] a3 = new VT[42];\n-        VT[] a4 = new VT[42];\n-    }\n-\n-    public static void main(String[] args) {\n-        new ArrayCreationWithQuestion().run();\n-    }\n-\n-    void run() {\n-        String [] params = new String [] { \"-v\",\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"ArrayCreationWithQuestion$VT.class\").toString() };\n-        runCheck(params, new String [] {\n-        \"         6: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n-        \"        17: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n-        \"        28: anewarray     #10                 \/\/ class \\\"QArrayCreationWithQuestion$VT;\\\"\",\n-        \"        39: anewarray     #10                 \/\/ class \\\"QArrayCreationWithQuestion$VT;\\\"\",\n-         });\n-\n-     }\n-\n-     void runCheck(String [] params, String [] expectedOut) {\n-        StringWriter s;\n-        String out;\n-\n-        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n-            com.sun.tools.javap.Main.run(params, pw);\n-            out = s.toString();\n-        }\n-        int errors = 0;\n-        for (String eo: expectedOut) {\n-            if (!out.contains(eo)) {\n-                System.err.println(\"Match not found for string: \" + eo);\n-                errors++;\n-            }\n-        }\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ArrayCreationWithQuestion.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222402\n- * @ignore\n- * @summary LW2 array support in javac\n- * @compile -XDenablePrimitiveClasses ArrayRelationsTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses ArrayRelationsTest\n- *\/\n-\n-public primitive class ArrayRelationsTest {\n-\n-    int x = 42;\n-\n-    public static void main(String [] args) {\n-        ArrayRelationsTest.ref [] la = new ArrayRelationsTest.ref[10];\n-        ArrayRelationsTest [] qa = new ArrayRelationsTest[10];\n-        boolean cce = false;\n-        try {\n-            qa = (ArrayRelationsTest[]) (Object []) (new String [10]);\n-        } catch (ClassCastException e) {\n-            cce = true;\n-        }\n-        if (!cce) {\n-            throw new AssertionError(\"Missing CCE\");\n-        }\n-        la = qa;\n-        ArrayRelationsTest.ref[] la2 = qa;\n-        ArrayRelationsTest [] qa2 = (ArrayRelationsTest []) la2;\n-        boolean npe = false;\n-        try {\n-            la2[0] = null;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-        if (!npe) {\n-            throw new AssertionError(\"Missing NPE\");\n-        }\n-        npe = false;\n-        Object [] oa = qa;\n-        try {\n-            oa[0] = null;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-        if (!npe) {\n-            throw new AssertionError(\"Missing NPE\");\n-        }\n-\n-        \/\/ round trip;\n-        Object o = oa = la = qa;\n-        qa = (ArrayRelationsTest[]) (la = (ArrayRelationsTest.ref []) (oa = (Object []) o));\n-        qa [0] = new ArrayRelationsTest();\n-\n-        npe = false;\n-        try {\n-            la[0] = null;\n-        } catch (NullPointerException e) {\n-            npe = true;\n-        }\n-        if (!npe) {\n-            throw new AssertionError(\"Missing NPE\");\n-        }\n-\n-        la = new ArrayRelationsTest.ref [10];\n-\n-        cce = false;\n-        try {\n-            qa = (ArrayRelationsTest[]) la;\n-        } catch (ClassCastException c) {\n-            cce = true;\n-        }\n-        if (!cce) {\n-            throw new AssertionError(\"Unexpected CCE behavior\");\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ArrayRelationsTest.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8222634\n- * @ignore\n- * @summary Check various code snippets that were incorrectly failing to compile.\n- * @compile -XDenablePrimitiveClasses AssortedTests.java\n- *\/\n-\n-primitive class MyValue1 {\n-    final int x = 0;\n-}\n-\n-class X {\n-    static final MyValue1 vField = new MyValue1();\n-\n-    primitive class MyValue2 {\n-        final MyValue1.ref vBoxField;\n-\n-        public MyValue2() {\n-            vBoxField = new MyValue1();\n-        }\n-    }\n-\n-    public static void main(String[] args) { }\n-}\n-\n-primitive class MyValue3 {\n-    final int x = 0;\n-    public int hash() { return 0; }\n-}\n-\n-class Y {\n-\n-    primitive class MyValue4 {\n-        final MyValue3.ref vBoxField = null;\n-\n-        public int test() {\n-            return vBoxField.hash();\n-        }\n-    }\n-\n-    public static void main(String[] args) { }\n-}\n-\n-interface MyInterface {\n-    public void test(MyValue5.ref vt);\n-}\n-\n-primitive class MyValue5 implements MyInterface {\n-    final int x = 0;\n-\n-    @Override\n-    public void test(MyValue5.ref vt) { }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AssortedTests.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary V.ref class should not inadvertently carry over attributes from V.class\n- * @bug 8244713\n- * @ignore\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n- * @compile -XDenablePrimitiveClasses AttributesTest.java\n- * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses AttributesTest\n- *\/\n-\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Class_info;\n-\n-public class AttributesTest {\n-\n-    void foo() {\n-        @Deprecated\n-        primitive class V<T> {}\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        ClassFile cls = ClassFile.read(AttributesTest.class.getResourceAsStream(\"AttributesTest$1V.class\"));\n-\n-        if (cls == null) {\n-            throw new AssertionError(\"Could not locate the class files\");\n-        }\n-\n-        \/* Check emission of inner class attribute *\/\n-        InnerClasses_attribute inners = (InnerClasses_attribute) cls.attributes.get(Attribute.InnerClasses);\n-        if (inners == null) {\n-            throw new AssertionError(\"Missing inner class attribute\");\n-        }\n-        if (inners.number_of_classes != 1) {\n-            throw new AssertionError(\"Unexpected inner class attribute\");\n-        }\n-        String name = inners.classes[0].getInnerName(cls.constant_pool);\n-        if (!name.equals(\"V\")) {\n-            throw new AssertionError(\"Unexpected inner class \" + name);\n-        }\n-\n-        \/\/ Test emission of nest host attribute. Nest members attribute tested in InlineNesting*\n-        NestHost_attribute nestHost = (NestHost_attribute)cls.attributes.get(Attribute.NestHost);\n-        CONSTANT_Class_info host = nestHost != null ? nestHost.getNestTop(cls.constant_pool) : null;\n-        if (host == null || !host.getName().equals(\"AttributesTest\")) {\n-            throw new RuntimeException(\"Wrong Nest host \" + host.getName());\n-        }\n-\n-        \/\/ Test signature attribute\n-        Signature_attribute signature = (Signature_attribute)cls.attributes.get(Attribute.Signature);\n-        String sign =  signature.getSignature(cls.constant_pool);\n-        if (sign == null || !sign.equals(\"<T:Ljava\/lang\/Object;>Ljava\/lang\/Object;\")) {\n-            throw new RuntimeException(\"Wrong signature \" + sign);\n-        }\n-\n-        \/\/ Test SourceFile attribute\n-        SourceFile_attribute source = (SourceFile_attribute)cls.attributes.get(Attribute.SourceFile);\n-        String src =  source.getSourceFile(cls.constant_pool);\n-        if (src == null || !src.equals(\"AttributesTest.java\")) {\n-            throw new RuntimeException(\"Wrong source \" + src);\n-        }\n-\n-        \/\/ Test Deprecated attribute\n-        Deprecated_attribute depr = (Deprecated_attribute) cls.attributes.get(Attribute.Deprecated);\n-        if (depr == null) {\n-            throw new RuntimeException(\"Missing deprecated annotation\");\n-        }\n-\n-        \/\/ Test EnclosingMethod attribute\n-        EnclosingMethod_attribute meth = (EnclosingMethod_attribute) cls.attributes.get(Attribute.EnclosingMethod);\n-        if (meth == null) {\n-            throw new RuntimeException(\"Missing enclosing method attribute\");\n-        }\n-        String mName = meth.getMethodName(cls.constant_pool);\n-        if (mName == null || !mName.equals(\"foo\")) {\n-            throw new RuntimeException(\"Wrong enclosing method \" + mName);\n-        }\n-\n-        \/\/ The following attributes should not be present in the projection file.\n-        String [] shouldBeAbsent = {\n-                                        \"SourceDebugExtension\",\n-                                        \"BootstrapMethods\",\n-                                        \"Module\",\n-                                        \"ModulePackages\",\n-                                        \"ModuleMainClass\",\n-                                        \"Synthetic\",\n-                                   };\n-        for (String attr : shouldBeAbsent) {\n-            if (cls.getAttribute(attr) != null) {\n-                throw new RuntimeException(\"Unexpected attribute: \" + attr);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/AttributesTest.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8208067\n- * @ignore\n- * @summary Verify that instance methods are callable from ctor after all instance fields are DA.\n- * @compile -XDenablePrimitiveClasses CanonicalCtorTest.java\n- * @run main\/othervm -ea -XX:+EnableValhalla -XX:+EnablePrimitiveClasses CanonicalCtorTest\n- *\/\n-\n-public primitive class CanonicalCtorTest {\n-\n-\tprivate final int x, ymx;\n-\n-\tCanonicalCtorTest(int x, int y) {\n-\n-\t\tymx = y - x;\n-\t\tthis.x = x;\n-\n-        \/\/ ALL fields are assigned now.\n-\n-\t\tvalidate();                 \/\/ OK: DU = {}\n-\t\tthis.validate();            \/\/ OK: DU = {}\n-\t\tCanonicalCtorTest.this.validate();          \/\/ OK: DU = {}\n-\n-\t\tassert (this.x > 0);        \/\/ OK: DU = {}\n-\t\tassert (this.y() > 0);      \/\/ OK: DU = {}\n-\t}\n-\n-\tint x() {\n-\t\treturn x;\n-\t}\n-\n-\tint y() {\n-\t\treturn ymx + x;\n-\t}\n-\n-\tvoid validate() {\n-\t\tassert (x() > 0 && y() > 0);\n-\t}\n-\n-\tpublic static void main(String... av) {\n-\t\tCanonicalCtorTest z = new CanonicalCtorTest(1, 10);\n-\t\tassert (z.x() == 1);\n-\t\tassert (z.y() == 10);\n-\t}\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CanonicalCtorTest.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,16 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8237067\n- * @ignore\n- * @summary [lworld] Check good and bad selectors on a type name\n- * @compile\/fail\/ref=CheckBadSelector.out -XDrawDiagnostics -XDenablePrimitiveClasses CheckBadSelector.java\n- *\/\n-\n-primitive final class Point {\n-\n-    void badSelector() {\n-        Class<?> c = int.class;\n-        int i = int.default;\n-        int x = int.whatever;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckBadSelector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-CheckBadSelector.java:13:21: compiler.err.expected2: class, default\n-1 error\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckBadSelector.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,14 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8237067\n- * @ignore\n- * @summary Check that feature gated constructs are not allowed in previous versions.\n- * @compile\/fail\/ref=CheckFeatureGate1.out --release=13 -XDrawDiagnostics CheckFeatureGate1.java\n- *\/\n-\n-public class CheckFeatureGate1 {\n-\n-    static primitive class Val {\n-        public int v = 42;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFeatureGate1.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-CheckFeatureGate1.java:10:12: compiler.err.primitive.classes.not.supported: 21\n-1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CheckFeatureGate1.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8212175\n+ * @summary Trouble creating an anonymous value class with diamond syntax\n+ *\/\n+\n+import java.util.function.Function;\n+\n+public class AnonymousValue {\n+    static Function<String, String> capitalizer() {\n+        return new value Function<>() {\n+            int x = 10;\n+            @Override\n+            public String apply(String t) {\n+                return t.toUpperCase();\n+            }\n+        };\n+    }\n+    public static void main(String[] args) {\n+        if (!capitalizer().apply(\"blah\").equals(\"BLAH\"))\n+            throw new AssertionError(\"Failed\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/AnonymousValue.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8209400 8215246\n+ * @summary Allow anonymous classes to be value types\n+ *\/\n+\n+public class AnonymousValueType {\n+    public static void main(String[] args) {\n+        Object o = new value Comparable<String>() {\n+            int x = 10;\n+            @Override\n+            public int compareTo(String o) {\n+                return 0;\n+            }\n+        };\n+        if (!o.toString().equals(\"AnonymousValueType$1@\" + Integer.toHexString(o.hashCode())))\n+            throw new AssertionError(\"Broken\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/AnonymousValueType.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8222634\n+ * @summary Check array creation with V and V.ref\n+ * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n+ * @modules jdk.compiler\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Paths;\n+\n+public class ArrayCreationWithQuestion {\n+\n+    static value class VT {\n+        VT[] a3 = new VT[42];\n+        VT[] a4 = new VT[42];\n+    }\n+\n+    public static void main(String[] args) {\n+        new ArrayCreationWithQuestion().run();\n+    }\n+\n+    void run() {\n+        String [] params = new String [] { \"-v\",\n+                                            Paths.get(System.getProperty(\"test.classes\"),\n+                                                \"ArrayCreationWithQuestion$VT.class\").toString() };\n+        runCheck(params, new String [] {\n+        \"         6: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n+        \"        17: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n+         });\n+     }\n+\n+     void runCheck(String [] params, String [] expectedOut) {\n+        StringWriter s;\n+        String out;\n+\n+        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n+            com.sun.tools.javap.Main.run(params, pw);\n+            out = s.toString();\n+        }\n+        int errors = 0;\n+        for (String eo: expectedOut) {\n+            if (!out.contains(eo)) {\n+                System.err.println(\"Match not found for string: \" + eo);\n+                errors++;\n+            }\n+        }\n+         if (errors > 0) {\n+             throw new AssertionError(\"Unexpected javap output: \" + out);\n+         }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ArrayCreationWithQuestion.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8208067\n+ * @summary Verify that instance methods are callable from ctor after all instance fields are DA.\n+ *\/\n+\n+public value class CanonicalCtorTest {\n+\n+    private final int x, ymx;\n+\n+    CanonicalCtorTest(int x, int y) {\n+\n+        ymx = y - x;\n+        this.x = x;\n+\n+        \/\/ ALL fields are assigned now.\n+\n+        validate();                 \/\/ OK: DU = {}\n+        this.validate();            \/\/ OK: DU = {}\n+        CanonicalCtorTest.this.validate();          \/\/ OK: DU = {}\n+\n+        assert (this.x > 0);        \/\/ OK: DU = {}\n+        assert (this.y() > 0);      \/\/ OK: DU = {}\n+    }\n+\n+    int x() {\n+        return x;\n+    }\n+\n+    int y() {\n+        return ymx + x;\n+    }\n+\n+    void validate() {\n+        assert (x() > 0 && y() > 0);\n+    }\n+\n+    public static void main(String... av) {\n+        CanonicalCtorTest z = new CanonicalCtorTest(1, 10);\n+        assert (z.x() == 1);\n+        assert (z.y() == 10);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CanonicalCtorTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -841,0 +841,30 @@\n+\n+    public void testSelectors() throws Exception {\n+        assertOK(\n+                \"\"\"\n+                value class V {\n+                    void selector() {\n+                        Class<?> c = int.class;\n+                    }\n+                }\n+                \"\"\"\n+        );\n+        assertOK(\n+                \"\"\"\n+                value class V {\n+                    void selector() {\n+                        int i = int.default;\n+                    }\n+                }\n+                \"\"\"\n+        );\n+        assertFail(\"compiler.err.expected2\",\n+                \"\"\"\n+                value class V {\n+                    void selector() {\n+                        int i = int.some_selector;\n+                    }\n+                }\n+                \"\"\"\n+        );\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}