{"files":[{"patch":"@@ -641,2 +641,5 @@\n-     * {@return {@code true} if this class is an identity class, otherwise {@code false}}\n-     * If this {@code Class} object represents an array type, then this method returns {@code true}.\n+     * {@return {@code true} if this {@code Class} object represents an identity\n+     * class or interface; otherwise {@code false}}\n+     *\n+     * If this {@code Class} object represents an array type, then this method\n+     * returns {@code true}.\n@@ -649,3 +652,5 @@\n-        return !ValhallaFeatures.isEnabled() ||  \/\/ Before Valhalla all classes are identity classes\n-                (this.getModifiers() & Modifier.IDENTITY) != 0 ||\n-                isArray();\n+        if (!ValhallaFeatures.isEnabled()) {\n+            \/\/ by default interfaces are not an identity interface\n+            return !isInterface();\n+        }\n+        return (this.getModifiers() & Modifier.IDENTITY) != 0 || isArray();\n@@ -655,1 +660,3 @@\n-     * {@return {@code true} if this class is a value class, otherwise {@code false}}\n+     * {@return {@code true} if this {@code Class} object represents a value\n+     * class or interface; otherwise {@code false}}\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -203,0 +203,7 @@\n+        if (interfaceClass.isIdentity() || interfaceClass.isValue()) {\n+            throw new LambdaConversionException(String.format(\n+                    \"%s is %s interface\",\n+                    interfaceClass.getName(),\n+                    interfaceClass.isIdentity() ? \"an identity\" : \"a value\"));\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -315,1 +315,2 @@\n-     *         an interface, or if {@code implementation} is not a direct method\n+     *         an interface, or if the return type of {@code factoryType} is a value\n+     *         interface, or if {@code implementation} is not a direct method\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/LambdaConversion.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/valhalla\/valuetypes\/LambdaConversion.java","status":"renamed"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @modules jdk.compiler\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Utils\n+ *        jdk.test.lib.compiler.CompilerUtils\n+ * @run junit LambdaMetaFactoryTest\n+ * @summary LambdaMetaFactory rejects value or identity superinterface\n+ *\/\n+\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.Utils;\n+\n+import java.io.IOException;\n+import java.lang.invoke.LambdaConversionException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class LambdaMetaFactoryTest {\n+    private static final Path SRC_DIR = Paths.get(Utils.TEST_SRC);\n+    private static final Path CLASSES_DIR = Paths.get(\"classes\");\n+\n+    @BeforeAll\n+    static void setup() throws IOException {\n+        \/\/ IdentityRunnable and ValueRunnable under the src directory are non-identity\n+        \/\/ and non-value interface to get Test class to compile\n+        assertTrue(CompilerUtils.compile(SRC_DIR.resolve(\"src\"), CLASSES_DIR));\n+\n+        \/\/ compile the proper version of IdentityRunnable and ValueRunnable\n+        assertTrue(CompilerUtils.compile(SRC_DIR.resolve(\"patch\"), CLASSES_DIR));\n+    }\n+\n+    @Test\n+    public void testValueRunnable() throws Throwable {\n+        URLClassLoader loader = new URLClassLoader(\"loader\",\n+                                                   new URL[]{ CLASSES_DIR.toUri().toURL()},\n+                                                   ClassLoader.getPlatformClassLoader());\n+        Class<?> testClass = Class.forName(\"Test\", false, loader);\n+        Method m = testClass.getMethod(\"testValueRunnable\");\n+        try {\n+            m.invoke(null);\n+        } catch (InvocationTargetException e) {\n+            Throwable bme = e.getCause();\n+            assertTrue(bme.getCause() instanceof LambdaConversionException);\n+            assertTrue(bme.getCause().getMessage().contains(\"ValueRunnable is a value interface\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testIdentityRunnable() throws Throwable {\n+        URLClassLoader loader = new URLClassLoader(\"loader\",\n+                                                   new URL[]{ CLASSES_DIR.toUri().toURL()},\n+                                                   ClassLoader.getPlatformClassLoader());\n+        Class<?> testClass = Class.forName(\"Test\", false, loader);\n+        Method m = testClass.getMethod(\"testIdentityRunnable\");\n+        try {\n+            m.invoke(null);\n+        } catch (InvocationTargetException e) {\n+            Throwable bme = e.getCause();\n+            assertTrue(bme.getCause() instanceof LambdaConversionException);\n+            assertTrue(bme.getCause().getMessage().contains(\"IdentityRunnable is an identity interface\"));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/LambdaMetaFactoryTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/LambdaTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/valhalla\/valuetypes\/LambdaTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public identity interface IdentityRunnable {\n+    void run();\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/patch\/IdentityRunnable.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public value interface ValueRunnable {\n+     void run();\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/patch\/ValueRunnable.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public interface IdentityRunnable {\n+    void run();\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/src\/IdentityRunnable.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class Test {\n+    public static void testValueRunnable() {\n+        ValueRunnable r = () -> {\n+            System.out.println(\"ValueRunnable::run\");\n+        };\n+        r.run();\n+    }\n+\n+    public static void testIdentityRunnable() {\n+        IdentityRunnable r = () -> {\n+            System.out.println(\"IdentityRunnable::run\");\n+        };\n+        r.run();\n+    }\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/src\/Test.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public interface ValueRunnable {\n+     void run();\n+}\n","filename":"test\/jdk\/valhalla\/valuetypes\/LambdaMetaFactory\/src\/ValueRunnable.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"}]}