{"files":[{"patch":"@@ -1045,5 +1045,11 @@\n-      NewInlineTypeInstance* new_instance = new NewInlineTypeInstance(elem_klass, state_before);\n-      _memory->new_instance(new_instance);\n-      apush(append_split(new_instance));\n-      load_indexed = new LoadIndexed(array, index, length, type, state_before);\n-      load_indexed->set_vt(new_instance);\n+      if (elem_klass->is_empty()) {\n+        \/\/ No need to create a new instance, the default instance will be used instead\n+        load_indexed = new LoadIndexed(array, index, length, type, state_before);\n+        apush(append(load_indexed));\n+      } else {\n+        NewInlineTypeInstance* new_instance = new NewInlineTypeInstance(elem_klass, state_before);\n+        _memory->new_instance(new_instance);\n+        apush(append_split(new_instance));\n+        load_indexed = new LoadIndexed(array, index, length, type, state_before);\n+        load_indexed->set_vt(new_instance);\n+      }\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1828,1 +1828,4 @@\n-    access_flattened_array(false, array, index, value);\n+    \/\/ If array element is an empty inline type, no need to copy anything\n+    if (!x->array()->declared_type()->as_flat_array_klass()->element_klass()->as_inline_klass()->is_empty()) {\n+      access_flattened_array(false, array, index, value);\n+    }\n@@ -2202,0 +2205,7 @@\n+  } else if (x->array() != NULL && x->array()->is_loaded_flattened_array() &&\n+             x->array()->declared_type()->as_flat_array_klass()->element_klass()->as_inline_klass()->is_empty()) {\n+    \/\/ Load the default instance instead of reading the element\n+    ciInlineKlass* elem_klass = x->array()->declared_type()->as_flat_array_klass()->element_klass()->as_inline_klass();\n+    LIR_Opr result = rlock_result(x, x->elt_type());\n+    Constant* default_value = new Constant(new InstanceConstant(elem_klass->default_instance()));\n+    __ move(load_constant(default_value), result);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -288,0 +288,94 @@\n+\n+    \/\/ Test optimizations for arrays of empty types\n+    \/\/ (ead\/write are not performed, pre-allocated instance is used for reads)\n+    \/\/ Most tests check that error conditions are still correctly handled\n+    \/\/ (OOB, null pointer)\n+    static inline class EmptyType {}\n+\n+    @Test(compLevel=C1)\n+    public EmptyType test9() {\n+        EmptyType[] array = new EmptyType[10];\n+        return array[4];\n+    }\n+\n+    @DontCompile\n+    public void test9_verifier(boolean warmup) {\n+        EmptyType et = test9();\n+        Asserts.assertEQ(et, EmptyType.default);\n+    }\n+\n+    @Test(compLevel=C1)\n+    public EmptyType test10(EmptyType[] array) {\n+        return array[0];\n+    }\n+\n+    @DontCompile\n+    public void test10_verifier(boolean warmup) {\n+        EmptyType[] array = new EmptyType[16];\n+        EmptyType et = test10(array);\n+        Asserts.assertEQ(et, EmptyType.default);\n+    }\n+\n+    @Test(compLevel=C1)\n+    public EmptyType test11(EmptyType[] array, int index) {\n+        return array[index];\n+    }\n+\n+    @DontCompile\n+    public void test11_verifier(boolean warmup) {\n+        Exception e = null;\n+        EmptyType[] array = new EmptyType[10];\n+        try {\n+            EmptyType et  = test11(array, 11);\n+        } catch (ArrayIndexOutOfBoundsException ex) {\n+            e = ex;\n+        }\n+        Asserts.assertNotNull(e);\n+        e = null;\n+        try {\n+            EmptyType et  = test11(array, -1);\n+        } catch (ArrayIndexOutOfBoundsException ex) {\n+            e = ex;\n+        }\n+        Asserts.assertNotNull(e);\n+        e = null;\n+        try {\n+            EmptyType et  = test11(null, 1);\n+        } catch (NullPointerException ex) {\n+            e = ex;\n+        }\n+        Asserts.assertNotNull(e);\n+    }\n+\n+    @Test(compLevel=C1)\n+    public void test12(EmptyType[] array, int index, EmptyType value) {\n+        array[index] = value;\n+    }\n+\n+    @DontCompile\n+    public void test12_verifier(boolean warmup) {\n+        EmptyType[] array = new EmptyType[16];\n+        test12(array, 2, EmptyType.default);\n+        Exception e = null;\n+        try {\n+            test12(null, 2, EmptyType.default);\n+        } catch(NullPointerException ex) {\n+            e = ex;\n+        }\n+        Asserts.assertNotNull(e);\n+        e = null;\n+        try {\n+            test12(array, 17, EmptyType.default);\n+        } catch(ArrayIndexOutOfBoundsException ex) {\n+            e = ex;\n+        }\n+        Asserts.assertNotNull(e);\n+        e = null;\n+        try {\n+            test12(array, -8, EmptyType.default);\n+        } catch(ArrayIndexOutOfBoundsException ex) {\n+            e = ex;\n+        }\n+        Asserts.assertNotNull(e);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestC1.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"modified"}]}