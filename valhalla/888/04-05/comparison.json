{"files":[{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @bug 8311219\n+ * @summary VM option \"InlineFieldMaxFlatSize\" cannot work well\n+ * @library \/test\/lib \/\n+ * @compile -XDenablePrimitiveClasses -source 21\n+ *          TestInlineFieldNonFlattened.java\n+ *\n+ * @run main\/othervm -XX:+EnableValhalla\n+ *                   -XX:+EnablePrimitiveClasses\n+ *                   -XX:-TieredCompilation\n+ *                   -XX:InlineFieldMaxFlatSize=0\n+ *                   compiler.valhalla.inlinetypes.TestInlineFieldNonFlattened\n+ *\/\n+\n+public class TestInlineFieldNonFlattened {\n+    static class MyClass {\n+        public final MyValue v1 = new MyValue(5);\n+\n+        public MyValue v2;\n+\n+        public MyClass(MyValue v) {\n+            v2 = v;\n+        }\n+    }\n+\n+    static primitive class MyValue {\n+        public int field;\n+\n+        public MyValue(int f) {\n+            field = f;\n+        }\n+    }\n+\n+    private static final Random RD = Utils.getRandomInstance();\n+\n+    static MyClass c;\n+\n+    static {\n+        c = new MyClass(new MyValue(RD.nextInt(100)));\n+    }\n+\n+    static int f;\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_N, \"2\"})\n+    public static void testNonFlattenedField() {\n+        f = c.v2.field;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_N, \"2\"})\n+    public static void testNonFlattenedFinalField() {\n+        f = c.v1.field;\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework testFramework = new TestFramework();\n+        testFramework.setDefaultWarmup(10000)\n+                     .addFlags(\"-XX:+EnableValhalla\",\n+                               \"-XX:+EnablePrimitiveClasses\",\n+                               \"-XX:-TieredCompilation\",\n+                               \"-XX:InlineFieldMaxFlatSize=0\")\n+                     .start();\n+    }\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestInlineFieldNonFlattened.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}