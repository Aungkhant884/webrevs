{"files":[{"patch":"@@ -426,14 +426,0 @@\n-    \/**\n-     * Returns a new Object implementing the {@code IdentityObject} interface.\n-     * The object is a unique {@link IdentityObject} suitable for all purposes\n-     * for which {@code new Object{}} was used including synchronization,\n-     * mutexes and unique placeholders.\n-     *\n-     * @return a new Object implementing the IdentityObject interface\n-     * @since Valhalla\n-     *\/\n-    public static IdentityObject newIdentity() {\n-        \/\/ Return a new instance of an anonymous inner class.\n-        return new IdentityObject() { };\n-    }\n-\n@@ -515,0 +501,11 @@\n+    \/**\n+     * {@return a new instance of an unspecified class}\n+     * The object has a unique identity; no other references to it exist.\n+     * It can be used for synchronization, or where a placeholder Object is needed.\n+     * Use this method to avoid relying on the {@linkplain Object#Object() Object constructor}.\n+     *\n+     * @since 17\n+     *\/\n+    public static Object newIdentity() {\n+        return new Object() {};\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+        errors += testNewIdentity();\n@@ -278,0 +279,15 @@\n+\n+    private static int testNewIdentity() {\n+        int errors = 0;\n+\n+        Object o1 = Objects.newIdentity();\n+        Object o2 = Objects.newIdentity();\n+\n+        if (o1 == null || o2 == null)\n+            errors += 1;\n+\n+        if (o1 == o2)\n+            errors += 1;\n+\n+        return errors;\n+    }\n","filename":"test\/jdk\/java\/util\/Objects\/BasicObjectsTest.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}