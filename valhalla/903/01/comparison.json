{"files":[{"patch":"@@ -412,1 +412,1 @@\n-        return (flags() & INTERFACE) != 0;\n+        return (flags_field & INTERFACE) != 0;\n@@ -424,1 +424,1 @@\n-        return !isInterface() && (flags() & VALUE_CLASS) != 0;\n+        return !isInterface() && (flags_field & VALUE_CLASS) != 0;\n@@ -432,1 +432,1 @@\n-        return !isInterface() && (flags() & IDENTITY_TYPE) != 0;\n+        return !isInterface() && (flags_field & IDENTITY_TYPE) != 0;\n@@ -436,1 +436,1 @@\n-        return isInterface() && (flags() & VALUE_CLASS) != 0;\n+        return isInterface() && (flags_field & VALUE_CLASS) != 0;\n@@ -440,1 +440,1 @@\n-        return isInterface() && (flags() & IDENTITY_TYPE) != 0;\n+        return isInterface() && (flags_field & IDENTITY_TYPE) != 0;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2516,0 +2516,3 @@\n+        if (!tree.sym.type.hasImplicitConstructor()) {\n+            return;\n+        }\n@@ -2548,1 +2551,1 @@\n-            return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass() && symbol.type.isNonNullable();\n+            return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass() && symbol.type.hasImplicitConstructor() && symbol.type.isNonNullable();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+import com.sun.tools.javac.resources.CompilerProperties;\n@@ -77,0 +78,1 @@\n+import static com.sun.tools.javac.code.Scope.LookupKind.NON_RECURSIVE;\n@@ -2727,1 +2729,3 @@\n-        for (int i = 0; i < fieldCount; i++) enterMember(c, readField());\n+        for (int i = 0; i < fieldCount; i++) {\n+            enterMember(c, readField());\n+        }\n@@ -2896,0 +2900,2 @@\n+        \/\/ we need to do some checks now that the class has been loaded\n+        checkNonCyclicMembership(c);\n@@ -3172,0 +3178,51 @@\n+\n+    \/\/ A value class cannot contain a non-nullable instance field of its own type either directly or indirectly.\n+    void checkNonCyclicMembership(ClassSymbol csym) {\n+        if (!csym.type.hasImplicitConstructor()) {\n+            \/\/ nothing to see here\n+            return;\n+        }\n+        Assert.check((csym.flags_field & LOCKED) == 0);\n+        try {\n+            ListBuffer<Symbol> fields = new ListBuffer<>();\n+            \/\/ invoking c::members can provoke symbol completion and thus the LOCKED flag can be set before expected\n+            for (Symbol field : csym.members().getSymbols(s -> s.kind == VAR && cyclePossible((VarSymbol) s), NON_RECURSIVE)) {\n+                fields.add(field);\n+            }\n+            csym.flags_field |= LOCKED;\n+            for (Symbol field : fields) {\n+                checkNonCyclicMembershipHelper((ClassSymbol) field.type.tsym);\n+            }\n+        } finally {\n+            csym.flags_field &= ~LOCKED;\n+        }\n+    }\n+    \/\/ where\n+    private void checkNonCyclicMembershipHelper(ClassSymbol c) {\n+        if ((c.flags_field & LOCKED) != 0) {\n+            JavaFileObject prevSource = log.useSource(currentClassFile);\n+            try {\n+                log.error(CompilerProperties.Errors.CyclicPrimitiveClassMembership(c));\n+                return;\n+            } finally {\n+                log.useSource(prevSource);\n+            }\n+        }\n+        try {\n+            ListBuffer<Symbol> fields = new ListBuffer<>();\n+            \/\/ invoking c::members can provoke symbol completion and thus the LOCKED flag can be set before expected\n+            for (Symbol fld : c.members().getSymbols(s -> s.kind == VAR && cyclePossible((VarSymbol) s), NON_RECURSIVE)) {\n+                fields.add(fld);\n+            }\n+            c.flags_field |= LOCKED;\n+            for (Symbol field : fields) {\n+                checkNonCyclicMembershipHelper((ClassSymbol) field.type.tsym);\n+            }\n+        } finally {\n+            c.flags_field &= ~LOCKED;\n+        }\n+    }\n+    \/\/ where\n+    private boolean cyclePossible(VarSymbol symbol) {\n+        return (symbol.flags() & STATIC) == 0 && symbol.type.isValueClass() && symbol.type.hasImplicitConstructor() && symbol.type.isNonNullable();\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -0,0 +1,10 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8314165\n+ * @summary check for illegal circularity at class loading time\n+ * @build CyclicValueClass\n+ * @compile\/fail\/ref=CheckForCyclesAtClassLoadingTimeTest.out -XDrawDiagnostics CheckForCyclesAtClassLoadingTimeTest.java\n+ *\/\n+class CheckForCyclesAtClassLoadingTimeTest {\n+    CyclicValueClass cyclicValueClass;\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/cycles\/CheckForCyclesAtClassLoadingTimeTest.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+CyclicValueClass.class:-:-: compiler.err.cyclic.primitive.class.membership: CyclicValueClass\n+1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/cycles\/CheckForCyclesAtClassLoadingTimeTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+class CyclicValueClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  66; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"CyclicValueClass\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"cyclicField\"; \/\/ #5\n+    Utf8 \"LCyclicValueClass;\"; \/\/ #6\n+    Utf8 \"NullRestricted\"; \/\/ #7\n+    Utf8 \"<vnew>\"; \/\/ #8\n+    Utf8 \"()LCyclicValueClass;\"; \/\/ #9\n+    Utf8 \"Code\"; \/\/ #10\n+    Utf8 \"LineNumberTable\"; \/\/ #11\n+    Utf8 \"SourceFile\"; \/\/ #12\n+    Utf8 \"CyclicValueClass.java\"; \/\/ #13\n+    Utf8 \"ImplicitCreation\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ NullRestricted\n+        } \/\/ end NullRestricted\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0009; \/\/ access\n+      #8; \/\/ name_index\n+      #9; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#10) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#11) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  4;\n+                4  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#12) { \/\/ SourceFile\n+      #13;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#14) { \/\/ ImplicitCreation\n+      0x0001;\n+    } \/\/ end ImplicitCreation\n+  } \/\/ Attributes\n+} \/\/ end class CyclicValueClass\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/cycles\/CyclicValueClass.jcod","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}