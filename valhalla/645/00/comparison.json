{"files":[{"patch":"@@ -5213,6 +5213,8 @@\n-      \/\/ Can't enable this check until JDK upgrades the bytecode generators\n-      \/\/ if (_major_version < CONSTANT_CLASS_DESCRIPTORS ) {\n-      \/\/   classfile_parse_error(\"Class name contains illegal Q-signature \"\n-      \/\/                                    \"in descriptor in class file %s\",\n-      \/\/                                    CHECK_0);\n-      \/\/ }\n+      \/\/ Can't enable this check fully until JDK upgrades the bytecode generators.\n+      \/\/ For now, compare to class file version 51 so old verifier doesn't see Q signatures.\n+      if (_major_version < 51 \/* CONSTANT_CLASS_DESCRIPTORS *\/ ) {\n+        classfile_parse_error(\"Class name contains illegal Q-signature \"\n+                              \"in descriptor in class file %s\",\n+                              CHECK_0);\n+        return NULL;\n+      }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3727,1 +3727,0 @@\n-          case JVM_SIGNATURE_PRIMITIVE_OBJECT:\n@@ -3733,1 +3732,1 @@\n-            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n+            if (*p == JVM_SIGNATURE_CLASS) {\n@@ -3812,2 +3811,1 @@\n-            case JVM_SIGNATURE_CLASS:\n-            case JVM_SIGNATURE_PRIMITIVE_OBJECT: {\n+            case JVM_SIGNATURE_CLASS: {\n@@ -4196,1 +4194,0 @@\n-          case JVM_SIGNATURE_PRIMITIVE_OBJECT:\n@@ -4204,1 +4201,1 @@\n-            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_PRIMITIVE_OBJECT) {\n+            if (*p == JVM_SIGNATURE_CLASS) {\n","filename":"src\/java.base\/share\/native\/libverify\/check_code.c","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,0 +93,3 @@\n+\n+        runTest(\"QInOldClass\",\n+                \"Class name contains illegal Q-signature in descriptor in class file QInOldClass\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/BadInlineTypes.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-\/\/ The .jcod classes were originally generated from this Java file and then\n+\/\/ Many of these test were originally generated from this Java file and then\n@@ -2571,0 +2571,126 @@\n+\n+\n+\/\/ This class file tests that a ClassFormatError exception is thrown for an old\n+\/\/ class file (version 49) containing a Q signature.  This file is based on the\n+\/\/ following Java code, except the signature for method callDot() was changed\n+\/\/ to \"(QDot;)V\";.\n+\/*\n+public class QInOldClass {\n+\n+    public static void callDot(Dot d) {\n+        System.out.println(\"Hi Dot\");\n+    }\n+\n+}\n+*\/\n+class QInOldClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  49; \/\/ version\n+  [32] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n+    Utf8 \"out\"; \/\/ #11     at 0x59\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n+    String #14; \/\/ #13     at 0x77\n+    Utf8 \"Hi Dot\"; \/\/ #14     at 0x7A\n+    Method #16 #17; \/\/ #15     at 0x83\n+    class #18; \/\/ #16     at 0x88\n+    NameAndType #19 #20; \/\/ #17     at 0x8B\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x90\n+    Utf8 \"println\"; \/\/ #19     at 0xA6\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xB0\n+    class #22; \/\/ #21     at 0xC8\n+    Utf8 \"QInOldClass\"; \/\/ #22     at 0xCB\n+    Utf8 \"Code\"; \/\/ #23     at 0xD6\n+    Utf8 \"LineNumberTable\"; \/\/ #24     at 0xDD\n+    Utf8 \"callDot\"; \/\/ #25     at 0xEF\n+    Utf8 \"(QDot;)V\"; \/\/ #26     at 0xF9\n+    Utf8 \"SourceFile\"; \/\/ #27     at 0x0104\n+    Utf8 \"QInOldClass.java\"; \/\/ #28     at 0x0111\n+    Utf8 \"Preload\"; \/\/ #29     at 0x0121\n+    class #31; \/\/ #30     at 0x012B\n+    Utf8 \"Dot\"; \/\/ #31     at 0x012E\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n+  #21;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x0140\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#23, 29) { \/\/ Code at 0x0148\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#24, 6) { \/\/ LineNumberTable at 0x015F\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0x016B\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x016B\n+      0x0009; \/\/ access\n+      #25; \/\/ name_index       : callDot\n+      #26; \/\/ descriptor_index : (LDot;)V\n+      [1] { \/\/ Attributes\n+        Attr(#23, 37) { \/\/ Code at 0x0173\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[9]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#24, 10) { \/\/ LineNumberTable at 0x018E\n+              [2] { \/\/ line_number_table\n+                0  5; \/\/  at 0x019A\n+                8  6; \/\/  at 0x019E\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [2] { \/\/ Attributes\n+    Attr(#27, 2) { \/\/ SourceFile at 0x01A0\n+      #28;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#29, 4) { \/\/ Preload at 0x01A8\n+      0x0001001E;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class QInOldClass\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/cfpTests.jcod","additions":128,"deletions":2,"binary":false,"changes":130,"status":"modified"}]}