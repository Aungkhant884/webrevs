{"files":[{"patch":"@@ -325,0 +325,89 @@\n+\n+    public void testIllegalModifiers() {\n+        assertFail(\"compiler.err.illegal.combination.of.modifiers\", \"primitive interface I {}\");\n+        assertFail(\"compiler.err.mod.not.allowed.here\",\n+                \"\"\"\n+                class Test {\n+                    primitive public void m() {}\n+                }\n+                \"\"\");\n+        \/*\n+        \/\/ this test is passing, not sure if this is correct\n+        assertFail(\"compiler.err.mod.not.allowed.here\",\n+                \"\"\"\n+                class Test {\n+                    interface I {}\n+                    void m() {\n+                        new primitive I() {};\n+                    }\n+                }\n+                \"\"\");\n+        *\/\n+    }\n+\n+    public void testPrimitivesAsTypeParams() {\n+        String[] sources = new String[] {\n+                \"\"\"\n+                import java.util.ArrayList;\n+                primitive class ValueOverGenericsTest {\n+                    ArrayList<ValueOverGenericsTest> ax = null;\n+                }\n+                \"\"\",\n+                \"\"\"\n+                import java.util.ArrayList;\n+                primitive class ValueOverGenericsTest {\n+                    void foo(ArrayList<? extends ValueOverGenericsTest> p) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                import java.util.ArrayList;\n+                primitive class ValueOverGenericsTest {\n+                    void foo() {\n+                        new <ValueOverGenericsTest> ArrayList<Object>();\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                import java.util.ArrayList;\n+                primitive class ValueOverGenericsTest {\n+                    void foo() {\n+                        this.<ValueOverGenericsTest>foo();\n+                    }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                import java.util.ArrayList;\n+                primitive class ValueOverGenericsTest {\n+                    void foo() {\n+                        Object o = (ValueOverGenericsTest & Serializable) null;\n+                    }\n+                }\n+                \"\"\",\n+        };\n+        for (String source : sources) {\n+            assertFail(\"compiler.err.type.found.req\", source);\n+        }\n+    }\n+\n+    public void testLocalPrimitiveClasses() {\n+        assertFail(\"compiler.err.cant.inherit.from.final\",\n+                \"\"\"\n+                class ValueModifierTest {\n+                    interface Value {}\n+                    void goo() {\n+                        primitive class Value {}\n+                        new Value() {};\n+                    }\n+                }\n+                \"\"\");\n+        assertFail(\"compiler.err.cant.inherit.from.final\",\n+                \"\"\"\n+                class ValueModifierTest {\n+                    interface Value {}\n+                    void goo() {\n+                        primitive class Value {}\n+                        new primitive Value() {};\n+                    }\n+                }\n+                \"\"\");\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveClassesCompilationTests.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -1,15 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check valueness via __value__ annotation\n- * @bug 8221699\n- * @compile\/fail\/ref=ValueAnnotationOnAnonymousClass.out -XDrawDiagnostics -XDenablePrimitiveClasses ValueAnnotationOnAnonymousClass.java\n- *\/\n-\n-class ValueAnnotationOnAnonymousClass {\n-    interface I {}\n-    primitive\n-    public static void main(String args []) {\n-        new primitive I() {\n-        };\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationOnAnonymousClass.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-ValueAnnotationOnAnonymousClass.java:11:24: compiler.err.mod.not.allowed.here: primitive\n-1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationOnAnonymousClass.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Check valueness via __value__ annotation\n- * @bug 8221699\n- * @compile\/fail\/ref=ValueAnnotationTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ValueAnnotationTest.java\n- *\/\n-\n-primitive\n-class ValueAnnotationTest01 extends Object { \n-}\n-\n-primitive\n-class ValueAnnotationTest02 { \n-}\n-\n-primitive\n-class ValueAnnotationTest03  { \n-    int x = 10;\n-    ValueAnnotationTest03() {\n-        x = 20;\n-    }\n-}\n-\n-primitive\n-interface ValueAnnotationTest04 { \n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationTest.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -1,3 +0,0 @@\n-ValueAnnotationTest.java:25:1: compiler.err.illegal.combination.of.modifiers: interface, primitive\n-ValueAnnotationTest.java:20:9: compiler.err.cant.assign.val.to.final.var: x\n-2 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationTest.out","additions":0,"deletions":3,"binary":false,"changes":3,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8211910 8215246\n- * @summary Reinstate support for local value classes.\n- * @compile\/fail\/ref=ValueModifierTest.out -XDrawDiagnostics -XDdev -XDenablePrimitiveClasses ValueModifierTest.java\n- *\/\n-\n-public class ValueModifierTest {\n-    interface Value {}\n-    void foo() {\n-        new primitive Value() {};\n-    }\n-    void goo() {\n-        primitive class Value {}\n-        new Value() {};\n-        new primitive Value() {};\n-        new Value();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueModifierTest.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-ValueModifierTest.java:15:13: compiler.err.cant.inherit.from.final: Value\n-ValueModifierTest.java:15:21: compiler.err.identity.type.has.value.super.type: compiler.misc.anonymous.class: Value, Value\n-ValueModifierTest.java:16:23: compiler.err.cant.inherit.from.final: Value\n-ValueModifierTest.java:16:31: compiler.err.concrete.supertype.for.value.class: compiler.misc.anonymous.class: ValueModifierTest$3, Value\n-4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueModifierTest.out","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Value types cannot parameterize generic types (except under experimental mode)\n- * @compile\/fail\/ref=ValueOverGenericsTest.out -XDrawDiagnostics -XDenablePrimitiveClasses ValueOverGenericsTest.java\n- *\n- *\/\n-\n-import java.util.ArrayList;\n-import java.io.Serializable;\n-\n-primitive class ValueOverGenericsTest {\n-    int x = 10;\n-    ArrayList<ValueOverGenericsTest> ax = null;\n-    void foo(ArrayList<? extends ValueOverGenericsTest> p) {\n-        new <ValueOverGenericsTest> ArrayList<Object>();\n-        this.<ValueOverGenericsTest>foo(null);\n-        Object o = (ValueOverGenericsTest & Serializable) null;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueOverGenericsTest.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-ValueOverGenericsTest.java:13:15: compiler.err.type.found.req: ValueOverGenericsTest, (compiler.misc.type.req.ref)\n-ValueOverGenericsTest.java:14:24: compiler.err.type.found.req: ValueOverGenericsTest, (compiler.misc.type.req.ref)\n-ValueOverGenericsTest.java:15:14: compiler.err.type.found.req: ValueOverGenericsTest, (compiler.misc.type.req.ref)\n-ValueOverGenericsTest.java:16:15: compiler.err.type.found.req: ValueOverGenericsTest, (compiler.misc.type.req.ref)\n-ValueOverGenericsTest.java:17:21: compiler.err.type.found.req: ValueOverGenericsTest, (compiler.misc.type.req.ref)\n-ValueOverGenericsTest.java:17:59: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, ValueOverGenericsTest&java.io.Serializable)\n-6 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueOverGenericsTest.out","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"}]}