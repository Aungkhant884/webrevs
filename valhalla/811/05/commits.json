[{"commit":{"message":"remaining tests"},"files":[{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralTypingNegativeTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ClassLiteralTypingNegativeTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConditionalTypeTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConditionalTypeTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConflictingSuperInterfaceTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ConflictingSuperInterfaceTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveClassesCompilationTests.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java"}],"sha":"fdc0281f86a8cd646ae94e4a18163a1b565eee83"},{"commit":{"message":"additional changes"},"files":[{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CovariantArrayTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/CovariantArrayTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/FlattenableNegativeTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/FlattenableNegativeTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericArrayTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericArrayTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericInlineTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericInlineTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IllegalByValueTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IllegalByValueTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/MiscThisLeak.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/MiscThisLeak.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveAsTypeName.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveAsTypeName.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveClassesCompilationTests.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValRefTokensNegativeTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValRefTokensNegativeTest.out"}],"sha":"ff004449af3ff32259e46a7ffb87e1424009a253"},{"commit":{"message":"Merge branch 'JDK-8297207' of https:\/\/github.com\/vicente-romero-oracle\/valhalla into JDK-8297207"},"files":[],"sha":"1d4d77d5ae10e251b90c1b8e053d87ba0719d4f7"},{"commit":{"message":"integrating more tests"},"files":[],"sha":"3006e38889838bebc8ae1ef964c005158a916763"},{"commit":{"message":"integrating more tests"},"files":[{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DualPathInnerType.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DualPathInnerType.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsWithQuestion.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsWithQuestion.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IllegalByValueTest2.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/IllegalByValueTest2.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineAnnotationOnAnonymousClass.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineAnnotationOnAnonymousClass.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineAnnotationTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/InlineAnnotationTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoVolatileFields.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/NoVolatileFields.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/OverloadingPhaseTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/OverloadingPhaseTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveClassesCompilationTests.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProjectionInstantiationTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ProjectionInstantiationTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperCallInCtor.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperCallInCtor.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperclassConstraints.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperclassConstraints.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TypeRelationsNegativeTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/TypeRelationsNegativeTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UncheckedDefault.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UncheckedDefault.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnknownTypeDefault.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/UnknownTypeDefault.out"}],"sha":"6afb7500a2db2ebfa4f0361e98ee07cd7b6d4dee"},{"commit":{"message":"integrating more tests"},"files":[{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveClassesCompilationTests.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationOnAnonymousClass.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationOnAnonymousClass.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueAnnotationTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueModifierTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueModifierTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueOverGenericsTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueOverGenericsTest.out"}],"sha":"576f685462f3a1c9c7a87fd4ad20848a1b147cfd"},{"commit":{"message":"additional changes"},"files":[{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveClassesCompilationTests.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/WithFieldNegativeTests.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/WithFieldNegativeTests.out"}],"sha":"aa56634b015518b4b3663dff522ceee7acab0f1c"},{"commit":{"message":"8297207: [lworld] refactor primitive classes tests"},"files":[{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BinarySuperclassConstraints.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BinarySuperclassConstraints.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/FinalFieldTest.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/FinalFieldTest.out"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveClassesCompilationTests.java"},{"filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperclassCollections.java"}],"sha":"e984d0ee35a9769fe58f290aaec033e1a933ce58"}]