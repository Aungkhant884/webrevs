{"files":[{"patch":"@@ -1,21 +0,0 @@\n-\/**\n- * @test \/nodynamiccopyright\/\n- * @bug 8244233\n- * @summary Nested types are not handled properly across projections\n- * @compile\/fail\/ref=DualPathInnerType.out -XDrawDiagnostics -XDenablePrimitiveClasses DualPathInnerType.java\n- *\/\n-\n-public primitive class DualPathInnerType  {\n-\n-    class Inner { }\n-\n-    static DualPathInnerType.Inner xi = new DualPathInnerType().new Inner();\n-    DualPathInnerType.ref.Inner xri = xi;\n-\n-    void f (DualPathInnerType.Inner xri) {}\n-    void f (DualPathInnerType.ref.Inner xri) {}\n-\n-    public static void main(String [] args) {\n-        new DualPathInnerType();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DualPathInnerType.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-DualPathInnerType.java:16:10: compiler.err.already.defined: kindname.method, f(DualPathInnerType.Inner), kindname.class, DualPathInnerType\n-1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/DualPathInnerType.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,21 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8221545\n- * @summary Test Generics with ?\n- * @compile\/fail\/ref=GenericsWithQuestion.out -XDrawDiagnostics -XDenablePrimitiveClasses GenericsWithQuestion.java\n- *\/\n-\n-import java.util.HashMap;\n-\n-public class GenericsWithQuestion {\n-\n-    primitive class V {\n-        int x = 10;\n-    }\n-\n-    HashMap<V.ref, V.ref>good1;\n-    HashMap<V.ref, GenericsWithQuestion.V.ref>good2;\n-    HashMap<V, V>  bad1; \/\/ error;\n-    HashMap<V.ref, V> bad2; \/\/ error\n-    HashMap<V, V.ref> bad3; \/\/ error\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsWithQuestion.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-GenericsWithQuestion.java:18:13: compiler.err.type.found.req: GenericsWithQuestion.V, (compiler.misc.type.req.ref)\n-GenericsWithQuestion.java:18:16: compiler.err.type.found.req: GenericsWithQuestion.V, (compiler.misc.type.req.ref)\n-GenericsWithQuestion.java:19:20: compiler.err.type.found.req: GenericsWithQuestion.V, (compiler.misc.type.req.ref)\n-GenericsWithQuestion.java:20:13: compiler.err.type.found.req: GenericsWithQuestion.V, (compiler.misc.type.req.ref)\n-4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/GenericsWithQuestion.out","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -627,0 +627,15 @@\n+\n+    public void testDualPath() {\n+        assertFail(\"compiler.err.already.defined\",\n+                \"\"\"\n+                primitive class DualPathInnerType  {\n+                    class Inner { }\n+\n+                    static DualPathInnerType.Inner xi = new DualPathInnerType().new Inner();\n+                    DualPathInnerType.ref.Inner xri = xi;\n+\n+                    void f (DualPathInnerType.Inner xri) {}\n+                    void f (DualPathInnerType.ref.Inner xri) {}\n+                }\n+                \"\"\");\n+    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/PrimitiveClassesCompilationTests.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}