{"files":[{"patch":"@@ -1525,0 +1525,1 @@\n+                                   bool is_permits_value_class,\n@@ -1589,1 +1590,1 @@\n-    verify_legal_field_modifiers(flags, is_interface, is_inline_type, CHECK);\n+    verify_legal_field_modifiers(flags, is_interface, is_inline_type, is_permits_value_class, CHECK);\n@@ -2358,0 +2359,1 @@\n+                                      bool is_permits_value_class,\n@@ -2399,1 +2401,1 @@\n-    verify_legal_method_modifiers(flags, is_interface, is_inline_type, name, CHECK_NULL);\n+    verify_legal_method_modifiers(flags, is_interface, is_inline_type, is_permits_value_class, name, CHECK_NULL);\n@@ -3019,0 +3021,1 @@\n+                                    bool is_permits_value_class,\n@@ -3044,0 +3047,1 @@\n+                                    is_permits_value_class,\n@@ -3326,1 +3330,1 @@\n-    \/\/ JVM_ACC_VALUE and JVM_ACC_PRIMITIVE are defined for class file version 55 and later\n+    \/\/ JVM_ACC_VALUE, JVM_ACC_PRIMITIVE, and JVM_ACC_PERMITS_VALUE are defined for class file version 62 and later\n@@ -3328,1 +3332,1 @@\n-      recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE;\n+      recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_PERMITS_VALUE;\n@@ -4585,0 +4589,8 @@\n+    \/\/ A value class's super must be either java.lang.Object or have ACC_PERMITS_VALUE set.\n+    if (this_klass->access_flags().is_value_class() &&\n+        super_ik->name() != vmSymbols::java_lang_Object() &&\n+        !super_ik->is_permits_value_class()) {\n+      classfile_icce_error(\"value class %s cannot inherit from class %s\", super_ik, THREAD);\n+      return;\n+    }\n+\n@@ -4772,0 +4784,1 @@\n+  const bool is_permits_value_class = (flags & JVM_ACC_PERMITS_VALUE) != 0;\n@@ -4775,0 +4788,1 @@\n+  assert(supports_inline_types() || !is_permits_value_class, \"JVM_ACC_PERMITS_VALUE should not be set\");\n@@ -4813,1 +4827,2 @@\n-      (is_value_class && (is_interface || is_abstract || is_enum || !is_final)) ||\n+      (is_value_class && (is_interface || is_abstract || is_enum || !is_final || is_permits_value_class)) ||\n+      (is_permits_value_class && (is_interface || is_final || !is_abstract)) ||\n@@ -4819,0 +4834,1 @@\n+    if (is_permits_value_class)  class_note = \" (a permits_value class)\";\n@@ -4894,0 +4910,1 @@\n+                                                   bool is_permits_value_class,\n@@ -4921,0 +4938,2 @@\n+      } else if (is_permits_value_class && !is_static) {\n+        is_illegal = true;\n@@ -4939,0 +4958,1 @@\n+                                                    bool is_permits_value_class,\n@@ -5009,1 +5029,1 @@\n-        if (is_inline_type && is_synchronized && !is_static) {\n+        if ((is_inline_type || is_permits_value_class) && is_synchronized && !is_static) {\n@@ -6193,1 +6213,1 @@\n-    recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE;\n+    recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_PERMITS_VALUE;\n@@ -6314,0 +6334,1 @@\n+               is_permits_value_class(),\n@@ -6327,0 +6348,1 @@\n+                is_permits_value_class(),\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -285,0 +285,1 @@\n+                    bool is_permits_value_class,\n@@ -295,0 +296,1 @@\n+                       bool is_permits_value_class,\n@@ -302,0 +304,1 @@\n+                     bool is_permits_value_class,\n@@ -509,0 +512,1 @@\n+                                    bool is_permits_value_class,\n@@ -513,0 +517,1 @@\n+                                     bool is_permits_value_class,\n@@ -601,0 +606,1 @@\n+  bool is_permits_value_class() const { return _access_flags.is_permits_value_class(); }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -655,0 +655,1 @@\n+  bool is_permits_value_class() const   { return _access_flags.is_permits_value_class(); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -886,2 +886,1 @@\n-  write_u2(ik()->access_flags().get_flags() & (JVM_RECOGNIZED_CLASS_MODIFIERS | JVM_ACC_PRIMITIVE | JVM_ACC_VALUE));\n-\n+  write_u2(ik()->access_flags().get_flags() & (JVM_RECOGNIZED_CLASS_MODIFIERS | JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_PERMITS_VALUE));\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,0 +130,1 @@\n+  bool is_permits_value_class () const { return (_flags & JVM_ACC_PERMITS_VALUE   ) != 0; }\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,12 @@\n+    \/**\n+     * Return {@code true} if the integer argument includes the\n+     * {@code permitsValue} modifier, {@code false} otherwise.\n+     *\n+     * @param   mod a set of modifiers\n+     * @return {@code true} if {@code mod} includes the\n+     * {@code permitsValue} modifier; {@code false} otherwise.\n+     *\/\n+    public static boolean isPermitsValue(int mod) {\n+        return (mod & PERMITS_VALUE) != 0;\n+    }\n+\n@@ -290,0 +302,6 @@\n+    \/**\n+     * The {@code int} value representing the {@code permits_value}\n+     * modifier.\n+     *\/\n+    public static final int PERMITS_VALUE    = 0x00000040;\n+\n@@ -361,1 +379,1 @@\n-        Modifier.STRICT;\n+        Modifier.STRICT         | Modifier.PERMITS_VALUE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+    JVM_ACC_PERMITS_VALUE = 0x0040,\n@@ -72,0 +73,1 @@\n+#define JVM_ACC_PERMITS_VALUE_BIT 6\n","filename":"src\/java.base\/share\/native\/include\/classfile_constants.h.template","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -182,1 +182,1 @@\n-            int mask = Modifier.classModifiers() & ~Modifier.STATIC;\n+            int mask = Modifier.classModifiers() & ~Modifier.STATIC & ~Modifier.PERMITS_VALUE;\n@@ -192,2 +192,2 @@\n-                expected &= ~(Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED);\n-                actual &= ~(Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED);\n+                expected &= ~(Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED | Modifier.PERMITS_VALUE);\n+                actual &= ~(Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED | Modifier.PERMITS_VALUE);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaType.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -321,48 +321,0 @@\n-class compiler\/valhalla\/inlinetypes\/PointN$ref {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  63; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN$ref\"; \/\/ #2\n-    class #4; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"SourceFile\"; \/\/ #5\n-    Utf8 \"PointN.java\"; \/\/ #6\n-    Utf8 \"NestMembers\"; \/\/ #7\n-    class #9; \/\/ #8\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN\"; \/\/ #9\n-    Utf8 \"PermittedSubclasses\"; \/\/ #10\n-  } \/\/ Constant Pool\n-\n-  0x0421; \/\/ access\n-  #1;\/\/ this_cpx\n-  #3;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#5) { \/\/ SourceFile\n-      #6;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#7) { \/\/ NestMembers\n-      [] { \/\/ classes\n-        #8;\n-      }\n-    } \/\/ end NestMembers\n-    ;\n-    Attr(#10) { \/\/ PermittedSubclasses\n-      0x00010008;\n-    } \/\/ end PermittedSubclasses\n-  } \/\/ Attributes\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/PointN$ref\n-\n@@ -389,1 +341,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/PointN$ref\"; \/\/ #15\n+    Utf8 \"java\/lang\/Object\"; \/\/ #15\n@@ -520,48 +472,0 @@\n-class compiler\/valhalla\/inlinetypes\/RectangleN$ref {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  63; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN$ref\"; \/\/ #2\n-    class #4; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"SourceFile\"; \/\/ #5\n-    Utf8 \"RectangleN.java\"; \/\/ #6\n-    Utf8 \"NestMembers\"; \/\/ #7\n-    class #9; \/\/ #8\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN\"; \/\/ #9\n-    Utf8 \"PermittedSubclasses\"; \/\/ #10\n-  } \/\/ Constant Pool\n-\n-  0x0421; \/\/ access\n-  #1;\/\/ this_cpx\n-  #3;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#5) { \/\/ SourceFile\n-      #6;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#7) { \/\/ NestMembers\n-      [] { \/\/ classes\n-        #8;\n-      }\n-    } \/\/ end NestMembers\n-    ;\n-    Attr(#10) { \/\/ PermittedSubclasses\n-      0x00010008;\n-    } \/\/ end PermittedSubclasses\n-  } \/\/ Attributes\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/RectangleN$ref\n-\n@@ -594,1 +498,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleN$ref\"; \/\/ #21\n+    Utf8 \"java\/lang\/Object\"; \/\/ #21\n@@ -724,48 +628,0 @@\n-class compiler\/valhalla\/inlinetypes\/RectangleP$ref {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  63; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP$ref\"; \/\/ #2\n-    class #4; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"SourceFile\"; \/\/ #5\n-    Utf8 \"Rectangle.java\"; \/\/ #6\n-    Utf8 \"NestMembers\"; \/\/ #7\n-    class #9; \/\/ #8\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP\"; \/\/ #9\n-    Utf8 \"PermittedSubclasses\"; \/\/ #10\n-  } \/\/ Constant Pool\n-\n-  0x0421; \/\/ access\n-  #1;\/\/ this_cpx\n-  #3;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#5) { \/\/ SourceFile\n-      #6;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#7) { \/\/ NestMembers\n-      [] { \/\/ classes\n-        #8;\n-      }\n-    } \/\/ end NestMembers\n-    ;\n-    Attr(#10) { \/\/ PermittedSubclasses\n-      0x00010008;\n-    } \/\/ end PermittedSubclasses\n-  } \/\/ Attributes\n-} \/\/ end class compiler\/valhalla\/inlinetypes\/RectangleP$ref\n-\n@@ -798,1 +654,1 @@\n-    Utf8 \"compiler\/valhalla\/inlinetypes\/RectangleP$ref\"; \/\/ #21\n+    Utf8 \"java\/lang\/Object\"; \/\/ #21\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/GetfieldChains.jcod","additions":3,"deletions":147,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,34 +41,0 @@\n-class HiddenPoint$ref {\n-  0xCAFEBABE;\n-  0; \/\/ minor version\n-  63; \/\/ version\n-  [7] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    class #2; \/\/ #1     at 0x0A\n-    Utf8 \"HiddenPoint$ref\"; \/\/ #2     at 0x0D\n-    class #4; \/\/ #3     at 0x1F\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x22\n-    Utf8 \"SourceFile\"; \/\/ #5     at 0x35\n-    Utf8 \"HiddenPoint.java\"; \/\/ #6     at 0x42\n-  } \/\/ Constant Pool\n-\n-  0x0420; \/\/ access [ ACC_SUPER ACC_ABSTRACT ]\n-  #1;\/\/ this_cpx\n-  #3;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [0] { \/\/ fields\n-  } \/\/ fields\n-\n-  [0] { \/\/ methods\n-  } \/\/ methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#5, 2) { \/\/ SourceFile at 0x63\n-      #6;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class HiddenPoint$ref\n-\n@@ -79,1 +45,1 @@\n-  [60] { \/\/ Constant Pool\n+  [40] { \/\/ Constant Pool\n@@ -94,46 +60,26 @@\n-    InvokeDynamic 1s #15; \/\/ #14     at 0x78\n-    NameAndType #16 #17; \/\/ #15     at 0x7D\n-    Utf8 \"hashCode\"; \/\/ #16     at 0x82\n-    Utf8 \"(QHiddenPoint;)I\"; \/\/ #17     at 0x8D\n-    InvokeDynamic 1s #19; \/\/ #18     at 0xA0\n-    NameAndType #20 #21; \/\/ #19     at 0xA5\n-    Utf8 \"equals\"; \/\/ #20     at 0xAA\n-    Utf8 \"(QHiddenPoint;Ljava\/lang\/Object;)Z\"; \/\/ #21     at 0xB3\n-    InvokeDynamic 1s #23; \/\/ #22     at 0xD8\n-    NameAndType #24 #25; \/\/ #23     at 0xDD\n-    Utf8 \"toString\"; \/\/ #24     at 0xE2\n-    Utf8 \"(QHiddenPoint;)Ljava\/lang\/String;\"; \/\/ #25     at 0xED\n-    class #27; \/\/ #26     at 0x0111\n-    Utf8 \"HiddenPoint$ref\"; \/\/ #27     at 0x0114\n-    Utf8 \"getValue\"; \/\/ #28     at 0x0126\n-    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #29     at 0x0131\n-    Utf8 \"Code\"; \/\/ #30     at 0x0148\n-    Utf8 \"LineNumberTable\"; \/\/ #31     at 0x014F\n-    Utf8 \"()I\"; \/\/ #32     at 0x0161\n-    Utf8 \"(Ljava\/lang\/Object;)Z\"; \/\/ #33     at 0x0167\n-    Utf8 \"<init>\"; \/\/ #34     at 0x017F\n-    Utf8 \"()Ljava\/lang\/Object;\"; \/\/ #35     at 0x0188\n-    Utf8 \"SourceFile\"; \/\/ #36     at 0x019A\n-    Utf8 \"HiddenPoint.java\"; \/\/ #37     at 0x01A7\n-    Utf8 \"BootstrapMethods\"; \/\/ #38     at 0x01BA\n-    MethodHandle 6b #40; \/\/ #39     at 0x01CD\n-    Method #41 #42; \/\/ #40     at 0x01D1\n-    class #43; \/\/ #41     at 0x01D6\n-    NameAndType #12 #44; \/\/ #42     at 0x01D9\n-    Utf8 \"java\/lang\/invoke\/StringConcatFactory\"; \/\/ #43     at 0x01DE\n-    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"; \/\/ #44     at 0x0205\n-    String #46; \/\/ #45     at 0x02A0\n-    Utf8 \"x: , y: \"; \/\/ #46     at 0x02A3\n-    MethodHandle 6b #48; \/\/ #47     at 0x02B0\n-    Method #49 #50; \/\/ #48     at 0x02B4\n-    class #51; \/\/ #49     at 0x02B9\n-    NameAndType #52 #53; \/\/ #50     at 0x02BC\n-    Utf8 \"java\/lang\/invoke\/ValueBootstrapMethods\"; \/\/ #51     at 0x02C1\n-    Utf8 \"makeBootstrapMethod\"; \/\/ #52     at 0x02EA\n-    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/CallSite;\"; \/\/ #53     at 0x0300\n-    Utf8 \"InnerClasses\"; \/\/ #54     at 0x0376\n-    class #56; \/\/ #55     at 0x0385\n-    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #56     at 0x0388\n-    class #58; \/\/ #57     at 0x03B0\n-    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #58     at 0x03B3\n-    Utf8 \"Lookup\"; \/\/ #59     at 0x03D4\n+    class #15; \/\/ #14     at 0x78\n+    Utf8 \"java\/lang\/Object\"; \/\/ #15     at 0x7B\n+    Utf8 \"getValue\"; \/\/ #16     at 0x8E\n+    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #17     at 0x99\n+    Utf8 \"Code\"; \/\/ #18     at 0xB0\n+    Utf8 \"LineNumberTable\"; \/\/ #19     at 0xB7\n+    Utf8 \"<init>\"; \/\/ #20     at 0xC9\n+    Utf8 \"()Ljava\/lang\/Object;\"; \/\/ #21     at 0xD2\n+    Utf8 \"SourceFile\"; \/\/ #22     at 0xE4\n+    Utf8 \"HiddenPoint.java\"; \/\/ #23     at 0xF1\n+    Utf8 \"BootstrapMethods\"; \/\/ #24     at 0x0104\n+    MethodHandle 6b #26; \/\/ #25     at 0x0117\n+    Method #27 #28; \/\/ #26     at 0x011B\n+    class #29; \/\/ #27     at 0x0120\n+    NameAndType #12 #30; \/\/ #28     at 0x0123\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\"; \/\/ #29     at 0x0128\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\"; \/\/ #30     at 0x014F\n+    String #32; \/\/ #31     at 0x01EA\n+    Utf8 \"x: , y: \"; \/\/ #32     at 0x01ED\n+    Utf8 \"InnerClasses\"; \/\/ #33     at 0x01FA\n+    class #35; \/\/ #34     at 0x0209\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #35     at 0x020C\n+    class #37; \/\/ #36     at 0x0234\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #37     at 0x0237\n+    Utf8 \"Lookup\"; \/\/ #38     at 0x0258\n+    Utf8 \"Preload\"; \/\/ #39     at 0x0261\n@@ -142,1 +88,1 @@\n-  0x0930; \/\/ access [ ACC_SUPER ACC_PRIMITIVE ACC_SUPER ACC_FINAL ]\n+  0x0130; \/\/ access [ ACC_SUPER ACC_FINAL ]\n@@ -144,1 +90,1 @@\n-  #26;\/\/ super_cpx\n+  #14;\/\/ super_cpx\n@@ -149,2 +95,2 @@\n-  [2] { \/\/ fields\n-    { \/\/ Member at 0x03E7\n+  [2] { \/\/ Fields\n+    {  \/\/ field at 0x0275\n@@ -152,2 +98,2 @@\n-      #5; \/\/ name_cpx\n-      #6; \/\/ sig_cpx\n+      #5; \/\/ name_index       : x\n+      #6; \/\/ descriptor_index : I\n@@ -156,1 +102,1 @@\n-    } \/\/ Member\n+    }\n@@ -158,1 +104,1 @@\n-    { \/\/ Member at 0x03EF\n+    {  \/\/ field at 0x027D\n@@ -160,2 +106,2 @@\n-      #9; \/\/ name_cpx\n-      #6; \/\/ sig_cpx\n+      #9; \/\/ name_index       : y\n+      #6; \/\/ descriptor_index : I\n@@ -164,2 +110,2 @@\n-    } \/\/ Member\n-  } \/\/ fields\n+    }\n+  } \/\/ Fields\n@@ -167,2 +113,2 @@\n-  [2] { \/\/ methods\n-    { \/\/ Member at 0x03F9\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x0287\n@@ -170,2 +116,2 @@\n-      #28; \/\/ name_cpx\n-      #29; \/\/ sig_cpx\n+      #16; \/\/ name_index       : getValue\n+      #17; \/\/ descriptor_index : ()Ljava\/lang\/String;\n@@ -173,1 +119,1 @@\n-        Attr(#30, 38) { \/\/ Code at 0x0401\n+        Attr(#18, 38) { \/\/ Code at 0x028F\n@@ -183,3 +129,3 @@\n-            Attr(#31, 6) { \/\/ LineNumberTable at 0x0421\n-              [1] { \/\/ LineNumberTable\n-                0  9; \/\/  at 0x042D\n+            Attr(#19, 6) { \/\/ LineNumberTable at 0x02AF\n+              [1] { \/\/ line_number_table\n+                0  10; \/\/  at 0x02BB\n@@ -191,1 +137,1 @@\n-    } \/\/ Member\n+    }\n@@ -193,1 +139,1 @@\n-    { \/\/ Member at 0x04B5\n+    {  \/\/ method at 0x02BB\n@@ -195,2 +141,2 @@\n-      #34; \/\/ name_cpx\n-      #35; \/\/ sig_cpx\n+      #20; \/\/ name_index       : <init>\n+      #21; \/\/ descriptor_index : ()LHiddenPoint;\n@@ -198,1 +144,1 @@\n-        Attr(#30, 56) { \/\/ Code at 0x04BD\n+        Attr(#18, 56) { \/\/ Code at 0x02C3\n@@ -209,6 +155,6 @@\n-            Attr(#31, 18) { \/\/ LineNumberTable at 0x04E3\n-              [4] { \/\/ LineNumberTable\n-                0  4; \/\/  at 0x04EF\n-                4  5; \/\/  at 0x04F3\n-                11  6; \/\/  at 0x04F7\n-                18  7; \/\/  at 0x04FB\n+            Attr(#19, 18) { \/\/ LineNumberTable at 0x02E9\n+              [4] { \/\/ line_number_table\n+                0  5; \/\/  at 0x02F5\n+                4  6; \/\/  at 0x02F9\n+                11  7; \/\/  at 0x02FD\n+                18  8; \/\/  at 0x0301\n@@ -220,2 +166,2 @@\n-    } \/\/ Member\n-  } \/\/ methods\n+    }\n+  } \/\/ Methods\n@@ -223,3 +169,3 @@\n-  [3] { \/\/ Attributes\n-    Attr(#36, 2) { \/\/ SourceFile at 0x04FD\n-      #37;\n+  [4] { \/\/ Attributes\n+    Attr(#22, 2) { \/\/ SourceFile at 0x0303\n+      #23;\n@@ -228,2 +174,2 @@\n-    Attr(#38, 12) { \/\/ BootstrapMethods at 0x0505\n-      [2] { \/\/ bootstrap_methods\n+    Attr(#24, 8) { \/\/ BootstrapMethods at 0x030B\n+      [1] { \/\/ bootstrap_methods\n@@ -231,1 +177,1 @@\n-          #39; \/\/ bootstrap_method_ref\n+          #25; \/\/ bootstrap_method_ref\n@@ -233,7 +179,1 @@\n-            #45; \/\/  at 0x0513\n-          }  \/\/  bootstrap_arguments\n-        }  \/\/  bootstrap_method\n-        ;\n-        {  \/\/  bootstrap_method\n-          #47; \/\/ bootstrap_method_ref\n-          [0] { \/\/ bootstrap_arguments\n+            #31; \/\/  at 0x0319\n@@ -245,3 +185,3 @@\n-    Attr(#54, 10) { \/\/ InnerClasses at 0x0517\n-      [1] { \/\/ InnerClasses\n-        #55 #57 #59 25; \/\/  at 0x0527\n+    Attr(#33, 10) { \/\/ InnerClasses at 0x0319\n+      [1] { \/\/ classes\n+        #34 #36 #38 25; \/\/  at 0x0329\n@@ -250,0 +190,4 @@\n+    ;\n+    Attr(#39, 4) { \/\/ Preload at 0x0329\n+      0x00010001;\n+    } \/\/ end Preload\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/HiddenPoint.jcod","additions":75,"deletions":131,"binary":false,"changes":206,"status":"modified"},{"patch":"@@ -0,0 +1,888 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ These tests are based on this .java file.  Each test case changed an access\n+\/\/ flag to cause a ClassFormatError exception when loading the class.\n+\/*\n+public abstract class AbstractPV {\n+\n+    static int x = 3;\n+\n+    public static synchronized void meth() {\n+        System.out.println(\"hi\");\n+    }\n+}\n+*\/\n+\n+\n+\/\/ Added ACC_VALUE to class access flags.\n+class AbstractPV_ACC_VALUE {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  62; \/\/ version\n+  [33] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n+    Utf8 \"out\"; \/\/ #11     at 0x59\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n+    String #14; \/\/ #13     at 0x77\n+    Utf8 \"hi\"; \/\/ #14     at 0x7A\n+    Method #16 #17; \/\/ #15     at 0x7F\n+    class #18; \/\/ #16     at 0x84\n+    NameAndType #19 #20; \/\/ #17     at 0x87\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n+    Utf8 \"println\"; \/\/ #19     at 0xA2\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n+    Field #22 #23; \/\/ #21     at 0xC4\n+    class #24; \/\/ #22     at 0xC9\n+    NameAndType #25 #26; \/\/ #23     at 0xCC\n+    Utf8 \"AbstractPV_ACC_VALUE\"; \/\/ #24     at 0xD1\n+    Utf8 \"x\"; \/\/ #25     at 0xDE\n+    Utf8 \"I\"; \/\/ #26     at 0xE2\n+    Utf8 \"Code\"; \/\/ #27     at 0xE6\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n+    Utf8 \"meth\"; \/\/ #29     at 0xFF\n+    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n+    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n+    Utf8 \"AbstractPV_ACC_VALUE.java\"; \/\/ #32     at 0x011E\n+  } \/\/ Constant Pool\n+\n+  0x0561; \/\/ access [ ACC_VALUE ACC_PUBLIC ACC_SUPER ACC_ABSTRACT ACC_PERMITS_VALUE ]\n+  #22;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x013A\n+      0x0008; \/\/ access\n+      #25; \/\/ name_index       : x\n+      #26; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [3] { \/\/ Methods\n+    {  \/\/ method at 0x0144\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x014C\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0x016F\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x016F\n+      0x0029; \/\/ access\n+      #29; \/\/ name_index       : meth\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 37) { \/\/ Code at 0x0177\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[9]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n+              [2] { \/\/ line_number_table\n+                0  7; \/\/  at 0x019E\n+                8  8; \/\/  at 0x01A2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x01A2\n+      0x0008; \/\/ access\n+      #30; \/\/ name_index       : <clinit>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x01AA\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[5]{\n+            0x06B30015B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n+              [1] { \/\/ line_number_table\n+                0  4; \/\/  at 0x01CD\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n+      #32;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractPV_ACC_VALUE\n+\n+\n+\/\/ Removed ACC_STATIC from field access flags.\n+class AbstractPVField {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  62; \/\/ version\n+  [33] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n+    Utf8 \"out\"; \/\/ #11     at 0x59\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n+    String #14; \/\/ #13     at 0x77\n+    Utf8 \"hi\"; \/\/ #14     at 0x7A\n+    Method #16 #17; \/\/ #15     at 0x7F\n+    class #18; \/\/ #16     at 0x84\n+    NameAndType #19 #20; \/\/ #17     at 0x87\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n+    Utf8 \"println\"; \/\/ #19     at 0xA2\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n+    Field #22 #23; \/\/ #21     at 0xC4\n+    class #24; \/\/ #22     at 0xC9\n+    NameAndType #25 #26; \/\/ #23     at 0xCC\n+    Utf8 \"AbstractPVField\"; \/\/ #24     at 0xD1\n+    Utf8 \"x\"; \/\/ #25     at 0xDE\n+    Utf8 \"I\"; \/\/ #26     at 0xE2\n+    Utf8 \"Code\"; \/\/ #27     at 0xE6\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n+    Utf8 \"meth\"; \/\/ #29     at 0xFF\n+    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n+    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n+    Utf8 \"AbstractPVField.java\"; \/\/ #32     at 0x011E\n+  } \/\/ Constant Pool\n+\n+  0x0461; \/\/ access [ ACC_PUBLIC ACC_SUPER ACC_ABSTRACT ACC_PERMITS_VALUE ]\n+  #22;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x013A\n+      0x0000; \/\/ access\n+      #25; \/\/ name_index       : x\n+      #26; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [3] { \/\/ Methods\n+    {  \/\/ method at 0x0144\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x014C\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0x016F\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x016F\n+      0x0029; \/\/ access\n+      #29; \/\/ name_index       : meth\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 37) { \/\/ Code at 0x0177\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[9]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n+              [2] { \/\/ line_number_table\n+                0  7; \/\/  at 0x019E\n+                8  8; \/\/  at 0x01A2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x01A2\n+      0x0008; \/\/ access\n+      #30; \/\/ name_index       : <clinit>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x01AA\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[5]{\n+            0x06B30015B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n+              [1] { \/\/ line_number_table\n+                0  4; \/\/  at 0x01CD\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n+      #32;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractPVField\n+\n+\n+\/\/ Added ACC_FINAL to class access flags.\n+class AbstractPVFinal {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  62; \/\/ version\n+  [33] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n+    Utf8 \"out\"; \/\/ #11     at 0x59\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n+    String #14; \/\/ #13     at 0x77\n+    Utf8 \"hi\"; \/\/ #14     at 0x7A\n+    Method #16 #17; \/\/ #15     at 0x7F\n+    class #18; \/\/ #16     at 0x84\n+    NameAndType #19 #20; \/\/ #17     at 0x87\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n+    Utf8 \"println\"; \/\/ #19     at 0xA2\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n+    Field #22 #23; \/\/ #21     at 0xC4\n+    class #24; \/\/ #22     at 0xC9\n+    NameAndType #25 #26; \/\/ #23     at 0xCC\n+    Utf8 \"AbstractPVFinal\"; \/\/ #24     at 0xD1\n+    Utf8 \"x\"; \/\/ #25     at 0xDE\n+    Utf8 \"I\"; \/\/ #26     at 0xE2\n+    Utf8 \"Code\"; \/\/ #27     at 0xE6\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n+    Utf8 \"meth\"; \/\/ #29     at 0xFF\n+    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n+    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n+    Utf8 \"AbstractPVFinal.java\"; \/\/ #32     at 0x011E\n+  } \/\/ Constant Pool\n+\n+  0x0471; \/\/ access [ ACC_FINAL ACC_PUBLIC ACC_SUPER ACC_ABSTRACT ACC_PERMITS_VALUE ]\n+  #22;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x013A\n+      0x0008; \/\/ access\n+      #25; \/\/ name_index       : x\n+      #26; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [3] { \/\/ Methods\n+    {  \/\/ method at 0x0144\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x014C\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0x016F\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x016F\n+      0x0029; \/\/ access\n+      #29; \/\/ name_index       : meth\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 37) { \/\/ Code at 0x0177\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[9]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n+              [2] { \/\/ line_number_table\n+                0  7; \/\/  at 0x019E\n+                8  8; \/\/  at 0x01A2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x01A2\n+      0x0008; \/\/ access\n+      #30; \/\/ name_index       : <clinit>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x01AA\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[5]{\n+            0x06B30015B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n+              [1] { \/\/ line_number_table\n+                0  4; \/\/  at 0x01CD\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n+      #32;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractPVFinal\n+\n+\n+\/\/ Added ACC_INTERFACE to class access flags\n+class AbstractPVintf {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  62; \/\/ version\n+  [33] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n+    Utf8 \"out\"; \/\/ #11     at 0x59\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n+    String #14; \/\/ #13     at 0x77\n+    Utf8 \"hi\"; \/\/ #14     at 0x7A\n+    Method #16 #17; \/\/ #15     at 0x7F\n+    class #18; \/\/ #16     at 0x84\n+    NameAndType #19 #20; \/\/ #17     at 0x87\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n+    Utf8 \"println\"; \/\/ #19     at 0xA2\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n+    Field #22 #23; \/\/ #21     at 0xC4\n+    class #24; \/\/ #22     at 0xC9\n+    NameAndType #25 #26; \/\/ #23     at 0xCC\n+    Utf8 \"AbstractPVintf\"; \/\/ #24     at 0xD1\n+    Utf8 \"x\"; \/\/ #25     at 0xDE\n+    Utf8 \"I\"; \/\/ #26     at 0xE2\n+    Utf8 \"Code\"; \/\/ #27     at 0xE6\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n+    Utf8 \"meth\"; \/\/ #29     at 0xFF\n+    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n+    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n+    Utf8 \"AbstractPVintf.java\"; \/\/ #32     at 0x011E\n+  } \/\/ Constant Pool\n+\n+  0x0661; \/\/ access [ ACC_INTERFACE ACC_PUBLIC ACC_SUPER ACC_ABSTRACT ACC_PERMITS_VALUE ]\n+  #22;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x013A\n+      0x0008; \/\/ access\n+      #25; \/\/ name_index       : x\n+      #26; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [3] { \/\/ Methods\n+    {  \/\/ method at 0x0144\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x014C\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0x016F\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x016F\n+      0x0029; \/\/ access\n+      #29; \/\/ name_index       : meth\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 37) { \/\/ Code at 0x0177\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[9]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n+              [2] { \/\/ line_number_table\n+                0  7; \/\/  at 0x019E\n+                8  8; \/\/  at 0x01A2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x01A2\n+      0x0008; \/\/ access\n+      #30; \/\/ name_index       : <clinit>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x01AA\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[5]{\n+            0x06B30015B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n+              [1] { \/\/ line_number_table\n+                0  4; \/\/  at 0x01CD\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n+      #32;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractPVintf\n+\n+\n+\/\/ Changed the access flags for synchronized method meth() to not be static.\n+class AbstractPVMethod {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  62; \/\/ version\n+  [33] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n+    Utf8 \"out\"; \/\/ #11     at 0x59\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n+    String #14; \/\/ #13     at 0x77\n+    Utf8 \"hi\"; \/\/ #14     at 0x7A\n+    Method #16 #17; \/\/ #15     at 0x7F\n+    class #18; \/\/ #16     at 0x84\n+    NameAndType #19 #20; \/\/ #17     at 0x87\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n+    Utf8 \"println\"; \/\/ #19     at 0xA2\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n+    Field #22 #23; \/\/ #21     at 0xC4\n+    class #24; \/\/ #22     at 0xC9\n+    NameAndType #25 #26; \/\/ #23     at 0xCC\n+    Utf8 \"AbstractPVMethod\"; \/\/ #24     at 0xD1\n+    Utf8 \"x\"; \/\/ #25     at 0xDE\n+    Utf8 \"I\"; \/\/ #26     at 0xE2\n+    Utf8 \"Code\"; \/\/ #27     at 0xE6\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n+    Utf8 \"meth\"; \/\/ #29     at 0xFF\n+    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n+    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n+    Utf8 \"AbstractPVMethod.java\"; \/\/ #32     at 0x011E\n+  } \/\/ Constant Pool\n+\n+  0x0461; \/\/ access [ ACC_PUBLIC ACC_SUPER ACC_ABSTRACT ACC_PERMITS_VALUE ]\n+  #22;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x013A\n+      0x0008; \/\/ access\n+      #25; \/\/ name_index       : x\n+      #26; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [3] { \/\/ Methods\n+    {  \/\/ method at 0x0144\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x014C\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0x016F\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x016F\n+      0x0021; \/\/ access\n+      #29; \/\/ name_index       : meth\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 37) { \/\/ Code at 0x0177\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[9]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n+              [2] { \/\/ line_number_table\n+                0  7; \/\/  at 0x019E\n+                8  8; \/\/  at 0x01A2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x01A2\n+      0x0008; \/\/ access\n+      #30; \/\/ name_index       : <clinit>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x01AA\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[5]{\n+            0x06B30015B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n+              [1] { \/\/ line_number_table\n+                0  4; \/\/  at 0x01CD\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n+      #32;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractPVMethod\n+\n+\n+\/\/ Removed ACC_ABSTRACT from class access flags.\n+class NoAbstract {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  62; \/\/ version\n+  [33] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n+    Utf8 \"out\"; \/\/ #11     at 0x59\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n+    String #14; \/\/ #13     at 0x77\n+    Utf8 \"hi\"; \/\/ #14     at 0x7A\n+    Method #16 #17; \/\/ #15     at 0x7F\n+    class #18; \/\/ #16     at 0x84\n+    NameAndType #19 #20; \/\/ #17     at 0x87\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n+    Utf8 \"println\"; \/\/ #19     at 0xA2\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n+    Field #22 #23; \/\/ #21     at 0xC4\n+    class #24; \/\/ #22     at 0xC9\n+    NameAndType #25 #26; \/\/ #23     at 0xCC\n+    Utf8 \"NoAbstract\"; \/\/ #24     at 0xD1\n+    Utf8 \"x\"; \/\/ #25     at 0xDE\n+    Utf8 \"I\"; \/\/ #26     at 0xE2\n+    Utf8 \"Code\"; \/\/ #27     at 0xE6\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n+    Utf8 \"meth\"; \/\/ #29     at 0xFF\n+    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n+    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n+    Utf8 \"NoAbstract.java\"; \/\/ #32     at 0x011E\n+  } \/\/ Constant Pool\n+\n+  0x0061; \/\/ access [ ACC_PUBLIC ACC_SUPER ACC_PERMITS_VALUE ]\n+  #22;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x013A\n+      0x0008; \/\/ access\n+      #25; \/\/ name_index       : x\n+      #26; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [3] { \/\/ Methods\n+    {  \/\/ method at 0x0144\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x014C\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0x016F\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x016F\n+      0x0029; \/\/ access\n+      #29; \/\/ name_index       : meth\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 37) { \/\/ Code at 0x0177\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[9]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n+              [2] { \/\/ line_number_table\n+                0  7; \/\/  at 0x019E\n+                8  8; \/\/  at 0x01A2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x01A2\n+      0x0008; \/\/ access\n+      #30; \/\/ name_index       : <clinit>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x01AA\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[5]{\n+            0x06B30015B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n+              [1] { \/\/ line_number_table\n+                0  4; \/\/  at 0x01CD\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n+      #32;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class NoAbstract\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCCFETests.jcod","additions":888,"deletions":0,"binary":false,"changes":888,"status":"added"},{"patch":"@@ -0,0 +1,294 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ This is an abstract class that cannot be a super class for value classes\n+\/\/ because ACC_PERMITS_VALUE was removed from its class access flags.\n+\/\/ It's based on the following source:\n+\/*\n+public abstract class NonPVSuper {\n+\n+    static int x = 3;\n+\n+    public static void meth() {\n+        System.out.println(\"hi\");\n+    }\n+}\n+*\/\n+class NonPVSuper {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  62; \/\/ version\n+  [33] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"java\/lang\/System\"; \/\/ #10     at 0x46\n+    Utf8 \"out\"; \/\/ #11     at 0x59\n+    Utf8 \"Ljava\/io\/PrintStream;\"; \/\/ #12     at 0x5F\n+    String #14; \/\/ #13     at 0x77\n+    Utf8 \"hi\"; \/\/ #14     at 0x7A\n+    Method #16 #17; \/\/ #15     at 0x7F\n+    class #18; \/\/ #16     at 0x84\n+    NameAndType #19 #20; \/\/ #17     at 0x87\n+    Utf8 \"java\/io\/PrintStream\"; \/\/ #18     at 0x8C\n+    Utf8 \"println\"; \/\/ #19     at 0xA2\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #20     at 0xAC\n+    Field #22 #23; \/\/ #21     at 0xC4\n+    class #24; \/\/ #22     at 0xC9\n+    NameAndType #25 #26; \/\/ #23     at 0xCC\n+    Utf8 \"NonPVSuper\"; \/\/ #24     at 0xD1\n+    Utf8 \"x\"; \/\/ #25     at 0xDE\n+    Utf8 \"I\"; \/\/ #26     at 0xE2\n+    Utf8 \"Code\"; \/\/ #27     at 0xE6\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0xED\n+    Utf8 \"meth\"; \/\/ #29     at 0xFF\n+    Utf8 \"<clinit>\"; \/\/ #30     at 0x0106\n+    Utf8 \"SourceFile\"; \/\/ #31     at 0x0111\n+    Utf8 \"NonPVSuper.java\"; \/\/ #32     at 0x011E\n+  } \/\/ Constant Pool\n+\n+  0x0421; \/\/ access [ ACC_PUBLIC ACC_SUPER ACC_ABSTRACT ]\n+  #22;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x013A\n+      0x0008; \/\/ access\n+      #25; \/\/ name_index       : x\n+      #26; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [3] { \/\/ Methods\n+    {  \/\/ method at 0x0144\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x014C\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0163\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0x016F\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x016F\n+      0x0009; \/\/ access\n+      #29; \/\/ name_index       : meth\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 37) { \/\/ Code at 0x0177\n+          2; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[9]{\n+            0xB20007120DB6000F;\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 10) { \/\/ LineNumberTable at 0x0192\n+              [2] { \/\/ line_number_table\n+                0  7; \/\/  at 0x019E\n+                8  8; \/\/  at 0x01A2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0x01A2\n+      0x0008; \/\/ access\n+      #30; \/\/ name_index       : <clinit>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x01AA\n+          1; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[5]{\n+            0x06B30015B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x01C1\n+              [1] { \/\/ line_number_table\n+                0  4; \/\/  at 0x01CD\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#31, 2) { \/\/ SourceFile at 0x01CF\n+      #32;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class NonPVSuper\n+\n+\n+\/\/ Dot is a value class that tries to inherit from a super class (NonPVSuper)\n+\/\/ that does not have access flag ACC_PERMIT_VALUES set.\n+\/\/ Dot is based on the following source:\n+\/*\n+public value final class Dot extends NonPVSuper {\n+    int x = 3;\n+\n+    public int getX() {\n+        return x;\n+    }\n+}\n+*\/\n+class Dot {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  62; \/\/ version\n+  [18] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1     at 0x0A\n+    Utf8 \"Dot\"; \/\/ #2     at 0x0D\n+    Field #1 #4; \/\/ #3     at 0x13\n+    NameAndType #5 #6; \/\/ #4     at 0x18\n+    Utf8 \"x\"; \/\/ #5     at 0x1D\n+    Utf8 \"I\"; \/\/ #6     at 0x21\n+    class #8; \/\/ #7     at 0x25\n+    Utf8 \"NonPVSuper\"; \/\/ #8     at 0x28\n+    Utf8 \"getX\"; \/\/ #9     at 0x35\n+    Utf8 \"()I\"; \/\/ #10     at 0x3C\n+    Utf8 \"Code\"; \/\/ #11     at 0x42\n+    Utf8 \"LineNumberTable\"; \/\/ #12     at 0x49\n+    Utf8 \"<init>\"; \/\/ #13     at 0x5B\n+    Utf8 \"()LDot;\"; \/\/ #14     at 0x64\n+    Utf8 \"SourceFile\"; \/\/ #15     at 0x6E\n+    Utf8 \"Dot.java\"; \/\/ #16     at 0x7B\n+    Utf8 \"Preload\"; \/\/ #17     at 0x86\n+  } \/\/ Constant Pool\n+\n+  0x0131; \/\/ access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  #1;\/\/ this_cpx\n+  #7;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ Fields\n+    {  \/\/ field at 0x9A\n+      0x0010; \/\/ access\n+      #5; \/\/ name_index       : x\n+      #6; \/\/ descriptor_index : I\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0xA4\n+      0x0001; \/\/ access\n+      #9; \/\/ name_index       : getX\n+      #10; \/\/ descriptor_index : ()I\n+      [1] { \/\/ Attributes\n+        Attr(#11, 29) { \/\/ Code at 0xAC\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB40003AC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#12, 6) { \/\/ LineNumberTable at 0xC3\n+              [1] { \/\/ line_number_table\n+                0  5; \/\/  at 0xCF\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0xCF\n+      0x0009; \/\/ access\n+      #13; \/\/ name_index       : <init>\n+      #14; \/\/ descriptor_index : ()LDot;\n+      [1] { \/\/ Attributes\n+        Attr(#11, 41) { \/\/ Code at 0xD7\n+          2; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[13]{\n+            0xCB00014B062A5FCC;\n+            0x00034B2AB0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#12, 10) { \/\/ LineNumberTable at 0xF6\n+              [2] { \/\/ line_number_table\n+                0  1; \/\/  at 0x0102\n+                4  2; \/\/  at 0x0106\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [2] { \/\/ Attributes\n+    Attr(#15, 2) { \/\/ SourceFile at 0x0108\n+      #16;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#17, 4) { \/\/ Preload at 0x0110\n+      0x00010001;\n+    } \/\/ end Preload\n+  } \/\/ Attributes\n+} \/\/ end class Dot\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCICCETests.jcod","additions":294,"deletions":0,"binary":false,"changes":294,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test ACC_CFETest\n+ * @bug 8281279\n+ * @summary test class access rules for classes that have ACC_PERMITS_VALUE set.\n+ * @compile ACCCFETests.jcod\n+ * @run main\/othervm -XX:+EnableValhalla -Xverify:remote ACC_CFETest\n+ *\/\n+\n+public class ACC_CFETest {\n+\n+    public static void runTest(String test_name, String message) throws Exception {\n+        System.out.println(\"Testing: \" + test_name);\n+        try {\n+            Class newClass = Class.forName(test_name);\n+        } catch (java.lang.ClassFormatError e) {\n+            if (!e.getMessage().contains(message)) {\n+                throw new RuntimeException( \"Wrong ClassFormatError: \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Test illegal class that has both ACC_VALUE and ACC_PERMITS_VALUE set.\n+        runTest(\"AbstractPV_ACC_VALUE\",\n+                \"Illegal class modifiers in class AbstractPV_ACC_VALUE (a permits_value class)\");\n+\n+        \/\/ Test illegal class that has ACC_PERMITS_VALUE set and a non-static field..\n+        runTest(\"AbstractPVField\", \"Illegal field modifiers in class AbstractPVField\");\n+\n+        \/\/ Test illegal class that has both ACC_FINAL and ACC_PERMITS_VALUE set.\n+        runTest(\"AbstractPVFinal\",\n+                \"Illegal class modifiers in class AbstractPVFinal (a permits_value class)\");\n+\n+        \/\/ Test illegal class that has both ACC_INTERFACE and ACC_PERMITS_VALUE set.\n+        runTest(\"AbstractPVintf\",\n+                \"Illegal class modifiers in class AbstractPVintf (a permits_value class)\");\n+\n+        \/\/ Test illegal class that has ACC_PERMITS_VALUE set and a non-static synchronized method.\n+        runTest(\"AbstractPVMethod\",\n+                \"Method meth in class AbstractPVMethod (an inline class) has illegal modifiers\");\n+\n+        \/\/ Test illegal class that has ACC_PERMITS_VALUE set, but not ACC_ABSTRACT.\n+        runTest(\"NoAbstract\", \"Illegal class modifiers in class NoAbstract (a permits_value class)\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_CFETest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test ACC_ICCETest\n+ * @bug 8281279\n+ * @summary test that ACC_PERMITS_VALUE must be set for the super class of\n+ *          a value class (unless the super is java.lang.Object);\n+ * @compile ACCICCETests.jcod\n+ * @run main\/othervm -XX:+EnableValhalla ACC_ICCETest\n+ *\/\n+\n+public class ACC_ICCETest {\n+\n+    public static void runTest(String test_name, String message) throws Exception {\n+        System.out.println(\"Testing: \" + test_name);\n+        try {\n+            Class newClass = Class.forName(test_name);\n+        } catch (java.lang.IncompatibleClassChangeError e) {\n+            if (!e.getMessage().contains(message)) {\n+                throw new RuntimeException( \"Wrong IncompatibleClassChangeError: \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Test illegal class that has both ACC_VALUE and ACC_PERMITS_VALUE set.\n+        runTest(\"Dot\", \"value class Dot cannot inherit from class NonPVSuper\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_ICCETest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-        check(getclmdf006c.class, Modifier.ABSTRACT);\n+        check(getclmdf006c.class, Modifier.ABSTRACT | Modifier.PERMITS_VALUE);\n@@ -72,1 +72,2 @@\n-        check(Inner12.class, Modifier.STATIC | Modifier.ABSTRACT);\n+        check(Inner12.class, Modifier.STATIC | Modifier.ABSTRACT |\n+                             Modifier.PERMITS_VALUE);\n@@ -77,1 +78,1 @@\n-                             Modifier.ABSTRACT);\n+                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);\n@@ -82,1 +83,1 @@\n-                             Modifier.ABSTRACT);\n+                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);\n@@ -87,1 +88,1 @@\n-                             Modifier.ABSTRACT);\n+                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassModifiers\/getclmdf006.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+#define ACC_PERMITS_VALUE    0x0040\n@@ -85,0 +86,1 @@\n+    if (mod & ACC_PERMITS_VALUE) printf(\" PERMITS_VALUE\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassModifiers\/getclmdf006\/getclmdf006.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}