{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -737,1 +737,3 @@\n-     *     hidden class}; and<\/li>\n+     *     hidden class};<\/li>\n+     * <li>the field's declaring class is not an {@linkplain Class#isInlineClass()\n+     *     inline class}; and<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n- *          Except for fields of inline classes that are never settable\n@@ -98,4 +97,2 @@\n-                Modifier.isPublic(c.getModifiers());\n-            boolean access = !c.isInlineClass() &&\n-                    ((exported && isPublic) || target.isOpen(pn, self));\n-\n+                    Modifier.isPublic(c.getModifiers());\n+            boolean access = (exported && isPublic) || target.isOpen(pn, self);\n@@ -107,2 +104,2 @@\n-                        String.format(\"Expected InaccessibleObjectException is not thrown \"\n-                                      + \"for field %s in class %s%n\", f.getName(), c.getName()));\n+                            String.format(\"Expected InaccessibleObjectException is not thrown \"\n+                                    + \"for field %s in class %s%n\", f.getName(), c.getName()));\n@@ -282,1 +279,1 @@\n-                    .iterator();\n+                        .iterator();\n@@ -293,3 +290,3 @@\n-                \/\/ All JVMCI packages other than jdk.vm.ci.services are dynamically\n-                \/\/ exported to jdk.internal.vm.compiler and jdk.aot\n-                \"jdk.internal.vm.compiler\", \"jdk.aot\"\n+                    \/\/ All JVMCI packages other than jdk.vm.ci.services are dynamically\n+                    \/\/ exported to jdk.internal.vm.compiler and jdk.aot\n+                    \"jdk.internal.vm.compiler\", \"jdk.aot\"\n@@ -298,3 +295,3 @@\n-                               .map(mref -> mref.descriptor().name())\n-                               .filter(mn -> !mods.contains(mn))\n-                               .collect(Collectors.toSet());\n+                    .map(mref -> mref.descriptor().name())\n+                    .filter(mn -> !mods.contains(mn))\n+                    .collect(Collectors.toSet());\n","filename":"test\/jdk\/java\/lang\/Class\/getDeclaredField\/FieldSetAccessibleTest.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"}]}