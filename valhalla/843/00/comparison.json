{"files":[{"patch":"@@ -3431,1 +3431,1 @@\n-    } else if (bt == T_OBJECT || bt == T_ARRAY) {\n+    } else {\n@@ -3433,6 +3433,3 @@\n-      assert_different_registers(r0, val);\n-      \/\/ We don't need barriers because the destination is a newly allocated object.\n-      \/\/ Also, we cannot use store_heap_oop(to, val) because it uses r8 as tmp.\n-      if (UseCompressedOops) {\n-        __ encode_heap_oop(val);\n-        __ str(val, to);\n+      assert_different_registers(to.base(), val, r15, r16, r17);\n+      if (is_reference_type(bt)) {\n+        __ store_heap_oop(to, val, r15, r16, r17, IN_HEAP | ACCESS_WRITE | IS_DEST_UNINITIALIZED);\n@@ -3440,1 +3437,1 @@\n-        __ str(val, to);\n+        __ store_sized_value(to, r_1->as_Register(), type2aelembytes(bt));\n@@ -3442,5 +3439,0 @@\n-    } else {\n-      assert(is_java_primitive(bt), \"unexpected basic type\");\n-      assert_different_registers(r0, r_1->as_Register());\n-      size_t size_in_bytes = type2aelembytes(bt);\n-      __ store_sized_value(to, r_1->as_Register(), size_in_bytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"}]}