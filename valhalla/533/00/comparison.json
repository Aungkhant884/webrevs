{"files":[{"patch":"@@ -2529,1 +2529,2 @@\n-            VarSymbol _this = new VarSymbol(SYNTHETIC, names._this, tree.sym.type, tree.sym);\n+            Type receiverType = tree.sym.type.isPrimitiveReferenceType() ? tree.sym.type.asValueType() : tree.sym.type;\n+            VarSymbol _this = new VarSymbol(SYNTHETIC, names._this, receiverType, tree.sym);\n@@ -2613,0 +2614,1 @@\n+        Type receiverType = tree.sym.type.isPrimitiveReferenceType() ? tree.sym.type.asValueType() : tree.sym.type;\n@@ -2614,1 +2616,1 @@\n-                isStatic ? List.nil() : indyType.argtypes.prepend(tree.sym.type),\n+                isStatic ? List.nil() : indyType.argtypes.prepend(receiverType),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4065,0 +4065,9 @@\n+        if ((mods.flags & Flags.PRIMITIVE_CLASS) != 0) {\n+            if (token.kind == DOT) {\n+                final Token pastDot = S.token(1);\n+                if (pastDot.kind == IDENTIFIER && pastDot.name() == names.val) {\n+                    nextToken(); nextToken(); \/\/ discard .val\n+                    mods.flags |= Flags.REFERENCE_FAVORING;\n+                }\n+            }\n+        }\n@@ -4500,0 +4509,1 @@\n+             peekToken(TokenKind.IDENTIFIER, TokenKind.DOT) ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8271583\n+ * @summary [lworld] primitive records can't be reference favoring\n+ * @compile -XDallowWithFieldOperator RefFlavoredRecord.java\n+ * @run main\/othervm RefFlavoredRecord\n+ *\/\n+\n+public primitive record RefFlavoredRecord.val(int theInteger, String theString) {\n+    public static void main(String[] args) {\n+        RefFlavoredRecord rec = RefFlavoredRecord.default;\n+        if (rec != null) {\n+            throw new AssertionError(\"Ref-favoring record .default should be null?\");\n+        }\n+\n+        if (! new RefFlavoredRecord(42, \"Fortytwo\").equals(new RefFlavoredRecord(42, \"Fortytwo\"))) {\n+            throw new AssertionError(\"Records should be equal\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/records\/RefFlavoredRecord.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}