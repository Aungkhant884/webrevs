{"files":[{"patch":"@@ -1170,1 +1170,1 @@\n-    arg = InlineTypeNode::make_from_oop(&kit, arg, t->as_inline_klass(), !kit.gvn().type(arg)->maybe_null());\n+    arg = InlineTypeNode::make_from_oop(&kit, arg, sig_type->inline_klass(), !kit.gvn().type(arg)->maybe_null());\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1953,2 +1953,6 @@\n-    if (call->method()->return_type()->is_inlinetype()) {\n-      ret = InlineTypeNode::make_from_oop(this, ret, call->method()->return_type()->as_inline_klass(), call->method()->signature()->returns_null_free_inline_type());\n+    ciType* t = call->method()->return_type();\n+    if (t->is_klass()) {\n+      const Type* type = TypeOopPtr::make_from_klass(t->as_klass());\n+      if (type->is_inlinetypeptr()) {\n+        ret = InlineTypeNode::make_from_oop(this, ret, type->inline_klass(), type->inline_klass()->is_null_free());\n+      }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8309650\n+ * @summary Fix mismatch inline type issue during method calls\n+ * @library \/test\/lib\n+ * @compile TestCastMismatch.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:-TieredCompilation -Xcomp\n+ *                   compiler.valhalla.inlinetypes.TestCastMismatch\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+public class TestCastMismatch {\n+    private static int LOOP_COUNT = 50000;\n+\n+    private static final Random RD = Utils.getRandomInstance();\n+\n+    public static MultiValues add(MultiValues v1, MultiValues v2) {\n+        return v1.factory(v1.value1() + v2.value1(), v1.value2() + v2.value2());\n+    }\n+\n+    public static void main(String[] args) {\n+        Point p1 = new Point(RD.nextInt(), RD.nextInt());\n+        Point p2 = new Point(RD.nextInt(), RD.nextInt());\n+        for (int i = 0; i < LOOP_COUNT; i++) {\n+            p1 = (Point) add(p1, p2);\n+        }\n+\n+        System.out.println(\"PASS\");\n+    }\n+\n+    static abstract class MultiValues {\n+        public abstract int value1();\n+        public abstract int value2();\n+        public abstract MultiValues factory(int value1, int value2);\n+    }\n+\n+    static value class Point extends MultiValues {\n+        private int x;\n+        private int y;\n+\n+        private Point(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+\n+        @Override\n+        public int value1() {\n+            return x;\n+        }\n+\n+        @Override\n+        public int value2() {\n+            return y;\n+        }\n+\n+        @Override\n+        public Point factory(int value1, int value2) {\n+            return new Point(value1, value2);\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCastMismatch.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}