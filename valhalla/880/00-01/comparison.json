{"files":[{"patch":"@@ -1040,20 +1040,5 @@\n-            if (t.hasTag(ARRAY) && s.hasTag(ARRAY)) {\n-                if (((ArrayType)t).elemtype.isPrimitive()) {\n-                    return isSameType(elemtype(t), elemtype(s));\n-                } else {\n-                    \/\/ if T.ref <: S, then T[] <: S[]\n-                    Type es = elemtype(s);\n-                    Type et = elemtype(t);\n-                    if (!isSubtypeUncheckedInternal(et, es, false, warn))\n-                        return false;\n-                    return true;\n-                }\n-            } else if (isSubtype(t, s, capture, warn)) {\n-                return true;\n-            } else if (t.hasTag(TYPEVAR)) {\n-                return isSubtypeUncheckedInternal(t.getUpperBound(), s, false, warn);\n-            } else if (!s.isRaw()) {\n-                Type t2 = asSuper(t, s.tsym);\n-                if (t2 != null && t2.isRaw()) {\n-                    if (isReifiable(s)) {\n-                        warn.silentWarn(LintCategory.UNCHECKED);\n+            try {\n+                nullabilityComparator.setWarner(warn);\n+                if (t.hasTag(ARRAY) && s.hasTag(ARRAY)) {\n+                    if (((ArrayType)t).elemtype.isPrimitive()) {\n+                        return isSameType(elemtype(t), elemtype(s));\n@@ -1061,1 +1046,6 @@\n-                        warn.warn(LintCategory.UNCHECKED);\n+                        \/\/ if T.ref <: S, then T[] <: S[]\n+                        Type es = elemtype(s);\n+                        Type et = elemtype(t);\n+                        if (!isSubtypeUncheckedInternal(et, es, false, warn))\n+                            return false;\n+                        return true;\n@@ -1063,0 +1053,1 @@\n+                } else if (isSubtype(t, s, capture)) {\n@@ -1064,0 +1055,12 @@\n+                } else if (t.hasTag(TYPEVAR)) {\n+                    return isSubtypeUncheckedInternal(t.getUpperBound(), s, false, warn);\n+                } else if (!s.isRaw()) {\n+                    Type t2 = asSuper(t, s.tsym);\n+                    if (t2 != null && t2.isRaw()) {\n+                        if (isReifiable(s)) {\n+                            warn.silentWarn(LintCategory.UNCHECKED);\n+                        } else {\n+                            warn.warn(LintCategory.UNCHECKED);\n+                        }\n+                        return true;\n+                    }\n@@ -1065,0 +1068,3 @@\n+                return false;\n+            } finally {\n+                nullabilityComparator.clearWarner();\n@@ -1066,1 +1072,0 @@\n-            return false;\n@@ -1102,3 +1107,0 @@\n-        return isSubtype(t, s, capture, noWarnings);\n-    }\n-    public boolean isSubtype(Type t, Type s, boolean capture, Warner warn) {\n@@ -1106,2 +1108,1 @@\n-            nullabilityComparator.reset((t1, t2) -> t1.hasNarrowerNullabilityThan(t2),\n-                    !warnStack.isEmpty() ? warnStack.head : warn).visit(s, t);\n+            nullabilityComparator.reset((t1, t2) -> t1.hasNarrowerNullabilityThan(t2)).visit(s, t);\n@@ -1130,14 +1131,1 @@\n-\n-        if (warn == warnStack.head ||\n-                \/\/ if warn is noWarnings, then we should be reentering this method while computing the subtype of a,\n-                \/\/ possibly, compound type, so keep the current top of the warnStack\n-                (!warnStack.isEmpty() && warn == noWarnings)) {\n-            return isSubtype.visit(capture ? capture(t) : t, s);\n-        } else {\n-            try {\n-                warnStack = warnStack.prepend(warn);\n-                return isSubtype.visit(capture ? capture(t) : t, s);\n-            } finally {\n-                warnStack = warnStack.tail;\n-            }\n-        }\n+        return isSubtype.visit(capture ? capture(t) : t, s);\n@@ -1240,1 +1228,1 @@\n-                    nullabilityComparator.reset((t1, t2) -> t1.hasNarrowerNullabilityThan(t2), warnStack.head).visit(s, t);\n+                    nullabilityComparator.reset((t1, t2) -> t1.hasNarrowerNullabilityThan(t2)).visit(s, t);\n@@ -1289,2 +1277,2 @@\n-        private NullabilityComparator nullabilityComparator = new NullabilityComparator();\n-        class NullabilityComparator extends TypeRelation {\n+        public NullabilityComparator nullabilityComparator = new NullabilityComparator();\n+        public class NullabilityComparator extends TypeRelation {\n@@ -1294,1 +1282,1 @@\n-            NullabilityComparator reset(BiFunction<Type, Type, Boolean> differentNullability, Warner warner) {\n+            NullabilityComparator reset(BiFunction<Type, Type, Boolean> differentNullability) {\n@@ -1296,0 +1284,7 @@\n+                if (this.warner == null || this.warner == noWarnings) {\n+                    this.warner = !warnStack.isEmpty() ? warnStack.head : noWarnings;\n+                }\n+                return this;\n+            }\n+\n+            public NullabilityComparator setWarner(Warner warner) {\n@@ -1300,0 +1295,5 @@\n+            public NullabilityComparator clearWarner() {\n+                this.warner = null;\n+                return this;\n+            }\n+\n@@ -1500,1 +1500,1 @@\n-                    nullabilityComparator.reset((t1, t2) -> !t1.sameNullabilityAs(t2), !warnStack.isEmpty() ? warnStack.head : noWarnings)\n+                    nullabilityComparator.reset((t1, t2) -> !t1.sameNullabilityAs(t2))\n@@ -4383,1 +4383,1 @@\n-            if (!isSubtype(r1.getReturnType(), erasure(r2res), false, warner))\n+            if (!isSubtype(r1.getReturnType(), erasure(r2res), false))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":47,"deletions":47,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -728,3 +728,11 @@\n-             return pos != null ?\n-                     types.isSubtype(a, bound, true, new NullnessWarner(pos)) :\n-                     types.isSubtype(a, bound, true);\n+             try {\n+                 if (pos != null) {\n+                     types.nullabilityComparator.setWarner(new NullnessWarner(pos));\n+                 }\n+                 return types.isSubtype(a, bound, true);\n+             } finally {\n+                 if (pos != null) {\n+                     types.nullabilityComparator.clearWarner();\n+                 }\n+             }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}