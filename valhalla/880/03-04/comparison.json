{"files":[{"patch":"@@ -786,32 +786,0 @@\n-    public boolean sameNullabilityAs(Type t) {\n-        if (t == null) {\n-            return isNullUnspecified();\n-        }\n-        if (isNullUnspecified()) {\n-            return t.isNullUnspecified();\n-        }\n-        if (isNonNullable()) {\n-            return t.isNonNullable();\n-        }\n-        if (isNullable()) {\n-            return t.isNullable();\n-        }\n-        if (isParametric()) {\n-            return t.isParametric();\n-        }\n-        throw new AssertionError(\"shouldn't get here\");\n-    }\n-\n-    public boolean hasNarrowerNullabilityThan(Type t) {\n-        if (isNonNullable()) {\n-            return !t.isNonNullable();\n-        }\n-        if (isParametric()) {\n-            return t.isNonNullable() || t.isNullUnspecified();\n-        }\n-        if (isNullable()) {\n-            return t.isNullUnspecified();\n-        }\n-        return false;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1041,1 +1041,1 @@\n-                nullabilityComparator.setWarner(warn);\n+                warnStack = warnStack.prepend(warn);\n@@ -1070,1 +1070,1 @@\n-                nullabilityComparator.clearWarner();\n+                warnStack = warnStack.tail;\n@@ -1108,1 +1108,1 @@\n-            nullabilityComparator.reset((t1, t2) -> t1.hasNarrowerNullabilityThan(t2)).visit(s, t);\n+            nullabilityComparator.reset((t1, t2) -> hasNarrowerNullability(t1, t2)).visit(s, t);\n@@ -1228,1 +1228,1 @@\n-                    nullabilityComparator.reset((t1, t2) -> t1.hasNarrowerNullabilityThan(t2)).visit(s, t);\n+                    nullabilityComparator.reset((t1, t2) -> hasNarrowerNullability(t1, t2)).visit(s, t);\n@@ -1280,1 +1280,0 @@\n-            Warner warner;\n@@ -1284,13 +1283,0 @@\n-                if (this.warner == null || this.warner == noWarnings) {\n-                    this.warner = !warnStack.isEmpty() ? warnStack.head : noWarnings;\n-                }\n-                return this;\n-            }\n-\n-            public NullabilityComparator setWarner(Warner warner) {\n-                this.warner = warner;\n-                return this;\n-            }\n-\n-            public NullabilityComparator clearWarner() {\n-                this.warner = null;\n@@ -1302,0 +1288,1 @@\n+                Warner warner = !warnStack.isEmpty() ? warnStack.head : noWarnings;\n@@ -1312,0 +1299,1 @@\n+                Warner warner = !warnStack.isEmpty() ? warnStack.head : noWarnings;\n@@ -1526,1 +1514,1 @@\n-                    nullabilityComparator.reset((t1, t2) -> !t1.sameNullabilityAs(t2))\n+                    nullabilityComparator.reset((t1, t2) -> !hasSameNullability(t1, t2))\n@@ -2253,0 +2241,10 @@\n+    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\"warn stack\">\n+    public void pushWarner(Warner warner) {\n+        warnStack = warnStack.prepend(warner);\n+    }\n+\n+    public void popWarner() {\n+        warnStack = warnStack.tail;\n+    }\n+    \/\/ <\/editor-fold>\n+\n@@ -5403,0 +5401,40 @@\n+    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\"nullability methods\">\n+    \/**\n+     * Do t and s have the same nullability?\n+     *\/\n+    public boolean hasSameNullability(Type t, Type s) {\n+        if (s == null) {\n+            return t.isNullUnspecified();\n+        }\n+        if (t.isNullUnspecified()) {\n+            return s.isNullUnspecified();\n+        }\n+        if (t.isNonNullable()) {\n+            return s.isNonNullable();\n+        }\n+        if (t.isNullable()) {\n+            return s.isNullable();\n+        }\n+        if (t.isParametric()) {\n+            return s.isParametric();\n+        }\n+        throw new AssertionError(\"shouldn't get here\");\n+    }\n+\n+    \/**\n+     * Does t has narrower nullability than s?\n+     *\/\n+    public boolean hasNarrowerNullability(Type t, Type s) {\n+        if (t.isNonNullable()) {\n+            return !s.isNonNullable();\n+        }\n+        if (t.isParametric()) {\n+            return s.isNonNullable() || s.isNullUnspecified();\n+        }\n+        if (t.isNullable()) {\n+            return s.isNullUnspecified();\n+        }\n+        return false;\n+    }\n+    \/\/ <\/editor-fold>\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":57,"deletions":19,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.function.Consumer;\n@@ -83,1 +82,0 @@\n-import javax.lang.model.element.ExecutableElement;\n@@ -86,2 +84,0 @@\n-import javax.lang.model.type.TypeMirror;\n-import javax.lang.model.util.ElementFilter;\n@@ -692,1 +688,1 @@\n-                    if (!lint.isEnabled(LintCategory.NULL) || !tree.clazz.type.hasNarrowerNullabilityThan(tree.expr.type)) {\n+                    if (!lint.isEnabled(LintCategory.NULL) || !types.hasNarrowerNullability(tree.clazz.type, tree.expr.type)) {\n@@ -730,1 +726,1 @@\n-                     types.nullabilityComparator.setWarner(new NullnessWarner(pos));\n+                     types.pushWarner(new NullnessWarner(pos));\n@@ -735,1 +731,1 @@\n-                     types.nullabilityComparator.clearWarner();\n+                     types.popWarner();\n@@ -4494,0 +4490,1 @@\n+                    this.warned = true;\n@@ -4502,0 +4499,1 @@\n+                    this.warned = true;\n@@ -4505,0 +4503,1 @@\n+                    this.warned = true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-                                2),  \/\/ this needs to be reviewed, the warning is printed twice, should be once only\n+                                1),\n@@ -385,1 +385,1 @@\n-                                2),\n+                                1),\n@@ -426,1 +426,1 @@\n-                                2),\n+                                1),\n","filename":"test\/langtools\/tools\/javac\/bang\/BangTypesCompilationTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}