{"files":[{"patch":"@@ -546,0 +546,7 @@\n+        if (isNullable()) {\n+            sb.append(\"?\");\n+        } else if (isNonNullable()) {\n+            sb.append(\"!\");\n+        } else if (isParametric()) {\n+            sb.append(\"*\");\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.function.BiFunction;\n@@ -45,1 +46,0 @@\n-import com.sun.tools.javac.code.Source.Feature;\n@@ -53,2 +53,0 @@\n-import com.sun.tools.javac.resources.CompilerProperties.Errors;\n-import com.sun.tools.javac.resources.CompilerProperties.Warnings;\n@@ -1108,4 +1106,2 @@\n-            Warner warner = !warnStack.isEmpty() ? warnStack.head : warn;\n-            if (warner.pos() != null && s.hasNarrowerNullabilityThan(t)) {\n-                warner.warn(LintCategory.NULL);\n-            }\n+            nullabilityComparator.reset((t1, t2) -> t1.hasNarrowerNullabilityThan(t2),\n+                    !warnStack.isEmpty() ? warnStack.head : warn).visit(s, t);\n@@ -1167,5 +1163,2 @@\n-                     \/* this method can be invoked even from the backend, and warnings can be printed again, so\n-                      * make sure that the caller really wants to warn\n-                      *\/\n-                     if (s.isNonNullable() && warnStack.head.pos() != null) {\n-                         chk.errBangTypes(warnStack.head.pos(), Errors.NonNullableCannotBeAssignedNull);\n+                     if (s.isNonNullable()) {\n+                         return false;\n@@ -1246,2 +1239,2 @@\n-                if (result && warnStack.head.pos() != null && s.hasNarrowerNullabilityThan(t)) {\n-                    warnStack.head.warn(LintCategory.NULL);\n+                if (result) {\n+                    nullabilityComparator.reset((t1, t2) -> t1.hasNarrowerNullabilityThan(t2), warnStack.head).visit(s, t);\n@@ -1294,1 +1287,23 @@\n-        };\n+        }\n+\n+        private NullabilityComparator nullabilityComparator = new NullabilityComparator();\n+        class NullabilityComparator extends TypeRelation {\n+            BiFunction<Type, Type, Boolean> differentNullability;\n+            Warner warner;\n+\n+            NullabilityComparator reset(BiFunction<Type, Type, Boolean> differentNullability, Warner warner) {\n+                this.differentNullability = differentNullability;\n+                this.warner = warner;\n+                return this;\n+            }\n+\n+            @Override\n+            public Boolean visitType(Type t, Type s) {\n+                if (differentNullability.apply(t, s)) {\n+                    warner.warn(LintCategory.NULL);\n+                    return false;\n+                } else {\n+                    return true;\n+                }\n+            }\n+        }\n@@ -1484,3 +1499,3 @@\n-                Warner warner = !warnStack.isEmpty() ? warnStack.head : noWarnings;\n-                if (equal && !s.sameNullabilityAs(t)) {\n-                    warner.warn(LintCategory.NULL);\n+                if (equal) {\n+                    nullabilityComparator.reset((t1, t2) -> !t1.sameNullabilityAs(t2), !warnStack.isEmpty() ? warnStack.head : noWarnings)\n+                            .visit(s, t);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":33,"deletions":18,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -4403,1 +4403,1 @@\n-            chk.warnBangTypes(tree.selected, Warnings.AccessingMemberOfNullable);\n+            chk.warnNullableTypes(tree.selected, Warnings.AccessingMemberOfNullable);\n@@ -4407,1 +4407,1 @@\n-            chk.warnBangTypes(tree.selected, Warnings.AccessingMemberOfParametric);\n+            chk.warnNullableTypes(tree.selected, Warnings.AccessingMemberOfParametric);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-    public void warnBangTypes(DiagnosticPosition pos, Warning warnKey) {\n+    public void warnNullableTypes(DiagnosticPosition pos, Warning warnKey) {\n@@ -310,4 +310,0 @@\n-    public void errBangTypes(DiagnosticPosition pos, Error errKey) {\n-        log.error(pos, errKey);\n-    }\n-\n@@ -2029,1 +2025,1 @@\n-            warnBangTypes(TreeInfo.diagnosticPositionFor(m, tree), Warnings.OverridesWithDifferentNullness1);\n+            warnNullableTypes(TreeInfo.diagnosticPositionFor(m, tree), Warnings.OverridesWithDifferentNullness1);\n@@ -2035,1 +2031,1 @@\n-            warnBangTypes(TreeInfo.diagnosticPositionFor(m, tree), Warnings.OverridesWithDifferentNullness2);\n+            warnNullableTypes(TreeInfo.diagnosticPositionFor(m, tree), Warnings.OverridesWithDifferentNullness2);\n@@ -4463,1 +4459,1 @@\n-                    Check.this.warnBangTypes(pos(), Warnings.UncheckedNullnessConversion);\n+                    Check.this.warnNullableTypes(pos(), Warnings.UncheckedNullnessConversion);\n@@ -4500,1 +4496,1 @@\n-                    Check.this.warnBangTypes(pos(), Warnings.UncheckedNullnessConversion);\n+                    Check.this.warnNullableTypes(pos(), Warnings.UncheckedNullnessConversion);\n@@ -4522,1 +4518,1 @@\n-                    Check.this.warnBangTypes(pos(), Warnings.NarrowingNullnessConversion);\n+                    Check.this.warnNullableTypes(pos(), Warnings.NarrowingNullnessConversion);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-                                \"compiler.err.non.nullable.cannot.be.assigned.null\"),\n+                                \"compiler.err.prob.found.req\"),\n@@ -142,1 +142,1 @@\n-                                \"compiler.err.non.nullable.cannot.be.assigned.null\")\n+                                \"compiler.err.prob.found.req\")\n","filename":"test\/langtools\/tools\/javac\/bang\/BangTypesCompilationTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckClassfileFlagsTest.java:15:9: compiler.err.cant.access: ValueWithInvalidFlags, (compiler.misc.bad.class.file.header: ValueWithInvalidFlags.class, (compiler.misc.bad.class.signature: \"QValueWithInvalidFlags;\"))\n+CheckClassfileFlagsTest.java:15:9: compiler.err.cant.access: ValueWithInvalidFlags, (compiler.misc.bad.class.file.header: ValueWithInvalidFlags.class, (compiler.misc.bad.signature: \"QValueWithInvalidFlags;\"))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/lworld-values\/classfile_flags\/CheckClassfileFlagsTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}