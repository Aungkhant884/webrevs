{"files":[{"patch":"@@ -176,1 +176,1 @@\n-        final InferenceContext inferenceContext = new InferenceContext(this, tvars, allowBoxing);  \/\/B0\n+        final InferenceContext inferenceContext = new InferenceContext(this, tvars);  \/\/B0\n@@ -178,2 +178,2 @@\n-                DeferredAttr.DeferredAttrContext deferredAttrContext =\n-                        resolveContext.deferredAttrContext(msym, inferenceContext, resultInfo, warn);\n+            DeferredAttr.DeferredAttrContext deferredAttrContext =\n+                    resolveContext.deferredAttrContext(msym, inferenceContext, resultInfo, warn);\n@@ -202,1 +202,1 @@\n-                    mt = (MethodType)types.createMethodTypeWithReturn(mt, newRestype);\n+                    mt = (MethodType) types.createMethodTypeWithReturn(mt, newRestype);\n@@ -223,1 +223,1 @@\n-            mt = (MethodType)inferenceContext.asInstType(mt);\n+            mt = (MethodType) inferenceContext.asInstType(mt);\n@@ -231,1 +231,1 @@\n-                mt = (MethodType)inferenceContext.asInstType(mt);\n+                mt = (MethodType) inferenceContext.asInstType(mt);\n@@ -1169,4 +1169,2 @@\n-            boolean apply(InferenceContext inferenceContext, Type op1, Type op2, Warner warn, Types types) {\n-                return inferenceContext.allowBoxing ?\n-                    types.isBoundedBy(op1, op2, warn, (t, s, w) -> types.isSubtypeUnchecked(t, s, w)) :\n-                    types.isSubtypeUnchecked(op1, op2, warn);\n+            boolean apply(Type op1, Type op2, Warner warn, Types types) {\n+                return types.isBoundedBy(op1, op2, warn, (t, s, w) -> types.isSubtypeUnchecked(t, s, w));\n@@ -1177,1 +1175,1 @@\n-            boolean apply(InferenceContext inferenceContext, Type op1, Type op2, Warner warn, Types types) {\n+            boolean apply(Type op1, Type op2, Warner warn, Types types) {\n@@ -1182,1 +1180,1 @@\n-        abstract boolean apply(InferenceContext inferenceContext, Type op1, Type op2, Warner warn, Types types);\n+        abstract boolean apply(Type op1, Type op2, Warner warn, Types types);\n@@ -1225,1 +1223,1 @@\n-            return opKind.apply(inferenceContext, op1, op2, warn, types);\n+            return opKind.apply(op1, op2, warn, types);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -82,2 +82,0 @@\n-    boolean allowBoxing;\n-\n@@ -90,5 +88,1 @@\n-        this(infer, inferencevars, inferencevars.map(infer.fromTypeVarFun), false);\n-    }\n-\n-    public InferenceContext(Infer infer, List<Type> inferencevars, boolean allowBoxing) {\n-        this(infer, inferencevars, inferencevars.map(infer.fromTypeVarFun), allowBoxing);\n+        this(infer, inferencevars, inferencevars.map(infer.fromTypeVarFun));\n@@ -98,4 +92,0 @@\n-        this(infer, inferencevars, undetvars, false);\n-    }\n-\n-    public InferenceContext(Infer infer, List<Type> inferencevars, List<Type> undetvars, boolean allowBoxing) {\n@@ -106,1 +96,0 @@\n-        this.allowBoxing = allowBoxing;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/InferenceContext.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1055,0 +1055,2 @@\n+            boolean anyIsUndetVar = inferenceContext.asUndetVar(found).hasTag(UNDETVAR) || inferenceContext.asUndetVar(req).hasTag(UNDETVAR);\n+            boolean anyIsPrimitiveClass = found.isPrimitiveClass() || req.isPrimitiveClass();\n@@ -1056,1 +1058,2 @@\n-                    types.isSubtypeUnchecked(inferenceContext.asUndetVar(found), inferenceContext.asUndetVar(req), warn) :\n+                    (anyIsUndetVar && anyIsPrimitiveClass ? false :\n+                    types.isSubtypeUnchecked(inferenceContext.asUndetVar(found), inferenceContext.asUndetVar(req), warn)) :\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}