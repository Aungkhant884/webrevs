{"files":[{"patch":"@@ -4406,0 +4406,10 @@\n+        Assert.check(site == tree.selected.type);\n+        if (tree.name == names._class && site.isPrimitiveClass()) {\n+            \/* JDK-8269956: Where a reflective (class) literal is needed, the unqualified Point.class is\n+             * always the \"primary\" mirror - representing the primitive reference runtime type - thereby\n+             * always matching the behavior of Object::getClass\n+             *\/\n+             if (!tree.selected.hasTag(SELECT) || ((JCFieldAccess) tree.selected).name != names.val) {\n+                 tree.selected.setType(site = site.referenceProjection());\n+             }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4107,0 +4107,5 @@\n+        \/* JDK-8269956: Where a reflective (class) literal is needed, the unqualified Point.class is\n+         * always the \"primary\" mirror - representing the primitive reference runtime type - thereby\n+         * always matching the behavior of Object::getClass\n+         *\/\n+        boolean needPrimaryMirror = tree.name == names._class && tree.selected.type.isPrimitiveReferenceType();\n@@ -4108,0 +4113,3 @@\n+        if (needPrimaryMirror && tree.selected.type.isPrimitiveClass()) {\n+            tree.selected.setType(tree.selected.type.referenceProjection());\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-            Class<?> clazz = MyValue.class;\n+            Class<?> clazz = MyValue.class.asValueType();\n@@ -107,1 +107,1 @@\n-            MethodType mt = MethodType.methodType(MyValue.class);\n+            MethodType mt = MethodType.methodType(MyValue.class.asValueType());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearing.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            MethodType mt = MethodType.methodType(MyValue2.class, boolean.class);\n+            MethodType mt = MethodType.methodType(MyValue2.class.asValueType(), boolean.class);\n@@ -61,1 +61,1 @@\n-            test37_mh = lookup.findVirtual(Test37Value.class, \"test\", mt);\n+            test37_mh = lookup.findVirtual(Test37Value.class.asValueType(), \"test\", mt);\n@@ -293,1 +293,1 @@\n-            deoptimize(\"test13\", MyValue2.class, MyValue1[].class, boolean.class, long.class);\n+            deoptimize(\"test13\", MyValue2.class.asValueType(), MyValue1[].class, boolean.class, long.class);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-            MethodType mt = MethodType.methodType(MyValue1.class);\n+            MethodType mt = MethodType.methodType(MyValue1.class.asValueType());\n@@ -209,1 +209,1 @@\n-            m = TestDeoptimizationWhenBuffering.class.getMethod(\"test3Callee\", MyValue1.class);\n+            m = TestDeoptimizationWhenBuffering.class.getMethod(\"test3Callee\", MyValue1.class.asValueType());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,3 +78,3 @@\n-        Asserts.assertTrue(test1(MyValue1.class, MyValue1.class), \"test1_3 failed\");\n-        Asserts.assertTrue(test1(MyValue1.ref.class, MyValue1.class), \"test1_4 failed\");\n-        Asserts.assertFalse(test1(MyValue1.class, MyValue1.ref.class), \"test1_5 failed\");\n+        Asserts.assertTrue(test1(MyValue1.class.asValueType(), MyValue1.class.asValueType()), \"test1_3 failed\");\n+        Asserts.assertTrue(test1(MyValue1.ref.class, MyValue1.class.asValueType()), \"test1_4 failed\");\n+        Asserts.assertFalse(test1(MyValue1.class.asValueType(), MyValue1.ref.class), \"test1_5 failed\");\n@@ -83,1 +83,1 @@\n-        Asserts.assertTrue(test1(Object.class, MyValue1.class), \"test1_8 failed\");\n+        Asserts.assertTrue(test1(Object.class, MyValue1.class.asValueType()), \"test1_8 failed\");\n@@ -85,1 +85,1 @@\n-        Asserts.assertTrue(!test1(MyValue1.class, Object.class), \"test1_10 failed\");\n+        Asserts.assertTrue(!test1(MyValue1.class.asValueType(), Object.class), \"test1_10 failed\");\n@@ -94,3 +94,3 @@\n-        boolean check3 = MyValue1.class.isAssignableFrom(MyValue1.class);\n-        boolean check4 = MyValue1.ref.class.isAssignableFrom(MyValue1.class);\n-        boolean check5 = !MyValue1.class.isAssignableFrom(MyValue1.ref.class);\n+        boolean check3 = MyValue1.class.asValueType().isAssignableFrom(MyValue1.class.asValueType());\n+        boolean check4 = MyValue1.ref.class.isAssignableFrom(MyValue1.class.asValueType());\n+        boolean check5 = !MyValue1.class.asValueType().isAssignableFrom(MyValue1.ref.class);\n@@ -99,1 +99,1 @@\n-        boolean check8 = Object.class.isAssignableFrom(MyValue1.class);\n+        boolean check8 = Object.class.isAssignableFrom(MyValue1.class.asValueType());\n@@ -101,1 +101,1 @@\n-        boolean check10 = !MyValue1.class.isAssignableFrom(Object.class);\n+        boolean check10 = !MyValue1.class.asValueType().isAssignableFrom(Object.class);\n@@ -176,1 +176,1 @@\n-        Object[] va = test7(MyValue1.class, len);\n+        Object[] va = test7(MyValue1.class.asValueType(), len);\n@@ -191,1 +191,1 @@\n-        boolean result = test8(MyValue1.class, vt);\n+        boolean result = test8(MyValue1.class.asValueType(), vt);\n@@ -220,1 +220,1 @@\n-        Object result = test10(MyValue1.class, vt);\n+        Object result = test10(MyValue1.class.asValueType(), vt);\n@@ -241,1 +241,1 @@\n-        return MyValue1.class.cast(vt);\n+        return MyValue1.class.asValueType().cast(vt);\n@@ -369,1 +369,1 @@\n-            Field xField = MyValue1.class.getDeclaredField(\"x\");\n+            Field xField = MyValue1.class.asValueType().getDeclaredField(\"x\");\n@@ -371,1 +371,1 @@\n-            Field yField = MyValue1.class.getDeclaredField(\"y\");\n+            Field yField = MyValue1.class.asValueType().getDeclaredField(\"y\");\n@@ -373,1 +373,1 @@\n-            Field v1Field = MyValue1.class.getDeclaredField(\"v1\");\n+            Field v1Field = MyValue1.class.asValueType().getDeclaredField(\"v1\");\n@@ -791,1 +791,1 @@\n-        result = test41(MyValue1.class, vt);\n+        result = test41(MyValue1.class.asValueType(), vt);\n@@ -894,1 +894,1 @@\n-        Object result = test48(MyValue1.class, vt);\n+        Object result = test48(MyValue1.class.asValueType(), vt);\n@@ -897,1 +897,1 @@\n-            test48(MyValue1.class, null);\n+            test48(MyValue1.class.asValueType(), null);\n@@ -925,1 +925,1 @@\n-        Object result = test50(MyValue1.class, vt);\n+        Object result = test50(MyValue1.class.asValueType(), vt);\n@@ -936,1 +936,1 @@\n-            test50(MyValue1.class, null);\n+            test50(MyValue1.class.asValueType(), null);\n@@ -1115,1 +1115,1 @@\n-        boolean res = test58(MyValue1.class, MyValue1.class);\n+        boolean res = test58(MyValue1.class.asValueType(), MyValue1.class.asValueType());\n@@ -1117,1 +1117,1 @@\n-        res = test58(Object.class, MyValue1.class);\n+        res = test58(Object.class, MyValue1.class.asValueType());\n@@ -1119,1 +1119,1 @@\n-        res = test58(MyValue1.class, Object.class);\n+        res = test58(MyValue1.class.asValueType(), Object.class);\n@@ -1136,1 +1136,1 @@\n-            test59(MyValue1.class);\n+            test59(MyValue1.class.asValueType());\n@@ -1153,5 +1153,5 @@\n-        Asserts.assertTrue(test60(MyValue1.class, MyValue1.class, false, false));\n-        Asserts.assertFalse(test60(MyValue1.class, MyValue2.class, false, false));\n-        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, false, true));\n-        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, true, false));\n-        Asserts.assertFalse(test60(MyValue1.class, MyValue1.class, true, true));\n+        Asserts.assertTrue(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), false, false));\n+        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue2.class, false, false));\n+        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), false, true));\n+        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), true, false));\n+        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), true, true));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            MethodType mt = MethodType.methodType(MyValue3.class);\n+            MethodType mt = MethodType.methodType(MyValue3.class.asValueType());\n@@ -60,2 +60,2 @@\n-            MethodType test4_mt1 = MethodType.methodType(int.class, MyValue1.class);\n-            MethodType test4_mt2 = MethodType.methodType(MyValue1.class);\n+            MethodType test4_mt1 = MethodType.methodType(int.class, MyValue1.class.asValueType());\n+            MethodType test4_mt2 = MethodType.methodType(MyValue1.class.asValueType());\n@@ -66,1 +66,1 @@\n-            MethodType test5_mt = MethodType.methodType(int.class, MyValue1.class);\n+            MethodType test5_mt = MethodType.methodType(int.class, MyValue1.class.asValueType());\n@@ -69,1 +69,1 @@\n-            MethodType test6_mt = MethodType.methodType(MyValue3.class);\n+            MethodType test6_mt = MethodType.methodType(MyValue3.class.asValueType());\n@@ -76,1 +76,1 @@\n-            MethodType myvalue2_mt = MethodType.methodType(MyValue2.class);\n+            MethodType myvalue2_mt = MethodType.methodType(MyValue2.class.asValueType());\n@@ -91,1 +91,1 @@\n-            MethodType test9_mt = MethodType.methodType(MyValue3.class);\n+            MethodType test9_mt = MethodType.methodType(MyValue3.class.asValueType());\n@@ -102,1 +102,1 @@\n-            MethodType test10_mt = MethodType.methodType(MyValue2.class);\n+            MethodType test10_mt = MethodType.methodType(MyValue2.class.asValueType());\n@@ -107,1 +107,1 @@\n-            MethodType test10_mt3 = MethodType.methodType(MyValue2.class);\n+            MethodType test10_mt3 = MethodType.methodType(MyValue2.class.asValueType());\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1738,1 +1738,1 @@\n-            if (args[i] == null && parameterTypes[0] == MyValue1.class) {\n+            if (args[i] == null && parameterTypes[0] == MyValue1.class.asValueType()) {\n@@ -1760,1 +1760,1 @@\n-                    if (args[j] == null && parameterTypes[1] == MyValue1.class) {\n+                    if (args[j] == null && parameterTypes[1] == MyValue1.class.asValueType()) {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -397,1 +397,1 @@\n-            Class<?> vtClass = Person.class;\n+            Class<?> vtClass = Person.class.asValueType();\n@@ -675,1 +675,1 @@\n-                            .defaultvalue(FooValue.class)\n+                            .defaultvalue(FooValue.class.asValueType())\n@@ -685,1 +685,1 @@\n-                            .defaultvalue(FooValue.class)\n+                            .defaultvalue(FooValue.class.asValueType())\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-            assertTrue(arrayCls.getComponentType() == Point.class,\n+            assertTrue(arrayCls.getComponentType() == Point.class.asValueType(),\n@@ -291,1 +291,1 @@\n-        Class<?> cls = MyInt.class;\n+        Class<?> cls = MyInt.class.asValueType();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,3 +60,3 @@\n-        Method methodARef = getClass().getDeclaredMethod(\"methodA\", MyInt.class);\n-        Method methodBRef = getClass().getDeclaredMethod(\"methodB\", MyInt.class, MyInt.class);\n-        Method methodCRef = getClass().getDeclaredMethod(\"methodC\", MyInt.class, String.class);\n+        Method methodARef = getClass().getDeclaredMethod(\"methodA\", MyInt.class.asValueType());\n+        Method methodBRef = getClass().getDeclaredMethod(\"methodB\", MyInt.class.asValueType(), MyInt.class.asValueType());\n+        Method methodCRef = getClass().getDeclaredMethod(\"methodC\", MyInt.class.asValueType(), String.class);\n@@ -100,1 +100,1 @@\n-        Class pt = IntValue.class;\n+        Class pt = IntValue.class.asValueType();\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VarArgsArray.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-                    VarHandleTestAccessPoint.class, \"final_v\" + postfix, Point.class);\n+                    VarHandleTestAccessPoint.class, \"final_v\" + postfix, Point.class.asValueType());\n@@ -87,1 +87,1 @@\n-                    VarHandleTestAccessPoint.class, \"v\" + postfix, Point.class);\n+                    VarHandleTestAccessPoint.class, \"v\" + postfix, Point.class.asValueType());\n@@ -91,1 +91,1 @@\n-                VarHandleTestAccessPoint.class, \"static_final_v\" + postfix, Point.class);\n+                VarHandleTestAccessPoint.class, \"static_final_v\" + postfix, Point.class.asValueType());\n@@ -95,1 +95,1 @@\n-                VarHandleTestAccessPoint.class, \"static_v\" + postfix, Point.class);\n+                VarHandleTestAccessPoint.class, \"static_v\" + postfix, Point.class.asValueType());\n@@ -114,1 +114,1 @@\n-                VarHandleTestAccessPoint.class, \"final_v\", Point.class);\n+                VarHandleTestAccessPoint.class, \"final_v\", Point.class.asValueType());\n@@ -117,1 +117,1 @@\n-                VarHandleTestAccessPoint.class, \"v\", Point.class);\n+                VarHandleTestAccessPoint.class, \"v\", Point.class.asValueType());\n@@ -120,1 +120,1 @@\n-            VarHandleTestAccessPoint.class, \"static_final_v\", Point.class);\n+            VarHandleTestAccessPoint.class, \"static_final_v\", Point.class.asValueType());\n@@ -123,1 +123,1 @@\n-            VarHandleTestAccessPoint.class, \"static_v\", Point.class);\n+            VarHandleTestAccessPoint.class, \"static_v\", Point.class.asValueType());\n@@ -129,1 +129,1 @@\n-                    Value.class, \"point_v\", Point.class);\n+                    Value.class, \"point_v\", Point.class.asValueType());\n@@ -214,1 +214,1 @@\n-        assertEquals(vh.varType(), Point.class);\n+        assertEquals(vh.varType(), Point.class.asValueType());\n@@ -226,1 +226,1 @@\n-                    VarHandleTestAccessPoint.class, \"final_v\", Point.class);\n+                    VarHandleTestAccessPoint.class, \"final_v\", Point.class.asValueType());\n@@ -231,1 +231,1 @@\n-                    VarHandleTestAccessPoint.class, \"v\", Point.class);\n+                    VarHandleTestAccessPoint.class, \"v\", Point.class.asValueType());\n@@ -239,1 +239,1 @@\n-                VarHandleTestAccessPoint.class, \"static_final_v\", Point.class);\n+                VarHandleTestAccessPoint.class, \"static_final_v\", Point.class.asValueType());\n@@ -244,1 +244,1 @@\n-                VarHandleTestAccessPoint.class, \"static_v\", Point.class);\n+                VarHandleTestAccessPoint.class, \"static_v\", Point.class.asValueType());\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessPoint.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-                VarHandleTestMethodHandleAccessPoint.class, \"final_v\", Point.class);\n+                VarHandleTestMethodHandleAccessPoint.class, \"final_v\", Point.class.asValueType());\n@@ -70,1 +70,1 @@\n-                VarHandleTestMethodHandleAccessPoint.class, \"v\", Point.class);\n+                VarHandleTestMethodHandleAccessPoint.class, \"v\", Point.class.asValueType());\n@@ -73,1 +73,1 @@\n-            VarHandleTestMethodHandleAccessPoint.class, \"static_final_v\", Point.class);\n+            VarHandleTestMethodHandleAccessPoint.class, \"static_final_v\", Point.class.asValueType());\n@@ -76,1 +76,1 @@\n-            VarHandleTestMethodHandleAccessPoint.class, \"static_v\", Point.class);\n+            VarHandleTestMethodHandleAccessPoint.class, \"static_v\", Point.class.asValueType());\n@@ -81,1 +81,1 @@\n-                    Value.class, \"point_v\", Point.class);\n+                    Value.class, \"point_v\", Point.class.asValueType());\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessPoint.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-                VarHandleTestMethodTypePoint.class, \"final_v\", Point.class);\n+                VarHandleTestMethodTypePoint.class, \"final_v\", Point.class.asValueType());\n@@ -72,1 +72,1 @@\n-                VarHandleTestMethodTypePoint.class, \"v\", Point.class);\n+                VarHandleTestMethodTypePoint.class, \"v\", Point.class.asValueType());\n@@ -75,1 +75,1 @@\n-            VarHandleTestMethodTypePoint.class, \"static_final_v\", Point.class);\n+            VarHandleTestMethodTypePoint.class, \"static_final_v\", Point.class.asValueType());\n@@ -78,1 +78,1 @@\n-            VarHandleTestMethodTypePoint.class, \"static_v\", Point.class);\n+            VarHandleTestMethodTypePoint.class, \"static_v\", Point.class.asValueType());\n@@ -652,1 +652,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class)).\n@@ -656,1 +656,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Class.class)).\n@@ -660,1 +660,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, int.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), int.class)).\n@@ -674,1 +674,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType())).\n@@ -678,1 +678,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class, Class.class)).\n@@ -686,1 +686,1 @@\n-                hs.get(am, methodType(void.class, VarHandleTestMethodTypePoint.class, Point.class)).\n+                hs.get(am, methodType(void.class, VarHandleTestMethodTypePoint.class, Point.class.asValueType())).\n@@ -690,1 +690,1 @@\n-                hs.get(am, methodType(void.class, Class.class, Point.class)).\n+                hs.get(am, methodType(void.class, Class.class, Point.class.asValueType())).\n@@ -698,1 +698,1 @@\n-                hs.get(am, methodType(void.class, int.class, Point.class)).\n+                hs.get(am, methodType(void.class, int.class, Point.class.asValueType())).\n@@ -707,1 +707,1 @@\n-                hs.get(am, methodType(void.class, VarHandleTestMethodTypePoint.class, Point.class, Class.class)).\n+                hs.get(am, methodType(void.class, VarHandleTestMethodTypePoint.class, Point.class.asValueType(), Class.class)).\n@@ -715,1 +715,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Point.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -719,1 +719,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, Point.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -723,1 +723,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Class.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Class.class, Point.class.asValueType())).\n@@ -727,1 +727,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Point.class, Class.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Point.class.asValueType(), Class.class)).\n@@ -731,1 +731,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, int.class , Point.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, int.class , Point.class.asValueType(), Point.class.asValueType())).\n@@ -740,1 +740,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Point.class, Point.class, Class.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Point.class.asValueType(), Point.class.asValueType(), Class.class)).\n@@ -747,1 +747,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class, Point.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -751,1 +751,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Class.class, Point.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Class.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -755,1 +755,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class, Class.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class, Class.class, Point.class.asValueType())).\n@@ -759,1 +759,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class, Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class, Point.class.asValueType(), Class.class)).\n@@ -763,1 +763,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, int.class , Point.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), int.class , Point.class.asValueType(), Point.class.asValueType())).\n@@ -768,1 +768,1 @@\n-                Void r = (Void) hs.get(am, methodType(Void.class, VarHandleTestMethodTypePoint.class , Point.class, Point.class)).\n+                Void r = (Void) hs.get(am, methodType(Void.class, VarHandleTestMethodTypePoint.class , Point.class.asValueType(), Point.class.asValueType())).\n@@ -772,1 +772,1 @@\n-                boolean x = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class , Point.class, Point.class)).\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class , Point.class.asValueType(), Point.class.asValueType())).\n@@ -777,1 +777,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType())).\n@@ -781,1 +781,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class, Point.class, Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class, Point.class.asValueType(), Point.class.asValueType(), Class.class)).\n@@ -788,1 +788,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class, Point.class.asValueType())).\n@@ -792,1 +792,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Class.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Class.class, Point.class.asValueType())).\n@@ -796,1 +796,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class, Class.class)).\n@@ -800,1 +800,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, int.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), int.class, Point.class.asValueType())).\n@@ -805,1 +805,1 @@\n-                Void r = (Void) hs.get(am, methodType(Void.class, VarHandleTestMethodTypePoint.class, Point.class)).\n+                Void r = (Void) hs.get(am, methodType(Void.class, VarHandleTestMethodTypePoint.class, Point.class.asValueType())).\n@@ -809,1 +809,1 @@\n-                boolean x = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Point.class)).\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypePoint.class, Point.class.asValueType())).\n@@ -814,1 +814,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType())).\n@@ -818,1 +818,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, VarHandleTestMethodTypePoint.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), VarHandleTestMethodTypePoint.class, Point.class.asValueType())).\n@@ -1190,1 +1190,1 @@\n-                hs.get(am, methodType(void.class, Point.class, Class.class)).\n+                hs.get(am, methodType(void.class, Point.class.asValueType(), Class.class)).\n@@ -1197,1 +1197,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, Point.class.asValueType())).\n@@ -1201,1 +1201,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point.class, Class.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point.class.asValueType(), Class.class)).\n@@ -1210,1 +1210,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point.class, Point.class, Class.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point.class.asValueType(), Point.class.asValueType(), Class.class)).\n@@ -1218,1 +1218,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Class.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Class.class, Point.class.asValueType())).\n@@ -1222,1 +1222,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point.class.asValueType(), Class.class)).\n@@ -1227,1 +1227,1 @@\n-                Void r = (Void) hs.get(am, methodType(Void.class, Point.class, Point.class)).\n+                Void r = (Void) hs.get(am, methodType(Void.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1231,1 +1231,1 @@\n-                boolean x = (boolean) hs.get(am, methodType(boolean.class, Point.class, Point.class)).\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1236,1 +1236,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType())).\n@@ -1240,1 +1240,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point.class, Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point.class.asValueType(), Point.class.asValueType(), Class.class)).\n@@ -1248,1 +1248,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Class.class)).\n@@ -1253,1 +1253,1 @@\n-                Void r = (Void) hs.get(am, methodType(Void.class, Point.class)).\n+                Void r = (Void) hs.get(am, methodType(Void.class, Point.class.asValueType())).\n@@ -1257,1 +1257,1 @@\n-                boolean x = (boolean) hs.get(am, methodType(boolean.class, Point.class)).\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, Point.class.asValueType())).\n@@ -1262,1 +1262,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType())).\n@@ -1266,1 +1266,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point.class.asValueType(), Class.class)).\n@@ -1864,1 +1864,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class)).\n@@ -1868,1 +1868,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Class.class, int.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Class.class, int.class)).\n@@ -1872,1 +1872,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, int.class, int.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), int.class, int.class)).\n@@ -1876,1 +1876,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, Class.class)).\n@@ -1890,1 +1890,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType())).\n@@ -1894,1 +1894,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class, Class.class)).\n@@ -1902,1 +1902,1 @@\n-                hs.get(am, methodType(void.class, Point[].class, int.class, Point.class)).\n+                hs.get(am, methodType(void.class, Point[].class, int.class, Point.class.asValueType())).\n@@ -1906,1 +1906,1 @@\n-                hs.get(am, methodType(void.class, Class.class, int.class, Point.class)).\n+                hs.get(am, methodType(void.class, Class.class, int.class, Point.class.asValueType())).\n@@ -1914,1 +1914,1 @@\n-                hs.get(am, methodType(void.class, int.class, int.class, Point.class)).\n+                hs.get(am, methodType(void.class, int.class, int.class, Point.class.asValueType())).\n@@ -1918,1 +1918,1 @@\n-                hs.get(am, methodType(void.class, Point[].class, Class.class, Point.class)).\n+                hs.get(am, methodType(void.class, Point[].class, Class.class, Point.class.asValueType())).\n@@ -1934,1 +1934,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1938,1 +1938,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, int.class, Point.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, int.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1942,1 +1942,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Class.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Class.class, Point.class.asValueType())).\n@@ -1946,1 +1946,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class, Class.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class.asValueType(), Class.class)).\n@@ -1950,1 +1950,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, int.class, int.class, Point.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, int.class, int.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1954,1 +1954,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, Class.class, Point.class, Point.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, Class.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1963,1 +1963,1 @@\n-                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class, Point.class, Class.class)).\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class.asValueType(), Point.class.asValueType(), Class.class)).\n@@ -1971,1 +1971,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class, Point.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1975,1 +1975,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Class.class, int.class, Point.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Class.class, int.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1979,1 +1979,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class, Class.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class, Class.class, Point.class.asValueType())).\n@@ -1983,1 +1983,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class, Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class, Point.class.asValueType(), Class.class)).\n@@ -1987,1 +1987,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, int.class, int.class, Point.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), int.class, int.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1991,1 +1991,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, Class.class, Point.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, Class.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -1996,1 +1996,1 @@\n-                Void r = (Void) hs.get(am, methodType(Void.class, Point[].class, int.class, Point.class, Point.class)).\n+                Void r = (Void) hs.get(am, methodType(Void.class, Point[].class, int.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -2000,1 +2000,1 @@\n-                boolean x = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class, Point.class)).\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class.asValueType(), Point.class.asValueType())).\n@@ -2005,1 +2005,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType())).\n@@ -2009,1 +2009,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class, Point.class, Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class, Point.class.asValueType(), Point.class.asValueType(), Class.class)).\n@@ -2017,1 +2017,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class, Point.class.asValueType())).\n@@ -2021,1 +2021,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Class.class, int.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Class.class, int.class, Point.class.asValueType())).\n@@ -2025,1 +2025,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class, Class.class)).\n@@ -2029,1 +2029,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, int.class, int.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), int.class, int.class, Point.class.asValueType())).\n@@ -2033,1 +2033,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, Class.class, Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, Class.class, Point.class.asValueType())).\n@@ -2038,1 +2038,1 @@\n-                Void r = (Void) hs.get(am, methodType(Void.class, Point[].class, int.class, Point.class)).\n+                Void r = (Void) hs.get(am, methodType(Void.class, Point[].class, int.class, Point.class.asValueType())).\n@@ -2042,1 +2042,1 @@\n-                boolean x = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class)).\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, Point[].class, int.class, Point.class.asValueType())).\n@@ -2047,1 +2047,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType())).\n@@ -2051,1 +2051,1 @@\n-                Point x = (Point) hs.get(am, methodType(Point.class, Point[].class, int.class, Point.class, Class.class)).\n+                Point x = (Point) hs.get(am, methodType(Point.class.asValueType(), Point[].class, int.class, Point.class.asValueType(), Class.class)).\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypePoint.java","additions":87,"deletions":87,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-        assertTrue(array1.getClass().componentType() == Point.class);\n+        assertTrue(array1.getClass().componentType() == Point.class.asValueType());\n@@ -149,1 +149,1 @@\n-        assertTrue(array1.getClass().componentType() == Line.class);\n+        assertTrue(array1.getClass().componentType() == Line.class.asValueType());\n@@ -162,1 +162,1 @@\n-        assertTrue(array1.getClass().componentType() == NonFlattenValue.class);\n+        assertTrue(array1.getClass().componentType() == NonFlattenValue.class.asValueType());\n","filename":"test\/jdk\/valhalla\/valuetypes\/ArrayElementVarHandleTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-            new Object[] { Point.class, Point.class.asValueType()},\n+            new Object[] { Point.class, Point.class.asPrimaryType()},\n@@ -148,3 +148,3 @@\n-        assertTrue(Point.ref.class.isAssignableFrom(Point.class));\n-        assertTrue(Object.class.isAssignableFrom(Point.class));\n-        assertFalse(Point.class.isAssignableFrom(Point.ref.class));\n+        assertTrue(Point.ref.class.isAssignableFrom(Point.class.asValueType()));\n+        assertTrue(Object.class.isAssignableFrom(Point.class.asValueType()));\n+        assertFalse(Point.class.asValueType().isAssignableFrom(Point.ref.class));\n@@ -153,1 +153,1 @@\n-        assertTrue(Point.class.asSubclass(Point.ref.class) == Point.class);\n+        assertTrue(Point.class.asValueType().asSubclass(Point.ref.class) == Point.class.asValueType());\n@@ -155,1 +155,1 @@\n-            Class<?> c = Point.ref.class.asSubclass(Point.class);\n+            Class<?> c = Point.ref.class.asSubclass(Point.class.asValueType());\n@@ -160,1 +160,1 @@\n-        assertTrue(Point.class.isInstance(o));\n+        assertTrue(Point.class.asValueType().isInstance(o));\n@@ -162,1 +162,1 @@\n-        assertFalse(Point.class.isInstance(null));\n+        assertFalse(Point.class.asValueType().isInstance(null));\n","filename":"test\/jdk\/valhalla\/valuetypes\/BasicTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -159,2 +159,2 @@\n-            { P1,                   hash(Point.class, 1, 2) },\n-            { LINE1,                hash(Line.class, Point.makePoint(1, 2), Point.makePoint(3, 4)) },\n+            { P1,                   hash(Point.class.asValueType(), 1, 2) },\n+            { LINE1,                hash(Line.class.asValueType(), Point.makePoint(1, 2), Point.makePoint(3, 4)) },\n@@ -163,4 +163,4 @@\n-            { Point.makePoint(0,0), hash(Point.class, 0, 0) },\n-            { Point.default,        hash(Point.class, 0, 0) },\n-            { MyValue1.default,     hash(MyValue1.class, Point.default, null) },\n-            { new MyValue1(0, 0, null), hash(MyValue1.class, Point.makePoint(0,0), null) },\n+            { Point.makePoint(0,0), hash(Point.class.asValueType(), 0, 0) },\n+            { Point.default,        hash(Point.class.asValueType(), 0, 0) },\n+            { MyValue1.default,     hash(MyValue1.class.asValueType(), Point.default, null) },\n+            { new MyValue1(0, 0, null), hash(MyValue1.class.asValueType(), Point.makePoint(0,0), null) },\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-        MethodHandle mh1 = lookup.findStatic(PrimitiveTypeConversionTest.class, \"narrow\", methodType(Value.class, Value.ref.class));\n-        MethodHandle mh2 = mh1.asType(methodType(Value.class, Value.class));\n+        MethodHandle mh1 = lookup.findStatic(PrimitiveTypeConversionTest.class, \"narrow\", methodType(Value.class.asValueType(), Value.ref.class));\n+        MethodHandle mh2 = mh1.asType(methodType(Value.class.asValueType(), Value.class.asValueType()));\n@@ -82,1 +82,1 @@\n-        MethodHandle mh = lookup.findStatic(PrimitiveTypeConversionTest.class, \"widen\", methodType(Value.ref.class, Value.class));\n+        MethodHandle mh = lookup.findStatic(PrimitiveTypeConversionTest.class, \"widen\", methodType(Value.ref.class, Value.class.asValueType()));\n@@ -91,1 +91,1 @@\n-        MethodHandle mh2 = mh.asType(methodType(Value.class, Value.ref.class));\n+        MethodHandle mh2 = mh.asType(methodType(Value.class.asValueType(), Value.ref.class));\n@@ -103,2 +103,2 @@\n-        MethodHandle mh1 = lookup.findGetter(Value.class, \"val\", Point.class);\n-        MethodHandle mh2 = mh1.asType(methodType(Point.ref.class, Value.class));\n+        MethodHandle mh1 = lookup.findGetter(Value.class.asValueType(), \"val\", Point.class.asValueType());\n+        MethodHandle mh2 = mh1.asType(methodType(Point.ref.class, Value.class.asValueType()));\n@@ -114,2 +114,2 @@\n-        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class, \"ref\", Point.ref.class);\n-        MethodHandle mh2 = mh1.asType(methodType(Point.class, Value.class));\n+        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class.asValueType(), \"ref\", Point.ref.class);\n+        MethodHandle mh2 = mh1.asType(methodType(Point.class.asValueType(), Value.class.asValueType()));\n@@ -124,2 +124,2 @@\n-        MethodHandle mh1 = lookup.findGetter(Value.class, \"val\", Point.class);\n-        MethodHandle mh2 = mh1.asType(methodType(Point.class, Value.ref.class));\n+        MethodHandle mh1 = lookup.findGetter(Value.class.asValueType(), \"val\", Point.class.asValueType());\n+        MethodHandle mh2 = mh1.asType(methodType(Point.class.asValueType(), Value.ref.class));\n@@ -136,1 +136,1 @@\n-        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class, \"ref\", Point.ref.class);\n+        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class.asValueType(), \"ref\", Point.ref.class);\n@@ -149,2 +149,2 @@\n-        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class, \"ref\", Point.ref.class);\n-        MethodHandle mh2 = mh1.asType(methodType(Point.class, Value.class));\n+        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class.asValueType(), \"ref\", Point.ref.class);\n+        MethodHandle mh2 = mh1.asType(methodType(Point.class.asValueType(), Value.class.asValueType()));\n","filename":"test\/jdk\/valhalla\/valuetypes\/PrimitiveTypeConversionTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-        Class<?> pointQType = Point.class;\n-        Class<?> nonFlattenValueQType = NonFlattenValue.class;\n+        Class<?> pointQType = Point.class.asValueType();\n+        Class<?> nonFlattenValueQType = NonFlattenValue.class.asValueType();\n@@ -129,2 +129,2 @@\n-            { QTypeDescriptorTest.class, \"toLine\", new Class<?>[] { Point.class, NonFlattenValue.class},     true},\n-            { QTypeDescriptorTest.class, \"toLine\", new Class<?>[] { Point.ref.class, NonFlattenValue.class}, false},\n+            { QTypeDescriptorTest.class, \"toLine\", new Class<?>[] { Point.class.asValueType(), NonFlattenValue.class.asValueType()},     true},\n+            { QTypeDescriptorTest.class, \"toLine\", new Class<?>[] { Point.ref.class, NonFlattenValue.class.asValueType()}, false},\n@@ -132,4 +132,4 @@\n-            { NonFlattenValue.class, \"point\",      null,                                                     true},\n-            { NonFlattenValue.class, \"pointValue\", null,                                                     true},\n-            { NonFlattenValue.class, \"has\",        new Class<?>[] { Point.class, Point.ref.class},           true},\n-            { NonFlattenValue.class, \"has\",        new Class<?>[] { Point.class, Point.class},               false},\n+            { NonFlattenValue.class.asValueType(), \"point\",      null,                                                     true},\n+            { NonFlattenValue.class.asValueType(), \"pointValue\", null,                                                     true},\n+            { NonFlattenValue.class.asValueType(), \"has\",        new Class<?>[] { Point.class.asValueType(), Point.ref.class},           true},\n+            { NonFlattenValue.class.asValueType(), \"has\",        new Class<?>[] { Point.class.asValueType(), Point.class.asValueType()},               false},\n@@ -154,3 +154,3 @@\n-            { \"pointValue\", MethodType.methodType(Point.class),                                          true },\n-            { \"has\",        MethodType.methodType(boolean.class, Point.class, Point.ref.class),          true },\n-            { \"point\",      MethodType.methodType(Point.class),                                          false },\n+            { \"pointValue\", MethodType.methodType(Point.class.asValueType()),                                          true },\n+            { \"has\",        MethodType.methodType(boolean.class, Point.class.asValueType(), Point.ref.class),          true },\n+            { \"point\",      MethodType.methodType(Point.class.asValueType()),                                          false },\n@@ -158,1 +158,1 @@\n-            { \"has\",        MethodType.methodType(boolean.class, Point.ref.class, Point.class),          false },\n+            { \"has\",        MethodType.methodType(boolean.class, Point.ref.class, Point.class.asValueType()),          false },\n@@ -171,1 +171,1 @@\n-            MethodHandles.lookup().findVirtual(NonFlattenValue.class, name, mtype);\n+            MethodHandles.lookup().findVirtual(NonFlattenValue.class.asValueType(), name, mtype);\n","filename":"test\/jdk\/valhalla\/valuetypes\/QTypeDescriptorTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        Object o = Point.class.newInstance();\n+        Object o = Point.class.asValueType().newInstance();\n@@ -71,4 +71,4 @@\n-        checkInstanceField(Line.class, \"p1\", Point.class);\n-        checkInstanceField(Line.class, \"p2\", Point.class);\n-        checkInstanceMethod(Line.class, \"p1\", Point.class);\n-        checkInstanceMethod(Line.class, \"p2\", Point.class);\n+        checkInstanceField(Line.class.asValueType(), \"p1\", Point.class.asValueType());\n+        checkInstanceField(Line.class.asValueType(), \"p2\", Point.class.asValueType());\n+        checkInstanceMethod(Line.class.asValueType(), \"p1\", Point.class.asValueType());\n+        checkInstanceMethod(Line.class.asValueType(), \"p2\", Point.class.asValueType());\n@@ -79,4 +79,4 @@\n-        checkInstanceField(NonFlattenValue.class, \"nfp\", Point.ref.class);\n-        checkInstanceMethod(NonFlattenValue.class, \"pointValue\", Point.class);\n-        checkInstanceMethod(NonFlattenValue.class, \"point\", Point.ref.class);\n-        checkInstanceMethod(NonFlattenValue.class, \"has\", boolean.class, Point.class, Point.ref.class);\n+        checkInstanceField(NonFlattenValue.class.asValueType(), \"nfp\", Point.ref.class);\n+        checkInstanceMethod(NonFlattenValue.class.asValueType(), \"pointValue\", Point.class.asValueType());\n+        checkInstanceMethod(NonFlattenValue.class.asValueType(), \"point\", Point.ref.class);\n+        checkInstanceMethod(NonFlattenValue.class.asValueType(), \"has\", boolean.class, Point.class.asValueType(), Point.ref.class);\n","filename":"test\/jdk\/valhalla\/valuetypes\/Reflection.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-        MethodType mtype0 = MethodType.methodType(DefaultConstructor.class);\n-        MethodHandle mh0 = staticInitFactory(DefaultConstructor.class, mtype0);\n+        MethodType mtype0 = MethodType.methodType(DefaultConstructor.class.asValueType());\n+        MethodHandle mh0 = staticInitFactory(DefaultConstructor.val.class, mtype0);\n@@ -71,1 +71,1 @@\n-        assertEquals(o0, newInstance(DefaultConstructor.class, 0, mh0.type().parameterArray()));\n+        assertEquals(o0, newInstance(DefaultConstructor.val.class, 0, mh0.type().parameterArray()));\n@@ -74,2 +74,2 @@\n-        MethodType mtype1 = MethodType.methodType(ConstructorWithArgs.class, int.class);\n-        MethodHandle mh1 = staticInitFactory(ConstructorWithArgs.class, mtype1);\n+        MethodType mtype1 = MethodType.methodType(ConstructorWithArgs.class.asValueType(), int.class);\n+        MethodHandle mh1 = staticInitFactory(ConstructorWithArgs.val.class, mtype1);\n@@ -78,1 +78,1 @@\n-        assertEquals(o1, newInstance(ConstructorWithArgs.class, Modifier.PUBLIC, mh1.type().parameterArray(), 1));\n+        assertEquals(o1, newInstance(ConstructorWithArgs.val.class, Modifier.PUBLIC, mh1.type().parameterArray(), 1));\n@@ -82,2 +82,2 @@\n-        MethodType mtype2 = MethodType.methodType(ConstructorWithArgs.class, int.class, int.class);\n-        MethodHandle mh2 = staticInitFactory(ConstructorWithArgs.class, mtype2);\n+        MethodType mtype2 = MethodType.methodType(ConstructorWithArgs.class.asValueType(), int.class, int.class);\n+        MethodHandle mh2 = staticInitFactory(ConstructorWithArgs.val.class, mtype2);\n@@ -86,1 +86,1 @@\n-        assertEquals(o2, newInstance(ConstructorWithArgs.class, 0, mh2.type().parameterArray(), 1, 2));\n+        assertEquals(o2, newInstance(ConstructorWithArgs.val.class, 0, mh2.type().parameterArray(), 1, 2));\n@@ -90,2 +90,2 @@\n-        MethodType mtype3 = MethodType.methodType(ConstructorWithArgs.class, int.class, int.class, int.class);\n-        MethodHandle mh3 = staticInitFactory(ConstructorWithArgs.class, mtype3);\n+        MethodType mtype3 = MethodType.methodType(ConstructorWithArgs.class.asValueType(), int.class, int.class, int.class);\n+        MethodHandle mh3 = staticInitFactory(ConstructorWithArgs.val.class, mtype3);\n@@ -94,1 +94,1 @@\n-        assertEquals(o3, newInstance(ConstructorWithArgs.class, Modifier.PRIVATE, mh3.type().parameterArray(), 1, 2, 3));\n+        assertEquals(o3, newInstance(ConstructorWithArgs.val.class, Modifier.PRIVATE, mh3.type().parameterArray(), 1, 2, 3));\n@@ -111,1 +111,1 @@\n-            lookup.findConstructor(DefaultConstructor.class, mtype);\n+            lookup.findConstructor(DefaultConstructor.class.asValueType(), mtype);\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryMethodHandleTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    static final Class<?> PRIMITIVE_TYPE = SimplePrimitive.class;\n+    static final Class<?> PRIMITIVE_TYPE = SimplePrimitive.class.asValueType();\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        assertTrue(f1.getType() == EmptyValue.class);\n+        assertTrue(f1.getType() == EmptyValue.class.asValueType());\n@@ -93,1 +93,1 @@\n-        assertTrue(f1.getType() == EmptyValue.class);\n+        assertTrue(f1.getType() == EmptyValue.class.asValueType());\n@@ -98,1 +98,1 @@\n-        assertTrue(f2.getType() == EmptyValue.class);\n+        assertTrue(f2.getType() == EmptyValue.class.asValueType());\n@@ -111,1 +111,1 @@\n-        MethodHandle mh = MethodHandles.lookup().findGetter(Value.class, \"empty\", EmptyValue.class);\n+        MethodHandle mh = MethodHandles.lookup().findGetter(Value.class.asValueType(), \"empty\", EmptyValue.class.asValueType());\n@@ -119,1 +119,1 @@\n-        MethodHandle getter = MethodHandles.lookup().findGetter(MutableValue.class, \"empty\", EmptyValue.class);\n+        MethodHandle getter = MethodHandles.lookup().findGetter(MutableValue.class, \"empty\", EmptyValue.class.asValueType());\n@@ -123,1 +123,1 @@\n-        MethodHandle getter1 = MethodHandles.lookup().findGetter(MutableValue.class, \"vempty\", EmptyValue.class);\n+        MethodHandle getter1 = MethodHandles.lookup().findGetter(MutableValue.class, \"vempty\", EmptyValue.class.asValueType());\n@@ -127,1 +127,1 @@\n-        MethodHandle setter = MethodHandles.lookup().findSetter(MutableValue.class, \"empty\", EmptyValue.class);\n+        MethodHandle setter = MethodHandles.lookup().findSetter(MutableValue.class, \"empty\", EmptyValue.class.asValueType());\n@@ -132,1 +132,1 @@\n-        MethodHandle setter1 = MethodHandles.lookup().findSetter(MutableValue.class, \"vempty\", EmptyValue.class);\n+        MethodHandle setter1 = MethodHandles.lookup().findSetter(MutableValue.class, \"vempty\", EmptyValue.class.asValueType());\n@@ -155,1 +155,1 @@\n-        MethodHandle mh = MethodHandles.lookup().findSetter(MutableValue.class, \"empty\", EmptyValue.class);\n+        MethodHandle mh = MethodHandles.lookup().findSetter(MutableValue.class, \"empty\", EmptyValue.class.asValueType());\n","filename":"test\/jdk\/valhalla\/valuetypes\/UninitializedValueTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            new Object[] { Point.class, new Point(0,0) },\n+            new Object[] { Point.class.asValueType(), new Point(0,0) },\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        Class<?> valueClass = Value.class;\n+        Class<?> valueClass = Value.class.asValueType();\n@@ -83,1 +83,1 @@\n-            return List.of(Value.class, i, d, s, l);\n+            return List.of(Value.class.asValueType(), i, d, s, l);\n@@ -96,1 +96,1 @@\n-        generate(Value.class, \"ValueTest\", path);\n+        generate(Value.class.asValueType(), \"ValueTest\", path);\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueBootstrapMethods.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-            new Object[] { Point.class,     ClassDesc.ofDescriptor(\"Q\" + NAME + \";\"), NAME},\n+            new Object[] { Point.class.asValueType(),     ClassDesc.ofDescriptor(\"Q\" + NAME + \";\"), NAME},\n@@ -71,1 +71,1 @@\n-            new Object[] { Point.class },\n+            new Object[] { Point.class.asValueType() },\n@@ -91,1 +91,1 @@\n-                new Object[] { Point.class,         \"Q\" + NAME + \";\"},\n+                new Object[] { Point.class.asValueType(),         \"Q\" + NAME + \";\"},\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueConstantDesc.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-            Class<? extends Foo.ref> cFooRef = Foo.class; \/\/ Error\n+            Class<? extends Foo.ref> cFooRef = Foo.class.asValueType(); \/\/ Error\n@@ -31,1 +31,1 @@\n-            Class<? extends Bar.ref> cBarRef = Bar.class; \/\/ Error\n+            Class<? extends Bar.ref> cBarRef = Bar.class.asValueType(); \/\/ Error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ClassLiteralTypingNegativeTest.java:14:51: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n+ClassLiteralTypingNegativeTest.java:14:69: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ?>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n@@ -5,1 +5,1 @@\n-ClassLiteralTypingNegativeTest.java:31:51: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n+ClassLiteralTypingNegativeTest.java:31:69: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ?>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8269956\n+ * @summary  javac should generate `ldc LPoint;` for class literal Point.class\n+ * @run main TestReflectiveMirrors\n+ *\/\n+\n+public class TestReflectiveMirrors {\n+\n+    static primitive class RefDefault.val {}\n+    static primitive class ValDefault {}\n+\n+    public static void main(String [] args) {\n+\n+        if (RefDefault.class != new RefDefault().getClass()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (RefDefault.ref.class != new RefDefault().getClass()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (RefDefault.val.class != new RefDefault().getClass().asValueType()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (ValDefault.class != new ValDefault().getClass()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (ValDefault.ref.class != new ValDefault().getClass()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (ValDefault.val.class != new ValDefault().getClass().asValueType()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (TestReflectiveMirrors.RefDefault.class != new RefDefault().getClass()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (TestReflectiveMirrors.RefDefault.ref.class != new RefDefault().getClass()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (TestReflectiveMirrors.RefDefault.val.class != new RefDefault().getClass().asValueType()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (TestReflectiveMirrors.ValDefault.class != new ValDefault().getClass()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (TestReflectiveMirrors.ValDefault.ref.class != new ValDefault().getClass()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+\n+        if (TestReflectiveMirrors.ValDefault.val.class != new ValDefault().getClass().asValueType()) {\n+            throw new AssertionError(\"Wrong mirror\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TestReflectiveMirrors.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -49,1 +49,1 @@\n-            Class<?> c = X.class;\n+            Class<?> c = X.val.class;\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/UnifiedPrimitiveClassBytecodeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-            return List.of(Value.class, i, d, s, l);\n+            return List.of(Value.class.asValueType(), i, d, s, l);\n@@ -58,1 +58,1 @@\n-            return String.format(\"%s@%s\", Value.class.getName(), Integer.toHexString(localHashCode()));\n+            return String.format(\"%s@%s\", Value.class.asValueType().getName(), Integer.toHexString(localHashCode()));\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueBootstrapMethodsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}