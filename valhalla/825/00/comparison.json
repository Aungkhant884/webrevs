{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2189,0 +2189,1 @@\n+      info = state_for(x, x->state_before());\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1101,0 +1101,23 @@\n+\n+    static final primitive class MyValue27 {\n+        final int foo = rI;\n+    }\n+\n+    static class MyValue27Holder {\n+        MyValue27 v;\n+    }\n+\n+    \/\/ Make sure MyValue27Holder is loaded but MyValue27 is not\n+    Class test27Class = MyValue27Holder.class;\n+\n+    \/\/ Test unloaded inline type field load from loaded holder\n+    @Test\n+    public static int test27() {\n+        MyValue27Holder holder = new MyValue27Holder();\n+        return holder.v.foo;\n+    }\n+\n+    @Run(test = \"test27\")\n+    public void test27_verifier() {\n+        Asserts.assertEQ(test27(), 0);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestUnloadedInlineTypeField.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}