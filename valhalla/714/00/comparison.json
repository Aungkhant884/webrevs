{"files":[{"patch":"@@ -44,3 +44,0 @@\n-  if (is_super()) {\n-    st->print(\",super\");\n-  }\n","filename":"src\/hotspot\/share\/ci\/ciFlags.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-  bool is_super                () const { return (_flags & JVM_ACC_SUPER                     ) != 0; }\n","filename":"src\/hotspot\/share\/ci\/ciFlags.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-    return !get_instanceKlass()->invalid_inline_super();\n+    return !get_instanceKlass()->carries_identity_modifier();\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,1 +247,0 @@\n-  bool is_super       () { return flags().is_super(); }\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -846,1 +846,28 @@\n-\/\/ Side-effects: populates the _local_interfaces field\n+static void check_identity_and_value_modifiers(ClassFileParser* current, const InstanceKlass* super_type, TRAPS) {\n+  assert(super_type != NULL,\"Method doesn't support null super type\");\n+  if (super_type->carries_identity_modifier()) {\n+    if (current->carries_value_modifier()) {\n+        ResourceMark rm(THREAD);\n+        Exceptions::fthrow(\n+          THREAD_AND_LOCATION,\n+          vmSymbols::java_lang_IncompatibleClassChangeError(),\n+          \"Value type %s has an identity type as supertype\",\n+          current->class_name()->as_klass_external_name());\n+        return;\n+      }\n+    current->set_carries_identity_modifier();\n+  }\n+  if (super_type->carries_value_modifier()) {\n+    if (current->carries_identity_modifier()) {\n+      ResourceMark rm(THREAD);\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_IncompatibleClassChangeError(),\n+        \"Identity type %s has a value type as supertype\",\n+        current->class_name()->as_klass_external_name());\n+      return;\n+    }\n+    current->set_carries_value_modifier();\n+  }\n+}\n+\n@@ -864,1 +891,2 @@\n-    _temp_local_interfaces = new GrowableArray<InstanceKlass*>(0);\n+    _local_interfaces = Universe::the_empty_instance_klass_array();\n+\n@@ -867,1 +895,1 @@\n-    _temp_local_interfaces = new GrowableArray<InstanceKlass*>(itfs_len);\n+    _local_interface_indexes = new GrowableArray<u2>(itfs_len, mtNone);\n@@ -871,1 +899,0 @@\n-      Klass* interf;\n@@ -876,48 +903,1 @@\n-      if (cp->tag_at(interface_index).is_klass()) {\n-        interf = cp->resolved_klass_at(interface_index);\n-      } else {\n-        Symbol* const unresolved_klass  = cp->klass_name_at(interface_index);\n-\n-        \/\/ Don't need to check legal name because it's checked when parsing constant pool.\n-        \/\/ But need to make sure it's not an array type.\n-        guarantee_property(unresolved_klass->char_at(0) != JVM_SIGNATURE_ARRAY,\n-                           \"Bad interface name in class file %s\", CHECK);\n-\n-        \/\/ Call resolve_super so class circularity is checked\n-        interf = SystemDictionary::resolve_super_or_fail(\n-                                                  _class_name,\n-                                                  unresolved_klass,\n-                                                  Handle(THREAD, _loader_data->class_loader()),\n-                                                  _protection_domain,\n-                                                  false,\n-                                                  CHECK);\n-      }\n-\n-      if (!interf->is_interface()) {\n-        THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n-                  err_msg(\"class %s can not implement %s, because it is not an interface (%s)\",\n-                          _class_name->as_klass_external_name(),\n-                          interf->external_name(),\n-                          interf->class_in_module_of_loader()));\n-      }\n-\n-      InstanceKlass* ik = InstanceKlass::cast(interf);\n-      if (is_inline_type() && ik->invalid_inline_super()) {\n-        ResourceMark rm(THREAD);\n-        Exceptions::fthrow(\n-          THREAD_AND_LOCATION,\n-          vmSymbols::java_lang_IncompatibleClassChangeError(),\n-          \"Inline type %s has an identity type as supertype\",\n-          _class_name->as_klass_external_name());\n-        return;\n-      }\n-      if (ik->invalid_inline_super()) {\n-        set_invalid_inline_super();\n-      }\n-      if (ik->has_nonstatic_concrete_methods()) {\n-        *has_nonstatic_concrete_methods = true;\n-      }\n-      if (ik->is_declared_atomic()) {\n-        *is_declared_atomic = true;\n-      }\n-      _temp_local_interfaces->append(ik);\n+      _local_interface_indexes->at_put_grow(index, interface_index);\n@@ -941,2 +921,1 @@\n-        const InstanceKlass* const k = _temp_local_interfaces->at(index);\n-        name = k->name();\n+        name = cp->klass_name_at(_local_interface_indexes->at(index));\n@@ -1515,3 +1494,1 @@\n-                                   bool is_interface,\n-                                   bool is_inline_type,\n-                                   bool is_permits_value_class,\n+                                   AccessFlags class_access_flags,\n@@ -1533,0 +1510,1 @@\n+  bool is_inline_type = class_access_flags.is_value_class() && !class_access_flags.is_abstract();\n@@ -1582,1 +1560,1 @@\n-    verify_legal_field_modifiers(flags, is_interface, is_inline_type, is_permits_value_class, CHECK);\n+    verify_legal_field_modifiers(flags, class_access_flags, CHECK);\n@@ -2350,2 +2328,2 @@\n-                                      bool is_inline_type,\n-                                      bool is_abstract_type,\n+                                      bool is_value_class,\n+                                      bool is_abstract_class,\n@@ -2393,1 +2371,1 @@\n-    verify_legal_method_modifiers(flags, is_interface, is_inline_type, is_abstract_type, name, CHECK_NULL);\n+    verify_legal_method_modifiers(flags, access_flags() , name, CHECK_NULL);\n@@ -2400,1 +2378,1 @@\n-    } else if ((!is_inline_type || is_abstract_type) && signature->is_void_method_signature()) {\n+    } else if ((!is_value_class || is_abstract_class) && signature->is_void_method_signature()) {\n@@ -2402,1 +2380,1 @@\n-    } else if (is_inline_type && !signature->is_void_method_signature()) {\n+    } else if (is_value_class && !signature->is_void_method_signature()) {\n@@ -2446,0 +2424,9 @@\n+  if (EnableValhalla) {\n+    if (((flags & JVM_ACC_SYNCHRONIZED) == JVM_ACC_SYNCHRONIZED)\n+        && ((flags & JVM_ACC_STATIC) == 0 )\n+        && !carries_identity_modifier()) {\n+      classfile_parse_error(\"Invalid synchronized method in non-identity class %s\", THREAD);\n+        return NULL;\n+    }\n+  }\n+\n@@ -3013,1 +3000,1 @@\n-                                    bool is_inline_type,\n+                                    bool is_value_class,\n@@ -3039,1 +3026,1 @@\n-                                    is_inline_type,\n+                                    is_value_class,\n@@ -3323,1 +3310,1 @@\n-    \/\/ JVM_ACC_VALUE and JVM_ACC_PRIMITIVE are defined for class file version 62 and later\n+    \/\/ JVM_ACC_VALUE, JVM_ACC_PRIMITIVE, and JVM_ACC_IDENTITY are defined for class file version 62 and later\n@@ -3325,1 +3312,1 @@\n-      recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE;\n+      recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_IDENTITY;\n@@ -3335,1 +3322,3 @@\n-    verify_legal_class_modifiers(flags, CHECK_0);\n+\n+    const char* name = inner_name_index == 0 ? \"unnamed\" : cp->symbol_at(inner_name_index)->as_utf8();\n+    verify_legal_class_modifiers(flags, name, false, CHECK_0);\n@@ -4244,1 +4233,0 @@\n-    bool is_array = false;\n@@ -4247,4 +4235,0 @@\n-      if (need_verify)\n-        is_array = super_klass->is_array_klass();\n-    } else if (need_verify) {\n-      is_array = (cp->klass_name_at(super_class_index)->char_at(0) == JVM_SIGNATURE_ARRAY);\n@@ -4253,0 +4237,1 @@\n+      bool is_array = (cp->klass_name_at(super_class_index)->char_at(0) == JVM_SIGNATURE_ARRAY);\n@@ -4475,2 +4460,3 @@\n-  \/\/ Inline types are only supported by class file version 55 and later\n-  return _major_version >= JAVA_11_VERSION;\n+  \/\/ Inline types are only supported by class file version 61.65535 and later\n+  return _major_version > JAVA_17_VERSION ||\n+         (_major_version == JAVA_17_VERSION && _minor_version == JAVA_PREVIEW_MINOR_VERSION);\n@@ -4770,1 +4756,1 @@\n-void ClassFileParser::verify_legal_class_modifiers(jint flags, TRAPS) const {\n+void ClassFileParser::verify_legal_class_modifiers(jint flags, const char* name, bool is_Object, TRAPS) const {\n@@ -4774,1 +4760,2 @@\n-  const bool is_permits_value_class = (flags & JVM_ACC_PERMITS_VALUE) != 0;\n+  const bool is_identity_class = (flags & JVM_ACC_IDENTITY) != 0;\n+  const bool is_inner_class = name != NULL;\n@@ -4778,1 +4765,0 @@\n-  assert(supports_inline_types() || !is_permits_value_class, \"JVM_ACC_PERMITS_VALUE should not be set\");\n@@ -4803,1 +4789,1 @@\n-  if (!_need_verify) { return; }\n+  \/\/ if (!_need_verify) { return; }\n@@ -4815,1 +4801,1 @@\n-      (is_interface && major_gte_1_5 && (is_super || is_enum)) ||\n+      (is_interface && major_gte_1_5 && ((is_super && !supports_inline_types()) || is_enum)) ||   \/\/  ACC_SUPER (now ACC_IDENTITY) was illegal for interfaces\n@@ -4817,3 +4803,4 @@\n-      (is_value_class && (is_enum || is_permits_value_class)) ||\n-      (is_permits_value_class && (is_interface || is_final || !is_abstract)) ||\n-      (is_primitive_class && (!is_value_class || !is_final || is_interface || is_abstract))) {\n+      (is_value_class && is_enum) ||\n+      (is_identity_class && is_value_class) ||\n+      (supports_inline_types() && !is_module && !is_abstract && !is_Object && !(is_identity_class || is_value_class) && !is_inner_class) ||\n+      (supports_inline_types() && is_primitive_class && (!is_value_class || !is_final || is_interface || is_abstract))) {\n@@ -4824,8 +4811,18 @@\n-    if (is_permits_value_class)  class_note = \" (a permits_value class)\";\n-    Exceptions::fthrow(\n-      THREAD_AND_LOCATION,\n-      vmSymbols::java_lang_ClassFormatError(),\n-      \"Illegal class modifiers in class %s%s: 0x%X\",\n-      _class_name->as_C_string(), class_note, flags\n-    );\n-    return;\n+    if (is_value_class && is_identity_class) class_note = \" (a value and identity class)\";\n+    if (name == NULL) { \/\/ Not an inner class\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_ClassFormatError(),\n+        \"Illegal class modifiers in class %s%s: 0x%X\",\n+        _class_name->as_C_string(), class_note, flags\n+      );\n+      return;\n+    } else {\n+      Exceptions::fthrow(\n+        THREAD_AND_LOCATION,\n+        vmSymbols::java_lang_ClassFormatError(),\n+        \"Illegal class modifiers in declaration of inner class %s%s of class %s: 0x%X\",\n+        name, class_note, _class_name->as_C_string(), flags\n+      );\n+      return;\n+    }\n@@ -4897,4 +4894,2 @@\n-void ClassFileParser::verify_legal_field_modifiers(jint flags,\n-                                                   bool is_interface,\n-                                                   bool is_inline_type,\n-                                                   bool is_permits_value_class,\n+void ClassFileParser:: verify_legal_field_modifiers(jint flags,\n+                                                   AccessFlags class_access_flags,\n@@ -4914,0 +4909,5 @@\n+  const bool is_interface = class_access_flags.is_interface();\n+  const bool is_abstract = class_access_flags.is_abstract();\n+  const bool is_value_class = class_access_flags.is_value_class();\n+  const bool is_identity_class = class_access_flags.is_identity_class();\n+\n@@ -4926,1 +4926,1 @@\n-      if (is_inline_type && !is_static && !is_final) {\n+      if (is_value_class && !is_abstract && !is_static && !is_final) {\n@@ -4928,1 +4928,1 @@\n-      } else if (is_permits_value_class && !is_static) {\n+      } else if (is_abstract && !is_identity_class && !is_static) {\n@@ -4946,3 +4946,1 @@\n-                                                    bool is_interface,\n-                                                    bool is_inline_type,\n-                                                    bool is_abstract_type,\n+                                                    AccessFlags class_access_flags,\n@@ -4967,0 +4965,4 @@\n+  const bool is_interface    = class_access_flags.is_interface();\n+  const bool is_value_class  = class_access_flags.is_value_class();\n+  const bool is_identity_class = class_access_flags.is_identity_class();\n+  const bool is_abstract_class = class_access_flags.is_abstract();\n@@ -5009,1 +5011,1 @@\n-        if (!is_static && (!is_inline_type || is_abstract_type)) {\n+        if (!is_static && (!is_value_class || is_abstract_class)) {\n@@ -5011,1 +5013,1 @@\n-        } else if (is_static && is_inline_type) {\n+        } else if (is_static && is_value_class) {\n@@ -5016,1 +5018,1 @@\n-          class_note = (is_inline_type ? \" (an inline class)\" : \" (not an inline class)\");\n+          class_note = (is_value_class ? \" (a value class)\" : \" (not a value class)\");\n@@ -5019,1 +5021,1 @@\n-        if (is_inline_type && is_synchronized && !is_static) {\n+        if (!is_identity_class && is_synchronized && !is_static) {\n@@ -5021,1 +5023,1 @@\n-          class_note = \" (an inline class)\";\n+          class_note = \" (not an identity class)\";\n@@ -5407,1 +5409,1 @@\n-  if (!is_inline_type()) {\n+  if (!is_value_class()) {\n@@ -5593,31 +5595,0 @@\n-\/\/ Return true if the specified class is not a valid super class for an inline type.\n-\/\/ A valid super class for an inline type is abstract, has no instance fields,\n-\/\/ is not declared with the identity modifier (checked elsewhere), has\n-\/\/ an empty body-less no-arg constructor, and no synchronized instance methods.\n-\/\/ This function doesn't check if the class's super types are invalid.  Those checks\n-\/\/ are done elsewhere.  The final determination of whether or not a class is an\n-\/\/ invalid super type for an inline class is done in fill_instance_klass().\n-bool ClassFileParser::is_invalid_super_for_inline_type() {\n-  if (is_interface() || class_name() == vmSymbols::java_lang_Object()) {\n-    return false;\n-  }\n-  if (!access_flags().is_abstract() || _has_nonstatic_fields) {\n-    return true;\n-  } else {\n-    \/\/ Look at each method\n-    for (int x = 0; x < _methods->length(); x++) {\n-      const Method* const method = _methods->at(x);\n-      if (method->is_synchronized() && !method->is_static()) {\n-        return true;\n-\n-      } else if (method->name() == vmSymbols::object_initializer_name()) {\n-        if (method->signature() != vmSymbols::void_method_signature() ||\n-            !method->is_vanilla_constructor()) {\n-          return true;\n-        }\n-      }\n-    }\n-  }\n-  return false;\n-}\n-\n@@ -5660,2 +5631,4 @@\n-  if (this->_invalid_inline_super) {\n-    ik->set_invalid_inline_super();\n+  if (carries_identity_modifier()) {\n+    ik->set_carries_identity_modifier();\n+  } else if (carries_value_modifier()) {\n+    ik->set_carries_value_modifier();\n@@ -5945,1 +5918,0 @@\n-  _temp_local_interfaces(NULL),\n@@ -5947,0 +5919,1 @@\n+  _local_interface_indexes(NULL),\n@@ -5991,2 +5964,2 @@\n-  _invalid_inline_super(false),\n-  _invalid_identity_super(false),\n+  _carries_value_modifier(false),\n+  _carries_identity_modifier(false),\n@@ -6192,10 +6165,0 @@\n-  verify_legal_class_modifiers(flags, CHECK);\n-\n-  short bad_constant = class_bad_constant_seen();\n-  if (bad_constant != 0) {\n-    \/\/ Do not throw CFE until after the access_flags are checked because if\n-    \/\/ ACC_MODULE is set in the access flags, then NCDFE must be thrown, not CFE.\n-    classfile_parse_error(\"Unknown constant tag %u in class file %s\", bad_constant, THREAD);\n-    return;\n-  }\n-\n@@ -6215,0 +6178,27 @@\n+  bool is_java_lang_Object = class_name_in_cp == vmSymbols::java_lang_Object();\n+\n+  verify_legal_class_modifiers(flags, NULL, is_java_lang_Object, CHECK);\n+\n+  if (EnableValhalla) {\n+    if(!supports_inline_types()) {\n+      const bool is_module = (flags & JVM_ACC_MODULE) != 0;\n+      const bool is_interface = (flags & JVM_ACC_INTERFACE) != 0;\n+      if (!is_module && !is_interface) {\n+        flags |= JVM_ACC_IDENTITY;\n+      }\n+    }\n+    if (_access_flags.is_identity_class()) set_carries_identity_modifier();\n+    if (_access_flags.is_value_class()) set_carries_value_modifier();\n+    if (carries_identity_modifier() && carries_value_modifier()) {\n+      classfile_parse_error(\"Class %s has both ACC_IDENTITY and ACC_VALUE modifiers\", THREAD);\n+    }\n+  }\n+\n+  short bad_constant = class_bad_constant_seen();\n+  if (bad_constant != 0) {\n+    \/\/ Do not throw CFE until after the access_flags are checked because if\n+    \/\/ ACC_MODULE is set in the access flags, then NCDFE must be thrown, not CFE.\n+    classfile_parse_error(\"Unknown constant tag %u in class file %s\", bad_constant, THREAD);\n+    return;\n+  }\n+\n@@ -6295,2 +6285,0 @@\n-  assert(_temp_local_interfaces != NULL, \"invariant\");\n-\n@@ -6300,3 +6288,1 @@\n-               is_interface(),\n-               is_inline_type(),\n-               is_permits_value_class(),\n+               _access_flags,\n@@ -6315,2 +6301,2 @@\n-                is_inline_type(),\n-                is_abstract_type(),\n+                is_value_class(),\n+                is_abstract_class(),\n@@ -6398,1 +6384,1 @@\n-    check_property(_temp_local_interfaces->length() == 0,\n+    check_property(_local_interfaces == Universe::the_empty_instance_klass_array(),\n@@ -6423,7 +6409,0 @@\n-    if (_super_klass->has_nonstatic_concrete_methods()) {\n-      _has_nonstatic_concrete_methods = true;\n-    }\n-    if (_super_klass->is_declared_atomic()) {\n-      _is_declared_atomic = true;\n-    }\n-\n@@ -6435,8 +6414,9 @@\n-    \/\/ For an inline class, only java\/lang\/Object or special abstract classes\n-    \/\/ are acceptable super classes.\n-    if (is_inline_type()) {\n-      const InstanceKlass* super_ik = _super_klass;\n-      if (super_ik->invalid_inline_super()) {\n-        classfile_icce_error(\"inline class %s has an invalid super class %s\", _super_klass, THREAD);\n-        return;\n-      }\n+    if (EnableValhalla) {\n+      check_identity_and_value_modifiers(this, _super_klass, CHECK);\n+    }\n+\n+    if (_super_klass->has_nonstatic_concrete_methods()) {\n+      _has_nonstatic_concrete_methods = true;\n+    }\n+    if (_super_klass->is_declared_atomic()) {\n+      _is_declared_atomic = true;\n@@ -6458,8 +6438,10 @@\n-  \/\/ Set ik->invalid_inline_super field to TRUE if already marked as invalid,\n-  \/\/ if super is marked invalid, or if is_invalid_super_for_inline_type()\n-  \/\/ returns true\n-  if (invalid_inline_super() ||\n-      (_super_klass != NULL && _super_klass->invalid_inline_super()) ||\n-      is_invalid_super_for_inline_type()) {\n-    set_invalid_inline_super();\n-  }\n+  int itfs_len = _local_interface_indexes == NULL ? 0 : _local_interface_indexes->length();\n+  _local_interfaces = MetadataFactory::new_array<InstanceKlass*>(_loader_data, itfs_len, NULL, CHECK);\n+  if (_local_interface_indexes != NULL) {\n+    for (int i = 0; i < _local_interface_indexes->length(); i++) {\n+      u2 interface_index = _local_interface_indexes->at(i);\n+      Klass* interf;\n+      if (cp->tag_at(interface_index).is_klass()) {\n+        interf = cp->resolved_klass_at(interface_index);\n+      } else {\n+        Symbol* const unresolved_klass  = cp->klass_name_at(interface_index);\n@@ -6467,7 +6449,35 @@\n-  int itfs_len = _temp_local_interfaces->length();\n-  if (itfs_len == 0) {\n-    _local_interfaces = Universe::the_empty_instance_klass_array();\n-  } else {\n-    _local_interfaces = MetadataFactory::new_array<InstanceKlass*>(_loader_data, itfs_len, NULL, CHECK);\n-    for (int i = 0; i < itfs_len; i++) {\n-      _local_interfaces->at_put(i, _temp_local_interfaces->at(i));\n+        \/\/ Don't need to check legal name because it's checked when parsing constant pool.\n+        \/\/ But need to make sure it's not an array type.\n+        guarantee_property(unresolved_klass->char_at(0) != JVM_SIGNATURE_ARRAY,\n+                            \"Bad interface name in class file %s\", CHECK);\n+\n+        \/\/ Call resolve_super so class circularity is checked\n+        interf = SystemDictionary::resolve_super_or_fail(\n+                                                  _class_name,\n+                                                  unresolved_klass,\n+                                                  Handle(THREAD, _loader_data->class_loader()),\n+                                                  _protection_domain,\n+                                                  false,\n+                                                  CHECK);\n+      }\n+\n+      if (!interf->is_interface()) {\n+        THROW_MSG(vmSymbols::java_lang_IncompatibleClassChangeError(),\n+                  err_msg(\"class %s can not implement %s, because it is not an interface (%s)\",\n+                          _class_name->as_klass_external_name(),\n+                          interf->external_name(),\n+                          interf->class_in_module_of_loader()));\n+      }\n+\n+      if (EnableValhalla) {\n+        \/\/ Check modifiers and set carries_identity_modifier\/carries_value_modifier flags\n+        check_identity_and_value_modifiers(this, InstanceKlass::cast(interf), CHECK);\n+      }\n+\n+      if (InstanceKlass::cast(interf)->has_nonstatic_concrete_methods()) {\n+        _has_nonstatic_concrete_methods = true;\n+      }\n+      if (InstanceKlass::cast(interf)->is_declared_atomic()) {\n+        _is_declared_atomic = true;\n+      }\n+      _local_interfaces->at_put(i, InstanceKlass::cast(interf));\n@@ -6476,1 +6486,0 @@\n-  _temp_local_interfaces = NULL;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":200,"deletions":191,"binary":false,"changes":391,"status":"modified"},{"patch":"@@ -135,1 +135,0 @@\n-  GrowableArray<InstanceKlass*>* _temp_local_interfaces;\n@@ -137,0 +136,1 @@\n+  GrowableArray<u2>* _local_interface_indexes;\n@@ -209,2 +209,2 @@\n-  bool _invalid_inline_super;   \/\/ if true, invalid super type for an inline type.\n-  bool _invalid_identity_super; \/\/ if true, invalid super type for an identity type.\n+  bool _carries_value_modifier;      \/\/ Has ACC_VALUE mddifier or one of its super types has\n+  bool _carries_identity_modifier;   \/\/ Has ACC_IDENTITY modifier or one of its super types has\n@@ -279,3 +279,1 @@\n-                    bool is_interface,\n-                    bool is_inline_type,\n-                    bool is_permits_value_class,\n+                    AccessFlags class_access_flags,\n@@ -291,2 +289,2 @@\n-                       bool is_inline_type,\n-                       bool is_abstract_type,\n+                       bool is_value_class,\n+                       bool is_abstract_class,\n@@ -299,2 +297,2 @@\n-                     bool is_inline_type,\n-                     bool is_abstract_type,\n+                     bool is_value_class,\n+                     bool is_abstract_class,\n@@ -504,1 +502,1 @@\n-  void verify_legal_class_modifiers(jint flags, TRAPS) const;\n+  void verify_legal_class_modifiers(jint flags, const char* name, bool is_Object, TRAPS) const;\n@@ -506,3 +504,1 @@\n-                                    bool is_interface,\n-                                    bool is_inline_type,\n-                                    bool is_permits_value_class,\n+                                    AccessFlags class_access_flags,\n@@ -511,3 +507,1 @@\n-                                     bool is_interface,\n-                                     bool is_inline_type,\n-                                     bool is_abstract_type,\n+                                     AccessFlags class_access_flags,\n@@ -601,3 +595,3 @@\n-  bool is_inline_type() const { return _access_flags.is_value_class(); }\n-  bool is_abstract_type() const { return _access_flags.is_abstract(); }\n-  bool is_permits_value_class() const { return _access_flags.is_permits_value_class(); }\n+  bool is_inline_type() const { return _access_flags.is_value_class() && !_access_flags.is_interface() && !_access_flags.is_abstract(); }\n+  bool is_value_class() const { return _access_flags.is_value_class(); }\n+  bool is_abstract_class() const { return _access_flags.is_abstract(); }\n@@ -607,5 +601,4 @@\n-  bool invalid_inline_super() const { return _invalid_inline_super; }\n-  void set_invalid_inline_super() { _invalid_inline_super = true; }\n-  bool invalid_identity_super() const { return _invalid_identity_super; }\n-  void set_invalid_identity_super() { _invalid_identity_super = true; }\n-  bool is_invalid_super_for_inline_type();\n+  bool carries_identity_modifier() const { return _carries_identity_modifier; }\n+  void set_carries_identity_modifier() { _carries_identity_modifier = true; }\n+  bool carries_value_modifier() const { return _carries_value_modifier; }\n+  void set_carries_value_modifier() { _carries_value_modifier = true; }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":18,"deletions":25,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-  bool is_inlined() const                        { return  (_flags & (1 << is_inlined_shift))       != 0; }\n+  bool is_inlined() const                        { return (_flags & (1 << is_inlined_shift))        != 0; }\n","filename":"src\/hotspot\/share\/oops\/cpCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,3 +50,3 @@\n-#define FIELDINFO_TAG_OFFSET           1 << 0\n-#define FIELDINFO_TAG_CONTENDED        1 << 1\n-#define FIELDINFO_TAG_INLINED          1 << 2\n+#define FIELDINFO_TAG_OFFSET           (1 << 0)\n+#define FIELDINFO_TAG_CONTENDED        (1 << 1)\n+#define FIELDINFO_TAG_INLINED          (1 << 2)\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3388,2 +3388,1 @@\n-  \/\/ Remember to strip ACC_SUPER bit\n-  return (access & (~JVM_ACC_SUPER)) & JVM_ACC_WRITTEN_FLAGS;\n+  return (access & JVM_ACC_WRITTEN_FLAGS);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -284,2 +284,4 @@\n-    _misc_invalid_inline_super                = 1 << 18, \/\/ invalid super type for an inline type\n-    _misc_invalid_identity_super              = 1 << 19, \/\/ invalid super type for an identity type\n+    \/\/ _misc_invalid_value_super                 = 1 << 18, \/\/ invalid super type for an value type\n+    \/\/ _misc_invalid_identity_super              = 1 << 19, \/\/ invalid super type for an identity type\n+    _misc_carries_value_modifier              = 1 << 20, \/\/ the class or one of its super types has the ACC_VALUE modifier\n+    _misc_carries_identity_modifier           = 1 << 21, \/\/ the class or one of its super types has the ACC_IDENTITY modifier\n@@ -460,3 +462,2 @@\n-  \/\/ Query if class is an invalid super class for an inline type.\n-  bool invalid_inline_super() const {\n-    return (_misc_flags & _misc_invalid_inline_super) != 0;\n+  bool carries_value_modifier() const {\n+    return (_misc_flags &  _misc_carries_value_modifier) != 0;\n@@ -464,0 +465,1 @@\n+\n@@ -465,2 +467,2 @@\n-  void set_invalid_inline_super() {\n-    _misc_flags |= _misc_invalid_inline_super;\n+  void set_carries_value_modifier() {\n+    _misc_flags |= _misc_carries_value_modifier;\n@@ -468,3 +470,3 @@\n-  \/\/ Query if class is an invalid super class for an identity type.\n-  bool invalid_identity_super() const {\n-    return (_misc_flags & _misc_invalid_identity_super) != 0;\n+\n+  bool carries_identity_modifier() const {\n+    return (_misc_flags & _misc_carries_identity_modifier) != 0;\n@@ -472,0 +474,1 @@\n+\n@@ -473,2 +476,2 @@\n-  void set_invalid_identity_super() {\n-    _misc_flags |= _misc_invalid_identity_super;\n+  void set_carries_identity_modifier() {\n+    _misc_flags |= _misc_carries_identity_modifier;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -670,1 +670,0 @@\n-  bool is_super() const                 { return _access_flags.is_super(); }\n@@ -672,1 +671,1 @@\n-  bool is_permits_value_class() const   { return _access_flags.is_permits_value_class(); }\n+  bool is_value_class() const           { return _access_flags.is_value_class(); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -917,1 +917,1 @@\n-  write_u2(ik()->access_flags().get_flags() & (JVM_RECOGNIZED_CLASS_MODIFIERS | JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_PERMITS_VALUE));\n+  write_u2(ik()->access_flags().get_flags() & (JVM_RECOGNIZED_CLASS_MODIFIERS | JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_IDENTITY));\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2307,3 +2307,3 @@\n-    if (k->is_super()) {\n-      result |= JVM_ACC_SUPER;\n-    }\n+    \/\/ if (k->is_super()) {\n+    \/\/   result |= JVM_ACC_SUPER;\n+    \/\/ }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2292,2 +2292,2 @@\n-  declare_constant(InstanceKlass::_misc_invalid_inline_super)             \\\n-  declare_constant(InstanceKlass::_misc_invalid_identity_super)           \\\n+  declare_constant(InstanceKlass::_misc_carries_identity_modifier)        \\\n+  declare_constant(InstanceKlass::_misc_carries_value_modifier)           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-  if (is_permits_value_class    ()) st->print(\"permits_value \"    );\n@@ -67,0 +66,3 @@\n+  if (is_identity_class()) st->print(\"identity \"  );\n+  if (is_value_class()) st->print(\"value \"        );\n+  if (is_primitive_class()) st->print(\"primitive \");\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n-  bool is_super       () const         { return (_flags & JVM_ACC_SUPER       ) != 0; }\n@@ -131,1 +130,0 @@\n-  bool is_permits_value_class () const { return (_flags & JVM_ACC_PERMITS_VALUE   ) != 0; }\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -240,9 +240,3 @@\n-        String s = isPrimitive() ? \"\" : \"class \";\n-        if (isInterface()) {\n-            s = \"interface \";\n-        }\n-        if (isValue()) {\n-            s = \"value \";\n-        }\n-        if (isPrimitiveClass()) {\n-            s = \"primitive \";\n+        String s = getName();\n+        if (isPrimitive()) {\n+            return s;\n@@ -251,3 +245,9 @@\n-        s = s.concat(getName());\n-        if (isPrimitiveClass() && isPrimaryType()) {\n-            s = s.concat(\".ref\");\n+        \/\/ Prepend type of class\n+        s = (isInterface() ? \"interface \" : \"class \").concat(s);\n+        if (isValue()) {\n+            \/\/ prepend value class type\n+            s = (isPrimitiveClass() ? \"primitive \" : \"value \").concat(s);\n+            if (isPrimitiveClass() && isPrimaryType()) {\n+                \/\/ Append .ref\n+                s = s.concat(\".ref\");\n+            }\n@@ -308,0 +308,2 @@\n+                \/\/ Modifier.toString() below mis-interprets SYNCHRONIZED, STRICT, and VOLATILE bits\n+                modifiers &= ~(Modifier.SYNCHRONIZED | Modifier.STRICT | Modifier.VOLATILE);\n@@ -317,1 +319,1 @@\n-                    sb.append(isPrimitiveClass() ? \"primitive\" : \"value\");\n+                    sb.append(isPrimitiveClass() ? \"primitive \" : \"value \");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -129,0 +129,6 @@\n+    \/**\n+     * The access flag {@code ACC_IDENTITY} with a mask value of {@code\n+     * 0x0020}.\n+     *\/\n+\/\/    IDENTITY(0x0000_0020, false, Set.of(Location.CLASS)),\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-     * {@code permitsValue} modifier, {@code false} otherwise.\n+     * {@code identity} modifier, {@code false} otherwise.\n@@ -131,1 +131,1 @@\n-     * {@code permitsValue} modifier; {@code false} otherwise.\n+     * {@code identity} modifier; {@code false} otherwise.\n@@ -133,2 +133,2 @@\n-    public static boolean isPermitsValue(int mod) {\n-        return (mod & PERMITS_VALUE) != 0;\n+    public static boolean isIdentity(int mod) {\n+        return (mod & IDENTITY) != 0;\n@@ -309,1 +309,1 @@\n-     * The {@code int} value representing the {@code permits_value}\n+     * The {@code int} value representing the {@code ACC_IDENTITY}\n@@ -312,1 +312,1 @@\n-    public static final int PERMITS_VALUE    = 0x00000040;\n+    public static final int IDENTITY            = 0x00000020;\n@@ -390,1 +390,1 @@\n-        Modifier.STRICT         | Modifier.PERMITS_VALUE;\n+        Modifier.STRICT         | Modifier.IDENTITY;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-            int accessFlags = Modifier.PUBLIC | Modifier.FINAL;\n+            int accessFlags = Modifier.PUBLIC | Modifier.FINAL | Modifier.IDENTITY;\n@@ -511,1 +511,1 @@\n-                    accessFlags = Modifier.FINAL;  \/\/ non-public, final\n+                    accessFlags = Modifier.FINAL | Modifier.IDENTITY;  \/\/ non-public, final\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -339,0 +339,1 @@\n+    int ACC_IDENTITY = 0x0020; \/\/ class\n@@ -343,0 +344,1 @@\n+    int ACC_VALUE = 0x0040; \/\/ class\n@@ -351,0 +353,1 @@\n+    int ACC_PRIMITIVE = 0x0800; \/\/ class\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Opcodes.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-    JVM_ACC_PERMITS_VALUE = 0x0100,\n","filename":"src\/java.base\/share\/native\/include\/classfile_constants.h.template","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static java.lang.reflect.Modifier.PERMITS_VALUE;\n+import static java.lang.reflect.Modifier.IDENTITY;\n@@ -57,1 +57,1 @@\n-        return PUBLIC | FINAL | INTERFACE | ABSTRACT | ANNOTATION | ENUM | SYNTHETIC | PERMITS_VALUE;\n+        return PUBLIC | FINAL | INTERFACE | ABSTRACT | ANNOTATION | ENUM | SYNTHETIC | IDENTITY;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotModifiers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -83,6 +84,6 @@\n-        Asserts.assertEQ(CanonicalizeGetModifiers.class.getModifiers(), Modifier.PUBLIC);\n-        Asserts.assertEQ(T1.class.getModifiers(), Modifier.PUBLIC | Modifier.STATIC);\n-        Asserts.assertEQ(T2.class.getModifiers(), Modifier.PUBLIC | Modifier.FINAL | Modifier.STATIC);\n-        Asserts.assertEQ(T3.class.getModifiers(), Modifier.PRIVATE | Modifier.STATIC);\n-        Asserts.assertEQ(T4.class.getModifiers(), Modifier.PROTECTED | Modifier.STATIC);\n-        Asserts.assertEQ(new CanonicalizeGetModifiers().new T5().getClass().getModifiers(), 0\/* NONE *\/);\n+        Asserts.assertEQ(CanonicalizeGetModifiers.class.getModifiers(), Modifier.PUBLIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(T1.class.getModifiers(), Modifier.PUBLIC | Modifier.STATIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(T2.class.getModifiers(), Modifier.PUBLIC | Modifier.FINAL | Modifier.STATIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(T3.class.getModifiers(), Modifier.PRIVATE | Modifier.STATIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(T4.class.getModifiers(), Modifier.PROTECTED | Modifier.STATIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(new CanonicalizeGetModifiers().new T5().getClass().getModifiers(), 0\/* NONE *\/ | Modifier.IDENTITY);\n@@ -109,5 +110,5 @@\n-        Asserts.assertEQ(new CanonicalizeGetModifiers().getClass().getModifiers(), Modifier.PUBLIC);\n-        Asserts.assertEQ(new T1().getClass().getModifiers(), Modifier.PUBLIC | Modifier.STATIC);\n-        Asserts.assertEQ(new T2().getClass().getModifiers(), Modifier.PUBLIC | Modifier.FINAL | Modifier.STATIC);\n-        Asserts.assertEQ(new T3().getClass().getModifiers(), Modifier.PRIVATE | Modifier.STATIC);\n-        Asserts.assertEQ(new T4().getClass().getModifiers(), Modifier.PROTECTED | Modifier.STATIC);\n+        Asserts.assertEQ(new CanonicalizeGetModifiers().getClass().getModifiers(), Modifier.PUBLIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(new T1().getClass().getModifiers(), Modifier.PUBLIC | Modifier.STATIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(new T2().getClass().getModifiers(), Modifier.PUBLIC | Modifier.FINAL | Modifier.STATIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(new T3().getClass().getModifiers(), Modifier.PRIVATE | Modifier.STATIC | Modifier.IDENTITY);\n+        Asserts.assertEQ(new T4().getClass().getModifiers(), Modifier.PROTECTED | Modifier.STATIC | Modifier.IDENTITY);\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/CanonicalizeGetModifiers.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-class CondyHello\n+super class CondyHello\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/condy\/CondyHello.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-                throw new RuntimeException(\"ClassFormatError thrown, incorrect message\");\n+                throw new RuntimeException(\"ClassFormatError thrown, incorrect message: \" + e.getMessage());\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/CondyBadBSMArrayTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-  0x0000; \/\/ access\n+  0x0020; \/\/ access ACC_SUPER\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/CondyBadBSMIndex.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-class CondyBadLDC\n+super class CondyBadLDC\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/CondyBadLDC.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-class CondyBadLDC2_W\n+super class CondyBadLDC2_W\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/CondyBadLDC2_W.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-  0x0000; \/\/ access\n+  0x0020; \/\/ access ACC_SUPER\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/CondyEmptyBSMArray1.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-  0x0000; \/\/ access\n+  0x0020; \/\/ access ACC_SUPER\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/CondyNoBSMArray.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-class CondyUseLDC_W\n+super class CondyUseLDC_W\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/CondyUseLDC_W.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-  0x0000; \/\/ access\n+  0x0020; \/\/ access ACC_SUPER\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/CondyUsesIndyBSM.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,1 +163,1 @@\n-  0x0000; \/\/ access [ ]\n+  0x0020; \/\/ access ACC_SUPER\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/IndyUsesCondyBSM.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-public class Example\n+super public class Example\n","filename":"test\/hotspot\/jtreg\/runtime\/condy\/staticInit\/Example.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass version 63:0 {\n+super public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass version 63:0 {\n@@ -45,1 +45,1 @@\n-public final class runtime\/valhalla\/inlinetypes\/MyValue version 63:0 {\n+super public final class runtime\/valhalla\/inlinetypes\/MyValue version 63:0 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClasses.jasm","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  0x0461; \/\/ access [ ACC_PUBLIC ACC_ABSTRACT ACC_SUPER ACC_VALUE ]\n+  0x0441; \/\/ access [ ACC_PUBLIC ACC_ABSTRACT ACC_VALUE ]\n@@ -221,1 +221,1 @@\n-  0x0471; \/\/ access [ ACC_FINAL ACC_PUBLIC ACC_VALUE ACC_SUPER ACC_ABSTRACT ]\n+  0x0451; \/\/ access [ ACC_FINAL ACC_PUBLIC ACC_VALUE ACC_ABSTRACT ]\n@@ -363,1 +363,1 @@\n-  0x0661; \/\/ access [ ACC_INTERFACE ACC_PUBLIC ACC_SUPER ACC_VALUE ACC_ABSTRACT ]\n+  0x0641; \/\/ access [ ACC_INTERFACE ACC_PUBLIC ACC_VALUE ACC_ABSTRACT ]\n@@ -505,1 +505,1 @@\n-  0x0461; \/\/ access [ ACC_PUBLIC ACC_SUPER ACC_VALUE ACC_ABSTRACT ]\n+  0x0441; \/\/ access [ ACC_PUBLIC ACC_VALUE ACC_ABSTRACT ]\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCCFETests.jcod","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                \"Illegal class modifiers in class AbstractVintf (a value class)\");\n+                \"Illegal field modifiers in class AbstractVintf: 0x8\");\n@@ -64,1 +64,1 @@\n-                \"Method meth in class AbstractVMethod (an inline class) has illegal modifiers\");\n+                \"Method meth in class AbstractVMethod (not an identity class) has illegal modifiers: 0x21\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_CFETest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+        \/\/ Test has to be re-think now that ACC_PERMITS_VALUE has been removed\n+        \/\/ and the model has changed to ACC_VALUE\/ACC_IDENTITY modifiers\n@@ -50,1 +52,1 @@\n-        runTest(\"Dot\", \"value class Dot cannot inherit from class NonPVSuper\");\n+        runTest(\"Dot\", \"Value type Dot has an identity type as supertype\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACC_ICCETest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                \"Method getInt in class ValueMethodSynch (an inline class) has illegal modifiers\");\n+                \"Method getInt in class ValueMethodSynch (not an identity class) has illegal modifiers: 0x20\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/BadInlineTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+abstract class AbstractClassWithBothModifiers {\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractClassWithBothModifiers.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+abstract class AbstractClassWithFieldExtendingValueClass extends IdentityAbstract {\n+    int i;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractClassWithFieldExtendingValueClass.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+abstract class AbstractClassWithFieldWithNoIdentityModifier {\n+    int i;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractClassWithFieldImplementingValueInterface.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+abstract class AbstractClassWithFieldWithNoIdentityModifier {\n+    int i;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractClassWithFieldWithNoIdentityModifier.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+abstract class AbstractClassWithBothModifiers {\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractClassWithSynchMethodWithNoIdentityModifier.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+abstract class AbstractClassWithFieldWithNoIdentityModifier {\n+    int i;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractClassWithfieldWithNoIdentityModifier.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ Abstract class with an instance field, this must generate an identity class\n+abstract class AbstractWithField {\n+    int i;\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractWithField.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ abstract class with a synchronized method, must generate an identity class\n+abstract class AbstractWithSynchMethod {\n+    synchronized void synchMethod() { }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractWithSynchMethod.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+abstract class AbstractClassWithSynchMethodWithNoIdentityModifier {\n+    synhronized void foo() { }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/AbstractWithSynchMethodWithNoIdentityModifier.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,832 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+ class ValueClassExtendingIdentityClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"ValueClassExtendingIdentityClass\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"IdentityAbstract\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()LValueClassExtendingIdentityClass;\"; \/\/ #6\n+    Utf8 \"Code\"; \/\/ #7\n+    Utf8 \"LineNumberTable\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"ValueClassExtendingIdentityClass.java\"; \/\/ #10\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#8) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueClassExtendingIdentityClass\n+\n+class ValueClassExtendingAbstractClassWithField {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"ValueClassExtendingAbstractClassWithField\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"AbstractWithField\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()LValueClassExtendingAbstractClassWithField;\"; \/\/ #6\n+    Utf8 \"Code\"; \/\/ #7\n+    Utf8 \"LineNumberTable\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"ValueClassExtendingAbstractClassWithField.java\"; \/\/ #10\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#8) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueClassExtendingAbstractClassWithField\n+\n+class ValueClassExtendingAbstractClassWithSynchMethod {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"ValueClassExtendingAbstractClassWithSynchMethod\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"AbstractWithSynchMethod\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()LValueClassExtendingAbstractClassWithSynchMethod;\"; \/\/ #6\n+    Utf8 \"Code\"; \/\/ #7\n+    Utf8 \"LineNumberTable\"; \/\/ #8\n+    Utf8 \"SourceFile\"; \/\/ #9\n+    Utf8 \"ValueClassExtendingAbstractClassWithSynchMethod.java\"; \/\/ #10\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#7) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#8) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#9) { \/\/ SourceFile\n+      #10;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueClassExtendingAbstractClassWithSynchMethod\n+\n+class ValueClassImplementingIdentityInterface {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    class #2; \/\/ #1\n+    Utf8 \"ValueClassImplementingIdentityInterface\"; \/\/ #2\n+    class #4; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    class #6; \/\/ #5\n+    Utf8 \"IdentityInterface\"; \/\/ #6\n+    Utf8 \"<init>\"; \/\/ #7\n+    Utf8 \"()LValueClassImplementingIdentityInterface;\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"ValueClassImplementingIdentityInterface.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0050; \/\/ access\n+  #1;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #5;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0008; \/\/ access\n+      #7; \/\/ name_index\n+      #8; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xCB00014B2AB0;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ValueClassImplementingIdentityInterface\n+\n+class IdentityClassExtendingValueClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"ValueAbstract\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"IdentityClassExtendingValueClass\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"IdentityClassExtendingValueClass.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class IdentityClassExtendingValueClass\n+\n+class IdentityClassImplementingValueInterface {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"IdentityClassImplementingValueInterface\"; \/\/ #8\n+    class #10; \/\/ #9\n+    Utf8 \"ValueInterface\"; \/\/ #10\n+    Utf8 \"Code\"; \/\/ #11\n+    Utf8 \"LineNumberTable\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"IdentityClassImplementingValueInterface.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #9;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class IdentityClassImplementingValueInterface\n+\n+class AbstractClassWithFieldExtendingValueClass {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"ValueAbstract\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractClassWithFieldExtendingValueClass\"; \/\/ #8\n+    Utf8 \"i\"; \/\/ #9\n+    Utf8 \"I\"; \/\/ #10\n+    Utf8 \"Code\"; \/\/ #11\n+    Utf8 \"LineNumberTable\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"AbstractClassWithFieldExtendingValueClass.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0420; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #9; \/\/ name_index\n+      #10; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractClassWithFieldExtendingValueClass\n+\n+class AbstractClassWithFieldImplementingValueInterface {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractClassWithFieldImplementingValueInterface\"; \/\/ #8\n+    class #10; \/\/ #9\n+    Utf8 \"ValueInterface\"; \/\/ #10\n+    Utf8 \"i\"; \/\/ #11\n+    Utf8 \"I\"; \/\/ #12\n+    Utf8 \"Code\"; \/\/ #13\n+    Utf8 \"LineNumberTable\"; \/\/ #14\n+    Utf8 \"SourceFile\"; \/\/ #15\n+    Utf8 \"AbstractClassWithFieldImplementingValueInterface.java\"; \/\/ #16\n+  } \/\/ Constant Pool\n+\n+  0x0420; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+    #9;\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #11; \/\/ name_index\n+      #12; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#13) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#14) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#15) { \/\/ SourceFile\n+      #16;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractClassWithFieldImplementingValueInterface\n+\n+class AbstractClassWithFieldWithNoIdentityModifier {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractClassWithFieldWithNoIdentityModifier\"; \/\/ #8\n+    Utf8 \"i\"; \/\/ #9\n+    Utf8 \"I\"; \/\/ #10\n+    Utf8 \"Code\"; \/\/ #11\n+    Utf8 \"LineNumberTable\"; \/\/ #12\n+    Utf8 \"SourceFile\"; \/\/ #13\n+    Utf8 \"AbstractClassWithFieldWithNoIdentityModifier.java\"; \/\/ #14\n+  } \/\/ Constant Pool\n+\n+  0x0400; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+    {  \/\/ field\n+      0x0000; \/\/ access\n+      #9; \/\/ name_index\n+      #10; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#11) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#12) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#13) { \/\/ SourceFile\n+      #14;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractClassWithFieldWithNoIdentityModifier\n+\n+class AbstractClassWithSynchMethodWithNoIdentityModifier {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractClassWithSynchMethodWithNoIdentityModifier\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"foo\"; \/\/ #11\n+    Utf8 \"SourceFile\"; \/\/ #12\n+    Utf8 \"AbstractClassWithSynchMethodWithNoIdentityModifier.java\"; \/\/ #13\n+  } \/\/ Constant Pool\n+\n+  0x0400; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0020; \/\/ access\n+      #11; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          0; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0xB1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  2;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#12) { \/\/ SourceFile\n+      #13;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractClassWithSynchMethodWithNoIdentityModifier\n+\n+class AbstractClassWithBothModifiers {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"AbstractClassWithBothModifiers\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"AbstractClassWithBothModifiers.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0460; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class AbstractClassWithBothModifiers\n+\n+class ConcreteClassWithNoModifiers {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  63; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"ConcreteClassWithNoModifiers\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"ConcreteClassWithNoModifiers.java\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0000; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ConcreteClassWithNoModifiers\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ClassesWithInvalidModifiers.jcod","additions":832,"deletions":0,"binary":false,"changes":832,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+class ConcreteClassWithNoModifiers {\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ConcreteClassWithNoModifiers.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+abstract identity class IdentityAbstract { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/IdentityAbstract.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+identity class IdentityClassExtendingValueClass extends IdentityAbstract { }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/IdentityClassExtendingValueClass.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+abstract identity class IdentityClassImplementingValueInterface implements IdentityInterface {\n+    int i;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/IdentityClassImplementingValueInterface.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+identity interface IdentityInterface { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/IdentityInterface.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+abstract class NeutralAbstract { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/NeutralAbstract.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+interface NeutralInterface { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/NeutralInterface.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary test that the JVM correctly accepts or rejects classes based on their\n+ *          ACC_VALUE\/ACC_IDENTITY modifiers\n+ * @library \/test\/lib\n+ * @compile NeutralInterface.java ValueInterface.java IdentityInterface.java\n+ * @compile NeutralAbstract.java ValueAbstract.java IdentityAbstract.java AbstractWithField.java AbstractWithSynchMethod.java\n+ * @compile ClassesWithInvalidModifiers.jcod\n+ * @run main\/othervm -verify TestClassModifiers\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+ public class TestClassModifiers {\n+  static value class VC0 {}\n+  static value class VC1 implements NeutralInterface { }\n+  static value class VC2 implements ValueInterface { }\n+  static value class VC3 extends NeutralAbstract { }\n+  static value class VC4 extends ValueAbstract { }\n+  static value class VC5 extends NeutralAbstract implements NeutralInterface { }\n+  static value class VC6 extends NeutralAbstract implements ValueInterface { }\n+  static value class VC7 extends ValueAbstract implements NeutralInterface { }\n+  static value class VC8 extends ValueAbstract implements ValueInterface { }\n+\n+  static identity class IC0 { }\n+  static identity class IC1 implements NeutralInterface { }\n+  static identity class IC2 implements IdentityInterface { }\n+  static identity class IC3 extends NeutralAbstract { }\n+  static identity class IC4 extends IdentityAbstract { }\n+  static identity class IC5 extends AbstractWithField { }\n+  static identity class IC6 extends AbstractWithSynchMethod { }\n+  static identity class IC7 extends NeutralAbstract implements NeutralInterface { }\n+  static identity class IC8 extends NeutralAbstract implements IdentityInterface { }\n+  static identity class IC9 extends IdentityAbstract implements NeutralInterface { }\n+  static identity class IC10 extends IdentityAbstract implements IdentityInterface { }\n+\n+\n+  static abstract class AC0 extends AbstractWithField implements NeutralInterface { }\n+  static abstract class AC1 extends AbstractWithField implements IdentityInterface { }\n+  static abstract class AC2 extends AbstractWithSynchMethod implements NeutralInterface { }\n+  static abstract class AC3 extends AbstractWithSynchMethod implements IdentityInterface { }\n+\n+  static String[] validClasses = {\"VC0\", \"VC1\", \"VC2\", \"VC3\", \"VC4\", \"VC5\", \"VC6\", \"VC7\", \"VC8\",\n+                                  \"IC0\", \"IC1\", \"IC2\", \"IC3\", \"IC4\", \"IC5\", \"IC6\", \"IC7\", \"IC8\", \"IC9\", \"IC10\",\n+                                  \"AC0\", \"AC1\", \"AC2\", \"AC3\"};\n+\n+  static String[] invalidClassesWithICCE = {\"ValueClassExtendingIdentityClass\", \"ValueClassExtendingAbstractClassWithField\",\n+                                    \"ValueClassExtendingAbstractClassWithSynchMethod\", \"ValueClassImplementingIdentityInterface\",\n+                                    \"IdentityClassExtendingValueClass\", \"IdentityClassImplementingValueInterface\",\n+                                    \"AbstractClassWithFieldExtendingValueClass\", \"AbstractClassWithFieldImplementingValueInterface\"};\n+  static String[] invalidClassesWithCFE = {\"AbstractClassWithFieldWithNoIdentityModifier\", \"AbstractClassWithSynchMethodWithNoIdentityModifier\",\n+                                           \"AbstractClassWithBothModifiers\", \"ConcreteClassWithNoModifiers\"};\n+\n+  public static void main(String[] args) throws Exception {\n+    \/\/ testing valid cases first\n+    try {\n+      for (String name : validClasses) {\n+        System.out.println(\"Trying to load \"+name);\n+        Class c = Class.forName(\"TestClassModifiers$\"+name);\n+      }\n+    } catch(Throwable t) {\n+      t.printStackTrace();\n+      throw t;\n+    }\n+\n+    \/\/ Testing invalid cases\n+    for (String name: invalidClassesWithICCE) {\n+      boolean icce = false;\n+      boolean otherException = false;\n+      Throwable exception = null;\n+      try {\n+        System.out.println(\"Trying to load \"+name);\n+        Class c = Class.forName(name);\n+      } catch (IncompatibleClassChangeError e) {\n+        icce = true;\n+      } catch (Throwable t) {\n+        otherException = true;\n+        exception = t;\n+      }\n+      Asserts.assertFalse(otherException, \"Unexpected exception \"+exception);\n+      Asserts.assertTrue(icce, \"IncompatibleClassChangeError not thrown\");\n+    }\n+    for (String name: invalidClassesWithCFE) {\n+      boolean cfe = false;\n+      boolean otherException = false;\n+      Throwable exception = null;\n+      try {\n+        System.out.println(\"Trying to load \"+name);\n+        Class c = Class.forName(name);\n+      } catch (ClassFormatError e) {\n+        cfe = true;\n+      } catch (Throwable t) {\n+        otherException = true;\n+        exception = t;\n+      }\n+      Asserts.assertFalse(otherException, \"Unexpected exception \"+exception);\n+      Asserts.assertTrue(cfe, \"ClassFormatError not thrown\");\n+    }\n+  }\n+ }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/TestClassModifiers.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public abstract value class ValueAbstract { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ValueAbstract.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+value class ValueClassExtendingIdentityClass extends ValueAbstract { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ValueClassExtendingIdentityClass.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+value class ValueClassExtendingIdentityClass implements ValueAbstract { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ValueClassImplementingIdentityInterface","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+value class ValueClassImplementingIdentityInterface implements ValueInterface { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ValueClassImplementingIdentityInterface.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+value interface ValueInterface { }\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ValueInterface.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -55,1 +55,1 @@\n-            \"class ValueSuperNotAbstract has an invalid super class NotAbstract\");\n+            \"Value type ValueSuperNotAbstract has an identity type as supertype\");\n@@ -59,1 +59,1 @@\n-            \"ValueSuperHasNonStaticFields has an invalid super class HasNonStaticFields\");\n+            \"Value type ValueSuperHasNonStaticFields has an identity type as supertype\");\n@@ -63,1 +63,1 @@\n-            \"ValueSuperHasSynchMethod has an invalid super class ValidSuper\");\n+            \"Value type ValueSuperHasSynchMethod has an identity type as supertype\");\n@@ -67,1 +67,1 @@\n-            \"ValueSuperCtorHasArgs has an invalid super class CtorHasArgs\");\n+            \"Value type ValueSuperCtorHasArgs has an identity type as supertype\");\n@@ -71,1 +71,1 @@\n-            \"ValueSuperCtorIsNotEmpty has an invalid super class CtorIsNotEmpty\");\n+            \"Value type ValueSuperCtorIsNotEmpty has an identity type as supertype\");\n@@ -77,1 +77,1 @@\n-            \"class PrimitiveSuperNotAbstract has an invalid super class NotAbstract\");\n+            \"Value type PrimitiveSuperNotAbstract has an identity type as supertype\");\n@@ -81,1 +81,1 @@\n-            \"PrimitiveSuperHasNonStaticFields has an invalid super class HasNonStaticFields\");\n+            \"Value type PrimitiveSuperHasNonStaticFields has an identity type as supertype\");\n@@ -85,1 +85,1 @@\n-            \"PrimitiveSuperHasSynchMethod has an invalid super class ValidSuper\");\n+            \"Value type PrimitiveSuperHasSynchMethod has an identity type as supertype\");\n@@ -89,1 +89,1 @@\n-            \"PrimitiveSuperCtorHasArgs has an invalid super class CtorHasArgs\");\n+            \"Value type PrimitiveSuperCtorHasArgs has an identity type as supertype\");\n@@ -93,1 +93,1 @@\n-            \"PrimitiveSuperCtorIsNotEmpty has an invalid super class CtorIsNotEmpty\");\n+            \"Value type PrimitiveSuperCtorIsNotEmpty has an identity type as supertype\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testSupers\/TestSuperClasses.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-            out.shouldMatch(\"public class \" + APP_DOT_CLASSNAME);\n+            out.shouldMatch(\"public identity class \" + APP_DOT_CLASSNAME);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbDumpclass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 4109635\n-   @summary VM adds ACC_SUPER bit to access flags of a class. This must\n-            be stripped by the Class.getModifiers method, or else this\n-            shows up as though the class is synchronized and that doesn't\n-            make any sense.\n-   @author Anand Palaniswamy\n- *\/\n-public class StripACC_SUPER {\n-    public static void main(String[] args) throws Exception {\n-        int access = StripACC_SUPER.class.getModifiers();\n-        if (java.lang.reflect.Modifier.isSynchronized(access))\n-            throw new Exception(\"ACC_SUPER bit is not being stripped\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/getModifiers\/StripACC_SUPER.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -355,1 +355,1 @@\n-            cw.visit(V14, ACC_FINAL, classname, null, OBJECT_CLS, null);\n+            cw.visit(V14, ACC_FINAL | ACC_IDENTITY, classname, null, OBJECT_CLS, null);\n@@ -509,2 +509,0 @@\n-\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/classData\/ClassDataTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-                    .withFlags(Flag.ACC_PUBLIC)\n+                    .withFlags(Flag.ACC_PUBLIC, Flag.ACC_IDENTITY)\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-  0x0000; \/\/ access [ ]\n+  0x0020; \/\/ access [ ]\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyNestedResolution.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  0x0000; \/\/ access\n+  0x0020; \/\/ access\n@@ -146,1 +146,1 @@\n-              [] { \/\/ \n+              [] { \/\/\n@@ -174,1 +174,1 @@\n-              [] { \/\/ \n+              [] { \/\/\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyNestedTest_Code.jcod","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -249,2 +250,2 @@\n-                new Object[] { \"EmptyHiddenSynthetic\", ACC_SYNTHETIC },\n-                new Object[] { \"EmptyHiddenEnum\", ACC_ENUM },\n+                new Object[] { \"EmptyHiddenSynthetic\", ACC_SYNTHETIC | ACC_IDENTITY },\n+                new Object[] { \"EmptyHiddenEnum\", ACC_ENUM | ACC_IDENTITY },\n@@ -267,1 +268,1 @@\n-        byte[] bytes = (accessFlags == ACC_ENUM) ? classBytes(name, Enum.class, accessFlags)\n+        byte[] bytes = (accessFlags == (ACC_ENUM | ACC_IDENTITY)) ? classBytes(name, Enum.class, accessFlags)\n@@ -271,1 +272,1 @@\n-            case ACC_SYNTHETIC:\n+            case (ACC_SYNTHETIC | ACC_IDENTITY):\n@@ -277,1 +278,1 @@\n-            case ACC_ENUM:\n+            case (ACC_ENUM | ACC_IDENTITY):\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/BasicTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        cw.visit(V12, ACC_FINAL, classname, null, \"java\/lang\/Object\", null);\n+        cw.visit(V12, ACC_FINAL|ACC_IDENTITY, classname, null, \"java\/lang\/Object\", null);\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/HiddenNestmateTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,1 +174,1 @@\n-                 access,\n+                 access | Opcodes.ACC_IDENTITY,\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/IsRecordTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+    ACC_IDENTITY(0x0020),\n","filename":"test\/jdk\/lib\/testlibrary\/bytecode\/jdk\/experimental\/bytecode\/Flag.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+import static jdk.internal.org.objectweb.asm.Opcodes.ACC_IDENTITY;\n@@ -61,1 +62,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.V18;\n+import static jdk.internal.org.objectweb.asm.Opcodes.V19;\n@@ -138,1 +139,1 @@\n-            cw.visit(V18, ACC_FINAL, classname, null, OBJECT_CLS, null);\n+            cw.visit(V19, ACC_FINAL | ACC_IDENTITY, classname, null, OBJECT_CLS, null);\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethodsViaCondy.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}