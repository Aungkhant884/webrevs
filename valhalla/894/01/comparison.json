{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-        bash make\/build.sh --jdk \"$JAVA_HOME_11_X64\"\n+        bash make\/build.sh --jdk \"$JAVA_HOME_17_X64\"\n","filename":".github\/actions\/get-jtreg\/action.yml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-version=21\n+version=22\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-      SRC := $(STATIC_LIBS_IMAGE_DIR)\/lib, \\\n+      SRC := $(STATIC_LIBS_GRAAL_IMAGE_DIR)\/lib, \\\n@@ -49,1 +49,1 @@\n-          $(call FindFiles, $(STATIC_LIBS_IMAGE_DIR)\/lib)), \\\n+          $(call FindFiles, $(STATIC_LIBS_GRAAL_IMAGE_DIR)\/lib)), \\\n","filename":"make\/GraalBuilderImage.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,4 @@\n-            $(if $(CUSTOM_CONFIG_DIR), $(wildcard $(CUSTOM_CONFIG_DIR)\/*))\n+            $(if $(CUSTOM_CONFIG_DIR), $(wildcard $(CUSTOM_CONFIG_DIR)\/*)) \\\n+            $(addprefix $(topdir)\/make\/conf\/, version-numbers.conf branding.conf) \\\n+            $(if $(CUSTOM_CONF_DIR), $(wildcard $(addprefix $(CUSTOM_CONF_DIR)\/, \\\n+                version-numbers.conf branding.conf)))\n","filename":"make\/Init.gmk","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -236,0 +236,1 @@\n+HOTSPOT_VARIANT_STATIC_LIBS_TARGETS := $(addsuffix -static-libs, $(HOTSPOT_VARIANT_TARGETS))\n@@ -254,0 +255,8 @@\n+define DeclareHotspotStaticLibsRecipe\n+  hotspot-$1-static-libs:\n+\t+($(CD) $(TOPDIR)\/make\/hotspot && $(MAKE) $(MAKE_ARGS) -f lib\/CompileLibraries.gmk \\\n+\t    JVM_VARIANT=$1 STATIC_LIBS=true)\n+endef\n+\n+$(foreach v, $(JVM_VARIANTS), $(eval $(call DeclareHotspotStaticLibsRecipe,$v)))\n+\n@@ -301,1 +310,1 @@\n-    $(HOTSPOT_VARIANT_LIBS_TARGETS)\n+    $(HOTSPOT_VARIANT_LIBS_TARGETS) $(HOTSPOT_VARIANT_STATIC_LIBS_TARGETS)\n@@ -465,0 +474,6 @@\n+    TARGET := static-libs-image, \\\n+))\n+\n+$(eval $(call SetupTarget, static-libs-graal-image, \\\n+    MAKEFILE := StaticLibsImage, \\\n+    TARGET := static-libs-graal-image, \\\n@@ -492,1 +507,1 @@\n-    DEPS := jdk-image static-libs-image, \\\n+    DEPS := jdk-image static-libs-graal-image, \\\n@@ -892,0 +907,1 @@\n+      $(eval hotspot-$v-static-libs: hotspot-$v-gensrc java.base-copy) \\\n@@ -1050,1 +1066,3 @@\n-  static-libs-image: $(STATIC_LIBS_TARGETS)\n+  static-libs-image: hotspot-static-libs $(STATIC_LIBS_TARGETS)\n+\n+  static-libs-graal-image: $(STATIC_LIBS_TARGETS)\n@@ -1100,0 +1118,1 @@\n+  $(eval hotspot-static-libs: hotspot-$v-static-libs) \\\n@@ -1262,1 +1281,2 @@\n-ALL_TARGETS += buildtools hotspot hotspot-libs hotspot-gensrc gensrc gendata \\\n+ALL_TARGETS += buildtools hotspot hotspot-libs hotspot-static-libs \\\n+    hotspot-gensrc gensrc gendata \\\n","filename":"make\/Main.gmk","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,7 @@\n+ifneq ($(filter static-libs-image, $(MAKECMDGOALS)), )\n+  IMAGE_DEST_DIR=$(STATIC_LIBS_IMAGE_DIR)\/lib\n+else ifneq ($(filter static-libs-graal-image, $(MAKECMDGOALS)), )\n+  IMAGE_DEST_DIR=$(STATIC_LIBS_GRAAL_IMAGE_DIR)\/lib\n+endif\n+\n+# Copy JDK static libs to the image.\n@@ -45,1 +52,1 @@\n-      DEST := $(STATIC_LIBS_IMAGE_DIR)\/lib, \\\n+      DEST := $(IMAGE_DEST_DIR), \\\n@@ -50,0 +57,1 @@\n+  $(eval STATIC_LIBS_TARGETS += $$(COPY_STATIC_LIBS_$m)) \\\n@@ -52,0 +60,13 @@\n+ifneq ($(filter static-libs-image, $(MAKECMDGOALS)), )\n+  # Copy libjvm static library to the image.\n+  $(foreach v, $(JVM_VARIANTS), \\\n+    $(eval $(call SetupCopyFiles, COPY_STATIC_LIBS_$v, \\\n+        SRC := $(HOTSPOT_OUTPUTDIR)\/variant-$v\/libjvm\/objs\/static, \\\n+        DEST := $(IMAGE_DEST_DIR)\/$v, \\\n+        FILES := $(wildcard $(HOTSPOT_OUTPUTDIR)\/variant-$v\/libjvm\/objs\/static\/*$(STATIC_LIBRARY_SUFFIX)), \\\n+    )) \\\n+    $(eval TARGETS += $$(COPY_STATIC_LIBS_$v)) \\\n+    $(eval HOTSPOT_VARIANT_STATIC_LIBS_TARGETS += $$(COPY_STATIC_LIBS_$v)) \\\n+  )\n+endif\n+\n@@ -54,0 +75,3 @@\n+static-libs-image: $(HOTSPOT_VARIANT_STATIC_LIBS_TARGETS) $(STATIC_LIBS_TARGETS)\n+static-libs-graal-image: $(STATIC_LIBS_TARGETS)\n+\n","filename":"make\/StaticLibsImage.gmk","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+    LDFLAGS_CXX_PARTIAL_LINKING=\"$MACHINE_FLAG -r\"\n+\n@@ -78,0 +80,3 @@\n+\n+    LDFLAGS_CXX_PARTIAL_LINKING=\"$MACHINE_FLAG -r\"\n+\n@@ -164,0 +169,1 @@\n+  AC_SUBST(LDFLAGS_CXX_PARTIAL_LINKING)\n","filename":"make\/autoconf\/flags-ldflags.m4","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -304,0 +304,1 @@\n+  AC_SUBST(MACHINE_FLAG)\n","filename":"make\/autoconf\/flags.m4","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,5 @@\n-      LIBFFI_LIBS=\"-L${with_libffi}\/lib -lffi\"\n+      if test \"x${OPENJDK_TARGET_OS}\" != \"xwindows\"; then\n+        LIBFFI_LIBS=\"-L${with_libffi}\/lib -lffi\"\n+      else\n+        LIBFFI_LIBS=\"${with_libffi}\/lib\/libffi.lib\"\n+      fi\n@@ -70,1 +74,5 @@\n-      LIBFFI_LIBS=\"-L${with_libffi_lib} -lffi\"\n+      if test \"x${OPENJDK_TARGET_OS}\" != \"xwindows\"; then\n+        LIBFFI_LIBS=\"-L${with_libffi_lib} -lffi\"\n+      else\n+        LIBFFI_LIBS=\"${with_libffi_lib}\/libffi.lib\"\n+      fi\n@@ -109,1 +117,0 @@\n-    AC_MSG_CHECKING([if libffi works])\n@@ -115,0 +122,2 @@\n+\n+    AC_MSG_CHECKING([if libffi works])\n@@ -123,3 +132,0 @@\n-    CFLAGS=\"$OLD_CFLAGS\"\n-    LIBS=\"$OLD_LIBS\"\n-    AC_LANG_POP(C)\n@@ -133,0 +139,24 @@\n+    # Check if FFI_GO_CLOSURES is properly defined. On some distributions, notably MacOS AArch64,\n+    # ffitarget.h (included from ffi.h) does not explicitly define FFI_GO_CLOSURES. This makes the\n+    # further include of ffi.h trigger the \"FFI_GO_CLOSURES is undefined\" warning, which fails\n+    # the build when warnings are fatal.\n+    AC_MSG_CHECKING([for FFI_GO_CLOSURES definition])\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([\n+      #include <ffi.h>\n+      #ifndef FFI_GO_CLOSURES\n+      #error \"FFI_GO_CLOSURES is not defined\"\n+      #endif\n+      ][])],\n+      [\n+        AC_MSG_RESULT([yes])\n+      ],\n+      [\n+        AC_MSG_RESULT([no, defining])\n+        LIBFFI_CFLAGS=\"$LIBFFI_CFLAGS -DFFI_GO_CLOSURES=0\"\n+      ]\n+    )\n+\n+    CFLAGS=\"$OLD_CFLAGS\"\n+    LIBS=\"$OLD_LIBS\"\n+    AC_LANG_POP(C)\n+\n@@ -135,0 +165,8 @@\n+      if test \"x${OPENJDK_TARGET_OS}\" = \"xmacosx\"; then\n+        LIBFFI_LIB_FILE_NAME=libffi.?.dylib\n+      elif test \"x${OPENJDK_TARGET_OS}\" = \"xwindows\"; then\n+        LIBFFI_LIB_FILE_NAME=libffi.dll\n+      else\n+        LIBFFI_LIB_FILE_NAME=libffi.so.?\n+      fi\n+\n@@ -137,2 +175,2 @@\n-        if test -e ${LIBFFI_LIB_PATH}\/libffi.so.?; then\n-          LIBFFI_LIB_FILE=\"${LIBFFI_LIB_PATH}\/libffi.so.?\"\n+        if test -e ${LIBFFI_LIB_PATH}\/${LIBFFI_LIB_FILE_NAME}; then\n+          LIBFFI_LIB_FILE=\"${LIBFFI_LIB_PATH}\/${LIBFFI_LIB_FILE_NAME}\"\n@@ -140,1 +178,1 @@\n-          AC_MSG_ERROR([Could not locate libffi.so.? for bundling in ${LIBFFI_LIB_PATH}])\n+          AC_MSG_ERROR([Could not locate ${LIBFFI_LIB_FILE_NAME} for bundling in ${LIBFFI_LIB_PATH}])\n@@ -145,4 +183,4 @@\n-          if test -e ${SYSROOT}\/usr\/lib\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/libffi.so.?\"\n-          elif test -e ${SYSROOT}\/usr\/lib\/i386-linux-gnu\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/i386-linux-gnu\/libffi.so.?\"\n+          if test -e ${SYSROOT}\/usr\/lib\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/${LIBFFI_LIB_FILE_NAME}\"\n+          elif test -e ${SYSROOT}\/usr\/lib\/i386-linux-gnu\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/i386-linux-gnu\/${LIBFFI_LIB_FILE_NAME}\"\n@@ -150,1 +188,1 @@\n-            AC_MSG_ERROR([Could not locate libffi.so.? for bundling])\n+            AC_MSG_ERROR([Could not locate ${LIBFFI_LIB_FILE_NAME} for bundling])\n@@ -153,4 +191,4 @@\n-          if test -e ${SYSROOT}\/usr\/lib64\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib64\/libffi.so.?\"\n-          elif test -e ${SYSROOT}\/usr\/lib\/x86_64-linux-gnu\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/x86_64-linux-gnu\/libffi.so.?\"\n+          if test -e ${SYSROOT}\/usr\/lib64\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib64\/${LIBFFI_LIB_FILE_NAME}\"\n+          elif test -e ${SYSROOT}\/usr\/lib\/x86_64-linux-gnu\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/x86_64-linux-gnu\/${LIBFFI_LIB_FILE_NAME}\"\n@@ -158,1 +196,1 @@\n-            AC_MSG_ERROR([Could not locate libffi.so.? for bundling])\n+            AC_MSG_ERROR([Could not locate ${LIBFFI_LIB_FILE_NAME} for bundling])\n@@ -162,2 +200,2 @@\n-          if test -e ${SYSROOT}\/usr\/lib\/libffi.so.? ; then\n-            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/libffi.so.?\"\n+          if test -e ${SYSROOT}\/usr\/lib\/${LIBFFI_LIB_FILE_NAME} ; then\n+            LIBFFI_LIB_FILE=\"${SYSROOT}\/usr\/lib\/${LIBFFI_LIB_FILE_NAME}\"\n@@ -165,1 +203,1 @@\n-            AC_MSG_ERROR([Could not locate libffi.so.? for bundling])\n+            AC_MSG_ERROR([Could not locate ${LIBFFI_LIB_FILE_NAME} for bundling])\n","filename":"make\/autoconf\/lib-ffi.m4","additions":60,"deletions":22,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -663,1 +663,1 @@\n-AC_DEFUN_ONCE([PLATFORM_CHECK_DEPRECATION],\n+AC_DEFUN([PLATFORM_CHECK_DEPRECATION],\n@@ -667,1 +667,0 @@\n-  AC_REQUIRE([PLATFORM_EXTRACT_TARGET_AND_BUILD])\n","filename":"make\/autoconf\/platform.m4","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -549,0 +549,2 @@\n+MACHINE_FLAG := @MACHINE_FLAG@\n+\n@@ -575,0 +577,3 @@\n+# LDFLAGS specific to partial linking.\n+LDFLAGS_CXX_PARTIAL_LINKING:=@LDFLAGS_CXX_PARTIAL_LINKING@\n+\n@@ -931,0 +936,4 @@\n+# Graal static libs image\n+STATIC_LIBS_GRAAL_IMAGE_SUBDIR := static-libs-graal\n+STATIC_LIBS_GRAAL_IMAGE_DIR := $(IMAGES_OUTPUTDIR)\/$(STATIC_LIBS_GRAAL_IMAGE_SUBDIR)\n+\n","filename":"make\/autoconf\/spec.gmk.in","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -551,0 +551,1 @@\n+#   STATIC_LIB_EXCLUDE_OBJS exclude objects that matches from static library\n@@ -729,0 +730,6 @@\n+  ifeq ($(STATIC_LIBS), true)\n+    # Exclude the object files that match with $1_STATIC_LIB_EXCLUDE_OBJS.\n+    ifneq ($$($1_STATIC_LIB_EXCLUDE_OBJS), )\n+      $1_ALL_OBJS := $$(call not-containing, $$($1_STATIC_LIB_EXCLUDE_OBJS), $$($1_ALL_OBJS))\n+    endif\n+  endif\n@@ -1133,0 +1140,41 @@\n+  $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n+\n+  # If there are many object files, use an @-file...\n+  ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n+    $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n+    ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n+      $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n+    else\n+      # ...except for toolchains which don't support them.\n+      $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n+    endif\n+\n+    # If we are building static library, 'AR' on macosx may not support @-file.\n+    ifeq ($$($1_TYPE), STATIC_LIBRARY)\n+      ifeq ($(call isTargetOs, macosx), true)\n+        $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n+      endif\n+    endif\n+  endif\n+\n+  # Unfortunately the @-file trick does not work reliably when using clang.\n+  # Clang does not propagate the @-file parameter to the ld sub process, but\n+  # instead puts the full content on the command line. At least the llvm ld\n+  # does not even support an @-file.\n+  #\n+  # When linking a large amount of object files, we risk hitting the limit\n+  # of the command line length even on posix systems if the path length of\n+  # the output dir is very long due to our use of absolute paths. To\n+  # mitigate this, use paths relative to the output dir when linking over\n+  # 500 files with clang and the output dir path is deep.\n+  ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n+    ifeq ($$(TOOLCHAIN_TYPE), clang)\n+      # There is no strlen function in make, but checking path depth is a\n+      # reasonable approximation.\n+      ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n+        $1_LINK_OBJS_RELATIVE := true\n+        $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n+      endif\n+    endif\n+  endif\n+\n@@ -1134,0 +1182,7 @@\n+    # Include partial linking when building the static library with clang on linux.\n+    ifeq ($(call isTargetOs, linux), true)\n+      ifneq ($(findstring $(TOOLCHAIN_TYPE), clang), )\n+        $1_ENABLE_PARTIAL_LINKING := true\n+      endif\n+    endif\n+\n@@ -1136,0 +1191,3 @@\n+    ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+      $1_VARDEPS += $$($1_LD) $$($1_SYSROOT_LDFLAGS)\n+    endif\n@@ -1148,0 +1206,8 @@\n+    $1_AR_OBJ_ARG := $$($1_LD_OBJ_ARG)\n+    # With clang on linux, partial linking is enabled and 'AR' takes the output\n+    # object from the partial linking step.\n+    ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+      $1_TARGET_RELOCATABLE := $$($1_OBJECT_DIR)\/$$($1_PREFIX)$$($1_NAME)_relocatable$(OBJ_SUFFIX)\n+      $1_AR_OBJ_ARG := $$($1_TARGET_RELOCATABLE)\n+    endif\n+\n@@ -1149,0 +1215,7 @@\n+        ifneq ($$($1_OBJ_FILE_LIST), )\n+          ifeq ($$($1_LINK_OBJS_RELATIVE), true)\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS_RELATIVE, $$($1_OBJ_FILE_LIST)))\n+          else\n+\t    $$(eval $$(call ListPathsSafely, $1_ALL_OBJS, $$($1_OBJ_FILE_LIST)))\n+          endif\n+        endif\n@@ -1151,0 +1224,8 @@\n+        # Do partial linking.\n+        ifeq ($$($1_ENABLE_PARTIAL_LINKING), true)\n+\t  $$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_partial_link, \\\n+\t    $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t      $$($1_LD) $(LDFLAGS_CXX_PARTIAL_LINKING) $$($1_SYSROOT_LDFLAGS) \\\n+\t        $(LD_OUT_OPTION)$$($1_TARGET_RELOCATABLE) \\\n+                $$($1_LD_OBJ_ARG))\n+        endif\n@@ -1152,1 +1233,2 @@\n-\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_ALL_OBJS) \\\n+\t  $(if $$($1_LINK_OBJS_RELATIVE), $$(CD) $$(OUTPUTDIR) ; ) \\\n+\t    $$($1_AR) $$(ARFLAGS) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_AR_OBJ_ARG) \\\n@@ -1204,34 +1286,0 @@\n-    $1_LD_OBJ_ARG := $$($1_ALL_OBJS)\n-\n-    # If there are many object files, use an @-file...\n-    ifneq ($$(word 17, $$($1_ALL_OBJS)), )\n-      $1_OBJ_FILE_LIST := $$($1_OBJECT_DIR)\/_$1_objectfilenames.txt\n-      ifneq ($(COMPILER_COMMAND_FILE_FLAG), )\n-        $1_LD_OBJ_ARG := $(COMPILER_COMMAND_FILE_FLAG)$$($1_OBJ_FILE_LIST)\n-      else\n-        # ...except for toolchains which don't support them.\n-        $1_LD_OBJ_ARG := `cat $$($1_OBJ_FILE_LIST)`\n-      endif\n-    endif\n-\n-    # Unfortunately the @-file trick does not work reliably when using clang.\n-    # Clang does not propagate the @-file parameter to the ld sub process, but\n-    # instead puts the full content on the command line. At least the llvm ld\n-    # does not even support an @-file.\n-    #\n-    # When linking a large amount of object files, we risk hitting the limit\n-    # of the command line length even on posix systems if the path length of\n-    # the output dir is very long due to our use of absolute paths. To\n-    # mitigate this, use paths relative to the output dir when linking over\n-    # 500 files with clang and the output dir path is deep.\n-    ifneq ($$(word 500, $$($1_ALL_OBJS)), )\n-      ifeq ($$(TOOLCHAIN_TYPE), clang)\n-        # There is no strlen function in make, but checking path depth is a\n-        # reasonable approximation.\n-        ifneq ($$(word 10, $$(subst \/, ,$$(OUTPUTDIR))), )\n-          $1_LINK_OBJS_RELATIVE := true\n-          $1_ALL_OBJS_RELATIVE := $$(patsubst $$(OUTPUTDIR)\/%, %, $$($1_ALL_OBJS))\n-        endif\n-      endif\n-    endif\n-\n","filename":"make\/common\/NativeCompilation.gmk","additions":84,"deletions":36,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -466,1 +466,2 @@\n-            configure_args: concat(common.configure_args_32bit),\n+            configure_args: concat(common.configure_args_32bit,\n+                \"--enable-deprecated-ports\"),\n@@ -1523,1 +1524,1 @@\n-                 && java.lang.System.getProperty(\"os.version\").contains(\"Microsoft\")));\n+                 && java.lang.System.getProperty(\"os.version\").toLowerCase().contains(\"microsoft\")));\n","filename":"make\/conf\/jib-profiles.js","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-DEFAULT_VERSION_FEATURE=21\n+DEFAULT_VERSION_FEATURE=22\n@@ -36,2 +36,2 @@\n-DEFAULT_VERSION_DATE=2023-09-19\n-DEFAULT_VERSION_CLASSFILE_MAJOR=65  # \"`$EXPR $DEFAULT_VERSION_FEATURE + 44`\"\n+DEFAULT_VERSION_DATE=2024-03-19\n+DEFAULT_VERSION_CLASSFILE_MAJOR=66  # \"`$EXPR $DEFAULT_VERSION_FEATURE + 44`\"\n@@ -40,2 +40,2 @@\n-DEFAULT_ACCEPTABLE_BOOT_VERSIONS=\"20 21\"\n-DEFAULT_JDK_SOURCE_TARGET_VERSION=21\n+DEFAULT_ACCEPTABLE_BOOT_VERSIONS=\"20 21 22\"\n+DEFAULT_JDK_SOURCE_TARGET_VERSION=22\n","filename":"make\/conf\/version-numbers.conf","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,0 +41,32 @@\n+# Note that while the build system supports linking against libffi on Windows (x64),\n+# I couldn't get this script working with a Windows devkit, and instead had to manually create\n+# a libffi bundle for Windows. The steps I took were as follows:\n+#\n+# 1. run 'x64 Native Tools Command Prompt for VS 2022'. After that, cl.exe and link.exe should be on path\n+#\n+# 2. in the same shell, run `ucrt64` (this is one of the shell environments that comes with MSYS2).\n+#    This should carry over the environment set up by the VS dev prompt into the ucrt64 prompt.\n+#\n+# 3. then, in the libffi repo root folder:\n+#   3.a run `autogen.sh`\n+#   3.b run:\n+# ```\n+# bash configure \\\n+#   CC=\"\/path\/to\/libffi\/msvcc.sh -m64\" \\\n+#   CXX=\"\/path\/to\/libffi\/msvcc.sh -m64\" \\\n+#   CPPFLAGS=\"-DFFI_BUILDING_DLL\" \\\n+#   --disable-docs \\\n+#   --prefix=<install dest>\n+# ```\n+# (`<install dest>` can be whatever you like. That's what you point `--with-libffi` to).\n+#\n+# 4. run `make install`. This should create the `<install dest>` directory with the files:\n+#    `include\/ffi.h`, `include\/ffitarget.h`, `lib\/libffi.dll`. It also creates a `lib\/libffi.lib` file,\n+#    but it is of the wrong file type, `DLL` rather than `LIBRARY`.\n+#\n+# 5. Manually create a working `.lib` file (in the <install dest>\/lib dir):\n+#   5.a use `dumpbin \/exports libffi.dll` to get a list of exported symbols\n+#   5.b put them in a `libffi.def` file: `EXPORTS` on the first line, then a symbol on each line following\n+#   5.c run `lib \/def:libffi.def \/machine:x64 \/out:libffi.lib` to create the right `.lib` file (`lib` is a visual studio tool)\n+#\n+\n@@ -52,0 +84,1 @@\n+OS_NAME=$(uname -s)\n@@ -84,0 +117,21 @@\n+\n+case $OS_NAME in\n+  Linux)\n+    CC=$DEVKIT_DIR\/bin\/gcc\n+    CXX=$DEVKIT_DIR\/bin\/g++\n+    # For Linux\/x86 it's under \/lib\/ instead of \/lib64\/\n+    LIB_FOLDER=lib64\n+    LIB_NAME=libffi.so*\n+    ;;\n+  Darwin)\n+    CC=$DEVKIT_DIR\/Xcode\/Contents\/Developer\/usr\/bin\/gcc\n+    CXX=$DEVKIT_DIR\/Xcode\/Contents\/Developer\/usr\/bin\/gcc\n+    LIB_FOLDER=lib\n+    LIB_NAME=libffi.*.dylib\n+    ;;\n+  *)\n+    echo \" Unsupported OS: $OS_NAME\"\n+    exit 1\n+    ;;\n+esac\n+\n@@ -85,1 +139,5 @@\n-bash .\/configure --prefix=$INSTALL_DIR CC=$DEVKIT_DIR\/bin\/gcc CXX=$DEVKIT_DIR\/bin\/g++\n+bash .\/configure \\\n+  --disable-docs \\\n+  --prefix=$INSTALL_DIR \\\n+  CC=$CC \\\n+  CXX=$CXX\n@@ -93,1 +151,1 @@\n-  echo \"Copying libffi.so* to image\"\n+  echo \"Copying ${LIB_NAME} to image\"\n@@ -95,2 +153,1 @@\n-  # For Linux\/x86 it's under \/lib\/ instead of \/lib64\/\n-  cp -a $INSTALL_DIR\/lib64\/libffi.so* $IMAGE_DIR\/lib\/\n+  cp -a $INSTALL_DIR\/${LIB_FOLDER}\/${LIB_NAME} $IMAGE_DIR\/lib\/\n","filename":"make\/devkit\/createLibffiBundle.sh","additions":61,"deletions":4,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -142,0 +142,7 @@\n+# The global operator new functions defined in operator_new.cpp are intended\n+# to detect and prevent the VM code from calling them. See more details in\n+# operator_new.cpp. Exclude operator_new.o when statically linking the VM\n+# code with JDK natives, as the JDK natives might need to call the global\n+# operator new.\n+LIBJVM_STATIC_EXCLUDE_OBJS := operator_new.o\n+\n@@ -193,0 +200,1 @@\n+    STATIC_LIB_EXCLUDE_OBJS := $(LIBJVM_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3704,2 +3704,2 @@\n-                            return new MethodParam(Integer.parseInt(p.substring(0, sep)),\n-                                                    p.substring(sep + 1));\n+                            return new MethodParam(Integer.parseInt(p.substring(0, sep), 16),\n+                                                   p.substring(sep + 1));\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,0 +231,1 @@\n+      LIBS_windows := $(LIBFFI_LIBS) ws2_32.lib, \\\n","filename":"make\/modules\/java.base\/Lib.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -156,0 +156,3 @@\n+  # Extra files from the zlib.\n+  LIBJLI_EXTRA_FILE_LIST := inflate.c inftrees.c inffast.c zadler32.c zcrc32.c zutil.c\n+\n@@ -158,7 +161,8 @@\n-          inflate.c \\\n-          inftrees.c \\\n-          inffast.c \\\n-          zadler32.c \\\n-          zcrc32.c \\\n-          zutil.c \\\n-      )\n+          $(LIBJLI_EXTRA_FILE_LIST))\n+\n+  # Do not include these libz objects in the static libjli library.\n+  # When statically linking the java launcher with all JDK and VM\n+  # static libraries, we use the --whole-archive linker option.\n+  # The duplicate objects in different static libraries cause linking\n+  # errors due to duplicate symbols.\n+  LIBJLI_STATIC_EXCLUDE_OBJS := $(subst .c,$(OBJ_SUFFIX),$(LIBJLI_EXTRA_FILE_LIST))\n@@ -183,0 +187,1 @@\n+    STATIC_LIB_EXCLUDE_OBJS := $(LIBJLI_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -224,0 +224,8 @@\n+    # These are the object files provided by the awt native\n+    # library. Do not include these external (non-awt_xawt library)\n+    # objects in the static library. When statically linking the java\n+    # launcher with all JDK and VM static libraries, we use the\n+    # --whole-archive linker option. The duplicate objects in different\n+    # static libraries cause linking errors due to duplicate symbols.\n+    LIBAWT_XAWT_STATIC_EXCLUDE_OBJS := systemScale.o\n+\n@@ -258,0 +266,1 @@\n+        STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_XAWT_STATIC_EXCLUDE_OBJS), \\\n@@ -381,0 +390,8 @@\n+  # These are the object files provided by the awt native\n+  # library. Do not include these external (non-awt_headless library)\n+  # objects in the static library. When statically linking the java\n+  # launcher with all JDK and VM static libraries, we use the\n+  # --whole-archive linker option. The duplicate objects in different\n+  # static libraries cause linking errors due to duplicate symbols.\n+  LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS := systemScale.o\n+\n@@ -396,0 +413,1 @@\n+      STATIC_LIB_EXCLUDE_OBJS := $(LIBAWT_HEADLESS_STATIC_EXCLUDE_OBJS), \\\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -97,5 +97,0 @@\n-NSK_GC_LOCK_JVMTI_INCLUDES := \\\n-    -I$(VM_TESTBASE_DIR)\/nsk\/share\/gc\/lock\/jvmti \\\n-    -I$(VM_TESTBASE_DIR)\/nsk\/share\/native \\\n-    -I$(VM_TESTBASE_DIR)\/nsk\/share\/jni\n-\n@@ -175,2 +170,0 @@\n-BUILD_HOTSPOT_JTREG_LIBRARIES_CFLAGS_libJVMTIAllocLocker := $(NSK_GC_LOCK_JVMTI_INCLUDES)\n-\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        table.put(\"TextPane.font\", textBorder);\n+        table.put(\"TextPane.font\", controlFont);\n","filename":"src\/demo\/share\/jfc\/Metalworks\/BigContrastMetalTheme.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateTable_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3558,0 +3558,8 @@\n+void Assembler::vmovsd(XMMRegister dst, XMMRegister src, XMMRegister src2) {\n+  assert(UseAVX > 0, \"Requires some form of AVX\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(AVX_128bit, \/* rex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(src2->encoding(), src->encoding(), dst->encoding(), VEX_SIMD_F2, VEX_OPCODE_0F, &attributes);\n+  emit_int16(0x11, (0xC0 | encode));\n+}\n+\n@@ -6534,0 +6542,23 @@\n+void Assembler::evfnmadd213sd(XMMRegister dst, XMMRegister src1, XMMRegister src2, EvexRoundPrefix rmode) { \/\/ Need to add rmode for rounding mode support\n+  assert(VM_Version::supports_evex(), \"\");\n+  InstructionAttr attributes(rmode, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_extended_context();\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xAD, (0xC0 | encode));\n+}\n+\n+void Assembler::vfnmadd213sd(XMMRegister dst, XMMRegister src1, XMMRegister src2) {\n+  assert(VM_Version::supports_fma(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xAD, (0xC0 | encode));\n+}\n+\n+void Assembler::vfnmadd231sd(XMMRegister dst, XMMRegister src1, XMMRegister src2) {\n+  assert(VM_Version::supports_fma(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xBD, (0xC0 | encode));\n+}\n+\n@@ -6895,0 +6926,16 @@\n+void Assembler::vroundsd(XMMRegister dst, XMMRegister src, XMMRegister src2, int32_t rmode) {\n+  assert(VM_Version::supports_avx(), \"\");\n+  assert(rmode <= 0x0f, \"rmode 0x%x\", rmode);\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x0B, (0xC0 | encode), (rmode));\n+}\n+\n+void Assembler::vrndscalesd(XMMRegister dst,  XMMRegister src1, XMMRegister src2, int32_t rmode) {\n+  assert(VM_Version::supports_evex(), \"requires EVEX support\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int24(0x0B, (0xC0 | encode), (rmode));\n+}\n+\n@@ -8860,0 +8907,13 @@\n+void Assembler::extractps(Register dst, XMMRegister src, uint8_t imm8) {\n+  assert(VM_Version::supports_sse4_1(), \"\");\n+  assert(imm8 <= 0x03, \"imm8: %u\", imm8);\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = simd_prefix_and_encode(src, xnoreg, as_XMMRegister(dst->encoding()), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  \/\/ imm8:\n+  \/\/ 0x00 - extract from bits 31:0\n+  \/\/ 0x01 - extract from bits 63:32\n+  \/\/ 0x02 - extract from bits 95:64\n+  \/\/ 0x03 - extract from bits 127:96\n+  emit_int24(0x17, (0xC0 | encode), imm8 & 0x03);\n+}\n+\n@@ -9534,0 +9594,9 @@\n+void Assembler::evdivsd(XMMRegister dst, XMMRegister nds, XMMRegister src, EvexRoundPrefix rmode) {\n+  assert(VM_Version::supports_evex(), \"\");\n+  InstructionAttr attributes(rmode, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_extended_context();\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), nds->encoding(), src->encoding(), VEX_SIMD_F2, VEX_OPCODE_0F, &attributes);\n+  emit_int16(0x5E, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":69,"deletions":0,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -531,0 +531,7 @@\n+  enum EvexRoundPrefix {\n+    EVEX_RNE = 0x0,\n+    EVEX_RD  = 0x1,\n+    EVEX_RU  = 0x2,\n+    EVEX_RZ  = 0x3\n+  };\n+\n@@ -889,0 +896,2 @@\n+  void vmovsd(XMMRegister dst, XMMRegister src, XMMRegister src2);\n+\n@@ -2245,0 +2254,1 @@\n+  void evdivsd(XMMRegister dst, XMMRegister nds, XMMRegister src, EvexRoundPrefix rmode);\n@@ -2248,0 +2258,3 @@\n+  void vfnmadd213sd(XMMRegister dst, XMMRegister nds, XMMRegister src);\n+  void evfnmadd213sd(XMMRegister dst, XMMRegister nds, XMMRegister src, EvexRoundPrefix rmode);\n+  void vfnmadd231sd(XMMRegister dst, XMMRegister src1, XMMRegister src2);\n@@ -2337,0 +2350,1 @@\n+  void vrndscalesd(XMMRegister dst,  XMMRegister src1,  XMMRegister src2, int32_t rmode);\n@@ -2339,0 +2353,2 @@\n+  void vroundsd(XMMRegister dst, XMMRegister src, XMMRegister src2, int32_t rmode);\n+  void vroundsd(XMMRegister dst, XMMRegister src, Address src2, int32_t rmode);\n@@ -2722,0 +2738,2 @@\n+  void extractps(Register dst, XMMRegister src, uint8_t imm8);\n+\n@@ -2955,0 +2973,2 @@\n+  void set_extended_context(void) { _is_extended_context = true; }\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -996,1 +996,1 @@\n-      __ call_runtime_leaf(StubRoutines::dpow(), getThreadTemp(), result_reg, cc->args());\n+        __ call_runtime_leaf(StubRoutines::dpow(), getThreadTemp(), result_reg, cc->args());\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -90,0 +90,2 @@\n+  const bool is_LP64 = LP64_ONLY(true) NOT_LP64(false);\n+  if (!is_LP64 || UseAVX < 1 || !UseFMA) {\n@@ -100,0 +102,8 @@\n+  } else {\n+    assert(StubRoutines::fmod() != nullptr, \"\");\n+    jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n+    jdouble dx = (jdouble) x;\n+    jdouble dy = (jdouble) y;\n+\n+    retval = (jfloat) (*addr)(dx, dy);\n+  }\n@@ -105,0 +115,2 @@\n+  const bool is_LP64 = LP64_ONLY(true) NOT_LP64(false);\n+  if (!is_LP64 || UseAVX < 1 || !UseFMA) {\n@@ -115,0 +127,6 @@\n+  } else {\n+    assert(StubRoutines::fmod() != nullptr, \"\");\n+    jdouble (*addr)(jdouble, jdouble) = (double (*)(double, double))StubRoutines::fmod();\n+\n+    retval = (*addr)(x, y);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3968,0 +3968,4 @@\n+\n+  if ((UseAVX >= 1) && (VM_Version::supports_avx512vlbwdq() || VM_Version::supports_fma())) {\n+    StubRoutines::_fmod = generate_libmFmod(); \/\/ from stubGenerator_x86_64_fmod.cpp\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -489,0 +489,1 @@\n+  address generate_libmFmod();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,524 @@\n+\/*\n+ * Copyright (c) 2023, Intel Corporation. All rights reserved.\n+ * Intel Math Library (LIBM) Source Code\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - FMOD()\n+\/\/                     ---------------------\n+\/\/\n+\/\/ If either value1 or value2 is NaN, the result is NaN.\n+\/\/\n+\/\/ If neither value1 nor value2 is NaN, the sign of the result equals the sign of the dividend.\n+\/\/\n+\/\/ If the dividend is an infinity or the divisor is a zero or both, the result is NaN.\n+\/\/\n+\/\/ If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n+\/\/\n+\/\/ If the dividend is a zero and the divisor is finite, the result equals the dividend.\n+\/\/\n+\/\/ In the remaining cases, where neither operand is an infinity, a zero, or NaN, the floating-point\n+\/\/ remainder result from a dividend value1 and a divisor value2 is defined by the mathematical\n+\/\/ relation result = value1 - (value2 * q), where q is an integer that is negative only if\n+\/\/ value1 \/ value2 is negative, and positive only if value1 \/ value2 is positive, and whose magnitude\n+\/\/ is as large as possible without exceeding the magnitude of the true mathematical quotient of value1 and value2.\n+\/\/\n+\/******************************************************************************\/\n+\n+#define __ _masm->\n+\n+ATTRIBUTE_ALIGNED(32) static const uint64_t CONST_NaN[] = {\n+    0x7FFFFFFFFFFFFFFFULL, 0x7FFFFFFFFFFFFFFFULL   \/\/ NaN vector\n+};\n+ATTRIBUTE_ALIGNED(32) static const uint64_t CONST_1p260[] = {\n+    0x5030000000000000ULL,    \/\/ 0x1p+260\n+};\n+\n+ATTRIBUTE_ALIGNED(32) static const uint64_t CONST_MAX[] = {\n+    0x7FEFFFFFFFFFFFFFULL,    \/\/ Max\n+};\n+\n+ATTRIBUTE_ALIGNED(32) static const uint64_t CONST_INF[] = {\n+    0x7FF0000000000000ULL,    \/\/ Inf\n+};\n+\n+ATTRIBUTE_ALIGNED(32) static const uint64_t CONST_e307[] = {\n+    0x7FE0000000000000ULL\n+};\n+\n+address StubGenerator::generate_libmFmod() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"libmFmod\");\n+  address start = __ pc();\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  if (VM_Version::supports_avx512vlbwdq()) {     \/\/ AVX512 version\n+\n+    \/\/ Source used to generate the AVX512 fmod assembly below:\n+    \/\/\n+    \/\/ #include <ia32intrin.h>\n+    \/\/ #include <emmintrin.h>\n+    \/\/ #pragma float_control(precise, on)\n+    \/\/\n+    \/\/ #define UINT32 unsigned int\n+    \/\/ #define SINT32 int\n+    \/\/ #define UINT64 unsigned __int64\n+    \/\/ #define SINT64 __int64\n+    \/\/\n+    \/\/ #define DP_FMA(a, b, c)    __fence(_mm_cvtsd_f64(_mm_fmadd_sd(_mm_set_sd(a), _mm_set_sd(b), _mm_set_sd(c))))\n+    \/\/ #define DP_FMA_RN(a, b, c)    _mm_cvtsd_f64(_mm_fmadd_round_sd(_mm_set_sd(a), _mm_set_sd(b), _mm_set_sd(c), (_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)))\n+    \/\/ #define DP_FMA_RZ(a, b, c) __fence(_mm_cvtsd_f64(_mm_fmadd_round_sd(_mm_set_sd(a), _mm_set_sd(b), _mm_set_sd(c), (_MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC))))\n+    \/\/\n+    \/\/ #define DP_ROUND_RZ(a)   _mm_cvtsd_f64(_mm_roundscale_sd(_mm_setzero_pd(), _mm_set_sd(a), (_MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)))\n+    \/\/\n+    \/\/ #define DP_CONST(C)    _castu64_f64(0x##C##ull)\n+    \/\/ #define DP_AND(X, Y)   _mm_cvtsd_f64(_mm_and_pd(_mm_set_sd(X), _mm_set_sd(Y)))\n+    \/\/ #define DP_XOR(X, Y)   _mm_cvtsd_f64(_mm_xor_pd(_mm_set_sd(X), _mm_set_sd(Y)))\n+    \/\/ #define DP_OR(X, Y)    _mm_cvtsd_f64(_mm_or_pd(_mm_set_sd(X), _mm_set_sd(Y)))\n+    \/\/ #define DP_DIV_RZ(a, b) __fence(_mm_cvtsd_f64(_mm_div_round_sd(_mm_set_sd(a), _mm_set_sd(b), (_MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC))))\n+    \/\/ #define DP_FNMA(a, b, c)    __fence(_mm_cvtsd_f64(_mm_fnmadd_sd(_mm_set_sd(a), _mm_set_sd(b), _mm_set_sd(c))))\n+    \/\/ #define DP_FNMA_RZ(a, b, c) __fence(_mm_cvtsd_f64(_mm_fnmadd_round_sd(_mm_set_sd(a), _mm_set_sd(b), _mm_set_sd(c), (_MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC))))\n+    \/\/\n+    \/\/ #define D2L(x)  _mm_castpd_si128(x)\n+    \/\/ \/\/ transfer highest 32 bits (of low 64b) to GPR\n+    \/\/ #define TRANSFER_HIGH_INT32(X)   _mm_extract_epi32(D2L(_mm_set_sd(X)), 1)\n+    \/\/\n+    \/\/ double fmod(double x, double y)\n+    \/\/ {\n+    \/\/ double a, b, sgn_a, q, bs, bs2;\n+    \/\/ unsigned eq;\n+\n+    Label L_5280, L_52a0, L_5256, L_5300, L_5320, L_52c0, L_52d0, L_5360, L_5380, L_53b0, L_5390;\n+    Label L_53c0, L_52a6, L_53d0, L_exit;\n+\n+    __ movdqa(xmm2, xmm0);\n+    \/\/     \/\/ |x|, |y|\n+    \/\/     a = DP_AND(x, DP_CONST(7fffffffffffffff));\n+    __ movq(xmm0, xmm0);\n+    __ mov64(rax, 0x7FFFFFFFFFFFFFFFULL);\n+    __ evpbroadcastq(xmm3, rax, Assembler::AVX_128bit);\n+    __ vpand(xmm6, xmm0, xmm3, Assembler::AVX_128bit);\n+    \/\/     b = DP_AND(y, DP_CONST(7fffffffffffffff));\n+    __ vpand(xmm4, xmm1, xmm3, Assembler::AVX_128bit);\n+    \/\/     \/\/ sign(x)\n+    \/\/     sgn_a = DP_XOR(x, a);\n+    __ vpxor(xmm3, xmm6, xmm0, Assembler::AVX_128bit);\n+    \/\/     q = DP_DIV_RZ(a, b);\n+    __ movq(xmm5, xmm4);\n+    __ evdivsd(xmm0, xmm6, xmm5, Assembler::EVEX_RZ);\n+    \/\/     q = DP_ROUND_RZ(q);\n+    __ movq(xmm0, xmm0);\n+    \/\/     a = DP_AND(x, DP_CONST(7fffffffffffffff));\n+    __ vxorpd(xmm7, xmm7, xmm7, Assembler::AVX_128bit);\n+    \/\/     q = DP_ROUND_RZ(q);\n+    __ vroundsd(xmm0, xmm7, xmm0, 0xb);\n+    \/\/     eq = TRANSFER_HIGH_INT32(q);\n+    __ extractps(rax, xmm0, 1);\n+    \/\/     if (!eq)  return x + sgn_a;\n+    __ testl(rax, rax);\n+    __ jcc(Assembler::equal, L_5280);\n+    \/\/     if (eq >= 0x7fefffffu) goto SPECIAL_FMOD;\n+    __ cmpl(rax, 0x7feffffe);\n+    __ jcc(Assembler::belowEqual, L_52a0);\n+    __ vpxor(xmm2, xmm2, xmm2, Assembler::AVX_128bit);\n+    \/\/ SPECIAL_FMOD:\n+    \/\/\n+    \/\/     \/\/ y==0 or x==Inf?\n+    \/\/     if ((b == 0.0) || (!(a <= DP_CONST(7fefffffffffffff))))\n+    __ ucomisd(xmm4, xmm2);\n+    __ jcc(Assembler::notEqual, L_5256);\n+    __ jcc(Assembler::noParity, L_5300);\n+    __ bind(L_5256);\n+    __ movsd(xmm2, ExternalAddress((address)CONST_MAX), rax);\n+    __ ucomisd(xmm2, xmm6);\n+    __ jcc(Assembler::below, L_5300);\n+    __ movsd(xmm0, ExternalAddress((address)CONST_INF), rax);\n+    \/\/         return DP_FNMA(b, q, a);    \/\/ NaN\n+    \/\/     \/\/ y is NaN?\n+    \/\/     if (!(b <= DP_CONST(7ff0000000000000))) return y + y;\n+    __ ucomisd(xmm0, xmm4);\n+    __ jcc(Assembler::aboveEqual, L_5320);\n+    __ vaddsd(xmm0, xmm1, xmm1);\n+    __ jmp(L_exit);\n+    \/\/     if (!eq)  return x + sgn_a;\n+    __ align32();\n+    __ bind(L_5280);\n+    __ vaddsd(xmm0, xmm3, xmm2);\n+    __ jmp(L_exit);\n+    \/\/     a = DP_FNMA_RZ(b, q, a);\n+    __ align(8);\n+    __ bind(L_52a0);\n+    __ evfnmadd213sd(xmm0, xmm4, xmm6, Assembler::EVEX_RZ);\n+    \/\/     while (b <= a)\n+    __ bind(L_52a6);\n+    __ ucomisd(xmm0, xmm4);\n+    __ jcc(Assembler::aboveEqual, L_52c0);\n+    \/\/     a = DP_XOR(a, sgn_a);\n+    __ vpxor(xmm0, xmm3, xmm0, Assembler::AVX_128bit);\n+    __ jmp(L_exit);\n+    __ bind(L_52c0);\n+    __ movq(xmm6, xmm0);\n+    \/\/         q = DP_ROUND_RZ(q);\n+    __ vpxor(xmm1, xmm1, xmm1, Assembler::AVX_128bit);\n+    __ align32();\n+    __ bind(L_52d0);\n+    \/\/         q = DP_DIV_RZ(a, b);\n+    __ evdivsd(xmm2, xmm6, xmm5, Assembler::EVEX_RZ);\n+    \/\/         q = DP_ROUND_RZ(q);\n+    __ movq(xmm2, xmm2);\n+    __ vroundsd(xmm2, xmm1, xmm2, 0xb);\n+    \/\/     a = DP_FNMA_RZ(b, q, a);\n+    __ evfnmadd213sd(xmm2, xmm4, xmm0, Assembler::EVEX_RZ);\n+    \/\/     while (b <= a)\n+    __ ucomisd(xmm2, xmm4);\n+    __ movq(xmm6, xmm2);\n+    __ movapd(xmm0, xmm2);\n+    __ jcc(Assembler::aboveEqual, L_52d0);\n+    \/\/     a = DP_XOR(a, sgn_a);\n+    __ vpxor(xmm0, xmm3, xmm2, Assembler::AVX_128bit);\n+    __ jmp(L_exit);\n+    \/\/         return DP_FNMA(b, q, a);    \/\/ NaN\n+    __ bind(L_5300);\n+    __ vfnmadd213sd(xmm0, xmm4, xmm6);\n+    __ jmp(L_exit);\n+    \/\/     bs = b * DP_CONST(7fe0000000000000);\n+    __ bind(L_5320);\n+    __ vmulsd(xmm1, xmm4, ExternalAddress((address)CONST_e307), rax);\n+    \/\/     q = DP_DIV_RZ(a, bs);\n+    __ movq(xmm2, xmm1);\n+    __ evdivsd(xmm0, xmm6, xmm2, Assembler::EVEX_RZ);\n+    \/\/     q = DP_ROUND_RZ(q);\n+    __ movq(xmm0, xmm0);\n+    __ vroundsd(xmm7, xmm7, xmm0, 0xb);\n+    \/\/     eq = TRANSFER_HIGH_INT32(q);\n+    __ extractps(rax, xmm7, 1);\n+    \/\/     if (eq >= 0x7fefffffu)\n+    __ cmpl(rax, 0x7fefffff);\n+    __ jcc(Assembler::below, L_5360);\n+    \/\/         \/\/ b* 2*1023 * 2^1023\n+    \/\/         bs2 = bs * DP_CONST(7fe0000000000000);\n+    __ vmulsd(xmm0, xmm1, ExternalAddress((address)CONST_e307), rax);\n+    \/\/         while (bs2 <= a)\n+    __ ucomisd(xmm6, xmm0);\n+    __ jcc(Assembler::aboveEqual, L_5380);\n+    __ movapd(xmm7, xmm6);\n+    __ jmp(L_53b0);\n+    \/\/         a = DP_FNMA_RZ(b, q, a);\n+    __ bind(L_5360);\n+    __ evfnmadd213sd(xmm7, xmm1, xmm6, Assembler::EVEX_RZ);\n+    __ jmp(L_53b0);\n+    \/\/             q = DP_ROUND_RZ(q);\n+    __ bind(L_5380);\n+    __ vxorpd(xmm8, xmm8, xmm8, Assembler::AVX_128bit);\n+    \/\/             q = DP_DIV_RZ(qa, bs2);\n+    __ align32();\n+    __ bind(L_5390);\n+    __ evdivsd(xmm7, xmm6, xmm0, Assembler::EVEX_RZ);\n+    \/\/             q = DP_ROUND_RZ(q);\n+    __ movq(xmm7, xmm7);\n+    __ vroundsd(xmm7, xmm8, xmm7, 0xb);\n+    \/\/             a = DP_FNMA_RZ(bs2, q, a);\n+    __ evfnmadd213sd(xmm7, xmm0, xmm6, Assembler::EVEX_RZ);\n+    \/\/         while (bs2 <= a)\n+    __ ucomisd(xmm7, xmm0);\n+    __ movapd(xmm6, xmm7);\n+    __ jcc(Assembler::aboveEqual, L_5390);\n+    \/\/     while (bs <= a)\n+    __ bind(L_53b0);\n+    __ ucomisd(xmm7, xmm1);\n+    __ jcc(Assembler::aboveEqual, L_53c0);\n+    __ movapd(xmm0, xmm7);\n+    __ jmp(L_52a6);\n+    \/\/         q = DP_ROUND_RZ(q);\n+    __ bind(L_53c0);\n+    __ vxorpd(xmm6, xmm6, xmm6, Assembler::AVX_128bit);\n+    \/\/         q = DP_DIV_RZ(a, bs);\n+    __ align32();\n+    __ bind(L_53d0);\n+    __ evdivsd(xmm0, xmm7, xmm2, Assembler::EVEX_RZ);\n+    \/\/         q = DP_ROUND_RZ(q);\n+    __ movq(xmm0, xmm0);\n+    __ vroundsd(xmm0, xmm6, xmm0, 0xb);\n+    \/\/         a = DP_FNMA_RZ(bs, q, a);\n+    __ evfnmadd213sd(xmm0, xmm1, xmm7, Assembler::EVEX_RZ);\n+    \/\/     while (bs <= a)\n+    __ ucomisd(xmm0, xmm1);\n+    __ movapd(xmm7, xmm0);\n+    __ jcc(Assembler::aboveEqual, L_53d0);\n+    __ jmp(L_52a6);\n+\n+    __ bind(L_exit);\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                         AVX2 code\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+  } else if (VM_Version::supports_fma()) {       \/\/ AVX2 version\n+\n+    Label L_104a, L_11bd, L_10c1, L_1090, L_11b9, L_10e7, L_11af, L_111c, L_10f3, L_116e, L_112a;\n+    Label L_1173, L_1157, L_117f, L_11a0;\n+\n+    \/\/   double fmod(double x, double y)\n+    \/\/ {\n+    \/\/ double a, b, sgn_a, q, bs, bs2, corr, res;\n+    \/\/ unsigned eq;\n+    \/\/ unsigned mxcsr, mxcsr_rz;\n+\n+    \/\/   __asm { stmxcsr DWORD PTR[mxcsr] }\n+    \/\/   mxcsr_rz = 0x7f80 | mxcsr;\n+    __ push(rax);\n+    __ stmxcsr(Address(rsp, 0));\n+    __ movl(rax, Address(rsp, 0));\n+    __ movl(rcx, rax);\n+    __ orl(rcx, 0x7f80);\n+    __ movl(Address(rsp, 0x04), rcx);\n+\n+    \/\/     \/\/ |x|, |y|\n+    \/\/     a = DP_AND(x, DP_CONST(7fffffffffffffff));\n+    __ movq(xmm2, xmm0);\n+    __ vmovdqu(xmm3, ExternalAddress((address)CONST_NaN), rcx);\n+    __ vpand(xmm4, xmm2, xmm3, Assembler::AVX_128bit);\n+    \/\/     b = DP_AND(y, DP_CONST(7fffffffffffffff));\n+    __ vpand(xmm3, xmm1, xmm3, Assembler::AVX_128bit);\n+    \/\/   \/\/ sign(x)\n+    \/\/   sgn_a = DP_XOR(x, a);\n+    __ mov64(rcx, 0x8000000000000000ULL);\n+    __ movq(xmm5, rcx);\n+    __ vpand(xmm2, xmm2, xmm5, Assembler::AVX_128bit);\n+\n+    \/\/   if (a < b)  return x + sgn_a;\n+    __ ucomisd(xmm3, xmm4);\n+    __ jcc(Assembler::belowEqual, L_104a);\n+    __ vaddsd(xmm0, xmm2, xmm0);\n+    __ jmp(L_11bd);\n+\n+    \/\/   if (((mxcsr & 0x6000)!=0x2000) && (a < b * 0x1p+260))\n+    __ bind(L_104a);\n+    __ andl(rax, 0x6000);\n+    __ cmpl(rax, 0x2000);\n+    __ jcc(Assembler::equal, L_10c1);\n+    __ vmulsd(xmm0, xmm3, ExternalAddress((address)CONST_1p260), rax);\n+    __ ucomisd(xmm0, xmm4);\n+    __ jcc(Assembler::belowEqual, L_10c1);\n+    \/\/   {\n+    \/\/     q = DP_DIV(a, b);\n+    __ vdivpd(xmm0, xmm4, xmm3, Assembler::AVX_128bit);\n+    \/\/     corr = DP_SHR(DP_FNMA(b, q, a), 63);\n+    __ movapd(xmm1, xmm0);\n+    __ vfnmadd213sd(xmm1, xmm3, xmm4);\n+    __ movq(xmm5, xmm1);\n+    __ vpxor(xmm1, xmm1, xmm1, Assembler::AVX_128bit);\n+    __ vpcmpgtq(xmm5, xmm1, xmm5, Assembler::AVX_128bit);\n+    \/\/     q = DP_PSUBQ(q, corr);\n+    __ vpaddq(xmm0, xmm5, xmm0, Assembler::AVX_128bit);\n+    \/\/     q = DP_TRUNC(q);\n+    __ vroundsd(xmm0, xmm0, xmm0, 3);\n+    \/\/     a = DP_FNMA(b, q, a);\n+    __ vfnmadd213sd(xmm0, xmm3, xmm4);\n+    __ align32();\n+    \/\/     while (b <= a)\n+    __ bind(L_1090);\n+    __ ucomisd(xmm0, xmm3);\n+    __ jcc(Assembler::below, L_11b9);\n+    \/\/     {\n+    \/\/       q = DP_DIV(a, b);\n+    __ vdivsd(xmm4, xmm0, xmm3);\n+    \/\/       corr = DP_SHR(DP_FNMA(b, q, a), 63);\n+    __ movapd(xmm5, xmm4);\n+    __ vfnmadd213sd(xmm5, xmm3, xmm0);\n+    __ movq(xmm5, xmm5);\n+    __ vpcmpgtq(xmm5, xmm1, xmm5, Assembler::AVX_128bit);\n+    \/\/       q = DP_PSUBQ(q, corr);\n+    __ vpaddq(xmm4, xmm5, xmm4, Assembler::AVX_128bit);\n+    \/\/       q = DP_TRUNC(q);\n+    __ vroundsd(xmm4, xmm4, xmm4, 3);\n+    \/\/       a = DP_FNMA(b, q, a);\n+    __ vfnmadd231sd(xmm0, xmm3, xmm4);\n+    __ jmp(L_1090);\n+    \/\/     }\n+    \/\/     return DP_XOR(a, sgn_a);\n+    \/\/   }\n+\n+    \/\/   __asm { ldmxcsr DWORD PTR [mxcsr_rz] }\n+    __ bind(L_10c1);\n+    __ ldmxcsr(Address(rsp, 0x04));\n+\n+    \/\/   q = DP_DIV(a, b);\n+    __ vdivpd(xmm0, xmm4, xmm3, Assembler::AVX_128bit);\n+    \/\/   q = DP_TRUNC(q);\n+    __ vroundsd(xmm0, xmm0, xmm0, 3);\n+\n+    \/\/   eq = TRANSFER_HIGH_INT32(q);\n+    __ extractps(rax, xmm0, 1);\n+\n+    \/\/   if (__builtin_expect((eq >= 0x7fefffffu), (0==1))) goto SPECIAL_FMOD;\n+    __ cmpl(rax, 0x7feffffe);\n+    __ jcc(Assembler::above, L_10e7);\n+\n+    \/\/   a = DP_FNMA(b, q, a);\n+    __ vfnmadd213sd(xmm0, xmm3, xmm4);\n+    __ jmp(L_11af);\n+\n+    \/\/ SPECIAL_FMOD:\n+\n+    \/\/   \/\/ y==0 or x==Inf?\n+    \/\/   if ((b == 0.0) || (!(a <= DP_CONST(7fefffffffffffff))))\n+    __ bind(L_10e7);\n+    __ vpxor(xmm5, xmm5, xmm5, Assembler::AVX_128bit);\n+    __ ucomisd(xmm3, xmm5);\n+    __ jcc(Assembler::notEqual, L_10f3);\n+    __ jcc(Assembler::noParity, L_111c);\n+\n+    __ bind(L_10f3);\n+    __ movsd(xmm5, ExternalAddress((address)CONST_MAX), rax);\n+    __ ucomisd(xmm5, xmm4);\n+    __ jcc(Assembler::below, L_111c);\n+    \/\/     return res;\n+    \/\/   }\n+    \/\/   \/\/ y is NaN?\n+    \/\/   if (!(b <= DP_CONST(7ff0000000000000))) {\n+    __ movsd(xmm0, ExternalAddress((address)CONST_INF), rax);\n+    __ ucomisd(xmm0, xmm3);\n+    __ jcc(Assembler::aboveEqual, L_112a);\n+    \/\/     res = y + y;\n+    __ vaddsd(xmm0, xmm1, xmm1);\n+    \/\/     __asm { ldmxcsr DWORD PTR[mxcsr] }\n+    __ ldmxcsr(Address(rsp, 0));\n+    __ jmp(L_11bd);\n+    \/\/   {\n+    \/\/     res = DP_FNMA(b, q, a);    \/\/ NaN\n+    __ bind(L_111c);\n+    __ vfnmadd213sd(xmm0, xmm3, xmm4);\n+    \/\/     __asm { ldmxcsr DWORD PTR[mxcsr] }\n+    __ ldmxcsr(Address(rsp, 0));\n+    __ jmp(L_11bd);\n+    \/\/     return res;\n+    \/\/   }\n+\n+    \/\/   \/\/ b* 2*1023\n+    \/\/   bs = b * DP_CONST(7fe0000000000000);\n+    __ bind(L_112a);\n+    __ vmulsd(xmm1, xmm3, ExternalAddress((address)CONST_e307), rax);\n+\n+    \/\/   q = DP_DIV(a, bs);\n+    __ vdivsd(xmm0, xmm4, xmm1);\n+    \/\/   q = DP_TRUNC(q);\n+    __ vroundsd(xmm0, xmm0, xmm0, 3);\n+\n+    \/\/   eq = TRANSFER_HIGH_INT32(q);\n+    __ extractps(rax, xmm0, 1);\n+\n+    \/\/   if (eq >= 0x7fefffffu)\n+    __ cmpl(rax, 0x7fefffff);\n+    __ jcc(Assembler::below, L_116e);\n+    \/\/   {\n+    \/\/     \/\/ b* 2*1023 * 2^1023\n+    \/\/     bs2 = bs * DP_CONST(7fe0000000000000);\n+    __ vmulsd(xmm0, xmm1, ExternalAddress((address)CONST_e307), rax);\n+    \/\/     while (bs2 <= a)\n+    __ ucomisd(xmm4, xmm0);\n+    __ jcc(Assembler::below, L_1173);\n+    \/\/     {\n+    \/\/       q = DP_DIV(a, bs2);\n+    __ bind(L_1157);\n+    __ vdivsd(xmm5, xmm4, xmm0);\n+    \/\/       q = DP_TRUNC(q);\n+    __ vroundsd(xmm5, xmm5, xmm5, 3);\n+    \/\/       a = DP_FNMA(bs2, q, a);\n+    __ vfnmadd231sd(xmm4, xmm0, xmm5);\n+    \/\/     while (bs2 <= a)\n+    __ ucomisd(xmm4, xmm0);\n+    __ jcc(Assembler::aboveEqual, L_1157);\n+    __ jmp(L_1173);\n+    \/\/     }\n+    \/\/   }\n+    \/\/   else\n+    \/\/   a = DP_FNMA(bs, q, a);\n+    __ bind(L_116e);\n+    __ vfnmadd231sd(xmm4, xmm1, xmm0);\n+\n+    \/\/   while (bs <= a)\n+    __ bind(L_1173);\n+    __ ucomisd(xmm4, xmm1);\n+    __ jcc(Assembler::aboveEqual, L_117f);\n+    __ movapd(xmm0, xmm4);\n+    __ jmp(L_11af);\n+    \/\/   {\n+    \/\/     q = DP_DIV(a, bs);\n+    __ bind(L_117f);\n+    __ vdivsd(xmm0, xmm4, xmm1);\n+    \/\/     q = DP_TRUNC(q);\n+    __ vroundsd(xmm0, xmm0, xmm0, 3);\n+    \/\/     a = DP_FNMA(bs, q, a);\n+    __ vfnmadd213sd(xmm0, xmm1, xmm4);\n+\n+    \/\/   while (bs <= a)\n+    __ ucomisd(xmm0, xmm1);\n+    __ movapd(xmm4, xmm0);\n+    __ jcc(Assembler::aboveEqual, L_117f);\n+    __ jmp(L_11af);\n+    __ align32();\n+    \/\/   {\n+    \/\/     q = DP_DIV(a, b);\n+    __ bind(L_11a0);\n+    __ vdivsd(xmm1, xmm0, xmm3);\n+    \/\/     q = DP_TRUNC(q);\n+    __ vroundsd(xmm1, xmm1, xmm1, 3);\n+    \/\/     a = DP_FNMA(b, q, a);\n+    __ vfnmadd231sd(xmm0, xmm3, xmm1);\n+\n+    \/\/ FMOD_CONT:\n+    \/\/   while (b <= a)\n+    __ bind(L_11af);\n+    __ ucomisd(xmm0, xmm3);\n+    __ jcc(Assembler::aboveEqual, L_11a0);\n+    \/\/   }\n+\n+    \/\/   __asm { ldmxcsr DWORD PTR[mxcsr] }\n+    __ ldmxcsr(Address(rsp, 0));\n+    __ bind(L_11b9);\n+    __ vpxor(xmm0, xmm2, xmm0, Assembler::AVX_128bit);\n+    \/\/   }\n+\n+    \/\/   goto FMOD_CONT;\n+\n+    \/\/ }\n+    __ bind(L_11bd);\n+    __ pop(rax);\n+\n+  } else {                                       \/\/ SSE version\n+    assert(false, \"SSE not implemented\");\n+  }\n+\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+#undef __\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_fmod.cpp","additions":524,"deletions":0,"binary":false,"changes":524,"status":"added"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,4 +35,0 @@\n-#ifdef __APPLE__\n-#define FFI_GO_CLOSURES 0\n-#endif\n-\n","filename":"src\/hotspot\/cpu\/zero\/globalDefinitions_zero.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  static bool platform_print_native_stack(outputStream* st, const void* context, char *buf, int buf_size);\n+  static bool platform_print_native_stack(outputStream* st, const void* context, char *buf, int buf_size, address& lastpc);\n","filename":"src\/hotspot\/os\/aix\/os_aix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-                                          char *buf, int buf_size);\n+                                          char *buf, int buf_size, address& lastpc);\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -519,1 +519,1 @@\n-bool os::Aix::platform_print_native_stack(outputStream* st, const void* context, char *buf, int buf_size) {\n+bool os::Aix::platform_print_native_stack(outputStream* st, const void* context, char *buf, int buf_size, address& lastpc) {\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-                                            char *buf, int buf_size) {\n-  return os::Aix::platform_print_native_stack(st, context, buf, buf_size);\n+                                            char *buf, int buf_size, address& lastpc) {\n+  return os::Aix::platform_print_native_stack(st, context, buf, buf_size, lastpc);\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-                                            char *buf, int buf_size)\n+                                            char *buf, int buf_size, address& lastpc)\n@@ -248,1 +248,1 @@\n-  address lastpc = 0;\n+  address lastpc_internal = 0;\n@@ -255,1 +255,1 @@\n-      if (count == 2 && lastpc == pc) {\n+      if (count == 2 && lastpc_internal == pc) {\n@@ -271,1 +271,1 @@\n-      lastpc = pc;\n+      lastpc_internal = pc;\n@@ -277,0 +277,1 @@\n+      lastpc = lastpc_internal;\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-                                     char *buf, int buf_size) {\n-  return os::win32::platform_print_native_stack(st, context, buf, buf_size);\n+                                     char *buf, int buf_size, address& lastpc) {\n+  return os::win32::platform_print_native_stack(st, context, buf, buf_size, lastpc);\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-  : _regDef(cmpstr,hashstr, Form::arena),\n+  : _current_ac(nullptr),\n+    _regDef(cmpstr,hashstr, Form::arena),\n@@ -375,0 +376,2 @@\n+    _rclasses[0] = nullptr;\n+    _rclasses[1] = nullptr;\n@@ -439,0 +442,4 @@\n+  _sync_stack_slots = nullptr;\n+  _inline_cache_reg = nullptr;\n+  _interpreter_frame_pointer_reg = nullptr;\n+  _cisc_spilling_operand_name = nullptr;\n@@ -442,0 +449,2 @@\n+  _return_addr_loc = false;\n+  _c_return_addr_loc = false;\n@@ -447,1 +456,0 @@\n-  _interpreter_frame_pointer_reg = nullptr;\n","filename":"src\/hotspot\/share\/adlc\/formsopt.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1340,20 +1340,0 @@\n-\/\/ Set lower\n-void RangeCheckEliminator::Bound::set_lower(int value, Value v) {\n-  assert(!v || !v->as_Constant() || !v->type()->as_IntConstant(), \"Must not be constant!\");\n-  this->_lower = value;\n-  this->_lower_instr = v;\n-}\n-\n-\/\/ Set upper\n-void RangeCheckEliminator::Bound::set_upper(int value, Value v) {\n-  assert(!v || !v->as_Constant() || !v->type()->as_IntConstant(), \"Must not be constant!\");\n-  this->_upper = value;\n-  this->_upper_instr = v;\n-}\n-\n-\/\/ Add constant -> no overflow may occur\n-void RangeCheckEliminator::Bound::add_constant(int value) {\n-  this->_lower += value;\n-  this->_upper += value;\n-}\n-\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -100,2 +100,0 @@\n-    void set_upper(int upper, Value upper_instr);\n-    void set_lower(int lower, Value lower_instr);\n@@ -105,1 +103,0 @@\n-    void add_constant(int value);\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-void ArchiveBuilder::SourceObjList::append(MetaspaceClosure::Ref* enclosing_ref, SourceObjInfo* src_info) {\n+void ArchiveBuilder::SourceObjList::append(SourceObjInfo* src_info) {\n@@ -89,6 +89,1 @@\n-  \/\/ so that we can copy\/relocate it later. E.g., if we have\n-  \/\/    class Foo { intx scala; Bar* ptr; }\n-  \/\/    Foo *f = 0x100;\n-  \/\/ To mark the f->ptr pointer on 64-bit platform, this function is called with\n-  \/\/    src_info()->obj() == 0x100\n-  \/\/    ref->addr() == 0x108\n+  \/\/ so that we can copy\/relocate it later.\n@@ -412,7 +407,1 @@\n-    return _builder->gather_one_source_obj(enclosing_ref(), ref, read_only);\n-  }\n-\n-  virtual void do_pending_ref(Ref* ref) {\n-    if (ref->obj() != nullptr) {\n-      _builder->remember_embedded_pointer_in_gathered_obj(enclosing_ref(), ref);\n-    }\n+    return _builder->gather_one_source_obj(ref, read_only);\n@@ -422,2 +411,1 @@\n-bool ArchiveBuilder::gather_one_source_obj(MetaspaceClosure::Ref* enclosing_ref,\n-                                           MetaspaceClosure::Ref* ref, bool read_only) {\n+bool ArchiveBuilder::gather_one_source_obj(MetaspaceClosure::Ref* ref, bool read_only) {\n@@ -428,1 +416,1 @@\n-  remember_embedded_pointer_in_gathered_obj(enclosing_ref, ref);\n+  remember_embedded_pointer_in_enclosing_obj(ref);\n@@ -443,1 +431,0 @@\n-    ref->set_user_data((void*)p);\n@@ -445,1 +432,1 @@\n-      _ro_src_objs.append(enclosing_ref, p);\n+      _ro_src_objs.append(p);\n@@ -447,1 +434,1 @@\n-      _rw_src_objs.append(enclosing_ref, p);\n+      _rw_src_objs.append(p);\n@@ -455,2 +442,2 @@\n-void ArchiveBuilder::remember_embedded_pointer_in_gathered_obj(MetaspaceClosure::Ref* enclosing_ref,\n-                                                               MetaspaceClosure::Ref* ref) {\n+\/\/ Remember that we have a pointer inside ref->enclosing_obj() that points to ref->obj()\n+void ArchiveBuilder::remember_embedded_pointer_in_enclosing_obj(MetaspaceClosure::Ref* ref) {\n@@ -459,5 +446,30 @@\n-  if (enclosing_ref != nullptr) {\n-    SourceObjInfo* src_info = (SourceObjInfo*)enclosing_ref->user_data();\n-    if (src_info == nullptr) {\n-      \/\/ source objects of point_to_it\/set_to_null types are not copied\n-      \/\/ so we don't need to remember their pointers.\n+  address enclosing_obj = ref->enclosing_obj();\n+  if (enclosing_obj == nullptr) {\n+    return;\n+  }\n+\n+  \/\/ We are dealing with 3 addresses:\n+  \/\/ address o    = ref->obj(): We have found an object whose address is o.\n+  \/\/ address* mpp = ref->mpp(): The object o is pointed to by a pointer whose address is mpp.\n+  \/\/                            I.e., (*mpp == o)\n+  \/\/ enclosing_obj            : If non-null, it is the object which has a field that points to o.\n+  \/\/                            mpp is the address if that field.\n+  \/\/\n+  \/\/ Example: We have an array whose first element points to a Method:\n+  \/\/     Method* o                     = 0x0000abcd;\n+  \/\/     Array<Method*>* enclosing_obj = 0x00001000;\n+  \/\/     enclosing_obj->at_put(0, o);\n+  \/\/\n+  \/\/ We the MetaspaceClosure iterates on the very first element of this array, we have\n+  \/\/     ref->obj()           == 0x0000abcd   (the Method)\n+  \/\/     ref->mpp()           == 0x00001008   (the location of the first element in the array)\n+  \/\/     ref->enclosing_obj() == 0x00001000   (the Array that contains the Method)\n+  \/\/\n+  \/\/ We use the above information to mark the bitmap to indicate that there's a pointer on address 0x00001008.\n+  SourceObjInfo* src_info = _src_obj_table.get(enclosing_obj);\n+  if (src_info == nullptr || !src_info->should_copy()) {\n+    \/\/ source objects of point_to_it\/set_to_null types are not copied\n+    \/\/ so we don't need to remember their pointers.\n+  } else {\n+    if (src_info->read_only()) {\n+      _ro_src_objs.remember_embedded_pointer(src_info, ref);\n@@ -465,5 +477,1 @@\n-      if (src_info->read_only()) {\n-        _ro_src_objs.remember_embedded_pointer(src_info, ref);\n-      } else {\n-        _rw_src_objs.remember_embedded_pointer(src_info, ref);\n-      }\n+      _rw_src_objs.remember_embedded_pointer(src_info, ref);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":40,"deletions":32,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-    void append(MetaspaceClosure::Ref* enclosing_ref, SourceObjInfo* src_info);\n+    void append(SourceObjInfo* src_info);\n@@ -333,2 +333,2 @@\n-  bool gather_one_source_obj(MetaspaceClosure::Ref* enclosing_ref, MetaspaceClosure::Ref* ref, bool read_only);\n-  void remember_embedded_pointer_in_gathered_obj(MetaspaceClosure::Ref* enclosing_ref, MetaspaceClosure::Ref* ref);\n+  bool gather_one_source_obj(MetaspaceClosure::Ref* ref, bool read_only);\n+  void remember_embedded_pointer_in_enclosing_obj(MetaspaceClosure::Ref* ref);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-#include \"oops\/constantPool.hpp\"\n+#include \"oops\/constantPool.inline.hpp\"\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2159,8 +2159,0 @@\n-\/\/ The address where this shared heap region is actually mapped at runtime. This function\n-\/\/ can be called only after we have determined the value for ArchiveHeapLoader::mapped_heap_delta().\n-address FileMapInfo::heap_region_mapped_address() {\n-  assert(UseSharedSpaces, \"runtime only\");\n-  assert(ArchiveHeapLoader::can_map(), \"cannot be used by ArchiveHeapLoader::can_load() mode\");\n-  return heap_region_requested_address() + ArchiveHeapLoader::mapped_heap_delta();\n-}\n-\n@@ -2168,11 +2160,0 @@\n-  init_heap_region_relocation();\n-\n-  if (_heap_pointers_need_patching) {\n-    char* bitmap_base = map_bitmap_region();\n-    if (bitmap_base == nullptr) {\n-      log_info(cds)(\"CDS heap cannot be used because bitmap region cannot be mapped\");\n-      _heap_pointers_need_patching = false;\n-      return false;\n-    }\n-  }\n-\n@@ -2204,1 +2185,1 @@\n-void FileMapInfo::init_heap_region_relocation() {\n+bool FileMapInfo::map_heap_region_impl() {\n@@ -2206,4 +2187,0 @@\n-  _heap_pointers_need_patching = false;\n-\n-  MemRegion heap_range = G1CollectedHeap::heap()->reserved();\n-  MemRegion archive_range = get_heap_region_requested_range();\n@@ -2211,30 +2188,0 @@\n-  address requested_bottom = (address)archive_range.start();\n-  address heap_end = (address)heap_range.end();\n-  assert(is_aligned(heap_end, HeapRegion::GrainBytes), \"must be\");\n-\n-  \/\/ We map the archive heap region at the very top of the heap to avoid fragmentation.\n-  \/\/ To do that, we make sure that the bottom of the archived region is at the same\n-  \/\/ address as the bottom of the highest possible G1 region.\n-  address mapped_bottom = heap_end - align_up(archive_range.byte_size(), HeapRegion::GrainBytes);\n-\n-  if (UseCompressedOops &&\n-      (narrow_oop_mode() != CompressedOops::mode() ||\n-       narrow_oop_shift() != CompressedOops::shift())) {\n-    log_info(cds)(\"CDS heap data needs to be relocated because the archive was created with an incompatible oop encoding mode.\");\n-    _heap_pointers_need_patching = true;\n-  } else if (requested_bottom != mapped_bottom) {\n-    log_info(cds)(\"CDS heap data needs to be relocated because it is mapped at a different address @ \" INTPTR_FORMAT,\n-                  p2i(mapped_bottom));\n-    _heap_pointers_need_patching = true;\n-  }\n-\n-  ptrdiff_t delta = 0;\n-  if (_heap_pointers_need_patching) {\n-    delta = mapped_bottom - requested_bottom;\n-  }\n-\n-  log_info(cds)(\"CDS heap data relocation delta = \" INTX_FORMAT \" bytes\", delta);\n-  ArchiveHeapLoader::init_mapped_heap_relocation(delta, narrow_oop_shift());\n-}\n-\n-bool FileMapInfo::map_heap_region_impl() {\n@@ -2243,7 +2190,1 @@\n-\n-  if (size > 0) {\n-    HeapWord* start = (HeapWord*)heap_region_mapped_address();\n-    _mapped_heap_memregion = MemRegion(start, size \/ HeapWordSize);\n-    log_info(cds)(\"Trying to map heap data at \" INTPTR_FORMAT \", size = \" SIZE_FORMAT_W(8) \" bytes\",\n-                  p2i(start), size);\n-  } else {\n+  if (size == 0) {\n@@ -2253,5 +2194,4 @@\n-  \/\/ Check that the region is within the java heap\n-  if (!G1CollectedHeap::heap()->check_archive_addresses(_mapped_heap_memregion)) {\n-    log_info(cds)(\"Unable to allocate region, range is not within java heap.\");\n-    return false;\n-  }\n+  size_t word_size = size \/ HeapWordSize;\n+  address requested_start = heap_region_requested_address();\n+\n+  log_info(cds)(\"Preferred address to map heap data (to avoid relocation) is \" INTPTR_FORMAT, p2i(requested_start));\n@@ -2260,2 +2200,3 @@\n-  if (!G1CollectedHeap::heap()->alloc_archive_regions(_mapped_heap_memregion)) {\n-    log_info(cds)(\"Unable to allocate region, java heap range is already in use.\");\n+  HeapWord* start = G1CollectedHeap::heap()->alloc_archive_region(word_size, (HeapWord*)requested_start);\n+  if (start == nullptr) {\n+    log_info(cds)(\"UseSharedSpaces: Unable to allocate java heap region for archive heap.\");\n@@ -2265,0 +2206,2 @@\n+  _mapped_heap_memregion = MemRegion(start, word_size);\n+\n@@ -2282,1 +2225,1 @@\n-    log_info(cds)(\"mapped heap region is corrupt\");\n+    log_info(cds)(\"UseSharedSpaces: mapped heap region is corrupt\");\n@@ -2286,0 +2229,27 @@\n+  \/\/ If the requested range is different from the range allocated by GC, then\n+  \/\/ the pointers need to be patched.\n+  address mapped_start = (address) _mapped_heap_memregion.start();\n+  ptrdiff_t delta = mapped_start - requested_start;\n+  if (UseCompressedOops &&\n+      (narrow_oop_mode() != CompressedOops::mode() ||\n+       narrow_oop_shift() != CompressedOops::shift())) {\n+    _heap_pointers_need_patching = true;\n+  }\n+  if (delta != 0) {\n+    _heap_pointers_need_patching = true;\n+  }\n+  ArchiveHeapLoader::init_mapped_heap_relocation(delta, narrow_oop_shift());\n+\n+  if (_heap_pointers_need_patching) {\n+    char* bitmap_base = map_bitmap_region();\n+    if (bitmap_base == NULL) {\n+      log_info(cds)(\"CDS heap cannot be used because bitmap region cannot be mapped\");\n+      dealloc_heap_region();\n+      unmap_region(MetaspaceShared::hp);\n+      _heap_pointers_need_patching = false;\n+      return false;\n+    }\n+  }\n+  log_info(cds)(\"Heap data mapped at \" INTPTR_FORMAT \", size = \" SIZE_FORMAT_W(8) \" bytes\",\n+                p2i(mapped_start), _mapped_heap_memregion.byte_size());\n+  log_info(cds)(\"CDS heap data relocation delta = \" INTX_FORMAT \" bytes\", delta);\n@@ -2339,1 +2309,0 @@\n-  assert(!HeapShared::is_heap_region(i), \"sanity\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":39,"deletions":70,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -598,1 +598,0 @@\n-  address heap_region_mapped_address() NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-#include \"oops\/constantPool.hpp\"\n+#include \"oops\/constantPool.inline.hpp\"\n@@ -49,0 +49,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -152,1 +152,3 @@\n-#define CONSTANT_CLASS_DESCRIPTORS        65\n+#define JAVA_22_VERSION                   66\n+\n+#define CONSTANT_CLASS_DESCRIPTORS        66\n@@ -4405,2 +4407,2 @@\n-  return _major_version > JAVA_21_VERSION ||\n-         (_major_version == JAVA_21_VERSION \/*&& _minor_version == JAVA_PREVIEW_MINOR_VERSION*\/); \/\/ JAVA_PREVIEW_MINOR_VERSION not yet implemented by javac, check JVMS draft\n+  return _major_version > JAVA_22_VERSION ||\n+         (_major_version == JAVA_22_VERSION \/*&& _minor_version == JAVA_PREVIEW_MINOR_VERSION*\/); \/\/ JAVA_PREVIEW_MINOR_VERSION not yet implemented by javac, check JVMS draft\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,10 @@\n-  \/\/ flags must be OR'ed from ClassPrinter::Mode for the these two functions\n+  \/\/ Parameters for print_classes() and print_methods():\n+  \/\/\n+  \/\/ - The patterns are matched by StringUtils::is_star_match()\n+  \/\/ - class_name_pattern matches Klass::external_name(). E.g., \"java\/lang\/Object\" or \"*ang\/Object\"\n+  \/\/ - method_pattern may optionally include the signature. E.g., \"wait\", \"wait:()V\" or \"*ai*t:(*)V\"\n+  \/\/ - flags must be OR'ed from ClassPrinter::Mode\n+  \/\/\n+  \/\/   print_classes(\"java\/lang\/Object\", 0x3, os)            -> find j.l.Object and disasm all of its methods\n+  \/\/   print_methods(\"*ang\/Object*\", \"wait\", 0xff, os)       -> detailed disasm of all \"wait\" methods in j.l.Object\n+  \/\/   print_methods(\"*ang\/Object*\", \"wait:(*J*)V\", 0x1, os) -> list all \"wait\" methods in j.l.Object that have a long parameter\n@@ -65,1 +74,1 @@\n-                            const char* method_name_pattern, int flags, outputStream* os);\n+                            const char* method_pattern, int flags, outputStream* os);\n","filename":"src\/hotspot\/share\/classfile\/classPrinter.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -824,1 +824,1 @@\n-    mirror()->byte_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->byte_field_put(fd->offset(), checked_cast<jbyte>(fd->int_initial_value()));\n@@ -827,1 +827,1 @@\n-    mirror()->bool_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->bool_field_put(fd->offset(), checked_cast<jboolean>(fd->int_initial_value()));\n@@ -830,1 +830,1 @@\n-    mirror()->char_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->char_field_put(fd->offset(), checked_cast<jchar>(fd->int_initial_value()));\n@@ -833,1 +833,1 @@\n-    mirror()->short_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->short_field_put(fd->offset(), checked_cast<jshort>(fd->int_initial_value()));\n@@ -3704,15 +3704,0 @@\n-int reflect_UnsafeStaticFieldAccessorImpl::_base_offset;\n-\n-#define UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(macro) \\\n-  macro(_base_offset, k, \"base\", object_signature, false)\n-\n-void reflect_UnsafeStaticFieldAccessorImpl::compute_offsets() {\n-  InstanceKlass* k = vmClasses::reflect_UnsafeStaticFieldAccessorImpl_klass();\n-  UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n-}\n-\n-#if INCLUDE_CDS\n-void reflect_UnsafeStaticFieldAccessorImpl::serialize_offsets(SerializeClosure* f) {\n-  UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n-}\n-#endif\n@@ -4715,1 +4700,2 @@\n-\/\/ the generated bytecodes for reflection.\n+\/\/ the generated bytecodes for serialization constructor returned\n+\/\/ by sun.reflect.ReflectionFactory::newConstructorForSerialization\n@@ -5305,1 +5291,0 @@\n-  f(reflect_UnsafeStaticFieldAccessorImpl) \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":6,"deletions":21,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -900,14 +900,0 @@\n-\/\/ Interface to jdk.internal.reflect.UnsafeStaticFieldAccessorImpl objects\n-class reflect_UnsafeStaticFieldAccessorImpl {\n- private:\n-  static int _base_offset;\n-  static void compute_offsets();\n-\n- public:\n-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n-\n-  static int base_offset() { CHECK_INIT(_base_offset); }\n-\n-  \/\/ Debugging\n-  friend class JavaClasses;\n-};\n@@ -1511,1 +1497,2 @@\n-  \/\/ the generated bytecodes for reflection.\n+  \/\/ the generated bytecodes for serialization constructor returned\n+  \/\/ by sun.reflect.ReflectionFactory::newConstructorForSerialization\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -346,2 +346,2 @@\n-  assert((jushort)bci == bci, \"bci should be short\");\n-  return build_int_from_shorts(version, bci);\n+  assert((u2)bci == bci, \"bci should be short\");\n+  return build_int_from_shorts((u2)version, (u2)bci);\n@@ -352,3 +352,3 @@\n-  assert((jushort)mid == mid, \"mid should be short\");\n-  assert((jushort)cpref == cpref, \"cpref should be short\");\n-  return build_int_from_shorts(cpref, mid);\n+  assert((u2)mid == mid, \"mid should be short\");\n+  assert((u2)cpref == cpref, \"cpref should be short\");\n+  return build_int_from_shorts((u2)cpref, (u2)mid);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -92,0 +92,3 @@\n+    while (!_constraints->is_empty()) {\n+      delete _constraints->pop();\n+    }\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1360,0 +1360,4 @@\n+    if (record->_klass->array_klasses() != nullptr) {\n+      record->_klass->array_klasses()->cds_print_value_on(_st);\n+      _st->cr();\n+    }\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-  Klass* refl_magic_klass = vmClasses::reflect_MagicAccessorImpl_klass();\n+  Klass* refl_serialization_ctor_klass = vmClasses::reflect_SerializationConstructorAccessorImpl_klass();\n@@ -274,1 +274,2 @@\n-  bool is_reflect = refl_magic_klass != nullptr && klass->is_subtype_of(refl_magic_klass);\n+  bool is_reflect_accessor = refl_serialization_ctor_klass != nullptr &&\n+                                klass->is_subtype_of(refl_serialization_ctor_klass);\n@@ -294,2 +295,1 @@\n-    \/\/ dynamically-generated bytecodes associated with the 1.4\n-    \/\/ reflection implementation, not just those associated with\n+    \/\/ dynamically-generated bytecodes associated with\n@@ -297,4 +297,1 @@\n-    \/\/ NOTE: this is called too early in the bootstrapping process to be\n-    \/\/ guarded by Universe::is_gte_jdk14x_version().\n-    \/\/ Also for lambda generated code, gte jdk8\n-    (!is_reflect));\n+    (!is_reflect_accessor));\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,0 @@\n-  do_klass(reflect_MagicAccessorImpl_klass,             reflect_MagicAccessorImpl                             ) \\\n@@ -110,1 +109,0 @@\n-  do_klass(reflect_ConstructorAccessorImpl_klass,       reflect_ConstructorAccessorImpl                       ) \\\n@@ -113,1 +111,0 @@\n-  do_klass(reflect_UnsafeStaticFieldAccessorImpl_klass, reflect_UnsafeStaticFieldAccessorImpl                 ) \\\n@@ -115,1 +112,2 @@\n-  do_klass(reflect_NativeConstructorAccessorImpl_klass, reflect_NativeConstructorAccessorImpl                 ) \\\n+  do_klass(reflect_DirectConstructorHandleAccessor_NativeAccessor_klass, reflect_DirectConstructorHandleAccessor_NativeAccessor) \\\n+  do_klass(reflect_SerializationConstructorAccessorImpl_klass,           reflect_SerializationConstructorAccessorImpl ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -275,1 +275,0 @@\n-  template(reflect_MagicAccessorImpl,                 \"jdk\/internal\/reflect\/MagicAccessorImpl\")       \\\n@@ -277,1 +276,0 @@\n-  template(reflect_ConstructorAccessorImpl,           \"jdk\/internal\/reflect\/ConstructorAccessorImpl\") \\\n@@ -282,1 +280,2 @@\n-  template(reflect_NativeConstructorAccessorImpl,     \"jdk\/internal\/reflect\/NativeConstructorAccessorImpl\")\\\n+  template(reflect_DirectConstructorHandleAccessor_NativeAccessor,   \"jdk\/internal\/reflect\/DirectConstructorHandleAccessor$NativeAccessor\") \\\n+  template(reflect_SerializationConstructorAccessorImpl,             \"jdk\/internal\/reflect\/SerializationConstructorAccessorImpl\") \\\n@@ -311,1 +310,0 @@\n-  template(reflect_UnsafeStaticFieldAccessorImpl,     \"jdk\/internal\/reflect\/UnsafeStaticFieldAccessorImpl\")\\\n@@ -763,1 +761,0 @@\n-  template(serializeSavedPropertiesToByteArray_name,   \"serializeSavedPropertiesToByteArray\")                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -813,3 +813,4 @@\n-void CompilerOracle::parse_from_line(char* line) {\n-  if (line[0] == '\\0') return;\n-  if (line[0] == '#')  return;\n+bool CompilerOracle::parse_from_line(char* line) {\n+  if ((line[0] == '\\0') || (line[0] == '#')) {\n+    return true;\n+  }\n@@ -827,1 +828,1 @@\n-    return;\n+    return false;\n@@ -832,1 +833,1 @@\n-    return;\n+    return true;\n@@ -837,1 +838,1 @@\n-    return;\n+    return true;\n@@ -859,1 +860,1 @@\n-      return;\n+      return false;\n@@ -876,1 +877,1 @@\n-          return;\n+          return false;\n@@ -885,1 +886,1 @@\n-          return;\n+          return false;\n@@ -893,1 +894,1 @@\n-          return;\n+          return false;\n@@ -912,1 +913,1 @@\n-      return;\n+      return false;\n@@ -919,1 +920,1 @@\n-        return;\n+        return true;\n@@ -923,1 +924,1 @@\n-        return;\n+        return false;\n@@ -929,1 +930,1 @@\n-      return;\n+      return false;\n@@ -933,0 +934,1 @@\n+  return true;\n@@ -951,1 +953,1 @@\n-void CompilerOracle::parse_from_file() {\n+bool CompilerOracle::parse_from_file() {\n@@ -954,1 +956,3 @@\n-  if (stream == nullptr) return;\n+  if (stream == nullptr) {\n+    return true;\n+  }\n@@ -959,0 +963,1 @@\n+  bool success = true;\n@@ -962,1 +967,3 @@\n-      parse_from_line(token);\n+      if (!parse_from_line(token)) {\n+        success = false;\n+      }\n@@ -970,2 +977,3 @@\n-  parse_from_line(token);\n-\n+  if (!parse_from_line(token)) {\n+    success = false;\n+  }\n@@ -973,0 +981,1 @@\n+  return success;\n@@ -975,1 +984,1 @@\n-void CompilerOracle::parse_from_string(const char* str, void (*parse_line)(char*)) {\n+bool CompilerOracle::parse_from_string(const char* str, bool (*parse_line)(char*)) {\n@@ -980,0 +989,1 @@\n+  bool success = true;\n@@ -983,1 +993,3 @@\n-      parse_line(token);\n+      if (!parse_line(token)) {\n+        success = false;\n+      }\n@@ -991,1 +1003,4 @@\n-  parse_line(token);\n+  if (!parse_line(token)) {\n+    success = false;\n+  }\n+  return success;\n@@ -994,3 +1009,8 @@\n-void compilerOracle_init() {\n-  CompilerOracle::parse_from_string(CompileCommand, CompilerOracle::parse_from_line);\n-  CompilerOracle::parse_from_string(CompileOnly, CompilerOracle::parse_compile_only);\n+bool compilerOracle_init() {\n+  bool success = true;\n+  if (!CompilerOracle::parse_from_string(CompileCommand, CompilerOracle::parse_from_line)) {\n+    success = false;\n+  }\n+  if (!CompilerOracle::parse_from_string(CompileOnly, CompilerOracle::parse_compile_only)) {\n+    success = false;\n+  }\n@@ -998,1 +1018,3 @@\n-    CompilerOracle::parse_from_file();\n+    if (!CompilerOracle::parse_from_file()) {\n+      success = false;\n+    }\n@@ -1012,0 +1034,1 @@\n+  return success;\n@@ -1014,11 +1037,3 @@\n-void CompilerOracle::parse_compile_only(char* line) {\n-  int i;\n-  char name[1024];\n-  const char* className = nullptr;\n-  const char* methodName = nullptr;\n-\n-  bool have_colon = (strstr(line, \"::\") != nullptr);\n-  char method_sep = have_colon ? ':' : '.';\n-\n-  if (Verbose) {\n-    tty->print_cr(\"%s\", line);\n+bool CompilerOracle::parse_compile_only(char* line) {\n+  if (line[0] == '\\0') {\n+    return true;\n@@ -1026,1 +1041,0 @@\n-\n@@ -1028,9 +1042,6 @@\n-  while (*line != '\\0') {\n-    MethodMatcher::Mode c_match = MethodMatcher::Exact;\n-    MethodMatcher::Mode m_match = MethodMatcher::Exact;\n-\n-    for (i = 0;\n-         i < 1024 && *line != '\\0' && *line != method_sep && *line != ',' && !isspace(*line);\n-         line++, i++) {\n-      name[i] = *line;\n-      if (name[i] == '.')  name[i] = '\/';  \/\/ package prefix uses '\/'\n+  char error_buf[1024] = {0};\n+  LineCopy original(line);\n+  char* method_pattern;\n+  do {\n+    if (line[0] == '\\0') {\n+      break;\n@@ -1038,12 +1049,6 @@\n-\n-    if (i > 0) {\n-      char* newName = NEW_RESOURCE_ARRAY( char, i + 1);\n-      if (newName == nullptr)\n-        return;\n-      strncpy(newName, name, i);\n-      newName[i] = '\\0';\n-\n-      if (className == nullptr) {\n-        className = newName;\n-      } else {\n-        methodName = newName;\n+    method_pattern = strtok_r(line, \",\", &line);\n+    if (method_pattern != nullptr) {\n+      TypedMethodOptionMatcher* matcher = TypedMethodOptionMatcher::parse_method_pattern(method_pattern, error_buf, sizeof(error_buf));\n+      if (matcher != nullptr) {\n+        register_command(matcher, CompileCommand::CompileOnly, true);\n+        continue;\n@@ -1052,42 +1057,4 @@\n-\n-    if (*line == method_sep) {\n-      if (className == nullptr) {\n-        className = \"\";\n-        c_match = MethodMatcher::Any;\n-      }\n-    } else {\n-      \/\/ got foo or foo\/bar\n-      if (className == nullptr) {\n-        ShouldNotReachHere();\n-      } else {\n-        \/\/ missing class name handled as \"Any\" class match\n-        if (className[0] == '\\0') {\n-          c_match = MethodMatcher::Any;\n-        }\n-      }\n-    }\n-\n-    \/\/ each directive is terminated by , or NUL or . followed by NUL\n-    if (*line == ',' || *line == '\\0' || (line[0] == '.' && line[1] == '\\0')) {\n-      if (methodName == nullptr) {\n-        methodName = \"\";\n-        if (*line != method_sep) {\n-          m_match = MethodMatcher::Any;\n-        }\n-      }\n-\n-      EXCEPTION_MARK;\n-      Symbol* c_name = SymbolTable::new_symbol(className);\n-      Symbol* m_name = SymbolTable::new_symbol(methodName);\n-      Symbol* signature = nullptr;\n-\n-      TypedMethodOptionMatcher* tom = new TypedMethodOptionMatcher();\n-      tom->init_matcher(c_name, c_match, m_name, m_match, signature);\n-      register_command(tom, CompileCommand::CompileOnly, true);\n-      if (PrintVMOptions) {\n-        tty->print(\"CompileOnly: compileonly \");\n-        tom->print();\n-      }\n-\n-      className = nullptr;\n-      methodName = nullptr;\n+    ttyLocker ttyl;\n+    tty->print_cr(\"CompileOnly: An error occurred during parsing\");\n+    if (*error_buf != '\\0') {\n+      tty->print_cr(\"Error: %s\", error_buf);\n@@ -1095,3 +1062,4 @@\n-\n-    line = *line == '\\0' ? line : line + 1;\n-  }\n+    tty->print_cr(\"Line: '%s'\", original.get());\n+    return false;\n+  } while (method_pattern != nullptr && line != nullptr);\n+  return true;\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":72,"deletions":104,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,1 +127,1 @@\n-  static void parse_from_file();\n+  static bool parse_from_file();\n@@ -170,3 +170,3 @@\n-  static void parse_from_string(const char* option_string, void (*parser)(char*));\n-  static void parse_from_line(char* line);\n-  static void parse_compile_only(char* line);\n+  static bool parse_from_string(const char* option_string, bool (*parser)(char*));\n+  static bool parse_from_line(char* line);\n+  static bool parse_compile_only(char* line);\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  void apply_to_buffer(BufferNode* node, size_t buffer_size, uint worker_id) {\n+  void apply_to_buffer(BufferNode* node, size_t buffer_capacity, uint worker_id) {\n@@ -44,1 +44,1 @@\n-    for (size_t i = node->index(); i < buffer_size; ++i) {\n+    for (size_t i = node->index(); i < buffer_capacity; ++i) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTableEntryClosure.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -514,4 +514,0 @@\n-bool G1CollectedHeap::check_archive_addresses(MemRegion range) {\n-  return _hrm.reserved().contains(range);\n-}\n-\n@@ -535,1 +531,1 @@\n-bool G1CollectedHeap::alloc_archive_regions(MemRegion range) {\n+HeapWord* G1CollectedHeap::alloc_archive_region(size_t word_size, HeapWord* preferred_addr) {\n@@ -541,0 +537,6 @@\n+  if (reserved.word_size() <= word_size) {\n+    log_info(gc, heap)(\"Unable to allocate regions as archive heap is too large; size requested = \" SIZE_FORMAT\n+                       \" bytes, heap = \" SIZE_FORMAT \" bytes\", word_size, reserved.word_size());\n+    return nullptr;\n+  }\n+\n@@ -545,5 +547,0 @@\n-  \/\/ For the specified MemRegion range, allocate the corresponding G1\n-  \/\/ region(s) and mark them as old region(s).\n-  HeapWord* start_address = range.start();\n-  size_t word_size = range.word_size();\n-  HeapWord* last_address = range.last();\n@@ -551,7 +548,4 @@\n-\n-  guarantee(reserved.contains(start_address) && reserved.contains(last_address),\n-            \"MemRegion outside of heap [\" PTR_FORMAT \", \" PTR_FORMAT \"]\",\n-            p2i(start_address), p2i(last_address));\n-\n-  \/\/ Perform the actual region allocation, exiting if it fails.\n-  \/\/ Then note how much new space we have allocated.\n+  \/\/ Attempt to allocate towards the end of the heap.\n+  HeapWord* start_addr = reserved.end() - align_up(word_size, HeapRegion::GrainWords);\n+  MemRegion range = MemRegion(start_addr, word_size);\n+  HeapWord* last_address = range.last();\n@@ -559,1 +553,1 @@\n-    return false;\n+    return nullptr;\n@@ -565,1 +559,0 @@\n-\n@@ -582,1 +575,1 @@\n-  return true;\n+  return start_addr;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -703,7 +703,0 @@\n-  \/\/ Facility for allocating a fixed range within the heap and marking\n-  \/\/ the containing regions as 'old'. For use at JVM init time, when the\n-  \/\/ caller may mmap archived heap data at the specified range.\n-\n-  \/\/ Verify that the range is within the reserved heap.\n-  bool check_archive_addresses(MemRegion range);\n-\n@@ -715,3 +708,7 @@\n-  \/\/ Commit the appropriate G1 region(s) containing the specified range\n-  \/\/ and mark them as 'old' region(s).\n-  bool alloc_archive_regions(MemRegion range);\n+  \/\/ Commit the required number of G1 region(s) according to the size requested\n+  \/\/ and mark them as 'old' region(s). Preferred address is treated as a hint for\n+  \/\/ the location of the archive space in the heap. The returned address may or may\n+  \/\/ not be same as the preferred address.\n+  \/\/ This API is only used for allocating heap space for the archived heap objects\n+  \/\/ in the CDS archive.\n+  HeapWord* alloc_archive_region(size_t word_size, HeapWord* preferred_addr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -250,1 +250,8 @@\n-  return hr->is_obj_dead(obj, hr->parsable_bottom());\n+  if (hr->is_in_parsable_area(obj)) {\n+    \/\/ This object is in the parsable part of the heap, live unless scrubbed.\n+    return is_obj_filler(obj);\n+  } else {\n+    \/\/ From Remark until a region has been concurrently scrubbed, parts of the\n+    \/\/ region is not guaranteed to be parsable. Use the bitmap for liveness.\n+    return !concurrent_mark()->mark_bitmap()->is_marked(obj);\n+  }\n@@ -254,3 +261,2 @@\n-  if (obj == nullptr) {\n-    return false;\n-  }\n+  assert(obj != nullptr, \"precondition\");\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1298,0 +1298,5 @@\n+    \/\/ Potentially, some empty-regions have been reclaimed; make this a\n+    \/\/ \"collection\" so that pending allocation can retry before attempting a\n+    \/\/ GC pause.\n+    _g1h->increment_total_collections();\n+\n@@ -1465,4 +1470,0 @@\n-  \/\/ We need to make this be a \"collection\" so any collection pause that\n-  \/\/ races with it goes around and waits for Cleanup to finish.\n-  _g1h->increment_total_collections();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    stats->inc_dirtied_cards(buffer_size() - queue.index());\n+    stats->inc_dirtied_cards(buffer_capacity() - queue.index());\n@@ -108,1 +108,1 @@\n-    stats->inc_dirtied_cards(buffer_size());\n+    stats->inc_dirtied_cards(buffer_capacity());\n@@ -126,1 +126,1 @@\n-  Atomic::add(&_num_cards, buffer_size() - cbn->index());\n+  Atomic::add(&_num_cards, buffer_capacity() - cbn->index());\n@@ -162,1 +162,1 @@\n-  Atomic::sub(&_num_cards, buffer_size() - result->index());\n+  Atomic::sub(&_num_cards, buffer_capacity() - result->index());\n@@ -172,1 +172,1 @@\n-    actual += buffer_size() - cur->index();\n+    actual += buffer_capacity() - cur->index();\n@@ -288,1 +288,1 @@\n-  Atomic::add(&_num_cards, buffer_size() - node->index());\n+  Atomic::add(&_num_cards, buffer_capacity() - node->index());\n@@ -344,1 +344,1 @@\n-  const size_t _node_buffer_size;\n+  const size_t _node_buffer_capacity;\n@@ -349,2 +349,2 @@\n-  static inline int compare_card(const CardTable::CardValue* p1,\n-                                 const CardTable::CardValue* p2) {\n+  static inline ptrdiff_t compare_cards(const CardTable::CardValue* p1,\n+                                        const CardTable::CardValue* p2) {\n@@ -354,1 +354,1 @@\n-  \/\/ Sorts the cards from start_index to _node_buffer_size in *decreasing*\n+  \/\/ Sorts the cards from start_index to _node_buffer_capacity in *decreasing*\n@@ -359,2 +359,2 @@\n-                    _node_buffer_size - start_index,\n-                    compare_card,\n+                    _node_buffer_capacity - start_index,\n+                    compare_cards,\n@@ -367,1 +367,1 @@\n-    assert(start <= _node_buffer_size, \"invariant\");\n+    assert(start <= _node_buffer_capacity, \"invariant\");\n@@ -375,1 +375,1 @@\n-    CardTable::CardValue** dst = &_node_buffer[_node_buffer_size];\n+    CardTable::CardValue** dst = &_node_buffer[_node_buffer_capacity];\n@@ -394,1 +394,1 @@\n-    assert(first_clean >= start && first_clean <= _node_buffer_size, \"invariant\");\n+    assert(first_clean >= start && first_clean <= _node_buffer_capacity, \"invariant\");\n@@ -404,1 +404,1 @@\n-    for ( ; i < _node_buffer_size; ++i) {\n+    for ( ; i < _node_buffer_capacity; ++i) {\n@@ -418,1 +418,1 @@\n-    for ( ; start < _node_buffer_size; ++start) {\n+    for ( ; start < _node_buffer_capacity; ++start) {\n@@ -425,1 +425,1 @@\n-                        size_t node_buffer_size,\n+                        size_t node_buffer_capacity,\n@@ -430,1 +430,1 @@\n-    _node_buffer_size(node_buffer_size),\n+    _node_buffer_capacity(node_buffer_capacity),\n@@ -437,1 +437,1 @@\n-    if (first_clean_index == _node_buffer_size) {\n+    if (first_clean_index == _node_buffer_capacity) {\n@@ -460,1 +460,1 @@\n-                                       buffer_size(),\n+                                       buffer_capacity(),\n@@ -471,1 +471,1 @@\n-    assert(node->index() == buffer_size(),\n+    assert(node->index() == buffer_capacity(),\n@@ -473,1 +473,1 @@\n-           node->index(), buffer_size());\n+           node->index(), buffer_capacity());\n@@ -476,1 +476,1 @@\n-    assert(node->index() < buffer_size(), \"Buffer fully consumed.\");\n+    assert(node->index() < buffer_capacity(), \"Buffer fully consumed.\");\n@@ -579,1 +579,1 @@\n-    (queue.index() != buffer_size())) {\n+      (queue.index() != buffer_capacity())) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-  \/\/ Refine the cards in \"node\" from its index to buffer_size.\n+  \/\/ Refine the cards in \"node\" from its index to buffer_capacity.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-      if (_hr->obj_in_unparsable_area(o, _hr->parsable_bottom())) {\n+      if (!_hr->is_in_parsable_area(o)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -716,1 +716,0 @@\n-  _preserved_marks_set.assert_empty();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  _buffers._entry_count += buffer_size() - node->index();\n+  _buffers._entry_count += buffer_capacity() - node->index();\n@@ -133,1 +133,1 @@\n-  Atomic::add(&_entry_count, buffer_size() - node->index());\n+  Atomic::add(&_entry_count, buffer_capacity() - node->index());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1265,1 +1265,1 @@\n-    size_t buffer_size = dcqs.buffer_size();\n+    size_t buffer_capacity = dcqs.buffer_capacity();\n@@ -1267,1 +1267,1 @@\n-      cl->apply_to_buffer(node, buffer_size, worker_id);\n+      cl->apply_to_buffer(node, buffer_capacity, worker_id);\n@@ -1570,1 +1570,1 @@\n-  size_t index = dcqs.buffer_size() - 1;\n+  size_t index = dcqs.buffer_capacity() - 1;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-    const size_t buffer_size = _rdcqs->buffer_size();\n+    const size_t buffer_capacity = _rdcqs->buffer_capacity();\n@@ -406,1 +406,1 @@\n-        cl.apply_to_buffer(node, buffer_size, worker_id);\n+        cl.apply_to_buffer(node, buffer_capacity, worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -170,2 +170,2 @@\n-    size_t _buffer_size;\n-    Verifier() : _buffer_size(G1BarrierSet::dirty_card_queue_set().buffer_size()) {}\n+    size_t _buffer_capacity;\n+    Verifier() : _buffer_capacity(G1BarrierSet::dirty_card_queue_set().buffer_capacity()) {}\n@@ -174,1 +174,1 @@\n-      assert((queue.buffer() == nullptr) || (queue.index() == _buffer_size),\n+      assert((queue.buffer() == nullptr) || (queue.index() == _buffer_capacity),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPreEvacuateTasks.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -185,4 +185,0 @@\n-  \/\/ Returns whether the given object is dead based on the given parsable_bottom (pb).\n-  \/\/ For an object to be considered dead it must be below pb and scrubbed.\n-  bool is_obj_dead(oop obj, HeapWord* pb) const;\n-\n@@ -527,3 +523,3 @@\n-  \/\/ Determine if an object is in the parsable or the to-be-scrubbed area.\n-  inline static bool obj_in_parsable_area(const HeapWord* addr, HeapWord* pb);\n-  inline static bool obj_in_unparsable_area(oop obj, HeapWord* pb);\n+  \/\/ Determine if an address is in the parsable or the to-be-scrubbed area.\n+  inline        bool is_in_parsable_area(const void* const addr) const;\n+  inline static bool is_in_parsable_area(const void* const addr, const void* const pb);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -112,2 +112,2 @@\n-inline bool HeapRegion::obj_in_unparsable_area(oop obj, HeapWord* const pb) {\n-  return !HeapRegion::obj_in_parsable_area(cast_from_oop<HeapWord*>(obj), pb);\n+inline bool HeapRegion::is_in_parsable_area(const void* const addr) const {\n+  return is_in_parsable_area(addr, parsable_bottom());\n@@ -116,1 +116,1 @@\n-inline bool HeapRegion::obj_in_parsable_area(const HeapWord* addr, HeapWord* const pb) {\n+inline bool HeapRegion::is_in_parsable_area(const void* const addr, const void* const pb) {\n@@ -128,1 +128,1 @@\n-  if (obj_in_parsable_area(p, pb)) {\n+  if (is_in_parsable_area(p, pb)) {\n@@ -143,13 +143,0 @@\n-inline bool HeapRegion::is_obj_dead(const oop obj, HeapWord* const pb) const {\n-  assert(is_in_reserved(obj), \"Object \" PTR_FORMAT \" must be in region\", p2i(obj));\n-\n-  \/\/ From Remark until a region has been concurrently scrubbed, parts of the\n-  \/\/ region is not guaranteed to be parsable. Use the bitmap for liveness.\n-  if (obj_in_unparsable_area(obj, pb)) {\n-    return !is_marked_in_bitmap(obj);\n-  }\n-\n-  \/\/ This object is in the parsable part of the heap, live unless scrubbed.\n-  return G1CollectedHeap::is_obj_filler(obj);\n-}\n-\n@@ -453,1 +440,1 @@\n-  if (!obj_in_parsable_area(start, pb)) {\n+  if (!is_in_parsable_area(start, pb)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -833,4 +833,0 @@\n-    \/\/ A successful scavenge should restart the GC time limit count which is\n-    \/\/ for full GC's.\n-    AdaptiveSizePolicy* size_policy = heap->size_policy();\n-    size_policy->reset_gc_overhead_limit_count();\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"gc\/shared\/preservedMarks.inline.hpp\"\n@@ -143,0 +144,2 @@\n+\n+  _preserved_overflow_stack_set.init(1);\n@@ -150,1 +153,1 @@\n-  _preserved_overflow_stack.clear(true);\n+  _preserved_overflow_stack_set.reclaim();\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-Stack<PreservedMark, mtGC>    MarkSweep::_preserved_overflow_stack;\n+PreservedMarksSet       MarkSweep::_preserved_overflow_stack_set(false \/* in_c_heap *\/);\n@@ -145,8 +145,0 @@\n-void PreservedMark::adjust_pointer() {\n-  MarkSweep::adjust_pointer(&_obj);\n-}\n-\n-void PreservedMark::restore() {\n-  _obj->set_mark(_mark);\n-}\n-\n@@ -164,1 +156,1 @@\n-    _preserved_overflow_stack.push(PreservedMark(obj, mark));\n+    _preserved_overflow_stack_set.get()->push_always(obj, mark);\n@@ -208,1 +200,1 @@\n-    _preserved_marks[i].adjust_pointer();\n+    PreservedMarks::adjust_preserved_mark(_preserved_marks + i);\n@@ -212,5 +204,1 @@\n-  StackIterator<PreservedMark, mtGC> iter(_preserved_overflow_stack);\n-  while (!iter.is_empty()) {\n-    PreservedMark* p = iter.next_addr();\n-    p->adjust_pointer();\n-  }\n+  _preserved_overflow_stack_set.get()->adjust_during_full_gc();\n@@ -220,1 +208,1 @@\n-  log_trace(gc)(\"Restoring \" SIZE_FORMAT \" marks\", _preserved_count + _preserved_overflow_stack.size());\n+  log_trace(gc)(\"Restoring \" SIZE_FORMAT \" marks\", _preserved_count + _preserved_overflow_stack_set.get()->size());\n@@ -224,1 +212,1 @@\n-    _preserved_marks[i].restore();\n+    _preserved_marks[i].set_mark();\n@@ -228,4 +216,1 @@\n-  while (!_preserved_overflow_stack.is_empty()) {\n-    PreservedMark p = _preserved_overflow_stack.pop();\n-    p.restore();\n-  }\n+  _preserved_overflow_stack_set.restore(nullptr);\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/preservedMarks.inline.hpp\"\n@@ -102,1 +103,1 @@\n-  static Stack<PreservedMark, mtGC>      _preserved_overflow_stack;\n+  static PreservedMarksSet               _preserved_overflow_stack_set;\n@@ -189,11 +190,0 @@\n-class PreservedMark {\n-private:\n-  oop _obj;\n-  markWord _mark;\n-\n-public:\n-  PreservedMark(oop obj, markWord mark) : _obj(obj), _mark(mark) {}\n-  void adjust_pointer();\n-  void restore();\n-};\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-  _print_gc_overhead_limit_would_be_exceeded(false),\n","filename":"src\/hotspot\/share\/gc\/shared\/gcOverheadChecker.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,3 +45,0 @@\n-  \/\/ Use for diagnostics only.  If UseGCOverheadLimit is false,\n-  \/\/ this variable is still set.\n-  bool _print_gc_overhead_limit_would_be_exceeded;\n","filename":"src\/hotspot\/share\/gc\/shared\/gcOverheadChecker.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -98,2 +98,1 @@\n-  _soft_ref_gen_policy(),\n-  _size_policy(nullptr),\n+  _soft_ref_policy(),\n@@ -142,11 +141,0 @@\n-void GenCollectedHeap::initialize_size_policy(size_t init_eden_size,\n-                                              size_t init_promo_size,\n-                                              size_t init_survivor_size) {\n-  const double max_gc_pause_sec = ((double) MaxGCPauseMillis) \/ 1000.0;\n-  _size_policy = new AdaptiveSizePolicy(init_eden_size,\n-                                        init_promo_size,\n-                                        init_survivor_size,\n-                                        max_gc_pause_sec,\n-                                        GCTimeRatio);\n-}\n-\n@@ -197,4 +185,0 @@\n-  initialize_size_policy(def_new_gen->eden()->capacity(),\n-                         _old_gen->capacity(),\n-                         def_new_gen->from()->capacity());\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"gc\/shared\/softRefGenPolicy.hpp\"\n+#include \"gc\/shared\/softRefPolicy.hpp\"\n@@ -75,4 +75,1 @@\n-  SoftRefGenPolicy _soft_ref_gen_policy;\n-\n-  \/\/ The sizing of the heap is controlled by a sizing policy.\n-  AdaptiveSizePolicy* _size_policy;\n+  SoftRefPolicy _soft_ref_policy;\n@@ -142,4 +139,0 @@\n-  void initialize_size_policy(size_t init_eden_size,\n-                              size_t init_promo_size,\n-                              size_t init_survivor_size);\n-\n@@ -161,6 +154,1 @@\n-  SoftRefPolicy* soft_ref_policy() override { return &_soft_ref_gen_policy; }\n-\n-  \/\/ Adaptive size policy\n-  virtual AdaptiveSizePolicy* size_policy() {\n-    return _size_policy;\n-  }\n+  SoftRefPolicy* soft_ref_policy() override { return &_soft_ref_policy; }\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    const OopAndMarkWord elem = _stack.pop();\n+    const PreservedMark elem = _stack.pop();\n@@ -43,0 +43,7 @@\n+void PreservedMarks::adjust_preserved_mark(PreservedMark* elem) {\n+  oop obj = elem->get_oop();\n+  if (obj->is_forwarded()) {\n+    elem->set_oop(obj->forwardee());\n+  }\n+}\n+\n@@ -44,1 +51,1 @@\n-  StackIterator<OopAndMarkWord, mtGC> iter(_stack);\n+  StackIterator<PreservedMark, mtGC> iter(_stack);\n@@ -46,6 +53,2 @@\n-    OopAndMarkWord* elem = iter.next_addr();\n-\n-    oop obj = elem->get_oop();\n-    if (obj->is_forwarded()) {\n-      elem->set_oop(obj->forwardee());\n-    }\n+    PreservedMark* elem = iter.next_addr();\n+    adjust_preserved_mark(elem);\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -37,6 +37,4 @@\n-class PreservedMarks {\n-private:\n-  class OopAndMarkWord {\n-  private:\n-    oop _o;\n-    markWord _m;\n+class PreservedMark {\n+ private:\n+  oop _o;\n+  markWord _m;\n@@ -44,2 +42,7 @@\n-  public:\n-    OopAndMarkWord(oop obj, markWord m) : _o(obj), _m(m) { }\n+ public:\n+  PreservedMark(oop obj, markWord m) : _o(obj), _m(m) { }\n+\n+  oop get_oop() { return _o; }\n+  inline void set_mark() const;\n+  void set_oop(oop obj) { _o = obj; }\n+};\n@@ -47,5 +50,3 @@\n-    oop get_oop() { return _o; }\n-    inline void set_mark() const;\n-    void set_oop(oop obj) { _o = obj; }\n-  };\n-  typedef Stack<OopAndMarkWord, mtGC> OopAndMarkWordStack;\n+class PreservedMarks {\n+private:\n+  typedef Stack<PreservedMark, mtGC> PreservedMarkStack;\n@@ -53,1 +54,1 @@\n-  OopAndMarkWordStack _stack;\n+  PreservedMarkStack _stack;\n@@ -64,0 +65,5 @@\n+\n+  \/\/ Adjust the preserved mark according to its\n+  \/\/ forwarding location stored in the mark.\n+  static void adjust_preserved_mark(PreservedMark* elem);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.hpp","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    OopAndMarkWord elem(obj, m);\n+    PreservedMark elem(obj, m);\n@@ -47,1 +47,1 @@\n-  OopAndMarkWord elem(obj, m);\n+  PreservedMark elem(obj, m);\n@@ -52,1 +52,1 @@\n-    : _stack(OopAndMarkWordStack::default_segment_size(),\n+    : _stack(PreservedMarkStack::default_segment_size(),\n@@ -59,1 +59,1 @@\n-void PreservedMarks::OopAndMarkWord::set_mark() const {\n+void PreservedMark::set_mark() const {\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  _capacity_in_bytes(index_to_byte_index(qset->buffer_size())),\n+  _capacity_in_bytes(index_to_byte_index(qset->buffer_capacity())),\n@@ -41,1 +41,1 @@\n-BufferNode::AllocatorConfig::AllocatorConfig(size_t size) : _buffer_size(size) {}\n+BufferNode::AllocatorConfig::AllocatorConfig(size_t size) : _buffer_capacity(size) {}\n@@ -44,1 +44,1 @@\n-  size_t byte_size = _buffer_size * sizeof(void*);\n+  size_t byte_size = _buffer_capacity * sizeof(void*);\n@@ -53,2 +53,2 @@\n-BufferNode::Allocator::Allocator(const char* name, size_t buffer_size) :\n-  _config(buffer_size),\n+BufferNode::Allocator::Allocator(const char* name, size_t buffer_capacity) :\n+  _config(buffer_capacity),\n@@ -83,1 +83,1 @@\n-    queue.set_index(buffer_size());\n+    queue.set_index(buffer_capacity());\n@@ -94,1 +94,1 @@\n-    if (index == buffer_size()) {\n+    if (index == buffer_capacity()) {\n@@ -132,1 +132,1 @@\n-  queue.set_index(buffer_size());\n+  queue.set_index(buffer_capacity());\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-  const size_t _buffer_size;\n+  const size_t _buffer_capacity;\n@@ -178,1 +178,1 @@\n-  size_t buffer_size() const { return _buffer_size; }\n+  size_t buffer_capacity() const { return _buffer_capacity; }\n@@ -190,1 +190,1 @@\n-  Allocator(const char* name, size_t buffer_size);\n+  Allocator(const char* name, size_t buffer_capacity);\n@@ -193,1 +193,1 @@\n-  size_t buffer_size() const { return _config.buffer_size(); }\n+  size_t buffer_capacity() const { return _config.buffer_capacity(); }\n@@ -239,1 +239,1 @@\n-  \/\/ Return the buffer for a BufferNode of size buffer_size().\n+  \/\/ Return the buffer for a BufferNode of size buffer_capacity().\n@@ -243,1 +243,1 @@\n-  \/\/ to have been allocated with a size of buffer_size().\n+  \/\/ to have been allocated with a size of buffer_capacity().\n@@ -252,2 +252,2 @@\n-  size_t buffer_size() const {\n-    return _allocator->buffer_size();\n+  size_t buffer_capacity() const {\n+    return _allocator->buffer_capacity();\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-  size_t size = buffer_size();\n+  size_t size = buffer_capacity();\n@@ -197,1 +197,1 @@\n-        assert(!_active || queue.index() == _qset->buffer_size(),\n+        assert(!_active || queue.index() == _qset->buffer_capacity(),\n@@ -199,1 +199,1 @@\n-        queue.set_index(_qset->buffer_size());\n+        queue.set_index(_qset->buffer_capacity());\n@@ -212,1 +212,1 @@\n-    size_t size = buffer_size();\n+    size_t size = buffer_capacity();\n@@ -258,1 +258,1 @@\n-  assert(threshold <= buffer_size(),\n+  assert(threshold <= buffer_capacity(),\n@@ -260,1 +260,1 @@\n-         threshold, buffer_size());\n+         threshold, buffer_capacity());\n@@ -313,1 +313,1 @@\n-    print_satb_buffer(buffer, buf, nd->index(), buffer_size());\n+    print_satb_buffer(buffer, buf, nd->index(), buffer_capacity());\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-  void** dst = &buf[buffer_size()];\n+  void** dst = &buf[buffer_capacity()];\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/shared\/adaptiveSizePolicy.hpp\"\n-#include \"gc\/shared\/genCollectedHeap.hpp\"\n-#include \"gc\/shared\/softRefGenPolicy.hpp\"\n-\n-void SoftRefGenPolicy::cleared_all_soft_refs() {\n-  \/\/ If near gc overhear limit, continue to clear SoftRefs.  SoftRefs may\n-  \/\/ have been cleared in the last collection but if the gc overhear\n-  \/\/ limit continues to be near, SoftRefs should still be cleared.\n-  AdaptiveSizePolicy* size_policy = GenCollectedHeap::heap()->size_policy();\n-  if (size_policy != nullptr) {\n-    set_should_clear_all_soft_refs(size_policy->gc_overhead_limit_near());\n-  }\n-\n-  SoftRefPolicy::cleared_all_soft_refs();\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/softRefGenPolicy.cpp","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_SOFTREFGENPOLICY_HPP\n-#define SHARE_GC_SHARED_SOFTREFGENPOLICY_HPP\n-\n-#include \"gc\/shared\/softRefPolicy.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-class AdaptiveSizePolicy;\n-\n-class SoftRefGenPolicy : public SoftRefPolicy {\n-public:\n-  virtual void cleared_all_soft_refs();\n-};\n-\n-#endif \/\/ SHARE_GC_SHARED_SOFTREFGENPOLICY_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/softRefGenPolicy.hpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -48,6 +48,6 @@\n-  if (StringDedup::is_below_threshold_age(obj->age())) {\n-    const markWord mark = obj->mark();\n-    \/\/ Having\/had displaced header, too risk to deal with them, skip\n-    if (mark == markWord::INFLATING() || mark.has_displaced_mark_helper()) {\n-      return false;\n-    }\n+  const markWord mark = obj->mark();\n+\n+  \/\/ Having\/had displaced header, too risky to deal with them, skip\n+  if (mark == markWord::INFLATING() || mark.has_displaced_mark_helper()) {\n+    return false;\n+  }\n@@ -55,1 +55,2 @@\n-    \/\/ Increase string age and enqueue it when it rearches age threshold\n+  if (StringDedup::is_below_threshold_age(mark.age())) {\n+    \/\/ Increase string age and enqueue it when it reaches age threshold\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahStringDedup.inline.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -286,2 +286,2 @@\n-  const zaddress addr = ZOffset::address(offset);\n-  MemTracker::record_virtual_memory_commit((void*)untype(addr), size, CALLER_PC);\n+  const uintptr_t addr = ZAddressHeapBase + untype(offset);\n+  MemTracker::record_virtual_memory_commit((void*)addr, size, CALLER_PC);\n@@ -292,1 +292,1 @@\n-    const zaddress addr = ZOffset::address(offset);\n+    const uintptr_t addr = ZAddressHeapBase + untype(offset);\n@@ -294,1 +294,1 @@\n-    tracker.record((address)untype(addr), size);\n+    tracker.record((address)addr, size);\n","filename":"src\/hotspot\/share\/gc\/z\/zPhysicalMemory.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-#include \"oops\/constantPool.hpp\"\n+#include \"oops\/constantPool.inline.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/constantPool.inline.hpp\"\n@@ -39,0 +40,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bootstrapInfo.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+class ResolvedIndyEntry;\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -305,4 +306,10 @@\n-  assert(ConstantPool::is_invokedynamic_index(i), \"not secondary index?\");\n-  i = ConstantPool::decode_invokedynamic_index(i) + ConstantPool::CPCACHE_INDEX_TAG;\n-\n-  return check_cp_cache_index(i, cp_index, st);\n+  ConstantPool* constants = _current_method->constants();\n+  if (constants->cache() == nullptr) {\n+    cp_index = i; \/\/ TODO: This is wrong on little-endian. See JDK-8309811.\n+  } else {\n+    assert(ConstantPool::is_invokedynamic_index(i), \"must be\");\n+    int indy_index = ConstantPool::decode_invokedynamic_index(i);\n+    ResolvedIndyEntry* indy_entry = constants->resolved_indy_entry_at(indy_index);\n+    cp_index = indy_entry->constant_pool_index();\n+  }\n+  return true;\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1465,1 +1465,1 @@\n-      vmClasses::reflect_NativeConstructorAccessorImpl_klass()) {\n+      vmClasses::reflect_DirectConstructorHandleAccessor_NativeAccessor_klass()) {\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-#include \"oops\/constantPool.hpp\"\n+#include \"oops\/constantPool.inline.hpp\"\n@@ -51,0 +51,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -1202,1 +1203,2 @@\n-    \/\/ Disable verification for the dynamically-generated reflection bytecodes.\n+    \/\/ Disable verification for the dynamically-generated reflection bytecodes\n+    \/\/ for serialization constructor accessor.\n@@ -1204,1 +1206,1 @@\n-                        vmClasses::reflect_MagicAccessorImpl_klass());\n+                        vmClasses::reflect_SerializationConstructorAccessorImpl_klass());\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -341,2 +341,4 @@\n-typedef Content<JfrStringPool, &JfrStringPool::write> StringPool;\n-typedef WriteCheckpointEvent<StringPool> WriteStringPool;\n+typedef Content<JfrStringPool, &JfrStringPool::flush> FlushStringPoolFunctor;\n+typedef Content<JfrStringPool, &JfrStringPool::write> WriteStringPoolFunctor;\n+typedef WriteCheckpointEvent<FlushStringPoolFunctor> FlushStringPool;\n+typedef WriteCheckpointEvent<WriteStringPoolFunctor> WriteStringPool;\n@@ -345,3 +347,3 @@\n-  StringPool sp(string_pool);\n-  WriteStringPool wsp(chunkwriter, sp, TYPE_STRING);\n-  return invoke(wsp);\n+  FlushStringPoolFunctor fspf(string_pool);\n+  FlushStringPool fsp(chunkwriter, fspf, TYPE_STRING);\n+  return invoke(fsp);\n@@ -351,2 +353,2 @@\n-  StringPool sp(string_pool);\n-  WriteStringPool wsp(chunkwriter, sp, TYPE_STRING);\n+  WriteStringPoolFunctor wspf(string_pool);\n+  WriteStringPool wsp(chunkwriter, wspf, TYPE_STRING);\n@@ -464,1 +466,0 @@\n-  _string_pool.clear();\n@@ -478,1 +479,0 @@\n-  _string_pool.clear();\n@@ -486,0 +486,1 @@\n+  _string_pool.clear();\n@@ -570,3 +571,0 @@\n-  if (_string_pool.is_modified()) {\n-    write_stringpool(_string_pool, _chunkwriter);\n-  }\n@@ -590,3 +588,0 @@\n-  if (_string_pool.is_modified()) {\n-    write_stringpool(_string_pool, _chunkwriter);\n-  }\n@@ -606,0 +601,1 @@\n+  write_stringpool(_string_pool, _chunkwriter);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -211,0 +211,7 @@\n+template <typename T>\n+class ReinitializationOp {\n+ public:\n+  typedef T Type;\n+  bool process(Type* t);\n+};\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -178,0 +178,9 @@\n+template <typename T>\n+bool ReinitializationOp<T>::process(T* t) {\n+  assert(t != nullptr, \"invariant\");\n+  assert(t->identity() != nullptr, \"invariant\");\n+  t->reinitialize();\n+  t->release();\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.inline.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -80,3 +80,3 @@\n-                                               string_pool_cache_count, \/\/ cache limit\n-                                               string_pool_cache_count, \/\/ cache preallocate count\n-                                               false, \/\/ preallocate_to_free_list (== preallocate directly to live list)\n+                                               0,\n+                                               0, \/\/ cache preallocate count\n+                                               false,\n@@ -84,0 +84,7 @@\n+\n+  \/\/ preallocate buffer count to each of the epoch live lists\n+  for (size_t i = 0; i < string_pool_cache_count * 2; ++i) {\n+    Buffer* const buffer = mspace_allocate(string_pool_buffer_size, _mspace);\n+    _mspace->add_to_live_list(buffer, i % 2 == 0);\n+  }\n+  assert(_mspace->free_list_is_empty(), \"invariant\");\n@@ -98,5 +105,1 @@\n-  if (buffer->transient()) {\n-    buffer->set_retired();\n-  } else {\n-    buffer->release();\n-  }\n+  buffer->release();\n@@ -183,0 +186,1 @@\n+typedef ReinitializationOp<JfrStringPoolBuffer> ReinitializationOperation;\n@@ -185,0 +189,1 @@\n+typedef CompositeOperation<ExclusiveWriteOperation, ReinitializationOperation> WriteReinitializeOperation;\n@@ -192,1 +197,1 @@\n-  ReleaseOperation ro(_mspace, _mspace->live_list());\n+  ReleaseOperation ro(_mspace, _mspace->live_list(true)); \/\/ previous epoch list\n@@ -195,1 +200,13 @@\n-  process_live_list(wro, _mspace);\n+  process_live_list(wro, _mspace, true); \/\/ previous epoch list\n+  return wo.processed();\n+}\n+\n+size_t JfrStringPool::flush() {\n+  Thread* const thread = Thread::current();\n+  WriteOperation wo(_chunkwriter, thread);\n+  ExclusiveWriteOperation ewo(wo);\n+  ReinitializationOperation rio;\n+  WriteReinitializeOperation wro(&ewo, &rio);\n+  assert(_mspace->free_list_is_empty(), \"invariant\");\n+  assert(_mspace->live_list_is_nonempty(), \"invariant\");\n+  process_live_list(wro, _mspace); \/\/ current epoch list\n@@ -203,1 +220,1 @@\n-  ReleaseOperation ro(_mspace, _mspace->live_list());\n+  ReleaseOperation ro(_mspace, _mspace->live_list(true)); \/\/ previous epoch list\n@@ -206,1 +223,1 @@\n-  process_live_list(discard_op, _mspace);\n+  process_live_list(discard_op, _mspace, true); \/\/ previous epoch list\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.cpp","additions":29,"deletions":12,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-typedef JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer> > JfrStringPoolMspace;\n+typedef JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer>, JfrLinkedList<JfrStringPoolBuffer>, true > JfrStringPoolMspace;\n@@ -48,1 +48,0 @@\n-  size_t write();\n@@ -50,0 +49,3 @@\n+  size_t flush();\n+  size_t write();\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"runtime\/fieldDescriptor.inline.hpp\"\n@@ -48,3 +49,0 @@\n-jbyte* JVMCIEnv::_serialized_saved_properties = nullptr;\n-int JVMCIEnv::_serialized_saved_properties_len = 0;\n-\n@@ -120,70 +118,0 @@\n-jbyte* JVMCIEnv::get_serialized_saved_properties(int& props_len, TRAPS) {\n-  jbyte* props = _serialized_saved_properties;\n-  if (props == nullptr) {\n-    \/\/ load VMSupport\n-    Symbol* klass = vmSymbols::jdk_internal_vm_VMSupport();\n-    Klass* k = SystemDictionary::resolve_or_fail(klass, true, CHECK_NULL);\n-\n-    InstanceKlass* ik = InstanceKlass::cast(k);\n-    if (ik->should_be_initialized()) {\n-      ik->initialize(CHECK_NULL);\n-    }\n-\n-    \/\/ invoke the serializeSavedPropertiesToByteArray method\n-    JavaValue result(T_OBJECT);\n-    JavaCallArguments args;\n-\n-    Symbol* signature = vmSymbols::void_byte_array_signature();\n-    JavaCalls::call_static(&result,\n-                           ik,\n-                           vmSymbols::serializeSavedPropertiesToByteArray_name(),\n-                           signature,\n-                           &args,\n-                           CHECK_NULL);\n-\n-    oop res = result.get_oop();\n-    assert(res->is_typeArray(), \"must be\");\n-    assert(TypeArrayKlass::cast(res->klass())->element_type() == T_BYTE, \"must be\");\n-    typeArrayOop ba = typeArrayOop(res);\n-    props_len = ba->length();\n-\n-    \/\/ Copy serialized saved properties from HotSpot object into C heap\n-    props = NEW_C_HEAP_ARRAY(jbyte, props_len, mtJVMCI);\n-    memcpy(props, ba->byte_at_addr(0), props_len);\n-\n-    _serialized_saved_properties_len = props_len;\n-    _serialized_saved_properties = props;\n-  } else {\n-    props_len = _serialized_saved_properties_len;\n-  }\n-  return props;\n-}\n-\n-void JVMCIEnv::copy_saved_properties(jbyte* properties, int properties_len, JVMCI_TRAPS) {\n-  assert(!is_hotspot(), \"can only copy saved properties from HotSpot to native image\");\n-  JavaThread* thread = JavaThread::current(); \/\/ For exception macros.\n-\n-  \/\/ Copy native buffer into shared library object\n-  JVMCIPrimitiveArray buf = new_byteArray(properties_len, this);\n-  if (has_pending_exception()) {\n-    _runtime->fatal_exception(JVMCIENV, \"Error in copy_saved_properties\");\n-  }\n-  copy_bytes_from(properties, buf, 0, properties_len);\n-  if (has_pending_exception()) {\n-    _runtime->fatal_exception(JVMCIENV, \"Error in copy_saved_properties\");\n-  }\n-\n-  \/\/ Initialize saved properties in shared library\n-  jclass servicesClass = JNIJVMCI::Services::clazz();\n-  jmethodID initializeSavedProperties = JNIJVMCI::Services::initializeSavedProperties_method();\n-  bool exception = false;\n-  {\n-    JNIAccessMark jni(this, thread);\n-    jni()->CallStaticVoidMethod(servicesClass, initializeSavedProperties, buf.as_jobject());\n-    exception = jni()->ExceptionCheck();\n-  }\n-  if (exception) {\n-    _runtime->fatal_exception(JVMCIENV, \"Error calling jdk.vm.ci.services.Services.initializeSavedProperties\");\n-  }\n-}\n-\n@@ -1940,1 +1868,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args)\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName)\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":2,"deletions":74,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -186,6 +186,0 @@\n-  \/\/ Used by copy_saved_properties() to avoid OutOfMemoryErrors when\n-  \/\/ initializing a libjvmci runtime in low HotSpot heap conditions.\n-  \/\/ Must hold JVMCI_lock when initializing.\n-  static jbyte* _serialized_saved_properties;\n-  static int _serialized_saved_properties_len;\n-\n@@ -240,8 +234,0 @@\n-  \/\/ Gets the serialized saved properties from the HotSpot heap.\n-  \/\/ The length of the returned array is saved in `len`.\n-  jbyte* get_serialized_saved_properties(int& len, TRAPS);\n-\n-  \/\/ Initializes Services.savedProperties in the shared library from the given\n-  \/\/ properties in the format produced by `get_serialized_saved_properties`.\n-  void copy_saved_properties(jbyte* properties, int properties_len, JVMCI_TRAPS);\n-\n@@ -512,1 +498,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args)\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName)\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args)\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName)\n@@ -157,1 +157,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args) \\\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName) \\\n@@ -257,1 +257,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args)\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName)\n@@ -396,1 +396,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args) \\\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName) \\\n@@ -409,0 +409,1 @@\n+  jlong    JNICALL JVM_ReadSystemPropertiesInfo(JNIEnv *env, jclass c, jintArray offsets_handle);\n@@ -568,1 +569,2 @@\n-    JNINativeMethod JVMCI_nmethods[] = {{ CC\"initializeRuntime\",   CC\"()Ljdk\/vm\/ci\/runtime\/JVMCIRuntime;\", FN_PTR(JVM_GetJVMCIRuntime) }};\n+    JNINativeMethod JVMCI_nmethods[] = {{ CC\"initializeRuntime\", CC\"()Ljdk\/vm\/ci\/runtime\/JVMCIRuntime;\", FN_PTR(JVM_GetJVMCIRuntime) }};\n+    JNINativeMethod Services_nmethods[] = {{ CC\"readSystemPropertiesInfo\", CC\"([I)J\", FN_PTR(JVM_ReadSystemPropertiesInfo) }};\n@@ -572,0 +574,1 @@\n+    register_natives_for_class(env, Services::clazz(), \"jdk\/vm\/ci\/services\/Services\", Services_nmethods, 1);\n@@ -586,1 +589,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args)\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName)\n@@ -692,1 +695,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args) \\\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName) \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -59,3 +59,0 @@\n-  start_class(Services, jdk_vm_ci_services_Services)                                                          \\\n-    jvmci_method(CallStaticVoidMethod, GetStaticMethodID, call_static, void, Services, initializeSavedProperties, byte_array_void_signature, (JVMCIObject serializedProperties)) \\\n-  end_class                                                                                                   \\\n@@ -163,1 +160,1 @@\n-    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, JavaConstant, forPrimitive, forPrimitive_signature, (JVMCIObject kind, jlong value, JVMCI_TRAPS)) \\\n+    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, JavaConstant, forPrimitive, forPrimitive_signature) \\\n@@ -203,8 +200,8 @@\n-    jvmci_method(CallNonvirtualObjectMethod, GetMethodID, call_special, JVMCIObject, HotSpotJVMCIRuntime, compileMethod, compileMethod_signature, (JVMCIObject runtime, JVMCIObject method, int entry_bci, jlong env, int id)) \\\n-    jvmci_method(CallNonvirtualObjectMethod, GetMethodID, call_special, JVMCIObject, HotSpotJVMCIRuntime, isGCSupported, int_bool_signature, (JVMCIObject runtime, int gcIdentifier)) \\\n-    jvmci_method(CallNonvirtualVoidMethod, GetMethodID, call_special, void, HotSpotJVMCIRuntime, bootstrapFinished, void_method_signature, (JVMCIObject runtime, JVMCI_TRAPS)) \\\n-    jvmci_method(CallNonvirtualVoidMethod, GetMethodID, call_special, void, HotSpotJVMCIRuntime, shutdown, void_method_signature, (JVMCIObject runtime)) \\\n-    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, HotSpotJVMCIRuntime, runtime, runtime_signature, (JVMCI_TRAPS)) \\\n-    jvmci_method(CallObjectMethod, GetMethodID, call_virtual, JVMCIObject, HotSpotJVMCIRuntime, getCompiler, getCompiler_signature, (JVMCIObject runtime, JVMCI_TRAPS)) \\\n-    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, HotSpotJVMCIRuntime, exceptionToString, exceptionToString_signature, (JVMCIObject object, bool toString, bool stackTrace, JVMCI_TRAPS)) \\\n-    jvmci_method(CallStaticVoidMethod, GetStaticMethodID, call_static, void, HotSpotJVMCIRuntime, postTranslation, object_void_signature, (JVMCIObject object, JVMCI_TRAPS)) \\\n+    jvmci_method(CallNonvirtualObjectMethod, GetMethodID, call_special, JVMCIObject, HotSpotJVMCIRuntime, compileMethod, compileMethod_signature) \\\n+    jvmci_method(CallNonvirtualObjectMethod, GetMethodID, call_special, JVMCIObject, HotSpotJVMCIRuntime, isGCSupported, int_bool_signature) \\\n+    jvmci_method(CallNonvirtualVoidMethod, GetMethodID, call_special, void, HotSpotJVMCIRuntime, bootstrapFinished, void_method_signature) \\\n+    jvmci_method(CallNonvirtualVoidMethod, GetMethodID, call_special, void, HotSpotJVMCIRuntime, shutdown, void_method_signature) \\\n+    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, HotSpotJVMCIRuntime, runtime, runtime_signature) \\\n+    jvmci_method(CallObjectMethod, GetMethodID, call_virtual, JVMCIObject, HotSpotJVMCIRuntime, getCompiler, getCompiler_signature) \\\n+    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, HotSpotJVMCIRuntime, exceptionToString, exceptionToString_signature) \\\n+    jvmci_method(CallStaticVoidMethod, GetStaticMethodID, call_static, void, HotSpotJVMCIRuntime, postTranslation, object_void_signature) \\\n@@ -217,0 +214,2 @@\n+  start_class(Services, jdk_vm_ci_services_Services)                                                                 \\\n+  end_class                                                                                                   \\\n@@ -218,2 +217,2 @@\n-    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, JVMCI, getRuntime, getRuntime_signature, (JVMCI_TRAPS)) \\\n-    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, JVMCI, initializeRuntime, initializeRuntime_signature, (JVMCI_TRAPS)) \\\n+    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, JVMCI, getRuntime, getRuntime_signature) \\\n+    jvmci_method(CallStaticObjectMethod, GetStaticMethodID, call_static, JVMCIObject, JVMCI, initializeRuntime, initializeRuntime_signature) \\\n@@ -226,1 +225,1 @@\n-    jvmci_method(CallObjectMethod, GetMethodID, call_virtual, JVMCIObject, Class, getName, void_string_signature, (JVMCI_TRAPS)) \\\n+    jvmci_method(CallObjectMethod, GetMethodID, call_virtual, JVMCIObject, Class, getName, void_string_signature) \\\n@@ -229,2 +228,2 @@\n-    jvmci_method(CallStaticIntMethod, GetStaticMethodID, call_static, int, VMSupport, encodeThrowable, encodeThrowable_signature, (JVMCIObject throwable, jlong buffer, int buffer_size)) \\\n-    jvmci_method(CallStaticVoidMethod, GetStaticMethodID, call_static, void, VMSupport, decodeAndThrowThrowable, decodeAndThrowThrowable_signature, (jlong buffer)) \\\n+    jvmci_method(CallStaticIntMethod, GetStaticMethodID, call_static, int, VMSupport, encodeThrowable, encodeThrowable_signature) \\\n+    jvmci_method(CallStaticVoidMethod, GetStaticMethodID, call_static, void, VMSupport, decodeAndThrowThrowable, decodeAndThrowThrowable_signature) \\\n@@ -345,1 +344,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, simpleClassName, methodName, signatureSymbolName, args)\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, simpleClassName, methodName, signatureSymbolName)\n@@ -438,1 +437,1 @@\n-#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName, args) \\\n+#define METHOD(jniCallType, jniGetMethod, hsCallType, returnType, className, methodName, signatureSymbolName)       \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -757,0 +757,15 @@\n+\/\/ private static long Services.readSystemPropertiesInfo(int[] offsets)\n+JVM_ENTRY_NO_ENV(jlong, JVM_ReadSystemPropertiesInfo(JNIEnv *env, jclass c, jintArray offsets_handle))\n+  JNI_JVMCIENV(thread, env);\n+  if (!EnableJVMCI) {\n+    JVMCI_THROW_MSG_0(InternalError, \"JVMCI is not enabled\");\n+  }\n+  JVMCIPrimitiveArray offsets = JVMCIENV->wrap(offsets_handle);\n+  JVMCIENV->put_int_at(offsets, 0, SystemProperty::next_offset_in_bytes());\n+  JVMCIENV->put_int_at(offsets, 1, SystemProperty::key_offset_in_bytes());\n+  JVMCIENV->put_int_at(offsets, 2, PathString::value_offset_in_bytes());\n+\n+  return (jlong) Arguments::system_properties();\n+JVM_END\n+\n+\n@@ -1402,3 +1417,0 @@\n-  int properties_len = 0;\n-  jbyte* properties = nullptr;\n-\n@@ -1467,10 +1479,0 @@\n-\n-    if (!JVMCIENV->is_hotspot()) {\n-      Handle properties_exception;\n-      properties = JVMCIENV->get_serialized_saved_properties(properties_len, THREAD);\n-      if (JVMCIEnv::transfer_pending_exception_to_jni(THREAD, nullptr, JVMCIENV)) {\n-        JVMCI_event_1(\"error initializing system properties for JVMCI runtime %d\", _id);\n-        return;\n-      }\n-      JVMCIENV->copy_saved_properties(properties, properties_len, JVMCI_CHECK);\n-    }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-  template(initializeSavedProperties_name,                        \"initializeSavedProperties\")                                            \\\n","filename":"src\/hotspot\/share\/jvmci\/vmSymbols_jvmci.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,7 +28,0 @@\n-\/\/ Update the reference to point to new_loc.\n-void MetaspaceClosure::Ref::update(address new_loc) const {\n-  log_trace(cds)(\"Ref: [\" PTR_FORMAT \"] -> \" PTR_FORMAT \" => \" PTR_FORMAT,\n-                 p2i(mpp()), p2i(obj()), p2i(new_loc));\n-  *addr() = new_loc;\n-}\n-\n@@ -36,0 +29,6 @@\n+  if (_enclosing_ref != nullptr) {\n+    assert(_nest_level > 0, \"sanity\");\n+    ref->set_enclosing_obj(_enclosing_ref->obj());\n+  } else {\n+    assert(_nest_level == 0, \"sanity\");\n+  }\n@@ -40,1 +39,0 @@\n-    do_pending_ref(ref);\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+    address _enclosing_obj;\n@@ -110,1 +111,0 @@\n-    void* _user_data;\n@@ -115,1 +115,1 @@\n-    Ref(Writability w) : _writability(w), _next(nullptr), _user_data(nullptr) {}\n+    Ref(Writability w) : _writability(w), _enclosing_obj(nullptr), _next(nullptr) {}\n@@ -133,1 +133,7 @@\n-    void update(address new_loc) const;\n+    \/\/ See comments in ArchiveBuilder::remember_embedded_pointer_in_enclosing_obj()\n+    address enclosing_obj() const {\n+      return _enclosing_obj;\n+    }\n+    void set_enclosing_obj(address obj) {\n+      _enclosing_obj = obj;\n+    }\n@@ -136,2 +142,0 @@\n-    void set_user_data(void* data)  { _user_data = data; }\n-    void* user_data()               { return _user_data; }\n@@ -254,0 +258,3 @@\n+  \/\/\n+  \/\/ When we are visting d, the _enclosing_ref is c,\n+  \/\/ When we are visting c, the _enclosing_ref is b, ... and so on.\n@@ -268,20 +275,0 @@\n-  \/\/ enclosing_ref() is used to compute the offset of a field in a C++ class. For example\n-  \/\/ class Foo { intx scala; Bar* ptr; }\n-  \/\/    Foo *f = 0x100;\n-  \/\/ when the f->ptr field is iterated with do_ref() on 64-bit platforms, we will have\n-  \/\/    do_ref(Ref* r) {\n-  \/\/       r->addr() == 0x108;                \/\/ == &f->ptr;\n-  \/\/       enclosing_ref()->obj() == 0x100;   \/\/ == foo\n-  \/\/ So we know that we are iterating upon a field at offset 8 of the object at 0x100.\n-  \/\/\n-  \/\/ Note that if we have stack overflow, do_pending_ref(r) will be called first and\n-  \/\/ do_ref(r) will be called later, for the same r. In this case, enclosing_ref() is valid only\n-  \/\/ when do_pending_ref(r) is called, and will return null when do_ref(r) is called.\n-  Ref* enclosing_ref() const {\n-    return _enclosing_ref;\n-  }\n-\n-  \/\/ This is called when a reference is placed in _pending_refs. Override this\n-  \/\/ function if you're using enclosing_ref(). See notes above.\n-  virtual void do_pending_ref(Ref* ref) {}\n-\n@@ -294,0 +281,2 @@\n+    \/\/ We cannot make stack allocation because the Ref may need to be saved in\n+    \/\/ _pending_refs to avoid overflowing the C call stack\n@@ -311,2 +300,2 @@\n-  \/\/ Hashtable*             h  = ...;  it->push(&h);     => Hashtable is not a subclass of MetaspaceObj\n-  \/\/ Array<Hashtable*>*     a6 = ...;  it->push(&a6);    => Hashtable is not a subclass of MetaspaceObj\n+  \/\/ MemoryPool*            p  = ...;  it->push(&p);     => MemoryPool is not a subclass of MetaspaceObj\n+  \/\/ Array<MemoryPool*>*    a6 = ...;  it->push(&a6);    => MemoryPool is not a subclass of MetaspaceObj\n@@ -336,16 +325,0 @@\n-\n-#if 0\n-  \/\/ Enable this block if you're changing the push(...) methods, to test for types that should be\n-  \/\/ disallowed. Each of the following \"push\" calls should result in a compile-time error.\n-  void test_disallowed_types(MetaspaceClosure* it) {\n-    Hashtable<bool, mtInternal>* h  = nullptr;\n-    it->push(&h);\n-\n-    Array<Hashtable<bool, mtInternal>*>* a6 = nullptr;\n-    it->push(&a6);\n-\n-    Array<int*>* a7 = nullptr;\n-    it->push(&a7);\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.hpp","additions":16,"deletions":43,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -215,0 +215,10 @@\n+\n+void ArrayKlass::cds_print_value_on(outputStream* st) const {\n+  assert(is_klass(), \"must be klass\");\n+  st->print(\"      - array: %s\", internal_name());\n+  if (_higher_dimension != nullptr) {\n+    ArrayKlass* ak = ArrayKlass::cast(higher_dimension());\n+    st->cr();\n+    ak->cds_print_value_on(st);\n+  }\n+}\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -145,0 +145,1 @@\n+  void cds_print_value_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -262,3 +262,1 @@\n-  u2 invokedynamic_bootstrap_ref_index_at(int indy_index) const {\n-    return cache()->resolved_indy_entry_at(decode_invokedynamic_index(indy_index))->constant_pool_index();\n-  }\n+  inline u2 invokedynamic_bootstrap_ref_index_at(int indy_index) const;\n@@ -934,9 +932,3 @@\n-  ResolvedIndyEntry* resolved_indy_entry_at(int index) {\n-    return cache()->resolved_indy_entry_at(index);\n-  }\n-  int resolved_indy_entries_length() {\n-    return cache()->resolved_indy_entries_length();\n-  }\n-  oop resolved_reference_from_indy(int index) {\n-    return resolved_references()->obj_at(cache()->resolved_indy_entry_at(index)->resolved_references_index());\n-  }\n+  inline ResolvedIndyEntry* resolved_indy_entry_at(int index);\n+  inline int resolved_indy_entries_length() const;\n+  inline oop resolved_reference_from_indy(int index) const;\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -44,0 +45,15 @@\n+inline u2 ConstantPool::invokedynamic_bootstrap_ref_index_at(int indy_index) const {\n+  return cache()->resolved_indy_entry_at(decode_invokedynamic_index(indy_index))->constant_pool_index();\n+}\n+\n+inline ResolvedIndyEntry* ConstantPool::resolved_indy_entry_at(int index) {\n+  return cache()->resolved_indy_entry_at(index);\n+}\n+\n+inline int ConstantPool::resolved_indy_entries_length() const {\n+  return cache()->resolved_indy_entries_length();\n+}\n+\n+inline oop ConstantPool::resolved_reference_from_indy(int index) const {\n+  return resolved_references()->obj_at(cache()->resolved_indy_entry_at(index)->resolved_references_index());\n+}\n","filename":"src\/hotspot\/share\/oops\/constantPool.inline.hpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -950,0 +951,6 @@\n+void ConstantPoolCache::print_resolved_indy_entries(outputStream* st)   const {\n+  for (int i = 0; i < _resolved_indy_entries->length(); i++) {\n+    _resolved_indy_entries->at(i).print_on(st);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -134,0 +133,1 @@\n+class ResolvedIndyEntry;\n@@ -456,7 +456,3 @@\n-  ResolvedIndyEntry* resolved_indy_entry_at(int index) const { return _resolved_indy_entries->adr_at(index); }\n-  int resolved_indy_entries_length()                   const { return _resolved_indy_entries->length();      }\n-  void print_resolved_indy_entries(outputStream* st)   const {\n-    for (int i = 0; i < _resolved_indy_entries->length(); i++) {\n-        _resolved_indy_entries->at(i).print_on(st);\n-    }\n-  }\n+  inline ResolvedIndyEntry* resolved_indy_entry_at(int index) const;\n+  inline int resolved_indy_entries_length() const;\n+  void print_resolved_indy_entries(outputStream* st)   const;\n","filename":"src\/hotspot\/share\/oops\/cpCache.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -109,0 +110,7 @@\n+inline ResolvedIndyEntry* ConstantPoolCache::resolved_indy_entry_at(int index) const {\n+  return _resolved_indy_entries->adr_at(index);\n+}\n+\n+inline int ConstantPoolCache::resolved_indy_entries_length() const {\n+  return _resolved_indy_entries->length();\n+}\n","filename":"src\/hotspot\/share\/oops\/cpCache.inline.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1748,0 +1748,15 @@\n+\n+  if (x->Opcode() == Op_Region) {\n+    \/\/ x has not yet been transformed to Loop or LongCountedLoop.\n+    \/\/ This should only happen if we are inside an infinite loop.\n+    \/\/ It happens like this:\n+    \/\/   build_loop_tree -> do not attach infinite loop and nested loops\n+    \/\/   beautify_loops  -> does not transform the infinite and nested loops to LoopNode, because not attached yet\n+    \/\/   build_loop_tree -> find and attach infinite and nested loops\n+    \/\/   counted_loop    -> nested Regions are not yet transformed to LoopNodes, we land here\n+    assert(x->as_Region()->is_in_infinite_subgraph(),\n+           \"x can only be a Region and not Loop if inside infinite loop\");\n+    \/\/ Come back later when Region is transformed to LoopNode\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -748,1 +748,1 @@\n-  \/\/ [0] [ @CallerSensitive public sun.reflect.Reflection.getCallerClass ]\n+  \/\/ [0] [ @CallerSensitive public jdk.internal.reflect.Reflection.getCallerClass ]\n@@ -3378,2 +3378,1 @@\n-      if (!ik->is_subclass_of(vmClasses::reflect_MethodAccessorImpl_klass()) &&\n-          !ik->is_subclass_of(vmClasses::reflect_ConstructorAccessorImpl_klass())) {\n+      if (!ik->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"oops\/constantPool.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -733,1 +733,1 @@\n-JvmtiEnvBase::get_thread_state(oop thread_oop, JavaThread* jt) {\n+JvmtiEnvBase::get_thread_state_base(oop thread_oop, JavaThread* jt) {\n@@ -759,0 +759,24 @@\n+jint\n+JvmtiEnvBase::get_thread_state(oop thread_oop, JavaThread* jt) {\n+  jint state = 0;\n+\n+  if (is_thread_carrying_vthread(jt, thread_oop)) {\n+    state = (jint)java_lang_Thread::get_thread_status(thread_oop);\n+\n+    \/\/ This is for extra safety. Other bits are not expected nor needed.\n+    state &= (JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_INTERRUPTED);\n+\n+    if (jt->is_carrier_thread_suspended()) {\n+      state |= JVMTI_THREAD_STATE_SUSPENDED;\n+    }\n+    \/\/ It's okay for the JVMTI state to be reported as WAITING when waiting\n+    \/\/ for something other than an Object.wait. So, we treat a thread carrying\n+    \/\/ a virtual thread as waiting indefinitely which is not runnable.\n+    \/\/ It is why the RUNNABLE bit is not needed and the WAITING bits are added.\n+    state |= JVMTI_THREAD_STATE_WAITING | JVMTI_THREAD_STATE_WAITING_INDEFINITELY;\n+  } else {\n+    state = get_thread_state_base(thread_oop, jt);\n+  }\n+  return state;\n+}\n+\n@@ -773,1 +797,1 @@\n-    state = get_thread_state(ct_oop, java_thread) & ~filtered_bits;\n+    state = get_thread_state_base(ct_oop, java_thread) & ~filtered_bits;\n@@ -1711,1 +1735,1 @@\n-  bool is_passive_cthread = is_passive_carrier_thread(java_thread, thread_h());\n+  bool is_thread_carrying = is_thread_carrying_vthread(java_thread, thread_h());\n@@ -1717,1 +1741,1 @@\n-        (!is_passive_cthread && java_thread->is_suspended())) {\n+        (!is_thread_carrying && java_thread->is_suspended())) {\n@@ -1728,1 +1752,1 @@\n-  \/\/ An attempt to handshake-suspend a passive carrier thread will result in\n+  \/\/ An attempt to handshake-suspend a thread carrying a virtual thread will result in\n@@ -1731,1 +1755,1 @@\n-  if (!is_passive_cthread) {\n+  if (!is_thread_carrying) {\n@@ -1781,1 +1805,1 @@\n-  bool is_passive_cthread = is_passive_carrier_thread(java_thread, thread_h());\n+  bool is_thread_carrying = is_thread_carrying_vthread(java_thread, thread_h());\n@@ -1786,1 +1810,1 @@\n-        (is_passive_cthread || !java_thread->is_suspended())) {\n+        (is_thread_carrying || !java_thread->is_suspended())) {\n@@ -1793,1 +1817,1 @@\n-  if (!is_passive_cthread) {\n+  if (!is_thread_carrying) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -99,2 +99,2 @@\n-  \/\/ check if thread_oop represents a passive carrier thread\n-  static bool is_passive_carrier_thread(JavaThread* java_thread, oop thread_oop) {\n+  \/\/ check if thread_oop represents a thread carrying a virtual thread\n+  static bool is_thread_carrying_vthread(JavaThread* java_thread, oop thread_oop) {\n@@ -183,1 +183,1 @@\n-  \/\/ A passive carrier thread is not treated as current.\n+  \/\/ A thread carrying a virtual thread is not treated as current.\n@@ -387,1 +387,2 @@\n-  \/\/ get ordinary thread thread state\n+  \/\/ get platform thread state\n+  static jint get_thread_state_base(oop thread_oop, JavaThread* jt);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -213,0 +213,1 @@\n+  jlong    JNICALL JVM_ReadSystemPropertiesInfo(JNIEnv *env, jclass c, jintArray offsets);\n@@ -232,0 +233,1 @@\n+  { CC\"Java_jdk_vm_ci_services_Services_readSystemPropertiesInfo\", nullptr, FN_PTR(JVM_ReadSystemPropertiesInfo)    },\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/classPrinter.hpp\"\n@@ -1451,3 +1452,3 @@\n-#if INCLUDE_G1GC\n-  if (UseG1GC) {\n-    \/\/ Needs to be cleared explicitly for G1\n+#if INCLUDE_G1GC || INCLUDE_SERIALGC\n+  if (UseG1GC || UseSerialGC) {\n+    \/\/ Needs to be cleared explicitly for G1 and Serial GC.\n@@ -1456,1 +1457,1 @@\n-#endif \/\/ INCLUDE_G1GC\n+#endif \/\/ INCLUDE_G1GC || INCLUDE_SERIALGC\n@@ -1990,0 +1991,29 @@\n+WB_ENTRY(jobject, WB_printClasses(JNIEnv* env, jobject wb, jstring class_name_pattern, jint flags))\n+  ThreadToNativeFromVM ttnfv(thread);\n+  const char* c = env->GetStringUTFChars(class_name_pattern, nullptr);\n+  ResourceMark rm;\n+  stringStream st;\n+  {\n+    ThreadInVMfromNative ttvfn(thread); \/\/ back to VM\n+    ClassPrinter::print_classes(c, flags, &st);\n+  }\n+  jstring result = env->NewStringUTF(st.freeze());\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n+  return result;\n+WB_END\n+\n+WB_ENTRY(jobject, WB_printMethods(JNIEnv* env, jobject wb, jstring class_name_pattern, jstring method_pattern, jint flags))\n+  ThreadToNativeFromVM ttnfv(thread);\n+  const char* c = env->GetStringUTFChars(class_name_pattern, nullptr);\n+  const char* m = env->GetStringUTFChars(method_pattern, nullptr);\n+  ResourceMark rm;\n+  stringStream st;\n+  {\n+    ThreadInVMfromNative ttvfn(thread); \/\/ back to VM\n+    ClassPrinter::print_methods(c, m, flags, &st);\n+  }\n+  jstring result = env->NewStringUTF(st.freeze());\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n+  return result;\n+WB_END\n+\n@@ -2836,0 +2866,2 @@\n+  {CC\"printClasses0\",      CC\"(Ljava\/lang\/String;I)Ljava\/lang\/String;\", (void*)&WB_printClasses},\n+  {CC\"printMethods0\",      CC\"(Ljava\/lang\/String;Ljava\/lang\/String;I)Ljava\/lang\/String;\", (void*)&WB_printMethods},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -78,0 +78,3 @@\n+\n+  \/\/ for JVM_ReadSystemPropertiesInfo\n+  static int value_offset_in_bytes()  { return (int)offset_of(PathString, _value);  }\n@@ -140,0 +143,4 @@\n+\n+  \/\/ for JVM_ReadSystemPropertiesInfo\n+  static int key_offset_in_bytes()  { return (int)offset_of(SystemProperty, _key);  }\n+  static int next_offset_in_bytes() { return (int)offset_of(SystemProperty, _next); }\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1295,1 +1295,1 @@\n-  product(intx, MaxJavaStackTraceDepth, 1024,                               \\\n+  product(int, MaxJavaStackTraceDepth, 1024,                                \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-void compilerOracle_init();\n+bool compilerOracle_init();\n@@ -161,1 +161,3 @@\n-  compilerOracle_init();\n+  if (!compilerOracle_init()) {\n+    return JNI_EINVAL;\n+  }\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1011,1 +1011,1 @@\n-                                                 char *buf, int buf_size);\n+                                                 char *buf, int buf_size, address& lastpc);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-                                     char *buf, int buf_size) {\n+                                     char *buf, int buf_size, address& lastpc) {\n","filename":"src\/hotspot\/share\/runtime\/os.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-  \/\/ Allow all accesses from jdk\/internal\/reflect\/MagicAccessorImpl subclasses to\n+  \/\/ Allow all accesses from jdk\/internal\/reflect\/SerializationConstructorAccessorImpl subclasses to\n@@ -463,2 +463,2 @@\n-  if (vmClasses::reflect_MagicAccessorImpl_klass_is_loaded() &&\n-      current_class->is_subclass_of(vmClasses::reflect_MagicAccessorImpl_klass())) {\n+  if (vmClasses::reflect_SerializationConstructorAccessorImpl_klass_is_loaded() &&\n+      current_class->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n@@ -677,1 +677,1 @@\n-  \/\/ Allow all accesses from jdk\/internal\/reflect\/MagicAccessorImpl subclasses to\n+  \/\/ Allow all accesses from jdk\/internal\/reflect\/SerializationConstructorAccessorImpl subclasses to\n@@ -679,1 +679,1 @@\n-  if (current_class->is_subclass_of(vmClasses::reflect_MagicAccessorImpl_klass())) {\n+  if (current_class->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -81,2 +81,0 @@\n-  offset = reflect_UnsafeStaticFieldAccessorImpl::base_offset();\n-  _filtered_fields->append(new FilteredField(vmClasses::reflect_UnsafeStaticFieldAccessorImpl_klass(), offset));\n","filename":"src\/hotspot\/share\/runtime\/reflectionUtils.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,0 +164,1 @@\n+address StubRoutines::_fmod = nullptr;\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -252,0 +252,1 @@\n+  static address _fmod;\n@@ -431,0 +432,1 @@\n+  static address fmod()                { return _fmod; }\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -561,0 +562,1 @@\n+     static_field(StubRoutines,                _fmod,                                         address)                               \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -537,4 +537,1 @@\n-\/\/ - The patterns are matched by StringUtils::is_star_match()\n-\/\/ - class_name_pattern matches Klass::external_name(). E.g., \"java\/lang\/Object\" or \"*ang\/Object\"\n-\/\/ - method_pattern may optionally the signature. E.g., \"wait\", \"wait:()V\" or \"*ai*t:(*)V\"\n-\/\/ - flags must be OR'ed from ClassPrinter::Mode for findclass\/findmethod\n+\/\/   See comments in classPrinter.hpp about the meanings of class_name_pattern, method_pattern and flags.\n@@ -657,1 +654,2 @@\n-  if (os::platform_print_native_stack(tty, nullptr, buf, sizeof(buf))) {\n+  address lastpc = nullptr;\n+  if (os::platform_print_native_stack(tty, nullptr, buf, sizeof(buf), lastpc)) {\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -390,0 +390,21 @@\n+\/\/ Like above, but only try to figure out a short name. Return nullptr if not found.\n+static const char* find_code_name(address pc) {\n+  if (Interpreter::contains(pc)) {\n+    InterpreterCodelet* codelet = Interpreter::codelet_containing(pc);\n+    if (codelet != nullptr) {\n+      return codelet->description();\n+    }\n+  } else {\n+    StubCodeDesc* desc = StubCodeDesc::desc_for(pc);\n+    if (desc != nullptr) {\n+      return desc->name();\n+    } else {\n+      CodeBlob* cb = CodeCache::find_blob(pc);\n+      if (cb != nullptr) {\n+        return cb->name();\n+      }\n+    }\n+  }\n+  return nullptr;\n+}\n+\n@@ -678,0 +699,4 @@\n+  \/\/ Native stack trace may get stuck. We try to handle the last pc if it\n+  \/\/ belongs to VM generated code.\n+  address lastpc = nullptr;\n+\n@@ -966,1 +991,1 @@\n-    if (os::platform_print_native_stack(st, _context, buf, sizeof(buf))) {\n+    if (os::platform_print_native_stack(st, _context, buf, sizeof(buf), lastpc)) {\n@@ -969,0 +994,7 @@\n+      \/\/ Stack walking may get stuck. Try to find the calling code.\n+      if (lastpc != nullptr) {\n+        const char* name = find_code_name(lastpc);\n+        if (name != nullptr) {\n+          st->print_cr(\"The last pc belongs to %s (printed below).\", name);\n+        }\n+      }\n@@ -1073,0 +1105,7 @@\n+      \/\/ Check if a pc was found by native stack trace above.\n+      if (lastpc != nullptr) {\n+        if (print_code(st, _thread, lastpc, true, printed, printed_capacity)) {\n+          printed_len++;\n+        }\n+      }\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -108,1 +109,1 @@\n-    private static class ByteCache {\n+    private static final class ByteCache {\n@@ -111,0 +112,1 @@\n+        @Stable\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -8959,1 +8960,1 @@\n-    private static class CharacterCache {\n+    private static final class CharacterCache {\n@@ -8962,0 +8963,1 @@\n+        @Stable\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -1008,1 +1009,1 @@\n-    private static class IntegerCache {\n+    private static final class IntegerCache {\n@@ -1011,0 +1012,2 @@\n+\n+        @Stable\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -1159,1 +1160,1 @@\n-    private static class LongCache {\n+    private static final class LongCache {\n@@ -1162,0 +1163,1 @@\n+        @Stable\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -234,1 +235,1 @@\n-    private static class ShortCache {\n+    private static final class ShortCache {\n@@ -237,0 +238,1 @@\n+        @Stable\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2014,16 +2014,0 @@\n-    \/**\n-     * Throws {@code UnsupportedOperationException}.\n-     *\n-     * @return     nothing\n-     *\n-     * @deprecated This method was originally designed to count the number of\n-     *             stack frames but the results were never well-defined and it\n-     *             depended on thread-suspension.\n-     *             This method is subject to removal in a future version of Java SE.\n-     * @see        StackWalker\n-     *\/\n-    @Deprecated(since=\"1.2\", forRemoval=true)\n-    public int countStackFrames() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -877,3 +877,3 @@\n-        synchronized (interruptLock) {\n-            boolean oldValue = interrupted;\n-            if (oldValue)\n+        boolean oldValue = interrupted;\n+        if (oldValue) {\n+            synchronized (interruptLock) {\n@@ -881,2 +881,2 @@\n-            carrierThread.clearInterrupt();\n-            return oldValue;\n+                carrierThread.clearInterrupt();\n+            }\n@@ -884,0 +884,1 @@\n+        return oldValue;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * {@code MemorySegment.class}. The size and alignment of an address layout are platform dependent\n+ * {@code MemorySegment.class}. The size and alignment of an address layout are platform-dependent\n@@ -116,3 +116,3 @@\n-     * but without any specified target layout.\n-     * <p>\n-     * This can be useful to compare two address layouts that have different target layouts, but are otherwise equal.\n+     * but with no target layout.\n+     *\n+     * @apiNote This can be useful to compare two address layouts that have different target layouts, but are otherwise equal.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AddressLayout.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n- * <em>after<\/em> the automatic arena (and all the segments allocated by it) become\n+ * <em>after<\/em> the automatic arena (and all the segments allocated by it) becomes\n@@ -205,1 +205,1 @@\n-     * Segments obtained with the returned arena can be\n+     * Segments allocated with the returned arena can be\n@@ -216,1 +216,1 @@\n-     * Obtains the global arena. Segments obtained with the global arena can be\n+     * Obtains the global arena. Segments allocated with the global arena can be\n@@ -230,1 +230,3 @@\n-     * {@return a new confined arena, owned by the current thread}\n+     * {@return a new confined arena} Segments allocated with the confined arena can be\n+     * {@linkplain MemorySegment#isAccessibleBy(Thread) accessed} by the thread that created the arena,\n+     * the arena's <em>owner thread<\/em>.\n@@ -237,1 +239,2 @@\n-     * {@return a new shared arena}\n+     * {@return a new shared arena} Segments allocated with the global arena can be\n+     * {@linkplain MemorySegment#isAccessibleBy(Thread) accessed} by any thread.\n@@ -247,1 +250,1 @@\n-     * allocated off-heap memory region backing the segment, and the address is\n+     * allocated off-heap region of memory backing the segment, and the address is\n@@ -259,1 +262,1 @@\n-     * @param byteSize the size (in bytes) of the off-heap memory block backing the native memory segment.\n+     * @param byteSize the size (in bytes) of the off-heap region of memory backing the native memory segment.\n@@ -262,1 +265,1 @@\n-     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code alignmentBytes <= 0}, or if {@code alignmentBytes}\n+     * @throws IllegalArgumentException if {@code bytesSize < 0}, {@code byteAlignment <= 0}, or if {@code byteAlignment}\n@@ -265,2 +268,2 @@\n-     * @throws WrongThreadException if this arena is confined, and this method is called from a thread {@code T}\n-     * other than the arena owner thread.\n+     * @throws WrongThreadException if this arena is confined, and this method is called from a thread\n+     * other than the arena's owner thread.\n@@ -296,3 +299,3 @@\n-     * @throws WrongThreadException if this arena is confined, and this method is called from a thread {@code T}\n-     * other than the arena owner thread.\n-     * @throws UnsupportedOperationException if this arena does not support explicit closure.\n+     * @throws WrongThreadException if this arena is confined, and this method is called from a thread\n+     * other than the arena's owner thread.\n+     * @throws UnsupportedOperationException if this arena cannot be closed explicitly.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -37,3 +37,3 @@\n- * A function descriptor models the signature of foreign functions. A function descriptor is made up of zero or more\n- * argument layouts and zero or one return layout. A function descriptor is typically used when creating\n- * {@linkplain Linker#downcallHandle(MemorySegment, FunctionDescriptor, Linker.Option...) downcall method handles} or\n+ * A function descriptor models the signature of a foreign function. A function descriptor is made up of zero or more\n+ * argument layouts, and zero or one return layout. A function descriptor is used to create\n+ * {@linkplain Linker#downcallHandle(MemorySegment, FunctionDescriptor, Linker.Option...) downcall method handles} and\n@@ -52,1 +52,1 @@\n-     * {@return the return layout (if any) associated with this function descriptor}\n+     * {@return the return layout (if any) of this function descriptor}\n@@ -57,1 +57,1 @@\n-     * {@return the argument layouts associated with this function descriptor (as an immutable list)}.\n+     * {@return the argument layouts of this function descriptor (as an unmodifiable list)}.\n@@ -62,1 +62,1 @@\n-     * Returns a function descriptor with the given argument layouts appended to the argument layout array\n+     * Returns a function descriptor with the given argument layouts appended to the argument layouts\n@@ -66,1 +66,1 @@\n-     * @return the new function descriptor.\n+     * @return a new function descriptor, with the provided additional argument layouts.\n@@ -75,1 +75,1 @@\n-     * @return the new function descriptor.\n+     * @return a new function descriptor, with the provided additional argument layouts.\n@@ -82,1 +82,1 @@\n-     * Returns a function descriptor with the given memory layout as the new return layout.\n+     * Returns a function descriptor with the provided return layout.\n@@ -85,1 +85,1 @@\n-     * @return the new function descriptor.\n+     * @return a new function descriptor, with the provided return layout.\n@@ -90,3 +90,1 @@\n-     * Returns a function descriptor with the return layout dropped. This is useful to model functions\n-     * which return no values.\n-     * @return the new function descriptor.\n+     * {@return a new function descriptor, with no return layout}\n@@ -99,1 +97,1 @@\n-     * The carrier type of a layout is determined as follows:\n+     * The carrier type of a layout {@code L} is determined as follows:\n@@ -101,2 +99,2 @@\n-     * <li>If the layout is a {@link ValueLayout} the carrier type is determined through {@link ValueLayout#carrier()}.<\/li>\n-     * <li>If the layout is a {@link GroupLayout} or a {@link SequenceLayout}, the carrier type is {@link MemorySegment}.<\/li>\n+     * <li>If {@code L} is a {@link ValueLayout} the carrier type is determined through {@link ValueLayout#carrier()}.<\/li>\n+     * <li>If {@code L} is a {@link GroupLayout} or a {@link SequenceLayout}, the carrier type is {@link MemorySegment}.<\/li>\n@@ -108,3 +106,1 @@\n-     * @return the method type consisting of the carrier types of the layouts in this function descriptor\n-     * @throws IllegalArgumentException if one or more layouts in the function descriptor can not be mapped to carrier\n-     *                                  types (e.g. if they are sequence layouts or padding layouts).\n+     * @return the method type consisting of the carrier types of the layouts in this function descriptor.\n@@ -120,1 +116,1 @@\n-     * @return the new function descriptor.\n+     * @return a new function descriptor with the provided return and argument layouts.\n@@ -129,1 +125,2 @@\n-     * Creates a function descriptor with the given argument layouts and no return layout.\n+     * Creates a function descriptor with the given argument layouts and no return layout.  This is useful to model functions\n+     * that return no values.\n@@ -132,1 +129,1 @@\n-     * @return the new function descriptor.\n+     * @return a new function descriptor with the provided argument layouts.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -32,4 +32,4 @@\n- * A compound layout that aggregates multiple <em>member layouts<\/em>. There are two ways in which member layouts\n- * can be combined: if member layouts are laid out one after the other, the resulting group layout is said to be a <em>struct layout<\/em>\n- * (see {@link MemoryLayout#structLayout(MemoryLayout...)}); conversely, if all member layouts are laid out at the same starting offset,\n- * the resulting group layout is said to be a <em>union layout<\/em> (see {@link MemoryLayout#unionLayout(MemoryLayout...)}).\n+ * A compound layout that is an aggregation of multiple, heterogeneous <em>member layouts<\/em>. There are two ways in which member layouts\n+ * can be combined: if member layouts are laid out one after the other, the resulting group layout is a\n+ * {@linkplain StructLayout struct layout}; conversely, if all member layouts are laid out at the same starting offset,\n+ * the resulting group layout is a {@linkplain UnionLayout union layout}.\n@@ -46,1 +46,1 @@\n-     * Returns the member layouts associated with this group.\n+     * {@return the member layouts of this group layout}\n@@ -51,2 +51,0 @@\n-     *\n-     * @return the member layouts associated with this group.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -200,2 +200,24 @@\n- * All the native linker implementations limit the function descriptors that they support to those that contain\n- * only so-called <em>canonical<\/em> layouts. A canonical layout has the following characteristics:\n+ * All native linker implementations operate on a subset of memory layouts. More formally, a layout {@code L}\n+ * is supported by a native linker {@code NL} if:\n+ * <ul>\n+ * <li>{@code L} is a value layout {@code V} and {@code V.withoutName()} is {@linkplain MemoryLayout#equals(Object) equal}\n+ * to one of the following layout constants:\n+ * <ul>\n+ * <li>{@link ValueLayout#JAVA_BOOLEAN}<\/li>\n+ * <li>{@link ValueLayout#JAVA_BYTE}<\/li>\n+ * <li>{@link ValueLayout#JAVA_CHAR}<\/li>\n+ * <li>{@link ValueLayout#JAVA_SHORT}<\/li>\n+ * <li>{@link ValueLayout#JAVA_INT}<\/li>\n+ * <li>{@link ValueLayout#JAVA_LONG}<\/li>\n+ * <li>{@link ValueLayout#JAVA_FLOAT}<\/li>\n+ * <li>{@link ValueLayout#JAVA_DOUBLE}<\/li>\n+ * <\/ul><\/li>\n+ * <li>{@code L} is an address layout {@code A} and {@code A.withoutTargetLayout().withoutName()} is\n+ * {@linkplain MemoryLayout#equals(Object) equal} to {@link ValueLayout#ADDRESS}<\/li>\n+ * <li>{@code L} is a sequence layout {@code S} and all the following conditions hold:\n+ * <ol>\n+ * <li>the alignment constraint of {@code S} is set to its <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a>, and<\/li>\n+ * <li>{@code S.elementLayout()} is a layout supported by {@code NL}.<\/li>\n+ * <\/ol>\n+ * <\/li>\n+ * <li>{@code L} is a group layout {@code G} and all the following conditions hold:\n@@ -203,6 +225,4 @@\n- * <li>Its alignment constraint is set to its <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a><\/li>\n- * <li>If it is a {@linkplain ValueLayout value layout}, its {@linkplain ValueLayout#order() byte order} is\n- * the {@linkplain ByteOrder#nativeOrder() native byte order}.\n- * <li>If it is a {@linkplain GroupLayout group layout}, its size is a multiple of its alignment constraint, and<\/li>\n- * <li>It does not contain padding other than what is strictly required to align its non-padding layout elements,\n- * or to satisfy constraint 3<\/li>\n+ * <li>the alignment constraint of {@code G} is set to its <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a>;<\/li>\n+ * <li>the size of {@code G} is a multiple of its alignment constraint;<\/li>\n+ * <li>each member layout in {@code G.memberLayouts()} is either a padding layout or a layout supported by {@code NL}, and<\/li>\n+ * <li>{@code G} does not contain padding other than what is strictly required to align its non-padding layout elements, or to satisfy (2).<\/li>\n@@ -210,0 +230,5 @@\n+ * <\/li>\n+ * <\/ul>\n+ *\n+ * A native linker only supports function descriptors whose argument\/return layouts are layouts supported by that linker\n+ * and are not sequence layouts.\n@@ -320,2 +345,2 @@\n- * When interacting with a native functions returning a pointer (such as {@code malloc}), the Java runtime has no insight\n- * into the size or the lifetime of the returned pointer. Consider the following code:\n+ * When a native function returning a pointer (such as {@code malloc}) is invoked using a downcall method handle,\n+ * the Java runtime has no insight into the size or the lifetime of the returned pointer. Consider the following code:\n@@ -333,2 +358,2 @@\n- * Both these operations are accomplished using the restricted {@link MemorySegment#reinterpret(long, Arena, Consumer)}\n- * method, as follows:\n+ * Both of these operations are accomplished using the restricted method {@link MemorySegment#reinterpret(long, Arena, Consumer)},\n+ * as follows:\n@@ -418,6 +443,6 @@\n- * describes the specialized signature of the C function we want to call. This descriptor must include layouts for any\n- * additional variadic argument we intend to provide. In this case, the specialized signature of the C\n- * function is {@code (char*, int, int, int)} as the format string accepts three integer parameters. Then, we need to use\n- * a linker option to specify the position of the first variadic layout in the provided function descriptor (starting from 0).\n- * In this case, since the first parameter is the format string (a non-variadic argument), the first variadic index\n- * needs to be set to 1, as follows:\n+ * describes the specialized signature of the C function we want to call. This descriptor must include an additional layout\n+ * for each variadic argument we intend to provide. In this case, the specialized signature of the C\n+ * function is {@code (char*, int, int, int)} as the format string accepts three integer parameters. We then need to use\n+ * a {@linkplain Linker.Option#firstVariadicArg(int) linker option} to specify the position of the first variadic layout\n+ * in the provided function descriptor (starting from 0). In this case, since the first parameter is the format string\n+ * (a non-variadic argument), the first variadic index needs to be set to 1, as follows:\n@@ -450,4 +475,3 @@\n- * When creating upcall stubs the linker runtime validates the type of the target method handle against the provided\n- * function descriptor and report an error if any mismatch is detected. As for downcalls, JVM crashes might occur,\n- * if the foreign code casts the function pointer associated with an upcall stub to a type\n- * that is incompatible with the provided function descriptor. Moreover, if the target method\n+ * When an upcall stub is passed to a foreign function, a JVM crash might occur, if the foreign code casts the function pointer\n+ * associated with the upcall stub to a type that is incompatible with the type of the upcall stub, and then attempts to\n+ * invoke the function through the resulting function pointer. Moreover, if the method\n@@ -467,1 +491,1 @@\n-     * Returns a linker for the ABI associated with the underlying native platform. The underlying native platform\n+     * {@return a linker for the ABI associated with the underlying native platform} The underlying native platform\n@@ -475,1 +499,0 @@\n-     * @return a linker for the ABI associated with the underlying native platform.\n@@ -495,4 +518,5 @@\n-     * @param symbol   the address of the target function.\n-     * @param function the function descriptor of the target function.\n-     * @param options  any linker options.\n-     * @return a downcall method handle. The method handle type is <a href=\"Linker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n+     * @param address  the native memory segment whose {@linkplain MemorySegment#address() base address} is the\n+     *                 address of the target foreign function.\n+     * @param function the function descriptor of the target foreign function.\n+     * @param options  the linker options associated with this linkage request.\n+     * @return a downcall method handle.\n@@ -500,1 +524,1 @@\n-     *                                  or if the symbol is {@link MemorySegment#NULL}\n+     * @throws IllegalArgumentException if {@code !address.isNative()}, or if {@code address.equals(MemorySegment.NULL)}.\n@@ -503,0 +527,2 @@\n+     *\n+     * @see SymbolLookup\n@@ -505,1 +531,1 @@\n-    MethodHandle downcallHandle(MemorySegment symbol, FunctionDescriptor function, Option... options);\n+    MethodHandle downcallHandle(MemorySegment address, FunctionDescriptor function, Option... options);\n@@ -517,1 +543,1 @@\n-     * Upon invoking a downcall method handle, the linker runtime will guarantee the following for any argument\n+     * Upon invoking a downcall method handle, the linker provides the following guarantees for any argument\n@@ -524,2 +550,2 @@\n-     *     {@linkplain Arena#ofShared()} shared arena}, any attempt to {@linkplain Arena#close() close}\n-     *     the shared arena while the downcall method handle is executing will result in an {@link IllegalStateException}.<\/li>\n+     *     {@linkplain Arena#ofShared() shared arena}, any attempt to {@linkplain Arena#close() close}\n+     *     the arena while the downcall method handle is still executing will result in an {@link IllegalStateException}.<\/li>\n@@ -531,2 +557,2 @@\n-     * However, if the function descriptor's return layout has a {@linkplain AddressLayout#targetLayout()} {@code T},\n-     * then the size of the returned segment is set to {@code T.byteSize()}.\n+     * However, if the function descriptor's return layout has a {@linkplain AddressLayout#targetLayout() target layout}\n+     * {@code T}, then the size of the returned segment is set to {@code T.byteSize()}.\n@@ -543,4 +569,3 @@\n-     * @param function the function descriptor of the target function.\n-     * @param options  any linker options.\n-     * @return a downcall method handle. The method handle type is <a href=\"Linker.html#downcall-method-handles\"><em>inferred<\/em><\/a>\n-     * from the provided function descriptor.\n+     * @param function the function descriptor of the target foreign function.\n+     * @param options  the linker options associated with this linkage request.\n+     * @return a downcall method handle.\n@@ -555,1 +580,1 @@\n-     * Creates a stub which can be passed to other foreign functions as a function pointer, associated with the given\n+     * Creates an upcall stub which can be passed to other foreign functions as a function pointer, associated with the given\n@@ -567,1 +592,1 @@\n-     * However, if the address layout has a {@linkplain AddressLayout#targetLayout()} {@code T}, then the size of the\n+     * However, if the address layout has a {@linkplain AddressLayout#targetLayout() target layout} {@code T}, then the size of the\n@@ -571,4 +596,4 @@\n-     * the VM will exit with a non-zero exit code. To avoid the VM aborting due to an uncaught exception, clients\n-     * could wrap all code in the target method handle in a try\/catch block that catches any {@link Throwable}, for\n-     * instance by using the {@link java.lang.invoke.MethodHandles#catchException(MethodHandle, Class, MethodHandle)}\n-     * method handle combinator, and handle exceptions as desired in the corresponding catch block.\n+     * the JVM will terminate abruptly. To avoid this, clients should wrap the code in the target method handle in a\n+     * try\/catch block to catch any unexpected exceptions. This can be done using the\n+     * {@link java.lang.invoke.MethodHandles#catchException(MethodHandle, Class, MethodHandle)} method handle combinator,\n+     * and handle exceptions as desired in the corresponding catch block.\n@@ -584,1 +609,1 @@\n-     * @param options  any linker options.\n+     * @param options  the linker options associated with this linkage request.\n@@ -587,2 +612,3 @@\n-     * @throws IllegalArgumentException if it is determined that the target method handle can throw an exception, or if the target method handle\n-     * has a type that does not match the upcall stub <a href=\"Linker.html#upcall-stubs\"><em>inferred type<\/em><\/a>.\n+     * @throws IllegalArgumentException if the type of {@code target} is incompatible with the\n+     * type {@linkplain FunctionDescriptor#toMethodType() derived} from {@code function}.\n+     * @throws IllegalArgumentException if it is determined that the target method handle can throw an exception.\n@@ -613,2 +639,1 @@\n-     * A linker option is used to indicate additional linking requirements to the linker,\n-     * besides what is described by a function descriptor.\n+     * A linker option is used to provide additional parameters to a linkage request.\n@@ -622,3 +647,4 @@\n-         * {@return a linker option used to denote the index of the first variadic argument layout in a\n-         *          foreign function call}\n-         * @param index the index of the first variadic argument in a downcall handle linkage request.\n+         * {@return a linker option used to denote the index of the first variadic argument layout in the\n+         *          function descriptor associated with a downcall linkage request}\n+         * @param index the index of the first variadic argument layout in the function descriptor associated\n+         *              with a downcall linkage request.\n@@ -640,1 +666,1 @@\n-         * This parameter, called the 'capture state segment', represents the native segment into which\n+         * This parameter, the <em>capture state segment<\/em>, represents the native segment into which\n@@ -643,2 +669,3 @@\n-         * The capture state segment should have the layout returned by {@linkplain #captureStateLayout}.\n-         * This layout is a struct layout which has a named field for each captured value.\n+         * The capture state segment must have size and alignment compatible with the layout returned by\n+         * {@linkplain #captureStateLayout}. This layout is a struct layout which has a named field for\n+         * each captured value.\n@@ -680,1 +707,1 @@\n-         *          to a downcall handle linked with {@link #captureCallState(String...)}}.\n+         *          to a downcall handle linked with {@link #captureCallState(String...)}}\n@@ -682,1 +709,1 @@\n-         * The capture state layout is <em>platform dependent<\/em> but is guaranteed to be\n+         * The capture state layout is <em>platform-dependent<\/em> but is guaranteed to be\n@@ -691,1 +718,2 @@\n-         * The following snipet shows how to obtain the names of the supported captured value layouts:\n+         * <p>\n+         * Clients can obtain the names of the supported captured value layouts as follows:\n@@ -693,1 +721,1 @@\n-         *    String capturedNames = Linker.Option.captureStateLayout().memberLayouts().stream()\n+         *    List<String> capturedNames = Linker.Option.captureStateLayout().memberLayouts().stream()\n@@ -696,2 +724,1 @@\n-         *        .map(Objects::toString)\n-         *        .collect(Collectors.joining(\", \"));\n+         *        .toList();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":89,"deletions":62,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.function.Supplier;\n@@ -51,4 +50,0 @@\n- * There are two leaves in the layout hierarchy, <em>value layouts<\/em>, which are used to represent values of given size and kind (see\n- * {@link ValueLayout}) and <em>padding layouts<\/em> which are used, as the name suggests, to represent a portion of a memory\n- * segment whose contents should be ignored, and which are primarily present for alignment reasons (see {@link MemoryLayout#paddingLayout(long)}).\n- * Some common value layout constants are defined in the {@link ValueLayout} class.\n@@ -56,3 +51,12 @@\n- * More complex layouts can be derived from simpler ones: a <em>sequence layout<\/em> denotes a repetition of one or more\n- * element layout (see {@link SequenceLayout}); a <em>group layout<\/em> denotes an aggregation of (typically) heterogeneous\n- * member layouts (see {@link GroupLayout}).\n+ * There are two leaves in the layout hierarchy, {@linkplain ValueLayout value layouts}, which are used to represent values of given size and kind (see\n+ * and {@linkplain PaddingLayout padding layouts} which are used, as the name suggests, to represent a portion of a memory\n+ * segment whose contents should be ignored, and which are primarily present for alignment reasons.\n+ * Some common value layout constants, such as {@link ValueLayout#JAVA_INT} and {@link ValueLayout#JAVA_FLOAT_UNALIGNED}\n+ * are defined in the {@link ValueLayout} class. A special kind of value layout, namely an {@linkplain AddressLayout address layout},\n+ * is used to model values that denote the address of a region of memory.\n+ * <p>\n+ * More complex layouts can be derived from simpler ones: a {@linkplain SequenceLayout sequence layout} denotes a\n+ * homogeneous repetition of zero or more occurrences of an element layout; a {@linkplain GroupLayout group layout}\n+ * denotes a heterogeneous aggregation of zero or more member layouts. Group layouts come in two\n+ * flavors: {@linkplain StructLayout struct layouts}, where member layouts are laid out one after the other, and\n+ * {@linkplain UnionLayout union layouts} where member layouts are laid out at the same starting offset.\n@@ -84,1 +88,1 @@\n- * <h2 id=\"layout-align\">Size, alignment and byte order<\/h2>\n+ * <h2 id=\"layout-align\">Characteristics of memory layouts<\/h2>\n@@ -86,3 +90,1 @@\n- * All layouts have a size; layout size for value and padding layouts is always explicitly denoted; this means that a layout description\n- * always has the same size in bytes, regardless of the platform in which it is used. For derived layouts, the size is computed\n- * as follows:\n+ * All layouts have a <em>size<\/em> (expressed in bytes), which is defined as follows:\n@@ -90,5 +92,12 @@\n- *     <li>for a sequence layout <em>S<\/em> whose element layout is <em>E<\/em> and size is <em>L<\/em>,\n- *     the size of <em>S<\/em> is that of <em>E<\/em>, multiplied by <em>L<\/em><\/li>\n- *     <li>for a group layout <em>G<\/em> with member layouts <em>M1<\/em>, <em>M2<\/em>, ... <em>Mn<\/em> whose sizes are\n- *     <em>S1<\/em>, <em>S2<\/em>, ... <em>Sn<\/em>, respectively, the size of <em>G<\/em> is either <em>S1 + S2 + ... + Sn<\/em> or\n- *     <em>max(S1, S2, ... Sn)<\/em> depending on whether the group is a <em>struct<\/em> or an <em>union<\/em>, respectively<\/li>\n+ *     <li>The size of a value layout is determined by the {@linkplain ValueLayout#carrier()}\n+ *     associated with the value layout. That is, the constant {@link ValueLayout#JAVA_INT} has carrier {@code int}, and\n+ *     size of 4 bytes;<\/li>\n+ *     <li>The size of an address layout is platform-dependent. That is, the constant {@link ValueLayout#ADDRESS}\n+ *     has size of 8 bytes on a 64-bit platform;<\/li>\n+ *     <li>The size of a padding layout is always provided explicitly, on {@linkplain MemoryLayout#paddingLayout(long) construction};<\/li>\n+ *     <li>The size of a sequence layout whose element layout is <em>E<\/em> and element count is <em>L<\/em>,\n+ *     is the size of <em>E<\/em>, multiplied by <em>L<\/em>;<\/li>\n+ *     <li>The size of a struct layout with member layouts <em>M1<\/em>, <em>M2<\/em>, ... <em>Mn<\/em> whose sizes are\n+ *     <em>S1<\/em>, <em>S2<\/em>, ... <em>Sn<\/em>, respectively, is <em>S1 + S2 + ... + Sn<\/em>;<\/li>\n+ *     <li>The size of a union layout <em>U<\/em> with member layouts <em>M1<\/em>, <em>M2<\/em>, ... <em>Mn<\/em> whose sizes are\n+ *     <em>S1<\/em>, <em>S2<\/em>, ... <em>Sn<\/em>, respectively, is <em>max(S1, S2, ... Sn).<\/em><\/li>\n@@ -97,1 +106,1 @@\n- * Furthermore, all layouts feature a <em>natural alignment<\/em> which can be inferred as follows:\n+ * Furthermore, all layouts have a <em>natural alignment<\/em> (expressed in bytes) which is defined as follows:\n@@ -99,7 +108,5 @@\n- *     <li>for a padding layout <em>L<\/em>, the natural alignment is 1, regardless of its size; that is, in the absence\n- *     of an explicit alignment constraint, a padding layout should not affect the alignment constraint of the group\n- *     layout it is nested into<\/li>\n- *     <li>for a value layout <em>L<\/em> whose size is <em>N<\/em>, the natural alignment of <em>L<\/em> is <em>N<\/em><\/li>\n- *     <li>for a sequence layout <em>S<\/em> whose element layout is <em>E<\/em>, the natural alignment of <em>S<\/em> is that of <em>E<\/em><\/li>\n- *     <li>for a group layout <em>G<\/em> with member layouts <em>M1<\/em>, <em>M2<\/em>, ... <em>Mn<\/em> whose alignments are\n- *     <em>A1<\/em>, <em>A2<\/em>, ... <em>An<\/em>, respectively, the natural alignment of <em>G<\/em> is <em>max(A1, A2 ... An)<\/em><\/li>\n+ *     <li>The natural alignment of a padding layout is 1;<\/li>\n+ *     <li>The natural alignment of a value layout whose size is <em>N<\/em> is <em>N<\/em>;<\/li>\n+ *     <li>The natural alignment of a sequence layout whose element layout is <em>E<\/em> is the alignment of <em>E<\/em>;<\/li>\n+ *     <li>The natural alignment of a group layout with member layouts <em>M1<\/em>, <em>M2<\/em>, ... <em>Mn<\/em> whose\n+ *     alignments are <em>A1<\/em>, <em>A2<\/em>, ... <em>An<\/em>, respectively, is <em>max(A1, A2 ... An)<\/em>.<\/li>\n@@ -107,4 +114,2 @@\n- * A layout's natural alignment can be overridden if needed (see {@link MemoryLayout#withByteAlignment(long)}), which can be useful to describe\n- * hyper-aligned layouts.\n- * <p>\n- * All value layouts have an <em>explicit<\/em> byte order (see {@link java.nio.ByteOrder}) which is set when the layout is created.\n+ * A layout's alignment can be overridden if needed (see {@link MemoryLayout#withByteAlignment(long)}), which can be useful to describe\n+ * layouts with weaker or stronger alignment constraints.\n@@ -114,3 +119,3 @@\n- * A <em>layout path<\/em> originates from a <em>root<\/em> layout (typically a group or a sequence layout) and terminates\n- * at a layout nested within the root layout - this is the layout <em>selected<\/em> by the layout path.\n- * Layout paths are typically expressed as a sequence of one or more {@link PathElement} instances.\n+ * A <em>layout path<\/em> is used to unambiguously select a layout that is nested in some other layout.\n+ * Layout paths are typically expressed as a sequence of one or more {@linkplain PathElement path elements}.\n+ * (A more formal definition of layout paths is provided <a href=\"#well-formedness\">below<\/a>).\n@@ -118,4 +123,7 @@\n- * Layout paths are for example useful in order to obtain {@linkplain MemoryLayout#byteOffset(PathElement...) offsets} of\n- * arbitrarily nested layouts inside another layout, to quickly obtain a {@linkplain #varHandle(PathElement...) memory access handle}\n- * corresponding to the selected layout, or to {@linkplain #select(PathElement...) select} an arbitrarily nested layout inside\n- * another layout.\n+ * Layout paths can be used to:\n+ * <ul>\n+ *     <li>obtain {@linkplain MemoryLayout#byteOffset(PathElement...) offsets} of arbitrarily nested layouts;<\/li>\n+ *     <li>obtain a {@linkplain #varHandle(PathElement...) var handle} that can be used to access the value corresponding\n+ *     to the selected layout;<\/li>\n+ *     <li>{@linkplain #select(PathElement...) select} an arbitrarily nested layout.<\/li>\n+ * <\/ul>\n@@ -123,2 +131,1 @@\n- * Such <em>layout paths<\/em> can be constructed programmatically using the methods in this class.\n- * For instance, given the {@code taggedValues} layout instance constructed as above, we can obtain the offset,\n+ * For instance, given the {@code taggedValues} sequence layout constructed above, we can obtain the offset,\n@@ -137,5 +144,7 @@\n- * Layout paths can feature one or more <em>free dimensions<\/em>. For instance, a layout path traversing\n- * an unspecified sequence element (that is, where one of the path component was obtained with the\n- * {@link PathElement#sequenceElement()} method) features an additional free dimension, which will have to be bound at runtime.\n- * This is important when obtaining a {@linkplain MethodHandles#memorySegmentViewVarHandle(ValueLayout) memory segment view var handle}\n- * from layouts, as in the following code:\n+ * <h3 id=\"open-path-elements\">Open path elements<\/h3>\n+ *\n+ * Some layout path elements, said <em>open path elements<\/em>, can select multiple layouts at once. For instance,\n+ * the open path elements {@link PathElement#sequenceElement()}, {@link PathElement#sequenceElement(long, long)} select\n+ * an unspecified element in a sequence layout. A var handle derived from a layout path containing one or more\n+ * open path element features additional coordinates of type {@code long}, which can be used by clients to <em>bind<\/em>\n+ * the open elements in the path:\n@@ -146,0 +155,2 @@\n+ * MemorySegment valuesSegment = ...\n+ * int val = (int) valueHandle.get(valuesSegment, 2); \/\/ reads the \"value\" field of the third struct in the array\n@@ -148,10 +159,5 @@\n- * Since the layout path constructed in the above example features exactly one free dimension (as it doesn't specify\n- * <em>which<\/em> member layout named {@code value} should be selected from the enclosing sequence layout),\n- * it follows that the var handle {@code valueHandle} will feature an <em>additional<\/em> {@code long}\n- * access coordinate.\n- *\n- * <p>A layout path with free dimensions can also be used to create an offset-computing method handle, using the\n- * {@link #byteOffset(PathElement...)} or {@link #byteOffsetHandle(PathElement...)} method. Again, free dimensions are\n- * translated into {@code long} parameters of the created method handle. The method handle can be used to compute the\n- * offsets of elements of a sequence at different indices, by supplying these indices when invoking the method handle.\n- * For instance:\n+ * <p>\n+ * Open path elements also affects the creation of\n+ * {@linkplain #byteOffsetHandle(PathElement...) offset-computing method handles}. Each open path element becomes\n+ * an additional {@code long} parameter in the obtained method handle. This parameter can be used to specify the index\n+ * of the sequence element whose offset is to be computed:\n@@ -166,0 +172,62 @@\n+ * <h3 id=\"deref-path-elements\">Dereference path elements<\/h3>\n+ *\n+ * A special kind of path element, called <em>dereference path element<\/em>, allows var handles obtained from\n+ * memory layouts to follow pointers. Consider the following layout:\n+ *\n+ * {@snippet lang=java :\n+ * StructLayout RECTANGLE = MemoryLayout.structLayout(\n+ *         ValueLayout.ADDRESS.withTargetLayout(\n+ *                 MemoryLayout.sequenceLayout(4,\n+ *                         MemoryLayout.structLayout(\n+ *                                 ValueLayout.JAVA_INT.withName(\"x\"),\n+ *                                 ValueLayout.JAVA_INT.withName(\"y\")\n+ *                         ).withName(\"point\")\n+*                  )\n+*          ).withName(\"points\")\n+ * );\n+ * }\n+ *\n+ * This layout is a struct layout which describe a rectangle. It contains a single field, namely {@code points},\n+ * an address layout whose {@linkplain AddressLayout#targetLayout() target layout} is a sequence layout of four\n+ * struct layouts. Each struct layout describes a two-dimensional point, and is defined as a pair or\n+ * {@link ValueLayout#JAVA_INT} coordinates, with names {@code x} and {@code y}, respectively.\n+ * <p>\n+ * With dereference path elements, we can obtain a var handle which accesses the {@code y} coordinate of one of the\n+ * point in the rectangle, as follows:\n+ *\n+ * {@snippet lang=java :\n+ * VarHandle rectPointYs = RECTANGLE.varHandle(\n+ *         PathElement.groupElement(\"points\"),\n+ *         PathElement.dereferenceElement(),\n+ *         PathElement.sequenceElement(),\n+ *         PathElement.groupElement(\"y\")\n+ * );\n+ *\n+ * MemorySegment rect = ...\n+ * int rect_y_4 = (int) rectPointYs.get(rect, 2); \/\/ rect.points[2]->y\n+ * }\n+ *\n+ * <h3 id=\"well-formedness\">Layout path well-formedness<\/h3>\n+ *\n+ * A layout path is applied to a layout {@code C_0}, also called the <em>initial layout<\/em>. Each path element in a\n+ * layout path can be thought of as a function which updates the current layout {@code C_i-1} to some other layout\n+ * {@code C_i}. That is, for each path element {@code E1, E2, ... En}, in a layout path {@code P}, we compute\n+ * {@code C_i = f_i(C_i-1)}, where {@code f_i} is the selection function associated with the path element under consideration,\n+ * denoted as {@code E_i}. The final layout {@code C_i} is also called the <em>selected layout<\/em>.\n+ * <p>\n+ * A layout path {@code P} is considered well-formed for an initial layout {@code C_0} if all its path elements\n+ * {@code E1, E2, ... En} are well-formed for their corresponding input layouts {@code C_0, C_1, ... C_n-1}.\n+ * A path element {@code E} is considered well-formed for a layout {@code L} if any of the following is true:\n+ * <ul>\n+ * <li>{@code L} is a sequence layout and {@code E} is a sequence path element (one of {@link PathElement#sequenceElement(long)},\n+ * {@link PathElement#sequenceElement(long, long)} or {@link PathElement#sequenceElement()}). Moreover, if {@code E}\n+ * contains one or more sequence indices, such indices have to be compatible with the sequence layout's element count;<\/li>\n+ * <li>{@code L} is a group layout and {@code E} is a group path element (one of {@link PathElement#groupElement(String)}\n+ * or {@link PathElement#groupElement(long)}). Moreover, the group path element must refer to a valid member layout in\n+ * {@code L}, either by name, or index;<\/li>\n+ * <li>{@code L} is an address layout and {@code E} is a {@linkplain PathElement#dereferenceElement() dereference path element}.\n+ * Moreover, {@code L} must define some {@linkplain AddressLayout#targetLayout() target layout}.<\/li>\n+ * <\/ul>\n+ * Any attempt to provide a layout path {@code P} that is not well-formed for an initial layout {@code C_0} will result\n+ * in an {@link IllegalArgumentException}.\n+ *\n@@ -187,2 +255,1 @@\n-     * Returns a memory layout of the same type with the same size and alignment constraint as this layout,\n-     * but with the specified name.\n+     * {@return a memory layout with the same characteristics as this layout, but with the given name}\n@@ -191,1 +258,0 @@\n-     * @return a memory layout with the given name.\n@@ -197,4 +263,1 @@\n-     * Returns a memory layout of the same type with the same size and alignment constraint as this layout,\n-     * but without a name.\n-     * <p>\n-     * This can be useful to compare two layouts that have different names, but are otherwise equal.\n+     * {@return a memory layout with the same characteristics as this layout, but with no name}\n@@ -202,1 +265,1 @@\n-     * @return a memory layout without a name.\n+     * @apiNote This can be useful to compare two layouts that have different names, but are otherwise equal.\n@@ -208,1 +271,1 @@\n-     * Returns the alignment constraint associated with this layout, expressed in bytes. Layout alignment defines a power\n+     * {@return the alignment constraint associated with this layout, expressed in bytes} Layout alignment defines a power\n@@ -220,2 +283,0 @@\n-     *\n-     * @return the layout alignment constraint, in bytes.\n@@ -225,1 +286,0 @@\n-\n@@ -227,2 +287,2 @@\n-     * Returns a memory layout of the same type with the same size and name as this layout,\n-     * but with the specified alignment constraint (in bytes).\n+     * {@return a memory layout with the same characteristics as this layout, but with the given\n+     * alignment constraint (in bytes)}\n@@ -231,2 +291,1 @@\n-     * @return a memory layout with the given alignment constraint.\n-     * @throws IllegalArgumentException if {@code byteAlignment} is not a power of two, or if it's less than 1.\n+     * @throws IllegalArgumentException if {@code byteAlignment} is not a power of two.\n@@ -236,1 +295,0 @@\n-\n@@ -238,2 +296,2 @@\n-     * Computes the offset, in bytes, of the layout selected by the given layout path, where the path is considered rooted in this\n-     * layout.\n+     * Computes the offset, in bytes, of the layout selected by the given layout path, where the initial layout in the\n+     * path is this layout.\n@@ -243,7 +301,3 @@\n-     * @throws IllegalArgumentException if the layout path does not select any layout nested in this layout, or if the\n-     * layout path contains one or more path elements that select multiple sequence element indices\n-     * (see {@link PathElement#sequenceElement()} and {@link PathElement#sequenceElement(long, long)}).\n-     * @throws IllegalArgumentException if the layout path contains one or more dereference path elements\n-     * (see {@link PathElement#dereferenceElement()}).\n-     * @throws NullPointerException if either {@code elements == null}, or if any of the elements\n-     * in {@code elements} is {@code null}.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#open-path-elements>open path elements<\/a>.\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>.\n@@ -257,10 +311,12 @@\n-     * Creates a method handle that can be used to compute the offset, in bytes, of the layout selected\n-     * by the given layout path, where the path is considered rooted in this layout.\n-     *\n-     * <p>The returned method handle has a return type of {@code long}, and features as many {@code long}\n-     * parameter types as there are free dimensions in the provided layout path (see {@link PathElement#sequenceElement()}),\n-     * where the order of the parameters corresponds to the order of the path elements.\n-     * The returned method handle can be used to compute a layout offset similar to {@link #byteOffset(PathElement...)},\n-     * but where some sequence indices are specified only when invoking the method handle.\n-     *\n-     * <p>The final offset returned by the method handle is computed as follows:\n+     * Creates a method handle that computes the offset, in bytes, of the layout selected\n+     * by the given layout path, where the initial layout in the path is this layout.\n+     * <p>\n+     * The returned method handle has the following characteristics:\n+     * <ul>\n+     *     <li>its return type is {@code long};<\/li>\n+     *     <li>it has as zero or more parameters of type {@code long}, one for each <a href=#open-path-elements>open path element<\/a>\n+     *     in the provided layout path. The order of these parameters corresponds to the order in which the open path\n+     *     elements occur in the provided layout path.\n+     * <\/ul>\n+     * <p>\n+     * The final offset returned by the method handle is computed as follows:\n@@ -269,1 +325,1 @@\n-     * byteOffset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n+     * offset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n@@ -277,0 +333,3 @@\n+     * @apiNote The returned method handle can be used to compute a layout offset, similarly to {@link #byteOffset(PathElement...)},\n+     * but more flexibly, as some indices can be specified when invoking the method handle.\n+     *\n@@ -278,6 +337,3 @@\n-     * @return a method handle that can be used to compute the byte offset of the layout element\n-     * specified by the given layout path elements, when supplied with the missing sequence element indices.\n-     * @throws IllegalArgumentException if the layout path contains one or more path elements that select\n-     * multiple sequence element indices (see {@link PathElement#sequenceElement(long, long)}).\n-     * @throws IllegalArgumentException if the layout path contains one or more dereference path elements\n-     * (see {@link PathElement#dereferenceElement()}).\n+     * @return a method handle that computes the offset, in bytes, of the layout selected by the given layout path.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>.\n@@ -287,1 +343,1 @@\n-                EnumSet.of(PathKind.SEQUENCE_RANGE, PathKind.DEREF_ELEMENT), elements);\n+                EnumSet.of(PathKind.DEREF_ELEMENT), elements);\n@@ -291,2 +347,12 @@\n-     * Creates a var handle that can be used to access a memory segment at the layout selected by the given layout path,\n-     * where the path is considered rooted in this layout.\n+     * Creates a var handle that accesses a memory segment at the offset selected by the given layout path,\n+     * where the initial layout in the path is this layout.\n+     * <p>\n+     * The returned var handle has the following characteristics:\n+     * <ul>\n+     *     <li>its type is derived from the {@linkplain ValueLayout#carrier() carrier} of the\n+     *     selected value layout;<\/li>\n+     *     <li>it has as zero or more access coordinates of type {@code long}, one for each\n+     *     <a href=#open-path-elements>open path element<\/a> in the provided layout path. The order of these access\n+     *     coordinates corresponds to the order in which the open path elements occur in the provided\n+     *     layout path.\n+     * <\/ul>\n@@ -303,1 +369,1 @@\n-     * of heap segments is virtualized. The {@code offset} coordinate can be expressed in the following form:\n+     * of heap segments is virtualized. The {@code offset} value can be expressed in the following form:\n@@ -314,1 +380,1 @@\n-     * Additionally, the provided dynamic values must conform to some bound which is derived from the layout path, that is,\n+     * Additionally, the provided dynamic values must conform to bounds which are derived from the layout path, that is,\n@@ -317,5 +383,5 @@\n-     * Multiple paths can be chained, by using {@linkplain PathElement#dereferenceElement() dereference path elements}.\n-     * A dereference path element allows to obtain a native memory segment whose base address is the address obtained\n-     * by following the layout path elements immediately preceding the dereference path element. In other words,\n-     * if a layout path contains one or more dereference path elements, the final address accessed by the returned\n-     * var handle can be computed as follows:\n+     * Multiple paths can be chained, with <a href=#deref-path-elements>dereference path elements<\/a>.\n+     * A dereference path element constructs a fresh native memory segment whose base address is the address value\n+     * read obtained by accessing a memory segment at the offset determined by the layout path elements immediately preceding\n+     * the dereference path element. In other words, if a layout path contains one or more dereference path elements,\n+     * the final address accessed by the returned var handle can be computed as follows:\n@@ -339,3 +405,2 @@\n-     * @apiNote the resulting var handle will feature an additional {@code long} access coordinate for every\n-     * unspecified sequence access component contained in this layout path. Moreover, the resulting var handle\n-     * features certain <em>access mode restrictions<\/em>, which are common to all memory segment view handles.\n+     * @apiNote The resulting var handle features certain <em>access mode restrictions<\/em>, which are common to all\n+     * {@linkplain MethodHandles#memorySegmentViewVarHandle(ValueLayout) memory segment view handles}.\n@@ -344,5 +409,3 @@\n-     * @return a var handle which can be used to access a memory segment at the (possibly nested) layout selected by the layout path in {@code elements}.\n-     * @throws UnsupportedOperationException if the layout path has one or more elements with incompatible alignment constraint.\n-     * @throws IllegalArgumentException if the layout path in {@code elements} does not select a value layout (see {@link ValueLayout}).\n-     * @throws IllegalArgumentException if the layout path in {@code elements} contains a {@linkplain PathElement#dereferenceElement()\n-     * dereference path element} for an address layout that has no {@linkplain AddressLayout#targetLayout() target layout}.\n+     * @return a var handle that accesses a memory segment at the offset selected by the given layout path.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n+     * @throws IllegalArgumentException if the layout selected by the provided path is not a {@linkplain ValueLayout value layout}.\n@@ -358,21 +421,13 @@\n-     * corresponding to the layout selected by the given layout path, where the path is considered rooted in this layout.\n-     *\n-     * <p>The returned method handle has a return type of {@code MemorySegment}, features a {@code MemorySegment}\n-     * parameter as leading parameter representing the segment to be sliced, and features as many trailing {@code long}\n-     * parameter types as there are free dimensions in the provided layout path (see {@link PathElement#sequenceElement()}),\n-     * where the order of the parameters corresponds to the order of the path elements.\n-     * The returned method handle can be used to create a slice similar to using {@link MemorySegment#asSlice(long, long)},\n-     * but where the offset argument is dynamically compute based on indices specified when invoking the method handle.\n-     *\n-     * <p>The offset of the returned segment is computed as follows:\n-     *\n-     * <blockquote><pre>{@code\n-     * byteOffset = c_1 + c_2 + ... + c_m + (x_1 * s_1) + (x_2 * s_2) + ... + (x_n * s_n)\n-     * }<\/pre><\/blockquote>\n-     *\n-     * where {@code x_1}, {@code x_2}, ... {@code x_n} are <em>dynamic<\/em> values provided as {@code long}\n-     * arguments, whereas {@code c_1}, {@code c_2}, ... {@code c_m} are <em>static<\/em> offset constants\n-     * and {@code s_1}, {@code s_2}, ... {@code s_n} are <em>static<\/em> stride constants which are derived from\n-     * the layout path.\n-     *\n-     * <p>After the offset is computed, the returned segment is created as if by calling:\n+     * corresponding to the layout selected by the given layout path, where the initial layout in the path is this layout.\n+     * <p>\n+     * The returned method handle has the following characteristics:\n+     * <ul>\n+     *     <li>its return type is {@code MemorySegment};<\/li>\n+     *     <li>it has a leading parameter of type {@code MemorySegment}, corresponding to the memory segment\n+     *     to be sliced;<\/li>\n+     *     <li>it has as zero or more parameters of type {@code long}, one for each <a href=#open-path-elements>open path element<\/a>\n+     *     in the provided layout path. The order of these parameters corresponds to the order in which the open path\n+     *     elements occur in the provided layout path.\n+     * <\/ul>\n+     * <p>\n+     * The offset of the returned segment is computed as follows:\n@@ -380,1 +435,3 @@\n-     * segment.asSlice(offset, layout.byteSize());\n+     * long offset = byteOffset(elements);\n+     * long size = select(elements).byteSize();\n+     * MemorySegment slice = segment.asSlice(offset, size);\n@@ -383,2 +440,2 @@\n-     * where {@code segment} is the segment to be sliced, and where {@code layout} is the layout selected by the given\n-     * layout path, as per {@link MemoryLayout#select(PathElement...)}.\n+     * @apiNote The returned method handle can be used to obtain a memory segment slice, similarly to {@link MemorySegment#asSlice(long, long)},\n+     * but more flexibly, as some indices can be specified when invoking the method handle.\n@@ -387,3 +444,3 @@\n-     * @return a method handle which can be used to create a slice of the selected layout element, given a segment.\n-     * @throws IllegalArgumentException if the layout path contains one or more dereference path elements\n-     * (see {@link PathElement#dereferenceElement()}).\n+     * @return a method handle which is used to slice a memory segment at the offset selected by the given layout path.\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>.\n@@ -393,1 +450,1 @@\n-                Set.of(), elements);\n+                Set.of(PathKind.DEREF_ELEMENT), elements);\n@@ -397,1 +454,1 @@\n-     * Selects the layout from a path rooted in this layout.\n+     * Returns the layout selected from the provided path, where the initial layout in the path is this layout.\n@@ -401,5 +458,4 @@\n-     * @throws IllegalArgumentException if the layout path does not select any layout nested in this layout,\n-     * or if the layout path contains one or more path elements that select one or more sequence element indices\n-     * (see {@link PathElement#sequenceElement(long)} and {@link PathElement#sequenceElement(long, long)}).\n-     * @throws IllegalArgumentException if the layout path contains one or more dereference path elements\n-     * (see {@link PathElement#dereferenceElement()}).\n+     * @throws IllegalArgumentException if the layout path is not <a href=\"#well-formedness\">well-formed<\/a> for this layout.\n+     * @throws IllegalArgumentException if the layout path contains one or more <a href=#deref-path-elements>dereference path elements<\/a>.\n+     * @throws IllegalArgumentException if the layout path contains one or more path elements that select one or more\n+     * sequence element indices, such as {@link PathElement#sequenceElement(long)} and {@link PathElement#sequenceElement(long, long)}).\n@@ -427,6 +483,9 @@\n-     * are two kinds of path elements: <em>group path elements<\/em> and <em>sequence path elements<\/em>. Group\n-     * path elements are used to select a named member layout within a {@link GroupLayout}. Sequence\n-     * path elements are used to select a sequence element layout within a {@link SequenceLayout}; selection\n-     * of sequence element layout can be <em>explicit<\/em> (see {@link PathElement#sequenceElement(long)}) or\n-     * <em>implicit<\/em> (see {@link PathElement#sequenceElement()}). When a path uses one or more implicit\n-     * sequence path elements, it acquires additional <em>free dimensions<\/em>.\n+     * are three kinds of path elements:\n+     * <ul>\n+     *     <li><em>group path elements<\/em>, used to select a member layout within a {@link GroupLayout}, either by name or by index;<\/li>\n+     *     <li><em>sequence path elements<\/em>, used to select one or more sequence element layouts within a {@link SequenceLayout}; and<\/li>\n+     *     <li><em>dereference path elements<\/em>, used to <a href=\"MemoryLayout.html#deref-path-elements\">dereference<\/a>\n+     *     an address layout as its target layout.<\/li>\n+     * <\/ul>\n+     * Sequence path elements selecting more than one sequence element layout are called\n+     * <a href=\"MemoryLayout.html#open-path-elements\">open path elements<\/a>.\n@@ -444,2 +503,0 @@\n-         * The path element returned by this method does not alter the number of free dimensions of any path\n-         * that is combined with such element.\n@@ -451,2 +508,2 @@\n-         * @param name the name of the group element to be selected.\n-         * @return a path element which selects the group element with the given name.\n+         * @param name the name of the member layout to be selected.\n+         * @return a path element which selects the group member layout with the given name.\n@@ -462,2 +519,0 @@\n-         * The path element returned by this method does not alter the number of free dimensions of any path\n-         * that is combined with such element.\n@@ -465,2 +520,2 @@\n-         * @param index the index of the group element to be selected.\n-         * @return a path element which selects the group element with the given index.\n+         * @param index the index of the member layout element to be selected.\n+         * @return a path element which selects the group member layout with the given index.\n@@ -479,2 +534,0 @@\n-         * The path element returned by this method does not alter the number of free dimensions of any path\n-         * that is combined with such element.\n@@ -495,14 +548,3 @@\n-         * Returns a path element which selects the element layout in a <em>range<\/em> of positions in a sequence layout.\n-         * The range is expressed as a pair of starting index (inclusive) {@code S} and step factor (which can also be negative)\n-         * {@code F}.\n-         * <p>\n-         * If a path with free dimensions {@code n} is combined with the path element returned by this method,\n-         * the number of free dimensions of the resulting path will be {@code 1 + n}. If the free dimension associated\n-         * with this path is bound by an index {@code I}, the resulting accessed offset can be obtained with the following\n-         * formula:\n-         *\n-         * <blockquote><pre>{@code\n-         * E * (S + I * F)\n-         * }<\/pre><\/blockquote>\n-         *\n-         * where {@code E} is the size (in bytes) of the sequence element layout.\n+         * Returns an <a href=\"MemoryLayout.html#open-path-elements\">open path element<\/a> which selects the element\n+         * layout in a <em>range<\/em> of positions in a sequence layout. The range is expressed as a pair of starting\n+         * index (inclusive) {@code S} and step factor (which can also be negative) {@code F}.\n@@ -510,3 +552,2 @@\n-         * Additionally, if {@code C} is the sequence element count, it follows that {@code 0 <= I < B},\n-         * where {@code B} is computed as follows:\n-         *\n+         * The exact sequence element selected by this layout is expressed as an index {@code I}. If {@code C} is the\n+         * sequence element count, it follows that {@code 0 <= I < B}, where {@code B} is computed as follows:\n@@ -535,12 +576,2 @@\n-         * Returns a path element which selects an unspecified element layout in a sequence layout.\n-         * <p>\n-         * If a path with free dimensions {@code n} is combined with the path element returned by this method,\n-         * the number of free dimensions of the resulting path will be {@code 1 + n}. If the free dimension associated\n-         * with this path is bound by an index {@code I}, the resulting accessed offset can be obtained with the following\n-         * formula:\n-         *\n-         * <blockquote><pre>{@code\n-         * E * I\n-         * }<\/pre><\/blockquote>\n-         *\n-         * where {@code E} is the size (in bytes) of the sequence element layout.\n+         * Returns an <a href=\"MemoryLayout.html#open-path-elements\">open path element<\/a> which selects an unspecified\n+         * element layout in a sequence layout.\n@@ -548,1 +579,2 @@\n-         * Additionally, if {@code C} is the sequence element count, it follows that {@code 0 <= I < C}.\n+         * The exact sequence element selected by this layout is expressed as an index {@code I}. If {@code C} is the\n+         * sequence element count, it follows that {@code 0 <= I < C}.\n@@ -560,4 +592,0 @@\n-         * The path element returned by this method does not alter the number of free dimensions of any path\n-         * that is combined with such element. Using this path layout to dereference an address layout\n-         * that has no target layout results in an {@link IllegalArgumentException} (e.g. when\n-         * a var handle is {@linkplain #varHandle(PathElement...) obtained}).\n@@ -580,1 +608,2 @@\n-     *     and {@linkplain ValueLayout#carrier() carrier}<\/li>\n+     *     and {@linkplain ValueLayout#carrier() carrier}. Additionally, two address layouts are considered equal if they\n+     *     also have the same {@linkplain AddressLayout#targetLayout() target layout};<\/li>\n@@ -582,1 +611,1 @@\n-     *     if their element layouts (see {@link SequenceLayout#elementLayout()}) are also equal<\/li>\n+     *     if their element layouts (see {@link SequenceLayout#elementLayout()}) are also equal;<\/li>\n@@ -584,1 +613,1 @@\n-     *     {@link UnionLayout}) and if their member layouts (see {@link GroupLayout#memberLayouts()}) are also equal<\/li>\n+     *     {@link UnionLayout}) and if their member layouts (see {@link GroupLayout#memberLayouts()}) are also equal.<\/li>\n@@ -604,1 +633,4 @@\n-     * Creates a padding layout with the given byte size and a byte-alignment of one.\n+     * Creates a padding layout with the given byte size. The alignment constraint of the returned layout\n+     * is 1. As such, regardless of its size, in the absence of an {@linkplain #withByteAlignment(long) explicit}\n+     * alignment constraint, a padding layout does not affect the natural alignment of the group or sequence layout\n+     * it is nested into.\n@@ -620,1 +652,2 @@\n-     * @throws IllegalArgumentException if {@code elementCount } is negative.\n+     * @throws IllegalArgumentException if {@code elementCount} is negative.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() * elementCount} overflows.\n@@ -627,1 +660,1 @@\n-        return wrapOverflow(() ->\n+        return Utils.wrapOverflow(() ->\n@@ -681,1 +714,1 @@\n-        return wrapOverflow(() ->\n+        return Utils.wrapOverflow(() ->\n@@ -699,8 +732,0 @@\n-\n-    private static <L extends MemoryLayout> L wrapOverflow(Supplier<L> layoutSupplier) {\n-        try {\n-            return layoutSupplier.get();\n-        } catch (ArithmeticException ex) {\n-            throw new IllegalArgumentException(\"Layout size exceeds Long.MAX_VALUE\");\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":238,"deletions":213,"binary":false,"changes":451,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n- * <a href=\"ScopedArena.html#thread-confinement\">confinement characteristics<\/a> of the arena used to obtain them.\n+ * <a href=\"Arena.html#thread-confinement\">confinement characteristics<\/a> of the arena used to obtain them.\n@@ -144,1 +144,1 @@\n- *                                             MethodHandles.insertArguments(multiplyExact, 0, 4L));\n+ *                                             MethodHandles.insertArguments(multiplyExact, 0, ValueLayout.JAVA_INT.byteSize()));\n@@ -263,3 +263,4 @@\n- * aligned physical address. The runtime preserves this invariant even if the array is relocated during garbage\n- * collection. Access operations rely on this invariant to determine if the specified offset in a heap segment refers\n- * to an aligned address in physical memory. For example:\n+ * aligned physical address (except for {@code long[]} and {@code double[]}, where alignment is platform-dependent, as explained\n+ * below). The runtime preserves this invariant even if the array is relocated during garbage collection.\n+ * Access operations rely on this invariant to determine if the specified offset in a heap segment refers to an aligned\n+ * address in physical memory. For example:\n@@ -281,1 +282,1 @@\n- * <li>The starting physical address of a {@code long[]} array will be 4-byte aligned (e.g. 1000) on 32-bit platforms,\n+ * <li>The starting physical address of a {@code long[]} array will be 4-byte aligned (e.g. 1004) on 32-bit platforms,\n@@ -284,1 +285,1 @@\n- * alignment constraint, because the target addresses (1000, 1004, 1008, 1012) are 4-byte aligned. And, the segment\n+ * alignment constraint, because the target addresses (1004, 1008, 1012, 1016) are 4-byte aligned. And, the segment\n@@ -443,0 +444,6 @@\n+     *\n+     * @apiNote When using this method to pass a segment address to some external operation (e.g. a JNI function),\n+     * clients must ensure that the segment is kept <a href=\"..\/..\/..\/java\/lang\/ref\/package.html#reachability\">reachable<\/a>\n+     * for the entire duration of the operation. A failure to do so might result in the premature deallocation of the\n+     * region of memory backing the memory segment, in case the segment has been allocated with an\n+     * {@linkplain Arena#ofAuto() automatic arena}.\n@@ -447,1 +454,1 @@\n-     * Returns the Java object stored in the on-heap memory region backing this memory segment, if any. For instance, if this\n+     * Returns the Java object stored in the on-heap region of memory backing this memory segment, if any. For instance, if this\n@@ -518,1 +525,1 @@\n-     * asSlice(offset, layout.byteSize(), 1);\n+     * asSlice(offset, newSize, 1);\n@@ -526,1 +533,2 @@\n-     * @throws IndexOutOfBoundsException if {@code offset < 0}, {@code offset > byteSize()}, {@code newSize < 0}, or {@code newSize > byteSize() - offset}\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}, {@code offset > byteSize()}, {@code newSize < 0},\n+     * or {@code newSize > byteSize() - offset}\n@@ -538,1 +546,2 @@\n-     * @throws IndexOutOfBoundsException if {@code offset < 0}, {@code offset > byteSize()}, {@code newSize < 0}, or {@code newSize > byteSize() - offset}\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}, {@code offset > byteSize()}, {@code newSize < 0},\n+     * or {@code newSize > byteSize() - offset}\n@@ -541,0 +550,1 @@\n+     * @throws IllegalArgumentException if {@code byteAlignment <= 0}, or if {@code byteAlignment} is not a power of 2.\n@@ -557,2 +567,2 @@\n-     * @throws IndexOutOfBoundsException if {@code offset < 0}, {@code offset > layout.byteSize()},\n-     * {@code newSize < 0}, or {@code newSize > layout.byteSize() - offset}\n+     * @throws IndexOutOfBoundsException if {@code offset < 0}, {@code offset > byteSize()},\n+     * or {@code layout.byteSize() > byteSize() - offset}\n@@ -615,1 +625,2 @@\n-     * MemorySegment cleanupSegment = MemorySegment.ofAddress(this.address());\n+     * MemorySegment cleanupSegment = MemorySegment.ofAddress(this.address())\n+     *                                             .reinterpret(byteSize());\n@@ -634,2 +645,1 @@\n-     * @throws IllegalArgumentException if {@code newSize < 0}.\n-     * @throws IllegalStateException if {@code scope.isAlive() == false}.\n+     * @throws IllegalStateException if {@code arena.scope().isAlive() == false}.\n@@ -654,1 +664,2 @@\n-     * MemorySegment cleanupSegment = MemorySegment.ofAddress(this.address());\n+     * MemorySegment cleanupSegment = MemorySegment.ofAddress(this.address())\n+     *                                             .reinterpret(newSize);\n@@ -677,1 +688,1 @@\n-     * @throws IllegalStateException if {@code scope.isAlive() == false}.\n+     * @throws IllegalStateException if {@code arena.scope().isAlive() == false}.\n@@ -721,1 +732,1 @@\n-     * this case, or when no overlap occurs, {@code null} is returned.\n+     * this case, or when no overlap occurs, an empty {@code Optional} is returned.\n@@ -738,1 +749,1 @@\n-     * other.address() - segment.address()\n+     * other.address() - address()\n@@ -747,1 +758,1 @@\n-     * a different kind, or because they are backed by different Java arrays.\n+     * different kinds, or because they are backed by different Java arrays.\n@@ -753,1 +764,1 @@\n-     * Fills a value into this memory segment.\n+     * Fills the contents of this memory segment with the given value.\n@@ -755,1 +766,1 @@\n-     * More specifically, the given value is filled into each address of this\n+     * More specifically, the given value is written into each address of this\n@@ -759,4 +770,2 @@\n-     * var byteHandle = MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE)\n-     *         .varHandle(MemoryLayout.PathElement.sequenceElement());\n-     * for (long l = 0; l < segment.byteSize(); l++) {\n-     *     byteHandle.set(segment.address(), l, value);\n+     * for (long offset = 0; offset < segment.byteSize(); offset++) {\n+     *     byteHandle.set(ValueLayout.JAVA_BYTE, offset, value);\n@@ -766,1 +775,1 @@\n-     * without any regard or guarantees on the ordering of particular memory\n+     * But without any regard or guarantees on the ordering of particular memory\n@@ -769,1 +778,1 @@\n-     * Fill can be useful to initialize or reset the memory of a segment.\n+     * This method can be useful to initialize or reset the contents of a memory segment.\n@@ -771,2 +780,2 @@\n-     * @param value the value to fill into this segment\n-     * @return this memory segment\n+     * @param value the value to write into this segment.\n+     * @return this memory segment.\n@@ -777,1 +786,1 @@\n-     * @throws UnsupportedOperationException if this segment is read-only (see {@link #isReadOnly()}).\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n@@ -800,1 +809,1 @@\n-     * @throws UnsupportedOperationException if this segment is read-only (see {@link #isReadOnly()}).\n+     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}.\n@@ -823,1 +832,1 @@\n-     * @param other the segment to be tested for a mismatch with this segment\n+     * @param other the segment to be tested for a mismatch with this segment.\n@@ -825,1 +834,1 @@\n-     * and the given other segment, otherwise -1 if no mismatch\n+     * and the given other segment, otherwise -1 if no mismatch.\n@@ -933,9 +942,10 @@\n-     * the properties of this segment. For instance, if this segment is <em>immutable<\/em>\n-     * (e.g. the segment is a read-only segment, see {@link #isReadOnly()}), then the resulting buffer is <em>read-only<\/em>\n-     * (see {@link ByteBuffer#isReadOnly()}). Additionally, if this is a native segment, the resulting buffer is\n-     * <em>direct<\/em> (see {@link ByteBuffer#isDirect()}).\n-     * <p>\n-     * The returned buffer's position (see {@link ByteBuffer#position()}) is initially set to zero, while\n-     * the returned buffer's capacity and limit (see {@link ByteBuffer#capacity()} and {@link ByteBuffer#limit()}, respectively)\n-     * are set to this segment' size (see {@link MemorySegment#byteSize()}). For this reason, a byte buffer cannot be\n-     * returned if this segment' size is greater than {@link Integer#MAX_VALUE}.\n+     * the properties of this segment. More specifically, the resulting buffer has the following characteristics:\n+     * <ul>\n+     * <li>It is {@linkplain ByteBuffer#isReadOnly() read-only}, if this segment is a\n+     * {@linkplain #isReadOnly() read-only segment};<\/li>\n+     * <li>Its {@linkplain ByteBuffer#position() position} is set to zero;\n+     * <li>Its {@linkplain ByteBuffer#capacity() capacity} and {@linkplain ByteBuffer#limit() limit}\n+     * are both set to this segment' {@linkplain MemorySegment#byteSize() size}. For this reason, a byte buffer\n+     * cannot be returned if this segment's size is greater than {@link Integer#MAX_VALUE};<\/li>\n+     * <li>It is a {@linkplain ByteBuffer#isDirect() direct buffer}, if this is a native segment.<\/li>\n+     * <\/ul>\n@@ -943,1 +953,1 @@\n-     * The life-cycle of the returned buffer will be tied to that of this segment. That is, accessing the returned buffer\n+     * The life-cycle of the returned buffer is tied to that of this segment. That is, accessing the returned buffer\n@@ -948,2 +958,2 @@\n-     * If this segment is accessible from a single thread, calling read\/write I\/O\n-     * operations on the resulting buffer might result in an unspecified exception being thrown. Examples of such problematic operations are\n+     * If this segment is {@linkplain #isAccessibleBy(Thread) accessible} from a single thread, calling read\/write I\/O\n+     * operations on the resulting buffer might result in unspecified exceptions being thrown. Examples of such problematic operations are\n@@ -958,1 +968,1 @@\n-     * e.g. because it models a heap-based segment that is not based on a {@code byte[]}), or if its size is greater\n+     * e.g. if it is a heap segment backed by an array other than {@code byte[]}), or if its size is greater\n@@ -987,1 +997,1 @@\n-     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer#MAX_VALUE}\n+     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer.MAX_VALUE}\n@@ -1001,1 +1011,1 @@\n-     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer#MAX_VALUE}.\n+     * e.g. because {@code byteSize() % 2 != 0}, or {@code byteSize() \/ 2 > Integer.MAX_VALUE}.\n@@ -1015,1 +1025,1 @@\n-     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer#MAX_VALUE}.\n+     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer.MAX_VALUE}.\n@@ -1029,1 +1039,1 @@\n-     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer#MAX_VALUE}.\n+     * e.g. because {@code byteSize() % 4 != 0}, or {@code byteSize() \/ 4 > Integer.MAX_VALUE}.\n@@ -1043,1 +1053,1 @@\n-     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer#MAX_VALUE}.\n+     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer.MAX_VALUE}.\n@@ -1057,1 +1067,1 @@\n-     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer#MAX_VALUE}.\n+     * e.g. because {@code byteSize() % 8 != 0}, or {@code byteSize() \/ 8 > Integer.MAX_VALUE}.\n@@ -1072,1 +1082,1 @@\n-     * @throws IndexOutOfBoundsException if {@code offset < 0} or {@code S + offset > byteSize()}, where {@code S} is the size of the UTF-8\n+     * @throws IndexOutOfBoundsException if {@code offset < 0} or {@code offset > byteSize() - S}, where {@code S} is the size of the UTF-8\n@@ -1098,1 +1108,1 @@\n-     * @throws IndexOutOfBoundsException if {@code offset < 0} or {@code str.getBytes().length() + offset >= byteSize()}.\n+     * @throws IndexOutOfBoundsException if {@code offset < 0} or {@code offset > byteSize() - str.getBytes().length() + 1}.\n@@ -1113,1 +1123,1 @@\n-     * If the buffer is {@linkplain Buffer#isReadOnly() read-only}, the resulting segment will also be\n+     * If the buffer is {@linkplain Buffer#isReadOnly() read-only}, the resulting segment is also\n@@ -1138,1 +1148,1 @@\n-     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given byte array reachable.\n+     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given array reachable.\n@@ -1150,1 +1160,1 @@\n-     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given byte array reachable.\n+     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given array reachable.\n@@ -1162,1 +1172,1 @@\n-     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given byte array reachable.\n+     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given array reachable.\n@@ -1174,1 +1184,1 @@\n-     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given byte array reachable.\n+     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given array reachable.\n@@ -1186,1 +1196,1 @@\n-     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given byte array reachable.\n+     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given array reachable.\n@@ -1198,1 +1208,1 @@\n-     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given byte array reachable.\n+     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given array reachable.\n@@ -1210,1 +1220,1 @@\n-     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given byte array reachable.\n+     * The scope of the returned segment is a fresh scope that is always alive, and keeps the given array reachable.\n@@ -1227,1 +1237,1 @@\n-     * The returned segment is always accessible, from any thread.\n+     * The returned segment is associated with a scope that is always alive, and is accessible from any thread.\n@@ -1271,2 +1281,2 @@\n-     * @throws IndexOutOfBoundsException if {@code srcOffset + bytes > srcSegment.byteSize()} or if\n-     * {@code dstOffset + bytes > dstSegment.byteSize()}, or if either {@code srcOffset}, {@code dstOffset}\n+     * @throws IndexOutOfBoundsException if {@code srcOffset > srcSegment.byteSize() - bytes} or if\n+     * {@code dstOffset > dstSegment.byteSize() - bytes}, or if either {@code srcOffset}, {@code dstOffset}\n@@ -1274,1 +1284,1 @@\n-     * @throws UnsupportedOperationException if the destination segment is read-only (see {@link #isReadOnly()}).\n+     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}.\n@@ -1319,4 +1329,4 @@\n-     * @throws IndexOutOfBoundsException if {@code srcOffset + (elementCount * S) > srcSegment.byteSize()} or if\n-     * {@code dstOffset + (elementCount * S) > dstSegment.byteSize()}, where {@code S} is the byte size\n-     * of the element layouts, or if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}.\n-     * @throws UnsupportedOperationException if the destination segment is read-only (see {@link #isReadOnly()}).\n+     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}.\n+     * @throws IndexOutOfBoundsException if {@code elementCount * srcLayout.byteSize()} or {@code elementCount * dtsLayout.byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code dstOffset > dstSegment.byteSize() - (elementCount * dstLayout.byteSize())}.\n+     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}.\n@@ -1347,2 +1357,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1367,2 +1376,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1388,2 +1396,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1408,2 +1415,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1429,2 +1435,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1449,2 +1454,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1470,2 +1474,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1490,2 +1493,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1511,2 +1513,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1531,2 +1532,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1552,2 +1552,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1572,2 +1571,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1593,2 +1591,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1613,2 +1610,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1634,2 +1630,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1654,2 +1649,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1667,1 +1661,1 @@\n-     * {@linkplain AddressLayout#targetLayout()} {@code T}, then the size of the returned segment\n+     * {@linkplain AddressLayout#targetLayout() target layout} {@code T}, then the size of the returned segment\n@@ -1681,2 +1675,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1701,2 +1694,1 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code offset > byteSize() - layout.byteSize()}.\n@@ -1725,2 +1717,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1749,2 +1741,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1773,2 +1765,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1797,2 +1789,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1822,2 +1814,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1846,2 +1838,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1872,2 +1864,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1897,2 +1889,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1922,2 +1914,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1946,2 +1938,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1971,2 +1963,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -1995,2 +1987,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -2020,2 +2012,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -2044,2 +2036,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -2069,2 +2061,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -2093,2 +2085,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -2108,1 +2100,1 @@\n-     * {@linkplain AddressLayout#targetLayout()} {@code T}, then the size of the returned segment\n+     * {@linkplain AddressLayout#targetLayout() target layout} {@code T}, then the size of the returned segment\n@@ -2124,2 +2116,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -2148,2 +2140,2 @@\n-     * @throws IndexOutOfBoundsException when the access operation falls outside the <em>spatial bounds<\/em> of the\n-     * memory segment.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code index * byteSize() > byteSize() - layout.byteSize()}.\n@@ -2165,1 +2157,1 @@\n-     *     <li>{@code s1.array().equals(s2.array())}, that is, the two segments must be of the same kind;\n+     *     <li>{@code s1.heapBase().equals(s2.heapBase())}, that is, the two segments must be of the same kind;\n@@ -2167,1 +2159,1 @@\n-     *     the same on-heap Java array;\n+     *     the same on-heap {@linkplain #heapBase() Java object};\n@@ -2170,1 +2162,1 @@\n-     *     to the same position inside their associated Java array instance.<\/li>\n+     *     to the same offset inside their associated {@linkplain #heapBase() Java object}.<\/li>\n@@ -2175,1 +2167,1 @@\n-     * to perform address checks, such as checking if a native segment has the {@code NULL} address.\n+     * to check whether two segments have the same address.\n@@ -2207,4 +2199,9 @@\n-     * @throws  IllegalArgumentException if {@code dstArray} is not an array, or if it is an array but whose type is not supported,\n-     * if the destination array component type does not match the carrier of the source element layout, if the source\n-     * segment\/offset are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the source element layout,\n-     * or if the destination element layout alignment is greater than its size.\n+     * @throws  IllegalArgumentException if {@code dstArray} is not an array, or if it is an array but whose type is not supported.\n+     * @throws IllegalArgumentException if the destination array component type does not match {@code srcLayout.carrier()}.\n+     * @throws IllegalArgumentException if {@code offset} is <a href=\"MemorySegment.html#segment-alignment\">incompatible\n+     * with the alignment constraint<\/a> in the source element layout.\n+     * @throws IllegalArgumentException if {@code srcLayout.byteAlignment() > srcLayout.byteSize()}.\n+     * @throws IndexOutOfBoundsException if {@code elementCount * srcLayout.byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code srcOffset > srcSegment.byteSize() - (elementCount * srcLayout.byteSize())}.\n+     * @throws IndexOutOfBoundsException if {@code dstIndex > dstArray.length - elementCount}.\n+     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstIndex} or {@code elementCount} are {@code < 0}.\n@@ -2241,4 +2238,10 @@\n-     * @throws  IllegalArgumentException if {@code srcArray} is not an array, or if it is an array but whose type is not supported,\n-     * if the source array component type does not match the carrier of the destination element layout, if the destination\n-     * segment\/offset are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the destination element layout,\n-     * or if the destination element layout alignment is greater than its size.\n+     * @throws  IllegalArgumentException if {@code srcArray} is not an array, or if it is an array but whose type is not supported.\n+     * @throws IllegalArgumentException if the source array component type does not match {@code srcLayout.carrier()}.\n+     * @throws IllegalArgumentException if {@code offset} is <a href=\"MemorySegment.html#segment-alignment\">incompatible\n+     * with the alignment constraint<\/a> in the source element layout.\n+     * @throws IllegalArgumentException if {@code dstLayout.byteAlignment() > dstLayout.byteSize()}.\n+     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}.\n+     * @throws IndexOutOfBoundsException if {@code elementCount * dstLayout.byteSize()} overflows.\n+     * @throws IndexOutOfBoundsException if {@code dstOffset > dstSegment.byteSize() - (elementCount * dstLayout.byteSize())}.\n+     * @throws IndexOutOfBoundsException if {@code srcIndex > srcArray.length - elementCount}.\n+     * @throws IndexOutOfBoundsException if either {@code srcIndex}, {@code dstOffset} or {@code elementCount} are {@code < 0}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":161,"deletions":158,"binary":false,"changes":319,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * must implement the {@link #allocate(long, long)} method. This interface defines several default methods\n+ * must implement the {@link #allocate(long, long)} method. A segment allocator defines several methods\n@@ -43,2 +43,0 @@\n- * This interface is a {@linkplain FunctionalInterface functional interface}: clients can easily obtain a new segment allocator\n- * by using either a lambda expression or a method reference.\n@@ -46,1 +44,8 @@\n- * This interface also defines factories for commonly used allocators:\n+ * {@code SegmentAllocator} is a {@linkplain FunctionalInterface functional interface}. Clients can easily obtain a new\n+ * segment allocator by using either a lambda expression or a method reference:\n+ *\n+ * {@snippet lang=java :\n+ * SegmentAllocator autoAllocator = (byteSize, byteAlignment) -> Arena.ofAuto().allocate(byteSize, byteAlignment);\n+ * }\n+ * <p>\n+ * This interface defines factories for commonly used allocators:\n@@ -50,1 +55,1 @@\n- *     <li>{@link #prefixAllocator(MemorySegment)} obtains an allocator which wraps a segment (either on-heap or off-heap)\n+ *     <li>{@link #prefixAllocator(MemorySegment)} obtains an allocator which wraps a segment\n@@ -58,1 +63,9 @@\n- * the allocator parameter tells the linker runtime where to store the return value of the foreign function.\n+ * the allocator parameter tells the linker where to store the return value of the foreign function.\n+ *\n+ * @apiNote Unless otherwise specified, the {@link #allocate(long, long)} method is not thread-safe.\n+ * Furthermore, memory segments allocated by a segment allocator can be associated with different\n+ * lifetimes, and can even be backed by overlapping regions of memory. For these reasons, clients should generally\n+ * only interact with a segment allocator they own.\n+ * <p>\n+ * Clients should consider using an {@linkplain Arena arena} instead, which, provides strong thread-safety,\n+ * lifetime and non-overlapping guarantees.\n@@ -314,0 +327,1 @@\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() * count} overflows.\n@@ -341,1 +355,1 @@\n-     * or if {@code alignmentBytes} is not a power of 2.\n+     * or if {@code byteAlignment} is not a power of 2.\n@@ -350,2 +364,3 @@\n-     * When the returned allocator cannot satisfy an allocation request, e.g. because a slice of the provided\n-     * segment with the requested size cannot be found, an {@link IndexOutOfBoundsException} is thrown.\n+     * The returned allocator throws {@link IndexOutOfBoundsException} when a slice of the provided\n+     * segment with the requested size and alignment cannot be found.\n+     * @implNote A slicing allocator is not <em>thread-safe<\/em>.\n@@ -368,1 +383,1 @@\n-     * SegmentAllocator prefixAllocator = (size, align) -> segment.asSlice(0, size);\n+     * SegmentAllocator prefixAllocator = (size, align) -> segment.asSlice(0, size, align);\n@@ -370,2 +385,4 @@\n-     * <p>\n-     * This allocator can be useful to limit allocation requests in case a client\n+     * The returned allocator throws {@link IndexOutOfBoundsException} when a slice of the provided\n+     * segment with the requested size and alignment cannot be found.\n+     *\n+     * @apiNote A prefix allocator can be useful to limit allocation requests in case a client\n@@ -374,2 +391,1 @@\n-     * <p>\n-     * While the allocator returned by this method is <em>thread-safe<\/em>, concurrent access on the same recycling\n+     * @implNote While a prefix allocator is <em>thread-safe<\/em>, concurrent access on the same recycling\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":30,"deletions":14,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n- * A compound layout that denotes a repetition of a given <em>element layout<\/em>.\n- * The repetition count is said to be the sequence layout's <em>element count<\/em>. A finite sequence can be thought of as a\n- * group layout where the sequence layout's element layout is repeated a number of times that is equal to the sequence\n+ * A compound layout that denotes a homogeneous repetition of a given <em>element layout<\/em>.\n+ * The repetition count is said to be the sequence layout's <em>element count<\/em>. A sequence layout can be thought of as a\n+ * struct layout where the sequence layout's element layout is repeated a number of times that is equal to the sequence\n@@ -60,1 +60,1 @@\n-     * {@return the element layout associated with this sequence layout}\n+     * {@return the element layout of this sequence layout}\n@@ -70,2 +70,1 @@\n-     * Returns a sequence layout with the same element layout, alignment constraint and name as this sequence layout,\n-     * but with the specified element count.\n+     * {@return a sequence layout with the same characteristics of this layout, but with the given element count}\n@@ -73,2 +72,2 @@\n-     * @return a sequence layout with the given element count.\n-     * @throws IllegalArgumentException if {@code elementCount < 0}.\n+     * @throws IllegalArgumentException if {@code elementCount} is negative.\n+     * @throws IllegalArgumentException if {@code elementLayout.bitSize() * elementCount} overflows.\n@@ -79,3 +78,3 @@\n-     * Re-arrange the elements in this sequence layout into a multi-dimensional sequence layout.\n-     * The resulting layout is a sequence layout where element layouts in the flattened projection of this\n-     * sequence layout (see {@link #flatten()}) are re-arranged into one or more nested sequence layouts\n+     * Rearranges the elements in this sequence layout into a multi-dimensional sequence layout.\n+     * The resulting layout is a sequence layout where element layouts in the {@linkplain #flatten() flattened projection}\n+     * of this sequence layout are rearranged into one or more nested sequence layouts\n@@ -104,1 +103,1 @@\n-     * @return a sequence layout where element layouts in the flattened projection of this\n+     * @return a sequence layout where element layouts in the {@linkplain #flatten() flattened projection} of this\n@@ -115,1 +114,10 @@\n-     * is the first non-sequence element layout found by recursively traversing the element layouts of this sequence layout.\n+     * is the first non-sequence layout found by inspecting (recursively, if needed) the element layout of this sequence layout:\n+     * {@snippet lang=java :\n+     * MemoryLayout flatElementLayout(SequenceLayout sequenceLayout) {\n+     *    return switch (sequenceLayout.elementLayout()) {\n+     *        case SequenceLayout nestedSequenceLayout -> flatElementLayout(nestedSequenceLayout);\n+     *        case MemoryLayout layout -> layout;\n+     *    };\n+     * }\n+     * }\n+     * <p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n- *     {@link MemorySegment#reinterpret(long)} () resizing} the segment first).<\/li>\n+ *     {@linkplain MemorySegment#reinterpret(long) resizing} the segment first).<\/li>\n@@ -68,1 +68,1 @@\n- * is {@linkplain Arena#close()}:\n+ * is {@linkplain Arena#close() closed}:\n@@ -213,3 +213,0 @@\n-     * @implNote The process of resolving a library name is OS-specific. For instance, in a POSIX-compliant OS,\n-     * the library name is resolved according to the specification of the {@code dlopen} function for that OS.\n-     * In Windows, the library name is resolved according to the specification of the {@code LoadLibrary} function.\n@@ -222,0 +219,4 @@\n+     * @implNote The process of resolving a library name is OS-specific. For instance, in a POSIX-compliant OS,\n+     * the library name is resolved according to the specification of the {@code dlopen} function for that OS.\n+     * In Windows, the library name is resolved according to the specification of the {@code LoadLibrary} function.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -45,3 +45,5 @@\n- * The layout constants in this class make implicit alignment and byte-ordering assumption: all layout\n- * constants in this class are byte-aligned, and their byte order is set to the {@linkplain ByteOrder#nativeOrder() platform default},\n- * thus making it easy to work with other APIs, such as arrays and {@link java.nio.ByteBuffer}.\n+ * @apiNote Some characteristics of the Java layout constants are platform-dependent. For instance, the byte order of\n+ * these constants is set to the {@linkplain ByteOrder#nativeOrder() native byte order}, thus making it easy to work\n+ * with other APIs, such as arrays and {@link java.nio.ByteBuffer}. Moreover, the alignment constraint of\n+ * {@link ValueLayout#JAVA_LONG} and {@link ValueLayout#JAVA_DOUBLE} is set to 8 bytes on 64-bit platforms, but only to\n+ * 4 bytes on 32-bit platforms.\n@@ -65,2 +67,1 @@\n-     * Returns a value layout with the same carrier, alignment constraint and name as this value layout,\n-     * but with the specified byte order.\n+     * {@return a value layout with the same characteristics as this layout, but with the given byte order}\n@@ -69,1 +70,0 @@\n-     * @return a value layout with the given byte order.\n@@ -81,6 +81,4 @@\n-     * array. The layout of this array is a sequence layout with {@code shape.length} nested sequence layouts. The element\n-     * layout of the sequence layout at depth {@code shape.length} is this value layout.\n-     * As a result, if {@code shape.length == 0}, the array layout will feature only one dimension.\n-     * <p>\n-     * The resulting var handle will feature {@code sizes.length + 1} coordinates of type {@code long}, which are\n-     * used as indices into a multi-dimensional array.\n+     * array. This array has a notional sequence layout featuring {@code shape.length} nested sequence layouts. The element\n+     * layout of the innermost sequence layout in the notional sequence layout is this value layout. The resulting var handle\n+     * is obtained as if calling the {@link #varHandle(PathElement...)} method on the notional layout, with a layout\n+     * path containing exactly {@code shape.length + 1} {@linkplain PathElement#sequenceElement() open sequence layout path elements}.\n@@ -94,1 +92,1 @@\n-     * Can be used to access a multi-dimensional array whose layout is as follows:\n+     * Is equivalent to the following code:\n@@ -97,3 +95,5 @@\n-     * SequenceLayout arrayLayout = MemoryLayout.sequenceLayout(\n-     *                                      MemoryLayout.sequenceLayout(10,\n-     *                                                  MemoryLayout.sequenceLayout(20, ValueLayout.JAVA_INT)));\n+     * SequenceLayout notionalLayout = MemoryLayout.sequenceLayout(\n+ *                                         MemoryLayout.sequenceLayout(10, MemoryLayout.sequenceLayout(20, ValueLayout.JAVA_INT)));\n+     * VarHandle arrayHandle = notionalLayout.varHandle(PathElement.sequenceElement(),\n+     *                                                  PathElement.sequenceElement(),\n+     *                                                  PathElement.sequenceElement());\n@@ -113,1 +113,1 @@\n-     *     <li>{@code 0 <= x < arrayLayout.elementCount() }<\/li>\n+     *     <li>{@code 0 <= x < notionalLayout.elementCount() }<\/li>\n@@ -451,1 +451,1 @@\n-     * A value layout constant whose size is the same as that of a machine address ({@code size_t}),\n+     * An address layout constant whose size is the same as that of a machine address ({@code size_t}),\n@@ -507,1 +507,1 @@\n-     * An unaligned value layout constant whose size is the same as that of a machine address ({@code size_t}),\n+     * An unaligned address layout constant whose size is the same as that of a machine address ({@code size_t}),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -80,2 +80,2 @@\n- * inside libraries; the second is used to model the signature of foreign functions, while the third provides\n- * linking capabilities which allows modelling foreign functions as {@link java.lang.invoke.MethodHandle} instances,\n+ * inside libraries; the second is used to model the signature of foreign functions, while the third is used\n+ * to link foreign functions as {@link java.lang.invoke.MethodHandle} instances,\n@@ -119,1 +119,1 @@\n- * the restricted method {@link java.lang.foreign.MemorySegment#reinterpret(long)} ()}\n+ * the restricted method {@link java.lang.foreign.MemorySegment#reinterpret(long)}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-            FunctionDescriptor compareDesc = FunctionDescriptor.of(JAVA_INT,\n+            FunctionDescriptor comparDesc = FunctionDescriptor.of(JAVA_INT,\n@@ -192,1 +192,1 @@\n-            MethodHandle compareHandle = MethodHandles.lookup()\n+            MethodHandle comparHandle = MethodHandles.lookup()\n@@ -194,1 +194,1 @@\n-                            compareDesc.toMethodType());\n+                            comparDesc.toMethodType());\n@@ -198,1 +198,1 @@\n-                MemorySegment compareFunc = linker.upcallStub(compareHandle, compareDesc, arena);\n+                MemorySegment compareFunc = linker.upcallStub(comparHandle, comparDesc, arena);\n@@ -403,1 +403,1 @@\n-                        MethodHandles.insertArguments(multiplyExact, 0, 4L));\n+                        MethodHandles.insertArguments(multiplyExact, 0, ValueLayout.JAVA_INT.byteSize()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/snippet-files\/Snippets.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import jdk.internal.vm.annotation.Stable;\n@@ -32,1 +31,0 @@\n-import java.util.List;\n@@ -47,2 +45,0 @@\n-    @Stable\n-    private final MethodHandle[] handleMap = new MethodHandle[AccessMode.COUNT];\n@@ -69,10 +65,0 @@\n-    @Override\n-    public Class<?> varType() {\n-        return value;\n-    }\n-\n-    @Override\n-    public List<Class<?>> coordinateTypes() {\n-        return List.of(coordinates);\n-    }\n-\n@@ -89,4 +75,0 @@\n-    VarHandle target() {\n-        return target;\n-    }\n-\n@@ -100,0 +82,7 @@\n+    @Override\n+    public VarHandle withInvokeBehavior() {\n+        return !hasInvokeExactBehavior()\n+                ? this\n+                : new IndirectVarHandle(target, value, coordinates, handleFactory, vform, false);\n+    }\n+\n@@ -108,4 +97,2 @@\n-    public VarHandle withInvokeBehavior() {\n-        return !hasInvokeExactBehavior()\n-            ? this\n-            : new IndirectVarHandle(target, value, coordinates, handleFactory, vform, false);\n+    public boolean isAccessModeSupported(AccessMode accessMode) {\n+        return directTarget.isAccessModeSupported(accessMode);\n@@ -115,8 +102,3 @@\n-    @ForceInline\n-    MethodHandle getMethodHandle(int mode) {\n-        MethodHandle handle = handleMap[mode];\n-        if (handle == null) {\n-            MethodHandle targetHandle = target.getMethodHandle(mode); \/\/ might throw UOE of access mode is not supported, which is ok\n-            handle = handleMap[mode] = handleFactory.apply(AccessMode.values()[mode], targetHandle);\n-        }\n-        return handle;\n+    MethodHandle getMethodHandleUncached(int mode) {\n+        MethodHandle targetHandle = target.getMethodHandle(mode); \/\/ might throw UOE of access mode is not supported, which is ok\n+        return handleFactory.apply(AccessMode.values()[mode], targetHandle);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java","additions":13,"deletions":31,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -7996,1 +7996,1 @@\n-     * by viewing its contents as a sequence of the provided value layout.\n+     * at a given byte offset, using the provided value layout.\n@@ -8003,5 +8003,5 @@\n-     * <p>The returned var handle's type is {@code carrier} and the list of coordinate types is\n-     * {@code (MemorySegment, long)}, where the {@code long} coordinate type corresponds to byte offset into\n-     * a given memory segment. The returned var handle accesses bytes at an offset in a given\n-     * memory segment, composing bytes to or from a value of the type {@code carrier} according to the given endianness;\n-     * the alignment constraint (in bytes) for the resulting var handle is given by {@code alignmentBytes}.\n+     * <p>The list of coordinate types associated with the returned var handle is {@code (MemorySegment, long)},\n+     * where the {@code long} coordinate type corresponds to byte offset into the given memory segment coordinate.\n+     * Thus, the returned var handle accesses bytes at an offset in a given memory segment, composing bytes to or from\n+     * a value of the var handle type. Moreover, the access operation will honor the endianness and the\n+     * alignment constraints expressed in the provided layout.\n@@ -8063,1 +8063,0 @@\n-     * @throws IllegalArgumentException if an illegal carrier type is used, or if {@code alignmentBytes} is not a power of two.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -533,2 +533,0 @@\n-    VarHandle target() { return null; }\n-\n@@ -2133,1 +2131,1 @@\n-    public final boolean isAccessModeSupported(AccessMode accessMode) {\n+    public boolean isAccessModeSupported(AccessMode accessMode) {\n@@ -2189,1 +2187,1 @@\n-    MethodHandle getMethodHandle(int mode) {\n+    final MethodHandle getMethodHandle(int mode) {\n@@ -2201,1 +2199,1 @@\n-    private final MethodHandle getMethodHandleUncached(int mode) {\n+    MethodHandle getMethodHandleUncached(int mode) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -284,1 +284,14 @@\n-    RELEASE_21(65);\n+    RELEASE_21(65),\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 22.\n+     *\n+     * @since 22\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se22\/html\/index.html\">\n+     * <cite>The Java Virtual Machine Specification, Java SE 22 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_22(66),\n+    ; \/\/ Reduce code churn when appending new constants\n@@ -299,1 +312,1 @@\n-        return RELEASE_21;\n+        return RELEASE_22;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ClassFileFormatVersion.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import java.util.concurrent.locks.Lock;\n@@ -194,1 +195,1 @@\n- * negative caching TTL value when needed.\n+ * negative caching TTL value when needed or extend the usage of the stale data.\n@@ -196,1 +197,1 @@\n- * <p> Two Java security properties control the TTL values used for\n+ * <p> Three Java security properties control the TTL values used for\n@@ -208,0 +209,19 @@\n+ * <dt><b>networkaddress.cache.stale.ttl<\/b><\/dt>\n+ * <dd>Indicates the caching policy for stale names. The value is specified as\n+ * an integer to indicate the number of seconds that stale names will be kept in\n+ * the cache. A name is considered stale if the TTL has expired and an attempt\n+ * to lookup the host name again was not successful. This property is useful if\n+ * it is preferable to use a stale name rather than fail due to an unsuccessful\n+ * lookup. The default setting is to cache for an implementation specific period\n+ * of time.\n+ * <p>\n+ * If the value of this property is larger than \"networkaddress.cache.ttl\" then\n+ * \"networkaddress.cache.ttl\" will be used as a refresh interval of the name in\n+ * the cache. For example, if this property is set to 1 day and\n+ * \"networkaddress.cache.ttl\" is set to 30 seconds, then the positive response\n+ * will be cached for 1 day but an attempt to refresh it will be done every\n+ * 30 seconds.\n+ * <p>\n+ * A value of 0 (zero) or if the property is not set means do not use stale\n+ * names. Negative values are ignored.\n+ * <\/dd>\n@@ -936,1 +956,1 @@\n-    private static final NavigableSet<CachedAddresses> expirySet =\n+    private static final NavigableSet<CachedLookup> expirySet =\n@@ -944,2 +964,5 @@\n-    \/\/ a holder for cached addresses with required metadata\n-    private static final class CachedAddresses  implements Addresses, Comparable<CachedAddresses> {\n+    \/**\n+     * A cached result of a name service lookup. The result can be either valid\n+     * addresses or invalid (ie a failed lookup) containing no addresses.\n+     *\/\n+    private static class CachedLookup implements Addresses, Comparable<CachedLookup> {\n@@ -948,2 +971,6 @@\n-        final InetAddress[] inetAddresses;\n-        final long expiryTime; \/\/ time of expiry (in terms of System.nanoTime())\n+        volatile InetAddress[] inetAddresses;\n+        \/**\n+         * Time of expiry (in terms of System.nanoTime()). Can be modified only\n+         * when the record is not added to the \"expirySet\".\n+         *\/\n+        volatile long expiryTime;\n@@ -952,1 +979,1 @@\n-        CachedAddresses(String host, InetAddress[] inetAddresses, long expiryTime) {\n+        CachedLookup(String host, InetAddress[] inetAddresses, long expiryTime) {\n@@ -967,1 +994,1 @@\n-        public int compareTo(CachedAddresses other) {\n+        public int compareTo(CachedLookup other) {\n@@ -978,0 +1005,100 @@\n+\n+        \/**\n+         * Checks if the current cache record is expired or not. Expired records\n+         * are removed from the expirySet and cache.\n+         *\n+         * @return {@code true} if the record was removed\n+         *\/\n+        public boolean tryRemoveExpiredAddress(long now) {\n+            \/\/ compare difference of time instants rather than\n+            \/\/ time instants directly, to avoid possible overflow.\n+            \/\/ (see System.nanoTime() recommendations...)\n+            if ((expiryTime - now) < 0L) {\n+                \/\/ ConcurrentSkipListSet uses weakly consistent iterator,\n+                \/\/ so removing while iterating is OK...\n+                if (expirySet.remove(this)) {\n+                    \/\/ ... remove from cache\n+                    cache.remove(host, this);\n+                }\n+                return true;\n+            }\n+            return false;\n+        }\n+    }\n+\n+    \/**\n+     * A cached valid lookup containing addresses whose validity may be\n+     * temporarily extended by an additional stale period pending the mapping\n+     * being refreshed or updated.\n+     *\/\n+    private static final class ValidCachedLookup extends CachedLookup {\n+        \/**\n+         * Time to refresh (in terms of System.nanoTime()).\n+         *\/\n+        private volatile long refreshTime;\n+        \/**\n+         * For how long the stale data should be used after TTL expiration.\n+         * Initially equal to the expiryTime, but increased over time after each\n+         * successful lookup.\n+         *\/\n+        private volatile long staleTime;\n+\n+        \/**\n+         * only one thread is doing lookup to name service\n+         * for particular host at any time.\n+         *\/\n+        private final Lock lookupLock = new ReentrantLock();\n+\n+        ValidCachedLookup(String host, InetAddress[] inetAddresses,\n+                          long staleTime, long refreshTime)\n+        {\n+            super(host, inetAddresses, staleTime);\n+            this.refreshTime = refreshTime;\n+            this.staleTime = staleTime;\n+        }\n+\n+        @Override\n+        public InetAddress[] get() {\n+            long now = System.nanoTime();\n+            if ((refreshTime - now) < 0L && lookupLock.tryLock()) {\n+                try {\n+                    \/\/ cachePolicy is in [s] - we need [ns]\n+                    refreshTime = now + InetAddressCachePolicy.get() * 1000_000_000L;\n+                    \/\/ getAddressesFromNameService returns non-empty\/non-null value\n+                    inetAddresses = getAddressesFromNameService(host);\n+                    \/\/ don't update the \"expirySet\", will do that later\n+                    staleTime = refreshTime + InetAddressCachePolicy.getStale() * 1000_000_000L;\n+                } catch (UnknownHostException ignore) {\n+                } finally {\n+                    lookupLock.unlock();\n+                }\n+            }\n+            return inetAddresses;\n+        }\n+\n+        \/**\n+         * Overrides the parent method to skip deleting the record from the\n+         * cache if the stale data can still be used. Note to update the\n+         * \"expiryTime\" field we have to remove the record from the expirySet\n+         * and add it back. It is not necessary to remove\/add it here, we can do\n+         * that in the \"get()\" method above, but extracting it minimizes\n+         * contention on \"expirySet\".\n+         *\/\n+        @Override\n+        public boolean tryRemoveExpiredAddress(long now) {\n+            \/\/ compare difference of time instants rather than\n+            \/\/ time instants directly, to avoid possible overflow.\n+            \/\/ (see System.nanoTime() recommendations...)\n+            if ((expiryTime - now) < 0L) {\n+                if ((staleTime - now) < 0L) {\n+                    return super.tryRemoveExpiredAddress(now);\n+                }\n+                \/\/ ConcurrentSkipListSet uses weakly consistent iterator,\n+                \/\/ so removing while iterating is OK...\n+                if (expirySet.remove(this)) {\n+                    expiryTime = staleTime;\n+                    expirySet.add(this);\n+                }\n+            }\n+            return false;\n+        }\n@@ -1024,9 +1151,24 @@\n-                        CachedAddresses cachedAddresses = new CachedAddresses(\n-                            host,\n-                            inetAddresses,\n-                            cachePolicy == InetAddressCachePolicy.FOREVER\n-                            ? 0L\n-                            \/\/ cachePolicy is in [s] - we need [ns]\n-                            : System.nanoTime() + 1000_000_000L * cachePolicy\n-                        );\n-                        if (cache.replace(host, this, cachedAddresses) &&\n+                        long now = System.nanoTime();\n+                        long expiryTime =\n+                                cachePolicy == InetAddressCachePolicy.FOREVER ?\n+                                0L\n+                                \/\/ cachePolicy is in [s] - we need [ns]\n+                                : now + 1000_000_000L * cachePolicy;\n+                        CachedLookup cachedLookup;\n+                        if (InetAddressCachePolicy.getStale() > 0 &&\n+                                ex == null && expiryTime > 0)\n+                        {\n+                            long refreshTime = expiryTime;\n+                            \/\/  staleCachePolicy is in [s] - we need [ns]\n+                            expiryTime = refreshTime + 1000_000_000L *\n+                                    InetAddressCachePolicy.getStale();\n+                            cachedLookup = new ValidCachedLookup(host,\n+                                                                 inetAddresses,\n+                                                                 expiryTime,\n+                                                                 refreshTime);\n+                        } else {\n+                            cachedLookup = new CachedLookup(host,\n+                                                            inetAddresses,\n+                                                            expiryTime);\n+                        }\n+                        if (cache.replace(host, this, cachedLookup) &&\n@@ -1035,1 +1177,1 @@\n-                            expirySet.add(cachedAddresses);\n+                            expirySet.add(cachedLookup);\n@@ -1641,12 +1783,2 @@\n-        for (CachedAddresses caddrs : expirySet) {\n-            \/\/ compare difference of time instants rather than\n-            \/\/ time instants directly, to avoid possible overflow.\n-            \/\/ (see System.nanoTime() recommendations...)\n-            if ((caddrs.expiryTime - now) < 0L) {\n-                \/\/ ConcurrentSkipListSet uses weakly consistent iterator,\n-                \/\/ so removing while iterating is OK...\n-                if (expirySet.remove(caddrs)) {\n-                    \/\/ ... remove from cache\n-                    cache.remove(caddrs.host, caddrs);\n-                }\n-            } else {\n+        for (CachedLookup caddrs : expirySet) {\n+            if (!caddrs.tryRemoveExpiredAddress(now)) {\n@@ -1665,1 +1797,1 @@\n-                if (addrs instanceof CachedAddresses) {\n+                if (addrs instanceof CachedLookup) {\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":164,"deletions":32,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,0 +270,9 @@\n+\t<LI><P><B>{@systemProperty networkaddress.cache.stale.ttl}<\/B> (default: see below)<BR>\n+\tValue is an integer corresponding to the number of seconds that stale names\n+\twill be kept in the cache. A name is considered stale if the TTL has expired\n+\tand an attempt to lookup the host name again was not successful. This\n+\tproperty is useful if it is preferable to use a stale name rather than\n+\tfail due to an unsuccessful lookup.\n+\tA value of 0 (zero) or if the property is not set means do not use stale\n+\tnames. Negative values are ignored.\n+\tThe default value is implementation-specific.<\/P>\n@@ -276,1 +285,1 @@\n-<P>Since these 2 properties are part of the security policy, they are\n+<P>Since these 3 properties are part of the security policy, they are\n","filename":"src\/java.base\/share\/classes\/java\/net\/doc-files\/net-properties.html","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-     * @spec https:\/\/www.unicode.org\/reports\/tr35\/ Unicode Locale Data Markup Language\n+     * @spec https:\/\/www.unicode.org\/reports\/tr35 Unicode Locale Data Markup Language\n","filename":"src\/java.base\/share\/classes\/java\/text\/Collator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.vm.annotation.ForceInline;\n@@ -3807,1 +3806,1 @@\n-        if (newLength < 0)\n+        if (newLength < 0) {\n@@ -3809,0 +3808,1 @@\n+        }\n@@ -3818,7 +3818,0 @@\n-    @ForceInline\n-    private static void checkLength(int from, int to) {\n-        if (to < from) {\n-            throw new IllegalArgumentException(from + \" > \" + to);\n-        }\n-    }\n-\n@@ -3852,4 +3845,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeByte(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3857,5 +3847,1 @@\n-    }\n-\n-    @ForceInline\n-    private static byte[] copyOfRangeByte(byte[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3863,0 +3849,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3865,1 +3854,1 @@\n-                         Math.min(original.length - from, newLength));\n+                Math.min(original.length - from, newLength));\n@@ -3896,4 +3885,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeShort(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3901,5 +3887,1 @@\n-    }\n-\n-    @ForceInline\n-    private static short[] copyOfRangeShort(short[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3907,0 +3889,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3940,4 +3925,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeInt(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3945,5 +3927,1 @@\n-    }\n-\n-    @ForceInline\n-    private static int[] copyOfRangeInt(int[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3951,0 +3929,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3984,4 +3965,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeLong(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3989,5 +3967,1 @@\n-    }\n-\n-    @ForceInline\n-    private static long[] copyOfRangeLong(long[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3995,0 +3969,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4028,4 +4005,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeChar(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4033,5 +4007,1 @@\n-    }\n-\n-    @ForceInline\n-    private static char[] copyOfRangeChar(char[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4039,0 +4009,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4072,4 +4045,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeFloat(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4077,5 +4047,1 @@\n-    }\n-\n-    @ForceInline\n-    private static float[] copyOfRangeFloat(float[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4083,0 +4049,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4116,4 +4085,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeDouble(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4121,5 +4087,1 @@\n-    }\n-\n-    @ForceInline\n-    private static double[] copyOfRangeDouble(double[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4127,0 +4089,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4160,4 +4125,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeBoolean(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4165,5 +4127,1 @@\n-    }\n-\n-    @ForceInline\n-    private static boolean[] copyOfRangeBoolean(boolean[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4171,0 +4129,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":43,"deletions":82,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-    int putMode = PUT_NORM;\n+    transient int putMode = PUT_NORM;\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1831,1 +1831,1 @@\n-     * @since {@inheritDoc}\n+     * @since 20\n@@ -1846,1 +1846,1 @@\n-     * @since {@inheritDoc}\n+     * @since 20\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Matcher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-                    return Class.forName(Util.toBinaryName(cd.descriptorString()), false, loader);\n+                    return Class.forName(Util.toBinaryName(cd), false, loader);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassHierarchyResolver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -609,0 +609,1 @@\n+    public static final int JAVA_22_VERSION = 66;\n@@ -610,1 +611,1 @@\n-    public static final int LATEST_MAJOR_VERSION = JAVA_21_VERSION;\n+    public static final int LATEST_MAJOR_VERSION = JAVA_22_VERSION;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -123,1 +123,2 @@\n-        \/\/this instance should leak out, appears only in cache in order to utilize Map.computeIfAbsent\n+        \/\/ this instance should not leak out, appears only in cache in order to utilize Map.computeIfAbsent\n+        \/\/ is already an invalid combination, so it can be compared with equals or as value class safely\n@@ -224,1 +225,1 @@\n-                    return Class.forName(Util.toBinaryName(cd.descriptorString()), false, ClassLoader.getSystemClassLoader());\n+                    return Class.forName(Util.toBinaryName(cd), false, ClassLoader.getSystemClassLoader());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,4 +57,0 @@\n-    public static String arrayOf(CharSequence s) {\n-        return \"[\" + s;\n-    }\n-\n@@ -88,7 +84,3 @@\n-     * Convert a descriptor of classes or interfaces or arrays, or an internal\n-     * name of a class or interface, into a fully qualified binary name, that can\n-     * be resolved by {@link Class#forName(String) Class::forName}. Primitive type\n-     * descriptors should never be passed into this method.\n-     *\n-     * @param descOrInternalName a descriptor or internal name\n-     * @return the fully qualified binary name\n+     * Converts a descriptor of classes or interfaces into\n+     * a binary name. Rejects primitive types or arrays.\n+     * This is an inverse of {@link ClassDesc#of(String)}.\n@@ -96,48 +88,2 @@\n-    public static String toBinaryName(String descOrInternalName) {\n-        if (descOrInternalName.startsWith(\"L\")) {\n-            \/\/ descriptors of classes or interfaces\n-            if (descOrInternalName.length() <= 2 || !descOrInternalName.endsWith(\";\")) {\n-                throw new IllegalArgumentException(descOrInternalName);\n-            }\n-            return descOrInternalName.substring(1, descOrInternalName.length() - 1).replace('\/', '.');\n-        } else {\n-            \/\/ arrays, classes or interfaces' internal names\n-            return descOrInternalName.replace('\/', '.');\n-        }\n-    }\n-\n-    public static Iterator<String> parameterTypes(String s) {\n-        \/\/TODO: gracefully non-method types\n-        return new Iterator<>() {\n-            int ch = 1;\n-\n-            @Override\n-            public boolean hasNext() {\n-                return s.charAt(ch) != ')';\n-            }\n-\n-            @Override\n-            public String next() {\n-                char curr = s.charAt(ch);\n-                switch (curr) {\n-                    case 'C', 'B', 'S', 'I', 'J', 'F', 'D', 'Z':\n-                        ch++;\n-                        return String.valueOf(curr);\n-                    case '[':\n-                        ch++;\n-                        return \"[\" + next();\n-                    case 'L': {\n-                        int start = ch;\n-                        while (s.charAt(++ch) != ';') { }\n-                        ++ch;\n-                        return s.substring(start, ch);\n-                    }\n-                    default:\n-                        throw new AssertionError(\"cannot parse string: \" + s);\n-                }\n-            }\n-        };\n-    }\n-\n-    public static String returnDescriptor(String s) {\n-        return s.substring(s.indexOf(')') + 1);\n+    public static String toBinaryName(ClassDesc cd) {\n+        return toInternalName(cd).replace('\/', '.');\n@@ -148,4 +94,3 @@\n-        return switch (desc.charAt(0)) {\n-            case 'L' -> desc.substring(1, desc.length() - 1);\n-            default -> throw new IllegalArgumentException(desc);\n-        };\n+        if (desc.charAt(0) == 'L')\n+            return desc.substring(1, desc.length() - 1);\n+        throw new IllegalArgumentException(desc);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":8,"deletions":63,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -117,0 +117,2 @@\n+        Utils.checkAlign(byteAlignment);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.function.Supplier;\n@@ -169,1 +170,1 @@\n-    public static void checkElementAlignment(ValueLayout layout, String msg) {\n+    public static boolean isElementAligned(ValueLayout layout) {\n@@ -173,1 +174,6 @@\n-        if (layout.byteAlignment() > layout.byteSize()) {\n+        return layout.byteAlignment() <= layout.byteSize();\n+    }\n+\n+    @ForceInline\n+    public static void checkElementAlignment(ValueLayout layout, String msg) {\n+        if (!isElementAligned(layout)) {\n@@ -203,0 +209,4 @@\n+        checkAlign(byteAlignment);\n+    }\n+\n+    public static void checkAlign(long byteAlignment) {\n@@ -255,0 +265,8 @@\n+    public static <L extends MemoryLayout> L wrapOverflow(Supplier<L> layoutSupplier) {\n+        try {\n+            return layoutSupplier.get();\n+        } catch (ArithmeticException ex) {\n+            throw new IllegalArgumentException(\"Layout size exceeds Long.MAX_VALUE\");\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+import java.util.Set;\n@@ -176,1 +177,0 @@\n-        checkHasNaturalAlignment(layout);\n@@ -178,1 +178,1 @@\n-            checkByteOrder(vl);\n+            checkSupported(vl);\n@@ -180,0 +180,1 @@\n+            checkHasNaturalAlignment(layout);\n@@ -195,0 +196,1 @@\n+            checkHasNaturalAlignment(layout);\n@@ -204,0 +206,1 @@\n+            checkHasNaturalAlignment(layout);\n@@ -228,0 +231,10 @@\n+    private static void checkSupported(ValueLayout valueLayout) {\n+        valueLayout = valueLayout.withoutName();\n+        if (valueLayout instanceof AddressLayout addressLayout) {\n+            valueLayout = addressLayout.withoutTargetLayout();\n+        }\n+        if (!SUPPORTED_LAYOUTS.contains(valueLayout.withoutName())) {\n+            throw new IllegalArgumentException(\"Unsupported layout: \" + valueLayout);\n+        }\n+    }\n+\n@@ -260,5 +273,11 @@\n-    private void checkByteOrder(ValueLayout vl) {\n-        if (vl.order() != linkerByteOrder()) {\n-            throw new IllegalArgumentException(\"Layout does not have the right byte order: \" + vl);\n-        }\n-    }\n+    private static final Set<MemoryLayout> SUPPORTED_LAYOUTS = Set.of(\n+            ValueLayout.JAVA_BOOLEAN,\n+            ValueLayout.JAVA_BYTE,\n+            ValueLayout.JAVA_CHAR,\n+            ValueLayout.JAVA_SHORT,\n+            ValueLayout.JAVA_INT,\n+            ValueLayout.JAVA_FLOAT,\n+            ValueLayout.JAVA_LONG,\n+            ValueLayout.JAVA_DOUBLE,\n+            ValueLayout.ADDRESS\n+    );\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.foreign.Utils;\n+\n@@ -71,1 +73,2 @@\n-        return new SequenceLayoutImpl(elementCount, elementLayout, byteAlignment(), name());\n+        return Utils.wrapOverflow(() ->\n+                new SequenceLayoutImpl(elementCount, elementLayout, byteAlignment(), name()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/SequenceLayoutImpl.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -120,0 +120,3 @@\n+            if (!Utils.isElementAligned((ValueLayout) this)) {\n+                throw new UnsupportedOperationException(\"Layout alignment greater than its size\");\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/ValueLayouts.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-import java.util.HashSet;\n@@ -60,1 +59,0 @@\n-import java.util.Set;\n@@ -212,1 +210,3 @@\n-        this.jarHandler = null;\n+        \/\/ the application class loader uses the built-in protocol handler to avoid protocol\n+        \/\/ handler lookup when opening JAR files on the class path.\n+        this.jarHandler = new sun.net.www.protocol.jar.Handler();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-        if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V21) {\n+        if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V22) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -314,0 +314,1 @@\n+    int V22 = 0 << 16 | 66;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Opcodes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,1 @@\n-    \/\/ Instance variables for shared functionality between\n-    \/\/ FieldAccessorGenerator and MethodAccessorGenerator\n+    \/\/ Instance variables for shared functionality\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/AccessorGenerator.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Constructor;\n-\n-\/** Uses Unsafe.allocateObject() to instantiate classes; only used for\n-    bootstrapping. *\/\n-\n-class BootstrapConstructorAccessorImpl extends ConstructorAccessorImpl {\n-    private final Constructor<?> constructor;\n-\n-    BootstrapConstructorAccessorImpl(Constructor<?> c) {\n-        this.constructor = c;\n-    }\n-\n-    public Object newInstance(Object[] args)\n-        throws IllegalArgumentException, InvocationTargetException\n-    {\n-        try {\n-            return UnsafeFieldAccessorImpl.unsafe.\n-                allocateInstance(constructor.getDeclaringClass());\n-        } catch (InstantiationException e) {\n-            throw new InvocationTargetException(e);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/BootstrapConstructorAccessorImpl.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,5 @@\n-    creating a new class loader which delegates to the one needed in\n-    order for proper resolution of the given bytecodes to occur. *\/\n+ *  creating a new class loader which delegates to the one needed in\n+ *  order for proper resolution of the given bytecodes to occur.\n+ *\n+ *  This is only used to define SerializationConstructorAccessor.\n+ *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ClassDefiner.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.Objects;\n-\n-\/** Delegates its invocation to another ConstructorAccessorImpl and can\n-    change its delegate at run time. *\/\n-\n-class DelegatingConstructorAccessorImpl extends ConstructorAccessorImpl {\n-    \/\/ initial non-null delegate\n-    private final ConstructorAccessorImpl initialDelegate;\n-    \/\/ alternative delegate: starts as null;\n-    \/\/ only single change from null -> non-null is guaranteed\n-    @Stable\n-    private ConstructorAccessorImpl altDelegate;\n-\n-    DelegatingConstructorAccessorImpl(ConstructorAccessorImpl delegate) {\n-        initialDelegate = Objects.requireNonNull(delegate);\n-    }\n-\n-    public Object newInstance(Object[] args)\n-      throws InstantiationException,\n-             IllegalArgumentException,\n-             InvocationTargetException\n-    {\n-        return delegate().newInstance(args);\n-    }\n-\n-    private ConstructorAccessorImpl delegate() {\n-        var d = altDelegate;\n-        return  d != null ? d : initialDelegate;\n-    }\n-\n-    void setDelegate(ConstructorAccessorImpl delegate) {\n-        altDelegate = Objects.requireNonNull(delegate);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DelegatingConstructorAccessorImpl.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import jdk.internal.vm.annotation.Stable;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.Objects;\n-\n-\/** Delegates its invocation to another MethodAccessorImpl and can\n-    change its delegate at run time. *\/\n-\n-class DelegatingMethodAccessorImpl extends MethodAccessorImpl {\n-    \/\/ initial non-null delegate\n-    private final MethodAccessorImpl initialDelegate;\n-    \/\/ alternative delegate: starts as null;\n-    \/\/ only single change from null -> non-null is guaranteed\n-    @Stable\n-    private MethodAccessorImpl altDelegate;\n-\n-    DelegatingMethodAccessorImpl(MethodAccessorImpl delegate) {\n-        initialDelegate = Objects.requireNonNull(delegate);\n-    }\n-\n-    @Override\n-    public Object invoke(Object obj, Object[] args)\n-        throws IllegalArgumentException, InvocationTargetException\n-    {\n-        return delegate().invoke(obj, args);\n-    }\n-\n-    @Override\n-    public Object invoke(Object obj, Object[] args, Class<?> caller)\n-            throws IllegalArgumentException, InvocationTargetException\n-    {\n-        return delegate().invoke(obj, args, caller);\n-    }\n-\n-    private MethodAccessorImpl delegate() {\n-        var d = altDelegate;\n-        return  d != null ? d : initialDelegate;\n-    }\n-\n-    void setDelegate(MethodAccessorImpl delegate) {\n-        altDelegate = Objects.requireNonNull(delegate);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DelegatingMethodAccessorImpl.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -306,0 +306,11 @@\n+     *\n+     * Native accessor, i.e. VM reflection implementation, is used if one of\n+     * the following conditions is met:\n+     * 1. during VM early startup before method handle support is fully initialized\n+     * 2. a Java native method\n+     * 3. -Djdk.reflect.useNativeAccessorOnly=true is set\n+     * 4. the member takes a variable number of arguments and the last parameter\n+     *    is not an array (see details below)\n+     * 5. the member's method type has an arity >= 255\n+     *\n+     * Otherwise, direct invocation of method handles is used.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodHandleAccessorFactory.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.*;\n-import jdk.internal.misc.Unsafe;\n-\n-\/** Used only for the first few invocations of a Constructor;\n-    afterward, switches to bytecode-based implementation *\/\n-\n-class NativeConstructorAccessorImpl extends ConstructorAccessorImpl {\n-    private static final Unsafe U = Unsafe.getUnsafe();\n-    private static final long GENERATED_OFFSET\n-        = U.objectFieldOffset(NativeConstructorAccessorImpl.class, \"generated\");\n-\n-    private final Constructor<?> c;\n-    private final DelegatingConstructorAccessorImpl parent;\n-    private int numInvocations;\n-    private volatile int generated;\n-\n-    NativeConstructorAccessorImpl(Constructor<?> c) {\n-        this.c = c;\n-        this.parent = new DelegatingConstructorAccessorImpl(this);\n-    }\n-\n-    public Object newInstance(Object[] args)\n-        throws InstantiationException,\n-               IllegalArgumentException,\n-               InvocationTargetException\n-    {\n-        \/\/ We can't inflate a constructor belonging to a hidden class\n-        \/\/ because that kind of class can't be referred to by name, hence can't\n-        \/\/ be found from the generated bytecode.\n-        if (++numInvocations > ReflectionFactory.inflationThreshold()\n-                && !c.getDeclaringClass().isHidden()\n-                && generated == 0\n-                && U.compareAndSetInt(this, GENERATED_OFFSET, 0, 1)) {\n-            try {\n-                ConstructorAccessorImpl acc = (ConstructorAccessorImpl)\n-                    new MethodAccessorGenerator().\n-                        generateConstructor(c.getDeclaringClass(),\n-                                            c.getParameterTypes(),\n-                                            c.getModifiers());\n-                parent.setDelegate(acc);\n-            } catch (Throwable t) {\n-                \/\/ Throwable happens in generateConstructor, restore generated to 0\n-                generated = 0;\n-                throw t;\n-            }\n-        }\n-\n-        return newInstance0(c, args);\n-    }\n-\n-    DelegatingConstructorAccessorImpl getParent() {\n-        return parent;\n-    }\n-\n-    private static native Object newInstance0(Constructor<?> c, Object[] args)\n-        throws InstantiationException,\n-               IllegalArgumentException,\n-               InvocationTargetException;\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/NativeConstructorAccessorImpl.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.*;\n-import jdk.internal.misc.Unsafe;\n-\n-\/** Used only for the first few invocations of a Method; afterward,\n-    switches to bytecode-based implementation *\/\n-\n-class NativeMethodAccessorImpl extends MethodAccessorImpl {\n-     private static final Unsafe U = Unsafe.getUnsafe();\n-     private static final long GENERATED_OFFSET\n-        = U.objectFieldOffset(NativeMethodAccessorImpl.class, \"generated\");\n-\n-    private final Method method;\n-    private final DelegatingMethodAccessorImpl parent;\n-    private int numInvocations;\n-    private volatile int generated;\n-\n-    NativeMethodAccessorImpl(Method method) {\n-        this.method = method;\n-        this.parent = new DelegatingMethodAccessorImpl(this);\n-    }\n-\n-    public Object invoke(Object obj, Object[] args)\n-        throws IllegalArgumentException, InvocationTargetException\n-    {\n-        \/\/ We can't inflate methods belonging to hidden classes because\n-        \/\/ that kind of class can't be referred to by name, hence can't be\n-        \/\/ found from the generated bytecode.\n-        if (++numInvocations > ReflectionFactory.inflationThreshold()\n-                && !method.getDeclaringClass().isHidden()\n-                && generated == 0\n-                && U.compareAndSetInt(this, GENERATED_OFFSET, 0, 1)) {\n-            try {\n-                MethodAccessorImpl acc = (MethodAccessorImpl)\n-                    new MethodAccessorGenerator().\n-                        generateMethod(method.getDeclaringClass(),\n-                                       method.getName(),\n-                                       method.getParameterTypes(),\n-                                       method.getReturnType(),\n-                                       method.getModifiers());\n-                parent.setDelegate(acc);\n-            } catch (Throwable t) {\n-                \/\/ Throwable happens in generateMethod, restore generated to 0\n-                generated = 0;\n-                throw t;\n-            }\n-        }\n-\n-        return invoke0(method, obj, args);\n-    }\n-\n-    DelegatingMethodAccessorImpl getParent() {\n-        return parent;\n-    }\n-\n-    private static native Object invoke0(Method m, Object obj, Object[] args);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/NativeMethodAccessorImpl.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -144,5 +144,1 @@\n-        if (useFieldHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newFieldAccessor(field, isReadOnly);\n-        } else {\n-            return UnsafeFieldAccessorFactory.newFieldAccessor(field, isReadOnly);\n-        }\n+        return MethodHandleAccessorFactory.newFieldAccessor(field, isReadOnly);\n@@ -158,23 +154,1 @@\n-        if (useMethodHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newMethodAccessor(method, callerSensitive);\n-        } else {\n-            if (noInflation() && !method.getDeclaringClass().isHidden()) {\n-                return generateMethodAccessor(method);\n-            } else {\n-                NativeMethodAccessorImpl acc = new NativeMethodAccessorImpl(method);\n-                return acc.getParent();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Generate the MethodAccessor that invokes the given method with\n-     * bytecode invocation.\n-     *\/\n-    static MethodAccessorImpl generateMethodAccessor(Method method) {\n-        return (MethodAccessorImpl)new MethodAccessorGenerator()\n-                .generateMethod(method.getDeclaringClass(),\n-                                method.getName(),\n-                                method.getParameterTypes(),\n-                                method.getReturnType(),\n-                                method.getModifiers());\n+        return MethodHandleAccessorFactory.newMethodAccessor(method, callerSensitive);\n@@ -199,20 +173,1 @@\n-        if (useMethodHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newConstructorAccessor(c);\n-        } else {\n-            \/\/ Bootstrapping issue: since we use Class.newInstance() in\n-            \/\/ the ConstructorAccessor generation process, we have to\n-            \/\/ break the cycle here.\n-            if (Reflection.isSubclassOf(declaringClass, ConstructorAccessorImpl.class)) {\n-                return new BootstrapConstructorAccessorImpl(c);\n-            }\n-\n-            if (noInflation() && !c.getDeclaringClass().isHidden()) {\n-                return new MethodAccessorGenerator().\n-                        generateConstructor(c.getDeclaringClass(),\n-                                            c.getParameterTypes(),\n-                                            c.getModifiers());\n-            } else {\n-                NativeConstructorAccessorImpl acc = new NativeConstructorAccessorImpl(c);\n-                return acc.getParent();\n-            }\n-        }\n+        return MethodHandleAccessorFactory.newConstructorAccessor(c);\n@@ -429,1 +384,1 @@\n-        ConstructorAccessor acc = new MethodAccessorGenerator().\n+        ConstructorAccessor acc = new SerializationConstructorAccessorGenerator().\n@@ -598,18 +553,4 @@\n-    \/\/ Package-private to be accessible to NativeMethodAccessorImpl\n-    \/\/ and NativeConstructorAccessorImpl\n-    static int inflationThreshold() {\n-        return config().inflationThreshold;\n-    }\n-\n-    static boolean noInflation() {\n-        return config().noInflation;\n-    }\n-\n-    static boolean useMethodHandleAccessor() {\n-        return (config().useDirectMethodHandle & METHOD_MH_ACCESSOR) == METHOD_MH_ACCESSOR;\n-    }\n-\n-    static boolean useFieldHandleAccessor() {\n-        return (config().useDirectMethodHandle & FIELD_MH_ACCESSOR) == FIELD_MH_ACCESSOR;\n-    }\n-\n+    \/*\n+     * If -Djdk.reflect.useNativeAccessorOnly is set, use the native accessor only.\n+     * For testing purpose only.\n+     *\/\n@@ -624,5 +565,0 @@\n-    \/\/ New implementation uses direct invocation of method handles\n-    private static final int METHOD_MH_ACCESSOR = 0x1;\n-    private static final int FIELD_MH_ACCESSOR = 0x2;\n-    private static final int ALL_MH_ACCESSORS = METHOD_MH_ACCESSOR | FIELD_MH_ACCESSOR;\n-\n@@ -640,15 +576,1 @@\n-    \/\/ \"Inflation\" mechanism. Loading bytecodes to implement\n-    \/\/ Method.invoke() and Constructor.newInstance() currently costs\n-    \/\/ 3-4x more than an invocation via native code for the first\n-    \/\/ invocation (though subsequent invocations have been benchmarked\n-    \/\/ to be over 20x faster). Unfortunately this cost increases\n-    \/\/ startup time for certain applications that use reflection\n-    \/\/ intensively (but only once per class) to bootstrap themselves.\n-    \/\/ To avoid this penalty we reuse the existing JVM entry points\n-    \/\/ for the first few invocations of Methods and Constructors and\n-    \/\/ then switch to the bytecode-based implementations.\n-\n-    private static final Config DEFAULT_CONFIG = new Config(false, \/\/ noInflation\n-                                                            15, \/\/ inflationThreshold\n-                                                            ALL_MH_ACCESSORS, \/\/ useDirectMethodHandle\n-                                                            false, \/\/ useNativeAccessorOnly\n+    private static final Config DEFAULT_CONFIG = new Config(false, \/\/ useNativeAccessorOnly\n@@ -668,4 +590,1 @@\n-    private record Config(boolean noInflation,\n-                          int inflationThreshold,\n-                          int useDirectMethodHandle,\n-                          boolean useNativeAccessorOnly,\n+    private record Config(boolean useNativeAccessorOnly,\n@@ -681,3 +600,1 @@\n-        \/\/ Defer initialization until module system is initialized so as\n-        \/\/ to avoid inflation and spinning bytecode in unnamed modules\n-        \/\/ during early startup.\n+        \/\/ Always use the default configuration until the module system is initialized.\n@@ -694,6 +611,0 @@\n-        boolean noInflation = DEFAULT_CONFIG.noInflation;\n-        int inflationThreshold = DEFAULT_CONFIG.inflationThreshold;\n-        int useDirectMethodHandle = DEFAULT_CONFIG.useDirectMethodHandle;\n-        boolean useNativeAccessorOnly = DEFAULT_CONFIG.useNativeAccessorOnly;\n-        boolean disableSerialConstructorChecks = DEFAULT_CONFIG.disableSerialConstructorChecks;\n-\n@@ -701,29 +612,3 @@\n-        String val = props.getProperty(\"sun.reflect.noInflation\");\n-        if (val != null && val.equals(\"true\")) {\n-            noInflation = true;\n-        }\n-\n-        val = props.getProperty(\"sun.reflect.inflationThreshold\");\n-        if (val != null) {\n-            try {\n-                inflationThreshold = Integer.parseInt(val);\n-            } catch (NumberFormatException e) {\n-                throw new RuntimeException(\"Unable to parse property sun.reflect.inflationThreshold\", e);\n-            }\n-        }\n-        val = props.getProperty(\"jdk.reflect.useDirectMethodHandle\");\n-        if (val != null) {\n-            if (val.equals(\"false\")) {\n-                useDirectMethodHandle = 0;\n-            } else if (val.equals(\"methods\")) {\n-                useDirectMethodHandle = METHOD_MH_ACCESSOR;\n-            } else if (val.equals(\"fields\")) {\n-                useDirectMethodHandle = FIELD_MH_ACCESSOR;\n-            }\n-        }\n-        val = props.getProperty(\"jdk.reflect.useNativeAccessorOnly\");\n-        if (val != null && val.equals(\"true\")) {\n-            useNativeAccessorOnly = true;\n-        }\n-\n-        disableSerialConstructorChecks =\n+        boolean useNativeAccessorOnly =\n+            \"true\".equals(props.getProperty(\"jdk.reflect.useNativeAccessorOnly\"));\n+        boolean disableSerialConstructorChecks =\n@@ -732,5 +617,1 @@\n-        return new Config(noInflation,\n-                          inflationThreshold,\n-                          useDirectMethodHandle,\n-                          useNativeAccessorOnly,\n-                          disableSerialConstructorChecks);\n+        return new Config(useNativeAccessorOnly, disableSerialConstructorChecks);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":15,"deletions":134,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,7 +33,0 @@\n-\/** Generator for jdk.internal.reflect.MethodAccessor and\n-    jdk.internal.reflect.ConstructorAccessor objects using bytecodes to\n-    implement reflection. A java.lang.reflect.Method or\n-    java.lang.reflect.Constructor object can delegate its invoke or\n-    newInstance method to an accessor using native code or to one\n-    generated by this class. (Methods and Constructors were merged\n-    together in this class to ensure maximum code sharing.) *\/\n@@ -41,1 +34,5 @@\n-class MethodAccessorGenerator extends AccessorGenerator {\n+\/** Generator for jdk.internal.reflect.SerializationConstructorAccessorImpl\n+    objects using bytecodes to implement a constructor for serialization\n+    returned by ReflectionFactory::newConstructorForSerialization. *\/\n+\n+class SerializationConstructorAccessorGenerator extends AccessorGenerator {\n@@ -67,36 +64,1 @@\n-    MethodAccessorGenerator() {\n-    }\n-\n-    \/** This routine is not thread-safe *\/\n-    public MethodAccessor generateMethod(Class<?> declaringClass,\n-                                         String   name,\n-                                         Class<?>[] parameterTypes,\n-                                         Class<?>   returnType,\n-                                         int modifiers)\n-    {\n-        return (MethodAccessor) generate(declaringClass,\n-                                         name,\n-                                         parameterTypes,\n-                                         returnType,\n-                                         modifiers,\n-                                         false,\n-                                         false,\n-                                         false,\n-                                         null);\n-    }\n-\n-    \/** This routine is not thread-safe *\/\n-    public ConstructorAccessor generateConstructor(Class<?> declaringClass,\n-                                                   Class<?>[] parameterTypes,\n-                                                   int modifiers)\n-    {\n-        boolean isStaticFactory = declaringClass.isValue();\n-        return (ConstructorAccessor) generate(declaringClass,\n-                                              \"<init>\",\n-                                              parameterTypes,\n-                                              isStaticFactory ? PrimitiveClass.asValueType(declaringClass) : Void.TYPE,\n-                                              modifiers,\n-                                              true,\n-                                              isStaticFactory,\n-                                              false,\n-                                              null);\n+    SerializationConstructorAccessorGenerator() {\n@@ -112,0 +74,1 @@\n+        boolean isStaticFactory = declaringClass.isValue();\n@@ -116,1 +79,1 @@\n-                     Void.TYPE,\n+                     isStaticFactory ? PrimitiveClass.asValueType(declaringClass) : Void.TYPE,\n@@ -119,1 +82,1 @@\n-                     false,\n+                     isStaticFactory,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/SerializationConstructorAccessorGenerator.java","additions":10,"deletions":47,"binary":false,"changes":57,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodAccessorGenerator.java","status":"renamed"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeBooleanFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeBooleanFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Boolean.valueOf(getBoolean(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getBoolean(obj, fieldOffset);\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Boolean) {\n-            unsafe.putBoolean(obj, fieldOffset, ((Boolean) value).booleanValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(z);\n-        }\n-        unsafe.putBoolean(obj, fieldOffset, z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeBooleanFieldAccessorImpl.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeByteFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeByteFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Byte.valueOf(getByte(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getByte(obj, fieldOffset);\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putByte(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(b);\n-        }\n-        unsafe.putByte(obj, fieldOffset, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeByteFieldAccessorImpl.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeCharacterFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeCharacterFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Character.valueOf(getChar(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getChar(obj, fieldOffset);\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putChar(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(c);\n-        }\n-        unsafe.putChar(obj, fieldOffset, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeCharacterFieldAccessorImpl.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -1,164 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeDoubleFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeDoubleFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Double.valueOf(getDouble(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getDouble(obj, fieldOffset);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putDouble(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putDouble(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putDouble(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putDouble(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putDouble(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putDouble(obj, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        if (value instanceof Double) {\n-            unsafe.putDouble(obj, fieldOffset, ((Double) value).doubleValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(d);\n-        }\n-        unsafe.putDouble(obj, fieldOffset, d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeDoubleFieldAccessorImpl.java","additions":0,"deletions":164,"binary":false,"changes":164,"status":"deleted"},{"patch":"@@ -1,129 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-\n-class UnsafeFieldAccessorFactory {\n-    static FieldAccessor newFieldAccessor(Field field, boolean isReadOnly) {\n-        Class<?> type = field.getType();\n-        boolean isStatic = Modifier.isStatic(field.getModifiers());\n-        boolean isFinal = Modifier.isFinal(field.getModifiers());\n-        boolean isVolatile = Modifier.isVolatile(field.getModifiers());\n-        boolean isQualified = isFinal || isVolatile;\n-        if (isStatic) {\n-            \/\/ This code path does not guarantee that the field's\n-            \/\/ declaring class has been initialized, but it must be\n-            \/\/ before performing reflective operations.\n-            UnsafeFieldAccessorImpl.unsafe.ensureClassInitialized(field.getDeclaringClass());\n-\n-            if (!isQualified) {\n-                if (type == Boolean.TYPE) {\n-                    return new UnsafeStaticBooleanFieldAccessorImpl(field);\n-                } else if (type == Byte.TYPE) {\n-                    return new UnsafeStaticByteFieldAccessorImpl(field);\n-                } else if (type == Short.TYPE) {\n-                    return new UnsafeStaticShortFieldAccessorImpl(field);\n-                } else if (type == Character.TYPE) {\n-                    return new UnsafeStaticCharacterFieldAccessorImpl(field);\n-                } else if (type == Integer.TYPE) {\n-                    return new UnsafeStaticIntegerFieldAccessorImpl(field);\n-                } else if (type == Long.TYPE) {\n-                    return new UnsafeStaticLongFieldAccessorImpl(field);\n-                } else if (type == Float.TYPE) {\n-                    return new UnsafeStaticFloatFieldAccessorImpl(field);\n-                } else if (type == Double.TYPE) {\n-                    return new UnsafeStaticDoubleFieldAccessorImpl(field);\n-                } else {\n-                    return new UnsafeStaticObjectFieldAccessorImpl(field);\n-                }\n-            } else {\n-                if (type == Boolean.TYPE) {\n-                    return new UnsafeQualifiedStaticBooleanFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Byte.TYPE) {\n-                    return new UnsafeQualifiedStaticByteFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Short.TYPE) {\n-                    return new UnsafeQualifiedStaticShortFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Character.TYPE) {\n-                    return new UnsafeQualifiedStaticCharacterFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Integer.TYPE) {\n-                    return new UnsafeQualifiedStaticIntegerFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Long.TYPE) {\n-                    return new UnsafeQualifiedStaticLongFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Float.TYPE) {\n-                    return new UnsafeQualifiedStaticFloatFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Double.TYPE) {\n-                    return new UnsafeQualifiedStaticDoubleFieldAccessorImpl(field, isReadOnly);\n-                } else {\n-                    return new UnsafeQualifiedStaticObjectFieldAccessorImpl(field, isReadOnly);\n-                }\n-            }\n-        } else {\n-            if (!isQualified) {\n-                if (type == Boolean.TYPE) {\n-                    return new UnsafeBooleanFieldAccessorImpl(field);\n-                } else if (type == Byte.TYPE) {\n-                    return new UnsafeByteFieldAccessorImpl(field);\n-                } else if (type == Short.TYPE) {\n-                    return new UnsafeShortFieldAccessorImpl(field);\n-                } else if (type == Character.TYPE) {\n-                    return new UnsafeCharacterFieldAccessorImpl(field);\n-                } else if (type == Integer.TYPE) {\n-                    return new UnsafeIntegerFieldAccessorImpl(field);\n-                } else if (type == Long.TYPE) {\n-                    return new UnsafeLongFieldAccessorImpl(field);\n-                } else if (type == Float.TYPE) {\n-                    return new UnsafeFloatFieldAccessorImpl(field);\n-                } else if (type == Double.TYPE) {\n-                    return new UnsafeDoubleFieldAccessorImpl(field);\n-                } else {\n-                    return new UnsafeObjectFieldAccessorImpl(field);\n-                }\n-            } else {\n-                if (type == Boolean.TYPE) {\n-                    return new UnsafeQualifiedBooleanFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Byte.TYPE) {\n-                    return new UnsafeQualifiedByteFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Short.TYPE) {\n-                    return new UnsafeQualifiedShortFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Character.TYPE) {\n-                    return new UnsafeQualifiedCharacterFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Integer.TYPE) {\n-                    return new UnsafeQualifiedIntegerFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Long.TYPE) {\n-                    return new UnsafeQualifiedLongFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Float.TYPE) {\n-                    return new UnsafeQualifiedFloatFieldAccessorImpl(field, isReadOnly);\n-                } else if (type == Double.TYPE) {\n-                    return new UnsafeQualifiedDoubleFieldAccessorImpl(field, isReadOnly);\n-                } else {\n-                    return new UnsafeQualifiedObjectFieldAccessorImpl(field, isReadOnly);\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeFieldAccessorFactory.java","additions":0,"deletions":129,"binary":false,"changes":129,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-\n-import jdk.internal.value.PrimitiveClass;\n-import jdk.internal.misc.Unsafe;\n-\n-\/** Base class for jdk.internal.misc.Unsafe-based FieldAccessors. The\n-    observation is that there are only nine types of fields from the\n-    standpoint of reflection code: the eight primitive types and\n-    Object. Using class Unsafe instead of generated bytecodes saves\n-    memory and loading time for the dynamically-generated\n-    FieldAccessors. *\/\n-\n-abstract class UnsafeFieldAccessorImpl extends FieldAccessorImpl {\n-    static final Unsafe unsafe = Unsafe.getUnsafe();\n-\n-    protected final long    fieldOffset;\n-    protected final boolean isFinal;\n-\n-    UnsafeFieldAccessorImpl(Field field) {\n-        super(field);\n-        int mods = field.getModifiers();\n-        this.isFinal = Modifier.isFinal(mods);\n-        if (Modifier.isStatic(mods))\n-            fieldOffset = unsafe.staticFieldOffset(field);\n-        else\n-            fieldOffset = unsafe.objectFieldOffset(field);\n-    }\n-\n-    protected boolean isFlattened() {\n-        return unsafe.isFlattened(field);\n-    }\n-\n-    protected boolean canBeNull() {\n-        return !PrimitiveClass.isPrimitiveClass(field.getType()) ||\n-                PrimitiveClass.isPrimaryType(field.getType());\n-    }\n-\n-    protected Object checkValue(Object value) {\n-        if (!canBeNull() && value == null)\n-            throw new NullPointerException(field + \" cannot be set to null\");\n-\n-        if (value != null) {\n-            Class<?> type = value.getClass();\n-            if (PrimitiveClass.isPrimitiveClass(type)) {\n-                type = PrimitiveClass.asValueType(type);\n-            }\n-            if (!field.getType().isInstance(value)) {\n-                throwSetIllegalArgumentException(value);\n-            }\n-        }\n-        return value;\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeFieldAccessorImpl.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,160 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeFloatFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeFloatFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Float.valueOf(getFloat(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getFloat(obj, fieldOffset);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getFloat(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putFloat(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putFloat(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putFloat(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putFloat(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putFloat(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putFloat(obj, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(f);\n-        }\n-        unsafe.putFloat(obj, fieldOffset, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeFloatFieldAccessorImpl.java","additions":0,"deletions":160,"binary":false,"changes":160,"status":"deleted"},{"patch":"@@ -1,152 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeIntegerFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeIntegerFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Integer.valueOf(getInt(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getInt(obj, fieldOffset);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putInt(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putInt(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putInt(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putInt(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(i);\n-        }\n-        unsafe.putInt(obj, fieldOffset, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeIntegerFieldAccessorImpl.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"},{"patch":"@@ -1,156 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeLongFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeLongFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Long.valueOf(getLong(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getLong(obj, fieldOffset);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putLong(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putLong(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putLong(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putLong(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putLong(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(l);\n-        }\n-        unsafe.putLong(obj, fieldOffset, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeLongFieldAccessorImpl.java","additions":0,"deletions":156,"binary":false,"changes":156,"status":"deleted"},{"patch":"@@ -1,135 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeObjectFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeObjectFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return isFlattened() ? unsafe.getValue(obj, fieldOffset, field.getType())\n-                             : unsafe.getReference(obj, fieldOffset, field.getType());\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        checkValue(value);\n-        if (isFlattened()) {\n-            unsafe.putValue(obj, fieldOffset, field.getType(), value);\n-        } else {\n-            unsafe.putReference(obj, fieldOffset, value);\n-        }\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeObjectFieldAccessorImpl.java","additions":0,"deletions":135,"binary":false,"changes":135,"status":"deleted"},{"patch":"@@ -1,142 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedBooleanFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedBooleanFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Boolean.valueOf(getBoolean(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getBooleanVolatile(obj, fieldOffset);\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Boolean) {\n-            unsafe.putBooleanVolatile(obj, fieldOffset, ((Boolean) value).booleanValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(z);\n-        }\n-        unsafe.putBooleanVolatile(obj, fieldOffset, z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedBooleanFieldAccessorImpl.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"deleted"},{"patch":"@@ -1,142 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedByteFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedByteFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Byte.valueOf(getByte(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getByteVolatile(obj, fieldOffset);\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putByteVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(b);\n-        }\n-        unsafe.putByteVolatile(obj, fieldOffset, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedByteFieldAccessorImpl.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"deleted"},{"patch":"@@ -1,142 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedCharacterFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedCharacterFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Character.valueOf(getChar(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getCharVolatile(obj, fieldOffset);\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putCharVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(c);\n-        }\n-        unsafe.putCharVolatile(obj, fieldOffset, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedCharacterFieldAccessorImpl.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"deleted"},{"patch":"@@ -1,166 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedDoubleFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedDoubleFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Double.valueOf(getDouble(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getDoubleVolatile(obj, fieldOffset);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        if (value instanceof Double) {\n-            unsafe.putDoubleVolatile(obj, fieldOffset, ((Double) value).doubleValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(d);\n-        }\n-        unsafe.putDoubleVolatile(obj, fieldOffset, d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedDoubleFieldAccessorImpl.java","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import jdk.internal.misc.Unsafe;\n-\n-\/**\n- * Base class for jdk.internal.misc.Unsafe-based FieldAccessors for fields with\n- * final or volatile qualifiers. These differ from unqualified\n- * versions in that (1) they check for read-only status (2) they use\n- * the volatile forms of Unsafe get\/put methods. (When accessed via\n- * reflection, finals act as slightly \"lighter\" forms of volatiles. So\n- * the volatile forms are heavier than necessary in terms of\n- * underlying reordering rules and memory barriers, but preserve\n- * correctness.)\n- *\/\n-\n-abstract class UnsafeQualifiedFieldAccessorImpl\n-    extends UnsafeFieldAccessorImpl\n-{\n-    protected final boolean isReadOnly;\n-\n-    UnsafeQualifiedFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field);\n-        this.isReadOnly = isReadOnly;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedFieldAccessorImpl.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,162 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedFloatFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedFloatFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Float.valueOf(getFloat(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getFloatVolatile(obj, fieldOffset);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getFloat(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putFloatVolatile(obj, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(f);\n-        }\n-        unsafe.putFloatVolatile(obj, fieldOffset, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedFloatFieldAccessorImpl.java","additions":0,"deletions":162,"binary":false,"changes":162,"status":"deleted"},{"patch":"@@ -1,154 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedIntegerFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedIntegerFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Integer.valueOf(getInt(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getIntVolatile(obj, fieldOffset);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putIntVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putIntVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putIntVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putIntVolatile(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(i);\n-        }\n-        unsafe.putIntVolatile(obj, fieldOffset, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedIntegerFieldAccessorImpl.java","additions":0,"deletions":154,"binary":false,"changes":154,"status":"deleted"},{"patch":"@@ -1,158 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedLongFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedLongFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Long.valueOf(getLong(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getLongVolatile(obj, fieldOffset);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putLongVolatile(obj, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(l);\n-        }\n-        unsafe.putLongVolatile(obj, fieldOffset, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedLongFieldAccessorImpl.java","additions":0,"deletions":158,"binary":false,"changes":158,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedObjectFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedObjectFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return isFlattened() ? unsafe.getValue(obj, fieldOffset, field.getType())\n-                             : unsafe.getReferenceVolatile(obj, fieldOffset, field.getType());\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        checkValue(value);\n-        if (isFlattened()) {\n-            unsafe.putValue(obj, fieldOffset, field.getType(), value);\n-        } else {\n-            unsafe.putReferenceVolatile(obj, fieldOffset, value);\n-        }\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedObjectFieldAccessorImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedShortFieldAccessorImpl\n-    extends UnsafeQualifiedFieldAccessorImpl\n-{\n-    UnsafeQualifiedShortFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Short.valueOf(getShort(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getShortVolatile(obj, fieldOffset);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putShortVolatile(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putShortVolatile(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setShort(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(s);\n-        }\n-        unsafe.putShortVolatile(obj, fieldOffset, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedShortFieldAccessorImpl.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticBooleanFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticBooleanFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Boolean.valueOf(getBoolean(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        return unsafe.getBooleanVolatile(base, fieldOffset);\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Boolean) {\n-            unsafe.putBooleanVolatile(base, fieldOffset, ((Boolean) value).booleanValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(z);\n-        }\n-        unsafe.putBooleanVolatile(base, fieldOffset, z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticBooleanFieldAccessorImpl.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticByteFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticByteFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Byte.valueOf(getByte(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        return unsafe.getByteVolatile(base, fieldOffset);\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putByteVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(b);\n-        }\n-        unsafe.putByteVolatile(base, fieldOffset, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticByteFieldAccessorImpl.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,139 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticCharacterFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticCharacterFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Character.valueOf(getChar(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        return unsafe.getCharVolatile(base, fieldOffset);\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putCharVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(c);\n-        }\n-        unsafe.putCharVolatile(base, fieldOffset, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticCharacterFieldAccessorImpl.java","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -1,163 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticDoubleFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticDoubleFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Double.valueOf(getDouble(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return unsafe.getDoubleVolatile(base, fieldOffset);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        if (value instanceof Double) {\n-            unsafe.putDoubleVolatile(base, fieldOffset, ((Double) value).doubleValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(d);\n-        }\n-        unsafe.putDoubleVolatile(base, fieldOffset, d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticDoubleFieldAccessorImpl.java","additions":0,"deletions":163,"binary":false,"changes":163,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.security.AccessController;\n-import jdk.internal.misc.Unsafe;\n-\n-\/** Base class for jdk.internal.misc.Unsafe-based FieldAccessors for final or\n-    static volatile fields.  *\/\n-\n-abstract class UnsafeQualifiedStaticFieldAccessorImpl\n-    extends UnsafeStaticFieldAccessorImpl\n-{\n-    protected final boolean isReadOnly;\n-\n-    UnsafeQualifiedStaticFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field);\n-        this.isReadOnly = isReadOnly;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticFieldAccessorImpl.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,159 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticFloatFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticFloatFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Float.valueOf(getFloat(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return unsafe.getFloatVolatile(base, fieldOffset);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getFloat(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putFloatVolatile(base, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(f);\n-        }\n-        unsafe.putFloatVolatile(base, fieldOffset, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticFloatFieldAccessorImpl.java","additions":0,"deletions":159,"binary":false,"changes":159,"status":"deleted"},{"patch":"@@ -1,151 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticIntegerFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticIntegerFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Integer.valueOf(getInt(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return unsafe.getIntVolatile(base, fieldOffset);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putIntVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putIntVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putIntVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putIntVolatile(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(i);\n-        }\n-        unsafe.putIntVolatile(base, fieldOffset, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticIntegerFieldAccessorImpl.java","additions":0,"deletions":151,"binary":false,"changes":151,"status":"deleted"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticLongFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticLongFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Long.valueOf(getLong(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return unsafe.getLongVolatile(base, fieldOffset);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putLongVolatile(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(l);\n-        }\n-        unsafe.putLongVolatile(base, fieldOffset, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticLongFieldAccessorImpl.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -1,135 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticObjectFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticObjectFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return isFlattened() ? unsafe.getValue(obj, fieldOffset, field.getType())\n-                             : unsafe.getReferenceVolatile(base, fieldOffset, field.getType());\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        checkValue(value);\n-        if (isFlattened()) {\n-            unsafe.putValue(base, fieldOffset, field.getType(), value);\n-        } else {\n-            unsafe.putReferenceVolatile(base, fieldOffset, value);\n-        }\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticObjectFieldAccessorImpl.java","additions":0,"deletions":135,"binary":false,"changes":135,"status":"deleted"},{"patch":"@@ -1,143 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeQualifiedStaticShortFieldAccessorImpl\n-    extends UnsafeQualifiedStaticFieldAccessorImpl\n-{\n-    UnsafeQualifiedStaticShortFieldAccessorImpl(Field field, boolean isReadOnly) {\n-        super(field, isReadOnly);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Short.valueOf(getShort(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return unsafe.getShortVolatile(base, fieldOffset);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putShortVolatile(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putShortVolatile(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setShort(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isReadOnly) {\n-            throwFinalFieldIllegalAccessException(s);\n-        }\n-        unsafe.putShortVolatile(base, fieldOffset, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeQualifiedStaticShortFieldAccessorImpl.java","additions":0,"deletions":143,"binary":false,"changes":143,"status":"deleted"},{"patch":"@@ -1,144 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeShortFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    UnsafeShortFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Short.valueOf(getShort(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        ensureObj(obj);\n-        return unsafe.getShort(obj, fieldOffset);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putShort(obj, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putShort(obj, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setShort(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        ensureObj(obj);\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(s);\n-        }\n-        unsafe.putShort(obj, fieldOffset, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeShortFieldAccessorImpl.java","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticBooleanFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticBooleanFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Boolean.valueOf(getBoolean(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        return unsafe.getBoolean(base, fieldOffset);\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Boolean) {\n-            unsafe.putBoolean(base, fieldOffset, ((Boolean) value).booleanValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(z);\n-        }\n-        unsafe.putBoolean(base, fieldOffset, z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticBooleanFieldAccessorImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticByteFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticByteFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Byte.valueOf(getByte(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        return unsafe.getByte(base, fieldOffset);\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getByte(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putByte(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(b);\n-        }\n-        unsafe.putByte(base, fieldOffset, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticByteFieldAccessorImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticCharacterFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticCharacterFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Character.valueOf(getChar(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        return unsafe.getChar(base, fieldOffset);\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getChar(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putChar(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(c);\n-        }\n-        unsafe.putChar(base, fieldOffset, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticCharacterFieldAccessorImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,161 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticDoubleFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticDoubleFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Double.valueOf(getDouble(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return unsafe.getDouble(base, fieldOffset);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putDouble(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putDouble(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putDouble(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putDouble(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putDouble(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putDouble(base, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        if (value instanceof Double) {\n-            unsafe.putDouble(base, fieldOffset, ((Double) value).doubleValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setDouble(obj, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(d);\n-        }\n-        unsafe.putDouble(base, fieldOffset, d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticDoubleFieldAccessorImpl.java","additions":0,"deletions":161,"binary":false,"changes":161,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-import java.util.Set;\n-\n-\/** Base class for jdk.internal.misc.Unsafe-based FieldAccessors for static\n-    fields. The observation is that there are only nine types of\n-    fields from the standpoint of reflection code: the eight primitive\n-    types and Object. Using class Unsafe instead of generated\n-    bytecodes saves memory and loading time for the\n-    dynamically-generated FieldAccessors. *\/\n-\n-abstract class UnsafeStaticFieldAccessorImpl extends UnsafeFieldAccessorImpl {\n-    static {\n-        Reflection.registerFieldsToFilter(UnsafeStaticFieldAccessorImpl.class,\n-                                          Set.of(\"base\"));\n-    }\n-\n-    protected final Object base; \/\/ base\n-\n-    UnsafeStaticFieldAccessorImpl(Field field) {\n-        super(field);\n-        base = unsafe.staticFieldBase(field);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticFieldAccessorImpl.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,157 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticFloatFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticFloatFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Float.valueOf(getFloat(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return unsafe.getFloat(base, fieldOffset);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getFloat(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putFloat(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putFloat(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putFloat(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putFloat(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putFloat(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        if (value instanceof Float) {\n-            unsafe.putFloat(base, fieldOffset, ((Float) value).floatValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setFloat(obj, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(f);\n-        }\n-        unsafe.putFloat(base, fieldOffset, f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticFloatFieldAccessorImpl.java","additions":0,"deletions":157,"binary":false,"changes":157,"status":"deleted"},{"patch":"@@ -1,149 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticIntegerFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticIntegerFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Integer.valueOf(getInt(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return unsafe.getInt(base, fieldOffset);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getInt(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putInt(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putInt(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putInt(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putInt(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setInt(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(i);\n-        }\n-        unsafe.putInt(base, fieldOffset, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticIntegerFieldAccessorImpl.java","additions":0,"deletions":149,"binary":false,"changes":149,"status":"deleted"},{"patch":"@@ -1,153 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticLongFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticLongFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Long.valueOf(getLong(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return unsafe.getLong(base, fieldOffset);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getLong(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putLong(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putLong(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        if (value instanceof Character) {\n-            unsafe.putLong(base, fieldOffset, ((Character) value).charValue());\n-            return;\n-        }\n-        if (value instanceof Integer) {\n-            unsafe.putLong(base, fieldOffset, ((Integer) value).intValue());\n-            return;\n-        }\n-        if (value instanceof Long) {\n-            unsafe.putLong(base, fieldOffset, ((Long) value).longValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setLong(obj, i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(l);\n-        }\n-        unsafe.putLong(base, fieldOffset, l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticLongFieldAccessorImpl.java","additions":0,"deletions":153,"binary":false,"changes":153,"status":"deleted"},{"patch":"@@ -1,133 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticObjectFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticObjectFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return isFlattened() ? unsafe.getValue(base, fieldOffset, field.getType())\n-                             : unsafe.getReference(base, fieldOffset, field.getType());\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        throw newGetShortIllegalArgumentException();\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        throw newGetIntIllegalArgumentException();\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        throw newGetLongIllegalArgumentException();\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        throw newGetFloatIllegalArgumentException();\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        throw newGetDoubleIllegalArgumentException();\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        checkValue(value);\n-        if (isFlattened()) {\n-            unsafe.putValue(obj, fieldOffset, field.getType(), value);\n-        } else {\n-            unsafe.putReference(base, fieldOffset, value);\n-        }\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticObjectFieldAccessorImpl.java","additions":0,"deletions":133,"binary":false,"changes":133,"status":"deleted"},{"patch":"@@ -1,141 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-import java.lang.reflect.Field;\n-\n-class UnsafeStaticShortFieldAccessorImpl extends UnsafeStaticFieldAccessorImpl {\n-    UnsafeStaticShortFieldAccessorImpl(Field field) {\n-        super(field);\n-    }\n-\n-    public Object get(Object obj) throws IllegalArgumentException {\n-        return Short.valueOf(getShort(obj));\n-    }\n-\n-    public boolean getBoolean(Object obj) throws IllegalArgumentException {\n-        throw newGetBooleanIllegalArgumentException();\n-    }\n-\n-    public byte getByte(Object obj) throws IllegalArgumentException {\n-        throw newGetByteIllegalArgumentException();\n-    }\n-\n-    public char getChar(Object obj) throws IllegalArgumentException {\n-        throw newGetCharIllegalArgumentException();\n-    }\n-\n-    public short getShort(Object obj) throws IllegalArgumentException {\n-        return unsafe.getShort(base, fieldOffset);\n-    }\n-\n-    public int getInt(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public long getLong(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public float getFloat(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public double getDouble(Object obj) throws IllegalArgumentException {\n-        return getShort(obj);\n-    }\n-\n-    public void set(Object obj, Object value)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(value);\n-        }\n-        if (value == null) {\n-            throwSetIllegalArgumentException(value);\n-        }\n-        if (value instanceof Byte) {\n-            unsafe.putShort(base, fieldOffset, ((Byte) value).byteValue());\n-            return;\n-        }\n-        if (value instanceof Short) {\n-            unsafe.putShort(base, fieldOffset, ((Short) value).shortValue());\n-            return;\n-        }\n-        throwSetIllegalArgumentException(value);\n-    }\n-\n-    public void setBoolean(Object obj, boolean z)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(z);\n-    }\n-\n-    public void setByte(Object obj, byte b)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        setShort(obj, b);\n-    }\n-\n-    public void setChar(Object obj, char c)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(c);\n-    }\n-\n-    public void setShort(Object obj, short s)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        if (isFinal) {\n-            throwFinalFieldIllegalAccessException(s);\n-        }\n-        unsafe.putShort(base, fieldOffset, s);\n-    }\n-\n-    public void setInt(Object obj, int i)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(i);\n-    }\n-\n-    public void setLong(Object obj, long l)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(l);\n-    }\n-\n-    public void setFloat(Object obj, float f)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(f);\n-    }\n-\n-    public void setDouble(Object obj, double d)\n-        throws IllegalArgumentException, IllegalAccessException\n-    {\n-        throwSetIllegalArgumentException(d);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeStaticShortFieldAccessorImpl.java","additions":0,"deletions":141,"binary":false,"changes":141,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,13 +104,0 @@\n-    \/**\n-     * Serializes {@link VM#getSavedProperties()} to a byte array.\n-     *\n-     * Used by JVMCI to copy properties into libjvmci.\n-     *\/\n-    public static byte[] serializeSavedPropertiesToByteArray() throws IOException {\n-        Properties props = new Properties();\n-        for (var e : VM.getSavedProperties().entrySet()) {\n-            props.put(e.getKey(), e.getValue());\n-        }\n-        return serializePropertiesToByteArray(props);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -282,0 +282,1 @@\n+        jdk.internal.vm.ci,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -39,0 +40,6 @@\n+    \/\/ Controls the cache stale policy for successful lookups only\n+    private static final String cacheStalePolicyProp =\n+        \"networkaddress.cache.stale.ttl\";\n+    private static final String cacheStalePolicyPropFallback =\n+        \"sun.net.inetaddr.stale.ttl\";\n+\n@@ -62,0 +69,9 @@\n+    \/* The Java-level namelookup cache stale policy:\n+     *\n+     * any positive value: the number of seconds to use the stale names\n+     * zero: do not use stale names\n+     *\n+     * default value is never (NEVER).\n+     *\/\n+    private static volatile int staleCachePolicy = NEVER;\n+\n@@ -88,25 +104,1 @@\n-\n-        Integer tmp = java.security.AccessController.doPrivileged(\n-          new PrivilegedAction<Integer>() {\n-            public Integer run() {\n-                try {\n-                    String tmpString = Security.getProperty(cachePolicyProp);\n-                    if (tmpString != null) {\n-                        return Integer.valueOf(tmpString);\n-                    }\n-                } catch (NumberFormatException ignored) {\n-                    \/\/ Ignore\n-                }\n-\n-                try {\n-                    String tmpString = System.getProperty(cachePolicyPropFallback);\n-                    if (tmpString != null) {\n-                        return Integer.decode(tmpString);\n-                    }\n-                } catch (NumberFormatException ignored) {\n-                    \/\/ Ignore\n-                }\n-                return null;\n-            }\n-          });\n-\n+        Integer tmp = getProperty(cachePolicyProp, cachePolicyPropFallback);\n@@ -124,23 +116,2 @@\n-        tmp = java.security.AccessController.doPrivileged (\n-          new PrivilegedAction<Integer>() {\n-            public Integer run() {\n-                try {\n-                    String tmpString = Security.getProperty(negativeCachePolicyProp);\n-                    if (tmpString != null) {\n-                        return Integer.valueOf(tmpString);\n-                    }\n-                } catch (NumberFormatException ignored) {\n-                    \/\/ Ignore\n-                }\n-\n-                try {\n-                    String tmpString = System.getProperty(negativeCachePolicyPropFallback);\n-                    if (tmpString != null) {\n-                        return Integer.decode(tmpString);\n-                    }\n-                } catch (NumberFormatException ignored) {\n-                    \/\/ Ignore\n-                }\n-                return null;\n-            }\n-          });\n+        tmp = getProperty(negativeCachePolicyProp,\n+                          negativeCachePolicyPropFallback);\n@@ -152,0 +123,37 @@\n+        if (cachePolicy > 0) {\n+            tmp = getProperty(cacheStalePolicyProp,\n+                              cacheStalePolicyPropFallback);\n+            if (tmp != null) {\n+                staleCachePolicy = tmp;\n+            }\n+        }\n+    }\n+\n+    private static Integer getProperty(String cachePolicyProp,\n+                                       String cachePolicyPropFallback)\n+    {\n+        return java.security.AccessController.doPrivileged(\n+                new PrivilegedAction<Integer>() {\n+                    public Integer run() {\n+                        try {\n+                            String tmpString = Security.getProperty(\n+                                    cachePolicyProp);\n+                            if (tmpString != null) {\n+                                return Integer.valueOf(tmpString);\n+                            }\n+                        } catch (NumberFormatException ignored) {\n+                            \/\/ Ignore\n+                        }\n+\n+                        try {\n+                            String tmpString = System.getProperty(\n+                                    cachePolicyPropFallback);\n+                            if (tmpString != null) {\n+                                return Integer.decode(tmpString);\n+                            }\n+                        } catch (NumberFormatException ignored) {\n+                            \/\/ Ignore\n+                        }\n+                        return null;\n+                    }\n+                });\n@@ -158,0 +166,4 @@\n+    public static int getStale() {\n+        return staleCachePolicy;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/net\/InetAddressCachePolicy.java","additions":61,"deletions":49,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,1 @@\n+        this.signingRandom = null;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DSA.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,3 +105,0 @@\n-    \/\/ OAEP: main message digest\n-    private MessageDigest md;\n-\n@@ -154,0 +151,2 @@\n+        \/\/ OAEP: main message digest\n+        MessageDigest md;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPadding.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -127,0 +129,1 @@\n+\n@@ -141,2 +144,6 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                builder.append(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    builder.append(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    builder.append(\"unparseable distinguished name: \" + iae);\n+                }\n@@ -280,1 +287,7 @@\n-            shc.peerSupportedAuthorities = spec.getAuthorities();\n+            try {\n+                shc.peerSupportedAuthorities = spec.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                shc.conContext.fatal(Alert.DECODE_ERROR, \"The distinguished \" +\n+                        \"names of the peer's certificate authorities could \" +\n+                        \"not be parsed\", iae);\n+            }\n@@ -401,1 +414,7 @@\n-            chc.peerSupportedAuthorities = spec.getAuthorities();\n+            try {\n+                chc.peerSupportedAuthorities = spec.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR, \"The distinguished \" +\n+                        \"names of the peer's certificate authorities could \" +\n+                        \"not be parsed\", iae);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateAuthoritiesExtension.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -201,0 +201,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -204,0 +206,1 @@\n+\n@@ -257,2 +260,6 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                authorityNames.add(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    authorityNames.add(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    authorityNames.add(\"unparseable distinguished name: \" + iae);\n+                }\n@@ -373,6 +380,17 @@\n-            if (chc.conContext.transport instanceof SSLSocketImpl) {\n-                clientAlias = km.chooseClientAlias(crm.getKeyTypes(),\n-                    crm.getAuthorities(), (SSLSocket)chc.conContext.transport);\n-            } else if (chc.conContext.transport instanceof SSLEngineImpl) {\n-                clientAlias = km.chooseEngineClientAlias(crm.getKeyTypes(),\n-                    crm.getAuthorities(), (SSLEngine)chc.conContext.transport);\n+\n+            try {\n+                if (chc.conContext.transport instanceof SSLSocketImpl) {\n+                    clientAlias = km.chooseClientAlias(crm.getKeyTypes(),\n+                        crm.getAuthorities(),\n+                        (SSLSocket) chc.conContext.transport);\n+                } else if (chc.conContext.transport instanceof SSLEngineImpl) {\n+                    clientAlias =\n+                        km.chooseEngineClientAlias(crm.getKeyTypes(),\n+                            crm.getAuthorities(),\n+                            (SSLEngine) chc.conContext.transport);\n+                }\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR,\n+                    \"The distinguished names of the peer's \"\n+                    + \"certificate authorities could not be parsed\",\n+                        iae);\n@@ -515,0 +533,2 @@\n+        \/\/ This method will throw IllegalArgumentException if the\n+        \/\/ X500Principal cannot be parsed.\n@@ -518,0 +538,1 @@\n+\n@@ -582,2 +603,7 @@\n-                X500Principal principal = new X500Principal(encoded);\n-                authorityNames.add(principal.toString());\n+                try {\n+                    X500Principal principal = new X500Principal(encoded);\n+                    authorityNames.add(principal.toString());\n+                } catch (IllegalArgumentException iae) {\n+                    authorityNames.add(\"unparseable distinguished name: \" +\n+                        iae);\n+                }\n@@ -720,2 +746,7 @@\n-            chc.peerSupportedAuthorities = crm.getAuthorities();\n-\n+            try {\n+                chc.peerSupportedAuthorities = crm.getAuthorities();\n+            } catch (IllegalArgumentException iae) {\n+                chc.conContext.fatal(Alert.DECODE_ERROR, \"The \"\n+                    + \"distinguished names of the peer's certificate \"\n+                    + \"authorities could not be parsed\", iae);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateRequest.java","additions":44,"deletions":13,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -360,0 +360,11 @@\n+#\n+# The Java-level namelookup cache stale policy:\n+#\n+# any positive value: the number of seconds to use the stale names\n+# zero: do not use stale names\n+# negative values are ignored\n+#\n+# default value is 0 (NEVER).\n+#\n+#networkaddress.cache.stale.ttl=0\n+\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include <stdint.h>\n","filename":"src\/java.base\/share\/native\/libfallbackLinker\/fallbackLinker.c","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-#include \"jdk_internal_reflect_NativeConstructorAccessorImpl.h\"\n-#include \"jdk_internal_reflect_NativeMethodAccessorImpl.h\"\n@@ -32,12 +30,0 @@\n-JNIEXPORT jobject JNICALL Java_jdk_internal_reflect_NativeMethodAccessorImpl_invoke0\n-(JNIEnv *env, jclass unused, jobject m, jobject obj, jobjectArray args)\n-{\n-    return JVM_InvokeMethod(env, m, obj, args);\n-}\n-\n-JNIEXPORT jobject JNICALL Java_jdk_internal_reflect_NativeConstructorAccessorImpl_newInstance0\n-(JNIEnv *env, jclass unused, jobject c, jobjectArray args)\n-{\n-    return JVM_NewInstanceFromConstructor(env, c, args);\n-}\n-\n","filename":"src\/java.base\/share\/native\/libjava\/NativeAccessors.c","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+     *  22: tbd\n@@ -398,1 +399,14 @@\n-    RELEASE_21;\n+    RELEASE_21,\n+\n+    \/**\n+     * The version introduced by the Java Platform, Standard Edition\n+     * 22.\n+     *\n+     * @since 22\n+     *\n+     * @see <a\n+     * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se22\/html\/index.html\">\n+     * <cite>The Java Language Specification, Java SE 22 Edition<\/cite><\/a>\n+     *\/\n+    RELEASE_22,\n+    ; \/\/ Reduce code churn when appending new constants\n@@ -407,1 +421,1 @@\n-        return RELEASE_21;\n+        return RELEASE_22;\n@@ -422,1 +436,1 @@\n-            valueOf(\"RELEASE_\" + Math.min(21, intVersion)):\n+            valueOf(\"RELEASE_\" + Math.min(22, intVersion)):\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/SourceVersion.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractAnnotationValueVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractElementVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractTypeVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementKindVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScanner14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleAnnotationValueVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleElementVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleTypeVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-@SupportedSourceVersion(RELEASE_21)\n+@SupportedSourceVersion(RELEASE_22)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/TypeKindVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -565,1 +565,1 @@\n-     * @since: 1.5\n+     * @since 1.5\n@@ -690,1 +690,1 @@\n-     * @since: 1.5\n+     * @since 1.5\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Container.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -572,1 +572,1 @@\n-     * href=\"http:\/\/www.ietf.org\/rfc\/rfc2368.txt\">The mailto URL\n+     * href=\"https:\/\/www.rfc-editor.org\/info\/rfc2368\">The mailto URL\n@@ -590,0 +590,2 @@\n+     * @spec https:\/\/www.rfc-editor.org\/info\/rfc2368\n+     *      RFC 2368: The mailto URL scheme\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Desktop.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,2 +57,0 @@\n- *     <li><a href=\"{@docRoot}\/..\/specs\/AWT_Native_Interface.html\">\n- *                  The Java AWT Native Interface (JAWT)<\/a>\n@@ -61,0 +59,2 @@\n+ * @spec AWT_Native_Interface.html\n+ *      The Java AWT Native Interface Specification and Guide\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-     *        <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2368.txt\">RFC2368: The mailto\n+     *        <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2368\">RFC2368: The mailto\n@@ -106,0 +106,3 @@\n+     *\n+     * @spec https:\/\/www.rfc-editor.org\/info\/rfc2368\n+     *      RFC 2368: The mailto URL scheme\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/peer\/DesktopPeer.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-<td><a href=\"https:\/\/tools.ietf.org\/html\/rfc1950\">\n+<td><a href=\"https:\/\/www.rfc-editor.org\/info\/rfc1950\">\n@@ -570,1 +570,1 @@\n-<a href=\"https:\/\/tools.ietf.org\/html\/rfc1951\">\n+<a href=\"https:\/\/www.rfc-editor.org\/info\/rfc1951\">\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/metadata\/doc-files\/tiff_metadata.html","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -225,1 +225,2 @@\n-     * @see <a href=\"https:\/\/tools.ietf.org\/html\/rfc1951\">DEFLATE specification<\/a>\n+     * @spec https:\/\/www.rfc-editor.org\/info\/rfc1951\n+     *      RFC 1951: DEFLATE Compressed Data Format Specification version 1.3\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/plugins\/tiff\/BaselineTIFFTagSet.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * <a href=\"https:\/\/tools.ietf.org\/html\/rfc2306.html\">TIFF-F<\/a> (RFC 2036) file.\n+ * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2306\">TIFF-F<\/a> (RFC 2036) file.\n@@ -34,0 +34,2 @@\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2306\n+ *      RFC 2306: Tag Image File Format (TIFF) - F Profile for Facsimile\n","filename":"src\/java.desktop\/share\/classes\/javax\/imageio\/plugins\/tiff\/FaxTIFFTagSet.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n- *   <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2045.txt\">RFC 2045<\/a> and\n- *   <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2046.txt\">RFC 2046<\/a>) that specifies\n+ *   <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2045\">RFC 2045<\/a> and\n+ *   <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2046\">RFC 2046<\/a>) that specifies\n@@ -386,0 +386,4 @@\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2045\n+ *      RFC 2045: Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2046\n+ *      RFC 2046: Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types\n@@ -399,1 +403,1 @@\n-     * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2278.txt\">\n+     * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2278\">\n@@ -406,0 +410,2 @@\n+     * @spec https:\/\/www.rfc-editor.org\/info\/rfc2278\n+     *      RFC 2278: IANA Charset Registration Procedures\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/DocFlavor.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2045.txt\">RFC 2045<\/a> and\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2046.txt\">RFC 2046<\/a>. A MIME type\n+ * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2045\">RFC 2045<\/a> and\n+ * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2046\">RFC 2046<\/a>. A MIME type\n@@ -77,0 +77,4 @@\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2045\n+ *      RFC 2045: Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2046\n+ *      RFC 2046: Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/MimeType.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,1 +69,3 @@\n-     * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc1952.txt\">RFC 1952<\/a>.\n+     * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc1952\">RFC 1952<\/a>.\n+     * @spec https:\/\/www.rfc-editor.org\/info\/rfc1952\n+     *      RFC 1952: GZIP file format specification version 4.3\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/Compression.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2911.txt\">RFC 2911<\/a> Section 15.1 for a\n+ * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2911\">RFC 2911<\/a> Section 15.1 for a\n@@ -50,0 +50,3 @@\n+ *\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2911\n+ *      RFC 2911: Internet Printing Protocol\/1.1: Model and Semantics\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/Fidelity.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,1 +44,4 @@\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2911.txt\">RFC 2911<\/a>\n+ * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2911\">RFC 2911<\/a>\n+ *\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2911\n+ *      RFC 2911: Internet Printing Protocol\/1.1: Model and Semantics\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/MediaSizeName.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2911.txt\">RFC 2911<\/a> for more\n+ * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2911\">RFC 2911<\/a> for more\n@@ -593,0 +593,2 @@\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2911\n+ *      RFC 2911: Internet Printing Protocol\/1.1: Model and Semantics\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/attribute\/standard\/package-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc2911.txt\">RFC 2911 Internet Printing\n+ * <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2911\">RFC 2911 Internet Printing\n@@ -130,0 +130,2 @@\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc2911\n+ *      RFC 2911: Internet Printing Protocol\/1.1: Model and Semantics\n","filename":"src\/java.desktop\/share\/classes\/javax\/print\/package-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1618,0 +1618,2 @@\n+     * @spec https:\/\/www.w3.org\/TR\/CSS22\n+     *      Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JEditorPane.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -729,1 +729,1 @@\n-            xOffset += leftToRight ? IMAGE_WIDTH + 5 : - IMAGE_WIDTH - 5;\n+            xOffset += leftToRight ? menuBar.getWidth() + 5 : - menuBar.getWidth() - 5;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalTitlePane.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,0 +129,1 @@\n+ * @spec https:\/\/www.w3.org\/TR\/REC-CSS1 Cascading Style Sheets, level 1\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+ * @spec https:\/\/www.w3.org\/TR\/REC-html32.html HTML 3.2 Reference Specification\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/package-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    See <a href=http:\/\/www.ietf.org\/rfc\/rfc2083.txt>RFC2083<\/a> for details. *\/\n+    See <a href=\"https:\/\/www.rfc-editor.org\/info\/rfc2083\">RFC2083<\/a> for details. *\/\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/PNGImageDecoder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,5 @@\n+#if defined(AIX) && defined(__open_xl_version__) && __open_xl_version__ >= 17\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wformat-nonliteral\"\n+#endif\n+\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/screencast_pipewire.c","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-#if !defined(__FreeBSD__) && !defined(__MidnightBSD__)\n+#if !defined(__FreeBSD__) && !defined(__MidnightBSD__) && !defined(AIX)\n@@ -18,0 +18,6 @@\n+#if defined(AIX)\n+#include <sys\/machine.h>\n+#define __BIG_ENDIAN      BIG_ENDIAN\n+#define __BYTE_ORDER      BIG_ENDIAN\n+#endif\n+\n","filename":"src\/java.desktop\/unix\/native\/libpipewire\/include\/spa\/param\/audio\/raw.h","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -265,1 +265,1 @@\n-        case WM_DPICHANGED:\n+        case WM_DISPLAYCHANGE:\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TrayIcon.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import javax.net.ssl.SNIServerName;\n@@ -64,1 +65,0 @@\n-    protected final String serverName;\n@@ -66,0 +66,1 @@\n+    private final List<SNIServerName> sniServerNames;\n@@ -76,1 +77,1 @@\n-        this.serverName = serverName.getName();\n+        this.sniServerNames = formSNIServerNames(serverName);\n@@ -78,1 +79,1 @@\n-        sslParameters = createSSLParameters(client, serverName, alpn);\n+        sslParameters = createSSLParameters(client, this.sniServerNames, alpn);\n@@ -80,1 +81,1 @@\n-        engine = createEngine(context, serverName.getName(), port, sslParameters);\n+        engine = createEngine(context, serverName.name(), port, sslParameters);\n@@ -91,0 +92,5 @@\n+    @Override\n+    public final List<SNIServerName> getSNIServerNames() {\n+        return this.sniServerNames;\n+    }\n+\n@@ -99,1 +105,1 @@\n-                                                     ServerName serverName,\n+                                                     List<SNIServerName> sniServerNames,\n@@ -119,1 +125,1 @@\n-                       Arrays.toString(alpn));\n+                    Arrays.toString(alpn));\n@@ -124,0 +130,8 @@\n+        sslParameters.setServerNames(sniServerNames);\n+        return sslParameters;\n+    }\n+\n+    private static List<SNIServerName> formSNIServerNames(final ServerName serverName) {\n+        if (serverName == null) {\n+            return List.of();\n+        }\n@@ -125,1 +139,1 @@\n-            String name = serverName.getName();\n+            String name = serverName.name();\n@@ -127,1 +141,1 @@\n-                sslParameters.setServerNames(List.of(new SNIHostName(name)));\n+                return List.of(new SNIHostName(name));\n@@ -130,1 +144,1 @@\n-        return sslParameters;\n+        return List.of();\n@@ -133,1 +147,0 @@\n-\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/AbstractAsyncSSLConnection.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+\n+import javax.net.ssl.SNIServerName;\n+\n@@ -427,0 +430,11 @@\n+    \/**\n+     * Returns an unmodifiable list of {@link SNIServerName}s that were used during TLS handshake\n+     * of this connection. If this connection doesn't represent a TLS based connection or if no SNI\n+     * server names were used during the handshake, then this method returns an empty list.\n+     *\n+     * @return the SNI server names\n+     *\/\n+    public List<SNIServerName> getSNIServerNames() {\n+        return List.of();\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpConnection.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -480,16 +480,1 @@\n-    public static class ServerName {\n-        ServerName(String name, boolean isLiteral) {\n-            this.name = name;\n-            this.isLiteral = isLiteral;\n-        }\n-\n-        final String name;\n-        final boolean isLiteral;\n-\n-        public String getName() {\n-            return name;\n-        }\n-\n-        public boolean isLiteral() {\n-            return isLiteral;\n-        }\n+    public record ServerName (String name, boolean isLiteral) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ *\n+ * @since 9\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/DirectiveTree.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+ *\n+ * @since 1.8\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/LambdaExpressionTree.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @since 21\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/StringTemplateTree.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,2 @@\n+ *\n+ * @since 1.6\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/Trees.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,7 @@\n-    JDK21(\"21\");\n+    JDK21(\"21\"),\n+\n+    \/**\n+      * 22, tbd\n+      *\/\n+    JDK22(\"22\"),\n+    ; \/\/ Reduce code churn when appending new constants\n@@ -187,0 +193,1 @@\n+        case JDK22  -> Target.JDK1_22;\n@@ -332,0 +339,1 @@\n+        case JDK22  -> RELEASE_22;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4952,1 +4952,2 @@\n-                            dominated |= !(testCaseLabel instanceof JCConstantCaseLabel);\n+                            dominated |= !(testCaseLabel instanceof JCConstantCaseLabel) &&\n+                                         TreeInfo.unguardedCase(testCase);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,3 @@\n-        V65(65, 0);   \/\/ JDK 21\n+        V65(65, 0),   \/\/ JDK 21\n+        V66(66, 0),   \/\/ JDK 22\n+        ; \/\/ Reduce code churn when appending new constants\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassFile.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,5 @@\n-    JDK1_21(\"21\", 65, 0);\n+    JDK1_21(\"21\", 65, 0),\n+\n+    \/** JDK 22. *\/\n+    JDK1_22(\"22\", 66, 0),\n+    ; \/\/ Reduce code churn when appending new constants\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1291,0 +1291,2 @@\n+            options.isSet(PROC, \"full\") ||\n+            options.isSet(A) ||\n@@ -1292,0 +1294,1 @@\n+        \/\/ Skipping -XprintRounds and -XprintProcessorInfo\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,5 @@\n+ *\n+ * <p>Maintenance note: when adding new annotation processing related\n+ * options, the list of options regarded as requesting explicit\n+ * annotation processing in JavaCompiler should be updated.\n+ *\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-@SupportedSourceVersion(SourceVersion.RELEASE_21)\n+@SupportedSourceVersion(SourceVersion.RELEASE_22)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,1561 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/io\/Console\n+header extends java\/lang\/Object implements java\/io\/Flushable sealed true flags 21\n+innerclass innerClass java\/util\/ServiceLoader$Provider outerClass java\/util\/ServiceLoader innerClassName Provider flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/io\/PrintStream\n+header extends java\/io\/FilterOutputStream implements java\/lang\/Appendable,java\/io\/Closeable flags 21\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+\n+class name java\/lang\/AbstractStringBuilder\n+header extends java\/lang\/Object implements java\/lang\/Appendable,java\/lang\/CharSequence sealed true flags 420\n+innerclass innerClass java\/util\/Spliterator$OfInt outerClass java\/util\/Spliterator innerClassName OfInt flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name repeat descriptor (II)Ljava\/lang\/AbstractStringBuilder; flags 1\n+method name repeat descriptor (Ljava\/lang\/CharSequence;I)Ljava\/lang\/AbstractStringBuilder; flags 1\n+\n+class name java\/lang\/Character\n+method name isEmoji descriptor (I)Z flags 9\n+method name isEmojiPresentation descriptor (I)Z flags 9\n+method name isEmojiModifier descriptor (I)Z flags 9\n+method name isEmojiModifierBase descriptor (I)Z flags 9\n+method name isEmojiComponent descriptor (I)Z flags 9\n+method name isExtendedPictographic descriptor (I)Z flags 9\n+\n+class name java\/lang\/Class\n+method name isUnnamedClass descriptor ()Z flags 1 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;UNNAMED_CLASSES;,reflective=Ztrue)\n+\n+-class name java\/lang\/Compiler\n+\n+class name java\/lang\/Deprecated\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;CONSTRUCTOR;eLjava\/lang\/annotation\/ElementType;FIELD;eLjava\/lang\/annotation\/ElementType;LOCAL_VARIABLE;eLjava\/lang\/annotation\/ElementType;METHOD;eLjava\/lang\/annotation\/ElementType;PACKAGE;eLjava\/lang\/annotation\/ElementType;MODULE;eLjava\/lang\/annotation\/ElementType;PARAMETER;eLjava\/lang\/annotation\/ElementType;TYPE;})\n+\n+class name java\/lang\/IllegalCallerException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/LayerInstantiationException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/MatchException\n+header extends java\/lang\/RuntimeException flags 31\n+\n+class name java\/lang\/Math\n+method name clamp descriptor (JII)I flags 9\n+method name clamp descriptor (JJJ)J flags 9\n+method name clamp descriptor (DDD)D flags 9\n+method name clamp descriptor (FFF)F flags 9\n+\n+class name java\/lang\/NamedPackage\n+header extends java\/lang\/Object flags 20\n+\n+class name java\/lang\/ProcessBuilder\n+header extends java\/lang\/Object nestMembers java\/lang\/ProcessBuilder$Redirect,java\/lang\/ProcessBuilder$Redirect$Type flags 31\n+innerclass innerClass java\/lang\/ProcessBuilder$Redirect outerClass java\/lang\/ProcessBuilder innerClassName Redirect flags 409\n+innerclass innerClass java\/lang\/ProcessBuilder$Redirect$Type outerClass java\/lang\/ProcessBuilder$Redirect innerClassName Type flags 4019\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/ScopedValue\n+header extends java\/lang\/Object nestMembers java\/lang\/ScopedValue$Carrier flags 31 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;SCOPED_VALUES;)\n+innerclass innerClass java\/lang\/ScopedValue$Carrier outerClass java\/lang\/ScopedValue innerClassName Carrier flags 19\n+method name hashCode descriptor ()I flags 1\n+method name where descriptor (Ljava\/lang\/ScopedValue;Ljava\/lang\/Object;)Ljava\/lang\/ScopedValue$Carrier; flags 9 signature <T:Ljava\/lang\/Object;>(Ljava\/lang\/ScopedValue<TT;>;TT;)Ljava\/lang\/ScopedValue$Carrier;\n+method name callWhere descriptor (Ljava\/lang\/ScopedValue;Ljava\/lang\/Object;Ljava\/util\/concurrent\/Callable;)Ljava\/lang\/Object; thrownTypes java\/lang\/Exception flags 9 signature <T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;>(Ljava\/lang\/ScopedValue<TT;>;TT;Ljava\/util\/concurrent\/Callable<+TR;>;)TR;\n+method name getWhere descriptor (Ljava\/lang\/ScopedValue;Ljava\/lang\/Object;Ljava\/util\/function\/Supplier;)Ljava\/lang\/Object; flags 9 signature <T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;>(Ljava\/lang\/ScopedValue<TT;>;TT;Ljava\/util\/function\/Supplier<+TR;>;)TR;\n+method name runWhere descriptor (Ljava\/lang\/ScopedValue;Ljava\/lang\/Object;Ljava\/lang\/Runnable;)V flags 9 signature <T:Ljava\/lang\/Object;>(Ljava\/lang\/ScopedValue<TT;>;TT;Ljava\/lang\/Runnable;)V\n+method name newInstance descriptor ()Ljava\/lang\/ScopedValue; flags 9 signature <T:Ljava\/lang\/Object;>()Ljava\/lang\/ScopedValue<TT;>;\n+method name get descriptor ()Ljava\/lang\/Object; flags 1 signature ()TT; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name isBound descriptor ()Z flags 1\n+method name orElse descriptor (Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TT;)TT;\n+method name orElseThrow descriptor (Ljava\/util\/function\/Supplier;)Ljava\/lang\/Object; thrownTypes java\/lang\/Throwable flags 1 signature <X:Ljava\/lang\/Throwable;>(Ljava\/util\/function\/Supplier<+TX;>;)TT;^TX;\n+\n+class name java\/lang\/ScopedValue$Carrier\n+header extends java\/lang\/Object nestHost java\/lang\/ScopedValue flags 31 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;SCOPED_VALUES;)\n+innerclass innerClass java\/lang\/ScopedValue$Carrier outerClass java\/lang\/ScopedValue innerClassName Carrier flags 19\n+method name where descriptor (Ljava\/lang\/ScopedValue;Ljava\/lang\/Object;)Ljava\/lang\/ScopedValue$Carrier; flags 1 signature <T:Ljava\/lang\/Object;>(Ljava\/lang\/ScopedValue<TT;>;TT;)Ljava\/lang\/ScopedValue$Carrier;\n+method name get descriptor (Ljava\/lang\/ScopedValue;)Ljava\/lang\/Object; flags 1 signature <T:Ljava\/lang\/Object;>(Ljava\/lang\/ScopedValue<TT;>;)TT;\n+method name call descriptor (Ljava\/util\/concurrent\/Callable;)Ljava\/lang\/Object; thrownTypes java\/lang\/Exception flags 1 signature <R:Ljava\/lang\/Object;>(Ljava\/util\/concurrent\/Callable<+TR;>;)TR;\n+method name get descriptor (Ljava\/util\/function\/Supplier;)Ljava\/lang\/Object; flags 1 signature <R:Ljava\/lang\/Object;>(Ljava\/util\/function\/Supplier<+TR;>;)TR;\n+method name run descriptor (Ljava\/lang\/Runnable;)V flags 1\n+\n+class name java\/lang\/StrictMath\n+-method name sin descriptor (D)D\n+-method name cos descriptor (D)D\n+-method name tan descriptor (D)D\n+-method name asin descriptor (D)D\n+-method name acos descriptor (D)D\n+-method name atan descriptor (D)D\n+-method name log descriptor (D)D\n+-method name log10 descriptor (D)D\n+-method name IEEEremainder descriptor (DD)D\n+-method name atan2 descriptor (DD)D\n+-method name sinh descriptor (D)D\n+-method name cosh descriptor (D)D\n+-method name tanh descriptor (D)D\n+-method name expm1 descriptor (D)D\n+-method name log1p descriptor (D)D\n+-method name sqrt descriptor (D)D\n+method name sin descriptor (D)D flags 9\n+method name cos descriptor (D)D flags 9\n+method name tan descriptor (D)D flags 9\n+method name asin descriptor (D)D flags 9\n+method name acos descriptor (D)D flags 9\n+method name atan descriptor (D)D flags 9\n+method name log descriptor (D)D flags 9\n+method name log10 descriptor (D)D flags 9\n+method name sqrt descriptor (D)D flags 9 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name IEEEremainder descriptor (DD)D flags 9\n+method name atan2 descriptor (DD)D flags 9\n+method name clamp descriptor (JII)I flags 9\n+method name clamp descriptor (JJJ)J flags 9\n+method name clamp descriptor (DDD)D flags 9\n+method name clamp descriptor (FFF)F flags 9\n+method name sinh descriptor (D)D flags 9\n+method name cosh descriptor (D)D flags 9\n+method name tanh descriptor (D)D flags 9\n+method name expm1 descriptor (D)D flags 9\n+method name log1p descriptor (D)D flags 9\n+\n+class name java\/lang\/String\n+method name indexOf descriptor (III)I flags 1\n+method name indexOf descriptor (Ljava\/lang\/String;II)I flags 1\n+method name splitWithDelimiters descriptor (Ljava\/lang\/String;I)[Ljava\/lang\/String; flags 1\n+\n+class name java\/lang\/StringBuffer\n+header extends java\/lang\/AbstractStringBuilder implements java\/lang\/Appendable,java\/io\/Serializable,java\/lang\/Comparable,java\/lang\/CharSequence flags 31 signature Ljava\/lang\/AbstractStringBuilder;Ljava\/lang\/Appendable;Ljava\/io\/Serializable;Ljava\/lang\/Comparable<Ljava\/lang\/StringBuffer;>;Ljava\/lang\/CharSequence;\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+method name repeat descriptor (II)Ljava\/lang\/StringBuffer; flags 21\n+method name repeat descriptor (Ljava\/lang\/CharSequence;I)Ljava\/lang\/StringBuffer; flags 21\n+method name repeat descriptor (Ljava\/lang\/CharSequence;I)Ljava\/lang\/AbstractStringBuilder; flags 1041 methodParameters 3e8:null,3e8:null\n+method name repeat descriptor (II)Ljava\/lang\/AbstractStringBuilder; flags 1041 methodParameters 3e8:null,3e8:null\n+\n+class name java\/lang\/StringBuilder\n+header extends java\/lang\/AbstractStringBuilder implements java\/lang\/Appendable,java\/io\/Serializable,java\/lang\/Comparable,java\/lang\/CharSequence flags 31 signature Ljava\/lang\/AbstractStringBuilder;Ljava\/lang\/Appendable;Ljava\/io\/Serializable;Ljava\/lang\/Comparable<Ljava\/lang\/StringBuilder;>;Ljava\/lang\/CharSequence;\n+method name repeat descriptor (II)Ljava\/lang\/StringBuilder; flags 1\n+method name repeat descriptor (Ljava\/lang\/CharSequence;I)Ljava\/lang\/StringBuilder; flags 1\n+method name repeat descriptor (Ljava\/lang\/CharSequence;I)Ljava\/lang\/AbstractStringBuilder; flags 1041 methodParameters 3e8:null,3e8:null\n+method name repeat descriptor (II)Ljava\/lang\/AbstractStringBuilder; flags 1041 methodParameters 3e8:null,3e8:null\n+\n+class name java\/lang\/StringTemplate\n+header extends java\/lang\/Object nestMembers java\/lang\/StringTemplate$Processor,java\/lang\/StringTemplate$Processor$Linkage flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;)\n+innerclass innerClass java\/lang\/StringTemplate$Processor outerClass java\/lang\/StringTemplate innerClassName Processor flags 609\n+innerclass innerClass java\/lang\/StringTemplate$Processor$Linkage outerClass java\/lang\/StringTemplate$Processor innerClassName Linkage flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+field name STR descriptor Ljava\/lang\/StringTemplate$Processor; flags 19 signature Ljava\/lang\/StringTemplate$Processor<Ljava\/lang\/String;Ljava\/lang\/RuntimeException;>;\n+field name RAW descriptor Ljava\/lang\/StringTemplate$Processor; flags 19 signature Ljava\/lang\/StringTemplate$Processor<Ljava\/lang\/StringTemplate;Ljava\/lang\/RuntimeException;>;\n+method name fragments descriptor ()Ljava\/util\/List; flags 401 signature ()Ljava\/util\/List<Ljava\/lang\/String;>;\n+method name values descriptor ()Ljava\/util\/List; flags 401 signature ()Ljava\/util\/List<Ljava\/lang\/Object;>;\n+method name interpolate descriptor ()Ljava\/lang\/String; flags 1\n+method name process descriptor (Ljava\/lang\/StringTemplate$Processor;)Ljava\/lang\/Object; thrownTypes java\/lang\/Throwable flags 1 signature <R:Ljava\/lang\/Object;E:Ljava\/lang\/Throwable;>(Ljava\/lang\/StringTemplate$Processor<+TR;+TE;>;)TR;^TE;\n+method name toString descriptor (Ljava\/lang\/StringTemplate;)Ljava\/lang\/String; flags 9\n+method name of descriptor (Ljava\/lang\/String;)Ljava\/lang\/StringTemplate; flags 9\n+method name of descriptor (Ljava\/util\/List;Ljava\/util\/List;)Ljava\/lang\/StringTemplate; flags 9 signature (Ljava\/util\/List<Ljava\/lang\/String;>;Ljava\/util\/List<*>;)Ljava\/lang\/StringTemplate;\n+method name interpolate descriptor (Ljava\/util\/List;Ljava\/util\/List;)Ljava\/lang\/String; flags 9 signature (Ljava\/util\/List<Ljava\/lang\/String;>;Ljava\/util\/List<*>;)Ljava\/lang\/String;\n+method name combine descriptor ([Ljava\/lang\/StringTemplate;)Ljava\/lang\/StringTemplate; flags 89\n+method name combine descriptor (Ljava\/util\/List;)Ljava\/lang\/StringTemplate; flags 9 signature (Ljava\/util\/List<Ljava\/lang\/StringTemplate;>;)Ljava\/lang\/StringTemplate;\n+\n+class name java\/lang\/StringTemplate$Processor\n+header extends java\/lang\/Object nestHost java\/lang\/StringTemplate flags 601 signature <R:Ljava\/lang\/Object;E:Ljava\/lang\/Throwable;>Ljava\/lang\/Object; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;) runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/StringTemplate$Processor outerClass java\/lang\/StringTemplate innerClassName Processor flags 609\n+innerclass innerClass java\/lang\/StringTemplate$Processor$Linkage outerClass java\/lang\/StringTemplate$Processor innerClassName Linkage flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name process descriptor (Ljava\/lang\/StringTemplate;)Ljava\/lang\/Object; thrownTypes java\/lang\/Throwable flags 401 signature (Ljava\/lang\/StringTemplate;)TR;^TE;\n+method name of descriptor (Ljava\/util\/function\/Function;)Ljava\/lang\/StringTemplate$Processor; flags 9 signature <T:Ljava\/lang\/Object;>(Ljava\/util\/function\/Function<-Ljava\/lang\/StringTemplate;+TT;>;)Ljava\/lang\/StringTemplate$Processor<TT;Ljava\/lang\/RuntimeException;>;\n+\n+class name java\/lang\/StringTemplate$Processor$Linkage\n+header extends java\/lang\/Object nestHost java\/lang\/StringTemplate sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;)\n+innerclass innerClass java\/lang\/StringTemplate$Processor outerClass java\/lang\/StringTemplate innerClassName Processor flags 609\n+innerclass innerClass java\/lang\/StringTemplate$Processor$Linkage outerClass java\/lang\/StringTemplate$Processor innerClassName Linkage flags 609\n+method name linkage descriptor (Ljava\/util\/List;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/MethodHandle; flags 401 signature (Ljava\/util\/List<Ljava\/lang\/String;>;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/MethodHandle;\n+\n+class name java\/lang\/Thread\n+header extends java\/lang\/Object implements java\/lang\/Runnable nestMembers java\/lang\/Thread$UncaughtExceptionHandler,java\/lang\/Thread$State,java\/lang\/Thread$Builder,java\/lang\/Thread$Builder$OfVirtual,java\/lang\/Thread$Builder$OfPlatform flags 21\n+innerclass innerClass java\/lang\/Thread$UncaughtExceptionHandler outerClass java\/lang\/Thread innerClassName UncaughtExceptionHandler flags 609\n+innerclass innerClass java\/lang\/Thread$State outerClass java\/lang\/Thread innerClassName State flags 4019\n+innerclass innerClass java\/lang\/Thread$Builder outerClass java\/lang\/Thread innerClassName Builder flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfPlatform outerClass java\/lang\/Thread$Builder innerClassName OfPlatform flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfVirtual outerClass java\/lang\/Thread$Builder innerClassName OfVirtual flags 609\n+-method name ofPlatform descriptor ()Ljava\/lang\/Thread$Builder$OfPlatform;\n+-method name ofVirtual descriptor ()Ljava\/lang\/Thread$Builder$OfVirtual;\n+-method name startVirtualThread descriptor (Ljava\/lang\/Runnable;)Ljava\/lang\/Thread;\n+-method name isVirtual descriptor ()Z\n+method name ofPlatform descriptor ()Ljava\/lang\/Thread$Builder$OfPlatform; flags 9\n+method name ofVirtual descriptor ()Ljava\/lang\/Thread$Builder$OfVirtual; flags 9\n+method name startVirtualThread descriptor (Ljava\/lang\/Runnable;)Ljava\/lang\/Thread; flags 9\n+method name isVirtual descriptor ()Z flags 11\n+\n+class name java\/lang\/Thread$Builder\n+header extends java\/lang\/Object nestHost java\/lang\/Thread sealed true flags 601\n+innerclass innerClass java\/lang\/Thread$Builder outerClass java\/lang\/Thread innerClassName Builder flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfVirtual outerClass java\/lang\/Thread$Builder innerClassName OfVirtual flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfPlatform outerClass java\/lang\/Thread$Builder innerClassName OfPlatform flags 609\n+innerclass innerClass java\/lang\/Thread$UncaughtExceptionHandler outerClass java\/lang\/Thread innerClassName UncaughtExceptionHandler flags 609\n+-method name allowSetThreadLocals descriptor (Z)Ljava\/lang\/Thread$Builder;\n+\n+class name java\/lang\/Thread$Builder$OfPlatform\n+header extends java\/lang\/Object implements java\/lang\/Thread$Builder nestHost java\/lang\/Thread sealed true flags 601\n+innerclass innerClass java\/lang\/Thread$Builder outerClass java\/lang\/Thread innerClassName Builder flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfPlatform outerClass java\/lang\/Thread$Builder innerClassName OfPlatform flags 609\n+innerclass innerClass java\/lang\/Thread$UncaughtExceptionHandler outerClass java\/lang\/Thread innerClassName UncaughtExceptionHandler flags 609\n+-method name allowSetThreadLocals descriptor (Z)Ljava\/lang\/Thread$Builder$OfPlatform;\n+-method name allowSetThreadLocals descriptor (Z)Ljava\/lang\/Thread$Builder;\n+\n+class name java\/lang\/Thread$Builder$OfVirtual\n+header extends java\/lang\/Object implements java\/lang\/Thread$Builder nestHost java\/lang\/Thread sealed true flags 601\n+innerclass innerClass java\/lang\/Thread$Builder outerClass java\/lang\/Thread innerClassName Builder flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfVirtual outerClass java\/lang\/Thread$Builder innerClassName OfVirtual flags 609\n+innerclass innerClass java\/lang\/Thread$UncaughtExceptionHandler outerClass java\/lang\/Thread innerClassName UncaughtExceptionHandler flags 609\n+-method name allowSetThreadLocals descriptor (Z)Ljava\/lang\/Thread$Builder$OfVirtual;\n+-method name allowSetThreadLocals descriptor (Z)Ljava\/lang\/Thread$Builder;\n+\n+class name java\/lang\/ThreadGroup\n+-method name allowThreadSuspension descriptor (Z)Z\n+\n+class name java\/lang\/ThreadLocal\n+header extends java\/lang\/Object flags 21 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;\n+innerclass innerClass java\/lang\/StackWalker$StackFrame outerClass java\/lang\/StackWalker innerClassName StackFrame flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/constant\/ClassDesc\n+header extends java\/lang\/Object implements java\/lang\/constant\/ConstantDesc,java\/lang\/invoke\/TypeDescriptor$OfField sealed true flags 601 signature Ljava\/lang\/Object;Ljava\/lang\/constant\/ConstantDesc;Ljava\/lang\/invoke\/TypeDescriptor$OfField<Ljava\/lang\/constant\/ClassDesc;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+innerclass innerClass java\/lang\/invoke\/TypeDescriptor$OfField outerClass java\/lang\/invoke\/TypeDescriptor innerClassName OfField flags 609\n+method name resolveConstantDesc descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/Class; thrownTypes java\/lang\/ReflectiveOperationException flags 401 signature (Ljava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/Class<*>;\n+method name resolveConstantDesc descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/Object; thrownTypes java\/lang\/ReflectiveOperationException flags 1041 methodParameters 3e8:null\n+\n+class name java\/lang\/constant\/ConstantDesc\n+header extends java\/lang\/Object sealed true flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/constant\/ConstantDescs\n+field name BSM_CLASS_DATA descriptor Ljava\/lang\/constant\/DirectMethodHandleDesc; flags 19\n+field name BSM_CLASS_DATA_AT descriptor Ljava\/lang\/constant\/DirectMethodHandleDesc; flags 19\n+field name INIT_NAME descriptor Ljava\/lang\/String; constantValue <init> flags 19\n+field name CLASS_INIT_NAME descriptor Ljava\/lang\/String; constantValue <clinit> flags 19\n+field name MTD_void descriptor Ljava\/lang\/constant\/MethodTypeDesc; flags 19\n+\n+class name java\/lang\/constant\/DirectMethodHandleDesc\n+header extends java\/lang\/Object implements java\/lang\/constant\/MethodHandleDesc nestMembers java\/lang\/constant\/DirectMethodHandleDesc$Kind sealed true flags 601\n+innerclass innerClass java\/lang\/constant\/DirectMethodHandleDesc$Kind outerClass java\/lang\/constant\/DirectMethodHandleDesc innerClassName Kind flags 4019\n+\n+class name java\/lang\/constant\/MethodHandleDesc\n+header extends java\/lang\/Object implements java\/lang\/constant\/ConstantDesc sealed true flags 601\n+innerclass innerClass java\/lang\/constant\/DirectMethodHandleDesc$Kind outerClass java\/lang\/constant\/DirectMethodHandleDesc innerClassName Kind flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name resolveConstantDesc descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/invoke\/MethodHandle; thrownTypes java\/lang\/ReflectiveOperationException flags 401\n+method name resolveConstantDesc descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/Object; thrownTypes java\/lang\/ReflectiveOperationException flags 1041 methodParameters 3e8:null\n+\n+class name java\/lang\/constant\/MethodTypeDesc\n+header extends java\/lang\/Object implements java\/lang\/constant\/ConstantDesc,java\/lang\/invoke\/TypeDescriptor$OfMethod sealed true flags 601 signature Ljava\/lang\/Object;Ljava\/lang\/constant\/ConstantDesc;Ljava\/lang\/invoke\/TypeDescriptor$OfMethod<Ljava\/lang\/constant\/ClassDesc;Ljava\/lang\/constant\/MethodTypeDesc;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+innerclass innerClass java\/lang\/invoke\/TypeDescriptor$OfMethod outerClass java\/lang\/invoke\/TypeDescriptor innerClassName OfMethod flags 609\n+innerclass innerClass java\/lang\/invoke\/TypeDescriptor$OfField outerClass java\/lang\/invoke\/TypeDescriptor innerClassName OfField flags 609\n+-method name descriptorString descriptor ()Ljava\/lang\/String;\n+method name resolveConstantDesc descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/invoke\/MethodType; thrownTypes java\/lang\/ReflectiveOperationException flags 401\n+method name resolveConstantDesc descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;)Ljava\/lang\/Object; thrownTypes java\/lang\/ReflectiveOperationException flags 1041 methodParameters 3e8:null\n+method name of descriptor (Ljava\/lang\/constant\/ClassDesc;)Ljava\/lang\/constant\/MethodTypeDesc; flags 9\n+method name of descriptor (Ljava\/lang\/constant\/ClassDesc;Ljava\/util\/List;)Ljava\/lang\/constant\/MethodTypeDesc; flags 9 signature (Ljava\/lang\/constant\/ClassDesc;Ljava\/util\/List<Ljava\/lang\/constant\/ClassDesc;>;)Ljava\/lang\/constant\/MethodTypeDesc;\n+method name descriptorString descriptor ()Ljava\/lang\/String; flags 401\n+\n+class name java\/lang\/constant\/ModuleDesc\n+header extends java\/lang\/Object sealed true flags 601\n+method name of descriptor (Ljava\/lang\/String;)Ljava\/lang\/constant\/ModuleDesc; flags 9\n+method name name descriptor ()Ljava\/lang\/String; flags 401\n+method name equals descriptor (Ljava\/lang\/Object;)Z flags 401\n+\n+class name java\/lang\/constant\/PackageDesc\n+header extends java\/lang\/Object sealed true flags 601\n+method name of descriptor (Ljava\/lang\/String;)Ljava\/lang\/constant\/PackageDesc; flags 9\n+method name ofInternalName descriptor (Ljava\/lang\/String;)Ljava\/lang\/constant\/PackageDesc; flags 9\n+method name internalName descriptor ()Ljava\/lang\/String; flags 401\n+method name name descriptor ()Ljava\/lang\/String; flags 1\n+method name equals descriptor (Ljava\/lang\/Object;)Z flags 401\n+\n+class name java\/lang\/foreign\/AddressLayout\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+method name withName descriptor (Ljava\/lang\/String;)Ljava\/lang\/foreign\/AddressLayout; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/AddressLayout; flags 401\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljava\/lang\/foreign\/AddressLayout; flags 401\n+method name withTargetLayout descriptor (Ljava\/lang\/foreign\/MemoryLayout;)Ljava\/lang\/foreign\/AddressLayout; flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name withoutTargetLayout descriptor ()Ljava\/lang\/foreign\/AddressLayout; flags 401\n+method name targetLayout descriptor ()Ljava\/util\/Optional; flags 401 signature ()Ljava\/util\/Optional<Ljava\/lang\/foreign\/MemoryLayout;>;\n+method name withName descriptor (Ljava\/lang\/String;)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 3e8:null\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 3e8:null\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 3e8:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/AddressLayout; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/Arena\n+header extends java\/lang\/Object implements java\/lang\/foreign\/SegmentAllocator,java\/lang\/AutoCloseable flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/MemorySegment$Scope outerClass java\/lang\/foreign\/MemorySegment innerClassName Scope flags 609\n+-method name scope descriptor ()Ljava\/lang\/foreign\/SegmentScope;\n+-method name isCloseableBy descriptor (Ljava\/lang\/Thread;)Z\n+-method name openConfined descriptor ()Ljava\/lang\/foreign\/Arena;\n+-method name openShared descriptor ()Ljava\/lang\/foreign\/Arena;\n+method name ofAuto descriptor ()Ljava\/lang\/foreign\/Arena; flags 9\n+method name global descriptor ()Ljava\/lang\/foreign\/Arena; flags 9\n+method name ofConfined descriptor ()Ljava\/lang\/foreign\/Arena; flags 9\n+method name ofShared descriptor ()Ljava\/lang\/foreign\/Arena; flags 9\n+method name scope descriptor ()Ljava\/lang\/foreign\/MemorySegment$Scope; flags 401\n+\n+class name java\/lang\/foreign\/FunctionDescriptor\n+header extends java\/lang\/Object sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+\n+class name java\/lang\/foreign\/GroupLayout\n+header extends java\/lang\/Object implements java\/lang\/foreign\/MemoryLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/GroupLayout;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/GroupLayout; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/GroupLayout; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/Linker\n+header extends java\/lang\/Object nestMembers java\/lang\/foreign\/Linker$Option sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/Linker$Option outerClass java\/lang\/foreign\/Linker innerClassName Option flags 609\n+-method name nativeLinker descriptor ()Ljava\/lang\/foreign\/Linker;\n+-method name downcallHandle descriptor (Ljava\/lang\/foreign\/MemorySegment;Ljava\/lang\/foreign\/FunctionDescriptor;[Ljava\/lang\/foreign\/Linker$Option;)Ljava\/lang\/invoke\/MethodHandle;\n+-method name downcallHandle descriptor (Ljava\/lang\/foreign\/FunctionDescriptor;[Ljava\/lang\/foreign\/Linker$Option;)Ljava\/lang\/invoke\/MethodHandle;\n+-method name upcallStub descriptor (Ljava\/lang\/invoke\/MethodHandle;Ljava\/lang\/foreign\/FunctionDescriptor;Ljava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/MemorySegment;\n+method name nativeLinker descriptor ()Ljava\/lang\/foreign\/Linker; flags 9\n+method name downcallHandle descriptor (Ljava\/lang\/foreign\/MemorySegment;Ljava\/lang\/foreign\/FunctionDescriptor;[Ljava\/lang\/foreign\/Linker$Option;)Ljava\/lang\/invoke\/MethodHandle; flags 481 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name downcallHandle descriptor (Ljava\/lang\/foreign\/FunctionDescriptor;[Ljava\/lang\/foreign\/Linker$Option;)Ljava\/lang\/invoke\/MethodHandle; flags 481 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name upcallStub descriptor (Ljava\/lang\/invoke\/MethodHandle;Ljava\/lang\/foreign\/FunctionDescriptor;Ljava\/lang\/foreign\/Arena;[Ljava\/lang\/foreign\/Linker$Option;)Ljava\/lang\/foreign\/MemorySegment; flags 481 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+\n+class name java\/lang\/foreign\/Linker$Option\n+header extends java\/lang\/Object nestHost java\/lang\/foreign\/Linker sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/Linker$Option outerClass java\/lang\/foreign\/Linker innerClassName Option flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name captureCallState descriptor ([Ljava\/lang\/String;)Ljava\/lang\/foreign\/Linker$Option$CaptureCallState;\n+method name captureCallState descriptor ([Ljava\/lang\/String;)Ljava\/lang\/foreign\/Linker$Option; flags 89\n+method name captureStateLayout descriptor ()Ljava\/lang\/foreign\/StructLayout; flags 9\n+method name isTrivial descriptor ()Ljava\/lang\/foreign\/Linker$Option; flags 9\n+\n+-class name java\/lang\/foreign\/Linker$Option$CaptureCallState\n+\n+class name java\/lang\/foreign\/MemoryLayout\n+header extends java\/lang\/Object nestMembers java\/lang\/foreign\/MemoryLayout$PathElement sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/MemoryLayout$PathElement outerClass java\/lang\/foreign\/MemoryLayout innerClassName PathElement flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name bitSize descriptor ()J\n+-method name bitAlignment descriptor ()J\n+-method name byteAlignment descriptor ()J\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name bitOffset descriptor ([Ljava\/lang\/foreign\/MemoryLayout$PathElement;)J\n+-method name bitOffsetHandle descriptor ([Ljava\/lang\/foreign\/MemoryLayout$PathElement;)Ljava\/lang\/invoke\/MethodHandle;\n+-method name valueLayout descriptor (Ljava\/lang\/Class;Ljava\/nio\/ByteOrder;)Ljava\/lang\/foreign\/ValueLayout;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 401\n+method name byteAlignment descriptor ()J flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 401\n+\n+class name java\/lang\/foreign\/MemoryLayout$PathElement\n+header extends java\/lang\/Object nestHost java\/lang\/foreign\/MemoryLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/MemoryLayout$PathElement outerClass java\/lang\/foreign\/MemoryLayout innerClassName PathElement flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name groupElement descriptor (J)Ljava\/lang\/foreign\/MemoryLayout$PathElement; flags 9\n+method name dereferenceElement descriptor ()Ljava\/lang\/foreign\/MemoryLayout$PathElement; flags 9\n+\n+class name java\/lang\/foreign\/MemorySegment\n+header extends java\/lang\/Object nestMembers java\/lang\/foreign\/MemorySegment$Scope sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfByte outerClass java\/lang\/foreign\/ValueLayout innerClassName OfByte flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfBoolean outerClass java\/lang\/foreign\/ValueLayout innerClassName OfBoolean flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfChar outerClass java\/lang\/foreign\/ValueLayout innerClassName OfChar flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfShort outerClass java\/lang\/foreign\/ValueLayout innerClassName OfShort flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfInt outerClass java\/lang\/foreign\/ValueLayout innerClassName OfInt flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfFloat outerClass java\/lang\/foreign\/ValueLayout innerClassName OfFloat flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfLong outerClass java\/lang\/foreign\/ValueLayout innerClassName OfLong flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfDouble outerClass java\/lang\/foreign\/ValueLayout innerClassName OfDouble flags 609\n+innerclass innerClass java\/lang\/foreign\/MemorySegment$Scope outerClass java\/lang\/foreign\/MemorySegment innerClassName Scope flags 609\n+-method name asSlice descriptor (J)Ljava\/lang\/foreign\/MemorySegment;\n+-method name array descriptor ()Ljava\/util\/Optional;\n+-method name scope descriptor ()Ljava\/lang\/foreign\/SegmentScope;\n+-method name ofAddress descriptor (JJ)Ljava\/lang\/foreign\/MemorySegment;\n+-method name ofAddress descriptor (JJLjava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/MemorySegment;\n+-method name ofAddress descriptor (JJLjava\/lang\/foreign\/SegmentScope;Ljava\/lang\/Runnable;)Ljava\/lang\/foreign\/MemorySegment;\n+-method name allocateNative descriptor (Ljava\/lang\/foreign\/MemoryLayout;Ljava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/MemorySegment;\n+-method name allocateNative descriptor (JLjava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/MemorySegment;\n+-method name allocateNative descriptor (JJLjava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/MemorySegment;\n+-method name get descriptor (Ljava\/lang\/foreign\/ValueLayout$OfAddress;J)Ljava\/lang\/foreign\/MemorySegment;\n+-method name set descriptor (Ljava\/lang\/foreign\/ValueLayout$OfAddress;JLjava\/lang\/foreign\/MemorySegment;)V\n+-method name getAtIndex descriptor (Ljava\/lang\/foreign\/ValueLayout$OfAddress;J)Ljava\/lang\/foreign\/MemorySegment;\n+-method name setAtIndex descriptor (Ljava\/lang\/foreign\/ValueLayout$OfAddress;JLjava\/lang\/foreign\/MemorySegment;)V\n+method name heapBase descriptor ()Ljava\/util\/Optional; flags 401 signature ()Ljava\/util\/Optional<Ljava\/lang\/Object;>;\n+method name scope descriptor ()Ljava\/lang\/foreign\/MemorySegment$Scope; flags 401\n+method name isAccessibleBy descriptor (Ljava\/lang\/Thread;)Z flags 401\n+method name asSlice descriptor (JJJ)Ljava\/lang\/foreign\/MemorySegment; flags 401\n+method name asSlice descriptor (JLjava\/lang\/foreign\/MemoryLayout;)Ljava\/lang\/foreign\/MemorySegment; flags 1\n+method name asSlice descriptor (J)Ljava\/lang\/foreign\/MemorySegment; flags 401\n+method name reinterpret descriptor (J)Ljava\/lang\/foreign\/MemorySegment; flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name reinterpret descriptor (Ljava\/lang\/foreign\/Arena;Ljava\/util\/function\/Consumer;)Ljava\/lang\/foreign\/MemorySegment; flags 401 signature (Ljava\/lang\/foreign\/Arena;Ljava\/util\/function\/Consumer<Ljava\/lang\/foreign\/MemorySegment;>;)Ljava\/lang\/foreign\/MemorySegment; runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name reinterpret descriptor (JLjava\/lang\/foreign\/Arena;Ljava\/util\/function\/Consumer;)Ljava\/lang\/foreign\/MemorySegment; flags 401 signature (JLjava\/lang\/foreign\/Arena;Ljava\/util\/function\/Consumer<Ljava\/lang\/foreign\/MemorySegment;>;)Ljava\/lang\/foreign\/MemorySegment; runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljava\/lang\/foreign\/AddressLayout;J)Ljava\/lang\/foreign\/MemorySegment; flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljava\/lang\/foreign\/AddressLayout;JLjava\/lang\/foreign\/MemorySegment;)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljava\/lang\/foreign\/ValueLayout$OfByte;J)B flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljava\/lang\/foreign\/ValueLayout$OfBoolean;J)Z flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljava\/lang\/foreign\/ValueLayout$OfByte;JB)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljava\/lang\/foreign\/ValueLayout$OfBoolean;JZ)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljava\/lang\/foreign\/AddressLayout;J)Ljava\/lang\/foreign\/MemorySegment; flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljava\/lang\/foreign\/AddressLayout;JLjava\/lang\/foreign\/MemorySegment;)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+\n+class name java\/lang\/foreign\/MemorySegment$Scope\n+header extends java\/lang\/Object nestHost java\/lang\/foreign\/MemorySegment sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/MemorySegment$Scope outerClass java\/lang\/foreign\/MemorySegment innerClassName Scope flags 609\n+method name isAlive descriptor ()Z flags 401\n+method name equals descriptor (Ljava\/lang\/Object;)Z flags 401\n+method name hashCode descriptor ()I flags 401\n+\n+class name java\/lang\/foreign\/PaddingLayout\n+header extends java\/lang\/Object implements java\/lang\/foreign\/MemoryLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/PaddingLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/PaddingLayout; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/PaddingLayout; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/SegmentAllocator\n+header extends java\/lang\/Object flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;) runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/foreign\/MemoryLayout$PathElement outerClass java\/lang\/foreign\/MemoryLayout innerClassName PathElement flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfByte outerClass java\/lang\/foreign\/ValueLayout innerClassName OfByte flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfChar outerClass java\/lang\/foreign\/ValueLayout innerClassName OfChar flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfShort outerClass java\/lang\/foreign\/ValueLayout innerClassName OfShort flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfInt outerClass java\/lang\/foreign\/ValueLayout innerClassName OfInt flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfFloat outerClass java\/lang\/foreign\/ValueLayout innerClassName OfFloat flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfLong outerClass java\/lang\/foreign\/ValueLayout innerClassName OfLong flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfDouble outerClass java\/lang\/foreign\/ValueLayout innerClassName OfDouble flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name allocate descriptor (Ljava\/lang\/foreign\/ValueLayout$OfAddress;Ljava\/lang\/foreign\/MemorySegment;)Ljava\/lang\/foreign\/MemorySegment;\n+-method name nativeAllocator descriptor (Ljava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/SegmentAllocator;\n+method name allocate descriptor (Ljava\/lang\/foreign\/AddressLayout;Ljava\/lang\/foreign\/MemorySegment;)Ljava\/lang\/foreign\/MemorySegment; flags 1\n+\n+-class name java\/lang\/foreign\/SegmentScope\n+\n+class name java\/lang\/foreign\/SequenceLayout\n+header extends java\/lang\/Object implements java\/lang\/foreign\/MemoryLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/SequenceLayout;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/SequenceLayout; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/StructLayout\n+header extends java\/lang\/Object implements java\/lang\/foreign\/GroupLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/StructLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/GroupLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/StructLayout; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/GroupLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/StructLayout; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/GroupLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/SymbolLookup\n+-method name libraryLookup descriptor (Ljava\/lang\/String;Ljava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/SymbolLookup;\n+-method name libraryLookup descriptor (Ljava\/nio\/file\/Path;Ljava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/SymbolLookup;\n+method name libraryLookup descriptor (Ljava\/lang\/String;Ljava\/lang\/foreign\/Arena;)Ljava\/lang\/foreign\/SymbolLookup; flags 9 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name libraryLookup descriptor (Ljava\/nio\/file\/Path;Ljava\/lang\/foreign\/Arena;)Ljava\/lang\/foreign\/SymbolLookup; flags 9 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name or descriptor (Ljava\/lang\/foreign\/SymbolLookup;)Ljava\/lang\/foreign\/SymbolLookup; flags 1\n+\n+class name java\/lang\/foreign\/UnionLayout\n+header extends java\/lang\/Object implements java\/lang\/foreign\/GroupLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/UnionLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/GroupLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/UnionLayout; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/GroupLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/UnionLayout; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/GroupLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+-class name java\/lang\/foreign\/VaList\n+\n+-class name java\/lang\/foreign\/VaList$Builder\n+\n+class name java\/lang\/foreign\/ValueLayout\n+header extends java\/lang\/Object implements java\/lang\/foreign\/MemoryLayout nestMembers java\/lang\/foreign\/ValueLayout$OfDouble,java\/lang\/foreign\/ValueLayout$OfLong,java\/lang\/foreign\/ValueLayout$OfFloat,java\/lang\/foreign\/ValueLayout$OfInt,java\/lang\/foreign\/ValueLayout$OfShort,java\/lang\/foreign\/ValueLayout$OfChar,java\/lang\/foreign\/ValueLayout$OfByte,java\/lang\/foreign\/ValueLayout$OfBoolean sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfByte outerClass java\/lang\/foreign\/ValueLayout innerClassName OfByte flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfBoolean outerClass java\/lang\/foreign\/ValueLayout innerClassName OfBoolean flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfChar outerClass java\/lang\/foreign\/ValueLayout innerClassName OfChar flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfShort outerClass java\/lang\/foreign\/ValueLayout innerClassName OfShort flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfInt outerClass java\/lang\/foreign\/ValueLayout innerClassName OfInt flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfLong outerClass java\/lang\/foreign\/ValueLayout innerClassName OfLong flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfFloat outerClass java\/lang\/foreign\/ValueLayout innerClassName OfFloat flags 609\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfDouble outerClass java\/lang\/foreign\/ValueLayout innerClassName OfDouble flags 609\n+-field name ADDRESS descriptor Ljava\/lang\/foreign\/ValueLayout$OfAddress;\n+-field name ADDRESS_UNALIGNED descriptor Ljava\/lang\/foreign\/ValueLayout$OfAddress;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+field name ADDRESS descriptor Ljava\/lang\/foreign\/AddressLayout; flags 19\n+field name ADDRESS_UNALIGNED descriptor Ljava\/lang\/foreign\/AddressLayout; flags 19\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+-class name java\/lang\/foreign\/ValueLayout$OfAddress\n+\n+class name java\/lang\/foreign\/ValueLayout$OfBoolean\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout nestHost java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfBoolean outerClass java\/lang\/foreign\/ValueLayout innerClassName OfBoolean flags 609\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfBoolean;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout$OfBoolean; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfBoolean; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/ValueLayout$OfByte\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout nestHost java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfByte outerClass java\/lang\/foreign\/ValueLayout innerClassName OfByte flags 609\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfByte;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout$OfByte; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfByte; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/ValueLayout$OfChar\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout nestHost java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfChar outerClass java\/lang\/foreign\/ValueLayout innerClassName OfChar flags 609\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfChar;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout$OfChar; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfChar; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/ValueLayout$OfDouble\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout nestHost java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfDouble outerClass java\/lang\/foreign\/ValueLayout innerClassName OfDouble flags 609\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfDouble;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout$OfDouble; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfDouble; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/ValueLayout$OfFloat\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout nestHost java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfFloat outerClass java\/lang\/foreign\/ValueLayout innerClassName OfFloat flags 609\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfFloat;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout$OfFloat; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfFloat; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/ValueLayout$OfInt\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout nestHost java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfInt outerClass java\/lang\/foreign\/ValueLayout innerClassName OfInt flags 609\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfInt;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout$OfInt; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfInt; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/ValueLayout$OfLong\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout nestHost java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfLong outerClass java\/lang\/foreign\/ValueLayout innerClassName OfLong flags 609\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfLong;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout$OfLong; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfLong; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/foreign\/ValueLayout$OfShort\n+header extends java\/lang\/Object implements java\/lang\/foreign\/ValueLayout nestHost java\/lang\/foreign\/ValueLayout sealed true flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+innerclass innerClass java\/lang\/foreign\/ValueLayout$OfShort outerClass java\/lang\/foreign\/ValueLayout innerClassName OfShort flags 609\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout;\n+-method name withBitAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfShort;\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout$OfShort; flags 401\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/ValueLayout; flags 1041\n+method name withoutName descriptor ()Ljava\/lang\/foreign\/MemoryLayout; flags 1041\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout$OfShort; flags 401\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/ValueLayout; flags 1041 methodParameters 1000:null\n+method name withByteAlignment descriptor (J)Ljava\/lang\/foreign\/MemoryLayout; flags 1041 methodParameters 1000:null\n+\n+class name java\/lang\/invoke\/CallSite\n+header extends java\/lang\/Object sealed true flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/invoke\/LambdaMetafactory\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/invoke\/MethodHandle\n+header extends java\/lang\/Object implements java\/lang\/constant\/Constable sealed true flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+innerclass innerClass java\/lang\/constant\/DirectMethodHandleDesc$Kind outerClass java\/lang\/constant\/DirectMethodHandleDesc innerClassName Kind flags 4019\n+\n+class name java\/lang\/invoke\/MethodHandleProxies\n+header extends java\/lang\/Object flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I1)\n+\n+class name java\/lang\/invoke\/MethodHandles$Lookup\n+-method name accessClass descriptor (Ljava\/lang\/Class;)Ljava\/lang\/Class;\n+-method name ensureInitialized descriptor (Ljava\/lang\/Class;)Ljava\/lang\/Class;\n+method name ensureInitialized descriptor (Ljava\/lang\/Class;)Ljava\/lang\/Class; thrownTypes java\/lang\/IllegalAccessException flags 1 signature <T:Ljava\/lang\/Object;>(Ljava\/lang\/Class<TT;>;)Ljava\/lang\/Class<TT;>;\n+method name accessClass descriptor (Ljava\/lang\/Class;)Ljava\/lang\/Class; thrownTypes java\/lang\/IllegalAccessException flags 1 signature <T:Ljava\/lang\/Object;>(Ljava\/lang\/Class<TT;>;)Ljava\/lang\/Class<TT;>;\n+\n+class name java\/lang\/invoke\/StringConcatException\n+header extends java\/lang\/Exception flags 21\n+\n+class name java\/lang\/invoke\/StringConcatFactory\n+field name MAX_INDY_CONCAT_ARG_SLOTS descriptor I flags 19 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;)\n+method name makeConcatWithTemplate descriptor (Ljava\/util\/List;Ljava\/util\/List;)Ljava\/lang\/invoke\/MethodHandle; thrownTypes java\/lang\/invoke\/StringConcatException flags 9 signature (Ljava\/util\/List<Ljava\/lang\/String;>;Ljava\/util\/List<Ljava\/lang\/Class<*>;>;)Ljava\/lang\/invoke\/MethodHandle; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;)\n+method name makeConcatWithTemplateCluster descriptor (Ljava\/util\/List;Ljava\/util\/List;I)Ljava\/util\/List; thrownTypes java\/lang\/invoke\/StringConcatException flags 9 signature (Ljava\/util\/List<Ljava\/lang\/String;>;Ljava\/util\/List<Ljava\/lang\/Class<*>;>;I)Ljava\/util\/List<Ljava\/lang\/invoke\/MethodHandle;>; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;)\n+method name makeConcatWithTemplateGetters descriptor (Ljava\/util\/List;Ljava\/util\/List;I)Ljava\/lang\/invoke\/MethodHandle; thrownTypes java\/lang\/invoke\/StringConcatException flags 9 signature (Ljava\/util\/List<Ljava\/lang\/String;>;Ljava\/util\/List<Ljava\/lang\/invoke\/MethodHandle;>;I)Ljava\/lang\/invoke\/MethodHandle; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;)\n+\n+class name java\/lang\/invoke\/VarHandle\n+header extends java\/lang\/Object implements java\/lang\/constant\/Constable nestMembers java\/lang\/invoke\/VarHandle$VarHandleDesc,java\/lang\/invoke\/VarHandle$AccessMode sealed true flags 421\n+innerclass innerClass java\/lang\/invoke\/VarHandle$AccessMode outerClass java\/lang\/invoke\/VarHandle innerClassName AccessMode flags 4019\n+innerclass innerClass java\/lang\/invoke\/VarHandle$VarHandleDesc outerClass java\/lang\/invoke\/VarHandle innerClassName VarHandleDesc flags 19\n+\n+class name java\/lang\/module\/Configuration\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/module\/FindException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/module\/InvalidModuleDescriptorException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/module\/ModuleReader\n+header extends java\/lang\/Object implements java\/io\/Closeable flags 601\n+\n+class name java\/lang\/module\/ModuleReference\n+header extends java\/lang\/Object flags 421\n+\n+class name java\/lang\/module\/ResolutionException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/module\/ResolvedModule\n+header extends java\/lang\/Object flags 31\n+\n+class name java\/lang\/ref\/Reference\n+header extends java\/lang\/Object sealed true flags 421 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;\n+\n+class name java\/lang\/reflect\/AccessibleObject\n+header extends java\/lang\/Object implements java\/lang\/reflect\/AnnotatedElement flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I1)\n+\n+class name java\/lang\/reflect\/AnnotatedElement\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/reflect\/ClassFileFormatVersion\n+field name RELEASE_21 descriptor Ljava\/lang\/reflect\/ClassFileFormatVersion; flags 4019\n+\n+class name java\/lang\/reflect\/Executable\n+header extends java\/lang\/reflect\/AccessibleObject implements java\/lang\/reflect\/Member,java\/lang\/reflect\/GenericDeclaration sealed true flags 421\n+innerclass innerClass java\/lang\/reflect\/AccessFlag$Location outerClass java\/lang\/reflect\/AccessFlag innerClassName Location flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/reflect\/InaccessibleObjectException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/runtime\/SwitchBootstraps\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+innerclass innerClass java\/lang\/Enum$EnumDesc outerClass java\/lang\/Enum innerClassName EnumDesc flags 19\n+\n+class name java\/lang\/runtime\/TemplateRuntime\n+header extends java\/lang\/Object flags 31 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;)\n+innerclass innerClass java\/lang\/StringTemplate$Processor outerClass java\/lang\/StringTemplate innerClassName Processor flags 609\n+innerclass innerClass java\/lang\/StringTemplate$Processor$Linkage outerClass java\/lang\/StringTemplate$Processor innerClassName Linkage flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name newStringTemplate descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;[Ljava\/lang\/String;)Ljava\/lang\/invoke\/CallSite; thrownTypes java\/lang\/Throwable flags 89\n+method name newLargeStringTemplate descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/CallSite; thrownTypes java\/lang\/Throwable flags 9\n+method name processStringTemplate descriptor (Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/invoke\/MethodHandle;[Ljava\/lang\/String;)Ljava\/lang\/invoke\/CallSite; thrownTypes java\/lang\/Throwable flags 89\n+\n+class name java\/net\/Authenticator\n+header extends java\/lang\/Object nestMembers java\/net\/Authenticator$RequestorType flags 421\n+innerclass innerClass java\/net\/Authenticator$RequestorType outerClass java\/net\/Authenticator innerClassName RequestorType flags 4019\n+\n+class name java\/net\/DatagramSocket\n+header extends java\/lang\/Object implements java\/io\/Closeable flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I1)\n+\n+class name java\/net\/InetAddress\n+header extends java\/lang\/Object implements java\/io\/Serializable sealed true flags 21\n+innerclass innerClass java\/net\/spi\/InetAddressResolver$LookupPolicy outerClass java\/net\/spi\/InetAddressResolver innerClassName LookupPolicy flags 19\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/net\/spi\/InetAddressResolverProvider$Configuration outerClass java\/net\/spi\/InetAddressResolverProvider innerClassName Configuration flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/net\/Socket\n+-method name setSoTimeout descriptor (I)V\n+-method name getSoTimeout descriptor ()I\n+-method name setSendBufferSize descriptor (I)V\n+-method name getSendBufferSize descriptor ()I\n+-method name setReceiveBufferSize descriptor (I)V\n+-method name getReceiveBufferSize descriptor ()I\n+-method name close descriptor ()V\n+method name setSoTimeout descriptor (I)V thrownTypes java\/net\/SocketException flags 1\n+method name getSoTimeout descriptor ()I thrownTypes java\/net\/SocketException flags 1\n+method name setSendBufferSize descriptor (I)V thrownTypes java\/net\/SocketException flags 1\n+method name getSendBufferSize descriptor ()I thrownTypes java\/net\/SocketException flags 1\n+method name setReceiveBufferSize descriptor (I)V thrownTypes java\/net\/SocketException flags 1\n+method name getReceiveBufferSize descriptor ()I thrownTypes java\/net\/SocketException flags 1\n+method name close descriptor ()V thrownTypes java\/io\/IOException flags 1\n+\n+class name java\/net\/SocketImpl\n+header extends java\/lang\/Object implements java\/net\/SocketOptions flags 421\n+\n+class name java\/net\/spi\/InetAddressResolverProvider$Configuration\n+header extends java\/lang\/Object nestHost java\/net\/spi\/InetAddressResolverProvider sealed true flags 601\n+innerclass innerClass java\/net\/spi\/InetAddressResolverProvider$Configuration outerClass java\/net\/spi\/InetAddressResolverProvider innerClassName Configuration flags 609\n+\n+class name java\/net\/spi\/URLStreamHandlerProvider\n+header extends java\/lang\/Object implements java\/net\/URLStreamHandlerFactory flags 421\n+\n+class name java\/nio\/Buffer\n+header extends java\/lang\/Object sealed true flags 421\n+\n+class name java\/nio\/ByteBuffer\n+header extends java\/nio\/Buffer implements java\/lang\/Comparable sealed true flags 421 signature Ljava\/nio\/Buffer;Ljava\/lang\/Comparable<Ljava\/nio\/ByteBuffer;>;\n+\n+class name java\/nio\/CharBuffer\n+header extends java\/nio\/Buffer implements java\/lang\/Comparable,java\/lang\/Appendable,java\/lang\/CharSequence,java\/lang\/Readable sealed true flags 421 signature Ljava\/nio\/Buffer;Ljava\/lang\/Comparable<Ljava\/nio\/CharBuffer;>;Ljava\/lang\/Appendable;Ljava\/lang\/CharSequence;Ljava\/lang\/Readable;\n+innerclass innerClass java\/util\/Spliterator$OfInt outerClass java\/util\/Spliterator innerClassName OfInt flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/nio\/DoubleBuffer\n+header extends java\/nio\/Buffer implements java\/lang\/Comparable sealed true flags 421 signature Ljava\/nio\/Buffer;Ljava\/lang\/Comparable<Ljava\/nio\/DoubleBuffer;>;\n+\n+class name java\/nio\/FloatBuffer\n+header extends java\/nio\/Buffer implements java\/lang\/Comparable sealed true flags 421 signature Ljava\/nio\/Buffer;Ljava\/lang\/Comparable<Ljava\/nio\/FloatBuffer;>;\n+\n+class name java\/nio\/IntBuffer\n+header extends java\/nio\/Buffer implements java\/lang\/Comparable sealed true flags 421 signature Ljava\/nio\/Buffer;Ljava\/lang\/Comparable<Ljava\/nio\/IntBuffer;>;\n+\n+class name java\/nio\/LongBuffer\n+header extends java\/nio\/Buffer implements java\/lang\/Comparable sealed true flags 421 signature Ljava\/nio\/Buffer;Ljava\/lang\/Comparable<Ljava\/nio\/LongBuffer;>;\n+\n+class name java\/nio\/MappedByteBuffer\n+header extends java\/nio\/ByteBuffer sealed true flags 421\n+\n+class name java\/nio\/ShortBuffer\n+header extends java\/nio\/Buffer implements java\/lang\/Comparable sealed true flags 421 signature Ljava\/nio\/Buffer;Ljava\/lang\/Comparable<Ljava\/nio\/ShortBuffer;>;\n+\n+class name java\/nio\/channels\/FileChannel\n+-method name map descriptor (Ljava\/nio\/channels\/FileChannel$MapMode;JJLjava\/lang\/foreign\/SegmentScope;)Ljava\/lang\/foreign\/MemorySegment;\n+method name map descriptor (Ljava\/nio\/channels\/FileChannel$MapMode;JJLjava\/lang\/foreign\/Arena;)Ljava\/lang\/foreign\/MemorySegment; thrownTypes java\/io\/IOException flags 1 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;FOREIGN;)\n+\n+class name java\/security\/Certificate\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"1.2\")\n+\n+class name java\/security\/Identity\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 421 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"1.2\")\n+\n+class name java\/security\/SecureRandomParameters\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/security\/SignedObject\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name java\/security\/cert\/CertStore\n+-method name getDefaultType descriptor ()Ljava\/lang\/String;\n+method name getDefaultType descriptor ()Ljava\/lang\/String; flags 19\n+\n+class name java\/security\/cert\/CertificateRevokedException\n+header extends java\/security\/cert\/CertificateException flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+\n+class name java\/security\/cert\/URICertStoreParameters\n+header extends java\/lang\/Object implements java\/security\/cert\/CertStoreParameters flags 31\n+\n+class name java\/security\/interfaces\/RSAKey\n+-method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec;\n+method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec; flags 1\n+\n+class name java\/security\/spec\/MGF1ParameterSpec\n+-field name SHA512_224 descriptor Ljava\/security\/spec\/MGF1ParameterSpec;\n+-field name SHA512_256 descriptor Ljava\/security\/spec\/MGF1ParameterSpec;\n+field name SHA512_224 descriptor Ljava\/security\/spec\/MGF1ParameterSpec; flags 19\n+field name SHA512_256 descriptor Ljava\/security\/spec\/MGF1ParameterSpec; flags 19\n+\n+class name java\/security\/spec\/PSSParameterSpec\n+-field name TRAILER_FIELD_BC descriptor I\n+-method name toString descriptor ()Ljava\/lang\/String;\n+field name TRAILER_FIELD_BC descriptor I constantValue 1 flags 19\n+method name toString descriptor ()Ljava\/lang\/String; flags 1\n+\n+class name java\/security\/spec\/RSAKeyGenParameterSpec\n+-method name <init> descriptor (ILjava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+-method name getKeyParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec;\n+method name <init> descriptor (ILjava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+method name getKeyParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec; flags 1\n+\n+class name java\/security\/spec\/RSAMultiPrimePrivateCrtKeySpec\n+-method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;[Ljava\/security\/spec\/RSAOtherPrimeInfo;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;[Ljava\/security\/spec\/RSAOtherPrimeInfo;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+\n+class name java\/security\/spec\/RSAPrivateCrtKeySpec\n+-method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+\n+class name java\/security\/spec\/RSAPrivateKeySpec\n+-method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+-method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec;\n+method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec; flags 1\n+\n+class name java\/security\/spec\/RSAPublicKeySpec\n+-method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+-method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec;\n+method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec; flags 1\n+\n+class name java\/text\/DateFormatSymbols\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+\n+class name java\/text\/RuleBasedCollator\n+header extends java\/text\/Collator flags 21\n+innerclass innerClass java\/text\/Normalizer$Form outerClass java\/text\/Normalizer innerClassName Form flags 4019\n+\n+class name java\/time\/ZoneId\n+header extends java\/lang\/Object implements java\/io\/Serializable sealed true flags 421 runtimeAnnotations @Ljdk\/internal\/ValueBased;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+\n+class name java\/time\/chrono\/ChronoLocalDate\n+header extends java\/lang\/Object implements java\/time\/temporal\/Temporal,java\/time\/temporal\/TemporalAdjuster,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Ljava\/time\/temporal\/Temporal;Ljava\/time\/temporal\/TemporalAdjuster;Ljava\/lang\/Comparable<Ljava\/time\/chrono\/ChronoLocalDate;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/time\/chrono\/ChronoLocalDateTime\n+header extends java\/lang\/Object implements java\/time\/temporal\/Temporal,java\/time\/temporal\/TemporalAdjuster,java\/lang\/Comparable flags 601 signature <D::Ljava\/time\/chrono\/ChronoLocalDate;>Ljava\/lang\/Object;Ljava\/time\/temporal\/Temporal;Ljava\/time\/temporal\/TemporalAdjuster;Ljava\/lang\/Comparable<Ljava\/time\/chrono\/ChronoLocalDateTime<*>;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/time\/temporal\/TemporalAdjusters\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/time\/zone\/ZoneRulesProvider\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/ArrayList\n+method name getFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name getLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name addFirst descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name addLast descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name removeFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+\n+class name java\/util\/Arrays\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/util\/Spliterator$OfInt outerClass java\/util\/Spliterator innerClassName OfInt flags 609\n+innerclass innerClass java\/util\/Spliterator$OfLong outerClass java\/util\/Spliterator innerClassName OfLong flags 609\n+innerclass innerClass java\/util\/Spliterator$OfDouble outerClass java\/util\/Spliterator innerClassName OfDouble flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/Collections\n+method name shuffle descriptor (Ljava\/util\/List;Ljava\/util\/random\/RandomGenerator;)V flags 9 signature (Ljava\/util\/List<*>;Ljava\/util\/random\/RandomGenerator;)V\n+method name unmodifiableSequencedCollection descriptor (Ljava\/util\/SequencedCollection;)Ljava\/util\/SequencedCollection; flags 9 signature <T:Ljava\/lang\/Object;>(Ljava\/util\/SequencedCollection<+TT;>;)Ljava\/util\/SequencedCollection<TT;>;\n+method name unmodifiableSequencedSet descriptor (Ljava\/util\/SequencedSet;)Ljava\/util\/SequencedSet; flags 9 signature <T:Ljava\/lang\/Object;>(Ljava\/util\/SequencedSet<+TT;>;)Ljava\/util\/SequencedSet<TT;>;\n+method name unmodifiableSequencedMap descriptor (Ljava\/util\/SequencedMap;)Ljava\/util\/SequencedMap; flags 9 signature <K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;>(Ljava\/util\/SequencedMap<+TK;+TV;>;)Ljava\/util\/SequencedMap<TK;TV;>;\n+method name newSequencedSetFromMap descriptor (Ljava\/util\/SequencedMap;)Ljava\/util\/SequencedSet; flags 9 signature <E:Ljava\/lang\/Object;>(Ljava\/util\/SequencedMap<TE;Ljava\/lang\/Boolean;>;)Ljava\/util\/SequencedSet<TE;>;\n+\n+class name java\/util\/Comparator\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/Deque\n+header extends java\/lang\/Object implements java\/util\/Queue,java\/util\/SequencedCollection flags 601 signature <E:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/Queue<TE;>;Ljava\/util\/SequencedCollection<TE;>;\n+method name reversed descriptor ()Ljava\/util\/Deque; flags 1 signature ()Ljava\/util\/Deque<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 1041\n+\n+class name java\/util\/DoubleSummaryStatistics\n+header extends java\/lang\/Object implements java\/util\/function\/DoubleConsumer flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/EnumSet\n+header extends java\/util\/AbstractSet implements java\/lang\/Cloneable,java\/io\/Serializable sealed true flags 421 signature <E:Ljava\/lang\/Enum<TE;>;>Ljava\/util\/AbstractSet<TE;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+\n+class name java\/util\/FormatProcessor\n+header extends java\/lang\/Object implements java\/lang\/StringTemplate$Processor,java\/lang\/StringTemplate$Processor$Linkage flags 31 signature Ljava\/lang\/Object;Ljava\/lang\/StringTemplate$Processor<Ljava\/lang\/String;Ljava\/lang\/RuntimeException;>;Ljava\/lang\/StringTemplate$Processor$Linkage; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;)\n+innerclass innerClass java\/lang\/StringTemplate$Processor outerClass java\/lang\/StringTemplate innerClassName Processor flags 609\n+innerclass innerClass java\/lang\/StringTemplate$Processor$Linkage outerClass java\/lang\/StringTemplate$Processor innerClassName Linkage flags 609\n+field name FMT descriptor Ljava\/util\/FormatProcessor; flags 19\n+method name create descriptor (Ljava\/util\/Locale;)Ljava\/util\/FormatProcessor; flags 9\n+method name process descriptor (Ljava\/lang\/StringTemplate;)Ljava\/lang\/String; flags 11\n+method name linkage descriptor (Ljava\/util\/List;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/MethodHandle; flags 1 signature (Ljava\/util\/List<Ljava\/lang\/String;>;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/MethodHandle;\n+method name process descriptor (Ljava\/lang\/StringTemplate;)Ljava\/lang\/Object; thrownTypes java\/lang\/Throwable flags 1041 methodParameters 3e8:null\n+\n+class name java\/util\/GregorianCalendar\n+header extends java\/util\/Calendar flags 21\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+\n+class name java\/util\/IllegalFormatException\n+header extends java\/lang\/IllegalArgumentException sealed true flags 21\n+\n+class name java\/util\/LinkedHashMap\n+header extends java\/util\/HashMap implements java\/util\/SequencedMap flags 21 signature <K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;>Ljava\/util\/HashMap<TK;TV;>;Ljava\/util\/SequencedMap<TK;TV;>;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+method name putFirst descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+method name putLast descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+method name sequencedKeySet descriptor ()Ljava\/util\/SequencedSet; flags 1 signature ()Ljava\/util\/SequencedSet<TK;>;\n+method name sequencedValues descriptor ()Ljava\/util\/SequencedCollection; flags 1 signature ()Ljava\/util\/SequencedCollection<TV;>;\n+method name sequencedEntrySet descriptor ()Ljava\/util\/SequencedSet; flags 1 signature ()Ljava\/util\/SequencedSet<Ljava\/util\/Map$Entry<TK;TV;>;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedMap; flags 1 signature ()Ljava\/util\/SequencedMap<TK;TV;>;\n+\n+class name java\/util\/LinkedHashSet\n+header extends java\/util\/HashSet implements java\/util\/SequencedSet,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature <E:Ljava\/lang\/Object;>Ljava\/util\/HashSet<TE;>;Ljava\/util\/SequencedSet<TE;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+method name addFirst descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name addLast descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name getFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name getLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name reversed descriptor ()Ljava\/util\/SequencedSet; flags 1 signature ()Ljava\/util\/SequencedSet<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 1041\n+\n+class name java\/util\/LinkedList\n+method name reversed descriptor ()Ljava\/util\/LinkedList; flags 1 signature ()Ljava\/util\/LinkedList<TE;>;\n+method name reversed descriptor ()Ljava\/util\/List; flags 1041\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 1041\n+method name reversed descriptor ()Ljava\/util\/Deque; flags 1041\n+\n+class name java\/util\/List\n+header extends java\/lang\/Object implements java\/util\/SequencedCollection flags 601 signature <E:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/SequencedCollection<TE;>;\n+method name addFirst descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name addLast descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name getFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name getLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name reversed descriptor ()Ljava\/util\/List; flags 1 signature ()Ljava\/util\/List<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 1041\n+\n+class name java\/util\/Locale\n+method name availableLocales descriptor ()Ljava\/util\/stream\/Stream; flags 9 signature ()Ljava\/util\/stream\/Stream<Ljava\/util\/Locale;>;\n+method name caseFoldLanguageTag descriptor (Ljava\/lang\/String;)Ljava\/lang\/String; flags 9\n+\n+class name java\/util\/Locale$IsoCountryCode\n+header extends java\/lang\/Enum nestHost java\/util\/Locale sealed true flags 4421 signature Ljava\/lang\/Enum<Ljava\/util\/Locale$IsoCountryCode;>;\n+innerclass innerClass java\/util\/Locale$IsoCountryCode outerClass java\/util\/Locale innerClassName IsoCountryCode flags 4409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/NavigableMap\n+method name reversed descriptor ()Ljava\/util\/NavigableMap; flags 1 signature ()Ljava\/util\/NavigableMap<TK;TV;>;\n+method name reversed descriptor ()Ljava\/util\/SortedMap; flags 1041\n+method name reversed descriptor ()Ljava\/util\/SequencedMap; flags 1041\n+\n+class name java\/util\/NavigableSet\n+method name removeFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name reversed descriptor ()Ljava\/util\/NavigableSet; flags 1 signature ()Ljava\/util\/NavigableSet<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SortedSet; flags 1041\n+method name reversed descriptor ()Ljava\/util\/SequencedSet; flags 1041\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 1041\n+\n+class name java\/util\/Observable\n+header extends java\/lang\/Object flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+\n+class name java\/util\/Observer\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+\n+class name java\/util\/SequencedCollection\n+header extends java\/lang\/Object implements java\/util\/Collection flags 601 signature <E:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/Collection<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 401 signature ()Ljava\/util\/SequencedCollection<TE;>;\n+method name addFirst descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name addLast descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name getFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name getLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+\n+class name java\/util\/SequencedMap\n+header extends java\/lang\/Object implements java\/util\/Map flags 601 signature <K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/Map<TK;TV;>;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+method name reversed descriptor ()Ljava\/util\/SequencedMap; flags 401 signature ()Ljava\/util\/SequencedMap<TK;TV;>;\n+method name firstEntry descriptor ()Ljava\/util\/Map$Entry; flags 1 signature ()Ljava\/util\/Map$Entry<TK;TV;>;\n+method name lastEntry descriptor ()Ljava\/util\/Map$Entry; flags 1 signature ()Ljava\/util\/Map$Entry<TK;TV;>;\n+method name pollFirstEntry descriptor ()Ljava\/util\/Map$Entry; flags 1 signature ()Ljava\/util\/Map$Entry<TK;TV;>;\n+method name pollLastEntry descriptor ()Ljava\/util\/Map$Entry; flags 1 signature ()Ljava\/util\/Map$Entry<TK;TV;>;\n+method name putFirst descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+method name putLast descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+method name sequencedKeySet descriptor ()Ljava\/util\/SequencedSet; flags 1 signature ()Ljava\/util\/SequencedSet<TK;>;\n+method name sequencedValues descriptor ()Ljava\/util\/SequencedCollection; flags 1 signature ()Ljava\/util\/SequencedCollection<TV;>;\n+method name sequencedEntrySet descriptor ()Ljava\/util\/SequencedSet; flags 1 signature ()Ljava\/util\/SequencedSet<Ljava\/util\/Map$Entry<TK;TV;>;>;\n+\n+class name java\/util\/SequencedSet\n+header extends java\/lang\/Object implements java\/util\/SequencedCollection,java\/util\/Set flags 601 signature <E:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/SequencedCollection<TE;>;Ljava\/util\/Set<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedSet; flags 401 signature ()Ljava\/util\/SequencedSet<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 1041\n+\n+class name java\/util\/SortedMap\n+header extends java\/lang\/Object implements java\/util\/SequencedMap flags 601 signature <K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/SequencedMap<TK;TV;>;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+method name putFirst descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+method name putLast descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+method name reversed descriptor ()Ljava\/util\/SortedMap; flags 1 signature ()Ljava\/util\/SortedMap<TK;TV;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedMap; flags 1041\n+\n+class name java\/util\/SortedSet\n+header extends java\/lang\/Object implements java\/util\/Set,java\/util\/SequencedSet flags 601 signature <E:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/Set<TE;>;Ljava\/util\/SequencedSet<TE;>;\n+method name addFirst descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name addLast descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name getFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name getLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name reversed descriptor ()Ljava\/util\/SortedSet; flags 1 signature ()Ljava\/util\/SortedSet<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedSet; flags 1041\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 1041\n+\n+class name java\/util\/TimeZone\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+\n+class name java\/util\/TreeMap\n+method name putFirst descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+method name putLast descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+\n+class name java\/util\/TreeSet\n+header extends java\/util\/AbstractSet implements java\/util\/NavigableSet,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature <E:Ljava\/lang\/Object;>Ljava\/util\/AbstractSet<TE;>;Ljava\/util\/NavigableSet<TE;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+method name addFirst descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name addLast descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+\n+class name java\/util\/concurrent\/ConcurrentHashMap$CollectionView\n+header extends java\/lang\/Object implements java\/util\/Collection,java\/io\/Serializable nestHost java\/util\/concurrent\/ConcurrentHashMap sealed true flags 420 signature <K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;E:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/Collection<TE;>;Ljava\/io\/Serializable;\n+innerclass innerClass java\/util\/concurrent\/ConcurrentHashMap$CollectionView outerClass java\/util\/concurrent\/ConcurrentHashMap innerClassName CollectionView flags 408\n+innerclass innerClass java\/util\/concurrent\/ConcurrentHashMap$KeySetView outerClass java\/util\/concurrent\/ConcurrentHashMap innerClassName KeySetView flags 19\n+\n+class name java\/util\/concurrent\/ConcurrentMap\n+header extends java\/lang\/Object implements java\/util\/Map flags 601 signature <K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/Map<TK;TV;>;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/ConcurrentSkipListMap\n+method name putFirst descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+method name putLast descriptor (Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (TK;TV;)TV;\n+\n+class name java\/util\/concurrent\/ConcurrentSkipListSet\n+header extends java\/util\/AbstractSet implements java\/util\/NavigableSet,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature <E:Ljava\/lang\/Object;>Ljava\/util\/AbstractSet<TE;>;Ljava\/util\/NavigableSet<TE;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name addFirst descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name addLast descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+\n+class name java\/util\/concurrent\/CopyOnWriteArrayList\n+method name getFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name getLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name addFirst descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name addLast descriptor (Ljava\/lang\/Object;)V flags 1 signature (TE;)V\n+method name removeFirst descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name removeLast descriptor ()Ljava\/lang\/Object; flags 1 signature ()TE;\n+method name reversed descriptor ()Ljava\/util\/List; flags 1 signature ()Ljava\/util\/List<TE;>;\n+method name reversed descriptor ()Ljava\/util\/SequencedCollection; flags 1041\n+\n+class name java\/util\/concurrent\/CountedCompleter\n+header extends java\/util\/concurrent\/ForkJoinTask flags 421 signature <T:Ljava\/lang\/Object;>Ljava\/util\/concurrent\/ForkJoinTask<TT;>; classAnnotations @Ljdk\/Profile+Annotation;(value=I1)\n+\n+class name java\/util\/concurrent\/DelayQueue\n+method name remove descriptor ()Ljava\/util\/concurrent\/Delayed; flags 1 signature ()TE;\n+method name remove descriptor ()Ljava\/lang\/Object; flags 1041\n+\n+class name java\/util\/concurrent\/Executors\n+-method name newThreadPerTaskExecutor descriptor (Ljava\/util\/concurrent\/ThreadFactory;)Ljava\/util\/concurrent\/ExecutorService;\n+-method name newVirtualThreadPerTaskExecutor descriptor ()Ljava\/util\/concurrent\/ExecutorService;\n+method name newThreadPerTaskExecutor descriptor (Ljava\/util\/concurrent\/ThreadFactory;)Ljava\/util\/concurrent\/ExecutorService; flags 9\n+method name newVirtualThreadPerTaskExecutor descriptor ()Ljava\/util\/concurrent\/ExecutorService; flags 9\n+\n+class name java\/util\/concurrent\/StructureViolationException\n+header extends java\/lang\/RuntimeException flags 31 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRUCTURED_CONCURRENCY;)\n+method name <init> descriptor ()V flags 1\n+method name <init> descriptor (Ljava\/lang\/String;)V flags 1\n+\n+class name java\/util\/concurrent\/StructuredTaskScope\n+header extends java\/lang\/Object implements java\/lang\/AutoCloseable nestMembers java\/util\/concurrent\/StructuredTaskScope$ShutdownOnFailure,java\/util\/concurrent\/StructuredTaskScope$ShutdownOnSuccess,java\/util\/concurrent\/StructuredTaskScope$Subtask,java\/util\/concurrent\/StructuredTaskScope$Subtask$State flags 21 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/lang\/AutoCloseable; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRUCTURED_CONCURRENCY;)\n+innerclass innerClass java\/lang\/Thread$Builder outerClass java\/lang\/Thread innerClassName Builder flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfVirtual outerClass java\/lang\/Thread$Builder innerClassName OfVirtual flags 609\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName Subtask flags 609\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask$State outerClass java\/util\/concurrent\/StructuredTaskScope$Subtask innerClassName State flags 4019\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$ShutdownOnFailure outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName ShutdownOnFailure flags 19\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$ShutdownOnSuccess outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName ShutdownOnSuccess flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name <init> descriptor (Ljava\/lang\/String;Ljava\/util\/concurrent\/ThreadFactory;)V flags 1\n+method name <init> descriptor ()V flags 1\n+method name ensureOwnerAndJoined descriptor ()V flags 14\n+method name handleComplete descriptor (Ljava\/util\/concurrent\/StructuredTaskScope$Subtask;)V flags 4 signature (Ljava\/util\/concurrent\/StructuredTaskScope$Subtask<+TT;>;)V\n+method name fork descriptor (Ljava\/util\/concurrent\/Callable;)Ljava\/util\/concurrent\/StructuredTaskScope$Subtask; flags 1 signature <U:TT;>(Ljava\/util\/concurrent\/Callable<+TU;>;)Ljava\/util\/concurrent\/StructuredTaskScope$Subtask<TU;>;\n+method name join descriptor ()Ljava\/util\/concurrent\/StructuredTaskScope; thrownTypes java\/lang\/InterruptedException flags 1 signature ()Ljava\/util\/concurrent\/StructuredTaskScope<TT;>;\n+method name joinUntil descriptor (Ljava\/time\/Instant;)Ljava\/util\/concurrent\/StructuredTaskScope; thrownTypes java\/lang\/InterruptedException,java\/util\/concurrent\/TimeoutException flags 1 signature (Ljava\/time\/Instant;)Ljava\/util\/concurrent\/StructuredTaskScope<TT;>;\n+method name shutdown descriptor ()V flags 1\n+method name isShutdown descriptor ()Z flags 11\n+method name close descriptor ()V flags 1\n+method name toString descriptor ()Ljava\/lang\/String; flags 1\n+\n+class name java\/util\/concurrent\/StructuredTaskScope$ShutdownOnFailure\n+header extends java\/util\/concurrent\/StructuredTaskScope nestHost java\/util\/concurrent\/StructuredTaskScope flags 31 signature Ljava\/util\/concurrent\/StructuredTaskScope<Ljava\/lang\/Object;>; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRUCTURED_CONCURRENCY;)\n+innerclass innerClass java\/lang\/Thread$Builder outerClass java\/lang\/Thread innerClassName Builder flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfVirtual outerClass java\/lang\/Thread$Builder innerClassName OfVirtual flags 609\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$ShutdownOnFailure outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName ShutdownOnFailure flags 19\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName Subtask flags 609\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask$State outerClass java\/util\/concurrent\/StructuredTaskScope$Subtask innerClassName State flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name <init> descriptor (Ljava\/lang\/String;Ljava\/util\/concurrent\/ThreadFactory;)V flags 1\n+method name <init> descriptor ()V flags 1\n+method name handleComplete descriptor (Ljava\/util\/concurrent\/StructuredTaskScope$Subtask;)V flags 4 signature (Ljava\/util\/concurrent\/StructuredTaskScope$Subtask<*>;)V\n+method name join descriptor ()Ljava\/util\/concurrent\/StructuredTaskScope$ShutdownOnFailure; thrownTypes java\/lang\/InterruptedException flags 1\n+method name joinUntil descriptor (Ljava\/time\/Instant;)Ljava\/util\/concurrent\/StructuredTaskScope$ShutdownOnFailure; thrownTypes java\/lang\/InterruptedException,java\/util\/concurrent\/TimeoutException flags 1\n+method name exception descriptor ()Ljava\/util\/Optional; flags 1 signature ()Ljava\/util\/Optional<Ljava\/lang\/Throwable;>;\n+method name throwIfFailed descriptor ()V thrownTypes java\/util\/concurrent\/ExecutionException flags 1\n+method name throwIfFailed descriptor (Ljava\/util\/function\/Function;)V thrownTypes java\/lang\/Throwable flags 1 signature <X:Ljava\/lang\/Throwable;>(Ljava\/util\/function\/Function<Ljava\/lang\/Throwable;+TX;>;)V^TX;\n+method name joinUntil descriptor (Ljava\/time\/Instant;)Ljava\/util\/concurrent\/StructuredTaskScope; thrownTypes java\/lang\/InterruptedException,java\/util\/concurrent\/TimeoutException flags 1041 methodParameters 1000:null\n+method name join descriptor ()Ljava\/util\/concurrent\/StructuredTaskScope; thrownTypes java\/lang\/InterruptedException flags 1041\n+\n+class name java\/util\/concurrent\/StructuredTaskScope$ShutdownOnSuccess\n+header extends java\/util\/concurrent\/StructuredTaskScope nestHost java\/util\/concurrent\/StructuredTaskScope flags 31 signature <T:Ljava\/lang\/Object;>Ljava\/util\/concurrent\/StructuredTaskScope<TT;>; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRUCTURED_CONCURRENCY;)\n+innerclass innerClass java\/lang\/Thread$Builder outerClass java\/lang\/Thread innerClassName Builder flags 609\n+innerclass innerClass java\/lang\/Thread$Builder$OfVirtual outerClass java\/lang\/Thread$Builder innerClassName OfVirtual flags 609\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$ShutdownOnSuccess outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName ShutdownOnSuccess flags 19\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName Subtask flags 609\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask$State outerClass java\/util\/concurrent\/StructuredTaskScope$Subtask innerClassName State flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name <init> descriptor (Ljava\/lang\/String;Ljava\/util\/concurrent\/ThreadFactory;)V flags 1\n+method name <init> descriptor ()V flags 1\n+method name handleComplete descriptor (Ljava\/util\/concurrent\/StructuredTaskScope$Subtask;)V flags 4 signature (Ljava\/util\/concurrent\/StructuredTaskScope$Subtask<+TT;>;)V\n+method name join descriptor ()Ljava\/util\/concurrent\/StructuredTaskScope$ShutdownOnSuccess; thrownTypes java\/lang\/InterruptedException flags 1 signature ()Ljava\/util\/concurrent\/StructuredTaskScope$ShutdownOnSuccess<TT;>;\n+method name joinUntil descriptor (Ljava\/time\/Instant;)Ljava\/util\/concurrent\/StructuredTaskScope$ShutdownOnSuccess; thrownTypes java\/lang\/InterruptedException,java\/util\/concurrent\/TimeoutException flags 1 signature (Ljava\/time\/Instant;)Ljava\/util\/concurrent\/StructuredTaskScope$ShutdownOnSuccess<TT;>;\n+method name result descriptor ()Ljava\/lang\/Object; thrownTypes java\/util\/concurrent\/ExecutionException flags 1 signature ()TT;\n+method name result descriptor (Ljava\/util\/function\/Function;)Ljava\/lang\/Object; thrownTypes java\/lang\/Throwable flags 1 signature <X:Ljava\/lang\/Throwable;>(Ljava\/util\/function\/Function<Ljava\/lang\/Throwable;+TX;>;)TT;^TX;\n+method name joinUntil descriptor (Ljava\/time\/Instant;)Ljava\/util\/concurrent\/StructuredTaskScope; thrownTypes java\/lang\/InterruptedException,java\/util\/concurrent\/TimeoutException flags 1041 methodParameters 1000:null\n+method name join descriptor ()Ljava\/util\/concurrent\/StructuredTaskScope; thrownTypes java\/lang\/InterruptedException flags 1041\n+\n+class name java\/util\/concurrent\/StructuredTaskScope$Subtask\n+header extends java\/lang\/Object implements java\/util\/function\/Supplier nestHost java\/util\/concurrent\/StructuredTaskScope sealed true flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/function\/Supplier<TT;>; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRUCTURED_CONCURRENCY;)\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName Subtask flags 609\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask$State outerClass java\/util\/concurrent\/StructuredTaskScope$Subtask innerClassName State flags 4019\n+method name task descriptor ()Ljava\/util\/concurrent\/Callable; flags 401 signature ()Ljava\/util\/concurrent\/Callable<+TT;>;\n+method name state descriptor ()Ljava\/util\/concurrent\/StructuredTaskScope$Subtask$State; flags 401\n+method name get descriptor ()Ljava\/lang\/Object; flags 401 signature ()TT;\n+method name exception descriptor ()Ljava\/lang\/Throwable; flags 401\n+\n+class name java\/util\/concurrent\/StructuredTaskScope$Subtask$State\n+header extends java\/lang\/Enum nestHost java\/util\/concurrent\/StructuredTaskScope flags 4031 signature Ljava\/lang\/Enum<Ljava\/util\/concurrent\/StructuredTaskScope$Subtask$State;>; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRUCTURED_CONCURRENCY;)\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask outerClass java\/util\/concurrent\/StructuredTaskScope innerClassName Subtask flags 609\n+innerclass innerClass java\/util\/concurrent\/StructuredTaskScope$Subtask$State outerClass java\/util\/concurrent\/StructuredTaskScope$Subtask innerClassName State flags 4019\n+field name UNAVAILABLE descriptor Ljava\/util\/concurrent\/StructuredTaskScope$Subtask$State; flags 4019\n+field name SUCCESS descriptor Ljava\/util\/concurrent\/StructuredTaskScope$Subtask$State; flags 4019\n+field name FAILED descriptor Ljava\/util\/concurrent\/StructuredTaskScope$Subtask$State; flags 4019\n+method name values descriptor ()[Ljava\/util\/concurrent\/StructuredTaskScope$Subtask$State; flags 9\n+method name valueOf descriptor (Ljava\/lang\/String;)Ljava\/util\/concurrent\/StructuredTaskScope$Subtask$State; flags 9 methodParameters 8000:null\n+\n+class name java\/util\/concurrent\/atomic\/AtomicBoolean\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/atomic\/AtomicReference\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21 signature <V:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/io\/Serializable;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/atomic\/AtomicReferenceArray\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21 signature <E:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/io\/Serializable;\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/locks\/StampedLock\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I1)\n+-method name tryWriteLock descriptor ()J\n+-method name writeLockInterruptibly descriptor ()J\n+-method name tryReadLock descriptor ()J\n+-method name tryReadLock descriptor (JLjava\/util\/concurrent\/TimeUnit;)J\n+-method name readLockInterruptibly descriptor ()J\n+-method name unlock descriptor (J)V\n+method name tryWriteLock descriptor ()J flags 1\n+method name writeLockInterruptibly descriptor ()J thrownTypes java\/lang\/InterruptedException flags 1\n+method name tryReadLock descriptor ()J flags 1\n+method name tryReadLock descriptor (JLjava\/util\/concurrent\/TimeUnit;)J thrownTypes java\/lang\/InterruptedException flags 1\n+method name readLockInterruptibly descriptor ()J thrownTypes java\/lang\/InterruptedException flags 1\n+method name unlock descriptor (J)V flags 1\n+\n+class name java\/util\/function\/BiConsumer\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;U:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/BiFunction\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;U:Ljava\/lang\/Object;R:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/BiPredicate\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;U:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/BinaryOperator\n+header extends java\/lang\/Object implements java\/util\/function\/BiFunction flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/function\/BiFunction<TT;TT;TT;>; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/Consumer\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/DoubleConsumer\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/DoublePredicate\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/DoubleUnaryOperator\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/Function\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/IntConsumer\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/IntPredicate\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/IntUnaryOperator\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/LongConsumer\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/LongPredicate\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/LongUnaryOperator\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/Predicate\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/UnaryOperator\n+header extends java\/lang\/Object implements java\/util\/function\/Function flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/function\/Function<TT;TT;>; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/regex\/Pattern\n+method name splitWithDelimiters descriptor (Ljava\/lang\/CharSequence;I)[Ljava\/lang\/String; flags 1\n+\n+class name java\/util\/spi\/AbstractResourceBundleProvider\n+header extends java\/lang\/Object implements java\/util\/spi\/ResourceBundleProvider flags 421\n+innerclass innerClass java\/util\/ResourceBundle$Control outerClass java\/util\/ResourceBundle innerClassName Control flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/spi\/CurrencyNameProvider\n+header extends java\/util\/spi\/LocaleServiceProvider flags 421\n+innerclass innerClass java\/util\/ResourceBundle$Control outerClass java\/util\/ResourceBundle innerClassName Control flags 9\n+\n+class name java\/util\/spi\/ResourceBundleProvider\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/util\/spi\/ToolProvider\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/zip\/CRC32C\n+header extends java\/lang\/Object implements java\/util\/zip\/Checksum flags 31\n+\n+class name javax\/crypto\/AEADBadTagException\n+header extends javax\/crypto\/BadPaddingException flags 21\n+\n+class name javax\/crypto\/BadPaddingException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/CipherInputStream\n+header extends java\/io\/FilterInputStream flags 21\n+\n+class name javax\/crypto\/CipherOutputStream\n+header extends java\/io\/FilterOutputStream flags 21\n+\n+class name javax\/crypto\/CipherSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/DecapsulateException\n+header extends java\/security\/GeneralSecurityException flags 21\n+method name <init> descriptor (Ljava\/lang\/String;)V flags 1\n+method name <init> descriptor (Ljava\/lang\/String;Ljava\/lang\/Throwable;)V flags 1\n+\n+class name javax\/crypto\/EncryptedPrivateKeyInfo\n+header extends java\/lang\/Object flags 21\n+\n+class name javax\/crypto\/ExemptionMechanism\n+header extends java\/lang\/Object flags 21\n+\n+class name javax\/crypto\/ExemptionMechanismException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/ExemptionMechanismSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/IllegalBlockSizeException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/KEM\n+header extends java\/lang\/Object nestMembers javax\/crypto\/KEM$Decapsulator,javax\/crypto\/KEM$Encapsulator,javax\/crypto\/KEM$Encapsulated flags 31\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+innerclass innerClass javax\/crypto\/KEM$Encapsulator outerClass javax\/crypto\/KEM innerClassName Encapsulator flags 19\n+innerclass innerClass javax\/crypto\/KEMSpi$EncapsulatorSpi outerClass javax\/crypto\/KEMSpi innerClassName EncapsulatorSpi flags 609\n+innerclass innerClass javax\/crypto\/KEM$Decapsulator outerClass javax\/crypto\/KEM innerClassName Decapsulator flags 19\n+innerclass innerClass javax\/crypto\/KEMSpi$DecapsulatorSpi outerClass javax\/crypto\/KEMSpi innerClassName DecapsulatorSpi flags 609\n+innerclass innerClass javax\/crypto\/KEM$Encapsulated outerClass javax\/crypto\/KEM innerClassName Encapsulated flags 19\n+method name getInstance descriptor (Ljava\/lang\/String;)Ljavax\/crypto\/KEM; thrownTypes java\/security\/NoSuchAlgorithmException flags 9\n+method name getInstance descriptor (Ljava\/lang\/String;Ljava\/security\/Provider;)Ljavax\/crypto\/KEM; thrownTypes java\/security\/NoSuchAlgorithmException flags 9\n+method name getInstance descriptor (Ljava\/lang\/String;Ljava\/lang\/String;)Ljavax\/crypto\/KEM; thrownTypes java\/security\/NoSuchAlgorithmException,java\/security\/NoSuchProviderException flags 9\n+method name newEncapsulator descriptor (Ljava\/security\/PublicKey;)Ljavax\/crypto\/KEM$Encapsulator; thrownTypes java\/security\/InvalidKeyException flags 1\n+method name newEncapsulator descriptor (Ljava\/security\/PublicKey;Ljava\/security\/SecureRandom;)Ljavax\/crypto\/KEM$Encapsulator; thrownTypes java\/security\/InvalidKeyException flags 1\n+method name newEncapsulator descriptor (Ljava\/security\/PublicKey;Ljava\/security\/spec\/AlgorithmParameterSpec;Ljava\/security\/SecureRandom;)Ljavax\/crypto\/KEM$Encapsulator; thrownTypes java\/security\/InvalidAlgorithmParameterException,java\/security\/InvalidKeyException flags 1\n+method name newDecapsulator descriptor (Ljava\/security\/PrivateKey;)Ljavax\/crypto\/KEM$Decapsulator; thrownTypes java\/security\/InvalidKeyException flags 1\n+method name newDecapsulator descriptor (Ljava\/security\/PrivateKey;Ljava\/security\/spec\/AlgorithmParameterSpec;)Ljavax\/crypto\/KEM$Decapsulator; thrownTypes java\/security\/InvalidAlgorithmParameterException,java\/security\/InvalidKeyException flags 1\n+method name getAlgorithm descriptor ()Ljava\/lang\/String; flags 1\n+\n+class name javax\/crypto\/KEM$Decapsulator\n+header extends java\/lang\/Object nestHost javax\/crypto\/KEM flags 31\n+innerclass innerClass javax\/crypto\/KEM$Decapsulator outerClass javax\/crypto\/KEM innerClassName Decapsulator flags 19\n+innerclass innerClass javax\/crypto\/KEMSpi$DecapsulatorSpi outerClass javax\/crypto\/KEMSpi innerClassName DecapsulatorSpi flags 609\n+method name providerName descriptor ()Ljava\/lang\/String; flags 1\n+method name decapsulate descriptor ([B)Ljavax\/crypto\/SecretKey; thrownTypes javax\/crypto\/DecapsulateException flags 1\n+method name decapsulate descriptor ([BIILjava\/lang\/String;)Ljavax\/crypto\/SecretKey; thrownTypes javax\/crypto\/DecapsulateException flags 1\n+method name secretSize descriptor ()I flags 1\n+method name encapsulationSize descriptor ()I flags 1\n+\n+class name javax\/crypto\/KEM$Encapsulated\n+header extends java\/lang\/Object nestHost javax\/crypto\/KEM flags 31\n+innerclass innerClass javax\/crypto\/KEM$Encapsulated outerClass javax\/crypto\/KEM innerClassName Encapsulated flags 19\n+method name <init> descriptor (Ljavax\/crypto\/SecretKey;[B[B)V flags 1\n+method name key descriptor ()Ljavax\/crypto\/SecretKey; flags 1\n+method name encapsulation descriptor ()[B flags 1\n+method name params descriptor ()[B flags 1\n+\n+class name javax\/crypto\/KEM$Encapsulator\n+header extends java\/lang\/Object nestHost javax\/crypto\/KEM flags 31\n+innerclass innerClass javax\/crypto\/KEM$Encapsulator outerClass javax\/crypto\/KEM innerClassName Encapsulator flags 19\n+innerclass innerClass javax\/crypto\/KEMSpi$EncapsulatorSpi outerClass javax\/crypto\/KEMSpi innerClassName EncapsulatorSpi flags 609\n+innerclass innerClass javax\/crypto\/KEM$Encapsulated outerClass javax\/crypto\/KEM innerClassName Encapsulated flags 19\n+method name providerName descriptor ()Ljava\/lang\/String; flags 1\n+method name encapsulate descriptor ()Ljavax\/crypto\/KEM$Encapsulated; flags 1\n+method name encapsulate descriptor (IILjava\/lang\/String;)Ljavax\/crypto\/KEM$Encapsulated; flags 1\n+method name secretSize descriptor ()I flags 1\n+method name encapsulationSize descriptor ()I flags 1\n+\n+class name javax\/crypto\/KEMSpi\n+header extends java\/lang\/Object nestMembers javax\/crypto\/KEMSpi$DecapsulatorSpi,javax\/crypto\/KEMSpi$EncapsulatorSpi flags 601\n+innerclass innerClass javax\/crypto\/KEMSpi$DecapsulatorSpi outerClass javax\/crypto\/KEMSpi innerClassName DecapsulatorSpi flags 609\n+innerclass innerClass javax\/crypto\/KEMSpi$EncapsulatorSpi outerClass javax\/crypto\/KEMSpi innerClassName EncapsulatorSpi flags 609\n+method name engineNewEncapsulator descriptor (Ljava\/security\/PublicKey;Ljava\/security\/spec\/AlgorithmParameterSpec;Ljava\/security\/SecureRandom;)Ljavax\/crypto\/KEMSpi$EncapsulatorSpi; thrownTypes java\/security\/InvalidAlgorithmParameterException,java\/security\/InvalidKeyException flags 401\n+method name engineNewDecapsulator descriptor (Ljava\/security\/PrivateKey;Ljava\/security\/spec\/AlgorithmParameterSpec;)Ljavax\/crypto\/KEMSpi$DecapsulatorSpi; thrownTypes java\/security\/InvalidAlgorithmParameterException,java\/security\/InvalidKeyException flags 401\n+\n+class name javax\/crypto\/KEMSpi$DecapsulatorSpi\n+header extends java\/lang\/Object nestHost javax\/crypto\/KEMSpi flags 601\n+innerclass innerClass javax\/crypto\/KEMSpi$DecapsulatorSpi outerClass javax\/crypto\/KEMSpi innerClassName DecapsulatorSpi flags 609\n+method name engineDecapsulate descriptor ([BIILjava\/lang\/String;)Ljavax\/crypto\/SecretKey; thrownTypes javax\/crypto\/DecapsulateException flags 401\n+method name engineSecretSize descriptor ()I flags 401\n+method name engineEncapsulationSize descriptor ()I flags 401\n+\n+class name javax\/crypto\/KEMSpi$EncapsulatorSpi\n+header extends java\/lang\/Object nestHost javax\/crypto\/KEMSpi flags 601\n+innerclass innerClass javax\/crypto\/KEMSpi$EncapsulatorSpi outerClass javax\/crypto\/KEMSpi innerClassName EncapsulatorSpi flags 609\n+innerclass innerClass javax\/crypto\/KEM$Encapsulated outerClass javax\/crypto\/KEM innerClassName Encapsulated flags 19\n+method name engineEncapsulate descriptor (IILjava\/lang\/String;)Ljavax\/crypto\/KEM$Encapsulated; flags 401\n+method name engineSecretSize descriptor ()I flags 401\n+method name engineEncapsulationSize descriptor ()I flags 401\n+\n+class name javax\/crypto\/KeyAgreement\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n+class name javax\/crypto\/KeyAgreementSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/KeyGenerator\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n+class name javax\/crypto\/KeyGeneratorSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/Mac\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n+class name javax\/crypto\/MacSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/NoSuchPaddingException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/NullCipher\n+header extends javax\/crypto\/Cipher flags 21\n+\n+class name javax\/crypto\/SealedObject\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/crypto\/SecretKey\n+header extends java\/lang\/Object implements java\/security\/Key,javax\/security\/auth\/Destroyable flags 601\n+\n+class name javax\/crypto\/SecretKeyFactory\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n+class name javax\/crypto\/SecretKeyFactorySpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/ShortBufferException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/interfaces\/DHKey\n+header extends java\/lang\/Object flags 601\n+\n+class name javax\/crypto\/interfaces\/DHPrivateKey\n+header extends java\/lang\/Object implements javax\/crypto\/interfaces\/DHKey,java\/security\/PrivateKey flags 601\n+\n+class name javax\/crypto\/interfaces\/DHPublicKey\n+header extends java\/lang\/Object implements javax\/crypto\/interfaces\/DHKey,java\/security\/PublicKey flags 601\n+\n+class name javax\/crypto\/interfaces\/PBEKey\n+header extends java\/lang\/Object implements javax\/crypto\/SecretKey flags 601\n+\n+class name javax\/crypto\/spec\/DESKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/DESedeKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/DHGenParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/DHParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/DHPrivateKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/DHPublicKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/GCMParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/IvParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/OAEPParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+innerclass innerClass javax\/crypto\/spec\/PSource$PSpecified outerClass javax\/crypto\/spec\/PSource innerClassName PSpecified flags 19\n+\n+class name javax\/crypto\/spec\/PBEKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/PBEParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/RC2ParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/RC5ParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/net\/ssl\/KeyManagerFactory\n+-method name getDefaultAlgorithm descriptor ()Ljava\/lang\/String;\n+method name getDefaultAlgorithm descriptor ()Ljava\/lang\/String; flags 19\n+\n+class name javax\/net\/ssl\/TrustManagerFactory\n+-method name getDefaultAlgorithm descriptor ()Ljava\/lang\/String;\n+method name getDefaultAlgorithm descriptor ()Ljava\/lang\/String; flags 19\n+\n+class name jdk\/internal\/event\/Event\n+header extends java\/lang\/Object flags 421\n+-method name <init> descriptor ()V\n+-method name begin descriptor ()V\n+-method name end descriptor ()V\n+-method name commit descriptor ()V\n+-method name isEnabled descriptor ()Z\n+-method name shouldCommit descriptor ()Z\n+-method name set descriptor (ILjava\/lang\/Object;)V\n+method name <init> descriptor ()V flags 4\n+method name begin descriptor ()V flags 1\n+method name end descriptor ()V flags 1\n+method name commit descriptor ()V flags 1\n+method name isEnabled descriptor ()Z flags 1\n+method name shouldCommit descriptor ()Z flags 1\n+method name set descriptor (ILjava\/lang\/Object;)V flags 1\n+\n+class name jdk\/internal\/vm\/vector\/VectorSupport\n+header extends java\/lang\/Object nestMembers jdk\/internal\/vm\/vector\/VectorSupport$VectorMask,jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle,jdk\/internal\/vm\/vector\/VectorSupport$Vector,jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload,jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies flags 21\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$Vector outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName Vector flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorShuffle flags 9\n+-method name shuffleIota descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;IIIILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleIotaOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\n+-method name shuffleToVector descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;ILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleToVectorOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\n+method name indexPartiallyInUpperRange descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;IJJLjdk\/internal\/vm\/vector\/VectorSupport$IndexPartiallyInUpperRangeOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask; flags 9 signature <E:Ljava\/lang\/Object;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;>(Ljava\/lang\/Class<+TM;>;Ljava\/lang\/Class<TE;>;IJJLjdk\/internal\/vm\/vector\/VectorSupport$IndexPartiallyInUpperRangeOperation<TE;TM;>;)TM; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.base-L.sym.txt","additions":1561,"deletions":0,"binary":false,"changes":1561,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/annotation\/processing\/AbstractProcessor\n+header extends java\/lang\/Object implements javax\/annotation\/processing\/Processor flags 421\n+innerclass innerClass javax\/tools\/Diagnostic$Kind outerClass javax\/tools\/Diagnostic innerClassName Kind flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/annotation\/processing\/Generated\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;SOURCE;)@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;PACKAGE;eLjava\/lang\/annotation\/ElementType;TYPE;eLjava\/lang\/annotation\/ElementType;METHOD;eLjava\/lang\/annotation\/ElementType;CONSTRUCTOR;eLjava\/lang\/annotation\/ElementType;FIELD;eLjava\/lang\/annotation\/ElementType;LOCAL_VARIABLE;eLjava\/lang\/annotation\/ElementType;PARAMETER;})\n+\n+class name javax\/lang\/model\/SourceVersion\n+field name RELEASE_21 descriptor Ljavax\/lang\/model\/SourceVersion; flags 4019\n+\n+class name javax\/lang\/model\/element\/Modifier\n+header extends java\/lang\/Enum sealed true flags 4021 signature Ljava\/lang\/Enum<Ljavax\/lang\/model\/element\/Modifier;>;\n+\n+class name javax\/lang\/model\/element\/TypeElement\n+method name isUnnamed descriptor ()Z flags 1 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;UNNAMED_CLASSES;,reflective=Ztrue)\n+\n+class name javax\/lang\/model\/element\/UnknownAnnotationValueException\n+header extends javax\/lang\/model\/UnknownEntityException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/element\/UnknownDirectiveException\n+header extends javax\/lang\/model\/UnknownEntityException flags 21\n+innerclass innerClass javax\/lang\/model\/element\/ModuleElement$Directive outerClass javax\/lang\/model\/element\/ModuleElement innerClassName Directive flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/element\/UnknownElementException\n+header extends javax\/lang\/model\/UnknownEntityException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/element\/VariableElement\n+method name isUnnamed descriptor ()Z flags 1 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;UNNAMED;,reflective=Ztrue)\n+\n+class name javax\/lang\/model\/type\/MirroredTypeException\n+header extends javax\/lang\/model\/type\/MirroredTypesException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/type\/MirroredTypesException\n+header extends java\/lang\/RuntimeException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/type\/UnknownTypeException\n+header extends javax\/lang\/model\/UnknownEntityException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/util\/AbstractAnnotationValueVisitor14\n+header extends javax\/lang\/model\/util\/AbstractAnnotationValueVisitor9 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractAnnotationValueVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/lang\/model\/util\/AbstractElementVisitor14\n+header extends javax\/lang\/model\/util\/AbstractElementVisitor9 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractElementVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/lang\/model\/util\/AbstractTypeVisitor14\n+header extends javax\/lang\/model\/util\/AbstractTypeVisitor9 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractTypeVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/lang\/model\/util\/AbstractTypeVisitor6\n+header extends java\/lang\/Object implements javax\/lang\/model\/type\/TypeVisitor flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljavax\/lang\/model\/type\/TypeVisitor<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_6;)\n+\n+class name javax\/lang\/model\/util\/AbstractTypeVisitor7\n+header extends javax\/lang\/model\/util\/AbstractTypeVisitor6 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractTypeVisitor6<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_7;)\n+\n+class name javax\/lang\/model\/util\/AbstractTypeVisitor8\n+header extends javax\/lang\/model\/util\/AbstractTypeVisitor7 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractTypeVisitor7<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_8;)\n+\n+class name javax\/lang\/model\/util\/ElementKindVisitor14\n+header extends javax\/lang\/model\/util\/ElementKindVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/ElementKindVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/lang\/model\/util\/ElementScanner14\n+header extends javax\/lang\/model\/util\/ElementScanner9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/ElementScanner9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/lang\/model\/util\/SimpleAnnotationValueVisitor14\n+header extends javax\/lang\/model\/util\/SimpleAnnotationValueVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/SimpleAnnotationValueVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/lang\/model\/util\/SimpleElementVisitor14\n+header extends javax\/lang\/model\/util\/SimpleElementVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/SimpleElementVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/lang\/model\/util\/SimpleTypeVisitor14\n+header extends javax\/lang\/model\/util\/SimpleTypeVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/SimpleTypeVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/lang\/model\/util\/TypeKindVisitor14\n+header extends javax\/lang\/model\/util\/TypeKindVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/TypeKindVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_21;)\n+\n+class name javax\/tools\/SimpleJavaFileObject\n+header extends java\/lang\/Object implements javax\/tools\/JavaFileObject flags 21\n+innerclass innerClass javax\/tools\/JavaFileObject$Kind outerClass javax\/tools\/JavaFileObject innerClassName Kind flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/tools\/ToolProvider\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.compiler-L.sym.txt","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/awt\/datatransfer\/Clipboard\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/datatransfer\/DataFlavor\n+header extends java\/lang\/Object implements java\/io\/Externalizable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.datatransfer-L.sym.txt","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,906 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/awt\/AWTKeyStroke\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/AttributeValue\n+header extends java\/lang\/Object flags 420\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/BorderLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager2,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/CheckboxGroup\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Color\n+header extends java\/lang\/Object implements java\/awt\/Paint,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/ContainerOrderFocusTraversalPolicy\n+header extends java\/awt\/FocusTraversalPolicy implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Dimension\n+header extends java\/awt\/geom\/Dimension2D implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/DisplayMode\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Event\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/FlowLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/FontMetrics\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Graphics\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/GridLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/HeadlessException\n+header extends java\/lang\/UnsupportedOperationException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Insets\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/MenuShortcut\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/MultipleGradientPaint\n+header extends java\/lang\/Object implements java\/awt\/Paint nestMembers java\/awt\/MultipleGradientPaint$ColorSpaceType,java\/awt\/MultipleGradientPaint$CycleMethod sealed true flags 421\n+innerclass innerClass java\/awt\/MultipleGradientPaint$ColorSpaceType outerClass java\/awt\/MultipleGradientPaint innerClassName ColorSpaceType flags 4019\n+innerclass innerClass java\/awt\/MultipleGradientPaint$CycleMethod outerClass java\/awt\/MultipleGradientPaint innerClassName CycleMethod flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Point\n+header extends java\/awt\/geom\/Point2D implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Rectangle\n+header extends java\/awt\/geom\/Rectangle2D implements java\/awt\/Shape,java\/io\/Serializable flags 21\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/SystemColor\n+header extends java\/awt\/Color implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/TextComponent\n+header extends java\/awt\/Component implements javax\/accessibility\/Accessible nestMembers java\/awt\/TextComponent$AccessibleAWTTextComponent sealed true flags 21\n+innerclass innerClass java\/awt\/TextComponent$AccessibleAWTTextComponent outerClass java\/awt\/TextComponent innerClassName AccessibleAWTTextComponent flags 4\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/TexturePaint\n+header extends java\/lang\/Object implements java\/awt\/Paint flags 21\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+\n+class name java\/awt\/color\/ColorSpace\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/color\/ICC_ColorSpace\n+header extends java\/awt\/color\/ColorSpace flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I4)\n+\n+class name java\/awt\/color\/ICC_Profile\n+header extends java\/lang\/Object implements java\/io\/Serializable sealed true flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/desktop\/AboutEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/AboutHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/AppEvent\n+header extends java\/util\/EventObject sealed true flags 21\n+\n+class name java\/awt\/desktop\/AppForegroundEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/AppForegroundListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/AppHiddenEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/AppHiddenListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/AppReopenedEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/AppReopenedListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/FilesEvent\n+header extends java\/awt\/desktop\/AppEvent sealed true flags 21\n+\n+class name java\/awt\/desktop\/OpenFilesEvent\n+header extends java\/awt\/desktop\/FilesEvent flags 31\n+\n+class name java\/awt\/desktop\/OpenFilesHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/OpenURIEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/OpenURIHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/PreferencesEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/PreferencesHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/PrintFilesEvent\n+header extends java\/awt\/desktop\/FilesEvent flags 31\n+\n+class name java\/awt\/desktop\/PrintFilesHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/QuitEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/QuitHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/QuitResponse\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/QuitStrategy\n+header extends java\/lang\/Enum flags 4031 signature Ljava\/lang\/Enum<Ljava\/awt\/desktop\/QuitStrategy;>;\n+\n+class name java\/awt\/desktop\/ScreenSleepEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/ScreenSleepListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/SystemEventListener\n+header extends java\/lang\/Object implements java\/util\/EventListener flags 601\n+\n+class name java\/awt\/desktop\/SystemSleepEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/SystemSleepListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/UserSessionListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/dnd\/DragGestureEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name java\/awt\/dnd\/DragGestureRecognizer\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 421\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name java\/awt\/dnd\/DragSource\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/dnd\/DropTargetDragEvent\n+header extends java\/awt\/dnd\/DropTargetEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/dnd\/DropTargetDropEvent\n+header extends java\/awt\/dnd\/DropTargetEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/ActionEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/AdjustmentEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/ComponentEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/ContainerEvent\n+header extends java\/awt\/event\/ComponentEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/HierarchyEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/InputEvent\n+header extends java\/awt\/event\/ComponentEvent sealed true flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/InputMethodEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/ItemEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/MouseWheelEvent\n+header extends java\/awt\/event\/MouseEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/PaintEvent\n+header extends java\/awt\/event\/ComponentEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/WindowEvent\n+header extends java\/awt\/event\/ComponentEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/font\/FontRenderContext\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/awt\/RenderingHints$Key outerClass java\/awt\/RenderingHints innerClassName Key flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/font\/GraphicAttribute\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Float outerClass java\/awt\/geom\/Rectangle2D innerClassName Float flags 9\n+\n+class name java\/awt\/font\/ImageGraphicAttribute\n+header extends java\/awt\/font\/GraphicAttribute flags 31\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Float outerClass java\/awt\/geom\/Rectangle2D innerClassName Float flags 9\n+\n+class name java\/awt\/font\/NumericShaper$Range\n+header extends java\/lang\/Enum nestHost java\/awt\/font\/NumericShaper sealed true flags 4021 signature Ljava\/lang\/Enum<Ljava\/awt\/font\/NumericShaper$Range;>;\n+innerclass innerClass java\/awt\/font\/NumericShaper$Range outerClass java\/awt\/font\/NumericShaper innerClassName Range flags 4009\n+\n+class name java\/awt\/font\/ShapeGraphicAttribute\n+header extends java\/awt\/font\/GraphicAttribute flags 31\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Float outerClass java\/awt\/geom\/Rectangle2D innerClassName Float flags 9\n+\n+class name java\/awt\/font\/TextHitInfo\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/font\/TextMeasurer\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 31\n+innerclass innerClass java\/text\/AttributedCharacterIterator$Attribute outerClass java\/text\/AttributedCharacterIterator innerClassName Attribute flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/geom\/AffineTransform\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Double outerClass java\/awt\/geom\/Point2D innerClassName Double flags 9\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+innerclass innerClass java\/awt\/geom\/Path2D$Double outerClass java\/awt\/geom\/Path2D innerClassName Double flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/geom\/Area\n+header extends java\/lang\/Object implements java\/awt\/Shape,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+\n+class name java\/awt\/geom\/Path2D\n+header extends java\/lang\/Object implements java\/awt\/Shape,java\/lang\/Cloneable nestMembers java\/awt\/geom\/Path2D$Double,java\/awt\/geom\/Path2D$Float sealed true flags 421\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+innerclass innerClass java\/awt\/geom\/Path2D$Double outerClass java\/awt\/geom\/Path2D innerClassName Double flags 9\n+innerclass innerClass java\/awt\/geom\/Path2D$Float outerClass java\/awt\/geom\/Path2D innerClassName Float flags 9\n+\n+class name java\/awt\/geom\/RectangularShape\n+header extends java\/lang\/Object implements java\/awt\/Shape,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+\n+class name java\/awt\/image\/AbstractMultiResolutionImage\n+header extends java\/awt\/Image implements java\/awt\/image\/MultiResolutionImage flags 421\n+\n+class name java\/awt\/image\/BandCombineOp\n+header extends java\/lang\/Object implements java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/BandedSampleModel\n+header extends java\/awt\/image\/ComponentSampleModel flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/BaseMultiResolutionImage\n+header extends java\/awt\/image\/AbstractMultiResolutionImage flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/BufferedImageFilter\n+header extends java\/awt\/image\/ImageFilter implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ByteLookupTable\n+header extends java\/awt\/image\/LookupTable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ColorConvertOp\n+header extends java\/lang\/Object implements java\/awt\/image\/BufferedImageOp,java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+\n+class name java\/awt\/image\/ComponentColorModel\n+header extends java\/awt\/image\/ColorModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ComponentSampleModel\n+header extends java\/awt\/image\/SampleModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ConvolveOp\n+header extends java\/lang\/Object implements java\/awt\/image\/BufferedImageOp,java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+\n+class name java\/awt\/image\/DataBufferUShort\n+header extends java\/awt\/image\/DataBuffer flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/DirectColorModel\n+header extends java\/awt\/image\/PackedColorModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ImageFilter\n+header extends java\/lang\/Object implements java\/awt\/image\/ImageConsumer,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/IndexColorModel\n+header extends java\/awt\/image\/ColorModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/Kernel\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/LookupOp\n+header extends java\/lang\/Object implements java\/awt\/image\/BufferedImageOp,java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/MultiPixelPackedSampleModel\n+header extends java\/awt\/image\/SampleModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/MultiResolutionImage\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/image\/PackedColorModel\n+header extends java\/awt\/image\/ColorModel flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/Raster\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ReplicateScaleFilter\n+header extends java\/awt\/image\/ImageFilter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/RescaleOp\n+header extends java\/lang\/Object implements java\/awt\/image\/BufferedImageOp,java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/SampleModel\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ShortLookupTable\n+header extends java\/awt\/image\/LookupTable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/SinglePixelPackedSampleModel\n+header extends java\/awt\/image\/SampleModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/print\/Paper\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+\n+class name java\/beans\/BeanProperty\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;METHOD;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)\n+\n+class name java\/beans\/Beans\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/DefaultPersistenceDelegate\n+header extends java\/beans\/PersistenceDelegate flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/Encoder\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/EventSetDescriptor\n+header extends java\/beans\/FeatureDescriptor flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/Expression\n+header extends java\/beans\/Statement flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/FeatureDescriptor\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+\n+class name java\/beans\/IndexedPropertyDescriptor\n+header extends java\/beans\/PropertyDescriptor flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/JavaBean\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;TYPE;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)\n+\n+class name java\/beans\/PropertyDescriptor\n+header extends java\/beans\/FeatureDescriptor flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/SimpleBeanInfo\n+header extends java\/lang\/Object implements java\/beans\/BeanInfo flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/accessibility\/AccessibilityProvider\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/accessibility\/AccessibleBundle\n+header extends java\/lang\/Object flags 421 classAnnotations @Ljdk\/Profile+Annotation;(value=I4)\n+\n+class name javax\/accessibility\/AccessibleRelationSet\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/accessibility\/AccessibleStateSet\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/metadata\/IIOMetadata\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/jpeg\/JPEGHuffmanTable\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/jpeg\/JPEGQTable\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFDirectory\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 21\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFField\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFImageReadParam\n+header extends javax\/imageio\/ImageReadParam flags 31\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFTag\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFTagSet\n+header extends java\/lang\/Object flags 21\n+\n+class name javax\/imageio\/spi\/ImageReaderWriterSpi\n+header extends javax\/imageio\/spi\/IIOServiceProvider flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/attribute\/DateTimeSyntax\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/attribute\/EnumSyntax\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/attribute\/IntegerSyntax\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/attribute\/standard\/MediaPrintableArea\n+header extends java\/lang\/Object implements javax\/print\/attribute\/DocAttribute,javax\/print\/attribute\/PrintRequestAttribute,javax\/print\/attribute\/PrintJobAttribute flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/event\/PrintEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/MetaMessage\n+header extends javax\/sound\/midi\/MidiMessage flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/MidiMessage\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/Sequence\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/ShortMessage\n+header extends javax\/sound\/midi\/MidiMessage flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/SysexMessage\n+header extends javax\/sound\/midi\/MidiMessage flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/sampled\/ReverbType\n+header extends java\/lang\/Object flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I4)\n+\n+class name javax\/sound\/sampled\/spi\/FormatConversionProvider\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/sound\/sampled\/AudioFormat$Encoding outerClass javax\/sound\/sampled\/AudioFormat innerClassName Encoding flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/BoxLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager2,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/DebugGraphics\n+header extends java\/awt\/Graphics flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/DefaultBoundedRangeModel\n+header extends java\/lang\/Object implements javax\/swing\/BoundedRangeModel,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/DefaultListSelectionModel\n+header extends java\/lang\/Object implements javax\/swing\/ListSelectionModel,java\/lang\/Cloneable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/GrayFilter\n+header extends java\/awt\/image\/RGBImageFilter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/GroupLayout$Group\n+header extends javax\/swing\/GroupLayout$Spring nestHost javax\/swing\/GroupLayout sealed true flags 421\n+innerclass innerClass javax\/swing\/GroupLayout$Group outerClass javax\/swing\/GroupLayout innerClassName Group flags 401\n+innerclass innerClass javax\/swing\/GroupLayout$Spring outerClass javax\/swing\/GroupLayout innerClassName Spring flags 40a\n+innerclass innerClass javax\/swing\/GroupLayout$ParallelGroup outerClass javax\/swing\/GroupLayout innerClassName ParallelGroup flags 1\n+innerclass innerClass javax\/swing\/GroupLayout$SequentialGroup outerClass javax\/swing\/GroupLayout innerClassName SequentialGroup flags 11\n+\n+class name javax\/swing\/GroupLayout$ParallelGroup\n+header extends javax\/swing\/GroupLayout$Group nestHost javax\/swing\/GroupLayout sealed true flags 21\n+innerclass innerClass javax\/swing\/GroupLayout$ParallelGroup outerClass javax\/swing\/GroupLayout innerClassName ParallelGroup flags 1\n+innerclass innerClass javax\/swing\/GroupLayout$Group outerClass javax\/swing\/GroupLayout innerClassName Group flags 401\n+innerclass innerClass javax\/swing\/GroupLayout$Alignment outerClass javax\/swing\/GroupLayout innerClassName Alignment flags 4019\n+innerclass innerClass javax\/swing\/GroupLayout$Spring outerClass javax\/swing\/GroupLayout innerClassName Spring flags 40a\n+\n+class name javax\/swing\/JList$AccessibleJList$AccessibleJListChild\n+-method name getAccessibleAction descriptor ()Ljavax\/accessibility\/AccessibleAction;\n+method name getAccessibleAction descriptor ()Ljavax\/accessibility\/AccessibleAction; flags 1\n+\n+class name javax\/swing\/JTextPane\n+header extends javax\/swing\/JEditorPane flags 21 runtimeAnnotations @Ljava\/beans\/JavaBean;(description=\"A\\u005C;u0020;text\\u005C;u0020;component\\u005C;u0020;that\\u005C;u0020;can\\u005C;u0020;be\\u005C;u0020;marked\\u005C;u0020;up\\u005C;u0020;with\\u005C;u0020;attributes\\u005C;u0020;that\\u005C;u0020;are\\u005C;u0020;graphically\\u005C;u0020;represented.\")@Ljavax\/swing\/SwingContainer;\n+\n+class name javax\/swing\/LookAndFeel\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/swing\/text\/JTextComponent$KeyBinding outerClass javax\/swing\/text\/JTextComponent innerClassName KeyBinding flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/MenuSelectionManager\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/SizeRequirements\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/SortingFocusTraversalPolicy\n+header extends javax\/swing\/InternalFrameFocusTraversalPolicy flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/SwingContainer\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;TYPE;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)\n+\n+class name javax\/swing\/UIClientPropertyKey\n+header extends java\/lang\/Object flags 601\n+\n+class name javax\/swing\/border\/EtchedBorder\n+header extends javax\/swing\/border\/AbstractBorder flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/border\/LineBorder\n+header extends javax\/swing\/border\/AbstractBorder flags 21\n+innerclass innerClass java\/awt\/geom\/RoundRectangle2D$Float outerClass java\/awt\/geom\/RoundRectangle2D innerClassName Float flags 9\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Float outerClass java\/awt\/geom\/Rectangle2D innerClassName Float flags 9\n+innerclass innerClass java\/awt\/geom\/Path2D$Float outerClass java\/awt\/geom\/Path2D innerClassName Float flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/event\/EventListenerList\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/event\/ListDataEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/event\/ListSelectionEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/event\/TreeModelEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/filechooser\/FileNameExtensionFilter\n+header extends javax\/swing\/filechooser\/FileFilter flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/basic\/BasicArrowButton\n+header extends javax\/swing\/JButton implements javax\/swing\/SwingConstants flags 21\n+innerclass innerClass java\/awt\/geom\/Path2D$Double outerClass java\/awt\/geom\/Path2D innerClassName Double flags 9\n+\n+class name javax\/swing\/plaf\/basic\/BasicButtonListener\n+header extends java\/lang\/Object implements java\/awt\/event\/MouseListener,java\/awt\/event\/MouseMotionListener,java\/awt\/event\/FocusListener,javax\/swing\/event\/ChangeListener,java\/beans\/PropertyChangeListener flags 21\n+innerclass innerClass java\/awt\/event\/FocusEvent$Cause outerClass java\/awt\/event\/FocusEvent innerClassName Cause flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/basic\/BasicButtonUI\n+header extends javax\/swing\/plaf\/ButtonUI flags 21\n+innerclass innerClass java\/awt\/Component$BaselineResizeBehavior outerClass java\/awt\/Component innerClassName BaselineResizeBehavior flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/basic\/BasicComboPopup\n+header extends javax\/swing\/JPopupMenu implements javax\/swing\/plaf\/basic\/ComboPopup nestMembers javax\/swing\/plaf\/basic\/BasicComboPopup$PropertyChangeHandler,javax\/swing\/plaf\/basic\/BasicComboPopup$ItemHandler,javax\/swing\/plaf\/basic\/BasicComboPopup$ListMouseMotionHandler,javax\/swing\/plaf\/basic\/BasicComboPopup$ListMouseHandler,javax\/swing\/plaf\/basic\/BasicComboPopup$ListDataHandler,javax\/swing\/plaf\/basic\/BasicComboPopup$ListSelectionHandler,javax\/swing\/plaf\/basic\/BasicComboPopup$InvocationKeyHandler,javax\/swing\/plaf\/basic\/BasicComboPopup$InvocationMouseMotionHandler,javax\/swing\/plaf\/basic\/BasicComboPopup$InvocationMouseHandler flags 21\n+innerclass innerClass java\/awt\/event\/FocusEvent$Cause outerClass java\/awt\/event\/FocusEvent innerClassName Cause flags 4019\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$PropertyChangeHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName PropertyChangeHandler flags 4\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$ItemHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName ItemHandler flags 4\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$ListMouseMotionHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName ListMouseMotionHandler flags 4\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$ListMouseHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName ListMouseHandler flags 4\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$ListDataHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName ListDataHandler flags 1\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$ListSelectionHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName ListSelectionHandler flags 4\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$InvocationKeyHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName InvocationKeyHandler flags 1\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$InvocationMouseMotionHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName InvocationMouseMotionHandler flags 4\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicComboPopup$InvocationMouseHandler outerClass javax\/swing\/plaf\/basic\/BasicComboPopup innerClassName InvocationMouseHandler flags 4\n+\n+class name javax\/swing\/plaf\/basic\/BasicPasswordFieldUI\n+header extends javax\/swing\/plaf\/basic\/BasicTextFieldUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/basic\/BasicScrollBarUI$ArrowButtonListener\n+header extends java\/awt\/event\/MouseAdapter nestHost javax\/swing\/plaf\/basic\/BasicScrollBarUI flags 21\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicScrollBarUI$ArrowButtonListener outerClass javax\/swing\/plaf\/basic\/BasicScrollBarUI innerClassName ArrowButtonListener flags 4\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicScrollBarUI$ScrollListener outerClass javax\/swing\/plaf\/basic\/BasicScrollBarUI innerClassName ScrollListener flags 4\n+innerclass innerClass java\/awt\/event\/FocusEvent$Cause outerClass java\/awt\/event\/FocusEvent innerClassName Cause flags 4019\n+\n+class name javax\/swing\/plaf\/basic\/BasicScrollBarUI$TrackListener\n+header extends java\/awt\/event\/MouseAdapter implements java\/awt\/event\/MouseMotionListener nestHost javax\/swing\/plaf\/basic\/BasicScrollBarUI flags 21\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicScrollBarUI$TrackListener outerClass javax\/swing\/plaf\/basic\/BasicScrollBarUI innerClassName TrackListener flags 4\n+innerclass innerClass java\/awt\/event\/FocusEvent$Cause outerClass java\/awt\/event\/FocusEvent innerClassName Cause flags 4019\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicScrollBarUI$ScrollListener outerClass javax\/swing\/plaf\/basic\/BasicScrollBarUI innerClassName ScrollListener flags 4\n+\n+class name javax\/swing\/plaf\/basic\/BasicSliderUI$TrackListener\n+header extends javax\/swing\/event\/MouseInputAdapter nestHost javax\/swing\/plaf\/basic\/BasicSliderUI flags 21\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicSliderUI$TrackListener outerClass javax\/swing\/plaf\/basic\/BasicSliderUI innerClassName TrackListener flags 1\n+innerclass innerClass java\/awt\/event\/FocusEvent$Cause outerClass java\/awt\/event\/FocusEvent innerClassName Cause flags 4019\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicSliderUI$ScrollListener outerClass javax\/swing\/plaf\/basic\/BasicSliderUI innerClassName ScrollListener flags 1\n+\n+class name javax\/swing\/plaf\/basic\/BasicSplitPaneUI$BasicHorizontalLayoutManager\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager2 nestHost javax\/swing\/plaf\/basic\/BasicSplitPaneUI sealed true flags 21\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicSplitPaneUI$BasicHorizontalLayoutManager outerClass javax\/swing\/plaf\/basic\/BasicSplitPaneUI innerClassName BasicHorizontalLayoutManager flags 1\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicSplitPaneUI$BasicVerticalLayoutManager outerClass javax\/swing\/plaf\/basic\/BasicSplitPaneUI innerClassName BasicVerticalLayoutManager flags 1\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/basic\/BasicToolBarSeparatorUI\n+header extends javax\/swing\/plaf\/basic\/BasicSeparatorUI flags 21\n+innerclass innerClass javax\/swing\/JToolBar$Separator outerClass javax\/swing\/JToolBar innerClassName Separator flags 9\n+\n+class name javax\/swing\/plaf\/metal\/MetalButtonUI\n+header extends javax\/swing\/plaf\/basic\/BasicButtonUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/metal\/MetalCheckBoxUI\n+header extends javax\/swing\/plaf\/metal\/MetalRadioButtonUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/metal\/MetalRadioButtonUI\n+header extends javax\/swing\/plaf\/basic\/BasicRadioButtonUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/metal\/MetalToggleButtonUI\n+header extends javax\/swing\/plaf\/basic\/BasicToggleButtonUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/metal\/MetalToolTipUI\n+header extends javax\/swing\/plaf\/basic\/BasicToolTipUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/multi\/MultiLookAndFeel\n+header extends javax\/swing\/LookAndFeel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/synth\/SynthButtonUI\n+header extends javax\/swing\/plaf\/basic\/BasicButtonUI implements java\/beans\/PropertyChangeListener,javax\/swing\/plaf\/synth\/SynthUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/synth\/SynthComboBoxUI\n+method name getMinimumSize descriptor (Ljavax\/swing\/JComponent;)Ljava\/awt\/Dimension; flags 1\n+\n+class name javax\/swing\/plaf\/synth\/SynthIcon\n+header extends java\/lang\/Object implements javax\/swing\/Icon flags 601\n+\n+class name javax\/swing\/plaf\/synth\/SynthLookAndFeel\n+-method name load descriptor (Ljava\/net\/URL;)V\n+method name load descriptor (Ljava\/net\/URL;)V thrownTypes java\/text\/ParseException,java\/io\/IOException flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"21\")\n+\n+class name javax\/swing\/plaf\/synth\/SynthMenuItemUI\n+header extends javax\/swing\/plaf\/basic\/BasicMenuItemUI implements java\/beans\/PropertyChangeListener,javax\/swing\/plaf\/synth\/SynthUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/synth\/SynthMenuUI\n+header extends javax\/swing\/plaf\/basic\/BasicMenuUI implements java\/beans\/PropertyChangeListener,javax\/swing\/plaf\/synth\/SynthUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/synth\/SynthSeparatorUI\n+header extends javax\/swing\/plaf\/SeparatorUI implements java\/beans\/PropertyChangeListener,javax\/swing\/plaf\/synth\/SynthUI flags 21\n+innerclass innerClass javax\/swing\/JToolBar$Separator outerClass javax\/swing\/JToolBar innerClassName Separator flags 9\n+\n+class name javax\/swing\/plaf\/synth\/SynthStyle\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/swing\/UIDefaults$LazyInputMap outerClass javax\/swing\/UIDefaults innerClassName LazyInputMap flags 9\n+innerclass innerClass javax\/swing\/UIDefaults$LazyValue outerClass javax\/swing\/UIDefaults innerClassName LazyValue flags 609\n+\n+class name javax\/swing\/table\/AbstractTableModel\n+header extends java\/lang\/Object implements javax\/swing\/table\/TableModel,java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/AbstractWriter\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/BoxView\n+header extends javax\/swing\/text\/CompositeView flags 21\n+innerclass innerClass javax\/swing\/event\/DocumentEvent$ElementChange outerClass javax\/swing\/event\/DocumentEvent innerClassName ElementChange flags 609\n+innerclass innerClass javax\/swing\/text\/Position$Bias outerClass javax\/swing\/text\/Position innerClassName Bias flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/CompositeView\n+header extends javax\/swing\/text\/View flags 421\n+innerclass innerClass javax\/swing\/text\/Position$Bias outerClass javax\/swing\/text\/Position innerClassName Bias flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/DateFormatter\n+header extends javax\/swing\/text\/InternationalFormatter flags 21\n+innerclass innerClass java\/text\/DateFormat$Field outerClass java\/text\/DateFormat innerClassName Field flags 9\n+\n+class name javax\/swing\/text\/IconView\n+header extends javax\/swing\/text\/View flags 21\n+innerclass innerClass javax\/swing\/text\/Position$Bias outerClass javax\/swing\/text\/Position innerClassName Bias flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/LayoutQueue\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/NumberFormatter\n+header extends javax\/swing\/text\/InternationalFormatter flags 21\n+innerclass innerClass java\/text\/NumberFormat$Field outerClass java\/text\/NumberFormat innerClassName Field flags 9\n+innerclass innerClass javax\/swing\/text\/DocumentFilter$FilterBypass outerClass javax\/swing\/text\/DocumentFilter innerClassName FilterBypass flags 409\n+innerclass innerClass java\/text\/AttributedCharacterIterator$Attribute outerClass java\/text\/AttributedCharacterIterator innerClassName Attribute flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/Segment\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/text\/CharacterIterator,java\/lang\/CharSequence flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/StyleConstants\n+header extends java\/lang\/Object nestMembers javax\/swing\/text\/StyleConstants$FontConstants,javax\/swing\/text\/StyleConstants$ColorConstants,javax\/swing\/text\/StyleConstants$CharacterConstants,javax\/swing\/text\/StyleConstants$ParagraphConstants sealed true flags 21\n+innerclass innerClass javax\/swing\/text\/StyleConstants$CharacterConstants outerClass javax\/swing\/text\/StyleConstants innerClassName CharacterConstants flags 19\n+innerclass innerClass javax\/swing\/text\/StyleConstants$FontConstants outerClass javax\/swing\/text\/StyleConstants innerClassName FontConstants flags 19\n+innerclass innerClass javax\/swing\/text\/StyleConstants$ColorConstants outerClass javax\/swing\/text\/StyleConstants innerClassName ColorConstants flags 19\n+innerclass innerClass javax\/swing\/text\/StyleConstants$ParagraphConstants outerClass javax\/swing\/text\/StyleConstants innerClassName ParagraphConstants flags 19\n+\n+class name javax\/swing\/text\/TabSet\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/TabStop\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/View\n+header extends java\/lang\/Object implements javax\/swing\/SwingConstants flags 421\n+innerclass innerClass javax\/swing\/text\/Position$Bias outerClass javax\/swing\/text\/Position innerClassName Bias flags 19\n+innerclass innerClass javax\/swing\/event\/DocumentEvent$ElementChange outerClass javax\/swing\/event\/DocumentEvent innerClassName ElementChange flags 609\n+innerclass innerClass javax\/swing\/event\/DocumentEvent$EventType outerClass javax\/swing\/event\/DocumentEvent innerClassName EventType flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/InlineView\n+header extends javax\/swing\/text\/LabelView flags 21\n+innerclass innerClass javax\/swing\/text\/html\/CSS$Attribute outerClass javax\/swing\/text\/html\/CSS innerClassName Attribute flags 19\n+\n+class name javax\/swing\/text\/html\/ObjectView\n+header extends javax\/swing\/text\/ComponentView flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/Option\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+\n+class name javax\/swing\/text\/html\/parser\/ContentModel\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/parser\/DocumentParser\n+header extends javax\/swing\/text\/html\/parser\/Parser flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTMLEditorKit$ParserCallback outerClass javax\/swing\/text\/html\/HTMLEditorKit innerClassName ParserCallback flags 9\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Tag outerClass javax\/swing\/text\/html\/HTML innerClassName Tag flags 9\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+\n+class name javax\/swing\/text\/html\/parser\/Parser\n+header extends java\/lang\/Object implements javax\/swing\/text\/html\/parser\/DTDConstants flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/parser\/TagElement\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Tag outerClass javax\/swing\/text\/html\/HTML innerClassName Tag flags 9\n+innerclass innerClass javax\/swing\/text\/html\/HTML$UnknownTag outerClass javax\/swing\/text\/html\/HTML innerClassName UnknownTag flags 9\n+\n+class name javax\/swing\/tree\/DefaultTreeModel\n+header extends java\/lang\/Object implements java\/io\/Serializable,javax\/swing\/tree\/TreeModel flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name javax\/swing\/tree\/DefaultTreeSelectionModel\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/io\/Serializable,javax\/swing\/tree\/TreeSelectionModel flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/tree\/TreePath\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/undo\/AbstractUndoableEdit\n+header extends java\/lang\/Object implements javax\/swing\/undo\/UndoableEdit,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/undo\/CompoundEdit\n+header extends javax\/swing\/undo\/AbstractUndoableEdit flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/undo\/UndoableEditSupport\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.desktop-L.sym.txt","additions":906,"deletions":0,"binary":false,"changes":906,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/lang\/instrument\/UnmodifiableModuleException\n+header extends java\/lang\/RuntimeException flags 21\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.instrument-L.sym.txt","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/util\/logging\/ErrorManager\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name error descriptor (Ljava\/lang\/String;Ljava\/lang\/Exception;I)V\n+method name error descriptor (Ljava\/lang\/String;Ljava\/lang\/Exception;I)V flags 1\n+\n+class name java\/util\/logging\/FileHandler\n+-method name publish descriptor (Ljava\/util\/logging\/LogRecord;)V\n+-method name close descriptor ()V\n+method name publish descriptor (Ljava\/util\/logging\/LogRecord;)V flags 1\n+method name close descriptor ()V thrownTypes java\/lang\/SecurityException flags 1\n+\n+class name java\/util\/logging\/Handler\n+-method name setFormatter descriptor (Ljava\/util\/logging\/Formatter;)V\n+-method name setEncoding descriptor (Ljava\/lang\/String;)V\n+-method name setFilter descriptor (Ljava\/util\/logging\/Filter;)V\n+-method name setErrorManager descriptor (Ljava\/util\/logging\/ErrorManager;)V\n+-method name setLevel descriptor (Ljava\/util\/logging\/Level;)V\n+method name setFormatter descriptor (Ljava\/util\/logging\/Formatter;)V thrownTypes java\/lang\/SecurityException flags 1\n+method name setEncoding descriptor (Ljava\/lang\/String;)V thrownTypes java\/lang\/SecurityException,java\/io\/UnsupportedEncodingException flags 1\n+method name setFilter descriptor (Ljava\/util\/logging\/Filter;)V thrownTypes java\/lang\/SecurityException flags 1\n+method name setErrorManager descriptor (Ljava\/util\/logging\/ErrorManager;)V flags 1\n+method name setLevel descriptor (Ljava\/util\/logging\/Level;)V thrownTypes java\/lang\/SecurityException flags 1\n+\n+class name java\/util\/logging\/LoggingMXBean\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+\n+class name java\/util\/logging\/LoggingPermission\n+header extends java\/security\/BasicPermission flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/logging\/MemoryHandler\n+header extends java\/util\/logging\/Handler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name publish descriptor (Ljava\/util\/logging\/LogRecord;)V\n+-method name push descriptor ()V\n+-method name setPushLevel descriptor (Ljava\/util\/logging\/Level;)V\n+method name publish descriptor (Ljava\/util\/logging\/LogRecord;)V flags 1\n+method name push descriptor ()V flags 1\n+method name setPushLevel descriptor (Ljava\/util\/logging\/Level;)V thrownTypes java\/lang\/SecurityException flags 1\n+\n+class name java\/util\/logging\/SimpleFormatter\n+header extends java\/util\/logging\/Formatter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/logging\/SocketHandler\n+header extends java\/util\/logging\/StreamHandler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name close descriptor ()V\n+-method name publish descriptor (Ljava\/util\/logging\/LogRecord;)V\n+method name close descriptor ()V thrownTypes java\/lang\/SecurityException flags 1\n+method name publish descriptor (Ljava\/util\/logging\/LogRecord;)V flags 1\n+\n+class name java\/util\/logging\/StreamHandler\n+-method name setOutputStream descriptor (Ljava\/io\/OutputStream;)V\n+-method name setEncoding descriptor (Ljava\/lang\/String;)V\n+-method name publish descriptor (Ljava\/util\/logging\/LogRecord;)V\n+-method name flush descriptor ()V\n+-method name close descriptor ()V\n+method name setOutputStream descriptor (Ljava\/io\/OutputStream;)V thrownTypes java\/lang\/SecurityException flags 4\n+method name setEncoding descriptor (Ljava\/lang\/String;)V thrownTypes java\/lang\/SecurityException,java\/io\/UnsupportedEncodingException flags 1\n+method name publish descriptor (Ljava\/util\/logging\/LogRecord;)V flags 1\n+method name flush descriptor ()V flags 1\n+method name close descriptor ()V thrownTypes java\/lang\/SecurityException flags 1\n+\n+class name java\/util\/logging\/XMLFormatter\n+header extends java\/util\/logging\/Formatter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.logging-L.sym.txt","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,268 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name java.management\n+header exports java\/lang\/management,javax\/management,javax\/management\/loading,javax\/management\/modelmbean,javax\/management\/monitor,javax\/management\/openmbean,javax\/management\/relation,javax\/management\/remote,javax\/management\/timer requires name\\u0020;java.base\\u0020;flags\\u0020;8000 uses javax\/management\/remote\/JMXConnectorProvider,javax\/management\/remote\/JMXConnectorServerProvider,sun\/management\/spi\/PlatformMBeanProvider provides interface\\u0020;javax\/security\/auth\/spi\/LoginModule\\u0020;impls\\u0020;com\/sun\/jmx\/remote\/security\/FileLoginModule target linux-amd64 flags 8000\n+\n+class name java\/lang\/management\/LockInfo\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/management\/ManagementPermission\n+header extends java\/security\/BasicPermission flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/management\/MemoryUsage\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/management\/MonitorInfo\n+header extends java\/lang\/management\/LockInfo flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/management\/RuntimeMXBean\n+header extends java\/lang\/Object implements java\/lang\/management\/PlatformManagedObject flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/Attribute\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/AttributeList\n+header extends java\/util\/ArrayList flags 21 signature Ljava\/util\/ArrayList<Ljava\/lang\/Object;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/BadAttributeValueExpException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/BadBinaryOpValueExpException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/BadStringOperationException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/ConstructorParameters\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;CONSTRUCTOR;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)\n+\n+class name javax\/management\/ImmutableDescriptor\n+header extends java\/lang\/Object implements javax\/management\/Descriptor flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanAttributeInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanConstructorInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanNotificationInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanOperationInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanParameterInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanPermission\n+header extends java\/security\/Permission flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerDelegate\n+header extends java\/lang\/Object implements javax\/management\/MBeanServerDelegateMBean,javax\/management\/NotificationEmitter flags 21\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerFactory\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerInvocationHandler\n+header extends java\/lang\/Object implements java\/lang\/reflect\/InvocationHandler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerNotification\n+header extends javax\/management\/Notification flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerPermission\n+header extends java\/security\/BasicPermission flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanTrustPermission\n+header extends java\/security\/BasicPermission flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/Notification\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/ObjectInstance\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/Query\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/StandardEmitterMBean\n+header extends javax\/management\/StandardMBean implements javax\/management\/NotificationEmitter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/StringValueExp\n+header extends java\/lang\/Object implements javax\/management\/ValueExp flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/loading\/DefaultLoaderRepository\n+header extends java\/lang\/Object flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+\n+class name javax\/management\/modelmbean\/InvalidTargetObjectTypeException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/modelmbean\/XMLParseException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/ArrayType\n+header extends javax\/management\/openmbean\/OpenType flags 21 signature <T:Ljava\/lang\/Object;>Ljavax\/management\/openmbean\/OpenType<TT;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/CompositeDataInvocationHandler\n+header extends java\/lang\/Object implements java\/lang\/reflect\/InvocationHandler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/CompositeDataSupport\n+header extends java\/lang\/Object implements javax\/management\/openmbean\/CompositeData,java\/io\/Serializable flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/CompositeType\n+header extends javax\/management\/openmbean\/OpenType flags 21 signature Ljavax\/management\/openmbean\/OpenType<Ljavax\/management\/openmbean\/CompositeData;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/OpenMBeanAttributeInfoSupport\n+header extends javax\/management\/MBeanAttributeInfo implements javax\/management\/openmbean\/OpenMBeanAttributeInfo flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/OpenMBeanOperationInfoSupport\n+header extends javax\/management\/MBeanOperationInfo implements javax\/management\/openmbean\/OpenMBeanOperationInfo flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/SimpleType\n+header extends javax\/management\/openmbean\/OpenType flags 31 signature <T:Ljava\/lang\/Object;>Ljavax\/management\/openmbean\/OpenType<TT;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/TabularDataSupport\n+header extends java\/lang\/Object implements javax\/management\/openmbean\/TabularData,java\/util\/Map,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature Ljava\/lang\/Object;Ljavax\/management\/openmbean\/TabularData;Ljava\/util\/Map<Ljava\/lang\/Object;Ljava\/lang\/Object;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/TabularType\n+header extends javax\/management\/openmbean\/OpenType flags 21 signature Ljavax\/management\/openmbean\/OpenType<Ljavax\/management\/openmbean\/TabularData;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/relation\/RelationNotification\n+header extends javax\/management\/Notification flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+\n+class name javax\/management\/relation\/RelationSupport\n+header extends java\/lang\/Object implements javax\/management\/relation\/RelationSupportMBean,javax\/management\/MBeanRegistration flags 21\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+\n+class name javax\/management\/relation\/Role\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/relation\/RoleInfo\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/relation\/RoleResult\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+\n+class name javax\/management\/relation\/RoleUnresolved\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/JMXConnector\n+-method name getMBeanServerConnection descriptor (Ljavax\/security\/auth\/Subject;)Ljavax\/management\/MBeanServerConnection;\n+method name getMBeanServerConnection descriptor (Ljavax\/security\/auth\/Subject;)Ljavax\/management\/MBeanServerConnection; thrownTypes java\/io\/IOException flags 401 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"21\")\n+\n+class name javax\/management\/remote\/JMXConnectorServerFactory\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/util\/ServiceLoader$Provider outerClass java\/util\/ServiceLoader innerClassName Provider flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/JMXPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/JMXServiceURL\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/NotificationResult\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/TargetedNotification\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.management-L.sym.txt","additions":268,"deletions":0,"binary":false,"changes":268,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/management\/remote\/rmi\/RMIConnectorServer\n+header extends javax\/management\/remote\/JMXConnectorServer flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+-class name javax\/management\/remote\/rmi\/RMIIIOPServerImpl\n+\n+class name javax\/management\/remote\/rmi\/RMIServerImpl\n+header extends java\/lang\/Object implements java\/io\/Closeable,javax\/management\/remote\/rmi\/RMIServer flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.management.rmi-L.sym.txt","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/naming\/BinaryRefAddr\n+header extends javax\/naming\/RefAddr flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/Binding\n+header extends javax\/naming\/NameClassPair flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/CompositeName\n+header extends java\/lang\/Object implements javax\/naming\/Name flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/CompoundName\n+header extends java\/lang\/Object implements javax\/naming\/Name flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/LinkException\n+header extends javax\/naming\/NamingException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/NameClassPair\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/NamingException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/RefAddr\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/Reference\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/directory\/AttributeModificationException\n+header extends javax\/naming\/NamingException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/directory\/ModificationItem\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/directory\/SearchResult\n+header extends javax\/naming\/Binding flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.naming-L.sym.txt","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/net\/http\/HttpClient\n+header extends java\/lang\/Object implements java\/lang\/AutoCloseable nestMembers java\/net\/http\/HttpClient$Redirect,java\/net\/http\/HttpClient$Version,java\/net\/http\/HttpClient$Builder flags 421\n+innerclass innerClass java\/net\/http\/HttpClient$Builder outerClass java\/net\/http\/HttpClient innerClassName Builder flags 609\n+innerclass innerClass java\/net\/http\/HttpClient$Redirect outerClass java\/net\/http\/HttpClient innerClassName Redirect flags 4019\n+innerclass innerClass java\/net\/http\/HttpClient$Version outerClass java\/net\/http\/HttpClient innerClassName Version flags 4019\n+innerclass innerClass java\/net\/http\/HttpResponse$BodyHandler outerClass java\/net\/http\/HttpResponse innerClassName BodyHandler flags 609\n+innerclass innerClass java\/net\/http\/HttpResponse$PushPromiseHandler outerClass java\/net\/http\/HttpResponse innerClassName PushPromiseHandler flags 609\n+innerclass innerClass java\/net\/http\/WebSocket$Builder outerClass java\/net\/http\/WebSocket innerClassName Builder flags 609\n+method name shutdown descriptor ()V flags 1\n+method name awaitTermination descriptor (Ljava\/time\/Duration;)Z thrownTypes java\/lang\/InterruptedException flags 1\n+method name isTerminated descriptor ()Z flags 1\n+method name shutdownNow descriptor ()V flags 1\n+method name close descriptor ()V flags 1\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.net.http-L.sym.txt","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/rmi\/RemoteException\n+header extends java\/io\/IOException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/dgc\/VMID\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/server\/ObjID\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/server\/RemoteObject\n+header extends java\/lang\/Object implements java\/rmi\/Remote,java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/server\/ServerCloneException\n+header extends java\/lang\/CloneNotSupportedException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/server\/UID\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.rmi-L.sym.txt","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/script\/ScriptException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.scripting-L.sym.txt","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/security\/auth\/kerberos\/DelegationPermission\n+header extends java\/security\/BasicPermission implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/security\/auth\/kerberos\/EncryptionKey\n+header extends java\/lang\/Object implements javax\/crypto\/SecretKey flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/security\/auth\/kerberos\/KerberosCredMessage\n+header extends java\/lang\/Object implements javax\/security\/auth\/Destroyable flags 31\n+innerclass innerClass java\/util\/Base64$Encoder outerClass java\/util\/Base64 innerClassName Encoder flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/security\/auth\/kerberos\/KerberosKey\n+header extends java\/lang\/Object implements javax\/crypto\/SecretKey flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/security\/auth\/kerberos\/KerberosPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/security\/auth\/kerberos\/KerberosTicket\n+header extends java\/lang\/Object implements javax\/security\/auth\/Destroyable,javax\/security\/auth\/Refreshable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/security\/auth\/kerberos\/KeyTab\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/security\/auth\/kerberos\/ServicePermission\n+header extends java\/security\/Permission implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name org\/ietf\/jgss\/GSSException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name org\/ietf\/jgss\/Oid\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.security.jgss-L.sym.txt","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/security\/sasl\/SaslException\n+header extends java\/io\/IOException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.security.sasl-L.sym.txt","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/smartcardio\/ATR\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/smartcardio\/Card\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/smartcardio\/CardChannel\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/smartcardio\/CardException\n+header extends java\/lang\/Exception flags 21\n+\n+class name javax\/smartcardio\/CardNotPresentException\n+header extends javax\/smartcardio\/CardException flags 21\n+\n+class name javax\/smartcardio\/CardPermission\n+header extends java\/security\/Permission flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/smartcardio\/CardTerminal\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/smartcardio\/CommandAPDU\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/smartcardio\/ResponseAPDU\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/smartcardio\/TerminalFactorySpi\n+header extends java\/lang\/Object flags 421\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.smartcardio-L.sym.txt","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/sql\/BatchUpdateException\n+header extends java\/sql\/SQLException flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+\n+class name java\/sql\/ConnectionBuilder\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/sql\/JDBCType\n+header extends java\/lang\/Enum implements java\/sql\/SQLType flags 4031 signature Ljava\/lang\/Enum<Ljava\/sql\/JDBCType;>;Ljava\/sql\/SQLType;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/sql\/SQLWarning\n+header extends java\/sql\/SQLException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/sql\/ShardingKey\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/sql\/ShardingKeyBuilder\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/sql\/Statement\n+header extends java\/lang\/Object implements java\/sql\/Wrapper,java\/lang\/AutoCloseable flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sql\/PooledConnectionBuilder\n+header extends java\/lang\/Object flags 601\n+\n+class name javax\/sql\/XAConnectionBuilder\n+header extends java\/lang\/Object flags 601\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.sql-L.sym.txt","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/sql\/rowset\/BaseRowSet\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sql\/rowset\/serial\/SerialArray\n+header extends java\/lang\/Object implements java\/sql\/Array,java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+\n+class name javax\/sql\/rowset\/serial\/SerialBlob\n+header extends java\/lang\/Object implements java\/sql\/Blob,java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+\n+class name javax\/sql\/rowset\/serial\/SerialClob\n+header extends java\/lang\/Object implements java\/sql\/Clob,java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sql\/rowset\/serial\/SerialDatalink\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sql\/rowset\/serial\/SerialJavaObject\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+\n+class name javax\/sql\/rowset\/serial\/SerialRef\n+header extends java\/lang\/Object implements java\/sql\/Ref,java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sql\/rowset\/serial\/SerialStruct\n+header extends java\/lang\/Object implements java\/sql\/Struct,java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.sql.rowset-L.sym.txt","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/xml\/catalog\/Catalog\n+header extends java\/lang\/Object flags 601\n+\n+class name javax\/xml\/catalog\/CatalogException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name javax\/xml\/catalog\/CatalogManager\n+header extends java\/lang\/Object flags 31\n+\n+class name javax\/xml\/catalog\/CatalogResolver\n+header extends java\/lang\/Object implements org\/xml\/sax\/EntityResolver,javax\/xml\/stream\/XMLResolver,javax\/xml\/transform\/URIResolver,org\/w3c\/dom\/ls\/LSResourceResolver flags 601\n+\n+class name javax\/xml\/datatype\/DatatypeFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/xml\/datatype\/DatatypeConstants$Field outerClass javax\/xml\/datatype\/DatatypeConstants innerClassName Field flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/datatype\/Duration\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/xml\/datatype\/DatatypeConstants$Field outerClass javax\/xml\/datatype\/DatatypeConstants innerClassName Field flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/namespace\/QName\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/parsers\/DocumentBuilder\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/parsers\/DocumentBuilderFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/parsers\/SAXParser\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/parsers\/SAXParserFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/stream\/XMLEventReader\n+header extends java\/lang\/Object implements java\/util\/Iterator flags 601 signature Ljava\/lang\/Object;Ljava\/util\/Iterator<Ljava\/lang\/Object;>;\n+\n+class name javax\/xml\/stream\/XMLInputFactory\n+-method name newFactory descriptor ()Ljavax\/xml\/stream\/XMLInputFactory;\n+method name newFactory descriptor ()Ljavax\/xml\/stream\/XMLInputFactory; thrownTypes javax\/xml\/stream\/FactoryConfigurationError flags 9\n+\n+class name javax\/xml\/stream\/XMLStreamException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/transform\/Transformer\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/transform\/TransformerException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/validation\/SchemaFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/xpath\/XPath\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass javax\/xml\/xpath\/XPathEvaluationResult$XPathResultType outerClass javax\/xml\/xpath\/XPathEvaluationResult innerClassName XPathResultType flags 4019\n+\n+class name javax\/xml\/xpath\/XPathException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name javax\/xml\/xpath\/XPathExpression\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass javax\/xml\/xpath\/XPathEvaluationResult$XPathResultType outerClass javax\/xml\/xpath\/XPathEvaluationResult innerClassName XPathResultType flags 4019\n+\n+class name javax\/xml\/xpath\/XPathFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/xpath\/XPathNodes\n+header extends java\/lang\/Object implements java\/lang\/Iterable flags 601 signature Ljava\/lang\/Object;Ljava\/lang\/Iterable<Lorg\/w3c\/dom\/Node;>;\n+\n+class name org\/w3c\/dom\/ElementTraversal\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/xml\/sax\/AttributeList\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/DocumentHandler\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/HandlerBase\n+header extends java\/lang\/Object implements org\/xml\/sax\/EntityResolver,org\/xml\/sax\/DTDHandler,org\/xml\/sax\/DocumentHandler,org\/xml\/sax\/ErrorHandler flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/Parser\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/ext\/Attributes2Impl\n+header extends org\/xml\/sax\/helpers\/AttributesImpl implements org\/xml\/sax\/ext\/Attributes2 flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name org\/xml\/sax\/helpers\/AttributeListImpl\n+header extends java\/lang\/Object implements org\/xml\/sax\/AttributeList flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/helpers\/AttributesImpl\n+header extends java\/lang\/Object implements org\/xml\/sax\/Attributes flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name org\/xml\/sax\/helpers\/ParserFactory\n+header extends java\/lang\/Object flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/helpers\/XMLFilterImpl\n+header extends java\/lang\/Object implements org\/xml\/sax\/XMLFilter,org\/xml\/sax\/EntityResolver,org\/xml\/sax\/DTDHandler,org\/xml\/sax\/ContentHandler,org\/xml\/sax\/ErrorHandler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name org\/xml\/sax\/helpers\/XMLReaderFactory\n+header extends java\/lang\/Object flags 31 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.xml-L.sym.txt","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/xml\/crypto\/NodeSetData\n+header extends java\/lang\/Object implements javax\/xml\/crypto\/Data,java\/lang\/Iterable flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljavax\/xml\/crypto\/Data;Ljava\/lang\/Iterable<TT;>;\n+\n+class name javax\/xml\/crypto\/dom\/DOMCryptoContext\n+header extends java\/lang\/Object implements javax\/xml\/crypto\/XMLCryptoContext flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/crypto\/dsig\/SignatureMethod\n+field name ED25519 descriptor Ljava\/lang\/String; constantValue http:\/\/www.w3.org\/2021\/04\/xmldsig-more#eddsa-ed25519 flags 19\n+field name ED448 descriptor Ljava\/lang\/String; constantValue http:\/\/www.w3.org\/2021\/04\/xmldsig-more#eddsa-ed448 flags 19\n+\n+class name javax\/xml\/crypto\/dsig\/XMLSignatureFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/crypto\/dsig\/keyinfo\/KeyInfoFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/java.xml.crypto-L.sym.txt","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/java\/accessibility\/util\/AccessibilityListenerList\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/java\/accessibility\/util\/EventID\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/java\/accessibility\/util\/GUIInitializedListener\n+header extends java\/lang\/Object implements java\/util\/EventListener flags 601\n+\n+class name com\/sun\/java\/accessibility\/util\/TopLevelWindowListener\n+header extends java\/lang\/Object implements java\/util\/EventListener flags 601\n+\n+class name com\/sun\/java\/accessibility\/util\/Translator\n+header extends javax\/accessibility\/AccessibleContext implements javax\/accessibility\/Accessible,javax\/accessibility\/AccessibleComponent flags 21\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.accessibility-L.sym.txt","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/tools\/attach\/AgentInitializationException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/tools\/attach\/AgentLoadException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/tools\/attach\/AttachNotSupportedException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/tools\/attach\/AttachOperationFailedException\n+header extends java\/io\/IOException flags 21\n+\n+class name com\/sun\/tools\/attach\/AttachPermission\n+header extends java\/security\/BasicPermission flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/tools\/attach\/VirtualMachine\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/tools\/attach\/VirtualMachineDescriptor\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/tools\/attach\/spi\/AttachProvider\n+header extends java\/lang\/Object flags 421\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.attach-L.sym.txt","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,470 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name jdk.compiler\n+header exports com\/sun\/source\/doctree,com\/sun\/source\/tree,com\/sun\/source\/util,com\/sun\/tools\/javac requires name\\u0020;java.base\\u0020;flags\\u0020;8000,name\\u0020;java.compiler\\u0020;flags\\u0020;20,name\\u0020;jdk.internal.opt\\u0020;flags\\u0020;0,name\\u0020;jdk.zipfs\\u0020;flags\\u0020;0 uses javax\/annotation\/processing\/Processor,com\/sun\/source\/util\/Plugin,com\/sun\/tools\/doclint\/DocLint,com\/sun\/tools\/javac\/platform\/PlatformProvider provides interface\\u0020;java\/util\/spi\/ToolProvider\\u0020;impls\\u0020;com\/sun\/tools\/javac\/main\/JavacToolProvider,interface\\u0020;com\/sun\/tools\/javac\/platform\/PlatformProvider\\u0020;impls\\u0020;com\/sun\/tools\/javac\/platform\/JDKPlatformProvider,interface\\u0020;javax\/tools\/JavaCompiler\\u0020;impls\\u0020;com\/sun\/tools\/javac\/api\/JavacTool,interface\\u0020;javax\/tools\/Tool\\u0020;impls\\u0020;com\/sun\/tools\/javac\/api\/JavacTool target linux-amd64 flags 8000\n+\n+class name com\/sun\/source\/doctree\/AuthorTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/BlockTagTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/CommentTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/DeprecatedTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/DocCommentTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/DocRootTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/DocTree$Kind\n+field name ESCAPE descriptor Lcom\/sun\/source\/doctree\/DocTree$Kind; flags 4019\n+\n+class name com\/sun\/source\/doctree\/DocTreeVisitor\n+header extends java\/lang\/Object flags 601 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;\n+method name visitEscape descriptor (Lcom\/sun\/source\/doctree\/EscapeTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/doctree\/EscapeTree;TP;)TR;\n+\n+class name com\/sun\/source\/doctree\/DocTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/EndElementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/EntityTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ErroneousTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/TextTree flags 601\n+\n+class name com\/sun\/source\/doctree\/EscapeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/TextTree flags 601\n+method name getBody descriptor ()Ljava\/lang\/String; flags 401\n+\n+class name com\/sun\/source\/doctree\/HiddenTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/IdentifierTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/IndexTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/InheritDocTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/InlineTagTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/LinkTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/LiteralTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ParamTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ProvidesTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ReferenceTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SeeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SerialDataTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SerialFieldTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SerialTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SinceTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/StartElementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SummaryTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/TextTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ThrowsTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/UnknownBlockTagTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/UnknownInlineTagTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/UsesTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ValueTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/VersionTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/tree\/AnnotatedTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/AnnotationTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/AnyPatternTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/PatternTree flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;UNNAMED;)\n+\n+class name com\/sun\/source\/tree\/ArrayAccessTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ArrayTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/AssertTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/AssignmentTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/BinaryTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/BlockTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/BreakTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/CaseLabelTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/CaseTree\n+-method name getLabels descriptor ()Ljava\/util\/List;\n+method name getLabels descriptor ()Ljava\/util\/List; flags 401 signature ()Ljava\/util\/List<+Lcom\/sun\/source\/tree\/CaseLabelTree;>;\n+method name getGuard descriptor ()Lcom\/sun\/source\/tree\/ExpressionTree; flags 401\n+\n+class name com\/sun\/source\/tree\/CatchTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ClassTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/CompilationUnitTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/CompoundAssignmentTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ConditionalExpressionTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ConstantCaseLabelTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/CaseLabelTree flags 601\n+\n+class name com\/sun\/source\/tree\/ContinueTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/DeconstructionPatternTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/PatternTree flags 601\n+\n+class name com\/sun\/source\/tree\/DefaultCaseLabelTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/CaseLabelTree flags 601\n+\n+class name com\/sun\/source\/tree\/DirectiveTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/DoWhileLoopTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/EmptyStatementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/EnhancedForLoopTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+-method name getVariableOrRecordPattern descriptor ()Lcom\/sun\/source\/tree\/Tree;\n+-method name getDeclarationKind descriptor ()Lcom\/sun\/source\/tree\/EnhancedForLoopTree$DeclarationKind;\n+\n+-class name com\/sun\/source\/tree\/EnhancedForLoopTree$DeclarationKind\n+\n+class name com\/sun\/source\/tree\/ErroneousTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ExportsTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/ExpressionStatementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/ExpressionTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ForLoopTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/IdentifierTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/IfTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/ImportTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/InstanceOfTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+-method name getTestKind descriptor ()Lcom\/sun\/source\/tree\/InstanceOfTree$TestKind;\n+\n+-class name com\/sun\/source\/tree\/InstanceOfTree$TestKind\n+\n+class name com\/sun\/source\/tree\/IntersectionTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/LabeledStatementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/LineMap\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/tree\/LiteralTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/MemberSelectTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/MethodInvocationTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/MethodTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ModifiersTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/NewArrayTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/NewClassTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/OpensTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/PackageTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ParameterizedTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+-class name com\/sun\/source\/tree\/ParenthesizedPatternTree\n+\n+class name com\/sun\/source\/tree\/ParenthesizedTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/PatternCaseLabelTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/CaseLabelTree flags 601\n+-method name getGuard descriptor ()Lcom\/sun\/source\/tree\/ExpressionTree;\n+\n+class name com\/sun\/source\/tree\/PatternTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/PrimitiveTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ProvidesTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/RequiresTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/ReturnTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/Scope\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/tree\/StatementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/StringTemplateTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;,reflective=Ztrue)\n+method name getProcessor descriptor ()Lcom\/sun\/source\/tree\/ExpressionTree; flags 401\n+method name getFragments descriptor ()Ljava\/util\/List; flags 401 signature ()Ljava\/util\/List<Ljava\/lang\/String;>;\n+method name getExpressions descriptor ()Ljava\/util\/List; flags 401 signature ()Ljava\/util\/List<+Lcom\/sun\/source\/tree\/ExpressionTree;>;\n+\n+class name com\/sun\/source\/tree\/SwitchTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/SynchronizedTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/ThrowTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/Tree$Kind\n+-field name PARENTHESIZED_PATTERN descriptor Lcom\/sun\/source\/tree\/Tree$Kind;\n+-field name DEFAULT_CASE_LABEL descriptor Lcom\/sun\/source\/tree\/Tree$Kind;\n+-field name DECONSTRUCTION_PATTERN descriptor Lcom\/sun\/source\/tree\/Tree$Kind;\n+-field name CONSTANT_CASE_LABEL descriptor Lcom\/sun\/source\/tree\/Tree$Kind;\n+-field name PATTERN_CASE_LABEL descriptor Lcom\/sun\/source\/tree\/Tree$Kind;\n+field name TEMPLATE descriptor Lcom\/sun\/source\/tree\/Tree$Kind; flags 4019 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;,reflective=Ztrue)\n+field name ANY_PATTERN descriptor Lcom\/sun\/source\/tree\/Tree$Kind; flags 4019 classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;UNNAMED;)\n+field name DEFAULT_CASE_LABEL descriptor Lcom\/sun\/source\/tree\/Tree$Kind; flags 4019\n+field name CONSTANT_CASE_LABEL descriptor Lcom\/sun\/source\/tree\/Tree$Kind; flags 4019\n+field name PATTERN_CASE_LABEL descriptor Lcom\/sun\/source\/tree\/Tree$Kind; flags 4019\n+field name DECONSTRUCTION_PATTERN descriptor Lcom\/sun\/source\/tree\/Tree$Kind; flags 4019\n+\n+class name com\/sun\/source\/tree\/TreeVisitor\n+header extends java\/lang\/Object flags 601 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;\n+-method name visitDefaultCaseLabel descriptor (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitParenthesizedPattern descriptor (Lcom\/sun\/source\/tree\/ParenthesizedPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitDeconstructionPattern descriptor (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitConstantCaseLabel descriptor (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitPatternCaseLabel descriptor (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+method name visitStringTemplate descriptor (Lcom\/sun\/source\/tree\/StringTemplateTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 401 signature (Lcom\/sun\/source\/tree\/StringTemplateTree;TP;)TR; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;,reflective=Ztrue)\n+method name visitAnyPattern descriptor (Lcom\/sun\/source\/tree\/AnyPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 401 signature (Lcom\/sun\/source\/tree\/AnyPatternTree;TP;)TR; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;UNNAMED;)\n+method name visitDefaultCaseLabel descriptor (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 401 signature (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;TP;)TR;\n+method name visitConstantCaseLabel descriptor (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 401 signature (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;TP;)TR;\n+method name visitPatternCaseLabel descriptor (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 401 signature (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;TP;)TR;\n+method name visitDeconstructionPattern descriptor (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 401 signature (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;TP;)TR;\n+\n+class name com\/sun\/source\/tree\/TryTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/TypeCastTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/TypeParameterTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/UnaryTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/UnionTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/UsesTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/VariableTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/WhileLoopTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/WildcardTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/util\/DocSourcePositions\n+header extends java\/lang\/Object implements com\/sun\/source\/util\/SourcePositions flags 601\n+\n+class name com\/sun\/source\/util\/DocTreeFactory\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass com\/sun\/source\/doctree\/AttributeTree$ValueKind outerClass com\/sun\/source\/doctree\/AttributeTree innerClassName ValueKind flags 4019\n+method name newEscapeTree descriptor (C)Lcom\/sun\/source\/doctree\/EscapeTree; flags 401\n+\n+class name com\/sun\/source\/util\/DocTreePathScanner\n+header extends com\/sun\/source\/util\/DocTreeScanner flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Lcom\/sun\/source\/util\/DocTreeScanner<TR;TP;>;\n+\n+class name com\/sun\/source\/util\/DocTreeScanner\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTreeVisitor flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;Lcom\/sun\/source\/doctree\/DocTreeVisitor<TR;TP;>;\n+method name visitEscape descriptor (Lcom\/sun\/source\/doctree\/EscapeTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/doctree\/EscapeTree;TP;)TR;\n+\n+class name com\/sun\/source\/util\/DocTrees\n+header extends com\/sun\/source\/util\/Trees flags 421\n+innerclass innerClass javax\/tools\/JavaCompiler$CompilationTask outerClass javax\/tools\/JavaCompiler innerClassName CompilationTask flags 609\n+innerclass innerClass javax\/tools\/Diagnostic$Kind outerClass javax\/tools\/Diagnostic innerClassName Kind flags 4019\n+\n+class name com\/sun\/source\/util\/JavacTask\n+header extends java\/lang\/Object implements javax\/tools\/JavaCompiler$CompilationTask flags 421\n+innerclass innerClass javax\/tools\/JavaCompiler$CompilationTask outerClass javax\/tools\/JavaCompiler innerClassName CompilationTask flags 609\n+-method name <init> descriptor ()V\n+method name <init> descriptor ()V flags 4\n+\n+class name com\/sun\/source\/util\/Plugin\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/util\/SimpleDocTreeVisitor\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTreeVisitor flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;Lcom\/sun\/source\/doctree\/DocTreeVisitor<TR;TP;>;\n+method name visitEscape descriptor (Lcom\/sun\/source\/doctree\/EscapeTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/doctree\/EscapeTree;TP;)TR;\n+\n+class name com\/sun\/source\/util\/SimpleTreeVisitor\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/TreeVisitor flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;Lcom\/sun\/source\/tree\/TreeVisitor<TR;TP;>;\n+-method name visitDefaultCaseLabel descriptor (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitParenthesizedPattern descriptor (Lcom\/sun\/source\/tree\/ParenthesizedPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitDeconstructionPattern descriptor (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitConstantCaseLabel descriptor (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitPatternCaseLabel descriptor (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+method name visitStringTemplate descriptor (Lcom\/sun\/source\/tree\/StringTemplateTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/StringTemplateTree;TP;)TR; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;,reflective=Ztrue)\n+method name visitAnyPattern descriptor (Lcom\/sun\/source\/tree\/AnyPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/AnyPatternTree;TP;)TR; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;UNNAMED;)\n+method name visitDefaultCaseLabel descriptor (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;TP;)TR;\n+method name visitConstantCaseLabel descriptor (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;TP;)TR;\n+method name visitDeconstructionPattern descriptor (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;TP;)TR;\n+method name visitPatternCaseLabel descriptor (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;TP;)TR;\n+\n+class name com\/sun\/source\/util\/SourcePositions\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/util\/TaskListener\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/util\/TreePathScanner\n+header extends com\/sun\/source\/util\/TreeScanner flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Lcom\/sun\/source\/util\/TreeScanner<TR;TP;>;\n+\n+class name com\/sun\/source\/util\/TreeScanner\n+-method name visitDefaultCaseLabel descriptor (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitParenthesizedPattern descriptor (Lcom\/sun\/source\/tree\/ParenthesizedPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitDeconstructionPattern descriptor (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitConstantCaseLabel descriptor (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name visitPatternCaseLabel descriptor (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+method name visitStringTemplate descriptor (Lcom\/sun\/source\/tree\/StringTemplateTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/StringTemplateTree;TP;)TR; classAnnotations @Ljdk\/internal\/javac\/PreviewFeature;(feature=eLjdk\/internal\/javac\/PreviewFeature$Feature;STRING_TEMPLATES;,reflective=Ztrue)\n+method name visitAnyPattern descriptor (Lcom\/sun\/source\/tree\/AnyPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/AnyPatternTree;TP;)TR;\n+method name visitDefaultCaseLabel descriptor (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/DefaultCaseLabelTree;TP;)TR;\n+method name visitConstantCaseLabel descriptor (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/ConstantCaseLabelTree;TP;)TR;\n+method name visitPatternCaseLabel descriptor (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/PatternCaseLabelTree;TP;)TR;\n+method name visitDeconstructionPattern descriptor (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/tree\/DeconstructionPatternTree;TP;)TR;\n+\n+class name com\/sun\/source\/util\/Trees\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/tools\/JavaCompiler$CompilationTask outerClass javax\/tools\/JavaCompiler innerClassName CompilationTask flags 609\n+innerclass innerClass javax\/tools\/Diagnostic$Kind outerClass javax\/tools\/Diagnostic innerClassName Kind flags 4019\n+\n+class name com\/sun\/tools\/javac\/Main\n+header extends java\/lang\/Object flags 21\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.compiler-L.sym.txt","additions":470,"deletions":0,"binary":false,"changes":470,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name jdk\/dynalink\/CallSiteDescriptor\n+header extends jdk\/dynalink\/SecureLookupSupplier flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/DynamicLinker\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/StackWalker$StackFrame outerClass java\/lang\/StackWalker innerClassName StackFrame flags 609\n+innerclass innerClass java\/lang\/StackWalker$Option outerClass java\/lang\/StackWalker innerClassName Option flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/NamedOperation\n+header extends java\/lang\/Object implements jdk\/dynalink\/Operation flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/Namespace\n+header extends java\/lang\/Object flags 601\n+\n+class name jdk\/dynalink\/NamespaceOperation\n+header extends java\/lang\/Object implements jdk\/dynalink\/Operation flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/NoSuchDynamicMethodException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name jdk\/dynalink\/Operation\n+header extends java\/lang\/Object flags 601\n+\n+class name jdk\/dynalink\/RelinkableCallSite\n+header extends java\/lang\/Object flags 601\n+\n+class name jdk\/dynalink\/SecureLookupSupplier\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/StandardNamespace\n+header extends java\/lang\/Enum implements jdk\/dynalink\/Namespace flags 4031 signature Ljava\/lang\/Enum<Ljdk\/dynalink\/StandardNamespace;>;Ljdk\/dynalink\/Namespace;\n+\n+class name jdk\/dynalink\/StandardOperation\n+header extends java\/lang\/Enum implements jdk\/dynalink\/Operation flags 4031 signature Ljava\/lang\/Enum<Ljdk\/dynalink\/StandardOperation;>;Ljdk\/dynalink\/Operation;\n+\n+class name jdk\/dynalink\/beans\/MissingMemberHandlerFactory\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+\n+class name jdk\/dynalink\/linker\/GuardedInvocation\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/linker\/GuardedInvocationTransformer\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+\n+class name jdk\/dynalink\/linker\/GuardingDynamicLinker\n+header extends java\/lang\/Object flags 601\n+\n+class name jdk\/dynalink\/linker\/GuardingDynamicLinkerExporter\n+header extends java\/lang\/Object implements java\/util\/function\/Supplier flags 421 signature Ljava\/lang\/Object;Ljava\/util\/function\/Supplier<Ljava\/util\/List<Ljdk\/dynalink\/linker\/GuardingDynamicLinker;>;>;\n+\n+class name jdk\/dynalink\/linker\/GuardingTypeConverterFactory\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/linker\/LinkRequest\n+header extends java\/lang\/Object flags 601\n+\n+class name jdk\/dynalink\/linker\/LinkerServices\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass jdk\/dynalink\/linker\/ConversionComparator$Comparison outerClass jdk\/dynalink\/linker\/ConversionComparator innerClassName Comparison flags 4019\n+\n+class name jdk\/dynalink\/linker\/MethodHandleTransformer\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+\n+class name jdk\/dynalink\/linker\/MethodTypeConversionStrategy\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+\n+class name jdk\/dynalink\/linker\/TypeBasedGuardingDynamicLinker\n+header extends java\/lang\/Object implements jdk\/dynalink\/linker\/GuardingDynamicLinker flags 601\n+\n+class name jdk\/dynalink\/linker\/support\/CompositeGuardingDynamicLinker\n+header extends java\/lang\/Object implements jdk\/dynalink\/linker\/GuardingDynamicLinker flags 21\n+\n+class name jdk\/dynalink\/linker\/support\/DefaultInternalObjectFilter\n+header extends java\/lang\/Object implements jdk\/dynalink\/linker\/MethodHandleTransformer flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/linker\/support\/Guards\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/linker\/support\/Lookup\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/linker\/support\/SimpleLinkRequest\n+header extends java\/lang\/Object implements jdk\/dynalink\/linker\/LinkRequest flags 21\n+\n+class name jdk\/dynalink\/linker\/support\/TypeUtilities\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+\n+class name jdk\/dynalink\/support\/AbstractRelinkableCallSite\n+header extends java\/lang\/invoke\/MutableCallSite implements jdk\/dynalink\/RelinkableCallSite flags 421\n+\n+class name jdk\/dynalink\/support\/ChainedCallSite\n+header extends jdk\/dynalink\/support\/AbstractRelinkableCallSite flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/dynalink\/support\/SimpleRelinkableCallSite\n+header extends jdk\/dynalink\/support\/AbstractRelinkableCallSite flags 21\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.dynalink-L.sym.txt","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/net\/httpserver\/HttpContext\n+header extends java\/lang\/Object flags 421\n+\n+class name com\/sun\/net\/httpserver\/HttpHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/net\/httpserver\/HttpPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/net\/httpserver\/HttpsConfigurator\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/net\/httpserver\/HttpsExchange\n+header extends com\/sun\/net\/httpserver\/HttpExchange flags 421\n+\n+class name com\/sun\/net\/httpserver\/HttpsParameters\n+header extends java\/lang\/Object flags 421\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.httpserver-L.sym.txt","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+-module name jdk.incubator.concurrent\n+\n+-class name jdk\/incubator\/concurrent\/ScopedValue\n+\n+-class name jdk\/incubator\/concurrent\/ScopedValue$Carrier\n+\n+-class name jdk\/incubator\/concurrent\/StructureViolationException\n+\n+-class name jdk\/incubator\/concurrent\/StructuredTaskScope\n+\n+-class name jdk\/incubator\/concurrent\/StructuredTaskScope$ShutdownOnFailure\n+\n+-class name jdk\/incubator\/concurrent\/StructuredTaskScope$ShutdownOnSuccess\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.incubator.concurrent-L.sym.txt","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name jdk\/incubator\/vector\/AbstractVector\n+header extends jdk\/incubator\/vector\/Vector flags 420 signature <E:Ljava\/lang\/Object;>Ljdk\/incubator\/vector\/Vector<TE;>;\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Associative outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Associative flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Binary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Binary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Comparison outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Comparison flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Conversion outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Conversion flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name toShuffle descriptor ()Ljdk\/incubator\/vector\/VectorShuffle; flags 11 signature ()Ljdk\/incubator\/vector\/VectorShuffle<TE;>; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+\n+class name jdk\/incubator\/vector\/VectorMask\n+method name xor descriptor (Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/VectorMask; flags 401 signature (Ljdk\/incubator\/vector\/VectorMask<TE;>;)Ljdk\/incubator\/vector\/VectorMask<TE;>;\n+\n+class name jdk\/incubator\/vector\/VectorShape\n+-method name forBitSize descriptor (I)Ljdk\/incubator\/vector\/VectorShape;\n+method name forBitSize descriptor (I)Ljdk\/incubator\/vector\/VectorShape; flags 9 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+\n+class name jdk\/incubator\/vector\/VectorShuffle\n+-method name laneSource descriptor (I)I\n+method name laneSource descriptor (I)I flags 401\n+\n+class name jdk\/incubator\/vector\/VectorSpecies\n+-method name of descriptor (Ljava\/lang\/Class;Ljdk\/incubator\/vector\/VectorShape;)Ljdk\/incubator\/vector\/VectorSpecies;\n+-method name ofLargestShape descriptor (Ljava\/lang\/Class;)Ljdk\/incubator\/vector\/VectorSpecies;\n+-method name ofPreferred descriptor (Ljava\/lang\/Class;)Ljdk\/incubator\/vector\/VectorSpecies;\n+-method name elementSize descriptor (Ljava\/lang\/Class;)I\n+method name of descriptor (Ljava\/lang\/Class;Ljdk\/incubator\/vector\/VectorShape;)Ljdk\/incubator\/vector\/VectorSpecies; flags 9 signature <E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<TE;>;Ljdk\/incubator\/vector\/VectorShape;)Ljdk\/incubator\/vector\/VectorSpecies<TE;>; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name ofLargestShape descriptor (Ljava\/lang\/Class;)Ljdk\/incubator\/vector\/VectorSpecies; flags 9 signature <E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<TE;>;)Ljdk\/incubator\/vector\/VectorSpecies<TE;>; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name ofPreferred descriptor (Ljava\/lang\/Class;)Ljdk\/incubator\/vector\/VectorSpecies; flags 9 signature <E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<TE;>;)Ljdk\/incubator\/vector\/VectorSpecies<TE;>; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name elementSize descriptor (Ljava\/lang\/Class;)I flags 9 signature (Ljava\/lang\/Class<*>;)I runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.incubator.vector-L.sym.txt","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name jdk.jartool\n+header exports jdk\/security\/jarsigner requires name\\u0020;java.base\\u0020;flags\\u0020;8000,name\\u0020;jdk.internal.opt\\u0020;flags\\u0020;0 provides interface\\u0020;java\/util\/spi\/ToolProvider\\u0020;impls\\u0020;sun\/tools\/jar\/JarToolProvider target linux-amd64 flags 8000\n+\n+-class name com\/sun\/jarsigner\/ContentSigner\n+\n+-class name com\/sun\/jarsigner\/ContentSignerParameters\n+\n+class name jdk\/security\/jarsigner\/JarSignerException\n+header extends java\/lang\/RuntimeException flags 21\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.jartool-L.sym.txt","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name jdk.javadoc\n+header exports jdk\/javadoc\/doclet requires name\\u0020;java.base\\u0020;flags\\u0020;8000,name\\u0020;java.xml\\u0020;flags\\u0020;0,name\\u0020;java.compiler\\u0020;flags\\u0020;20,name\\u0020;jdk.compiler\\u0020;flags\\u0020;20,name\\u0020;jdk.internal.opt\\u0020;flags\\u0020;0 provides interface\\u0020;java\/util\/spi\/ToolProvider\\u0020;impls\\u0020;jdk\/javadoc\/internal\/tool\/JavadocToolProvider,interface\\u0020;javax\/tools\/DocumentationTool\\u0020;impls\\u0020;jdk\/javadoc\/internal\/api\/JavadocTool,interface\\u0020;javax\/tools\/Tool\\u0020;impls\\u0020;jdk\/javadoc\/internal\/api\/JavadocTool,interface\\u0020;com\/sun\/tools\/doclint\/DocLint\\u0020;impls\\u0020;jdk\/javadoc\/internal\/doclint\/DocLint target linux-amd64 flags 8000\n+\n+class name jdk\/javadoc\/doclet\/Reporter\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass javax\/tools\/Diagnostic$Kind outerClass javax\/tools\/Diagnostic innerClassName Kind flags 4019\n+\n+class name jdk\/javadoc\/doclet\/StandardDoclet\n+header extends java\/lang\/Object implements jdk\/javadoc\/doclet\/Doclet flags 21\n+innerclass innerClass jdk\/javadoc\/doclet\/Doclet$Option outerClass jdk\/javadoc\/doclet\/Doclet innerClassName Option flags 609\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.javadoc-L.sym.txt","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/tools\/jconsole\/JConsolePlugin\n+header extends java\/lang\/Object flags 421\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.jconsole-L.sym.txt","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,401 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/jdi\/AbsentInformationException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/jdi\/Accessible\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/jdi\/ArrayReference\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ObjectReference flags 601\n+\n+class name com\/sun\/jdi\/ArrayType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ReferenceType flags 601\n+\n+class name com\/sun\/jdi\/BooleanType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveType flags 601\n+\n+class name com\/sun\/jdi\/BooleanValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveValue flags 601\n+\n+class name com\/sun\/jdi\/Bootstrap\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/jdi\/ByteType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveType flags 601\n+\n+class name com\/sun\/jdi\/ByteValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveValue,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/PrimitiveValue;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/ByteValue;>;\n+\n+class name com\/sun\/jdi\/CharType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveType flags 601\n+\n+class name com\/sun\/jdi\/CharValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveValue,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/PrimitiveValue;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/CharValue;>;\n+\n+class name com\/sun\/jdi\/ClassLoaderReference\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ObjectReference flags 601\n+\n+class name com\/sun\/jdi\/ClassNotLoadedException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/jdi\/ClassNotPreparedException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/ClassObjectReference\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ObjectReference flags 601\n+\n+class name com\/sun\/jdi\/ClassType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ReferenceType flags 601\n+\n+class name com\/sun\/jdi\/DoubleType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveType flags 601\n+\n+class name com\/sun\/jdi\/DoubleValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveValue,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/PrimitiveValue;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/DoubleValue;>;\n+\n+class name com\/sun\/jdi\/Field\n+header extends java\/lang\/Object implements com\/sun\/jdi\/TypeComponent,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/TypeComponent;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/Field;>;\n+\n+class name com\/sun\/jdi\/FloatType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveType flags 601\n+\n+class name com\/sun\/jdi\/FloatValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveValue,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/PrimitiveValue;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/FloatValue;>;\n+\n+class name com\/sun\/jdi\/IncompatibleThreadStateException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/jdi\/InconsistentDebugInfoException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/IntegerType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveType flags 601\n+\n+class name com\/sun\/jdi\/IntegerValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveValue,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/PrimitiveValue;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/IntegerValue;>;\n+\n+class name com\/sun\/jdi\/InterfaceType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ReferenceType flags 601\n+\n+class name com\/sun\/jdi\/InternalException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/InvalidCodeIndexException\n+header extends java\/lang\/RuntimeException flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;\n+\n+class name com\/sun\/jdi\/InvalidLineNumberException\n+header extends java\/lang\/RuntimeException flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;\n+\n+class name com\/sun\/jdi\/InvalidModuleException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/InvalidStackFrameException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/InvalidTypeException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/jdi\/InvocationException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/jdi\/JDIPermission\n+header extends java\/security\/BasicPermission flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/jdi\/LocalVariable\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/Mirror;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/LocalVariable;>;\n+\n+class name com\/sun\/jdi\/Locatable\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/jdi\/Location\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/Mirror;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/Location;>;\n+\n+class name com\/sun\/jdi\/LongType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveType flags 601\n+\n+class name com\/sun\/jdi\/LongValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveValue,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/PrimitiveValue;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/LongValue;>;\n+\n+class name com\/sun\/jdi\/Method\n+header extends java\/lang\/Object implements com\/sun\/jdi\/TypeComponent,com\/sun\/jdi\/Locatable,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/TypeComponent;Lcom\/sun\/jdi\/Locatable;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/Method;>;\n+\n+class name com\/sun\/jdi\/Mirror\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/jdi\/ModuleReference\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ObjectReference flags 601\n+\n+class name com\/sun\/jdi\/MonitorInfo\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror flags 601\n+\n+class name com\/sun\/jdi\/ObjectCollectedException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/ObjectReference\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Value flags 601\n+\n+class name com\/sun\/jdi\/OpaqueFrameException\n+header extends java\/lang\/RuntimeException sealed true flags 21\n+\n+class name com\/sun\/jdi\/PathSearchingVirtualMachine\n+header extends java\/lang\/Object implements com\/sun\/jdi\/VirtualMachine flags 601\n+\n+class name com\/sun\/jdi\/PrimitiveType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Type flags 601\n+\n+class name com\/sun\/jdi\/PrimitiveValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Value flags 601\n+\n+class name com\/sun\/jdi\/ReferenceType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Type,java\/lang\/Comparable,com\/sun\/jdi\/Accessible flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/Type;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/ReferenceType;>;Lcom\/sun\/jdi\/Accessible;\n+\n+class name com\/sun\/jdi\/ShortType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveType flags 601\n+\n+class name com\/sun\/jdi\/ShortValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/PrimitiveValue,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/PrimitiveValue;Ljava\/lang\/Comparable<Lcom\/sun\/jdi\/ShortValue;>;\n+\n+class name com\/sun\/jdi\/StackFrame\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror,com\/sun\/jdi\/Locatable flags 601\n+\n+class name com\/sun\/jdi\/StringReference\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ObjectReference flags 601\n+\n+class name com\/sun\/jdi\/ThreadGroupReference\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ObjectReference flags 601\n+\n+class name com\/sun\/jdi\/ThreadReference\n+header extends java\/lang\/Object implements com\/sun\/jdi\/ObjectReference flags 601\n+-method name isVirtual descriptor ()Z\n+method name isVirtual descriptor ()Z flags 1\n+\n+class name com\/sun\/jdi\/Type\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror flags 601\n+\n+class name com\/sun\/jdi\/TypeComponent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror,com\/sun\/jdi\/Accessible flags 601\n+\n+class name com\/sun\/jdi\/VMCannotBeModifiedException\n+header extends java\/lang\/UnsupportedOperationException flags 21\n+\n+class name com\/sun\/jdi\/VMDisconnectedException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/VMMismatchException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/VMOutOfMemoryException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/Value\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror flags 601\n+\n+class name com\/sun\/jdi\/VirtualMachine\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror flags 601\n+\n+class name com\/sun\/jdi\/VirtualMachineManager\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/jdi\/VoidType\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Type flags 601\n+\n+class name com\/sun\/jdi\/VoidValue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Value flags 601\n+\n+class name com\/sun\/jdi\/connect\/AttachingConnector\n+header extends java\/lang\/Object implements com\/sun\/jdi\/connect\/Connector flags 601\n+innerclass innerClass com\/sun\/jdi\/connect\/Connector$Argument outerClass com\/sun\/jdi\/connect\/Connector innerClassName Argument flags 609\n+\n+class name com\/sun\/jdi\/connect\/IllegalConnectorArgumentsException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/jdi\/connect\/LaunchingConnector\n+header extends java\/lang\/Object implements com\/sun\/jdi\/connect\/Connector flags 601\n+innerclass innerClass com\/sun\/jdi\/connect\/Connector$Argument outerClass com\/sun\/jdi\/connect\/Connector innerClassName Argument flags 609\n+\n+class name com\/sun\/jdi\/connect\/ListeningConnector\n+header extends java\/lang\/Object implements com\/sun\/jdi\/connect\/Connector flags 601\n+innerclass innerClass com\/sun\/jdi\/connect\/Connector$Argument outerClass com\/sun\/jdi\/connect\/Connector innerClassName Argument flags 609\n+\n+class name com\/sun\/jdi\/connect\/Transport\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/jdi\/connect\/TransportTimeoutException\n+header extends java\/io\/IOException flags 21\n+\n+class name com\/sun\/jdi\/connect\/VMStartException\n+header extends java\/lang\/Exception flags 21\n+\n+class name com\/sun\/jdi\/connect\/spi\/ClosedConnectionException\n+header extends java\/io\/IOException flags 21\n+\n+class name com\/sun\/jdi\/connect\/spi\/Connection\n+header extends java\/lang\/Object flags 421\n+\n+class name com\/sun\/jdi\/event\/AccessWatchpointEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/WatchpointEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/BreakpointEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/ClassPrepareEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/Event flags 601\n+\n+class name com\/sun\/jdi\/event\/ClassUnloadEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/Event flags 601\n+\n+class name com\/sun\/jdi\/event\/Event\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror flags 601\n+\n+class name com\/sun\/jdi\/event\/EventIterator\n+header extends java\/lang\/Object implements java\/util\/Iterator flags 601 signature Ljava\/lang\/Object;Ljava\/util\/Iterator<Lcom\/sun\/jdi\/event\/Event;>;\n+\n+class name com\/sun\/jdi\/event\/EventQueue\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror flags 601\n+\n+class name com\/sun\/jdi\/event\/EventSet\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror,java\/util\/Set flags 601 signature Ljava\/lang\/Object;Lcom\/sun\/jdi\/Mirror;Ljava\/util\/Set<Lcom\/sun\/jdi\/event\/Event;>;\n+\n+class name com\/sun\/jdi\/event\/ExceptionEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/LocatableEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/Event,com\/sun\/jdi\/Locatable flags 601\n+\n+class name com\/sun\/jdi\/event\/MethodEntryEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/MethodExitEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/ModificationWatchpointEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/WatchpointEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/MonitorContendedEnterEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/MonitorContendedEnteredEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/MonitorWaitEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/MonitorWaitedEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/StepEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/event\/ThreadDeathEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/Event flags 601\n+\n+class name com\/sun\/jdi\/event\/ThreadStartEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/Event flags 601\n+\n+class name com\/sun\/jdi\/event\/VMDeathEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/Event flags 601\n+\n+class name com\/sun\/jdi\/event\/VMDisconnectEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/Event flags 601\n+\n+class name com\/sun\/jdi\/event\/VMStartEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/Event flags 601\n+\n+class name com\/sun\/jdi\/event\/WatchpointEvent\n+header extends java\/lang\/Object implements com\/sun\/jdi\/event\/LocatableEvent flags 601\n+\n+class name com\/sun\/jdi\/request\/AccessWatchpointRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/WatchpointRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/BreakpointRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest,com\/sun\/jdi\/Locatable flags 601\n+\n+class name com\/sun\/jdi\/request\/ClassPrepareRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/ClassUnloadRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/DuplicateRequestException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/request\/EventRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror flags 601\n+\n+class name com\/sun\/jdi\/request\/EventRequestManager\n+header extends java\/lang\/Object implements com\/sun\/jdi\/Mirror flags 601\n+\n+class name com\/sun\/jdi\/request\/ExceptionRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/InvalidRequestStateException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name com\/sun\/jdi\/request\/MethodEntryRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/MethodExitRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/ModificationWatchpointRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/WatchpointRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/MonitorContendedEnterRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/MonitorContendedEnteredRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/MonitorWaitRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/MonitorWaitedRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/StepRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/ThreadDeathRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+-method name addPlatformThreadsOnlyFilter descriptor ()V\n+method name addPlatformThreadsOnlyFilter descriptor ()V flags 1\n+\n+class name com\/sun\/jdi\/request\/ThreadStartRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+-method name addPlatformThreadsOnlyFilter descriptor ()V\n+method name addPlatformThreadsOnlyFilter descriptor ()V flags 1\n+\n+class name com\/sun\/jdi\/request\/VMDeathRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n+class name com\/sun\/jdi\/request\/WatchpointRequest\n+header extends java\/lang\/Object implements com\/sun\/jdi\/request\/EventRequest flags 601\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.jdi-L.sym.txt","additions":401,"deletions":0,"binary":false,"changes":401,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name jdk\/jfr\/consumer\/RecordedObject\n+header extends java\/lang\/Object sealed true flags 21\n+\n+class name jdk\/jfr\/consumer\/RecordedThread\n+-method name isVirtual descriptor ()Z\n+method name isVirtual descriptor ()Z flags 1\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.jfr-L.sym.txt","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name jdk.jshell\n+header exports jdk\/jshell,jdk\/jshell\/execution,jdk\/jshell\/spi,jdk\/jshell\/tool requires name\\u0020;java.base\\u0020;flags\\u0020;8000,name\\u0020;java.logging\\u0020;flags\\u0020;0,name\\u0020;jdk.compiler\\u0020;flags\\u0020;0,name\\u0020;jdk.internal.ed\\u0020;flags\\u0020;0,name\\u0020;jdk.internal.le\\u0020;flags\\u0020;0,name\\u0020;jdk.internal.opt\\u0020;flags\\u0020;0,name\\u0020;java.compiler\\u0020;flags\\u0020;20,name\\u0020;java.prefs\\u0020;flags\\u0020;20,name\\u0020;jdk.jdi\\u0020;flags\\u0020;20 uses jdk\/jshell\/spi\/ExecutionControlProvider,jdk\/internal\/editor\/spi\/BuildInEditorProvider provides interface\\u0020;javax\/tools\/Tool\\u0020;impls\\u0020;jdk\/internal\/jshell\/tool\/JShellToolProvider,interface\\u0020;jdk\/jshell\/spi\/ExecutionControlProvider\\u0020;impls\\u0020;jdk\/jshell\/execution\/JdiExecutionControlProvider\\u005C;u002C;jdk\/jshell\/execution\/LocalExecutionControlProvider\\u005C;u002C;jdk\/jshell\/execution\/FailOverExecutionControlProvider,interface\\u0020;jdk\/internal\/io\/JdkConsoleProvider\\u0020;impls\\u0020;jdk\/jshell\/execution\/impl\/ConsoleImpl$ConsoleProviderImpl target linux-amd64 flags 8000\n+\n+class name jdk\/jshell\/DeclarationSnippet\n+header extends jdk\/jshell\/PersistentSnippet flags 421\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/jshell\/Diag\n+header extends java\/lang\/Object flags 421\n+\n+class name jdk\/jshell\/EvalException\n+header extends jdk\/jshell\/JShellException flags 21\n+\n+class name jdk\/jshell\/ExpressionSnippet\n+header extends jdk\/jshell\/Snippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/ImportSnippet\n+header extends jdk\/jshell\/PersistentSnippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/JShell$Builder\n+method name console descriptor (Ljdk\/jshell\/JShellConsole;)Ljdk\/jshell\/JShell$Builder; flags 1\n+\n+class name jdk\/jshell\/JShellConsole\n+header extends java\/lang\/Object flags 601\n+method name writer descriptor ()Ljava\/io\/PrintWriter; flags 401\n+method name reader descriptor ()Ljava\/io\/Reader; flags 401\n+method name readLine descriptor (Ljava\/lang\/String;)Ljava\/lang\/String; thrownTypes java\/io\/IOError flags 401\n+method name readPassword descriptor (Ljava\/lang\/String;)[C thrownTypes java\/io\/IOError flags 401\n+method name flush descriptor ()V flags 401\n+method name charset descriptor ()Ljava\/nio\/charset\/Charset; flags 401\n+\n+class name jdk\/jshell\/JShellException\n+header extends java\/lang\/Exception flags 21\n+\n+class name jdk\/jshell\/MethodSnippet\n+header extends jdk\/jshell\/DeclarationSnippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/PersistentSnippet\n+header extends jdk\/jshell\/Snippet flags 421\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/SnippetEvent\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$Status outerClass jdk\/jshell\/Snippet innerClassName Status flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/jshell\/StatementSnippet\n+header extends jdk\/jshell\/Snippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/TypeDeclSnippet\n+header extends jdk\/jshell\/DeclarationSnippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/execution\/FailOverExecutionControlProvider\n+header extends java\/lang\/Object implements jdk\/jshell\/spi\/ExecutionControlProvider flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/jshell\/execution\/JdiDefaultExecutionControl\n+header extends jdk\/jshell\/execution\/JdiExecutionControl flags 21\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$InternalException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName InternalException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$EngineTerminationException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName EngineTerminationException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$RunException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName RunException flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/jshell\/execution\/JdiExecutionControlProvider\n+header extends java\/lang\/Object implements jdk\/jshell\/spi\/ExecutionControlProvider flags 21\n+\n+class name jdk\/jshell\/execution\/LoaderDelegate\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$ClassBytecodes outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName ClassBytecodes flags 19\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$ClassInstallException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName ClassInstallException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$NotImplementedException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName NotImplementedException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$EngineTerminationException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName EngineTerminationException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$InternalException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName InternalException flags 9\n+\n+class name jdk\/jshell\/execution\/LocalExecutionControlProvider\n+header extends java\/lang\/Object implements jdk\/jshell\/spi\/ExecutionControlProvider flags 21\n+\n+class name jdk\/jshell\/spi\/ExecutionControlProvider\n+header extends java\/lang\/Object flags 601\n+\n+class name jdk\/jshell\/spi\/ExecutionEnv\n+header extends java\/lang\/Object flags 601\n+method name console descriptor ()Ljava\/util\/Optional; flags 1 signature ()Ljava\/util\/Optional<Ljdk\/jshell\/JShellConsole;>;\n+\n+class name jdk\/jshell\/spi\/SPIResolutionException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name jdk\/jshell\/tool\/JavaShellToolBuilder\n+header extends java\/lang\/Object flags 601\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.jshell-L.sym.txt","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name netscape\/javascript\/JSException\n+header extends java\/lang\/RuntimeException flags 21\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.jsobject-L.sym.txt","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/management\/GarbageCollectionNotificationInfo\n+header extends java\/lang\/Object implements javax\/management\/openmbean\/CompositeDataView flags 21\n+\n+class name com\/sun\/management\/GarbageCollectorMXBean\n+header extends java\/lang\/Object implements java\/lang\/management\/GarbageCollectorMXBean flags 601\n+\n+class name com\/sun\/management\/GcInfo\n+header extends java\/lang\/Object implements javax\/management\/openmbean\/CompositeData,javax\/management\/openmbean\/CompositeDataView flags 21\n+\n+class name com\/sun\/management\/HotSpotDiagnosticMXBean\n+-method name dumpThreads descriptor (Ljava\/lang\/String;Lcom\/sun\/management\/HotSpotDiagnosticMXBean$ThreadDumpFormat;)V\n+method name dumpThreads descriptor (Ljava\/lang\/String;Lcom\/sun\/management\/HotSpotDiagnosticMXBean$ThreadDumpFormat;)V thrownTypes java\/io\/IOException flags 1\n+\n+class name com\/sun\/management\/HotSpotDiagnosticMXBean$ThreadDumpFormat\n+header extends java\/lang\/Enum nestHost com\/sun\/management\/HotSpotDiagnosticMXBean flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/management\/HotSpotDiagnosticMXBean$ThreadDumpFormat;>;\n+innerclass innerClass com\/sun\/management\/HotSpotDiagnosticMXBean$ThreadDumpFormat outerClass com\/sun\/management\/HotSpotDiagnosticMXBean innerClassName ThreadDumpFormat flags 4019\n+\n+class name com\/sun\/management\/OperatingSystemMXBean\n+header extends java\/lang\/Object implements java\/lang\/management\/OperatingSystemMXBean flags 601\n+\n+class name com\/sun\/management\/ThreadMXBean\n+header extends java\/lang\/Object implements java\/lang\/management\/ThreadMXBean flags 601\n+method name getTotalThreadAllocatedBytes descriptor ()J flags 1\n+\n+class name com\/sun\/management\/UnixOperatingSystemMXBean\n+header extends java\/lang\/Object implements com\/sun\/management\/OperatingSystemMXBean flags 601\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.management-L.sym.txt","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name jdk\/net\/NetworkPermission\n+header extends java\/security\/BasicPermission flags 31\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.net-L.sym.txt","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/nio\/sctp\/AbstractNotificationHandler\n+header extends java\/lang\/Object implements com\/sun\/nio\/sctp\/NotificationHandler flags 21 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Lcom\/sun\/nio\/sctp\/NotificationHandler<TT;>;\n+\n+class name com\/sun\/nio\/sctp\/Association\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/nio\/sctp\/HandlerResult\n+header extends java\/lang\/Enum flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/sctp\/HandlerResult;>;\n+\n+class name com\/sun\/nio\/sctp\/IllegalReceiveException\n+header extends java\/lang\/IllegalStateException flags 21\n+\n+class name com\/sun\/nio\/sctp\/IllegalUnbindException\n+header extends java\/lang\/IllegalStateException flags 21\n+\n+class name com\/sun\/nio\/sctp\/InvalidStreamException\n+header extends java\/lang\/IllegalArgumentException flags 21\n+\n+class name com\/sun\/nio\/sctp\/MessageInfo\n+header extends java\/lang\/Object flags 421\n+\n+class name com\/sun\/nio\/sctp\/Notification\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/nio\/sctp\/NotificationHandler\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;\n+\n+class name com\/sun\/nio\/sctp\/SctpChannel\n+header extends java\/nio\/channels\/spi\/AbstractSelectableChannel flags 421\n+\n+class name com\/sun\/nio\/sctp\/SctpMultiChannel\n+header extends java\/nio\/channels\/spi\/AbstractSelectableChannel flags 421\n+\n+class name com\/sun\/nio\/sctp\/SctpServerChannel\n+header extends java\/nio\/channels\/spi\/AbstractSelectableChannel flags 421\n+\n+class name com\/sun\/nio\/sctp\/SctpSocketOption\n+header extends java\/lang\/Object implements java\/net\/SocketOption flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/net\/SocketOption<TT;>;\n+\n+class name com\/sun\/nio\/sctp\/SctpStandardSocketOptions\n+header extends java\/lang\/Object nestMembers com\/sun\/nio\/sctp\/SctpStandardSocketOptions$InitMaxStreams flags 31\n+innerclass innerClass com\/sun\/nio\/sctp\/SctpStandardSocketOptions$InitMaxStreams outerClass com\/sun\/nio\/sctp\/SctpStandardSocketOptions innerClassName InitMaxStreams flags 9\n+\n+class name com\/sun\/nio\/sctp\/SctpStandardSocketOptions$InitMaxStreams\n+header extends java\/lang\/Object nestHost com\/sun\/nio\/sctp\/SctpStandardSocketOptions flags 21\n+innerclass innerClass com\/sun\/nio\/sctp\/SctpStandardSocketOptions$InitMaxStreams outerClass com\/sun\/nio\/sctp\/SctpStandardSocketOptions innerClassName InitMaxStreams flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/nio\/sctp\/SendFailedNotification\n+header extends java\/lang\/Object implements com\/sun\/nio\/sctp\/Notification flags 421\n+\n+class name com\/sun\/nio\/sctp\/ShutdownNotification\n+header extends java\/lang\/Object implements com\/sun\/nio\/sctp\/Notification flags 421\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.sctp-L.sym.txt","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/security\/auth\/LdapPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 31\n+\n+class name com\/sun\/security\/auth\/NTDomainPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 21\n+\n+class name com\/sun\/security\/auth\/NTNumericCredential\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/security\/auth\/NTSid\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 21\n+\n+class name com\/sun\/security\/auth\/NTSidDomainPrincipal\n+header extends com\/sun\/security\/auth\/NTSid flags 21\n+\n+class name com\/sun\/security\/auth\/NTSidGroupPrincipal\n+header extends com\/sun\/security\/auth\/NTSid flags 21\n+\n+class name com\/sun\/security\/auth\/NTSidPrimaryGroupPrincipal\n+header extends com\/sun\/security\/auth\/NTSid flags 21\n+\n+class name com\/sun\/security\/auth\/NTSidUserPrincipal\n+header extends com\/sun\/security\/auth\/NTSid flags 21\n+\n+class name com\/sun\/security\/auth\/NTUserPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 21\n+\n+class name com\/sun\/security\/auth\/PrincipalComparator\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/security\/auth\/UnixNumericGroupPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 21\n+\n+class name com\/sun\/security\/auth\/UnixNumericUserPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 21\n+\n+class name com\/sun\/security\/auth\/UnixPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 21\n+\n+class name com\/sun\/security\/auth\/UserPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 31\n+\n+class name com\/sun\/security\/auth\/callback\/TextCallbackHandler\n+header extends java\/lang\/Object implements javax\/security\/auth\/callback\/CallbackHandler flags 21\n+\n+class name com\/sun\/security\/auth\/login\/ConfigFile\n+header extends javax\/security\/auth\/login\/Configuration flags 21\n+\n+class name com\/sun\/security\/auth\/module\/JndiLoginModule\n+header extends java\/lang\/Object implements javax\/security\/auth\/spi\/LoginModule flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/security\/auth\/module\/KeyStoreLoginModule\n+header extends java\/lang\/Object implements javax\/security\/auth\/spi\/LoginModule flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/security\/auth\/module\/Krb5LoginModule\n+header extends java\/lang\/Object implements javax\/security\/auth\/spi\/LoginModule flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/security\/auth\/module\/LdapLoginModule\n+header extends java\/lang\/Object implements javax\/security\/auth\/spi\/LoginModule flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/security\/auth\/module\/NTLoginModule\n+header extends java\/lang\/Object implements javax\/security\/auth\/spi\/LoginModule flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/security\/auth\/module\/NTSystem\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/security\/auth\/module\/UnixLoginModule\n+header extends java\/lang\/Object implements javax\/security\/auth\/spi\/LoginModule flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/security\/auth\/module\/UnixSystem\n+header extends java\/lang\/Object flags 21\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.security.auth-L.sym.txt","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/security\/jgss\/AuthorizationDataEntry\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/security\/jgss\/ExtendedGSSContext\n+header extends java\/lang\/Object implements org\/ietf\/jgss\/GSSContext flags 601\n+\n+class name com\/sun\/security\/jgss\/ExtendedGSSCredential\n+header extends java\/lang\/Object implements org\/ietf\/jgss\/GSSCredential flags 601\n+\n+class name com\/sun\/security\/jgss\/GSSUtil\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/security\/jgss\/InquireSecContextPermission\n+header extends java\/security\/BasicPermission flags 31\n+\n+class name com\/sun\/security\/jgss\/InquireType\n+header extends java\/lang\/Enum flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/security\/jgss\/InquireType;>;\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.security.jgss-L.sym.txt","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/nio\/file\/ExtendedCopyOption\n+header extends java\/lang\/Enum implements java\/nio\/file\/CopyOption flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/file\/ExtendedCopyOption;>;Ljava\/nio\/file\/CopyOption; classAnnotations @Lsun\/Proprietary+Annotation;\n+\n+class name com\/sun\/nio\/file\/ExtendedOpenOption\n+header extends java\/lang\/Enum implements java\/nio\/file\/OpenOption flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/file\/ExtendedOpenOption;>;Ljava\/nio\/file\/OpenOption; classAnnotations @Lsun\/Proprietary+Annotation;\n+\n+class name com\/sun\/nio\/file\/ExtendedWatchEventModifier\n+header extends java\/lang\/Enum implements java\/nio\/file\/WatchEvent$Modifier flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/file\/ExtendedWatchEventModifier;>;Ljava\/nio\/file\/WatchEvent$Modifier; classAnnotations @Lsun\/Proprietary+Annotation;\n+innerclass innerClass java\/nio\/file\/WatchEvent$Modifier outerClass java\/nio\/file\/WatchEvent innerClassName Modifier flags 609\n+\n+class name com\/sun\/nio\/file\/SensitivityWatchEventModifier\n+header extends java\/lang\/Enum implements java\/nio\/file\/WatchEvent$Modifier flags 4031 deprecated true signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/file\/SensitivityWatchEventModifier;>;Ljava\/nio\/file\/WatchEvent$Modifier; classAnnotations @Lsun\/Proprietary+Annotation; runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"21\")\n+innerclass innerClass java\/nio\/file\/WatchEvent$Modifier outerClass java\/nio\/file\/WatchEvent innerClassName Modifier flags 609\n+\n+class name sun\/misc\/SignalHandler\n+header extends java\/lang\/Object flags 601 classAnnotations @Lsun\/Proprietary+Annotation;\n+\n+class name sun\/reflect\/ReflectionFactory\n+header extends java\/lang\/Object flags 21 classAnnotations @Lsun\/Proprietary+Annotation;\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.unsupported-L.sym.txt","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,295 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name org\/w3c\/dom\/css\/CSS2Properties\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSCharsetRule\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSRule flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSFontFaceRule\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSRule flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSImportRule\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSRule flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSMediaRule\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSRule flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSPageRule\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSRule flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSPrimitiveValue\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSValue flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSRule\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSRuleList\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSStyleDeclaration\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSStyleRule\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSRule flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSStyleSheet\n+header extends java\/lang\/Object implements org\/w3c\/dom\/stylesheets\/StyleSheet flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSUnknownRule\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSRule flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSValue\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/CSSValueList\n+header extends java\/lang\/Object implements org\/w3c\/dom\/css\/CSSValue flags 601\n+\n+class name org\/w3c\/dom\/css\/Counter\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/DOMImplementationCSS\n+header extends java\/lang\/Object implements org\/w3c\/dom\/DOMImplementation flags 601\n+\n+class name org\/w3c\/dom\/css\/DocumentCSS\n+header extends java\/lang\/Object implements org\/w3c\/dom\/stylesheets\/DocumentStyle flags 601\n+\n+class name org\/w3c\/dom\/css\/ElementCSSInlineStyle\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/RGBColor\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/Rect\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/css\/ViewCSS\n+header extends java\/lang\/Object implements org\/w3c\/dom\/views\/AbstractView flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLAnchorElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLAppletElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLAreaElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLBRElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLBaseElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLBaseFontElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLBodyElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLButtonElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLCollection\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLDListElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLDOMImplementation\n+header extends java\/lang\/Object implements org\/w3c\/dom\/DOMImplementation flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLDirectoryElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLDivElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLDocument\n+header extends java\/lang\/Object implements org\/w3c\/dom\/Document flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/Element flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLFieldSetElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLFontElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLFormElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLFrameElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLFrameSetElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLHRElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLHeadElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLHeadingElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLHtmlElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLIFrameElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLImageElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLInputElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLIsIndexElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLLIElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLLabelElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLLegendElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLLinkElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLMapElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLMenuElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLMetaElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLModElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLOListElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLObjectElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLOptGroupElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLOptionElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLParagraphElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLParamElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLPreElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLQuoteElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLScriptElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLSelectElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLStyleElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLTableCaptionElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLTableCellElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLTableColElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLTableElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLTableRowElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLTableSectionElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLTextAreaElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLTitleElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/html\/HTMLUListElement\n+header extends java\/lang\/Object implements org\/w3c\/dom\/html\/HTMLElement flags 601\n+\n+class name org\/w3c\/dom\/stylesheets\/DocumentStyle\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/stylesheets\/LinkStyle\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/stylesheets\/MediaList\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/stylesheets\/StyleSheet\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/stylesheets\/StyleSheetList\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/xpath\/XPathEvaluator\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/xpath\/XPathException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name org\/w3c\/dom\/xpath\/XPathExpression\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/xpath\/XPathNSResolver\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/w3c\/dom\/xpath\/XPathNamespace\n+header extends java\/lang\/Object implements org\/w3c\/dom\/Node flags 601\n+\n+class name org\/w3c\/dom\/xpath\/XPathResult\n+header extends java\/lang\/Object flags 601\n+\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/jdk.xml.dom-L.sym.txt","additions":295,"deletions":0,"binary":false,"changes":295,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-generate platforms 8:9:A:B:C:D:E:F:G:H:I:J:K\n+generate platforms 8:9:A:B:C:D:E:F:G:H:I:J:K:L\n@@ -46,0 +46,1 @@\n+platform version L base K files java.base-L.sym.txt:java.compiler-L.sym.txt:java.datatransfer-L.sym.txt:java.desktop-L.sym.txt:java.instrument-L.sym.txt:java.logging-L.sym.txt:java.management-L.sym.txt:java.management.rmi-L.sym.txt:java.naming-L.sym.txt:java.net.http-L.sym.txt:java.rmi-L.sym.txt:java.scripting-L.sym.txt:java.security.jgss-L.sym.txt:java.security.sasl-L.sym.txt:java.smartcardio-L.sym.txt:java.sql-L.sym.txt:java.sql.rowset-L.sym.txt:java.xml-L.sym.txt:java.xml.crypto-L.sym.txt:jdk.accessibility-L.sym.txt:jdk.attach-L.sym.txt:jdk.compiler-L.sym.txt:jdk.dynalink-L.sym.txt:jdk.httpserver-L.sym.txt:jdk.incubator.concurrent-L.sym.txt:jdk.incubator.vector-L.sym.txt:jdk.jartool-L.sym.txt:jdk.javadoc-L.sym.txt:jdk.jconsole-L.sym.txt:jdk.jdi-L.sym.txt:jdk.jfr-L.sym.txt:jdk.jshell-L.sym.txt:jdk.jsobject-L.sym.txt:jdk.management-L.sym.txt:jdk.net-L.sym.txt:jdk.sctp-L.sym.txt:jdk.security.auth-L.sym.txt:jdk.security.jgss-L.sym.txt:jdk.unsupported-L.sym.txt:jdk.xml.dom-L.sym.txt\n","filename":"src\/jdk.compiler\/share\/data\/symbols\/symbols","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,2 @@\n-    static ParametersMap<XECParameters> namedParams = new ParametersMap<>();\n+    private static final ParametersMap<XECParameters> namedParams =\n+        new ParametersMap<>();\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/XECParameters.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,1 +150,2 @@\n-    static ParametersMap<EdDSAParameters> namedParams = new ParametersMap<>();\n+    private static final ParametersMap<EdDSAParameters> namedParams =\n+        new ParametersMap<>();\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ed\/EdDSAParameters.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    return cp.getNameRefAt(index());\n+    return cp.getNameRefAt(index(), javaCode());\n@@ -46,1 +46,1 @@\n-    return cp.getSignatureRefAt(index());\n+    return cp.getSignatureRefAt(index(), javaCode());\n@@ -50,1 +50,1 @@\n-    return method().getConstants().getFieldRefAt(index());\n+    return method().getConstants().getFieldRefAt(index(), javaCode());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/interpreter\/BytecodeGetPut.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    return cp.getNameRefAt(index());\n+    return cp.getNameRefAt(index(), adjustedInvokeCode());\n@@ -69,1 +69,1 @@\n-    return cp.getSignatureRefAt(index());\n+    return cp.getSignatureRefAt(index(), adjustedInvokeCode());\n@@ -73,1 +73,1 @@\n-    return method().getConstants().getMethodRefAt(index());\n+    return method().getConstants().getMethodRefAt(index(), adjustedInvokeCode());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/interpreter\/BytecodeInvoke.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import sun.jvm.hotspot.interpreter.Bytecodes;\n@@ -255,0 +256,25 @@\n+  \/\/ Translate index, which could be CPCache index or Indy index, to a constant pool index\n+  public int to_cp_index(int index, int code) {\n+    Assert.that(getCache() != null, \"'index' is a rewritten index so this class must have been rewritten\");\n+    switch(code) {\n+      case Bytecodes._invokedynamic:\n+        int poolIndex = getCache().getIndyEntryAt(index).getConstantPoolIndex();\n+        return invokeDynamicNameAndTypeRefIndexAt(poolIndex);\n+      case Bytecodes._getfield:\n+      case Bytecodes._getstatic:\n+      case Bytecodes._putfield:\n+      case Bytecodes._putstatic:\n+        \/\/ TODO: handle resolved field entries with new structure\n+        \/\/ i = ....\n+      case Bytecodes._invokeinterface:\n+      case Bytecodes._invokehandle:\n+      case Bytecodes._invokespecial:\n+      case Bytecodes._invokestatic:\n+      case Bytecodes._invokevirtual:\n+        \/\/ TODO: handle resolved method entries with new structure\n+      default:\n+        \/\/ change byte-ordering and go via cache\n+        return remapInstructionOperandFromCache(index);\n+    }\n+  }\n+\n@@ -266,2 +292,3 @@\n-  public Symbol getNameRefAt(int which) {\n-    return implGetNameRefAt(which, false);\n+  public Symbol getNameRefAt(int which, int code) {\n+    int name_index = getNameRefIndexAt(getNameAndTypeRefIndexAt(which, code));\n+    return getSymbolAt(name_index);\n@@ -270,2 +297,3 @@\n-  public Symbol uncachedGetNameRefAt(int which) {\n-    return implGetNameRefAt(which, true);\n+  public Symbol uncachedGetNameRefAt(int cp_index) {\n+    int name_index = getNameRefIndexAt(uncachedGetNameAndTypeRefIndexAt(cp_index));\n+    return getSymbolAt(name_index);\n@@ -274,2 +302,2 @@\n-  private Symbol implGetNameRefAt(int which, boolean uncached) {\n-    int signatureIndex = getNameRefIndexAt(implNameAndTypeRefIndexAt(which, uncached));\n+  public Symbol getSignatureRefAt(int which, int code) {\n+    int signatureIndex = getSignatureRefIndexAt(getNameAndTypeRefIndexAt(which, code));\n@@ -279,10 +307,2 @@\n-  public Symbol getSignatureRefAt(int which) {\n-    return implGetSignatureRefAt(which, false);\n-  }\n-\n-  public Symbol uncachedGetSignatureRefAt(int which) {\n-    return implGetSignatureRefAt(which, true);\n-  }\n-\n-  private Symbol implGetSignatureRefAt(int which, boolean uncached) {\n-    int signatureIndex = getSignatureRefIndexAt(implNameAndTypeRefIndexAt(which, uncached));\n+  public Symbol uncachedGetSignatureRefAt(int cp_index) {\n+    int signatureIndex = getSignatureRefIndexAt(uncachedGetNameAndTypeRefIndexAt(cp_index));\n@@ -310,18 +330,5 @@\n-  private int implNameAndTypeRefIndexAt(int which, boolean uncached) {\n-    int i = which;\n-    if (!uncached && getCache() != null) {\n-      if (isInvokedynamicIndex(which)) {\n-        \/\/ Invokedynamic index is index into resolved_references\n-        int poolIndex = getCache().getIndyEntryAt(which).getConstantPoolIndex();\n-        poolIndex = invokeDynamicNameAndTypeRefIndexAt(poolIndex);\n-        Assert.that(getTagAt(poolIndex).isNameAndType(), \"\");\n-        return poolIndex;\n-      }\n-      \/\/ change byte-ordering and go via cache\n-      i = remapInstructionOperandFromCache(which);\n-    } else {\n-      if (getTagAt(which).isInvokeDynamic() || getTagAt(which).isDynamicConstant()) {\n-        int poolIndex = invokeDynamicNameAndTypeRefIndexAt(which);\n-        Assert.that(getTagAt(poolIndex).isNameAndType(), \"\");\n-        return poolIndex;\n-      }\n+  public int uncachedGetNameAndTypeRefIndexAt(int cp_index) {\n+    if (getTagAt(cp_index).isInvokeDynamic() || getTagAt(cp_index).isDynamicConstant()) {\n+      int poolIndex = invokeDynamicNameAndTypeRefIndexAt(cp_index);\n+      Assert.that(getTagAt(poolIndex).isNameAndType(), \"\");\n+      return poolIndex;\n@@ -331,1 +338,1 @@\n-    int refIndex = getIntAt(i);\n+    int refIndex = getIntAt(cp_index);\n@@ -335,0 +342,4 @@\n+  public int getNameAndTypeRefIndexAt(int index, int code) {\n+    return uncachedGetNameAndTypeRefIndexAt(to_cp_index(index, code));\n+  }\n+\n@@ -373,1 +384,1 @@\n-  public Method getMethodRefAt(int which) {\n+  public Method getMethodRefAt(int which, int code) {\n@@ -376,2 +387,2 @@\n-    Symbol name = getNameRefAt(which);\n-    Symbol sig  = getSignatureRefAt(which);\n+    Symbol name = getNameRefAt(which, code);\n+    Symbol sig  = getSignatureRefAt(which, code);\n@@ -386,1 +397,1 @@\n-  public Field getFieldRefAt(int which) {\n+  public Field getFieldRefAt(int which, int code) {\n@@ -389,2 +400,2 @@\n-    Symbol name = getNameRefAt(which);\n-    Symbol sig  = getSignatureRefAt(which);\n+    Symbol name = getNameRefAt(which, code);\n+    Symbol sig  = getSignatureRefAt(which, code);\n@@ -394,4 +405,0 @@\n-  public int getNameAndTypeRefIndexAt(int index) {\n-    return implNameAndTypeRefIndexAt(index, false);\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstantPool.java","additions":52,"deletions":45,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -1377,4 +1377,4 @@\n-    case Bytecodes._getstatic:         doField(true,  true,  itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._putstatic:         doField(false, true,  itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._getfield:          doField(true,  false, itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._putfield:          doField(false, false, itr.getIndexU2Cpcache(), itr.bci()); break;\n+    case Bytecodes._getstatic:         doField(true,  true,  itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._putstatic:         doField(false, true,  itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._getfield:          doField(true,  false, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._putfield:          doField(false, false, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n@@ -1383,4 +1383,4 @@\n-    case Bytecodes._invokespecial:     doMethod(false, false, itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._invokestatic:      doMethod(true,  false, itr.getIndexU2Cpcache(), itr.bci()); break;\n-    case Bytecodes._invokedynamic:     doMethod(true,  false, itr.getIndexU4(),        itr.bci()); break;\n-    case Bytecodes._invokeinterface:   doMethod(false,  true, itr.getIndexU2Cpcache(), itr.bci()); break;\n+    case Bytecodes._invokespecial:     doMethod(false, false, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._invokestatic:      doMethod(true,  false, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n+    case Bytecodes._invokedynamic:     doMethod(true,  false, itr.getIndexU4(),        itr.bci(), itr.code()); break;\n+    case Bytecodes._invokeinterface:   doMethod(false,  true, itr.getIndexU2Cpcache(), itr.bci(), itr.code()); break;\n@@ -1691,1 +1691,1 @@\n-  void  doField                             (boolean is_get, boolean is_static, int idx, int bci) {\n+  void  doField                             (boolean is_get, boolean is_static, int idx, int bci, int bc) {\n@@ -1694,1 +1694,1 @@\n-    int nameAndTypeIdx     = cp.getNameAndTypeRefIndexAt(idx);\n+    int nameAndTypeIdx     = cp.getNameAndTypeRefIndexAt(idx, bc);\n@@ -1727,1 +1727,1 @@\n-  void  doMethod                            (boolean is_static, boolean is_interface, int idx, int bci) {\n+  void  doMethod                            (boolean is_static, boolean is_interface, int idx, int bci, int bc) {\n@@ -1730,1 +1730,1 @@\n-    Symbol signature      = cp.getSignatureRefAt(idx);\n+    Symbol signature      = cp.getSignatureRefAt(idx, bc);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/GenerateOopMap.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -32,1 +34,3 @@\n-    static final int VECTOR_ACCESS_OOB_CHECK = Integer.getInteger(\"jdk.incubator.vector.VECTOR_ACCESS_OOB_CHECK\", 2);\n+    @SuppressWarnings(\"removal\")\n+    static final int VECTOR_ACCESS_OOB_CHECK = AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n+            Integer.getInteger(\"jdk.incubator.vector.VECTOR_ACCESS_OOB_CHECK\", 2));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorIntrinsics.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -36,2 +37,2 @@\n-    public final boolean linuxOs = Services.getSavedProperty(\"os.name\", \"\").startsWith(\"Linux\");\n-    public final boolean macOs = Services.getSavedProperty(\"os.name\", \"\").startsWith(\"Mac\");\n+    public final boolean linuxOs = OperatingSystem.isLinux();\n+    public final boolean macOs = OperatingSystem.isMacOS();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/code\/TargetDescription.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,5 +91,2 @@\n-            if (!isFullyInitializedConstantCallSite()) {\n-                if (assumptions == null) {\n-                    return null;\n-                }\n-                assumptions.record(new Assumptions.CallSiteTargetValue(this, readTarget()));\n+            if (isFullyInitializedConstantCallSite()) {\n+                return readTarget();\n@@ -97,1 +94,6 @@\n-            return readTarget();\n+            if (assumptions == null) {\n+                return null;\n+            }\n+            HotSpotObjectConstantImpl result = readTarget();\n+            assumptions.record(new Assumptions.CallSiteTargetValue(this, result));\n+            return result;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotObjectConstantImpl.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.util.Architecture;\n@@ -46,2 +47,0 @@\n-    private final String osArch = getHostArchitectureName();\n-\n@@ -60,1 +59,1 @@\n-        String arch = Services.getSavedProperty(\"os.arch\");\n+        Architecture arch = Architecture.current();\n@@ -62,5 +61,2 @@\n-            case \"x86_64\":\n-                return \"amd64\";\n-\n-            default:\n-                return arch;\n+            case X64: return \"amd64\";\n+            default:  return arch.name().toLowerCase();\n@@ -137,1 +133,1 @@\n-    final int runtimeCallStackSize = getConstant(\"frame::arg_reg_save_area_bytes\", Integer.class, osArch.equals(\"amd64\") ? null : 0);\n+    final int runtimeCallStackSize = getConstant(\"frame::arg_reg_save_area_bytes\", Integer.class, Architecture.isX64() ? null : 0);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -38,1 +39,1 @@\n-    final boolean windowsOs = Services.getSavedProperty(\"os.name\", \"\").startsWith(\"Windows\");\n+    final boolean windowsOs = OperatingSystem.isWindows();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotVMConfig.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -40,1 +41,1 @@\n-    final boolean linuxOs = Services.getSavedProperty(\"os.name\", \"\").startsWith(\"Linux\");\n+    final boolean linuxOs = OperatingSystem.isLinux();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotVMConfig.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n@@ -28,1 +26,0 @@\n-import java.util.Collections;\n@@ -34,1 +31,0 @@\n-import java.util.Properties;\n@@ -42,0 +38,3 @@\n+import jdk.internal.misc.Unsafe;\n+import jdk.internal.util.Architecture;\n+import jdk.internal.util.OperatingSystem;\n@@ -74,1 +73,1 @@\n-     * In a native image, this field is initialized by {@link #initializeSavedProperties(byte[])}.\n+     * Lazily initialized in {@link #getSavedProperties}.\n@@ -90,1 +89,4 @@\n-     * Gets an unmodifiable copy of the system properties saved when {@link System} is initialized.\n+     * Gets an unmodifiable copy of the system properties parsed by {@code arguments.cpp}\n+     * plus {@code java.specification.version}, {@code os.name} and {@code os.arch}.\n+     * The latter two are forced to be the real OS and architecture. That is, values\n+     * for these two properties set on the command line are ignored.\n@@ -94,15 +96,4 @@\n-        if (IS_IN_NATIVE_IMAGE) {\n-            if (savedProperties == null) {\n-                throw new InternalError(\"Saved properties not initialized\");\n-            }\n-        } else {\n-            if (savedProperties == null) {\n-                synchronized (Services.class) {\n-                    if (savedProperties == null) {\n-                        @SuppressWarnings(\"removal\")\n-                        SecurityManager sm = System.getSecurityManager();\n-                        if (sm != null) {\n-                            sm.checkPermission(new JVMCIPermission());\n-                        }\n-                        savedProperties = VM.getSavedProperties();\n-                    }\n+        if (savedProperties == null) {\n+            synchronized (Services.class) {\n+                if (savedProperties == null) {\n+                    savedProperties = initProperties();\n@@ -264,0 +255,31 @@\n+    static String toJavaString(Unsafe unsafe, long cstring) {\n+        if (cstring == 0) {\n+            return null;\n+        }\n+        int len = 0;\n+        for (long p = cstring; unsafe.getByte(p) != 0; p++) {\n+            len++;\n+        }\n+        byte[] buf = new byte[len];\n+        for (int i = 0; i < len; i++) {\n+            buf[i] = unsafe.getByte(cstring + i);\n+        }\n+        return new String(buf, java.nio.charset.StandardCharsets.UTF_8);\n+    }\n+\n+    \/**\n+     * Gets the value of {@code Arguments::systemProperties()} and puts the offsets\n+     * of {@code SystemProperty} fields into {@code offsets}. The values returned in\n+     * {@code offsets} are:\n+     *\n+     * <pre>\n+     *     [ next,  \/\/ SystemProperty::next_offset_in_bytes()\n+     *       key,   \/\/ SystemProperty::key_offset_in_bytes()\n+     *       value  \/\/ PathString::value_offset_in_bytes()\n+     *     ]\n+     * <\/pre>\n+     *\n+     * Ideally this would be done with vmstructs but that code is in {@code jdk.vm.ci.hotspot}.\n+     *\/\n+    private static native long readSystemPropertiesInfo(int[] offsets);\n+\n@@ -265,2 +287,4 @@\n-     * Initializes {@link #savedProperties} from the byte array returned by\n-     * {@code jdk.internal.vm.VMSupport.serializeSavedPropertiesToByteArray()}.\n+     * Parses the native {@code Arguments::systemProperties()} data structure using Unsafe to\n+     * create a properties map. This parsing is safe as argument parsing in completed in\n+     * early VM start before this code can be executed, making {@code Arguments::systemProperties()}\n+     * effectively read-only by now.\n@@ -268,4 +292,29 @@\n-    @VMEntryPoint\n-    private static void initializeSavedProperties(byte[] serializedProperties) throws IOException {\n-        if (!IS_IN_NATIVE_IMAGE) {\n-            throw new InternalError(\"Can only initialize saved properties in JVMCI shared library runtime\");\n+    private static Map<String, String> initProperties() {\n+        int[] offsets = new int[3];\n+        long systemProperties = readSystemPropertiesInfo(offsets);\n+        int nextOffset = offsets[0];\n+        int keyOffset = offsets[1];\n+        int valueOffset = offsets[2];\n+\n+        int count = 0;\n+        Unsafe unsafe = Unsafe.getUnsafe();\n+        for (long prop = systemProperties; prop != 0; prop = unsafe.getLong(prop + nextOffset)) {\n+            if (unsafe.getLong(prop + valueOffset) != 0) {\n+                count++;\n+            } else {\n+                \/\/ Some internal properties (e.g. jdk.boot.class.path.append) can have a null\n+                \/\/ value and should just be ignored. Note that null is different than the empty string.\n+            }\n+        }\n+        Map<String, SystemProperties.Value> props = new HashMap<>(count + 1);\n+        int i = 0;\n+        for (long prop = systemProperties; prop != 0; prop = unsafe.getLong(prop + nextOffset)) {\n+            String key = toJavaString(unsafe, unsafe.getLong(prop + keyOffset));\n+            long valueAddress = unsafe.getLong(prop + valueOffset);\n+            if (valueAddress != 0) {\n+                props.put(key, new SystemProperties.Value(unsafe, valueAddress));\n+                i++;\n+            }\n+        }\n+        if (i != count) {\n+            throw new InternalError(i + \" != \" + count);\n@@ -273,5 +322,40 @@\n-        Properties props = new Properties();\n-        props.load(new ByteArrayInputStream(serializedProperties));\n-        Map<String, String> map = new HashMap<>(props.size());\n-        for (var e : props.entrySet()) {\n-            map.put((String) e.getKey(), (String) e.getValue());\n+        if (!props.containsKey(\"java.specification.version\")) {\n+            SystemProperties.Value v = Objects.requireNonNull(props.get(\"java.vm.specification.version\"));\n+            props.put(\"java.specification.version\", v);\n+        }\n+\n+        SystemProperties res = new SystemProperties(unsafe, sanitizeOSArch(props));\n+        if (\"true\".equals(res.get(\"debug.jvmci.PrintSavedProperties\"))) {\n+            System.out.println(\"[Saved system properties]\");\n+            for (Map.Entry<String, String> e : res.entrySet()) {\n+                System.out.printf(\"%s=%s%n\", e.getKey(), e.getValue());\n+            }\n+        }\n+        return res;\n+    }\n+\n+    \/\/ Force os.name and os.arch to reflect the actual OS and architecture.\n+    \/\/ JVMCI configures itself based on these values and needs to be isolated\n+    \/\/ from apps that set them on the command line.\n+    private static Map<String, SystemProperties.Value> sanitizeOSArch(Map<String, SystemProperties.Value> props) {\n+        props.put(\"os.arch\", new SystemProperties.Value(realArch()));\n+        props.put(\"os.name\", new SystemProperties.Value(realOS()));\n+        return props;\n+    }\n+\n+    private static String realOS() {\n+        OperatingSystem os = OperatingSystem.current();\n+        switch (os) {\n+            case LINUX: return \"Linux\";\n+            case MACOS: return \"Mac OS X\";\n+            case AIX: return \"AIX\";\n+            case WINDOWS: {\n+                String osName = System.getProperty(\"os.name\");\n+                if (osName.startsWith(\"Windows\")) {\n+                    \/\/ Use original value which is often more \"complete\"\n+                    \/\/ E.g. \"Windows Server 2012\"\n+                    return osName;\n+                }\n+                return \"Windows\";\n+            }\n+            default: throw new InternalError(\"missing case for \" + os);\n@@ -279,0 +363,1 @@\n+    }\n@@ -280,1 +365,13 @@\n-        savedProperties = Collections.unmodifiableMap(map);\n+    private static String realArch() {\n+        Architecture arch = Architecture.current();\n+        switch (arch) {\n+            case X64: return \"x86_64\";\n+            case X86: return \"x86\";\n+            case AARCH64: return \"aarch64\";\n+            case RISCV64: return \"riscv64\";\n+            case ARM: return \"arm\";\n+            case S390: return \"s390\";\n+            case PPC64: return \"ppc64\";\n+            case OTHER: return \"other\";\n+            default: throw new InternalError(\"missing case for \" + arch);\n+        }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/services\/Services.java","additions":131,"deletions":34,"binary":false,"changes":165,"status":"modified"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.vm.ci.services;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+\/**\n+ * Unmodifiable map for storing system properties read from native memory whose values have their\n+ * string representation constructed on first access.\n+ *\/\n+final class SystemProperties implements Map<String, String> {\n+\n+    private final Unsafe unsafe;\n+    private final Map<String, Value> entries;\n+    private Set<Entry<String, String>> entrySet;\n+    private Collection<String> values;\n+\n+    SystemProperties(Unsafe unsafe, Map<String, Value> entries) {\n+        this.unsafe = unsafe;\n+        this.entries = entries;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return entries.size();\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return entries.isEmpty();\n+    }\n+\n+    @Override\n+    public boolean containsKey(Object key) {\n+        return entries.containsKey(key);\n+    }\n+\n+    @Override\n+    public boolean containsValue(Object value) {\n+        for (Value v : entries.values()) {\n+            if (v.getString(unsafe).equals(value)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String get(Object key) {\n+        Value v = entries.get(key);\n+        if (v != null) {\n+            return v.getString(unsafe);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String put(String key, String value) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String remove(Object key) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void putAll(Map<? extends String, ? extends String> m) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Set<String> keySet() {\n+        return entries.keySet();\n+    }\n+\n+    @Override\n+    public Collection<String> values() {\n+        if (values == null) {\n+            values = entries.values().stream().map(v -> v.getString(unsafe)).collect(Collectors.toUnmodifiableList());\n+        }\n+        return values;\n+    }\n+\n+    static class Property implements Map.Entry<String, String> {\n+        private final Unsafe unsafe;\n+        private final String key;\n+        private final Value value;\n+\n+        Property(Unsafe unsafe, Map.Entry<String, Value> e) {\n+            this.unsafe = unsafe;\n+            this.key = e.getKey();\n+            this.value = e.getValue();\n+        }\n+\n+        @Override\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return value.getString(unsafe);\n+        }\n+\n+        @Override\n+        public String setValue(String value) {\n+            throw new UnsupportedOperationException();\n+        }\n+    };\n+\n+    @Override\n+    public Set<Entry<String, String>> entrySet() {\n+        if (entrySet == null) {\n+            entrySet = entries.entrySet().stream().map(e -> new Property(unsafe, e)).collect(Collectors.toUnmodifiableSet());\n+        }\n+        return entrySet;\n+    }\n+\n+    \/**\n+     * Represents a value in {@link SystemProperties}.\n+     *\/\n+    static class Value {\n+        private final long cstring;\n+        private volatile String string;\n+\n+        \/**\n+         * Creates a value whose string representation will be lazily constructed from {@code cstring}.\n+         *\/\n+        Value(Unsafe unsafe, long cstring) {\n+            this.cstring = cstring;\n+        }\n+\n+        \/**\n+         * Creates a value whose string representation is known at construction time.\n+         *\/\n+        Value(String string) {\n+            this.cstring = 0;\n+            this.string = string;\n+        }\n+\n+        String getString(Unsafe unsafe) {\n+            if (string == null) {\n+                \/\/ Racy but it doesn't matter.\n+                string = Services.toJavaString(unsafe, cstring);\n+            }\n+            return string;\n+        }\n+    }\n+}\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/services\/SystemProperties.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -990,1 +990,1 @@\n-        if (toolEnv.isSynthetic((Symbol) e)) {\n+        if (toolEnv.isSynthetic((Symbol) e) && !toolEnv.isUnnamed((Symbol) e)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,0 +177,4 @@\n+    boolean isUnnamed(Symbol sym) {\n+        return (sym.flags() & Flags.UNNAMED_CLASS) != 0;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ToolEnvironment.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,0 @@\n-    \/\/ handle Long.MIN_VALUE as a special case since its absolute value is negative\n@@ -126,3 +125,6 @@\n-        int exp = (amount == Long.MIN_VALUE) ? 6 : (int) (Math.log(Math.abs(amount)) \/ Math.log(1024));\n-        char unitPrefix = \"kMGTPE\".charAt(exp - 1);\n-        return String.format(formatter, amount \/ Math.pow(1024, exp), unitPrefix);\n+        if (amount == Long.MIN_VALUE) {\n+            return \"N\/A\";\n+        }\n+        int exp = (int) (Math.log(Math.abs(amount)) \/ Math.log(1024));\n+        char unit = \"kMGTPE\".charAt(exp - 1);\n+        return String.format(formatter, amount \/ Math.pow(1024, exp), unit);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Utils.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-            return createPercentile(field, 0.95);\n+            return createPercentile(field, 0.90);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/Function.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        list.add(\"[--width <integer>\");\n+        list.add(\"[--width <integer>]\");\n@@ -141,1 +141,1 @@\n-            if (options.size() == 1) {\n+            if (options.size() == 1 && !options.peek().startsWith(\"-\")) {\n@@ -152,2 +152,0 @@\n-            System.out.println(\"count:\" + optionCount);\n-            System.out.println(\"size:\" + options.size());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/View.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -149,1 +149,0 @@\n-    \/\/ handle Long.MIN_VALUE as a special case since its absolute value is negative\n@@ -151,3 +150,6 @@\n-        int exp = (amount == Long.MIN_VALUE) ? 6 : (int) (Math.log(Math.abs(amount)) \/ Math.log(1024));\n-        char unitPrefix = \"kMGTPE\".charAt(exp - 1);\n-        return String.format(formatter, amount \/ Math.pow(1024, exp), unitPrefix);\n+        if (amount == Long.MIN_VALUE) {\n+            return \"N\/A\";\n+        }\n+        int exp = (int) (Math.log(Math.abs(amount)) \/ Math.log(1024));\n+        char unit = \"kMGTPE\".charAt(exp - 1);\n+        return String.format(formatter, amount \/ Math.pow(1024, exp), unit);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/ValueFormatter.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,3 @@\n-  const size_t buffer_size = 256;\n-  BufferNode::Allocator allocator(\"Test Buffer Allocator\", buffer_size);\n-  ASSERT_EQ(buffer_size, allocator.buffer_size());\n+  const size_t buffer_capacity = 256;\n+  BufferNode::Allocator allocator(\"Test Buffer Allocator\", buffer_capacity);\n+  ASSERT_EQ(buffer_capacity, allocator.buffer_capacity());\n@@ -236,2 +236,0 @@\n-const size_t buffer_size = 1024;\n-\n@@ -239,1 +237,2 @@\n-  BufferNode::Allocator allocator(\"Test Allocator\", buffer_size);\n+  const size_t buffer_capacity = 1024;\n+  BufferNode::Allocator allocator(\"Test Allocator\", buffer_capacity);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_ptrQueueBufferAllocator.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+serviceability\/jvmti\/vthread\/FollowReferences\/VThreadStackRefTest.java#default 8309663 linux-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList-zgc.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1494,2 +1494,1 @@\n-  vmTestbase\/gc\/lock\/jniref\/jnireflock01\/TestDescription.java \\\n-  vmTestbase\/gc\/lock\/jvmti\/alloc\/jvmtialloclock01\/TestDescription.java\n+  vmTestbase\/gc\/lock\/jniref\/jnireflock01\/TestDescription.java\n","filename":"test\/hotspot\/jtreg\/TEST.quick-groups","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xcomp -XX:-UseCompressedClassPointers -XX:CompileOnly=TestArrayCopyToFromObject.test TestArrayCopyToFromObject\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xcomp -XX:+UseCompressedClassPointers -XX:CompileOnly=TestArrayCopyToFromObject.test TestArrayCopyToFromObject\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xcomp -XX:-UseCompressedClassPointers -XX:CompileOnly=TestArrayCopyToFromObject::test TestArrayCopyToFromObject\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xcomp -XX:+UseCompressedClassPointers -XX:CompileOnly=TestArrayCopyToFromObject::test TestArrayCopyToFromObject\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestArrayCopyToFromObject.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +31,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCMoveHasTopInput.vMeth TestCMoveHasTopInput\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCMoveHasTopInput::vMeth TestCMoveHasTopInput\n@@ -59,1 +60,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCMoveHasTopInput.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +31,2 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCondAddDeadBranch TestCondAddDeadBranch\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCondAddDeadBranch\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCondAddDeadBranch::* TestCondAddDeadBranch\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCondAddDeadBranch::*\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCondAddDeadBranch.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileOnly=::test\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp -XX:CompileOnly=*TestMatcherLargeOffset::test\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMatcherLargeOffset.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- *                   -Xcomp -XX:CompileOnly=TestModDivTopInput -XX:-TieredCompilation -XX:StressSeed=87628618 TestModDivTopInput\n+ *                   -Xcomp -XX:CompileOnly=TestModDivTopInput::* -XX:-TieredCompilation -XX:StressSeed=87628618 TestModDivTopInput\n@@ -31,1 +32,1 @@\n- *                   -Xcomp -XX:CompileOnly=TestModDivTopInput -XX:-TieredCompilation TestModDivTopInput\n+ *                   -Xcomp -XX:CompileOnly=TestModDivTopInput::* -XX:-TieredCompilation TestModDivTopInput\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestModDivTopInput.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +34,2 @@\n- *                   -XX:CompileOnly=compiler\/c2\/TestSqrt\n- *                   -XX:CompileOnly=java\/lang\/Math\n+ *                   -XX:CompileOnly=compiler.c2.TestSqrt::*\n+ *                   -XX:CompileOnly=java.lang.Math::*\n@@ -54,1 +55,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestSqrt.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @requires vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true & vm.flavor == \"server\"\n+ * @requires vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true & vm.flavor == \"server\" & vm.compiler2.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestServerVM.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,5 +35,5 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement:: compiler.codegen.TestGCMStorePlacement regularReducible2\n- * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement:: compiler.codegen.TestGCMStorePlacement regularReducible3\n- * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement:: compiler.codegen.TestGCMStorePlacement regularReducible4\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement:: compiler.codegen.TestGCMStorePlacement osrReducible1\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement:: compiler.codegen.TestGCMStorePlacement osrReducible2\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement::* compiler.codegen.TestGCMStorePlacement regularReducible2\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement::* compiler.codegen.TestGCMStorePlacement regularReducible3\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement::* compiler.codegen.TestGCMStorePlacement regularReducible4\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement::* compiler.codegen.TestGCMStorePlacement osrReducible1\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.codegen.TestGCMStorePlacement::* compiler.codegen.TestGCMStorePlacement osrReducible2\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestGCMStorePlacement.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +50,1 @@\n-        new IntrinsicCommand(Scenario.Type.OPTION, ids).test();\n+        new IntrinsicCommand(Scenario.Type.OPTION, ids, true).test();\n@@ -51,1 +52,1 @@\n-        \/\/ even though intrinsic ids are invalid, hotspot returns 0\n+        \/\/ invalid compileCommands, hotspot exits with non-zero retval\n@@ -54,1 +55,1 @@\n-        new IntrinsicCommand(Scenario.Type.OPTION, ids).test();\n+        new IntrinsicCommand(Scenario.Type.OPTION, ids, false).test();\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/ControlIntrinsicTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +28,1 @@\n- * @summary Tests CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_id\n+ * @summary Tests CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_getClass\n@@ -39,2 +40,2 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_id\", \"-version\")\n-                    .shouldHaveExitValue(0)\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+                    .shouldHaveExitValue(1)\n@@ -45,2 +46,2 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*,ccstrlist,ControlIntrinsic,+_id\", \"-version\")\n-                    .shouldHaveExitValue(0)\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n+                    .shouldHaveExitValue(1)\n@@ -53,1 +54,1 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*.ccstrlist,ccstrlist,ControlIntrinsic,+_id\", \"-version\")\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*.ccstrlist,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n@@ -58,1 +59,2 @@\n-        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*.*,ccstrlist,ControlIntrinsic,+_id\", \"-version\")\n+\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*.*,ccstrlist,ControlIntrinsic,+_getClass\", \"-version\")\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/OptionTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +50,1 @@\n-        new IntrinsicCommand(Scenario.Type.DIRECTIVE, ids).test();\n+        new IntrinsicCommand(Scenario.Type.DIRECTIVE, ids, true).test();\n@@ -54,1 +55,1 @@\n-        new IntrinsicCommand(Scenario.Type.DIRECTIVE, ids).test();\n+        new IntrinsicCommand(Scenario.Type.DIRECTIVE, ids, false).test();\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/directives\/ControlIntrinsicTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-            CompileCommand compileCommand = new JcmdCommand(Command.COMPILEONLY,\n+            CompileCommand compileCommand = new JcmdCommand(Command.COMPILEONLY, true,\n@@ -72,1 +72,1 @@\n-            builder.add(new JcmdCommand(Command.NONEXISTENT, null, null,\n+            builder.add(new JcmdCommand(Command.NONEXISTENT, true, null, null,\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/jcmd\/AddAndRemoveTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-                    cmdGen.generateCommand(), methodDescriptor,\n+                    cmdGen.generateCommand(), true, methodDescriptor,\n@@ -72,1 +72,1 @@\n-        builder.add(new JcmdCommand(Command.NONEXISTENT, null, null,\n+        builder.add(new JcmdCommand(Command.NONEXISTENT, true, null, null,\n@@ -75,1 +75,1 @@\n-        builder.add(new JcmdCommand(Command.NONEXISTENT, null, null,\n+        builder.add(new JcmdCommand(Command.NONEXISTENT, true, null, null,\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/jcmd\/ClearDirectivesStackTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +50,1 @@\n-        new IntrinsicCommand(Scenario.Type.JCMD, ids).test();\n+        new IntrinsicCommand(Scenario.Type.JCMD, ids, true).test();\n@@ -51,1 +52,1 @@\n-        \/\/ will get error message but jcmd process still return 0\n+        \/\/ invalid compileCommands, hotspot exits with non-zero retval\n@@ -54,1 +55,1 @@\n-        new IntrinsicCommand(Scenario.Type.JCMD, ids).test();\n+        new IntrinsicCommand(Scenario.Type.JCMD, ids, false).test();\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/jcmd\/ControlIntrinsicTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-            CompileCommand compileCommand = new CompileCommand(command,\n+            CompileCommand compileCommand = new CompileCommand(command, true,\n@@ -86,1 +86,1 @@\n-        builder.add(new JcmdCommand(Command.NONEXISTENT, null, null,\n+        builder.add(new JcmdCommand(Command.NONEXISTENT, true, null, null,\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/jcmd\/PrintDirectivesTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,1 @@\n+    private final boolean isValid;\n@@ -60,1 +61,1 @@\n-    public IntrinsicCommand(Scenario.Type type, IntrinsicId[] intrinsic_ids) {\n+    public IntrinsicCommand(Scenario.Type type, IntrinsicId[] intrinsic_ids, boolean isValid) {\n@@ -65,0 +66,1 @@\n+        this.isValid = isValid;\n@@ -74,1 +76,1 @@\n-        CompileCommand compileCommand = cmdGen.generateCompileCommand(command,\n+        CompileCommand compileCommand = cmdGen.generateCompileCommand(command, isValid,\n@@ -76,0 +78,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/IntrinsicCommand.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-                cc = cmdGen.generateCompileCommand(cmd, md, null, argument);\n+                cc = cmdGen.generateCompileCommand(cmd, true, md, null, argument);\n@@ -86,1 +86,1 @@\n-                cc = cmdGen.generateCompileCommand(cmd, md, null);\n+                cc = cmdGen.generateCompileCommand(cmd, true, md, null);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/MultiCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        CompileCommand compileCommand = cmdGen.generateCompileCommand(command,\n+        CompileCommand compileCommand = cmdGen.generateCompileCommand(command, true,\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/SingleCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,1 @@\n+                            compileCommand.isValid,\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/AbstractCommandBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-    public CompileCommand generateCompileCommand(Command command,\n+    public CompileCommand generateCompileCommand(Command command, boolean isValid,\n@@ -89,1 +89,1 @@\n-        return type.createCompileCommand(command, md, generateCompiler());\n+        return type.createCompileCommand(command, isValid, md, generateCompiler());\n@@ -92,1 +92,1 @@\n-    public CompileCommand generateCompileCommand(Command command,\n+    public CompileCommand generateCompileCommand(Command command, boolean isValid,\n@@ -97,1 +97,1 @@\n-        return type.createCompileCommand(command, md, generateCompiler(), argument);\n+        return type.createCompileCommand(command, isValid, md, generateCompiler(), argument);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/CommandGenerator.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+    public final boolean isValid;\n+\n@@ -39,0 +41,1 @@\n+                          boolean isValid,\n@@ -43,0 +46,1 @@\n+        this.isValid = isValid;\n@@ -50,0 +54,1 @@\n+                          boolean isValid,\n@@ -55,0 +60,1 @@\n+        this.isValid = isValid;\n@@ -68,0 +74,3 @@\n+        if (!isValid) {\n+            return false;\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/CompileCommand.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-                .map(md -> new CompileCommand(null, md, null, null))\n+                .map(md -> new CompileCommand(null, true, md, null, null))\n@@ -127,1 +127,1 @@\n-                CompileCommand cc = new CompileCommand(Command.QUIET, md,\n+                CompileCommand cc = new CompileCommand(Command.QUIET, true, md,\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/DirectiveBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+                       boolean isValid,\n@@ -36,1 +37,1 @@\n-        super(command, methodDescriptor, compiler, type);\n+        super(command, isValid, methodDescriptor, compiler, type);\n@@ -41,0 +42,1 @@\n+                       boolean isValid,\n@@ -46,1 +48,1 @@\n-        super(command, methodDescriptor, compiler, type, argument);\n+        super(command, isValid, methodDescriptor, compiler, type, argument);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/JcmdCommand.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-            CompileCommand cc = new CompileCommand(Command.QUIET, md,\n+            CompileCommand cc = new CompileCommand(Command.QUIET, true, md,\n@@ -202,1 +202,1 @@\n-                    .map(md -> new JcmdCommand(null, md, null, null,\n+                    .map(md -> new JcmdCommand(null, false, md, null, null,\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/JcmdStateBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,13 +125,7 @@\n-            \/\/ two cases for invalid inputs.\n-            if (mainOutput.getExitValue() == 0) {\n-                if (!isJcmdValid) {\n-                    boolean parse_error_found = false;\n-                    for(OutputAnalyzer out : outputList) {\n-                        if (out.getOutput().contains(\"Parsing of compiler directives failed\")) {\n-                            parse_error_found = true;\n-                            break;\n-                        }\n-                    }\n-                    Asserts.assertTrue(parse_error_found, \"'Parsing of compiler directives failed' missing from output\");\n-                } else {\n-                    mainOutput.shouldContain(\"CompileCommand: An error occurred during parsing\");\n+            Asserts.assertNE(mainOutput.getExitValue(), 0, \"VM should exit with \"\n+                    + \"error for incorrect directives\");\n+            boolean parse_error_found = false;\n+            for (OutputAnalyzer out : outputList) {\n+                if (out.getOutput().contains(\"Parsing of compiler directives failed\")) {\n+                    parse_error_found = true;\n+                    break;\n@@ -139,4 +133,3 @@\n-            } else {\n-                Asserts.assertNE(mainOutput.getExitValue(), 0, \"VM should exit with \"\n-                        + \"error for incorrect directives\");\n-                mainOutput.shouldContain(\"Parsing of compiler directives failed\");\n+            }\n+            if (!parse_error_found) {\n+                mainOutput.shouldContain(\"CompileCommand: An error occurred during parsing\");\n@@ -191,1 +184,1 @@\n-            public CompileCommand createCompileCommand(Command command,\n+            public CompileCommand createCompileCommand(Command command, boolean isValid,\n@@ -193,1 +186,1 @@\n-                return new JcmdCommand(command, md, compiler, this,\n+                return new JcmdCommand(command, isValid, md, compiler, this,\n@@ -198,1 +191,1 @@\n-            public CompileCommand createCompileCommand(Command command,\n+            public CompileCommand createCompileCommand(Command command, boolean isValid,\n@@ -200,1 +193,1 @@\n-                return new JcmdCommand(command, md, compiler, this,\n+                return new JcmdCommand(command, isValid, md, compiler, this,\n@@ -207,1 +200,1 @@\n-        public CompileCommand createCompileCommand(Command command,\n+        public CompileCommand createCompileCommand(Command command, boolean isValid,\n@@ -209,1 +202,1 @@\n-            return new CompileCommand(command, md, compiler, this);\n+            return new CompileCommand(command, isValid, md, compiler, this);\n@@ -212,1 +205,1 @@\n-        public CompileCommand createCompileCommand(Command command,\n+        public CompileCommand createCompileCommand(Command command, boolean isValid,\n@@ -214,1 +207,1 @@\n-            return new CompileCommand(command, md, compiler, this, argument);\n+            return new CompileCommand(command, isValid, md, compiler, this, argument);\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/share\/scenario\/Scenario.java","additions":19,"deletions":26,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- *                   -XX:CompileOnly=::valueOf,::byteValue,::shortValue,::testUnsignedByte,::testUnsignedShort\n+ *                   -XX:CompileOnly=*::valueOf,*::byteValue,*::shortValue,*::testUnsignedByte,*::testUnsignedShort\n","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/UnsignedLoads.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2023, Intel Corporation. All rights reserved.\n+ * Intel Math Library (LIBM) Source Code\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8308966\n+ * @summary Add intrinsic for float\/double modulo for x86 AVX2 and AVX512\n+ * @run main compiler.floatingpoint.DmodTest\n+ *\/\n+\n+ package compiler.floatingpoint;\n+\n+ import java.lang.Double;\n+\n+ public class DmodTest {\n+   static double [] op1 = { 1.2345d, 0.0d, -0.0d, 1.0d\/0.0d, -1.0d\/0.0d, 0.0d\/0.0d };\n+   static double [] op2 = { 1.2345d, 0.0d, -0.0d, 1.0d\/0.0d, -1.0d\/0.0d, 0.0d\/0.0d };\n+   static double [][] res = {\n+      {\n+        0.0d,\n+        Double.NaN,\n+        Double.NaN,\n+        1.2345d,\n+        1.2345d,\n+        Double.NaN,\n+      },\n+      {\n+        0.0d,\n+        Double.NaN,\n+        Double.NaN,\n+        0.0d,\n+        0.0d,\n+        Double.NaN,\n+      },\n+      {\n+        -0.0d,\n+        Double.NaN,\n+        Double.NaN,\n+        -0.0d,\n+        -0.0d,\n+        Double.NaN,\n+      },\n+      {\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+      },\n+      {\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+      },\n+      {\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+        Double.NaN,\n+      },\n+   };\n+   public static void main(String[] args) throws Exception {\n+     double f1, f2, f3;\n+     boolean failure = false;\n+     boolean print_failure = false;\n+     for (int i = 0; i < 100_000; i++) {\n+       for (int j = 0; j < op1.length; j++) {\n+         for (int k = 0; k < op2.length; k++) {\n+           f1 = op1[j];\n+           f2 = op2[k];\n+           f3 = f1 % f2;\n+\n+           if (Double.isNaN(res[j][k])) {\n+             if (!Double.isNaN(f3)) {\n+               failure = true;\n+               print_failure = true;\n+             }\n+           } else if (Double.isNaN(f3)) {\n+             failure = true;\n+             print_failure = true;\n+           } else if (f3 != res[j][k]) {\n+             failure = true;\n+             print_failure = true;\n+           }\n+\n+           if (print_failure) {\n+             System.out.println( \"Actual   \" + f1 + \" % \" + f2 + \" = \" + f3);\n+             System.out.println( \"Expected \" + f1 + \" % \" + f2 + \" = \" + res[j][k]);\n+             print_failure = false;\n+           }\n+         }\n+       }\n+     }\n+\n+    if (failure) {\n+      throw new RuntimeException(\"Test Failed\");\n+    } else {\n+      System.out.println(\"Test passed.\");\n+    }\n+ }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/DmodTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2023, Intel Corporation. All rights reserved.\n+ * Intel Math Library (LIBM) Source Code\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8308966\n+ * @summary Add intrinsic for float\/double modulo for x86 AVX2 and AVX512\n+ * @run main compiler.floatingpoint.FmodTest\n+ *\/\n+\n+ package compiler.floatingpoint;\n+\n+ import java.lang.Float;\n+\n+ public class FmodTest {\n+   static float [] op1 = { 1.2345f, 0.0f, -0.0f, 1.0f\/0.0f, -1.0f\/0.0f, 0.0f\/0.0f };\n+   static float [] op2 = { 1.2345f, 0.0f, -0.0f, 1.0f\/0.0f, -1.0f\/0.0f, 0.0f\/0.0f };\n+   static float [][] res = {\n+      {\n+        0.0f,\n+        Float.NaN,\n+        Float.NaN,\n+        1.2345f,\n+        1.2345f,\n+        Float.NaN,\n+      },\n+      {\n+        0.0f,\n+        Float.NaN,\n+        Float.NaN,\n+        0.0f,\n+        0.0f,\n+        Float.NaN,\n+      },\n+      {\n+        -0.0f,\n+        Float.NaN,\n+        Float.NaN,\n+        -0.0f,\n+        -0.0f,\n+        Float.NaN,\n+      },\n+      {\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+      },\n+      {\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+      },\n+      {\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+        Float.NaN,\n+      },\n+   };\n+   public static void main(String[] args) throws Exception {\n+     float f1, f2, f3;\n+     boolean failure = false;\n+     boolean print_failure = false;\n+     for (int i = 0; i < 100_000; i++) {\n+       for (int j = 0; j < op1.length; j++) {\n+         for (int k = 0; k < op2.length; k++) {\n+           f1 = op1[j];\n+           f2 = op2[k];\n+           f3 = f1 % f2;\n+\n+           if (Float.isNaN(res[j][k])) {\n+             if (!Float.isNaN(f3)) {\n+               failure = true;\n+               print_failure = true;\n+             }\n+           } else if (Float.isNaN(f3)) {\n+             failure = true;\n+             print_failure = true;\n+           } else if (f3 != res[j][k]) {\n+             failure = true;\n+             print_failure = true;\n+           }\n+\n+           if (print_failure) {\n+             System.out.println( \"Actual   \" + f1 + \" % \" + f2 + \" = \" + f3);\n+             System.out.println( \"Expected \" + f1 + \" % \" + f2 + \" = \" + res[j][k]);\n+             print_failure = false;\n+           }\n+         }\n+       }\n+     }\n+\n+     if (failure) {\n+       throw new RuntimeException(\"Test Failed\");\n+     } else {\n+       System.out.println(\"Test passed.\");\n+     }\n+   }\n+ }\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/FmodTest.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- *                   -XX:CompileOnly=java\/lang\/Math\n+ *                   -XX:CompileOnly=java.lang.Math::*\n@@ -39,1 +39,1 @@\n- *                   -XX:CompileOnly=java\/lang\/Math\n+ *                   -XX:CompileOnly=java.lang.Math::*\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestFpMinMaxIntrinsics.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/MD5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.MD5::*\n@@ -48,2 +48,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/MD5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.MD5::*\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestMD5Intrinsics.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/MD5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.MD5::*\n@@ -49,2 +49,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/MD5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.MD5::*\n@@ -57,2 +57,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/MD5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.MD5::*\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestMD5MultiBlockIntrinsics.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA::*\n@@ -48,2 +48,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA::*\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA1Intrinsics.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA::*\n@@ -49,2 +49,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA::*\n@@ -57,2 +57,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA::* -XX:-UseSHA\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA1MultiBlockIntrinsics.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA2\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA2::*\n@@ -48,2 +48,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA2\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA2::*\n@@ -57,2 +57,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA2\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA2::*\n@@ -66,2 +66,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA2\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA2::*\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA256Intrinsics.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA2\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA2::*\n@@ -49,2 +49,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA2\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA2::*\n@@ -57,2 +57,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA2 -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA2::* -XX:-UseSHA\n@@ -65,2 +65,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA2\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA2::*\n@@ -75,2 +75,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA::*\n@@ -83,2 +83,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA::* -XX:-UseSHA\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA256MultiBlockIntrinsics.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -49,2 +49,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -58,2 +58,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -67,2 +67,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -76,2 +76,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -85,2 +85,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -94,2 +94,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -103,2 +103,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3Intrinsics.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -50,2 +50,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -58,2 +58,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::* -XX:-UseSHA\n@@ -67,2 +67,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -77,2 +77,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -85,2 +85,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::* -XX:-UseSHA\n@@ -94,2 +94,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -104,2 +104,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -112,2 +112,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::* -XX:-UseSHA\n@@ -121,2 +121,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -131,2 +131,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n@@ -139,2 +139,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::* -XX:-UseSHA\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3MultiBlockIntrinsics.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::*\n@@ -48,2 +48,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::*\n@@ -57,2 +57,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::*\n@@ -66,2 +66,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::*\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA512Intrinsics.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::*\n@@ -49,2 +49,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::*\n@@ -57,2 +57,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5 -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::* -XX:-UseSHA\n@@ -65,2 +65,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::*\n@@ -75,2 +75,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::*\n@@ -83,2 +83,2 @@\n- *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n- *                   -XX:CompileOnly=sun\/security\/provider\/SHA5 -XX:-UseSHA\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA5::* -XX:-UseSHA\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA512MultiBlockIntrinsics.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestJVMCISavedProperties\n+ * @bug 8309390\n+ * @summary Ensures Services.getSavedProperties() includes properties set on\n+ *          the command line as well some specified properties but not\n+ *          properties set programmatically.\n+ * @requires vm.flagless\n+ * @requires vm.jvmci\n+ * @library \/test\/lib\n+ * @run driver TestJVMCISavedProperties\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestJVMCISavedProperties {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length != 0) {\n+            System.setProperty(\"app3.NotPresentInSavedProperties\", \"42\");\n+            System.out.println(\"DONE IN MAIN\");\n+            return;\n+        }\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:+EagerJVMCI\",\n+            \"-XX:+UseJVMCICompiler\",\n+            \"-Djvmci.Compiler=null\",\n+            \"-Ddebug.jvmci.PrintSavedProperties=true\",\n+            \"-Dapp1.propX=true\",\n+            \"-Dapp2.propY=SomeStringValue\",\n+            \"TestJVMCISavedProperties\", \"true\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.stdoutShouldContain(\"debug.jvmci.PrintSavedProperties=true\");\n+        output.stdoutShouldContain(\"jvmci.Compiler=null\");\n+        output.stdoutShouldContain(\"app1.propX=true\");\n+        output.stdoutShouldContain(\"app2.propY=SomeStringValue\");\n+        output.stdoutShouldContain(\"java.specification.version=\" + Runtime.version().feature());\n+        output.stdoutShouldContain(\"os.name=\");\n+        output.stdoutShouldContain(\"os.arch=\");\n+        output.stdoutShouldNotContain(\"NotPresentInSavedProperties\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCISavedProperties.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-            aClass = Class.forName(\"jdk.internal.reflect.NativeMethodAccessorImpl\");\n+            aClass = Class.forName(\"jdk.internal.reflect.DirectMethodHandleAccessor$NativeAccessor\");\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/MethodIsIgnoredBySecurityStackWalkTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-One might also want to restrict the application of certain `@IR` rules depending on the used flags in the test VM. These could be flags defined by the user or by JTreg. In the latter case, the flags must be whitelisted in `JTREG_WHITE_LIST_FLAGS` in [TestFramework](.\/TestFramework.java) (i.e. have no unexpected impact on the IR except if the flag simulates a specific machine setup like `UseAVX={1,2,3}` etc.) to enable an IR verification by the framework. The `@IR` rules thus have an option to restrict their application:\n+One might also want to restrict the application of certain `@IR` rules depending on the used flags in the test VM. These could be flags defined by the user or by JTreg. In the latter case, the flags must be whitelisted in `JTREG_WHITELIST_FLAGS` in [TestFramework](.\/TestFramework.java) (i.e. have no unexpected impact on the IR except if the flag simulates a specific machine setup like `UseAVX={1,2,3}` etc.) to enable an IR verification by the framework. The `@IR` rules thus have an option to restrict their application:\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        TestFramework.check(matcher.find(), \"Did not find IR encoding\");\n+        TestFramework.check(matcher.find(), \"Did not find IR encoding in:\" + System.lineSeparator() + irEncoding);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/IREncodingParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestDeadLongPhi TestDeadLongPhi\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestDeadLongPhi::* TestDeadLongPhi\n@@ -75,1 +76,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/longcountedloops\/TestDeadLongPhi.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -XX:CompileOnly=PeelingZeroTripCount.test PeelingZeroTripCount\n+ * @run main\/othervm -XX:CompileOnly=PeelingZeroTripCount::test PeelingZeroTripCount\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/PeelingZeroTripCount.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -XX:CompileOnly=Test8211698.test Test8211698\n+ * @run main\/othervm -XX:CompileOnly=Test8211698::test Test8211698\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/Test8211698.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestAddPChainWithDifferentBase TestAddPChainWithDifferentBase\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestAddPChainWithDifferentBase::* TestAddPChainWithDifferentBase\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestAddPChainWithDifferentBase.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- *                   -XX:CompileOnly=TestBadlyFormedCountedLoop.main TestBadlyFormedCountedLoop\n+ *                   -XX:CompileOnly=TestBadlyFormedCountedLoop::main TestBadlyFormedCountedLoop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestBadlyFormedCountedLoop.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestBrokenAntiDependenceWithPhi TestBrokenAntiDependenceWithPhi\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestBrokenAntiDependenceWithPhi::* TestBrokenAntiDependenceWithPhi\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestBrokenAntiDependenceWithPhi.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +31,2 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCastFFAtPhi TestCastFFAtPhi\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCastFFAtPhi -XX:+UseCMoveUnconditionally\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCastFFAtPhi::* TestCastFFAtPhi\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCastFFAtPhi::* -XX:+UseCMoveUnconditionally\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCastFFAtPhi.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +29,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestCastIIMakesMainLoopPhiDead TestCastIIMakesMainLoopPhiDead\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestCastIIMakesMainLoopPhiDead::* TestCastIIMakesMainLoopPhiDead\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCastIIMakesMainLoopPhiDead.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestCastIIMakesMainLoopPhiDead2 TestCastIIMakesMainLoopPhiDead2\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestCastIIMakesMainLoopPhiDead2::* TestCastIIMakesMainLoopPhiDead2\n@@ -53,2 +53,0 @@\n-\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCastIIMakesMainLoopPhiDead2.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+super public class TestCountedLoopInsideInfiniteLoop\n+{\n+    public Method \"<init>\":\"()V\"\n+    stack 2 locals 1\n+    {\n+        aload_0;\n+        invokespecial  Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+    static Method test:\"(IIII)V\"\n+    stack 200 locals 4\n+    {\n+        iload      0; \/\/ arg0 == 0\n+        ifeq LEND;\n+\n+    LOOP1: \/\/ counted loop to kick off beautify_loops\n+        iload      1;\n+        ifeq LOOP1;\n+        iload      2;\n+        ifle LOOP1;\n+\n+    LOOP2: \/\/ infinite loop (still Region)\n+        goto LOOP2b;\n+\n+    LOOP2b: \/\/ counted loop (still Region)\n+        iinc       3, -1;\n+        iload      3;\n+        ifgt LOOP2b;\n+\n+        iconst_0;\n+        ifeq LOOP2; \/\/ always true\n+        goto LOOP2b;\n+\n+    LEND:\n+        return;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCountedLoopInsideInfiniteLoop.jasm","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308749\n+ * @compile TestCountedLoopInsideInfiniteLoop.jasm\n+ * @summary Counted Loops inside infinite loops are only detected later,\n+ *          and may still be a Region and not a LoopNode as expected.\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:PerMethodTrapLimit=0\n+ *      -XX:CompileCommand=compileonly,TestCountedLoopInsideInfiniteLoop::test\n+ *      TestCountedLoopInsideInfiniteLoopMain\n+ *\/\n+\n+public class TestCountedLoopInsideInfiniteLoopMain {\n+    public static void main (String[] args) {\n+        TestCountedLoopInsideInfiniteLoop.test(0, 0, 0, 0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCountedLoopInsideInfiniteLoopMain.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestCountedLoopZeroIter TestCountedLoopZeroIter\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestCountedLoopZeroIter::* TestCountedLoopZeroIter\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCountedLoopZeroIter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xmx512m -XX:+UnlockDiagnosticVMOptions -Xcomp -XX:CompileOnly=TestDeadPostLoopBecausePredicate TestDeadPostLoopBecausePredicate\n+ * @run main\/othervm -Xmx512m -XX:+UnlockDiagnosticVMOptions -Xcomp -XX:CompileOnly=TestDeadPostLoopBecausePredicate::* TestDeadPostLoopBecausePredicate\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDeadPostLoopBecausePredicate.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivWithTopDivisor compiler.loopopts.TestDivWithTopDivisor\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.loopopts.TestDivWithTopDivisor::* compiler.loopopts.TestDivWithTopDivisor\n@@ -86,1 +86,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDivWithTopDivisor.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroDominatedBy::test\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.loopopts.TestDivZeroDominatedBy::test\n@@ -33,1 +33,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroDominatedBy::test\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.loopopts.TestDivZeroDominatedBy::test\n@@ -78,1 +78,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDivZeroDominatedBy.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroWithSplitIf::test\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.loopopts.TestDivZeroWithSplitIf::test\n@@ -33,1 +33,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler\/loopopts\/TestDivZeroWithSplitIf::test\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=compiler.loopopts.TestDivZeroWithSplitIf::test\n@@ -69,1 +69,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDivZeroWithSplitIf.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- *      -XX:CompileOnly=compiler\/loopopts\/TestLoopLimitNodeElimination\n+ *      -XX:CompileOnly=compiler.loopopts.TestLoopLimitNodeElimination::*\n@@ -75,1 +75,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopLimitNodeElimination.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +31,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestLostDependencyOnZeroTripGuard -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestLostDependencyOnZeroTripGuard::* -XX:+UnlockDiagnosticVMOptions\n@@ -32,1 +33,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestLostDependencyOnZeroTripGuard -XX:+UnlockDiagnosticVMOptions\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestLostDependencyOnZeroTripGuard::* -XX:+UnlockDiagnosticVMOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLostDependencyOnZeroTripGuard.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestMainBodyExecutedOnce TestMainBodyExecutedOnce\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestMainBodyExecutedOnce::* TestMainBodyExecutedOnce\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMainBodyExecutedOnce.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestMainNeverExecuted TestMainNeverExecuted\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestMainNeverExecuted::* TestMainNeverExecuted\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMainNeverExecuted.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +31,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestStoreSunkInInnerLoop -XX:CompileCommand=quiet -XX:+UseSerialGC -Xmx256m TestStoreSunkInInnerLoop\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestStoreSunkInInnerLoop::* -XX:CompileCommand=quiet -XX:+UseSerialGC -Xmx256m TestStoreSunkInInnerLoop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestStoreSunkInInnerLoop.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -XX:CompileOnly=TestSunkCastOnUnreachablePath -XX:-TieredCompilation -Xbatch TestSunkCastOnUnreachablePath\n+ * @run main\/othervm -XX:CompileOnly=TestSunkCastOnUnreachablePath::* -XX:-TieredCompilation -Xbatch TestSunkCastOnUnreachablePath\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSunkCastOnUnreachablePath.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestSunkNodeDueToBrokenAntiDependency TestSunkNodeDueToBrokenAntiDependency\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestSunkNodeDueToBrokenAntiDependency::* TestSunkNodeDueToBrokenAntiDependency\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSunkNodeDueToBrokenAntiDependency.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +31,1 @@\n- *      -XX:CompileOnly=compiler\/loopopts\/TestUnreachableInnerLoop\n+ *      -XX:CompileOnly=compiler.loopopts.TestUnreachableInnerLoop::*\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestUnreachableInnerLoop.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestZeroTripGuardShared TestZeroTripGuardShared\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestZeroTripGuardShared::* TestZeroTripGuardShared\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestZeroTripGuardShared.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- *                   -XX:CompileOnly=compiler\/loopopts\/superword\/TestNegBaseOffset\n+ *                   -XX:CompileOnly=compiler.loopopts.superword.TestNegBaseOffset::*\n@@ -59,1 +59,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestNegBaseOffset.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +32,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=compiler\/loopopts\/superword\/TestPickLastMemoryState\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.loopopts.superword.TestPickLastMemoryState::*\n@@ -33,1 +34,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=compiler\/loopopts\/superword\/TestPickLastMemoryState\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.loopopts.superword.TestPickLastMemoryState::*\n@@ -35,1 +36,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=compiler\/loopopts\/superword\/TestPickLastMemoryState\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.loopopts.superword.TestPickLastMemoryState::*\n@@ -194,1 +195,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestPickLastMemoryState.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=DeadNodesInOuterLoopAtLoopCloning2 DeadNodesInOuterLoopAtLoopCloning2\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=DeadNodesInOuterLoopAtLoopCloning2::* DeadNodesInOuterLoopAtLoopCloning2\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/DeadNodesInOuterLoopAtLoopCloning2.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestCastIIAfterUnrollingInOuterLoop TestCastIIAfterUnrollingInOuterLoop\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestCastIIAfterUnrollingInOuterLoop::* TestCastIIAfterUnrollingInOuterLoop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestCastIIAfterUnrollingInOuterLoop.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestNondeleteableSafePoint -XX:-TieredCompilation TestNondeleteableSafePoint\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestNondeleteableSafePoint::* -XX:-TieredCompilation TestNondeleteableSafePoint\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestNondeleteableSafePoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestPinnedNodeInInnerLoop TestPinnedNodeInInnerLoop\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestPinnedNodeInInnerLoop::* TestPinnedNodeInInnerLoop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestPinnedNodeInInnerLoop.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestStoreSunkToOuterLoop TestStoreSunkToOuterLoop\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestStoreSunkToOuterLoop::* TestStoreSunkToOuterLoop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestStoreSunkToOuterLoop.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=TestUseFromInnerInOuterUnusedBySfpt TestUseFromInnerInOuterUnusedBySfpt\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestUseFromInnerInOuterUnusedBySfpt::* TestUseFromInnerInOuterUnusedBySfpt\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestUseFromInnerInOuterUnusedBySfpt.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -Xbatch -XX:CompileOnly=UnexpectedNodeInOuterLoopWhenCloning -XX:-TieredCompilation UnexpectedNodeInOuterLoopWhenCloning\n+ * @run main\/othervm -Xcomp -Xbatch -XX:CompileOnly=UnexpectedNodeInOuterLoopWhenCloning::* -XX:-TieredCompilation UnexpectedNodeInOuterLoopWhenCloning\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/UnexpectedNodeInOuterLoopWhenCloning.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -Xbatch -XX:CompileOnly=UnexpectedPinnedNodeInOuterLoop -XX:-TieredCompilation UnexpectedPinnedNodeInOuterLoop\n+ * @run main\/othervm -Xcomp -Xbatch -XX:CompileOnly=UnexpectedPinnedNodeInOuterLoop::* -XX:-TieredCompilation UnexpectedPinnedNodeInOuterLoop\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/UnexpectedPinnedNodeInOuterLoop.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -273,1 +273,1 @@\n-        out.shouldHaveExitValue(0);\n+        out.shouldHaveExitValue(1);\n@@ -288,1 +288,1 @@\n-        out.shouldHaveExitValue(0);\n+        out.shouldHaveExitValue(1);\n","filename":"test\/hotspot\/jtreg\/compiler\/oracle\/CheckCompileCommandOption.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-            oa.shouldHaveExitValue(0)\n+            oa.shouldHaveExitValue(1)\n","filename":"test\/hotspot\/jtreg\/compiler\/oracle\/PrintIdealPhaseTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +94,1 @@\n-        out.shouldHaveExitValue(0);\n+        out.shouldHaveExitValue(1);\n","filename":"test\/hotspot\/jtreg\/compiler\/oracle\/TestInvalidCompileCommand.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=VolatileLoadMemBarsOnlyUses VolatileLoadMemBarsOnlyUses\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=VolatileLoadMemBarsOnlyUses::* VolatileLoadMemBarsOnlyUses\n","filename":"test\/hotspot\/jtreg\/compiler\/regalloc\/VolatileLoadMemBarsOnlyUses.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableBoolean*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableBoolean*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableBoolean*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableBoolean*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableBoolean.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableByte*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableByte*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableByte*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableByte*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableByte.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableChar*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableChar*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableChar*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableChar*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableChar.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableDouble*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableDouble*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableDouble*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableDouble*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableDouble.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableFloat*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableFloat*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableFloat*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableFloat*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableFloat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableInt*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableInt*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableInt*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableInt*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableInt.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableLong*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableLong*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableLong*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableLong*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableLong.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/bootclasspath\/othervm -Xcomp -XX:CompileOnly=::testCompile\n+ * @run main\/bootclasspath\/othervm -Xcomp -XX:CompileOnly=*NotDominate::testCompile\n@@ -68,1 +68,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableMemoryBarrier.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- *                   -XX:CompileOnly=compiler.stable.TestStableMismatched::test,::charAt\n+ *                   -XX:CompileOnly=compiler.stable.TestStableMismatched::test,*::charAt\n@@ -33,1 +33,1 @@\n- *                   -XX:CompileOnly=compiler.stable.TestStableMismatched::test,::charAt\n+ *                   -XX:CompileOnly=compiler.stable.TestStableMismatched::test,*::charAt\n@@ -53,1 +53,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableMismatched.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableObject*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableObject*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableObject*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableObject*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableObject.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableShort*::get*\n@@ -38,1 +38,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableShort*::get*\n@@ -44,1 +44,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableShort*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4\n+ *                                 -XX:CompileOnly=*TestStableShort*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableShort.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- *                                 -XX:CompileOnly=::get,::get1\n+ *                                 -XX:CompileOnly=*TestStableUByte*::get*\n@@ -42,1 +42,1 @@\n- *                                 -XX:CompileOnly=::get,::get1\n+ *                                 -XX:CompileOnly=*TestStableUByte*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1\n+ *                                 -XX:CompileOnly=*TestStableUByte*::get*\n@@ -55,1 +55,1 @@\n- *                                 -XX:CompileOnly=::get,::get1\n+ *                                 -XX:CompileOnly=*TestStableUByte*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableUByte.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- *                                 -XX:CompileOnly=::get,::get1\n+ *                                 -XX:CompileOnly=*TestStableUShort*::get*\n@@ -42,1 +42,1 @@\n- *                                 -XX:CompileOnly=::get,::get1\n+ *                                 -XX:CompileOnly=*TestStableUShort*::get*\n@@ -49,1 +49,1 @@\n- *                                 -XX:CompileOnly=::get,::get1\n+ *                                 -XX:CompileOnly=*TestStableUShort*::get*\n@@ -55,1 +55,1 @@\n- *                                 -XX:CompileOnly=::get,::get1\n+ *                                 -XX:CompileOnly=*TestStableUShort*::get*\n","filename":"test\/hotspot\/jtreg\/compiler\/stable\/TestStableUShort.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -165,1 +165,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -326,1 +326,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -477,1 +477,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -633,1 +633,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/GetfieldChains.jcod","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue5.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    version 65:0\n+    version 66:0\n@@ -80,1 +80,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBufferingClasses.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -149,1 +149,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -267,1 +267,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -385,1 +385,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -530,1 +530,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -678,1 +678,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -826,1 +826,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -944,1 +944,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -986,1 +986,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1087,1 +1087,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1138,1 +1138,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1192,1 +1192,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1296,1 +1296,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1403,1 +1403,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1504,1 +1504,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1605,1 +1605,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1709,1 +1709,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1813,1 +1813,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1914,1 +1914,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2015,1 +2015,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2119,1 +2119,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2714,1 +2714,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2808,1 +2808,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2902,1 +2902,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2944,1 +2944,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2989,1 +2989,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3086,1 +3086,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3186,1 +3186,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3283,1 +3283,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3325,1 +3325,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3451,1 +3451,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3555,1 +3555,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3659,1 +3659,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3719,1 +3719,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.jcod","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithfieldC1Classes.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-* @run main\/othervm -Xcomp -XX:CompileOnly=compiler\/vectorization\/TestSmallVectorPopIndex.test -XX:MaxVectorSize=8 compiler.vectorization.TestSmallVectorPopIndex\n+* @run main\/othervm -Xcomp -XX:CompileOnly=compiler.vectorization.TestSmallVectorPopIndex::test -XX:MaxVectorSize=8 compiler.vectorization.TestSmallVectorPopIndex\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestSmallVectorPopIndex.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -395,4 +395,2 @@\n-            if (!waitForDeduplication(dupString3, baseString)) {\n-                if (getValue(dupString3) != getValue(internedString)) {\n-                    throw new RuntimeException(\"String 3 doesn't match either\");\n-                }\n+            if (!waitForDeduplication(dupString3, internedString)) {\n+                throw new RuntimeException(\"Deduplication has not occurred for string 3\");\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTools.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,1 @@\n-        \/\/ problems in CompileCommandFile are treated as warnings\n-        output.shouldHaveExitValue(0);\n+        output.shouldHaveExitValue(1);\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/CompilerConfigFileWarning.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestInterfaceMethodSelection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/methodSelection\/TestInterfaceMethodSelection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestMethodSelection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/methodSelection\/TestMethodSelection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestReflection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/privateConstructors\/TestReflection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestReflection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/privateMethods\/TestReflection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestReflectionHierarchy\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/privateMethods\/TestReflectionHierarchy.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestReflection\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/privateStaticMethods\/TestReflection.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-            .addSuffix( \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:SharedArchiveFile=.\/\" + archiveName,\n+            .addSuffix(\"-XX:SharedArchiveFile=.\/\" + archiveName,\n@@ -51,0 +51,1 @@\n+                output.shouldContain(\"[Ljava.lang.Object;\");\n@@ -56,1 +57,1 @@\n-            .addSuffix( \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:SharedArchiveFile=.\/\" + archiveName,\n+            .addSuffix(\"-XX:SharedArchiveFile=.\/\" + archiveName,\n@@ -61,0 +62,1 @@\n+                output.shouldContain(\"[Ljava.lang.Object;\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/PrintSharedArchiveAndExit.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309808 8309811\n+ * @summary Test the output of the HotSpot BytecodeTracer and ClassPrinter classes.\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI BytecodeTracerTest\n+ *\/\n+\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.Serializable;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.Asserts;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class BytecodeTracerTest {\n+    public static class Linked {\n+        public static void doit(String args[]) {\n+            System.out.println(\"num args = \" + args.length);\n+        }\n+    }\n+\n+    public static class Unlinked implements Serializable {\n+        public String toString() {\n+            return \"Unlinked\" + this.hashCode();\n+        }\n+    }\n+\n+    static String output;\n+    static int testCount = 0;\n+\n+    static String nextCase(String testName) {\n+        ++ testCount;\n+        return \"======================================================================\\nTest case \"\n+            + testCount + \": \" + testName + \"\\n    \";\n+    }\n+\n+    static void logOutput() throws Exception {\n+        String logFileName = \"log-\" + testCount + \".txt\";\n+        System.out.println(\"Output saved in \" + logFileName);\n+        BufferedWriter writer = new BufferedWriter(new FileWriter(logFileName));\n+        writer.write(output);\n+        writer.close();\n+    }\n+\n+    static void printClasses(String testName, String classNamePattern, int flags) throws Exception {\n+        System.out.println(nextCase(testName) + \"printClasses(\\\"\" + classNamePattern + \"\\\", \" + flags + \")\");\n+        output = WhiteBox.getWhiteBox().printClasses(classNamePattern, flags);\n+        logOutput();\n+    }\n+\n+    static void printMethods(String testName, String classNamePattern, String methodPattern, int flags) throws Exception {\n+        System.out.println(nextCase(testName) + \"printMethods(\\\"\" + classNamePattern + \"\\\", \\\"\" + methodPattern + \"\\\", \" + flags + \")\");\n+        output = WhiteBox.getWhiteBox().printMethods(classNamePattern, methodPattern, flags);\n+        logOutput();\n+    }\n+\n+    static void mustMatch(String pattern) {\n+        Pattern p = Pattern.compile(pattern, Pattern.MULTILINE);\n+        Matcher m = p.matcher(output);\n+        boolean found = m.find();\n+        if (!found) {\n+            System.err.println(\"********* output ********\");\n+            System.err.println(output);\n+            System.err.println(\"*************************\");\n+        }\n+        Asserts.assertTrue(found,\n+                           \"Missing pattern: \\\"\" + pattern + \"\\\"\");\n+        System.out.println(\"Found pattern: \" + pattern);\n+        System.out.println(\"          ==>: \" + m.group());\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        Linked.doit(args); \/\/ Force \"Linked\" class to be linked (and rewritten);\n+\n+        \/\/ ======\n+        printClasses(\"invokedynamic in linked class\",\n+                     \"BytecodeTracerTest$Linked\", 0xff);\n+        mustMatch(\"invokedynamic bsm=[0-9]+ [0-9]+ <makeConcatWithConstants[(]I[)]Ljava\/lang\/String;>\");\n+        mustMatch(\"BSM: REF_invokeStatic [0-9]+ <java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants[(]\");\n+\n+        \/\/ ======\n+        if (false) { \/\/ disabled due to JDK-8309811\n+        printMethods(\"invokedynamic in unlinked class\",\n+                     \"BytecodeTracerTest$Unlinked\", \"toString\", 0xff);\n+        mustMatch(\"invokedynamic bsm=[0-9]+ [0-9]+ <makeConcatWithConstants[(]I[)]Ljava\/lang\/String;>\");\n+        mustMatch(\"BSM: REF_invokeStatic [0-9]+ <java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants[(]\");\n+        }\n+    }\n+\n+    public Serializable cast(Unlinked f) {\n+        \/\/ Verifying this method causes the \"Unlinked\" class to be loaded. However\n+        \/\/ the \"Unlinked\" class is never used during the execution of\n+        \/\/ BytecodeTracerTest.main(), so it is not linked by HotSpot.\n+        return f;\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/interpreter\/BytecodeTracerTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -44,1 +44,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/HiddenPoint.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/MultiANewArrayTypeCheck.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullabilityClasses.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-super public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass version 65:0 {\n+super public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass version 66:0 {\n@@ -45,1 +45,1 @@\n-super public final class runtime\/valhalla\/inlinetypes\/MyValue version 65:0 {\n+super public final class runtime\/valhalla\/inlinetypes\/MyValue version 66:0 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClasses.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadClient1.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-    version 65:0\n+    version 66:0\n@@ -109,1 +109,1 @@\n-    version 65:0\n+    version 66:0\n@@ -152,1 +152,1 @@\n-    version 65:0\n+    version 66:0\n@@ -194,1 +194,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTestClasses.jasm","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    version 65:0\n+    version 66:0\n@@ -107,1 +107,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldTestClasses.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -184,1 +184,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -326,1 +326,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -468,1 +468,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCCFETests.jcod","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -194,1 +194,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCICCETests.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -123,1 +123,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -214,1 +214,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -307,1 +307,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -398,1 +398,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -492,1 +492,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/PrimitiveUsers.jcod","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -207,1 +207,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -363,1 +363,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -519,1 +519,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -626,1 +626,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -881,1 +881,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1160,1 +1160,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1474,1 +1474,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1752,1 +1752,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2039,1 +2039,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2500,1 +2500,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/cfpTests.jcod","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -89,1 +89,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -150,1 +150,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -211,1 +211,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -275,1 +275,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -338,1 +338,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -404,1 +404,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -476,1 +476,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -551,1 +551,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -623,1 +623,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -711,1 +711,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -774,1 +774,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ClassesWithInvalidModifiers.jcod","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -302,1 +302,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -562,1 +562,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -821,1 +821,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1082,1 +1082,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1342,1 +1342,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1602,1 +1602,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1862,1 +1862,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2121,1 +2121,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2382,1 +2382,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testSupers\/InlineClassWithBadSupers.jcod","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -265,1 +265,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -366,1 +366,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -457,1 +457,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -547,1 +547,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -739,1 +739,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -830,1 +830,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1054,1 +1054,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1236,1 +1236,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/verifierTests.jcod","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -187,1 +187,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -344,1 +344,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -485,1 +485,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -613,1 +613,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -718,1 +718,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -807,1 +807,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -896,1 +896,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1022,1 +1022,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/withfieldTests\/withfieldTests.jcod","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -255,1 +255,0 @@\n-      String compiler = System.getProperty(\"jvmci.Compiler\");\n@@ -258,1 +257,1 @@\n-          && useJVMCICompiler.getValue().equals(\"true\") && compiler.equals(\"graal\"));\n+          && useJVMCICompiler.getValue().equals(\"true\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+    private static native void testGetThreadState(Thread thread);\n+    private static native void testGetThreadListStackTraces(Thread thread);\n@@ -47,0 +49,2 @@\n+        testGetThreadState(Thread.currentThread());\n+        testGetThreadListStackTraces(Thread.currentThread());\n@@ -62,1 +66,3 @@\n-                virtualThreads.add(factory.newThread(FOO));\n+                Thread vt = factory.newThread(FOO);\n+                vt.setName(\"VT-\" + i);\n+                virtualThreads.add(vt);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/ThreadStateTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+static const jint EXP_VT_STATE = JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_RUNNABLE;\n+static const jint EXP_CT_STATE = JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_WAITING |\n+                                 JVMTI_THREAD_STATE_WAITING_INDEFINITELY;\n+static const jint MAX_FRAME_COUNT = 32;\n@@ -41,1 +45,1 @@\n-MonitorContended(jvmtiEnv* jvmti, JNIEnv* jni_env, jthread thread,\n+MonitorContended(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread,\n@@ -45,0 +49,13 @@\n+static void JNICALL\n+check_thread_state(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jint state, jint exp_state, const char* msg) {\n+  if (state != exp_state) {\n+    const char* tname = get_thread_name(jvmti, jni, thread);\n+\n+    LOG(\"FAILED: %p: %s: thread state: %x expected state: %x\\n\",\n+        (void*)thread, tname, state, exp_state);\n+\n+    deallocate(jvmti, jni, (void*)tname);\n+    jni->FatalError(msg);\n+  }\n+}\n+\n@@ -48,1 +65,1 @@\n-  check_jvmti_status(jni, err, \"event handler: error in JVMTI SetEventNotificationMode for event JVMTI_EVENT_SINGLE_STEP\");\n+  check_jvmti_status(jni, err, \"setSingleSteppingMode: error in JVMTI SetEventNotificationMode for JVMTI_EVENT_SINGLE_STEP\");\n@@ -54,1 +71,28 @@\n-  check_jvmti_status(jni, err, \"event handler: error in JVMTI SetEventNotificationMode for event JVMTI_EVENT_MONITOR_CONTENDED_ENTER\");\n+  check_jvmti_status(jni, err, \"setMonitorContendedMode: error in JVMTI SetEventNotificationMode for JVMTI_EVENT_MONITOR_CONTENDED_ENTER\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ThreadStateTest_testGetThreadState(JNIEnv* jni, jclass klass, jthread vthread) {\n+  jthread cthread = get_carrier_thread(jvmti, jni, vthread);\n+  jint ct_state = get_thread_state(jvmti, jni, cthread);\n+  jint vt_state = get_thread_state(jvmti, jni, vthread);\n+\n+  check_thread_state(jvmti, jni, cthread, ct_state, EXP_CT_STATE,\n+                     \"Failed: unexpected carrier thread state from JVMTI GetThreadState\");\n+  check_thread_state(jvmti, jni, vthread, vt_state, EXP_VT_STATE,\n+                     \"Failed: unexpected virtual thread state from JVMTI GetThreadState\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ThreadStateTest_testGetThreadListStackTraces(JNIEnv* jni, jclass klass, jthread vthread) {\n+  jthread cthread = get_carrier_thread(jvmti, jni, vthread);\n+  jthread threads[2] = { cthread, vthread };\n+  jvmtiStackInfo* stackInfo = NULL;\n+\n+  jvmtiError err = jvmti->GetThreadListStackTraces(2, threads, MAX_FRAME_COUNT, &stackInfo);\n+  check_jvmti_status(jni, err, \"testGetThreadState: error in JVMTI GetThreadListStackTraces\");\n+\n+  check_thread_state(jvmti, jni, cthread, stackInfo[0].state, EXP_CT_STATE,\n+                     \"Failed: unexpected carrier thread state from JVMTI GetThreadListStackTraces\");\n+  check_thread_state(jvmti, jni, vthread, stackInfo[1].state, EXP_VT_STATE,\n+                     \"Failed: unexpected virtual thread state from JVMTI GetThreadListStackTraces\");\n@@ -62,1 +106,1 @@\n-  printf(\"Agent_OnLoad started\\n\");\n+  printf(\"Agent_OnLoad: started\\n\");\n@@ -64,1 +108,1 @@\n-    LOG(\"error in GetEnv\");\n+    LOG(\"Agent_OnLoad: error in GetEnv\");\n@@ -75,1 +119,1 @@\n-    LOG(\"error in JVMTI AddCapabilities: %d\\n\", err);\n+    LOG(\"Agent_OnLoad: error in JVMTI AddCapabilities: %d\\n\", err);\n@@ -85,0 +129,1 @@\n+  printf(\"Agent_OnLoad: finished\\n\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/libThreadStateTest.cpp","additions":51,"deletions":6,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/jvmti\/alloc\/jvmtialloclock01\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key stress randomness\n- *\n- * @summary converted from VM Testbase gc\/lock\/jvmti\/alloc\/jvmtialloclock01.\n- * VM Testbase keywords: [gc, stress, stressopt, jvmti, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm\/native -Xbootclasspath\/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -agentlib:JVMTIAllocLocker gc.lock.LockerTest -lockers jvmtiAlloc -t 1\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/jvmti\/alloc\/jvmtialloclock01\/TestDescription.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -139,1 +139,5 @@\n-    while (1) {\n+    \/* The volatile variable in the loop body is necessary\n+     * to avoid the compiler optimization to elide the loop. *\/\n+    volatile int i = 1;\n+    while (i) {\n+      i += 2;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RunAgentThread\/agentthr001\/agentthr001.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import nsk.share.gc.lock.jvmti.JVMTIAllocLockers;\n@@ -54,2 +53,0 @@\n-                else if (id.equals(\"jvmtiAlloc\"))\n-                        return new JVMTIAllocLockers();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/LockerUtils.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-#include <jni.h>\n-#include <jvmti.h>\n-#include <time.h>\n-#include <stdlib.h>\n-#include \"jni_tools.h\"\n-\n-extern \"C\" {\n-\n-static jvmtiEnv *jvmti = NULL;\n-static jvmtiCapabilities caps;\n-\n-JNIEXPORT jint JNICALL\n-Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n-            jint res;\n-\n-            res = jvm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_0);\n-            if (res != JNI_OK || jvmti == NULL) {\n-                    printf(\"Wrong result of a valid call to GetEnv!\\n\");\n-                    return JNI_ERR;\n-            }\n-            return JNI_OK;\n-}\n-\n-\/*\n- * Class:     nsk_share_gc_lock_jvmti_JVMTIAllocLocker\n- * Method:    jVMTIAllocSection\n- * Signature: (JJ)V\n- *\/\n-JNIEXPORT void JNICALL Java_nsk_share_gc_lock_jvmti_JVMTIAllocLocker_jVMTIAllocSection\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n-        unsigned char *ptr;\n-        time_t current_time, old_time;\n-        jvmtiError err;\n-        old_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - old_time < enterTime) {\n-                err = jvmti->Allocate(1, &ptr);\n-                mssleep((long) sleepTime);\n-                err = jvmti->Deallocate(ptr);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-}\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jvmti\/JVMTIAllocLocker.cpp","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.share.gc.lock.jvmti;\n-\n-import nsk.share.TestBug;\n-import nsk.share.gc.lock.Locker;\n-import nsk.share.gc.lock.CriticalSectionTimedLocker;\n-\n-\/**\n- * Malloc locker tries to hold malloc lock (if there is any)\n- * by calling malloc() and free() in a loop.\n- *\/\n-public class JVMTIAllocLocker extends CriticalSectionTimedLocker {\n-        static {\n-                System.loadLibrary(\"JVMTIAllocLocker\");\n-        }\n-\n-        public JVMTIAllocLocker() {\n-        }\n-\n-        public JVMTIAllocLocker(long enterTime, long sleepTime) {\n-                super(enterTime, sleepTime);\n-                setSleepTime(sleepTime);\n-        }\n-\n-        \/**\n-         * This native method does Allocate() \/ Deallocate() in a loop\n-         * while java field locked is set to true, sleeping\n-         * for sleepTime between Allocate() and Deallocate() and after\n-         * Deallocate().\n-         *\/\n-        private native void jVMTIAllocSection(long enterTime, long sleepTime);\n-\n-        protected void criticalSection(long enterTime, long sleepTime) {\n-                jVMTIAllocSection(enterTime, sleepTime);\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jvmti\/JVMTIAllocLocker.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.share.gc.lock.jvmti;\n-\n-import nsk.share.gc.lock.Lockers;\n-import nsk.share.gc.lock.Locker;\n-\n-public class JVMTIAllocLockers implements Lockers {\n-        public Locker createLocker(Object obj) {\n-                return new JVMTIAllocLocker();\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jvmti\/JVMTIAllocLockers.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -1,26 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"JVMTIAllocLocker.cpp\"\n-#include \"jni_tools.cpp\"\n-#include \"nsk_tools.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jvmti\/libJVMTIAllocLocker.cpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -32,2 +32,0 @@\n-com\/sun\/jdi\/ReferrersTest.java 8285422 generic-all\n-com\/sun\/jdi\/SetLocalWhileThreadInNative.java 8285422 generic-all\n@@ -47,0 +45,2 @@\n+java\/lang\/ScopedValue\/StressStackOverflow.java 8309646 generic-all\n+\n","filename":"test\/jdk\/ProblemList-Virtual.txt","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -670,1 +670,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/ViewportOverlapping.java 8253184,8295813 windows-x64\n@@ -679,0 +678,7 @@\n+# jdk_swing Ubuntu 23.04 specific\n+\n+javax\/swing\/JTree\/8003400\/Test8003400.java 8309734 linux-all\n+javax\/swing\/JTable\/7124218\/SelectEditTableCell.java 8309734 linux-all\n+javax\/swing\/JFileChooser\/JFileChooserSetLocationTest.java 8309734 linux-all\n+javax\/swing\/JComboBox\/TestComboBoxComponentRendering.java 8309734 linux-all\n+\n@@ -704,2 +710,0 @@\n-com\/sun\/jdi\/AfterThreadDeathTest.java                           8232839 linux-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-    StepRequest stepRequest = null;\n@@ -56,1 +55,2 @@\n-    boolean mainIsDead;\n+    volatile boolean mainIsDead = false;\n+    volatile boolean gotExpectedThreadStart = false;\n@@ -71,4 +71,4 @@\n-        if (stepRequest != null) {\n-            erm.deleteEventRequest(stepRequest);\n-            stepRequest = null;\n-            println(\"Deleted stepRequest\");\n+        \/\/ We don't want to attempt the StepRequest.enable() until we recieve\n+        \/\/ the ThreadStartEvent for the \"DestroyJavaVM\" thread. See JDK-8232839.\n+        if (!event.thread().name().equals(\"DestroyJavaVM\")) {\n+            return;\n@@ -76,0 +76,1 @@\n+        gotExpectedThreadStart = true;\n@@ -77,1 +78,3 @@\n-        if (mainIsDead) {\n+        if (!mainIsDead) {\n+            failure(\"FAILED: Got expected ThreadStartEvent before \\\"main\\\" ThreadDeathEvent\");\n+        } else {\n@@ -82,3 +85,3 @@\n-            stepRequest = erm.createStepRequest(mainThread,\n-                                                StepRequest.STEP_LINE,\n-                                                StepRequest.STEP_OVER);\n+            StepRequest stepRequest = erm.createStepRequest(mainThread,\n+                                                            StepRequest.STEP_LINE,\n+                                                            StepRequest.STEP_OVER);\n@@ -149,0 +152,7 @@\n+        if (!gotExpectedThreadStart) {\n+            failure(\"FAILED: never got expected ThreadStartEvent\");\n+        }\n+        if (!mainIsDead) {\n+            failure(\"FAILED: never got ThreadDeathEvent for \\\"main\\\" thread\");\n+        }\n+\n","filename":"test\/jdk\/com\/sun\/jdi\/AfterThreadDeathTest.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -457,0 +457,3 @@\n+            if (name.equals(\"java.lang.reflect.Method\")) {\n+                return;\n+            }\n","filename":"test\/jdk\/com\/sun\/jdi\/ReferrersTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -166,0 +166,1 @@\n+        boolean caughtOFE = false;\n@@ -168,2 +169,6 @@\n-                frame.setValue(lv, vm().mirrorOf(0)); \/\/ triggers deoptimization!\n-                changedLocal = true;\n+                try {\n+                    frame.setValue(lv, vm().mirrorOf(0)); \/\/ triggers deoptimization!\n+                    changedLocal = true;\n+                } catch (OpaqueFrameException e) {\n+                    caughtOFE = true;\n+                }\n@@ -172,1 +177,3 @@\n-        Asserts.assertTrue(changedLocal);\n+        boolean isVirtualThread = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n+        Asserts.assertTrue(caughtOFE == isVirtualThread);\n+        Asserts.assertTrue(changedLocal == !isVirtualThread);\n","filename":"test\/jdk\/com\/sun\/jdi\/SetLocalWhileThreadInNative.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -122,4 +122,7 @@\n-        \/\/ dynamically load loadJvmtiAgent1 twice, should be one warning\n-        test().whenRunning(loadJvmtiAgent1)\n-                .whenRunning(loadJvmtiAgent1)\n-                .stderrShouldContain(JVMTI_AGENT_WARNING, 1);\n+        \/\/ dynamically load loadJvmtiAgent1 twice, should be one warning on platforms\n+        \/\/ that can detect if an agent library was previously loaded\n+        if (!Platform.isAix()) {\n+            test().whenRunning(loadJvmtiAgent1)\n+                    .whenRunning(loadJvmtiAgent1)\n+                    .stderrShouldContain(JVMTI_AGENT_WARNING, 1);\n+        }\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/warnings\/DynamicLoadWarningTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,16 @@\n-import java.awt.*;\n-import java.awt.event.*;\n+import java.awt.Canvas;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Scrollbar;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n@@ -27,0 +41,3 @@\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n@@ -31,1 +48,4 @@\n-import javax.swing.*;\n+\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n@@ -35,1 +55,2 @@\n-import java.io.*;\n+import sun.awt.OSInfo;\n+\n@@ -404,1 +425,1 @@\n-        }catch(Exception exx){\n+        } catch (Exception exx) {\n@@ -411,1 +432,1 @@\n-        if (!(System.getProperty(\"os.name\").toLowerCase().contains(\"os x\"))) {\n+        if (!(OSInfo.getOSType() == OSInfo.OSType.MACOSX)) {\n@@ -413,1 +434,1 @@\n-            System.out.println(\"C&B. color: \"+c+\" compare with \"+AWT_VERIFY_COLOR);\n+            System.out.println(\"C&B. color: \" + c + \" compare with \" + AWT_VERIFY_COLOR);\n@@ -425,2 +446,2 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -457,1 +478,2 @@\n-    private void testComponent(Component component) throws InterruptedException, InvocationTargetException {\n+    private void testComponent(Component component) throws InterruptedException,\n+                                                           InvocationTargetException {\n@@ -461,1 +483,1 @@\n-        }catch(Exception ignorex) {\n+        } catch (Exception ignored) {\n@@ -465,5 +487,3 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                prepareControls();\n-            }\n-        });\n+\n+        SwingUtilities.invokeAndWait(() -> prepareControls());\n+\n@@ -474,4 +494,4 @@\n-        try {\n-            Thread.sleep(500); \/\/ wait for graphic effects on systems like Win7\n-        } catch (InterruptedException ex) {\n-        }\n+\n+        \/\/ wait for graphic effects on systems like Win7\n+        robot.delay(500);\n+\n@@ -482,5 +502,2 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                cleanup();\n-            }\n-        });\n+\n+        SwingUtilities.invokeAndWait(() -> cleanup());\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/OverlappingTestBase.java","additions":43,"deletions":26,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.awt.Rectangle;\n@@ -30,0 +31,1 @@\n+import java.awt.Toolkit;\n@@ -33,0 +35,3 @@\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n@@ -40,1 +45,0 @@\n-import test.java.awt.regtesthelpers.Util;\n@@ -68,0 +72,1 @@\n+    private static Robot robot;\n@@ -84,1 +89,0 @@\n-\n@@ -102,4 +106,3 @@\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    \/\/ prepare test data\n-                    frameClicked = 0;\n+            SwingUtilities.invokeAndWait(() -> {\n+                \/\/ prepare test data\n+                frameClicked = 0;\n@@ -107,1 +110,1 @@\n-                    b.requestFocus();\n+                b.requestFocus();\n@@ -109,2 +112,2 @@\n-                    scrollPane.getHorizontalScrollBar().setUnitIncrement(40);\n-                    scrollPane.getVerticalScrollBar().setUnitIncrement(40);\n+                scrollPane.getHorizontalScrollBar().setUnitIncrement(40);\n+                scrollPane.getVerticalScrollBar().setUnitIncrement(40);\n@@ -112,4 +115,4 @@\n-                    hLoc = scrollPane.getHorizontalScrollBar().getLocationOnScreen();\n-                    hLoc.translate(scrollPane.getHorizontalScrollBar().getWidth() - 3, 3);\n-                    vLoc = scrollPane.getVerticalScrollBar().getLocationOnScreen();\n-                    vLoc.translate(3, scrollPane.getVerticalScrollBar().getHeight() - 3);\n+                hLoc = scrollPane.getHorizontalScrollBar().getLocationOnScreen();\n+                hLoc.translate(scrollPane.getHorizontalScrollBar().getWidth() - 3, 3);\n+                vLoc = scrollPane.getVerticalScrollBar().getLocationOnScreen();\n+                vLoc.translate(3, scrollPane.getVerticalScrollBar().getHeight() - 3);\n@@ -117,2 +120,2 @@\n-                    testLoc = p.getLocationOnScreen();\n-                    testLoc.translate(-3, -3);\n+                testLoc = p.getLocationOnScreen();\n+                testLoc.translate(-3, -3);\n@@ -120,3 +123,2 @@\n-                    resizeLoc = f.getLocationOnScreen();\n-                    resizeLoc.translate(f.getWidth() - 1, f.getHeight() - 1);\n-                }\n+                resizeLoc = f.getLocationOnScreen();\n+                resizeLoc.translate(f.getWidth() - 1, f.getHeight() - 1);\n@@ -128,3 +130,0 @@\n-        \/\/ run robot\n-        Robot robot = Util.createRobot();\n-        robot.setAutoDelay(ROBOT_DELAY);\n@@ -133,3 +132,4 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        Util.waitForIdle(robot);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        captureScreen(\"Img_1\");\n@@ -138,3 +138,4 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        Util.waitForIdle(robot);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        captureScreen(\"Img_2\");\n@@ -144,1 +145,1 @@\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -146,2 +147,3 @@\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        Util.waitForIdle(robot);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        captureScreen(\"Img_3\");\n@@ -150,1 +152,2 @@\n-        return frameClicked == 2;\n+        captureScreen(\"Img_4\");\n+        return (frameClicked == 2);\n@@ -154,1 +157,4 @@\n-    public static void main(String args[]) throws InterruptedException {\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(ROBOT_DELAY);\n+\n@@ -157,0 +163,13 @@\n+        captureScreen(\"Img_5\");\n+    }\n+\n+    private static void captureScreen(String filename) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        try {\n+            ImageIO.write(\n+                    robot.createScreenCapture(new Rectangle(0, 0, screenSize.width, screenSize.height)),\n+                    \"png\",\n+                    new File(filename + \".png\")\n+            );\n+        } catch (IOException ignored) {\n+        }\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/ViewportOverlapping.java","additions":52,"deletions":33,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,3 @@\n-            \"This test checks if the tray icon gets updated when DPI \/ Scale\" +\n-            \" is changed on the fly.\\n\\n\" +\n+            \"This test checks if the tray icon gets updated correctly under 2 scenarios:\\n\\n\" +\n+            \"Case 1: Single Screen - when DPI \/ Scale is changed on the fly.\\n\" +\n+            \"Case 2: Multi Screen - when both screens are set to different scales.\\n\\n\" +\n@@ -64,1 +65,1 @@\n-            \"3. When the scale changes, check the white tray icon,\" +\n+            \"3. For Case 1, when the scale changes, check the white tray icon,\" +\n@@ -67,2 +68,8 @@\n-            \" scale:\\n\" +\n-            \" 100% - 16, 125% - 20, 150% - 24, 175% - 28, 200% - 32.\\n\\n\"+\n+            \" scale.\\n\\n\" +\n+            \"4. For Case 2, a dual monitor setup is required with 'Multiple Display'\" +\n+            \" option under Display settings set to 'Extend the display'.\\n\\n\" +\n+            \"5. Have the monitors set to different scales and toggle the\" +\n+            \" 'Make this my main display' option under Display settings.\\n\\n\" +\n+            \" In both cases, the tray icon should be displayed as a clear image\" +\n+            \" without any distortion with the display number corresponding to the scale.\\n\" +\n+            \" 100% - 16, 125% - 20, 150% - 24, 175% - 28, 200% - 32.\\n\\n\" +\n@@ -82,1 +89,1 @@\n-                \"Test Instructions\", INSTRUCTIONS, 8, 18, 85);\n+                \"Test Instructions\", INSTRUCTIONS, 8, 25, 85);\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconScalingTest.java","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -226,0 +226,15 @@\n+            \/\/ok\n+        }\n+    }\n+\n+    @Test(dataProvider = \"copyModesAndHelpers\")\n+    public void testCopyReadOnlyDest(CopyMode mode, CopyHelper<Object, ValueLayout> helper, String helperDebugString) {\n+        int bytesPerElement = (int)helper.elementLayout.byteSize();\n+        MemorySegment base = srcSegment(SEG_LENGTH_BYTES);\n+        \/\/CopyFrom\n+        Object srcArr = helper.toArray(base);\n+        MemorySegment dstSeg = helper.fromArray(srcArr).asReadOnly();\n+        try {\n+            helper.copyFromArray(srcArr, 0, SEG_LENGTH_BYTES \/ bytesPerElement, dstSeg, 0, ByteOrder.nativeOrder());\n+            fail();\n+        } catch (UnsupportedOperationException ex) {\n","filename":"test\/jdk\/java\/foreign\/TestArrayCopy.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -133,0 +133,5 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    void testBadDerefInSlice() {\n+        A.sliceHandle(PathElement.groupElement(\"b\"), PathElement.dereferenceElement());\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestDereferencePath.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 2%i4\"\n@@ -131,1 +131,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 2%a8\"\n@@ -136,1 +136,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 4%c2\"\n@@ -145,1 +145,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 1%s2\"\n@@ -155,1 +155,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 1%s2\"\n@@ -163,1 +163,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 1%i4\"\n@@ -176,1 +176,1 @@\n-                    \"Layout does not have the right byte order\"\n+                    \"Unsupported layout: I4\"\n@@ -181,1 +181,1 @@\n-                    \"Layout does not have the right byte order\"\n+                    \"Unsupported layout: I4\"\n@@ -186,1 +186,1 @@\n-                    \"Layout does not have the right byte order\"\n+                    \"Unsupported layout: I4\"\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -125,0 +125,6 @@\n+    @Test\n+    public void testByteOffsetHandleRange() {\n+        SequenceLayout seq = MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(JAVA_INT));\n+        seq.byteOffsetHandle(sequenceElement(0, 1));\n+    }\n+\n@@ -128,1 +134,1 @@\n-        seq.byteOffsetHandle(sequenceElement(0, 1)); \/\/ ranges not accepted\n+        seq.byteOffsetHandle(sequenceElement(5, 1)); \/\/ invalid range (starting position is outside the sequence)\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -221,0 +221,2 @@\n+        assertThrows(IllegalArgumentException.class, \/\/ flip back to positive\n+                () -> MemoryLayout.sequenceLayout(0, JAVA_LONG).withElementCount(Long.MAX_VALUE));\n@@ -336,0 +338,8 @@\n+    @Test(dataProvider=\"layoutsAndAlignments\")\n+    public void testArrayElementVarHandleBadAlignment(MemoryLayout layout, long byteAlign) {\n+        if (layout instanceof ValueLayout) {\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                    ((ValueLayout) layout).withByteAlignment(byteAlign * 2).arrayElementVarHandle());\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.MemoryLayout;\n@@ -35,1 +36,0 @@\n-import java.util.function.Function;\n@@ -43,1 +43,1 @@\n-    static class Accessor<T, X, L extends ValueLayout> {\n+    static class Accessor<X, L extends ValueLayout> {\n@@ -45,2 +45,2 @@\n-        interface SegmentGetter<T, X, L> {\n-            X get(T buffer, L layout, long offset);\n+        interface SegmentGetter<X, L> {\n+            X get(MemorySegment segment, L layout, long offset);\n@@ -49,2 +49,2 @@\n-        interface SegmentSetter<T, X, L> {\n-            void set(T buffer, L layout, long offset, X o);\n+        interface SegmentSetter<X, L> {\n+            void set(MemorySegment segment, L layout, long offset, X o);\n@@ -63,3 +63,2 @@\n-        final Function<MemorySegment, T> transform;\n-        final SegmentGetter<T, X, L> segmentGetter;\n-        final SegmentSetter<T, X, L> segmentSetter;\n+        final SegmentGetter<X, L> segmentGetter;\n+        final SegmentSetter<X, L> segmentSetter;\n@@ -69,2 +68,2 @@\n-        Accessor(Function<MemorySegment, T> transform, L layout, X value,\n-                 SegmentGetter<T, X, L> segmentGetter, SegmentSetter<T, X, L> segmentSetter,\n+        Accessor(L layout, X value,\n+                 SegmentGetter<X, L> segmentGetter, SegmentSetter<X, L> segmentSetter,\n@@ -72,1 +71,0 @@\n-            this.transform = transform;\n@@ -85,2 +83,1 @@\n-                T t = transform.apply(segment);\n-                segmentSetter.set(t, layout, 8, value);\n+                segmentSetter.set(segment, layout, 8, value);\n@@ -89,1 +86,1 @@\n-                assertEquals(value, segmentGetter.get(t, layout, 8));\n+                assertEquals(value, segmentGetter.get(segment, layout, 8));\n@@ -97,1 +94,0 @@\n-                T t = transform.apply(segment);\n@@ -100,1 +96,1 @@\n-                    segmentSetter.set(t, alignedLayout, 0, value);\n+                    segmentSetter.set(segment, alignedLayout, 0, value);\n@@ -106,1 +102,1 @@\n-                    segmentGetter.get(t, alignedLayout, 0);\n+                    segmentGetter.get(segment, alignedLayout, 0);\n@@ -114,4 +110,12 @@\n-        static <L extends ValueLayout, X> Accessor<MemorySegment, X, L> ofSegment(L layout, X value,\n-                         SegmentGetter<MemorySegment, X, L> segmentGetter, SegmentSetter<MemorySegment, X, L> segmentSetter,\n-                         BufferGetter<X> bufferGetter, BufferSetter<X> bufferSetter) {\n-            return new Accessor<>(Function.identity(), layout, value, segmentGetter, segmentSetter, bufferGetter, bufferSetter);\n+        X get(MemorySegment segment, long offset) {\n+            return segmentGetter.get(segment, layout, offset);\n+        }\n+\n+        void set(MemorySegment segment, long offset, X value) {\n+            segmentSetter.set(segment, layout, offset, value);\n+        }\n+\n+        static <L extends ValueLayout, X> Accessor<X, L> of(L layout, X value,\n+                                                            SegmentGetter<X, L> segmentGetter, SegmentSetter<X, L> segmentSetter,\n+                                                            BufferGetter<X> bufferGetter, BufferSetter<X> bufferSetter) {\n+            return new Accessor<>(layout, value, segmentGetter, segmentSetter, bufferGetter, bufferSetter);\n@@ -122,1 +126,1 @@\n-    public void testSegmentAccess(String testName, Accessor<?, ?, ?> accessor) {\n+    public void testSegmentAccess(String testName, Accessor<?, ?> accessor) {\n@@ -127,1 +131,1 @@\n-    public void testSegmentAccessHyper(String testName, Accessor<?, ?, ?> accessor) {\n+    public void testSegmentAccessHyper(String testName, Accessor<?, ?> accessor) {\n@@ -155,0 +159,9 @@\n+    @Test(dataProvider = \"segmentAccessors\")\n+    public <X, L extends ValueLayout> void badAccessOverflowInIndexedAccess(String testName, Accessor<X, L> accessor) {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[100]);\n+        if (testName.contains(\"\/index\") && accessor.layout.byteSize() > 1) {\n+            assertThrows(IndexOutOfBoundsException.class, () -> accessor.get(segment, Long.MAX_VALUE));\n+            assertThrows(IndexOutOfBoundsException.class, () -> accessor.set(segment, Long.MAX_VALUE, accessor.value));\n+        }\n+    }\n+\n@@ -161,1 +174,1 @@\n-                {\"byte\", Accessor.ofSegment(ValueLayout.JAVA_BYTE, (byte) 42,\n+                {\"byte\", Accessor.of(ValueLayout.JAVA_BYTE, (byte) 42,\n@@ -165,1 +178,1 @@\n-                {\"boolean\", Accessor.ofSegment(ValueLayout.JAVA_BOOLEAN, false,\n+                {\"boolean\", Accessor.of(ValueLayout.JAVA_BOOLEAN, false,\n@@ -169,1 +182,1 @@\n-                {\"char\", Accessor.ofSegment(ValueLayout.JAVA_CHAR, (char) 42,\n+                {\"char\", Accessor.of(ValueLayout.JAVA_CHAR, (char) 42,\n@@ -173,1 +186,1 @@\n-                {\"short\", Accessor.ofSegment(ValueLayout.JAVA_SHORT, (short) 42,\n+                {\"short\", Accessor.of(ValueLayout.JAVA_SHORT, (short) 42,\n@@ -177,1 +190,1 @@\n-                {\"int\", Accessor.ofSegment(ValueLayout.JAVA_INT, 42,\n+                {\"int\", Accessor.of(ValueLayout.JAVA_INT, 42,\n@@ -181,1 +194,1 @@\n-                {\"float\", Accessor.ofSegment(ValueLayout.JAVA_FLOAT, 42f,\n+                {\"float\", Accessor.of(ValueLayout.JAVA_FLOAT, 42f,\n@@ -185,1 +198,1 @@\n-                {\"long\", Accessor.ofSegment(ValueLayout.JAVA_LONG, 42L,\n+                {\"long\", Accessor.of(ValueLayout.JAVA_LONG, 42L,\n@@ -189,1 +202,1 @@\n-                {\"double\", Accessor.ofSegment(ValueLayout.JAVA_DOUBLE, 42d,\n+                {\"double\", Accessor.of(ValueLayout.JAVA_DOUBLE, 42d,\n@@ -193,1 +206,1 @@\n-                { \"address\", Accessor.ofSegment(ValueLayout.ADDRESS, MemorySegment.ofAddress(42),\n+                { \"address\", Accessor.of(ValueLayout.ADDRESS, MemorySegment.ofAddress(42),\n@@ -211,1 +224,1 @@\n-                {\"byte\/index\", Accessor.ofSegment(ValueLayout.JAVA_BYTE, (byte) 42,\n+                {\"byte\/index\", Accessor.of(ValueLayout.JAVA_BYTE, (byte) 42,\n@@ -215,1 +228,1 @@\n-                {\"boolean\/index\", Accessor.ofSegment(ValueLayout.JAVA_BOOLEAN, true,\n+                {\"boolean\/index\", Accessor.of(ValueLayout.JAVA_BOOLEAN, true,\n@@ -219,1 +232,1 @@\n-                {\"char\/index\", Accessor.ofSegment(ValueLayout.JAVA_CHAR, (char) 42,\n+                {\"char\/index\", Accessor.of(ValueLayout.JAVA_CHAR, (char) 42,\n@@ -223,1 +236,1 @@\n-                {\"short\/index\", Accessor.ofSegment(ValueLayout.JAVA_SHORT, (short) 42,\n+                {\"short\/index\", Accessor.of(ValueLayout.JAVA_SHORT, (short) 42,\n@@ -227,1 +240,1 @@\n-                {\"int\/index\", Accessor.ofSegment(ValueLayout.JAVA_INT, 42,\n+                {\"int\/index\", Accessor.of(ValueLayout.JAVA_INT, 42,\n@@ -231,1 +244,1 @@\n-                {\"float\/index\", Accessor.ofSegment(ValueLayout.JAVA_FLOAT, 42f,\n+                {\"float\/index\", Accessor.of(ValueLayout.JAVA_FLOAT, 42f,\n@@ -235,1 +248,1 @@\n-                {\"long\/index\", Accessor.ofSegment(ValueLayout.JAVA_LONG, 42L,\n+                {\"long\/index\", Accessor.of(ValueLayout.JAVA_LONG, 42L,\n@@ -239,1 +252,1 @@\n-                {\"double\/index\", Accessor.ofSegment(ValueLayout.JAVA_DOUBLE, 42d,\n+                {\"double\/index\", Accessor.of(ValueLayout.JAVA_DOUBLE, 42d,\n@@ -243,1 +256,1 @@\n-                { \"address\/index\", Accessor.ofSegment(ValueLayout.ADDRESS, MemorySegment.ofAddress(42),\n+                { \"address\/index\", Accessor.of(ValueLayout.ADDRESS, MemorySegment.ofAddress(42),\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":55,"deletions":42,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -154,0 +154,5 @@\n+    @Test(dataProvider = \"allocators\", expectedExceptions = IllegalArgumentException.class)\n+    public void testBadAllocationArrayOverflow(SegmentAllocator allocator) {\n+        allocator.allocateArray(ValueLayout.JAVA_LONG,  Long.MAX_VALUE);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Arrays;\n@@ -41,0 +42,1 @@\n+import org.testng.SkipException;\n@@ -78,0 +80,18 @@\n+    @Test(expectedExceptions = UnsupportedOperationException.class, dataProvider = \"segmentKinds\")\n+    public void testReadOnlyCopy(SegmentKind kind1, SegmentKind kind2) {\n+        MemorySegment s1 = kind1.makeSegment(TEST_BYTE_SIZE);\n+        MemorySegment s2 = kind2.makeSegment(TEST_BYTE_SIZE);\n+        \/\/ check failure with read-only dest\n+        MemorySegment.copy(s1, Type.BYTE.layout, 0, s2.asReadOnly(), Type.BYTE.layout, 0, 0);\n+    }\n+\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class, dataProvider = \"types\")\n+    public void testBadOverflow(Type type) {\n+        if (type.layout.byteSize() > 1) {\n+            MemorySegment segment = MemorySegment.ofArray(new byte[100]);\n+            MemorySegment.copy(segment, type.layout, 0, segment, type.layout, 0, Long.MAX_VALUE);\n+        } else {\n+            throw new SkipException(\"Byte layouts do not overflow\");\n+        }\n+    }\n+\n@@ -192,0 +212,7 @@\n+    @DataProvider\n+    static Object[][] types() {\n+        return Arrays.stream(Type.values())\n+                .map(t -> new Object[] { t })\n+                .toArray(Object[][]::new);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -137,0 +137,16 @@\n+    @Test\n+    public void testSliceAlignmentPowerOfTwo() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            MemorySegment segment = arena.allocate(100, 4096);\n+            for (int i = 8 ; i < 4096 ; i++) {\n+                boolean badAlign = Long.bitCount(i) != 1; \/\/ not a power of two\n+                try {\n+                    segment.asSlice(0, 100, i);\n+                    assertFalse(badAlign);\n+                } catch (IllegalArgumentException iae) {\n+                    assertTrue(badAlign);\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSlices.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires (!(os.name == \"Mac OS X\" & os.arch == \"aarch64\") | jdk.foreign.linker != \"FALLBACK\")\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStack.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires (!(os.name == \"Mac OS X\" & os.arch == \"aarch64\") | jdk.foreign.linker != \"FALLBACK\")\n@@ -42,0 +43,1 @@\n+ * @requires (!(os.name == \"Mac OS X\" & os.arch == \"aarch64\") | jdk.foreign.linker != \"FALLBACK\")\n","filename":"test\/jdk\/java\/foreign\/arraystructs\/TestArrayStructs.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,2 +49,0 @@\n-            \"jdk.internal.reflect.NativeMethodAccessorImpl\",\n-            \"jdk.internal.reflect.DelegatingMethodAccessorImpl\",\n","filename":"test\/jdk\/java\/lang\/StackWalker\/MultiThreadStackWalk.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-            \"jdk.internal.reflect.NativeMethodAccessorImpl\",\n-            \"jdk.internal.reflect.DelegatingMethodAccessorImpl\",\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackWalkTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @summary Test that Thread stop\/suspend\/resume\/countStackFrames throw UOE\n+ * @summary Test that Thread stop\/suspend\/resume throw UOE\n@@ -48,2 +48,1 @@\n-                Thread::resume,\n-                Thread::countStackFrames\n+                Thread::resume\n","filename":"test\/jdk\/java\/lang\/Thread\/DegradedMethodsThrowUOE.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8307508\n+ * @enablePreview\n+ * @run junit IndirectVarHandleTest\n+ * @summary Test VarHandle::isAccessModeSupported on indirect VarHandle\n+ *          produced by MethodHandles.filterCoordinates\n+ *\/\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.invoke.VarHandle;\n+import java.util.function.IntUnaryOperator;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class IndirectVarHandleTest {\n+    @Test\n+    public void testIsAccessModeTypeSupported() throws Throwable {\n+        var lookup = MethodHandles.lookup();\n+        var intArrayVh = MethodHandles.arrayElementVarHandle(int[].class);\n+        var addOne = lookup.bind((IntUnaryOperator) a -> a + 1, \"applyAsInt\",\n+                MethodType.methodType(int.class, int.class));\n+        var offsetIntArrayVh = MethodHandles.filterCoordinates(intArrayVh, 1, addOne);\n+\n+        for (var mode : VarHandle.AccessMode.values()) {\n+            assertEquals(intArrayVh.isAccessModeSupported(mode),\n+                    offsetIntArrayVh.isAccessModeSupported(mode), mode.toString());\n+        }\n+\n+        var stringArrayVh = MethodHandles.arrayElementVarHandle(String[].class);\n+        var offsetStringArrayVh = MethodHandles.filterCoordinates(stringArrayVh, 1, addOne);\n+\n+        for (var mode : VarHandle.AccessMode.values()) {\n+            assertEquals(stringArrayVh.isAccessModeSupported(mode),\n+                    offsetStringArrayVh.isAccessModeSupported(mode), mode.toString());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/IndirectVarHandleTest.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -222,1 +222,1 @@\n-                    .withMajorVersion(65)\n+                    .withMajorVersion(66)\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/ValueImpl.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true RepetitiveLambdaSerialization\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/RepetitiveLambdaSerialization.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true ReflectiveLookupTest\n","filename":"test\/jdk\/java\/lang\/invoke\/lookup\/ReflectiveLookupTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n- * @run testng\/othervm -Djdk.reflect.useDirectMethodHandle=true NegativeTest\n- * @run testng\/othervm -Djdk.reflect.useDirectMethodHandle=false NegativeTest\n+ * @run testng NegativeTest\n","filename":"test\/jdk\/java\/lang\/reflect\/Field\/NegativeTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @run junit\/othervm -Djdk.reflect.useDirectMethodHandle=false CallerSensitiveMethodInvoke\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/CallerSensitiveMethodInvoke.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,1 @@\n- * @run main\/othervm -Dsun.reflect.noInflation=true TestMethodReflectValueOf\n- * @run main\/othervm -Dsun.reflect.noInflation=false -Dsun.reflect.inflationThreshold=500 TestMethodReflectValueOf\n+ * @run main\/othervm TestMethodReflectValueOf\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/invoke\/TestMethodReflectValueOf.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm --add-exports java.base\/jdk.internal.reflect=ALL-UNNAMED -Djdk.reflect.useDirectMethodHandle=true -XX:-ShowCodeDetailsInExceptionMessages MethodHandleAccessorsTest\n+ * @run testng\/othervm --add-exports java.base\/jdk.internal.reflect=ALL-UNNAMED -XX:-ShowCodeDetailsInExceptionMessages MethodHandleAccessorsTest\n@@ -32,7 +32,0 @@\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.reflect\n- * @run testng\/othervm --add-exports java.base\/jdk.internal.reflect=ALL-UNNAMED -Djdk.reflect.useDirectMethodHandle=false -XX:-ShowCodeDetailsInExceptionMessages MethodHandleAccessorsTest\n- *\/\n-\n-\n@@ -58,3 +51,0 @@\n-    static final boolean newImpl = Boolean.getBoolean(\"jdk.reflect.useDirectMethodHandle\");\n-\n-\n@@ -497,4 +487,2 @@\n-            new Object[] {\"public_static_I_I\", int.class, null, new Object[]{12, 13}, null,\n-                          newImpl ? wrong_argument_count_no_details : wrong_argument_count},\n-            new Object[] {\"public_I_I\",        int.class, inst, new Object[]{12, 13}, null,\n-                          newImpl ? wrong_argument_count_no_details : wrong_argument_count},\n+            new Object[] {\"public_static_I_I\", int.class, null, new Object[]{12, 13}, null, wrong_argument_count_no_details},\n+            new Object[] {\"public_I_I\",        int.class, inst, new Object[]{12, 13}, null, wrong_argument_count_no_details},\n@@ -504,4 +492,2 @@\n-            new Object[] {\"public_static_I_V\", int.class, null, null, null,\n-                          newImpl ? wrong_argument_count_no_details : null_argument},\n-            new Object[] {\"public_static_I_V\", int.class, null, new Object[]{null}, null,\n-                          newImpl ? null_argument_value_npe : null_argument_value},\n+            new Object[] {\"public_static_I_V\", int.class, null, null, null, wrong_argument_count_no_details},\n+            new Object[] {\"public_static_I_V\", int.class, null, new Object[]{null}, null, null_argument_value_npe},\n@@ -510,2 +496,1 @@\n-            new Object[] {\"public_I_I\", int.class, inst, new Object[]{null}, null,\n-                          newImpl ? null_argument_value_npe : null_argument_value},\n+            new Object[] {\"public_I_I\", int.class, inst, new Object[]{null}, null, null_argument_value_npe},\n@@ -527,6 +512,3 @@\n-                new Object[]{\"public_static_V_L3\", params_L3, null, null, null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n-                new Object[]{\"public_static_V_L4\", params_L4, null, new Object[0], null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n-                new Object[]{\"public_V_L5\", params_L5, inst, null, null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+                new Object[]{\"public_static_V_L3\", params_L3, null, null, null, wrong_argument_count_zero_args},\n+                new Object[]{\"public_static_V_L4\", params_L4, null, new Object[0], null, wrong_argument_count_zero_args},\n+                new Object[]{\"public_V_L5\", params_L5, inst, null, null, wrong_argument_count_zero_args},\n@@ -618,4 +600,2 @@\n-                new Object[]{params_L3, new Object[]{}, null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n-                new Object[]{params_L4, null, null,\n-                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+                new Object[]{params_L3, new Object[]{}, null, wrong_argument_count_zero_args},\n+                new Object[]{params_L4, null, null, wrong_argument_count_zero_args},\n@@ -671,1 +651,0 @@\n-        boolean newImpl = Boolean.getBoolean(\"jdk.reflect.useDirectMethodHandle\");\n@@ -677,4 +656,2 @@\n-                new Object[]{\"s\", wrongInst, \"test\",\n-                        newImpl ? cannot_get_field : cannot_set_field},\n-                new Object[]{\"b\", wrongInst, 0,\n-                        newImpl ? cannot_get_field : cannot_set_field},\n+                new Object[]{\"s\", wrongInst, \"test\", cannot_get_field},\n+                new Object[]{\"b\", wrongInst, 0, cannot_get_field},\n","filename":"test\/jdk\/java\/lang\/reflect\/MethodHandleAccessorsTest.java","additions":13,"deletions":36,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @run testng\/othervm -Dsun.reflect.noInflation=true CustomLoaderTest\n","filename":"test\/jdk\/java\/lang\/reflect\/callerCache\/CustomLoaderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ * @run junit\/othervm -Djava.net.preferIPv4Stack=true HttpURLConnectionExpectContinueTest\n+ * @run junit\/othervm -Djava.net.preferIPv6Addresses=true HttpURLConnectionExpectContinueTest\n@@ -32,0 +34,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -76,1 +79,1 @@\n-        control.serverSocket.bind(new InetSocketAddress(\"127.0.0.1\", 54321));\n+        control.serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n@@ -422,2 +425,6 @@\n-    private HttpURLConnection createConnection() throws IOException {\n-        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+    private HttpURLConnection createConnection() throws Exception {\n+        URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(control.serverSocket.getLocalPort())\n+                .toURL();\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/HttpURLConnectionExpectContinueTest.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n- * @run testng\/othervm -Djava.security.properties=${test.src}\/NeverCache.props\n+ * @run testng\/othervm -Djava.security.properties=${test.src}\/props\/NeverCache.props\n@@ -42,1 +42,19 @@\n- * @run testng\/othervm -Djava.security.properties=${test.src}\/ForeverCache.props\n+ * @run testng\/othervm -Djava.security.properties=${test.src}\/props\/ForeverCache.props\n+ *  -Dtest.cachingDisabled=false AddressesCachingTest\n+ * @run testng\/othervm\n+ *  -Djava.security.properties=${test.src}\/props\/NeverCacheIgnoreMinusStale.props\n+ *  -Dtest.cachingDisabled=true AddressesCachingTest\n+ * @run testng\/othervm\n+ *  -Djava.security.properties=${test.src}\/props\/NeverCacheIgnorePositiveStale.props\n+ *  -Dtest.cachingDisabled=true AddressesCachingTest\n+ * @run testng\/othervm\n+ *  -Djava.security.properties=${test.src}\/props\/NeverCacheIgnoreZeroStale.props\n+ *  -Dtest.cachingDisabled=true AddressesCachingTest\n+ * @run testng\/othervm\n+ *  -Djava.security.properties=${test.src}\/props\/ForeverCacheIgnoreMinusStale.props\n+ *  -Dtest.cachingDisabled=false AddressesCachingTest\n+ * @run testng\/othervm\n+ *  -Djava.security.properties=${test.src}\/props\/ForeverCacheIgnorePositiveStale.props\n+ *  -Dtest.cachingDisabled=false AddressesCachingTest\n+ * @run testng\/othervm\n+ *  -Djava.security.properties=${test.src}\/props\/ForeverCacheIgnoreZeroStale.props\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/AddressesCachingTest.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import impl.SimpleResolverProviderImpl;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+\/*\n+ * @test\n+ * @summary Test that stale InetAddress caching security properties work as\n+ *          expected when a custom resolver is installed.\n+ * @library lib providers\/simple\n+ * @build test.library\/testlib.ResolutionRegistry\n+ *  simple.provider\/impl.SimpleResolverProviderImpl AddressesStaleCachingTest\n+ * @run testng\/othervm -Djava.security.properties=${test.src}\/props\/CacheStale.props AddressesStaleCachingTest\n+ *\/\n+public class AddressesStaleCachingTest {\n+\n+    private static class Lookup {\n+        private final byte[] address;\n+        private final long timestamp;\n+\n+        private Lookup(byte[] address, long timestamp) {\n+            this.address = address;\n+            this.timestamp = timestamp;\n+        }\n+    }\n+\n+    \/**\n+     * Validates successful and unsuccessful lookups when the stale cache is\n+     * enabled.\n+     *\/\n+    @Test\n+    public void testRefresh() throws Exception{\n+        \/\/ The first request is to save the data into the cache\n+        Lookup first = doLookup(false, 0);\n+\n+        Thread.sleep(10000); \/\/ intentionally big delay > x2 stale property\n+        \/\/ The refreshTime is expired, we will do the successful lookup.\n+        Lookup second = doLookup(false, 0);\n+        Assert.assertNotEquals(first.timestamp, second.timestamp,\n+                               \"Two lookups are expected\");\n+\n+        Thread.sleep(10000); \/\/ intentionally big delay > x2 stale property\n+        \/\/ The refreshTime is expired again, we will do the failed lookup.\n+        Lookup third = doLookup(true, 0);\n+        Assert.assertNotEquals(second.timestamp, third.timestamp,\n+                               \"Two lookups are expected\");\n+\n+        \/\/ The stale cache is enabled, so we should get valid\/same data for\n+        \/\/ all requests(even for the failed request).\n+        Assert.assertEquals(first.address, second.address,\n+                            \"Same address is expected\");\n+        Assert.assertEquals(second.address, third.address,\n+                            \"Same address is expected\");\n+    }\n+\n+    \/**\n+     * Validates that only one thread is blocked during \"refresh\", all others\n+     * will continue to use the \"stale\" data.\n+     *\/\n+    @Test\n+    public void testOnlyOneThreadIsBlockedDuringRefresh() throws Exception {\n+        long timeout = System.nanoTime() + TimeUnit.SECONDS.toNanos(12);\n+        doLookup(false, timeout);\n+        Thread.sleep(9000);\n+\n+        CountDownLatch blockServer = new CountDownLatch(1);\n+        SimpleResolverProviderImpl.setBlocker(blockServer);\n+\n+        Thread ts[] = new Thread[10];\n+        CountDownLatch wait9 = new CountDownLatch(ts.length - 1);\n+        CountDownLatch wait10 = new CountDownLatch(ts.length);\n+        CountDownLatch start = new CountDownLatch(ts.length);\n+        for (int i = 0; i < ts.length; i++) {\n+            ts[i] = new Thread(() -> {\n+                start.countDown();\n+                try {\n+                    start.await();\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+                doLookup(true, timeout);\n+                wait9.countDown();\n+                wait10.countDown();\n+            });\n+        }\n+        for (Thread t : ts) {\n+            t.start();\n+        }\n+        if (!wait9.await(10, TimeUnit.SECONDS)) {\n+            blockServer.countDown();\n+            throw new RuntimeException(\"Some threads hang\");\n+        }\n+        blockServer.countDown();\n+        if (!wait10.await(10, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"The last thread hangs\");\n+        }\n+    }\n+\n+    private static Lookup doLookup(boolean error, long timeout) {\n+        SimpleResolverProviderImpl.setUnreachableServer(error);\n+        try {\n+            byte[] firstAddress = InetAddress.getByName(\"javaTest.org\").getAddress();\n+            long firstTimestamp = SimpleResolverProviderImpl.getLastLookupTimestamp();\n+\n+            byte[] secondAddress = InetAddress.getByName(\"javaTest.org\").getAddress();\n+            long secondTimestamp = SimpleResolverProviderImpl.getLastLookupTimestamp();\n+\n+            Assert.assertEquals(firstAddress, secondAddress,\n+                                \"Same address is expected\");\n+            if (timeout == 0 || timeout - System.nanoTime() > 0) {\n+                Assert.assertEquals(firstTimestamp, secondTimestamp,\n+                        \"Only one positive lookup is expected with caching enabled\");\n+            }\n+            return new Lookup(firstAddress, firstTimestamp);\n+        } catch (UnknownHostException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/AddressesStaleCachingTest.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+networkaddress.cache.ttl=7\n+networkaddress.cache.negative.ttl=3\n+networkaddress.cache.stale.ttl=30\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/CacheStale.props","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/ForeverCache.props","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/ForeverCache.props","status":"renamed"},{"patch":"@@ -0,0 +1,3 @@\n+networkaddress.cache.ttl=-1\n+networkaddress.cache.negative.ttl=-1\n+networkaddress.cache.stale.ttl=-1\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/ForeverCacheIgnoreMinusStale.props","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+networkaddress.cache.ttl=-1\n+networkaddress.cache.negative.ttl=-1\n+networkaddress.cache.stale.ttl=10000\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/ForeverCacheIgnorePositiveStale.props","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+networkaddress.cache.ttl=-1\n+networkaddress.cache.negative.ttl=-1\n+networkaddress.cache.stale.ttl=0\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/ForeverCacheIgnoreZeroStale.props","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/NeverCache.props","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/NeverCache.props","status":"renamed"},{"patch":"@@ -0,0 +1,3 @@\n+networkaddress.cache.ttl=0\n+networkaddress.cache.negative.ttl=0\n+networkaddress.cache.stale.ttl=-1\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/NeverCacheIgnoreMinusStale.props","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+networkaddress.cache.ttl=0\n+networkaddress.cache.negative.ttl=0\n+networkaddress.cache.stale.ttl=10000\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/NeverCacheIgnorePositiveStale.props","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+networkaddress.cache.ttl=0\n+networkaddress.cache.negative.ttl=0\n+networkaddress.cache.stale.ttl=0\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/props\/NeverCacheIgnoreZeroStale.props","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.util.concurrent.CountDownLatch;\n@@ -44,0 +45,2 @@\n+    private static volatile boolean unreachableServer;\n+    private static volatile CountDownLatch blocker;\n@@ -54,0 +57,7 @@\n+                if (blocker != null) {\n+                    try {\n+                        blocker.await();\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n@@ -56,0 +66,3 @@\n+                if (unreachableServer) {\n+                    throw new UnknownHostException(\"unreachableServer\");\n+                }\n@@ -62,0 +75,3 @@\n+                if (unreachableServer) {\n+                    throw new UnknownHostException(\"unreachableServer\");\n+                }\n@@ -76,0 +92,8 @@\n+    public static void setUnreachableServer(boolean unreachableServer) {\n+        SimpleResolverProviderImpl.unreachableServer = unreachableServer;\n+    }\n+\n+    public static void setBlocker(CountDownLatch blocker) {\n+        SimpleResolverProviderImpl.blocker = blocker;\n+    }\n+\n","filename":"test\/jdk\/java\/net\/spi\/InetAddressResolverProvider\/providers\/simple\/simple.provider\/impl\/SimpleResolverProviderImpl.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -49,2 +49,0 @@\n-            int[][].class,\n-            Object[].class,\n@@ -53,7 +51,3 @@\n-        if (!type.isArray()) {\n-            \/\/ Test internal name\n-            var internal = type.getName().replace('.', '\/');\n-            assertEquals(type, Class.forName(Util.toBinaryName(internal)));\n-        }\n-        \/\/ Test descriptor\n-        assertEquals(type, Class.forName(Util.toBinaryName(type.descriptorString())));\n+        var cd = type.describeConstable().orElseThrow();\n+        assertEquals(type, Class.forName(Util.toBinaryName(cd)));\n+        assertEquals(type.getName(), Util.toBinaryName(cd));\n@@ -62,1 +56,0 @@\n-\n","filename":"test\/jdk\/jdk\/classfile\/UtilTest.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @bug 8309727\n@@ -31,0 +32,2 @@\n+ * @run main VectorRuns\n+ * @run main\/othervm\/java.security.policy=empty_security.policy VectorRuns\n@@ -71,1 +74,1 @@\n-        int length = a.length & (species.length() - 1);\n+        int length = species.loopBound(a.length);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorRuns.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/\/\n+\/\/ Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\n+\/\/ This policy is used by tests not requiring permissions, to assert that the\n+\/\/ JDK implementation has the correct privileged blocks.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/empty_security.policy","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/ClassnameCharTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/misc\/URLClassPath\/ClassnameCharTest.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/FileLoaderTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/misc\/URLClassPath\/FileLoaderTest.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/JarLoaderTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/misc\/URLClassPath\/JarLoaderTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.JarBuilder;\n+\n+\/*\n+ * @test\n+ * @bug 8308184\n+ * @summary Verify that an application can be launched when the classpath contains large number of\n+ *          jars and the java.protocol.handler.pkgs system property is set\n+ * @library \/test\/lib\/\n+ * @build jdk.test.lib.util.JarBuilder jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run driver LargeClasspathWithPkgPrefix\n+ *\/\n+public class LargeClasspathWithPkgPrefix {\n+\n+    private static final Path CWD = Path.of(\".\");\n+\n+    private static final String JAVA_MAIN_CONTENT = \"\"\"\n+            public class Foo {\n+                public static void main(String[] args) throws Exception {\n+                    if (args.length != 0) {\n+                        System.out.println(\"unexpected args: \" + java.util.Arrays.toString(args));\n+                        System.exit(1);\n+                    }\n+                    System.out.println(\"Running application on Java version: \"\n+                                + System.getProperty(\"java.version\"));\n+                    System.out.println(\"Application launched with java.protocol.handler.pkgs=\"\n+                                + System.getProperty(\"java.protocol.handler.pkgs\"));\n+                    System.out.println(\"Application launched with classpath: \"\n+                                + System.getProperty(\"java.class.path\"));\n+                    System.out.println(\"Hello World\");\n+                }\n+            }\n+            \"\"\";\n+\n+    public static void main(final String[] args) throws Exception {\n+        \/\/ dir to which the application main's .class file will be compiled to\n+        Path classesDir = Files.createTempDirectory(CWD, \"8308184-classes\").toAbsolutePath();\n+        \/\/ dir contains many jars\n+        Path libDir = Files.createTempDirectory(CWD, \"8308184-libs\").toAbsolutePath();\n+        Files.createDirectories(libDir);\n+\n+        \/\/ trivial jar file\n+        Path jarPath = Path.of(libDir.toString(), \"8308184-dummy.jar\");\n+        createJar(jarPath);\n+\n+        \/\/ create multiple such jar files in the lib dir\n+        int numCopies = 750;\n+        long start = System.currentTimeMillis();\n+        for (int i = 1; i <= numCopies; i++) {\n+            Path dest = Path.of(libDir.toString(), \"8308184-dummy-\" + i + \".jar\");\n+            Files.copy(jarPath, dest);\n+        }\n+        long end = System.currentTimeMillis();\n+        System.out.println(\"Created \" + numCopies + \" jars under \" + libDir\n+                + \", took \" + (end - start) + \" milli seconds\");\n+\n+        \/\/ create the application's main java file\n+        Path fooJavaSrcFile = Path.of(classesDir.toString(), \"Foo.java\");\n+        Files.writeString(fooJavaSrcFile, JAVA_MAIN_CONTENT);\n+\n+        \/\/ compile this java file\n+        compile(fooJavaSrcFile, classesDir);\n+\n+        \/\/ Create the classpath string. It is important that the classes directory which contains\n+        \/\/ application's main class, is at the end of the classpath (or too far into the classpath).\n+        \/\/ The initial entries in the classpath should be jar files.\n+        \/\/ constructed classpath is of the form -cp lib\/*:classes\/\n+        \/\/ (the * in lib\/* is parsed\/interpreted by the java launcher and includes all jars in that\n+        \/\/ directory)\n+        String classpath = File.pathSeparator + libDir.toString() + \"\/*\"\n+                + File.pathSeparator + classesDir.toString();\n+        \/\/ launch the application\n+        launchApplication(classpath);\n+        \/\/ test passed successfully, we don't need the lib directory which has too many jars,\n+        \/\/ anymore. we let the dir stay only if the test fails, for debug purpose\n+        libDir.toFile().deleteOnExit();\n+    }\n+\n+    \/\/ creates a trivial jar file\n+    private static void createJar(Path p) throws Exception {\n+        JarBuilder jb = new JarBuilder(p.toString());\n+        jb.addEntry(\"foobar.txt\", \"foobar\".getBytes());\n+        jb.build();\n+        System.out.println(\"Created jar at \" + p);\n+    }\n+\n+    \/\/ compile <javaFile> to <destDir>\n+    private static void compile(Path javaFile, Path destDir) throws Exception {\n+        boolean compiled = CompilerUtils.compile(javaFile, destDir);\n+        if (!compiled) {\n+            \/\/ compilation failure log\/reason would already be available on System.out\/err\n+            throw new AssertionError(\"Compilation failed for \" + javaFile);\n+        }\n+    }\n+\n+    \/\/ java -Djava.protocol.handler.pkgs=foo.bar.some.nonexistent.pkg -cp <classpath> Foo\n+    private static void launchApplication(String classPath) throws Exception {\n+        String java = JDKToolFinder.getJDKTool(\"java\");\n+        ProcessBuilder pb = new ProcessBuilder(java,\n+                \"-Djava.protocol.handler.pkgs=foo.bar.some.nonexistent.pkg\",\n+                \"-cp\", classPath,\n+                \"Foo\");\n+        pb.directory(CWD.toFile());\n+        System.out.println(\"Launching java application: \" + pb.command());\n+        OutputAnalyzer analyzer = ProcessTools.executeProcess(pb);\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"Hello World\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/LargeClasspathWithPkgPrefix.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"","filename":"test\/jdk\/jdk\/internal\/loader\/URLClassPath\/testclasses.jar","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/misc\/URLClassPath\/testclasses.jar","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,6 @@\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.lang.module.ModuleFinder;\n+import java.lang.module.ModuleReader;\n+import java.lang.module.ModuleReference;\n@@ -44,0 +50,24 @@\n+    static final List<String> VM_OPTIONS = getInitialOptions();\n+\n+    \/*\n+     * Read jdk\/internal\/vm\/options resource from the runtime image.\n+     * If present, the runtime image was created with jlink --add-options and\n+     * the java launcher launches the application as if\n+     *   $ java @options <app>\n+     * The VM options listed in the jdk\/internal\/vm\/options resource file\n+     * are passed to the VM.\n+     *\/\n+    static List<String> getInitialOptions() {\n+        ModuleReference mref = ModuleFinder.ofSystem().find(\"java.base\").orElseThrow();\n+        try (ModuleReader reader = mref.open()) {\n+            InputStream in = reader.open(\"jdk\/internal\/vm\/options\").orElse(null);\n+            if (in != null) {\n+                \/\/ support the simplest form for now: whitespace-separated\n+                return List.of(new String(in.readAllBytes()).split(\"\\s\"));\n+            } else {\n+                return List.of();\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n@@ -86,2 +116,1 @@\n-        \/\/ $ java <runtime-arguments> -classpath <cpath> RuntimeArguments <expected>\n-\n+        \/\/ $ java <args> -classpath <cpath> RuntimeArguments <vm_options> <expected>\n@@ -92,1 +121,4 @@\n-            Stream.concat(options, expected.stream())\n+            \/\/ The runtime image may be created with jlink --add-options\n+            \/\/ The initial VM options will be included in the result\n+            \/\/ returned by VM.getRuntimeArguments()\n+            Stream.concat(options, Stream.concat(VM_OPTIONS.stream(), expected.stream()))\n","filename":"test\/jdk\/jdk\/internal\/misc\/VM\/RuntimeArguments.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useDirectMethodHandle=true GetCallerClassTest\n+ * @run main\/othervm -Xbootclasspath\/a:bcp GetCallerClassTest\n@@ -43,19 +43,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useDirectMethodHandle=true -Djdk.reflect.useNativeAccessorOnly=true GetCallerClassTest\n- *\/\n-\n-\/*\n- * @test\n- * @summary Verify NativeMethodAccessorImpl\n- * @modules java.base\/jdk.internal.reflect\n- * @build SetupGetCallerClass boot.GetCallerClass\n- * @run driver SetupGetCallerClass\n- * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useDirectMethodHandle=false -Dsun.reflect.noInflation=false GetCallerClassTest\n- *\/\n-\n-\/*\n- * @test\n- * @summary Verify the old generated MethodAccessor\n- * @modules java.base\/jdk.internal.reflect\n- * @build SetupGetCallerClass boot.GetCallerClass\n- * @run driver SetupGetCallerClass\n- * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useDirectMethodHandle=false -Dsun.reflect.noInflation=true GetCallerClassTest\n+ * @run main\/othervm -Xbootclasspath\/a:bcp -Djdk.reflect.useNativeAccessorOnly=true GetCallerClassTest\n","filename":"test\/jdk\/jdk\/internal\/reflect\/Reflection\/GetCallerClassTest.java","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,5 +35,5 @@\n-* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n-* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n-* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=exclude,Basic.manyArgsDriver Basic\n-* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=exclude,jdk\/internal\/vm\/Continuation.enter Basic\n-* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic -XX:CompileCommand=inline,jdk\/internal\/vm\/Continuation.run Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk.internal.vm.Continuation::*,Basic::* Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk.internal.vm.Continuation::*,Basic::* Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk.internal.vm.Continuation::*,Basic::* -XX:CompileCommand=exclude,Basic.manyArgsDriver Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk.internal.vm.Continuation::*,Basic::* -XX:CompileCommand=exclude,jdk\/internal\/vm\/Continuation.enter Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk.internal.vm.Continuation::*,Basic::* -XX:CompileCommand=inline,jdk\/internal\/vm\/Continuation.run Basic\n@@ -50,2 +50,2 @@\n-* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+VerifyStack -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n-* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+VerifyStack -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+VerifyStack -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk.internal.vm.Continuation::*,Basic::* Basic\n+* @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -XX:+VerifyStack -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk.internal.vm.Continuation::*,Basic::* Basic\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Basic.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-* @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,ClassUnloading ClassUnloading\n+* @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk.internal.vm.Continuation::*,ClassUnloading::* ClassUnloading\n@@ -35,1 +35,1 @@\n-\/\/ @run testng\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Basic Basic\n+\/\/ @run testng\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk.internal.vm.Continuation::*,Basic::* Basic\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/ClassUnloading.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-* @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyContinuations -Xms2g -Xmx2g -XX:+UseG1GC -XX:G1HeapRegionSize=1m -Xss10m -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk\/internal\/vm\/Continuation,HumongousStack HumongousStack 10000\n-* @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyContinuations -Xms2g -Xmx2g -XX:+UseG1GC -XX:G1HeapRegionSize=1m -Xss10m -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk\/internal\/vm\/Continuation,HumongousStack HumongousStack 10000\n+* @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyContinuations -Xms2g -Xmx2g -XX:+UseG1GC -XX:G1HeapRegionSize=1m -Xss10m -Xcomp -XX:TieredStopAtLevel=3 -XX:CompileOnly=jdk.internal.vm.Continuation::*,HumongousStack::* HumongousStack 10000\n+* @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyContinuations -Xms2g -Xmx2g -XX:+UseG1GC -XX:G1HeapRegionSize=1m -Xss10m -Xcomp -XX:-TieredCompilation -XX:CompileOnly=jdk.internal.vm.Continuation::*,HumongousStack::* HumongousStack 10000\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/HumongousStack.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-TieredCompilation -Xcomp -XX:CompileOnly=jdk\/internal\/vm\/Continuation,java\/lang\/LiveFrames LiveFramesDriver\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+TieredCompilation -XX:TieredStopAtLevel=3 -Xcomp -XX:CompileOnly=jdk\/internal\/vm\/Continuation,java\/lang\/LiveFrames LiveFramesDriver\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-TieredCompilation -Xcomp -XX:CompileOnly=jdk.internal.vm.Continuation::*,java.lang.LiveFrames::* LiveFramesDriver\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+TieredCompilation -XX:TieredStopAtLevel=3 -Xcomp -XX:CompileOnly=jdk.internal.vm.Continuation::*,java.lang.LiveFrames::* LiveFramesDriver\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/LiveFramesDriver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:CompileOnly=jdk\/internal\/vm\/Continuation,Scoped Scoped\n+ * @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -Xcomp -XX:CompileOnly=jdk.internal.vm.Continuation::*,*Scoped::* Scoped\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/Scoped.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- *                   -XX:+UseG1GC jdk.jfr.jcmd.TestJcmdView\n+ *                   -XX:+UseG1GC jdk.jfr.tool.TestView\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308474\n+ * @summary Test that calling initSign resets RNG\n+ *\/\n+\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+\n+public class SecureRandomReset {\n+\n+    public static void main(String[] args) throws Exception {\n+        KeyPairGenerator g = KeyPairGenerator.getInstance(\"DSA\");\n+        PrivateKey sk = g.generateKeyPair().getPrivate();\n+        Signature s = Signature.getInstance(\"SHA256withDSA\");\n+\n+        \/\/ Initialize deterministic RNG and sign\n+        s.initSign(sk, deterministic());\n+        byte[] sig1 = s.sign();\n+\n+        \/\/ Re-initialize deterministic RNG and sign\n+        s.initSign(sk, deterministic());\n+        byte[] sig2 = s.sign();\n+\n+        if (!Arrays.equals(sig1,sig2)) {\n+            System.out.println(\"Expected equal signatures\");\n+            throw new RuntimeException(\"initSign not properly resetting RNG\");\n+        }\n+    }\n+\n+    static SecureRandom deterministic() {\n+        return new SecureRandom() {\n+            final Random r = new Random(0);\n+            @Override\n+            public void nextBytes(byte[] bytes) {\n+                r.nextBytes(bytes);\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/provider\/DSA\/SecureRandomReset.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8294985\n+ * @library \/test\/lib\n+ * @summary SSLEngine throws IAE during parsing of X500Principal\n+ * @run main\/othervm TestBadDNForPeerCA\n+ * @run main\/othervm -Djavax.net.debug=all TestBadDNForPeerCA\n+ *\/\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+\n+\n+public class TestBadDNForPeerCA {\n+\n+    private static final String proto = \"TLSv1.3\";\n+\n+    private final SSLContext sslc;\n+\n+    private SSLEngine serverEngine;     \/\/ server Engine\n+    private ByteBuffer serverIn;        \/\/ read side of serverEngine\n+\n+    private ByteBuffer cTOs;            \/\/ \"reliable\" transport client->server\n+\n+    private static final String keyStoreFile =\n+        System.getProperty(\"test.src\", \".\/\")\n+        + \"\/..\/..\/..\/..\/javax\/net\/ssl\/etc\/keystore\";\n+\n+    \/\/ the following ClientHello contains a certificate with an\n+    \/\/ invalid\/unparseable distinguished name\n+    private static final byte[] payload = Base64.getDecoder().decode(\n+        \"FgMDAcsBAAHHAwPbDfeUCIStPzVIfXuGgCu56dSJOJ6xeus1W44frG5tciDEcBfYt\"\n+            + \"\/PN\/6MFCGojEVcmPw21mVyjYInMo0UozIn4NwBiEwITARMDwCzAK8ypwDDMqMAvA\"\n+            + \"J\/MqgCjAJ4AosAkwCjAI8AnAGsAagBnAEDALsAywC3AMcAmCgAFKsApJcDAFMAJw\"\n+            + \"BMAOQA4ADMAMsAFwA\/ABMAOAJ0AnAA9ADwANgAvAP8BAAEcAAUABQEAAAAAAAoAF\"\n+            + \"gAUAB0AFwAYABkAHgEAAQEBAgEDAQQACwACAQAAEQAJAAcCAAQAAAAAABcAAAAjA\"\n+            + \"AAADQAsACoEAwUDBgMIBwgICAQIBQgGCAkICggLBAEFAQYBBAIDAwMBAwICAwIBA\"\n+            + \"gIAKwAFBAMEAwMALQACAQEAMgAsACoEAwUDBgMIBwgICAQIBQgGCAkICggLBAEFA\"\n+            + \"QYBBAIDAwMBAwICAwIBAgIALwBrAGkAHQAAAAARACAAZMUAADkwsiaOwcsWAwAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            + \"AAAAAAtAAAAAAAAAAEAADAAAAA=\");\n+\n+    \/*\n+     * The following is to set up the keystores.\n+     *\/\n+    private static final String passwd = \"passphrase\";\n+\n+    \/*\n+     * Main entry point for this demo.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+\n+        TestBadDNForPeerCA test = new TestBadDNForPeerCA();\n+\n+        try {\n+            test.runTest();\n+            throw new Exception(\n+                \"TEST FAILED:  Didn't generate any exception\");\n+        } catch (SSLHandshakeException she) {\n+            System.out.println(\"TEST PASSED:  Caught expected exception\");\n+        }\n+    }\n+\n+    \/*\n+     * Create an initialized SSLContext to use for this demo.\n+     *\/\n+\n+    public TestBadDNForPeerCA() throws Exception {\n+\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        KeyStore ts = KeyStore.getInstance(\"JKS\");\n+\n+        char[] passphrase = passwd.toCharArray();\n+\n+        ks.load(new FileInputStream(keyStoreFile), passphrase);\n+        ts.load(new FileInputStream(keyStoreFile), passphrase);\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+        kmf.init(ks, passphrase);\n+\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n+        tmf.init(ts);\n+\n+        SSLContext sslCtx = SSLContext.getInstance(proto);\n+\n+        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+\n+        sslc = sslCtx;\n+    }\n+\n+\n+    private void runTest() throws Exception {\n+\n+        createSSLEngines();\n+        createBuffers();\n+\n+        cTOs = ByteBuffer.wrap(payload);\n+\n+        System.out.println(\"injecting client hello\");\n+\n+        for (int i = 0; i < 10; i++) { \/\/retry if survived\n+            SSLEngineResult serverResult = serverEngine.unwrap(cTOs, serverIn);\n+            System.out.println(\"server unwrap: \" + serverResult);\n+            runDelegatedTasks(serverResult, serverEngine);\n+        }\n+    }\n+\n+    private void createSSLEngines() throws Exception {\n+\n+        serverEngine = sslc.createSSLEngine();\n+        serverEngine.setUseClientMode(false);\n+        serverEngine.setNeedClientAuth(true);\n+\n+    }\n+\n+\n+    private void createBuffers() {\n+\n+        serverIn = ByteBuffer.allocateDirect(65536);\n+\n+        cTOs = ByteBuffer.allocateDirect(65536);\n+\n+    }\n+\n+    private static void runDelegatedTasks(SSLEngineResult result,\n+                                          SSLEngine engine) throws Exception {\n+\n+        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n+            Runnable runnable;\n+            while ((runnable = engine.getDelegatedTask()) != null) {\n+                System.out.println(\"\\trunning delegated task...\");\n+                runnable.run();\n+            }\n+\n+            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n+            if (hsStatus == HandshakeStatus.NEED_TASK) {\n+                throw new Exception(\"handshake shouldn't need additional \" +\n+                    \"tasks\");\n+            }\n+            System.out.println(\"\\tnew HandshakeStatus: \" + hsStatus);\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/TestBadDNForPeerCA.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8294985\n+ * @library \/test\/lib\n+ * @summary SSLEngine throws IAE during parsing of X500Principal\n+ * @run main\/othervm TestBadDNForPeerCA12\n+ * @run main\/othervm -Djavax.net.debug=all TestBadDNForPeerCA12\n+ *\/\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import javax.net.ssl.SSLHandshakeException;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+\n+public class TestBadDNForPeerCA12 {\n+\n+    \/\/ Test was originally written for TLSv1.2\n+    private static final String proto = \"TLSv1.2\";\n+\n+    private final SSLContext sslc;\n+\n+    protected SSLEngine clientEngine;     \/\/ client Engine\n+    protected SSLEngine serverEngine;     \/\/ server Engine\n+    protected ByteBuffer clientOut;       \/\/ write side of clientEngine\n+    protected ByteBuffer serverOut;       \/\/ write side of serverEngine\n+    protected ByteBuffer clientIn;        \/\/ read side of clientEngine\n+    protected ByteBuffer serverIn;        \/\/ read side of serverEngine\n+    private ByteBuffer cTOs;            \/\/ \"reliable\" transport client->server\n+    protected ByteBuffer sTOc;          \/\/ \"reliable\" transport server->client\n+\n+    private static final String keyStoreFile =\n+        System.getProperty(\"test.src\", \".\/\")\n+            + \"\/..\/..\/..\/..\/javax\/net\/ssl\/etc\/keystore\";\n+\n+    \/\/ this contains a server response with invalid DNs\n+    private static final byte[] serverPayload = Base64.getDecoder().decode(\n+        \"FgMDBhICAABVAwPORrwPxSL0DOnCC+cCvQcXxeU1ugjN5XyT0r9qOrlT0iD4I0BgFq\"\n+        + \"2Hbt7a9cGreNkhniEEhgQIuxa2Ur21VJr9\/AA1AAANABcAAAAjAAD\/AQABAAsAA1UAA1\"\n+        + \"IAA08wggNLMIICMwIEVzmbhzANBgkqhkiG9w0BAQsFADBqMQswCQYDVQQGEwJVUzELMA\"\n+        + \"kGA1UECAwCQ0ExEjAQBgNVBAcMCUN1cGVydGlubzEOMAwGA1UECgwFRHVtbXkxDjAMBg\"\n+        + \"NVBAsMBUR1bW15MRowGAYDVQQDDBFkdW1teS5leGFtcGxlLmNvbTAeFw0xNjA1MTYxMD\"\n+        + \"A2MzhaFw0yNjA1MTYxMDA2MzhaMGoxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTESMB\"\n+        + \"AGA1UEBwwJQ3VwZXJ0aW5vMQ4wDAYDVQQKDAVEdW1teTEOMAwGA1UECwwFRHVtbXkxGj\"\n+        + \"AYBgNVBAMMEWR1bW15LmV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMI\"\n+        + \"IBCgKCAQEAyRtAPlvIbvGfI5ZXN4jBu0dU96b8smVcAdxYnDPylnvmsYGdmYC2C6ddT7\"\n+        + \"7I9Nlk6BhNmkz6pCGsXLZnUOL+9XOGVWlw5kHDVEGUjeza5BhpZW0G0q00QthZcRuF\/F\"\n+        + \"UkUGzmUuaxgm59VqwxP7dfMERG4gRRXjclMpLm23CShWBhFfooOsiPSFgDtmY4H\/LkTU\"\n+        + \"EbaYuxKRfRKhMKm6GBjCVY7iS9iga728dJ+6BTNAGpKITXI35B+Xf7vpTbc+Zub9vL2f\"\n+        + \"czcChQvGTZedCaAFi3NWJXR\/UTeuv\/vte8jJ1YscHSSi2k0P5k3gi9PCmve\/sjLrBuh+\"\n+        + \"D466e\/B\/swowIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBZFaKJtN\/1RkCVev7ZmYEwww\"\n+        + \"42kE5RpJt7Es2zoxqEGaNx0TA5D6XnEB1XjFUQOgOG7SbUl4NfLpJejuZiQzaX27+7Pu\"\n+        + \"1FK24SIz61sINpyVtb8flA52mIjH26HzpwSAGmTjFQ7m9Josj\/25IqAaRM0AWuPLcwTf\"\n+        + \"B9zRx3me1LxxrzGhtyZDn1Jhlv0aLS79g33Kuj1HAYMvw7UGan372ufmGiv+g5UYeVvP\"\n+        + \"Yw3jeahJkSIh96Bb05aJpaogaoE5e+gQanR7E36WGGaicjfN1gIHSOyzZBibcTUhaplS\"\n+        + \"Q06DfK6UjGmHcVi8X5wD+9NWWiGrlUHcOwKueQOaptTaaXDQACWANAAQIAKgQDBQMGAw\"\n+        + \"gHCAgIBAgFCAYICQgKCAsEAQUBBgEEAgMDAwEDAgIDAgECAgImAGwwajELMAkRA1UEBh\"\n+        + \"MCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlDdXBlcnRpbm8xDjAMBgNVBAoTBUR1bW\"\n+        + \"15MQ4wDAYDVQQLEwVEdW1teTEaMBgGA1UEAxMRZHVtbXkuZXhhbXBsZS5jb20AbDBqMQ\"\n+        + \"swCREDVQQGEwJVUzELMAkGA1UECAwCQ0ExEjAQBgNVBAcMCUN1cGVydGlubzEOMAwGA1\"\n+        + \"UECgwFRHVtbXkxDjAMBgNVBAsMBUR1bW15MRowGAYDVQQDDBFkdW1teS5leGFtcGxlLm\"\n+        + \"NvbQBsMGoxCzAJEQNVBAYTAlVTMQswCQYDVQQIDAJDQTESMBAGA1UEBwwJQ3VwZXJ0aW\"\n+        + \"5vMQ4wDAYDVQQKDAVEdW1teTEOMAwGA1UECwwFRHVtbXkxGjAYBgNVBAMMEWR1bW15Lm\"\n+        + \"V4YW1wbGUuY29tAGwwajELMAkRA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEw\"\n+        + \"lDdXBlcnRpbm8xDjAMBgNVBAoTBUR1bW15MQ4wDAYDVQQLEwVEdW1teTEaMBgGA1UEAx\"\n+        + \"MRZHVtbXkuZXhhbXBsZS5jb20AbDBqMQswCREDVQQGEwJVUzELMAkGA1UECBMCQ0ExEj\"\n+        + \"AQBgNVBAcTCUN1cGVydGlubzEOMAwGA1UEChMFRHVtbXkxDjAMBgNVBAsTBUR1bW15MR\"\n+        + \"owGAYDVQQDExFkdW1teS5leGFtcGxlLmNvbQ4AAAA=\"\n+    );\n+\n+    \/*\n+     * The following is to set up the keystores.\n+     *\/\n+    private static final String passwd = \"passphrase\";\n+\n+    \/*\n+     * Main entry point for this demo.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+\n+        TestBadDNForPeerCA12 test = new TestBadDNForPeerCA12();\n+\n+        try {\n+            test.runTest();\n+            throw new Exception(\n+                \"TEST FAILED:  Didn't generate any exception\");\n+        } catch (SSLHandshakeException she) {\n+            System.out.println(\"TEST PASSED:  Caught expected exception\");\n+        }\n+    }\n+\n+    \/*\n+     * Create an initialized SSLContext to use for this demo.\n+     *\/\n+\n+    public TestBadDNForPeerCA12() throws Exception {\n+\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        KeyStore ts = KeyStore.getInstance(\"JKS\");\n+\n+        char[] passphrase = passwd.toCharArray();\n+\n+        ks.load(new FileInputStream(keyStoreFile), passphrase);\n+        ts.load(new FileInputStream(keyStoreFile), passphrase);\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n+        kmf.init(ks, passphrase);\n+\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n+        tmf.init(ts);\n+\n+        SSLContext sslCtx = SSLContext.getInstance(proto);\n+\n+        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+\n+        sslc = sslCtx;\n+    }\n+\n+\n+    private void runTest() throws Exception {\n+\n+        createSSLEngines();\n+        createBuffers();\n+\n+        \/*\n+         * the following was used to generate the serverPayload value\n+         *\/\n+        \/\/ ignore output\n+        \/*SSLEngineResult clientResult = clientEngine.wrap(clientOut, cTOs);\n+        runDelegatedTasks(clientResult, clientEngine);\n+        cTOs.flip();\n+\n+        \/\/ ignore output\n+        SSLEngineResult serverResult = serverEngine.unwrap(cTOs, serverIn);\n+        runDelegatedTasks(serverResult, serverEngine);\n+        \/\/ server hello, cert material, etc\n+        SSLEngineResult serverWrapResult = serverEngine.wrap(serverOut, sTOc);\n+        runDelegatedTasks(serverWrapResult, serverEngine);\n+        sTOc.flip();\n+        ByteBuffer sTOcBuff = sTOc.asReadOnlyBuffer();\n+        byte[] serverContents = new byte[sTOcBuff.remaining()];\n+        sTOcBuff.get(serverContents);\n+        System.out.println(\"sw: \" + Base64.getEncoder().encodeToString\n+        (serverContents));*\/\n+\n+        System.out.println(\"sending client hello\");\n+        SSLEngineResult clientResult = clientEngine.wrap(clientOut, cTOs);\n+        runDelegatedTasks(clientResult, clientEngine);\n+\n+        cTOs.flip();\n+\n+        sTOc = ByteBuffer.wrap(serverPayload);\n+\n+        SSLEngineResult clientHelloResult = clientEngine.unwrap(sTOc, clientIn);\n+        System.out.println(\"client unwrap: \" + clientHelloResult);\n+        runDelegatedTasks(clientHelloResult, clientEngine);\n+\n+        SSLEngineResult clientExGen = clientEngine.wrap(clientIn, cTOs);\n+        runDelegatedTasks(clientExGen, clientEngine);\n+\n+    }\n+\n+    private void createSSLEngines() {\n+        clientEngine = sslc.createSSLEngine();\n+        clientEngine.setEnabledProtocols(new String[] {proto});\n+        clientEngine.setUseClientMode(true);\n+        clientEngine.setEnabledCipherSuites(new String[]\n+            {\"TLS_RSA_WITH_AES_256_CBC_SHA\"});\n+\n+        serverEngine = sslc.createSSLEngine();\n+        serverEngine.setEnabledProtocols(new String[] {proto});\n+        serverEngine.setUseClientMode(false);\n+        serverEngine.setNeedClientAuth(true);\n+        serverEngine.setEnabledCipherSuites(new String[]\n+            {\"TLS_RSA_WITH_AES_256_CBC_SHA\"});\n+    }\n+\n+    private void createBuffers() {\n+        cTOs = ByteBuffer.allocateDirect(65536);\n+\n+        clientIn = ByteBuffer.allocateDirect(65536);\n+\n+        clientOut = ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n+\n+        sTOc = ByteBuffer.allocateDirect(65536);\n+\n+        serverOut = ByteBuffer.wrap(\"Hi Client, I'm Server\".getBytes());\n+\n+        serverIn = ByteBuffer.allocateDirect(65536);\n+    }\n+\n+    private static void runDelegatedTasks(SSLEngineResult result,\n+                                          SSLEngine engine) throws Exception {\n+\n+        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n+            Runnable runnable;\n+            while ((runnable = engine.getDelegatedTask()) != null) {\n+                System.out.println(\"\\trunning delegated task...\");\n+                runnable.run();\n+            }\n+\n+            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n+            if (hsStatus == HandshakeStatus.NEED_TASK) {\n+                throw new Exception(\"handshake shouldn't need additional \" +\n+                    \"tasks\");\n+            }\n+            System.out.println(\"\\tnew HandshakeStatus: \" + hsStatus);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/TestBadDNForPeerCA12.java","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309595\n+ * @summary Allow javadoc to process unnamed classes\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestUnnamed\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestUnnamed extends JavadocTester {\n+\n+    private static final String thisVersion = System.getProperty(\"java.specification.version\");\n+\n+    private static final ToolBox tb = new ToolBox();\n+\n+    public static void main(String... args) throws Exception {\n+        new TestUnnamed().runTests();\n+    }\n+\n+    @Test\n+    public void testUnnamed(Path base) throws IOException {\n+        String className = \"Sample\";\n+        Files.createDirectories(base);\n+        Path out = base.resolve(\"out\");\n+        Path src = base.resolve(\"src\");\n+        Path sample = src.resolve(className + \".java\");\n+\n+        Files.createDirectories(out);\n+        Files.createDirectories(src);\n+        Files.writeString(sample, \"\"\"\n+            \/**\n+             * This is a comment for the main method.\n+             *\/\n+            void main() {\n+                System.out.println(\"Done\");\n+            }\n+            \"\"\");\n+\n+         javadoc(\n+             \"--enable-preview\",\n+             \"--source\", thisVersion,\n+             \"-private\",\n+             \"-d\", out.toString(),\n+             sample.toString()\n+         );\n+\n+        checkOutput(className + \".html\", true, \"This is a comment for the main method.\");\n+    }\n+\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUnnamed\/TestUnnamed.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ *          8296150 8306585\n@@ -38,1 +39,1 @@\n- *                                      RELEASE_18 RELEASE_19 RELEASE_20 RELEASE_21\n+ *                                      RELEASE_18 RELEASE_19 RELEASE_20 RELEASE_21 RELEASE_22\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetSourceVersions.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,3 @@\n-        TWENTY_ONE(\"21\", 65);\n+        TWENTY_ONE(\"21\", 65),\n+        TWENTY_TWO(\"22\", 66),\n+        ; \/\/ Reduce code churn when appending new constants\n","filename":"test\/langtools\/tools\/javac\/classfiles\/ClassVersionChecker.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n@@ -126,1 +126,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n@@ -136,1 +136,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n@@ -146,1 +146,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n@@ -167,1 +167,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n@@ -186,1 +186,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n@@ -207,1 +207,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n@@ -228,1 +228,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n@@ -249,1 +249,1 @@\n-    @SupportedSourceVersion(RELEASE_21)\n+    @SupportedSourceVersion(RELEASE_22)\n","filename":"test\/langtools\/tools\/javac\/lib\/JavacTestingAbstractProcessor.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5,2 +5,0 @@\n-Domination.java:74:18: compiler.err.pattern.dominated\n-Domination.java:81:18: compiler.err.pattern.dominated\n@@ -8,2 +6,0 @@\n-Domination.java:95:18: compiler.err.pattern.dominated\n-Domination.java:102:18: compiler.err.pattern.dominated\n@@ -11,2 +7,0 @@\n-Domination.java:124:18: compiler.err.pattern.dominated\n-Domination.java:135:18: compiler.err.pattern.dominated\n@@ -19,1 +13,1 @@\n-18 errors\n\\ No newline at end of file\n+12 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/Domination.out","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-        \/\/ A type pattern that declares a pattern variable of type T dominates a constant c of a primitive type P if the wrapper class of P ([5.1.7]) is a subtype of the erasure of T.\n+        \/\/ (unguarded case with) A type pattern that declares a pattern variable of type T dominates a constant c of a primitive type P if the wrapper class of P ([5.1.7]) is a subtype of the erasure of T.\n@@ -285,0 +285,12 @@\n+               \"\"\");\n+        doTest(base,\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   private int test(Integer o) {\n+                       return switch (o) {\n+                           case Integer i -> 0;\n+                           case 0 -> 0;\n+                       };\n+                   }\n+               }\n@@ -288,1 +300,1 @@\n-        \/\/ A type pattern that declares a pattern variable of type T dominates an enum constant c of type E if E is a subtype of the erasure of the type of T.\n+        \/\/ (unguarded case with) A type pattern that declares a pattern variable of type T dominates an enum constant c of type E if E is a subtype of the erasure of the type of T.\n@@ -302,0 +314,13 @@\n+               \"\"\");\n+        doTest(base,\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   private int test(E o) {\n+                       return switch (o) {\n+                           case E e -> 0;\n+                           case B -> 0;\n+                       };\n+                   }\n+               }\n+               enum E {A, B;}\n@@ -318,4 +343,1 @@\n-               \"\"\",\n-               \"Test.java:6:18: compiler.err.pattern.dominated\",\n-               \"1 error\");\n-        \/\/ A parenthesized pattern dominates a constant c if its contained pattern dominates c.\n+               \"\"\");\n@@ -326,1 +348,1 @@\n-                   private int test(Integer o) {\n+                   private int test(String o) {\n@@ -328,3 +350,2 @@\n-                           case Integer i when i > 0 -> 0;\n-                           case 0 -> 0;\n-                           case Integer i -> 0;\n+                           case String s -> 0;\n+                           case \"a\" -> 0;\n","filename":"test\/langtools\/tools\/javac\/patterns\/NewCaseStructureTest.java","additions":31,"deletions":10,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -108,0 +108,12 @@\n+        assertEquals(0, constantAndPatternGuardInteger(0, true));\n+        assertEquals(0, constantAndPatternGuardInteger(1, true));\n+        assertEquals(1, constantAndPatternGuardInteger(1, false));\n+        assertEquals(2, constantAndPatternGuardInteger(0, false));\n+        assertEquals(0, constantAndPatternGuardString(\"\", true));\n+        assertEquals(0, constantAndPatternGuardString(\"a\", true));\n+        assertEquals(1, constantAndPatternGuardString(\"a\", false));\n+        assertEquals(2, constantAndPatternGuardString(\"\", false));\n+        assertEquals(0, constantAndPatternGuardEnum(E.A, true));\n+        assertEquals(0, constantAndPatternGuardEnum(E.B, true));\n+        assertEquals(1, constantAndPatternGuardEnum(E.B, false));\n+        assertEquals(2, constantAndPatternGuardEnum(E.A, false));\n@@ -716,0 +728,24 @@\n+    int constantAndPatternGuardInteger(Integer i, boolean g) {\n+        return switch (i) {\n+            case Integer j when g -> 0;\n+            case 1 -> 1;\n+            case Integer j -> 2;\n+        };\n+    }\n+\n+    int constantAndPatternGuardString(String s, boolean g) {\n+        return switch (s) {\n+            case String t when g -> 0;\n+            case \"a\" -> 1;\n+            case String t -> 2;\n+        };\n+    }\n+\n+    int constantAndPatternGuardEnum(E e, boolean g) {\n+        return switch (e) {\n+            case E f when g -> 0;\n+            case E.B -> 1;\n+            case E f -> 2;\n+        };\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Switches.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-- compiler.err.preview.feature.disabled.classfile: Bar.class, 21\n+- compiler.err.preview.feature.disabled.classfile: Bar.class, 22\n","filename":"test\/langtools\/tools\/javac\/preview\/classReaderTest\/Client.nopreview.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-- compiler.warn.preview.feature.use.classfile: Bar.class, 21\n+- compiler.warn.preview.feature.use.classfile: Bar.class, 22\n","filename":"test\/langtools\/tools\/javac\/preview\/classReaderTest\/Client.preview.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,3 @@\n- * @bug 4981566 5028634 5094412 6304984 7025786 7025789 8001112 8028545 8000961 8030610 8028546 8188870 8173382 8173382 8193290 8205619 8028563 8245147 8245586 8257453 8286035\n+ * @bug 4981566 5028634 5094412 6304984 7025786 7025789 8001112 8028545\n+ * 8000961 8030610 8028546 8188870 8173382 8173382 8193290 8205619 8028563\n+ * 8245147 8245586 8257453 8286035 8306586\n@@ -74,1 +76,1 @@\n-               \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\");\n+               \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\");\n@@ -76,1 +78,1 @@\n-    public static final String LATEST_MAJOR_VERSION = \"65.0\";\n+    public static final String LATEST_MAJOR_VERSION = \"66.0\";\n@@ -79,14 +81,16 @@\n-        EIGHT(true,      \"52.0\",  \"8\", Versions::checksrc8),\n-        NINE(true,       \"53.0\",  \"9\", Versions::checksrc9),\n-        TEN(true,        \"54.0\", \"10\", Versions::checksrc10),\n-        ELEVEN(false,    \"55.0\", \"11\", Versions::checksrc11),\n-        TWELVE(false,    \"56.0\", \"12\", Versions::checksrc12),\n-        THIRTEEN(false,  \"57.0\", \"13\", Versions::checksrc13),\n-        FOURTEEN(false,  \"58.0\", \"14\", Versions::checksrc14),\n-        FIFTEEN(false,   \"59.0\", \"15\", Versions::checksrc15),\n-        SIXTEEN(false,   \"60.0\", \"16\", Versions::checksrc16),\n-        SEVENTEEN(false, \"61.0\", \"17\", Versions::checksrc17),\n-        EIGHTEEN(false,  \"62.0\", \"18\", Versions::checksrc18),\n-        NINETEEN(false,  \"63.0\", \"19\", Versions::checksrc19),\n-        TWENTY(false,    \"64.0\", \"20\", Versions::checksrc20),\n-        TWENTY_ONE(false,\"65.0\", \"21\", Versions::checksrc21);\n+        EIGHT(true,      \"52.0\",  \"8\"),\n+        NINE(true,       \"53.0\",  \"9\"),\n+        TEN(true,        \"54.0\", \"10\"),\n+        ELEVEN(false,    \"55.0\", \"11\"),\n+        TWELVE(false,    \"56.0\", \"12\"),\n+        THIRTEEN(false,  \"57.0\", \"13\"),\n+        FOURTEEN(false,  \"58.0\", \"14\"),\n+        FIFTEEN(false,   \"59.0\", \"15\"),\n+        SIXTEEN(false,   \"60.0\", \"16\"),\n+        SEVENTEEN(false, \"61.0\", \"17\"),\n+        EIGHTEEN(false,  \"62.0\", \"18\"),\n+        NINETEEN(false,  \"63.0\", \"19\"),\n+        TWENTY(false,    \"64.0\", \"20\"),\n+        TWENTY_ONE(false,\"65.0\", \"21\"),\n+        TWENTY_TWO(false,\"66.0\", \"22\"),\n+        ; \/\/ Reduce code churn when appending new constants\n@@ -97,1 +101,1 @@\n-        private final BiConsumer<Versions, List<String>> checker;\n+        private final int intTarget;\n@@ -99,2 +103,1 @@\n-        private SourceTarget(boolean dotOne, String classFileVer, String target,\n-                             BiConsumer<Versions, List<String>> checker) {\n+        private SourceTarget(boolean dotOne, String classFileVer, String target) {\n@@ -104,1 +107,1 @@\n-            this.checker = checker;\n+            this.intTarget = Integer.parseInt(target);\n@@ -107,2 +110,14 @@\n-        public void checksrc(Versions version, List<String> args) {\n-            checker.accept(version, args);\n+        public void checksrc(Versions versions, List<String> args) {\n+            \/\/ checker.accept(version, args);\n+            versions.printargs(\"checksrc\" + target, args);\n+            List<String> expectedPassFiles = new ArrayList<>();\n+            List<String> expectedFailFiles = new ArrayList<>();\n+\n+            for (SourceExample srcEg : SourceExample.values()) {\n+                var x = (srcEg.sourceLevel <= this.intTarget) ?\n+                    expectedPassFiles.add(srcEg.fileName()):\n+                    expectedFailFiles.add(srcEg.fileName());\n+            }\n+\n+            versions.expectedPass(args, expectedPassFiles);\n+            versions.expectedFail(args, expectedFailFiles);\n@@ -122,0 +137,4 @@\n+\n+        public int intTarget() {\n+            return intTarget;\n+        }\n@@ -248,53 +267,24 @@\n-    protected void checksrc8(List<String> args) {\n-        printargs(\"checksrc8\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\"));\n-        expectedFail(args, List.of(\"New10.java\", \"New11.java\", \"New14.java\", \"New15.java\",\n-                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n-\n-    }\n-\n-    protected void checksrc9(List<String> args) {\n-        printargs(\"checksrc9\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\"));\n-        expectedFail(args, List.of(\"New10.java\", \"New11.java\", \"New14.java\", \"New15.java\",\n-                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc10(List<String> args) {\n-        printargs(\"checksrc10\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\"));\n-        expectedFail(args, List.of(\"New11.java\", \"New14.java\", \"New15.java\",\n-                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc11(List<String> args) {\n-        printargs(\"checksrc11\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\"));\n-        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc12(List<String> args) {\n-        printargs(\"checksrc12\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\"));\n-        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc13(List<String> args) {\n-        printargs(\"checksrc13\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\"));\n-        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-    protected void checksrc14(List<String> args) {\n-        printargs(\"checksrc14\", args);\n-        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                   \"New14.java\"));\n-        expectedFail(args, List.of(\"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n-\n-   protected void checksrc15(List<String> args) {\n-       printargs(\"checksrc15\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\"));\n-       expectedFail(args, List.of(\"New16.java\", \"New17.java\", \"New21.java\"));\n-    }\n+    \/**\n+     * The BASE source example is expected to compile on all source\n+     * levels. Otherwise, an example is expected to compile on its\n+     * declared source level and later, but to _not_ compile on\n+     * earlier source levels. (This enum is _not_ intended to capture\n+     * the uncommon program that is accepted in one version of the\n+     * language and rejected in a later version.)\n+     *\n+     * When version of the language get a new, non-preview feature, a\n+     * new source example enum constant should be added.\n+     *\/\n+    enum SourceExample {\n+        BASE(7, \"Base.java\", \"public class Base { }\\n\"),\n+\n+\n+        SOURCE_8(8, \"New8.java\",\n+            \/\/ New feature in 8: lambda\n+            \"\"\"\n+            public class New8 {\n+                void m() {\n+                    new Thread(() -> { });\n+                }\n+            }\n+             \"\"\"),\n@@ -302,6 +292,9 @@\n-   protected void checksrc16(List<String> args) {\n-       printargs(\"checksrc16\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\"));\n-       expectedFail(args, List.of(\"New17.java\", \"New21.java\"));\n-    }\n+        SOURCE_10(10, \"New10.java\",\n+            \/\/ New feature in 10: var\n+            \"\"\"\n+            public class New10 {\n+                void m() {\n+                    var tmp = new Thread(() -> { });\n+                }\n+            }\n+            \"\"\"),\n@@ -309,6 +302,10 @@\n-   protected void checksrc17(List<String> args) {\n-       printargs(\"checksrc17\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n-       expectedFail(args, List.of(\"New21.java\"));\n-    }\n+        SOURCE_11(11, \"New11.java\",\n+            \/\/ New feature in 11: var for lambda parameters\n+            \"\"\"\n+            public class New11 {\n+                static java.util.function.Function<String,String> f = (var x) -> x.substring(0);\n+                void m(String name) {\n+                    var tmp = new Thread(() -> { }, f.apply(name));\n+                }\n+            }\n+            \"\"\"),\n@@ -316,6 +313,43 @@\n-   protected void checksrc18(List<String> args) {\n-       printargs(\"checksrc18\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n-       expectedFail(args, List.of(\"New21.java\"));\n-    }\n+         SOURCE_14(14, \"New14.java\",\n+             \/\/ New feature in 14: text blocks\n+             \"\"\"\n+             public class New14 {\n+                 static {\n+                     int i = 5;\n+                     System.out.println(\n+                         switch(i) {\n+                             case 0 -> false;\n+                             default -> true;\n+                         }\n+                     );\n+                 }\n+             }\n+             \"\"\"),\n+\n+         SOURCE_15(15, \"New15.java\",\n+             \/\/ New feature in 15: text blocks\n+             \"\"\"\n+             public class New15 {\n+                 public static final String s =\n+                 \\\"\\\"\\\"\n+                 Hello, World.\n+                 \\\"\\\"\\\"\n+                 ;\n+             }\n+             \"\"\"),\n+\n+         SOURCE_16(16, \"New16.java\",\n+             \/\/ New feature in 16: records\n+             \"\"\"\n+             public class New16 {\n+                 public record Record(double rpm) {\n+                     public static final Record LONG_PLAY = new Record(100.0\/3.0);\n+                 }\n+             }\n+             \"\"\"),\n+\n+         SOURCE_17(17, \"New17.java\",\n+             \/\/ New feature in 17: sealed classes\n+             \"\"\"\n+             public class New17 {\n+                 public static sealed class Seal {}\n@@ -323,6 +357,5 @@\n-   protected void checksrc19(List<String> args) {\n-       printargs(\"checksrc19\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n-       expectedFail(args, List.of(\"New21.java\"));\n-    }\n+                 public static final class Pinniped extends Seal {}\n+                 public static final class TaperedThread extends Seal {}\n+                 public static final class Wax extends Seal {}\n+             }\n+             \"\"\"),\n@@ -330,6 +363,26 @@\n-   protected void checksrc20(List<String> args) {\n-       printargs(\"checksrc20\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n-       expectedFail(args, List.of(\"New21.java\"));\n-    }\n+         SOURCE_21(21, \"New21.java\",\n+             \/\/ New feature in 21: pattern matching for switch\n+             \"\"\"\n+             public class New21 {\n+                 public static void main(String... args) {\n+                     Object o = new Object(){};\n+\n+                     System.out.println(switch (o) {\n+                                        case Integer i -> String.format(\"%d\", i);\n+                                        default        -> o.toString();\n+                                        });\n+                 }\n+             }\n+             \"\"\"),\n+\n+            ; \/\/ Reduce code churn when appending new constants\n+\n+        private int sourceLevel;\n+        private String fileName;\n+        private String fileContents;\n+\n+        private SourceExample(int sourceLevel, String fileName, String fileContents) {\n+            this.sourceLevel = sourceLevel;\n+            this.fileName = fileName;\n+            this.fileContents = fileContents;\n+        }\n@@ -337,6 +390,2 @@\n-   protected void checksrc21(List<String> args) {\n-       printargs(\"checksrc21\", args);\n-       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n-                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\",\n-                                  \"New21.java\"));\n-       \/\/ Add expectedFail after new language features added in a later release.\n+        public String fileName() {return fileName;}\n+        public String fileContents() {return fileContents;}\n@@ -468,133 +517,3 @@\n-        \/* Create a file that executes with all supported versions. *\/\n-        writeSourceFile(\"Base.java\",\"public class Base { }\\n\");\n-\n-        \/*\n-         * Create a file with a new feature in 7, not in 6 : \"<>\"\n-         *\/\n-        writeSourceFile(\"New7.java\",\n-            \"\"\"\n-            import java.util.List;\n-            import java.util.ArrayList;\n-            class New7 { List<String> s = new ArrayList<>(); }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 8, not in 7 : lambda\n-         *\/\n-        writeSourceFile(\"New8.java\",\n-            \"\"\"\n-            public class New8 {\n-                void m() {\n-                new Thread(() -> { });\n-                }\n-            }\n-             \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 10, not in 9 : var\n-         *\/\n-        writeSourceFile(\"New10.java\",\n-            \"\"\"\n-            public class New10 {\n-                void m() {\n-                var tmp = new Thread(() -> { });\n-                }\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 11, not in 10 : var for lambda parameters\n-         *\/\n-        writeSourceFile(\"New11.java\",\n-            \"\"\"\n-            public class New11 {\n-                static java.util.function.Function<String,String> f = (var x) -> x.substring(0);\n-                void m(String name) {\n-                var tmp = new Thread(() -> { }, f.apply(name));\n-                }\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 14, not in 13 : switch expressions\n-         *\/\n-        writeSourceFile(\"New14.java\",\n-            \"\"\"\n-            public class New14 {\n-                static {\n-                    int i = 5;\n-                    System.out.println(\n-                        switch(i) {\n-                            case 0 -> false;\n-                            default -> true;\n-                        }\n-                    );\n-                }\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 15, not in 14 : text blocks\n-         *\/\n-        writeSourceFile(\"New15.java\",\n-            \"\"\"\n-            public class New15 {\n-                public static final String s =\n-                \\\"\\\"\\\"\n-                Hello, World.\n-                \\\"\\\"\\\"\n-                ;\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 16, not in 15 : records\n-         *\/\n-        writeSourceFile(\"New16.java\",\n-            \"\"\"\n-            public class New16 {\n-                public record Record(double rpm) {\n-                    public static final Record LONG_PLAY = new Record(100.0\/3.0);\n-                }\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 17, not in 16 : sealed classes\n-         *\/\n-        writeSourceFile(\"New17.java\",\n-            \"\"\"\n-            public class New17 {\n-                public static sealed class Seal {}\n-\n-                public static final class Pinniped extends Seal {}\n-                public static final class TaperedThread extends Seal {}\n-                public static final class Wax extends Seal {}\n-            }\n-            \"\"\"\n-        );\n-\n-        \/*\n-         * Create a file with a new feature in 21, not in 20 : pattern matching for switch\n-         *\/\n-        writeSourceFile(\"New21.java\",\n-            \"\"\"\n-            public class New21 {\n-                public static void main(String... args) {\n-                    Object o = new Object(){};\n-\n-                    System.out.println(switch (o) {\n-                                       case Integer i -> String.format(\"%d\", i);\n-                                       default        -> o.toString();\n-                                       });\n-                }\n-            }\n-            \"\"\"\n-        );\n+        for (SourceExample srcEg : SourceExample.values()) {\n+            writeSourceFile(srcEg.fileName(), srcEg.fileContents());\n+        }\n","filename":"test\/langtools\/tools\/javac\/versions\/Versions.java","additions":164,"deletions":245,"binary":false,"changes":409,"status":"modified"},{"patch":"@@ -180,0 +180,13 @@\n+  private native String printClasses0(String classNamePattern, int flags);\n+  public         String printClasses(String classNamePattern, int flags) {\n+    Objects.requireNonNull(classNamePattern);\n+    return printClasses0(classNamePattern, flags);\n+  }\n+\n+  private native String printMethods0(String classNamePattern, String methodPattern, int flags);\n+  public         String printMethods(String classNamePattern, String methodPattern, int flags) {\n+    Objects.requireNonNull(classNamePattern);\n+    Objects.requireNonNull(methodPattern);\n+    return printMethods0(classNamePattern, methodPattern, flags);\n+  }\n+\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-     * - jvmci.Compiler variable is equal to 'graal'\n","filename":"test\/lib\/jdk\/test\/whitebox\/code\/Compiler.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}