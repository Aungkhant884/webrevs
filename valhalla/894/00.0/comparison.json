{"files":[{"patch":"@@ -4,1 +4,1 @@\n-version=21\n+version=22\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -466,1 +466,2 @@\n-            configure_args: concat(common.configure_args_32bit),\n+            configure_args: concat(common.configure_args_32bit,\n+                \"--enable-deprecated-ports\"),\n@@ -1523,1 +1524,1 @@\n-                 && java.lang.System.getProperty(\"os.version\").contains(\"Microsoft\")));\n+                 && java.lang.System.getProperty(\"os.version\").toLowerCase().contains(\"microsoft\")));\n","filename":"make\/conf\/jib-profiles.js","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-DEFAULT_VERSION_FEATURE=21\n+DEFAULT_VERSION_FEATURE=22\n@@ -36,2 +36,2 @@\n-DEFAULT_VERSION_DATE=2023-09-19\n-DEFAULT_VERSION_CLASSFILE_MAJOR=65  # \"`$EXPR $DEFAULT_VERSION_FEATURE + 44`\"\n+DEFAULT_VERSION_DATE=2024-03-19\n+DEFAULT_VERSION_CLASSFILE_MAJOR=66  # \"`$EXPR $DEFAULT_VERSION_FEATURE + 44`\"\n@@ -40,2 +40,2 @@\n-DEFAULT_ACCEPTABLE_BOOT_VERSIONS=\"20 21\"\n-DEFAULT_JDK_SOURCE_TARGET_VERSION=21\n+DEFAULT_ACCEPTABLE_BOOT_VERSIONS=\"20 21 22\"\n+DEFAULT_JDK_SOURCE_TARGET_VERSION=22\n","filename":"make\/conf\/version-numbers.conf","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3704,2 +3704,2 @@\n-                            return new MethodParam(Integer.parseInt(p.substring(0, sep)),\n-                                                    p.substring(sep + 1));\n+                            return new MethodParam(Integer.parseInt(p.substring(0, sep), 16),\n+                                                   p.substring(sep + 1));\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,5 +97,0 @@\n-NSK_GC_LOCK_JVMTI_INCLUDES := \\\n-    -I$(VM_TESTBASE_DIR)\/nsk\/share\/gc\/lock\/jvmti \\\n-    -I$(VM_TESTBASE_DIR)\/nsk\/share\/native \\\n-    -I$(VM_TESTBASE_DIR)\/nsk\/share\/jni\n-\n@@ -175,2 +170,0 @@\n-BUILD_HOTSPOT_JTREG_LIBRARIES_CFLAGS_libJVMTIAllocLocker := $(NSK_GC_LOCK_JVMTI_INCLUDES)\n-\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -996,1 +996,1 @@\n-      __ call_runtime_leaf(StubRoutines::dpow(), getThreadTemp(), result_reg, cc->args());\n+        __ call_runtime_leaf(StubRoutines::dpow(), getThreadTemp(), result_reg, cc->args());\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3968,0 +3968,4 @@\n+\n+  if ((UseAVX >= 1) && (VM_Version::supports_avx512vlbwdq() || VM_Version::supports_fma())) {\n+    StubRoutines::_fmod = generate_libmFmod(); \/\/ from stubGenerator_x86_64_fmod.cpp\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -489,0 +489,1 @@\n+  address generate_libmFmod();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,2 +100,0 @@\n-    void set_upper(int upper, Value upper_instr);\n-    void set_lower(int lower, Value lower_instr);\n@@ -105,1 +103,0 @@\n-    void add_constant(int value);\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-#include \"oops\/constantPool.hpp\"\n+#include \"oops\/constantPool.inline.hpp\"\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2159,19 +2159,0 @@\n-\/\/ The address where this shared heap region is actually mapped at runtime. This function\n-\/\/ can be called only after we have determined the value for ArchiveHeapLoader::mapped_heap_delta().\n-address FileMapInfo::heap_region_mapped_address() {\n-  assert(UseSharedSpaces, \"runtime only\");\n-  assert(ArchiveHeapLoader::can_map(), \"cannot be used by ArchiveHeapLoader::can_load() mode\");\n-  return heap_region_requested_address() + ArchiveHeapLoader::mapped_heap_delta();\n-}\n-\n-  init_heap_region_relocation();\n-\n-  if (_heap_pointers_need_patching) {\n-    char* bitmap_base = map_bitmap_region();\n-    if (bitmap_base == nullptr) {\n-      log_info(cds)(\"CDS heap cannot be used because bitmap region cannot be mapped\");\n-      _heap_pointers_need_patching = false;\n-      return false;\n-    }\n-  }\n-\n@@ -2204,1 +2185,1 @@\n-void FileMapInfo::init_heap_region_relocation() {\n+bool FileMapInfo::map_heap_region_impl() {\n@@ -2206,34 +2187,0 @@\n-  _heap_pointers_need_patching = false;\n-\n-  MemRegion heap_range = G1CollectedHeap::heap()->reserved();\n-  MemRegion archive_range = get_heap_region_requested_range();\n-  address requested_bottom = (address)archive_range.start();\n-  address heap_end = (address)heap_range.end();\n-  assert(is_aligned(heap_end, HeapRegion::GrainBytes), \"must be\");\n-\n-  \/\/ We map the archive heap region at the very top of the heap to avoid fragmentation.\n-  \/\/ To do that, we make sure that the bottom of the archived region is at the same\n-  \/\/ address as the bottom of the highest possible G1 region.\n-  address mapped_bottom = heap_end - align_up(archive_range.byte_size(), HeapRegion::GrainBytes);\n-\n-  if (UseCompressedOops &&\n-      (narrow_oop_mode() != CompressedOops::mode() ||\n-       narrow_oop_shift() != CompressedOops::shift())) {\n-    log_info(cds)(\"CDS heap data needs to be relocated because the archive was created with an incompatible oop encoding mode.\");\n-    _heap_pointers_need_patching = true;\n-  } else if (requested_bottom != mapped_bottom) {\n-    log_info(cds)(\"CDS heap data needs to be relocated because it is mapped at a different address @ \" INTPTR_FORMAT,\n-                  p2i(mapped_bottom));\n-    _heap_pointers_need_patching = true;\n-  }\n-\n-  ptrdiff_t delta = 0;\n-  if (_heap_pointers_need_patching) {\n-    delta = mapped_bottom - requested_bottom;\n-  }\n-\n-  log_info(cds)(\"CDS heap data relocation delta = \" INTX_FORMAT \" bytes\", delta);\n-  ArchiveHeapLoader::init_mapped_heap_relocation(delta, narrow_oop_shift());\n-}\n-\n-bool FileMapInfo::map_heap_region_impl() {\n@@ -2243,7 +2190,1 @@\n-\n-  if (size > 0) {\n-    HeapWord* start = (HeapWord*)heap_region_mapped_address();\n-    _mapped_heap_memregion = MemRegion(start, size \/ HeapWordSize);\n-    log_info(cds)(\"Trying to map heap data at \" INTPTR_FORMAT \", size = \" SIZE_FORMAT_W(8) \" bytes\",\n-                  p2i(start), size);\n-  } else {\n+  if (size == 0) {\n@@ -2253,5 +2194,4 @@\n-  \/\/ Check that the region is within the java heap\n-  if (!G1CollectedHeap::heap()->check_archive_addresses(_mapped_heap_memregion)) {\n-    log_info(cds)(\"Unable to allocate region, range is not within java heap.\");\n-    return false;\n-  }\n+  size_t word_size = size \/ HeapWordSize;\n+  address requested_start = heap_region_requested_address();\n+\n+  log_info(cds)(\"Preferred address to map heap data (to avoid relocation) is \" INTPTR_FORMAT, p2i(requested_start));\n@@ -2260,2 +2200,3 @@\n-  if (!G1CollectedHeap::heap()->alloc_archive_regions(_mapped_heap_memregion)) {\n-    log_info(cds)(\"Unable to allocate region, java heap range is already in use.\");\n+  HeapWord* start = G1CollectedHeap::heap()->alloc_archive_region(word_size, (HeapWord*)requested_start);\n+  if (start == nullptr) {\n+    log_info(cds)(\"UseSharedSpaces: Unable to allocate java heap region for archive heap.\");\n@@ -2265,0 +2206,2 @@\n+  _mapped_heap_memregion = MemRegion(start, word_size);\n+\n@@ -2282,1 +2225,1 @@\n-    log_info(cds)(\"mapped heap region is corrupt\");\n+    log_info(cds)(\"UseSharedSpaces: mapped heap region is corrupt\");\n@@ -2286,0 +2229,27 @@\n+  \/\/ If the requested range is different from the range allocated by GC, then\n+  \/\/ the pointers need to be patched.\n+  address mapped_start = (address) _mapped_heap_memregion.start();\n+  ptrdiff_t delta = mapped_start - requested_start;\n+  if (UseCompressedOops &&\n+      (narrow_oop_mode() != CompressedOops::mode() ||\n+       narrow_oop_shift() != CompressedOops::shift())) {\n+    _heap_pointers_need_patching = true;\n+  }\n+  if (delta != 0) {\n+    _heap_pointers_need_patching = true;\n+  }\n+  ArchiveHeapLoader::init_mapped_heap_relocation(delta, narrow_oop_shift());\n+\n+  if (_heap_pointers_need_patching) {\n+    char* bitmap_base = map_bitmap_region();\n+    if (bitmap_base == NULL) {\n+      log_info(cds)(\"CDS heap cannot be used because bitmap region cannot be mapped\");\n+      dealloc_heap_region();\n+      unmap_region(MetaspaceShared::hp);\n+      _heap_pointers_need_patching = false;\n+      return false;\n+    }\n+  }\n+  log_info(cds)(\"Heap data mapped at \" INTPTR_FORMAT \", size = \" SIZE_FORMAT_W(8) \" bytes\",\n+                p2i(mapped_start), _mapped_heap_memregion.byte_size());\n+  log_info(cds)(\"CDS heap data relocation delta = \" INTX_FORMAT \" bytes\", delta);\n@@ -2339,1 +2309,0 @@\n-  assert(!HeapShared::is_heap_region(i), \"sanity\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":39,"deletions":70,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -598,1 +598,0 @@\n-  address heap_region_mapped_address() NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-#include \"oops\/constantPool.hpp\"\n+#include \"oops\/constantPool.inline.hpp\"\n@@ -49,0 +49,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -152,1 +152,3 @@\n-#define CONSTANT_CLASS_DESCRIPTORS        65\n+#define JAVA_22_VERSION                   66\n+\n+#define CONSTANT_CLASS_DESCRIPTORS        66\n@@ -4405,2 +4407,2 @@\n-  return _major_version > JAVA_21_VERSION ||\n-         (_major_version == JAVA_21_VERSION \/*&& _minor_version == JAVA_PREVIEW_MINOR_VERSION*\/); \/\/ JAVA_PREVIEW_MINOR_VERSION not yet implemented by javac, check JVMS draft\n+  return _major_version > JAVA_22_VERSION ||\n+         (_major_version == JAVA_22_VERSION \/*&& _minor_version == JAVA_PREVIEW_MINOR_VERSION*\/); \/\/ JAVA_PREVIEW_MINOR_VERSION not yet implemented by javac, check JVMS draft\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -824,1 +824,1 @@\n-    mirror()->byte_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->byte_field_put(fd->offset(), checked_cast<jbyte>(fd->int_initial_value()));\n@@ -827,1 +827,1 @@\n-    mirror()->bool_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->bool_field_put(fd->offset(), checked_cast<jboolean>(fd->int_initial_value()));\n@@ -830,1 +830,1 @@\n-    mirror()->char_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->char_field_put(fd->offset(), checked_cast<jchar>(fd->int_initial_value()));\n@@ -833,1 +833,1 @@\n-    mirror()->short_field_put(fd->offset(), fd->int_initial_value());\n+    mirror()->short_field_put(fd->offset(), checked_cast<jshort>(fd->int_initial_value()));\n@@ -3704,15 +3704,0 @@\n-int reflect_UnsafeStaticFieldAccessorImpl::_base_offset;\n-\n-#define UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(macro) \\\n-  macro(_base_offset, k, \"base\", object_signature, false)\n-\n-void reflect_UnsafeStaticFieldAccessorImpl::compute_offsets() {\n-  InstanceKlass* k = vmClasses::reflect_UnsafeStaticFieldAccessorImpl_klass();\n-  UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n-}\n-\n-#if INCLUDE_CDS\n-void reflect_UnsafeStaticFieldAccessorImpl::serialize_offsets(SerializeClosure* f) {\n-  UNSAFESTATICFIELDACCESSORIMPL_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n-}\n-#endif\n@@ -4715,1 +4700,2 @@\n-\/\/ the generated bytecodes for reflection.\n+\/\/ the generated bytecodes for serialization constructor returned\n+\/\/ by sun.reflect.ReflectionFactory::newConstructorForSerialization\n@@ -5305,1 +5291,0 @@\n-  f(reflect_UnsafeStaticFieldAccessorImpl) \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":6,"deletions":21,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -900,14 +900,0 @@\n-\/\/ Interface to jdk.internal.reflect.UnsafeStaticFieldAccessorImpl objects\n-class reflect_UnsafeStaticFieldAccessorImpl {\n- private:\n-  static int _base_offset;\n-  static void compute_offsets();\n-\n- public:\n-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n-\n-  static int base_offset() { CHECK_INIT(_base_offset); }\n-\n-  \/\/ Debugging\n-  friend class JavaClasses;\n-};\n@@ -1511,1 +1497,2 @@\n-  \/\/ the generated bytecodes for reflection.\n+  \/\/ the generated bytecodes for serialization constructor returned\n+  \/\/ by sun.reflect.ReflectionFactory::newConstructorForSerialization\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -346,2 +346,2 @@\n-  assert((jushort)bci == bci, \"bci should be short\");\n-  return build_int_from_shorts(version, bci);\n+  assert((u2)bci == bci, \"bci should be short\");\n+  return build_int_from_shorts((u2)version, (u2)bci);\n@@ -352,3 +352,3 @@\n-  assert((jushort)mid == mid, \"mid should be short\");\n-  assert((jushort)cpref == cpref, \"cpref should be short\");\n-  return build_int_from_shorts(cpref, mid);\n+  assert((u2)mid == mid, \"mid should be short\");\n+  assert((u2)cpref == cpref, \"cpref should be short\");\n+  return build_int_from_shorts((u2)cpref, (u2)mid);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-  Klass* refl_magic_klass = vmClasses::reflect_MagicAccessorImpl_klass();\n+  Klass* refl_serialization_ctor_klass = vmClasses::reflect_SerializationConstructorAccessorImpl_klass();\n@@ -274,1 +274,2 @@\n-  bool is_reflect = refl_magic_klass != nullptr && klass->is_subtype_of(refl_magic_klass);\n+  bool is_reflect_accessor = refl_serialization_ctor_klass != nullptr &&\n+                                klass->is_subtype_of(refl_serialization_ctor_klass);\n@@ -294,2 +295,1 @@\n-    \/\/ dynamically-generated bytecodes associated with the 1.4\n-    \/\/ reflection implementation, not just those associated with\n+    \/\/ dynamically-generated bytecodes associated with\n@@ -297,4 +297,1 @@\n-    \/\/ NOTE: this is called too early in the bootstrapping process to be\n-    \/\/ guarded by Universe::is_gte_jdk14x_version().\n-    \/\/ Also for lambda generated code, gte jdk8\n-    (!is_reflect));\n+    (!is_reflect_accessor));\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,2 +108,0 @@\n-  do_klass(reflect_MagicAccessorImpl_klass,             reflect_MagicAccessorImpl                             ) \\\n-  do_klass(reflect_ConstructorAccessorImpl_klass,       reflect_ConstructorAccessorImpl                       ) \\\n@@ -113,2 +111,2 @@\n-  do_klass(reflect_UnsafeStaticFieldAccessorImpl_klass, reflect_UnsafeStaticFieldAccessorImpl                 ) \\\n-  do_klass(reflect_NativeConstructorAccessorImpl_klass, reflect_NativeConstructorAccessorImpl                 ) \\\n+  do_klass(reflect_DirectConstructorHandleAccessor_NativeAccessor_klass, reflect_DirectConstructorHandleAccessor_NativeAccessor) \\\n+  do_klass(reflect_SerializationConstructorAccessorImpl_klass,           reflect_SerializationConstructorAccessorImpl ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -275,2 +275,0 @@\n-  template(reflect_MagicAccessorImpl,                 \"jdk\/internal\/reflect\/MagicAccessorImpl\")       \\\n-  template(reflect_ConstructorAccessorImpl,           \"jdk\/internal\/reflect\/ConstructorAccessorImpl\") \\\n@@ -282,1 +280,2 @@\n-  template(reflect_NativeConstructorAccessorImpl,     \"jdk\/internal\/reflect\/NativeConstructorAccessorImpl\")\\\n+  template(reflect_DirectConstructorHandleAccessor_NativeAccessor,   \"jdk\/internal\/reflect\/DirectConstructorHandleAccessor$NativeAccessor\") \\\n+  template(reflect_SerializationConstructorAccessorImpl,             \"jdk\/internal\/reflect\/SerializationConstructorAccessorImpl\") \\\n@@ -311,1 +310,0 @@\n-  template(reflect_UnsafeStaticFieldAccessorImpl,     \"jdk\/internal\/reflect\/UnsafeStaticFieldAccessorImpl\")\\\n@@ -763,1 +761,0 @@\n-  template(serializeSavedPropertiesToByteArray_name,   \"serializeSavedPropertiesToByteArray\")                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -716,1 +716,0 @@\n-  _preserved_marks_set.assert_empty();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+class ResolvedIndyEntry;\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -305,4 +306,10 @@\n-  assert(ConstantPool::is_invokedynamic_index(i), \"not secondary index?\");\n-  i = ConstantPool::decode_invokedynamic_index(i) + ConstantPool::CPCACHE_INDEX_TAG;\n-\n-  return check_cp_cache_index(i, cp_index, st);\n+  ConstantPool* constants = _current_method->constants();\n+  if (constants->cache() == nullptr) {\n+    cp_index = i; \/\/ TODO: This is wrong on little-endian. See JDK-8309811.\n+  } else {\n+    assert(ConstantPool::is_invokedynamic_index(i), \"must be\");\n+    int indy_index = ConstantPool::decode_invokedynamic_index(i);\n+    ResolvedIndyEntry* indy_entry = constants->resolved_indy_entry_at(indy_index);\n+    cp_index = indy_entry->constant_pool_index();\n+  }\n+  return true;\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1465,1 +1465,1 @@\n-      vmClasses::reflect_NativeConstructorAccessorImpl_klass()) {\n+      vmClasses::reflect_DirectConstructorHandleAccessor_NativeAccessor_klass()) {\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-#include \"oops\/constantPool.hpp\"\n+#include \"oops\/constantPool.inline.hpp\"\n@@ -51,0 +51,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -1202,1 +1203,2 @@\n-    \/\/ Disable verification for the dynamically-generated reflection bytecodes.\n+    \/\/ Disable verification for the dynamically-generated reflection bytecodes\n+    \/\/ for serialization constructor accessor.\n@@ -1204,1 +1206,1 @@\n-                        vmClasses::reflect_MagicAccessorImpl_klass());\n+                        vmClasses::reflect_SerializationConstructorAccessorImpl_klass());\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -215,0 +215,10 @@\n+\n+void ArrayKlass::cds_print_value_on(outputStream* st) const {\n+  assert(is_klass(), \"must be klass\");\n+  st->print(\"      - array: %s\", internal_name());\n+  if (_higher_dimension != nullptr) {\n+    ArrayKlass* ak = ArrayKlass::cast(higher_dimension());\n+    st->cr();\n+    ak->cds_print_value_on(st);\n+  }\n+}\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -145,0 +145,1 @@\n+  void cds_print_value_on(outputStream* st) const;\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -262,3 +262,1 @@\n-  u2 invokedynamic_bootstrap_ref_index_at(int indy_index) const {\n-    return cache()->resolved_indy_entry_at(decode_invokedynamic_index(indy_index))->constant_pool_index();\n-  }\n+  inline u2 invokedynamic_bootstrap_ref_index_at(int indy_index) const;\n@@ -934,9 +932,3 @@\n-  ResolvedIndyEntry* resolved_indy_entry_at(int index) {\n-    return cache()->resolved_indy_entry_at(index);\n-  }\n-  int resolved_indy_entries_length() {\n-    return cache()->resolved_indy_entries_length();\n-  }\n-  oop resolved_reference_from_indy(int index) {\n-    return resolved_references()->obj_at(cache()->resolved_indy_entry_at(index)->resolved_references_index());\n-  }\n+  inline ResolvedIndyEntry* resolved_indy_entry_at(int index);\n+  inline int resolved_indy_entries_length() const;\n+  inline oop resolved_reference_from_indy(int index) const;\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -950,0 +951,6 @@\n+void ConstantPoolCache::print_resolved_indy_entries(outputStream* st)   const {\n+  for (int i = 0; i < _resolved_indy_entries->length(); i++) {\n+    _resolved_indy_entries->at(i).print_on(st);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -134,0 +133,1 @@\n+class ResolvedIndyEntry;\n@@ -456,7 +456,3 @@\n-  ResolvedIndyEntry* resolved_indy_entry_at(int index) const { return _resolved_indy_entries->adr_at(index); }\n-  int resolved_indy_entries_length()                   const { return _resolved_indy_entries->length();      }\n-  void print_resolved_indy_entries(outputStream* st)   const {\n-    for (int i = 0; i < _resolved_indy_entries->length(); i++) {\n-        _resolved_indy_entries->at(i).print_on(st);\n-    }\n-  }\n+  inline ResolvedIndyEntry* resolved_indy_entry_at(int index) const;\n+  inline int resolved_indy_entries_length() const;\n+  void print_resolved_indy_entries(outputStream* st)   const;\n","filename":"src\/hotspot\/share\/oops\/cpCache.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -748,1 +748,1 @@\n-  \/\/ [0] [ @CallerSensitive public sun.reflect.Reflection.getCallerClass ]\n+  \/\/ [0] [ @CallerSensitive public jdk.internal.reflect.Reflection.getCallerClass ]\n@@ -3378,2 +3378,1 @@\n-      if (!ik->is_subclass_of(vmClasses::reflect_MethodAccessorImpl_klass()) &&\n-          !ik->is_subclass_of(vmClasses::reflect_ConstructorAccessorImpl_klass())) {\n+      if (!ik->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"oops\/constantPool.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"classfile\/classPrinter.hpp\"\n@@ -1451,3 +1452,3 @@\n-#if INCLUDE_G1GC\n-  if (UseG1GC) {\n-    \/\/ Needs to be cleared explicitly for G1\n+#if INCLUDE_G1GC || INCLUDE_SERIALGC\n+  if (UseG1GC || UseSerialGC) {\n+    \/\/ Needs to be cleared explicitly for G1 and Serial GC.\n@@ -1456,1 +1457,1 @@\n-#endif \/\/ INCLUDE_G1GC\n+#endif \/\/ INCLUDE_G1GC || INCLUDE_SERIALGC\n@@ -1990,0 +1991,29 @@\n+WB_ENTRY(jobject, WB_printClasses(JNIEnv* env, jobject wb, jstring class_name_pattern, jint flags))\n+  ThreadToNativeFromVM ttnfv(thread);\n+  const char* c = env->GetStringUTFChars(class_name_pattern, nullptr);\n+  ResourceMark rm;\n+  stringStream st;\n+  {\n+    ThreadInVMfromNative ttvfn(thread); \/\/ back to VM\n+    ClassPrinter::print_classes(c, flags, &st);\n+  }\n+  jstring result = env->NewStringUTF(st.freeze());\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n+  return result;\n+WB_END\n+\n+WB_ENTRY(jobject, WB_printMethods(JNIEnv* env, jobject wb, jstring class_name_pattern, jstring method_pattern, jint flags))\n+  ThreadToNativeFromVM ttnfv(thread);\n+  const char* c = env->GetStringUTFChars(class_name_pattern, nullptr);\n+  const char* m = env->GetStringUTFChars(method_pattern, nullptr);\n+  ResourceMark rm;\n+  stringStream st;\n+  {\n+    ThreadInVMfromNative ttvfn(thread); \/\/ back to VM\n+    ClassPrinter::print_methods(c, m, flags, &st);\n+  }\n+  jstring result = env->NewStringUTF(st.freeze());\n+  CHECK_JNI_EXCEPTION_(env, nullptr);\n+  return result;\n+WB_END\n+\n@@ -2836,0 +2866,2 @@\n+  {CC\"printClasses0\",      CC\"(Ljava\/lang\/String;I)Ljava\/lang\/String;\", (void*)&WB_printClasses},\n+  {CC\"printMethods0\",      CC\"(Ljava\/lang\/String;Ljava\/lang\/String;I)Ljava\/lang\/String;\", (void*)&WB_printMethods},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -78,0 +78,3 @@\n+\n+  \/\/ for JVM_ReadSystemPropertiesInfo\n+  static int value_offset_in_bytes()  { return (int)offset_of(PathString, _value);  }\n@@ -140,0 +143,4 @@\n+\n+  \/\/ for JVM_ReadSystemPropertiesInfo\n+  static int key_offset_in_bytes()  { return (int)offset_of(SystemProperty, _key);  }\n+  static int next_offset_in_bytes() { return (int)offset_of(SystemProperty, _next); }\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1295,1 +1295,1 @@\n-  product(intx, MaxJavaStackTraceDepth, 1024,                               \\\n+  product(int, MaxJavaStackTraceDepth, 1024,                                \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-void compilerOracle_init();\n+bool compilerOracle_init();\n@@ -161,1 +161,3 @@\n-  compilerOracle_init();\n+  if (!compilerOracle_init()) {\n+    return JNI_EINVAL;\n+  }\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-  \/\/ Allow all accesses from jdk\/internal\/reflect\/MagicAccessorImpl subclasses to\n+  \/\/ Allow all accesses from jdk\/internal\/reflect\/SerializationConstructorAccessorImpl subclasses to\n@@ -463,2 +463,2 @@\n-  if (vmClasses::reflect_MagicAccessorImpl_klass_is_loaded() &&\n-      current_class->is_subclass_of(vmClasses::reflect_MagicAccessorImpl_klass())) {\n+  if (vmClasses::reflect_SerializationConstructorAccessorImpl_klass_is_loaded() &&\n+      current_class->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n@@ -677,1 +677,1 @@\n-  \/\/ Allow all accesses from jdk\/internal\/reflect\/MagicAccessorImpl subclasses to\n+  \/\/ Allow all accesses from jdk\/internal\/reflect\/SerializationConstructorAccessorImpl subclasses to\n@@ -679,1 +679,1 @@\n-  if (current_class->is_subclass_of(vmClasses::reflect_MagicAccessorImpl_klass())) {\n+  if (current_class->is_subclass_of(vmClasses::reflect_SerializationConstructorAccessorImpl_klass())) {\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -164,0 +164,1 @@\n+address StubRoutines::_fmod = nullptr;\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -252,0 +252,1 @@\n+  static address _fmod;\n@@ -431,0 +432,1 @@\n+  static address fmod()                { return _fmod; }\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+#include \"oops\/resolvedIndyEntry.hpp\"\n@@ -561,0 +562,1 @@\n+     static_field(StubRoutines,                _fmod,                                         address)                               \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7996,1 +7996,1 @@\n-     * by viewing its contents as a sequence of the provided value layout.\n+     * at a given byte offset, using the provided value layout.\n@@ -8003,5 +8003,5 @@\n-     * <p>The returned var handle's type is {@code carrier} and the list of coordinate types is\n-     * {@code (MemorySegment, long)}, where the {@code long} coordinate type corresponds to byte offset into\n-     * a given memory segment. The returned var handle accesses bytes at an offset in a given\n-     * memory segment, composing bytes to or from a value of the type {@code carrier} according to the given endianness;\n-     * the alignment constraint (in bytes) for the resulting var handle is given by {@code alignmentBytes}.\n+     * <p>The list of coordinate types associated with the returned var handle is {@code (MemorySegment, long)},\n+     * where the {@code long} coordinate type corresponds to byte offset into the given memory segment coordinate.\n+     * Thus, the returned var handle accesses bytes at an offset in a given memory segment, composing bytes to or from\n+     * a value of the var handle type. Moreover, the access operation will honor the endianness and the\n+     * alignment constraints expressed in the provided layout.\n@@ -8063,1 +8063,0 @@\n-     * @throws IllegalArgumentException if an illegal carrier type is used, or if {@code alignmentBytes} is not a power of two.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -533,2 +533,0 @@\n-    VarHandle target() { return null; }\n-\n@@ -2133,1 +2131,1 @@\n-    public final boolean isAccessModeSupported(AccessMode accessMode) {\n+    public boolean isAccessModeSupported(AccessMode accessMode) {\n@@ -2189,1 +2187,1 @@\n-    MethodHandle getMethodHandle(int mode) {\n+    final MethodHandle getMethodHandle(int mode) {\n@@ -2201,1 +2199,1 @@\n-    private final MethodHandle getMethodHandleUncached(int mode) {\n+    MethodHandle getMethodHandleUncached(int mode) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-        if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V21) {\n+        if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V22) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -314,0 +314,1 @@\n+    int V22 = 0 << 16 | 66;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Opcodes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,1 @@\n-    \/\/ Instance variables for shared functionality between\n-    \/\/ FieldAccessorGenerator and MethodAccessorGenerator\n+    \/\/ Instance variables for shared functionality\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/AccessorGenerator.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -144,5 +144,1 @@\n-        if (useFieldHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newFieldAccessor(field, isReadOnly);\n-        } else {\n-            return UnsafeFieldAccessorFactory.newFieldAccessor(field, isReadOnly);\n-        }\n+        return MethodHandleAccessorFactory.newFieldAccessor(field, isReadOnly);\n@@ -158,23 +154,1 @@\n-        if (useMethodHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newMethodAccessor(method, callerSensitive);\n-        } else {\n-            if (noInflation() && !method.getDeclaringClass().isHidden()) {\n-                return generateMethodAccessor(method);\n-            } else {\n-                NativeMethodAccessorImpl acc = new NativeMethodAccessorImpl(method);\n-                return acc.getParent();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Generate the MethodAccessor that invokes the given method with\n-     * bytecode invocation.\n-     *\/\n-    static MethodAccessorImpl generateMethodAccessor(Method method) {\n-        return (MethodAccessorImpl)new MethodAccessorGenerator()\n-                .generateMethod(method.getDeclaringClass(),\n-                                method.getName(),\n-                                method.getParameterTypes(),\n-                                method.getReturnType(),\n-                                method.getModifiers());\n+        return MethodHandleAccessorFactory.newMethodAccessor(method, callerSensitive);\n@@ -199,20 +173,1 @@\n-        if (useMethodHandleAccessor()) {\n-            return MethodHandleAccessorFactory.newConstructorAccessor(c);\n-        } else {\n-            \/\/ Bootstrapping issue: since we use Class.newInstance() in\n-            \/\/ the ConstructorAccessor generation process, we have to\n-            \/\/ break the cycle here.\n-            if (Reflection.isSubclassOf(declaringClass, ConstructorAccessorImpl.class)) {\n-                return new BootstrapConstructorAccessorImpl(c);\n-            }\n-\n-            if (noInflation() && !c.getDeclaringClass().isHidden()) {\n-                return new MethodAccessorGenerator().\n-                        generateConstructor(c.getDeclaringClass(),\n-                                            c.getParameterTypes(),\n-                                            c.getModifiers());\n-            } else {\n-                NativeConstructorAccessorImpl acc = new NativeConstructorAccessorImpl(c);\n-                return acc.getParent();\n-            }\n-        }\n+        return MethodHandleAccessorFactory.newConstructorAccessor(c);\n@@ -429,1 +384,1 @@\n-        ConstructorAccessor acc = new MethodAccessorGenerator().\n+        ConstructorAccessor acc = new SerializationConstructorAccessorGenerator().\n@@ -598,18 +553,4 @@\n-    \/\/ Package-private to be accessible to NativeMethodAccessorImpl\n-    \/\/ and NativeConstructorAccessorImpl\n-    static int inflationThreshold() {\n-        return config().inflationThreshold;\n-    }\n-\n-    static boolean noInflation() {\n-        return config().noInflation;\n-    }\n-\n-    static boolean useMethodHandleAccessor() {\n-        return (config().useDirectMethodHandle & METHOD_MH_ACCESSOR) == METHOD_MH_ACCESSOR;\n-    }\n-\n-    static boolean useFieldHandleAccessor() {\n-        return (config().useDirectMethodHandle & FIELD_MH_ACCESSOR) == FIELD_MH_ACCESSOR;\n-    }\n-\n+    \/*\n+     * If -Djdk.reflect.useNativeAccessorOnly is set, use the native accessor only.\n+     * For testing purpose only.\n+     *\/\n@@ -624,5 +565,0 @@\n-    \/\/ New implementation uses direct invocation of method handles\n-    private static final int METHOD_MH_ACCESSOR = 0x1;\n-    private static final int FIELD_MH_ACCESSOR = 0x2;\n-    private static final int ALL_MH_ACCESSORS = METHOD_MH_ACCESSOR | FIELD_MH_ACCESSOR;\n-\n@@ -640,15 +576,1 @@\n-    \/\/ \"Inflation\" mechanism. Loading bytecodes to implement\n-    \/\/ Method.invoke() and Constructor.newInstance() currently costs\n-    \/\/ 3-4x more than an invocation via native code for the first\n-    \/\/ invocation (though subsequent invocations have been benchmarked\n-    \/\/ to be over 20x faster). Unfortunately this cost increases\n-    \/\/ startup time for certain applications that use reflection\n-    \/\/ intensively (but only once per class) to bootstrap themselves.\n-    \/\/ To avoid this penalty we reuse the existing JVM entry points\n-    \/\/ for the first few invocations of Methods and Constructors and\n-    \/\/ then switch to the bytecode-based implementations.\n-\n-    private static final Config DEFAULT_CONFIG = new Config(false, \/\/ noInflation\n-                                                            15, \/\/ inflationThreshold\n-                                                            ALL_MH_ACCESSORS, \/\/ useDirectMethodHandle\n-                                                            false, \/\/ useNativeAccessorOnly\n+    private static final Config DEFAULT_CONFIG = new Config(false, \/\/ useNativeAccessorOnly\n@@ -668,4 +590,1 @@\n-    private record Config(boolean noInflation,\n-                          int inflationThreshold,\n-                          int useDirectMethodHandle,\n-                          boolean useNativeAccessorOnly,\n+    private record Config(boolean useNativeAccessorOnly,\n@@ -681,3 +600,1 @@\n-        \/\/ Defer initialization until module system is initialized so as\n-        \/\/ to avoid inflation and spinning bytecode in unnamed modules\n-        \/\/ during early startup.\n+        \/\/ Always use the default configuration until the module system is initialized.\n@@ -694,35 +611,3 @@\n-        boolean noInflation = DEFAULT_CONFIG.noInflation;\n-        int inflationThreshold = DEFAULT_CONFIG.inflationThreshold;\n-        int useDirectMethodHandle = DEFAULT_CONFIG.useDirectMethodHandle;\n-        boolean useNativeAccessorOnly = DEFAULT_CONFIG.useNativeAccessorOnly;\n-        boolean disableSerialConstructorChecks = DEFAULT_CONFIG.disableSerialConstructorChecks;\n-\n-        String val = props.getProperty(\"sun.reflect.noInflation\");\n-        if (val != null && val.equals(\"true\")) {\n-            noInflation = true;\n-        }\n-\n-        val = props.getProperty(\"sun.reflect.inflationThreshold\");\n-        if (val != null) {\n-            try {\n-                inflationThreshold = Integer.parseInt(val);\n-            } catch (NumberFormatException e) {\n-                throw new RuntimeException(\"Unable to parse property sun.reflect.inflationThreshold\", e);\n-            }\n-        }\n-        val = props.getProperty(\"jdk.reflect.useDirectMethodHandle\");\n-        if (val != null) {\n-            if (val.equals(\"false\")) {\n-                useDirectMethodHandle = 0;\n-            } else if (val.equals(\"methods\")) {\n-                useDirectMethodHandle = METHOD_MH_ACCESSOR;\n-            } else if (val.equals(\"fields\")) {\n-                useDirectMethodHandle = FIELD_MH_ACCESSOR;\n-            }\n-        }\n-        val = props.getProperty(\"jdk.reflect.useNativeAccessorOnly\");\n-        if (val != null && val.equals(\"true\")) {\n-            useNativeAccessorOnly = true;\n-        }\n-\n-        disableSerialConstructorChecks =\n+        boolean useNativeAccessorOnly =\n+            \"true\".equals(props.getProperty(\"jdk.reflect.useNativeAccessorOnly\"));\n+        boolean disableSerialConstructorChecks =\n@@ -732,5 +617,1 @@\n-        return new Config(noInflation,\n-                          inflationThreshold,\n-                          useDirectMethodHandle,\n-                          useNativeAccessorOnly,\n-                          disableSerialConstructorChecks);\n+        return new Config(useNativeAccessorOnly, disableSerialConstructorChecks);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":15,"deletions":134,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,8 +33,5 @@\n-\/** Generator for jdk.internal.reflect.MethodAccessor and\n-    jdk.internal.reflect.ConstructorAccessor objects using bytecodes to\n-    implement reflection. A java.lang.reflect.Method or\n-    java.lang.reflect.Constructor object can delegate its invoke or\n-    newInstance method to an accessor using native code or to one\n-    generated by this class. (Methods and Constructors were merged\n-    together in this class to ensure maximum code sharing.) *\/\n-class MethodAccessorGenerator extends AccessorGenerator {\n+\/** Generator for jdk.internal.reflect.SerializationConstructorAccessorImpl\n+    objects using bytecodes to implement a constructor for serialization\n+    returned by ReflectionFactory::newConstructorForSerialization. *\/\n+\n+class SerializationConstructorAccessorGenerator extends AccessorGenerator {\n@@ -67,36 +64,1 @@\n-    MethodAccessorGenerator() {\n-    }\n-\n-    \/** This routine is not thread-safe *\/\n-    public MethodAccessor generateMethod(Class<?> declaringClass,\n-                                         String   name,\n-                                         Class<?>[] parameterTypes,\n-                                         Class<?>   returnType,\n-                                         int modifiers)\n-    {\n-        return (MethodAccessor) generate(declaringClass,\n-                                         name,\n-                                         parameterTypes,\n-                                         returnType,\n-                                         modifiers,\n-                                         false,\n-                                         false,\n-                                         false,\n-                                         null);\n-    }\n-\n-    \/** This routine is not thread-safe *\/\n-    public ConstructorAccessor generateConstructor(Class<?> declaringClass,\n-                                                   Class<?>[] parameterTypes,\n-                                                   int modifiers)\n-    {\n-        boolean isStaticFactory = declaringClass.isValue();\n-        return (ConstructorAccessor) generate(declaringClass,\n-                                              \"<init>\",\n-                                              parameterTypes,\n-                                              isStaticFactory ? PrimitiveClass.asValueType(declaringClass) : Void.TYPE,\n-                                              modifiers,\n-                                              true,\n-                                              isStaticFactory,\n-                                              false,\n-                                              null);\n+    SerializationConstructorAccessorGenerator() {\n@@ -112,0 +74,1 @@\n+        boolean isStaticFactory = declaringClass.isValue();\n@@ -116,1 +79,1 @@\n-                     Void.TYPE,\n+                     isStaticFactory ? PrimitiveClass.asValueType(declaringClass) : Void.TYPE,\n@@ -119,1 +82,1 @@\n-                     false,\n+                     isStaticFactory,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/SerializationConstructorAccessorGenerator.java","additions":10,"deletions":47,"binary":false,"changes":57,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodAccessorGenerator.java","status":"renamed"},{"patch":"@@ -282,0 +282,1 @@\n+        jdk.internal.vm.ci,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -135,1 +135,7 @@\n-    JDK21(\"21\");\n+    JDK21(\"21\"),\n+\n+    \/**\n+      * 22, tbd\n+      *\/\n+    JDK22(\"22\"),\n+    ; \/\/ Reduce code churn when appending new constants\n@@ -187,0 +193,1 @@\n+        case JDK22  -> Target.JDK1_22;\n@@ -332,0 +339,1 @@\n+        case JDK22  -> RELEASE_22;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4952,1 +4952,2 @@\n-                            dominated |= !(testCaseLabel instanceof JCConstantCaseLabel);\n+                            dominated |= !(testCaseLabel instanceof JCConstantCaseLabel) &&\n+                                         TreeInfo.unguardedCase(testCase);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,3 @@\n-        V65(65, 0);   \/\/ JDK 21\n+        V65(65, 0),   \/\/ JDK 21\n+        V66(66, 0),   \/\/ JDK 22\n+        ; \/\/ Reduce code churn when appending new constants\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassFile.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1291,0 +1291,2 @@\n+            options.isSet(PROC, \"full\") ||\n+            options.isSet(A) ||\n@@ -1292,0 +1294,1 @@\n+        \/\/ Skipping -XprintRounds and -XprintProcessorInfo\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.util.Architecture;\n@@ -46,2 +47,0 @@\n-    private final String osArch = getHostArchitectureName();\n-\n@@ -60,1 +59,1 @@\n-        String arch = Services.getSavedProperty(\"os.arch\");\n+        Architecture arch = Architecture.current();\n@@ -62,5 +61,2 @@\n-            case \"x86_64\":\n-                return \"amd64\";\n-\n-            default:\n-                return arch;\n+            case X64: return \"amd64\";\n+            default:  return arch.name().toLowerCase();\n@@ -137,1 +133,1 @@\n-    final int runtimeCallStackSize = getConstant(\"frame::arg_reg_save_area_bytes\", Integer.class, osArch.equals(\"amd64\") ? null : 0);\n+    final int runtimeCallStackSize = getConstant(\"frame::arg_reg_save_area_bytes\", Integer.class, Architecture.isX64() ? null : 0);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -165,1 +165,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -326,1 +326,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -477,1 +477,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -633,1 +633,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/GetfieldChains.jcod","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/MyValue5.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    version 65:0\n+    version 66:0\n@@ -80,1 +80,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBufferingClasses.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -149,1 +149,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -267,1 +267,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -385,1 +385,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -530,1 +530,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -678,1 +678,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -826,1 +826,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -944,1 +944,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -986,1 +986,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1087,1 +1087,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1138,1 +1138,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1192,1 +1192,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1296,1 +1296,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1403,1 +1403,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1504,1 +1504,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1605,1 +1605,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1709,1 +1709,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1813,1 +1813,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1914,1 +1914,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2015,1 +2015,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2119,1 +2119,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2714,1 +2714,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2808,1 +2808,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2902,1 +2902,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2944,1 +2944,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2989,1 +2989,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3086,1 +3086,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3186,1 +3186,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3283,1 +3283,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3325,1 +3325,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3451,1 +3451,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3555,1 +3555,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3659,1 +3659,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -3719,1 +3719,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMismatchHandling.jcod","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWithfieldC1Classes.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/HiddenPoint.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/MultiANewArrayTypeCheck.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldNullabilityClasses.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-super public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass version 65:0 {\n+super public class runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClass version 66:0 {\n@@ -45,1 +45,1 @@\n-super public final class runtime\/valhalla\/inlinetypes\/MyValue version 65:0 {\n+super public final class runtime\/valhalla\/inlinetypes\/MyValue version 66:0 {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestFieldTypeMismatchClasses.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ValuePreloadClient1.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-    version 65:0\n+    version 66:0\n@@ -109,1 +109,1 @@\n-    version 65:0\n+    version 66:0\n@@ -152,1 +152,1 @@\n-    version 65:0\n+    version 66:0\n@@ -194,1 +194,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldAccessorTestClasses.jasm","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    version 65:0\n+    version 66:0\n@@ -107,1 +107,1 @@\n-    version 65:0\n+    version 66:0\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/WithFieldTestClasses.jasm","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -184,1 +184,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -326,1 +326,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -468,1 +468,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCCFETests.jcod","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -194,1 +194,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/ACCICCETests.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -123,1 +123,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -214,1 +214,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -307,1 +307,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -398,1 +398,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -492,1 +492,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/PrimitiveUsers.jcod","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -207,1 +207,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -363,1 +363,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -519,1 +519,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -626,1 +626,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -881,1 +881,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1160,1 +1160,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1474,1 +1474,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1752,1 +1752,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2039,1 +2039,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2500,1 +2500,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/classfileparser\/cfpTests.jcod","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -89,1 +89,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -150,1 +150,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -211,1 +211,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -275,1 +275,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -338,1 +338,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -404,1 +404,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -476,1 +476,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -551,1 +551,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -623,1 +623,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -711,1 +711,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -774,1 +774,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testClassModifiers\/ClassesWithInvalidModifiers.jcod","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -302,1 +302,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -562,1 +562,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -821,1 +821,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1082,1 +1082,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1342,1 +1342,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1602,1 +1602,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1862,1 +1862,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2121,1 +2121,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -2382,1 +2382,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/testSupers\/InlineClassWithBadSupers.jcod","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -265,1 +265,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -366,1 +366,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -457,1 +457,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -547,1 +547,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -739,1 +739,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -830,1 +830,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1054,1 +1054,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1236,1 +1236,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/verifierTests.jcod","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -187,1 +187,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -344,1 +344,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -485,1 +485,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -613,1 +613,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -718,1 +718,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -807,1 +807,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -896,1 +896,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n@@ -1022,1 +1022,1 @@\n-  65; \/\/ version\n+  66; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/withfieldTests\/withfieldTests.jcod","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -670,1 +670,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/ViewportOverlapping.java 8253184,8295813 windows-x64\n@@ -679,0 +678,7 @@\n+# jdk_swing Ubuntu 23.04 specific\n+\n+javax\/swing\/JTree\/8003400\/Test8003400.java 8309734 linux-all\n+javax\/swing\/JTable\/7124218\/SelectEditTableCell.java 8309734 linux-all\n+javax\/swing\/JFileChooser\/JFileChooserSetLocationTest.java 8309734 linux-all\n+javax\/swing\/JComboBox\/TestComboBoxComponentRendering.java 8309734 linux-all\n+\n@@ -704,2 +710,0 @@\n-com\/sun\/jdi\/AfterThreadDeathTest.java                           8232839 linux-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-                    .withMajorVersion(65)\n+                    .withMajorVersion(66)\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,0 +180,13 @@\n+  private native String printClasses0(String classNamePattern, int flags);\n+  public         String printClasses(String classNamePattern, int flags) {\n+    Objects.requireNonNull(classNamePattern);\n+    return printClasses0(classNamePattern, flags);\n+  }\n+\n+  private native String printMethods0(String classNamePattern, String methodPattern, int flags);\n+  public         String printMethods(String classNamePattern, String methodPattern, int flags) {\n+    Objects.requireNonNull(classNamePattern);\n+    Objects.requireNonNull(methodPattern);\n+    return printMethods0(classNamePattern, methodPattern, flags);\n+  }\n+\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}