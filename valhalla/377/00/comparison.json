{"files":[{"patch":"@@ -1958,3 +1958,0 @@\n-  if (_inline_type_nodes.length() == 0) {\n-    return;\n-  }\n@@ -1981,0 +1978,3 @@\n+  if (_inline_type_nodes.length() == 0) {\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3364,7 +3364,2 @@\n-        assert(_compile->tf()->returns_inline_type_as_fields(), \"must return an inline type\");\n-        \/\/ Get InlineKlass by removing the tag bit from the metadata pointer\n-        Node* klass = use->in(TypeFunc::Parms);\n-        intptr_t ptr = igvn->type(klass)->isa_rawptr()->get_con();\n-        clear_nth_bit(ptr, 0);\n-        assert(Metaspace::contains((void*)ptr), \"should be klass\");\n-        assert(((InlineKlass*)ptr)->contains_oops(), \"returned inline type must contain a reference field\");\n+        \/\/ Allocation is referenced by field of returned inline type\n+        assert(_compile->tf()->returns_inline_type_as_fields(), \"EA: unexpected reference by ReturnNode\");\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-  PhiNode* oop = PhiNode::make(region, not_null_oop, inline_ptr());\n+  PhiNode* oop = PhiNode::make(region, not_null_oop, inline_ptr()->join_speculative(TypePtr::NOTNULL));\n@@ -936,0 +936,32 @@\n+\n+Node* InlineTypePtrNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  if (can_reshape) {\n+    \/\/ Remove useless InlineTypePtr nodes that might keep other nodes alive\n+    ResourceMark rm;\n+    Unique_Node_List users;\n+    users.push(this);\n+    bool useless = true;\n+    for (uint i = 0; i < users.size(); ++i) {\n+      Node* use = users.at(i);\n+      if (use->is_Cmp() || use->Opcode() == Op_Return || use->Opcode() == Op_CastP2X || (use == this && i != 0) ||\n+          (use->is_Load() && use->outcnt() == 1 && use->unique_out() == this)) {\n+        \/\/ No need to keep track of field values, we can just use the oop\n+        continue;\n+      }\n+      if (use->is_Load() || use->is_Store() || (use->is_InlineTypeBase() && use != this) || use->is_SafePoint()) {\n+        \/\/ We need to keep track of field values to allow the use to be folded\/scalarized\n+        useless = false;\n+        break;\n+      }\n+      for (DUIterator_Fast jmax, j = use->fast_outs(jmax); j < jmax; j++) {\n+        users.push(use->fast_out(j));\n+      }\n+    }\n+    if (useless) {\n+      phase->is_IterGVN()->replace_node(this, get_oop());\n+      return NULL;\n+    }\n+  }\n+\n+  return InlineTypeBaseNode::Ideal(phase, can_reshape);\n+}\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.cpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -171,0 +171,2 @@\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n+\n","filename":"src\/hotspot\/share\/opto\/inlinetypenode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2380,0 +2380,2 @@\n+        set_map(old_map);\n+        set_sp(old_sp);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,0 +207,15 @@\n+    void test14(boolean b, MyValue4 val) {\n+        for (int i = 0; i < 10; ++i) {\n+            if (b) {\n+                val = MyValue4.default;\n+            }\n+            MyValue4[] array = new MyValue4[1];\n+            array[0] = val;\n+\n+            for (int j = 0; j < 5; ++j) {\n+                for (int k = 0; k < 5; ++k) {\n+                }\n+            }\n+        }\n+    }\n+\n@@ -230,0 +245,1 @@\n+            t.test14(false, MyValue4.default);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestGenerated.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}