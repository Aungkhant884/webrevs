{"files":[{"patch":"@@ -471,1 +471,1 @@\n-    \/** Is this symbol a primitive object factory?\n+    \/** Is this symbol a value object factory?\n@@ -473,1 +473,1 @@\n-    public boolean isPrimitiveObjectFactory() {\n+    public boolean isValueObjectFactory() {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1333,1 +1333,1 @@\n-            return tsym != null && tsym.isValueClass();\n+            return !isReferenceProjection() && tsym != null && tsym.isValueClass();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -246,2 +246,2 @@\n-        \/\/ primitive classes related bytecodes\n-        defaultvalue    = 203,\n+        \/\/ value classes related bytecodes\n+        aconst_init     = 203,\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ByteCodes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1010,1 +1010,1 @@\n-                        if (sym.kind == MTH  && sym.name == names.init && sym.owner.isPrimitiveClass()) {\n+                        if (sym.kind == MTH  && sym.name == names.init && sym.owner.isValueClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1013,1 +1013,1 @@\n-                || ((m.flags_field & RECORD) != 0 && (m.isConstructor() || m.isPrimitiveObjectFactory())))) {\n+                || ((m.flags_field & RECORD) != 0 && (m.isConstructor() || m.isValueObjectFactory())))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.function.ToIntFunction;\n@@ -40,11 +39,0 @@\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Class;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Double;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Fieldref;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Float;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Integer;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_InterfaceMethodref;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Long;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_MethodHandle;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_MethodType;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_Methodref;\n-import static com.sun.tools.javac.jvm.ClassFile.CONSTANT_String;\n@@ -1037,1 +1025,1 @@\n-        case defaultvalue: {\n+        case aconst_init: {\n@@ -2470,1 +2458,1 @@\n-            mnem[defaultvalue] = \"defaultvalue\";\n+            mnem[aconst_init] = \"aconst_init\";\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Code.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    private final TransPrimitiveClass transPrimitiveClass;\n+    private final TransValues transValues;\n@@ -118,1 +118,1 @@\n-        transPrimitiveClass = TransPrimitiveClass.instance(context);\n+        transValues = TransValues.instance(context);\n@@ -1003,1 +1003,1 @@\n-                    } else if (env.enclMethod.sym.isPrimitiveObjectFactory()) {\n+                    } else if (env.enclMethod.sym.isValueObjectFactory()) {\n@@ -2419,2 +2419,2 @@\n-        if (tree.type.isPrimitiveClass()) {\n-            code.emitop2(defaultvalue, checkDimension(tree.pos(), tree.type), PoolWriter::putClass);\n+        if (tree.type.isValueClass()) {\n+            code.emitop2(aconst_init, checkDimension(tree.pos(), tree.type), PoolWriter::putClass);\n@@ -2486,1 +2486,1 @@\n-            cdef = transPrimitiveClass.translateTopLevelClass(cdef, make);\n+            cdef = transValues.translateTopLevelClass(cdef, make);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import com.sun.tools.javac.code.Type.ClassType;\n@@ -71,1 +70,1 @@\n- * This pass translates primitive class constructors into static factory methods and patches up constructor\n+ * This pass translates value class constructors into static factory methods and patches up constructor\n@@ -82,1 +81,1 @@\n-public class TransPrimitiveClass extends TreeTranslator {\n+public class TransValues extends TreeTranslator {\n@@ -84,1 +83,1 @@\n-    protected static final Context.Key<TransPrimitiveClass> transPrimitiveClass = new Context.Key<>();\n+    protected static final Context.Key<TransValues> transValueClass = new Context.Key<>();\n@@ -108,2 +107,2 @@\n-    public static TransPrimitiveClass instance(Context context) {\n-        TransPrimitiveClass instance = context.get(transPrimitiveClass);\n+    public static TransValues instance(Context context) {\n+        TransValues instance = context.get(transValueClass);\n@@ -111,1 +110,1 @@\n-            instance = new TransPrimitiveClass(context);\n+            instance = new TransValues(context);\n@@ -115,2 +114,2 @@\n-    protected TransPrimitiveClass(Context context) {\n-        context.put(transPrimitiveClass, this);\n+    protected TransValues(Context context) {\n+        context.put(transValueClass, this);\n@@ -180,1 +179,1 @@\n-            if (constructingPrimitiveObject()) {\n+            if (constructingValueObject()) {\n@@ -182,1 +181,1 @@\n-                \/\/ Mutate this primitive class constructor into an equivalent static factory\n+                \/\/ Mutate this value class constructor into an equivalent static factory\n@@ -189,1 +188,1 @@\n-                   is passed as an argument into the <init> method, the primitive static factory must allocate the\n+                   is passed as an argument into the <init> method, the value static factory must allocate the\n@@ -206,1 +205,1 @@\n-                    MethodSymbol factory = getPrimitiveObjectFactory(symbol);\n+                    MethodSymbol factory = getValueObjectFactory(symbol);\n@@ -214,1 +213,1 @@\n-                   not for primitive objects.\n+                   not for value objects.\n@@ -220,1 +219,1 @@\n-                MethodSymbol factorySym = getPrimitiveObjectFactory(tree.sym);\n+                MethodSymbol factorySym = getValueObjectFactory(tree.sym);\n@@ -245,1 +244,1 @@\n-        if (constructingPrimitiveObject()) {\n+        if (constructingValueObject()) {\n@@ -252,1 +251,1 @@\n-    \/* Note: 1. Assignop does not call for any translation, since primitive class instance fields are final and\n+    \/* Note: 1. Assignop does not call for any translation, since value class instance fields are final and\n@@ -257,1 +256,1 @@\n-        if (constructingPrimitiveObject()) {\n+        if (constructingValueObject()) {\n@@ -286,1 +285,1 @@\n-        if (constructingPrimitiveObject()) {\n+        if (constructingValueObject()) {\n@@ -296,1 +295,1 @@\n-        if (constructingPrimitiveObject()) {\n+        if (constructingValueObject()) {\n@@ -312,1 +311,1 @@\n-        if (constructingPrimitiveObject()) { \/\/ Qualified this would have been lowered already.\n+        if (constructingValueObject()) { \/\/ Qualified this would have been lowered already.\n@@ -347,1 +346,1 @@\n-    \/\/ Translate a reference style instance creation attempt on a primitive class to a static factory call.\n+    \/\/ Translate a reference style instance creation attempt on a value class to a static factory call.\n@@ -350,1 +349,1 @@\n-        if (types.isPrimitiveClass(tree.clazz.type)) {\n+        if (types.isValueClass(tree.clazz.type)) {\n@@ -355,1 +354,1 @@\n-            MethodSymbol sFactory = getPrimitiveObjectFactory((MethodSymbol) tree.constructor);\n+            MethodSymbol sFactory = getValueObjectFactory((MethodSymbol) tree.constructor);\n@@ -370,2 +369,2 @@\n-    private boolean constructingPrimitiveObject() {\n-        return currentClass != null && (currentClass.sym.flags() & Flags.PRIMITIVE_CLASS) != 0 && currentMethod != null && currentMethod.sym.isConstructor();\n+    private boolean constructingValueObject() {\n+        return currentClass != null && (currentClass.sym.flags() & Flags.VALUE_CLASS) != 0 && currentMethod != null && currentMethod.sym.isConstructor();\n@@ -381,1 +380,1 @@\n-    private MethodSymbol getPrimitiveObjectFactory(MethodSymbol init) {\n+    private MethodSymbol getValueObjectFactory(MethodSymbol init) {\n@@ -383,1 +382,1 @@\n-        Assert.check(types.isPrimitiveClass(init.owner.type));\n+        Assert.check(types.isValueClass(init.owner.type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransValues.java","additions":27,"deletions":28,"binary":false,"changes":55,"previous_filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransPrimitiveClass.java","status":"renamed"},{"patch":"@@ -246,1 +246,1 @@\n-    DEFAULTVALUE(203, CPREF_W),\n+    ACONST_INIT(203, CPREF_W),\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/Opcode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -368,1 +368,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -509,1 +509,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -632,1 +632,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -742,1 +742,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -831,1 +831,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n@@ -934,1 +934,1 @@\n-  0x0831; \/\/ access [ ACC_PRIMITIVE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n+  0x0931; \/\/ access [ ACC_PRIMITIVE ACC_VALUE ACC_PUBLIC ACC_SUPER ACC_FINAL ]\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/withfieldTests\/withfieldTests.jcod","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-              \"         0: defaultvalue  #1                  \/\/ class QTypedValue\",\n+              \"         0: aconst_init   #1                  \/\/ class QTypedValue\",\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/QTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-         \"0: defaultvalue  #1                  \/\/ class ValueCreationTest$Point\",\n+         \"0: aconst_init   #1                  \/\/ class ValueCreationTest$Point\",\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueCreationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-         \"0: defaultvalue  #1                  \/\/ class WithFieldOfImplicitThis$X\",\n+         \"0: aconst_init   #1                  \/\/ class WithFieldOfImplicitThis$X\",\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/WithFieldOfImplicitThis.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Check code generation for value creation ops\n+ * @modules jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n+ * @run main ValueCreationTest\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Paths;\n+\n+public class ValueCreationTest {\n+\n+    static final value class Point {\n+\n+        final int x;\n+        final int y;\n+\n+        Point (int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+\n+        public static void main(String [] args) {\n+            Point p = new Point(10, 20);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new ValueCreationTest().run();\n+    }\n+\n+    void run() {\n+        String [] params = new String [] { \"-v\",\n+                                            Paths.get(System.getProperty(\"test.classes\"),\n+                                                \"ValueCreationTest$Point.class\").toString() };\n+        runCheck(params, new String [] {\n+\n+         \"final value class ValueCreationTest$Point\",\n+         \"flags: (0x0130) ACC_FINAL, ACC_SUPER, ACC_VALUE\",\n+\n+         \/\/ Check that constructor invocation has been lowered into invokestatic\n+         \/\/ of the factory method.\n+         \"4: invokestatic  #10                 \/\/ Method \\\"<init>\\\":(II)LValueCreationTest$Point;\",\n+\n+\n+\n+         \/\/ Check that constructor has been lowered into a static factory method\n+         \"static ValueCreationTest$Point ValueCreationTest$Point(int, int);\",\n+         \"descriptor: (II)LValueCreationTest$Point;\",\n+         \"flags: (0x0008) ACC_STATIC\",\n+         \"0: aconst_init   #1                  \/\/ class ValueCreationTest$Point\",\n+         \"3: astore_2\",\n+         \"4: iload_0\",\n+         \"5: aload_2\",\n+         \"6: swap\",\n+         \"7: withfield     #3                  \/\/ Field x:I\",\n+        \"10: astore_2\",\n+        \"11: iload_1\",\n+        \"12: aload_2\",\n+        \"13: swap\",\n+        \"14: withfield     #7                  \/\/ Field y:I\",\n+        \"17: astore_2\",\n+        \"18: aload_2\",\n+        \"19: areturn\"\n+         });\n+\n+     }\n+\n+     void runCheck(String [] params, String [] expectedOut) {\n+        StringWriter s;\n+        String out;\n+\n+        try (PrintWriter pw = new PrintWriter(s = new StringWriter())) {\n+            com.sun.tools.javap.Main.run(params, pw);\n+            out = s.toString();\n+        }\n+        int errors = 0;\n+        for (String eo: expectedOut) {\n+            if (!out.contains(eo)) {\n+                System.err.println(\"Match not found for string: \" + eo);\n+                errors++;\n+            }\n+        }\n+         if (errors > 0) {\n+             throw new AssertionError(\"Unexpected javap output: \" + out);\n+         }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueCreationTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}