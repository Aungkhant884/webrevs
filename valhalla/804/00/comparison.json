{"files":[{"patch":"@@ -34,2 +34,0 @@\n-import jdk.internal.value.PrimitiveClass;\n-\n@@ -153,2 +151,0 @@\n-            if (PrimitiveClass.isPrimitiveValueType(handle.fieldType))\n-                Objects.requireNonNull(value);\n@@ -506,2 +502,0 @@\n-            if (PrimitiveClass.isPrimitiveValueType(handle.fieldType))\n-                Objects.requireNonNull(value);\n@@ -749,1 +743,1 @@\n-        assert PrimitiveClass.isPrimitiveValueType(componentType) && UNSAFE.isFlattenedArray(arrayClass);\n+        assert UNSAFE.isFlattenedArray(arrayClass);\n@@ -808,3 +802,0 @@\n-            if (PrimitiveClass.isPrimitiveValueType(handle.componentType))\n-                 Objects.requireNonNull(value);\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-     * @param pc primitive class\n+     * @param valueType value type\n@@ -242,1 +242,1 @@\n-    public native <V> V getValue(Object o, long offset, Class<?> pc);\n+    public native <V> V getValue(Object o, long offset, Class<?> valueType);\n@@ -255,1 +255,1 @@\n-     * @param pc primitive class\n+     * @param valueType value type\n@@ -262,1 +262,1 @@\n-    public native <V> void putValue(Object o, long offset, Class<?> pc, V v);\n+    public native <V> void putValue(Object o, long offset, Class<?> valueType, V v);\n@@ -265,3 +265,4 @@\n-     * Fetches a reference value of type {@code pc} from a given Java variable.\n-     * This method can return a reference to a value or a null reference\n-     * for a nullable reference of a primitive type.\n+     * Fetches a reference value of the given type from a given Java variable.\n+     * This method can return a reference to a value if it is non-null.\n+     * If the value is null, this method returns a default value for\n+     * primitive value types or null for identity classes and value classes.\n@@ -269,1 +270,1 @@\n-     * @param pc primitive class\n+     * @param type type\n@@ -271,1 +272,1 @@\n-    public Object getReference(Object o, long offset, Class<?> pc) {\n+    public Object getReference(Object o, long offset, Class<?> type) {\n@@ -273,2 +274,2 @@\n-        if (ref == null && PrimitiveClass.isPrimitiveValueType(pc)) {\n-            \/\/ If the type of the returned reference is a regular primitive type\n+        if (ref == null && PrimitiveClass.isPrimitiveValueType(type)) {\n+            \/\/ If the type of the returned reference is a primitive value type,\n@@ -276,1 +277,1 @@\n-            ref = uninitializedDefaultValue(pc);\n+            ref = uninitializedDefaultValue(type);\n@@ -281,1 +282,1 @@\n-    public Object getReferenceVolatile(Object o, long offset, Class<?> pc) {\n+    public Object getReferenceVolatile(Object o, long offset, Class<?> type) {\n@@ -283,2 +284,2 @@\n-        if (ref == null && PrimitiveClass.isPrimitiveValueType(pc)) {\n-            \/\/ If the type of the returned reference is a regular primitive type\n+        if (ref == null && PrimitiveClass.isPrimitiveValueType(type)) {\n+            \/\/ If the type of the returned reference is a primitive value type,\n@@ -286,1 +287,1 @@\n-            ref = uninitializedDefaultValue(pc);\n+            ref = uninitializedDefaultValue(type);\n@@ -292,1 +293,1 @@\n-     * Returns an uninitialized default value of the given primitive class.\n+     * Returns an uninitialized default value of the given value type.\n@@ -294,1 +295,1 @@\n-    public native <V> V uninitializedDefaultValue(Class<?> pc);\n+    public native <V> V uninitializedDefaultValue(Class<?> type);\n@@ -317,1 +318,1 @@\n-     * Returns the header size of the given primitive class.\n+     * Returns the header size of the given value type.\n@@ -319,3 +320,2 @@\n-     * @param pc primitive class\n-     * @param <V> value clas\n-     * @return the header size of the primitive class\n+     * @param valueType value type\n+     * @return the header size of the value type\n@@ -323,1 +323,1 @@\n-    public native <V> long valueHeaderSize(Class<V> pc);\n+    public native <V> long valueHeaderSize(Class<V> valueType);\n@@ -1551,2 +1551,2 @@\n-    private final boolean isInlineType(Object o) {\n-        return o != null && PrimitiveClass.isPrimitiveClass(o.getClass());\n+    private final boolean isValueObject(Object o) {\n+        return o != null && o.getClass().isValue();\n@@ -1563,1 +1563,1 @@\n-                                                    Class<?> valueType,\n+                                                    Class<?> type,\n@@ -1566,1 +1566,1 @@\n-        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n+        if (type.isValue() || isValueObject(expected)) {\n@@ -1607,1 +1607,1 @@\n-        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n+        if (valueType.isValue() || isValueObject(expected)) {\n@@ -1689,1 +1689,1 @@\n-        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n+        if (valueType.isValue() || isValueObject(expected)) {\n@@ -1715,1 +1715,1 @@\n-        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n+        if (valueType.isValue() || isValueObject(expected)) {\n@@ -1741,1 +1741,1 @@\n-        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n+        if (valueType.isValue() || isValueObject(expected)) {\n@@ -1767,1 +1767,1 @@\n-        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n+        if (valueType.isValue() || isValueObject(expected)) {\n@@ -2399,2 +2399,2 @@\n-     * a primitive type.  This is a temporary workaround until better localized\n-     * atomic access mechanisms are supported for primitive types.\n+     * a value type.  This is a temporary workaround until better localized\n+     * atomic access mechanisms are supported for value class and primitive class.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -24,31 +24,4 @@\n-final primitive class Value {\n-    final char char_v;\n-    final byte byte_v;\n-    final boolean boolean_v;\n-    final int int_v;\n-    final short short_v;\n-    final long long_v;\n-    final double double_v;\n-    final float float_v;\n-    final Point point_v;\n-    Value() {\n-        char_v = 'z';\n-        boolean_v = true;\n-        byte_v = 0;\n-        int_v = 1;\n-        short_v = 2;\n-        long_v = 3;\n-        float_v = 0.1f;\n-        double_v = 0.2d;\n-        point_v = new Point(1, 1);\n-    }\n-    public Value(char c, boolean z, byte b, int x, short y, long l, float f, double d, Point p) {\n-        this.char_v = c;\n-        this.byte_v = b;\n-        this.boolean_v = z;\n-        this.int_v = x;\n-        this.short_v = y;\n-        this.long_v = l;\n-        this.float_v = f;\n-        this.double_v = d;\n-        this.point_v = p;\n+value class Value {\n+    Point p;\n+    public Value(Point p) {\n+        this.p = p;\n@@ -57,3 +30,2 @@\n-    static Value getInstance() {\n-        return new Value('\\u0123', true, (byte)0x01, 0x01234567, (short)0x0123,\n-                         0x0123456789ABCDEFL, 1.0f, 1.0d, new Point(1, 1));\n+    static Value getInstance(Point p) {\n+        return new Value(p);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/Value.java","additions":6,"deletions":34,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessBoolean.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessBoolean\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessBoolean\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessBoolean\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessBoolean\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessBoolean\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessBoolean\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessBoolean\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessBoolean\n@@ -76,1 +75,0 @@\n-    VarHandle vhValueTypeField;\n@@ -128,3 +126,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"boolean_v\", type);\n@@ -286,5 +281,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -368,14 +358,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            boolean x = (boolean) vh.get(recv);\n-            assertEquals(x, true, \"get boolean value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, false);\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessBoolean.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessByte.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessByte\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessByte\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessByte\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessByte\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessByte\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessByte\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessByte\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessByte\n@@ -76,1 +75,0 @@\n-    VarHandle vhValueTypeField;\n@@ -128,3 +126,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"byte_v\", type);\n@@ -286,5 +281,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -357,14 +347,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            byte x = (byte) vh.get(recv);\n-            assertEquals(x, (byte)0x01, \"get byte value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, (byte)0x23);\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessByte.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessChar.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessChar\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessChar\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessChar\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessChar\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessChar\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessChar\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessChar\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessChar\n@@ -76,1 +75,0 @@\n-    VarHandle vhValueTypeField;\n@@ -128,3 +126,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"char_v\", type);\n@@ -286,5 +281,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -357,14 +347,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            char x = (char) vh.get(recv);\n-            assertEquals(x, '\\u0123', \"get char value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, '\\u4567');\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessChar.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessDouble.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessDouble\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessDouble\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessDouble\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessDouble\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessDouble\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessDouble\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessDouble\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessDouble\n@@ -76,1 +75,0 @@\n-    VarHandle vhValueTypeField;\n@@ -128,3 +126,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"double_v\", type);\n@@ -286,5 +281,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -392,14 +382,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            double x = (double) vh.get(recv);\n-            assertEquals(x, 1.0d, \"get double value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, 2.0d);\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessDouble.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessFloat.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessFloat\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessFloat\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessFloat\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessFloat\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessFloat\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessFloat\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessFloat\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessFloat\n@@ -76,1 +75,0 @@\n-    VarHandle vhValueTypeField;\n@@ -128,3 +126,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"float_v\", type);\n@@ -286,5 +281,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -392,14 +382,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            float x = (float) vh.get(recv);\n-            assertEquals(x, 1.0f, \"get float value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, 2.0f);\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessFloat.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessInt.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessInt\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessInt\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessInt\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessInt\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessInt\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessInt\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessInt\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessInt\n@@ -76,1 +75,0 @@\n-    VarHandle vhValueTypeField;\n@@ -128,3 +126,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"int_v\", type);\n@@ -286,5 +281,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -357,14 +347,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            int x = (int) vh.get(recv);\n-            assertEquals(x, 0x01234567, \"get int value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, 0x89ABCDEF);\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessInt.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessLong.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessLong\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessLong\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessLong\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessLong\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessLong\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessLong\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessLong\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessLong\n@@ -76,1 +75,0 @@\n-    VarHandle vhValueTypeField;\n@@ -128,3 +126,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"long_v\", type);\n@@ -286,5 +281,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -357,14 +347,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            long x = (long) vh.get(recv);\n-            assertEquals(x, 0x0123456789ABCDEFL, \"get long value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, 0xCAFEBABECAFEBABEL);\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessLong.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-\n@@ -79,1 +78,0 @@\n-    VarHandle vhValueTypeField;\n@@ -132,3 +130,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"point_v\", type);\n@@ -295,5 +290,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -412,14 +402,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            Point x = (Point) vh.get(recv);\n-            assertEquals(x, Point.getInstance(1,1), \"get Point value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, Point.getInstance(2,2));\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessPoint.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessShort.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessShort\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessShort\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessShort\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessShort\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessShort\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessShort\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessShort\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessShort\n@@ -76,1 +75,0 @@\n-    VarHandle vhValueTypeField;\n@@ -128,3 +126,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"short_v\", type);\n@@ -286,5 +281,0 @@\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n@@ -357,14 +347,0 @@\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            short x = (short) vh.get(recv);\n-            assertEquals(x, (short)0x0123, \"get short value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, (short)0x4567);\n-        });\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessShort.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,5 +28,4 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessString.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessString\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessString\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessString\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessString\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccessString\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessString\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccessString\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessString\n@@ -129,1 +128,0 @@\n-\n@@ -402,1 +400,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessString.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,1401 @@\n+\/*\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ -- This file was mechanically generated: Do not edit! -- \/\/\n+\n+\/*\n+ * @test\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestAccessValue.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=10    -Xint                   VarHandleTestAccessValue\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccessValue\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000                         VarHandleTestAccessValue\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccessValue\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.testng.Assert.*;\n+\n+public class VarHandleTestAccessValue extends VarHandleBaseTest {\n+    static final Class<?> type = Value.class;\n+\n+    static final Value static_final_v = Value.getInstance(Point.getInstance(1,1));\n+\n+    static Value static_v;\n+\n+    final Value final_v = Value.getInstance(Point.getInstance(1,1));\n+\n+    Value v;\n+\n+    static final Value static_final_v2 = Value.getInstance(Point.getInstance(1,1));\n+\n+    static Value static_v2;\n+\n+    final Value final_v2 = Value.getInstance(Point.getInstance(1,1));\n+\n+    Value v2;\n+\n+    VarHandle vhFinalField;\n+\n+    VarHandle vhField;\n+\n+    VarHandle vhStaticField;\n+\n+    VarHandle vhStaticFinalField;\n+\n+    VarHandle vhArray;\n+\n+    VarHandle vhArrayObject;\n+\n+    VarHandle[] allocate(boolean same) {\n+        List<VarHandle> vhs = new ArrayList<>();\n+\n+        String postfix = same ? \"\" : \"2\";\n+        VarHandle vh;\n+        try {\n+            vh = MethodHandles.lookup().findVarHandle(\n+                    VarHandleTestAccessValue.class, \"final_v\" + postfix, type);\n+            vhs.add(vh);\n+\n+            vh = MethodHandles.lookup().findVarHandle(\n+                    VarHandleTestAccessValue.class, \"v\" + postfix, type);\n+            vhs.add(vh);\n+\n+            vh = MethodHandles.lookup().findStaticVarHandle(\n+                VarHandleTestAccessValue.class, \"static_final_v\" + postfix, type);\n+            vhs.add(vh);\n+\n+            vh = MethodHandles.lookup().findStaticVarHandle(\n+                VarHandleTestAccessValue.class, \"static_v\" + postfix, type);\n+            vhs.add(vh);\n+\n+            if (same) {\n+                vh = MethodHandles.arrayElementVarHandle(Value[].class);\n+            }\n+            else {\n+                vh = MethodHandles.arrayElementVarHandle(String[].class);\n+            }\n+            vhs.add(vh);\n+        } catch (Exception e) {\n+            throw new InternalError(e);\n+        }\n+        return vhs.toArray(new VarHandle[0]);\n+    }\n+\n+    @BeforeClass\n+    public void setup() throws Exception {\n+        vhFinalField = MethodHandles.lookup().findVarHandle(\n+                VarHandleTestAccessValue.class, \"final_v\", type);\n+\n+        vhField = MethodHandles.lookup().findVarHandle(\n+                VarHandleTestAccessValue.class, \"v\", type);\n+\n+        vhStaticFinalField = MethodHandles.lookup().findStaticVarHandle(\n+            VarHandleTestAccessValue.class, \"static_final_v\", type);\n+\n+        vhStaticField = MethodHandles.lookup().findStaticVarHandle(\n+            VarHandleTestAccessValue.class, \"static_v\", type);\n+\n+        vhArray = MethodHandles.arrayElementVarHandle(Value[].class);\n+        vhArrayObject = MethodHandles.arrayElementVarHandle(Object[].class);\n+    }\n+\n+\n+    @DataProvider\n+    public Object[][] varHandlesProvider() throws Exception {\n+        List<VarHandle> vhs = new ArrayList<>();\n+        vhs.add(vhField);\n+        vhs.add(vhStaticField);\n+        vhs.add(vhArray);\n+\n+        return vhs.stream().map(tc -> new Object[]{tc}).toArray(Object[][]::new);\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        VarHandle[] vhs1 = allocate(true);\n+        VarHandle[] vhs2 = allocate(true);\n+\n+        for (int i = 0; i < vhs1.length; i++) {\n+            for (int j = 0; j < vhs1.length; j++) {\n+                if (i != j) {\n+                    assertNotEquals(vhs1[i], vhs1[j]);\n+                    assertNotEquals(vhs1[i], vhs2[j]);\n+                }\n+            }\n+        }\n+\n+        VarHandle[] vhs3 = allocate(false);\n+        for (int i = 0; i < vhs1.length; i++) {\n+            assertNotEquals(vhs1[i], vhs3[i]);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"varHandlesProvider\")\n+    public void testIsAccessModeSupported(VarHandle vh) {\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_VOLATILE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_VOLATILE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_ACQUIRE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_RELEASE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_OPAQUE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.SET_OPAQUE));\n+\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_SET));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_ACQUIRE));\n+        assertTrue(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_SET_RELEASE));\n+\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_ADD_RELEASE));\n+\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE));\n+        assertFalse(vh.isAccessModeSupported(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE));\n+    }\n+\n+\n+    @DataProvider\n+    public Object[][] typesProvider() throws Exception {\n+        List<Object[]> types = new ArrayList<>();\n+        types.add(new Object[] {vhField, Arrays.asList(VarHandleTestAccessValue.class)});\n+        types.add(new Object[] {vhStaticField, Arrays.asList()});\n+        types.add(new Object[] {vhArray, Arrays.asList(Value[].class, int.class)});\n+\n+        return types.stream().toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider = \"typesProvider\")\n+    public void testTypes(VarHandle vh, List<Class<?>> pts) {\n+        assertEquals(vh.varType(), type);\n+\n+        assertEquals(vh.coordinateTypes(), pts);\n+\n+        testTypes(vh);\n+    }\n+\n+\n+    @Test\n+    public void testLookupInstanceToStatic() {\n+        checkIAE(\"Lookup of static final field to instance final field\", () -> {\n+            MethodHandles.lookup().findStaticVarHandle(\n+                    VarHandleTestAccessValue.class, \"final_v\", type);\n+        });\n+\n+        checkIAE(\"Lookup of static field to instance field\", () -> {\n+            MethodHandles.lookup().findStaticVarHandle(\n+                    VarHandleTestAccessValue.class, \"v\", type);\n+        });\n+    }\n+\n+    @Test\n+    public void testLookupStaticToInstance() {\n+        checkIAE(\"Lookup of instance final field to static final field\", () -> {\n+            MethodHandles.lookup().findVarHandle(\n+                VarHandleTestAccessValue.class, \"static_final_v\", type);\n+        });\n+\n+        checkIAE(\"Lookup of instance field to static field\", () -> {\n+            vhStaticField = MethodHandles.lookup().findVarHandle(\n+                VarHandleTestAccessValue.class, \"static_v\", type);\n+        });\n+    }\n+\n+\n+    @DataProvider\n+    public Object[][] accessTestCaseProvider() throws Exception {\n+        List<AccessTestCase<?>> cases = new ArrayList<>();\n+\n+        cases.add(new VarHandleAccessTestCase(\"Instance final field\",\n+                                              vhFinalField, vh -> testInstanceFinalField(this, vh)));\n+        cases.add(new VarHandleAccessTestCase(\"Instance final field unsupported\",\n+                                              vhFinalField, vh -> testInstanceFinalFieldUnsupported(this, vh),\n+                                              false));\n+\n+        cases.add(new VarHandleAccessTestCase(\"Static final field\",\n+                                              vhStaticFinalField, VarHandleTestAccessValue::testStaticFinalField));\n+        cases.add(new VarHandleAccessTestCase(\"Static final field unsupported\",\n+                                              vhStaticFinalField, VarHandleTestAccessValue::testStaticFinalFieldUnsupported,\n+                                              false));\n+\n+        cases.add(new VarHandleAccessTestCase(\"Instance field\",\n+                                              vhField, vh -> testInstanceField(this, vh)));\n+        cases.add(new VarHandleAccessTestCase(\"Instance field unsupported\",\n+                                              vhField, vh -> testInstanceFieldUnsupported(this, vh),\n+                                              false));\n+\n+        cases.add(new VarHandleAccessTestCase(\"Static field\",\n+                                              vhStaticField, VarHandleTestAccessValue::testStaticField));\n+        cases.add(new VarHandleAccessTestCase(\"Static field unsupported\",\n+                                              vhStaticField, VarHandleTestAccessValue::testStaticFieldUnsupported,\n+                                              false));\n+\n+        cases.add(new VarHandleAccessTestCase(\"Array\",\n+                                              vhArray, VarHandleTestAccessValue::testArray));\n+        cases.add(new VarHandleAccessTestCase(\"Array Object[]\",\n+                                              vhArrayObject, VarHandleTestAccessValue::testArray));\n+        cases.add(new VarHandleAccessTestCase(\"Array unsupported\",\n+                                              vhArray, VarHandleTestAccessValue::testArrayUnsupported,\n+                                              false));\n+        cases.add(new VarHandleAccessTestCase(\"Array index out of bounds\",\n+                                              vhArray, VarHandleTestAccessValue::testArrayIndexOutOfBounds,\n+                                              false));\n+        cases.add(new VarHandleAccessTestCase(\"Array store exception\",\n+                                              vhArrayObject, VarHandleTestAccessValue::testArrayStoreException,\n+                                              false));\n+        \/\/ Work around issue with jtreg summary reporting which truncates\n+        \/\/ the String result of Object.toString to 30 characters, hence\n+        \/\/ the first dummy argument\n+        return cases.stream().map(tc -> new Object[]{tc.toString(), tc}).toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider = \"accessTestCaseProvider\")\n+    public <T> void testAccess(String desc, AccessTestCase<T> atc) throws Throwable {\n+        T t = atc.get();\n+        int iters = atc.requiresLoop() ? ITERS : 1;\n+        for (int c = 0; c < iters; c++) {\n+            atc.testAccess(t);\n+        }\n+    }\n+\n+\n+\n+\n+    static void testInstanceFinalField(VarHandleTestAccessValue recv, VarHandle vh) {\n+        \/\/ Plain\n+        {\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"get Value value\");\n+        }\n+\n+\n+        \/\/ Volatile\n+        {\n+            Value x = (Value) vh.getVolatile(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"getVolatile Value value\");\n+        }\n+\n+        \/\/ Lazy\n+        {\n+            Value x = (Value) vh.getAcquire(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"getRelease Value value\");\n+        }\n+\n+        \/\/ Opaque\n+        {\n+            Value x = (Value) vh.getOpaque(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"getOpaque Value value\");\n+        }\n+    }\n+\n+    static void testInstanceFinalFieldUnsupported(VarHandleTestAccessValue recv, VarHandle vh) {\n+        checkUOE(() -> {\n+            vh.set(recv, Value.getInstance(Point.getInstance(2,2)));\n+        });\n+\n+        checkUOE(() -> {\n+            vh.setVolatile(recv, Value.getInstance(Point.getInstance(2,2)));\n+        });\n+\n+        checkUOE(() -> {\n+            vh.setRelease(recv, Value.getInstance(Point.getInstance(2,2)));\n+        });\n+\n+        checkUOE(() -> {\n+            vh.setOpaque(recv, Value.getInstance(Point.getInstance(2,2)));\n+        });\n+\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAdd(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOr(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAnd(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXor(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+    }\n+\n+    static void testStaticFinalField(VarHandle vh) {\n+        \/\/ Plain\n+        {\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"get Value value\");\n+        }\n+\n+\n+        \/\/ Volatile\n+        {\n+            Value x = (Value) vh.getVolatile();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"getVolatile Value value\");\n+        }\n+\n+        \/\/ Lazy\n+        {\n+            Value x = (Value) vh.getAcquire();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"getRelease Value value\");\n+        }\n+\n+        \/\/ Opaque\n+        {\n+            Value x = (Value) vh.getOpaque();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"getOpaque Value value\");\n+        }\n+    }\n+\n+    static void testStaticFinalFieldUnsupported(VarHandle vh) {\n+        checkUOE(() -> {\n+            vh.set(Value.getInstance(Point.getInstance(2,2)));\n+        });\n+\n+        checkUOE(() -> {\n+            vh.setVolatile(Value.getInstance(Point.getInstance(2,2)));\n+        });\n+\n+        checkUOE(() -> {\n+            vh.setRelease(Value.getInstance(Point.getInstance(2,2)));\n+        });\n+\n+        checkUOE(() -> {\n+            vh.setOpaque(Value.getInstance(Point.getInstance(2,2)));\n+        });\n+\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAdd(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOr(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAnd(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXor(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+    }\n+\n+\n+    static void testInstanceField(VarHandleTestAccessValue recv, VarHandle vh) {\n+        \/\/ Plain\n+        {\n+            vh.set(recv, Value.getInstance(Point.getInstance(1,1)));\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"set Value value\");\n+        }\n+\n+\n+        \/\/ Volatile\n+        {\n+            vh.setVolatile(recv, Value.getInstance(Point.getInstance(2,2)));\n+            Value x = (Value) vh.getVolatile(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setVolatile Value value\");\n+        }\n+\n+        \/\/ Lazy\n+        {\n+            vh.setRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+            Value x = (Value) vh.getAcquire(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"setRelease Value value\");\n+        }\n+\n+        \/\/ Opaque\n+        {\n+            vh.setOpaque(recv, Value.getInstance(Point.getInstance(2,2)));\n+            Value x = (Value) vh.getOpaque(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setOpaque Value value\");\n+        }\n+\n+        vh.set(recv, Value.getInstance(Point.getInstance(1,1)));\n+\n+        \/\/ Compare\n+        {\n+            boolean r = vh.compareAndSet(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(r, true, \"success compareAndSet Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndSet Value value\");\n+        }\n+\n+        {\n+            boolean r = vh.compareAndSet(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, false, \"failing compareAndSet Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndSet Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchange(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchange Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchange Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchange(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchangeAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeAcquire Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeAcquire Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchangeAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchangeRelease(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeRelease Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeRelease Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchangeRelease(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = vh.weakCompareAndSetPlain(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetPlain Value value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetPlain(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetPlain Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = vh.weakCompareAndSetAcquire(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSetAcquire Value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetAcquire(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSetAcquire Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = vh.weakCompareAndSetRelease(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetRelease Value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetRelease(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetRelease Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = vh.weakCompareAndSet(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSet Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSet Value value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSet(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSet Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSet Value value\");\n+        }\n+\n+        \/\/ Compare set and get\n+        {\n+            vh.set(recv, Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) vh.getAndSet(recv, Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSet Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSet Value value\");\n+        }\n+\n+        {\n+            vh.set(recv, Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) vh.getAndSetAcquire(recv, Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetAcquire Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetAcquire Value value\");\n+        }\n+\n+        {\n+            vh.set(recv, Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) vh.getAndSetRelease(recv, Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetRelease Value\");\n+            Value x = (Value) vh.get(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetRelease Value value\");\n+        }\n+\n+\n+    }\n+\n+    static void testInstanceFieldUnsupported(VarHandleTestAccessValue recv, VarHandle vh) {\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAdd(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOr(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAnd(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXor(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+    }\n+\n+\n+    static void testStaticField(VarHandle vh) {\n+        \/\/ Plain\n+        {\n+            vh.set(Value.getInstance(Point.getInstance(1,1)));\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"set Value value\");\n+        }\n+\n+\n+        \/\/ Volatile\n+        {\n+            vh.setVolatile(Value.getInstance(Point.getInstance(2,2)));\n+            Value x = (Value) vh.getVolatile();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setVolatile Value value\");\n+        }\n+\n+        \/\/ Lazy\n+        {\n+            vh.setRelease(Value.getInstance(Point.getInstance(1,1)));\n+            Value x = (Value) vh.getAcquire();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"setRelease Value value\");\n+        }\n+\n+        \/\/ Opaque\n+        {\n+            vh.setOpaque(Value.getInstance(Point.getInstance(2,2)));\n+            Value x = (Value) vh.getOpaque();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setOpaque Value value\");\n+        }\n+\n+        vh.set(Value.getInstance(Point.getInstance(1,1)));\n+\n+        \/\/ Compare\n+        {\n+            boolean r = vh.compareAndSet(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(r, true, \"success compareAndSet Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndSet Value value\");\n+        }\n+\n+        {\n+            boolean r = vh.compareAndSet(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, false, \"failing compareAndSet Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndSet Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchange(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchange Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchange Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchange(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchangeAcquire(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeAcquire Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeAcquire Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchangeAcquire(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchangeRelease(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeRelease Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeRelease Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) vh.compareAndExchangeRelease(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = vh.weakCompareAndSetPlain(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetPlain Value value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetPlain(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetPlain Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = vh.weakCompareAndSetAcquire(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSetAcquire Value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetAcquire(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSetAcquire Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = vh.weakCompareAndSetRelease(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetRelease Value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSetRelease(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetRelease Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = vh.weakCompareAndSet(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSet Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSet Value\");\n+        }\n+\n+        {\n+            boolean success = vh.weakCompareAndSet(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSet Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSet Value value\");\n+        }\n+\n+        \/\/ Compare set and get\n+        {\n+            vh.set(Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) vh.getAndSet(Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSet Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSet Value value\");\n+        }\n+\n+        {\n+            vh.set(Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) vh.getAndSetAcquire(Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetAcquire Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetAcquire Value value\");\n+        }\n+\n+        {\n+            vh.set(Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) vh.getAndSetRelease(Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetRelease Value\");\n+            Value x = (Value) vh.get();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetRelease Value value\");\n+        }\n+\n+\n+    }\n+\n+    static void testStaticFieldUnsupported(VarHandle vh) {\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAdd(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOr(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAnd(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXor(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+    }\n+\n+\n+    static void testArray(VarHandle vh) {\n+        Value[] array = new Value[10];\n+\n+        for (int i = 0; i < array.length; i++) {\n+            \/\/ Plain\n+            {\n+                vh.set(array, i, Value.getInstance(Point.getInstance(1,1)));\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"get Value value\");\n+            }\n+\n+\n+            \/\/ Volatile\n+            {\n+                vh.setVolatile(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                Value x = (Value) vh.getVolatile(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setVolatile Value value\");\n+            }\n+\n+            \/\/ Lazy\n+            {\n+                vh.setRelease(array, i, Value.getInstance(Point.getInstance(1,1)));\n+                Value x = (Value) vh.getAcquire(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"setRelease Value value\");\n+            }\n+\n+            \/\/ Opaque\n+            {\n+                vh.setOpaque(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                Value x = (Value) vh.getOpaque(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setOpaque Value value\");\n+            }\n+\n+            vh.set(array, i, Value.getInstance(Point.getInstance(1,1)));\n+\n+            \/\/ Compare\n+            {\n+                boolean r = vh.compareAndSet(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(r, true, \"success compareAndSet Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndSet Value value\");\n+            }\n+\n+            {\n+                boolean r = vh.compareAndSet(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(r, false, \"failing compareAndSet Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndSet Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) vh.compareAndExchange(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchange Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchange Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) vh.compareAndExchange(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) vh.compareAndExchangeAcquire(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeAcquire Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeAcquire Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) vh.compareAndExchangeAcquire(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) vh.compareAndExchangeRelease(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeRelease Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeRelease Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) vh.compareAndExchangeRelease(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value value\");\n+            }\n+\n+            {\n+                boolean success = false;\n+                for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                    success = vh.weakCompareAndSetPlain(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                    if (!success) weakDelay();\n+                }\n+                assertEquals(success, true, \"success weakCompareAndSetPlain Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetPlain Value value\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetPlain(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(success, false, \"failing weakCompareAndSetPlain Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetPlain Value value\");\n+            }\n+\n+            {\n+                boolean success = false;\n+                for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                    success = vh.weakCompareAndSetAcquire(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                    if (!success) weakDelay();\n+                }\n+                assertEquals(success, true, \"success weakCompareAndSetAcquire Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSetAcquire Value\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetAcquire(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSetAcquire Value value\");\n+            }\n+\n+            {\n+                boolean success = false;\n+                for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                    success = vh.weakCompareAndSetRelease(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                    if (!success) weakDelay();\n+                }\n+                assertEquals(success, true, \"success weakCompareAndSetRelease Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetRelease Value\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSetRelease(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(success, false, \"failing weakCompareAndSetRelease Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetRelease Value value\");\n+            }\n+\n+            {\n+                boolean success = false;\n+                for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                    success = vh.weakCompareAndSet(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                    if (!success) weakDelay();\n+                }\n+                assertEquals(success, true, \"success weakCompareAndSet Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSet Value\");\n+            }\n+\n+            {\n+                boolean success = vh.weakCompareAndSet(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(success, false, \"failing weakCompareAndSet Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSet Value value\");\n+            }\n+\n+            \/\/ Compare set and get\n+            {\n+                vh.set(array, i, Value.getInstance(Point.getInstance(1,1)));\n+\n+                Value o = (Value) vh.getAndSet(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSet Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSet Value value\");\n+            }\n+\n+            {\n+                vh.set(array, i, Value.getInstance(Point.getInstance(1,1)));\n+\n+                Value o = (Value) vh.getAndSetAcquire(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetAcquire Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetAcquire Value value\");\n+            }\n+\n+            {\n+                vh.set(array, i, Value.getInstance(Point.getInstance(1,1)));\n+\n+                Value o = (Value) vh.getAndSetRelease(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetRelease Value\");\n+                Value x = (Value) vh.get(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetRelease Value value\");\n+            }\n+\n+\n+        }\n+    }\n+\n+    static void testArrayUnsupported(VarHandle vh) {\n+        Value[] array = new Value[10];\n+\n+        int i = 0;\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAdd(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddAcquire(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndAddRelease(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOr(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrAcquire(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseOrRelease(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAnd(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndAcquire(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseAndRelease(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXor(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorAcquire(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+\n+        checkUOE(() -> {\n+            Value o = (Value) vh.getAndBitwiseXorRelease(array, i, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+    }\n+\n+    static void testArrayIndexOutOfBounds(VarHandle vh) throws Throwable {\n+        Value[] array = new Value[10];\n+\n+        for (int i : new int[]{-1, Integer.MIN_VALUE, 10, 11, Integer.MAX_VALUE}) {\n+            final int ci = i;\n+\n+            checkAIOOBE(() -> {\n+                Value x = (Value) vh.get(array, ci);\n+            });\n+\n+            checkAIOOBE(() -> {\n+                vh.set(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value x = (Value) vh.getVolatile(array, ci);\n+            });\n+\n+            checkAIOOBE(() -> {\n+                vh.setVolatile(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value x = (Value) vh.getAcquire(array, ci);\n+            });\n+\n+            checkAIOOBE(() -> {\n+                vh.setRelease(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value x = (Value) vh.getOpaque(array, ci);\n+            });\n+\n+            checkAIOOBE(() -> {\n+                vh.setOpaque(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                boolean r = vh.compareAndSet(array, ci, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value r = (Value) vh.compareAndExchange(array, ci, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value r = (Value) vh.compareAndExchangeAcquire(array, ci, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value r = (Value) vh.compareAndExchangeRelease(array, ci, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                boolean r = vh.weakCompareAndSetPlain(array, ci, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                boolean r = vh.weakCompareAndSet(array, ci, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                boolean r = vh.weakCompareAndSetAcquire(array, ci, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                boolean r = vh.weakCompareAndSetRelease(array, ci, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value o = (Value) vh.getAndSet(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value o = (Value) vh.getAndSetAcquire(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+            checkAIOOBE(() -> {\n+                Value o = (Value) vh.getAndSetRelease(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+\n+\n+        }\n+    }\n+\n+    static void testArrayStoreException(VarHandle vh) throws Throwable {\n+        Object[] array = new Value[10];\n+        Arrays.fill(array, Value.getInstance(Point.getInstance(1,1)));\n+        Object value = new Object();\n+\n+        \/\/ Set\n+        checkASE(() -> {\n+            vh.set(array, 0, value);\n+        });\n+\n+        \/\/ SetVolatile\n+        checkASE(() -> {\n+            vh.setVolatile(array, 0, value);\n+        });\n+\n+        \/\/ SetOpaque\n+        checkASE(() -> {\n+            vh.setOpaque(array, 0, value);\n+        });\n+\n+        \/\/ SetRelease\n+        checkASE(() -> {\n+            vh.setRelease(array, 0, value);\n+        });\n+\n+        \/\/ CompareAndSet\n+        checkASE(() -> { \/\/ receiver reference class\n+            boolean r = vh.compareAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)), value);\n+        });\n+\n+        \/\/ WeakCompareAndSet\n+        checkASE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetPlain(array, 0, Value.getInstance(Point.getInstance(1,1)), value);\n+        });\n+\n+        \/\/ WeakCompareAndSetVolatile\n+        checkASE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)), value);\n+        });\n+\n+        \/\/ WeakCompareAndSetAcquire\n+        checkASE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), value);\n+        });\n+\n+        \/\/ WeakCompareAndSetRelease\n+        checkASE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), value);\n+        });\n+\n+        \/\/ CompareAndExchange\n+        checkASE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.compareAndExchange(array, 0, Value.getInstance(Point.getInstance(1,1)), value);\n+        });\n+\n+        \/\/ CompareAndExchangeAcquire\n+        checkASE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), value);\n+        });\n+\n+        \/\/ CompareAndExchangeRelease\n+        checkASE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), value);\n+        });\n+\n+        \/\/ GetAndSet\n+        checkASE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getAndSet(array, 0, value);\n+        });\n+\n+        \/\/ GetAndSetAcquire\n+        checkASE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getAndSetAcquire(array, 0, value);\n+        });\n+\n+        \/\/ GetAndSetRelease\n+        checkASE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getAndSetRelease(array, 0, value);\n+        });\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessValue.java","additions":1401,"deletions":0,"binary":false,"changes":1401,"status":"added"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessBoolean.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessBoolean\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessBoolean\n@@ -50,1 +49,1 @@\n-    static boolean static_v;\n+    static boolean static_v = true;\n@@ -66,2 +65,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -83,3 +80,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"boolean_v\", type);\n@@ -114,5 +108,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -406,23 +395,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            boolean x = (boolean) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, true, \"get boolean value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, true);\n-            });\n-        }\n-\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_ADD)) {\n-            checkUOE(am, () -> {\n-                boolean r = (boolean) hs.get(am).invokeExact(recv, true);\n-            });\n-        }\n-\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessBoolean.java","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessByte.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessByte\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessByte\n@@ -50,1 +49,1 @@\n-    static byte static_v;\n+    static byte static_v = (byte)0x01;\n@@ -66,2 +65,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -83,3 +80,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"byte_v\", type);\n@@ -114,5 +108,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -428,18 +417,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            byte x = (byte) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, (byte)0x01, \"get byte value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, (byte)0x01);\n-            });\n-        }\n-\n-\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessByte.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessChar.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessChar\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessChar\n@@ -50,1 +49,1 @@\n-    static char static_v;\n+    static char static_v = '\\u0123';\n@@ -66,2 +65,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -83,3 +80,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"char_v\", type);\n@@ -114,5 +108,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -428,18 +417,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            char x = (char) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, '\\u0123', \"get char value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, '\\u0123');\n-            });\n-        }\n-\n-\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessChar.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessDouble.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessDouble\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessDouble\n@@ -50,1 +49,1 @@\n-    static double static_v;\n+    static double static_v = 1.0d;\n@@ -66,2 +65,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -83,3 +80,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"double_v\", type);\n@@ -114,5 +108,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -350,23 +339,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            double x = (double) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, 1.0d, \"get double value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, 1.0d);\n-            });\n-        }\n-\n-\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_BITWISE)) {\n-            checkUOE(am, () -> {\n-                double r = (double) hs.get(am).invokeExact(recv, 1.0d);\n-            });\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessDouble.java","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessFloat.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessFloat\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessFloat\n@@ -50,1 +49,1 @@\n-    static float static_v;\n+    static float static_v = 1.0f;\n@@ -66,2 +65,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -83,3 +80,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"float_v\", type);\n@@ -114,5 +108,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -350,23 +339,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            float x = (float) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, 1.0f, \"get float value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, 1.0f);\n-            });\n-        }\n-\n-\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_BITWISE)) {\n-            checkUOE(am, () -> {\n-                float r = (float) hs.get(am).invokeExact(recv, 1.0f);\n-            });\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessFloat.java","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessInt.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessInt\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessInt\n@@ -50,1 +49,1 @@\n-    static int static_v;\n+    static int static_v = 0x01234567;\n@@ -66,2 +65,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -83,3 +80,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"int_v\", type);\n@@ -114,5 +108,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -428,18 +417,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            int x = (int) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, 0x01234567, \"get int value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, 0x01234567);\n-            });\n-        }\n-\n-\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessInt.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessLong.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessLong\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessLong\n@@ -50,1 +49,1 @@\n-    static long static_v;\n+    static long static_v = 0x0123456789ABCDEFL;\n@@ -66,2 +65,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -83,3 +80,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"long_v\", type);\n@@ -114,5 +108,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -428,18 +417,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            long x = (long) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, 0x0123456789ABCDEFL, \"get long value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, 0x0123456789ABCDEFL);\n-            });\n-        }\n-\n-\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessLong.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-\n@@ -52,1 +51,1 @@\n-    static Point static_v;\n+    static Point static_v = Point.getInstance(1,1);\n@@ -68,2 +67,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -85,3 +82,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"point_v\", type);\n@@ -116,5 +110,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -330,28 +319,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            Point x = (Point) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, Point.getInstance(1,1), \"get Point value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, Point.getInstance(1,1));\n-            });\n-        }\n-\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_ADD)) {\n-            checkUOE(am, () -> {\n-                Point r = (Point) hs.get(am).invokeExact(recv, Point.getInstance(1,1));\n-            });\n-        }\n-\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_BITWISE)) {\n-            checkUOE(am, () -> {\n-                Point r = (Point) hs.get(am).invokeExact(recv, Point.getInstance(1,1));\n-            });\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessPoint.java","additions":1,"deletions":40,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessShort.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessShort\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessShort\n@@ -50,1 +49,1 @@\n-    static short static_v;\n+    static short static_v = (short)0x0123;\n@@ -66,2 +65,0 @@\n-    VarHandle vhValueTypeField;\n-\n@@ -83,3 +80,0 @@\n-\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"short_v\", type);\n@@ -114,5 +108,0 @@\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n@@ -428,18 +417,0 @@\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            short x = (short) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, (short)0x0123, \"get short value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, (short)0x0123);\n-            });\n-        }\n-\n-\n-    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessShort.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessString.java\n- * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessString\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccessString\n@@ -50,1 +49,1 @@\n-    static String static_v;\n+    static String static_v = \"foo\";\n@@ -66,1 +65,0 @@\n-\n@@ -82,1 +80,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessString.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,792 @@\n+\/*\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ -- This file was mechanically generated: Do not edit! -- \/\/\n+\n+\/*\n+ * @test\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodHandleAccessValue.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Diters=2000 VarHandleTestMethodHandleAccessValue\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.testng.Assert.*;\n+\n+public class VarHandleTestMethodHandleAccessValue extends VarHandleBaseTest {\n+    static final Class<?> type = Value.class;\n+\n+    static final Value static_final_v = Value.getInstance(Point.getInstance(1,1));\n+\n+    static Value static_v = Value.getInstance(Point.getInstance(1,1));\n+\n+    final Value final_v = Value.getInstance(Point.getInstance(1,1));\n+\n+    Value v;\n+\n+    VarHandle vhFinalField;\n+\n+    VarHandle vhField;\n+\n+    VarHandle vhStaticField;\n+\n+    VarHandle vhStaticFinalField;\n+\n+    VarHandle vhArray;\n+\n+    @BeforeClass\n+    public void setup() throws Exception {\n+        vhFinalField = MethodHandles.lookup().findVarHandle(\n+                VarHandleTestMethodHandleAccessValue.class, \"final_v\", type);\n+\n+        vhField = MethodHandles.lookup().findVarHandle(\n+                VarHandleTestMethodHandleAccessValue.class, \"v\", type);\n+\n+        vhStaticFinalField = MethodHandles.lookup().findStaticVarHandle(\n+            VarHandleTestMethodHandleAccessValue.class, \"static_final_v\", type);\n+\n+        vhStaticField = MethodHandles.lookup().findStaticVarHandle(\n+            VarHandleTestMethodHandleAccessValue.class, \"static_v\", type);\n+\n+        vhArray = MethodHandles.arrayElementVarHandle(Value[].class);\n+    }\n+\n+\n+    @DataProvider\n+    public Object[][] accessTestCaseProvider() throws Exception {\n+        List<AccessTestCase<?>> cases = new ArrayList<>();\n+\n+        for (VarHandleToMethodHandle f : VarHandleToMethodHandle.values()) {\n+            cases.add(new MethodHandleAccessTestCase(\"Instance field\",\n+                                                     vhField, f, hs -> testInstanceField(this, hs)));\n+            cases.add(new MethodHandleAccessTestCase(\"Instance field unsupported\",\n+                                                     vhField, f, hs -> testInstanceFieldUnsupported(this, hs),\n+                                                     false));\n+\n+            cases.add(new MethodHandleAccessTestCase(\"Static field\",\n+                                                     vhStaticField, f, VarHandleTestMethodHandleAccessValue::testStaticField));\n+            cases.add(new MethodHandleAccessTestCase(\"Static field unsupported\",\n+                                                     vhStaticField, f, VarHandleTestMethodHandleAccessValue::testStaticFieldUnsupported,\n+                                                     false));\n+\n+            cases.add(new MethodHandleAccessTestCase(\"Array\",\n+                                                     vhArray, f, VarHandleTestMethodHandleAccessValue::testArray));\n+            cases.add(new MethodHandleAccessTestCase(\"Array unsupported\",\n+                                                     vhArray, f, VarHandleTestMethodHandleAccessValue::testArrayUnsupported,\n+                                                     false));\n+            cases.add(new MethodHandleAccessTestCase(\"Array index out of bounds\",\n+                                                     vhArray, f, VarHandleTestMethodHandleAccessValue::testArrayIndexOutOfBounds,\n+                                                     false));\n+        }\n+\n+        \/\/ Work around issue with jtreg summary reporting which truncates\n+        \/\/ the String result of Object.toString to 30 characters, hence\n+        \/\/ the first dummy argument\n+        return cases.stream().map(tc -> new Object[]{tc.toString(), tc}).toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider = \"accessTestCaseProvider\")\n+    public <T> void testAccess(String desc, AccessTestCase<T> atc) throws Throwable {\n+        T t = atc.get();\n+        int iters = atc.requiresLoop() ? ITERS : 1;\n+        for (int c = 0; c < iters; c++) {\n+            atc.testAccess(t);\n+        }\n+    }\n+\n+\n+    static void testInstanceField(VarHandleTestMethodHandleAccessValue recv, Handles hs) throws Throwable {\n+        \/\/ Plain\n+        {\n+            hs.get(TestAccessMode.SET).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)));\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"set Value value\");\n+        }\n+\n+\n+        \/\/ Volatile\n+        {\n+            hs.get(TestAccessMode.SET_VOLATILE).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)));\n+            Value x = (Value) hs.get(TestAccessMode.GET_VOLATILE).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setVolatile Value value\");\n+        }\n+\n+        \/\/ Lazy\n+        {\n+            hs.get(TestAccessMode.SET_RELEASE).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)));\n+            Value x = (Value) hs.get(TestAccessMode.GET_ACQUIRE).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"setRelease Value value\");\n+        }\n+\n+        \/\/ Opaque\n+        {\n+            hs.get(TestAccessMode.SET_OPAQUE).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)));\n+            Value x = (Value) hs.get(TestAccessMode.GET_OPAQUE).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setOpaque Value value\");\n+        }\n+\n+        hs.get(TestAccessMode.SET).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)));\n+\n+        \/\/ Compare\n+        {\n+            boolean r = (boolean) hs.get(TestAccessMode.COMPARE_AND_SET).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(r, true, \"success compareAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndSet Value value\");\n+        }\n+\n+        {\n+            boolean r = (boolean) hs.get(TestAccessMode.COMPARE_AND_SET).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, false, \"failing compareAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndSet Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchange Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchange Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_ACQUIRE).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeAcquire Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_ACQUIRE).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_RELEASE).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeRelease Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_RELEASE).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = (boolean) mh.invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetPlain Value value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetPlain Value value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = (boolean) mh.invokeExact(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSetAcquire Value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSetAcquire Value value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = (boolean) mh.invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetRelease Value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetRelease Value value\");\n+        }\n+\n+        {\n+            boolean success = false;\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = (boolean) mh.invokeExact(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSet Value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSet Value value\");\n+        }\n+\n+        \/\/ Compare set and get\n+        {\n+            Value o = (Value) hs.get(TestAccessMode.GET_AND_SET).invokeExact(recv, Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(recv);\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSet Value value\");\n+        }\n+\n+\n+    }\n+\n+    static void testInstanceFieldUnsupported(VarHandleTestMethodHandleAccessValue recv, Handles hs) throws Throwable {\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_ADD)) {\n+            checkUOE(am, () -> {\n+                Value r = (Value) hs.get(am).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_BITWISE)) {\n+            checkUOE(am, () -> {\n+                Value r = (Value) hs.get(am).invokeExact(recv, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+        }\n+    }\n+\n+\n+    static void testStaticField(Handles hs) throws Throwable {\n+        \/\/ Plain\n+        {\n+            hs.get(TestAccessMode.SET).invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"set Value value\");\n+        }\n+\n+\n+        \/\/ Volatile\n+        {\n+            hs.get(TestAccessMode.SET_VOLATILE).invokeExact(Value.getInstance(Point.getInstance(2,2)));\n+            Value x = (Value) hs.get(TestAccessMode.GET_VOLATILE).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setVolatile Value value\");\n+        }\n+\n+        \/\/ Lazy\n+        {\n+            hs.get(TestAccessMode.SET_RELEASE).invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+            Value x = (Value) hs.get(TestAccessMode.GET_ACQUIRE).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"setRelease Value value\");\n+        }\n+\n+        \/\/ Opaque\n+        {\n+            hs.get(TestAccessMode.SET_OPAQUE).invokeExact(Value.getInstance(Point.getInstance(2,2)));\n+            Value x = (Value) hs.get(TestAccessMode.GET_OPAQUE).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setOpaque Value value\");\n+        }\n+\n+        hs.get(TestAccessMode.SET).invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+\n+        \/\/ Compare\n+        {\n+            boolean r = (boolean) hs.get(TestAccessMode.COMPARE_AND_SET).invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(r, true, \"success compareAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndSet Value value\");\n+        }\n+\n+        {\n+            boolean r = (boolean) hs.get(TestAccessMode.COMPARE_AND_SET).invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, false, \"failing compareAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndSet Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE).invokeExact(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchange Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchange Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE).invokeExact(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_ACQUIRE).invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeAcquire Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_ACQUIRE).invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_RELEASE).invokeExact(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeRelease Value value\");\n+        }\n+\n+        {\n+            Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_RELEASE).invokeExact(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = (boolean) mh.invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetPlain Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetPlain Value value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetPlain Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetPlain Value value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = (boolean) mh.invokeExact(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSetAcquire Value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSetAcquire Value value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = (boolean) mh.invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSetRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetRelease Value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSetRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetRelease Value value\");\n+        }\n+\n+        {\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n+            boolean success = false;\n+            for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                success = (boolean) mh.invokeExact(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                if (!success) weakDelay();\n+            }\n+            assertEquals(success, true, \"success weakCompareAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSet Value\");\n+        }\n+\n+        {\n+            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+            assertEquals(success, false, \"failing weakCompareAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSetRe Value value\");\n+        }\n+\n+        \/\/ Compare set and get\n+        {\n+            hs.get(TestAccessMode.SET).invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) hs.get(TestAccessMode.GET_AND_SET).invokeExact(Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSet Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSet Value value\");\n+        }\n+\n+        \/\/ Compare set and get\n+        {\n+            hs.get(TestAccessMode.SET).invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) hs.get(TestAccessMode.GET_AND_SET_ACQUIRE).invokeExact(Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetAcquire Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetAcquire Value value\");\n+        }\n+\n+        \/\/ Compare set and get\n+        {\n+            hs.get(TestAccessMode.SET).invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+\n+            Value o = (Value) hs.get(TestAccessMode.GET_AND_SET_RELEASE).invokeExact(Value.getInstance(Point.getInstance(2,2)));\n+            assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetRelease Value\");\n+            Value x = (Value) hs.get(TestAccessMode.GET).invokeExact();\n+            assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetRelease Value value\");\n+        }\n+\n+\n+    }\n+\n+    static void testStaticFieldUnsupported(Handles hs) throws Throwable {\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_ADD)) {\n+            checkUOE(am, () -> {\n+                Value r = (Value) hs.get(am).invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_BITWISE)) {\n+            checkUOE(am, () -> {\n+                Value r = (Value) hs.get(am).invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+            });\n+        }\n+    }\n+\n+\n+    static void testArray(Handles hs) throws Throwable {\n+        Value[] array = new Value[10];\n+\n+        for (int i = 0; i < array.length; i++) {\n+            \/\/ Plain\n+            {\n+                hs.get(TestAccessMode.SET).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)));\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"get Value value\");\n+            }\n+\n+\n+            \/\/ Volatile\n+            {\n+                hs.get(TestAccessMode.SET_VOLATILE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                Value x = (Value) hs.get(TestAccessMode.GET_VOLATILE).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setVolatile Value value\");\n+            }\n+\n+            \/\/ Lazy\n+            {\n+                hs.get(TestAccessMode.SET_RELEASE).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)));\n+                Value x = (Value) hs.get(TestAccessMode.GET_ACQUIRE).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"setRelease Value value\");\n+            }\n+\n+            \/\/ Opaque\n+            {\n+                hs.get(TestAccessMode.SET_OPAQUE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                Value x = (Value) hs.get(TestAccessMode.GET_OPAQUE).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"setOpaque Value value\");\n+            }\n+\n+            hs.get(TestAccessMode.SET).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)));\n+\n+            \/\/ Compare\n+            {\n+                boolean r = (boolean) hs.get(TestAccessMode.COMPARE_AND_SET).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(r, true, \"success compareAndSet Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndSet Value value\");\n+            }\n+\n+            {\n+                boolean r = (boolean) hs.get(TestAccessMode.COMPARE_AND_SET).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(r, false, \"failing compareAndSet Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndSet Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchange Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchange Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchange Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_ACQUIRE).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeAcquire Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeAcquire Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_ACQUIRE).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing compareAndExchangeAcquire Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_RELEASE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(2,2)), \"success compareAndExchangeRelease Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success compareAndExchangeRelease Value value\");\n+            }\n+\n+            {\n+                Value r = (Value) hs.get(TestAccessMode.COMPARE_AND_EXCHANGE_RELEASE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(r, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing compareAndExchangeRelease Value value\");\n+            }\n+\n+            {\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n+                boolean success = false;\n+                for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                    success = (boolean) mh.invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                    if (!success) weakDelay();\n+                }\n+                assertEquals(success, true, \"success weakCompareAndSetPlain Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetPlain Value value\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(success, false, \"failing weakCompareAndSetPlain Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetPlain Value value\");\n+            }\n+\n+            {\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+                boolean success = false;\n+                for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                    success = (boolean) mh.invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                    if (!success) weakDelay();\n+                }\n+                assertEquals(success, true, \"success weakCompareAndSetAcquire Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSetAcquire Value\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSetAcquire Value value\");\n+            }\n+\n+            {\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n+                boolean success = false;\n+                for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                    success = (boolean) mh.invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                    if (!success) weakDelay();\n+                }\n+                assertEquals(success, true, \"success weakCompareAndSetRelease Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"success weakCompareAndSetRelease Value\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(success, false, \"failing weakCompareAndSetAcquire Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"failing weakCompareAndSetAcquire Value value\");\n+            }\n+\n+            {\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n+                boolean success = false;\n+                for (int c = 0; c < WEAK_ATTEMPTS && !success; c++) {\n+                    success = (boolean) mh.invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                    if (!success) weakDelay();\n+                }\n+                assertEquals(success, true, \"success weakCompareAndSet Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"success weakCompareAndSet Value\");\n+            }\n+\n+            {\n+                boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(3,3)));\n+                assertEquals(success, false, \"failing weakCompareAndSet Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(1,1)), \"failing weakCompareAndSet Value value\");\n+            }\n+\n+            \/\/ Compare set and get\n+            {\n+                hs.get(TestAccessMode.SET).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)));\n+\n+                Value o = (Value) hs.get(TestAccessMode.GET_AND_SET).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSet Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSet Value value\");\n+            }\n+\n+            {\n+                hs.get(TestAccessMode.SET).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)));\n+\n+                Value o = (Value) hs.get(TestAccessMode.GET_AND_SET_ACQUIRE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetAcquire Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetAcquire Value value\");\n+            }\n+\n+            {\n+                hs.get(TestAccessMode.SET).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)));\n+\n+                Value o = (Value) hs.get(TestAccessMode.GET_AND_SET_RELEASE).invokeExact(array, i, Value.getInstance(Point.getInstance(2,2)));\n+                assertEquals(o, Value.getInstance(Point.getInstance(1,1)), \"getAndSetRelease Value\");\n+                Value x = (Value) hs.get(TestAccessMode.GET).invokeExact(array, i);\n+                assertEquals(x, Value.getInstance(Point.getInstance(2,2)), \"getAndSetRelease Value value\");\n+            }\n+\n+\n+        }\n+    }\n+\n+    static void testArrayUnsupported(Handles hs) throws Throwable {\n+        Value[] array = new Value[10];\n+\n+        final int i = 0;\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_ADD)) {\n+            checkUOE(am, () -> {\n+                Value o = (Value) hs.get(am).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_BITWISE)) {\n+            checkUOE(am, () -> {\n+                Value o = (Value) hs.get(am).invokeExact(array, i, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+        }\n+    }\n+\n+    static void testArrayIndexOutOfBounds(Handles hs) throws Throwable {\n+        Value[] array = new Value[10];\n+\n+        for (int i : new int[]{-1, Integer.MIN_VALUE, 10, 11, Integer.MAX_VALUE}) {\n+            final int ci = i;\n+\n+            for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET)) {\n+                checkAIOOBE(am, () -> {\n+                    Value x = (Value) hs.get(am).invokeExact(array, ci);\n+                });\n+            }\n+\n+            for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n+                checkAIOOBE(am, () -> {\n+                    hs.get(am).invokeExact(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+                });\n+            }\n+\n+            for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_SET)) {\n+                checkAIOOBE(am, () -> {\n+                    boolean r = (boolean) hs.get(am).invokeExact(array, ci, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(2,2)));\n+                });\n+            }\n+\n+            for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_EXCHANGE)) {\n+                checkAIOOBE(am, () -> {\n+                    Value r = (Value) hs.get(am).invokeExact(array, ci, Value.getInstance(Point.getInstance(2,2)), Value.getInstance(Point.getInstance(1,1)));\n+                });\n+            }\n+\n+            for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_SET)) {\n+                checkAIOOBE(am, () -> {\n+                    Value o = (Value) hs.get(am).invokeExact(array, ci, Value.getInstance(Point.getInstance(1,1)));\n+                });\n+            }\n+\n+\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessValue.java","additions":792,"deletions":0,"binary":false,"changes":792,"status":"added"},{"patch":"@@ -47,1 +47,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypePoint.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,2063 @@\n+\/*\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ -- This file was mechanically generated: Do not edit! -- \/\/\n+\n+\/*\n+ * @test\n+ * @bug 8156486\n+ * @compile -XDenablePrimitiveClasses Point.java Value.java VarHandleTestMethodTypeValue.java\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses VarHandleTestMethodTypeValue\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestMethodTypeValue\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=false VarHandleTestMethodTypeValue\n+ * @run testng\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestMethodTypeValue\n+*\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.testng.Assert.*;\n+\n+import static java.lang.invoke.MethodType.*;\n+\n+public class VarHandleTestMethodTypeValue extends VarHandleBaseTest {\n+    static final Class<?> type = Value.class;\n+\n+    static final Value static_final_v = Value.getInstance(Point.getInstance(1,1));\n+\n+    static Value static_v = Value.getInstance(Point.getInstance(1,1));\n+\n+    final Value final_v = Value.getInstance(Point.getInstance(1,1));\n+\n+    Value v = Value.getInstance(Point.getInstance(1,1));\n+\n+    VarHandle vhFinalField;\n+\n+    VarHandle vhField;\n+\n+    VarHandle vhStaticField;\n+\n+    VarHandle vhStaticFinalField;\n+\n+    VarHandle vhArray;\n+\n+    @BeforeClass\n+    public void setup() throws Exception {\n+        vhFinalField = MethodHandles.lookup().findVarHandle(\n+                VarHandleTestMethodTypeValue.class, \"final_v\", type);\n+\n+        vhField = MethodHandles.lookup().findVarHandle(\n+                VarHandleTestMethodTypeValue.class, \"v\", type);\n+\n+        vhStaticFinalField = MethodHandles.lookup().findStaticVarHandle(\n+            VarHandleTestMethodTypeValue.class, \"static_final_v\", type);\n+\n+        vhStaticField = MethodHandles.lookup().findStaticVarHandle(\n+            VarHandleTestMethodTypeValue.class, \"static_v\", type);\n+\n+        vhArray = MethodHandles.arrayElementVarHandle(Value[].class);\n+    }\n+\n+    @DataProvider\n+    public Object[][] accessTestCaseProvider() throws Exception {\n+        List<AccessTestCase<?>> cases = new ArrayList<>();\n+\n+        cases.add(new VarHandleAccessTestCase(\"Instance field\",\n+                                              vhField, vh -> testInstanceFieldWrongMethodType(this, vh),\n+                                              false));\n+\n+        cases.add(new VarHandleAccessTestCase(\"Static field\",\n+                                              vhStaticField, VarHandleTestMethodTypeValue::testStaticFieldWrongMethodType,\n+                                              false));\n+\n+        cases.add(new VarHandleAccessTestCase(\"Array\",\n+                                              vhArray, VarHandleTestMethodTypeValue::testArrayWrongMethodType,\n+                                              false));\n+\n+        for (VarHandleToMethodHandle f : VarHandleToMethodHandle.values()) {\n+            cases.add(new MethodHandleAccessTestCase(\"Instance field\",\n+                                                     vhField, f, hs -> testInstanceFieldWrongMethodType(this, hs),\n+                                                     false));\n+\n+            cases.add(new MethodHandleAccessTestCase(\"Static field\",\n+                                                     vhStaticField, f, VarHandleTestMethodTypeValue::testStaticFieldWrongMethodType,\n+                                                     false));\n+\n+            cases.add(new MethodHandleAccessTestCase(\"Array\",\n+                                                     vhArray, f, VarHandleTestMethodTypeValue::testArrayWrongMethodType,\n+                                                     false));\n+        }\n+        \/\/ Work around issue with jtreg summary reporting which truncates\n+        \/\/ the String result of Object.toString to 30 characters, hence\n+        \/\/ the first dummy argument\n+        return cases.stream().map(tc -> new Object[]{tc.toString(), tc}).toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider = \"accessTestCaseProvider\")\n+    public <T> void testAccess(String desc, AccessTestCase<T> atc) throws Throwable {\n+        T t = atc.get();\n+        int iters = atc.requiresLoop() ? ITERS : 1;\n+        for (int c = 0; c < iters; c++) {\n+            atc.testAccess(t);\n+        }\n+    }\n+\n+\n+    static void testInstanceFieldWrongMethodType(VarHandleTestMethodTypeValue recv, VarHandle vh) throws Throwable {\n+        \/\/ Get\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.get(null);\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.get(Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            Value x = (Value) vh.get(0);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.get(recv);\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.get(recv);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.get();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.get(recv, Void.class);\n+        });\n+\n+\n+        \/\/ Set\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            vh.set(null, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            vh.set(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.set(recv, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            vh.set(0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.set();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.set(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetVolatile\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.getVolatile(null);\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getVolatile(Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            Value x = (Value) vh.getVolatile(0);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getVolatile(recv);\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getVolatile(recv);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getVolatile();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getVolatile(recv, Void.class);\n+        });\n+\n+\n+        \/\/ SetVolatile\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            vh.setVolatile(null, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            vh.setVolatile(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setVolatile(recv, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            vh.setVolatile(0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setVolatile();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setVolatile(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetOpaque\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.getOpaque(null);\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getOpaque(Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            Value x = (Value) vh.getOpaque(0);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getOpaque(recv);\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getOpaque(recv);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getOpaque();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getOpaque(recv, Void.class);\n+        });\n+\n+\n+        \/\/ SetOpaque\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            vh.setOpaque(null, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            vh.setOpaque(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setOpaque(recv, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            vh.setOpaque(0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setOpaque();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setOpaque(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAcquire\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.getAcquire(null);\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getAcquire(Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            Value x = (Value) vh.getAcquire(0);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getAcquire(recv);\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAcquire(recv);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAcquire(recv, Void.class);\n+        });\n+\n+\n+        \/\/ SetRelease\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            vh.setRelease(null, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            vh.setRelease(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setRelease(recv, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            vh.setRelease(0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setRelease(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndSet\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.compareAndSet(null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.compareAndSet(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.compareAndSet(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.compareAndSet(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.compareAndSet(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.compareAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.compareAndSet(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSet\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.weakCompareAndSetPlain(null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetPlain(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetPlain(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetPlain(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.weakCompareAndSetPlain(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetPlain();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetPlain(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetVolatile\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.weakCompareAndSet(null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSet(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSet(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSet(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.weakCompareAndSet(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSet(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetAcquire\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.weakCompareAndSetAcquire(null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetAcquire(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetAcquire(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.weakCompareAndSetAcquire(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetRelease\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.weakCompareAndSetRelease(null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetRelease(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetRelease(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetRelease(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.weakCompareAndSetRelease(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetRelease(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchange\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.compareAndExchange(null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.compareAndExchange(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchange(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchange(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciever primitive class\n+            Value x = (Value) vh.compareAndExchange(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchange(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchange(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchange();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchange(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchangeAcquire\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.compareAndExchangeAcquire(null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciever primitive class\n+            Value x = (Value) vh.compareAndExchangeAcquire(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchangeAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchangeAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchangeAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchangeAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchangeRelease\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.compareAndExchangeRelease(null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciever primitive class\n+            Value x = (Value) vh.compareAndExchangeRelease(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchangeRelease(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchangeRelease(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchangeRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchangeRelease(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAndSet\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.getAndSet(null, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getAndSet(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSet(recv, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciever primitive class\n+            Value x = (Value) vh.getAndSet(0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSet(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSet(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSet(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+        \/\/ GetAndSetAcquire\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.getAndSetAcquire(null, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getAndSetAcquire(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSetAcquire(recv, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciever primitive class\n+            Value x = (Value) vh.getAndSetAcquire(0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSetAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSetAcquire(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSetAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSetAcquire(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+        \/\/ GetAndSetRelease\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.getAndSetRelease(null, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            Value x = (Value) vh.getAndSetRelease(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSetRelease(recv, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciever primitive class\n+            Value x = (Value) vh.getAndSetRelease(0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSetRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSetRelease(recv, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSetRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSetRelease(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+    }\n+\n+    static void testInstanceFieldWrongMethodType(VarHandleTestMethodTypeValue recv, Handles hs) throws Throwable {\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET)) {\n+            \/\/ Incorrect argument types\n+            checkNPE(() -> { \/\/ null receiver\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class)).\n+                    invokeExact((VarHandleTestMethodTypeValue) null);\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ receiver reference class\n+                Value x = (Value) hs.get(am, methodType(type, Class.class)).\n+                    invokeExact(Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ receiver primitive class\n+                Value x = (Value) hs.get(am, methodType(type, int.class)).\n+                    invokeExact(0);\n+            });\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void x = (Void) hs.get(am, methodType(Void.class, VarHandleTestMethodTypeValue.class)).\n+                    invokeExact(recv);\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypeValue.class)).\n+                    invokeExact(recv);\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                Value x = (Value) hs.get(am, methodType(type)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class, Class.class)).\n+                    invokeExact(recv, Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n+            \/\/ Incorrect argument types\n+            checkNPE(() -> { \/\/ null receiver\n+                hs.get(am, methodType(void.class, VarHandleTestMethodTypeValue.class, type)).\n+                    invokeExact((VarHandleTestMethodTypeValue) null, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ receiver reference class\n+                hs.get(am, methodType(void.class, Class.class, type)).\n+                    invokeExact(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ value reference class\n+                hs.get(am, methodType(void.class, VarHandleTestMethodTypeValue.class, Class.class)).\n+                    invokeExact(recv, Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ receiver primitive class\n+                hs.get(am, methodType(void.class, int.class, type)).\n+                    invokeExact(0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                hs.get(am, methodType(void.class)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                hs.get(am, methodType(void.class, VarHandleTestMethodTypeValue.class, type, Class.class)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_SET)) {\n+            \/\/ Incorrect argument types\n+            checkNPE(() -> { \/\/ null receiver\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypeValue.class, type, type)).\n+                    invokeExact((VarHandleTestMethodTypeValue) null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ receiver reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, type, type)).\n+                    invokeExact(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ expected reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypeValue.class, Class.class, type)).\n+                    invokeExact(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ actual reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypeValue.class, type, Class.class)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ receiver primitive class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, int.class , type, type)).\n+                    invokeExact(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypeValue.class, type, type, Class.class)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_EXCHANGE)) {\n+            checkNPE(() -> { \/\/ null receiver\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class, type, type)).\n+                    invokeExact((VarHandleTestMethodTypeValue) null, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ receiver reference class\n+                Value x = (Value) hs.get(am, methodType(type, Class.class, type, type)).\n+                    invokeExact(Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ expected reference class\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class, Class.class, type)).\n+                    invokeExact(recv, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ actual reference class\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class, type, Class.class)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ reciever primitive class\n+                Value x = (Value) hs.get(am, methodType(type, int.class , type, type)).\n+                    invokeExact(0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void r = (Void) hs.get(am, methodType(Void.class, VarHandleTestMethodTypeValue.class , type, type)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypeValue.class , type, type)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                Value x = (Value) hs.get(am, methodType(type)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class, type, type, Class.class)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_SET)) {\n+            checkNPE(() -> { \/\/ null receiver\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class, type)).\n+                    invokeExact((VarHandleTestMethodTypeValue) null, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ receiver reference class\n+                Value x = (Value) hs.get(am, methodType(type, Class.class, type)).\n+                    invokeExact(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ value reference class\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class, Class.class)).\n+                    invokeExact(recv, Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ reciever primitive class\n+                Value x = (Value) hs.get(am, methodType(type, int.class, type)).\n+                    invokeExact(0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void r = (Void) hs.get(am, methodType(Void.class, VarHandleTestMethodTypeValue.class, type)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, VarHandleTestMethodTypeValue.class, type)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                Value x = (Value) hs.get(am, methodType(type)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(type, VarHandleTestMethodTypeValue.class, type)).\n+                    invokeExact(recv, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+\n+    }\n+\n+\n+    static void testStaticFieldWrongMethodType(VarHandle vh) throws Throwable {\n+        \/\/ Get\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.get();\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.get();\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.get(Void.class);\n+        });\n+\n+\n+        \/\/ Set\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.set(Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.set();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.set(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetVolatile\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getVolatile();\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getVolatile();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getVolatile(Void.class);\n+        });\n+\n+\n+        \/\/ SetVolatile\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setVolatile(Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setVolatile();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setVolatile(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetOpaque\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getOpaque();\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getOpaque();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getOpaque(Void.class);\n+        });\n+\n+\n+        \/\/ SetOpaque\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setOpaque(Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setOpaque();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setOpaque(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAcquire\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAcquire(Void.class);\n+        });\n+\n+\n+        \/\/ SetRelease\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setRelease(Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setRelease(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndSet\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.compareAndSet(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.compareAndSet(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.compareAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.compareAndSet(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSet\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetPlain(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetPlain(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetPlain();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetPlain(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetVolatile\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSet(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSet(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSet(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetAcquire\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetAcquire(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetAcquire(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetAcquire(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetRelease\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetRelease(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetRelease(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetRelease(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchange\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchange(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchange(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchange(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchange(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchange();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchange(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchangeAcquire\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchangeAcquire(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchangeAcquire(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchangeAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchangeAcquire(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchangeRelease\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchangeRelease(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchangeRelease(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchangeRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchangeRelease(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAndSet\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSet(Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSet(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSet(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSet(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAndSetAcquire\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSetAcquire(Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSetAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSetAcquire(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSetAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSetAcquire(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAndSetRelease\n+        \/\/ Incorrect argument types\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSetRelease(Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSetRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSetRelease(Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSetRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSetRelease(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+    }\n+\n+    static void testStaticFieldWrongMethodType(Handles hs) throws Throwable {\n+        int i = 0;\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET)) {\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void x = (Void) hs.get(am, methodType(Void.class)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class)).\n+                    invokeExact();\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(Class.class)).\n+                    invokeExact(Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n+            hs.checkWMTEOrCCE(() -> { \/\/ value reference class\n+                hs.get(am, methodType(void.class, Class.class)).\n+                    invokeExact(Void.class);\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                hs.get(am, methodType(void.class)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                hs.get(am, methodType(void.class, type, Class.class)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_SET)) {\n+            \/\/ Incorrect argument types\n+            hs.checkWMTEOrCCE(() -> { \/\/ expected reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, type)).\n+                    invokeExact(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ actual reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, type, Class.class)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, type, type, Class.class)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_EXCHANGE)) {\n+            \/\/ Incorrect argument types\n+            hs.checkWMTEOrCCE(() -> { \/\/ expected reference class\n+                Value x = (Value) hs.get(am, methodType(type, Class.class, type)).\n+                    invokeExact(Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ actual reference class\n+                Value x = (Value) hs.get(am, methodType(type, type, Class.class)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void r = (Void) hs.get(am, methodType(Void.class, type, type)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, type, type)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                Value x = (Value) hs.get(am, methodType(type)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(type, type, type, Class.class)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_SET)) {\n+            \/\/ Incorrect argument types\n+            hs.checkWMTEOrCCE(() -> { \/\/ value reference class\n+                Value x = (Value) hs.get(am, methodType(type, Class.class)).\n+                    invokeExact(Void.class);\n+            });\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void r = (Void) hs.get(am, methodType(Void.class, type)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, type)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                Value x = (Value) hs.get(am, methodType(type)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(type, type, Class.class)).\n+                    invokeExact(Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+\n+    }\n+\n+\n+    static void testArrayWrongMethodType(VarHandle vh) throws Throwable {\n+        Value[] array = new Value[10];\n+        Arrays.fill(array, Value.getInstance(Point.getInstance(1,1)));\n+\n+        \/\/ Get\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            Value x = (Value) vh.get(null, 0);\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.get(Void.class, 0);\n+        });\n+        checkWMTE(() -> { \/\/ array primitive class\n+            Value x = (Value) vh.get(0, 0);\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.get(array, Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.get(array, 0);\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.get(array, 0);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.get();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.get(array, 0, Void.class);\n+        });\n+\n+\n+        \/\/ Set\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            vh.set(null, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            vh.set(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.set(array, 0, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            vh.set(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            vh.set(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.set();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.set(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetVolatile\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            Value x = (Value) vh.getVolatile(null, 0);\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.getVolatile(Void.class, 0);\n+        });\n+        checkWMTE(() -> { \/\/ array primitive class\n+            Value x = (Value) vh.getVolatile(0, 0);\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.getVolatile(array, Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getVolatile(array, 0);\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getVolatile(array, 0);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getVolatile();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getVolatile(array, 0, Void.class);\n+        });\n+\n+\n+        \/\/ SetVolatile\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            vh.setVolatile(null, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            vh.setVolatile(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setVolatile(array, 0, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            vh.setVolatile(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            vh.setVolatile(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setVolatile();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setVolatile(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetOpaque\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            Value x = (Value) vh.getOpaque(null, 0);\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.getOpaque(Void.class, 0);\n+        });\n+        checkWMTE(() -> { \/\/ array primitive class\n+            Value x = (Value) vh.getOpaque(0, 0);\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.getOpaque(array, Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getOpaque(array, 0);\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getOpaque(array, 0);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getOpaque();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getOpaque(array, 0, Void.class);\n+        });\n+\n+\n+        \/\/ SetOpaque\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            vh.setOpaque(null, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            vh.setOpaque(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setOpaque(array, 0, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            vh.setOpaque(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            vh.setOpaque(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setOpaque();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setOpaque(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAcquire\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            Value x = (Value) vh.getAcquire(null, 0);\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.getAcquire(Void.class, 0);\n+        });\n+        checkWMTE(() -> { \/\/ array primitive class\n+            Value x = (Value) vh.getAcquire(0, 0);\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.getAcquire(array, Void.class);\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void x = (Void) vh.getAcquire(array, 0);\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAcquire(array, 0);\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAcquire(array, 0, Void.class);\n+        });\n+\n+\n+        \/\/ SetRelease\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            vh.setRelease(null, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            vh.setRelease(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            vh.setRelease(array, 0, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            vh.setRelease(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            vh.setRelease(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            vh.setRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            vh.setRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndSet\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.compareAndSet(null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.compareAndSet(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.compareAndSet(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.compareAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.compareAndSet(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            boolean r = vh.compareAndSet(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.compareAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.compareAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSet\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.weakCompareAndSetPlain(null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetPlain(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetPlain(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetPlain(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.weakCompareAndSetPlain(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            boolean r = vh.weakCompareAndSetPlain(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetPlain();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetPlain(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetVolatile\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.weakCompareAndSet(null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSet(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSet(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.weakCompareAndSet(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            boolean r = vh.weakCompareAndSet(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetAcquire\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.weakCompareAndSetAcquire(null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetAcquire(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetAcquire(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.weakCompareAndSetAcquire(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            boolean r = vh.weakCompareAndSetAcquire(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ WeakCompareAndSetRelease\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            boolean r = vh.weakCompareAndSetRelease(null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ receiver reference class\n+            boolean r = vh.weakCompareAndSetRelease(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            boolean r = vh.weakCompareAndSetRelease(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            boolean r = vh.weakCompareAndSetRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ receiver primitive class\n+            boolean r = vh.weakCompareAndSetRelease(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            boolean r = vh.weakCompareAndSetRelease(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            boolean r = vh.weakCompareAndSetRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            boolean r = vh.weakCompareAndSetRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchange\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.compareAndExchange(null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.compareAndExchange(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchange(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchange(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ array primitive class\n+            Value x = (Value) vh.compareAndExchange(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.compareAndExchange(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchange(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchange(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchange();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchange(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchangeAcquire\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.compareAndExchangeAcquire(null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ array primitive class\n+            Value x = (Value) vh.compareAndExchangeAcquire(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.compareAndExchangeAcquire(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchangeAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchangeAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchangeAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchangeAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ CompareAndExchangeRelease\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null receiver\n+            Value x = (Value) vh.compareAndExchangeRelease(null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ expected reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ actual reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ array primitive class\n+            Value x = (Value) vh.compareAndExchangeRelease(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.compareAndExchangeRelease(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.compareAndExchangeRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.compareAndExchangeRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.compareAndExchangeRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.compareAndExchangeRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAndSet\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            Value x = (Value) vh.getAndSet(null, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.getAndSet(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSet(array, 0, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciarrayever primitive class\n+            Value x = (Value) vh.getAndSet(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.getAndSet(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSet();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSet(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAndSetAcquire\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            Value x = (Value) vh.getAndSetAcquire(null, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.getAndSetAcquire(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSetAcquire(array, 0, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciarrayever primitive class\n+            Value x = (Value) vh.getAndSetAcquire(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.getAndSetAcquire(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSetAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSetAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSetAcquire();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSetAcquire(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+        \/\/ GetAndSetRelease\n+        \/\/ Incorrect argument types\n+        checkNPE(() -> { \/\/ null array\n+            Value x = (Value) vh.getAndSetRelease(null, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ array reference class\n+            Value x = (Value) vh.getAndSetRelease(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkCCE(() -> { \/\/ value reference class\n+            Value x = (Value) vh.getAndSetRelease(array, 0, Void.class);\n+        });\n+        checkWMTE(() -> { \/\/ reciarrayever primitive class\n+            Value x = (Value) vh.getAndSetRelease(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ index reference class\n+            Value x = (Value) vh.getAndSetRelease(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect return type\n+        checkCCE(() -> { \/\/ reference class\n+            Void r = (Void) vh.getAndSetRelease(array, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        checkWMTE(() -> { \/\/ primitive class\n+            boolean x = (boolean) vh.getAndSetRelease(array, 0, Value.getInstance(Point.getInstance(1,1)));\n+        });\n+        \/\/ Incorrect arity\n+        checkWMTE(() -> { \/\/ 0\n+            Value x = (Value) vh.getAndSetRelease();\n+        });\n+        checkWMTE(() -> { \/\/ >\n+            Value x = (Value) vh.getAndSetRelease(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+        });\n+\n+\n+    }\n+\n+    static void testArrayWrongMethodType(Handles hs) throws Throwable {\n+        Value[] array = new Value[10];\n+        Arrays.fill(array, Value.getInstance(Point.getInstance(1,1)));\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET)) {\n+            \/\/ Incorrect argument types\n+            checkNPE(() -> { \/\/ null array\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class)).\n+                    invokeExact((Value[]) null, 0);\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ array reference class\n+                Value x = (Value) hs.get(am, methodType(type, Class.class, int.class)).\n+                    invokeExact(Void.class, 0);\n+            });\n+            checkWMTE(() -> { \/\/ array primitive class\n+                Value x = (Value) hs.get(am, methodType(type, int.class, int.class)).\n+                    invokeExact(0, 0);\n+            });\n+            checkWMTE(() -> { \/\/ index reference class\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, Class.class)).\n+                    invokeExact(array, Void.class);\n+            });\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void x = (Void) hs.get(am, methodType(Void.class, Value[].class, int.class)).\n+                    invokeExact(array, 0);\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, Value[].class, int.class)).\n+                    invokeExact(array, 0);\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                Value x = (Value) hs.get(am, methodType(type)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class, Class.class)).\n+                    invokeExact(array, 0, Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n+            \/\/ Incorrect argument types\n+            checkNPE(() -> { \/\/ null array\n+                hs.get(am, methodType(void.class, Value[].class, int.class, type)).\n+                    invokeExact((Value[]) null, 0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ array reference class\n+                hs.get(am, methodType(void.class, Class.class, int.class, type)).\n+                    invokeExact(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ value reference class\n+                hs.get(am, methodType(void.class, Value[].class, int.class, Class.class)).\n+                    invokeExact(array, 0, Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ receiver primitive class\n+                hs.get(am, methodType(void.class, int.class, int.class, type)).\n+                    invokeExact(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ index reference class\n+                hs.get(am, methodType(void.class, Value[].class, Class.class, type)).\n+                    invokeExact(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                hs.get(am, methodType(void.class)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                hs.get(am, methodType(void.class, Value[].class, int.class, Class.class)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_SET)) {\n+            \/\/ Incorrect argument types\n+            checkNPE(() -> { \/\/ null receiver\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Value[].class, int.class, type, type)).\n+                    invokeExact((Value[]) null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ receiver reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Class.class, int.class, type, type)).\n+                    invokeExact(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ expected reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Value[].class, int.class, Class.class, type)).\n+                    invokeExact(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ actual reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Value[].class, int.class, type, Class.class)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ receiver primitive class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, int.class, int.class, type, type)).\n+                    invokeExact(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ index reference class\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Value[].class, Class.class, type, type)).\n+                    invokeExact(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                boolean r = (boolean) hs.get(am, methodType(boolean.class, Value[].class, int.class, type, type, Class.class)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_EXCHANGE)) {\n+            \/\/ Incorrect argument types\n+            checkNPE(() -> { \/\/ null receiver\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class, type, type)).\n+                    invokeExact((Value[]) null, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ array reference class\n+                Value x = (Value) hs.get(am, methodType(type, Class.class, int.class, type, type)).\n+                    invokeExact(Void.class, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ expected reference class\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class, Class.class, type)).\n+                    invokeExact(array, 0, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ actual reference class\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class, type, Class.class)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ array primitive class\n+                Value x = (Value) hs.get(am, methodType(type, int.class, int.class, type, type)).\n+                    invokeExact(0, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ index reference class\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, Class.class, type, type)).\n+                    invokeExact(array, Void.class, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void r = (Void) hs.get(am, methodType(Void.class, Value[].class, int.class, type, type)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, Value[].class, int.class, type, type)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                Value x = (Value) hs.get(am, methodType(type)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class, type, type, Class.class)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)), Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_SET)) {\n+            \/\/ Incorrect argument types\n+            checkNPE(() -> { \/\/ null array\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class, type)).\n+                    invokeExact((Value[]) null, 0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ array reference class\n+                Value x = (Value) hs.get(am, methodType(type, Class.class, int.class, type)).\n+                    invokeExact(Void.class, 0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            hs.checkWMTEOrCCE(() -> { \/\/ value reference class\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class, Class.class)).\n+                    invokeExact(array, 0, Void.class);\n+            });\n+            checkWMTE(() -> { \/\/ array primitive class\n+                Value x = (Value) hs.get(am, methodType(type, int.class, int.class, type)).\n+                    invokeExact(0, 0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ index reference class\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, Class.class, type)).\n+                    invokeExact(array, Void.class, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect return type\n+            hs.checkWMTEOrCCE(() -> { \/\/ reference class\n+                Void r = (Void) hs.get(am, methodType(Void.class, Value[].class, int.class, type)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            checkWMTE(() -> { \/\/ primitive class\n+                boolean x = (boolean) hs.get(am, methodType(boolean.class, Value[].class, int.class, type)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)));\n+            });\n+            \/\/ Incorrect arity\n+            checkWMTE(() -> { \/\/ 0\n+                Value x = (Value) hs.get(am, methodType(type)).\n+                    invokeExact();\n+            });\n+            checkWMTE(() -> { \/\/ >\n+                Value x = (Value) hs.get(am, methodType(type, Value[].class, int.class, type, Class.class)).\n+                    invokeExact(array, 0, Value.getInstance(Point.getInstance(1,1)), Void.class);\n+            });\n+        }\n+\n+\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypeValue.java","additions":2063,"deletions":0,"binary":false,"changes":2063,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+#if[Value]\n@@ -33,0 +34,6 @@\n+#else[Value]\n+ * @run testng\/othervm -Diters=10    -Xint                   VarHandleTestAccess$Type$\n+ * @run testng\/othervm -Diters=20000 -XX:TieredStopAtLevel=1 VarHandleTestAccess$Type$\n+ * @run testng\/othervm -Diters=20000                         VarHandleTestAccess$Type$\n+ * @run testng\/othervm -Diters=20000 -XX:-TieredCompilation  VarHandleTestAccess$Type$\n+#end[Value]\n@@ -47,1 +54,0 @@\n-\n@@ -87,3 +93,0 @@\n-#if[Value]\n-    VarHandle vhValueTypeField;\n-#end[Value]\n@@ -148,5 +151,0 @@\n-\n-#if[Value]\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"$varType$_v\", type);\n-#end[Value]\n@@ -349,7 +347,0 @@\n-#if[Value]\n-        cases.add(new VarHandleAccessTestCase(\"Value type field\",\n-                                              vhValueTypeField, vh -> testValueTypeField(Value.getInstance(), vh)));\n-        cases.add(new VarHandleAccessTestCase(\"Value type field unsupported\",\n-                                              vhValueTypeField, vh -> testValueTypeFieldUnsupported(Value.getInstance(), vh),\n-                                              false));\n-#end[Value]\n@@ -517,16 +508,0 @@\n-#if[Value]\n-    static void testValueTypeField(Value recv, VarHandle vh) {\n-        \/\/ Plain\n-        {\n-            $type$ x = ($type$) vh.get(recv);\n-            assertEquals(x, $value1$, \"get $type$ value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, VarHandle vh) {\n-        checkUOE(() -> {\n-            vh.set(recv, $value2$);\n-        });\n-    }\n-#end[Value]\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestAccess.java.template","additions":7,"deletions":32,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#if[Value]\n@@ -30,0 +31,3 @@\n+#else[Value]\n+ * @run testng\/othervm -Diters=20000 VarHandleTestMethodHandleAccess$Type$\n+#end[Value]\n@@ -45,1 +49,0 @@\n-\n@@ -58,1 +61,1 @@\n-    static $type$ static_v;\n+    static $type$ static_v = $value1$;\n@@ -74,4 +77,0 @@\n-#if[Value]\n-    VarHandle vhValueTypeField;\n-#end[Value]\n-\n@@ -93,5 +92,0 @@\n-\n-#if[Value]\n-        vhValueTypeField = MethodHandles.lookup().findVarHandle(\n-                    Value.class, \"$varType$_v\", type);\n-#end[Value]\n@@ -126,7 +120,0 @@\n-#if[Value]\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeField(Value.getInstance(), hs)));\n-        cases.add(new MethodHandleAccessTestCase(\"Value type field unsupported\",\n-                                                 vhValueTypeField, f, hs -> testValueTypeFieldUnsupported(Value.getInstance(), hs),\n-                                                 false));\n-#end[Value]\n@@ -481,53 +468,0 @@\n-#if[Value]\n-    static void testValueTypeField(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        {\n-            $type$ x = ($type$) hs.get(TestAccessMode.GET).invokeExact(recv);\n-            assertEquals(x, $value1$, \"get $type$ value\");\n-        }\n-    }\n-\n-    static void testValueTypeFieldUnsupported(Value recv, Handles hs) throws Throwable {\n-        \/\/ Plain\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.SET)) {\n-            checkUOE(am, () -> {\n-                hs.get(am).invokeExact(recv, $value1$);\n-            });\n-        }\n-#if[!CAS]\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_SET)) {\n-            checkUOE(am, () -> {\n-                boolean r = (boolean) hs.get(am).invokeExact(recv, $value1$, $value2$);\n-            });\n-        }\n-\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.COMPARE_AND_EXCHANGE)) {\n-            checkUOE(am, () -> {\n-                $type$ r = ($type$) hs.get(am).invokeExact(recv, $value1$, $value2$);\n-            });\n-        }\n-\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_SET)) {\n-            checkUOE(am, () -> {\n-                $type$ r = ($type$) hs.get(am).invokeExact(recv, $value1$);\n-            });\n-        }\n-#end[CAS]\n-\n-#if[!AtomicAdd]\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_ADD)) {\n-            checkUOE(am, () -> {\n-                $type$ r = ($type$) hs.get(am).invokeExact(recv, $value1$);\n-            });\n-        }\n-#end[AtomicAdd]\n-\n-#if[!Bitwise]\n-        for (TestAccessMode am : testAccessModesOfType(TestAccessType.GET_AND_BITWISE)) {\n-            checkUOE(am, () -> {\n-                $type$ r = ($type$) hs.get(am).invokeExact(recv, $value1$);\n-            });\n-        }\n-#end[Bitwise]\n-    }\n-#end[Value]\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodHandleAccess.java.template","additions":5,"deletions":71,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#if[Point]\n+#if[Value]\n@@ -35,1 +35,1 @@\n-#else[Point]\n+#else[Value]\n@@ -40,1 +40,1 @@\n-#end[Point]\n+#end[Value]\n@@ -55,1 +55,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodType.java.template","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-for type in boolean byte short char int long float double String Point\n+for type in boolean byte short char int long float double String Point Value\n@@ -15,2 +15,1 @@\n-  varType=\"$(tr '[:upper:]' '[:lower:]' <<< ${type:0:1})${type:1}\"\n-  args=\"-K$type -Dtype=$type -DType=$Type -DvarType=$varType\"\n+  args=\"-K$type -Dtype=$type -DType=$Type\"\n@@ -32,0 +31,2 @@\n+# Object = object of identity class or value class\n+# Value = value class or primitive class\n@@ -33,7 +34,1 @@\n-    boolean|byte|short|char|int|long|float|double|Point)\n-      args=\"$args -KValue\"\n-      ;;\n-  esac\n-\n-  case $type in\n-    String|Point)\n+    String)\n@@ -42,0 +37,3 @@\n+    Point|Value)\n+      args=\"$args -KObject -KValue\"\n+      ;;\n@@ -92,1 +90,1 @@\n-       ;;\n+      ;;\n@@ -98,0 +96,5 @@\n+    Value)\n+      value1=\"Value.getInstance(Point.getInstance(1,1))\"\n+      value2=\"Value.getInstance(Point.getInstance(2,2))\"\n+      value3=\"Value.getInstance(Point.getInstance(3,3))\"\n+      ;;\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/generate-vh-tests.sh","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-public primitive class Value {\n+public primitive class InlinableValue {\n@@ -38,1 +38,1 @@\n-    Value(char c, boolean z, byte b, int x, short y, long l, float f, double d, Number number, Point p, Object o) {\n+    InlinableValue(char c, boolean z, byte b, int x, short y, long l, float f, double d, Number number, Point p, Object o) {\n@@ -52,1 +52,1 @@\n-    Value(char c, boolean z, byte b, int x, short y, long l, float f, double d, Number number, Point p, Point.ref pref, Object o) {\n+    InlinableValue(char c, boolean z, byte b, int x, short y, long l, float f, double d, Number number, Point p, Point.ref pref, Object o) {\n@@ -129,2 +129,2 @@\n-        Value build() {\n-            return new Value(c, z, b, i, s, l, f, d, n, p, pref, ref);\n+        InlinableValue build() {\n+            return new InlinableValue(c, z, b, i, s, l, f, d, n, p, pref, ref);\n","filename":"test\/jdk\/valhalla\/valuetypes\/InlinableValue.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"test\/jdk\/valhalla\/valuetypes\/Value.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary test MethodHandle\/VarHandle o primitive classes\n+ * @summary test MethodHandle\/VarHandle of value classes and primitive classes\n@@ -48,0 +48,1 @@\n+    private static final Value V = new Value(P, new ValueOptional(L));\n@@ -65,0 +66,1 @@\n+                new Object[] { \"MethodHandleTest$Value\", V, new String[] {\"p\", \"vo\"} },\n@@ -113,1 +115,1 @@\n-        ValueOptional v = new ValueOptional(P);\n+        ValueOptional vo = new ValueOptional(P);\n@@ -122,1 +124,1 @@\n-        setField(MixedValues.class, \"voptional\", mv, v, false);\n+        setField(MixedValues.class, \"voptional\", mv, vo, false);\n@@ -126,1 +128,1 @@\n-        setField(MixedValues.class, \"staticValue\", null, v, false);\n+        setField(MixedValues.class, \"staticValue\", null, vo, false);\n@@ -136,0 +138,1 @@\n+                new Object[] { Value[].class, V },\n@@ -158,1 +161,1 @@\n-            assertNull((Object)getter.invoke(array, 1));\n+            assertNull((Object) getter.invoke(array, 1));\n@@ -329,0 +332,9 @@\n+\n+    static value class Value {\n+        Point p;\n+        ValueOptional vo;\n+        Value(Point p, ValueOptional vo) {\n+            this.p = p;\n+            this.vo = vo;\n+        }\n+    }\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary test Object methods on primitive classes\n+ * @summary test Object methods on value classes and primitive classes\n@@ -31,1 +31,0 @@\n- * @compile -XDenablePrimitiveClasses ObjectMethods.java\n@@ -34,1 +33,0 @@\n-import java.lang.reflect.AccessFlag;\n@@ -56,18 +54,18 @@\n-    static final Value VALUE = new Value.Builder()\n-                                        .setChar('z')\n-                                        .setBoolean(false)\n-                                        .setByte((byte)0x1)\n-                                        .setShort((short)3)\n-                                        .setLong(4L)\n-                                        .setPoint(Point.makePoint(200, 200))\n-                                        .setNumber(Value.Number.intValue(10)).build();\n-    static final Value VALUE1 = new Value.Builder()\n-                                        .setChar('z')\n-                                        .setBoolean(false)\n-                                        .setByte((byte)0x1)\n-                                        .setShort((short)3)\n-                                        .setLong(4L)\n-                                        .setPoint(Point.makePoint(100, 100))\n-                                        .setPointRef(Point.makePoint(200, 200))\n-                                        .setReference(Point.makePoint(300, 300))\n-                                        .setNumber(Value.Number.intValue(20)).build();\n+    static final InlinableValue VALUE = new InlinableValue.Builder()\n+                                                .setChar('z')\n+                                                .setBoolean(false)\n+                                                .setByte((byte)0x1)\n+                                                .setShort((short)3)\n+                                                .setLong(4L)\n+                                                .setPoint(Point.makePoint(200, 200))\n+                                                .setNumber(InlinableValue.Number.intValue(10)).build();\n+    static final InlinableValue VALUE1 = new InlinableValue.Builder()\n+                                                .setChar('z')\n+                                                .setBoolean(false)\n+                                                .setByte((byte)0x1)\n+                                                .setShort((short)3)\n+                                                .setLong(4L)\n+                                                .setPoint(Point.makePoint(100, 100))\n+                                                .setPointRef(Point.makePoint(200, 200))\n+                                                .setReference(Point.makePoint(300, 300))\n+                                                .setNumber(InlinableValue.Number.intValue(20)).build();\n@@ -127,1 +125,1 @@\n-            { VALUE, new Value.Builder()\n+            { VALUE, new InlinableValue.Builder()\n@@ -134,3 +132,3 @@\n-                              .setNumber(Value.Number.intValue(10)).build(), true},\n-            { new Value.Builder().setNumber(new Value.IntNumber(10)).build(),\n-              new Value.Builder().setNumber(new Value.IntNumber(10)).build(), false},\n+                              .setNumber(InlinableValue.Number.intValue(10)).build(), true},\n+            { new InlinableValue.Builder().setNumber(new InlinableValue.IntNumber(10)).build(),\n+              new InlinableValue.Builder().setNumber(new InlinableValue.IntNumber(10)).build(), false},\n@@ -177,1 +175,0 @@\n-\n@@ -184,1 +181,0 @@\n-\n@@ -192,1 +188,1 @@\n-            { new Value.Builder()\n+            { new InlinableValue.Builder()\n@@ -194,1 +190,1 @@\n-                        .setNumber(new Value.IntNumber(99)).build() },\n+                        .setNumber(new InlinableValue.IntNumber(99)).build() },\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":25,"deletions":29,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @summary test MethodHandle\/VarHandle on primitive classes\n@@ -51,1 +50,1 @@\n-        var number = Value.Number.intValue(99);\n+        var number = InlinableValue.Number.intValue(99);\n@@ -68,1 +67,1 @@\n-                           valueBuilder().setFloat(Float.NaN).setDouble(Double.NaN).setNumber(Value.Number.intValue(99)).build() },\n+                           valueBuilder().setFloat(Float.NaN).setDouble(Double.NaN).setNumber(InlinableValue.Number.intValue(99)).build() },\n@@ -71,2 +70,2 @@\n-            new Object[] { valueBuilder().setNumber(Value.Number.intValue(100)).build(),\n-                           valueBuilder().setNumber(Value.Number.intValue(100)).build() },\n+            new Object[] { valueBuilder().setNumber(InlinableValue.Number.intValue(100)).build(),\n+                           valueBuilder().setNumber(InlinableValue.Number.intValue(100)).build() },\n@@ -91,1 +90,1 @@\n-        var number = Value.Number.intValue(99);\n+        var number = InlinableValue.Number.intValue(99);\n@@ -105,5 +104,5 @@\n-                           valueBuilder().setNumber(new Value.IntNumber(99)).build() },\n-            new Object[] { valueBuilder().setNumber(Value.Number.intValue(1)).build(),\n-                           valueBuilder().setNumber(Value.Number.shortValue((short)1)).build() },\n-            new Object[] { valueBuilder().setNumber(new Value.IntNumber(99)).build(),\n-                           valueBuilder().setNumber(new Value.IntNumber(99)).build() },\n+                           valueBuilder().setNumber(new InlinableValue.IntNumber(99)).build() },\n+            new Object[] { valueBuilder().setNumber(InlinableValue.Number.intValue(1)).build(),\n+                           valueBuilder().setNumber(InlinableValue.Number.shortValue((short)1)).build() },\n+            new Object[] { valueBuilder().setNumber(new InlinableValue.IntNumber(99)).build(),\n+                           valueBuilder().setNumber(new InlinableValue.IntNumber(99)).build() },\n@@ -113,1 +112,1 @@\n-            new Object[] { new ValueOptional(Value.Number.intValue(1)), new ValueOptional(Value.Number.shortValue((short)1))},\n+            new Object[] { new ValueOptional(InlinableValue.Number.intValue(1)), new ValueOptional(InlinableValue.Number.shortValue((short)1))},\n@@ -120,2 +119,2 @@\n-    private static Value.Builder valueBuilder() {\n-        Value.Builder builder = new Value.Builder();\n+    private static InlinableValue.Builder valueBuilder() {\n+        InlinableValue.Builder builder = new InlinableValue.Builder();\n","filename":"test\/jdk\/valhalla\/valuetypes\/SubstitutabilityTest.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"}]}