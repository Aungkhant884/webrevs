{"files":[{"patch":"@@ -766,1 +766,1 @@\n-                log.error(pos, Errors.SuperClassDeclaresInitBlock(fragment));\n+                log.error(pos, Errors.AbstractValueClassDeclaresInitBlock(fragment));\n@@ -768,2 +768,0 @@\n-            \/\/ No instance fields and no arged constructors both mean inner classes\n-            \/\/ cannot be super classes for primitive classes.\n@@ -772,1 +770,1 @@\n-                log.error(pos, Errors.SuperClassCannotBeInner(fragment));\n+                log.error(pos, Errors.AbstractValueClassCannotBeInner(fragment));\n@@ -778,1 +776,1 @@\n-                        log.error(pos, Errors.SuperFieldNotAllowed(s, fragment));\n+                        log.error(pos, Errors.InstanceFieldNotAllowed(s, fragment));\n@@ -783,1 +781,1 @@\n-                        log.error(pos, Errors.SuperMethodCannotBeSynchronized(s, c, st));\n+                        log.error(pos, Errors.SuperClassMethodCannotBeSynchronized(s, c, st));\n@@ -787,1 +785,1 @@\n-                            log.error(pos, Errors.SuperConstructorCannotTakeArguments(m, fragment));\n+                            log.error(pos, Errors.AbstractValueClassConstructorCannotTakeArguments(m, fragment));\n@@ -789,1 +787,1 @@\n-                            log.error(pos, Errors.SuperConstructorCannotBeGeneric(m, fragment));\n+                            log.error(pos, Errors.AbstractValueClassConstructorCannotBeGeneric(m, fragment));\n@@ -791,1 +789,1 @@\n-                            log.error(pos, Errors.SuperConstructorCannotThrow(m, fragment));\n+                            log.error(pos, Errors.AbstractValueClassConstructorCannotThrow(m, fragment));\n@@ -793,1 +791,1 @@\n-                            log.error(pos, Errors.SuperConstructorAccessRestricted(m, fragment));\n+                            log.error(pos, Errors.AbstractValueClassConstructorHasWeakerAccess(m, fragment));\n@@ -795,1 +793,1 @@\n-                                log.error(pos, Errors.SuperNoArgConstructorMustBeEmpty(m, fragment));\n+                                log.error(pos, Errors.AbstractValueClassNoArgConstructorMustBeEmpty(m, fragment));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -3932,7 +3932,0 @@\n-# 0: name (of method)\n-compiler.err.value.class.does.not.support=\\\n-    value classes do not support {0}\n-\n-compiler.err.value.class.may.not.extend=\\\n-    inappropriate super class declaration for a value class\n-\n@@ -3963,1 +3956,1 @@\n-compiler.err.super.method.cannot.be.synchronized=\\\n+compiler.err.super.class.method.cannot.be.synchronized=\\\n@@ -3967,1 +3960,1 @@\n-compiler.err.super.constructor.cannot.take.arguments=\\\n+compiler.err.abstract.value.class.constructor.cannot.take.arguments=\\\n@@ -3971,1 +3964,1 @@\n-compiler.err.super.constructor.cannot.be.generic=\\\n+compiler.err.abstract.value.class.constructor.cannot.be.generic=\\\n@@ -3975,1 +3968,1 @@\n-compiler.err.super.constructor.cannot.throw=\\\n+compiler.err.abstract.value.class.constructor.cannot.throw=\\\n@@ -3979,1 +3972,1 @@\n-compiler.err.super.constructor.access.restricted=\\\n+compiler.err.abstract.value.class.constructor.has.weaker.access=\\\n@@ -3983,1 +3976,1 @@\n-compiler.err.super.field.not.allowed=\\\n+compiler.err.instance.field.not.allowed=\\\n@@ -3987,1 +3980,1 @@\n-compiler.err.super.no.arg.constructor.must.be.empty=\\\n+compiler.err.abstract.value.class.no.arg.constructor.must.be.empty=\\\n@@ -3991,1 +3984,1 @@\n-compiler.err.super.class.declares.init.block=\\\n+compiler.err.abstract.value.class.declares.init.block=\\\n@@ -3995,1 +3988,1 @@\n-compiler.err.super.class.cannot.be.inner=\\\n+compiler.err.abstract.value.class.cannot.be.inner=\\\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -212,1 +212,4 @@\n-# Value types\n+# Value Objects\n+compiler.misc.feature.value.classes\n+\n+# Primitive Classes\n@@ -214,14 +217,0 @@\n-compiler.err.value.class.does.not.support\n-compiler.err.value.class.may.not.extend\n-compiler.err.this.exposed.prematurely\n-compiler.err.concrete.supertype.for.value.class\n-compiler.err.super.class.cannot.be.inner\n-compiler.err.super.class.declares.init.block\n-compiler.err.super.constructor.cannot.take.arguments\n-compiler.err.super.constructor.access.restricted\n-compiler.err.super.constructor.cannot.be.generic\n-compiler.err.super.constructor.cannot.throw\n-compiler.err.super.field.not.allowed\n-compiler.err.super.method.cannot.be.synchronized\n-compiler.err.super.no.arg.constructor.must.be.empty\n-compiler.err.generic.parameterization.with.primitive.class\n@@ -229,3 +218,1 @@\n-compiler.misc.feature.value.classes\n-compiler.misc.abstract.value.class\n-compiler.misc.superclass.of.value.class\n+compiler.err.generic.parameterization.with.primitive.class\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.abstract.value.class.cannot.be.inner\n+\/\/ key: compiler.misc.abstract.value.class\n+\n+public class AbstractValueClassCannotBeInner {\n+    abstract value class Inner {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassCannotBeInner.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.abstract.value.class.constructor.cannot.be.generic\n+\/\/ key: compiler.misc.abstract.value.class\n+\n+public abstract value class AbstractValueClassConstructorCannotBeGeneric {\n+    <T> AbstractValueClassConstructorCannotBeGeneric() {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassConstructorCannotBeGeneric.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.abstract.value.class.constructor.cannot.throw\n+\/\/ key: compiler.misc.abstract.value.class\n+\n+public abstract value class AbstractValueClassConstructorCannotThrow {\n+    AbstractValueClassConstructorCannotThrow() throws Exception {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassConstructorCannotThrow.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.abstract.value.class.constructor.has.weaker.access\n+\/\/ key: compiler.misc.abstract.value.class\n+\n+public abstract value class AbstractValueClassConstructorHasWeakerAccess {\n+    private AbstractValueClassConstructorHasWeakerAccess() {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassConstructorHasWeakerAccess.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.abstract.value.class.no.arg.constructor.must.be.empty\n+\/\/ key: compiler.misc.abstract.value.class\n+\n+public abstract value class AbstractValueClassNoArgConstructorMustBeEmpty {\n+    public AbstractValueClassNoArgConstructorMustBeEmpty() {\n+        System.out.println(\"\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassNoArgConstructorMustBeEmpty.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.abstract.value.class.declares.init.block\n+\/\/ key: compiler.misc.abstract.value.class\n+\n+public abstract value class AbstractValueClassWithInstanceInitializer {\n+    int f;\n+    { f = 42; }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassWithInstanceInitializer.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.abstract.value.class.constructor.cannot.take.arguments\n+\/\/ key: compiler.misc.abstract.value.class\n+\n+public abstract value class AbstractValueClassWithNonTrivialConst {\n+    AbstractValueClassWithNonTrivialConst(int i) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AbstractValueClassWithNonTrivialConst.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.concrete.supertype.for.value.class\n+\n+public class ConcreteSuperclassOfValueClass {\n+    static abstract value class V extends ConcreteSuperclassOfValueClass {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ConcreteSuperclassOfValueClass.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.instance.field.not.allowed\n+\/\/ key: compiler.misc.superclass.of.value.class\n+\n+abstract class InstanceFieldNotAllowedInValueClass {\n+    int i;\n+}\n+\n+value class V extends InstanceFieldNotAllowedInValueClass {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InstanceFieldNotAllowedInValueClass.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.super.class.method.cannot.be.synchronized\n+\n+public abstract class SuperClassMethodCannotBeSynchronized {\n+    synchronized void foo() {}\n+}\n+\n+value class V extends SuperClassMethodCannotBeSynchronized {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SuperClassMethodCannotBeSynchronized.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.this.exposed.prematurely\n+\n+value class ThisExposedPrematurely {\n+    int x;\n+    ThisExposedPrematurely() {\n+        foo(this); \/\/ Error.\n+        x = 10;\n+    }\n+    void foo(ThisExposedPrematurely v) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ThisExposedPrematurely.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -2,6 +2,6 @@\n-BinarySuperclassConstraints.java:29:15: compiler.err.super.field.not.allowed: x, (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I6, SuperclassCollections.SuperWithInstanceField)\n-BinarySuperclassConstraints.java:38:15: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassCollections.SuperWithNonEmptyNoArgCtor(), (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I9, SuperclassCollections.SuperWithNonEmptyNoArgCtor)\n-BinarySuperclassConstraints.java:40:15: compiler.err.super.constructor.cannot.take.arguments: SuperclassCollections.SuperWithArgedCtor(java.lang.String), (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I10, SuperclassCollections.SuperWithArgedCtor)\n-BinarySuperclassConstraints.java:42:15: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassCollections.SuperWithInstanceInit(), (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I11, SuperclassCollections.SuperWithInstanceInit)\n-BinarySuperclassConstraints.java:44:15: compiler.err.super.method.cannot.be.synchronized: foo(), BinarySuperclassConstraints.I12, SuperclassCollections.SuperWithSynchronizedMethod\n-BinarySuperclassConstraints.java:46:15: compiler.err.super.class.cannot.be.inner: (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I13, SuperclassCollections.InnerSuper)\n+BinarySuperclassConstraints.java:29:15: compiler.err.instance.field.not.allowed: x, (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I6, SuperclassCollections.SuperWithInstanceField)\n+BinarySuperclassConstraints.java:38:15: compiler.err.abstract.value.class.no.arg.constructor.must.be.empty: SuperclassCollections.SuperWithNonEmptyNoArgCtor(), (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I9, SuperclassCollections.SuperWithNonEmptyNoArgCtor)\n+BinarySuperclassConstraints.java:40:15: compiler.err.abstract.value.class.constructor.cannot.take.arguments: SuperclassCollections.SuperWithArgedCtor(java.lang.String), (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I10, SuperclassCollections.SuperWithArgedCtor)\n+BinarySuperclassConstraints.java:42:15: compiler.err.abstract.value.class.no.arg.constructor.must.be.empty: SuperclassCollections.SuperWithInstanceInit(), (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I11, SuperclassCollections.SuperWithInstanceInit)\n+BinarySuperclassConstraints.java:44:15: compiler.err.super.class.method.cannot.be.synchronized: foo(), BinarySuperclassConstraints.I12, SuperclassCollections.SuperWithSynchronizedMethod\n+BinarySuperclassConstraints.java:46:15: compiler.err.abstract.value.class.cannot.be.inner: (compiler.misc.superclass.of.value.class: BinarySuperclassConstraints.I13, SuperclassCollections.InnerSuper)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/BinarySuperclassConstraints.out","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,6 +2,6 @@\n-SuperclassConstraints.java:44:15: compiler.err.super.field.not.allowed: x, (compiler.misc.superclass.of.value.class: SuperclassConstraints.I6, SuperclassConstraints.SuperWithInstanceField)\n-SuperclassConstraints.java:76:15: compiler.err.super.no.arg.constructor.must.be.empty: SuperclassConstraints.SuperWithNonEmptyNoArgCtor(), (compiler.misc.superclass.of.value.class: SuperclassConstraints.I9, SuperclassConstraints.SuperWithNonEmptyNoArgCtor)\n-SuperclassConstraints.java:85:15: compiler.err.super.constructor.cannot.take.arguments: SuperclassConstraints.SuperWithArgedCtor(java.lang.String), (compiler.misc.superclass.of.value.class: SuperclassConstraints.I10, SuperclassConstraints.SuperWithArgedCtor)\n-SuperclassConstraints.java:98:15: compiler.err.super.class.declares.init.block: (compiler.misc.superclass.of.value.class: SuperclassConstraints.I11, SuperclassConstraints.SuperWithInstanceInit)\n-SuperclassConstraints.java:106:15: compiler.err.super.method.cannot.be.synchronized: foo(), SuperclassConstraints.I12, SuperclassConstraints.SuperWithSynchronizedMethod\n-SuperclassConstraints.java:110:15: compiler.err.super.class.cannot.be.inner: (compiler.misc.superclass.of.value.class: SuperclassConstraints.I13, SuperclassConstraints.InnerSuper)\n+SuperclassConstraints.java:44:15: compiler.err.instance.field.not.allowed: x, (compiler.misc.superclass.of.value.class: SuperclassConstraints.I6, SuperclassConstraints.SuperWithInstanceField)\n+SuperclassConstraints.java:76:15: compiler.err.abstract.value.class.no.arg.constructor.must.be.empty: SuperclassConstraints.SuperWithNonEmptyNoArgCtor(), (compiler.misc.superclass.of.value.class: SuperclassConstraints.I9, SuperclassConstraints.SuperWithNonEmptyNoArgCtor)\n+SuperclassConstraints.java:85:15: compiler.err.abstract.value.class.constructor.cannot.take.arguments: SuperclassConstraints.SuperWithArgedCtor(java.lang.String), (compiler.misc.superclass.of.value.class: SuperclassConstraints.I10, SuperclassConstraints.SuperWithArgedCtor)\n+SuperclassConstraints.java:98:15: compiler.err.abstract.value.class.declares.init.block: (compiler.misc.superclass.of.value.class: SuperclassConstraints.I11, SuperclassConstraints.SuperWithInstanceInit)\n+SuperclassConstraints.java:106:15: compiler.err.super.class.method.cannot.be.synchronized: foo(), SuperclassConstraints.I12, SuperclassConstraints.SuperWithSynchronizedMethod\n+SuperclassConstraints.java:110:15: compiler.err.abstract.value.class.cannot.be.inner: (compiler.misc.superclass.of.value.class: SuperclassConstraints.I13, SuperclassConstraints.InnerSuper)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/SuperclassConstraints.out","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,10 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8287136\n- * @summary [lw4] Javac tolerates abstract value classes that violate constraints for qualifying to be value super classes\n- * @compile\/fail\/ref=ValueConcreteSuperType.out -XDrawDiagnostics ValueConcreteSuperType.java\n- *\/\n-\n-public class ValueConcreteSuperType {\n-    static abstract value class H extends ValueConcreteSuperType {}  \/\/ Error: concrete super.\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueConcreteSuperType.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-ValueConcreteSuperType.java:9:27: compiler.err.concrete.supertype.for.value.class: ValueConcreteSuperType.H, ValueConcreteSuperType\n-1 error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/primitive-classes\/ValueConcreteSuperType.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,1 +1,1 @@\n-CheckMakeDefault.java:10:20: compiler.err.super.class.cannot.be.inner: (compiler.misc.abstract.value.class: Point.A)\n+CheckMakeDefault.java:10:20: compiler.err.abstract.value.class.cannot.be.inner: (compiler.misc.abstract.value.class: Point.A)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/CheckMakeDefault.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import com.sun.tools.classfile.Field;\n@@ -65,1 +66,1 @@\n-        assertFail(\"compiler.err.super.field.not.allowed\",\n+        assertFail(\"compiler.err.instance.field.not.allowed\",\n@@ -71,1 +72,1 @@\n-        assertFail(\"compiler.err.super.class.cannot.be.inner\",\n+        assertFail(\"compiler.err.abstract.value.class.cannot.be.inner\",\n@@ -87,1 +88,1 @@\n-        assertFail(\"compiler.err.super.class.declares.init.block\",\n+        assertFail(\"compiler.err.abstract.value.class.declares.init.block\",\n@@ -93,1 +94,1 @@\n-        assertFail(\"compiler.err.super.constructor.cannot.take.arguments\",\n+        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.take.arguments\",\n@@ -124,1 +125,1 @@\n-        assertFail(\"compiler.err.super.field.not.allowed\",\n+        assertFail(\"compiler.err.instance.field.not.allowed\",\n@@ -132,1 +133,1 @@\n-        assertFail(\"compiler.err.super.class.cannot.be.inner\",\n+        assertFail(\"compiler.err.abstract.value.class.cannot.be.inner\",\n@@ -135,1 +136,1 @@\n-                    abstract class I { \/* has identity since is an inner class *\/ }\n+                    abstract class I {} \/\/ has identity since is an inner class\n@@ -140,1 +141,1 @@\n-        assertFail(\"compiler.err.super.method.cannot.be.synchronized\",\n+        assertFail(\"compiler.err.super.class.method.cannot.be.synchronized\",\n@@ -148,1 +149,1 @@\n-        assertFail(\"compiler.err.super.class.declares.init.block\",\n+        assertFail(\"compiler.err.abstract.value.class.declares.init.block\",\n@@ -156,1 +157,1 @@\n-        assertFail(\"compiler.err.super.constructor.cannot.take.arguments\",\n+        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.take.arguments\",\n@@ -163,0 +164,6 @@\n+        assertFail(\"compiler.err.concrete.supertype.for.value.class\",\n+                \"\"\"\n+                class ConcreteSuperType {\n+                    static abstract value class V extends ConcreteSuperType {}  \/\/ Error: concrete super.\n+                }\n+                \"\"\");\n@@ -243,1 +250,1 @@\n-        assertFail(\"compiler.err.super.class.cannot.be.inner\",\n+        assertFail(\"compiler.err.abstract.value.class.cannot.be.inner\",\n@@ -288,1 +295,5 @@\n-                value identity class IdentityValue {}\n+                value identity class ValueIdentity {}\n+                \"\"\");\n+        assertFail(\"compiler.err.illegal.combination.of.modifiers\",\n+                \"\"\"\n+                identity value class IdentityValue {}\n@@ -330,0 +341,10 @@\n+                    }\n+                    void foo(V v) {}\n+                }\n+                \"\"\");\n+        assertOK(\n+                \"\"\"\n+                value class V {\n+                    int x;\n+                    V() {\n+                        x = 10;\n@@ -374,1 +395,1 @@\n-                    public V() { \/* trivial ctor *\/ }\n+                    public V() {} \/\/ trivial ctor\n@@ -378,1 +399,1 @@\n-        assertFail(\"compiler.err.super.constructor.access.restricted\",\n+        assertFail(\"compiler.err.abstract.value.class.constructor.has.weaker.access\",\n@@ -384,1 +405,1 @@\n-        assertFail(\"compiler.err.super.constructor.cannot.take.arguments\",\n+        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.take.arguments\",\n@@ -390,1 +411,1 @@\n-        assertFail(\"compiler.err.super.constructor.cannot.be.generic\",\n+        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.be.generic\",\n@@ -396,1 +417,1 @@\n-        assertFail(\"compiler.err.super.constructor.cannot.throw\",\n+        assertFail(\"compiler.err.abstract.value.class.constructor.cannot.throw\",\n@@ -402,1 +423,1 @@\n-        assertFail(\"compiler.err.super.no.arg.constructor.must.be.empty\",\n+        assertFail(\"compiler.err.abstract.value.class.no.arg.constructor.must.be.empty\",\n@@ -575,1 +596,1 @@\n-    public void testCheckThatAnonymousIsIdentity() throws Exception {\n+    public void testCheckClassFileFlags() throws Exception {\n@@ -593,0 +614,6 @@\n+                \"\"\",\n+                \"\"\"\n+                class Test {\n+                    \/\/ abstract inner class is implicitly an `identity` class\n+                    abstract class Inner {}\n+                }\n@@ -599,1 +626,112 @@\n-                    assertTrue(classFile.access_flags.flags == Flags.ACC_IDENTITY);\n+                    assertTrue((classFile.access_flags.flags & Flags.ACC_IDENTITY) != 0);\n+                }\n+            }\n+        }\n+\n+        for (String source : List.of(\n+                \"\"\"\n+                identity interface I {}\n+                class Sub implements I {}\n+                \"\"\",\n+                \"\"\"\n+                abstract class A {\n+                    \/\/ declares a non-static field so it is implicitly an identity class\n+                    int i;\n+                }\n+                \"\"\",\n+                \"\"\"\n+                abstract class A {\n+                    \/\/ declares a synchronized method so it is implicitly an identity class\n+                    synchronized void m() {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                class C {\n+                    \/\/ declares a synchronized method so it is implicitly an identity class\n+                    synchronized void m() {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                abstract class A {\n+                    int i;\n+                    \/\/ declares an instance initializer so it is implicitly an identity class\n+                    { i = 0; }\n+                }\n+                \"\"\",\n+                \"\"\"\n+                abstract class A {\n+                    \/\/ declares a non-trivial constructor\n+                    A(int i) {}\n+                }\n+                \"\"\",\n+                \"\"\"\n+                    enum E {}\n+                \"\"\",\n+                \"\"\"\n+                    identity enum E {}\n+                \"\"\",\n+                \"\"\"\n+                    record R() {}\n+                \"\"\",\n+                \"\"\"\n+                   identity record R() {}\n+                \"\"\"\n+        )) {\n+            File dir = assertOK(true, source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                ClassFile classFile = ClassFile.read(fileEntry);\n+                assertTrue(classFile.access_flags.is(Flags.ACC_IDENTITY));\n+                assertTrue(!classFile.access_flags.is(Flags.VALUE_CLASS));\n+            }\n+        }\n+\n+        {\n+            String source =\n+                    \"\"\"\n+                            value interface I {}\n+                            abstract class A implements I {} \/\/ not a value class as it doens't have the value modifier\n+                            value class Sub extends A {} \/\/implicitly final\n+                            \"\"\";\n+            File dir = assertOK(true, source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                ClassFile classFile = ClassFile.read(fileEntry);\n+                switch (classFile.getName()) {\n+                    case \"Sub\":\n+                        assertTrue((classFile.access_flags.flags & (Flags.VALUE_CLASS | Flags.FINAL)) != 0);\n+                        break;\n+                    case \"A\":\n+                        assertTrue((classFile.access_flags.flags & (Flags.ABSTRACT)) != 0);\n+                        break;\n+                    case \"I\":\n+                        assertTrue((classFile.access_flags.flags & (Flags.INTERFACE | Flags.VALUE_CLASS)) != 0);\n+                        break;\n+                    default:\n+                        throw new AssertionError(\"you shoulnd't be here\");\n+                }\n+            }\n+        }\n+\n+        for (String source : List.of(\n+                \"\"\"\n+                value class V {\n+                    int i = 0;\n+                    static int j;\n+                }\n+                \"\"\",\n+                \"\"\"\n+                abstract value class A {\n+                    static int j;\n+                }\n+\n+                value class V extends A {\n+                    int i = 0;\n+                }\n+                \"\"\"\n+        )) {\n+            File dir = assertOK(true, source);\n+            for (final File fileEntry : dir.listFiles()) {\n+                ClassFile classFile = ClassFile.read(fileEntry);\n+                for (Field field : classFile.fields) {\n+                    if (!field.access_flags.is(Flags.STATIC)) {\n+                        assertTrue(field.access_flags.is(Flags.FINAL));\n+                    }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ValueObjectCompilationTests.java","additions":158,"deletions":20,"binary":false,"changes":178,"status":"modified"}]}