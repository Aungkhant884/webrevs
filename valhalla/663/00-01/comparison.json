{"files":[{"patch":"@@ -2032,0 +2032,6 @@\n+\n+        public Type withTypeVar(Type t) {\n+            return t.hasTag(TYPEVAR) && t.isReferenceProjection() && t == projection ?\n+                    referenceProjection() :\n+                    this;\n+        }\n@@ -2098,0 +2104,4 @@\n+\n+        public Type withTypeVar(Type t) {\n+            return this;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1753,1 +1753,4 @@\n-                    if (allowUniversalTVars && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym)\n+                    if (allowUniversalTVars && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym) {\n+                        if (warnStack.head != null) {\n+                            warnStack.head.warn(LintCategory.UNCHECKED);\n+                        }\n@@ -1755,0 +1758,1 @@\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,6 +86,6 @@\n-                    \"\"\"\n-                    class Box<__universal T> {\n-                        T t;\n-                        void m() { t = null; }\n-                    }\n-                    \"\"\"),\n+                \"\"\"\n+                class Box<__universal T> {\n+                    T t;\n+                    void m() { t = null; }\n+                }\n+                \"\"\"),\n@@ -93,5 +93,5 @@\n-                    \"\"\"\n-                    class Box<__universal T> {\n-                        T m() { return null; }\n-                    }\n-                    \"\"\"),\n+                \"\"\"\n+                class Box<__universal T> {\n+                    T m() { return null; }\n+                }\n+                \"\"\"),\n@@ -99,7 +99,5 @@\n-                    \"\"\"\n-                    class Box<__universal T> {\n-                        T t;\n-                        Box(T t) {\n-                            this.t = t;\n-                        }\n-                        void m() { t = null; }\n+                \"\"\"\n+                class Box<__universal T> {\n+                    T t;\n+                    Box(T t) {\n+                        this.t = t;\n@@ -107,1 +105,3 @@\n-                    \"\"\"),\n+                    void m() { t = null; }\n+                }\n+                \"\"\"),\n@@ -109,12 +109,11 @@\n-                    \"\"\"\n-                    import java.util.function.*;\n-\n-                    class MyMap<__universal K, __universal V> {\n-                        K getKey(K k) { return k; }\n-                        V getValue(V v) { return v; }\n-\n-                        void m(BiFunction<? super K, ? super V, ? extends V> f, K k1, V v1) {\n-                            K k = getKey(k1);\n-                            V v = getValue(v1);\n-                            v = f.apply(k, v);\n-                        }\n+                \"\"\"\n+                import java.util.function.*;\n+\n+                class MyMap<__universal K, __universal V> {\n+                    K getKey(K k) { return k; }\n+                    V getValue(V v) { return v; }\n+\n+                    void m(BiFunction<? super K, ? super V, ? extends V> f, K k1, V v1) {\n+                        K k = getKey(k1);\n+                        V v = getValue(v1);\n+                        v = f.apply(k, v);\n@@ -122,9 +121,9 @@\n-                    \"\"\"),\n-                    new DiagAndCode(\"compiler.warn.universal.variable.cannot.be.assigned.null\",\n-                    \"\"\"\n-                    class Foo<__universal X> {\n-                        void m() {}\n-                        void m2(X x) {}\n-                        void test() {\n-                            m2(null);\n-                        }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.universal.variable.cannot.be.assigned.null\",\n+                \"\"\"\n+                class Foo<__universal X> {\n+                    void m() {}\n+                    void m2(X x) {}\n+                    void test() {\n+                        m2(null);\n@@ -132,1 +131,2 @@\n-                    \"\"\"),\n+                }\n+                \"\"\"),\n@@ -178,0 +178,10 @@\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                \"\"\"\n+                class Wrapper<__universal T> {}\n+                class Test<__universal T> {\n+                    Wrapper<T.ref> newWrapper() { return null; }\n+                    void m() {\n+                        Wrapper<T> w = newWrapper();\n+                    }\n+                }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":51,"deletions":41,"binary":false,"changes":92,"status":"modified"}]}