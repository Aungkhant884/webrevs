{"files":[{"patch":"@@ -2032,0 +2032,6 @@\n+\n+        public Type withTypeVar(Type t) {\n+            return t.hasTag(TYPEVAR) && t.isReferenceProjection() && t == projection ?\n+                    referenceProjection() :\n+                    this;\n+        }\n@@ -2098,0 +2104,4 @@\n+\n+        public Type withTypeVar(Type t) {\n+            return this;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1087,3 +1087,16 @@\n-        boolean result = isSubtypeUncheckedInternal(t, s, true, warn);\n-        if (result) {\n-            checkUnsafeVarargsConversion(t, s, warn);\n+        boolean result = false;\n+        if (warn != warnStack.head) {\n+            try {\n+                warnStack = warnStack.prepend(warn);\n+                result = isSubtypeUncheckedInternal(t, s, true, warn);\n+                if (result) {\n+                    checkUnsafeVarargsConversion(t, s, warn);\n+                }\n+            } finally {\n+                warnStack = warnStack.tail;\n+            }\n+        } else {\n+            result = isSubtypeUncheckedInternal(t, s, true, warn);\n+            if (result) {\n+                checkUnsafeVarargsConversion(t, s, warn);\n+            }\n@@ -1675,2 +1688,12 @@\n-                else\n-                    return isSameType(t, s);\n+                else {\n+                    boolean result = isSameType(t, s);\n+                    \/\/ warnStack.head is != null if we are checking for an assignment, in other cases we should be strict\n+                    \/\/ the order in the condition below matters\n+                    if (warnStack.head != null && allowUniversalTVars && !result) {\n+                        result = isSameType(t.referenceProjectionOrSelf(), s.referenceProjectionOrSelf());\n+                        if (result) {\n+                            warnStack.head.warn(LintCategory.UNCHECKED);\n+                        }\n+                    }\n+                    return result;\n+                }\n@@ -1730,1 +1753,4 @@\n-                    if (allowUniversalTVars && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym)\n+                    if (allowUniversalTVars && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym) {\n+                        if (warnStack.head != null) {\n+                            warnStack.head.warn(LintCategory.UNCHECKED);\n+                        }\n@@ -1732,0 +1758,1 @@\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        \"-Xlint:universal\"\n+        \"-Xlint:all\"\n@@ -81,1 +81,1 @@\n-    public void testWarningNullAssigment() {\n+    public void testWarnings() {\n@@ -86,6 +86,6 @@\n-                    \"\"\"\n-                    class Box<__universal T> {\n-                        T t;\n-                        void m() { t = null; }\n-                    }\n-                    \"\"\"),\n+                \"\"\"\n+                class Box<__universal T> {\n+                    T t;\n+                    void m() { t = null; }\n+                }\n+                \"\"\"),\n@@ -93,5 +93,5 @@\n-                    \"\"\"\n-                    class Box<__universal T> {\n-                        T m() { return null; }\n-                    }\n-                    \"\"\"),\n+                \"\"\"\n+                class Box<__universal T> {\n+                    T m() { return null; }\n+                }\n+                \"\"\"),\n@@ -99,7 +99,5 @@\n-                    \"\"\"\n-                    class Box<__universal T> {\n-                        T t;\n-                        Box(T t) {\n-                            this.t = t;\n-                        }\n-                        void m() { t = null; }\n+                \"\"\"\n+                class Box<__universal T> {\n+                    T t;\n+                    Box(T t) {\n+                        this.t = t;\n@@ -107,1 +105,3 @@\n-                    \"\"\"),\n+                    void m() { t = null; }\n+                }\n+                \"\"\"),\n@@ -109,12 +109,21 @@\n-                    \"\"\"\n-                    import java.util.function.*;\n-\n-                    class MyMap<__universal K, __universal V> {\n-                        K getKey(K k) { return k; }\n-                        V getValue(V v) { return v; }\n-\n-                        void m(BiFunction<? super K, ? super V, ? extends V> f, K k1, V v1) {\n-                            K k = getKey(k1);\n-                            V v = getValue(v1);\n-                            v = f.apply(k, v);\n-                        }\n+                \"\"\"\n+                import java.util.function.*;\n+\n+                class MyMap<__universal K, __universal V> {\n+                    K getKey(K k) { return k; }\n+                    V getValue(V v) { return v; }\n+\n+                    void m(BiFunction<? super K, ? super V, ? extends V> f, K k1, V v1) {\n+                        K k = getKey(k1);\n+                        V v = getValue(v1);\n+                        v = f.apply(k, v);\n+                    }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.universal.variable.cannot.be.assigned.null\",\n+                \"\"\"\n+                class Foo<__universal X> {\n+                    void m() {}\n+                    void m2(X x) {}\n+                    void test() {\n+                        m2(null);\n@@ -122,1 +131,59 @@\n-                    \"\"\") )) {\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                \"\"\"\n+                class Foo<__universal X> { }\n+\n+                primitive class Atom { }\n+\n+                class Test {\n+                    void m(Foo<Atom> val, Foo<Atom.ref> ref) {\n+                        val = ref;\n+                    }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                \"\"\"\n+                class Foo<__universal X> { }\n+                primitive class Atom { }\n+                class Test {\n+                    void m(Foo<Atom> val, Foo<Atom.ref> ref) {\n+                        ref = val;\n+                    }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.unchecked.meth.invocation.applied\",\n+                \"\"\"\n+                class Foo<__universal X> { }\n+                primitive class Atom {}\n+                class Test {\n+                    void bar(Foo<Atom.ref> f) {}\n+                    void m() {\n+                        Foo<Atom> val = null;\n+                        bar(val);\n+                    }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.unchecked.meth.invocation.applied\",\n+                \"\"\"\n+                class Foo<__universal X> { }\n+                primitive class Atom {}\n+                class Test {\n+                    void bar(Foo<Atom> f) {}\n+                    void m() {\n+                        Foo<Atom.ref> ref = null;\n+                        bar(ref);\n+                    }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                \"\"\"\n+                class Wrapper<__universal T> {}\n+                class Test<__universal T> {\n+                    Wrapper<T.ref> newWrapper() { return null; }\n+                    void m() {\n+                        Wrapper<T> w = newWrapper();\n+                    }\n+                }\n+                \"\"\")\n+                )) {\n@@ -167,0 +234,7 @@\n+                \"\"\",\n+                \"\"\"\n+                primitive class Atom {}\n+                class Test {\n+                    void bar(Atom f) {}\n+                    void bar(Atom.ref f) {}\n+                }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":108,"deletions":34,"binary":false,"changes":142,"status":"modified"}]}