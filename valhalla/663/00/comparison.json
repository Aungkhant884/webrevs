{"files":[{"patch":"@@ -1087,3 +1087,16 @@\n-        boolean result = isSubtypeUncheckedInternal(t, s, true, warn);\n-        if (result) {\n-            checkUnsafeVarargsConversion(t, s, warn);\n+        boolean result = false;\n+        if (warn != warnStack.head) {\n+            try {\n+                warnStack = warnStack.prepend(warn);\n+                result = isSubtypeUncheckedInternal(t, s, true, warn);\n+                if (result) {\n+                    checkUnsafeVarargsConversion(t, s, warn);\n+                }\n+            } finally {\n+                warnStack = warnStack.tail;\n+            }\n+        } else {\n+            result = isSubtypeUncheckedInternal(t, s, true, warn);\n+            if (result) {\n+                checkUnsafeVarargsConversion(t, s, warn);\n+            }\n@@ -1675,2 +1688,12 @@\n-                else\n-                    return isSameType(t, s);\n+                else {\n+                    boolean result = isSameType(t, s);\n+                    \/\/ warnStack.head is != null if we are checking for an assignment, in other cases we should be strict\n+                    \/\/ the order in the condition below matters\n+                    if (warnStack.head != null && allowUniversalTVars && !result) {\n+                        result = isSameType(t.referenceProjectionOrSelf(), s.referenceProjectionOrSelf());\n+                        if (result) {\n+                            warnStack.head.warn(LintCategory.UNCHECKED);\n+                        }\n+                    }\n+                    return result;\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        \"-Xlint:universal\"\n+        \"-Xlint:all\"\n@@ -81,1 +81,1 @@\n-    public void testWarningNullAssigment() {\n+    public void testWarnings() {\n@@ -122,1 +122,58 @@\n-                    \"\"\") )) {\n+                    \"\"\"),\n+                    new DiagAndCode(\"compiler.warn.universal.variable.cannot.be.assigned.null\",\n+                    \"\"\"\n+                    class Foo<__universal X> {\n+                        void m() {}\n+                        void m2(X x) {}\n+                        void test() {\n+                            m2(null);\n+                        }\n+                    }\n+                    \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                \"\"\"\n+                class Foo<__universal X> { }\n+\n+                primitive class Atom { }\n+\n+                class Test {\n+                    void m(Foo<Atom> val, Foo<Atom.ref> ref) {\n+                        val = ref;\n+                    }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.prob.found.req\",\n+                \"\"\"\n+                class Foo<__universal X> { }\n+                primitive class Atom { }\n+                class Test {\n+                    void m(Foo<Atom> val, Foo<Atom.ref> ref) {\n+                        ref = val;\n+                    }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.unchecked.meth.invocation.applied\",\n+                \"\"\"\n+                class Foo<__universal X> { }\n+                primitive class Atom {}\n+                class Test {\n+                    void bar(Foo<Atom.ref> f) {}\n+                    void m() {\n+                        Foo<Atom> val = null;\n+                        bar(val);\n+                    }\n+                }\n+                \"\"\"),\n+                new DiagAndCode(\"compiler.warn.unchecked.meth.invocation.applied\",\n+                \"\"\"\n+                class Foo<__universal X> { }\n+                primitive class Atom {}\n+                class Test {\n+                    void bar(Foo<Atom> f) {}\n+                    void m() {\n+                        Foo<Atom.ref> ref = null;\n+                        bar(ref);\n+                    }\n+                }\n+                \"\"\")\n+                )) {\n@@ -167,0 +224,7 @@\n+                \"\"\",\n+                \"\"\"\n+                primitive class Atom {}\n+                class Test {\n+                    void bar(Atom f) {}\n+                    void bar(Atom.ref f) {}\n+                }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":67,"deletions":3,"binary":false,"changes":70,"status":"modified"}]}