{"files":[{"patch":"@@ -2032,6 +2032,0 @@\n-\n-        public Type withTypeVar(Type t) {\n-            return t.hasTag(TYPEVAR) && t.isReferenceProjection() && t == projection ?\n-                    referenceProjection() :\n-                    this;\n-        }\n@@ -2104,4 +2098,0 @@\n-\n-        public Type withTypeVar(Type t) {\n-            return this;\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1688,12 +1688,2 @@\n-                else {\n-                    boolean result = isSameType(t, s);\n-                    \/\/ warnStack.head is != null if we are checking for an assignment, in other cases we should be strict\n-                    \/\/ the order in the condition below matters\n-                    if (warnStack.head != null && allowUniversalTVars && !result) {\n-                        result = isSameType(t.referenceProjectionOrSelf(), s.referenceProjectionOrSelf());\n-                        if (result) {\n-                            warnStack.head.warn(LintCategory.UNCHECKED);\n-                        }\n-                    }\n-                    return result;\n-                }\n+                else\n+                    return isSameType(t, s);\n@@ -1753,4 +1743,1 @@\n-                    if (allowUniversalTVars && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym) {\n-                        if (warnStack.head != null) {\n-                            warnStack.head.warn(LintCategory.UNCHECKED);\n-                        }\n+                    if (allowUniversalTVars && t.isValueProjection() != other.isValueProjection() && t.tsym == other.tsym)\n@@ -1758,1 +1745,0 @@\n-                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        \"-Xlint:all\"\n+        \"-Xlint:universal\"\n@@ -81,1 +81,1 @@\n-    public void testWarnings() {\n+    public void testWarningNullAssigment() {\n@@ -86,6 +86,6 @@\n-                \"\"\"\n-                class Box<__universal T> {\n-                    T t;\n-                    void m() { t = null; }\n-                }\n-                \"\"\"),\n+                    \"\"\"\n+                    class Box<__universal T> {\n+                        T t;\n+                        void m() { t = null; }\n+                    }\n+                    \"\"\"),\n@@ -93,5 +93,5 @@\n-                \"\"\"\n-                class Box<__universal T> {\n-                    T m() { return null; }\n-                }\n-                \"\"\"),\n+                    \"\"\"\n+                    class Box<__universal T> {\n+                        T m() { return null; }\n+                    }\n+                    \"\"\"),\n@@ -99,5 +99,7 @@\n-                \"\"\"\n-                class Box<__universal T> {\n-                    T t;\n-                    Box(T t) {\n-                        this.t = t;\n+                    \"\"\"\n+                    class Box<__universal T> {\n+                        T t;\n+                        Box(T t) {\n+                            this.t = t;\n+                        }\n+                        void m() { t = null; }\n@@ -105,3 +107,1 @@\n-                    void m() { t = null; }\n-                }\n-                \"\"\"),\n+                    \"\"\"),\n@@ -109,11 +109,12 @@\n-                \"\"\"\n-                import java.util.function.*;\n-\n-                class MyMap<__universal K, __universal V> {\n-                    K getKey(K k) { return k; }\n-                    V getValue(V v) { return v; }\n-\n-                    void m(BiFunction<? super K, ? super V, ? extends V> f, K k1, V v1) {\n-                        K k = getKey(k1);\n-                        V v = getValue(v1);\n-                        v = f.apply(k, v);\n+                    \"\"\"\n+                    import java.util.function.*;\n+\n+                    class MyMap<__universal K, __universal V> {\n+                        K getKey(K k) { return k; }\n+                        V getValue(V v) { return v; }\n+\n+                        void m(BiFunction<? super K, ? super V, ? extends V> f, K k1, V v1) {\n+                            K k = getKey(k1);\n+                            V v = getValue(v1);\n+                            v = f.apply(k, v);\n+                        }\n@@ -121,2 +122,1 @@\n-                }\n-                \"\"\"),\n+                    \"\"\"),\n@@ -124,18 +124,7 @@\n-                \"\"\"\n-                class Foo<__universal X> {\n-                    void m() {}\n-                    void m2(X x) {}\n-                    void test() {\n-                        m2(null);\n-                    }\n-                }\n-                \"\"\"),\n-                new DiagAndCode(\"compiler.warn.prob.found.req\",\n-                \"\"\"\n-                class Foo<__universal X> { }\n-\n-                primitive class Atom { }\n-\n-                class Test {\n-                    void m(Foo<Atom> val, Foo<Atom.ref> ref) {\n-                        val = ref;\n+                    \"\"\"\n+                    class Foo<__universal X> {\n+                        void m() {}\n+                        void m2(X x) {}\n+                        void test() {\n+                            m2(null);\n+                        }\n@@ -143,47 +132,2 @@\n-                }\n-                \"\"\"),\n-                new DiagAndCode(\"compiler.warn.prob.found.req\",\n-                \"\"\"\n-                class Foo<__universal X> { }\n-                primitive class Atom { }\n-                class Test {\n-                    void m(Foo<Atom> val, Foo<Atom.ref> ref) {\n-                        ref = val;\n-                    }\n-                }\n-                \"\"\"),\n-                new DiagAndCode(\"compiler.warn.unchecked.meth.invocation.applied\",\n-                \"\"\"\n-                class Foo<__universal X> { }\n-                primitive class Atom {}\n-                class Test {\n-                    void bar(Foo<Atom.ref> f) {}\n-                    void m() {\n-                        Foo<Atom> val = null;\n-                        bar(val);\n-                    }\n-                }\n-                \"\"\"),\n-                new DiagAndCode(\"compiler.warn.unchecked.meth.invocation.applied\",\n-                \"\"\"\n-                class Foo<__universal X> { }\n-                primitive class Atom {}\n-                class Test {\n-                    void bar(Foo<Atom> f) {}\n-                    void m() {\n-                        Foo<Atom.ref> ref = null;\n-                        bar(ref);\n-                    }\n-                }\n-                \"\"\"),\n-                new DiagAndCode(\"compiler.warn.prob.found.req\",\n-                \"\"\"\n-                class Wrapper<__universal T> {}\n-                class Test<__universal T> {\n-                    Wrapper<T.ref> newWrapper() { return null; }\n-                    void m() {\n-                        Wrapper<T> w = newWrapper();\n-                    }\n-                }\n-                \"\"\")\n-                )) {\n+                    \"\"\")\n+                    )) {\n@@ -234,7 +178,0 @@\n-                \"\"\",\n-                \"\"\"\n-                primitive class Atom {}\n-                class Test {\n-                    void bar(Atom f) {}\n-                    void bar(Atom.ref f) {}\n-                }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/universal-type-variables\/UniversalTVarsCompilationTests.java","additions":43,"deletions":106,"binary":false,"changes":149,"status":"modified"}]}