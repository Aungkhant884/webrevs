{"files":[{"patch":"@@ -1457,13 +1457,3 @@\n-                    if (ct.flavor == Flavor.X_Typeof_X) {\n-                        \/\/ TODO: Discriminate between ref-val defaultness. ATM, we are blind to default favor\n-                        ClassType ef = this.erasure_field != null && this.erasure_field.hasTag(CLASS) ?\n-                                (ClassType) this.erasure_field : null;\n-                        if ((this.flags_field & PRIMITIVE_CLASS) != 0) {\n-                            ct.flavor = Flavor.Q_TypeOf_Q;\n-                            if (ef != null)\n-                                ef.flavor = Flavor.Q_TypeOf_Q;\n-                        } else {\n-                            ct.flavor = Flavor.L_TypeOf_L;\n-                            if (ef != null)\n-                                ef.flavor = Flavor.L_TypeOf_L;\n-                        }\n+                    ct.flavor = ct.flavor.metamorphose((this.flags_field & PRIMITIVE_CLASS) != 0);\n+                    if (this.erasure_field != null && this.erasure_field.hasTag(CLASS)) {\n+                        ((ClassType) this.erasure_field).flavor = ct.flavor;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1082,0 +1082,24 @@\n+\n+            \/\/ Transform a larval form into a more evolved form\n+            public Flavor metamorphose(boolean isPrimtiveClass) {\n+\n+                switch (this) {\n+\n+                    case E_Typeof_X:  \/\/ stunted form\n+                    case L_TypeOf_L:\n+                    case L_TypeOf_Q:\n+                    case Q_TypeOf_L:\n+                    case Q_TypeOf_Q:\n+                            \/\/ These are fully evolved sealed forms or stunted - no futher transformation\n+                            return this;\n+                    case L_TypeOf_X:\n+                            return isPrimtiveClass ? L_TypeOf_Q : L_TypeOf_L;\n+                    case Q_TypeOf_X:\n+                            return isPrimtiveClass ? Q_TypeOf_Q : Q_TypeOf_L;\n+                    case X_Typeof_X:\n+                            \/\/ TODO: Discriminate between ref-val defaultness\n+                            return isPrimtiveClass ? Q_TypeOf_Q : L_TypeOf_L;\n+                    default:\n+                            throw new AssertionError(\"Unexpected class type flavor\");\n+                }\n+            }\n@@ -1304,5 +1328,4 @@\n-            if (flavor == Flavor.L_TypeOf_X) {\n-                if (tsym != null && tsym.isPrimitiveClass()) {\n-                    flavor = Flavor.L_TypeOf_Q;\n-                } else {\n-                    flavor = Flavor.L_TypeOf_L;\n+            \/\/ gaurd against over-eager and\/or inopportune completion\n+            if (tsym != null) {\n+                if (flavor == Flavor.L_TypeOf_X || tsym.isCompleted()) {\n+                    flavor = flavor.metamorphose(tsym.isPrimitiveClass());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -478,6 +478,2 @@\n-        \/\/ TODO: Discriminate between ref-val defaultness. ATM, we are blind to default favor\n-        if ((c.flags_field & PRIMITIVE_CLASS) != 0) {\n-            ct.flavor = Flavor.Q_TypeOf_Q;\n-        } else {\n-            ct.flavor = Flavor.L_TypeOf_L;\n-        }\n+        ct.flavor = ct.flavor.metamorphose((c.flags_field & PRIMITIVE_CLASS) != 0);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2537,1 +2537,1 @@\n-        ct.flavor = Q_TypeOf_Q;\n+        ct.flavor = ct.flavor.metamorphose(true);\n@@ -2539,2 +2539,1 @@\n-            ClassType ef = (ClassType) c.erasure_field;\n-            ef.flavor = Q_TypeOf_Q;\n+            ((ClassType) c.erasure_field).flavor = ct.flavor;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}