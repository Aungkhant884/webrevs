{"files":[{"patch":"@@ -243,1 +243,1 @@\n-    PRIMITIVE(0x0000_0800, true, Set.of(Location.CLASS, Location.INNER_CLASS)),\n+    PRIMITIVE(0x0000_0800, true, Location.SET_CLASS_INNER_CLASS),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-import java.lang.reflect.AccessFlag;\n@@ -65,0 +64,1 @@\n+import java.lang.reflect.Modifier;\n@@ -686,1 +686,1 @@\n-        return (clazz.getModifiers() & AccessFlag.PRIMITIVE.mask()) != 0;\n+        return (clazz.getModifiers() & Modifier.PRIMITIVE) != 0;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Type.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,0 +89,3 @@\n+                new Object[] { InterfaceWithNested.IdentityClass.class, true, false, false },\n+                new Object[] { InterfaceWithNested.ValueClass.class, false, true, false },\n+                new Object[] { InterfaceWithNested.PrimitiveClass.class, false, true, true },\n@@ -99,3 +102,3 @@\n-        assertEquals(clz.isIdentity(), isIdentityClass, \"identity class\");\n-        assertEquals(clz.isValue(), isValueClass, \"value class\");\n-        assertEquals(clz.isPrimitiveClass(), isPrimitiveClass, \"primitive class\");\n+        assertEquals(clz.isIdentity(), isIdentityClass, \"identity class: \" + clz);\n+        assertEquals(clz.isValue(), isValueClass, \"value class: \" + clz);\n+        assertEquals(clz.isPrimitiveClass(), isPrimitiveClass, \"primitive class: \" + clz);\n@@ -123,1 +126,1 @@\n-\/\/    identity interface SimpleIdentityInterface {} \/\/ Illegal class modifieres from VM\n+    identity interface SimpleIdentityInterface {} \/\/ Illegal class modifiers from VM\n@@ -127,0 +130,6 @@\n+    interface InterfaceWithNested {\n+        identity class IdentityClass {}\n+        value class ValueClass {}\n+        primitive class PrimitiveClass {}\n+    }\n+\n@@ -131,1 +140,1 @@\n-\/\/                new Object[] { SimpleIdentityInterface.class, true, false, true },  \/\/ VM throws\n+                new Object[] { SimpleIdentityInterface.class, true, false, true },  \/\/ VM throws\n@@ -143,3 +152,3 @@\n-        assertEquals(clz.isIdentity(), isIdentityClass, \"identity class\");\n-        assertEquals(clz.isValue(), isValueClass, \"value class\");\n-        assertEquals(Modifier.isAbstract(clz.getModifiers()), isAbstract, \"abstract\");\n+        assertEquals(clz.isIdentity(), isIdentityClass, \"identity class: \" + clz);\n+        assertEquals(clz.isValue(), isValueClass, \"value class: \" + clz);\n+        assertEquals(Modifier.isAbstract(clz.getModifiers()), isAbstract, \"abstract: \" + clz);\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryTest.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"}]}