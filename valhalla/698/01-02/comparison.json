{"files":[{"patch":"@@ -207,1 +207,0 @@\n-    private static final int PERMITS_VALUE   = 0x00000100;\n@@ -514,2 +513,2 @@\n-                                    ClassLoader loader,\n-                                    Class<?> caller)\n+                                            ClassLoader loader,\n+                                            Class<?> caller)\n@@ -1508,0 +1507,8 @@\n+    \/**\n+     * {@return true if this class has the requested {@link AccessFlag}}\n+     * @param flag an {@link AccessFlag}\n+     *\/\n+    public boolean is(AccessFlag flag) {\n+        return (getModifiers() & flag.mask()) == flag.mask();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-    SUPER(0x0000_0020, false, Set.of(Location.CLASS)),\n+\/\/    SUPER(0x0000_0020, false, Set.of(Location.CLASS)),\n@@ -137,3 +137,1 @@\n-     * The access flag {@code ACC_IDENTITY} corresponding to the\n-     * source modifier {@link Modifier#VALUE value} with a mask\n-     * value of {@code 0x0020}.\n+     * The access flag {@code ACC_IDENTITY} with a mask value of {@code 0x0020}.\n@@ -141,1 +139,1 @@\n-    IDENTITY(Modifier.IDENTITY, true, Set.of(Location.CLASS)),\n+    IDENTITY(0x0000_0020, false, Set.of(Location.CLASS)),\n@@ -172,3 +170,1 @@\n-     * The access flag {@code ACC_VALUE} corresponding to the\n-     * source modifier {@link Modifier#VALUE value} with a mask\n-     * value of {@code 0x0040}.\n+     * The access flag {@code ACC_VALUE} with a mask value of {@code 0x0040}.\n@@ -176,1 +172,1 @@\n-    VALUE(Modifier.VALUE, true, Set.of(Location.CLASS)),\n+    VALUE(0x0000_0040, false, Set.of(Location.CLASS)),\n@@ -230,3 +226,1 @@\n-     * The access flag {@code ACC_PRIMITIVE}, corresponding to the source\n-     * modifier {@link Modifier#PRIMITIVE primitive} with a mask\n-     * value of {@code 0x0800}.\n+     * The access flag {@code ACC_PRIMITIVE} with a mask value of {@code 0x0800}.\n@@ -234,1 +228,1 @@\n-    PRIMITIVE(Modifier.PRIMITIVE, true, Set.of(Location.CLASS)),\n+    PRIMITIVE(0x0000_0800, false, Set.of(Location.CLASS)),\n@@ -434,1 +428,1 @@\n-                                Set.of(PUBLIC, PRIVATE, PROTECTED,\n+                                Set.of(PUBLIC, PRIVATE, PROTECTED, IDENTITY, VALUE, PRIMITIVE,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -235,3 +235,0 @@\n-     * @apiNote TBD: This method does not reflect the class related modifiers including\n-     * {@link #IDENTITY}, {@link #VALUE}, and {@link #PRIMITIVE}.\n-     *\n@@ -303,7 +300,0 @@\n-    \/**\n-     * The {@code int} value representing the {@code ACC_IDENTITY}\n-     * modifier when applied to the modifiers of a class.\n-     * @see AccessFlag#IDENTITY\n-     *\/\n-    public static final int IDENTITY         = 0x00000020;\n-\n@@ -317,7 +307,0 @@\n-    \/**\n-     * The {@code int} value representing the {@code ACC_VALUE}\n-     * modifier when applied to the modifiers of a class.\n-     * @see AccessFlag#VALUE\n-     *\/\n-    public static final int VALUE            = 0x00000040;\n-\n@@ -365,7 +348,0 @@\n-    \/**\n-     * The {@code int} value representing the {@code ACC_PRIMITIVE}\n-     * modifier when applied to the modifiers of a class.\n-     * @see AccessFlag#PRIMITIVE\n-     *\/\n-    public static final int PRIMITIVE        = 0x00000800;\n-\n@@ -406,1 +382,0 @@\n-        Modifier.IDENTITY       | Modifier.VALUE        | Modifier.PRIMITIVE |\n@@ -416,1 +391,0 @@\n-        Modifier.IDENTITY       | Modifier.VALUE        |\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -685,2 +686,1 @@\n-        int mods = clazz.getModifiers();\n-        return (mods & 0x00000100) != 0;\n+        return clazz.is(AccessFlag.PRIMITIVE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Type.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n-import com.sun.tools.classfile.AccessFlags;\n+import java.lang.reflect.AccessFlag;\n+import java.util.Set;\n@@ -51,1 +52,4 @@\n-        if ((Inner.class.getModifiers() & AccessFlags.ACC_PRIMITIVE) == 0)\n+        Set<AccessFlag> flags = Inner.class.accessFlags();\n+        System.out.println(\"accessFlags: \" + flags);\n+\n+        if (!Inner.class.is(AccessFlag.VALUE))\n@@ -53,0 +57,2 @@\n+        if (!Inner.class.is(AccessFlag.PRIMITIVE))\n+            throw new AssertionError(\"Primitive Value flag missing\");\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InnerClassAttributeValuenessTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}