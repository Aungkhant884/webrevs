{"files":[{"patch":"@@ -305,4 +305,2 @@\n-                if ((isValue() || isPrimitiveClass())) {\n-                    \/\/ Modifier.toString() below mis-interprets IDENTITY, VALUE, and PRIMITIVE bits\n-                    modifiers &= ~(AccessFlag.IDENTITY.mask() | AccessFlag.VALUE.mask() | AccessFlag.PRIMITIVE.mask());\n-                }\n+                \/\/ Modifier.toString() below mis-interprets IDENTITY, VALUE, and PRIMITIVE bits\n+                modifiers &= ~(AccessFlag.IDENTITY.mask() | AccessFlag.VALUE.mask() | AccessFlag.PRIMITIVE.mask());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-     * <p>\n+     *\n@@ -134,1 +134,1 @@\n-\/\/    SUPER(0x0000_0020, false, Set.of(Location.CLASS)),\n+    SUPER(0x0000_0020, false, Set.of(Location.CLASS)),\n@@ -417,1 +417,1 @@\n-                                Set.of(PUBLIC, FINAL, IDENTITY, VALUE, PRIMITIVE,\n+                                Set.of(PUBLIC, FINAL, SUPER, IDENTITY, VALUE, PRIMITIVE,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-            int accessFlags = Modifier.PUBLIC | Modifier.FINAL;\n+            int accessFlags = Modifier.PUBLIC | Modifier.FINAL | AccessFlag.IDENTITY.mask();\n@@ -511,1 +511,1 @@\n-                    accessFlags = Modifier.FINAL;  \/\/ non-public, final\n+                    accessFlags = Modifier.FINAL | AccessFlag.IDENTITY.mask();  \/\/ non-public, final, identity\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,0 +113,2 @@\n+                if (accessFlag.equals(AccessFlag.SUPER))\n+                    continue;       \/\/ SUPER is defined to overlap with IDENTITY\n@@ -138,0 +140,2 @@\n+            if (accessFlag.equals(AccessFlag.SUPER))\n+                continue;       \/\/ SUPER is defined to overlap with IDENTITY\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}