[{"commit":{"message":"Merge branch 'lworld' into 8281463-value-modifiers"},"files":[],"sha":"558d873435f0b2d89e54b97aab3f2f5c155694ca"},{"commit":{"message":"Proxy class definition needs ACC_IDENTITY\nRestore ACC_SUPER to AccessFlag and adjust test"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java"}],"sha":"d6dbe8f9fe127dd3156c434f4971e0ce4cb8d81e"},{"commit":{"message":"Replace static int constants with AccessFlag method calls."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java"}],"sha":"349a9399a5c3459d3cf1ccf21683b385871bb748"},{"commit":{"message":"Revert changes and simplify\nUpdate GenericStringTest to work with value and primitive classes."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java"}],"sha":"cab6cae4301d0891e1e5f9a61033842fd3381efe"},{"commit":{"message":"Address review comments"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java"}],"sha":"9af6875ed4d287b8de6a800a091de4c138197a3a"},{"commit":{"message":"Merge branch 'lworld' into 8281463-value-modifiers"},"files":[],"sha":"946eea0fa66b43fde51fa11a8444ab6193be07a2"},{"commit":{"message":"Add Class.is(AccessFlag) to test for a single flag."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java"}],"sha":"c7883a6a0af2317cf88245552bd2d48c32c01689"},{"commit":{"message":"Restore AccessFlag SUPER"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java"}],"sha":"f83c35fd20b0d05e0755f5bf58f6afbb79834b02"},{"commit":{"message":"8281463: [lworld] VALUE \/ PRIMITIVE modifiers should be supported by reflection\nUse java.lang.reflect.AccessFlag for equivalent functions for value objects.\nCorrected ModuleDescriptor.STATIC flags to be STATIC_PHASE\nAdded flags to j.l.reflect.Modifier."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java"}],"sha":"96578de2c2c8168f11f05091c85d664d900a11b1"}]