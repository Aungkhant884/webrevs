{"files":[{"patch":"@@ -206,3 +206,0 @@\n-    private static final int VALUE_CLASS     = 0x00000040;\n-    private static final int PERMITS_VALUE   = 0x00000100;\n-    private static final int PRIMITIVE_CLASS = 0x00000800;\n@@ -308,0 +305,2 @@\n+                \/\/ Modifier.toString() below mis-interprets IDENTITY, VALUE, and PRIMITIVE bits\n+                modifiers &= ~(AccessFlag.IDENTITY.mask() | AccessFlag.VALUE.mask() | AccessFlag.PRIMITIVE.mask());\n@@ -317,1 +316,1 @@\n-                    sb.append(isPrimitiveClass() ? \"primitive\" : \"value\");\n+                    sb.append(isPrimitiveClass() ? \"primitive \" : \"value \");\n@@ -514,2 +513,2 @@\n-                                    ClassLoader loader,\n-                                    Class<?> caller)\n+                                            ClassLoader loader,\n+                                            Class<?> caller)\n@@ -629,1 +628,1 @@\n-        return (this.getModifiers() & PRIMITIVE_CLASS) != 0;\n+        return (this.getModifiers() & AccessFlag.PRIMITIVE.mask()) != 0;\n@@ -640,1 +639,1 @@\n-        return (this.getModifiers() & VALUE_CLASS) != 0;\n+        return (this.getModifiers() & AccessFlag.VALUE.mask()) != 0;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,1 @@\n-            STATIC(AccessFlag.STATIC.mask()),\n+            STATIC(AccessFlag.STATIC_PHASE.mask()),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,2 +76,1 @@\n- * @see java.compiler\/javax.lang.model.element.Modifier\n- * @since 20\n+ * @since Valhalla\n@@ -126,0 +125,8 @@\n+     *\n+     * @apiNote\n+     * NOTE: The Valhalla draft JVMS spec does not define a value for ACC_SUPER.\n+     * Historically, the value 0x0020 was used to indicate ACC_SUPER, which affected the\n+     * semantics of any invokespecial instructions (6.5.invokespecial) appearing in the class.\n+     * In Java SE 8, the ACC_SUPER semantics became mandatory, regardless of the setting of\n+     * ACC_SUPER or the class file version number, and the flag no longer had any effect.\n+     * Now the flag has been repurposed as ACC_IDENTITY.\n@@ -129,0 +136,6 @@\n+    \/**\n+     * The access flag {@code ACC_IDENTITY} with a mask value of {@code 0x0020}.\n+     * @jls 4.1-B. Class access and property modifiers\n+     *\/\n+    IDENTITY(0x0000_0020, true, Set.of(Location.CLASS, Location.INNER_CLASS)),\n+\n@@ -157,1 +170,7 @@\n-     \/**\n+    \/**\n+     * The access flag {@code ACC_VALUE} with a mask value of {@code 0x0040}.\n+     * @jls 4.1-B. Class access and property modifiers\n+     *\/\n+    VALUE(0x0000_0040, true, Set.of(Location.CLASS, Location.INNER_CLASS)),\n+\n+    \/**\n@@ -208,0 +227,6 @@\n+    \/**\n+     * The access flag {@code ACC_PRIMITIVE} with a mask value of {@code 0x0800}.\n+     * @jls 4.1-B. Class access and property modifiers\n+     *\/\n+    PRIMITIVE(0x0000_0800, true, Set.of(Location.CLASS, Location.INNER_CLASS)),\n+\n@@ -392,1 +417,1 @@\n-                                Set.of(PUBLIC, FINAL, SUPER,\n+                                Set.of(PUBLIC, FINAL, SUPER, IDENTITY, VALUE, PRIMITIVE,\n@@ -406,1 +431,1 @@\n-                                Set.of(PUBLIC, PRIVATE, PROTECTED,\n+                                Set.of(PUBLIC, PRIVATE, PROTECTED, IDENTITY, VALUE, PRIMITIVE,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -32,2 +32,3 @@\n- * constants to decode class and member access modifiers.  The sets of\n- * modifiers are represented as integers with distinct bit positions\n+ * constants to decode class and member access modifiers.\n+ * The {@link AccessFlag} class should be used instead of this class.\n+ * The sets of modifiers are represented as integers with non-distinct bit positions\n@@ -38,0 +39,8 @@\n+ * <p>\n+ * This class cannot distinguish among modifiers for a class, method, or field.\n+ * The modifier masks are not unique; it is up to the caller to use the correct\n+ * mask or method with the modifier bits returned from {@link Class#getModifiers()}\n+ * or {@link Member#getModifiers()}.\n+ * The {@link AccessFlag} class provides a model that distinguishes between access flags\n+ * for classes, methods, and field. The {@link Class#accessFlags()} and {@link Member#accessFlags()}\n+ * methods provide the access flags for the respective class, method, or field.\n@@ -39,0 +48,2 @@\n+ * @see Class#accessFlags()\n+ * @see Member#accessFlags()\n@@ -125,12 +136,0 @@\n-    \/**\n-     * Return {@code true} if the integer argument includes the\n-     * {@code permitsValue} modifier, {@code false} otherwise.\n-     *\n-     * @param   mod a set of modifiers\n-     * @return {@code true} if {@code mod} includes the\n-     * {@code permitsValue} modifier; {@code false} otherwise.\n-     *\/\n-    public static boolean isPermitsValue(int mod) {\n-        return (mod & PERMITS_VALUE) != 0;\n-    }\n-\n@@ -308,6 +307,0 @@\n-    \/**\n-     * The {@code int} value representing the {@code permits_value}\n-     * modifier.\n-     *\/\n-    public static final int PERMITS_VALUE    = 0x00000040;\n-\n@@ -359,3 +352,3 @@\n-    static final int BRIDGE      = 0x00000040;\n-    static final int VARARGS     = 0x00000080;\n-    static final int SYNTHETIC   = 0x00001000;\n+    static final int BRIDGE    = 0x00000040;\n+    static final int VARARGS   = 0x00000080;\n+    static final int SYNTHETIC = 0x00001000;\n@@ -363,2 +356,2 @@\n-    static final int ENUM        = 0x00004000;\n-    static final int MANDATED    = 0x00008000;\n+    static final int ENUM      = 0x00004000;\n+    static final int MANDATED  = 0x00008000;\n@@ -390,1 +383,1 @@\n-        Modifier.STRICT         | Modifier.PERMITS_VALUE;\n+        Modifier.STRICT;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":19,"deletions":26,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-            int accessFlags = Modifier.PUBLIC | Modifier.FINAL;\n+            int accessFlags = Modifier.PUBLIC | Modifier.FINAL | AccessFlag.IDENTITY.mask();\n@@ -511,1 +511,1 @@\n-                    accessFlags = Modifier.FINAL;  \/\/ non-public, final\n+                    accessFlags = Modifier.FINAL | AccessFlag.IDENTITY.mask();  \/\/ non-public, final, identity\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -685,2 +686,1 @@\n-        int mods = clazz.getModifiers();\n-        return (mods & 0x00000100) != 0;\n+        return (clazz.getModifiers() & AccessFlag.PRIMITIVE.mask()) != 0;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Type.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import static java.lang.reflect.Modifier.PERMITS_VALUE;\n@@ -54,0 +53,1 @@\n+    public static final int PERMITS_VALUE  = 0x0000_0040;   \/\/ Temp\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotModifiers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,3 @@\n-                                     AnotherEnum.class)) {\n+                                     AnotherEnum.class,\n+                                     AValueClass.class,\n+                                     APrimitiveClass.class)) {\n@@ -114,0 +116,6 @@\n+\n+@ExpectedGenericString(\"final value class AValueClass<E>\")\n+value class AValueClass<E> {}\n+\n+@ExpectedGenericString(\"final primitive class APrimitiveClass<E>\")\n+primitive class APrimitiveClass<E> {}\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8266670\n+ * @bug 8266670 8281463\n@@ -34,0 +34,1 @@\n+import java.util.List;\n@@ -49,0 +50,2 @@\n+        List<AccessFlag> valhallaOnly =\n+                List.of(AccessFlag.IDENTITY, AccessFlag.VALUE, AccessFlag.PRIMITIVE);\n@@ -51,1 +54,1 @@\n-            if (accessFlag.sourceModifier()) {\n+            if (accessFlag.sourceModifier()  && !valhallaOnly.contains(accessFlag)) {\n@@ -110,0 +113,2 @@\n+                if (accessFlag.equals(AccessFlag.SUPER))\n+                    continue;       \/\/ SUPER is defined to overlap with IDENTITY\n@@ -135,0 +140,2 @@\n+            if (accessFlag.equals(AccessFlag.SUPER))\n+                continue;       \/\/ SUPER is defined to overlap with IDENTITY\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,2 @@\n+            throw new AssertionError(\"Primitive flag missing\");\n+        if ((Inner.class.getModifiers() & AccessFlags.ACC_VALUE) == 0)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InnerClassAttributeValuenessTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}