{"files":[{"patch":"@@ -307,0 +307,4 @@\n+                if ((isValue() || isPrimitiveClass())) {\n+                    \/\/ Modifier.toString() below mis-interprets IDENTITY, VALUE, and PRIMITIVE bits\n+                    modifiers &= ~(AccessFlag.IDENTITY.mask() | AccessFlag.VALUE.mask() | AccessFlag.PRIMITIVE.mask());\n+                }\n@@ -316,1 +320,1 @@\n-                    sb.append(isPrimitiveClass() ? \"primitive\" : \"value\");\n+                    sb.append(isPrimitiveClass() ? \"primitive \" : \"value \");\n@@ -1507,8 +1511,0 @@\n-    \/**\n-     * {@return true if this class has the requested {@link AccessFlag}}\n-     * @param flag an {@link AccessFlag}\n-     *\/\n-    public boolean is(AccessFlag flag) {\n-        return (getModifiers() & flag.mask()) == flag.mask();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -686,1 +686,1 @@\n-        return clazz.is(AccessFlag.PRIMITIVE);\n+        return (clazz.getModifiers() & AccessFlag.PRIMITIVE.mask()) != 0;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,3 @@\n-                                     AnotherEnum.class)) {\n+                                     AnotherEnum.class,\n+                                     AValueClass.class,\n+                                     APrimitiveClass.class)) {\n@@ -114,0 +116,6 @@\n+\n+@ExpectedGenericString(\"final value class AValueClass<E>\")\n+value class AValueClass<E> {}\n+\n+@ExpectedGenericString(\"final primitive class APrimitiveClass<E>\")\n+primitive class APrimitiveClass<E> {}\n","filename":"test\/jdk\/java\/lang\/Class\/GenericStringTest.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,7 +35,3 @@\n-        String actual = Modifier.toString(test);\n-        if(!actual.equals(expected)) {\n-            System.out.println(\"Actual:   \" + actual);\n-            System.out.println(\"Expected: \" + expected);\n-\n-            throw new RuntimeException(Integer.toHexString(test) + \" yields incorrect toString result\");\n-        }\n+        if(!Modifier.toString(test).equals(expected))\n+            throw new RuntimeException(test +\n+                                          \" yields incorrect toString result\");\n","filename":"test\/jdk\/java\/lang\/reflect\/Modifier\/toStringTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,1 @@\n-import java.lang.reflect.AccessFlag;\n-import java.util.Set;\n+import com.sun.tools.classfile.AccessFlags;\n@@ -52,4 +51,3 @@\n-        Set<AccessFlag> flags = Inner.class.accessFlags();\n-        System.out.println(\"accessFlags: \" + flags);\n-\n-        if (!Inner.class.is(AccessFlag.VALUE))\n+        if ((Inner.class.getModifiers() & AccessFlags.ACC_PRIMITIVE) == 0)\n+            throw new AssertionError(\"Primitive flag missing\");\n+        if ((Inner.class.getModifiers() & AccessFlags.ACC_VALUE) == 0)\n@@ -57,2 +55,0 @@\n-        if (!Inner.class.is(AccessFlag.PRIMITIVE))\n-            throw new AssertionError(\"Primitive Value flag missing\");\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InnerClassAttributeValuenessTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"}]}