{"files":[{"patch":"@@ -1598,1 +1598,8 @@\n-LIR_Opr LIRGenerator::get_index_in_register(LIRItem& index, int shift) {\n+LIR_Opr LIRGenerator::get_and_load_element_address(LIRItem& array, LIRItem& index) {\n+  ciType* array_type = array.value()->declared_type();\n+  ciFlatArrayKlass* flat_array_klass = array_type->as_flat_array_klass();\n+  assert(flat_array_klass->is_loaded(), \"must be\");\n+\n+  int array_header_size = flat_array_klass->array_header_in_bytes();\n+  int shift = flat_array_klass->log2_element_size();\n+\n@@ -1610,1 +1617,0 @@\n-  return index_op;\n@@ -1621,1 +1627,0 @@\n-  return index_op;\n@@ -1623,0 +1628,5 @@\n+\n+  LIR_Opr elm_op = new_pointer_register();\n+  LIR_Address* elm_address = new LIR_Address(array.result(), index_op, array_header_size, T_ADDRESS);\n+  __ leal(LIR_OprFact::address(elm_address), elm_op);\n+  return elm_op;\n@@ -1627,4 +1637,0 @@\n-  \/\/ Find the starting address of the source (inside the array)\n-  ciType* array_type = array.value()->declared_type();\n-  ciFlatArrayKlass* flat_array_klass = array_type->as_flat_array_klass();\n-  assert(flat_array_klass->is_loaded(), \"must be\");\n@@ -1632,1 +1638,3 @@\n-  int array_header_size = flat_array_klass->array_header_in_bytes();\n+\/\/ Find the starting address of the source (inside the array)\n+  LIR_Opr elm_op = get_and_load_element_address(array, index);\n+\n@@ -1634,4 +1642,0 @@\n-  LIR_Opr index_op = get_index_in_register(index, flat_array_klass->log2_element_size());\n-  LIR_Opr elm_op = new_pointer_register();\n-  LIR_Address* elm_address = new LIR_Address(array.result(), index_op, array_header_size, T_ADDRESS);\n-  __ leal(LIR_OprFact::address(elm_address), elm_op);\n@@ -1666,4 +1670,2 @@\n-  \/\/ Find the starting address of the source (inside the array)\n-  ciType* array_type = array.value()->declared_type();\n-  ciFlatArrayKlass* flat_array_klass = array_type->as_flat_array_klass();\n-  assert(flat_array_klass->is_loaded(), \"must be\");\n+\/\/ Find the starting address of the source (inside the array)\n+  LIR_Opr elm_op = get_and_load_element_address(array, index);\n@@ -1675,1 +1677,1 @@\n-    elem_klass = flat_array_klass->element_klass()->as_inline_klass();\n+    elem_klass = array.value()->declared_type()->as_flat_array_klass()->element_klass()->as_inline_klass();\n@@ -1677,6 +1679,0 @@\n-  int array_header_size = flat_array_klass->array_header_in_bytes();\n-  LIR_Opr index_op = get_index_in_register(index, flat_array_klass->log2_element_size());\n-  LIR_Opr elm_op = new_pointer_register();\n-  LIR_Address* elm_address = new LIR_Address(array.result(), index_op, array_header_size, T_ADDRESS);\n-  __ leal(LIR_OprFact::address(elm_address), elm_op);\n-\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":19,"deletions":23,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-  LIR_Opr get_index_in_register(LIRItem& index, int shift);\n+  LIR_Opr get_and_load_element_address(LIRItem& array, LIRItem& index);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}