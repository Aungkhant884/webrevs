{"files":[{"patch":"@@ -25,0 +25,2 @@\n+import java.lang.reflect.Method;\n+import java.lang.reflect.InvocationTargetException;\n@@ -27,1 +29,1 @@\n-import java.nio.file.Paths;\n+import java.nio.file.InvalidPathException;\n@@ -53,3 +55,12 @@\n-    public static void main(String... args) throws IOException {\n-        if (args.length == 0) {\n-            throw new IllegalArgumentException(\"Missing asmtools command\");\n+    public static void main(String... args) throws Throwable {\n+        \/\/ run AltLoaderMain from a class loader that prefers the modified AsmTools classes\n+        ClassLoader loader = JtregDriver.class.getClassLoader();\n+        Path file = Path.of(loader.getResource(\"org\/openjdk\/asmtools\/JtregDriver.class\").toURI());\n+        Path root = file.getParent().getParent().getParent().getParent();\n+        ClassLoader altLoader = new AsmToolsClassLoader(root);\n+        Class<?> altMain = altLoader.loadClass(AltLoaderMain.class.getName());\n+        try {\n+            altMain.getMethod(\"main\", String[].class).invoke(null, (Object) args);\n+        } catch (InvocationTargetException e) {\n+            System.out.println(\"Throwing \" + e);\n+            throw e.getCause();\n@@ -57,17 +68,7 @@\n-        String cmd = args[0];\n-        if (!cmd.equals(\"jasm\") && !cmd.equals(\"jdis\") && !cmd.equals(\"jcoder\")\n-                && !cmd.equals(\"jdec\") && !cmd.equals(\"jcdec\")) {\n-            throw new IllegalArgumentException(\"Unrecognized asmtools command: \" + cmd);\n-        }\n-        boolean isAssembler = cmd.equals(\"jasm\") || cmd.equals(\"jcoder\");\n-        String srcDir = System.getProperty(\"test.src\", \".\");\n-        String clsDir = System.getProperty(\"test.classes\", \".\");\n-        String fileDir = isAssembler ? srcDir : clsDir;\n-\n-        ArrayList<String> toolArgList = new ArrayList<String>();\n-\n-        if (isAssembler) {\n-            Path destPath = Paths.get(clsDir);\n-            if (!Files.exists(destPath)) {\n-                \/\/ jtreg creates classes dir on demand, might not have happened yet\n-                Files.createDirectories(destPath);\n+    }\n+\n+    public static class AltLoaderMain {\n+\n+        public static void main(String... args) throws IOException {\n+            if (args.length == 0) {\n+                throw new IllegalArgumentException(\"Missing asmtools command\");\n@@ -75,3 +76,9 @@\n-            toolArgList.add(\"-d\");\n-            toolArgList.add(clsDir);\n-        }\n+            String cmd = args[0];\n+            if (!cmd.equals(\"jasm\") && !cmd.equals(\"jdis\") && !cmd.equals(\"jcoder\")\n+                    && !cmd.equals(\"jdec\") && !cmd.equals(\"jcdec\")) {\n+                throw new IllegalArgumentException(\"Unrecognized asmtools command: \" + cmd);\n+            }\n+            boolean isAssembler = cmd.equals(\"jasm\") || cmd.equals(\"jcoder\");\n+            String srcDir = System.getProperty(\"test.src\", \".\");\n+            String clsDir = System.getProperty(\"test.classes\", \".\");\n+            String fileDir = isAssembler ? srcDir : clsDir;\n@@ -79,11 +86,7 @@\n-        boolean isOptionArg = false; \/\/ marks an argument to a previous option\n-        for (int i = 1; i < args.length; i++) {\n-            String arg = args[i];\n-            if (isOptionArg) {\n-                isOptionArg = false; \/\/ reset for next\n-            } else {\n-                if (arg.equals(\"-d\")) {\n-                    isOptionArg = true;\n-                } else if (!arg.startsWith(\"-\") && !arg.startsWith(\"\/\")) {\n-                    \/\/ adjust filename\n-                    arg = Paths.get(fileDir, arg).toString();\n+            ArrayList<String> toolArgList = new ArrayList<String>();\n+\n+            if (isAssembler) {\n+                Path destPath = Path.of(clsDir);\n+                if (!Files.exists(destPath)) {\n+                    \/\/ jtreg creates classes dir on demand, might not have happened yet\n+                    Files.createDirectories(destPath);\n@@ -91,0 +94,2 @@\n+                toolArgList.add(\"-d\");\n+                toolArgList.add(clsDir);\n@@ -92,2 +97,0 @@\n-            toolArgList.add(arg);\n-        }\n@@ -95,10 +98,14 @@\n-        String[] toolArgs = toolArgList.toArray(new String[0]);\n-        boolean success = switch (cmd) {\n-            case \"jasm\" -> {\n-                PrintWriter out = new PrintWriter(System.out);\n-                yield new org.openjdk.asmtools.jasm.Main(out, \"jasm\").compile(toolArgs);\n-            }\n-            case \"jdis\" -> {\n-                PrintWriter out = new PrintWriter(new uEscWriter(System.out));\n-                PrintWriter err = new PrintWriter(System.err);\n-                yield new org.openjdk.asmtools.jdis.Main(out, err, \"jdis\").disasm(toolArgs);\n+            boolean isOptionArg = false; \/\/ marks an argument to a previous option\n+            for (int i = 1; i < args.length; i++) {\n+                String arg = args[i];\n+                if (isOptionArg) {\n+                    isOptionArg = false; \/\/ reset for next\n+                } else {\n+                    if (arg.equals(\"-d\")) {\n+                        isOptionArg = true;\n+                    } else if (!arg.startsWith(\"-\") && !arg.startsWith(\"\/\")) {\n+                        \/\/ adjust filename\n+                        arg = Path.of(fileDir, arg).toString();\n+                    }\n+                }\n+                toolArgList.add(arg);\n@@ -106,3 +113,30 @@\n-            case \"jcoder\" -> {\n-                PrintWriter out = new PrintWriter(System.out);\n-                yield new org.openjdk.asmtools.jcoder.Main(out, \"jcoder\").compile(toolArgs);\n+\n+            String[] toolArgs = toolArgList.toArray(new String[0]);\n+            boolean success = switch (cmd) {\n+                case \"jasm\" -> {\n+                    PrintWriter out = new PrintWriter(System.out);\n+                    yield new org.openjdk.asmtools.jasm.Main(out, \"jasm\").compile(toolArgs);\n+                }\n+                case \"jdis\" -> {\n+                    PrintWriter out = new PrintWriter(new uEscWriter(System.out));\n+                    PrintWriter err = new PrintWriter(System.err);\n+                    yield new org.openjdk.asmtools.jdis.Main(out, err, \"jdis\").disasm(toolArgs);\n+                }\n+                case \"jcoder\" -> {\n+                    PrintWriter out = new PrintWriter(System.out);\n+                    yield new org.openjdk.asmtools.jcoder.Main(out, \"jcoder\").compile(toolArgs);\n+                }\n+                case \"jdec\" -> {\n+                    PrintWriter out = new PrintWriter(new uEscWriter(System.out));\n+                    PrintWriter err = new PrintWriter(System.err);\n+                    yield new org.openjdk.asmtools.jdec.Main(out, err, \"jdec\").decode(toolArgs);\n+                }\n+                case \"jcdec\" -> {\n+                    PrintWriter out = new PrintWriter(new uEscWriter(System.out));\n+                    yield new org.openjdk.asmtools.jcdec.Main(out, \"jcdec\").decode(toolArgs);\n+                }\n+                default -> throw new AssertionError();\n+            };\n+            System.out.printf(\"ran %s, result %s%n\", cmd, success);\n+            if (!success) {\n+                throw new RuntimeException(\"asmtools execution failed\");\n@@ -110,4 +144,26 @@\n-            case \"jdec\" -> {\n-                PrintWriter out = new PrintWriter(new uEscWriter(System.out));\n-                PrintWriter err = new PrintWriter(System.err);\n-                yield new org.openjdk.asmtools.jdec.Main(out, err, \"jdec\").decode(toolArgs);\n+        }\n+\n+    }\n+\n+    \/**\n+     * Class loader for the AsmTools classes. Allows classes colocated with\n+     * JtregDriver to have priority over versions of the classes loaded by\n+     * jtreg (which includes its own copy of AsmTools).\n+     *\/\n+    private static class AsmToolsClassLoader extends ClassLoader {\n+        private final Path root;\n+        private final String separator;\n+\n+        public AsmToolsClassLoader(Path root) {\n+            super(AsmToolsClassLoader.class.getClassLoader());\n+            this.root = root;\n+            this.separator = root.getFileSystem().getSeparator();\n+        }\n+\n+        protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n+            if (name.startsWith(\"org.openjdk.asmtools.\")) {\n+                Class<?> result = findClass(name);\n+                if (resolve) resolveClass(result);\n+                return result;\n+            } else {\n+                return super.loadClass(name, resolve);\n@@ -115,3 +171,10 @@\n-            case \"jcdec\" -> {\n-                PrintWriter out = new PrintWriter(new uEscWriter(System.out));\n-                yield new org.openjdk.asmtools.jcdec.Main(out, \"jcdec\").decode(toolArgs);\n+        }\n+\n+        protected Class<?> findClass(String name) throws ClassNotFoundException {\n+            String filename = name.replace(\".\",separator) + \".class\";\n+            try {\n+                Path classFile = root.resolve(filename);\n+                byte[] bytes = Files.readAllBytes(classFile);\n+                return defineClass(name, bytes, 0, bytes.length);\n+            } catch (InvalidPathException | IOException e) {\n+                throw new ClassNotFoundException(\"can't read class \" + filename, e);\n@@ -119,4 +182,0 @@\n-            default -> throw new AssertionError();\n-        };\n-        if (!success) {\n-            throw new RuntimeException(\"asmtools execution failed\");\n@@ -124,0 +183,1 @@\n+\n","filename":"test\/lib\/org\/openjdk\/asmtools\/JtregDriver.java","additions":121,"deletions":61,"binary":false,"changes":182,"status":"modified"}]}