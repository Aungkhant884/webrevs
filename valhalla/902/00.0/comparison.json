{"files":[{"patch":"@@ -135,1 +135,7 @@\n-    JDK21(\"21\");\n+    JDK21(\"21\"),\n+\n+    \/**\n+      * 22, tbd\n+      *\/\n+    JDK22(\"22\"),\n+    ; \/\/ Reduce code churn when appending new constants\n@@ -187,0 +193,1 @@\n+        case JDK22  -> Target.JDK1_22;\n@@ -328,0 +335,1 @@\n+        case JDK22  -> RELEASE_22;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1478,6 +1478,1 @@\n-        if (!breaksOutOf(tree, tree.body)) {\n-            \/\/include condition's body when false after the while, if cannot get out of the loop\n-            MatchBindings condBindings = matchBindings;\n-            condBindings.bindingsWhenFalse.forEach(env.info.scope::enter);\n-            condBindings.bindingsWhenFalse.forEach(BindingSymbol::preserveBinding);\n-        }\n+        handleLoopConditionBindings(matchBindings, tree, tree.body);\n@@ -1497,5 +1492,1 @@\n-        if (!breaksOutOf(tree, tree.body)) {\n-            \/\/include condition's bindings when false after the while, if cannot get out of the loop\n-            condBindings.bindingsWhenFalse.forEach(env.info.scope::enter);\n-            condBindings.bindingsWhenFalse.forEach(BindingSymbol::preserveBinding);\n-        }\n+        handleLoopConditionBindings(condBindings, tree, tree.body);\n@@ -1505,5 +1496,0 @@\n-    private boolean breaksOutOf(JCTree loop, JCTree body) {\n-        preFlow(body);\n-        return flow.breaksOutOf(env, loop, body, make);\n-    }\n-\n@@ -1534,4 +1520,12 @@\n-        if (!breaksOutOf(tree, tree.body)) {\n-            \/\/include condition's body when false after the while, if cannot get out of the loop\n-            condBindings.bindingsWhenFalse.forEach(env.info.scope::enter);\n-            condBindings.bindingsWhenFalse.forEach(BindingSymbol::preserveBinding);\n+        handleLoopConditionBindings(condBindings, tree, tree.body);\n+    }\n+\n+    \/**\n+     * Include condition's bindings when false after the loop, if cannot get out of the loop\n+     *\/\n+    private void handleLoopConditionBindings(MatchBindings condBindings,\n+                                             JCStatement loop,\n+                                             JCStatement loopBody) {\n+        if (condBindings.bindingsWhenFalse.nonEmpty() &&\n+            !breaksTo(env, loop, loopBody)) {\n+            addBindings2Scope(loop, condBindings.bindingsWhenFalse);\n@@ -1541,0 +1535,31 @@\n+    private boolean breaksTo(Env<AttrContext> env, JCTree loop, JCTree body) {\n+        preFlow(body);\n+        return flow.breaksToTree(env, loop, body, make);\n+    }\n+\n+    \/**\n+     * Add given bindings to the current scope, unless there's a break to\n+     * an immediately enclosing labeled statement.\n+     *\/\n+    private void addBindings2Scope(JCStatement introducingStatement,\n+                                   List<BindingSymbol> bindings) {\n+        if (bindings.isEmpty()) {\n+            return ;\n+        }\n+\n+        var searchEnv = env;\n+        while (searchEnv.tree instanceof JCLabeledStatement labeled &&\n+               labeled.body == introducingStatement) {\n+            if (breaksTo(env, labeled, labeled.body)) {\n+                \/\/breaking to an immediately enclosing labeled statement\n+                return ;\n+            }\n+            searchEnv = searchEnv.next;\n+            introducingStatement = labeled;\n+        }\n+\n+        \/\/include condition's body when false after the while, if cannot get out of the loop\n+        bindings.forEach(env.info.scope::enter);\n+        bindings.forEach(BindingSymbol::preserveBinding);\n+    }\n+\n@@ -2273,2 +2298,1 @@\n-        afterIfBindings.forEach(env.info.scope::enter);\n-        afterIfBindings.forEach(BindingSymbol::preserveBinding);\n+        addBindings2Scope(tree, afterIfBindings);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":46,"deletions":22,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -4986,1 +4986,2 @@\n-                            dominated |= !(testCaseLabel instanceof JCConstantCaseLabel);\n+                            dominated |= !(testCaseLabel instanceof JCConstantCaseLabel) &&\n+                                         TreeInfo.unguardedCase(testCase);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-    public boolean breaksOutOf(Env<AttrContext> env, JCTree loop, JCTree body, TreeMaker make) {\n+    public boolean breaksToTree(Env<AttrContext> env, JCTree breakTo, JCTree body, TreeMaker make) {\n@@ -300,1 +300,1 @@\n-            SnippetBreakAnalyzer analyzer = new SnippetBreakAnalyzer();\n+            SnippetBreakToAnalyzer analyzer = new SnippetBreakToAnalyzer(breakTo);\n@@ -303,1 +303,1 @@\n-            return analyzer.breaksOut();\n+            return analyzer.breaksTo();\n@@ -1914,3 +1914,3 @@\n-    class SnippetBreakAnalyzer extends AliveAnalyzer {\n-        private final Set<JCTree> seenTrees = new HashSet<>();\n-        private boolean breaksOut;\n+    class SnippetBreakToAnalyzer extends AliveAnalyzer {\n+        private final JCTree breakTo;\n+        private boolean breaksTo;\n@@ -1918,31 +1918,2 @@\n-        public SnippetBreakAnalyzer() {\n-        }\n-\n-        @Override\n-        public void visitLabelled(JCTree.JCLabeledStatement tree) {\n-            seenTrees.add(tree);\n-            super.visitLabelled(tree);\n-        }\n-\n-        @Override\n-        public void visitWhileLoop(JCTree.JCWhileLoop tree) {\n-            seenTrees.add(tree);\n-            super.visitWhileLoop(tree);\n-        }\n-\n-        @Override\n-        public void visitForLoop(JCTree.JCForLoop tree) {\n-            seenTrees.add(tree);\n-            super.visitForLoop(tree);\n-        }\n-\n-        @Override\n-        public void visitForeachLoop(JCTree.JCEnhancedForLoop tree) {\n-            seenTrees.add(tree);\n-            super.visitForeachLoop(tree);\n-        }\n-\n-        @Override\n-        public void visitDoLoop(JCTree.JCDoWhileLoop tree) {\n-            seenTrees.add(tree);\n-            super.visitDoLoop(tree);\n+        public SnippetBreakToAnalyzer(JCTree breakTo) {\n+            this.breakTo = breakTo;\n@@ -1953,3 +1924,1 @@\n-            breaksOut |= (super.alive == Liveness.ALIVE &&\n-                          !seenTrees.contains(tree.target));\n-            super.visitBreak(tree);\n+            breaksTo |= breakTo == tree.target && super.alive == Liveness.ALIVE;\n@@ -1958,2 +1927,2 @@\n-        public boolean breaksOut() {\n-            return breaksOut;\n+        public boolean breaksTo() {\n+            return breaksTo;\n@@ -3321,1 +3290,1 @@\n-                    sym.pos < currentTree.getStartPosition()) {\n+                    sym.pos < getCurrentTreeStartPosition()) {\n@@ -3333,0 +3302,5 @@\n+        int getCurrentTreeStartPosition() {\n+            return currentTree instanceof JCCase cse ? cse.guard.getStartPosition()\n+                                                     : currentTree.getStartPosition();\n+        }\n+\n@@ -3589,3 +3563,1 @@\n-            Type type = types.isSubtype(selectorType, syms.objectType)\n-                    ? selectorType : syms.objectType;\n-            return new BindingPattern(type);\n+            return new BindingPattern(selectorType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":18,"deletions":46,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,5 @@\n-    JDK1_21(\"21\", 65, 0);\n+    JDK1_21(\"21\", 65, 0),\n+\n+    \/** JDK 22. *\/\n+    JDK1_22(\"22\", 66, 0),\n+    ; \/\/ Reduce code churn when appending new constants\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4210,0 +4210,1 @@\n+                    checkSourceLevel(token.pos, Feature.UNNAMED_CLASSES);\n@@ -4240,2 +4241,0 @@\n-        checkSourceLevel(Feature.UNNAMED_CLASSES);\n-\n@@ -4255,1 +4254,1 @@\n-        int primaryPos = defs.first().pos;\n+        int primaryPos = getStartPos(defs.first());\n@@ -4266,1 +4265,1 @@\n-        JCModifiers unnamedMods = F.at(primaryPos)\n+        JCModifiers unnamedMods = F.at(Position.NOPOS)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-@SupportedSourceVersion(SourceVersion.RELEASE_21)\n+@SupportedSourceVersion(SourceVersion.RELEASE_22)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}