{"files":[{"patch":"@@ -4685,1 +4685,0 @@\n-    assert(!field->type()->is_inlinetype() || (field->is_static() && !con_type->is_zero_type()), \"sanity\");\n@@ -4688,1 +4687,1 @@\n-      \/\/ Load inline type from constant oop\n+      assert(!con_type->is_zero_type(), \"Inline types are null-free\");\n@@ -4690,0 +4689,2 @@\n+    } else if (con_type->is_zero_type() && field->type()->is_inlinetype()) {\n+      con = InlineTypeNode::default_oop(gvn(), field->type()->as_inline_klass());\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2414,1 +2414,1 @@\n-    if (heap_base_oop != top() && field != NULL && field->is_constant() && !mismatched) {\n+    if (heap_base_oop != top() && field != NULL && field->is_constant() && !field->is_flattened() && !mismatched) {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1198,1 +1198,1 @@\n-      assert(!inline_alloc, \"Inline type allocations should not have safepoint uses\");\n+      assert(!inline_alloc || !tklass->klass()->as_inline_klass()->is_scalarizable(), \"Scalarizable inline type allocations should not have safepoint uses\");\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  if (field->is_constant() &&\n+  if (field->is_constant() && !field->is_flattened() &&\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -351,1 +351,1 @@\n-    assert(!gvn().type(holder)->maybe_null(), \"Inline types are null-free\");\n+    assert(!gvn().type(val)->maybe_null(), \"Inline types are null-free\");\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+    protected static final boolean ProfileInterpreter = (Boolean)WHITE_BOX.getVMFlag(\"ProfileInterpreter\");\n@@ -852,1 +853,1 @@\n-        if (!USE_COMPILER || XCOMP || TEST_C1 || (PerMethodTrapLimit == 0) ||\n+        if (!USE_COMPILER || XCOMP || TEST_C1 ||\n@@ -868,1 +869,1 @@\n-        if (compiledByC2(m) == TriState.Yes) {\n+        if (compiledByC2(m) == TriState.Yes && PerMethodTrapLimit != 0 && ProfileInterpreter) {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypeTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-                            \"-XX:+TraceDeoptimization\", \"-Xbatch\", \"-XX:-MonomorphicArrayCheck\", \"-Xmixed\", \"TestArrayAccessDeopt\", \"run\"};\n+                            \"-XX:+TraceDeoptimization\", \"-Xbatch\", \"-XX:-MonomorphicArrayCheck\", \"-Xmixed\", \"-XX:+ProfileInterpreter\", \"TestArrayAccessDeopt\", \"run\"};\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestArrayAccessDeopt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2460,1 +2460,1 @@\n-                Asserts.assertTrue(!USE_COMPILER || XCOMP || STRESS_CC || TEST_C1 || compiled || (j != extra-1));\n+                Asserts.assertTrue(!USE_COMPILER || XCOMP || STRESS_CC || TEST_C1 || !ProfileInterpreter || compiled || (j != extra-1));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-            if (!TieredCompilation && !STRESS_CC && (deopt && (UseArrayLoadStoreProfile || TypeProfileLevel == 222))) {\n+            if (deopt && !TieredCompilation && !STRESS_CC && ProfileInterpreter && (UseArrayLoadStoreProfile || TypeProfileLevel == 222)) {\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorldProfiling.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}