{"files":[{"patch":"@@ -30,2 +30,34 @@\n- * @since 1.14\n-*\/\n+\n+ * IdentityObject: An object with identity.\n+ *\n+ * *Identity* is a property of certain objects, determined at instance creation\n+ * time and preserved throughout the life of the object. While an object's field\n+ * values may change, its identity is constant. Object identities are unique: no\n+ * two objects created by different instance creation operations can have the same\n+ * identity.\n+ *\n+ * Every object is either an *identity object* or a *primitive object*. Primitive\n+ * objects lack identity.\n+ *\n+ * The following operations have special behavior when applied to identity objects:\n+ *\n+ * - The `==` operator, and the default implementation of the `Object.equals`\n+ * method, compare the identities of their operands, producing `true` for an\n+ * identity object only if the object is being compared to itself.\n+ *\n+ * - The `System.identityHashCode` method, and the default implementation of the\n+ * `Object.hashCode` method, generate a hash code from an identity object's\n+ * identity.\n+ *\n+ * - The `synchronized` modifier and `synchronized` statement are only able to\n+ * successfully acquire a lock when applied to an identity object.\n+ *\n+ * A class may implement `IdentityObject` or `PrimitiveObject`, but never both.\n+ * Primitive classes always implement `PrimitiveObject`, while all other concrete\n+ * classes (except `Object`) implicitly implement `IdentityObject`.\n+ *\n+ * Abstract classes and interfaces may implement or extend this interface if they\n+ * wish to guarantee that all instances of the class or interface have identity.\n+ *\n+ * @since 1.16\n+ *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/IdentityObject.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang;\n+\n+\/**\n+ * A restricted interface implemented by all primitive objects.\n+ *\n+ * A primitive object is an instance of a primitive class, lacking identity.\n+ *\n+ * Every object is either an *identity object* or a *primitive object*. Identity\n+ * objects have a unique identity determined for them at instance creation time and\n+ * preserved throughout their life.\n+ *\n+ * Primitive objects do *not* have an identity. Instead, they simply aggregate a\n+ * set of immutable field values. The lack of identity enables certain performance\n+ * optimizations by Java Virtual Machine implementations.\n+ * The following operations have special behavior when applied to primitive\n+ * objects:\n+ *\n+ * - The `==` operator, and the default implementation of the `Object.equals`\n+ * method, compare the values of the operands' fields. Primitive objects\n+ * created at different points in a program may be `==`.\n+ *\n+ * - The `System.identityHashCode` method, and the default implementation of the\n+ * `Object.hashCode` method, generate a hash code from the hash codes of a\n+ * primitive object's fields.\n+ *\n+ * - The `synchronized` modifier and `synchronized` statement always fail when\n+ * applied to a primitive object.\n+ *\n+ * A class may implement `PrimitiveObject` or `IdentityObject`, but never both.\n+ * Primitive classes always implement `PrimitiveObject`, while all other concrete\n+ * classes (except `Object`) implicitly implement `IdentityObject`.\n+ *\n+ * Abstract classes and interfaces may implement or extend this interface if they\n+ * wish to guarantee that all instances of the class or interface are primitive\n+ * objects.\n+ *\n+ * @since 1.16\n+ *\/\n+\n+public interface PrimitiveObject {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/PrimitiveObject.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -226,0 +226,1 @@\n+    public final Type primitiveObjectType;\n@@ -601,0 +602,1 @@\n+        primitiveObjectType = enterClass(\"java.lang.PrimitiveObject\");\n@@ -610,0 +612,1 @@\n+        synthesizeEmptyInterfaceIfMissing(primitiveObjectType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2244,1 +2244,1 @@\n-        if (sym.type == syms.identityObjectType) {\n+        if (sym == syms.identityObjectType.tsym) {\n@@ -2253,0 +2253,6 @@\n+        } else if (sym == syms.primitiveObjectType.tsym) {\n+            if (t.isPrimitiveClass() || t.isReferenceProjection())\n+                return syms.primitiveObjectType;\n+            if (t.hasTag(ARRAY) || t.tsym == syms.objectType.tsym)\n+                return null;\n+            \/\/ else fall through and look for explicit coded super interface\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2698,1 +2698,3 @@\n-        if (c.isPrimitiveClass() && types.asSuper(c, syms.identityObjectType.tsym, true) != null) {\n+        boolean implementsIdentityObject = types.asSuper(c, syms.identityObjectType.tsym, true) != null;\n+        boolean implementsPrimitiveObject = types.asSuper(c, syms.primitiveObjectType.tsym, true) != null;\n+        if (c.isPrimitiveClass() && implementsIdentityObject) {\n@@ -2700,0 +2702,4 @@\n+        } else if (implementsPrimitiveObject && !c.isPrimitiveClass() && !c.isReferenceProjection() && !c.tsym.isInterface() && !c.tsym.isAbstract()) {\n+            log.error(pos, Errors.IdentityClassMustNotImplementPrimitiveObject(c));\n+        } else if (implementsPrimitiveObject && implementsIdentityObject) {\n+            log.error(pos, Errors.MutuallyIncompatibleSuperInterfaces(c));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3823,0 +3823,8 @@\n+# 0: type\n+compiler.err.identity.class.must.not.implement.primitive.object=\\\n+    The identity class {0} attempts to implement the incompatible interface PrimitiveObject\n+\n+# 0: type\n+compiler.err.mutually.incompatible.super.interfaces=\\\n+    The type {0} attempts to implement the mutually incompatible interfaces PrimitiveObject and IdentityObject\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.identity.class.must.not.implement.primitive.object\n+\/\/ key: compiler.err.mutually.incompatible.super.interfaces\n+\n+class Identity implements PrimitiveObject {\n+    abstract class Inner implements IdentityObject, PrimitiveObject {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TopInterfaces.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -32,2 +32,1 @@\n-    interface InlineObject {}\n-    static primitive class V implements InlineObject {\n+    static primitive class V {\n@@ -42,1 +41,1 @@\n-        if (o instanceof InlineObject)\n+        if (o instanceof PrimitiveObject)\n@@ -47,1 +46,1 @@\n-        if (o instanceof InlineObject)\n+        if (o instanceof PrimitiveObject)\n@@ -54,1 +53,1 @@\n-        if (oa[0] instanceof InlineObject)\n+        if (oa[0] instanceof PrimitiveObject)\n@@ -61,1 +60,1 @@\n-        if (oa[0] instanceof InlineObject)\n+        if (oa[0] instanceof PrimitiveObject)\n@@ -63,2 +62,2 @@\n-        if (points != 6)\n-            throw new AssertionError(\"Broken top type set up\" + points);\n+        if (points != 4)\n+            throw new AssertionError(\"Broken top type set up \" + points);\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/InstanceOfTopTypeTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"}]}