{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+class BufferBlob;\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#include \"memory\/metaspaceShared.hpp\"\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3111,1 +3111,1 @@\n-void InstanceKlass::set_classpath_index(s2 path_index, TRAPS) {\n+void InstanceKlass::set_classpath_index(s2 path_index) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"classfile\/classLoaderData.hpp\"\n@@ -643,1 +642,1 @@\n-  void set_classpath_index(s2 path_index, TRAPS);\n+  void set_classpath_index(s2 path_index);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+#include \"runtime\/jniHandles.hpp\"\n@@ -263,1 +264,1 @@\n-  volatile_nonstatic_field(Klass,              _subklass,                                     Klass*)                                 \\\n+  volatile_nonstatic_field(Klass,              _subklass,                                     Klass*)                                \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -389,2 +389,2 @@\n-                if (c.isValue() && c.projection != null) {\n-                    c.projection.flags_field = (c.flags_field & ~(VALUE | UNATTRIBUTED | FINAL)) | SEALED;\n+                if (c.isPrimitiveClass() && c.projection != null) {\n+                    c.projection.flags_field = (c.flags_field & ~(PRIMITIVE_CLASS | UNATTRIBUTED | FINAL)) | SEALED;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/ClassFinder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,2 +101,2 @@\n-    \/** Marks a type as a value-type *\/\n-    public static final int VALUE        = 1<<16;\n+    \/** Marks a type as a primitive class *\/\n+    public static final int PRIMITIVE_CLASS  = 1<<16;\n@@ -113,1 +113,1 @@\n-    public static final int ACC_INLINE   = 0x0100;\n+    public static final int ACC_PRIMITIVE = 0x0100;\n@@ -408,1 +408,1 @@\n-        LocalClassFlags                   = FINAL | ABSTRACT | STRICTFP | ENUM | SYNTHETIC  | VALUE,\n+        LocalClassFlags                   = FINAL | ABSTRACT | STRICTFP | ENUM | SYNTHETIC  | PRIMITIVE_CLASS,\n@@ -423,1 +423,1 @@\n-        ExtendedStandardFlags             = (long)StandardFlags | DEFAULT | SEALED | NON_SEALED | VALUE,\n+        ExtendedStandardFlags             = (long)StandardFlags | DEFAULT | SEALED | NON_SEALED | PRIMITIVE_CLASS,\n@@ -454,1 +454,1 @@\n-            if (0 != (flags & VALUE))     modifiers.add(Modifier.VALUE);\n+            if (0 != (flags & PRIMITIVE_CLASS))     modifiers.add(Modifier.PRIMITIVE);\n@@ -501,1 +501,1 @@\n-        INLINE(Flags.VALUE),\n+        PRIMITIVE(Flags.PRIMITIVE_CLASS),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-            if (pt.isValue()) {\n+            if (pt.isPrimitiveClass()) {\n@@ -381,1 +381,1 @@\n-        if (rt.isValue()) {\n+        if (rt.isPrimitiveClass()) {\n@@ -444,2 +444,2 @@\n-    public boolean isValue() {\n-        return (flags() & VALUE) != 0;\n+    public boolean isPrimitiveClass() {\n+        return (flags() & PRIMITIVE_CLASS) != 0;\n@@ -1695,1 +1695,1 @@\n-            return projection != null && projection.isValue();\n+            return projection != null && projection.isPrimitiveClass();\n@@ -1705,1 +1705,0 @@\n-\n@@ -1720,1 +1719,1 @@\n-            long projectionFlags = (this.flags_field & ~(VALUE | UNATTRIBUTED | FINAL)) | SEALED;\n+            long projectionFlags = (this.flags_field & ~(PRIMITIVE_CLASS | UNATTRIBUTED | FINAL)) | SEALED;\n@@ -1882,1 +1881,1 @@\n-            return this.owner.isValue() ?\n+            return this.owner.isPrimitiveClass() ?\n@@ -1889,1 +1888,1 @@\n-            return  projection != null ? projection.owner.isValue() ? projection : null: null;\n+            return  projection != null ? projection.owner.isPrimitiveClass() ? projection : null: null;\n@@ -2248,1 +2247,1 @@\n-            if (origin.isValue())\n+            if (origin.isPrimitiveClass())\n@@ -2251,1 +2250,1 @@\n-            if (this.owner.isValue()) {\n+            if (this.owner.isPrimitiveClass()) {\n@@ -2314,1 +2313,1 @@\n-            if (clazz.isValue())\n+            if (clazz.isPrimitiveClass())\n@@ -2316,1 +2315,1 @@\n-            if (this.owner.isValue())\n+            if (this.owner.isPrimitiveClass())\n@@ -2335,1 +2334,1 @@\n-            return this.owner.isValue() ?\n+            return this.owner.isPrimitiveClass() ?\n@@ -2342,1 +2341,1 @@\n-            return  projection != null ? projection.owner.isValue() ? projection : null : null;\n+            return  projection != null ? projection.owner.isPrimitiveClass() ? projection : null : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-                    if (type.isValue()) {\n+                    if (type.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -613,2 +613,2 @@\n-        boolean tValue = t.isValue();\n-        boolean sValue = s.isValue();\n+        boolean tValue = t.isPrimitiveClass();\n+        boolean sValue = s.isPrimitiveClass();\n@@ -1014,2 +1014,2 @@\n-    public boolean isValue(Type t) {\n-        return t != null && t.tsym != null && (t.tsym.flags_field & Flags.VALUE) != 0;\n+    public boolean isPrimitiveClass(Type t) {\n+        return t != null && t.tsym != null && (t.tsym.flags_field & Flags.PRIMITIVE_CLASS) != 0;\n@@ -1044,1 +1044,1 @@\n-                    if (isValue(et)) {\n+                    if (isPrimitiveClass(et)) {\n@@ -1046,1 +1046,1 @@\n-                        if (isValue(es))\n+                        if (isPrimitiveClass(es))\n@@ -1148,1 +1148,1 @@\n-                         s.hasTag(BOT) || (s.hasTag(CLASS) && !isValue(s)) ||\n+                         s.hasTag(BOT) || (s.hasTag(CLASS) && !isPrimitiveClass(s)) ||\n@@ -1230,1 +1230,1 @@\n-                        if (isValue(et)) {\n+                        if (isPrimitiveClass(et)) {\n@@ -1232,1 +1232,1 @@\n-                            if (isValue(es))\n+                            if (isPrimitiveClass(es))\n@@ -1725,1 +1725,1 @@\n-                (ss.isValue() && ss.referenceProjection() == ts)) {\n+                (ss.isPrimitiveClass() && ss.referenceProjection() == ts)) {\n@@ -1783,1 +1783,1 @@\n-                if (s.hasTag(ERROR) || (s.hasTag(BOT) && !isValue(t)))\n+                if (s.hasTag(ERROR) || (s.hasTag(BOT) && !isPrimitiveClass(t)))\n@@ -1802,1 +1802,1 @@\n-                    if (isValue(t)) {\n+                    if (isPrimitiveClass(t)) {\n@@ -1806,1 +1806,1 @@\n-                    if (isValue(s)) {\n+                    if (isPrimitiveClass(s)) {\n@@ -2242,1 +2242,1 @@\n-            t = t.isValue() ? t.referenceProjection() : t;\n+            t = t.isPrimitiveClass() ? t.referenceProjection() : t;\n@@ -2245,1 +2245,1 @@\n-            if (!isValue(t))\n+            if (!isPrimitiveClass(t))\n@@ -2250,1 +2250,1 @@\n-            if (t.isValue() || t.tsym == syms.objectType.tsym)\n+            if (t.isPrimitiveClass() || t.tsym == syms.objectType.tsym)\n@@ -2275,1 +2275,1 @@\n-                if (isValue(t))\n+                if (isPrimitiveClass(t))\n@@ -2397,1 +2397,1 @@\n-        if (t.isValue())\n+        if (t.isPrimitiveClass())\n@@ -2400,1 +2400,1 @@\n-        if (sym.owner.isValue())\n+        if (sym.owner.isPrimitiveClass())\n@@ -2614,2 +2614,2 @@\n-        if (isValue(bounds.head))\n-            flags |= VALUE;\n+        if (isPrimitiveClass(bounds.head))\n+            flags |= PRIMITIVE_CLASS;\n@@ -5252,1 +5252,1 @@\n-                    if (types.isValue(type))\n+                    if (types.isPrimitiveClass(type))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-    \/** Switch: allow inline types.\n+    \/** Switch: allow primitive classes.\n@@ -110,1 +110,1 @@\n-    boolean allowInlineTypes;\n+    boolean allowPrimitiveClasses;\n@@ -279,1 +279,1 @@\n-        allowInlineTypes = Feature.INLINE_TYPES.allowedInSource(source);\n+        allowPrimitiveClasses = Feature.PRIMITIVE_CLASSES.allowedInSource(source);\n@@ -300,1 +300,1 @@\n-        ClassSymbol refProjection =  c.isValue() ? c.referenceProjection() : null;\n+        ClassSymbol refProjection =  c.isPrimitiveClass() ? c.referenceProjection() : null;\n@@ -816,1 +816,1 @@\n-                    if (allowInlineTypes) {\n+                    if (allowPrimitiveClasses) {\n@@ -1007,1 +1007,1 @@\n-                        if (sym.kind == MTH  && sym.name == names.init && sym.owner.isValue()) {\n+                        if (sym.kind == MTH  && sym.name == names.init && sym.owner.isPrimitiveClass()) {\n@@ -1283,1 +1283,1 @@\n-                    return super.accepts(kind) && allowInlineTypes;\n+                    return super.accepts(kind) && allowPrimitiveClasses;\n@@ -1299,1 +1299,1 @@\n-                    return super.accepts(kind) && allowInlineTypes;\n+                    return super.accepts(kind) && allowPrimitiveClasses;\n@@ -2557,1 +2557,1 @@\n-        if (allowInlineTypes && name.toString().endsWith(\"$ref\")) {\n+        if (allowPrimitiveClasses && name.toString().endsWith(\"$ref\")) {\n@@ -2728,1 +2728,1 @@\n-        if (c.isValue()) {\n+        if (c.isPrimitiveClass()) {\n@@ -2848,4 +2848,4 @@\n-        if ((flags & ACC_INLINE) != 0) {\n-            flags &= ~ACC_INLINE;\n-            if (allowInlineTypes) {\n-                flags |= VALUE;\n+        if ((flags & ACC_PRIMITIVE) != 0) {\n+            flags &= ~ACC_PRIMITIVE;\n+            if (allowPrimitiveClasses) {\n+                flags |= PRIMITIVE_CLASS;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -871,1 +871,1 @@\n-            if (csym.isValue()) {\n+            if (csym.isPrimitiveClass()) {\n@@ -897,1 +897,1 @@\n-        if (csym.owner.kind != PCK || csym.isValue()) {\n+        if (csym.owner.kind != PCK || csym.isPrimitiveClass()) {\n@@ -900,1 +900,1 @@\n-            if (outerMost.isValue()) {\n+            if (outerMost.isPrimitiveClass()) {\n@@ -915,1 +915,1 @@\n-            if (csym.isValue()) {\n+            if (csym.isPrimitiveClass()) {\n@@ -978,1 +978,1 @@\n-        if (types.flattenWithTypeRestrictions && v.type.isValue()) {\n+        if (types.flattenWithTypeRestrictions && v.type.isPrimitiveClass()) {\n@@ -1004,1 +1004,1 @@\n-            if (types.flattenWithTypeRestrictions && v.type.isValue()) {\n+            if (types.flattenWithTypeRestrictions && v.type.isPrimitiveClass()) {\n@@ -1062,1 +1062,1 @@\n-            if (outerThisType.isValue()) {\n+            if (outerThisType.isPrimitiveClass()) {\n@@ -1068,1 +1068,1 @@\n-            if (pt.isValue() && types.flattenWithTypeRestrictions) {\n+            if (pt.isPrimitiveClass() && types.flattenWithTypeRestrictions) {\n@@ -1079,1 +1079,1 @@\n-        if (m.type.getReturnType().isValue() && types.flattenWithTypeRestrictions) {\n+        if (m.type.getReturnType().isPrimitiveClass() && types.flattenWithTypeRestrictions) {\n@@ -1096,1 +1096,1 @@\n-                    databuf.appendChar(outerThisType.isValue() ? poolWriter.putDescriptor(outerThisType) : 0);\n+                    databuf.appendChar(outerThisType.isPrimitiveClass() ? poolWriter.putDescriptor(outerThisType) : 0);\n@@ -1099,1 +1099,1 @@\n-                    databuf.appendChar(pt.isValue() ? poolWriter.putDescriptor(pt) : 0);\n+                    databuf.appendChar(pt.isPrimitiveClass() ? poolWriter.putDescriptor(pt) : 0);\n@@ -1102,1 +1102,1 @@\n-                databuf.appendChar(rt.isValue() ? poolWriter.putDescriptor(rt) : 0);\n+                databuf.appendChar(rt.isPrimitiveClass() ? poolWriter.putDescriptor(rt) : 0);\n@@ -1350,1 +1350,1 @@\n-                databuf.appendChar(types.isValue(t) ? poolWriter.putClass(new ConstantPoolQType(types.erasure(t), types)) : poolWriter.putClass(types.erasure(t)));\n+                databuf.appendChar(types.isPrimitiveClass(t) ? poolWriter.putClass(new ConstantPoolQType(types.erasure(t), types)) : poolWriter.putClass(types.erasure(t)));\n@@ -1615,1 +1615,1 @@\n-        if (c.isValue()) {\n+        if (c.isPrimitiveClass()) {\n@@ -1667,2 +1667,2 @@\n-        Type supertype = c.isValue() ? c.type.referenceProjection() : types.supertype(c.type);\n-        List<Type> interfaces = c.isValue() ? List.nil() : types.interfaces(c.type);\n+        Type supertype = c.isPrimitiveClass() ? c.type.referenceProjection() : types.supertype(c.type);\n+        List<Type> interfaces = c.isPrimitiveClass() ? List.nil() : types.interfaces(c.type);\n@@ -1677,1 +1677,1 @@\n-            flags = flags & (ClassFlags | ACC_INLINE) & ~STRICTFP;\n+            flags = flags & (ClassFlags | ACC_PRIMITIVE) & ~STRICTFP;\n@@ -1854,2 +1854,2 @@\n-        if ((flags & VALUE) != 0)\n-            result |= ACC_INLINE;\n+        if ((flags & PRIMITIVE_CLASS) != 0)\n+            result |= ACC_PRIMITIVE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        if (this.types.flattenWithTypeRestrictions && member.kind == Kind.VAR && member.type.isValue()) {\n+        if (this.types.flattenWithTypeRestrictions && member.kind == Kind.VAR && member.type.isPrimitiveClass()) {\n@@ -164,1 +164,1 @@\n-        if (this.types.flattenWithTypeRestrictions && member.kind == Kind.VAR && member.type.isValue()) {\n+        if (this.types.flattenWithTypeRestrictions && member.kind == Kind.VAR && member.type.isPrimitiveClass()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Items.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    public final Name inline;\n+    public final Name primitive;\n@@ -116,2 +116,2 @@\n-    public final Name __inline__;\n-    public final Name java_lang___inline__;\n+    public final Name __primitive__;\n+    public final Name java_lang___primitive__;\n@@ -290,1 +290,1 @@\n-        inline = fromString(\"inline\");\n+        primitive = fromString(\"primitive\");\n@@ -304,2 +304,2 @@\n-        __inline__ = fromString(\"__inline__\");\n-        java_lang___inline__ = fromString(\"java.lang.__inline__\");\n+        __primitive__ = fromString(\"__primitive__\");\n+        java_lang___primitive__ = fromString(\"java.lang.__primitive__\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    static inline class Point {\n+    static primitive class Point {\n@@ -43,1 +43,1 @@\n-    static inline class Rec {\n+    static primitive class Rec {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/TypeRestrictions\/PointBox.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static inline class Point {\n+    static primitive class Point {\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/TypeRestrictions\/SimpleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    inline class Point {}\n-    inline class Line {}\n+    primitive class Point {}\n+    primitive class Line {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/AnnotatedRestrictedMethodTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-    inline class Point {}\n-    inline class Line {}\n+    primitive class Point {}\n+    primitive class Line {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/FlaggedRestrictedMethodTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    static inline class Point {\n+    static primitive class Point {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/PointBox.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    static inline class Point {\n+    static primitive class Point {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RestrictedFieldCodegenTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @summary [type-restrictions] Static inline fields are not \"erased\" to the ref type\n+ * @summary [type-restrictions] Static primitive value type fields are not \"erased\" to the ref type\n@@ -42,1 +42,1 @@\n-    static inline class Point {\n+    static primitive class Point {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RestrictedStaticFieldCodegenTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-    inline class Point {}\n-    inline class Line {}\n+    primitive class Point {}\n+    primitive class Line {}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/RestrictedTypeAnnotationCodegenTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}