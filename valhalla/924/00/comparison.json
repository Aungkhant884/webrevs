{"files":[{"patch":"@@ -277,1 +277,1 @@\n-    if (is_reference_type(bt)) {\n+    if (is_reference_type(bt) && (!ary_ptr->is_flat())) {\n","filename":"src\/hotspot\/share\/gc\/x\/c2\/xBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8313667\n+ * @summary Test that GenZ uses correct array copy stub for flat primitive clone arrays when expanding ArrayCopyNode.\n+ * @requires vm.gc.ZSinglegen\n+ * @library \/test\/lib\n+ * @compile -XDenablePrimitiveClasses TestWrongFlatArrayCopyStubWithZGC.java\n+ * @run main\/othervm -XX:+EnableValhalla -XX:+EnablePrimitiveClasses -Xbatch -XX:+UseZGC -XX:-ZGenerational\n+ *                   -XX:CompileCommand=exclude,compiler.valhalla.inlinetypes.TestWrongFlatArrayCopyStubWithZGC::check\n+ *                   -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestWrongFlatArrayCopyStubWithZGC::test*\n+ *                   compiler.valhalla.inlinetypes.TestWrongFlatArrayCopyStubWithZGC\n+ *\/\n+\n+package compiler.valhalla.inlinetypes;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+public class TestWrongFlatArrayCopyStubWithZGC {\n+\n+    public static void main(String[] args) {\n+        ValueWithLong[] arrWithLong = new ValueWithLong[3];\n+        arrWithLong[0] = new ValueWithLong(0x408BE000000fffffL);\n+        arrWithLong[1] = new ValueWithLong(0x408BE0000000000L);\n+        long randomValue = Utils.getRandomInstance().nextLong();\n+        arrWithLong[2] = new ValueWithLong(randomValue);\n+\n+        for (int i = 0; i < 10000; i++) {\n+            ValueWithLong[] result = testLong(arrWithLong);\n+            check(result[0].l, 0x408BE000000fffffL);\n+            check(result[1].l, 0x408BE0000000000L);\n+            check(result[2].l, randomValue);\n+        }\n+\n+        ValueWithOop[] arrWithOop = new ValueWithOop[2];\n+        arrWithOop[0] = new ValueWithOop();\n+        arrWithOop[1] = new ValueWithOop();\n+\n+        for (int i = 0; i < 10000; i++) {\n+            testOop(arrWithOop);\n+        }\n+    }\n+\n+    static void check(long result, long expected) {\n+        Asserts.assertEQ(result, expected);\n+    }\n+\n+    static ValueWithLong[] testLong(ValueWithLong[] arr) {\n+        return arr.clone();\n+    }\n+\n+    static ValueWithOop[] testOop(ValueWithOop[] arr) {\n+        return arr.clone();\n+    }\n+}\n+\n+\n+final primitive class ValueWithLong {\n+    final long l;\n+\n+    public ValueWithLong(long l) {\n+        this.l = l;\n+    }\n+}\n+\n+final primitive class ValueWithOop {\n+    final Object v;\n+\n+    public ValueWithOop() {\n+        this.v = new Object();\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestWrongFlatArrayCopyStubWithZGC.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}