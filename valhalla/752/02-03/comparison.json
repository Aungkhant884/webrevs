{"files":[{"patch":"@@ -63,1 +63,1 @@\n-    public static <T> Class<?> asPrimaryType(Class<T> aClass) {\n+    public static Class<?> asPrimaryType(Class<?> aClass) {\n@@ -81,1 +81,2 @@\n-    public static <T> Class<?> asValueType(Class<T> aClass) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static Class<?> asValueType(Class<?> aClass) {\n@@ -105,1 +106,1 @@\n-    public static <T> boolean isPrimaryType(Class<T> aClass) {\n+    public static boolean isPrimaryType(Class<?> aClass) {\n@@ -118,1 +119,1 @@\n-    public static <T> boolean isPrimitiveValueType(Class<T> aClass) {\n+    public static boolean isPrimitiveValueType(Class<?> aClass) {\n@@ -142,1 +143,1 @@\n-    public static <T> boolean isPrimitiveClass(Class<T> aClass) {\n+    public static boolean isPrimitiveClass(Class<?> aClass) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/PrimitiveClass.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -655,1 +655,1 @@\n-            throw new UnsupportedOperationException(\"can't get field offset on an inline class: \" + f);\n+            throw new UnsupportedOperationException(\"can't get field offset on a primitive class: \" + f);\n@@ -697,1 +697,1 @@\n-            throw new UnsupportedOperationException(\"can't get static field offset on an inline class: \" + f);\n+            throw new UnsupportedOperationException(\"can't get static field offset on a primitive class: \" + f);\n@@ -731,1 +731,1 @@\n-            throw new UnsupportedOperationException(\"can't get base address on an inline class: \" + f);\n+            throw new UnsupportedOperationException(\"can't get base address on a primitive class: \" + f);\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -8,0 +9,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -14,1 +17,1 @@\n-            Class<? extends Foo.ref> cFooRef; \/\/ NYI:  = Foo.class.asValueType(); \/\/ Error\n+            Class<? extends Foo.ref> cFooRef = PrimitiveClass.asValueType(Foo.class); \/\/ Error\n@@ -31,1 +34,1 @@\n-            Class<? extends Bar.ref> cBarRef;   \/\/ NYI: = Bar.class.asValueType(); \/\/ Error\n+            Class<? extends Bar.ref> cBarRef = PrimitiveClass.asValueType(Bar.class); \/\/ Error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,2 +1,5 @@\n-ClassLiteralTypingNegativeTest.java:17:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n-ClassLiteralTypingNegativeTest.java:34:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n+ClassLiteralTypingNegativeTest.java:17:74: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ?>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n+ClassLiteralTypingNegativeTest.java:20:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n+ClassLiteralTypingNegativeTest.java:34:74: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ?>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n+ClassLiteralTypingNegativeTest.java:37:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n+4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.out","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}