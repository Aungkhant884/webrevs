{"files":[{"patch":"@@ -65,0 +65,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -448,1 +449,1 @@\n-                deserializeEx = new ExceptionInfo(name, cl.isPrimitiveClass() ? \"primitive class\" : \"value class\");\n+                deserializeEx = new ExceptionInfo(name, \"value class\");\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -206,1 +207,0 @@\n-    private static final int PRIMITIVE_CLASS = 0x00000800;\n@@ -635,2 +635,2 @@\n-    public boolean isPrimitiveClass() {\n-        return (this.getModifiers() & PRIMITIVE_CLASS) != 0;\n+    \/* package *\/ boolean isPrimitiveClass() {\n+        return (this.getModifiers() & PrimitiveClass.PRIMITIVE_CLASS) != 0;\n@@ -676,1 +676,1 @@\n-    public Class<?> asPrimaryType() {\n+    \/* package *\/ Class<?> asPrimaryType() {\n@@ -694,1 +694,1 @@\n-    public Class<?> asValueType() {\n+    \/* package *\/ Class<?> asValueType() {\n@@ -720,1 +720,1 @@\n-    public boolean isPrimaryType() {\n+    \/* package *\/ boolean isPrimaryType() {\n@@ -735,1 +735,1 @@\n-    public boolean isPrimitiveValueType() {\n+    \/* package *\/ boolean isPrimitiveValueType() {\n@@ -1025,2 +1025,0 @@\n-     * <tr><th scope=\"row\"> {@linkplain #isPrimitiveClass() primitive class} with <a href=\"ClassLoader.html#binary-name\">binary name<\/a> <i>N<\/i>\n-     *                                      <td style=\"text-align:center\"> {@code Q}<em>N<\/em>{@code ;}\n@@ -1045,2 +1043,0 @@\n-     * Point.class.getName()\n-     *     returns \"Point\"\n@@ -1049,4 +1045,0 @@\n-     * (new Point[3]).getClass().getName()\n-     *     returns \"[QPoint;\"\n-     * (new Point.ref[3][4]).getClass().getName()\n-     *     returns \"[[LPoint;\"\n@@ -4140,3 +4132,1 @@\n-     * {@code null} and is not assignable to the type T.\n-     * @throws NullPointerException if this class is an {@linkplain #isPrimitiveValueType()\n-     * primitive value type} and the object is {@code null}\n+     * null and is not assignable to the type T.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2634,0 +2634,18 @@\n+\n+            @Override\n+            public Class<?> asPrimaryType(Class<?> clazz) {\n+                return clazz.asPrimaryType();\n+            }\n+            public Class<?> asValueType(Class<?> clazz) {\n+                return clazz.asValueType();\n+            }\n+\n+            public boolean isPrimaryType(Class<?> clazz) {\n+                return clazz.isPrimaryType();\n+            }\n+            public boolean isPrimitiveValueType(Class<?> clazz) {\n+                return clazz.isPrimitiveValueType();\n+            }\n+            public boolean isPrimitiveClass(Class<?> clazz) {\n+                return clazz.isPrimitiveClass();\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import sun.invoke.util.Wrapper;\n+import jdk.internal.value.PrimitiveClass;\n@@ -81,1 +81,1 @@\n-                if (!clazz.isPrimitiveClass()) {\n+                if (!PrimitiveClass.isPrimitiveClass(clazz)) {\n@@ -84,1 +84,1 @@\n-                clazz = clazz.asValueType();\n+                clazz = PrimitiveClass.asValueType(clazz);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDescImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -271,1 +272,1 @@\n-            if (!implClass.asPrimaryType().isAssignableFrom(receiverClass.asPrimaryType())) {\n+            if (!PrimitiveClass.asPrimaryType(implClass).isAssignableFrom(PrimitiveClass.asPrimaryType(receiverClass))) {\n@@ -324,1 +325,1 @@\n-            if (!descriptorParamType.asPrimaryType().isAssignableFrom(dynamicParamType.asPrimaryType())) {\n+            if (!PrimitiveClass.asPrimaryType(descriptorParamType).isAssignableFrom(PrimitiveClass.asPrimaryType(dynamicParamType))) {\n@@ -406,1 +407,1 @@\n-            return fromType.asPrimaryType() == toType.asPrimaryType();\n+            return PrimitiveClass.asPrimaryType(fromType) == PrimitiveClass.asPrimaryType(toType);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -82,1 +83,1 @@\n-            Class<?> receiverType = refc.isPrimitiveClass() ? refc.asValueType() : refc;\n+            Class<?> receiverType = PrimitiveClass.isPrimitiveClass(refc) ? PrimitiveClass.asValueType(refc) : refc;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -119,1 +121,1 @@\n-                       methodType.returnType() != defc.asValueType()) {\n+                       methodType.returnType() != PrimitiveClass.asValueType(defc)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InfoFromMemberName.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -644,1 +645,1 @@\n-            return (c.isValue() && !c.isPrimitiveClass()) || c.isPrimitiveValueType();\n+            return (c.isValue() && !PrimitiveClass.isPrimitiveClass(c)) || PrimitiveClass.isPrimitiveValueType(c);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -194,1 +195,1 @@\n-        Class<?> c = clazz.isPrimitiveClass() ? clazz.asValueType() : clazz;\n+        Class<?> c = PrimitiveClass.isPrimitiveClass(clazz) ? PrimitiveClass.asValueType(clazz) : clazz;\n@@ -482,1 +483,1 @@\n-            return type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n+            return PrimitiveClass.isPrimitiveValueType(type) || (type.isValue() && !PrimitiveClass.isPrimitiveClass(type));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -1626,1 +1627,1 @@\n-            assert lookupClass.isPrimaryType();\n+            assert PrimitiveClass.isPrimaryType(lookupClass);\n@@ -3850,1 +3851,1 @@\n-            if (!fullPrivilegeLookup && defc.asPrimaryType() != refc.asPrimaryType()) {\n+            if (!fullPrivilegeLookup && PrimitiveClass.asPrimaryType(defc) != PrimitiveClass.asPrimaryType(refc)) {\n@@ -3933,1 +3934,1 @@\n-                               (defc.asPrimaryType() == refc.asPrimaryType() ||\n+                               (PrimitiveClass.asPrimaryType(defc) == PrimitiveClass.asPrimaryType(refc) ||\n@@ -3938,1 +3939,1 @@\n-                           (defc.asPrimaryType() == refc.asPrimaryType() ||\n+                           (PrimitiveClass.asPrimaryType(defc) == PrimitiveClass.asPrimaryType(refc) ||\n@@ -5068,1 +5069,1 @@\n-            if (!type.isPrimitiveValueType() && value == null)\n+            if (!PrimitiveClass.isPrimitiveValueType(type) && value == null)\n@@ -5115,1 +5116,1 @@\n-        } else if (type.isPrimitiveValueType()) {\n+        } else if (PrimitiveClass.isPrimitiveValueType(type)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.stream.Collectors;\n@@ -46,0 +45,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -55,1 +55,0 @@\n-import static java.lang.invoke.MethodType.fromDescriptor;\n@@ -953,1 +952,1 @@\n-        if (c.isPrimitiveClass() && c.isPrimaryType()) {\n+        if (PrimitiveClass.isPrimitiveClass(c) && PrimitiveClass.isPrimaryType(c)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -1687,2 +1688,2 @@\n-            if (receiver != null && receiver.isPrimitiveClass()) {\n-                receiver = receiver.asValueType();\n+            if (receiver != null && PrimitiveClass.isPrimitiveClass(receiver)) {\n+                receiver = PrimitiveClass.asValueType(receiver);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -228,1 +229,1 @@\n-            return maybeAdapt(componentType.isPrimitiveValueType() && UNSAFE.isFlattenedArray(arrayClass)\n+            return maybeAdapt(PrimitiveClass.isPrimitiveValueType(componentType) && UNSAFE.isFlattenedArray(arrayClass)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -151,1 +153,1 @@\n-            if (handle.fieldType.isPrimitiveValueType())\n+            if (PrimitiveClass.isPrimitiveValueType(handle.fieldType))\n@@ -504,1 +506,1 @@\n-            if (handle.fieldType.isPrimitiveValueType())\n+            if (PrimitiveClass.isPrimitiveValueType(handle.fieldType))\n@@ -747,1 +749,1 @@\n-        assert componentType.isPrimitiveValueType() && UNSAFE.isFlattenedArray(arrayClass);\n+        assert PrimitiveClass.isPrimitiveValueType(componentType) && UNSAFE.isFlattenedArray(arrayClass);\n@@ -806,1 +808,1 @@\n-            if (handle.componentType.isPrimitiveValueType())\n+            if (PrimitiveClass.isPrimitiveValueType(handle.componentType))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -128,1 +129,1 @@\n-        assert declaringClass.isPrimaryType();\n+        assert PrimitiveClass.isPrimaryType(declaringClass);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -793,2 +794,2 @@\n-        if (c.isPrimitiveClass()) {\n-            c = c.asValueType();\n+        if (PrimitiveClass.isPrimitiveClass(c)) {\n+            c = PrimitiveClass.asValueType(c);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -132,1 +133,1 @@\n-        assert declaringClass.isPrimaryType();\n+        assert PrimitiveClass.isPrimaryType(declaringClass);\n@@ -359,2 +360,2 @@\n-        if (c.isPrimitiveClass()) {\n-            c = c.asValueType();\n+        if (PrimitiveClass.isPrimitiveClass(c)) {\n+            c = PrimitiveClass.asValueType(c);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -134,1 +135,1 @@\n-        assert declaringClass.isPrimaryType();\n+        assert PrimitiveClass.isPrimaryType(declaringClass);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -879,1 +880,1 @@\n-            if (type.asPrimaryType() != c.asPrimaryType()) {\n+            if (PrimitiveClass.asPrimaryType(type) != PrimitiveClass.asPrimaryType(c)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -859,1 +860,2 @@\n-            return (c.isValue() && !c.isPrimitiveClass()) || c.isPrimitiveValueType();\n+            return (c.isValue() && !PrimitiveClass.isPrimitiveClass(c)) ||\n+                    PrimitiveClass.isPrimitiveValueType(c);\n@@ -897,1 +899,1 @@\n-                if (type.isPrimitiveValueType()) {\n+                if (PrimitiveClass.isPrimitiveValueType(type)) {\n@@ -968,4 +970,5 @@\n-            if (cl.isPrimitiveValueType()) {\n-              mv.visitMethodInsn(INVOKEVIRTUAL,\n-                                 JL_CLASS,\n-                                 \"asValueType\", \"()Ljava\/lang\/Class;\", false);\n+            if (PrimitiveClass.isPrimitiveValueType(cl)) {\n+                mv.visitMethodInsn(INVOKESTATIC,\n+                      \"jdk\/internal\/value\/PrimitiveClass\",\n+                      \"asValueType\", \"(Ljava\/lang\/Class;)Ljava\/lang\/Class;\",\n+                      false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -419,1 +421,2 @@\n-        Class<?> receiverType = recordClass.isPrimitiveClass() ? recordClass.asValueType() : recordClass;\n+        Class<?> receiverType = PrimitiveClass.isPrimitiveClass(recordClass)\n+                ? PrimitiveClass.asValueType(recordClass) : recordClass;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -123,1 +124,2 @@\n-            assert type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n+            assert PrimitiveClass.isPrimitiveValueType(type) ||\n+                    (type.isValue() && !PrimitiveClass.isPrimitiveClass(type));\n@@ -145,1 +147,2 @@\n-            assert type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass());\n+            assert PrimitiveClass.isPrimitiveValueType(type) ||\n+                    (type.isValue() && !PrimitiveClass.isPrimitiveClass(type));\n@@ -190,2 +193,2 @@\n-                if (type.isPrimitiveClass()) {\n-                    type = type.asValueType();\n+                if (PrimitiveClass.isPrimitiveClass(type)) {\n+                    type = PrimitiveClass.asValueType(type);\n@@ -373,2 +376,2 @@\n-            if (type.isPrimitiveClass()) {\n-                type = type.asValueType();\n+            if (PrimitiveClass.isPrimitiveClass(type)) {\n+                type = PrimitiveClass.asValueType(type);\n@@ -419,1 +422,2 @@\n-        if (type.isPrimitiveValueType() || (type.isValue() && !type.isPrimitiveClass())) {\n+        if (PrimitiveClass.isPrimitiveValueType(type) ||\n+                (type.isValue() && !PrimitiveClass.isPrimitiveClass(type))) {\n@@ -444,1 +448,1 @@\n-            Class<?> type = c.isPrimitiveClass() ? c.asValueType() : c;\n+            Class<?> type = PrimitiveClass.isPrimitiveClass(c) ? PrimitiveClass.asValueType(c) : c;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/PrimitiveObjectMethods.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -540,0 +540,34 @@\n+\n+    \/**\n+     * {@return the primary class for a primitive class}\n+     *\n+     * @param klass a class\n+     *\/\n+    Class<?> asPrimaryType(Class<?> klass);\n+\n+    \/**\n+     * {@return the value type of a primitive class}\n+     *\n+     * @param klass a class\n+     *\/\n+    Class<?> asValueType(Class<?> klass);\n+\n+    \/**\n+     * {@return true if the class is the primary type of a primitive class}\n+     *\n+     * @param klass a class\n+     *\/\n+    boolean isPrimaryType(Class<?> klass);\n+\n+    \/**\n+     * {@return true if the class is the primary type of a primitive class}\n+     *\n+     * @param klass a class\n+     *\/\n+    boolean isPrimitiveValueType(Class<?> klass);\n+\n+    \/**\n+     * Returns {@code true} if this class is a primitive class.\n+     *\/\n+    boolean isPrimitiveClass(Class<?> klass);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -272,1 +273,1 @@\n-        if (ref == null && pc.isPrimitiveValueType()) {\n+        if (ref == null && PrimitiveClass.isPrimitiveValueType(pc)) {\n@@ -282,1 +283,1 @@\n-        if (ref == null && pc.isPrimitiveValueType()) {\n+        if (ref == null && PrimitiveClass.isPrimitiveValueType(pc)) {\n@@ -1551,1 +1552,1 @@\n-        return o != null && o.getClass().isPrimitiveClass();\n+        return o != null && PrimitiveClass.isPrimitiveClass(o.getClass());\n@@ -1565,1 +1566,1 @@\n-        if (valueType.isPrimitiveClass() || isInlineType(expected)) {\n+        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n@@ -1606,1 +1607,1 @@\n-        if (valueType.isPrimitiveClass() || isInlineType(expected)) {\n+        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n@@ -1688,1 +1689,1 @@\n-        if (valueType.isPrimitiveClass() || isInlineType(expected)) {\n+        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n@@ -1714,1 +1715,1 @@\n-        if (valueType.isPrimitiveClass() || isInlineType(expected)) {\n+        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n@@ -1740,1 +1741,1 @@\n-        if (valueType.isPrimitiveClass() || isInlineType(expected)) {\n+        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n@@ -1766,1 +1767,1 @@\n-        if (valueType.isPrimitiveClass() || isInlineType(expected)) {\n+        if (PrimitiveClass.isPrimitiveClass(valueType) || isInlineType(expected)) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/Unsafe.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -98,1 +100,1 @@\n-                                              isStaticFactory ? declaringClass.asValueType() : Void.TYPE,\n+                                              isStaticFactory ? PrimitiveClass.asValueType(declaringClass) : Void.TYPE,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/MethodAccessorGenerator.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+import jdk.internal.value.PrimitiveClass;\n@@ -60,1 +62,2 @@\n-        return !field.getType().isPrimitiveClass() || field.getType().isPrimaryType();\n+        return !PrimitiveClass.isPrimitiveClass(field.getType()) ||\n+                PrimitiveClass.isPrimaryType(field.getType());\n@@ -69,2 +72,2 @@\n-            if (type.isPrimitiveClass()) {\n-                type = type.asValueType();\n+            if (PrimitiveClass.isPrimitiveClass(type)) {\n+                type = PrimitiveClass.asValueType(type);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/UnsafeFieldAccessorImpl.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.value;\n+\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n+\/**\n+ * Utilities to access Primitive Classes as described in JEP 401.\n+ *\/\n+public class PrimitiveClass {\n+\n+    \/**\n+     * ACC_PRIMITIVE modifier defined by JEP 401. Subject to change.\n+     *\/\n+    public static final int PRIMITIVE_CLASS = 0x00000800;\n+\n+    private static final JavaLangAccess javaLangAccess = SharedSecrets.getJavaLangAccess();\n+\n+\n+    \/**\n+     * Returns a {@code Class} object representing the primary type\n+     * of this class or interface.\n+     * <p>\n+     * If this {@code Class} object represents a primitive type or an array type,\n+     * then this method returns this class.\n+     * <p>\n+     * If this {@code Class} object represents a {@linkplain #isPrimitiveClass(Class)\n+     * primitive class}, then this method returns the <em>primitive reference type<\/em>\n+     * type of this primitive class.\n+     * <p>\n+     * Otherwise, this {@code Class} object represents a non-primitive class or interface\n+     * and this method returns this class.\n+     *\n+     * @param aClass a class\n+     * @return the {@code Class} representing the primary type of\n+     *         this class or interface\n+     * @since Valhalla\n+     *\/\n+    public static Class<?> asPrimaryType(Class<?> aClass) {\n+        return javaLangAccess.asPrimaryType(aClass);\n+    }\n+\n+    \/**\n+     * Returns a {@code Class} object representing the <em>primitive value type<\/em>\n+     * of this class if this class is a {@linkplain #isPrimitiveClass(Class)}  primitive class}.\n+     *\n+     * @apiNote Alternatively, this method returns null if this class is not\n+     *          a primitive class rather than throwing UOE.\n+     *\n+     * @param aClass a class\n+     * @return the {@code Class} representing the {@linkplain #isPrimitiveValueType(Class)\n+     * primitive value type} of this class if this class is a primitive class\n+     * @throws UnsupportedOperationException if this class or interface\n+     *         is not a primitive class\n+     * @since Valhalla\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public static Class<?> asValueType(Class<?> aClass) {\n+        return javaLangAccess.asValueType(aClass);\n+    }\n+\n+    \/**\n+     * Returns {@code true} if this {@code Class} object represents the primary type\n+     * of this class or interface.\n+     * <p>\n+     * If this {@code Class} object represents a primitive type or an array type,\n+     * then this method returns {@code true}.\n+     * <p>\n+     * If this {@code Class} object represents a {@linkplain #isPrimitiveClass(Class)\n+     * primitive}, then this method returns {@code true} if this {@code Class}\n+     * object represents a primitive reference type, or returns {@code false}\n+     * if this {@code Class} object represents a primitive value type.\n+     * <p>\n+     * If this {@code Class} object represents a non-primitive class or interface,\n+     * then this method returns {@code true}.\n+     *\n+     * @param aClass a class\n+     * @return {@code true} if this {@code Class} object represents\n+     * the primary type of this class or interface\n+     * @since Valhalla\n+     *\/\n+    public static boolean isPrimaryType(Class<?> aClass) {\n+        return javaLangAccess.isPrimaryType(aClass);\n+\n+    }\n+\n+    \/**\n+     * Returns {@code true} if this {@code Class} object represents\n+     * a {@linkplain #isPrimitiveClass(Class)  primitive} value type.\n+     *\n+     * @return {@code true} if this {@code Class} object represents\n+     * the value type of a primitive class\n+     * @since Valhalla\n+     *\/\n+    public static boolean isPrimitiveValueType(Class<?> aClass) {\n+        return javaLangAccess.isPrimitiveValueType(aClass);\n+    }\n+\n+    \/**\n+     * Returns {@code true} if this class is a primitive class.\n+     * <p>\n+     * Each primitive class has a {@linkplain #isPrimaryType(Class)  primary type}\n+     * representing the <em>primitive reference type<\/em> and a\n+     * {@linkplain #isPrimitiveValueType(Class)  secondary type} representing\n+     * the <em>primitive value type<\/em>.  The primitive reference type\n+     * and primitive value type can be obtained by calling the\n+     * {@link #asPrimaryType(Class)} and {@link PrimitiveClass#asValueType} method\n+     * of a primitive class respectively.\n+     * <p>\n+     * A primitive class is a {@linkplain Class#isValue() value class}.\n+     *\n+     * @param aClass a class\n+     * @return {@code true} if this class is a primitive class, otherwise {@code false}\n+     * @see Class#isValue()\n+     * @see #asPrimaryType(Class)\n+     * @see #asValueType(Class)\n+     * @since Valhalla\n+     *\/\n+    public static boolean isPrimitiveClass(Class<?> aClass) {\n+        return javaLangAccess.isPrimitiveClass(aClass);\n+\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/PrimitiveClass.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -264,0 +264,2 @@\n+    exports jdk.internal.value to  \/\/ Needed by Unsafe\n+        jdk.unsupported;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -94,1 +96,1 @@\n-                return c == 'Q' ? clz.asValueType() : clz.asPrimaryType();\n+                return c == 'Q' ? PrimitiveClass.asValueType(clz) : PrimitiveClass.asPrimaryType(clz);\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/BytecodeDescriptor.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+\n@@ -31,0 +32,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -108,1 +110,1 @@\n-        if (defc.asPrimaryType() == lookupClass  &&\n+        if (PrimitiveClass.asPrimaryType(defc) == lookupClass  &&\n@@ -143,1 +145,1 @@\n-            assert (canAccess && refc.asPrimaryType() == defc.asPrimaryType()) || !canAccess;\n+            assert (canAccess && PrimitiveClass.asPrimaryType(refc) == PrimitiveClass.asPrimaryType(defc)) || !canAccess;\n@@ -151,1 +153,1 @@\n-        return (refc.asPrimaryType() == lookupClass.asPrimaryType() ||\n+        return (PrimitiveClass.asPrimaryType(refc) == PrimitiveClass.asPrimaryType(lookupClass) ||\n@@ -276,1 +278,1 @@\n-        if (type.asPrimaryType() == refc.asPrimaryType()) {\n+        if (PrimitiveClass.asPrimaryType(type) == PrimitiveClass.asPrimaryType(refc)) {\n@@ -337,1 +339,1 @@\n-        return (type.asPrimaryType() == res);\n+        return (PrimitiveClass.asPrimaryType(type) == res);\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/VerifyAccess.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -33,1 +34,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -654,2 +654,2 @@\n-        if (f.getDeclaringClass().isPrimitiveClass()) {\n-            throw new UnsupportedOperationException(\"can't get field offset on an inline class: \" + f);\n+        if (PrimitiveClass.isPrimitiveClass(f.getDeclaringClass())) {\n+            throw new UnsupportedOperationException(\"can't get field offset on a primitive class: \" + f);\n@@ -696,2 +696,2 @@\n-        if (f.getDeclaringClass().isPrimitiveClass()) {\n-            throw new UnsupportedOperationException(\"can't get static field offset on an inline class: \" + f);\n+        if (PrimitiveClass.isPrimitiveClass(f.getDeclaringClass())) {\n+            throw new UnsupportedOperationException(\"can't get static field offset on a primitive class: \" + f);\n@@ -730,2 +730,2 @@\n-        if (f.getDeclaringClass().isPrimitiveClass()) {\n-            throw new UnsupportedOperationException(\"can't get base address on an inline class: \" + f);\n+        if (PrimitiveClass.isPrimitiveClass(f.getDeclaringClass())) {\n+            throw new UnsupportedOperationException(\"can't get base address on a primitive class: \" + f);\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/misc\/Unsafe.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+                         \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n@@ -48,0 +49,1 @@\n+                         \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n@@ -59,0 +61,1 @@\n+                         \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n@@ -71,0 +74,1 @@\n+                         \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n@@ -81,0 +85,1 @@\n+                         \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n@@ -91,0 +96,1 @@\n+                         \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/InlineTypes.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -38,1 +40,1 @@\n- * @modules java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc java.base\/jdk.internal.value\n@@ -104,1 +106,1 @@\n-            Class<?> clazz = MyValue.class.asValueType();\n+            Class<?> clazz = PrimitiveClass.asValueType(MyValue.class);\n@@ -107,1 +109,1 @@\n-            MethodType mt = MethodType.methodType(MyValue.class.asValueType());\n+            MethodType mt = MethodType.methodType(PrimitiveClass.asValueType(MyValue.class));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestBufferTearing.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -41,0 +43,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -54,1 +57,1 @@\n-            MethodType mt = MethodType.methodType(MyValue2.class.asValueType(), boolean.class);\n+            MethodType mt = MethodType.methodType(PrimitiveClass.asValueType(MyValue2.class), boolean.class);\n@@ -61,1 +64,1 @@\n-            test37_mh = lookup.findVirtual(Test37Value.class.asValueType(), \"test\", mt);\n+            test37_mh = lookup.findVirtual(PrimitiveClass.asValueType(Test37Value.class), \"test\", mt);\n@@ -299,1 +302,1 @@\n-            deoptimize(\"test13\", MyValue2.class.asValueType(), MyValue1[].class, boolean.class, long.class);\n+            deoptimize(\"test13\", PrimitiveClass.asValueType(MyValue2.class), MyValue1[].class, boolean.class, long.class);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestCallingConvention.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -36,0 +38,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -88,1 +91,1 @@\n-            MethodType mt = MethodType.methodType(MyValue1.class.asValueType());\n+            MethodType mt = MethodType.methodType(PrimitiveClass.asValueType(MyValue1.class));\n@@ -182,1 +185,1 @@\n-            m = TestDeoptimizationWhenBuffering.class.getMethod(\"test3Callee\", MyValue1.class.asValueType());\n+            m = TestDeoptimizationWhenBuffering.class.getMethod(\"test3Callee\", PrimitiveClass.asValueType(MyValue1.class));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestDeoptimizationWhenBuffering.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -43,1 +45,1 @@\n- * @modules java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc java.base\/jdk.internal.value\n@@ -55,1 +57,2 @@\n-            scenario.addFlags(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+            scenario.addFlags(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                    \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\");\n@@ -84,4 +87,4 @@\n-        Asserts.assertTrue(test1(MyValue1.class.asPrimaryType(), MyValue1.class.asPrimaryType()), \"test1_2 failed\");\n-        Asserts.assertTrue(test1(MyValue1.class.asValueType(), MyValue1.class.asValueType()), \"test1_3 failed\");\n-        Asserts.assertTrue(test1(MyValue1.class.asPrimaryType(), MyValue1.class.asValueType()), \"test1_4 failed\");\n-        Asserts.assertFalse(test1(MyValue1.class.asValueType(), MyValue1.class.asPrimaryType()), \"test1_5 failed\");\n+        Asserts.assertTrue(test1(PrimitiveClass.asPrimaryType(MyValue1.class), PrimitiveClass.asPrimaryType(MyValue1.class)), \"test1_2 failed\");\n+        Asserts.assertTrue(test1(PrimitiveClass.asValueType(MyValue1.class), PrimitiveClass.asValueType(MyValue1.class)), \"test1_3 failed\");\n+        Asserts.assertTrue(test1(PrimitiveClass.asPrimaryType(MyValue1.class), PrimitiveClass.asValueType(MyValue1.class)), \"test1_4 failed\");\n+        Asserts.assertFalse(test1(PrimitiveClass.asValueType(MyValue1.class), PrimitiveClass.asPrimaryType(MyValue1.class)), \"test1_5 failed\");\n@@ -89,4 +92,4 @@\n-        Asserts.assertTrue(test1(Object.class, MyValue1.class.asPrimaryType()), \"test1_7 failed\");\n-        Asserts.assertTrue(test1(Object.class, MyValue1.class.asValueType()), \"test1_8 failed\");\n-        Asserts.assertTrue(!test1(MyValue1.class.asPrimaryType(), Object.class), \"test1_9 failed\");\n-        Asserts.assertTrue(!test1(MyValue1.class.asValueType(), Object.class), \"test1_10 failed\");\n+        Asserts.assertTrue(test1(Object.class, PrimitiveClass.asPrimaryType(MyValue1.class)), \"test1_7 failed\");\n+        Asserts.assertTrue(test1(Object.class, PrimitiveClass.asValueType(MyValue1.class)), \"test1_8 failed\");\n+        Asserts.assertTrue(!test1(PrimitiveClass.asPrimaryType(MyValue1.class), Object.class), \"test1_9 failed\");\n+        Asserts.assertTrue(!test1(PrimitiveClass.asValueType(MyValue1.class), Object.class), \"test1_10 failed\");\n@@ -100,4 +103,4 @@\n-        boolean check2 = MyValue1.class.asPrimaryType().isAssignableFrom(MyValue1.class.asPrimaryType());\n-        boolean check3 = MyValue1.class.asValueType().isAssignableFrom(MyValue1.class.asValueType());\n-        boolean check4 = MyValue1.class.asPrimaryType().isAssignableFrom(MyValue1.class.asValueType());\n-        boolean check5 = !MyValue1.class.asValueType().isAssignableFrom(MyValue1.class.asPrimaryType());\n+        boolean check2 = PrimitiveClass.asPrimaryType(MyValue1.class).isAssignableFrom(PrimitiveClass.asPrimaryType(MyValue1.class));\n+        boolean check3 = PrimitiveClass.asValueType(MyValue1.class).isAssignableFrom(PrimitiveClass.asValueType(MyValue1.class));\n+        boolean check4 = PrimitiveClass.asPrimaryType(MyValue1.class).isAssignableFrom(PrimitiveClass.asValueType(MyValue1.class));\n+        boolean check5 = !PrimitiveClass.asValueType(MyValue1.class).isAssignableFrom(PrimitiveClass.asPrimaryType(MyValue1.class));\n@@ -105,4 +108,4 @@\n-        boolean check7 = Object.class.isAssignableFrom(MyValue1.class.asPrimaryType());\n-        boolean check8 = Object.class.isAssignableFrom(MyValue1.class.asValueType());\n-        boolean check9 = !MyValue1.class.asPrimaryType().isAssignableFrom(Object.class);\n-        boolean check10 = !MyValue1.class.asValueType().isAssignableFrom(Object.class);\n+        boolean check7 = Object.class.isAssignableFrom(PrimitiveClass.asPrimaryType(MyValue1.class));\n+        boolean check8 = Object.class.isAssignableFrom(PrimitiveClass.asValueType(MyValue1.class));\n+        boolean check9 = !PrimitiveClass.asPrimaryType(MyValue1.class).isAssignableFrom(Object.class);\n+        boolean check10 = !PrimitiveClass.asValueType(MyValue1.class).isAssignableFrom(Object.class);\n@@ -126,2 +129,2 @@\n-        Asserts.assertTrue(test3(MyValue1.class.asPrimaryType()) == MyAbstract.class, \"test3_2 failed\");\n-        Asserts.assertTrue(test3(MyValue1.class.asValueType()) == MyAbstract.class, \"test3_3 failed\");\n+        Asserts.assertTrue(test3(PrimitiveClass.asPrimaryType(MyValue1.class)) == MyAbstract.class, \"test3_2 failed\");\n+        Asserts.assertTrue(test3(PrimitiveClass.asValueType(MyValue1.class)) == MyAbstract.class, \"test3_3 failed\");\n@@ -136,2 +139,2 @@\n-        boolean check2 = MyValue1.class.asPrimaryType().getSuperclass() == MyAbstract.class;\n-        boolean check3 = MyValue1.class.asValueType().getSuperclass() == MyAbstract.class;\n+        boolean check2 = PrimitiveClass.asPrimaryType(MyValue1.class).getSuperclass() == MyAbstract.class;\n+        boolean check3 = PrimitiveClass.asValueType(MyValue1.class).getSuperclass() == MyAbstract.class;\n@@ -183,1 +186,1 @@\n-        Object[] va = test7(MyValue1.class.asValueType(), len);\n+        Object[] va = test7(PrimitiveClass.asValueType(MyValue1.class), len);\n@@ -198,1 +201,1 @@\n-        boolean result = test8(MyValue1.class.asValueType(), vt);\n+        boolean result = test8(PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -200,1 +203,1 @@\n-        result = test8(MyValue1.class.asPrimaryType(), vt);\n+        result = test8(PrimitiveClass.asPrimaryType(MyValue1.class), vt);\n@@ -214,1 +217,1 @@\n-        result = test9(MyValue2.class.asPrimaryType(), vt);\n+        result = test9(PrimitiveClass.asPrimaryType(MyValue2.class), vt);\n@@ -227,1 +230,1 @@\n-        Object result = test10(MyValue1.class.asValueType(), vt);\n+        Object result = test10(PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -248,1 +251,1 @@\n-        return MyValue1.class.asValueType().cast(vt);\n+        return PrimitiveClass.asValueType(MyValue1.class).cast(vt);\n@@ -276,1 +279,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), len);\n+        Object[] va = (Object[])Array.newInstance(PrimitiveClass.asValueType(MyValue1.class), len);\n@@ -376,1 +379,1 @@\n-            Field xField = MyValue1.class.asValueType().getDeclaredField(\"x\");\n+            Field xField = PrimitiveClass.asValueType(MyValue1.class).getDeclaredField(\"x\");\n@@ -378,1 +381,1 @@\n-            Field yField = MyValue1.class.asValueType().getDeclaredField(\"y\");\n+            Field yField = PrimitiveClass.asValueType(MyValue1.class).getDeclaredField(\"y\");\n@@ -380,1 +383,1 @@\n-            Field v1Field = MyValue1.class.asValueType().getDeclaredField(\"v1\");\n+            Field v1Field = PrimitiveClass.asValueType(MyValue1.class).getDeclaredField(\"v1\");\n@@ -476,1 +479,1 @@\n-          ca[i] = MyValue1.class.asValueType();\n+          ca[i] = PrimitiveClass.asValueType(MyValue1.class);\n@@ -569,1 +572,1 @@\n-            return U.getValue(v, V1_OFFSET, MyValue2.class.asValueType());\n+            return U.getValue(v, V1_OFFSET, PrimitiveClass.asValueType(MyValue2.class));\n@@ -599,1 +602,1 @@\n-            return U.getValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType());\n+            return U.getValue(this, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class));\n@@ -616,1 +619,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), vt);\n+            U.putValue(this, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -647,1 +650,1 @@\n-            return U.getValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class.asValueType());\n+            return U.getValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, PrimitiveClass.asValueType(MyValue1.class));\n@@ -666,1 +669,1 @@\n-            U.putValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class.asValueType(), vt);\n+            U.putValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -686,1 +689,1 @@\n-            return U.getValue(o, TEST31_VT_OFFSET, MyValue1.class.asValueType());\n+            return U.getValue(o, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class));\n@@ -704,1 +707,1 @@\n-            return U.getValue(this, offset, MyValue1.class.asValueType());\n+            return U.getValue(this, offset, PrimitiveClass.asValueType(MyValue1.class));\n@@ -722,1 +725,1 @@\n-            U.putValue(o, TEST31_VT_OFFSET, MyValue1.class.asValueType(), vt);\n+            U.putValue(o, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -742,1 +745,1 @@\n-            U.putValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), o);\n+            U.putValue(this, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), o);\n@@ -782,1 +785,1 @@\n-        Object[] va = test40(MyValue1.class.asPrimaryType(), len);\n+        Object[] va = test40(PrimitiveClass.asPrimaryType(MyValue1.class), len);\n@@ -797,1 +800,1 @@\n-        boolean result = test41(MyValue1.class.asPrimaryType(), vt);\n+        boolean result = test41(PrimitiveClass.asPrimaryType(MyValue1.class), vt);\n@@ -799,1 +802,1 @@\n-        result = test41(MyValue1.class.asPrimaryType(), null);\n+        result = test41(PrimitiveClass.asPrimaryType(MyValue1.class), null);\n@@ -801,1 +804,1 @@\n-        result = test41(MyValue1.class.asValueType(), vt);\n+        result = test41(PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -803,1 +806,1 @@\n-        result = test41(MyValue1.class.asValueType(), null);\n+        result = test41(PrimitiveClass.asValueType(MyValue1.class), null);\n@@ -815,1 +818,1 @@\n-        boolean result = test42(MyValue2.class.asPrimaryType(), vt);\n+        boolean result = test42(PrimitiveClass.asPrimaryType(MyValue2.class), vt);\n@@ -817,1 +820,1 @@\n-        result = test42(MyValue2.class.asPrimaryType(), null);\n+        result = test42(PrimitiveClass.asPrimaryType(MyValue2.class), null);\n@@ -819,1 +822,1 @@\n-        result = test42(MyValue2.class.asValueType(), vt);\n+        result = test42(PrimitiveClass.asValueType(MyValue2.class), vt);\n@@ -821,1 +824,1 @@\n-        result = test42(MyValue2.class.asValueType(), null);\n+        result = test42(PrimitiveClass.asValueType(MyValue2.class), null);\n@@ -834,1 +837,1 @@\n-        Object result = test43(MyValue1.class.asPrimaryType(), vt);\n+        Object result = test43(PrimitiveClass.asPrimaryType(MyValue1.class), vt);\n@@ -836,1 +839,1 @@\n-        result = test43(MyValue1.class.asPrimaryType(), null);\n+        result = test43(PrimitiveClass.asPrimaryType(MyValue1.class), null);\n@@ -838,1 +841,1 @@\n-        result = test43(MyValue1.class.asValueType(), vt);\n+        result = test43(PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -841,1 +844,1 @@\n-            test43(MyValue1.class.asValueType(), null);\n+            test43(PrimitiveClass.asValueType(MyValue1.class), null);\n@@ -858,1 +861,1 @@\n-            test44(MyValue2.class.asPrimaryType(), vt);\n+            test44(PrimitiveClass.asPrimaryType(MyValue2.class), vt);\n@@ -862,1 +865,1 @@\n-        Object res = test44(MyValue2.class.asPrimaryType(), null);\n+        Object res = test44(PrimitiveClass.asPrimaryType(MyValue2.class), null);\n@@ -865,1 +868,1 @@\n-            test44(MyValue2.class.asValueType(), vt);\n+            test44(PrimitiveClass.asValueType(MyValue2.class), vt);\n@@ -870,1 +873,1 @@\n-            test44(MyValue2.class.asValueType(), null);\n+            test44(PrimitiveClass.asValueType(MyValue2.class), null);\n@@ -878,1 +881,1 @@\n-        return MyValue1.class.asPrimaryType().cast(vt);\n+        return PrimitiveClass.asPrimaryType(MyValue1.class).cast(vt);\n@@ -892,1 +895,1 @@\n-        return MyValue2.class.asPrimaryType().cast(vt);\n+        return PrimitiveClass.asPrimaryType(MyValue2.class).cast(vt);\n@@ -909,1 +912,1 @@\n-        return MyValue1.class.asValueType().cast(vt);\n+        return PrimitiveClass.asValueType(MyValue1.class).cast(vt);\n@@ -932,1 +935,1 @@\n-        Object result = test48(MyValue1.class.asValueType(), vt);\n+        Object result = test48(PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -935,1 +938,1 @@\n-            test48(MyValue1.class.asValueType(), null);\n+            test48(PrimitiveClass.asValueType(MyValue1.class), null);\n@@ -943,1 +946,1 @@\n-        return MyValue1.class.asPrimaryType().cast(vt);\n+        return PrimitiveClass.asPrimaryType(MyValue1.class).cast(vt);\n@@ -963,1 +966,1 @@\n-        Object result = test50(MyValue1.class.asValueType(), vt);\n+        Object result = test50(PrimitiveClass.asValueType(MyValue1.class), vt);\n@@ -965,1 +968,1 @@\n-        result = test50(MyValue1.class.asPrimaryType(), vt);\n+        result = test50(PrimitiveClass.asPrimaryType(MyValue1.class), vt);\n@@ -974,1 +977,1 @@\n-            test50(MyValue1.class.asValueType(), null);\n+            test50(PrimitiveClass.asValueType(MyValue1.class), null);\n@@ -988,1 +991,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.class.asPrimaryType(), len);\n+        Object[] va = (Object[])Array.newInstance(PrimitiveClass.asPrimaryType(MyValue1.class), len);\n@@ -1104,1 +1107,1 @@\n-            return U.getValue(test55_vt, V1_OFFSET, MyValue2.class.asValueType());\n+            return U.getValue(test55_vt, V1_OFFSET, PrimitiveClass.asValueType(MyValue2.class));\n@@ -1118,1 +1121,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), 1);\n+        Object[] va = (Object[])Array.newInstance(PrimitiveClass.asValueType(MyValue1.class), 1);\n@@ -1132,1 +1135,1 @@\n-        Object[] va = (Object[])Array.newInstance(MyValue1.class.asValueType(), 1);\n+        Object[] va = (Object[])Array.newInstance(PrimitiveClass.asValueType(MyValue1.class), 1);\n@@ -1153,1 +1156,1 @@\n-        boolean res = test58(MyValue1.class.asValueType(), MyValue1.class.asValueType());\n+        boolean res = test58(PrimitiveClass.asValueType(MyValue1.class), PrimitiveClass.asValueType(MyValue1.class));\n@@ -1155,1 +1158,1 @@\n-        res = test58(Object.class, MyValue1.class.asValueType());\n+        res = test58(Object.class, PrimitiveClass.asValueType(MyValue1.class));\n@@ -1157,1 +1160,1 @@\n-        res = test58(MyValue1.class.asValueType(), Object.class);\n+        res = test58(PrimitiveClass.asValueType(MyValue1.class), Object.class);\n@@ -1174,1 +1177,1 @@\n-            test59(MyValue1.class.asValueType());\n+            test59(PrimitiveClass.asValueType(MyValue1.class));\n@@ -1191,5 +1194,5 @@\n-        Asserts.assertTrue(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), false, false));\n-        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue2.class, false, false));\n-        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), false, true));\n-        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), true, false));\n-        Asserts.assertFalse(test60(MyValue1.class.asValueType(), MyValue1.class.asValueType(), true, true));\n+        Asserts.assertTrue(test60(PrimitiveClass.asValueType(MyValue1.class), PrimitiveClass.asValueType(MyValue1.class), false, false));\n+        Asserts.assertFalse(test60(PrimitiveClass.asValueType(MyValue1.class), MyValue2.class, false, false));\n+        Asserts.assertFalse(test60(PrimitiveClass.asValueType(MyValue1.class), PrimitiveClass.asValueType(MyValue1.class), false, true));\n+        Asserts.assertFalse(test60(PrimitiveClass.asValueType(MyValue1.class), PrimitiveClass.asValueType(MyValue1.class), true, false));\n+        Asserts.assertFalse(test60(PrimitiveClass.asValueType(MyValue1.class), PrimitiveClass.asValueType(MyValue1.class), true, true));\n@@ -1201,1 +1204,1 @@\n-        if (c.asPrimaryType() != Integer.class) {\n+        if (PrimitiveClass.asPrimaryType(c) != Integer.class) {\n@@ -1204,1 +1207,1 @@\n-        return Integer.class.asPrimaryType();\n+        return PrimitiveClass.asPrimaryType(Integer.class);\n@@ -1217,1 +1220,1 @@\n-            c.asValueType();\n+            PrimitiveClass.asValueType(c);\n@@ -1222,1 +1225,1 @@\n-        return Integer.class.asValueType();\n+        return PrimitiveClass.asValueType(Integer.class);\n@@ -1239,1 +1242,1 @@\n-            return U.compareAndSetValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), oldVal, newVal);\n+            return U.compareAndSetValue(this, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), oldVal, newVal);\n@@ -1269,1 +1272,1 @@\n-            return U.compareAndSetValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class.asValueType(), oldVal, newVal);\n+            return U.compareAndSetValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, PrimitiveClass.asValueType(MyValue1.class), oldVal, newVal);\n@@ -1299,1 +1302,1 @@\n-            return U.compareAndSetValue(o, TEST31_VT_OFFSET, MyValue1.class.asValueType(), oldVal, newVal);\n+            return U.compareAndSetValue(o, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), oldVal, newVal);\n@@ -1323,1 +1326,1 @@\n-            return U.compareAndSetValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), oldVal, newVal);\n+            return U.compareAndSetValue(this, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), oldVal, newVal);\n@@ -1347,1 +1350,1 @@\n-            return U.compareAndExchangeValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), oldVal, newVal);\n+            return U.compareAndExchangeValue(this, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), oldVal, newVal);\n@@ -1378,1 +1381,1 @@\n-            return U.compareAndExchangeValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, MyValue1.class.asValueType(), oldVal, newVal);\n+            return U.compareAndExchangeValue(arr, TEST33_BASE_OFFSET + TEST33_INDEX_SCALE, PrimitiveClass.asValueType(MyValue1.class), oldVal, newVal);\n@@ -1408,1 +1411,1 @@\n-            return U.compareAndExchangeValue(o, TEST31_VT_OFFSET, MyValue1.class.asValueType(), oldVal, newVal);\n+            return U.compareAndExchangeValue(o, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), oldVal, newVal);\n@@ -1433,1 +1436,1 @@\n-            return U.compareAndExchangeValue(this, TEST31_VT_OFFSET, MyValue1.class.asValueType(), oldVal, newVal);\n+            return U.compareAndExchangeValue(this, TEST31_VT_OFFSET, PrimitiveClass.asValueType(MyValue1.class), oldVal, newVal);\n@@ -1460,1 +1463,1 @@\n-                return U.getValue(v1, V1_OFFSET, MyValue2.class.asValueType());\n+                return U.getValue(v1, V1_OFFSET, PrimitiveClass.asValueType(MyValue2.class));\n@@ -1465,1 +1468,1 @@\n-                return U.getValue(v2, V1_OFFSET, MyValue2.class.asValueType());\n+                return U.getValue(v2, V1_OFFSET, PrimitiveClass.asValueType(MyValue2.class));\n@@ -1484,1 +1487,1 @@\n-                return U.getValue(v1, offset, MyValue2.class.asValueType());\n+                return U.getValue(v1, offset, PrimitiveClass.asValueType(MyValue2.class));\n@@ -1489,1 +1492,1 @@\n-                return U.getValue(v2, offset, MyValue2.class.asValueType());\n+                return U.getValue(v2, offset, PrimitiveClass.asValueType(MyValue2.class));\n@@ -1511,1 +1514,1 @@\n-                return U.getValue(test73_value1, offset, MyValue2.class.asValueType());\n+                return U.getValue(test73_value1, offset, PrimitiveClass.asValueType(MyValue2.class));\n@@ -1516,1 +1519,1 @@\n-                return U.getValue(test73_value2, offset, MyValue2.class.asValueType());\n+                return U.getValue(test73_value2, offset, PrimitiveClass.asValueType(MyValue2.class));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestIntrinsics.java","additions":102,"deletions":99,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -46,0 +48,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -1411,1 +1414,1 @@\n-        MethodType.methodType(void.class, TestLWorld.class, MyValue1[].class, int.class, MyValue2.class.asValueType()),\n+        MethodType.methodType(void.class, TestLWorld.class, MyValue1[].class, int.class, PrimitiveClass.asValueType(MyValue2.class)),\n@@ -4021,1 +4024,1 @@\n-        MethodType.methodType(void.class, TestLWorld.class, MyValue1[].class, int.class, MyValue2.class.asPrimaryType()),\n+        MethodType.methodType(void.class, TestLWorld.class, MyValue1[].class, int.class, PrimitiveClass.asPrimaryType(MyValue2.class)),\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -42,0 +44,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -55,1 +58,1 @@\n-            MethodType mt = MethodType.methodType(MyValue3.class.asValueType());\n+            MethodType mt = MethodType.methodType(PrimitiveClass.asValueType(MyValue3.class));\n@@ -60,2 +63,2 @@\n-            MethodType test4_mt1 = MethodType.methodType(int.class, MyValue1.class.asValueType());\n-            MethodType test4_mt2 = MethodType.methodType(MyValue1.class.asValueType());\n+            MethodType test4_mt1 = MethodType.methodType(int.class, PrimitiveClass.asValueType(MyValue1.class));\n+            MethodType test4_mt2 = MethodType.methodType(PrimitiveClass.asValueType(MyValue1.class));\n@@ -66,1 +69,1 @@\n-            MethodType test5_mt = MethodType.methodType(int.class, MyValue1.class.asValueType());\n+            MethodType test5_mt = MethodType.methodType(int.class, PrimitiveClass.asValueType(MyValue1.class));\n@@ -69,1 +72,1 @@\n-            MethodType test6_mt = MethodType.methodType(MyValue3.class.asValueType());\n+            MethodType test6_mt = MethodType.methodType(PrimitiveClass.asValueType(MyValue3.class));\n@@ -76,1 +79,1 @@\n-            MethodType myvalue2_mt = MethodType.methodType(MyValue2.class.asValueType());\n+            MethodType myvalue2_mt = MethodType.methodType(PrimitiveClass.asValueType(MyValue2.class));\n@@ -91,1 +94,1 @@\n-            MethodType test9_mt = MethodType.methodType(MyValue3.class.asValueType());\n+            MethodType test9_mt = MethodType.methodType(PrimitiveClass.asValueType(MyValue3.class));\n@@ -102,1 +105,1 @@\n-            MethodType test10_mt = MethodType.methodType(MyValue2.class.asValueType());\n+            MethodType test10_mt = MethodType.methodType(PrimitiveClass.asValueType(MyValue2.class));\n@@ -107,1 +110,1 @@\n-            MethodType test10_mt3 = MethodType.methodType(MyValue2.class.asValueType());\n+            MethodType test10_mt3 = MethodType.methodType(PrimitiveClass.asValueType(MyValue2.class));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestMethodHandles.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -52,0 +53,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -1738,1 +1740,1 @@\n-            if (args[i] == null && parameterTypes[0] == MyValue1.class.asValueType()) {\n+            if (args[i] == null && parameterTypes[0] == PrimitiveClass.asValueType(MyValue1.class)) {\n@@ -1760,1 +1762,1 @@\n-                    if (args[j] == null && parameterTypes[1] == MyValue1.class.asValueType()) {\n+                    if (args[j] == null && parameterTypes[1] == PrimitiveClass.asValueType(MyValue1.class)) {\n@@ -1876,0 +1878,1 @@\n+            \"--add-exports\", \"java.base\/jdk.internal.value=ALL-UNNAMED\",\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNewAcmp.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -43,0 +45,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -2534,1 +2537,1 @@\n-        MethodType.methodType(MyValue2.class.asPrimaryType(), TestNullableInlineTypes.class, MyValue1.class.asPrimaryType()),\n+        MethodType.methodType(PrimitiveClass.asPrimaryType(MyValue2.class), TestNullableInlineTypes.class, PrimitiveClass.asPrimaryType(MyValue1.class)),\n@@ -2538,1 +2541,1 @@\n-            checkcast(MyValue2.class.asPrimaryType()).\n+            checkcast(PrimitiveClass.asPrimaryType(MyValue2.class)).\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestNullableInlineTypes.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -46,0 +47,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -152,1 +155,2 @@\n-        m = TestTrivialMethods.class.getMethod(\"getter4\", MyValue3.class.asValueType());\n+        m = TestTrivialMethods.class.getMethod(\"setter1\", PrimitiveClass.asValueType(MyValue3.class));\n+        m = TestTrivialMethods.class.getMethod(\"getter4\", PrimitiveClass.asValueType(MyValue3.class));\n@@ -154,1 +158,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"constantGetter\", MyValue3.class.asValueType());\n+        m = TestTrivialMethods.class.getMethod(\"constantGetter\", PrimitiveClass.asValueType(MyValue3.class));\n@@ -162,1 +166,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"getter4Ref\", MyValue3.class.asPrimaryType());\n+        m = TestTrivialMethods.class.getMethod(\"getter4Ref\", PrimitiveClass.asPrimaryType(MyValue3.class));\n@@ -164,1 +168,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"constantGetterRef\", MyValue3.class.asPrimaryType());\n+        m = TestTrivialMethods.class.getMethod(\"constantGetterRef\", PrimitiveClass.asPrimaryType(MyValue3.class));\n@@ -166,1 +170,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"setter1\", MyValue3.class.asValueType());\n+        m = TestTrivialMethods.class.getMethod(\"setter1\", PrimitiveClass.asValueType(MyValue3.class));\n@@ -168,1 +172,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"setter2\", MyValue3.class.asValueType());\n+        m = TestTrivialMethods.class.getMethod(\"setter2\", PrimitiveClass.asValueType(MyValue3.class));\n@@ -170,1 +174,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"setter3\", MyValue3.class.asValueType());\n+        m = TestTrivialMethods.class.getMethod(\"setter3\", PrimitiveClass.asValueType(MyValue3.class));\n@@ -172,1 +176,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"setter1Ref\", MyValue3.class.asPrimaryType());\n+        m = TestTrivialMethods.class.getMethod(\"setter1Ref\", PrimitiveClass.asPrimaryType(MyValue3.class));\n@@ -174,1 +178,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"setter2Ref\", MyValue3.class.asPrimaryType());\n+        m = TestTrivialMethods.class.getMethod(\"setter2Ref\", PrimitiveClass.asPrimaryType(MyValue3.class));\n@@ -176,1 +180,1 @@\n-        m = TestTrivialMethods.class.getMethod(\"setter3Ref\", MyValue3.class.asPrimaryType());\n+        m = TestTrivialMethods.class.getMethod(\"setter3Ref\", PrimitiveClass.asPrimaryType(MyValue3.class));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestTrivialMethods.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -43,0 +45,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -446,2 +449,2 @@\n-        Asserts.assertEQ(test10(MyValueClass1.class.asPrimaryType(), null), null);\n-        Asserts.assertEQ(test10(MyValueClass2.class.asPrimaryType(), null), null);\n+        Asserts.assertEQ(test10(PrimitiveClass.asPrimaryType(MyValueClass1.class), null), null);\n+        Asserts.assertEQ(test10(PrimitiveClass.asPrimaryType(MyValueClass2.class), null), null);\n@@ -450,1 +453,1 @@\n-            test10(MyValueClass2.class.asPrimaryType(), testValue1);\n+            test10(PrimitiveClass.asPrimaryType(MyValueClass2.class), testValue1);\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -34,0 +36,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -87,1 +90,1 @@\n-        Method method = TestBootClassloader.class.getDeclaredMethod(\"test1\", Wrapper1.class.asValueType());\n+        Method method = TestBootClassloader.class.getDeclaredMethod(\"test1\", PrimitiveClass.asValueType(Wrapper1.class));\n@@ -91,1 +94,1 @@\n-        method = TestBootClassloader.class.getDeclaredMethod(\"test2\", Wrapper2.class.asValueType());\n+        method = TestBootClassloader.class.getDeclaredMethod(\"test2\", PrimitiveClass.asValueType(Wrapper2.class));\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/bootstrap\/TestBootClassloader.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @modules java.base\/jdk.internal.value\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/CreationErrorTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -32,0 +33,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -179,1 +181,1 @@\n-        return acmpModeInlineAlwaysFalse ? (!(a != null && a.getClass().isPrimitiveClass())) : true;\n+        return acmpModeInlineAlwaysFalse ? (!(a != null && PrimitiveClass.isPrimitiveClass(a.getClass()))) : true;\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/Ifacmp.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -39,0 +41,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -53,0 +56,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -67,0 +71,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -81,0 +86,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -327,1 +333,1 @@\n-            Class<?> vtClass = Person.class.asValueType();\n+            Class<?> vtClass = PrimitiveClass.asValueType(Person.class);\n@@ -567,1 +573,1 @@\n-                            .aconst_init(FooValue.class.asValueType())\n+                            .aconst_init(PrimitiveClass.asValueType(FooValue.class))\n@@ -577,1 +583,1 @@\n-                            .aconst_init(FooValue.class.asValueType())\n+                            .aconst_init(PrimitiveClass.asValueType(FooValue.class))\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineOops.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -36,0 +38,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -82,1 +85,1 @@\n-            assertTrue(arrayCls.getComponentType() == Point.class.asValueType(),\n+            assertTrue(arrayCls.getComponentType() == PrimitiveClass.asValueType(Point.class),\n@@ -289,2 +292,2 @@\n-        Class<?> cls = MyInt.class.asValueType();\n-        assertTrue(cls.isPrimitiveValueType());\n+        Class<?> cls = PrimitiveClass.asValueType(MyInt.class);\n+        assertTrue(PrimitiveClass.isPrimitiveValueType(cls));\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypeArray.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @modules java.base\/jdk.internal.value\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypesTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @modules java.base\/jdk.internal.value\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/ObjectMethods.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @modules java.base\/jdk.internal.value\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/TestBytecodeLib.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -33,0 +34,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -59,3 +61,3 @@\n-        Method methodARef = getClass().getDeclaredMethod(\"methodA\", MyInt.class.asValueType());\n-        Method methodBRef = getClass().getDeclaredMethod(\"methodB\", MyInt.class.asValueType(), MyInt.class.asValueType());\n-        Method methodCRef = getClass().getDeclaredMethod(\"methodC\", MyInt.class.asValueType(), String.class);\n+        Method methodARef = getClass().getDeclaredMethod(\"methodA\", PrimitiveClass.asValueType(MyInt.class));\n+        Method methodBRef = getClass().getDeclaredMethod(\"methodB\", PrimitiveClass.asValueType(MyInt.class), PrimitiveClass.asValueType(MyInt.class));\n+        Method methodCRef = getClass().getDeclaredMethod(\"methodC\", PrimitiveClass.asValueType(MyInt.class), String.class);\n@@ -99,1 +101,1 @@\n-        Class pt = IntValue.class.asValueType();\n+        Class pt = PrimitiveClass.asValueType(IntValue.class);\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/VarArgsArray.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -37,0 +38,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -267,0 +269,1 @@\n+            boolean isPrimitive = (testField.getModifiers() & PrimitiveClass.PRIMITIVE_CLASS) != 0;\n@@ -269,1 +272,1 @@\n-                    + (testField.getType().isPrimitiveClass() ? \"(primitive) \" : \"\")\n+                    + (isPrimitive ? \"(primitive) \" : \"\")\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/Valhalla\/HeapDump\/HeapDump.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,0 +3,3 @@\n+\n+# Reflection methods for primitive classes are in PrimitiveClass instead of java.lang.class\n+modules = java.base\/jdk.internal.value\n","filename":"test\/jdk\/java\/lang\/invoke\/TEST.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -47,1 +49,1 @@\n-    static final Class<?> type = Point.class.asValueType();\n+    static final Class<?> type = PrimitiveClass.asValueType(Point.class);\n@@ -1327,1 +1329,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessPoint.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -44,1 +46,1 @@\n-    static final Class<?> type = Point.class.asValueType();\n+    static final Class<?> type = PrimitiveClass.asValueType(Point.class);\n@@ -719,1 +721,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessPoint.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -50,1 +52,1 @@\n-    static final Class<?> type = Point.class.asValueType();\n+    static final Class<?> type = PrimitiveClass.asValueType(Point.class);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodTypePoint.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -292,1 +294,1 @@\n-                return aClass != null && aClass.isPrimitiveValueType();\n+                return aClass != null && PrimitiveClass.isPrimitiveValueType(aClass);\n@@ -302,1 +304,1 @@\n-                        return basicTypeHelper.isInlineClass(desc) ? c.asValueType() : c.asPrimaryType();\n+                        return basicTypeHelper.isInlineClass(desc) ? PrimitiveClass.asValueType(c) : PrimitiveClass.asPrimaryType(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -84,4 +86,4 @@\n-            new Object[] { Point.class, Point.class.asPrimaryType()},\n-            new Object[] { Point.val.class, Point.class.asValueType()},\n-            new Object[] { Point.ref.class, Point.class.asPrimaryType()},\n-            new Object[] { Value.class, Value.class.asPrimaryType()},\n+            new Object[] { Point.class, PrimitiveClass.asPrimaryType(Point.class)},\n+            new Object[] { Point.val.class, PrimitiveClass.asValueType(Point.class)},\n+            new Object[] { Point.ref.class, PrimitiveClass.asPrimaryType(Point.class)},\n+            new Object[] { Value.class, PrimitiveClass.asPrimaryType(Value.class)},\n@@ -104,2 +106,2 @@\n-                new Object[] { Point.class.asPrimaryType(), true},\n-                new Object[] { Point.class.asValueType(), false},\n+                new Object[] { PrimitiveClass.asPrimaryType(Point.class), true},\n+                new Object[] { PrimitiveClass.asValueType(Point.class), false},\n@@ -111,1 +113,1 @@\n-        assertTrue(type.isPrimaryType() == isRefType);\n+        assertTrue(PrimitiveClass.isPrimaryType(type) == isRefType);\n@@ -119,2 +121,2 @@\n-        Class<?> refType = Point.class.asPrimaryType();\n-        Class<?> valType = Point.class.asValueType();\n+        Class<?> refType = PrimitiveClass.asPrimaryType(Point.class);\n+        Class<?> valType = PrimitiveClass.asValueType(Point.class);\n@@ -126,2 +128,2 @@\n-        assertTrue(refType.isPrimitiveClass());\n-        assertTrue(valType.isPrimitiveClass());\n+        assertTrue(PrimitiveClass.isPrimitiveClass(refType));\n+        assertTrue(PrimitiveClass.isPrimitiveClass(valType));\n@@ -129,2 +131,2 @@\n-        assertTrue(refType.isPrimaryType());\n-        assertFalse(refType.isPrimitiveValueType());\n+        assertTrue(PrimitiveClass.isPrimaryType(refType));\n+        assertFalse(PrimitiveClass.isPrimitiveValueType(refType));\n@@ -132,2 +134,2 @@\n-        assertTrue(valType.isPrimitiveValueType());\n-        assertFalse(valType.isPrimaryType());\n+        assertTrue(PrimitiveClass.isPrimitiveValueType(valType));\n+        assertFalse(PrimitiveClass.isPrimaryType(valType));\n@@ -157,3 +159,3 @@\n-        assertTrue(Point.ref.class.isAssignableFrom(Point.class.asValueType()));\n-        assertTrue(Object.class.isAssignableFrom(Point.class.asValueType()));\n-        assertFalse(Point.class.asValueType().isAssignableFrom(Point.ref.class));\n+        assertTrue(Point.ref.class.isAssignableFrom(PrimitiveClass.asValueType(Point.class)));\n+        assertTrue(Object.class.isAssignableFrom(PrimitiveClass.asValueType(Point.class)));\n+        assertFalse(PrimitiveClass.asValueType(Point.class).isAssignableFrom(Point.ref.class));\n@@ -162,1 +164,1 @@\n-        assertTrue(Point.class.asValueType().asSubclass(Point.ref.class) == Point.class.asValueType());\n+        assertTrue(PrimitiveClass.asValueType(Point.class).asSubclass(Point.ref.class) == PrimitiveClass.asValueType(Point.class));\n@@ -164,1 +166,1 @@\n-            Class<?> c = Point.ref.class.asSubclass(Point.class.asValueType());\n+            Class<?> c = Point.ref.class.asSubclass(PrimitiveClass.asValueType(Point.class));\n@@ -169,1 +171,1 @@\n-        assertTrue(Point.class.asValueType().isInstance(o));\n+        assertTrue(PrimitiveClass.asValueType(Point.class).isInstance(o));\n@@ -171,1 +173,1 @@\n-        assertFalse(Point.class.asValueType().isInstance(null));\n+        assertFalse(PrimitiveClass.asValueType(Point.class).isInstance(null));\n@@ -178,1 +180,1 @@\n-                new Object[] { \"BasicTest$Point\", Point.class.asPrimaryType()},\n+                new Object[] { \"BasicTest$Point\", PrimitiveClass.asPrimaryType(Point.class)},\n@@ -243,1 +245,1 @@\n-        assertTrue(m.getDeclaringClass() == Point.class.asPrimaryType());\n+        assertTrue(m.getDeclaringClass() == PrimitiveClass.asPrimaryType(Point.class));\n@@ -259,1 +261,1 @@\n-        assertTrue(ctor.getDeclaringClass() == c.asPrimaryType());\n+        assertTrue(ctor.getDeclaringClass() == PrimitiveClass.asPrimaryType(c));\n@@ -302,3 +304,3 @@\n-                            Point.class.asPrimaryType(),\n-                            C.class.asPrimaryType(),\n-                            T.class.asPrimaryType()));\n+                            PrimitiveClass.asPrimaryType(Point.class),\n+                            PrimitiveClass.asPrimaryType(C.class),\n+                            PrimitiveClass.asPrimaryType(T.class)));\n","filename":"test\/jdk\/valhalla\/valuetypes\/BasicTest.java","additions":30,"deletions":28,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -63,2 +65,2 @@\n-                new Object[] { P.class.asValueType(),   (new P[1])[0] },\n-                new Object[] { P.class.asPrimaryType(), (new P.ref[1])[0] },\n+                new Object[] { PrimitiveClass.asValueType(P.class),   (new P[1])[0] },\n+                new Object[] { PrimitiveClass.asPrimaryType(P.class), (new P.ref[1])[0] },\n@@ -80,1 +82,1 @@\n-                new Object[] { P.class.asValueType(), P.class.asPrimaryType() },\n+                new Object[] { PrimitiveClass.asValueType(P.class), PrimitiveClass.asPrimaryType(P.class) },\n@@ -102,2 +104,2 @@\n-        Class<?> pref = P.class.asPrimaryType();\n-        Class<?> pval = P.class.asValueType();\n+        Class<?> pref = PrimitiveClass.asPrimaryType(P.class);\n+        Class<?> pval = PrimitiveClass.asValueType(P.class);\n","filename":"test\/jdk\/valhalla\/valuetypes\/MHZeroValue.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -154,1 +156,1 @@\n-            assertFalse(elementType.isPrimitiveValueType(), \"should fail to set a primitive class array element to null\");\n+            assertFalse(PrimitiveClass.isPrimitiveValueType(elementType), \"should fail to set a primitive class array element to null\");\n@@ -157,1 +159,1 @@\n-            assertTrue(elementType.isPrimitiveValueType(), \"should only fail to set a primitive class array element to null\");\n+            assertTrue(PrimitiveClass.isPrimitiveValueType(elementType), \"should only fail to set a primitive class array element to null\");\n@@ -169,1 +171,1 @@\n-        boolean canBeNull = f.getType().isPrimaryType();\n+        boolean canBeNull = PrimitiveClass.isPrimaryType(f.getType());\n@@ -239,1 +241,1 @@\n-        assertTrue(f.getType().isPrimitiveValueType() == isPrimitiveValue);\n+        assertTrue(PrimitiveClass.isPrimitiveValueType(f.getType()) == isPrimitiveValue);\n","filename":"test\/jdk\/valhalla\/valuetypes\/MethodHandleTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -41,0 +42,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -170,2 +173,2 @@\n-            { P1,                   hash(Point.class.asValueType(), 1, 2) },\n-            { LINE1,                hash(Line.class.asValueType(), Point.makePoint(1, 2), Point.makePoint(3, 4)) },\n+            { P1,                   hash(PrimitiveClass.asValueType(Point.class), 1, 2) },\n+            { LINE1,                hash(PrimitiveClass.asValueType(Line.class), Point.makePoint(1, 2), Point.makePoint(3, 4)) },\n@@ -174,4 +177,4 @@\n-            { Point.makePoint(0,0), hash(Point.class.asValueType(), 0, 0) },\n-            { Point.default,        hash(Point.class.asValueType(), 0, 0) },\n-            { MyValue1.default,     hash(MyValue1.class.asValueType(), Point.default, null) },\n-            { new MyValue1(0, 0, null), hash(MyValue1.class.asValueType(), Point.makePoint(0,0), null) },\n+            { Point.makePoint(0,0), hash(PrimitiveClass.asValueType(Point.class), 0, 0) },\n+            { Point.default,        hash(PrimitiveClass.asValueType(Point.class), 0, 0) },\n+            { MyValue1.default,     hash(PrimitiveClass.asValueType(MyValue1.class), Point.default, null) },\n+            { new MyValue1(0, 0, null), hash(PrimitiveClass.asValueType(MyValue1.class), Point.makePoint(0,0), null) },\n@@ -200,2 +203,2 @@\n-        if (type.isPrimitiveClass()) {\n-            type = type.asValueType();\n+        if (PrimitiveClass.isPrimitiveClass(type)) {\n+            type = PrimitiveClass.asValueType(type);\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethods.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -28,1 +29,1 @@\n- * @run testng ObjectMethodsViaCondy\n+ * @run testng\/othervm ObjectMethodsViaCondy\n@@ -45,0 +46,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -71,3 +74,3 @@\n-        static final MethodType EQUALS_DESC = methodType(boolean.class, PrimitiveRecord.class.asValueType(), Object.class);\n-        static final MethodType HASHCODE_DESC = methodType(int.class, PrimitiveRecord.class.asValueType());\n-        static final MethodType TO_STRING_DESC = methodType(String.class, PrimitiveRecord.class.asValueType());\n+        static final MethodType EQUALS_DESC = methodType(boolean.class, PrimitiveClass.asValueType(PrimitiveRecord.class), Object.class);\n+        static final MethodType HASHCODE_DESC = methodType(int.class, PrimitiveClass.asValueType(PrimitiveRecord.class));\n+        static final MethodType TO_STRING_DESC = methodType(String.class, PrimitiveClass.asValueType(PrimitiveRecord.class));\n@@ -98,1 +101,1 @@\n-            builder.bootstrapMethod(methodName, TO_STRING_DESC, PrimitiveRecord.class.asValueType(), NAME_LIST, ACCESSORS);\n+            builder.bootstrapMethod(methodName, TO_STRING_DESC, PrimitiveClass.asValueType(PrimitiveRecord.class), NAME_LIST, ACCESSORS);\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethodsViaCondy.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -64,2 +66,2 @@\n-        MethodHandle mh1 = lookup.findStatic(PrimitiveTypeConversionTest.class, \"narrow\", methodType(Value.class.asValueType(), Value.ref.class));\n-        MethodHandle mh2 = mh1.asType(methodType(Value.class.asValueType(), Value.class.asValueType()));\n+        MethodHandle mh1 = lookup.findStatic(PrimitiveTypeConversionTest.class, \"narrow\", methodType(PrimitiveClass.asValueType(Value.class), Value.ref.class));\n+        MethodHandle mh2 = mh1.asType(methodType(PrimitiveClass.asValueType(Value.class), PrimitiveClass.asValueType(Value.class)));\n@@ -82,1 +84,1 @@\n-        MethodHandle mh = lookup.findStatic(PrimitiveTypeConversionTest.class, \"widen\", methodType(Value.ref.class, Value.class.asValueType()));\n+        MethodHandle mh = lookup.findStatic(PrimitiveTypeConversionTest.class, \"widen\", methodType(Value.ref.class, PrimitiveClass.asValueType(Value.class)));\n@@ -91,1 +93,1 @@\n-        MethodHandle mh2 = mh.asType(methodType(Value.class.asValueType(), Value.ref.class));\n+        MethodHandle mh2 = mh.asType(methodType(PrimitiveClass.asValueType(Value.class), Value.ref.class));\n@@ -103,2 +105,2 @@\n-        MethodHandle mh1 = lookup.findGetter(Value.class.asValueType(), \"val\", Point.class.asValueType());\n-        MethodHandle mh2 = mh1.asType(methodType(Point.ref.class, Value.class.asValueType()));\n+        MethodHandle mh1 = lookup.findGetter(PrimitiveClass.asValueType(Value.class), \"val\", PrimitiveClass.asValueType(Point.class));\n+        MethodHandle mh2 = mh1.asType(methodType(Point.ref.class, PrimitiveClass.asValueType(Value.class)));\n@@ -114,2 +116,2 @@\n-        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class.asValueType(), \"ref\", Point.ref.class);\n-        MethodHandle mh2 = mh1.asType(methodType(Point.class.asValueType(), Value.class.asValueType()));\n+        MethodHandle mh1 = MethodHandles.lookup().findGetter(PrimitiveClass.asValueType(Value.class), \"ref\", Point.ref.class);\n+        MethodHandle mh2 = mh1.asType(methodType(PrimitiveClass.asValueType(Point.class), PrimitiveClass.asValueType(Value.class)));\n@@ -124,2 +126,2 @@\n-        MethodHandle mh1 = lookup.findGetter(Value.class.asValueType(), \"val\", Point.class.asValueType());\n-        MethodHandle mh2 = mh1.asType(methodType(Point.class.asValueType(), Value.ref.class));\n+        MethodHandle mh1 = lookup.findGetter(PrimitiveClass.asValueType(Value.class), \"val\", PrimitiveClass.asValueType(Point.class));\n+        MethodHandle mh2 = mh1.asType(methodType(PrimitiveClass.asValueType(Point.class), Value.ref.class));\n@@ -136,1 +138,1 @@\n-        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class.asValueType(), \"ref\", Point.ref.class);\n+        MethodHandle mh1 = MethodHandles.lookup().findGetter(PrimitiveClass.asValueType(Value.class), \"ref\", Point.ref.class);\n@@ -149,2 +151,2 @@\n-        MethodHandle mh1 = MethodHandles.lookup().findGetter(Value.class.asValueType(), \"ref\", Point.ref.class);\n-        MethodHandle mh2 = mh1.asType(methodType(Point.class.asValueType(), Value.class.asValueType()));\n+        MethodHandle mh1 = MethodHandles.lookup().findGetter(PrimitiveClass.asValueType(Value.class), \"ref\", Point.ref.class);\n+        MethodHandle mh2 = mh1.asType(methodType(PrimitiveClass.asValueType(Point.class), PrimitiveClass.asValueType(Value.class)));\n","filename":"test\/jdk\/valhalla\/valuetypes\/PrimitiveTypeConversionTest.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -62,2 +64,2 @@\n-        Class<?> pointQType = Point.class.asValueType();\n-        Class<?> nonFlattenValueQType = NonFlattenValue.class.asValueType();\n+        Class<?> pointQType = PrimitiveClass.asValueType(Point.class);\n+        Class<?> nonFlattenValueQType = PrimitiveClass.asValueType(NonFlattenValue.class);\n@@ -110,2 +112,2 @@\n-            { QTypeDescriptorTest.class, \"toLine\", new Class<?>[] { Point.class.asValueType(), NonFlattenValue.class.asValueType()},     true},\n-            { QTypeDescriptorTest.class, \"toLine\", new Class<?>[] { Point.ref.class, NonFlattenValue.class.asValueType()}, false},\n+            { QTypeDescriptorTest.class, \"toLine\", new Class<?>[] { PrimitiveClass.asValueType(Point.class), PrimitiveClass.asValueType(NonFlattenValue.class)},     true},\n+            { QTypeDescriptorTest.class, \"toLine\", new Class<?>[] { Point.ref.class, PrimitiveClass.asValueType(NonFlattenValue.class)}, false},\n@@ -113,4 +115,4 @@\n-            { NonFlattenValue.class.asValueType(), \"point\",      null,                                                     true},\n-            { NonFlattenValue.class.asValueType(), \"pointValue\", null,                                                     true},\n-            { NonFlattenValue.class.asValueType(), \"has\",        new Class<?>[] { Point.class.asValueType(), Point.ref.class},           true},\n-            { NonFlattenValue.class.asValueType(), \"has\",        new Class<?>[] { Point.class.asValueType(), Point.class.asValueType()},               false},\n+            { PrimitiveClass.asValueType(NonFlattenValue.class), \"point\",      null,                                                     true},\n+            { PrimitiveClass.asValueType(NonFlattenValue.class), \"pointValue\", null,                                                     true},\n+            { PrimitiveClass.asValueType(NonFlattenValue.class), \"has\",        new Class<?>[] { PrimitiveClass.asValueType(Point.class), Point.ref.class},           true},\n+            { PrimitiveClass.asValueType(NonFlattenValue.class), \"has\",        new Class<?>[] { PrimitiveClass.asValueType(Point.class), PrimitiveClass.asValueType(Point.class)},               false},\n@@ -135,3 +137,3 @@\n-            { \"pointValue\", MethodType.methodType(Point.class.asValueType()),                                          true },\n-            { \"has\",        MethodType.methodType(boolean.class, Point.class.asValueType(), Point.ref.class),          true },\n-            { \"point\",      MethodType.methodType(Point.class.asValueType()),                                          false },\n+            { \"pointValue\", MethodType.methodType(PrimitiveClass.asValueType(Point.class)),                                          true },\n+            { \"has\",        MethodType.methodType(boolean.class, PrimitiveClass.asValueType(Point.class), Point.ref.class),          true },\n+            { \"point\",      MethodType.methodType(PrimitiveClass.asValueType(Point.class)),                                          false },\n@@ -139,1 +141,1 @@\n-            { \"has\",        MethodType.methodType(boolean.class, Point.ref.class, Point.class.asValueType()),          false },\n+            { \"has\",        MethodType.methodType(boolean.class, Point.ref.class, PrimitiveClass.asValueType(Point.class)),          false },\n@@ -152,1 +154,1 @@\n-            MethodHandles.lookup().findVirtual(NonFlattenValue.class.asValueType(), name, mtype);\n+            MethodHandles.lookup().findVirtual(PrimitiveClass.asValueType(NonFlattenValue.class), name, mtype);\n","filename":"test\/jdk\/valhalla\/valuetypes\/QTypeDescriptorTest.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -44,2 +46,2 @@\n-        Object o = Point.class.asValueType().newInstance();\n-        assertEquals(o.getClass(), Point.class.asPrimaryType());\n+        Object o = PrimitiveClass.asValueType(Point.class).newInstance();\n+        assertEquals(o.getClass(), PrimitiveClass.asPrimaryType(Point.class));\n@@ -49,1 +51,1 @@\n-        assertEquals(o.getClass(), Point.class.asPrimaryType());\n+        assertEquals(o.getClass(), PrimitiveClass.asPrimaryType(Point.class));\n@@ -71,4 +73,4 @@\n-        checkInstanceField(Line.class.asValueType(), \"p1\", Point.class.asValueType());\n-        checkInstanceField(Line.class.asValueType(), \"p2\", Point.class.asValueType());\n-        checkInstanceMethod(Line.class.asValueType(), \"p1\", Point.class.asValueType());\n-        checkInstanceMethod(Line.class.asValueType(), \"p2\", Point.class.asValueType());\n+        checkInstanceField(PrimitiveClass.asValueType(Line.class), \"p1\", PrimitiveClass.asValueType(Point.class));\n+        checkInstanceField(PrimitiveClass.asValueType(Line.class), \"p2\", PrimitiveClass.asValueType(Point.class));\n+        checkInstanceMethod(PrimitiveClass.asValueType(Line.class), \"p1\", PrimitiveClass.asValueType(Point.class));\n+        checkInstanceMethod(PrimitiveClass.asValueType(Line.class), \"p2\", PrimitiveClass.asValueType(Point.class));\n@@ -79,4 +81,4 @@\n-        checkInstanceField(NonFlattenValue.class.asValueType(), \"nfp\", Point.ref.class);\n-        checkInstanceMethod(NonFlattenValue.class.asValueType(), \"pointValue\", Point.class.asValueType());\n-        checkInstanceMethod(NonFlattenValue.class.asValueType(), \"point\", Point.ref.class);\n-        checkInstanceMethod(NonFlattenValue.class.asValueType(), \"has\", boolean.class, Point.class.asValueType(), Point.ref.class);\n+        checkInstanceField(PrimitiveClass.asValueType(NonFlattenValue.class), \"nfp\", Point.ref.class);\n+        checkInstanceMethod(PrimitiveClass.asValueType(NonFlattenValue.class), \"pointValue\", PrimitiveClass.asValueType(Point.class));\n+        checkInstanceMethod(PrimitiveClass.asValueType(NonFlattenValue.class), \"point\", Point.ref.class);\n+        checkInstanceMethod(PrimitiveClass.asValueType(NonFlattenValue.class), \"has\", boolean.class, PrimitiveClass.asValueType(Point.class), Point.ref.class);\n","filename":"test\/jdk\/valhalla\/valuetypes\/Reflection.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -83,1 +85,1 @@\n-        Class<? extends Cons> cls = (Class<? extends Cons>)DefaultConstructor.class.asValueType();\n+        Class<? extends Cons> cls = (Class<? extends Cons>)PrimitiveClass.asValueType(DefaultConstructor.class);\n@@ -92,1 +94,1 @@\n-        Class<? extends Cons> cls = (Class<? extends Cons>)ConstructorWithArgs.class.asValueType();\n+        Class<? extends Cons> cls = (Class<? extends Cons>)PrimitiveClass.asValueType(ConstructorWithArgs.class);\n@@ -150,1 +152,1 @@\n-            lookup.findConstructor(DefaultConstructor.class.asValueType(), mtype);\n+            lookup.findConstructor(PrimitiveClass.asValueType(DefaultConstructor.class), mtype);\n@@ -157,1 +159,1 @@\n-        assertEquals(minfo.getDeclaringClass(), c.asPrimaryType());\n+        assertEquals(minfo.getDeclaringClass(), PrimitiveClass.asPrimaryType(c));\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryMethodHandleTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -104,1 +106,1 @@\n-        assertEquals(clz.isPrimitiveClass(), isPrimitiveClass, \"primitive class: \" + clz);\n+        assertEquals(PrimitiveClass.isPrimitiveClass(clz), isPrimitiveClass, \"primitive class: \" + clz);\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,2 @@\n+# Reflection methods for primitive classes are in PrimitiveClass instead of java.lang.class\n+modules = java.base\/jdk.internal.value\n","filename":"test\/jdk\/valhalla\/valuetypes\/TEST.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -79,1 +81,1 @@\n-        assertTrue(f1.getType() == EmptyValue.class.asValueType());\n+        assertTrue(f1.getType() == PrimitiveClass.asValueType(EmptyValue.class));\n@@ -93,1 +95,1 @@\n-        assertTrue(f1.getType() == EmptyValue.class.asValueType());\n+        assertTrue(f1.getType() == PrimitiveClass.asValueType(EmptyValue.class));\n@@ -98,1 +100,1 @@\n-        assertTrue(f2.getType() == EmptyValue.class.asValueType());\n+        assertTrue(f2.getType() == PrimitiveClass.asValueType(EmptyValue.class));\n@@ -111,1 +113,1 @@\n-        MethodHandle mh = MethodHandles.lookup().findGetter(Value.class.asValueType(), \"empty\", EmptyValue.class.asValueType());\n+        MethodHandle mh = MethodHandles.lookup().findGetter(PrimitiveClass.asValueType(Value.class), \"empty\", PrimitiveClass.asValueType(EmptyValue.class));\n@@ -119,1 +121,1 @@\n-        MethodHandle getter = MethodHandles.lookup().findGetter(MutableValue.class, \"empty\", EmptyValue.class.asValueType());\n+        MethodHandle getter = MethodHandles.lookup().findGetter(MutableValue.class, \"empty\", PrimitiveClass.asValueType(EmptyValue.class));\n@@ -123,1 +125,1 @@\n-        MethodHandle getter1 = MethodHandles.lookup().findGetter(MutableValue.class, \"vempty\", EmptyValue.class.asValueType());\n+        MethodHandle getter1 = MethodHandles.lookup().findGetter(MutableValue.class, \"vempty\", PrimitiveClass.asValueType(EmptyValue.class));\n@@ -127,1 +129,1 @@\n-        MethodHandle setter = MethodHandles.lookup().findSetter(MutableValue.class, \"empty\", EmptyValue.class.asValueType());\n+        MethodHandle setter = MethodHandles.lookup().findSetter(MutableValue.class, \"empty\", PrimitiveClass.asValueType(EmptyValue.class));\n@@ -132,1 +134,1 @@\n-        MethodHandle setter1 = MethodHandles.lookup().findSetter(MutableValue.class, \"vempty\", EmptyValue.class.asValueType());\n+        MethodHandle setter1 = MethodHandles.lookup().findSetter(MutableValue.class, \"vempty\", PrimitiveClass.asValueType(EmptyValue.class));\n@@ -155,1 +157,1 @@\n-        MethodHandle mh = MethodHandles.lookup().findSetter(MutableValue.class, \"empty\", EmptyValue.class.asValueType());\n+        MethodHandle mh = MethodHandles.lookup().findSetter(MutableValue.class, \"empty\", PrimitiveClass.asValueType(EmptyValue.class));\n","filename":"test\/jdk\/valhalla\/valuetypes\/UninitializedValueTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -42,1 +44,1 @@\n-            new Object[] { Point.class.asValueType(), Point.default },\n+            new Object[] { PrimitiveClass.asValueType(Point.class), Point.default },\n@@ -54,1 +56,1 @@\n-        assertTrue(elementType.isPrimaryType() || defaultValue != null);\n+        assertTrue(PrimitiveClass.isPrimaryType(elementType) || defaultValue != null);\n@@ -61,2 +63,2 @@\n-        assertTrue(arrayType.isPrimaryType());\n-        assertEquals(arrayType.asPrimaryType(), arrayType);\n+        assertTrue(PrimitiveClass.isPrimaryType(arrayType));\n+        assertEquals(PrimitiveClass.asPrimaryType(arrayType), arrayType);\n@@ -111,3 +113,3 @@\n-        if (componentType.isPrimitiveClass()) {\n-            Object[] qArray = (Object[]) Array.newInstance(componentType.asValueType(), 0);\n-            Object[] lArray = (Object[]) Array.newInstance(componentType.asPrimaryType(), 0);\n+        if (PrimitiveClass.isPrimitiveClass(componentType)) {\n+            Object[] qArray = (Object[]) Array.newInstance(PrimitiveClass.asValueType(componentType), 0);\n+            Object[] lArray = (Object[]) Array.newInstance(PrimitiveClass.asPrimaryType(componentType), 0);\n@@ -130,1 +132,1 @@\n-        sb.append(c.isPrimitiveValueType() ? \"Q\" : \"L\").append(c.getName()).append(\";\");\n+        sb.append(PrimitiveClass.isPrimitiveValueType(c) ? \"Q\" : \"L\").append(c.getName()).append(\";\");\n@@ -157,1 +159,1 @@\n-        if (!componentType.isPrimitiveValueType()) {\n+        if (!PrimitiveClass.isPrimitiveValueType(componentType)) {\n@@ -176,1 +178,1 @@\n-        assertTrue(componentType.isPrimitiveClass());\n+        assertTrue(PrimitiveClass.isPrimitiveClass(componentType));\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueArray.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -46,1 +48,1 @@\n-            new Object[] { Point.class.asValueType(),     ClassDesc.ofDescriptor(\"Q\" + NAME + \";\"), NAME},\n+            new Object[] { PrimitiveClass.asValueType(Point.class),     ClassDesc.ofDescriptor(\"Q\" + NAME + \";\"), NAME},\n@@ -74,1 +76,1 @@\n-            new Object[] { Point.class.asValueType() },\n+            new Object[] { PrimitiveClass.asValueType(Point.class) },\n@@ -95,1 +97,1 @@\n-                new Object[] { Point.class.asValueType(),         \"Q\" + NAME + \";\"},\n+                new Object[] { PrimitiveClass.asValueType(Point.class),         \"Q\" + NAME + \";\"},\n@@ -111,1 +113,1 @@\n-        assertTrue(cd.isPrimitiveValueType() == type.isPrimitiveValueType());\n+        assertTrue(cd.isPrimitiveValueType() == PrimitiveClass.isPrimitiveValueType(type));\n","filename":"test\/jdk\/valhalla\/valuetypes\/ValueConstantDesc.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -8,0 +9,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -14,1 +17,1 @@\n-            Class<? extends Foo.ref> cFooRef = Foo.class.asValueType(); \/\/ Error\n+            Class<? extends Foo.ref> cFooRef = PrimitiveClass.asValueType(Foo.class); \/\/ Error\n@@ -31,1 +34,1 @@\n-            Class<? extends Bar.ref> cBarRef = Bar.class.asValueType(); \/\/ Error\n+            Class<? extends Bar.ref> cBarRef = PrimitiveClass.asValueType(Bar.class); \/\/ Error\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,4 +1,4 @@\n-ClassLiteralTypingNegativeTest.java:14:69: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ?>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n-ClassLiteralTypingNegativeTest.java:17:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n-ClassLiteralTypingNegativeTest.java:31:69: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ?>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n-ClassLiteralTypingNegativeTest.java:34:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n+ClassLiteralTypingNegativeTest.java:17:74: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ?>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n+ClassLiteralTypingNegativeTest.java:20:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Foo.ref>)\n+ClassLiteralTypingNegativeTest.java:34:74: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ?>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n+ClassLiteralTypingNegativeTest.java:37:30: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Class<compiler.misc.type.captureof: 1, ? extends java.lang.Object&ClassLiteralTypingNegativeTest.I>, java.lang.Class<? extends ClassLiteralTypingNegativeTest.Bar.ref>)\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ClassLiteralTypingNegativeTest.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -33,0 +34,2 @@\n+import jdk.internal.value.PrimitiveClass;\n+\n@@ -47,1 +50,1 @@\n-        if (ValDefault.val.class != new ValDefault().getClass().asValueType()) {\n+        if (ValDefault.val.class != PrimitiveClass.asValueType(new ValDefault().getClass())) {\n@@ -59,1 +62,1 @@\n-        if (TestReflectiveMirrors.ValDefault.val.class != new ValDefault().getClass().asValueType()) {\n+        if (TestReflectiveMirrors.ValDefault.val.class != PrimitiveClass.asValueType(new ValDefault().getClass())) {\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/TestReflectiveMirrors.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -34,0 +35,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -66,1 +68,1 @@\n-        if (!members[1].equals(Inner.class.asPrimaryType()))\n+        if (!members[1].equals(PrimitiveClass.asPrimaryType(Inner.class)))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/UnifiedPrimitiveClassNestHostTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @modules java.base\/jdk.internal.value\n@@ -33,0 +34,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -49,1 +51,1 @@\n-            return List.of(Value.class.asValueType(), i, d, s, l);\n+            return List.of(PrimitiveClass.asValueType(Value.class), i, d, s, l);\n@@ -58,1 +60,1 @@\n-            return String.format(\"%s@%s\", Value.class.asValueType().getName(), Integer.toHexString(localHashCode()));\n+            return String.format(\"%s@%s\", PrimitiveClass.asValueType(Value.class).getName(), Integer.toHexString(localHashCode()));\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueBootstrapMethodsTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}