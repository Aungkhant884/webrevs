{"files":[{"patch":"@@ -81,0 +81,1 @@\n+import jdk.internal.value.PrimitiveClass;\n@@ -206,2 +207,0 @@\n-    private static final int VALUE_CLASS     = 0x00000040;\n-    private static final int PRIMITIVE_CLASS = 0x00000800;\n@@ -637,1 +636,1 @@\n-        return (this.getModifiers() & PRIMITIVE_CLASS) != 0;\n+        return (this.getModifiers() & PrimitiveClass.PRIMITIVE_CLASS) != 0;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -971,1 +971,1 @@\n-              mv.visitMethodInsn(INVOKESTATIC,\n+                mv.visitMethodInsn(INVOKESTATIC,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -541,1 +541,3 @@\n-    StackWalker newStackWalkerInstance(Set<StackWalker.Option> options, ContinuationScope contScope, Continuation continuation);\n+    StackWalker newStackWalkerInstance(Set<StackWalker.Option> options,\n+                                       ContinuationScope contScope,\n+                                       Continuation continuation);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.lang.reflect.Method;\n-\n@@ -38,2 +36,4 @@\n-    \/\/ ACC_PRIMITIVE from JEP 401\n-    private static final int PRIMITIVE_CLASS = 0x00000800;\n+    \/**\n+     * ACC_PRIMITIVE modifier defined by JEP 401. Subject to change.\n+     *\/\n+    public static final int PRIMITIVE_CLASS = 0x00000800;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/value\/PrimitiveClass.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/BootstrapMethodJumboArgsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @modules java.base\/jdk.internal.value:+open\n+ * @modules java.base\/jdk.internal.value\n","filename":"test\/jdk\/valhalla\/valuetypes\/ObjectMethodsViaCondy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-modules = java.base\/jdk.internal.value:+open\n+modules = java.base\/jdk.internal.value\n","filename":"test\/jdk\/valhalla\/valuetypes\/TEST.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-\n","filename":"test\/jdk\/valhalla\/valuetypes\/UninitializedValueTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @modules java.base\/jdk.internal.value:+open\n+ * @modules java.base\/jdk.internal.value\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/UnifiedPrimitiveClassNestHostTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules java.base\/jdk.internal.value:+open\n+ * @modules java.base\/jdk.internal.value\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValueBootstrapMethodsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}