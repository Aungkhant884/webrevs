{"files":[{"patch":"@@ -360,1 +360,0 @@\n-            \/\/ this is a hack just for the experimental patch\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1832,1 +1832,1 @@\n-                if (s.hasTag(ERROR) || s.hasTag(BOT) && !t.isNonNullable())\n+                if (s.hasTag(ERROR) || s.hasTag(BOT) && (!t.hasImplicitConstructor() || !t.isNonNullable()))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4221,1 +4221,1 @@\n-            JCFieldAccess elemClassExpr = make.Select(make.Ident(tree.elemtype.type.tsym.getQualifiedName()).setType(tree.elemtype.type), elemClass);\n+            JCFieldAccess elemClassExpr = make.Select(make.Ident(tree.elemtype.type.tsym).setType(tree.elemtype.type), elemClass);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1079,2 +1079,2 @@\n-                boolean shouldBeQDesc = emitQDesc && selfType.hasImplicitConstructor();\n-                selfType = shouldBeQDesc ? selfType.addMetadata(new TypeMetadata.NullMarker(JCNullableTypeExpression.NullMarker.NOT_NULL)) : selfType;\n+                selfType = selfType.hasImplicitConstructor() ?\n+                        selfType.addMetadata(new TypeMetadata.NullMarker(JCNullableTypeExpression.NullMarker.NOT_NULL)) : selfType;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -201,1 +201,0 @@\n-                boolean emitQ = emitQDesc && currentClass.sym.type.hasImplicitConstructor();\n@@ -204,1 +203,1 @@\n-                                emitQ ?\n+                                currentClass.sym.type.hasImplicitConstructor() ?\n@@ -216,1 +215,1 @@\n-                            emitQ ?\n+                            currentClass.sym.type.hasImplicitConstructor() ?\n@@ -221,1 +220,1 @@\n-                    rhs.type = emitQ ?\n+                    rhs.type = currentClass.sym.type.hasImplicitConstructor() ?\n@@ -298,1 +297,1 @@\n-                if (emitQDesc && withField.type.hasImplicitConstructor()) {\n+                if (withField.type.hasImplicitConstructor()) {\n@@ -377,1 +376,0 @@\n-            \/\/apply.type = apply.type.addMetadata(new TypeMetadata.NullMarker(JCTree.JCNullableTypeExpression.NullMarker.NOT_NULL));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/TransValues.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -5761,1 +5761,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,13 @@\n-        VT[] a3 = new VT[42];\n-        VT[] a4 = new VT[42];\n+        VT[] a1;\n+        VT[] a2;\n+        VT![] a3;\n+        VT![] a4;\n+\n+        public implicit VT();\n+\n+        VT(boolean non_implicit) {\n+            a1 = new VT[42];\n+            a2 = new VT[42];\n+            a3 = new VT![42];\n+            a4 = new VT![42];\n+        }\n@@ -49,2 +60,2 @@\n-                                            Paths.get(System.getProperty(\"test.classes\"),\n-                                                \"ArrayCreationWithQuestion$VT.class\").toString() };\n+                Paths.get(System.getProperty(\"test.classes\"),\n+                        \"ArrayCreationWithQuestion$VT.class\").toString() };\n@@ -52,4 +63,5 @@\n-        \"         6: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n-        \"        22: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n-         });\n-     }\n+                \"         6: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n+                \"        17: anewarray     #1                  \/\/ class ArrayCreationWithQuestion$VT\",\n+                \"        33: invokestatic  #16                 \/\/ Method java\/lang\/reflect\/Array.newInstance:(Ljava\/lang\/Class;I)Ljava\/lang\/Object;\",\n+                \"        52: invokestatic  #16                 \/\/ Method java\/lang\/reflect\/Array.newInstance:(Ljava\/lang\/Class;I)Ljava\/lang\/Object;\",\n+        });\n@@ -57,1 +69,3 @@\n-     void runCheck(String [] params, String [] expectedOut) {\n+    }\n+\n+    void runCheck(String [] params, String [] expectedOut) {\n@@ -72,3 +86,3 @@\n-         if (errors > 0) {\n-             throw new AssertionError(\"Unexpected javap output: \" + out);\n-         }\n+        if (errors > 0) {\n+            throw new AssertionError(\"Unexpected javap output: \" + out);\n+        }\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/ArrayCreationWithQuestion.java","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-CheckClassfileFlagsTest.java:15:9: compiler.err.cant.access: ValueWithInvalidFlags, (compiler.misc.bad.class.file.header: ValueWithInvalidFlags.class, (compiler.misc.bad.signature: \"QValueWithInvalidFlags;\"))\n+CheckClassfileFlagsTest.java:15:9: compiler.err.cant.access: ValueWithInvalidFlags, (compiler.misc.bad.class.file.header: ValueWithInvalidFlags.class, (compiler.misc.bad.class.signature: \"QValueWithInvalidFlags;\"))\n","filename":"test\/langtools\/tools\/javac\/valhalla\/value-objects\/lworld-values\/classfile_flags\/CheckClassfileFlagsTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}