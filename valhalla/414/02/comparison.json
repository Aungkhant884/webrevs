{"files":[{"patch":"@@ -258,1 +258,1 @@\n-                                       CodeEmitInfo* info, bool is_inline_type) {\n+                                       CodeEmitInfo* info, bool is_null_free) {\n@@ -263,1 +263,1 @@\n-  _is_inline_type = is_inline_type;\n+  _is_null_free = is_null_free;\n@@ -273,1 +273,1 @@\n-  if (_is_inline_type) {\n+  if (_is_null_free) {\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-                                       CodeEmitInfo* info, bool is_inline_type) {\n+                                       CodeEmitInfo* info, bool is_null_free) {\n@@ -318,1 +318,1 @@\n-  _is_inline_type = is_inline_type;\n+  _is_null_free = is_null_free;\n@@ -327,1 +327,1 @@\n-  if (_is_inline_type) {\n+  if (_is_null_free) {\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-  bool           _is_inline_type;\n+  bool           _is_null_free;\n@@ -389,1 +389,1 @@\n-  NewObjectArrayStub(LIR_Opr klass_reg, LIR_Opr length, LIR_Opr result, CodeEmitInfo* info, bool is_inline_type);\n+  NewObjectArrayStub(LIR_Opr klass_reg, LIR_Opr length, LIR_Opr result, CodeEmitInfo* info, bool is_null_free);\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-    ciKlass* actual_klass = value()->declared_type()->as_klass();\n+    ciKlass* actual_klass = value()->declared_type()->unwrap()->as_klass();\n@@ -293,1 +293,1 @@\n-  return ciArrayKlass::make(klass());\n+  return ciArrayKlass::make(klass(), is_null_free());\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"oops\/inlineKlass.inline.hpp\"\n@@ -107,2 +108,0 @@\n-  } else if (element_type->flatten_array()) {\n-    return ciFlatArrayKlass::make(element_type->as_klass());\n@@ -110,1 +109,29 @@\n-    return ciObjArrayKlass::make(element_type->as_klass());\n+    return make(element_type->as_klass(), element_type->is_null_free());\n+  }\n+}\n+\n+ciArrayKlass* ciArrayKlass::make(ciKlass* klass, bool null_free) {\n+  if (null_free) {\n+    if (klass->is_loaded()) {\n+      bool is_array_flattened = false;\n+      GUARDED_VM_ENTRY(\n+        EXCEPTION_CONTEXT;\n+        Klass* ak = InlineKlass::cast(klass->get_Klass())->null_free_inline_array_klass(THREAD);\n+        if (HAS_PENDING_EXCEPTION) {\n+          CLEAR_PENDING_EXCEPTION;\n+        } else {\n+          if (ak != NULL && ak->is_flatArray_klass()) {\n+            is_array_flattened = true;\n+          }\n+        }\n+      )\n+      if (is_array_flattened) {\n+        return ciFlatArrayKlass::make(klass);\n+      } else {\n+        return ciObjArrayKlass::make(klass, true);\n+      }\n+    } else {\n+      return ciEnv::unloaded_ciobjarrayklass();\n+    }\n+  } else {\n+    return ciObjArrayKlass::make(klass);\n","filename":"src\/hotspot\/share\/ci\/ciArrayKlass.cpp","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+  static ciArrayKlass* make(ciKlass* klass, bool null_free);\n","filename":"src\/hotspot\/share\/ci\/ciArrayKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -478,1 +478,2 @@\n-      return ciArrayKlass::make(elem_klass);\n+      bool null_free_array = sym->is_Q_array_signature() && sym->char_at(1) == JVM_SIGNATURE_INLINE_TYPE;\n+      return ciArrayKlass::make(elem_klass, null_free_array);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/inlineKlass.inline.hpp\"\n@@ -132,1 +133,0 @@\n-  assert(element_klass->is_inlinetype(), \"element type must be an inline type\");\n@@ -134,0 +134,1 @@\n+  assert(element_klass->is_inlinetype(), \"element type must be an inline type\");\n@@ -136,1 +137,1 @@\n-    Klass* array = element_klass->get_Klass()->array_klass(THREAD);\n+    Klass* array = InlineKlass::cast(element_klass->get_Klass())->null_free_inline_array_klass(THREAD);\n","filename":"src\/hotspot\/share\/ci\/ciFlatArrayKlass.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+  friend class ciArrayKlass;\n","filename":"src\/hotspot\/share\/ci\/ciKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"oops\/inlineKlass.inline.hpp\"\n@@ -138,1 +139,1 @@\n-ciObjArrayKlass* ciObjArrayKlass::make_impl(ciKlass* element_klass) {\n+ciObjArrayKlass* ciObjArrayKlass::make_impl(ciKlass* element_klass, bool null_free) {\n@@ -142,1 +143,7 @@\n-    Klass* array = element_klass->get_Klass()->array_klass(THREAD);\n+    Klass* array;\n+    if (null_free) {\n+      assert(element_klass->get_Klass()->is_inline_klass(), \"Only inline classes can have null free arrays\");\n+      array = InlineKlass::cast(element_klass->get_Klass())->null_free_inline_array_klass(THREAD);\n+    } else {\n+      array = element_klass->get_Klass()->array_klass(THREAD);\n+    }\n@@ -165,2 +172,2 @@\n-ciObjArrayKlass* ciObjArrayKlass::make(ciKlass* element_klass) {\n-  GUARDED_VM_ENTRY(return make_impl(element_klass);)\n+ciObjArrayKlass* ciObjArrayKlass::make(ciKlass* element_klass, bool null_free) {\n+  GUARDED_VM_ENTRY(return make_impl(element_klass, null_free);)\n","filename":"src\/hotspot\/share\/ci\/ciObjArrayKlass.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  static ciObjArrayKlass* make_impl(ciKlass* element_klass);\n+  static ciObjArrayKlass* make_impl(ciKlass* element_klass, bool null_free);\n@@ -75,1 +75,1 @@\n-  static ciObjArrayKlass* make(ciKlass* element_klass);\n+  static ciObjArrayKlass* make(ciKlass* element_klass, bool null_free = false);\n","filename":"src\/hotspot\/share\/ci\/ciObjArrayKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,1 @@\n-        Asserts.assertNotNull(ex, \"An ICCE should have been thrown\");\n-        Asserts.assertEquals(ex.getClass(), IncompatibleClassChangeError.class, \"Error is not an ICCE\");\n+        Asserts.assertNull(ex, \"No error should have been thrown\");\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/MultiANewArrayTest\/MultiANewArrayTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}