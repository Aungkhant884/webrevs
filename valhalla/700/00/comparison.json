{"files":[{"patch":"@@ -3325,1 +3325,1 @@\n-      recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_PERMITS_VALUE;\n+      recognized_modifiers |= JVM_ACC_IDENTITY | JVM_ACC_PRIMITIVE |  JVM_ACC_VALUE | JVM_ACC_PERMITS_VALUE;\n@@ -6181,1 +6181,1 @@\n-    recognized_modifiers |= JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_PERMITS_VALUE;\n+    recognized_modifiers |= JVM_ACC_IDENTITY |JVM_ACC_PRIMITIVE | JVM_ACC_VALUE | JVM_ACC_PERMITS_VALUE;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3398,2 +3398,2 @@\n-  \/\/ Remember to strip ACC_SUPER bit\n-  return (access & (~JVM_ACC_SUPER)) & JVM_ACC_WRITTEN_FLAGS;\n+  \/\/ Do not strip ACC_SUPER, its ACC_IDENTITY now\n+  return access & JVM_ACC_WRITTEN_FLAGS;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -206,0 +206,1 @@\n+    private static final int IDENTITY_CLASS  = 0x00000020;\n@@ -208,1 +209,1 @@\n-    private static final int PRIMITIVE_CLASS = 0x00000800;\n+    private static final int PRIMITIVE_CLASS = 0x00000800;  \/\/ Not in JVMS spec\n@@ -240,9 +241,3 @@\n-        String s = isPrimitive() ? \"\" : \"class \";\n-        if (isInterface()) {\n-            s = \"interface \";\n-        }\n-        if (isValue()) {\n-            s = \"value \";\n-        }\n-        if (isPrimitiveClass()) {\n-            s = \"primitive \";\n+        String s = getName();\n+        if (isPrimitive()) {\n+            return s;\n@@ -251,3 +246,9 @@\n-        s = s.concat(getName());\n-        if (isPrimitiveClass() && isPrimaryType()) {\n-            s = s.concat(\".ref\");\n+        \/\/ Prepend type of class\n+        s = (isInterface() ? \"interface \" : \"class \").concat(s);\n+        if (isValue()) {\n+            \/\/ prepend value class type\n+            s = (isPrimitiveClass() ? \"primitive \" : \"value \").concat(s);\n+            if (isPrimitiveClass() && isPrimaryType()) {\n+                \/\/ Append .ref\n+                s = s.concat(\".ref\");\n+            }\n@@ -255,0 +256,1 @@\n+\n@@ -632,0 +634,11 @@\n+    \/**\n+     * Returns {@code true} if this class is an identity class.\n+     *\n+     * @return {@code true} if this class is an identity class;\n+     * otherwise {@code false}\n+     * @since Valhalla\n+     *\/\n+    public boolean isIdentity() {\n+        return (this.getModifiers() & IDENTITY_CLASS) != 0;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":26,"deletions":13,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 4109635\n-   @summary VM adds ACC_SUPER bit to access flags of a class. This must\n-            be stripped by the Class.getModifiers method, or else this\n-            shows up as though the class is synchronized and that doesn't\n-            make any sense.\n-   @author Anand Palaniswamy\n- *\/\n-public class StripACC_SUPER {\n-    public static void main(String[] args) throws Exception {\n-        int access = StripACC_SUPER.class.getModifiers();\n-        if (java.lang.reflect.Modifier.isSynchronized(access))\n-            throw new Exception(\"ACC_SUPER bit is not being stripped\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Class\/getModifiers\/StripACC_SUPER.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-public class StaticFactoryTest {\n+public final identity class StaticFactoryTest {\n@@ -46,0 +46,13 @@\n+\n+    static final identity class SimpleIdentity {\n+        public final int x;\n+\n+        SimpleIdentity() {\n+            x = -1;\n+        }\n+\n+        public SimpleIdentity(int x) {\n+            this.x = x;\n+        }\n+    }\n+\n@@ -73,2 +86,3 @@\n-                new Object[] { SimplePrimitive.class, true },\n-                new Object[] { SimpleValue.class, false },\n+                new Object[] { SimpleIdentity.class, true, false, false },\n+                new Object[] { SimplePrimitive.class, false, true, true },\n+                new Object[] { SimpleValue.class, false, true, false },\n@@ -79,1 +93,2 @@\n-    public void testConstructor(Class<?> c, boolean isPrimitiveClass) throws ReflectiveOperationException {\n+    public void testConstructor(Class<?> c, boolean isIdentityClass,\n+                                boolean isValueClass, boolean isPrimitiveClass) throws ReflectiveOperationException {\n@@ -82,0 +97,1 @@\n+        System.out.printf(\"cn: %s, mod: 0x%04X%n\", cn, c.getModifiers());\n@@ -83,2 +99,3 @@\n-        assertTrue(clz.isValue());\n-        assertTrue(clz.isPrimitiveClass() == isPrimitiveClass);\n+        assertEquals(clz.isIdentity(), isIdentityClass, \"identity class\");\n+        assertEquals(clz.isValue(), isValueClass, \"value class\");\n+        assertEquals(clz.isPrimitiveClass(), isPrimitiveClass, \"primitive class\");\n@@ -97,2 +114,2 @@\n-            if (Modifier.isStatic(m.getModifiers())) {\n-                assertFalse(m.getName().equals(\"<init>\"));\n+            if (Modifier.isStatic(m.getModifiers()) && \"<init>\".equals(m.getName())) {\n+                assertTrue(isIdentityClass, \"<init> method is not in an identity class\");\n","filename":"test\/jdk\/valhalla\/valuetypes\/StaticFactoryTest.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"}]}