{"files":[{"patch":"@@ -2676,1 +2676,0 @@\n-                        case \"clone\":\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2027,1 +2027,1 @@\n-            if (m.name == names.clone || m.name == names.finalize) {\n+            if (m.name == names.finalize) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -694,1 +694,0 @@\n-            final boolean isPrimitiveClass = (tree.mods.flags & Flags.PRIMITIVE_CLASS) != 0;\n@@ -724,3 +723,0 @@\n-                    if (isPrimitiveClass && it.tsym == syms.cloneableType.tsym) {\n-                        log.error(tree, Errors.PrimitiveClassMustNotImplementCloneable(ct));\n-                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3957,4 +3957,0 @@\n-# 0: type\n-compiler.err.primitive.class.must.not.implement.cloneable=\\\n-    The primitive class {0} attempts to implement the incompatible interface Cloneable\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n-    public Object clone() {\n-        return this;\n-    }\n+    public void finalize() {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassMayNotOverride.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,27 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.primitive.class.must.not.implement.cloneable\n-\n-primitive class Primitive implements Cloneable {\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PrimitiveClassMustNotImplementCloneable.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -1,21 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @summary Value types do not support clone\n- *\n- * @compile\/fail\/ref=CheckClone.out -XDrawDiagnostics CheckClone.java\n- *\/\n-\n-final primitive class CheckClone {\n-    final primitive class InnerValue {\n-        void foo(InnerValue iv) {\n-            iv.clone();\n-            clone();\n-        }\n-    }\n-    void foo(CheckClone v) {\n-        v.clone();\n-        clone();\n-    }\n-    @Override\n-    protected Object clone() { return null; }\n-}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckClone.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-CheckClone.java:11:21: compiler.err.primitive.class.does.not.support: clone\n-CheckClone.java:12:18: compiler.err.primitive.class.does.not.support: clone\n-CheckClone.java:16:16: compiler.err.primitive.class.does.not.support: clone\n-CheckClone.java:17:14: compiler.err.primitive.class.does.not.support: clone\n-CheckClone.java:20:22: compiler.err.value.class.may.not.override: clone\n-5 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckClone.out","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -2,1 +2,0 @@\n-CheckObjectMethodsUsage.java:12:19: compiler.err.value.class.may.not.override: clone\n@@ -14,1 +13,0 @@\n-CheckObjectMethodsUsage.java:26:20: compiler.err.primitive.class.does.not.support: clone\n@@ -17,1 +15,1 @@\n-14 errors\n+12 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckObjectMethodsUsage.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-            clone();\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSync.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-CheckSync.java:24:18: compiler.err.primitive.class.does.not.support: clone\n+CheckSync.java:31:17: compiler.err.primitive.class.does.not.support: wait\n@@ -9,0 +9,1 @@\n+CheckSync.java:33:18: compiler.warn.has.been.deprecated.for.removal: java.lang.Integer(int), java.lang.Integer\n@@ -10,1 +11,1 @@\n-CheckSync.java:34:18: compiler.warn.has.been.deprecated.for.removal: java.lang.Integer(int), java.lang.Integer\n+CheckSync.java:34:18: compiler.warn.has.been.deprecated.for.removal: java.lang.Long(long), java.lang.Long\n@@ -12,1 +13,0 @@\n-CheckSync.java:35:18: compiler.warn.has.been.deprecated.for.removal: java.lang.Long(long), java.lang.Long\n@@ -15,3 +15,2 @@\n-CheckSync.java:37:17: compiler.err.primitive.class.does.not.support: wait\n-CheckSync.java:38:19: compiler.err.primitive.class.does.not.support: notify\n-CheckSync.java:39:22: compiler.err.primitive.class.does.not.support: notifyAll\n+CheckSync.java:37:19: compiler.err.primitive.class.does.not.support: notify\n+CheckSync.java:38:22: compiler.err.primitive.class.does.not.support: notifyAll\n@@ -20,2 +19,2 @@\n-15 errors\n-2 warnings\n+14 errors\n+2 warnings\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/CheckSync.out","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"}]}