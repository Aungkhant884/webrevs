{"files":[{"patch":"@@ -2732,0 +2732,1 @@\n+  \/\/ Allocate a new buffered inline type only if a new one is not returned\n@@ -2741,1 +2742,0 @@\n-\n@@ -2744,15 +2744,11 @@\n-  Node* mask2 = MakeConX(-2);\n-  Node* masked2 = transform_later(new AndXNode(cast, mask2));\n-  Node* rawklassptr = transform_later(new CastX2PNode(masked2));\n-  Node* klass_node = transform_later(new CheckCastPPNode(allocation_ctl, rawklassptr, TypeKlassPtr::OBJECT_OR_NULL));\n-\n-  Node* slowpath_bol = NULL;\n-  Node* top_adr = NULL;\n-  Node* old_top = NULL;\n-  Node* new_top = NULL;\n-  if (UseTLAB) {\n-    Node* end_adr = NULL;\n-    set_eden_pointers(top_adr, end_adr);\n-    Node* end = make_load(ctl, mem, end_adr, 0, TypeRawPtr::BOTTOM, T_ADDRESS);\n-    old_top = new LoadPNode(ctl, mem, top_adr, TypeRawPtr::BOTTOM, TypeRawPtr::BOTTOM, MemNode::unordered);\n-    transform_later(old_top);\n+  \/\/ Try to allocate a new buffered inline instance either from TLAB or eden space\n+  Node* needgc_ctrl = NULL; \/\/ needgc means slowcase, i.e. allocation failed\n+  CallLeafNoFPNode* handler_call;\n+  const bool alloc_in_place = (UseTLAB || Universe::heap()->supports_inline_contig_alloc());\n+  if (alloc_in_place) {\n+    Node* fast_oop_ctrl = NULL;\n+    Node* fast_oop_rawmem = NULL;\n+    Node* mask2 = MakeConX(-2);\n+    Node* masked2 = transform_later(new AndXNode(cast, mask2));\n+    Node* rawklassptr = transform_later(new CastX2PNode(masked2));\n+    Node* klass_node = transform_later(new CheckCastPPNode(allocation_ctl, rawklassptr, TypeKlassPtr::OBJECT_OR_NULL));\n@@ -2761,6 +2757,25 @@\n-    new_top = new AddPNode(top(), old_top, size_in_bytes);\n-    transform_later(new_top);\n-    Node* slowpath_cmp = new CmpPNode(new_top, end);\n-    transform_later(slowpath_cmp);\n-    slowpath_bol = new BoolNode(slowpath_cmp, BoolTest::ge);\n-    transform_later(slowpath_bol);\n+    BarrierSetC2* bs = BarrierSet::barrier_set()->barrier_set_c2();\n+    Node* fast_oop = bs->obj_allocate(this, allocation_ctl, mem, allocation_ctl, size_in_bytes, io, needgc_ctrl,\n+                                      fast_oop_ctrl, fast_oop_rawmem,\n+                                      AllocateInstancePrefetchLines);\n+    \/\/ Allocation succeed, initialize buffered inline instance header firstly,\n+    \/\/ and then initialize its fields with an inline class specific handler\n+    Node* mark_node = makecon(TypeRawPtr::make((address)markWord::inline_type_prototype().value()));\n+    fast_oop_rawmem = make_store(fast_oop_ctrl, fast_oop_rawmem, fast_oop, oopDesc::mark_offset_in_bytes(), mark_node, T_ADDRESS);\n+    fast_oop_rawmem = make_store(fast_oop_ctrl, fast_oop_rawmem, fast_oop, oopDesc::klass_offset_in_bytes(), klass_node, T_METADATA);\n+    if (UseCompressedClassPointers) {\n+      fast_oop_rawmem = make_store(fast_oop_ctrl, fast_oop_rawmem, fast_oop, oopDesc::klass_gap_offset_in_bytes(), intcon(0), T_INT);\n+    }\n+    Node* fixed_block  = make_load(fast_oop_ctrl, fast_oop_rawmem, klass_node, in_bytes(InstanceKlass::adr_inlineklass_fixed_block_offset()), TypeRawPtr::BOTTOM, T_ADDRESS);\n+    Node* pack_handler = make_load(fast_oop_ctrl, fast_oop_rawmem, fixed_block, in_bytes(InlineKlass::pack_handler_offset()), TypeRawPtr::BOTTOM, T_ADDRESS);\n+    handler_call = new CallLeafNoFPNode(OptoRuntime::pack_inline_type_Type(),\n+                                        NULL,\n+                                        \"pack handler\",\n+                                        TypeRawPtr::BOTTOM);\n+    handler_call->init_req(TypeFunc::Control, fast_oop_ctrl);\n+    handler_call->init_req(TypeFunc::Memory, fast_oop_rawmem);\n+    handler_call->init_req(TypeFunc::I_O, top());\n+    handler_call->init_req(TypeFunc::FramePtr, call->in(TypeFunc::FramePtr));\n+    handler_call->init_req(TypeFunc::ReturnAdr, top());\n+    handler_call->init_req(TypeFunc::Parms, pack_handler);\n+    handler_call->init_req(TypeFunc::Parms+1, fast_oop);\n@@ -2768,4 +2783,1 @@\n-    slowpath_bol = intcon(1);\n-    top_adr = top();\n-    old_top = top();\n-    new_top = top();\n+    needgc_ctrl = allocation_ctl;\n@@ -2773,5 +2785,0 @@\n-  IfNode* slowpath_iff = new IfNode(allocation_ctl, slowpath_bol, PROB_UNLIKELY_MAG(4), COUNT_UNKNOWN);\n-  transform_later(slowpath_iff);\n-\n-  Node* slowpath_true = new IfTrueNode(slowpath_iff);\n-  transform_later(slowpath_true);\n@@ -2779,0 +2786,1 @@\n+  \/\/ Allocation failed, fall back to a runtime call\n@@ -2783,1 +2791,1 @@\n-  slow_call->init_req(TypeFunc::Control, slowpath_true);\n+  slow_call->init_req(TypeFunc::Control, needgc_ctrl);\n@@ -2807,1 +2815,0 @@\n-\n@@ -2812,25 +2819,0 @@\n-  Node* slowpath_false = new IfFalseNode(slowpath_iff);\n-  transform_later(slowpath_false);\n-  Node* rawmem = new StorePNode(slowpath_false, mem, top_adr, TypeRawPtr::BOTTOM, new_top, MemNode::unordered);\n-  transform_later(rawmem);\n-  Node* mark_node = makecon(TypeRawPtr::make((address)markWord::inline_type_prototype().value()));\n-  rawmem = make_store(slowpath_false, rawmem, old_top, oopDesc::mark_offset_in_bytes(), mark_node, T_ADDRESS);\n-  rawmem = make_store(slowpath_false, rawmem, old_top, oopDesc::klass_offset_in_bytes(), klass_node, T_METADATA);\n-  if (UseCompressedClassPointers) {\n-    rawmem = make_store(slowpath_false, rawmem, old_top, oopDesc::klass_gap_offset_in_bytes(), intcon(0), T_INT);\n-  }\n-  Node* fixed_block  = make_load(slowpath_false, rawmem, klass_node, in_bytes(InstanceKlass::adr_inlineklass_fixed_block_offset()), TypeRawPtr::BOTTOM, T_ADDRESS);\n-  Node* pack_handler = make_load(slowpath_false, rawmem, fixed_block, in_bytes(InlineKlass::pack_handler_offset()), TypeRawPtr::BOTTOM, T_ADDRESS);\n-\n-  CallLeafNoFPNode* handler_call = new CallLeafNoFPNode(OptoRuntime::pack_inline_type_Type(),\n-                                                        NULL,\n-                                                        \"pack handler\",\n-                                                        TypeRawPtr::BOTTOM);\n-  handler_call->init_req(TypeFunc::Control, slowpath_false);\n-  handler_call->init_req(TypeFunc::Memory, rawmem);\n-  handler_call->init_req(TypeFunc::I_O, top());\n-  handler_call->init_req(TypeFunc::FramePtr, call->in(TypeFunc::FramePtr));\n-  handler_call->init_req(TypeFunc::ReturnAdr, top());\n-  handler_call->init_req(TypeFunc::Parms, pack_handler);\n-  handler_call->init_req(TypeFunc::Parms+1, old_top);\n-\n@@ -2842,1 +2824,3 @@\n-      handler_call->init_req(i+1, top());\n+      if (alloc_in_place) {\n+        handler_call->init_req(i+1, top());\n+      }\n@@ -2847,1 +2831,3 @@\n-    handler_call->init_req(i+1, proj);\n+    if (alloc_in_place) {\n+      handler_call->init_req(i+1, proj);\n+    }\n@@ -2849,1 +2835,0 @@\n-\n@@ -2853,5 +2838,3 @@\n-  transform_later(handler_call);\n-\n-  Node* handler_ctl = transform_later(new ProjNode(handler_call, TypeFunc::Control));\n-  rawmem = transform_later(new ProjNode(handler_call, TypeFunc::Memory));\n-  Node* slowpath_false_res = transform_later(new ProjNode(handler_call, TypeFunc::Parms));\n+  if (alloc_in_place) {\n+    transform_later(handler_call);\n+  }\n@@ -2859,3 +2842,11 @@\n-  MergeMemNode* slowpath_false_mem = MergeMemNode::make(mem);\n-  slowpath_false_mem->set_memory_at(Compile::AliasIdxRaw, rawmem);\n-  transform_later(slowpath_false_mem);\n+  Node* fast_ctl = NULL;\n+  Node* fast_res = NULL;\n+  MergeMemNode* fast_mem = NULL;\n+  if (alloc_in_place) {\n+    fast_ctl = transform_later(new ProjNode(handler_call, TypeFunc::Control));\n+    Node* rawmem = transform_later(new ProjNode(handler_call, TypeFunc::Memory));\n+    fast_res = transform_later(new ProjNode(handler_call, TypeFunc::Parms));\n+    fast_mem = MergeMemNode::make(mem);\n+    fast_mem->set_memory_at(Compile::AliasIdxRaw, rawmem);\n+    transform_later(fast_mem);\n+  }\n@@ -2863,1 +2854,1 @@\n-  Node* r = new RegionNode(4);\n+  Node* r = new RegionNode(alloc_in_place ? 4 : 3);\n@@ -2867,1 +2858,0 @@\n-\n@@ -2876,5 +2866,6 @@\n-  r->init_req(3, handler_ctl);\n-  mem_phi->init_req(3, slowpath_false_mem);\n-  io_phi->init_req(3, io);\n-  res_phi->init_req(3, slowpath_false_res);\n-\n+  if (alloc_in_place) {\n+    r->init_req(3, fast_ctl);\n+    mem_phi->init_req(3, fast_mem);\n+    io_phi->init_req(3, io);\n+    res_phi->init_req(3, fast_res);\n+  }\n@@ -3235,1 +3226,0 @@\n-      assert(C->macro_count() == (old_macro_count - 1), \"expansion must have deleted one node from macro list\");\n@@ -3239,1 +3229,0 @@\n-      assert(C->macro_count() == (old_macro_count - 1), \"expansion must have deleted one node from macro list\");\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":67,"deletions":78,"binary":false,"changes":145,"status":"modified"}]}