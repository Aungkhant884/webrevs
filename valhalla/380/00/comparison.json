{"files":[{"patch":"@@ -4429,1 +4429,1 @@\n-                } else if (site.isPrimitiveClass() && resultInfo.pkind.contains(KindSelector.TYP) && (name == names.ref || name == names.val)) {\n+                } else if (site.isPrimitiveClass() && isType(location) && resultInfo.pkind.contains(KindSelector.TYP) && (name == names.ref || name == names.val)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8264977\n+ * @summary A primitive class field by name val confuses javac\n+ * @compile\/fail\/ref=ValRefTokensNegativeTest.out -XDrawDiagnostics ValRefTokensNegativeTest.java\n+ *\/\n+\n+public class ValRefTokensNegativeTest  {\n+\n+    ValRefTokensNegativeTest.ref aa = null;\n+    static ValRefTokensNegativeTest.val bb = ValRefTokensNegativeTest.default;\n+\n+    EmptyValue empty = EmptyValue.default;\n+\n+    static class ValRefTokensTestWrapper {\n+       ValRefTokensNegativeTest val = ValRefTokensNegativeTest.default;\n+       ValRefTokensNegativeTest ref = ValRefTokensNegativeTest.default;\n+    }\n+\n+    public EmptyValue test139(int x) {\n+        ValRefTokensTestWrapper w = new ValRefTokensTestWrapper();\n+        return x == 0 ? w.val.empty : w.ref.empty;\n+    }\n+\n+    int valx() {\n+        return EmptyValue.val.x;\n+    }\n+\n+    int refx() {\n+        return EmptyValue.ref.x;\n+    }\n+\n+    static class EmptyValue {\n+        static int x = 42;\n+    }\n+\n+    public static void main(String [] args) {\n+        if (new ValRefTokensNegativeTest().valx() != new ValRefTokensNegativeTest().refx())\n+            throw new AssertionError(\"Broken\");\n+        if (new ValRefTokensNegativeTest().test139(0).x != new ValRefTokensNegativeTest().test139(1).x)\n+            throw new AssertionError(\"Broken\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValRefTokensNegativeTest.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+ValRefTokensNegativeTest.java:10:29: compiler.err.cant.resolve.location: kindname.class, ref, , , (compiler.misc.location: kindname.class, ValRefTokensNegativeTest, null)\n+ValRefTokensNegativeTest.java:11:36: compiler.err.cant.resolve.location: kindname.class, val, , , (compiler.misc.location: kindname.class, ValRefTokensNegativeTest, null)\n+ValRefTokensNegativeTest.java:26:26: compiler.err.cant.resolve.location: kindname.variable, val, , , (compiler.misc.location: kindname.class, ValRefTokensNegativeTest.EmptyValue, null)\n+ValRefTokensNegativeTest.java:30:26: compiler.err.cant.resolve.location: kindname.variable, ref, , , (compiler.misc.location: kindname.class, ValRefTokensNegativeTest.EmptyValue, null)\n+4 errors\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValRefTokensNegativeTest.out","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264977\n+ * @summary A primitive class field by name val confuses javac\n+ * @run main ValRefTokensTest\n+ *\/\n+\n+public primitive class ValRefTokensTest  {\n+\n+    ValRefTokensTest.ref aa = null;\n+    static ValRefTokensTest.val bb = ValRefTokensTest.default;\n+\n+    EmptyValue empty = EmptyValue.default;\n+\n+    static primitive class ValRefTokensTestWrapper {\n+       ValRefTokensTest val = ValRefTokensTest.default;\n+       ValRefTokensTest ref = ValRefTokensTest.default;\n+    }\n+\n+    public EmptyValue test139(int x) {\n+        ValRefTokensTestWrapper w = new ValRefTokensTestWrapper();\n+        return x == 0 ? w.val.empty : w.ref.empty;\n+    }\n+\n+    int valx() {\n+        return EmptyValue.val.x;\n+    }\n+\n+    int refx() {\n+        return EmptyValue.ref.x;\n+    }\n+\n+    static primitive class EmptyValue {\n+        static int x = 42;\n+    }\n+\n+    public static void main(String [] args) {\n+        if (new ValRefTokensTest().valx() != new ValRefTokensTest().refx())\n+            throw new AssertionError(\"Broken\");\n+        if (new ValRefTokensTest().test139(0).x != new ValRefTokensTest().test139(1).x)\n+            throw new AssertionError(\"Broken\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/valhalla\/lworld-values\/ValRefTokensTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}