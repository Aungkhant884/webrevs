{"files":[{"patch":"@@ -62,1 +62,6 @@\n-    public Writer newClass(String className, String... originatingClassNames) throws IOException {\n+    public Writer newClass(String className) throws IOException {\n+        return newClass(className, null);\n+    }\n+\n+    @Override\n+    public Writer newClass(String className, String originatingClassNames) throws IOException {\n","filename":"jmh-core-ct\/src\/test\/java\/org\/openjdk\/jmh\/ct\/InMemoryGeneratorDestination.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    public Writer newClass(String className, String... originatingClassNames) throws IOException {\n+    public Writer newClass(String className, String originatingClassNames) throws IOException {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/FileSystemDestination.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    Writer newClass(String className, String... originatingClassNames) throws IOException;\n+    Writer newClass(String className, String originatingClassNames) throws IOException;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/GeneratorDestination.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,4 +57,10 @@\n-    public Writer newClass(String className, String... originatingClassNames) throws IOException {\n-        Element[] originatingElements = new Element[originatingClassNames.length];\n-        for (int cnt = 0; cnt < originatingElements.length; cnt++) {\n-            originatingElements[cnt] = processingEnv.getElementUtils().getTypeElement(originatingClassNames[cnt]);\n+    public Writer newClass(String className) throws IOException {\n+        return newClass(className, null);\n+    }\n+\n+    @Override\n+    public Writer newClass(String className, String originatingClassNames) throws IOException {\n+        if(originatingClassNames != null) {\n+            return processingEnv.getFiler().createSourceFile(className).openWriter();\n+        } else {\n+            return processingEnv.getFiler().createSourceFile(className, originatingElements).openWriter();\n@@ -62,1 +68,0 @@\n-        return processingEnv.getFiler().createSourceFile(className, originatingElements).openWriter();\n","filename":"jmh-generator-annprocess\/src\/main\/java\/org\/openjdk\/jmh\/generators\/annotations\/APGeneratorDestinaton.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}